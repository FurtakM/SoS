// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6712 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8272 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 37922 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 37922 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 37922 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 37922 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 37922 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 37922 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 37922 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 37922 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 37922 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 37922 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 37922 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 37922 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 37922 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 37922 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 37922 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 37922 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ;
6231: PPOPN 1
6233: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6234: LD_EXP 40
6238: PPUSH
6239: CALL_OW 303
6243: PUSH
6244: LD_EXP 40
6248: PPUSH
6249: CALL_OW 301
6253: OR
6254: PUSH
6255: LD_INT 71
6257: PPUSH
6258: CALL_OW 303
6262: OR
6263: PUSH
6264: LD_INT 71
6266: PPUSH
6267: CALL_OW 301
6271: OR
6272: IFFALSE 6595
6274: GO 6276
6276: DISABLE
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: LD_EXP 44
6292: PPUSH
6293: LD_INT 25
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PPUSH
6303: CALL_OW 72
6307: ST_TO_ADDR
// if not tmp then
6308: LD_VAR 0 2
6312: NOT
6313: IFFALSE 6317
// exit ;
6315: GO 6595
// barracks := HexInfo ( 166 , 116 ) ;
6317: LD_ADDR_VAR 0 4
6321: PUSH
6322: LD_INT 166
6324: PPUSH
6325: LD_INT 116
6327: PPUSH
6328: CALL_OW 428
6332: ST_TO_ADDR
// for i in tmp do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6357
// ComExitBuilding ( i ) ;
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 122
6355: GO 6343
6357: POP
6358: POP
// repeat wait ( 0 0$1 ) ;
6359: LD_INT 35
6361: PPUSH
6362: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_EXP 44
6375: PPUSH
6376: LD_INT 25
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 50
6388: PUSH
6389: EMPTY
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_INT 21
6408: PPUSH
6409: LD_INT 81
6411: PUSH
6412: LD_INT 6
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 70
6423: ST_TO_ADDR
// if enemy then
6424: LD_VAR 0 3
6428: IFFALSE 6473
// begin for i in tmp do
6430: LD_ADDR_VAR 0 1
6434: PUSH
6435: LD_VAR 0 2
6439: PUSH
6440: FOR_IN
6441: IFFALSE 6469
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6443: LD_VAR 0 1
6447: PPUSH
6448: LD_VAR 0 3
6452: PPUSH
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 74
6462: PPUSH
6463: CALL_OW 115
6467: GO 6440
6469: POP
6470: POP
// end else
6471: GO 6588
// begin for i in tmp do
6473: LD_ADDR_VAR 0 1
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: FOR_IN
6484: IFFALSE 6586
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6486: LD_VAR 0 1
6490: PPUSH
6491: CALL_OW 314
6495: PUSH
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_INT 21
6503: PPUSH
6504: CALL_OW 308
6508: NOT
6509: OR
6510: IFFALSE 6584
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL_OW 256
6521: PUSH
6522: LD_INT 600
6524: LESS
6525: PUSH
6526: LD_VAR 0 4
6530: PPUSH
6531: CALL_OW 302
6535: AND
6536: PUSH
6537: LD_VAR 0 4
6541: PPUSH
6542: CALL_OW 313
6546: PUSH
6547: LD_INT 6
6549: LESS
6550: AND
6551: IFFALSE 6569
// ComEnterUnit ( i , barracks ) else
6553: LD_VAR 0 1
6557: PPUSH
6558: LD_VAR 0 4
6562: PPUSH
6563: CALL_OW 120
6567: GO 6584
// ComMoveXY ( i , 162 , 109 ) ;
6569: LD_VAR 0 1
6573: PPUSH
6574: LD_INT 162
6576: PPUSH
6577: LD_INT 109
6579: PPUSH
6580: CALL_OW 111
6584: GO 6483
6586: POP
6587: POP
// end ; until not tmp ;
6588: LD_VAR 0 2
6592: NOT
6593: IFFALSE 6359
// end ;
6595: PPOPN 4
6597: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6598: LD_INT 106
6600: PPUSH
6601: CALL_OW 303
6605: PUSH
6606: LD_INT 106
6608: PPUSH
6609: CALL_OW 301
6613: OR
6614: IFFALSE 6709
6616: GO 6618
6618: DISABLE
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_EXP 45
6632: PPUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: CALL_OW 72
6647: ST_TO_ADDR
// if not tmp then
6648: LD_VAR 0 2
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6709
// for i in tmp do
6657: LD_ADDR_VAR 0 1
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: FOR_IN
6668: IFFALSE 6707
// begin if IsInUnit ( i ) then
6670: LD_VAR 0 1
6674: PPUSH
6675: CALL_OW 310
6679: IFFALSE 6690
// ComExitBuilding ( i ) ;
6681: LD_VAR 0 1
6685: PPUSH
6686: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 66
6697: PPUSH
6698: LD_INT 128
6700: PPUSH
6701: CALL_OW 171
// end ;
6705: GO 6667
6707: POP
6708: POP
// end ; end_of_file
6709: PPOPN 2
6711: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
6716: PPUSH
// SetBName ( omikron , omikron ) ;
6717: LD_INT 64
6719: PPUSH
6720: LD_STRING omikron
6722: PPUSH
6723: CALL_OW 500
// uc_side := 4 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 4
6734: ST_TO_ADDR
// uc_nation := 1 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 1
6742: ST_TO_ADDR
// omicronSquad := [ ] ;
6743: LD_ADDR_EXP 51
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 2
6767: PUSH
6768: LD_INT 30
6770: PUSH
6771: LD_INT 32
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: LD_INT 31
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: PUSH
6802: FOR_IN
6803: IFFALSE 6860
// begin PrepareHuman ( false , 1 , 1 ) ;
6805: LD_INT 0
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 380
// un := CreateHuman ;
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: CALL_OW 44
6827: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6828: LD_ADDR_EXP 51
6832: PUSH
6833: LD_EXP 51
6837: PUSH
6838: LD_VAR 0 3
6842: UNION
6843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_VAR 0 2
6853: PPUSH
6854: CALL_OW 52
// end ;
6858: GO 6802
6860: POP
6861: POP
// for i := 1 to 3 do
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_INT 3
6874: PUSH
6875: FOR_TO
6876: IFFALSE 6931
// begin PrepareHuman ( false , 2 , 2 ) ;
6878: LD_INT 0
6880: PPUSH
6881: LD_INT 2
6883: PPUSH
6884: LD_INT 2
6886: PPUSH
6887: CALL_OW 380
// un := CreateHuman ;
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: CALL_OW 44
6900: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6901: LD_ADDR_EXP 51
6905: PUSH
6906: LD_EXP 51
6910: PUSH
6911: LD_VAR 0 3
6915: UNION
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_INT 64
6924: PPUSH
6925: CALL_OW 52
// end ;
6929: GO 6875
6931: POP
6932: POP
// for i := 1 to 2 do
6933: LD_ADDR_VAR 0 2
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 7086
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6949: LD_INT 4
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: LD_INT 2
6957: PPUSH
6958: LD_INT 2
6960: PPUSH
6961: LD_INT 1
6963: PPUSH
6964: LD_INT 3
6966: PPUSH
6967: LD_INT 100
6969: PPUSH
6970: CALL 370 0 7
// un := CreateVehicle ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: CALL_OW 45
6983: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6984: LD_ADDR_EXP 51
6988: PUSH
6989: LD_EXP 51
6993: PUSH
6994: LD_VAR 0 3
6998: UNION
6999: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_INT 28
7007: PPUSH
7008: LD_INT 37
7010: PPUSH
7011: LD_INT 6
7013: PPUSH
7014: LD_INT 0
7016: PPUSH
7017: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7021: LD_INT 0
7023: PPUSH
7024: LD_INT 3
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 380
// un := CreateHuman ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7044: LD_ADDR_EXP 51
7048: PUSH
7049: LD_EXP 51
7053: PUSH
7054: LD_VAR 0 3
7058: UNION
7059: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7060: LD_VAR 0 3
7064: PPUSH
7065: LD_EXP 51
7069: PUSH
7070: LD_EXP 51
7074: PUSH
7075: LD_INT 1
7077: MINUS
7078: ARRAY
7079: PPUSH
7080: CALL_OW 52
// end ;
7084: GO 6946
7086: POP
7087: POP
// end ;
7088: LD_VAR 0 1
7092: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7093: LD_INT 0
7095: PPUSH
7096: PPUSH
7097: PPUSH
7098: PPUSH
// uc_side := 4 ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_INT 4
7106: ST_TO_ADDR
// uc_nation := 1 ;
7107: LD_ADDR_OWVAR 21
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// tmp := [ ] ;
7115: LD_ADDR_VAR 0 4
7119: PUSH
7120: EMPTY
7121: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7122: LD_INT 4
7124: PPUSH
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 2
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 4
7139: PPUSH
7140: LD_INT 77
7142: PPUSH
7143: CALL 370 0 7
// un := CreateVehicle ;
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: CALL_OW 45
7156: ST_TO_ADDR
// tmp := tmp union un ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: LD_VAR 0 4
7166: PUSH
7167: LD_VAR 0 3
7171: UNION
7172: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7173: LD_VAR 0 3
7177: PPUSH
7178: LD_INT 2
7180: PPUSH
7181: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7185: LD_VAR 0 3
7189: PPUSH
7190: LD_INT 106
7192: PPUSH
7193: LD_INT 3
7195: PPUSH
7196: LD_INT 0
7198: PPUSH
7199: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7203: LD_INT 0
7205: PPUSH
7206: LD_INT 3
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 380
// un := CreateHuman ;
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: CALL_OW 44
7225: ST_TO_ADDR
// tmp := tmp union un ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_VAR 0 4
7235: PUSH
7236: LD_VAR 0 3
7240: UNION
7241: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7242: LD_VAR 0 3
7246: PPUSH
7247: LD_VAR 0 4
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: LD_INT 1
7259: MINUS
7260: ARRAY
7261: PPUSH
7262: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7266: LD_VAR 0 3
7270: PPUSH
7271: LD_INT 109
7273: PPUSH
7274: LD_INT 9
7276: PPUSH
7277: CALL_OW 111
// wait ( 0 0$1 ) ;
7281: LD_INT 35
7283: PPUSH
7284: CALL_OW 67
// for i := 1 to 2 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 2
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7366
// begin PrepareHuman ( false , 1 , 2 ) ;
7304: LD_INT 0
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 2
7312: PPUSH
7313: CALL_OW 380
// un := CreateHuman ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: CALL_OW 44
7326: ST_TO_ADDR
// tmp := tmp union un ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 3
7341: UNION
7342: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7343: LD_VAR 0 3
7347: PPUSH
7348: LD_INT 105
7350: PPUSH
7351: LD_INT 2
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 50
// end ;
7364: GO 7301
7366: POP
7367: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7368: LD_VAR 0 4
7372: PPUSH
7373: LD_INT 26
7375: PPUSH
7376: LD_INT 35
7378: PPUSH
7379: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7383: LD_INT 35
7385: PPUSH
7386: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7390: LD_VAR 0 4
7394: PPUSH
7395: LD_INT 50
7397: PUSH
7398: EMPTY
7399: LIST
7400: PPUSH
7401: CALL_OW 72
7405: NOT
7406: IFFALSE 7410
// exit ;
7408: GO 7537
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7410: LD_VAR 0 4
7414: PPUSH
7415: LD_INT 91
7417: PUSH
7418: LD_INT 64
7420: PUSH
7421: LD_INT 12
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 72
7433: PUSH
7434: LD_VAR 0 4
7438: EQUAL
7439: IFFALSE 7383
// omicronSquad := omicronSquad union tmp ;
7441: LD_ADDR_EXP 51
7445: PUSH
7446: LD_EXP 51
7450: PUSH
7451: LD_VAR 0 4
7455: UNION
7456: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 4
7466: PPUSH
7467: LD_INT 25
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: FOR_IN
7483: IFFALSE 7535
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7485: LD_VAR 0 2
7489: PPUSH
7490: LD_INT 22
7492: PUSH
7493: LD_INT 4
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 30
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PPUSH
7514: CALL_OW 69
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 74
7528: PPUSH
7529: CALL_OW 120
7533: GO 7482
7535: POP
7536: POP
// end ;
7537: LD_VAR 0 1
7541: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7542: LD_EXP 13
7546: NOT
7547: IFFALSE 8118
7549: GO 7551
7551: DISABLE
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
// begin enable ;
7558: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 21
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: LD_INT 24
7589: PUSH
7590: LD_INT 1000
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 69
7610: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_EXP 51
7620: PPUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: ST_TO_ADDR
// if filter and tmp then
7636: LD_VAR 0 2
7640: PUSH
7641: LD_VAR 0 3
7645: AND
7646: IFFALSE 7719
// begin for i in tmp do
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_VAR 0 3
7657: PUSH
7658: FOR_IN
7659: IFFALSE 7715
// if IsInUnit ( i ) then
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 310
7670: IFFALSE 7683
// ComExitBuilding ( i ) else
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 122
7681: GO 7713
// if not HasTask ( i ) then
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 314
7692: NOT
7693: IFFALSE 7713
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_VAR 0 2
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: CALL_OW 130
7713: GO 7658
7715: POP
7716: POP
// end else
7717: GO 7790
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7719: LD_VAR 0 3
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 54
7729: PUSH
7730: EMPTY
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 72
7741: IFFALSE 7790
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 54
7758: PUSH
7759: EMPTY
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 72
7770: PUSH
7771: FOR_IN
7772: IFFALSE 7788
// ComEnterUnit ( i , omikron ) ;
7774: LD_VAR 0 1
7778: PPUSH
7779: LD_INT 64
7781: PPUSH
7782: CALL_OW 120
7786: GO 7771
7788: POP
7789: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7790: LD_ADDR_VAR 0 2
7794: PUSH
7795: LD_EXP 51
7799: PPUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 2
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PPUSH
7810: CALL_OW 72
7814: ST_TO_ADDR
// if not filter then
7815: LD_VAR 0 2
7819: NOT
7820: IFFALSE 7824
// exit ;
7822: GO 8118
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7824: LD_ADDR_VAR 0 4
7828: PUSH
7829: LD_INT 13
7831: PPUSH
7832: LD_INT 81
7834: PUSH
7835: LD_INT 4
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 70
7846: ST_TO_ADDR
// if enemy then
7847: LD_VAR 0 4
7851: IFFALSE 8118
// begin for i in filter do
7853: LD_ADDR_VAR 0 1
7857: PUSH
7858: LD_VAR 0 2
7862: PUSH
7863: FOR_IN
7864: IFFALSE 8116
// begin tmp := IsDrivenBy ( i ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 311
7880: ST_TO_ADDR
// if not tmp then
7881: LD_VAR 0 3
7885: NOT
7886: IFFALSE 7890
// continue ;
7888: GO 7863
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7890: LD_VAR 0 1
7894: PPUSH
7895: CALL_OW 256
7899: PUSH
7900: LD_INT 600
7902: GREATEREQUAL
7903: PUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 110
7913: PUSH
7914: LD_INT 1
7916: NONEQUAL
7917: AND
7918: IFFALSE 7944
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7920: LD_VAR 0 1
7924: PPUSH
7925: LD_VAR 0 4
7929: PPUSH
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 74
7939: PPUSH
7940: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 256
7953: PUSH
7954: LD_INT 600
7956: LESS
7957: PUSH
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL_OW 110
7967: PUSH
7968: LD_INT 1
7970: NONEQUAL
7971: AND
7972: IFFALSE 8001
// begin SetTag ( i , 1 ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: LD_INT 27
7993: PPUSH
7994: LD_INT 35
7996: PPUSH
7997: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 110
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: PUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: LD_INT 27
8022: PPUSH
8023: LD_INT 35
8025: PPUSH
8026: CALL_OW 297
8030: PUSH
8031: LD_INT 6
8033: LESS
8034: AND
8035: PUSH
8036: LD_VAR 0 3
8040: AND
8041: IFFALSE 8114
// begin ComExitVehicle ( tmp ) ;
8043: LD_VAR 0 3
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8052: LD_VAR 0 3
8056: PPUSH
8057: LD_VAR 0 1
8061: PPUSH
8062: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8066: LD_INT 35
8068: PPUSH
8069: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 256
8082: PUSH
8083: LD_INT 1000
8085: EQUAL
8086: IFFALSE 8066
// ComEnterUnit ( tmp , i ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 120
// SetTag ( i , 0 ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 109
// end ; end ;
8114: GO 7863
8116: POP
8117: POP
// end ; end ;
8118: PPOPN 4
8120: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8121: LD_EXP 13
8125: IFFALSE 8269
8127: GO 8129
8129: DISABLE
8130: LD_INT 0
8132: PPUSH
8133: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_EXP 51
8143: PPUSH
8144: LD_INT 21
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 50
8156: PUSH
8157: EMPTY
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 72
8168: ST_TO_ADDR
// if not tmp then
8169: LD_VAR 0 2
8173: NOT
8174: IFFALSE 8178
// exit ;
8176: GO 8269
// repeat wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in tmp do
8185: LD_ADDR_VAR 0 1
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8260
// begin ComExit ( i ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL 75641 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8207: LD_VAR 0 1
8211: PPUSH
8212: LD_INT 14
8214: PPUSH
8215: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8219: LD_VAR 0 1
8223: PPUSH
8224: LD_INT 14
8226: PPUSH
8227: CALL_OW 308
8231: IFFALSE 8258
// begin tmp := tmp diff i ;
8233: LD_ADDR_VAR 0 2
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: LD_VAR 0 1
8247: DIFF
8248: ST_TO_ADDR
// RemoveUnit ( i ) ;
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 64
// end ; end ;
8258: GO 8195
8260: POP
8261: POP
// until not tmp ;
8262: LD_VAR 0 2
8266: NOT
8267: IFFALSE 8178
// end ; end_of_file
8269: PPOPN 2
8271: END
// export function Action ; var i , un , veh , tmp ; begin
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
// InGameOn ;
8279: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8283: LD_INT 179
8285: PPUSH
8286: LD_INT 5
8288: PPUSH
8289: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8293: LD_ADDR_VAR 0 4
8297: PUSH
8298: LD_INT 2
8300: PPUSH
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 12
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: LD_INT 24
8315: PPUSH
8316: LD_INT 33
8318: PPUSH
8319: CALL 370 0 7
8323: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8324: LD_VAR 0 4
8328: PPUSH
8329: LD_INT 2
8331: PPUSH
8332: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8336: LD_VAR 0 4
8340: PPUSH
8341: LD_INT 178
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8354: LD_EXP 25
8358: PPUSH
8359: LD_VAR 0 4
8363: PPUSH
8364: CALL_OW 52
// if Kamil then
8368: LD_EXP 29
8372: IFFALSE 8407
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8374: LD_EXP 29
8378: PPUSH
8379: LD_INT 207
8381: PPUSH
8382: LD_INT 37
8384: PPUSH
8385: LD_INT 0
8387: PPUSH
8388: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8392: LD_EXP 29
8396: PPUSH
8397: LD_INT 211
8399: PPUSH
8400: LD_INT 38
8402: PPUSH
8403: CALL_OW 118
// end ; if Sophia then
8407: LD_EXP 31
8411: IFFALSE 8446
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8413: LD_EXP 31
8417: PPUSH
8418: LD_INT 209
8420: PPUSH
8421: LD_INT 40
8423: PPUSH
8424: LD_INT 0
8426: PPUSH
8427: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8431: LD_EXP 31
8435: PPUSH
8436: LD_INT 211
8438: PPUSH
8439: LD_INT 38
8441: PPUSH
8442: CALL_OW 118
// end ; if Givi then
8446: LD_EXP 26
8450: IFFALSE 8485
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8452: LD_EXP 26
8456: PPUSH
8457: LD_INT 201
8459: PPUSH
8460: LD_INT 34
8462: PPUSH
8463: LD_INT 0
8465: PPUSH
8466: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8470: LD_EXP 26
8474: PPUSH
8475: LD_INT 206
8477: PPUSH
8478: LD_INT 36
8480: PPUSH
8481: CALL_OW 118
// end ; if Ibrahim then
8485: LD_EXP 28
8489: IFFALSE 8524
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8491: LD_EXP 28
8495: PPUSH
8496: LD_INT 202
8498: PPUSH
8499: LD_INT 39
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8509: LD_EXP 28
8513: PPUSH
8514: LD_INT 206
8516: PPUSH
8517: LD_INT 36
8519: PPUSH
8520: CALL_OW 118
// end ; if Markov then
8524: LD_EXP 32
8528: IFFALSE 8615
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8530: LD_ADDR_VAR 0 4
8534: PUSH
8535: LD_INT 2
8537: PPUSH
8538: LD_INT 2
8540: PPUSH
8541: LD_INT 13
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 1
8549: PPUSH
8550: LD_INT 25
8552: PPUSH
8553: LD_INT 80
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_OWVAR 67
8563: MUL
8564: MINUS
8565: PPUSH
8566: CALL 370 0 7
8570: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8571: LD_VAR 0 4
8575: PPUSH
8576: LD_INT 2
8578: PPUSH
8579: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8583: LD_VAR 0 4
8587: PPUSH
8588: LD_INT 197
8590: PPUSH
8591: LD_INT 35
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8601: LD_EXP 32
8605: PPUSH
8606: LD_VAR 0 4
8610: PPUSH
8611: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8615: LD_ADDR_VAR 0 5
8619: PUSH
8620: LD_EXP 30
8624: PUSH
8625: LD_EXP 37
8629: UNION
8630: ST_TO_ADDR
// for i in tmp do
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_VAR 0 5
8640: PUSH
8641: FOR_IN
8642: IFFALSE 8676
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8644: LD_VAR 0 2
8648: PPUSH
8649: LD_INT 203
8651: PPUSH
8652: LD_INT 41
8654: PPUSH
8655: LD_INT 6
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 50
// ComHold ( i ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 140
// end ;
8674: GO 8641
8676: POP
8677: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8678: LD_INT 22
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 25
8690: PUSH
8691: LD_INT 2
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 69
8706: NOT
8707: IFFALSE 8721
// SetClass ( Heike , 2 ) ;
8709: LD_EXP 25
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8721: LD_EXP 25
8725: PPUSH
8726: LD_INT 183
8728: PPUSH
8729: LD_INT 12
8731: PPUSH
8732: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8736: LD_EXP 25
8740: PPUSH
8741: LD_INT 188
8743: PPUSH
8744: LD_INT 20
8746: PPUSH
8747: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8751: LD_EXP 25
8755: PPUSH
8756: LD_INT 191
8758: PPUSH
8759: LD_INT 25
8761: PPUSH
8762: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8766: LD_EXP 25
8770: PPUSH
8771: LD_INT 203
8773: PPUSH
8774: LD_INT 29
8776: PPUSH
8777: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8781: LD_EXP 25
8785: PPUSH
8786: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8790: LD_INT 35
8792: PPUSH
8793: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8797: LD_EXP 25
8801: PPUSH
8802: CALL_OW 310
8806: NOT
8807: IFFALSE 8790
// CenterOnUnits ( Heike ) ;
8809: LD_EXP 25
8813: PPUSH
8814: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 2
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 21
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: PUSH
8852: LD_EXP 25
8856: PUSH
8857: LD_EXP 32
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: DIFF
8866: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8867: LD_VAR 0 5
8871: PPUSH
8872: LD_EXP 25
8876: PPUSH
8877: CALL_OW 119
// if Givi then
8881: LD_EXP 26
8885: IFFALSE 8903
// ComTurnUnit ( Heike , Givi ) else
8887: LD_EXP 25
8891: PPUSH
8892: LD_EXP 26
8896: PPUSH
8897: CALL_OW 119
8901: GO 8921
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8903: LD_EXP 25
8907: PPUSH
8908: LD_VAR 0 5
8912: PUSH
8913: LD_INT 1
8915: ARRAY
8916: PPUSH
8917: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-Start-1
8928: PPUSH
8929: CALL_OW 88
// if Givi then
8933: LD_EXP 26
8937: IFFALSE 8984
// begin Say ( Givi , DG-Start-2 ) ;
8939: LD_EXP 26
8943: PPUSH
8944: LD_STRING DG-Start-2
8946: PPUSH
8947: CALL_OW 88
// if not Mike then
8951: LD_EXP 27
8955: NOT
8956: IFFALSE 8982
// begin Say ( Givi , DG-Start-b-3 ) ;
8958: LD_EXP 26
8962: PPUSH
8963: LD_STRING DG-Start-b-3
8965: PPUSH
8966: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8970: LD_EXP 25
8974: PPUSH
8975: LD_STRING DH-Start-b-4
8977: PPUSH
8978: CALL_OW 88
// end ; end else
8982: GO 9049
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8984: LD_EXP 37
8988: PPUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 72
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_STRING DArm-Start-a-2
9010: PPUSH
9011: CALL_OW 88
9015: NOT
9016: IFFALSE 9049
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9018: LD_EXP 37
9022: PPUSH
9023: LD_INT 26
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PPUSH
9033: CALL_OW 72
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING DArf-Start-a-2
9044: PPUSH
9045: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9049: LD_EXP 25
9053: PPUSH
9054: LD_INT 211
9056: PPUSH
9057: LD_INT 38
9059: PPUSH
9060: CALL_OW 118
// wait ( 0 0$1 ) ;
9064: LD_INT 35
9066: PPUSH
9067: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9071: LD_EXP 25
9075: PPUSH
9076: LD_STRING DH-Start-3
9078: PPUSH
9079: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9083: LD_EXP 25
9087: PPUSH
9088: LD_STRING DH-Start-4
9090: PPUSH
9091: CALL_OW 88
// InGameOff ;
9095: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9099: LD_STRING Prepare
9101: PPUSH
9102: CALL_OW 337
// SaveForQuickRestart ;
9106: CALL_OW 22
// wait ( 0 0$10 ) ;
9110: LD_INT 350
9112: PPUSH
9113: CALL_OW 67
// if not Aviradze then
9117: LD_EXP 35
9121: NOT
9122: IFFALSE 9126
// exit ;
9124: GO 9366
// SetDir ( Aviradze , 4 ) ;
9126: LD_EXP 35
9130: PPUSH
9131: LD_INT 4
9133: PPUSH
9134: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9138: LD_EXP 35
9142: PPUSH
9143: LD_INT 225
9145: PPUSH
9146: LD_INT 33
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 48
// for i := 1 to 2 do
9156: LD_ADDR_VAR 0 2
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_INT 2
9168: PUSH
9169: FOR_TO
9170: IFFALSE 9301
// begin uc_side := 2 ;
9172: LD_ADDR_OWVAR 20
9176: PUSH
9177: LD_INT 2
9179: ST_TO_ADDR
// uc_nation := 0 ;
9180: LD_ADDR_OWVAR 21
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9188: LD_INT 0
9190: PPUSH
9191: LD_INT 12
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 380
// hc_gallery :=  ;
9201: LD_ADDR_OWVAR 33
9205: PUSH
9206: LD_STRING 
9208: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9209: LD_ADDR_OWVAR 26
9213: PUSH
9214: LD_STRING Artudito
9216: PUSH
9217: LD_STRING Textur
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_VAR 0 2
9228: ARRAY
9229: ST_TO_ADDR
// un := CreateHuman ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_INT 224
9247: PUSH
9248: LD_INT 226
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_VAR 0 2
9259: ARRAY
9260: PPUSH
9261: LD_INT 31
9263: PUSH
9264: LD_INT 35
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_VAR 0 2
9275: ARRAY
9276: PPUSH
9277: LD_INT 0
9279: PPUSH
9280: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9284: LD_VAR 0 3
9288: PPUSH
9289: LD_INT 215
9291: PPUSH
9292: LD_INT 36
9294: PPUSH
9295: CALL_OW 111
// end ;
9299: GO 9169
9301: POP
9302: POP
// hc_name :=  ;
9303: LD_ADDR_OWVAR 26
9307: PUSH
9308: LD_STRING 
9310: ST_TO_ADDR
// InitHc ;
9311: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9315: LD_EXP 35
9319: PPUSH
9320: LD_INT 215
9322: PPUSH
9323: LD_INT 36
9325: PPUSH
9326: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9330: LD_EXP 35
9334: PPUSH
9335: LD_STRING DA-Arrive-1
9337: PPUSH
9338: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9342: LD_EXP 25
9346: PPUSH
9347: LD_STRING DH-Arrive-2
9349: PPUSH
9350: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9354: LD_EXP 35
9358: PPUSH
9359: LD_STRING DA-Arrive-3
9361: PPUSH
9362: CALL_OW 88
// end ;
9366: LD_VAR 0 1
9370: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p ;
9371: LD_EXP 3
9375: IFFALSE 10817
9377: GO 9379
9379: DISABLE
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
9385: PPUSH
// begin DialogueOn ;
9386: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9390: LD_EXP 25
9394: PPUSH
9395: LD_STRING DH-base-1
9397: PPUSH
9398: CALL_OW 88
// if Markov then
9402: LD_EXP 32
9406: IFFALSE 9458
// begin Say ( Markov , DMar-base-2 ) ;
9408: LD_EXP 32
9412: PPUSH
9413: LD_STRING DMar-base-2
9415: PPUSH
9416: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9420: LD_EXP 32
9424: PPUSH
9425: LD_STRING DMar-base-3
9427: PPUSH
9428: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9432: LD_EXP 25
9436: PPUSH
9437: LD_STRING DH-base-4
9439: PPUSH
9440: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9444: LD_EXP 32
9448: PPUSH
9449: LD_STRING DMar-base-5
9451: PPUSH
9452: CALL_OW 88
// end else
9456: GO 9535
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9458: LD_EXP 37
9462: PPUSH
9463: LD_INT 26
9465: PUSH
9466: LD_INT 1
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PPUSH
9473: CALL_OW 72
9477: PUSH
9478: LD_INT 1
9480: ARRAY
9481: PPUSH
9482: LD_STRING DArm-base-a-2
9484: PPUSH
9485: CALL_OW 88
9489: NOT
9490: IFFALSE 9523
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9492: LD_EXP 37
9496: PPUSH
9497: LD_INT 26
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PPUSH
9507: CALL_OW 72
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: LD_STRING DArf-base-a-2
9518: PPUSH
9519: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9523: LD_EXP 25
9527: PPUSH
9528: LD_STRING DH-base-a-3
9530: PPUSH
9531: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9535: LD_EXP 35
9539: PPUSH
9540: LD_STRING DA-base-6
9542: PPUSH
9543: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9547: LD_EXP 35
9551: PPUSH
9552: LD_STRING DA-base-7
9554: PPUSH
9555: CALL_OW 88
// DialogueOff ;
9559: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9563: LD_STRING Flamethrower
9565: PPUSH
9566: CALL_OW 337
// wait ( 2 2$00 ) ;
9570: LD_INT 4200
9572: PPUSH
9573: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9577: LD_EXP 34
9581: PUSH
9582: LD_EXP 27
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: LD_INT 203
9593: PPUSH
9594: LD_INT 37
9596: PPUSH
9597: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9601: LD_INT 22
9603: PUSH
9604: LD_INT 2
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 92
9613: PUSH
9614: LD_INT 203
9616: PUSH
9617: LD_INT 37
9619: PUSH
9620: LD_INT 10
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PPUSH
9633: CALL_OW 69
9637: NOT
9638: IFFALSE 9678
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9640: LD_EXP 34
9644: PUSH
9645: LD_EXP 27
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PPUSH
9654: LD_EXP 25
9658: PPUSH
9659: CALL_OW 250
9663: PPUSH
9664: LD_EXP 25
9668: PPUSH
9669: CALL_OW 251
9673: PPUSH
9674: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9678: LD_INT 35
9680: PPUSH
9681: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9685: LD_INT 2
9687: PPUSH
9688: LD_EXP 34
9692: PPUSH
9693: CALL_OW 292
9697: PUSH
9698: LD_EXP 34
9702: PPUSH
9703: LD_EXP 25
9707: PPUSH
9708: CALL_OW 296
9712: PUSH
9713: LD_INT 8
9715: LESS
9716: PUSH
9717: LD_EXP 34
9721: PPUSH
9722: LD_INT 22
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 21
9734: PUSH
9735: LD_INT 3
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PPUSH
9746: CALL_OW 69
9750: PPUSH
9751: LD_EXP 34
9755: PPUSH
9756: CALL_OW 74
9760: PPUSH
9761: CALL_OW 296
9765: PUSH
9766: LD_INT 7
9768: LESS
9769: OR
9770: AND
9771: PUSH
9772: LD_EXP 34
9776: PPUSH
9777: LD_INT 10
9779: PPUSH
9780: CALL_OW 308
9784: NOT
9785: AND
9786: IFFALSE 9678
// InGameOn ;
9788: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9792: LD_EXP 34
9796: PPUSH
9797: CALL_OW 87
// if IsInUnit ( Heike ) then
9801: LD_EXP 25
9805: PPUSH
9806: CALL_OW 310
9810: IFFALSE 9821
// ComExitBuilding ( Heike ) ;
9812: LD_EXP 25
9816: PPUSH
9817: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9821: LD_EXP 34
9825: PUSH
9826: LD_EXP 27
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: LD_EXP 25
9839: PPUSH
9840: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9844: LD_EXP 25
9848: PPUSH
9849: LD_EXP 34
9853: PPUSH
9854: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9858: LD_INT 22
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 91
9870: PUSH
9871: LD_EXP 34
9875: PUSH
9876: LD_INT 10
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 3
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PPUSH
9899: CALL_OW 69
9903: IFFALSE 9929
// begin Say ( Kurt , DKs-scout-1 ) ;
9905: LD_EXP 34
9909: PPUSH
9910: LD_STRING DKs-scout-1
9912: PPUSH
9913: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9917: LD_EXP 25
9921: PPUSH
9922: LD_STRING DH-scout-2
9924: PPUSH
9925: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9929: LD_EXP 25
9933: PPUSH
9934: CALL_OW 85
// if IsInUnit ( Heike ) then
9938: LD_EXP 25
9942: PPUSH
9943: CALL_OW 310
9947: IFFALSE 9958
// ComExit ( Heike ) ;
9949: LD_EXP 25
9953: PPUSH
9954: CALL 75641 0 1
// repeat wait ( 0 0$1 ) ;
9958: LD_INT 35
9960: PPUSH
9961: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9965: LD_EXP 25
9969: PPUSH
9970: LD_EXP 34
9974: PPUSH
9975: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9979: LD_EXP 25
9983: PPUSH
9984: LD_EXP 34
9988: PPUSH
9989: CALL_OW 296
9993: PUSH
9994: LD_INT 6
9996: LESS
9997: IFFALSE 9958
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9999: LD_EXP 34
10003: PUSH
10004: LD_EXP 27
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_EXP 25
10017: PPUSH
10018: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10022: LD_EXP 34
10026: PPUSH
10027: LD_STRING DKs-scout-3
10029: PPUSH
10030: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10034: LD_EXP 30
10038: PUSH
10039: LD_EXP 30
10043: PPUSH
10044: LD_EXP 34
10048: PPUSH
10049: CALL_OW 296
10053: PUSH
10054: LD_INT 15
10056: LESS
10057: AND
10058: IFFALSE 10281
// begin p := 1 ;
10060: LD_ADDR_VAR 0 4
10064: PUSH
10065: LD_INT 1
10067: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10068: LD_EXP 30
10072: PPUSH
10073: CALL_OW 310
10077: IFFALSE 10088
// ComExit ( Kaia ) ;
10079: LD_EXP 30
10083: PPUSH
10084: CALL 75641 0 1
// wait ( 0 0$1 ) ;
10088: LD_INT 35
10090: PPUSH
10091: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10095: LD_EXP 30
10099: PPUSH
10100: LD_EXP 34
10104: PPUSH
10105: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10109: LD_INT 35
10111: PPUSH
10112: CALL_OW 67
// p := Inc ( p ) ;
10116: LD_ADDR_VAR 0 4
10120: PUSH
10121: LD_VAR 0 4
10125: PPUSH
10126: CALL 76604 0 1
10130: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10131: LD_EXP 30
10135: PPUSH
10136: LD_EXP 34
10140: PPUSH
10141: CALL_OW 296
10145: PUSH
10146: LD_INT 6
10148: LESS
10149: PUSH
10150: LD_VAR 0 4
10154: PUSH
10155: LD_INT 12
10157: GREATER
10158: OR
10159: IFFALSE 10109
// ComTurnUnit ( Kaia , Kurt ) ;
10161: LD_EXP 30
10165: PPUSH
10166: LD_EXP 34
10170: PPUSH
10171: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10175: LD_EXP 30
10179: PPUSH
10180: LD_STRING DK-scout-4
10182: PPUSH
10183: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10187: LD_EXP 34
10191: PPUSH
10192: LD_EXP 30
10196: PPUSH
10197: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10201: LD_EXP 34
10205: PPUSH
10206: LD_STRING DKs-scout-5
10208: PPUSH
10209: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10213: LD_EXP 30
10217: PPUSH
10218: LD_STRING DK-scout-6
10220: PPUSH
10221: CALL_OW 88
// if Mike then
10225: LD_EXP 27
10229: IFFALSE 10281
// begin Say ( Mike , DM-scout-7 ) ;
10231: LD_EXP 27
10235: PPUSH
10236: LD_STRING DM-scout-7
10238: PPUSH
10239: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10243: LD_EXP 30
10247: PPUSH
10248: LD_EXP 27
10252: PPUSH
10253: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10257: LD_EXP 30
10261: PPUSH
10262: LD_STRING DK-scout-8
10264: PPUSH
10265: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10269: LD_EXP 27
10273: PPUSH
10274: LD_STRING DM-scout-9
10276: PPUSH
10277: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10281: LD_INT 184
10283: PPUSH
10284: LD_INT 100
10286: PPUSH
10287: LD_INT 2
10289: PPUSH
10290: LD_INT 12
10292: NEG
10293: PPUSH
10294: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10298: LD_INT 184
10300: PPUSH
10301: LD_INT 100
10303: PPUSH
10304: LD_INT 2
10306: PPUSH
10307: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10311: LD_INT 184
10313: PPUSH
10314: LD_INT 100
10316: PPUSH
10317: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10321: LD_EXP 34
10325: PPUSH
10326: LD_STRING DKs-scout-10
10328: PPUSH
10329: CALL_OW 88
// wait ( 0 0$1 ) ;
10333: LD_INT 35
10335: PPUSH
10336: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10340: LD_INT 144
10342: PPUSH
10343: LD_INT 65
10345: PPUSH
10346: LD_INT 2
10348: PPUSH
10349: LD_INT 12
10351: NEG
10352: PPUSH
10353: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10357: LD_INT 144
10359: PPUSH
10360: LD_INT 65
10362: PPUSH
10363: LD_INT 2
10365: PPUSH
10366: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10370: LD_INT 144
10372: PPUSH
10373: LD_INT 65
10375: PPUSH
10376: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10380: LD_EXP 34
10384: PPUSH
10385: LD_STRING DKs-scout-11
10387: PPUSH
10388: CALL_OW 88
// wait ( 0 0$1 ) ;
10392: LD_INT 35
10394: PPUSH
10395: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10399: LD_EXP 34
10403: PPUSH
10404: CALL_OW 87
// if Mike and not Givi then
10408: LD_EXP 27
10412: PUSH
10413: LD_EXP 26
10417: NOT
10418: AND
10419: IFFALSE 10445
// begin Say ( Mike , DM-scout-a-1 ) ;
10421: LD_EXP 27
10425: PPUSH
10426: LD_STRING DM-scout-a-1
10428: PPUSH
10429: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10433: LD_EXP 25
10437: PPUSH
10438: LD_STRING DH-scout-a-2
10440: PPUSH
10441: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10445: LD_EXP 34
10449: PUSH
10450: LD_EXP 27
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: LD_INT 2
10461: PPUSH
10462: CALL_OW 235
// InGameOff ;
10466: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10470: LD_STRING Hill
10472: PPUSH
10473: CALL_OW 337
// Hint ( BunkerHill ) ;
10477: LD_STRING BunkerHill
10479: PPUSH
10480: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
10484: LD_INT 20
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 424
// allowToPatrol := true ;
10494: LD_ADDR_EXP 12
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10502: LD_INT 3150
10504: PPUSH
10505: CALL_OW 67
// InitHc ;
10509: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: DOUBLE
10519: LD_INT 1
10521: DEC
10522: ST_TO_ADDR
10523: LD_INT 3
10525: PUSH
10526: LD_INT 3
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_OWVAR 67
10545: ARRAY
10546: PUSH
10547: FOR_TO
10548: IFFALSE 10815
// begin uc_side := 2 ;
10550: LD_ADDR_OWVAR 20
10554: PUSH
10555: LD_INT 2
10557: ST_TO_ADDR
// uc_nation := 2 ;
10558: LD_ADDR_OWVAR 21
10562: PUSH
10563: LD_INT 2
10565: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10566: LD_INT 0
10568: PPUSH
10569: LD_INT 1
10571: PUSH
10572: LD_INT 3
10574: PUSH
10575: LD_INT 1
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: LD_VAR 0 1
10587: PUSH
10588: LD_INT 3
10590: MOD
10591: PUSH
10592: LD_INT 1
10594: PLUS
10595: ARRAY
10596: PPUSH
10597: LD_INT 3
10599: PUSH
10600: LD_INT 2
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: LD_INT 2
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: LD_OWVAR 67
10619: ARRAY
10620: PPUSH
10621: CALL_OW 380
// un := CreateHuman ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: CALL_OW 44
10634: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10635: LD_ADDR_EXP 37
10639: PUSH
10640: LD_EXP 37
10644: PUSH
10645: LD_VAR 0 2
10649: UNION
10650: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10651: LD_INT 2
10653: PPUSH
10654: LD_INT 2
10656: PPUSH
10657: LD_INT 13
10659: PPUSH
10660: LD_INT 2
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_VAR 0 1
10674: PUSH
10675: LD_INT 2
10677: MOD
10678: PUSH
10679: LD_INT 1
10681: PLUS
10682: ARRAY
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_INT 27
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: LD_INT 27
10695: PUSH
10696: LD_INT 23
10698: PUSH
10699: LD_INT 23
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: LD_OWVAR 67
10713: PUSH
10714: LD_INT 0
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 12
10724: PLUS
10725: ARRAY
10726: PPUSH
10727: LD_INT 77
10729: PPUSH
10730: CALL 370 0 7
// veh := CreateVehicle ;
10734: LD_ADDR_VAR 0 3
10738: PUSH
10739: CALL_OW 45
10743: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 2
10751: PPUSH
10752: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_INT 178
10763: PPUSH
10764: LD_INT 2
10766: PPUSH
10767: LD_INT 2
10769: PPUSH
10770: LD_INT 0
10772: PPUSH
10773: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10777: LD_VAR 0 2
10781: PPUSH
10782: LD_VAR 0 3
10786: PPUSH
10787: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10791: LD_VAR 0 2
10795: PPUSH
10796: LD_INT 183
10798: PPUSH
10799: LD_INT 11
10801: PPUSH
10802: CALL_OW 111
// wait ( 0 0$2 ) ;
10806: LD_INT 70
10808: PPUSH
10809: CALL_OW 67
// end ;
10813: GO 10547
10815: POP
10816: POP
// end ;
10817: PPOPN 4
10819: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10820: LD_EXP 4
10824: PUSH
10825: LD_EXP 35
10829: PPUSH
10830: CALL_OW 302
10834: AND
10835: IFFALSE 10884
10837: GO 10839
10839: DISABLE
// begin DialogueOn ;
10840: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10844: LD_EXP 35
10848: PPUSH
10849: LD_STRING DA-lab-1
10851: PPUSH
10852: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10856: LD_EXP 35
10860: PPUSH
10861: LD_STRING DA-lab-2
10863: PPUSH
10864: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10868: LD_EXP 25
10872: PPUSH
10873: LD_STRING DH-lab-3
10875: PPUSH
10876: CALL_OW 88
// DialogueOff ;
10880: CALL_OW 7
// end ;
10884: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10885: LD_INT 17
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: CALL_OW 321
10895: PUSH
10896: LD_INT 2
10898: EQUAL
10899: IFFALSE 11031
10901: GO 10903
10903: DISABLE
10904: LD_INT 0
10906: PPUSH
// begin DialogueOn ;
10907: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10911: LD_EXP 35
10915: PPUSH
10916: LD_STRING DA-Cam-1
10918: PPUSH
10919: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10923: LD_EXP 35
10927: PPUSH
10928: LD_STRING DA-Cam-2
10930: PPUSH
10931: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10935: LD_EXP 35
10939: PPUSH
10940: LD_STRING DA-Cam-3
10942: PPUSH
10943: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10947: LD_EXP 25
10951: PPUSH
10952: LD_STRING DH-Cam-4
10954: PPUSH
10955: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10959: LD_EXP 30
10963: PPUSH
10964: LD_STRING DK-Cam-5
10966: PPUSH
10967: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10971: LD_EXP 30
10975: PPUSH
10976: LD_STRING DK-Cam-6
10978: PPUSH
10979: CALL_OW 88
// DialogueOff ;
10983: CALL_OW 7
// Query ( Camera ) ;
10987: LD_STRING Camera
10989: PPUSH
10990: CALL_OW 97
// hiddenCameraAllowed := true ;
10994: LD_ADDR_EXP 5
10998: PUSH
10999: LD_INT 1
11001: ST_TO_ADDR
// for i in camAreas do
11002: LD_ADDR_VAR 0 1
11006: PUSH
11007: LD_EXP 8
11011: PUSH
11012: FOR_IN
11013: IFFALSE 11029
// SetAreaMapShow ( i , 1 ) ;
11015: LD_VAR 0 1
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 424
11027: GO 11012
11029: POP
11030: POP
// end ;
11031: PPOPN 1
11033: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11034: LD_EXP 8
11038: NOT
11039: PUSH
11040: LD_EXP 5
11044: AND
11045: IFFALSE 11143
11047: GO 11049
11049: DISABLE
11050: LD_INT 0
11052: PPUSH
// begin stop_talking := true ;
11053: LD_ADDR_OWVAR 56
11057: PUSH
11058: LD_INT 1
11060: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 22
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 23
11088: PUSH
11089: LD_INT 2
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 69
11105: PUSH
11106: FOR_IN
11107: IFFALSE 11126
// AddExperience ( i , 2 , 450 ) ;
11109: LD_VAR 0 1
11113: PPUSH
11114: LD_INT 2
11116: PPUSH
11117: LD_INT 450
11119: PPUSH
11120: CALL_OW 492
11124: GO 11106
11126: POP
11127: POP
// stop_talking := false ;
11128: LD_ADDR_OWVAR 56
11132: PUSH
11133: LD_INT 0
11135: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11136: LD_STRING ACH_CAMERA
11138: PPUSH
11139: CALL_OW 543
// end ;
11143: PPOPN 1
11145: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11146: LD_EXP 9
11150: PUSH
11151: LD_EXP 11
11155: NOT
11156: AND
11157: IFFALSE 11216
11159: GO 11161
11161: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11162: LD_EXP 9
11166: PPUSH
11167: CALL_OW 250
11171: PPUSH
11172: LD_EXP 9
11176: PPUSH
11177: CALL_OW 251
11181: PPUSH
11182: LD_INT 2
11184: PPUSH
11185: LD_INT 6
11187: NEG
11188: PPUSH
11189: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11193: LD_EXP 9
11197: PPUSH
11198: CALL_OW 87
// wait ( 0 0$1 ) ;
11202: LD_INT 35
11204: PPUSH
11205: CALL_OW 67
// YouLost ( Spotted ) ;
11209: LD_STRING Spotted
11211: PPUSH
11212: CALL_OW 104
// end ;
11216: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11217: LD_INT 3
11219: PUSH
11220: LD_INT 6
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: LD_INT 2
11229: PPUSH
11230: LD_EXP 47
11234: PPUSH
11235: CALL 1034 0 3
11239: IFFALSE 11272
11241: GO 11243
11243: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11244: LD_ADDR_EXP 9
11248: PUSH
11249: LD_INT 3
11251: PUSH
11252: LD_INT 6
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PPUSH
11259: LD_INT 2
11261: PPUSH
11262: LD_EXP 47
11266: PPUSH
11267: CALL 1034 0 3
11271: ST_TO_ADDR
11272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11273: LD_INT 22
11275: PUSH
11276: LD_INT 6
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 30
11285: PUSH
11286: LD_INT 32
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 3
11295: PUSH
11296: LD_INT 24
11298: PUSH
11299: LD_INT 1000
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: PPUSH
11315: CALL_OW 69
11319: IFFALSE 11380
11321: GO 11323
11323: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11324: LD_ADDR_EXP 9
11328: PUSH
11329: LD_INT 22
11331: PUSH
11332: LD_INT 6
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 30
11341: PUSH
11342: LD_INT 32
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 3
11351: PUSH
11352: LD_INT 24
11354: PUSH
11355: LD_INT 1000
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 69
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: ST_TO_ADDR
11380: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11381: LD_EXP 9
11385: PUSH
11386: LD_INT 21
11388: PPUSH
11389: LD_INT 21
11391: PUSH
11392: LD_INT 3
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 3
11401: PUSH
11402: LD_INT 24
11404: PUSH
11405: LD_INT 1000
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 70
11424: AND
11425: IFFALSE 11664
11427: GO 11429
11429: DISABLE
11430: LD_INT 0
11432: PPUSH
11433: PPUSH
11434: PPUSH
11435: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11436: LD_ADDR_VAR 0 4
11440: PUSH
11441: LD_EXP 42
11445: PUSH
11446: LD_EXP 44
11450: PUSH
11451: LD_EXP 45
11455: UNION
11456: PPUSH
11457: LD_INT 3
11459: PUSH
11460: LD_INT 25
11462: PUSH
11463: LD_INT 1
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 72
11478: UNION
11479: ST_TO_ADDR
// for i in noncombat do
11480: LD_ADDR_VAR 0 1
11484: PUSH
11485: LD_VAR 0 4
11489: PUSH
11490: FOR_IN
11491: IFFALSE 11587
// begin if IsInUnit ( i ) then
11493: LD_VAR 0 1
11497: PPUSH
11498: CALL_OW 310
11502: IFFALSE 11513
// ComExitBuilding ( i ) ;
11504: LD_VAR 0 1
11508: PPUSH
11509: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11513: LD_VAR 0 1
11517: PPUSH
11518: LD_INT 114
11520: PPUSH
11521: LD_INT 97
11523: PPUSH
11524: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11528: LD_VAR 0 1
11532: PPUSH
11533: LD_INT 99
11535: PPUSH
11536: LD_INT 128
11538: PPUSH
11539: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11543: LD_VAR 0 1
11547: PPUSH
11548: LD_INT 91
11550: PPUSH
11551: LD_INT 145
11553: PPUSH
11554: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11558: LD_VAR 0 1
11562: PPUSH
11563: LD_INT 82
11565: PPUSH
11566: LD_INT 153
11568: PPUSH
11569: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11573: LD_VAR 0 1
11577: PPUSH
11578: LD_INT 16
11580: PPUSH
11581: CALL_OW 173
// end ;
11585: GO 11490
11587: POP
11588: POP
// if not allowHeikeAttack then
11589: LD_EXP 11
11593: NOT
11594: IFFALSE 11598
// exit ;
11596: GO 11664
// wait ( 0 0$05 ) ;
11598: LD_INT 175
11600: PPUSH
11601: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11605: LD_EXP 40
11609: PPUSH
11610: LD_STRING D9a-Kur-1
11612: PPUSH
11613: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11617: LD_EXP 43
11621: PPUSH
11622: LD_STRING D9a-Bur-1
11624: PPUSH
11625: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11629: LD_EXP 40
11633: PPUSH
11634: LD_STRING D9a-Kur-2
11636: PPUSH
11637: CALL_OW 94
// omicronFall := true ;
11641: LD_ADDR_EXP 13
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11649: LD_INT 105
11651: PPUSH
11652: CALL_OW 67
// retreatFromOmicron := true ;
11656: LD_ADDR_EXP 20
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// end ;
11664: PPOPN 4
11666: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11667: LD_INT 16
11669: PPUSH
11670: LD_INT 3
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 2
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 23
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 70
11705: IFFALSE 11788
11707: GO 11709
11709: DISABLE
11710: LD_INT 0
11712: PPUSH
// begin enable ;
11713: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11714: LD_ADDR_VAR 0 1
11718: PUSH
11719: LD_INT 16
11721: PPUSH
11722: LD_INT 3
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_INT 2
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: LD_INT 23
11741: PUSH
11742: LD_INT 3
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PPUSH
11753: CALL_OW 70
11757: PUSH
11758: FOR_IN
11759: IFFALSE 11786
// begin escapeCounter := escapeCounter + 1 ;
11761: LD_ADDR_EXP 19
11765: PUSH
11766: LD_EXP 19
11770: PUSH
11771: LD_INT 1
11773: PLUS
11774: ST_TO_ADDR
// RemoveUnit ( i ) ;
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 64
// end ;
11784: GO 11758
11786: POP
11787: POP
// end ;
11788: PPOPN 1
11790: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11791: LD_OWVAR 1
11795: PUSH
11796: LD_INT 13650
11798: PUSH
11799: LD_INT 0
11801: PPUSH
11802: LD_INT 3150
11804: PPUSH
11805: CALL_OW 12
11809: PLUS
11810: GREATEREQUAL
11811: IFFALSE 11820
11813: GO 11815
11815: DISABLE
// SmallAmericanReinforcements ;
11816: CALL 7093 0 0
11820: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11821: LD_OWVAR 1
11825: PUSH
11826: LD_INT 31500
11828: PUSH
11829: LD_INT 29400
11831: PUSH
11832: LD_INT 27300
11834: PUSH
11835: LD_INT 25200
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: LD_OWVAR 67
11848: ARRAY
11849: GREATEREQUAL
11850: IFFALSE 11915
11852: GO 11854
11854: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11855: LD_EXP 48
11859: PPUSH
11860: LD_INT 21
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 72
11874: PPUSH
11875: LD_INT 62
11877: PPUSH
11878: LD_INT 22
11880: PPUSH
11881: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11885: LD_EXP 49
11889: PPUSH
11890: LD_INT 69
11892: PPUSH
11893: LD_INT 27
11895: PPUSH
11896: CALL_OW 111
// wait ( 1 1$00 ) ;
11900: LD_INT 2100
11902: PPUSH
11903: CALL_OW 67
// startAttackOnOmicron := true ;
11907: LD_ADDR_EXP 6
11911: PUSH
11912: LD_INT 1
11914: ST_TO_ADDR
// end ;
11915: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11916: LD_EXP 22
11920: PUSH
11921: LD_INT 0
11923: EQUAL
11924: IFFALSE 13974
11926: GO 11928
11928: DISABLE
11929: LD_INT 0
11931: PPUSH
11932: PPUSH
11933: PPUSH
11934: PPUSH
11935: PPUSH
11936: PPUSH
11937: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11938: LD_INT 5
11940: PPUSH
11941: LD_INT 2
11943: PPUSH
11944: CALL_OW 343
// PrepareOmarForces ;
11948: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11952: LD_INT 105
11954: PPUSH
11955: CALL_OW 67
// allowHeikeAttack := true ;
11959: LD_ADDR_EXP 11
11963: PUSH
11964: LD_INT 1
11966: ST_TO_ADDR
// activeGrishkoAI := false ;
11967: LD_ADDR_EXP 10
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11975: LD_INT 20
11977: PPUSH
11978: LD_INT 0
11980: PPUSH
11981: CALL_OW 424
// if not hillBase then
11985: LD_EXP 15
11989: NOT
11990: IFFALSE 11999
// ChangeMissionObjectives ( HillDone ) ;
11992: LD_STRING HillDone
11994: PPUSH
11995: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11999: LD_EXP 33
12003: PPUSH
12004: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12008: LD_ADDR_VAR 0 1
12012: PUSH
12013: LD_INT 22
12015: PUSH
12016: LD_INT 2
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 21
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PPUSH
12037: CALL_OW 69
12041: PUSH
12042: FOR_IN
12043: IFFALSE 12067
// if HasTask ( i ) then
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 314
12054: IFFALSE 12065
// ComHold ( i ) ;
12056: LD_VAR 0 1
12060: PPUSH
12061: CALL_OW 140
12065: GO 12042
12067: POP
12068: POP
// DialogueOn ;
12069: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12073: LD_EXP 33
12077: PPUSH
12078: LD_STRING DO-assault-1
12080: PPUSH
12081: CALL_OW 94
// DialogueOff ;
12085: CALL_OW 7
// game_speed := 4 ;
12089: LD_ADDR_OWVAR 65
12093: PUSH
12094: LD_INT 4
12096: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_EXP 46
12106: PPUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 72
12124: PUSH
12125: FOR_IN
12126: IFFALSE 12145
// ComMoveXY ( i , 226 , 114 ) ;
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_INT 226
12135: PPUSH
12136: LD_INT 114
12138: PPUSH
12139: CALL_OW 111
12143: GO 12125
12145: POP
12146: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12147: LD_EXP 41
12151: PPUSH
12152: LD_INT 22
12154: PUSH
12155: LD_INT 6
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 30
12164: PUSH
12165: LD_INT 4
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 69
12180: PPUSH
12181: LD_EXP 41
12185: PPUSH
12186: CALL_OW 74
12190: PPUSH
12191: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12195: LD_STRING Attack
12197: PPUSH
12198: CALL_OW 337
// music_class := music_combat ;
12202: LD_ADDR_OWVAR 72
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// music_nat := 4 ;
12210: LD_ADDR_OWVAR 71
12214: PUSH
12215: LD_INT 4
12217: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12218: LD_INT 5
12220: PPUSH
12221: LD_EXP 41
12225: PPUSH
12226: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12230: LD_INT 6
12232: PPUSH
12233: LD_EXP 38
12237: PPUSH
12238: LD_INT 25
12240: PUSH
12241: LD_INT 1
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PPUSH
12248: CALL_OW 72
12252: PUSH
12253: LD_INT 4
12255: ARRAY
12256: PPUSH
12257: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12261: LD_ADDR_VAR 0 1
12265: PUSH
12266: LD_EXP 38
12270: PPUSH
12271: LD_INT 3
12273: PUSH
12274: LD_INT 25
12276: PUSH
12277: LD_INT 4
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 72
12292: PUSH
12293: FOR_IN
12294: IFFALSE 12313
// ComAgressiveMove ( i , 221 , 110 ) ;
12296: LD_VAR 0 1
12300: PPUSH
12301: LD_INT 221
12303: PPUSH
12304: LD_INT 110
12306: PPUSH
12307: CALL_OW 114
12311: GO 12293
12313: POP
12314: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12315: LD_EXP 38
12319: PPUSH
12320: LD_INT 25
12322: PUSH
12323: LD_INT 4
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PPUSH
12330: CALL_OW 72
12334: PPUSH
12335: LD_INT 214
12337: PPUSH
12338: LD_INT 124
12340: PPUSH
12341: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12345: LD_EXP 38
12349: PPUSH
12350: LD_INT 25
12352: PUSH
12353: LD_INT 1
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: PUSH
12365: LD_INT 4
12367: ARRAY
12368: PPUSH
12369: LD_INT 214
12371: PPUSH
12372: LD_INT 114
12374: PPUSH
12375: LD_INT 0
12377: PPUSH
12378: CALL_OW 132
// if IsOk ( Grishko ) then
12382: LD_EXP 41
12386: PPUSH
12387: CALL_OW 302
12391: IFFALSE 12417
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12393: LD_EXP 41
12397: PPUSH
12398: LD_STRING D9-Gri-1
12400: PPUSH
12401: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12405: LD_EXP 40
12409: PPUSH
12410: LD_STRING D9-Kur-1
12412: PPUSH
12413: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12417: LD_INT 35
12419: PPUSH
12420: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12424: LD_EXP 33
12428: PPUSH
12429: LD_INT 233
12431: PPUSH
12432: LD_INT 130
12434: PPUSH
12435: CALL_OW 114
// if IsOk ( Grishko ) then
12439: LD_EXP 41
12443: PPUSH
12444: CALL_OW 302
12448: IFFALSE 12474
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12450: LD_EXP 41
12454: PPUSH
12455: LD_STRING D9-Gri-2
12457: PPUSH
12458: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12462: LD_EXP 40
12466: PPUSH
12467: LD_STRING D9-Kur-2
12469: PPUSH
12470: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12474: LD_EXP 41
12478: PPUSH
12479: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12483: LD_EXP 41
12487: PPUSH
12488: LD_INT 211
12490: PPUSH
12491: LD_INT 104
12493: PPUSH
12494: CALL_OW 171
// AddComHold ( Grishko ) ;
12498: LD_EXP 41
12502: PPUSH
12503: CALL_OW 200
// repeat wait ( 3 ) ;
12507: LD_INT 3
12509: PPUSH
12510: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12514: LD_EXP 41
12518: PPUSH
12519: CALL_OW 310
12523: NOT
12524: IFFALSE 12507
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12526: LD_EXP 38
12530: PPUSH
12531: LD_INT 34
12533: PUSH
12534: LD_INT 26
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 72
12545: PPUSH
12546: LD_EXP 41
12550: PPUSH
12551: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12555: LD_EXP 38
12559: PPUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 26
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PPUSH
12570: CALL_OW 72
12574: PPUSH
12575: LD_INT 215
12577: PPUSH
12578: LD_INT 106
12580: PPUSH
12581: CALL_OW 174
// repeat wait ( 3 ) ;
12585: LD_INT 3
12587: PPUSH
12588: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12592: LD_EXP 41
12596: PPUSH
12597: CALL_OW 256
12601: PUSH
12602: LD_INT 1000
12604: LESS
12605: IFFALSE 12585
// NormalAttack ( 5 , Grishko ) ;
12607: LD_INT 5
12609: PPUSH
12610: LD_EXP 41
12614: PPUSH
12615: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12619: LD_INT 6
12621: PPUSH
12622: LD_EXP 38
12626: PPUSH
12627: LD_INT 25
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PPUSH
12637: CALL_OW 72
12641: PUSH
12642: LD_INT 4
12644: ARRAY
12645: PPUSH
12646: CALL_OW 472
// if IsOk ( Grishko ) then
12650: LD_EXP 41
12654: PPUSH
12655: CALL_OW 302
12659: IFFALSE 12685
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12661: LD_EXP 41
12665: PPUSH
12666: LD_STRING D9-Gri-3
12668: PPUSH
12669: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12673: LD_EXP 40
12677: PPUSH
12678: LD_STRING D9-Kur-3
12680: PPUSH
12681: CALL_OW 94
// end ; music_class := music_auto ;
12685: LD_ADDR_OWVAR 72
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// music_nat := music_auto ;
12693: LD_ADDR_OWVAR 71
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// for i in omarSquad do
12701: LD_ADDR_VAR 0 1
12705: PUSH
12706: LD_EXP 38
12710: PUSH
12711: FOR_IN
12712: IFFALSE 12854
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 247
12723: PUSH
12724: LD_INT 2
12726: EQUAL
12727: PUSH
12728: LD_VAR 0 1
12732: PPUSH
12733: CALL_OW 256
12737: PUSH
12738: LD_INT 1000
12740: LESS
12741: AND
12742: IFFALSE 12808
// begin driver := IsDrivenBy ( i ) ;
12744: LD_ADDR_VAR 0 2
12748: PUSH
12749: LD_VAR 0 1
12753: PPUSH
12754: CALL_OW 311
12758: ST_TO_ADDR
// veh := i ;
12759: LD_ADDR_VAR 0 3
12763: PUSH
12764: LD_VAR 0 1
12768: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12769: LD_VAR 0 2
12773: PPUSH
12774: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12778: LD_VAR 0 2
12782: PPUSH
12783: LD_VAR 0 3
12787: PPUSH
12788: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12792: LD_VAR 0 2
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: CALL_OW 180
// end else
12806: GO 12852
// if GetLives ( i ) < 500 then
12808: LD_VAR 0 1
12812: PPUSH
12813: CALL_OW 256
12817: PUSH
12818: LD_INT 500
12820: LESS
12821: IFFALSE 12852
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12823: LD_EXP 38
12827: PPUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 4
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 72
12842: PPUSH
12843: LD_VAR 0 1
12847: PPUSH
12848: CALL_OW 188
// end ; end ;
12852: GO 12711
12854: POP
12855: POP
// repeat wait ( 0 0$1 ) ;
12856: LD_INT 35
12858: PPUSH
12859: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12863: LD_EXP 38
12867: PPUSH
12868: LD_INT 3
12870: PUSH
12871: LD_INT 24
12873: PUSH
12874: LD_INT 1000
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 72
12903: NOT
12904: PUSH
12905: LD_EXP 38
12909: PPUSH
12910: LD_INT 3
12912: PUSH
12913: LD_INT 24
12915: PUSH
12916: LD_INT 250
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 72
12931: NOT
12932: AND
12933: IFFALSE 12856
// wait ( 0 0$2 ) ;
12935: LD_INT 70
12937: PPUSH
12938: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12942: LD_ADDR_VAR 0 5
12946: PUSH
12947: LD_EXP 38
12951: PPUSH
12952: LD_INT 58
12954: PUSH
12955: EMPTY
12956: LIST
12957: PUSH
12958: LD_INT 21
12960: PUSH
12961: LD_INT 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 72
12976: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12977: LD_ADDR_VAR 0 6
12981: PUSH
12982: LD_EXP 38
12986: PPUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 3
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 3
12999: PUSH
13000: LD_INT 55
13002: PUSH
13003: EMPTY
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 72
13018: ST_TO_ADDR
// for i := 1 to tmp do
13019: LD_ADDR_VAR 0 1
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_VAR 0 5
13033: PUSH
13034: FOR_TO
13035: IFFALSE 13065
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13037: LD_VAR 0 6
13041: PUSH
13042: LD_VAR 0 1
13046: ARRAY
13047: PPUSH
13048: LD_VAR 0 5
13052: PUSH
13053: LD_VAR 0 1
13057: ARRAY
13058: PPUSH
13059: CALL_OW 120
13063: GO 13034
13065: POP
13066: POP
// wait ( 0 0$5 ) ;
13067: LD_INT 175
13069: PPUSH
13070: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13074: LD_EXP 38
13078: PPUSH
13079: LD_INT 199
13081: PPUSH
13082: LD_INT 141
13084: PPUSH
13085: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13089: LD_EXP 33
13093: PPUSH
13094: LD_INT 190
13096: PPUSH
13097: LD_INT 143
13099: PPUSH
13100: CALL_OW 114
// AddComHold ( Omar ) ;
13104: LD_EXP 33
13108: PPUSH
13109: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13113: LD_EXP 38
13117: PPUSH
13118: LD_INT 2
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: LD_INT 1
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 25
13133: PUSH
13134: LD_INT 4
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: PPUSH
13146: CALL_OW 72
13150: PPUSH
13151: LD_INT 161
13153: PPUSH
13154: LD_INT 130
13156: PPUSH
13157: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13161: LD_EXP 38
13165: PPUSH
13166: LD_INT 25
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 72
13180: PPUSH
13181: LD_INT 163
13183: PPUSH
13184: LD_INT 122
13186: PPUSH
13187: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13191: LD_EXP 38
13195: PPUSH
13196: LD_INT 25
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 72
13210: PUSH
13211: LD_INT 4
13213: ARRAY
13214: PPUSH
13215: LD_INT 165
13217: PPUSH
13218: LD_INT 118
13220: PPUSH
13221: LD_INT 0
13223: PPUSH
13224: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13228: LD_EXP 38
13232: PPUSH
13233: LD_INT 25
13235: PUSH
13236: LD_INT 1
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PPUSH
13243: CALL_OW 72
13247: PUSH
13248: LD_INT 4
13250: ARRAY
13251: PPUSH
13252: LD_INT 159
13254: PPUSH
13255: LD_INT 116
13257: PPUSH
13258: LD_INT 0
13260: PPUSH
13261: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13265: LD_EXP 38
13269: PPUSH
13270: LD_INT 21
13272: PUSH
13273: LD_INT 2
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 72
13284: PPUSH
13285: LD_INT 169
13287: PPUSH
13288: LD_INT 114
13290: PPUSH
13291: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13295: LD_INT 35
13297: PPUSH
13298: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13302: LD_ADDR_VAR 0 5
13306: PUSH
13307: LD_EXP 38
13311: PPUSH
13312: LD_INT 25
13314: PUSH
13315: LD_INT 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 72
13326: ST_TO_ADDR
// for i in tmp do
13327: LD_ADDR_VAR 0 1
13331: PUSH
13332: LD_VAR 0 5
13336: PUSH
13337: FOR_IN
13338: IFFALSE 13435
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13340: LD_VAR 0 1
13344: PPUSH
13345: CALL_OW 256
13349: PUSH
13350: LD_INT 600
13352: LESS
13353: PUSH
13354: LD_VAR 0 1
13358: PPUSH
13359: LD_INT 161
13361: PPUSH
13362: LD_INT 130
13364: PPUSH
13365: CALL_OW 297
13369: PUSH
13370: LD_INT 6
13372: GREATER
13373: AND
13374: IFFALSE 13391
// ComMoveXY ( i , 161 , 130 ) ;
13376: LD_VAR 0 1
13380: PPUSH
13381: LD_INT 161
13383: PPUSH
13384: LD_INT 130
13386: PPUSH
13387: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13391: LD_VAR 0 1
13395: PPUSH
13396: CALL_OW 256
13400: PUSH
13401: LD_INT 1000
13403: EQUAL
13404: PUSH
13405: LD_VAR 0 1
13409: PPUSH
13410: CALL_OW 314
13414: NOT
13415: AND
13416: IFFALSE 13433
// ComAgressiveMove ( i , 160 , 109 ) ;
13418: LD_VAR 0 1
13422: PPUSH
13423: LD_INT 160
13425: PPUSH
13426: LD_INT 109
13428: PPUSH
13429: CALL_OW 114
// end ;
13433: GO 13337
13435: POP
13436: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13437: LD_ADDR_VAR 0 5
13441: PUSH
13442: LD_EXP 38
13446: PPUSH
13447: LD_INT 21
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 72
13461: ST_TO_ADDR
// for i in tmp do
13462: LD_ADDR_VAR 0 1
13466: PUSH
13467: LD_VAR 0 5
13471: PUSH
13472: FOR_IN
13473: IFFALSE 13739
// begin tmp2 := IsDrivenBy ( i ) ;
13475: LD_ADDR_VAR 0 6
13479: PUSH
13480: LD_VAR 0 1
13484: PPUSH
13485: CALL_OW 311
13489: ST_TO_ADDR
// if not tmp2 then
13490: LD_VAR 0 6
13494: NOT
13495: IFFALSE 13499
// continue ;
13497: GO 13472
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13499: LD_VAR 0 1
13503: PPUSH
13504: CALL_OW 256
13508: PUSH
13509: LD_INT 600
13511: GREATEREQUAL
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 110
13522: PUSH
13523: LD_INT 1
13525: EQUAL
13526: AND
13527: IFFALSE 13541
// SetTag ( i , 0 ) ;
13529: LD_VAR 0 1
13533: PPUSH
13534: LD_INT 0
13536: PPUSH
13537: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 256
13550: PUSH
13551: LD_INT 600
13553: GREATEREQUAL
13554: PUSH
13555: LD_VAR 0 1
13559: PPUSH
13560: CALL_OW 110
13564: NOT
13565: AND
13566: IFFALSE 13592
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13568: LD_VAR 0 1
13572: PPUSH
13573: LD_VAR 0 7
13577: PPUSH
13578: LD_VAR 0 1
13582: PPUSH
13583: CALL_OW 74
13587: PPUSH
13588: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 256
13601: PUSH
13602: LD_INT 600
13604: LESS
13605: PUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 110
13615: NOT
13616: AND
13617: IFFALSE 13646
// begin SetTag ( i , 1 ) ;
13619: LD_VAR 0 1
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13631: LD_VAR 0 1
13635: PPUSH
13636: LD_INT 202
13638: PPUSH
13639: LD_INT 150
13641: PPUSH
13642: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 110
13655: PUSH
13656: LD_INT 1
13658: EQUAL
13659: PUSH
13660: LD_VAR 0 1
13664: PPUSH
13665: LD_INT 202
13667: PPUSH
13668: LD_INT 150
13670: PPUSH
13671: CALL_OW 297
13675: PUSH
13676: LD_INT 6
13678: LESS
13679: AND
13680: PUSH
13681: LD_VAR 0 6
13685: AND
13686: IFFALSE 13737
// begin ComExitVehicle ( tmp2 ) ;
13688: LD_VAR 0 6
13692: PPUSH
13693: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13697: LD_VAR 0 6
13701: PPUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13711: LD_VAR 0 6
13715: PPUSH
13716: LD_INT 700
13718: PPUSH
13719: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13723: LD_VAR 0 6
13727: PPUSH
13728: LD_VAR 0 1
13732: PPUSH
13733: CALL_OW 180
// end ; end ;
13737: GO 13472
13739: POP
13740: POP
// until kirovDestroyed ;
13741: LD_EXP 16
13745: IFFALSE 13295
// repeat wait ( 0 0$1 ) ;
13747: LD_INT 35
13749: PPUSH
13750: CALL_OW 67
// for i in omarSquad union Omar do
13754: LD_ADDR_VAR 0 1
13758: PUSH
13759: LD_EXP 38
13763: PUSH
13764: LD_EXP 33
13768: UNION
13769: PUSH
13770: FOR_IN
13771: IFFALSE 13941
// if IsInArea ( i , southRoadArea ) then
13773: LD_VAR 0 1
13777: PPUSH
13778: LD_INT 15
13780: PPUSH
13781: CALL_OW 308
13785: IFFALSE 13798
// RemoveUnit ( i ) else
13787: LD_VAR 0 1
13791: PPUSH
13792: CALL_OW 64
13796: GO 13939
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13798: LD_VAR 0 1
13802: PPUSH
13803: CALL_OW 257
13807: PUSH
13808: LD_INT 3
13810: EQUAL
13811: PUSH
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 310
13821: NOT
13822: AND
13823: PUSH
13824: LD_INT 22
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 24
13836: PUSH
13837: LD_INT 251
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 58
13856: PUSH
13857: EMPTY
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 69
13870: AND
13871: IFFALSE 13924
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13873: LD_VAR 0 1
13877: PPUSH
13878: LD_INT 22
13880: PUSH
13881: LD_INT 5
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 21
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 58
13900: PUSH
13901: EMPTY
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PUSH
13914: LD_INT 1
13916: ARRAY
13917: PPUSH
13918: CALL_OW 120
13922: GO 13939
// ComMoveXY ( i , 208 , 162 ) ;
13924: LD_VAR 0 1
13928: PPUSH
13929: LD_INT 208
13931: PPUSH
13932: LD_INT 162
13934: PPUSH
13935: CALL_OW 111
// end ;
13939: GO 13770
13941: POP
13942: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13943: LD_INT 22
13945: PUSH
13946: LD_INT 5
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 21
13955: PUSH
13956: LD_INT 1
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PPUSH
13967: CALL_OW 69
13971: NOT
13972: IFFALSE 13747
// end ;
13974: PPOPN 7
13976: END
// every 0 0$1 trigger IsDead ( kirov ) do
13977: LD_INT 71
13979: PPUSH
13980: CALL_OW 301
13984: IFFALSE 14001
13986: GO 13988
13988: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13989: LD_EXP 25
13993: PPUSH
13994: LD_STRING DH-1-Kirov
13996: PPUSH
13997: CALL_OW 88
14001: END
// every 0 0$1 trigger See ( 2 , beria ) do
14002: LD_INT 2
14004: PPUSH
14005: LD_INT 106
14007: PPUSH
14008: CALL_OW 292
14012: IFFALSE 14029
14014: GO 14016
14016: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14017: LD_EXP 25
14021: PPUSH
14022: LD_STRING DH-1-Beria
14024: PPUSH
14025: CALL_OW 88
14029: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14030: LD_INT 2
14032: PPUSH
14033: LD_INT 112
14035: PPUSH
14036: CALL_OW 292
14040: IFFALSE 14307
14042: GO 14044
14044: DISABLE
// begin DialogueOn ;
14045: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14049: LD_INT 112
14051: PPUSH
14052: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14056: LD_EXP 25
14060: PPUSH
14061: LD_STRING DH-1-Kagan
14063: PPUSH
14064: CALL_OW 88
// if Kamil then
14068: LD_EXP 29
14072: IFFALSE 14110
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14074: LD_EXP 29
14078: PPUSH
14079: LD_STRING DKam-Kagan-2
14081: PPUSH
14082: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14086: LD_EXP 26
14090: PPUSH
14091: LD_STRING DG-Kagan-3
14093: PPUSH
14094: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14098: LD_EXP 26
14102: PPUSH
14103: LD_STRING DG-Kagan-4
14105: PPUSH
14106: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14110: LD_STRING KaganBase
14112: PPUSH
14113: CALL_OW 97
14117: PUSH
14118: LD_INT 1
14120: DOUBLE
14121: EQUAL
14122: IFTRUE 14126
14124: GO 14221
14126: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14127: LD_EXP 25
14131: PPUSH
14132: LD_STRING DH-Kagan-5
14134: PPUSH
14135: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14139: LD_EXP 25
14143: PPUSH
14144: LD_STRING DH-Kagan-6
14146: PPUSH
14147: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14151: LD_EXP 36
14155: PPUSH
14156: LD_STRING DShar-Kagan-7
14158: PPUSH
14159: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14163: LD_EXP 25
14167: PPUSH
14168: LD_STRING DH-Kagan-8
14170: PPUSH
14171: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14175: LD_EXP 25
14179: PPUSH
14180: LD_STRING DH-Kagan-9
14182: PPUSH
14183: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14187: LD_EXP 36
14191: PPUSH
14192: LD_STRING DShar-Kagan-10
14194: PPUSH
14195: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14199: LD_EXP 25
14203: PPUSH
14204: LD_STRING DH-Kagan-11
14206: PPUSH
14207: CALL_OW 88
// kaganCaptured := true ;
14211: LD_ADDR_EXP 24
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// end ; 2 :
14219: GO 14303
14221: LD_INT 2
14223: DOUBLE
14224: EQUAL
14225: IFTRUE 14229
14227: GO 14302
14229: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14230: LD_INT 22
14232: PUSH
14233: LD_INT 8
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PPUSH
14240: CALL_OW 69
14244: PUSH
14245: LD_EXP 35
14249: AND
14250: IFFALSE 14264
// Say ( Heike , DH-Kagan-a-5 ) ;
14252: LD_EXP 25
14256: PPUSH
14257: LD_STRING DH-Kagan-a-5
14259: PPUSH
14260: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14264: LD_EXP 25
14268: PPUSH
14269: LD_STRING DH-Kagan-a-6
14271: PPUSH
14272: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14276: LD_EXP 25
14280: PPUSH
14281: LD_STRING DH-Kagan-a-7
14283: PPUSH
14284: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14288: LD_EXP 26
14292: PPUSH
14293: LD_STRING DG-Kagan-a-8
14295: PPUSH
14296: CALL_OW 88
// end ; end ;
14300: GO 14303
14302: POP
// DialogueOff ;
14303: CALL_OW 7
// end ;
14307: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14308: LD_EXP 18
14312: PUSH
14313: LD_INT 112
14315: PPUSH
14316: CALL_OW 255
14320: PUSH
14321: LD_INT 2
14323: EQUAL
14324: OR
14325: IFFALSE 14337
14327: GO 14329
14329: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14330: LD_STRING KaganDone
14332: PPUSH
14333: CALL_OW 337
14337: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14338: LD_EXP 6
14342: PUSH
14343: LD_EXP 48
14347: PPUSH
14348: LD_INT 95
14350: PUSH
14351: LD_INT 19
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 72
14362: AND
14363: IFFALSE 14440
14365: GO 14367
14367: DISABLE
// begin DialogueOn ;
14368: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14372: LD_INT 63
14374: PPUSH
14375: LD_INT 32
14377: PPUSH
14378: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14382: LD_INT 63
14384: PPUSH
14385: LD_INT 32
14387: PPUSH
14388: LD_INT 2
14390: PPUSH
14391: LD_INT 12
14393: NEG
14394: PPUSH
14395: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14399: LD_EXP 25
14403: PPUSH
14404: LD_STRING DH-Omicron-1
14406: PPUSH
14407: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14411: LD_EXP 27
14415: PPUSH
14416: LD_STRING DM-Omicron-2
14418: PPUSH
14419: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14423: LD_INT 63
14425: PPUSH
14426: LD_INT 32
14428: PPUSH
14429: LD_INT 2
14431: PPUSH
14432: CALL_OW 331
// DialogueOff ;
14436: CALL_OW 7
// end ;
14440: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14441: LD_INT 2
14443: PPUSH
14444: LD_EXP 50
14448: PPUSH
14449: CALL_OW 292
14453: PUSH
14454: LD_EXP 50
14458: PPUSH
14459: CALL_OW 255
14463: PUSH
14464: LD_INT 2
14466: EQUAL
14467: OR
14468: PUSH
14469: LD_INT 106
14471: PPUSH
14472: CALL_OW 255
14476: PUSH
14477: LD_INT 2
14479: EQUAL
14480: OR
14481: PUSH
14482: LD_EXP 50
14486: PPUSH
14487: CALL_OW 302
14491: AND
14492: PUSH
14493: LD_EXP 25
14497: PPUSH
14498: CALL_OW 302
14502: AND
14503: PUSH
14504: LD_EXP 35
14508: PPUSH
14509: CALL_OW 302
14513: AND
14514: IFFALSE 15253
14516: GO 14518
14518: DISABLE
14519: LD_INT 0
14521: PPUSH
14522: PPUSH
14523: PPUSH
14524: PPUSH
14525: PPUSH
// begin DialogueOn ;
14526: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14530: LD_INT 111
14532: PPUSH
14533: LD_INT 90
14535: PPUSH
14536: LD_INT 2
14538: PPUSH
14539: LD_INT 6
14541: NEG
14542: PPUSH
14543: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14547: LD_INT 111
14549: PPUSH
14550: LD_INT 90
14552: PPUSH
14553: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14557: LD_EXP 35
14561: PPUSH
14562: LD_STRING DA-Cap-1
14564: PPUSH
14565: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14569: LD_EXP 25
14573: PPUSH
14574: LD_STRING DH-Cap-2
14576: PPUSH
14577: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14581: LD_INT 111
14583: PPUSH
14584: LD_INT 90
14586: PPUSH
14587: LD_INT 2
14589: PPUSH
14590: CALL_OW 331
// DialogueOff ;
14594: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14598: LD_INT 35
14600: PPUSH
14601: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14605: LD_EXP 17
14609: PUSH
14610: LD_INT 106
14612: PPUSH
14613: CALL_OW 255
14617: PUSH
14618: LD_INT 2
14620: EQUAL
14621: OR
14622: PUSH
14623: LD_EXP 50
14627: PPUSH
14628: CALL_OW 255
14632: PUSH
14633: LD_INT 2
14635: EQUAL
14636: OR
14637: PUSH
14638: LD_EXP 50
14642: PPUSH
14643: CALL_OW 302
14647: AND
14648: PUSH
14649: LD_EXP 35
14653: PPUSH
14654: CALL_OW 302
14658: AND
14659: PUSH
14660: LD_INT 2
14662: PPUSH
14663: CALL_OW 463
14667: NOT
14668: AND
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 3
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 92
14692: PUSH
14693: LD_INT 110
14695: PUSH
14696: LD_INT 95
14698: PUSH
14699: LD_INT 12
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PPUSH
14713: CALL_OW 69
14717: NOT
14718: AND
14719: PUSH
14720: LD_INT 22
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 30
14732: PUSH
14733: LD_INT 5
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 92
14742: PUSH
14743: LD_INT 110
14745: PUSH
14746: LD_INT 95
14748: PUSH
14749: LD_INT 12
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 69
14767: NOT
14768: AND
14769: IFFALSE 14598
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14771: LD_ADDR_VAR 0 2
14775: PUSH
14776: LD_EXP 37
14780: PUSH
14781: LD_EXP 28
14785: PUSH
14786: LD_EXP 29
14790: PUSH
14791: LD_EXP 31
14795: PUSH
14796: LD_EXP 30
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: UNION
14807: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: LD_VAR 0 2
14817: PPUSH
14818: LD_INT 50
14820: PUSH
14821: EMPTY
14822: LIST
14823: PPUSH
14824: CALL_OW 72
14828: ST_TO_ADDR
// if tmp < 2 then
14829: LD_VAR 0 2
14833: PUSH
14834: LD_INT 2
14836: LESS
14837: IFFALSE 14849
// q := 2 else
14839: LD_ADDR_VAR 0 4
14843: PUSH
14844: LD_INT 2
14846: ST_TO_ADDR
14847: GO 14862
// q := Query ( LabCap ) ;
14849: LD_ADDR_VAR 0 4
14853: PUSH
14854: LD_STRING LabCap
14856: PPUSH
14857: CALL_OW 97
14861: ST_TO_ADDR
// case q of 1 :
14862: LD_VAR 0 4
14866: PUSH
14867: LD_INT 1
14869: DOUBLE
14870: EQUAL
14871: IFTRUE 14875
14873: GO 15217
14875: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14876: LD_INT 2
14878: PPUSH
14879: LD_EXP 50
14883: PPUSH
14884: CALL_OW 471
// labCaptured := true ;
14888: LD_ADDR_EXP 21
14892: PUSH
14893: LD_INT 1
14895: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14896: LD_EXP 25
14900: PPUSH
14901: LD_STRING DH-Cap-a-1
14903: PPUSH
14904: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14908: LD_EXP 35
14912: PPUSH
14913: LD_STRING DA-Cap-a-2
14915: PPUSH
14916: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
14920: LD_ADDR_VAR 0 5
14924: PUSH
14925: LD_EXP 35
14929: PUSH
14930: LD_INT -3
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT -2
14939: PUSH
14940: LD_INT -4
14942: PUSH
14943: LD_EXP 25
14947: PUSH
14948: LD_EXP 26
14952: PUSH
14953: LD_EXP 34
14957: PUSH
14958: LD_EXP 32
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: ADD
14971: PUSH
14972: LD_INT -3
14974: PUSH
14975: EMPTY
14976: LIST
14977: ADD
14978: PUSH
14979: LD_VAR 0 2
14983: ADD
14984: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_STRING Select two characters to go with Aviradze
14992: PPUSH
14993: LD_INT 2
14995: PPUSH
14996: LD_INT 2
14998: PPUSH
14999: LD_VAR 0 5
15003: PPUSH
15004: EMPTY
15005: PPUSH
15006: CALL_OW 42
15010: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15011: LD_EXP 50
15015: PPUSH
15016: LD_INT 8
15018: PPUSH
15019: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15023: LD_EXP 35
15027: PPUSH
15028: LD_INT 8
15030: PPUSH
15031: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15035: LD_ADDR_EXP 39
15039: PUSH
15040: LD_EXP 35
15044: PUSH
15045: EMPTY
15046: LIST
15047: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15048: LD_EXP 35
15052: PPUSH
15053: CALL_OW 310
15057: IFFALSE 15068
// ComExit ( Aviradze ) ;
15059: LD_EXP 35
15063: PPUSH
15064: CALL 75641 0 1
// wait ( 3 ) ;
15068: LD_INT 3
15070: PPUSH
15071: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15075: LD_EXP 35
15079: PPUSH
15080: LD_EXP 50
15084: PPUSH
15085: CALL_OW 120
// for i := 1 to 2 do
15089: LD_ADDR_VAR 0 1
15093: PUSH
15094: DOUBLE
15095: LD_INT 1
15097: DEC
15098: ST_TO_ADDR
15099: LD_INT 2
15101: PUSH
15102: FOR_TO
15103: IFFALSE 15206
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15105: LD_ADDR_EXP 39
15109: PUSH
15110: LD_EXP 39
15114: PUSH
15115: LD_VAR 0 3
15119: PUSH
15120: LD_VAR 0 1
15124: ARRAY
15125: UNION
15126: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15127: LD_VAR 0 3
15131: PUSH
15132: LD_VAR 0 1
15136: ARRAY
15137: PPUSH
15138: LD_INT 8
15140: PPUSH
15141: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15145: LD_VAR 0 3
15149: PUSH
15150: LD_VAR 0 1
15154: ARRAY
15155: PPUSH
15156: CALL_OW 310
15160: IFFALSE 15177
// ComExit ( tmp2 [ i ] ) ;
15162: LD_VAR 0 3
15166: PUSH
15167: LD_VAR 0 1
15171: ARRAY
15172: PPUSH
15173: CALL 75641 0 1
// wait ( 3 ) ;
15177: LD_INT 3
15179: PPUSH
15180: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15184: LD_VAR 0 3
15188: PUSH
15189: LD_VAR 0 1
15193: ARRAY
15194: PPUSH
15195: LD_EXP 50
15199: PPUSH
15200: CALL_OW 120
// end ;
15204: GO 15102
15206: POP
15207: POP
// SetAchievement ( ACH_LAB ) ;
15208: LD_STRING ACH_LAB
15210: PPUSH
15211: CALL_OW 543
// end ; 2 :
15215: GO 15253
15217: LD_INT 2
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15252
15225: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15226: LD_EXP 25
15230: PPUSH
15231: LD_STRING DH-Cap-b-1
15233: PPUSH
15234: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15238: LD_EXP 35
15242: PPUSH
15243: LD_STRING DA-Cap-b-2
15245: PPUSH
15246: CALL_OW 88
// end ; end ;
15250: GO 15253
15252: POP
// end ;
15253: PPOPN 5
15255: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15256: LD_INT 10
15258: PPUSH
15259: LD_INT 22
15261: PUSH
15262: LD_INT 2
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 30
15271: PUSH
15272: LD_INT 31
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PPUSH
15283: CALL_OW 70
15287: PUSH
15288: LD_INT 2
15290: GREATEREQUAL
15291: IFFALSE 15303
15293: GO 15295
15295: DISABLE
// SetAchievement ( ACH_KING ) ;
15296: LD_STRING ACH_KING
15298: PPUSH
15299: CALL_OW 543
15303: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15304: LD_EXP 11
15308: NOT
15309: PUSH
15310: LD_INT 10
15312: PPUSH
15313: LD_INT 22
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 31
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 30
15338: PUSH
15339: LD_INT 4
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PPUSH
15355: CALL_OW 70
15359: AND
15360: IFFALSE 15380
15362: GO 15364
15364: DISABLE
// begin hillBase := true ;
15365: LD_ADDR_EXP 15
15369: PUSH
15370: LD_INT 1
15372: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15373: LD_STRING HillDone
15375: PPUSH
15376: CALL_OW 337
// end ;
15380: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15381: LD_EXP 30
15385: PUSH
15386: LD_EXP 30
15390: PPUSH
15391: CALL_OW 256
15395: PUSH
15396: LD_INT 3
15398: LESS
15399: AND
15400: IFFALSE 15446
15402: GO 15404
15404: DISABLE
// begin DialogueOn ;
15405: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15409: LD_EXP 30
15413: PPUSH
15414: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15418: LD_EXP 30
15422: PPUSH
15423: LD_STRING DK-Kkilled-1
15425: PPUSH
15426: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15430: LD_EXP 25
15434: PPUSH
15435: LD_STRING DH-Kkilled-2
15437: PPUSH
15438: CALL_OW 88
// DialogueOff ;
15442: CALL_OW 7
// end ;
15446: END
// every 0 0$1 trigger kaiaKilledByRussian do
15447: LD_EXP 23
15451: IFFALSE 15468
15453: GO 15455
15455: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15456: LD_EXP 25
15460: PPUSH
15461: LD_STRING DH-Kkilled-3
15463: PPUSH
15464: CALL_OW 88
15468: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15469: LD_EXP 16
15473: PUSH
15474: LD_INT 106
15476: PPUSH
15477: CALL_OW 255
15481: PUSH
15482: LD_INT 2
15484: EQUAL
15485: PUSH
15486: LD_EXP 17
15490: OR
15491: AND
15492: PUSH
15493: LD_EXP 18
15497: PUSH
15498: LD_EXP 24
15502: PUSH
15503: LD_INT 112
15505: PPUSH
15506: CALL_OW 255
15510: PUSH
15511: LD_INT 2
15513: EQUAL
15514: AND
15515: OR
15516: AND
15517: IFFALSE 16757
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
15526: PPUSH
15527: PPUSH
15528: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15529: LD_STRING GoToWest
15531: PPUSH
15532: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15536: LD_INT 17
15538: PPUSH
15539: LD_INT 1
15541: PPUSH
15542: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15546: LD_INT 35
15548: PPUSH
15549: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15553: LD_ADDR_VAR 0 2
15557: PUSH
15558: LD_INT 17
15560: PPUSH
15561: LD_INT 22
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: LD_INT 21
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 21
15586: PUSH
15587: LD_INT 2
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 3
15596: PUSH
15597: LD_INT 58
15599: PUSH
15600: EMPTY
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PPUSH
15620: CALL_OW 70
15624: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15625: LD_ADDR_VAR 0 3
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_INT 2
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: LD_INT 55
15645: PUSH
15646: EMPTY
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: LD_INT 21
15658: PUSH
15659: LD_INT 1
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 21
15668: PUSH
15669: LD_INT 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 3
15678: PUSH
15679: LD_INT 58
15681: PUSH
15682: EMPTY
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15708: LD_VAR 0 2
15712: PUSH
15713: LD_INT 0
15715: PLUS
15716: PUSH
15717: LD_VAR 0 3
15721: PUSH
15722: LD_INT 0
15724: PLUS
15725: EQUAL
15726: IFFALSE 15546
// SaveCharacters ( Heike , 04_1_Heike ) ;
15728: LD_EXP 25
15732: PPUSH
15733: LD_STRING 04_1_Heike
15735: PPUSH
15736: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15740: LD_EXP 35
15744: PUSH
15745: LD_EXP 35
15749: PUSH
15750: LD_EXP 39
15754: IN
15755: NOT
15756: AND
15757: IFFALSE 15773
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15759: LD_EXP 35
15763: PPUSH
15764: LD_STRING 04_1_Aviradze
15766: PPUSH
15767: CALL_OW 38
15771: GO 15791
// if Aviradze then
15773: LD_EXP 35
15777: IFFALSE 15791
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15779: LD_EXP 35
15783: PPUSH
15784: LD_STRING 04_1_Aviradze_L
15786: PPUSH
15787: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15791: LD_EXP 28
15795: PUSH
15796: LD_EXP 28
15800: PUSH
15801: LD_EXP 39
15805: IN
15806: NOT
15807: AND
15808: IFFALSE 15824
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15810: LD_EXP 28
15814: PPUSH
15815: LD_STRING 04_1_Ibrahim
15817: PPUSH
15818: CALL_OW 38
15822: GO 15842
// if Ibrahim then
15824: LD_EXP 28
15828: IFFALSE 15842
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15830: LD_EXP 28
15834: PPUSH
15835: LD_STRING 04_1_Ibrahim_L
15837: PPUSH
15838: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15842: LD_EXP 29
15846: PUSH
15847: LD_EXP 29
15851: PUSH
15852: LD_EXP 39
15856: IN
15857: NOT
15858: AND
15859: IFFALSE 15875
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15861: LD_EXP 29
15865: PPUSH
15866: LD_STRING 04_1_Kamil
15868: PPUSH
15869: CALL_OW 38
15873: GO 15893
// if Kamil then
15875: LD_EXP 29
15879: IFFALSE 15893
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15881: LD_EXP 29
15885: PPUSH
15886: LD_STRING 04_1_Kamil_L
15888: PPUSH
15889: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15893: LD_EXP 31
15897: PUSH
15898: LD_EXP 31
15902: PUSH
15903: LD_EXP 39
15907: IN
15908: NOT
15909: AND
15910: IFFALSE 15926
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15912: LD_EXP 31
15916: PPUSH
15917: LD_STRING 04_1_Sophia
15919: PPUSH
15920: CALL_OW 38
15924: GO 15944
// if Sophia then
15926: LD_EXP 31
15930: IFFALSE 15944
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15932: LD_EXP 31
15936: PPUSH
15937: LD_STRING 04_1_Sophia_L
15939: PPUSH
15940: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15944: LD_EXP 30
15948: PUSH
15949: LD_EXP 30
15953: PUSH
15954: LD_EXP 39
15958: IN
15959: NOT
15960: AND
15961: IFFALSE 15977
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15963: LD_EXP 30
15967: PPUSH
15968: LD_STRING 04_1_Kaia
15970: PPUSH
15971: CALL_OW 38
15975: GO 15995
// if Kaia then
15977: LD_EXP 30
15981: IFFALSE 15995
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15983: LD_EXP 30
15987: PPUSH
15988: LD_STRING 04_1_Kaia_L
15990: PPUSH
15991: CALL_OW 38
// if Givi then
15995: LD_EXP 26
15999: IFFALSE 16013
// SaveCharacters ( Givi , 04_1_Givi ) ;
16001: LD_EXP 26
16005: PPUSH
16006: LD_STRING 04_1_Givi
16008: PPUSH
16009: CALL_OW 38
// if Mike then
16013: LD_EXP 27
16017: IFFALSE 16031
// SaveCharacters ( Mike , 04_1_Mike ) ;
16019: LD_EXP 27
16023: PPUSH
16024: LD_STRING 04_1_Mike
16026: PPUSH
16027: CALL_OW 38
// if Markov then
16031: LD_EXP 32
16035: IFFALSE 16049
// SaveCharacters ( Markov , 04_1_Markov ) ;
16037: LD_EXP 32
16041: PPUSH
16042: LD_STRING 04_1_Markov
16044: PPUSH
16045: CALL_OW 38
// if Kurt then
16049: LD_EXP 34
16053: IFFALSE 16074
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16055: LD_EXP 34
16059: PPUSH
16060: LD_STRING 04_1_Kurt
16062: PPUSH
16063: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16067: LD_STRING enableBioCharacter(BIO_KURT)
16069: PPUSH
16070: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16074: LD_EXP 37
16078: PUSH
16079: LD_EXP 39
16083: DIFF
16084: IFFALSE 16104
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16086: LD_EXP 37
16090: PUSH
16091: LD_EXP 39
16095: DIFF
16096: PPUSH
16097: LD_STRING 04_1_others
16099: PPUSH
16100: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16104: LD_EXP 39
16108: PUSH
16109: LD_EXP 37
16113: AND
16114: IFFALSE 16199
// begin tmp := [ ] ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: EMPTY
16122: ST_TO_ADDR
// for i in heikeSecondSquad do
16123: LD_ADDR_VAR 0 1
16127: PUSH
16128: LD_EXP 37
16132: PUSH
16133: FOR_IN
16134: IFFALSE 16179
// if i in aviradzeSquad then
16136: LD_VAR 0 1
16140: PUSH
16141: LD_EXP 39
16145: IN
16146: IFFALSE 16177
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16148: LD_ADDR_VAR 0 2
16152: PUSH
16153: LD_VAR 0 2
16157: PPUSH
16158: LD_VAR 0 2
16162: PUSH
16163: LD_INT 1
16165: PLUS
16166: PPUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 1
16176: ST_TO_ADDR
16177: GO 16133
16179: POP
16180: POP
// if tmp then
16181: LD_VAR 0 2
16185: IFFALSE 16199
// SaveCharacters ( tmp , 04_1_others_L ) ;
16187: LD_VAR 0 2
16191: PPUSH
16192: LD_STRING 04_1_others_L
16194: PPUSH
16195: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_INT 2
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 23
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 69
16232: ST_TO_ADDR
// if tmp then
16233: LD_VAR 0 2
16237: IFFALSE 16251
// SaveCharacters ( tmp , 04_1_apes ) ;
16239: LD_VAR 0 2
16243: PPUSH
16244: LD_STRING 04_1_apes
16246: PPUSH
16247: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: LD_INT 17
16258: PPUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 70
16273: ST_TO_ADDR
// if tmp then
16274: LD_VAR 0 2
16278: IFFALSE 16622
// begin tmp2 := [ ] ;
16280: LD_ADDR_VAR 0 3
16284: PUSH
16285: EMPTY
16286: ST_TO_ADDR
// for i in tmp do
16287: LD_ADDR_VAR 0 1
16291: PUSH
16292: LD_VAR 0 2
16296: PUSH
16297: FOR_IN
16298: IFFALSE 16608
// begin driver := IsDrivenBy ( i ) ;
16300: LD_ADDR_VAR 0 5
16304: PUSH
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL_OW 311
16314: ST_TO_ADDR
// if not driver then
16315: LD_VAR 0 5
16319: NOT
16320: IFFALSE 16324
// continue ;
16322: GO 16297
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 264
16333: PUSH
16334: LD_INT 32
16336: PUSH
16337: LD_INT 12
16339: PUSH
16340: LD_INT 51
16342: PUSH
16343: LD_INT 89
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: IN
16352: IFFALSE 16500
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16354: LD_ADDR_VAR 0 4
16358: PUSH
16359: LD_VAR 0 1
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: CALL_OW 289
16371: PUSH
16372: LD_VAR 0 1
16376: PPUSH
16377: LD_INT 2
16379: PPUSH
16380: CALL_OW 289
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16389: LD_ADDR_VAR 0 3
16393: PUSH
16394: LD_VAR 0 3
16398: PPUSH
16399: LD_VAR 0 3
16403: PUSH
16404: LD_INT 1
16406: PLUS
16407: PPUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 265
16417: PUSH
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 262
16427: PUSH
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL_OW 263
16437: PUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 264
16447: PUSH
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 248
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 256
16467: PUSH
16468: LD_VAR 0 4
16472: PUSH
16473: LD_VAR 0 5
16477: PPUSH
16478: CALL_OW 257
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 1
16497: ST_TO_ADDR
// end else
16498: GO 16606
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16500: LD_ADDR_VAR 0 3
16504: PUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_VAR 0 3
16514: PUSH
16515: LD_INT 1
16517: PLUS
16518: PPUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 265
16528: PUSH
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 262
16538: PUSH
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 263
16548: PUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: CALL_OW 264
16558: PUSH
16559: LD_VAR 0 1
16563: PPUSH
16564: CALL_OW 248
16568: PUSH
16569: LD_VAR 0 1
16573: PPUSH
16574: CALL_OW 256
16578: PUSH
16579: EMPTY
16580: PUSH
16581: LD_VAR 0 5
16585: PPUSH
16586: CALL_OW 257
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: PPUSH
16601: CALL_OW 1
16605: ST_TO_ADDR
// end ;
16606: GO 16297
16608: POP
16609: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16610: LD_VAR 0 3
16614: PPUSH
16615: LD_STRING 04_1_Vehicles
16617: PPUSH
16618: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16622: LD_EXP 21
16626: PPUSH
16627: LD_STRING 04_1_RuLabCaptured
16629: PPUSH
16630: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16634: LD_EXP 19
16638: PPUSH
16639: LD_STRING 04_1_EscapeCounter
16641: PPUSH
16642: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16646: LD_EXP 15
16650: PPUSH
16651: LD_STRING 04_1_BaseHill
16653: PPUSH
16654: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16658: LD_OWVAR 1
16662: PPUSH
16663: LD_STRING 04_1_Time
16665: PPUSH
16666: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16670: LD_EXP 14
16674: PPUSH
16675: LD_STRING 04_1_DeadCounter
16677: PPUSH
16678: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16682: LD_EXP 24
16686: PUSH
16687: LD_INT 112
16689: PPUSH
16690: CALL_OW 255
16694: MUL
16695: PUSH
16696: LD_INT 2
16698: EQUAL
16699: PPUSH
16700: LD_STRING 04_1_KaganCaptured
16702: PPUSH
16703: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16707: LD_INT 22
16709: PUSH
16710: LD_INT 2
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 34
16719: PUSH
16720: LD_INT 26
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PPUSH
16731: CALL_OW 69
16735: PUSH
16736: LD_INT 0
16738: PLUS
16739: PPUSH
16740: LD_STRING 04_1_Flamethrower
16742: PPUSH
16743: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16747: LD_INT 1
16749: PPUSH
16750: LD_STRING __x1\04_cont2
16752: PPUSH
16753: CALL_OW 340
// end ; end_of_file
16757: PPOPN 5
16759: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 266
16769: PUSH
16770: LD_INT 0
16772: EQUAL
16773: PUSH
16774: LD_VAR 0 1
16778: PPUSH
16779: CALL_OW 255
16783: PUSH
16784: LD_INT 2
16786: EQUAL
16787: AND
16788: IFFALSE 16798
// baseConstructed := true ;
16790: LD_ADDR_EXP 3
16794: PUSH
16795: LD_INT 1
16797: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 266
16807: PUSH
16808: LD_INT 6
16810: EQUAL
16811: PUSH
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 255
16821: PUSH
16822: LD_INT 2
16824: EQUAL
16825: AND
16826: IFFALSE 16836
// labConstructed := true ;
16828: LD_ADDR_EXP 4
16832: PUSH
16833: LD_INT 1
16835: ST_TO_ADDR
// end ;
16836: PPOPN 1
16838: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL 33633 0 1
// if un = Heike then
16848: LD_VAR 0 1
16852: PUSH
16853: LD_EXP 25
16857: EQUAL
16858: IFFALSE 16867
// YouLost ( Heike ) ;
16860: LD_STRING Heike
16862: PPUSH
16863: CALL_OW 104
// if un = Omar then
16867: LD_VAR 0 1
16871: PUSH
16872: LD_EXP 33
16876: EQUAL
16877: IFFALSE 16886
// YouLost ( Omar ) ;
16879: LD_STRING Omar
16881: PPUSH
16882: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16886: LD_VAR 0 1
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 23
16903: PUSH
16904: LD_INT 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 21
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: PPUSH
16926: CALL_OW 69
16930: IN
16931: IFFALSE 16947
// loseCounter := loseCounter + 1 ;
16933: LD_ADDR_EXP 14
16937: PUSH
16938: LD_EXP 14
16942: PUSH
16943: LD_INT 1
16945: PLUS
16946: ST_TO_ADDR
// if un = omikron then
16947: LD_VAR 0 1
16951: PUSH
16952: LD_INT 64
16954: EQUAL
16955: IFFALSE 16965
// omicronFall := true ;
16957: LD_ADDR_EXP 13
16961: PUSH
16962: LD_INT 1
16964: ST_TO_ADDR
// if un = kirov then
16965: LD_VAR 0 1
16969: PUSH
16970: LD_INT 71
16972: EQUAL
16973: IFFALSE 16990
// begin ChangeMissionObjectives ( KirovDone ) ;
16975: LD_STRING KirovDone
16977: PPUSH
16978: CALL_OW 337
// kirovDestroyed := true ;
16982: LD_ADDR_EXP 16
16986: PUSH
16987: LD_INT 1
16989: ST_TO_ADDR
// end ; if un = beria then
16990: LD_VAR 0 1
16994: PUSH
16995: LD_INT 106
16997: EQUAL
16998: IFFALSE 17015
// begin ChangeMissionObjectives ( BeriaDone ) ;
17000: LD_STRING BeriaDone
17002: PPUSH
17003: CALL_OW 337
// beriaDestroyed := true ;
17007: LD_ADDR_EXP 17
17011: PUSH
17012: LD_INT 1
17014: ST_TO_ADDR
// end ; if un = kagan then
17015: LD_VAR 0 1
17019: PUSH
17020: LD_INT 112
17022: EQUAL
17023: IFFALSE 17033
// kaganDestroyed := true ;
17025: LD_ADDR_EXP 18
17029: PUSH
17030: LD_INT 1
17032: ST_TO_ADDR
// if un in russianPatrol then
17033: LD_VAR 0 1
17037: PUSH
17038: LD_EXP 47
17042: IN
17043: IFFALSE 17061
// russianPatrol := russianPatrol diff un ;
17045: LD_ADDR_EXP 47
17049: PUSH
17050: LD_EXP 47
17054: PUSH
17055: LD_VAR 0 1
17059: DIFF
17060: ST_TO_ADDR
// if un in russianOmicronAttackers then
17061: LD_VAR 0 1
17065: PUSH
17066: LD_EXP 48
17070: IN
17071: IFFALSE 17089
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17073: LD_ADDR_EXP 48
17077: PUSH
17078: LD_EXP 48
17082: PUSH
17083: LD_VAR 0 1
17087: DIFF
17088: ST_TO_ADDR
// end ;
17089: PPOPN 1
17091: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17092: LD_INT 0
17094: PPUSH
17095: PPUSH
17096: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17097: LD_VAR 0 1
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_INT 4
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 22
17127: PUSH
17128: LD_INT 6
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 30
17143: PUSH
17144: LD_INT 32
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PPUSH
17155: CALL_OW 69
17159: IN
17160: IFFALSE 17333
// begin sol := UnitsInside ( un ) ;
17162: LD_ADDR_VAR 0 3
17166: PUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 313
17176: ST_TO_ADDR
// if not sol then
17177: LD_VAR 0 3
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17333
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17186: LD_ADDR_VAR 0 4
17190: PUSH
17191: LD_INT 22
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 255
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 2
17210: PUSH
17211: LD_INT 30
17213: PUSH
17214: LD_INT 4
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 30
17223: PUSH
17224: LD_INT 5
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: ST_TO_ADDR
// if not nearestBarracks then
17245: LD_VAR 0 4
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17333
// for i in nearestBarracks do
17254: LD_ADDR_VAR 0 2
17258: PUSH
17259: LD_VAR 0 4
17263: PUSH
17264: FOR_IN
17265: IFFALSE 17300
// if UnitsInside ( i ) = 6 then
17267: LD_VAR 0 2
17271: PPUSH
17272: CALL_OW 313
17276: PUSH
17277: LD_INT 6
17279: EQUAL
17280: IFFALSE 17298
// nearestBarracks := nearestBarracks diff i ;
17282: LD_ADDR_VAR 0 4
17286: PUSH
17287: LD_VAR 0 4
17291: PUSH
17292: LD_VAR 0 2
17296: DIFF
17297: ST_TO_ADDR
17298: GO 17264
17300: POP
17301: POP
// if not nearestBarracks then
17302: LD_VAR 0 4
17306: NOT
17307: IFFALSE 17311
// exit ;
17309: GO 17333
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17311: LD_VAR 0 3
17315: PUSH
17316: LD_INT 1
17318: ARRAY
17319: PPUSH
17320: LD_VAR 0 4
17324: PUSH
17325: LD_INT 1
17327: ARRAY
17328: PPUSH
17329: CALL_OW 120
// end ; end ;
17333: PPOPN 4
17335: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17336: LD_INT 0
17338: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17339: LD_EXP 8
17343: NOT
17344: PUSH
17345: LD_EXP 5
17349: NOT
17350: OR
17351: IFFALSE 17355
// exit ;
17353: GO 17423
// for i in camAreas do
17355: LD_ADDR_VAR 0 5
17359: PUSH
17360: LD_EXP 8
17364: PUSH
17365: FOR_IN
17366: IFFALSE 17421
// if InArea ( x , y , i ) then
17368: LD_VAR 0 3
17372: PPUSH
17373: LD_VAR 0 4
17377: PPUSH
17378: LD_VAR 0 5
17382: PPUSH
17383: CALL_OW 309
17387: IFFALSE 17419
// begin SetAreaMapShow ( i , 0 ) ;
17389: LD_VAR 0 5
17393: PPUSH
17394: LD_INT 0
17396: PPUSH
17397: CALL_OW 424
// camAreas := camAreas diff i ;
17401: LD_ADDR_EXP 8
17405: PUSH
17406: LD_EXP 8
17410: PUSH
17411: LD_VAR 0 5
17415: DIFF
17416: ST_TO_ADDR
// break ;
17417: GO 17421
// end ;
17419: GO 17365
17421: POP
17422: POP
// end ;
17423: PPOPN 5
17425: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17426: LD_VAR 0 1
17430: PUSH
17431: LD_INT 2
17433: EQUAL
17434: PUSH
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 5
17442: PUSH
17443: LD_INT 8
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: IN
17450: AND
17451: IFFALSE 17460
// YouLost ( Ally ) ;
17453: LD_STRING Ally
17455: PPUSH
17456: CALL_OW 104
// end ;
17460: PPOPN 2
17462: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17463: LD_VAR 0 1
17467: PUSH
17468: LD_EXP 30
17472: EQUAL
17473: PUSH
17474: LD_VAR 0 2
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 6
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: IN
17489: AND
17490: IFFALSE 17521
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17492: LD_ADDR_EXP 23
17496: PUSH
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 250
17506: PUSH
17507: LD_VAR 0 1
17511: PPUSH
17512: CALL_OW 251
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: ST_TO_ADDR
// end ;
17521: PPOPN 3
17523: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17524: LD_VAR 0 1
17528: PPUSH
17529: LD_VAR 0 2
17533: PPUSH
17534: CALL 33753 0 2
// end ; end_of_file
17538: PPOPN 2
17540: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17541: LD_EXP 11
17545: NOT
17546: PUSH
17547: LD_INT 12
17549: PPUSH
17550: LD_INT 1
17552: PPUSH
17553: CALL_OW 287
17557: PUSH
17558: LD_INT 20
17560: PUSH
17561: LD_INT 16
17563: PUSH
17564: LD_INT 12
17566: PUSH
17567: LD_INT 10
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: LD_OWVAR 67
17580: ARRAY
17581: LESS
17582: AND
17583: IFFALSE 17610
17585: GO 17587
17587: DISABLE
// begin enable ;
17588: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17589: LD_INT 1
17591: PPUSH
17592: LD_INT 5
17594: PPUSH
17595: CALL_OW 12
17599: PPUSH
17600: LD_INT 12
17602: PPUSH
17603: LD_INT 1
17605: PPUSH
17606: CALL_OW 55
// end ; end_of_file
17610: END
// every 0 0$1 trigger omarCountdown do
17611: LD_EXP 22
17615: IFFALSE 17667
17617: GO 17619
17619: DISABLE
// begin enable ;
17620: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17621: LD_ADDR_OWVAR 47
17625: PUSH
17626: LD_STRING #X104-1
17628: PUSH
17629: LD_EXP 22
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17638: LD_ADDR_EXP 22
17642: PUSH
17643: LD_EXP 22
17647: PUSH
17648: LD_INT 35
17650: MINUS
17651: ST_TO_ADDR
// if not omarCountdown then
17652: LD_EXP 22
17656: NOT
17657: IFFALSE 17667
// display_strings :=  ;
17659: LD_ADDR_OWVAR 47
17663: PUSH
17664: LD_STRING 
17666: ST_TO_ADDR
// end ; end_of_file
17667: END
// export globalGameSaveCounter ; every 0 0$1 do
17668: GO 17670
17670: DISABLE
// begin enable ;
17671: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17672: LD_STRING updateTimer(
17674: PUSH
17675: LD_OWVAR 1
17679: STR
17680: PUSH
17681: LD_STRING );
17683: STR
17684: PPUSH
17685: CALL_OW 559
// end ;
17689: END
// every 0 0$1 do
17690: GO 17692
17692: DISABLE
// begin globalGameSaveCounter := 0 ;
17693: LD_ADDR_EXP 52
17697: PUSH
17698: LD_INT 0
17700: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17701: LD_STRING setGameSaveCounter(0)
17703: PPUSH
17704: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17708: LD_STRING initStreamRollete();
17710: PPUSH
17711: CALL_OW 559
// InitStreamMode ;
17715: CALL 19041 0 0
// DefineStreamItems ( false ) ;
17719: LD_INT 0
17721: PPUSH
17722: CALL 19505 0 1
// end ;
17726: END
// export function SOS_MapStart ( ) ; begin
17727: LD_INT 0
17729: PPUSH
// if streamModeActive then
17730: LD_EXP 53
17734: IFFALSE 17743
// DefineStreamItems ( true ) ;
17736: LD_INT 1
17738: PPUSH
17739: CALL 19505 0 1
// UpdateLuaVariables ( ) ;
17743: CALL 17760 0 0
// UpdateFactoryWaypoints ( ) ;
17747: CALL 32374 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17751: CALL 32631 0 0
// end ;
17755: LD_VAR 0 1
17759: RET
// function UpdateLuaVariables ( ) ; begin
17760: LD_INT 0
17762: PPUSH
// if globalGameSaveCounter then
17763: LD_EXP 52
17767: IFFALSE 17801
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17769: LD_ADDR_EXP 52
17773: PUSH
17774: LD_EXP 52
17778: PPUSH
17779: CALL 76604 0 1
17783: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17784: LD_STRING setGameSaveCounter(
17786: PUSH
17787: LD_EXP 52
17791: STR
17792: PUSH
17793: LD_STRING )
17795: STR
17796: PPUSH
17797: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17801: LD_STRING setGameDifficulty(
17803: PUSH
17804: LD_OWVAR 67
17808: STR
17809: PUSH
17810: LD_STRING )
17812: STR
17813: PPUSH
17814: CALL_OW 559
// end ;
17818: LD_VAR 0 1
17822: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17823: LD_INT 0
17825: PPUSH
// if p2 = stream_mode then
17826: LD_VAR 0 2
17830: PUSH
17831: LD_INT 100
17833: EQUAL
17834: IFFALSE 18837
// begin if not StreamModeActive then
17836: LD_EXP 53
17840: NOT
17841: IFFALSE 17851
// StreamModeActive := true ;
17843: LD_ADDR_EXP 53
17847: PUSH
17848: LD_INT 1
17850: ST_TO_ADDR
// if p3 = 0 then
17851: LD_VAR 0 3
17855: PUSH
17856: LD_INT 0
17858: EQUAL
17859: IFFALSE 17865
// InitStreamMode ;
17861: CALL 19041 0 0
// if p3 = 1 then
17865: LD_VAR 0 3
17869: PUSH
17870: LD_INT 1
17872: EQUAL
17873: IFFALSE 17883
// sRocket := true ;
17875: LD_ADDR_EXP 58
17879: PUSH
17880: LD_INT 1
17882: ST_TO_ADDR
// if p3 = 2 then
17883: LD_VAR 0 3
17887: PUSH
17888: LD_INT 2
17890: EQUAL
17891: IFFALSE 17901
// sSpeed := true ;
17893: LD_ADDR_EXP 57
17897: PUSH
17898: LD_INT 1
17900: ST_TO_ADDR
// if p3 = 3 then
17901: LD_VAR 0 3
17905: PUSH
17906: LD_INT 3
17908: EQUAL
17909: IFFALSE 17919
// sEngine := true ;
17911: LD_ADDR_EXP 59
17915: PUSH
17916: LD_INT 1
17918: ST_TO_ADDR
// if p3 = 4 then
17919: LD_VAR 0 3
17923: PUSH
17924: LD_INT 4
17926: EQUAL
17927: IFFALSE 17937
// sSpec := true ;
17929: LD_ADDR_EXP 56
17933: PUSH
17934: LD_INT 1
17936: ST_TO_ADDR
// if p3 = 5 then
17937: LD_VAR 0 3
17941: PUSH
17942: LD_INT 5
17944: EQUAL
17945: IFFALSE 17955
// sLevel := true ;
17947: LD_ADDR_EXP 60
17951: PUSH
17952: LD_INT 1
17954: ST_TO_ADDR
// if p3 = 6 then
17955: LD_VAR 0 3
17959: PUSH
17960: LD_INT 6
17962: EQUAL
17963: IFFALSE 17973
// sArmoury := true ;
17965: LD_ADDR_EXP 61
17969: PUSH
17970: LD_INT 1
17972: ST_TO_ADDR
// if p3 = 7 then
17973: LD_VAR 0 3
17977: PUSH
17978: LD_INT 7
17980: EQUAL
17981: IFFALSE 17991
// sRadar := true ;
17983: LD_ADDR_EXP 62
17987: PUSH
17988: LD_INT 1
17990: ST_TO_ADDR
// if p3 = 8 then
17991: LD_VAR 0 3
17995: PUSH
17996: LD_INT 8
17998: EQUAL
17999: IFFALSE 18009
// sBunker := true ;
18001: LD_ADDR_EXP 63
18005: PUSH
18006: LD_INT 1
18008: ST_TO_ADDR
// if p3 = 9 then
18009: LD_VAR 0 3
18013: PUSH
18014: LD_INT 9
18016: EQUAL
18017: IFFALSE 18027
// sHack := true ;
18019: LD_ADDR_EXP 64
18023: PUSH
18024: LD_INT 1
18026: ST_TO_ADDR
// if p3 = 10 then
18027: LD_VAR 0 3
18031: PUSH
18032: LD_INT 10
18034: EQUAL
18035: IFFALSE 18045
// sFire := true ;
18037: LD_ADDR_EXP 65
18041: PUSH
18042: LD_INT 1
18044: ST_TO_ADDR
// if p3 = 11 then
18045: LD_VAR 0 3
18049: PUSH
18050: LD_INT 11
18052: EQUAL
18053: IFFALSE 18063
// sRefresh := true ;
18055: LD_ADDR_EXP 66
18059: PUSH
18060: LD_INT 1
18062: ST_TO_ADDR
// if p3 = 12 then
18063: LD_VAR 0 3
18067: PUSH
18068: LD_INT 12
18070: EQUAL
18071: IFFALSE 18081
// sExp := true ;
18073: LD_ADDR_EXP 67
18077: PUSH
18078: LD_INT 1
18080: ST_TO_ADDR
// if p3 = 13 then
18081: LD_VAR 0 3
18085: PUSH
18086: LD_INT 13
18088: EQUAL
18089: IFFALSE 18099
// sDepot := true ;
18091: LD_ADDR_EXP 68
18095: PUSH
18096: LD_INT 1
18098: ST_TO_ADDR
// if p3 = 14 then
18099: LD_VAR 0 3
18103: PUSH
18104: LD_INT 14
18106: EQUAL
18107: IFFALSE 18117
// sFlag := true ;
18109: LD_ADDR_EXP 69
18113: PUSH
18114: LD_INT 1
18116: ST_TO_ADDR
// if p3 = 15 then
18117: LD_VAR 0 3
18121: PUSH
18122: LD_INT 15
18124: EQUAL
18125: IFFALSE 18135
// sKamikadze := true ;
18127: LD_ADDR_EXP 77
18131: PUSH
18132: LD_INT 1
18134: ST_TO_ADDR
// if p3 = 16 then
18135: LD_VAR 0 3
18139: PUSH
18140: LD_INT 16
18142: EQUAL
18143: IFFALSE 18153
// sTroll := true ;
18145: LD_ADDR_EXP 78
18149: PUSH
18150: LD_INT 1
18152: ST_TO_ADDR
// if p3 = 17 then
18153: LD_VAR 0 3
18157: PUSH
18158: LD_INT 17
18160: EQUAL
18161: IFFALSE 18171
// sSlow := true ;
18163: LD_ADDR_EXP 79
18167: PUSH
18168: LD_INT 1
18170: ST_TO_ADDR
// if p3 = 18 then
18171: LD_VAR 0 3
18175: PUSH
18176: LD_INT 18
18178: EQUAL
18179: IFFALSE 18189
// sLack := true ;
18181: LD_ADDR_EXP 80
18185: PUSH
18186: LD_INT 1
18188: ST_TO_ADDR
// if p3 = 19 then
18189: LD_VAR 0 3
18193: PUSH
18194: LD_INT 19
18196: EQUAL
18197: IFFALSE 18207
// sTank := true ;
18199: LD_ADDR_EXP 82
18203: PUSH
18204: LD_INT 1
18206: ST_TO_ADDR
// if p3 = 20 then
18207: LD_VAR 0 3
18211: PUSH
18212: LD_INT 20
18214: EQUAL
18215: IFFALSE 18225
// sRemote := true ;
18217: LD_ADDR_EXP 83
18221: PUSH
18222: LD_INT 1
18224: ST_TO_ADDR
// if p3 = 21 then
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 21
18232: EQUAL
18233: IFFALSE 18243
// sPowell := true ;
18235: LD_ADDR_EXP 84
18239: PUSH
18240: LD_INT 1
18242: ST_TO_ADDR
// if p3 = 22 then
18243: LD_VAR 0 3
18247: PUSH
18248: LD_INT 22
18250: EQUAL
18251: IFFALSE 18261
// sTeleport := true ;
18253: LD_ADDR_EXP 87
18257: PUSH
18258: LD_INT 1
18260: ST_TO_ADDR
// if p3 = 23 then
18261: LD_VAR 0 3
18265: PUSH
18266: LD_INT 23
18268: EQUAL
18269: IFFALSE 18279
// sOilTower := true ;
18271: LD_ADDR_EXP 89
18275: PUSH
18276: LD_INT 1
18278: ST_TO_ADDR
// if p3 = 24 then
18279: LD_VAR 0 3
18283: PUSH
18284: LD_INT 24
18286: EQUAL
18287: IFFALSE 18297
// sShovel := true ;
18289: LD_ADDR_EXP 90
18293: PUSH
18294: LD_INT 1
18296: ST_TO_ADDR
// if p3 = 25 then
18297: LD_VAR 0 3
18301: PUSH
18302: LD_INT 25
18304: EQUAL
18305: IFFALSE 18315
// sSheik := true ;
18307: LD_ADDR_EXP 91
18311: PUSH
18312: LD_INT 1
18314: ST_TO_ADDR
// if p3 = 26 then
18315: LD_VAR 0 3
18319: PUSH
18320: LD_INT 26
18322: EQUAL
18323: IFFALSE 18333
// sEarthquake := true ;
18325: LD_ADDR_EXP 93
18329: PUSH
18330: LD_INT 1
18332: ST_TO_ADDR
// if p3 = 27 then
18333: LD_VAR 0 3
18337: PUSH
18338: LD_INT 27
18340: EQUAL
18341: IFFALSE 18351
// sAI := true ;
18343: LD_ADDR_EXP 94
18347: PUSH
18348: LD_INT 1
18350: ST_TO_ADDR
// if p3 = 28 then
18351: LD_VAR 0 3
18355: PUSH
18356: LD_INT 28
18358: EQUAL
18359: IFFALSE 18369
// sCargo := true ;
18361: LD_ADDR_EXP 97
18365: PUSH
18366: LD_INT 1
18368: ST_TO_ADDR
// if p3 = 29 then
18369: LD_VAR 0 3
18373: PUSH
18374: LD_INT 29
18376: EQUAL
18377: IFFALSE 18387
// sDLaser := true ;
18379: LD_ADDR_EXP 98
18383: PUSH
18384: LD_INT 1
18386: ST_TO_ADDR
// if p3 = 30 then
18387: LD_VAR 0 3
18391: PUSH
18392: LD_INT 30
18394: EQUAL
18395: IFFALSE 18405
// sExchange := true ;
18397: LD_ADDR_EXP 99
18401: PUSH
18402: LD_INT 1
18404: ST_TO_ADDR
// if p3 = 31 then
18405: LD_VAR 0 3
18409: PUSH
18410: LD_INT 31
18412: EQUAL
18413: IFFALSE 18423
// sFac := true ;
18415: LD_ADDR_EXP 100
18419: PUSH
18420: LD_INT 1
18422: ST_TO_ADDR
// if p3 = 32 then
18423: LD_VAR 0 3
18427: PUSH
18428: LD_INT 32
18430: EQUAL
18431: IFFALSE 18441
// sPower := true ;
18433: LD_ADDR_EXP 101
18437: PUSH
18438: LD_INT 1
18440: ST_TO_ADDR
// if p3 = 33 then
18441: LD_VAR 0 3
18445: PUSH
18446: LD_INT 33
18448: EQUAL
18449: IFFALSE 18459
// sRandom := true ;
18451: LD_ADDR_EXP 102
18455: PUSH
18456: LD_INT 1
18458: ST_TO_ADDR
// if p3 = 34 then
18459: LD_VAR 0 3
18463: PUSH
18464: LD_INT 34
18466: EQUAL
18467: IFFALSE 18477
// sShield := true ;
18469: LD_ADDR_EXP 103
18473: PUSH
18474: LD_INT 1
18476: ST_TO_ADDR
// if p3 = 35 then
18477: LD_VAR 0 3
18481: PUSH
18482: LD_INT 35
18484: EQUAL
18485: IFFALSE 18495
// sTime := true ;
18487: LD_ADDR_EXP 104
18491: PUSH
18492: LD_INT 1
18494: ST_TO_ADDR
// if p3 = 36 then
18495: LD_VAR 0 3
18499: PUSH
18500: LD_INT 36
18502: EQUAL
18503: IFFALSE 18513
// sTools := true ;
18505: LD_ADDR_EXP 105
18509: PUSH
18510: LD_INT 1
18512: ST_TO_ADDR
// if p3 = 101 then
18513: LD_VAR 0 3
18517: PUSH
18518: LD_INT 101
18520: EQUAL
18521: IFFALSE 18531
// sSold := true ;
18523: LD_ADDR_EXP 70
18527: PUSH
18528: LD_INT 1
18530: ST_TO_ADDR
// if p3 = 102 then
18531: LD_VAR 0 3
18535: PUSH
18536: LD_INT 102
18538: EQUAL
18539: IFFALSE 18549
// sDiff := true ;
18541: LD_ADDR_EXP 71
18545: PUSH
18546: LD_INT 1
18548: ST_TO_ADDR
// if p3 = 103 then
18549: LD_VAR 0 3
18553: PUSH
18554: LD_INT 103
18556: EQUAL
18557: IFFALSE 18567
// sFog := true ;
18559: LD_ADDR_EXP 74
18563: PUSH
18564: LD_INT 1
18566: ST_TO_ADDR
// if p3 = 104 then
18567: LD_VAR 0 3
18571: PUSH
18572: LD_INT 104
18574: EQUAL
18575: IFFALSE 18585
// sReset := true ;
18577: LD_ADDR_EXP 75
18581: PUSH
18582: LD_INT 1
18584: ST_TO_ADDR
// if p3 = 105 then
18585: LD_VAR 0 3
18589: PUSH
18590: LD_INT 105
18592: EQUAL
18593: IFFALSE 18603
// sSun := true ;
18595: LD_ADDR_EXP 76
18599: PUSH
18600: LD_INT 1
18602: ST_TO_ADDR
// if p3 = 106 then
18603: LD_VAR 0 3
18607: PUSH
18608: LD_INT 106
18610: EQUAL
18611: IFFALSE 18621
// sTiger := true ;
18613: LD_ADDR_EXP 72
18617: PUSH
18618: LD_INT 1
18620: ST_TO_ADDR
// if p3 = 107 then
18621: LD_VAR 0 3
18625: PUSH
18626: LD_INT 107
18628: EQUAL
18629: IFFALSE 18639
// sBomb := true ;
18631: LD_ADDR_EXP 73
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// if p3 = 108 then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 108
18646: EQUAL
18647: IFFALSE 18657
// sWound := true ;
18649: LD_ADDR_EXP 81
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// if p3 = 109 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 109
18664: EQUAL
18665: IFFALSE 18675
// sBetray := true ;
18667: LD_ADDR_EXP 85
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 110 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 110
18682: EQUAL
18683: IFFALSE 18693
// sContamin := true ;
18685: LD_ADDR_EXP 86
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 111 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 111
18700: EQUAL
18701: IFFALSE 18711
// sOil := true ;
18703: LD_ADDR_EXP 88
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 112 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 112
18718: EQUAL
18719: IFFALSE 18729
// sStu := true ;
18721: LD_ADDR_EXP 92
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 113 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 113
18736: EQUAL
18737: IFFALSE 18747
// sBazooka := true ;
18739: LD_ADDR_EXP 95
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 114 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 114
18754: EQUAL
18755: IFFALSE 18765
// sMortar := true ;
18757: LD_ADDR_EXP 96
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 115 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 115
18772: EQUAL
18773: IFFALSE 18783
// sRanger := true ;
18775: LD_ADDR_EXP 106
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 116 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 116
18790: EQUAL
18791: IFFALSE 18801
// sComputer := true ;
18793: LD_ADDR_EXP 107
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 117 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 117
18808: EQUAL
18809: IFFALSE 18819
// s30 := true ;
18811: LD_ADDR_EXP 108
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// if p3 = 118 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 118
18826: EQUAL
18827: IFFALSE 18837
// s60 := true ;
18829: LD_ADDR_EXP 109
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// end ; if p2 = hack_mode then
18837: LD_VAR 0 2
18841: PUSH
18842: LD_INT 101
18844: EQUAL
18845: IFFALSE 18973
// begin case p3 of 1 :
18847: LD_VAR 0 3
18851: PUSH
18852: LD_INT 1
18854: DOUBLE
18855: EQUAL
18856: IFTRUE 18860
18858: GO 18867
18860: POP
// hHackUnlimitedResources ; 2 :
18861: CALL 31120 0 0
18865: GO 18973
18867: LD_INT 2
18869: DOUBLE
18870: EQUAL
18871: IFTRUE 18875
18873: GO 18882
18875: POP
// hHackSetLevel10 ; 3 :
18876: CALL 31253 0 0
18880: GO 18973
18882: LD_INT 3
18884: DOUBLE
18885: EQUAL
18886: IFTRUE 18890
18888: GO 18897
18890: POP
// hHackSetLevel10YourUnits ; 4 :
18891: CALL 31338 0 0
18895: GO 18973
18897: LD_INT 4
18899: DOUBLE
18900: EQUAL
18901: IFTRUE 18905
18903: GO 18912
18905: POP
// hHackInvincible ; 5 :
18906: CALL 31786 0 0
18910: GO 18973
18912: LD_INT 5
18914: DOUBLE
18915: EQUAL
18916: IFTRUE 18920
18918: GO 18927
18920: POP
// hHackInvisible ; 6 :
18921: CALL 31897 0 0
18925: GO 18973
18927: LD_INT 6
18929: DOUBLE
18930: EQUAL
18931: IFTRUE 18935
18933: GO 18942
18935: POP
// hHackChangeYourSide ; 7 :
18936: CALL 31954 0 0
18940: GO 18973
18942: LD_INT 7
18944: DOUBLE
18945: EQUAL
18946: IFTRUE 18950
18948: GO 18957
18950: POP
// hHackChangeUnitSide ; 8 :
18951: CALL 31996 0 0
18955: GO 18973
18957: LD_INT 8
18959: DOUBLE
18960: EQUAL
18961: IFTRUE 18965
18963: GO 18972
18965: POP
// hHackFog ; end ;
18966: CALL 32097 0 0
18970: GO 18973
18972: POP
// end ; if p2 = game_save_mode then
18973: LD_VAR 0 2
18977: PUSH
18978: LD_INT 102
18980: EQUAL
18981: IFFALSE 19036
// begin if p3 = 1 then
18983: LD_VAR 0 3
18987: PUSH
18988: LD_INT 1
18990: EQUAL
18991: IFFALSE 19003
// globalGameSaveCounter := p4 ;
18993: LD_ADDR_EXP 52
18997: PUSH
18998: LD_VAR 0 4
19002: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19003: LD_VAR 0 3
19007: PUSH
19008: LD_INT 2
19010: EQUAL
19011: PUSH
19012: LD_EXP 52
19016: AND
19017: IFFALSE 19036
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19019: LD_STRING setGameSaveCounter(
19021: PUSH
19022: LD_EXP 52
19026: STR
19027: PUSH
19028: LD_STRING )
19030: STR
19031: PPUSH
19032: CALL_OW 559
// end ; end ;
19036: LD_VAR 0 7
19040: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19041: LD_INT 0
19043: PPUSH
// streamModeActive := false ;
19044: LD_ADDR_EXP 53
19048: PUSH
19049: LD_INT 0
19051: ST_TO_ADDR
// normalCounter := 36 ;
19052: LD_ADDR_EXP 54
19056: PUSH
19057: LD_INT 36
19059: ST_TO_ADDR
// hardcoreCounter := 18 ;
19060: LD_ADDR_EXP 55
19064: PUSH
19065: LD_INT 18
19067: ST_TO_ADDR
// sRocket := false ;
19068: LD_ADDR_EXP 58
19072: PUSH
19073: LD_INT 0
19075: ST_TO_ADDR
// sSpeed := false ;
19076: LD_ADDR_EXP 57
19080: PUSH
19081: LD_INT 0
19083: ST_TO_ADDR
// sEngine := false ;
19084: LD_ADDR_EXP 59
19088: PUSH
19089: LD_INT 0
19091: ST_TO_ADDR
// sSpec := false ;
19092: LD_ADDR_EXP 56
19096: PUSH
19097: LD_INT 0
19099: ST_TO_ADDR
// sLevel := false ;
19100: LD_ADDR_EXP 60
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
// sArmoury := false ;
19108: LD_ADDR_EXP 61
19112: PUSH
19113: LD_INT 0
19115: ST_TO_ADDR
// sRadar := false ;
19116: LD_ADDR_EXP 62
19120: PUSH
19121: LD_INT 0
19123: ST_TO_ADDR
// sBunker := false ;
19124: LD_ADDR_EXP 63
19128: PUSH
19129: LD_INT 0
19131: ST_TO_ADDR
// sHack := false ;
19132: LD_ADDR_EXP 64
19136: PUSH
19137: LD_INT 0
19139: ST_TO_ADDR
// sFire := false ;
19140: LD_ADDR_EXP 65
19144: PUSH
19145: LD_INT 0
19147: ST_TO_ADDR
// sRefresh := false ;
19148: LD_ADDR_EXP 66
19152: PUSH
19153: LD_INT 0
19155: ST_TO_ADDR
// sExp := false ;
19156: LD_ADDR_EXP 67
19160: PUSH
19161: LD_INT 0
19163: ST_TO_ADDR
// sDepot := false ;
19164: LD_ADDR_EXP 68
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// sFlag := false ;
19172: LD_ADDR_EXP 69
19176: PUSH
19177: LD_INT 0
19179: ST_TO_ADDR
// sKamikadze := false ;
19180: LD_ADDR_EXP 77
19184: PUSH
19185: LD_INT 0
19187: ST_TO_ADDR
// sTroll := false ;
19188: LD_ADDR_EXP 78
19192: PUSH
19193: LD_INT 0
19195: ST_TO_ADDR
// sSlow := false ;
19196: LD_ADDR_EXP 79
19200: PUSH
19201: LD_INT 0
19203: ST_TO_ADDR
// sLack := false ;
19204: LD_ADDR_EXP 80
19208: PUSH
19209: LD_INT 0
19211: ST_TO_ADDR
// sTank := false ;
19212: LD_ADDR_EXP 82
19216: PUSH
19217: LD_INT 0
19219: ST_TO_ADDR
// sRemote := false ;
19220: LD_ADDR_EXP 83
19224: PUSH
19225: LD_INT 0
19227: ST_TO_ADDR
// sPowell := false ;
19228: LD_ADDR_EXP 84
19232: PUSH
19233: LD_INT 0
19235: ST_TO_ADDR
// sTeleport := false ;
19236: LD_ADDR_EXP 87
19240: PUSH
19241: LD_INT 0
19243: ST_TO_ADDR
// sOilTower := false ;
19244: LD_ADDR_EXP 89
19248: PUSH
19249: LD_INT 0
19251: ST_TO_ADDR
// sShovel := false ;
19252: LD_ADDR_EXP 90
19256: PUSH
19257: LD_INT 0
19259: ST_TO_ADDR
// sSheik := false ;
19260: LD_ADDR_EXP 91
19264: PUSH
19265: LD_INT 0
19267: ST_TO_ADDR
// sEarthquake := false ;
19268: LD_ADDR_EXP 93
19272: PUSH
19273: LD_INT 0
19275: ST_TO_ADDR
// sAI := false ;
19276: LD_ADDR_EXP 94
19280: PUSH
19281: LD_INT 0
19283: ST_TO_ADDR
// sCargo := false ;
19284: LD_ADDR_EXP 97
19288: PUSH
19289: LD_INT 0
19291: ST_TO_ADDR
// sDLaser := false ;
19292: LD_ADDR_EXP 98
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// sExchange := false ;
19300: LD_ADDR_EXP 99
19304: PUSH
19305: LD_INT 0
19307: ST_TO_ADDR
// sFac := false ;
19308: LD_ADDR_EXP 100
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// sPower := false ;
19316: LD_ADDR_EXP 101
19320: PUSH
19321: LD_INT 0
19323: ST_TO_ADDR
// sRandom := false ;
19324: LD_ADDR_EXP 102
19328: PUSH
19329: LD_INT 0
19331: ST_TO_ADDR
// sShield := false ;
19332: LD_ADDR_EXP 103
19336: PUSH
19337: LD_INT 0
19339: ST_TO_ADDR
// sTime := false ;
19340: LD_ADDR_EXP 104
19344: PUSH
19345: LD_INT 0
19347: ST_TO_ADDR
// sTools := false ;
19348: LD_ADDR_EXP 105
19352: PUSH
19353: LD_INT 0
19355: ST_TO_ADDR
// sSold := false ;
19356: LD_ADDR_EXP 70
19360: PUSH
19361: LD_INT 0
19363: ST_TO_ADDR
// sDiff := false ;
19364: LD_ADDR_EXP 71
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// sFog := false ;
19372: LD_ADDR_EXP 74
19376: PUSH
19377: LD_INT 0
19379: ST_TO_ADDR
// sReset := false ;
19380: LD_ADDR_EXP 75
19384: PUSH
19385: LD_INT 0
19387: ST_TO_ADDR
// sSun := false ;
19388: LD_ADDR_EXP 76
19392: PUSH
19393: LD_INT 0
19395: ST_TO_ADDR
// sTiger := false ;
19396: LD_ADDR_EXP 72
19400: PUSH
19401: LD_INT 0
19403: ST_TO_ADDR
// sBomb := false ;
19404: LD_ADDR_EXP 73
19408: PUSH
19409: LD_INT 0
19411: ST_TO_ADDR
// sWound := false ;
19412: LD_ADDR_EXP 81
19416: PUSH
19417: LD_INT 0
19419: ST_TO_ADDR
// sBetray := false ;
19420: LD_ADDR_EXP 85
19424: PUSH
19425: LD_INT 0
19427: ST_TO_ADDR
// sContamin := false ;
19428: LD_ADDR_EXP 86
19432: PUSH
19433: LD_INT 0
19435: ST_TO_ADDR
// sOil := false ;
19436: LD_ADDR_EXP 88
19440: PUSH
19441: LD_INT 0
19443: ST_TO_ADDR
// sStu := false ;
19444: LD_ADDR_EXP 92
19448: PUSH
19449: LD_INT 0
19451: ST_TO_ADDR
// sBazooka := false ;
19452: LD_ADDR_EXP 95
19456: PUSH
19457: LD_INT 0
19459: ST_TO_ADDR
// sMortar := false ;
19460: LD_ADDR_EXP 96
19464: PUSH
19465: LD_INT 0
19467: ST_TO_ADDR
// sRanger := false ;
19468: LD_ADDR_EXP 106
19472: PUSH
19473: LD_INT 0
19475: ST_TO_ADDR
// sComputer := false ;
19476: LD_ADDR_EXP 107
19480: PUSH
19481: LD_INT 0
19483: ST_TO_ADDR
// s30 := false ;
19484: LD_ADDR_EXP 108
19488: PUSH
19489: LD_INT 0
19491: ST_TO_ADDR
// s60 := false ;
19492: LD_ADDR_EXP 109
19496: PUSH
19497: LD_INT 0
19499: ST_TO_ADDR
// end ;
19500: LD_VAR 0 1
19504: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
19509: PPUSH
19510: PPUSH
19511: PPUSH
19512: PPUSH
19513: PPUSH
// result := [ ] ;
19514: LD_ADDR_VAR 0 2
19518: PUSH
19519: EMPTY
19520: ST_TO_ADDR
// if campaign_id = 1 then
19521: LD_OWVAR 69
19525: PUSH
19526: LD_INT 1
19528: EQUAL
19529: IFFALSE 22695
// begin case mission_number of 1 :
19531: LD_OWVAR 70
19535: PUSH
19536: LD_INT 1
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19620
19544: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: LD_INT 4
19555: PUSH
19556: LD_INT 11
19558: PUSH
19559: LD_INT 12
19561: PUSH
19562: LD_INT 15
19564: PUSH
19565: LD_INT 16
19567: PUSH
19568: LD_INT 22
19570: PUSH
19571: LD_INT 23
19573: PUSH
19574: LD_INT 26
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 101
19590: PUSH
19591: LD_INT 102
19593: PUSH
19594: LD_INT 106
19596: PUSH
19597: LD_INT 116
19599: PUSH
19600: LD_INT 117
19602: PUSH
19603: LD_INT 118
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: ST_TO_ADDR
19618: GO 22693
19620: LD_INT 2
19622: DOUBLE
19623: EQUAL
19624: IFTRUE 19628
19626: GO 19712
19628: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: LD_INT 4
19639: PUSH
19640: LD_INT 11
19642: PUSH
19643: LD_INT 12
19645: PUSH
19646: LD_INT 15
19648: PUSH
19649: LD_INT 16
19651: PUSH
19652: LD_INT 22
19654: PUSH
19655: LD_INT 23
19657: PUSH
19658: LD_INT 26
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 101
19674: PUSH
19675: LD_INT 102
19677: PUSH
19678: LD_INT 105
19680: PUSH
19681: LD_INT 106
19683: PUSH
19684: LD_INT 108
19686: PUSH
19687: LD_INT 116
19689: PUSH
19690: LD_INT 117
19692: PUSH
19693: LD_INT 118
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: ST_TO_ADDR
19710: GO 22693
19712: LD_INT 3
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19808
19720: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19721: LD_ADDR_VAR 0 2
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: LD_INT 4
19731: PUSH
19732: LD_INT 5
19734: PUSH
19735: LD_INT 11
19737: PUSH
19738: LD_INT 12
19740: PUSH
19741: LD_INT 15
19743: PUSH
19744: LD_INT 16
19746: PUSH
19747: LD_INT 22
19749: PUSH
19750: LD_INT 26
19752: PUSH
19753: LD_INT 36
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 101
19770: PUSH
19771: LD_INT 102
19773: PUSH
19774: LD_INT 105
19776: PUSH
19777: LD_INT 106
19779: PUSH
19780: LD_INT 108
19782: PUSH
19783: LD_INT 116
19785: PUSH
19786: LD_INT 117
19788: PUSH
19789: LD_INT 118
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: ST_TO_ADDR
19806: GO 22693
19808: LD_INT 4
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19912
19816: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19817: LD_ADDR_VAR 0 2
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 4
19827: PUSH
19828: LD_INT 5
19830: PUSH
19831: LD_INT 8
19833: PUSH
19834: LD_INT 11
19836: PUSH
19837: LD_INT 12
19839: PUSH
19840: LD_INT 15
19842: PUSH
19843: LD_INT 16
19845: PUSH
19846: LD_INT 22
19848: PUSH
19849: LD_INT 23
19851: PUSH
19852: LD_INT 26
19854: PUSH
19855: LD_INT 36
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 101
19874: PUSH
19875: LD_INT 102
19877: PUSH
19878: LD_INT 105
19880: PUSH
19881: LD_INT 106
19883: PUSH
19884: LD_INT 108
19886: PUSH
19887: LD_INT 116
19889: PUSH
19890: LD_INT 117
19892: PUSH
19893: LD_INT 118
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: ST_TO_ADDR
19910: GO 22693
19912: LD_INT 5
19914: DOUBLE
19915: EQUAL
19916: IFTRUE 19920
19918: GO 20032
19920: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19921: LD_ADDR_VAR 0 2
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 4
19931: PUSH
19932: LD_INT 5
19934: PUSH
19935: LD_INT 6
19937: PUSH
19938: LD_INT 8
19940: PUSH
19941: LD_INT 11
19943: PUSH
19944: LD_INT 12
19946: PUSH
19947: LD_INT 15
19949: PUSH
19950: LD_INT 16
19952: PUSH
19953: LD_INT 22
19955: PUSH
19956: LD_INT 23
19958: PUSH
19959: LD_INT 25
19961: PUSH
19962: LD_INT 26
19964: PUSH
19965: LD_INT 36
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 101
19986: PUSH
19987: LD_INT 102
19989: PUSH
19990: LD_INT 105
19992: PUSH
19993: LD_INT 106
19995: PUSH
19996: LD_INT 108
19998: PUSH
19999: LD_INT 109
20001: PUSH
20002: LD_INT 112
20004: PUSH
20005: LD_INT 116
20007: PUSH
20008: LD_INT 117
20010: PUSH
20011: LD_INT 118
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: ST_TO_ADDR
20030: GO 22693
20032: LD_INT 6
20034: DOUBLE
20035: EQUAL
20036: IFTRUE 20040
20038: GO 20172
20040: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20041: LD_ADDR_VAR 0 2
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 4
20051: PUSH
20052: LD_INT 5
20054: PUSH
20055: LD_INT 6
20057: PUSH
20058: LD_INT 8
20060: PUSH
20061: LD_INT 11
20063: PUSH
20064: LD_INT 12
20066: PUSH
20067: LD_INT 15
20069: PUSH
20070: LD_INT 16
20072: PUSH
20073: LD_INT 20
20075: PUSH
20076: LD_INT 21
20078: PUSH
20079: LD_INT 22
20081: PUSH
20082: LD_INT 23
20084: PUSH
20085: LD_INT 25
20087: PUSH
20088: LD_INT 26
20090: PUSH
20091: LD_INT 30
20093: PUSH
20094: LD_INT 31
20096: PUSH
20097: LD_INT 32
20099: PUSH
20100: LD_INT 36
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 101
20126: PUSH
20127: LD_INT 102
20129: PUSH
20130: LD_INT 105
20132: PUSH
20133: LD_INT 106
20135: PUSH
20136: LD_INT 108
20138: PUSH
20139: LD_INT 109
20141: PUSH
20142: LD_INT 112
20144: PUSH
20145: LD_INT 116
20147: PUSH
20148: LD_INT 117
20150: PUSH
20151: LD_INT 118
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: ST_TO_ADDR
20170: GO 22693
20172: LD_INT 7
20174: DOUBLE
20175: EQUAL
20176: IFTRUE 20180
20178: GO 20292
20180: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20181: LD_ADDR_VAR 0 2
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: LD_INT 4
20191: PUSH
20192: LD_INT 5
20194: PUSH
20195: LD_INT 7
20197: PUSH
20198: LD_INT 11
20200: PUSH
20201: LD_INT 12
20203: PUSH
20204: LD_INT 15
20206: PUSH
20207: LD_INT 16
20209: PUSH
20210: LD_INT 20
20212: PUSH
20213: LD_INT 21
20215: PUSH
20216: LD_INT 22
20218: PUSH
20219: LD_INT 23
20221: PUSH
20222: LD_INT 25
20224: PUSH
20225: LD_INT 26
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 101
20246: PUSH
20247: LD_INT 102
20249: PUSH
20250: LD_INT 103
20252: PUSH
20253: LD_INT 105
20255: PUSH
20256: LD_INT 106
20258: PUSH
20259: LD_INT 108
20261: PUSH
20262: LD_INT 112
20264: PUSH
20265: LD_INT 116
20267: PUSH
20268: LD_INT 117
20270: PUSH
20271: LD_INT 118
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: ST_TO_ADDR
20290: GO 22693
20292: LD_INT 8
20294: DOUBLE
20295: EQUAL
20296: IFTRUE 20300
20298: GO 20440
20300: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20301: LD_ADDR_VAR 0 2
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 4
20311: PUSH
20312: LD_INT 5
20314: PUSH
20315: LD_INT 6
20317: PUSH
20318: LD_INT 7
20320: PUSH
20321: LD_INT 8
20323: PUSH
20324: LD_INT 11
20326: PUSH
20327: LD_INT 12
20329: PUSH
20330: LD_INT 15
20332: PUSH
20333: LD_INT 16
20335: PUSH
20336: LD_INT 20
20338: PUSH
20339: LD_INT 21
20341: PUSH
20342: LD_INT 22
20344: PUSH
20345: LD_INT 23
20347: PUSH
20348: LD_INT 25
20350: PUSH
20351: LD_INT 26
20353: PUSH
20354: LD_INT 30
20356: PUSH
20357: LD_INT 31
20359: PUSH
20360: LD_INT 32
20362: PUSH
20363: LD_INT 36
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 101
20390: PUSH
20391: LD_INT 102
20393: PUSH
20394: LD_INT 103
20396: PUSH
20397: LD_INT 105
20399: PUSH
20400: LD_INT 106
20402: PUSH
20403: LD_INT 108
20405: PUSH
20406: LD_INT 109
20408: PUSH
20409: LD_INT 112
20411: PUSH
20412: LD_INT 116
20414: PUSH
20415: LD_INT 117
20417: PUSH
20418: LD_INT 118
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: ST_TO_ADDR
20438: GO 22693
20440: LD_INT 9
20442: DOUBLE
20443: EQUAL
20444: IFTRUE 20448
20446: GO 20596
20448: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20449: LD_ADDR_VAR 0 2
20453: PUSH
20454: LD_INT 2
20456: PUSH
20457: LD_INT 4
20459: PUSH
20460: LD_INT 5
20462: PUSH
20463: LD_INT 6
20465: PUSH
20466: LD_INT 7
20468: PUSH
20469: LD_INT 8
20471: PUSH
20472: LD_INT 11
20474: PUSH
20475: LD_INT 12
20477: PUSH
20478: LD_INT 15
20480: PUSH
20481: LD_INT 16
20483: PUSH
20484: LD_INT 20
20486: PUSH
20487: LD_INT 21
20489: PUSH
20490: LD_INT 22
20492: PUSH
20493: LD_INT 23
20495: PUSH
20496: LD_INT 25
20498: PUSH
20499: LD_INT 26
20501: PUSH
20502: LD_INT 28
20504: PUSH
20505: LD_INT 30
20507: PUSH
20508: LD_INT 31
20510: PUSH
20511: LD_INT 32
20513: PUSH
20514: LD_INT 36
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 101
20542: PUSH
20543: LD_INT 102
20545: PUSH
20546: LD_INT 103
20548: PUSH
20549: LD_INT 105
20551: PUSH
20552: LD_INT 106
20554: PUSH
20555: LD_INT 108
20557: PUSH
20558: LD_INT 109
20560: PUSH
20561: LD_INT 112
20563: PUSH
20564: LD_INT 114
20566: PUSH
20567: LD_INT 116
20569: PUSH
20570: LD_INT 117
20572: PUSH
20573: LD_INT 118
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
20594: GO 22693
20596: LD_INT 10
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20800
20604: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20605: LD_ADDR_VAR 0 2
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: LD_INT 4
20615: PUSH
20616: LD_INT 5
20618: PUSH
20619: LD_INT 6
20621: PUSH
20622: LD_INT 7
20624: PUSH
20625: LD_INT 8
20627: PUSH
20628: LD_INT 9
20630: PUSH
20631: LD_INT 10
20633: PUSH
20634: LD_INT 11
20636: PUSH
20637: LD_INT 12
20639: PUSH
20640: LD_INT 13
20642: PUSH
20643: LD_INT 14
20645: PUSH
20646: LD_INT 15
20648: PUSH
20649: LD_INT 16
20651: PUSH
20652: LD_INT 17
20654: PUSH
20655: LD_INT 18
20657: PUSH
20658: LD_INT 19
20660: PUSH
20661: LD_INT 20
20663: PUSH
20664: LD_INT 21
20666: PUSH
20667: LD_INT 22
20669: PUSH
20670: LD_INT 23
20672: PUSH
20673: LD_INT 24
20675: PUSH
20676: LD_INT 25
20678: PUSH
20679: LD_INT 26
20681: PUSH
20682: LD_INT 28
20684: PUSH
20685: LD_INT 30
20687: PUSH
20688: LD_INT 31
20690: PUSH
20691: LD_INT 32
20693: PUSH
20694: LD_INT 36
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 101
20730: PUSH
20731: LD_INT 102
20733: PUSH
20734: LD_INT 103
20736: PUSH
20737: LD_INT 104
20739: PUSH
20740: LD_INT 105
20742: PUSH
20743: LD_INT 106
20745: PUSH
20746: LD_INT 107
20748: PUSH
20749: LD_INT 108
20751: PUSH
20752: LD_INT 109
20754: PUSH
20755: LD_INT 110
20757: PUSH
20758: LD_INT 111
20760: PUSH
20761: LD_INT 112
20763: PUSH
20764: LD_INT 114
20766: PUSH
20767: LD_INT 116
20769: PUSH
20770: LD_INT 117
20772: PUSH
20773: LD_INT 118
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: ST_TO_ADDR
20798: GO 22693
20800: LD_INT 11
20802: DOUBLE
20803: EQUAL
20804: IFTRUE 20808
20806: GO 21012
20808: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20809: LD_ADDR_VAR 0 2
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: LD_INT 3
20819: PUSH
20820: LD_INT 4
20822: PUSH
20823: LD_INT 5
20825: PUSH
20826: LD_INT 6
20828: PUSH
20829: LD_INT 7
20831: PUSH
20832: LD_INT 8
20834: PUSH
20835: LD_INT 9
20837: PUSH
20838: LD_INT 10
20840: PUSH
20841: LD_INT 11
20843: PUSH
20844: LD_INT 12
20846: PUSH
20847: LD_INT 13
20849: PUSH
20850: LD_INT 14
20852: PUSH
20853: LD_INT 15
20855: PUSH
20856: LD_INT 16
20858: PUSH
20859: LD_INT 17
20861: PUSH
20862: LD_INT 18
20864: PUSH
20865: LD_INT 19
20867: PUSH
20868: LD_INT 20
20870: PUSH
20871: LD_INT 21
20873: PUSH
20874: LD_INT 22
20876: PUSH
20877: LD_INT 23
20879: PUSH
20880: LD_INT 24
20882: PUSH
20883: LD_INT 25
20885: PUSH
20886: LD_INT 26
20888: PUSH
20889: LD_INT 28
20891: PUSH
20892: LD_INT 30
20894: PUSH
20895: LD_INT 31
20897: PUSH
20898: LD_INT 32
20900: PUSH
20901: LD_INT 34
20903: PUSH
20904: LD_INT 36
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 101
20942: PUSH
20943: LD_INT 102
20945: PUSH
20946: LD_INT 103
20948: PUSH
20949: LD_INT 104
20951: PUSH
20952: LD_INT 105
20954: PUSH
20955: LD_INT 106
20957: PUSH
20958: LD_INT 107
20960: PUSH
20961: LD_INT 108
20963: PUSH
20964: LD_INT 109
20966: PUSH
20967: LD_INT 110
20969: PUSH
20970: LD_INT 111
20972: PUSH
20973: LD_INT 112
20975: PUSH
20976: LD_INT 114
20978: PUSH
20979: LD_INT 116
20981: PUSH
20982: LD_INT 117
20984: PUSH
20985: LD_INT 118
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: ST_TO_ADDR
21010: GO 22693
21012: LD_INT 12
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21240
21020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21021: LD_ADDR_VAR 0 2
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: LD_INT 3
21034: PUSH
21035: LD_INT 4
21037: PUSH
21038: LD_INT 5
21040: PUSH
21041: LD_INT 6
21043: PUSH
21044: LD_INT 7
21046: PUSH
21047: LD_INT 8
21049: PUSH
21050: LD_INT 9
21052: PUSH
21053: LD_INT 10
21055: PUSH
21056: LD_INT 11
21058: PUSH
21059: LD_INT 12
21061: PUSH
21062: LD_INT 13
21064: PUSH
21065: LD_INT 14
21067: PUSH
21068: LD_INT 15
21070: PUSH
21071: LD_INT 16
21073: PUSH
21074: LD_INT 17
21076: PUSH
21077: LD_INT 18
21079: PUSH
21080: LD_INT 19
21082: PUSH
21083: LD_INT 20
21085: PUSH
21086: LD_INT 21
21088: PUSH
21089: LD_INT 22
21091: PUSH
21092: LD_INT 23
21094: PUSH
21095: LD_INT 24
21097: PUSH
21098: LD_INT 25
21100: PUSH
21101: LD_INT 26
21103: PUSH
21104: LD_INT 27
21106: PUSH
21107: LD_INT 28
21109: PUSH
21110: LD_INT 30
21112: PUSH
21113: LD_INT 31
21115: PUSH
21116: LD_INT 32
21118: PUSH
21119: LD_INT 33
21121: PUSH
21122: LD_INT 34
21124: PUSH
21125: LD_INT 36
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 101
21166: PUSH
21167: LD_INT 102
21169: PUSH
21170: LD_INT 103
21172: PUSH
21173: LD_INT 104
21175: PUSH
21176: LD_INT 105
21178: PUSH
21179: LD_INT 106
21181: PUSH
21182: LD_INT 107
21184: PUSH
21185: LD_INT 108
21187: PUSH
21188: LD_INT 109
21190: PUSH
21191: LD_INT 110
21193: PUSH
21194: LD_INT 111
21196: PUSH
21197: LD_INT 112
21199: PUSH
21200: LD_INT 113
21202: PUSH
21203: LD_INT 114
21205: PUSH
21206: LD_INT 116
21208: PUSH
21209: LD_INT 117
21211: PUSH
21212: LD_INT 118
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: ST_TO_ADDR
21238: GO 22693
21240: LD_INT 13
21242: DOUBLE
21243: EQUAL
21244: IFTRUE 21248
21246: GO 21456
21248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21249: LD_ADDR_VAR 0 2
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: LD_INT 3
21262: PUSH
21263: LD_INT 4
21265: PUSH
21266: LD_INT 5
21268: PUSH
21269: LD_INT 8
21271: PUSH
21272: LD_INT 9
21274: PUSH
21275: LD_INT 10
21277: PUSH
21278: LD_INT 11
21280: PUSH
21281: LD_INT 12
21283: PUSH
21284: LD_INT 14
21286: PUSH
21287: LD_INT 15
21289: PUSH
21290: LD_INT 16
21292: PUSH
21293: LD_INT 17
21295: PUSH
21296: LD_INT 18
21298: PUSH
21299: LD_INT 19
21301: PUSH
21302: LD_INT 20
21304: PUSH
21305: LD_INT 21
21307: PUSH
21308: LD_INT 22
21310: PUSH
21311: LD_INT 23
21313: PUSH
21314: LD_INT 24
21316: PUSH
21317: LD_INT 25
21319: PUSH
21320: LD_INT 26
21322: PUSH
21323: LD_INT 27
21325: PUSH
21326: LD_INT 28
21328: PUSH
21329: LD_INT 30
21331: PUSH
21332: LD_INT 31
21334: PUSH
21335: LD_INT 32
21337: PUSH
21338: LD_INT 33
21340: PUSH
21341: LD_INT 34
21343: PUSH
21344: LD_INT 36
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 101
21382: PUSH
21383: LD_INT 102
21385: PUSH
21386: LD_INT 103
21388: PUSH
21389: LD_INT 104
21391: PUSH
21392: LD_INT 105
21394: PUSH
21395: LD_INT 106
21397: PUSH
21398: LD_INT 107
21400: PUSH
21401: LD_INT 108
21403: PUSH
21404: LD_INT 109
21406: PUSH
21407: LD_INT 110
21409: PUSH
21410: LD_INT 111
21412: PUSH
21413: LD_INT 112
21415: PUSH
21416: LD_INT 113
21418: PUSH
21419: LD_INT 114
21421: PUSH
21422: LD_INT 116
21424: PUSH
21425: LD_INT 117
21427: PUSH
21428: LD_INT 118
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: ST_TO_ADDR
21454: GO 22693
21456: LD_INT 14
21458: DOUBLE
21459: EQUAL
21460: IFTRUE 21464
21462: GO 21688
21464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21465: LD_ADDR_VAR 0 2
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: LD_INT 3
21478: PUSH
21479: LD_INT 4
21481: PUSH
21482: LD_INT 5
21484: PUSH
21485: LD_INT 6
21487: PUSH
21488: LD_INT 7
21490: PUSH
21491: LD_INT 8
21493: PUSH
21494: LD_INT 9
21496: PUSH
21497: LD_INT 10
21499: PUSH
21500: LD_INT 11
21502: PUSH
21503: LD_INT 12
21505: PUSH
21506: LD_INT 13
21508: PUSH
21509: LD_INT 14
21511: PUSH
21512: LD_INT 15
21514: PUSH
21515: LD_INT 16
21517: PUSH
21518: LD_INT 17
21520: PUSH
21521: LD_INT 18
21523: PUSH
21524: LD_INT 19
21526: PUSH
21527: LD_INT 20
21529: PUSH
21530: LD_INT 21
21532: PUSH
21533: LD_INT 22
21535: PUSH
21536: LD_INT 23
21538: PUSH
21539: LD_INT 24
21541: PUSH
21542: LD_INT 25
21544: PUSH
21545: LD_INT 26
21547: PUSH
21548: LD_INT 27
21550: PUSH
21551: LD_INT 28
21553: PUSH
21554: LD_INT 29
21556: PUSH
21557: LD_INT 30
21559: PUSH
21560: LD_INT 31
21562: PUSH
21563: LD_INT 32
21565: PUSH
21566: LD_INT 33
21568: PUSH
21569: LD_INT 34
21571: PUSH
21572: LD_INT 36
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 101
21614: PUSH
21615: LD_INT 102
21617: PUSH
21618: LD_INT 103
21620: PUSH
21621: LD_INT 104
21623: PUSH
21624: LD_INT 105
21626: PUSH
21627: LD_INT 106
21629: PUSH
21630: LD_INT 107
21632: PUSH
21633: LD_INT 108
21635: PUSH
21636: LD_INT 109
21638: PUSH
21639: LD_INT 110
21641: PUSH
21642: LD_INT 111
21644: PUSH
21645: LD_INT 112
21647: PUSH
21648: LD_INT 113
21650: PUSH
21651: LD_INT 114
21653: PUSH
21654: LD_INT 116
21656: PUSH
21657: LD_INT 117
21659: PUSH
21660: LD_INT 118
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: ST_TO_ADDR
21686: GO 22693
21688: LD_INT 15
21690: DOUBLE
21691: EQUAL
21692: IFTRUE 21696
21694: GO 21920
21696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: LD_INT 2
21707: PUSH
21708: LD_INT 3
21710: PUSH
21711: LD_INT 4
21713: PUSH
21714: LD_INT 5
21716: PUSH
21717: LD_INT 6
21719: PUSH
21720: LD_INT 7
21722: PUSH
21723: LD_INT 8
21725: PUSH
21726: LD_INT 9
21728: PUSH
21729: LD_INT 10
21731: PUSH
21732: LD_INT 11
21734: PUSH
21735: LD_INT 12
21737: PUSH
21738: LD_INT 13
21740: PUSH
21741: LD_INT 14
21743: PUSH
21744: LD_INT 15
21746: PUSH
21747: LD_INT 16
21749: PUSH
21750: LD_INT 17
21752: PUSH
21753: LD_INT 18
21755: PUSH
21756: LD_INT 19
21758: PUSH
21759: LD_INT 20
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_INT 23
21770: PUSH
21771: LD_INT 24
21773: PUSH
21774: LD_INT 25
21776: PUSH
21777: LD_INT 26
21779: PUSH
21780: LD_INT 27
21782: PUSH
21783: LD_INT 28
21785: PUSH
21786: LD_INT 29
21788: PUSH
21789: LD_INT 30
21791: PUSH
21792: LD_INT 31
21794: PUSH
21795: LD_INT 32
21797: PUSH
21798: LD_INT 33
21800: PUSH
21801: LD_INT 34
21803: PUSH
21804: LD_INT 36
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 101
21846: PUSH
21847: LD_INT 102
21849: PUSH
21850: LD_INT 103
21852: PUSH
21853: LD_INT 104
21855: PUSH
21856: LD_INT 105
21858: PUSH
21859: LD_INT 106
21861: PUSH
21862: LD_INT 107
21864: PUSH
21865: LD_INT 108
21867: PUSH
21868: LD_INT 109
21870: PUSH
21871: LD_INT 110
21873: PUSH
21874: LD_INT 111
21876: PUSH
21877: LD_INT 112
21879: PUSH
21880: LD_INT 113
21882: PUSH
21883: LD_INT 114
21885: PUSH
21886: LD_INT 116
21888: PUSH
21889: LD_INT 117
21891: PUSH
21892: LD_INT 118
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: ST_TO_ADDR
21918: GO 22693
21920: LD_INT 16
21922: DOUBLE
21923: EQUAL
21924: IFTRUE 21928
21926: GO 22064
21928: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21929: LD_ADDR_VAR 0 2
21933: PUSH
21934: LD_INT 2
21936: PUSH
21937: LD_INT 4
21939: PUSH
21940: LD_INT 5
21942: PUSH
21943: LD_INT 7
21945: PUSH
21946: LD_INT 11
21948: PUSH
21949: LD_INT 12
21951: PUSH
21952: LD_INT 15
21954: PUSH
21955: LD_INT 16
21957: PUSH
21958: LD_INT 20
21960: PUSH
21961: LD_INT 21
21963: PUSH
21964: LD_INT 22
21966: PUSH
21967: LD_INT 23
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 26
21975: PUSH
21976: LD_INT 30
21978: PUSH
21979: LD_INT 31
21981: PUSH
21982: LD_INT 32
21984: PUSH
21985: LD_INT 33
21987: PUSH
21988: LD_INT 34
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 101
22014: PUSH
22015: LD_INT 102
22017: PUSH
22018: LD_INT 103
22020: PUSH
22021: LD_INT 106
22023: PUSH
22024: LD_INT 108
22026: PUSH
22027: LD_INT 112
22029: PUSH
22030: LD_INT 113
22032: PUSH
22033: LD_INT 114
22035: PUSH
22036: LD_INT 116
22038: PUSH
22039: LD_INT 117
22041: PUSH
22042: LD_INT 118
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: ST_TO_ADDR
22062: GO 22693
22064: LD_INT 17
22066: DOUBLE
22067: EQUAL
22068: IFTRUE 22072
22070: GO 22296
22072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22073: LD_ADDR_VAR 0 2
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 3
22086: PUSH
22087: LD_INT 4
22089: PUSH
22090: LD_INT 5
22092: PUSH
22093: LD_INT 6
22095: PUSH
22096: LD_INT 7
22098: PUSH
22099: LD_INT 8
22101: PUSH
22102: LD_INT 9
22104: PUSH
22105: LD_INT 10
22107: PUSH
22108: LD_INT 11
22110: PUSH
22111: LD_INT 12
22113: PUSH
22114: LD_INT 13
22116: PUSH
22117: LD_INT 14
22119: PUSH
22120: LD_INT 15
22122: PUSH
22123: LD_INT 16
22125: PUSH
22126: LD_INT 17
22128: PUSH
22129: LD_INT 18
22131: PUSH
22132: LD_INT 19
22134: PUSH
22135: LD_INT 20
22137: PUSH
22138: LD_INT 21
22140: PUSH
22141: LD_INT 22
22143: PUSH
22144: LD_INT 23
22146: PUSH
22147: LD_INT 24
22149: PUSH
22150: LD_INT 25
22152: PUSH
22153: LD_INT 26
22155: PUSH
22156: LD_INT 27
22158: PUSH
22159: LD_INT 28
22161: PUSH
22162: LD_INT 29
22164: PUSH
22165: LD_INT 30
22167: PUSH
22168: LD_INT 31
22170: PUSH
22171: LD_INT 32
22173: PUSH
22174: LD_INT 33
22176: PUSH
22177: LD_INT 34
22179: PUSH
22180: LD_INT 36
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 101
22222: PUSH
22223: LD_INT 102
22225: PUSH
22226: LD_INT 103
22228: PUSH
22229: LD_INT 104
22231: PUSH
22232: LD_INT 105
22234: PUSH
22235: LD_INT 106
22237: PUSH
22238: LD_INT 107
22240: PUSH
22241: LD_INT 108
22243: PUSH
22244: LD_INT 109
22246: PUSH
22247: LD_INT 110
22249: PUSH
22250: LD_INT 111
22252: PUSH
22253: LD_INT 112
22255: PUSH
22256: LD_INT 113
22258: PUSH
22259: LD_INT 114
22261: PUSH
22262: LD_INT 116
22264: PUSH
22265: LD_INT 117
22267: PUSH
22268: LD_INT 118
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: ST_TO_ADDR
22294: GO 22693
22296: LD_INT 18
22298: DOUBLE
22299: EQUAL
22300: IFTRUE 22304
22302: GO 22452
22304: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22305: LD_ADDR_VAR 0 2
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: LD_INT 4
22315: PUSH
22316: LD_INT 5
22318: PUSH
22319: LD_INT 7
22321: PUSH
22322: LD_INT 11
22324: PUSH
22325: LD_INT 12
22327: PUSH
22328: LD_INT 15
22330: PUSH
22331: LD_INT 16
22333: PUSH
22334: LD_INT 20
22336: PUSH
22337: LD_INT 21
22339: PUSH
22340: LD_INT 22
22342: PUSH
22343: LD_INT 23
22345: PUSH
22346: LD_INT 25
22348: PUSH
22349: LD_INT 26
22351: PUSH
22352: LD_INT 30
22354: PUSH
22355: LD_INT 31
22357: PUSH
22358: LD_INT 32
22360: PUSH
22361: LD_INT 33
22363: PUSH
22364: LD_INT 34
22366: PUSH
22367: LD_INT 35
22369: PUSH
22370: LD_INT 36
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 101
22398: PUSH
22399: LD_INT 102
22401: PUSH
22402: LD_INT 103
22404: PUSH
22405: LD_INT 106
22407: PUSH
22408: LD_INT 108
22410: PUSH
22411: LD_INT 112
22413: PUSH
22414: LD_INT 113
22416: PUSH
22417: LD_INT 114
22419: PUSH
22420: LD_INT 115
22422: PUSH
22423: LD_INT 116
22425: PUSH
22426: LD_INT 117
22428: PUSH
22429: LD_INT 118
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: ST_TO_ADDR
22450: GO 22693
22452: LD_INT 19
22454: DOUBLE
22455: EQUAL
22456: IFTRUE 22460
22458: GO 22692
22460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22461: LD_ADDR_VAR 0 2
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 3
22474: PUSH
22475: LD_INT 4
22477: PUSH
22478: LD_INT 5
22480: PUSH
22481: LD_INT 6
22483: PUSH
22484: LD_INT 7
22486: PUSH
22487: LD_INT 8
22489: PUSH
22490: LD_INT 9
22492: PUSH
22493: LD_INT 10
22495: PUSH
22496: LD_INT 11
22498: PUSH
22499: LD_INT 12
22501: PUSH
22502: LD_INT 13
22504: PUSH
22505: LD_INT 14
22507: PUSH
22508: LD_INT 15
22510: PUSH
22511: LD_INT 16
22513: PUSH
22514: LD_INT 17
22516: PUSH
22517: LD_INT 18
22519: PUSH
22520: LD_INT 19
22522: PUSH
22523: LD_INT 20
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 23
22534: PUSH
22535: LD_INT 24
22537: PUSH
22538: LD_INT 25
22540: PUSH
22541: LD_INT 26
22543: PUSH
22544: LD_INT 27
22546: PUSH
22547: LD_INT 28
22549: PUSH
22550: LD_INT 29
22552: PUSH
22553: LD_INT 30
22555: PUSH
22556: LD_INT 31
22558: PUSH
22559: LD_INT 32
22561: PUSH
22562: LD_INT 33
22564: PUSH
22565: LD_INT 34
22567: PUSH
22568: LD_INT 35
22570: PUSH
22571: LD_INT 36
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 101
22614: PUSH
22615: LD_INT 102
22617: PUSH
22618: LD_INT 103
22620: PUSH
22621: LD_INT 104
22623: PUSH
22624: LD_INT 105
22626: PUSH
22627: LD_INT 106
22629: PUSH
22630: LD_INT 107
22632: PUSH
22633: LD_INT 108
22635: PUSH
22636: LD_INT 109
22638: PUSH
22639: LD_INT 110
22641: PUSH
22642: LD_INT 111
22644: PUSH
22645: LD_INT 112
22647: PUSH
22648: LD_INT 113
22650: PUSH
22651: LD_INT 114
22653: PUSH
22654: LD_INT 115
22656: PUSH
22657: LD_INT 116
22659: PUSH
22660: LD_INT 117
22662: PUSH
22663: LD_INT 118
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: ST_TO_ADDR
22690: GO 22693
22692: POP
// end else
22693: GO 22924
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22695: LD_ADDR_VAR 0 2
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: LD_INT 3
22708: PUSH
22709: LD_INT 4
22711: PUSH
22712: LD_INT 5
22714: PUSH
22715: LD_INT 6
22717: PUSH
22718: LD_INT 7
22720: PUSH
22721: LD_INT 8
22723: PUSH
22724: LD_INT 9
22726: PUSH
22727: LD_INT 10
22729: PUSH
22730: LD_INT 11
22732: PUSH
22733: LD_INT 12
22735: PUSH
22736: LD_INT 13
22738: PUSH
22739: LD_INT 14
22741: PUSH
22742: LD_INT 15
22744: PUSH
22745: LD_INT 16
22747: PUSH
22748: LD_INT 17
22750: PUSH
22751: LD_INT 18
22753: PUSH
22754: LD_INT 19
22756: PUSH
22757: LD_INT 20
22759: PUSH
22760: LD_INT 21
22762: PUSH
22763: LD_INT 22
22765: PUSH
22766: LD_INT 23
22768: PUSH
22769: LD_INT 24
22771: PUSH
22772: LD_INT 25
22774: PUSH
22775: LD_INT 26
22777: PUSH
22778: LD_INT 27
22780: PUSH
22781: LD_INT 28
22783: PUSH
22784: LD_INT 29
22786: PUSH
22787: LD_INT 30
22789: PUSH
22790: LD_INT 31
22792: PUSH
22793: LD_INT 32
22795: PUSH
22796: LD_INT 33
22798: PUSH
22799: LD_INT 34
22801: PUSH
22802: LD_INT 35
22804: PUSH
22805: LD_INT 36
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 101
22848: PUSH
22849: LD_INT 102
22851: PUSH
22852: LD_INT 103
22854: PUSH
22855: LD_INT 104
22857: PUSH
22858: LD_INT 105
22860: PUSH
22861: LD_INT 106
22863: PUSH
22864: LD_INT 107
22866: PUSH
22867: LD_INT 108
22869: PUSH
22870: LD_INT 109
22872: PUSH
22873: LD_INT 110
22875: PUSH
22876: LD_INT 111
22878: PUSH
22879: LD_INT 112
22881: PUSH
22882: LD_INT 113
22884: PUSH
22885: LD_INT 114
22887: PUSH
22888: LD_INT 115
22890: PUSH
22891: LD_INT 116
22893: PUSH
22894: LD_INT 117
22896: PUSH
22897: LD_INT 118
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: ST_TO_ADDR
// if result then
22924: LD_VAR 0 2
22928: IFFALSE 23714
// begin normal :=  ;
22930: LD_ADDR_VAR 0 5
22934: PUSH
22935: LD_STRING 
22937: ST_TO_ADDR
// hardcore :=  ;
22938: LD_ADDR_VAR 0 6
22942: PUSH
22943: LD_STRING 
22945: ST_TO_ADDR
// active :=  ;
22946: LD_ADDR_VAR 0 7
22950: PUSH
22951: LD_STRING 
22953: ST_TO_ADDR
// for i = 1 to normalCounter do
22954: LD_ADDR_VAR 0 8
22958: PUSH
22959: DOUBLE
22960: LD_INT 1
22962: DEC
22963: ST_TO_ADDR
22964: LD_EXP 54
22968: PUSH
22969: FOR_TO
22970: IFFALSE 23071
// begin tmp := 0 ;
22972: LD_ADDR_VAR 0 3
22976: PUSH
22977: LD_STRING 0
22979: ST_TO_ADDR
// if result [ 1 ] then
22980: LD_VAR 0 2
22984: PUSH
22985: LD_INT 1
22987: ARRAY
22988: IFFALSE 23053
// if result [ 1 ] [ 1 ] = i then
22990: LD_VAR 0 2
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: PUSH
22999: LD_INT 1
23001: ARRAY
23002: PUSH
23003: LD_VAR 0 8
23007: EQUAL
23008: IFFALSE 23053
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23010: LD_ADDR_VAR 0 2
23014: PUSH
23015: LD_VAR 0 2
23019: PPUSH
23020: LD_INT 1
23022: PPUSH
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 1
23030: ARRAY
23031: PPUSH
23032: LD_INT 1
23034: PPUSH
23035: CALL_OW 3
23039: PPUSH
23040: CALL_OW 1
23044: ST_TO_ADDR
// tmp := 1 ;
23045: LD_ADDR_VAR 0 3
23049: PUSH
23050: LD_STRING 1
23052: ST_TO_ADDR
// end ; normal := normal & tmp ;
23053: LD_ADDR_VAR 0 5
23057: PUSH
23058: LD_VAR 0 5
23062: PUSH
23063: LD_VAR 0 3
23067: STR
23068: ST_TO_ADDR
// end ;
23069: GO 22969
23071: POP
23072: POP
// for i = 1 to hardcoreCounter do
23073: LD_ADDR_VAR 0 8
23077: PUSH
23078: DOUBLE
23079: LD_INT 1
23081: DEC
23082: ST_TO_ADDR
23083: LD_EXP 55
23087: PUSH
23088: FOR_TO
23089: IFFALSE 23194
// begin tmp := 0 ;
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: LD_STRING 0
23098: ST_TO_ADDR
// if result [ 2 ] then
23099: LD_VAR 0 2
23103: PUSH
23104: LD_INT 2
23106: ARRAY
23107: IFFALSE 23176
// if result [ 2 ] [ 1 ] = 100 + i then
23109: LD_VAR 0 2
23113: PUSH
23114: LD_INT 2
23116: ARRAY
23117: PUSH
23118: LD_INT 1
23120: ARRAY
23121: PUSH
23122: LD_INT 100
23124: PUSH
23125: LD_VAR 0 8
23129: PLUS
23130: EQUAL
23131: IFFALSE 23176
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23133: LD_ADDR_VAR 0 2
23137: PUSH
23138: LD_VAR 0 2
23142: PPUSH
23143: LD_INT 2
23145: PPUSH
23146: LD_VAR 0 2
23150: PUSH
23151: LD_INT 2
23153: ARRAY
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: CALL_OW 3
23162: PPUSH
23163: CALL_OW 1
23167: ST_TO_ADDR
// tmp := 1 ;
23168: LD_ADDR_VAR 0 3
23172: PUSH
23173: LD_STRING 1
23175: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23176: LD_ADDR_VAR 0 6
23180: PUSH
23181: LD_VAR 0 6
23185: PUSH
23186: LD_VAR 0 3
23190: STR
23191: ST_TO_ADDR
// end ;
23192: GO 23088
23194: POP
23195: POP
// if isGameLoad then
23196: LD_VAR 0 1
23200: IFFALSE 23675
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23202: LD_ADDR_VAR 0 4
23206: PUSH
23207: LD_EXP 58
23211: PUSH
23212: LD_EXP 57
23216: PUSH
23217: LD_EXP 59
23221: PUSH
23222: LD_EXP 56
23226: PUSH
23227: LD_EXP 60
23231: PUSH
23232: LD_EXP 61
23236: PUSH
23237: LD_EXP 62
23241: PUSH
23242: LD_EXP 63
23246: PUSH
23247: LD_EXP 64
23251: PUSH
23252: LD_EXP 65
23256: PUSH
23257: LD_EXP 66
23261: PUSH
23262: LD_EXP 67
23266: PUSH
23267: LD_EXP 68
23271: PUSH
23272: LD_EXP 69
23276: PUSH
23277: LD_EXP 77
23281: PUSH
23282: LD_EXP 78
23286: PUSH
23287: LD_EXP 79
23291: PUSH
23292: LD_EXP 80
23296: PUSH
23297: LD_EXP 82
23301: PUSH
23302: LD_EXP 83
23306: PUSH
23307: LD_EXP 84
23311: PUSH
23312: LD_EXP 87
23316: PUSH
23317: LD_EXP 89
23321: PUSH
23322: LD_EXP 90
23326: PUSH
23327: LD_EXP 91
23331: PUSH
23332: LD_EXP 93
23336: PUSH
23337: LD_EXP 94
23341: PUSH
23342: LD_EXP 97
23346: PUSH
23347: LD_EXP 98
23351: PUSH
23352: LD_EXP 99
23356: PUSH
23357: LD_EXP 100
23361: PUSH
23362: LD_EXP 101
23366: PUSH
23367: LD_EXP 102
23371: PUSH
23372: LD_EXP 103
23376: PUSH
23377: LD_EXP 104
23381: PUSH
23382: LD_EXP 105
23386: PUSH
23387: LD_EXP 70
23391: PUSH
23392: LD_EXP 71
23396: PUSH
23397: LD_EXP 74
23401: PUSH
23402: LD_EXP 75
23406: PUSH
23407: LD_EXP 76
23411: PUSH
23412: LD_EXP 72
23416: PUSH
23417: LD_EXP 73
23421: PUSH
23422: LD_EXP 81
23426: PUSH
23427: LD_EXP 85
23431: PUSH
23432: LD_EXP 86
23436: PUSH
23437: LD_EXP 88
23441: PUSH
23442: LD_EXP 92
23446: PUSH
23447: LD_EXP 95
23451: PUSH
23452: LD_EXP 96
23456: PUSH
23457: LD_EXP 106
23461: PUSH
23462: LD_EXP 107
23466: PUSH
23467: LD_EXP 108
23471: PUSH
23472: LD_EXP 109
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: ST_TO_ADDR
// tmp :=  ;
23533: LD_ADDR_VAR 0 3
23537: PUSH
23538: LD_STRING 
23540: ST_TO_ADDR
// for i = 1 to normalCounter do
23541: LD_ADDR_VAR 0 8
23545: PUSH
23546: DOUBLE
23547: LD_INT 1
23549: DEC
23550: ST_TO_ADDR
23551: LD_EXP 54
23555: PUSH
23556: FOR_TO
23557: IFFALSE 23593
// begin if flags [ i ] then
23559: LD_VAR 0 4
23563: PUSH
23564: LD_VAR 0 8
23568: ARRAY
23569: IFFALSE 23591
// tmp := tmp & i & ; ;
23571: LD_ADDR_VAR 0 3
23575: PUSH
23576: LD_VAR 0 3
23580: PUSH
23581: LD_VAR 0 8
23585: STR
23586: PUSH
23587: LD_STRING ;
23589: STR
23590: ST_TO_ADDR
// end ;
23591: GO 23556
23593: POP
23594: POP
// for i = 1 to hardcoreCounter do
23595: LD_ADDR_VAR 0 8
23599: PUSH
23600: DOUBLE
23601: LD_INT 1
23603: DEC
23604: ST_TO_ADDR
23605: LD_EXP 55
23609: PUSH
23610: FOR_TO
23611: IFFALSE 23657
// begin if flags [ normalCounter + i ] then
23613: LD_VAR 0 4
23617: PUSH
23618: LD_EXP 54
23622: PUSH
23623: LD_VAR 0 8
23627: PLUS
23628: ARRAY
23629: IFFALSE 23655
// tmp := tmp & ( 100 + i ) & ; ;
23631: LD_ADDR_VAR 0 3
23635: PUSH
23636: LD_VAR 0 3
23640: PUSH
23641: LD_INT 100
23643: PUSH
23644: LD_VAR 0 8
23648: PLUS
23649: STR
23650: PUSH
23651: LD_STRING ;
23653: STR
23654: ST_TO_ADDR
// end ;
23655: GO 23610
23657: POP
23658: POP
// if tmp then
23659: LD_VAR 0 3
23663: IFFALSE 23675
// active := tmp ;
23665: LD_ADDR_VAR 0 7
23669: PUSH
23670: LD_VAR 0 3
23674: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23675: LD_STRING getStreamItemsFromMission("
23677: PUSH
23678: LD_VAR 0 5
23682: STR
23683: PUSH
23684: LD_STRING ","
23686: STR
23687: PUSH
23688: LD_VAR 0 6
23692: STR
23693: PUSH
23694: LD_STRING ","
23696: STR
23697: PUSH
23698: LD_VAR 0 7
23702: STR
23703: PUSH
23704: LD_STRING ")
23706: STR
23707: PPUSH
23708: CALL_OW 559
// end else
23712: GO 23721
// ToLua ( getStreamItemsFromMission("","","") ) ;
23714: LD_STRING getStreamItemsFromMission("","","")
23716: PPUSH
23717: CALL_OW 559
// end ;
23721: LD_VAR 0 2
23725: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23726: LD_EXP 53
23730: PUSH
23731: LD_EXP 58
23735: AND
23736: IFFALSE 23860
23738: GO 23740
23740: DISABLE
23741: LD_INT 0
23743: PPUSH
23744: PPUSH
// begin enable ;
23745: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23746: LD_ADDR_VAR 0 2
23750: PUSH
23751: LD_INT 22
23753: PUSH
23754: LD_OWVAR 2
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: LD_INT 34
23768: PUSH
23769: LD_INT 7
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 34
23778: PUSH
23779: LD_INT 45
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 34
23788: PUSH
23789: LD_INT 28
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 34
23798: PUSH
23799: LD_INT 47
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PPUSH
23817: CALL_OW 69
23821: ST_TO_ADDR
// if not tmp then
23822: LD_VAR 0 2
23826: NOT
23827: IFFALSE 23831
// exit ;
23829: GO 23860
// for i in tmp do
23831: LD_ADDR_VAR 0 1
23835: PUSH
23836: LD_VAR 0 2
23840: PUSH
23841: FOR_IN
23842: IFFALSE 23858
// begin SetLives ( i , 0 ) ;
23844: LD_VAR 0 1
23848: PPUSH
23849: LD_INT 0
23851: PPUSH
23852: CALL_OW 234
// end ;
23856: GO 23841
23858: POP
23859: POP
// end ;
23860: PPOPN 2
23862: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23863: LD_EXP 53
23867: PUSH
23868: LD_EXP 59
23872: AND
23873: IFFALSE 23957
23875: GO 23877
23877: DISABLE
23878: LD_INT 0
23880: PPUSH
23881: PPUSH
// begin enable ;
23882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23883: LD_ADDR_VAR 0 2
23887: PUSH
23888: LD_INT 22
23890: PUSH
23891: LD_OWVAR 2
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 32
23902: PUSH
23903: LD_INT 3
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PPUSH
23914: CALL_OW 69
23918: ST_TO_ADDR
// if not tmp then
23919: LD_VAR 0 2
23923: NOT
23924: IFFALSE 23928
// exit ;
23926: GO 23957
// for i in tmp do
23928: LD_ADDR_VAR 0 1
23932: PUSH
23933: LD_VAR 0 2
23937: PUSH
23938: FOR_IN
23939: IFFALSE 23955
// begin SetLives ( i , 0 ) ;
23941: LD_VAR 0 1
23945: PPUSH
23946: LD_INT 0
23948: PPUSH
23949: CALL_OW 234
// end ;
23953: GO 23938
23955: POP
23956: POP
// end ;
23957: PPOPN 2
23959: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23960: LD_EXP 53
23964: PUSH
23965: LD_EXP 56
23969: AND
23970: IFFALSE 24063
23972: GO 23974
23974: DISABLE
23975: LD_INT 0
23977: PPUSH
// begin enable ;
23978: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23979: LD_ADDR_VAR 0 1
23983: PUSH
23984: LD_INT 22
23986: PUSH
23987: LD_OWVAR 2
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: PUSH
23999: LD_INT 25
24001: PUSH
24002: LD_INT 5
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 25
24011: PUSH
24012: LD_INT 9
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 25
24021: PUSH
24022: LD_INT 8
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PPUSH
24039: CALL_OW 69
24043: PUSH
24044: FOR_IN
24045: IFFALSE 24061
// begin SetClass ( i , 1 ) ;
24047: LD_VAR 0 1
24051: PPUSH
24052: LD_INT 1
24054: PPUSH
24055: CALL_OW 336
// end ;
24059: GO 24044
24061: POP
24062: POP
// end ;
24063: PPOPN 1
24065: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24066: LD_EXP 53
24070: PUSH
24071: LD_EXP 57
24075: AND
24076: PUSH
24077: LD_OWVAR 65
24081: PUSH
24082: LD_INT 7
24084: LESS
24085: AND
24086: IFFALSE 24100
24088: GO 24090
24090: DISABLE
// begin enable ;
24091: ENABLE
// game_speed := 7 ;
24092: LD_ADDR_OWVAR 65
24096: PUSH
24097: LD_INT 7
24099: ST_TO_ADDR
// end ;
24100: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24101: LD_EXP 53
24105: PUSH
24106: LD_EXP 60
24110: AND
24111: IFFALSE 24313
24113: GO 24115
24115: DISABLE
24116: LD_INT 0
24118: PPUSH
24119: PPUSH
24120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: LD_INT 81
24128: PUSH
24129: LD_OWVAR 2
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 21
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PPUSH
24152: CALL_OW 69
24156: ST_TO_ADDR
// if not tmp then
24157: LD_VAR 0 3
24161: NOT
24162: IFFALSE 24166
// exit ;
24164: GO 24313
// if tmp > 5 then
24166: LD_VAR 0 3
24170: PUSH
24171: LD_INT 5
24173: GREATER
24174: IFFALSE 24186
// k := 5 else
24176: LD_ADDR_VAR 0 2
24180: PUSH
24181: LD_INT 5
24183: ST_TO_ADDR
24184: GO 24196
// k := tmp ;
24186: LD_ADDR_VAR 0 2
24190: PUSH
24191: LD_VAR 0 3
24195: ST_TO_ADDR
// for i := 1 to k do
24196: LD_ADDR_VAR 0 1
24200: PUSH
24201: DOUBLE
24202: LD_INT 1
24204: DEC
24205: ST_TO_ADDR
24206: LD_VAR 0 2
24210: PUSH
24211: FOR_TO
24212: IFFALSE 24311
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24214: LD_VAR 0 3
24218: PUSH
24219: LD_VAR 0 1
24223: ARRAY
24224: PPUSH
24225: LD_VAR 0 1
24229: PUSH
24230: LD_INT 4
24232: MOD
24233: PUSH
24234: LD_INT 1
24236: PLUS
24237: PPUSH
24238: CALL_OW 259
24242: PUSH
24243: LD_INT 10
24245: LESS
24246: IFFALSE 24309
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24248: LD_VAR 0 3
24252: PUSH
24253: LD_VAR 0 1
24257: ARRAY
24258: PPUSH
24259: LD_VAR 0 1
24263: PUSH
24264: LD_INT 4
24266: MOD
24267: PUSH
24268: LD_INT 1
24270: PLUS
24271: PPUSH
24272: LD_VAR 0 3
24276: PUSH
24277: LD_VAR 0 1
24281: ARRAY
24282: PPUSH
24283: LD_VAR 0 1
24287: PUSH
24288: LD_INT 4
24290: MOD
24291: PUSH
24292: LD_INT 1
24294: PLUS
24295: PPUSH
24296: CALL_OW 259
24300: PUSH
24301: LD_INT 1
24303: PLUS
24304: PPUSH
24305: CALL_OW 237
24309: GO 24211
24311: POP
24312: POP
// end ;
24313: PPOPN 3
24315: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24316: LD_EXP 53
24320: PUSH
24321: LD_EXP 61
24325: AND
24326: IFFALSE 24346
24328: GO 24330
24330: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24331: LD_INT 4
24333: PPUSH
24334: LD_OWVAR 2
24338: PPUSH
24339: LD_INT 0
24341: PPUSH
24342: CALL_OW 324
24346: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24347: LD_EXP 53
24351: PUSH
24352: LD_EXP 90
24356: AND
24357: IFFALSE 24377
24359: GO 24361
24361: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24362: LD_INT 19
24364: PPUSH
24365: LD_OWVAR 2
24369: PPUSH
24370: LD_INT 0
24372: PPUSH
24373: CALL_OW 324
24377: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24378: LD_EXP 53
24382: PUSH
24383: LD_EXP 62
24387: AND
24388: IFFALSE 24490
24390: GO 24392
24392: DISABLE
24393: LD_INT 0
24395: PPUSH
24396: PPUSH
// begin enable ;
24397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24398: LD_ADDR_VAR 0 2
24402: PUSH
24403: LD_INT 22
24405: PUSH
24406: LD_OWVAR 2
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 34
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 34
24430: PUSH
24431: LD_INT 30
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PPUSH
24447: CALL_OW 69
24451: ST_TO_ADDR
// if not tmp then
24452: LD_VAR 0 2
24456: NOT
24457: IFFALSE 24461
// exit ;
24459: GO 24490
// for i in tmp do
24461: LD_ADDR_VAR 0 1
24465: PUSH
24466: LD_VAR 0 2
24470: PUSH
24471: FOR_IN
24472: IFFALSE 24488
// begin SetLives ( i , 0 ) ;
24474: LD_VAR 0 1
24478: PPUSH
24479: LD_INT 0
24481: PPUSH
24482: CALL_OW 234
// end ;
24486: GO 24471
24488: POP
24489: POP
// end ;
24490: PPOPN 2
24492: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24493: LD_EXP 53
24497: PUSH
24498: LD_EXP 63
24502: AND
24503: IFFALSE 24523
24505: GO 24507
24507: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24508: LD_INT 32
24510: PPUSH
24511: LD_OWVAR 2
24515: PPUSH
24516: LD_INT 0
24518: PPUSH
24519: CALL_OW 324
24523: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24524: LD_EXP 53
24528: PUSH
24529: LD_EXP 64
24533: AND
24534: IFFALSE 24715
24536: GO 24538
24538: DISABLE
24539: LD_INT 0
24541: PPUSH
24542: PPUSH
24543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24544: LD_ADDR_VAR 0 2
24548: PUSH
24549: LD_INT 22
24551: PUSH
24552: LD_OWVAR 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 33
24563: PUSH
24564: LD_INT 3
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PPUSH
24575: CALL_OW 69
24579: ST_TO_ADDR
// if not tmp then
24580: LD_VAR 0 2
24584: NOT
24585: IFFALSE 24589
// exit ;
24587: GO 24715
// side := 0 ;
24589: LD_ADDR_VAR 0 3
24593: PUSH
24594: LD_INT 0
24596: ST_TO_ADDR
// for i := 1 to 8 do
24597: LD_ADDR_VAR 0 1
24601: PUSH
24602: DOUBLE
24603: LD_INT 1
24605: DEC
24606: ST_TO_ADDR
24607: LD_INT 8
24609: PUSH
24610: FOR_TO
24611: IFFALSE 24659
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24613: LD_OWVAR 2
24617: PUSH
24618: LD_VAR 0 1
24622: NONEQUAL
24623: PUSH
24624: LD_OWVAR 2
24628: PPUSH
24629: LD_VAR 0 1
24633: PPUSH
24634: CALL_OW 81
24638: PUSH
24639: LD_INT 2
24641: EQUAL
24642: AND
24643: IFFALSE 24657
// begin side := i ;
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_VAR 0 1
24654: ST_TO_ADDR
// break ;
24655: GO 24659
// end ;
24657: GO 24610
24659: POP
24660: POP
// if not side then
24661: LD_VAR 0 3
24665: NOT
24666: IFFALSE 24670
// exit ;
24668: GO 24715
// for i := 1 to tmp do
24670: LD_ADDR_VAR 0 1
24674: PUSH
24675: DOUBLE
24676: LD_INT 1
24678: DEC
24679: ST_TO_ADDR
24680: LD_VAR 0 2
24684: PUSH
24685: FOR_TO
24686: IFFALSE 24713
// if Prob ( 60 ) then
24688: LD_INT 60
24690: PPUSH
24691: CALL_OW 13
24695: IFFALSE 24711
// SetSide ( i , side ) ;
24697: LD_VAR 0 1
24701: PPUSH
24702: LD_VAR 0 3
24706: PPUSH
24707: CALL_OW 235
24711: GO 24685
24713: POP
24714: POP
// end ;
24715: PPOPN 3
24717: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24718: LD_EXP 53
24722: PUSH
24723: LD_EXP 66
24727: AND
24728: IFFALSE 24847
24730: GO 24732
24732: DISABLE
24733: LD_INT 0
24735: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24736: LD_ADDR_VAR 0 1
24740: PUSH
24741: LD_INT 22
24743: PUSH
24744: LD_OWVAR 2
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 21
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 3
24765: PUSH
24766: LD_INT 23
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: PPUSH
24785: CALL_OW 69
24789: PUSH
24790: FOR_IN
24791: IFFALSE 24845
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24793: LD_VAR 0 1
24797: PPUSH
24798: CALL_OW 257
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: LD_INT 2
24808: PUSH
24809: LD_INT 3
24811: PUSH
24812: LD_INT 4
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: IN
24821: IFFALSE 24843
// SetClass ( un , rand ( 1 , 4 ) ) ;
24823: LD_VAR 0 1
24827: PPUSH
24828: LD_INT 1
24830: PPUSH
24831: LD_INT 4
24833: PPUSH
24834: CALL_OW 12
24838: PPUSH
24839: CALL_OW 336
24843: GO 24790
24845: POP
24846: POP
// end ;
24847: PPOPN 1
24849: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24850: LD_EXP 53
24854: PUSH
24855: LD_EXP 65
24859: AND
24860: IFFALSE 24939
24862: GO 24864
24864: DISABLE
24865: LD_INT 0
24867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24868: LD_ADDR_VAR 0 1
24872: PUSH
24873: LD_INT 22
24875: PUSH
24876: LD_OWVAR 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 21
24887: PUSH
24888: LD_INT 3
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PPUSH
24899: CALL_OW 69
24903: ST_TO_ADDR
// if not tmp then
24904: LD_VAR 0 1
24908: NOT
24909: IFFALSE 24913
// exit ;
24911: GO 24939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24913: LD_VAR 0 1
24917: PUSH
24918: LD_INT 1
24920: PPUSH
24921: LD_VAR 0 1
24925: PPUSH
24926: CALL_OW 12
24930: ARRAY
24931: PPUSH
24932: LD_INT 100
24934: PPUSH
24935: CALL_OW 234
// end ;
24939: PPOPN 1
24941: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24942: LD_EXP 53
24946: PUSH
24947: LD_EXP 67
24951: AND
24952: IFFALSE 25050
24954: GO 24956
24956: DISABLE
24957: LD_INT 0
24959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24960: LD_ADDR_VAR 0 1
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_OWVAR 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 21
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: ST_TO_ADDR
// if not tmp then
24996: LD_VAR 0 1
25000: NOT
25001: IFFALSE 25005
// exit ;
25003: GO 25050
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25005: LD_VAR 0 1
25009: PUSH
25010: LD_INT 1
25012: PPUSH
25013: LD_VAR 0 1
25017: PPUSH
25018: CALL_OW 12
25022: ARRAY
25023: PPUSH
25024: LD_INT 1
25026: PPUSH
25027: LD_INT 4
25029: PPUSH
25030: CALL_OW 12
25034: PPUSH
25035: LD_INT 3000
25037: PPUSH
25038: LD_INT 9000
25040: PPUSH
25041: CALL_OW 12
25045: PPUSH
25046: CALL_OW 492
// end ;
25050: PPOPN 1
25052: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25053: LD_EXP 53
25057: PUSH
25058: LD_EXP 68
25062: AND
25063: IFFALSE 25083
25065: GO 25067
25067: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25068: LD_INT 1
25070: PPUSH
25071: LD_OWVAR 2
25075: PPUSH
25076: LD_INT 0
25078: PPUSH
25079: CALL_OW 324
25083: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25084: LD_EXP 53
25088: PUSH
25089: LD_EXP 69
25093: AND
25094: IFFALSE 25177
25096: GO 25098
25098: DISABLE
25099: LD_INT 0
25101: PPUSH
25102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25103: LD_ADDR_VAR 0 2
25107: PUSH
25108: LD_INT 22
25110: PUSH
25111: LD_OWVAR 2
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 21
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PPUSH
25134: CALL_OW 69
25138: ST_TO_ADDR
// if not tmp then
25139: LD_VAR 0 2
25143: NOT
25144: IFFALSE 25148
// exit ;
25146: GO 25177
// for i in tmp do
25148: LD_ADDR_VAR 0 1
25152: PUSH
25153: LD_VAR 0 2
25157: PUSH
25158: FOR_IN
25159: IFFALSE 25175
// SetBLevel ( i , 10 ) ;
25161: LD_VAR 0 1
25165: PPUSH
25166: LD_INT 10
25168: PPUSH
25169: CALL_OW 241
25173: GO 25158
25175: POP
25176: POP
// end ;
25177: PPOPN 2
25179: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25180: LD_EXP 53
25184: PUSH
25185: LD_EXP 70
25189: AND
25190: IFFALSE 25301
25192: GO 25194
25194: DISABLE
25195: LD_INT 0
25197: PPUSH
25198: PPUSH
25199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25200: LD_ADDR_VAR 0 3
25204: PUSH
25205: LD_INT 22
25207: PUSH
25208: LD_OWVAR 2
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 25
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: ST_TO_ADDR
// if not tmp then
25236: LD_VAR 0 3
25240: NOT
25241: IFFALSE 25245
// exit ;
25243: GO 25301
// un := tmp [ rand ( 1 , tmp ) ] ;
25245: LD_ADDR_VAR 0 2
25249: PUSH
25250: LD_VAR 0 3
25254: PUSH
25255: LD_INT 1
25257: PPUSH
25258: LD_VAR 0 3
25262: PPUSH
25263: CALL_OW 12
25267: ARRAY
25268: ST_TO_ADDR
// if Crawls ( un ) then
25269: LD_VAR 0 2
25273: PPUSH
25274: CALL_OW 318
25278: IFFALSE 25289
// ComWalk ( un ) ;
25280: LD_VAR 0 2
25284: PPUSH
25285: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25289: LD_VAR 0 2
25293: PPUSH
25294: LD_INT 5
25296: PPUSH
25297: CALL_OW 336
// end ;
25301: PPOPN 3
25303: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25304: LD_EXP 53
25308: PUSH
25309: LD_EXP 71
25313: AND
25314: PUSH
25315: LD_OWVAR 67
25319: PUSH
25320: LD_INT 4
25322: LESS
25323: AND
25324: IFFALSE 25343
25326: GO 25328
25328: DISABLE
// begin Difficulty := Difficulty + 1 ;
25329: LD_ADDR_OWVAR 67
25333: PUSH
25334: LD_OWVAR 67
25338: PUSH
25339: LD_INT 1
25341: PLUS
25342: ST_TO_ADDR
// end ;
25343: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25344: LD_EXP 53
25348: PUSH
25349: LD_EXP 72
25353: AND
25354: IFFALSE 25457
25356: GO 25358
25358: DISABLE
25359: LD_INT 0
25361: PPUSH
// begin for i := 1 to 5 do
25362: LD_ADDR_VAR 0 1
25366: PUSH
25367: DOUBLE
25368: LD_INT 1
25370: DEC
25371: ST_TO_ADDR
25372: LD_INT 5
25374: PUSH
25375: FOR_TO
25376: IFFALSE 25455
// begin uc_nation := nation_nature ;
25378: LD_ADDR_OWVAR 21
25382: PUSH
25383: LD_INT 0
25385: ST_TO_ADDR
// uc_side := 0 ;
25386: LD_ADDR_OWVAR 20
25390: PUSH
25391: LD_INT 0
25393: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25394: LD_ADDR_OWVAR 29
25398: PUSH
25399: LD_INT 12
25401: PUSH
25402: LD_INT 12
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: ST_TO_ADDR
// hc_agressivity := 20 ;
25409: LD_ADDR_OWVAR 35
25413: PUSH
25414: LD_INT 20
25416: ST_TO_ADDR
// hc_class := class_tiger ;
25417: LD_ADDR_OWVAR 28
25421: PUSH
25422: LD_INT 14
25424: ST_TO_ADDR
// hc_gallery :=  ;
25425: LD_ADDR_OWVAR 33
25429: PUSH
25430: LD_STRING 
25432: ST_TO_ADDR
// hc_name :=  ;
25433: LD_ADDR_OWVAR 26
25437: PUSH
25438: LD_STRING 
25440: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25441: CALL_OW 44
25445: PPUSH
25446: LD_INT 0
25448: PPUSH
25449: CALL_OW 51
// end ;
25453: GO 25375
25455: POP
25456: POP
// end ;
25457: PPOPN 1
25459: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25460: LD_EXP 53
25464: PUSH
25465: LD_EXP 73
25469: AND
25470: IFFALSE 25479
25472: GO 25474
25474: DISABLE
// StreamSibBomb ;
25475: CALL 25480 0 0
25479: END
// export function StreamSibBomb ; var i , x , y ; begin
25480: LD_INT 0
25482: PPUSH
25483: PPUSH
25484: PPUSH
25485: PPUSH
// result := false ;
25486: LD_ADDR_VAR 0 1
25490: PUSH
25491: LD_INT 0
25493: ST_TO_ADDR
// for i := 1 to 16 do
25494: LD_ADDR_VAR 0 2
25498: PUSH
25499: DOUBLE
25500: LD_INT 1
25502: DEC
25503: ST_TO_ADDR
25504: LD_INT 16
25506: PUSH
25507: FOR_TO
25508: IFFALSE 25707
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25510: LD_ADDR_VAR 0 3
25514: PUSH
25515: LD_INT 10
25517: PUSH
25518: LD_INT 20
25520: PUSH
25521: LD_INT 30
25523: PUSH
25524: LD_INT 40
25526: PUSH
25527: LD_INT 50
25529: PUSH
25530: LD_INT 60
25532: PUSH
25533: LD_INT 70
25535: PUSH
25536: LD_INT 80
25538: PUSH
25539: LD_INT 90
25541: PUSH
25542: LD_INT 100
25544: PUSH
25545: LD_INT 110
25547: PUSH
25548: LD_INT 120
25550: PUSH
25551: LD_INT 130
25553: PUSH
25554: LD_INT 140
25556: PUSH
25557: LD_INT 150
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: PPUSH
25580: LD_INT 15
25582: PPUSH
25583: CALL_OW 12
25587: ARRAY
25588: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25589: LD_ADDR_VAR 0 4
25593: PUSH
25594: LD_INT 10
25596: PUSH
25597: LD_INT 20
25599: PUSH
25600: LD_INT 30
25602: PUSH
25603: LD_INT 40
25605: PUSH
25606: LD_INT 50
25608: PUSH
25609: LD_INT 60
25611: PUSH
25612: LD_INT 70
25614: PUSH
25615: LD_INT 80
25617: PUSH
25618: LD_INT 90
25620: PUSH
25621: LD_INT 100
25623: PUSH
25624: LD_INT 110
25626: PUSH
25627: LD_INT 120
25629: PUSH
25630: LD_INT 130
25632: PUSH
25633: LD_INT 140
25635: PUSH
25636: LD_INT 150
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: PPUSH
25659: LD_INT 15
25661: PPUSH
25662: CALL_OW 12
25666: ARRAY
25667: ST_TO_ADDR
// if ValidHex ( x , y ) then
25668: LD_VAR 0 3
25672: PPUSH
25673: LD_VAR 0 4
25677: PPUSH
25678: CALL_OW 488
25682: IFFALSE 25705
// begin result := [ x , y ] ;
25684: LD_ADDR_VAR 0 1
25688: PUSH
25689: LD_VAR 0 3
25693: PUSH
25694: LD_VAR 0 4
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: ST_TO_ADDR
// break ;
25703: GO 25707
// end ; end ;
25705: GO 25507
25707: POP
25708: POP
// if result then
25709: LD_VAR 0 1
25713: IFFALSE 25773
// begin ToLua ( playSibBomb() ) ;
25715: LD_STRING playSibBomb()
25717: PPUSH
25718: CALL_OW 559
// wait ( 0 0$14 ) ;
25722: LD_INT 490
25724: PPUSH
25725: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25729: LD_VAR 0 1
25733: PUSH
25734: LD_INT 1
25736: ARRAY
25737: PPUSH
25738: LD_VAR 0 1
25742: PUSH
25743: LD_INT 2
25745: ARRAY
25746: PPUSH
25747: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25751: LD_VAR 0 1
25755: PUSH
25756: LD_INT 1
25758: ARRAY
25759: PPUSH
25760: LD_VAR 0 1
25764: PUSH
25765: LD_INT 2
25767: ARRAY
25768: PPUSH
25769: CALL_OW 429
// end ; end ;
25773: LD_VAR 0 1
25777: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25778: LD_EXP 53
25782: PUSH
25783: LD_EXP 75
25787: AND
25788: IFFALSE 25800
25790: GO 25792
25792: DISABLE
// YouLost (  ) ;
25793: LD_STRING 
25795: PPUSH
25796: CALL_OW 104
25800: END
// every 0 0$1 trigger StreamModeActive and sFog do
25801: LD_EXP 53
25805: PUSH
25806: LD_EXP 74
25810: AND
25811: IFFALSE 25825
25813: GO 25815
25815: DISABLE
// FogOff ( your_side ) ;
25816: LD_OWVAR 2
25820: PPUSH
25821: CALL_OW 344
25825: END
// every 0 0$1 trigger StreamModeActive and sSun do
25826: LD_EXP 53
25830: PUSH
25831: LD_EXP 76
25835: AND
25836: IFFALSE 25864
25838: GO 25840
25840: DISABLE
// begin solar_recharge_percent := 0 ;
25841: LD_ADDR_OWVAR 79
25845: PUSH
25846: LD_INT 0
25848: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25849: LD_INT 10500
25851: PPUSH
25852: CALL_OW 67
// solar_recharge_percent := 100 ;
25856: LD_ADDR_OWVAR 79
25860: PUSH
25861: LD_INT 100
25863: ST_TO_ADDR
// end ;
25864: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25865: LD_EXP 53
25869: PUSH
25870: LD_EXP 77
25874: AND
25875: IFFALSE 26114
25877: GO 25879
25879: DISABLE
25880: LD_INT 0
25882: PPUSH
25883: PPUSH
25884: PPUSH
// begin tmp := [ ] ;
25885: LD_ADDR_VAR 0 3
25889: PUSH
25890: EMPTY
25891: ST_TO_ADDR
// for i := 1 to 6 do
25892: LD_ADDR_VAR 0 1
25896: PUSH
25897: DOUBLE
25898: LD_INT 1
25900: DEC
25901: ST_TO_ADDR
25902: LD_INT 6
25904: PUSH
25905: FOR_TO
25906: IFFALSE 26011
// begin uc_nation := nation_nature ;
25908: LD_ADDR_OWVAR 21
25912: PUSH
25913: LD_INT 0
25915: ST_TO_ADDR
// uc_side := 0 ;
25916: LD_ADDR_OWVAR 20
25920: PUSH
25921: LD_INT 0
25923: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25924: LD_ADDR_OWVAR 29
25928: PUSH
25929: LD_INT 12
25931: PUSH
25932: LD_INT 12
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: ST_TO_ADDR
// hc_agressivity := 20 ;
25939: LD_ADDR_OWVAR 35
25943: PUSH
25944: LD_INT 20
25946: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25947: LD_ADDR_OWVAR 28
25951: PUSH
25952: LD_INT 17
25954: ST_TO_ADDR
// hc_gallery :=  ;
25955: LD_ADDR_OWVAR 33
25959: PUSH
25960: LD_STRING 
25962: ST_TO_ADDR
// hc_name :=  ;
25963: LD_ADDR_OWVAR 26
25967: PUSH
25968: LD_STRING 
25970: ST_TO_ADDR
// un := CreateHuman ;
25971: LD_ADDR_VAR 0 2
25975: PUSH
25976: CALL_OW 44
25980: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25981: LD_VAR 0 2
25985: PPUSH
25986: LD_INT 1
25988: PPUSH
25989: CALL_OW 51
// tmp := tmp ^ un ;
25993: LD_ADDR_VAR 0 3
25997: PUSH
25998: LD_VAR 0 3
26002: PUSH
26003: LD_VAR 0 2
26007: ADD
26008: ST_TO_ADDR
// end ;
26009: GO 25905
26011: POP
26012: POP
// repeat wait ( 0 0$1 ) ;
26013: LD_INT 35
26015: PPUSH
26016: CALL_OW 67
// for un in tmp do
26020: LD_ADDR_VAR 0 2
26024: PUSH
26025: LD_VAR 0 3
26029: PUSH
26030: FOR_IN
26031: IFFALSE 26105
// begin if IsDead ( un ) then
26033: LD_VAR 0 2
26037: PPUSH
26038: CALL_OW 301
26042: IFFALSE 26062
// begin tmp := tmp diff un ;
26044: LD_ADDR_VAR 0 3
26048: PUSH
26049: LD_VAR 0 3
26053: PUSH
26054: LD_VAR 0 2
26058: DIFF
26059: ST_TO_ADDR
// continue ;
26060: GO 26030
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26062: LD_VAR 0 2
26066: PPUSH
26067: LD_INT 3
26069: PUSH
26070: LD_INT 22
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 69
26088: PPUSH
26089: LD_VAR 0 2
26093: PPUSH
26094: CALL_OW 74
26098: PPUSH
26099: CALL_OW 115
// end ;
26103: GO 26030
26105: POP
26106: POP
// until not tmp ;
26107: LD_VAR 0 3
26111: NOT
26112: IFFALSE 26013
// end ;
26114: PPOPN 3
26116: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26117: LD_EXP 53
26121: PUSH
26122: LD_EXP 78
26126: AND
26127: IFFALSE 26181
26129: GO 26131
26131: DISABLE
// begin ToLua ( displayTroll(); ) ;
26132: LD_STRING displayTroll();
26134: PPUSH
26135: CALL_OW 559
// wait ( 3 3$00 ) ;
26139: LD_INT 6300
26141: PPUSH
26142: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26146: LD_STRING hideTroll();
26148: PPUSH
26149: CALL_OW 559
// wait ( 1 1$00 ) ;
26153: LD_INT 2100
26155: PPUSH
26156: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26160: LD_STRING displayTroll();
26162: PPUSH
26163: CALL_OW 559
// wait ( 1 1$00 ) ;
26167: LD_INT 2100
26169: PPUSH
26170: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26174: LD_STRING hideTroll();
26176: PPUSH
26177: CALL_OW 559
// end ;
26181: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26182: LD_EXP 53
26186: PUSH
26187: LD_EXP 79
26191: AND
26192: IFFALSE 26255
26194: GO 26196
26196: DISABLE
26197: LD_INT 0
26199: PPUSH
// begin p := 0 ;
26200: LD_ADDR_VAR 0 1
26204: PUSH
26205: LD_INT 0
26207: ST_TO_ADDR
// repeat game_speed := 1 ;
26208: LD_ADDR_OWVAR 65
26212: PUSH
26213: LD_INT 1
26215: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26216: LD_INT 35
26218: PPUSH
26219: CALL_OW 67
// p := p + 1 ;
26223: LD_ADDR_VAR 0 1
26227: PUSH
26228: LD_VAR 0 1
26232: PUSH
26233: LD_INT 1
26235: PLUS
26236: ST_TO_ADDR
// until p >= 60 ;
26237: LD_VAR 0 1
26241: PUSH
26242: LD_INT 60
26244: GREATEREQUAL
26245: IFFALSE 26208
// game_speed := 4 ;
26247: LD_ADDR_OWVAR 65
26251: PUSH
26252: LD_INT 4
26254: ST_TO_ADDR
// end ;
26255: PPOPN 1
26257: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26258: LD_EXP 53
26262: PUSH
26263: LD_EXP 80
26267: AND
26268: IFFALSE 26414
26270: GO 26272
26272: DISABLE
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26277: LD_ADDR_VAR 0 1
26281: PUSH
26282: LD_INT 22
26284: PUSH
26285: LD_OWVAR 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: PUSH
26297: LD_INT 30
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 30
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PPUSH
26326: CALL_OW 69
26330: ST_TO_ADDR
// if not depot then
26331: LD_VAR 0 1
26335: NOT
26336: IFFALSE 26340
// exit ;
26338: GO 26414
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26340: LD_ADDR_VAR 0 2
26344: PUSH
26345: LD_VAR 0 1
26349: PUSH
26350: LD_INT 1
26352: PPUSH
26353: LD_VAR 0 1
26357: PPUSH
26358: CALL_OW 12
26362: ARRAY
26363: PPUSH
26364: CALL_OW 274
26368: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26369: LD_VAR 0 2
26373: PPUSH
26374: LD_INT 1
26376: PPUSH
26377: LD_INT 0
26379: PPUSH
26380: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26384: LD_VAR 0 2
26388: PPUSH
26389: LD_INT 2
26391: PPUSH
26392: LD_INT 0
26394: PPUSH
26395: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26399: LD_VAR 0 2
26403: PPUSH
26404: LD_INT 3
26406: PPUSH
26407: LD_INT 0
26409: PPUSH
26410: CALL_OW 277
// end ;
26414: PPOPN 2
26416: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26417: LD_EXP 53
26421: PUSH
26422: LD_EXP 81
26426: AND
26427: IFFALSE 26524
26429: GO 26431
26431: DISABLE
26432: LD_INT 0
26434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26435: LD_ADDR_VAR 0 1
26439: PUSH
26440: LD_INT 22
26442: PUSH
26443: LD_OWVAR 2
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 21
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 3
26464: PUSH
26465: LD_INT 23
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: LIST
26483: PPUSH
26484: CALL_OW 69
26488: ST_TO_ADDR
// if not tmp then
26489: LD_VAR 0 1
26493: NOT
26494: IFFALSE 26498
// exit ;
26496: GO 26524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26498: LD_VAR 0 1
26502: PUSH
26503: LD_INT 1
26505: PPUSH
26506: LD_VAR 0 1
26510: PPUSH
26511: CALL_OW 12
26515: ARRAY
26516: PPUSH
26517: LD_INT 200
26519: PPUSH
26520: CALL_OW 234
// end ;
26524: PPOPN 1
26526: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26527: LD_EXP 53
26531: PUSH
26532: LD_EXP 82
26536: AND
26537: IFFALSE 26616
26539: GO 26541
26541: DISABLE
26542: LD_INT 0
26544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26545: LD_ADDR_VAR 0 1
26549: PUSH
26550: LD_INT 22
26552: PUSH
26553: LD_OWVAR 2
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 21
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PPUSH
26576: CALL_OW 69
26580: ST_TO_ADDR
// if not tmp then
26581: LD_VAR 0 1
26585: NOT
26586: IFFALSE 26590
// exit ;
26588: GO 26616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26590: LD_VAR 0 1
26594: PUSH
26595: LD_INT 1
26597: PPUSH
26598: LD_VAR 0 1
26602: PPUSH
26603: CALL_OW 12
26607: ARRAY
26608: PPUSH
26609: LD_INT 60
26611: PPUSH
26612: CALL_OW 234
// end ;
26616: PPOPN 1
26618: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26619: LD_EXP 53
26623: PUSH
26624: LD_EXP 83
26628: AND
26629: IFFALSE 26728
26631: GO 26633
26633: DISABLE
26634: LD_INT 0
26636: PPUSH
26637: PPUSH
// begin enable ;
26638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26639: LD_ADDR_VAR 0 1
26643: PUSH
26644: LD_INT 22
26646: PUSH
26647: LD_OWVAR 2
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 61
26658: PUSH
26659: EMPTY
26660: LIST
26661: PUSH
26662: LD_INT 33
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: LIST
26676: PPUSH
26677: CALL_OW 69
26681: ST_TO_ADDR
// if not tmp then
26682: LD_VAR 0 1
26686: NOT
26687: IFFALSE 26691
// exit ;
26689: GO 26728
// for i in tmp do
26691: LD_ADDR_VAR 0 2
26695: PUSH
26696: LD_VAR 0 1
26700: PUSH
26701: FOR_IN
26702: IFFALSE 26726
// if IsControledBy ( i ) then
26704: LD_VAR 0 2
26708: PPUSH
26709: CALL_OW 312
26713: IFFALSE 26724
// ComUnlink ( i ) ;
26715: LD_VAR 0 2
26719: PPUSH
26720: CALL_OW 136
26724: GO 26701
26726: POP
26727: POP
// end ;
26728: PPOPN 2
26730: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26731: LD_EXP 53
26735: PUSH
26736: LD_EXP 84
26740: AND
26741: IFFALSE 26881
26743: GO 26745
26745: DISABLE
26746: LD_INT 0
26748: PPUSH
26749: PPUSH
// begin ToLua ( displayPowell(); ) ;
26750: LD_STRING displayPowell();
26752: PPUSH
26753: CALL_OW 559
// uc_side := 0 ;
26757: LD_ADDR_OWVAR 20
26761: PUSH
26762: LD_INT 0
26764: ST_TO_ADDR
// uc_nation := 2 ;
26765: LD_ADDR_OWVAR 21
26769: PUSH
26770: LD_INT 2
26772: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26773: LD_ADDR_OWVAR 37
26777: PUSH
26778: LD_INT 14
26780: ST_TO_ADDR
// vc_engine := engine_siberite ;
26781: LD_ADDR_OWVAR 39
26785: PUSH
26786: LD_INT 3
26788: ST_TO_ADDR
// vc_control := control_apeman ;
26789: LD_ADDR_OWVAR 38
26793: PUSH
26794: LD_INT 5
26796: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26797: LD_ADDR_OWVAR 40
26801: PUSH
26802: LD_INT 29
26804: ST_TO_ADDR
// un := CreateVehicle ;
26805: LD_ADDR_VAR 0 2
26809: PUSH
26810: CALL_OW 45
26814: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26815: LD_VAR 0 2
26819: PPUSH
26820: LD_INT 1
26822: PPUSH
26823: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26827: LD_INT 35
26829: PPUSH
26830: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26834: LD_VAR 0 2
26838: PPUSH
26839: LD_INT 22
26841: PUSH
26842: LD_OWVAR 2
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PPUSH
26851: CALL_OW 69
26855: PPUSH
26856: LD_VAR 0 2
26860: PPUSH
26861: CALL_OW 74
26865: PPUSH
26866: CALL_OW 115
// until IsDead ( un ) ;
26870: LD_VAR 0 2
26874: PPUSH
26875: CALL_OW 301
26879: IFFALSE 26827
// end ;
26881: PPOPN 2
26883: END
// every 0 0$1 trigger StreamModeActive and sStu do
26884: LD_EXP 53
26888: PUSH
26889: LD_EXP 92
26893: AND
26894: IFFALSE 26910
26896: GO 26898
26898: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26899: LD_STRING displayStucuk();
26901: PPUSH
26902: CALL_OW 559
// ResetFog ;
26906: CALL_OW 335
// end ;
26910: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26911: LD_EXP 53
26915: PUSH
26916: LD_EXP 85
26920: AND
26921: IFFALSE 27062
26923: GO 26925
26925: DISABLE
26926: LD_INT 0
26928: PPUSH
26929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26930: LD_ADDR_VAR 0 2
26934: PUSH
26935: LD_INT 22
26937: PUSH
26938: LD_OWVAR 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 21
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PPUSH
26961: CALL_OW 69
26965: ST_TO_ADDR
// if not tmp then
26966: LD_VAR 0 2
26970: NOT
26971: IFFALSE 26975
// exit ;
26973: GO 27062
// un := tmp [ rand ( 1 , tmp ) ] ;
26975: LD_ADDR_VAR 0 1
26979: PUSH
26980: LD_VAR 0 2
26984: PUSH
26985: LD_INT 1
26987: PPUSH
26988: LD_VAR 0 2
26992: PPUSH
26993: CALL_OW 12
26997: ARRAY
26998: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26999: LD_VAR 0 1
27003: PPUSH
27004: LD_INT 0
27006: PPUSH
27007: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27011: LD_VAR 0 1
27015: PPUSH
27016: LD_OWVAR 3
27020: PUSH
27021: LD_VAR 0 1
27025: DIFF
27026: PPUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 74
27036: PPUSH
27037: CALL_OW 115
// wait ( 0 0$20 ) ;
27041: LD_INT 700
27043: PPUSH
27044: CALL_OW 67
// SetSide ( un , your_side ) ;
27048: LD_VAR 0 1
27052: PPUSH
27053: LD_OWVAR 2
27057: PPUSH
27058: CALL_OW 235
// end ;
27062: PPOPN 2
27064: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27065: LD_EXP 53
27069: PUSH
27070: LD_EXP 86
27074: AND
27075: IFFALSE 27181
27077: GO 27079
27079: DISABLE
27080: LD_INT 0
27082: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27083: LD_ADDR_VAR 0 1
27087: PUSH
27088: LD_INT 22
27090: PUSH
27091: LD_OWVAR 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: LD_INT 30
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 30
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: LIST
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PPUSH
27132: CALL_OW 69
27136: ST_TO_ADDR
// if not depot then
27137: LD_VAR 0 1
27141: NOT
27142: IFFALSE 27146
// exit ;
27144: GO 27181
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27146: LD_VAR 0 1
27150: PUSH
27151: LD_INT 1
27153: ARRAY
27154: PPUSH
27155: CALL_OW 250
27159: PPUSH
27160: LD_VAR 0 1
27164: PUSH
27165: LD_INT 1
27167: ARRAY
27168: PPUSH
27169: CALL_OW 251
27173: PPUSH
27174: LD_INT 70
27176: PPUSH
27177: CALL_OW 495
// end ;
27181: PPOPN 1
27183: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27184: LD_EXP 53
27188: PUSH
27189: LD_EXP 87
27193: AND
27194: IFFALSE 27405
27196: GO 27198
27198: DISABLE
27199: LD_INT 0
27201: PPUSH
27202: PPUSH
27203: PPUSH
27204: PPUSH
27205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27206: LD_ADDR_VAR 0 5
27210: PUSH
27211: LD_INT 22
27213: PUSH
27214: LD_OWVAR 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 21
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PPUSH
27237: CALL_OW 69
27241: ST_TO_ADDR
// if not tmp then
27242: LD_VAR 0 5
27246: NOT
27247: IFFALSE 27251
// exit ;
27249: GO 27405
// for i in tmp do
27251: LD_ADDR_VAR 0 1
27255: PUSH
27256: LD_VAR 0 5
27260: PUSH
27261: FOR_IN
27262: IFFALSE 27403
// begin d := rand ( 0 , 5 ) ;
27264: LD_ADDR_VAR 0 4
27268: PUSH
27269: LD_INT 0
27271: PPUSH
27272: LD_INT 5
27274: PPUSH
27275: CALL_OW 12
27279: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27280: LD_ADDR_VAR 0 2
27284: PUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 250
27294: PPUSH
27295: LD_VAR 0 4
27299: PPUSH
27300: LD_INT 3
27302: PPUSH
27303: LD_INT 12
27305: PPUSH
27306: CALL_OW 12
27310: PPUSH
27311: CALL_OW 272
27315: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27316: LD_ADDR_VAR 0 3
27320: PUSH
27321: LD_VAR 0 1
27325: PPUSH
27326: CALL_OW 251
27330: PPUSH
27331: LD_VAR 0 4
27335: PPUSH
27336: LD_INT 3
27338: PPUSH
27339: LD_INT 12
27341: PPUSH
27342: CALL_OW 12
27346: PPUSH
27347: CALL_OW 273
27351: ST_TO_ADDR
// if ValidHex ( x , y ) then
27352: LD_VAR 0 2
27356: PPUSH
27357: LD_VAR 0 3
27361: PPUSH
27362: CALL_OW 488
27366: IFFALSE 27401
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27368: LD_VAR 0 1
27372: PPUSH
27373: LD_VAR 0 2
27377: PPUSH
27378: LD_VAR 0 3
27382: PPUSH
27383: LD_INT 3
27385: PPUSH
27386: LD_INT 6
27388: PPUSH
27389: CALL_OW 12
27393: PPUSH
27394: LD_INT 1
27396: PPUSH
27397: CALL_OW 483
// end ;
27401: GO 27261
27403: POP
27404: POP
// end ;
27405: PPOPN 5
27407: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27408: LD_EXP 53
27412: PUSH
27413: LD_EXP 88
27417: AND
27418: IFFALSE 27512
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_INT 22
27434: PUSH
27435: LD_OWVAR 2
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 32
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 21
27456: PUSH
27457: LD_INT 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: PPUSH
27469: CALL_OW 69
27473: ST_TO_ADDR
// if not tmp then
27474: LD_VAR 0 2
27478: NOT
27479: IFFALSE 27483
// exit ;
27481: GO 27512
// for i in tmp do
27483: LD_ADDR_VAR 0 1
27487: PUSH
27488: LD_VAR 0 2
27492: PUSH
27493: FOR_IN
27494: IFFALSE 27510
// SetFuel ( i , 0 ) ;
27496: LD_VAR 0 1
27500: PPUSH
27501: LD_INT 0
27503: PPUSH
27504: CALL_OW 240
27508: GO 27493
27510: POP
27511: POP
// end ;
27512: PPOPN 2
27514: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27515: LD_EXP 53
27519: PUSH
27520: LD_EXP 89
27524: AND
27525: IFFALSE 27591
27527: GO 27529
27529: DISABLE
27530: LD_INT 0
27532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27533: LD_ADDR_VAR 0 1
27537: PUSH
27538: LD_INT 22
27540: PUSH
27541: LD_OWVAR 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 30
27552: PUSH
27553: LD_INT 29
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PPUSH
27564: CALL_OW 69
27568: ST_TO_ADDR
// if not tmp then
27569: LD_VAR 0 1
27573: NOT
27574: IFFALSE 27578
// exit ;
27576: GO 27591
// DestroyUnit ( tmp [ 1 ] ) ;
27578: LD_VAR 0 1
27582: PUSH
27583: LD_INT 1
27585: ARRAY
27586: PPUSH
27587: CALL_OW 65
// end ;
27591: PPOPN 1
27593: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27594: LD_EXP 53
27598: PUSH
27599: LD_EXP 91
27603: AND
27604: IFFALSE 27733
27606: GO 27608
27608: DISABLE
27609: LD_INT 0
27611: PPUSH
// begin uc_side := 0 ;
27612: LD_ADDR_OWVAR 20
27616: PUSH
27617: LD_INT 0
27619: ST_TO_ADDR
// uc_nation := nation_arabian ;
27620: LD_ADDR_OWVAR 21
27624: PUSH
27625: LD_INT 2
27627: ST_TO_ADDR
// hc_gallery :=  ;
27628: LD_ADDR_OWVAR 33
27632: PUSH
27633: LD_STRING 
27635: ST_TO_ADDR
// hc_name :=  ;
27636: LD_ADDR_OWVAR 26
27640: PUSH
27641: LD_STRING 
27643: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27644: LD_INT 1
27646: PPUSH
27647: LD_INT 11
27649: PPUSH
27650: LD_INT 10
27652: PPUSH
27653: CALL_OW 380
// un := CreateHuman ;
27657: LD_ADDR_VAR 0 1
27661: PUSH
27662: CALL_OW 44
27666: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27667: LD_VAR 0 1
27671: PPUSH
27672: LD_INT 1
27674: PPUSH
27675: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27679: LD_INT 35
27681: PPUSH
27682: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27686: LD_VAR 0 1
27690: PPUSH
27691: LD_INT 22
27693: PUSH
27694: LD_OWVAR 2
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PPUSH
27703: CALL_OW 69
27707: PPUSH
27708: LD_VAR 0 1
27712: PPUSH
27713: CALL_OW 74
27717: PPUSH
27718: CALL_OW 115
// until IsDead ( un ) ;
27722: LD_VAR 0 1
27726: PPUSH
27727: CALL_OW 301
27731: IFFALSE 27679
// end ;
27733: PPOPN 1
27735: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27736: LD_EXP 53
27740: PUSH
27741: LD_EXP 93
27745: AND
27746: IFFALSE 27758
27748: GO 27750
27750: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27751: LD_STRING earthquake(getX(game), 0, 32)
27753: PPUSH
27754: CALL_OW 559
27758: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27759: LD_EXP 53
27763: PUSH
27764: LD_EXP 94
27768: AND
27769: IFFALSE 27860
27771: GO 27773
27773: DISABLE
27774: LD_INT 0
27776: PPUSH
// begin enable ;
27777: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27778: LD_ADDR_VAR 0 1
27782: PUSH
27783: LD_INT 22
27785: PUSH
27786: LD_OWVAR 2
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 21
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 33
27807: PUSH
27808: LD_INT 3
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: PPUSH
27820: CALL_OW 69
27824: ST_TO_ADDR
// if not tmp then
27825: LD_VAR 0 1
27829: NOT
27830: IFFALSE 27834
// exit ;
27832: GO 27860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27834: LD_VAR 0 1
27838: PUSH
27839: LD_INT 1
27841: PPUSH
27842: LD_VAR 0 1
27846: PPUSH
27847: CALL_OW 12
27851: ARRAY
27852: PPUSH
27853: LD_INT 1
27855: PPUSH
27856: CALL_OW 234
// end ;
27860: PPOPN 1
27862: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27863: LD_EXP 53
27867: PUSH
27868: LD_EXP 95
27872: AND
27873: IFFALSE 28014
27875: GO 27877
27877: DISABLE
27878: LD_INT 0
27880: PPUSH
27881: PPUSH
27882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_INT 22
27890: PUSH
27891: LD_OWVAR 2
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 25
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: ST_TO_ADDR
// if not tmp then
27919: LD_VAR 0 3
27923: NOT
27924: IFFALSE 27928
// exit ;
27926: GO 28014
// un := tmp [ rand ( 1 , tmp ) ] ;
27928: LD_ADDR_VAR 0 2
27932: PUSH
27933: LD_VAR 0 3
27937: PUSH
27938: LD_INT 1
27940: PPUSH
27941: LD_VAR 0 3
27945: PPUSH
27946: CALL_OW 12
27950: ARRAY
27951: ST_TO_ADDR
// if Crawls ( un ) then
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 318
27961: IFFALSE 27972
// ComWalk ( un ) ;
27963: LD_VAR 0 2
27967: PPUSH
27968: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_INT 9
27979: PPUSH
27980: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27984: LD_INT 28
27986: PPUSH
27987: LD_OWVAR 2
27991: PPUSH
27992: LD_INT 2
27994: PPUSH
27995: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27999: LD_INT 29
28001: PPUSH
28002: LD_OWVAR 2
28006: PPUSH
28007: LD_INT 2
28009: PPUSH
28010: CALL_OW 322
// end ;
28014: PPOPN 3
28016: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28017: LD_EXP 53
28021: PUSH
28022: LD_EXP 96
28026: AND
28027: IFFALSE 28138
28029: GO 28031
28031: DISABLE
28032: LD_INT 0
28034: PPUSH
28035: PPUSH
28036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28037: LD_ADDR_VAR 0 3
28041: PUSH
28042: LD_INT 22
28044: PUSH
28045: LD_OWVAR 2
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 25
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PPUSH
28068: CALL_OW 69
28072: ST_TO_ADDR
// if not tmp then
28073: LD_VAR 0 3
28077: NOT
28078: IFFALSE 28082
// exit ;
28080: GO 28138
// un := tmp [ rand ( 1 , tmp ) ] ;
28082: LD_ADDR_VAR 0 2
28086: PUSH
28087: LD_VAR 0 3
28091: PUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_VAR 0 3
28099: PPUSH
28100: CALL_OW 12
28104: ARRAY
28105: ST_TO_ADDR
// if Crawls ( un ) then
28106: LD_VAR 0 2
28110: PPUSH
28111: CALL_OW 318
28115: IFFALSE 28126
// ComWalk ( un ) ;
28117: LD_VAR 0 2
28121: PPUSH
28122: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28126: LD_VAR 0 2
28130: PPUSH
28131: LD_INT 8
28133: PPUSH
28134: CALL_OW 336
// end ;
28138: PPOPN 3
28140: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28141: LD_EXP 53
28145: PUSH
28146: LD_EXP 97
28150: AND
28151: IFFALSE 28295
28153: GO 28155
28155: DISABLE
28156: LD_INT 0
28158: PPUSH
28159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28160: LD_ADDR_VAR 0 2
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 21
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 34
28192: PUSH
28193: LD_INT 12
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 34
28202: PUSH
28203: LD_INT 51
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 34
28212: PUSH
28213: LD_INT 32
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: LIST
28230: PPUSH
28231: CALL_OW 69
28235: ST_TO_ADDR
// if not tmp then
28236: LD_VAR 0 2
28240: NOT
28241: IFFALSE 28245
// exit ;
28243: GO 28295
// for i in tmp do
28245: LD_ADDR_VAR 0 1
28249: PUSH
28250: LD_VAR 0 2
28254: PUSH
28255: FOR_IN
28256: IFFALSE 28293
// if GetCargo ( i , mat_artifact ) = 0 then
28258: LD_VAR 0 1
28262: PPUSH
28263: LD_INT 4
28265: PPUSH
28266: CALL_OW 289
28270: PUSH
28271: LD_INT 0
28273: EQUAL
28274: IFFALSE 28291
// SetCargo ( i , mat_siberit , 100 ) ;
28276: LD_VAR 0 1
28280: PPUSH
28281: LD_INT 3
28283: PPUSH
28284: LD_INT 100
28286: PPUSH
28287: CALL_OW 290
28291: GO 28255
28293: POP
28294: POP
// end ;
28295: PPOPN 2
28297: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28298: LD_EXP 53
28302: PUSH
28303: LD_EXP 98
28307: AND
28308: IFFALSE 28491
28310: GO 28312
28312: DISABLE
28313: LD_INT 0
28315: PPUSH
28316: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28317: LD_ADDR_VAR 0 2
28321: PUSH
28322: LD_INT 22
28324: PUSH
28325: LD_OWVAR 2
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PPUSH
28334: CALL_OW 69
28338: ST_TO_ADDR
// if not tmp then
28339: LD_VAR 0 2
28343: NOT
28344: IFFALSE 28348
// exit ;
28346: GO 28491
// for i := 1 to 2 do
28348: LD_ADDR_VAR 0 1
28352: PUSH
28353: DOUBLE
28354: LD_INT 1
28356: DEC
28357: ST_TO_ADDR
28358: LD_INT 2
28360: PUSH
28361: FOR_TO
28362: IFFALSE 28489
// begin uc_side := your_side ;
28364: LD_ADDR_OWVAR 20
28368: PUSH
28369: LD_OWVAR 2
28373: ST_TO_ADDR
// uc_nation := nation_american ;
28374: LD_ADDR_OWVAR 21
28378: PUSH
28379: LD_INT 1
28381: ST_TO_ADDR
// vc_chassis := us_morphling ;
28382: LD_ADDR_OWVAR 37
28386: PUSH
28387: LD_INT 5
28389: ST_TO_ADDR
// vc_engine := engine_siberite ;
28390: LD_ADDR_OWVAR 39
28394: PUSH
28395: LD_INT 3
28397: ST_TO_ADDR
// vc_control := control_computer ;
28398: LD_ADDR_OWVAR 38
28402: PUSH
28403: LD_INT 3
28405: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28406: LD_ADDR_OWVAR 40
28410: PUSH
28411: LD_INT 10
28413: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28414: LD_VAR 0 2
28418: PUSH
28419: LD_INT 1
28421: ARRAY
28422: PPUSH
28423: CALL_OW 310
28427: NOT
28428: IFFALSE 28475
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28430: CALL_OW 45
28434: PPUSH
28435: LD_VAR 0 2
28439: PUSH
28440: LD_INT 1
28442: ARRAY
28443: PPUSH
28444: CALL_OW 250
28448: PPUSH
28449: LD_VAR 0 2
28453: PUSH
28454: LD_INT 1
28456: ARRAY
28457: PPUSH
28458: CALL_OW 251
28462: PPUSH
28463: LD_INT 12
28465: PPUSH
28466: LD_INT 1
28468: PPUSH
28469: CALL_OW 50
28473: GO 28487
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28475: CALL_OW 45
28479: PPUSH
28480: LD_INT 1
28482: PPUSH
28483: CALL_OW 51
// end ;
28487: GO 28361
28489: POP
28490: POP
// end ;
28491: PPOPN 2
28493: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28494: LD_EXP 53
28498: PUSH
28499: LD_EXP 99
28503: AND
28504: IFFALSE 28726
28506: GO 28508
28508: DISABLE
28509: LD_INT 0
28511: PPUSH
28512: PPUSH
28513: PPUSH
28514: PPUSH
28515: PPUSH
28516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28517: LD_ADDR_VAR 0 6
28521: PUSH
28522: LD_INT 22
28524: PUSH
28525: LD_OWVAR 2
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 21
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 3
28546: PUSH
28547: LD_INT 23
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: PPUSH
28566: CALL_OW 69
28570: ST_TO_ADDR
// if not tmp then
28571: LD_VAR 0 6
28575: NOT
28576: IFFALSE 28580
// exit ;
28578: GO 28726
// s1 := rand ( 1 , 4 ) ;
28580: LD_ADDR_VAR 0 2
28584: PUSH
28585: LD_INT 1
28587: PPUSH
28588: LD_INT 4
28590: PPUSH
28591: CALL_OW 12
28595: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28596: LD_ADDR_VAR 0 4
28600: PUSH
28601: LD_VAR 0 6
28605: PUSH
28606: LD_INT 1
28608: ARRAY
28609: PPUSH
28610: LD_VAR 0 2
28614: PPUSH
28615: CALL_OW 259
28619: ST_TO_ADDR
// if s1 = 1 then
28620: LD_VAR 0 2
28624: PUSH
28625: LD_INT 1
28627: EQUAL
28628: IFFALSE 28648
// s2 := rand ( 2 , 4 ) else
28630: LD_ADDR_VAR 0 3
28634: PUSH
28635: LD_INT 2
28637: PPUSH
28638: LD_INT 4
28640: PPUSH
28641: CALL_OW 12
28645: ST_TO_ADDR
28646: GO 28656
// s2 := 1 ;
28648: LD_ADDR_VAR 0 3
28652: PUSH
28653: LD_INT 1
28655: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28656: LD_ADDR_VAR 0 5
28660: PUSH
28661: LD_VAR 0 6
28665: PUSH
28666: LD_INT 1
28668: ARRAY
28669: PPUSH
28670: LD_VAR 0 3
28674: PPUSH
28675: CALL_OW 259
28679: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28680: LD_VAR 0 6
28684: PUSH
28685: LD_INT 1
28687: ARRAY
28688: PPUSH
28689: LD_VAR 0 2
28693: PPUSH
28694: LD_VAR 0 5
28698: PPUSH
28699: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28703: LD_VAR 0 6
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: PPUSH
28712: LD_VAR 0 3
28716: PPUSH
28717: LD_VAR 0 4
28721: PPUSH
28722: CALL_OW 237
// end ;
28726: PPOPN 6
28728: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28729: LD_EXP 53
28733: PUSH
28734: LD_EXP 100
28738: AND
28739: IFFALSE 28818
28741: GO 28743
28743: DISABLE
28744: LD_INT 0
28746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28747: LD_ADDR_VAR 0 1
28751: PUSH
28752: LD_INT 22
28754: PUSH
28755: LD_OWVAR 2
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 30
28766: PUSH
28767: LD_INT 3
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PPUSH
28778: CALL_OW 69
28782: ST_TO_ADDR
// if not tmp then
28783: LD_VAR 0 1
28787: NOT
28788: IFFALSE 28792
// exit ;
28790: GO 28818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28792: LD_VAR 0 1
28796: PUSH
28797: LD_INT 1
28799: PPUSH
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 12
28809: ARRAY
28810: PPUSH
28811: LD_INT 1
28813: PPUSH
28814: CALL_OW 234
// end ;
28818: PPOPN 1
28820: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28821: LD_EXP 53
28825: PUSH
28826: LD_EXP 101
28830: AND
28831: IFFALSE 28943
28833: GO 28835
28835: DISABLE
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28840: LD_ADDR_VAR 0 2
28844: PUSH
28845: LD_INT 22
28847: PUSH
28848: LD_OWVAR 2
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 30
28862: PUSH
28863: LD_INT 27
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 30
28872: PUSH
28873: LD_INT 26
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 30
28882: PUSH
28883: LD_INT 28
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: ST_TO_ADDR
// if not tmp then
28905: LD_VAR 0 2
28909: NOT
28910: IFFALSE 28914
// exit ;
28912: GO 28943
// for i in tmp do
28914: LD_ADDR_VAR 0 1
28918: PUSH
28919: LD_VAR 0 2
28923: PUSH
28924: FOR_IN
28925: IFFALSE 28941
// SetLives ( i , 1 ) ;
28927: LD_VAR 0 1
28931: PPUSH
28932: LD_INT 1
28934: PPUSH
28935: CALL_OW 234
28939: GO 28924
28941: POP
28942: POP
// end ;
28943: PPOPN 2
28945: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28946: LD_EXP 53
28950: PUSH
28951: LD_EXP 102
28955: AND
28956: IFFALSE 29243
28958: GO 28960
28960: DISABLE
28961: LD_INT 0
28963: PPUSH
28964: PPUSH
28965: PPUSH
// begin i := rand ( 1 , 7 ) ;
28966: LD_ADDR_VAR 0 1
28970: PUSH
28971: LD_INT 1
28973: PPUSH
28974: LD_INT 7
28976: PPUSH
28977: CALL_OW 12
28981: ST_TO_ADDR
// case i of 1 :
28982: LD_VAR 0 1
28986: PUSH
28987: LD_INT 1
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 28995
28993: GO 29005
28995: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28996: LD_STRING earthquake(getX(game), 0, 32)
28998: PPUSH
28999: CALL_OW 559
29003: GO 29243
29005: LD_INT 2
29007: DOUBLE
29008: EQUAL
29009: IFTRUE 29013
29011: GO 29027
29013: POP
// begin ToLua ( displayStucuk(); ) ;
29014: LD_STRING displayStucuk();
29016: PPUSH
29017: CALL_OW 559
// ResetFog ;
29021: CALL_OW 335
// end ; 3 :
29025: GO 29243
29027: LD_INT 3
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29139
29035: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29036: LD_ADDR_VAR 0 2
29040: PUSH
29041: LD_INT 22
29043: PUSH
29044: LD_OWVAR 2
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 25
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PPUSH
29067: CALL_OW 69
29071: ST_TO_ADDR
// if not tmp then
29072: LD_VAR 0 2
29076: NOT
29077: IFFALSE 29081
// exit ;
29079: GO 29243
// un := tmp [ rand ( 1 , tmp ) ] ;
29081: LD_ADDR_VAR 0 3
29085: PUSH
29086: LD_VAR 0 2
29090: PUSH
29091: LD_INT 1
29093: PPUSH
29094: LD_VAR 0 2
29098: PPUSH
29099: CALL_OW 12
29103: ARRAY
29104: ST_TO_ADDR
// if Crawls ( un ) then
29105: LD_VAR 0 3
29109: PPUSH
29110: CALL_OW 318
29114: IFFALSE 29125
// ComWalk ( un ) ;
29116: LD_VAR 0 3
29120: PPUSH
29121: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29125: LD_VAR 0 3
29129: PPUSH
29130: LD_INT 8
29132: PPUSH
29133: CALL_OW 336
// end ; 4 :
29137: GO 29243
29139: LD_INT 4
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29221
29147: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29148: LD_ADDR_VAR 0 2
29152: PUSH
29153: LD_INT 22
29155: PUSH
29156: LD_OWVAR 2
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 30
29167: PUSH
29168: LD_INT 29
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PPUSH
29179: CALL_OW 69
29183: ST_TO_ADDR
// if not tmp then
29184: LD_VAR 0 2
29188: NOT
29189: IFFALSE 29193
// exit ;
29191: GO 29243
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29193: LD_VAR 0 2
29197: PUSH
29198: LD_INT 1
29200: ARRAY
29201: PPUSH
29202: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29206: LD_VAR 0 2
29210: PUSH
29211: LD_INT 1
29213: ARRAY
29214: PPUSH
29215: CALL_OW 65
// end ; 5 .. 7 :
29219: GO 29243
29221: LD_INT 5
29223: DOUBLE
29224: GREATEREQUAL
29225: IFFALSE 29233
29227: LD_INT 7
29229: DOUBLE
29230: LESSEQUAL
29231: IFTRUE 29235
29233: GO 29242
29235: POP
// StreamSibBomb ; end ;
29236: CALL 25480 0 0
29240: GO 29243
29242: POP
// end ;
29243: PPOPN 3
29245: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29246: LD_EXP 53
29250: PUSH
29251: LD_EXP 103
29255: AND
29256: IFFALSE 29412
29258: GO 29260
29260: DISABLE
29261: LD_INT 0
29263: PPUSH
29264: PPUSH
29265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29266: LD_ADDR_VAR 0 2
29270: PUSH
29271: LD_INT 81
29273: PUSH
29274: LD_OWVAR 2
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: LD_INT 21
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 21
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PPUSH
29315: CALL_OW 69
29319: ST_TO_ADDR
// if not tmp then
29320: LD_VAR 0 2
29324: NOT
29325: IFFALSE 29329
// exit ;
29327: GO 29412
// p := 0 ;
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_INT 0
29336: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29337: LD_INT 35
29339: PPUSH
29340: CALL_OW 67
// p := p + 1 ;
29344: LD_ADDR_VAR 0 3
29348: PUSH
29349: LD_VAR 0 3
29353: PUSH
29354: LD_INT 1
29356: PLUS
29357: ST_TO_ADDR
// for i in tmp do
29358: LD_ADDR_VAR 0 1
29362: PUSH
29363: LD_VAR 0 2
29367: PUSH
29368: FOR_IN
29369: IFFALSE 29400
// if GetLives ( i ) < 1000 then
29371: LD_VAR 0 1
29375: PPUSH
29376: CALL_OW 256
29380: PUSH
29381: LD_INT 1000
29383: LESS
29384: IFFALSE 29398
// SetLives ( i , 1000 ) ;
29386: LD_VAR 0 1
29390: PPUSH
29391: LD_INT 1000
29393: PPUSH
29394: CALL_OW 234
29398: GO 29368
29400: POP
29401: POP
// until p > 20 ;
29402: LD_VAR 0 3
29406: PUSH
29407: LD_INT 20
29409: GREATER
29410: IFFALSE 29337
// end ;
29412: PPOPN 3
29414: END
// every 0 0$1 trigger StreamModeActive and sTime do
29415: LD_EXP 53
29419: PUSH
29420: LD_EXP 104
29424: AND
29425: IFFALSE 29460
29427: GO 29429
29429: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29430: LD_INT 28
29432: PPUSH
29433: LD_OWVAR 2
29437: PPUSH
29438: LD_INT 2
29440: PPUSH
29441: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29445: LD_INT 30
29447: PPUSH
29448: LD_OWVAR 2
29452: PPUSH
29453: LD_INT 2
29455: PPUSH
29456: CALL_OW 322
// end ;
29460: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29461: LD_EXP 53
29465: PUSH
29466: LD_EXP 105
29470: AND
29471: IFFALSE 29592
29473: GO 29475
29475: DISABLE
29476: LD_INT 0
29478: PPUSH
29479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29480: LD_ADDR_VAR 0 2
29484: PUSH
29485: LD_INT 22
29487: PUSH
29488: LD_OWVAR 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 21
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: LD_INT 23
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: PPUSH
29529: CALL_OW 69
29533: ST_TO_ADDR
// if not tmp then
29534: LD_VAR 0 2
29538: NOT
29539: IFFALSE 29543
// exit ;
29541: GO 29592
// for i in tmp do
29543: LD_ADDR_VAR 0 1
29547: PUSH
29548: LD_VAR 0 2
29552: PUSH
29553: FOR_IN
29554: IFFALSE 29590
// begin if Crawls ( i ) then
29556: LD_VAR 0 1
29560: PPUSH
29561: CALL_OW 318
29565: IFFALSE 29576
// ComWalk ( i ) ;
29567: LD_VAR 0 1
29571: PPUSH
29572: CALL_OW 138
// SetClass ( i , 2 ) ;
29576: LD_VAR 0 1
29580: PPUSH
29581: LD_INT 2
29583: PPUSH
29584: CALL_OW 336
// end ;
29588: GO 29553
29590: POP
29591: POP
// end ;
29592: PPOPN 2
29594: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29595: LD_EXP 53
29599: PUSH
29600: LD_EXP 106
29604: AND
29605: IFFALSE 29893
29607: GO 29609
29609: DISABLE
29610: LD_INT 0
29612: PPUSH
29613: PPUSH
29614: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29615: LD_OWVAR 2
29619: PPUSH
29620: LD_INT 9
29622: PPUSH
29623: LD_INT 1
29625: PPUSH
29626: LD_INT 1
29628: PPUSH
29629: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29633: LD_INT 9
29635: PPUSH
29636: LD_OWVAR 2
29640: PPUSH
29641: CALL_OW 343
// uc_side := 9 ;
29645: LD_ADDR_OWVAR 20
29649: PUSH
29650: LD_INT 9
29652: ST_TO_ADDR
// uc_nation := 2 ;
29653: LD_ADDR_OWVAR 21
29657: PUSH
29658: LD_INT 2
29660: ST_TO_ADDR
// hc_name := Dark Warrior ;
29661: LD_ADDR_OWVAR 26
29665: PUSH
29666: LD_STRING Dark Warrior
29668: ST_TO_ADDR
// hc_gallery :=  ;
29669: LD_ADDR_OWVAR 33
29673: PUSH
29674: LD_STRING 
29676: ST_TO_ADDR
// hc_noskilllimit := true ;
29677: LD_ADDR_OWVAR 76
29681: PUSH
29682: LD_INT 1
29684: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29685: LD_ADDR_OWVAR 31
29689: PUSH
29690: LD_INT 30
29692: PUSH
29693: LD_INT 30
29695: PUSH
29696: LD_INT 30
29698: PUSH
29699: LD_INT 30
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: ST_TO_ADDR
// un := CreateHuman ;
29708: LD_ADDR_VAR 0 3
29712: PUSH
29713: CALL_OW 44
29717: ST_TO_ADDR
// hc_noskilllimit := false ;
29718: LD_ADDR_OWVAR 76
29722: PUSH
29723: LD_INT 0
29725: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29726: LD_VAR 0 3
29730: PPUSH
29731: LD_INT 1
29733: PPUSH
29734: CALL_OW 51
// ToLua ( playRanger() ) ;
29738: LD_STRING playRanger()
29740: PPUSH
29741: CALL_OW 559
// p := 0 ;
29745: LD_ADDR_VAR 0 2
29749: PUSH
29750: LD_INT 0
29752: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29753: LD_INT 35
29755: PPUSH
29756: CALL_OW 67
// p := p + 1 ;
29760: LD_ADDR_VAR 0 2
29764: PUSH
29765: LD_VAR 0 2
29769: PUSH
29770: LD_INT 1
29772: PLUS
29773: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29774: LD_VAR 0 3
29778: PPUSH
29779: CALL_OW 256
29783: PUSH
29784: LD_INT 1000
29786: LESS
29787: IFFALSE 29801
// SetLives ( un , 1000 ) ;
29789: LD_VAR 0 3
29793: PPUSH
29794: LD_INT 1000
29796: PPUSH
29797: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29801: LD_VAR 0 3
29805: PPUSH
29806: LD_INT 81
29808: PUSH
29809: LD_OWVAR 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 91
29820: PUSH
29821: LD_VAR 0 3
29825: PUSH
29826: LD_INT 30
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PPUSH
29838: CALL_OW 69
29842: PPUSH
29843: LD_VAR 0 3
29847: PPUSH
29848: CALL_OW 74
29852: PPUSH
29853: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29857: LD_VAR 0 2
29861: PUSH
29862: LD_INT 80
29864: GREATER
29865: PUSH
29866: LD_VAR 0 3
29870: PPUSH
29871: CALL_OW 301
29875: OR
29876: IFFALSE 29753
// if un then
29878: LD_VAR 0 3
29882: IFFALSE 29893
// RemoveUnit ( un ) ;
29884: LD_VAR 0 3
29888: PPUSH
29889: CALL_OW 64
// end ;
29893: PPOPN 3
29895: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29896: LD_EXP 107
29900: IFFALSE 30016
29902: GO 29904
29904: DISABLE
29905: LD_INT 0
29907: PPUSH
29908: PPUSH
29909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29910: LD_ADDR_VAR 0 2
29914: PUSH
29915: LD_INT 81
29917: PUSH
29918: LD_OWVAR 2
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 21
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PPUSH
29941: CALL_OW 69
29945: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29946: LD_STRING playComputer()
29948: PPUSH
29949: CALL_OW 559
// if not tmp then
29953: LD_VAR 0 2
29957: NOT
29958: IFFALSE 29962
// exit ;
29960: GO 30016
// for i in tmp do
29962: LD_ADDR_VAR 0 1
29966: PUSH
29967: LD_VAR 0 2
29971: PUSH
29972: FOR_IN
29973: IFFALSE 30014
// for j := 1 to 4 do
29975: LD_ADDR_VAR 0 3
29979: PUSH
29980: DOUBLE
29981: LD_INT 1
29983: DEC
29984: ST_TO_ADDR
29985: LD_INT 4
29987: PUSH
29988: FOR_TO
29989: IFFALSE 30010
// SetSkill ( i , j , 10 ) ;
29991: LD_VAR 0 1
29995: PPUSH
29996: LD_VAR 0 3
30000: PPUSH
30001: LD_INT 10
30003: PPUSH
30004: CALL_OW 237
30008: GO 29988
30010: POP
30011: POP
30012: GO 29972
30014: POP
30015: POP
// end ;
30016: PPOPN 3
30018: END
// every 0 0$1 trigger s30 do var i , tmp ;
30019: LD_EXP 108
30023: IFFALSE 30092
30025: GO 30027
30027: DISABLE
30028: LD_INT 0
30030: PPUSH
30031: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30032: LD_ADDR_VAR 0 2
30036: PUSH
30037: LD_INT 22
30039: PUSH
30040: LD_OWVAR 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PPUSH
30049: CALL_OW 69
30053: ST_TO_ADDR
// if not tmp then
30054: LD_VAR 0 2
30058: NOT
30059: IFFALSE 30063
// exit ;
30061: GO 30092
// for i in tmp do
30063: LD_ADDR_VAR 0 1
30067: PUSH
30068: LD_VAR 0 2
30072: PUSH
30073: FOR_IN
30074: IFFALSE 30090
// SetLives ( i , 300 ) ;
30076: LD_VAR 0 1
30080: PPUSH
30081: LD_INT 300
30083: PPUSH
30084: CALL_OW 234
30088: GO 30073
30090: POP
30091: POP
// end ;
30092: PPOPN 2
30094: END
// every 0 0$1 trigger s60 do var i , tmp ;
30095: LD_EXP 109
30099: IFFALSE 30168
30101: GO 30103
30103: DISABLE
30104: LD_INT 0
30106: PPUSH
30107: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30108: LD_ADDR_VAR 0 2
30112: PUSH
30113: LD_INT 22
30115: PUSH
30116: LD_OWVAR 2
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PPUSH
30125: CALL_OW 69
30129: ST_TO_ADDR
// if not tmp then
30130: LD_VAR 0 2
30134: NOT
30135: IFFALSE 30139
// exit ;
30137: GO 30168
// for i in tmp do
30139: LD_ADDR_VAR 0 1
30143: PUSH
30144: LD_VAR 0 2
30148: PUSH
30149: FOR_IN
30150: IFFALSE 30166
// SetLives ( i , 600 ) ;
30152: LD_VAR 0 1
30156: PPUSH
30157: LD_INT 600
30159: PPUSH
30160: CALL_OW 234
30164: GO 30149
30166: POP
30167: POP
// end ;
30168: PPOPN 2
30170: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30171: LD_INT 0
30173: PPUSH
// case cmd of 301 :
30174: LD_VAR 0 1
30178: PUSH
30179: LD_INT 301
30181: DOUBLE
30182: EQUAL
30183: IFTRUE 30187
30185: GO 30219
30187: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30188: LD_VAR 0 6
30192: PPUSH
30193: LD_VAR 0 7
30197: PPUSH
30198: LD_VAR 0 8
30202: PPUSH
30203: LD_VAR 0 4
30207: PPUSH
30208: LD_VAR 0 5
30212: PPUSH
30213: CALL 31428 0 5
30217: GO 30340
30219: LD_INT 302
30221: DOUBLE
30222: EQUAL
30223: IFTRUE 30227
30225: GO 30264
30227: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30228: LD_VAR 0 6
30232: PPUSH
30233: LD_VAR 0 7
30237: PPUSH
30238: LD_VAR 0 8
30242: PPUSH
30243: LD_VAR 0 9
30247: PPUSH
30248: LD_VAR 0 4
30252: PPUSH
30253: LD_VAR 0 5
30257: PPUSH
30258: CALL 31519 0 6
30262: GO 30340
30264: LD_INT 303
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30309
30272: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30273: LD_VAR 0 6
30277: PPUSH
30278: LD_VAR 0 7
30282: PPUSH
30283: LD_VAR 0 8
30287: PPUSH
30288: LD_VAR 0 9
30292: PPUSH
30293: LD_VAR 0 4
30297: PPUSH
30298: LD_VAR 0 5
30302: PPUSH
30303: CALL 30345 0 6
30307: GO 30340
30309: LD_INT 304
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30339
30317: POP
// hHackTeleport ( unit , x , y ) ; end ;
30318: LD_VAR 0 2
30322: PPUSH
30323: LD_VAR 0 4
30327: PPUSH
30328: LD_VAR 0 5
30332: PPUSH
30333: CALL 32112 0 3
30337: GO 30340
30339: POP
// end ;
30340: LD_VAR 0 12
30344: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30345: LD_INT 0
30347: PPUSH
30348: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30349: LD_VAR 0 1
30353: PUSH
30354: LD_INT 1
30356: LESS
30357: PUSH
30358: LD_VAR 0 1
30362: PUSH
30363: LD_INT 3
30365: GREATER
30366: OR
30367: PUSH
30368: LD_VAR 0 5
30372: PPUSH
30373: LD_VAR 0 6
30377: PPUSH
30378: CALL_OW 428
30382: OR
30383: IFFALSE 30387
// exit ;
30385: GO 31115
// uc_side := your_side ;
30387: LD_ADDR_OWVAR 20
30391: PUSH
30392: LD_OWVAR 2
30396: ST_TO_ADDR
// uc_nation := nation ;
30397: LD_ADDR_OWVAR 21
30401: PUSH
30402: LD_VAR 0 1
30406: ST_TO_ADDR
// bc_level = 1 ;
30407: LD_ADDR_OWVAR 43
30411: PUSH
30412: LD_INT 1
30414: ST_TO_ADDR
// case btype of 1 :
30415: LD_VAR 0 2
30419: PUSH
30420: LD_INT 1
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30439
30428: POP
// bc_type := b_depot ; 2 :
30429: LD_ADDR_OWVAR 42
30433: PUSH
30434: LD_INT 0
30436: ST_TO_ADDR
30437: GO 31059
30439: LD_INT 2
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30458
30447: POP
// bc_type := b_warehouse ; 3 :
30448: LD_ADDR_OWVAR 42
30452: PUSH
30453: LD_INT 1
30455: ST_TO_ADDR
30456: GO 31059
30458: LD_INT 3
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30477
30466: POP
// bc_type := b_lab ; 4 .. 9 :
30467: LD_ADDR_OWVAR 42
30471: PUSH
30472: LD_INT 6
30474: ST_TO_ADDR
30475: GO 31059
30477: LD_INT 4
30479: DOUBLE
30480: GREATEREQUAL
30481: IFFALSE 30489
30483: LD_INT 9
30485: DOUBLE
30486: LESSEQUAL
30487: IFTRUE 30491
30489: GO 30551
30491: POP
// begin bc_type := b_lab_half ;
30492: LD_ADDR_OWVAR 42
30496: PUSH
30497: LD_INT 7
30499: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30500: LD_ADDR_OWVAR 44
30504: PUSH
30505: LD_INT 10
30507: PUSH
30508: LD_INT 11
30510: PUSH
30511: LD_INT 12
30513: PUSH
30514: LD_INT 15
30516: PUSH
30517: LD_INT 14
30519: PUSH
30520: LD_INT 13
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: PUSH
30531: LD_VAR 0 2
30535: PUSH
30536: LD_INT 3
30538: MINUS
30539: ARRAY
30540: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30541: LD_ADDR_OWVAR 45
30545: PUSH
30546: LD_INT 9
30548: ST_TO_ADDR
// end ; 10 .. 13 :
30549: GO 31059
30551: LD_INT 10
30553: DOUBLE
30554: GREATEREQUAL
30555: IFFALSE 30563
30557: LD_INT 13
30559: DOUBLE
30560: LESSEQUAL
30561: IFTRUE 30565
30563: GO 30642
30565: POP
// begin bc_type := b_lab_full ;
30566: LD_ADDR_OWVAR 42
30570: PUSH
30571: LD_INT 8
30573: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30574: LD_ADDR_OWVAR 44
30578: PUSH
30579: LD_INT 10
30581: PUSH
30582: LD_INT 12
30584: PUSH
30585: LD_INT 14
30587: PUSH
30588: LD_INT 13
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: PUSH
30597: LD_VAR 0 2
30601: PUSH
30602: LD_INT 9
30604: MINUS
30605: ARRAY
30606: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30607: LD_ADDR_OWVAR 45
30611: PUSH
30612: LD_INT 11
30614: PUSH
30615: LD_INT 15
30617: PUSH
30618: LD_INT 12
30620: PUSH
30621: LD_INT 15
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: PUSH
30630: LD_VAR 0 2
30634: PUSH
30635: LD_INT 9
30637: MINUS
30638: ARRAY
30639: ST_TO_ADDR
// end ; 14 :
30640: GO 31059
30642: LD_INT 14
30644: DOUBLE
30645: EQUAL
30646: IFTRUE 30650
30648: GO 30661
30650: POP
// bc_type := b_workshop ; 15 :
30651: LD_ADDR_OWVAR 42
30655: PUSH
30656: LD_INT 2
30658: ST_TO_ADDR
30659: GO 31059
30661: LD_INT 15
30663: DOUBLE
30664: EQUAL
30665: IFTRUE 30669
30667: GO 30680
30669: POP
// bc_type := b_factory ; 16 :
30670: LD_ADDR_OWVAR 42
30674: PUSH
30675: LD_INT 3
30677: ST_TO_ADDR
30678: GO 31059
30680: LD_INT 16
30682: DOUBLE
30683: EQUAL
30684: IFTRUE 30688
30686: GO 30699
30688: POP
// bc_type := b_ext_gun ; 17 :
30689: LD_ADDR_OWVAR 42
30693: PUSH
30694: LD_INT 17
30696: ST_TO_ADDR
30697: GO 31059
30699: LD_INT 17
30701: DOUBLE
30702: EQUAL
30703: IFTRUE 30707
30705: GO 30735
30707: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30708: LD_ADDR_OWVAR 42
30712: PUSH
30713: LD_INT 19
30715: PUSH
30716: LD_INT 23
30718: PUSH
30719: LD_INT 19
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: PUSH
30727: LD_VAR 0 1
30731: ARRAY
30732: ST_TO_ADDR
30733: GO 31059
30735: LD_INT 18
30737: DOUBLE
30738: EQUAL
30739: IFTRUE 30743
30741: GO 30754
30743: POP
// bc_type := b_ext_radar ; 19 :
30744: LD_ADDR_OWVAR 42
30748: PUSH
30749: LD_INT 20
30751: ST_TO_ADDR
30752: GO 31059
30754: LD_INT 19
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30773
30762: POP
// bc_type := b_ext_radio ; 20 :
30763: LD_ADDR_OWVAR 42
30767: PUSH
30768: LD_INT 22
30770: ST_TO_ADDR
30771: GO 31059
30773: LD_INT 20
30775: DOUBLE
30776: EQUAL
30777: IFTRUE 30781
30779: GO 30792
30781: POP
// bc_type := b_ext_siberium ; 21 :
30782: LD_ADDR_OWVAR 42
30786: PUSH
30787: LD_INT 21
30789: ST_TO_ADDR
30790: GO 31059
30792: LD_INT 21
30794: DOUBLE
30795: EQUAL
30796: IFTRUE 30800
30798: GO 30811
30800: POP
// bc_type := b_ext_computer ; 22 :
30801: LD_ADDR_OWVAR 42
30805: PUSH
30806: LD_INT 24
30808: ST_TO_ADDR
30809: GO 31059
30811: LD_INT 22
30813: DOUBLE
30814: EQUAL
30815: IFTRUE 30819
30817: GO 30830
30819: POP
// bc_type := b_ext_track ; 23 :
30820: LD_ADDR_OWVAR 42
30824: PUSH
30825: LD_INT 16
30827: ST_TO_ADDR
30828: GO 31059
30830: LD_INT 23
30832: DOUBLE
30833: EQUAL
30834: IFTRUE 30838
30836: GO 30849
30838: POP
// bc_type := b_ext_laser ; 24 :
30839: LD_ADDR_OWVAR 42
30843: PUSH
30844: LD_INT 25
30846: ST_TO_ADDR
30847: GO 31059
30849: LD_INT 24
30851: DOUBLE
30852: EQUAL
30853: IFTRUE 30857
30855: GO 30868
30857: POP
// bc_type := b_control_tower ; 25 :
30858: LD_ADDR_OWVAR 42
30862: PUSH
30863: LD_INT 36
30865: ST_TO_ADDR
30866: GO 31059
30868: LD_INT 25
30870: DOUBLE
30871: EQUAL
30872: IFTRUE 30876
30874: GO 30887
30876: POP
// bc_type := b_breastwork ; 26 :
30877: LD_ADDR_OWVAR 42
30881: PUSH
30882: LD_INT 31
30884: ST_TO_ADDR
30885: GO 31059
30887: LD_INT 26
30889: DOUBLE
30890: EQUAL
30891: IFTRUE 30895
30893: GO 30906
30895: POP
// bc_type := b_bunker ; 27 :
30896: LD_ADDR_OWVAR 42
30900: PUSH
30901: LD_INT 32
30903: ST_TO_ADDR
30904: GO 31059
30906: LD_INT 27
30908: DOUBLE
30909: EQUAL
30910: IFTRUE 30914
30912: GO 30925
30914: POP
// bc_type := b_turret ; 28 :
30915: LD_ADDR_OWVAR 42
30919: PUSH
30920: LD_INT 33
30922: ST_TO_ADDR
30923: GO 31059
30925: LD_INT 28
30927: DOUBLE
30928: EQUAL
30929: IFTRUE 30933
30931: GO 30944
30933: POP
// bc_type := b_armoury ; 29 :
30934: LD_ADDR_OWVAR 42
30938: PUSH
30939: LD_INT 4
30941: ST_TO_ADDR
30942: GO 31059
30944: LD_INT 29
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 30963
30952: POP
// bc_type := b_barracks ; 30 :
30953: LD_ADDR_OWVAR 42
30957: PUSH
30958: LD_INT 5
30960: ST_TO_ADDR
30961: GO 31059
30963: LD_INT 30
30965: DOUBLE
30966: EQUAL
30967: IFTRUE 30971
30969: GO 30982
30971: POP
// bc_type := b_solar_power ; 31 :
30972: LD_ADDR_OWVAR 42
30976: PUSH
30977: LD_INT 27
30979: ST_TO_ADDR
30980: GO 31059
30982: LD_INT 31
30984: DOUBLE
30985: EQUAL
30986: IFTRUE 30990
30988: GO 31001
30990: POP
// bc_type := b_oil_power ; 32 :
30991: LD_ADDR_OWVAR 42
30995: PUSH
30996: LD_INT 26
30998: ST_TO_ADDR
30999: GO 31059
31001: LD_INT 32
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31009
31007: GO 31020
31009: POP
// bc_type := b_siberite_power ; 33 :
31010: LD_ADDR_OWVAR 42
31014: PUSH
31015: LD_INT 28
31017: ST_TO_ADDR
31018: GO 31059
31020: LD_INT 33
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31039
31028: POP
// bc_type := b_oil_mine ; 34 :
31029: LD_ADDR_OWVAR 42
31033: PUSH
31034: LD_INT 29
31036: ST_TO_ADDR
31037: GO 31059
31039: LD_INT 34
31041: DOUBLE
31042: EQUAL
31043: IFTRUE 31047
31045: GO 31058
31047: POP
// bc_type := b_siberite_mine ; end ;
31048: LD_ADDR_OWVAR 42
31052: PUSH
31053: LD_INT 30
31055: ST_TO_ADDR
31056: GO 31059
31058: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31059: LD_ADDR_VAR 0 8
31063: PUSH
31064: LD_VAR 0 5
31068: PPUSH
31069: LD_VAR 0 6
31073: PPUSH
31074: LD_VAR 0 3
31078: PPUSH
31079: CALL_OW 47
31083: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31084: LD_OWVAR 42
31088: PUSH
31089: LD_INT 32
31091: PUSH
31092: LD_INT 33
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: IN
31099: IFFALSE 31115
// PlaceWeaponTurret ( b , weapon ) ;
31101: LD_VAR 0 8
31105: PPUSH
31106: LD_VAR 0 4
31110: PPUSH
31111: CALL_OW 431
// end ;
31115: LD_VAR 0 7
31119: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
31124: PPUSH
31125: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31126: LD_ADDR_VAR 0 4
31130: PUSH
31131: LD_INT 22
31133: PUSH
31134: LD_OWVAR 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 30
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 30
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: LIST
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PPUSH
31175: CALL_OW 69
31179: ST_TO_ADDR
// if not tmp then
31180: LD_VAR 0 4
31184: NOT
31185: IFFALSE 31189
// exit ;
31187: GO 31248
// for i in tmp do
31189: LD_ADDR_VAR 0 2
31193: PUSH
31194: LD_VAR 0 4
31198: PUSH
31199: FOR_IN
31200: IFFALSE 31246
// for j = 1 to 3 do
31202: LD_ADDR_VAR 0 3
31206: PUSH
31207: DOUBLE
31208: LD_INT 1
31210: DEC
31211: ST_TO_ADDR
31212: LD_INT 3
31214: PUSH
31215: FOR_TO
31216: IFFALSE 31242
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31218: LD_VAR 0 2
31222: PPUSH
31223: CALL_OW 274
31227: PPUSH
31228: LD_VAR 0 3
31232: PPUSH
31233: LD_INT 99999
31235: PPUSH
31236: CALL_OW 277
31240: GO 31215
31242: POP
31243: POP
31244: GO 31199
31246: POP
31247: POP
// end ;
31248: LD_VAR 0 1
31252: RET
// export function hHackSetLevel10 ; var i , j ; begin
31253: LD_INT 0
31255: PPUSH
31256: PPUSH
31257: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31258: LD_ADDR_VAR 0 2
31262: PUSH
31263: LD_INT 21
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PPUSH
31273: CALL_OW 69
31277: PUSH
31278: FOR_IN
31279: IFFALSE 31331
// if IsSelected ( i ) then
31281: LD_VAR 0 2
31285: PPUSH
31286: CALL_OW 306
31290: IFFALSE 31329
// begin for j := 1 to 4 do
31292: LD_ADDR_VAR 0 3
31296: PUSH
31297: DOUBLE
31298: LD_INT 1
31300: DEC
31301: ST_TO_ADDR
31302: LD_INT 4
31304: PUSH
31305: FOR_TO
31306: IFFALSE 31327
// SetSkill ( i , j , 10 ) ;
31308: LD_VAR 0 2
31312: PPUSH
31313: LD_VAR 0 3
31317: PPUSH
31318: LD_INT 10
31320: PPUSH
31321: CALL_OW 237
31325: GO 31305
31327: POP
31328: POP
// end ;
31329: GO 31278
31331: POP
31332: POP
// end ;
31333: LD_VAR 0 1
31337: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31338: LD_INT 0
31340: PPUSH
31341: PPUSH
31342: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31343: LD_ADDR_VAR 0 2
31347: PUSH
31348: LD_INT 22
31350: PUSH
31351: LD_OWVAR 2
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 21
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PPUSH
31374: CALL_OW 69
31378: PUSH
31379: FOR_IN
31380: IFFALSE 31421
// begin for j := 1 to 4 do
31382: LD_ADDR_VAR 0 3
31386: PUSH
31387: DOUBLE
31388: LD_INT 1
31390: DEC
31391: ST_TO_ADDR
31392: LD_INT 4
31394: PUSH
31395: FOR_TO
31396: IFFALSE 31417
// SetSkill ( i , j , 10 ) ;
31398: LD_VAR 0 2
31402: PPUSH
31403: LD_VAR 0 3
31407: PPUSH
31408: LD_INT 10
31410: PPUSH
31411: CALL_OW 237
31415: GO 31395
31417: POP
31418: POP
// end ;
31419: GO 31379
31421: POP
31422: POP
// end ;
31423: LD_VAR 0 1
31427: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31428: LD_INT 0
31430: PPUSH
// uc_side := your_side ;
31431: LD_ADDR_OWVAR 20
31435: PUSH
31436: LD_OWVAR 2
31440: ST_TO_ADDR
// uc_nation := nation ;
31441: LD_ADDR_OWVAR 21
31445: PUSH
31446: LD_VAR 0 1
31450: ST_TO_ADDR
// InitHc ;
31451: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31455: LD_INT 0
31457: PPUSH
31458: LD_VAR 0 2
31462: PPUSH
31463: LD_VAR 0 3
31467: PPUSH
31468: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31472: LD_VAR 0 4
31476: PPUSH
31477: LD_VAR 0 5
31481: PPUSH
31482: CALL_OW 428
31486: PUSH
31487: LD_INT 0
31489: EQUAL
31490: IFFALSE 31514
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31492: CALL_OW 44
31496: PPUSH
31497: LD_VAR 0 4
31501: PPUSH
31502: LD_VAR 0 5
31506: PPUSH
31507: LD_INT 1
31509: PPUSH
31510: CALL_OW 48
// end ;
31514: LD_VAR 0 6
31518: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31519: LD_INT 0
31521: PPUSH
31522: PPUSH
// uc_side := your_side ;
31523: LD_ADDR_OWVAR 20
31527: PUSH
31528: LD_OWVAR 2
31532: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31533: LD_VAR 0 1
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: LD_INT 4
31549: PUSH
31550: LD_INT 5
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: IN
31560: IFFALSE 31572
// uc_nation := nation_american else
31562: LD_ADDR_OWVAR 21
31566: PUSH
31567: LD_INT 1
31569: ST_TO_ADDR
31570: GO 31615
// if chassis in [ 11 , 12 , 13 , 14 ] then
31572: LD_VAR 0 1
31576: PUSH
31577: LD_INT 11
31579: PUSH
31580: LD_INT 12
31582: PUSH
31583: LD_INT 13
31585: PUSH
31586: LD_INT 14
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: IN
31595: IFFALSE 31607
// uc_nation := nation_arabian else
31597: LD_ADDR_OWVAR 21
31601: PUSH
31602: LD_INT 2
31604: ST_TO_ADDR
31605: GO 31615
// uc_nation := nation_russian ;
31607: LD_ADDR_OWVAR 21
31611: PUSH
31612: LD_INT 3
31614: ST_TO_ADDR
// vc_chassis := chassis ;
31615: LD_ADDR_OWVAR 37
31619: PUSH
31620: LD_VAR 0 1
31624: ST_TO_ADDR
// vc_engine := engine ;
31625: LD_ADDR_OWVAR 39
31629: PUSH
31630: LD_VAR 0 2
31634: ST_TO_ADDR
// vc_control := control ;
31635: LD_ADDR_OWVAR 38
31639: PUSH
31640: LD_VAR 0 3
31644: ST_TO_ADDR
// vc_weapon := weapon ;
31645: LD_ADDR_OWVAR 40
31649: PUSH
31650: LD_VAR 0 4
31654: ST_TO_ADDR
// un := CreateVehicle ;
31655: LD_ADDR_VAR 0 8
31659: PUSH
31660: CALL_OW 45
31664: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31665: LD_VAR 0 8
31669: PPUSH
31670: LD_INT 0
31672: PPUSH
31673: LD_INT 5
31675: PPUSH
31676: CALL_OW 12
31680: PPUSH
31681: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31685: LD_VAR 0 8
31689: PPUSH
31690: LD_VAR 0 5
31694: PPUSH
31695: LD_VAR 0 6
31699: PPUSH
31700: LD_INT 1
31702: PPUSH
31703: CALL_OW 48
// end ;
31707: LD_VAR 0 7
31711: RET
// export hInvincible ; every 1 do
31712: GO 31714
31714: DISABLE
// hInvincible := [ ] ;
31715: LD_ADDR_EXP 110
31719: PUSH
31720: EMPTY
31721: ST_TO_ADDR
31722: END
// every 10 do var i ;
31723: GO 31725
31725: DISABLE
31726: LD_INT 0
31728: PPUSH
// begin enable ;
31729: ENABLE
// if not hInvincible then
31730: LD_EXP 110
31734: NOT
31735: IFFALSE 31739
// exit ;
31737: GO 31783
// for i in hInvincible do
31739: LD_ADDR_VAR 0 1
31743: PUSH
31744: LD_EXP 110
31748: PUSH
31749: FOR_IN
31750: IFFALSE 31781
// if GetLives ( i ) < 1000 then
31752: LD_VAR 0 1
31756: PPUSH
31757: CALL_OW 256
31761: PUSH
31762: LD_INT 1000
31764: LESS
31765: IFFALSE 31779
// SetLives ( i , 1000 ) ;
31767: LD_VAR 0 1
31771: PPUSH
31772: LD_INT 1000
31774: PPUSH
31775: CALL_OW 234
31779: GO 31749
31781: POP
31782: POP
// end ;
31783: PPOPN 1
31785: END
// export function hHackInvincible ; var i ; begin
31786: LD_INT 0
31788: PPUSH
31789: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31790: LD_ADDR_VAR 0 2
31794: PUSH
31795: LD_INT 2
31797: PUSH
31798: LD_INT 21
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 21
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: PPUSH
31823: CALL_OW 69
31827: PUSH
31828: FOR_IN
31829: IFFALSE 31890
// if IsSelected ( i ) then
31831: LD_VAR 0 2
31835: PPUSH
31836: CALL_OW 306
31840: IFFALSE 31888
// begin if i in hInvincible then
31842: LD_VAR 0 2
31846: PUSH
31847: LD_EXP 110
31851: IN
31852: IFFALSE 31872
// hInvincible := hInvincible diff i else
31854: LD_ADDR_EXP 110
31858: PUSH
31859: LD_EXP 110
31863: PUSH
31864: LD_VAR 0 2
31868: DIFF
31869: ST_TO_ADDR
31870: GO 31888
// hInvincible := hInvincible union i ;
31872: LD_ADDR_EXP 110
31876: PUSH
31877: LD_EXP 110
31881: PUSH
31882: LD_VAR 0 2
31886: UNION
31887: ST_TO_ADDR
// end ;
31888: GO 31828
31890: POP
31891: POP
// end ;
31892: LD_VAR 0 1
31896: RET
// export function hHackInvisible ; var i , j ; begin
31897: LD_INT 0
31899: PPUSH
31900: PPUSH
31901: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31902: LD_ADDR_VAR 0 2
31906: PUSH
31907: LD_INT 21
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PPUSH
31917: CALL_OW 69
31921: PUSH
31922: FOR_IN
31923: IFFALSE 31947
// if IsSelected ( i ) then
31925: LD_VAR 0 2
31929: PPUSH
31930: CALL_OW 306
31934: IFFALSE 31945
// ComForceInvisible ( i ) ;
31936: LD_VAR 0 2
31940: PPUSH
31941: CALL_OW 496
31945: GO 31922
31947: POP
31948: POP
// end ;
31949: LD_VAR 0 1
31953: RET
// export function hHackChangeYourSide ; begin
31954: LD_INT 0
31956: PPUSH
// if your_side = 8 then
31957: LD_OWVAR 2
31961: PUSH
31962: LD_INT 8
31964: EQUAL
31965: IFFALSE 31977
// your_side := 0 else
31967: LD_ADDR_OWVAR 2
31971: PUSH
31972: LD_INT 0
31974: ST_TO_ADDR
31975: GO 31991
// your_side := your_side + 1 ;
31977: LD_ADDR_OWVAR 2
31981: PUSH
31982: LD_OWVAR 2
31986: PUSH
31987: LD_INT 1
31989: PLUS
31990: ST_TO_ADDR
// end ;
31991: LD_VAR 0 1
31995: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31996: LD_INT 0
31998: PPUSH
31999: PPUSH
32000: PPUSH
// for i in all_units do
32001: LD_ADDR_VAR 0 2
32005: PUSH
32006: LD_OWVAR 3
32010: PUSH
32011: FOR_IN
32012: IFFALSE 32090
// if IsSelected ( i ) then
32014: LD_VAR 0 2
32018: PPUSH
32019: CALL_OW 306
32023: IFFALSE 32088
// begin j := GetSide ( i ) ;
32025: LD_ADDR_VAR 0 3
32029: PUSH
32030: LD_VAR 0 2
32034: PPUSH
32035: CALL_OW 255
32039: ST_TO_ADDR
// if j = 8 then
32040: LD_VAR 0 3
32044: PUSH
32045: LD_INT 8
32047: EQUAL
32048: IFFALSE 32060
// j := 0 else
32050: LD_ADDR_VAR 0 3
32054: PUSH
32055: LD_INT 0
32057: ST_TO_ADDR
32058: GO 32074
// j := j + 1 ;
32060: LD_ADDR_VAR 0 3
32064: PUSH
32065: LD_VAR 0 3
32069: PUSH
32070: LD_INT 1
32072: PLUS
32073: ST_TO_ADDR
// SetSide ( i , j ) ;
32074: LD_VAR 0 2
32078: PPUSH
32079: LD_VAR 0 3
32083: PPUSH
32084: CALL_OW 235
// end ;
32088: GO 32011
32090: POP
32091: POP
// end ;
32092: LD_VAR 0 1
32096: RET
// export function hHackFog ; begin
32097: LD_INT 0
32099: PPUSH
// FogOff ( true ) ;
32100: LD_INT 1
32102: PPUSH
32103: CALL_OW 344
// end ;
32107: LD_VAR 0 1
32111: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32112: LD_INT 0
32114: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32115: LD_VAR 0 1
32119: PPUSH
32120: LD_VAR 0 2
32124: PPUSH
32125: LD_VAR 0 3
32129: PPUSH
32130: LD_INT 1
32132: PPUSH
32133: LD_INT 1
32135: PPUSH
32136: CALL_OW 483
// CenterOnXY ( x , y ) ;
32140: LD_VAR 0 2
32144: PPUSH
32145: LD_VAR 0 3
32149: PPUSH
32150: CALL_OW 84
// end ;
32154: LD_VAR 0 4
32158: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32159: LD_INT 0
32161: PPUSH
32162: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32163: LD_VAR 0 1
32167: NOT
32168: PUSH
32169: LD_VAR 0 2
32173: PPUSH
32174: LD_VAR 0 3
32178: PPUSH
32179: CALL_OW 488
32183: NOT
32184: OR
32185: PUSH
32186: LD_VAR 0 1
32190: PPUSH
32191: CALL_OW 266
32195: PUSH
32196: LD_INT 3
32198: NONEQUAL
32199: PUSH
32200: LD_VAR 0 1
32204: PPUSH
32205: CALL_OW 247
32209: PUSH
32210: LD_INT 1
32212: EQUAL
32213: NOT
32214: AND
32215: OR
32216: IFFALSE 32220
// exit ;
32218: GO 32369
// if GetType ( factory ) = unit_human then
32220: LD_VAR 0 1
32224: PPUSH
32225: CALL_OW 247
32229: PUSH
32230: LD_INT 1
32232: EQUAL
32233: IFFALSE 32250
// factory := IsInUnit ( factory ) ;
32235: LD_ADDR_VAR 0 1
32239: PUSH
32240: LD_VAR 0 1
32244: PPUSH
32245: CALL_OW 310
32249: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32250: LD_VAR 0 1
32254: PPUSH
32255: CALL_OW 266
32259: PUSH
32260: LD_INT 3
32262: NONEQUAL
32263: IFFALSE 32267
// exit ;
32265: GO 32369
// if HexInfo ( x , y ) = factory then
32267: LD_VAR 0 2
32271: PPUSH
32272: LD_VAR 0 3
32276: PPUSH
32277: CALL_OW 428
32281: PUSH
32282: LD_VAR 0 1
32286: EQUAL
32287: IFFALSE 32314
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32289: LD_ADDR_EXP 111
32293: PUSH
32294: LD_EXP 111
32298: PPUSH
32299: LD_VAR 0 1
32303: PPUSH
32304: LD_INT 0
32306: PPUSH
32307: CALL_OW 1
32311: ST_TO_ADDR
32312: GO 32365
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32314: LD_ADDR_EXP 111
32318: PUSH
32319: LD_EXP 111
32323: PPUSH
32324: LD_VAR 0 1
32328: PPUSH
32329: LD_VAR 0 1
32333: PPUSH
32334: CALL_OW 255
32338: PUSH
32339: LD_VAR 0 1
32343: PUSH
32344: LD_VAR 0 2
32348: PUSH
32349: LD_VAR 0 3
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: PPUSH
32360: CALL_OW 1
32364: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32365: CALL 32374 0 0
// end ;
32369: LD_VAR 0 4
32373: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32374: LD_INT 0
32376: PPUSH
32377: PPUSH
32378: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32379: LD_STRING resetFactoryWaypoint();
32381: PPUSH
32382: CALL_OW 559
// if factoryWaypoints then
32386: LD_EXP 111
32390: IFFALSE 32516
// begin list := PrepareArray ( factoryWaypoints ) ;
32392: LD_ADDR_VAR 0 3
32396: PUSH
32397: LD_EXP 111
32401: PPUSH
32402: CALL 79001 0 1
32406: ST_TO_ADDR
// for i := 1 to list do
32407: LD_ADDR_VAR 0 2
32411: PUSH
32412: DOUBLE
32413: LD_INT 1
32415: DEC
32416: ST_TO_ADDR
32417: LD_VAR 0 3
32421: PUSH
32422: FOR_TO
32423: IFFALSE 32514
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32425: LD_STRING setFactoryWaypointXY(
32427: PUSH
32428: LD_VAR 0 3
32432: PUSH
32433: LD_VAR 0 2
32437: ARRAY
32438: PUSH
32439: LD_INT 1
32441: ARRAY
32442: STR
32443: PUSH
32444: LD_STRING ,
32446: STR
32447: PUSH
32448: LD_VAR 0 3
32452: PUSH
32453: LD_VAR 0 2
32457: ARRAY
32458: PUSH
32459: LD_INT 2
32461: ARRAY
32462: STR
32463: PUSH
32464: LD_STRING ,
32466: STR
32467: PUSH
32468: LD_VAR 0 3
32472: PUSH
32473: LD_VAR 0 2
32477: ARRAY
32478: PUSH
32479: LD_INT 3
32481: ARRAY
32482: STR
32483: PUSH
32484: LD_STRING ,
32486: STR
32487: PUSH
32488: LD_VAR 0 3
32492: PUSH
32493: LD_VAR 0 2
32497: ARRAY
32498: PUSH
32499: LD_INT 4
32501: ARRAY
32502: STR
32503: PUSH
32504: LD_STRING )
32506: STR
32507: PPUSH
32508: CALL_OW 559
32512: GO 32422
32514: POP
32515: POP
// end ; end ;
32516: LD_VAR 0 1
32520: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32521: LD_INT 0
32523: PPUSH
// if HexInfo ( x , y ) = warehouse then
32524: LD_VAR 0 2
32528: PPUSH
32529: LD_VAR 0 3
32533: PPUSH
32534: CALL_OW 428
32538: PUSH
32539: LD_VAR 0 1
32543: EQUAL
32544: IFFALSE 32571
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32546: LD_ADDR_EXP 112
32550: PUSH
32551: LD_EXP 112
32555: PPUSH
32556: LD_VAR 0 1
32560: PPUSH
32561: LD_INT 0
32563: PPUSH
32564: CALL_OW 1
32568: ST_TO_ADDR
32569: GO 32622
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32571: LD_ADDR_EXP 112
32575: PUSH
32576: LD_EXP 112
32580: PPUSH
32581: LD_VAR 0 1
32585: PPUSH
32586: LD_VAR 0 1
32590: PPUSH
32591: CALL_OW 255
32595: PUSH
32596: LD_VAR 0 1
32600: PUSH
32601: LD_VAR 0 2
32605: PUSH
32606: LD_VAR 0 3
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: PPUSH
32617: CALL_OW 1
32621: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32622: CALL 32631 0 0
// end ;
32626: LD_VAR 0 4
32630: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32631: LD_INT 0
32633: PPUSH
32634: PPUSH
32635: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32636: LD_STRING resetWarehouseGatheringPoints();
32638: PPUSH
32639: CALL_OW 559
// if warehouseGatheringPoints then
32643: LD_EXP 112
32647: IFFALSE 32773
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32649: LD_ADDR_VAR 0 3
32653: PUSH
32654: LD_EXP 112
32658: PPUSH
32659: CALL 79001 0 1
32663: ST_TO_ADDR
// for i := 1 to list do
32664: LD_ADDR_VAR 0 2
32668: PUSH
32669: DOUBLE
32670: LD_INT 1
32672: DEC
32673: ST_TO_ADDR
32674: LD_VAR 0 3
32678: PUSH
32679: FOR_TO
32680: IFFALSE 32771
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32682: LD_STRING setWarehouseGatheringPointXY(
32684: PUSH
32685: LD_VAR 0 3
32689: PUSH
32690: LD_VAR 0 2
32694: ARRAY
32695: PUSH
32696: LD_INT 1
32698: ARRAY
32699: STR
32700: PUSH
32701: LD_STRING ,
32703: STR
32704: PUSH
32705: LD_VAR 0 3
32709: PUSH
32710: LD_VAR 0 2
32714: ARRAY
32715: PUSH
32716: LD_INT 2
32718: ARRAY
32719: STR
32720: PUSH
32721: LD_STRING ,
32723: STR
32724: PUSH
32725: LD_VAR 0 3
32729: PUSH
32730: LD_VAR 0 2
32734: ARRAY
32735: PUSH
32736: LD_INT 3
32738: ARRAY
32739: STR
32740: PUSH
32741: LD_STRING ,
32743: STR
32744: PUSH
32745: LD_VAR 0 3
32749: PUSH
32750: LD_VAR 0 2
32754: ARRAY
32755: PUSH
32756: LD_INT 4
32758: ARRAY
32759: STR
32760: PUSH
32761: LD_STRING )
32763: STR
32764: PPUSH
32765: CALL_OW 559
32769: GO 32679
32771: POP
32772: POP
// end ; end ;
32773: LD_VAR 0 1
32777: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32778: LD_EXP 112
32782: IFFALSE 33467
32784: GO 32786
32786: DISABLE
32787: LD_INT 0
32789: PPUSH
32790: PPUSH
32791: PPUSH
32792: PPUSH
32793: PPUSH
32794: PPUSH
32795: PPUSH
32796: PPUSH
32797: PPUSH
// begin enable ;
32798: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32799: LD_ADDR_VAR 0 3
32803: PUSH
32804: LD_EXP 112
32808: PPUSH
32809: CALL 79001 0 1
32813: ST_TO_ADDR
// if not list then
32814: LD_VAR 0 3
32818: NOT
32819: IFFALSE 32823
// exit ;
32821: GO 33467
// for i := 1 to list do
32823: LD_ADDR_VAR 0 1
32827: PUSH
32828: DOUBLE
32829: LD_INT 1
32831: DEC
32832: ST_TO_ADDR
32833: LD_VAR 0 3
32837: PUSH
32838: FOR_TO
32839: IFFALSE 33465
// begin depot := list [ i ] [ 2 ] ;
32841: LD_ADDR_VAR 0 8
32845: PUSH
32846: LD_VAR 0 3
32850: PUSH
32851: LD_VAR 0 1
32855: ARRAY
32856: PUSH
32857: LD_INT 2
32859: ARRAY
32860: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32861: LD_ADDR_VAR 0 5
32865: PUSH
32866: LD_VAR 0 3
32870: PUSH
32871: LD_VAR 0 1
32875: ARRAY
32876: PUSH
32877: LD_INT 1
32879: ARRAY
32880: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32881: LD_VAR 0 8
32885: PPUSH
32886: CALL_OW 301
32890: PUSH
32891: LD_VAR 0 5
32895: PUSH
32896: LD_VAR 0 8
32900: PPUSH
32901: CALL_OW 255
32905: NONEQUAL
32906: OR
32907: IFFALSE 32936
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32909: LD_ADDR_EXP 112
32913: PUSH
32914: LD_EXP 112
32918: PPUSH
32919: LD_VAR 0 8
32923: PPUSH
32924: LD_INT 0
32926: PPUSH
32927: CALL_OW 1
32931: ST_TO_ADDR
// exit ;
32932: POP
32933: POP
32934: GO 33467
// end ; x := list [ i ] [ 3 ] ;
32936: LD_ADDR_VAR 0 6
32940: PUSH
32941: LD_VAR 0 3
32945: PUSH
32946: LD_VAR 0 1
32950: ARRAY
32951: PUSH
32952: LD_INT 3
32954: ARRAY
32955: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32956: LD_ADDR_VAR 0 7
32960: PUSH
32961: LD_VAR 0 3
32965: PUSH
32966: LD_VAR 0 1
32970: ARRAY
32971: PUSH
32972: LD_INT 4
32974: ARRAY
32975: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32976: LD_ADDR_VAR 0 9
32980: PUSH
32981: LD_VAR 0 6
32985: PPUSH
32986: LD_VAR 0 7
32990: PPUSH
32991: LD_INT 16
32993: PPUSH
32994: CALL 77589 0 3
32998: ST_TO_ADDR
// if not cratesNearbyPoint then
32999: LD_VAR 0 9
33003: NOT
33004: IFFALSE 33010
// exit ;
33006: POP
33007: POP
33008: GO 33467
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33010: LD_ADDR_VAR 0 4
33014: PUSH
33015: LD_INT 22
33017: PUSH
33018: LD_VAR 0 5
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: LD_INT 60
33032: PUSH
33033: EMPTY
33034: LIST
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 91
33042: PUSH
33043: LD_VAR 0 8
33047: PUSH
33048: LD_INT 6
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: PUSH
33059: LD_INT 25
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 25
33071: PUSH
33072: LD_INT 16
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: PPUSH
33090: CALL_OW 69
33094: PUSH
33095: LD_VAR 0 8
33099: PPUSH
33100: CALL_OW 313
33104: PPUSH
33105: LD_INT 3
33107: PUSH
33108: LD_INT 60
33110: PUSH
33111: EMPTY
33112: LIST
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: LD_INT 25
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 25
33133: PUSH
33134: LD_INT 16
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: LIST
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PPUSH
33150: CALL_OW 72
33154: UNION
33155: ST_TO_ADDR
// if tmp then
33156: LD_VAR 0 4
33160: IFFALSE 33240
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33162: LD_ADDR_VAR 0 4
33166: PUSH
33167: LD_VAR 0 4
33171: PPUSH
33172: LD_INT 3
33174: PPUSH
33175: CALL 75558 0 2
33179: ST_TO_ADDR
// for j in tmp do
33180: LD_ADDR_VAR 0 2
33184: PUSH
33185: LD_VAR 0 4
33189: PUSH
33190: FOR_IN
33191: IFFALSE 33234
// begin if IsInUnit ( j ) then
33193: LD_VAR 0 2
33197: PPUSH
33198: CALL_OW 310
33202: IFFALSE 33213
// ComExit ( j ) ;
33204: LD_VAR 0 2
33208: PPUSH
33209: CALL 75641 0 1
// AddComCollect ( j , x , y ) ;
33213: LD_VAR 0 2
33217: PPUSH
33218: LD_VAR 0 6
33222: PPUSH
33223: LD_VAR 0 7
33227: PPUSH
33228: CALL_OW 177
// end ;
33232: GO 33190
33234: POP
33235: POP
// exit ;
33236: POP
33237: POP
33238: GO 33467
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33240: LD_ADDR_VAR 0 4
33244: PUSH
33245: LD_INT 22
33247: PUSH
33248: LD_VAR 0 5
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 91
33259: PUSH
33260: LD_VAR 0 8
33264: PUSH
33265: LD_INT 8
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 34
33278: PUSH
33279: LD_INT 12
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 34
33288: PUSH
33289: LD_INT 51
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 34
33298: PUSH
33299: LD_INT 32
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 34
33308: PUSH
33309: LD_INT 89
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: LIST
33327: PPUSH
33328: CALL_OW 69
33332: ST_TO_ADDR
// if tmp then
33333: LD_VAR 0 4
33337: IFFALSE 33463
// begin for j in tmp do
33339: LD_ADDR_VAR 0 2
33343: PUSH
33344: LD_VAR 0 4
33348: PUSH
33349: FOR_IN
33350: IFFALSE 33461
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33352: LD_VAR 0 2
33356: PPUSH
33357: CALL_OW 262
33361: PUSH
33362: LD_INT 3
33364: EQUAL
33365: PUSH
33366: LD_VAR 0 2
33370: PPUSH
33371: CALL_OW 261
33375: PUSH
33376: LD_INT 20
33378: GREATER
33379: OR
33380: PUSH
33381: LD_VAR 0 2
33385: PPUSH
33386: CALL_OW 314
33390: NOT
33391: AND
33392: PUSH
33393: LD_VAR 0 2
33397: PPUSH
33398: CALL_OW 263
33402: PUSH
33403: LD_INT 1
33405: NONEQUAL
33406: PUSH
33407: LD_VAR 0 2
33411: PPUSH
33412: CALL_OW 311
33416: OR
33417: AND
33418: IFFALSE 33459
// begin ComCollect ( j , x , y ) ;
33420: LD_VAR 0 2
33424: PPUSH
33425: LD_VAR 0 6
33429: PPUSH
33430: LD_VAR 0 7
33434: PPUSH
33435: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33439: LD_VAR 0 2
33443: PPUSH
33444: LD_VAR 0 8
33448: PPUSH
33449: CALL_OW 172
// exit ;
33453: POP
33454: POP
33455: POP
33456: POP
33457: GO 33467
// end ;
33459: GO 33349
33461: POP
33462: POP
// end ; end ;
33463: GO 32838
33465: POP
33466: POP
// end ; end_of_file
33467: PPOPN 9
33469: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33470: LD_VAR 0 1
33474: PUSH
33475: LD_INT 200
33477: DOUBLE
33478: GREATEREQUAL
33479: IFFALSE 33487
33481: LD_INT 299
33483: DOUBLE
33484: LESSEQUAL
33485: IFTRUE 33489
33487: GO 33521
33489: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33490: LD_VAR 0 1
33494: PPUSH
33495: LD_VAR 0 2
33499: PPUSH
33500: LD_VAR 0 3
33504: PPUSH
33505: LD_VAR 0 4
33509: PPUSH
33510: LD_VAR 0 5
33514: PPUSH
33515: CALL 34009 0 5
33519: GO 33598
33521: LD_INT 300
33523: DOUBLE
33524: GREATEREQUAL
33525: IFFALSE 33533
33527: LD_INT 399
33529: DOUBLE
33530: LESSEQUAL
33531: IFTRUE 33535
33533: GO 33597
33535: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33536: LD_VAR 0 1
33540: PPUSH
33541: LD_VAR 0 2
33545: PPUSH
33546: LD_VAR 0 3
33550: PPUSH
33551: LD_VAR 0 4
33555: PPUSH
33556: LD_VAR 0 5
33560: PPUSH
33561: LD_VAR 0 6
33565: PPUSH
33566: LD_VAR 0 7
33570: PPUSH
33571: LD_VAR 0 8
33575: PPUSH
33576: LD_VAR 0 9
33580: PPUSH
33581: LD_VAR 0 10
33585: PPUSH
33586: LD_VAR 0 11
33590: PPUSH
33591: CALL 30171 0 11
33595: GO 33598
33597: POP
// end ;
33598: PPOPN 11
33600: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33601: LD_VAR 0 1
33605: PPUSH
33606: LD_VAR 0 2
33610: PPUSH
33611: LD_VAR 0 3
33615: PPUSH
33616: LD_VAR 0 4
33620: PPUSH
33621: LD_VAR 0 5
33625: PPUSH
33626: CALL 33745 0 5
// end ; end_of_file
33630: PPOPN 5
33632: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33633: LD_INT 0
33635: PPUSH
33636: PPUSH
33637: PPUSH
33638: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33639: LD_VAR 0 1
33643: PPUSH
33644: CALL_OW 264
33648: PUSH
33649: LD_INT 91
33651: EQUAL
33652: IFFALSE 33724
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33654: LD_INT 68
33656: PPUSH
33657: LD_VAR 0 1
33661: PPUSH
33662: CALL_OW 255
33666: PPUSH
33667: CALL_OW 321
33671: PUSH
33672: LD_INT 2
33674: EQUAL
33675: IFFALSE 33687
// eff := 70 else
33677: LD_ADDR_VAR 0 4
33681: PUSH
33682: LD_INT 70
33684: ST_TO_ADDR
33685: GO 33695
// eff := 30 ;
33687: LD_ADDR_VAR 0 4
33691: PUSH
33692: LD_INT 30
33694: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 250
33704: PPUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 251
33714: PPUSH
33715: LD_VAR 0 4
33719: PPUSH
33720: CALL_OW 495
// end ; end ;
33724: LD_VAR 0 2
33728: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33729: LD_INT 0
33731: PPUSH
// end ;
33732: LD_VAR 0 4
33736: RET
// export function SOS_Command ( cmd ) ; begin
33737: LD_INT 0
33739: PPUSH
// end ;
33740: LD_VAR 0 2
33744: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33745: LD_INT 0
33747: PPUSH
// end ;
33748: LD_VAR 0 6
33752: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33753: LD_INT 0
33755: PPUSH
33756: PPUSH
// if not vehicle or not factory then
33757: LD_VAR 0 1
33761: NOT
33762: PUSH
33763: LD_VAR 0 2
33767: NOT
33768: OR
33769: IFFALSE 33773
// exit ;
33771: GO 34004
// if factoryWaypoints >= factory then
33773: LD_EXP 111
33777: PUSH
33778: LD_VAR 0 2
33782: GREATEREQUAL
33783: IFFALSE 34004
// if factoryWaypoints [ factory ] then
33785: LD_EXP 111
33789: PUSH
33790: LD_VAR 0 2
33794: ARRAY
33795: IFFALSE 34004
// begin if GetControl ( vehicle ) = control_manual then
33797: LD_VAR 0 1
33801: PPUSH
33802: CALL_OW 263
33806: PUSH
33807: LD_INT 1
33809: EQUAL
33810: IFFALSE 33891
// begin driver := IsDrivenBy ( vehicle ) ;
33812: LD_ADDR_VAR 0 4
33816: PUSH
33817: LD_VAR 0 1
33821: PPUSH
33822: CALL_OW 311
33826: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33827: LD_VAR 0 4
33831: PPUSH
33832: LD_EXP 111
33836: PUSH
33837: LD_VAR 0 2
33841: ARRAY
33842: PUSH
33843: LD_INT 3
33845: ARRAY
33846: PPUSH
33847: LD_EXP 111
33851: PUSH
33852: LD_VAR 0 2
33856: ARRAY
33857: PUSH
33858: LD_INT 4
33860: ARRAY
33861: PPUSH
33862: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33866: LD_VAR 0 4
33870: PPUSH
33871: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33875: LD_VAR 0 4
33879: PPUSH
33880: LD_VAR 0 2
33884: PPUSH
33885: CALL_OW 180
// end else
33889: GO 34004
// if GetControl ( vehicle ) = control_remote then
33891: LD_VAR 0 1
33895: PPUSH
33896: CALL_OW 263
33900: PUSH
33901: LD_INT 2
33903: EQUAL
33904: IFFALSE 33965
// begin wait ( 0 0$2 ) ;
33906: LD_INT 70
33908: PPUSH
33909: CALL_OW 67
// if Connect ( vehicle ) then
33913: LD_VAR 0 1
33917: PPUSH
33918: CALL 45862 0 1
33922: IFFALSE 33963
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33924: LD_VAR 0 1
33928: PPUSH
33929: LD_EXP 111
33933: PUSH
33934: LD_VAR 0 2
33938: ARRAY
33939: PUSH
33940: LD_INT 3
33942: ARRAY
33943: PPUSH
33944: LD_EXP 111
33948: PUSH
33949: LD_VAR 0 2
33953: ARRAY
33954: PUSH
33955: LD_INT 4
33957: ARRAY
33958: PPUSH
33959: CALL_OW 171
// end else
33963: GO 34004
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33965: LD_VAR 0 1
33969: PPUSH
33970: LD_EXP 111
33974: PUSH
33975: LD_VAR 0 2
33979: ARRAY
33980: PUSH
33981: LD_INT 3
33983: ARRAY
33984: PPUSH
33985: LD_EXP 111
33989: PUSH
33990: LD_VAR 0 2
33994: ARRAY
33995: PUSH
33996: LD_INT 4
33998: ARRAY
33999: PPUSH
34000: CALL_OW 171
// end ; end ;
34004: LD_VAR 0 3
34008: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34009: LD_INT 0
34011: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34012: LD_VAR 0 1
34016: PUSH
34017: LD_INT 250
34019: EQUAL
34020: PUSH
34021: LD_VAR 0 2
34025: PPUSH
34026: CALL_OW 264
34030: PUSH
34031: LD_INT 81
34033: EQUAL
34034: AND
34035: IFFALSE 34056
// MinerPlaceMine ( unit , x , y ) ;
34037: LD_VAR 0 2
34041: PPUSH
34042: LD_VAR 0 4
34046: PPUSH
34047: LD_VAR 0 5
34051: PPUSH
34052: CALL 36441 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34056: LD_VAR 0 1
34060: PUSH
34061: LD_INT 251
34063: EQUAL
34064: PUSH
34065: LD_VAR 0 2
34069: PPUSH
34070: CALL_OW 264
34074: PUSH
34075: LD_INT 81
34077: EQUAL
34078: AND
34079: IFFALSE 34100
// MinerDetonateMine ( unit , x , y ) ;
34081: LD_VAR 0 2
34085: PPUSH
34086: LD_VAR 0 4
34090: PPUSH
34091: LD_VAR 0 5
34095: PPUSH
34096: CALL 36716 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34100: LD_VAR 0 1
34104: PUSH
34105: LD_INT 252
34107: EQUAL
34108: PUSH
34109: LD_VAR 0 2
34113: PPUSH
34114: CALL_OW 264
34118: PUSH
34119: LD_INT 81
34121: EQUAL
34122: AND
34123: IFFALSE 34144
// MinerCreateMinefield ( unit , x , y ) ;
34125: LD_VAR 0 2
34129: PPUSH
34130: LD_VAR 0 4
34134: PPUSH
34135: LD_VAR 0 5
34139: PPUSH
34140: CALL 37133 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34144: LD_VAR 0 1
34148: PUSH
34149: LD_INT 253
34151: EQUAL
34152: PUSH
34153: LD_VAR 0 2
34157: PPUSH
34158: CALL_OW 257
34162: PUSH
34163: LD_INT 5
34165: EQUAL
34166: AND
34167: IFFALSE 34188
// ComBinocular ( unit , x , y ) ;
34169: LD_VAR 0 2
34173: PPUSH
34174: LD_VAR 0 4
34178: PPUSH
34179: LD_VAR 0 5
34183: PPUSH
34184: CALL 37502 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34188: LD_VAR 0 1
34192: PUSH
34193: LD_INT 254
34195: EQUAL
34196: PUSH
34197: LD_VAR 0 2
34201: PPUSH
34202: CALL_OW 264
34206: PUSH
34207: LD_INT 99
34209: EQUAL
34210: AND
34211: PUSH
34212: LD_VAR 0 3
34216: PPUSH
34217: CALL_OW 263
34221: PUSH
34222: LD_INT 3
34224: EQUAL
34225: AND
34226: IFFALSE 34242
// HackDestroyVehicle ( unit , selectedUnit ) ;
34228: LD_VAR 0 2
34232: PPUSH
34233: LD_VAR 0 3
34237: PPUSH
34238: CALL 35805 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34242: LD_VAR 0 1
34246: PUSH
34247: LD_INT 255
34249: EQUAL
34250: PUSH
34251: LD_VAR 0 2
34255: PPUSH
34256: CALL_OW 264
34260: PUSH
34261: LD_INT 14
34263: PUSH
34264: LD_INT 53
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: IN
34271: AND
34272: PUSH
34273: LD_VAR 0 4
34277: PPUSH
34278: LD_VAR 0 5
34282: PPUSH
34283: CALL_OW 488
34287: AND
34288: IFFALSE 34312
// CutTreeXYR ( unit , x , y , 12 ) ;
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 4
34299: PPUSH
34300: LD_VAR 0 5
34304: PPUSH
34305: LD_INT 12
34307: PPUSH
34308: CALL 34375 0 4
// if cmd = 256 then
34312: LD_VAR 0 1
34316: PUSH
34317: LD_INT 256
34319: EQUAL
34320: IFFALSE 34341
// SetFactoryWaypoint ( unit , x , y ) ;
34322: LD_VAR 0 2
34326: PPUSH
34327: LD_VAR 0 4
34331: PPUSH
34332: LD_VAR 0 5
34336: PPUSH
34337: CALL 32159 0 3
// if cmd = 257 then
34341: LD_VAR 0 1
34345: PUSH
34346: LD_INT 257
34348: EQUAL
34349: IFFALSE 34370
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34351: LD_VAR 0 2
34355: PPUSH
34356: LD_VAR 0 4
34360: PPUSH
34361: LD_VAR 0 5
34365: PPUSH
34366: CALL 32521 0 3
// end ;
34370: LD_VAR 0 6
34374: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34375: LD_INT 0
34377: PPUSH
34378: PPUSH
34379: PPUSH
34380: PPUSH
34381: PPUSH
34382: PPUSH
34383: PPUSH
34384: PPUSH
34385: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34386: LD_VAR 0 1
34390: NOT
34391: PUSH
34392: LD_VAR 0 2
34396: PPUSH
34397: LD_VAR 0 3
34401: PPUSH
34402: CALL_OW 488
34406: NOT
34407: OR
34408: PUSH
34409: LD_VAR 0 4
34413: NOT
34414: OR
34415: IFFALSE 34419
// exit ;
34417: GO 34759
// list := [ ] ;
34419: LD_ADDR_VAR 0 13
34423: PUSH
34424: EMPTY
34425: ST_TO_ADDR
// if x - r < 0 then
34426: LD_VAR 0 2
34430: PUSH
34431: LD_VAR 0 4
34435: MINUS
34436: PUSH
34437: LD_INT 0
34439: LESS
34440: IFFALSE 34452
// min_x := 0 else
34442: LD_ADDR_VAR 0 7
34446: PUSH
34447: LD_INT 0
34449: ST_TO_ADDR
34450: GO 34468
// min_x := x - r ;
34452: LD_ADDR_VAR 0 7
34456: PUSH
34457: LD_VAR 0 2
34461: PUSH
34462: LD_VAR 0 4
34466: MINUS
34467: ST_TO_ADDR
// if y - r < 0 then
34468: LD_VAR 0 3
34472: PUSH
34473: LD_VAR 0 4
34477: MINUS
34478: PUSH
34479: LD_INT 0
34481: LESS
34482: IFFALSE 34494
// min_y := 0 else
34484: LD_ADDR_VAR 0 8
34488: PUSH
34489: LD_INT 0
34491: ST_TO_ADDR
34492: GO 34510
// min_y := y - r ;
34494: LD_ADDR_VAR 0 8
34498: PUSH
34499: LD_VAR 0 3
34503: PUSH
34504: LD_VAR 0 4
34508: MINUS
34509: ST_TO_ADDR
// max_x := x + r ;
34510: LD_ADDR_VAR 0 9
34514: PUSH
34515: LD_VAR 0 2
34519: PUSH
34520: LD_VAR 0 4
34524: PLUS
34525: ST_TO_ADDR
// max_y := y + r ;
34526: LD_ADDR_VAR 0 10
34530: PUSH
34531: LD_VAR 0 3
34535: PUSH
34536: LD_VAR 0 4
34540: PLUS
34541: ST_TO_ADDR
// for _x = min_x to max_x do
34542: LD_ADDR_VAR 0 11
34546: PUSH
34547: DOUBLE
34548: LD_VAR 0 7
34552: DEC
34553: ST_TO_ADDR
34554: LD_VAR 0 9
34558: PUSH
34559: FOR_TO
34560: IFFALSE 34677
// for _y = min_y to max_y do
34562: LD_ADDR_VAR 0 12
34566: PUSH
34567: DOUBLE
34568: LD_VAR 0 8
34572: DEC
34573: ST_TO_ADDR
34574: LD_VAR 0 10
34578: PUSH
34579: FOR_TO
34580: IFFALSE 34673
// begin if not ValidHex ( _x , _y ) then
34582: LD_VAR 0 11
34586: PPUSH
34587: LD_VAR 0 12
34591: PPUSH
34592: CALL_OW 488
34596: NOT
34597: IFFALSE 34601
// continue ;
34599: GO 34579
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34601: LD_VAR 0 11
34605: PPUSH
34606: LD_VAR 0 12
34610: PPUSH
34611: CALL_OW 351
34615: PUSH
34616: LD_VAR 0 11
34620: PPUSH
34621: LD_VAR 0 12
34625: PPUSH
34626: CALL_OW 554
34630: AND
34631: IFFALSE 34671
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34633: LD_ADDR_VAR 0 13
34637: PUSH
34638: LD_VAR 0 13
34642: PPUSH
34643: LD_VAR 0 13
34647: PUSH
34648: LD_INT 1
34650: PLUS
34651: PPUSH
34652: LD_VAR 0 11
34656: PUSH
34657: LD_VAR 0 12
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PPUSH
34666: CALL_OW 2
34670: ST_TO_ADDR
// end ;
34671: GO 34579
34673: POP
34674: POP
34675: GO 34559
34677: POP
34678: POP
// if not list then
34679: LD_VAR 0 13
34683: NOT
34684: IFFALSE 34688
// exit ;
34686: GO 34759
// for i in list do
34688: LD_ADDR_VAR 0 6
34692: PUSH
34693: LD_VAR 0 13
34697: PUSH
34698: FOR_IN
34699: IFFALSE 34757
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34701: LD_VAR 0 1
34705: PPUSH
34706: LD_STRING M
34708: PUSH
34709: LD_VAR 0 6
34713: PUSH
34714: LD_INT 1
34716: ARRAY
34717: PUSH
34718: LD_VAR 0 6
34722: PUSH
34723: LD_INT 2
34725: ARRAY
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: PUSH
34748: EMPTY
34749: LIST
34750: PPUSH
34751: CALL_OW 447
34755: GO 34698
34757: POP
34758: POP
// end ;
34759: LD_VAR 0 5
34763: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34764: LD_EXP 114
34768: NOT
34769: IFFALSE 34819
34771: GO 34773
34773: DISABLE
// begin initHack := true ;
34774: LD_ADDR_EXP 114
34778: PUSH
34779: LD_INT 1
34781: ST_TO_ADDR
// hackTanks := [ ] ;
34782: LD_ADDR_EXP 115
34786: PUSH
34787: EMPTY
34788: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34789: LD_ADDR_EXP 116
34793: PUSH
34794: EMPTY
34795: ST_TO_ADDR
// hackLimit := 3 ;
34796: LD_ADDR_EXP 117
34800: PUSH
34801: LD_INT 3
34803: ST_TO_ADDR
// hackDist := 12 ;
34804: LD_ADDR_EXP 118
34808: PUSH
34809: LD_INT 12
34811: ST_TO_ADDR
// hackCounter := [ ] ;
34812: LD_ADDR_EXP 119
34816: PUSH
34817: EMPTY
34818: ST_TO_ADDR
// end ;
34819: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34820: LD_EXP 114
34824: PUSH
34825: LD_INT 34
34827: PUSH
34828: LD_INT 99
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PPUSH
34835: CALL_OW 69
34839: AND
34840: IFFALSE 35093
34842: GO 34844
34844: DISABLE
34845: LD_INT 0
34847: PPUSH
34848: PPUSH
// begin enable ;
34849: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34850: LD_ADDR_VAR 0 1
34854: PUSH
34855: LD_INT 34
34857: PUSH
34858: LD_INT 99
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PPUSH
34865: CALL_OW 69
34869: PUSH
34870: FOR_IN
34871: IFFALSE 35091
// begin if not i in hackTanks then
34873: LD_VAR 0 1
34877: PUSH
34878: LD_EXP 115
34882: IN
34883: NOT
34884: IFFALSE 34967
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34886: LD_ADDR_EXP 115
34890: PUSH
34891: LD_EXP 115
34895: PPUSH
34896: LD_EXP 115
34900: PUSH
34901: LD_INT 1
34903: PLUS
34904: PPUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: CALL_OW 1
34914: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34915: LD_ADDR_EXP 116
34919: PUSH
34920: LD_EXP 116
34924: PPUSH
34925: LD_EXP 116
34929: PUSH
34930: LD_INT 1
34932: PLUS
34933: PPUSH
34934: EMPTY
34935: PPUSH
34936: CALL_OW 1
34940: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34941: LD_ADDR_EXP 119
34945: PUSH
34946: LD_EXP 119
34950: PPUSH
34951: LD_EXP 119
34955: PUSH
34956: LD_INT 1
34958: PLUS
34959: PPUSH
34960: EMPTY
34961: PPUSH
34962: CALL_OW 1
34966: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34967: LD_VAR 0 1
34971: PPUSH
34972: CALL_OW 302
34976: NOT
34977: IFFALSE 34990
// begin HackUnlinkAll ( i ) ;
34979: LD_VAR 0 1
34983: PPUSH
34984: CALL 35096 0 1
// continue ;
34988: GO 34870
// end ; HackCheckCapturedStatus ( i ) ;
34990: LD_VAR 0 1
34994: PPUSH
34995: CALL 35539 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34999: LD_ADDR_VAR 0 2
35003: PUSH
35004: LD_INT 81
35006: PUSH
35007: LD_VAR 0 1
35011: PPUSH
35012: CALL_OW 255
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 33
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 91
35033: PUSH
35034: LD_VAR 0 1
35038: PUSH
35039: LD_EXP 118
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 50
35051: PUSH
35052: EMPTY
35053: LIST
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: PPUSH
35061: CALL_OW 69
35065: ST_TO_ADDR
// if not tmp then
35066: LD_VAR 0 2
35070: NOT
35071: IFFALSE 35075
// continue ;
35073: GO 34870
// HackLink ( i , tmp ) ;
35075: LD_VAR 0 1
35079: PPUSH
35080: LD_VAR 0 2
35084: PPUSH
35085: CALL 35232 0 2
// end ;
35089: GO 34870
35091: POP
35092: POP
// end ;
35093: PPOPN 2
35095: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35096: LD_INT 0
35098: PPUSH
35099: PPUSH
35100: PPUSH
// if not hack in hackTanks then
35101: LD_VAR 0 1
35105: PUSH
35106: LD_EXP 115
35110: IN
35111: NOT
35112: IFFALSE 35116
// exit ;
35114: GO 35227
// index := GetElementIndex ( hackTanks , hack ) ;
35116: LD_ADDR_VAR 0 4
35120: PUSH
35121: LD_EXP 115
35125: PPUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL 42669 0 2
35135: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35136: LD_EXP 116
35140: PUSH
35141: LD_VAR 0 4
35145: ARRAY
35146: IFFALSE 35227
// begin for i in hackTanksCaptured [ index ] do
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: LD_EXP 116
35157: PUSH
35158: LD_VAR 0 4
35162: ARRAY
35163: PUSH
35164: FOR_IN
35165: IFFALSE 35191
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35167: LD_VAR 0 3
35171: PUSH
35172: LD_INT 1
35174: ARRAY
35175: PPUSH
35176: LD_VAR 0 3
35180: PUSH
35181: LD_INT 2
35183: ARRAY
35184: PPUSH
35185: CALL_OW 235
35189: GO 35164
35191: POP
35192: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35193: LD_ADDR_EXP 116
35197: PUSH
35198: LD_EXP 116
35202: PPUSH
35203: LD_VAR 0 4
35207: PPUSH
35208: EMPTY
35209: PPUSH
35210: CALL_OW 1
35214: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35215: LD_VAR 0 1
35219: PPUSH
35220: LD_INT 0
35222: PPUSH
35223: CALL_OW 505
// end ; end ;
35227: LD_VAR 0 2
35231: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35232: LD_INT 0
35234: PPUSH
35235: PPUSH
35236: PPUSH
// if not hack in hackTanks or not vehicles then
35237: LD_VAR 0 1
35241: PUSH
35242: LD_EXP 115
35246: IN
35247: NOT
35248: PUSH
35249: LD_VAR 0 2
35253: NOT
35254: OR
35255: IFFALSE 35259
// exit ;
35257: GO 35534
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35259: LD_ADDR_VAR 0 2
35263: PUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: LD_VAR 0 2
35273: PPUSH
35274: LD_INT 1
35276: PPUSH
35277: LD_INT 1
35279: PPUSH
35280: CALL 43319 0 4
35284: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35285: LD_ADDR_VAR 0 5
35289: PUSH
35290: LD_EXP 115
35294: PPUSH
35295: LD_VAR 0 1
35299: PPUSH
35300: CALL 42669 0 2
35304: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35305: LD_EXP 116
35309: PUSH
35310: LD_VAR 0 5
35314: ARRAY
35315: PUSH
35316: LD_EXP 117
35320: LESS
35321: IFFALSE 35510
// begin for i := 1 to vehicles do
35323: LD_ADDR_VAR 0 4
35327: PUSH
35328: DOUBLE
35329: LD_INT 1
35331: DEC
35332: ST_TO_ADDR
35333: LD_VAR 0 2
35337: PUSH
35338: FOR_TO
35339: IFFALSE 35508
// begin if hackTanksCaptured [ index ] = hackLimit then
35341: LD_EXP 116
35345: PUSH
35346: LD_VAR 0 5
35350: ARRAY
35351: PUSH
35352: LD_EXP 117
35356: EQUAL
35357: IFFALSE 35361
// break ;
35359: GO 35508
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35361: LD_ADDR_EXP 119
35365: PUSH
35366: LD_EXP 119
35370: PPUSH
35371: LD_VAR 0 5
35375: PPUSH
35376: LD_EXP 119
35380: PUSH
35381: LD_VAR 0 5
35385: ARRAY
35386: PUSH
35387: LD_INT 1
35389: PLUS
35390: PPUSH
35391: CALL_OW 1
35395: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35396: LD_ADDR_EXP 116
35400: PUSH
35401: LD_EXP 116
35405: PPUSH
35406: LD_VAR 0 5
35410: PUSH
35411: LD_EXP 116
35415: PUSH
35416: LD_VAR 0 5
35420: ARRAY
35421: PUSH
35422: LD_INT 1
35424: PLUS
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PPUSH
35430: LD_VAR 0 2
35434: PUSH
35435: LD_VAR 0 4
35439: ARRAY
35440: PUSH
35441: LD_VAR 0 2
35445: PUSH
35446: LD_VAR 0 4
35450: ARRAY
35451: PPUSH
35452: CALL_OW 255
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PPUSH
35461: CALL 42884 0 3
35465: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35466: LD_VAR 0 2
35470: PUSH
35471: LD_VAR 0 4
35475: ARRAY
35476: PPUSH
35477: LD_VAR 0 1
35481: PPUSH
35482: CALL_OW 255
35486: PPUSH
35487: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35491: LD_VAR 0 2
35495: PUSH
35496: LD_VAR 0 4
35500: ARRAY
35501: PPUSH
35502: CALL_OW 141
// end ;
35506: GO 35338
35508: POP
35509: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35510: LD_VAR 0 1
35514: PPUSH
35515: LD_EXP 116
35519: PUSH
35520: LD_VAR 0 5
35524: ARRAY
35525: PUSH
35526: LD_INT 0
35528: PLUS
35529: PPUSH
35530: CALL_OW 505
// end ;
35534: LD_VAR 0 3
35538: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35539: LD_INT 0
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
// if not hack in hackTanks then
35545: LD_VAR 0 1
35549: PUSH
35550: LD_EXP 115
35554: IN
35555: NOT
35556: IFFALSE 35560
// exit ;
35558: GO 35800
// index := GetElementIndex ( hackTanks , hack ) ;
35560: LD_ADDR_VAR 0 4
35564: PUSH
35565: LD_EXP 115
35569: PPUSH
35570: LD_VAR 0 1
35574: PPUSH
35575: CALL 42669 0 2
35579: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35580: LD_ADDR_VAR 0 3
35584: PUSH
35585: DOUBLE
35586: LD_EXP 116
35590: PUSH
35591: LD_VAR 0 4
35595: ARRAY
35596: INC
35597: ST_TO_ADDR
35598: LD_INT 1
35600: PUSH
35601: FOR_DOWNTO
35602: IFFALSE 35774
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35604: LD_ADDR_VAR 0 5
35608: PUSH
35609: LD_EXP 116
35613: PUSH
35614: LD_VAR 0 4
35618: ARRAY
35619: PUSH
35620: LD_VAR 0 3
35624: ARRAY
35625: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35626: LD_VAR 0 5
35630: PUSH
35631: LD_INT 1
35633: ARRAY
35634: PPUSH
35635: CALL_OW 302
35639: NOT
35640: PUSH
35641: LD_VAR 0 5
35645: PUSH
35646: LD_INT 1
35648: ARRAY
35649: PPUSH
35650: CALL_OW 255
35654: PUSH
35655: LD_VAR 0 1
35659: PPUSH
35660: CALL_OW 255
35664: NONEQUAL
35665: OR
35666: IFFALSE 35772
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35668: LD_VAR 0 5
35672: PUSH
35673: LD_INT 1
35675: ARRAY
35676: PPUSH
35677: CALL_OW 305
35681: PUSH
35682: LD_VAR 0 5
35686: PUSH
35687: LD_INT 1
35689: ARRAY
35690: PPUSH
35691: CALL_OW 255
35695: PUSH
35696: LD_VAR 0 1
35700: PPUSH
35701: CALL_OW 255
35705: EQUAL
35706: AND
35707: IFFALSE 35731
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35709: LD_VAR 0 5
35713: PUSH
35714: LD_INT 1
35716: ARRAY
35717: PPUSH
35718: LD_VAR 0 5
35722: PUSH
35723: LD_INT 2
35725: ARRAY
35726: PPUSH
35727: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35731: LD_ADDR_EXP 116
35735: PUSH
35736: LD_EXP 116
35740: PPUSH
35741: LD_VAR 0 4
35745: PPUSH
35746: LD_EXP 116
35750: PUSH
35751: LD_VAR 0 4
35755: ARRAY
35756: PPUSH
35757: LD_VAR 0 3
35761: PPUSH
35762: CALL_OW 3
35766: PPUSH
35767: CALL_OW 1
35771: ST_TO_ADDR
// end ; end ;
35772: GO 35601
35774: POP
35775: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35776: LD_VAR 0 1
35780: PPUSH
35781: LD_EXP 116
35785: PUSH
35786: LD_VAR 0 4
35790: ARRAY
35791: PUSH
35792: LD_INT 0
35794: PLUS
35795: PPUSH
35796: CALL_OW 505
// end ;
35800: LD_VAR 0 2
35804: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35805: LD_INT 0
35807: PPUSH
35808: PPUSH
35809: PPUSH
35810: PPUSH
// if not hack in hackTanks then
35811: LD_VAR 0 1
35815: PUSH
35816: LD_EXP 115
35820: IN
35821: NOT
35822: IFFALSE 35826
// exit ;
35824: GO 35911
// index := GetElementIndex ( hackTanks , hack ) ;
35826: LD_ADDR_VAR 0 5
35830: PUSH
35831: LD_EXP 115
35835: PPUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: CALL 42669 0 2
35845: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35846: LD_ADDR_VAR 0 4
35850: PUSH
35851: DOUBLE
35852: LD_INT 1
35854: DEC
35855: ST_TO_ADDR
35856: LD_EXP 116
35860: PUSH
35861: LD_VAR 0 5
35865: ARRAY
35866: PUSH
35867: FOR_TO
35868: IFFALSE 35909
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35870: LD_EXP 116
35874: PUSH
35875: LD_VAR 0 5
35879: ARRAY
35880: PUSH
35881: LD_VAR 0 4
35885: ARRAY
35886: PUSH
35887: LD_INT 1
35889: ARRAY
35890: PUSH
35891: LD_VAR 0 2
35895: EQUAL
35896: IFFALSE 35907
// KillUnit ( vehicle ) ;
35898: LD_VAR 0 2
35902: PPUSH
35903: CALL_OW 66
35907: GO 35867
35909: POP
35910: POP
// end ;
35911: LD_VAR 0 3
35915: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35916: LD_EXP 120
35920: NOT
35921: IFFALSE 35956
35923: GO 35925
35925: DISABLE
// begin initMiner := true ;
35926: LD_ADDR_EXP 120
35930: PUSH
35931: LD_INT 1
35933: ST_TO_ADDR
// minersList := [ ] ;
35934: LD_ADDR_EXP 121
35938: PUSH
35939: EMPTY
35940: ST_TO_ADDR
// minerMinesList := [ ] ;
35941: LD_ADDR_EXP 122
35945: PUSH
35946: EMPTY
35947: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35948: LD_ADDR_EXP 123
35952: PUSH
35953: LD_INT 5
35955: ST_TO_ADDR
// end ;
35956: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35957: LD_EXP 120
35961: PUSH
35962: LD_INT 34
35964: PUSH
35965: LD_INT 81
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PPUSH
35972: CALL_OW 69
35976: AND
35977: IFFALSE 36438
35979: GO 35981
35981: DISABLE
35982: LD_INT 0
35984: PPUSH
35985: PPUSH
35986: PPUSH
35987: PPUSH
// begin enable ;
35988: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35989: LD_ADDR_VAR 0 1
35993: PUSH
35994: LD_INT 34
35996: PUSH
35997: LD_INT 81
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PPUSH
36004: CALL_OW 69
36008: PUSH
36009: FOR_IN
36010: IFFALSE 36082
// begin if not i in minersList then
36012: LD_VAR 0 1
36016: PUSH
36017: LD_EXP 121
36021: IN
36022: NOT
36023: IFFALSE 36080
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36025: LD_ADDR_EXP 121
36029: PUSH
36030: LD_EXP 121
36034: PPUSH
36035: LD_EXP 121
36039: PUSH
36040: LD_INT 1
36042: PLUS
36043: PPUSH
36044: LD_VAR 0 1
36048: PPUSH
36049: CALL_OW 1
36053: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36054: LD_ADDR_EXP 122
36058: PUSH
36059: LD_EXP 122
36063: PPUSH
36064: LD_EXP 122
36068: PUSH
36069: LD_INT 1
36071: PLUS
36072: PPUSH
36073: EMPTY
36074: PPUSH
36075: CALL_OW 1
36079: ST_TO_ADDR
// end end ;
36080: GO 36009
36082: POP
36083: POP
// for i := minerMinesList downto 1 do
36084: LD_ADDR_VAR 0 1
36088: PUSH
36089: DOUBLE
36090: LD_EXP 122
36094: INC
36095: ST_TO_ADDR
36096: LD_INT 1
36098: PUSH
36099: FOR_DOWNTO
36100: IFFALSE 36436
// begin if IsLive ( minersList [ i ] ) then
36102: LD_EXP 121
36106: PUSH
36107: LD_VAR 0 1
36111: ARRAY
36112: PPUSH
36113: CALL_OW 300
36117: IFFALSE 36145
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36119: LD_EXP 121
36123: PUSH
36124: LD_VAR 0 1
36128: ARRAY
36129: PPUSH
36130: LD_EXP 122
36134: PUSH
36135: LD_VAR 0 1
36139: ARRAY
36140: PPUSH
36141: CALL_OW 505
// if not minerMinesList [ i ] then
36145: LD_EXP 122
36149: PUSH
36150: LD_VAR 0 1
36154: ARRAY
36155: NOT
36156: IFFALSE 36160
// continue ;
36158: GO 36099
// for j := minerMinesList [ i ] downto 1 do
36160: LD_ADDR_VAR 0 2
36164: PUSH
36165: DOUBLE
36166: LD_EXP 122
36170: PUSH
36171: LD_VAR 0 1
36175: ARRAY
36176: INC
36177: ST_TO_ADDR
36178: LD_INT 1
36180: PUSH
36181: FOR_DOWNTO
36182: IFFALSE 36432
// begin side := GetSide ( minersList [ i ] ) ;
36184: LD_ADDR_VAR 0 3
36188: PUSH
36189: LD_EXP 121
36193: PUSH
36194: LD_VAR 0 1
36198: ARRAY
36199: PPUSH
36200: CALL_OW 255
36204: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36205: LD_ADDR_VAR 0 4
36209: PUSH
36210: LD_EXP 122
36214: PUSH
36215: LD_VAR 0 1
36219: ARRAY
36220: PUSH
36221: LD_VAR 0 2
36225: ARRAY
36226: PUSH
36227: LD_INT 1
36229: ARRAY
36230: PPUSH
36231: LD_EXP 122
36235: PUSH
36236: LD_VAR 0 1
36240: ARRAY
36241: PUSH
36242: LD_VAR 0 2
36246: ARRAY
36247: PUSH
36248: LD_INT 2
36250: ARRAY
36251: PPUSH
36252: CALL_OW 428
36256: ST_TO_ADDR
// if not tmp then
36257: LD_VAR 0 4
36261: NOT
36262: IFFALSE 36266
// continue ;
36264: GO 36181
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36266: LD_VAR 0 4
36270: PUSH
36271: LD_INT 81
36273: PUSH
36274: LD_VAR 0 3
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PPUSH
36283: CALL_OW 69
36287: IN
36288: PUSH
36289: LD_EXP 122
36293: PUSH
36294: LD_VAR 0 1
36298: ARRAY
36299: PUSH
36300: LD_VAR 0 2
36304: ARRAY
36305: PUSH
36306: LD_INT 1
36308: ARRAY
36309: PPUSH
36310: LD_EXP 122
36314: PUSH
36315: LD_VAR 0 1
36319: ARRAY
36320: PUSH
36321: LD_VAR 0 2
36325: ARRAY
36326: PUSH
36327: LD_INT 2
36329: ARRAY
36330: PPUSH
36331: CALL_OW 458
36335: AND
36336: IFFALSE 36430
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36338: LD_EXP 122
36342: PUSH
36343: LD_VAR 0 1
36347: ARRAY
36348: PUSH
36349: LD_VAR 0 2
36353: ARRAY
36354: PUSH
36355: LD_INT 1
36357: ARRAY
36358: PPUSH
36359: LD_EXP 122
36363: PUSH
36364: LD_VAR 0 1
36368: ARRAY
36369: PUSH
36370: LD_VAR 0 2
36374: ARRAY
36375: PUSH
36376: LD_INT 2
36378: ARRAY
36379: PPUSH
36380: LD_VAR 0 3
36384: PPUSH
36385: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36389: LD_ADDR_EXP 122
36393: PUSH
36394: LD_EXP 122
36398: PPUSH
36399: LD_VAR 0 1
36403: PPUSH
36404: LD_EXP 122
36408: PUSH
36409: LD_VAR 0 1
36413: ARRAY
36414: PPUSH
36415: LD_VAR 0 2
36419: PPUSH
36420: CALL_OW 3
36424: PPUSH
36425: CALL_OW 1
36429: ST_TO_ADDR
// end ; end ;
36430: GO 36181
36432: POP
36433: POP
// end ;
36434: GO 36099
36436: POP
36437: POP
// end ;
36438: PPOPN 4
36440: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36441: LD_INT 0
36443: PPUSH
36444: PPUSH
// result := false ;
36445: LD_ADDR_VAR 0 4
36449: PUSH
36450: LD_INT 0
36452: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36453: LD_VAR 0 1
36457: PPUSH
36458: CALL_OW 264
36462: PUSH
36463: LD_INT 81
36465: EQUAL
36466: NOT
36467: IFFALSE 36471
// exit ;
36469: GO 36711
// index := GetElementIndex ( minersList , unit ) ;
36471: LD_ADDR_VAR 0 5
36475: PUSH
36476: LD_EXP 121
36480: PPUSH
36481: LD_VAR 0 1
36485: PPUSH
36486: CALL 42669 0 2
36490: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36491: LD_EXP 122
36495: PUSH
36496: LD_VAR 0 5
36500: ARRAY
36501: PUSH
36502: LD_EXP 123
36506: GREATEREQUAL
36507: IFFALSE 36511
// exit ;
36509: GO 36711
// ComMoveXY ( unit , x , y ) ;
36511: LD_VAR 0 1
36515: PPUSH
36516: LD_VAR 0 2
36520: PPUSH
36521: LD_VAR 0 3
36525: PPUSH
36526: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36530: LD_INT 35
36532: PPUSH
36533: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36537: LD_VAR 0 1
36541: PPUSH
36542: LD_VAR 0 2
36546: PPUSH
36547: LD_VAR 0 3
36551: PPUSH
36552: CALL 74053 0 3
36556: NOT
36557: PUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 314
36567: AND
36568: IFFALSE 36572
// exit ;
36570: GO 36711
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36572: LD_VAR 0 2
36576: PPUSH
36577: LD_VAR 0 3
36581: PPUSH
36582: CALL_OW 428
36586: PUSH
36587: LD_VAR 0 1
36591: EQUAL
36592: PUSH
36593: LD_VAR 0 1
36597: PPUSH
36598: CALL_OW 314
36602: NOT
36603: AND
36604: IFFALSE 36530
// PlaySoundXY ( x , y , PlantMine ) ;
36606: LD_VAR 0 2
36610: PPUSH
36611: LD_VAR 0 3
36615: PPUSH
36616: LD_STRING PlantMine
36618: PPUSH
36619: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36623: LD_VAR 0 2
36627: PPUSH
36628: LD_VAR 0 3
36632: PPUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: CALL_OW 255
36642: PPUSH
36643: LD_INT 0
36645: PPUSH
36646: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36650: LD_ADDR_EXP 122
36654: PUSH
36655: LD_EXP 122
36659: PPUSH
36660: LD_VAR 0 5
36664: PUSH
36665: LD_EXP 122
36669: PUSH
36670: LD_VAR 0 5
36674: ARRAY
36675: PUSH
36676: LD_INT 1
36678: PLUS
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PPUSH
36684: LD_VAR 0 2
36688: PUSH
36689: LD_VAR 0 3
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PPUSH
36698: CALL 42884 0 3
36702: ST_TO_ADDR
// result := true ;
36703: LD_ADDR_VAR 0 4
36707: PUSH
36708: LD_INT 1
36710: ST_TO_ADDR
// end ;
36711: LD_VAR 0 4
36715: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36716: LD_INT 0
36718: PPUSH
36719: PPUSH
36720: PPUSH
// if not unit in minersList then
36721: LD_VAR 0 1
36725: PUSH
36726: LD_EXP 121
36730: IN
36731: NOT
36732: IFFALSE 36736
// exit ;
36734: GO 37128
// index := GetElementIndex ( minersList , unit ) ;
36736: LD_ADDR_VAR 0 6
36740: PUSH
36741: LD_EXP 121
36745: PPUSH
36746: LD_VAR 0 1
36750: PPUSH
36751: CALL 42669 0 2
36755: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36756: LD_ADDR_VAR 0 5
36760: PUSH
36761: DOUBLE
36762: LD_EXP 122
36766: PUSH
36767: LD_VAR 0 6
36771: ARRAY
36772: INC
36773: ST_TO_ADDR
36774: LD_INT 1
36776: PUSH
36777: FOR_DOWNTO
36778: IFFALSE 36939
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36780: LD_EXP 122
36784: PUSH
36785: LD_VAR 0 6
36789: ARRAY
36790: PUSH
36791: LD_VAR 0 5
36795: ARRAY
36796: PUSH
36797: LD_INT 1
36799: ARRAY
36800: PUSH
36801: LD_VAR 0 2
36805: EQUAL
36806: PUSH
36807: LD_EXP 122
36811: PUSH
36812: LD_VAR 0 6
36816: ARRAY
36817: PUSH
36818: LD_VAR 0 5
36822: ARRAY
36823: PUSH
36824: LD_INT 2
36826: ARRAY
36827: PUSH
36828: LD_VAR 0 3
36832: EQUAL
36833: AND
36834: IFFALSE 36937
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36836: LD_EXP 122
36840: PUSH
36841: LD_VAR 0 6
36845: ARRAY
36846: PUSH
36847: LD_VAR 0 5
36851: ARRAY
36852: PUSH
36853: LD_INT 1
36855: ARRAY
36856: PPUSH
36857: LD_EXP 122
36861: PUSH
36862: LD_VAR 0 6
36866: ARRAY
36867: PUSH
36868: LD_VAR 0 5
36872: ARRAY
36873: PUSH
36874: LD_INT 2
36876: ARRAY
36877: PPUSH
36878: LD_VAR 0 1
36882: PPUSH
36883: CALL_OW 255
36887: PPUSH
36888: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36892: LD_ADDR_EXP 122
36896: PUSH
36897: LD_EXP 122
36901: PPUSH
36902: LD_VAR 0 6
36906: PPUSH
36907: LD_EXP 122
36911: PUSH
36912: LD_VAR 0 6
36916: ARRAY
36917: PPUSH
36918: LD_VAR 0 5
36922: PPUSH
36923: CALL_OW 3
36927: PPUSH
36928: CALL_OW 1
36932: ST_TO_ADDR
// exit ;
36933: POP
36934: POP
36935: GO 37128
// end ; end ;
36937: GO 36777
36939: POP
36940: POP
// for i := minerMinesList [ index ] downto 1 do
36941: LD_ADDR_VAR 0 5
36945: PUSH
36946: DOUBLE
36947: LD_EXP 122
36951: PUSH
36952: LD_VAR 0 6
36956: ARRAY
36957: INC
36958: ST_TO_ADDR
36959: LD_INT 1
36961: PUSH
36962: FOR_DOWNTO
36963: IFFALSE 37126
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36965: LD_EXP 122
36969: PUSH
36970: LD_VAR 0 6
36974: ARRAY
36975: PUSH
36976: LD_VAR 0 5
36980: ARRAY
36981: PUSH
36982: LD_INT 1
36984: ARRAY
36985: PPUSH
36986: LD_EXP 122
36990: PUSH
36991: LD_VAR 0 6
36995: ARRAY
36996: PUSH
36997: LD_VAR 0 5
37001: ARRAY
37002: PUSH
37003: LD_INT 2
37005: ARRAY
37006: PPUSH
37007: LD_VAR 0 2
37011: PPUSH
37012: LD_VAR 0 3
37016: PPUSH
37017: CALL_OW 298
37021: PUSH
37022: LD_INT 6
37024: LESS
37025: IFFALSE 37124
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37027: LD_EXP 122
37031: PUSH
37032: LD_VAR 0 6
37036: ARRAY
37037: PUSH
37038: LD_VAR 0 5
37042: ARRAY
37043: PUSH
37044: LD_INT 1
37046: ARRAY
37047: PPUSH
37048: LD_EXP 122
37052: PUSH
37053: LD_VAR 0 6
37057: ARRAY
37058: PUSH
37059: LD_VAR 0 5
37063: ARRAY
37064: PUSH
37065: LD_INT 2
37067: ARRAY
37068: PPUSH
37069: LD_VAR 0 1
37073: PPUSH
37074: CALL_OW 255
37078: PPUSH
37079: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37083: LD_ADDR_EXP 122
37087: PUSH
37088: LD_EXP 122
37092: PPUSH
37093: LD_VAR 0 6
37097: PPUSH
37098: LD_EXP 122
37102: PUSH
37103: LD_VAR 0 6
37107: ARRAY
37108: PPUSH
37109: LD_VAR 0 5
37113: PPUSH
37114: CALL_OW 3
37118: PPUSH
37119: CALL_OW 1
37123: ST_TO_ADDR
// end ; end ;
37124: GO 36962
37126: POP
37127: POP
// end ;
37128: LD_VAR 0 4
37132: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37133: LD_INT 0
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
37143: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37144: LD_VAR 0 1
37148: PPUSH
37149: CALL_OW 264
37153: PUSH
37154: LD_INT 81
37156: EQUAL
37157: NOT
37158: PUSH
37159: LD_VAR 0 1
37163: PUSH
37164: LD_EXP 121
37168: IN
37169: NOT
37170: OR
37171: IFFALSE 37175
// exit ;
37173: GO 37497
// index := GetElementIndex ( minersList , unit ) ;
37175: LD_ADDR_VAR 0 6
37179: PUSH
37180: LD_EXP 121
37184: PPUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL 42669 0 2
37194: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37195: LD_ADDR_VAR 0 8
37199: PUSH
37200: LD_EXP 123
37204: PUSH
37205: LD_EXP 122
37209: PUSH
37210: LD_VAR 0 6
37214: ARRAY
37215: MINUS
37216: ST_TO_ADDR
// if not minesFreeAmount then
37217: LD_VAR 0 8
37221: NOT
37222: IFFALSE 37226
// exit ;
37224: GO 37497
// tmp := [ ] ;
37226: LD_ADDR_VAR 0 7
37230: PUSH
37231: EMPTY
37232: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37233: LD_ADDR_VAR 0 5
37237: PUSH
37238: DOUBLE
37239: LD_INT 1
37241: DEC
37242: ST_TO_ADDR
37243: LD_VAR 0 8
37247: PUSH
37248: FOR_TO
37249: IFFALSE 37444
// begin _d := rand ( 0 , 5 ) ;
37251: LD_ADDR_VAR 0 11
37255: PUSH
37256: LD_INT 0
37258: PPUSH
37259: LD_INT 5
37261: PPUSH
37262: CALL_OW 12
37266: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37267: LD_ADDR_VAR 0 12
37271: PUSH
37272: LD_INT 2
37274: PPUSH
37275: LD_INT 6
37277: PPUSH
37278: CALL_OW 12
37282: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37283: LD_ADDR_VAR 0 9
37287: PUSH
37288: LD_VAR 0 2
37292: PPUSH
37293: LD_VAR 0 11
37297: PPUSH
37298: LD_VAR 0 12
37302: PPUSH
37303: CALL_OW 272
37307: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37308: LD_ADDR_VAR 0 10
37312: PUSH
37313: LD_VAR 0 3
37317: PPUSH
37318: LD_VAR 0 11
37322: PPUSH
37323: LD_VAR 0 12
37327: PPUSH
37328: CALL_OW 273
37332: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37333: LD_VAR 0 9
37337: PPUSH
37338: LD_VAR 0 10
37342: PPUSH
37343: CALL_OW 488
37347: PUSH
37348: LD_VAR 0 9
37352: PUSH
37353: LD_VAR 0 10
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_VAR 0 7
37366: IN
37367: NOT
37368: AND
37369: PUSH
37370: LD_VAR 0 9
37374: PPUSH
37375: LD_VAR 0 10
37379: PPUSH
37380: CALL_OW 458
37384: NOT
37385: AND
37386: IFFALSE 37428
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37388: LD_ADDR_VAR 0 7
37392: PUSH
37393: LD_VAR 0 7
37397: PPUSH
37398: LD_VAR 0 7
37402: PUSH
37403: LD_INT 1
37405: PLUS
37406: PPUSH
37407: LD_VAR 0 9
37411: PUSH
37412: LD_VAR 0 10
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PPUSH
37421: CALL_OW 1
37425: ST_TO_ADDR
37426: GO 37442
// i := i - 1 ;
37428: LD_ADDR_VAR 0 5
37432: PUSH
37433: LD_VAR 0 5
37437: PUSH
37438: LD_INT 1
37440: MINUS
37441: ST_TO_ADDR
// end ;
37442: GO 37248
37444: POP
37445: POP
// for i in tmp do
37446: LD_ADDR_VAR 0 5
37450: PUSH
37451: LD_VAR 0 7
37455: PUSH
37456: FOR_IN
37457: IFFALSE 37495
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37459: LD_VAR 0 1
37463: PPUSH
37464: LD_VAR 0 5
37468: PUSH
37469: LD_INT 1
37471: ARRAY
37472: PPUSH
37473: LD_VAR 0 5
37477: PUSH
37478: LD_INT 2
37480: ARRAY
37481: PPUSH
37482: CALL 36441 0 3
37486: NOT
37487: IFFALSE 37493
// exit ;
37489: POP
37490: POP
37491: GO 37497
37493: GO 37456
37495: POP
37496: POP
// end ;
37497: LD_VAR 0 4
37501: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37502: LD_INT 0
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
// if not GetClass ( unit ) = class_sniper then
37511: LD_VAR 0 1
37515: PPUSH
37516: CALL_OW 257
37520: PUSH
37521: LD_INT 5
37523: EQUAL
37524: NOT
37525: IFFALSE 37529
// exit ;
37527: GO 37917
// dist := 8 ;
37529: LD_ADDR_VAR 0 5
37533: PUSH
37534: LD_INT 8
37536: ST_TO_ADDR
// viewRange := 12 ;
37537: LD_ADDR_VAR 0 7
37541: PUSH
37542: LD_INT 12
37544: ST_TO_ADDR
// side := GetSide ( unit ) ;
37545: LD_ADDR_VAR 0 6
37549: PUSH
37550: LD_VAR 0 1
37554: PPUSH
37555: CALL_OW 255
37559: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37560: LD_INT 61
37562: PPUSH
37563: LD_VAR 0 6
37567: PPUSH
37568: CALL_OW 321
37572: PUSH
37573: LD_INT 2
37575: EQUAL
37576: IFFALSE 37586
// viewRange := 16 ;
37578: LD_ADDR_VAR 0 7
37582: PUSH
37583: LD_INT 16
37585: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37586: LD_VAR 0 1
37590: PPUSH
37591: LD_VAR 0 2
37595: PPUSH
37596: LD_VAR 0 3
37600: PPUSH
37601: CALL_OW 297
37605: PUSH
37606: LD_VAR 0 5
37610: GREATER
37611: IFFALSE 37690
// begin ComMoveXY ( unit , x , y ) ;
37613: LD_VAR 0 1
37617: PPUSH
37618: LD_VAR 0 2
37622: PPUSH
37623: LD_VAR 0 3
37627: PPUSH
37628: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37632: LD_INT 35
37634: PPUSH
37635: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37639: LD_VAR 0 1
37643: PPUSH
37644: LD_VAR 0 2
37648: PPUSH
37649: LD_VAR 0 3
37653: PPUSH
37654: CALL 74053 0 3
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37917
// until GetDistUnitXY ( unit , x , y ) < dist ;
37663: LD_VAR 0 1
37667: PPUSH
37668: LD_VAR 0 2
37672: PPUSH
37673: LD_VAR 0 3
37677: PPUSH
37678: CALL_OW 297
37682: PUSH
37683: LD_VAR 0 5
37687: LESS
37688: IFFALSE 37632
// end ; ComTurnXY ( unit , x , y ) ;
37690: LD_VAR 0 1
37694: PPUSH
37695: LD_VAR 0 2
37699: PPUSH
37700: LD_VAR 0 3
37704: PPUSH
37705: CALL_OW 118
// wait ( 5 ) ;
37709: LD_INT 5
37711: PPUSH
37712: CALL_OW 67
// _d := GetDir ( unit ) ;
37716: LD_ADDR_VAR 0 10
37720: PUSH
37721: LD_VAR 0 1
37725: PPUSH
37726: CALL_OW 254
37730: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37731: LD_ADDR_VAR 0 8
37735: PUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: CALL_OW 250
37745: PPUSH
37746: LD_VAR 0 10
37750: PPUSH
37751: LD_VAR 0 5
37755: PPUSH
37756: CALL_OW 272
37760: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37761: LD_ADDR_VAR 0 9
37765: PUSH
37766: LD_VAR 0 1
37770: PPUSH
37771: CALL_OW 251
37775: PPUSH
37776: LD_VAR 0 10
37780: PPUSH
37781: LD_VAR 0 5
37785: PPUSH
37786: CALL_OW 273
37790: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37791: LD_VAR 0 8
37795: PPUSH
37796: LD_VAR 0 9
37800: PPUSH
37801: CALL_OW 488
37805: NOT
37806: IFFALSE 37810
// exit ;
37808: GO 37917
// ComAnimCustom ( unit , 1 ) ;
37810: LD_VAR 0 1
37814: PPUSH
37815: LD_INT 1
37817: PPUSH
37818: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37822: LD_VAR 0 8
37826: PPUSH
37827: LD_VAR 0 9
37831: PPUSH
37832: LD_VAR 0 6
37836: PPUSH
37837: LD_VAR 0 7
37841: PPUSH
37842: CALL_OW 330
// repeat wait ( 1 ) ;
37846: LD_INT 1
37848: PPUSH
37849: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37853: LD_VAR 0 1
37857: PPUSH
37858: CALL_OW 316
37862: PUSH
37863: LD_VAR 0 1
37867: PPUSH
37868: CALL_OW 314
37872: OR
37873: PUSH
37874: LD_VAR 0 1
37878: PPUSH
37879: CALL_OW 302
37883: NOT
37884: OR
37885: PUSH
37886: LD_VAR 0 1
37890: PPUSH
37891: CALL_OW 301
37895: OR
37896: IFFALSE 37846
// RemoveSeeing ( _x , _y , side ) ;
37898: LD_VAR 0 8
37902: PPUSH
37903: LD_VAR 0 9
37907: PPUSH
37908: LD_VAR 0 6
37912: PPUSH
37913: CALL_OW 331
// end ; end_of_file
37917: LD_VAR 0 4
37921: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37922: LD_INT 0
37924: PPUSH
37925: PPUSH
// if exist_mode then
37926: LD_VAR 0 2
37930: IFFALSE 37955
// unit := CreateCharacter ( prefix & ident ) else
37932: LD_ADDR_VAR 0 5
37936: PUSH
37937: LD_VAR 0 3
37941: PUSH
37942: LD_VAR 0 1
37946: STR
37947: PPUSH
37948: CALL_OW 34
37952: ST_TO_ADDR
37953: GO 37970
// unit := NewCharacter ( ident ) ;
37955: LD_ADDR_VAR 0 5
37959: PUSH
37960: LD_VAR 0 1
37964: PPUSH
37965: CALL_OW 25
37969: ST_TO_ADDR
// result := unit ;
37970: LD_ADDR_VAR 0 4
37974: PUSH
37975: LD_VAR 0 5
37979: ST_TO_ADDR
// end ;
37980: LD_VAR 0 4
37984: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37985: LD_INT 0
37987: PPUSH
37988: PPUSH
// if not side or not nation then
37989: LD_VAR 0 1
37993: NOT
37994: PUSH
37995: LD_VAR 0 2
37999: NOT
38000: OR
38001: IFFALSE 38005
// exit ;
38003: GO 38773
// case nation of nation_american :
38005: LD_VAR 0 2
38009: PUSH
38010: LD_INT 1
38012: DOUBLE
38013: EQUAL
38014: IFTRUE 38018
38016: GO 38232
38018: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38019: LD_ADDR_VAR 0 4
38023: PUSH
38024: LD_INT 35
38026: PUSH
38027: LD_INT 45
38029: PUSH
38030: LD_INT 46
38032: PUSH
38033: LD_INT 47
38035: PUSH
38036: LD_INT 82
38038: PUSH
38039: LD_INT 83
38041: PUSH
38042: LD_INT 84
38044: PUSH
38045: LD_INT 85
38047: PUSH
38048: LD_INT 86
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 6
38059: PUSH
38060: LD_INT 15
38062: PUSH
38063: LD_INT 16
38065: PUSH
38066: LD_INT 7
38068: PUSH
38069: LD_INT 12
38071: PUSH
38072: LD_INT 13
38074: PUSH
38075: LD_INT 10
38077: PUSH
38078: LD_INT 14
38080: PUSH
38081: LD_INT 20
38083: PUSH
38084: LD_INT 21
38086: PUSH
38087: LD_INT 22
38089: PUSH
38090: LD_INT 25
38092: PUSH
38093: LD_INT 32
38095: PUSH
38096: LD_INT 27
38098: PUSH
38099: LD_INT 36
38101: PUSH
38102: LD_INT 69
38104: PUSH
38105: LD_INT 39
38107: PUSH
38108: LD_INT 34
38110: PUSH
38111: LD_INT 40
38113: PUSH
38114: LD_INT 48
38116: PUSH
38117: LD_INT 49
38119: PUSH
38120: LD_INT 50
38122: PUSH
38123: LD_INT 51
38125: PUSH
38126: LD_INT 52
38128: PUSH
38129: LD_INT 53
38131: PUSH
38132: LD_INT 54
38134: PUSH
38135: LD_INT 55
38137: PUSH
38138: LD_INT 56
38140: PUSH
38141: LD_INT 57
38143: PUSH
38144: LD_INT 58
38146: PUSH
38147: LD_INT 59
38149: PUSH
38150: LD_INT 60
38152: PUSH
38153: LD_INT 61
38155: PUSH
38156: LD_INT 62
38158: PUSH
38159: LD_INT 80
38161: PUSH
38162: LD_INT 82
38164: PUSH
38165: LD_INT 83
38167: PUSH
38168: LD_INT 84
38170: PUSH
38171: LD_INT 85
38173: PUSH
38174: LD_INT 86
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
38230: GO 38697
38232: LD_INT 2
38234: DOUBLE
38235: EQUAL
38236: IFTRUE 38240
38238: GO 38466
38240: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38241: LD_ADDR_VAR 0 4
38245: PUSH
38246: LD_INT 35
38248: PUSH
38249: LD_INT 45
38251: PUSH
38252: LD_INT 46
38254: PUSH
38255: LD_INT 47
38257: PUSH
38258: LD_INT 82
38260: PUSH
38261: LD_INT 83
38263: PUSH
38264: LD_INT 84
38266: PUSH
38267: LD_INT 85
38269: PUSH
38270: LD_INT 87
38272: PUSH
38273: LD_INT 70
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 11
38281: PUSH
38282: LD_INT 3
38284: PUSH
38285: LD_INT 4
38287: PUSH
38288: LD_INT 5
38290: PUSH
38291: LD_INT 6
38293: PUSH
38294: LD_INT 15
38296: PUSH
38297: LD_INT 18
38299: PUSH
38300: LD_INT 7
38302: PUSH
38303: LD_INT 17
38305: PUSH
38306: LD_INT 8
38308: PUSH
38309: LD_INT 20
38311: PUSH
38312: LD_INT 21
38314: PUSH
38315: LD_INT 22
38317: PUSH
38318: LD_INT 72
38320: PUSH
38321: LD_INT 26
38323: PUSH
38324: LD_INT 69
38326: PUSH
38327: LD_INT 39
38329: PUSH
38330: LD_INT 40
38332: PUSH
38333: LD_INT 41
38335: PUSH
38336: LD_INT 42
38338: PUSH
38339: LD_INT 43
38341: PUSH
38342: LD_INT 48
38344: PUSH
38345: LD_INT 49
38347: PUSH
38348: LD_INT 50
38350: PUSH
38351: LD_INT 51
38353: PUSH
38354: LD_INT 52
38356: PUSH
38357: LD_INT 53
38359: PUSH
38360: LD_INT 54
38362: PUSH
38363: LD_INT 55
38365: PUSH
38366: LD_INT 56
38368: PUSH
38369: LD_INT 60
38371: PUSH
38372: LD_INT 61
38374: PUSH
38375: LD_INT 62
38377: PUSH
38378: LD_INT 66
38380: PUSH
38381: LD_INT 67
38383: PUSH
38384: LD_INT 68
38386: PUSH
38387: LD_INT 81
38389: PUSH
38390: LD_INT 82
38392: PUSH
38393: LD_INT 83
38395: PUSH
38396: LD_INT 84
38398: PUSH
38399: LD_INT 85
38401: PUSH
38402: LD_INT 87
38404: PUSH
38405: LD_INT 88
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
38464: GO 38697
38466: LD_INT 3
38468: DOUBLE
38469: EQUAL
38470: IFTRUE 38474
38472: GO 38696
38474: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38475: LD_ADDR_VAR 0 4
38479: PUSH
38480: LD_INT 46
38482: PUSH
38483: LD_INT 47
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 82
38494: PUSH
38495: LD_INT 83
38497: PUSH
38498: LD_INT 84
38500: PUSH
38501: LD_INT 85
38503: PUSH
38504: LD_INT 86
38506: PUSH
38507: LD_INT 11
38509: PUSH
38510: LD_INT 9
38512: PUSH
38513: LD_INT 20
38515: PUSH
38516: LD_INT 19
38518: PUSH
38519: LD_INT 21
38521: PUSH
38522: LD_INT 24
38524: PUSH
38525: LD_INT 22
38527: PUSH
38528: LD_INT 25
38530: PUSH
38531: LD_INT 28
38533: PUSH
38534: LD_INT 29
38536: PUSH
38537: LD_INT 30
38539: PUSH
38540: LD_INT 31
38542: PUSH
38543: LD_INT 37
38545: PUSH
38546: LD_INT 38
38548: PUSH
38549: LD_INT 32
38551: PUSH
38552: LD_INT 27
38554: PUSH
38555: LD_INT 33
38557: PUSH
38558: LD_INT 69
38560: PUSH
38561: LD_INT 39
38563: PUSH
38564: LD_INT 34
38566: PUSH
38567: LD_INT 40
38569: PUSH
38570: LD_INT 71
38572: PUSH
38573: LD_INT 23
38575: PUSH
38576: LD_INT 44
38578: PUSH
38579: LD_INT 48
38581: PUSH
38582: LD_INT 49
38584: PUSH
38585: LD_INT 50
38587: PUSH
38588: LD_INT 51
38590: PUSH
38591: LD_INT 52
38593: PUSH
38594: LD_INT 53
38596: PUSH
38597: LD_INT 54
38599: PUSH
38600: LD_INT 55
38602: PUSH
38603: LD_INT 56
38605: PUSH
38606: LD_INT 57
38608: PUSH
38609: LD_INT 58
38611: PUSH
38612: LD_INT 59
38614: PUSH
38615: LD_INT 63
38617: PUSH
38618: LD_INT 64
38620: PUSH
38621: LD_INT 65
38623: PUSH
38624: LD_INT 82
38626: PUSH
38627: LD_INT 83
38629: PUSH
38630: LD_INT 84
38632: PUSH
38633: LD_INT 85
38635: PUSH
38636: LD_INT 86
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: ST_TO_ADDR
38694: GO 38697
38696: POP
// if state > - 1 and state < 3 then
38697: LD_VAR 0 3
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: GREATER
38706: PUSH
38707: LD_VAR 0 3
38711: PUSH
38712: LD_INT 3
38714: LESS
38715: AND
38716: IFFALSE 38773
// for i in result do
38718: LD_ADDR_VAR 0 5
38722: PUSH
38723: LD_VAR 0 4
38727: PUSH
38728: FOR_IN
38729: IFFALSE 38771
// if GetTech ( i , side ) <> state then
38731: LD_VAR 0 5
38735: PPUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: CALL_OW 321
38745: PUSH
38746: LD_VAR 0 3
38750: NONEQUAL
38751: IFFALSE 38769
// result := result diff i ;
38753: LD_ADDR_VAR 0 4
38757: PUSH
38758: LD_VAR 0 4
38762: PUSH
38763: LD_VAR 0 5
38767: DIFF
38768: ST_TO_ADDR
38769: GO 38728
38771: POP
38772: POP
// end ;
38773: LD_VAR 0 4
38777: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38778: LD_INT 0
38780: PPUSH
38781: PPUSH
38782: PPUSH
// result := true ;
38783: LD_ADDR_VAR 0 3
38787: PUSH
38788: LD_INT 1
38790: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38791: LD_ADDR_VAR 0 5
38795: PUSH
38796: LD_VAR 0 2
38800: PPUSH
38801: CALL_OW 480
38805: ST_TO_ADDR
// if not tmp then
38806: LD_VAR 0 5
38810: NOT
38811: IFFALSE 38815
// exit ;
38813: GO 38864
// for i in tmp do
38815: LD_ADDR_VAR 0 4
38819: PUSH
38820: LD_VAR 0 5
38824: PUSH
38825: FOR_IN
38826: IFFALSE 38862
// if GetTech ( i , side ) <> state_researched then
38828: LD_VAR 0 4
38832: PPUSH
38833: LD_VAR 0 1
38837: PPUSH
38838: CALL_OW 321
38842: PUSH
38843: LD_INT 2
38845: NONEQUAL
38846: IFFALSE 38860
// begin result := false ;
38848: LD_ADDR_VAR 0 3
38852: PUSH
38853: LD_INT 0
38855: ST_TO_ADDR
// exit ;
38856: POP
38857: POP
38858: GO 38864
// end ;
38860: GO 38825
38862: POP
38863: POP
// end ;
38864: LD_VAR 0 3
38868: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38869: LD_INT 0
38871: PPUSH
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38884: LD_VAR 0 1
38888: NOT
38889: PUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 257
38899: PUSH
38900: LD_INT 9
38902: NONEQUAL
38903: OR
38904: IFFALSE 38908
// exit ;
38906: GO 39481
// side := GetSide ( unit ) ;
38908: LD_ADDR_VAR 0 9
38912: PUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL_OW 255
38922: ST_TO_ADDR
// tech_space := tech_spacanom ;
38923: LD_ADDR_VAR 0 12
38927: PUSH
38928: LD_INT 29
38930: ST_TO_ADDR
// tech_time := tech_taurad ;
38931: LD_ADDR_VAR 0 13
38935: PUSH
38936: LD_INT 28
38938: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38939: LD_ADDR_VAR 0 11
38943: PUSH
38944: LD_VAR 0 1
38948: PPUSH
38949: CALL_OW 310
38953: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38954: LD_VAR 0 11
38958: PPUSH
38959: CALL_OW 247
38963: PUSH
38964: LD_INT 2
38966: EQUAL
38967: IFFALSE 38971
// exit ;
38969: GO 39481
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38971: LD_ADDR_VAR 0 8
38975: PUSH
38976: LD_INT 81
38978: PUSH
38979: LD_VAR 0 9
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: LD_INT 21
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PPUSH
39009: CALL_OW 69
39013: ST_TO_ADDR
// if not tmp then
39014: LD_VAR 0 8
39018: NOT
39019: IFFALSE 39023
// exit ;
39021: GO 39481
// if in_unit then
39023: LD_VAR 0 11
39027: IFFALSE 39051
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39029: LD_ADDR_VAR 0 10
39033: PUSH
39034: LD_VAR 0 8
39038: PPUSH
39039: LD_VAR 0 11
39043: PPUSH
39044: CALL_OW 74
39048: ST_TO_ADDR
39049: GO 39071
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39051: LD_ADDR_VAR 0 10
39055: PUSH
39056: LD_VAR 0 8
39060: PPUSH
39061: LD_VAR 0 1
39065: PPUSH
39066: CALL_OW 74
39070: ST_TO_ADDR
// if not enemy then
39071: LD_VAR 0 10
39075: NOT
39076: IFFALSE 39080
// exit ;
39078: GO 39481
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39080: LD_VAR 0 11
39084: PUSH
39085: LD_VAR 0 11
39089: PPUSH
39090: LD_VAR 0 10
39094: PPUSH
39095: CALL_OW 296
39099: PUSH
39100: LD_INT 13
39102: GREATER
39103: AND
39104: PUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: LD_VAR 0 10
39114: PPUSH
39115: CALL_OW 296
39119: PUSH
39120: LD_INT 12
39122: GREATER
39123: OR
39124: IFFALSE 39128
// exit ;
39126: GO 39481
// missile := [ 1 ] ;
39128: LD_ADDR_VAR 0 14
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39139: LD_VAR 0 9
39143: PPUSH
39144: LD_VAR 0 12
39148: PPUSH
39149: CALL_OW 325
39153: IFFALSE 39182
// missile := Replace ( missile , missile + 1 , 2 ) ;
39155: LD_ADDR_VAR 0 14
39159: PUSH
39160: LD_VAR 0 14
39164: PPUSH
39165: LD_VAR 0 14
39169: PUSH
39170: LD_INT 1
39172: PLUS
39173: PPUSH
39174: LD_INT 2
39176: PPUSH
39177: CALL_OW 1
39181: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39182: LD_VAR 0 9
39186: PPUSH
39187: LD_VAR 0 13
39191: PPUSH
39192: CALL_OW 325
39196: PUSH
39197: LD_VAR 0 10
39201: PPUSH
39202: CALL_OW 255
39206: PPUSH
39207: LD_VAR 0 13
39211: PPUSH
39212: CALL_OW 325
39216: NOT
39217: AND
39218: IFFALSE 39247
// missile := Replace ( missile , missile + 1 , 3 ) ;
39220: LD_ADDR_VAR 0 14
39224: PUSH
39225: LD_VAR 0 14
39229: PPUSH
39230: LD_VAR 0 14
39234: PUSH
39235: LD_INT 1
39237: PLUS
39238: PPUSH
39239: LD_INT 3
39241: PPUSH
39242: CALL_OW 1
39246: ST_TO_ADDR
// if missile < 2 then
39247: LD_VAR 0 14
39251: PUSH
39252: LD_INT 2
39254: LESS
39255: IFFALSE 39259
// exit ;
39257: GO 39481
// x := GetX ( enemy ) ;
39259: LD_ADDR_VAR 0 4
39263: PUSH
39264: LD_VAR 0 10
39268: PPUSH
39269: CALL_OW 250
39273: ST_TO_ADDR
// y := GetY ( enemy ) ;
39274: LD_ADDR_VAR 0 5
39278: PUSH
39279: LD_VAR 0 10
39283: PPUSH
39284: CALL_OW 251
39288: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39289: LD_ADDR_VAR 0 6
39293: PUSH
39294: LD_VAR 0 4
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PPUSH
39303: LD_INT 1
39305: PPUSH
39306: CALL_OW 12
39310: PLUS
39311: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39312: LD_ADDR_VAR 0 7
39316: PUSH
39317: LD_VAR 0 5
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PPUSH
39326: LD_INT 1
39328: PPUSH
39329: CALL_OW 12
39333: PLUS
39334: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39335: LD_VAR 0 6
39339: PPUSH
39340: LD_VAR 0 7
39344: PPUSH
39345: CALL_OW 488
39349: NOT
39350: IFFALSE 39372
// begin _x := x ;
39352: LD_ADDR_VAR 0 6
39356: PUSH
39357: LD_VAR 0 4
39361: ST_TO_ADDR
// _y := y ;
39362: LD_ADDR_VAR 0 7
39366: PUSH
39367: LD_VAR 0 5
39371: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39372: LD_ADDR_VAR 0 3
39376: PUSH
39377: LD_INT 1
39379: PPUSH
39380: LD_VAR 0 14
39384: PPUSH
39385: CALL_OW 12
39389: ST_TO_ADDR
// case i of 1 :
39390: LD_VAR 0 3
39394: PUSH
39395: LD_INT 1
39397: DOUBLE
39398: EQUAL
39399: IFTRUE 39403
39401: GO 39420
39403: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39404: LD_VAR 0 1
39408: PPUSH
39409: LD_VAR 0 10
39413: PPUSH
39414: CALL_OW 115
39418: GO 39481
39420: LD_INT 2
39422: DOUBLE
39423: EQUAL
39424: IFTRUE 39428
39426: GO 39450
39428: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39429: LD_VAR 0 1
39433: PPUSH
39434: LD_VAR 0 6
39438: PPUSH
39439: LD_VAR 0 7
39443: PPUSH
39444: CALL_OW 153
39448: GO 39481
39450: LD_INT 3
39452: DOUBLE
39453: EQUAL
39454: IFTRUE 39458
39456: GO 39480
39458: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39459: LD_VAR 0 1
39463: PPUSH
39464: LD_VAR 0 6
39468: PPUSH
39469: LD_VAR 0 7
39473: PPUSH
39474: CALL_OW 154
39478: GO 39481
39480: POP
// end ;
39481: LD_VAR 0 2
39485: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39486: LD_INT 0
39488: PPUSH
39489: PPUSH
39490: PPUSH
39491: PPUSH
39492: PPUSH
39493: PPUSH
// if not unit or not building then
39494: LD_VAR 0 1
39498: NOT
39499: PUSH
39500: LD_VAR 0 2
39504: NOT
39505: OR
39506: IFFALSE 39510
// exit ;
39508: GO 39668
// x := GetX ( building ) ;
39510: LD_ADDR_VAR 0 5
39514: PUSH
39515: LD_VAR 0 2
39519: PPUSH
39520: CALL_OW 250
39524: ST_TO_ADDR
// y := GetY ( building ) ;
39525: LD_ADDR_VAR 0 6
39529: PUSH
39530: LD_VAR 0 2
39534: PPUSH
39535: CALL_OW 251
39539: ST_TO_ADDR
// for i = 0 to 5 do
39540: LD_ADDR_VAR 0 4
39544: PUSH
39545: DOUBLE
39546: LD_INT 0
39548: DEC
39549: ST_TO_ADDR
39550: LD_INT 5
39552: PUSH
39553: FOR_TO
39554: IFFALSE 39666
// begin _x := ShiftX ( x , i , 3 ) ;
39556: LD_ADDR_VAR 0 7
39560: PUSH
39561: LD_VAR 0 5
39565: PPUSH
39566: LD_VAR 0 4
39570: PPUSH
39571: LD_INT 3
39573: PPUSH
39574: CALL_OW 272
39578: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39579: LD_ADDR_VAR 0 8
39583: PUSH
39584: LD_VAR 0 6
39588: PPUSH
39589: LD_VAR 0 4
39593: PPUSH
39594: LD_INT 3
39596: PPUSH
39597: CALL_OW 273
39601: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39602: LD_VAR 0 7
39606: PPUSH
39607: LD_VAR 0 8
39611: PPUSH
39612: CALL_OW 488
39616: NOT
39617: IFFALSE 39621
// continue ;
39619: GO 39553
// if HexInfo ( _x , _y ) = 0 then
39621: LD_VAR 0 7
39625: PPUSH
39626: LD_VAR 0 8
39630: PPUSH
39631: CALL_OW 428
39635: PUSH
39636: LD_INT 0
39638: EQUAL
39639: IFFALSE 39664
// begin ComMoveXY ( unit , _x , _y ) ;
39641: LD_VAR 0 1
39645: PPUSH
39646: LD_VAR 0 7
39650: PPUSH
39651: LD_VAR 0 8
39655: PPUSH
39656: CALL_OW 111
// exit ;
39660: POP
39661: POP
39662: GO 39668
// end ; end ;
39664: GO 39553
39666: POP
39667: POP
// end ;
39668: LD_VAR 0 3
39672: RET
// export function ScanBase ( side , base_area ) ; begin
39673: LD_INT 0
39675: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39676: LD_ADDR_VAR 0 3
39680: PUSH
39681: LD_VAR 0 2
39685: PPUSH
39686: LD_INT 81
39688: PUSH
39689: LD_VAR 0 1
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PPUSH
39698: CALL_OW 70
39702: ST_TO_ADDR
// end ;
39703: LD_VAR 0 3
39707: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39708: LD_INT 0
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
// result := false ;
39714: LD_ADDR_VAR 0 2
39718: PUSH
39719: LD_INT 0
39721: ST_TO_ADDR
// side := GetSide ( unit ) ;
39722: LD_ADDR_VAR 0 3
39726: PUSH
39727: LD_VAR 0 1
39731: PPUSH
39732: CALL_OW 255
39736: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39737: LD_ADDR_VAR 0 4
39741: PUSH
39742: LD_VAR 0 1
39746: PPUSH
39747: CALL_OW 248
39751: ST_TO_ADDR
// case nat of 1 :
39752: LD_VAR 0 4
39756: PUSH
39757: LD_INT 1
39759: DOUBLE
39760: EQUAL
39761: IFTRUE 39765
39763: GO 39776
39765: POP
// tech := tech_lassight ; 2 :
39766: LD_ADDR_VAR 0 5
39770: PUSH
39771: LD_INT 12
39773: ST_TO_ADDR
39774: GO 39815
39776: LD_INT 2
39778: DOUBLE
39779: EQUAL
39780: IFTRUE 39784
39782: GO 39795
39784: POP
// tech := tech_mortar ; 3 :
39785: LD_ADDR_VAR 0 5
39789: PUSH
39790: LD_INT 41
39792: ST_TO_ADDR
39793: GO 39815
39795: LD_INT 3
39797: DOUBLE
39798: EQUAL
39799: IFTRUE 39803
39801: GO 39814
39803: POP
// tech := tech_bazooka ; end ;
39804: LD_ADDR_VAR 0 5
39808: PUSH
39809: LD_INT 44
39811: ST_TO_ADDR
39812: GO 39815
39814: POP
// if Researched ( side , tech ) then
39815: LD_VAR 0 3
39819: PPUSH
39820: LD_VAR 0 5
39824: PPUSH
39825: CALL_OW 325
39829: IFFALSE 39856
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39831: LD_ADDR_VAR 0 2
39835: PUSH
39836: LD_INT 5
39838: PUSH
39839: LD_INT 8
39841: PUSH
39842: LD_INT 9
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: LIST
39849: PUSH
39850: LD_VAR 0 4
39854: ARRAY
39855: ST_TO_ADDR
// end ;
39856: LD_VAR 0 2
39860: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39861: LD_INT 0
39863: PPUSH
39864: PPUSH
39865: PPUSH
// if not mines then
39866: LD_VAR 0 2
39870: NOT
39871: IFFALSE 39875
// exit ;
39873: GO 40019
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39875: LD_ADDR_VAR 0 5
39879: PUSH
39880: LD_INT 81
39882: PUSH
39883: LD_VAR 0 1
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 3
39894: PUSH
39895: LD_INT 21
39897: PUSH
39898: LD_INT 3
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PPUSH
39913: CALL_OW 69
39917: ST_TO_ADDR
// for i in mines do
39918: LD_ADDR_VAR 0 4
39922: PUSH
39923: LD_VAR 0 2
39927: PUSH
39928: FOR_IN
39929: IFFALSE 40017
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39931: LD_VAR 0 4
39935: PUSH
39936: LD_INT 1
39938: ARRAY
39939: PPUSH
39940: LD_VAR 0 4
39944: PUSH
39945: LD_INT 2
39947: ARRAY
39948: PPUSH
39949: CALL_OW 458
39953: NOT
39954: IFFALSE 39958
// continue ;
39956: GO 39928
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39958: LD_VAR 0 4
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PPUSH
39967: LD_VAR 0 4
39971: PUSH
39972: LD_INT 2
39974: ARRAY
39975: PPUSH
39976: CALL_OW 428
39980: PUSH
39981: LD_VAR 0 5
39985: IN
39986: IFFALSE 40015
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39988: LD_VAR 0 4
39992: PUSH
39993: LD_INT 1
39995: ARRAY
39996: PPUSH
39997: LD_VAR 0 4
40001: PUSH
40002: LD_INT 2
40004: ARRAY
40005: PPUSH
40006: LD_VAR 0 1
40010: PPUSH
40011: CALL_OW 456
// end ;
40015: GO 39928
40017: POP
40018: POP
// end ;
40019: LD_VAR 0 3
40023: RET
// export function Count ( array ) ; begin
40024: LD_INT 0
40026: PPUSH
// result := array + 0 ;
40027: LD_ADDR_VAR 0 2
40031: PUSH
40032: LD_VAR 0 1
40036: PUSH
40037: LD_INT 0
40039: PLUS
40040: ST_TO_ADDR
// end ;
40041: LD_VAR 0 2
40045: RET
// export function IsEmpty ( building ) ; begin
40046: LD_INT 0
40048: PPUSH
// if not building then
40049: LD_VAR 0 1
40053: NOT
40054: IFFALSE 40058
// exit ;
40056: GO 40101
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40058: LD_ADDR_VAR 0 2
40062: PUSH
40063: LD_VAR 0 1
40067: PUSH
40068: LD_INT 22
40070: PUSH
40071: LD_VAR 0 1
40075: PPUSH
40076: CALL_OW 255
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 58
40087: PUSH
40088: EMPTY
40089: LIST
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PPUSH
40095: CALL_OW 69
40099: IN
40100: ST_TO_ADDR
// end ;
40101: LD_VAR 0 2
40105: RET
// export function IsNotFull ( building ) ; var places ; begin
40106: LD_INT 0
40108: PPUSH
40109: PPUSH
// if not building then
40110: LD_VAR 0 1
40114: NOT
40115: IFFALSE 40119
// exit ;
40117: GO 40147
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40119: LD_ADDR_VAR 0 2
40123: PUSH
40124: LD_VAR 0 1
40128: PPUSH
40129: LD_INT 3
40131: PUSH
40132: LD_INT 62
40134: PUSH
40135: EMPTY
40136: LIST
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PPUSH
40142: CALL_OW 72
40146: ST_TO_ADDR
// end ;
40147: LD_VAR 0 2
40151: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40152: LD_INT 0
40154: PPUSH
40155: PPUSH
40156: PPUSH
40157: PPUSH
// tmp := [ ] ;
40158: LD_ADDR_VAR 0 3
40162: PUSH
40163: EMPTY
40164: ST_TO_ADDR
// list := [ ] ;
40165: LD_ADDR_VAR 0 5
40169: PUSH
40170: EMPTY
40171: ST_TO_ADDR
// for i = 16 to 25 do
40172: LD_ADDR_VAR 0 4
40176: PUSH
40177: DOUBLE
40178: LD_INT 16
40180: DEC
40181: ST_TO_ADDR
40182: LD_INT 25
40184: PUSH
40185: FOR_TO
40186: IFFALSE 40259
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40188: LD_ADDR_VAR 0 3
40192: PUSH
40193: LD_VAR 0 3
40197: PUSH
40198: LD_INT 22
40200: PUSH
40201: LD_VAR 0 1
40205: PPUSH
40206: CALL_OW 255
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 91
40217: PUSH
40218: LD_VAR 0 1
40222: PUSH
40223: LD_INT 6
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 30
40233: PUSH
40234: LD_VAR 0 4
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: PPUSH
40251: CALL_OW 69
40255: ADD
40256: ST_TO_ADDR
40257: GO 40185
40259: POP
40260: POP
// for i = 1 to tmp do
40261: LD_ADDR_VAR 0 4
40265: PUSH
40266: DOUBLE
40267: LD_INT 1
40269: DEC
40270: ST_TO_ADDR
40271: LD_VAR 0 3
40275: PUSH
40276: FOR_TO
40277: IFFALSE 40365
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40279: LD_ADDR_VAR 0 5
40283: PUSH
40284: LD_VAR 0 5
40288: PUSH
40289: LD_VAR 0 3
40293: PUSH
40294: LD_VAR 0 4
40298: ARRAY
40299: PPUSH
40300: CALL_OW 266
40304: PUSH
40305: LD_VAR 0 3
40309: PUSH
40310: LD_VAR 0 4
40314: ARRAY
40315: PPUSH
40316: CALL_OW 250
40320: PUSH
40321: LD_VAR 0 3
40325: PUSH
40326: LD_VAR 0 4
40330: ARRAY
40331: PPUSH
40332: CALL_OW 251
40336: PUSH
40337: LD_VAR 0 3
40341: PUSH
40342: LD_VAR 0 4
40346: ARRAY
40347: PPUSH
40348: CALL_OW 254
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: PUSH
40359: EMPTY
40360: LIST
40361: ADD
40362: ST_TO_ADDR
40363: GO 40276
40365: POP
40366: POP
// result := list ;
40367: LD_ADDR_VAR 0 2
40371: PUSH
40372: LD_VAR 0 5
40376: ST_TO_ADDR
// end ;
40377: LD_VAR 0 2
40381: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40382: LD_INT 0
40384: PPUSH
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
40389: PPUSH
40390: PPUSH
// if not factory then
40391: LD_VAR 0 1
40395: NOT
40396: IFFALSE 40400
// exit ;
40398: GO 40993
// if control = control_apeman then
40400: LD_VAR 0 4
40404: PUSH
40405: LD_INT 5
40407: EQUAL
40408: IFFALSE 40517
// begin tmp := UnitsInside ( factory ) ;
40410: LD_ADDR_VAR 0 8
40414: PUSH
40415: LD_VAR 0 1
40419: PPUSH
40420: CALL_OW 313
40424: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40425: LD_VAR 0 8
40429: PPUSH
40430: LD_INT 25
40432: PUSH
40433: LD_INT 12
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PPUSH
40440: CALL_OW 72
40444: NOT
40445: IFFALSE 40455
// control := control_manual ;
40447: LD_ADDR_VAR 0 4
40451: PUSH
40452: LD_INT 1
40454: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40455: LD_ADDR_VAR 0 8
40459: PUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL 40152 0 1
40469: ST_TO_ADDR
// if tmp then
40470: LD_VAR 0 8
40474: IFFALSE 40517
// begin for i in tmp do
40476: LD_ADDR_VAR 0 7
40480: PUSH
40481: LD_VAR 0 8
40485: PUSH
40486: FOR_IN
40487: IFFALSE 40515
// if i [ 1 ] = b_ext_radio then
40489: LD_VAR 0 7
40493: PUSH
40494: LD_INT 1
40496: ARRAY
40497: PUSH
40498: LD_INT 22
40500: EQUAL
40501: IFFALSE 40513
// begin control := control_remote ;
40503: LD_ADDR_VAR 0 4
40507: PUSH
40508: LD_INT 2
40510: ST_TO_ADDR
// break ;
40511: GO 40515
// end ;
40513: GO 40486
40515: POP
40516: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40517: LD_VAR 0 1
40521: PPUSH
40522: LD_VAR 0 2
40526: PPUSH
40527: LD_VAR 0 3
40531: PPUSH
40532: LD_VAR 0 4
40536: PPUSH
40537: LD_VAR 0 5
40541: PPUSH
40542: CALL_OW 448
40546: IFFALSE 40581
// begin result := [ chassis , engine , control , weapon ] ;
40548: LD_ADDR_VAR 0 6
40552: PUSH
40553: LD_VAR 0 2
40557: PUSH
40558: LD_VAR 0 3
40562: PUSH
40563: LD_VAR 0 4
40567: PUSH
40568: LD_VAR 0 5
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: ST_TO_ADDR
// exit ;
40579: GO 40993
// end ; _chassis := AvailableChassisList ( factory ) ;
40581: LD_ADDR_VAR 0 9
40585: PUSH
40586: LD_VAR 0 1
40590: PPUSH
40591: CALL_OW 475
40595: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40596: LD_ADDR_VAR 0 11
40600: PUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL_OW 476
40610: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40611: LD_ADDR_VAR 0 12
40615: PUSH
40616: LD_VAR 0 1
40620: PPUSH
40621: CALL_OW 477
40625: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40626: LD_ADDR_VAR 0 10
40630: PUSH
40631: LD_VAR 0 1
40635: PPUSH
40636: CALL_OW 478
40640: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40641: LD_VAR 0 9
40645: NOT
40646: PUSH
40647: LD_VAR 0 11
40651: NOT
40652: OR
40653: PUSH
40654: LD_VAR 0 12
40658: NOT
40659: OR
40660: PUSH
40661: LD_VAR 0 10
40665: NOT
40666: OR
40667: IFFALSE 40702
// begin result := [ chassis , engine , control , weapon ] ;
40669: LD_ADDR_VAR 0 6
40673: PUSH
40674: LD_VAR 0 2
40678: PUSH
40679: LD_VAR 0 3
40683: PUSH
40684: LD_VAR 0 4
40688: PUSH
40689: LD_VAR 0 5
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
// exit ;
40700: GO 40993
// end ; if not chassis in _chassis then
40702: LD_VAR 0 2
40706: PUSH
40707: LD_VAR 0 9
40711: IN
40712: NOT
40713: IFFALSE 40739
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40715: LD_ADDR_VAR 0 2
40719: PUSH
40720: LD_VAR 0 9
40724: PUSH
40725: LD_INT 1
40727: PPUSH
40728: LD_VAR 0 9
40732: PPUSH
40733: CALL_OW 12
40737: ARRAY
40738: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40739: LD_VAR 0 2
40743: PPUSH
40744: LD_VAR 0 3
40748: PPUSH
40749: CALL 40998 0 2
40753: NOT
40754: IFFALSE 40813
// repeat engine := _engine [ 1 ] ;
40756: LD_ADDR_VAR 0 3
40760: PUSH
40761: LD_VAR 0 11
40765: PUSH
40766: LD_INT 1
40768: ARRAY
40769: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40770: LD_ADDR_VAR 0 11
40774: PUSH
40775: LD_VAR 0 11
40779: PPUSH
40780: LD_INT 1
40782: PPUSH
40783: CALL_OW 3
40787: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40788: LD_VAR 0 2
40792: PPUSH
40793: LD_VAR 0 3
40797: PPUSH
40798: CALL 40998 0 2
40802: PUSH
40803: LD_VAR 0 11
40807: PUSH
40808: EMPTY
40809: EQUAL
40810: OR
40811: IFFALSE 40756
// if not control in _control then
40813: LD_VAR 0 4
40817: PUSH
40818: LD_VAR 0 12
40822: IN
40823: NOT
40824: IFFALSE 40850
// control := _control [ rand ( 1 , _control ) ] ;
40826: LD_ADDR_VAR 0 4
40830: PUSH
40831: LD_VAR 0 12
40835: PUSH
40836: LD_INT 1
40838: PPUSH
40839: LD_VAR 0 12
40843: PPUSH
40844: CALL_OW 12
40848: ARRAY
40849: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40850: LD_VAR 0 2
40854: PPUSH
40855: LD_VAR 0 5
40859: PPUSH
40860: CALL 41218 0 2
40864: NOT
40865: IFFALSE 40924
// repeat weapon := _weapon [ 1 ] ;
40867: LD_ADDR_VAR 0 5
40871: PUSH
40872: LD_VAR 0 10
40876: PUSH
40877: LD_INT 1
40879: ARRAY
40880: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40881: LD_ADDR_VAR 0 10
40885: PUSH
40886: LD_VAR 0 10
40890: PPUSH
40891: LD_INT 1
40893: PPUSH
40894: CALL_OW 3
40898: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40899: LD_VAR 0 2
40903: PPUSH
40904: LD_VAR 0 5
40908: PPUSH
40909: CALL 41218 0 2
40913: PUSH
40914: LD_VAR 0 10
40918: PUSH
40919: EMPTY
40920: EQUAL
40921: OR
40922: IFFALSE 40867
// result := [ ] ;
40924: LD_ADDR_VAR 0 6
40928: PUSH
40929: EMPTY
40930: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40931: LD_VAR 0 1
40935: PPUSH
40936: LD_VAR 0 2
40940: PPUSH
40941: LD_VAR 0 3
40945: PPUSH
40946: LD_VAR 0 4
40950: PPUSH
40951: LD_VAR 0 5
40955: PPUSH
40956: CALL_OW 448
40960: IFFALSE 40993
// result := [ chassis , engine , control , weapon ] ;
40962: LD_ADDR_VAR 0 6
40966: PUSH
40967: LD_VAR 0 2
40971: PUSH
40972: LD_VAR 0 3
40976: PUSH
40977: LD_VAR 0 4
40981: PUSH
40982: LD_VAR 0 5
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: ST_TO_ADDR
// end ;
40993: LD_VAR 0 6
40997: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40998: LD_INT 0
41000: PPUSH
// if not chassis or not engine then
41001: LD_VAR 0 1
41005: NOT
41006: PUSH
41007: LD_VAR 0 2
41011: NOT
41012: OR
41013: IFFALSE 41017
// exit ;
41015: GO 41213
// case engine of engine_solar :
41017: LD_VAR 0 2
41021: PUSH
41022: LD_INT 2
41024: DOUBLE
41025: EQUAL
41026: IFTRUE 41030
41028: GO 41068
41030: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41031: LD_ADDR_VAR 0 3
41035: PUSH
41036: LD_INT 11
41038: PUSH
41039: LD_INT 12
41041: PUSH
41042: LD_INT 13
41044: PUSH
41045: LD_INT 14
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: ST_TO_ADDR
41066: GO 41197
41068: LD_INT 1
41070: DOUBLE
41071: EQUAL
41072: IFTRUE 41076
41074: GO 41138
41076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41077: LD_ADDR_VAR 0 3
41081: PUSH
41082: LD_INT 11
41084: PUSH
41085: LD_INT 12
41087: PUSH
41088: LD_INT 13
41090: PUSH
41091: LD_INT 14
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: LD_INT 3
41102: PUSH
41103: LD_INT 4
41105: PUSH
41106: LD_INT 5
41108: PUSH
41109: LD_INT 21
41111: PUSH
41112: LD_INT 23
41114: PUSH
41115: LD_INT 22
41117: PUSH
41118: LD_INT 24
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: ST_TO_ADDR
41136: GO 41197
41138: LD_INT 3
41140: DOUBLE
41141: EQUAL
41142: IFTRUE 41146
41144: GO 41196
41146: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41147: LD_ADDR_VAR 0 3
41151: PUSH
41152: LD_INT 13
41154: PUSH
41155: LD_INT 14
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: LD_INT 3
41163: PUSH
41164: LD_INT 4
41166: PUSH
41167: LD_INT 5
41169: PUSH
41170: LD_INT 21
41172: PUSH
41173: LD_INT 22
41175: PUSH
41176: LD_INT 23
41178: PUSH
41179: LD_INT 24
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: ST_TO_ADDR
41194: GO 41197
41196: POP
// result := ( chassis in result ) ;
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: LD_VAR 0 1
41206: PUSH
41207: LD_VAR 0 3
41211: IN
41212: ST_TO_ADDR
// end ;
41213: LD_VAR 0 3
41217: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41218: LD_INT 0
41220: PPUSH
// if not chassis or not weapon then
41221: LD_VAR 0 1
41225: NOT
41226: PUSH
41227: LD_VAR 0 2
41231: NOT
41232: OR
41233: IFFALSE 41237
// exit ;
41235: GO 42297
// case weapon of us_machine_gun :
41237: LD_VAR 0 2
41241: PUSH
41242: LD_INT 2
41244: DOUBLE
41245: EQUAL
41246: IFTRUE 41250
41248: GO 41280
41250: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41251: LD_ADDR_VAR 0 3
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 3
41264: PUSH
41265: LD_INT 4
41267: PUSH
41268: LD_INT 5
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: ST_TO_ADDR
41278: GO 42281
41280: LD_INT 3
41282: DOUBLE
41283: EQUAL
41284: IFTRUE 41288
41286: GO 41318
41288: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41289: LD_ADDR_VAR 0 3
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: LD_INT 3
41302: PUSH
41303: LD_INT 4
41305: PUSH
41306: LD_INT 5
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: ST_TO_ADDR
41316: GO 42281
41318: LD_INT 11
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41326
41324: GO 41356
41326: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41327: LD_ADDR_VAR 0 3
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: LD_INT 3
41340: PUSH
41341: LD_INT 4
41343: PUSH
41344: LD_INT 5
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: ST_TO_ADDR
41354: GO 42281
41356: LD_INT 4
41358: DOUBLE
41359: EQUAL
41360: IFTRUE 41364
41362: GO 41390
41364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41365: LD_ADDR_VAR 0 3
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: LD_INT 3
41375: PUSH
41376: LD_INT 4
41378: PUSH
41379: LD_INT 5
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: ST_TO_ADDR
41388: GO 42281
41390: LD_INT 5
41392: DOUBLE
41393: EQUAL
41394: IFTRUE 41398
41396: GO 41424
41398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41399: LD_ADDR_VAR 0 3
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: LD_INT 3
41409: PUSH
41410: LD_INT 4
41412: PUSH
41413: LD_INT 5
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: ST_TO_ADDR
41422: GO 42281
41424: LD_INT 9
41426: DOUBLE
41427: EQUAL
41428: IFTRUE 41432
41430: GO 41458
41432: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41433: LD_ADDR_VAR 0 3
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: LD_INT 4
41446: PUSH
41447: LD_INT 5
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: ST_TO_ADDR
41456: GO 42281
41458: LD_INT 7
41460: DOUBLE
41461: EQUAL
41462: IFTRUE 41466
41464: GO 41492
41466: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41467: LD_ADDR_VAR 0 3
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: LD_INT 4
41480: PUSH
41481: LD_INT 5
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: ST_TO_ADDR
41490: GO 42281
41492: LD_INT 12
41494: DOUBLE
41495: EQUAL
41496: IFTRUE 41500
41498: GO 41526
41500: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41501: LD_ADDR_VAR 0 3
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: LD_INT 3
41511: PUSH
41512: LD_INT 4
41514: PUSH
41515: LD_INT 5
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: ST_TO_ADDR
41524: GO 42281
41526: LD_INT 13
41528: DOUBLE
41529: EQUAL
41530: IFTRUE 41534
41532: GO 41560
41534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41535: LD_ADDR_VAR 0 3
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: LD_INT 4
41548: PUSH
41549: LD_INT 5
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
41558: GO 42281
41560: LD_INT 14
41562: DOUBLE
41563: EQUAL
41564: IFTRUE 41568
41566: GO 41586
41568: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41569: LD_ADDR_VAR 0 3
41573: PUSH
41574: LD_INT 4
41576: PUSH
41577: LD_INT 5
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: ST_TO_ADDR
41584: GO 42281
41586: LD_INT 6
41588: DOUBLE
41589: EQUAL
41590: IFTRUE 41594
41592: GO 41612
41594: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41595: LD_ADDR_VAR 0 3
41599: PUSH
41600: LD_INT 4
41602: PUSH
41603: LD_INT 5
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: ST_TO_ADDR
41610: GO 42281
41612: LD_INT 10
41614: DOUBLE
41615: EQUAL
41616: IFTRUE 41620
41618: GO 41638
41620: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41621: LD_ADDR_VAR 0 3
41625: PUSH
41626: LD_INT 4
41628: PUSH
41629: LD_INT 5
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: ST_TO_ADDR
41636: GO 42281
41638: LD_INT 22
41640: DOUBLE
41641: EQUAL
41642: IFTRUE 41646
41644: GO 41672
41646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41647: LD_ADDR_VAR 0 3
41651: PUSH
41652: LD_INT 11
41654: PUSH
41655: LD_INT 12
41657: PUSH
41658: LD_INT 13
41660: PUSH
41661: LD_INT 14
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: ST_TO_ADDR
41670: GO 42281
41672: LD_INT 23
41674: DOUBLE
41675: EQUAL
41676: IFTRUE 41680
41678: GO 41706
41680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41681: LD_ADDR_VAR 0 3
41685: PUSH
41686: LD_INT 11
41688: PUSH
41689: LD_INT 12
41691: PUSH
41692: LD_INT 13
41694: PUSH
41695: LD_INT 14
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
41704: GO 42281
41706: LD_INT 24
41708: DOUBLE
41709: EQUAL
41710: IFTRUE 41714
41712: GO 41740
41714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41715: LD_ADDR_VAR 0 3
41719: PUSH
41720: LD_INT 11
41722: PUSH
41723: LD_INT 12
41725: PUSH
41726: LD_INT 13
41728: PUSH
41729: LD_INT 14
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: ST_TO_ADDR
41738: GO 42281
41740: LD_INT 30
41742: DOUBLE
41743: EQUAL
41744: IFTRUE 41748
41746: GO 41774
41748: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41749: LD_ADDR_VAR 0 3
41753: PUSH
41754: LD_INT 11
41756: PUSH
41757: LD_INT 12
41759: PUSH
41760: LD_INT 13
41762: PUSH
41763: LD_INT 14
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: ST_TO_ADDR
41772: GO 42281
41774: LD_INT 25
41776: DOUBLE
41777: EQUAL
41778: IFTRUE 41782
41780: GO 41800
41782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41783: LD_ADDR_VAR 0 3
41787: PUSH
41788: LD_INT 13
41790: PUSH
41791: LD_INT 14
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: ST_TO_ADDR
41798: GO 42281
41800: LD_INT 27
41802: DOUBLE
41803: EQUAL
41804: IFTRUE 41808
41806: GO 41826
41808: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41809: LD_ADDR_VAR 0 3
41813: PUSH
41814: LD_INT 13
41816: PUSH
41817: LD_INT 14
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: ST_TO_ADDR
41824: GO 42281
41826: LD_INT 92
41828: DOUBLE
41829: EQUAL
41830: IFTRUE 41834
41832: GO 41860
41834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41835: LD_ADDR_VAR 0 3
41839: PUSH
41840: LD_INT 11
41842: PUSH
41843: LD_INT 12
41845: PUSH
41846: LD_INT 13
41848: PUSH
41849: LD_INT 14
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: ST_TO_ADDR
41858: GO 42281
41860: LD_INT 28
41862: DOUBLE
41863: EQUAL
41864: IFTRUE 41868
41866: GO 41886
41868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41869: LD_ADDR_VAR 0 3
41873: PUSH
41874: LD_INT 13
41876: PUSH
41877: LD_INT 14
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: ST_TO_ADDR
41884: GO 42281
41886: LD_INT 29
41888: DOUBLE
41889: EQUAL
41890: IFTRUE 41894
41892: GO 41912
41894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41895: LD_ADDR_VAR 0 3
41899: PUSH
41900: LD_INT 13
41902: PUSH
41903: LD_INT 14
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: ST_TO_ADDR
41910: GO 42281
41912: LD_INT 31
41914: DOUBLE
41915: EQUAL
41916: IFTRUE 41920
41918: GO 41938
41920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41921: LD_ADDR_VAR 0 3
41925: PUSH
41926: LD_INT 13
41928: PUSH
41929: LD_INT 14
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: ST_TO_ADDR
41936: GO 42281
41938: LD_INT 26
41940: DOUBLE
41941: EQUAL
41942: IFTRUE 41946
41944: GO 41964
41946: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41947: LD_ADDR_VAR 0 3
41951: PUSH
41952: LD_INT 13
41954: PUSH
41955: LD_INT 14
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: ST_TO_ADDR
41962: GO 42281
41964: LD_INT 42
41966: DOUBLE
41967: EQUAL
41968: IFTRUE 41972
41970: GO 41998
41972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41973: LD_ADDR_VAR 0 3
41977: PUSH
41978: LD_INT 21
41980: PUSH
41981: LD_INT 22
41983: PUSH
41984: LD_INT 23
41986: PUSH
41987: LD_INT 24
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: ST_TO_ADDR
41996: GO 42281
41998: LD_INT 43
42000: DOUBLE
42001: EQUAL
42002: IFTRUE 42006
42004: GO 42032
42006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42007: LD_ADDR_VAR 0 3
42011: PUSH
42012: LD_INT 21
42014: PUSH
42015: LD_INT 22
42017: PUSH
42018: LD_INT 23
42020: PUSH
42021: LD_INT 24
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: ST_TO_ADDR
42030: GO 42281
42032: LD_INT 44
42034: DOUBLE
42035: EQUAL
42036: IFTRUE 42040
42038: GO 42066
42040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42041: LD_ADDR_VAR 0 3
42045: PUSH
42046: LD_INT 21
42048: PUSH
42049: LD_INT 22
42051: PUSH
42052: LD_INT 23
42054: PUSH
42055: LD_INT 24
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
42064: GO 42281
42066: LD_INT 45
42068: DOUBLE
42069: EQUAL
42070: IFTRUE 42074
42072: GO 42100
42074: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42075: LD_ADDR_VAR 0 3
42079: PUSH
42080: LD_INT 21
42082: PUSH
42083: LD_INT 22
42085: PUSH
42086: LD_INT 23
42088: PUSH
42089: LD_INT 24
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: ST_TO_ADDR
42098: GO 42281
42100: LD_INT 49
42102: DOUBLE
42103: EQUAL
42104: IFTRUE 42108
42106: GO 42134
42108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42109: LD_ADDR_VAR 0 3
42113: PUSH
42114: LD_INT 21
42116: PUSH
42117: LD_INT 22
42119: PUSH
42120: LD_INT 23
42122: PUSH
42123: LD_INT 24
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: ST_TO_ADDR
42132: GO 42281
42134: LD_INT 51
42136: DOUBLE
42137: EQUAL
42138: IFTRUE 42142
42140: GO 42168
42142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42143: LD_ADDR_VAR 0 3
42147: PUSH
42148: LD_INT 21
42150: PUSH
42151: LD_INT 22
42153: PUSH
42154: LD_INT 23
42156: PUSH
42157: LD_INT 24
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: ST_TO_ADDR
42166: GO 42281
42168: LD_INT 52
42170: DOUBLE
42171: EQUAL
42172: IFTRUE 42176
42174: GO 42202
42176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_INT 21
42184: PUSH
42185: LD_INT 22
42187: PUSH
42188: LD_INT 23
42190: PUSH
42191: LD_INT 24
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: ST_TO_ADDR
42200: GO 42281
42202: LD_INT 53
42204: DOUBLE
42205: EQUAL
42206: IFTRUE 42210
42208: GO 42228
42210: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42211: LD_ADDR_VAR 0 3
42215: PUSH
42216: LD_INT 23
42218: PUSH
42219: LD_INT 24
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: ST_TO_ADDR
42226: GO 42281
42228: LD_INT 46
42230: DOUBLE
42231: EQUAL
42232: IFTRUE 42236
42234: GO 42254
42236: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42237: LD_ADDR_VAR 0 3
42241: PUSH
42242: LD_INT 23
42244: PUSH
42245: LD_INT 24
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: ST_TO_ADDR
42252: GO 42281
42254: LD_INT 47
42256: DOUBLE
42257: EQUAL
42258: IFTRUE 42262
42260: GO 42280
42262: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: LD_INT 23
42270: PUSH
42271: LD_INT 24
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: ST_TO_ADDR
42278: GO 42281
42280: POP
// result := ( chassis in result ) ;
42281: LD_ADDR_VAR 0 3
42285: PUSH
42286: LD_VAR 0 1
42290: PUSH
42291: LD_VAR 0 3
42295: IN
42296: ST_TO_ADDR
// end ;
42297: LD_VAR 0 3
42301: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42302: LD_INT 0
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
// result := array ;
42311: LD_ADDR_VAR 0 5
42315: PUSH
42316: LD_VAR 0 1
42320: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42321: LD_VAR 0 1
42325: NOT
42326: PUSH
42327: LD_VAR 0 2
42331: NOT
42332: OR
42333: PUSH
42334: LD_VAR 0 3
42338: NOT
42339: OR
42340: PUSH
42341: LD_VAR 0 2
42345: PUSH
42346: LD_VAR 0 1
42350: GREATER
42351: OR
42352: PUSH
42353: LD_VAR 0 3
42357: PUSH
42358: LD_VAR 0 1
42362: GREATER
42363: OR
42364: IFFALSE 42368
// exit ;
42366: GO 42664
// if direction then
42368: LD_VAR 0 4
42372: IFFALSE 42436
// begin d := 1 ;
42374: LD_ADDR_VAR 0 9
42378: PUSH
42379: LD_INT 1
42381: ST_TO_ADDR
// if i_from > i_to then
42382: LD_VAR 0 2
42386: PUSH
42387: LD_VAR 0 3
42391: GREATER
42392: IFFALSE 42418
// length := ( array - i_from ) + i_to else
42394: LD_ADDR_VAR 0 11
42398: PUSH
42399: LD_VAR 0 1
42403: PUSH
42404: LD_VAR 0 2
42408: MINUS
42409: PUSH
42410: LD_VAR 0 3
42414: PLUS
42415: ST_TO_ADDR
42416: GO 42434
// length := i_to - i_from ;
42418: LD_ADDR_VAR 0 11
42422: PUSH
42423: LD_VAR 0 3
42427: PUSH
42428: LD_VAR 0 2
42432: MINUS
42433: ST_TO_ADDR
// end else
42434: GO 42497
// begin d := - 1 ;
42436: LD_ADDR_VAR 0 9
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: ST_TO_ADDR
// if i_from > i_to then
42445: LD_VAR 0 2
42449: PUSH
42450: LD_VAR 0 3
42454: GREATER
42455: IFFALSE 42475
// length := i_from - i_to else
42457: LD_ADDR_VAR 0 11
42461: PUSH
42462: LD_VAR 0 2
42466: PUSH
42467: LD_VAR 0 3
42471: MINUS
42472: ST_TO_ADDR
42473: GO 42497
// length := ( array - i_to ) + i_from ;
42475: LD_ADDR_VAR 0 11
42479: PUSH
42480: LD_VAR 0 1
42484: PUSH
42485: LD_VAR 0 3
42489: MINUS
42490: PUSH
42491: LD_VAR 0 2
42495: PLUS
42496: ST_TO_ADDR
// end ; if not length then
42497: LD_VAR 0 11
42501: NOT
42502: IFFALSE 42506
// exit ;
42504: GO 42664
// tmp := array ;
42506: LD_ADDR_VAR 0 10
42510: PUSH
42511: LD_VAR 0 1
42515: ST_TO_ADDR
// for i = 1 to length do
42516: LD_ADDR_VAR 0 6
42520: PUSH
42521: DOUBLE
42522: LD_INT 1
42524: DEC
42525: ST_TO_ADDR
42526: LD_VAR 0 11
42530: PUSH
42531: FOR_TO
42532: IFFALSE 42652
// begin for j = 1 to array do
42534: LD_ADDR_VAR 0 7
42538: PUSH
42539: DOUBLE
42540: LD_INT 1
42542: DEC
42543: ST_TO_ADDR
42544: LD_VAR 0 1
42548: PUSH
42549: FOR_TO
42550: IFFALSE 42638
// begin k := j + d ;
42552: LD_ADDR_VAR 0 8
42556: PUSH
42557: LD_VAR 0 7
42561: PUSH
42562: LD_VAR 0 9
42566: PLUS
42567: ST_TO_ADDR
// if k > array then
42568: LD_VAR 0 8
42572: PUSH
42573: LD_VAR 0 1
42577: GREATER
42578: IFFALSE 42588
// k := 1 ;
42580: LD_ADDR_VAR 0 8
42584: PUSH
42585: LD_INT 1
42587: ST_TO_ADDR
// if not k then
42588: LD_VAR 0 8
42592: NOT
42593: IFFALSE 42605
// k := array ;
42595: LD_ADDR_VAR 0 8
42599: PUSH
42600: LD_VAR 0 1
42604: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42605: LD_ADDR_VAR 0 10
42609: PUSH
42610: LD_VAR 0 10
42614: PPUSH
42615: LD_VAR 0 8
42619: PPUSH
42620: LD_VAR 0 1
42624: PUSH
42625: LD_VAR 0 7
42629: ARRAY
42630: PPUSH
42631: CALL_OW 1
42635: ST_TO_ADDR
// end ;
42636: GO 42549
42638: POP
42639: POP
// array := tmp ;
42640: LD_ADDR_VAR 0 1
42644: PUSH
42645: LD_VAR 0 10
42649: ST_TO_ADDR
// end ;
42650: GO 42531
42652: POP
42653: POP
// result := array ;
42654: LD_ADDR_VAR 0 5
42658: PUSH
42659: LD_VAR 0 1
42663: ST_TO_ADDR
// end ;
42664: LD_VAR 0 5
42668: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42669: LD_INT 0
42671: PPUSH
42672: PPUSH
// result := 0 ;
42673: LD_ADDR_VAR 0 3
42677: PUSH
42678: LD_INT 0
42680: ST_TO_ADDR
// if not array or not value in array then
42681: LD_VAR 0 1
42685: NOT
42686: PUSH
42687: LD_VAR 0 2
42691: PUSH
42692: LD_VAR 0 1
42696: IN
42697: NOT
42698: OR
42699: IFFALSE 42703
// exit ;
42701: GO 42757
// for i = 1 to array do
42703: LD_ADDR_VAR 0 4
42707: PUSH
42708: DOUBLE
42709: LD_INT 1
42711: DEC
42712: ST_TO_ADDR
42713: LD_VAR 0 1
42717: PUSH
42718: FOR_TO
42719: IFFALSE 42755
// if value = array [ i ] then
42721: LD_VAR 0 2
42725: PUSH
42726: LD_VAR 0 1
42730: PUSH
42731: LD_VAR 0 4
42735: ARRAY
42736: EQUAL
42737: IFFALSE 42753
// begin result := i ;
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_VAR 0 4
42748: ST_TO_ADDR
// exit ;
42749: POP
42750: POP
42751: GO 42757
// end ;
42753: GO 42718
42755: POP
42756: POP
// end ;
42757: LD_VAR 0 3
42761: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42762: LD_INT 0
42764: PPUSH
// vc_chassis := chassis ;
42765: LD_ADDR_OWVAR 37
42769: PUSH
42770: LD_VAR 0 1
42774: ST_TO_ADDR
// vc_engine := engine ;
42775: LD_ADDR_OWVAR 39
42779: PUSH
42780: LD_VAR 0 2
42784: ST_TO_ADDR
// vc_control := control ;
42785: LD_ADDR_OWVAR 38
42789: PUSH
42790: LD_VAR 0 3
42794: ST_TO_ADDR
// vc_weapon := weapon ;
42795: LD_ADDR_OWVAR 40
42799: PUSH
42800: LD_VAR 0 4
42804: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42805: LD_ADDR_OWVAR 41
42809: PUSH
42810: LD_VAR 0 5
42814: ST_TO_ADDR
// end ;
42815: LD_VAR 0 6
42819: RET
// export function WantPlant ( unit ) ; var task ; begin
42820: LD_INT 0
42822: PPUSH
42823: PPUSH
// result := false ;
42824: LD_ADDR_VAR 0 2
42828: PUSH
42829: LD_INT 0
42831: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42832: LD_ADDR_VAR 0 3
42836: PUSH
42837: LD_VAR 0 1
42841: PPUSH
42842: CALL_OW 437
42846: ST_TO_ADDR
// if task then
42847: LD_VAR 0 3
42851: IFFALSE 42879
// if task [ 1 ] [ 1 ] = p then
42853: LD_VAR 0 3
42857: PUSH
42858: LD_INT 1
42860: ARRAY
42861: PUSH
42862: LD_INT 1
42864: ARRAY
42865: PUSH
42866: LD_STRING p
42868: EQUAL
42869: IFFALSE 42879
// result := true ;
42871: LD_ADDR_VAR 0 2
42875: PUSH
42876: LD_INT 1
42878: ST_TO_ADDR
// end ;
42879: LD_VAR 0 2
42883: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42884: LD_INT 0
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
// if pos < 1 then
42890: LD_VAR 0 2
42894: PUSH
42895: LD_INT 1
42897: LESS
42898: IFFALSE 42902
// exit ;
42900: GO 43205
// if pos = 1 then
42902: LD_VAR 0 2
42906: PUSH
42907: LD_INT 1
42909: EQUAL
42910: IFFALSE 42943
// result := Replace ( arr , pos [ 1 ] , value ) else
42912: LD_ADDR_VAR 0 4
42916: PUSH
42917: LD_VAR 0 1
42921: PPUSH
42922: LD_VAR 0 2
42926: PUSH
42927: LD_INT 1
42929: ARRAY
42930: PPUSH
42931: LD_VAR 0 3
42935: PPUSH
42936: CALL_OW 1
42940: ST_TO_ADDR
42941: GO 43205
// begin tmp := arr ;
42943: LD_ADDR_VAR 0 6
42947: PUSH
42948: LD_VAR 0 1
42952: ST_TO_ADDR
// s_arr := [ tmp ] ;
42953: LD_ADDR_VAR 0 7
42957: PUSH
42958: LD_VAR 0 6
42962: PUSH
42963: EMPTY
42964: LIST
42965: ST_TO_ADDR
// for i = 1 to pos - 1 do
42966: LD_ADDR_VAR 0 5
42970: PUSH
42971: DOUBLE
42972: LD_INT 1
42974: DEC
42975: ST_TO_ADDR
42976: LD_VAR 0 2
42980: PUSH
42981: LD_INT 1
42983: MINUS
42984: PUSH
42985: FOR_TO
42986: IFFALSE 43031
// begin tmp := tmp [ pos [ i ] ] ;
42988: LD_ADDR_VAR 0 6
42992: PUSH
42993: LD_VAR 0 6
42997: PUSH
42998: LD_VAR 0 2
43002: PUSH
43003: LD_VAR 0 5
43007: ARRAY
43008: ARRAY
43009: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43010: LD_ADDR_VAR 0 7
43014: PUSH
43015: LD_VAR 0 7
43019: PUSH
43020: LD_VAR 0 6
43024: PUSH
43025: EMPTY
43026: LIST
43027: ADD
43028: ST_TO_ADDR
// end ;
43029: GO 42985
43031: POP
43032: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43033: LD_ADDR_VAR 0 6
43037: PUSH
43038: LD_VAR 0 6
43042: PPUSH
43043: LD_VAR 0 2
43047: PUSH
43048: LD_VAR 0 2
43052: ARRAY
43053: PPUSH
43054: LD_VAR 0 3
43058: PPUSH
43059: CALL_OW 1
43063: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43064: LD_ADDR_VAR 0 7
43068: PUSH
43069: LD_VAR 0 7
43073: PPUSH
43074: LD_VAR 0 7
43078: PPUSH
43079: LD_VAR 0 6
43083: PPUSH
43084: CALL_OW 1
43088: ST_TO_ADDR
// for i = s_arr downto 2 do
43089: LD_ADDR_VAR 0 5
43093: PUSH
43094: DOUBLE
43095: LD_VAR 0 7
43099: INC
43100: ST_TO_ADDR
43101: LD_INT 2
43103: PUSH
43104: FOR_DOWNTO
43105: IFFALSE 43189
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43107: LD_ADDR_VAR 0 6
43111: PUSH
43112: LD_VAR 0 7
43116: PUSH
43117: LD_VAR 0 5
43121: PUSH
43122: LD_INT 1
43124: MINUS
43125: ARRAY
43126: PPUSH
43127: LD_VAR 0 2
43131: PUSH
43132: LD_VAR 0 5
43136: PUSH
43137: LD_INT 1
43139: MINUS
43140: ARRAY
43141: PPUSH
43142: LD_VAR 0 7
43146: PUSH
43147: LD_VAR 0 5
43151: ARRAY
43152: PPUSH
43153: CALL_OW 1
43157: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43158: LD_ADDR_VAR 0 7
43162: PUSH
43163: LD_VAR 0 7
43167: PPUSH
43168: LD_VAR 0 5
43172: PUSH
43173: LD_INT 1
43175: MINUS
43176: PPUSH
43177: LD_VAR 0 6
43181: PPUSH
43182: CALL_OW 1
43186: ST_TO_ADDR
// end ;
43187: GO 43104
43189: POP
43190: POP
// result := s_arr [ 1 ] ;
43191: LD_ADDR_VAR 0 4
43195: PUSH
43196: LD_VAR 0 7
43200: PUSH
43201: LD_INT 1
43203: ARRAY
43204: ST_TO_ADDR
// end ; end ;
43205: LD_VAR 0 4
43209: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43210: LD_INT 0
43212: PPUSH
43213: PPUSH
// if not list then
43214: LD_VAR 0 1
43218: NOT
43219: IFFALSE 43223
// exit ;
43221: GO 43314
// i := list [ pos1 ] ;
43223: LD_ADDR_VAR 0 5
43227: PUSH
43228: LD_VAR 0 1
43232: PUSH
43233: LD_VAR 0 2
43237: ARRAY
43238: ST_TO_ADDR
// if not i then
43239: LD_VAR 0 5
43243: NOT
43244: IFFALSE 43248
// exit ;
43246: GO 43314
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43248: LD_ADDR_VAR 0 1
43252: PUSH
43253: LD_VAR 0 1
43257: PPUSH
43258: LD_VAR 0 2
43262: PPUSH
43263: LD_VAR 0 1
43267: PUSH
43268: LD_VAR 0 3
43272: ARRAY
43273: PPUSH
43274: CALL_OW 1
43278: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43279: LD_ADDR_VAR 0 1
43283: PUSH
43284: LD_VAR 0 1
43288: PPUSH
43289: LD_VAR 0 3
43293: PPUSH
43294: LD_VAR 0 5
43298: PPUSH
43299: CALL_OW 1
43303: ST_TO_ADDR
// result := list ;
43304: LD_ADDR_VAR 0 4
43308: PUSH
43309: LD_VAR 0 1
43313: ST_TO_ADDR
// end ;
43314: LD_VAR 0 4
43318: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43319: LD_INT 0
43321: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43322: LD_ADDR_VAR 0 5
43326: PUSH
43327: LD_VAR 0 1
43331: PPUSH
43332: CALL_OW 250
43336: PPUSH
43337: LD_VAR 0 1
43341: PPUSH
43342: CALL_OW 251
43346: PPUSH
43347: LD_VAR 0 2
43351: PPUSH
43352: LD_VAR 0 3
43356: PPUSH
43357: LD_VAR 0 4
43361: PPUSH
43362: CALL 43372 0 5
43366: ST_TO_ADDR
// end ;
43367: LD_VAR 0 5
43371: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43372: LD_INT 0
43374: PPUSH
43375: PPUSH
43376: PPUSH
43377: PPUSH
// if not list then
43378: LD_VAR 0 3
43382: NOT
43383: IFFALSE 43387
// exit ;
43385: GO 43775
// result := [ ] ;
43387: LD_ADDR_VAR 0 6
43391: PUSH
43392: EMPTY
43393: ST_TO_ADDR
// for i in list do
43394: LD_ADDR_VAR 0 7
43398: PUSH
43399: LD_VAR 0 3
43403: PUSH
43404: FOR_IN
43405: IFFALSE 43607
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43407: LD_ADDR_VAR 0 9
43411: PUSH
43412: LD_VAR 0 7
43416: PPUSH
43417: LD_VAR 0 1
43421: PPUSH
43422: LD_VAR 0 2
43426: PPUSH
43427: CALL_OW 297
43431: ST_TO_ADDR
// if not result then
43432: LD_VAR 0 6
43436: NOT
43437: IFFALSE 43463
// result := [ [ i , tmp ] ] else
43439: LD_ADDR_VAR 0 6
43443: PUSH
43444: LD_VAR 0 7
43448: PUSH
43449: LD_VAR 0 9
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: EMPTY
43459: LIST
43460: ST_TO_ADDR
43461: GO 43605
// begin if result [ result ] [ 2 ] < tmp then
43463: LD_VAR 0 6
43467: PUSH
43468: LD_VAR 0 6
43472: ARRAY
43473: PUSH
43474: LD_INT 2
43476: ARRAY
43477: PUSH
43478: LD_VAR 0 9
43482: LESS
43483: IFFALSE 43525
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43485: LD_ADDR_VAR 0 6
43489: PUSH
43490: LD_VAR 0 6
43494: PPUSH
43495: LD_VAR 0 6
43499: PUSH
43500: LD_INT 1
43502: PLUS
43503: PPUSH
43504: LD_VAR 0 7
43508: PUSH
43509: LD_VAR 0 9
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PPUSH
43518: CALL_OW 2
43522: ST_TO_ADDR
43523: GO 43605
// for j = 1 to result do
43525: LD_ADDR_VAR 0 8
43529: PUSH
43530: DOUBLE
43531: LD_INT 1
43533: DEC
43534: ST_TO_ADDR
43535: LD_VAR 0 6
43539: PUSH
43540: FOR_TO
43541: IFFALSE 43603
// begin if tmp < result [ j ] [ 2 ] then
43543: LD_VAR 0 9
43547: PUSH
43548: LD_VAR 0 6
43552: PUSH
43553: LD_VAR 0 8
43557: ARRAY
43558: PUSH
43559: LD_INT 2
43561: ARRAY
43562: LESS
43563: IFFALSE 43601
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43565: LD_ADDR_VAR 0 6
43569: PUSH
43570: LD_VAR 0 6
43574: PPUSH
43575: LD_VAR 0 8
43579: PPUSH
43580: LD_VAR 0 7
43584: PUSH
43585: LD_VAR 0 9
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PPUSH
43594: CALL_OW 2
43598: ST_TO_ADDR
// break ;
43599: GO 43603
// end ; end ;
43601: GO 43540
43603: POP
43604: POP
// end ; end ;
43605: GO 43404
43607: POP
43608: POP
// if result and not asc then
43609: LD_VAR 0 6
43613: PUSH
43614: LD_VAR 0 4
43618: NOT
43619: AND
43620: IFFALSE 43695
// begin tmp := result ;
43622: LD_ADDR_VAR 0 9
43626: PUSH
43627: LD_VAR 0 6
43631: ST_TO_ADDR
// for i = tmp downto 1 do
43632: LD_ADDR_VAR 0 7
43636: PUSH
43637: DOUBLE
43638: LD_VAR 0 9
43642: INC
43643: ST_TO_ADDR
43644: LD_INT 1
43646: PUSH
43647: FOR_DOWNTO
43648: IFFALSE 43693
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43650: LD_ADDR_VAR 0 6
43654: PUSH
43655: LD_VAR 0 6
43659: PPUSH
43660: LD_VAR 0 9
43664: PUSH
43665: LD_VAR 0 7
43669: MINUS
43670: PUSH
43671: LD_INT 1
43673: PLUS
43674: PPUSH
43675: LD_VAR 0 9
43679: PUSH
43680: LD_VAR 0 7
43684: ARRAY
43685: PPUSH
43686: CALL_OW 1
43690: ST_TO_ADDR
43691: GO 43647
43693: POP
43694: POP
// end ; tmp := [ ] ;
43695: LD_ADDR_VAR 0 9
43699: PUSH
43700: EMPTY
43701: ST_TO_ADDR
// if mode then
43702: LD_VAR 0 5
43706: IFFALSE 43775
// begin for i = 1 to result do
43708: LD_ADDR_VAR 0 7
43712: PUSH
43713: DOUBLE
43714: LD_INT 1
43716: DEC
43717: ST_TO_ADDR
43718: LD_VAR 0 6
43722: PUSH
43723: FOR_TO
43724: IFFALSE 43763
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43726: LD_ADDR_VAR 0 9
43730: PUSH
43731: LD_VAR 0 9
43735: PPUSH
43736: LD_VAR 0 7
43740: PPUSH
43741: LD_VAR 0 6
43745: PUSH
43746: LD_VAR 0 7
43750: ARRAY
43751: PUSH
43752: LD_INT 1
43754: ARRAY
43755: PPUSH
43756: CALL_OW 1
43760: ST_TO_ADDR
43761: GO 43723
43763: POP
43764: POP
// result := tmp ;
43765: LD_ADDR_VAR 0 6
43769: PUSH
43770: LD_VAR 0 9
43774: ST_TO_ADDR
// end ; end ;
43775: LD_VAR 0 6
43779: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43780: LD_INT 0
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43788: LD_ADDR_VAR 0 5
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: EMPTY
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: ST_TO_ADDR
// if not x or not y then
43810: LD_VAR 0 2
43814: NOT
43815: PUSH
43816: LD_VAR 0 3
43820: NOT
43821: OR
43822: IFFALSE 43826
// exit ;
43824: GO 45476
// if not range then
43826: LD_VAR 0 4
43830: NOT
43831: IFFALSE 43841
// range := 10 ;
43833: LD_ADDR_VAR 0 4
43837: PUSH
43838: LD_INT 10
43840: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43841: LD_ADDR_VAR 0 8
43845: PUSH
43846: LD_INT 81
43848: PUSH
43849: LD_VAR 0 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 92
43860: PUSH
43861: LD_VAR 0 2
43865: PUSH
43866: LD_VAR 0 3
43870: PUSH
43871: LD_VAR 0 4
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 3
43884: PUSH
43885: LD_INT 21
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: PPUSH
43904: CALL_OW 69
43908: ST_TO_ADDR
// if not tmp then
43909: LD_VAR 0 8
43913: NOT
43914: IFFALSE 43918
// exit ;
43916: GO 45476
// for i in tmp do
43918: LD_ADDR_VAR 0 6
43922: PUSH
43923: LD_VAR 0 8
43927: PUSH
43928: FOR_IN
43929: IFFALSE 45451
// begin points := [ 0 , 0 , 0 ] ;
43931: LD_ADDR_VAR 0 9
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
// bpoints := 1 ;
43950: LD_ADDR_VAR 0 10
43954: PUSH
43955: LD_INT 1
43957: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43958: LD_VAR 0 6
43962: PPUSH
43963: CALL_OW 247
43967: PUSH
43968: LD_INT 1
43970: DOUBLE
43971: EQUAL
43972: IFTRUE 43976
43974: GO 44554
43976: POP
// begin if GetClass ( i ) = 1 then
43977: LD_VAR 0 6
43981: PPUSH
43982: CALL_OW 257
43986: PUSH
43987: LD_INT 1
43989: EQUAL
43990: IFFALSE 44011
// points := [ 10 , 5 , 3 ] ;
43992: LD_ADDR_VAR 0 9
43996: PUSH
43997: LD_INT 10
43999: PUSH
44000: LD_INT 5
44002: PUSH
44003: LD_INT 3
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44011: LD_VAR 0 6
44015: PPUSH
44016: CALL_OW 257
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: LD_INT 4
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: IN
44035: IFFALSE 44056
// points := [ 3 , 2 , 1 ] ;
44037: LD_ADDR_VAR 0 9
44041: PUSH
44042: LD_INT 3
44044: PUSH
44045: LD_INT 2
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44056: LD_VAR 0 6
44060: PPUSH
44061: CALL_OW 257
44065: PUSH
44066: LD_INT 5
44068: EQUAL
44069: IFFALSE 44090
// points := [ 130 , 5 , 2 ] ;
44071: LD_ADDR_VAR 0 9
44075: PUSH
44076: LD_INT 130
44078: PUSH
44079: LD_INT 5
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: LIST
44089: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44090: LD_VAR 0 6
44094: PPUSH
44095: CALL_OW 257
44099: PUSH
44100: LD_INT 8
44102: EQUAL
44103: IFFALSE 44124
// points := [ 35 , 35 , 30 ] ;
44105: LD_ADDR_VAR 0 9
44109: PUSH
44110: LD_INT 35
44112: PUSH
44113: LD_INT 35
44115: PUSH
44116: LD_INT 30
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: LIST
44123: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44124: LD_VAR 0 6
44128: PPUSH
44129: CALL_OW 257
44133: PUSH
44134: LD_INT 9
44136: EQUAL
44137: IFFALSE 44158
// points := [ 20 , 55 , 40 ] ;
44139: LD_ADDR_VAR 0 9
44143: PUSH
44144: LD_INT 20
44146: PUSH
44147: LD_INT 55
44149: PUSH
44150: LD_INT 40
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: LIST
44157: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44158: LD_VAR 0 6
44162: PPUSH
44163: CALL_OW 257
44167: PUSH
44168: LD_INT 12
44170: PUSH
44171: LD_INT 16
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: IN
44178: IFFALSE 44199
// points := [ 5 , 3 , 2 ] ;
44180: LD_ADDR_VAR 0 9
44184: PUSH
44185: LD_INT 5
44187: PUSH
44188: LD_INT 3
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: LIST
44198: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44199: LD_VAR 0 6
44203: PPUSH
44204: CALL_OW 257
44208: PUSH
44209: LD_INT 17
44211: EQUAL
44212: IFFALSE 44233
// points := [ 100 , 50 , 75 ] ;
44214: LD_ADDR_VAR 0 9
44218: PUSH
44219: LD_INT 100
44221: PUSH
44222: LD_INT 50
44224: PUSH
44225: LD_INT 75
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44233: LD_VAR 0 6
44237: PPUSH
44238: CALL_OW 257
44242: PUSH
44243: LD_INT 15
44245: EQUAL
44246: IFFALSE 44267
// points := [ 10 , 5 , 3 ] ;
44248: LD_ADDR_VAR 0 9
44252: PUSH
44253: LD_INT 10
44255: PUSH
44256: LD_INT 5
44258: PUSH
44259: LD_INT 3
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44267: LD_VAR 0 6
44271: PPUSH
44272: CALL_OW 257
44276: PUSH
44277: LD_INT 14
44279: EQUAL
44280: IFFALSE 44301
// points := [ 10 , 0 , 0 ] ;
44282: LD_ADDR_VAR 0 9
44286: PUSH
44287: LD_INT 10
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44301: LD_VAR 0 6
44305: PPUSH
44306: CALL_OW 257
44310: PUSH
44311: LD_INT 11
44313: EQUAL
44314: IFFALSE 44335
// points := [ 30 , 10 , 5 ] ;
44316: LD_ADDR_VAR 0 9
44320: PUSH
44321: LD_INT 30
44323: PUSH
44324: LD_INT 10
44326: PUSH
44327: LD_INT 5
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44335: LD_VAR 0 1
44339: PPUSH
44340: LD_INT 5
44342: PPUSH
44343: CALL_OW 321
44347: PUSH
44348: LD_INT 2
44350: EQUAL
44351: IFFALSE 44368
// bpoints := bpoints * 1.8 ;
44353: LD_ADDR_VAR 0 10
44357: PUSH
44358: LD_VAR 0 10
44362: PUSH
44363: LD_REAL  1.80000000000000E+0000
44366: MUL
44367: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44368: LD_VAR 0 6
44372: PPUSH
44373: CALL_OW 257
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: LD_INT 4
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: IN
44396: PUSH
44397: LD_VAR 0 1
44401: PPUSH
44402: LD_INT 51
44404: PPUSH
44405: CALL_OW 321
44409: PUSH
44410: LD_INT 2
44412: EQUAL
44413: AND
44414: IFFALSE 44431
// bpoints := bpoints * 1.2 ;
44416: LD_ADDR_VAR 0 10
44420: PUSH
44421: LD_VAR 0 10
44425: PUSH
44426: LD_REAL  1.20000000000000E+0000
44429: MUL
44430: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44431: LD_VAR 0 6
44435: PPUSH
44436: CALL_OW 257
44440: PUSH
44441: LD_INT 5
44443: PUSH
44444: LD_INT 7
44446: PUSH
44447: LD_INT 9
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: IN
44455: PUSH
44456: LD_VAR 0 1
44460: PPUSH
44461: LD_INT 52
44463: PPUSH
44464: CALL_OW 321
44468: PUSH
44469: LD_INT 2
44471: EQUAL
44472: AND
44473: IFFALSE 44490
// bpoints := bpoints * 1.5 ;
44475: LD_ADDR_VAR 0 10
44479: PUSH
44480: LD_VAR 0 10
44484: PUSH
44485: LD_REAL  1.50000000000000E+0000
44488: MUL
44489: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44490: LD_VAR 0 1
44494: PPUSH
44495: LD_INT 66
44497: PPUSH
44498: CALL_OW 321
44502: PUSH
44503: LD_INT 2
44505: EQUAL
44506: IFFALSE 44523
// bpoints := bpoints * 1.1 ;
44508: LD_ADDR_VAR 0 10
44512: PUSH
44513: LD_VAR 0 10
44517: PUSH
44518: LD_REAL  1.10000000000000E+0000
44521: MUL
44522: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44523: LD_ADDR_VAR 0 10
44527: PUSH
44528: LD_VAR 0 10
44532: PUSH
44533: LD_VAR 0 6
44537: PPUSH
44538: LD_INT 1
44540: PPUSH
44541: CALL_OW 259
44545: PUSH
44546: LD_REAL  1.15000000000000E+0000
44549: MUL
44550: MUL
44551: ST_TO_ADDR
// end ; unit_vehicle :
44552: GO 45380
44554: LD_INT 2
44556: DOUBLE
44557: EQUAL
44558: IFTRUE 44562
44560: GO 45368
44562: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44563: LD_VAR 0 6
44567: PPUSH
44568: CALL_OW 264
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 42
44578: PUSH
44579: LD_INT 24
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: IN
44587: IFFALSE 44608
// points := [ 25 , 5 , 3 ] ;
44589: LD_ADDR_VAR 0 9
44593: PUSH
44594: LD_INT 25
44596: PUSH
44597: LD_INT 5
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44608: LD_VAR 0 6
44612: PPUSH
44613: CALL_OW 264
44617: PUSH
44618: LD_INT 4
44620: PUSH
44621: LD_INT 43
44623: PUSH
44624: LD_INT 25
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: IN
44632: IFFALSE 44653
// points := [ 40 , 15 , 5 ] ;
44634: LD_ADDR_VAR 0 9
44638: PUSH
44639: LD_INT 40
44641: PUSH
44642: LD_INT 15
44644: PUSH
44645: LD_INT 5
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: LIST
44652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44653: LD_VAR 0 6
44657: PPUSH
44658: CALL_OW 264
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 23
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: IN
44673: IFFALSE 44694
// points := [ 7 , 25 , 8 ] ;
44675: LD_ADDR_VAR 0 9
44679: PUSH
44680: LD_INT 7
44682: PUSH
44683: LD_INT 25
44685: PUSH
44686: LD_INT 8
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44694: LD_VAR 0 6
44698: PPUSH
44699: CALL_OW 264
44703: PUSH
44704: LD_INT 5
44706: PUSH
44707: LD_INT 27
44709: PUSH
44710: LD_INT 44
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: IN
44718: IFFALSE 44739
// points := [ 14 , 50 , 16 ] ;
44720: LD_ADDR_VAR 0 9
44724: PUSH
44725: LD_INT 14
44727: PUSH
44728: LD_INT 50
44730: PUSH
44731: LD_INT 16
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44739: LD_VAR 0 6
44743: PPUSH
44744: CALL_OW 264
44748: PUSH
44749: LD_INT 6
44751: PUSH
44752: LD_INT 46
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: IN
44759: IFFALSE 44780
// points := [ 32 , 120 , 70 ] ;
44761: LD_ADDR_VAR 0 9
44765: PUSH
44766: LD_INT 32
44768: PUSH
44769: LD_INT 120
44771: PUSH
44772: LD_INT 70
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44780: LD_VAR 0 6
44784: PPUSH
44785: CALL_OW 264
44789: PUSH
44790: LD_INT 7
44792: PUSH
44793: LD_INT 28
44795: PUSH
44796: LD_INT 45
44798: PUSH
44799: LD_INT 92
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: IN
44808: IFFALSE 44829
// points := [ 35 , 20 , 45 ] ;
44810: LD_ADDR_VAR 0 9
44814: PUSH
44815: LD_INT 35
44817: PUSH
44818: LD_INT 20
44820: PUSH
44821: LD_INT 45
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: LIST
44828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44829: LD_VAR 0 6
44833: PPUSH
44834: CALL_OW 264
44838: PUSH
44839: LD_INT 47
44841: PUSH
44842: EMPTY
44843: LIST
44844: IN
44845: IFFALSE 44866
// points := [ 67 , 45 , 75 ] ;
44847: LD_ADDR_VAR 0 9
44851: PUSH
44852: LD_INT 67
44854: PUSH
44855: LD_INT 45
44857: PUSH
44858: LD_INT 75
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44866: LD_VAR 0 6
44870: PPUSH
44871: CALL_OW 264
44875: PUSH
44876: LD_INT 26
44878: PUSH
44879: EMPTY
44880: LIST
44881: IN
44882: IFFALSE 44903
// points := [ 120 , 30 , 80 ] ;
44884: LD_ADDR_VAR 0 9
44888: PUSH
44889: LD_INT 120
44891: PUSH
44892: LD_INT 30
44894: PUSH
44895: LD_INT 80
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44903: LD_VAR 0 6
44907: PPUSH
44908: CALL_OW 264
44912: PUSH
44913: LD_INT 22
44915: PUSH
44916: EMPTY
44917: LIST
44918: IN
44919: IFFALSE 44940
// points := [ 40 , 1 , 1 ] ;
44921: LD_ADDR_VAR 0 9
44925: PUSH
44926: LD_INT 40
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44940: LD_VAR 0 6
44944: PPUSH
44945: CALL_OW 264
44949: PUSH
44950: LD_INT 29
44952: PUSH
44953: EMPTY
44954: LIST
44955: IN
44956: IFFALSE 44977
// points := [ 70 , 200 , 400 ] ;
44958: LD_ADDR_VAR 0 9
44962: PUSH
44963: LD_INT 70
44965: PUSH
44966: LD_INT 200
44968: PUSH
44969: LD_INT 400
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44977: LD_VAR 0 6
44981: PPUSH
44982: CALL_OW 264
44986: PUSH
44987: LD_INT 14
44989: PUSH
44990: LD_INT 53
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: IN
44997: IFFALSE 45018
// points := [ 40 , 10 , 20 ] ;
44999: LD_ADDR_VAR 0 9
45003: PUSH
45004: LD_INT 40
45006: PUSH
45007: LD_INT 10
45009: PUSH
45010: LD_INT 20
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45018: LD_VAR 0 6
45022: PPUSH
45023: CALL_OW 264
45027: PUSH
45028: LD_INT 9
45030: PUSH
45031: EMPTY
45032: LIST
45033: IN
45034: IFFALSE 45055
// points := [ 5 , 70 , 20 ] ;
45036: LD_ADDR_VAR 0 9
45040: PUSH
45041: LD_INT 5
45043: PUSH
45044: LD_INT 70
45046: PUSH
45047: LD_INT 20
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45055: LD_VAR 0 6
45059: PPUSH
45060: CALL_OW 264
45064: PUSH
45065: LD_INT 10
45067: PUSH
45068: EMPTY
45069: LIST
45070: IN
45071: IFFALSE 45092
// points := [ 35 , 110 , 70 ] ;
45073: LD_ADDR_VAR 0 9
45077: PUSH
45078: LD_INT 35
45080: PUSH
45081: LD_INT 110
45083: PUSH
45084: LD_INT 70
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45092: LD_VAR 0 6
45096: PPUSH
45097: CALL_OW 265
45101: PUSH
45102: LD_INT 25
45104: EQUAL
45105: IFFALSE 45126
// points := [ 80 , 65 , 100 ] ;
45107: LD_ADDR_VAR 0 9
45111: PUSH
45112: LD_INT 80
45114: PUSH
45115: LD_INT 65
45117: PUSH
45118: LD_INT 100
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45126: LD_VAR 0 6
45130: PPUSH
45131: CALL_OW 263
45135: PUSH
45136: LD_INT 1
45138: EQUAL
45139: IFFALSE 45174
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45141: LD_ADDR_VAR 0 10
45145: PUSH
45146: LD_VAR 0 10
45150: PUSH
45151: LD_VAR 0 6
45155: PPUSH
45156: CALL_OW 311
45160: PPUSH
45161: LD_INT 3
45163: PPUSH
45164: CALL_OW 259
45168: PUSH
45169: LD_INT 4
45171: MUL
45172: MUL
45173: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45174: LD_VAR 0 6
45178: PPUSH
45179: CALL_OW 263
45183: PUSH
45184: LD_INT 2
45186: EQUAL
45187: IFFALSE 45238
// begin j := IsControledBy ( i ) ;
45189: LD_ADDR_VAR 0 7
45193: PUSH
45194: LD_VAR 0 6
45198: PPUSH
45199: CALL_OW 312
45203: ST_TO_ADDR
// if j then
45204: LD_VAR 0 7
45208: IFFALSE 45238
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45210: LD_ADDR_VAR 0 10
45214: PUSH
45215: LD_VAR 0 10
45219: PUSH
45220: LD_VAR 0 7
45224: PPUSH
45225: LD_INT 3
45227: PPUSH
45228: CALL_OW 259
45232: PUSH
45233: LD_INT 3
45235: MUL
45236: MUL
45237: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45238: LD_VAR 0 6
45242: PPUSH
45243: CALL_OW 264
45247: PUSH
45248: LD_INT 5
45250: PUSH
45251: LD_INT 6
45253: PUSH
45254: LD_INT 46
45256: PUSH
45257: LD_INT 44
45259: PUSH
45260: LD_INT 47
45262: PUSH
45263: LD_INT 45
45265: PUSH
45266: LD_INT 28
45268: PUSH
45269: LD_INT 7
45271: PUSH
45272: LD_INT 27
45274: PUSH
45275: LD_INT 29
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: IN
45290: PUSH
45291: LD_VAR 0 1
45295: PPUSH
45296: LD_INT 52
45298: PPUSH
45299: CALL_OW 321
45303: PUSH
45304: LD_INT 2
45306: EQUAL
45307: AND
45308: IFFALSE 45325
// bpoints := bpoints * 1.2 ;
45310: LD_ADDR_VAR 0 10
45314: PUSH
45315: LD_VAR 0 10
45319: PUSH
45320: LD_REAL  1.20000000000000E+0000
45323: MUL
45324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45325: LD_VAR 0 6
45329: PPUSH
45330: CALL_OW 264
45334: PUSH
45335: LD_INT 6
45337: PUSH
45338: LD_INT 46
45340: PUSH
45341: LD_INT 47
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: IN
45349: IFFALSE 45366
// bpoints := bpoints * 1.2 ;
45351: LD_ADDR_VAR 0 10
45355: PUSH
45356: LD_VAR 0 10
45360: PUSH
45361: LD_REAL  1.20000000000000E+0000
45364: MUL
45365: ST_TO_ADDR
// end ; unit_building :
45366: GO 45380
45368: LD_INT 3
45370: DOUBLE
45371: EQUAL
45372: IFTRUE 45376
45374: GO 45379
45376: POP
// ; end ;
45377: GO 45380
45379: POP
// for j = 1 to 3 do
45380: LD_ADDR_VAR 0 7
45384: PUSH
45385: DOUBLE
45386: LD_INT 1
45388: DEC
45389: ST_TO_ADDR
45390: LD_INT 3
45392: PUSH
45393: FOR_TO
45394: IFFALSE 45447
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45396: LD_ADDR_VAR 0 5
45400: PUSH
45401: LD_VAR 0 5
45405: PPUSH
45406: LD_VAR 0 7
45410: PPUSH
45411: LD_VAR 0 5
45415: PUSH
45416: LD_VAR 0 7
45420: ARRAY
45421: PUSH
45422: LD_VAR 0 9
45426: PUSH
45427: LD_VAR 0 7
45431: ARRAY
45432: PUSH
45433: LD_VAR 0 10
45437: MUL
45438: PLUS
45439: PPUSH
45440: CALL_OW 1
45444: ST_TO_ADDR
45445: GO 45393
45447: POP
45448: POP
// end ;
45449: GO 43928
45451: POP
45452: POP
// result := Replace ( result , 4 , tmp ) ;
45453: LD_ADDR_VAR 0 5
45457: PUSH
45458: LD_VAR 0 5
45462: PPUSH
45463: LD_INT 4
45465: PPUSH
45466: LD_VAR 0 8
45470: PPUSH
45471: CALL_OW 1
45475: ST_TO_ADDR
// end ;
45476: LD_VAR 0 5
45480: RET
// export function DangerAtRange ( unit , range ) ; begin
45481: LD_INT 0
45483: PPUSH
// if not unit then
45484: LD_VAR 0 1
45488: NOT
45489: IFFALSE 45493
// exit ;
45491: GO 45538
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45493: LD_ADDR_VAR 0 3
45497: PUSH
45498: LD_VAR 0 1
45502: PPUSH
45503: CALL_OW 255
45507: PPUSH
45508: LD_VAR 0 1
45512: PPUSH
45513: CALL_OW 250
45517: PPUSH
45518: LD_VAR 0 1
45522: PPUSH
45523: CALL_OW 251
45527: PPUSH
45528: LD_VAR 0 2
45532: PPUSH
45533: CALL 43780 0 4
45537: ST_TO_ADDR
// end ;
45538: LD_VAR 0 3
45542: RET
// export function DangerInArea ( side , area ) ; begin
45543: LD_INT 0
45545: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45546: LD_ADDR_VAR 0 3
45550: PUSH
45551: LD_VAR 0 2
45555: PPUSH
45556: LD_INT 81
45558: PUSH
45559: LD_VAR 0 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PPUSH
45568: CALL_OW 70
45572: ST_TO_ADDR
// end ;
45573: LD_VAR 0 3
45577: RET
// export function IsExtension ( b ) ; begin
45578: LD_INT 0
45580: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45581: LD_ADDR_VAR 0 2
45585: PUSH
45586: LD_VAR 0 1
45590: PUSH
45591: LD_INT 23
45593: PUSH
45594: LD_INT 20
45596: PUSH
45597: LD_INT 22
45599: PUSH
45600: LD_INT 17
45602: PUSH
45603: LD_INT 24
45605: PUSH
45606: LD_INT 21
45608: PUSH
45609: LD_INT 19
45611: PUSH
45612: LD_INT 16
45614: PUSH
45615: LD_INT 25
45617: PUSH
45618: LD_INT 18
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: IN
45633: ST_TO_ADDR
// end ;
45634: LD_VAR 0 2
45638: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45639: LD_INT 0
45641: PPUSH
45642: PPUSH
45643: PPUSH
// result := [ ] ;
45644: LD_ADDR_VAR 0 4
45648: PUSH
45649: EMPTY
45650: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45651: LD_ADDR_VAR 0 5
45655: PUSH
45656: LD_VAR 0 2
45660: PPUSH
45661: LD_INT 21
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PPUSH
45671: CALL_OW 70
45675: ST_TO_ADDR
// if not tmp then
45676: LD_VAR 0 5
45680: NOT
45681: IFFALSE 45685
// exit ;
45683: GO 45749
// if checkLink then
45685: LD_VAR 0 3
45689: IFFALSE 45739
// begin for i in tmp do
45691: LD_ADDR_VAR 0 6
45695: PUSH
45696: LD_VAR 0 5
45700: PUSH
45701: FOR_IN
45702: IFFALSE 45737
// if GetBase ( i ) <> base then
45704: LD_VAR 0 6
45708: PPUSH
45709: CALL_OW 274
45713: PUSH
45714: LD_VAR 0 1
45718: NONEQUAL
45719: IFFALSE 45735
// ComLinkToBase ( base , i ) ;
45721: LD_VAR 0 1
45725: PPUSH
45726: LD_VAR 0 6
45730: PPUSH
45731: CALL_OW 169
45735: GO 45701
45737: POP
45738: POP
// end ; result := tmp ;
45739: LD_ADDR_VAR 0 4
45743: PUSH
45744: LD_VAR 0 5
45748: ST_TO_ADDR
// end ;
45749: LD_VAR 0 4
45753: RET
// export function ComComplete ( units , b ) ; var i ; begin
45754: LD_INT 0
45756: PPUSH
45757: PPUSH
// if not units then
45758: LD_VAR 0 1
45762: NOT
45763: IFFALSE 45767
// exit ;
45765: GO 45857
// for i in units do
45767: LD_ADDR_VAR 0 4
45771: PUSH
45772: LD_VAR 0 1
45776: PUSH
45777: FOR_IN
45778: IFFALSE 45855
// if BuildingStatus ( b ) = bs_build then
45780: LD_VAR 0 2
45784: PPUSH
45785: CALL_OW 461
45789: PUSH
45790: LD_INT 1
45792: EQUAL
45793: IFFALSE 45853
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45795: LD_VAR 0 4
45799: PPUSH
45800: LD_STRING h
45802: PUSH
45803: LD_VAR 0 2
45807: PPUSH
45808: CALL_OW 250
45812: PUSH
45813: LD_VAR 0 2
45817: PPUSH
45818: CALL_OW 251
45822: PUSH
45823: LD_VAR 0 2
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: PPUSH
45849: CALL_OW 446
45853: GO 45777
45855: POP
45856: POP
// end ;
45857: LD_VAR 0 3
45861: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45862: LD_INT 0
45864: PPUSH
45865: PPUSH
45866: PPUSH
45867: PPUSH
45868: PPUSH
45869: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45870: LD_VAR 0 1
45874: NOT
45875: PUSH
45876: LD_VAR 0 1
45880: PPUSH
45881: CALL_OW 263
45885: PUSH
45886: LD_INT 2
45888: NONEQUAL
45889: OR
45890: IFFALSE 45894
// exit ;
45892: GO 46210
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45894: LD_ADDR_VAR 0 6
45898: PUSH
45899: LD_INT 22
45901: PUSH
45902: LD_VAR 0 1
45906: PPUSH
45907: CALL_OW 255
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 30
45921: PUSH
45922: LD_INT 36
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 34
45931: PUSH
45932: LD_INT 31
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PPUSH
45948: CALL_OW 69
45952: ST_TO_ADDR
// if not tmp then
45953: LD_VAR 0 6
45957: NOT
45958: IFFALSE 45962
// exit ;
45960: GO 46210
// result := [ ] ;
45962: LD_ADDR_VAR 0 2
45966: PUSH
45967: EMPTY
45968: ST_TO_ADDR
// for i in tmp do
45969: LD_ADDR_VAR 0 3
45973: PUSH
45974: LD_VAR 0 6
45978: PUSH
45979: FOR_IN
45980: IFFALSE 46051
// begin t := UnitsInside ( i ) ;
45982: LD_ADDR_VAR 0 4
45986: PUSH
45987: LD_VAR 0 3
45991: PPUSH
45992: CALL_OW 313
45996: ST_TO_ADDR
// if t then
45997: LD_VAR 0 4
46001: IFFALSE 46049
// for j in t do
46003: LD_ADDR_VAR 0 7
46007: PUSH
46008: LD_VAR 0 4
46012: PUSH
46013: FOR_IN
46014: IFFALSE 46047
// result := Replace ( result , result + 1 , j ) ;
46016: LD_ADDR_VAR 0 2
46020: PUSH
46021: LD_VAR 0 2
46025: PPUSH
46026: LD_VAR 0 2
46030: PUSH
46031: LD_INT 1
46033: PLUS
46034: PPUSH
46035: LD_VAR 0 7
46039: PPUSH
46040: CALL_OW 1
46044: ST_TO_ADDR
46045: GO 46013
46047: POP
46048: POP
// end ;
46049: GO 45979
46051: POP
46052: POP
// if not result then
46053: LD_VAR 0 2
46057: NOT
46058: IFFALSE 46062
// exit ;
46060: GO 46210
// mech := result [ 1 ] ;
46062: LD_ADDR_VAR 0 5
46066: PUSH
46067: LD_VAR 0 2
46071: PUSH
46072: LD_INT 1
46074: ARRAY
46075: ST_TO_ADDR
// if result > 1 then
46076: LD_VAR 0 2
46080: PUSH
46081: LD_INT 1
46083: GREATER
46084: IFFALSE 46196
// begin for i = 2 to result do
46086: LD_ADDR_VAR 0 3
46090: PUSH
46091: DOUBLE
46092: LD_INT 2
46094: DEC
46095: ST_TO_ADDR
46096: LD_VAR 0 2
46100: PUSH
46101: FOR_TO
46102: IFFALSE 46194
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46104: LD_ADDR_VAR 0 4
46108: PUSH
46109: LD_VAR 0 2
46113: PUSH
46114: LD_VAR 0 3
46118: ARRAY
46119: PPUSH
46120: LD_INT 3
46122: PPUSH
46123: CALL_OW 259
46127: PUSH
46128: LD_VAR 0 2
46132: PUSH
46133: LD_VAR 0 3
46137: ARRAY
46138: PPUSH
46139: CALL_OW 432
46143: MINUS
46144: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46145: LD_VAR 0 4
46149: PUSH
46150: LD_VAR 0 5
46154: PPUSH
46155: LD_INT 3
46157: PPUSH
46158: CALL_OW 259
46162: PUSH
46163: LD_VAR 0 5
46167: PPUSH
46168: CALL_OW 432
46172: MINUS
46173: GREATEREQUAL
46174: IFFALSE 46192
// mech := result [ i ] ;
46176: LD_ADDR_VAR 0 5
46180: PUSH
46181: LD_VAR 0 2
46185: PUSH
46186: LD_VAR 0 3
46190: ARRAY
46191: ST_TO_ADDR
// end ;
46192: GO 46101
46194: POP
46195: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46196: LD_VAR 0 1
46200: PPUSH
46201: LD_VAR 0 5
46205: PPUSH
46206: CALL_OW 135
// end ;
46210: LD_VAR 0 2
46214: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46215: LD_INT 0
46217: PPUSH
46218: PPUSH
46219: PPUSH
46220: PPUSH
46221: PPUSH
46222: PPUSH
46223: PPUSH
46224: PPUSH
46225: PPUSH
46226: PPUSH
46227: PPUSH
46228: PPUSH
46229: PPUSH
// result := [ ] ;
46230: LD_ADDR_VAR 0 7
46234: PUSH
46235: EMPTY
46236: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46237: LD_VAR 0 1
46241: PPUSH
46242: CALL_OW 266
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: IN
46257: NOT
46258: IFFALSE 46262
// exit ;
46260: GO 47896
// if name then
46262: LD_VAR 0 3
46266: IFFALSE 46282
// SetBName ( base_dep , name ) ;
46268: LD_VAR 0 1
46272: PPUSH
46273: LD_VAR 0 3
46277: PPUSH
46278: CALL_OW 500
// base := GetBase ( base_dep ) ;
46282: LD_ADDR_VAR 0 15
46286: PUSH
46287: LD_VAR 0 1
46291: PPUSH
46292: CALL_OW 274
46296: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46297: LD_ADDR_VAR 0 16
46301: PUSH
46302: LD_VAR 0 1
46306: PPUSH
46307: CALL_OW 255
46311: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46312: LD_ADDR_VAR 0 17
46316: PUSH
46317: LD_VAR 0 1
46321: PPUSH
46322: CALL_OW 248
46326: ST_TO_ADDR
// if sources then
46327: LD_VAR 0 5
46331: IFFALSE 46378
// for i = 1 to 3 do
46333: LD_ADDR_VAR 0 8
46337: PUSH
46338: DOUBLE
46339: LD_INT 1
46341: DEC
46342: ST_TO_ADDR
46343: LD_INT 3
46345: PUSH
46346: FOR_TO
46347: IFFALSE 46376
// AddResourceType ( base , i , sources [ i ] ) ;
46349: LD_VAR 0 15
46353: PPUSH
46354: LD_VAR 0 8
46358: PPUSH
46359: LD_VAR 0 5
46363: PUSH
46364: LD_VAR 0 8
46368: ARRAY
46369: PPUSH
46370: CALL_OW 276
46374: GO 46346
46376: POP
46377: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46378: LD_ADDR_VAR 0 18
46382: PUSH
46383: LD_VAR 0 15
46387: PPUSH
46388: LD_VAR 0 2
46392: PPUSH
46393: LD_INT 1
46395: PPUSH
46396: CALL 45639 0 3
46400: ST_TO_ADDR
// InitHc ;
46401: CALL_OW 19
// InitUc ;
46405: CALL_OW 18
// uc_side := side ;
46409: LD_ADDR_OWVAR 20
46413: PUSH
46414: LD_VAR 0 16
46418: ST_TO_ADDR
// uc_nation := nation ;
46419: LD_ADDR_OWVAR 21
46423: PUSH
46424: LD_VAR 0 17
46428: ST_TO_ADDR
// if buildings then
46429: LD_VAR 0 18
46433: IFFALSE 47755
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46435: LD_ADDR_VAR 0 19
46439: PUSH
46440: LD_VAR 0 18
46444: PPUSH
46445: LD_INT 2
46447: PUSH
46448: LD_INT 30
46450: PUSH
46451: LD_INT 29
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 30
46460: PUSH
46461: LD_INT 30
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: PPUSH
46473: CALL_OW 72
46477: ST_TO_ADDR
// if tmp then
46478: LD_VAR 0 19
46482: IFFALSE 46530
// for i in tmp do
46484: LD_ADDR_VAR 0 8
46488: PUSH
46489: LD_VAR 0 19
46493: PUSH
46494: FOR_IN
46495: IFFALSE 46528
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46497: LD_VAR 0 8
46501: PPUSH
46502: CALL_OW 250
46506: PPUSH
46507: LD_VAR 0 8
46511: PPUSH
46512: CALL_OW 251
46516: PPUSH
46517: LD_VAR 0 16
46521: PPUSH
46522: CALL_OW 441
46526: GO 46494
46528: POP
46529: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46530: LD_VAR 0 18
46534: PPUSH
46535: LD_INT 2
46537: PUSH
46538: LD_INT 30
46540: PUSH
46541: LD_INT 32
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 30
46550: PUSH
46551: LD_INT 33
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: PPUSH
46563: CALL_OW 72
46567: IFFALSE 46655
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46569: LD_ADDR_VAR 0 8
46573: PUSH
46574: LD_VAR 0 18
46578: PPUSH
46579: LD_INT 2
46581: PUSH
46582: LD_INT 30
46584: PUSH
46585: LD_INT 32
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 30
46594: PUSH
46595: LD_INT 33
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: PPUSH
46607: CALL_OW 72
46611: PUSH
46612: FOR_IN
46613: IFFALSE 46653
// begin if not GetBWeapon ( i ) then
46615: LD_VAR 0 8
46619: PPUSH
46620: CALL_OW 269
46624: NOT
46625: IFFALSE 46651
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46627: LD_VAR 0 8
46631: PPUSH
46632: LD_VAR 0 8
46636: PPUSH
46637: LD_VAR 0 2
46641: PPUSH
46642: CALL 47901 0 2
46646: PPUSH
46647: CALL_OW 431
// end ;
46651: GO 46612
46653: POP
46654: POP
// end ; for i = 1 to personel do
46655: LD_ADDR_VAR 0 8
46659: PUSH
46660: DOUBLE
46661: LD_INT 1
46663: DEC
46664: ST_TO_ADDR
46665: LD_VAR 0 6
46669: PUSH
46670: FOR_TO
46671: IFFALSE 47735
// begin if i > 4 then
46673: LD_VAR 0 8
46677: PUSH
46678: LD_INT 4
46680: GREATER
46681: IFFALSE 46685
// break ;
46683: GO 47735
// case i of 1 :
46685: LD_VAR 0 8
46689: PUSH
46690: LD_INT 1
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46778
46698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46699: LD_ADDR_VAR 0 12
46703: PUSH
46704: LD_VAR 0 18
46708: PPUSH
46709: LD_INT 22
46711: PUSH
46712: LD_VAR 0 16
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 58
46723: PUSH
46724: EMPTY
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: LD_INT 30
46732: PUSH
46733: LD_INT 32
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 30
46742: PUSH
46743: LD_INT 4
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 30
46752: PUSH
46753: LD_INT 5
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: PPUSH
46771: CALL_OW 72
46775: ST_TO_ADDR
46776: GO 47000
46778: LD_INT 2
46780: DOUBLE
46781: EQUAL
46782: IFTRUE 46786
46784: GO 46848
46786: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46787: LD_ADDR_VAR 0 12
46791: PUSH
46792: LD_VAR 0 18
46796: PPUSH
46797: LD_INT 22
46799: PUSH
46800: LD_VAR 0 16
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 30
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 30
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PPUSH
46841: CALL_OW 72
46845: ST_TO_ADDR
46846: GO 47000
46848: LD_INT 3
46850: DOUBLE
46851: EQUAL
46852: IFTRUE 46856
46854: GO 46918
46856: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46857: LD_ADDR_VAR 0 12
46861: PUSH
46862: LD_VAR 0 18
46866: PPUSH
46867: LD_INT 22
46869: PUSH
46870: LD_VAR 0 16
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 30
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 30
46894: PUSH
46895: LD_INT 3
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: LIST
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PPUSH
46911: CALL_OW 72
46915: ST_TO_ADDR
46916: GO 47000
46918: LD_INT 4
46920: DOUBLE
46921: EQUAL
46922: IFTRUE 46926
46924: GO 46999
46926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46927: LD_ADDR_VAR 0 12
46931: PUSH
46932: LD_VAR 0 18
46936: PPUSH
46937: LD_INT 22
46939: PUSH
46940: LD_VAR 0 16
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 30
46954: PUSH
46955: LD_INT 6
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 30
46964: PUSH
46965: LD_INT 7
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 30
46974: PUSH
46975: LD_INT 8
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PPUSH
46992: CALL_OW 72
46996: ST_TO_ADDR
46997: GO 47000
46999: POP
// if i = 1 then
47000: LD_VAR 0 8
47004: PUSH
47005: LD_INT 1
47007: EQUAL
47008: IFFALSE 47119
// begin tmp := [ ] ;
47010: LD_ADDR_VAR 0 19
47014: PUSH
47015: EMPTY
47016: ST_TO_ADDR
// for j in f do
47017: LD_ADDR_VAR 0 9
47021: PUSH
47022: LD_VAR 0 12
47026: PUSH
47027: FOR_IN
47028: IFFALSE 47101
// if GetBType ( j ) = b_bunker then
47030: LD_VAR 0 9
47034: PPUSH
47035: CALL_OW 266
47039: PUSH
47040: LD_INT 32
47042: EQUAL
47043: IFFALSE 47070
// tmp := Insert ( tmp , 1 , j ) else
47045: LD_ADDR_VAR 0 19
47049: PUSH
47050: LD_VAR 0 19
47054: PPUSH
47055: LD_INT 1
47057: PPUSH
47058: LD_VAR 0 9
47062: PPUSH
47063: CALL_OW 2
47067: ST_TO_ADDR
47068: GO 47099
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47070: LD_ADDR_VAR 0 19
47074: PUSH
47075: LD_VAR 0 19
47079: PPUSH
47080: LD_VAR 0 19
47084: PUSH
47085: LD_INT 1
47087: PLUS
47088: PPUSH
47089: LD_VAR 0 9
47093: PPUSH
47094: CALL_OW 2
47098: ST_TO_ADDR
47099: GO 47027
47101: POP
47102: POP
// if tmp then
47103: LD_VAR 0 19
47107: IFFALSE 47119
// f := tmp ;
47109: LD_ADDR_VAR 0 12
47113: PUSH
47114: LD_VAR 0 19
47118: ST_TO_ADDR
// end ; x := personel [ i ] ;
47119: LD_ADDR_VAR 0 13
47123: PUSH
47124: LD_VAR 0 6
47128: PUSH
47129: LD_VAR 0 8
47133: ARRAY
47134: ST_TO_ADDR
// if x = - 1 then
47135: LD_VAR 0 13
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: EQUAL
47144: IFFALSE 47353
// begin for j in f do
47146: LD_ADDR_VAR 0 9
47150: PUSH
47151: LD_VAR 0 12
47155: PUSH
47156: FOR_IN
47157: IFFALSE 47349
// repeat InitHc ;
47159: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47163: LD_VAR 0 9
47167: PPUSH
47168: CALL_OW 266
47172: PUSH
47173: LD_INT 5
47175: EQUAL
47176: IFFALSE 47246
// begin if UnitsInside ( j ) < 3 then
47178: LD_VAR 0 9
47182: PPUSH
47183: CALL_OW 313
47187: PUSH
47188: LD_INT 3
47190: LESS
47191: IFFALSE 47227
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47193: LD_INT 0
47195: PPUSH
47196: LD_INT 5
47198: PUSH
47199: LD_INT 8
47201: PUSH
47202: LD_INT 9
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: PUSH
47210: LD_VAR 0 17
47214: ARRAY
47215: PPUSH
47216: LD_VAR 0 4
47220: PPUSH
47221: CALL_OW 380
47225: GO 47244
// PrepareHuman ( false , i , skill ) ;
47227: LD_INT 0
47229: PPUSH
47230: LD_VAR 0 8
47234: PPUSH
47235: LD_VAR 0 4
47239: PPUSH
47240: CALL_OW 380
// end else
47244: GO 47263
// PrepareHuman ( false , i , skill ) ;
47246: LD_INT 0
47248: PPUSH
47249: LD_VAR 0 8
47253: PPUSH
47254: LD_VAR 0 4
47258: PPUSH
47259: CALL_OW 380
// un := CreateHuman ;
47263: LD_ADDR_VAR 0 14
47267: PUSH
47268: CALL_OW 44
47272: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47273: LD_ADDR_VAR 0 7
47277: PUSH
47278: LD_VAR 0 7
47282: PPUSH
47283: LD_INT 1
47285: PPUSH
47286: LD_VAR 0 14
47290: PPUSH
47291: CALL_OW 2
47295: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47296: LD_VAR 0 14
47300: PPUSH
47301: LD_VAR 0 9
47305: PPUSH
47306: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47310: LD_VAR 0 9
47314: PPUSH
47315: CALL_OW 313
47319: PUSH
47320: LD_INT 6
47322: EQUAL
47323: PUSH
47324: LD_VAR 0 9
47328: PPUSH
47329: CALL_OW 266
47333: PUSH
47334: LD_INT 32
47336: PUSH
47337: LD_INT 31
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: IN
47344: OR
47345: IFFALSE 47159
47347: GO 47156
47349: POP
47350: POP
// end else
47351: GO 47733
// for j = 1 to x do
47353: LD_ADDR_VAR 0 9
47357: PUSH
47358: DOUBLE
47359: LD_INT 1
47361: DEC
47362: ST_TO_ADDR
47363: LD_VAR 0 13
47367: PUSH
47368: FOR_TO
47369: IFFALSE 47731
// begin InitHc ;
47371: CALL_OW 19
// if not f then
47375: LD_VAR 0 12
47379: NOT
47380: IFFALSE 47469
// begin PrepareHuman ( false , i , skill ) ;
47382: LD_INT 0
47384: PPUSH
47385: LD_VAR 0 8
47389: PPUSH
47390: LD_VAR 0 4
47394: PPUSH
47395: CALL_OW 380
// un := CreateHuman ;
47399: LD_ADDR_VAR 0 14
47403: PUSH
47404: CALL_OW 44
47408: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47409: LD_ADDR_VAR 0 7
47413: PUSH
47414: LD_VAR 0 7
47418: PPUSH
47419: LD_INT 1
47421: PPUSH
47422: LD_VAR 0 14
47426: PPUSH
47427: CALL_OW 2
47431: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47432: LD_VAR 0 14
47436: PPUSH
47437: LD_VAR 0 1
47441: PPUSH
47442: CALL_OW 250
47446: PPUSH
47447: LD_VAR 0 1
47451: PPUSH
47452: CALL_OW 251
47456: PPUSH
47457: LD_INT 10
47459: PPUSH
47460: LD_INT 0
47462: PPUSH
47463: CALL_OW 50
// continue ;
47467: GO 47368
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47469: LD_VAR 0 12
47473: PUSH
47474: LD_INT 1
47476: ARRAY
47477: PPUSH
47478: CALL_OW 313
47482: PUSH
47483: LD_VAR 0 12
47487: PUSH
47488: LD_INT 1
47490: ARRAY
47491: PPUSH
47492: CALL_OW 266
47496: PUSH
47497: LD_INT 32
47499: PUSH
47500: LD_INT 31
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: IN
47507: AND
47508: PUSH
47509: LD_VAR 0 12
47513: PUSH
47514: LD_INT 1
47516: ARRAY
47517: PPUSH
47518: CALL_OW 313
47522: PUSH
47523: LD_INT 6
47525: EQUAL
47526: OR
47527: IFFALSE 47547
// f := Delete ( f , 1 ) ;
47529: LD_ADDR_VAR 0 12
47533: PUSH
47534: LD_VAR 0 12
47538: PPUSH
47539: LD_INT 1
47541: PPUSH
47542: CALL_OW 3
47546: ST_TO_ADDR
// if not f then
47547: LD_VAR 0 12
47551: NOT
47552: IFFALSE 47570
// begin x := x + 2 ;
47554: LD_ADDR_VAR 0 13
47558: PUSH
47559: LD_VAR 0 13
47563: PUSH
47564: LD_INT 2
47566: PLUS
47567: ST_TO_ADDR
// continue ;
47568: GO 47368
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47570: LD_VAR 0 12
47574: PUSH
47575: LD_INT 1
47577: ARRAY
47578: PPUSH
47579: CALL_OW 266
47583: PUSH
47584: LD_INT 5
47586: EQUAL
47587: IFFALSE 47661
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47589: LD_VAR 0 12
47593: PUSH
47594: LD_INT 1
47596: ARRAY
47597: PPUSH
47598: CALL_OW 313
47602: PUSH
47603: LD_INT 3
47605: LESS
47606: IFFALSE 47642
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47608: LD_INT 0
47610: PPUSH
47611: LD_INT 5
47613: PUSH
47614: LD_INT 8
47616: PUSH
47617: LD_INT 9
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: LIST
47624: PUSH
47625: LD_VAR 0 17
47629: ARRAY
47630: PPUSH
47631: LD_VAR 0 4
47635: PPUSH
47636: CALL_OW 380
47640: GO 47659
// PrepareHuman ( false , i , skill ) ;
47642: LD_INT 0
47644: PPUSH
47645: LD_VAR 0 8
47649: PPUSH
47650: LD_VAR 0 4
47654: PPUSH
47655: CALL_OW 380
// end else
47659: GO 47678
// PrepareHuman ( false , i , skill ) ;
47661: LD_INT 0
47663: PPUSH
47664: LD_VAR 0 8
47668: PPUSH
47669: LD_VAR 0 4
47673: PPUSH
47674: CALL_OW 380
// un := CreateHuman ;
47678: LD_ADDR_VAR 0 14
47682: PUSH
47683: CALL_OW 44
47687: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47688: LD_ADDR_VAR 0 7
47692: PUSH
47693: LD_VAR 0 7
47697: PPUSH
47698: LD_INT 1
47700: PPUSH
47701: LD_VAR 0 14
47705: PPUSH
47706: CALL_OW 2
47710: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47711: LD_VAR 0 14
47715: PPUSH
47716: LD_VAR 0 12
47720: PUSH
47721: LD_INT 1
47723: ARRAY
47724: PPUSH
47725: CALL_OW 52
// end ;
47729: GO 47368
47731: POP
47732: POP
// end ;
47733: GO 46670
47735: POP
47736: POP
// result := result ^ buildings ;
47737: LD_ADDR_VAR 0 7
47741: PUSH
47742: LD_VAR 0 7
47746: PUSH
47747: LD_VAR 0 18
47751: ADD
47752: ST_TO_ADDR
// end else
47753: GO 47896
// begin for i = 1 to personel do
47755: LD_ADDR_VAR 0 8
47759: PUSH
47760: DOUBLE
47761: LD_INT 1
47763: DEC
47764: ST_TO_ADDR
47765: LD_VAR 0 6
47769: PUSH
47770: FOR_TO
47771: IFFALSE 47894
// begin if i > 4 then
47773: LD_VAR 0 8
47777: PUSH
47778: LD_INT 4
47780: GREATER
47781: IFFALSE 47785
// break ;
47783: GO 47894
// x := personel [ i ] ;
47785: LD_ADDR_VAR 0 13
47789: PUSH
47790: LD_VAR 0 6
47794: PUSH
47795: LD_VAR 0 8
47799: ARRAY
47800: ST_TO_ADDR
// if x = - 1 then
47801: LD_VAR 0 13
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: EQUAL
47810: IFFALSE 47814
// continue ;
47812: GO 47770
// PrepareHuman ( false , i , skill ) ;
47814: LD_INT 0
47816: PPUSH
47817: LD_VAR 0 8
47821: PPUSH
47822: LD_VAR 0 4
47826: PPUSH
47827: CALL_OW 380
// un := CreateHuman ;
47831: LD_ADDR_VAR 0 14
47835: PUSH
47836: CALL_OW 44
47840: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47841: LD_VAR 0 14
47845: PPUSH
47846: LD_VAR 0 1
47850: PPUSH
47851: CALL_OW 250
47855: PPUSH
47856: LD_VAR 0 1
47860: PPUSH
47861: CALL_OW 251
47865: PPUSH
47866: LD_INT 10
47868: PPUSH
47869: LD_INT 0
47871: PPUSH
47872: CALL_OW 50
// result := result ^ un ;
47876: LD_ADDR_VAR 0 7
47880: PUSH
47881: LD_VAR 0 7
47885: PUSH
47886: LD_VAR 0 14
47890: ADD
47891: ST_TO_ADDR
// end ;
47892: GO 47770
47894: POP
47895: POP
// end ; end ;
47896: LD_VAR 0 7
47900: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47901: LD_INT 0
47903: PPUSH
47904: PPUSH
47905: PPUSH
47906: PPUSH
47907: PPUSH
47908: PPUSH
47909: PPUSH
47910: PPUSH
47911: PPUSH
47912: PPUSH
47913: PPUSH
47914: PPUSH
47915: PPUSH
47916: PPUSH
47917: PPUSH
47918: PPUSH
// result := false ;
47919: LD_ADDR_VAR 0 3
47923: PUSH
47924: LD_INT 0
47926: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47927: LD_VAR 0 1
47931: NOT
47932: PUSH
47933: LD_VAR 0 1
47937: PPUSH
47938: CALL_OW 266
47942: PUSH
47943: LD_INT 32
47945: PUSH
47946: LD_INT 33
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: IN
47953: NOT
47954: OR
47955: IFFALSE 47959
// exit ;
47957: GO 49068
// nat := GetNation ( tower ) ;
47959: LD_ADDR_VAR 0 12
47963: PUSH
47964: LD_VAR 0 1
47968: PPUSH
47969: CALL_OW 248
47973: ST_TO_ADDR
// side := GetSide ( tower ) ;
47974: LD_ADDR_VAR 0 16
47978: PUSH
47979: LD_VAR 0 1
47983: PPUSH
47984: CALL_OW 255
47988: ST_TO_ADDR
// x := GetX ( tower ) ;
47989: LD_ADDR_VAR 0 10
47993: PUSH
47994: LD_VAR 0 1
47998: PPUSH
47999: CALL_OW 250
48003: ST_TO_ADDR
// y := GetY ( tower ) ;
48004: LD_ADDR_VAR 0 11
48008: PUSH
48009: LD_VAR 0 1
48013: PPUSH
48014: CALL_OW 251
48018: ST_TO_ADDR
// if not x or not y then
48019: LD_VAR 0 10
48023: NOT
48024: PUSH
48025: LD_VAR 0 11
48029: NOT
48030: OR
48031: IFFALSE 48035
// exit ;
48033: GO 49068
// weapon := 0 ;
48035: LD_ADDR_VAR 0 18
48039: PUSH
48040: LD_INT 0
48042: ST_TO_ADDR
// fac_list := [ ] ;
48043: LD_ADDR_VAR 0 17
48047: PUSH
48048: EMPTY
48049: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48050: LD_ADDR_VAR 0 6
48054: PUSH
48055: LD_VAR 0 1
48059: PPUSH
48060: CALL_OW 274
48064: PPUSH
48065: LD_VAR 0 2
48069: PPUSH
48070: LD_INT 0
48072: PPUSH
48073: CALL 45639 0 3
48077: PPUSH
48078: LD_INT 30
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PPUSH
48088: CALL_OW 72
48092: ST_TO_ADDR
// if not factories then
48093: LD_VAR 0 6
48097: NOT
48098: IFFALSE 48102
// exit ;
48100: GO 49068
// for i in factories do
48102: LD_ADDR_VAR 0 8
48106: PUSH
48107: LD_VAR 0 6
48111: PUSH
48112: FOR_IN
48113: IFFALSE 48138
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48115: LD_ADDR_VAR 0 17
48119: PUSH
48120: LD_VAR 0 17
48124: PUSH
48125: LD_VAR 0 8
48129: PPUSH
48130: CALL_OW 478
48134: UNION
48135: ST_TO_ADDR
48136: GO 48112
48138: POP
48139: POP
// if not fac_list then
48140: LD_VAR 0 17
48144: NOT
48145: IFFALSE 48149
// exit ;
48147: GO 49068
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48149: LD_ADDR_VAR 0 5
48153: PUSH
48154: LD_INT 4
48156: PUSH
48157: LD_INT 5
48159: PUSH
48160: LD_INT 9
48162: PUSH
48163: LD_INT 10
48165: PUSH
48166: LD_INT 6
48168: PUSH
48169: LD_INT 7
48171: PUSH
48172: LD_INT 11
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 27
48186: PUSH
48187: LD_INT 28
48189: PUSH
48190: LD_INT 26
48192: PUSH
48193: LD_INT 30
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 43
48204: PUSH
48205: LD_INT 44
48207: PUSH
48208: LD_INT 46
48210: PUSH
48211: LD_INT 45
48213: PUSH
48214: LD_INT 47
48216: PUSH
48217: LD_INT 49
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: PUSH
48233: LD_VAR 0 12
48237: ARRAY
48238: ST_TO_ADDR
// list := list isect fac_list ;
48239: LD_ADDR_VAR 0 5
48243: PUSH
48244: LD_VAR 0 5
48248: PUSH
48249: LD_VAR 0 17
48253: ISECT
48254: ST_TO_ADDR
// if not list then
48255: LD_VAR 0 5
48259: NOT
48260: IFFALSE 48264
// exit ;
48262: GO 49068
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48264: LD_VAR 0 12
48268: PUSH
48269: LD_INT 3
48271: EQUAL
48272: PUSH
48273: LD_INT 49
48275: PUSH
48276: LD_VAR 0 5
48280: IN
48281: AND
48282: PUSH
48283: LD_INT 31
48285: PPUSH
48286: LD_VAR 0 16
48290: PPUSH
48291: CALL_OW 321
48295: PUSH
48296: LD_INT 2
48298: EQUAL
48299: AND
48300: IFFALSE 48360
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48302: LD_INT 22
48304: PUSH
48305: LD_VAR 0 16
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 35
48316: PUSH
48317: LD_INT 49
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 91
48326: PUSH
48327: LD_VAR 0 1
48331: PUSH
48332: LD_INT 10
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: LIST
48344: PPUSH
48345: CALL_OW 69
48349: NOT
48350: IFFALSE 48360
// weapon := ru_time_lapser ;
48352: LD_ADDR_VAR 0 18
48356: PUSH
48357: LD_INT 49
48359: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48360: LD_VAR 0 12
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: IN
48375: PUSH
48376: LD_INT 11
48378: PUSH
48379: LD_VAR 0 5
48383: IN
48384: PUSH
48385: LD_INT 30
48387: PUSH
48388: LD_VAR 0 5
48392: IN
48393: OR
48394: AND
48395: PUSH
48396: LD_INT 6
48398: PPUSH
48399: LD_VAR 0 16
48403: PPUSH
48404: CALL_OW 321
48408: PUSH
48409: LD_INT 2
48411: EQUAL
48412: AND
48413: IFFALSE 48578
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48415: LD_INT 22
48417: PUSH
48418: LD_VAR 0 16
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 35
48432: PUSH
48433: LD_INT 11
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 35
48442: PUSH
48443: LD_INT 30
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 91
48457: PUSH
48458: LD_VAR 0 1
48462: PUSH
48463: LD_INT 18
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: PPUSH
48476: CALL_OW 69
48480: NOT
48481: PUSH
48482: LD_INT 22
48484: PUSH
48485: LD_VAR 0 16
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 30
48499: PUSH
48500: LD_INT 32
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 30
48509: PUSH
48510: LD_INT 33
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 91
48524: PUSH
48525: LD_VAR 0 1
48529: PUSH
48530: LD_INT 12
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: LIST
48542: PUSH
48543: EMPTY
48544: LIST
48545: PPUSH
48546: CALL_OW 69
48550: PUSH
48551: LD_INT 2
48553: GREATER
48554: AND
48555: IFFALSE 48578
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48557: LD_ADDR_VAR 0 18
48561: PUSH
48562: LD_INT 11
48564: PUSH
48565: LD_INT 30
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_VAR 0 12
48576: ARRAY
48577: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48578: LD_VAR 0 18
48582: NOT
48583: PUSH
48584: LD_INT 40
48586: PPUSH
48587: LD_VAR 0 16
48591: PPUSH
48592: CALL_OW 321
48596: PUSH
48597: LD_INT 2
48599: EQUAL
48600: AND
48601: PUSH
48602: LD_INT 7
48604: PUSH
48605: LD_VAR 0 5
48609: IN
48610: PUSH
48611: LD_INT 28
48613: PUSH
48614: LD_VAR 0 5
48618: IN
48619: OR
48620: PUSH
48621: LD_INT 45
48623: PUSH
48624: LD_VAR 0 5
48628: IN
48629: OR
48630: AND
48631: IFFALSE 48885
// begin hex := GetHexInfo ( x , y ) ;
48633: LD_ADDR_VAR 0 4
48637: PUSH
48638: LD_VAR 0 10
48642: PPUSH
48643: LD_VAR 0 11
48647: PPUSH
48648: CALL_OW 546
48652: ST_TO_ADDR
// if hex [ 1 ] then
48653: LD_VAR 0 4
48657: PUSH
48658: LD_INT 1
48660: ARRAY
48661: IFFALSE 48665
// exit ;
48663: GO 49068
// height := hex [ 2 ] ;
48665: LD_ADDR_VAR 0 15
48669: PUSH
48670: LD_VAR 0 4
48674: PUSH
48675: LD_INT 2
48677: ARRAY
48678: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48679: LD_ADDR_VAR 0 14
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: LD_INT 3
48692: PUSH
48693: LD_INT 5
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: ST_TO_ADDR
// for i in tmp do
48702: LD_ADDR_VAR 0 8
48706: PUSH
48707: LD_VAR 0 14
48711: PUSH
48712: FOR_IN
48713: IFFALSE 48883
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48715: LD_ADDR_VAR 0 9
48719: PUSH
48720: LD_VAR 0 10
48724: PPUSH
48725: LD_VAR 0 8
48729: PPUSH
48730: LD_INT 5
48732: PPUSH
48733: CALL_OW 272
48737: PUSH
48738: LD_VAR 0 11
48742: PPUSH
48743: LD_VAR 0 8
48747: PPUSH
48748: LD_INT 5
48750: PPUSH
48751: CALL_OW 273
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48760: LD_VAR 0 9
48764: PUSH
48765: LD_INT 1
48767: ARRAY
48768: PPUSH
48769: LD_VAR 0 9
48773: PUSH
48774: LD_INT 2
48776: ARRAY
48777: PPUSH
48778: CALL_OW 488
48782: IFFALSE 48881
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48784: LD_ADDR_VAR 0 4
48788: PUSH
48789: LD_VAR 0 9
48793: PUSH
48794: LD_INT 1
48796: ARRAY
48797: PPUSH
48798: LD_VAR 0 9
48802: PUSH
48803: LD_INT 2
48805: ARRAY
48806: PPUSH
48807: CALL_OW 546
48811: ST_TO_ADDR
// if hex [ 1 ] then
48812: LD_VAR 0 4
48816: PUSH
48817: LD_INT 1
48819: ARRAY
48820: IFFALSE 48824
// continue ;
48822: GO 48712
// h := hex [ 2 ] ;
48824: LD_ADDR_VAR 0 13
48828: PUSH
48829: LD_VAR 0 4
48833: PUSH
48834: LD_INT 2
48836: ARRAY
48837: ST_TO_ADDR
// if h + 7 < height then
48838: LD_VAR 0 13
48842: PUSH
48843: LD_INT 7
48845: PLUS
48846: PUSH
48847: LD_VAR 0 15
48851: LESS
48852: IFFALSE 48881
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48854: LD_ADDR_VAR 0 18
48858: PUSH
48859: LD_INT 7
48861: PUSH
48862: LD_INT 28
48864: PUSH
48865: LD_INT 45
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: LIST
48872: PUSH
48873: LD_VAR 0 12
48877: ARRAY
48878: ST_TO_ADDR
// break ;
48879: GO 48883
// end ; end ; end ;
48881: GO 48712
48883: POP
48884: POP
// end ; if not weapon then
48885: LD_VAR 0 18
48889: NOT
48890: IFFALSE 48950
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48892: LD_ADDR_VAR 0 5
48896: PUSH
48897: LD_VAR 0 5
48901: PUSH
48902: LD_INT 11
48904: PUSH
48905: LD_INT 30
48907: PUSH
48908: LD_INT 49
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: LIST
48915: DIFF
48916: ST_TO_ADDR
// if not list then
48917: LD_VAR 0 5
48921: NOT
48922: IFFALSE 48926
// exit ;
48924: GO 49068
// weapon := list [ rand ( 1 , list ) ] ;
48926: LD_ADDR_VAR 0 18
48930: PUSH
48931: LD_VAR 0 5
48935: PUSH
48936: LD_INT 1
48938: PPUSH
48939: LD_VAR 0 5
48943: PPUSH
48944: CALL_OW 12
48948: ARRAY
48949: ST_TO_ADDR
// end ; if weapon then
48950: LD_VAR 0 18
48954: IFFALSE 49068
// begin tmp := CostOfWeapon ( weapon ) ;
48956: LD_ADDR_VAR 0 14
48960: PUSH
48961: LD_VAR 0 18
48965: PPUSH
48966: CALL_OW 451
48970: ST_TO_ADDR
// j := GetBase ( tower ) ;
48971: LD_ADDR_VAR 0 9
48975: PUSH
48976: LD_VAR 0 1
48980: PPUSH
48981: CALL_OW 274
48985: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48986: LD_VAR 0 9
48990: PPUSH
48991: LD_INT 1
48993: PPUSH
48994: CALL_OW 275
48998: PUSH
48999: LD_VAR 0 14
49003: PUSH
49004: LD_INT 1
49006: ARRAY
49007: GREATEREQUAL
49008: PUSH
49009: LD_VAR 0 9
49013: PPUSH
49014: LD_INT 2
49016: PPUSH
49017: CALL_OW 275
49021: PUSH
49022: LD_VAR 0 14
49026: PUSH
49027: LD_INT 2
49029: ARRAY
49030: GREATEREQUAL
49031: AND
49032: PUSH
49033: LD_VAR 0 9
49037: PPUSH
49038: LD_INT 3
49040: PPUSH
49041: CALL_OW 275
49045: PUSH
49046: LD_VAR 0 14
49050: PUSH
49051: LD_INT 3
49053: ARRAY
49054: GREATEREQUAL
49055: AND
49056: IFFALSE 49068
// result := weapon ;
49058: LD_ADDR_VAR 0 3
49062: PUSH
49063: LD_VAR 0 18
49067: ST_TO_ADDR
// end ; end ;
49068: LD_VAR 0 3
49072: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49073: LD_INT 0
49075: PPUSH
49076: PPUSH
// result := true ;
49077: LD_ADDR_VAR 0 3
49081: PUSH
49082: LD_INT 1
49084: ST_TO_ADDR
// if array1 = array2 then
49085: LD_VAR 0 1
49089: PUSH
49090: LD_VAR 0 2
49094: EQUAL
49095: IFFALSE 49155
// begin for i = 1 to array1 do
49097: LD_ADDR_VAR 0 4
49101: PUSH
49102: DOUBLE
49103: LD_INT 1
49105: DEC
49106: ST_TO_ADDR
49107: LD_VAR 0 1
49111: PUSH
49112: FOR_TO
49113: IFFALSE 49151
// if array1 [ i ] <> array2 [ i ] then
49115: LD_VAR 0 1
49119: PUSH
49120: LD_VAR 0 4
49124: ARRAY
49125: PUSH
49126: LD_VAR 0 2
49130: PUSH
49131: LD_VAR 0 4
49135: ARRAY
49136: NONEQUAL
49137: IFFALSE 49149
// begin result := false ;
49139: LD_ADDR_VAR 0 3
49143: PUSH
49144: LD_INT 0
49146: ST_TO_ADDR
// break ;
49147: GO 49151
// end ;
49149: GO 49112
49151: POP
49152: POP
// end else
49153: GO 49163
// result := false ;
49155: LD_ADDR_VAR 0 3
49159: PUSH
49160: LD_INT 0
49162: ST_TO_ADDR
// end ;
49163: LD_VAR 0 3
49167: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49168: LD_INT 0
49170: PPUSH
49171: PPUSH
// if not array1 or not array2 then
49172: LD_VAR 0 1
49176: NOT
49177: PUSH
49178: LD_VAR 0 2
49182: NOT
49183: OR
49184: IFFALSE 49188
// exit ;
49186: GO 49252
// result := true ;
49188: LD_ADDR_VAR 0 3
49192: PUSH
49193: LD_INT 1
49195: ST_TO_ADDR
// for i = 1 to array1 do
49196: LD_ADDR_VAR 0 4
49200: PUSH
49201: DOUBLE
49202: LD_INT 1
49204: DEC
49205: ST_TO_ADDR
49206: LD_VAR 0 1
49210: PUSH
49211: FOR_TO
49212: IFFALSE 49250
// if array1 [ i ] <> array2 [ i ] then
49214: LD_VAR 0 1
49218: PUSH
49219: LD_VAR 0 4
49223: ARRAY
49224: PUSH
49225: LD_VAR 0 2
49229: PUSH
49230: LD_VAR 0 4
49234: ARRAY
49235: NONEQUAL
49236: IFFALSE 49248
// begin result := false ;
49238: LD_ADDR_VAR 0 3
49242: PUSH
49243: LD_INT 0
49245: ST_TO_ADDR
// break ;
49246: GO 49250
// end ;
49248: GO 49211
49250: POP
49251: POP
// end ;
49252: LD_VAR 0 3
49256: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49257: LD_INT 0
49259: PPUSH
49260: PPUSH
49261: PPUSH
// pom := GetBase ( fac ) ;
49262: LD_ADDR_VAR 0 5
49266: PUSH
49267: LD_VAR 0 1
49271: PPUSH
49272: CALL_OW 274
49276: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49277: LD_ADDR_VAR 0 4
49281: PUSH
49282: LD_VAR 0 2
49286: PUSH
49287: LD_INT 1
49289: ARRAY
49290: PPUSH
49291: LD_VAR 0 2
49295: PUSH
49296: LD_INT 2
49298: ARRAY
49299: PPUSH
49300: LD_VAR 0 2
49304: PUSH
49305: LD_INT 3
49307: ARRAY
49308: PPUSH
49309: LD_VAR 0 2
49313: PUSH
49314: LD_INT 4
49316: ARRAY
49317: PPUSH
49318: CALL_OW 449
49322: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49323: LD_ADDR_VAR 0 3
49327: PUSH
49328: LD_VAR 0 5
49332: PPUSH
49333: LD_INT 1
49335: PPUSH
49336: CALL_OW 275
49340: PUSH
49341: LD_VAR 0 4
49345: PUSH
49346: LD_INT 1
49348: ARRAY
49349: GREATEREQUAL
49350: PUSH
49351: LD_VAR 0 5
49355: PPUSH
49356: LD_INT 2
49358: PPUSH
49359: CALL_OW 275
49363: PUSH
49364: LD_VAR 0 4
49368: PUSH
49369: LD_INT 2
49371: ARRAY
49372: GREATEREQUAL
49373: AND
49374: PUSH
49375: LD_VAR 0 5
49379: PPUSH
49380: LD_INT 3
49382: PPUSH
49383: CALL_OW 275
49387: PUSH
49388: LD_VAR 0 4
49392: PUSH
49393: LD_INT 3
49395: ARRAY
49396: GREATEREQUAL
49397: AND
49398: ST_TO_ADDR
// end ;
49399: LD_VAR 0 3
49403: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49404: LD_INT 0
49406: PPUSH
49407: PPUSH
49408: PPUSH
49409: PPUSH
// pom := GetBase ( building ) ;
49410: LD_ADDR_VAR 0 3
49414: PUSH
49415: LD_VAR 0 1
49419: PPUSH
49420: CALL_OW 274
49424: ST_TO_ADDR
// if not pom then
49425: LD_VAR 0 3
49429: NOT
49430: IFFALSE 49434
// exit ;
49432: GO 49604
// btype := GetBType ( building ) ;
49434: LD_ADDR_VAR 0 5
49438: PUSH
49439: LD_VAR 0 1
49443: PPUSH
49444: CALL_OW 266
49448: ST_TO_ADDR
// if btype = b_armoury then
49449: LD_VAR 0 5
49453: PUSH
49454: LD_INT 4
49456: EQUAL
49457: IFFALSE 49467
// btype := b_barracks ;
49459: LD_ADDR_VAR 0 5
49463: PUSH
49464: LD_INT 5
49466: ST_TO_ADDR
// if btype = b_depot then
49467: LD_VAR 0 5
49471: PUSH
49472: LD_INT 0
49474: EQUAL
49475: IFFALSE 49485
// btype := b_warehouse ;
49477: LD_ADDR_VAR 0 5
49481: PUSH
49482: LD_INT 1
49484: ST_TO_ADDR
// if btype = b_workshop then
49485: LD_VAR 0 5
49489: PUSH
49490: LD_INT 2
49492: EQUAL
49493: IFFALSE 49503
// btype := b_factory ;
49495: LD_ADDR_VAR 0 5
49499: PUSH
49500: LD_INT 3
49502: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49503: LD_ADDR_VAR 0 4
49507: PUSH
49508: LD_VAR 0 5
49512: PPUSH
49513: LD_VAR 0 1
49517: PPUSH
49518: CALL_OW 248
49522: PPUSH
49523: CALL_OW 450
49527: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49528: LD_ADDR_VAR 0 2
49532: PUSH
49533: LD_VAR 0 3
49537: PPUSH
49538: LD_INT 1
49540: PPUSH
49541: CALL_OW 275
49545: PUSH
49546: LD_VAR 0 4
49550: PUSH
49551: LD_INT 1
49553: ARRAY
49554: GREATEREQUAL
49555: PUSH
49556: LD_VAR 0 3
49560: PPUSH
49561: LD_INT 2
49563: PPUSH
49564: CALL_OW 275
49568: PUSH
49569: LD_VAR 0 4
49573: PUSH
49574: LD_INT 2
49576: ARRAY
49577: GREATEREQUAL
49578: AND
49579: PUSH
49580: LD_VAR 0 3
49584: PPUSH
49585: LD_INT 3
49587: PPUSH
49588: CALL_OW 275
49592: PUSH
49593: LD_VAR 0 4
49597: PUSH
49598: LD_INT 3
49600: ARRAY
49601: GREATEREQUAL
49602: AND
49603: ST_TO_ADDR
// end ;
49604: LD_VAR 0 2
49608: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49609: LD_INT 0
49611: PPUSH
49612: PPUSH
49613: PPUSH
// pom := GetBase ( building ) ;
49614: LD_ADDR_VAR 0 4
49618: PUSH
49619: LD_VAR 0 1
49623: PPUSH
49624: CALL_OW 274
49628: ST_TO_ADDR
// if not pom then
49629: LD_VAR 0 4
49633: NOT
49634: IFFALSE 49638
// exit ;
49636: GO 49739
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49638: LD_ADDR_VAR 0 5
49642: PUSH
49643: LD_VAR 0 2
49647: PPUSH
49648: LD_VAR 0 1
49652: PPUSH
49653: CALL_OW 248
49657: PPUSH
49658: CALL_OW 450
49662: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49663: LD_ADDR_VAR 0 3
49667: PUSH
49668: LD_VAR 0 4
49672: PPUSH
49673: LD_INT 1
49675: PPUSH
49676: CALL_OW 275
49680: PUSH
49681: LD_VAR 0 5
49685: PUSH
49686: LD_INT 1
49688: ARRAY
49689: GREATEREQUAL
49690: PUSH
49691: LD_VAR 0 4
49695: PPUSH
49696: LD_INT 2
49698: PPUSH
49699: CALL_OW 275
49703: PUSH
49704: LD_VAR 0 5
49708: PUSH
49709: LD_INT 2
49711: ARRAY
49712: GREATEREQUAL
49713: AND
49714: PUSH
49715: LD_VAR 0 4
49719: PPUSH
49720: LD_INT 3
49722: PPUSH
49723: CALL_OW 275
49727: PUSH
49728: LD_VAR 0 5
49732: PUSH
49733: LD_INT 3
49735: ARRAY
49736: GREATEREQUAL
49737: AND
49738: ST_TO_ADDR
// end ;
49739: LD_VAR 0 3
49743: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49744: LD_INT 0
49746: PPUSH
49747: PPUSH
49748: PPUSH
49749: PPUSH
49750: PPUSH
49751: PPUSH
49752: PPUSH
49753: PPUSH
49754: PPUSH
49755: PPUSH
49756: PPUSH
// result := false ;
49757: LD_ADDR_VAR 0 8
49761: PUSH
49762: LD_INT 0
49764: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49765: LD_VAR 0 5
49769: NOT
49770: PUSH
49771: LD_VAR 0 1
49775: NOT
49776: OR
49777: PUSH
49778: LD_VAR 0 2
49782: NOT
49783: OR
49784: PUSH
49785: LD_VAR 0 3
49789: NOT
49790: OR
49791: IFFALSE 49795
// exit ;
49793: GO 50609
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49795: LD_ADDR_VAR 0 14
49799: PUSH
49800: LD_VAR 0 1
49804: PPUSH
49805: LD_VAR 0 2
49809: PPUSH
49810: LD_VAR 0 3
49814: PPUSH
49815: LD_VAR 0 4
49819: PPUSH
49820: LD_VAR 0 5
49824: PUSH
49825: LD_INT 1
49827: ARRAY
49828: PPUSH
49829: CALL_OW 248
49833: PPUSH
49834: LD_INT 0
49836: PPUSH
49837: CALL 51862 0 6
49841: ST_TO_ADDR
// if not hexes then
49842: LD_VAR 0 14
49846: NOT
49847: IFFALSE 49851
// exit ;
49849: GO 50609
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49851: LD_ADDR_VAR 0 17
49855: PUSH
49856: LD_VAR 0 5
49860: PPUSH
49861: LD_INT 22
49863: PUSH
49864: LD_VAR 0 13
49868: PPUSH
49869: CALL_OW 255
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 30
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 30
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: LIST
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PPUSH
49910: CALL_OW 72
49914: ST_TO_ADDR
// for i = 1 to hexes do
49915: LD_ADDR_VAR 0 9
49919: PUSH
49920: DOUBLE
49921: LD_INT 1
49923: DEC
49924: ST_TO_ADDR
49925: LD_VAR 0 14
49929: PUSH
49930: FOR_TO
49931: IFFALSE 50607
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49933: LD_ADDR_VAR 0 13
49937: PUSH
49938: LD_VAR 0 14
49942: PUSH
49943: LD_VAR 0 9
49947: ARRAY
49948: PUSH
49949: LD_INT 1
49951: ARRAY
49952: PPUSH
49953: LD_VAR 0 14
49957: PUSH
49958: LD_VAR 0 9
49962: ARRAY
49963: PUSH
49964: LD_INT 2
49966: ARRAY
49967: PPUSH
49968: CALL_OW 428
49972: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49973: LD_VAR 0 14
49977: PUSH
49978: LD_VAR 0 9
49982: ARRAY
49983: PUSH
49984: LD_INT 1
49986: ARRAY
49987: PPUSH
49988: LD_VAR 0 14
49992: PUSH
49993: LD_VAR 0 9
49997: ARRAY
49998: PUSH
49999: LD_INT 2
50001: ARRAY
50002: PPUSH
50003: CALL_OW 351
50007: PUSH
50008: LD_VAR 0 14
50012: PUSH
50013: LD_VAR 0 9
50017: ARRAY
50018: PUSH
50019: LD_INT 1
50021: ARRAY
50022: PPUSH
50023: LD_VAR 0 14
50027: PUSH
50028: LD_VAR 0 9
50032: ARRAY
50033: PUSH
50034: LD_INT 2
50036: ARRAY
50037: PPUSH
50038: CALL_OW 488
50042: NOT
50043: OR
50044: PUSH
50045: LD_VAR 0 13
50049: PPUSH
50050: CALL_OW 247
50054: PUSH
50055: LD_INT 3
50057: EQUAL
50058: OR
50059: IFFALSE 50065
// exit ;
50061: POP
50062: POP
50063: GO 50609
// if not tmp then
50065: LD_VAR 0 13
50069: NOT
50070: IFFALSE 50074
// continue ;
50072: GO 49930
// result := true ;
50074: LD_ADDR_VAR 0 8
50078: PUSH
50079: LD_INT 1
50081: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50082: LD_VAR 0 6
50086: PUSH
50087: LD_VAR 0 13
50091: PPUSH
50092: CALL_OW 247
50096: PUSH
50097: LD_INT 2
50099: EQUAL
50100: AND
50101: PUSH
50102: LD_VAR 0 13
50106: PPUSH
50107: CALL_OW 263
50111: PUSH
50112: LD_INT 1
50114: EQUAL
50115: AND
50116: IFFALSE 50280
// begin if IsDrivenBy ( tmp ) then
50118: LD_VAR 0 13
50122: PPUSH
50123: CALL_OW 311
50127: IFFALSE 50131
// continue ;
50129: GO 49930
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50131: LD_VAR 0 6
50135: PPUSH
50136: LD_INT 3
50138: PUSH
50139: LD_INT 60
50141: PUSH
50142: EMPTY
50143: LIST
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: PUSH
50152: LD_INT 55
50154: PUSH
50155: EMPTY
50156: LIST
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PPUSH
50166: CALL_OW 72
50170: IFFALSE 50278
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50172: LD_ADDR_VAR 0 18
50176: PUSH
50177: LD_VAR 0 6
50181: PPUSH
50182: LD_INT 3
50184: PUSH
50185: LD_INT 60
50187: PUSH
50188: EMPTY
50189: LIST
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: LD_INT 55
50200: PUSH
50201: EMPTY
50202: LIST
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PPUSH
50212: CALL_OW 72
50216: PUSH
50217: LD_INT 1
50219: ARRAY
50220: ST_TO_ADDR
// if IsInUnit ( driver ) then
50221: LD_VAR 0 18
50225: PPUSH
50226: CALL_OW 310
50230: IFFALSE 50241
// ComExit ( driver ) ;
50232: LD_VAR 0 18
50236: PPUSH
50237: CALL 75641 0 1
// AddComEnterUnit ( driver , tmp ) ;
50241: LD_VAR 0 18
50245: PPUSH
50246: LD_VAR 0 13
50250: PPUSH
50251: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50255: LD_VAR 0 18
50259: PPUSH
50260: LD_VAR 0 7
50264: PPUSH
50265: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50269: LD_VAR 0 18
50273: PPUSH
50274: CALL_OW 181
// end ; continue ;
50278: GO 49930
// end ; if not cleaners or not tmp in cleaners then
50280: LD_VAR 0 6
50284: NOT
50285: PUSH
50286: LD_VAR 0 13
50290: PUSH
50291: LD_VAR 0 6
50295: IN
50296: NOT
50297: OR
50298: IFFALSE 50605
// begin if dep then
50300: LD_VAR 0 17
50304: IFFALSE 50440
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50306: LD_ADDR_VAR 0 16
50310: PUSH
50311: LD_VAR 0 17
50315: PUSH
50316: LD_INT 1
50318: ARRAY
50319: PPUSH
50320: CALL_OW 250
50324: PPUSH
50325: LD_VAR 0 17
50329: PUSH
50330: LD_INT 1
50332: ARRAY
50333: PPUSH
50334: CALL_OW 254
50338: PPUSH
50339: LD_INT 5
50341: PPUSH
50342: CALL_OW 272
50346: PUSH
50347: LD_VAR 0 17
50351: PUSH
50352: LD_INT 1
50354: ARRAY
50355: PPUSH
50356: CALL_OW 251
50360: PPUSH
50361: LD_VAR 0 17
50365: PUSH
50366: LD_INT 1
50368: ARRAY
50369: PPUSH
50370: CALL_OW 254
50374: PPUSH
50375: LD_INT 5
50377: PPUSH
50378: CALL_OW 273
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50387: LD_VAR 0 16
50391: PUSH
50392: LD_INT 1
50394: ARRAY
50395: PPUSH
50396: LD_VAR 0 16
50400: PUSH
50401: LD_INT 2
50403: ARRAY
50404: PPUSH
50405: CALL_OW 488
50409: IFFALSE 50440
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50411: LD_VAR 0 13
50415: PPUSH
50416: LD_VAR 0 16
50420: PUSH
50421: LD_INT 1
50423: ARRAY
50424: PPUSH
50425: LD_VAR 0 16
50429: PUSH
50430: LD_INT 2
50432: ARRAY
50433: PPUSH
50434: CALL_OW 111
// continue ;
50438: GO 49930
// end ; end ; r := GetDir ( tmp ) ;
50440: LD_ADDR_VAR 0 15
50444: PUSH
50445: LD_VAR 0 13
50449: PPUSH
50450: CALL_OW 254
50454: ST_TO_ADDR
// if r = 5 then
50455: LD_VAR 0 15
50459: PUSH
50460: LD_INT 5
50462: EQUAL
50463: IFFALSE 50473
// r := 0 ;
50465: LD_ADDR_VAR 0 15
50469: PUSH
50470: LD_INT 0
50472: ST_TO_ADDR
// for j = r to 5 do
50473: LD_ADDR_VAR 0 10
50477: PUSH
50478: DOUBLE
50479: LD_VAR 0 15
50483: DEC
50484: ST_TO_ADDR
50485: LD_INT 5
50487: PUSH
50488: FOR_TO
50489: IFFALSE 50603
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50491: LD_ADDR_VAR 0 11
50495: PUSH
50496: LD_VAR 0 13
50500: PPUSH
50501: CALL_OW 250
50505: PPUSH
50506: LD_VAR 0 10
50510: PPUSH
50511: LD_INT 2
50513: PPUSH
50514: CALL_OW 272
50518: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50519: LD_ADDR_VAR 0 12
50523: PUSH
50524: LD_VAR 0 13
50528: PPUSH
50529: CALL_OW 251
50533: PPUSH
50534: LD_VAR 0 10
50538: PPUSH
50539: LD_INT 2
50541: PPUSH
50542: CALL_OW 273
50546: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50547: LD_VAR 0 11
50551: PPUSH
50552: LD_VAR 0 12
50556: PPUSH
50557: CALL_OW 488
50561: PUSH
50562: LD_VAR 0 11
50566: PPUSH
50567: LD_VAR 0 12
50571: PPUSH
50572: CALL_OW 428
50576: NOT
50577: AND
50578: IFFALSE 50601
// begin ComMoveXY ( tmp , _x , _y ) ;
50580: LD_VAR 0 13
50584: PPUSH
50585: LD_VAR 0 11
50589: PPUSH
50590: LD_VAR 0 12
50594: PPUSH
50595: CALL_OW 111
// break ;
50599: GO 50603
// end ; end ;
50601: GO 50488
50603: POP
50604: POP
// end ; end ;
50605: GO 49930
50607: POP
50608: POP
// end ;
50609: LD_VAR 0 8
50613: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50614: LD_INT 0
50616: PPUSH
// result := true ;
50617: LD_ADDR_VAR 0 3
50621: PUSH
50622: LD_INT 1
50624: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50625: LD_VAR 0 2
50629: PUSH
50630: LD_INT 24
50632: DOUBLE
50633: EQUAL
50634: IFTRUE 50644
50636: LD_INT 33
50638: DOUBLE
50639: EQUAL
50640: IFTRUE 50644
50642: GO 50669
50644: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50645: LD_ADDR_VAR 0 3
50649: PUSH
50650: LD_INT 32
50652: PPUSH
50653: LD_VAR 0 1
50657: PPUSH
50658: CALL_OW 321
50662: PUSH
50663: LD_INT 2
50665: EQUAL
50666: ST_TO_ADDR
50667: GO 50985
50669: LD_INT 20
50671: DOUBLE
50672: EQUAL
50673: IFTRUE 50677
50675: GO 50702
50677: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50678: LD_ADDR_VAR 0 3
50682: PUSH
50683: LD_INT 6
50685: PPUSH
50686: LD_VAR 0 1
50690: PPUSH
50691: CALL_OW 321
50695: PUSH
50696: LD_INT 2
50698: EQUAL
50699: ST_TO_ADDR
50700: GO 50985
50702: LD_INT 22
50704: DOUBLE
50705: EQUAL
50706: IFTRUE 50716
50708: LD_INT 36
50710: DOUBLE
50711: EQUAL
50712: IFTRUE 50716
50714: GO 50741
50716: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50717: LD_ADDR_VAR 0 3
50721: PUSH
50722: LD_INT 15
50724: PPUSH
50725: LD_VAR 0 1
50729: PPUSH
50730: CALL_OW 321
50734: PUSH
50735: LD_INT 2
50737: EQUAL
50738: ST_TO_ADDR
50739: GO 50985
50741: LD_INT 30
50743: DOUBLE
50744: EQUAL
50745: IFTRUE 50749
50747: GO 50774
50749: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50750: LD_ADDR_VAR 0 3
50754: PUSH
50755: LD_INT 20
50757: PPUSH
50758: LD_VAR 0 1
50762: PPUSH
50763: CALL_OW 321
50767: PUSH
50768: LD_INT 2
50770: EQUAL
50771: ST_TO_ADDR
50772: GO 50985
50774: LD_INT 28
50776: DOUBLE
50777: EQUAL
50778: IFTRUE 50788
50780: LD_INT 21
50782: DOUBLE
50783: EQUAL
50784: IFTRUE 50788
50786: GO 50813
50788: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50789: LD_ADDR_VAR 0 3
50793: PUSH
50794: LD_INT 21
50796: PPUSH
50797: LD_VAR 0 1
50801: PPUSH
50802: CALL_OW 321
50806: PUSH
50807: LD_INT 2
50809: EQUAL
50810: ST_TO_ADDR
50811: GO 50985
50813: LD_INT 16
50815: DOUBLE
50816: EQUAL
50817: IFTRUE 50821
50819: GO 50846
50821: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50822: LD_ADDR_VAR 0 3
50826: PUSH
50827: LD_INT 84
50829: PPUSH
50830: LD_VAR 0 1
50834: PPUSH
50835: CALL_OW 321
50839: PUSH
50840: LD_INT 2
50842: EQUAL
50843: ST_TO_ADDR
50844: GO 50985
50846: LD_INT 19
50848: DOUBLE
50849: EQUAL
50850: IFTRUE 50860
50852: LD_INT 23
50854: DOUBLE
50855: EQUAL
50856: IFTRUE 50860
50858: GO 50885
50860: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50861: LD_ADDR_VAR 0 3
50865: PUSH
50866: LD_INT 83
50868: PPUSH
50869: LD_VAR 0 1
50873: PPUSH
50874: CALL_OW 321
50878: PUSH
50879: LD_INT 2
50881: EQUAL
50882: ST_TO_ADDR
50883: GO 50985
50885: LD_INT 17
50887: DOUBLE
50888: EQUAL
50889: IFTRUE 50893
50891: GO 50918
50893: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50894: LD_ADDR_VAR 0 3
50898: PUSH
50899: LD_INT 39
50901: PPUSH
50902: LD_VAR 0 1
50906: PPUSH
50907: CALL_OW 321
50911: PUSH
50912: LD_INT 2
50914: EQUAL
50915: ST_TO_ADDR
50916: GO 50985
50918: LD_INT 18
50920: DOUBLE
50921: EQUAL
50922: IFTRUE 50926
50924: GO 50951
50926: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50927: LD_ADDR_VAR 0 3
50931: PUSH
50932: LD_INT 40
50934: PPUSH
50935: LD_VAR 0 1
50939: PPUSH
50940: CALL_OW 321
50944: PUSH
50945: LD_INT 2
50947: EQUAL
50948: ST_TO_ADDR
50949: GO 50985
50951: LD_INT 27
50953: DOUBLE
50954: EQUAL
50955: IFTRUE 50959
50957: GO 50984
50959: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50960: LD_ADDR_VAR 0 3
50964: PUSH
50965: LD_INT 35
50967: PPUSH
50968: LD_VAR 0 1
50972: PPUSH
50973: CALL_OW 321
50977: PUSH
50978: LD_INT 2
50980: EQUAL
50981: ST_TO_ADDR
50982: GO 50985
50984: POP
// end ;
50985: LD_VAR 0 3
50989: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50990: LD_INT 0
50992: PPUSH
50993: PPUSH
50994: PPUSH
50995: PPUSH
50996: PPUSH
50997: PPUSH
50998: PPUSH
50999: PPUSH
51000: PPUSH
51001: PPUSH
51002: PPUSH
// result := false ;
51003: LD_ADDR_VAR 0 6
51007: PUSH
51008: LD_INT 0
51010: ST_TO_ADDR
// if btype = b_depot then
51011: LD_VAR 0 2
51015: PUSH
51016: LD_INT 0
51018: EQUAL
51019: IFFALSE 51031
// begin result := true ;
51021: LD_ADDR_VAR 0 6
51025: PUSH
51026: LD_INT 1
51028: ST_TO_ADDR
// exit ;
51029: GO 51857
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51031: LD_VAR 0 1
51035: NOT
51036: PUSH
51037: LD_VAR 0 1
51041: PPUSH
51042: CALL_OW 266
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: IN
51057: NOT
51058: OR
51059: PUSH
51060: LD_VAR 0 2
51064: NOT
51065: OR
51066: PUSH
51067: LD_VAR 0 5
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: LD_INT 3
51083: PUSH
51084: LD_INT 4
51086: PUSH
51087: LD_INT 5
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: IN
51098: NOT
51099: OR
51100: PUSH
51101: LD_VAR 0 3
51105: PPUSH
51106: LD_VAR 0 4
51110: PPUSH
51111: CALL_OW 488
51115: NOT
51116: OR
51117: IFFALSE 51121
// exit ;
51119: GO 51857
// side := GetSide ( depot ) ;
51121: LD_ADDR_VAR 0 9
51125: PUSH
51126: LD_VAR 0 1
51130: PPUSH
51131: CALL_OW 255
51135: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51136: LD_VAR 0 9
51140: PPUSH
51141: LD_VAR 0 2
51145: PPUSH
51146: CALL 50614 0 2
51150: NOT
51151: IFFALSE 51155
// exit ;
51153: GO 51857
// pom := GetBase ( depot ) ;
51155: LD_ADDR_VAR 0 10
51159: PUSH
51160: LD_VAR 0 1
51164: PPUSH
51165: CALL_OW 274
51169: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51170: LD_ADDR_VAR 0 11
51174: PUSH
51175: LD_VAR 0 2
51179: PPUSH
51180: LD_VAR 0 1
51184: PPUSH
51185: CALL_OW 248
51189: PPUSH
51190: CALL_OW 450
51194: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51195: LD_VAR 0 10
51199: PPUSH
51200: LD_INT 1
51202: PPUSH
51203: CALL_OW 275
51207: PUSH
51208: LD_VAR 0 11
51212: PUSH
51213: LD_INT 1
51215: ARRAY
51216: GREATEREQUAL
51217: PUSH
51218: LD_VAR 0 10
51222: PPUSH
51223: LD_INT 2
51225: PPUSH
51226: CALL_OW 275
51230: PUSH
51231: LD_VAR 0 11
51235: PUSH
51236: LD_INT 2
51238: ARRAY
51239: GREATEREQUAL
51240: AND
51241: PUSH
51242: LD_VAR 0 10
51246: PPUSH
51247: LD_INT 3
51249: PPUSH
51250: CALL_OW 275
51254: PUSH
51255: LD_VAR 0 11
51259: PUSH
51260: LD_INT 3
51262: ARRAY
51263: GREATEREQUAL
51264: AND
51265: NOT
51266: IFFALSE 51270
// exit ;
51268: GO 51857
// if GetBType ( depot ) = b_depot then
51270: LD_VAR 0 1
51274: PPUSH
51275: CALL_OW 266
51279: PUSH
51280: LD_INT 0
51282: EQUAL
51283: IFFALSE 51295
// dist := 28 else
51285: LD_ADDR_VAR 0 14
51289: PUSH
51290: LD_INT 28
51292: ST_TO_ADDR
51293: GO 51303
// dist := 36 ;
51295: LD_ADDR_VAR 0 14
51299: PUSH
51300: LD_INT 36
51302: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51303: LD_VAR 0 1
51307: PPUSH
51308: LD_VAR 0 3
51312: PPUSH
51313: LD_VAR 0 4
51317: PPUSH
51318: CALL_OW 297
51322: PUSH
51323: LD_VAR 0 14
51327: GREATER
51328: IFFALSE 51332
// exit ;
51330: GO 51857
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51332: LD_ADDR_VAR 0 12
51336: PUSH
51337: LD_VAR 0 2
51341: PPUSH
51342: LD_VAR 0 3
51346: PPUSH
51347: LD_VAR 0 4
51351: PPUSH
51352: LD_VAR 0 5
51356: PPUSH
51357: LD_VAR 0 1
51361: PPUSH
51362: CALL_OW 248
51366: PPUSH
51367: LD_INT 0
51369: PPUSH
51370: CALL 51862 0 6
51374: ST_TO_ADDR
// if not hexes then
51375: LD_VAR 0 12
51379: NOT
51380: IFFALSE 51384
// exit ;
51382: GO 51857
// hex := GetHexInfo ( x , y ) ;
51384: LD_ADDR_VAR 0 15
51388: PUSH
51389: LD_VAR 0 3
51393: PPUSH
51394: LD_VAR 0 4
51398: PPUSH
51399: CALL_OW 546
51403: ST_TO_ADDR
// if hex [ 1 ] then
51404: LD_VAR 0 15
51408: PUSH
51409: LD_INT 1
51411: ARRAY
51412: IFFALSE 51416
// exit ;
51414: GO 51857
// height := hex [ 2 ] ;
51416: LD_ADDR_VAR 0 13
51420: PUSH
51421: LD_VAR 0 15
51425: PUSH
51426: LD_INT 2
51428: ARRAY
51429: ST_TO_ADDR
// for i = 1 to hexes do
51430: LD_ADDR_VAR 0 7
51434: PUSH
51435: DOUBLE
51436: LD_INT 1
51438: DEC
51439: ST_TO_ADDR
51440: LD_VAR 0 12
51444: PUSH
51445: FOR_TO
51446: IFFALSE 51776
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51448: LD_VAR 0 12
51452: PUSH
51453: LD_VAR 0 7
51457: ARRAY
51458: PUSH
51459: LD_INT 1
51461: ARRAY
51462: PPUSH
51463: LD_VAR 0 12
51467: PUSH
51468: LD_VAR 0 7
51472: ARRAY
51473: PUSH
51474: LD_INT 2
51476: ARRAY
51477: PPUSH
51478: CALL_OW 488
51482: NOT
51483: PUSH
51484: LD_VAR 0 12
51488: PUSH
51489: LD_VAR 0 7
51493: ARRAY
51494: PUSH
51495: LD_INT 1
51497: ARRAY
51498: PPUSH
51499: LD_VAR 0 12
51503: PUSH
51504: LD_VAR 0 7
51508: ARRAY
51509: PUSH
51510: LD_INT 2
51512: ARRAY
51513: PPUSH
51514: CALL_OW 428
51518: PUSH
51519: LD_INT 0
51521: GREATER
51522: OR
51523: PUSH
51524: LD_VAR 0 12
51528: PUSH
51529: LD_VAR 0 7
51533: ARRAY
51534: PUSH
51535: LD_INT 1
51537: ARRAY
51538: PPUSH
51539: LD_VAR 0 12
51543: PUSH
51544: LD_VAR 0 7
51548: ARRAY
51549: PUSH
51550: LD_INT 2
51552: ARRAY
51553: PPUSH
51554: CALL_OW 351
51558: OR
51559: IFFALSE 51565
// exit ;
51561: POP
51562: POP
51563: GO 51857
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51565: LD_ADDR_VAR 0 8
51569: PUSH
51570: LD_VAR 0 12
51574: PUSH
51575: LD_VAR 0 7
51579: ARRAY
51580: PUSH
51581: LD_INT 1
51583: ARRAY
51584: PPUSH
51585: LD_VAR 0 12
51589: PUSH
51590: LD_VAR 0 7
51594: ARRAY
51595: PUSH
51596: LD_INT 2
51598: ARRAY
51599: PPUSH
51600: CALL_OW 546
51604: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51605: LD_VAR 0 8
51609: PUSH
51610: LD_INT 1
51612: ARRAY
51613: PUSH
51614: LD_VAR 0 8
51618: PUSH
51619: LD_INT 2
51621: ARRAY
51622: PUSH
51623: LD_VAR 0 13
51627: PUSH
51628: LD_INT 2
51630: PLUS
51631: GREATER
51632: OR
51633: PUSH
51634: LD_VAR 0 8
51638: PUSH
51639: LD_INT 2
51641: ARRAY
51642: PUSH
51643: LD_VAR 0 13
51647: PUSH
51648: LD_INT 2
51650: MINUS
51651: LESS
51652: OR
51653: PUSH
51654: LD_VAR 0 8
51658: PUSH
51659: LD_INT 3
51661: ARRAY
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 8
51668: PUSH
51669: LD_INT 9
51671: PUSH
51672: LD_INT 10
51674: PUSH
51675: LD_INT 11
51677: PUSH
51678: LD_INT 12
51680: PUSH
51681: LD_INT 13
51683: PUSH
51684: LD_INT 16
51686: PUSH
51687: LD_INT 17
51689: PUSH
51690: LD_INT 18
51692: PUSH
51693: LD_INT 19
51695: PUSH
51696: LD_INT 20
51698: PUSH
51699: LD_INT 21
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: IN
51717: NOT
51718: OR
51719: PUSH
51720: LD_VAR 0 8
51724: PUSH
51725: LD_INT 5
51727: ARRAY
51728: NOT
51729: OR
51730: PUSH
51731: LD_VAR 0 8
51735: PUSH
51736: LD_INT 6
51738: ARRAY
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: LD_INT 7
51748: PUSH
51749: LD_INT 9
51751: PUSH
51752: LD_INT 10
51754: PUSH
51755: LD_INT 11
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: IN
51766: NOT
51767: OR
51768: IFFALSE 51774
// exit ;
51770: POP
51771: POP
51772: GO 51857
// end ;
51774: GO 51445
51776: POP
51777: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51778: LD_VAR 0 9
51782: PPUSH
51783: LD_VAR 0 3
51787: PPUSH
51788: LD_VAR 0 4
51792: PPUSH
51793: LD_INT 20
51795: PPUSH
51796: CALL 43780 0 4
51800: PUSH
51801: LD_INT 4
51803: ARRAY
51804: IFFALSE 51808
// exit ;
51806: GO 51857
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51808: LD_VAR 0 2
51812: PUSH
51813: LD_INT 29
51815: PUSH
51816: LD_INT 30
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: IN
51823: PUSH
51824: LD_VAR 0 3
51828: PPUSH
51829: LD_VAR 0 4
51833: PPUSH
51834: LD_VAR 0 9
51838: PPUSH
51839: CALL_OW 440
51843: NOT
51844: AND
51845: IFFALSE 51849
// exit ;
51847: GO 51857
// result := true ;
51849: LD_ADDR_VAR 0 6
51853: PUSH
51854: LD_INT 1
51856: ST_TO_ADDR
// end ;
51857: LD_VAR 0 6
51861: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51862: LD_INT 0
51864: PPUSH
51865: PPUSH
51866: PPUSH
51867: PPUSH
51868: PPUSH
51869: PPUSH
51870: PPUSH
51871: PPUSH
51872: PPUSH
51873: PPUSH
51874: PPUSH
51875: PPUSH
51876: PPUSH
51877: PPUSH
51878: PPUSH
51879: PPUSH
51880: PPUSH
51881: PPUSH
51882: PPUSH
51883: PPUSH
51884: PPUSH
51885: PPUSH
51886: PPUSH
51887: PPUSH
51888: PPUSH
51889: PPUSH
51890: PPUSH
51891: PPUSH
51892: PPUSH
51893: PPUSH
51894: PPUSH
51895: PPUSH
51896: PPUSH
51897: PPUSH
51898: PPUSH
51899: PPUSH
51900: PPUSH
51901: PPUSH
51902: PPUSH
51903: PPUSH
51904: PPUSH
51905: PPUSH
51906: PPUSH
51907: PPUSH
51908: PPUSH
51909: PPUSH
51910: PPUSH
51911: PPUSH
51912: PPUSH
51913: PPUSH
51914: PPUSH
51915: PPUSH
51916: PPUSH
51917: PPUSH
51918: PPUSH
51919: PPUSH
51920: PPUSH
51921: PPUSH
// result = [ ] ;
51922: LD_ADDR_VAR 0 7
51926: PUSH
51927: EMPTY
51928: ST_TO_ADDR
// temp_list = [ ] ;
51929: LD_ADDR_VAR 0 9
51933: PUSH
51934: EMPTY
51935: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51936: LD_VAR 0 4
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: LD_INT 3
51952: PUSH
51953: LD_INT 4
51955: PUSH
51956: LD_INT 5
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: IN
51967: NOT
51968: PUSH
51969: LD_VAR 0 1
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: IN
51984: PUSH
51985: LD_VAR 0 5
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: LIST
52003: IN
52004: NOT
52005: AND
52006: OR
52007: IFFALSE 52011
// exit ;
52009: GO 70402
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52011: LD_VAR 0 1
52015: PUSH
52016: LD_INT 6
52018: PUSH
52019: LD_INT 7
52021: PUSH
52022: LD_INT 8
52024: PUSH
52025: LD_INT 13
52027: PUSH
52028: LD_INT 12
52030: PUSH
52031: LD_INT 15
52033: PUSH
52034: LD_INT 11
52036: PUSH
52037: LD_INT 14
52039: PUSH
52040: LD_INT 10
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: IN
52054: IFFALSE 52064
// btype = b_lab ;
52056: LD_ADDR_VAR 0 1
52060: PUSH
52061: LD_INT 6
52063: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52064: LD_VAR 0 6
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: IN
52083: NOT
52084: PUSH
52085: LD_VAR 0 1
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: LD_INT 6
52104: PUSH
52105: LD_INT 36
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: LD_INT 5
52113: PUSH
52114: LD_INT 31
52116: PUSH
52117: LD_INT 32
52119: PUSH
52120: LD_INT 33
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: IN
52136: NOT
52137: PUSH
52138: LD_VAR 0 6
52142: PUSH
52143: LD_INT 1
52145: EQUAL
52146: AND
52147: OR
52148: PUSH
52149: LD_VAR 0 1
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: LD_INT 3
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: IN
52164: NOT
52165: PUSH
52166: LD_VAR 0 6
52170: PUSH
52171: LD_INT 2
52173: EQUAL
52174: AND
52175: OR
52176: IFFALSE 52186
// mode = 0 ;
52178: LD_ADDR_VAR 0 6
52182: PUSH
52183: LD_INT 0
52185: ST_TO_ADDR
// case mode of 0 :
52186: LD_VAR 0 6
52190: PUSH
52191: LD_INT 0
52193: DOUBLE
52194: EQUAL
52195: IFTRUE 52199
52197: GO 63652
52199: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52200: LD_ADDR_VAR 0 11
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52393: LD_ADDR_VAR 0 12
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: NEG
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52589: LD_ADDR_VAR 0 13
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: LD_INT 3
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 3
52748: NEG
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 3
52760: NEG
52761: PUSH
52762: LD_INT 3
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52788: LD_ADDR_VAR 0 14
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 3
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52984: LD_ADDR_VAR 0 15
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 3
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 3
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53177: LD_ADDR_VAR 0 16
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 3
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: LD_INT 3
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: LD_INT 3
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53370: LD_ADDR_VAR 0 17
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53600: LD_ADDR_VAR 0 18
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53830: LD_ADDR_VAR 0 19
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54060: LD_ADDR_VAR 0 20
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54290: LD_ADDR_VAR 0 21
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54520: LD_ADDR_VAR 0 22
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: NEG
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54750: LD_ADDR_VAR 0 23
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 2
54937: NEG
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 3
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55030: LD_ADDR_VAR 0 24
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: LD_INT 2
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55306: LD_ADDR_VAR 0 25
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 3
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55580: LD_ADDR_VAR 0 26
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: LD_INT 3
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 3
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55856: LD_ADDR_VAR 0 27
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56136: LD_ADDR_VAR 0 28
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: LD_INT 3
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 3
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56418: LD_ADDR_VAR 0 29
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: LD_INT 3
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56697: LD_ADDR_VAR 0 30
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: LD_INT 3
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 3
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56975: LD_ADDR_VAR 0 31
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 3
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 3
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 3
57218: NEG
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57253: LD_ADDR_VAR 0 32
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: LD_INT 2
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 3
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 3
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57531: LD_ADDR_VAR 0 33
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 3
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: NEG
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57810: LD_ADDR_VAR 0 34
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: LD_INT 3
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 2
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58090: LD_ADDR_VAR 0 35
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58202: LD_ADDR_VAR 0 36
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58314: LD_ADDR_VAR 0 37
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58426: LD_ADDR_VAR 0 38
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58538: LD_ADDR_VAR 0 39
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58650: LD_ADDR_VAR 0 40
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58762: LD_ADDR_VAR 0 41
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: LD_INT 2
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 3
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 3
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 3
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 3
59036: NEG
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 3
59059: NEG
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: NEG
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59112: LD_ADDR_VAR 0 42
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 2
59278: NEG
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: NEG
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: NEG
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 3
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 3
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: LD_INT 3
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 3
59409: NEG
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 3
59421: NEG
59422: PUSH
59423: LD_INT 3
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59462: LD_ADDR_VAR 0 43
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 3
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 2
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: NEG
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 3
59769: NEG
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59810: LD_ADDR_VAR 0 44
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 2
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: LD_INT 2
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: LD_INT 2
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: NEG
60001: PUSH
60002: LD_INT 3
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: LD_INT 3
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 3
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: NEG
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60160: LD_ADDR_VAR 0 45
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 2
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: LD_INT 2
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: LD_INT 2
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: NEG
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 3
60396: PUSH
60397: LD_INT 2
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 3
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 3
60457: NEG
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: NEG
60470: PUSH
60471: LD_INT 3
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60510: LD_ADDR_VAR 0 46
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 2
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 2
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 3
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 3
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 2
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 3
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: LD_INT 3
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 3
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 3
60806: NEG
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 3
60817: NEG
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60858: LD_ADDR_VAR 0 47
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: NEG
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61009: LD_ADDR_VAR 0 48
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61156: LD_ADDR_VAR 0 49
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 2
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61300: LD_ADDR_VAR 0 50
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61444: LD_ADDR_VAR 0 51
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61591: LD_ADDR_VAR 0 52
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: NEG
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: LD_INT 2
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61742: LD_ADDR_VAR 0 53
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 2
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: NEG
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: LD_INT 2
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61972: LD_ADDR_VAR 0 54
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: LD_INT 2
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 2
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 2
62159: NEG
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62202: LD_ADDR_VAR 0 55
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: LD_INT 2
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 2
62337: PUSH
62338: LD_INT 2
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: NEG
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 2
62389: NEG
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 2
62401: NEG
62402: PUSH
62403: LD_INT 2
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62432: LD_ADDR_VAR 0 56
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: LD_INT 2
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: LD_INT 2
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 2
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 2
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 2
62631: NEG
62632: PUSH
62633: LD_INT 2
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62662: LD_ADDR_VAR 0 57
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 1
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 2
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: LD_INT 2
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 2
62861: NEG
62862: PUSH
62863: LD_INT 2
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62892: LD_ADDR_VAR 0 58
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: NEG
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 2
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 2
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 2
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 2
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: LD_INT 2
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 2
63079: NEG
63080: PUSH
63081: LD_INT 1
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 2
63091: NEG
63092: PUSH
63093: LD_INT 2
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63122: LD_ADDR_VAR 0 59
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: NEG
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: NEG
63192: PUSH
63193: LD_INT 1
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63210: LD_ADDR_VAR 0 60
63214: PUSH
63215: LD_INT 0
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63298: LD_ADDR_VAR 0 61
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63386: LD_ADDR_VAR 0 62
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63474: LD_ADDR_VAR 0 63
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 0
63522: PUSH
63523: LD_INT 1
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63562: LD_ADDR_VAR 0 64
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: ST_TO_ADDR
// end ; 1 :
63650: GO 69547
63652: LD_INT 1
63654: DOUBLE
63655: EQUAL
63656: IFTRUE 63660
63658: GO 66283
63660: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63661: LD_ADDR_VAR 0 11
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: LD_INT 3
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 3
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63705: LD_ADDR_VAR 0 12
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 3
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 3
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: LIST
63745: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63746: LD_ADDR_VAR 0 13
63750: PUSH
63751: LD_INT 3
63753: PUSH
63754: LD_INT 2
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 3
63763: PUSH
63764: LD_INT 3
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: LD_INT 3
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63786: LD_ADDR_VAR 0 14
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: LD_INT 3
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 3
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: NEG
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: LIST
63826: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63827: LD_ADDR_VAR 0 15
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 3
63845: NEG
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 3
63856: NEG
63857: PUSH
63858: LD_INT 1
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: LIST
63870: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63871: LD_ADDR_VAR 0 16
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: LD_INT 3
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 3
63890: NEG
63891: PUSH
63892: LD_INT 2
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 3
63902: NEG
63903: PUSH
63904: LD_INT 3
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: LIST
63916: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63917: LD_ADDR_VAR 0 17
63921: PUSH
63922: LD_INT 1
63924: NEG
63925: PUSH
63926: LD_INT 3
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 3
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: LD_INT 2
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63961: LD_ADDR_VAR 0 18
63965: PUSH
63966: LD_INT 2
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 3
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 3
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: LIST
64001: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64002: LD_ADDR_VAR 0 19
64006: PUSH
64007: LD_INT 3
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 3
64019: PUSH
64020: LD_INT 3
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 2
64029: PUSH
64030: LD_INT 3
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: LIST
64041: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64042: LD_ADDR_VAR 0 20
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: LD_INT 3
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64083: LD_ADDR_VAR 0 21
64087: PUSH
64088: LD_INT 2
64090: NEG
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 3
64101: NEG
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: NEG
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: LIST
64126: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64127: LD_ADDR_VAR 0 22
64131: PUSH
64132: LD_INT 2
64134: NEG
64135: PUSH
64136: LD_INT 3
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 3
64146: NEG
64147: PUSH
64148: LD_INT 2
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 3
64158: NEG
64159: PUSH
64160: LD_INT 3
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: LIST
64172: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64173: LD_ADDR_VAR 0 23
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 3
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 4
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: LD_INT 3
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64217: LD_ADDR_VAR 0 24
64221: PUSH
64222: LD_INT 3
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 3
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 4
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: LIST
64257: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64258: LD_ADDR_VAR 0 25
64262: PUSH
64263: LD_INT 3
64265: PUSH
64266: LD_INT 3
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 4
64275: PUSH
64276: LD_INT 3
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 3
64285: PUSH
64286: LD_INT 4
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: LIST
64297: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64298: LD_ADDR_VAR 0 26
64302: PUSH
64303: LD_INT 0
64305: PUSH
64306: LD_INT 3
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: LD_INT 4
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: NEG
64326: PUSH
64327: LD_INT 3
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64339: LD_ADDR_VAR 0 27
64343: PUSH
64344: LD_INT 3
64346: NEG
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 3
64357: NEG
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 4
64368: NEG
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64383: LD_ADDR_VAR 0 28
64387: PUSH
64388: LD_INT 3
64390: NEG
64391: PUSH
64392: LD_INT 3
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 3
64402: NEG
64403: PUSH
64404: LD_INT 4
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 4
64414: NEG
64415: PUSH
64416: LD_INT 3
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: LIST
64428: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64429: LD_ADDR_VAR 0 29
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 3
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: LD_INT 3
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: LD_INT 2
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 4
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: LD_INT 4
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 3
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: LD_INT 5
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: LD_INT 5
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 4
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: LD_INT 6
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: LD_INT 6
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: LD_INT 5
64564: NEG
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64584: LD_ADDR_VAR 0 30
64588: PUSH
64589: LD_INT 2
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 3
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 3
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 4
64633: PUSH
64634: LD_INT 0
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 4
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 4
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 5
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 5
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 5
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 6
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 6
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64727: LD_ADDR_VAR 0 31
64731: PUSH
64732: LD_INT 3
64734: PUSH
64735: LD_INT 2
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 3
64744: PUSH
64745: LD_INT 3
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: LD_INT 3
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 4
64764: PUSH
64765: LD_INT 3
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 4
64774: PUSH
64775: LD_INT 4
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 3
64784: PUSH
64785: LD_INT 4
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 5
64794: PUSH
64795: LD_INT 4
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 5
64804: PUSH
64805: LD_INT 5
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 4
64814: PUSH
64815: LD_INT 5
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 6
64824: PUSH
64825: LD_INT 5
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 6
64834: PUSH
64835: LD_INT 6
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 5
64844: PUSH
64845: LD_INT 6
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64866: LD_ADDR_VAR 0 32
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: LD_INT 3
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: LD_INT 2
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: LD_INT 4
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: LD_INT 4
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: LD_INT 3
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: LD_INT 5
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: LD_INT 5
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: LD_INT 4
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: LD_INT 6
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 6
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: LD_INT 5
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65009: LD_ADDR_VAR 0 33
65013: PUSH
65014: LD_INT 2
65016: NEG
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 3
65027: NEG
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 3
65038: NEG
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 3
65050: NEG
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 4
65061: NEG
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 4
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 4
65084: NEG
65085: PUSH
65086: LD_INT 1
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 5
65095: NEG
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 5
65106: NEG
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 5
65118: NEG
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 6
65129: NEG
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 6
65140: NEG
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65164: LD_ADDR_VAR 0 34
65168: PUSH
65169: LD_INT 2
65171: NEG
65172: PUSH
65173: LD_INT 3
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 3
65183: NEG
65184: PUSH
65185: LD_INT 2
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 3
65195: NEG
65196: PUSH
65197: LD_INT 3
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 3
65207: NEG
65208: PUSH
65209: LD_INT 4
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 4
65219: NEG
65220: PUSH
65221: LD_INT 3
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 4
65231: NEG
65232: PUSH
65233: LD_INT 4
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 4
65243: NEG
65244: PUSH
65245: LD_INT 5
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 5
65255: NEG
65256: PUSH
65257: LD_INT 4
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 5
65267: NEG
65268: PUSH
65269: LD_INT 5
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 5
65279: NEG
65280: PUSH
65281: LD_INT 6
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 6
65291: NEG
65292: PUSH
65293: LD_INT 5
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 6
65303: NEG
65304: PUSH
65305: LD_INT 6
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65327: LD_ADDR_VAR 0 41
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: LD_INT 2
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: LD_INT 3
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: LD_INT 2
65360: NEG
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65371: LD_ADDR_VAR 0 42
65375: PUSH
65376: LD_INT 2
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 2
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 3
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65412: LD_ADDR_VAR 0 43
65416: PUSH
65417: LD_INT 2
65419: PUSH
65420: LD_INT 2
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 3
65429: PUSH
65430: LD_INT 2
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 2
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65452: LD_ADDR_VAR 0 44
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 2
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: LD_INT 2
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65493: LD_ADDR_VAR 0 45
65497: PUSH
65498: LD_INT 2
65500: NEG
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 2
65511: NEG
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 3
65522: NEG
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65537: LD_ADDR_VAR 0 46
65541: PUSH
65542: LD_INT 2
65544: NEG
65545: PUSH
65546: LD_INT 2
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 2
65556: NEG
65557: PUSH
65558: LD_INT 3
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 3
65568: NEG
65569: PUSH
65570: LD_INT 2
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65583: LD_ADDR_VAR 0 47
65587: PUSH
65588: LD_INT 2
65590: NEG
65591: PUSH
65592: LD_INT 3
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 1
65602: NEG
65603: PUSH
65604: LD_INT 3
65606: NEG
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65616: LD_ADDR_VAR 0 48
65620: PUSH
65621: LD_INT 1
65623: PUSH
65624: LD_INT 2
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 2
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65647: LD_ADDR_VAR 0 49
65651: PUSH
65652: LD_INT 3
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: PUSH
65665: LD_INT 2
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65676: LD_ADDR_VAR 0 50
65680: PUSH
65681: LD_INT 2
65683: PUSH
65684: LD_INT 3
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: LD_INT 3
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65705: LD_ADDR_VAR 0 51
65709: PUSH
65710: LD_INT 1
65712: NEG
65713: PUSH
65714: LD_INT 2
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 2
65723: NEG
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65736: LD_ADDR_VAR 0 52
65740: PUSH
65741: LD_INT 3
65743: NEG
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 3
65755: NEG
65756: PUSH
65757: LD_INT 2
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65769: LD_ADDR_VAR 0 53
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: LD_INT 3
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: LD_INT 3
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: LD_INT 2
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: LIST
65812: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65813: LD_ADDR_VAR 0 54
65817: PUSH
65818: LD_INT 2
65820: PUSH
65821: LD_INT 1
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 3
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 3
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: LIST
65853: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65854: LD_ADDR_VAR 0 55
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: LD_INT 2
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 3
65871: PUSH
65872: LD_INT 3
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 2
65881: PUSH
65882: LD_INT 3
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65894: LD_ADDR_VAR 0 56
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: PUSH
65923: LD_INT 2
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: LIST
65934: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65935: LD_ADDR_VAR 0 57
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 3
65953: NEG
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: NEG
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: LIST
65978: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65979: LD_ADDR_VAR 0 58
65983: PUSH
65984: LD_INT 2
65986: NEG
65987: PUSH
65988: LD_INT 3
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 3
65998: NEG
65999: PUSH
66000: LD_INT 2
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 3
66010: NEG
66011: PUSH
66012: LD_INT 3
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: LIST
66024: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66025: LD_ADDR_VAR 0 59
66029: PUSH
66030: LD_INT 1
66032: NEG
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: LD_INT 2
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 1
66055: PUSH
66056: LD_INT 1
66058: NEG
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: LIST
66068: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66069: LD_ADDR_VAR 0 60
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: LD_INT 1
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 2
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: LIST
66109: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66110: LD_ADDR_VAR 0 61
66114: PUSH
66115: LD_INT 2
66117: PUSH
66118: LD_INT 1
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 2
66127: PUSH
66128: LD_INT 2
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 1
66137: PUSH
66138: LD_INT 2
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: LIST
66149: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66150: LD_ADDR_VAR 0 62
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: LD_INT 2
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: LD_INT 2
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 1
66177: NEG
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: LIST
66190: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66191: LD_ADDR_VAR 0 63
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 2
66209: NEG
66210: PUSH
66211: LD_INT 0
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 2
66220: NEG
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: LIST
66234: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66235: LD_ADDR_VAR 0 64
66239: PUSH
66240: LD_INT 1
66242: NEG
66243: PUSH
66244: LD_INT 2
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 2
66254: NEG
66255: PUSH
66256: LD_INT 1
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 2
66266: NEG
66267: PUSH
66268: LD_INT 2
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: ST_TO_ADDR
// end ; 2 :
66281: GO 69547
66283: LD_INT 2
66285: DOUBLE
66286: EQUAL
66287: IFTRUE 66291
66289: GO 69546
66291: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66292: LD_ADDR_VAR 0 29
66296: PUSH
66297: LD_INT 4
66299: PUSH
66300: LD_INT 0
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 4
66309: PUSH
66310: LD_INT 1
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 5
66320: PUSH
66321: LD_INT 0
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 5
66330: PUSH
66331: LD_INT 1
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 4
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 3
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 3
66360: PUSH
66361: LD_INT 1
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 3
66371: PUSH
66372: LD_INT 2
66374: NEG
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 5
66382: PUSH
66383: LD_INT 2
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: LD_INT 3
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 3
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 4
66412: PUSH
66413: LD_INT 3
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 4
66422: PUSH
66423: LD_INT 4
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 3
66432: PUSH
66433: LD_INT 4
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: LD_INT 3
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 2
66452: PUSH
66453: LD_INT 2
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 4
66462: PUSH
66463: LD_INT 2
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: LD_INT 4
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 0
66482: PUSH
66483: LD_INT 4
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: LD_INT 4
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: LD_INT 5
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 5
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: LD_INT 4
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: LD_INT 3
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: PUSH
66555: LD_INT 5
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 2
66564: NEG
66565: PUSH
66566: LD_INT 3
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 3
66575: NEG
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 3
66586: NEG
66587: PUSH
66588: LD_INT 1
66590: NEG
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 2
66598: NEG
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 2
66609: NEG
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 3
66620: NEG
66621: PUSH
66622: LD_INT 1
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 4
66631: NEG
66632: PUSH
66633: LD_INT 0
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 4
66642: NEG
66643: PUSH
66644: LD_INT 1
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 4
66654: NEG
66655: PUSH
66656: LD_INT 2
66658: NEG
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 2
66666: NEG
66667: PUSH
66668: LD_INT 2
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 4
66677: NEG
66678: PUSH
66679: LD_INT 4
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 4
66689: NEG
66690: PUSH
66691: LD_INT 5
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 3
66701: NEG
66702: PUSH
66703: LD_INT 4
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 3
66713: NEG
66714: PUSH
66715: LD_INT 3
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 4
66725: NEG
66726: PUSH
66727: LD_INT 3
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 5
66737: NEG
66738: PUSH
66739: LD_INT 4
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 5
66749: NEG
66750: PUSH
66751: LD_INT 5
66753: NEG
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 3
66761: NEG
66762: PUSH
66763: LD_INT 5
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 5
66773: NEG
66774: PUSH
66775: LD_INT 3
66777: NEG
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66830: LD_ADDR_VAR 0 30
66834: PUSH
66835: LD_INT 4
66837: PUSH
66838: LD_INT 4
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 4
66847: PUSH
66848: LD_INT 3
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 5
66857: PUSH
66858: LD_INT 4
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 5
66867: PUSH
66868: LD_INT 5
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 4
66877: PUSH
66878: LD_INT 5
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 3
66887: PUSH
66888: LD_INT 4
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 3
66897: PUSH
66898: LD_INT 3
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 5
66907: PUSH
66908: LD_INT 3
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 3
66917: PUSH
66918: LD_INT 5
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: LD_INT 3
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: LD_INT 4
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: LD_INT 4
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: LD_INT 2
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 2
66999: PUSH
67000: LD_INT 4
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 2
67009: NEG
67010: PUSH
67011: LD_INT 2
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 4
67020: NEG
67021: PUSH
67022: LD_INT 0
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 4
67031: NEG
67032: PUSH
67033: LD_INT 1
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 3
67043: NEG
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 4
67065: NEG
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 5
67076: NEG
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 5
67087: NEG
67088: PUSH
67089: LD_INT 1
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 5
67099: NEG
67100: PUSH
67101: LD_INT 2
67103: NEG
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 3
67111: NEG
67112: PUSH
67113: LD_INT 2
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: LD_INT 3
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: LD_INT 4
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 2
67146: NEG
67147: PUSH
67148: LD_INT 3
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 2
67158: NEG
67159: PUSH
67160: LD_INT 2
67162: NEG
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 3
67170: NEG
67171: PUSH
67172: LD_INT 2
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 4
67182: NEG
67183: PUSH
67184: LD_INT 3
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 4
67194: NEG
67195: PUSH
67196: LD_INT 4
67198: NEG
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PUSH
67208: LD_INT 4
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 4
67218: NEG
67219: PUSH
67220: LD_INT 2
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: LD_INT 4
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: LD_INT 5
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 1
67252: PUSH
67253: LD_INT 4
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 1
67263: PUSH
67264: LD_INT 3
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: LD_INT 3
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 1
67285: NEG
67286: PUSH
67287: LD_INT 4
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: LD_INT 5
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 2
67309: PUSH
67310: LD_INT 3
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 2
67320: NEG
67321: PUSH
67322: LD_INT 5
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67377: LD_ADDR_VAR 0 31
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 4
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 0
67394: PUSH
67395: LD_INT 3
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: PUSH
67405: LD_INT 4
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: LD_INT 5
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 0
67424: PUSH
67425: LD_INT 5
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: LD_INT 4
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: LD_INT 3
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 2
67456: PUSH
67457: LD_INT 5
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 2
67466: NEG
67467: PUSH
67468: LD_INT 3
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 3
67477: NEG
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 3
67488: NEG
67489: PUSH
67490: LD_INT 1
67492: NEG
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 2
67500: NEG
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 2
67511: NEG
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: LD_INT 1
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 4
67533: NEG
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 4
67544: NEG
67545: PUSH
67546: LD_INT 1
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 4
67556: NEG
67557: PUSH
67558: LD_INT 2
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 2
67568: NEG
67569: PUSH
67570: LD_INT 2
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 4
67579: NEG
67580: PUSH
67581: LD_INT 4
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 4
67591: NEG
67592: PUSH
67593: LD_INT 5
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 3
67603: NEG
67604: PUSH
67605: LD_INT 4
67607: NEG
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 3
67615: NEG
67616: PUSH
67617: LD_INT 3
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 4
67627: NEG
67628: PUSH
67629: LD_INT 3
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 5
67639: NEG
67640: PUSH
67641: LD_INT 4
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 5
67651: NEG
67652: PUSH
67653: LD_INT 5
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 3
67663: NEG
67664: PUSH
67665: LD_INT 5
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 5
67675: NEG
67676: PUSH
67677: LD_INT 3
67679: NEG
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: LD_INT 3
67690: NEG
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 0
67698: PUSH
67699: LD_INT 4
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: LD_INT 3
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 1
67720: PUSH
67721: LD_INT 2
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: LD_INT 2
67734: NEG
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 1
67742: NEG
67743: PUSH
67744: LD_INT 3
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 1
67754: NEG
67755: PUSH
67756: LD_INT 4
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: LD_INT 2
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 2
67777: NEG
67778: PUSH
67779: LD_INT 4
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 4
67789: PUSH
67790: LD_INT 0
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 4
67799: PUSH
67800: LD_INT 1
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 5
67810: PUSH
67811: LD_INT 0
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 5
67820: PUSH
67821: LD_INT 1
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 4
67830: PUSH
67831: LD_INT 1
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 3
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 3
67850: PUSH
67851: LD_INT 1
67853: NEG
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 3
67861: PUSH
67862: LD_INT 2
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 5
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67927: LD_ADDR_VAR 0 32
67931: PUSH
67932: LD_INT 4
67934: NEG
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 4
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 3
67968: NEG
67969: PUSH
67970: LD_INT 1
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 4
67979: NEG
67980: PUSH
67981: LD_INT 1
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 5
67990: NEG
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 5
68001: NEG
68002: PUSH
68003: LD_INT 1
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 5
68013: NEG
68014: PUSH
68015: LD_INT 2
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 3
68025: NEG
68026: PUSH
68027: LD_INT 2
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 3
68036: NEG
68037: PUSH
68038: LD_INT 3
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 3
68048: NEG
68049: PUSH
68050: LD_INT 4
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 2
68060: NEG
68061: PUSH
68062: LD_INT 3
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 2
68072: NEG
68073: PUSH
68074: LD_INT 2
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 3
68084: NEG
68085: PUSH
68086: LD_INT 2
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 4
68096: NEG
68097: PUSH
68098: LD_INT 3
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 4
68108: NEG
68109: PUSH
68110: LD_INT 4
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: LD_INT 4
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 4
68132: NEG
68133: PUSH
68134: LD_INT 2
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: LD_INT 4
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: LD_INT 5
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 1
68166: PUSH
68167: LD_INT 4
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: LD_INT 3
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 3
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: NEG
68200: PUSH
68201: LD_INT 4
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: LD_INT 5
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 2
68223: PUSH
68224: LD_INT 3
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: LD_INT 5
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 3
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 3
68256: PUSH
68257: LD_INT 1
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 4
68267: PUSH
68268: LD_INT 0
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 4
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 3
68287: PUSH
68288: LD_INT 1
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 2
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 2
68307: PUSH
68308: LD_INT 1
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 2
68318: PUSH
68319: LD_INT 2
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 4
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 4
68339: PUSH
68340: LD_INT 4
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 4
68349: PUSH
68350: LD_INT 3
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 5
68359: PUSH
68360: LD_INT 4
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 5
68369: PUSH
68370: LD_INT 5
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 4
68379: PUSH
68380: LD_INT 5
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 3
68389: PUSH
68390: LD_INT 4
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 3
68399: PUSH
68400: LD_INT 3
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 5
68409: PUSH
68410: LD_INT 3
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 3
68419: PUSH
68420: LD_INT 5
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68474: LD_ADDR_VAR 0 33
68478: PUSH
68479: LD_INT 4
68481: NEG
68482: PUSH
68483: LD_INT 4
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 4
68493: NEG
68494: PUSH
68495: LD_INT 5
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 3
68505: NEG
68506: PUSH
68507: LD_INT 4
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 3
68517: NEG
68518: PUSH
68519: LD_INT 3
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 4
68529: NEG
68530: PUSH
68531: LD_INT 3
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 5
68541: NEG
68542: PUSH
68543: LD_INT 4
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 5
68553: NEG
68554: PUSH
68555: LD_INT 5
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 3
68565: NEG
68566: PUSH
68567: LD_INT 5
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 5
68577: NEG
68578: PUSH
68579: LD_INT 3
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: LD_INT 3
68592: NEG
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 0
68600: PUSH
68601: LD_INT 4
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 1
68611: PUSH
68612: LD_INT 3
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 1
68622: PUSH
68623: LD_INT 2
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: LD_INT 2
68636: NEG
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: LD_INT 3
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 1
68656: NEG
68657: PUSH
68658: LD_INT 4
68660: NEG
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 2
68668: PUSH
68669: LD_INT 2
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 2
68679: NEG
68680: PUSH
68681: LD_INT 4
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 4
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 4
68701: PUSH
68702: LD_INT 1
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 5
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 5
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 4
68732: PUSH
68733: LD_INT 1
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 3
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 3
68752: PUSH
68753: LD_INT 1
68755: NEG
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 3
68763: PUSH
68764: LD_INT 2
68766: NEG
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 5
68774: PUSH
68775: LD_INT 2
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: PUSH
68785: LD_INT 3
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 3
68794: PUSH
68795: LD_INT 2
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 4
68804: PUSH
68805: LD_INT 3
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 4
68814: PUSH
68815: LD_INT 4
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 3
68824: PUSH
68825: LD_INT 4
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 2
68834: PUSH
68835: LD_INT 3
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 2
68844: PUSH
68845: LD_INT 2
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 4
68854: PUSH
68855: LD_INT 2
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 2
68864: PUSH
68865: LD_INT 4
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: LD_INT 4
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: LD_INT 3
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 1
68894: PUSH
68895: LD_INT 4
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 1
68904: PUSH
68905: LD_INT 5
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 0
68914: PUSH
68915: LD_INT 5
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 1
68924: NEG
68925: PUSH
68926: LD_INT 4
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 1
68935: NEG
68936: PUSH
68937: LD_INT 3
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 2
68946: PUSH
68947: LD_INT 5
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 2
68956: NEG
68957: PUSH
68958: LD_INT 3
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69012: LD_ADDR_VAR 0 34
69016: PUSH
69017: LD_INT 0
69019: PUSH
69020: LD_INT 4
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: LD_INT 5
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 1
69041: PUSH
69042: LD_INT 4
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 1
69052: PUSH
69053: LD_INT 3
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 0
69063: PUSH
69064: LD_INT 3
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 1
69074: NEG
69075: PUSH
69076: LD_INT 4
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 1
69086: NEG
69087: PUSH
69088: LD_INT 5
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 2
69098: PUSH
69099: LD_INT 3
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 2
69109: NEG
69110: PUSH
69111: LD_INT 5
69113: NEG
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 3
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 3
69131: PUSH
69132: LD_INT 1
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 4
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 4
69152: PUSH
69153: LD_INT 1
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 3
69162: PUSH
69163: LD_INT 1
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 2
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 2
69182: PUSH
69183: LD_INT 1
69185: NEG
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 2
69193: PUSH
69194: LD_INT 2
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 4
69204: PUSH
69205: LD_INT 2
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 4
69214: PUSH
69215: LD_INT 4
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 4
69224: PUSH
69225: LD_INT 3
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 5
69234: PUSH
69235: LD_INT 4
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 5
69244: PUSH
69245: LD_INT 5
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 4
69254: PUSH
69255: LD_INT 5
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 3
69264: PUSH
69265: LD_INT 4
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 3
69274: PUSH
69275: LD_INT 3
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 5
69284: PUSH
69285: LD_INT 3
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 3
69294: PUSH
69295: LD_INT 5
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: LD_INT 3
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: LD_INT 2
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 1
69324: PUSH
69325: LD_INT 3
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 1
69334: PUSH
69335: LD_INT 4
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 0
69344: PUSH
69345: LD_INT 4
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 1
69354: NEG
69355: PUSH
69356: LD_INT 3
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 1
69365: NEG
69366: PUSH
69367: LD_INT 2
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 2
69376: PUSH
69377: LD_INT 4
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 2
69386: NEG
69387: PUSH
69388: LD_INT 2
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 4
69397: NEG
69398: PUSH
69399: LD_INT 0
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 4
69408: NEG
69409: PUSH
69410: LD_INT 1
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 3
69420: NEG
69421: PUSH
69422: LD_INT 0
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 3
69431: NEG
69432: PUSH
69433: LD_INT 1
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 4
69442: NEG
69443: PUSH
69444: LD_INT 1
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 5
69453: NEG
69454: PUSH
69455: LD_INT 0
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 5
69464: NEG
69465: PUSH
69466: LD_INT 1
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 5
69476: NEG
69477: PUSH
69478: LD_INT 2
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 3
69488: NEG
69489: PUSH
69490: LD_INT 2
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: ST_TO_ADDR
// end ; end ;
69544: GO 69547
69546: POP
// case btype of b_depot , b_warehouse :
69547: LD_VAR 0 1
69551: PUSH
69552: LD_INT 0
69554: DOUBLE
69555: EQUAL
69556: IFTRUE 69566
69558: LD_INT 1
69560: DOUBLE
69561: EQUAL
69562: IFTRUE 69566
69564: GO 69767
69566: POP
// case nation of nation_american :
69567: LD_VAR 0 5
69571: PUSH
69572: LD_INT 1
69574: DOUBLE
69575: EQUAL
69576: IFTRUE 69580
69578: GO 69636
69580: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69581: LD_ADDR_VAR 0 9
69585: PUSH
69586: LD_VAR 0 11
69590: PUSH
69591: LD_VAR 0 12
69595: PUSH
69596: LD_VAR 0 13
69600: PUSH
69601: LD_VAR 0 14
69605: PUSH
69606: LD_VAR 0 15
69610: PUSH
69611: LD_VAR 0 16
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: PUSH
69624: LD_VAR 0 4
69628: PUSH
69629: LD_INT 1
69631: PLUS
69632: ARRAY
69633: ST_TO_ADDR
69634: GO 69765
69636: LD_INT 2
69638: DOUBLE
69639: EQUAL
69640: IFTRUE 69644
69642: GO 69700
69644: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69645: LD_ADDR_VAR 0 9
69649: PUSH
69650: LD_VAR 0 17
69654: PUSH
69655: LD_VAR 0 18
69659: PUSH
69660: LD_VAR 0 19
69664: PUSH
69665: LD_VAR 0 20
69669: PUSH
69670: LD_VAR 0 21
69674: PUSH
69675: LD_VAR 0 22
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: PUSH
69688: LD_VAR 0 4
69692: PUSH
69693: LD_INT 1
69695: PLUS
69696: ARRAY
69697: ST_TO_ADDR
69698: GO 69765
69700: LD_INT 3
69702: DOUBLE
69703: EQUAL
69704: IFTRUE 69708
69706: GO 69764
69708: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69709: LD_ADDR_VAR 0 9
69713: PUSH
69714: LD_VAR 0 23
69718: PUSH
69719: LD_VAR 0 24
69723: PUSH
69724: LD_VAR 0 25
69728: PUSH
69729: LD_VAR 0 26
69733: PUSH
69734: LD_VAR 0 27
69738: PUSH
69739: LD_VAR 0 28
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: PUSH
69752: LD_VAR 0 4
69756: PUSH
69757: LD_INT 1
69759: PLUS
69760: ARRAY
69761: ST_TO_ADDR
69762: GO 69765
69764: POP
69765: GO 70320
69767: LD_INT 2
69769: DOUBLE
69770: EQUAL
69771: IFTRUE 69781
69773: LD_INT 3
69775: DOUBLE
69776: EQUAL
69777: IFTRUE 69781
69779: GO 69837
69781: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69782: LD_ADDR_VAR 0 9
69786: PUSH
69787: LD_VAR 0 29
69791: PUSH
69792: LD_VAR 0 30
69796: PUSH
69797: LD_VAR 0 31
69801: PUSH
69802: LD_VAR 0 32
69806: PUSH
69807: LD_VAR 0 33
69811: PUSH
69812: LD_VAR 0 34
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: PUSH
69825: LD_VAR 0 4
69829: PUSH
69830: LD_INT 1
69832: PLUS
69833: ARRAY
69834: ST_TO_ADDR
69835: GO 70320
69837: LD_INT 16
69839: DOUBLE
69840: EQUAL
69841: IFTRUE 69899
69843: LD_INT 17
69845: DOUBLE
69846: EQUAL
69847: IFTRUE 69899
69849: LD_INT 18
69851: DOUBLE
69852: EQUAL
69853: IFTRUE 69899
69855: LD_INT 19
69857: DOUBLE
69858: EQUAL
69859: IFTRUE 69899
69861: LD_INT 22
69863: DOUBLE
69864: EQUAL
69865: IFTRUE 69899
69867: LD_INT 20
69869: DOUBLE
69870: EQUAL
69871: IFTRUE 69899
69873: LD_INT 21
69875: DOUBLE
69876: EQUAL
69877: IFTRUE 69899
69879: LD_INT 23
69881: DOUBLE
69882: EQUAL
69883: IFTRUE 69899
69885: LD_INT 24
69887: DOUBLE
69888: EQUAL
69889: IFTRUE 69899
69891: LD_INT 25
69893: DOUBLE
69894: EQUAL
69895: IFTRUE 69899
69897: GO 69955
69899: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69900: LD_ADDR_VAR 0 9
69904: PUSH
69905: LD_VAR 0 35
69909: PUSH
69910: LD_VAR 0 36
69914: PUSH
69915: LD_VAR 0 37
69919: PUSH
69920: LD_VAR 0 38
69924: PUSH
69925: LD_VAR 0 39
69929: PUSH
69930: LD_VAR 0 40
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: PUSH
69943: LD_VAR 0 4
69947: PUSH
69948: LD_INT 1
69950: PLUS
69951: ARRAY
69952: ST_TO_ADDR
69953: GO 70320
69955: LD_INT 6
69957: DOUBLE
69958: EQUAL
69959: IFTRUE 70011
69961: LD_INT 7
69963: DOUBLE
69964: EQUAL
69965: IFTRUE 70011
69967: LD_INT 8
69969: DOUBLE
69970: EQUAL
69971: IFTRUE 70011
69973: LD_INT 13
69975: DOUBLE
69976: EQUAL
69977: IFTRUE 70011
69979: LD_INT 12
69981: DOUBLE
69982: EQUAL
69983: IFTRUE 70011
69985: LD_INT 15
69987: DOUBLE
69988: EQUAL
69989: IFTRUE 70011
69991: LD_INT 11
69993: DOUBLE
69994: EQUAL
69995: IFTRUE 70011
69997: LD_INT 14
69999: DOUBLE
70000: EQUAL
70001: IFTRUE 70011
70003: LD_INT 10
70005: DOUBLE
70006: EQUAL
70007: IFTRUE 70011
70009: GO 70067
70011: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70012: LD_ADDR_VAR 0 9
70016: PUSH
70017: LD_VAR 0 41
70021: PUSH
70022: LD_VAR 0 42
70026: PUSH
70027: LD_VAR 0 43
70031: PUSH
70032: LD_VAR 0 44
70036: PUSH
70037: LD_VAR 0 45
70041: PUSH
70042: LD_VAR 0 46
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: PUSH
70055: LD_VAR 0 4
70059: PUSH
70060: LD_INT 1
70062: PLUS
70063: ARRAY
70064: ST_TO_ADDR
70065: GO 70320
70067: LD_INT 36
70069: DOUBLE
70070: EQUAL
70071: IFTRUE 70075
70073: GO 70131
70075: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70076: LD_ADDR_VAR 0 9
70080: PUSH
70081: LD_VAR 0 47
70085: PUSH
70086: LD_VAR 0 48
70090: PUSH
70091: LD_VAR 0 49
70095: PUSH
70096: LD_VAR 0 50
70100: PUSH
70101: LD_VAR 0 51
70105: PUSH
70106: LD_VAR 0 52
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: PUSH
70119: LD_VAR 0 4
70123: PUSH
70124: LD_INT 1
70126: PLUS
70127: ARRAY
70128: ST_TO_ADDR
70129: GO 70320
70131: LD_INT 4
70133: DOUBLE
70134: EQUAL
70135: IFTRUE 70157
70137: LD_INT 5
70139: DOUBLE
70140: EQUAL
70141: IFTRUE 70157
70143: LD_INT 34
70145: DOUBLE
70146: EQUAL
70147: IFTRUE 70157
70149: LD_INT 37
70151: DOUBLE
70152: EQUAL
70153: IFTRUE 70157
70155: GO 70213
70157: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70158: LD_ADDR_VAR 0 9
70162: PUSH
70163: LD_VAR 0 53
70167: PUSH
70168: LD_VAR 0 54
70172: PUSH
70173: LD_VAR 0 55
70177: PUSH
70178: LD_VAR 0 56
70182: PUSH
70183: LD_VAR 0 57
70187: PUSH
70188: LD_VAR 0 58
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: PUSH
70201: LD_VAR 0 4
70205: PUSH
70206: LD_INT 1
70208: PLUS
70209: ARRAY
70210: ST_TO_ADDR
70211: GO 70320
70213: LD_INT 31
70215: DOUBLE
70216: EQUAL
70217: IFTRUE 70263
70219: LD_INT 32
70221: DOUBLE
70222: EQUAL
70223: IFTRUE 70263
70225: LD_INT 33
70227: DOUBLE
70228: EQUAL
70229: IFTRUE 70263
70231: LD_INT 27
70233: DOUBLE
70234: EQUAL
70235: IFTRUE 70263
70237: LD_INT 26
70239: DOUBLE
70240: EQUAL
70241: IFTRUE 70263
70243: LD_INT 28
70245: DOUBLE
70246: EQUAL
70247: IFTRUE 70263
70249: LD_INT 29
70251: DOUBLE
70252: EQUAL
70253: IFTRUE 70263
70255: LD_INT 30
70257: DOUBLE
70258: EQUAL
70259: IFTRUE 70263
70261: GO 70319
70263: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70264: LD_ADDR_VAR 0 9
70268: PUSH
70269: LD_VAR 0 59
70273: PUSH
70274: LD_VAR 0 60
70278: PUSH
70279: LD_VAR 0 61
70283: PUSH
70284: LD_VAR 0 62
70288: PUSH
70289: LD_VAR 0 63
70293: PUSH
70294: LD_VAR 0 64
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: PUSH
70307: LD_VAR 0 4
70311: PUSH
70312: LD_INT 1
70314: PLUS
70315: ARRAY
70316: ST_TO_ADDR
70317: GO 70320
70319: POP
// temp_list2 = [ ] ;
70320: LD_ADDR_VAR 0 10
70324: PUSH
70325: EMPTY
70326: ST_TO_ADDR
// for i in temp_list do
70327: LD_ADDR_VAR 0 8
70331: PUSH
70332: LD_VAR 0 9
70336: PUSH
70337: FOR_IN
70338: IFFALSE 70390
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70340: LD_ADDR_VAR 0 10
70344: PUSH
70345: LD_VAR 0 10
70349: PUSH
70350: LD_VAR 0 8
70354: PUSH
70355: LD_INT 1
70357: ARRAY
70358: PUSH
70359: LD_VAR 0 2
70363: PLUS
70364: PUSH
70365: LD_VAR 0 8
70369: PUSH
70370: LD_INT 2
70372: ARRAY
70373: PUSH
70374: LD_VAR 0 3
70378: PLUS
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: EMPTY
70385: LIST
70386: ADD
70387: ST_TO_ADDR
70388: GO 70337
70390: POP
70391: POP
// result = temp_list2 ;
70392: LD_ADDR_VAR 0 7
70396: PUSH
70397: LD_VAR 0 10
70401: ST_TO_ADDR
// end ;
70402: LD_VAR 0 7
70406: RET
// export function EnemyInRange ( unit , dist ) ; begin
70407: LD_INT 0
70409: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70410: LD_ADDR_VAR 0 3
70414: PUSH
70415: LD_VAR 0 1
70419: PPUSH
70420: CALL_OW 255
70424: PPUSH
70425: LD_VAR 0 1
70429: PPUSH
70430: CALL_OW 250
70434: PPUSH
70435: LD_VAR 0 1
70439: PPUSH
70440: CALL_OW 251
70444: PPUSH
70445: LD_VAR 0 2
70449: PPUSH
70450: CALL 43780 0 4
70454: PUSH
70455: LD_INT 4
70457: ARRAY
70458: ST_TO_ADDR
// end ;
70459: LD_VAR 0 3
70463: RET
// export function PlayerSeeMe ( unit ) ; begin
70464: LD_INT 0
70466: PPUSH
// result := See ( your_side , unit ) ;
70467: LD_ADDR_VAR 0 2
70471: PUSH
70472: LD_OWVAR 2
70476: PPUSH
70477: LD_VAR 0 1
70481: PPUSH
70482: CALL_OW 292
70486: ST_TO_ADDR
// end ;
70487: LD_VAR 0 2
70491: RET
// export function ReverseDir ( unit ) ; begin
70492: LD_INT 0
70494: PPUSH
// if not unit then
70495: LD_VAR 0 1
70499: NOT
70500: IFFALSE 70504
// exit ;
70502: GO 70527
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70504: LD_ADDR_VAR 0 2
70508: PUSH
70509: LD_VAR 0 1
70513: PPUSH
70514: CALL_OW 254
70518: PUSH
70519: LD_INT 3
70521: PLUS
70522: PUSH
70523: LD_INT 6
70525: MOD
70526: ST_TO_ADDR
// end ;
70527: LD_VAR 0 2
70531: RET
// export function ReverseArray ( array ) ; var i ; begin
70532: LD_INT 0
70534: PPUSH
70535: PPUSH
// if not array then
70536: LD_VAR 0 1
70540: NOT
70541: IFFALSE 70545
// exit ;
70543: GO 70600
// result := [ ] ;
70545: LD_ADDR_VAR 0 2
70549: PUSH
70550: EMPTY
70551: ST_TO_ADDR
// for i := array downto 1 do
70552: LD_ADDR_VAR 0 3
70556: PUSH
70557: DOUBLE
70558: LD_VAR 0 1
70562: INC
70563: ST_TO_ADDR
70564: LD_INT 1
70566: PUSH
70567: FOR_DOWNTO
70568: IFFALSE 70598
// result := Join ( result , array [ i ] ) ;
70570: LD_ADDR_VAR 0 2
70574: PUSH
70575: LD_VAR 0 2
70579: PPUSH
70580: LD_VAR 0 1
70584: PUSH
70585: LD_VAR 0 3
70589: ARRAY
70590: PPUSH
70591: CALL 75243 0 2
70595: ST_TO_ADDR
70596: GO 70567
70598: POP
70599: POP
// end ;
70600: LD_VAR 0 2
70604: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70605: LD_INT 0
70607: PPUSH
70608: PPUSH
70609: PPUSH
70610: PPUSH
70611: PPUSH
70612: PPUSH
// if not unit or not hexes then
70613: LD_VAR 0 1
70617: NOT
70618: PUSH
70619: LD_VAR 0 2
70623: NOT
70624: OR
70625: IFFALSE 70629
// exit ;
70627: GO 70752
// dist := 9999 ;
70629: LD_ADDR_VAR 0 5
70633: PUSH
70634: LD_INT 9999
70636: ST_TO_ADDR
// for i = 1 to hexes do
70637: LD_ADDR_VAR 0 4
70641: PUSH
70642: DOUBLE
70643: LD_INT 1
70645: DEC
70646: ST_TO_ADDR
70647: LD_VAR 0 2
70651: PUSH
70652: FOR_TO
70653: IFFALSE 70740
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70655: LD_ADDR_VAR 0 6
70659: PUSH
70660: LD_VAR 0 1
70664: PPUSH
70665: LD_VAR 0 2
70669: PUSH
70670: LD_VAR 0 4
70674: ARRAY
70675: PUSH
70676: LD_INT 1
70678: ARRAY
70679: PPUSH
70680: LD_VAR 0 2
70684: PUSH
70685: LD_VAR 0 4
70689: ARRAY
70690: PUSH
70691: LD_INT 2
70693: ARRAY
70694: PPUSH
70695: CALL_OW 297
70699: ST_TO_ADDR
// if tdist < dist then
70700: LD_VAR 0 6
70704: PUSH
70705: LD_VAR 0 5
70709: LESS
70710: IFFALSE 70738
// begin hex := hexes [ i ] ;
70712: LD_ADDR_VAR 0 8
70716: PUSH
70717: LD_VAR 0 2
70721: PUSH
70722: LD_VAR 0 4
70726: ARRAY
70727: ST_TO_ADDR
// dist := tdist ;
70728: LD_ADDR_VAR 0 5
70732: PUSH
70733: LD_VAR 0 6
70737: ST_TO_ADDR
// end ; end ;
70738: GO 70652
70740: POP
70741: POP
// result := hex ;
70742: LD_ADDR_VAR 0 3
70746: PUSH
70747: LD_VAR 0 8
70751: ST_TO_ADDR
// end ;
70752: LD_VAR 0 3
70756: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70757: LD_INT 0
70759: PPUSH
70760: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70761: LD_VAR 0 1
70765: NOT
70766: PUSH
70767: LD_VAR 0 1
70771: PUSH
70772: LD_INT 21
70774: PUSH
70775: LD_INT 2
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 23
70784: PUSH
70785: LD_INT 2
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PPUSH
70796: CALL_OW 69
70800: IN
70801: NOT
70802: OR
70803: IFFALSE 70807
// exit ;
70805: GO 70854
// for i = 1 to 3 do
70807: LD_ADDR_VAR 0 3
70811: PUSH
70812: DOUBLE
70813: LD_INT 1
70815: DEC
70816: ST_TO_ADDR
70817: LD_INT 3
70819: PUSH
70820: FOR_TO
70821: IFFALSE 70852
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70823: LD_VAR 0 1
70827: PPUSH
70828: CALL_OW 250
70832: PPUSH
70833: LD_VAR 0 1
70837: PPUSH
70838: CALL_OW 251
70842: PPUSH
70843: LD_INT 1
70845: PPUSH
70846: CALL_OW 453
70850: GO 70820
70852: POP
70853: POP
// end ;
70854: LD_VAR 0 2
70858: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70859: LD_INT 0
70861: PPUSH
70862: PPUSH
70863: PPUSH
70864: PPUSH
70865: PPUSH
70866: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70867: LD_VAR 0 1
70871: NOT
70872: PUSH
70873: LD_VAR 0 2
70877: NOT
70878: OR
70879: PUSH
70880: LD_VAR 0 1
70884: PPUSH
70885: CALL_OW 314
70889: OR
70890: IFFALSE 70894
// exit ;
70892: GO 71361
// if GetLives ( i ) < 250 then
70894: LD_VAR 0 4
70898: PPUSH
70899: CALL_OW 256
70903: PUSH
70904: LD_INT 250
70906: LESS
70907: IFFALSE 70920
// begin ComAutodestruct ( i ) ;
70909: LD_VAR 0 4
70913: PPUSH
70914: CALL 70757 0 1
// exit ;
70918: GO 71361
// end ; x := GetX ( enemy_unit ) ;
70920: LD_ADDR_VAR 0 7
70924: PUSH
70925: LD_VAR 0 2
70929: PPUSH
70930: CALL_OW 250
70934: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70935: LD_ADDR_VAR 0 8
70939: PUSH
70940: LD_VAR 0 2
70944: PPUSH
70945: CALL_OW 251
70949: ST_TO_ADDR
// if not x or not y then
70950: LD_VAR 0 7
70954: NOT
70955: PUSH
70956: LD_VAR 0 8
70960: NOT
70961: OR
70962: IFFALSE 70966
// exit ;
70964: GO 71361
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70966: LD_ADDR_VAR 0 6
70970: PUSH
70971: LD_VAR 0 7
70975: PPUSH
70976: LD_INT 0
70978: PPUSH
70979: LD_INT 4
70981: PPUSH
70982: CALL_OW 272
70986: PUSH
70987: LD_VAR 0 8
70991: PPUSH
70992: LD_INT 0
70994: PPUSH
70995: LD_INT 4
70997: PPUSH
70998: CALL_OW 273
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_VAR 0 7
71011: PPUSH
71012: LD_INT 1
71014: PPUSH
71015: LD_INT 4
71017: PPUSH
71018: CALL_OW 272
71022: PUSH
71023: LD_VAR 0 8
71027: PPUSH
71028: LD_INT 1
71030: PPUSH
71031: LD_INT 4
71033: PPUSH
71034: CALL_OW 273
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_VAR 0 7
71047: PPUSH
71048: LD_INT 2
71050: PPUSH
71051: LD_INT 4
71053: PPUSH
71054: CALL_OW 272
71058: PUSH
71059: LD_VAR 0 8
71063: PPUSH
71064: LD_INT 2
71066: PPUSH
71067: LD_INT 4
71069: PPUSH
71070: CALL_OW 273
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_VAR 0 7
71083: PPUSH
71084: LD_INT 3
71086: PPUSH
71087: LD_INT 4
71089: PPUSH
71090: CALL_OW 272
71094: PUSH
71095: LD_VAR 0 8
71099: PPUSH
71100: LD_INT 3
71102: PPUSH
71103: LD_INT 4
71105: PPUSH
71106: CALL_OW 273
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_VAR 0 7
71119: PPUSH
71120: LD_INT 4
71122: PPUSH
71123: LD_INT 4
71125: PPUSH
71126: CALL_OW 272
71130: PUSH
71131: LD_VAR 0 8
71135: PPUSH
71136: LD_INT 4
71138: PPUSH
71139: LD_INT 4
71141: PPUSH
71142: CALL_OW 273
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_VAR 0 7
71155: PPUSH
71156: LD_INT 5
71158: PPUSH
71159: LD_INT 4
71161: PPUSH
71162: CALL_OW 272
71166: PUSH
71167: LD_VAR 0 8
71171: PPUSH
71172: LD_INT 5
71174: PPUSH
71175: LD_INT 4
71177: PPUSH
71178: CALL_OW 273
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: ST_TO_ADDR
// for i = tmp downto 1 do
71195: LD_ADDR_VAR 0 4
71199: PUSH
71200: DOUBLE
71201: LD_VAR 0 6
71205: INC
71206: ST_TO_ADDR
71207: LD_INT 1
71209: PUSH
71210: FOR_DOWNTO
71211: IFFALSE 71312
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71213: LD_VAR 0 6
71217: PUSH
71218: LD_VAR 0 4
71222: ARRAY
71223: PUSH
71224: LD_INT 1
71226: ARRAY
71227: PPUSH
71228: LD_VAR 0 6
71232: PUSH
71233: LD_VAR 0 4
71237: ARRAY
71238: PUSH
71239: LD_INT 2
71241: ARRAY
71242: PPUSH
71243: CALL_OW 488
71247: NOT
71248: PUSH
71249: LD_VAR 0 6
71253: PUSH
71254: LD_VAR 0 4
71258: ARRAY
71259: PUSH
71260: LD_INT 1
71262: ARRAY
71263: PPUSH
71264: LD_VAR 0 6
71268: PUSH
71269: LD_VAR 0 4
71273: ARRAY
71274: PUSH
71275: LD_INT 2
71277: ARRAY
71278: PPUSH
71279: CALL_OW 428
71283: PUSH
71284: LD_INT 0
71286: NONEQUAL
71287: OR
71288: IFFALSE 71310
// tmp := Delete ( tmp , i ) ;
71290: LD_ADDR_VAR 0 6
71294: PUSH
71295: LD_VAR 0 6
71299: PPUSH
71300: LD_VAR 0 4
71304: PPUSH
71305: CALL_OW 3
71309: ST_TO_ADDR
71310: GO 71210
71312: POP
71313: POP
// j := GetClosestHex ( unit , tmp ) ;
71314: LD_ADDR_VAR 0 5
71318: PUSH
71319: LD_VAR 0 1
71323: PPUSH
71324: LD_VAR 0 6
71328: PPUSH
71329: CALL 70605 0 2
71333: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71334: LD_VAR 0 1
71338: PPUSH
71339: LD_VAR 0 5
71343: PUSH
71344: LD_INT 1
71346: ARRAY
71347: PPUSH
71348: LD_VAR 0 5
71352: PUSH
71353: LD_INT 2
71355: ARRAY
71356: PPUSH
71357: CALL_OW 111
// end ;
71361: LD_VAR 0 3
71365: RET
// export function PrepareApemanSoldier ( ) ; begin
71366: LD_INT 0
71368: PPUSH
// uc_nation := 0 ;
71369: LD_ADDR_OWVAR 21
71373: PUSH
71374: LD_INT 0
71376: ST_TO_ADDR
// hc_sex := sex_male ;
71377: LD_ADDR_OWVAR 27
71381: PUSH
71382: LD_INT 1
71384: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71385: LD_ADDR_OWVAR 28
71389: PUSH
71390: LD_INT 15
71392: ST_TO_ADDR
// hc_gallery :=  ;
71393: LD_ADDR_OWVAR 33
71397: PUSH
71398: LD_STRING 
71400: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71401: LD_ADDR_OWVAR 31
71405: PUSH
71406: LD_INT 0
71408: PPUSH
71409: LD_INT 3
71411: PPUSH
71412: CALL_OW 12
71416: PUSH
71417: LD_INT 0
71419: PPUSH
71420: LD_INT 3
71422: PPUSH
71423: CALL_OW 12
71427: PUSH
71428: LD_INT 0
71430: PUSH
71431: LD_INT 0
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: ST_TO_ADDR
// end ;
71440: LD_VAR 0 1
71444: RET
// export function PrepareApemanEngineer ( ) ; begin
71445: LD_INT 0
71447: PPUSH
// uc_nation := 0 ;
71448: LD_ADDR_OWVAR 21
71452: PUSH
71453: LD_INT 0
71455: ST_TO_ADDR
// hc_sex := sex_male ;
71456: LD_ADDR_OWVAR 27
71460: PUSH
71461: LD_INT 1
71463: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71464: LD_ADDR_OWVAR 28
71468: PUSH
71469: LD_INT 16
71471: ST_TO_ADDR
// hc_gallery :=  ;
71472: LD_ADDR_OWVAR 33
71476: PUSH
71477: LD_STRING 
71479: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71480: LD_ADDR_OWVAR 31
71484: PUSH
71485: LD_INT 0
71487: PPUSH
71488: LD_INT 3
71490: PPUSH
71491: CALL_OW 12
71495: PUSH
71496: LD_INT 0
71498: PPUSH
71499: LD_INT 3
71501: PPUSH
71502: CALL_OW 12
71506: PUSH
71507: LD_INT 0
71509: PUSH
71510: LD_INT 0
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: ST_TO_ADDR
// end ;
71519: LD_VAR 0 1
71523: RET
// export function PrepareApeman ( agressivity ) ; begin
71524: LD_INT 0
71526: PPUSH
// uc_side := 0 ;
71527: LD_ADDR_OWVAR 20
71531: PUSH
71532: LD_INT 0
71534: ST_TO_ADDR
// uc_nation := 0 ;
71535: LD_ADDR_OWVAR 21
71539: PUSH
71540: LD_INT 0
71542: ST_TO_ADDR
// hc_sex := sex_male ;
71543: LD_ADDR_OWVAR 27
71547: PUSH
71548: LD_INT 1
71550: ST_TO_ADDR
// hc_class := class_apeman ;
71551: LD_ADDR_OWVAR 28
71555: PUSH
71556: LD_INT 12
71558: ST_TO_ADDR
// hc_gallery :=  ;
71559: LD_ADDR_OWVAR 33
71563: PUSH
71564: LD_STRING 
71566: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71567: LD_ADDR_OWVAR 35
71571: PUSH
71572: LD_VAR 0 1
71576: NEG
71577: PPUSH
71578: LD_VAR 0 1
71582: PPUSH
71583: CALL_OW 12
71587: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71588: LD_ADDR_OWVAR 31
71592: PUSH
71593: LD_INT 0
71595: PPUSH
71596: LD_INT 3
71598: PPUSH
71599: CALL_OW 12
71603: PUSH
71604: LD_INT 0
71606: PPUSH
71607: LD_INT 3
71609: PPUSH
71610: CALL_OW 12
71614: PUSH
71615: LD_INT 0
71617: PUSH
71618: LD_INT 0
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: ST_TO_ADDR
// end ;
71627: LD_VAR 0 2
71631: RET
// export function PrepareTiger ( agressivity ) ; begin
71632: LD_INT 0
71634: PPUSH
// uc_side := 0 ;
71635: LD_ADDR_OWVAR 20
71639: PUSH
71640: LD_INT 0
71642: ST_TO_ADDR
// uc_nation := 0 ;
71643: LD_ADDR_OWVAR 21
71647: PUSH
71648: LD_INT 0
71650: ST_TO_ADDR
// hc_class := class_tiger ;
71651: LD_ADDR_OWVAR 28
71655: PUSH
71656: LD_INT 14
71658: ST_TO_ADDR
// hc_gallery :=  ;
71659: LD_ADDR_OWVAR 33
71663: PUSH
71664: LD_STRING 
71666: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71667: LD_ADDR_OWVAR 35
71671: PUSH
71672: LD_VAR 0 1
71676: NEG
71677: PPUSH
71678: LD_VAR 0 1
71682: PPUSH
71683: CALL_OW 12
71687: ST_TO_ADDR
// end ;
71688: LD_VAR 0 2
71692: RET
// export function PrepareEnchidna ( ) ; begin
71693: LD_INT 0
71695: PPUSH
// uc_side := 0 ;
71696: LD_ADDR_OWVAR 20
71700: PUSH
71701: LD_INT 0
71703: ST_TO_ADDR
// uc_nation := 0 ;
71704: LD_ADDR_OWVAR 21
71708: PUSH
71709: LD_INT 0
71711: ST_TO_ADDR
// hc_class := class_baggie ;
71712: LD_ADDR_OWVAR 28
71716: PUSH
71717: LD_INT 13
71719: ST_TO_ADDR
// hc_gallery :=  ;
71720: LD_ADDR_OWVAR 33
71724: PUSH
71725: LD_STRING 
71727: ST_TO_ADDR
// end ;
71728: LD_VAR 0 1
71732: RET
// export function PrepareFrog ( ) ; begin
71733: LD_INT 0
71735: PPUSH
// uc_side := 0 ;
71736: LD_ADDR_OWVAR 20
71740: PUSH
71741: LD_INT 0
71743: ST_TO_ADDR
// uc_nation := 0 ;
71744: LD_ADDR_OWVAR 21
71748: PUSH
71749: LD_INT 0
71751: ST_TO_ADDR
// hc_class := class_frog ;
71752: LD_ADDR_OWVAR 28
71756: PUSH
71757: LD_INT 19
71759: ST_TO_ADDR
// hc_gallery :=  ;
71760: LD_ADDR_OWVAR 33
71764: PUSH
71765: LD_STRING 
71767: ST_TO_ADDR
// end ;
71768: LD_VAR 0 1
71772: RET
// export function PrepareFish ( ) ; begin
71773: LD_INT 0
71775: PPUSH
// uc_side := 0 ;
71776: LD_ADDR_OWVAR 20
71780: PUSH
71781: LD_INT 0
71783: ST_TO_ADDR
// uc_nation := 0 ;
71784: LD_ADDR_OWVAR 21
71788: PUSH
71789: LD_INT 0
71791: ST_TO_ADDR
// hc_class := class_fish ;
71792: LD_ADDR_OWVAR 28
71796: PUSH
71797: LD_INT 20
71799: ST_TO_ADDR
// hc_gallery :=  ;
71800: LD_ADDR_OWVAR 33
71804: PUSH
71805: LD_STRING 
71807: ST_TO_ADDR
// end ;
71808: LD_VAR 0 1
71812: RET
// export function PrepareBird ( ) ; begin
71813: LD_INT 0
71815: PPUSH
// uc_side := 0 ;
71816: LD_ADDR_OWVAR 20
71820: PUSH
71821: LD_INT 0
71823: ST_TO_ADDR
// uc_nation := 0 ;
71824: LD_ADDR_OWVAR 21
71828: PUSH
71829: LD_INT 0
71831: ST_TO_ADDR
// hc_class := class_phororhacos ;
71832: LD_ADDR_OWVAR 28
71836: PUSH
71837: LD_INT 18
71839: ST_TO_ADDR
// hc_gallery :=  ;
71840: LD_ADDR_OWVAR 33
71844: PUSH
71845: LD_STRING 
71847: ST_TO_ADDR
// end ;
71848: LD_VAR 0 1
71852: RET
// export function PrepareHorse ( ) ; begin
71853: LD_INT 0
71855: PPUSH
// uc_side := 0 ;
71856: LD_ADDR_OWVAR 20
71860: PUSH
71861: LD_INT 0
71863: ST_TO_ADDR
// uc_nation := 0 ;
71864: LD_ADDR_OWVAR 21
71868: PUSH
71869: LD_INT 0
71871: ST_TO_ADDR
// hc_class := class_horse ;
71872: LD_ADDR_OWVAR 28
71876: PUSH
71877: LD_INT 21
71879: ST_TO_ADDR
// hc_gallery :=  ;
71880: LD_ADDR_OWVAR 33
71884: PUSH
71885: LD_STRING 
71887: ST_TO_ADDR
// end ;
71888: LD_VAR 0 1
71892: RET
// export function PrepareMastodont ( ) ; begin
71893: LD_INT 0
71895: PPUSH
// uc_side := 0 ;
71896: LD_ADDR_OWVAR 20
71900: PUSH
71901: LD_INT 0
71903: ST_TO_ADDR
// uc_nation := 0 ;
71904: LD_ADDR_OWVAR 21
71908: PUSH
71909: LD_INT 0
71911: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71912: LD_ADDR_OWVAR 37
71916: PUSH
71917: LD_INT 31
71919: ST_TO_ADDR
// vc_control := control_rider ;
71920: LD_ADDR_OWVAR 38
71924: PUSH
71925: LD_INT 4
71927: ST_TO_ADDR
// end ;
71928: LD_VAR 0 1
71932: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71933: LD_INT 0
71935: PPUSH
71936: PPUSH
71937: PPUSH
// uc_side = 0 ;
71938: LD_ADDR_OWVAR 20
71942: PUSH
71943: LD_INT 0
71945: ST_TO_ADDR
// uc_nation = 0 ;
71946: LD_ADDR_OWVAR 21
71950: PUSH
71951: LD_INT 0
71953: ST_TO_ADDR
// InitHc_All ( ) ;
71954: CALL_OW 584
// InitVc ;
71958: CALL_OW 20
// if mastodonts then
71962: LD_VAR 0 6
71966: IFFALSE 72033
// for i = 1 to mastodonts do
71968: LD_ADDR_VAR 0 11
71972: PUSH
71973: DOUBLE
71974: LD_INT 1
71976: DEC
71977: ST_TO_ADDR
71978: LD_VAR 0 6
71982: PUSH
71983: FOR_TO
71984: IFFALSE 72031
// begin vc_chassis := 31 ;
71986: LD_ADDR_OWVAR 37
71990: PUSH
71991: LD_INT 31
71993: ST_TO_ADDR
// vc_control := control_rider ;
71994: LD_ADDR_OWVAR 38
71998: PUSH
71999: LD_INT 4
72001: ST_TO_ADDR
// animal := CreateVehicle ;
72002: LD_ADDR_VAR 0 12
72006: PUSH
72007: CALL_OW 45
72011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72012: LD_VAR 0 12
72016: PPUSH
72017: LD_VAR 0 8
72021: PPUSH
72022: LD_INT 0
72024: PPUSH
72025: CALL 74161 0 3
// end ;
72029: GO 71983
72031: POP
72032: POP
// if horses then
72033: LD_VAR 0 5
72037: IFFALSE 72104
// for i = 1 to horses do
72039: LD_ADDR_VAR 0 11
72043: PUSH
72044: DOUBLE
72045: LD_INT 1
72047: DEC
72048: ST_TO_ADDR
72049: LD_VAR 0 5
72053: PUSH
72054: FOR_TO
72055: IFFALSE 72102
// begin hc_class := 21 ;
72057: LD_ADDR_OWVAR 28
72061: PUSH
72062: LD_INT 21
72064: ST_TO_ADDR
// hc_gallery :=  ;
72065: LD_ADDR_OWVAR 33
72069: PUSH
72070: LD_STRING 
72072: ST_TO_ADDR
// animal := CreateHuman ;
72073: LD_ADDR_VAR 0 12
72077: PUSH
72078: CALL_OW 44
72082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72083: LD_VAR 0 12
72087: PPUSH
72088: LD_VAR 0 8
72092: PPUSH
72093: LD_INT 0
72095: PPUSH
72096: CALL 74161 0 3
// end ;
72100: GO 72054
72102: POP
72103: POP
// if birds then
72104: LD_VAR 0 1
72108: IFFALSE 72175
// for i = 1 to birds do
72110: LD_ADDR_VAR 0 11
72114: PUSH
72115: DOUBLE
72116: LD_INT 1
72118: DEC
72119: ST_TO_ADDR
72120: LD_VAR 0 1
72124: PUSH
72125: FOR_TO
72126: IFFALSE 72173
// begin hc_class := 18 ;
72128: LD_ADDR_OWVAR 28
72132: PUSH
72133: LD_INT 18
72135: ST_TO_ADDR
// hc_gallery =  ;
72136: LD_ADDR_OWVAR 33
72140: PUSH
72141: LD_STRING 
72143: ST_TO_ADDR
// animal := CreateHuman ;
72144: LD_ADDR_VAR 0 12
72148: PUSH
72149: CALL_OW 44
72153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72154: LD_VAR 0 12
72158: PPUSH
72159: LD_VAR 0 8
72163: PPUSH
72164: LD_INT 0
72166: PPUSH
72167: CALL 74161 0 3
// end ;
72171: GO 72125
72173: POP
72174: POP
// if tigers then
72175: LD_VAR 0 2
72179: IFFALSE 72263
// for i = 1 to tigers do
72181: LD_ADDR_VAR 0 11
72185: PUSH
72186: DOUBLE
72187: LD_INT 1
72189: DEC
72190: ST_TO_ADDR
72191: LD_VAR 0 2
72195: PUSH
72196: FOR_TO
72197: IFFALSE 72261
// begin hc_class = class_tiger ;
72199: LD_ADDR_OWVAR 28
72203: PUSH
72204: LD_INT 14
72206: ST_TO_ADDR
// hc_gallery =  ;
72207: LD_ADDR_OWVAR 33
72211: PUSH
72212: LD_STRING 
72214: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72215: LD_ADDR_OWVAR 35
72219: PUSH
72220: LD_INT 7
72222: NEG
72223: PPUSH
72224: LD_INT 7
72226: PPUSH
72227: CALL_OW 12
72231: ST_TO_ADDR
// animal := CreateHuman ;
72232: LD_ADDR_VAR 0 12
72236: PUSH
72237: CALL_OW 44
72241: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72242: LD_VAR 0 12
72246: PPUSH
72247: LD_VAR 0 8
72251: PPUSH
72252: LD_INT 0
72254: PPUSH
72255: CALL 74161 0 3
// end ;
72259: GO 72196
72261: POP
72262: POP
// if apemans then
72263: LD_VAR 0 3
72267: IFFALSE 72390
// for i = 1 to apemans do
72269: LD_ADDR_VAR 0 11
72273: PUSH
72274: DOUBLE
72275: LD_INT 1
72277: DEC
72278: ST_TO_ADDR
72279: LD_VAR 0 3
72283: PUSH
72284: FOR_TO
72285: IFFALSE 72388
// begin hc_class = class_apeman ;
72287: LD_ADDR_OWVAR 28
72291: PUSH
72292: LD_INT 12
72294: ST_TO_ADDR
// hc_gallery =  ;
72295: LD_ADDR_OWVAR 33
72299: PUSH
72300: LD_STRING 
72302: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72303: LD_ADDR_OWVAR 35
72307: PUSH
72308: LD_INT 2
72310: NEG
72311: PPUSH
72312: LD_INT 2
72314: PPUSH
72315: CALL_OW 12
72319: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72320: LD_ADDR_OWVAR 31
72324: PUSH
72325: LD_INT 1
72327: PPUSH
72328: LD_INT 3
72330: PPUSH
72331: CALL_OW 12
72335: PUSH
72336: LD_INT 1
72338: PPUSH
72339: LD_INT 3
72341: PPUSH
72342: CALL_OW 12
72346: PUSH
72347: LD_INT 0
72349: PUSH
72350: LD_INT 0
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: ST_TO_ADDR
// animal := CreateHuman ;
72359: LD_ADDR_VAR 0 12
72363: PUSH
72364: CALL_OW 44
72368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72369: LD_VAR 0 12
72373: PPUSH
72374: LD_VAR 0 8
72378: PPUSH
72379: LD_INT 0
72381: PPUSH
72382: CALL 74161 0 3
// end ;
72386: GO 72284
72388: POP
72389: POP
// if enchidnas then
72390: LD_VAR 0 4
72394: IFFALSE 72461
// for i = 1 to enchidnas do
72396: LD_ADDR_VAR 0 11
72400: PUSH
72401: DOUBLE
72402: LD_INT 1
72404: DEC
72405: ST_TO_ADDR
72406: LD_VAR 0 4
72410: PUSH
72411: FOR_TO
72412: IFFALSE 72459
// begin hc_class = 13 ;
72414: LD_ADDR_OWVAR 28
72418: PUSH
72419: LD_INT 13
72421: ST_TO_ADDR
// hc_gallery =  ;
72422: LD_ADDR_OWVAR 33
72426: PUSH
72427: LD_STRING 
72429: ST_TO_ADDR
// animal := CreateHuman ;
72430: LD_ADDR_VAR 0 12
72434: PUSH
72435: CALL_OW 44
72439: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72440: LD_VAR 0 12
72444: PPUSH
72445: LD_VAR 0 8
72449: PPUSH
72450: LD_INT 0
72452: PPUSH
72453: CALL 74161 0 3
// end ;
72457: GO 72411
72459: POP
72460: POP
// if fishes then
72461: LD_VAR 0 7
72465: IFFALSE 72532
// for i = 1 to fishes do
72467: LD_ADDR_VAR 0 11
72471: PUSH
72472: DOUBLE
72473: LD_INT 1
72475: DEC
72476: ST_TO_ADDR
72477: LD_VAR 0 7
72481: PUSH
72482: FOR_TO
72483: IFFALSE 72530
// begin hc_class = 20 ;
72485: LD_ADDR_OWVAR 28
72489: PUSH
72490: LD_INT 20
72492: ST_TO_ADDR
// hc_gallery =  ;
72493: LD_ADDR_OWVAR 33
72497: PUSH
72498: LD_STRING 
72500: ST_TO_ADDR
// animal := CreateHuman ;
72501: LD_ADDR_VAR 0 12
72505: PUSH
72506: CALL_OW 44
72510: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72511: LD_VAR 0 12
72515: PPUSH
72516: LD_VAR 0 9
72520: PPUSH
72521: LD_INT 0
72523: PPUSH
72524: CALL 74161 0 3
// end ;
72528: GO 72482
72530: POP
72531: POP
// end ;
72532: LD_VAR 0 10
72536: RET
// export function WantHeal ( sci , unit ) ; begin
72537: LD_INT 0
72539: PPUSH
// if GetTaskList ( sci ) > 0 then
72540: LD_VAR 0 1
72544: PPUSH
72545: CALL_OW 437
72549: PUSH
72550: LD_INT 0
72552: GREATER
72553: IFFALSE 72623
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72555: LD_VAR 0 1
72559: PPUSH
72560: CALL_OW 437
72564: PUSH
72565: LD_INT 1
72567: ARRAY
72568: PUSH
72569: LD_INT 1
72571: ARRAY
72572: PUSH
72573: LD_STRING l
72575: EQUAL
72576: PUSH
72577: LD_VAR 0 1
72581: PPUSH
72582: CALL_OW 437
72586: PUSH
72587: LD_INT 1
72589: ARRAY
72590: PUSH
72591: LD_INT 4
72593: ARRAY
72594: PUSH
72595: LD_VAR 0 2
72599: EQUAL
72600: AND
72601: IFFALSE 72613
// result := true else
72603: LD_ADDR_VAR 0 3
72607: PUSH
72608: LD_INT 1
72610: ST_TO_ADDR
72611: GO 72621
// result := false ;
72613: LD_ADDR_VAR 0 3
72617: PUSH
72618: LD_INT 0
72620: ST_TO_ADDR
// end else
72621: GO 72631
// result := false ;
72623: LD_ADDR_VAR 0 3
72627: PUSH
72628: LD_INT 0
72630: ST_TO_ADDR
// end ;
72631: LD_VAR 0 3
72635: RET
// export function HealTarget ( sci ) ; begin
72636: LD_INT 0
72638: PPUSH
// if not sci then
72639: LD_VAR 0 1
72643: NOT
72644: IFFALSE 72648
// exit ;
72646: GO 72713
// result := 0 ;
72648: LD_ADDR_VAR 0 2
72652: PUSH
72653: LD_INT 0
72655: ST_TO_ADDR
// if GetTaskList ( sci ) then
72656: LD_VAR 0 1
72660: PPUSH
72661: CALL_OW 437
72665: IFFALSE 72713
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72667: LD_VAR 0 1
72671: PPUSH
72672: CALL_OW 437
72676: PUSH
72677: LD_INT 1
72679: ARRAY
72680: PUSH
72681: LD_INT 1
72683: ARRAY
72684: PUSH
72685: LD_STRING l
72687: EQUAL
72688: IFFALSE 72713
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72690: LD_ADDR_VAR 0 2
72694: PUSH
72695: LD_VAR 0 1
72699: PPUSH
72700: CALL_OW 437
72704: PUSH
72705: LD_INT 1
72707: ARRAY
72708: PUSH
72709: LD_INT 4
72711: ARRAY
72712: ST_TO_ADDR
// end ;
72713: LD_VAR 0 2
72717: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72718: LD_INT 0
72720: PPUSH
72721: PPUSH
72722: PPUSH
72723: PPUSH
// if not base_units then
72724: LD_VAR 0 1
72728: NOT
72729: IFFALSE 72733
// exit ;
72731: GO 72820
// result := false ;
72733: LD_ADDR_VAR 0 2
72737: PUSH
72738: LD_INT 0
72740: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72741: LD_ADDR_VAR 0 5
72745: PUSH
72746: LD_VAR 0 1
72750: PPUSH
72751: LD_INT 21
72753: PUSH
72754: LD_INT 3
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: PPUSH
72761: CALL_OW 72
72765: ST_TO_ADDR
// if not tmp then
72766: LD_VAR 0 5
72770: NOT
72771: IFFALSE 72775
// exit ;
72773: GO 72820
// for i in tmp do
72775: LD_ADDR_VAR 0 3
72779: PUSH
72780: LD_VAR 0 5
72784: PUSH
72785: FOR_IN
72786: IFFALSE 72818
// begin result := EnemyInRange ( i , 22 ) ;
72788: LD_ADDR_VAR 0 2
72792: PUSH
72793: LD_VAR 0 3
72797: PPUSH
72798: LD_INT 22
72800: PPUSH
72801: CALL 70407 0 2
72805: ST_TO_ADDR
// if result then
72806: LD_VAR 0 2
72810: IFFALSE 72816
// exit ;
72812: POP
72813: POP
72814: GO 72820
// end ;
72816: GO 72785
72818: POP
72819: POP
// end ;
72820: LD_VAR 0 2
72824: RET
// export function FilterByTag ( units , tag ) ; begin
72825: LD_INT 0
72827: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72828: LD_ADDR_VAR 0 3
72832: PUSH
72833: LD_VAR 0 1
72837: PPUSH
72838: LD_INT 120
72840: PUSH
72841: LD_VAR 0 2
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PPUSH
72850: CALL_OW 72
72854: ST_TO_ADDR
// end ;
72855: LD_VAR 0 3
72859: RET
// export function IsDriver ( un ) ; begin
72860: LD_INT 0
72862: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72863: LD_ADDR_VAR 0 2
72867: PUSH
72868: LD_VAR 0 1
72872: PUSH
72873: LD_INT 55
72875: PUSH
72876: EMPTY
72877: LIST
72878: PPUSH
72879: CALL_OW 69
72883: IN
72884: ST_TO_ADDR
// end ;
72885: LD_VAR 0 2
72889: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72890: LD_INT 0
72892: PPUSH
72893: PPUSH
// list := [ ] ;
72894: LD_ADDR_VAR 0 5
72898: PUSH
72899: EMPTY
72900: ST_TO_ADDR
// case d of 0 :
72901: LD_VAR 0 3
72905: PUSH
72906: LD_INT 0
72908: DOUBLE
72909: EQUAL
72910: IFTRUE 72914
72912: GO 73047
72914: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72915: LD_ADDR_VAR 0 5
72919: PUSH
72920: LD_VAR 0 1
72924: PUSH
72925: LD_INT 4
72927: MINUS
72928: PUSH
72929: LD_VAR 0 2
72933: PUSH
72934: LD_INT 4
72936: MINUS
72937: PUSH
72938: LD_INT 2
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: LIST
72945: PUSH
72946: LD_VAR 0 1
72950: PUSH
72951: LD_INT 3
72953: MINUS
72954: PUSH
72955: LD_VAR 0 2
72959: PUSH
72960: LD_INT 1
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: LIST
72967: PUSH
72968: LD_VAR 0 1
72972: PUSH
72973: LD_INT 4
72975: PLUS
72976: PUSH
72977: LD_VAR 0 2
72981: PUSH
72982: LD_INT 4
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: LIST
72989: PUSH
72990: LD_VAR 0 1
72994: PUSH
72995: LD_INT 3
72997: PLUS
72998: PUSH
72999: LD_VAR 0 2
73003: PUSH
73004: LD_INT 3
73006: PLUS
73007: PUSH
73008: LD_INT 5
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: LIST
73015: PUSH
73016: LD_VAR 0 1
73020: PUSH
73021: LD_VAR 0 2
73025: PUSH
73026: LD_INT 4
73028: PLUS
73029: PUSH
73030: LD_INT 0
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: LIST
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: ST_TO_ADDR
// end ; 1 :
73045: GO 73745
73047: LD_INT 1
73049: DOUBLE
73050: EQUAL
73051: IFTRUE 73055
73053: GO 73188
73055: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73056: LD_ADDR_VAR 0 5
73060: PUSH
73061: LD_VAR 0 1
73065: PUSH
73066: LD_VAR 0 2
73070: PUSH
73071: LD_INT 4
73073: MINUS
73074: PUSH
73075: LD_INT 3
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: LIST
73082: PUSH
73083: LD_VAR 0 1
73087: PUSH
73088: LD_INT 3
73090: MINUS
73091: PUSH
73092: LD_VAR 0 2
73096: PUSH
73097: LD_INT 3
73099: MINUS
73100: PUSH
73101: LD_INT 2
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: LIST
73108: PUSH
73109: LD_VAR 0 1
73113: PUSH
73114: LD_INT 4
73116: MINUS
73117: PUSH
73118: LD_VAR 0 2
73122: PUSH
73123: LD_INT 1
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: LIST
73130: PUSH
73131: LD_VAR 0 1
73135: PUSH
73136: LD_VAR 0 2
73140: PUSH
73141: LD_INT 3
73143: PLUS
73144: PUSH
73145: LD_INT 0
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: LIST
73152: PUSH
73153: LD_VAR 0 1
73157: PUSH
73158: LD_INT 4
73160: PLUS
73161: PUSH
73162: LD_VAR 0 2
73166: PUSH
73167: LD_INT 4
73169: PLUS
73170: PUSH
73171: LD_INT 5
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: LIST
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: ST_TO_ADDR
// end ; 2 :
73186: GO 73745
73188: LD_INT 2
73190: DOUBLE
73191: EQUAL
73192: IFTRUE 73196
73194: GO 73325
73196: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73197: LD_ADDR_VAR 0 5
73201: PUSH
73202: LD_VAR 0 1
73206: PUSH
73207: LD_VAR 0 2
73211: PUSH
73212: LD_INT 3
73214: MINUS
73215: PUSH
73216: LD_INT 3
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: LIST
73223: PUSH
73224: LD_VAR 0 1
73228: PUSH
73229: LD_INT 4
73231: PLUS
73232: PUSH
73233: LD_VAR 0 2
73237: PUSH
73238: LD_INT 4
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: LIST
73245: PUSH
73246: LD_VAR 0 1
73250: PUSH
73251: LD_VAR 0 2
73255: PUSH
73256: LD_INT 4
73258: PLUS
73259: PUSH
73260: LD_INT 0
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: LIST
73267: PUSH
73268: LD_VAR 0 1
73272: PUSH
73273: LD_INT 3
73275: MINUS
73276: PUSH
73277: LD_VAR 0 2
73281: PUSH
73282: LD_INT 1
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: LIST
73289: PUSH
73290: LD_VAR 0 1
73294: PUSH
73295: LD_INT 4
73297: MINUS
73298: PUSH
73299: LD_VAR 0 2
73303: PUSH
73304: LD_INT 4
73306: MINUS
73307: PUSH
73308: LD_INT 2
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: LIST
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: ST_TO_ADDR
// end ; 3 :
73323: GO 73745
73325: LD_INT 3
73327: DOUBLE
73328: EQUAL
73329: IFTRUE 73333
73331: GO 73466
73333: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73334: LD_ADDR_VAR 0 5
73338: PUSH
73339: LD_VAR 0 1
73343: PUSH
73344: LD_INT 3
73346: PLUS
73347: PUSH
73348: LD_VAR 0 2
73352: PUSH
73353: LD_INT 4
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: LIST
73360: PUSH
73361: LD_VAR 0 1
73365: PUSH
73366: LD_INT 4
73368: PLUS
73369: PUSH
73370: LD_VAR 0 2
73374: PUSH
73375: LD_INT 4
73377: PLUS
73378: PUSH
73379: LD_INT 5
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: LIST
73386: PUSH
73387: LD_VAR 0 1
73391: PUSH
73392: LD_INT 4
73394: MINUS
73395: PUSH
73396: LD_VAR 0 2
73400: PUSH
73401: LD_INT 1
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: LIST
73408: PUSH
73409: LD_VAR 0 1
73413: PUSH
73414: LD_VAR 0 2
73418: PUSH
73419: LD_INT 4
73421: MINUS
73422: PUSH
73423: LD_INT 3
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: LIST
73430: PUSH
73431: LD_VAR 0 1
73435: PUSH
73436: LD_INT 3
73438: MINUS
73439: PUSH
73440: LD_VAR 0 2
73444: PUSH
73445: LD_INT 3
73447: MINUS
73448: PUSH
73449: LD_INT 2
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: LIST
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: ST_TO_ADDR
// end ; 4 :
73464: GO 73745
73466: LD_INT 4
73468: DOUBLE
73469: EQUAL
73470: IFTRUE 73474
73472: GO 73607
73474: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73475: LD_ADDR_VAR 0 5
73479: PUSH
73480: LD_VAR 0 1
73484: PUSH
73485: LD_VAR 0 2
73489: PUSH
73490: LD_INT 4
73492: PLUS
73493: PUSH
73494: LD_INT 0
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: LIST
73501: PUSH
73502: LD_VAR 0 1
73506: PUSH
73507: LD_INT 3
73509: PLUS
73510: PUSH
73511: LD_VAR 0 2
73515: PUSH
73516: LD_INT 3
73518: PLUS
73519: PUSH
73520: LD_INT 5
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: LIST
73527: PUSH
73528: LD_VAR 0 1
73532: PUSH
73533: LD_INT 4
73535: PLUS
73536: PUSH
73537: LD_VAR 0 2
73541: PUSH
73542: LD_INT 4
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: LIST
73549: PUSH
73550: LD_VAR 0 1
73554: PUSH
73555: LD_VAR 0 2
73559: PUSH
73560: LD_INT 3
73562: MINUS
73563: PUSH
73564: LD_INT 3
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: LIST
73571: PUSH
73572: LD_VAR 0 1
73576: PUSH
73577: LD_INT 4
73579: MINUS
73580: PUSH
73581: LD_VAR 0 2
73585: PUSH
73586: LD_INT 4
73588: MINUS
73589: PUSH
73590: LD_INT 2
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: LIST
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: ST_TO_ADDR
// end ; 5 :
73605: GO 73745
73607: LD_INT 5
73609: DOUBLE
73610: EQUAL
73611: IFTRUE 73615
73613: GO 73744
73615: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73616: LD_ADDR_VAR 0 5
73620: PUSH
73621: LD_VAR 0 1
73625: PUSH
73626: LD_INT 4
73628: MINUS
73629: PUSH
73630: LD_VAR 0 2
73634: PUSH
73635: LD_INT 1
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: LIST
73642: PUSH
73643: LD_VAR 0 1
73647: PUSH
73648: LD_VAR 0 2
73652: PUSH
73653: LD_INT 4
73655: MINUS
73656: PUSH
73657: LD_INT 3
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: LIST
73664: PUSH
73665: LD_VAR 0 1
73669: PUSH
73670: LD_INT 4
73672: PLUS
73673: PUSH
73674: LD_VAR 0 2
73678: PUSH
73679: LD_INT 4
73681: PLUS
73682: PUSH
73683: LD_INT 5
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: LIST
73690: PUSH
73691: LD_VAR 0 1
73695: PUSH
73696: LD_INT 3
73698: PLUS
73699: PUSH
73700: LD_VAR 0 2
73704: PUSH
73705: LD_INT 4
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: LIST
73712: PUSH
73713: LD_VAR 0 1
73717: PUSH
73718: LD_VAR 0 2
73722: PUSH
73723: LD_INT 3
73725: PLUS
73726: PUSH
73727: LD_INT 0
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: LIST
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: ST_TO_ADDR
// end ; end ;
73742: GO 73745
73744: POP
// result := list ;
73745: LD_ADDR_VAR 0 4
73749: PUSH
73750: LD_VAR 0 5
73754: ST_TO_ADDR
// end ;
73755: LD_VAR 0 4
73759: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73760: LD_INT 0
73762: PPUSH
73763: PPUSH
73764: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73765: LD_VAR 0 1
73769: NOT
73770: PUSH
73771: LD_VAR 0 2
73775: PUSH
73776: LD_INT 1
73778: PUSH
73779: LD_INT 2
73781: PUSH
73782: LD_INT 3
73784: PUSH
73785: LD_INT 4
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: IN
73794: NOT
73795: OR
73796: IFFALSE 73800
// exit ;
73798: GO 73883
// tmp := [ ] ;
73800: LD_ADDR_VAR 0 5
73804: PUSH
73805: EMPTY
73806: ST_TO_ADDR
// for i in units do
73807: LD_ADDR_VAR 0 4
73811: PUSH
73812: LD_VAR 0 1
73816: PUSH
73817: FOR_IN
73818: IFFALSE 73852
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73820: LD_ADDR_VAR 0 5
73824: PUSH
73825: LD_VAR 0 5
73829: PPUSH
73830: LD_VAR 0 4
73834: PPUSH
73835: LD_VAR 0 2
73839: PPUSH
73840: CALL_OW 259
73844: PPUSH
73845: CALL 75243 0 2
73849: ST_TO_ADDR
73850: GO 73817
73852: POP
73853: POP
// if not tmp then
73854: LD_VAR 0 5
73858: NOT
73859: IFFALSE 73863
// exit ;
73861: GO 73883
// result := SortListByListDesc ( units , tmp ) ;
73863: LD_ADDR_VAR 0 3
73867: PUSH
73868: LD_VAR 0 1
73872: PPUSH
73873: LD_VAR 0 5
73877: PPUSH
73878: CALL_OW 77
73882: ST_TO_ADDR
// end ;
73883: LD_VAR 0 3
73887: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73888: LD_INT 0
73890: PPUSH
73891: PPUSH
73892: PPUSH
// result := false ;
73893: LD_ADDR_VAR 0 3
73897: PUSH
73898: LD_INT 0
73900: ST_TO_ADDR
// if not building then
73901: LD_VAR 0 2
73905: NOT
73906: IFFALSE 73910
// exit ;
73908: GO 74048
// x := GetX ( building ) ;
73910: LD_ADDR_VAR 0 4
73914: PUSH
73915: LD_VAR 0 2
73919: PPUSH
73920: CALL_OW 250
73924: ST_TO_ADDR
// y := GetY ( building ) ;
73925: LD_ADDR_VAR 0 5
73929: PUSH
73930: LD_VAR 0 2
73934: PPUSH
73935: CALL_OW 251
73939: ST_TO_ADDR
// if not x or not y then
73940: LD_VAR 0 4
73944: NOT
73945: PUSH
73946: LD_VAR 0 5
73950: NOT
73951: OR
73952: IFFALSE 73956
// exit ;
73954: GO 74048
// if GetTaskList ( unit ) then
73956: LD_VAR 0 1
73960: PPUSH
73961: CALL_OW 437
73965: IFFALSE 74048
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73967: LD_STRING e
73969: PUSH
73970: LD_VAR 0 1
73974: PPUSH
73975: CALL_OW 437
73979: PUSH
73980: LD_INT 1
73982: ARRAY
73983: PUSH
73984: LD_INT 1
73986: ARRAY
73987: EQUAL
73988: PUSH
73989: LD_VAR 0 4
73993: PUSH
73994: LD_VAR 0 1
73998: PPUSH
73999: CALL_OW 437
74003: PUSH
74004: LD_INT 1
74006: ARRAY
74007: PUSH
74008: LD_INT 2
74010: ARRAY
74011: EQUAL
74012: AND
74013: PUSH
74014: LD_VAR 0 5
74018: PUSH
74019: LD_VAR 0 1
74023: PPUSH
74024: CALL_OW 437
74028: PUSH
74029: LD_INT 1
74031: ARRAY
74032: PUSH
74033: LD_INT 3
74035: ARRAY
74036: EQUAL
74037: AND
74038: IFFALSE 74048
// result := true end ;
74040: LD_ADDR_VAR 0 3
74044: PUSH
74045: LD_INT 1
74047: ST_TO_ADDR
// end ;
74048: LD_VAR 0 3
74052: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74053: LD_INT 0
74055: PPUSH
// result := false ;
74056: LD_ADDR_VAR 0 4
74060: PUSH
74061: LD_INT 0
74063: ST_TO_ADDR
// if GetTaskList ( unit ) then
74064: LD_VAR 0 1
74068: PPUSH
74069: CALL_OW 437
74073: IFFALSE 74156
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74075: LD_STRING M
74077: PUSH
74078: LD_VAR 0 1
74082: PPUSH
74083: CALL_OW 437
74087: PUSH
74088: LD_INT 1
74090: ARRAY
74091: PUSH
74092: LD_INT 1
74094: ARRAY
74095: EQUAL
74096: PUSH
74097: LD_VAR 0 2
74101: PUSH
74102: LD_VAR 0 1
74106: PPUSH
74107: CALL_OW 437
74111: PUSH
74112: LD_INT 1
74114: ARRAY
74115: PUSH
74116: LD_INT 2
74118: ARRAY
74119: EQUAL
74120: AND
74121: PUSH
74122: LD_VAR 0 3
74126: PUSH
74127: LD_VAR 0 1
74131: PPUSH
74132: CALL_OW 437
74136: PUSH
74137: LD_INT 1
74139: ARRAY
74140: PUSH
74141: LD_INT 3
74143: ARRAY
74144: EQUAL
74145: AND
74146: IFFALSE 74156
// result := true ;
74148: LD_ADDR_VAR 0 4
74152: PUSH
74153: LD_INT 1
74155: ST_TO_ADDR
// end ; end ;
74156: LD_VAR 0 4
74160: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74161: LD_INT 0
74163: PPUSH
74164: PPUSH
74165: PPUSH
74166: PPUSH
// if not unit or not area then
74167: LD_VAR 0 1
74171: NOT
74172: PUSH
74173: LD_VAR 0 2
74177: NOT
74178: OR
74179: IFFALSE 74183
// exit ;
74181: GO 74346
// tmp := AreaToList ( area , i ) ;
74183: LD_ADDR_VAR 0 6
74187: PUSH
74188: LD_VAR 0 2
74192: PPUSH
74193: LD_VAR 0 5
74197: PPUSH
74198: CALL_OW 517
74202: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74203: LD_ADDR_VAR 0 5
74207: PUSH
74208: DOUBLE
74209: LD_INT 1
74211: DEC
74212: ST_TO_ADDR
74213: LD_VAR 0 6
74217: PUSH
74218: LD_INT 1
74220: ARRAY
74221: PUSH
74222: FOR_TO
74223: IFFALSE 74344
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74225: LD_ADDR_VAR 0 7
74229: PUSH
74230: LD_VAR 0 6
74234: PUSH
74235: LD_INT 1
74237: ARRAY
74238: PUSH
74239: LD_VAR 0 5
74243: ARRAY
74244: PUSH
74245: LD_VAR 0 6
74249: PUSH
74250: LD_INT 2
74252: ARRAY
74253: PUSH
74254: LD_VAR 0 5
74258: ARRAY
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
74264: LD_INT 92
74266: PUSH
74267: LD_VAR 0 7
74271: PUSH
74272: LD_INT 1
74274: ARRAY
74275: PUSH
74276: LD_VAR 0 7
74280: PUSH
74281: LD_INT 2
74283: ARRAY
74284: PUSH
74285: LD_INT 3
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: PPUSH
74294: CALL_OW 69
74298: PUSH
74299: LD_INT 0
74301: EQUAL
74302: IFFALSE 74342
// begin PlaceUnitArea ( unit , area , mode ) ;
74304: LD_VAR 0 1
74308: PPUSH
74309: LD_VAR 0 2
74313: PPUSH
74314: LD_VAR 0 3
74318: PPUSH
74319: CALL_OW 49
// result := IsPlaced ( unit ) ;
74323: LD_ADDR_VAR 0 4
74327: PUSH
74328: LD_VAR 0 1
74332: PPUSH
74333: CALL_OW 305
74337: ST_TO_ADDR
// exit ;
74338: POP
74339: POP
74340: GO 74346
// end ; end ;
74342: GO 74222
74344: POP
74345: POP
// end ;
74346: LD_VAR 0 4
74350: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74351: LD_INT 0
74353: PPUSH
74354: PPUSH
74355: PPUSH
// if not side or side > 8 then
74356: LD_VAR 0 1
74360: NOT
74361: PUSH
74362: LD_VAR 0 1
74366: PUSH
74367: LD_INT 8
74369: GREATER
74370: OR
74371: IFFALSE 74375
// exit ;
74373: GO 74562
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74375: LD_ADDR_VAR 0 4
74379: PUSH
74380: LD_INT 22
74382: PUSH
74383: LD_VAR 0 1
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: LD_INT 21
74394: PUSH
74395: LD_INT 3
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PPUSH
74406: CALL_OW 69
74410: ST_TO_ADDR
// if not tmp then
74411: LD_VAR 0 4
74415: NOT
74416: IFFALSE 74420
// exit ;
74418: GO 74562
// enable_addtolog := true ;
74420: LD_ADDR_OWVAR 81
74424: PUSH
74425: LD_INT 1
74427: ST_TO_ADDR
// AddToLog ( [ ) ;
74428: LD_STRING [
74430: PPUSH
74431: CALL_OW 561
// for i in tmp do
74435: LD_ADDR_VAR 0 3
74439: PUSH
74440: LD_VAR 0 4
74444: PUSH
74445: FOR_IN
74446: IFFALSE 74553
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74448: LD_STRING [
74450: PUSH
74451: LD_VAR 0 3
74455: PPUSH
74456: CALL_OW 266
74460: STR
74461: PUSH
74462: LD_STRING , 
74464: STR
74465: PUSH
74466: LD_VAR 0 3
74470: PPUSH
74471: CALL_OW 250
74475: STR
74476: PUSH
74477: LD_STRING , 
74479: STR
74480: PUSH
74481: LD_VAR 0 3
74485: PPUSH
74486: CALL_OW 251
74490: STR
74491: PUSH
74492: LD_STRING , 
74494: STR
74495: PUSH
74496: LD_VAR 0 3
74500: PPUSH
74501: CALL_OW 254
74505: STR
74506: PUSH
74507: LD_STRING , 
74509: STR
74510: PUSH
74511: LD_VAR 0 3
74515: PPUSH
74516: LD_INT 1
74518: PPUSH
74519: CALL_OW 268
74523: STR
74524: PUSH
74525: LD_STRING , 
74527: STR
74528: PUSH
74529: LD_VAR 0 3
74533: PPUSH
74534: LD_INT 2
74536: PPUSH
74537: CALL_OW 268
74541: STR
74542: PUSH
74543: LD_STRING ],
74545: STR
74546: PPUSH
74547: CALL_OW 561
// end ;
74551: GO 74445
74553: POP
74554: POP
// AddToLog ( ]; ) ;
74555: LD_STRING ];
74557: PPUSH
74558: CALL_OW 561
// end ;
74562: LD_VAR 0 2
74566: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74567: LD_INT 0
74569: PPUSH
74570: PPUSH
74571: PPUSH
74572: PPUSH
74573: PPUSH
// if not area or not rate or not max then
74574: LD_VAR 0 1
74578: NOT
74579: PUSH
74580: LD_VAR 0 2
74584: NOT
74585: OR
74586: PUSH
74587: LD_VAR 0 4
74591: NOT
74592: OR
74593: IFFALSE 74597
// exit ;
74595: GO 74786
// while 1 do
74597: LD_INT 1
74599: IFFALSE 74786
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74601: LD_ADDR_VAR 0 9
74605: PUSH
74606: LD_VAR 0 1
74610: PPUSH
74611: LD_INT 1
74613: PPUSH
74614: CALL_OW 287
74618: PUSH
74619: LD_INT 10
74621: MUL
74622: ST_TO_ADDR
// r := rate / 10 ;
74623: LD_ADDR_VAR 0 7
74627: PUSH
74628: LD_VAR 0 2
74632: PUSH
74633: LD_INT 10
74635: DIVREAL
74636: ST_TO_ADDR
// time := 1 1$00 ;
74637: LD_ADDR_VAR 0 8
74641: PUSH
74642: LD_INT 2100
74644: ST_TO_ADDR
// if amount < min then
74645: LD_VAR 0 9
74649: PUSH
74650: LD_VAR 0 3
74654: LESS
74655: IFFALSE 74673
// r := r * 2 else
74657: LD_ADDR_VAR 0 7
74661: PUSH
74662: LD_VAR 0 7
74666: PUSH
74667: LD_INT 2
74669: MUL
74670: ST_TO_ADDR
74671: GO 74699
// if amount > max then
74673: LD_VAR 0 9
74677: PUSH
74678: LD_VAR 0 4
74682: GREATER
74683: IFFALSE 74699
// r := r / 2 ;
74685: LD_ADDR_VAR 0 7
74689: PUSH
74690: LD_VAR 0 7
74694: PUSH
74695: LD_INT 2
74697: DIVREAL
74698: ST_TO_ADDR
// time := time / r ;
74699: LD_ADDR_VAR 0 8
74703: PUSH
74704: LD_VAR 0 8
74708: PUSH
74709: LD_VAR 0 7
74713: DIVREAL
74714: ST_TO_ADDR
// if time < 0 then
74715: LD_VAR 0 8
74719: PUSH
74720: LD_INT 0
74722: LESS
74723: IFFALSE 74740
// time := time * - 1 ;
74725: LD_ADDR_VAR 0 8
74729: PUSH
74730: LD_VAR 0 8
74734: PUSH
74735: LD_INT 1
74737: NEG
74738: MUL
74739: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74740: LD_VAR 0 8
74744: PUSH
74745: LD_INT 35
74747: PPUSH
74748: LD_INT 875
74750: PPUSH
74751: CALL_OW 12
74755: PLUS
74756: PPUSH
74757: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74761: LD_INT 1
74763: PPUSH
74764: LD_INT 5
74766: PPUSH
74767: CALL_OW 12
74771: PPUSH
74772: LD_VAR 0 1
74776: PPUSH
74777: LD_INT 1
74779: PPUSH
74780: CALL_OW 55
// end ;
74784: GO 74597
// end ;
74786: LD_VAR 0 5
74790: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74791: LD_INT 0
74793: PPUSH
74794: PPUSH
74795: PPUSH
74796: PPUSH
74797: PPUSH
74798: PPUSH
74799: PPUSH
74800: PPUSH
// if not turrets or not factories then
74801: LD_VAR 0 1
74805: NOT
74806: PUSH
74807: LD_VAR 0 2
74811: NOT
74812: OR
74813: IFFALSE 74817
// exit ;
74815: GO 75124
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74817: LD_ADDR_VAR 0 10
74821: PUSH
74822: LD_INT 5
74824: PUSH
74825: LD_INT 6
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: PUSH
74832: LD_INT 2
74834: PUSH
74835: LD_INT 4
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: PUSH
74842: LD_INT 3
74844: PUSH
74845: LD_INT 5
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: PUSH
74852: EMPTY
74853: LIST
74854: LIST
74855: LIST
74856: PUSH
74857: LD_INT 24
74859: PUSH
74860: LD_INT 25
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: PUSH
74867: LD_INT 23
74869: PUSH
74870: LD_INT 27
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 42
74883: PUSH
74884: LD_INT 43
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: PUSH
74891: LD_INT 44
74893: PUSH
74894: LD_INT 46
74896: PUSH
74897: EMPTY
74898: LIST
74899: LIST
74900: PUSH
74901: LD_INT 45
74903: PUSH
74904: LD_INT 47
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: LIST
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: LIST
74920: ST_TO_ADDR
// result := [ ] ;
74921: LD_ADDR_VAR 0 3
74925: PUSH
74926: EMPTY
74927: ST_TO_ADDR
// for i in turrets do
74928: LD_ADDR_VAR 0 4
74932: PUSH
74933: LD_VAR 0 1
74937: PUSH
74938: FOR_IN
74939: IFFALSE 75122
// begin nat := GetNation ( i ) ;
74941: LD_ADDR_VAR 0 7
74945: PUSH
74946: LD_VAR 0 4
74950: PPUSH
74951: CALL_OW 248
74955: ST_TO_ADDR
// weapon := 0 ;
74956: LD_ADDR_VAR 0 8
74960: PUSH
74961: LD_INT 0
74963: ST_TO_ADDR
// if not nat then
74964: LD_VAR 0 7
74968: NOT
74969: IFFALSE 74973
// continue ;
74971: GO 74938
// for j in list [ nat ] do
74973: LD_ADDR_VAR 0 5
74977: PUSH
74978: LD_VAR 0 10
74982: PUSH
74983: LD_VAR 0 7
74987: ARRAY
74988: PUSH
74989: FOR_IN
74990: IFFALSE 75031
// if GetBWeapon ( i ) = j [ 1 ] then
74992: LD_VAR 0 4
74996: PPUSH
74997: CALL_OW 269
75001: PUSH
75002: LD_VAR 0 5
75006: PUSH
75007: LD_INT 1
75009: ARRAY
75010: EQUAL
75011: IFFALSE 75029
// begin weapon := j [ 2 ] ;
75013: LD_ADDR_VAR 0 8
75017: PUSH
75018: LD_VAR 0 5
75022: PUSH
75023: LD_INT 2
75025: ARRAY
75026: ST_TO_ADDR
// break ;
75027: GO 75031
// end ;
75029: GO 74989
75031: POP
75032: POP
// if not weapon then
75033: LD_VAR 0 8
75037: NOT
75038: IFFALSE 75042
// continue ;
75040: GO 74938
// for k in factories do
75042: LD_ADDR_VAR 0 6
75046: PUSH
75047: LD_VAR 0 2
75051: PUSH
75052: FOR_IN
75053: IFFALSE 75118
// begin weapons := AvailableWeaponList ( k ) ;
75055: LD_ADDR_VAR 0 9
75059: PUSH
75060: LD_VAR 0 6
75064: PPUSH
75065: CALL_OW 478
75069: ST_TO_ADDR
// if not weapons then
75070: LD_VAR 0 9
75074: NOT
75075: IFFALSE 75079
// continue ;
75077: GO 75052
// if weapon in weapons then
75079: LD_VAR 0 8
75083: PUSH
75084: LD_VAR 0 9
75088: IN
75089: IFFALSE 75116
// begin result := [ i , weapon ] ;
75091: LD_ADDR_VAR 0 3
75095: PUSH
75096: LD_VAR 0 4
75100: PUSH
75101: LD_VAR 0 8
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: ST_TO_ADDR
// exit ;
75110: POP
75111: POP
75112: POP
75113: POP
75114: GO 75124
// end ; end ;
75116: GO 75052
75118: POP
75119: POP
// end ;
75120: GO 74938
75122: POP
75123: POP
// end ;
75124: LD_VAR 0 3
75128: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75129: LD_INT 0
75131: PPUSH
// if not side or side > 8 then
75132: LD_VAR 0 3
75136: NOT
75137: PUSH
75138: LD_VAR 0 3
75142: PUSH
75143: LD_INT 8
75145: GREATER
75146: OR
75147: IFFALSE 75151
// exit ;
75149: GO 75210
// if not range then
75151: LD_VAR 0 4
75155: NOT
75156: IFFALSE 75167
// range := - 12 ;
75158: LD_ADDR_VAR 0 4
75162: PUSH
75163: LD_INT 12
75165: NEG
75166: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75167: LD_VAR 0 1
75171: PPUSH
75172: LD_VAR 0 2
75176: PPUSH
75177: LD_VAR 0 3
75181: PPUSH
75182: LD_VAR 0 4
75186: PPUSH
75187: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75191: LD_VAR 0 1
75195: PPUSH
75196: LD_VAR 0 2
75200: PPUSH
75201: LD_VAR 0 3
75205: PPUSH
75206: CALL_OW 331
// end ;
75210: LD_VAR 0 5
75214: RET
// export function Video ( mode ) ; begin
75215: LD_INT 0
75217: PPUSH
// ingame_video = mode ;
75218: LD_ADDR_OWVAR 52
75222: PUSH
75223: LD_VAR 0 1
75227: ST_TO_ADDR
// interface_hidden = mode ;
75228: LD_ADDR_OWVAR 54
75232: PUSH
75233: LD_VAR 0 1
75237: ST_TO_ADDR
// end ;
75238: LD_VAR 0 2
75242: RET
// export function Join ( array , element ) ; begin
75243: LD_INT 0
75245: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75246: LD_ADDR_VAR 0 3
75250: PUSH
75251: LD_VAR 0 1
75255: PPUSH
75256: LD_VAR 0 1
75260: PUSH
75261: LD_INT 1
75263: PLUS
75264: PPUSH
75265: LD_VAR 0 2
75269: PPUSH
75270: CALL_OW 1
75274: ST_TO_ADDR
// end ;
75275: LD_VAR 0 3
75279: RET
// export function JoinUnion ( array , element ) ; begin
75280: LD_INT 0
75282: PPUSH
// result := array union element ;
75283: LD_ADDR_VAR 0 3
75287: PUSH
75288: LD_VAR 0 1
75292: PUSH
75293: LD_VAR 0 2
75297: UNION
75298: ST_TO_ADDR
// end ;
75299: LD_VAR 0 3
75303: RET
// export function GetBehemoths ( side ) ; begin
75304: LD_INT 0
75306: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75307: LD_ADDR_VAR 0 2
75311: PUSH
75312: LD_INT 22
75314: PUSH
75315: LD_VAR 0 1
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: PUSH
75324: LD_INT 31
75326: PUSH
75327: LD_INT 25
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: PPUSH
75338: CALL_OW 69
75342: ST_TO_ADDR
// end ;
75343: LD_VAR 0 2
75347: RET
// export function Shuffle ( array ) ; var i , index ; begin
75348: LD_INT 0
75350: PPUSH
75351: PPUSH
75352: PPUSH
// result := [ ] ;
75353: LD_ADDR_VAR 0 2
75357: PUSH
75358: EMPTY
75359: ST_TO_ADDR
// if not array then
75360: LD_VAR 0 1
75364: NOT
75365: IFFALSE 75369
// exit ;
75367: GO 75468
// Randomize ;
75369: CALL_OW 10
// for i = array downto 1 do
75373: LD_ADDR_VAR 0 3
75377: PUSH
75378: DOUBLE
75379: LD_VAR 0 1
75383: INC
75384: ST_TO_ADDR
75385: LD_INT 1
75387: PUSH
75388: FOR_DOWNTO
75389: IFFALSE 75466
// begin index := rand ( 1 , array ) ;
75391: LD_ADDR_VAR 0 4
75395: PUSH
75396: LD_INT 1
75398: PPUSH
75399: LD_VAR 0 1
75403: PPUSH
75404: CALL_OW 12
75408: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75409: LD_ADDR_VAR 0 2
75413: PUSH
75414: LD_VAR 0 2
75418: PPUSH
75419: LD_VAR 0 2
75423: PUSH
75424: LD_INT 1
75426: PLUS
75427: PPUSH
75428: LD_VAR 0 1
75432: PUSH
75433: LD_VAR 0 4
75437: ARRAY
75438: PPUSH
75439: CALL_OW 2
75443: ST_TO_ADDR
// array := Delete ( array , index ) ;
75444: LD_ADDR_VAR 0 1
75448: PUSH
75449: LD_VAR 0 1
75453: PPUSH
75454: LD_VAR 0 4
75458: PPUSH
75459: CALL_OW 3
75463: ST_TO_ADDR
// end ;
75464: GO 75388
75466: POP
75467: POP
// end ;
75468: LD_VAR 0 2
75472: RET
// export function GetBaseMaterials ( base ) ; begin
75473: LD_INT 0
75475: PPUSH
// result := [ 0 , 0 , 0 ] ;
75476: LD_ADDR_VAR 0 2
75480: PUSH
75481: LD_INT 0
75483: PUSH
75484: LD_INT 0
75486: PUSH
75487: LD_INT 0
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: LIST
75494: ST_TO_ADDR
// if not base then
75495: LD_VAR 0 1
75499: NOT
75500: IFFALSE 75504
// exit ;
75502: GO 75553
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75504: LD_ADDR_VAR 0 2
75508: PUSH
75509: LD_VAR 0 1
75513: PPUSH
75514: LD_INT 1
75516: PPUSH
75517: CALL_OW 275
75521: PUSH
75522: LD_VAR 0 1
75526: PPUSH
75527: LD_INT 2
75529: PPUSH
75530: CALL_OW 275
75534: PUSH
75535: LD_VAR 0 1
75539: PPUSH
75540: LD_INT 3
75542: PPUSH
75543: CALL_OW 275
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: LIST
75552: ST_TO_ADDR
// end ;
75553: LD_VAR 0 2
75557: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75558: LD_INT 0
75560: PPUSH
75561: PPUSH
// result := array ;
75562: LD_ADDR_VAR 0 3
75566: PUSH
75567: LD_VAR 0 1
75571: ST_TO_ADDR
// if size >= result then
75572: LD_VAR 0 2
75576: PUSH
75577: LD_VAR 0 3
75581: GREATEREQUAL
75582: IFFALSE 75586
// exit ;
75584: GO 75636
// if size then
75586: LD_VAR 0 2
75590: IFFALSE 75636
// for i := array downto size do
75592: LD_ADDR_VAR 0 4
75596: PUSH
75597: DOUBLE
75598: LD_VAR 0 1
75602: INC
75603: ST_TO_ADDR
75604: LD_VAR 0 2
75608: PUSH
75609: FOR_DOWNTO
75610: IFFALSE 75634
// result := Delete ( result , result ) ;
75612: LD_ADDR_VAR 0 3
75616: PUSH
75617: LD_VAR 0 3
75621: PPUSH
75622: LD_VAR 0 3
75626: PPUSH
75627: CALL_OW 3
75631: ST_TO_ADDR
75632: GO 75609
75634: POP
75635: POP
// end ;
75636: LD_VAR 0 3
75640: RET
// export function ComExit ( unit ) ; var tmp ; begin
75641: LD_INT 0
75643: PPUSH
75644: PPUSH
// if not IsInUnit ( unit ) then
75645: LD_VAR 0 1
75649: PPUSH
75650: CALL_OW 310
75654: NOT
75655: IFFALSE 75659
// exit ;
75657: GO 75719
// tmp := IsInUnit ( unit ) ;
75659: LD_ADDR_VAR 0 3
75663: PUSH
75664: LD_VAR 0 1
75668: PPUSH
75669: CALL_OW 310
75673: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75674: LD_VAR 0 3
75678: PPUSH
75679: CALL_OW 247
75683: PUSH
75684: LD_INT 2
75686: EQUAL
75687: IFFALSE 75700
// ComExitVehicle ( unit ) else
75689: LD_VAR 0 1
75693: PPUSH
75694: CALL_OW 121
75698: GO 75709
// ComExitBuilding ( unit ) ;
75700: LD_VAR 0 1
75704: PPUSH
75705: CALL_OW 122
// result := tmp ;
75709: LD_ADDR_VAR 0 2
75713: PUSH
75714: LD_VAR 0 3
75718: ST_TO_ADDR
// end ;
75719: LD_VAR 0 2
75723: RET
// export function ComExitAll ( units ) ; var i ; begin
75724: LD_INT 0
75726: PPUSH
75727: PPUSH
// if not units then
75728: LD_VAR 0 1
75732: NOT
75733: IFFALSE 75737
// exit ;
75735: GO 75763
// for i in units do
75737: LD_ADDR_VAR 0 3
75741: PUSH
75742: LD_VAR 0 1
75746: PUSH
75747: FOR_IN
75748: IFFALSE 75761
// ComExit ( i ) ;
75750: LD_VAR 0 3
75754: PPUSH
75755: CALL 75641 0 1
75759: GO 75747
75761: POP
75762: POP
// end ;
75763: LD_VAR 0 2
75767: RET
// export function ResetHc ; begin
75768: LD_INT 0
75770: PPUSH
// InitHc ;
75771: CALL_OW 19
// hc_importance := 0 ;
75775: LD_ADDR_OWVAR 32
75779: PUSH
75780: LD_INT 0
75782: ST_TO_ADDR
// end ;
75783: LD_VAR 0 1
75787: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75788: LD_INT 0
75790: PPUSH
75791: PPUSH
75792: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75793: LD_ADDR_VAR 0 6
75797: PUSH
75798: LD_VAR 0 1
75802: PUSH
75803: LD_VAR 0 3
75807: PLUS
75808: PUSH
75809: LD_INT 2
75811: DIV
75812: ST_TO_ADDR
// if _x < 0 then
75813: LD_VAR 0 6
75817: PUSH
75818: LD_INT 0
75820: LESS
75821: IFFALSE 75838
// _x := _x * - 1 ;
75823: LD_ADDR_VAR 0 6
75827: PUSH
75828: LD_VAR 0 6
75832: PUSH
75833: LD_INT 1
75835: NEG
75836: MUL
75837: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75838: LD_ADDR_VAR 0 7
75842: PUSH
75843: LD_VAR 0 2
75847: PUSH
75848: LD_VAR 0 4
75852: PLUS
75853: PUSH
75854: LD_INT 2
75856: DIV
75857: ST_TO_ADDR
// if _y < 0 then
75858: LD_VAR 0 7
75862: PUSH
75863: LD_INT 0
75865: LESS
75866: IFFALSE 75883
// _y := _y * - 1 ;
75868: LD_ADDR_VAR 0 7
75872: PUSH
75873: LD_VAR 0 7
75877: PUSH
75878: LD_INT 1
75880: NEG
75881: MUL
75882: ST_TO_ADDR
// result := [ _x , _y ] ;
75883: LD_ADDR_VAR 0 5
75887: PUSH
75888: LD_VAR 0 6
75892: PUSH
75893: LD_VAR 0 7
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: ST_TO_ADDR
// end ;
75902: LD_VAR 0 5
75906: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75907: LD_INT 0
75909: PPUSH
75910: PPUSH
75911: PPUSH
75912: PPUSH
// task := GetTaskList ( unit ) ;
75913: LD_ADDR_VAR 0 7
75917: PUSH
75918: LD_VAR 0 1
75922: PPUSH
75923: CALL_OW 437
75927: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75928: LD_VAR 0 7
75932: NOT
75933: PUSH
75934: LD_VAR 0 1
75938: PPUSH
75939: LD_VAR 0 2
75943: PPUSH
75944: CALL_OW 308
75948: NOT
75949: AND
75950: IFFALSE 75954
// exit ;
75952: GO 76072
// if IsInArea ( unit , area ) then
75954: LD_VAR 0 1
75958: PPUSH
75959: LD_VAR 0 2
75963: PPUSH
75964: CALL_OW 308
75968: IFFALSE 75986
// begin ComMoveToArea ( unit , goAway ) ;
75970: LD_VAR 0 1
75974: PPUSH
75975: LD_VAR 0 3
75979: PPUSH
75980: CALL_OW 113
// exit ;
75984: GO 76072
// end ; if task [ 1 ] [ 1 ] <> M then
75986: LD_VAR 0 7
75990: PUSH
75991: LD_INT 1
75993: ARRAY
75994: PUSH
75995: LD_INT 1
75997: ARRAY
75998: PUSH
75999: LD_STRING M
76001: NONEQUAL
76002: IFFALSE 76006
// exit ;
76004: GO 76072
// x := task [ 1 ] [ 2 ] ;
76006: LD_ADDR_VAR 0 5
76010: PUSH
76011: LD_VAR 0 7
76015: PUSH
76016: LD_INT 1
76018: ARRAY
76019: PUSH
76020: LD_INT 2
76022: ARRAY
76023: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76024: LD_ADDR_VAR 0 6
76028: PUSH
76029: LD_VAR 0 7
76033: PUSH
76034: LD_INT 1
76036: ARRAY
76037: PUSH
76038: LD_INT 3
76040: ARRAY
76041: ST_TO_ADDR
// if InArea ( x , y , area ) then
76042: LD_VAR 0 5
76046: PPUSH
76047: LD_VAR 0 6
76051: PPUSH
76052: LD_VAR 0 2
76056: PPUSH
76057: CALL_OW 309
76061: IFFALSE 76072
// ComStop ( unit ) ;
76063: LD_VAR 0 1
76067: PPUSH
76068: CALL_OW 141
// end ;
76072: LD_VAR 0 4
76076: RET
// export function Abs ( value ) ; begin
76077: LD_INT 0
76079: PPUSH
// result := value ;
76080: LD_ADDR_VAR 0 2
76084: PUSH
76085: LD_VAR 0 1
76089: ST_TO_ADDR
// if value < 0 then
76090: LD_VAR 0 1
76094: PUSH
76095: LD_INT 0
76097: LESS
76098: IFFALSE 76115
// result := value * - 1 ;
76100: LD_ADDR_VAR 0 2
76104: PUSH
76105: LD_VAR 0 1
76109: PUSH
76110: LD_INT 1
76112: NEG
76113: MUL
76114: ST_TO_ADDR
// end ;
76115: LD_VAR 0 2
76119: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76120: LD_INT 0
76122: PPUSH
76123: PPUSH
76124: PPUSH
76125: PPUSH
76126: PPUSH
76127: PPUSH
76128: PPUSH
76129: PPUSH
// if not unit or not building then
76130: LD_VAR 0 1
76134: NOT
76135: PUSH
76136: LD_VAR 0 2
76140: NOT
76141: OR
76142: IFFALSE 76146
// exit ;
76144: GO 76372
// x := GetX ( building ) ;
76146: LD_ADDR_VAR 0 4
76150: PUSH
76151: LD_VAR 0 2
76155: PPUSH
76156: CALL_OW 250
76160: ST_TO_ADDR
// y := GetY ( building ) ;
76161: LD_ADDR_VAR 0 6
76165: PUSH
76166: LD_VAR 0 2
76170: PPUSH
76171: CALL_OW 251
76175: ST_TO_ADDR
// d := GetDir ( building ) ;
76176: LD_ADDR_VAR 0 8
76180: PUSH
76181: LD_VAR 0 2
76185: PPUSH
76186: CALL_OW 254
76190: ST_TO_ADDR
// r := 4 ;
76191: LD_ADDR_VAR 0 9
76195: PUSH
76196: LD_INT 4
76198: ST_TO_ADDR
// for i := 1 to 5 do
76199: LD_ADDR_VAR 0 10
76203: PUSH
76204: DOUBLE
76205: LD_INT 1
76207: DEC
76208: ST_TO_ADDR
76209: LD_INT 5
76211: PUSH
76212: FOR_TO
76213: IFFALSE 76370
// begin _x := ShiftX ( x , d , r + i ) ;
76215: LD_ADDR_VAR 0 5
76219: PUSH
76220: LD_VAR 0 4
76224: PPUSH
76225: LD_VAR 0 8
76229: PPUSH
76230: LD_VAR 0 9
76234: PUSH
76235: LD_VAR 0 10
76239: PLUS
76240: PPUSH
76241: CALL_OW 272
76245: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76246: LD_ADDR_VAR 0 7
76250: PUSH
76251: LD_VAR 0 6
76255: PPUSH
76256: LD_VAR 0 8
76260: PPUSH
76261: LD_VAR 0 9
76265: PUSH
76266: LD_VAR 0 10
76270: PLUS
76271: PPUSH
76272: CALL_OW 273
76276: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76277: LD_VAR 0 5
76281: PPUSH
76282: LD_VAR 0 7
76286: PPUSH
76287: CALL_OW 488
76291: PUSH
76292: LD_VAR 0 5
76296: PPUSH
76297: LD_VAR 0 7
76301: PPUSH
76302: CALL_OW 428
76306: PPUSH
76307: CALL_OW 247
76311: PUSH
76312: LD_INT 3
76314: PUSH
76315: LD_INT 2
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: IN
76322: NOT
76323: AND
76324: IFFALSE 76368
// begin ComMoveXY ( unit , _x , _y ) ;
76326: LD_VAR 0 1
76330: PPUSH
76331: LD_VAR 0 5
76335: PPUSH
76336: LD_VAR 0 7
76340: PPUSH
76341: CALL_OW 111
// result := [ _x , _y ] ;
76345: LD_ADDR_VAR 0 3
76349: PUSH
76350: LD_VAR 0 5
76354: PUSH
76355: LD_VAR 0 7
76359: PUSH
76360: EMPTY
76361: LIST
76362: LIST
76363: ST_TO_ADDR
// exit ;
76364: POP
76365: POP
76366: GO 76372
// end ; end ;
76368: GO 76212
76370: POP
76371: POP
// end ;
76372: LD_VAR 0 3
76376: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76377: LD_INT 0
76379: PPUSH
76380: PPUSH
76381: PPUSH
// result := 0 ;
76382: LD_ADDR_VAR 0 3
76386: PUSH
76387: LD_INT 0
76389: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76390: LD_VAR 0 1
76394: PUSH
76395: LD_INT 0
76397: LESS
76398: PUSH
76399: LD_VAR 0 1
76403: PUSH
76404: LD_INT 8
76406: GREATER
76407: OR
76408: PUSH
76409: LD_VAR 0 2
76413: PUSH
76414: LD_INT 0
76416: LESS
76417: OR
76418: PUSH
76419: LD_VAR 0 2
76423: PUSH
76424: LD_INT 8
76426: GREATER
76427: OR
76428: IFFALSE 76432
// exit ;
76430: GO 76507
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76432: LD_ADDR_VAR 0 4
76436: PUSH
76437: LD_INT 22
76439: PUSH
76440: LD_VAR 0 2
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: PPUSH
76449: CALL_OW 69
76453: PUSH
76454: FOR_IN
76455: IFFALSE 76505
// begin un := UnitShoot ( i ) ;
76457: LD_ADDR_VAR 0 5
76461: PUSH
76462: LD_VAR 0 4
76466: PPUSH
76467: CALL_OW 504
76471: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76472: LD_VAR 0 5
76476: PPUSH
76477: CALL_OW 255
76481: PUSH
76482: LD_VAR 0 1
76486: EQUAL
76487: IFFALSE 76503
// begin result := un ;
76489: LD_ADDR_VAR 0 3
76493: PUSH
76494: LD_VAR 0 5
76498: ST_TO_ADDR
// exit ;
76499: POP
76500: POP
76501: GO 76507
// end ; end ;
76503: GO 76454
76505: POP
76506: POP
// end ;
76507: LD_VAR 0 3
76511: RET
// export function GetCargoBay ( units ) ; begin
76512: LD_INT 0
76514: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76515: LD_ADDR_VAR 0 2
76519: PUSH
76520: LD_VAR 0 1
76524: PPUSH
76525: LD_INT 2
76527: PUSH
76528: LD_INT 34
76530: PUSH
76531: LD_INT 12
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: LD_INT 34
76540: PUSH
76541: LD_INT 51
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: PUSH
76548: LD_INT 34
76550: PUSH
76551: LD_INT 32
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: PUSH
76558: LD_INT 34
76560: PUSH
76561: LD_INT 89
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: LIST
76572: LIST
76573: LIST
76574: PPUSH
76575: CALL_OW 72
76579: ST_TO_ADDR
// end ;
76580: LD_VAR 0 2
76584: RET
// export function Negate ( value ) ; begin
76585: LD_INT 0
76587: PPUSH
// result := not value ;
76588: LD_ADDR_VAR 0 2
76592: PUSH
76593: LD_VAR 0 1
76597: NOT
76598: ST_TO_ADDR
// end ;
76599: LD_VAR 0 2
76603: RET
// export function Inc ( value ) ; begin
76604: LD_INT 0
76606: PPUSH
// result := value + 1 ;
76607: LD_ADDR_VAR 0 2
76611: PUSH
76612: LD_VAR 0 1
76616: PUSH
76617: LD_INT 1
76619: PLUS
76620: ST_TO_ADDR
// end ;
76621: LD_VAR 0 2
76625: RET
// export function Dec ( value ) ; begin
76626: LD_INT 0
76628: PPUSH
// result := value - 1 ;
76629: LD_ADDR_VAR 0 2
76633: PUSH
76634: LD_VAR 0 1
76638: PUSH
76639: LD_INT 1
76641: MINUS
76642: ST_TO_ADDR
// end ;
76643: LD_VAR 0 2
76647: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76648: LD_INT 0
76650: PPUSH
76651: PPUSH
76652: PPUSH
76653: PPUSH
76654: PPUSH
76655: PPUSH
76656: PPUSH
76657: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76658: LD_VAR 0 1
76662: PPUSH
76663: LD_VAR 0 2
76667: PPUSH
76668: CALL_OW 488
76672: NOT
76673: PUSH
76674: LD_VAR 0 3
76678: PPUSH
76679: LD_VAR 0 4
76683: PPUSH
76684: CALL_OW 488
76688: NOT
76689: OR
76690: IFFALSE 76703
// begin result := - 1 ;
76692: LD_ADDR_VAR 0 5
76696: PUSH
76697: LD_INT 1
76699: NEG
76700: ST_TO_ADDR
// exit ;
76701: GO 76938
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76703: LD_ADDR_VAR 0 12
76707: PUSH
76708: LD_VAR 0 1
76712: PPUSH
76713: LD_VAR 0 2
76717: PPUSH
76718: LD_VAR 0 3
76722: PPUSH
76723: LD_VAR 0 4
76727: PPUSH
76728: CALL 75788 0 4
76732: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76733: LD_ADDR_VAR 0 11
76737: PUSH
76738: LD_VAR 0 1
76742: PPUSH
76743: LD_VAR 0 2
76747: PPUSH
76748: LD_VAR 0 12
76752: PUSH
76753: LD_INT 1
76755: ARRAY
76756: PPUSH
76757: LD_VAR 0 12
76761: PUSH
76762: LD_INT 2
76764: ARRAY
76765: PPUSH
76766: CALL_OW 298
76770: ST_TO_ADDR
// distance := 9999 ;
76771: LD_ADDR_VAR 0 10
76775: PUSH
76776: LD_INT 9999
76778: ST_TO_ADDR
// for i := 0 to 5 do
76779: LD_ADDR_VAR 0 6
76783: PUSH
76784: DOUBLE
76785: LD_INT 0
76787: DEC
76788: ST_TO_ADDR
76789: LD_INT 5
76791: PUSH
76792: FOR_TO
76793: IFFALSE 76936
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76795: LD_ADDR_VAR 0 7
76799: PUSH
76800: LD_VAR 0 1
76804: PPUSH
76805: LD_VAR 0 6
76809: PPUSH
76810: LD_VAR 0 11
76814: PPUSH
76815: CALL_OW 272
76819: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76820: LD_ADDR_VAR 0 8
76824: PUSH
76825: LD_VAR 0 2
76829: PPUSH
76830: LD_VAR 0 6
76834: PPUSH
76835: LD_VAR 0 11
76839: PPUSH
76840: CALL_OW 273
76844: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76845: LD_VAR 0 7
76849: PPUSH
76850: LD_VAR 0 8
76854: PPUSH
76855: CALL_OW 488
76859: NOT
76860: IFFALSE 76864
// continue ;
76862: GO 76792
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76864: LD_ADDR_VAR 0 9
76868: PUSH
76869: LD_VAR 0 12
76873: PUSH
76874: LD_INT 1
76876: ARRAY
76877: PPUSH
76878: LD_VAR 0 12
76882: PUSH
76883: LD_INT 2
76885: ARRAY
76886: PPUSH
76887: LD_VAR 0 7
76891: PPUSH
76892: LD_VAR 0 8
76896: PPUSH
76897: CALL_OW 298
76901: ST_TO_ADDR
// if tmp < distance then
76902: LD_VAR 0 9
76906: PUSH
76907: LD_VAR 0 10
76911: LESS
76912: IFFALSE 76934
// begin result := i ;
76914: LD_ADDR_VAR 0 5
76918: PUSH
76919: LD_VAR 0 6
76923: ST_TO_ADDR
// distance := tmp ;
76924: LD_ADDR_VAR 0 10
76928: PUSH
76929: LD_VAR 0 9
76933: ST_TO_ADDR
// end ; end ;
76934: GO 76792
76936: POP
76937: POP
// end ;
76938: LD_VAR 0 5
76942: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76943: LD_INT 0
76945: PPUSH
76946: PPUSH
// if not driver or not IsInUnit ( driver ) then
76947: LD_VAR 0 1
76951: NOT
76952: PUSH
76953: LD_VAR 0 1
76957: PPUSH
76958: CALL_OW 310
76962: NOT
76963: OR
76964: IFFALSE 76968
// exit ;
76966: GO 77058
// vehicle := IsInUnit ( driver ) ;
76968: LD_ADDR_VAR 0 3
76972: PUSH
76973: LD_VAR 0 1
76977: PPUSH
76978: CALL_OW 310
76982: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76983: LD_VAR 0 1
76987: PPUSH
76988: LD_STRING \
76990: PUSH
76991: LD_INT 0
76993: PUSH
76994: LD_INT 0
76996: PUSH
76997: LD_INT 0
76999: PUSH
77000: LD_INT 0
77002: PUSH
77003: LD_INT 0
77005: PUSH
77006: LD_INT 0
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: LIST
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: PUSH
77018: LD_STRING E
77020: PUSH
77021: LD_INT 0
77023: PUSH
77024: LD_INT 0
77026: PUSH
77027: LD_VAR 0 3
77031: PUSH
77032: LD_INT 0
77034: PUSH
77035: LD_INT 0
77037: PUSH
77038: LD_INT 0
77040: PUSH
77041: EMPTY
77042: LIST
77043: LIST
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: PPUSH
77054: CALL_OW 446
// end ;
77058: LD_VAR 0 2
77062: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77063: LD_INT 0
77065: PPUSH
77066: PPUSH
// if not driver or not IsInUnit ( driver ) then
77067: LD_VAR 0 1
77071: NOT
77072: PUSH
77073: LD_VAR 0 1
77077: PPUSH
77078: CALL_OW 310
77082: NOT
77083: OR
77084: IFFALSE 77088
// exit ;
77086: GO 77178
// vehicle := IsInUnit ( driver ) ;
77088: LD_ADDR_VAR 0 3
77092: PUSH
77093: LD_VAR 0 1
77097: PPUSH
77098: CALL_OW 310
77102: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77103: LD_VAR 0 1
77107: PPUSH
77108: LD_STRING \
77110: PUSH
77111: LD_INT 0
77113: PUSH
77114: LD_INT 0
77116: PUSH
77117: LD_INT 0
77119: PUSH
77120: LD_INT 0
77122: PUSH
77123: LD_INT 0
77125: PUSH
77126: LD_INT 0
77128: PUSH
77129: EMPTY
77130: LIST
77131: LIST
77132: LIST
77133: LIST
77134: LIST
77135: LIST
77136: LIST
77137: PUSH
77138: LD_STRING E
77140: PUSH
77141: LD_INT 0
77143: PUSH
77144: LD_INT 0
77146: PUSH
77147: LD_VAR 0 3
77151: PUSH
77152: LD_INT 0
77154: PUSH
77155: LD_INT 0
77157: PUSH
77158: LD_INT 0
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: LIST
77165: LIST
77166: LIST
77167: LIST
77168: LIST
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PPUSH
77174: CALL_OW 447
// end ;
77178: LD_VAR 0 2
77182: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77183: LD_INT 0
77185: PPUSH
77186: PPUSH
77187: PPUSH
// tmp := [ ] ;
77188: LD_ADDR_VAR 0 5
77192: PUSH
77193: EMPTY
77194: ST_TO_ADDR
// for i in units do
77195: LD_ADDR_VAR 0 4
77199: PUSH
77200: LD_VAR 0 1
77204: PUSH
77205: FOR_IN
77206: IFFALSE 77244
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77208: LD_ADDR_VAR 0 5
77212: PUSH
77213: LD_VAR 0 5
77217: PPUSH
77218: LD_VAR 0 5
77222: PUSH
77223: LD_INT 1
77225: PLUS
77226: PPUSH
77227: LD_VAR 0 4
77231: PPUSH
77232: CALL_OW 256
77236: PPUSH
77237: CALL_OW 2
77241: ST_TO_ADDR
77242: GO 77205
77244: POP
77245: POP
// if not tmp then
77246: LD_VAR 0 5
77250: NOT
77251: IFFALSE 77255
// exit ;
77253: GO 77303
// if asc then
77255: LD_VAR 0 2
77259: IFFALSE 77283
// result := SortListByListAsc ( units , tmp ) else
77261: LD_ADDR_VAR 0 3
77265: PUSH
77266: LD_VAR 0 1
77270: PPUSH
77271: LD_VAR 0 5
77275: PPUSH
77276: CALL_OW 76
77280: ST_TO_ADDR
77281: GO 77303
// result := SortListByListDesc ( units , tmp ) ;
77283: LD_ADDR_VAR 0 3
77287: PUSH
77288: LD_VAR 0 1
77292: PPUSH
77293: LD_VAR 0 5
77297: PPUSH
77298: CALL_OW 77
77302: ST_TO_ADDR
// end ;
77303: LD_VAR 0 3
77307: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77308: LD_INT 0
77310: PPUSH
77311: PPUSH
// task := GetTaskList ( mech ) ;
77312: LD_ADDR_VAR 0 4
77316: PUSH
77317: LD_VAR 0 1
77321: PPUSH
77322: CALL_OW 437
77326: ST_TO_ADDR
// if not task then
77327: LD_VAR 0 4
77331: NOT
77332: IFFALSE 77336
// exit ;
77334: GO 77378
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77336: LD_ADDR_VAR 0 3
77340: PUSH
77341: LD_VAR 0 4
77345: PUSH
77346: LD_INT 1
77348: ARRAY
77349: PUSH
77350: LD_INT 1
77352: ARRAY
77353: PUSH
77354: LD_STRING r
77356: EQUAL
77357: PUSH
77358: LD_VAR 0 4
77362: PUSH
77363: LD_INT 1
77365: ARRAY
77366: PUSH
77367: LD_INT 4
77369: ARRAY
77370: PUSH
77371: LD_VAR 0 2
77375: EQUAL
77376: AND
77377: ST_TO_ADDR
// end ;
77378: LD_VAR 0 3
77382: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77383: LD_INT 0
77385: PPUSH
// SetDir ( unit , d ) ;
77386: LD_VAR 0 1
77390: PPUSH
77391: LD_VAR 0 4
77395: PPUSH
77396: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77400: LD_VAR 0 1
77404: PPUSH
77405: LD_VAR 0 2
77409: PPUSH
77410: LD_VAR 0 3
77414: PPUSH
77415: LD_VAR 0 5
77419: PPUSH
77420: CALL_OW 48
// end ;
77424: LD_VAR 0 6
77428: RET
// export function ToNaturalNumber ( number ) ; begin
77429: LD_INT 0
77431: PPUSH
// result := number div 1 ;
77432: LD_ADDR_VAR 0 2
77436: PUSH
77437: LD_VAR 0 1
77441: PUSH
77442: LD_INT 1
77444: DIV
77445: ST_TO_ADDR
// if number < 0 then
77446: LD_VAR 0 1
77450: PUSH
77451: LD_INT 0
77453: LESS
77454: IFFALSE 77464
// result := 0 ;
77456: LD_ADDR_VAR 0 2
77460: PUSH
77461: LD_INT 0
77463: ST_TO_ADDR
// end ;
77464: LD_VAR 0 2
77468: RET
// export function SortByClass ( units , class ) ; var un ; begin
77469: LD_INT 0
77471: PPUSH
77472: PPUSH
// if not units or not class then
77473: LD_VAR 0 1
77477: NOT
77478: PUSH
77479: LD_VAR 0 2
77483: NOT
77484: OR
77485: IFFALSE 77489
// exit ;
77487: GO 77584
// result := [ ] ;
77489: LD_ADDR_VAR 0 3
77493: PUSH
77494: EMPTY
77495: ST_TO_ADDR
// for un in units do
77496: LD_ADDR_VAR 0 4
77500: PUSH
77501: LD_VAR 0 1
77505: PUSH
77506: FOR_IN
77507: IFFALSE 77582
// if GetClass ( un ) = class then
77509: LD_VAR 0 4
77513: PPUSH
77514: CALL_OW 257
77518: PUSH
77519: LD_VAR 0 2
77523: EQUAL
77524: IFFALSE 77551
// result := Insert ( result , 1 , un ) else
77526: LD_ADDR_VAR 0 3
77530: PUSH
77531: LD_VAR 0 3
77535: PPUSH
77536: LD_INT 1
77538: PPUSH
77539: LD_VAR 0 4
77543: PPUSH
77544: CALL_OW 2
77548: ST_TO_ADDR
77549: GO 77580
// result := Replace ( result , result + 1 , un ) ;
77551: LD_ADDR_VAR 0 3
77555: PUSH
77556: LD_VAR 0 3
77560: PPUSH
77561: LD_VAR 0 3
77565: PUSH
77566: LD_INT 1
77568: PLUS
77569: PPUSH
77570: LD_VAR 0 4
77574: PPUSH
77575: CALL_OW 1
77579: ST_TO_ADDR
77580: GO 77506
77582: POP
77583: POP
// end ;
77584: LD_VAR 0 3
77588: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77589: LD_INT 0
77591: PPUSH
77592: PPUSH
77593: PPUSH
77594: PPUSH
77595: PPUSH
77596: PPUSH
77597: PPUSH
// result := [ ] ;
77598: LD_ADDR_VAR 0 4
77602: PUSH
77603: EMPTY
77604: ST_TO_ADDR
// if x - r < 0 then
77605: LD_VAR 0 1
77609: PUSH
77610: LD_VAR 0 3
77614: MINUS
77615: PUSH
77616: LD_INT 0
77618: LESS
77619: IFFALSE 77631
// min_x := 0 else
77621: LD_ADDR_VAR 0 8
77625: PUSH
77626: LD_INT 0
77628: ST_TO_ADDR
77629: GO 77647
// min_x := x - r ;
77631: LD_ADDR_VAR 0 8
77635: PUSH
77636: LD_VAR 0 1
77640: PUSH
77641: LD_VAR 0 3
77645: MINUS
77646: ST_TO_ADDR
// if y - r < 0 then
77647: LD_VAR 0 2
77651: PUSH
77652: LD_VAR 0 3
77656: MINUS
77657: PUSH
77658: LD_INT 0
77660: LESS
77661: IFFALSE 77673
// min_y := 0 else
77663: LD_ADDR_VAR 0 7
77667: PUSH
77668: LD_INT 0
77670: ST_TO_ADDR
77671: GO 77689
// min_y := y - r ;
77673: LD_ADDR_VAR 0 7
77677: PUSH
77678: LD_VAR 0 2
77682: PUSH
77683: LD_VAR 0 3
77687: MINUS
77688: ST_TO_ADDR
// max_x := x + r ;
77689: LD_ADDR_VAR 0 9
77693: PUSH
77694: LD_VAR 0 1
77698: PUSH
77699: LD_VAR 0 3
77703: PLUS
77704: ST_TO_ADDR
// max_y := y + r ;
77705: LD_ADDR_VAR 0 10
77709: PUSH
77710: LD_VAR 0 2
77714: PUSH
77715: LD_VAR 0 3
77719: PLUS
77720: ST_TO_ADDR
// for _x = min_x to max_x do
77721: LD_ADDR_VAR 0 5
77725: PUSH
77726: DOUBLE
77727: LD_VAR 0 8
77731: DEC
77732: ST_TO_ADDR
77733: LD_VAR 0 9
77737: PUSH
77738: FOR_TO
77739: IFFALSE 77840
// for _y = min_y to max_y do
77741: LD_ADDR_VAR 0 6
77745: PUSH
77746: DOUBLE
77747: LD_VAR 0 7
77751: DEC
77752: ST_TO_ADDR
77753: LD_VAR 0 10
77757: PUSH
77758: FOR_TO
77759: IFFALSE 77836
// begin if not ValidHex ( _x , _y ) then
77761: LD_VAR 0 5
77765: PPUSH
77766: LD_VAR 0 6
77770: PPUSH
77771: CALL_OW 488
77775: NOT
77776: IFFALSE 77780
// continue ;
77778: GO 77758
// if GetResourceTypeXY ( _x , _y ) then
77780: LD_VAR 0 5
77784: PPUSH
77785: LD_VAR 0 6
77789: PPUSH
77790: CALL_OW 283
77794: IFFALSE 77834
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77796: LD_ADDR_VAR 0 4
77800: PUSH
77801: LD_VAR 0 4
77805: PPUSH
77806: LD_VAR 0 4
77810: PUSH
77811: LD_INT 1
77813: PLUS
77814: PPUSH
77815: LD_VAR 0 5
77819: PUSH
77820: LD_VAR 0 6
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: PPUSH
77829: CALL_OW 1
77833: ST_TO_ADDR
// end ;
77834: GO 77758
77836: POP
77837: POP
77838: GO 77738
77840: POP
77841: POP
// end ;
77842: LD_VAR 0 4
77846: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77847: LD_INT 0
77849: PPUSH
77850: PPUSH
77851: PPUSH
77852: PPUSH
77853: PPUSH
77854: PPUSH
77855: PPUSH
77856: PPUSH
// if not units then
77857: LD_VAR 0 1
77861: NOT
77862: IFFALSE 77866
// exit ;
77864: GO 78390
// result := UnitFilter ( units , [ f_ok ] ) ;
77866: LD_ADDR_VAR 0 3
77870: PUSH
77871: LD_VAR 0 1
77875: PPUSH
77876: LD_INT 50
77878: PUSH
77879: EMPTY
77880: LIST
77881: PPUSH
77882: CALL_OW 72
77886: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77887: LD_ADDR_VAR 0 8
77891: PUSH
77892: LD_VAR 0 1
77896: PUSH
77897: LD_INT 1
77899: ARRAY
77900: PPUSH
77901: CALL_OW 255
77905: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77906: LD_ADDR_VAR 0 10
77910: PUSH
77911: LD_INT 29
77913: PUSH
77914: LD_INT 91
77916: PUSH
77917: LD_INT 49
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: LIST
77924: ST_TO_ADDR
// if not result then
77925: LD_VAR 0 3
77929: NOT
77930: IFFALSE 77934
// exit ;
77932: GO 78390
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77934: LD_ADDR_VAR 0 5
77938: PUSH
77939: LD_INT 81
77941: PUSH
77942: LD_VAR 0 8
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: PPUSH
77951: CALL_OW 69
77955: ST_TO_ADDR
// for i in result do
77956: LD_ADDR_VAR 0 4
77960: PUSH
77961: LD_VAR 0 3
77965: PUSH
77966: FOR_IN
77967: IFFALSE 78388
// begin tag := GetTag ( i ) + 1 ;
77969: LD_ADDR_VAR 0 9
77973: PUSH
77974: LD_VAR 0 4
77978: PPUSH
77979: CALL_OW 110
77983: PUSH
77984: LD_INT 1
77986: PLUS
77987: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77988: LD_ADDR_VAR 0 7
77992: PUSH
77993: LD_VAR 0 4
77997: PPUSH
77998: CALL_OW 250
78002: PPUSH
78003: LD_VAR 0 4
78007: PPUSH
78008: CALL_OW 251
78012: PPUSH
78013: LD_INT 6
78015: PPUSH
78016: CALL 77589 0 3
78020: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78021: LD_VAR 0 4
78025: PPUSH
78026: CALL_OW 247
78030: PUSH
78031: LD_INT 2
78033: EQUAL
78034: PUSH
78035: LD_VAR 0 7
78039: AND
78040: PUSH
78041: LD_VAR 0 4
78045: PPUSH
78046: CALL_OW 264
78050: PUSH
78051: LD_VAR 0 10
78055: IN
78056: NOT
78057: AND
78058: IFFALSE 78097
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78060: LD_VAR 0 4
78064: PPUSH
78065: LD_VAR 0 7
78069: PUSH
78070: LD_INT 1
78072: ARRAY
78073: PUSH
78074: LD_INT 1
78076: ARRAY
78077: PPUSH
78078: LD_VAR 0 7
78082: PUSH
78083: LD_INT 1
78085: ARRAY
78086: PUSH
78087: LD_INT 2
78089: ARRAY
78090: PPUSH
78091: CALL_OW 116
78095: GO 78386
// if path > tag then
78097: LD_VAR 0 2
78101: PUSH
78102: LD_VAR 0 9
78106: GREATER
78107: IFFALSE 78315
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78109: LD_ADDR_VAR 0 6
78113: PUSH
78114: LD_VAR 0 5
78118: PPUSH
78119: LD_INT 91
78121: PUSH
78122: LD_VAR 0 4
78126: PUSH
78127: LD_INT 8
78129: PUSH
78130: EMPTY
78131: LIST
78132: LIST
78133: LIST
78134: PPUSH
78135: CALL_OW 72
78139: ST_TO_ADDR
// if nearEnemy then
78140: LD_VAR 0 6
78144: IFFALSE 78213
// begin if GetWeapon ( i ) = ru_time_lapser then
78146: LD_VAR 0 4
78150: PPUSH
78151: CALL_OW 264
78155: PUSH
78156: LD_INT 49
78158: EQUAL
78159: IFFALSE 78187
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78161: LD_VAR 0 4
78165: PPUSH
78166: LD_VAR 0 6
78170: PPUSH
78171: LD_VAR 0 4
78175: PPUSH
78176: CALL_OW 74
78180: PPUSH
78181: CALL_OW 112
78185: GO 78211
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78187: LD_VAR 0 4
78191: PPUSH
78192: LD_VAR 0 6
78196: PPUSH
78197: LD_VAR 0 4
78201: PPUSH
78202: CALL_OW 74
78206: PPUSH
78207: CALL 79315 0 2
// end else
78211: GO 78313
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78213: LD_VAR 0 4
78217: PPUSH
78218: LD_VAR 0 2
78222: PUSH
78223: LD_VAR 0 9
78227: ARRAY
78228: PUSH
78229: LD_INT 1
78231: ARRAY
78232: PPUSH
78233: LD_VAR 0 2
78237: PUSH
78238: LD_VAR 0 9
78242: ARRAY
78243: PUSH
78244: LD_INT 2
78246: ARRAY
78247: PPUSH
78248: CALL_OW 297
78252: PUSH
78253: LD_INT 6
78255: GREATER
78256: IFFALSE 78299
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78258: LD_VAR 0 4
78262: PPUSH
78263: LD_VAR 0 2
78267: PUSH
78268: LD_VAR 0 9
78272: ARRAY
78273: PUSH
78274: LD_INT 1
78276: ARRAY
78277: PPUSH
78278: LD_VAR 0 2
78282: PUSH
78283: LD_VAR 0 9
78287: ARRAY
78288: PUSH
78289: LD_INT 2
78291: ARRAY
78292: PPUSH
78293: CALL_OW 114
78297: GO 78313
// SetTag ( i , tag ) ;
78299: LD_VAR 0 4
78303: PPUSH
78304: LD_VAR 0 9
78308: PPUSH
78309: CALL_OW 109
// end else
78313: GO 78386
// if enemy then
78315: LD_VAR 0 5
78319: IFFALSE 78386
// begin if GetWeapon ( i ) = ru_time_lapser then
78321: LD_VAR 0 4
78325: PPUSH
78326: CALL_OW 264
78330: PUSH
78331: LD_INT 49
78333: EQUAL
78334: IFFALSE 78362
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78336: LD_VAR 0 4
78340: PPUSH
78341: LD_VAR 0 5
78345: PPUSH
78346: LD_VAR 0 4
78350: PPUSH
78351: CALL_OW 74
78355: PPUSH
78356: CALL_OW 112
78360: GO 78386
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78362: LD_VAR 0 4
78366: PPUSH
78367: LD_VAR 0 5
78371: PPUSH
78372: LD_VAR 0 4
78376: PPUSH
78377: CALL_OW 74
78381: PPUSH
78382: CALL 79315 0 2
// end ; end ;
78386: GO 77966
78388: POP
78389: POP
// end ;
78390: LD_VAR 0 3
78394: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78395: LD_INT 0
78397: PPUSH
78398: PPUSH
78399: PPUSH
// if not unit or IsInUnit ( unit ) then
78400: LD_VAR 0 1
78404: NOT
78405: PUSH
78406: LD_VAR 0 1
78410: PPUSH
78411: CALL_OW 310
78415: OR
78416: IFFALSE 78420
// exit ;
78418: GO 78511
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78420: LD_ADDR_VAR 0 4
78424: PUSH
78425: LD_VAR 0 1
78429: PPUSH
78430: CALL_OW 250
78434: PPUSH
78435: LD_VAR 0 2
78439: PPUSH
78440: LD_INT 1
78442: PPUSH
78443: CALL_OW 272
78447: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78448: LD_ADDR_VAR 0 5
78452: PUSH
78453: LD_VAR 0 1
78457: PPUSH
78458: CALL_OW 251
78462: PPUSH
78463: LD_VAR 0 2
78467: PPUSH
78468: LD_INT 1
78470: PPUSH
78471: CALL_OW 273
78475: ST_TO_ADDR
// if ValidHex ( x , y ) then
78476: LD_VAR 0 4
78480: PPUSH
78481: LD_VAR 0 5
78485: PPUSH
78486: CALL_OW 488
78490: IFFALSE 78511
// ComTurnXY ( unit , x , y ) ;
78492: LD_VAR 0 1
78496: PPUSH
78497: LD_VAR 0 4
78501: PPUSH
78502: LD_VAR 0 5
78506: PPUSH
78507: CALL_OW 118
// end ;
78511: LD_VAR 0 3
78515: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78516: LD_INT 0
78518: PPUSH
78519: PPUSH
// result := false ;
78520: LD_ADDR_VAR 0 3
78524: PUSH
78525: LD_INT 0
78527: ST_TO_ADDR
// if not units then
78528: LD_VAR 0 2
78532: NOT
78533: IFFALSE 78537
// exit ;
78535: GO 78582
// for i in units do
78537: LD_ADDR_VAR 0 4
78541: PUSH
78542: LD_VAR 0 2
78546: PUSH
78547: FOR_IN
78548: IFFALSE 78580
// if See ( side , i ) then
78550: LD_VAR 0 1
78554: PPUSH
78555: LD_VAR 0 4
78559: PPUSH
78560: CALL_OW 292
78564: IFFALSE 78578
// begin result := true ;
78566: LD_ADDR_VAR 0 3
78570: PUSH
78571: LD_INT 1
78573: ST_TO_ADDR
// exit ;
78574: POP
78575: POP
78576: GO 78582
// end ;
78578: GO 78547
78580: POP
78581: POP
// end ;
78582: LD_VAR 0 3
78586: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78587: LD_INT 0
78589: PPUSH
78590: PPUSH
78591: PPUSH
78592: PPUSH
// if not unit or not points then
78593: LD_VAR 0 1
78597: NOT
78598: PUSH
78599: LD_VAR 0 2
78603: NOT
78604: OR
78605: IFFALSE 78609
// exit ;
78607: GO 78699
// dist := 99999 ;
78609: LD_ADDR_VAR 0 5
78613: PUSH
78614: LD_INT 99999
78616: ST_TO_ADDR
// for i in points do
78617: LD_ADDR_VAR 0 4
78621: PUSH
78622: LD_VAR 0 2
78626: PUSH
78627: FOR_IN
78628: IFFALSE 78697
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78630: LD_ADDR_VAR 0 6
78634: PUSH
78635: LD_VAR 0 1
78639: PPUSH
78640: LD_VAR 0 4
78644: PUSH
78645: LD_INT 1
78647: ARRAY
78648: PPUSH
78649: LD_VAR 0 4
78653: PUSH
78654: LD_INT 2
78656: ARRAY
78657: PPUSH
78658: CALL_OW 297
78662: ST_TO_ADDR
// if tmpDist < dist then
78663: LD_VAR 0 6
78667: PUSH
78668: LD_VAR 0 5
78672: LESS
78673: IFFALSE 78695
// begin result := i ;
78675: LD_ADDR_VAR 0 3
78679: PUSH
78680: LD_VAR 0 4
78684: ST_TO_ADDR
// dist := tmpDist ;
78685: LD_ADDR_VAR 0 5
78689: PUSH
78690: LD_VAR 0 6
78694: ST_TO_ADDR
// end ; end ;
78695: GO 78627
78697: POP
78698: POP
// end ;
78699: LD_VAR 0 3
78703: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78704: LD_INT 0
78706: PPUSH
// uc_side := side ;
78707: LD_ADDR_OWVAR 20
78711: PUSH
78712: LD_VAR 0 1
78716: ST_TO_ADDR
// uc_nation := 3 ;
78717: LD_ADDR_OWVAR 21
78721: PUSH
78722: LD_INT 3
78724: ST_TO_ADDR
// vc_chassis := 25 ;
78725: LD_ADDR_OWVAR 37
78729: PUSH
78730: LD_INT 25
78732: ST_TO_ADDR
// vc_engine := engine_siberite ;
78733: LD_ADDR_OWVAR 39
78737: PUSH
78738: LD_INT 3
78740: ST_TO_ADDR
// vc_control := control_computer ;
78741: LD_ADDR_OWVAR 38
78745: PUSH
78746: LD_INT 3
78748: ST_TO_ADDR
// vc_weapon := 59 ;
78749: LD_ADDR_OWVAR 40
78753: PUSH
78754: LD_INT 59
78756: ST_TO_ADDR
// result := CreateVehicle ;
78757: LD_ADDR_VAR 0 5
78761: PUSH
78762: CALL_OW 45
78766: ST_TO_ADDR
// SetDir ( result , d ) ;
78767: LD_VAR 0 5
78771: PPUSH
78772: LD_VAR 0 4
78776: PPUSH
78777: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78781: LD_VAR 0 5
78785: PPUSH
78786: LD_VAR 0 2
78790: PPUSH
78791: LD_VAR 0 3
78795: PPUSH
78796: LD_INT 0
78798: PPUSH
78799: CALL_OW 48
// end ;
78803: LD_VAR 0 5
78807: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78808: LD_INT 0
78810: PPUSH
78811: PPUSH
78812: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78813: LD_ADDR_VAR 0 2
78817: PUSH
78818: LD_INT 0
78820: PUSH
78821: LD_INT 0
78823: PUSH
78824: LD_INT 0
78826: PUSH
78827: LD_INT 0
78829: PUSH
78830: EMPTY
78831: LIST
78832: LIST
78833: LIST
78834: LIST
78835: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78836: LD_VAR 0 1
78840: NOT
78841: PUSH
78842: LD_VAR 0 1
78846: PPUSH
78847: CALL_OW 264
78851: PUSH
78852: LD_INT 12
78854: PUSH
78855: LD_INT 51
78857: PUSH
78858: LD_INT 32
78860: PUSH
78861: LD_INT 89
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: LIST
78868: LIST
78869: IN
78870: NOT
78871: OR
78872: IFFALSE 78876
// exit ;
78874: GO 78974
// for i := 1 to 3 do
78876: LD_ADDR_VAR 0 3
78880: PUSH
78881: DOUBLE
78882: LD_INT 1
78884: DEC
78885: ST_TO_ADDR
78886: LD_INT 3
78888: PUSH
78889: FOR_TO
78890: IFFALSE 78972
// begin tmp := GetCargo ( cargo , i ) ;
78892: LD_ADDR_VAR 0 4
78896: PUSH
78897: LD_VAR 0 1
78901: PPUSH
78902: LD_VAR 0 3
78906: PPUSH
78907: CALL_OW 289
78911: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78912: LD_ADDR_VAR 0 2
78916: PUSH
78917: LD_VAR 0 2
78921: PPUSH
78922: LD_VAR 0 3
78926: PPUSH
78927: LD_VAR 0 4
78931: PPUSH
78932: CALL_OW 1
78936: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78937: LD_ADDR_VAR 0 2
78941: PUSH
78942: LD_VAR 0 2
78946: PPUSH
78947: LD_INT 4
78949: PPUSH
78950: LD_VAR 0 2
78954: PUSH
78955: LD_INT 4
78957: ARRAY
78958: PUSH
78959: LD_VAR 0 4
78963: PLUS
78964: PPUSH
78965: CALL_OW 1
78969: ST_TO_ADDR
// end ;
78970: GO 78889
78972: POP
78973: POP
// end ;
78974: LD_VAR 0 2
78978: RET
// export function Length ( array ) ; begin
78979: LD_INT 0
78981: PPUSH
// result := array + 0 ;
78982: LD_ADDR_VAR 0 2
78986: PUSH
78987: LD_VAR 0 1
78991: PUSH
78992: LD_INT 0
78994: PLUS
78995: ST_TO_ADDR
// end ;
78996: LD_VAR 0 2
79000: RET
// export function PrepareArray ( array ) ; begin
79001: LD_INT 0
79003: PPUSH
// result := array diff 0 ;
79004: LD_ADDR_VAR 0 2
79008: PUSH
79009: LD_VAR 0 1
79013: PUSH
79014: LD_INT 0
79016: DIFF
79017: ST_TO_ADDR
// if not result [ 1 ] then
79018: LD_VAR 0 2
79022: PUSH
79023: LD_INT 1
79025: ARRAY
79026: NOT
79027: IFFALSE 79047
// result := Delete ( result , 1 ) ;
79029: LD_ADDR_VAR 0 2
79033: PUSH
79034: LD_VAR 0 2
79038: PPUSH
79039: LD_INT 1
79041: PPUSH
79042: CALL_OW 3
79046: ST_TO_ADDR
// end ;
79047: LD_VAR 0 2
79051: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79052: LD_INT 0
79054: PPUSH
79055: PPUSH
79056: PPUSH
79057: PPUSH
// sibRocketRange := 25 ;
79058: LD_ADDR_VAR 0 6
79062: PUSH
79063: LD_INT 25
79065: ST_TO_ADDR
// result := false ;
79066: LD_ADDR_VAR 0 4
79070: PUSH
79071: LD_INT 0
79073: ST_TO_ADDR
// for i := 0 to 5 do
79074: LD_ADDR_VAR 0 5
79078: PUSH
79079: DOUBLE
79080: LD_INT 0
79082: DEC
79083: ST_TO_ADDR
79084: LD_INT 5
79086: PUSH
79087: FOR_TO
79088: IFFALSE 79155
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79090: LD_VAR 0 1
79094: PPUSH
79095: LD_VAR 0 5
79099: PPUSH
79100: LD_VAR 0 6
79104: PPUSH
79105: CALL_OW 272
79109: PPUSH
79110: LD_VAR 0 2
79114: PPUSH
79115: LD_VAR 0 5
79119: PPUSH
79120: LD_VAR 0 6
79124: PPUSH
79125: CALL_OW 273
79129: PPUSH
79130: LD_VAR 0 3
79134: PPUSH
79135: CALL_OW 309
79139: IFFALSE 79153
// begin result := true ;
79141: LD_ADDR_VAR 0 4
79145: PUSH
79146: LD_INT 1
79148: ST_TO_ADDR
// exit ;
79149: POP
79150: POP
79151: GO 79157
// end ;
79153: GO 79087
79155: POP
79156: POP
// end ;
79157: LD_VAR 0 4
79161: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79162: LD_INT 0
79164: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79165: LD_VAR 0 1
79169: PPUSH
79170: LD_VAR 0 2
79174: PPUSH
79175: LD_INT 0
79177: PPUSH
79178: LD_INT 0
79180: PPUSH
79181: LD_INT 1
79183: PPUSH
79184: LD_INT 0
79186: PPUSH
79187: CALL_OW 587
// end ;
79191: LD_VAR 0 3
79195: RET
// export function CenterOnNow ( unit ) ; begin
79196: LD_INT 0
79198: PPUSH
// result := IsInUnit ( unit ) ;
79199: LD_ADDR_VAR 0 2
79203: PUSH
79204: LD_VAR 0 1
79208: PPUSH
79209: CALL_OW 310
79213: ST_TO_ADDR
// if not result then
79214: LD_VAR 0 2
79218: NOT
79219: IFFALSE 79231
// result := unit ;
79221: LD_ADDR_VAR 0 2
79225: PUSH
79226: LD_VAR 0 1
79230: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
79231: LD_VAR 0 1
79235: PPUSH
79236: CALL_OW 87
// end ;
79240: LD_VAR 0 2
79244: RET
// export function ComMoveHex ( unit , hex ) ; begin
79245: LD_INT 0
79247: PPUSH
// if not hex then
79248: LD_VAR 0 2
79252: NOT
79253: IFFALSE 79257
// exit ;
79255: GO 79310
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
79257: LD_VAR 0 2
79261: PUSH
79262: LD_INT 1
79264: ARRAY
79265: PPUSH
79266: LD_VAR 0 2
79270: PUSH
79271: LD_INT 2
79273: ARRAY
79274: PPUSH
79275: CALL_OW 428
79279: IFFALSE 79283
// exit ;
79281: GO 79310
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
79283: LD_VAR 0 1
79287: PPUSH
79288: LD_VAR 0 2
79292: PUSH
79293: LD_INT 1
79295: ARRAY
79296: PPUSH
79297: LD_VAR 0 2
79301: PUSH
79302: LD_INT 2
79304: ARRAY
79305: PPUSH
79306: CALL_OW 111
// end ;
79310: LD_VAR 0 3
79314: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
79315: LD_INT 0
79317: PPUSH
79318: PPUSH
79319: PPUSH
// if not unit or not enemy then
79320: LD_VAR 0 1
79324: NOT
79325: PUSH
79326: LD_VAR 0 2
79330: NOT
79331: OR
79332: IFFALSE 79336
// exit ;
79334: GO 79460
// x := GetX ( enemy ) ;
79336: LD_ADDR_VAR 0 4
79340: PUSH
79341: LD_VAR 0 2
79345: PPUSH
79346: CALL_OW 250
79350: ST_TO_ADDR
// y := GetY ( enemy ) ;
79351: LD_ADDR_VAR 0 5
79355: PUSH
79356: LD_VAR 0 2
79360: PPUSH
79361: CALL_OW 251
79365: ST_TO_ADDR
// if ValidHex ( x , y ) then
79366: LD_VAR 0 4
79370: PPUSH
79371: LD_VAR 0 5
79375: PPUSH
79376: CALL_OW 488
79380: IFFALSE 79460
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
79382: LD_VAR 0 2
79386: PPUSH
79387: CALL_OW 247
79391: PUSH
79392: LD_INT 3
79394: PUSH
79395: LD_INT 2
79397: PUSH
79398: EMPTY
79399: LIST
79400: LIST
79401: IN
79402: PUSH
79403: LD_VAR 0 1
79407: PPUSH
79408: CALL_OW 255
79412: PPUSH
79413: LD_VAR 0 2
79417: PPUSH
79418: CALL_OW 292
79422: AND
79423: IFFALSE 79441
// ComAttackUnit ( unit , enemy ) else
79425: LD_VAR 0 1
79429: PPUSH
79430: LD_VAR 0 2
79434: PPUSH
79435: CALL_OW 115
79439: GO 79460
// ComAgressiveMove ( unit , x , y ) ;
79441: LD_VAR 0 1
79445: PPUSH
79446: LD_VAR 0 4
79450: PPUSH
79451: LD_VAR 0 5
79455: PPUSH
79456: CALL_OW 114
// end ; end_of_file
79460: LD_VAR 0 3
79464: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79465: LD_VAR 0 1
79469: PPUSH
79470: LD_VAR 0 2
79474: PPUSH
79475: LD_VAR 0 3
79479: PPUSH
79480: LD_VAR 0 4
79484: PPUSH
79485: LD_VAR 0 5
79489: PPUSH
79490: LD_VAR 0 6
79494: PPUSH
79495: CALL 17823 0 6
// end ;
79499: PPOPN 6
79501: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79502: LD_INT 0
79504: PPUSH
// begin if not units then
79505: LD_VAR 0 1
79509: NOT
79510: IFFALSE 79514
// exit ;
79512: GO 79514
// end ;
79514: PPOPN 7
79516: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79517: CALL 17727 0 0
// end ;
79521: PPOPN 1
79523: END
