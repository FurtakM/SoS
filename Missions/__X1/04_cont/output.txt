// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1776 0 0
// PrepareArabian ;
  12: CALL 2146 0 0
// PrepareAmerican ;
  16: CALL 6868 0 0
// PrepareRussian ;
  20: CALL 3102 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 8428 0 0
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 20
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 173: LD_ADDR_EXP 22
 177: PUSH
 178: LD_INT 52500
 180: PUSH
 181: LD_INT 50400
 183: PUSH
 184: LD_INT 48300
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_OWVAR 67
 196: ARRAY
 197: ST_TO_ADDR
// escapeCounter := 0 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// loseCounter := 0 ;
 206: LD_ADDR_EXP 14
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// labCaptured := false ;
 214: LD_ADDR_EXP 21
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// hillBase := false ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 230: LD_ADDR_EXP 8
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 4
 240: PUSH
 241: LD_INT 5
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: LD_INT 7
 249: PUSH
 250: LD_INT 8
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 261: LD_ADDR_EXP 23
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// kaganCaptured := false ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 282: LD_INT 0
 284: PPUSH
 285: PPUSH
// if exist_mode then
 286: LD_VAR 0 2
 290: IFFALSE 315
// unit := CreateCharacter ( prefix & ident ) else
 292: LD_ADDR_VAR 0 5
 296: PUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_VAR 0 1
 306: STR
 307: PPUSH
 308: CALL_OW 34
 312: ST_TO_ADDR
 313: GO 330
// unit := NewCharacter ( ident ) ;
 315: LD_ADDR_VAR 0 5
 319: PUSH
 320: LD_VAR 0 1
 324: PPUSH
 325: CALL_OW 25
 329: ST_TO_ADDR
// result := unit ;
 330: LD_ADDR_VAR 0 4
 334: PUSH
 335: LD_VAR 0 5
 339: ST_TO_ADDR
// end ;
 340: LD_VAR 0 4
 344: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 345: LD_INT 0
 347: PPUSH
// uc_side := side ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_VAR 0 1
 357: ST_TO_ADDR
// uc_nation := nation ;
 358: LD_ADDR_OWVAR 21
 362: PUSH
 363: LD_VAR 0 2
 367: ST_TO_ADDR
// vc_chassis := chassis ;
 368: LD_ADDR_OWVAR 37
 372: PUSH
 373: LD_VAR 0 3
 377: ST_TO_ADDR
// vc_engine := engine ;
 378: LD_ADDR_OWVAR 39
 382: PUSH
 383: LD_VAR 0 4
 387: ST_TO_ADDR
// vc_control := control ;
 388: LD_ADDR_OWVAR 38
 392: PUSH
 393: LD_VAR 0 5
 397: ST_TO_ADDR
// vc_weapon := weapon ;
 398: LD_ADDR_OWVAR 40
 402: PUSH
 403: LD_VAR 0 6
 407: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 408: LD_ADDR_OWVAR 41
 412: PUSH
 413: LD_VAR 0 7
 417: ST_TO_ADDR
// result := CreateVehicle ;
 418: LD_ADDR_VAR 0 8
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// end ;
 428: LD_VAR 0 8
 432: RET
// export function SayX ( units , ident ) ; var i ; begin
 433: LD_INT 0
 435: PPUSH
 436: PPUSH
// result := false ;
 437: LD_ADDR_VAR 0 3
 441: PUSH
 442: LD_INT 0
 444: ST_TO_ADDR
// if not units then
 445: LD_VAR 0 1
 449: NOT
 450: IFFALSE 454
// exit ;
 452: GO 508
// for i in units do
 454: LD_ADDR_VAR 0 4
 458: PUSH
 459: LD_VAR 0 1
 463: PUSH
 464: FOR_IN
 465: IFFALSE 506
// if IsOk ( i ) then
 467: LD_VAR 0 4
 471: PPUSH
 472: CALL_OW 302
 476: IFFALSE 504
// begin Say ( i , ident ) ;
 478: LD_VAR 0 4
 482: PPUSH
 483: LD_VAR 0 2
 487: PPUSH
 488: CALL_OW 88
// result := i ;
 492: LD_ADDR_VAR 0 3
 496: PUSH
 497: LD_VAR 0 4
 501: ST_TO_ADDR
// break ;
 502: GO 506
// end ;
 504: GO 464
 506: POP
 507: POP
// end ;
 508: LD_VAR 0 3
 512: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
 517: PPUSH
// if not observer or not unit then
 518: LD_VAR 0 1
 522: NOT
 523: PUSH
 524: LD_VAR 0 2
 528: NOT
 529: OR
 530: IFFALSE 534
// exit ;
 532: GO 582
// if not See ( GetSide ( observer ) , unit ) then
 534: LD_VAR 0 1
 538: PPUSH
 539: CALL_OW 255
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: CALL_OW 292
 553: NOT
 554: IFFALSE 558
// exit ;
 556: GO 582
// result := GetDistUnits ( observer , unit ) < 12 ;
 558: LD_ADDR_VAR 0 3
 562: PUSH
 563: LD_VAR 0 1
 567: PPUSH
 568: LD_VAR 0 2
 572: PPUSH
 573: CALL_OW 296
 577: PUSH
 578: LD_INT 12
 580: LESS
 581: ST_TO_ADDR
// end ;
 582: LD_VAR 0 3
 586: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 587: LD_INT 0
 589: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 590: LD_VAR 0 2
 594: PUSH
 595: LD_INT 1
 597: ARRAY
 598: PPUSH
 599: LD_VAR 0 2
 603: PUSH
 604: LD_INT 2
 606: ARRAY
 607: PPUSH
 608: CALL_OW 488
 612: PUSH
 613: LD_VAR 0 2
 617: PUSH
 618: LD_INT 1
 620: ARRAY
 621: PPUSH
 622: LD_VAR 0 2
 626: PUSH
 627: LD_INT 2
 629: ARRAY
 630: PPUSH
 631: CALL_OW 428
 635: PUSH
 636: LD_INT 0
 638: EQUAL
 639: AND
 640: IFFALSE 674
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 642: LD_VAR 0 1
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: PPUSH
 656: LD_VAR 0 2
 660: PUSH
 661: LD_INT 2
 663: ARRAY
 664: PPUSH
 665: LD_VAR 0 3
 669: PPUSH
 670: CALL_OW 48
// end ;
 674: LD_VAR 0 4
 678: RET
// export function Video ( mode ) ; begin
 679: LD_INT 0
 681: PPUSH
// ingame_video = mode ;
 682: LD_ADDR_OWVAR 52
 686: PUSH
 687: LD_VAR 0 1
 691: ST_TO_ADDR
// interface_hidden = mode ;
 692: LD_ADDR_OWVAR 54
 696: PUSH
 697: LD_VAR 0 1
 701: ST_TO_ADDR
// end ;
 702: LD_VAR 0 2
 706: RET
// export function ReverseArray ( array ) ; var i ; begin
 707: LD_INT 0
 709: PPUSH
 710: PPUSH
// if not array then
 711: LD_VAR 0 1
 715: NOT
 716: IFFALSE 720
// exit ;
 718: GO 778
// result := [ ] ;
 720: LD_ADDR_VAR 0 2
 724: PUSH
 725: EMPTY
 726: ST_TO_ADDR
// for i := 1 to array do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_VAR 0 1
 741: PUSH
 742: FOR_TO
 743: IFFALSE 776
// result := Insert ( result , 1 , array [ i ] ) ;
 745: LD_ADDR_VAR 0 2
 749: PUSH
 750: LD_VAR 0 2
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_VAR 0 1
 762: PUSH
 763: LD_VAR 0 3
 767: ARRAY
 768: PPUSH
 769: CALL_OW 2
 773: ST_TO_ADDR
 774: GO 742
 776: POP
 777: POP
// end ;
 778: LD_VAR 0 2
 782: RET
// export function ComExit ( unit ) ; begin
 783: LD_INT 0
 785: PPUSH
// result := IsInUnit ( unit ) ;
 786: LD_ADDR_VAR 0 2
 790: PUSH
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 310
 800: ST_TO_ADDR
// if not result then
 801: LD_VAR 0 2
 805: NOT
 806: IFFALSE 810
// exit ;
 808: GO 845
// if GetType ( result ) = unit_vehicle then
 810: LD_VAR 0 2
 814: PPUSH
 815: CALL_OW 247
 819: PUSH
 820: LD_INT 2
 822: EQUAL
 823: IFFALSE 836
// ComExitVehicle ( unit ) else
 825: LD_VAR 0 1
 829: PPUSH
 830: CALL_OW 121
 834: GO 845
// ComExitBuilding ( unit ) ;
 836: LD_VAR 0 1
 840: PPUSH
 841: CALL_OW 122
// end ;
 845: LD_VAR 0 2
 849: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
// if not side or not nation then
 854: LD_VAR 0 1
 858: NOT
 859: PUSH
 860: LD_VAR 0 2
 864: NOT
 865: OR
 866: IFFALSE 870
// exit ;
 868: GO 1634
// case nation of nation_american :
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: DOUBLE
 878: EQUAL
 879: IFTRUE 883
 881: GO 1097
 883: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: LD_INT 35
 891: PUSH
 892: LD_INT 45
 894: PUSH
 895: LD_INT 46
 897: PUSH
 898: LD_INT 47
 900: PUSH
 901: LD_INT 82
 903: PUSH
 904: LD_INT 83
 906: PUSH
 907: LD_INT 84
 909: PUSH
 910: LD_INT 85
 912: PUSH
 913: LD_INT 86
 915: PUSH
 916: LD_INT 1
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: LD_INT 15
 927: PUSH
 928: LD_INT 16
 930: PUSH
 931: LD_INT 7
 933: PUSH
 934: LD_INT 12
 936: PUSH
 937: LD_INT 13
 939: PUSH
 940: LD_INT 10
 942: PUSH
 943: LD_INT 14
 945: PUSH
 946: LD_INT 20
 948: PUSH
 949: LD_INT 21
 951: PUSH
 952: LD_INT 22
 954: PUSH
 955: LD_INT 25
 957: PUSH
 958: LD_INT 32
 960: PUSH
 961: LD_INT 27
 963: PUSH
 964: LD_INT 36
 966: PUSH
 967: LD_INT 69
 969: PUSH
 970: LD_INT 39
 972: PUSH
 973: LD_INT 34
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 48
 981: PUSH
 982: LD_INT 49
 984: PUSH
 985: LD_INT 50
 987: PUSH
 988: LD_INT 51
 990: PUSH
 991: LD_INT 52
 993: PUSH
 994: LD_INT 53
 996: PUSH
 997: LD_INT 54
 999: PUSH
1000: LD_INT 55
1002: PUSH
1003: LD_INT 56
1005: PUSH
1006: LD_INT 57
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: LD_INT 59
1014: PUSH
1015: LD_INT 60
1017: PUSH
1018: LD_INT 61
1020: PUSH
1021: LD_INT 62
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 82
1029: PUSH
1030: LD_INT 83
1032: PUSH
1033: LD_INT 84
1035: PUSH
1036: LD_INT 85
1038: PUSH
1039: LD_INT 86
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: ST_TO_ADDR
1095: GO 1558
1097: LD_INT 2
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1327
1105: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1106: LD_ADDR_VAR 0 4
1110: PUSH
1111: LD_INT 35
1113: PUSH
1114: LD_INT 45
1116: PUSH
1117: LD_INT 46
1119: PUSH
1120: LD_INT 47
1122: PUSH
1123: LD_INT 82
1125: PUSH
1126: LD_INT 83
1128: PUSH
1129: LD_INT 84
1131: PUSH
1132: LD_INT 85
1134: PUSH
1135: LD_INT 87
1137: PUSH
1138: LD_INT 70
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: LD_INT 11
1146: PUSH
1147: LD_INT 3
1149: PUSH
1150: LD_INT 4
1152: PUSH
1153: LD_INT 5
1155: PUSH
1156: LD_INT 6
1158: PUSH
1159: LD_INT 15
1161: PUSH
1162: LD_INT 18
1164: PUSH
1165: LD_INT 7
1167: PUSH
1168: LD_INT 17
1170: PUSH
1171: LD_INT 8
1173: PUSH
1174: LD_INT 20
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 22
1182: PUSH
1183: LD_INT 72
1185: PUSH
1186: LD_INT 26
1188: PUSH
1189: LD_INT 69
1191: PUSH
1192: LD_INT 39
1194: PUSH
1195: LD_INT 40
1197: PUSH
1198: LD_INT 41
1200: PUSH
1201: LD_INT 42
1203: PUSH
1204: LD_INT 43
1206: PUSH
1207: LD_INT 48
1209: PUSH
1210: LD_INT 49
1212: PUSH
1213: LD_INT 50
1215: PUSH
1216: LD_INT 51
1218: PUSH
1219: LD_INT 52
1221: PUSH
1222: LD_INT 53
1224: PUSH
1225: LD_INT 54
1227: PUSH
1228: LD_INT 55
1230: PUSH
1231: LD_INT 56
1233: PUSH
1234: LD_INT 60
1236: PUSH
1237: LD_INT 61
1239: PUSH
1240: LD_INT 62
1242: PUSH
1243: LD_INT 66
1245: PUSH
1246: LD_INT 67
1248: PUSH
1249: LD_INT 68
1251: PUSH
1252: LD_INT 81
1254: PUSH
1255: LD_INT 82
1257: PUSH
1258: LD_INT 83
1260: PUSH
1261: LD_INT 84
1263: PUSH
1264: LD_INT 85
1266: PUSH
1267: LD_INT 87
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
1325: GO 1558
1327: LD_INT 3
1329: DOUBLE
1330: EQUAL
1331: IFTRUE 1335
1333: GO 1557
1335: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1336: LD_ADDR_VAR 0 4
1340: PUSH
1341: LD_INT 46
1343: PUSH
1344: LD_INT 47
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: LD_INT 2
1352: PUSH
1353: LD_INT 82
1355: PUSH
1356: LD_INT 83
1358: PUSH
1359: LD_INT 84
1361: PUSH
1362: LD_INT 85
1364: PUSH
1365: LD_INT 86
1367: PUSH
1368: LD_INT 11
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 20
1376: PUSH
1377: LD_INT 19
1379: PUSH
1380: LD_INT 21
1382: PUSH
1383: LD_INT 24
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 25
1391: PUSH
1392: LD_INT 28
1394: PUSH
1395: LD_INT 29
1397: PUSH
1398: LD_INT 30
1400: PUSH
1401: LD_INT 31
1403: PUSH
1404: LD_INT 37
1406: PUSH
1407: LD_INT 38
1409: PUSH
1410: LD_INT 32
1412: PUSH
1413: LD_INT 27
1415: PUSH
1416: LD_INT 33
1418: PUSH
1419: LD_INT 69
1421: PUSH
1422: LD_INT 39
1424: PUSH
1425: LD_INT 34
1427: PUSH
1428: LD_INT 40
1430: PUSH
1431: LD_INT 71
1433: PUSH
1434: LD_INT 23
1436: PUSH
1437: LD_INT 44
1439: PUSH
1440: LD_INT 48
1442: PUSH
1443: LD_INT 49
1445: PUSH
1446: LD_INT 50
1448: PUSH
1449: LD_INT 51
1451: PUSH
1452: LD_INT 52
1454: PUSH
1455: LD_INT 53
1457: PUSH
1458: LD_INT 54
1460: PUSH
1461: LD_INT 55
1463: PUSH
1464: LD_INT 56
1466: PUSH
1467: LD_INT 57
1469: PUSH
1470: LD_INT 58
1472: PUSH
1473: LD_INT 59
1475: PUSH
1476: LD_INT 63
1478: PUSH
1479: LD_INT 64
1481: PUSH
1482: LD_INT 65
1484: PUSH
1485: LD_INT 82
1487: PUSH
1488: LD_INT 83
1490: PUSH
1491: LD_INT 84
1493: PUSH
1494: LD_INT 85
1496: PUSH
1497: LD_INT 86
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: ST_TO_ADDR
1555: GO 1558
1557: POP
// if state > - 1 and state < 3 then
1558: LD_VAR 0 3
1562: PUSH
1563: LD_INT 1
1565: NEG
1566: GREATER
1567: PUSH
1568: LD_VAR 0 3
1572: PUSH
1573: LD_INT 3
1575: LESS
1576: AND
1577: IFFALSE 1634
// for i in result do
1579: LD_ADDR_VAR 0 5
1583: PUSH
1584: LD_VAR 0 4
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1632
// if GetTech ( i , side ) <> state then
1592: LD_VAR 0 5
1596: PPUSH
1597: LD_VAR 0 1
1601: PPUSH
1602: CALL_OW 321
1606: PUSH
1607: LD_VAR 0 3
1611: NONEQUAL
1612: IFFALSE 1630
// result := result diff i ;
1614: LD_ADDR_VAR 0 4
1618: PUSH
1619: LD_VAR 0 4
1623: PUSH
1624: LD_VAR 0 5
1628: DIFF
1629: ST_TO_ADDR
1630: GO 1589
1632: POP
1633: POP
// end ;
1634: LD_VAR 0 4
1638: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1639: LD_INT 0
1641: PPUSH
1642: PPUSH
// InitUc ;
1643: CALL_OW 18
// InitHc ;
1647: CALL_OW 19
// uc_side := 0 ;
1651: LD_ADDR_OWVAR 20
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// uc_nation := 0 ;
1659: LD_ADDR_OWVAR 21
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// for i = 1 to amount do
1667: LD_ADDR_VAR 0 4
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_VAR 0 2
1681: PUSH
1682: FOR_TO
1683: IFFALSE 1765
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1685: LD_ADDR_OWVAR 29
1689: PUSH
1690: LD_INT 9
1692: PPUSH
1693: LD_INT 12
1695: PPUSH
1696: CALL_OW 12
1700: PUSH
1701: LD_INT 9
1703: PPUSH
1704: LD_INT 12
1706: PPUSH
1707: CALL_OW 12
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1716: LD_ADDR_OWVAR 35
1720: PUSH
1721: LD_INT 1
1723: NEG
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: CALL_OW 12
1732: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1733: LD_INT 0
1735: PPUSH
1736: LD_INT 12
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1746: CALL_OW 44
1750: PPUSH
1751: LD_VAR 0 1
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 49
// end ;
1763: GO 1682
1765: POP
1766: POP
// InitHc ;
1767: CALL_OW 19
// end ;
1771: LD_VAR 0 3
1775: RET
// export function PrepareNature ; var i ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1780: LD_INT 18
1782: PPUSH
1783: LD_INT 5
1785: PUSH
1786: LD_INT 4
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_OWVAR 67
1801: ARRAY
1802: PPUSH
1803: CALL 1639 0 2
// for i := 1 to 3 do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 3
1819: PUSH
1820: FOR_TO
1821: IFFALSE 1856
// begin hc_class := 21 ;
1823: LD_ADDR_OWVAR 28
1827: PUSH
1828: LD_INT 21
1830: ST_TO_ADDR
// hc_gallery :=  ;
1831: LD_ADDR_OWVAR 33
1835: PUSH
1836: LD_STRING 
1838: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1839: CALL_OW 44
1843: PPUSH
1844: LD_INT 18
1846: PPUSH
1847: LD_INT 0
1849: PPUSH
1850: CALL_OW 49
// end ;
1854: GO 1820
1856: POP
1857: POP
// for i := 1 to 2 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_INT 1
1866: DEC
1867: ST_TO_ADDR
1868: LD_INT 2
1870: PUSH
1871: FOR_TO
1872: IFFALSE 1907
// begin hc_class := 18 ;
1874: LD_ADDR_OWVAR 28
1878: PUSH
1879: LD_INT 18
1881: ST_TO_ADDR
// hc_gallery :=  ;
1882: LD_ADDR_OWVAR 33
1886: PUSH
1887: LD_STRING 
1889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1890: CALL_OW 44
1894: PPUSH
1895: LD_INT 18
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 49
// end ;
1905: GO 1871
1907: POP
1908: POP
// for i := 1 to 2 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 2
1921: PUSH
1922: FOR_TO
1923: IFFALSE 1958
// begin hc_class := 13 ;
1925: LD_ADDR_OWVAR 28
1929: PUSH
1930: LD_INT 13
1932: ST_TO_ADDR
// hc_gallery :=  ;
1933: LD_ADDR_OWVAR 33
1937: PUSH
1938: LD_STRING 
1940: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1941: CALL_OW 44
1945: PPUSH
1946: LD_INT 18
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 49
// end ;
1956: GO 1922
1958: POP
1959: POP
// end ;
1960: LD_VAR 0 1
1964: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1965: LD_INT 0
1967: PPUSH
1968: PPUSH
1969: PPUSH
1970: PPUSH
1971: PPUSH
// result := false ;
1972: LD_ADDR_VAR 0 4
1976: PUSH
1977: LD_INT 0
1979: ST_TO_ADDR
// if not sideList or not enemySide then
1980: LD_VAR 0 1
1984: NOT
1985: PUSH
1986: LD_VAR 0 2
1990: NOT
1991: OR
1992: IFFALSE 1996
// exit ;
1994: GO 2141
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1996: LD_ADDR_VAR 0 7
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_VAR 0 2
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PPUSH
2013: CALL_OW 69
2017: ST_TO_ADDR
// if not tmp then
2018: LD_VAR 0 7
2022: NOT
2023: IFFALSE 2027
// exit ;
2025: GO 2141
// for s in sideList do
2027: LD_ADDR_VAR 0 6
2031: PUSH
2032: LD_VAR 0 1
2036: PUSH
2037: FOR_IN
2038: IFFALSE 2139
// for i in tmp do
2040: LD_ADDR_VAR 0 5
2044: PUSH
2045: LD_VAR 0 7
2049: PUSH
2050: FOR_IN
2051: IFFALSE 2135
// if See ( s , i ) then
2053: LD_VAR 0 6
2057: PPUSH
2058: LD_VAR 0 5
2062: PPUSH
2063: CALL_OW 292
2067: IFFALSE 2133
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2069: LD_ADDR_VAR 0 8
2073: PUSH
2074: LD_INT 22
2076: PUSH
2077: LD_VAR 0 6
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: PPUSH
2091: LD_VAR 0 5
2095: PPUSH
2096: CALL_OW 74
2100: ST_TO_ADDR
// if tmp2 in exceptUnits then
2101: LD_VAR 0 8
2105: PUSH
2106: LD_VAR 0 3
2110: IN
2111: IFFALSE 2117
// continue else
2113: GO 2050
2115: GO 2133
// begin result := tmp2 ;
2117: LD_ADDR_VAR 0 4
2121: PUSH
2122: LD_VAR 0 8
2126: ST_TO_ADDR
// exit ;
2127: POP
2128: POP
2129: POP
2130: POP
2131: GO 2141
// end ; end ;
2133: GO 2050
2135: POP
2136: POP
2137: GO 2037
2139: POP
2140: POP
// end ; end_of_file
2141: LD_VAR 0 4
2145: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2146: LD_INT 0
2148: PPUSH
2149: PPUSH
// uc_side := 5 ;
2150: LD_ADDR_OWVAR 20
2154: PUSH
2155: LD_INT 5
2157: ST_TO_ADDR
// uc_nation := 2 ;
2158: LD_ADDR_OWVAR 21
2162: PUSH
2163: LD_INT 2
2165: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2166: LD_ADDR_EXP 36
2170: PUSH
2171: LD_STRING Abdul
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: LD_STRING 
2179: PPUSH
2180: CALL 282 0 3
2184: ST_TO_ADDR
// uc_side := 2 ;
2185: LD_ADDR_OWVAR 20
2189: PUSH
2190: LD_INT 2
2192: ST_TO_ADDR
// uc_nation := 2 ;
2193: LD_ADDR_OWVAR 21
2197: PUSH
2198: LD_INT 2
2200: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2201: LD_ADDR_EXP 25
2205: PUSH
2206: LD_STRING Heike
2208: PPUSH
2209: LD_EXP 1
2213: NOT
2214: PPUSH
2215: LD_EXP 2
2219: PPUSH
2220: CALL 282 0 3
2224: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2225: LD_ADDR_EXP 28
2229: PUSH
2230: LD_STRING Ibrahim
2232: PPUSH
2233: LD_EXP 1
2237: NOT
2238: PPUSH
2239: LD_EXP 2
2243: PPUSH
2244: CALL 282 0 3
2248: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2249: LD_ADDR_EXP 26
2253: PUSH
2254: LD_STRING Givi
2256: PPUSH
2257: LD_EXP 1
2261: NOT
2262: PPUSH
2263: LD_EXP 2
2267: PPUSH
2268: CALL 282 0 3
2272: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2273: LD_ADDR_EXP 29
2277: PUSH
2278: LD_STRING Kamil
2280: PPUSH
2281: LD_EXP 1
2285: NOT
2286: PPUSH
2287: LD_EXP 2
2291: PPUSH
2292: CALL 282 0 3
2296: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2297: LD_ADDR_EXP 30
2301: PUSH
2302: LD_STRING Kaia
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_EXP 2
2315: PPUSH
2316: CALL 282 0 3
2320: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2321: LD_ADDR_EXP 31
2325: PUSH
2326: LD_STRING Sophia
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_EXP 2
2339: PPUSH
2340: CALL 282 0 3
2344: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2345: LD_ADDR_EXP 32
2349: PUSH
2350: LD_STRING Markov
2352: PPUSH
2353: LD_EXP 1
2357: NOT
2358: PPUSH
2359: LD_EXP 2
2363: PPUSH
2364: CALL 282 0 3
2368: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2369: LD_ADDR_EXP 35
2373: PUSH
2374: LD_STRING Aviradze
2376: PPUSH
2377: LD_EXP 1
2381: NOT
2382: PPUSH
2383: LD_EXP 2
2387: PPUSH
2388: CALL 282 0 3
2392: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2393: LD_ADDR_EXP 39
2397: PUSH
2398: EMPTY
2399: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2400: LD_ADDR_EXP 37
2404: PUSH
2405: LD_STRING 03_others
2407: PPUSH
2408: CALL_OW 31
2412: ST_TO_ADDR
// uc_side := 5 ;
2413: LD_ADDR_OWVAR 20
2417: PUSH
2418: LD_INT 5
2420: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2421: LD_ADDR_EXP 34
2425: PUSH
2426: LD_STRING Kurt
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: LD_STRING 
2434: PPUSH
2435: CALL 282 0 3
2439: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2440: LD_ADDR_EXP 27
2444: PUSH
2445: LD_STRING Mike
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_EXP 2
2458: PPUSH
2459: CALL 282 0 3
2463: ST_TO_ADDR
// if Mike then
2464: LD_EXP 27
2468: IFFALSE 2491
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2470: LD_EXP 27
2474: PPUSH
2475: LD_INT 142
2477: PPUSH
2478: LD_INT 63
2480: PPUSH
2481: LD_INT 2
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2491: LD_EXP 34
2495: PPUSH
2496: LD_INT 142
2498: PPUSH
2499: LD_INT 63
2501: PPUSH
2502: LD_INT 3
2504: PPUSH
2505: LD_INT 0
2507: PPUSH
2508: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2512: LD_EXP 34
2516: PUSH
2517: LD_EXP 27
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PPUSH
2526: CALL_OW 140
// end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
// uc_side := 5 ;
2541: LD_ADDR_OWVAR 20
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// uc_nation := 2 ;
2549: LD_ADDR_OWVAR 21
2553: PUSH
2554: LD_INT 2
2556: ST_TO_ADDR
// InitHc ;
2557: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2561: LD_ADDR_EXP 33
2565: PUSH
2566: LD_STRING Omar
2568: PPUSH
2569: LD_INT 0
2571: PPUSH
2572: LD_STRING 
2574: PPUSH
2575: CALL 282 0 3
2579: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2580: LD_EXP 33
2584: PPUSH
2585: LD_INT 284
2587: PPUSH
2588: LD_INT 163
2590: PPUSH
2591: LD_INT 0
2593: PPUSH
2594: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2598: LD_EXP 33
2602: PPUSH
2603: LD_INT 256
2605: PPUSH
2606: LD_INT 129
2608: PPUSH
2609: CALL_OW 111
// wait ( 0 0$2 ) ;
2613: LD_INT 70
2615: PPUSH
2616: CALL_OW 67
// omarSquad := [ ] ;
2620: LD_ADDR_EXP 38
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// for i := 1 to 5 do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: DOUBLE
2633: LD_INT 1
2635: DEC
2636: ST_TO_ADDR
2637: LD_INT 5
2639: PUSH
2640: FOR_TO
2641: IFFALSE 2847
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2643: LD_INT 5
2645: PPUSH
2646: LD_INT 2
2648: PPUSH
2649: LD_INT 13
2651: PUSH
2652: LD_INT 14
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: MOD
2667: PUSH
2668: LD_INT 1
2670: PLUS
2671: ARRAY
2672: PPUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_INT 1
2678: PPUSH
2679: LD_INT 25
2681: PUSH
2682: LD_INT 27
2684: PUSH
2685: LD_INT 26
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: LIST
2692: PUSH
2693: LD_VAR 0 2
2697: PUSH
2698: LD_INT 3
2700: MOD
2701: PUSH
2702: LD_INT 1
2704: PLUS
2705: ARRAY
2706: PPUSH
2707: LD_INT 100
2709: PPUSH
2710: CALL 345 0 7
// veh := CreateVehicle ;
2714: LD_ADDR_VAR 0 4
2718: PUSH
2719: CALL_OW 45
2723: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2724: LD_VAR 0 4
2728: PPUSH
2729: LD_INT 5
2731: PPUSH
2732: CALL_OW 233
// omarSquad := omarSquad union veh ;
2736: LD_ADDR_EXP 38
2740: PUSH
2741: LD_EXP 38
2745: PUSH
2746: LD_VAR 0 4
2750: UNION
2751: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2752: LD_VAR 0 4
2756: PPUSH
2757: LD_INT 284
2759: PPUSH
2760: LD_INT 163
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2770: LD_INT 0
2772: PPUSH
2773: LD_INT 3
2775: PPUSH
2776: LD_INT 3
2778: PPUSH
2779: CALL_OW 380
// un := CreateHuman ;
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: CALL_OW 44
2792: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2793: LD_ADDR_EXP 38
2797: PUSH
2798: LD_EXP 38
2802: PUSH
2803: LD_VAR 0 3
2807: UNION
2808: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2809: LD_VAR 0 3
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2823: LD_VAR 0 3
2827: PPUSH
2828: LD_INT 271
2830: PPUSH
2831: LD_INT 144
2833: PPUSH
2834: CALL_OW 111
// wait ( 0 0$2 ) ;
2838: LD_INT 70
2840: PPUSH
2841: CALL_OW 67
// end ;
2845: GO 2640
2847: POP
2848: POP
// for i := 1 to 3 do
2849: LD_ADDR_VAR 0 2
2853: PUSH
2854: DOUBLE
2855: LD_INT 1
2857: DEC
2858: ST_TO_ADDR
2859: LD_INT 3
2861: PUSH
2862: FOR_TO
2863: IFFALSE 2946
// begin PrepareHuman ( false , 1 , 3 ) ;
2865: LD_INT 0
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 3
2873: PPUSH
2874: CALL_OW 380
// un := CreateHuman ;
2878: LD_ADDR_VAR 0 3
2882: PUSH
2883: CALL_OW 44
2887: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2888: LD_ADDR_EXP 38
2892: PUSH
2893: LD_EXP 38
2897: PUSH
2898: LD_VAR 0 3
2902: UNION
2903: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2904: LD_VAR 0 3
2908: PPUSH
2909: LD_INT 284
2911: PPUSH
2912: LD_INT 163
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_INT 257
2929: PPUSH
2930: LD_INT 138
2932: PPUSH
2933: CALL_OW 111
// wait ( 0 0$1 ) ;
2937: LD_INT 35
2939: PPUSH
2940: CALL_OW 67
// end ;
2944: GO 2862
2946: POP
2947: POP
// for i := 1 to 6 do
2948: LD_ADDR_VAR 0 2
2952: PUSH
2953: DOUBLE
2954: LD_INT 1
2956: DEC
2957: ST_TO_ADDR
2958: LD_INT 6
2960: PUSH
2961: FOR_TO
2962: IFFALSE 3095
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2964: LD_INT 0
2966: PPUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 4
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: PUSH
2981: LD_VAR 0 2
2985: PUSH
2986: LD_INT 3
2988: MOD
2989: PUSH
2990: LD_INT 1
2992: PLUS
2993: ARRAY
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: CALL_OW 380
// un := CreateHuman ;
3002: LD_ADDR_VAR 0 3
3006: PUSH
3007: CALL_OW 44
3011: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3012: LD_ADDR_EXP 38
3016: PUSH
3017: LD_EXP 38
3021: PUSH
3022: LD_VAR 0 3
3026: UNION
3027: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3028: LD_VAR 0 3
3032: PPUSH
3033: LD_INT 225
3035: PPUSH
3036: LD_INT 163
3038: PPUSH
3039: LD_INT 0
3041: PPUSH
3042: CALL_OW 48
// if i = 1 then
3046: LD_VAR 0 2
3050: PUSH
3051: LD_INT 1
3053: EQUAL
3054: IFFALSE 3071
// SetAttr ( un , attr_speed , 12 ) ;
3056: LD_VAR 0 3
3060: PPUSH
3061: LD_INT 2
3063: PPUSH
3064: LD_INT 12
3066: PPUSH
3067: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3071: LD_VAR 0 3
3075: PPUSH
3076: LD_INT 222
3078: PPUSH
3079: LD_INT 157
3081: PPUSH
3082: CALL_OW 111
// wait ( 0 0$1 ) ;
3086: LD_INT 35
3088: PPUSH
3089: CALL_OW 67
// end ;
3093: GO 2961
3095: POP
3096: POP
// end ; end_of_file
3097: LD_VAR 0 1
3101: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3102: LD_INT 0
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
3110: LD_INT 3
3112: PPUSH
3113: LD_INT 149
3115: PPUSH
3116: LD_INT 67
3118: PPUSH
3119: CALL_OW 428
3123: PPUSH
3124: CALL_OW 471
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
3128: LD_ADDR_EXP 50
3132: PUSH
3133: LD_INT 22
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 30
3145: PUSH
3146: LD_INT 7
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: PPUSH
3157: CALL_OW 69
3161: PUSH
3162: LD_INT 1
3164: ARRAY
3165: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3166: LD_ADDR_VAR 0 2
3170: PUSH
3171: LD_INT 21
3173: PUSH
3174: LD_INT 3
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PUSH
3181: LD_INT 23
3183: PUSH
3184: LD_INT 3
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PPUSH
3195: CALL_OW 69
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3217
// SetBLevel ( i , 5 ) ;
3203: LD_VAR 0 2
3207: PPUSH
3208: LD_INT 5
3210: PPUSH
3211: CALL_OW 241
3215: GO 3200
3217: POP
3218: POP
// SetBName ( kirov , kirov ) ;
3219: LD_INT 71
3221: PPUSH
3222: LD_STRING kirov
3224: PPUSH
3225: CALL_OW 500
// SetBName ( beria , beria ) ;
3229: LD_INT 106
3231: PPUSH
3232: LD_STRING beria
3234: PPUSH
3235: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3239: LD_INT 112
3241: PPUSH
3242: LD_STRING kagan
3244: PPUSH
3245: CALL_OW 500
// uc_side := 6 ;
3249: LD_ADDR_OWVAR 20
3253: PUSH
3254: LD_INT 6
3256: ST_TO_ADDR
// uc_nation := 3 ;
3257: LD_ADDR_OWVAR 21
3261: PUSH
3262: LD_INT 3
3264: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3265: LD_ADDR_VAR 0 5
3269: PUSH
3270: LD_INT 22
3272: PUSH
3273: LD_INT 6
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 30
3282: PUSH
3283: LD_INT 5
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PPUSH
3294: CALL_OW 69
3298: PUSH
3299: LD_INT 1
3301: ARRAY
3302: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3303: LD_ADDR_VAR 0 4
3307: PUSH
3308: LD_INT 22
3310: PUSH
3311: LD_INT 6
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: LD_INT 30
3320: PUSH
3321: LD_INT 4
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PPUSH
3332: CALL_OW 69
3336: PUSH
3337: LD_INT 1
3339: ARRAY
3340: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3341: LD_ADDR_EXP 44
3345: PUSH
3346: EMPTY
3347: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3348: LD_ADDR_EXP 45
3352: PUSH
3353: EMPTY
3354: ST_TO_ADDR
// russianPatrol := [ ] ;
3355: LD_ADDR_EXP 47
3359: PUSH
3360: EMPTY
3361: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3362: LD_ADDR_EXP 40
3366: PUSH
3367: LD_STRING Kurin
3369: PPUSH
3370: LD_INT 0
3372: PPUSH
3373: LD_STRING 
3375: PPUSH
3376: CALL 282 0 3
3380: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3381: LD_EXP 40
3385: PPUSH
3386: LD_INT 71
3388: PPUSH
3389: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3393: LD_ADDR_EXP 42
3397: PUSH
3398: LD_STRING Popov
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: LD_STRING 
3406: PPUSH
3407: CALL 282 0 3
3411: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3412: LD_EXP 42
3416: PPUSH
3417: LD_INT 71
3419: PPUSH
3420: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3424: LD_ADDR_EXP 41
3428: PUSH
3429: LD_STRING Grishko
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: LD_STRING 
3437: PPUSH
3438: CALL 282 0 3
3442: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3443: LD_EXP 41
3447: PPUSH
3448: LD_INT 207
3450: PPUSH
3451: LD_INT 106
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3461: LD_EXP 41
3465: PPUSH
3466: LD_INT 209
3468: PPUSH
3469: LD_INT 106
3471: PPUSH
3472: CALL_OW 118
// for i := 1 to 2 do
3476: LD_ADDR_VAR 0 2
3480: PUSH
3481: DOUBLE
3482: LD_INT 1
3484: DEC
3485: ST_TO_ADDR
3486: LD_INT 2
3488: PUSH
3489: FOR_TO
3490: IFFALSE 3545
// begin PrepareHuman ( false , 2 , 2 ) ;
3492: LD_INT 0
3494: PPUSH
3495: LD_INT 2
3497: PPUSH
3498: LD_INT 2
3500: PPUSH
3501: CALL_OW 380
// un := CreateHuman ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: CALL_OW 44
3514: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3515: LD_VAR 0 3
3519: PPUSH
3520: LD_INT 71
3522: PPUSH
3523: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3527: LD_ADDR_EXP 44
3531: PUSH
3532: LD_EXP 44
3536: PUSH
3537: LD_VAR 0 3
3541: UNION
3542: ST_TO_ADDR
// end ;
3543: GO 3489
3545: POP
3546: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3547: LD_ADDR_VAR 0 2
3551: PUSH
3552: DOUBLE
3553: LD_INT 1
3555: DEC
3556: ST_TO_ADDR
3557: LD_INT 5
3559: PUSH
3560: LD_INT 6
3562: PUSH
3563: LD_INT 6
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: PUSH
3571: LD_OWVAR 67
3575: ARRAY
3576: PUSH
3577: FOR_TO
3578: IFFALSE 3652
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3580: LD_INT 0
3582: PPUSH
3583: LD_INT 1
3585: PPUSH
3586: LD_INT 2
3588: PUSH
3589: LD_INT 3
3591: PUSH
3592: LD_INT 4
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: PUSH
3600: LD_OWVAR 67
3604: ARRAY
3605: PPUSH
3606: CALL_OW 380
// un := CreateHuman ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: CALL_OW 44
3619: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3620: LD_VAR 0 3
3624: PPUSH
3625: LD_VAR 0 5
3629: PPUSH
3630: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3634: LD_ADDR_EXP 44
3638: PUSH
3639: LD_EXP 44
3643: PUSH
3644: LD_VAR 0 3
3648: UNION
3649: ST_TO_ADDR
// end ;
3650: GO 3577
3652: POP
3653: POP
// for i := 1 to 3 do
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: DOUBLE
3660: LD_INT 1
3662: DEC
3663: ST_TO_ADDR
3664: LD_INT 3
3666: PUSH
3667: FOR_TO
3668: IFFALSE 3723
// begin PrepareHuman ( false , 3 , 3 ) ;
3670: LD_INT 0
3672: PPUSH
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL_OW 380
// un := CreateHuman ;
3683: LD_ADDR_VAR 0 3
3687: PUSH
3688: CALL_OW 44
3692: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3693: LD_VAR 0 3
3697: PPUSH
3698: LD_INT 92
3700: PPUSH
3701: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3705: LD_ADDR_EXP 44
3709: PUSH
3710: LD_EXP 44
3714: PUSH
3715: LD_VAR 0 3
3719: UNION
3720: ST_TO_ADDR
// end ;
3721: GO 3667
3723: POP
3724: POP
// for i := 1 to 2 do
3725: LD_ADDR_VAR 0 2
3729: PUSH
3730: DOUBLE
3731: LD_INT 1
3733: DEC
3734: ST_TO_ADDR
3735: LD_INT 2
3737: PUSH
3738: FOR_TO
3739: IFFALSE 3794
// begin PrepareHuman ( false , 4 , 3 ) ;
3741: LD_INT 0
3743: PPUSH
3744: LD_INT 4
3746: PPUSH
3747: LD_INT 3
3749: PPUSH
3750: CALL_OW 380
// un := CreateHuman ;
3754: LD_ADDR_VAR 0 3
3758: PUSH
3759: CALL_OW 44
3763: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3764: LD_VAR 0 3
3768: PPUSH
3769: LD_INT 83
3771: PPUSH
3772: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3776: LD_ADDR_EXP 44
3780: PUSH
3781: LD_EXP 44
3785: PUSH
3786: LD_VAR 0 3
3790: UNION
3791: ST_TO_ADDR
// end ;
3792: GO 3738
3794: POP
3795: POP
// for i := 1 to 5 do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_INT 5
3808: PUSH
3809: FOR_TO
3810: IFFALSE 3867
// begin PrepareHuman ( false , 1 , 3 ) ;
3812: LD_INT 0
3814: PPUSH
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 3
3820: PPUSH
3821: CALL_OW 380
// un := CreateHuman ;
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: CALL_OW 44
3834: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3835: LD_VAR 0 3
3839: PPUSH
3840: LD_VAR 0 4
3844: PPUSH
3845: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3849: LD_ADDR_EXP 46
3853: PUSH
3854: LD_EXP 46
3858: PUSH
3859: LD_VAR 0 3
3863: UNION
3864: ST_TO_ADDR
// end ;
3865: GO 3809
3867: POP
3868: POP
// russianCargo := [ ] ;
3869: LD_ADDR_EXP 49
3873: PUSH
3874: EMPTY
3875: ST_TO_ADDR
// for i := 1 to 2 do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_INT 2
3888: PUSH
3889: FOR_TO
3890: IFFALSE 4022
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3892: LD_INT 6
3894: PPUSH
3895: LD_INT 3
3897: PPUSH
3898: LD_INT 21
3900: PPUSH
3901: LD_INT 1
3903: PPUSH
3904: LD_INT 1
3906: PPUSH
3907: LD_INT 51
3909: PPUSH
3910: LD_INT 100
3912: PPUSH
3913: CALL 345 0 7
// un := CreateVehicle ;
3917: LD_ADDR_VAR 0 3
3921: PUSH
3922: CALL_OW 45
3926: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3927: LD_ADDR_EXP 49
3931: PUSH
3932: LD_EXP 49
3936: PUSH
3937: LD_VAR 0 3
3941: UNION
3942: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3943: LD_VAR 0 3
3947: PPUSH
3948: LD_INT 2
3950: PPUSH
3951: LD_INT 100
3953: PPUSH
3954: CALL_OW 290
// SetDir ( un , 4 ) ;
3958: LD_VAR 0 3
3962: PPUSH
3963: LD_INT 4
3965: PPUSH
3966: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3970: LD_VAR 0 3
3974: PPUSH
3975: LD_INT 147
3977: PPUSH
3978: LD_INT 103
3980: PPUSH
3981: LD_INT 4
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3991: LD_INT 0
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: LD_OWVAR 67
4001: PPUSH
4002: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
4006: CALL_OW 44
4010: PPUSH
4011: LD_VAR 0 3
4015: PPUSH
4016: CALL_OW 52
// end ;
4020: GO 3889
4022: POP
4023: POP
// uc_side := 3 ;
4024: LD_ADDR_OWVAR 20
4028: PUSH
4029: LD_INT 3
4031: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4032: LD_ADDR_EXP 43
4036: PUSH
4037: LD_STRING Burlak
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: LD_STRING 
4045: PPUSH
4046: CALL 282 0 3
4050: ST_TO_ADDR
// for i := 1 to 2 do
4051: LD_ADDR_VAR 0 2
4055: PUSH
4056: DOUBLE
4057: LD_INT 1
4059: DEC
4060: ST_TO_ADDR
4061: LD_INT 2
4063: PUSH
4064: FOR_TO
4065: IFFALSE 4158
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4067: LD_INT 0
4069: PPUSH
4070: LD_INT 1
4072: PPUSH
4073: LD_OWVAR 67
4077: PUSH
4078: LD_INT 1
4080: PLUS
4081: PPUSH
4082: CALL_OW 380
// un := CreateHuman ;
4086: LD_ADDR_VAR 0 3
4090: PUSH
4091: CALL_OW 44
4095: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4096: LD_VAR 0 3
4100: PPUSH
4101: LD_INT 22
4103: PUSH
4104: LD_INT 3
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PUSH
4111: LD_INT 30
4113: PUSH
4114: LD_INT 32
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: PUSH
4130: LD_VAR 0 2
4134: ARRAY
4135: PPUSH
4136: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4140: LD_ADDR_EXP 45
4144: PUSH
4145: LD_EXP 45
4149: PUSH
4150: LD_VAR 0 3
4154: UNION
4155: ST_TO_ADDR
// end ;
4156: GO 4064
4158: POP
4159: POP
// for i := 1 to 2 do
4160: LD_ADDR_VAR 0 2
4164: PUSH
4165: DOUBLE
4166: LD_INT 1
4168: DEC
4169: ST_TO_ADDR
4170: LD_INT 2
4172: PUSH
4173: FOR_TO
4174: IFFALSE 4265
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4176: LD_INT 0
4178: PPUSH
4179: LD_INT 1
4181: PPUSH
4182: LD_OWVAR 67
4186: PUSH
4187: LD_INT 1
4189: PLUS
4190: PPUSH
4191: CALL_OW 380
// un := CreateHuman ;
4195: LD_ADDR_VAR 0 3
4199: PUSH
4200: CALL_OW 44
4204: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4205: LD_VAR 0 3
4209: PPUSH
4210: LD_INT 22
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 30
4222: PUSH
4223: LD_INT 5
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PPUSH
4234: CALL_OW 69
4238: PUSH
4239: LD_INT 1
4241: ARRAY
4242: PPUSH
4243: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4247: LD_ADDR_EXP 45
4251: PUSH
4252: LD_EXP 45
4256: PUSH
4257: LD_VAR 0 3
4261: UNION
4262: ST_TO_ADDR
// end ;
4263: GO 4173
4265: POP
4266: POP
// for i := 1 to 2 do
4267: LD_ADDR_VAR 0 2
4271: PUSH
4272: DOUBLE
4273: LD_INT 1
4275: DEC
4276: ST_TO_ADDR
4277: LD_INT 2
4279: PUSH
4280: FOR_TO
4281: IFFALSE 4368
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 4
4288: PPUSH
4289: LD_OWVAR 67
4293: PPUSH
4294: CALL_OW 380
// un := CreateHuman ;
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: CALL_OW 44
4307: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: LD_INT 22
4315: PUSH
4316: LD_INT 3
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: PUSH
4323: LD_INT 30
4325: PUSH
4326: LD_INT 7
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PPUSH
4337: CALL_OW 69
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: PPUSH
4346: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4350: LD_ADDR_EXP 45
4354: PUSH
4355: LD_EXP 45
4359: PUSH
4360: LD_VAR 0 3
4364: UNION
4365: ST_TO_ADDR
// end ;
4366: GO 4280
4368: POP
4369: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4370: LD_INT 0
4372: PPUSH
4373: LD_INT 2
4375: PPUSH
4376: LD_OWVAR 67
4380: PPUSH
4381: CALL_OW 380
// un := CreateHuman ;
4385: LD_ADDR_VAR 0 3
4389: PUSH
4390: CALL_OW 44
4394: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4395: LD_VAR 0 3
4399: PPUSH
4400: LD_INT 106
4402: PPUSH
4403: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4407: LD_ADDR_EXP 45
4411: PUSH
4412: LD_EXP 45
4416: PUSH
4417: LD_VAR 0 3
4421: UNION
4422: ST_TO_ADDR
// for i := 1 to 3 do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_INT 3
4435: PUSH
4436: FOR_TO
4437: IFFALSE 4559
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4439: LD_ADDR_VAR 0 6
4443: PUSH
4444: LD_INT 22
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: LD_INT 30
4456: PUSH
4457: LD_INT 31
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 69
4472: PUSH
4473: LD_VAR 0 2
4477: ARRAY
4478: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4479: LD_INT 0
4481: PPUSH
4482: LD_INT 1
4484: PPUSH
4485: LD_OWVAR 67
4489: PPUSH
4490: CALL_OW 380
// un := CreateHuman ;
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: CALL_OW 44
4503: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4504: LD_VAR 0 3
4508: PPUSH
4509: LD_VAR 0 6
4513: PPUSH
4514: CALL_OW 254
4518: PUSH
4519: LD_INT 3
4521: PLUS
4522: PPUSH
4523: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4527: LD_VAR 0 3
4531: PPUSH
4532: LD_VAR 0 6
4536: PPUSH
4537: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4541: LD_ADDR_EXP 45
4545: PUSH
4546: LD_EXP 45
4550: PUSH
4551: LD_VAR 0 3
4555: UNION
4556: ST_TO_ADDR
// end ;
4557: GO 4436
4559: POP
4560: POP
// russianOmicronAttackers := [ ] ;
4561: LD_ADDR_EXP 48
4565: PUSH
4566: EMPTY
4567: ST_TO_ADDR
// for i := 1 to 6 do
4568: LD_ADDR_VAR 0 2
4572: PUSH
4573: DOUBLE
4574: LD_INT 1
4576: DEC
4577: ST_TO_ADDR
4578: LD_INT 6
4580: PUSH
4581: FOR_TO
4582: IFFALSE 4806
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4584: LD_INT 3
4586: PPUSH
4587: LD_INT 3
4589: PPUSH
4590: LD_INT 21
4592: PUSH
4593: LD_INT 23
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: LD_VAR 0 2
4604: PUSH
4605: LD_INT 2
4607: MOD
4608: PUSH
4609: LD_INT 1
4611: PLUS
4612: ARRAY
4613: PPUSH
4614: LD_INT 1
4616: PPUSH
4617: LD_INT 1
4619: PPUSH
4620: LD_INT 43
4622: PUSH
4623: LD_INT 44
4625: PUSH
4626: LD_INT 42
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: LD_VAR 0 2
4638: PUSH
4639: LD_INT 3
4641: MOD
4642: PUSH
4643: LD_INT 1
4645: PLUS
4646: ARRAY
4647: PPUSH
4648: LD_INT 100
4650: PPUSH
4651: CALL 345 0 7
// un := CreateVehicle ;
4655: LD_ADDR_VAR 0 3
4659: PUSH
4660: CALL_OW 45
4664: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4665: LD_VAR 0 3
4669: PPUSH
4670: LD_INT 0
4672: PUSH
4673: LD_INT 5
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 1
4682: PPUSH
4683: LD_INT 2
4685: PPUSH
4686: CALL_OW 12
4690: ARRAY
4691: PPUSH
4692: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4696: LD_ADDR_EXP 48
4700: PUSH
4701: LD_EXP 48
4705: PUSH
4706: LD_VAR 0 3
4710: UNION
4711: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4712: LD_VAR 0 3
4716: PPUSH
4717: LD_INT 127
4719: PPUSH
4720: LD_INT 89
4722: PPUSH
4723: LD_INT 7
4725: PPUSH
4726: LD_INT 0
4728: PPUSH
4729: CALL_OW 50
// uc_side := 3 ;
4733: LD_ADDR_OWVAR 20
4737: PUSH
4738: LD_INT 3
4740: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4741: LD_INT 0
4743: PPUSH
4744: LD_INT 3
4746: PPUSH
4747: LD_INT 3
4749: PPUSH
4750: CALL_OW 380
// un := CreateHuman ;
4754: LD_ADDR_VAR 0 3
4758: PUSH
4759: CALL_OW 44
4763: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4764: LD_ADDR_EXP 48
4768: PUSH
4769: LD_EXP 48
4773: PUSH
4774: LD_VAR 0 3
4778: UNION
4779: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4780: LD_VAR 0 3
4784: PPUSH
4785: LD_EXP 48
4789: PUSH
4790: LD_EXP 48
4794: PUSH
4795: LD_INT 1
4797: MINUS
4798: ARRAY
4799: PPUSH
4800: CALL_OW 52
// end ;
4804: GO 4581
4806: POP
4807: POP
// for i := 1 to 3 do
4808: LD_ADDR_VAR 0 2
4812: PUSH
4813: DOUBLE
4814: LD_INT 1
4816: DEC
4817: ST_TO_ADDR
4818: LD_INT 3
4820: PUSH
4821: FOR_TO
4822: IFFALSE 4888
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4824: LD_INT 0
4826: PPUSH
4827: LD_INT 1
4829: PPUSH
4830: LD_OWVAR 67
4834: PPUSH
4835: CALL_OW 380
// un := CreateHuman ;
4839: LD_ADDR_VAR 0 3
4843: PUSH
4844: CALL_OW 44
4848: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4849: LD_ADDR_EXP 48
4853: PUSH
4854: LD_EXP 48
4858: PUSH
4859: LD_VAR 0 3
4863: UNION
4864: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: LD_INT 91
4872: PPUSH
4873: LD_INT 60
4875: PPUSH
4876: LD_INT 3
4878: PPUSH
4879: LD_INT 0
4881: PPUSH
4882: CALL_OW 50
// end ;
4886: GO 4821
4888: POP
4889: POP
// end ;
4890: LD_VAR 0 1
4894: RET
// every 0 0$3 do var i ;
4895: GO 4897
4897: DISABLE
4898: LD_INT 0
4900: PPUSH
// begin for i := 1 to 4 do
4901: LD_ADDR_VAR 0 1
4905: PUSH
4906: DOUBLE
4907: LD_INT 1
4909: DEC
4910: ST_TO_ADDR
4911: LD_INT 4
4913: PUSH
4914: FOR_TO
4915: IFFALSE 4934
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4917: LD_EXP 46
4921: PUSH
4922: LD_VAR 0 1
4926: ARRAY
4927: PPUSH
4928: CALL_OW 122
4932: GO 4914
4934: POP
4935: POP
// wait ( 3 ) ;
4936: LD_INT 3
4938: PPUSH
4939: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4943: LD_EXP 46
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: LD_INT 22
4954: PUSH
4955: LD_INT 6
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 30
4964: PUSH
4965: LD_INT 31
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PPUSH
4976: CALL_OW 69
4980: PPUSH
4981: LD_EXP 46
4985: PUSH
4986: LD_INT 1
4988: ARRAY
4989: PPUSH
4990: CALL_OW 74
4994: PPUSH
4995: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4999: LD_EXP 46
5003: PUSH
5004: LD_INT 2
5006: ARRAY
5007: PPUSH
5008: LD_INT 211
5010: PPUSH
5011: LD_INT 107
5013: PPUSH
5014: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
5018: LD_EXP 46
5022: PUSH
5023: LD_INT 2
5025: ARRAY
5026: PPUSH
5027: LD_INT 209
5029: PPUSH
5030: LD_INT 106
5032: PPUSH
5033: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5037: LD_EXP 46
5041: PUSH
5042: LD_INT 3
5044: ARRAY
5045: PPUSH
5046: LD_INT 209
5048: PPUSH
5049: LD_INT 103
5051: PPUSH
5052: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5056: LD_EXP 46
5060: PUSH
5061: LD_INT 3
5063: ARRAY
5064: PPUSH
5065: LD_INT 209
5067: PPUSH
5068: LD_INT 106
5070: PPUSH
5071: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5075: LD_EXP 46
5079: PUSH
5080: LD_INT 4
5082: ARRAY
5083: PPUSH
5084: LD_INT 227
5086: PPUSH
5087: LD_INT 117
5089: PPUSH
5090: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5094: LD_EXP 46
5098: PUSH
5099: LD_INT 4
5101: ARRAY
5102: PPUSH
5103: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5107: LD_INT 700
5109: PPUSH
5110: CALL_OW 67
// for i := 3 downto 2 do
5114: LD_ADDR_VAR 0 1
5118: PUSH
5119: DOUBLE
5120: LD_INT 3
5122: INC
5123: ST_TO_ADDR
5124: LD_INT 2
5126: PUSH
5127: FOR_DOWNTO
5128: IFFALSE 5295
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5130: LD_EXP 46
5134: PUSH
5135: LD_VAR 0 1
5139: ARRAY
5140: PPUSH
5141: LD_INT 200
5143: PPUSH
5144: LD_INT 91
5146: PPUSH
5147: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5151: LD_EXP 46
5155: PUSH
5156: LD_VAR 0 1
5160: ARRAY
5161: PPUSH
5162: LD_INT 210
5164: PPUSH
5165: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5169: LD_EXP 46
5173: PUSH
5174: LD_VAR 0 1
5178: ARRAY
5179: PPUSH
5180: LD_INT 224
5182: PPUSH
5183: LD_INT 93
5185: PPUSH
5186: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5190: LD_EXP 46
5194: PUSH
5195: LD_VAR 0 1
5199: ARRAY
5200: PPUSH
5201: LD_INT 210
5203: PPUSH
5204: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5208: LD_EXP 46
5212: PUSH
5213: LD_VAR 0 1
5217: ARRAY
5218: PPUSH
5219: LD_INT 239
5221: PPUSH
5222: LD_INT 123
5224: PPUSH
5225: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5229: LD_EXP 46
5233: PUSH
5234: LD_VAR 0 1
5238: ARRAY
5239: PPUSH
5240: LD_INT 210
5242: PPUSH
5243: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5247: LD_EXP 46
5251: PUSH
5252: LD_VAR 0 1
5256: ARRAY
5257: PPUSH
5258: LD_INT 212
5260: PPUSH
5261: LD_INT 105
5263: PPUSH
5264: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5268: LD_EXP 46
5272: PUSH
5273: LD_VAR 0 1
5277: ARRAY
5278: PPUSH
5279: LD_INT 700
5281: PPUSH
5282: CALL_OW 202
// wait ( 0 0$30 ) ;
5286: LD_INT 1050
5288: PPUSH
5289: CALL_OW 67
// end ;
5293: GO 5127
5295: POP
5296: POP
// until not activeGrishkoAI ;
5297: LD_EXP 10
5301: NOT
5302: IFFALSE 5107
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5304: LD_EXP 46
5308: PPUSH
5309: LD_INT 221
5311: PPUSH
5312: LD_INT 110
5314: PPUSH
5315: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5319: LD_EXP 46
5323: PPUSH
5324: LD_INT 228
5326: PPUSH
5327: LD_INT 115
5329: PPUSH
5330: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5334: LD_EXP 46
5338: PPUSH
5339: CALL_OW 200
// end ;
5343: PPOPN 1
5345: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5346: LD_EXP 12
5350: IFFALSE 6046
5352: GO 5354
5354: DISABLE
5355: LD_INT 0
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
// begin uc_side := 6 ;
5361: LD_ADDR_OWVAR 20
5365: PUSH
5366: LD_INT 6
5368: ST_TO_ADDR
// uc_nation := 3 ;
5369: LD_ADDR_OWVAR 21
5373: PUSH
5374: LD_INT 3
5376: ST_TO_ADDR
// for i := 1 to 3 do
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: DOUBLE
5383: LD_INT 1
5385: DEC
5386: ST_TO_ADDR
5387: LD_INT 3
5389: PUSH
5390: FOR_TO
5391: IFFALSE 5500
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5393: LD_INT 0
5395: PPUSH
5396: LD_INT 1
5398: PPUSH
5399: LD_INT 2
5401: PUSH
5402: LD_INT 3
5404: PUSH
5405: LD_INT 4
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: LIST
5412: PUSH
5413: LD_OWVAR 67
5417: ARRAY
5418: PPUSH
5419: CALL_OW 380
// un := CreateHuman ;
5423: LD_ADDR_VAR 0 1
5427: PUSH
5428: CALL_OW 44
5432: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5433: LD_ADDR_EXP 47
5437: PUSH
5438: LD_EXP 47
5442: PUSH
5443: LD_VAR 0 1
5447: UNION
5448: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5449: LD_VAR 0 1
5453: PPUSH
5454: LD_INT 1
5456: PPUSH
5457: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5461: LD_VAR 0 1
5465: PPUSH
5466: LD_INT 11
5468: PPUSH
5469: LD_INT 0
5471: PPUSH
5472: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5476: LD_VAR 0 1
5480: PPUSH
5481: LD_INT 210
5483: PPUSH
5484: LD_INT 159
5486: PPUSH
5487: CALL_OW 111
// wait ( 0 0$2 ) ;
5491: LD_INT 70
5493: PPUSH
5494: CALL_OW 67
// end ;
5498: GO 5390
5500: POP
5501: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5502: LD_ADDR_VAR 0 4
5506: PUSH
5507: LD_INT 172
5509: PUSH
5510: LD_INT 76
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 150
5519: PUSH
5520: LD_INT 38
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 148
5529: PUSH
5530: LD_INT 9
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 165
5539: PUSH
5540: LD_INT 38
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: PUSH
5553: LD_INT 191
5555: PUSH
5556: LD_INT 77
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PUSH
5563: LD_INT 168
5565: PUSH
5566: LD_INT 42
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 166
5575: PUSH
5576: LD_INT 11
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: LD_INT 151
5585: PUSH
5586: LD_INT 12
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 221
5601: PUSH
5602: LD_INT 88
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 217
5611: PUSH
5612: LD_INT 64
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: LD_INT 232
5621: PUSH
5622: LD_INT 66
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: LD_INT 200
5631: PUSH
5632: LD_INT 56
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PUSH
5645: EMPTY
5646: LIST
5647: LIST
5648: LIST
5649: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5650: LD_INT 35
5652: PPUSH
5653: CALL_OW 67
// for i := 1 to patrol do
5657: LD_ADDR_VAR 0 2
5661: PUSH
5662: DOUBLE
5663: LD_INT 1
5665: DEC
5666: ST_TO_ADDR
5667: LD_VAR 0 4
5671: PUSH
5672: FOR_TO
5673: IFFALSE 6010
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5675: LD_EXP 47
5679: PUSH
5680: LD_VAR 0 2
5684: ARRAY
5685: PPUSH
5686: CALL_OW 256
5690: PUSH
5691: LD_INT 990
5693: LESS
5694: PUSH
5695: LD_EXP 47
5699: PUSH
5700: LD_VAR 0 2
5704: ARRAY
5705: PPUSH
5706: CALL_OW 110
5710: PUSH
5711: LD_INT 1
5713: EQUAL
5714: AND
5715: IFFALSE 5735
// SetTag ( russianPatrol [ i ] , 2 ) ;
5717: LD_EXP 47
5721: PUSH
5722: LD_VAR 0 2
5726: ARRAY
5727: PPUSH
5728: LD_INT 2
5730: PPUSH
5731: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5735: LD_EXP 47
5739: PUSH
5740: LD_VAR 0 2
5744: ARRAY
5745: PPUSH
5746: CALL_OW 110
5750: PUSH
5751: LD_INT 2
5753: EQUAL
5754: IFFALSE 5821
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5756: LD_EXP 47
5760: PUSH
5761: LD_VAR 0 2
5765: ARRAY
5766: PPUSH
5767: LD_INT 166
5769: PPUSH
5770: LD_INT 101
5772: PPUSH
5773: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5777: LD_EXP 47
5781: PUSH
5782: LD_VAR 0 2
5786: ARRAY
5787: PPUSH
5788: LD_INT 71
5790: PPUSH
5791: CALL_OW 296
5795: PUSH
5796: LD_INT 10
5798: LESS
5799: IFFALSE 5819
// SetTag ( russianPatrol [ i ] , 3 ) ;
5801: LD_EXP 47
5805: PUSH
5806: LD_VAR 0 2
5810: ARRAY
5811: PPUSH
5812: LD_INT 3
5814: PPUSH
5815: CALL_OW 109
// continue ;
5819: GO 5672
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5821: LD_EXP 47
5825: PUSH
5826: LD_VAR 0 2
5830: ARRAY
5831: PPUSH
5832: CALL_OW 110
5836: PUSH
5837: LD_INT 3
5839: EQUAL
5840: IFFALSE 5908
// begin spottedByPatrol := true ;
5842: LD_ADDR_EXP 7
5846: PUSH
5847: LD_INT 1
5849: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5850: LD_EXP 47
5854: PUSH
5855: LD_VAR 0 2
5859: ARRAY
5860: PPUSH
5861: CALL_OW 250
5865: PPUSH
5866: LD_EXP 47
5870: PUSH
5871: LD_VAR 0 2
5875: ARRAY
5876: PPUSH
5877: CALL_OW 251
5881: PPUSH
5882: LD_INT 2
5884: PPUSH
5885: LD_INT 6
5887: NEG
5888: PPUSH
5889: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5893: LD_EXP 47
5897: PUSH
5898: LD_VAR 0 2
5902: ARRAY
5903: PPUSH
5904: CALL_OW 87
// end ; if not HasTask ( russianPatrol [ i ] ) then
5908: LD_EXP 47
5912: PUSH
5913: LD_VAR 0 2
5917: ARRAY
5918: PPUSH
5919: CALL_OW 314
5923: NOT
5924: IFFALSE 6008
// for j in patrol [ i ] do
5926: LD_ADDR_VAR 0 3
5930: PUSH
5931: LD_VAR 0 4
5935: PUSH
5936: LD_VAR 0 2
5940: ARRAY
5941: PUSH
5942: FOR_IN
5943: IFFALSE 6006
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5945: LD_EXP 47
5949: PUSH
5950: LD_VAR 0 2
5954: ARRAY
5955: PPUSH
5956: LD_INT 35
5958: PPUSH
5959: LD_INT 175
5961: PPUSH
5962: CALL_OW 12
5966: PPUSH
5967: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5971: LD_EXP 47
5975: PUSH
5976: LD_VAR 0 2
5980: ARRAY
5981: PPUSH
5982: LD_VAR 0 3
5986: PUSH
5987: LD_INT 1
5989: ARRAY
5990: PPUSH
5991: LD_VAR 0 3
5995: PUSH
5996: LD_INT 2
5998: ARRAY
5999: PPUSH
6000: CALL_OW 174
// end ;
6004: GO 5942
6006: POP
6007: POP
// end ;
6008: GO 5672
6010: POP
6011: POP
// until not russianPatrol or russianAlert ;
6012: LD_EXP 47
6016: NOT
6017: PUSH
6018: LD_EXP 9
6022: OR
6023: IFFALSE 5650
// if russianPatrol then
6025: LD_EXP 47
6029: IFFALSE 6046
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
6031: LD_EXP 47
6035: PPUSH
6036: LD_INT 161
6038: PPUSH
6039: LD_INT 107
6041: PPUSH
6042: CALL_OW 114
// end ;
6046: PPOPN 4
6048: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
6049: LD_EXP 6
6053: PUSH
6054: LD_EXP 13
6058: NOT
6059: AND
6060: IFFALSE 6546
6062: GO 6064
6064: DISABLE
6065: LD_INT 0
6067: PPUSH
6068: PPUSH
6069: PPUSH
6070: PPUSH
6071: PPUSH
// begin enable ;
6072: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
6073: LD_ADDR_VAR 0 2
6077: PUSH
6078: LD_EXP 48
6082: PPUSH
6083: LD_INT 21
6085: PUSH
6086: LD_INT 2
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 72
6097: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
6098: LD_ADDR_VAR 0 4
6102: PUSH
6103: LD_INT 22
6105: PUSH
6106: LD_INT 4
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 69
6117: ST_TO_ADDR
// for i in filter do
6118: LD_ADDR_VAR 0 1
6122: PUSH
6123: LD_VAR 0 2
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6544
// begin tmp := IsDrivenBy ( i ) ;
6131: LD_ADDR_VAR 0 3
6135: PUSH
6136: LD_VAR 0 1
6140: PPUSH
6141: CALL_OW 311
6145: ST_TO_ADDR
// if not tmp then
6146: LD_VAR 0 3
6150: NOT
6151: IFFALSE 6155
// continue ;
6153: GO 6128
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6155: LD_VAR 0 1
6159: PPUSH
6160: CALL_OW 261
6164: PUSH
6165: LD_INT 90
6167: GREATER
6168: PUSH
6169: LD_VAR 0 1
6173: PPUSH
6174: CALL_OW 110
6178: PUSH
6179: LD_INT 2
6181: EQUAL
6182: AND
6183: IFFALSE 6199
// SetTag ( i , 0 ) else
6185: LD_VAR 0 1
6189: PPUSH
6190: LD_INT 0
6192: PPUSH
6193: CALL_OW 109
6197: GO 6295
// if GetTag ( i ) = 2 then
6199: LD_VAR 0 1
6203: PPUSH
6204: CALL_OW 110
6208: PUSH
6209: LD_INT 2
6211: EQUAL
6212: IFFALSE 6295
// begin x := rand ( 1 , 2 ) ;
6214: LD_ADDR_VAR 0 5
6218: PUSH
6219: LD_INT 1
6221: PPUSH
6222: LD_INT 2
6224: PPUSH
6225: CALL_OW 12
6229: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6230: LD_VAR 0 1
6234: PPUSH
6235: LD_EXP 49
6239: PUSH
6240: LD_VAR 0 5
6244: ARRAY
6245: PPUSH
6246: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
6250: LD_EXP 49
6254: PUSH
6255: LD_VAR 0 5
6259: ARRAY
6260: PPUSH
6261: LD_INT 2
6263: PPUSH
6264: CALL_OW 289
6268: PUSH
6269: LD_INT 20
6271: LESS
6272: IFFALSE 6295
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
6274: LD_EXP 49
6278: PUSH
6279: LD_VAR 0 5
6283: ARRAY
6284: PPUSH
6285: LD_INT 2
6287: PPUSH
6288: LD_INT 100
6290: PPUSH
6291: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6295: LD_VAR 0 1
6299: PPUSH
6300: CALL_OW 256
6304: PUSH
6305: LD_INT 600
6307: GREATEREQUAL
6308: PUSH
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 110
6318: NOT
6319: AND
6320: IFFALSE 6346
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6322: LD_VAR 0 1
6326: PPUSH
6327: LD_VAR 0 4
6331: PPUSH
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL_OW 74
6341: PPUSH
6342: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 256
6355: PUSH
6356: LD_INT 600
6358: LESS
6359: PUSH
6360: LD_VAR 0 1
6364: PPUSH
6365: CALL_OW 110
6369: NOT
6370: AND
6371: IFFALSE 6400
// begin SetTag ( i , 1 ) ;
6373: LD_VAR 0 1
6377: PPUSH
6378: LD_INT 1
6380: PPUSH
6381: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6385: LD_VAR 0 1
6389: PPUSH
6390: LD_INT 62
6392: PPUSH
6393: LD_INT 22
6395: PPUSH
6396: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6400: LD_VAR 0 1
6404: PPUSH
6405: CALL_OW 110
6409: PUSH
6410: LD_INT 1
6412: EQUAL
6413: PUSH
6414: LD_VAR 0 1
6418: PPUSH
6419: LD_INT 62
6421: PPUSH
6422: LD_INT 22
6424: PPUSH
6425: CALL_OW 297
6429: PUSH
6430: LD_INT 6
6432: LESS
6433: AND
6434: PUSH
6435: LD_VAR 0 3
6439: AND
6440: IFFALSE 6542
// begin ComExitVehicle ( tmp ) ;
6442: LD_VAR 0 3
6446: PPUSH
6447: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6451: LD_VAR 0 3
6455: PPUSH
6456: LD_VAR 0 1
6460: PPUSH
6461: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6465: LD_INT 35
6467: PPUSH
6468: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6472: LD_VAR 0 1
6476: PPUSH
6477: CALL_OW 256
6481: PUSH
6482: LD_INT 1000
6484: EQUAL
6485: IFFALSE 6465
// ComEnterUnit ( tmp , i ) ;
6487: LD_VAR 0 3
6491: PPUSH
6492: LD_VAR 0 1
6496: PPUSH
6497: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 261
6510: PUSH
6511: LD_INT 90
6513: LESSEQUAL
6514: IFFALSE 6530
// SetTag ( i , 2 ) else
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: CALL_OW 109
6528: GO 6542
// SetTag ( i , 0 ) ;
6530: LD_VAR 0 1
6534: PPUSH
6535: LD_INT 0
6537: PPUSH
6538: CALL_OW 109
// end ; end ;
6542: GO 6128
6544: POP
6545: POP
// end ;
6546: PPOPN 5
6548: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6549: LD_EXP 20
6553: IFFALSE 6755
6555: GO 6557
6557: DISABLE
6558: LD_INT 0
6560: PPUSH
6561: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6562: LD_EXP 49
6566: PPUSH
6567: LD_INT 79
6569: PPUSH
6570: LD_INT 155
6572: PPUSH
6573: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6577: LD_EXP 49
6581: PPUSH
6582: LD_INT 16
6584: PPUSH
6585: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6589: LD_ADDR_VAR 0 2
6593: PUSH
6594: LD_EXP 48
6598: PPUSH
6599: LD_INT 50
6601: PUSH
6602: EMPTY
6603: LIST
6604: PPUSH
6605: CALL_OW 72
6609: ST_TO_ADDR
// for i in tmp do
6610: LD_ADDR_VAR 0 1
6614: PUSH
6615: LD_VAR 0 2
6619: PUSH
6620: FOR_IN
6621: IFFALSE 6655
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6623: LD_VAR 0 1
6627: PPUSH
6628: LD_INT 123
6630: PPUSH
6631: LD_INT 60
6633: PPUSH
6634: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6638: LD_VAR 0 1
6642: PPUSH
6643: LD_INT 153
6645: PPUSH
6646: LD_INT 103
6648: PPUSH
6649: CALL_OW 174
// end ;
6653: GO 6620
6655: POP
6656: POP
// repeat wait ( 0 0$1 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6664: LD_ADDR_VAR 0 2
6668: PUSH
6669: LD_EXP 48
6673: PPUSH
6674: LD_INT 50
6676: PUSH
6677: EMPTY
6678: LIST
6679: PPUSH
6680: CALL_OW 72
6684: ST_TO_ADDR
// for i in tmp do
6685: LD_ADDR_VAR 0 1
6689: PUSH
6690: LD_VAR 0 2
6694: PUSH
6695: FOR_IN
6696: IFFALSE 6746
// if not HasTask ( i ) then
6698: LD_VAR 0 1
6702: PPUSH
6703: CALL_OW 314
6707: NOT
6708: IFFALSE 6744
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6710: LD_VAR 0 1
6714: PPUSH
6715: LD_INT 81
6717: PUSH
6718: LD_INT 3
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PPUSH
6725: CALL_OW 69
6729: PPUSH
6730: LD_VAR 0 1
6734: PPUSH
6735: CALL_OW 74
6739: PPUSH
6740: CALL_OW 115
6744: GO 6695
6746: POP
6747: POP
6748: LD_VAR 0 2
6752: NOT
6753: IFFALSE 6657
// end ;
6755: PPOPN 2
6757: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6758: LD_INT 22
6760: PUSH
6761: LD_INT 3
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 32
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: IFFALSE 6865
6788: GO 6790
6790: DISABLE
6791: LD_INT 0
6793: PPUSH
// begin enable ;
6794: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6795: LD_ADDR_VAR 0 1
6799: PUSH
6800: LD_INT 22
6802: PUSH
6803: LD_INT 3
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PUSH
6810: LD_INT 32
6812: PUSH
6813: LD_INT 1
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PPUSH
6824: CALL_OW 69
6828: PUSH
6829: FOR_IN
6830: IFFALSE 6863
// if GetFuel ( i ) < 1 then
6832: LD_VAR 0 1
6836: PPUSH
6837: CALL_OW 261
6841: PUSH
6842: LD_INT 1
6844: LESS
6845: IFFALSE 6861
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6847: LD_VAR 0 1
6851: PPUSH
6852: CALL_OW 311
6856: PPUSH
6857: CALL_OW 121
6861: GO 6829
6863: POP
6864: POP
// end ; end_of_file
6865: PPOPN 1
6867: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6868: LD_INT 0
6870: PPUSH
6871: PPUSH
6872: PPUSH
// SetBName ( omikron , omikron ) ;
6873: LD_INT 64
6875: PPUSH
6876: LD_STRING omikron
6878: PPUSH
6879: CALL_OW 500
// uc_side := 4 ;
6883: LD_ADDR_OWVAR 20
6887: PUSH
6888: LD_INT 4
6890: ST_TO_ADDR
// uc_nation := 1 ;
6891: LD_ADDR_OWVAR 21
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// omicronSquad := [ ] ;
6899: LD_ADDR_EXP 51
6903: PUSH
6904: EMPTY
6905: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6906: LD_ADDR_VAR 0 2
6910: PUSH
6911: LD_INT 22
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 32
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 31
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: PUSH
6958: FOR_IN
6959: IFFALSE 7016
// begin PrepareHuman ( false , 1 , 1 ) ;
6961: LD_INT 0
6963: PPUSH
6964: LD_INT 1
6966: PPUSH
6967: LD_INT 1
6969: PPUSH
6970: CALL_OW 380
// un := CreateHuman ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: CALL_OW 44
6983: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6984: LD_ADDR_EXP 51
6988: PUSH
6989: LD_EXP 51
6993: PUSH
6994: LD_VAR 0 3
6998: UNION
6999: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 52
// end ;
7014: GO 6958
7016: POP
7017: POP
// for i := 1 to 3 do
7018: LD_ADDR_VAR 0 2
7022: PUSH
7023: DOUBLE
7024: LD_INT 1
7026: DEC
7027: ST_TO_ADDR
7028: LD_INT 3
7030: PUSH
7031: FOR_TO
7032: IFFALSE 7087
// begin PrepareHuman ( false , 2 , 2 ) ;
7034: LD_INT 0
7036: PPUSH
7037: LD_INT 2
7039: PPUSH
7040: LD_INT 2
7042: PPUSH
7043: CALL_OW 380
// un := CreateHuman ;
7047: LD_ADDR_VAR 0 3
7051: PUSH
7052: CALL_OW 44
7056: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7057: LD_ADDR_EXP 51
7061: PUSH
7062: LD_EXP 51
7066: PUSH
7067: LD_VAR 0 3
7071: UNION
7072: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7073: LD_VAR 0 3
7077: PPUSH
7078: LD_INT 64
7080: PPUSH
7081: CALL_OW 52
// end ;
7085: GO 7031
7087: POP
7088: POP
// for i := 1 to 2 do
7089: LD_ADDR_VAR 0 2
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_INT 2
7101: PUSH
7102: FOR_TO
7103: IFFALSE 7242
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7105: LD_INT 4
7107: PPUSH
7108: LD_INT 1
7110: PPUSH
7111: LD_INT 2
7113: PPUSH
7114: LD_INT 2
7116: PPUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 3
7122: PPUSH
7123: LD_INT 100
7125: PPUSH
7126: CALL 345 0 7
// un := CreateVehicle ;
7130: LD_ADDR_VAR 0 3
7134: PUSH
7135: CALL_OW 45
7139: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7140: LD_ADDR_EXP 51
7144: PUSH
7145: LD_EXP 51
7149: PUSH
7150: LD_VAR 0 3
7154: UNION
7155: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7156: LD_VAR 0 3
7160: PPUSH
7161: LD_INT 28
7163: PPUSH
7164: LD_INT 37
7166: PPUSH
7167: LD_INT 6
7169: PPUSH
7170: LD_INT 0
7172: PPUSH
7173: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7177: LD_INT 0
7179: PPUSH
7180: LD_INT 3
7182: PPUSH
7183: LD_INT 2
7185: PPUSH
7186: CALL_OW 380
// un := CreateHuman ;
7190: LD_ADDR_VAR 0 3
7194: PUSH
7195: CALL_OW 44
7199: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7200: LD_ADDR_EXP 51
7204: PUSH
7205: LD_EXP 51
7209: PUSH
7210: LD_VAR 0 3
7214: UNION
7215: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7216: LD_VAR 0 3
7220: PPUSH
7221: LD_EXP 51
7225: PUSH
7226: LD_EXP 51
7230: PUSH
7231: LD_INT 1
7233: MINUS
7234: ARRAY
7235: PPUSH
7236: CALL_OW 52
// end ;
7240: GO 7102
7242: POP
7243: POP
// end ;
7244: LD_VAR 0 1
7248: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7249: LD_INT 0
7251: PPUSH
7252: PPUSH
7253: PPUSH
7254: PPUSH
// uc_side := 4 ;
7255: LD_ADDR_OWVAR 20
7259: PUSH
7260: LD_INT 4
7262: ST_TO_ADDR
// uc_nation := 1 ;
7263: LD_ADDR_OWVAR 21
7267: PUSH
7268: LD_INT 1
7270: ST_TO_ADDR
// tmp := [ ] ;
7271: LD_ADDR_VAR 0 4
7275: PUSH
7276: EMPTY
7277: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7278: LD_INT 4
7280: PPUSH
7281: LD_INT 1
7283: PPUSH
7284: LD_INT 2
7286: PPUSH
7287: LD_INT 1
7289: PPUSH
7290: LD_INT 1
7292: PPUSH
7293: LD_INT 4
7295: PPUSH
7296: LD_INT 77
7298: PPUSH
7299: CALL 345 0 7
// un := CreateVehicle ;
7303: LD_ADDR_VAR 0 3
7307: PUSH
7308: CALL_OW 45
7312: ST_TO_ADDR
// tmp := tmp union un ;
7313: LD_ADDR_VAR 0 4
7317: PUSH
7318: LD_VAR 0 4
7322: PUSH
7323: LD_VAR 0 3
7327: UNION
7328: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7329: LD_VAR 0 3
7333: PPUSH
7334: LD_INT 2
7336: PPUSH
7337: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7341: LD_VAR 0 3
7345: PPUSH
7346: LD_INT 106
7348: PPUSH
7349: LD_INT 3
7351: PPUSH
7352: LD_INT 0
7354: PPUSH
7355: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7359: LD_INT 0
7361: PPUSH
7362: LD_INT 3
7364: PPUSH
7365: LD_INT 2
7367: PPUSH
7368: CALL_OW 380
// un := CreateHuman ;
7372: LD_ADDR_VAR 0 3
7376: PUSH
7377: CALL_OW 44
7381: ST_TO_ADDR
// tmp := tmp union un ;
7382: LD_ADDR_VAR 0 4
7386: PUSH
7387: LD_VAR 0 4
7391: PUSH
7392: LD_VAR 0 3
7396: UNION
7397: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7398: LD_VAR 0 3
7402: PPUSH
7403: LD_VAR 0 4
7407: PUSH
7408: LD_VAR 0 4
7412: PUSH
7413: LD_INT 1
7415: MINUS
7416: ARRAY
7417: PPUSH
7418: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7422: LD_VAR 0 3
7426: PPUSH
7427: LD_INT 109
7429: PPUSH
7430: LD_INT 9
7432: PPUSH
7433: CALL_OW 111
// wait ( 0 0$1 ) ;
7437: LD_INT 35
7439: PPUSH
7440: CALL_OW 67
// for i := 1 to 2 do
7444: LD_ADDR_VAR 0 2
7448: PUSH
7449: DOUBLE
7450: LD_INT 1
7452: DEC
7453: ST_TO_ADDR
7454: LD_INT 2
7456: PUSH
7457: FOR_TO
7458: IFFALSE 7522
// begin PrepareHuman ( false , 1 , 2 ) ;
7460: LD_INT 0
7462: PPUSH
7463: LD_INT 1
7465: PPUSH
7466: LD_INT 2
7468: PPUSH
7469: CALL_OW 380
// un := CreateHuman ;
7473: LD_ADDR_VAR 0 3
7477: PUSH
7478: CALL_OW 44
7482: ST_TO_ADDR
// tmp := tmp union un ;
7483: LD_ADDR_VAR 0 4
7487: PUSH
7488: LD_VAR 0 4
7492: PUSH
7493: LD_VAR 0 3
7497: UNION
7498: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7499: LD_VAR 0 3
7503: PPUSH
7504: LD_INT 105
7506: PPUSH
7507: LD_INT 2
7509: PPUSH
7510: LD_INT 2
7512: PPUSH
7513: LD_INT 0
7515: PPUSH
7516: CALL_OW 50
// end ;
7520: GO 7457
7522: POP
7523: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7524: LD_VAR 0 4
7528: PPUSH
7529: LD_INT 26
7531: PPUSH
7532: LD_INT 35
7534: PPUSH
7535: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7539: LD_INT 35
7541: PPUSH
7542: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7546: LD_VAR 0 4
7550: PPUSH
7551: LD_INT 50
7553: PUSH
7554: EMPTY
7555: LIST
7556: PPUSH
7557: CALL_OW 72
7561: NOT
7562: IFFALSE 7566
// exit ;
7564: GO 7693
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7566: LD_VAR 0 4
7570: PPUSH
7571: LD_INT 91
7573: PUSH
7574: LD_INT 64
7576: PUSH
7577: LD_INT 12
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 72
7589: PUSH
7590: LD_VAR 0 4
7594: EQUAL
7595: IFFALSE 7539
// omicronSquad := omicronSquad union tmp ;
7597: LD_ADDR_EXP 51
7601: PUSH
7602: LD_EXP 51
7606: PUSH
7607: LD_VAR 0 4
7611: UNION
7612: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7613: LD_ADDR_VAR 0 2
7617: PUSH
7618: LD_VAR 0 4
7622: PPUSH
7623: LD_INT 25
7625: PUSH
7626: LD_INT 1
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PPUSH
7633: CALL_OW 72
7637: PUSH
7638: FOR_IN
7639: IFFALSE 7691
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7641: LD_VAR 0 2
7645: PPUSH
7646: LD_INT 22
7648: PUSH
7649: LD_INT 4
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 30
7658: PUSH
7659: LD_INT 4
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PPUSH
7670: CALL_OW 69
7674: PPUSH
7675: LD_VAR 0 2
7679: PPUSH
7680: CALL_OW 74
7684: PPUSH
7685: CALL_OW 120
7689: GO 7638
7691: POP
7692: POP
// end ;
7693: LD_VAR 0 1
7697: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7698: LD_EXP 13
7702: NOT
7703: IFFALSE 8274
7705: GO 7707
7707: DISABLE
7708: LD_INT 0
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
// begin enable ;
7714: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7715: LD_ADDR_VAR 0 2
7719: PUSH
7720: LD_INT 22
7722: PUSH
7723: LD_INT 4
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 21
7732: PUSH
7733: LD_INT 3
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 3
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 1000
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: PPUSH
7762: CALL_OW 69
7766: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7767: LD_ADDR_VAR 0 3
7771: PUSH
7772: LD_EXP 51
7776: PPUSH
7777: LD_INT 25
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PPUSH
7787: CALL_OW 72
7791: ST_TO_ADDR
// if filter and tmp then
7792: LD_VAR 0 2
7796: PUSH
7797: LD_VAR 0 3
7801: AND
7802: IFFALSE 7875
// begin for i in tmp do
7804: LD_ADDR_VAR 0 1
7808: PUSH
7809: LD_VAR 0 3
7813: PUSH
7814: FOR_IN
7815: IFFALSE 7871
// if IsInUnit ( i ) then
7817: LD_VAR 0 1
7821: PPUSH
7822: CALL_OW 310
7826: IFFALSE 7839
// ComExitBuilding ( i ) else
7828: LD_VAR 0 1
7832: PPUSH
7833: CALL_OW 122
7837: GO 7869
// if not HasTask ( i ) then
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 314
7848: NOT
7849: IFFALSE 7869
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7851: LD_VAR 0 1
7855: PPUSH
7856: LD_VAR 0 2
7860: PUSH
7861: LD_INT 1
7863: ARRAY
7864: PPUSH
7865: CALL_OW 130
7869: GO 7814
7871: POP
7872: POP
// end else
7873: GO 7946
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7875: LD_VAR 0 3
7879: PPUSH
7880: LD_INT 3
7882: PUSH
7883: LD_INT 54
7885: PUSH
7886: EMPTY
7887: LIST
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PPUSH
7893: CALL_OW 72
7897: IFFALSE 7946
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7899: LD_ADDR_VAR 0 1
7903: PUSH
7904: LD_VAR 0 3
7908: PPUSH
7909: LD_INT 3
7911: PUSH
7912: LD_INT 54
7914: PUSH
7915: EMPTY
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 72
7926: PUSH
7927: FOR_IN
7928: IFFALSE 7944
// ComEnterUnit ( i , omikron ) ;
7930: LD_VAR 0 1
7934: PPUSH
7935: LD_INT 64
7937: PPUSH
7938: CALL_OW 120
7942: GO 7927
7944: POP
7945: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7946: LD_ADDR_VAR 0 2
7950: PUSH
7951: LD_EXP 51
7955: PPUSH
7956: LD_INT 21
7958: PUSH
7959: LD_INT 2
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PPUSH
7966: CALL_OW 72
7970: ST_TO_ADDR
// if not filter then
7971: LD_VAR 0 2
7975: NOT
7976: IFFALSE 7980
// exit ;
7978: GO 8274
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7980: LD_ADDR_VAR 0 4
7984: PUSH
7985: LD_INT 13
7987: PPUSH
7988: LD_INT 81
7990: PUSH
7991: LD_INT 4
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PPUSH
7998: CALL_OW 70
8002: ST_TO_ADDR
// if enemy then
8003: LD_VAR 0 4
8007: IFFALSE 8274
// begin for i in filter do
8009: LD_ADDR_VAR 0 1
8013: PUSH
8014: LD_VAR 0 2
8018: PUSH
8019: FOR_IN
8020: IFFALSE 8272
// begin tmp := IsDrivenBy ( i ) ;
8022: LD_ADDR_VAR 0 3
8026: PUSH
8027: LD_VAR 0 1
8031: PPUSH
8032: CALL_OW 311
8036: ST_TO_ADDR
// if not tmp then
8037: LD_VAR 0 3
8041: NOT
8042: IFFALSE 8046
// continue ;
8044: GO 8019
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL_OW 256
8055: PUSH
8056: LD_INT 600
8058: GREATEREQUAL
8059: PUSH
8060: LD_VAR 0 1
8064: PPUSH
8065: CALL_OW 110
8069: PUSH
8070: LD_INT 1
8072: NONEQUAL
8073: AND
8074: IFFALSE 8100
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8076: LD_VAR 0 1
8080: PPUSH
8081: LD_VAR 0 4
8085: PPUSH
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 74
8095: PPUSH
8096: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8100: LD_VAR 0 1
8104: PPUSH
8105: CALL_OW 256
8109: PUSH
8110: LD_INT 600
8112: LESS
8113: PUSH
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 110
8123: PUSH
8124: LD_INT 1
8126: NONEQUAL
8127: AND
8128: IFFALSE 8157
// begin SetTag ( i , 1 ) ;
8130: LD_VAR 0 1
8134: PPUSH
8135: LD_INT 1
8137: PPUSH
8138: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8142: LD_VAR 0 1
8146: PPUSH
8147: LD_INT 27
8149: PPUSH
8150: LD_INT 35
8152: PPUSH
8153: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8157: LD_VAR 0 1
8161: PPUSH
8162: CALL_OW 110
8166: PUSH
8167: LD_INT 1
8169: EQUAL
8170: PUSH
8171: LD_VAR 0 1
8175: PPUSH
8176: LD_INT 27
8178: PPUSH
8179: LD_INT 35
8181: PPUSH
8182: CALL_OW 297
8186: PUSH
8187: LD_INT 6
8189: LESS
8190: AND
8191: PUSH
8192: LD_VAR 0 3
8196: AND
8197: IFFALSE 8270
// begin ComExitVehicle ( tmp ) ;
8199: LD_VAR 0 3
8203: PPUSH
8204: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8222: LD_INT 35
8224: PPUSH
8225: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8229: LD_VAR 0 1
8233: PPUSH
8234: CALL_OW 256
8238: PUSH
8239: LD_INT 1000
8241: EQUAL
8242: IFFALSE 8222
// ComEnterUnit ( tmp , i ) ;
8244: LD_VAR 0 3
8248: PPUSH
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 120
// SetTag ( i , 0 ) ;
8258: LD_VAR 0 1
8262: PPUSH
8263: LD_INT 0
8265: PPUSH
8266: CALL_OW 109
// end ; end ;
8270: GO 8019
8272: POP
8273: POP
// end ; end ;
8274: PPOPN 4
8276: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8277: LD_EXP 13
8281: IFFALSE 8425
8283: GO 8285
8285: DISABLE
8286: LD_INT 0
8288: PPUSH
8289: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: LD_EXP 51
8299: PPUSH
8300: LD_INT 21
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 50
8312: PUSH
8313: EMPTY
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PPUSH
8320: CALL_OW 72
8324: ST_TO_ADDR
// if not tmp then
8325: LD_VAR 0 2
8329: NOT
8330: IFFALSE 8334
// exit ;
8332: GO 8425
// repeat wait ( 0 0$1 ) ;
8334: LD_INT 35
8336: PPUSH
8337: CALL_OW 67
// for i in tmp do
8341: LD_ADDR_VAR 0 1
8345: PUSH
8346: LD_VAR 0 2
8350: PUSH
8351: FOR_IN
8352: IFFALSE 8416
// begin ComExit ( i ) ;
8354: LD_VAR 0 1
8358: PPUSH
8359: CALL 783 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8363: LD_VAR 0 1
8367: PPUSH
8368: LD_INT 14
8370: PPUSH
8371: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8375: LD_VAR 0 1
8379: PPUSH
8380: LD_INT 14
8382: PPUSH
8383: CALL_OW 308
8387: IFFALSE 8414
// begin tmp := tmp diff i ;
8389: LD_ADDR_VAR 0 2
8393: PUSH
8394: LD_VAR 0 2
8398: PUSH
8399: LD_VAR 0 1
8403: DIFF
8404: ST_TO_ADDR
// RemoveUnit ( i ) ;
8405: LD_VAR 0 1
8409: PPUSH
8410: CALL_OW 64
// end ; end ;
8414: GO 8351
8416: POP
8417: POP
// until not tmp ;
8418: LD_VAR 0 2
8422: NOT
8423: IFFALSE 8334
// end ; end_of_file
8425: PPOPN 2
8427: END
// export function Action ; var i , un , veh , tmp ; begin
8428: LD_INT 0
8430: PPUSH
8431: PPUSH
8432: PPUSH
8433: PPUSH
8434: PPUSH
// InGameOn ;
8435: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8439: LD_INT 179
8441: PPUSH
8442: LD_INT 5
8444: PPUSH
8445: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8449: LD_ADDR_VAR 0 4
8453: PUSH
8454: LD_INT 2
8456: PPUSH
8457: LD_INT 2
8459: PPUSH
8460: LD_INT 12
8462: PPUSH
8463: LD_INT 1
8465: PPUSH
8466: LD_INT 1
8468: PPUSH
8469: LD_INT 24
8471: PPUSH
8472: LD_INT 33
8474: PPUSH
8475: CALL 345 0 7
8479: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8480: LD_VAR 0 4
8484: PPUSH
8485: LD_INT 2
8487: PPUSH
8488: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8492: LD_VAR 0 4
8496: PPUSH
8497: LD_INT 178
8499: PPUSH
8500: LD_INT 2
8502: PPUSH
8503: LD_INT 0
8505: PPUSH
8506: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8510: LD_EXP 25
8514: PPUSH
8515: LD_VAR 0 4
8519: PPUSH
8520: CALL_OW 52
// if Kamil then
8524: LD_EXP 29
8528: IFFALSE 8563
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8530: LD_EXP 29
8534: PPUSH
8535: LD_INT 207
8537: PPUSH
8538: LD_INT 37
8540: PPUSH
8541: LD_INT 0
8543: PPUSH
8544: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8548: LD_EXP 29
8552: PPUSH
8553: LD_INT 211
8555: PPUSH
8556: LD_INT 38
8558: PPUSH
8559: CALL_OW 118
// end ; if Sophia then
8563: LD_EXP 31
8567: IFFALSE 8602
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8569: LD_EXP 31
8573: PPUSH
8574: LD_INT 209
8576: PPUSH
8577: LD_INT 40
8579: PPUSH
8580: LD_INT 0
8582: PPUSH
8583: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8587: LD_EXP 31
8591: PPUSH
8592: LD_INT 211
8594: PPUSH
8595: LD_INT 38
8597: PPUSH
8598: CALL_OW 118
// end ; if Givi then
8602: LD_EXP 26
8606: IFFALSE 8641
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8608: LD_EXP 26
8612: PPUSH
8613: LD_INT 201
8615: PPUSH
8616: LD_INT 34
8618: PPUSH
8619: LD_INT 0
8621: PPUSH
8622: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8626: LD_EXP 26
8630: PPUSH
8631: LD_INT 206
8633: PPUSH
8634: LD_INT 36
8636: PPUSH
8637: CALL_OW 118
// end ; if Ibrahim then
8641: LD_EXP 28
8645: IFFALSE 8680
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8647: LD_EXP 28
8651: PPUSH
8652: LD_INT 202
8654: PPUSH
8655: LD_INT 39
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8665: LD_EXP 28
8669: PPUSH
8670: LD_INT 206
8672: PPUSH
8673: LD_INT 36
8675: PPUSH
8676: CALL_OW 118
// end ; if Markov then
8680: LD_EXP 32
8684: IFFALSE 8771
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8686: LD_ADDR_VAR 0 4
8690: PUSH
8691: LD_INT 2
8693: PPUSH
8694: LD_INT 2
8696: PPUSH
8697: LD_INT 13
8699: PPUSH
8700: LD_INT 1
8702: PPUSH
8703: LD_INT 1
8705: PPUSH
8706: LD_INT 25
8708: PPUSH
8709: LD_INT 80
8711: PUSH
8712: LD_INT 20
8714: PUSH
8715: LD_OWVAR 67
8719: MUL
8720: MINUS
8721: PPUSH
8722: CALL 345 0 7
8726: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8727: LD_VAR 0 4
8731: PPUSH
8732: LD_INT 2
8734: PPUSH
8735: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8739: LD_VAR 0 4
8743: PPUSH
8744: LD_INT 197
8746: PPUSH
8747: LD_INT 35
8749: PPUSH
8750: LD_INT 0
8752: PPUSH
8753: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8757: LD_EXP 32
8761: PPUSH
8762: LD_VAR 0 4
8766: PPUSH
8767: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8771: LD_ADDR_VAR 0 5
8775: PUSH
8776: LD_EXP 30
8780: PUSH
8781: LD_EXP 37
8785: UNION
8786: ST_TO_ADDR
// for i in tmp do
8787: LD_ADDR_VAR 0 2
8791: PUSH
8792: LD_VAR 0 5
8796: PUSH
8797: FOR_IN
8798: IFFALSE 8832
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8800: LD_VAR 0 2
8804: PPUSH
8805: LD_INT 203
8807: PPUSH
8808: LD_INT 41
8810: PPUSH
8811: LD_INT 6
8813: PPUSH
8814: LD_INT 0
8816: PPUSH
8817: CALL_OW 50
// ComHold ( i ) ;
8821: LD_VAR 0 2
8825: PPUSH
8826: CALL_OW 140
// end ;
8830: GO 8797
8832: POP
8833: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8834: LD_INT 22
8836: PUSH
8837: LD_INT 2
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 25
8846: PUSH
8847: LD_INT 2
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PPUSH
8858: CALL_OW 69
8862: NOT
8863: IFFALSE 8877
// SetClass ( Heike , 2 ) ;
8865: LD_EXP 25
8869: PPUSH
8870: LD_INT 2
8872: PPUSH
8873: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8877: LD_EXP 25
8881: PPUSH
8882: LD_INT 183
8884: PPUSH
8885: LD_INT 12
8887: PPUSH
8888: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8892: LD_EXP 25
8896: PPUSH
8897: LD_INT 188
8899: PPUSH
8900: LD_INT 20
8902: PPUSH
8903: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8907: LD_EXP 25
8911: PPUSH
8912: LD_INT 191
8914: PPUSH
8915: LD_INT 25
8917: PPUSH
8918: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8922: LD_EXP 25
8926: PPUSH
8927: LD_INT 203
8929: PPUSH
8930: LD_INT 29
8932: PPUSH
8933: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8937: LD_EXP 25
8941: PPUSH
8942: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8946: LD_INT 35
8948: PPUSH
8949: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8953: LD_EXP 25
8957: PPUSH
8958: CALL_OW 310
8962: NOT
8963: IFFALSE 8946
// CenterOnUnits ( Heike ) ;
8965: LD_EXP 25
8969: PPUSH
8970: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8974: LD_ADDR_VAR 0 5
8978: PUSH
8979: LD_INT 22
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: LD_INT 21
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PPUSH
9003: CALL_OW 69
9007: PUSH
9008: LD_EXP 25
9012: PUSH
9013: LD_EXP 32
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: DIFF
9022: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
9023: LD_VAR 0 5
9027: PPUSH
9028: LD_EXP 25
9032: PPUSH
9033: CALL_OW 119
// if Givi then
9037: LD_EXP 26
9041: IFFALSE 9059
// ComTurnUnit ( Heike , Givi ) else
9043: LD_EXP 25
9047: PPUSH
9048: LD_EXP 26
9052: PPUSH
9053: CALL_OW 119
9057: GO 9077
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9059: LD_EXP 25
9063: PPUSH
9064: LD_VAR 0 5
9068: PUSH
9069: LD_INT 1
9071: ARRAY
9072: PPUSH
9073: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9077: LD_EXP 25
9081: PPUSH
9082: LD_STRING DH-Start-1
9084: PPUSH
9085: CALL_OW 88
// if Givi then
9089: LD_EXP 26
9093: IFFALSE 9140
// begin Say ( Givi , DG-Start-2 ) ;
9095: LD_EXP 26
9099: PPUSH
9100: LD_STRING DG-Start-2
9102: PPUSH
9103: CALL_OW 88
// if not Mike then
9107: LD_EXP 27
9111: NOT
9112: IFFALSE 9138
// begin Say ( Givi , DG-Start-b-3 ) ;
9114: LD_EXP 26
9118: PPUSH
9119: LD_STRING DG-Start-b-3
9121: PPUSH
9122: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9126: LD_EXP 25
9130: PPUSH
9131: LD_STRING DH-Start-b-4
9133: PPUSH
9134: CALL_OW 88
// end ; end else
9138: GO 9205
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9140: LD_EXP 37
9144: PPUSH
9145: LD_INT 26
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PPUSH
9155: CALL_OW 72
9159: PUSH
9160: LD_INT 1
9162: ARRAY
9163: PPUSH
9164: LD_STRING DArm-Start-a-2
9166: PPUSH
9167: CALL_OW 88
9171: NOT
9172: IFFALSE 9205
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9174: LD_EXP 37
9178: PPUSH
9179: LD_INT 26
9181: PUSH
9182: LD_INT 2
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PPUSH
9189: CALL_OW 72
9193: PUSH
9194: LD_INT 1
9196: ARRAY
9197: PPUSH
9198: LD_STRING DArf-Start-a-2
9200: PPUSH
9201: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9205: LD_EXP 25
9209: PPUSH
9210: LD_INT 211
9212: PPUSH
9213: LD_INT 38
9215: PPUSH
9216: CALL_OW 118
// wait ( 0 0$1 ) ;
9220: LD_INT 35
9222: PPUSH
9223: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9227: LD_EXP 25
9231: PPUSH
9232: LD_STRING DH-Start-3
9234: PPUSH
9235: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9239: LD_EXP 25
9243: PPUSH
9244: LD_STRING DH-Start-4
9246: PPUSH
9247: CALL_OW 88
// InGameOff ;
9251: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9255: LD_STRING Prepare
9257: PPUSH
9258: CALL_OW 337
// SaveForQuickRestart ;
9262: CALL_OW 22
// wait ( 0 0$30 ) ;
9266: LD_INT 1050
9268: PPUSH
9269: CALL_OW 67
// if not Aviradze then
9273: LD_EXP 35
9277: NOT
9278: IFFALSE 9282
// exit ;
9280: GO 9486
// SetDir ( Aviradze , 4 ) ;
9282: LD_EXP 35
9286: PPUSH
9287: LD_INT 4
9289: PPUSH
9290: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9294: LD_EXP 35
9298: PPUSH
9299: LD_INT 225
9301: PPUSH
9302: LD_INT 33
9304: PPUSH
9305: LD_INT 0
9307: PPUSH
9308: CALL_OW 48
// for i := 1 to 2 do
9312: LD_ADDR_VAR 0 2
9316: PUSH
9317: DOUBLE
9318: LD_INT 1
9320: DEC
9321: ST_TO_ADDR
9322: LD_INT 2
9324: PUSH
9325: FOR_TO
9326: IFFALSE 9457
// begin uc_side := 2 ;
9328: LD_ADDR_OWVAR 20
9332: PUSH
9333: LD_INT 2
9335: ST_TO_ADDR
// uc_nation := 0 ;
9336: LD_ADDR_OWVAR 21
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9344: LD_INT 0
9346: PPUSH
9347: LD_INT 12
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 380
// hc_gallery :=  ;
9357: LD_ADDR_OWVAR 33
9361: PUSH
9362: LD_STRING 
9364: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9365: LD_ADDR_OWVAR 26
9369: PUSH
9370: LD_STRING Artudito
9372: PUSH
9373: LD_STRING Textur
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_VAR 0 2
9384: ARRAY
9385: ST_TO_ADDR
// un := CreateHuman ;
9386: LD_ADDR_VAR 0 3
9390: PUSH
9391: CALL_OW 44
9395: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9396: LD_VAR 0 3
9400: PPUSH
9401: LD_INT 224
9403: PUSH
9404: LD_INT 226
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_VAR 0 2
9415: ARRAY
9416: PPUSH
9417: LD_INT 31
9419: PUSH
9420: LD_INT 35
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: LD_VAR 0 2
9431: ARRAY
9432: PPUSH
9433: LD_INT 0
9435: PPUSH
9436: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9440: LD_VAR 0 3
9444: PPUSH
9445: LD_INT 215
9447: PPUSH
9448: LD_INT 36
9450: PPUSH
9451: CALL_OW 111
// end ;
9455: GO 9325
9457: POP
9458: POP
// hc_name :=  ;
9459: LD_ADDR_OWVAR 26
9463: PUSH
9464: LD_STRING 
9466: ST_TO_ADDR
// InitHc ;
9467: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9471: LD_EXP 35
9475: PPUSH
9476: LD_INT 215
9478: PPUSH
9479: LD_INT 36
9481: PPUSH
9482: CALL_OW 111
// end ;
9486: LD_VAR 0 1
9490: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9491: LD_EXP 3
9495: IFFALSE 10804
9497: GO 9499
9499: DISABLE
9500: LD_INT 0
9502: PPUSH
9503: PPUSH
9504: PPUSH
// begin DialogueOn ;
9505: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9509: LD_EXP 25
9513: PPUSH
9514: LD_STRING DH-base-1
9516: PPUSH
9517: CALL_OW 88
// if Markov then
9521: LD_EXP 32
9525: IFFALSE 9577
// begin Say ( Markov , DMar-base-2 ) ;
9527: LD_EXP 32
9531: PPUSH
9532: LD_STRING DMar-base-2
9534: PPUSH
9535: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9539: LD_EXP 32
9543: PPUSH
9544: LD_STRING DMar-base-3
9546: PPUSH
9547: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9551: LD_EXP 25
9555: PPUSH
9556: LD_STRING DH-base-4
9558: PPUSH
9559: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9563: LD_EXP 32
9567: PPUSH
9568: LD_STRING DMar-base-5
9570: PPUSH
9571: CALL_OW 88
// end else
9575: GO 9654
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9577: LD_EXP 37
9581: PPUSH
9582: LD_INT 26
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PPUSH
9592: CALL_OW 72
9596: PUSH
9597: LD_INT 1
9599: ARRAY
9600: PPUSH
9601: LD_STRING DArm-base-a-2
9603: PPUSH
9604: CALL_OW 88
9608: NOT
9609: IFFALSE 9642
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9611: LD_EXP 37
9615: PPUSH
9616: LD_INT 26
9618: PUSH
9619: LD_INT 2
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PPUSH
9626: CALL_OW 72
9630: PUSH
9631: LD_INT 1
9633: ARRAY
9634: PPUSH
9635: LD_STRING DArf-base-a-2
9637: PPUSH
9638: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9642: LD_EXP 25
9646: PPUSH
9647: LD_STRING DH-base-a-3
9649: PPUSH
9650: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9654: LD_EXP 35
9658: PPUSH
9659: LD_STRING DA-base-6
9661: PPUSH
9662: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9666: LD_EXP 35
9670: PPUSH
9671: LD_STRING DA-base-7
9673: PPUSH
9674: CALL_OW 88
// DialogueOff ;
9678: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9682: LD_STRING Flamethrower
9684: PPUSH
9685: CALL_OW 337
// wait ( 2 2$00 ) ;
9689: LD_INT 4200
9691: PPUSH
9692: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9696: LD_EXP 34
9700: PUSH
9701: LD_EXP 27
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PPUSH
9710: LD_INT 203
9712: PPUSH
9713: LD_INT 37
9715: PPUSH
9716: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9720: LD_INT 22
9722: PUSH
9723: LD_INT 2
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: LD_INT 92
9732: PUSH
9733: LD_INT 203
9735: PUSH
9736: LD_INT 37
9738: PUSH
9739: LD_INT 10
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 69
9756: NOT
9757: IFFALSE 9797
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9759: LD_EXP 34
9763: PUSH
9764: LD_EXP 27
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PPUSH
9773: LD_EXP 25
9777: PPUSH
9778: CALL_OW 250
9782: PPUSH
9783: LD_EXP 25
9787: PPUSH
9788: CALL_OW 251
9792: PPUSH
9793: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9797: LD_INT 35
9799: PPUSH
9800: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9804: LD_INT 2
9806: PPUSH
9807: LD_EXP 34
9811: PPUSH
9812: CALL_OW 292
9816: PUSH
9817: LD_EXP 34
9821: PPUSH
9822: LD_EXP 25
9826: PPUSH
9827: CALL_OW 296
9831: PUSH
9832: LD_INT 8
9834: LESS
9835: PUSH
9836: LD_EXP 34
9840: PPUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PPUSH
9865: CALL_OW 69
9869: PPUSH
9870: LD_EXP 34
9874: PPUSH
9875: CALL_OW 74
9879: PPUSH
9880: CALL_OW 296
9884: PUSH
9885: LD_INT 7
9887: LESS
9888: OR
9889: AND
9890: PUSH
9891: LD_EXP 34
9895: PPUSH
9896: LD_INT 10
9898: PPUSH
9899: CALL_OW 308
9903: NOT
9904: AND
9905: IFFALSE 9797
// InGameOn ;
9907: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9911: LD_EXP 34
9915: PPUSH
9916: CALL_OW 87
// if IsInUnit ( Heike ) then
9920: LD_EXP 25
9924: PPUSH
9925: CALL_OW 310
9929: IFFALSE 9940
// ComExitBuilding ( Heike ) ;
9931: LD_EXP 25
9935: PPUSH
9936: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9940: LD_EXP 34
9944: PUSH
9945: LD_EXP 27
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PPUSH
9954: LD_EXP 25
9958: PPUSH
9959: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9963: LD_EXP 25
9967: PPUSH
9968: LD_EXP 34
9972: PPUSH
9973: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9977: LD_INT 22
9979: PUSH
9980: LD_INT 2
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: LD_INT 91
9989: PUSH
9990: LD_EXP 34
9994: PUSH
9995: LD_INT 10
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 21
10005: PUSH
10006: LD_INT 3
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 69
10022: IFFALSE 10048
// begin Say ( Kurt , DKs-scout-1 ) ;
10024: LD_EXP 34
10028: PPUSH
10029: LD_STRING DKs-scout-1
10031: PPUSH
10032: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10036: LD_EXP 25
10040: PPUSH
10041: LD_STRING DH-scout-2
10043: PPUSH
10044: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
10048: LD_INT 35
10050: PPUSH
10051: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10055: LD_EXP 25
10059: PPUSH
10060: LD_EXP 34
10064: PPUSH
10065: CALL_OW 296
10069: PUSH
10070: LD_INT 6
10072: LESS
10073: IFFALSE 10048
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10075: LD_EXP 34
10079: PUSH
10080: LD_EXP 27
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PPUSH
10089: LD_EXP 25
10093: PPUSH
10094: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10098: LD_EXP 34
10102: PPUSH
10103: LD_STRING DKs-scout-3
10105: PPUSH
10106: CALL_OW 88
// if Kaia then
10110: LD_EXP 30
10114: IFFALSE 10297
// begin if IsInUnit ( Kaia ) then
10116: LD_EXP 30
10120: PPUSH
10121: CALL_OW 310
10125: IFFALSE 10136
// ComExitBuilding ( Kaia ) ;
10127: LD_EXP 30
10131: PPUSH
10132: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
10136: LD_EXP 30
10140: PPUSH
10141: LD_EXP 34
10145: PPUSH
10146: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
10150: LD_INT 35
10152: PPUSH
10153: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10157: LD_EXP 30
10161: PPUSH
10162: LD_EXP 34
10166: PPUSH
10167: CALL_OW 296
10171: PUSH
10172: LD_INT 6
10174: LESS
10175: IFFALSE 10150
// ComTurnUnit ( Kaia , Kurt ) ;
10177: LD_EXP 30
10181: PPUSH
10182: LD_EXP 34
10186: PPUSH
10187: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10191: LD_EXP 30
10195: PPUSH
10196: LD_STRING DK-scout-4
10198: PPUSH
10199: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10203: LD_EXP 34
10207: PPUSH
10208: LD_EXP 30
10212: PPUSH
10213: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10217: LD_EXP 34
10221: PPUSH
10222: LD_STRING DKs-scout-5
10224: PPUSH
10225: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10229: LD_EXP 30
10233: PPUSH
10234: LD_STRING DK-scout-6
10236: PPUSH
10237: CALL_OW 88
// if Mike then
10241: LD_EXP 27
10245: IFFALSE 10297
// begin Say ( Mike , DM-scout-7 ) ;
10247: LD_EXP 27
10251: PPUSH
10252: LD_STRING DM-scout-7
10254: PPUSH
10255: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10259: LD_EXP 30
10263: PPUSH
10264: LD_EXP 27
10268: PPUSH
10269: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10273: LD_EXP 30
10277: PPUSH
10278: LD_STRING DK-scout-8
10280: PPUSH
10281: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10285: LD_EXP 27
10289: PPUSH
10290: LD_STRING DM-scout-9
10292: PPUSH
10293: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10297: LD_INT 184
10299: PPUSH
10300: LD_INT 100
10302: PPUSH
10303: LD_INT 2
10305: PPUSH
10306: LD_INT 12
10308: NEG
10309: PPUSH
10310: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10314: LD_INT 184
10316: PPUSH
10317: LD_INT 100
10319: PPUSH
10320: LD_INT 2
10322: PPUSH
10323: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10327: LD_INT 184
10329: PPUSH
10330: LD_INT 100
10332: PPUSH
10333: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10337: LD_EXP 34
10341: PPUSH
10342: LD_STRING DKs-scout-10
10344: PPUSH
10345: CALL_OW 88
// wait ( 0 0$1 ) ;
10349: LD_INT 35
10351: PPUSH
10352: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10356: LD_INT 144
10358: PPUSH
10359: LD_INT 65
10361: PPUSH
10362: LD_INT 2
10364: PPUSH
10365: LD_INT 12
10367: NEG
10368: PPUSH
10369: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10373: LD_INT 144
10375: PPUSH
10376: LD_INT 65
10378: PPUSH
10379: LD_INT 2
10381: PPUSH
10382: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10386: LD_INT 144
10388: PPUSH
10389: LD_INT 65
10391: PPUSH
10392: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10396: LD_EXP 34
10400: PPUSH
10401: LD_STRING DKs-scout-11
10403: PPUSH
10404: CALL_OW 88
// wait ( 0 0$1 ) ;
10408: LD_INT 35
10410: PPUSH
10411: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10415: LD_EXP 34
10419: PPUSH
10420: CALL_OW 87
// if Mike and not Givi then
10424: LD_EXP 27
10428: PUSH
10429: LD_EXP 26
10433: NOT
10434: AND
10435: IFFALSE 10461
// begin Say ( Mike , DM-scout-a-1 ) ;
10437: LD_EXP 27
10441: PPUSH
10442: LD_STRING DM-scout-a-1
10444: PPUSH
10445: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10449: LD_EXP 25
10453: PPUSH
10454: LD_STRING DH-scout-a-2
10456: PPUSH
10457: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10461: LD_EXP 34
10465: PUSH
10466: LD_EXP 27
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: LD_INT 2
10477: PPUSH
10478: CALL_OW 235
// InGameOff ;
10482: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10486: LD_STRING Hill
10488: PPUSH
10489: CALL_OW 337
// allowToPatrol := true ;
10493: LD_ADDR_EXP 12
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10501: LD_INT 3150
10503: PPUSH
10504: CALL_OW 67
// InitHc ;
10508: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10512: LD_ADDR_VAR 0 1
10516: PUSH
10517: DOUBLE
10518: LD_INT 1
10520: DEC
10521: ST_TO_ADDR
10522: LD_INT 3
10524: PUSH
10525: LD_INT 3
10527: PUSH
10528: LD_INT 2
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: LD_OWVAR 67
10540: ARRAY
10541: PUSH
10542: FOR_TO
10543: IFFALSE 10802
// begin uc_side := 2 ;
10545: LD_ADDR_OWVAR 20
10549: PUSH
10550: LD_INT 2
10552: ST_TO_ADDR
// uc_nation := 2 ;
10553: LD_ADDR_OWVAR 21
10557: PUSH
10558: LD_INT 2
10560: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10561: LD_INT 0
10563: PPUSH
10564: LD_INT 1
10566: PUSH
10567: LD_INT 3
10569: PUSH
10570: LD_INT 1
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: PUSH
10578: LD_VAR 0 1
10582: PUSH
10583: LD_INT 3
10585: MOD
10586: PUSH
10587: LD_INT 1
10589: PLUS
10590: ARRAY
10591: PPUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 2
10597: PUSH
10598: LD_INT 2
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: LIST
10605: PUSH
10606: LD_OWVAR 67
10610: ARRAY
10611: PPUSH
10612: CALL_OW 380
// un := CreateHuman ;
10616: LD_ADDR_VAR 0 2
10620: PUSH
10621: CALL_OW 44
10625: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10626: LD_ADDR_EXP 37
10630: PUSH
10631: LD_EXP 37
10635: PUSH
10636: LD_VAR 0 2
10640: UNION
10641: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10642: LD_INT 2
10644: PPUSH
10645: LD_INT 2
10647: PPUSH
10648: LD_INT 13
10650: PPUSH
10651: LD_INT 2
10653: PUSH
10654: LD_INT 1
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: LD_VAR 0 1
10665: PUSH
10666: LD_INT 2
10668: MOD
10669: PUSH
10670: LD_INT 1
10672: PLUS
10673: ARRAY
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: LD_INT 27
10680: PUSH
10681: LD_INT 25
10683: PUSH
10684: LD_INT 27
10686: PUSH
10687: LD_INT 23
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: LD_OWVAR 67
10700: PUSH
10701: LD_INT 0
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 12
10711: PLUS
10712: ARRAY
10713: PPUSH
10714: LD_INT 77
10716: PPUSH
10717: CALL 345 0 7
// veh := CreateVehicle ;
10721: LD_ADDR_VAR 0 3
10725: PUSH
10726: CALL_OW 45
10730: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10731: LD_VAR 0 3
10735: PPUSH
10736: LD_INT 2
10738: PPUSH
10739: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10743: LD_VAR 0 3
10747: PPUSH
10748: LD_INT 178
10750: PPUSH
10751: LD_INT 2
10753: PPUSH
10754: LD_INT 2
10756: PPUSH
10757: LD_INT 0
10759: PPUSH
10760: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10764: LD_VAR 0 2
10768: PPUSH
10769: LD_VAR 0 3
10773: PPUSH
10774: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10778: LD_VAR 0 2
10782: PPUSH
10783: LD_INT 183
10785: PPUSH
10786: LD_INT 11
10788: PPUSH
10789: CALL_OW 111
// wait ( 0 0$2 ) ;
10793: LD_INT 70
10795: PPUSH
10796: CALL_OW 67
// end ;
10800: GO 10542
10802: POP
10803: POP
// end ;
10804: PPOPN 3
10806: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10807: LD_EXP 4
10811: PUSH
10812: LD_EXP 35
10816: PPUSH
10817: CALL_OW 302
10821: AND
10822: IFFALSE 10871
10824: GO 10826
10826: DISABLE
// begin DialogueOn ;
10827: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10831: LD_EXP 35
10835: PPUSH
10836: LD_STRING DA-lab-1
10838: PPUSH
10839: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10843: LD_EXP 35
10847: PPUSH
10848: LD_STRING DA-lab-2
10850: PPUSH
10851: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10855: LD_EXP 25
10859: PPUSH
10860: LD_STRING DH-lab-3
10862: PPUSH
10863: CALL_OW 88
// DialogueOff ;
10867: CALL_OW 7
// end ;
10871: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10872: LD_INT 17
10874: PPUSH
10875: LD_INT 2
10877: PPUSH
10878: CALL_OW 321
10882: PUSH
10883: LD_INT 2
10885: EQUAL
10886: IFFALSE 11018
10888: GO 10890
10890: DISABLE
10891: LD_INT 0
10893: PPUSH
// begin DialogueOn ;
10894: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10898: LD_EXP 35
10902: PPUSH
10903: LD_STRING DA-Cam-1
10905: PPUSH
10906: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10910: LD_EXP 35
10914: PPUSH
10915: LD_STRING DA-Cam-2
10917: PPUSH
10918: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10922: LD_EXP 35
10926: PPUSH
10927: LD_STRING DA-Cam-3
10929: PPUSH
10930: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10934: LD_EXP 25
10938: PPUSH
10939: LD_STRING DH-Cam-4
10941: PPUSH
10942: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10946: LD_EXP 30
10950: PPUSH
10951: LD_STRING DK-Cam-5
10953: PPUSH
10954: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10958: LD_EXP 30
10962: PPUSH
10963: LD_STRING DK-Cam-6
10965: PPUSH
10966: CALL_OW 88
// DialogueOff ;
10970: CALL_OW 7
// Query ( Camera ) ;
10974: LD_STRING Camera
10976: PPUSH
10977: CALL_OW 97
// hiddenCameraAllowed := true ;
10981: LD_ADDR_EXP 5
10985: PUSH
10986: LD_INT 1
10988: ST_TO_ADDR
// for i in camAreas do
10989: LD_ADDR_VAR 0 1
10993: PUSH
10994: LD_EXP 8
10998: PUSH
10999: FOR_IN
11000: IFFALSE 11016
// SetAreaMapShow ( i , 1 ) ;
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: CALL_OW 424
11014: GO 10999
11016: POP
11017: POP
// end ;
11018: PPOPN 1
11020: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11021: LD_EXP 8
11025: NOT
11026: PUSH
11027: LD_EXP 5
11031: AND
11032: IFFALSE 11130
11034: GO 11036
11036: DISABLE
11037: LD_INT 0
11039: PPUSH
// begin stop_talking := true ;
11040: LD_ADDR_OWVAR 56
11044: PUSH
11045: LD_INT 1
11047: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11048: LD_ADDR_VAR 0 1
11052: PUSH
11053: LD_INT 22
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: LD_INT 23
11075: PUSH
11076: LD_INT 2
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: PPUSH
11088: CALL_OW 69
11092: PUSH
11093: FOR_IN
11094: IFFALSE 11113
// AddExperience ( i , 2 , 450 ) ;
11096: LD_VAR 0 1
11100: PPUSH
11101: LD_INT 2
11103: PPUSH
11104: LD_INT 450
11106: PPUSH
11107: CALL_OW 492
11111: GO 11093
11113: POP
11114: POP
// stop_talking := false ;
11115: LD_ADDR_OWVAR 56
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11123: LD_STRING ACH_CAMERA
11125: PPUSH
11126: CALL_OW 543
// end ;
11130: PPOPN 1
11132: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11133: LD_EXP 9
11137: PUSH
11138: LD_EXP 11
11142: NOT
11143: AND
11144: IFFALSE 11225
11146: GO 11148
11148: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11149: LD_EXP 9
11153: PPUSH
11154: CALL_OW 250
11158: PPUSH
11159: LD_EXP 9
11163: PPUSH
11164: CALL_OW 251
11168: PPUSH
11169: LD_INT 2
11171: PPUSH
11172: LD_INT 6
11174: NEG
11175: PPUSH
11176: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11180: LD_EXP 9
11184: PPUSH
11185: CALL_OW 87
// DialogueOn ;
11189: CALL_OW 6
// if spottedByPatrol then
11193: LD_EXP 7
11197: IFFALSE 11211
// Say ( Heike , DH-Spot-f-3 ) ;
11199: LD_EXP 25
11203: PPUSH
11204: LD_STRING DH-Spot-f-3
11206: PPUSH
11207: CALL_OW 88
// dwait ( 0 0$2 ) ;
11211: LD_INT 70
11213: PPUSH
11214: CALL_OW 68
// YouLost ( Spotted ) ;
11218: LD_STRING Spotted
11220: PPUSH
11221: CALL_OW 104
// end ;
11225: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11226: LD_INT 3
11228: PUSH
11229: LD_INT 6
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PPUSH
11236: LD_INT 2
11238: PPUSH
11239: LD_EXP 47
11243: PPUSH
11244: CALL 1965 0 3
11248: IFFALSE 11281
11250: GO 11252
11252: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11253: LD_ADDR_EXP 9
11257: PUSH
11258: LD_INT 3
11260: PUSH
11261: LD_INT 6
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PPUSH
11268: LD_INT 2
11270: PPUSH
11271: LD_EXP 47
11275: PPUSH
11276: CALL 1965 0 3
11280: ST_TO_ADDR
11281: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11282: LD_EXP 9
11286: IFFALSE 11583
11288: GO 11290
11290: DISABLE
11291: LD_INT 0
11293: PPUSH
11294: PPUSH
11295: PPUSH
11296: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
11297: LD_ADDR_VAR 0 2
11301: PUSH
11302: LD_EXP 44
11306: PPUSH
11307: LD_INT 25
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 54
11319: PUSH
11320: EMPTY
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL_OW 72
11331: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
11332: LD_ADDR_VAR 0 3
11336: PUSH
11337: LD_INT 22
11339: PUSH
11340: LD_INT 6
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 30
11349: PUSH
11350: LD_INT 32
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PPUSH
11361: CALL_OW 69
11365: ST_TO_ADDR
// for i := 1 to tmp do
11366: LD_ADDR_VAR 0 1
11370: PUSH
11371: DOUBLE
11372: LD_INT 1
11374: DEC
11375: ST_TO_ADDR
11376: LD_VAR 0 2
11380: PUSH
11381: FOR_TO
11382: IFFALSE 11427
// begin ComExitBuilding ( tmp [ i ] ) ;
11384: LD_VAR 0 2
11388: PUSH
11389: LD_VAR 0 1
11393: ARRAY
11394: PPUSH
11395: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
11399: LD_VAR 0 2
11403: PUSH
11404: LD_VAR 0 1
11408: ARRAY
11409: PPUSH
11410: LD_VAR 0 3
11414: PUSH
11415: LD_VAR 0 1
11419: ARRAY
11420: PPUSH
11421: CALL_OW 180
// end ;
11425: GO 11381
11427: POP
11428: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11429: LD_ADDR_VAR 0 4
11433: PUSH
11434: LD_EXP 42
11438: PUSH
11439: LD_EXP 44
11443: PUSH
11444: LD_EXP 45
11448: UNION
11449: PPUSH
11450: LD_INT 3
11452: PUSH
11453: LD_INT 25
11455: PUSH
11456: LD_INT 1
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PPUSH
11467: CALL_OW 72
11471: UNION
11472: ST_TO_ADDR
// for i in noncombat do
11473: LD_ADDR_VAR 0 1
11477: PUSH
11478: LD_VAR 0 4
11482: PUSH
11483: FOR_IN
11484: IFFALSE 11520
// begin if IsInUnit ( i ) then
11486: LD_VAR 0 1
11490: PPUSH
11491: CALL_OW 310
11495: IFFALSE 11506
// ComExitBuilding ( i ) ;
11497: LD_VAR 0 1
11501: PPUSH
11502: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
11506: LD_VAR 0 1
11510: PPUSH
11511: LD_INT 16
11513: PPUSH
11514: CALL_OW 173
// end ;
11518: GO 11483
11520: POP
11521: POP
// if not allowHeikeAttack then
11522: LD_EXP 11
11526: NOT
11527: IFFALSE 11531
// exit ;
11529: GO 11583
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11531: LD_EXP 40
11535: PPUSH
11536: LD_STRING D9a-Kur-1
11538: PPUSH
11539: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11543: LD_EXP 43
11547: PPUSH
11548: LD_STRING D9a-Bur-1
11550: PPUSH
11551: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11555: LD_EXP 40
11559: PPUSH
11560: LD_STRING D9a-Kur-2
11562: PPUSH
11563: CALL_OW 94
// omicronFall := true ;
11567: LD_ADDR_EXP 13
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
// retreatFromOmicron := true ;
11575: LD_ADDR_EXP 20
11579: PUSH
11580: LD_INT 1
11582: ST_TO_ADDR
// end ;
11583: PPOPN 4
11585: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11586: LD_INT 16
11588: PPUSH
11589: LD_INT 3
11591: PUSH
11592: LD_INT 22
11594: PUSH
11595: LD_INT 2
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 23
11608: PUSH
11609: LD_INT 3
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PPUSH
11620: CALL_OW 70
11624: IFFALSE 11707
11626: GO 11628
11628: DISABLE
11629: LD_INT 0
11631: PPUSH
// begin enable ;
11632: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11633: LD_ADDR_VAR 0 1
11637: PUSH
11638: LD_INT 16
11640: PPUSH
11641: LD_INT 3
11643: PUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 2
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 23
11660: PUSH
11661: LD_INT 3
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 70
11676: PUSH
11677: FOR_IN
11678: IFFALSE 11705
// begin escapeCounter := escapeCounter + 1 ;
11680: LD_ADDR_EXP 19
11684: PUSH
11685: LD_EXP 19
11689: PUSH
11690: LD_INT 1
11692: PLUS
11693: ST_TO_ADDR
// RemoveUnit ( i ) ;
11694: LD_VAR 0 1
11698: PPUSH
11699: CALL_OW 64
// end ;
11703: GO 11677
11705: POP
11706: POP
// end ;
11707: PPOPN 1
11709: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11710: LD_OWVAR 1
11714: PUSH
11715: LD_INT 13650
11717: PUSH
11718: LD_INT 0
11720: PPUSH
11721: LD_INT 3150
11723: PPUSH
11724: CALL_OW 12
11728: PLUS
11729: GREATEREQUAL
11730: IFFALSE 11739
11732: GO 11734
11734: DISABLE
// SmallAmericanReinforcements ;
11735: CALL 7249 0 0
11739: END
// every 0 0$1 trigger tick >= 9 9$15 do
11740: LD_OWVAR 1
11744: PUSH
11745: LD_INT 19425
11747: GREATEREQUAL
11748: IFFALSE 11813
11750: GO 11752
11752: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11753: LD_EXP 48
11757: PPUSH
11758: LD_INT 21
11760: PUSH
11761: LD_INT 2
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PPUSH
11768: CALL_OW 72
11772: PPUSH
11773: LD_INT 62
11775: PPUSH
11776: LD_INT 22
11778: PPUSH
11779: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11783: LD_EXP 49
11787: PPUSH
11788: LD_INT 69
11790: PPUSH
11791: LD_INT 27
11793: PPUSH
11794: CALL_OW 111
// wait ( 1 1$00 ) ;
11798: LD_INT 2100
11800: PPUSH
11801: CALL_OW 67
// startAttackOnOmicron := true ;
11805: LD_ADDR_EXP 6
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// end ;
11813: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11814: LD_EXP 22
11818: PUSH
11819: LD_INT 0
11821: EQUAL
11822: IFFALSE 13695
11824: GO 11826
11826: DISABLE
11827: LD_INT 0
11829: PPUSH
11830: PPUSH
11831: PPUSH
11832: PPUSH
11833: PPUSH
11834: PPUSH
11835: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11836: LD_INT 5
11838: PPUSH
11839: LD_INT 2
11841: PPUSH
11842: CALL_OW 343
// PrepareOmarForces ;
11846: CALL 2535 0 0
// wait ( 0 0$03 ) ;
11850: LD_INT 105
11852: PPUSH
11853: CALL_OW 67
// allowHeikeAttack := true ;
11857: LD_ADDR_EXP 11
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// activeGrishkoAI := false ;
11865: LD_ADDR_EXP 10
11869: PUSH
11870: LD_INT 0
11872: ST_TO_ADDR
// if not hillBase then
11873: LD_EXP 15
11877: NOT
11878: IFFALSE 11887
// ChangeMissionObjectives ( HillDone ) ;
11880: LD_STRING HillDone
11882: PPUSH
11883: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11887: LD_EXP 33
11891: PPUSH
11892: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11896: LD_ADDR_VAR 0 1
11900: PUSH
11901: LD_INT 22
11903: PUSH
11904: LD_INT 2
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: LD_INT 21
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 69
11929: PUSH
11930: FOR_IN
11931: IFFALSE 11955
// if HasTask ( i ) then
11933: LD_VAR 0 1
11937: PPUSH
11938: CALL_OW 314
11942: IFFALSE 11953
// ComHold ( i ) ;
11944: LD_VAR 0 1
11948: PPUSH
11949: CALL_OW 140
11953: GO 11930
11955: POP
11956: POP
// DialogueOn ;
11957: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11961: LD_EXP 33
11965: PPUSH
11966: LD_STRING DO-assault-1
11968: PPUSH
11969: CALL_OW 94
// DialogueOff ;
11973: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11977: LD_ADDR_VAR 0 1
11981: PUSH
11982: LD_EXP 46
11986: PPUSH
11987: LD_INT 3
11989: PUSH
11990: LD_INT 54
11992: PUSH
11993: EMPTY
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 72
12004: PUSH
12005: FOR_IN
12006: IFFALSE 12025
// ComMoveXY ( i , 226 , 114 ) ;
12008: LD_VAR 0 1
12012: PPUSH
12013: LD_INT 226
12015: PPUSH
12016: LD_INT 114
12018: PPUSH
12019: CALL_OW 111
12023: GO 12005
12025: POP
12026: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12027: LD_EXP 41
12031: PPUSH
12032: LD_INT 22
12034: PUSH
12035: LD_INT 6
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 30
12044: PUSH
12045: LD_INT 4
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 69
12060: PPUSH
12061: LD_EXP 41
12065: PPUSH
12066: CALL_OW 74
12070: PPUSH
12071: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12075: LD_STRING Attack
12077: PPUSH
12078: CALL_OW 337
// music_class := music_combat ;
12082: LD_ADDR_OWVAR 72
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// music_nat := 4 ;
12090: LD_ADDR_OWVAR 71
12094: PUSH
12095: LD_INT 4
12097: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12098: LD_INT 5
12100: PPUSH
12101: LD_EXP 41
12105: PPUSH
12106: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12110: LD_INT 6
12112: PPUSH
12113: LD_EXP 38
12117: PPUSH
12118: LD_INT 25
12120: PUSH
12121: LD_INT 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PPUSH
12128: CALL_OW 72
12132: PUSH
12133: LD_INT 4
12135: ARRAY
12136: PPUSH
12137: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12141: LD_ADDR_VAR 0 1
12145: PUSH
12146: LD_EXP 38
12150: PPUSH
12151: LD_INT 3
12153: PUSH
12154: LD_INT 25
12156: PUSH
12157: LD_INT 4
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 72
12172: PUSH
12173: FOR_IN
12174: IFFALSE 12193
// ComAgressiveMove ( i , 221 , 110 ) ;
12176: LD_VAR 0 1
12180: PPUSH
12181: LD_INT 221
12183: PPUSH
12184: LD_INT 110
12186: PPUSH
12187: CALL_OW 114
12191: GO 12173
12193: POP
12194: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12195: LD_EXP 38
12199: PPUSH
12200: LD_INT 25
12202: PUSH
12203: LD_INT 4
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 72
12214: PPUSH
12215: LD_INT 214
12217: PPUSH
12218: LD_INT 124
12220: PPUSH
12221: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12225: LD_EXP 38
12229: PPUSH
12230: LD_INT 25
12232: PUSH
12233: LD_INT 1
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PPUSH
12240: CALL_OW 72
12244: PUSH
12245: LD_INT 4
12247: ARRAY
12248: PPUSH
12249: LD_INT 214
12251: PPUSH
12252: LD_INT 114
12254: PPUSH
12255: LD_INT 0
12257: PPUSH
12258: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12262: LD_EXP 41
12266: PPUSH
12267: LD_STRING D9-Gri-1
12269: PPUSH
12270: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12274: LD_EXP 40
12278: PPUSH
12279: LD_STRING D9-Kur-1
12281: PPUSH
12282: CALL_OW 94
// wait ( 0 0$1 ) ;
12286: LD_INT 35
12288: PPUSH
12289: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12293: LD_EXP 33
12297: PPUSH
12298: LD_INT 233
12300: PPUSH
12301: LD_INT 130
12303: PPUSH
12304: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12308: LD_EXP 41
12312: PPUSH
12313: LD_STRING D9-Gri-2
12315: PPUSH
12316: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12320: LD_EXP 40
12324: PPUSH
12325: LD_STRING D9-Kur-2
12327: PPUSH
12328: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12332: LD_EXP 41
12336: PPUSH
12337: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12341: LD_EXP 41
12345: PPUSH
12346: LD_INT 211
12348: PPUSH
12349: LD_INT 104
12351: PPUSH
12352: CALL_OW 171
// AddComHold ( Grishko ) ;
12356: LD_EXP 41
12360: PPUSH
12361: CALL_OW 200
// repeat wait ( 3 ) ;
12365: LD_INT 3
12367: PPUSH
12368: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12372: LD_EXP 41
12376: PPUSH
12377: CALL_OW 310
12381: NOT
12382: IFFALSE 12365
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12384: LD_EXP 38
12388: PPUSH
12389: LD_INT 34
12391: PUSH
12392: LD_INT 26
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PPUSH
12399: CALL_OW 72
12403: PPUSH
12404: LD_EXP 41
12408: PPUSH
12409: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12413: LD_EXP 38
12417: PPUSH
12418: LD_INT 34
12420: PUSH
12421: LD_INT 26
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PPUSH
12428: CALL_OW 72
12432: PPUSH
12433: LD_INT 215
12435: PPUSH
12436: LD_INT 106
12438: PPUSH
12439: CALL_OW 174
// repeat wait ( 3 ) ;
12443: LD_INT 3
12445: PPUSH
12446: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12450: LD_EXP 41
12454: PPUSH
12455: CALL_OW 256
12459: PUSH
12460: LD_INT 1000
12462: LESS
12463: IFFALSE 12443
// NormalAttack ( 5 , Grishko ) ;
12465: LD_INT 5
12467: PPUSH
12468: LD_EXP 41
12472: PPUSH
12473: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12477: LD_INT 6
12479: PPUSH
12480: LD_EXP 38
12484: PPUSH
12485: LD_INT 25
12487: PUSH
12488: LD_INT 1
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PPUSH
12495: CALL_OW 72
12499: PUSH
12500: LD_INT 4
12502: ARRAY
12503: PPUSH
12504: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12508: LD_EXP 41
12512: PPUSH
12513: LD_STRING D9-Gri-3
12515: PPUSH
12516: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12520: LD_EXP 40
12524: PPUSH
12525: LD_STRING D9-Kur-3
12527: PPUSH
12528: CALL_OW 94
// music_class := music_auto ;
12532: LD_ADDR_OWVAR 72
12536: PUSH
12537: LD_INT 0
12539: ST_TO_ADDR
// music_nat := music_auto ;
12540: LD_ADDR_OWVAR 71
12544: PUSH
12545: LD_INT 0
12547: ST_TO_ADDR
// for i in omarSquad do
12548: LD_ADDR_VAR 0 1
12552: PUSH
12553: LD_EXP 38
12557: PUSH
12558: FOR_IN
12559: IFFALSE 12701
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12561: LD_VAR 0 1
12565: PPUSH
12566: CALL_OW 247
12570: PUSH
12571: LD_INT 2
12573: EQUAL
12574: PUSH
12575: LD_VAR 0 1
12579: PPUSH
12580: CALL_OW 256
12584: PUSH
12585: LD_INT 1000
12587: LESS
12588: AND
12589: IFFALSE 12655
// begin driver := IsDrivenBy ( i ) ;
12591: LD_ADDR_VAR 0 2
12595: PUSH
12596: LD_VAR 0 1
12600: PPUSH
12601: CALL_OW 311
12605: ST_TO_ADDR
// veh := i ;
12606: LD_ADDR_VAR 0 3
12610: PUSH
12611: LD_VAR 0 1
12615: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12616: LD_VAR 0 2
12620: PPUSH
12621: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12625: LD_VAR 0 2
12629: PPUSH
12630: LD_VAR 0 3
12634: PPUSH
12635: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12639: LD_VAR 0 2
12643: PPUSH
12644: LD_VAR 0 3
12648: PPUSH
12649: CALL_OW 180
// end else
12653: GO 12699
// if GetLives ( i ) < 500 then
12655: LD_VAR 0 1
12659: PPUSH
12660: CALL_OW 256
12664: PUSH
12665: LD_INT 500
12667: LESS
12668: IFFALSE 12699
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12670: LD_EXP 38
12674: PPUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 4
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PPUSH
12685: CALL_OW 72
12689: PPUSH
12690: LD_VAR 0 1
12694: PPUSH
12695: CALL_OW 188
// end ; end ;
12699: GO 12558
12701: POP
12702: POP
// repeat wait ( 0 0$1 ) ;
12703: LD_INT 35
12705: PPUSH
12706: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12710: LD_EXP 38
12714: PPUSH
12715: LD_INT 3
12717: PUSH
12718: LD_INT 24
12720: PUSH
12721: LD_INT 1000
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 21
12734: PUSH
12735: LD_INT 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 72
12750: NOT
12751: PUSH
12752: LD_EXP 38
12756: PPUSH
12757: LD_INT 3
12759: PUSH
12760: LD_INT 24
12762: PUSH
12763: LD_INT 250
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 72
12778: NOT
12779: AND
12780: IFFALSE 12703
// wait ( 0 0$2 ) ;
12782: LD_INT 70
12784: PPUSH
12785: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12789: LD_ADDR_VAR 0 5
12793: PUSH
12794: LD_EXP 38
12798: PPUSH
12799: LD_INT 58
12801: PUSH
12802: EMPTY
12803: LIST
12804: PUSH
12805: LD_INT 21
12807: PUSH
12808: LD_INT 2
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PPUSH
12819: CALL_OW 72
12823: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12824: LD_ADDR_VAR 0 6
12828: PUSH
12829: LD_EXP 38
12833: PPUSH
12834: LD_INT 25
12836: PUSH
12837: LD_INT 3
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 3
12846: PUSH
12847: LD_INT 55
12849: PUSH
12850: EMPTY
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PPUSH
12861: CALL_OW 72
12865: ST_TO_ADDR
// for i := 1 to tmp do
12866: LD_ADDR_VAR 0 1
12870: PUSH
12871: DOUBLE
12872: LD_INT 1
12874: DEC
12875: ST_TO_ADDR
12876: LD_VAR 0 5
12880: PUSH
12881: FOR_TO
12882: IFFALSE 12912
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12884: LD_VAR 0 6
12888: PUSH
12889: LD_VAR 0 1
12893: ARRAY
12894: PPUSH
12895: LD_VAR 0 5
12899: PUSH
12900: LD_VAR 0 1
12904: ARRAY
12905: PPUSH
12906: CALL_OW 120
12910: GO 12881
12912: POP
12913: POP
// wait ( 0 0$5 ) ;
12914: LD_INT 175
12916: PPUSH
12917: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12921: LD_EXP 38
12925: PPUSH
12926: LD_INT 199
12928: PPUSH
12929: LD_INT 141
12931: PPUSH
12932: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12936: LD_EXP 33
12940: PPUSH
12941: LD_INT 190
12943: PPUSH
12944: LD_INT 143
12946: PPUSH
12947: CALL_OW 114
// AddComHold ( Omar ) ;
12951: LD_EXP 33
12955: PPUSH
12956: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12960: LD_EXP 38
12964: PPUSH
12965: LD_INT 2
12967: PUSH
12968: LD_INT 25
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 25
12980: PUSH
12981: LD_INT 4
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: LIST
12992: PPUSH
12993: CALL_OW 72
12997: PPUSH
12998: LD_INT 161
13000: PPUSH
13001: LD_INT 130
13003: PPUSH
13004: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13008: LD_EXP 38
13012: PPUSH
13013: LD_INT 25
13015: PUSH
13016: LD_INT 1
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PPUSH
13023: CALL_OW 72
13027: PPUSH
13028: LD_INT 163
13030: PPUSH
13031: LD_INT 122
13033: PPUSH
13034: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13038: LD_EXP 38
13042: PPUSH
13043: LD_INT 25
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PPUSH
13053: CALL_OW 72
13057: PUSH
13058: LD_INT 4
13060: ARRAY
13061: PPUSH
13062: LD_INT 165
13064: PPUSH
13065: LD_INT 118
13067: PPUSH
13068: LD_INT 0
13070: PPUSH
13071: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13075: LD_EXP 38
13079: PPUSH
13080: LD_INT 25
13082: PUSH
13083: LD_INT 1
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PPUSH
13090: CALL_OW 72
13094: PUSH
13095: LD_INT 4
13097: ARRAY
13098: PPUSH
13099: LD_INT 159
13101: PPUSH
13102: LD_INT 116
13104: PPUSH
13105: LD_INT 0
13107: PPUSH
13108: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13112: LD_EXP 38
13116: PPUSH
13117: LD_INT 21
13119: PUSH
13120: LD_INT 2
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PPUSH
13127: CALL_OW 72
13131: PPUSH
13132: LD_INT 169
13134: PPUSH
13135: LD_INT 114
13137: PPUSH
13138: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13142: LD_INT 35
13144: PPUSH
13145: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13149: LD_ADDR_VAR 0 5
13153: PUSH
13154: LD_EXP 38
13158: PPUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PPUSH
13169: CALL_OW 72
13173: ST_TO_ADDR
// for i in tmp do
13174: LD_ADDR_VAR 0 1
13178: PUSH
13179: LD_VAR 0 5
13183: PUSH
13184: FOR_IN
13185: IFFALSE 13282
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13187: LD_VAR 0 1
13191: PPUSH
13192: CALL_OW 256
13196: PUSH
13197: LD_INT 600
13199: LESS
13200: PUSH
13201: LD_VAR 0 1
13205: PPUSH
13206: LD_INT 161
13208: PPUSH
13209: LD_INT 130
13211: PPUSH
13212: CALL_OW 297
13216: PUSH
13217: LD_INT 6
13219: GREATER
13220: AND
13221: IFFALSE 13238
// ComMoveXY ( i , 161 , 130 ) ;
13223: LD_VAR 0 1
13227: PPUSH
13228: LD_INT 161
13230: PPUSH
13231: LD_INT 130
13233: PPUSH
13234: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13238: LD_VAR 0 1
13242: PPUSH
13243: CALL_OW 256
13247: PUSH
13248: LD_INT 1000
13250: EQUAL
13251: PUSH
13252: LD_VAR 0 1
13256: PPUSH
13257: CALL_OW 314
13261: NOT
13262: AND
13263: IFFALSE 13280
// ComAgressiveMove ( i , 160 , 109 ) ;
13265: LD_VAR 0 1
13269: PPUSH
13270: LD_INT 160
13272: PPUSH
13273: LD_INT 109
13275: PPUSH
13276: CALL_OW 114
// end ;
13280: GO 13184
13282: POP
13283: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13284: LD_ADDR_VAR 0 5
13288: PUSH
13289: LD_EXP 38
13293: PPUSH
13294: LD_INT 21
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 72
13308: ST_TO_ADDR
// for i in tmp do
13309: LD_ADDR_VAR 0 1
13313: PUSH
13314: LD_VAR 0 5
13318: PUSH
13319: FOR_IN
13320: IFFALSE 13586
// begin tmp2 := IsDrivenBy ( i ) ;
13322: LD_ADDR_VAR 0 6
13326: PUSH
13327: LD_VAR 0 1
13331: PPUSH
13332: CALL_OW 311
13336: ST_TO_ADDR
// if not tmp2 then
13337: LD_VAR 0 6
13341: NOT
13342: IFFALSE 13346
// continue ;
13344: GO 13319
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL_OW 256
13355: PUSH
13356: LD_INT 600
13358: GREATEREQUAL
13359: PUSH
13360: LD_VAR 0 1
13364: PPUSH
13365: CALL_OW 110
13369: PUSH
13370: LD_INT 1
13372: EQUAL
13373: AND
13374: IFFALSE 13388
// SetTag ( i , 0 ) ;
13376: LD_VAR 0 1
13380: PPUSH
13381: LD_INT 0
13383: PPUSH
13384: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 256
13397: PUSH
13398: LD_INT 600
13400: GREATEREQUAL
13401: PUSH
13402: LD_VAR 0 1
13406: PPUSH
13407: CALL_OW 110
13411: NOT
13412: AND
13413: IFFALSE 13439
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13415: LD_VAR 0 1
13419: PPUSH
13420: LD_VAR 0 7
13424: PPUSH
13425: LD_VAR 0 1
13429: PPUSH
13430: CALL_OW 74
13434: PPUSH
13435: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13439: LD_VAR 0 1
13443: PPUSH
13444: CALL_OW 256
13448: PUSH
13449: LD_INT 600
13451: LESS
13452: PUSH
13453: LD_VAR 0 1
13457: PPUSH
13458: CALL_OW 110
13462: NOT
13463: AND
13464: IFFALSE 13493
// begin SetTag ( i , 1 ) ;
13466: LD_VAR 0 1
13470: PPUSH
13471: LD_INT 1
13473: PPUSH
13474: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13478: LD_VAR 0 1
13482: PPUSH
13483: LD_INT 202
13485: PPUSH
13486: LD_INT 150
13488: PPUSH
13489: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13493: LD_VAR 0 1
13497: PPUSH
13498: CALL_OW 110
13502: PUSH
13503: LD_INT 1
13505: EQUAL
13506: PUSH
13507: LD_VAR 0 1
13511: PPUSH
13512: LD_INT 202
13514: PPUSH
13515: LD_INT 150
13517: PPUSH
13518: CALL_OW 297
13522: PUSH
13523: LD_INT 6
13525: LESS
13526: AND
13527: PUSH
13528: LD_VAR 0 6
13532: AND
13533: IFFALSE 13584
// begin ComExitVehicle ( tmp2 ) ;
13535: LD_VAR 0 6
13539: PPUSH
13540: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13544: LD_VAR 0 6
13548: PPUSH
13549: LD_VAR 0 1
13553: PPUSH
13554: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13558: LD_VAR 0 6
13562: PPUSH
13563: LD_INT 700
13565: PPUSH
13566: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13570: LD_VAR 0 6
13574: PPUSH
13575: LD_VAR 0 1
13579: PPUSH
13580: CALL_OW 180
// end ; end ;
13584: GO 13319
13586: POP
13587: POP
// until kirovDestroyed ;
13588: LD_EXP 16
13592: IFFALSE 13142
// repeat wait ( 0 0$1 ) ;
13594: LD_INT 35
13596: PPUSH
13597: CALL_OW 67
// for i in omarSquad union Omar do
13601: LD_ADDR_VAR 0 1
13605: PUSH
13606: LD_EXP 38
13610: PUSH
13611: LD_EXP 33
13615: UNION
13616: PUSH
13617: FOR_IN
13618: IFFALSE 13662
// if IsInArea ( i , southRoadArea ) then
13620: LD_VAR 0 1
13624: PPUSH
13625: LD_INT 15
13627: PPUSH
13628: CALL_OW 308
13632: IFFALSE 13645
// RemoveUnit ( i ) else
13634: LD_VAR 0 1
13638: PPUSH
13639: CALL_OW 64
13643: GO 13660
// ComMoveXY ( i , 208 , 162 ) ;
13645: LD_VAR 0 1
13649: PPUSH
13650: LD_INT 208
13652: PPUSH
13653: LD_INT 162
13655: PPUSH
13656: CALL_OW 111
13660: GO 13617
13662: POP
13663: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13664: LD_INT 22
13666: PUSH
13667: LD_INT 5
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 21
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PPUSH
13688: CALL_OW 69
13692: NOT
13693: IFFALSE 13594
// end ;
13695: PPOPN 7
13697: END
// every 0 0$1 trigger IsDead ( kirov ) do
13698: LD_INT 71
13700: PPUSH
13701: CALL_OW 301
13705: IFFALSE 13722
13707: GO 13709
13709: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13710: LD_EXP 25
13714: PPUSH
13715: LD_STRING DH-1-Kirov
13717: PPUSH
13718: CALL_OW 88
13722: END
// every 0 0$1 trigger See ( 2 , beria ) do
13723: LD_INT 2
13725: PPUSH
13726: LD_INT 106
13728: PPUSH
13729: CALL_OW 292
13733: IFFALSE 13750
13735: GO 13737
13737: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13738: LD_EXP 25
13742: PPUSH
13743: LD_STRING DH-1-Beria
13745: PPUSH
13746: CALL_OW 88
13750: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13751: LD_INT 2
13753: PPUSH
13754: LD_INT 112
13756: PPUSH
13757: CALL_OW 292
13761: IFFALSE 14006
13763: GO 13765
13765: DISABLE
// begin DialogueOn ;
13766: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13770: LD_INT 112
13772: PPUSH
13773: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13777: LD_EXP 25
13781: PPUSH
13782: LD_STRING DH-1-Kagan
13784: PPUSH
13785: CALL_OW 88
// if Kamil then
13789: LD_EXP 29
13793: IFFALSE 13831
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13795: LD_EXP 29
13799: PPUSH
13800: LD_STRING DKam-Kagan-2
13802: PPUSH
13803: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13807: LD_EXP 26
13811: PPUSH
13812: LD_STRING DG-Kagan-3
13814: PPUSH
13815: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13819: LD_EXP 26
13823: PPUSH
13824: LD_STRING DG-Kagan-4
13826: PPUSH
13827: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13831: LD_STRING KaganBase
13833: PPUSH
13834: CALL_OW 97
13838: PUSH
13839: LD_INT 1
13841: DOUBLE
13842: EQUAL
13843: IFTRUE 13847
13845: GO 13942
13847: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13848: LD_EXP 25
13852: PPUSH
13853: LD_STRING DH-Kagan-5
13855: PPUSH
13856: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13860: LD_EXP 25
13864: PPUSH
13865: LD_STRING DH-Kagan-6
13867: PPUSH
13868: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13872: LD_EXP 36
13876: PPUSH
13877: LD_STRING DShar-Kagan-7
13879: PPUSH
13880: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13884: LD_EXP 25
13888: PPUSH
13889: LD_STRING DH-Kagan-8
13891: PPUSH
13892: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13896: LD_EXP 25
13900: PPUSH
13901: LD_STRING DH-Kagan-9
13903: PPUSH
13904: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13908: LD_EXP 36
13912: PPUSH
13913: LD_STRING DShar-Kagan-10
13915: PPUSH
13916: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13920: LD_EXP 25
13924: PPUSH
13925: LD_STRING DH-Kagan-11
13927: PPUSH
13928: CALL_OW 88
// kaganCaptured := true ;
13932: LD_ADDR_EXP 24
13936: PUSH
13937: LD_INT 1
13939: ST_TO_ADDR
// end ; 2 :
13940: GO 14002
13942: LD_INT 2
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13950
13948: GO 14001
13950: POP
// begin Say ( Heike , DH-Kagan-a-5 ) ;
13951: LD_EXP 25
13955: PPUSH
13956: LD_STRING DH-Kagan-a-5
13958: PPUSH
13959: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13963: LD_EXP 25
13967: PPUSH
13968: LD_STRING DH-Kagan-a-6
13970: PPUSH
13971: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13975: LD_EXP 25
13979: PPUSH
13980: LD_STRING DH-Kagan-a-7
13982: PPUSH
13983: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13987: LD_EXP 26
13991: PPUSH
13992: LD_STRING DG-Kagan-a-8
13994: PPUSH
13995: CALL_OW 88
// end ; end ;
13999: GO 14002
14001: POP
// DialogueOff ;
14002: CALL_OW 7
// end ;
14006: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14007: LD_EXP 18
14011: PUSH
14012: LD_INT 112
14014: PPUSH
14015: CALL_OW 255
14019: PUSH
14020: LD_INT 2
14022: EQUAL
14023: OR
14024: IFFALSE 14036
14026: GO 14028
14028: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14029: LD_STRING KaganDone
14031: PPUSH
14032: CALL_OW 337
14036: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14037: LD_EXP 6
14041: PUSH
14042: LD_EXP 48
14046: PPUSH
14047: LD_INT 95
14049: PUSH
14050: LD_INT 19
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 72
14061: AND
14062: IFFALSE 14139
14064: GO 14066
14066: DISABLE
// begin DialogueOn ;
14067: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14071: LD_INT 63
14073: PPUSH
14074: LD_INT 32
14076: PPUSH
14077: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14081: LD_INT 63
14083: PPUSH
14084: LD_INT 32
14086: PPUSH
14087: LD_INT 2
14089: PPUSH
14090: LD_INT 12
14092: NEG
14093: PPUSH
14094: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14098: LD_EXP 25
14102: PPUSH
14103: LD_STRING DH-Omicron-1
14105: PPUSH
14106: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14110: LD_EXP 27
14114: PPUSH
14115: LD_STRING DM-Omicron-2
14117: PPUSH
14118: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14122: LD_INT 63
14124: PPUSH
14125: LD_INT 32
14127: PPUSH
14128: LD_INT 2
14130: PPUSH
14131: CALL_OW 331
// DialogueOff ;
14135: CALL_OW 7
// end ;
14139: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , tmp2 , q , settings ;
14140: LD_INT 2
14142: PPUSH
14143: LD_EXP 50
14147: PPUSH
14148: CALL_OW 292
14152: PUSH
14153: LD_EXP 50
14157: PPUSH
14158: CALL_OW 302
14162: AND
14163: PUSH
14164: LD_EXP 25
14168: PPUSH
14169: CALL_OW 302
14173: AND
14174: PUSH
14175: LD_EXP 35
14179: PPUSH
14180: CALL_OW 302
14184: AND
14185: PUSH
14186: LD_INT 2
14188: PPUSH
14189: CALL_OW 463
14193: NOT
14194: AND
14195: IFFALSE 14771
14197: GO 14199
14199: DISABLE
14200: LD_INT 0
14202: PPUSH
14203: PPUSH
14204: PPUSH
14205: PPUSH
14206: PPUSH
// begin DialogueOn ;
14207: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14211: LD_INT 111
14213: PPUSH
14214: LD_INT 90
14216: PPUSH
14217: LD_INT 2
14219: PPUSH
14220: LD_INT 6
14222: NEG
14223: PPUSH
14224: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14228: LD_INT 111
14230: PPUSH
14231: LD_INT 90
14233: PPUSH
14234: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14238: LD_EXP 35
14242: PPUSH
14243: LD_STRING DA-Cap-1
14245: PPUSH
14246: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14250: LD_EXP 25
14254: PPUSH
14255: LD_STRING DH-Cap-2
14257: PPUSH
14258: CALL_OW 88
// DialogueOff ;
14262: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14266: LD_INT 35
14268: PPUSH
14269: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) ;
14273: LD_EXP 17
14277: PUSH
14278: LD_INT 106
14280: PPUSH
14281: CALL_OW 255
14285: PUSH
14286: LD_INT 2
14288: EQUAL
14289: OR
14290: PUSH
14291: LD_EXP 50
14295: PPUSH
14296: CALL_OW 302
14300: AND
14301: PUSH
14302: LD_EXP 35
14306: PPUSH
14307: CALL_OW 302
14311: AND
14312: IFFALSE 14266
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14314: LD_ADDR_VAR 0 2
14318: PUSH
14319: LD_EXP 37
14323: PUSH
14324: LD_EXP 28
14328: PUSH
14329: LD_EXP 29
14333: PUSH
14334: LD_EXP 31
14338: PUSH
14339: LD_EXP 30
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: UNION
14350: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_VAR 0 2
14360: PPUSH
14361: LD_INT 50
14363: PUSH
14364: EMPTY
14365: LIST
14366: PPUSH
14367: CALL_OW 72
14371: ST_TO_ADDR
// if tmp < 2 then
14372: LD_VAR 0 2
14376: PUSH
14377: LD_INT 2
14379: LESS
14380: IFFALSE 14392
// q := 2 else
14382: LD_ADDR_VAR 0 4
14386: PUSH
14387: LD_INT 2
14389: ST_TO_ADDR
14390: GO 14405
// q := Query ( LabCap ) ;
14392: LD_ADDR_VAR 0 4
14396: PUSH
14397: LD_STRING LabCap
14399: PPUSH
14400: CALL_OW 97
14404: ST_TO_ADDR
// case q of 1 :
14405: LD_VAR 0 4
14409: PUSH
14410: LD_INT 1
14412: DOUBLE
14413: EQUAL
14414: IFTRUE 14418
14416: GO 14735
14418: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14419: LD_INT 2
14421: PPUSH
14422: LD_EXP 50
14426: PPUSH
14427: CALL_OW 471
// labCaptured := true ;
14431: LD_ADDR_EXP 21
14435: PUSH
14436: LD_INT 1
14438: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14439: LD_EXP 25
14443: PPUSH
14444: LD_STRING DH-Cap-a-1
14446: PPUSH
14447: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14451: LD_EXP 35
14455: PPUSH
14456: LD_STRING DA-Cap-a-2
14458: PPUSH
14459: CALL_OW 88
// settings := [ Heike , sel_changeable ] ^ tmp ^ [ sel_not_hired , sel_not_changeable , Aviradze ] ;
14463: LD_ADDR_VAR 0 5
14467: PUSH
14468: LD_EXP 25
14472: PUSH
14473: LD_INT -3
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: LD_VAR 0 2
14484: ADD
14485: PUSH
14486: LD_INT -2
14488: PUSH
14489: LD_INT -4
14491: PUSH
14492: LD_EXP 35
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: ADD
14502: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14503: LD_ADDR_VAR 0 3
14507: PUSH
14508: LD_STRING Select two characters to go with Aviradze
14510: PPUSH
14511: LD_INT 2
14513: PPUSH
14514: LD_INT 2
14516: PPUSH
14517: LD_VAR 0 5
14521: PPUSH
14522: EMPTY
14523: PPUSH
14524: CALL_OW 42
14528: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14529: LD_EXP 50
14533: PPUSH
14534: LD_INT 8
14536: PPUSH
14537: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14541: LD_EXP 35
14545: PPUSH
14546: LD_INT 8
14548: PPUSH
14549: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14553: LD_ADDR_EXP 39
14557: PUSH
14558: LD_EXP 35
14562: PUSH
14563: EMPTY
14564: LIST
14565: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14566: LD_EXP 35
14570: PPUSH
14571: CALL_OW 310
14575: IFFALSE 14586
// ComExit ( Aviradze ) ;
14577: LD_EXP 35
14581: PPUSH
14582: CALL 783 0 1
// wait ( 3 ) ;
14586: LD_INT 3
14588: PPUSH
14589: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14593: LD_EXP 35
14597: PPUSH
14598: LD_EXP 50
14602: PPUSH
14603: CALL_OW 120
// for i := 1 to 2 do
14607: LD_ADDR_VAR 0 1
14611: PUSH
14612: DOUBLE
14613: LD_INT 1
14615: DEC
14616: ST_TO_ADDR
14617: LD_INT 2
14619: PUSH
14620: FOR_TO
14621: IFFALSE 14724
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14623: LD_ADDR_EXP 39
14627: PUSH
14628: LD_EXP 39
14632: PUSH
14633: LD_VAR 0 3
14637: PUSH
14638: LD_VAR 0 1
14642: ARRAY
14643: UNION
14644: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14645: LD_VAR 0 3
14649: PUSH
14650: LD_VAR 0 1
14654: ARRAY
14655: PPUSH
14656: LD_INT 8
14658: PPUSH
14659: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14663: LD_VAR 0 3
14667: PUSH
14668: LD_VAR 0 1
14672: ARRAY
14673: PPUSH
14674: CALL_OW 310
14678: IFFALSE 14695
// ComExit ( tmp2 [ i ] ) ;
14680: LD_VAR 0 3
14684: PUSH
14685: LD_VAR 0 1
14689: ARRAY
14690: PPUSH
14691: CALL 783 0 1
// wait ( 3 ) ;
14695: LD_INT 3
14697: PPUSH
14698: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14702: LD_VAR 0 3
14706: PUSH
14707: LD_VAR 0 1
14711: ARRAY
14712: PPUSH
14713: LD_EXP 50
14717: PPUSH
14718: CALL_OW 120
// end ;
14722: GO 14620
14724: POP
14725: POP
// SetAchievement ( ACH_LAB ) ;
14726: LD_STRING ACH_LAB
14728: PPUSH
14729: CALL_OW 543
// end ; 2 :
14733: GO 14771
14735: LD_INT 2
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14770
14743: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14744: LD_EXP 25
14748: PPUSH
14749: LD_STRING DH-Cap-b-1
14751: PPUSH
14752: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14756: LD_EXP 35
14760: PPUSH
14761: LD_STRING DA-Cap-b-2
14763: PPUSH
14764: CALL_OW 88
// end ; end ;
14768: GO 14771
14770: POP
// end ;
14771: PPOPN 5
14773: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14774: LD_INT 10
14776: PPUSH
14777: LD_INT 22
14779: PUSH
14780: LD_INT 2
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 30
14789: PUSH
14790: LD_INT 31
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 70
14805: PUSH
14806: LD_INT 2
14808: GREATEREQUAL
14809: IFFALSE 14821
14811: GO 14813
14813: DISABLE
// SetAchievement ( ACH_KING ) ;
14814: LD_STRING ACH_KING
14816: PPUSH
14817: CALL_OW 543
14821: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14822: LD_EXP 11
14826: NOT
14827: PUSH
14828: LD_INT 10
14830: PPUSH
14831: LD_INT 22
14833: PUSH
14834: LD_INT 2
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 2
14843: PUSH
14844: LD_INT 30
14846: PUSH
14847: LD_INT 31
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 30
14856: PUSH
14857: LD_INT 4
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PPUSH
14873: CALL_OW 70
14877: AND
14878: IFFALSE 14898
14880: GO 14882
14882: DISABLE
// begin hillBase := true ;
14883: LD_ADDR_EXP 15
14887: PUSH
14888: LD_INT 1
14890: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14891: LD_STRING HillDone
14893: PPUSH
14894: CALL_OW 337
// end ;
14898: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14899: LD_EXP 30
14903: PUSH
14904: LD_EXP 30
14908: PPUSH
14909: CALL_OW 256
14913: PUSH
14914: LD_INT 3
14916: LESS
14917: AND
14918: IFFALSE 14964
14920: GO 14922
14922: DISABLE
// begin DialogueOn ;
14923: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14927: LD_EXP 30
14931: PPUSH
14932: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14936: LD_EXP 30
14940: PPUSH
14941: LD_STRING DK-Kkilled-1
14943: PPUSH
14944: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14948: LD_EXP 25
14952: PPUSH
14953: LD_STRING DH-Kkilled-2
14955: PPUSH
14956: CALL_OW 88
// DialogueOff ;
14960: CALL_OW 7
// end ;
14964: END
// every 0 0$1 trigger kaiaKilledByRussian do
14965: LD_EXP 23
14969: IFFALSE 14986
14971: GO 14973
14973: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14974: LD_EXP 25
14978: PPUSH
14979: LD_STRING DH-Kkilled-3
14981: PPUSH
14982: CALL_OW 88
14986: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14987: LD_EXP 16
14991: PUSH
14992: LD_INT 106
14994: PPUSH
14995: CALL_OW 255
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: PUSH
15004: LD_EXP 17
15008: OR
15009: AND
15010: PUSH
15011: LD_EXP 18
15015: PUSH
15016: LD_EXP 24
15020: PUSH
15021: LD_INT 112
15023: PPUSH
15024: CALL_OW 255
15028: PUSH
15029: LD_INT 2
15031: EQUAL
15032: AND
15033: OR
15034: AND
15035: IFFALSE 16217
15037: GO 15039
15039: DISABLE
15040: LD_INT 0
15042: PPUSH
15043: PPUSH
15044: PPUSH
15045: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15046: LD_STRING GoToWest
15048: PPUSH
15049: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15053: LD_INT 17
15055: PPUSH
15056: LD_INT 1
15058: PPUSH
15059: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15063: LD_INT 35
15065: PPUSH
15066: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15070: LD_ADDR_VAR 0 2
15074: PUSH
15075: LD_INT 17
15077: PPUSH
15078: LD_INT 22
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 2
15090: PUSH
15091: LD_INT 21
15093: PUSH
15094: LD_INT 1
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 2
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 3
15113: PUSH
15114: LD_INT 58
15116: PUSH
15117: EMPTY
15118: LIST
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PPUSH
15137: CALL_OW 70
15141: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15142: LD_ADDR_VAR 0 3
15146: PUSH
15147: LD_INT 22
15149: PUSH
15150: LD_INT 2
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 3
15159: PUSH
15160: LD_INT 55
15162: PUSH
15163: EMPTY
15164: LIST
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 2
15172: PUSH
15173: LD_INT 21
15175: PUSH
15176: LD_INT 1
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 21
15185: PUSH
15186: LD_INT 2
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: LD_INT 3
15195: PUSH
15196: LD_INT 58
15198: PUSH
15199: EMPTY
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: LIST
15219: PPUSH
15220: CALL_OW 69
15224: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15225: LD_VAR 0 2
15229: PUSH
15230: LD_INT 0
15232: PLUS
15233: PUSH
15234: LD_VAR 0 3
15238: PUSH
15239: LD_INT 0
15241: PLUS
15242: EQUAL
15243: IFFALSE 15063
// SaveCharacters ( Heike , 04_1_Heike ) ;
15245: LD_EXP 25
15249: PPUSH
15250: LD_STRING 04_1_Heike
15252: PPUSH
15253: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15257: LD_EXP 35
15261: PUSH
15262: LD_EXP 35
15266: PUSH
15267: LD_EXP 39
15271: IN
15272: NOT
15273: AND
15274: IFFALSE 15290
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15276: LD_EXP 35
15280: PPUSH
15281: LD_STRING 04_1_Aviradze
15283: PPUSH
15284: CALL_OW 38
15288: GO 15308
// if Aviradze then
15290: LD_EXP 35
15294: IFFALSE 15308
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15296: LD_EXP 35
15300: PPUSH
15301: LD_STRING 04_1_Aviradze_L
15303: PPUSH
15304: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15308: LD_EXP 28
15312: PUSH
15313: LD_EXP 28
15317: PUSH
15318: LD_EXP 39
15322: IN
15323: NOT
15324: AND
15325: IFFALSE 15341
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15327: LD_EXP 28
15331: PPUSH
15332: LD_STRING 04_1_Ibrahim
15334: PPUSH
15335: CALL_OW 38
15339: GO 15359
// if Ibrahim then
15341: LD_EXP 28
15345: IFFALSE 15359
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15347: LD_EXP 28
15351: PPUSH
15352: LD_STRING 04_1_Ibrahim_L
15354: PPUSH
15355: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15359: LD_EXP 29
15363: PUSH
15364: LD_EXP 29
15368: PUSH
15369: LD_EXP 39
15373: IN
15374: NOT
15375: AND
15376: IFFALSE 15392
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15378: LD_EXP 29
15382: PPUSH
15383: LD_STRING 04_1_Kamil
15385: PPUSH
15386: CALL_OW 38
15390: GO 15410
// if Kamil then
15392: LD_EXP 29
15396: IFFALSE 15410
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15398: LD_EXP 29
15402: PPUSH
15403: LD_STRING 04_1_Kamil_L
15405: PPUSH
15406: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15410: LD_EXP 31
15414: PUSH
15415: LD_EXP 31
15419: PUSH
15420: LD_EXP 39
15424: IN
15425: NOT
15426: AND
15427: IFFALSE 15443
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15429: LD_EXP 31
15433: PPUSH
15434: LD_STRING 04_1_Sophia
15436: PPUSH
15437: CALL_OW 38
15441: GO 15461
// if Sophia then
15443: LD_EXP 31
15447: IFFALSE 15461
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15449: LD_EXP 31
15453: PPUSH
15454: LD_STRING 04_1_Sophia_L
15456: PPUSH
15457: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15461: LD_EXP 30
15465: PUSH
15466: LD_EXP 30
15470: PUSH
15471: LD_EXP 39
15475: IN
15476: NOT
15477: AND
15478: IFFALSE 15494
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15480: LD_EXP 30
15484: PPUSH
15485: LD_STRING 04_1_Kaia
15487: PPUSH
15488: CALL_OW 38
15492: GO 15512
// if Kaia then
15494: LD_EXP 30
15498: IFFALSE 15512
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15500: LD_EXP 30
15504: PPUSH
15505: LD_STRING 04_1_Kaia_L
15507: PPUSH
15508: CALL_OW 38
// if Givi then
15512: LD_EXP 26
15516: IFFALSE 15530
// SaveCharacters ( Givi , 04_1_Givi ) ;
15518: LD_EXP 26
15522: PPUSH
15523: LD_STRING 04_1_Givi
15525: PPUSH
15526: CALL_OW 38
// if Mike then
15530: LD_EXP 27
15534: IFFALSE 15548
// SaveCharacters ( Mike , 04_1_Mike ) ;
15536: LD_EXP 27
15540: PPUSH
15541: LD_STRING 04_1_Mike
15543: PPUSH
15544: CALL_OW 38
// if Markov then
15548: LD_EXP 32
15552: IFFALSE 15566
// SaveCharacters ( Markov , 04_1_Markov ) ;
15554: LD_EXP 32
15558: PPUSH
15559: LD_STRING 04_1_Markov
15561: PPUSH
15562: CALL_OW 38
// if Kurt then
15566: LD_EXP 34
15570: IFFALSE 15584
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
15572: LD_EXP 34
15576: PPUSH
15577: LD_STRING 04_1_Kurt
15579: PPUSH
15580: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
15584: LD_EXP 37
15588: PUSH
15589: LD_EXP 39
15593: DIFF
15594: IFFALSE 15614
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15596: LD_EXP 37
15600: PUSH
15601: LD_EXP 39
15605: DIFF
15606: PPUSH
15607: LD_STRING 04_1_others
15609: PPUSH
15610: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15614: LD_EXP 39
15618: PUSH
15619: LD_EXP 37
15623: AND
15624: IFFALSE 15709
// begin tmp := [ ] ;
15626: LD_ADDR_VAR 0 2
15630: PUSH
15631: EMPTY
15632: ST_TO_ADDR
// for i in heikeSecondSquad do
15633: LD_ADDR_VAR 0 1
15637: PUSH
15638: LD_EXP 37
15642: PUSH
15643: FOR_IN
15644: IFFALSE 15689
// if i in aviradzeSquad then
15646: LD_VAR 0 1
15650: PUSH
15651: LD_EXP 39
15655: IN
15656: IFFALSE 15687
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_VAR 0 2
15667: PPUSH
15668: LD_VAR 0 2
15672: PUSH
15673: LD_INT 1
15675: PLUS
15676: PPUSH
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 1
15686: ST_TO_ADDR
15687: GO 15643
15689: POP
15690: POP
// if tmp then
15691: LD_VAR 0 2
15695: IFFALSE 15709
// SaveCharacters ( tmp , 04_1_others_L ) ;
15697: LD_VAR 0 2
15701: PPUSH
15702: LD_STRING 04_1_others_L
15704: PPUSH
15705: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15709: LD_ADDR_VAR 0 2
15713: PUSH
15714: LD_INT 22
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 23
15726: PUSH
15727: LD_INT 0
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PPUSH
15738: CALL_OW 69
15742: ST_TO_ADDR
// if tmp then
15743: LD_VAR 0 2
15747: IFFALSE 15761
// SaveCharacters ( tmp , 04_1_apes ) ;
15749: LD_VAR 0 2
15753: PPUSH
15754: LD_STRING 04_1_apes
15756: PPUSH
15757: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15761: LD_ADDR_VAR 0 2
15765: PUSH
15766: LD_INT 17
15768: PPUSH
15769: LD_INT 21
15771: PUSH
15772: LD_INT 2
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PPUSH
15779: CALL_OW 70
15783: ST_TO_ADDR
// if tmp then
15784: LD_VAR 0 2
15788: IFFALSE 16082
// begin tmp2 := [ ] ;
15790: LD_ADDR_VAR 0 3
15794: PUSH
15795: EMPTY
15796: ST_TO_ADDR
// for i in tmp do
15797: LD_ADDR_VAR 0 1
15801: PUSH
15802: LD_VAR 0 2
15806: PUSH
15807: FOR_IN
15808: IFFALSE 16068
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15810: LD_VAR 0 1
15814: PPUSH
15815: CALL_OW 264
15819: PUSH
15820: LD_INT 32
15822: PUSH
15823: LD_INT 12
15825: PUSH
15826: LD_INT 51
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: IN
15834: IFFALSE 15971
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15836: LD_ADDR_VAR 0 4
15840: PUSH
15841: LD_VAR 0 1
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: CALL_OW 289
15853: PUSH
15854: LD_VAR 0 1
15858: PPUSH
15859: LD_INT 2
15861: PPUSH
15862: CALL_OW 289
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15871: LD_ADDR_VAR 0 3
15875: PUSH
15876: LD_VAR 0 3
15880: PPUSH
15881: LD_VAR 0 3
15885: PUSH
15886: LD_INT 1
15888: PLUS
15889: PPUSH
15890: LD_VAR 0 1
15894: PPUSH
15895: CALL_OW 265
15899: PUSH
15900: LD_VAR 0 1
15904: PPUSH
15905: CALL_OW 262
15909: PUSH
15910: LD_VAR 0 1
15914: PPUSH
15915: CALL_OW 263
15919: PUSH
15920: LD_VAR 0 1
15924: PPUSH
15925: CALL_OW 264
15929: PUSH
15930: LD_VAR 0 1
15934: PPUSH
15935: CALL_OW 248
15939: PUSH
15940: LD_VAR 0 1
15944: PPUSH
15945: CALL_OW 256
15949: PUSH
15950: LD_VAR 0 4
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL_OW 1
15968: ST_TO_ADDR
// end else
15969: GO 16066
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15971: LD_ADDR_VAR 0 3
15975: PUSH
15976: LD_VAR 0 3
15980: PPUSH
15981: LD_VAR 0 3
15985: PUSH
15986: LD_INT 1
15988: PLUS
15989: PPUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: CALL_OW 265
15999: PUSH
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 262
16009: PUSH
16010: LD_VAR 0 1
16014: PPUSH
16015: CALL_OW 263
16019: PUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 264
16029: PUSH
16030: LD_VAR 0 1
16034: PPUSH
16035: CALL_OW 248
16039: PUSH
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 256
16049: PUSH
16050: EMPTY
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: PPUSH
16061: CALL_OW 1
16065: ST_TO_ADDR
16066: GO 15807
16068: POP
16069: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16070: LD_VAR 0 3
16074: PPUSH
16075: LD_STRING 04_1_Vehicles
16077: PPUSH
16078: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16082: LD_EXP 21
16086: PPUSH
16087: LD_STRING 04_1_RuLabCaptured
16089: PPUSH
16090: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16094: LD_EXP 19
16098: PPUSH
16099: LD_STRING 04_1_EscapeCounter
16101: PPUSH
16102: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16106: LD_EXP 15
16110: PPUSH
16111: LD_STRING 04_1_BaseHill
16113: PPUSH
16114: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16118: LD_OWVAR 1
16122: PPUSH
16123: LD_STRING 04_1_Time
16125: PPUSH
16126: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16130: LD_EXP 14
16134: PPUSH
16135: LD_STRING 04_1_DeadCounter
16137: PPUSH
16138: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16142: LD_EXP 24
16146: PUSH
16147: LD_INT 112
16149: PPUSH
16150: CALL_OW 255
16154: MUL
16155: PUSH
16156: LD_INT 2
16158: EQUAL
16159: PPUSH
16160: LD_STRING 04_1_KaganCaptured
16162: PPUSH
16163: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16167: LD_INT 22
16169: PUSH
16170: LD_INT 2
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 34
16179: PUSH
16180: LD_INT 26
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PPUSH
16191: CALL_OW 69
16195: PUSH
16196: LD_INT 0
16198: PLUS
16199: PPUSH
16200: LD_STRING 04_1_Flamethrower
16202: PPUSH
16203: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16207: LD_INT 1
16209: PPUSH
16210: LD_STRING __x1\04_cont2
16212: PPUSH
16213: CALL_OW 340
// end ; end_of_file
16217: PPOPN 4
16219: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL_OW 266
16229: PUSH
16230: LD_INT 0
16232: EQUAL
16233: PUSH
16234: LD_VAR 0 1
16238: PPUSH
16239: CALL_OW 255
16243: PUSH
16244: LD_INT 2
16246: EQUAL
16247: AND
16248: IFFALSE 16258
// baseConstructed := true ;
16250: LD_ADDR_EXP 3
16254: PUSH
16255: LD_INT 1
16257: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 266
16267: PUSH
16268: LD_INT 6
16270: EQUAL
16271: PUSH
16272: LD_VAR 0 1
16276: PPUSH
16277: CALL_OW 255
16281: PUSH
16282: LD_INT 2
16284: EQUAL
16285: AND
16286: IFFALSE 16296
// labConstructed := true ;
16288: LD_ADDR_EXP 4
16292: PUSH
16293: LD_INT 1
16295: ST_TO_ADDR
// end ;
16296: PPOPN 1
16298: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16299: LD_VAR 0 1
16303: PUSH
16304: LD_EXP 25
16308: EQUAL
16309: IFFALSE 16318
// YouLost ( Heike ) ;
16311: LD_STRING Heike
16313: PPUSH
16314: CALL_OW 104
// if un = Omar then
16318: LD_VAR 0 1
16322: PUSH
16323: LD_EXP 33
16327: EQUAL
16328: IFFALSE 16337
// YouLost ( Omar ) ;
16330: LD_STRING Omar
16332: PPUSH
16333: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16337: LD_VAR 0 1
16341: PUSH
16342: LD_INT 22
16344: PUSH
16345: LD_INT 2
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 23
16354: PUSH
16355: LD_INT 2
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 21
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: PPUSH
16377: CALL_OW 69
16381: IN
16382: IFFALSE 16398
// loseCounter := loseCounter + 1 ;
16384: LD_ADDR_EXP 14
16388: PUSH
16389: LD_EXP 14
16393: PUSH
16394: LD_INT 1
16396: PLUS
16397: ST_TO_ADDR
// if un = omikron then
16398: LD_VAR 0 1
16402: PUSH
16403: LD_INT 64
16405: EQUAL
16406: IFFALSE 16416
// omicronFall := true ;
16408: LD_ADDR_EXP 13
16412: PUSH
16413: LD_INT 1
16415: ST_TO_ADDR
// if un = kirov then
16416: LD_VAR 0 1
16420: PUSH
16421: LD_INT 71
16423: EQUAL
16424: IFFALSE 16441
// begin ChangeMissionObjectives ( KirovDone ) ;
16426: LD_STRING KirovDone
16428: PPUSH
16429: CALL_OW 337
// kirovDestroyed := true ;
16433: LD_ADDR_EXP 16
16437: PUSH
16438: LD_INT 1
16440: ST_TO_ADDR
// end ; if un = beria then
16441: LD_VAR 0 1
16445: PUSH
16446: LD_INT 106
16448: EQUAL
16449: IFFALSE 16466
// begin ChangeMissionObjectives ( BeriaDone ) ;
16451: LD_STRING BeriaDone
16453: PPUSH
16454: CALL_OW 337
// beriaDestroyed := true ;
16458: LD_ADDR_EXP 17
16462: PUSH
16463: LD_INT 1
16465: ST_TO_ADDR
// end ; if un = kagan then
16466: LD_VAR 0 1
16470: PUSH
16471: LD_INT 112
16473: EQUAL
16474: IFFALSE 16484
// kaganDestroyed := true ;
16476: LD_ADDR_EXP 18
16480: PUSH
16481: LD_INT 1
16483: ST_TO_ADDR
// if un in russianPatrol then
16484: LD_VAR 0 1
16488: PUSH
16489: LD_EXP 47
16493: IN
16494: IFFALSE 16535
// begin if GetTag ( un ) = 2 then
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 110
16505: PUSH
16506: LD_INT 2
16508: EQUAL
16509: IFFALSE 16519
// spottedByPatrol := false ;
16511: LD_ADDR_EXP 7
16515: PUSH
16516: LD_INT 0
16518: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
16519: LD_ADDR_EXP 47
16523: PUSH
16524: LD_EXP 47
16528: PUSH
16529: LD_VAR 0 1
16533: DIFF
16534: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
16535: LD_VAR 0 1
16539: PUSH
16540: LD_EXP 48
16544: IN
16545: IFFALSE 16563
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16547: LD_ADDR_EXP 48
16551: PUSH
16552: LD_EXP 48
16556: PUSH
16557: LD_VAR 0 1
16561: DIFF
16562: ST_TO_ADDR
// end ;
16563: PPOPN 1
16565: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16566: LD_INT 0
16568: PPUSH
16569: PPUSH
16570: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16571: LD_VAR 0 1
16575: PUSH
16576: LD_INT 2
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_INT 3
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 22
16591: PUSH
16592: LD_INT 4
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 22
16601: PUSH
16602: LD_INT 6
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 30
16617: PUSH
16618: LD_INT 32
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PPUSH
16629: CALL_OW 69
16633: IN
16634: IFFALSE 16807
// begin sol := UnitsInside ( un ) ;
16636: LD_ADDR_VAR 0 3
16640: PUSH
16641: LD_VAR 0 1
16645: PPUSH
16646: CALL_OW 313
16650: ST_TO_ADDR
// if not sol then
16651: LD_VAR 0 3
16655: NOT
16656: IFFALSE 16660
// exit ;
16658: GO 16807
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16660: LD_ADDR_VAR 0 4
16664: PUSH
16665: LD_INT 22
16667: PUSH
16668: LD_VAR 0 1
16672: PPUSH
16673: CALL_OW 255
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 2
16684: PUSH
16685: LD_INT 30
16687: PUSH
16688: LD_INT 4
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 30
16697: PUSH
16698: LD_INT 5
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PPUSH
16714: CALL_OW 69
16718: ST_TO_ADDR
// if not nearestBarracks then
16719: LD_VAR 0 4
16723: NOT
16724: IFFALSE 16728
// exit ;
16726: GO 16807
// for i in nearestBarracks do
16728: LD_ADDR_VAR 0 2
16732: PUSH
16733: LD_VAR 0 4
16737: PUSH
16738: FOR_IN
16739: IFFALSE 16774
// if UnitsInside ( i ) = 6 then
16741: LD_VAR 0 2
16745: PPUSH
16746: CALL_OW 313
16750: PUSH
16751: LD_INT 6
16753: EQUAL
16754: IFFALSE 16772
// nearestBarracks := nearestBarracks diff i ;
16756: LD_ADDR_VAR 0 4
16760: PUSH
16761: LD_VAR 0 4
16765: PUSH
16766: LD_VAR 0 2
16770: DIFF
16771: ST_TO_ADDR
16772: GO 16738
16774: POP
16775: POP
// if not nearestBarracks then
16776: LD_VAR 0 4
16780: NOT
16781: IFFALSE 16785
// exit ;
16783: GO 16807
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16785: LD_VAR 0 3
16789: PUSH
16790: LD_INT 1
16792: ARRAY
16793: PPUSH
16794: LD_VAR 0 4
16798: PUSH
16799: LD_INT 1
16801: ARRAY
16802: PPUSH
16803: CALL_OW 120
// end ; end ;
16807: PPOPN 4
16809: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16810: LD_INT 0
16812: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16813: LD_EXP 8
16817: NOT
16818: PUSH
16819: LD_EXP 5
16823: NOT
16824: OR
16825: IFFALSE 16829
// exit ;
16827: GO 16897
// for i in camAreas do
16829: LD_ADDR_VAR 0 5
16833: PUSH
16834: LD_EXP 8
16838: PUSH
16839: FOR_IN
16840: IFFALSE 16895
// if InArea ( x , y , i ) then
16842: LD_VAR 0 3
16846: PPUSH
16847: LD_VAR 0 4
16851: PPUSH
16852: LD_VAR 0 5
16856: PPUSH
16857: CALL_OW 309
16861: IFFALSE 16893
// begin SetAreaMapShow ( i , 0 ) ;
16863: LD_VAR 0 5
16867: PPUSH
16868: LD_INT 0
16870: PPUSH
16871: CALL_OW 424
// camAreas := camAreas diff i ;
16875: LD_ADDR_EXP 8
16879: PUSH
16880: LD_EXP 8
16884: PUSH
16885: LD_VAR 0 5
16889: DIFF
16890: ST_TO_ADDR
// break ;
16891: GO 16895
// end ;
16893: GO 16839
16895: POP
16896: POP
// end ;
16897: PPOPN 5
16899: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16900: LD_VAR 0 1
16904: PUSH
16905: LD_INT 2
16907: EQUAL
16908: PUSH
16909: LD_VAR 0 2
16913: PUSH
16914: LD_INT 5
16916: PUSH
16917: LD_INT 8
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: IN
16924: AND
16925: IFFALSE 16934
// YouLost ( Ally ) ;
16927: LD_STRING Ally
16929: PPUSH
16930: CALL_OW 104
// end ;
16934: PPOPN 2
16936: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16937: LD_VAR 0 1
16941: PUSH
16942: LD_EXP 30
16946: EQUAL
16947: PUSH
16948: LD_VAR 0 2
16952: PUSH
16953: LD_INT 3
16955: PUSH
16956: LD_INT 6
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: IN
16963: AND
16964: IFFALSE 16995
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16966: LD_ADDR_EXP 23
16970: PUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: CALL_OW 250
16980: PUSH
16981: LD_VAR 0 1
16985: PPUSH
16986: CALL_OW 251
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: ST_TO_ADDR
// end ; end_of_file
16995: PPOPN 3
16997: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
16998: LD_EXP 11
17002: NOT
17003: PUSH
17004: LD_INT 12
17006: PPUSH
17007: LD_INT 1
17009: PPUSH
17010: CALL_OW 287
17014: PUSH
17015: LD_INT 20
17017: PUSH
17018: LD_INT 16
17020: PUSH
17021: LD_INT 12
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: PUSH
17029: LD_OWVAR 67
17033: ARRAY
17034: LESS
17035: AND
17036: IFFALSE 17063
17038: GO 17040
17040: DISABLE
// begin enable ;
17041: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17042: LD_INT 1
17044: PPUSH
17045: LD_INT 5
17047: PPUSH
17048: CALL_OW 12
17052: PPUSH
17053: LD_INT 12
17055: PPUSH
17056: LD_INT 1
17058: PPUSH
17059: CALL_OW 55
// end ; end_of_file
17063: END
// every 0 0$1 trigger omarCountdown do
17064: LD_EXP 22
17068: IFFALSE 17120
17070: GO 17072
17072: DISABLE
// begin enable ;
17073: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17074: LD_ADDR_OWVAR 47
17078: PUSH
17079: LD_STRING #X104-1
17081: PUSH
17082: LD_EXP 22
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17091: LD_ADDR_EXP 22
17095: PUSH
17096: LD_EXP 22
17100: PUSH
17101: LD_INT 35
17103: MINUS
17104: ST_TO_ADDR
// if not omarCountdown then
17105: LD_EXP 22
17109: NOT
17110: IFFALSE 17120
// display_strings :=  ;
17112: LD_ADDR_OWVAR 47
17116: PUSH
17117: LD_STRING 
17119: ST_TO_ADDR
// end ;
17120: END
