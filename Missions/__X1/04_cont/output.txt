// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 13 0 0
// PrepareArabian ;
   8: CALL 1728 0 0
// end ;
  12: END
// export debug , prefix ; function Init ; begin
  13: LD_INT 0
  15: PPUSH
// debug := false ;
  16: LD_ADDR_EXP 1
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// prefix := 03_ ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 03_
  31: ST_TO_ADDR
// end ; end_of_file
  32: LD_VAR 0 1
  36: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  37: LD_INT 0
  39: PPUSH
  40: PPUSH
// if exist_mode then
  41: LD_VAR 0 2
  45: IFFALSE 70
// unit := CreateCharacter ( prefix & ident ) else
  47: LD_ADDR_VAR 0 5
  51: PUSH
  52: LD_VAR 0 3
  56: PUSH
  57: LD_VAR 0 1
  61: STR
  62: PPUSH
  63: CALL_OW 34
  67: ST_TO_ADDR
  68: GO 85
// unit := NewCharacter ( ident ) ;
  70: LD_ADDR_VAR 0 5
  74: PUSH
  75: LD_VAR 0 1
  79: PPUSH
  80: CALL_OW 25
  84: ST_TO_ADDR
// result := unit ;
  85: LD_ADDR_VAR 0 4
  89: PUSH
  90: LD_VAR 0 5
  94: ST_TO_ADDR
// end ;
  95: LD_VAR 0 4
  99: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 100: LD_INT 0
 102: PPUSH
// uc_side := side ;
 103: LD_ADDR_OWVAR 20
 107: PUSH
 108: LD_VAR 0 1
 112: ST_TO_ADDR
// uc_nation := nation ;
 113: LD_ADDR_OWVAR 21
 117: PUSH
 118: LD_VAR 0 2
 122: ST_TO_ADDR
// vc_chassis := chassis ;
 123: LD_ADDR_OWVAR 37
 127: PUSH
 128: LD_VAR 0 3
 132: ST_TO_ADDR
// vc_engine := engine ;
 133: LD_ADDR_OWVAR 39
 137: PUSH
 138: LD_VAR 0 4
 142: ST_TO_ADDR
// vc_control := control ;
 143: LD_ADDR_OWVAR 38
 147: PUSH
 148: LD_VAR 0 5
 152: ST_TO_ADDR
// vc_weapon := weapon ;
 153: LD_ADDR_OWVAR 40
 157: PUSH
 158: LD_VAR 0 6
 162: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 163: LD_ADDR_OWVAR 41
 167: PUSH
 168: LD_VAR 0 7
 172: ST_TO_ADDR
// result := CreateVehicle ;
 173: LD_ADDR_VAR 0 8
 177: PUSH
 178: CALL_OW 45
 182: ST_TO_ADDR
// end ;
 183: LD_VAR 0 8
 187: RET
// export function SayX ( units , ident ) ; var i ; begin
 188: LD_INT 0
 190: PPUSH
 191: PPUSH
// result := false ;
 192: LD_ADDR_VAR 0 3
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// if not units then
 200: LD_VAR 0 1
 204: NOT
 205: IFFALSE 209
// exit ;
 207: GO 263
// for i in units do
 209: LD_ADDR_VAR 0 4
 213: PUSH
 214: LD_VAR 0 1
 218: PUSH
 219: FOR_IN
 220: IFFALSE 261
// if IsOk ( i ) then
 222: LD_VAR 0 4
 226: PPUSH
 227: CALL_OW 302
 231: IFFALSE 259
// begin Say ( i , ident ) ;
 233: LD_VAR 0 4
 237: PPUSH
 238: LD_VAR 0 2
 242: PPUSH
 243: CALL_OW 88
// result := i ;
 247: LD_ADDR_VAR 0 3
 251: PUSH
 252: LD_VAR 0 4
 256: ST_TO_ADDR
// break ;
 257: GO 261
// end ;
 259: GO 219
 261: POP
 262: POP
// end ;
 263: LD_VAR 0 3
 267: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
// InitUc ;
 272: CALL_OW 18
// InitHc ;
 276: CALL_OW 19
// uc_side := 0 ;
 280: LD_ADDR_OWVAR 20
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// uc_nation := 0 ;
 288: LD_ADDR_OWVAR 21
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// for i = 1 to amount do
 296: LD_ADDR_VAR 0 4
 300: PUSH
 301: DOUBLE
 302: LD_INT 1
 304: DEC
 305: ST_TO_ADDR
 306: LD_VAR 0 2
 310: PUSH
 311: FOR_TO
 312: IFFALSE 394
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 314: LD_ADDR_OWVAR 29
 318: PUSH
 319: LD_INT 9
 321: PPUSH
 322: LD_INT 12
 324: PPUSH
 325: CALL_OW 12
 329: PUSH
 330: LD_INT 9
 332: PPUSH
 333: LD_INT 12
 335: PPUSH
 336: CALL_OW 12
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 345: LD_ADDR_OWVAR 35
 349: PUSH
 350: LD_INT 1
 352: NEG
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: CALL_OW 12
 361: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 362: LD_INT 0
 364: PPUSH
 365: LD_INT 12
 367: PPUSH
 368: LD_INT 1
 370: PPUSH
 371: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 375: CALL_OW 44
 379: PPUSH
 380: LD_VAR 0 1
 384: PPUSH
 385: LD_INT 0
 387: PPUSH
 388: CALL_OW 49
// end ;
 392: GO 311
 394: POP
 395: POP
// InitHc ;
 396: CALL_OW 19
// end ;
 400: LD_VAR 0 3
 404: RET
// export function PrepareNature ( forest ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// SpawnApeman ( forest , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
 409: LD_VAR 0 1
 413: PPUSH
 414: LD_INT 6
 416: PUSH
 417: LD_INT 5
 419: PUSH
 420: LD_INT 4
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: LIST
 427: PUSH
 428: LD_OWVAR 67
 432: ARRAY
 433: PPUSH
 434: CALL 268 0 2
// for i := 1 to 3 do
 438: LD_ADDR_VAR 0 3
 442: PUSH
 443: DOUBLE
 444: LD_INT 1
 446: DEC
 447: ST_TO_ADDR
 448: LD_INT 3
 450: PUSH
 451: FOR_TO
 452: IFFALSE 489
// begin hc_class := 21 ;
 454: LD_ADDR_OWVAR 28
 458: PUSH
 459: LD_INT 21
 461: ST_TO_ADDR
// hc_gallery :=  ;
 462: LD_ADDR_OWVAR 33
 466: PUSH
 467: LD_STRING 
 469: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 470: CALL_OW 44
 474: PPUSH
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 49
// end ;
 487: GO 451
 489: POP
 490: POP
// for i := 1 to 2 do
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: DOUBLE
 497: LD_INT 1
 499: DEC
 500: ST_TO_ADDR
 501: LD_INT 2
 503: PUSH
 504: FOR_TO
 505: IFFALSE 542
// begin hc_class := 18 ;
 507: LD_ADDR_OWVAR 28
 511: PUSH
 512: LD_INT 18
 514: ST_TO_ADDR
// hc_gallery :=  ;
 515: LD_ADDR_OWVAR 33
 519: PUSH
 520: LD_STRING 
 522: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 523: CALL_OW 44
 527: PPUSH
 528: LD_VAR 0 1
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL_OW 49
// end ;
 540: GO 504
 542: POP
 543: POP
// for i := 1 to 2 do
 544: LD_ADDR_VAR 0 3
 548: PUSH
 549: DOUBLE
 550: LD_INT 1
 552: DEC
 553: ST_TO_ADDR
 554: LD_INT 2
 556: PUSH
 557: FOR_TO
 558: IFFALSE 595
// begin hc_class := 13 ;
 560: LD_ADDR_OWVAR 28
 564: PUSH
 565: LD_INT 13
 567: ST_TO_ADDR
// hc_gallery :=  ;
 568: LD_ADDR_OWVAR 33
 572: PUSH
 573: LD_STRING 
 575: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 576: CALL_OW 44
 580: PPUSH
 581: LD_VAR 0 1
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: CALL_OW 49
// end ;
 593: GO 557
 595: POP
 596: POP
// end ;
 597: LD_VAR 0 2
 601: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
// if not observer or not unit then
 607: LD_VAR 0 1
 611: NOT
 612: PUSH
 613: LD_VAR 0 2
 617: NOT
 618: OR
 619: IFFALSE 623
// exit ;
 621: GO 671
// if not See ( GetSide ( observer ) , unit ) then
 623: LD_VAR 0 1
 627: PPUSH
 628: CALL_OW 255
 632: PPUSH
 633: LD_VAR 0 2
 637: PPUSH
 638: CALL_OW 292
 642: NOT
 643: IFFALSE 647
// exit ;
 645: GO 671
// result := GetDistUnits ( observer , unit ) < 12 ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_VAR 0 1
 656: PPUSH
 657: LD_VAR 0 2
 661: PPUSH
 662: CALL_OW 296
 666: PUSH
 667: LD_INT 12
 669: LESS
 670: ST_TO_ADDR
// end ;
 671: LD_VAR 0 3
 675: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 676: LD_INT 0
 678: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 679: LD_VAR 0 2
 683: PUSH
 684: LD_INT 1
 686: ARRAY
 687: PPUSH
 688: LD_VAR 0 2
 692: PUSH
 693: LD_INT 2
 695: ARRAY
 696: PPUSH
 697: CALL_OW 488
 701: PUSH
 702: LD_VAR 0 2
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: PPUSH
 711: LD_VAR 0 2
 715: PUSH
 716: LD_INT 2
 718: ARRAY
 719: PPUSH
 720: CALL_OW 428
 724: PUSH
 725: LD_INT 0
 727: EQUAL
 728: AND
 729: IFFALSE 763
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 731: LD_VAR 0 1
 735: PPUSH
 736: LD_VAR 0 2
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PPUSH
 745: LD_VAR 0 2
 749: PUSH
 750: LD_INT 2
 752: ARRAY
 753: PPUSH
 754: LD_VAR 0 3
 758: PPUSH
 759: CALL_OW 48
// end ;
 763: LD_VAR 0 4
 767: RET
// export function Video ( mode ) ; begin
 768: LD_INT 0
 770: PPUSH
// ingame_video = mode ;
 771: LD_ADDR_OWVAR 52
 775: PUSH
 776: LD_VAR 0 1
 780: ST_TO_ADDR
// interface_hidden = mode ;
 781: LD_ADDR_OWVAR 54
 785: PUSH
 786: LD_VAR 0 1
 790: ST_TO_ADDR
// end ;
 791: LD_VAR 0 2
 795: RET
// export function ReverseArray ( array ) ; var i ; begin
 796: LD_INT 0
 798: PPUSH
 799: PPUSH
// if not array then
 800: LD_VAR 0 1
 804: NOT
 805: IFFALSE 809
// exit ;
 807: GO 867
// result := [ ] ;
 809: LD_ADDR_VAR 0 2
 813: PUSH
 814: EMPTY
 815: ST_TO_ADDR
// for i := 1 to array do
 816: LD_ADDR_VAR 0 3
 820: PUSH
 821: DOUBLE
 822: LD_INT 1
 824: DEC
 825: ST_TO_ADDR
 826: LD_VAR 0 1
 830: PUSH
 831: FOR_TO
 832: IFFALSE 865
// result := Insert ( result , 1 , array [ i ] ) ;
 834: LD_ADDR_VAR 0 2
 838: PUSH
 839: LD_VAR 0 2
 843: PPUSH
 844: LD_INT 1
 846: PPUSH
 847: LD_VAR 0 1
 851: PUSH
 852: LD_VAR 0 3
 856: ARRAY
 857: PPUSH
 858: CALL_OW 2
 862: ST_TO_ADDR
 863: GO 831
 865: POP
 866: POP
// end ;
 867: LD_VAR 0 2
 871: RET
// export function ComExit ( unit ) ; begin
 872: LD_INT 0
 874: PPUSH
// result := IsInUnit ( unit ) ;
 875: LD_ADDR_VAR 0 2
 879: PUSH
 880: LD_VAR 0 1
 884: PPUSH
 885: CALL_OW 310
 889: ST_TO_ADDR
// if not result then
 890: LD_VAR 0 2
 894: NOT
 895: IFFALSE 899
// exit ;
 897: GO 934
// if GetType ( result ) = unit_vehicle then
 899: LD_VAR 0 2
 903: PPUSH
 904: CALL_OW 247
 908: PUSH
 909: LD_INT 2
 911: EQUAL
 912: IFFALSE 925
// ComExitVehicle ( unit ) else
 914: LD_VAR 0 1
 918: PPUSH
 919: CALL_OW 121
 923: GO 934
// ComExitBuilding ( unit ) ;
 925: LD_VAR 0 1
 929: PPUSH
 930: CALL_OW 122
// end ;
 934: LD_VAR 0 2
 938: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 939: LD_INT 0
 941: PPUSH
 942: PPUSH
// if not side or not nation then
 943: LD_VAR 0 1
 947: NOT
 948: PUSH
 949: LD_VAR 0 2
 953: NOT
 954: OR
 955: IFFALSE 959
// exit ;
 957: GO 1723
// case nation of nation_american :
 959: LD_VAR 0 2
 963: PUSH
 964: LD_INT 1
 966: DOUBLE
 967: EQUAL
 968: IFTRUE 972
 970: GO 1186
 972: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 973: LD_ADDR_VAR 0 4
 977: PUSH
 978: LD_INT 35
 980: PUSH
 981: LD_INT 45
 983: PUSH
 984: LD_INT 46
 986: PUSH
 987: LD_INT 47
 989: PUSH
 990: LD_INT 82
 992: PUSH
 993: LD_INT 83
 995: PUSH
 996: LD_INT 84
 998: PUSH
 999: LD_INT 85
1001: PUSH
1002: LD_INT 86
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 6
1013: PUSH
1014: LD_INT 15
1016: PUSH
1017: LD_INT 16
1019: PUSH
1020: LD_INT 7
1022: PUSH
1023: LD_INT 12
1025: PUSH
1026: LD_INT 13
1028: PUSH
1029: LD_INT 10
1031: PUSH
1032: LD_INT 14
1034: PUSH
1035: LD_INT 20
1037: PUSH
1038: LD_INT 21
1040: PUSH
1041: LD_INT 22
1043: PUSH
1044: LD_INT 25
1046: PUSH
1047: LD_INT 32
1049: PUSH
1050: LD_INT 27
1052: PUSH
1053: LD_INT 36
1055: PUSH
1056: LD_INT 69
1058: PUSH
1059: LD_INT 39
1061: PUSH
1062: LD_INT 34
1064: PUSH
1065: LD_INT 40
1067: PUSH
1068: LD_INT 48
1070: PUSH
1071: LD_INT 49
1073: PUSH
1074: LD_INT 50
1076: PUSH
1077: LD_INT 51
1079: PUSH
1080: LD_INT 52
1082: PUSH
1083: LD_INT 53
1085: PUSH
1086: LD_INT 54
1088: PUSH
1089: LD_INT 55
1091: PUSH
1092: LD_INT 56
1094: PUSH
1095: LD_INT 57
1097: PUSH
1098: LD_INT 58
1100: PUSH
1101: LD_INT 59
1103: PUSH
1104: LD_INT 60
1106: PUSH
1107: LD_INT 61
1109: PUSH
1110: LD_INT 62
1112: PUSH
1113: LD_INT 80
1115: PUSH
1116: LD_INT 82
1118: PUSH
1119: LD_INT 83
1121: PUSH
1122: LD_INT 84
1124: PUSH
1125: LD_INT 85
1127: PUSH
1128: LD_INT 86
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: ST_TO_ADDR
1184: GO 1647
1186: LD_INT 2
1188: DOUBLE
1189: EQUAL
1190: IFTRUE 1194
1192: GO 1416
1194: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1195: LD_ADDR_VAR 0 4
1199: PUSH
1200: LD_INT 35
1202: PUSH
1203: LD_INT 45
1205: PUSH
1206: LD_INT 46
1208: PUSH
1209: LD_INT 47
1211: PUSH
1212: LD_INT 82
1214: PUSH
1215: LD_INT 83
1217: PUSH
1218: LD_INT 84
1220: PUSH
1221: LD_INT 85
1223: PUSH
1224: LD_INT 87
1226: PUSH
1227: LD_INT 70
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: LD_INT 11
1235: PUSH
1236: LD_INT 3
1238: PUSH
1239: LD_INT 4
1241: PUSH
1242: LD_INT 5
1244: PUSH
1245: LD_INT 6
1247: PUSH
1248: LD_INT 15
1250: PUSH
1251: LD_INT 18
1253: PUSH
1254: LD_INT 7
1256: PUSH
1257: LD_INT 17
1259: PUSH
1260: LD_INT 8
1262: PUSH
1263: LD_INT 20
1265: PUSH
1266: LD_INT 21
1268: PUSH
1269: LD_INT 22
1271: PUSH
1272: LD_INT 72
1274: PUSH
1275: LD_INT 26
1277: PUSH
1278: LD_INT 69
1280: PUSH
1281: LD_INT 39
1283: PUSH
1284: LD_INT 40
1286: PUSH
1287: LD_INT 41
1289: PUSH
1290: LD_INT 42
1292: PUSH
1293: LD_INT 43
1295: PUSH
1296: LD_INT 48
1298: PUSH
1299: LD_INT 49
1301: PUSH
1302: LD_INT 50
1304: PUSH
1305: LD_INT 51
1307: PUSH
1308: LD_INT 52
1310: PUSH
1311: LD_INT 53
1313: PUSH
1314: LD_INT 54
1316: PUSH
1317: LD_INT 55
1319: PUSH
1320: LD_INT 56
1322: PUSH
1323: LD_INT 60
1325: PUSH
1326: LD_INT 61
1328: PUSH
1329: LD_INT 62
1331: PUSH
1332: LD_INT 66
1334: PUSH
1335: LD_INT 67
1337: PUSH
1338: LD_INT 68
1340: PUSH
1341: LD_INT 81
1343: PUSH
1344: LD_INT 82
1346: PUSH
1347: LD_INT 83
1349: PUSH
1350: LD_INT 84
1352: PUSH
1353: LD_INT 85
1355: PUSH
1356: LD_INT 87
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: ST_TO_ADDR
1414: GO 1647
1416: LD_INT 3
1418: DOUBLE
1419: EQUAL
1420: IFTRUE 1424
1422: GO 1646
1424: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: LD_INT 46
1432: PUSH
1433: LD_INT 47
1435: PUSH
1436: LD_INT 1
1438: PUSH
1439: LD_INT 2
1441: PUSH
1442: LD_INT 82
1444: PUSH
1445: LD_INT 83
1447: PUSH
1448: LD_INT 84
1450: PUSH
1451: LD_INT 85
1453: PUSH
1454: LD_INT 86
1456: PUSH
1457: LD_INT 11
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 20
1465: PUSH
1466: LD_INT 19
1468: PUSH
1469: LD_INT 21
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: LD_INT 22
1477: PUSH
1478: LD_INT 25
1480: PUSH
1481: LD_INT 28
1483: PUSH
1484: LD_INT 29
1486: PUSH
1487: LD_INT 30
1489: PUSH
1490: LD_INT 31
1492: PUSH
1493: LD_INT 37
1495: PUSH
1496: LD_INT 38
1498: PUSH
1499: LD_INT 32
1501: PUSH
1502: LD_INT 27
1504: PUSH
1505: LD_INT 33
1507: PUSH
1508: LD_INT 69
1510: PUSH
1511: LD_INT 39
1513: PUSH
1514: LD_INT 34
1516: PUSH
1517: LD_INT 40
1519: PUSH
1520: LD_INT 71
1522: PUSH
1523: LD_INT 23
1525: PUSH
1526: LD_INT 44
1528: PUSH
1529: LD_INT 48
1531: PUSH
1532: LD_INT 49
1534: PUSH
1535: LD_INT 50
1537: PUSH
1538: LD_INT 51
1540: PUSH
1541: LD_INT 52
1543: PUSH
1544: LD_INT 53
1546: PUSH
1547: LD_INT 54
1549: PUSH
1550: LD_INT 55
1552: PUSH
1553: LD_INT 56
1555: PUSH
1556: LD_INT 57
1558: PUSH
1559: LD_INT 58
1561: PUSH
1562: LD_INT 59
1564: PUSH
1565: LD_INT 63
1567: PUSH
1568: LD_INT 64
1570: PUSH
1571: LD_INT 65
1573: PUSH
1574: LD_INT 82
1576: PUSH
1577: LD_INT 83
1579: PUSH
1580: LD_INT 84
1582: PUSH
1583: LD_INT 85
1585: PUSH
1586: LD_INT 86
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: ST_TO_ADDR
1644: GO 1647
1646: POP
// if state > - 1 and state < 3 then
1647: LD_VAR 0 3
1651: PUSH
1652: LD_INT 1
1654: NEG
1655: GREATER
1656: PUSH
1657: LD_VAR 0 3
1661: PUSH
1662: LD_INT 3
1664: LESS
1665: AND
1666: IFFALSE 1723
// for i in result do
1668: LD_ADDR_VAR 0 5
1672: PUSH
1673: LD_VAR 0 4
1677: PUSH
1678: FOR_IN
1679: IFFALSE 1721
// if GetTech ( i , side ) <> state then
1681: LD_VAR 0 5
1685: PPUSH
1686: LD_VAR 0 1
1690: PPUSH
1691: CALL_OW 321
1695: PUSH
1696: LD_VAR 0 3
1700: NONEQUAL
1701: IFFALSE 1719
// result := result diff i ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: LD_VAR 0 4
1712: PUSH
1713: LD_VAR 0 5
1717: DIFF
1718: ST_TO_ADDR
1719: GO 1678
1721: POP
1722: POP
// end ; end_of_file
1723: LD_VAR 0 4
1727: RET
// export Heike , Omar , Shariff , Ibrahim ; export function PrepareArabian ; var i ; begin
1728: LD_INT 0
1730: PPUSH
1731: PPUSH
// uc_side := 2 ;
1732: LD_ADDR_OWVAR 20
1736: PUSH
1737: LD_INT 2
1739: ST_TO_ADDR
// uc_nation := 2 ;
1740: LD_ADDR_OWVAR 21
1744: PUSH
1745: LD_INT 2
1747: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1748: LD_ADDR_EXP 3
1752: PUSH
1753: LD_STRING Heike
1755: PPUSH
1756: LD_EXP 1
1760: NOT
1761: PPUSH
1762: LD_EXP 2
1766: PPUSH
1767: CALL 37 0 3
1771: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1772: LD_ADDR_EXP 6
1776: PUSH
1777: LD_STRING Ibrahim
1779: PPUSH
1780: LD_EXP 1
1784: NOT
1785: PPUSH
1786: LD_EXP 2
1790: PPUSH
1791: CALL 37 0 3
1795: ST_TO_ADDR
// uc_side := 5 ;
1796: LD_ADDR_OWVAR 20
1800: PUSH
1801: LD_INT 5
1803: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1804: LD_ADDR_EXP 4
1808: PUSH
1809: LD_STRING Omar
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: LD_STRING 
1817: PPUSH
1818: CALL 37 0 3
1822: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1823: LD_ADDR_EXP 5
1827: PUSH
1828: LD_STRING Abdul
1830: PPUSH
1831: LD_INT 0
1833: PPUSH
1834: LD_STRING 
1836: PPUSH
1837: CALL 37 0 3
1841: ST_TO_ADDR
// end ;
1842: LD_VAR 0 1
1846: RET
