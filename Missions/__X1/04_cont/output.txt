// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6712 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8272 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 37914 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 37914 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 37914 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 37914 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 37914 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 37914 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 37914 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 37914 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 37914 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 37914 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 37914 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 37914 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 37914 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 37914 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 37914 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 37914 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ;
6231: PPOPN 1
6233: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6234: LD_EXP 40
6238: PPUSH
6239: CALL_OW 303
6243: PUSH
6244: LD_EXP 40
6248: PPUSH
6249: CALL_OW 301
6253: OR
6254: PUSH
6255: LD_INT 71
6257: PPUSH
6258: CALL_OW 303
6262: OR
6263: PUSH
6264: LD_INT 71
6266: PPUSH
6267: CALL_OW 301
6271: OR
6272: IFFALSE 6595
6274: GO 6276
6276: DISABLE
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: LD_EXP 44
6292: PPUSH
6293: LD_INT 25
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PPUSH
6303: CALL_OW 72
6307: ST_TO_ADDR
// if not tmp then
6308: LD_VAR 0 2
6312: NOT
6313: IFFALSE 6317
// exit ;
6315: GO 6595
// barracks := HexInfo ( 166 , 116 ) ;
6317: LD_ADDR_VAR 0 4
6321: PUSH
6322: LD_INT 166
6324: PPUSH
6325: LD_INT 116
6327: PPUSH
6328: CALL_OW 428
6332: ST_TO_ADDR
// for i in tmp do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6357
// ComExitBuilding ( i ) ;
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 122
6355: GO 6343
6357: POP
6358: POP
// repeat wait ( 0 0$1 ) ;
6359: LD_INT 35
6361: PPUSH
6362: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_EXP 44
6375: PPUSH
6376: LD_INT 25
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 50
6388: PUSH
6389: EMPTY
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 72
6400: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_INT 21
6408: PPUSH
6409: LD_INT 81
6411: PUSH
6412: LD_INT 6
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 70
6423: ST_TO_ADDR
// if enemy then
6424: LD_VAR 0 3
6428: IFFALSE 6473
// begin for i in tmp do
6430: LD_ADDR_VAR 0 1
6434: PUSH
6435: LD_VAR 0 2
6439: PUSH
6440: FOR_IN
6441: IFFALSE 6469
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6443: LD_VAR 0 1
6447: PPUSH
6448: LD_VAR 0 3
6452: PPUSH
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 74
6462: PPUSH
6463: CALL_OW 115
6467: GO 6440
6469: POP
6470: POP
// end else
6471: GO 6588
// begin for i in tmp do
6473: LD_ADDR_VAR 0 1
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: FOR_IN
6484: IFFALSE 6586
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6486: LD_VAR 0 1
6490: PPUSH
6491: CALL_OW 314
6495: PUSH
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_INT 21
6503: PPUSH
6504: CALL_OW 308
6508: NOT
6509: OR
6510: IFFALSE 6584
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL_OW 256
6521: PUSH
6522: LD_INT 600
6524: LESS
6525: PUSH
6526: LD_VAR 0 4
6530: PPUSH
6531: CALL_OW 302
6535: AND
6536: PUSH
6537: LD_VAR 0 4
6541: PPUSH
6542: CALL_OW 313
6546: PUSH
6547: LD_INT 6
6549: LESS
6550: AND
6551: IFFALSE 6569
// ComEnterUnit ( i , barracks ) else
6553: LD_VAR 0 1
6557: PPUSH
6558: LD_VAR 0 4
6562: PPUSH
6563: CALL_OW 120
6567: GO 6584
// ComMoveXY ( i , 162 , 109 ) ;
6569: LD_VAR 0 1
6573: PPUSH
6574: LD_INT 162
6576: PPUSH
6577: LD_INT 109
6579: PPUSH
6580: CALL_OW 111
6584: GO 6483
6586: POP
6587: POP
// end ; until not tmp ;
6588: LD_VAR 0 2
6592: NOT
6593: IFFALSE 6359
// end ;
6595: PPOPN 4
6597: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6598: LD_INT 106
6600: PPUSH
6601: CALL_OW 303
6605: PUSH
6606: LD_INT 106
6608: PPUSH
6609: CALL_OW 301
6613: OR
6614: IFFALSE 6709
6616: GO 6618
6618: DISABLE
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_EXP 45
6632: PPUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: CALL_OW 72
6647: ST_TO_ADDR
// if not tmp then
6648: LD_VAR 0 2
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6709
// for i in tmp do
6657: LD_ADDR_VAR 0 1
6661: PUSH
6662: LD_VAR 0 2
6666: PUSH
6667: FOR_IN
6668: IFFALSE 6707
// begin if IsInUnit ( i ) then
6670: LD_VAR 0 1
6674: PPUSH
6675: CALL_OW 310
6679: IFFALSE 6690
// ComExitBuilding ( i ) ;
6681: LD_VAR 0 1
6685: PPUSH
6686: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 66
6697: PPUSH
6698: LD_INT 128
6700: PPUSH
6701: CALL_OW 171
// end ;
6705: GO 6667
6707: POP
6708: POP
// end ; end_of_file
6709: PPOPN 2
6711: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
6716: PPUSH
// SetBName ( omikron , omikron ) ;
6717: LD_INT 64
6719: PPUSH
6720: LD_STRING omikron
6722: PPUSH
6723: CALL_OW 500
// uc_side := 4 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 4
6734: ST_TO_ADDR
// uc_nation := 1 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 1
6742: ST_TO_ADDR
// omicronSquad := [ ] ;
6743: LD_ADDR_EXP 51
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 2
6767: PUSH
6768: LD_INT 30
6770: PUSH
6771: LD_INT 32
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: LD_INT 31
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: PUSH
6802: FOR_IN
6803: IFFALSE 6860
// begin PrepareHuman ( false , 1 , 1 ) ;
6805: LD_INT 0
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 380
// un := CreateHuman ;
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: CALL_OW 44
6827: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6828: LD_ADDR_EXP 51
6832: PUSH
6833: LD_EXP 51
6837: PUSH
6838: LD_VAR 0 3
6842: UNION
6843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_VAR 0 2
6853: PPUSH
6854: CALL_OW 52
// end ;
6858: GO 6802
6860: POP
6861: POP
// for i := 1 to 3 do
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_INT 3
6874: PUSH
6875: FOR_TO
6876: IFFALSE 6931
// begin PrepareHuman ( false , 2 , 2 ) ;
6878: LD_INT 0
6880: PPUSH
6881: LD_INT 2
6883: PPUSH
6884: LD_INT 2
6886: PPUSH
6887: CALL_OW 380
// un := CreateHuman ;
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: CALL_OW 44
6900: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6901: LD_ADDR_EXP 51
6905: PUSH
6906: LD_EXP 51
6910: PUSH
6911: LD_VAR 0 3
6915: UNION
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_INT 64
6924: PPUSH
6925: CALL_OW 52
// end ;
6929: GO 6875
6931: POP
6932: POP
// for i := 1 to 2 do
6933: LD_ADDR_VAR 0 2
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 7086
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6949: LD_INT 4
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: LD_INT 2
6957: PPUSH
6958: LD_INT 2
6960: PPUSH
6961: LD_INT 1
6963: PPUSH
6964: LD_INT 3
6966: PPUSH
6967: LD_INT 100
6969: PPUSH
6970: CALL 370 0 7
// un := CreateVehicle ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: CALL_OW 45
6983: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6984: LD_ADDR_EXP 51
6988: PUSH
6989: LD_EXP 51
6993: PUSH
6994: LD_VAR 0 3
6998: UNION
6999: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_INT 28
7007: PPUSH
7008: LD_INT 37
7010: PPUSH
7011: LD_INT 6
7013: PPUSH
7014: LD_INT 0
7016: PPUSH
7017: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7021: LD_INT 0
7023: PPUSH
7024: LD_INT 3
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 380
// un := CreateHuman ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7044: LD_ADDR_EXP 51
7048: PUSH
7049: LD_EXP 51
7053: PUSH
7054: LD_VAR 0 3
7058: UNION
7059: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7060: LD_VAR 0 3
7064: PPUSH
7065: LD_EXP 51
7069: PUSH
7070: LD_EXP 51
7074: PUSH
7075: LD_INT 1
7077: MINUS
7078: ARRAY
7079: PPUSH
7080: CALL_OW 52
// end ;
7084: GO 6946
7086: POP
7087: POP
// end ;
7088: LD_VAR 0 1
7092: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7093: LD_INT 0
7095: PPUSH
7096: PPUSH
7097: PPUSH
7098: PPUSH
// uc_side := 4 ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_INT 4
7106: ST_TO_ADDR
// uc_nation := 1 ;
7107: LD_ADDR_OWVAR 21
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// tmp := [ ] ;
7115: LD_ADDR_VAR 0 4
7119: PUSH
7120: EMPTY
7121: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7122: LD_INT 4
7124: PPUSH
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 2
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 4
7139: PPUSH
7140: LD_INT 77
7142: PPUSH
7143: CALL 370 0 7
// un := CreateVehicle ;
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: CALL_OW 45
7156: ST_TO_ADDR
// tmp := tmp union un ;
7157: LD_ADDR_VAR 0 4
7161: PUSH
7162: LD_VAR 0 4
7166: PUSH
7167: LD_VAR 0 3
7171: UNION
7172: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7173: LD_VAR 0 3
7177: PPUSH
7178: LD_INT 2
7180: PPUSH
7181: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7185: LD_VAR 0 3
7189: PPUSH
7190: LD_INT 106
7192: PPUSH
7193: LD_INT 3
7195: PPUSH
7196: LD_INT 0
7198: PPUSH
7199: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7203: LD_INT 0
7205: PPUSH
7206: LD_INT 3
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 380
// un := CreateHuman ;
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: CALL_OW 44
7225: ST_TO_ADDR
// tmp := tmp union un ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_VAR 0 4
7235: PUSH
7236: LD_VAR 0 3
7240: UNION
7241: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7242: LD_VAR 0 3
7246: PPUSH
7247: LD_VAR 0 4
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: LD_INT 1
7259: MINUS
7260: ARRAY
7261: PPUSH
7262: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7266: LD_VAR 0 3
7270: PPUSH
7271: LD_INT 109
7273: PPUSH
7274: LD_INT 9
7276: PPUSH
7277: CALL_OW 111
// wait ( 0 0$1 ) ;
7281: LD_INT 35
7283: PPUSH
7284: CALL_OW 67
// for i := 1 to 2 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 2
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7366
// begin PrepareHuman ( false , 1 , 2 ) ;
7304: LD_INT 0
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 2
7312: PPUSH
7313: CALL_OW 380
// un := CreateHuman ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: CALL_OW 44
7326: ST_TO_ADDR
// tmp := tmp union un ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 3
7341: UNION
7342: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7343: LD_VAR 0 3
7347: PPUSH
7348: LD_INT 105
7350: PPUSH
7351: LD_INT 2
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 50
// end ;
7364: GO 7301
7366: POP
7367: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7368: LD_VAR 0 4
7372: PPUSH
7373: LD_INT 26
7375: PPUSH
7376: LD_INT 35
7378: PPUSH
7379: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7383: LD_INT 35
7385: PPUSH
7386: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7390: LD_VAR 0 4
7394: PPUSH
7395: LD_INT 50
7397: PUSH
7398: EMPTY
7399: LIST
7400: PPUSH
7401: CALL_OW 72
7405: NOT
7406: IFFALSE 7410
// exit ;
7408: GO 7537
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7410: LD_VAR 0 4
7414: PPUSH
7415: LD_INT 91
7417: PUSH
7418: LD_INT 64
7420: PUSH
7421: LD_INT 12
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 72
7433: PUSH
7434: LD_VAR 0 4
7438: EQUAL
7439: IFFALSE 7383
// omicronSquad := omicronSquad union tmp ;
7441: LD_ADDR_EXP 51
7445: PUSH
7446: LD_EXP 51
7450: PUSH
7451: LD_VAR 0 4
7455: UNION
7456: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 4
7466: PPUSH
7467: LD_INT 25
7469: PUSH
7470: LD_INT 1
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: FOR_IN
7483: IFFALSE 7535
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7485: LD_VAR 0 2
7489: PPUSH
7490: LD_INT 22
7492: PUSH
7493: LD_INT 4
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 30
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PPUSH
7514: CALL_OW 69
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 74
7528: PPUSH
7529: CALL_OW 120
7533: GO 7482
7535: POP
7536: POP
// end ;
7537: LD_VAR 0 1
7541: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7542: LD_EXP 13
7546: NOT
7547: IFFALSE 8118
7549: GO 7551
7551: DISABLE
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
// begin enable ;
7558: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 21
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: LD_INT 24
7589: PUSH
7590: LD_INT 1000
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 69
7610: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_EXP 51
7620: PPUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: ST_TO_ADDR
// if filter and tmp then
7636: LD_VAR 0 2
7640: PUSH
7641: LD_VAR 0 3
7645: AND
7646: IFFALSE 7719
// begin for i in tmp do
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_VAR 0 3
7657: PUSH
7658: FOR_IN
7659: IFFALSE 7715
// if IsInUnit ( i ) then
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 310
7670: IFFALSE 7683
// ComExitBuilding ( i ) else
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 122
7681: GO 7713
// if not HasTask ( i ) then
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 314
7692: NOT
7693: IFFALSE 7713
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_VAR 0 2
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: CALL_OW 130
7713: GO 7658
7715: POP
7716: POP
// end else
7717: GO 7790
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7719: LD_VAR 0 3
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 54
7729: PUSH
7730: EMPTY
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 72
7741: IFFALSE 7790
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 54
7758: PUSH
7759: EMPTY
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 72
7770: PUSH
7771: FOR_IN
7772: IFFALSE 7788
// ComEnterUnit ( i , omikron ) ;
7774: LD_VAR 0 1
7778: PPUSH
7779: LD_INT 64
7781: PPUSH
7782: CALL_OW 120
7786: GO 7771
7788: POP
7789: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7790: LD_ADDR_VAR 0 2
7794: PUSH
7795: LD_EXP 51
7799: PPUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 2
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PPUSH
7810: CALL_OW 72
7814: ST_TO_ADDR
// if not filter then
7815: LD_VAR 0 2
7819: NOT
7820: IFFALSE 7824
// exit ;
7822: GO 8118
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7824: LD_ADDR_VAR 0 4
7828: PUSH
7829: LD_INT 13
7831: PPUSH
7832: LD_INT 81
7834: PUSH
7835: LD_INT 4
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 70
7846: ST_TO_ADDR
// if enemy then
7847: LD_VAR 0 4
7851: IFFALSE 8118
// begin for i in filter do
7853: LD_ADDR_VAR 0 1
7857: PUSH
7858: LD_VAR 0 2
7862: PUSH
7863: FOR_IN
7864: IFFALSE 8116
// begin tmp := IsDrivenBy ( i ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 311
7880: ST_TO_ADDR
// if not tmp then
7881: LD_VAR 0 3
7885: NOT
7886: IFFALSE 7890
// continue ;
7888: GO 7863
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7890: LD_VAR 0 1
7894: PPUSH
7895: CALL_OW 256
7899: PUSH
7900: LD_INT 600
7902: GREATEREQUAL
7903: PUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 110
7913: PUSH
7914: LD_INT 1
7916: NONEQUAL
7917: AND
7918: IFFALSE 7944
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7920: LD_VAR 0 1
7924: PPUSH
7925: LD_VAR 0 4
7929: PPUSH
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 74
7939: PPUSH
7940: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 256
7953: PUSH
7954: LD_INT 600
7956: LESS
7957: PUSH
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL_OW 110
7967: PUSH
7968: LD_INT 1
7970: NONEQUAL
7971: AND
7972: IFFALSE 8001
// begin SetTag ( i , 1 ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: LD_INT 27
7993: PPUSH
7994: LD_INT 35
7996: PPUSH
7997: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 110
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: PUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: LD_INT 27
8022: PPUSH
8023: LD_INT 35
8025: PPUSH
8026: CALL_OW 297
8030: PUSH
8031: LD_INT 6
8033: LESS
8034: AND
8035: PUSH
8036: LD_VAR 0 3
8040: AND
8041: IFFALSE 8114
// begin ComExitVehicle ( tmp ) ;
8043: LD_VAR 0 3
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8052: LD_VAR 0 3
8056: PPUSH
8057: LD_VAR 0 1
8061: PPUSH
8062: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8066: LD_INT 35
8068: PPUSH
8069: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 256
8082: PUSH
8083: LD_INT 1000
8085: EQUAL
8086: IFFALSE 8066
// ComEnterUnit ( tmp , i ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 120
// SetTag ( i , 0 ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 109
// end ; end ;
8114: GO 7863
8116: POP
8117: POP
// end ; end ;
8118: PPOPN 4
8120: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8121: LD_EXP 13
8125: IFFALSE 8269
8127: GO 8129
8129: DISABLE
8130: LD_INT 0
8132: PPUSH
8133: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_EXP 51
8143: PPUSH
8144: LD_INT 21
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 50
8156: PUSH
8157: EMPTY
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 72
8168: ST_TO_ADDR
// if not tmp then
8169: LD_VAR 0 2
8173: NOT
8174: IFFALSE 8178
// exit ;
8176: GO 8269
// repeat wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in tmp do
8185: LD_ADDR_VAR 0 1
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8260
// begin ComExit ( i ) ;
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL 75780 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8207: LD_VAR 0 1
8211: PPUSH
8212: LD_INT 14
8214: PPUSH
8215: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8219: LD_VAR 0 1
8223: PPUSH
8224: LD_INT 14
8226: PPUSH
8227: CALL_OW 308
8231: IFFALSE 8258
// begin tmp := tmp diff i ;
8233: LD_ADDR_VAR 0 2
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: LD_VAR 0 1
8247: DIFF
8248: ST_TO_ADDR
// RemoveUnit ( i ) ;
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 64
// end ; end ;
8258: GO 8195
8260: POP
8261: POP
// until not tmp ;
8262: LD_VAR 0 2
8266: NOT
8267: IFFALSE 8178
// end ; end_of_file
8269: PPOPN 2
8271: END
// export function Action ; var i , un , veh , tmp ; begin
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
// InGameOn ;
8279: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8283: LD_INT 179
8285: PPUSH
8286: LD_INT 5
8288: PPUSH
8289: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8293: LD_ADDR_VAR 0 4
8297: PUSH
8298: LD_INT 2
8300: PPUSH
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 12
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: LD_INT 24
8315: PPUSH
8316: LD_INT 33
8318: PPUSH
8319: CALL 370 0 7
8323: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8324: LD_VAR 0 4
8328: PPUSH
8329: LD_INT 2
8331: PPUSH
8332: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8336: LD_VAR 0 4
8340: PPUSH
8341: LD_INT 178
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8354: LD_EXP 25
8358: PPUSH
8359: LD_VAR 0 4
8363: PPUSH
8364: CALL_OW 52
// if Kamil then
8368: LD_EXP 29
8372: IFFALSE 8407
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8374: LD_EXP 29
8378: PPUSH
8379: LD_INT 207
8381: PPUSH
8382: LD_INT 37
8384: PPUSH
8385: LD_INT 0
8387: PPUSH
8388: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8392: LD_EXP 29
8396: PPUSH
8397: LD_INT 211
8399: PPUSH
8400: LD_INT 38
8402: PPUSH
8403: CALL_OW 118
// end ; if Sophia then
8407: LD_EXP 31
8411: IFFALSE 8446
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8413: LD_EXP 31
8417: PPUSH
8418: LD_INT 209
8420: PPUSH
8421: LD_INT 40
8423: PPUSH
8424: LD_INT 0
8426: PPUSH
8427: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8431: LD_EXP 31
8435: PPUSH
8436: LD_INT 211
8438: PPUSH
8439: LD_INT 38
8441: PPUSH
8442: CALL_OW 118
// end ; if Givi then
8446: LD_EXP 26
8450: IFFALSE 8485
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8452: LD_EXP 26
8456: PPUSH
8457: LD_INT 201
8459: PPUSH
8460: LD_INT 34
8462: PPUSH
8463: LD_INT 0
8465: PPUSH
8466: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8470: LD_EXP 26
8474: PPUSH
8475: LD_INT 206
8477: PPUSH
8478: LD_INT 36
8480: PPUSH
8481: CALL_OW 118
// end ; if Ibrahim then
8485: LD_EXP 28
8489: IFFALSE 8524
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8491: LD_EXP 28
8495: PPUSH
8496: LD_INT 202
8498: PPUSH
8499: LD_INT 39
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8509: LD_EXP 28
8513: PPUSH
8514: LD_INT 206
8516: PPUSH
8517: LD_INT 36
8519: PPUSH
8520: CALL_OW 118
// end ; if Markov then
8524: LD_EXP 32
8528: IFFALSE 8615
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8530: LD_ADDR_VAR 0 4
8534: PUSH
8535: LD_INT 2
8537: PPUSH
8538: LD_INT 2
8540: PPUSH
8541: LD_INT 13
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 1
8549: PPUSH
8550: LD_INT 25
8552: PPUSH
8553: LD_INT 80
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_OWVAR 67
8563: MUL
8564: MINUS
8565: PPUSH
8566: CALL 370 0 7
8570: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8571: LD_VAR 0 4
8575: PPUSH
8576: LD_INT 2
8578: PPUSH
8579: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8583: LD_VAR 0 4
8587: PPUSH
8588: LD_INT 197
8590: PPUSH
8591: LD_INT 35
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8601: LD_EXP 32
8605: PPUSH
8606: LD_VAR 0 4
8610: PPUSH
8611: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8615: LD_ADDR_VAR 0 5
8619: PUSH
8620: LD_EXP 30
8624: PUSH
8625: LD_EXP 37
8629: UNION
8630: ST_TO_ADDR
// for i in tmp do
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_VAR 0 5
8640: PUSH
8641: FOR_IN
8642: IFFALSE 8676
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8644: LD_VAR 0 2
8648: PPUSH
8649: LD_INT 203
8651: PPUSH
8652: LD_INT 41
8654: PPUSH
8655: LD_INT 6
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 50
// ComHold ( i ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 140
// end ;
8674: GO 8641
8676: POP
8677: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8678: LD_INT 22
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 25
8690: PUSH
8691: LD_INT 2
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 69
8706: NOT
8707: IFFALSE 8721
// SetClass ( Heike , 2 ) ;
8709: LD_EXP 25
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8721: LD_EXP 25
8725: PPUSH
8726: LD_INT 183
8728: PPUSH
8729: LD_INT 12
8731: PPUSH
8732: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8736: LD_EXP 25
8740: PPUSH
8741: LD_INT 188
8743: PPUSH
8744: LD_INT 20
8746: PPUSH
8747: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8751: LD_EXP 25
8755: PPUSH
8756: LD_INT 191
8758: PPUSH
8759: LD_INT 25
8761: PPUSH
8762: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8766: LD_EXP 25
8770: PPUSH
8771: LD_INT 203
8773: PPUSH
8774: LD_INT 29
8776: PPUSH
8777: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8781: LD_EXP 25
8785: PPUSH
8786: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8790: LD_INT 35
8792: PPUSH
8793: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8797: LD_EXP 25
8801: PPUSH
8802: CALL_OW 310
8806: NOT
8807: IFFALSE 8790
// CenterOnUnits ( Heike ) ;
8809: LD_EXP 25
8813: PPUSH
8814: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 2
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 21
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: PUSH
8852: LD_EXP 25
8856: PUSH
8857: LD_EXP 32
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: DIFF
8866: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8867: LD_VAR 0 5
8871: PPUSH
8872: LD_EXP 25
8876: PPUSH
8877: CALL_OW 119
// if Givi then
8881: LD_EXP 26
8885: IFFALSE 8903
// ComTurnUnit ( Heike , Givi ) else
8887: LD_EXP 25
8891: PPUSH
8892: LD_EXP 26
8896: PPUSH
8897: CALL_OW 119
8901: GO 8921
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8903: LD_EXP 25
8907: PPUSH
8908: LD_VAR 0 5
8912: PUSH
8913: LD_INT 1
8915: ARRAY
8916: PPUSH
8917: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-Start-1
8928: PPUSH
8929: CALL_OW 88
// if Givi then
8933: LD_EXP 26
8937: IFFALSE 8984
// begin Say ( Givi , DG-Start-2 ) ;
8939: LD_EXP 26
8943: PPUSH
8944: LD_STRING DG-Start-2
8946: PPUSH
8947: CALL_OW 88
// if not Mike then
8951: LD_EXP 27
8955: NOT
8956: IFFALSE 8982
// begin Say ( Givi , DG-Start-b-3 ) ;
8958: LD_EXP 26
8962: PPUSH
8963: LD_STRING DG-Start-b-3
8965: PPUSH
8966: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8970: LD_EXP 25
8974: PPUSH
8975: LD_STRING DH-Start-b-4
8977: PPUSH
8978: CALL_OW 88
// end ; end else
8982: GO 9049
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8984: LD_EXP 37
8988: PPUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 72
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_STRING DArm-Start-a-2
9010: PPUSH
9011: CALL_OW 88
9015: NOT
9016: IFFALSE 9049
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9018: LD_EXP 37
9022: PPUSH
9023: LD_INT 26
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PPUSH
9033: CALL_OW 72
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING DArf-Start-a-2
9044: PPUSH
9045: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9049: LD_EXP 25
9053: PPUSH
9054: LD_INT 211
9056: PPUSH
9057: LD_INT 38
9059: PPUSH
9060: CALL_OW 118
// wait ( 0 0$1 ) ;
9064: LD_INT 35
9066: PPUSH
9067: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9071: LD_EXP 25
9075: PPUSH
9076: LD_STRING DH-Start-3
9078: PPUSH
9079: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9083: LD_EXP 25
9087: PPUSH
9088: LD_STRING DH-Start-4
9090: PPUSH
9091: CALL_OW 88
// InGameOff ;
9095: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9099: LD_STRING Prepare
9101: PPUSH
9102: CALL_OW 337
// SaveForQuickRestart ;
9106: CALL_OW 22
// wait ( 0 0$10 ) ;
9110: LD_INT 350
9112: PPUSH
9113: CALL_OW 67
// if not Aviradze then
9117: LD_EXP 35
9121: NOT
9122: IFFALSE 9126
// exit ;
9124: GO 9366
// SetDir ( Aviradze , 4 ) ;
9126: LD_EXP 35
9130: PPUSH
9131: LD_INT 4
9133: PPUSH
9134: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9138: LD_EXP 35
9142: PPUSH
9143: LD_INT 225
9145: PPUSH
9146: LD_INT 33
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 48
// for i := 1 to 2 do
9156: LD_ADDR_VAR 0 2
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_INT 2
9168: PUSH
9169: FOR_TO
9170: IFFALSE 9301
// begin uc_side := 2 ;
9172: LD_ADDR_OWVAR 20
9176: PUSH
9177: LD_INT 2
9179: ST_TO_ADDR
// uc_nation := 0 ;
9180: LD_ADDR_OWVAR 21
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9188: LD_INT 0
9190: PPUSH
9191: LD_INT 12
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 380
// hc_gallery :=  ;
9201: LD_ADDR_OWVAR 33
9205: PUSH
9206: LD_STRING 
9208: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9209: LD_ADDR_OWVAR 26
9213: PUSH
9214: LD_STRING Artudito
9216: PUSH
9217: LD_STRING Textur
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_VAR 0 2
9228: ARRAY
9229: ST_TO_ADDR
// un := CreateHuman ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_INT 224
9247: PUSH
9248: LD_INT 226
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_VAR 0 2
9259: ARRAY
9260: PPUSH
9261: LD_INT 31
9263: PUSH
9264: LD_INT 35
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_VAR 0 2
9275: ARRAY
9276: PPUSH
9277: LD_INT 0
9279: PPUSH
9280: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9284: LD_VAR 0 3
9288: PPUSH
9289: LD_INT 215
9291: PPUSH
9292: LD_INT 36
9294: PPUSH
9295: CALL_OW 111
// end ;
9299: GO 9169
9301: POP
9302: POP
// hc_name :=  ;
9303: LD_ADDR_OWVAR 26
9307: PUSH
9308: LD_STRING 
9310: ST_TO_ADDR
// InitHc ;
9311: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9315: LD_EXP 35
9319: PPUSH
9320: LD_INT 215
9322: PPUSH
9323: LD_INT 36
9325: PPUSH
9326: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9330: LD_EXP 35
9334: PPUSH
9335: LD_STRING DA-Arrive-1
9337: PPUSH
9338: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9342: LD_EXP 25
9346: PPUSH
9347: LD_STRING DH-Arrive-2
9349: PPUSH
9350: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9354: LD_EXP 35
9358: PPUSH
9359: LD_STRING DA-Arrive-3
9361: PPUSH
9362: CALL_OW 88
// end ;
9366: LD_VAR 0 1
9370: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p ;
9371: LD_EXP 3
9375: IFFALSE 10817
9377: GO 9379
9379: DISABLE
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
9385: PPUSH
// begin DialogueOn ;
9386: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9390: LD_EXP 25
9394: PPUSH
9395: LD_STRING DH-base-1
9397: PPUSH
9398: CALL_OW 88
// if Markov then
9402: LD_EXP 32
9406: IFFALSE 9458
// begin Say ( Markov , DMar-base-2 ) ;
9408: LD_EXP 32
9412: PPUSH
9413: LD_STRING DMar-base-2
9415: PPUSH
9416: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9420: LD_EXP 32
9424: PPUSH
9425: LD_STRING DMar-base-3
9427: PPUSH
9428: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9432: LD_EXP 25
9436: PPUSH
9437: LD_STRING DH-base-4
9439: PPUSH
9440: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9444: LD_EXP 32
9448: PPUSH
9449: LD_STRING DMar-base-5
9451: PPUSH
9452: CALL_OW 88
// end else
9456: GO 9535
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9458: LD_EXP 37
9462: PPUSH
9463: LD_INT 26
9465: PUSH
9466: LD_INT 1
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PPUSH
9473: CALL_OW 72
9477: PUSH
9478: LD_INT 1
9480: ARRAY
9481: PPUSH
9482: LD_STRING DArm-base-a-2
9484: PPUSH
9485: CALL_OW 88
9489: NOT
9490: IFFALSE 9523
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9492: LD_EXP 37
9496: PPUSH
9497: LD_INT 26
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PPUSH
9507: CALL_OW 72
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: LD_STRING DArf-base-a-2
9518: PPUSH
9519: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9523: LD_EXP 25
9527: PPUSH
9528: LD_STRING DH-base-a-3
9530: PPUSH
9531: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9535: LD_EXP 35
9539: PPUSH
9540: LD_STRING DA-base-6
9542: PPUSH
9543: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9547: LD_EXP 35
9551: PPUSH
9552: LD_STRING DA-base-7
9554: PPUSH
9555: CALL_OW 88
// DialogueOff ;
9559: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9563: LD_STRING Flamethrower
9565: PPUSH
9566: CALL_OW 337
// wait ( 2 2$00 ) ;
9570: LD_INT 4200
9572: PPUSH
9573: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9577: LD_EXP 34
9581: PUSH
9582: LD_EXP 27
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: LD_INT 203
9593: PPUSH
9594: LD_INT 37
9596: PPUSH
9597: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9601: LD_INT 22
9603: PUSH
9604: LD_INT 2
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 92
9613: PUSH
9614: LD_INT 203
9616: PUSH
9617: LD_INT 37
9619: PUSH
9620: LD_INT 10
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PPUSH
9633: CALL_OW 69
9637: NOT
9638: IFFALSE 9678
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9640: LD_EXP 34
9644: PUSH
9645: LD_EXP 27
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PPUSH
9654: LD_EXP 25
9658: PPUSH
9659: CALL_OW 250
9663: PPUSH
9664: LD_EXP 25
9668: PPUSH
9669: CALL_OW 251
9673: PPUSH
9674: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9678: LD_INT 35
9680: PPUSH
9681: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9685: LD_INT 2
9687: PPUSH
9688: LD_EXP 34
9692: PPUSH
9693: CALL_OW 292
9697: PUSH
9698: LD_EXP 34
9702: PPUSH
9703: LD_EXP 25
9707: PPUSH
9708: CALL_OW 296
9712: PUSH
9713: LD_INT 8
9715: LESS
9716: PUSH
9717: LD_EXP 34
9721: PPUSH
9722: LD_INT 22
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 21
9734: PUSH
9735: LD_INT 3
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PPUSH
9746: CALL_OW 69
9750: PPUSH
9751: LD_EXP 34
9755: PPUSH
9756: CALL_OW 74
9760: PPUSH
9761: CALL_OW 296
9765: PUSH
9766: LD_INT 7
9768: LESS
9769: OR
9770: AND
9771: PUSH
9772: LD_EXP 34
9776: PPUSH
9777: LD_INT 10
9779: PPUSH
9780: CALL_OW 308
9784: NOT
9785: AND
9786: IFFALSE 9678
// InGameOn ;
9788: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9792: LD_EXP 34
9796: PPUSH
9797: CALL_OW 87
// if IsInUnit ( Heike ) then
9801: LD_EXP 25
9805: PPUSH
9806: CALL_OW 310
9810: IFFALSE 9821
// ComExitBuilding ( Heike ) ;
9812: LD_EXP 25
9816: PPUSH
9817: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9821: LD_EXP 34
9825: PUSH
9826: LD_EXP 27
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: LD_EXP 25
9839: PPUSH
9840: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9844: LD_EXP 25
9848: PPUSH
9849: LD_EXP 34
9853: PPUSH
9854: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9858: LD_INT 22
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 91
9870: PUSH
9871: LD_EXP 34
9875: PUSH
9876: LD_INT 10
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 3
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PPUSH
9899: CALL_OW 69
9903: IFFALSE 9929
// begin Say ( Kurt , DKs-scout-1 ) ;
9905: LD_EXP 34
9909: PPUSH
9910: LD_STRING DKs-scout-1
9912: PPUSH
9913: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9917: LD_EXP 25
9921: PPUSH
9922: LD_STRING DH-scout-2
9924: PPUSH
9925: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9929: LD_EXP 25
9933: PPUSH
9934: CALL_OW 85
// if IsInUnit ( Heike ) then
9938: LD_EXP 25
9942: PPUSH
9943: CALL_OW 310
9947: IFFALSE 9958
// ComExit ( Heike ) ;
9949: LD_EXP 25
9953: PPUSH
9954: CALL 75780 0 1
// repeat wait ( 0 0$1 ) ;
9958: LD_INT 35
9960: PPUSH
9961: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9965: LD_EXP 25
9969: PPUSH
9970: LD_EXP 34
9974: PPUSH
9975: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9979: LD_EXP 25
9983: PPUSH
9984: LD_EXP 34
9988: PPUSH
9989: CALL_OW 296
9993: PUSH
9994: LD_INT 6
9996: LESS
9997: IFFALSE 9958
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9999: LD_EXP 34
10003: PUSH
10004: LD_EXP 27
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_EXP 25
10017: PPUSH
10018: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10022: LD_EXP 34
10026: PPUSH
10027: LD_STRING DKs-scout-3
10029: PPUSH
10030: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10034: LD_EXP 30
10038: PUSH
10039: LD_EXP 30
10043: PPUSH
10044: LD_EXP 34
10048: PPUSH
10049: CALL_OW 296
10053: PUSH
10054: LD_INT 15
10056: LESS
10057: AND
10058: IFFALSE 10281
// begin p := 1 ;
10060: LD_ADDR_VAR 0 4
10064: PUSH
10065: LD_INT 1
10067: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10068: LD_EXP 30
10072: PPUSH
10073: CALL_OW 310
10077: IFFALSE 10088
// ComExit ( Kaia ) ;
10079: LD_EXP 30
10083: PPUSH
10084: CALL 75780 0 1
// wait ( 0 0$1 ) ;
10088: LD_INT 35
10090: PPUSH
10091: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10095: LD_EXP 30
10099: PPUSH
10100: LD_EXP 34
10104: PPUSH
10105: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10109: LD_INT 35
10111: PPUSH
10112: CALL_OW 67
// p := Inc ( p ) ;
10116: LD_ADDR_VAR 0 4
10120: PUSH
10121: LD_VAR 0 4
10125: PPUSH
10126: CALL 76743 0 1
10130: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10131: LD_EXP 30
10135: PPUSH
10136: LD_EXP 34
10140: PPUSH
10141: CALL_OW 296
10145: PUSH
10146: LD_INT 6
10148: LESS
10149: PUSH
10150: LD_VAR 0 4
10154: PUSH
10155: LD_INT 12
10157: GREATER
10158: OR
10159: IFFALSE 10109
// ComTurnUnit ( Kaia , Kurt ) ;
10161: LD_EXP 30
10165: PPUSH
10166: LD_EXP 34
10170: PPUSH
10171: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10175: LD_EXP 30
10179: PPUSH
10180: LD_STRING DK-scout-4
10182: PPUSH
10183: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10187: LD_EXP 34
10191: PPUSH
10192: LD_EXP 30
10196: PPUSH
10197: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10201: LD_EXP 34
10205: PPUSH
10206: LD_STRING DKs-scout-5
10208: PPUSH
10209: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10213: LD_EXP 30
10217: PPUSH
10218: LD_STRING DK-scout-6
10220: PPUSH
10221: CALL_OW 88
// if Mike then
10225: LD_EXP 27
10229: IFFALSE 10281
// begin Say ( Mike , DM-scout-7 ) ;
10231: LD_EXP 27
10235: PPUSH
10236: LD_STRING DM-scout-7
10238: PPUSH
10239: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10243: LD_EXP 30
10247: PPUSH
10248: LD_EXP 27
10252: PPUSH
10253: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10257: LD_EXP 30
10261: PPUSH
10262: LD_STRING DK-scout-8
10264: PPUSH
10265: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10269: LD_EXP 27
10273: PPUSH
10274: LD_STRING DM-scout-9
10276: PPUSH
10277: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10281: LD_INT 184
10283: PPUSH
10284: LD_INT 100
10286: PPUSH
10287: LD_INT 2
10289: PPUSH
10290: LD_INT 12
10292: NEG
10293: PPUSH
10294: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10298: LD_INT 184
10300: PPUSH
10301: LD_INT 100
10303: PPUSH
10304: LD_INT 2
10306: PPUSH
10307: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10311: LD_INT 184
10313: PPUSH
10314: LD_INT 100
10316: PPUSH
10317: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10321: LD_EXP 34
10325: PPUSH
10326: LD_STRING DKs-scout-10
10328: PPUSH
10329: CALL_OW 88
// wait ( 0 0$1 ) ;
10333: LD_INT 35
10335: PPUSH
10336: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10340: LD_INT 144
10342: PPUSH
10343: LD_INT 65
10345: PPUSH
10346: LD_INT 2
10348: PPUSH
10349: LD_INT 12
10351: NEG
10352: PPUSH
10353: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10357: LD_INT 144
10359: PPUSH
10360: LD_INT 65
10362: PPUSH
10363: LD_INT 2
10365: PPUSH
10366: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10370: LD_INT 144
10372: PPUSH
10373: LD_INT 65
10375: PPUSH
10376: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10380: LD_EXP 34
10384: PPUSH
10385: LD_STRING DKs-scout-11
10387: PPUSH
10388: CALL_OW 88
// wait ( 0 0$1 ) ;
10392: LD_INT 35
10394: PPUSH
10395: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10399: LD_EXP 34
10403: PPUSH
10404: CALL_OW 87
// if Mike and not Givi then
10408: LD_EXP 27
10412: PUSH
10413: LD_EXP 26
10417: NOT
10418: AND
10419: IFFALSE 10445
// begin Say ( Mike , DM-scout-a-1 ) ;
10421: LD_EXP 27
10425: PPUSH
10426: LD_STRING DM-scout-a-1
10428: PPUSH
10429: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10433: LD_EXP 25
10437: PPUSH
10438: LD_STRING DH-scout-a-2
10440: PPUSH
10441: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10445: LD_EXP 34
10449: PUSH
10450: LD_EXP 27
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: LD_INT 2
10461: PPUSH
10462: CALL_OW 235
// InGameOff ;
10466: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10470: LD_STRING Hill
10472: PPUSH
10473: CALL_OW 337
// Hint ( BunkerHill ) ;
10477: LD_STRING BunkerHill
10479: PPUSH
10480: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
10484: LD_INT 20
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 424
// allowToPatrol := true ;
10494: LD_ADDR_EXP 12
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10502: LD_INT 3150
10504: PPUSH
10505: CALL_OW 67
// InitHc ;
10509: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: DOUBLE
10519: LD_INT 1
10521: DEC
10522: ST_TO_ADDR
10523: LD_INT 3
10525: PUSH
10526: LD_INT 3
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_OWVAR 67
10545: ARRAY
10546: PUSH
10547: FOR_TO
10548: IFFALSE 10815
// begin uc_side := 2 ;
10550: LD_ADDR_OWVAR 20
10554: PUSH
10555: LD_INT 2
10557: ST_TO_ADDR
// uc_nation := 2 ;
10558: LD_ADDR_OWVAR 21
10562: PUSH
10563: LD_INT 2
10565: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10566: LD_INT 0
10568: PPUSH
10569: LD_INT 1
10571: PUSH
10572: LD_INT 3
10574: PUSH
10575: LD_INT 1
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: LD_VAR 0 1
10587: PUSH
10588: LD_INT 3
10590: MOD
10591: PUSH
10592: LD_INT 1
10594: PLUS
10595: ARRAY
10596: PPUSH
10597: LD_INT 3
10599: PUSH
10600: LD_INT 2
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: LD_INT 2
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: LD_OWVAR 67
10619: ARRAY
10620: PPUSH
10621: CALL_OW 380
// un := CreateHuman ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: CALL_OW 44
10634: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10635: LD_ADDR_EXP 37
10639: PUSH
10640: LD_EXP 37
10644: PUSH
10645: LD_VAR 0 2
10649: UNION
10650: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10651: LD_INT 2
10653: PPUSH
10654: LD_INT 2
10656: PPUSH
10657: LD_INT 13
10659: PPUSH
10660: LD_INT 2
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_VAR 0 1
10674: PUSH
10675: LD_INT 2
10677: MOD
10678: PUSH
10679: LD_INT 1
10681: PLUS
10682: ARRAY
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_INT 27
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: LD_INT 27
10695: PUSH
10696: LD_INT 23
10698: PUSH
10699: LD_INT 23
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: LD_OWVAR 67
10713: PUSH
10714: LD_INT 0
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 12
10724: PLUS
10725: ARRAY
10726: PPUSH
10727: LD_INT 77
10729: PPUSH
10730: CALL 370 0 7
// veh := CreateVehicle ;
10734: LD_ADDR_VAR 0 3
10738: PUSH
10739: CALL_OW 45
10743: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 2
10751: PPUSH
10752: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_INT 178
10763: PPUSH
10764: LD_INT 2
10766: PPUSH
10767: LD_INT 2
10769: PPUSH
10770: LD_INT 0
10772: PPUSH
10773: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10777: LD_VAR 0 2
10781: PPUSH
10782: LD_VAR 0 3
10786: PPUSH
10787: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10791: LD_VAR 0 2
10795: PPUSH
10796: LD_INT 183
10798: PPUSH
10799: LD_INT 11
10801: PPUSH
10802: CALL_OW 111
// wait ( 0 0$2 ) ;
10806: LD_INT 70
10808: PPUSH
10809: CALL_OW 67
// end ;
10813: GO 10547
10815: POP
10816: POP
// end ;
10817: PPOPN 4
10819: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10820: LD_EXP 4
10824: PUSH
10825: LD_EXP 35
10829: PPUSH
10830: CALL_OW 302
10834: AND
10835: IFFALSE 10884
10837: GO 10839
10839: DISABLE
// begin DialogueOn ;
10840: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10844: LD_EXP 35
10848: PPUSH
10849: LD_STRING DA-lab-1
10851: PPUSH
10852: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10856: LD_EXP 35
10860: PPUSH
10861: LD_STRING DA-lab-2
10863: PPUSH
10864: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10868: LD_EXP 25
10872: PPUSH
10873: LD_STRING DH-lab-3
10875: PPUSH
10876: CALL_OW 88
// DialogueOff ;
10880: CALL_OW 7
// end ;
10884: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10885: LD_INT 17
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: CALL_OW 321
10895: PUSH
10896: LD_INT 2
10898: EQUAL
10899: IFFALSE 11031
10901: GO 10903
10903: DISABLE
10904: LD_INT 0
10906: PPUSH
// begin DialogueOn ;
10907: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10911: LD_EXP 35
10915: PPUSH
10916: LD_STRING DA-Cam-1
10918: PPUSH
10919: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10923: LD_EXP 35
10927: PPUSH
10928: LD_STRING DA-Cam-2
10930: PPUSH
10931: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10935: LD_EXP 35
10939: PPUSH
10940: LD_STRING DA-Cam-3
10942: PPUSH
10943: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10947: LD_EXP 25
10951: PPUSH
10952: LD_STRING DH-Cam-4
10954: PPUSH
10955: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10959: LD_EXP 30
10963: PPUSH
10964: LD_STRING DK-Cam-5
10966: PPUSH
10967: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10971: LD_EXP 30
10975: PPUSH
10976: LD_STRING DK-Cam-6
10978: PPUSH
10979: CALL_OW 88
// DialogueOff ;
10983: CALL_OW 7
// Query ( Camera ) ;
10987: LD_STRING Camera
10989: PPUSH
10990: CALL_OW 97
// hiddenCameraAllowed := true ;
10994: LD_ADDR_EXP 5
10998: PUSH
10999: LD_INT 1
11001: ST_TO_ADDR
// for i in camAreas do
11002: LD_ADDR_VAR 0 1
11006: PUSH
11007: LD_EXP 8
11011: PUSH
11012: FOR_IN
11013: IFFALSE 11029
// SetAreaMapShow ( i , 1 ) ;
11015: LD_VAR 0 1
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 424
11027: GO 11012
11029: POP
11030: POP
// end ;
11031: PPOPN 1
11033: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11034: LD_EXP 8
11038: NOT
11039: PUSH
11040: LD_EXP 5
11044: AND
11045: IFFALSE 11143
11047: GO 11049
11049: DISABLE
11050: LD_INT 0
11052: PPUSH
// begin stop_talking := true ;
11053: LD_ADDR_OWVAR 56
11057: PUSH
11058: LD_INT 1
11060: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 22
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 23
11088: PUSH
11089: LD_INT 2
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 69
11105: PUSH
11106: FOR_IN
11107: IFFALSE 11126
// AddExperience ( i , 2 , 450 ) ;
11109: LD_VAR 0 1
11113: PPUSH
11114: LD_INT 2
11116: PPUSH
11117: LD_INT 450
11119: PPUSH
11120: CALL_OW 492
11124: GO 11106
11126: POP
11127: POP
// stop_talking := false ;
11128: LD_ADDR_OWVAR 56
11132: PUSH
11133: LD_INT 0
11135: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11136: LD_STRING ACH_CAMERA
11138: PPUSH
11139: CALL_OW 543
// end ;
11143: PPOPN 1
11145: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11146: LD_EXP 9
11150: PUSH
11151: LD_EXP 11
11155: NOT
11156: AND
11157: IFFALSE 11216
11159: GO 11161
11161: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11162: LD_EXP 9
11166: PPUSH
11167: CALL_OW 250
11171: PPUSH
11172: LD_EXP 9
11176: PPUSH
11177: CALL_OW 251
11181: PPUSH
11182: LD_INT 2
11184: PPUSH
11185: LD_INT 6
11187: NEG
11188: PPUSH
11189: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11193: LD_EXP 9
11197: PPUSH
11198: CALL_OW 87
// wait ( 0 0$1 ) ;
11202: LD_INT 35
11204: PPUSH
11205: CALL_OW 67
// YouLost ( Spotted ) ;
11209: LD_STRING Spotted
11211: PPUSH
11212: CALL_OW 104
// end ;
11216: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11217: LD_INT 3
11219: PUSH
11220: LD_INT 6
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: LD_INT 2
11229: PPUSH
11230: LD_EXP 47
11234: PPUSH
11235: CALL 1034 0 3
11239: IFFALSE 11272
11241: GO 11243
11243: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11244: LD_ADDR_EXP 9
11248: PUSH
11249: LD_INT 3
11251: PUSH
11252: LD_INT 6
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PPUSH
11259: LD_INT 2
11261: PPUSH
11262: LD_EXP 47
11266: PPUSH
11267: CALL 1034 0 3
11271: ST_TO_ADDR
11272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11273: LD_INT 22
11275: PUSH
11276: LD_INT 6
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 30
11285: PUSH
11286: LD_INT 32
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 3
11295: PUSH
11296: LD_INT 24
11298: PUSH
11299: LD_INT 1000
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: PPUSH
11315: CALL_OW 69
11319: IFFALSE 11380
11321: GO 11323
11323: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11324: LD_ADDR_EXP 9
11328: PUSH
11329: LD_INT 22
11331: PUSH
11332: LD_INT 6
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 30
11341: PUSH
11342: LD_INT 32
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 3
11351: PUSH
11352: LD_INT 24
11354: PUSH
11355: LD_INT 1000
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 69
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: ST_TO_ADDR
11380: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11381: LD_EXP 9
11385: PUSH
11386: LD_INT 21
11388: PPUSH
11389: LD_INT 21
11391: PUSH
11392: LD_INT 3
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 3
11401: PUSH
11402: LD_INT 24
11404: PUSH
11405: LD_INT 1000
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 70
11424: AND
11425: IFFALSE 11664
11427: GO 11429
11429: DISABLE
11430: LD_INT 0
11432: PPUSH
11433: PPUSH
11434: PPUSH
11435: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11436: LD_ADDR_VAR 0 4
11440: PUSH
11441: LD_EXP 42
11445: PUSH
11446: LD_EXP 44
11450: PUSH
11451: LD_EXP 45
11455: UNION
11456: PPUSH
11457: LD_INT 3
11459: PUSH
11460: LD_INT 25
11462: PUSH
11463: LD_INT 1
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 72
11478: UNION
11479: ST_TO_ADDR
// for i in noncombat do
11480: LD_ADDR_VAR 0 1
11484: PUSH
11485: LD_VAR 0 4
11489: PUSH
11490: FOR_IN
11491: IFFALSE 11587
// begin if IsInUnit ( i ) then
11493: LD_VAR 0 1
11497: PPUSH
11498: CALL_OW 310
11502: IFFALSE 11513
// ComExitBuilding ( i ) ;
11504: LD_VAR 0 1
11508: PPUSH
11509: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11513: LD_VAR 0 1
11517: PPUSH
11518: LD_INT 114
11520: PPUSH
11521: LD_INT 97
11523: PPUSH
11524: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11528: LD_VAR 0 1
11532: PPUSH
11533: LD_INT 99
11535: PPUSH
11536: LD_INT 128
11538: PPUSH
11539: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11543: LD_VAR 0 1
11547: PPUSH
11548: LD_INT 91
11550: PPUSH
11551: LD_INT 145
11553: PPUSH
11554: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11558: LD_VAR 0 1
11562: PPUSH
11563: LD_INT 82
11565: PPUSH
11566: LD_INT 153
11568: PPUSH
11569: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11573: LD_VAR 0 1
11577: PPUSH
11578: LD_INT 16
11580: PPUSH
11581: CALL_OW 173
// end ;
11585: GO 11490
11587: POP
11588: POP
// if not allowHeikeAttack then
11589: LD_EXP 11
11593: NOT
11594: IFFALSE 11598
// exit ;
11596: GO 11664
// wait ( 0 0$05 ) ;
11598: LD_INT 175
11600: PPUSH
11601: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11605: LD_EXP 40
11609: PPUSH
11610: LD_STRING D9a-Kur-1
11612: PPUSH
11613: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11617: LD_EXP 43
11621: PPUSH
11622: LD_STRING D9a-Bur-1
11624: PPUSH
11625: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11629: LD_EXP 40
11633: PPUSH
11634: LD_STRING D9a-Kur-2
11636: PPUSH
11637: CALL_OW 94
// omicronFall := true ;
11641: LD_ADDR_EXP 13
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11649: LD_INT 105
11651: PPUSH
11652: CALL_OW 67
// retreatFromOmicron := true ;
11656: LD_ADDR_EXP 20
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// end ;
11664: PPOPN 4
11666: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11667: LD_INT 16
11669: PPUSH
11670: LD_INT 3
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 2
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 23
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 70
11705: IFFALSE 11788
11707: GO 11709
11709: DISABLE
11710: LD_INT 0
11712: PPUSH
// begin enable ;
11713: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11714: LD_ADDR_VAR 0 1
11718: PUSH
11719: LD_INT 16
11721: PPUSH
11722: LD_INT 3
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_INT 2
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: LD_INT 23
11741: PUSH
11742: LD_INT 3
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PPUSH
11753: CALL_OW 70
11757: PUSH
11758: FOR_IN
11759: IFFALSE 11786
// begin escapeCounter := escapeCounter + 1 ;
11761: LD_ADDR_EXP 19
11765: PUSH
11766: LD_EXP 19
11770: PUSH
11771: LD_INT 1
11773: PLUS
11774: ST_TO_ADDR
// RemoveUnit ( i ) ;
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 64
// end ;
11784: GO 11758
11786: POP
11787: POP
// end ;
11788: PPOPN 1
11790: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11791: LD_OWVAR 1
11795: PUSH
11796: LD_INT 13650
11798: PUSH
11799: LD_INT 0
11801: PPUSH
11802: LD_INT 3150
11804: PPUSH
11805: CALL_OW 12
11809: PLUS
11810: GREATEREQUAL
11811: IFFALSE 11820
11813: GO 11815
11815: DISABLE
// SmallAmericanReinforcements ;
11816: CALL 7093 0 0
11820: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11821: LD_OWVAR 1
11825: PUSH
11826: LD_INT 31500
11828: PUSH
11829: LD_INT 29400
11831: PUSH
11832: LD_INT 27300
11834: PUSH
11835: LD_INT 25200
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: LD_OWVAR 67
11848: ARRAY
11849: GREATEREQUAL
11850: IFFALSE 11915
11852: GO 11854
11854: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11855: LD_EXP 48
11859: PPUSH
11860: LD_INT 21
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 72
11874: PPUSH
11875: LD_INT 62
11877: PPUSH
11878: LD_INT 22
11880: PPUSH
11881: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11885: LD_EXP 49
11889: PPUSH
11890: LD_INT 69
11892: PPUSH
11893: LD_INT 27
11895: PPUSH
11896: CALL_OW 111
// wait ( 1 1$00 ) ;
11900: LD_INT 2100
11902: PPUSH
11903: CALL_OW 67
// startAttackOnOmicron := true ;
11907: LD_ADDR_EXP 6
11911: PUSH
11912: LD_INT 1
11914: ST_TO_ADDR
// end ;
11915: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11916: LD_EXP 22
11920: PUSH
11921: LD_INT 0
11923: EQUAL
11924: IFFALSE 13974
11926: GO 11928
11928: DISABLE
11929: LD_INT 0
11931: PPUSH
11932: PPUSH
11933: PPUSH
11934: PPUSH
11935: PPUSH
11936: PPUSH
11937: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11938: LD_INT 5
11940: PPUSH
11941: LD_INT 2
11943: PPUSH
11944: CALL_OW 343
// PrepareOmarForces ;
11948: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11952: LD_INT 105
11954: PPUSH
11955: CALL_OW 67
// allowHeikeAttack := true ;
11959: LD_ADDR_EXP 11
11963: PUSH
11964: LD_INT 1
11966: ST_TO_ADDR
// activeGrishkoAI := false ;
11967: LD_ADDR_EXP 10
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11975: LD_INT 20
11977: PPUSH
11978: LD_INT 0
11980: PPUSH
11981: CALL_OW 424
// if not hillBase then
11985: LD_EXP 15
11989: NOT
11990: IFFALSE 11999
// ChangeMissionObjectives ( HillDone ) ;
11992: LD_STRING HillDone
11994: PPUSH
11995: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11999: LD_EXP 33
12003: PPUSH
12004: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12008: LD_ADDR_VAR 0 1
12012: PUSH
12013: LD_INT 22
12015: PUSH
12016: LD_INT 2
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 21
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PPUSH
12037: CALL_OW 69
12041: PUSH
12042: FOR_IN
12043: IFFALSE 12067
// if HasTask ( i ) then
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 314
12054: IFFALSE 12065
// ComHold ( i ) ;
12056: LD_VAR 0 1
12060: PPUSH
12061: CALL_OW 140
12065: GO 12042
12067: POP
12068: POP
// DialogueOn ;
12069: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12073: LD_EXP 33
12077: PPUSH
12078: LD_STRING DO-assault-1
12080: PPUSH
12081: CALL_OW 94
// DialogueOff ;
12085: CALL_OW 7
// game_speed := 4 ;
12089: LD_ADDR_OWVAR 65
12093: PUSH
12094: LD_INT 4
12096: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_EXP 46
12106: PPUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 72
12124: PUSH
12125: FOR_IN
12126: IFFALSE 12145
// ComMoveXY ( i , 226 , 114 ) ;
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_INT 226
12135: PPUSH
12136: LD_INT 114
12138: PPUSH
12139: CALL_OW 111
12143: GO 12125
12145: POP
12146: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12147: LD_EXP 41
12151: PPUSH
12152: LD_INT 22
12154: PUSH
12155: LD_INT 6
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 30
12164: PUSH
12165: LD_INT 4
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 69
12180: PPUSH
12181: LD_EXP 41
12185: PPUSH
12186: CALL_OW 74
12190: PPUSH
12191: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12195: LD_STRING Attack
12197: PPUSH
12198: CALL_OW 337
// music_class := music_combat ;
12202: LD_ADDR_OWVAR 72
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// music_nat := 4 ;
12210: LD_ADDR_OWVAR 71
12214: PUSH
12215: LD_INT 4
12217: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12218: LD_INT 5
12220: PPUSH
12221: LD_EXP 41
12225: PPUSH
12226: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12230: LD_INT 6
12232: PPUSH
12233: LD_EXP 38
12237: PPUSH
12238: LD_INT 25
12240: PUSH
12241: LD_INT 1
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PPUSH
12248: CALL_OW 72
12252: PUSH
12253: LD_INT 4
12255: ARRAY
12256: PPUSH
12257: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12261: LD_ADDR_VAR 0 1
12265: PUSH
12266: LD_EXP 38
12270: PPUSH
12271: LD_INT 3
12273: PUSH
12274: LD_INT 25
12276: PUSH
12277: LD_INT 4
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 72
12292: PUSH
12293: FOR_IN
12294: IFFALSE 12313
// ComAgressiveMove ( i , 221 , 110 ) ;
12296: LD_VAR 0 1
12300: PPUSH
12301: LD_INT 221
12303: PPUSH
12304: LD_INT 110
12306: PPUSH
12307: CALL_OW 114
12311: GO 12293
12313: POP
12314: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12315: LD_EXP 38
12319: PPUSH
12320: LD_INT 25
12322: PUSH
12323: LD_INT 4
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PPUSH
12330: CALL_OW 72
12334: PPUSH
12335: LD_INT 214
12337: PPUSH
12338: LD_INT 124
12340: PPUSH
12341: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12345: LD_EXP 38
12349: PPUSH
12350: LD_INT 25
12352: PUSH
12353: LD_INT 1
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: PUSH
12365: LD_INT 4
12367: ARRAY
12368: PPUSH
12369: LD_INT 214
12371: PPUSH
12372: LD_INT 114
12374: PPUSH
12375: LD_INT 0
12377: PPUSH
12378: CALL_OW 132
// if IsOk ( Grishko ) then
12382: LD_EXP 41
12386: PPUSH
12387: CALL_OW 302
12391: IFFALSE 12417
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12393: LD_EXP 41
12397: PPUSH
12398: LD_STRING D9-Gri-1
12400: PPUSH
12401: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12405: LD_EXP 40
12409: PPUSH
12410: LD_STRING D9-Kur-1
12412: PPUSH
12413: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12417: LD_INT 35
12419: PPUSH
12420: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12424: LD_EXP 33
12428: PPUSH
12429: LD_INT 233
12431: PPUSH
12432: LD_INT 130
12434: PPUSH
12435: CALL_OW 114
// if IsOk ( Grishko ) then
12439: LD_EXP 41
12443: PPUSH
12444: CALL_OW 302
12448: IFFALSE 12474
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12450: LD_EXP 41
12454: PPUSH
12455: LD_STRING D9-Gri-2
12457: PPUSH
12458: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12462: LD_EXP 40
12466: PPUSH
12467: LD_STRING D9-Kur-2
12469: PPUSH
12470: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12474: LD_EXP 41
12478: PPUSH
12479: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12483: LD_EXP 41
12487: PPUSH
12488: LD_INT 211
12490: PPUSH
12491: LD_INT 104
12493: PPUSH
12494: CALL_OW 171
// AddComHold ( Grishko ) ;
12498: LD_EXP 41
12502: PPUSH
12503: CALL_OW 200
// repeat wait ( 3 ) ;
12507: LD_INT 3
12509: PPUSH
12510: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12514: LD_EXP 41
12518: PPUSH
12519: CALL_OW 310
12523: NOT
12524: IFFALSE 12507
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12526: LD_EXP 38
12530: PPUSH
12531: LD_INT 34
12533: PUSH
12534: LD_INT 26
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 72
12545: PPUSH
12546: LD_EXP 41
12550: PPUSH
12551: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12555: LD_EXP 38
12559: PPUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 26
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PPUSH
12570: CALL_OW 72
12574: PPUSH
12575: LD_INT 215
12577: PPUSH
12578: LD_INT 106
12580: PPUSH
12581: CALL_OW 174
// repeat wait ( 3 ) ;
12585: LD_INT 3
12587: PPUSH
12588: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12592: LD_EXP 41
12596: PPUSH
12597: CALL_OW 256
12601: PUSH
12602: LD_INT 1000
12604: LESS
12605: IFFALSE 12585
// NormalAttack ( 5 , Grishko ) ;
12607: LD_INT 5
12609: PPUSH
12610: LD_EXP 41
12614: PPUSH
12615: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12619: LD_INT 6
12621: PPUSH
12622: LD_EXP 38
12626: PPUSH
12627: LD_INT 25
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PPUSH
12637: CALL_OW 72
12641: PUSH
12642: LD_INT 4
12644: ARRAY
12645: PPUSH
12646: CALL_OW 472
// if IsOk ( Grishko ) then
12650: LD_EXP 41
12654: PPUSH
12655: CALL_OW 302
12659: IFFALSE 12685
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12661: LD_EXP 41
12665: PPUSH
12666: LD_STRING D9-Gri-3
12668: PPUSH
12669: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12673: LD_EXP 40
12677: PPUSH
12678: LD_STRING D9-Kur-3
12680: PPUSH
12681: CALL_OW 94
// end ; music_class := music_auto ;
12685: LD_ADDR_OWVAR 72
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// music_nat := music_auto ;
12693: LD_ADDR_OWVAR 71
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// for i in omarSquad do
12701: LD_ADDR_VAR 0 1
12705: PUSH
12706: LD_EXP 38
12710: PUSH
12711: FOR_IN
12712: IFFALSE 12854
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 247
12723: PUSH
12724: LD_INT 2
12726: EQUAL
12727: PUSH
12728: LD_VAR 0 1
12732: PPUSH
12733: CALL_OW 256
12737: PUSH
12738: LD_INT 1000
12740: LESS
12741: AND
12742: IFFALSE 12808
// begin driver := IsDrivenBy ( i ) ;
12744: LD_ADDR_VAR 0 2
12748: PUSH
12749: LD_VAR 0 1
12753: PPUSH
12754: CALL_OW 311
12758: ST_TO_ADDR
// veh := i ;
12759: LD_ADDR_VAR 0 3
12763: PUSH
12764: LD_VAR 0 1
12768: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12769: LD_VAR 0 2
12773: PPUSH
12774: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12778: LD_VAR 0 2
12782: PPUSH
12783: LD_VAR 0 3
12787: PPUSH
12788: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12792: LD_VAR 0 2
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: CALL_OW 180
// end else
12806: GO 12852
// if GetLives ( i ) < 500 then
12808: LD_VAR 0 1
12812: PPUSH
12813: CALL_OW 256
12817: PUSH
12818: LD_INT 500
12820: LESS
12821: IFFALSE 12852
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12823: LD_EXP 38
12827: PPUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 4
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 72
12842: PPUSH
12843: LD_VAR 0 1
12847: PPUSH
12848: CALL_OW 188
// end ; end ;
12852: GO 12711
12854: POP
12855: POP
// repeat wait ( 0 0$1 ) ;
12856: LD_INT 35
12858: PPUSH
12859: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12863: LD_EXP 38
12867: PPUSH
12868: LD_INT 3
12870: PUSH
12871: LD_INT 24
12873: PUSH
12874: LD_INT 1000
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 72
12903: NOT
12904: PUSH
12905: LD_EXP 38
12909: PPUSH
12910: LD_INT 3
12912: PUSH
12913: LD_INT 24
12915: PUSH
12916: LD_INT 250
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 72
12931: NOT
12932: AND
12933: IFFALSE 12856
// wait ( 0 0$2 ) ;
12935: LD_INT 70
12937: PPUSH
12938: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12942: LD_ADDR_VAR 0 5
12946: PUSH
12947: LD_EXP 38
12951: PPUSH
12952: LD_INT 58
12954: PUSH
12955: EMPTY
12956: LIST
12957: PUSH
12958: LD_INT 21
12960: PUSH
12961: LD_INT 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 72
12976: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12977: LD_ADDR_VAR 0 6
12981: PUSH
12982: LD_EXP 38
12986: PPUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 3
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 3
12999: PUSH
13000: LD_INT 55
13002: PUSH
13003: EMPTY
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 72
13018: ST_TO_ADDR
// for i := 1 to tmp do
13019: LD_ADDR_VAR 0 1
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_VAR 0 5
13033: PUSH
13034: FOR_TO
13035: IFFALSE 13065
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13037: LD_VAR 0 6
13041: PUSH
13042: LD_VAR 0 1
13046: ARRAY
13047: PPUSH
13048: LD_VAR 0 5
13052: PUSH
13053: LD_VAR 0 1
13057: ARRAY
13058: PPUSH
13059: CALL_OW 120
13063: GO 13034
13065: POP
13066: POP
// wait ( 0 0$5 ) ;
13067: LD_INT 175
13069: PPUSH
13070: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13074: LD_EXP 38
13078: PPUSH
13079: LD_INT 199
13081: PPUSH
13082: LD_INT 141
13084: PPUSH
13085: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13089: LD_EXP 33
13093: PPUSH
13094: LD_INT 190
13096: PPUSH
13097: LD_INT 143
13099: PPUSH
13100: CALL_OW 114
// AddComHold ( Omar ) ;
13104: LD_EXP 33
13108: PPUSH
13109: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13113: LD_EXP 38
13117: PPUSH
13118: LD_INT 2
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: LD_INT 1
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 25
13133: PUSH
13134: LD_INT 4
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: PPUSH
13146: CALL_OW 72
13150: PPUSH
13151: LD_INT 161
13153: PPUSH
13154: LD_INT 130
13156: PPUSH
13157: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13161: LD_EXP 38
13165: PPUSH
13166: LD_INT 25
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 72
13180: PPUSH
13181: LD_INT 163
13183: PPUSH
13184: LD_INT 122
13186: PPUSH
13187: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13191: LD_EXP 38
13195: PPUSH
13196: LD_INT 25
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 72
13210: PUSH
13211: LD_INT 4
13213: ARRAY
13214: PPUSH
13215: LD_INT 165
13217: PPUSH
13218: LD_INT 118
13220: PPUSH
13221: LD_INT 0
13223: PPUSH
13224: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13228: LD_EXP 38
13232: PPUSH
13233: LD_INT 25
13235: PUSH
13236: LD_INT 1
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PPUSH
13243: CALL_OW 72
13247: PUSH
13248: LD_INT 4
13250: ARRAY
13251: PPUSH
13252: LD_INT 159
13254: PPUSH
13255: LD_INT 116
13257: PPUSH
13258: LD_INT 0
13260: PPUSH
13261: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13265: LD_EXP 38
13269: PPUSH
13270: LD_INT 21
13272: PUSH
13273: LD_INT 2
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 72
13284: PPUSH
13285: LD_INT 169
13287: PPUSH
13288: LD_INT 114
13290: PPUSH
13291: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13295: LD_INT 35
13297: PPUSH
13298: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13302: LD_ADDR_VAR 0 5
13306: PUSH
13307: LD_EXP 38
13311: PPUSH
13312: LD_INT 25
13314: PUSH
13315: LD_INT 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 72
13326: ST_TO_ADDR
// for i in tmp do
13327: LD_ADDR_VAR 0 1
13331: PUSH
13332: LD_VAR 0 5
13336: PUSH
13337: FOR_IN
13338: IFFALSE 13435
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13340: LD_VAR 0 1
13344: PPUSH
13345: CALL_OW 256
13349: PUSH
13350: LD_INT 600
13352: LESS
13353: PUSH
13354: LD_VAR 0 1
13358: PPUSH
13359: LD_INT 161
13361: PPUSH
13362: LD_INT 130
13364: PPUSH
13365: CALL_OW 297
13369: PUSH
13370: LD_INT 6
13372: GREATER
13373: AND
13374: IFFALSE 13391
// ComMoveXY ( i , 161 , 130 ) ;
13376: LD_VAR 0 1
13380: PPUSH
13381: LD_INT 161
13383: PPUSH
13384: LD_INT 130
13386: PPUSH
13387: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13391: LD_VAR 0 1
13395: PPUSH
13396: CALL_OW 256
13400: PUSH
13401: LD_INT 1000
13403: EQUAL
13404: PUSH
13405: LD_VAR 0 1
13409: PPUSH
13410: CALL_OW 314
13414: NOT
13415: AND
13416: IFFALSE 13433
// ComAgressiveMove ( i , 160 , 109 ) ;
13418: LD_VAR 0 1
13422: PPUSH
13423: LD_INT 160
13425: PPUSH
13426: LD_INT 109
13428: PPUSH
13429: CALL_OW 114
// end ;
13433: GO 13337
13435: POP
13436: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13437: LD_ADDR_VAR 0 5
13441: PUSH
13442: LD_EXP 38
13446: PPUSH
13447: LD_INT 21
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 72
13461: ST_TO_ADDR
// for i in tmp do
13462: LD_ADDR_VAR 0 1
13466: PUSH
13467: LD_VAR 0 5
13471: PUSH
13472: FOR_IN
13473: IFFALSE 13739
// begin tmp2 := IsDrivenBy ( i ) ;
13475: LD_ADDR_VAR 0 6
13479: PUSH
13480: LD_VAR 0 1
13484: PPUSH
13485: CALL_OW 311
13489: ST_TO_ADDR
// if not tmp2 then
13490: LD_VAR 0 6
13494: NOT
13495: IFFALSE 13499
// continue ;
13497: GO 13472
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13499: LD_VAR 0 1
13503: PPUSH
13504: CALL_OW 256
13508: PUSH
13509: LD_INT 600
13511: GREATEREQUAL
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 110
13522: PUSH
13523: LD_INT 1
13525: EQUAL
13526: AND
13527: IFFALSE 13541
// SetTag ( i , 0 ) ;
13529: LD_VAR 0 1
13533: PPUSH
13534: LD_INT 0
13536: PPUSH
13537: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 256
13550: PUSH
13551: LD_INT 600
13553: GREATEREQUAL
13554: PUSH
13555: LD_VAR 0 1
13559: PPUSH
13560: CALL_OW 110
13564: NOT
13565: AND
13566: IFFALSE 13592
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13568: LD_VAR 0 1
13572: PPUSH
13573: LD_VAR 0 7
13577: PPUSH
13578: LD_VAR 0 1
13582: PPUSH
13583: CALL_OW 74
13587: PPUSH
13588: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 256
13601: PUSH
13602: LD_INT 600
13604: LESS
13605: PUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 110
13615: NOT
13616: AND
13617: IFFALSE 13646
// begin SetTag ( i , 1 ) ;
13619: LD_VAR 0 1
13623: PPUSH
13624: LD_INT 1
13626: PPUSH
13627: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13631: LD_VAR 0 1
13635: PPUSH
13636: LD_INT 202
13638: PPUSH
13639: LD_INT 150
13641: PPUSH
13642: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 110
13655: PUSH
13656: LD_INT 1
13658: EQUAL
13659: PUSH
13660: LD_VAR 0 1
13664: PPUSH
13665: LD_INT 202
13667: PPUSH
13668: LD_INT 150
13670: PPUSH
13671: CALL_OW 297
13675: PUSH
13676: LD_INT 6
13678: LESS
13679: AND
13680: PUSH
13681: LD_VAR 0 6
13685: AND
13686: IFFALSE 13737
// begin ComExitVehicle ( tmp2 ) ;
13688: LD_VAR 0 6
13692: PPUSH
13693: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13697: LD_VAR 0 6
13701: PPUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13711: LD_VAR 0 6
13715: PPUSH
13716: LD_INT 700
13718: PPUSH
13719: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13723: LD_VAR 0 6
13727: PPUSH
13728: LD_VAR 0 1
13732: PPUSH
13733: CALL_OW 180
// end ; end ;
13737: GO 13472
13739: POP
13740: POP
// until kirovDestroyed ;
13741: LD_EXP 16
13745: IFFALSE 13295
// repeat wait ( 0 0$1 ) ;
13747: LD_INT 35
13749: PPUSH
13750: CALL_OW 67
// for i in omarSquad union Omar do
13754: LD_ADDR_VAR 0 1
13758: PUSH
13759: LD_EXP 38
13763: PUSH
13764: LD_EXP 33
13768: UNION
13769: PUSH
13770: FOR_IN
13771: IFFALSE 13941
// if IsInArea ( i , southRoadArea ) then
13773: LD_VAR 0 1
13777: PPUSH
13778: LD_INT 15
13780: PPUSH
13781: CALL_OW 308
13785: IFFALSE 13798
// RemoveUnit ( i ) else
13787: LD_VAR 0 1
13791: PPUSH
13792: CALL_OW 64
13796: GO 13939
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13798: LD_VAR 0 1
13802: PPUSH
13803: CALL_OW 257
13807: PUSH
13808: LD_INT 3
13810: EQUAL
13811: PUSH
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 310
13821: NOT
13822: AND
13823: PUSH
13824: LD_INT 22
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 24
13836: PUSH
13837: LD_INT 251
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 58
13856: PUSH
13857: EMPTY
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 69
13870: AND
13871: IFFALSE 13924
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13873: LD_VAR 0 1
13877: PPUSH
13878: LD_INT 22
13880: PUSH
13881: LD_INT 5
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 21
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 58
13900: PUSH
13901: EMPTY
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PUSH
13914: LD_INT 1
13916: ARRAY
13917: PPUSH
13918: CALL_OW 120
13922: GO 13939
// ComMoveXY ( i , 208 , 162 ) ;
13924: LD_VAR 0 1
13928: PPUSH
13929: LD_INT 208
13931: PPUSH
13932: LD_INT 162
13934: PPUSH
13935: CALL_OW 111
// end ;
13939: GO 13770
13941: POP
13942: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13943: LD_INT 22
13945: PUSH
13946: LD_INT 5
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 21
13955: PUSH
13956: LD_INT 1
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PPUSH
13967: CALL_OW 69
13971: NOT
13972: IFFALSE 13747
// end ;
13974: PPOPN 7
13976: END
// every 0 0$1 trigger IsDead ( kirov ) do
13977: LD_INT 71
13979: PPUSH
13980: CALL_OW 301
13984: IFFALSE 14001
13986: GO 13988
13988: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13989: LD_EXP 25
13993: PPUSH
13994: LD_STRING DH-1-Kirov
13996: PPUSH
13997: CALL_OW 88
14001: END
// every 0 0$1 trigger See ( 2 , beria ) do
14002: LD_INT 2
14004: PPUSH
14005: LD_INT 106
14007: PPUSH
14008: CALL_OW 292
14012: IFFALSE 14029
14014: GO 14016
14016: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14017: LD_EXP 25
14021: PPUSH
14022: LD_STRING DH-1-Beria
14024: PPUSH
14025: CALL_OW 88
14029: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14030: LD_INT 2
14032: PPUSH
14033: LD_INT 112
14035: PPUSH
14036: CALL_OW 292
14040: IFFALSE 14307
14042: GO 14044
14044: DISABLE
// begin DialogueOn ;
14045: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14049: LD_INT 112
14051: PPUSH
14052: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14056: LD_EXP 25
14060: PPUSH
14061: LD_STRING DH-1-Kagan
14063: PPUSH
14064: CALL_OW 88
// if Kamil then
14068: LD_EXP 29
14072: IFFALSE 14110
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14074: LD_EXP 29
14078: PPUSH
14079: LD_STRING DKam-Kagan-2
14081: PPUSH
14082: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14086: LD_EXP 26
14090: PPUSH
14091: LD_STRING DG-Kagan-3
14093: PPUSH
14094: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14098: LD_EXP 26
14102: PPUSH
14103: LD_STRING DG-Kagan-4
14105: PPUSH
14106: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14110: LD_STRING KaganBase
14112: PPUSH
14113: CALL_OW 97
14117: PUSH
14118: LD_INT 1
14120: DOUBLE
14121: EQUAL
14122: IFTRUE 14126
14124: GO 14221
14126: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14127: LD_EXP 25
14131: PPUSH
14132: LD_STRING DH-Kagan-5
14134: PPUSH
14135: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14139: LD_EXP 25
14143: PPUSH
14144: LD_STRING DH-Kagan-6
14146: PPUSH
14147: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14151: LD_EXP 36
14155: PPUSH
14156: LD_STRING DShar-Kagan-7
14158: PPUSH
14159: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14163: LD_EXP 25
14167: PPUSH
14168: LD_STRING DH-Kagan-8
14170: PPUSH
14171: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14175: LD_EXP 25
14179: PPUSH
14180: LD_STRING DH-Kagan-9
14182: PPUSH
14183: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14187: LD_EXP 36
14191: PPUSH
14192: LD_STRING DShar-Kagan-10
14194: PPUSH
14195: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14199: LD_EXP 25
14203: PPUSH
14204: LD_STRING DH-Kagan-11
14206: PPUSH
14207: CALL_OW 88
// kaganCaptured := true ;
14211: LD_ADDR_EXP 24
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// end ; 2 :
14219: GO 14303
14221: LD_INT 2
14223: DOUBLE
14224: EQUAL
14225: IFTRUE 14229
14227: GO 14302
14229: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14230: LD_INT 22
14232: PUSH
14233: LD_INT 8
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PPUSH
14240: CALL_OW 69
14244: PUSH
14245: LD_EXP 35
14249: AND
14250: IFFALSE 14264
// Say ( Heike , DH-Kagan-a-5 ) ;
14252: LD_EXP 25
14256: PPUSH
14257: LD_STRING DH-Kagan-a-5
14259: PPUSH
14260: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14264: LD_EXP 25
14268: PPUSH
14269: LD_STRING DH-Kagan-a-6
14271: PPUSH
14272: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14276: LD_EXP 25
14280: PPUSH
14281: LD_STRING DH-Kagan-a-7
14283: PPUSH
14284: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14288: LD_EXP 26
14292: PPUSH
14293: LD_STRING DG-Kagan-a-8
14295: PPUSH
14296: CALL_OW 88
// end ; end ;
14300: GO 14303
14302: POP
// DialogueOff ;
14303: CALL_OW 7
// end ;
14307: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14308: LD_EXP 18
14312: PUSH
14313: LD_INT 112
14315: PPUSH
14316: CALL_OW 255
14320: PUSH
14321: LD_INT 2
14323: EQUAL
14324: OR
14325: IFFALSE 14337
14327: GO 14329
14329: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14330: LD_STRING KaganDone
14332: PPUSH
14333: CALL_OW 337
14337: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14338: LD_EXP 6
14342: PUSH
14343: LD_EXP 48
14347: PPUSH
14348: LD_INT 95
14350: PUSH
14351: LD_INT 19
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 72
14362: AND
14363: IFFALSE 14440
14365: GO 14367
14367: DISABLE
// begin DialogueOn ;
14368: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14372: LD_INT 63
14374: PPUSH
14375: LD_INT 32
14377: PPUSH
14378: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14382: LD_INT 63
14384: PPUSH
14385: LD_INT 32
14387: PPUSH
14388: LD_INT 2
14390: PPUSH
14391: LD_INT 12
14393: NEG
14394: PPUSH
14395: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14399: LD_EXP 25
14403: PPUSH
14404: LD_STRING DH-Omicron-1
14406: PPUSH
14407: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14411: LD_EXP 27
14415: PPUSH
14416: LD_STRING DM-Omicron-2
14418: PPUSH
14419: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14423: LD_INT 63
14425: PPUSH
14426: LD_INT 32
14428: PPUSH
14429: LD_INT 2
14431: PPUSH
14432: CALL_OW 331
// DialogueOff ;
14436: CALL_OW 7
// end ;
14440: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14441: LD_INT 2
14443: PPUSH
14444: LD_EXP 50
14448: PPUSH
14449: CALL_OW 292
14453: PUSH
14454: LD_EXP 50
14458: PPUSH
14459: CALL_OW 255
14463: PUSH
14464: LD_INT 2
14466: EQUAL
14467: OR
14468: PUSH
14469: LD_INT 106
14471: PPUSH
14472: CALL_OW 255
14476: PUSH
14477: LD_INT 2
14479: EQUAL
14480: OR
14481: PUSH
14482: LD_EXP 50
14486: PPUSH
14487: CALL_OW 302
14491: AND
14492: PUSH
14493: LD_EXP 25
14497: PPUSH
14498: CALL_OW 302
14502: AND
14503: PUSH
14504: LD_EXP 35
14508: PPUSH
14509: CALL_OW 302
14513: AND
14514: IFFALSE 15253
14516: GO 14518
14518: DISABLE
14519: LD_INT 0
14521: PPUSH
14522: PPUSH
14523: PPUSH
14524: PPUSH
14525: PPUSH
// begin DialogueOn ;
14526: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14530: LD_INT 111
14532: PPUSH
14533: LD_INT 90
14535: PPUSH
14536: LD_INT 2
14538: PPUSH
14539: LD_INT 6
14541: NEG
14542: PPUSH
14543: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14547: LD_INT 111
14549: PPUSH
14550: LD_INT 90
14552: PPUSH
14553: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14557: LD_EXP 35
14561: PPUSH
14562: LD_STRING DA-Cap-1
14564: PPUSH
14565: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14569: LD_EXP 25
14573: PPUSH
14574: LD_STRING DH-Cap-2
14576: PPUSH
14577: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14581: LD_INT 111
14583: PPUSH
14584: LD_INT 90
14586: PPUSH
14587: LD_INT 2
14589: PPUSH
14590: CALL_OW 331
// DialogueOff ;
14594: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14598: LD_INT 35
14600: PPUSH
14601: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14605: LD_EXP 17
14609: PUSH
14610: LD_INT 106
14612: PPUSH
14613: CALL_OW 255
14617: PUSH
14618: LD_INT 2
14620: EQUAL
14621: OR
14622: PUSH
14623: LD_EXP 50
14627: PPUSH
14628: CALL_OW 255
14632: PUSH
14633: LD_INT 2
14635: EQUAL
14636: OR
14637: PUSH
14638: LD_EXP 50
14642: PPUSH
14643: CALL_OW 302
14647: AND
14648: PUSH
14649: LD_EXP 35
14653: PPUSH
14654: CALL_OW 302
14658: AND
14659: PUSH
14660: LD_INT 2
14662: PPUSH
14663: CALL_OW 463
14667: NOT
14668: AND
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 3
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 92
14692: PUSH
14693: LD_INT 110
14695: PUSH
14696: LD_INT 95
14698: PUSH
14699: LD_INT 12
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PPUSH
14713: CALL_OW 69
14717: NOT
14718: AND
14719: PUSH
14720: LD_INT 22
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 30
14732: PUSH
14733: LD_INT 5
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 92
14742: PUSH
14743: LD_INT 110
14745: PUSH
14746: LD_INT 95
14748: PUSH
14749: LD_INT 12
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 69
14767: NOT
14768: AND
14769: IFFALSE 14598
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14771: LD_ADDR_VAR 0 2
14775: PUSH
14776: LD_EXP 37
14780: PUSH
14781: LD_EXP 28
14785: PUSH
14786: LD_EXP 29
14790: PUSH
14791: LD_EXP 31
14795: PUSH
14796: LD_EXP 30
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: UNION
14807: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: LD_VAR 0 2
14817: PPUSH
14818: LD_INT 50
14820: PUSH
14821: EMPTY
14822: LIST
14823: PPUSH
14824: CALL_OW 72
14828: ST_TO_ADDR
// if tmp < 2 then
14829: LD_VAR 0 2
14833: PUSH
14834: LD_INT 2
14836: LESS
14837: IFFALSE 14849
// q := 2 else
14839: LD_ADDR_VAR 0 4
14843: PUSH
14844: LD_INT 2
14846: ST_TO_ADDR
14847: GO 14862
// q := Query ( LabCap ) ;
14849: LD_ADDR_VAR 0 4
14853: PUSH
14854: LD_STRING LabCap
14856: PPUSH
14857: CALL_OW 97
14861: ST_TO_ADDR
// case q of 1 :
14862: LD_VAR 0 4
14866: PUSH
14867: LD_INT 1
14869: DOUBLE
14870: EQUAL
14871: IFTRUE 14875
14873: GO 15217
14875: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14876: LD_INT 2
14878: PPUSH
14879: LD_EXP 50
14883: PPUSH
14884: CALL_OW 471
// labCaptured := true ;
14888: LD_ADDR_EXP 21
14892: PUSH
14893: LD_INT 1
14895: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14896: LD_EXP 25
14900: PPUSH
14901: LD_STRING DH-Cap-a-1
14903: PPUSH
14904: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14908: LD_EXP 35
14912: PPUSH
14913: LD_STRING DA-Cap-a-2
14915: PPUSH
14916: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
14920: LD_ADDR_VAR 0 5
14924: PUSH
14925: LD_EXP 35
14929: PUSH
14930: LD_INT -3
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT -2
14939: PUSH
14940: LD_INT -4
14942: PUSH
14943: LD_EXP 25
14947: PUSH
14948: LD_EXP 26
14952: PUSH
14953: LD_EXP 34
14957: PUSH
14958: LD_EXP 32
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: ADD
14971: PUSH
14972: LD_INT -3
14974: PUSH
14975: EMPTY
14976: LIST
14977: ADD
14978: PUSH
14979: LD_VAR 0 2
14983: ADD
14984: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_STRING Select two characters to go with Aviradze
14992: PPUSH
14993: LD_INT 2
14995: PPUSH
14996: LD_INT 2
14998: PPUSH
14999: LD_VAR 0 5
15003: PPUSH
15004: EMPTY
15005: PPUSH
15006: CALL_OW 42
15010: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15011: LD_EXP 50
15015: PPUSH
15016: LD_INT 8
15018: PPUSH
15019: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15023: LD_EXP 35
15027: PPUSH
15028: LD_INT 8
15030: PPUSH
15031: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15035: LD_ADDR_EXP 39
15039: PUSH
15040: LD_EXP 35
15044: PUSH
15045: EMPTY
15046: LIST
15047: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15048: LD_EXP 35
15052: PPUSH
15053: CALL_OW 310
15057: IFFALSE 15068
// ComExit ( Aviradze ) ;
15059: LD_EXP 35
15063: PPUSH
15064: CALL 75780 0 1
// wait ( 3 ) ;
15068: LD_INT 3
15070: PPUSH
15071: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15075: LD_EXP 35
15079: PPUSH
15080: LD_EXP 50
15084: PPUSH
15085: CALL_OW 120
// for i := 1 to 2 do
15089: LD_ADDR_VAR 0 1
15093: PUSH
15094: DOUBLE
15095: LD_INT 1
15097: DEC
15098: ST_TO_ADDR
15099: LD_INT 2
15101: PUSH
15102: FOR_TO
15103: IFFALSE 15206
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15105: LD_ADDR_EXP 39
15109: PUSH
15110: LD_EXP 39
15114: PUSH
15115: LD_VAR 0 3
15119: PUSH
15120: LD_VAR 0 1
15124: ARRAY
15125: UNION
15126: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15127: LD_VAR 0 3
15131: PUSH
15132: LD_VAR 0 1
15136: ARRAY
15137: PPUSH
15138: LD_INT 8
15140: PPUSH
15141: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15145: LD_VAR 0 3
15149: PUSH
15150: LD_VAR 0 1
15154: ARRAY
15155: PPUSH
15156: CALL_OW 310
15160: IFFALSE 15177
// ComExit ( tmp2 [ i ] ) ;
15162: LD_VAR 0 3
15166: PUSH
15167: LD_VAR 0 1
15171: ARRAY
15172: PPUSH
15173: CALL 75780 0 1
// wait ( 3 ) ;
15177: LD_INT 3
15179: PPUSH
15180: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15184: LD_VAR 0 3
15188: PUSH
15189: LD_VAR 0 1
15193: ARRAY
15194: PPUSH
15195: LD_EXP 50
15199: PPUSH
15200: CALL_OW 120
// end ;
15204: GO 15102
15206: POP
15207: POP
// SetAchievement ( ACH_LAB ) ;
15208: LD_STRING ACH_LAB
15210: PPUSH
15211: CALL_OW 543
// end ; 2 :
15215: GO 15253
15217: LD_INT 2
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15252
15225: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15226: LD_EXP 25
15230: PPUSH
15231: LD_STRING DH-Cap-b-1
15233: PPUSH
15234: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15238: LD_EXP 35
15242: PPUSH
15243: LD_STRING DA-Cap-b-2
15245: PPUSH
15246: CALL_OW 88
// end ; end ;
15250: GO 15253
15252: POP
// end ;
15253: PPOPN 5
15255: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15256: LD_INT 10
15258: PPUSH
15259: LD_INT 22
15261: PUSH
15262: LD_INT 2
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 30
15271: PUSH
15272: LD_INT 31
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PPUSH
15283: CALL_OW 70
15287: PUSH
15288: LD_INT 2
15290: GREATEREQUAL
15291: IFFALSE 15303
15293: GO 15295
15295: DISABLE
// SetAchievement ( ACH_KING ) ;
15296: LD_STRING ACH_KING
15298: PPUSH
15299: CALL_OW 543
15303: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15304: LD_EXP 11
15308: NOT
15309: PUSH
15310: LD_INT 10
15312: PPUSH
15313: LD_INT 22
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 31
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 30
15338: PUSH
15339: LD_INT 4
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PPUSH
15355: CALL_OW 70
15359: AND
15360: IFFALSE 15380
15362: GO 15364
15364: DISABLE
// begin hillBase := true ;
15365: LD_ADDR_EXP 15
15369: PUSH
15370: LD_INT 1
15372: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15373: LD_STRING HillDone
15375: PPUSH
15376: CALL_OW 337
// end ;
15380: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15381: LD_EXP 30
15385: PUSH
15386: LD_EXP 30
15390: PPUSH
15391: CALL_OW 256
15395: PUSH
15396: LD_INT 3
15398: LESS
15399: AND
15400: IFFALSE 15446
15402: GO 15404
15404: DISABLE
// begin DialogueOn ;
15405: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15409: LD_EXP 30
15413: PPUSH
15414: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15418: LD_EXP 30
15422: PPUSH
15423: LD_STRING DK-Kkilled-1
15425: PPUSH
15426: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15430: LD_EXP 25
15434: PPUSH
15435: LD_STRING DH-Kkilled-2
15437: PPUSH
15438: CALL_OW 88
// DialogueOff ;
15442: CALL_OW 7
// end ;
15446: END
// every 0 0$1 trigger kaiaKilledByRussian do
15447: LD_EXP 23
15451: IFFALSE 15468
15453: GO 15455
15455: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15456: LD_EXP 25
15460: PPUSH
15461: LD_STRING DH-Kkilled-3
15463: PPUSH
15464: CALL_OW 88
15468: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15469: LD_EXP 16
15473: PUSH
15474: LD_INT 106
15476: PPUSH
15477: CALL_OW 255
15481: PUSH
15482: LD_INT 2
15484: EQUAL
15485: PUSH
15486: LD_EXP 17
15490: OR
15491: AND
15492: PUSH
15493: LD_EXP 18
15497: PUSH
15498: LD_EXP 24
15502: PUSH
15503: LD_INT 112
15505: PPUSH
15506: CALL_OW 255
15510: PUSH
15511: LD_INT 2
15513: EQUAL
15514: AND
15515: OR
15516: AND
15517: IFFALSE 16757
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
15526: PPUSH
15527: PPUSH
15528: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15529: LD_STRING GoToWest
15531: PPUSH
15532: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15536: LD_INT 17
15538: PPUSH
15539: LD_INT 1
15541: PPUSH
15542: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15546: LD_INT 35
15548: PPUSH
15549: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15553: LD_ADDR_VAR 0 2
15557: PUSH
15558: LD_INT 17
15560: PPUSH
15561: LD_INT 22
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: LD_INT 21
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 21
15586: PUSH
15587: LD_INT 2
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 3
15596: PUSH
15597: LD_INT 58
15599: PUSH
15600: EMPTY
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PPUSH
15620: CALL_OW 70
15624: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15625: LD_ADDR_VAR 0 3
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_INT 2
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: LD_INT 55
15645: PUSH
15646: EMPTY
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: LD_INT 21
15658: PUSH
15659: LD_INT 1
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 21
15668: PUSH
15669: LD_INT 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 3
15678: PUSH
15679: LD_INT 58
15681: PUSH
15682: EMPTY
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15708: LD_VAR 0 2
15712: PUSH
15713: LD_INT 0
15715: PLUS
15716: PUSH
15717: LD_VAR 0 3
15721: PUSH
15722: LD_INT 0
15724: PLUS
15725: EQUAL
15726: IFFALSE 15546
// SaveCharacters ( Heike , 04_1_Heike ) ;
15728: LD_EXP 25
15732: PPUSH
15733: LD_STRING 04_1_Heike
15735: PPUSH
15736: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15740: LD_EXP 35
15744: PUSH
15745: LD_EXP 35
15749: PUSH
15750: LD_EXP 39
15754: IN
15755: NOT
15756: AND
15757: IFFALSE 15773
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15759: LD_EXP 35
15763: PPUSH
15764: LD_STRING 04_1_Aviradze
15766: PPUSH
15767: CALL_OW 38
15771: GO 15791
// if Aviradze then
15773: LD_EXP 35
15777: IFFALSE 15791
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15779: LD_EXP 35
15783: PPUSH
15784: LD_STRING 04_1_Aviradze_L
15786: PPUSH
15787: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15791: LD_EXP 28
15795: PUSH
15796: LD_EXP 28
15800: PUSH
15801: LD_EXP 39
15805: IN
15806: NOT
15807: AND
15808: IFFALSE 15824
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15810: LD_EXP 28
15814: PPUSH
15815: LD_STRING 04_1_Ibrahim
15817: PPUSH
15818: CALL_OW 38
15822: GO 15842
// if Ibrahim then
15824: LD_EXP 28
15828: IFFALSE 15842
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15830: LD_EXP 28
15834: PPUSH
15835: LD_STRING 04_1_Ibrahim_L
15837: PPUSH
15838: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15842: LD_EXP 29
15846: PUSH
15847: LD_EXP 29
15851: PUSH
15852: LD_EXP 39
15856: IN
15857: NOT
15858: AND
15859: IFFALSE 15875
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15861: LD_EXP 29
15865: PPUSH
15866: LD_STRING 04_1_Kamil
15868: PPUSH
15869: CALL_OW 38
15873: GO 15893
// if Kamil then
15875: LD_EXP 29
15879: IFFALSE 15893
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15881: LD_EXP 29
15885: PPUSH
15886: LD_STRING 04_1_Kamil_L
15888: PPUSH
15889: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15893: LD_EXP 31
15897: PUSH
15898: LD_EXP 31
15902: PUSH
15903: LD_EXP 39
15907: IN
15908: NOT
15909: AND
15910: IFFALSE 15926
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15912: LD_EXP 31
15916: PPUSH
15917: LD_STRING 04_1_Sophia
15919: PPUSH
15920: CALL_OW 38
15924: GO 15944
// if Sophia then
15926: LD_EXP 31
15930: IFFALSE 15944
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15932: LD_EXP 31
15936: PPUSH
15937: LD_STRING 04_1_Sophia_L
15939: PPUSH
15940: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15944: LD_EXP 30
15948: PUSH
15949: LD_EXP 30
15953: PUSH
15954: LD_EXP 39
15958: IN
15959: NOT
15960: AND
15961: IFFALSE 15977
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15963: LD_EXP 30
15967: PPUSH
15968: LD_STRING 04_1_Kaia
15970: PPUSH
15971: CALL_OW 38
15975: GO 15995
// if Kaia then
15977: LD_EXP 30
15981: IFFALSE 15995
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15983: LD_EXP 30
15987: PPUSH
15988: LD_STRING 04_1_Kaia_L
15990: PPUSH
15991: CALL_OW 38
// if Givi then
15995: LD_EXP 26
15999: IFFALSE 16013
// SaveCharacters ( Givi , 04_1_Givi ) ;
16001: LD_EXP 26
16005: PPUSH
16006: LD_STRING 04_1_Givi
16008: PPUSH
16009: CALL_OW 38
// if Mike then
16013: LD_EXP 27
16017: IFFALSE 16031
// SaveCharacters ( Mike , 04_1_Mike ) ;
16019: LD_EXP 27
16023: PPUSH
16024: LD_STRING 04_1_Mike
16026: PPUSH
16027: CALL_OW 38
// if Markov then
16031: LD_EXP 32
16035: IFFALSE 16049
// SaveCharacters ( Markov , 04_1_Markov ) ;
16037: LD_EXP 32
16041: PPUSH
16042: LD_STRING 04_1_Markov
16044: PPUSH
16045: CALL_OW 38
// if Kurt then
16049: LD_EXP 34
16053: IFFALSE 16074
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16055: LD_EXP 34
16059: PPUSH
16060: LD_STRING 04_1_Kurt
16062: PPUSH
16063: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16067: LD_STRING enableBioCharacter(BIO_KURT)
16069: PPUSH
16070: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16074: LD_EXP 37
16078: PUSH
16079: LD_EXP 39
16083: DIFF
16084: IFFALSE 16104
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16086: LD_EXP 37
16090: PUSH
16091: LD_EXP 39
16095: DIFF
16096: PPUSH
16097: LD_STRING 04_1_others
16099: PPUSH
16100: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16104: LD_EXP 39
16108: PUSH
16109: LD_EXP 37
16113: AND
16114: IFFALSE 16199
// begin tmp := [ ] ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: EMPTY
16122: ST_TO_ADDR
// for i in heikeSecondSquad do
16123: LD_ADDR_VAR 0 1
16127: PUSH
16128: LD_EXP 37
16132: PUSH
16133: FOR_IN
16134: IFFALSE 16179
// if i in aviradzeSquad then
16136: LD_VAR 0 1
16140: PUSH
16141: LD_EXP 39
16145: IN
16146: IFFALSE 16177
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16148: LD_ADDR_VAR 0 2
16152: PUSH
16153: LD_VAR 0 2
16157: PPUSH
16158: LD_VAR 0 2
16162: PUSH
16163: LD_INT 1
16165: PLUS
16166: PPUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 1
16176: ST_TO_ADDR
16177: GO 16133
16179: POP
16180: POP
// if tmp then
16181: LD_VAR 0 2
16185: IFFALSE 16199
// SaveCharacters ( tmp , 04_1_others_L ) ;
16187: LD_VAR 0 2
16191: PPUSH
16192: LD_STRING 04_1_others_L
16194: PPUSH
16195: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_INT 2
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 23
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 69
16232: ST_TO_ADDR
// if tmp then
16233: LD_VAR 0 2
16237: IFFALSE 16251
// SaveCharacters ( tmp , 04_1_apes ) ;
16239: LD_VAR 0 2
16243: PPUSH
16244: LD_STRING 04_1_apes
16246: PPUSH
16247: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: LD_INT 17
16258: PPUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 70
16273: ST_TO_ADDR
// if tmp then
16274: LD_VAR 0 2
16278: IFFALSE 16622
// begin tmp2 := [ ] ;
16280: LD_ADDR_VAR 0 3
16284: PUSH
16285: EMPTY
16286: ST_TO_ADDR
// for i in tmp do
16287: LD_ADDR_VAR 0 1
16291: PUSH
16292: LD_VAR 0 2
16296: PUSH
16297: FOR_IN
16298: IFFALSE 16608
// begin driver := IsDrivenBy ( i ) ;
16300: LD_ADDR_VAR 0 5
16304: PUSH
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL_OW 311
16314: ST_TO_ADDR
// if not driver then
16315: LD_VAR 0 5
16319: NOT
16320: IFFALSE 16324
// continue ;
16322: GO 16297
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 264
16333: PUSH
16334: LD_INT 32
16336: PUSH
16337: LD_INT 12
16339: PUSH
16340: LD_INT 51
16342: PUSH
16343: LD_INT 89
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: IN
16352: IFFALSE 16500
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16354: LD_ADDR_VAR 0 4
16358: PUSH
16359: LD_VAR 0 1
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: CALL_OW 289
16371: PUSH
16372: LD_VAR 0 1
16376: PPUSH
16377: LD_INT 2
16379: PPUSH
16380: CALL_OW 289
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16389: LD_ADDR_VAR 0 3
16393: PUSH
16394: LD_VAR 0 3
16398: PPUSH
16399: LD_VAR 0 3
16403: PUSH
16404: LD_INT 1
16406: PLUS
16407: PPUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 265
16417: PUSH
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 262
16427: PUSH
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL_OW 263
16437: PUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 264
16447: PUSH
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 248
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 256
16467: PUSH
16468: LD_VAR 0 4
16472: PUSH
16473: LD_VAR 0 5
16477: PPUSH
16478: CALL_OW 257
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 1
16497: ST_TO_ADDR
// end else
16498: GO 16606
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16500: LD_ADDR_VAR 0 3
16504: PUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_VAR 0 3
16514: PUSH
16515: LD_INT 1
16517: PLUS
16518: PPUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 265
16528: PUSH
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 262
16538: PUSH
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 263
16548: PUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: CALL_OW 264
16558: PUSH
16559: LD_VAR 0 1
16563: PPUSH
16564: CALL_OW 248
16568: PUSH
16569: LD_VAR 0 1
16573: PPUSH
16574: CALL_OW 256
16578: PUSH
16579: EMPTY
16580: PUSH
16581: LD_VAR 0 5
16585: PPUSH
16586: CALL_OW 257
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: PPUSH
16601: CALL_OW 1
16605: ST_TO_ADDR
// end ;
16606: GO 16297
16608: POP
16609: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16610: LD_VAR 0 3
16614: PPUSH
16615: LD_STRING 04_1_Vehicles
16617: PPUSH
16618: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16622: LD_EXP 21
16626: PPUSH
16627: LD_STRING 04_1_RuLabCaptured
16629: PPUSH
16630: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16634: LD_EXP 19
16638: PPUSH
16639: LD_STRING 04_1_EscapeCounter
16641: PPUSH
16642: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16646: LD_EXP 15
16650: PPUSH
16651: LD_STRING 04_1_BaseHill
16653: PPUSH
16654: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16658: LD_OWVAR 1
16662: PPUSH
16663: LD_STRING 04_1_Time
16665: PPUSH
16666: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16670: LD_EXP 14
16674: PPUSH
16675: LD_STRING 04_1_DeadCounter
16677: PPUSH
16678: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16682: LD_EXP 24
16686: PUSH
16687: LD_INT 112
16689: PPUSH
16690: CALL_OW 255
16694: MUL
16695: PUSH
16696: LD_INT 2
16698: EQUAL
16699: PPUSH
16700: LD_STRING 04_1_KaganCaptured
16702: PPUSH
16703: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16707: LD_INT 22
16709: PUSH
16710: LD_INT 2
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 34
16719: PUSH
16720: LD_INT 26
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PPUSH
16731: CALL_OW 69
16735: PUSH
16736: LD_INT 0
16738: PLUS
16739: PPUSH
16740: LD_STRING 04_1_Flamethrower
16742: PPUSH
16743: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16747: LD_INT 1
16749: PPUSH
16750: LD_STRING __x1\04_cont2
16752: PPUSH
16753: CALL_OW 340
// end ; end_of_file
16757: PPOPN 5
16759: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 266
16769: PUSH
16770: LD_INT 0
16772: EQUAL
16773: PUSH
16774: LD_VAR 0 1
16778: PPUSH
16779: CALL_OW 255
16783: PUSH
16784: LD_INT 2
16786: EQUAL
16787: AND
16788: IFFALSE 16798
// baseConstructed := true ;
16790: LD_ADDR_EXP 3
16794: PUSH
16795: LD_INT 1
16797: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 266
16807: PUSH
16808: LD_INT 6
16810: EQUAL
16811: PUSH
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 255
16821: PUSH
16822: LD_INT 2
16824: EQUAL
16825: AND
16826: IFFALSE 16836
// labConstructed := true ;
16828: LD_ADDR_EXP 4
16832: PUSH
16833: LD_INT 1
16835: ST_TO_ADDR
// end ;
16836: PPOPN 1
16838: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL 33625 0 1
// if un = Heike then
16848: LD_VAR 0 1
16852: PUSH
16853: LD_EXP 25
16857: EQUAL
16858: IFFALSE 16867
// YouLost ( Heike ) ;
16860: LD_STRING Heike
16862: PPUSH
16863: CALL_OW 104
// if un = Omar then
16867: LD_VAR 0 1
16871: PUSH
16872: LD_EXP 33
16876: EQUAL
16877: IFFALSE 16886
// YouLost ( Omar ) ;
16879: LD_STRING Omar
16881: PPUSH
16882: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16886: LD_VAR 0 1
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 23
16903: PUSH
16904: LD_INT 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 21
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: PPUSH
16926: CALL_OW 69
16930: IN
16931: IFFALSE 16947
// loseCounter := loseCounter + 1 ;
16933: LD_ADDR_EXP 14
16937: PUSH
16938: LD_EXP 14
16942: PUSH
16943: LD_INT 1
16945: PLUS
16946: ST_TO_ADDR
// if un = omikron then
16947: LD_VAR 0 1
16951: PUSH
16952: LD_INT 64
16954: EQUAL
16955: IFFALSE 16965
// omicronFall := true ;
16957: LD_ADDR_EXP 13
16961: PUSH
16962: LD_INT 1
16964: ST_TO_ADDR
// if un = kirov then
16965: LD_VAR 0 1
16969: PUSH
16970: LD_INT 71
16972: EQUAL
16973: IFFALSE 16990
// begin ChangeMissionObjectives ( KirovDone ) ;
16975: LD_STRING KirovDone
16977: PPUSH
16978: CALL_OW 337
// kirovDestroyed := true ;
16982: LD_ADDR_EXP 16
16986: PUSH
16987: LD_INT 1
16989: ST_TO_ADDR
// end ; if un = beria then
16990: LD_VAR 0 1
16994: PUSH
16995: LD_INT 106
16997: EQUAL
16998: IFFALSE 17015
// begin ChangeMissionObjectives ( BeriaDone ) ;
17000: LD_STRING BeriaDone
17002: PPUSH
17003: CALL_OW 337
// beriaDestroyed := true ;
17007: LD_ADDR_EXP 17
17011: PUSH
17012: LD_INT 1
17014: ST_TO_ADDR
// end ; if un = kagan then
17015: LD_VAR 0 1
17019: PUSH
17020: LD_INT 112
17022: EQUAL
17023: IFFALSE 17033
// kaganDestroyed := true ;
17025: LD_ADDR_EXP 18
17029: PUSH
17030: LD_INT 1
17032: ST_TO_ADDR
// if un in russianPatrol then
17033: LD_VAR 0 1
17037: PUSH
17038: LD_EXP 47
17042: IN
17043: IFFALSE 17061
// russianPatrol := russianPatrol diff un ;
17045: LD_ADDR_EXP 47
17049: PUSH
17050: LD_EXP 47
17054: PUSH
17055: LD_VAR 0 1
17059: DIFF
17060: ST_TO_ADDR
// if un in russianOmicronAttackers then
17061: LD_VAR 0 1
17065: PUSH
17066: LD_EXP 48
17070: IN
17071: IFFALSE 17089
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17073: LD_ADDR_EXP 48
17077: PUSH
17078: LD_EXP 48
17082: PUSH
17083: LD_VAR 0 1
17087: DIFF
17088: ST_TO_ADDR
// end ;
17089: PPOPN 1
17091: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17092: LD_INT 0
17094: PPUSH
17095: PPUSH
17096: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17097: LD_VAR 0 1
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_INT 4
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 22
17127: PUSH
17128: LD_INT 6
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 30
17143: PUSH
17144: LD_INT 32
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PPUSH
17155: CALL_OW 69
17159: IN
17160: IFFALSE 17333
// begin sol := UnitsInside ( un ) ;
17162: LD_ADDR_VAR 0 3
17166: PUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 313
17176: ST_TO_ADDR
// if not sol then
17177: LD_VAR 0 3
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17333
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17186: LD_ADDR_VAR 0 4
17190: PUSH
17191: LD_INT 22
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 255
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 2
17210: PUSH
17211: LD_INT 30
17213: PUSH
17214: LD_INT 4
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 30
17223: PUSH
17224: LD_INT 5
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: ST_TO_ADDR
// if not nearestBarracks then
17245: LD_VAR 0 4
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17333
// for i in nearestBarracks do
17254: LD_ADDR_VAR 0 2
17258: PUSH
17259: LD_VAR 0 4
17263: PUSH
17264: FOR_IN
17265: IFFALSE 17300
// if UnitsInside ( i ) = 6 then
17267: LD_VAR 0 2
17271: PPUSH
17272: CALL_OW 313
17276: PUSH
17277: LD_INT 6
17279: EQUAL
17280: IFFALSE 17298
// nearestBarracks := nearestBarracks diff i ;
17282: LD_ADDR_VAR 0 4
17286: PUSH
17287: LD_VAR 0 4
17291: PUSH
17292: LD_VAR 0 2
17296: DIFF
17297: ST_TO_ADDR
17298: GO 17264
17300: POP
17301: POP
// if not nearestBarracks then
17302: LD_VAR 0 4
17306: NOT
17307: IFFALSE 17311
// exit ;
17309: GO 17333
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17311: LD_VAR 0 3
17315: PUSH
17316: LD_INT 1
17318: ARRAY
17319: PPUSH
17320: LD_VAR 0 4
17324: PUSH
17325: LD_INT 1
17327: ARRAY
17328: PPUSH
17329: CALL_OW 120
// end ; end ;
17333: PPOPN 4
17335: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17336: LD_INT 0
17338: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17339: LD_EXP 8
17343: NOT
17344: PUSH
17345: LD_EXP 5
17349: NOT
17350: OR
17351: IFFALSE 17355
// exit ;
17353: GO 17423
// for i in camAreas do
17355: LD_ADDR_VAR 0 5
17359: PUSH
17360: LD_EXP 8
17364: PUSH
17365: FOR_IN
17366: IFFALSE 17421
// if InArea ( x , y , i ) then
17368: LD_VAR 0 3
17372: PPUSH
17373: LD_VAR 0 4
17377: PPUSH
17378: LD_VAR 0 5
17382: PPUSH
17383: CALL_OW 309
17387: IFFALSE 17419
// begin SetAreaMapShow ( i , 0 ) ;
17389: LD_VAR 0 5
17393: PPUSH
17394: LD_INT 0
17396: PPUSH
17397: CALL_OW 424
// camAreas := camAreas diff i ;
17401: LD_ADDR_EXP 8
17405: PUSH
17406: LD_EXP 8
17410: PUSH
17411: LD_VAR 0 5
17415: DIFF
17416: ST_TO_ADDR
// break ;
17417: GO 17421
// end ;
17419: GO 17365
17421: POP
17422: POP
// end ;
17423: PPOPN 5
17425: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17426: LD_VAR 0 1
17430: PUSH
17431: LD_INT 2
17433: EQUAL
17434: PUSH
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 5
17442: PUSH
17443: LD_INT 8
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: IN
17450: AND
17451: IFFALSE 17460
// YouLost ( Ally ) ;
17453: LD_STRING Ally
17455: PPUSH
17456: CALL_OW 104
// end ;
17460: PPOPN 2
17462: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17463: LD_VAR 0 1
17467: PUSH
17468: LD_EXP 30
17472: EQUAL
17473: PUSH
17474: LD_VAR 0 2
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 6
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: IN
17489: AND
17490: IFFALSE 17521
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17492: LD_ADDR_EXP 23
17496: PUSH
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 250
17506: PUSH
17507: LD_VAR 0 1
17511: PPUSH
17512: CALL_OW 251
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: ST_TO_ADDR
// end ;
17521: PPOPN 3
17523: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17524: LD_VAR 0 1
17528: PPUSH
17529: LD_VAR 0 2
17533: PPUSH
17534: CALL 33745 0 2
// end ; end_of_file
17538: PPOPN 2
17540: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17541: LD_EXP 11
17545: NOT
17546: PUSH
17547: LD_INT 12
17549: PPUSH
17550: LD_INT 1
17552: PPUSH
17553: CALL_OW 287
17557: PUSH
17558: LD_INT 20
17560: PUSH
17561: LD_INT 16
17563: PUSH
17564: LD_INT 12
17566: PUSH
17567: LD_INT 10
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: LD_OWVAR 67
17580: ARRAY
17581: LESS
17582: AND
17583: IFFALSE 17610
17585: GO 17587
17587: DISABLE
// begin enable ;
17588: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17589: LD_INT 1
17591: PPUSH
17592: LD_INT 5
17594: PPUSH
17595: CALL_OW 12
17599: PPUSH
17600: LD_INT 12
17602: PPUSH
17603: LD_INT 1
17605: PPUSH
17606: CALL_OW 55
// end ; end_of_file
17610: END
// every 0 0$1 trigger omarCountdown do
17611: LD_EXP 22
17615: IFFALSE 17667
17617: GO 17619
17619: DISABLE
// begin enable ;
17620: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17621: LD_ADDR_OWVAR 47
17625: PUSH
17626: LD_STRING #X104-1
17628: PUSH
17629: LD_EXP 22
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17638: LD_ADDR_EXP 22
17642: PUSH
17643: LD_EXP 22
17647: PUSH
17648: LD_INT 35
17650: MINUS
17651: ST_TO_ADDR
// if not omarCountdown then
17652: LD_EXP 22
17656: NOT
17657: IFFALSE 17667
// display_strings :=  ;
17659: LD_ADDR_OWVAR 47
17663: PUSH
17664: LD_STRING 
17666: ST_TO_ADDR
// end ; end_of_file
17667: END
// export globalGameSaveCounter ; every 0 0$1 do
17668: GO 17670
17670: DISABLE
// begin enable ;
17671: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17672: LD_STRING updateTimer(
17674: PUSH
17675: LD_OWVAR 1
17679: STR
17680: PUSH
17681: LD_STRING );
17683: STR
17684: PPUSH
17685: CALL_OW 559
// end ;
17689: END
// every 0 0$1 do
17690: GO 17692
17692: DISABLE
// begin globalGameSaveCounter := 0 ;
17693: LD_ADDR_EXP 52
17697: PUSH
17698: LD_INT 0
17700: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17701: LD_STRING setGameSaveCounter(0)
17703: PPUSH
17704: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17708: LD_STRING initStreamRollete();
17710: PPUSH
17711: CALL_OW 559
// InitStreamMode ;
17715: CALL 19041 0 0
// DefineStreamItems ( false ) ;
17719: LD_INT 0
17721: PPUSH
17722: CALL 19505 0 1
// end ;
17726: END
// export function SOS_MapStart ( ) ; begin
17727: LD_INT 0
17729: PPUSH
// if streamModeActive then
17730: LD_EXP 53
17734: IFFALSE 17743
// DefineStreamItems ( true ) ;
17736: LD_INT 1
17738: PPUSH
17739: CALL 19505 0 1
// UpdateLuaVariables ( ) ;
17743: CALL 17760 0 0
// UpdateFactoryWaypoints ( ) ;
17747: CALL 32366 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17751: CALL 32623 0 0
// end ;
17755: LD_VAR 0 1
17759: RET
// function UpdateLuaVariables ( ) ; begin
17760: LD_INT 0
17762: PPUSH
// if globalGameSaveCounter then
17763: LD_EXP 52
17767: IFFALSE 17801
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17769: LD_ADDR_EXP 52
17773: PUSH
17774: LD_EXP 52
17778: PPUSH
17779: CALL 76743 0 1
17783: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17784: LD_STRING setGameSaveCounter(
17786: PUSH
17787: LD_EXP 52
17791: STR
17792: PUSH
17793: LD_STRING )
17795: STR
17796: PPUSH
17797: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17801: LD_STRING setGameDifficulty(
17803: PUSH
17804: LD_OWVAR 67
17808: STR
17809: PUSH
17810: LD_STRING )
17812: STR
17813: PPUSH
17814: CALL_OW 559
// end ;
17818: LD_VAR 0 1
17822: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17823: LD_INT 0
17825: PPUSH
// if p2 = stream_mode then
17826: LD_VAR 0 2
17830: PUSH
17831: LD_INT 100
17833: EQUAL
17834: IFFALSE 18837
// begin if not StreamModeActive then
17836: LD_EXP 53
17840: NOT
17841: IFFALSE 17851
// StreamModeActive := true ;
17843: LD_ADDR_EXP 53
17847: PUSH
17848: LD_INT 1
17850: ST_TO_ADDR
// if p3 = 0 then
17851: LD_VAR 0 3
17855: PUSH
17856: LD_INT 0
17858: EQUAL
17859: IFFALSE 17865
// InitStreamMode ;
17861: CALL 19041 0 0
// if p3 = 1 then
17865: LD_VAR 0 3
17869: PUSH
17870: LD_INT 1
17872: EQUAL
17873: IFFALSE 17883
// sRocket := true ;
17875: LD_ADDR_EXP 58
17879: PUSH
17880: LD_INT 1
17882: ST_TO_ADDR
// if p3 = 2 then
17883: LD_VAR 0 3
17887: PUSH
17888: LD_INT 2
17890: EQUAL
17891: IFFALSE 17901
// sSpeed := true ;
17893: LD_ADDR_EXP 57
17897: PUSH
17898: LD_INT 1
17900: ST_TO_ADDR
// if p3 = 3 then
17901: LD_VAR 0 3
17905: PUSH
17906: LD_INT 3
17908: EQUAL
17909: IFFALSE 17919
// sEngine := true ;
17911: LD_ADDR_EXP 59
17915: PUSH
17916: LD_INT 1
17918: ST_TO_ADDR
// if p3 = 4 then
17919: LD_VAR 0 3
17923: PUSH
17924: LD_INT 4
17926: EQUAL
17927: IFFALSE 17937
// sSpec := true ;
17929: LD_ADDR_EXP 56
17933: PUSH
17934: LD_INT 1
17936: ST_TO_ADDR
// if p3 = 5 then
17937: LD_VAR 0 3
17941: PUSH
17942: LD_INT 5
17944: EQUAL
17945: IFFALSE 17955
// sLevel := true ;
17947: LD_ADDR_EXP 60
17951: PUSH
17952: LD_INT 1
17954: ST_TO_ADDR
// if p3 = 6 then
17955: LD_VAR 0 3
17959: PUSH
17960: LD_INT 6
17962: EQUAL
17963: IFFALSE 17973
// sArmoury := true ;
17965: LD_ADDR_EXP 61
17969: PUSH
17970: LD_INT 1
17972: ST_TO_ADDR
// if p3 = 7 then
17973: LD_VAR 0 3
17977: PUSH
17978: LD_INT 7
17980: EQUAL
17981: IFFALSE 17991
// sRadar := true ;
17983: LD_ADDR_EXP 62
17987: PUSH
17988: LD_INT 1
17990: ST_TO_ADDR
// if p3 = 8 then
17991: LD_VAR 0 3
17995: PUSH
17996: LD_INT 8
17998: EQUAL
17999: IFFALSE 18009
// sBunker := true ;
18001: LD_ADDR_EXP 63
18005: PUSH
18006: LD_INT 1
18008: ST_TO_ADDR
// if p3 = 9 then
18009: LD_VAR 0 3
18013: PUSH
18014: LD_INT 9
18016: EQUAL
18017: IFFALSE 18027
// sHack := true ;
18019: LD_ADDR_EXP 64
18023: PUSH
18024: LD_INT 1
18026: ST_TO_ADDR
// if p3 = 10 then
18027: LD_VAR 0 3
18031: PUSH
18032: LD_INT 10
18034: EQUAL
18035: IFFALSE 18045
// sFire := true ;
18037: LD_ADDR_EXP 65
18041: PUSH
18042: LD_INT 1
18044: ST_TO_ADDR
// if p3 = 11 then
18045: LD_VAR 0 3
18049: PUSH
18050: LD_INT 11
18052: EQUAL
18053: IFFALSE 18063
// sRefresh := true ;
18055: LD_ADDR_EXP 66
18059: PUSH
18060: LD_INT 1
18062: ST_TO_ADDR
// if p3 = 12 then
18063: LD_VAR 0 3
18067: PUSH
18068: LD_INT 12
18070: EQUAL
18071: IFFALSE 18081
// sExp := true ;
18073: LD_ADDR_EXP 67
18077: PUSH
18078: LD_INT 1
18080: ST_TO_ADDR
// if p3 = 13 then
18081: LD_VAR 0 3
18085: PUSH
18086: LD_INT 13
18088: EQUAL
18089: IFFALSE 18099
// sDepot := true ;
18091: LD_ADDR_EXP 68
18095: PUSH
18096: LD_INT 1
18098: ST_TO_ADDR
// if p3 = 14 then
18099: LD_VAR 0 3
18103: PUSH
18104: LD_INT 14
18106: EQUAL
18107: IFFALSE 18117
// sFlag := true ;
18109: LD_ADDR_EXP 69
18113: PUSH
18114: LD_INT 1
18116: ST_TO_ADDR
// if p3 = 15 then
18117: LD_VAR 0 3
18121: PUSH
18122: LD_INT 15
18124: EQUAL
18125: IFFALSE 18135
// sKamikadze := true ;
18127: LD_ADDR_EXP 77
18131: PUSH
18132: LD_INT 1
18134: ST_TO_ADDR
// if p3 = 16 then
18135: LD_VAR 0 3
18139: PUSH
18140: LD_INT 16
18142: EQUAL
18143: IFFALSE 18153
// sTroll := true ;
18145: LD_ADDR_EXP 78
18149: PUSH
18150: LD_INT 1
18152: ST_TO_ADDR
// if p3 = 17 then
18153: LD_VAR 0 3
18157: PUSH
18158: LD_INT 17
18160: EQUAL
18161: IFFALSE 18171
// sSlow := true ;
18163: LD_ADDR_EXP 79
18167: PUSH
18168: LD_INT 1
18170: ST_TO_ADDR
// if p3 = 18 then
18171: LD_VAR 0 3
18175: PUSH
18176: LD_INT 18
18178: EQUAL
18179: IFFALSE 18189
// sLack := true ;
18181: LD_ADDR_EXP 80
18185: PUSH
18186: LD_INT 1
18188: ST_TO_ADDR
// if p3 = 19 then
18189: LD_VAR 0 3
18193: PUSH
18194: LD_INT 19
18196: EQUAL
18197: IFFALSE 18207
// sTank := true ;
18199: LD_ADDR_EXP 82
18203: PUSH
18204: LD_INT 1
18206: ST_TO_ADDR
// if p3 = 20 then
18207: LD_VAR 0 3
18211: PUSH
18212: LD_INT 20
18214: EQUAL
18215: IFFALSE 18225
// sRemote := true ;
18217: LD_ADDR_EXP 83
18221: PUSH
18222: LD_INT 1
18224: ST_TO_ADDR
// if p3 = 21 then
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 21
18232: EQUAL
18233: IFFALSE 18243
// sPowell := true ;
18235: LD_ADDR_EXP 84
18239: PUSH
18240: LD_INT 1
18242: ST_TO_ADDR
// if p3 = 22 then
18243: LD_VAR 0 3
18247: PUSH
18248: LD_INT 22
18250: EQUAL
18251: IFFALSE 18261
// sTeleport := true ;
18253: LD_ADDR_EXP 87
18257: PUSH
18258: LD_INT 1
18260: ST_TO_ADDR
// if p3 = 23 then
18261: LD_VAR 0 3
18265: PUSH
18266: LD_INT 23
18268: EQUAL
18269: IFFALSE 18279
// sOilTower := true ;
18271: LD_ADDR_EXP 89
18275: PUSH
18276: LD_INT 1
18278: ST_TO_ADDR
// if p3 = 24 then
18279: LD_VAR 0 3
18283: PUSH
18284: LD_INT 24
18286: EQUAL
18287: IFFALSE 18297
// sShovel := true ;
18289: LD_ADDR_EXP 90
18293: PUSH
18294: LD_INT 1
18296: ST_TO_ADDR
// if p3 = 25 then
18297: LD_VAR 0 3
18301: PUSH
18302: LD_INT 25
18304: EQUAL
18305: IFFALSE 18315
// sSheik := true ;
18307: LD_ADDR_EXP 91
18311: PUSH
18312: LD_INT 1
18314: ST_TO_ADDR
// if p3 = 26 then
18315: LD_VAR 0 3
18319: PUSH
18320: LD_INT 26
18322: EQUAL
18323: IFFALSE 18333
// sEarthquake := true ;
18325: LD_ADDR_EXP 93
18329: PUSH
18330: LD_INT 1
18332: ST_TO_ADDR
// if p3 = 27 then
18333: LD_VAR 0 3
18337: PUSH
18338: LD_INT 27
18340: EQUAL
18341: IFFALSE 18351
// sAI := true ;
18343: LD_ADDR_EXP 94
18347: PUSH
18348: LD_INT 1
18350: ST_TO_ADDR
// if p3 = 28 then
18351: LD_VAR 0 3
18355: PUSH
18356: LD_INT 28
18358: EQUAL
18359: IFFALSE 18369
// sCargo := true ;
18361: LD_ADDR_EXP 97
18365: PUSH
18366: LD_INT 1
18368: ST_TO_ADDR
// if p3 = 29 then
18369: LD_VAR 0 3
18373: PUSH
18374: LD_INT 29
18376: EQUAL
18377: IFFALSE 18387
// sDLaser := true ;
18379: LD_ADDR_EXP 98
18383: PUSH
18384: LD_INT 1
18386: ST_TO_ADDR
// if p3 = 30 then
18387: LD_VAR 0 3
18391: PUSH
18392: LD_INT 30
18394: EQUAL
18395: IFFALSE 18405
// sExchange := true ;
18397: LD_ADDR_EXP 99
18401: PUSH
18402: LD_INT 1
18404: ST_TO_ADDR
// if p3 = 31 then
18405: LD_VAR 0 3
18409: PUSH
18410: LD_INT 31
18412: EQUAL
18413: IFFALSE 18423
// sFac := true ;
18415: LD_ADDR_EXP 100
18419: PUSH
18420: LD_INT 1
18422: ST_TO_ADDR
// if p3 = 32 then
18423: LD_VAR 0 3
18427: PUSH
18428: LD_INT 32
18430: EQUAL
18431: IFFALSE 18441
// sPower := true ;
18433: LD_ADDR_EXP 101
18437: PUSH
18438: LD_INT 1
18440: ST_TO_ADDR
// if p3 = 33 then
18441: LD_VAR 0 3
18445: PUSH
18446: LD_INT 33
18448: EQUAL
18449: IFFALSE 18459
// sRandom := true ;
18451: LD_ADDR_EXP 102
18455: PUSH
18456: LD_INT 1
18458: ST_TO_ADDR
// if p3 = 34 then
18459: LD_VAR 0 3
18463: PUSH
18464: LD_INT 34
18466: EQUAL
18467: IFFALSE 18477
// sShield := true ;
18469: LD_ADDR_EXP 103
18473: PUSH
18474: LD_INT 1
18476: ST_TO_ADDR
// if p3 = 35 then
18477: LD_VAR 0 3
18481: PUSH
18482: LD_INT 35
18484: EQUAL
18485: IFFALSE 18495
// sTime := true ;
18487: LD_ADDR_EXP 104
18491: PUSH
18492: LD_INT 1
18494: ST_TO_ADDR
// if p3 = 36 then
18495: LD_VAR 0 3
18499: PUSH
18500: LD_INT 36
18502: EQUAL
18503: IFFALSE 18513
// sTools := true ;
18505: LD_ADDR_EXP 105
18509: PUSH
18510: LD_INT 1
18512: ST_TO_ADDR
// if p3 = 101 then
18513: LD_VAR 0 3
18517: PUSH
18518: LD_INT 101
18520: EQUAL
18521: IFFALSE 18531
// sSold := true ;
18523: LD_ADDR_EXP 70
18527: PUSH
18528: LD_INT 1
18530: ST_TO_ADDR
// if p3 = 102 then
18531: LD_VAR 0 3
18535: PUSH
18536: LD_INT 102
18538: EQUAL
18539: IFFALSE 18549
// sDiff := true ;
18541: LD_ADDR_EXP 71
18545: PUSH
18546: LD_INT 1
18548: ST_TO_ADDR
// if p3 = 103 then
18549: LD_VAR 0 3
18553: PUSH
18554: LD_INT 103
18556: EQUAL
18557: IFFALSE 18567
// sFog := true ;
18559: LD_ADDR_EXP 74
18563: PUSH
18564: LD_INT 1
18566: ST_TO_ADDR
// if p3 = 104 then
18567: LD_VAR 0 3
18571: PUSH
18572: LD_INT 104
18574: EQUAL
18575: IFFALSE 18585
// sReset := true ;
18577: LD_ADDR_EXP 75
18581: PUSH
18582: LD_INT 1
18584: ST_TO_ADDR
// if p3 = 105 then
18585: LD_VAR 0 3
18589: PUSH
18590: LD_INT 105
18592: EQUAL
18593: IFFALSE 18603
// sSun := true ;
18595: LD_ADDR_EXP 76
18599: PUSH
18600: LD_INT 1
18602: ST_TO_ADDR
// if p3 = 106 then
18603: LD_VAR 0 3
18607: PUSH
18608: LD_INT 106
18610: EQUAL
18611: IFFALSE 18621
// sTiger := true ;
18613: LD_ADDR_EXP 72
18617: PUSH
18618: LD_INT 1
18620: ST_TO_ADDR
// if p3 = 107 then
18621: LD_VAR 0 3
18625: PUSH
18626: LD_INT 107
18628: EQUAL
18629: IFFALSE 18639
// sBomb := true ;
18631: LD_ADDR_EXP 73
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// if p3 = 108 then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 108
18646: EQUAL
18647: IFFALSE 18657
// sWound := true ;
18649: LD_ADDR_EXP 81
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// if p3 = 109 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 109
18664: EQUAL
18665: IFFALSE 18675
// sBetray := true ;
18667: LD_ADDR_EXP 85
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 110 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 110
18682: EQUAL
18683: IFFALSE 18693
// sContamin := true ;
18685: LD_ADDR_EXP 86
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 111 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 111
18700: EQUAL
18701: IFFALSE 18711
// sOil := true ;
18703: LD_ADDR_EXP 88
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 112 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 112
18718: EQUAL
18719: IFFALSE 18729
// sStu := true ;
18721: LD_ADDR_EXP 92
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 113 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 113
18736: EQUAL
18737: IFFALSE 18747
// sBazooka := true ;
18739: LD_ADDR_EXP 95
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 114 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 114
18754: EQUAL
18755: IFFALSE 18765
// sMortar := true ;
18757: LD_ADDR_EXP 96
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 115 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 115
18772: EQUAL
18773: IFFALSE 18783
// sRanger := true ;
18775: LD_ADDR_EXP 106
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 116 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 116
18790: EQUAL
18791: IFFALSE 18801
// sComputer := true ;
18793: LD_ADDR_EXP 107
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 117 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 117
18808: EQUAL
18809: IFFALSE 18819
// s30 := true ;
18811: LD_ADDR_EXP 108
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// if p3 = 118 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 118
18826: EQUAL
18827: IFFALSE 18837
// s60 := true ;
18829: LD_ADDR_EXP 109
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// end ; if p2 = hack_mode then
18837: LD_VAR 0 2
18841: PUSH
18842: LD_INT 101
18844: EQUAL
18845: IFFALSE 18973
// begin case p3 of 1 :
18847: LD_VAR 0 3
18851: PUSH
18852: LD_INT 1
18854: DOUBLE
18855: EQUAL
18856: IFTRUE 18860
18858: GO 18867
18860: POP
// hHackUnlimitedResources ; 2 :
18861: CALL 31112 0 0
18865: GO 18973
18867: LD_INT 2
18869: DOUBLE
18870: EQUAL
18871: IFTRUE 18875
18873: GO 18882
18875: POP
// hHackSetLevel10 ; 3 :
18876: CALL 31245 0 0
18880: GO 18973
18882: LD_INT 3
18884: DOUBLE
18885: EQUAL
18886: IFTRUE 18890
18888: GO 18897
18890: POP
// hHackSetLevel10YourUnits ; 4 :
18891: CALL 31330 0 0
18895: GO 18973
18897: LD_INT 4
18899: DOUBLE
18900: EQUAL
18901: IFTRUE 18905
18903: GO 18912
18905: POP
// hHackInvincible ; 5 :
18906: CALL 31778 0 0
18910: GO 18973
18912: LD_INT 5
18914: DOUBLE
18915: EQUAL
18916: IFTRUE 18920
18918: GO 18927
18920: POP
// hHackInvisible ; 6 :
18921: CALL 31889 0 0
18925: GO 18973
18927: LD_INT 6
18929: DOUBLE
18930: EQUAL
18931: IFTRUE 18935
18933: GO 18942
18935: POP
// hHackChangeYourSide ; 7 :
18936: CALL 31946 0 0
18940: GO 18973
18942: LD_INT 7
18944: DOUBLE
18945: EQUAL
18946: IFTRUE 18950
18948: GO 18957
18950: POP
// hHackChangeUnitSide ; 8 :
18951: CALL 31988 0 0
18955: GO 18973
18957: LD_INT 8
18959: DOUBLE
18960: EQUAL
18961: IFTRUE 18965
18963: GO 18972
18965: POP
// hHackFog ; end ;
18966: CALL 32089 0 0
18970: GO 18973
18972: POP
// end ; if p2 = game_save_mode then
18973: LD_VAR 0 2
18977: PUSH
18978: LD_INT 102
18980: EQUAL
18981: IFFALSE 19036
// begin if p3 = 1 then
18983: LD_VAR 0 3
18987: PUSH
18988: LD_INT 1
18990: EQUAL
18991: IFFALSE 19003
// globalGameSaveCounter := p4 ;
18993: LD_ADDR_EXP 52
18997: PUSH
18998: LD_VAR 0 4
19002: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19003: LD_VAR 0 3
19007: PUSH
19008: LD_INT 2
19010: EQUAL
19011: PUSH
19012: LD_EXP 52
19016: AND
19017: IFFALSE 19036
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19019: LD_STRING setGameSaveCounter(
19021: PUSH
19022: LD_EXP 52
19026: STR
19027: PUSH
19028: LD_STRING )
19030: STR
19031: PPUSH
19032: CALL_OW 559
// end ; end ;
19036: LD_VAR 0 7
19040: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19041: LD_INT 0
19043: PPUSH
// streamModeActive := false ;
19044: LD_ADDR_EXP 53
19048: PUSH
19049: LD_INT 0
19051: ST_TO_ADDR
// normalCounter := 36 ;
19052: LD_ADDR_EXP 54
19056: PUSH
19057: LD_INT 36
19059: ST_TO_ADDR
// hardcoreCounter := 18 ;
19060: LD_ADDR_EXP 55
19064: PUSH
19065: LD_INT 18
19067: ST_TO_ADDR
// sRocket := false ;
19068: LD_ADDR_EXP 58
19072: PUSH
19073: LD_INT 0
19075: ST_TO_ADDR
// sSpeed := false ;
19076: LD_ADDR_EXP 57
19080: PUSH
19081: LD_INT 0
19083: ST_TO_ADDR
// sEngine := false ;
19084: LD_ADDR_EXP 59
19088: PUSH
19089: LD_INT 0
19091: ST_TO_ADDR
// sSpec := false ;
19092: LD_ADDR_EXP 56
19096: PUSH
19097: LD_INT 0
19099: ST_TO_ADDR
// sLevel := false ;
19100: LD_ADDR_EXP 60
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
// sArmoury := false ;
19108: LD_ADDR_EXP 61
19112: PUSH
19113: LD_INT 0
19115: ST_TO_ADDR
// sRadar := false ;
19116: LD_ADDR_EXP 62
19120: PUSH
19121: LD_INT 0
19123: ST_TO_ADDR
// sBunker := false ;
19124: LD_ADDR_EXP 63
19128: PUSH
19129: LD_INT 0
19131: ST_TO_ADDR
// sHack := false ;
19132: LD_ADDR_EXP 64
19136: PUSH
19137: LD_INT 0
19139: ST_TO_ADDR
// sFire := false ;
19140: LD_ADDR_EXP 65
19144: PUSH
19145: LD_INT 0
19147: ST_TO_ADDR
// sRefresh := false ;
19148: LD_ADDR_EXP 66
19152: PUSH
19153: LD_INT 0
19155: ST_TO_ADDR
// sExp := false ;
19156: LD_ADDR_EXP 67
19160: PUSH
19161: LD_INT 0
19163: ST_TO_ADDR
// sDepot := false ;
19164: LD_ADDR_EXP 68
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// sFlag := false ;
19172: LD_ADDR_EXP 69
19176: PUSH
19177: LD_INT 0
19179: ST_TO_ADDR
// sKamikadze := false ;
19180: LD_ADDR_EXP 77
19184: PUSH
19185: LD_INT 0
19187: ST_TO_ADDR
// sTroll := false ;
19188: LD_ADDR_EXP 78
19192: PUSH
19193: LD_INT 0
19195: ST_TO_ADDR
// sSlow := false ;
19196: LD_ADDR_EXP 79
19200: PUSH
19201: LD_INT 0
19203: ST_TO_ADDR
// sLack := false ;
19204: LD_ADDR_EXP 80
19208: PUSH
19209: LD_INT 0
19211: ST_TO_ADDR
// sTank := false ;
19212: LD_ADDR_EXP 82
19216: PUSH
19217: LD_INT 0
19219: ST_TO_ADDR
// sRemote := false ;
19220: LD_ADDR_EXP 83
19224: PUSH
19225: LD_INT 0
19227: ST_TO_ADDR
// sPowell := false ;
19228: LD_ADDR_EXP 84
19232: PUSH
19233: LD_INT 0
19235: ST_TO_ADDR
// sTeleport := false ;
19236: LD_ADDR_EXP 87
19240: PUSH
19241: LD_INT 0
19243: ST_TO_ADDR
// sOilTower := false ;
19244: LD_ADDR_EXP 89
19248: PUSH
19249: LD_INT 0
19251: ST_TO_ADDR
// sShovel := false ;
19252: LD_ADDR_EXP 90
19256: PUSH
19257: LD_INT 0
19259: ST_TO_ADDR
// sSheik := false ;
19260: LD_ADDR_EXP 91
19264: PUSH
19265: LD_INT 0
19267: ST_TO_ADDR
// sEarthquake := false ;
19268: LD_ADDR_EXP 93
19272: PUSH
19273: LD_INT 0
19275: ST_TO_ADDR
// sAI := false ;
19276: LD_ADDR_EXP 94
19280: PUSH
19281: LD_INT 0
19283: ST_TO_ADDR
// sCargo := false ;
19284: LD_ADDR_EXP 97
19288: PUSH
19289: LD_INT 0
19291: ST_TO_ADDR
// sDLaser := false ;
19292: LD_ADDR_EXP 98
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// sExchange := false ;
19300: LD_ADDR_EXP 99
19304: PUSH
19305: LD_INT 0
19307: ST_TO_ADDR
// sFac := false ;
19308: LD_ADDR_EXP 100
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// sPower := false ;
19316: LD_ADDR_EXP 101
19320: PUSH
19321: LD_INT 0
19323: ST_TO_ADDR
// sRandom := false ;
19324: LD_ADDR_EXP 102
19328: PUSH
19329: LD_INT 0
19331: ST_TO_ADDR
// sShield := false ;
19332: LD_ADDR_EXP 103
19336: PUSH
19337: LD_INT 0
19339: ST_TO_ADDR
// sTime := false ;
19340: LD_ADDR_EXP 104
19344: PUSH
19345: LD_INT 0
19347: ST_TO_ADDR
// sTools := false ;
19348: LD_ADDR_EXP 105
19352: PUSH
19353: LD_INT 0
19355: ST_TO_ADDR
// sSold := false ;
19356: LD_ADDR_EXP 70
19360: PUSH
19361: LD_INT 0
19363: ST_TO_ADDR
// sDiff := false ;
19364: LD_ADDR_EXP 71
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// sFog := false ;
19372: LD_ADDR_EXP 74
19376: PUSH
19377: LD_INT 0
19379: ST_TO_ADDR
// sReset := false ;
19380: LD_ADDR_EXP 75
19384: PUSH
19385: LD_INT 0
19387: ST_TO_ADDR
// sSun := false ;
19388: LD_ADDR_EXP 76
19392: PUSH
19393: LD_INT 0
19395: ST_TO_ADDR
// sTiger := false ;
19396: LD_ADDR_EXP 72
19400: PUSH
19401: LD_INT 0
19403: ST_TO_ADDR
// sBomb := false ;
19404: LD_ADDR_EXP 73
19408: PUSH
19409: LD_INT 0
19411: ST_TO_ADDR
// sWound := false ;
19412: LD_ADDR_EXP 81
19416: PUSH
19417: LD_INT 0
19419: ST_TO_ADDR
// sBetray := false ;
19420: LD_ADDR_EXP 85
19424: PUSH
19425: LD_INT 0
19427: ST_TO_ADDR
// sContamin := false ;
19428: LD_ADDR_EXP 86
19432: PUSH
19433: LD_INT 0
19435: ST_TO_ADDR
// sOil := false ;
19436: LD_ADDR_EXP 88
19440: PUSH
19441: LD_INT 0
19443: ST_TO_ADDR
// sStu := false ;
19444: LD_ADDR_EXP 92
19448: PUSH
19449: LD_INT 0
19451: ST_TO_ADDR
// sBazooka := false ;
19452: LD_ADDR_EXP 95
19456: PUSH
19457: LD_INT 0
19459: ST_TO_ADDR
// sMortar := false ;
19460: LD_ADDR_EXP 96
19464: PUSH
19465: LD_INT 0
19467: ST_TO_ADDR
// sRanger := false ;
19468: LD_ADDR_EXP 106
19472: PUSH
19473: LD_INT 0
19475: ST_TO_ADDR
// sComputer := false ;
19476: LD_ADDR_EXP 107
19480: PUSH
19481: LD_INT 0
19483: ST_TO_ADDR
// s30 := false ;
19484: LD_ADDR_EXP 108
19488: PUSH
19489: LD_INT 0
19491: ST_TO_ADDR
// s60 := false ;
19492: LD_ADDR_EXP 109
19496: PUSH
19497: LD_INT 0
19499: ST_TO_ADDR
// end ;
19500: LD_VAR 0 1
19504: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
19509: PPUSH
19510: PPUSH
19511: PPUSH
19512: PPUSH
19513: PPUSH
// result := [ ] ;
19514: LD_ADDR_VAR 0 2
19518: PUSH
19519: EMPTY
19520: ST_TO_ADDR
// if campaign_id = 1 then
19521: LD_OWVAR 69
19525: PUSH
19526: LD_INT 1
19528: EQUAL
19529: IFFALSE 22695
// begin case mission_number of 1 :
19531: LD_OWVAR 70
19535: PUSH
19536: LD_INT 1
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19620
19544: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: LD_INT 4
19555: PUSH
19556: LD_INT 11
19558: PUSH
19559: LD_INT 12
19561: PUSH
19562: LD_INT 15
19564: PUSH
19565: LD_INT 16
19567: PUSH
19568: LD_INT 22
19570: PUSH
19571: LD_INT 23
19573: PUSH
19574: LD_INT 26
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 101
19590: PUSH
19591: LD_INT 102
19593: PUSH
19594: LD_INT 106
19596: PUSH
19597: LD_INT 116
19599: PUSH
19600: LD_INT 117
19602: PUSH
19603: LD_INT 118
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: ST_TO_ADDR
19618: GO 22693
19620: LD_INT 2
19622: DOUBLE
19623: EQUAL
19624: IFTRUE 19628
19626: GO 19712
19628: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: LD_INT 4
19639: PUSH
19640: LD_INT 11
19642: PUSH
19643: LD_INT 12
19645: PUSH
19646: LD_INT 15
19648: PUSH
19649: LD_INT 16
19651: PUSH
19652: LD_INT 22
19654: PUSH
19655: LD_INT 23
19657: PUSH
19658: LD_INT 26
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 101
19674: PUSH
19675: LD_INT 102
19677: PUSH
19678: LD_INT 105
19680: PUSH
19681: LD_INT 106
19683: PUSH
19684: LD_INT 108
19686: PUSH
19687: LD_INT 116
19689: PUSH
19690: LD_INT 117
19692: PUSH
19693: LD_INT 118
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: ST_TO_ADDR
19710: GO 22693
19712: LD_INT 3
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19808
19720: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19721: LD_ADDR_VAR 0 2
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: LD_INT 4
19731: PUSH
19732: LD_INT 5
19734: PUSH
19735: LD_INT 11
19737: PUSH
19738: LD_INT 12
19740: PUSH
19741: LD_INT 15
19743: PUSH
19744: LD_INT 16
19746: PUSH
19747: LD_INT 22
19749: PUSH
19750: LD_INT 26
19752: PUSH
19753: LD_INT 36
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 101
19770: PUSH
19771: LD_INT 102
19773: PUSH
19774: LD_INT 105
19776: PUSH
19777: LD_INT 106
19779: PUSH
19780: LD_INT 108
19782: PUSH
19783: LD_INT 116
19785: PUSH
19786: LD_INT 117
19788: PUSH
19789: LD_INT 118
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: ST_TO_ADDR
19806: GO 22693
19808: LD_INT 4
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19912
19816: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19817: LD_ADDR_VAR 0 2
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 4
19827: PUSH
19828: LD_INT 5
19830: PUSH
19831: LD_INT 8
19833: PUSH
19834: LD_INT 11
19836: PUSH
19837: LD_INT 12
19839: PUSH
19840: LD_INT 15
19842: PUSH
19843: LD_INT 16
19845: PUSH
19846: LD_INT 22
19848: PUSH
19849: LD_INT 23
19851: PUSH
19852: LD_INT 26
19854: PUSH
19855: LD_INT 36
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 101
19874: PUSH
19875: LD_INT 102
19877: PUSH
19878: LD_INT 105
19880: PUSH
19881: LD_INT 106
19883: PUSH
19884: LD_INT 108
19886: PUSH
19887: LD_INT 116
19889: PUSH
19890: LD_INT 117
19892: PUSH
19893: LD_INT 118
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: ST_TO_ADDR
19910: GO 22693
19912: LD_INT 5
19914: DOUBLE
19915: EQUAL
19916: IFTRUE 19920
19918: GO 20032
19920: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19921: LD_ADDR_VAR 0 2
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 4
19931: PUSH
19932: LD_INT 5
19934: PUSH
19935: LD_INT 6
19937: PUSH
19938: LD_INT 8
19940: PUSH
19941: LD_INT 11
19943: PUSH
19944: LD_INT 12
19946: PUSH
19947: LD_INT 15
19949: PUSH
19950: LD_INT 16
19952: PUSH
19953: LD_INT 22
19955: PUSH
19956: LD_INT 23
19958: PUSH
19959: LD_INT 25
19961: PUSH
19962: LD_INT 26
19964: PUSH
19965: LD_INT 36
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 101
19986: PUSH
19987: LD_INT 102
19989: PUSH
19990: LD_INT 105
19992: PUSH
19993: LD_INT 106
19995: PUSH
19996: LD_INT 108
19998: PUSH
19999: LD_INT 109
20001: PUSH
20002: LD_INT 112
20004: PUSH
20005: LD_INT 116
20007: PUSH
20008: LD_INT 117
20010: PUSH
20011: LD_INT 118
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: ST_TO_ADDR
20030: GO 22693
20032: LD_INT 6
20034: DOUBLE
20035: EQUAL
20036: IFTRUE 20040
20038: GO 20172
20040: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20041: LD_ADDR_VAR 0 2
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 4
20051: PUSH
20052: LD_INT 5
20054: PUSH
20055: LD_INT 6
20057: PUSH
20058: LD_INT 8
20060: PUSH
20061: LD_INT 11
20063: PUSH
20064: LD_INT 12
20066: PUSH
20067: LD_INT 15
20069: PUSH
20070: LD_INT 16
20072: PUSH
20073: LD_INT 20
20075: PUSH
20076: LD_INT 21
20078: PUSH
20079: LD_INT 22
20081: PUSH
20082: LD_INT 23
20084: PUSH
20085: LD_INT 25
20087: PUSH
20088: LD_INT 26
20090: PUSH
20091: LD_INT 30
20093: PUSH
20094: LD_INT 31
20096: PUSH
20097: LD_INT 32
20099: PUSH
20100: LD_INT 36
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 101
20126: PUSH
20127: LD_INT 102
20129: PUSH
20130: LD_INT 105
20132: PUSH
20133: LD_INT 106
20135: PUSH
20136: LD_INT 108
20138: PUSH
20139: LD_INT 109
20141: PUSH
20142: LD_INT 112
20144: PUSH
20145: LD_INT 116
20147: PUSH
20148: LD_INT 117
20150: PUSH
20151: LD_INT 118
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: ST_TO_ADDR
20170: GO 22693
20172: LD_INT 7
20174: DOUBLE
20175: EQUAL
20176: IFTRUE 20180
20178: GO 20292
20180: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20181: LD_ADDR_VAR 0 2
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: LD_INT 4
20191: PUSH
20192: LD_INT 5
20194: PUSH
20195: LD_INT 7
20197: PUSH
20198: LD_INT 11
20200: PUSH
20201: LD_INT 12
20203: PUSH
20204: LD_INT 15
20206: PUSH
20207: LD_INT 16
20209: PUSH
20210: LD_INT 20
20212: PUSH
20213: LD_INT 21
20215: PUSH
20216: LD_INT 22
20218: PUSH
20219: LD_INT 23
20221: PUSH
20222: LD_INT 25
20224: PUSH
20225: LD_INT 26
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 101
20246: PUSH
20247: LD_INT 102
20249: PUSH
20250: LD_INT 103
20252: PUSH
20253: LD_INT 105
20255: PUSH
20256: LD_INT 106
20258: PUSH
20259: LD_INT 108
20261: PUSH
20262: LD_INT 112
20264: PUSH
20265: LD_INT 116
20267: PUSH
20268: LD_INT 117
20270: PUSH
20271: LD_INT 118
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: ST_TO_ADDR
20290: GO 22693
20292: LD_INT 8
20294: DOUBLE
20295: EQUAL
20296: IFTRUE 20300
20298: GO 20440
20300: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20301: LD_ADDR_VAR 0 2
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 4
20311: PUSH
20312: LD_INT 5
20314: PUSH
20315: LD_INT 6
20317: PUSH
20318: LD_INT 7
20320: PUSH
20321: LD_INT 8
20323: PUSH
20324: LD_INT 11
20326: PUSH
20327: LD_INT 12
20329: PUSH
20330: LD_INT 15
20332: PUSH
20333: LD_INT 16
20335: PUSH
20336: LD_INT 20
20338: PUSH
20339: LD_INT 21
20341: PUSH
20342: LD_INT 22
20344: PUSH
20345: LD_INT 23
20347: PUSH
20348: LD_INT 25
20350: PUSH
20351: LD_INT 26
20353: PUSH
20354: LD_INT 30
20356: PUSH
20357: LD_INT 31
20359: PUSH
20360: LD_INT 32
20362: PUSH
20363: LD_INT 36
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 101
20390: PUSH
20391: LD_INT 102
20393: PUSH
20394: LD_INT 103
20396: PUSH
20397: LD_INT 105
20399: PUSH
20400: LD_INT 106
20402: PUSH
20403: LD_INT 108
20405: PUSH
20406: LD_INT 109
20408: PUSH
20409: LD_INT 112
20411: PUSH
20412: LD_INT 116
20414: PUSH
20415: LD_INT 117
20417: PUSH
20418: LD_INT 118
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: ST_TO_ADDR
20438: GO 22693
20440: LD_INT 9
20442: DOUBLE
20443: EQUAL
20444: IFTRUE 20448
20446: GO 20596
20448: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20449: LD_ADDR_VAR 0 2
20453: PUSH
20454: LD_INT 2
20456: PUSH
20457: LD_INT 4
20459: PUSH
20460: LD_INT 5
20462: PUSH
20463: LD_INT 6
20465: PUSH
20466: LD_INT 7
20468: PUSH
20469: LD_INT 8
20471: PUSH
20472: LD_INT 11
20474: PUSH
20475: LD_INT 12
20477: PUSH
20478: LD_INT 15
20480: PUSH
20481: LD_INT 16
20483: PUSH
20484: LD_INT 20
20486: PUSH
20487: LD_INT 21
20489: PUSH
20490: LD_INT 22
20492: PUSH
20493: LD_INT 23
20495: PUSH
20496: LD_INT 25
20498: PUSH
20499: LD_INT 26
20501: PUSH
20502: LD_INT 28
20504: PUSH
20505: LD_INT 30
20507: PUSH
20508: LD_INT 31
20510: PUSH
20511: LD_INT 32
20513: PUSH
20514: LD_INT 36
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 101
20542: PUSH
20543: LD_INT 102
20545: PUSH
20546: LD_INT 103
20548: PUSH
20549: LD_INT 105
20551: PUSH
20552: LD_INT 106
20554: PUSH
20555: LD_INT 108
20557: PUSH
20558: LD_INT 109
20560: PUSH
20561: LD_INT 112
20563: PUSH
20564: LD_INT 114
20566: PUSH
20567: LD_INT 116
20569: PUSH
20570: LD_INT 117
20572: PUSH
20573: LD_INT 118
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
20594: GO 22693
20596: LD_INT 10
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20800
20604: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20605: LD_ADDR_VAR 0 2
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: LD_INT 4
20615: PUSH
20616: LD_INT 5
20618: PUSH
20619: LD_INT 6
20621: PUSH
20622: LD_INT 7
20624: PUSH
20625: LD_INT 8
20627: PUSH
20628: LD_INT 9
20630: PUSH
20631: LD_INT 10
20633: PUSH
20634: LD_INT 11
20636: PUSH
20637: LD_INT 12
20639: PUSH
20640: LD_INT 13
20642: PUSH
20643: LD_INT 14
20645: PUSH
20646: LD_INT 15
20648: PUSH
20649: LD_INT 16
20651: PUSH
20652: LD_INT 17
20654: PUSH
20655: LD_INT 18
20657: PUSH
20658: LD_INT 19
20660: PUSH
20661: LD_INT 20
20663: PUSH
20664: LD_INT 21
20666: PUSH
20667: LD_INT 22
20669: PUSH
20670: LD_INT 23
20672: PUSH
20673: LD_INT 24
20675: PUSH
20676: LD_INT 25
20678: PUSH
20679: LD_INT 26
20681: PUSH
20682: LD_INT 28
20684: PUSH
20685: LD_INT 30
20687: PUSH
20688: LD_INT 31
20690: PUSH
20691: LD_INT 32
20693: PUSH
20694: LD_INT 36
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 101
20730: PUSH
20731: LD_INT 102
20733: PUSH
20734: LD_INT 103
20736: PUSH
20737: LD_INT 104
20739: PUSH
20740: LD_INT 105
20742: PUSH
20743: LD_INT 106
20745: PUSH
20746: LD_INT 107
20748: PUSH
20749: LD_INT 108
20751: PUSH
20752: LD_INT 109
20754: PUSH
20755: LD_INT 110
20757: PUSH
20758: LD_INT 111
20760: PUSH
20761: LD_INT 112
20763: PUSH
20764: LD_INT 114
20766: PUSH
20767: LD_INT 116
20769: PUSH
20770: LD_INT 117
20772: PUSH
20773: LD_INT 118
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: ST_TO_ADDR
20798: GO 22693
20800: LD_INT 11
20802: DOUBLE
20803: EQUAL
20804: IFTRUE 20808
20806: GO 21012
20808: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20809: LD_ADDR_VAR 0 2
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: LD_INT 3
20819: PUSH
20820: LD_INT 4
20822: PUSH
20823: LD_INT 5
20825: PUSH
20826: LD_INT 6
20828: PUSH
20829: LD_INT 7
20831: PUSH
20832: LD_INT 8
20834: PUSH
20835: LD_INT 9
20837: PUSH
20838: LD_INT 10
20840: PUSH
20841: LD_INT 11
20843: PUSH
20844: LD_INT 12
20846: PUSH
20847: LD_INT 13
20849: PUSH
20850: LD_INT 14
20852: PUSH
20853: LD_INT 15
20855: PUSH
20856: LD_INT 16
20858: PUSH
20859: LD_INT 17
20861: PUSH
20862: LD_INT 18
20864: PUSH
20865: LD_INT 19
20867: PUSH
20868: LD_INT 20
20870: PUSH
20871: LD_INT 21
20873: PUSH
20874: LD_INT 22
20876: PUSH
20877: LD_INT 23
20879: PUSH
20880: LD_INT 24
20882: PUSH
20883: LD_INT 25
20885: PUSH
20886: LD_INT 26
20888: PUSH
20889: LD_INT 28
20891: PUSH
20892: LD_INT 30
20894: PUSH
20895: LD_INT 31
20897: PUSH
20898: LD_INT 32
20900: PUSH
20901: LD_INT 34
20903: PUSH
20904: LD_INT 36
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 101
20942: PUSH
20943: LD_INT 102
20945: PUSH
20946: LD_INT 103
20948: PUSH
20949: LD_INT 104
20951: PUSH
20952: LD_INT 105
20954: PUSH
20955: LD_INT 106
20957: PUSH
20958: LD_INT 107
20960: PUSH
20961: LD_INT 108
20963: PUSH
20964: LD_INT 109
20966: PUSH
20967: LD_INT 110
20969: PUSH
20970: LD_INT 111
20972: PUSH
20973: LD_INT 112
20975: PUSH
20976: LD_INT 114
20978: PUSH
20979: LD_INT 116
20981: PUSH
20982: LD_INT 117
20984: PUSH
20985: LD_INT 118
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: ST_TO_ADDR
21010: GO 22693
21012: LD_INT 12
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21240
21020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21021: LD_ADDR_VAR 0 2
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: LD_INT 3
21034: PUSH
21035: LD_INT 4
21037: PUSH
21038: LD_INT 5
21040: PUSH
21041: LD_INT 6
21043: PUSH
21044: LD_INT 7
21046: PUSH
21047: LD_INT 8
21049: PUSH
21050: LD_INT 9
21052: PUSH
21053: LD_INT 10
21055: PUSH
21056: LD_INT 11
21058: PUSH
21059: LD_INT 12
21061: PUSH
21062: LD_INT 13
21064: PUSH
21065: LD_INT 14
21067: PUSH
21068: LD_INT 15
21070: PUSH
21071: LD_INT 16
21073: PUSH
21074: LD_INT 17
21076: PUSH
21077: LD_INT 18
21079: PUSH
21080: LD_INT 19
21082: PUSH
21083: LD_INT 20
21085: PUSH
21086: LD_INT 21
21088: PUSH
21089: LD_INT 22
21091: PUSH
21092: LD_INT 23
21094: PUSH
21095: LD_INT 24
21097: PUSH
21098: LD_INT 25
21100: PUSH
21101: LD_INT 26
21103: PUSH
21104: LD_INT 27
21106: PUSH
21107: LD_INT 28
21109: PUSH
21110: LD_INT 30
21112: PUSH
21113: LD_INT 31
21115: PUSH
21116: LD_INT 32
21118: PUSH
21119: LD_INT 33
21121: PUSH
21122: LD_INT 34
21124: PUSH
21125: LD_INT 36
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 101
21166: PUSH
21167: LD_INT 102
21169: PUSH
21170: LD_INT 103
21172: PUSH
21173: LD_INT 104
21175: PUSH
21176: LD_INT 105
21178: PUSH
21179: LD_INT 106
21181: PUSH
21182: LD_INT 107
21184: PUSH
21185: LD_INT 108
21187: PUSH
21188: LD_INT 109
21190: PUSH
21191: LD_INT 110
21193: PUSH
21194: LD_INT 111
21196: PUSH
21197: LD_INT 112
21199: PUSH
21200: LD_INT 113
21202: PUSH
21203: LD_INT 114
21205: PUSH
21206: LD_INT 116
21208: PUSH
21209: LD_INT 117
21211: PUSH
21212: LD_INT 118
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: ST_TO_ADDR
21238: GO 22693
21240: LD_INT 13
21242: DOUBLE
21243: EQUAL
21244: IFTRUE 21248
21246: GO 21456
21248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21249: LD_ADDR_VAR 0 2
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: LD_INT 3
21262: PUSH
21263: LD_INT 4
21265: PUSH
21266: LD_INT 5
21268: PUSH
21269: LD_INT 8
21271: PUSH
21272: LD_INT 9
21274: PUSH
21275: LD_INT 10
21277: PUSH
21278: LD_INT 11
21280: PUSH
21281: LD_INT 12
21283: PUSH
21284: LD_INT 14
21286: PUSH
21287: LD_INT 15
21289: PUSH
21290: LD_INT 16
21292: PUSH
21293: LD_INT 17
21295: PUSH
21296: LD_INT 18
21298: PUSH
21299: LD_INT 19
21301: PUSH
21302: LD_INT 20
21304: PUSH
21305: LD_INT 21
21307: PUSH
21308: LD_INT 22
21310: PUSH
21311: LD_INT 23
21313: PUSH
21314: LD_INT 24
21316: PUSH
21317: LD_INT 25
21319: PUSH
21320: LD_INT 26
21322: PUSH
21323: LD_INT 27
21325: PUSH
21326: LD_INT 28
21328: PUSH
21329: LD_INT 30
21331: PUSH
21332: LD_INT 31
21334: PUSH
21335: LD_INT 32
21337: PUSH
21338: LD_INT 33
21340: PUSH
21341: LD_INT 34
21343: PUSH
21344: LD_INT 36
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 101
21382: PUSH
21383: LD_INT 102
21385: PUSH
21386: LD_INT 103
21388: PUSH
21389: LD_INT 104
21391: PUSH
21392: LD_INT 105
21394: PUSH
21395: LD_INT 106
21397: PUSH
21398: LD_INT 107
21400: PUSH
21401: LD_INT 108
21403: PUSH
21404: LD_INT 109
21406: PUSH
21407: LD_INT 110
21409: PUSH
21410: LD_INT 111
21412: PUSH
21413: LD_INT 112
21415: PUSH
21416: LD_INT 113
21418: PUSH
21419: LD_INT 114
21421: PUSH
21422: LD_INT 116
21424: PUSH
21425: LD_INT 117
21427: PUSH
21428: LD_INT 118
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: ST_TO_ADDR
21454: GO 22693
21456: LD_INT 14
21458: DOUBLE
21459: EQUAL
21460: IFTRUE 21464
21462: GO 21688
21464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21465: LD_ADDR_VAR 0 2
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: LD_INT 3
21478: PUSH
21479: LD_INT 4
21481: PUSH
21482: LD_INT 5
21484: PUSH
21485: LD_INT 6
21487: PUSH
21488: LD_INT 7
21490: PUSH
21491: LD_INT 8
21493: PUSH
21494: LD_INT 9
21496: PUSH
21497: LD_INT 10
21499: PUSH
21500: LD_INT 11
21502: PUSH
21503: LD_INT 12
21505: PUSH
21506: LD_INT 13
21508: PUSH
21509: LD_INT 14
21511: PUSH
21512: LD_INT 15
21514: PUSH
21515: LD_INT 16
21517: PUSH
21518: LD_INT 17
21520: PUSH
21521: LD_INT 18
21523: PUSH
21524: LD_INT 19
21526: PUSH
21527: LD_INT 20
21529: PUSH
21530: LD_INT 21
21532: PUSH
21533: LD_INT 22
21535: PUSH
21536: LD_INT 23
21538: PUSH
21539: LD_INT 24
21541: PUSH
21542: LD_INT 25
21544: PUSH
21545: LD_INT 26
21547: PUSH
21548: LD_INT 27
21550: PUSH
21551: LD_INT 28
21553: PUSH
21554: LD_INT 29
21556: PUSH
21557: LD_INT 30
21559: PUSH
21560: LD_INT 31
21562: PUSH
21563: LD_INT 32
21565: PUSH
21566: LD_INT 33
21568: PUSH
21569: LD_INT 34
21571: PUSH
21572: LD_INT 36
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 101
21614: PUSH
21615: LD_INT 102
21617: PUSH
21618: LD_INT 103
21620: PUSH
21621: LD_INT 104
21623: PUSH
21624: LD_INT 105
21626: PUSH
21627: LD_INT 106
21629: PUSH
21630: LD_INT 107
21632: PUSH
21633: LD_INT 108
21635: PUSH
21636: LD_INT 109
21638: PUSH
21639: LD_INT 110
21641: PUSH
21642: LD_INT 111
21644: PUSH
21645: LD_INT 112
21647: PUSH
21648: LD_INT 113
21650: PUSH
21651: LD_INT 114
21653: PUSH
21654: LD_INT 116
21656: PUSH
21657: LD_INT 117
21659: PUSH
21660: LD_INT 118
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: ST_TO_ADDR
21686: GO 22693
21688: LD_INT 15
21690: DOUBLE
21691: EQUAL
21692: IFTRUE 21696
21694: GO 21920
21696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: LD_INT 2
21707: PUSH
21708: LD_INT 3
21710: PUSH
21711: LD_INT 4
21713: PUSH
21714: LD_INT 5
21716: PUSH
21717: LD_INT 6
21719: PUSH
21720: LD_INT 7
21722: PUSH
21723: LD_INT 8
21725: PUSH
21726: LD_INT 9
21728: PUSH
21729: LD_INT 10
21731: PUSH
21732: LD_INT 11
21734: PUSH
21735: LD_INT 12
21737: PUSH
21738: LD_INT 13
21740: PUSH
21741: LD_INT 14
21743: PUSH
21744: LD_INT 15
21746: PUSH
21747: LD_INT 16
21749: PUSH
21750: LD_INT 17
21752: PUSH
21753: LD_INT 18
21755: PUSH
21756: LD_INT 19
21758: PUSH
21759: LD_INT 20
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_INT 23
21770: PUSH
21771: LD_INT 24
21773: PUSH
21774: LD_INT 25
21776: PUSH
21777: LD_INT 26
21779: PUSH
21780: LD_INT 27
21782: PUSH
21783: LD_INT 28
21785: PUSH
21786: LD_INT 29
21788: PUSH
21789: LD_INT 30
21791: PUSH
21792: LD_INT 31
21794: PUSH
21795: LD_INT 32
21797: PUSH
21798: LD_INT 33
21800: PUSH
21801: LD_INT 34
21803: PUSH
21804: LD_INT 36
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 101
21846: PUSH
21847: LD_INT 102
21849: PUSH
21850: LD_INT 103
21852: PUSH
21853: LD_INT 104
21855: PUSH
21856: LD_INT 105
21858: PUSH
21859: LD_INT 106
21861: PUSH
21862: LD_INT 107
21864: PUSH
21865: LD_INT 108
21867: PUSH
21868: LD_INT 109
21870: PUSH
21871: LD_INT 110
21873: PUSH
21874: LD_INT 111
21876: PUSH
21877: LD_INT 112
21879: PUSH
21880: LD_INT 113
21882: PUSH
21883: LD_INT 114
21885: PUSH
21886: LD_INT 116
21888: PUSH
21889: LD_INT 117
21891: PUSH
21892: LD_INT 118
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: ST_TO_ADDR
21918: GO 22693
21920: LD_INT 16
21922: DOUBLE
21923: EQUAL
21924: IFTRUE 21928
21926: GO 22064
21928: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21929: LD_ADDR_VAR 0 2
21933: PUSH
21934: LD_INT 2
21936: PUSH
21937: LD_INT 4
21939: PUSH
21940: LD_INT 5
21942: PUSH
21943: LD_INT 7
21945: PUSH
21946: LD_INT 11
21948: PUSH
21949: LD_INT 12
21951: PUSH
21952: LD_INT 15
21954: PUSH
21955: LD_INT 16
21957: PUSH
21958: LD_INT 20
21960: PUSH
21961: LD_INT 21
21963: PUSH
21964: LD_INT 22
21966: PUSH
21967: LD_INT 23
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 26
21975: PUSH
21976: LD_INT 30
21978: PUSH
21979: LD_INT 31
21981: PUSH
21982: LD_INT 32
21984: PUSH
21985: LD_INT 33
21987: PUSH
21988: LD_INT 34
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 101
22014: PUSH
22015: LD_INT 102
22017: PUSH
22018: LD_INT 103
22020: PUSH
22021: LD_INT 106
22023: PUSH
22024: LD_INT 108
22026: PUSH
22027: LD_INT 112
22029: PUSH
22030: LD_INT 113
22032: PUSH
22033: LD_INT 114
22035: PUSH
22036: LD_INT 116
22038: PUSH
22039: LD_INT 117
22041: PUSH
22042: LD_INT 118
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: ST_TO_ADDR
22062: GO 22693
22064: LD_INT 17
22066: DOUBLE
22067: EQUAL
22068: IFTRUE 22072
22070: GO 22296
22072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22073: LD_ADDR_VAR 0 2
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 3
22086: PUSH
22087: LD_INT 4
22089: PUSH
22090: LD_INT 5
22092: PUSH
22093: LD_INT 6
22095: PUSH
22096: LD_INT 7
22098: PUSH
22099: LD_INT 8
22101: PUSH
22102: LD_INT 9
22104: PUSH
22105: LD_INT 10
22107: PUSH
22108: LD_INT 11
22110: PUSH
22111: LD_INT 12
22113: PUSH
22114: LD_INT 13
22116: PUSH
22117: LD_INT 14
22119: PUSH
22120: LD_INT 15
22122: PUSH
22123: LD_INT 16
22125: PUSH
22126: LD_INT 17
22128: PUSH
22129: LD_INT 18
22131: PUSH
22132: LD_INT 19
22134: PUSH
22135: LD_INT 20
22137: PUSH
22138: LD_INT 21
22140: PUSH
22141: LD_INT 22
22143: PUSH
22144: LD_INT 23
22146: PUSH
22147: LD_INT 24
22149: PUSH
22150: LD_INT 25
22152: PUSH
22153: LD_INT 26
22155: PUSH
22156: LD_INT 27
22158: PUSH
22159: LD_INT 28
22161: PUSH
22162: LD_INT 29
22164: PUSH
22165: LD_INT 30
22167: PUSH
22168: LD_INT 31
22170: PUSH
22171: LD_INT 32
22173: PUSH
22174: LD_INT 33
22176: PUSH
22177: LD_INT 34
22179: PUSH
22180: LD_INT 36
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 101
22222: PUSH
22223: LD_INT 102
22225: PUSH
22226: LD_INT 103
22228: PUSH
22229: LD_INT 104
22231: PUSH
22232: LD_INT 105
22234: PUSH
22235: LD_INT 106
22237: PUSH
22238: LD_INT 107
22240: PUSH
22241: LD_INT 108
22243: PUSH
22244: LD_INT 109
22246: PUSH
22247: LD_INT 110
22249: PUSH
22250: LD_INT 111
22252: PUSH
22253: LD_INT 112
22255: PUSH
22256: LD_INT 113
22258: PUSH
22259: LD_INT 114
22261: PUSH
22262: LD_INT 116
22264: PUSH
22265: LD_INT 117
22267: PUSH
22268: LD_INT 118
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: ST_TO_ADDR
22294: GO 22693
22296: LD_INT 18
22298: DOUBLE
22299: EQUAL
22300: IFTRUE 22304
22302: GO 22452
22304: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22305: LD_ADDR_VAR 0 2
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: LD_INT 4
22315: PUSH
22316: LD_INT 5
22318: PUSH
22319: LD_INT 7
22321: PUSH
22322: LD_INT 11
22324: PUSH
22325: LD_INT 12
22327: PUSH
22328: LD_INT 15
22330: PUSH
22331: LD_INT 16
22333: PUSH
22334: LD_INT 20
22336: PUSH
22337: LD_INT 21
22339: PUSH
22340: LD_INT 22
22342: PUSH
22343: LD_INT 23
22345: PUSH
22346: LD_INT 25
22348: PUSH
22349: LD_INT 26
22351: PUSH
22352: LD_INT 30
22354: PUSH
22355: LD_INT 31
22357: PUSH
22358: LD_INT 32
22360: PUSH
22361: LD_INT 33
22363: PUSH
22364: LD_INT 34
22366: PUSH
22367: LD_INT 35
22369: PUSH
22370: LD_INT 36
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 101
22398: PUSH
22399: LD_INT 102
22401: PUSH
22402: LD_INT 103
22404: PUSH
22405: LD_INT 106
22407: PUSH
22408: LD_INT 108
22410: PUSH
22411: LD_INT 112
22413: PUSH
22414: LD_INT 113
22416: PUSH
22417: LD_INT 114
22419: PUSH
22420: LD_INT 115
22422: PUSH
22423: LD_INT 116
22425: PUSH
22426: LD_INT 117
22428: PUSH
22429: LD_INT 118
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: ST_TO_ADDR
22450: GO 22693
22452: LD_INT 19
22454: DOUBLE
22455: EQUAL
22456: IFTRUE 22460
22458: GO 22692
22460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22461: LD_ADDR_VAR 0 2
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 3
22474: PUSH
22475: LD_INT 4
22477: PUSH
22478: LD_INT 5
22480: PUSH
22481: LD_INT 6
22483: PUSH
22484: LD_INT 7
22486: PUSH
22487: LD_INT 8
22489: PUSH
22490: LD_INT 9
22492: PUSH
22493: LD_INT 10
22495: PUSH
22496: LD_INT 11
22498: PUSH
22499: LD_INT 12
22501: PUSH
22502: LD_INT 13
22504: PUSH
22505: LD_INT 14
22507: PUSH
22508: LD_INT 15
22510: PUSH
22511: LD_INT 16
22513: PUSH
22514: LD_INT 17
22516: PUSH
22517: LD_INT 18
22519: PUSH
22520: LD_INT 19
22522: PUSH
22523: LD_INT 20
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 23
22534: PUSH
22535: LD_INT 24
22537: PUSH
22538: LD_INT 25
22540: PUSH
22541: LD_INT 26
22543: PUSH
22544: LD_INT 27
22546: PUSH
22547: LD_INT 28
22549: PUSH
22550: LD_INT 29
22552: PUSH
22553: LD_INT 30
22555: PUSH
22556: LD_INT 31
22558: PUSH
22559: LD_INT 32
22561: PUSH
22562: LD_INT 33
22564: PUSH
22565: LD_INT 34
22567: PUSH
22568: LD_INT 35
22570: PUSH
22571: LD_INT 36
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 101
22614: PUSH
22615: LD_INT 102
22617: PUSH
22618: LD_INT 103
22620: PUSH
22621: LD_INT 104
22623: PUSH
22624: LD_INT 105
22626: PUSH
22627: LD_INT 106
22629: PUSH
22630: LD_INT 107
22632: PUSH
22633: LD_INT 108
22635: PUSH
22636: LD_INT 109
22638: PUSH
22639: LD_INT 110
22641: PUSH
22642: LD_INT 111
22644: PUSH
22645: LD_INT 112
22647: PUSH
22648: LD_INT 113
22650: PUSH
22651: LD_INT 114
22653: PUSH
22654: LD_INT 115
22656: PUSH
22657: LD_INT 116
22659: PUSH
22660: LD_INT 117
22662: PUSH
22663: LD_INT 118
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: ST_TO_ADDR
22690: GO 22693
22692: POP
// end else
22693: GO 22924
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22695: LD_ADDR_VAR 0 2
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: LD_INT 3
22708: PUSH
22709: LD_INT 4
22711: PUSH
22712: LD_INT 5
22714: PUSH
22715: LD_INT 6
22717: PUSH
22718: LD_INT 7
22720: PUSH
22721: LD_INT 8
22723: PUSH
22724: LD_INT 9
22726: PUSH
22727: LD_INT 10
22729: PUSH
22730: LD_INT 11
22732: PUSH
22733: LD_INT 12
22735: PUSH
22736: LD_INT 13
22738: PUSH
22739: LD_INT 14
22741: PUSH
22742: LD_INT 15
22744: PUSH
22745: LD_INT 16
22747: PUSH
22748: LD_INT 17
22750: PUSH
22751: LD_INT 18
22753: PUSH
22754: LD_INT 19
22756: PUSH
22757: LD_INT 20
22759: PUSH
22760: LD_INT 21
22762: PUSH
22763: LD_INT 22
22765: PUSH
22766: LD_INT 23
22768: PUSH
22769: LD_INT 24
22771: PUSH
22772: LD_INT 25
22774: PUSH
22775: LD_INT 26
22777: PUSH
22778: LD_INT 27
22780: PUSH
22781: LD_INT 28
22783: PUSH
22784: LD_INT 29
22786: PUSH
22787: LD_INT 30
22789: PUSH
22790: LD_INT 31
22792: PUSH
22793: LD_INT 32
22795: PUSH
22796: LD_INT 33
22798: PUSH
22799: LD_INT 34
22801: PUSH
22802: LD_INT 35
22804: PUSH
22805: LD_INT 36
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 101
22848: PUSH
22849: LD_INT 102
22851: PUSH
22852: LD_INT 103
22854: PUSH
22855: LD_INT 104
22857: PUSH
22858: LD_INT 105
22860: PUSH
22861: LD_INT 106
22863: PUSH
22864: LD_INT 107
22866: PUSH
22867: LD_INT 108
22869: PUSH
22870: LD_INT 109
22872: PUSH
22873: LD_INT 110
22875: PUSH
22876: LD_INT 111
22878: PUSH
22879: LD_INT 112
22881: PUSH
22882: LD_INT 113
22884: PUSH
22885: LD_INT 114
22887: PUSH
22888: LD_INT 115
22890: PUSH
22891: LD_INT 116
22893: PUSH
22894: LD_INT 117
22896: PUSH
22897: LD_INT 118
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: ST_TO_ADDR
// if result then
22924: LD_VAR 0 2
22928: IFFALSE 23714
// begin normal :=  ;
22930: LD_ADDR_VAR 0 5
22934: PUSH
22935: LD_STRING 
22937: ST_TO_ADDR
// hardcore :=  ;
22938: LD_ADDR_VAR 0 6
22942: PUSH
22943: LD_STRING 
22945: ST_TO_ADDR
// active :=  ;
22946: LD_ADDR_VAR 0 7
22950: PUSH
22951: LD_STRING 
22953: ST_TO_ADDR
// for i = 1 to normalCounter do
22954: LD_ADDR_VAR 0 8
22958: PUSH
22959: DOUBLE
22960: LD_INT 1
22962: DEC
22963: ST_TO_ADDR
22964: LD_EXP 54
22968: PUSH
22969: FOR_TO
22970: IFFALSE 23071
// begin tmp := 0 ;
22972: LD_ADDR_VAR 0 3
22976: PUSH
22977: LD_STRING 0
22979: ST_TO_ADDR
// if result [ 1 ] then
22980: LD_VAR 0 2
22984: PUSH
22985: LD_INT 1
22987: ARRAY
22988: IFFALSE 23053
// if result [ 1 ] [ 1 ] = i then
22990: LD_VAR 0 2
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: PUSH
22999: LD_INT 1
23001: ARRAY
23002: PUSH
23003: LD_VAR 0 8
23007: EQUAL
23008: IFFALSE 23053
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23010: LD_ADDR_VAR 0 2
23014: PUSH
23015: LD_VAR 0 2
23019: PPUSH
23020: LD_INT 1
23022: PPUSH
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 1
23030: ARRAY
23031: PPUSH
23032: LD_INT 1
23034: PPUSH
23035: CALL_OW 3
23039: PPUSH
23040: CALL_OW 1
23044: ST_TO_ADDR
// tmp := 1 ;
23045: LD_ADDR_VAR 0 3
23049: PUSH
23050: LD_STRING 1
23052: ST_TO_ADDR
// end ; normal := normal & tmp ;
23053: LD_ADDR_VAR 0 5
23057: PUSH
23058: LD_VAR 0 5
23062: PUSH
23063: LD_VAR 0 3
23067: STR
23068: ST_TO_ADDR
// end ;
23069: GO 22969
23071: POP
23072: POP
// for i = 1 to hardcoreCounter do
23073: LD_ADDR_VAR 0 8
23077: PUSH
23078: DOUBLE
23079: LD_INT 1
23081: DEC
23082: ST_TO_ADDR
23083: LD_EXP 55
23087: PUSH
23088: FOR_TO
23089: IFFALSE 23194
// begin tmp := 0 ;
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: LD_STRING 0
23098: ST_TO_ADDR
// if result [ 2 ] then
23099: LD_VAR 0 2
23103: PUSH
23104: LD_INT 2
23106: ARRAY
23107: IFFALSE 23176
// if result [ 2 ] [ 1 ] = 100 + i then
23109: LD_VAR 0 2
23113: PUSH
23114: LD_INT 2
23116: ARRAY
23117: PUSH
23118: LD_INT 1
23120: ARRAY
23121: PUSH
23122: LD_INT 100
23124: PUSH
23125: LD_VAR 0 8
23129: PLUS
23130: EQUAL
23131: IFFALSE 23176
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23133: LD_ADDR_VAR 0 2
23137: PUSH
23138: LD_VAR 0 2
23142: PPUSH
23143: LD_INT 2
23145: PPUSH
23146: LD_VAR 0 2
23150: PUSH
23151: LD_INT 2
23153: ARRAY
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: CALL_OW 3
23162: PPUSH
23163: CALL_OW 1
23167: ST_TO_ADDR
// tmp := 1 ;
23168: LD_ADDR_VAR 0 3
23172: PUSH
23173: LD_STRING 1
23175: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23176: LD_ADDR_VAR 0 6
23180: PUSH
23181: LD_VAR 0 6
23185: PUSH
23186: LD_VAR 0 3
23190: STR
23191: ST_TO_ADDR
// end ;
23192: GO 23088
23194: POP
23195: POP
// if isGameLoad then
23196: LD_VAR 0 1
23200: IFFALSE 23675
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23202: LD_ADDR_VAR 0 4
23206: PUSH
23207: LD_EXP 58
23211: PUSH
23212: LD_EXP 57
23216: PUSH
23217: LD_EXP 59
23221: PUSH
23222: LD_EXP 56
23226: PUSH
23227: LD_EXP 60
23231: PUSH
23232: LD_EXP 61
23236: PUSH
23237: LD_EXP 62
23241: PUSH
23242: LD_EXP 63
23246: PUSH
23247: LD_EXP 64
23251: PUSH
23252: LD_EXP 65
23256: PUSH
23257: LD_EXP 66
23261: PUSH
23262: LD_EXP 67
23266: PUSH
23267: LD_EXP 68
23271: PUSH
23272: LD_EXP 69
23276: PUSH
23277: LD_EXP 77
23281: PUSH
23282: LD_EXP 78
23286: PUSH
23287: LD_EXP 79
23291: PUSH
23292: LD_EXP 80
23296: PUSH
23297: LD_EXP 82
23301: PUSH
23302: LD_EXP 83
23306: PUSH
23307: LD_EXP 84
23311: PUSH
23312: LD_EXP 87
23316: PUSH
23317: LD_EXP 89
23321: PUSH
23322: LD_EXP 90
23326: PUSH
23327: LD_EXP 91
23331: PUSH
23332: LD_EXP 93
23336: PUSH
23337: LD_EXP 94
23341: PUSH
23342: LD_EXP 97
23346: PUSH
23347: LD_EXP 98
23351: PUSH
23352: LD_EXP 99
23356: PUSH
23357: LD_EXP 100
23361: PUSH
23362: LD_EXP 101
23366: PUSH
23367: LD_EXP 102
23371: PUSH
23372: LD_EXP 103
23376: PUSH
23377: LD_EXP 104
23381: PUSH
23382: LD_EXP 105
23386: PUSH
23387: LD_EXP 70
23391: PUSH
23392: LD_EXP 71
23396: PUSH
23397: LD_EXP 74
23401: PUSH
23402: LD_EXP 75
23406: PUSH
23407: LD_EXP 76
23411: PUSH
23412: LD_EXP 72
23416: PUSH
23417: LD_EXP 73
23421: PUSH
23422: LD_EXP 81
23426: PUSH
23427: LD_EXP 85
23431: PUSH
23432: LD_EXP 86
23436: PUSH
23437: LD_EXP 88
23441: PUSH
23442: LD_EXP 92
23446: PUSH
23447: LD_EXP 95
23451: PUSH
23452: LD_EXP 96
23456: PUSH
23457: LD_EXP 106
23461: PUSH
23462: LD_EXP 107
23466: PUSH
23467: LD_EXP 108
23471: PUSH
23472: LD_EXP 109
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: ST_TO_ADDR
// tmp :=  ;
23533: LD_ADDR_VAR 0 3
23537: PUSH
23538: LD_STRING 
23540: ST_TO_ADDR
// for i = 1 to normalCounter do
23541: LD_ADDR_VAR 0 8
23545: PUSH
23546: DOUBLE
23547: LD_INT 1
23549: DEC
23550: ST_TO_ADDR
23551: LD_EXP 54
23555: PUSH
23556: FOR_TO
23557: IFFALSE 23593
// begin if flags [ i ] then
23559: LD_VAR 0 4
23563: PUSH
23564: LD_VAR 0 8
23568: ARRAY
23569: IFFALSE 23591
// tmp := tmp & i & ; ;
23571: LD_ADDR_VAR 0 3
23575: PUSH
23576: LD_VAR 0 3
23580: PUSH
23581: LD_VAR 0 8
23585: STR
23586: PUSH
23587: LD_STRING ;
23589: STR
23590: ST_TO_ADDR
// end ;
23591: GO 23556
23593: POP
23594: POP
// for i = 1 to hardcoreCounter do
23595: LD_ADDR_VAR 0 8
23599: PUSH
23600: DOUBLE
23601: LD_INT 1
23603: DEC
23604: ST_TO_ADDR
23605: LD_EXP 55
23609: PUSH
23610: FOR_TO
23611: IFFALSE 23657
// begin if flags [ normalCounter + i ] then
23613: LD_VAR 0 4
23617: PUSH
23618: LD_EXP 54
23622: PUSH
23623: LD_VAR 0 8
23627: PLUS
23628: ARRAY
23629: IFFALSE 23655
// tmp := tmp & ( 100 + i ) & ; ;
23631: LD_ADDR_VAR 0 3
23635: PUSH
23636: LD_VAR 0 3
23640: PUSH
23641: LD_INT 100
23643: PUSH
23644: LD_VAR 0 8
23648: PLUS
23649: STR
23650: PUSH
23651: LD_STRING ;
23653: STR
23654: ST_TO_ADDR
// end ;
23655: GO 23610
23657: POP
23658: POP
// if tmp then
23659: LD_VAR 0 3
23663: IFFALSE 23675
// active := tmp ;
23665: LD_ADDR_VAR 0 7
23669: PUSH
23670: LD_VAR 0 3
23674: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23675: LD_STRING getStreamItemsFromMission("
23677: PUSH
23678: LD_VAR 0 5
23682: STR
23683: PUSH
23684: LD_STRING ","
23686: STR
23687: PUSH
23688: LD_VAR 0 6
23692: STR
23693: PUSH
23694: LD_STRING ","
23696: STR
23697: PUSH
23698: LD_VAR 0 7
23702: STR
23703: PUSH
23704: LD_STRING ")
23706: STR
23707: PPUSH
23708: CALL_OW 559
// end else
23712: GO 23721
// ToLua ( getStreamItemsFromMission("","","") ) ;
23714: LD_STRING getStreamItemsFromMission("","","")
23716: PPUSH
23717: CALL_OW 559
// end ;
23721: LD_VAR 0 2
23725: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23726: LD_EXP 53
23730: PUSH
23731: LD_EXP 58
23735: AND
23736: IFFALSE 23860
23738: GO 23740
23740: DISABLE
23741: LD_INT 0
23743: PPUSH
23744: PPUSH
// begin enable ;
23745: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23746: LD_ADDR_VAR 0 2
23750: PUSH
23751: LD_INT 22
23753: PUSH
23754: LD_OWVAR 2
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: LD_INT 34
23768: PUSH
23769: LD_INT 7
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 34
23778: PUSH
23779: LD_INT 45
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 34
23788: PUSH
23789: LD_INT 28
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 34
23798: PUSH
23799: LD_INT 47
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PPUSH
23817: CALL_OW 69
23821: ST_TO_ADDR
// if not tmp then
23822: LD_VAR 0 2
23826: NOT
23827: IFFALSE 23831
// exit ;
23829: GO 23860
// for i in tmp do
23831: LD_ADDR_VAR 0 1
23835: PUSH
23836: LD_VAR 0 2
23840: PUSH
23841: FOR_IN
23842: IFFALSE 23858
// begin SetLives ( i , 0 ) ;
23844: LD_VAR 0 1
23848: PPUSH
23849: LD_INT 0
23851: PPUSH
23852: CALL_OW 234
// end ;
23856: GO 23841
23858: POP
23859: POP
// end ;
23860: PPOPN 2
23862: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23863: LD_EXP 53
23867: PUSH
23868: LD_EXP 59
23872: AND
23873: IFFALSE 23957
23875: GO 23877
23877: DISABLE
23878: LD_INT 0
23880: PPUSH
23881: PPUSH
// begin enable ;
23882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23883: LD_ADDR_VAR 0 2
23887: PUSH
23888: LD_INT 22
23890: PUSH
23891: LD_OWVAR 2
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 32
23902: PUSH
23903: LD_INT 3
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PPUSH
23914: CALL_OW 69
23918: ST_TO_ADDR
// if not tmp then
23919: LD_VAR 0 2
23923: NOT
23924: IFFALSE 23928
// exit ;
23926: GO 23957
// for i in tmp do
23928: LD_ADDR_VAR 0 1
23932: PUSH
23933: LD_VAR 0 2
23937: PUSH
23938: FOR_IN
23939: IFFALSE 23955
// begin SetLives ( i , 0 ) ;
23941: LD_VAR 0 1
23945: PPUSH
23946: LD_INT 0
23948: PPUSH
23949: CALL_OW 234
// end ;
23953: GO 23938
23955: POP
23956: POP
// end ;
23957: PPOPN 2
23959: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23960: LD_EXP 53
23964: PUSH
23965: LD_EXP 56
23969: AND
23970: IFFALSE 24063
23972: GO 23974
23974: DISABLE
23975: LD_INT 0
23977: PPUSH
// begin enable ;
23978: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23979: LD_ADDR_VAR 0 1
23983: PUSH
23984: LD_INT 22
23986: PUSH
23987: LD_OWVAR 2
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: PUSH
23999: LD_INT 25
24001: PUSH
24002: LD_INT 5
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 25
24011: PUSH
24012: LD_INT 9
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 25
24021: PUSH
24022: LD_INT 8
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PPUSH
24039: CALL_OW 69
24043: PUSH
24044: FOR_IN
24045: IFFALSE 24061
// begin SetClass ( i , 1 ) ;
24047: LD_VAR 0 1
24051: PPUSH
24052: LD_INT 1
24054: PPUSH
24055: CALL_OW 336
// end ;
24059: GO 24044
24061: POP
24062: POP
// end ;
24063: PPOPN 1
24065: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24066: LD_EXP 53
24070: PUSH
24071: LD_EXP 57
24075: AND
24076: PUSH
24077: LD_OWVAR 65
24081: PUSH
24082: LD_INT 7
24084: LESS
24085: AND
24086: IFFALSE 24100
24088: GO 24090
24090: DISABLE
// begin enable ;
24091: ENABLE
// game_speed := 7 ;
24092: LD_ADDR_OWVAR 65
24096: PUSH
24097: LD_INT 7
24099: ST_TO_ADDR
// end ;
24100: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24101: LD_EXP 53
24105: PUSH
24106: LD_EXP 60
24110: AND
24111: IFFALSE 24313
24113: GO 24115
24115: DISABLE
24116: LD_INT 0
24118: PPUSH
24119: PPUSH
24120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: LD_INT 81
24128: PUSH
24129: LD_OWVAR 2
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 21
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PPUSH
24152: CALL_OW 69
24156: ST_TO_ADDR
// if not tmp then
24157: LD_VAR 0 3
24161: NOT
24162: IFFALSE 24166
// exit ;
24164: GO 24313
// if tmp > 5 then
24166: LD_VAR 0 3
24170: PUSH
24171: LD_INT 5
24173: GREATER
24174: IFFALSE 24186
// k := 5 else
24176: LD_ADDR_VAR 0 2
24180: PUSH
24181: LD_INT 5
24183: ST_TO_ADDR
24184: GO 24196
// k := tmp ;
24186: LD_ADDR_VAR 0 2
24190: PUSH
24191: LD_VAR 0 3
24195: ST_TO_ADDR
// for i := 1 to k do
24196: LD_ADDR_VAR 0 1
24200: PUSH
24201: DOUBLE
24202: LD_INT 1
24204: DEC
24205: ST_TO_ADDR
24206: LD_VAR 0 2
24210: PUSH
24211: FOR_TO
24212: IFFALSE 24311
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24214: LD_VAR 0 3
24218: PUSH
24219: LD_VAR 0 1
24223: ARRAY
24224: PPUSH
24225: LD_VAR 0 1
24229: PUSH
24230: LD_INT 4
24232: MOD
24233: PUSH
24234: LD_INT 1
24236: PLUS
24237: PPUSH
24238: CALL_OW 259
24242: PUSH
24243: LD_INT 10
24245: LESS
24246: IFFALSE 24309
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24248: LD_VAR 0 3
24252: PUSH
24253: LD_VAR 0 1
24257: ARRAY
24258: PPUSH
24259: LD_VAR 0 1
24263: PUSH
24264: LD_INT 4
24266: MOD
24267: PUSH
24268: LD_INT 1
24270: PLUS
24271: PPUSH
24272: LD_VAR 0 3
24276: PUSH
24277: LD_VAR 0 1
24281: ARRAY
24282: PPUSH
24283: LD_VAR 0 1
24287: PUSH
24288: LD_INT 4
24290: MOD
24291: PUSH
24292: LD_INT 1
24294: PLUS
24295: PPUSH
24296: CALL_OW 259
24300: PUSH
24301: LD_INT 1
24303: PLUS
24304: PPUSH
24305: CALL_OW 237
24309: GO 24211
24311: POP
24312: POP
// end ;
24313: PPOPN 3
24315: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24316: LD_EXP 53
24320: PUSH
24321: LD_EXP 61
24325: AND
24326: IFFALSE 24346
24328: GO 24330
24330: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24331: LD_INT 4
24333: PPUSH
24334: LD_OWVAR 2
24338: PPUSH
24339: LD_INT 0
24341: PPUSH
24342: CALL_OW 324
24346: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24347: LD_EXP 53
24351: PUSH
24352: LD_EXP 90
24356: AND
24357: IFFALSE 24377
24359: GO 24361
24361: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24362: LD_INT 19
24364: PPUSH
24365: LD_OWVAR 2
24369: PPUSH
24370: LD_INT 0
24372: PPUSH
24373: CALL_OW 324
24377: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24378: LD_EXP 53
24382: PUSH
24383: LD_EXP 62
24387: AND
24388: IFFALSE 24490
24390: GO 24392
24392: DISABLE
24393: LD_INT 0
24395: PPUSH
24396: PPUSH
// begin enable ;
24397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24398: LD_ADDR_VAR 0 2
24402: PUSH
24403: LD_INT 22
24405: PUSH
24406: LD_OWVAR 2
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 34
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 34
24430: PUSH
24431: LD_INT 30
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PPUSH
24447: CALL_OW 69
24451: ST_TO_ADDR
// if not tmp then
24452: LD_VAR 0 2
24456: NOT
24457: IFFALSE 24461
// exit ;
24459: GO 24490
// for i in tmp do
24461: LD_ADDR_VAR 0 1
24465: PUSH
24466: LD_VAR 0 2
24470: PUSH
24471: FOR_IN
24472: IFFALSE 24488
// begin SetLives ( i , 0 ) ;
24474: LD_VAR 0 1
24478: PPUSH
24479: LD_INT 0
24481: PPUSH
24482: CALL_OW 234
// end ;
24486: GO 24471
24488: POP
24489: POP
// end ;
24490: PPOPN 2
24492: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24493: LD_EXP 53
24497: PUSH
24498: LD_EXP 63
24502: AND
24503: IFFALSE 24523
24505: GO 24507
24507: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24508: LD_INT 32
24510: PPUSH
24511: LD_OWVAR 2
24515: PPUSH
24516: LD_INT 0
24518: PPUSH
24519: CALL_OW 324
24523: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24524: LD_EXP 53
24528: PUSH
24529: LD_EXP 64
24533: AND
24534: IFFALSE 24715
24536: GO 24538
24538: DISABLE
24539: LD_INT 0
24541: PPUSH
24542: PPUSH
24543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24544: LD_ADDR_VAR 0 2
24548: PUSH
24549: LD_INT 22
24551: PUSH
24552: LD_OWVAR 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 33
24563: PUSH
24564: LD_INT 3
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PPUSH
24575: CALL_OW 69
24579: ST_TO_ADDR
// if not tmp then
24580: LD_VAR 0 2
24584: NOT
24585: IFFALSE 24589
// exit ;
24587: GO 24715
// side := 0 ;
24589: LD_ADDR_VAR 0 3
24593: PUSH
24594: LD_INT 0
24596: ST_TO_ADDR
// for i := 1 to 8 do
24597: LD_ADDR_VAR 0 1
24601: PUSH
24602: DOUBLE
24603: LD_INT 1
24605: DEC
24606: ST_TO_ADDR
24607: LD_INT 8
24609: PUSH
24610: FOR_TO
24611: IFFALSE 24659
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24613: LD_OWVAR 2
24617: PUSH
24618: LD_VAR 0 1
24622: NONEQUAL
24623: PUSH
24624: LD_OWVAR 2
24628: PPUSH
24629: LD_VAR 0 1
24633: PPUSH
24634: CALL_OW 81
24638: PUSH
24639: LD_INT 2
24641: EQUAL
24642: AND
24643: IFFALSE 24657
// begin side := i ;
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_VAR 0 1
24654: ST_TO_ADDR
// break ;
24655: GO 24659
// end ;
24657: GO 24610
24659: POP
24660: POP
// if not side then
24661: LD_VAR 0 3
24665: NOT
24666: IFFALSE 24670
// exit ;
24668: GO 24715
// for i := 1 to tmp do
24670: LD_ADDR_VAR 0 1
24674: PUSH
24675: DOUBLE
24676: LD_INT 1
24678: DEC
24679: ST_TO_ADDR
24680: LD_VAR 0 2
24684: PUSH
24685: FOR_TO
24686: IFFALSE 24713
// if Prob ( 60 ) then
24688: LD_INT 60
24690: PPUSH
24691: CALL_OW 13
24695: IFFALSE 24711
// SetSide ( i , side ) ;
24697: LD_VAR 0 1
24701: PPUSH
24702: LD_VAR 0 3
24706: PPUSH
24707: CALL_OW 235
24711: GO 24685
24713: POP
24714: POP
// end ;
24715: PPOPN 3
24717: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24718: LD_EXP 53
24722: PUSH
24723: LD_EXP 66
24727: AND
24728: IFFALSE 24847
24730: GO 24732
24732: DISABLE
24733: LD_INT 0
24735: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24736: LD_ADDR_VAR 0 1
24740: PUSH
24741: LD_INT 22
24743: PUSH
24744: LD_OWVAR 2
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 21
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 3
24765: PUSH
24766: LD_INT 23
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: PPUSH
24785: CALL_OW 69
24789: PUSH
24790: FOR_IN
24791: IFFALSE 24845
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24793: LD_VAR 0 1
24797: PPUSH
24798: CALL_OW 257
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: LD_INT 2
24808: PUSH
24809: LD_INT 3
24811: PUSH
24812: LD_INT 4
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: IN
24821: IFFALSE 24843
// SetClass ( un , rand ( 1 , 4 ) ) ;
24823: LD_VAR 0 1
24827: PPUSH
24828: LD_INT 1
24830: PPUSH
24831: LD_INT 4
24833: PPUSH
24834: CALL_OW 12
24838: PPUSH
24839: CALL_OW 336
24843: GO 24790
24845: POP
24846: POP
// end ;
24847: PPOPN 1
24849: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24850: LD_EXP 53
24854: PUSH
24855: LD_EXP 65
24859: AND
24860: IFFALSE 24939
24862: GO 24864
24864: DISABLE
24865: LD_INT 0
24867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24868: LD_ADDR_VAR 0 1
24872: PUSH
24873: LD_INT 22
24875: PUSH
24876: LD_OWVAR 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 21
24887: PUSH
24888: LD_INT 3
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PPUSH
24899: CALL_OW 69
24903: ST_TO_ADDR
// if not tmp then
24904: LD_VAR 0 1
24908: NOT
24909: IFFALSE 24913
// exit ;
24911: GO 24939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24913: LD_VAR 0 1
24917: PUSH
24918: LD_INT 1
24920: PPUSH
24921: LD_VAR 0 1
24925: PPUSH
24926: CALL_OW 12
24930: ARRAY
24931: PPUSH
24932: LD_INT 100
24934: PPUSH
24935: CALL_OW 234
// end ;
24939: PPOPN 1
24941: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24942: LD_EXP 53
24946: PUSH
24947: LD_EXP 67
24951: AND
24952: IFFALSE 25050
24954: GO 24956
24956: DISABLE
24957: LD_INT 0
24959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24960: LD_ADDR_VAR 0 1
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_OWVAR 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 21
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: ST_TO_ADDR
// if not tmp then
24996: LD_VAR 0 1
25000: NOT
25001: IFFALSE 25005
// exit ;
25003: GO 25050
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25005: LD_VAR 0 1
25009: PUSH
25010: LD_INT 1
25012: PPUSH
25013: LD_VAR 0 1
25017: PPUSH
25018: CALL_OW 12
25022: ARRAY
25023: PPUSH
25024: LD_INT 1
25026: PPUSH
25027: LD_INT 4
25029: PPUSH
25030: CALL_OW 12
25034: PPUSH
25035: LD_INT 3000
25037: PPUSH
25038: LD_INT 9000
25040: PPUSH
25041: CALL_OW 12
25045: PPUSH
25046: CALL_OW 492
// end ;
25050: PPOPN 1
25052: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25053: LD_EXP 53
25057: PUSH
25058: LD_EXP 68
25062: AND
25063: IFFALSE 25083
25065: GO 25067
25067: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25068: LD_INT 1
25070: PPUSH
25071: LD_OWVAR 2
25075: PPUSH
25076: LD_INT 0
25078: PPUSH
25079: CALL_OW 324
25083: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25084: LD_EXP 53
25088: PUSH
25089: LD_EXP 69
25093: AND
25094: IFFALSE 25177
25096: GO 25098
25098: DISABLE
25099: LD_INT 0
25101: PPUSH
25102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25103: LD_ADDR_VAR 0 2
25107: PUSH
25108: LD_INT 22
25110: PUSH
25111: LD_OWVAR 2
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 21
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PPUSH
25134: CALL_OW 69
25138: ST_TO_ADDR
// if not tmp then
25139: LD_VAR 0 2
25143: NOT
25144: IFFALSE 25148
// exit ;
25146: GO 25177
// for i in tmp do
25148: LD_ADDR_VAR 0 1
25152: PUSH
25153: LD_VAR 0 2
25157: PUSH
25158: FOR_IN
25159: IFFALSE 25175
// SetBLevel ( i , 10 ) ;
25161: LD_VAR 0 1
25165: PPUSH
25166: LD_INT 10
25168: PPUSH
25169: CALL_OW 241
25173: GO 25158
25175: POP
25176: POP
// end ;
25177: PPOPN 2
25179: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25180: LD_EXP 53
25184: PUSH
25185: LD_EXP 70
25189: AND
25190: IFFALSE 25301
25192: GO 25194
25194: DISABLE
25195: LD_INT 0
25197: PPUSH
25198: PPUSH
25199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25200: LD_ADDR_VAR 0 3
25204: PUSH
25205: LD_INT 22
25207: PUSH
25208: LD_OWVAR 2
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 25
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: ST_TO_ADDR
// if not tmp then
25236: LD_VAR 0 3
25240: NOT
25241: IFFALSE 25245
// exit ;
25243: GO 25301
// un := tmp [ rand ( 1 , tmp ) ] ;
25245: LD_ADDR_VAR 0 2
25249: PUSH
25250: LD_VAR 0 3
25254: PUSH
25255: LD_INT 1
25257: PPUSH
25258: LD_VAR 0 3
25262: PPUSH
25263: CALL_OW 12
25267: ARRAY
25268: ST_TO_ADDR
// if Crawls ( un ) then
25269: LD_VAR 0 2
25273: PPUSH
25274: CALL_OW 318
25278: IFFALSE 25289
// ComWalk ( un ) ;
25280: LD_VAR 0 2
25284: PPUSH
25285: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25289: LD_VAR 0 2
25293: PPUSH
25294: LD_INT 5
25296: PPUSH
25297: CALL_OW 336
// end ;
25301: PPOPN 3
25303: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25304: LD_EXP 53
25308: PUSH
25309: LD_EXP 71
25313: AND
25314: PUSH
25315: LD_OWVAR 67
25319: PUSH
25320: LD_INT 4
25322: LESS
25323: AND
25324: IFFALSE 25343
25326: GO 25328
25328: DISABLE
// begin Difficulty := Difficulty + 1 ;
25329: LD_ADDR_OWVAR 67
25333: PUSH
25334: LD_OWVAR 67
25338: PUSH
25339: LD_INT 1
25341: PLUS
25342: ST_TO_ADDR
// end ;
25343: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25344: LD_EXP 53
25348: PUSH
25349: LD_EXP 72
25353: AND
25354: IFFALSE 25457
25356: GO 25358
25358: DISABLE
25359: LD_INT 0
25361: PPUSH
// begin for i := 1 to 5 do
25362: LD_ADDR_VAR 0 1
25366: PUSH
25367: DOUBLE
25368: LD_INT 1
25370: DEC
25371: ST_TO_ADDR
25372: LD_INT 5
25374: PUSH
25375: FOR_TO
25376: IFFALSE 25455
// begin uc_nation := nation_nature ;
25378: LD_ADDR_OWVAR 21
25382: PUSH
25383: LD_INT 0
25385: ST_TO_ADDR
// uc_side := 0 ;
25386: LD_ADDR_OWVAR 20
25390: PUSH
25391: LD_INT 0
25393: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25394: LD_ADDR_OWVAR 29
25398: PUSH
25399: LD_INT 12
25401: PUSH
25402: LD_INT 12
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: ST_TO_ADDR
// hc_agressivity := 20 ;
25409: LD_ADDR_OWVAR 35
25413: PUSH
25414: LD_INT 20
25416: ST_TO_ADDR
// hc_class := class_tiger ;
25417: LD_ADDR_OWVAR 28
25421: PUSH
25422: LD_INT 14
25424: ST_TO_ADDR
// hc_gallery :=  ;
25425: LD_ADDR_OWVAR 33
25429: PUSH
25430: LD_STRING 
25432: ST_TO_ADDR
// hc_name :=  ;
25433: LD_ADDR_OWVAR 26
25437: PUSH
25438: LD_STRING 
25440: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25441: CALL_OW 44
25445: PPUSH
25446: LD_INT 0
25448: PPUSH
25449: CALL_OW 51
// end ;
25453: GO 25375
25455: POP
25456: POP
// end ;
25457: PPOPN 1
25459: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25460: LD_EXP 53
25464: PUSH
25465: LD_EXP 73
25469: AND
25470: IFFALSE 25479
25472: GO 25474
25474: DISABLE
// StreamSibBomb ;
25475: CALL 25480 0 0
25479: END
// export function StreamSibBomb ; var i , x , y ; begin
25480: LD_INT 0
25482: PPUSH
25483: PPUSH
25484: PPUSH
25485: PPUSH
// result := false ;
25486: LD_ADDR_VAR 0 1
25490: PUSH
25491: LD_INT 0
25493: ST_TO_ADDR
// for i := 1 to 16 do
25494: LD_ADDR_VAR 0 2
25498: PUSH
25499: DOUBLE
25500: LD_INT 1
25502: DEC
25503: ST_TO_ADDR
25504: LD_INT 16
25506: PUSH
25507: FOR_TO
25508: IFFALSE 25707
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25510: LD_ADDR_VAR 0 3
25514: PUSH
25515: LD_INT 10
25517: PUSH
25518: LD_INT 20
25520: PUSH
25521: LD_INT 30
25523: PUSH
25524: LD_INT 40
25526: PUSH
25527: LD_INT 50
25529: PUSH
25530: LD_INT 60
25532: PUSH
25533: LD_INT 70
25535: PUSH
25536: LD_INT 80
25538: PUSH
25539: LD_INT 90
25541: PUSH
25542: LD_INT 100
25544: PUSH
25545: LD_INT 110
25547: PUSH
25548: LD_INT 120
25550: PUSH
25551: LD_INT 130
25553: PUSH
25554: LD_INT 140
25556: PUSH
25557: LD_INT 150
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: PPUSH
25580: LD_INT 15
25582: PPUSH
25583: CALL_OW 12
25587: ARRAY
25588: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25589: LD_ADDR_VAR 0 4
25593: PUSH
25594: LD_INT 10
25596: PUSH
25597: LD_INT 20
25599: PUSH
25600: LD_INT 30
25602: PUSH
25603: LD_INT 40
25605: PUSH
25606: LD_INT 50
25608: PUSH
25609: LD_INT 60
25611: PUSH
25612: LD_INT 70
25614: PUSH
25615: LD_INT 80
25617: PUSH
25618: LD_INT 90
25620: PUSH
25621: LD_INT 100
25623: PUSH
25624: LD_INT 110
25626: PUSH
25627: LD_INT 120
25629: PUSH
25630: LD_INT 130
25632: PUSH
25633: LD_INT 140
25635: PUSH
25636: LD_INT 150
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: PPUSH
25659: LD_INT 15
25661: PPUSH
25662: CALL_OW 12
25666: ARRAY
25667: ST_TO_ADDR
// if ValidHex ( x , y ) then
25668: LD_VAR 0 3
25672: PPUSH
25673: LD_VAR 0 4
25677: PPUSH
25678: CALL_OW 488
25682: IFFALSE 25705
// begin result := [ x , y ] ;
25684: LD_ADDR_VAR 0 1
25688: PUSH
25689: LD_VAR 0 3
25693: PUSH
25694: LD_VAR 0 4
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: ST_TO_ADDR
// break ;
25703: GO 25707
// end ; end ;
25705: GO 25507
25707: POP
25708: POP
// if result then
25709: LD_VAR 0 1
25713: IFFALSE 25773
// begin ToLua ( playSibBomb() ) ;
25715: LD_STRING playSibBomb()
25717: PPUSH
25718: CALL_OW 559
// wait ( 0 0$14 ) ;
25722: LD_INT 490
25724: PPUSH
25725: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25729: LD_VAR 0 1
25733: PUSH
25734: LD_INT 1
25736: ARRAY
25737: PPUSH
25738: LD_VAR 0 1
25742: PUSH
25743: LD_INT 2
25745: ARRAY
25746: PPUSH
25747: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25751: LD_VAR 0 1
25755: PUSH
25756: LD_INT 1
25758: ARRAY
25759: PPUSH
25760: LD_VAR 0 1
25764: PUSH
25765: LD_INT 2
25767: ARRAY
25768: PPUSH
25769: CALL_OW 429
// end ; end ;
25773: LD_VAR 0 1
25777: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25778: LD_EXP 53
25782: PUSH
25783: LD_EXP 75
25787: AND
25788: IFFALSE 25800
25790: GO 25792
25792: DISABLE
// YouLost (  ) ;
25793: LD_STRING 
25795: PPUSH
25796: CALL_OW 104
25800: END
// every 0 0$1 trigger StreamModeActive and sFog do
25801: LD_EXP 53
25805: PUSH
25806: LD_EXP 74
25810: AND
25811: IFFALSE 25825
25813: GO 25815
25815: DISABLE
// FogOff ( your_side ) ;
25816: LD_OWVAR 2
25820: PPUSH
25821: CALL_OW 344
25825: END
// every 0 0$1 trigger StreamModeActive and sSun do
25826: LD_EXP 53
25830: PUSH
25831: LD_EXP 76
25835: AND
25836: IFFALSE 25864
25838: GO 25840
25840: DISABLE
// begin solar_recharge_percent := 0 ;
25841: LD_ADDR_OWVAR 79
25845: PUSH
25846: LD_INT 0
25848: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25849: LD_INT 10500
25851: PPUSH
25852: CALL_OW 67
// solar_recharge_percent := 100 ;
25856: LD_ADDR_OWVAR 79
25860: PUSH
25861: LD_INT 100
25863: ST_TO_ADDR
// end ;
25864: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25865: LD_EXP 53
25869: PUSH
25870: LD_EXP 77
25874: AND
25875: IFFALSE 26114
25877: GO 25879
25879: DISABLE
25880: LD_INT 0
25882: PPUSH
25883: PPUSH
25884: PPUSH
// begin tmp := [ ] ;
25885: LD_ADDR_VAR 0 3
25889: PUSH
25890: EMPTY
25891: ST_TO_ADDR
// for i := 1 to 6 do
25892: LD_ADDR_VAR 0 1
25896: PUSH
25897: DOUBLE
25898: LD_INT 1
25900: DEC
25901: ST_TO_ADDR
25902: LD_INT 6
25904: PUSH
25905: FOR_TO
25906: IFFALSE 26011
// begin uc_nation := nation_nature ;
25908: LD_ADDR_OWVAR 21
25912: PUSH
25913: LD_INT 0
25915: ST_TO_ADDR
// uc_side := 0 ;
25916: LD_ADDR_OWVAR 20
25920: PUSH
25921: LD_INT 0
25923: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25924: LD_ADDR_OWVAR 29
25928: PUSH
25929: LD_INT 12
25931: PUSH
25932: LD_INT 12
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: ST_TO_ADDR
// hc_agressivity := 20 ;
25939: LD_ADDR_OWVAR 35
25943: PUSH
25944: LD_INT 20
25946: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25947: LD_ADDR_OWVAR 28
25951: PUSH
25952: LD_INT 17
25954: ST_TO_ADDR
// hc_gallery :=  ;
25955: LD_ADDR_OWVAR 33
25959: PUSH
25960: LD_STRING 
25962: ST_TO_ADDR
// hc_name :=  ;
25963: LD_ADDR_OWVAR 26
25967: PUSH
25968: LD_STRING 
25970: ST_TO_ADDR
// un := CreateHuman ;
25971: LD_ADDR_VAR 0 2
25975: PUSH
25976: CALL_OW 44
25980: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25981: LD_VAR 0 2
25985: PPUSH
25986: LD_INT 1
25988: PPUSH
25989: CALL_OW 51
// tmp := tmp ^ un ;
25993: LD_ADDR_VAR 0 3
25997: PUSH
25998: LD_VAR 0 3
26002: PUSH
26003: LD_VAR 0 2
26007: ADD
26008: ST_TO_ADDR
// end ;
26009: GO 25905
26011: POP
26012: POP
// repeat wait ( 0 0$1 ) ;
26013: LD_INT 35
26015: PPUSH
26016: CALL_OW 67
// for un in tmp do
26020: LD_ADDR_VAR 0 2
26024: PUSH
26025: LD_VAR 0 3
26029: PUSH
26030: FOR_IN
26031: IFFALSE 26105
// begin if IsDead ( un ) then
26033: LD_VAR 0 2
26037: PPUSH
26038: CALL_OW 301
26042: IFFALSE 26062
// begin tmp := tmp diff un ;
26044: LD_ADDR_VAR 0 3
26048: PUSH
26049: LD_VAR 0 3
26053: PUSH
26054: LD_VAR 0 2
26058: DIFF
26059: ST_TO_ADDR
// continue ;
26060: GO 26030
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26062: LD_VAR 0 2
26066: PPUSH
26067: LD_INT 3
26069: PUSH
26070: LD_INT 22
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 69
26088: PPUSH
26089: LD_VAR 0 2
26093: PPUSH
26094: CALL_OW 74
26098: PPUSH
26099: CALL_OW 115
// end ;
26103: GO 26030
26105: POP
26106: POP
// until not tmp ;
26107: LD_VAR 0 3
26111: NOT
26112: IFFALSE 26013
// end ;
26114: PPOPN 3
26116: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26117: LD_EXP 53
26121: PUSH
26122: LD_EXP 78
26126: AND
26127: IFFALSE 26181
26129: GO 26131
26131: DISABLE
// begin ToLua ( displayTroll(); ) ;
26132: LD_STRING displayTroll();
26134: PPUSH
26135: CALL_OW 559
// wait ( 3 3$00 ) ;
26139: LD_INT 6300
26141: PPUSH
26142: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26146: LD_STRING hideTroll();
26148: PPUSH
26149: CALL_OW 559
// wait ( 1 1$00 ) ;
26153: LD_INT 2100
26155: PPUSH
26156: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26160: LD_STRING displayTroll();
26162: PPUSH
26163: CALL_OW 559
// wait ( 1 1$00 ) ;
26167: LD_INT 2100
26169: PPUSH
26170: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26174: LD_STRING hideTroll();
26176: PPUSH
26177: CALL_OW 559
// end ;
26181: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26182: LD_EXP 53
26186: PUSH
26187: LD_EXP 79
26191: AND
26192: IFFALSE 26255
26194: GO 26196
26196: DISABLE
26197: LD_INT 0
26199: PPUSH
// begin p := 0 ;
26200: LD_ADDR_VAR 0 1
26204: PUSH
26205: LD_INT 0
26207: ST_TO_ADDR
// repeat game_speed := 1 ;
26208: LD_ADDR_OWVAR 65
26212: PUSH
26213: LD_INT 1
26215: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26216: LD_INT 35
26218: PPUSH
26219: CALL_OW 67
// p := p + 1 ;
26223: LD_ADDR_VAR 0 1
26227: PUSH
26228: LD_VAR 0 1
26232: PUSH
26233: LD_INT 1
26235: PLUS
26236: ST_TO_ADDR
// until p >= 60 ;
26237: LD_VAR 0 1
26241: PUSH
26242: LD_INT 60
26244: GREATEREQUAL
26245: IFFALSE 26208
// game_speed := 4 ;
26247: LD_ADDR_OWVAR 65
26251: PUSH
26252: LD_INT 4
26254: ST_TO_ADDR
// end ;
26255: PPOPN 1
26257: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26258: LD_EXP 53
26262: PUSH
26263: LD_EXP 80
26267: AND
26268: IFFALSE 26414
26270: GO 26272
26272: DISABLE
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26277: LD_ADDR_VAR 0 1
26281: PUSH
26282: LD_INT 22
26284: PUSH
26285: LD_OWVAR 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: PUSH
26297: LD_INT 30
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 30
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PPUSH
26326: CALL_OW 69
26330: ST_TO_ADDR
// if not depot then
26331: LD_VAR 0 1
26335: NOT
26336: IFFALSE 26340
// exit ;
26338: GO 26414
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26340: LD_ADDR_VAR 0 2
26344: PUSH
26345: LD_VAR 0 1
26349: PUSH
26350: LD_INT 1
26352: PPUSH
26353: LD_VAR 0 1
26357: PPUSH
26358: CALL_OW 12
26362: ARRAY
26363: PPUSH
26364: CALL_OW 274
26368: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26369: LD_VAR 0 2
26373: PPUSH
26374: LD_INT 1
26376: PPUSH
26377: LD_INT 0
26379: PPUSH
26380: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26384: LD_VAR 0 2
26388: PPUSH
26389: LD_INT 2
26391: PPUSH
26392: LD_INT 0
26394: PPUSH
26395: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26399: LD_VAR 0 2
26403: PPUSH
26404: LD_INT 3
26406: PPUSH
26407: LD_INT 0
26409: PPUSH
26410: CALL_OW 277
// end ;
26414: PPOPN 2
26416: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26417: LD_EXP 53
26421: PUSH
26422: LD_EXP 81
26426: AND
26427: IFFALSE 26524
26429: GO 26431
26431: DISABLE
26432: LD_INT 0
26434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26435: LD_ADDR_VAR 0 1
26439: PUSH
26440: LD_INT 22
26442: PUSH
26443: LD_OWVAR 2
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 21
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 3
26464: PUSH
26465: LD_INT 23
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: LIST
26483: PPUSH
26484: CALL_OW 69
26488: ST_TO_ADDR
// if not tmp then
26489: LD_VAR 0 1
26493: NOT
26494: IFFALSE 26498
// exit ;
26496: GO 26524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26498: LD_VAR 0 1
26502: PUSH
26503: LD_INT 1
26505: PPUSH
26506: LD_VAR 0 1
26510: PPUSH
26511: CALL_OW 12
26515: ARRAY
26516: PPUSH
26517: LD_INT 200
26519: PPUSH
26520: CALL_OW 234
// end ;
26524: PPOPN 1
26526: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26527: LD_EXP 53
26531: PUSH
26532: LD_EXP 82
26536: AND
26537: IFFALSE 26616
26539: GO 26541
26541: DISABLE
26542: LD_INT 0
26544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26545: LD_ADDR_VAR 0 1
26549: PUSH
26550: LD_INT 22
26552: PUSH
26553: LD_OWVAR 2
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 21
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PPUSH
26576: CALL_OW 69
26580: ST_TO_ADDR
// if not tmp then
26581: LD_VAR 0 1
26585: NOT
26586: IFFALSE 26590
// exit ;
26588: GO 26616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26590: LD_VAR 0 1
26594: PUSH
26595: LD_INT 1
26597: PPUSH
26598: LD_VAR 0 1
26602: PPUSH
26603: CALL_OW 12
26607: ARRAY
26608: PPUSH
26609: LD_INT 60
26611: PPUSH
26612: CALL_OW 234
// end ;
26616: PPOPN 1
26618: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26619: LD_EXP 53
26623: PUSH
26624: LD_EXP 83
26628: AND
26629: IFFALSE 26728
26631: GO 26633
26633: DISABLE
26634: LD_INT 0
26636: PPUSH
26637: PPUSH
// begin enable ;
26638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26639: LD_ADDR_VAR 0 1
26643: PUSH
26644: LD_INT 22
26646: PUSH
26647: LD_OWVAR 2
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 61
26658: PUSH
26659: EMPTY
26660: LIST
26661: PUSH
26662: LD_INT 33
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: LIST
26676: PPUSH
26677: CALL_OW 69
26681: ST_TO_ADDR
// if not tmp then
26682: LD_VAR 0 1
26686: NOT
26687: IFFALSE 26691
// exit ;
26689: GO 26728
// for i in tmp do
26691: LD_ADDR_VAR 0 2
26695: PUSH
26696: LD_VAR 0 1
26700: PUSH
26701: FOR_IN
26702: IFFALSE 26726
// if IsControledBy ( i ) then
26704: LD_VAR 0 2
26708: PPUSH
26709: CALL_OW 312
26713: IFFALSE 26724
// ComUnlink ( i ) ;
26715: LD_VAR 0 2
26719: PPUSH
26720: CALL_OW 136
26724: GO 26701
26726: POP
26727: POP
// end ;
26728: PPOPN 2
26730: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26731: LD_EXP 53
26735: PUSH
26736: LD_EXP 84
26740: AND
26741: IFFALSE 26881
26743: GO 26745
26745: DISABLE
26746: LD_INT 0
26748: PPUSH
26749: PPUSH
// begin ToLua ( displayPowell(); ) ;
26750: LD_STRING displayPowell();
26752: PPUSH
26753: CALL_OW 559
// uc_side := 0 ;
26757: LD_ADDR_OWVAR 20
26761: PUSH
26762: LD_INT 0
26764: ST_TO_ADDR
// uc_nation := 2 ;
26765: LD_ADDR_OWVAR 21
26769: PUSH
26770: LD_INT 2
26772: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26773: LD_ADDR_OWVAR 37
26777: PUSH
26778: LD_INT 14
26780: ST_TO_ADDR
// vc_engine := engine_siberite ;
26781: LD_ADDR_OWVAR 39
26785: PUSH
26786: LD_INT 3
26788: ST_TO_ADDR
// vc_control := control_apeman ;
26789: LD_ADDR_OWVAR 38
26793: PUSH
26794: LD_INT 5
26796: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26797: LD_ADDR_OWVAR 40
26801: PUSH
26802: LD_INT 29
26804: ST_TO_ADDR
// un := CreateVehicle ;
26805: LD_ADDR_VAR 0 2
26809: PUSH
26810: CALL_OW 45
26814: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26815: LD_VAR 0 2
26819: PPUSH
26820: LD_INT 1
26822: PPUSH
26823: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26827: LD_INT 35
26829: PPUSH
26830: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26834: LD_VAR 0 2
26838: PPUSH
26839: LD_INT 22
26841: PUSH
26842: LD_OWVAR 2
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PPUSH
26851: CALL_OW 69
26855: PPUSH
26856: LD_VAR 0 2
26860: PPUSH
26861: CALL_OW 74
26865: PPUSH
26866: CALL_OW 115
// until IsDead ( un ) ;
26870: LD_VAR 0 2
26874: PPUSH
26875: CALL_OW 301
26879: IFFALSE 26827
// end ;
26881: PPOPN 2
26883: END
// every 0 0$1 trigger StreamModeActive and sStu do
26884: LD_EXP 53
26888: PUSH
26889: LD_EXP 92
26893: AND
26894: IFFALSE 26910
26896: GO 26898
26898: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26899: LD_STRING displayStucuk();
26901: PPUSH
26902: CALL_OW 559
// ResetFog ;
26906: CALL_OW 335
// end ;
26910: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26911: LD_EXP 53
26915: PUSH
26916: LD_EXP 85
26920: AND
26921: IFFALSE 27062
26923: GO 26925
26925: DISABLE
26926: LD_INT 0
26928: PPUSH
26929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26930: LD_ADDR_VAR 0 2
26934: PUSH
26935: LD_INT 22
26937: PUSH
26938: LD_OWVAR 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 21
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PPUSH
26961: CALL_OW 69
26965: ST_TO_ADDR
// if not tmp then
26966: LD_VAR 0 2
26970: NOT
26971: IFFALSE 26975
// exit ;
26973: GO 27062
// un := tmp [ rand ( 1 , tmp ) ] ;
26975: LD_ADDR_VAR 0 1
26979: PUSH
26980: LD_VAR 0 2
26984: PUSH
26985: LD_INT 1
26987: PPUSH
26988: LD_VAR 0 2
26992: PPUSH
26993: CALL_OW 12
26997: ARRAY
26998: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26999: LD_VAR 0 1
27003: PPUSH
27004: LD_INT 0
27006: PPUSH
27007: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27011: LD_VAR 0 1
27015: PPUSH
27016: LD_OWVAR 3
27020: PUSH
27021: LD_VAR 0 1
27025: DIFF
27026: PPUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 74
27036: PPUSH
27037: CALL_OW 115
// wait ( 0 0$20 ) ;
27041: LD_INT 700
27043: PPUSH
27044: CALL_OW 67
// SetSide ( un , your_side ) ;
27048: LD_VAR 0 1
27052: PPUSH
27053: LD_OWVAR 2
27057: PPUSH
27058: CALL_OW 235
// end ;
27062: PPOPN 2
27064: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27065: LD_EXP 53
27069: PUSH
27070: LD_EXP 86
27074: AND
27075: IFFALSE 27181
27077: GO 27079
27079: DISABLE
27080: LD_INT 0
27082: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27083: LD_ADDR_VAR 0 1
27087: PUSH
27088: LD_INT 22
27090: PUSH
27091: LD_OWVAR 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: LD_INT 30
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 30
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: LIST
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PPUSH
27132: CALL_OW 69
27136: ST_TO_ADDR
// if not depot then
27137: LD_VAR 0 1
27141: NOT
27142: IFFALSE 27146
// exit ;
27144: GO 27181
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27146: LD_VAR 0 1
27150: PUSH
27151: LD_INT 1
27153: ARRAY
27154: PPUSH
27155: CALL_OW 250
27159: PPUSH
27160: LD_VAR 0 1
27164: PUSH
27165: LD_INT 1
27167: ARRAY
27168: PPUSH
27169: CALL_OW 251
27173: PPUSH
27174: LD_INT 70
27176: PPUSH
27177: CALL_OW 495
// end ;
27181: PPOPN 1
27183: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27184: LD_EXP 53
27188: PUSH
27189: LD_EXP 87
27193: AND
27194: IFFALSE 27405
27196: GO 27198
27198: DISABLE
27199: LD_INT 0
27201: PPUSH
27202: PPUSH
27203: PPUSH
27204: PPUSH
27205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27206: LD_ADDR_VAR 0 5
27210: PUSH
27211: LD_INT 22
27213: PUSH
27214: LD_OWVAR 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 21
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PPUSH
27237: CALL_OW 69
27241: ST_TO_ADDR
// if not tmp then
27242: LD_VAR 0 5
27246: NOT
27247: IFFALSE 27251
// exit ;
27249: GO 27405
// for i in tmp do
27251: LD_ADDR_VAR 0 1
27255: PUSH
27256: LD_VAR 0 5
27260: PUSH
27261: FOR_IN
27262: IFFALSE 27403
// begin d := rand ( 0 , 5 ) ;
27264: LD_ADDR_VAR 0 4
27268: PUSH
27269: LD_INT 0
27271: PPUSH
27272: LD_INT 5
27274: PPUSH
27275: CALL_OW 12
27279: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27280: LD_ADDR_VAR 0 2
27284: PUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 250
27294: PPUSH
27295: LD_VAR 0 4
27299: PPUSH
27300: LD_INT 3
27302: PPUSH
27303: LD_INT 12
27305: PPUSH
27306: CALL_OW 12
27310: PPUSH
27311: CALL_OW 272
27315: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27316: LD_ADDR_VAR 0 3
27320: PUSH
27321: LD_VAR 0 1
27325: PPUSH
27326: CALL_OW 251
27330: PPUSH
27331: LD_VAR 0 4
27335: PPUSH
27336: LD_INT 3
27338: PPUSH
27339: LD_INT 12
27341: PPUSH
27342: CALL_OW 12
27346: PPUSH
27347: CALL_OW 273
27351: ST_TO_ADDR
// if ValidHex ( x , y ) then
27352: LD_VAR 0 2
27356: PPUSH
27357: LD_VAR 0 3
27361: PPUSH
27362: CALL_OW 488
27366: IFFALSE 27401
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27368: LD_VAR 0 1
27372: PPUSH
27373: LD_VAR 0 2
27377: PPUSH
27378: LD_VAR 0 3
27382: PPUSH
27383: LD_INT 3
27385: PPUSH
27386: LD_INT 6
27388: PPUSH
27389: CALL_OW 12
27393: PPUSH
27394: LD_INT 1
27396: PPUSH
27397: CALL_OW 483
// end ;
27401: GO 27261
27403: POP
27404: POP
// end ;
27405: PPOPN 5
27407: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27408: LD_EXP 53
27412: PUSH
27413: LD_EXP 88
27417: AND
27418: IFFALSE 27512
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_INT 22
27434: PUSH
27435: LD_OWVAR 2
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 32
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 21
27456: PUSH
27457: LD_INT 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: PPUSH
27469: CALL_OW 69
27473: ST_TO_ADDR
// if not tmp then
27474: LD_VAR 0 2
27478: NOT
27479: IFFALSE 27483
// exit ;
27481: GO 27512
// for i in tmp do
27483: LD_ADDR_VAR 0 1
27487: PUSH
27488: LD_VAR 0 2
27492: PUSH
27493: FOR_IN
27494: IFFALSE 27510
// SetFuel ( i , 0 ) ;
27496: LD_VAR 0 1
27500: PPUSH
27501: LD_INT 0
27503: PPUSH
27504: CALL_OW 240
27508: GO 27493
27510: POP
27511: POP
// end ;
27512: PPOPN 2
27514: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27515: LD_EXP 53
27519: PUSH
27520: LD_EXP 89
27524: AND
27525: IFFALSE 27591
27527: GO 27529
27529: DISABLE
27530: LD_INT 0
27532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27533: LD_ADDR_VAR 0 1
27537: PUSH
27538: LD_INT 22
27540: PUSH
27541: LD_OWVAR 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 30
27552: PUSH
27553: LD_INT 29
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PPUSH
27564: CALL_OW 69
27568: ST_TO_ADDR
// if not tmp then
27569: LD_VAR 0 1
27573: NOT
27574: IFFALSE 27578
// exit ;
27576: GO 27591
// DestroyUnit ( tmp [ 1 ] ) ;
27578: LD_VAR 0 1
27582: PUSH
27583: LD_INT 1
27585: ARRAY
27586: PPUSH
27587: CALL_OW 65
// end ;
27591: PPOPN 1
27593: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27594: LD_EXP 53
27598: PUSH
27599: LD_EXP 91
27603: AND
27604: IFFALSE 27733
27606: GO 27608
27608: DISABLE
27609: LD_INT 0
27611: PPUSH
// begin uc_side := 0 ;
27612: LD_ADDR_OWVAR 20
27616: PUSH
27617: LD_INT 0
27619: ST_TO_ADDR
// uc_nation := nation_arabian ;
27620: LD_ADDR_OWVAR 21
27624: PUSH
27625: LD_INT 2
27627: ST_TO_ADDR
// hc_gallery :=  ;
27628: LD_ADDR_OWVAR 33
27632: PUSH
27633: LD_STRING 
27635: ST_TO_ADDR
// hc_name :=  ;
27636: LD_ADDR_OWVAR 26
27640: PUSH
27641: LD_STRING 
27643: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27644: LD_INT 1
27646: PPUSH
27647: LD_INT 11
27649: PPUSH
27650: LD_INT 10
27652: PPUSH
27653: CALL_OW 380
// un := CreateHuman ;
27657: LD_ADDR_VAR 0 1
27661: PUSH
27662: CALL_OW 44
27666: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27667: LD_VAR 0 1
27671: PPUSH
27672: LD_INT 1
27674: PPUSH
27675: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27679: LD_INT 35
27681: PPUSH
27682: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27686: LD_VAR 0 1
27690: PPUSH
27691: LD_INT 22
27693: PUSH
27694: LD_OWVAR 2
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PPUSH
27703: CALL_OW 69
27707: PPUSH
27708: LD_VAR 0 1
27712: PPUSH
27713: CALL_OW 74
27717: PPUSH
27718: CALL_OW 115
// until IsDead ( un ) ;
27722: LD_VAR 0 1
27726: PPUSH
27727: CALL_OW 301
27731: IFFALSE 27679
// end ;
27733: PPOPN 1
27735: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27736: LD_EXP 53
27740: PUSH
27741: LD_EXP 93
27745: AND
27746: IFFALSE 27758
27748: GO 27750
27750: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27751: LD_STRING earthquake(getX(game), 0, 32)
27753: PPUSH
27754: CALL_OW 559
27758: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27759: LD_EXP 53
27763: PUSH
27764: LD_EXP 94
27768: AND
27769: IFFALSE 27860
27771: GO 27773
27773: DISABLE
27774: LD_INT 0
27776: PPUSH
// begin enable ;
27777: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27778: LD_ADDR_VAR 0 1
27782: PUSH
27783: LD_INT 22
27785: PUSH
27786: LD_OWVAR 2
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 21
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 33
27807: PUSH
27808: LD_INT 3
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: PPUSH
27820: CALL_OW 69
27824: ST_TO_ADDR
// if not tmp then
27825: LD_VAR 0 1
27829: NOT
27830: IFFALSE 27834
// exit ;
27832: GO 27860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27834: LD_VAR 0 1
27838: PUSH
27839: LD_INT 1
27841: PPUSH
27842: LD_VAR 0 1
27846: PPUSH
27847: CALL_OW 12
27851: ARRAY
27852: PPUSH
27853: LD_INT 1
27855: PPUSH
27856: CALL_OW 234
// end ;
27860: PPOPN 1
27862: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27863: LD_EXP 53
27867: PUSH
27868: LD_EXP 95
27872: AND
27873: IFFALSE 28014
27875: GO 27877
27877: DISABLE
27878: LD_INT 0
27880: PPUSH
27881: PPUSH
27882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_INT 22
27890: PUSH
27891: LD_OWVAR 2
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 25
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: ST_TO_ADDR
// if not tmp then
27919: LD_VAR 0 3
27923: NOT
27924: IFFALSE 27928
// exit ;
27926: GO 28014
// un := tmp [ rand ( 1 , tmp ) ] ;
27928: LD_ADDR_VAR 0 2
27932: PUSH
27933: LD_VAR 0 3
27937: PUSH
27938: LD_INT 1
27940: PPUSH
27941: LD_VAR 0 3
27945: PPUSH
27946: CALL_OW 12
27950: ARRAY
27951: ST_TO_ADDR
// if Crawls ( un ) then
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 318
27961: IFFALSE 27972
// ComWalk ( un ) ;
27963: LD_VAR 0 2
27967: PPUSH
27968: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_INT 9
27979: PPUSH
27980: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27984: LD_INT 28
27986: PPUSH
27987: LD_OWVAR 2
27991: PPUSH
27992: LD_INT 2
27994: PPUSH
27995: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27999: LD_INT 29
28001: PPUSH
28002: LD_OWVAR 2
28006: PPUSH
28007: LD_INT 2
28009: PPUSH
28010: CALL_OW 322
// end ;
28014: PPOPN 3
28016: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28017: LD_EXP 53
28021: PUSH
28022: LD_EXP 96
28026: AND
28027: IFFALSE 28138
28029: GO 28031
28031: DISABLE
28032: LD_INT 0
28034: PPUSH
28035: PPUSH
28036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28037: LD_ADDR_VAR 0 3
28041: PUSH
28042: LD_INT 22
28044: PUSH
28045: LD_OWVAR 2
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 25
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PPUSH
28068: CALL_OW 69
28072: ST_TO_ADDR
// if not tmp then
28073: LD_VAR 0 3
28077: NOT
28078: IFFALSE 28082
// exit ;
28080: GO 28138
// un := tmp [ rand ( 1 , tmp ) ] ;
28082: LD_ADDR_VAR 0 2
28086: PUSH
28087: LD_VAR 0 3
28091: PUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_VAR 0 3
28099: PPUSH
28100: CALL_OW 12
28104: ARRAY
28105: ST_TO_ADDR
// if Crawls ( un ) then
28106: LD_VAR 0 2
28110: PPUSH
28111: CALL_OW 318
28115: IFFALSE 28126
// ComWalk ( un ) ;
28117: LD_VAR 0 2
28121: PPUSH
28122: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28126: LD_VAR 0 2
28130: PPUSH
28131: LD_INT 8
28133: PPUSH
28134: CALL_OW 336
// end ;
28138: PPOPN 3
28140: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28141: LD_EXP 53
28145: PUSH
28146: LD_EXP 97
28150: AND
28151: IFFALSE 28295
28153: GO 28155
28155: DISABLE
28156: LD_INT 0
28158: PPUSH
28159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28160: LD_ADDR_VAR 0 2
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 21
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 34
28192: PUSH
28193: LD_INT 12
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 34
28202: PUSH
28203: LD_INT 51
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 34
28212: PUSH
28213: LD_INT 32
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: LIST
28230: PPUSH
28231: CALL_OW 69
28235: ST_TO_ADDR
// if not tmp then
28236: LD_VAR 0 2
28240: NOT
28241: IFFALSE 28245
// exit ;
28243: GO 28295
// for i in tmp do
28245: LD_ADDR_VAR 0 1
28249: PUSH
28250: LD_VAR 0 2
28254: PUSH
28255: FOR_IN
28256: IFFALSE 28293
// if GetCargo ( i , mat_artifact ) = 0 then
28258: LD_VAR 0 1
28262: PPUSH
28263: LD_INT 4
28265: PPUSH
28266: CALL_OW 289
28270: PUSH
28271: LD_INT 0
28273: EQUAL
28274: IFFALSE 28291
// SetCargo ( i , mat_siberit , 100 ) ;
28276: LD_VAR 0 1
28280: PPUSH
28281: LD_INT 3
28283: PPUSH
28284: LD_INT 100
28286: PPUSH
28287: CALL_OW 290
28291: GO 28255
28293: POP
28294: POP
// end ;
28295: PPOPN 2
28297: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28298: LD_EXP 53
28302: PUSH
28303: LD_EXP 98
28307: AND
28308: IFFALSE 28491
28310: GO 28312
28312: DISABLE
28313: LD_INT 0
28315: PPUSH
28316: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28317: LD_ADDR_VAR 0 2
28321: PUSH
28322: LD_INT 22
28324: PUSH
28325: LD_OWVAR 2
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PPUSH
28334: CALL_OW 69
28338: ST_TO_ADDR
// if not tmp then
28339: LD_VAR 0 2
28343: NOT
28344: IFFALSE 28348
// exit ;
28346: GO 28491
// for i := 1 to 2 do
28348: LD_ADDR_VAR 0 1
28352: PUSH
28353: DOUBLE
28354: LD_INT 1
28356: DEC
28357: ST_TO_ADDR
28358: LD_INT 2
28360: PUSH
28361: FOR_TO
28362: IFFALSE 28489
// begin uc_side := your_side ;
28364: LD_ADDR_OWVAR 20
28368: PUSH
28369: LD_OWVAR 2
28373: ST_TO_ADDR
// uc_nation := nation_american ;
28374: LD_ADDR_OWVAR 21
28378: PUSH
28379: LD_INT 1
28381: ST_TO_ADDR
// vc_chassis := us_morphling ;
28382: LD_ADDR_OWVAR 37
28386: PUSH
28387: LD_INT 5
28389: ST_TO_ADDR
// vc_engine := engine_siberite ;
28390: LD_ADDR_OWVAR 39
28394: PUSH
28395: LD_INT 3
28397: ST_TO_ADDR
// vc_control := control_computer ;
28398: LD_ADDR_OWVAR 38
28402: PUSH
28403: LD_INT 3
28405: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28406: LD_ADDR_OWVAR 40
28410: PUSH
28411: LD_INT 10
28413: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28414: LD_VAR 0 2
28418: PUSH
28419: LD_INT 1
28421: ARRAY
28422: PPUSH
28423: CALL_OW 310
28427: NOT
28428: IFFALSE 28475
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28430: CALL_OW 45
28434: PPUSH
28435: LD_VAR 0 2
28439: PUSH
28440: LD_INT 1
28442: ARRAY
28443: PPUSH
28444: CALL_OW 250
28448: PPUSH
28449: LD_VAR 0 2
28453: PUSH
28454: LD_INT 1
28456: ARRAY
28457: PPUSH
28458: CALL_OW 251
28462: PPUSH
28463: LD_INT 12
28465: PPUSH
28466: LD_INT 1
28468: PPUSH
28469: CALL_OW 50
28473: GO 28487
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28475: CALL_OW 45
28479: PPUSH
28480: LD_INT 1
28482: PPUSH
28483: CALL_OW 51
// end ;
28487: GO 28361
28489: POP
28490: POP
// end ;
28491: PPOPN 2
28493: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28494: LD_EXP 53
28498: PUSH
28499: LD_EXP 99
28503: AND
28504: IFFALSE 28726
28506: GO 28508
28508: DISABLE
28509: LD_INT 0
28511: PPUSH
28512: PPUSH
28513: PPUSH
28514: PPUSH
28515: PPUSH
28516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28517: LD_ADDR_VAR 0 6
28521: PUSH
28522: LD_INT 22
28524: PUSH
28525: LD_OWVAR 2
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 21
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 3
28546: PUSH
28547: LD_INT 23
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: PPUSH
28566: CALL_OW 69
28570: ST_TO_ADDR
// if not tmp then
28571: LD_VAR 0 6
28575: NOT
28576: IFFALSE 28580
// exit ;
28578: GO 28726
// s1 := rand ( 1 , 4 ) ;
28580: LD_ADDR_VAR 0 2
28584: PUSH
28585: LD_INT 1
28587: PPUSH
28588: LD_INT 4
28590: PPUSH
28591: CALL_OW 12
28595: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28596: LD_ADDR_VAR 0 4
28600: PUSH
28601: LD_VAR 0 6
28605: PUSH
28606: LD_INT 1
28608: ARRAY
28609: PPUSH
28610: LD_VAR 0 2
28614: PPUSH
28615: CALL_OW 259
28619: ST_TO_ADDR
// if s1 = 1 then
28620: LD_VAR 0 2
28624: PUSH
28625: LD_INT 1
28627: EQUAL
28628: IFFALSE 28648
// s2 := rand ( 2 , 4 ) else
28630: LD_ADDR_VAR 0 3
28634: PUSH
28635: LD_INT 2
28637: PPUSH
28638: LD_INT 4
28640: PPUSH
28641: CALL_OW 12
28645: ST_TO_ADDR
28646: GO 28656
// s2 := 1 ;
28648: LD_ADDR_VAR 0 3
28652: PUSH
28653: LD_INT 1
28655: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28656: LD_ADDR_VAR 0 5
28660: PUSH
28661: LD_VAR 0 6
28665: PUSH
28666: LD_INT 1
28668: ARRAY
28669: PPUSH
28670: LD_VAR 0 3
28674: PPUSH
28675: CALL_OW 259
28679: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28680: LD_VAR 0 6
28684: PUSH
28685: LD_INT 1
28687: ARRAY
28688: PPUSH
28689: LD_VAR 0 2
28693: PPUSH
28694: LD_VAR 0 5
28698: PPUSH
28699: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28703: LD_VAR 0 6
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: PPUSH
28712: LD_VAR 0 3
28716: PPUSH
28717: LD_VAR 0 4
28721: PPUSH
28722: CALL_OW 237
// end ;
28726: PPOPN 6
28728: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28729: LD_EXP 53
28733: PUSH
28734: LD_EXP 100
28738: AND
28739: IFFALSE 28818
28741: GO 28743
28743: DISABLE
28744: LD_INT 0
28746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28747: LD_ADDR_VAR 0 1
28751: PUSH
28752: LD_INT 22
28754: PUSH
28755: LD_OWVAR 2
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 30
28766: PUSH
28767: LD_INT 3
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PPUSH
28778: CALL_OW 69
28782: ST_TO_ADDR
// if not tmp then
28783: LD_VAR 0 1
28787: NOT
28788: IFFALSE 28792
// exit ;
28790: GO 28818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28792: LD_VAR 0 1
28796: PUSH
28797: LD_INT 1
28799: PPUSH
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 12
28809: ARRAY
28810: PPUSH
28811: LD_INT 1
28813: PPUSH
28814: CALL_OW 234
// end ;
28818: PPOPN 1
28820: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28821: LD_EXP 53
28825: PUSH
28826: LD_EXP 101
28830: AND
28831: IFFALSE 28943
28833: GO 28835
28835: DISABLE
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28840: LD_ADDR_VAR 0 2
28844: PUSH
28845: LD_INT 22
28847: PUSH
28848: LD_OWVAR 2
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 30
28862: PUSH
28863: LD_INT 27
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 30
28872: PUSH
28873: LD_INT 26
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 30
28882: PUSH
28883: LD_INT 28
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: ST_TO_ADDR
// if not tmp then
28905: LD_VAR 0 2
28909: NOT
28910: IFFALSE 28914
// exit ;
28912: GO 28943
// for i in tmp do
28914: LD_ADDR_VAR 0 1
28918: PUSH
28919: LD_VAR 0 2
28923: PUSH
28924: FOR_IN
28925: IFFALSE 28941
// SetLives ( i , 1 ) ;
28927: LD_VAR 0 1
28931: PPUSH
28932: LD_INT 1
28934: PPUSH
28935: CALL_OW 234
28939: GO 28924
28941: POP
28942: POP
// end ;
28943: PPOPN 2
28945: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28946: LD_EXP 53
28950: PUSH
28951: LD_EXP 102
28955: AND
28956: IFFALSE 29243
28958: GO 28960
28960: DISABLE
28961: LD_INT 0
28963: PPUSH
28964: PPUSH
28965: PPUSH
// begin i := rand ( 1 , 7 ) ;
28966: LD_ADDR_VAR 0 1
28970: PUSH
28971: LD_INT 1
28973: PPUSH
28974: LD_INT 7
28976: PPUSH
28977: CALL_OW 12
28981: ST_TO_ADDR
// case i of 1 :
28982: LD_VAR 0 1
28986: PUSH
28987: LD_INT 1
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 28995
28993: GO 29005
28995: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28996: LD_STRING earthquake(getX(game), 0, 32)
28998: PPUSH
28999: CALL_OW 559
29003: GO 29243
29005: LD_INT 2
29007: DOUBLE
29008: EQUAL
29009: IFTRUE 29013
29011: GO 29027
29013: POP
// begin ToLua ( displayStucuk(); ) ;
29014: LD_STRING displayStucuk();
29016: PPUSH
29017: CALL_OW 559
// ResetFog ;
29021: CALL_OW 335
// end ; 3 :
29025: GO 29243
29027: LD_INT 3
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29139
29035: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29036: LD_ADDR_VAR 0 2
29040: PUSH
29041: LD_INT 22
29043: PUSH
29044: LD_OWVAR 2
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 25
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PPUSH
29067: CALL_OW 69
29071: ST_TO_ADDR
// if not tmp then
29072: LD_VAR 0 2
29076: NOT
29077: IFFALSE 29081
// exit ;
29079: GO 29243
// un := tmp [ rand ( 1 , tmp ) ] ;
29081: LD_ADDR_VAR 0 3
29085: PUSH
29086: LD_VAR 0 2
29090: PUSH
29091: LD_INT 1
29093: PPUSH
29094: LD_VAR 0 2
29098: PPUSH
29099: CALL_OW 12
29103: ARRAY
29104: ST_TO_ADDR
// if Crawls ( un ) then
29105: LD_VAR 0 3
29109: PPUSH
29110: CALL_OW 318
29114: IFFALSE 29125
// ComWalk ( un ) ;
29116: LD_VAR 0 3
29120: PPUSH
29121: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29125: LD_VAR 0 3
29129: PPUSH
29130: LD_INT 8
29132: PPUSH
29133: CALL_OW 336
// end ; 4 :
29137: GO 29243
29139: LD_INT 4
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29221
29147: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29148: LD_ADDR_VAR 0 2
29152: PUSH
29153: LD_INT 22
29155: PUSH
29156: LD_OWVAR 2
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 30
29167: PUSH
29168: LD_INT 29
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PPUSH
29179: CALL_OW 69
29183: ST_TO_ADDR
// if not tmp then
29184: LD_VAR 0 2
29188: NOT
29189: IFFALSE 29193
// exit ;
29191: GO 29243
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29193: LD_VAR 0 2
29197: PUSH
29198: LD_INT 1
29200: ARRAY
29201: PPUSH
29202: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29206: LD_VAR 0 2
29210: PUSH
29211: LD_INT 1
29213: ARRAY
29214: PPUSH
29215: CALL_OW 65
// end ; 5 .. 7 :
29219: GO 29243
29221: LD_INT 5
29223: DOUBLE
29224: GREATEREQUAL
29225: IFFALSE 29233
29227: LD_INT 7
29229: DOUBLE
29230: LESSEQUAL
29231: IFTRUE 29235
29233: GO 29242
29235: POP
// StreamSibBomb ; end ;
29236: CALL 25480 0 0
29240: GO 29243
29242: POP
// end ;
29243: PPOPN 3
29245: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29246: LD_EXP 53
29250: PUSH
29251: LD_EXP 103
29255: AND
29256: IFFALSE 29412
29258: GO 29260
29260: DISABLE
29261: LD_INT 0
29263: PPUSH
29264: PPUSH
29265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29266: LD_ADDR_VAR 0 2
29270: PUSH
29271: LD_INT 81
29273: PUSH
29274: LD_OWVAR 2
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: LD_INT 21
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 21
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PPUSH
29315: CALL_OW 69
29319: ST_TO_ADDR
// if not tmp then
29320: LD_VAR 0 2
29324: NOT
29325: IFFALSE 29329
// exit ;
29327: GO 29412
// p := 0 ;
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_INT 0
29336: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29337: LD_INT 35
29339: PPUSH
29340: CALL_OW 67
// p := p + 1 ;
29344: LD_ADDR_VAR 0 3
29348: PUSH
29349: LD_VAR 0 3
29353: PUSH
29354: LD_INT 1
29356: PLUS
29357: ST_TO_ADDR
// for i in tmp do
29358: LD_ADDR_VAR 0 1
29362: PUSH
29363: LD_VAR 0 2
29367: PUSH
29368: FOR_IN
29369: IFFALSE 29400
// if GetLives ( i ) < 1000 then
29371: LD_VAR 0 1
29375: PPUSH
29376: CALL_OW 256
29380: PUSH
29381: LD_INT 1000
29383: LESS
29384: IFFALSE 29398
// SetLives ( i , 1000 ) ;
29386: LD_VAR 0 1
29390: PPUSH
29391: LD_INT 1000
29393: PPUSH
29394: CALL_OW 234
29398: GO 29368
29400: POP
29401: POP
// until p > 20 ;
29402: LD_VAR 0 3
29406: PUSH
29407: LD_INT 20
29409: GREATER
29410: IFFALSE 29337
// end ;
29412: PPOPN 3
29414: END
// every 0 0$1 trigger StreamModeActive and sTime do
29415: LD_EXP 53
29419: PUSH
29420: LD_EXP 104
29424: AND
29425: IFFALSE 29460
29427: GO 29429
29429: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29430: LD_INT 28
29432: PPUSH
29433: LD_OWVAR 2
29437: PPUSH
29438: LD_INT 2
29440: PPUSH
29441: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29445: LD_INT 30
29447: PPUSH
29448: LD_OWVAR 2
29452: PPUSH
29453: LD_INT 2
29455: PPUSH
29456: CALL_OW 322
// end ;
29460: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29461: LD_EXP 53
29465: PUSH
29466: LD_EXP 105
29470: AND
29471: IFFALSE 29592
29473: GO 29475
29475: DISABLE
29476: LD_INT 0
29478: PPUSH
29479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29480: LD_ADDR_VAR 0 2
29484: PUSH
29485: LD_INT 22
29487: PUSH
29488: LD_OWVAR 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 21
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: LD_INT 23
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: PPUSH
29529: CALL_OW 69
29533: ST_TO_ADDR
// if not tmp then
29534: LD_VAR 0 2
29538: NOT
29539: IFFALSE 29543
// exit ;
29541: GO 29592
// for i in tmp do
29543: LD_ADDR_VAR 0 1
29547: PUSH
29548: LD_VAR 0 2
29552: PUSH
29553: FOR_IN
29554: IFFALSE 29590
// begin if Crawls ( i ) then
29556: LD_VAR 0 1
29560: PPUSH
29561: CALL_OW 318
29565: IFFALSE 29576
// ComWalk ( i ) ;
29567: LD_VAR 0 1
29571: PPUSH
29572: CALL_OW 138
// SetClass ( i , 2 ) ;
29576: LD_VAR 0 1
29580: PPUSH
29581: LD_INT 2
29583: PPUSH
29584: CALL_OW 336
// end ;
29588: GO 29553
29590: POP
29591: POP
// end ;
29592: PPOPN 2
29594: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29595: LD_EXP 53
29599: PUSH
29600: LD_EXP 106
29604: AND
29605: IFFALSE 29893
29607: GO 29609
29609: DISABLE
29610: LD_INT 0
29612: PPUSH
29613: PPUSH
29614: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29615: LD_OWVAR 2
29619: PPUSH
29620: LD_INT 9
29622: PPUSH
29623: LD_INT 1
29625: PPUSH
29626: LD_INT 1
29628: PPUSH
29629: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29633: LD_INT 9
29635: PPUSH
29636: LD_OWVAR 2
29640: PPUSH
29641: CALL_OW 343
// uc_side := 9 ;
29645: LD_ADDR_OWVAR 20
29649: PUSH
29650: LD_INT 9
29652: ST_TO_ADDR
// uc_nation := 2 ;
29653: LD_ADDR_OWVAR 21
29657: PUSH
29658: LD_INT 2
29660: ST_TO_ADDR
// hc_name := Dark Warrior ;
29661: LD_ADDR_OWVAR 26
29665: PUSH
29666: LD_STRING Dark Warrior
29668: ST_TO_ADDR
// hc_gallery :=  ;
29669: LD_ADDR_OWVAR 33
29673: PUSH
29674: LD_STRING 
29676: ST_TO_ADDR
// hc_noskilllimit := true ;
29677: LD_ADDR_OWVAR 76
29681: PUSH
29682: LD_INT 1
29684: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29685: LD_ADDR_OWVAR 31
29689: PUSH
29690: LD_INT 30
29692: PUSH
29693: LD_INT 30
29695: PUSH
29696: LD_INT 30
29698: PUSH
29699: LD_INT 30
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: ST_TO_ADDR
// un := CreateHuman ;
29708: LD_ADDR_VAR 0 3
29712: PUSH
29713: CALL_OW 44
29717: ST_TO_ADDR
// hc_noskilllimit := false ;
29718: LD_ADDR_OWVAR 76
29722: PUSH
29723: LD_INT 0
29725: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29726: LD_VAR 0 3
29730: PPUSH
29731: LD_INT 1
29733: PPUSH
29734: CALL_OW 51
// ToLua ( playRanger() ) ;
29738: LD_STRING playRanger()
29740: PPUSH
29741: CALL_OW 559
// p := 0 ;
29745: LD_ADDR_VAR 0 2
29749: PUSH
29750: LD_INT 0
29752: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29753: LD_INT 35
29755: PPUSH
29756: CALL_OW 67
// p := p + 1 ;
29760: LD_ADDR_VAR 0 2
29764: PUSH
29765: LD_VAR 0 2
29769: PUSH
29770: LD_INT 1
29772: PLUS
29773: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29774: LD_VAR 0 3
29778: PPUSH
29779: CALL_OW 256
29783: PUSH
29784: LD_INT 1000
29786: LESS
29787: IFFALSE 29801
// SetLives ( un , 1000 ) ;
29789: LD_VAR 0 3
29793: PPUSH
29794: LD_INT 1000
29796: PPUSH
29797: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29801: LD_VAR 0 3
29805: PPUSH
29806: LD_INT 81
29808: PUSH
29809: LD_OWVAR 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 91
29820: PUSH
29821: LD_VAR 0 3
29825: PUSH
29826: LD_INT 30
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PPUSH
29838: CALL_OW 69
29842: PPUSH
29843: LD_VAR 0 3
29847: PPUSH
29848: CALL_OW 74
29852: PPUSH
29853: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29857: LD_VAR 0 2
29861: PUSH
29862: LD_INT 80
29864: GREATER
29865: PUSH
29866: LD_VAR 0 3
29870: PPUSH
29871: CALL_OW 301
29875: OR
29876: IFFALSE 29753
// if un then
29878: LD_VAR 0 3
29882: IFFALSE 29893
// RemoveUnit ( un ) ;
29884: LD_VAR 0 3
29888: PPUSH
29889: CALL_OW 64
// end ;
29893: PPOPN 3
29895: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29896: LD_EXP 107
29900: IFFALSE 30016
29902: GO 29904
29904: DISABLE
29905: LD_INT 0
29907: PPUSH
29908: PPUSH
29909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29910: LD_ADDR_VAR 0 2
29914: PUSH
29915: LD_INT 81
29917: PUSH
29918: LD_OWVAR 2
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 21
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PPUSH
29941: CALL_OW 69
29945: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29946: LD_STRING playComputer()
29948: PPUSH
29949: CALL_OW 559
// if not tmp then
29953: LD_VAR 0 2
29957: NOT
29958: IFFALSE 29962
// exit ;
29960: GO 30016
// for i in tmp do
29962: LD_ADDR_VAR 0 1
29966: PUSH
29967: LD_VAR 0 2
29971: PUSH
29972: FOR_IN
29973: IFFALSE 30014
// for j := 1 to 4 do
29975: LD_ADDR_VAR 0 3
29979: PUSH
29980: DOUBLE
29981: LD_INT 1
29983: DEC
29984: ST_TO_ADDR
29985: LD_INT 4
29987: PUSH
29988: FOR_TO
29989: IFFALSE 30010
// SetSkill ( i , j , 10 ) ;
29991: LD_VAR 0 1
29995: PPUSH
29996: LD_VAR 0 3
30000: PPUSH
30001: LD_INT 10
30003: PPUSH
30004: CALL_OW 237
30008: GO 29988
30010: POP
30011: POP
30012: GO 29972
30014: POP
30015: POP
// end ;
30016: PPOPN 3
30018: END
// every 0 0$1 trigger s30 do var i , tmp ;
30019: LD_EXP 108
30023: IFFALSE 30092
30025: GO 30027
30027: DISABLE
30028: LD_INT 0
30030: PPUSH
30031: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30032: LD_ADDR_VAR 0 2
30036: PUSH
30037: LD_INT 22
30039: PUSH
30040: LD_OWVAR 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PPUSH
30049: CALL_OW 69
30053: ST_TO_ADDR
// if not tmp then
30054: LD_VAR 0 2
30058: NOT
30059: IFFALSE 30063
// exit ;
30061: GO 30092
// for i in tmp do
30063: LD_ADDR_VAR 0 1
30067: PUSH
30068: LD_VAR 0 2
30072: PUSH
30073: FOR_IN
30074: IFFALSE 30090
// SetLives ( i , 300 ) ;
30076: LD_VAR 0 1
30080: PPUSH
30081: LD_INT 300
30083: PPUSH
30084: CALL_OW 234
30088: GO 30073
30090: POP
30091: POP
// end ;
30092: PPOPN 2
30094: END
// every 0 0$1 trigger s60 do var i , tmp ;
30095: LD_EXP 109
30099: IFFALSE 30168
30101: GO 30103
30103: DISABLE
30104: LD_INT 0
30106: PPUSH
30107: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30108: LD_ADDR_VAR 0 2
30112: PUSH
30113: LD_INT 22
30115: PUSH
30116: LD_OWVAR 2
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PPUSH
30125: CALL_OW 69
30129: ST_TO_ADDR
// if not tmp then
30130: LD_VAR 0 2
30134: NOT
30135: IFFALSE 30139
// exit ;
30137: GO 30168
// for i in tmp do
30139: LD_ADDR_VAR 0 1
30143: PUSH
30144: LD_VAR 0 2
30148: PUSH
30149: FOR_IN
30150: IFFALSE 30166
// SetLives ( i , 600 ) ;
30152: LD_VAR 0 1
30156: PPUSH
30157: LD_INT 600
30159: PPUSH
30160: CALL_OW 234
30164: GO 30149
30166: POP
30167: POP
// end ;
30168: PPOPN 2
30170: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30171: LD_INT 0
30173: PPUSH
// case cmd of 301 :
30174: LD_VAR 0 1
30178: PUSH
30179: LD_INT 301
30181: DOUBLE
30182: EQUAL
30183: IFTRUE 30187
30185: GO 30219
30187: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30188: LD_VAR 0 6
30192: PPUSH
30193: LD_VAR 0 7
30197: PPUSH
30198: LD_VAR 0 8
30202: PPUSH
30203: LD_VAR 0 4
30207: PPUSH
30208: LD_VAR 0 5
30212: PPUSH
30213: CALL 31420 0 5
30217: GO 30340
30219: LD_INT 302
30221: DOUBLE
30222: EQUAL
30223: IFTRUE 30227
30225: GO 30264
30227: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30228: LD_VAR 0 6
30232: PPUSH
30233: LD_VAR 0 7
30237: PPUSH
30238: LD_VAR 0 8
30242: PPUSH
30243: LD_VAR 0 9
30247: PPUSH
30248: LD_VAR 0 4
30252: PPUSH
30253: LD_VAR 0 5
30257: PPUSH
30258: CALL 31511 0 6
30262: GO 30340
30264: LD_INT 303
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30309
30272: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30273: LD_VAR 0 6
30277: PPUSH
30278: LD_VAR 0 7
30282: PPUSH
30283: LD_VAR 0 8
30287: PPUSH
30288: LD_VAR 0 9
30292: PPUSH
30293: LD_VAR 0 4
30297: PPUSH
30298: LD_VAR 0 5
30302: PPUSH
30303: CALL 30345 0 6
30307: GO 30340
30309: LD_INT 304
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30339
30317: POP
// hHackTeleport ( unit , x , y ) ; end ;
30318: LD_VAR 0 2
30322: PPUSH
30323: LD_VAR 0 4
30327: PPUSH
30328: LD_VAR 0 5
30332: PPUSH
30333: CALL 32104 0 3
30337: GO 30340
30339: POP
// end ;
30340: LD_VAR 0 12
30344: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30345: LD_INT 0
30347: PPUSH
30348: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30349: LD_VAR 0 1
30353: PUSH
30354: LD_INT 1
30356: LESS
30357: PUSH
30358: LD_VAR 0 1
30362: PUSH
30363: LD_INT 3
30365: GREATER
30366: OR
30367: PUSH
30368: LD_VAR 0 5
30372: PPUSH
30373: LD_VAR 0 6
30377: PPUSH
30378: CALL_OW 428
30382: OR
30383: IFFALSE 30387
// exit ;
30385: GO 31107
// uc_side := your_side ;
30387: LD_ADDR_OWVAR 20
30391: PUSH
30392: LD_OWVAR 2
30396: ST_TO_ADDR
// uc_nation := nation ;
30397: LD_ADDR_OWVAR 21
30401: PUSH
30402: LD_VAR 0 1
30406: ST_TO_ADDR
// bc_level = 1 ;
30407: LD_ADDR_OWVAR 43
30411: PUSH
30412: LD_INT 1
30414: ST_TO_ADDR
// case btype of 1 :
30415: LD_VAR 0 2
30419: PUSH
30420: LD_INT 1
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30439
30428: POP
// bc_type := b_depot ; 2 :
30429: LD_ADDR_OWVAR 42
30433: PUSH
30434: LD_INT 0
30436: ST_TO_ADDR
30437: GO 31051
30439: LD_INT 2
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30458
30447: POP
// bc_type := b_warehouse ; 3 :
30448: LD_ADDR_OWVAR 42
30452: PUSH
30453: LD_INT 1
30455: ST_TO_ADDR
30456: GO 31051
30458: LD_INT 3
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30477
30466: POP
// bc_type := b_lab ; 4 .. 9 :
30467: LD_ADDR_OWVAR 42
30471: PUSH
30472: LD_INT 6
30474: ST_TO_ADDR
30475: GO 31051
30477: LD_INT 4
30479: DOUBLE
30480: GREATEREQUAL
30481: IFFALSE 30489
30483: LD_INT 9
30485: DOUBLE
30486: LESSEQUAL
30487: IFTRUE 30491
30489: GO 30543
30491: POP
// begin bc_type := b_lab_half ;
30492: LD_ADDR_OWVAR 42
30496: PUSH
30497: LD_INT 7
30499: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30500: LD_ADDR_OWVAR 44
30504: PUSH
30505: LD_INT 10
30507: PUSH
30508: LD_INT 11
30510: PUSH
30511: LD_INT 12
30513: PUSH
30514: LD_INT 15
30516: PUSH
30517: LD_INT 14
30519: PUSH
30520: LD_INT 13
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: PUSH
30531: LD_VAR 0 2
30535: PUSH
30536: LD_INT 3
30538: MINUS
30539: ARRAY
30540: ST_TO_ADDR
// end ; 10 .. 13 :
30541: GO 31051
30543: LD_INT 10
30545: DOUBLE
30546: GREATEREQUAL
30547: IFFALSE 30555
30549: LD_INT 13
30551: DOUBLE
30552: LESSEQUAL
30553: IFTRUE 30557
30555: GO 30634
30557: POP
// begin bc_type := b_lab_full ;
30558: LD_ADDR_OWVAR 42
30562: PUSH
30563: LD_INT 8
30565: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30566: LD_ADDR_OWVAR 44
30570: PUSH
30571: LD_INT 10
30573: PUSH
30574: LD_INT 12
30576: PUSH
30577: LD_INT 14
30579: PUSH
30580: LD_INT 13
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: PUSH
30589: LD_VAR 0 2
30593: PUSH
30594: LD_INT 9
30596: MINUS
30597: ARRAY
30598: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30599: LD_ADDR_OWVAR 45
30603: PUSH
30604: LD_INT 11
30606: PUSH
30607: LD_INT 15
30609: PUSH
30610: LD_INT 12
30612: PUSH
30613: LD_INT 15
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: PUSH
30622: LD_VAR 0 2
30626: PUSH
30627: LD_INT 9
30629: MINUS
30630: ARRAY
30631: ST_TO_ADDR
// end ; 14 :
30632: GO 31051
30634: LD_INT 14
30636: DOUBLE
30637: EQUAL
30638: IFTRUE 30642
30640: GO 30653
30642: POP
// bc_type := b_workshop ; 15 :
30643: LD_ADDR_OWVAR 42
30647: PUSH
30648: LD_INT 2
30650: ST_TO_ADDR
30651: GO 31051
30653: LD_INT 15
30655: DOUBLE
30656: EQUAL
30657: IFTRUE 30661
30659: GO 30672
30661: POP
// bc_type := b_factory ; 16 :
30662: LD_ADDR_OWVAR 42
30666: PUSH
30667: LD_INT 3
30669: ST_TO_ADDR
30670: GO 31051
30672: LD_INT 16
30674: DOUBLE
30675: EQUAL
30676: IFTRUE 30680
30678: GO 30691
30680: POP
// bc_type := b_ext_gun ; 17 :
30681: LD_ADDR_OWVAR 42
30685: PUSH
30686: LD_INT 17
30688: ST_TO_ADDR
30689: GO 31051
30691: LD_INT 17
30693: DOUBLE
30694: EQUAL
30695: IFTRUE 30699
30697: GO 30727
30699: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30700: LD_ADDR_OWVAR 42
30704: PUSH
30705: LD_INT 19
30707: PUSH
30708: LD_INT 23
30710: PUSH
30711: LD_INT 19
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: PUSH
30719: LD_VAR 0 1
30723: ARRAY
30724: ST_TO_ADDR
30725: GO 31051
30727: LD_INT 18
30729: DOUBLE
30730: EQUAL
30731: IFTRUE 30735
30733: GO 30746
30735: POP
// bc_type := b_ext_radar ; 19 :
30736: LD_ADDR_OWVAR 42
30740: PUSH
30741: LD_INT 20
30743: ST_TO_ADDR
30744: GO 31051
30746: LD_INT 19
30748: DOUBLE
30749: EQUAL
30750: IFTRUE 30754
30752: GO 30765
30754: POP
// bc_type := b_ext_radio ; 20 :
30755: LD_ADDR_OWVAR 42
30759: PUSH
30760: LD_INT 22
30762: ST_TO_ADDR
30763: GO 31051
30765: LD_INT 20
30767: DOUBLE
30768: EQUAL
30769: IFTRUE 30773
30771: GO 30784
30773: POP
// bc_type := b_ext_siberium ; 21 :
30774: LD_ADDR_OWVAR 42
30778: PUSH
30779: LD_INT 21
30781: ST_TO_ADDR
30782: GO 31051
30784: LD_INT 21
30786: DOUBLE
30787: EQUAL
30788: IFTRUE 30792
30790: GO 30803
30792: POP
// bc_type := b_ext_computer ; 22 :
30793: LD_ADDR_OWVAR 42
30797: PUSH
30798: LD_INT 24
30800: ST_TO_ADDR
30801: GO 31051
30803: LD_INT 22
30805: DOUBLE
30806: EQUAL
30807: IFTRUE 30811
30809: GO 30822
30811: POP
// bc_type := b_ext_track ; 23 :
30812: LD_ADDR_OWVAR 42
30816: PUSH
30817: LD_INT 16
30819: ST_TO_ADDR
30820: GO 31051
30822: LD_INT 23
30824: DOUBLE
30825: EQUAL
30826: IFTRUE 30830
30828: GO 30841
30830: POP
// bc_type := b_ext_laser ; 24 :
30831: LD_ADDR_OWVAR 42
30835: PUSH
30836: LD_INT 25
30838: ST_TO_ADDR
30839: GO 31051
30841: LD_INT 24
30843: DOUBLE
30844: EQUAL
30845: IFTRUE 30849
30847: GO 30860
30849: POP
// bc_type := b_control_tower ; 25 :
30850: LD_ADDR_OWVAR 42
30854: PUSH
30855: LD_INT 36
30857: ST_TO_ADDR
30858: GO 31051
30860: LD_INT 25
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 30879
30868: POP
// bc_type := b_breastwork ; 26 :
30869: LD_ADDR_OWVAR 42
30873: PUSH
30874: LD_INT 31
30876: ST_TO_ADDR
30877: GO 31051
30879: LD_INT 26
30881: DOUBLE
30882: EQUAL
30883: IFTRUE 30887
30885: GO 30898
30887: POP
// bc_type := b_bunker ; 27 :
30888: LD_ADDR_OWVAR 42
30892: PUSH
30893: LD_INT 32
30895: ST_TO_ADDR
30896: GO 31051
30898: LD_INT 27
30900: DOUBLE
30901: EQUAL
30902: IFTRUE 30906
30904: GO 30917
30906: POP
// bc_type := b_turret ; 28 :
30907: LD_ADDR_OWVAR 42
30911: PUSH
30912: LD_INT 33
30914: ST_TO_ADDR
30915: GO 31051
30917: LD_INT 28
30919: DOUBLE
30920: EQUAL
30921: IFTRUE 30925
30923: GO 30936
30925: POP
// bc_type := b_armoury ; 29 :
30926: LD_ADDR_OWVAR 42
30930: PUSH
30931: LD_INT 4
30933: ST_TO_ADDR
30934: GO 31051
30936: LD_INT 29
30938: DOUBLE
30939: EQUAL
30940: IFTRUE 30944
30942: GO 30955
30944: POP
// bc_type := b_barracks ; 30 :
30945: LD_ADDR_OWVAR 42
30949: PUSH
30950: LD_INT 5
30952: ST_TO_ADDR
30953: GO 31051
30955: LD_INT 30
30957: DOUBLE
30958: EQUAL
30959: IFTRUE 30963
30961: GO 30974
30963: POP
// bc_type := b_solar_power ; 31 :
30964: LD_ADDR_OWVAR 42
30968: PUSH
30969: LD_INT 27
30971: ST_TO_ADDR
30972: GO 31051
30974: LD_INT 31
30976: DOUBLE
30977: EQUAL
30978: IFTRUE 30982
30980: GO 30993
30982: POP
// bc_type := b_oil_power ; 32 :
30983: LD_ADDR_OWVAR 42
30987: PUSH
30988: LD_INT 26
30990: ST_TO_ADDR
30991: GO 31051
30993: LD_INT 32
30995: DOUBLE
30996: EQUAL
30997: IFTRUE 31001
30999: GO 31012
31001: POP
// bc_type := b_siberite_power ; 33 :
31002: LD_ADDR_OWVAR 42
31006: PUSH
31007: LD_INT 28
31009: ST_TO_ADDR
31010: GO 31051
31012: LD_INT 33
31014: DOUBLE
31015: EQUAL
31016: IFTRUE 31020
31018: GO 31031
31020: POP
// bc_type := b_oil_mine ; 34 :
31021: LD_ADDR_OWVAR 42
31025: PUSH
31026: LD_INT 29
31028: ST_TO_ADDR
31029: GO 31051
31031: LD_INT 34
31033: DOUBLE
31034: EQUAL
31035: IFTRUE 31039
31037: GO 31050
31039: POP
// bc_type := b_siberite_mine ; end ;
31040: LD_ADDR_OWVAR 42
31044: PUSH
31045: LD_INT 30
31047: ST_TO_ADDR
31048: GO 31051
31050: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31051: LD_ADDR_VAR 0 8
31055: PUSH
31056: LD_VAR 0 5
31060: PPUSH
31061: LD_VAR 0 6
31065: PPUSH
31066: LD_VAR 0 3
31070: PPUSH
31071: CALL_OW 47
31075: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31076: LD_OWVAR 42
31080: PUSH
31081: LD_INT 32
31083: PUSH
31084: LD_INT 33
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: IN
31091: IFFALSE 31107
// PlaceWeaponTurret ( b , weapon ) ;
31093: LD_VAR 0 8
31097: PPUSH
31098: LD_VAR 0 4
31102: PPUSH
31103: CALL_OW 431
// end ;
31107: LD_VAR 0 7
31111: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31112: LD_INT 0
31114: PPUSH
31115: PPUSH
31116: PPUSH
31117: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31118: LD_ADDR_VAR 0 4
31122: PUSH
31123: LD_INT 22
31125: PUSH
31126: LD_OWVAR 2
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: LD_INT 30
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 30
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PPUSH
31167: CALL_OW 69
31171: ST_TO_ADDR
// if not tmp then
31172: LD_VAR 0 4
31176: NOT
31177: IFFALSE 31181
// exit ;
31179: GO 31240
// for i in tmp do
31181: LD_ADDR_VAR 0 2
31185: PUSH
31186: LD_VAR 0 4
31190: PUSH
31191: FOR_IN
31192: IFFALSE 31238
// for j = 1 to 3 do
31194: LD_ADDR_VAR 0 3
31198: PUSH
31199: DOUBLE
31200: LD_INT 1
31202: DEC
31203: ST_TO_ADDR
31204: LD_INT 3
31206: PUSH
31207: FOR_TO
31208: IFFALSE 31234
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31210: LD_VAR 0 2
31214: PPUSH
31215: CALL_OW 274
31219: PPUSH
31220: LD_VAR 0 3
31224: PPUSH
31225: LD_INT 99999
31227: PPUSH
31228: CALL_OW 277
31232: GO 31207
31234: POP
31235: POP
31236: GO 31191
31238: POP
31239: POP
// end ;
31240: LD_VAR 0 1
31244: RET
// export function hHackSetLevel10 ; var i , j ; begin
31245: LD_INT 0
31247: PPUSH
31248: PPUSH
31249: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31250: LD_ADDR_VAR 0 2
31254: PUSH
31255: LD_INT 21
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PPUSH
31265: CALL_OW 69
31269: PUSH
31270: FOR_IN
31271: IFFALSE 31323
// if IsSelected ( i ) then
31273: LD_VAR 0 2
31277: PPUSH
31278: CALL_OW 306
31282: IFFALSE 31321
// begin for j := 1 to 4 do
31284: LD_ADDR_VAR 0 3
31288: PUSH
31289: DOUBLE
31290: LD_INT 1
31292: DEC
31293: ST_TO_ADDR
31294: LD_INT 4
31296: PUSH
31297: FOR_TO
31298: IFFALSE 31319
// SetSkill ( i , j , 10 ) ;
31300: LD_VAR 0 2
31304: PPUSH
31305: LD_VAR 0 3
31309: PPUSH
31310: LD_INT 10
31312: PPUSH
31313: CALL_OW 237
31317: GO 31297
31319: POP
31320: POP
// end ;
31321: GO 31270
31323: POP
31324: POP
// end ;
31325: LD_VAR 0 1
31329: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31330: LD_INT 0
31332: PPUSH
31333: PPUSH
31334: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31335: LD_ADDR_VAR 0 2
31339: PUSH
31340: LD_INT 22
31342: PUSH
31343: LD_OWVAR 2
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 21
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PPUSH
31366: CALL_OW 69
31370: PUSH
31371: FOR_IN
31372: IFFALSE 31413
// begin for j := 1 to 4 do
31374: LD_ADDR_VAR 0 3
31378: PUSH
31379: DOUBLE
31380: LD_INT 1
31382: DEC
31383: ST_TO_ADDR
31384: LD_INT 4
31386: PUSH
31387: FOR_TO
31388: IFFALSE 31409
// SetSkill ( i , j , 10 ) ;
31390: LD_VAR 0 2
31394: PPUSH
31395: LD_VAR 0 3
31399: PPUSH
31400: LD_INT 10
31402: PPUSH
31403: CALL_OW 237
31407: GO 31387
31409: POP
31410: POP
// end ;
31411: GO 31371
31413: POP
31414: POP
// end ;
31415: LD_VAR 0 1
31419: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31420: LD_INT 0
31422: PPUSH
// uc_side := your_side ;
31423: LD_ADDR_OWVAR 20
31427: PUSH
31428: LD_OWVAR 2
31432: ST_TO_ADDR
// uc_nation := nation ;
31433: LD_ADDR_OWVAR 21
31437: PUSH
31438: LD_VAR 0 1
31442: ST_TO_ADDR
// InitHc ;
31443: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31447: LD_INT 0
31449: PPUSH
31450: LD_VAR 0 2
31454: PPUSH
31455: LD_VAR 0 3
31459: PPUSH
31460: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31464: LD_VAR 0 4
31468: PPUSH
31469: LD_VAR 0 5
31473: PPUSH
31474: CALL_OW 428
31478: PUSH
31479: LD_INT 0
31481: EQUAL
31482: IFFALSE 31506
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31484: CALL_OW 44
31488: PPUSH
31489: LD_VAR 0 4
31493: PPUSH
31494: LD_VAR 0 5
31498: PPUSH
31499: LD_INT 1
31501: PPUSH
31502: CALL_OW 48
// end ;
31506: LD_VAR 0 6
31510: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31511: LD_INT 0
31513: PPUSH
31514: PPUSH
// uc_side := your_side ;
31515: LD_ADDR_OWVAR 20
31519: PUSH
31520: LD_OWVAR 2
31524: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31525: LD_VAR 0 1
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: LD_INT 4
31541: PUSH
31542: LD_INT 5
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: IN
31552: IFFALSE 31564
// uc_nation := nation_american else
31554: LD_ADDR_OWVAR 21
31558: PUSH
31559: LD_INT 1
31561: ST_TO_ADDR
31562: GO 31607
// if chassis in [ 11 , 12 , 13 , 14 ] then
31564: LD_VAR 0 1
31568: PUSH
31569: LD_INT 11
31571: PUSH
31572: LD_INT 12
31574: PUSH
31575: LD_INT 13
31577: PUSH
31578: LD_INT 14
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: IN
31587: IFFALSE 31599
// uc_nation := nation_arabian else
31589: LD_ADDR_OWVAR 21
31593: PUSH
31594: LD_INT 2
31596: ST_TO_ADDR
31597: GO 31607
// uc_nation := nation_russian ;
31599: LD_ADDR_OWVAR 21
31603: PUSH
31604: LD_INT 3
31606: ST_TO_ADDR
// vc_chassis := chassis ;
31607: LD_ADDR_OWVAR 37
31611: PUSH
31612: LD_VAR 0 1
31616: ST_TO_ADDR
// vc_engine := engine ;
31617: LD_ADDR_OWVAR 39
31621: PUSH
31622: LD_VAR 0 2
31626: ST_TO_ADDR
// vc_control := control ;
31627: LD_ADDR_OWVAR 38
31631: PUSH
31632: LD_VAR 0 3
31636: ST_TO_ADDR
// vc_weapon := weapon ;
31637: LD_ADDR_OWVAR 40
31641: PUSH
31642: LD_VAR 0 4
31646: ST_TO_ADDR
// un := CreateVehicle ;
31647: LD_ADDR_VAR 0 8
31651: PUSH
31652: CALL_OW 45
31656: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31657: LD_VAR 0 8
31661: PPUSH
31662: LD_INT 0
31664: PPUSH
31665: LD_INT 5
31667: PPUSH
31668: CALL_OW 12
31672: PPUSH
31673: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31677: LD_VAR 0 8
31681: PPUSH
31682: LD_VAR 0 5
31686: PPUSH
31687: LD_VAR 0 6
31691: PPUSH
31692: LD_INT 1
31694: PPUSH
31695: CALL_OW 48
// end ;
31699: LD_VAR 0 7
31703: RET
// export hInvincible ; every 1 do
31704: GO 31706
31706: DISABLE
// hInvincible := [ ] ;
31707: LD_ADDR_EXP 110
31711: PUSH
31712: EMPTY
31713: ST_TO_ADDR
31714: END
// every 10 do var i ;
31715: GO 31717
31717: DISABLE
31718: LD_INT 0
31720: PPUSH
// begin enable ;
31721: ENABLE
// if not hInvincible then
31722: LD_EXP 110
31726: NOT
31727: IFFALSE 31731
// exit ;
31729: GO 31775
// for i in hInvincible do
31731: LD_ADDR_VAR 0 1
31735: PUSH
31736: LD_EXP 110
31740: PUSH
31741: FOR_IN
31742: IFFALSE 31773
// if GetLives ( i ) < 1000 then
31744: LD_VAR 0 1
31748: PPUSH
31749: CALL_OW 256
31753: PUSH
31754: LD_INT 1000
31756: LESS
31757: IFFALSE 31771
// SetLives ( i , 1000 ) ;
31759: LD_VAR 0 1
31763: PPUSH
31764: LD_INT 1000
31766: PPUSH
31767: CALL_OW 234
31771: GO 31741
31773: POP
31774: POP
// end ;
31775: PPOPN 1
31777: END
// export function hHackInvincible ; var i ; begin
31778: LD_INT 0
31780: PPUSH
31781: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31782: LD_ADDR_VAR 0 2
31786: PUSH
31787: LD_INT 2
31789: PUSH
31790: LD_INT 21
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 21
31802: PUSH
31803: LD_INT 2
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: LIST
31814: PPUSH
31815: CALL_OW 69
31819: PUSH
31820: FOR_IN
31821: IFFALSE 31882
// if IsSelected ( i ) then
31823: LD_VAR 0 2
31827: PPUSH
31828: CALL_OW 306
31832: IFFALSE 31880
// begin if i in hInvincible then
31834: LD_VAR 0 2
31838: PUSH
31839: LD_EXP 110
31843: IN
31844: IFFALSE 31864
// hInvincible := hInvincible diff i else
31846: LD_ADDR_EXP 110
31850: PUSH
31851: LD_EXP 110
31855: PUSH
31856: LD_VAR 0 2
31860: DIFF
31861: ST_TO_ADDR
31862: GO 31880
// hInvincible := hInvincible union i ;
31864: LD_ADDR_EXP 110
31868: PUSH
31869: LD_EXP 110
31873: PUSH
31874: LD_VAR 0 2
31878: UNION
31879: ST_TO_ADDR
// end ;
31880: GO 31820
31882: POP
31883: POP
// end ;
31884: LD_VAR 0 1
31888: RET
// export function hHackInvisible ; var i , j ; begin
31889: LD_INT 0
31891: PPUSH
31892: PPUSH
31893: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31894: LD_ADDR_VAR 0 2
31898: PUSH
31899: LD_INT 21
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PPUSH
31909: CALL_OW 69
31913: PUSH
31914: FOR_IN
31915: IFFALSE 31939
// if IsSelected ( i ) then
31917: LD_VAR 0 2
31921: PPUSH
31922: CALL_OW 306
31926: IFFALSE 31937
// ComForceInvisible ( i ) ;
31928: LD_VAR 0 2
31932: PPUSH
31933: CALL_OW 496
31937: GO 31914
31939: POP
31940: POP
// end ;
31941: LD_VAR 0 1
31945: RET
// export function hHackChangeYourSide ; begin
31946: LD_INT 0
31948: PPUSH
// if your_side = 8 then
31949: LD_OWVAR 2
31953: PUSH
31954: LD_INT 8
31956: EQUAL
31957: IFFALSE 31969
// your_side := 0 else
31959: LD_ADDR_OWVAR 2
31963: PUSH
31964: LD_INT 0
31966: ST_TO_ADDR
31967: GO 31983
// your_side := your_side + 1 ;
31969: LD_ADDR_OWVAR 2
31973: PUSH
31974: LD_OWVAR 2
31978: PUSH
31979: LD_INT 1
31981: PLUS
31982: ST_TO_ADDR
// end ;
31983: LD_VAR 0 1
31987: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31988: LD_INT 0
31990: PPUSH
31991: PPUSH
31992: PPUSH
// for i in all_units do
31993: LD_ADDR_VAR 0 2
31997: PUSH
31998: LD_OWVAR 3
32002: PUSH
32003: FOR_IN
32004: IFFALSE 32082
// if IsSelected ( i ) then
32006: LD_VAR 0 2
32010: PPUSH
32011: CALL_OW 306
32015: IFFALSE 32080
// begin j := GetSide ( i ) ;
32017: LD_ADDR_VAR 0 3
32021: PUSH
32022: LD_VAR 0 2
32026: PPUSH
32027: CALL_OW 255
32031: ST_TO_ADDR
// if j = 8 then
32032: LD_VAR 0 3
32036: PUSH
32037: LD_INT 8
32039: EQUAL
32040: IFFALSE 32052
// j := 0 else
32042: LD_ADDR_VAR 0 3
32046: PUSH
32047: LD_INT 0
32049: ST_TO_ADDR
32050: GO 32066
// j := j + 1 ;
32052: LD_ADDR_VAR 0 3
32056: PUSH
32057: LD_VAR 0 3
32061: PUSH
32062: LD_INT 1
32064: PLUS
32065: ST_TO_ADDR
// SetSide ( i , j ) ;
32066: LD_VAR 0 2
32070: PPUSH
32071: LD_VAR 0 3
32075: PPUSH
32076: CALL_OW 235
// end ;
32080: GO 32003
32082: POP
32083: POP
// end ;
32084: LD_VAR 0 1
32088: RET
// export function hHackFog ; begin
32089: LD_INT 0
32091: PPUSH
// FogOff ( true ) ;
32092: LD_INT 1
32094: PPUSH
32095: CALL_OW 344
// end ;
32099: LD_VAR 0 1
32103: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32104: LD_INT 0
32106: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32107: LD_VAR 0 1
32111: PPUSH
32112: LD_VAR 0 2
32116: PPUSH
32117: LD_VAR 0 3
32121: PPUSH
32122: LD_INT 1
32124: PPUSH
32125: LD_INT 1
32127: PPUSH
32128: CALL_OW 483
// CenterOnXY ( x , y ) ;
32132: LD_VAR 0 2
32136: PPUSH
32137: LD_VAR 0 3
32141: PPUSH
32142: CALL_OW 84
// end ;
32146: LD_VAR 0 4
32150: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32151: LD_INT 0
32153: PPUSH
32154: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32155: LD_VAR 0 1
32159: NOT
32160: PUSH
32161: LD_VAR 0 2
32165: PPUSH
32166: LD_VAR 0 3
32170: PPUSH
32171: CALL_OW 488
32175: NOT
32176: OR
32177: PUSH
32178: LD_VAR 0 1
32182: PPUSH
32183: CALL_OW 266
32187: PUSH
32188: LD_INT 3
32190: NONEQUAL
32191: PUSH
32192: LD_VAR 0 1
32196: PPUSH
32197: CALL_OW 247
32201: PUSH
32202: LD_INT 1
32204: EQUAL
32205: NOT
32206: AND
32207: OR
32208: IFFALSE 32212
// exit ;
32210: GO 32361
// if GetType ( factory ) = unit_human then
32212: LD_VAR 0 1
32216: PPUSH
32217: CALL_OW 247
32221: PUSH
32222: LD_INT 1
32224: EQUAL
32225: IFFALSE 32242
// factory := IsInUnit ( factory ) ;
32227: LD_ADDR_VAR 0 1
32231: PUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: CALL_OW 310
32241: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32242: LD_VAR 0 1
32246: PPUSH
32247: CALL_OW 266
32251: PUSH
32252: LD_INT 3
32254: NONEQUAL
32255: IFFALSE 32259
// exit ;
32257: GO 32361
// if HexInfo ( x , y ) = factory then
32259: LD_VAR 0 2
32263: PPUSH
32264: LD_VAR 0 3
32268: PPUSH
32269: CALL_OW 428
32273: PUSH
32274: LD_VAR 0 1
32278: EQUAL
32279: IFFALSE 32306
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32281: LD_ADDR_EXP 111
32285: PUSH
32286: LD_EXP 111
32290: PPUSH
32291: LD_VAR 0 1
32295: PPUSH
32296: LD_INT 0
32298: PPUSH
32299: CALL_OW 1
32303: ST_TO_ADDR
32304: GO 32357
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32306: LD_ADDR_EXP 111
32310: PUSH
32311: LD_EXP 111
32315: PPUSH
32316: LD_VAR 0 1
32320: PPUSH
32321: LD_VAR 0 1
32325: PPUSH
32326: CALL_OW 255
32330: PUSH
32331: LD_VAR 0 1
32335: PUSH
32336: LD_VAR 0 2
32340: PUSH
32341: LD_VAR 0 3
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: PPUSH
32352: CALL_OW 1
32356: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32357: CALL 32366 0 0
// end ;
32361: LD_VAR 0 4
32365: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32366: LD_INT 0
32368: PPUSH
32369: PPUSH
32370: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32371: LD_STRING resetFactoryWaypoint();
32373: PPUSH
32374: CALL_OW 559
// if factoryWaypoints then
32378: LD_EXP 111
32382: IFFALSE 32508
// begin list := PrepareArray ( factoryWaypoints ) ;
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_EXP 111
32393: PPUSH
32394: CALL 79140 0 1
32398: ST_TO_ADDR
// for i := 1 to list do
32399: LD_ADDR_VAR 0 2
32403: PUSH
32404: DOUBLE
32405: LD_INT 1
32407: DEC
32408: ST_TO_ADDR
32409: LD_VAR 0 3
32413: PUSH
32414: FOR_TO
32415: IFFALSE 32506
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32417: LD_STRING setFactoryWaypointXY(
32419: PUSH
32420: LD_VAR 0 3
32424: PUSH
32425: LD_VAR 0 2
32429: ARRAY
32430: PUSH
32431: LD_INT 1
32433: ARRAY
32434: STR
32435: PUSH
32436: LD_STRING ,
32438: STR
32439: PUSH
32440: LD_VAR 0 3
32444: PUSH
32445: LD_VAR 0 2
32449: ARRAY
32450: PUSH
32451: LD_INT 2
32453: ARRAY
32454: STR
32455: PUSH
32456: LD_STRING ,
32458: STR
32459: PUSH
32460: LD_VAR 0 3
32464: PUSH
32465: LD_VAR 0 2
32469: ARRAY
32470: PUSH
32471: LD_INT 3
32473: ARRAY
32474: STR
32475: PUSH
32476: LD_STRING ,
32478: STR
32479: PUSH
32480: LD_VAR 0 3
32484: PUSH
32485: LD_VAR 0 2
32489: ARRAY
32490: PUSH
32491: LD_INT 4
32493: ARRAY
32494: STR
32495: PUSH
32496: LD_STRING )
32498: STR
32499: PPUSH
32500: CALL_OW 559
32504: GO 32414
32506: POP
32507: POP
// end ; end ;
32508: LD_VAR 0 1
32512: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32513: LD_INT 0
32515: PPUSH
// if HexInfo ( x , y ) = warehouse then
32516: LD_VAR 0 2
32520: PPUSH
32521: LD_VAR 0 3
32525: PPUSH
32526: CALL_OW 428
32530: PUSH
32531: LD_VAR 0 1
32535: EQUAL
32536: IFFALSE 32563
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32538: LD_ADDR_EXP 112
32542: PUSH
32543: LD_EXP 112
32547: PPUSH
32548: LD_VAR 0 1
32552: PPUSH
32553: LD_INT 0
32555: PPUSH
32556: CALL_OW 1
32560: ST_TO_ADDR
32561: GO 32614
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32563: LD_ADDR_EXP 112
32567: PUSH
32568: LD_EXP 112
32572: PPUSH
32573: LD_VAR 0 1
32577: PPUSH
32578: LD_VAR 0 1
32582: PPUSH
32583: CALL_OW 255
32587: PUSH
32588: LD_VAR 0 1
32592: PUSH
32593: LD_VAR 0 2
32597: PUSH
32598: LD_VAR 0 3
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: PPUSH
32609: CALL_OW 1
32613: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32614: CALL 32623 0 0
// end ;
32618: LD_VAR 0 4
32622: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32623: LD_INT 0
32625: PPUSH
32626: PPUSH
32627: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32628: LD_STRING resetWarehouseGatheringPoints();
32630: PPUSH
32631: CALL_OW 559
// if warehouseGatheringPoints then
32635: LD_EXP 112
32639: IFFALSE 32765
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32641: LD_ADDR_VAR 0 3
32645: PUSH
32646: LD_EXP 112
32650: PPUSH
32651: CALL 79140 0 1
32655: ST_TO_ADDR
// for i := 1 to list do
32656: LD_ADDR_VAR 0 2
32660: PUSH
32661: DOUBLE
32662: LD_INT 1
32664: DEC
32665: ST_TO_ADDR
32666: LD_VAR 0 3
32670: PUSH
32671: FOR_TO
32672: IFFALSE 32763
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32674: LD_STRING setWarehouseGatheringPointXY(
32676: PUSH
32677: LD_VAR 0 3
32681: PUSH
32682: LD_VAR 0 2
32686: ARRAY
32687: PUSH
32688: LD_INT 1
32690: ARRAY
32691: STR
32692: PUSH
32693: LD_STRING ,
32695: STR
32696: PUSH
32697: LD_VAR 0 3
32701: PUSH
32702: LD_VAR 0 2
32706: ARRAY
32707: PUSH
32708: LD_INT 2
32710: ARRAY
32711: STR
32712: PUSH
32713: LD_STRING ,
32715: STR
32716: PUSH
32717: LD_VAR 0 3
32721: PUSH
32722: LD_VAR 0 2
32726: ARRAY
32727: PUSH
32728: LD_INT 3
32730: ARRAY
32731: STR
32732: PUSH
32733: LD_STRING ,
32735: STR
32736: PUSH
32737: LD_VAR 0 3
32741: PUSH
32742: LD_VAR 0 2
32746: ARRAY
32747: PUSH
32748: LD_INT 4
32750: ARRAY
32751: STR
32752: PUSH
32753: LD_STRING )
32755: STR
32756: PPUSH
32757: CALL_OW 559
32761: GO 32671
32763: POP
32764: POP
// end ; end ;
32765: LD_VAR 0 1
32769: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32770: LD_EXP 112
32774: IFFALSE 33459
32776: GO 32778
32778: DISABLE
32779: LD_INT 0
32781: PPUSH
32782: PPUSH
32783: PPUSH
32784: PPUSH
32785: PPUSH
32786: PPUSH
32787: PPUSH
32788: PPUSH
32789: PPUSH
// begin enable ;
32790: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32791: LD_ADDR_VAR 0 3
32795: PUSH
32796: LD_EXP 112
32800: PPUSH
32801: CALL 79140 0 1
32805: ST_TO_ADDR
// if not list then
32806: LD_VAR 0 3
32810: NOT
32811: IFFALSE 32815
// exit ;
32813: GO 33459
// for i := 1 to list do
32815: LD_ADDR_VAR 0 1
32819: PUSH
32820: DOUBLE
32821: LD_INT 1
32823: DEC
32824: ST_TO_ADDR
32825: LD_VAR 0 3
32829: PUSH
32830: FOR_TO
32831: IFFALSE 33457
// begin depot := list [ i ] [ 2 ] ;
32833: LD_ADDR_VAR 0 8
32837: PUSH
32838: LD_VAR 0 3
32842: PUSH
32843: LD_VAR 0 1
32847: ARRAY
32848: PUSH
32849: LD_INT 2
32851: ARRAY
32852: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32853: LD_ADDR_VAR 0 5
32857: PUSH
32858: LD_VAR 0 3
32862: PUSH
32863: LD_VAR 0 1
32867: ARRAY
32868: PUSH
32869: LD_INT 1
32871: ARRAY
32872: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32873: LD_VAR 0 8
32877: PPUSH
32878: CALL_OW 301
32882: PUSH
32883: LD_VAR 0 5
32887: PUSH
32888: LD_VAR 0 8
32892: PPUSH
32893: CALL_OW 255
32897: NONEQUAL
32898: OR
32899: IFFALSE 32928
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32901: LD_ADDR_EXP 112
32905: PUSH
32906: LD_EXP 112
32910: PPUSH
32911: LD_VAR 0 8
32915: PPUSH
32916: LD_INT 0
32918: PPUSH
32919: CALL_OW 1
32923: ST_TO_ADDR
// exit ;
32924: POP
32925: POP
32926: GO 33459
// end ; x := list [ i ] [ 3 ] ;
32928: LD_ADDR_VAR 0 6
32932: PUSH
32933: LD_VAR 0 3
32937: PUSH
32938: LD_VAR 0 1
32942: ARRAY
32943: PUSH
32944: LD_INT 3
32946: ARRAY
32947: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32948: LD_ADDR_VAR 0 7
32952: PUSH
32953: LD_VAR 0 3
32957: PUSH
32958: LD_VAR 0 1
32962: ARRAY
32963: PUSH
32964: LD_INT 4
32966: ARRAY
32967: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32968: LD_ADDR_VAR 0 9
32972: PUSH
32973: LD_VAR 0 6
32977: PPUSH
32978: LD_VAR 0 7
32982: PPUSH
32983: LD_INT 16
32985: PPUSH
32986: CALL 77728 0 3
32990: ST_TO_ADDR
// if not cratesNearbyPoint then
32991: LD_VAR 0 9
32995: NOT
32996: IFFALSE 33002
// exit ;
32998: POP
32999: POP
33000: GO 33459
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33002: LD_ADDR_VAR 0 4
33006: PUSH
33007: LD_INT 22
33009: PUSH
33010: LD_VAR 0 5
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 3
33021: PUSH
33022: LD_INT 60
33024: PUSH
33025: EMPTY
33026: LIST
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 91
33034: PUSH
33035: LD_VAR 0 8
33039: PUSH
33040: LD_INT 6
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 25
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 25
33063: PUSH
33064: LD_INT 16
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: LIST
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: PPUSH
33082: CALL_OW 69
33086: PUSH
33087: LD_VAR 0 8
33091: PPUSH
33092: CALL_OW 313
33096: PPUSH
33097: LD_INT 3
33099: PUSH
33100: LD_INT 60
33102: PUSH
33103: EMPTY
33104: LIST
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 25
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 25
33125: PUSH
33126: LD_INT 16
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PPUSH
33142: CALL_OW 72
33146: UNION
33147: ST_TO_ADDR
// if tmp then
33148: LD_VAR 0 4
33152: IFFALSE 33232
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33154: LD_ADDR_VAR 0 4
33158: PUSH
33159: LD_VAR 0 4
33163: PPUSH
33164: LD_INT 3
33166: PPUSH
33167: CALL 75697 0 2
33171: ST_TO_ADDR
// for j in tmp do
33172: LD_ADDR_VAR 0 2
33176: PUSH
33177: LD_VAR 0 4
33181: PUSH
33182: FOR_IN
33183: IFFALSE 33226
// begin if IsInUnit ( j ) then
33185: LD_VAR 0 2
33189: PPUSH
33190: CALL_OW 310
33194: IFFALSE 33205
// ComExit ( j ) ;
33196: LD_VAR 0 2
33200: PPUSH
33201: CALL 75780 0 1
// AddComCollect ( j , x , y ) ;
33205: LD_VAR 0 2
33209: PPUSH
33210: LD_VAR 0 6
33214: PPUSH
33215: LD_VAR 0 7
33219: PPUSH
33220: CALL_OW 177
// end ;
33224: GO 33182
33226: POP
33227: POP
// exit ;
33228: POP
33229: POP
33230: GO 33459
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33232: LD_ADDR_VAR 0 4
33236: PUSH
33237: LD_INT 22
33239: PUSH
33240: LD_VAR 0 5
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 91
33251: PUSH
33252: LD_VAR 0 8
33256: PUSH
33257: LD_INT 8
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: LD_INT 34
33270: PUSH
33271: LD_INT 12
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 34
33280: PUSH
33281: LD_INT 51
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 34
33290: PUSH
33291: LD_INT 32
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 34
33300: PUSH
33301: LD_INT 89
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: PPUSH
33320: CALL_OW 69
33324: ST_TO_ADDR
// if tmp then
33325: LD_VAR 0 4
33329: IFFALSE 33455
// begin for j in tmp do
33331: LD_ADDR_VAR 0 2
33335: PUSH
33336: LD_VAR 0 4
33340: PUSH
33341: FOR_IN
33342: IFFALSE 33453
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33344: LD_VAR 0 2
33348: PPUSH
33349: CALL_OW 262
33353: PUSH
33354: LD_INT 3
33356: EQUAL
33357: PUSH
33358: LD_VAR 0 2
33362: PPUSH
33363: CALL_OW 261
33367: PUSH
33368: LD_INT 20
33370: GREATER
33371: OR
33372: PUSH
33373: LD_VAR 0 2
33377: PPUSH
33378: CALL_OW 314
33382: NOT
33383: AND
33384: PUSH
33385: LD_VAR 0 2
33389: PPUSH
33390: CALL_OW 263
33394: PUSH
33395: LD_INT 1
33397: NONEQUAL
33398: PUSH
33399: LD_VAR 0 2
33403: PPUSH
33404: CALL_OW 311
33408: OR
33409: AND
33410: IFFALSE 33451
// begin ComCollect ( j , x , y ) ;
33412: LD_VAR 0 2
33416: PPUSH
33417: LD_VAR 0 6
33421: PPUSH
33422: LD_VAR 0 7
33426: PPUSH
33427: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33431: LD_VAR 0 2
33435: PPUSH
33436: LD_VAR 0 8
33440: PPUSH
33441: CALL_OW 172
// exit ;
33445: POP
33446: POP
33447: POP
33448: POP
33449: GO 33459
// end ;
33451: GO 33341
33453: POP
33454: POP
// end ; end ;
33455: GO 32830
33457: POP
33458: POP
// end ; end_of_file
33459: PPOPN 9
33461: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33462: LD_VAR 0 1
33466: PUSH
33467: LD_INT 200
33469: DOUBLE
33470: GREATEREQUAL
33471: IFFALSE 33479
33473: LD_INT 299
33475: DOUBLE
33476: LESSEQUAL
33477: IFTRUE 33481
33479: GO 33513
33481: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33482: LD_VAR 0 1
33486: PPUSH
33487: LD_VAR 0 2
33491: PPUSH
33492: LD_VAR 0 3
33496: PPUSH
33497: LD_VAR 0 4
33501: PPUSH
33502: LD_VAR 0 5
33506: PPUSH
33507: CALL 34001 0 5
33511: GO 33590
33513: LD_INT 300
33515: DOUBLE
33516: GREATEREQUAL
33517: IFFALSE 33525
33519: LD_INT 399
33521: DOUBLE
33522: LESSEQUAL
33523: IFTRUE 33527
33525: GO 33589
33527: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33528: LD_VAR 0 1
33532: PPUSH
33533: LD_VAR 0 2
33537: PPUSH
33538: LD_VAR 0 3
33542: PPUSH
33543: LD_VAR 0 4
33547: PPUSH
33548: LD_VAR 0 5
33552: PPUSH
33553: LD_VAR 0 6
33557: PPUSH
33558: LD_VAR 0 7
33562: PPUSH
33563: LD_VAR 0 8
33567: PPUSH
33568: LD_VAR 0 9
33572: PPUSH
33573: LD_VAR 0 10
33577: PPUSH
33578: LD_VAR 0 11
33582: PPUSH
33583: CALL 30171 0 11
33587: GO 33590
33589: POP
// end ;
33590: PPOPN 11
33592: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33593: LD_VAR 0 1
33597: PPUSH
33598: LD_VAR 0 2
33602: PPUSH
33603: LD_VAR 0 3
33607: PPUSH
33608: LD_VAR 0 4
33612: PPUSH
33613: LD_VAR 0 5
33617: PPUSH
33618: CALL 33737 0 5
// end ; end_of_file
33622: PPOPN 5
33624: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33625: LD_INT 0
33627: PPUSH
33628: PPUSH
33629: PPUSH
33630: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33631: LD_VAR 0 1
33635: PPUSH
33636: CALL_OW 264
33640: PUSH
33641: LD_INT 91
33643: EQUAL
33644: IFFALSE 33716
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33646: LD_INT 68
33648: PPUSH
33649: LD_VAR 0 1
33653: PPUSH
33654: CALL_OW 255
33658: PPUSH
33659: CALL_OW 321
33663: PUSH
33664: LD_INT 2
33666: EQUAL
33667: IFFALSE 33679
// eff := 70 else
33669: LD_ADDR_VAR 0 4
33673: PUSH
33674: LD_INT 70
33676: ST_TO_ADDR
33677: GO 33687
// eff := 30 ;
33679: LD_ADDR_VAR 0 4
33683: PUSH
33684: LD_INT 30
33686: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33687: LD_VAR 0 1
33691: PPUSH
33692: CALL_OW 250
33696: PPUSH
33697: LD_VAR 0 1
33701: PPUSH
33702: CALL_OW 251
33706: PPUSH
33707: LD_VAR 0 4
33711: PPUSH
33712: CALL_OW 495
// end ; end ;
33716: LD_VAR 0 2
33720: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33721: LD_INT 0
33723: PPUSH
// end ;
33724: LD_VAR 0 4
33728: RET
// export function SOS_Command ( cmd ) ; begin
33729: LD_INT 0
33731: PPUSH
// end ;
33732: LD_VAR 0 2
33736: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33737: LD_INT 0
33739: PPUSH
// end ;
33740: LD_VAR 0 6
33744: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33745: LD_INT 0
33747: PPUSH
33748: PPUSH
// if not vehicle or not factory then
33749: LD_VAR 0 1
33753: NOT
33754: PUSH
33755: LD_VAR 0 2
33759: NOT
33760: OR
33761: IFFALSE 33765
// exit ;
33763: GO 33996
// if factoryWaypoints >= factory then
33765: LD_EXP 111
33769: PUSH
33770: LD_VAR 0 2
33774: GREATEREQUAL
33775: IFFALSE 33996
// if factoryWaypoints [ factory ] then
33777: LD_EXP 111
33781: PUSH
33782: LD_VAR 0 2
33786: ARRAY
33787: IFFALSE 33996
// begin if GetControl ( vehicle ) = control_manual then
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 263
33798: PUSH
33799: LD_INT 1
33801: EQUAL
33802: IFFALSE 33883
// begin driver := IsDrivenBy ( vehicle ) ;
33804: LD_ADDR_VAR 0 4
33808: PUSH
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 311
33818: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33819: LD_VAR 0 4
33823: PPUSH
33824: LD_EXP 111
33828: PUSH
33829: LD_VAR 0 2
33833: ARRAY
33834: PUSH
33835: LD_INT 3
33837: ARRAY
33838: PPUSH
33839: LD_EXP 111
33843: PUSH
33844: LD_VAR 0 2
33848: ARRAY
33849: PUSH
33850: LD_INT 4
33852: ARRAY
33853: PPUSH
33854: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33858: LD_VAR 0 4
33862: PPUSH
33863: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33867: LD_VAR 0 4
33871: PPUSH
33872: LD_VAR 0 2
33876: PPUSH
33877: CALL_OW 180
// end else
33881: GO 33996
// if GetControl ( vehicle ) = control_remote then
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 263
33892: PUSH
33893: LD_INT 2
33895: EQUAL
33896: IFFALSE 33957
// begin wait ( 0 0$2 ) ;
33898: LD_INT 70
33900: PPUSH
33901: CALL_OW 67
// if Connect ( vehicle ) then
33905: LD_VAR 0 1
33909: PPUSH
33910: CALL 46020 0 1
33914: IFFALSE 33955
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33916: LD_VAR 0 1
33920: PPUSH
33921: LD_EXP 111
33925: PUSH
33926: LD_VAR 0 2
33930: ARRAY
33931: PUSH
33932: LD_INT 3
33934: ARRAY
33935: PPUSH
33936: LD_EXP 111
33940: PUSH
33941: LD_VAR 0 2
33945: ARRAY
33946: PUSH
33947: LD_INT 4
33949: ARRAY
33950: PPUSH
33951: CALL_OW 171
// end else
33955: GO 33996
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33957: LD_VAR 0 1
33961: PPUSH
33962: LD_EXP 111
33966: PUSH
33967: LD_VAR 0 2
33971: ARRAY
33972: PUSH
33973: LD_INT 3
33975: ARRAY
33976: PPUSH
33977: LD_EXP 111
33981: PUSH
33982: LD_VAR 0 2
33986: ARRAY
33987: PUSH
33988: LD_INT 4
33990: ARRAY
33991: PPUSH
33992: CALL_OW 171
// end ; end ;
33996: LD_VAR 0 3
34000: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34001: LD_INT 0
34003: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34004: LD_VAR 0 1
34008: PUSH
34009: LD_INT 250
34011: EQUAL
34012: PUSH
34013: LD_VAR 0 2
34017: PPUSH
34018: CALL_OW 264
34022: PUSH
34023: LD_INT 81
34025: EQUAL
34026: AND
34027: IFFALSE 34048
// MinerPlaceMine ( unit , x , y ) ;
34029: LD_VAR 0 2
34033: PPUSH
34034: LD_VAR 0 4
34038: PPUSH
34039: LD_VAR 0 5
34043: PPUSH
34044: CALL 36433 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34048: LD_VAR 0 1
34052: PUSH
34053: LD_INT 251
34055: EQUAL
34056: PUSH
34057: LD_VAR 0 2
34061: PPUSH
34062: CALL_OW 264
34066: PUSH
34067: LD_INT 81
34069: EQUAL
34070: AND
34071: IFFALSE 34092
// MinerDetonateMine ( unit , x , y ) ;
34073: LD_VAR 0 2
34077: PPUSH
34078: LD_VAR 0 4
34082: PPUSH
34083: LD_VAR 0 5
34087: PPUSH
34088: CALL 36708 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34092: LD_VAR 0 1
34096: PUSH
34097: LD_INT 252
34099: EQUAL
34100: PUSH
34101: LD_VAR 0 2
34105: PPUSH
34106: CALL_OW 264
34110: PUSH
34111: LD_INT 81
34113: EQUAL
34114: AND
34115: IFFALSE 34136
// MinerCreateMinefield ( unit , x , y ) ;
34117: LD_VAR 0 2
34121: PPUSH
34122: LD_VAR 0 4
34126: PPUSH
34127: LD_VAR 0 5
34131: PPUSH
34132: CALL 37125 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34136: LD_VAR 0 1
34140: PUSH
34141: LD_INT 253
34143: EQUAL
34144: PUSH
34145: LD_VAR 0 2
34149: PPUSH
34150: CALL_OW 257
34154: PUSH
34155: LD_INT 5
34157: EQUAL
34158: AND
34159: IFFALSE 34180
// ComBinocular ( unit , x , y ) ;
34161: LD_VAR 0 2
34165: PPUSH
34166: LD_VAR 0 4
34170: PPUSH
34171: LD_VAR 0 5
34175: PPUSH
34176: CALL 37494 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34180: LD_VAR 0 1
34184: PUSH
34185: LD_INT 254
34187: EQUAL
34188: PUSH
34189: LD_VAR 0 2
34193: PPUSH
34194: CALL_OW 264
34198: PUSH
34199: LD_INT 99
34201: EQUAL
34202: AND
34203: PUSH
34204: LD_VAR 0 3
34208: PPUSH
34209: CALL_OW 263
34213: PUSH
34214: LD_INT 3
34216: EQUAL
34217: AND
34218: IFFALSE 34234
// HackDestroyVehicle ( unit , selectedUnit ) ;
34220: LD_VAR 0 2
34224: PPUSH
34225: LD_VAR 0 3
34229: PPUSH
34230: CALL 35797 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34234: LD_VAR 0 1
34238: PUSH
34239: LD_INT 255
34241: EQUAL
34242: PUSH
34243: LD_VAR 0 2
34247: PPUSH
34248: CALL_OW 264
34252: PUSH
34253: LD_INT 14
34255: PUSH
34256: LD_INT 53
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: IN
34263: AND
34264: PUSH
34265: LD_VAR 0 4
34269: PPUSH
34270: LD_VAR 0 5
34274: PPUSH
34275: CALL_OW 488
34279: AND
34280: IFFALSE 34304
// CutTreeXYR ( unit , x , y , 12 ) ;
34282: LD_VAR 0 2
34286: PPUSH
34287: LD_VAR 0 4
34291: PPUSH
34292: LD_VAR 0 5
34296: PPUSH
34297: LD_INT 12
34299: PPUSH
34300: CALL 34367 0 4
// if cmd = 256 then
34304: LD_VAR 0 1
34308: PUSH
34309: LD_INT 256
34311: EQUAL
34312: IFFALSE 34333
// SetFactoryWaypoint ( unit , x , y ) ;
34314: LD_VAR 0 2
34318: PPUSH
34319: LD_VAR 0 4
34323: PPUSH
34324: LD_VAR 0 5
34328: PPUSH
34329: CALL 32151 0 3
// if cmd = 257 then
34333: LD_VAR 0 1
34337: PUSH
34338: LD_INT 257
34340: EQUAL
34341: IFFALSE 34362
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34343: LD_VAR 0 2
34347: PPUSH
34348: LD_VAR 0 4
34352: PPUSH
34353: LD_VAR 0 5
34357: PPUSH
34358: CALL 32513 0 3
// end ;
34362: LD_VAR 0 6
34366: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34367: LD_INT 0
34369: PPUSH
34370: PPUSH
34371: PPUSH
34372: PPUSH
34373: PPUSH
34374: PPUSH
34375: PPUSH
34376: PPUSH
34377: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34378: LD_VAR 0 1
34382: NOT
34383: PUSH
34384: LD_VAR 0 2
34388: PPUSH
34389: LD_VAR 0 3
34393: PPUSH
34394: CALL_OW 488
34398: NOT
34399: OR
34400: PUSH
34401: LD_VAR 0 4
34405: NOT
34406: OR
34407: IFFALSE 34411
// exit ;
34409: GO 34751
// list := [ ] ;
34411: LD_ADDR_VAR 0 13
34415: PUSH
34416: EMPTY
34417: ST_TO_ADDR
// if x - r < 0 then
34418: LD_VAR 0 2
34422: PUSH
34423: LD_VAR 0 4
34427: MINUS
34428: PUSH
34429: LD_INT 0
34431: LESS
34432: IFFALSE 34444
// min_x := 0 else
34434: LD_ADDR_VAR 0 7
34438: PUSH
34439: LD_INT 0
34441: ST_TO_ADDR
34442: GO 34460
// min_x := x - r ;
34444: LD_ADDR_VAR 0 7
34448: PUSH
34449: LD_VAR 0 2
34453: PUSH
34454: LD_VAR 0 4
34458: MINUS
34459: ST_TO_ADDR
// if y - r < 0 then
34460: LD_VAR 0 3
34464: PUSH
34465: LD_VAR 0 4
34469: MINUS
34470: PUSH
34471: LD_INT 0
34473: LESS
34474: IFFALSE 34486
// min_y := 0 else
34476: LD_ADDR_VAR 0 8
34480: PUSH
34481: LD_INT 0
34483: ST_TO_ADDR
34484: GO 34502
// min_y := y - r ;
34486: LD_ADDR_VAR 0 8
34490: PUSH
34491: LD_VAR 0 3
34495: PUSH
34496: LD_VAR 0 4
34500: MINUS
34501: ST_TO_ADDR
// max_x := x + r ;
34502: LD_ADDR_VAR 0 9
34506: PUSH
34507: LD_VAR 0 2
34511: PUSH
34512: LD_VAR 0 4
34516: PLUS
34517: ST_TO_ADDR
// max_y := y + r ;
34518: LD_ADDR_VAR 0 10
34522: PUSH
34523: LD_VAR 0 3
34527: PUSH
34528: LD_VAR 0 4
34532: PLUS
34533: ST_TO_ADDR
// for _x = min_x to max_x do
34534: LD_ADDR_VAR 0 11
34538: PUSH
34539: DOUBLE
34540: LD_VAR 0 7
34544: DEC
34545: ST_TO_ADDR
34546: LD_VAR 0 9
34550: PUSH
34551: FOR_TO
34552: IFFALSE 34669
// for _y = min_y to max_y do
34554: LD_ADDR_VAR 0 12
34558: PUSH
34559: DOUBLE
34560: LD_VAR 0 8
34564: DEC
34565: ST_TO_ADDR
34566: LD_VAR 0 10
34570: PUSH
34571: FOR_TO
34572: IFFALSE 34665
// begin if not ValidHex ( _x , _y ) then
34574: LD_VAR 0 11
34578: PPUSH
34579: LD_VAR 0 12
34583: PPUSH
34584: CALL_OW 488
34588: NOT
34589: IFFALSE 34593
// continue ;
34591: GO 34571
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34593: LD_VAR 0 11
34597: PPUSH
34598: LD_VAR 0 12
34602: PPUSH
34603: CALL_OW 351
34607: PUSH
34608: LD_VAR 0 11
34612: PPUSH
34613: LD_VAR 0 12
34617: PPUSH
34618: CALL_OW 554
34622: AND
34623: IFFALSE 34663
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34625: LD_ADDR_VAR 0 13
34629: PUSH
34630: LD_VAR 0 13
34634: PPUSH
34635: LD_VAR 0 13
34639: PUSH
34640: LD_INT 1
34642: PLUS
34643: PPUSH
34644: LD_VAR 0 11
34648: PUSH
34649: LD_VAR 0 12
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: CALL_OW 2
34662: ST_TO_ADDR
// end ;
34663: GO 34571
34665: POP
34666: POP
34667: GO 34551
34669: POP
34670: POP
// if not list then
34671: LD_VAR 0 13
34675: NOT
34676: IFFALSE 34680
// exit ;
34678: GO 34751
// for i in list do
34680: LD_ADDR_VAR 0 6
34684: PUSH
34685: LD_VAR 0 13
34689: PUSH
34690: FOR_IN
34691: IFFALSE 34749
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34693: LD_VAR 0 1
34697: PPUSH
34698: LD_STRING M
34700: PUSH
34701: LD_VAR 0 6
34705: PUSH
34706: LD_INT 1
34708: ARRAY
34709: PUSH
34710: LD_VAR 0 6
34714: PUSH
34715: LD_INT 2
34717: ARRAY
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: PUSH
34740: EMPTY
34741: LIST
34742: PPUSH
34743: CALL_OW 447
34747: GO 34690
34749: POP
34750: POP
// end ;
34751: LD_VAR 0 5
34755: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34756: LD_EXP 114
34760: NOT
34761: IFFALSE 34811
34763: GO 34765
34765: DISABLE
// begin initHack := true ;
34766: LD_ADDR_EXP 114
34770: PUSH
34771: LD_INT 1
34773: ST_TO_ADDR
// hackTanks := [ ] ;
34774: LD_ADDR_EXP 115
34778: PUSH
34779: EMPTY
34780: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34781: LD_ADDR_EXP 116
34785: PUSH
34786: EMPTY
34787: ST_TO_ADDR
// hackLimit := 3 ;
34788: LD_ADDR_EXP 117
34792: PUSH
34793: LD_INT 3
34795: ST_TO_ADDR
// hackDist := 12 ;
34796: LD_ADDR_EXP 118
34800: PUSH
34801: LD_INT 12
34803: ST_TO_ADDR
// hackCounter := [ ] ;
34804: LD_ADDR_EXP 119
34808: PUSH
34809: EMPTY
34810: ST_TO_ADDR
// end ;
34811: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34812: LD_EXP 114
34816: PUSH
34817: LD_INT 34
34819: PUSH
34820: LD_INT 99
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PPUSH
34827: CALL_OW 69
34831: AND
34832: IFFALSE 35085
34834: GO 34836
34836: DISABLE
34837: LD_INT 0
34839: PPUSH
34840: PPUSH
// begin enable ;
34841: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34842: LD_ADDR_VAR 0 1
34846: PUSH
34847: LD_INT 34
34849: PUSH
34850: LD_INT 99
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PPUSH
34857: CALL_OW 69
34861: PUSH
34862: FOR_IN
34863: IFFALSE 35083
// begin if not i in hackTanks then
34865: LD_VAR 0 1
34869: PUSH
34870: LD_EXP 115
34874: IN
34875: NOT
34876: IFFALSE 34959
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34878: LD_ADDR_EXP 115
34882: PUSH
34883: LD_EXP 115
34887: PPUSH
34888: LD_EXP 115
34892: PUSH
34893: LD_INT 1
34895: PLUS
34896: PPUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: CALL_OW 1
34906: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34907: LD_ADDR_EXP 116
34911: PUSH
34912: LD_EXP 116
34916: PPUSH
34917: LD_EXP 116
34921: PUSH
34922: LD_INT 1
34924: PLUS
34925: PPUSH
34926: EMPTY
34927: PPUSH
34928: CALL_OW 1
34932: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34933: LD_ADDR_EXP 119
34937: PUSH
34938: LD_EXP 119
34942: PPUSH
34943: LD_EXP 119
34947: PUSH
34948: LD_INT 1
34950: PLUS
34951: PPUSH
34952: EMPTY
34953: PPUSH
34954: CALL_OW 1
34958: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34959: LD_VAR 0 1
34963: PPUSH
34964: CALL_OW 302
34968: NOT
34969: IFFALSE 34982
// begin HackUnlinkAll ( i ) ;
34971: LD_VAR 0 1
34975: PPUSH
34976: CALL 35088 0 1
// continue ;
34980: GO 34862
// end ; HackCheckCapturedStatus ( i ) ;
34982: LD_VAR 0 1
34986: PPUSH
34987: CALL 35531 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34991: LD_ADDR_VAR 0 2
34995: PUSH
34996: LD_INT 81
34998: PUSH
34999: LD_VAR 0 1
35003: PPUSH
35004: CALL_OW 255
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 33
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 91
35025: PUSH
35026: LD_VAR 0 1
35030: PUSH
35031: LD_EXP 118
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 50
35043: PUSH
35044: EMPTY
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: PPUSH
35053: CALL_OW 69
35057: ST_TO_ADDR
// if not tmp then
35058: LD_VAR 0 2
35062: NOT
35063: IFFALSE 35067
// continue ;
35065: GO 34862
// HackLink ( i , tmp ) ;
35067: LD_VAR 0 1
35071: PPUSH
35072: LD_VAR 0 2
35076: PPUSH
35077: CALL 35224 0 2
// end ;
35081: GO 34862
35083: POP
35084: POP
// end ;
35085: PPOPN 2
35087: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35088: LD_INT 0
35090: PPUSH
35091: PPUSH
35092: PPUSH
// if not hack in hackTanks then
35093: LD_VAR 0 1
35097: PUSH
35098: LD_EXP 115
35102: IN
35103: NOT
35104: IFFALSE 35108
// exit ;
35106: GO 35219
// index := GetElementIndex ( hackTanks , hack ) ;
35108: LD_ADDR_VAR 0 4
35112: PUSH
35113: LD_EXP 115
35117: PPUSH
35118: LD_VAR 0 1
35122: PPUSH
35123: CALL 42836 0 2
35127: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35128: LD_EXP 116
35132: PUSH
35133: LD_VAR 0 4
35137: ARRAY
35138: IFFALSE 35219
// begin for i in hackTanksCaptured [ index ] do
35140: LD_ADDR_VAR 0 3
35144: PUSH
35145: LD_EXP 116
35149: PUSH
35150: LD_VAR 0 4
35154: ARRAY
35155: PUSH
35156: FOR_IN
35157: IFFALSE 35183
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35159: LD_VAR 0 3
35163: PUSH
35164: LD_INT 1
35166: ARRAY
35167: PPUSH
35168: LD_VAR 0 3
35172: PUSH
35173: LD_INT 2
35175: ARRAY
35176: PPUSH
35177: CALL_OW 235
35181: GO 35156
35183: POP
35184: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35185: LD_ADDR_EXP 116
35189: PUSH
35190: LD_EXP 116
35194: PPUSH
35195: LD_VAR 0 4
35199: PPUSH
35200: EMPTY
35201: PPUSH
35202: CALL_OW 1
35206: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35207: LD_VAR 0 1
35211: PPUSH
35212: LD_INT 0
35214: PPUSH
35215: CALL_OW 505
// end ; end ;
35219: LD_VAR 0 2
35223: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35224: LD_INT 0
35226: PPUSH
35227: PPUSH
35228: PPUSH
// if not hack in hackTanks or not vehicles then
35229: LD_VAR 0 1
35233: PUSH
35234: LD_EXP 115
35238: IN
35239: NOT
35240: PUSH
35241: LD_VAR 0 2
35245: NOT
35246: OR
35247: IFFALSE 35251
// exit ;
35249: GO 35526
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35251: LD_ADDR_VAR 0 2
35255: PUSH
35256: LD_VAR 0 1
35260: PPUSH
35261: LD_VAR 0 2
35265: PPUSH
35266: LD_INT 1
35268: PPUSH
35269: LD_INT 1
35271: PPUSH
35272: CALL 43486 0 4
35276: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35277: LD_ADDR_VAR 0 5
35281: PUSH
35282: LD_EXP 115
35286: PPUSH
35287: LD_VAR 0 1
35291: PPUSH
35292: CALL 42836 0 2
35296: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35297: LD_EXP 116
35301: PUSH
35302: LD_VAR 0 5
35306: ARRAY
35307: PUSH
35308: LD_EXP 117
35312: LESS
35313: IFFALSE 35502
// begin for i := 1 to vehicles do
35315: LD_ADDR_VAR 0 4
35319: PUSH
35320: DOUBLE
35321: LD_INT 1
35323: DEC
35324: ST_TO_ADDR
35325: LD_VAR 0 2
35329: PUSH
35330: FOR_TO
35331: IFFALSE 35500
// begin if hackTanksCaptured [ index ] = hackLimit then
35333: LD_EXP 116
35337: PUSH
35338: LD_VAR 0 5
35342: ARRAY
35343: PUSH
35344: LD_EXP 117
35348: EQUAL
35349: IFFALSE 35353
// break ;
35351: GO 35500
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35353: LD_ADDR_EXP 119
35357: PUSH
35358: LD_EXP 119
35362: PPUSH
35363: LD_VAR 0 5
35367: PPUSH
35368: LD_EXP 119
35372: PUSH
35373: LD_VAR 0 5
35377: ARRAY
35378: PUSH
35379: LD_INT 1
35381: PLUS
35382: PPUSH
35383: CALL_OW 1
35387: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35388: LD_ADDR_EXP 116
35392: PUSH
35393: LD_EXP 116
35397: PPUSH
35398: LD_VAR 0 5
35402: PUSH
35403: LD_EXP 116
35407: PUSH
35408: LD_VAR 0 5
35412: ARRAY
35413: PUSH
35414: LD_INT 1
35416: PLUS
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PPUSH
35422: LD_VAR 0 2
35426: PUSH
35427: LD_VAR 0 4
35431: ARRAY
35432: PUSH
35433: LD_VAR 0 2
35437: PUSH
35438: LD_VAR 0 4
35442: ARRAY
35443: PPUSH
35444: CALL_OW 255
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PPUSH
35453: CALL 43051 0 3
35457: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35458: LD_VAR 0 2
35462: PUSH
35463: LD_VAR 0 4
35467: ARRAY
35468: PPUSH
35469: LD_VAR 0 1
35473: PPUSH
35474: CALL_OW 255
35478: PPUSH
35479: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35483: LD_VAR 0 2
35487: PUSH
35488: LD_VAR 0 4
35492: ARRAY
35493: PPUSH
35494: CALL_OW 141
// end ;
35498: GO 35330
35500: POP
35501: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35502: LD_VAR 0 1
35506: PPUSH
35507: LD_EXP 116
35511: PUSH
35512: LD_VAR 0 5
35516: ARRAY
35517: PUSH
35518: LD_INT 0
35520: PLUS
35521: PPUSH
35522: CALL_OW 505
// end ;
35526: LD_VAR 0 3
35530: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35531: LD_INT 0
35533: PPUSH
35534: PPUSH
35535: PPUSH
35536: PPUSH
// if not hack in hackTanks then
35537: LD_VAR 0 1
35541: PUSH
35542: LD_EXP 115
35546: IN
35547: NOT
35548: IFFALSE 35552
// exit ;
35550: GO 35792
// index := GetElementIndex ( hackTanks , hack ) ;
35552: LD_ADDR_VAR 0 4
35556: PUSH
35557: LD_EXP 115
35561: PPUSH
35562: LD_VAR 0 1
35566: PPUSH
35567: CALL 42836 0 2
35571: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35572: LD_ADDR_VAR 0 3
35576: PUSH
35577: DOUBLE
35578: LD_EXP 116
35582: PUSH
35583: LD_VAR 0 4
35587: ARRAY
35588: INC
35589: ST_TO_ADDR
35590: LD_INT 1
35592: PUSH
35593: FOR_DOWNTO
35594: IFFALSE 35766
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35596: LD_ADDR_VAR 0 5
35600: PUSH
35601: LD_EXP 116
35605: PUSH
35606: LD_VAR 0 4
35610: ARRAY
35611: PUSH
35612: LD_VAR 0 3
35616: ARRAY
35617: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35618: LD_VAR 0 5
35622: PUSH
35623: LD_INT 1
35625: ARRAY
35626: PPUSH
35627: CALL_OW 302
35631: NOT
35632: PUSH
35633: LD_VAR 0 5
35637: PUSH
35638: LD_INT 1
35640: ARRAY
35641: PPUSH
35642: CALL_OW 255
35646: PUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 255
35656: NONEQUAL
35657: OR
35658: IFFALSE 35764
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35660: LD_VAR 0 5
35664: PUSH
35665: LD_INT 1
35667: ARRAY
35668: PPUSH
35669: CALL_OW 305
35673: PUSH
35674: LD_VAR 0 5
35678: PUSH
35679: LD_INT 1
35681: ARRAY
35682: PPUSH
35683: CALL_OW 255
35687: PUSH
35688: LD_VAR 0 1
35692: PPUSH
35693: CALL_OW 255
35697: EQUAL
35698: AND
35699: IFFALSE 35723
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35701: LD_VAR 0 5
35705: PUSH
35706: LD_INT 1
35708: ARRAY
35709: PPUSH
35710: LD_VAR 0 5
35714: PUSH
35715: LD_INT 2
35717: ARRAY
35718: PPUSH
35719: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35723: LD_ADDR_EXP 116
35727: PUSH
35728: LD_EXP 116
35732: PPUSH
35733: LD_VAR 0 4
35737: PPUSH
35738: LD_EXP 116
35742: PUSH
35743: LD_VAR 0 4
35747: ARRAY
35748: PPUSH
35749: LD_VAR 0 3
35753: PPUSH
35754: CALL_OW 3
35758: PPUSH
35759: CALL_OW 1
35763: ST_TO_ADDR
// end ; end ;
35764: GO 35593
35766: POP
35767: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35768: LD_VAR 0 1
35772: PPUSH
35773: LD_EXP 116
35777: PUSH
35778: LD_VAR 0 4
35782: ARRAY
35783: PUSH
35784: LD_INT 0
35786: PLUS
35787: PPUSH
35788: CALL_OW 505
// end ;
35792: LD_VAR 0 2
35796: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35797: LD_INT 0
35799: PPUSH
35800: PPUSH
35801: PPUSH
35802: PPUSH
// if not hack in hackTanks then
35803: LD_VAR 0 1
35807: PUSH
35808: LD_EXP 115
35812: IN
35813: NOT
35814: IFFALSE 35818
// exit ;
35816: GO 35903
// index := GetElementIndex ( hackTanks , hack ) ;
35818: LD_ADDR_VAR 0 5
35822: PUSH
35823: LD_EXP 115
35827: PPUSH
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL 42836 0 2
35837: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35838: LD_ADDR_VAR 0 4
35842: PUSH
35843: DOUBLE
35844: LD_INT 1
35846: DEC
35847: ST_TO_ADDR
35848: LD_EXP 116
35852: PUSH
35853: LD_VAR 0 5
35857: ARRAY
35858: PUSH
35859: FOR_TO
35860: IFFALSE 35901
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35862: LD_EXP 116
35866: PUSH
35867: LD_VAR 0 5
35871: ARRAY
35872: PUSH
35873: LD_VAR 0 4
35877: ARRAY
35878: PUSH
35879: LD_INT 1
35881: ARRAY
35882: PUSH
35883: LD_VAR 0 2
35887: EQUAL
35888: IFFALSE 35899
// KillUnit ( vehicle ) ;
35890: LD_VAR 0 2
35894: PPUSH
35895: CALL_OW 66
35899: GO 35859
35901: POP
35902: POP
// end ;
35903: LD_VAR 0 3
35907: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35908: LD_EXP 120
35912: NOT
35913: IFFALSE 35948
35915: GO 35917
35917: DISABLE
// begin initMiner := true ;
35918: LD_ADDR_EXP 120
35922: PUSH
35923: LD_INT 1
35925: ST_TO_ADDR
// minersList := [ ] ;
35926: LD_ADDR_EXP 121
35930: PUSH
35931: EMPTY
35932: ST_TO_ADDR
// minerMinesList := [ ] ;
35933: LD_ADDR_EXP 122
35937: PUSH
35938: EMPTY
35939: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35940: LD_ADDR_EXP 123
35944: PUSH
35945: LD_INT 5
35947: ST_TO_ADDR
// end ;
35948: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35949: LD_EXP 120
35953: PUSH
35954: LD_INT 34
35956: PUSH
35957: LD_INT 81
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PPUSH
35964: CALL_OW 69
35968: AND
35969: IFFALSE 36430
35971: GO 35973
35973: DISABLE
35974: LD_INT 0
35976: PPUSH
35977: PPUSH
35978: PPUSH
35979: PPUSH
// begin enable ;
35980: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35981: LD_ADDR_VAR 0 1
35985: PUSH
35986: LD_INT 34
35988: PUSH
35989: LD_INT 81
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PPUSH
35996: CALL_OW 69
36000: PUSH
36001: FOR_IN
36002: IFFALSE 36074
// begin if not i in minersList then
36004: LD_VAR 0 1
36008: PUSH
36009: LD_EXP 121
36013: IN
36014: NOT
36015: IFFALSE 36072
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36017: LD_ADDR_EXP 121
36021: PUSH
36022: LD_EXP 121
36026: PPUSH
36027: LD_EXP 121
36031: PUSH
36032: LD_INT 1
36034: PLUS
36035: PPUSH
36036: LD_VAR 0 1
36040: PPUSH
36041: CALL_OW 1
36045: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36046: LD_ADDR_EXP 122
36050: PUSH
36051: LD_EXP 122
36055: PPUSH
36056: LD_EXP 122
36060: PUSH
36061: LD_INT 1
36063: PLUS
36064: PPUSH
36065: EMPTY
36066: PPUSH
36067: CALL_OW 1
36071: ST_TO_ADDR
// end end ;
36072: GO 36001
36074: POP
36075: POP
// for i := minerMinesList downto 1 do
36076: LD_ADDR_VAR 0 1
36080: PUSH
36081: DOUBLE
36082: LD_EXP 122
36086: INC
36087: ST_TO_ADDR
36088: LD_INT 1
36090: PUSH
36091: FOR_DOWNTO
36092: IFFALSE 36428
// begin if IsLive ( minersList [ i ] ) then
36094: LD_EXP 121
36098: PUSH
36099: LD_VAR 0 1
36103: ARRAY
36104: PPUSH
36105: CALL_OW 300
36109: IFFALSE 36137
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36111: LD_EXP 121
36115: PUSH
36116: LD_VAR 0 1
36120: ARRAY
36121: PPUSH
36122: LD_EXP 122
36126: PUSH
36127: LD_VAR 0 1
36131: ARRAY
36132: PPUSH
36133: CALL_OW 505
// if not minerMinesList [ i ] then
36137: LD_EXP 122
36141: PUSH
36142: LD_VAR 0 1
36146: ARRAY
36147: NOT
36148: IFFALSE 36152
// continue ;
36150: GO 36091
// for j := minerMinesList [ i ] downto 1 do
36152: LD_ADDR_VAR 0 2
36156: PUSH
36157: DOUBLE
36158: LD_EXP 122
36162: PUSH
36163: LD_VAR 0 1
36167: ARRAY
36168: INC
36169: ST_TO_ADDR
36170: LD_INT 1
36172: PUSH
36173: FOR_DOWNTO
36174: IFFALSE 36424
// begin side := GetSide ( minersList [ i ] ) ;
36176: LD_ADDR_VAR 0 3
36180: PUSH
36181: LD_EXP 121
36185: PUSH
36186: LD_VAR 0 1
36190: ARRAY
36191: PPUSH
36192: CALL_OW 255
36196: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36197: LD_ADDR_VAR 0 4
36201: PUSH
36202: LD_EXP 122
36206: PUSH
36207: LD_VAR 0 1
36211: ARRAY
36212: PUSH
36213: LD_VAR 0 2
36217: ARRAY
36218: PUSH
36219: LD_INT 1
36221: ARRAY
36222: PPUSH
36223: LD_EXP 122
36227: PUSH
36228: LD_VAR 0 1
36232: ARRAY
36233: PUSH
36234: LD_VAR 0 2
36238: ARRAY
36239: PUSH
36240: LD_INT 2
36242: ARRAY
36243: PPUSH
36244: CALL_OW 428
36248: ST_TO_ADDR
// if not tmp then
36249: LD_VAR 0 4
36253: NOT
36254: IFFALSE 36258
// continue ;
36256: GO 36173
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36258: LD_VAR 0 4
36262: PUSH
36263: LD_INT 81
36265: PUSH
36266: LD_VAR 0 3
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PPUSH
36275: CALL_OW 69
36279: IN
36280: PUSH
36281: LD_EXP 122
36285: PUSH
36286: LD_VAR 0 1
36290: ARRAY
36291: PUSH
36292: LD_VAR 0 2
36296: ARRAY
36297: PUSH
36298: LD_INT 1
36300: ARRAY
36301: PPUSH
36302: LD_EXP 122
36306: PUSH
36307: LD_VAR 0 1
36311: ARRAY
36312: PUSH
36313: LD_VAR 0 2
36317: ARRAY
36318: PUSH
36319: LD_INT 2
36321: ARRAY
36322: PPUSH
36323: CALL_OW 458
36327: AND
36328: IFFALSE 36422
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36330: LD_EXP 122
36334: PUSH
36335: LD_VAR 0 1
36339: ARRAY
36340: PUSH
36341: LD_VAR 0 2
36345: ARRAY
36346: PUSH
36347: LD_INT 1
36349: ARRAY
36350: PPUSH
36351: LD_EXP 122
36355: PUSH
36356: LD_VAR 0 1
36360: ARRAY
36361: PUSH
36362: LD_VAR 0 2
36366: ARRAY
36367: PUSH
36368: LD_INT 2
36370: ARRAY
36371: PPUSH
36372: LD_VAR 0 3
36376: PPUSH
36377: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36381: LD_ADDR_EXP 122
36385: PUSH
36386: LD_EXP 122
36390: PPUSH
36391: LD_VAR 0 1
36395: PPUSH
36396: LD_EXP 122
36400: PUSH
36401: LD_VAR 0 1
36405: ARRAY
36406: PPUSH
36407: LD_VAR 0 2
36411: PPUSH
36412: CALL_OW 3
36416: PPUSH
36417: CALL_OW 1
36421: ST_TO_ADDR
// end ; end ;
36422: GO 36173
36424: POP
36425: POP
// end ;
36426: GO 36091
36428: POP
36429: POP
// end ;
36430: PPOPN 4
36432: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36433: LD_INT 0
36435: PPUSH
36436: PPUSH
// result := false ;
36437: LD_ADDR_VAR 0 4
36441: PUSH
36442: LD_INT 0
36444: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36445: LD_VAR 0 1
36449: PPUSH
36450: CALL_OW 264
36454: PUSH
36455: LD_INT 81
36457: EQUAL
36458: NOT
36459: IFFALSE 36463
// exit ;
36461: GO 36703
// index := GetElementIndex ( minersList , unit ) ;
36463: LD_ADDR_VAR 0 5
36467: PUSH
36468: LD_EXP 121
36472: PPUSH
36473: LD_VAR 0 1
36477: PPUSH
36478: CALL 42836 0 2
36482: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36483: LD_EXP 122
36487: PUSH
36488: LD_VAR 0 5
36492: ARRAY
36493: PUSH
36494: LD_EXP 123
36498: GREATEREQUAL
36499: IFFALSE 36503
// exit ;
36501: GO 36703
// ComMoveXY ( unit , x , y ) ;
36503: LD_VAR 0 1
36507: PPUSH
36508: LD_VAR 0 2
36512: PPUSH
36513: LD_VAR 0 3
36517: PPUSH
36518: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36522: LD_INT 35
36524: PPUSH
36525: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36529: LD_VAR 0 1
36533: PPUSH
36534: LD_VAR 0 2
36538: PPUSH
36539: LD_VAR 0 3
36543: PPUSH
36544: CALL 74191 0 3
36548: NOT
36549: PUSH
36550: LD_VAR 0 1
36554: PPUSH
36555: CALL_OW 314
36559: AND
36560: IFFALSE 36564
// exit ;
36562: GO 36703
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36564: LD_VAR 0 2
36568: PPUSH
36569: LD_VAR 0 3
36573: PPUSH
36574: CALL_OW 428
36578: PUSH
36579: LD_VAR 0 1
36583: EQUAL
36584: PUSH
36585: LD_VAR 0 1
36589: PPUSH
36590: CALL_OW 314
36594: NOT
36595: AND
36596: IFFALSE 36522
// PlaySoundXY ( x , y , PlantMine ) ;
36598: LD_VAR 0 2
36602: PPUSH
36603: LD_VAR 0 3
36607: PPUSH
36608: LD_STRING PlantMine
36610: PPUSH
36611: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36615: LD_VAR 0 2
36619: PPUSH
36620: LD_VAR 0 3
36624: PPUSH
36625: LD_VAR 0 1
36629: PPUSH
36630: CALL_OW 255
36634: PPUSH
36635: LD_INT 0
36637: PPUSH
36638: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36642: LD_ADDR_EXP 122
36646: PUSH
36647: LD_EXP 122
36651: PPUSH
36652: LD_VAR 0 5
36656: PUSH
36657: LD_EXP 122
36661: PUSH
36662: LD_VAR 0 5
36666: ARRAY
36667: PUSH
36668: LD_INT 1
36670: PLUS
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PPUSH
36676: LD_VAR 0 2
36680: PUSH
36681: LD_VAR 0 3
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PPUSH
36690: CALL 43051 0 3
36694: ST_TO_ADDR
// result := true ;
36695: LD_ADDR_VAR 0 4
36699: PUSH
36700: LD_INT 1
36702: ST_TO_ADDR
// end ;
36703: LD_VAR 0 4
36707: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36708: LD_INT 0
36710: PPUSH
36711: PPUSH
36712: PPUSH
// if not unit in minersList then
36713: LD_VAR 0 1
36717: PUSH
36718: LD_EXP 121
36722: IN
36723: NOT
36724: IFFALSE 36728
// exit ;
36726: GO 37120
// index := GetElementIndex ( minersList , unit ) ;
36728: LD_ADDR_VAR 0 6
36732: PUSH
36733: LD_EXP 121
36737: PPUSH
36738: LD_VAR 0 1
36742: PPUSH
36743: CALL 42836 0 2
36747: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36748: LD_ADDR_VAR 0 5
36752: PUSH
36753: DOUBLE
36754: LD_EXP 122
36758: PUSH
36759: LD_VAR 0 6
36763: ARRAY
36764: INC
36765: ST_TO_ADDR
36766: LD_INT 1
36768: PUSH
36769: FOR_DOWNTO
36770: IFFALSE 36931
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36772: LD_EXP 122
36776: PUSH
36777: LD_VAR 0 6
36781: ARRAY
36782: PUSH
36783: LD_VAR 0 5
36787: ARRAY
36788: PUSH
36789: LD_INT 1
36791: ARRAY
36792: PUSH
36793: LD_VAR 0 2
36797: EQUAL
36798: PUSH
36799: LD_EXP 122
36803: PUSH
36804: LD_VAR 0 6
36808: ARRAY
36809: PUSH
36810: LD_VAR 0 5
36814: ARRAY
36815: PUSH
36816: LD_INT 2
36818: ARRAY
36819: PUSH
36820: LD_VAR 0 3
36824: EQUAL
36825: AND
36826: IFFALSE 36929
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36828: LD_EXP 122
36832: PUSH
36833: LD_VAR 0 6
36837: ARRAY
36838: PUSH
36839: LD_VAR 0 5
36843: ARRAY
36844: PUSH
36845: LD_INT 1
36847: ARRAY
36848: PPUSH
36849: LD_EXP 122
36853: PUSH
36854: LD_VAR 0 6
36858: ARRAY
36859: PUSH
36860: LD_VAR 0 5
36864: ARRAY
36865: PUSH
36866: LD_INT 2
36868: ARRAY
36869: PPUSH
36870: LD_VAR 0 1
36874: PPUSH
36875: CALL_OW 255
36879: PPUSH
36880: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36884: LD_ADDR_EXP 122
36888: PUSH
36889: LD_EXP 122
36893: PPUSH
36894: LD_VAR 0 6
36898: PPUSH
36899: LD_EXP 122
36903: PUSH
36904: LD_VAR 0 6
36908: ARRAY
36909: PPUSH
36910: LD_VAR 0 5
36914: PPUSH
36915: CALL_OW 3
36919: PPUSH
36920: CALL_OW 1
36924: ST_TO_ADDR
// exit ;
36925: POP
36926: POP
36927: GO 37120
// end ; end ;
36929: GO 36769
36931: POP
36932: POP
// for i := minerMinesList [ index ] downto 1 do
36933: LD_ADDR_VAR 0 5
36937: PUSH
36938: DOUBLE
36939: LD_EXP 122
36943: PUSH
36944: LD_VAR 0 6
36948: ARRAY
36949: INC
36950: ST_TO_ADDR
36951: LD_INT 1
36953: PUSH
36954: FOR_DOWNTO
36955: IFFALSE 37118
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36957: LD_EXP 122
36961: PUSH
36962: LD_VAR 0 6
36966: ARRAY
36967: PUSH
36968: LD_VAR 0 5
36972: ARRAY
36973: PUSH
36974: LD_INT 1
36976: ARRAY
36977: PPUSH
36978: LD_EXP 122
36982: PUSH
36983: LD_VAR 0 6
36987: ARRAY
36988: PUSH
36989: LD_VAR 0 5
36993: ARRAY
36994: PUSH
36995: LD_INT 2
36997: ARRAY
36998: PPUSH
36999: LD_VAR 0 2
37003: PPUSH
37004: LD_VAR 0 3
37008: PPUSH
37009: CALL_OW 298
37013: PUSH
37014: LD_INT 6
37016: LESS
37017: IFFALSE 37116
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37019: LD_EXP 122
37023: PUSH
37024: LD_VAR 0 6
37028: ARRAY
37029: PUSH
37030: LD_VAR 0 5
37034: ARRAY
37035: PUSH
37036: LD_INT 1
37038: ARRAY
37039: PPUSH
37040: LD_EXP 122
37044: PUSH
37045: LD_VAR 0 6
37049: ARRAY
37050: PUSH
37051: LD_VAR 0 5
37055: ARRAY
37056: PUSH
37057: LD_INT 2
37059: ARRAY
37060: PPUSH
37061: LD_VAR 0 1
37065: PPUSH
37066: CALL_OW 255
37070: PPUSH
37071: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37075: LD_ADDR_EXP 122
37079: PUSH
37080: LD_EXP 122
37084: PPUSH
37085: LD_VAR 0 6
37089: PPUSH
37090: LD_EXP 122
37094: PUSH
37095: LD_VAR 0 6
37099: ARRAY
37100: PPUSH
37101: LD_VAR 0 5
37105: PPUSH
37106: CALL_OW 3
37110: PPUSH
37111: CALL_OW 1
37115: ST_TO_ADDR
// end ; end ;
37116: GO 36954
37118: POP
37119: POP
// end ;
37120: LD_VAR 0 4
37124: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37125: LD_INT 0
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
37131: PPUSH
37132: PPUSH
37133: PPUSH
37134: PPUSH
37135: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37136: LD_VAR 0 1
37140: PPUSH
37141: CALL_OW 264
37145: PUSH
37146: LD_INT 81
37148: EQUAL
37149: NOT
37150: PUSH
37151: LD_VAR 0 1
37155: PUSH
37156: LD_EXP 121
37160: IN
37161: NOT
37162: OR
37163: IFFALSE 37167
// exit ;
37165: GO 37489
// index := GetElementIndex ( minersList , unit ) ;
37167: LD_ADDR_VAR 0 6
37171: PUSH
37172: LD_EXP 121
37176: PPUSH
37177: LD_VAR 0 1
37181: PPUSH
37182: CALL 42836 0 2
37186: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37187: LD_ADDR_VAR 0 8
37191: PUSH
37192: LD_EXP 123
37196: PUSH
37197: LD_EXP 122
37201: PUSH
37202: LD_VAR 0 6
37206: ARRAY
37207: MINUS
37208: ST_TO_ADDR
// if not minesFreeAmount then
37209: LD_VAR 0 8
37213: NOT
37214: IFFALSE 37218
// exit ;
37216: GO 37489
// tmp := [ ] ;
37218: LD_ADDR_VAR 0 7
37222: PUSH
37223: EMPTY
37224: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37225: LD_ADDR_VAR 0 5
37229: PUSH
37230: DOUBLE
37231: LD_INT 1
37233: DEC
37234: ST_TO_ADDR
37235: LD_VAR 0 8
37239: PUSH
37240: FOR_TO
37241: IFFALSE 37436
// begin _d := rand ( 0 , 5 ) ;
37243: LD_ADDR_VAR 0 11
37247: PUSH
37248: LD_INT 0
37250: PPUSH
37251: LD_INT 5
37253: PPUSH
37254: CALL_OW 12
37258: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37259: LD_ADDR_VAR 0 12
37263: PUSH
37264: LD_INT 2
37266: PPUSH
37267: LD_INT 6
37269: PPUSH
37270: CALL_OW 12
37274: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37275: LD_ADDR_VAR 0 9
37279: PUSH
37280: LD_VAR 0 2
37284: PPUSH
37285: LD_VAR 0 11
37289: PPUSH
37290: LD_VAR 0 12
37294: PPUSH
37295: CALL_OW 272
37299: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37300: LD_ADDR_VAR 0 10
37304: PUSH
37305: LD_VAR 0 3
37309: PPUSH
37310: LD_VAR 0 11
37314: PPUSH
37315: LD_VAR 0 12
37319: PPUSH
37320: CALL_OW 273
37324: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37325: LD_VAR 0 9
37329: PPUSH
37330: LD_VAR 0 10
37334: PPUSH
37335: CALL_OW 488
37339: PUSH
37340: LD_VAR 0 9
37344: PUSH
37345: LD_VAR 0 10
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_VAR 0 7
37358: IN
37359: NOT
37360: AND
37361: PUSH
37362: LD_VAR 0 9
37366: PPUSH
37367: LD_VAR 0 10
37371: PPUSH
37372: CALL_OW 458
37376: NOT
37377: AND
37378: IFFALSE 37420
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37380: LD_ADDR_VAR 0 7
37384: PUSH
37385: LD_VAR 0 7
37389: PPUSH
37390: LD_VAR 0 7
37394: PUSH
37395: LD_INT 1
37397: PLUS
37398: PPUSH
37399: LD_VAR 0 9
37403: PUSH
37404: LD_VAR 0 10
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PPUSH
37413: CALL_OW 1
37417: ST_TO_ADDR
37418: GO 37434
// i := i - 1 ;
37420: LD_ADDR_VAR 0 5
37424: PUSH
37425: LD_VAR 0 5
37429: PUSH
37430: LD_INT 1
37432: MINUS
37433: ST_TO_ADDR
// end ;
37434: GO 37240
37436: POP
37437: POP
// for i in tmp do
37438: LD_ADDR_VAR 0 5
37442: PUSH
37443: LD_VAR 0 7
37447: PUSH
37448: FOR_IN
37449: IFFALSE 37487
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37451: LD_VAR 0 1
37455: PPUSH
37456: LD_VAR 0 5
37460: PUSH
37461: LD_INT 1
37463: ARRAY
37464: PPUSH
37465: LD_VAR 0 5
37469: PUSH
37470: LD_INT 2
37472: ARRAY
37473: PPUSH
37474: CALL 36433 0 3
37478: NOT
37479: IFFALSE 37485
// exit ;
37481: POP
37482: POP
37483: GO 37489
37485: GO 37448
37487: POP
37488: POP
// end ;
37489: LD_VAR 0 4
37493: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37494: LD_INT 0
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
// if not GetClass ( unit ) = class_sniper then
37503: LD_VAR 0 1
37507: PPUSH
37508: CALL_OW 257
37512: PUSH
37513: LD_INT 5
37515: EQUAL
37516: NOT
37517: IFFALSE 37521
// exit ;
37519: GO 37909
// dist := 8 ;
37521: LD_ADDR_VAR 0 5
37525: PUSH
37526: LD_INT 8
37528: ST_TO_ADDR
// viewRange := 12 ;
37529: LD_ADDR_VAR 0 7
37533: PUSH
37534: LD_INT 12
37536: ST_TO_ADDR
// side := GetSide ( unit ) ;
37537: LD_ADDR_VAR 0 6
37541: PUSH
37542: LD_VAR 0 1
37546: PPUSH
37547: CALL_OW 255
37551: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37552: LD_INT 61
37554: PPUSH
37555: LD_VAR 0 6
37559: PPUSH
37560: CALL_OW 321
37564: PUSH
37565: LD_INT 2
37567: EQUAL
37568: IFFALSE 37578
// viewRange := 16 ;
37570: LD_ADDR_VAR 0 7
37574: PUSH
37575: LD_INT 16
37577: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37578: LD_VAR 0 1
37582: PPUSH
37583: LD_VAR 0 2
37587: PPUSH
37588: LD_VAR 0 3
37592: PPUSH
37593: CALL_OW 297
37597: PUSH
37598: LD_VAR 0 5
37602: GREATER
37603: IFFALSE 37682
// begin ComMoveXY ( unit , x , y ) ;
37605: LD_VAR 0 1
37609: PPUSH
37610: LD_VAR 0 2
37614: PPUSH
37615: LD_VAR 0 3
37619: PPUSH
37620: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37624: LD_INT 35
37626: PPUSH
37627: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37631: LD_VAR 0 1
37635: PPUSH
37636: LD_VAR 0 2
37640: PPUSH
37641: LD_VAR 0 3
37645: PPUSH
37646: CALL 74191 0 3
37650: NOT
37651: IFFALSE 37655
// exit ;
37653: GO 37909
// until GetDistUnitXY ( unit , x , y ) < dist ;
37655: LD_VAR 0 1
37659: PPUSH
37660: LD_VAR 0 2
37664: PPUSH
37665: LD_VAR 0 3
37669: PPUSH
37670: CALL_OW 297
37674: PUSH
37675: LD_VAR 0 5
37679: LESS
37680: IFFALSE 37624
// end ; ComTurnXY ( unit , x , y ) ;
37682: LD_VAR 0 1
37686: PPUSH
37687: LD_VAR 0 2
37691: PPUSH
37692: LD_VAR 0 3
37696: PPUSH
37697: CALL_OW 118
// wait ( 5 ) ;
37701: LD_INT 5
37703: PPUSH
37704: CALL_OW 67
// _d := GetDir ( unit ) ;
37708: LD_ADDR_VAR 0 10
37712: PUSH
37713: LD_VAR 0 1
37717: PPUSH
37718: CALL_OW 254
37722: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37723: LD_ADDR_VAR 0 8
37727: PUSH
37728: LD_VAR 0 1
37732: PPUSH
37733: CALL_OW 250
37737: PPUSH
37738: LD_VAR 0 10
37742: PPUSH
37743: LD_VAR 0 5
37747: PPUSH
37748: CALL_OW 272
37752: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37753: LD_ADDR_VAR 0 9
37757: PUSH
37758: LD_VAR 0 1
37762: PPUSH
37763: CALL_OW 251
37767: PPUSH
37768: LD_VAR 0 10
37772: PPUSH
37773: LD_VAR 0 5
37777: PPUSH
37778: CALL_OW 273
37782: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37783: LD_VAR 0 8
37787: PPUSH
37788: LD_VAR 0 9
37792: PPUSH
37793: CALL_OW 488
37797: NOT
37798: IFFALSE 37802
// exit ;
37800: GO 37909
// ComAnimCustom ( unit , 1 ) ;
37802: LD_VAR 0 1
37806: PPUSH
37807: LD_INT 1
37809: PPUSH
37810: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37814: LD_VAR 0 8
37818: PPUSH
37819: LD_VAR 0 9
37823: PPUSH
37824: LD_VAR 0 6
37828: PPUSH
37829: LD_VAR 0 7
37833: PPUSH
37834: CALL_OW 330
// repeat wait ( 1 ) ;
37838: LD_INT 1
37840: PPUSH
37841: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37845: LD_VAR 0 1
37849: PPUSH
37850: CALL_OW 316
37854: PUSH
37855: LD_VAR 0 1
37859: PPUSH
37860: CALL_OW 314
37864: OR
37865: PUSH
37866: LD_VAR 0 1
37870: PPUSH
37871: CALL_OW 302
37875: NOT
37876: OR
37877: PUSH
37878: LD_VAR 0 1
37882: PPUSH
37883: CALL_OW 301
37887: OR
37888: IFFALSE 37838
// RemoveSeeing ( _x , _y , side ) ;
37890: LD_VAR 0 8
37894: PPUSH
37895: LD_VAR 0 9
37899: PPUSH
37900: LD_VAR 0 6
37904: PPUSH
37905: CALL_OW 331
// end ; end_of_file
37909: LD_VAR 0 4
37913: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37914: LD_INT 0
37916: PPUSH
37917: PPUSH
// if exist_mode then
37918: LD_VAR 0 2
37922: IFFALSE 37947
// unit := CreateCharacter ( prefix & ident ) else
37924: LD_ADDR_VAR 0 5
37928: PUSH
37929: LD_VAR 0 3
37933: PUSH
37934: LD_VAR 0 1
37938: STR
37939: PPUSH
37940: CALL_OW 34
37944: ST_TO_ADDR
37945: GO 37962
// unit := NewCharacter ( ident ) ;
37947: LD_ADDR_VAR 0 5
37951: PUSH
37952: LD_VAR 0 1
37956: PPUSH
37957: CALL_OW 25
37961: ST_TO_ADDR
// result := unit ;
37962: LD_ADDR_VAR 0 4
37966: PUSH
37967: LD_VAR 0 5
37971: ST_TO_ADDR
// end ;
37972: LD_VAR 0 4
37976: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37977: LD_INT 0
37979: PPUSH
37980: PPUSH
// if not side or not nation then
37981: LD_VAR 0 1
37985: NOT
37986: PUSH
37987: LD_VAR 0 2
37991: NOT
37992: OR
37993: IFFALSE 37997
// exit ;
37995: GO 38765
// case nation of nation_american :
37997: LD_VAR 0 2
38001: PUSH
38002: LD_INT 1
38004: DOUBLE
38005: EQUAL
38006: IFTRUE 38010
38008: GO 38224
38010: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38011: LD_ADDR_VAR 0 4
38015: PUSH
38016: LD_INT 35
38018: PUSH
38019: LD_INT 45
38021: PUSH
38022: LD_INT 46
38024: PUSH
38025: LD_INT 47
38027: PUSH
38028: LD_INT 82
38030: PUSH
38031: LD_INT 83
38033: PUSH
38034: LD_INT 84
38036: PUSH
38037: LD_INT 85
38039: PUSH
38040: LD_INT 86
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: LD_INT 6
38051: PUSH
38052: LD_INT 15
38054: PUSH
38055: LD_INT 16
38057: PUSH
38058: LD_INT 7
38060: PUSH
38061: LD_INT 12
38063: PUSH
38064: LD_INT 13
38066: PUSH
38067: LD_INT 10
38069: PUSH
38070: LD_INT 14
38072: PUSH
38073: LD_INT 20
38075: PUSH
38076: LD_INT 21
38078: PUSH
38079: LD_INT 22
38081: PUSH
38082: LD_INT 25
38084: PUSH
38085: LD_INT 32
38087: PUSH
38088: LD_INT 27
38090: PUSH
38091: LD_INT 36
38093: PUSH
38094: LD_INT 69
38096: PUSH
38097: LD_INT 39
38099: PUSH
38100: LD_INT 34
38102: PUSH
38103: LD_INT 40
38105: PUSH
38106: LD_INT 48
38108: PUSH
38109: LD_INT 49
38111: PUSH
38112: LD_INT 50
38114: PUSH
38115: LD_INT 51
38117: PUSH
38118: LD_INT 52
38120: PUSH
38121: LD_INT 53
38123: PUSH
38124: LD_INT 54
38126: PUSH
38127: LD_INT 55
38129: PUSH
38130: LD_INT 56
38132: PUSH
38133: LD_INT 57
38135: PUSH
38136: LD_INT 58
38138: PUSH
38139: LD_INT 59
38141: PUSH
38142: LD_INT 60
38144: PUSH
38145: LD_INT 61
38147: PUSH
38148: LD_INT 62
38150: PUSH
38151: LD_INT 80
38153: PUSH
38154: LD_INT 82
38156: PUSH
38157: LD_INT 83
38159: PUSH
38160: LD_INT 84
38162: PUSH
38163: LD_INT 85
38165: PUSH
38166: LD_INT 86
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
38222: GO 38689
38224: LD_INT 2
38226: DOUBLE
38227: EQUAL
38228: IFTRUE 38232
38230: GO 38458
38232: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38233: LD_ADDR_VAR 0 4
38237: PUSH
38238: LD_INT 35
38240: PUSH
38241: LD_INT 45
38243: PUSH
38244: LD_INT 46
38246: PUSH
38247: LD_INT 47
38249: PUSH
38250: LD_INT 82
38252: PUSH
38253: LD_INT 83
38255: PUSH
38256: LD_INT 84
38258: PUSH
38259: LD_INT 85
38261: PUSH
38262: LD_INT 87
38264: PUSH
38265: LD_INT 70
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: LD_INT 11
38273: PUSH
38274: LD_INT 3
38276: PUSH
38277: LD_INT 4
38279: PUSH
38280: LD_INT 5
38282: PUSH
38283: LD_INT 6
38285: PUSH
38286: LD_INT 15
38288: PUSH
38289: LD_INT 18
38291: PUSH
38292: LD_INT 7
38294: PUSH
38295: LD_INT 17
38297: PUSH
38298: LD_INT 8
38300: PUSH
38301: LD_INT 20
38303: PUSH
38304: LD_INT 21
38306: PUSH
38307: LD_INT 22
38309: PUSH
38310: LD_INT 72
38312: PUSH
38313: LD_INT 26
38315: PUSH
38316: LD_INT 69
38318: PUSH
38319: LD_INT 39
38321: PUSH
38322: LD_INT 40
38324: PUSH
38325: LD_INT 41
38327: PUSH
38328: LD_INT 42
38330: PUSH
38331: LD_INT 43
38333: PUSH
38334: LD_INT 48
38336: PUSH
38337: LD_INT 49
38339: PUSH
38340: LD_INT 50
38342: PUSH
38343: LD_INT 51
38345: PUSH
38346: LD_INT 52
38348: PUSH
38349: LD_INT 53
38351: PUSH
38352: LD_INT 54
38354: PUSH
38355: LD_INT 55
38357: PUSH
38358: LD_INT 56
38360: PUSH
38361: LD_INT 60
38363: PUSH
38364: LD_INT 61
38366: PUSH
38367: LD_INT 62
38369: PUSH
38370: LD_INT 66
38372: PUSH
38373: LD_INT 67
38375: PUSH
38376: LD_INT 68
38378: PUSH
38379: LD_INT 81
38381: PUSH
38382: LD_INT 82
38384: PUSH
38385: LD_INT 83
38387: PUSH
38388: LD_INT 84
38390: PUSH
38391: LD_INT 85
38393: PUSH
38394: LD_INT 87
38396: PUSH
38397: LD_INT 88
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: ST_TO_ADDR
38456: GO 38689
38458: LD_INT 3
38460: DOUBLE
38461: EQUAL
38462: IFTRUE 38466
38464: GO 38688
38466: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38467: LD_ADDR_VAR 0 4
38471: PUSH
38472: LD_INT 46
38474: PUSH
38475: LD_INT 47
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: LD_INT 82
38486: PUSH
38487: LD_INT 83
38489: PUSH
38490: LD_INT 84
38492: PUSH
38493: LD_INT 85
38495: PUSH
38496: LD_INT 86
38498: PUSH
38499: LD_INT 11
38501: PUSH
38502: LD_INT 9
38504: PUSH
38505: LD_INT 20
38507: PUSH
38508: LD_INT 19
38510: PUSH
38511: LD_INT 21
38513: PUSH
38514: LD_INT 24
38516: PUSH
38517: LD_INT 22
38519: PUSH
38520: LD_INT 25
38522: PUSH
38523: LD_INT 28
38525: PUSH
38526: LD_INT 29
38528: PUSH
38529: LD_INT 30
38531: PUSH
38532: LD_INT 31
38534: PUSH
38535: LD_INT 37
38537: PUSH
38538: LD_INT 38
38540: PUSH
38541: LD_INT 32
38543: PUSH
38544: LD_INT 27
38546: PUSH
38547: LD_INT 33
38549: PUSH
38550: LD_INT 69
38552: PUSH
38553: LD_INT 39
38555: PUSH
38556: LD_INT 34
38558: PUSH
38559: LD_INT 40
38561: PUSH
38562: LD_INT 71
38564: PUSH
38565: LD_INT 23
38567: PUSH
38568: LD_INT 44
38570: PUSH
38571: LD_INT 48
38573: PUSH
38574: LD_INT 49
38576: PUSH
38577: LD_INT 50
38579: PUSH
38580: LD_INT 51
38582: PUSH
38583: LD_INT 52
38585: PUSH
38586: LD_INT 53
38588: PUSH
38589: LD_INT 54
38591: PUSH
38592: LD_INT 55
38594: PUSH
38595: LD_INT 56
38597: PUSH
38598: LD_INT 57
38600: PUSH
38601: LD_INT 58
38603: PUSH
38604: LD_INT 59
38606: PUSH
38607: LD_INT 63
38609: PUSH
38610: LD_INT 64
38612: PUSH
38613: LD_INT 65
38615: PUSH
38616: LD_INT 82
38618: PUSH
38619: LD_INT 83
38621: PUSH
38622: LD_INT 84
38624: PUSH
38625: LD_INT 85
38627: PUSH
38628: LD_INT 86
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
38686: GO 38689
38688: POP
// if state > - 1 and state < 3 then
38689: LD_VAR 0 3
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: GREATER
38698: PUSH
38699: LD_VAR 0 3
38703: PUSH
38704: LD_INT 3
38706: LESS
38707: AND
38708: IFFALSE 38765
// for i in result do
38710: LD_ADDR_VAR 0 5
38714: PUSH
38715: LD_VAR 0 4
38719: PUSH
38720: FOR_IN
38721: IFFALSE 38763
// if GetTech ( i , side ) <> state then
38723: LD_VAR 0 5
38727: PPUSH
38728: LD_VAR 0 1
38732: PPUSH
38733: CALL_OW 321
38737: PUSH
38738: LD_VAR 0 3
38742: NONEQUAL
38743: IFFALSE 38761
// result := result diff i ;
38745: LD_ADDR_VAR 0 4
38749: PUSH
38750: LD_VAR 0 4
38754: PUSH
38755: LD_VAR 0 5
38759: DIFF
38760: ST_TO_ADDR
38761: GO 38720
38763: POP
38764: POP
// end ;
38765: LD_VAR 0 4
38769: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38770: LD_INT 0
38772: PPUSH
38773: PPUSH
38774: PPUSH
// result := true ;
38775: LD_ADDR_VAR 0 3
38779: PUSH
38780: LD_INT 1
38782: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38783: LD_ADDR_VAR 0 5
38787: PUSH
38788: LD_VAR 0 2
38792: PPUSH
38793: CALL_OW 480
38797: ST_TO_ADDR
// if not tmp then
38798: LD_VAR 0 5
38802: NOT
38803: IFFALSE 38807
// exit ;
38805: GO 38856
// for i in tmp do
38807: LD_ADDR_VAR 0 4
38811: PUSH
38812: LD_VAR 0 5
38816: PUSH
38817: FOR_IN
38818: IFFALSE 38854
// if GetTech ( i , side ) <> state_researched then
38820: LD_VAR 0 4
38824: PPUSH
38825: LD_VAR 0 1
38829: PPUSH
38830: CALL_OW 321
38834: PUSH
38835: LD_INT 2
38837: NONEQUAL
38838: IFFALSE 38852
// begin result := false ;
38840: LD_ADDR_VAR 0 3
38844: PUSH
38845: LD_INT 0
38847: ST_TO_ADDR
// exit ;
38848: POP
38849: POP
38850: GO 38856
// end ;
38852: GO 38817
38854: POP
38855: POP
// end ;
38856: LD_VAR 0 3
38860: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38861: LD_INT 0
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38876: LD_VAR 0 1
38880: NOT
38881: PUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: CALL_OW 257
38891: PUSH
38892: LD_INT 9
38894: NONEQUAL
38895: OR
38896: IFFALSE 38900
// exit ;
38898: GO 39473
// side := GetSide ( unit ) ;
38900: LD_ADDR_VAR 0 9
38904: PUSH
38905: LD_VAR 0 1
38909: PPUSH
38910: CALL_OW 255
38914: ST_TO_ADDR
// tech_space := tech_spacanom ;
38915: LD_ADDR_VAR 0 12
38919: PUSH
38920: LD_INT 29
38922: ST_TO_ADDR
// tech_time := tech_taurad ;
38923: LD_ADDR_VAR 0 13
38927: PUSH
38928: LD_INT 28
38930: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38931: LD_ADDR_VAR 0 11
38935: PUSH
38936: LD_VAR 0 1
38940: PPUSH
38941: CALL_OW 310
38945: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38946: LD_VAR 0 11
38950: PPUSH
38951: CALL_OW 247
38955: PUSH
38956: LD_INT 2
38958: EQUAL
38959: IFFALSE 38963
// exit ;
38961: GO 39473
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38963: LD_ADDR_VAR 0 8
38967: PUSH
38968: LD_INT 81
38970: PUSH
38971: LD_VAR 0 9
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: LD_INT 21
38985: PUSH
38986: LD_INT 3
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PPUSH
39001: CALL_OW 69
39005: ST_TO_ADDR
// if not tmp then
39006: LD_VAR 0 8
39010: NOT
39011: IFFALSE 39015
// exit ;
39013: GO 39473
// if in_unit then
39015: LD_VAR 0 11
39019: IFFALSE 39043
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39021: LD_ADDR_VAR 0 10
39025: PUSH
39026: LD_VAR 0 8
39030: PPUSH
39031: LD_VAR 0 11
39035: PPUSH
39036: CALL_OW 74
39040: ST_TO_ADDR
39041: GO 39063
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39043: LD_ADDR_VAR 0 10
39047: PUSH
39048: LD_VAR 0 8
39052: PPUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: CALL_OW 74
39062: ST_TO_ADDR
// if not enemy then
39063: LD_VAR 0 10
39067: NOT
39068: IFFALSE 39072
// exit ;
39070: GO 39473
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39072: LD_VAR 0 11
39076: PUSH
39077: LD_VAR 0 11
39081: PPUSH
39082: LD_VAR 0 10
39086: PPUSH
39087: CALL_OW 296
39091: PUSH
39092: LD_INT 13
39094: GREATER
39095: AND
39096: PUSH
39097: LD_VAR 0 1
39101: PPUSH
39102: LD_VAR 0 10
39106: PPUSH
39107: CALL_OW 296
39111: PUSH
39112: LD_INT 12
39114: GREATER
39115: OR
39116: IFFALSE 39120
// exit ;
39118: GO 39473
// missile := [ 1 ] ;
39120: LD_ADDR_VAR 0 14
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: EMPTY
39129: LIST
39130: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39131: LD_VAR 0 9
39135: PPUSH
39136: LD_VAR 0 12
39140: PPUSH
39141: CALL_OW 325
39145: IFFALSE 39174
// missile := Replace ( missile , missile + 1 , 2 ) ;
39147: LD_ADDR_VAR 0 14
39151: PUSH
39152: LD_VAR 0 14
39156: PPUSH
39157: LD_VAR 0 14
39161: PUSH
39162: LD_INT 1
39164: PLUS
39165: PPUSH
39166: LD_INT 2
39168: PPUSH
39169: CALL_OW 1
39173: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39174: LD_VAR 0 9
39178: PPUSH
39179: LD_VAR 0 13
39183: PPUSH
39184: CALL_OW 325
39188: PUSH
39189: LD_VAR 0 10
39193: PPUSH
39194: CALL_OW 255
39198: PPUSH
39199: LD_VAR 0 13
39203: PPUSH
39204: CALL_OW 325
39208: NOT
39209: AND
39210: IFFALSE 39239
// missile := Replace ( missile , missile + 1 , 3 ) ;
39212: LD_ADDR_VAR 0 14
39216: PUSH
39217: LD_VAR 0 14
39221: PPUSH
39222: LD_VAR 0 14
39226: PUSH
39227: LD_INT 1
39229: PLUS
39230: PPUSH
39231: LD_INT 3
39233: PPUSH
39234: CALL_OW 1
39238: ST_TO_ADDR
// if missile < 2 then
39239: LD_VAR 0 14
39243: PUSH
39244: LD_INT 2
39246: LESS
39247: IFFALSE 39251
// exit ;
39249: GO 39473
// x := GetX ( enemy ) ;
39251: LD_ADDR_VAR 0 4
39255: PUSH
39256: LD_VAR 0 10
39260: PPUSH
39261: CALL_OW 250
39265: ST_TO_ADDR
// y := GetY ( enemy ) ;
39266: LD_ADDR_VAR 0 5
39270: PUSH
39271: LD_VAR 0 10
39275: PPUSH
39276: CALL_OW 251
39280: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39281: LD_ADDR_VAR 0 6
39285: PUSH
39286: LD_VAR 0 4
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PPUSH
39295: LD_INT 1
39297: PPUSH
39298: CALL_OW 12
39302: PLUS
39303: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39304: LD_ADDR_VAR 0 7
39308: PUSH
39309: LD_VAR 0 5
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PPUSH
39318: LD_INT 1
39320: PPUSH
39321: CALL_OW 12
39325: PLUS
39326: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39327: LD_VAR 0 6
39331: PPUSH
39332: LD_VAR 0 7
39336: PPUSH
39337: CALL_OW 488
39341: NOT
39342: IFFALSE 39364
// begin _x := x ;
39344: LD_ADDR_VAR 0 6
39348: PUSH
39349: LD_VAR 0 4
39353: ST_TO_ADDR
// _y := y ;
39354: LD_ADDR_VAR 0 7
39358: PUSH
39359: LD_VAR 0 5
39363: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39364: LD_ADDR_VAR 0 3
39368: PUSH
39369: LD_INT 1
39371: PPUSH
39372: LD_VAR 0 14
39376: PPUSH
39377: CALL_OW 12
39381: ST_TO_ADDR
// case i of 1 :
39382: LD_VAR 0 3
39386: PUSH
39387: LD_INT 1
39389: DOUBLE
39390: EQUAL
39391: IFTRUE 39395
39393: GO 39412
39395: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39396: LD_VAR 0 1
39400: PPUSH
39401: LD_VAR 0 10
39405: PPUSH
39406: CALL_OW 115
39410: GO 39473
39412: LD_INT 2
39414: DOUBLE
39415: EQUAL
39416: IFTRUE 39420
39418: GO 39442
39420: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39421: LD_VAR 0 1
39425: PPUSH
39426: LD_VAR 0 6
39430: PPUSH
39431: LD_VAR 0 7
39435: PPUSH
39436: CALL_OW 153
39440: GO 39473
39442: LD_INT 3
39444: DOUBLE
39445: EQUAL
39446: IFTRUE 39450
39448: GO 39472
39450: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39451: LD_VAR 0 1
39455: PPUSH
39456: LD_VAR 0 6
39460: PPUSH
39461: LD_VAR 0 7
39465: PPUSH
39466: CALL_OW 154
39470: GO 39473
39472: POP
// end ;
39473: LD_VAR 0 2
39477: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39478: LD_INT 0
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
// if not unit or not building then
39486: LD_VAR 0 1
39490: NOT
39491: PUSH
39492: LD_VAR 0 2
39496: NOT
39497: OR
39498: IFFALSE 39502
// exit ;
39500: GO 39660
// x := GetX ( building ) ;
39502: LD_ADDR_VAR 0 5
39506: PUSH
39507: LD_VAR 0 2
39511: PPUSH
39512: CALL_OW 250
39516: ST_TO_ADDR
// y := GetY ( building ) ;
39517: LD_ADDR_VAR 0 6
39521: PUSH
39522: LD_VAR 0 2
39526: PPUSH
39527: CALL_OW 251
39531: ST_TO_ADDR
// for i = 0 to 5 do
39532: LD_ADDR_VAR 0 4
39536: PUSH
39537: DOUBLE
39538: LD_INT 0
39540: DEC
39541: ST_TO_ADDR
39542: LD_INT 5
39544: PUSH
39545: FOR_TO
39546: IFFALSE 39658
// begin _x := ShiftX ( x , i , 3 ) ;
39548: LD_ADDR_VAR 0 7
39552: PUSH
39553: LD_VAR 0 5
39557: PPUSH
39558: LD_VAR 0 4
39562: PPUSH
39563: LD_INT 3
39565: PPUSH
39566: CALL_OW 272
39570: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39571: LD_ADDR_VAR 0 8
39575: PUSH
39576: LD_VAR 0 6
39580: PPUSH
39581: LD_VAR 0 4
39585: PPUSH
39586: LD_INT 3
39588: PPUSH
39589: CALL_OW 273
39593: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39594: LD_VAR 0 7
39598: PPUSH
39599: LD_VAR 0 8
39603: PPUSH
39604: CALL_OW 488
39608: NOT
39609: IFFALSE 39613
// continue ;
39611: GO 39545
// if HexInfo ( _x , _y ) = 0 then
39613: LD_VAR 0 7
39617: PPUSH
39618: LD_VAR 0 8
39622: PPUSH
39623: CALL_OW 428
39627: PUSH
39628: LD_INT 0
39630: EQUAL
39631: IFFALSE 39656
// begin ComMoveXY ( unit , _x , _y ) ;
39633: LD_VAR 0 1
39637: PPUSH
39638: LD_VAR 0 7
39642: PPUSH
39643: LD_VAR 0 8
39647: PPUSH
39648: CALL_OW 111
// exit ;
39652: POP
39653: POP
39654: GO 39660
// end ; end ;
39656: GO 39545
39658: POP
39659: POP
// end ;
39660: LD_VAR 0 3
39664: RET
// export function ScanBase ( side , base_area ) ; begin
39665: LD_INT 0
39667: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39668: LD_ADDR_VAR 0 3
39672: PUSH
39673: LD_VAR 0 2
39677: PPUSH
39678: LD_INT 81
39680: PUSH
39681: LD_VAR 0 1
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PPUSH
39690: CALL_OW 70
39694: ST_TO_ADDR
// end ;
39695: LD_VAR 0 3
39699: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39700: LD_INT 0
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
// result := false ;
39706: LD_ADDR_VAR 0 2
39710: PUSH
39711: LD_INT 0
39713: ST_TO_ADDR
// side := GetSide ( unit ) ;
39714: LD_ADDR_VAR 0 3
39718: PUSH
39719: LD_VAR 0 1
39723: PPUSH
39724: CALL_OW 255
39728: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39729: LD_ADDR_VAR 0 4
39733: PUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 248
39743: ST_TO_ADDR
// case nat of 1 :
39744: LD_VAR 0 4
39748: PUSH
39749: LD_INT 1
39751: DOUBLE
39752: EQUAL
39753: IFTRUE 39757
39755: GO 39768
39757: POP
// tech := tech_lassight ; 2 :
39758: LD_ADDR_VAR 0 5
39762: PUSH
39763: LD_INT 12
39765: ST_TO_ADDR
39766: GO 39807
39768: LD_INT 2
39770: DOUBLE
39771: EQUAL
39772: IFTRUE 39776
39774: GO 39787
39776: POP
// tech := tech_mortar ; 3 :
39777: LD_ADDR_VAR 0 5
39781: PUSH
39782: LD_INT 41
39784: ST_TO_ADDR
39785: GO 39807
39787: LD_INT 3
39789: DOUBLE
39790: EQUAL
39791: IFTRUE 39795
39793: GO 39806
39795: POP
// tech := tech_bazooka ; end ;
39796: LD_ADDR_VAR 0 5
39800: PUSH
39801: LD_INT 44
39803: ST_TO_ADDR
39804: GO 39807
39806: POP
// if Researched ( side , tech ) then
39807: LD_VAR 0 3
39811: PPUSH
39812: LD_VAR 0 5
39816: PPUSH
39817: CALL_OW 325
39821: IFFALSE 39848
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39823: LD_ADDR_VAR 0 2
39827: PUSH
39828: LD_INT 5
39830: PUSH
39831: LD_INT 8
39833: PUSH
39834: LD_INT 9
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: PUSH
39842: LD_VAR 0 4
39846: ARRAY
39847: ST_TO_ADDR
// end ;
39848: LD_VAR 0 2
39852: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39853: LD_INT 0
39855: PPUSH
39856: PPUSH
39857: PPUSH
// if not mines then
39858: LD_VAR 0 2
39862: NOT
39863: IFFALSE 39867
// exit ;
39865: GO 40011
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39867: LD_ADDR_VAR 0 5
39871: PUSH
39872: LD_INT 81
39874: PUSH
39875: LD_VAR 0 1
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 3
39886: PUSH
39887: LD_INT 21
39889: PUSH
39890: LD_INT 3
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PPUSH
39905: CALL_OW 69
39909: ST_TO_ADDR
// for i in mines do
39910: LD_ADDR_VAR 0 4
39914: PUSH
39915: LD_VAR 0 2
39919: PUSH
39920: FOR_IN
39921: IFFALSE 40009
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39923: LD_VAR 0 4
39927: PUSH
39928: LD_INT 1
39930: ARRAY
39931: PPUSH
39932: LD_VAR 0 4
39936: PUSH
39937: LD_INT 2
39939: ARRAY
39940: PPUSH
39941: CALL_OW 458
39945: NOT
39946: IFFALSE 39950
// continue ;
39948: GO 39920
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39950: LD_VAR 0 4
39954: PUSH
39955: LD_INT 1
39957: ARRAY
39958: PPUSH
39959: LD_VAR 0 4
39963: PUSH
39964: LD_INT 2
39966: ARRAY
39967: PPUSH
39968: CALL_OW 428
39972: PUSH
39973: LD_VAR 0 5
39977: IN
39978: IFFALSE 40007
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39980: LD_VAR 0 4
39984: PUSH
39985: LD_INT 1
39987: ARRAY
39988: PPUSH
39989: LD_VAR 0 4
39993: PUSH
39994: LD_INT 2
39996: ARRAY
39997: PPUSH
39998: LD_VAR 0 1
40002: PPUSH
40003: CALL_OW 456
// end ;
40007: GO 39920
40009: POP
40010: POP
// end ;
40011: LD_VAR 0 3
40015: RET
// export function Count ( array ) ; var i ; begin
40016: LD_INT 0
40018: PPUSH
40019: PPUSH
// result := 0 ;
40020: LD_ADDR_VAR 0 2
40024: PUSH
40025: LD_INT 0
40027: ST_TO_ADDR
// for i in array do
40028: LD_ADDR_VAR 0 3
40032: PUSH
40033: LD_VAR 0 1
40037: PUSH
40038: FOR_IN
40039: IFFALSE 40063
// if i then
40041: LD_VAR 0 3
40045: IFFALSE 40061
// result := result + 1 ;
40047: LD_ADDR_VAR 0 2
40051: PUSH
40052: LD_VAR 0 2
40056: PUSH
40057: LD_INT 1
40059: PLUS
40060: ST_TO_ADDR
40061: GO 40038
40063: POP
40064: POP
// end ;
40065: LD_VAR 0 2
40069: RET
// export function IsEmpty ( building ) ; begin
40070: LD_INT 0
40072: PPUSH
// if not building then
40073: LD_VAR 0 1
40077: NOT
40078: IFFALSE 40082
// exit ;
40080: GO 40125
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40082: LD_ADDR_VAR 0 2
40086: PUSH
40087: LD_VAR 0 1
40091: PUSH
40092: LD_INT 22
40094: PUSH
40095: LD_VAR 0 1
40099: PPUSH
40100: CALL_OW 255
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 58
40111: PUSH
40112: EMPTY
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PPUSH
40119: CALL_OW 69
40123: IN
40124: ST_TO_ADDR
// end ;
40125: LD_VAR 0 2
40129: RET
// export function IsNotFull ( building ) ; var places ; begin
40130: LD_INT 0
40132: PPUSH
40133: PPUSH
// if not building then
40134: LD_VAR 0 1
40138: NOT
40139: IFFALSE 40143
// exit ;
40141: GO 40314
// result := false ;
40143: LD_ADDR_VAR 0 2
40147: PUSH
40148: LD_INT 0
40150: ST_TO_ADDR
// places := 0 ;
40151: LD_ADDR_VAR 0 3
40155: PUSH
40156: LD_INT 0
40158: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
40159: LD_VAR 0 1
40163: PPUSH
40164: CALL_OW 266
40168: PUSH
40169: LD_INT 0
40171: DOUBLE
40172: EQUAL
40173: IFTRUE 40231
40175: LD_INT 1
40177: DOUBLE
40178: EQUAL
40179: IFTRUE 40231
40181: LD_INT 6
40183: DOUBLE
40184: EQUAL
40185: IFTRUE 40231
40187: LD_INT 7
40189: DOUBLE
40190: EQUAL
40191: IFTRUE 40231
40193: LD_INT 8
40195: DOUBLE
40196: EQUAL
40197: IFTRUE 40231
40199: LD_INT 4
40201: DOUBLE
40202: EQUAL
40203: IFTRUE 40231
40205: LD_INT 5
40207: DOUBLE
40208: EQUAL
40209: IFTRUE 40231
40211: LD_INT 2
40213: DOUBLE
40214: EQUAL
40215: IFTRUE 40231
40217: LD_INT 3
40219: DOUBLE
40220: EQUAL
40221: IFTRUE 40231
40223: LD_INT 35
40225: DOUBLE
40226: EQUAL
40227: IFTRUE 40231
40229: GO 40242
40231: POP
// places := 6 ; b_bunker , b_breastwork :
40232: LD_ADDR_VAR 0 3
40236: PUSH
40237: LD_INT 6
40239: ST_TO_ADDR
40240: GO 40287
40242: LD_INT 32
40244: DOUBLE
40245: EQUAL
40246: IFTRUE 40256
40248: LD_INT 31
40250: DOUBLE
40251: EQUAL
40252: IFTRUE 40256
40254: GO 40267
40256: POP
// places := 1 ; b_control_tower :
40257: LD_ADDR_VAR 0 3
40261: PUSH
40262: LD_INT 1
40264: ST_TO_ADDR
40265: GO 40287
40267: LD_INT 36
40269: DOUBLE
40270: EQUAL
40271: IFTRUE 40275
40273: GO 40286
40275: POP
// places := 3 ; end ;
40276: LD_ADDR_VAR 0 3
40280: PUSH
40281: LD_INT 3
40283: ST_TO_ADDR
40284: GO 40287
40286: POP
// if places then
40287: LD_VAR 0 3
40291: IFFALSE 40314
// result := UnitsInside ( building ) < places ;
40293: LD_ADDR_VAR 0 2
40297: PUSH
40298: LD_VAR 0 1
40302: PPUSH
40303: CALL_OW 313
40307: PUSH
40308: LD_VAR 0 3
40312: LESS
40313: ST_TO_ADDR
// end ;
40314: LD_VAR 0 2
40318: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40319: LD_INT 0
40321: PPUSH
40322: PPUSH
40323: PPUSH
40324: PPUSH
// tmp := [ ] ;
40325: LD_ADDR_VAR 0 3
40329: PUSH
40330: EMPTY
40331: ST_TO_ADDR
// list := [ ] ;
40332: LD_ADDR_VAR 0 5
40336: PUSH
40337: EMPTY
40338: ST_TO_ADDR
// for i = 16 to 25 do
40339: LD_ADDR_VAR 0 4
40343: PUSH
40344: DOUBLE
40345: LD_INT 16
40347: DEC
40348: ST_TO_ADDR
40349: LD_INT 25
40351: PUSH
40352: FOR_TO
40353: IFFALSE 40426
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40355: LD_ADDR_VAR 0 3
40359: PUSH
40360: LD_VAR 0 3
40364: PUSH
40365: LD_INT 22
40367: PUSH
40368: LD_VAR 0 1
40372: PPUSH
40373: CALL_OW 255
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 91
40384: PUSH
40385: LD_VAR 0 1
40389: PUSH
40390: LD_INT 6
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 30
40400: PUSH
40401: LD_VAR 0 4
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: PUSH
40415: EMPTY
40416: LIST
40417: PPUSH
40418: CALL_OW 69
40422: ADD
40423: ST_TO_ADDR
40424: GO 40352
40426: POP
40427: POP
// for i = 1 to tmp do
40428: LD_ADDR_VAR 0 4
40432: PUSH
40433: DOUBLE
40434: LD_INT 1
40436: DEC
40437: ST_TO_ADDR
40438: LD_VAR 0 3
40442: PUSH
40443: FOR_TO
40444: IFFALSE 40532
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40446: LD_ADDR_VAR 0 5
40450: PUSH
40451: LD_VAR 0 5
40455: PUSH
40456: LD_VAR 0 3
40460: PUSH
40461: LD_VAR 0 4
40465: ARRAY
40466: PPUSH
40467: CALL_OW 266
40471: PUSH
40472: LD_VAR 0 3
40476: PUSH
40477: LD_VAR 0 4
40481: ARRAY
40482: PPUSH
40483: CALL_OW 250
40487: PUSH
40488: LD_VAR 0 3
40492: PUSH
40493: LD_VAR 0 4
40497: ARRAY
40498: PPUSH
40499: CALL_OW 251
40503: PUSH
40504: LD_VAR 0 3
40508: PUSH
40509: LD_VAR 0 4
40513: ARRAY
40514: PPUSH
40515: CALL_OW 254
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: PUSH
40526: EMPTY
40527: LIST
40528: ADD
40529: ST_TO_ADDR
40530: GO 40443
40532: POP
40533: POP
// result := list ;
40534: LD_ADDR_VAR 0 2
40538: PUSH
40539: LD_VAR 0 5
40543: ST_TO_ADDR
// end ;
40544: LD_VAR 0 2
40548: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40549: LD_INT 0
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
// if not factory then
40558: LD_VAR 0 1
40562: NOT
40563: IFFALSE 40567
// exit ;
40565: GO 41160
// if control = control_apeman then
40567: LD_VAR 0 4
40571: PUSH
40572: LD_INT 5
40574: EQUAL
40575: IFFALSE 40684
// begin tmp := UnitsInside ( factory ) ;
40577: LD_ADDR_VAR 0 8
40581: PUSH
40582: LD_VAR 0 1
40586: PPUSH
40587: CALL_OW 313
40591: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40592: LD_VAR 0 8
40596: PPUSH
40597: LD_INT 25
40599: PUSH
40600: LD_INT 12
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PPUSH
40607: CALL_OW 72
40611: NOT
40612: IFFALSE 40622
// control := control_manual ;
40614: LD_ADDR_VAR 0 4
40618: PUSH
40619: LD_INT 1
40621: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40622: LD_ADDR_VAR 0 8
40626: PUSH
40627: LD_VAR 0 1
40631: PPUSH
40632: CALL 40319 0 1
40636: ST_TO_ADDR
// if tmp then
40637: LD_VAR 0 8
40641: IFFALSE 40684
// begin for i in tmp do
40643: LD_ADDR_VAR 0 7
40647: PUSH
40648: LD_VAR 0 8
40652: PUSH
40653: FOR_IN
40654: IFFALSE 40682
// if i [ 1 ] = b_ext_radio then
40656: LD_VAR 0 7
40660: PUSH
40661: LD_INT 1
40663: ARRAY
40664: PUSH
40665: LD_INT 22
40667: EQUAL
40668: IFFALSE 40680
// begin control := control_remote ;
40670: LD_ADDR_VAR 0 4
40674: PUSH
40675: LD_INT 2
40677: ST_TO_ADDR
// break ;
40678: GO 40682
// end ;
40680: GO 40653
40682: POP
40683: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40684: LD_VAR 0 1
40688: PPUSH
40689: LD_VAR 0 2
40693: PPUSH
40694: LD_VAR 0 3
40698: PPUSH
40699: LD_VAR 0 4
40703: PPUSH
40704: LD_VAR 0 5
40708: PPUSH
40709: CALL_OW 448
40713: IFFALSE 40748
// begin result := [ chassis , engine , control , weapon ] ;
40715: LD_ADDR_VAR 0 6
40719: PUSH
40720: LD_VAR 0 2
40724: PUSH
40725: LD_VAR 0 3
40729: PUSH
40730: LD_VAR 0 4
40734: PUSH
40735: LD_VAR 0 5
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: ST_TO_ADDR
// exit ;
40746: GO 41160
// end ; _chassis := AvailableChassisList ( factory ) ;
40748: LD_ADDR_VAR 0 9
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 475
40762: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40763: LD_ADDR_VAR 0 11
40767: PUSH
40768: LD_VAR 0 1
40772: PPUSH
40773: CALL_OW 476
40777: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40778: LD_ADDR_VAR 0 12
40782: PUSH
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 477
40792: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40793: LD_ADDR_VAR 0 10
40797: PUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 478
40807: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40808: LD_VAR 0 9
40812: NOT
40813: PUSH
40814: LD_VAR 0 11
40818: NOT
40819: OR
40820: PUSH
40821: LD_VAR 0 12
40825: NOT
40826: OR
40827: PUSH
40828: LD_VAR 0 10
40832: NOT
40833: OR
40834: IFFALSE 40869
// begin result := [ chassis , engine , control , weapon ] ;
40836: LD_ADDR_VAR 0 6
40840: PUSH
40841: LD_VAR 0 2
40845: PUSH
40846: LD_VAR 0 3
40850: PUSH
40851: LD_VAR 0 4
40855: PUSH
40856: LD_VAR 0 5
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: ST_TO_ADDR
// exit ;
40867: GO 41160
// end ; if not chassis in _chassis then
40869: LD_VAR 0 2
40873: PUSH
40874: LD_VAR 0 9
40878: IN
40879: NOT
40880: IFFALSE 40906
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40882: LD_ADDR_VAR 0 2
40886: PUSH
40887: LD_VAR 0 9
40891: PUSH
40892: LD_INT 1
40894: PPUSH
40895: LD_VAR 0 9
40899: PPUSH
40900: CALL_OW 12
40904: ARRAY
40905: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40906: LD_VAR 0 2
40910: PPUSH
40911: LD_VAR 0 3
40915: PPUSH
40916: CALL 41165 0 2
40920: NOT
40921: IFFALSE 40980
// repeat engine := _engine [ 1 ] ;
40923: LD_ADDR_VAR 0 3
40927: PUSH
40928: LD_VAR 0 11
40932: PUSH
40933: LD_INT 1
40935: ARRAY
40936: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40937: LD_ADDR_VAR 0 11
40941: PUSH
40942: LD_VAR 0 11
40946: PPUSH
40947: LD_INT 1
40949: PPUSH
40950: CALL_OW 3
40954: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40955: LD_VAR 0 2
40959: PPUSH
40960: LD_VAR 0 3
40964: PPUSH
40965: CALL 41165 0 2
40969: PUSH
40970: LD_VAR 0 11
40974: PUSH
40975: EMPTY
40976: EQUAL
40977: OR
40978: IFFALSE 40923
// if not control in _control then
40980: LD_VAR 0 4
40984: PUSH
40985: LD_VAR 0 12
40989: IN
40990: NOT
40991: IFFALSE 41017
// control := _control [ rand ( 1 , _control ) ] ;
40993: LD_ADDR_VAR 0 4
40997: PUSH
40998: LD_VAR 0 12
41002: PUSH
41003: LD_INT 1
41005: PPUSH
41006: LD_VAR 0 12
41010: PPUSH
41011: CALL_OW 12
41015: ARRAY
41016: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41017: LD_VAR 0 2
41021: PPUSH
41022: LD_VAR 0 5
41026: PPUSH
41027: CALL 41385 0 2
41031: NOT
41032: IFFALSE 41091
// repeat weapon := _weapon [ 1 ] ;
41034: LD_ADDR_VAR 0 5
41038: PUSH
41039: LD_VAR 0 10
41043: PUSH
41044: LD_INT 1
41046: ARRAY
41047: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41048: LD_ADDR_VAR 0 10
41052: PUSH
41053: LD_VAR 0 10
41057: PPUSH
41058: LD_INT 1
41060: PPUSH
41061: CALL_OW 3
41065: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41066: LD_VAR 0 2
41070: PPUSH
41071: LD_VAR 0 5
41075: PPUSH
41076: CALL 41385 0 2
41080: PUSH
41081: LD_VAR 0 10
41085: PUSH
41086: EMPTY
41087: EQUAL
41088: OR
41089: IFFALSE 41034
// result := [ ] ;
41091: LD_ADDR_VAR 0 6
41095: PUSH
41096: EMPTY
41097: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41098: LD_VAR 0 1
41102: PPUSH
41103: LD_VAR 0 2
41107: PPUSH
41108: LD_VAR 0 3
41112: PPUSH
41113: LD_VAR 0 4
41117: PPUSH
41118: LD_VAR 0 5
41122: PPUSH
41123: CALL_OW 448
41127: IFFALSE 41160
// result := [ chassis , engine , control , weapon ] ;
41129: LD_ADDR_VAR 0 6
41133: PUSH
41134: LD_VAR 0 2
41138: PUSH
41139: LD_VAR 0 3
41143: PUSH
41144: LD_VAR 0 4
41148: PUSH
41149: LD_VAR 0 5
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: ST_TO_ADDR
// end ;
41160: LD_VAR 0 6
41164: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41165: LD_INT 0
41167: PPUSH
// if not chassis or not engine then
41168: LD_VAR 0 1
41172: NOT
41173: PUSH
41174: LD_VAR 0 2
41178: NOT
41179: OR
41180: IFFALSE 41184
// exit ;
41182: GO 41380
// case engine of engine_solar :
41184: LD_VAR 0 2
41188: PUSH
41189: LD_INT 2
41191: DOUBLE
41192: EQUAL
41193: IFTRUE 41197
41195: GO 41235
41197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41198: LD_ADDR_VAR 0 3
41202: PUSH
41203: LD_INT 11
41205: PUSH
41206: LD_INT 12
41208: PUSH
41209: LD_INT 13
41211: PUSH
41212: LD_INT 14
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 3
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: ST_TO_ADDR
41233: GO 41364
41235: LD_INT 1
41237: DOUBLE
41238: EQUAL
41239: IFTRUE 41243
41241: GO 41305
41243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41244: LD_ADDR_VAR 0 3
41248: PUSH
41249: LD_INT 11
41251: PUSH
41252: LD_INT 12
41254: PUSH
41255: LD_INT 13
41257: PUSH
41258: LD_INT 14
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: LD_INT 3
41269: PUSH
41270: LD_INT 4
41272: PUSH
41273: LD_INT 5
41275: PUSH
41276: LD_INT 21
41278: PUSH
41279: LD_INT 23
41281: PUSH
41282: LD_INT 22
41284: PUSH
41285: LD_INT 24
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: ST_TO_ADDR
41303: GO 41364
41305: LD_INT 3
41307: DOUBLE
41308: EQUAL
41309: IFTRUE 41313
41311: GO 41363
41313: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41314: LD_ADDR_VAR 0 3
41318: PUSH
41319: LD_INT 13
41321: PUSH
41322: LD_INT 14
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: LD_INT 3
41330: PUSH
41331: LD_INT 4
41333: PUSH
41334: LD_INT 5
41336: PUSH
41337: LD_INT 21
41339: PUSH
41340: LD_INT 22
41342: PUSH
41343: LD_INT 23
41345: PUSH
41346: LD_INT 24
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: ST_TO_ADDR
41361: GO 41364
41363: POP
// result := ( chassis in result ) ;
41364: LD_ADDR_VAR 0 3
41368: PUSH
41369: LD_VAR 0 1
41373: PUSH
41374: LD_VAR 0 3
41378: IN
41379: ST_TO_ADDR
// end ;
41380: LD_VAR 0 3
41384: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41385: LD_INT 0
41387: PPUSH
// if not chassis or not weapon then
41388: LD_VAR 0 1
41392: NOT
41393: PUSH
41394: LD_VAR 0 2
41398: NOT
41399: OR
41400: IFFALSE 41404
// exit ;
41402: GO 42464
// case weapon of us_machine_gun :
41404: LD_VAR 0 2
41408: PUSH
41409: LD_INT 2
41411: DOUBLE
41412: EQUAL
41413: IFTRUE 41417
41415: GO 41447
41417: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41418: LD_ADDR_VAR 0 3
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 4
41434: PUSH
41435: LD_INT 5
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: ST_TO_ADDR
41445: GO 42448
41447: LD_INT 3
41449: DOUBLE
41450: EQUAL
41451: IFTRUE 41455
41453: GO 41485
41455: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41456: LD_ADDR_VAR 0 3
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 3
41469: PUSH
41470: LD_INT 4
41472: PUSH
41473: LD_INT 5
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: ST_TO_ADDR
41483: GO 42448
41485: LD_INT 11
41487: DOUBLE
41488: EQUAL
41489: IFTRUE 41493
41491: GO 41523
41493: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41494: LD_ADDR_VAR 0 3
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: LD_INT 3
41507: PUSH
41508: LD_INT 4
41510: PUSH
41511: LD_INT 5
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: ST_TO_ADDR
41521: GO 42448
41523: LD_INT 4
41525: DOUBLE
41526: EQUAL
41527: IFTRUE 41531
41529: GO 41557
41531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41532: LD_ADDR_VAR 0 3
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: LD_INT 3
41542: PUSH
41543: LD_INT 4
41545: PUSH
41546: LD_INT 5
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
41555: GO 42448
41557: LD_INT 5
41559: DOUBLE
41560: EQUAL
41561: IFTRUE 41565
41563: GO 41591
41565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41566: LD_ADDR_VAR 0 3
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: LD_INT 4
41579: PUSH
41580: LD_INT 5
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: ST_TO_ADDR
41589: GO 42448
41591: LD_INT 9
41593: DOUBLE
41594: EQUAL
41595: IFTRUE 41599
41597: GO 41625
41599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41600: LD_ADDR_VAR 0 3
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: LD_INT 3
41610: PUSH
41611: LD_INT 4
41613: PUSH
41614: LD_INT 5
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: ST_TO_ADDR
41623: GO 42448
41625: LD_INT 7
41627: DOUBLE
41628: EQUAL
41629: IFTRUE 41633
41631: GO 41659
41633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 3
41644: PUSH
41645: LD_INT 4
41647: PUSH
41648: LD_INT 5
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: ST_TO_ADDR
41657: GO 42448
41659: LD_INT 12
41661: DOUBLE
41662: EQUAL
41663: IFTRUE 41667
41665: GO 41693
41667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41668: LD_ADDR_VAR 0 3
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: LD_INT 3
41678: PUSH
41679: LD_INT 4
41681: PUSH
41682: LD_INT 5
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: ST_TO_ADDR
41691: GO 42448
41693: LD_INT 13
41695: DOUBLE
41696: EQUAL
41697: IFTRUE 41701
41699: GO 41727
41701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41702: LD_ADDR_VAR 0 3
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: LD_INT 3
41712: PUSH
41713: LD_INT 4
41715: PUSH
41716: LD_INT 5
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: ST_TO_ADDR
41725: GO 42448
41727: LD_INT 14
41729: DOUBLE
41730: EQUAL
41731: IFTRUE 41735
41733: GO 41753
41735: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41736: LD_ADDR_VAR 0 3
41740: PUSH
41741: LD_INT 4
41743: PUSH
41744: LD_INT 5
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: ST_TO_ADDR
41751: GO 42448
41753: LD_INT 6
41755: DOUBLE
41756: EQUAL
41757: IFTRUE 41761
41759: GO 41779
41761: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41762: LD_ADDR_VAR 0 3
41766: PUSH
41767: LD_INT 4
41769: PUSH
41770: LD_INT 5
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: ST_TO_ADDR
41777: GO 42448
41779: LD_INT 10
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41787
41785: GO 41805
41787: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41788: LD_ADDR_VAR 0 3
41792: PUSH
41793: LD_INT 4
41795: PUSH
41796: LD_INT 5
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: ST_TO_ADDR
41803: GO 42448
41805: LD_INT 22
41807: DOUBLE
41808: EQUAL
41809: IFTRUE 41813
41811: GO 41839
41813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41814: LD_ADDR_VAR 0 3
41818: PUSH
41819: LD_INT 11
41821: PUSH
41822: LD_INT 12
41824: PUSH
41825: LD_INT 13
41827: PUSH
41828: LD_INT 14
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: ST_TO_ADDR
41837: GO 42448
41839: LD_INT 23
41841: DOUBLE
41842: EQUAL
41843: IFTRUE 41847
41845: GO 41873
41847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41848: LD_ADDR_VAR 0 3
41852: PUSH
41853: LD_INT 11
41855: PUSH
41856: LD_INT 12
41858: PUSH
41859: LD_INT 13
41861: PUSH
41862: LD_INT 14
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: ST_TO_ADDR
41871: GO 42448
41873: LD_INT 24
41875: DOUBLE
41876: EQUAL
41877: IFTRUE 41881
41879: GO 41907
41881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41882: LD_ADDR_VAR 0 3
41886: PUSH
41887: LD_INT 11
41889: PUSH
41890: LD_INT 12
41892: PUSH
41893: LD_INT 13
41895: PUSH
41896: LD_INT 14
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: ST_TO_ADDR
41905: GO 42448
41907: LD_INT 30
41909: DOUBLE
41910: EQUAL
41911: IFTRUE 41915
41913: GO 41941
41915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41916: LD_ADDR_VAR 0 3
41920: PUSH
41921: LD_INT 11
41923: PUSH
41924: LD_INT 12
41926: PUSH
41927: LD_INT 13
41929: PUSH
41930: LD_INT 14
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: ST_TO_ADDR
41939: GO 42448
41941: LD_INT 25
41943: DOUBLE
41944: EQUAL
41945: IFTRUE 41949
41947: GO 41967
41949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41950: LD_ADDR_VAR 0 3
41954: PUSH
41955: LD_INT 13
41957: PUSH
41958: LD_INT 14
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: ST_TO_ADDR
41965: GO 42448
41967: LD_INT 27
41969: DOUBLE
41970: EQUAL
41971: IFTRUE 41975
41973: GO 41993
41975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41976: LD_ADDR_VAR 0 3
41980: PUSH
41981: LD_INT 13
41983: PUSH
41984: LD_INT 14
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: ST_TO_ADDR
41991: GO 42448
41993: LD_INT 92
41995: DOUBLE
41996: EQUAL
41997: IFTRUE 42001
41999: GO 42027
42001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42002: LD_ADDR_VAR 0 3
42006: PUSH
42007: LD_INT 11
42009: PUSH
42010: LD_INT 12
42012: PUSH
42013: LD_INT 13
42015: PUSH
42016: LD_INT 14
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: ST_TO_ADDR
42025: GO 42448
42027: LD_INT 28
42029: DOUBLE
42030: EQUAL
42031: IFTRUE 42035
42033: GO 42053
42035: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42036: LD_ADDR_VAR 0 3
42040: PUSH
42041: LD_INT 13
42043: PUSH
42044: LD_INT 14
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: ST_TO_ADDR
42051: GO 42448
42053: LD_INT 29
42055: DOUBLE
42056: EQUAL
42057: IFTRUE 42061
42059: GO 42079
42061: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: LD_INT 13
42069: PUSH
42070: LD_INT 14
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: ST_TO_ADDR
42077: GO 42448
42079: LD_INT 31
42081: DOUBLE
42082: EQUAL
42083: IFTRUE 42087
42085: GO 42105
42087: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: LD_INT 13
42095: PUSH
42096: LD_INT 14
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: ST_TO_ADDR
42103: GO 42448
42105: LD_INT 26
42107: DOUBLE
42108: EQUAL
42109: IFTRUE 42113
42111: GO 42131
42113: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42114: LD_ADDR_VAR 0 3
42118: PUSH
42119: LD_INT 13
42121: PUSH
42122: LD_INT 14
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: ST_TO_ADDR
42129: GO 42448
42131: LD_INT 42
42133: DOUBLE
42134: EQUAL
42135: IFTRUE 42139
42137: GO 42165
42139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42140: LD_ADDR_VAR 0 3
42144: PUSH
42145: LD_INT 21
42147: PUSH
42148: LD_INT 22
42150: PUSH
42151: LD_INT 23
42153: PUSH
42154: LD_INT 24
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: ST_TO_ADDR
42163: GO 42448
42165: LD_INT 43
42167: DOUBLE
42168: EQUAL
42169: IFTRUE 42173
42171: GO 42199
42173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42174: LD_ADDR_VAR 0 3
42178: PUSH
42179: LD_INT 21
42181: PUSH
42182: LD_INT 22
42184: PUSH
42185: LD_INT 23
42187: PUSH
42188: LD_INT 24
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: ST_TO_ADDR
42197: GO 42448
42199: LD_INT 44
42201: DOUBLE
42202: EQUAL
42203: IFTRUE 42207
42205: GO 42233
42207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42208: LD_ADDR_VAR 0 3
42212: PUSH
42213: LD_INT 21
42215: PUSH
42216: LD_INT 22
42218: PUSH
42219: LD_INT 23
42221: PUSH
42222: LD_INT 24
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: ST_TO_ADDR
42231: GO 42448
42233: LD_INT 45
42235: DOUBLE
42236: EQUAL
42237: IFTRUE 42241
42239: GO 42267
42241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42242: LD_ADDR_VAR 0 3
42246: PUSH
42247: LD_INT 21
42249: PUSH
42250: LD_INT 22
42252: PUSH
42253: LD_INT 23
42255: PUSH
42256: LD_INT 24
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: ST_TO_ADDR
42265: GO 42448
42267: LD_INT 49
42269: DOUBLE
42270: EQUAL
42271: IFTRUE 42275
42273: GO 42301
42275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_INT 21
42283: PUSH
42284: LD_INT 22
42286: PUSH
42287: LD_INT 23
42289: PUSH
42290: LD_INT 24
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: ST_TO_ADDR
42299: GO 42448
42301: LD_INT 51
42303: DOUBLE
42304: EQUAL
42305: IFTRUE 42309
42307: GO 42335
42309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42310: LD_ADDR_VAR 0 3
42314: PUSH
42315: LD_INT 21
42317: PUSH
42318: LD_INT 22
42320: PUSH
42321: LD_INT 23
42323: PUSH
42324: LD_INT 24
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: ST_TO_ADDR
42333: GO 42448
42335: LD_INT 52
42337: DOUBLE
42338: EQUAL
42339: IFTRUE 42343
42341: GO 42369
42343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42344: LD_ADDR_VAR 0 3
42348: PUSH
42349: LD_INT 21
42351: PUSH
42352: LD_INT 22
42354: PUSH
42355: LD_INT 23
42357: PUSH
42358: LD_INT 24
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: ST_TO_ADDR
42367: GO 42448
42369: LD_INT 53
42371: DOUBLE
42372: EQUAL
42373: IFTRUE 42377
42375: GO 42395
42377: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42378: LD_ADDR_VAR 0 3
42382: PUSH
42383: LD_INT 23
42385: PUSH
42386: LD_INT 24
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: ST_TO_ADDR
42393: GO 42448
42395: LD_INT 46
42397: DOUBLE
42398: EQUAL
42399: IFTRUE 42403
42401: GO 42421
42403: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42404: LD_ADDR_VAR 0 3
42408: PUSH
42409: LD_INT 23
42411: PUSH
42412: LD_INT 24
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: ST_TO_ADDR
42419: GO 42448
42421: LD_INT 47
42423: DOUBLE
42424: EQUAL
42425: IFTRUE 42429
42427: GO 42447
42429: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42430: LD_ADDR_VAR 0 3
42434: PUSH
42435: LD_INT 23
42437: PUSH
42438: LD_INT 24
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: ST_TO_ADDR
42445: GO 42448
42447: POP
// result := ( chassis in result ) ;
42448: LD_ADDR_VAR 0 3
42452: PUSH
42453: LD_VAR 0 1
42457: PUSH
42458: LD_VAR 0 3
42462: IN
42463: ST_TO_ADDR
// end ;
42464: LD_VAR 0 3
42468: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42469: LD_INT 0
42471: PPUSH
42472: PPUSH
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
// result := array ;
42478: LD_ADDR_VAR 0 5
42482: PUSH
42483: LD_VAR 0 1
42487: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42488: LD_VAR 0 1
42492: NOT
42493: PUSH
42494: LD_VAR 0 2
42498: NOT
42499: OR
42500: PUSH
42501: LD_VAR 0 3
42505: NOT
42506: OR
42507: PUSH
42508: LD_VAR 0 2
42512: PUSH
42513: LD_VAR 0 1
42517: GREATER
42518: OR
42519: PUSH
42520: LD_VAR 0 3
42524: PUSH
42525: LD_VAR 0 1
42529: GREATER
42530: OR
42531: IFFALSE 42535
// exit ;
42533: GO 42831
// if direction then
42535: LD_VAR 0 4
42539: IFFALSE 42603
// begin d := 1 ;
42541: LD_ADDR_VAR 0 9
42545: PUSH
42546: LD_INT 1
42548: ST_TO_ADDR
// if i_from > i_to then
42549: LD_VAR 0 2
42553: PUSH
42554: LD_VAR 0 3
42558: GREATER
42559: IFFALSE 42585
// length := ( array - i_from ) + i_to else
42561: LD_ADDR_VAR 0 11
42565: PUSH
42566: LD_VAR 0 1
42570: PUSH
42571: LD_VAR 0 2
42575: MINUS
42576: PUSH
42577: LD_VAR 0 3
42581: PLUS
42582: ST_TO_ADDR
42583: GO 42601
// length := i_to - i_from ;
42585: LD_ADDR_VAR 0 11
42589: PUSH
42590: LD_VAR 0 3
42594: PUSH
42595: LD_VAR 0 2
42599: MINUS
42600: ST_TO_ADDR
// end else
42601: GO 42664
// begin d := - 1 ;
42603: LD_ADDR_VAR 0 9
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: ST_TO_ADDR
// if i_from > i_to then
42612: LD_VAR 0 2
42616: PUSH
42617: LD_VAR 0 3
42621: GREATER
42622: IFFALSE 42642
// length := i_from - i_to else
42624: LD_ADDR_VAR 0 11
42628: PUSH
42629: LD_VAR 0 2
42633: PUSH
42634: LD_VAR 0 3
42638: MINUS
42639: ST_TO_ADDR
42640: GO 42664
// length := ( array - i_to ) + i_from ;
42642: LD_ADDR_VAR 0 11
42646: PUSH
42647: LD_VAR 0 1
42651: PUSH
42652: LD_VAR 0 3
42656: MINUS
42657: PUSH
42658: LD_VAR 0 2
42662: PLUS
42663: ST_TO_ADDR
// end ; if not length then
42664: LD_VAR 0 11
42668: NOT
42669: IFFALSE 42673
// exit ;
42671: GO 42831
// tmp := array ;
42673: LD_ADDR_VAR 0 10
42677: PUSH
42678: LD_VAR 0 1
42682: ST_TO_ADDR
// for i = 1 to length do
42683: LD_ADDR_VAR 0 6
42687: PUSH
42688: DOUBLE
42689: LD_INT 1
42691: DEC
42692: ST_TO_ADDR
42693: LD_VAR 0 11
42697: PUSH
42698: FOR_TO
42699: IFFALSE 42819
// begin for j = 1 to array do
42701: LD_ADDR_VAR 0 7
42705: PUSH
42706: DOUBLE
42707: LD_INT 1
42709: DEC
42710: ST_TO_ADDR
42711: LD_VAR 0 1
42715: PUSH
42716: FOR_TO
42717: IFFALSE 42805
// begin k := j + d ;
42719: LD_ADDR_VAR 0 8
42723: PUSH
42724: LD_VAR 0 7
42728: PUSH
42729: LD_VAR 0 9
42733: PLUS
42734: ST_TO_ADDR
// if k > array then
42735: LD_VAR 0 8
42739: PUSH
42740: LD_VAR 0 1
42744: GREATER
42745: IFFALSE 42755
// k := 1 ;
42747: LD_ADDR_VAR 0 8
42751: PUSH
42752: LD_INT 1
42754: ST_TO_ADDR
// if not k then
42755: LD_VAR 0 8
42759: NOT
42760: IFFALSE 42772
// k := array ;
42762: LD_ADDR_VAR 0 8
42766: PUSH
42767: LD_VAR 0 1
42771: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42772: LD_ADDR_VAR 0 10
42776: PUSH
42777: LD_VAR 0 10
42781: PPUSH
42782: LD_VAR 0 8
42786: PPUSH
42787: LD_VAR 0 1
42791: PUSH
42792: LD_VAR 0 7
42796: ARRAY
42797: PPUSH
42798: CALL_OW 1
42802: ST_TO_ADDR
// end ;
42803: GO 42716
42805: POP
42806: POP
// array := tmp ;
42807: LD_ADDR_VAR 0 1
42811: PUSH
42812: LD_VAR 0 10
42816: ST_TO_ADDR
// end ;
42817: GO 42698
42819: POP
42820: POP
// result := array ;
42821: LD_ADDR_VAR 0 5
42825: PUSH
42826: LD_VAR 0 1
42830: ST_TO_ADDR
// end ;
42831: LD_VAR 0 5
42835: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42836: LD_INT 0
42838: PPUSH
42839: PPUSH
// result := 0 ;
42840: LD_ADDR_VAR 0 3
42844: PUSH
42845: LD_INT 0
42847: ST_TO_ADDR
// if not array or not value in array then
42848: LD_VAR 0 1
42852: NOT
42853: PUSH
42854: LD_VAR 0 2
42858: PUSH
42859: LD_VAR 0 1
42863: IN
42864: NOT
42865: OR
42866: IFFALSE 42870
// exit ;
42868: GO 42924
// for i = 1 to array do
42870: LD_ADDR_VAR 0 4
42874: PUSH
42875: DOUBLE
42876: LD_INT 1
42878: DEC
42879: ST_TO_ADDR
42880: LD_VAR 0 1
42884: PUSH
42885: FOR_TO
42886: IFFALSE 42922
// if value = array [ i ] then
42888: LD_VAR 0 2
42892: PUSH
42893: LD_VAR 0 1
42897: PUSH
42898: LD_VAR 0 4
42902: ARRAY
42903: EQUAL
42904: IFFALSE 42920
// begin result := i ;
42906: LD_ADDR_VAR 0 3
42910: PUSH
42911: LD_VAR 0 4
42915: ST_TO_ADDR
// exit ;
42916: POP
42917: POP
42918: GO 42924
// end ;
42920: GO 42885
42922: POP
42923: POP
// end ;
42924: LD_VAR 0 3
42928: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42929: LD_INT 0
42931: PPUSH
// vc_chassis := chassis ;
42932: LD_ADDR_OWVAR 37
42936: PUSH
42937: LD_VAR 0 1
42941: ST_TO_ADDR
// vc_engine := engine ;
42942: LD_ADDR_OWVAR 39
42946: PUSH
42947: LD_VAR 0 2
42951: ST_TO_ADDR
// vc_control := control ;
42952: LD_ADDR_OWVAR 38
42956: PUSH
42957: LD_VAR 0 3
42961: ST_TO_ADDR
// vc_weapon := weapon ;
42962: LD_ADDR_OWVAR 40
42966: PUSH
42967: LD_VAR 0 4
42971: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42972: LD_ADDR_OWVAR 41
42976: PUSH
42977: LD_VAR 0 5
42981: ST_TO_ADDR
// end ;
42982: LD_VAR 0 6
42986: RET
// export function WantPlant ( unit ) ; var task ; begin
42987: LD_INT 0
42989: PPUSH
42990: PPUSH
// result := false ;
42991: LD_ADDR_VAR 0 2
42995: PUSH
42996: LD_INT 0
42998: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42999: LD_ADDR_VAR 0 3
43003: PUSH
43004: LD_VAR 0 1
43008: PPUSH
43009: CALL_OW 437
43013: ST_TO_ADDR
// if task then
43014: LD_VAR 0 3
43018: IFFALSE 43046
// if task [ 1 ] [ 1 ] = p then
43020: LD_VAR 0 3
43024: PUSH
43025: LD_INT 1
43027: ARRAY
43028: PUSH
43029: LD_INT 1
43031: ARRAY
43032: PUSH
43033: LD_STRING p
43035: EQUAL
43036: IFFALSE 43046
// result := true ;
43038: LD_ADDR_VAR 0 2
43042: PUSH
43043: LD_INT 1
43045: ST_TO_ADDR
// end ;
43046: LD_VAR 0 2
43050: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43051: LD_INT 0
43053: PPUSH
43054: PPUSH
43055: PPUSH
43056: PPUSH
// if pos < 1 then
43057: LD_VAR 0 2
43061: PUSH
43062: LD_INT 1
43064: LESS
43065: IFFALSE 43069
// exit ;
43067: GO 43372
// if pos = 1 then
43069: LD_VAR 0 2
43073: PUSH
43074: LD_INT 1
43076: EQUAL
43077: IFFALSE 43110
// result := Replace ( arr , pos [ 1 ] , value ) else
43079: LD_ADDR_VAR 0 4
43083: PUSH
43084: LD_VAR 0 1
43088: PPUSH
43089: LD_VAR 0 2
43093: PUSH
43094: LD_INT 1
43096: ARRAY
43097: PPUSH
43098: LD_VAR 0 3
43102: PPUSH
43103: CALL_OW 1
43107: ST_TO_ADDR
43108: GO 43372
// begin tmp := arr ;
43110: LD_ADDR_VAR 0 6
43114: PUSH
43115: LD_VAR 0 1
43119: ST_TO_ADDR
// s_arr := [ tmp ] ;
43120: LD_ADDR_VAR 0 7
43124: PUSH
43125: LD_VAR 0 6
43129: PUSH
43130: EMPTY
43131: LIST
43132: ST_TO_ADDR
// for i = 1 to pos - 1 do
43133: LD_ADDR_VAR 0 5
43137: PUSH
43138: DOUBLE
43139: LD_INT 1
43141: DEC
43142: ST_TO_ADDR
43143: LD_VAR 0 2
43147: PUSH
43148: LD_INT 1
43150: MINUS
43151: PUSH
43152: FOR_TO
43153: IFFALSE 43198
// begin tmp := tmp [ pos [ i ] ] ;
43155: LD_ADDR_VAR 0 6
43159: PUSH
43160: LD_VAR 0 6
43164: PUSH
43165: LD_VAR 0 2
43169: PUSH
43170: LD_VAR 0 5
43174: ARRAY
43175: ARRAY
43176: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43177: LD_ADDR_VAR 0 7
43181: PUSH
43182: LD_VAR 0 7
43186: PUSH
43187: LD_VAR 0 6
43191: PUSH
43192: EMPTY
43193: LIST
43194: ADD
43195: ST_TO_ADDR
// end ;
43196: GO 43152
43198: POP
43199: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43200: LD_ADDR_VAR 0 6
43204: PUSH
43205: LD_VAR 0 6
43209: PPUSH
43210: LD_VAR 0 2
43214: PUSH
43215: LD_VAR 0 2
43219: ARRAY
43220: PPUSH
43221: LD_VAR 0 3
43225: PPUSH
43226: CALL_OW 1
43230: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43231: LD_ADDR_VAR 0 7
43235: PUSH
43236: LD_VAR 0 7
43240: PPUSH
43241: LD_VAR 0 7
43245: PPUSH
43246: LD_VAR 0 6
43250: PPUSH
43251: CALL_OW 1
43255: ST_TO_ADDR
// for i = s_arr downto 2 do
43256: LD_ADDR_VAR 0 5
43260: PUSH
43261: DOUBLE
43262: LD_VAR 0 7
43266: INC
43267: ST_TO_ADDR
43268: LD_INT 2
43270: PUSH
43271: FOR_DOWNTO
43272: IFFALSE 43356
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43274: LD_ADDR_VAR 0 6
43278: PUSH
43279: LD_VAR 0 7
43283: PUSH
43284: LD_VAR 0 5
43288: PUSH
43289: LD_INT 1
43291: MINUS
43292: ARRAY
43293: PPUSH
43294: LD_VAR 0 2
43298: PUSH
43299: LD_VAR 0 5
43303: PUSH
43304: LD_INT 1
43306: MINUS
43307: ARRAY
43308: PPUSH
43309: LD_VAR 0 7
43313: PUSH
43314: LD_VAR 0 5
43318: ARRAY
43319: PPUSH
43320: CALL_OW 1
43324: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43325: LD_ADDR_VAR 0 7
43329: PUSH
43330: LD_VAR 0 7
43334: PPUSH
43335: LD_VAR 0 5
43339: PUSH
43340: LD_INT 1
43342: MINUS
43343: PPUSH
43344: LD_VAR 0 6
43348: PPUSH
43349: CALL_OW 1
43353: ST_TO_ADDR
// end ;
43354: GO 43271
43356: POP
43357: POP
// result := s_arr [ 1 ] ;
43358: LD_ADDR_VAR 0 4
43362: PUSH
43363: LD_VAR 0 7
43367: PUSH
43368: LD_INT 1
43370: ARRAY
43371: ST_TO_ADDR
// end ; end ;
43372: LD_VAR 0 4
43376: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43377: LD_INT 0
43379: PPUSH
43380: PPUSH
// if not list then
43381: LD_VAR 0 1
43385: NOT
43386: IFFALSE 43390
// exit ;
43388: GO 43481
// i := list [ pos1 ] ;
43390: LD_ADDR_VAR 0 5
43394: PUSH
43395: LD_VAR 0 1
43399: PUSH
43400: LD_VAR 0 2
43404: ARRAY
43405: ST_TO_ADDR
// if not i then
43406: LD_VAR 0 5
43410: NOT
43411: IFFALSE 43415
// exit ;
43413: GO 43481
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43415: LD_ADDR_VAR 0 1
43419: PUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: LD_VAR 0 2
43429: PPUSH
43430: LD_VAR 0 1
43434: PUSH
43435: LD_VAR 0 3
43439: ARRAY
43440: PPUSH
43441: CALL_OW 1
43445: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43446: LD_ADDR_VAR 0 1
43450: PUSH
43451: LD_VAR 0 1
43455: PPUSH
43456: LD_VAR 0 3
43460: PPUSH
43461: LD_VAR 0 5
43465: PPUSH
43466: CALL_OW 1
43470: ST_TO_ADDR
// result := list ;
43471: LD_ADDR_VAR 0 4
43475: PUSH
43476: LD_VAR 0 1
43480: ST_TO_ADDR
// end ;
43481: LD_VAR 0 4
43485: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43486: LD_INT 0
43488: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43489: LD_ADDR_VAR 0 5
43493: PUSH
43494: LD_VAR 0 1
43498: PPUSH
43499: CALL_OW 250
43503: PPUSH
43504: LD_VAR 0 1
43508: PPUSH
43509: CALL_OW 251
43513: PPUSH
43514: LD_VAR 0 2
43518: PPUSH
43519: LD_VAR 0 3
43523: PPUSH
43524: LD_VAR 0 4
43528: PPUSH
43529: CALL 43539 0 5
43533: ST_TO_ADDR
// end ;
43534: LD_VAR 0 5
43538: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43539: LD_INT 0
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
// if not list then
43545: LD_VAR 0 3
43549: NOT
43550: IFFALSE 43554
// exit ;
43552: GO 43942
// result := [ ] ;
43554: LD_ADDR_VAR 0 6
43558: PUSH
43559: EMPTY
43560: ST_TO_ADDR
// for i in list do
43561: LD_ADDR_VAR 0 7
43565: PUSH
43566: LD_VAR 0 3
43570: PUSH
43571: FOR_IN
43572: IFFALSE 43774
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43574: LD_ADDR_VAR 0 9
43578: PUSH
43579: LD_VAR 0 7
43583: PPUSH
43584: LD_VAR 0 1
43588: PPUSH
43589: LD_VAR 0 2
43593: PPUSH
43594: CALL_OW 297
43598: ST_TO_ADDR
// if not result then
43599: LD_VAR 0 6
43603: NOT
43604: IFFALSE 43630
// result := [ [ i , tmp ] ] else
43606: LD_ADDR_VAR 0 6
43610: PUSH
43611: LD_VAR 0 7
43615: PUSH
43616: LD_VAR 0 9
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: EMPTY
43626: LIST
43627: ST_TO_ADDR
43628: GO 43772
// begin if result [ result ] [ 2 ] < tmp then
43630: LD_VAR 0 6
43634: PUSH
43635: LD_VAR 0 6
43639: ARRAY
43640: PUSH
43641: LD_INT 2
43643: ARRAY
43644: PUSH
43645: LD_VAR 0 9
43649: LESS
43650: IFFALSE 43692
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43652: LD_ADDR_VAR 0 6
43656: PUSH
43657: LD_VAR 0 6
43661: PPUSH
43662: LD_VAR 0 6
43666: PUSH
43667: LD_INT 1
43669: PLUS
43670: PPUSH
43671: LD_VAR 0 7
43675: PUSH
43676: LD_VAR 0 9
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PPUSH
43685: CALL_OW 2
43689: ST_TO_ADDR
43690: GO 43772
// for j = 1 to result do
43692: LD_ADDR_VAR 0 8
43696: PUSH
43697: DOUBLE
43698: LD_INT 1
43700: DEC
43701: ST_TO_ADDR
43702: LD_VAR 0 6
43706: PUSH
43707: FOR_TO
43708: IFFALSE 43770
// begin if tmp < result [ j ] [ 2 ] then
43710: LD_VAR 0 9
43714: PUSH
43715: LD_VAR 0 6
43719: PUSH
43720: LD_VAR 0 8
43724: ARRAY
43725: PUSH
43726: LD_INT 2
43728: ARRAY
43729: LESS
43730: IFFALSE 43768
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43732: LD_ADDR_VAR 0 6
43736: PUSH
43737: LD_VAR 0 6
43741: PPUSH
43742: LD_VAR 0 8
43746: PPUSH
43747: LD_VAR 0 7
43751: PUSH
43752: LD_VAR 0 9
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PPUSH
43761: CALL_OW 2
43765: ST_TO_ADDR
// break ;
43766: GO 43770
// end ; end ;
43768: GO 43707
43770: POP
43771: POP
// end ; end ;
43772: GO 43571
43774: POP
43775: POP
// if result and not asc then
43776: LD_VAR 0 6
43780: PUSH
43781: LD_VAR 0 4
43785: NOT
43786: AND
43787: IFFALSE 43862
// begin tmp := result ;
43789: LD_ADDR_VAR 0 9
43793: PUSH
43794: LD_VAR 0 6
43798: ST_TO_ADDR
// for i = tmp downto 1 do
43799: LD_ADDR_VAR 0 7
43803: PUSH
43804: DOUBLE
43805: LD_VAR 0 9
43809: INC
43810: ST_TO_ADDR
43811: LD_INT 1
43813: PUSH
43814: FOR_DOWNTO
43815: IFFALSE 43860
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43817: LD_ADDR_VAR 0 6
43821: PUSH
43822: LD_VAR 0 6
43826: PPUSH
43827: LD_VAR 0 9
43831: PUSH
43832: LD_VAR 0 7
43836: MINUS
43837: PUSH
43838: LD_INT 1
43840: PLUS
43841: PPUSH
43842: LD_VAR 0 9
43846: PUSH
43847: LD_VAR 0 7
43851: ARRAY
43852: PPUSH
43853: CALL_OW 1
43857: ST_TO_ADDR
43858: GO 43814
43860: POP
43861: POP
// end ; tmp := [ ] ;
43862: LD_ADDR_VAR 0 9
43866: PUSH
43867: EMPTY
43868: ST_TO_ADDR
// if mode then
43869: LD_VAR 0 5
43873: IFFALSE 43942
// begin for i = 1 to result do
43875: LD_ADDR_VAR 0 7
43879: PUSH
43880: DOUBLE
43881: LD_INT 1
43883: DEC
43884: ST_TO_ADDR
43885: LD_VAR 0 6
43889: PUSH
43890: FOR_TO
43891: IFFALSE 43930
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43893: LD_ADDR_VAR 0 9
43897: PUSH
43898: LD_VAR 0 9
43902: PPUSH
43903: LD_VAR 0 7
43907: PPUSH
43908: LD_VAR 0 6
43912: PUSH
43913: LD_VAR 0 7
43917: ARRAY
43918: PUSH
43919: LD_INT 1
43921: ARRAY
43922: PPUSH
43923: CALL_OW 1
43927: ST_TO_ADDR
43928: GO 43890
43930: POP
43931: POP
// result := tmp ;
43932: LD_ADDR_VAR 0 6
43936: PUSH
43937: LD_VAR 0 9
43941: ST_TO_ADDR
// end ; end ;
43942: LD_VAR 0 6
43946: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43947: LD_INT 0
43949: PPUSH
43950: PPUSH
43951: PPUSH
43952: PPUSH
43953: PPUSH
43954: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43955: LD_ADDR_VAR 0 5
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// if not x or not y then
43977: LD_VAR 0 2
43981: NOT
43982: PUSH
43983: LD_VAR 0 3
43987: NOT
43988: OR
43989: IFFALSE 43993
// exit ;
43991: GO 45643
// if not range then
43993: LD_VAR 0 4
43997: NOT
43998: IFFALSE 44008
// range := 10 ;
44000: LD_ADDR_VAR 0 4
44004: PUSH
44005: LD_INT 10
44007: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44008: LD_ADDR_VAR 0 8
44012: PUSH
44013: LD_INT 81
44015: PUSH
44016: LD_VAR 0 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 92
44027: PUSH
44028: LD_VAR 0 2
44032: PUSH
44033: LD_VAR 0 3
44037: PUSH
44038: LD_VAR 0 4
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: LD_INT 21
44054: PUSH
44055: LD_INT 3
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: PPUSH
44071: CALL_OW 69
44075: ST_TO_ADDR
// if not tmp then
44076: LD_VAR 0 8
44080: NOT
44081: IFFALSE 44085
// exit ;
44083: GO 45643
// for i in tmp do
44085: LD_ADDR_VAR 0 6
44089: PUSH
44090: LD_VAR 0 8
44094: PUSH
44095: FOR_IN
44096: IFFALSE 45618
// begin points := [ 0 , 0 , 0 ] ;
44098: LD_ADDR_VAR 0 9
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: LIST
44116: ST_TO_ADDR
// bpoints := 1 ;
44117: LD_ADDR_VAR 0 10
44121: PUSH
44122: LD_INT 1
44124: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44125: LD_VAR 0 6
44129: PPUSH
44130: CALL_OW 247
44134: PUSH
44135: LD_INT 1
44137: DOUBLE
44138: EQUAL
44139: IFTRUE 44143
44141: GO 44721
44143: POP
// begin if GetClass ( i ) = 1 then
44144: LD_VAR 0 6
44148: PPUSH
44149: CALL_OW 257
44153: PUSH
44154: LD_INT 1
44156: EQUAL
44157: IFFALSE 44178
// points := [ 10 , 5 , 3 ] ;
44159: LD_ADDR_VAR 0 9
44163: PUSH
44164: LD_INT 10
44166: PUSH
44167: LD_INT 5
44169: PUSH
44170: LD_INT 3
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44178: LD_VAR 0 6
44182: PPUSH
44183: CALL_OW 257
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: LD_INT 3
44193: PUSH
44194: LD_INT 4
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: IN
44202: IFFALSE 44223
// points := [ 3 , 2 , 1 ] ;
44204: LD_ADDR_VAR 0 9
44208: PUSH
44209: LD_INT 3
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44223: LD_VAR 0 6
44227: PPUSH
44228: CALL_OW 257
44232: PUSH
44233: LD_INT 5
44235: EQUAL
44236: IFFALSE 44257
// points := [ 130 , 5 , 2 ] ;
44238: LD_ADDR_VAR 0 9
44242: PUSH
44243: LD_INT 130
44245: PUSH
44246: LD_INT 5
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: LIST
44256: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44257: LD_VAR 0 6
44261: PPUSH
44262: CALL_OW 257
44266: PUSH
44267: LD_INT 8
44269: EQUAL
44270: IFFALSE 44291
// points := [ 35 , 35 , 30 ] ;
44272: LD_ADDR_VAR 0 9
44276: PUSH
44277: LD_INT 35
44279: PUSH
44280: LD_INT 35
44282: PUSH
44283: LD_INT 30
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44291: LD_VAR 0 6
44295: PPUSH
44296: CALL_OW 257
44300: PUSH
44301: LD_INT 9
44303: EQUAL
44304: IFFALSE 44325
// points := [ 20 , 55 , 40 ] ;
44306: LD_ADDR_VAR 0 9
44310: PUSH
44311: LD_INT 20
44313: PUSH
44314: LD_INT 55
44316: PUSH
44317: LD_INT 40
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44325: LD_VAR 0 6
44329: PPUSH
44330: CALL_OW 257
44334: PUSH
44335: LD_INT 12
44337: PUSH
44338: LD_INT 16
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: IN
44345: IFFALSE 44366
// points := [ 5 , 3 , 2 ] ;
44347: LD_ADDR_VAR 0 9
44351: PUSH
44352: LD_INT 5
44354: PUSH
44355: LD_INT 3
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: LIST
44365: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44366: LD_VAR 0 6
44370: PPUSH
44371: CALL_OW 257
44375: PUSH
44376: LD_INT 17
44378: EQUAL
44379: IFFALSE 44400
// points := [ 100 , 50 , 75 ] ;
44381: LD_ADDR_VAR 0 9
44385: PUSH
44386: LD_INT 100
44388: PUSH
44389: LD_INT 50
44391: PUSH
44392: LD_INT 75
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: LIST
44399: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44400: LD_VAR 0 6
44404: PPUSH
44405: CALL_OW 257
44409: PUSH
44410: LD_INT 15
44412: EQUAL
44413: IFFALSE 44434
// points := [ 10 , 5 , 3 ] ;
44415: LD_ADDR_VAR 0 9
44419: PUSH
44420: LD_INT 10
44422: PUSH
44423: LD_INT 5
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: LIST
44433: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44434: LD_VAR 0 6
44438: PPUSH
44439: CALL_OW 257
44443: PUSH
44444: LD_INT 14
44446: EQUAL
44447: IFFALSE 44468
// points := [ 10 , 0 , 0 ] ;
44449: LD_ADDR_VAR 0 9
44453: PUSH
44454: LD_INT 10
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44468: LD_VAR 0 6
44472: PPUSH
44473: CALL_OW 257
44477: PUSH
44478: LD_INT 11
44480: EQUAL
44481: IFFALSE 44502
// points := [ 30 , 10 , 5 ] ;
44483: LD_ADDR_VAR 0 9
44487: PUSH
44488: LD_INT 30
44490: PUSH
44491: LD_INT 10
44493: PUSH
44494: LD_INT 5
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44502: LD_VAR 0 1
44506: PPUSH
44507: LD_INT 5
44509: PPUSH
44510: CALL_OW 321
44514: PUSH
44515: LD_INT 2
44517: EQUAL
44518: IFFALSE 44535
// bpoints := bpoints * 1.8 ;
44520: LD_ADDR_VAR 0 10
44524: PUSH
44525: LD_VAR 0 10
44529: PUSH
44530: LD_REAL  1.80000000000000E+0000
44533: MUL
44534: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44535: LD_VAR 0 6
44539: PPUSH
44540: CALL_OW 257
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 3
44553: PUSH
44554: LD_INT 4
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: IN
44563: PUSH
44564: LD_VAR 0 1
44568: PPUSH
44569: LD_INT 51
44571: PPUSH
44572: CALL_OW 321
44576: PUSH
44577: LD_INT 2
44579: EQUAL
44580: AND
44581: IFFALSE 44598
// bpoints := bpoints * 1.2 ;
44583: LD_ADDR_VAR 0 10
44587: PUSH
44588: LD_VAR 0 10
44592: PUSH
44593: LD_REAL  1.20000000000000E+0000
44596: MUL
44597: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44598: LD_VAR 0 6
44602: PPUSH
44603: CALL_OW 257
44607: PUSH
44608: LD_INT 5
44610: PUSH
44611: LD_INT 7
44613: PUSH
44614: LD_INT 9
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: IN
44622: PUSH
44623: LD_VAR 0 1
44627: PPUSH
44628: LD_INT 52
44630: PPUSH
44631: CALL_OW 321
44635: PUSH
44636: LD_INT 2
44638: EQUAL
44639: AND
44640: IFFALSE 44657
// bpoints := bpoints * 1.5 ;
44642: LD_ADDR_VAR 0 10
44646: PUSH
44647: LD_VAR 0 10
44651: PUSH
44652: LD_REAL  1.50000000000000E+0000
44655: MUL
44656: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44657: LD_VAR 0 1
44661: PPUSH
44662: LD_INT 66
44664: PPUSH
44665: CALL_OW 321
44669: PUSH
44670: LD_INT 2
44672: EQUAL
44673: IFFALSE 44690
// bpoints := bpoints * 1.1 ;
44675: LD_ADDR_VAR 0 10
44679: PUSH
44680: LD_VAR 0 10
44684: PUSH
44685: LD_REAL  1.10000000000000E+0000
44688: MUL
44689: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44690: LD_ADDR_VAR 0 10
44694: PUSH
44695: LD_VAR 0 10
44699: PUSH
44700: LD_VAR 0 6
44704: PPUSH
44705: LD_INT 1
44707: PPUSH
44708: CALL_OW 259
44712: PUSH
44713: LD_REAL  1.15000000000000E+0000
44716: MUL
44717: MUL
44718: ST_TO_ADDR
// end ; unit_vehicle :
44719: GO 45547
44721: LD_INT 2
44723: DOUBLE
44724: EQUAL
44725: IFTRUE 44729
44727: GO 45535
44729: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44730: LD_VAR 0 6
44734: PPUSH
44735: CALL_OW 264
44739: PUSH
44740: LD_INT 2
44742: PUSH
44743: LD_INT 42
44745: PUSH
44746: LD_INT 24
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: IN
44754: IFFALSE 44775
// points := [ 25 , 5 , 3 ] ;
44756: LD_ADDR_VAR 0 9
44760: PUSH
44761: LD_INT 25
44763: PUSH
44764: LD_INT 5
44766: PUSH
44767: LD_INT 3
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: LIST
44774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44775: LD_VAR 0 6
44779: PPUSH
44780: CALL_OW 264
44784: PUSH
44785: LD_INT 4
44787: PUSH
44788: LD_INT 43
44790: PUSH
44791: LD_INT 25
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: IN
44799: IFFALSE 44820
// points := [ 40 , 15 , 5 ] ;
44801: LD_ADDR_VAR 0 9
44805: PUSH
44806: LD_INT 40
44808: PUSH
44809: LD_INT 15
44811: PUSH
44812: LD_INT 5
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44820: LD_VAR 0 6
44824: PPUSH
44825: CALL_OW 264
44829: PUSH
44830: LD_INT 3
44832: PUSH
44833: LD_INT 23
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: IN
44840: IFFALSE 44861
// points := [ 7 , 25 , 8 ] ;
44842: LD_ADDR_VAR 0 9
44846: PUSH
44847: LD_INT 7
44849: PUSH
44850: LD_INT 25
44852: PUSH
44853: LD_INT 8
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44861: LD_VAR 0 6
44865: PPUSH
44866: CALL_OW 264
44870: PUSH
44871: LD_INT 5
44873: PUSH
44874: LD_INT 27
44876: PUSH
44877: LD_INT 44
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: IN
44885: IFFALSE 44906
// points := [ 14 , 50 , 16 ] ;
44887: LD_ADDR_VAR 0 9
44891: PUSH
44892: LD_INT 14
44894: PUSH
44895: LD_INT 50
44897: PUSH
44898: LD_INT 16
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44906: LD_VAR 0 6
44910: PPUSH
44911: CALL_OW 264
44915: PUSH
44916: LD_INT 6
44918: PUSH
44919: LD_INT 46
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: IN
44926: IFFALSE 44947
// points := [ 32 , 120 , 70 ] ;
44928: LD_ADDR_VAR 0 9
44932: PUSH
44933: LD_INT 32
44935: PUSH
44936: LD_INT 120
44938: PUSH
44939: LD_INT 70
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44947: LD_VAR 0 6
44951: PPUSH
44952: CALL_OW 264
44956: PUSH
44957: LD_INT 7
44959: PUSH
44960: LD_INT 28
44962: PUSH
44963: LD_INT 45
44965: PUSH
44966: LD_INT 92
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: IN
44975: IFFALSE 44996
// points := [ 35 , 20 , 45 ] ;
44977: LD_ADDR_VAR 0 9
44981: PUSH
44982: LD_INT 35
44984: PUSH
44985: LD_INT 20
44987: PUSH
44988: LD_INT 45
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44996: LD_VAR 0 6
45000: PPUSH
45001: CALL_OW 264
45005: PUSH
45006: LD_INT 47
45008: PUSH
45009: EMPTY
45010: LIST
45011: IN
45012: IFFALSE 45033
// points := [ 67 , 45 , 75 ] ;
45014: LD_ADDR_VAR 0 9
45018: PUSH
45019: LD_INT 67
45021: PUSH
45022: LD_INT 45
45024: PUSH
45025: LD_INT 75
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45033: LD_VAR 0 6
45037: PPUSH
45038: CALL_OW 264
45042: PUSH
45043: LD_INT 26
45045: PUSH
45046: EMPTY
45047: LIST
45048: IN
45049: IFFALSE 45070
// points := [ 120 , 30 , 80 ] ;
45051: LD_ADDR_VAR 0 9
45055: PUSH
45056: LD_INT 120
45058: PUSH
45059: LD_INT 30
45061: PUSH
45062: LD_INT 80
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45070: LD_VAR 0 6
45074: PPUSH
45075: CALL_OW 264
45079: PUSH
45080: LD_INT 22
45082: PUSH
45083: EMPTY
45084: LIST
45085: IN
45086: IFFALSE 45107
// points := [ 40 , 1 , 1 ] ;
45088: LD_ADDR_VAR 0 9
45092: PUSH
45093: LD_INT 40
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45107: LD_VAR 0 6
45111: PPUSH
45112: CALL_OW 264
45116: PUSH
45117: LD_INT 29
45119: PUSH
45120: EMPTY
45121: LIST
45122: IN
45123: IFFALSE 45144
// points := [ 70 , 200 , 400 ] ;
45125: LD_ADDR_VAR 0 9
45129: PUSH
45130: LD_INT 70
45132: PUSH
45133: LD_INT 200
45135: PUSH
45136: LD_INT 400
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45144: LD_VAR 0 6
45148: PPUSH
45149: CALL_OW 264
45153: PUSH
45154: LD_INT 14
45156: PUSH
45157: LD_INT 53
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: IN
45164: IFFALSE 45185
// points := [ 40 , 10 , 20 ] ;
45166: LD_ADDR_VAR 0 9
45170: PUSH
45171: LD_INT 40
45173: PUSH
45174: LD_INT 10
45176: PUSH
45177: LD_INT 20
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: LIST
45184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45185: LD_VAR 0 6
45189: PPUSH
45190: CALL_OW 264
45194: PUSH
45195: LD_INT 9
45197: PUSH
45198: EMPTY
45199: LIST
45200: IN
45201: IFFALSE 45222
// points := [ 5 , 70 , 20 ] ;
45203: LD_ADDR_VAR 0 9
45207: PUSH
45208: LD_INT 5
45210: PUSH
45211: LD_INT 70
45213: PUSH
45214: LD_INT 20
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45222: LD_VAR 0 6
45226: PPUSH
45227: CALL_OW 264
45231: PUSH
45232: LD_INT 10
45234: PUSH
45235: EMPTY
45236: LIST
45237: IN
45238: IFFALSE 45259
// points := [ 35 , 110 , 70 ] ;
45240: LD_ADDR_VAR 0 9
45244: PUSH
45245: LD_INT 35
45247: PUSH
45248: LD_INT 110
45250: PUSH
45251: LD_INT 70
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45259: LD_VAR 0 6
45263: PPUSH
45264: CALL_OW 265
45268: PUSH
45269: LD_INT 25
45271: EQUAL
45272: IFFALSE 45293
// points := [ 80 , 65 , 100 ] ;
45274: LD_ADDR_VAR 0 9
45278: PUSH
45279: LD_INT 80
45281: PUSH
45282: LD_INT 65
45284: PUSH
45285: LD_INT 100
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45293: LD_VAR 0 6
45297: PPUSH
45298: CALL_OW 263
45302: PUSH
45303: LD_INT 1
45305: EQUAL
45306: IFFALSE 45341
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45308: LD_ADDR_VAR 0 10
45312: PUSH
45313: LD_VAR 0 10
45317: PUSH
45318: LD_VAR 0 6
45322: PPUSH
45323: CALL_OW 311
45327: PPUSH
45328: LD_INT 3
45330: PPUSH
45331: CALL_OW 259
45335: PUSH
45336: LD_INT 4
45338: MUL
45339: MUL
45340: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45341: LD_VAR 0 6
45345: PPUSH
45346: CALL_OW 263
45350: PUSH
45351: LD_INT 2
45353: EQUAL
45354: IFFALSE 45405
// begin j := IsControledBy ( i ) ;
45356: LD_ADDR_VAR 0 7
45360: PUSH
45361: LD_VAR 0 6
45365: PPUSH
45366: CALL_OW 312
45370: ST_TO_ADDR
// if j then
45371: LD_VAR 0 7
45375: IFFALSE 45405
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45377: LD_ADDR_VAR 0 10
45381: PUSH
45382: LD_VAR 0 10
45386: PUSH
45387: LD_VAR 0 7
45391: PPUSH
45392: LD_INT 3
45394: PPUSH
45395: CALL_OW 259
45399: PUSH
45400: LD_INT 3
45402: MUL
45403: MUL
45404: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45405: LD_VAR 0 6
45409: PPUSH
45410: CALL_OW 264
45414: PUSH
45415: LD_INT 5
45417: PUSH
45418: LD_INT 6
45420: PUSH
45421: LD_INT 46
45423: PUSH
45424: LD_INT 44
45426: PUSH
45427: LD_INT 47
45429: PUSH
45430: LD_INT 45
45432: PUSH
45433: LD_INT 28
45435: PUSH
45436: LD_INT 7
45438: PUSH
45439: LD_INT 27
45441: PUSH
45442: LD_INT 29
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: IN
45457: PUSH
45458: LD_VAR 0 1
45462: PPUSH
45463: LD_INT 52
45465: PPUSH
45466: CALL_OW 321
45470: PUSH
45471: LD_INT 2
45473: EQUAL
45474: AND
45475: IFFALSE 45492
// bpoints := bpoints * 1.2 ;
45477: LD_ADDR_VAR 0 10
45481: PUSH
45482: LD_VAR 0 10
45486: PUSH
45487: LD_REAL  1.20000000000000E+0000
45490: MUL
45491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45492: LD_VAR 0 6
45496: PPUSH
45497: CALL_OW 264
45501: PUSH
45502: LD_INT 6
45504: PUSH
45505: LD_INT 46
45507: PUSH
45508: LD_INT 47
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: LIST
45515: IN
45516: IFFALSE 45533
// bpoints := bpoints * 1.2 ;
45518: LD_ADDR_VAR 0 10
45522: PUSH
45523: LD_VAR 0 10
45527: PUSH
45528: LD_REAL  1.20000000000000E+0000
45531: MUL
45532: ST_TO_ADDR
// end ; unit_building :
45533: GO 45547
45535: LD_INT 3
45537: DOUBLE
45538: EQUAL
45539: IFTRUE 45543
45541: GO 45546
45543: POP
// ; end ;
45544: GO 45547
45546: POP
// for j = 1 to 3 do
45547: LD_ADDR_VAR 0 7
45551: PUSH
45552: DOUBLE
45553: LD_INT 1
45555: DEC
45556: ST_TO_ADDR
45557: LD_INT 3
45559: PUSH
45560: FOR_TO
45561: IFFALSE 45614
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45563: LD_ADDR_VAR 0 5
45567: PUSH
45568: LD_VAR 0 5
45572: PPUSH
45573: LD_VAR 0 7
45577: PPUSH
45578: LD_VAR 0 5
45582: PUSH
45583: LD_VAR 0 7
45587: ARRAY
45588: PUSH
45589: LD_VAR 0 9
45593: PUSH
45594: LD_VAR 0 7
45598: ARRAY
45599: PUSH
45600: LD_VAR 0 10
45604: MUL
45605: PLUS
45606: PPUSH
45607: CALL_OW 1
45611: ST_TO_ADDR
45612: GO 45560
45614: POP
45615: POP
// end ;
45616: GO 44095
45618: POP
45619: POP
// result := Replace ( result , 4 , tmp ) ;
45620: LD_ADDR_VAR 0 5
45624: PUSH
45625: LD_VAR 0 5
45629: PPUSH
45630: LD_INT 4
45632: PPUSH
45633: LD_VAR 0 8
45637: PPUSH
45638: CALL_OW 1
45642: ST_TO_ADDR
// end ;
45643: LD_VAR 0 5
45647: RET
// export function DangerAtRange ( unit , range ) ; begin
45648: LD_INT 0
45650: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45651: LD_ADDR_VAR 0 3
45655: PUSH
45656: LD_VAR 0 1
45660: PPUSH
45661: CALL_OW 255
45665: PPUSH
45666: LD_VAR 0 1
45670: PPUSH
45671: CALL_OW 250
45675: PPUSH
45676: LD_VAR 0 1
45680: PPUSH
45681: CALL_OW 251
45685: PPUSH
45686: LD_VAR 0 2
45690: PPUSH
45691: CALL 43947 0 4
45695: ST_TO_ADDR
// end ;
45696: LD_VAR 0 3
45700: RET
// export function DangerInArea ( side , area ) ; begin
45701: LD_INT 0
45703: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45704: LD_ADDR_VAR 0 3
45708: PUSH
45709: LD_VAR 0 2
45713: PPUSH
45714: LD_INT 81
45716: PUSH
45717: LD_VAR 0 1
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PPUSH
45726: CALL_OW 70
45730: ST_TO_ADDR
// end ;
45731: LD_VAR 0 3
45735: RET
// export function IsExtension ( b ) ; begin
45736: LD_INT 0
45738: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45739: LD_ADDR_VAR 0 2
45743: PUSH
45744: LD_VAR 0 1
45748: PUSH
45749: LD_INT 23
45751: PUSH
45752: LD_INT 20
45754: PUSH
45755: LD_INT 22
45757: PUSH
45758: LD_INT 17
45760: PUSH
45761: LD_INT 24
45763: PUSH
45764: LD_INT 21
45766: PUSH
45767: LD_INT 19
45769: PUSH
45770: LD_INT 16
45772: PUSH
45773: LD_INT 25
45775: PUSH
45776: LD_INT 18
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: IN
45791: ST_TO_ADDR
// end ;
45792: LD_VAR 0 2
45796: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45797: LD_INT 0
45799: PPUSH
45800: PPUSH
45801: PPUSH
// result := [ ] ;
45802: LD_ADDR_VAR 0 4
45806: PUSH
45807: EMPTY
45808: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45809: LD_ADDR_VAR 0 5
45813: PUSH
45814: LD_VAR 0 2
45818: PPUSH
45819: LD_INT 21
45821: PUSH
45822: LD_INT 3
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PPUSH
45829: CALL_OW 70
45833: ST_TO_ADDR
// if not tmp then
45834: LD_VAR 0 5
45838: NOT
45839: IFFALSE 45843
// exit ;
45841: GO 45907
// if checkLink then
45843: LD_VAR 0 3
45847: IFFALSE 45897
// begin for i in tmp do
45849: LD_ADDR_VAR 0 6
45853: PUSH
45854: LD_VAR 0 5
45858: PUSH
45859: FOR_IN
45860: IFFALSE 45895
// if GetBase ( i ) <> base then
45862: LD_VAR 0 6
45866: PPUSH
45867: CALL_OW 274
45871: PUSH
45872: LD_VAR 0 1
45876: NONEQUAL
45877: IFFALSE 45893
// ComLinkToBase ( base , i ) ;
45879: LD_VAR 0 1
45883: PPUSH
45884: LD_VAR 0 6
45888: PPUSH
45889: CALL_OW 169
45893: GO 45859
45895: POP
45896: POP
// end ; result := tmp ;
45897: LD_ADDR_VAR 0 4
45901: PUSH
45902: LD_VAR 0 5
45906: ST_TO_ADDR
// end ;
45907: LD_VAR 0 4
45911: RET
// export function ComComplete ( units , b ) ; var i ; begin
45912: LD_INT 0
45914: PPUSH
45915: PPUSH
// if not units then
45916: LD_VAR 0 1
45920: NOT
45921: IFFALSE 45925
// exit ;
45923: GO 46015
// for i in units do
45925: LD_ADDR_VAR 0 4
45929: PUSH
45930: LD_VAR 0 1
45934: PUSH
45935: FOR_IN
45936: IFFALSE 46013
// if BuildingStatus ( b ) = bs_build then
45938: LD_VAR 0 2
45942: PPUSH
45943: CALL_OW 461
45947: PUSH
45948: LD_INT 1
45950: EQUAL
45951: IFFALSE 46011
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45953: LD_VAR 0 4
45957: PPUSH
45958: LD_STRING h
45960: PUSH
45961: LD_VAR 0 2
45965: PPUSH
45966: CALL_OW 250
45970: PUSH
45971: LD_VAR 0 2
45975: PPUSH
45976: CALL_OW 251
45980: PUSH
45981: LD_VAR 0 2
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: PUSH
46004: EMPTY
46005: LIST
46006: PPUSH
46007: CALL_OW 446
46011: GO 45935
46013: POP
46014: POP
// end ;
46015: LD_VAR 0 3
46019: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46020: LD_INT 0
46022: PPUSH
46023: PPUSH
46024: PPUSH
46025: PPUSH
46026: PPUSH
46027: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46028: LD_VAR 0 1
46032: NOT
46033: PUSH
46034: LD_VAR 0 1
46038: PPUSH
46039: CALL_OW 263
46043: PUSH
46044: LD_INT 2
46046: NONEQUAL
46047: OR
46048: IFFALSE 46052
// exit ;
46050: GO 46368
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46052: LD_ADDR_VAR 0 6
46056: PUSH
46057: LD_INT 22
46059: PUSH
46060: LD_VAR 0 1
46064: PPUSH
46065: CALL_OW 255
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: LD_INT 30
46079: PUSH
46080: LD_INT 36
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 34
46089: PUSH
46090: LD_INT 31
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PPUSH
46106: CALL_OW 69
46110: ST_TO_ADDR
// if not tmp then
46111: LD_VAR 0 6
46115: NOT
46116: IFFALSE 46120
// exit ;
46118: GO 46368
// result := [ ] ;
46120: LD_ADDR_VAR 0 2
46124: PUSH
46125: EMPTY
46126: ST_TO_ADDR
// for i in tmp do
46127: LD_ADDR_VAR 0 3
46131: PUSH
46132: LD_VAR 0 6
46136: PUSH
46137: FOR_IN
46138: IFFALSE 46209
// begin t := UnitsInside ( i ) ;
46140: LD_ADDR_VAR 0 4
46144: PUSH
46145: LD_VAR 0 3
46149: PPUSH
46150: CALL_OW 313
46154: ST_TO_ADDR
// if t then
46155: LD_VAR 0 4
46159: IFFALSE 46207
// for j in t do
46161: LD_ADDR_VAR 0 7
46165: PUSH
46166: LD_VAR 0 4
46170: PUSH
46171: FOR_IN
46172: IFFALSE 46205
// result := Replace ( result , result + 1 , j ) ;
46174: LD_ADDR_VAR 0 2
46178: PUSH
46179: LD_VAR 0 2
46183: PPUSH
46184: LD_VAR 0 2
46188: PUSH
46189: LD_INT 1
46191: PLUS
46192: PPUSH
46193: LD_VAR 0 7
46197: PPUSH
46198: CALL_OW 1
46202: ST_TO_ADDR
46203: GO 46171
46205: POP
46206: POP
// end ;
46207: GO 46137
46209: POP
46210: POP
// if not result then
46211: LD_VAR 0 2
46215: NOT
46216: IFFALSE 46220
// exit ;
46218: GO 46368
// mech := result [ 1 ] ;
46220: LD_ADDR_VAR 0 5
46224: PUSH
46225: LD_VAR 0 2
46229: PUSH
46230: LD_INT 1
46232: ARRAY
46233: ST_TO_ADDR
// if result > 1 then
46234: LD_VAR 0 2
46238: PUSH
46239: LD_INT 1
46241: GREATER
46242: IFFALSE 46354
// begin for i = 2 to result do
46244: LD_ADDR_VAR 0 3
46248: PUSH
46249: DOUBLE
46250: LD_INT 2
46252: DEC
46253: ST_TO_ADDR
46254: LD_VAR 0 2
46258: PUSH
46259: FOR_TO
46260: IFFALSE 46352
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46262: LD_ADDR_VAR 0 4
46266: PUSH
46267: LD_VAR 0 2
46271: PUSH
46272: LD_VAR 0 3
46276: ARRAY
46277: PPUSH
46278: LD_INT 3
46280: PPUSH
46281: CALL_OW 259
46285: PUSH
46286: LD_VAR 0 2
46290: PUSH
46291: LD_VAR 0 3
46295: ARRAY
46296: PPUSH
46297: CALL_OW 432
46301: MINUS
46302: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46303: LD_VAR 0 4
46307: PUSH
46308: LD_VAR 0 5
46312: PPUSH
46313: LD_INT 3
46315: PPUSH
46316: CALL_OW 259
46320: PUSH
46321: LD_VAR 0 5
46325: PPUSH
46326: CALL_OW 432
46330: MINUS
46331: GREATEREQUAL
46332: IFFALSE 46350
// mech := result [ i ] ;
46334: LD_ADDR_VAR 0 5
46338: PUSH
46339: LD_VAR 0 2
46343: PUSH
46344: LD_VAR 0 3
46348: ARRAY
46349: ST_TO_ADDR
// end ;
46350: GO 46259
46352: POP
46353: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46354: LD_VAR 0 1
46358: PPUSH
46359: LD_VAR 0 5
46363: PPUSH
46364: CALL_OW 135
// end ;
46368: LD_VAR 0 2
46372: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46373: LD_INT 0
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
46384: PPUSH
46385: PPUSH
46386: PPUSH
46387: PPUSH
// result := [ ] ;
46388: LD_ADDR_VAR 0 7
46392: PUSH
46393: EMPTY
46394: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46395: LD_VAR 0 1
46399: PPUSH
46400: CALL_OW 266
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: IN
46415: NOT
46416: IFFALSE 46420
// exit ;
46418: GO 48054
// if name then
46420: LD_VAR 0 3
46424: IFFALSE 46440
// SetBName ( base_dep , name ) ;
46426: LD_VAR 0 1
46430: PPUSH
46431: LD_VAR 0 3
46435: PPUSH
46436: CALL_OW 500
// base := GetBase ( base_dep ) ;
46440: LD_ADDR_VAR 0 15
46444: PUSH
46445: LD_VAR 0 1
46449: PPUSH
46450: CALL_OW 274
46454: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46455: LD_ADDR_VAR 0 16
46459: PUSH
46460: LD_VAR 0 1
46464: PPUSH
46465: CALL_OW 255
46469: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46470: LD_ADDR_VAR 0 17
46474: PUSH
46475: LD_VAR 0 1
46479: PPUSH
46480: CALL_OW 248
46484: ST_TO_ADDR
// if sources then
46485: LD_VAR 0 5
46489: IFFALSE 46536
// for i = 1 to 3 do
46491: LD_ADDR_VAR 0 8
46495: PUSH
46496: DOUBLE
46497: LD_INT 1
46499: DEC
46500: ST_TO_ADDR
46501: LD_INT 3
46503: PUSH
46504: FOR_TO
46505: IFFALSE 46534
// AddResourceType ( base , i , sources [ i ] ) ;
46507: LD_VAR 0 15
46511: PPUSH
46512: LD_VAR 0 8
46516: PPUSH
46517: LD_VAR 0 5
46521: PUSH
46522: LD_VAR 0 8
46526: ARRAY
46527: PPUSH
46528: CALL_OW 276
46532: GO 46504
46534: POP
46535: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46536: LD_ADDR_VAR 0 18
46540: PUSH
46541: LD_VAR 0 15
46545: PPUSH
46546: LD_VAR 0 2
46550: PPUSH
46551: LD_INT 1
46553: PPUSH
46554: CALL 45797 0 3
46558: ST_TO_ADDR
// InitHc ;
46559: CALL_OW 19
// InitUc ;
46563: CALL_OW 18
// uc_side := side ;
46567: LD_ADDR_OWVAR 20
46571: PUSH
46572: LD_VAR 0 16
46576: ST_TO_ADDR
// uc_nation := nation ;
46577: LD_ADDR_OWVAR 21
46581: PUSH
46582: LD_VAR 0 17
46586: ST_TO_ADDR
// if buildings then
46587: LD_VAR 0 18
46591: IFFALSE 47913
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46593: LD_ADDR_VAR 0 19
46597: PUSH
46598: LD_VAR 0 18
46602: PPUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 30
46608: PUSH
46609: LD_INT 29
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 30
46618: PUSH
46619: LD_INT 30
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: LIST
46630: PPUSH
46631: CALL_OW 72
46635: ST_TO_ADDR
// if tmp then
46636: LD_VAR 0 19
46640: IFFALSE 46688
// for i in tmp do
46642: LD_ADDR_VAR 0 8
46646: PUSH
46647: LD_VAR 0 19
46651: PUSH
46652: FOR_IN
46653: IFFALSE 46686
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46655: LD_VAR 0 8
46659: PPUSH
46660: CALL_OW 250
46664: PPUSH
46665: LD_VAR 0 8
46669: PPUSH
46670: CALL_OW 251
46674: PPUSH
46675: LD_VAR 0 16
46679: PPUSH
46680: CALL_OW 441
46684: GO 46652
46686: POP
46687: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46688: LD_VAR 0 18
46692: PPUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 30
46698: PUSH
46699: LD_INT 32
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 30
46708: PUSH
46709: LD_INT 33
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: LIST
46720: PPUSH
46721: CALL_OW 72
46725: IFFALSE 46813
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46727: LD_ADDR_VAR 0 8
46731: PUSH
46732: LD_VAR 0 18
46736: PPUSH
46737: LD_INT 2
46739: PUSH
46740: LD_INT 30
46742: PUSH
46743: LD_INT 32
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 30
46752: PUSH
46753: LD_INT 33
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: LIST
46764: PPUSH
46765: CALL_OW 72
46769: PUSH
46770: FOR_IN
46771: IFFALSE 46811
// begin if not GetBWeapon ( i ) then
46773: LD_VAR 0 8
46777: PPUSH
46778: CALL_OW 269
46782: NOT
46783: IFFALSE 46809
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46785: LD_VAR 0 8
46789: PPUSH
46790: LD_VAR 0 8
46794: PPUSH
46795: LD_VAR 0 2
46799: PPUSH
46800: CALL 48059 0 2
46804: PPUSH
46805: CALL_OW 431
// end ;
46809: GO 46770
46811: POP
46812: POP
// end ; for i = 1 to personel do
46813: LD_ADDR_VAR 0 8
46817: PUSH
46818: DOUBLE
46819: LD_INT 1
46821: DEC
46822: ST_TO_ADDR
46823: LD_VAR 0 6
46827: PUSH
46828: FOR_TO
46829: IFFALSE 47893
// begin if i > 4 then
46831: LD_VAR 0 8
46835: PUSH
46836: LD_INT 4
46838: GREATER
46839: IFFALSE 46843
// break ;
46841: GO 47893
// case i of 1 :
46843: LD_VAR 0 8
46847: PUSH
46848: LD_INT 1
46850: DOUBLE
46851: EQUAL
46852: IFTRUE 46856
46854: GO 46936
46856: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46857: LD_ADDR_VAR 0 12
46861: PUSH
46862: LD_VAR 0 18
46866: PPUSH
46867: LD_INT 22
46869: PUSH
46870: LD_VAR 0 16
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 58
46881: PUSH
46882: EMPTY
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: LD_INT 30
46890: PUSH
46891: LD_INT 32
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 30
46900: PUSH
46901: LD_INT 4
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 30
46910: PUSH
46911: LD_INT 5
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: PPUSH
46929: CALL_OW 72
46933: ST_TO_ADDR
46934: GO 47158
46936: LD_INT 2
46938: DOUBLE
46939: EQUAL
46940: IFTRUE 46944
46942: GO 47006
46944: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46945: LD_ADDR_VAR 0 12
46949: PUSH
46950: LD_VAR 0 18
46954: PPUSH
46955: LD_INT 22
46957: PUSH
46958: LD_VAR 0 16
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 30
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 30
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: LIST
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PPUSH
46999: CALL_OW 72
47003: ST_TO_ADDR
47004: GO 47158
47006: LD_INT 3
47008: DOUBLE
47009: EQUAL
47010: IFTRUE 47014
47012: GO 47076
47014: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47015: LD_ADDR_VAR 0 12
47019: PUSH
47020: LD_VAR 0 18
47024: PPUSH
47025: LD_INT 22
47027: PUSH
47028: LD_VAR 0 16
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: LD_INT 30
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 30
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: LIST
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PPUSH
47069: CALL_OW 72
47073: ST_TO_ADDR
47074: GO 47158
47076: LD_INT 4
47078: DOUBLE
47079: EQUAL
47080: IFTRUE 47084
47082: GO 47157
47084: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47085: LD_ADDR_VAR 0 12
47089: PUSH
47090: LD_VAR 0 18
47094: PPUSH
47095: LD_INT 22
47097: PUSH
47098: LD_VAR 0 16
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 30
47112: PUSH
47113: LD_INT 6
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 30
47122: PUSH
47123: LD_INT 7
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 30
47132: PUSH
47133: LD_INT 8
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PPUSH
47150: CALL_OW 72
47154: ST_TO_ADDR
47155: GO 47158
47157: POP
// if i = 1 then
47158: LD_VAR 0 8
47162: PUSH
47163: LD_INT 1
47165: EQUAL
47166: IFFALSE 47277
// begin tmp := [ ] ;
47168: LD_ADDR_VAR 0 19
47172: PUSH
47173: EMPTY
47174: ST_TO_ADDR
// for j in f do
47175: LD_ADDR_VAR 0 9
47179: PUSH
47180: LD_VAR 0 12
47184: PUSH
47185: FOR_IN
47186: IFFALSE 47259
// if GetBType ( j ) = b_bunker then
47188: LD_VAR 0 9
47192: PPUSH
47193: CALL_OW 266
47197: PUSH
47198: LD_INT 32
47200: EQUAL
47201: IFFALSE 47228
// tmp := Insert ( tmp , 1 , j ) else
47203: LD_ADDR_VAR 0 19
47207: PUSH
47208: LD_VAR 0 19
47212: PPUSH
47213: LD_INT 1
47215: PPUSH
47216: LD_VAR 0 9
47220: PPUSH
47221: CALL_OW 2
47225: ST_TO_ADDR
47226: GO 47257
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47228: LD_ADDR_VAR 0 19
47232: PUSH
47233: LD_VAR 0 19
47237: PPUSH
47238: LD_VAR 0 19
47242: PUSH
47243: LD_INT 1
47245: PLUS
47246: PPUSH
47247: LD_VAR 0 9
47251: PPUSH
47252: CALL_OW 2
47256: ST_TO_ADDR
47257: GO 47185
47259: POP
47260: POP
// if tmp then
47261: LD_VAR 0 19
47265: IFFALSE 47277
// f := tmp ;
47267: LD_ADDR_VAR 0 12
47271: PUSH
47272: LD_VAR 0 19
47276: ST_TO_ADDR
// end ; x := personel [ i ] ;
47277: LD_ADDR_VAR 0 13
47281: PUSH
47282: LD_VAR 0 6
47286: PUSH
47287: LD_VAR 0 8
47291: ARRAY
47292: ST_TO_ADDR
// if x = - 1 then
47293: LD_VAR 0 13
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: EQUAL
47302: IFFALSE 47511
// begin for j in f do
47304: LD_ADDR_VAR 0 9
47308: PUSH
47309: LD_VAR 0 12
47313: PUSH
47314: FOR_IN
47315: IFFALSE 47507
// repeat InitHc ;
47317: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47321: LD_VAR 0 9
47325: PPUSH
47326: CALL_OW 266
47330: PUSH
47331: LD_INT 5
47333: EQUAL
47334: IFFALSE 47404
// begin if UnitsInside ( j ) < 3 then
47336: LD_VAR 0 9
47340: PPUSH
47341: CALL_OW 313
47345: PUSH
47346: LD_INT 3
47348: LESS
47349: IFFALSE 47385
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47351: LD_INT 0
47353: PPUSH
47354: LD_INT 5
47356: PUSH
47357: LD_INT 8
47359: PUSH
47360: LD_INT 9
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: LIST
47367: PUSH
47368: LD_VAR 0 17
47372: ARRAY
47373: PPUSH
47374: LD_VAR 0 4
47378: PPUSH
47379: CALL_OW 380
47383: GO 47402
// PrepareHuman ( false , i , skill ) ;
47385: LD_INT 0
47387: PPUSH
47388: LD_VAR 0 8
47392: PPUSH
47393: LD_VAR 0 4
47397: PPUSH
47398: CALL_OW 380
// end else
47402: GO 47421
// PrepareHuman ( false , i , skill ) ;
47404: LD_INT 0
47406: PPUSH
47407: LD_VAR 0 8
47411: PPUSH
47412: LD_VAR 0 4
47416: PPUSH
47417: CALL_OW 380
// un := CreateHuman ;
47421: LD_ADDR_VAR 0 14
47425: PUSH
47426: CALL_OW 44
47430: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47431: LD_ADDR_VAR 0 7
47435: PUSH
47436: LD_VAR 0 7
47440: PPUSH
47441: LD_INT 1
47443: PPUSH
47444: LD_VAR 0 14
47448: PPUSH
47449: CALL_OW 2
47453: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47454: LD_VAR 0 14
47458: PPUSH
47459: LD_VAR 0 9
47463: PPUSH
47464: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47468: LD_VAR 0 9
47472: PPUSH
47473: CALL_OW 313
47477: PUSH
47478: LD_INT 6
47480: EQUAL
47481: PUSH
47482: LD_VAR 0 9
47486: PPUSH
47487: CALL_OW 266
47491: PUSH
47492: LD_INT 32
47494: PUSH
47495: LD_INT 31
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: IN
47502: OR
47503: IFFALSE 47317
47505: GO 47314
47507: POP
47508: POP
// end else
47509: GO 47891
// for j = 1 to x do
47511: LD_ADDR_VAR 0 9
47515: PUSH
47516: DOUBLE
47517: LD_INT 1
47519: DEC
47520: ST_TO_ADDR
47521: LD_VAR 0 13
47525: PUSH
47526: FOR_TO
47527: IFFALSE 47889
// begin InitHc ;
47529: CALL_OW 19
// if not f then
47533: LD_VAR 0 12
47537: NOT
47538: IFFALSE 47627
// begin PrepareHuman ( false , i , skill ) ;
47540: LD_INT 0
47542: PPUSH
47543: LD_VAR 0 8
47547: PPUSH
47548: LD_VAR 0 4
47552: PPUSH
47553: CALL_OW 380
// un := CreateHuman ;
47557: LD_ADDR_VAR 0 14
47561: PUSH
47562: CALL_OW 44
47566: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47567: LD_ADDR_VAR 0 7
47571: PUSH
47572: LD_VAR 0 7
47576: PPUSH
47577: LD_INT 1
47579: PPUSH
47580: LD_VAR 0 14
47584: PPUSH
47585: CALL_OW 2
47589: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47590: LD_VAR 0 14
47594: PPUSH
47595: LD_VAR 0 1
47599: PPUSH
47600: CALL_OW 250
47604: PPUSH
47605: LD_VAR 0 1
47609: PPUSH
47610: CALL_OW 251
47614: PPUSH
47615: LD_INT 10
47617: PPUSH
47618: LD_INT 0
47620: PPUSH
47621: CALL_OW 50
// continue ;
47625: GO 47526
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47627: LD_VAR 0 12
47631: PUSH
47632: LD_INT 1
47634: ARRAY
47635: PPUSH
47636: CALL_OW 313
47640: PUSH
47641: LD_VAR 0 12
47645: PUSH
47646: LD_INT 1
47648: ARRAY
47649: PPUSH
47650: CALL_OW 266
47654: PUSH
47655: LD_INT 32
47657: PUSH
47658: LD_INT 31
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: IN
47665: AND
47666: PUSH
47667: LD_VAR 0 12
47671: PUSH
47672: LD_INT 1
47674: ARRAY
47675: PPUSH
47676: CALL_OW 313
47680: PUSH
47681: LD_INT 6
47683: EQUAL
47684: OR
47685: IFFALSE 47705
// f := Delete ( f , 1 ) ;
47687: LD_ADDR_VAR 0 12
47691: PUSH
47692: LD_VAR 0 12
47696: PPUSH
47697: LD_INT 1
47699: PPUSH
47700: CALL_OW 3
47704: ST_TO_ADDR
// if not f then
47705: LD_VAR 0 12
47709: NOT
47710: IFFALSE 47728
// begin x := x + 2 ;
47712: LD_ADDR_VAR 0 13
47716: PUSH
47717: LD_VAR 0 13
47721: PUSH
47722: LD_INT 2
47724: PLUS
47725: ST_TO_ADDR
// continue ;
47726: GO 47526
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47728: LD_VAR 0 12
47732: PUSH
47733: LD_INT 1
47735: ARRAY
47736: PPUSH
47737: CALL_OW 266
47741: PUSH
47742: LD_INT 5
47744: EQUAL
47745: IFFALSE 47819
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47747: LD_VAR 0 12
47751: PUSH
47752: LD_INT 1
47754: ARRAY
47755: PPUSH
47756: CALL_OW 313
47760: PUSH
47761: LD_INT 3
47763: LESS
47764: IFFALSE 47800
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47766: LD_INT 0
47768: PPUSH
47769: LD_INT 5
47771: PUSH
47772: LD_INT 8
47774: PUSH
47775: LD_INT 9
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: PUSH
47783: LD_VAR 0 17
47787: ARRAY
47788: PPUSH
47789: LD_VAR 0 4
47793: PPUSH
47794: CALL_OW 380
47798: GO 47817
// PrepareHuman ( false , i , skill ) ;
47800: LD_INT 0
47802: PPUSH
47803: LD_VAR 0 8
47807: PPUSH
47808: LD_VAR 0 4
47812: PPUSH
47813: CALL_OW 380
// end else
47817: GO 47836
// PrepareHuman ( false , i , skill ) ;
47819: LD_INT 0
47821: PPUSH
47822: LD_VAR 0 8
47826: PPUSH
47827: LD_VAR 0 4
47831: PPUSH
47832: CALL_OW 380
// un := CreateHuman ;
47836: LD_ADDR_VAR 0 14
47840: PUSH
47841: CALL_OW 44
47845: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47846: LD_ADDR_VAR 0 7
47850: PUSH
47851: LD_VAR 0 7
47855: PPUSH
47856: LD_INT 1
47858: PPUSH
47859: LD_VAR 0 14
47863: PPUSH
47864: CALL_OW 2
47868: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47869: LD_VAR 0 14
47873: PPUSH
47874: LD_VAR 0 12
47878: PUSH
47879: LD_INT 1
47881: ARRAY
47882: PPUSH
47883: CALL_OW 52
// end ;
47887: GO 47526
47889: POP
47890: POP
// end ;
47891: GO 46828
47893: POP
47894: POP
// result := result ^ buildings ;
47895: LD_ADDR_VAR 0 7
47899: PUSH
47900: LD_VAR 0 7
47904: PUSH
47905: LD_VAR 0 18
47909: ADD
47910: ST_TO_ADDR
// end else
47911: GO 48054
// begin for i = 1 to personel do
47913: LD_ADDR_VAR 0 8
47917: PUSH
47918: DOUBLE
47919: LD_INT 1
47921: DEC
47922: ST_TO_ADDR
47923: LD_VAR 0 6
47927: PUSH
47928: FOR_TO
47929: IFFALSE 48052
// begin if i > 4 then
47931: LD_VAR 0 8
47935: PUSH
47936: LD_INT 4
47938: GREATER
47939: IFFALSE 47943
// break ;
47941: GO 48052
// x := personel [ i ] ;
47943: LD_ADDR_VAR 0 13
47947: PUSH
47948: LD_VAR 0 6
47952: PUSH
47953: LD_VAR 0 8
47957: ARRAY
47958: ST_TO_ADDR
// if x = - 1 then
47959: LD_VAR 0 13
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: EQUAL
47968: IFFALSE 47972
// continue ;
47970: GO 47928
// PrepareHuman ( false , i , skill ) ;
47972: LD_INT 0
47974: PPUSH
47975: LD_VAR 0 8
47979: PPUSH
47980: LD_VAR 0 4
47984: PPUSH
47985: CALL_OW 380
// un := CreateHuman ;
47989: LD_ADDR_VAR 0 14
47993: PUSH
47994: CALL_OW 44
47998: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47999: LD_VAR 0 14
48003: PPUSH
48004: LD_VAR 0 1
48008: PPUSH
48009: CALL_OW 250
48013: PPUSH
48014: LD_VAR 0 1
48018: PPUSH
48019: CALL_OW 251
48023: PPUSH
48024: LD_INT 10
48026: PPUSH
48027: LD_INT 0
48029: PPUSH
48030: CALL_OW 50
// result := result ^ un ;
48034: LD_ADDR_VAR 0 7
48038: PUSH
48039: LD_VAR 0 7
48043: PUSH
48044: LD_VAR 0 14
48048: ADD
48049: ST_TO_ADDR
// end ;
48050: GO 47928
48052: POP
48053: POP
// end ; end ;
48054: LD_VAR 0 7
48058: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48059: LD_INT 0
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
48069: PPUSH
48070: PPUSH
48071: PPUSH
48072: PPUSH
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
// result := false ;
48077: LD_ADDR_VAR 0 3
48081: PUSH
48082: LD_INT 0
48084: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48085: LD_VAR 0 1
48089: NOT
48090: PUSH
48091: LD_VAR 0 1
48095: PPUSH
48096: CALL_OW 266
48100: PUSH
48101: LD_INT 32
48103: PUSH
48104: LD_INT 33
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: IN
48111: NOT
48112: OR
48113: IFFALSE 48117
// exit ;
48115: GO 49226
// nat := GetNation ( tower ) ;
48117: LD_ADDR_VAR 0 12
48121: PUSH
48122: LD_VAR 0 1
48126: PPUSH
48127: CALL_OW 248
48131: ST_TO_ADDR
// side := GetSide ( tower ) ;
48132: LD_ADDR_VAR 0 16
48136: PUSH
48137: LD_VAR 0 1
48141: PPUSH
48142: CALL_OW 255
48146: ST_TO_ADDR
// x := GetX ( tower ) ;
48147: LD_ADDR_VAR 0 10
48151: PUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: CALL_OW 250
48161: ST_TO_ADDR
// y := GetY ( tower ) ;
48162: LD_ADDR_VAR 0 11
48166: PUSH
48167: LD_VAR 0 1
48171: PPUSH
48172: CALL_OW 251
48176: ST_TO_ADDR
// if not x or not y then
48177: LD_VAR 0 10
48181: NOT
48182: PUSH
48183: LD_VAR 0 11
48187: NOT
48188: OR
48189: IFFALSE 48193
// exit ;
48191: GO 49226
// weapon := 0 ;
48193: LD_ADDR_VAR 0 18
48197: PUSH
48198: LD_INT 0
48200: ST_TO_ADDR
// fac_list := [ ] ;
48201: LD_ADDR_VAR 0 17
48205: PUSH
48206: EMPTY
48207: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48208: LD_ADDR_VAR 0 6
48212: PUSH
48213: LD_VAR 0 1
48217: PPUSH
48218: CALL_OW 274
48222: PPUSH
48223: LD_VAR 0 2
48227: PPUSH
48228: LD_INT 0
48230: PPUSH
48231: CALL 45797 0 3
48235: PPUSH
48236: LD_INT 30
48238: PUSH
48239: LD_INT 3
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PPUSH
48246: CALL_OW 72
48250: ST_TO_ADDR
// if not factories then
48251: LD_VAR 0 6
48255: NOT
48256: IFFALSE 48260
// exit ;
48258: GO 49226
// for i in factories do
48260: LD_ADDR_VAR 0 8
48264: PUSH
48265: LD_VAR 0 6
48269: PUSH
48270: FOR_IN
48271: IFFALSE 48296
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48273: LD_ADDR_VAR 0 17
48277: PUSH
48278: LD_VAR 0 17
48282: PUSH
48283: LD_VAR 0 8
48287: PPUSH
48288: CALL_OW 478
48292: UNION
48293: ST_TO_ADDR
48294: GO 48270
48296: POP
48297: POP
// if not fac_list then
48298: LD_VAR 0 17
48302: NOT
48303: IFFALSE 48307
// exit ;
48305: GO 49226
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48307: LD_ADDR_VAR 0 5
48311: PUSH
48312: LD_INT 4
48314: PUSH
48315: LD_INT 5
48317: PUSH
48318: LD_INT 9
48320: PUSH
48321: LD_INT 10
48323: PUSH
48324: LD_INT 6
48326: PUSH
48327: LD_INT 7
48329: PUSH
48330: LD_INT 11
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 27
48344: PUSH
48345: LD_INT 28
48347: PUSH
48348: LD_INT 26
48350: PUSH
48351: LD_INT 30
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 43
48362: PUSH
48363: LD_INT 44
48365: PUSH
48366: LD_INT 46
48368: PUSH
48369: LD_INT 45
48371: PUSH
48372: LD_INT 47
48374: PUSH
48375: LD_INT 49
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: LIST
48390: PUSH
48391: LD_VAR 0 12
48395: ARRAY
48396: ST_TO_ADDR
// list := list isect fac_list ;
48397: LD_ADDR_VAR 0 5
48401: PUSH
48402: LD_VAR 0 5
48406: PUSH
48407: LD_VAR 0 17
48411: ISECT
48412: ST_TO_ADDR
// if not list then
48413: LD_VAR 0 5
48417: NOT
48418: IFFALSE 48422
// exit ;
48420: GO 49226
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48422: LD_VAR 0 12
48426: PUSH
48427: LD_INT 3
48429: EQUAL
48430: PUSH
48431: LD_INT 49
48433: PUSH
48434: LD_VAR 0 5
48438: IN
48439: AND
48440: PUSH
48441: LD_INT 31
48443: PPUSH
48444: LD_VAR 0 16
48448: PPUSH
48449: CALL_OW 321
48453: PUSH
48454: LD_INT 2
48456: EQUAL
48457: AND
48458: IFFALSE 48518
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48460: LD_INT 22
48462: PUSH
48463: LD_VAR 0 16
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 35
48474: PUSH
48475: LD_INT 49
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 91
48484: PUSH
48485: LD_VAR 0 1
48489: PUSH
48490: LD_INT 10
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: PPUSH
48503: CALL_OW 69
48507: NOT
48508: IFFALSE 48518
// weapon := ru_time_lapser ;
48510: LD_ADDR_VAR 0 18
48514: PUSH
48515: LD_INT 49
48517: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48518: LD_VAR 0 12
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: IN
48533: PUSH
48534: LD_INT 11
48536: PUSH
48537: LD_VAR 0 5
48541: IN
48542: PUSH
48543: LD_INT 30
48545: PUSH
48546: LD_VAR 0 5
48550: IN
48551: OR
48552: AND
48553: PUSH
48554: LD_INT 6
48556: PPUSH
48557: LD_VAR 0 16
48561: PPUSH
48562: CALL_OW 321
48566: PUSH
48567: LD_INT 2
48569: EQUAL
48570: AND
48571: IFFALSE 48736
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48573: LD_INT 22
48575: PUSH
48576: LD_VAR 0 16
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 35
48590: PUSH
48591: LD_INT 11
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 35
48600: PUSH
48601: LD_INT 30
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 91
48615: PUSH
48616: LD_VAR 0 1
48620: PUSH
48621: LD_INT 18
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: PPUSH
48634: CALL_OW 69
48638: NOT
48639: PUSH
48640: LD_INT 22
48642: PUSH
48643: LD_VAR 0 16
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 30
48657: PUSH
48658: LD_INT 32
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 30
48667: PUSH
48668: LD_INT 33
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 91
48682: PUSH
48683: LD_VAR 0 1
48687: PUSH
48688: LD_INT 12
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: LIST
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: LIST
48700: PUSH
48701: EMPTY
48702: LIST
48703: PPUSH
48704: CALL_OW 69
48708: PUSH
48709: LD_INT 2
48711: GREATER
48712: AND
48713: IFFALSE 48736
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48715: LD_ADDR_VAR 0 18
48719: PUSH
48720: LD_INT 11
48722: PUSH
48723: LD_INT 30
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_VAR 0 12
48734: ARRAY
48735: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48736: LD_VAR 0 18
48740: NOT
48741: PUSH
48742: LD_INT 40
48744: PPUSH
48745: LD_VAR 0 16
48749: PPUSH
48750: CALL_OW 321
48754: PUSH
48755: LD_INT 2
48757: EQUAL
48758: AND
48759: PUSH
48760: LD_INT 7
48762: PUSH
48763: LD_VAR 0 5
48767: IN
48768: PUSH
48769: LD_INT 28
48771: PUSH
48772: LD_VAR 0 5
48776: IN
48777: OR
48778: PUSH
48779: LD_INT 45
48781: PUSH
48782: LD_VAR 0 5
48786: IN
48787: OR
48788: AND
48789: IFFALSE 49043
// begin hex := GetHexInfo ( x , y ) ;
48791: LD_ADDR_VAR 0 4
48795: PUSH
48796: LD_VAR 0 10
48800: PPUSH
48801: LD_VAR 0 11
48805: PPUSH
48806: CALL_OW 546
48810: ST_TO_ADDR
// if hex [ 1 ] then
48811: LD_VAR 0 4
48815: PUSH
48816: LD_INT 1
48818: ARRAY
48819: IFFALSE 48823
// exit ;
48821: GO 49226
// height := hex [ 2 ] ;
48823: LD_ADDR_VAR 0 15
48827: PUSH
48828: LD_VAR 0 4
48832: PUSH
48833: LD_INT 2
48835: ARRAY
48836: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48837: LD_ADDR_VAR 0 14
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 3
48850: PUSH
48851: LD_INT 5
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: ST_TO_ADDR
// for i in tmp do
48860: LD_ADDR_VAR 0 8
48864: PUSH
48865: LD_VAR 0 14
48869: PUSH
48870: FOR_IN
48871: IFFALSE 49041
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48873: LD_ADDR_VAR 0 9
48877: PUSH
48878: LD_VAR 0 10
48882: PPUSH
48883: LD_VAR 0 8
48887: PPUSH
48888: LD_INT 5
48890: PPUSH
48891: CALL_OW 272
48895: PUSH
48896: LD_VAR 0 11
48900: PPUSH
48901: LD_VAR 0 8
48905: PPUSH
48906: LD_INT 5
48908: PPUSH
48909: CALL_OW 273
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48918: LD_VAR 0 9
48922: PUSH
48923: LD_INT 1
48925: ARRAY
48926: PPUSH
48927: LD_VAR 0 9
48931: PUSH
48932: LD_INT 2
48934: ARRAY
48935: PPUSH
48936: CALL_OW 488
48940: IFFALSE 49039
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48942: LD_ADDR_VAR 0 4
48946: PUSH
48947: LD_VAR 0 9
48951: PUSH
48952: LD_INT 1
48954: ARRAY
48955: PPUSH
48956: LD_VAR 0 9
48960: PUSH
48961: LD_INT 2
48963: ARRAY
48964: PPUSH
48965: CALL_OW 546
48969: ST_TO_ADDR
// if hex [ 1 ] then
48970: LD_VAR 0 4
48974: PUSH
48975: LD_INT 1
48977: ARRAY
48978: IFFALSE 48982
// continue ;
48980: GO 48870
// h := hex [ 2 ] ;
48982: LD_ADDR_VAR 0 13
48986: PUSH
48987: LD_VAR 0 4
48991: PUSH
48992: LD_INT 2
48994: ARRAY
48995: ST_TO_ADDR
// if h + 7 < height then
48996: LD_VAR 0 13
49000: PUSH
49001: LD_INT 7
49003: PLUS
49004: PUSH
49005: LD_VAR 0 15
49009: LESS
49010: IFFALSE 49039
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49012: LD_ADDR_VAR 0 18
49016: PUSH
49017: LD_INT 7
49019: PUSH
49020: LD_INT 28
49022: PUSH
49023: LD_INT 45
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: LIST
49030: PUSH
49031: LD_VAR 0 12
49035: ARRAY
49036: ST_TO_ADDR
// break ;
49037: GO 49041
// end ; end ; end ;
49039: GO 48870
49041: POP
49042: POP
// end ; if not weapon then
49043: LD_VAR 0 18
49047: NOT
49048: IFFALSE 49108
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49050: LD_ADDR_VAR 0 5
49054: PUSH
49055: LD_VAR 0 5
49059: PUSH
49060: LD_INT 11
49062: PUSH
49063: LD_INT 30
49065: PUSH
49066: LD_INT 49
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: LIST
49073: DIFF
49074: ST_TO_ADDR
// if not list then
49075: LD_VAR 0 5
49079: NOT
49080: IFFALSE 49084
// exit ;
49082: GO 49226
// weapon := list [ rand ( 1 , list ) ] ;
49084: LD_ADDR_VAR 0 18
49088: PUSH
49089: LD_VAR 0 5
49093: PUSH
49094: LD_INT 1
49096: PPUSH
49097: LD_VAR 0 5
49101: PPUSH
49102: CALL_OW 12
49106: ARRAY
49107: ST_TO_ADDR
// end ; if weapon then
49108: LD_VAR 0 18
49112: IFFALSE 49226
// begin tmp := CostOfWeapon ( weapon ) ;
49114: LD_ADDR_VAR 0 14
49118: PUSH
49119: LD_VAR 0 18
49123: PPUSH
49124: CALL_OW 451
49128: ST_TO_ADDR
// j := GetBase ( tower ) ;
49129: LD_ADDR_VAR 0 9
49133: PUSH
49134: LD_VAR 0 1
49138: PPUSH
49139: CALL_OW 274
49143: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49144: LD_VAR 0 9
49148: PPUSH
49149: LD_INT 1
49151: PPUSH
49152: CALL_OW 275
49156: PUSH
49157: LD_VAR 0 14
49161: PUSH
49162: LD_INT 1
49164: ARRAY
49165: GREATEREQUAL
49166: PUSH
49167: LD_VAR 0 9
49171: PPUSH
49172: LD_INT 2
49174: PPUSH
49175: CALL_OW 275
49179: PUSH
49180: LD_VAR 0 14
49184: PUSH
49185: LD_INT 2
49187: ARRAY
49188: GREATEREQUAL
49189: AND
49190: PUSH
49191: LD_VAR 0 9
49195: PPUSH
49196: LD_INT 3
49198: PPUSH
49199: CALL_OW 275
49203: PUSH
49204: LD_VAR 0 14
49208: PUSH
49209: LD_INT 3
49211: ARRAY
49212: GREATEREQUAL
49213: AND
49214: IFFALSE 49226
// result := weapon ;
49216: LD_ADDR_VAR 0 3
49220: PUSH
49221: LD_VAR 0 18
49225: ST_TO_ADDR
// end ; end ;
49226: LD_VAR 0 3
49230: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49231: LD_INT 0
49233: PPUSH
49234: PPUSH
// result := true ;
49235: LD_ADDR_VAR 0 3
49239: PUSH
49240: LD_INT 1
49242: ST_TO_ADDR
// if array1 = array2 then
49243: LD_VAR 0 1
49247: PUSH
49248: LD_VAR 0 2
49252: EQUAL
49253: IFFALSE 49313
// begin for i = 1 to array1 do
49255: LD_ADDR_VAR 0 4
49259: PUSH
49260: DOUBLE
49261: LD_INT 1
49263: DEC
49264: ST_TO_ADDR
49265: LD_VAR 0 1
49269: PUSH
49270: FOR_TO
49271: IFFALSE 49309
// if array1 [ i ] <> array2 [ i ] then
49273: LD_VAR 0 1
49277: PUSH
49278: LD_VAR 0 4
49282: ARRAY
49283: PUSH
49284: LD_VAR 0 2
49288: PUSH
49289: LD_VAR 0 4
49293: ARRAY
49294: NONEQUAL
49295: IFFALSE 49307
// begin result := false ;
49297: LD_ADDR_VAR 0 3
49301: PUSH
49302: LD_INT 0
49304: ST_TO_ADDR
// break ;
49305: GO 49309
// end ;
49307: GO 49270
49309: POP
49310: POP
// end else
49311: GO 49321
// result := false ;
49313: LD_ADDR_VAR 0 3
49317: PUSH
49318: LD_INT 0
49320: ST_TO_ADDR
// end ;
49321: LD_VAR 0 3
49325: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49326: LD_INT 0
49328: PPUSH
49329: PPUSH
// if not array1 or not array2 then
49330: LD_VAR 0 1
49334: NOT
49335: PUSH
49336: LD_VAR 0 2
49340: NOT
49341: OR
49342: IFFALSE 49346
// exit ;
49344: GO 49410
// result := true ;
49346: LD_ADDR_VAR 0 3
49350: PUSH
49351: LD_INT 1
49353: ST_TO_ADDR
// for i = 1 to array1 do
49354: LD_ADDR_VAR 0 4
49358: PUSH
49359: DOUBLE
49360: LD_INT 1
49362: DEC
49363: ST_TO_ADDR
49364: LD_VAR 0 1
49368: PUSH
49369: FOR_TO
49370: IFFALSE 49408
// if array1 [ i ] <> array2 [ i ] then
49372: LD_VAR 0 1
49376: PUSH
49377: LD_VAR 0 4
49381: ARRAY
49382: PUSH
49383: LD_VAR 0 2
49387: PUSH
49388: LD_VAR 0 4
49392: ARRAY
49393: NONEQUAL
49394: IFFALSE 49406
// begin result := false ;
49396: LD_ADDR_VAR 0 3
49400: PUSH
49401: LD_INT 0
49403: ST_TO_ADDR
// break ;
49404: GO 49408
// end ;
49406: GO 49369
49408: POP
49409: POP
// end ;
49410: LD_VAR 0 3
49414: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49415: LD_INT 0
49417: PPUSH
49418: PPUSH
49419: PPUSH
// pom := GetBase ( fac ) ;
49420: LD_ADDR_VAR 0 5
49424: PUSH
49425: LD_VAR 0 1
49429: PPUSH
49430: CALL_OW 274
49434: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49435: LD_ADDR_VAR 0 4
49439: PUSH
49440: LD_VAR 0 2
49444: PUSH
49445: LD_INT 1
49447: ARRAY
49448: PPUSH
49449: LD_VAR 0 2
49453: PUSH
49454: LD_INT 2
49456: ARRAY
49457: PPUSH
49458: LD_VAR 0 2
49462: PUSH
49463: LD_INT 3
49465: ARRAY
49466: PPUSH
49467: LD_VAR 0 2
49471: PUSH
49472: LD_INT 4
49474: ARRAY
49475: PPUSH
49476: CALL_OW 449
49480: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49481: LD_ADDR_VAR 0 3
49485: PUSH
49486: LD_VAR 0 5
49490: PPUSH
49491: LD_INT 1
49493: PPUSH
49494: CALL_OW 275
49498: PUSH
49499: LD_VAR 0 4
49503: PUSH
49504: LD_INT 1
49506: ARRAY
49507: GREATEREQUAL
49508: PUSH
49509: LD_VAR 0 5
49513: PPUSH
49514: LD_INT 2
49516: PPUSH
49517: CALL_OW 275
49521: PUSH
49522: LD_VAR 0 4
49526: PUSH
49527: LD_INT 2
49529: ARRAY
49530: GREATEREQUAL
49531: AND
49532: PUSH
49533: LD_VAR 0 5
49537: PPUSH
49538: LD_INT 3
49540: PPUSH
49541: CALL_OW 275
49545: PUSH
49546: LD_VAR 0 4
49550: PUSH
49551: LD_INT 3
49553: ARRAY
49554: GREATEREQUAL
49555: AND
49556: ST_TO_ADDR
// end ;
49557: LD_VAR 0 3
49561: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49562: LD_INT 0
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
// pom := GetBase ( building ) ;
49568: LD_ADDR_VAR 0 3
49572: PUSH
49573: LD_VAR 0 1
49577: PPUSH
49578: CALL_OW 274
49582: ST_TO_ADDR
// if not pom then
49583: LD_VAR 0 3
49587: NOT
49588: IFFALSE 49592
// exit ;
49590: GO 49762
// btype := GetBType ( building ) ;
49592: LD_ADDR_VAR 0 5
49596: PUSH
49597: LD_VAR 0 1
49601: PPUSH
49602: CALL_OW 266
49606: ST_TO_ADDR
// if btype = b_armoury then
49607: LD_VAR 0 5
49611: PUSH
49612: LD_INT 4
49614: EQUAL
49615: IFFALSE 49625
// btype := b_barracks ;
49617: LD_ADDR_VAR 0 5
49621: PUSH
49622: LD_INT 5
49624: ST_TO_ADDR
// if btype = b_depot then
49625: LD_VAR 0 5
49629: PUSH
49630: LD_INT 0
49632: EQUAL
49633: IFFALSE 49643
// btype := b_warehouse ;
49635: LD_ADDR_VAR 0 5
49639: PUSH
49640: LD_INT 1
49642: ST_TO_ADDR
// if btype = b_workshop then
49643: LD_VAR 0 5
49647: PUSH
49648: LD_INT 2
49650: EQUAL
49651: IFFALSE 49661
// btype := b_factory ;
49653: LD_ADDR_VAR 0 5
49657: PUSH
49658: LD_INT 3
49660: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49661: LD_ADDR_VAR 0 4
49665: PUSH
49666: LD_VAR 0 5
49670: PPUSH
49671: LD_VAR 0 1
49675: PPUSH
49676: CALL_OW 248
49680: PPUSH
49681: CALL_OW 450
49685: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49686: LD_ADDR_VAR 0 2
49690: PUSH
49691: LD_VAR 0 3
49695: PPUSH
49696: LD_INT 1
49698: PPUSH
49699: CALL_OW 275
49703: PUSH
49704: LD_VAR 0 4
49708: PUSH
49709: LD_INT 1
49711: ARRAY
49712: GREATEREQUAL
49713: PUSH
49714: LD_VAR 0 3
49718: PPUSH
49719: LD_INT 2
49721: PPUSH
49722: CALL_OW 275
49726: PUSH
49727: LD_VAR 0 4
49731: PUSH
49732: LD_INT 2
49734: ARRAY
49735: GREATEREQUAL
49736: AND
49737: PUSH
49738: LD_VAR 0 3
49742: PPUSH
49743: LD_INT 3
49745: PPUSH
49746: CALL_OW 275
49750: PUSH
49751: LD_VAR 0 4
49755: PUSH
49756: LD_INT 3
49758: ARRAY
49759: GREATEREQUAL
49760: AND
49761: ST_TO_ADDR
// end ;
49762: LD_VAR 0 2
49766: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49767: LD_INT 0
49769: PPUSH
49770: PPUSH
49771: PPUSH
// pom := GetBase ( building ) ;
49772: LD_ADDR_VAR 0 4
49776: PUSH
49777: LD_VAR 0 1
49781: PPUSH
49782: CALL_OW 274
49786: ST_TO_ADDR
// if not pom then
49787: LD_VAR 0 4
49791: NOT
49792: IFFALSE 49796
// exit ;
49794: GO 49897
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49796: LD_ADDR_VAR 0 5
49800: PUSH
49801: LD_VAR 0 2
49805: PPUSH
49806: LD_VAR 0 1
49810: PPUSH
49811: CALL_OW 248
49815: PPUSH
49816: CALL_OW 450
49820: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49821: LD_ADDR_VAR 0 3
49825: PUSH
49826: LD_VAR 0 4
49830: PPUSH
49831: LD_INT 1
49833: PPUSH
49834: CALL_OW 275
49838: PUSH
49839: LD_VAR 0 5
49843: PUSH
49844: LD_INT 1
49846: ARRAY
49847: GREATEREQUAL
49848: PUSH
49849: LD_VAR 0 4
49853: PPUSH
49854: LD_INT 2
49856: PPUSH
49857: CALL_OW 275
49861: PUSH
49862: LD_VAR 0 5
49866: PUSH
49867: LD_INT 2
49869: ARRAY
49870: GREATEREQUAL
49871: AND
49872: PUSH
49873: LD_VAR 0 4
49877: PPUSH
49878: LD_INT 3
49880: PPUSH
49881: CALL_OW 275
49885: PUSH
49886: LD_VAR 0 5
49890: PUSH
49891: LD_INT 3
49893: ARRAY
49894: GREATEREQUAL
49895: AND
49896: ST_TO_ADDR
// end ;
49897: LD_VAR 0 3
49901: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49902: LD_INT 0
49904: PPUSH
49905: PPUSH
49906: PPUSH
49907: PPUSH
49908: PPUSH
49909: PPUSH
49910: PPUSH
49911: PPUSH
49912: PPUSH
49913: PPUSH
49914: PPUSH
// result := false ;
49915: LD_ADDR_VAR 0 8
49919: PUSH
49920: LD_INT 0
49922: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49923: LD_VAR 0 5
49927: NOT
49928: PUSH
49929: LD_VAR 0 1
49933: NOT
49934: OR
49935: PUSH
49936: LD_VAR 0 2
49940: NOT
49941: OR
49942: PUSH
49943: LD_VAR 0 3
49947: NOT
49948: OR
49949: IFFALSE 49953
// exit ;
49951: GO 50767
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49953: LD_ADDR_VAR 0 14
49957: PUSH
49958: LD_VAR 0 1
49962: PPUSH
49963: LD_VAR 0 2
49967: PPUSH
49968: LD_VAR 0 3
49972: PPUSH
49973: LD_VAR 0 4
49977: PPUSH
49978: LD_VAR 0 5
49982: PUSH
49983: LD_INT 1
49985: ARRAY
49986: PPUSH
49987: CALL_OW 248
49991: PPUSH
49992: LD_INT 0
49994: PPUSH
49995: CALL 52000 0 6
49999: ST_TO_ADDR
// if not hexes then
50000: LD_VAR 0 14
50004: NOT
50005: IFFALSE 50009
// exit ;
50007: GO 50767
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50009: LD_ADDR_VAR 0 17
50013: PUSH
50014: LD_VAR 0 5
50018: PPUSH
50019: LD_INT 22
50021: PUSH
50022: LD_VAR 0 13
50026: PPUSH
50027: CALL_OW 255
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: LD_INT 30
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 30
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: LIST
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PPUSH
50068: CALL_OW 72
50072: ST_TO_ADDR
// for i = 1 to hexes do
50073: LD_ADDR_VAR 0 9
50077: PUSH
50078: DOUBLE
50079: LD_INT 1
50081: DEC
50082: ST_TO_ADDR
50083: LD_VAR 0 14
50087: PUSH
50088: FOR_TO
50089: IFFALSE 50765
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50091: LD_ADDR_VAR 0 13
50095: PUSH
50096: LD_VAR 0 14
50100: PUSH
50101: LD_VAR 0 9
50105: ARRAY
50106: PUSH
50107: LD_INT 1
50109: ARRAY
50110: PPUSH
50111: LD_VAR 0 14
50115: PUSH
50116: LD_VAR 0 9
50120: ARRAY
50121: PUSH
50122: LD_INT 2
50124: ARRAY
50125: PPUSH
50126: CALL_OW 428
50130: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50131: LD_VAR 0 14
50135: PUSH
50136: LD_VAR 0 9
50140: ARRAY
50141: PUSH
50142: LD_INT 1
50144: ARRAY
50145: PPUSH
50146: LD_VAR 0 14
50150: PUSH
50151: LD_VAR 0 9
50155: ARRAY
50156: PUSH
50157: LD_INT 2
50159: ARRAY
50160: PPUSH
50161: CALL_OW 351
50165: PUSH
50166: LD_VAR 0 14
50170: PUSH
50171: LD_VAR 0 9
50175: ARRAY
50176: PUSH
50177: LD_INT 1
50179: ARRAY
50180: PPUSH
50181: LD_VAR 0 14
50185: PUSH
50186: LD_VAR 0 9
50190: ARRAY
50191: PUSH
50192: LD_INT 2
50194: ARRAY
50195: PPUSH
50196: CALL_OW 488
50200: NOT
50201: OR
50202: PUSH
50203: LD_VAR 0 13
50207: PPUSH
50208: CALL_OW 247
50212: PUSH
50213: LD_INT 3
50215: EQUAL
50216: OR
50217: IFFALSE 50223
// exit ;
50219: POP
50220: POP
50221: GO 50767
// if not tmp then
50223: LD_VAR 0 13
50227: NOT
50228: IFFALSE 50232
// continue ;
50230: GO 50088
// result := true ;
50232: LD_ADDR_VAR 0 8
50236: PUSH
50237: LD_INT 1
50239: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50240: LD_VAR 0 6
50244: PUSH
50245: LD_VAR 0 13
50249: PPUSH
50250: CALL_OW 247
50254: PUSH
50255: LD_INT 2
50257: EQUAL
50258: AND
50259: PUSH
50260: LD_VAR 0 13
50264: PPUSH
50265: CALL_OW 263
50269: PUSH
50270: LD_INT 1
50272: EQUAL
50273: AND
50274: IFFALSE 50438
// begin if IsDrivenBy ( tmp ) then
50276: LD_VAR 0 13
50280: PPUSH
50281: CALL_OW 311
50285: IFFALSE 50289
// continue ;
50287: GO 50088
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50289: LD_VAR 0 6
50293: PPUSH
50294: LD_INT 3
50296: PUSH
50297: LD_INT 60
50299: PUSH
50300: EMPTY
50301: LIST
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: LD_INT 55
50312: PUSH
50313: EMPTY
50314: LIST
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PPUSH
50324: CALL_OW 72
50328: IFFALSE 50436
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50330: LD_ADDR_VAR 0 18
50334: PUSH
50335: LD_VAR 0 6
50339: PPUSH
50340: LD_INT 3
50342: PUSH
50343: LD_INT 60
50345: PUSH
50346: EMPTY
50347: LIST
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 3
50355: PUSH
50356: LD_INT 55
50358: PUSH
50359: EMPTY
50360: LIST
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PPUSH
50370: CALL_OW 72
50374: PUSH
50375: LD_INT 1
50377: ARRAY
50378: ST_TO_ADDR
// if IsInUnit ( driver ) then
50379: LD_VAR 0 18
50383: PPUSH
50384: CALL_OW 310
50388: IFFALSE 50399
// ComExit ( driver ) ;
50390: LD_VAR 0 18
50394: PPUSH
50395: CALL 75780 0 1
// AddComEnterUnit ( driver , tmp ) ;
50399: LD_VAR 0 18
50403: PPUSH
50404: LD_VAR 0 13
50408: PPUSH
50409: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50413: LD_VAR 0 18
50417: PPUSH
50418: LD_VAR 0 7
50422: PPUSH
50423: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50427: LD_VAR 0 18
50431: PPUSH
50432: CALL_OW 181
// end ; continue ;
50436: GO 50088
// end ; if not cleaners or not tmp in cleaners then
50438: LD_VAR 0 6
50442: NOT
50443: PUSH
50444: LD_VAR 0 13
50448: PUSH
50449: LD_VAR 0 6
50453: IN
50454: NOT
50455: OR
50456: IFFALSE 50763
// begin if dep then
50458: LD_VAR 0 17
50462: IFFALSE 50598
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50464: LD_ADDR_VAR 0 16
50468: PUSH
50469: LD_VAR 0 17
50473: PUSH
50474: LD_INT 1
50476: ARRAY
50477: PPUSH
50478: CALL_OW 250
50482: PPUSH
50483: LD_VAR 0 17
50487: PUSH
50488: LD_INT 1
50490: ARRAY
50491: PPUSH
50492: CALL_OW 254
50496: PPUSH
50497: LD_INT 5
50499: PPUSH
50500: CALL_OW 272
50504: PUSH
50505: LD_VAR 0 17
50509: PUSH
50510: LD_INT 1
50512: ARRAY
50513: PPUSH
50514: CALL_OW 251
50518: PPUSH
50519: LD_VAR 0 17
50523: PUSH
50524: LD_INT 1
50526: ARRAY
50527: PPUSH
50528: CALL_OW 254
50532: PPUSH
50533: LD_INT 5
50535: PPUSH
50536: CALL_OW 273
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50545: LD_VAR 0 16
50549: PUSH
50550: LD_INT 1
50552: ARRAY
50553: PPUSH
50554: LD_VAR 0 16
50558: PUSH
50559: LD_INT 2
50561: ARRAY
50562: PPUSH
50563: CALL_OW 488
50567: IFFALSE 50598
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50569: LD_VAR 0 13
50573: PPUSH
50574: LD_VAR 0 16
50578: PUSH
50579: LD_INT 1
50581: ARRAY
50582: PPUSH
50583: LD_VAR 0 16
50587: PUSH
50588: LD_INT 2
50590: ARRAY
50591: PPUSH
50592: CALL_OW 111
// continue ;
50596: GO 50088
// end ; end ; r := GetDir ( tmp ) ;
50598: LD_ADDR_VAR 0 15
50602: PUSH
50603: LD_VAR 0 13
50607: PPUSH
50608: CALL_OW 254
50612: ST_TO_ADDR
// if r = 5 then
50613: LD_VAR 0 15
50617: PUSH
50618: LD_INT 5
50620: EQUAL
50621: IFFALSE 50631
// r := 0 ;
50623: LD_ADDR_VAR 0 15
50627: PUSH
50628: LD_INT 0
50630: ST_TO_ADDR
// for j = r to 5 do
50631: LD_ADDR_VAR 0 10
50635: PUSH
50636: DOUBLE
50637: LD_VAR 0 15
50641: DEC
50642: ST_TO_ADDR
50643: LD_INT 5
50645: PUSH
50646: FOR_TO
50647: IFFALSE 50761
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50649: LD_ADDR_VAR 0 11
50653: PUSH
50654: LD_VAR 0 13
50658: PPUSH
50659: CALL_OW 250
50663: PPUSH
50664: LD_VAR 0 10
50668: PPUSH
50669: LD_INT 2
50671: PPUSH
50672: CALL_OW 272
50676: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50677: LD_ADDR_VAR 0 12
50681: PUSH
50682: LD_VAR 0 13
50686: PPUSH
50687: CALL_OW 251
50691: PPUSH
50692: LD_VAR 0 10
50696: PPUSH
50697: LD_INT 2
50699: PPUSH
50700: CALL_OW 273
50704: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50705: LD_VAR 0 11
50709: PPUSH
50710: LD_VAR 0 12
50714: PPUSH
50715: CALL_OW 488
50719: PUSH
50720: LD_VAR 0 11
50724: PPUSH
50725: LD_VAR 0 12
50729: PPUSH
50730: CALL_OW 428
50734: NOT
50735: AND
50736: IFFALSE 50759
// begin ComMoveXY ( tmp , _x , _y ) ;
50738: LD_VAR 0 13
50742: PPUSH
50743: LD_VAR 0 11
50747: PPUSH
50748: LD_VAR 0 12
50752: PPUSH
50753: CALL_OW 111
// break ;
50757: GO 50761
// end ; end ;
50759: GO 50646
50761: POP
50762: POP
// end ; end ;
50763: GO 50088
50765: POP
50766: POP
// end ;
50767: LD_VAR 0 8
50771: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50772: LD_INT 0
50774: PPUSH
// result := true ;
50775: LD_ADDR_VAR 0 3
50779: PUSH
50780: LD_INT 1
50782: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50783: LD_VAR 0 2
50787: PUSH
50788: LD_INT 24
50790: DOUBLE
50791: EQUAL
50792: IFTRUE 50802
50794: LD_INT 33
50796: DOUBLE
50797: EQUAL
50798: IFTRUE 50802
50800: GO 50827
50802: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50803: LD_ADDR_VAR 0 3
50807: PUSH
50808: LD_INT 32
50810: PPUSH
50811: LD_VAR 0 1
50815: PPUSH
50816: CALL_OW 321
50820: PUSH
50821: LD_INT 2
50823: EQUAL
50824: ST_TO_ADDR
50825: GO 51143
50827: LD_INT 20
50829: DOUBLE
50830: EQUAL
50831: IFTRUE 50835
50833: GO 50860
50835: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50836: LD_ADDR_VAR 0 3
50840: PUSH
50841: LD_INT 6
50843: PPUSH
50844: LD_VAR 0 1
50848: PPUSH
50849: CALL_OW 321
50853: PUSH
50854: LD_INT 2
50856: EQUAL
50857: ST_TO_ADDR
50858: GO 51143
50860: LD_INT 22
50862: DOUBLE
50863: EQUAL
50864: IFTRUE 50874
50866: LD_INT 36
50868: DOUBLE
50869: EQUAL
50870: IFTRUE 50874
50872: GO 50899
50874: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50875: LD_ADDR_VAR 0 3
50879: PUSH
50880: LD_INT 15
50882: PPUSH
50883: LD_VAR 0 1
50887: PPUSH
50888: CALL_OW 321
50892: PUSH
50893: LD_INT 2
50895: EQUAL
50896: ST_TO_ADDR
50897: GO 51143
50899: LD_INT 30
50901: DOUBLE
50902: EQUAL
50903: IFTRUE 50907
50905: GO 50932
50907: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50908: LD_ADDR_VAR 0 3
50912: PUSH
50913: LD_INT 20
50915: PPUSH
50916: LD_VAR 0 1
50920: PPUSH
50921: CALL_OW 321
50925: PUSH
50926: LD_INT 2
50928: EQUAL
50929: ST_TO_ADDR
50930: GO 51143
50932: LD_INT 28
50934: DOUBLE
50935: EQUAL
50936: IFTRUE 50946
50938: LD_INT 21
50940: DOUBLE
50941: EQUAL
50942: IFTRUE 50946
50944: GO 50971
50946: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50947: LD_ADDR_VAR 0 3
50951: PUSH
50952: LD_INT 21
50954: PPUSH
50955: LD_VAR 0 1
50959: PPUSH
50960: CALL_OW 321
50964: PUSH
50965: LD_INT 2
50967: EQUAL
50968: ST_TO_ADDR
50969: GO 51143
50971: LD_INT 16
50973: DOUBLE
50974: EQUAL
50975: IFTRUE 50979
50977: GO 51004
50979: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50980: LD_ADDR_VAR 0 3
50984: PUSH
50985: LD_INT 84
50987: PPUSH
50988: LD_VAR 0 1
50992: PPUSH
50993: CALL_OW 321
50997: PUSH
50998: LD_INT 2
51000: EQUAL
51001: ST_TO_ADDR
51002: GO 51143
51004: LD_INT 19
51006: DOUBLE
51007: EQUAL
51008: IFTRUE 51018
51010: LD_INT 23
51012: DOUBLE
51013: EQUAL
51014: IFTRUE 51018
51016: GO 51043
51018: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51019: LD_ADDR_VAR 0 3
51023: PUSH
51024: LD_INT 83
51026: PPUSH
51027: LD_VAR 0 1
51031: PPUSH
51032: CALL_OW 321
51036: PUSH
51037: LD_INT 2
51039: EQUAL
51040: ST_TO_ADDR
51041: GO 51143
51043: LD_INT 17
51045: DOUBLE
51046: EQUAL
51047: IFTRUE 51051
51049: GO 51076
51051: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51052: LD_ADDR_VAR 0 3
51056: PUSH
51057: LD_INT 39
51059: PPUSH
51060: LD_VAR 0 1
51064: PPUSH
51065: CALL_OW 321
51069: PUSH
51070: LD_INT 2
51072: EQUAL
51073: ST_TO_ADDR
51074: GO 51143
51076: LD_INT 18
51078: DOUBLE
51079: EQUAL
51080: IFTRUE 51084
51082: GO 51109
51084: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51085: LD_ADDR_VAR 0 3
51089: PUSH
51090: LD_INT 40
51092: PPUSH
51093: LD_VAR 0 1
51097: PPUSH
51098: CALL_OW 321
51102: PUSH
51103: LD_INT 2
51105: EQUAL
51106: ST_TO_ADDR
51107: GO 51143
51109: LD_INT 27
51111: DOUBLE
51112: EQUAL
51113: IFTRUE 51117
51115: GO 51142
51117: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51118: LD_ADDR_VAR 0 3
51122: PUSH
51123: LD_INT 35
51125: PPUSH
51126: LD_VAR 0 1
51130: PPUSH
51131: CALL_OW 321
51135: PUSH
51136: LD_INT 2
51138: EQUAL
51139: ST_TO_ADDR
51140: GO 51143
51142: POP
// end ;
51143: LD_VAR 0 3
51147: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51148: LD_INT 0
51150: PPUSH
51151: PPUSH
51152: PPUSH
51153: PPUSH
51154: PPUSH
51155: PPUSH
51156: PPUSH
51157: PPUSH
51158: PPUSH
51159: PPUSH
51160: PPUSH
// result := false ;
51161: LD_ADDR_VAR 0 6
51165: PUSH
51166: LD_INT 0
51168: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51169: LD_VAR 0 1
51173: NOT
51174: PUSH
51175: LD_VAR 0 1
51179: PPUSH
51180: CALL_OW 266
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: IN
51195: NOT
51196: OR
51197: PUSH
51198: LD_VAR 0 2
51202: NOT
51203: OR
51204: PUSH
51205: LD_VAR 0 5
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 3
51221: PUSH
51222: LD_INT 4
51224: PUSH
51225: LD_INT 5
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: IN
51236: NOT
51237: OR
51238: PUSH
51239: LD_VAR 0 3
51243: PPUSH
51244: LD_VAR 0 4
51248: PPUSH
51249: CALL_OW 488
51253: NOT
51254: OR
51255: IFFALSE 51259
// exit ;
51257: GO 51995
// side := GetSide ( depot ) ;
51259: LD_ADDR_VAR 0 9
51263: PUSH
51264: LD_VAR 0 1
51268: PPUSH
51269: CALL_OW 255
51273: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51274: LD_VAR 0 9
51278: PPUSH
51279: LD_VAR 0 2
51283: PPUSH
51284: CALL 50772 0 2
51288: NOT
51289: IFFALSE 51293
// exit ;
51291: GO 51995
// pom := GetBase ( depot ) ;
51293: LD_ADDR_VAR 0 10
51297: PUSH
51298: LD_VAR 0 1
51302: PPUSH
51303: CALL_OW 274
51307: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51308: LD_ADDR_VAR 0 11
51312: PUSH
51313: LD_VAR 0 2
51317: PPUSH
51318: LD_VAR 0 1
51322: PPUSH
51323: CALL_OW 248
51327: PPUSH
51328: CALL_OW 450
51332: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51333: LD_VAR 0 10
51337: PPUSH
51338: LD_INT 1
51340: PPUSH
51341: CALL_OW 275
51345: PUSH
51346: LD_VAR 0 11
51350: PUSH
51351: LD_INT 1
51353: ARRAY
51354: GREATEREQUAL
51355: PUSH
51356: LD_VAR 0 10
51360: PPUSH
51361: LD_INT 2
51363: PPUSH
51364: CALL_OW 275
51368: PUSH
51369: LD_VAR 0 11
51373: PUSH
51374: LD_INT 2
51376: ARRAY
51377: GREATEREQUAL
51378: AND
51379: PUSH
51380: LD_VAR 0 10
51384: PPUSH
51385: LD_INT 3
51387: PPUSH
51388: CALL_OW 275
51392: PUSH
51393: LD_VAR 0 11
51397: PUSH
51398: LD_INT 3
51400: ARRAY
51401: GREATEREQUAL
51402: AND
51403: NOT
51404: IFFALSE 51408
// exit ;
51406: GO 51995
// if GetBType ( depot ) = b_depot then
51408: LD_VAR 0 1
51412: PPUSH
51413: CALL_OW 266
51417: PUSH
51418: LD_INT 0
51420: EQUAL
51421: IFFALSE 51433
// dist := 28 else
51423: LD_ADDR_VAR 0 14
51427: PUSH
51428: LD_INT 28
51430: ST_TO_ADDR
51431: GO 51441
// dist := 36 ;
51433: LD_ADDR_VAR 0 14
51437: PUSH
51438: LD_INT 36
51440: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51441: LD_VAR 0 1
51445: PPUSH
51446: LD_VAR 0 3
51450: PPUSH
51451: LD_VAR 0 4
51455: PPUSH
51456: CALL_OW 297
51460: PUSH
51461: LD_VAR 0 14
51465: GREATER
51466: IFFALSE 51470
// exit ;
51468: GO 51995
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51470: LD_ADDR_VAR 0 12
51474: PUSH
51475: LD_VAR 0 2
51479: PPUSH
51480: LD_VAR 0 3
51484: PPUSH
51485: LD_VAR 0 4
51489: PPUSH
51490: LD_VAR 0 5
51494: PPUSH
51495: LD_VAR 0 1
51499: PPUSH
51500: CALL_OW 248
51504: PPUSH
51505: LD_INT 0
51507: PPUSH
51508: CALL 52000 0 6
51512: ST_TO_ADDR
// if not hexes then
51513: LD_VAR 0 12
51517: NOT
51518: IFFALSE 51522
// exit ;
51520: GO 51995
// hex := GetHexInfo ( x , y ) ;
51522: LD_ADDR_VAR 0 15
51526: PUSH
51527: LD_VAR 0 3
51531: PPUSH
51532: LD_VAR 0 4
51536: PPUSH
51537: CALL_OW 546
51541: ST_TO_ADDR
// if hex [ 1 ] then
51542: LD_VAR 0 15
51546: PUSH
51547: LD_INT 1
51549: ARRAY
51550: IFFALSE 51554
// exit ;
51552: GO 51995
// height := hex [ 2 ] ;
51554: LD_ADDR_VAR 0 13
51558: PUSH
51559: LD_VAR 0 15
51563: PUSH
51564: LD_INT 2
51566: ARRAY
51567: ST_TO_ADDR
// for i = 1 to hexes do
51568: LD_ADDR_VAR 0 7
51572: PUSH
51573: DOUBLE
51574: LD_INT 1
51576: DEC
51577: ST_TO_ADDR
51578: LD_VAR 0 12
51582: PUSH
51583: FOR_TO
51584: IFFALSE 51914
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51586: LD_VAR 0 12
51590: PUSH
51591: LD_VAR 0 7
51595: ARRAY
51596: PUSH
51597: LD_INT 1
51599: ARRAY
51600: PPUSH
51601: LD_VAR 0 12
51605: PUSH
51606: LD_VAR 0 7
51610: ARRAY
51611: PUSH
51612: LD_INT 2
51614: ARRAY
51615: PPUSH
51616: CALL_OW 488
51620: NOT
51621: PUSH
51622: LD_VAR 0 12
51626: PUSH
51627: LD_VAR 0 7
51631: ARRAY
51632: PUSH
51633: LD_INT 1
51635: ARRAY
51636: PPUSH
51637: LD_VAR 0 12
51641: PUSH
51642: LD_VAR 0 7
51646: ARRAY
51647: PUSH
51648: LD_INT 2
51650: ARRAY
51651: PPUSH
51652: CALL_OW 428
51656: PUSH
51657: LD_INT 0
51659: GREATER
51660: OR
51661: PUSH
51662: LD_VAR 0 12
51666: PUSH
51667: LD_VAR 0 7
51671: ARRAY
51672: PUSH
51673: LD_INT 1
51675: ARRAY
51676: PPUSH
51677: LD_VAR 0 12
51681: PUSH
51682: LD_VAR 0 7
51686: ARRAY
51687: PUSH
51688: LD_INT 2
51690: ARRAY
51691: PPUSH
51692: CALL_OW 351
51696: OR
51697: IFFALSE 51703
// exit ;
51699: POP
51700: POP
51701: GO 51995
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51703: LD_ADDR_VAR 0 8
51707: PUSH
51708: LD_VAR 0 12
51712: PUSH
51713: LD_VAR 0 7
51717: ARRAY
51718: PUSH
51719: LD_INT 1
51721: ARRAY
51722: PPUSH
51723: LD_VAR 0 12
51727: PUSH
51728: LD_VAR 0 7
51732: ARRAY
51733: PUSH
51734: LD_INT 2
51736: ARRAY
51737: PPUSH
51738: CALL_OW 546
51742: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51743: LD_VAR 0 8
51747: PUSH
51748: LD_INT 1
51750: ARRAY
51751: PUSH
51752: LD_VAR 0 8
51756: PUSH
51757: LD_INT 2
51759: ARRAY
51760: PUSH
51761: LD_VAR 0 13
51765: PUSH
51766: LD_INT 2
51768: PLUS
51769: GREATER
51770: OR
51771: PUSH
51772: LD_VAR 0 8
51776: PUSH
51777: LD_INT 2
51779: ARRAY
51780: PUSH
51781: LD_VAR 0 13
51785: PUSH
51786: LD_INT 2
51788: MINUS
51789: LESS
51790: OR
51791: PUSH
51792: LD_VAR 0 8
51796: PUSH
51797: LD_INT 3
51799: ARRAY
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 8
51806: PUSH
51807: LD_INT 9
51809: PUSH
51810: LD_INT 10
51812: PUSH
51813: LD_INT 11
51815: PUSH
51816: LD_INT 12
51818: PUSH
51819: LD_INT 13
51821: PUSH
51822: LD_INT 16
51824: PUSH
51825: LD_INT 17
51827: PUSH
51828: LD_INT 18
51830: PUSH
51831: LD_INT 19
51833: PUSH
51834: LD_INT 20
51836: PUSH
51837: LD_INT 21
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: IN
51855: NOT
51856: OR
51857: PUSH
51858: LD_VAR 0 8
51862: PUSH
51863: LD_INT 5
51865: ARRAY
51866: NOT
51867: OR
51868: PUSH
51869: LD_VAR 0 8
51873: PUSH
51874: LD_INT 6
51876: ARRAY
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: LD_INT 7
51886: PUSH
51887: LD_INT 9
51889: PUSH
51890: LD_INT 10
51892: PUSH
51893: LD_INT 11
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: IN
51904: NOT
51905: OR
51906: IFFALSE 51912
// exit ;
51908: POP
51909: POP
51910: GO 51995
// end ;
51912: GO 51583
51914: POP
51915: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51916: LD_VAR 0 9
51920: PPUSH
51921: LD_VAR 0 3
51925: PPUSH
51926: LD_VAR 0 4
51930: PPUSH
51931: LD_INT 20
51933: PPUSH
51934: CALL 43947 0 4
51938: PUSH
51939: LD_INT 4
51941: ARRAY
51942: IFFALSE 51946
// exit ;
51944: GO 51995
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51946: LD_VAR 0 2
51950: PUSH
51951: LD_INT 29
51953: PUSH
51954: LD_INT 30
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: IN
51961: PUSH
51962: LD_VAR 0 3
51966: PPUSH
51967: LD_VAR 0 4
51971: PPUSH
51972: LD_VAR 0 9
51976: PPUSH
51977: CALL_OW 440
51981: NOT
51982: AND
51983: IFFALSE 51987
// exit ;
51985: GO 51995
// result := true ;
51987: LD_ADDR_VAR 0 6
51991: PUSH
51992: LD_INT 1
51994: ST_TO_ADDR
// end ;
51995: LD_VAR 0 6
51999: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52000: LD_INT 0
52002: PPUSH
52003: PPUSH
52004: PPUSH
52005: PPUSH
52006: PPUSH
52007: PPUSH
52008: PPUSH
52009: PPUSH
52010: PPUSH
52011: PPUSH
52012: PPUSH
52013: PPUSH
52014: PPUSH
52015: PPUSH
52016: PPUSH
52017: PPUSH
52018: PPUSH
52019: PPUSH
52020: PPUSH
52021: PPUSH
52022: PPUSH
52023: PPUSH
52024: PPUSH
52025: PPUSH
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
52038: PPUSH
52039: PPUSH
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
52044: PPUSH
52045: PPUSH
52046: PPUSH
52047: PPUSH
52048: PPUSH
52049: PPUSH
52050: PPUSH
52051: PPUSH
52052: PPUSH
52053: PPUSH
52054: PPUSH
52055: PPUSH
52056: PPUSH
52057: PPUSH
52058: PPUSH
52059: PPUSH
// result = [ ] ;
52060: LD_ADDR_VAR 0 7
52064: PUSH
52065: EMPTY
52066: ST_TO_ADDR
// temp_list = [ ] ;
52067: LD_ADDR_VAR 0 9
52071: PUSH
52072: EMPTY
52073: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52074: LD_VAR 0 4
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: LD_INT 3
52090: PUSH
52091: LD_INT 4
52093: PUSH
52094: LD_INT 5
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: IN
52105: NOT
52106: PUSH
52107: LD_VAR 0 1
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: IN
52122: PUSH
52123: LD_VAR 0 5
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 3
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: IN
52142: NOT
52143: AND
52144: OR
52145: IFFALSE 52149
// exit ;
52147: GO 70540
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52149: LD_VAR 0 1
52153: PUSH
52154: LD_INT 6
52156: PUSH
52157: LD_INT 7
52159: PUSH
52160: LD_INT 8
52162: PUSH
52163: LD_INT 13
52165: PUSH
52166: LD_INT 12
52168: PUSH
52169: LD_INT 15
52171: PUSH
52172: LD_INT 11
52174: PUSH
52175: LD_INT 14
52177: PUSH
52178: LD_INT 10
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: IN
52192: IFFALSE 52202
// btype = b_lab ;
52194: LD_ADDR_VAR 0 1
52198: PUSH
52199: LD_INT 6
52201: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52202: LD_VAR 0 6
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: LIST
52220: IN
52221: NOT
52222: PUSH
52223: LD_VAR 0 1
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: LD_INT 3
52239: PUSH
52240: LD_INT 6
52242: PUSH
52243: LD_INT 36
52245: PUSH
52246: LD_INT 4
52248: PUSH
52249: LD_INT 5
52251: PUSH
52252: LD_INT 31
52254: PUSH
52255: LD_INT 32
52257: PUSH
52258: LD_INT 33
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: IN
52274: NOT
52275: PUSH
52276: LD_VAR 0 6
52280: PUSH
52281: LD_INT 1
52283: EQUAL
52284: AND
52285: OR
52286: PUSH
52287: LD_VAR 0 1
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: IN
52302: NOT
52303: PUSH
52304: LD_VAR 0 6
52308: PUSH
52309: LD_INT 2
52311: EQUAL
52312: AND
52313: OR
52314: IFFALSE 52324
// mode = 0 ;
52316: LD_ADDR_VAR 0 6
52320: PUSH
52321: LD_INT 0
52323: ST_TO_ADDR
// case mode of 0 :
52324: LD_VAR 0 6
52328: PUSH
52329: LD_INT 0
52331: DOUBLE
52332: EQUAL
52333: IFTRUE 52337
52335: GO 63790
52337: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52338: LD_ADDR_VAR 0 11
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 3
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52531: LD_ADDR_VAR 0 12
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 3
52688: NEG
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: NEG
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52727: LD_ADDR_VAR 0 13
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 3
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 3
52886: NEG
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 3
52898: NEG
52899: PUSH
52900: LD_INT 3
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52926: LD_ADDR_VAR 0 14
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 3
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53122: LD_ADDR_VAR 0 15
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53315: LD_ADDR_VAR 0 16
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 3
53472: PUSH
53473: LD_INT 3
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 3
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53508: LD_ADDR_VAR 0 17
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53738: LD_ADDR_VAR 0 18
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: NEG
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53968: LD_ADDR_VAR 0 19
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54198: LD_ADDR_VAR 0 20
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 2
54397: NEG
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54428: LD_ADDR_VAR 0 21
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54658: LD_ADDR_VAR 0 22
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54888: LD_ADDR_VAR 0 23
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 2
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55168: LD_ADDR_VAR 0 24
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 3
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55444: LD_ADDR_VAR 0 25
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 3
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: LD_INT 3
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: LD_INT 3
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55718: LD_ADDR_VAR 0 26
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: LD_INT 3
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55994: LD_ADDR_VAR 0 27
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: NEG
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56274: LD_ADDR_VAR 0 28
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: LD_INT 2
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56556: LD_ADDR_VAR 0 29
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 2
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 2
56746: NEG
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: LD_INT 3
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 3
56800: NEG
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56835: LD_ADDR_VAR 0 30
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 3
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57113: LD_ADDR_VAR 0 31
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: LD_INT 3
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 3
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: NEG
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57391: LD_ADDR_VAR 0 32
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 2
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 3
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57669: LD_ADDR_VAR 0 33
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: LD_INT 3
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 3
57913: NEG
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57948: LD_ADDR_VAR 0 34
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 3
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58228: LD_ADDR_VAR 0 35
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58340: LD_ADDR_VAR 0 36
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58452: LD_ADDR_VAR 0 37
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58564: LD_ADDR_VAR 0 38
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58676: LD_ADDR_VAR 0 39
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58788: LD_ADDR_VAR 0 40
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58900: LD_ADDR_VAR 0 41
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 2
59066: NEG
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: LD_INT 3
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 3
59174: NEG
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 3
59185: NEG
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59250: LD_ADDR_VAR 0 42
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 2
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: LD_INT 2
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 3
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 3
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59600: LD_ADDR_VAR 0 43
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 3
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 3
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 2
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 3
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 3
59896: NEG
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59948: LD_ADDR_VAR 0 44
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 2
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: LD_INT 2
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: NEG
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: NEG
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: LD_INT 2
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: LD_INT 3
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 3
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 3
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: LD_INT 3
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: NEG
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 3
60245: NEG
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: LD_INT 3
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60298: LD_ADDR_VAR 0 45
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: LD_INT 2
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 2
60464: NEG
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 2
60476: NEG
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 3
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 3
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 3
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 2
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 3
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: LD_INT 3
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: LD_INT 3
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 3
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: LD_INT 3
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60648: LD_ADDR_VAR 0 46
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: LD_INT 2
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 2
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 3
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 3
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: LD_INT 3
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 3
60944: NEG
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 3
60955: NEG
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60996: LD_ADDR_VAR 0 47
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: NEG
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 2
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61147: LD_ADDR_VAR 0 48
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: LD_INT 1
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61294: LD_ADDR_VAR 0 49
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61438: LD_ADDR_VAR 0 50
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 2
61529: PUSH
61530: LD_INT 2
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61582: LD_ADDR_VAR 0 51
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 1
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61729: LD_ADDR_VAR 0 52
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 2
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 2
61844: NEG
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61880: LD_ADDR_VAR 0 53
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: LD_INT 1
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: LD_INT 2
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: PUSH
62026: LD_INT 2
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 2
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 2
62056: NEG
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 2
62067: NEG
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 2
62079: NEG
62080: PUSH
62081: LD_INT 2
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62110: LD_ADDR_VAR 0 54
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 2
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: LD_INT 2
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 2
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: PUSH
62246: LD_INT 2
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: LD_INT 2
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 2
62286: NEG
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 2
62297: NEG
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 2
62309: NEG
62310: PUSH
62311: LD_INT 2
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62340: LD_ADDR_VAR 0 55
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: LD_INT 1
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 2
62516: NEG
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: LD_INT 1
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62570: LD_ADDR_VAR 0 56
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 1
62651: NEG
62652: PUSH
62653: LD_INT 2
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: LD_INT 2
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: LD_INT 0
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 2
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 2
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 2
62746: NEG
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62800: LD_ADDR_VAR 0 57
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 1
62858: NEG
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 2
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_INT 2
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 2
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 2
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: PUSH
62946: LD_INT 2
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: LD_INT 2
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 2
62976: NEG
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63030: LD_ADDR_VAR 0 58
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 1
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: LD_INT 1
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 2
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: LD_INT 2
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 2
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 2
63165: PUSH
63166: LD_INT 2
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: NEG
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 2
63206: NEG
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 2
63217: NEG
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63260: LD_ADDR_VAR 0 59
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63348: LD_ADDR_VAR 0 60
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63436: LD_ADDR_VAR 0 61
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63524: LD_ADDR_VAR 0 62
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63612: LD_ADDR_VAR 0 63
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63700: LD_ADDR_VAR 0 64
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 1
63758: NEG
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: LD_INT 1
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: ST_TO_ADDR
// end ; 1 :
63788: GO 69685
63790: LD_INT 1
63792: DOUBLE
63793: EQUAL
63794: IFTRUE 63798
63796: GO 66421
63798: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63799: LD_ADDR_VAR 0 11
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 3
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 3
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: LIST
63842: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63843: LD_ADDR_VAR 0 12
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 3
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: LIST
63883: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63884: LD_ADDR_VAR 0 13
63888: PUSH
63889: LD_INT 3
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 3
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: LD_INT 3
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63924: LD_ADDR_VAR 0 14
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: LD_INT 3
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: LD_INT 3
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: LD_INT 2
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: LIST
63964: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63965: LD_ADDR_VAR 0 15
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 3
63994: NEG
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64009: LD_ADDR_VAR 0 16
64013: PUSH
64014: LD_INT 2
64016: NEG
64017: PUSH
64018: LD_INT 3
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 3
64028: NEG
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 3
64040: NEG
64041: PUSH
64042: LD_INT 3
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: LIST
64054: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64055: LD_ADDR_VAR 0 17
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: LD_INT 3
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 3
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 2
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: LIST
64098: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64099: LD_ADDR_VAR 0 18
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 3
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 3
64127: PUSH
64128: LD_INT 1
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: LIST
64139: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64140: LD_ADDR_VAR 0 19
64144: PUSH
64145: LD_INT 3
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 3
64157: PUSH
64158: LD_INT 3
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: LD_INT 3
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: LIST
64179: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64180: LD_ADDR_VAR 0 20
64184: PUSH
64185: LD_INT 1
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: LD_INT 3
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: LD_INT 2
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: LIST
64220: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64221: LD_ADDR_VAR 0 21
64225: PUSH
64226: LD_INT 2
64228: NEG
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 3
64239: NEG
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 3
64250: NEG
64251: PUSH
64252: LD_INT 1
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64265: LD_ADDR_VAR 0 22
64269: PUSH
64270: LD_INT 2
64272: NEG
64273: PUSH
64274: LD_INT 3
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 3
64284: NEG
64285: PUSH
64286: LD_INT 2
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 3
64296: NEG
64297: PUSH
64298: LD_INT 3
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: LIST
64310: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64311: LD_ADDR_VAR 0 23
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: LD_INT 3
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: LD_INT 4
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: LD_INT 3
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64355: LD_ADDR_VAR 0 24
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 4
64383: PUSH
64384: LD_INT 1
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: LIST
64395: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64396: LD_ADDR_VAR 0 25
64400: PUSH
64401: LD_INT 3
64403: PUSH
64404: LD_INT 3
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 4
64413: PUSH
64414: LD_INT 3
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: LD_INT 4
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: LIST
64435: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64436: LD_ADDR_VAR 0 26
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: LD_INT 4
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: LD_INT 3
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64477: LD_ADDR_VAR 0 27
64481: PUSH
64482: LD_INT 3
64484: NEG
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 3
64495: NEG
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 4
64506: NEG
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64521: LD_ADDR_VAR 0 28
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: LD_INT 3
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 3
64540: NEG
64541: PUSH
64542: LD_INT 4
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 4
64552: NEG
64553: PUSH
64554: LD_INT 3
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: LIST
64566: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64567: LD_ADDR_VAR 0 29
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: LD_INT 3
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: LD_INT 3
64589: NEG
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 1
64597: PUSH
64598: LD_INT 2
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: LD_INT 4
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 4
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 3
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: LD_INT 5
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: LD_INT 5
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 1
64665: PUSH
64666: LD_INT 4
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: LD_INT 6
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 6
64691: NEG
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: LD_INT 5
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64722: LD_ADDR_VAR 0 30
64726: PUSH
64727: LD_INT 2
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 3
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 3
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 3
64760: PUSH
64761: LD_INT 1
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 4
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 4
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 4
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 5
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 5
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 5
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 6
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 6
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64865: LD_ADDR_VAR 0 31
64869: PUSH
64870: LD_INT 3
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 3
64882: PUSH
64883: LD_INT 3
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: LD_INT 3
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 4
64902: PUSH
64903: LD_INT 3
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 4
64912: PUSH
64913: LD_INT 4
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: LD_INT 4
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 5
64932: PUSH
64933: LD_INT 4
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 5
64942: PUSH
64943: LD_INT 5
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 4
64952: PUSH
64953: LD_INT 5
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 6
64962: PUSH
64963: LD_INT 5
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 6
64972: PUSH
64973: LD_INT 6
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 5
64982: PUSH
64983: LD_INT 6
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65004: LD_ADDR_VAR 0 32
65008: PUSH
65009: LD_INT 1
65011: PUSH
65012: LD_INT 3
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 3
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: NEG
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: LD_INT 4
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: LD_INT 4
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: LD_INT 3
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: LD_INT 5
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: LD_INT 5
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 1
65093: NEG
65094: PUSH
65095: LD_INT 4
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 6
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 6
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: LD_INT 5
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65147: LD_ADDR_VAR 0 33
65151: PUSH
65152: LD_INT 2
65154: NEG
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 3
65176: NEG
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: NEG
65189: PUSH
65190: LD_INT 1
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 4
65199: NEG
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 4
65210: NEG
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 4
65222: NEG
65223: PUSH
65224: LD_INT 1
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 5
65233: NEG
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 5
65244: NEG
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 5
65256: NEG
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 6
65267: NEG
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 6
65278: NEG
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65302: LD_ADDR_VAR 0 34
65306: PUSH
65307: LD_INT 2
65309: NEG
65310: PUSH
65311: LD_INT 3
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 3
65321: NEG
65322: PUSH
65323: LD_INT 2
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 3
65333: NEG
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 3
65345: NEG
65346: PUSH
65347: LD_INT 4
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 4
65357: NEG
65358: PUSH
65359: LD_INT 3
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 4
65369: NEG
65370: PUSH
65371: LD_INT 4
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 4
65381: NEG
65382: PUSH
65383: LD_INT 5
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 5
65393: NEG
65394: PUSH
65395: LD_INT 4
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 5
65405: NEG
65406: PUSH
65407: LD_INT 5
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 5
65417: NEG
65418: PUSH
65419: LD_INT 6
65421: NEG
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 6
65429: NEG
65430: PUSH
65431: LD_INT 5
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 6
65441: NEG
65442: PUSH
65443: LD_INT 6
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65465: LD_ADDR_VAR 0 41
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: LD_INT 3
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: LD_INT 2
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: LIST
65508: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65509: LD_ADDR_VAR 0 42
65513: PUSH
65514: LD_INT 2
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: LD_INT 1
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 3
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: LIST
65549: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65550: LD_ADDR_VAR 0 43
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: LD_INT 2
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 3
65567: PUSH
65568: LD_INT 2
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 2
65577: PUSH
65578: LD_INT 3
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65590: LD_ADDR_VAR 0 44
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 2
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: LD_INT 3
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: LD_INT 2
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: LIST
65630: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65631: LD_ADDR_VAR 0 45
65635: PUSH
65636: LD_INT 2
65638: NEG
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 2
65649: NEG
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 3
65660: NEG
65661: PUSH
65662: LD_INT 1
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: LIST
65674: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65675: LD_ADDR_VAR 0 46
65679: PUSH
65680: LD_INT 2
65682: NEG
65683: PUSH
65684: LD_INT 2
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PUSH
65696: LD_INT 3
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 3
65706: NEG
65707: PUSH
65708: LD_INT 2
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65721: LD_ADDR_VAR 0 47
65725: PUSH
65726: LD_INT 2
65728: NEG
65729: PUSH
65730: LD_INT 3
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: LD_INT 3
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65754: LD_ADDR_VAR 0 48
65758: PUSH
65759: LD_INT 1
65761: PUSH
65762: LD_INT 2
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: LD_INT 1
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65785: LD_ADDR_VAR 0 49
65789: PUSH
65790: LD_INT 3
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 3
65802: PUSH
65803: LD_INT 2
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65814: LD_ADDR_VAR 0 50
65818: PUSH
65819: LD_INT 2
65821: PUSH
65822: LD_INT 3
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 1
65831: PUSH
65832: LD_INT 3
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65843: LD_ADDR_VAR 0 51
65847: PUSH
65848: LD_INT 1
65850: NEG
65851: PUSH
65852: LD_INT 2
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 2
65861: NEG
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65874: LD_ADDR_VAR 0 52
65878: PUSH
65879: LD_INT 3
65881: NEG
65882: PUSH
65883: LD_INT 1
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 3
65893: NEG
65894: PUSH
65895: LD_INT 2
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65907: LD_ADDR_VAR 0 53
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: LD_INT 3
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 0
65926: PUSH
65927: LD_INT 3
65929: NEG
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 1
65937: PUSH
65938: LD_INT 2
65940: NEG
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: LIST
65950: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65951: LD_ADDR_VAR 0 54
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: LD_INT 1
65961: NEG
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: LD_INT 0
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 3
65979: PUSH
65980: LD_INT 1
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: LIST
65991: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65992: LD_ADDR_VAR 0 55
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: LD_INT 2
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 3
66009: PUSH
66010: LD_INT 3
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: PUSH
66020: LD_INT 3
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: LIST
66031: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66032: LD_ADDR_VAR 0 56
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: LD_INT 3
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 0
66049: PUSH
66050: LD_INT 3
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: NEG
66060: PUSH
66061: LD_INT 2
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66073: LD_ADDR_VAR 0 57
66077: PUSH
66078: LD_INT 2
66080: NEG
66081: PUSH
66082: LD_INT 1
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 3
66091: NEG
66092: PUSH
66093: LD_INT 0
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 3
66102: NEG
66103: PUSH
66104: LD_INT 1
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: LIST
66116: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66117: LD_ADDR_VAR 0 58
66121: PUSH
66122: LD_INT 2
66124: NEG
66125: PUSH
66126: LD_INT 3
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 3
66136: NEG
66137: PUSH
66138: LD_INT 2
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 3
66148: NEG
66149: PUSH
66150: LD_INT 3
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: LIST
66162: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66163: LD_ADDR_VAR 0 59
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: LD_INT 2
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 2
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: LIST
66206: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66207: LD_ADDR_VAR 0 60
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 2
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 2
66235: PUSH
66236: LD_INT 1
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66248: LD_ADDR_VAR 0 61
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: LD_INT 2
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: LD_INT 2
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: LIST
66287: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66288: LD_ADDR_VAR 0 62
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: LD_INT 2
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: LD_INT 1
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66329: LD_ADDR_VAR 0 63
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: LD_INT 1
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 2
66347: NEG
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 2
66358: NEG
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: LIST
66372: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66373: LD_ADDR_VAR 0 64
66377: PUSH
66378: LD_INT 1
66380: NEG
66381: PUSH
66382: LD_INT 2
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 2
66404: NEG
66405: PUSH
66406: LD_INT 2
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: LIST
66418: ST_TO_ADDR
// end ; 2 :
66419: GO 69685
66421: LD_INT 2
66423: DOUBLE
66424: EQUAL
66425: IFTRUE 66429
66427: GO 69684
66429: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66430: LD_ADDR_VAR 0 29
66434: PUSH
66435: LD_INT 4
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 4
66447: PUSH
66448: LD_INT 1
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 5
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 5
66468: PUSH
66469: LD_INT 1
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 4
66478: PUSH
66479: LD_INT 1
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 3
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 3
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 3
66509: PUSH
66510: LD_INT 2
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 5
66520: PUSH
66521: LD_INT 2
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 3
66530: PUSH
66531: LD_INT 3
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 3
66540: PUSH
66541: LD_INT 2
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 4
66550: PUSH
66551: LD_INT 3
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 4
66560: PUSH
66561: LD_INT 4
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 3
66570: PUSH
66571: LD_INT 4
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 2
66580: PUSH
66581: LD_INT 3
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: LD_INT 2
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 4
66600: PUSH
66601: LD_INT 2
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: LD_INT 4
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: LD_INT 4
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 0
66630: PUSH
66631: LD_INT 3
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: PUSH
66641: LD_INT 4
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 1
66650: PUSH
66651: LD_INT 5
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 5
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: LD_INT 4
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 2
66692: PUSH
66693: LD_INT 5
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 2
66702: NEG
66703: PUSH
66704: LD_INT 3
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 3
66713: NEG
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 3
66724: NEG
66725: PUSH
66726: LD_INT 1
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 2
66736: NEG
66737: PUSH
66738: LD_INT 0
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 2
66747: NEG
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 3
66758: NEG
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 4
66769: NEG
66770: PUSH
66771: LD_INT 0
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 4
66780: NEG
66781: PUSH
66782: LD_INT 1
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 4
66792: NEG
66793: PUSH
66794: LD_INT 2
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 2
66804: NEG
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 4
66815: NEG
66816: PUSH
66817: LD_INT 4
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 4
66827: NEG
66828: PUSH
66829: LD_INT 5
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 3
66839: NEG
66840: PUSH
66841: LD_INT 4
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 3
66851: NEG
66852: PUSH
66853: LD_INT 3
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 4
66863: NEG
66864: PUSH
66865: LD_INT 3
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 5
66875: NEG
66876: PUSH
66877: LD_INT 4
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 5
66887: NEG
66888: PUSH
66889: LD_INT 5
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 3
66899: NEG
66900: PUSH
66901: LD_INT 5
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 5
66911: NEG
66912: PUSH
66913: LD_INT 3
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66968: LD_ADDR_VAR 0 30
66972: PUSH
66973: LD_INT 4
66975: PUSH
66976: LD_INT 4
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 4
66985: PUSH
66986: LD_INT 3
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 5
66995: PUSH
66996: LD_INT 4
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 5
67005: PUSH
67006: LD_INT 5
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 4
67015: PUSH
67016: LD_INT 5
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 3
67025: PUSH
67026: LD_INT 4
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 3
67035: PUSH
67036: LD_INT 3
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 5
67045: PUSH
67046: LD_INT 3
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 3
67055: PUSH
67056: LD_INT 5
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: LD_INT 3
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: LD_INT 2
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 1
67085: PUSH
67086: LD_INT 3
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 1
67095: PUSH
67096: LD_INT 4
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 0
67105: PUSH
67106: LD_INT 4
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 1
67115: NEG
67116: PUSH
67117: LD_INT 3
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: LD_INT 2
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: LD_INT 4
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: LD_INT 2
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 4
67158: NEG
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 4
67169: NEG
67170: PUSH
67171: LD_INT 1
67173: NEG
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 3
67181: NEG
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 3
67192: NEG
67193: PUSH
67194: LD_INT 1
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 4
67203: NEG
67204: PUSH
67205: LD_INT 1
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 5
67214: NEG
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 5
67225: NEG
67226: PUSH
67227: LD_INT 1
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 5
67237: NEG
67238: PUSH
67239: LD_INT 2
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 3
67249: NEG
67250: PUSH
67251: LD_INT 2
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 3
67260: NEG
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 3
67272: NEG
67273: PUSH
67274: LD_INT 4
67276: NEG
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 2
67284: NEG
67285: PUSH
67286: LD_INT 3
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 2
67296: NEG
67297: PUSH
67298: LD_INT 2
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 3
67308: NEG
67309: PUSH
67310: LD_INT 2
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 4
67320: NEG
67321: PUSH
67322: LD_INT 3
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 4
67332: NEG
67333: PUSH
67334: LD_INT 4
67336: NEG
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 2
67344: NEG
67345: PUSH
67346: LD_INT 4
67348: NEG
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 4
67356: NEG
67357: PUSH
67358: LD_INT 2
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: LD_INT 4
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: LD_INT 5
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 1
67390: PUSH
67391: LD_INT 4
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 1
67401: PUSH
67402: LD_INT 3
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: LD_INT 3
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: NEG
67424: PUSH
67425: LD_INT 4
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: LD_INT 5
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 2
67447: PUSH
67448: LD_INT 3
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 2
67458: NEG
67459: PUSH
67460: LD_INT 5
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67515: LD_ADDR_VAR 0 31
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: LD_INT 4
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 0
67532: PUSH
67533: LD_INT 3
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: LD_INT 4
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 1
67552: PUSH
67553: LD_INT 5
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: LD_INT 5
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 1
67572: NEG
67573: PUSH
67574: LD_INT 4
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 1
67583: NEG
67584: PUSH
67585: LD_INT 3
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 2
67594: PUSH
67595: LD_INT 5
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: LD_INT 3
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 3
67615: NEG
67616: PUSH
67617: LD_INT 0
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 3
67626: NEG
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 2
67638: NEG
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: LD_INT 1
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 3
67660: NEG
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 4
67671: NEG
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 4
67682: NEG
67683: PUSH
67684: LD_INT 1
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 4
67694: NEG
67695: PUSH
67696: LD_INT 2
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 2
67706: NEG
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 4
67717: NEG
67718: PUSH
67719: LD_INT 4
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 4
67729: NEG
67730: PUSH
67731: LD_INT 5
67733: NEG
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 3
67741: NEG
67742: PUSH
67743: LD_INT 4
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 3
67753: NEG
67754: PUSH
67755: LD_INT 3
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 4
67765: NEG
67766: PUSH
67767: LD_INT 3
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 5
67777: NEG
67778: PUSH
67779: LD_INT 4
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 5
67789: NEG
67790: PUSH
67791: LD_INT 5
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 3
67801: NEG
67802: PUSH
67803: LD_INT 5
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 5
67813: NEG
67814: PUSH
67815: LD_INT 3
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: LD_INT 3
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 0
67836: PUSH
67837: LD_INT 4
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 1
67847: PUSH
67848: LD_INT 3
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: PUSH
67859: LD_INT 2
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 0
67869: PUSH
67870: LD_INT 2
67872: NEG
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: LD_INT 3
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 1
67892: NEG
67893: PUSH
67894: LD_INT 4
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: PUSH
67905: LD_INT 2
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 2
67915: NEG
67916: PUSH
67917: LD_INT 4
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 4
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 4
67937: PUSH
67938: LD_INT 1
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 5
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 5
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 4
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 3
67988: PUSH
67989: LD_INT 1
67991: NEG
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 3
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 5
68010: PUSH
68011: LD_INT 2
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68065: LD_ADDR_VAR 0 32
68069: PUSH
68070: LD_INT 4
68072: NEG
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 4
68083: NEG
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: LD_INT 0
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 3
68106: NEG
68107: PUSH
68108: LD_INT 1
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 4
68117: NEG
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 5
68128: NEG
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 5
68139: NEG
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 5
68151: NEG
68152: PUSH
68153: LD_INT 2
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 3
68163: NEG
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 3
68174: NEG
68175: PUSH
68176: LD_INT 3
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 3
68186: NEG
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 2
68198: NEG
68199: PUSH
68200: LD_INT 3
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 2
68210: NEG
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 3
68222: NEG
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 4
68234: NEG
68235: PUSH
68236: LD_INT 3
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 4
68246: NEG
68247: PUSH
68248: LD_INT 4
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 2
68258: NEG
68259: PUSH
68260: LD_INT 4
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 4
68270: NEG
68271: PUSH
68272: LD_INT 2
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: LD_INT 4
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: LD_INT 5
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: PUSH
68305: LD_INT 4
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: PUSH
68316: LD_INT 3
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: LD_INT 3
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 1
68337: NEG
68338: PUSH
68339: LD_INT 4
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: LD_INT 5
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 2
68361: PUSH
68362: LD_INT 3
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 2
68372: NEG
68373: PUSH
68374: LD_INT 5
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 3
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 3
68394: PUSH
68395: LD_INT 1
68397: NEG
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 4
68405: PUSH
68406: LD_INT 0
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 4
68415: PUSH
68416: LD_INT 1
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 3
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 2
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 2
68445: PUSH
68446: LD_INT 1
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: LD_INT 2
68459: NEG
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 4
68467: PUSH
68468: LD_INT 2
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 4
68477: PUSH
68478: LD_INT 4
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 4
68487: PUSH
68488: LD_INT 3
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 5
68497: PUSH
68498: LD_INT 4
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 5
68507: PUSH
68508: LD_INT 5
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 4
68517: PUSH
68518: LD_INT 5
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 3
68527: PUSH
68528: LD_INT 4
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 3
68537: PUSH
68538: LD_INT 3
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 5
68547: PUSH
68548: LD_INT 3
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 3
68557: PUSH
68558: LD_INT 5
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68612: LD_ADDR_VAR 0 33
68616: PUSH
68617: LD_INT 4
68619: NEG
68620: PUSH
68621: LD_INT 4
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 4
68631: NEG
68632: PUSH
68633: LD_INT 5
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 3
68643: NEG
68644: PUSH
68645: LD_INT 4
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 3
68655: NEG
68656: PUSH
68657: LD_INT 3
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 4
68667: NEG
68668: PUSH
68669: LD_INT 3
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 5
68679: NEG
68680: PUSH
68681: LD_INT 4
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 5
68691: NEG
68692: PUSH
68693: LD_INT 5
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 3
68703: NEG
68704: PUSH
68705: LD_INT 5
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 5
68715: NEG
68716: PUSH
68717: LD_INT 3
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 0
68727: PUSH
68728: LD_INT 3
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: LD_INT 4
68741: NEG
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 1
68749: PUSH
68750: LD_INT 3
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: LD_INT 2
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: LD_INT 2
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 1
68782: NEG
68783: PUSH
68784: LD_INT 3
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 1
68794: NEG
68795: PUSH
68796: LD_INT 4
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: LD_INT 2
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 2
68817: NEG
68818: PUSH
68819: LD_INT 4
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 4
68829: PUSH
68830: LD_INT 0
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 4
68839: PUSH
68840: LD_INT 1
68842: NEG
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 5
68850: PUSH
68851: LD_INT 0
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 5
68860: PUSH
68861: LD_INT 1
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 4
68870: PUSH
68871: LD_INT 1
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 3
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 3
68890: PUSH
68891: LD_INT 1
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 3
68901: PUSH
68902: LD_INT 2
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 5
68912: PUSH
68913: LD_INT 2
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 3
68922: PUSH
68923: LD_INT 3
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 3
68932: PUSH
68933: LD_INT 2
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 4
68942: PUSH
68943: LD_INT 3
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 4
68952: PUSH
68953: LD_INT 4
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 3
68962: PUSH
68963: LD_INT 4
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 2
68972: PUSH
68973: LD_INT 3
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 2
68982: PUSH
68983: LD_INT 2
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 4
68992: PUSH
68993: LD_INT 2
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 2
69002: PUSH
69003: LD_INT 4
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: LD_INT 4
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: LD_INT 3
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: LD_INT 4
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: PUSH
69043: LD_INT 5
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: LD_INT 5
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 1
69062: NEG
69063: PUSH
69064: LD_INT 4
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: NEG
69074: PUSH
69075: LD_INT 3
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 2
69084: PUSH
69085: LD_INT 5
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 2
69094: NEG
69095: PUSH
69096: LD_INT 3
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69150: LD_ADDR_VAR 0 34
69154: PUSH
69155: LD_INT 0
69157: PUSH
69158: LD_INT 4
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: LD_INT 5
69171: NEG
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 1
69179: PUSH
69180: LD_INT 4
69182: NEG
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 1
69190: PUSH
69191: LD_INT 3
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: LD_INT 3
69204: NEG
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 1
69212: NEG
69213: PUSH
69214: LD_INT 4
69216: NEG
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: PUSH
69226: LD_INT 5
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 2
69236: PUSH
69237: LD_INT 3
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 2
69247: NEG
69248: PUSH
69249: LD_INT 5
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 3
69259: PUSH
69260: LD_INT 0
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 3
69269: PUSH
69270: LD_INT 1
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 4
69280: PUSH
69281: LD_INT 0
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 4
69290: PUSH
69291: LD_INT 1
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 3
69300: PUSH
69301: LD_INT 1
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 2
69310: PUSH
69311: LD_INT 0
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 2
69320: PUSH
69321: LD_INT 1
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 2
69331: PUSH
69332: LD_INT 2
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 4
69342: PUSH
69343: LD_INT 2
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 4
69352: PUSH
69353: LD_INT 4
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 4
69362: PUSH
69363: LD_INT 3
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 5
69372: PUSH
69373: LD_INT 4
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 5
69382: PUSH
69383: LD_INT 5
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 4
69392: PUSH
69393: LD_INT 5
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 3
69402: PUSH
69403: LD_INT 4
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 3
69412: PUSH
69413: LD_INT 3
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 5
69422: PUSH
69423: LD_INT 3
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 3
69432: PUSH
69433: LD_INT 5
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 0
69442: PUSH
69443: LD_INT 3
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 0
69452: PUSH
69453: LD_INT 2
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 1
69462: PUSH
69463: LD_INT 3
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 1
69472: PUSH
69473: LD_INT 4
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 0
69482: PUSH
69483: LD_INT 4
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 1
69492: NEG
69493: PUSH
69494: LD_INT 3
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 1
69503: NEG
69504: PUSH
69505: LD_INT 2
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 2
69514: PUSH
69515: LD_INT 4
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 2
69524: NEG
69525: PUSH
69526: LD_INT 2
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 4
69535: NEG
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 4
69546: NEG
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 3
69558: NEG
69559: PUSH
69560: LD_INT 0
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 3
69569: NEG
69570: PUSH
69571: LD_INT 1
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 4
69580: NEG
69581: PUSH
69582: LD_INT 1
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 5
69591: NEG
69592: PUSH
69593: LD_INT 0
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 5
69602: NEG
69603: PUSH
69604: LD_INT 1
69606: NEG
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 5
69614: NEG
69615: PUSH
69616: LD_INT 2
69618: NEG
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 3
69626: NEG
69627: PUSH
69628: LD_INT 2
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: ST_TO_ADDR
// end ; end ;
69682: GO 69685
69684: POP
// case btype of b_depot , b_warehouse :
69685: LD_VAR 0 1
69689: PUSH
69690: LD_INT 0
69692: DOUBLE
69693: EQUAL
69694: IFTRUE 69704
69696: LD_INT 1
69698: DOUBLE
69699: EQUAL
69700: IFTRUE 69704
69702: GO 69905
69704: POP
// case nation of nation_american :
69705: LD_VAR 0 5
69709: PUSH
69710: LD_INT 1
69712: DOUBLE
69713: EQUAL
69714: IFTRUE 69718
69716: GO 69774
69718: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69719: LD_ADDR_VAR 0 9
69723: PUSH
69724: LD_VAR 0 11
69728: PUSH
69729: LD_VAR 0 12
69733: PUSH
69734: LD_VAR 0 13
69738: PUSH
69739: LD_VAR 0 14
69743: PUSH
69744: LD_VAR 0 15
69748: PUSH
69749: LD_VAR 0 16
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: PUSH
69762: LD_VAR 0 4
69766: PUSH
69767: LD_INT 1
69769: PLUS
69770: ARRAY
69771: ST_TO_ADDR
69772: GO 69903
69774: LD_INT 2
69776: DOUBLE
69777: EQUAL
69778: IFTRUE 69782
69780: GO 69838
69782: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69783: LD_ADDR_VAR 0 9
69787: PUSH
69788: LD_VAR 0 17
69792: PUSH
69793: LD_VAR 0 18
69797: PUSH
69798: LD_VAR 0 19
69802: PUSH
69803: LD_VAR 0 20
69807: PUSH
69808: LD_VAR 0 21
69812: PUSH
69813: LD_VAR 0 22
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: PUSH
69826: LD_VAR 0 4
69830: PUSH
69831: LD_INT 1
69833: PLUS
69834: ARRAY
69835: ST_TO_ADDR
69836: GO 69903
69838: LD_INT 3
69840: DOUBLE
69841: EQUAL
69842: IFTRUE 69846
69844: GO 69902
69846: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69847: LD_ADDR_VAR 0 9
69851: PUSH
69852: LD_VAR 0 23
69856: PUSH
69857: LD_VAR 0 24
69861: PUSH
69862: LD_VAR 0 25
69866: PUSH
69867: LD_VAR 0 26
69871: PUSH
69872: LD_VAR 0 27
69876: PUSH
69877: LD_VAR 0 28
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: PUSH
69890: LD_VAR 0 4
69894: PUSH
69895: LD_INT 1
69897: PLUS
69898: ARRAY
69899: ST_TO_ADDR
69900: GO 69903
69902: POP
69903: GO 70458
69905: LD_INT 2
69907: DOUBLE
69908: EQUAL
69909: IFTRUE 69919
69911: LD_INT 3
69913: DOUBLE
69914: EQUAL
69915: IFTRUE 69919
69917: GO 69975
69919: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69920: LD_ADDR_VAR 0 9
69924: PUSH
69925: LD_VAR 0 29
69929: PUSH
69930: LD_VAR 0 30
69934: PUSH
69935: LD_VAR 0 31
69939: PUSH
69940: LD_VAR 0 32
69944: PUSH
69945: LD_VAR 0 33
69949: PUSH
69950: LD_VAR 0 34
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: PUSH
69963: LD_VAR 0 4
69967: PUSH
69968: LD_INT 1
69970: PLUS
69971: ARRAY
69972: ST_TO_ADDR
69973: GO 70458
69975: LD_INT 16
69977: DOUBLE
69978: EQUAL
69979: IFTRUE 70037
69981: LD_INT 17
69983: DOUBLE
69984: EQUAL
69985: IFTRUE 70037
69987: LD_INT 18
69989: DOUBLE
69990: EQUAL
69991: IFTRUE 70037
69993: LD_INT 19
69995: DOUBLE
69996: EQUAL
69997: IFTRUE 70037
69999: LD_INT 22
70001: DOUBLE
70002: EQUAL
70003: IFTRUE 70037
70005: LD_INT 20
70007: DOUBLE
70008: EQUAL
70009: IFTRUE 70037
70011: LD_INT 21
70013: DOUBLE
70014: EQUAL
70015: IFTRUE 70037
70017: LD_INT 23
70019: DOUBLE
70020: EQUAL
70021: IFTRUE 70037
70023: LD_INT 24
70025: DOUBLE
70026: EQUAL
70027: IFTRUE 70037
70029: LD_INT 25
70031: DOUBLE
70032: EQUAL
70033: IFTRUE 70037
70035: GO 70093
70037: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70038: LD_ADDR_VAR 0 9
70042: PUSH
70043: LD_VAR 0 35
70047: PUSH
70048: LD_VAR 0 36
70052: PUSH
70053: LD_VAR 0 37
70057: PUSH
70058: LD_VAR 0 38
70062: PUSH
70063: LD_VAR 0 39
70067: PUSH
70068: LD_VAR 0 40
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: PUSH
70081: LD_VAR 0 4
70085: PUSH
70086: LD_INT 1
70088: PLUS
70089: ARRAY
70090: ST_TO_ADDR
70091: GO 70458
70093: LD_INT 6
70095: DOUBLE
70096: EQUAL
70097: IFTRUE 70149
70099: LD_INT 7
70101: DOUBLE
70102: EQUAL
70103: IFTRUE 70149
70105: LD_INT 8
70107: DOUBLE
70108: EQUAL
70109: IFTRUE 70149
70111: LD_INT 13
70113: DOUBLE
70114: EQUAL
70115: IFTRUE 70149
70117: LD_INT 12
70119: DOUBLE
70120: EQUAL
70121: IFTRUE 70149
70123: LD_INT 15
70125: DOUBLE
70126: EQUAL
70127: IFTRUE 70149
70129: LD_INT 11
70131: DOUBLE
70132: EQUAL
70133: IFTRUE 70149
70135: LD_INT 14
70137: DOUBLE
70138: EQUAL
70139: IFTRUE 70149
70141: LD_INT 10
70143: DOUBLE
70144: EQUAL
70145: IFTRUE 70149
70147: GO 70205
70149: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70150: LD_ADDR_VAR 0 9
70154: PUSH
70155: LD_VAR 0 41
70159: PUSH
70160: LD_VAR 0 42
70164: PUSH
70165: LD_VAR 0 43
70169: PUSH
70170: LD_VAR 0 44
70174: PUSH
70175: LD_VAR 0 45
70179: PUSH
70180: LD_VAR 0 46
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: PUSH
70193: LD_VAR 0 4
70197: PUSH
70198: LD_INT 1
70200: PLUS
70201: ARRAY
70202: ST_TO_ADDR
70203: GO 70458
70205: LD_INT 36
70207: DOUBLE
70208: EQUAL
70209: IFTRUE 70213
70211: GO 70269
70213: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70214: LD_ADDR_VAR 0 9
70218: PUSH
70219: LD_VAR 0 47
70223: PUSH
70224: LD_VAR 0 48
70228: PUSH
70229: LD_VAR 0 49
70233: PUSH
70234: LD_VAR 0 50
70238: PUSH
70239: LD_VAR 0 51
70243: PUSH
70244: LD_VAR 0 52
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: PUSH
70257: LD_VAR 0 4
70261: PUSH
70262: LD_INT 1
70264: PLUS
70265: ARRAY
70266: ST_TO_ADDR
70267: GO 70458
70269: LD_INT 4
70271: DOUBLE
70272: EQUAL
70273: IFTRUE 70295
70275: LD_INT 5
70277: DOUBLE
70278: EQUAL
70279: IFTRUE 70295
70281: LD_INT 34
70283: DOUBLE
70284: EQUAL
70285: IFTRUE 70295
70287: LD_INT 37
70289: DOUBLE
70290: EQUAL
70291: IFTRUE 70295
70293: GO 70351
70295: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70296: LD_ADDR_VAR 0 9
70300: PUSH
70301: LD_VAR 0 53
70305: PUSH
70306: LD_VAR 0 54
70310: PUSH
70311: LD_VAR 0 55
70315: PUSH
70316: LD_VAR 0 56
70320: PUSH
70321: LD_VAR 0 57
70325: PUSH
70326: LD_VAR 0 58
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: PUSH
70339: LD_VAR 0 4
70343: PUSH
70344: LD_INT 1
70346: PLUS
70347: ARRAY
70348: ST_TO_ADDR
70349: GO 70458
70351: LD_INT 31
70353: DOUBLE
70354: EQUAL
70355: IFTRUE 70401
70357: LD_INT 32
70359: DOUBLE
70360: EQUAL
70361: IFTRUE 70401
70363: LD_INT 33
70365: DOUBLE
70366: EQUAL
70367: IFTRUE 70401
70369: LD_INT 27
70371: DOUBLE
70372: EQUAL
70373: IFTRUE 70401
70375: LD_INT 26
70377: DOUBLE
70378: EQUAL
70379: IFTRUE 70401
70381: LD_INT 28
70383: DOUBLE
70384: EQUAL
70385: IFTRUE 70401
70387: LD_INT 29
70389: DOUBLE
70390: EQUAL
70391: IFTRUE 70401
70393: LD_INT 30
70395: DOUBLE
70396: EQUAL
70397: IFTRUE 70401
70399: GO 70457
70401: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70402: LD_ADDR_VAR 0 9
70406: PUSH
70407: LD_VAR 0 59
70411: PUSH
70412: LD_VAR 0 60
70416: PUSH
70417: LD_VAR 0 61
70421: PUSH
70422: LD_VAR 0 62
70426: PUSH
70427: LD_VAR 0 63
70431: PUSH
70432: LD_VAR 0 64
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: PUSH
70445: LD_VAR 0 4
70449: PUSH
70450: LD_INT 1
70452: PLUS
70453: ARRAY
70454: ST_TO_ADDR
70455: GO 70458
70457: POP
// temp_list2 = [ ] ;
70458: LD_ADDR_VAR 0 10
70462: PUSH
70463: EMPTY
70464: ST_TO_ADDR
// for i in temp_list do
70465: LD_ADDR_VAR 0 8
70469: PUSH
70470: LD_VAR 0 9
70474: PUSH
70475: FOR_IN
70476: IFFALSE 70528
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70478: LD_ADDR_VAR 0 10
70482: PUSH
70483: LD_VAR 0 10
70487: PUSH
70488: LD_VAR 0 8
70492: PUSH
70493: LD_INT 1
70495: ARRAY
70496: PUSH
70497: LD_VAR 0 2
70501: PLUS
70502: PUSH
70503: LD_VAR 0 8
70507: PUSH
70508: LD_INT 2
70510: ARRAY
70511: PUSH
70512: LD_VAR 0 3
70516: PLUS
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: EMPTY
70523: LIST
70524: ADD
70525: ST_TO_ADDR
70526: GO 70475
70528: POP
70529: POP
// result = temp_list2 ;
70530: LD_ADDR_VAR 0 7
70534: PUSH
70535: LD_VAR 0 10
70539: ST_TO_ADDR
// end ;
70540: LD_VAR 0 7
70544: RET
// export function EnemyInRange ( unit , dist ) ; begin
70545: LD_INT 0
70547: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70548: LD_ADDR_VAR 0 3
70552: PUSH
70553: LD_VAR 0 1
70557: PPUSH
70558: CALL_OW 255
70562: PPUSH
70563: LD_VAR 0 1
70567: PPUSH
70568: CALL_OW 250
70572: PPUSH
70573: LD_VAR 0 1
70577: PPUSH
70578: CALL_OW 251
70582: PPUSH
70583: LD_VAR 0 2
70587: PPUSH
70588: CALL 43947 0 4
70592: PUSH
70593: LD_INT 4
70595: ARRAY
70596: ST_TO_ADDR
// end ;
70597: LD_VAR 0 3
70601: RET
// export function PlayerSeeMe ( unit ) ; begin
70602: LD_INT 0
70604: PPUSH
// result := See ( your_side , unit ) ;
70605: LD_ADDR_VAR 0 2
70609: PUSH
70610: LD_OWVAR 2
70614: PPUSH
70615: LD_VAR 0 1
70619: PPUSH
70620: CALL_OW 292
70624: ST_TO_ADDR
// end ;
70625: LD_VAR 0 2
70629: RET
// export function ReverseDir ( unit ) ; begin
70630: LD_INT 0
70632: PPUSH
// if not unit then
70633: LD_VAR 0 1
70637: NOT
70638: IFFALSE 70642
// exit ;
70640: GO 70665
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70642: LD_ADDR_VAR 0 2
70646: PUSH
70647: LD_VAR 0 1
70651: PPUSH
70652: CALL_OW 254
70656: PUSH
70657: LD_INT 3
70659: PLUS
70660: PUSH
70661: LD_INT 6
70663: MOD
70664: ST_TO_ADDR
// end ;
70665: LD_VAR 0 2
70669: RET
// export function ReverseArray ( array ) ; var i ; begin
70670: LD_INT 0
70672: PPUSH
70673: PPUSH
// if not array then
70674: LD_VAR 0 1
70678: NOT
70679: IFFALSE 70683
// exit ;
70681: GO 70738
// result := [ ] ;
70683: LD_ADDR_VAR 0 2
70687: PUSH
70688: EMPTY
70689: ST_TO_ADDR
// for i := array downto 1 do
70690: LD_ADDR_VAR 0 3
70694: PUSH
70695: DOUBLE
70696: LD_VAR 0 1
70700: INC
70701: ST_TO_ADDR
70702: LD_INT 1
70704: PUSH
70705: FOR_DOWNTO
70706: IFFALSE 70736
// result := Join ( result , array [ i ] ) ;
70708: LD_ADDR_VAR 0 2
70712: PUSH
70713: LD_VAR 0 2
70717: PPUSH
70718: LD_VAR 0 1
70722: PUSH
70723: LD_VAR 0 3
70727: ARRAY
70728: PPUSH
70729: CALL 75382 0 2
70733: ST_TO_ADDR
70734: GO 70705
70736: POP
70737: POP
// end ;
70738: LD_VAR 0 2
70742: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70743: LD_INT 0
70745: PPUSH
70746: PPUSH
70747: PPUSH
70748: PPUSH
70749: PPUSH
70750: PPUSH
// if not unit or not hexes then
70751: LD_VAR 0 1
70755: NOT
70756: PUSH
70757: LD_VAR 0 2
70761: NOT
70762: OR
70763: IFFALSE 70767
// exit ;
70765: GO 70890
// dist := 9999 ;
70767: LD_ADDR_VAR 0 5
70771: PUSH
70772: LD_INT 9999
70774: ST_TO_ADDR
// for i = 1 to hexes do
70775: LD_ADDR_VAR 0 4
70779: PUSH
70780: DOUBLE
70781: LD_INT 1
70783: DEC
70784: ST_TO_ADDR
70785: LD_VAR 0 2
70789: PUSH
70790: FOR_TO
70791: IFFALSE 70878
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70793: LD_ADDR_VAR 0 6
70797: PUSH
70798: LD_VAR 0 1
70802: PPUSH
70803: LD_VAR 0 2
70807: PUSH
70808: LD_VAR 0 4
70812: ARRAY
70813: PUSH
70814: LD_INT 1
70816: ARRAY
70817: PPUSH
70818: LD_VAR 0 2
70822: PUSH
70823: LD_VAR 0 4
70827: ARRAY
70828: PUSH
70829: LD_INT 2
70831: ARRAY
70832: PPUSH
70833: CALL_OW 297
70837: ST_TO_ADDR
// if tdist < dist then
70838: LD_VAR 0 6
70842: PUSH
70843: LD_VAR 0 5
70847: LESS
70848: IFFALSE 70876
// begin hex := hexes [ i ] ;
70850: LD_ADDR_VAR 0 8
70854: PUSH
70855: LD_VAR 0 2
70859: PUSH
70860: LD_VAR 0 4
70864: ARRAY
70865: ST_TO_ADDR
// dist := tdist ;
70866: LD_ADDR_VAR 0 5
70870: PUSH
70871: LD_VAR 0 6
70875: ST_TO_ADDR
// end ; end ;
70876: GO 70790
70878: POP
70879: POP
// result := hex ;
70880: LD_ADDR_VAR 0 3
70884: PUSH
70885: LD_VAR 0 8
70889: ST_TO_ADDR
// end ;
70890: LD_VAR 0 3
70894: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70895: LD_INT 0
70897: PPUSH
70898: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70899: LD_VAR 0 1
70903: NOT
70904: PUSH
70905: LD_VAR 0 1
70909: PUSH
70910: LD_INT 21
70912: PUSH
70913: LD_INT 2
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 23
70922: PUSH
70923: LD_INT 2
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PPUSH
70934: CALL_OW 69
70938: IN
70939: NOT
70940: OR
70941: IFFALSE 70945
// exit ;
70943: GO 70992
// for i = 1 to 3 do
70945: LD_ADDR_VAR 0 3
70949: PUSH
70950: DOUBLE
70951: LD_INT 1
70953: DEC
70954: ST_TO_ADDR
70955: LD_INT 3
70957: PUSH
70958: FOR_TO
70959: IFFALSE 70990
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70961: LD_VAR 0 1
70965: PPUSH
70966: CALL_OW 250
70970: PPUSH
70971: LD_VAR 0 1
70975: PPUSH
70976: CALL_OW 251
70980: PPUSH
70981: LD_INT 1
70983: PPUSH
70984: CALL_OW 453
70988: GO 70958
70990: POP
70991: POP
// end ;
70992: LD_VAR 0 2
70996: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70997: LD_INT 0
70999: PPUSH
71000: PPUSH
71001: PPUSH
71002: PPUSH
71003: PPUSH
71004: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71005: LD_VAR 0 1
71009: NOT
71010: PUSH
71011: LD_VAR 0 2
71015: NOT
71016: OR
71017: PUSH
71018: LD_VAR 0 1
71022: PPUSH
71023: CALL_OW 314
71027: OR
71028: IFFALSE 71032
// exit ;
71030: GO 71499
// if GetLives ( i ) < 250 then
71032: LD_VAR 0 4
71036: PPUSH
71037: CALL_OW 256
71041: PUSH
71042: LD_INT 250
71044: LESS
71045: IFFALSE 71058
// begin ComAutodestruct ( i ) ;
71047: LD_VAR 0 4
71051: PPUSH
71052: CALL 70895 0 1
// exit ;
71056: GO 71499
// end ; x := GetX ( enemy_unit ) ;
71058: LD_ADDR_VAR 0 7
71062: PUSH
71063: LD_VAR 0 2
71067: PPUSH
71068: CALL_OW 250
71072: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71073: LD_ADDR_VAR 0 8
71077: PUSH
71078: LD_VAR 0 2
71082: PPUSH
71083: CALL_OW 251
71087: ST_TO_ADDR
// if not x or not y then
71088: LD_VAR 0 7
71092: NOT
71093: PUSH
71094: LD_VAR 0 8
71098: NOT
71099: OR
71100: IFFALSE 71104
// exit ;
71102: GO 71499
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71104: LD_ADDR_VAR 0 6
71108: PUSH
71109: LD_VAR 0 7
71113: PPUSH
71114: LD_INT 0
71116: PPUSH
71117: LD_INT 4
71119: PPUSH
71120: CALL_OW 272
71124: PUSH
71125: LD_VAR 0 8
71129: PPUSH
71130: LD_INT 0
71132: PPUSH
71133: LD_INT 4
71135: PPUSH
71136: CALL_OW 273
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_VAR 0 7
71149: PPUSH
71150: LD_INT 1
71152: PPUSH
71153: LD_INT 4
71155: PPUSH
71156: CALL_OW 272
71160: PUSH
71161: LD_VAR 0 8
71165: PPUSH
71166: LD_INT 1
71168: PPUSH
71169: LD_INT 4
71171: PPUSH
71172: CALL_OW 273
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_VAR 0 7
71185: PPUSH
71186: LD_INT 2
71188: PPUSH
71189: LD_INT 4
71191: PPUSH
71192: CALL_OW 272
71196: PUSH
71197: LD_VAR 0 8
71201: PPUSH
71202: LD_INT 2
71204: PPUSH
71205: LD_INT 4
71207: PPUSH
71208: CALL_OW 273
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_VAR 0 7
71221: PPUSH
71222: LD_INT 3
71224: PPUSH
71225: LD_INT 4
71227: PPUSH
71228: CALL_OW 272
71232: PUSH
71233: LD_VAR 0 8
71237: PPUSH
71238: LD_INT 3
71240: PPUSH
71241: LD_INT 4
71243: PPUSH
71244: CALL_OW 273
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_VAR 0 7
71257: PPUSH
71258: LD_INT 4
71260: PPUSH
71261: LD_INT 4
71263: PPUSH
71264: CALL_OW 272
71268: PUSH
71269: LD_VAR 0 8
71273: PPUSH
71274: LD_INT 4
71276: PPUSH
71277: LD_INT 4
71279: PPUSH
71280: CALL_OW 273
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_VAR 0 7
71293: PPUSH
71294: LD_INT 5
71296: PPUSH
71297: LD_INT 4
71299: PPUSH
71300: CALL_OW 272
71304: PUSH
71305: LD_VAR 0 8
71309: PPUSH
71310: LD_INT 5
71312: PPUSH
71313: LD_INT 4
71315: PPUSH
71316: CALL_OW 273
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: ST_TO_ADDR
// for i = tmp downto 1 do
71333: LD_ADDR_VAR 0 4
71337: PUSH
71338: DOUBLE
71339: LD_VAR 0 6
71343: INC
71344: ST_TO_ADDR
71345: LD_INT 1
71347: PUSH
71348: FOR_DOWNTO
71349: IFFALSE 71450
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71351: LD_VAR 0 6
71355: PUSH
71356: LD_VAR 0 4
71360: ARRAY
71361: PUSH
71362: LD_INT 1
71364: ARRAY
71365: PPUSH
71366: LD_VAR 0 6
71370: PUSH
71371: LD_VAR 0 4
71375: ARRAY
71376: PUSH
71377: LD_INT 2
71379: ARRAY
71380: PPUSH
71381: CALL_OW 488
71385: NOT
71386: PUSH
71387: LD_VAR 0 6
71391: PUSH
71392: LD_VAR 0 4
71396: ARRAY
71397: PUSH
71398: LD_INT 1
71400: ARRAY
71401: PPUSH
71402: LD_VAR 0 6
71406: PUSH
71407: LD_VAR 0 4
71411: ARRAY
71412: PUSH
71413: LD_INT 2
71415: ARRAY
71416: PPUSH
71417: CALL_OW 428
71421: PUSH
71422: LD_INT 0
71424: NONEQUAL
71425: OR
71426: IFFALSE 71448
// tmp := Delete ( tmp , i ) ;
71428: LD_ADDR_VAR 0 6
71432: PUSH
71433: LD_VAR 0 6
71437: PPUSH
71438: LD_VAR 0 4
71442: PPUSH
71443: CALL_OW 3
71447: ST_TO_ADDR
71448: GO 71348
71450: POP
71451: POP
// j := GetClosestHex ( unit , tmp ) ;
71452: LD_ADDR_VAR 0 5
71456: PUSH
71457: LD_VAR 0 1
71461: PPUSH
71462: LD_VAR 0 6
71466: PPUSH
71467: CALL 70743 0 2
71471: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71472: LD_VAR 0 1
71476: PPUSH
71477: LD_VAR 0 5
71481: PUSH
71482: LD_INT 1
71484: ARRAY
71485: PPUSH
71486: LD_VAR 0 5
71490: PUSH
71491: LD_INT 2
71493: ARRAY
71494: PPUSH
71495: CALL_OW 111
// end ;
71499: LD_VAR 0 3
71503: RET
// export function PrepareApemanSoldier ( ) ; begin
71504: LD_INT 0
71506: PPUSH
// uc_nation := 0 ;
71507: LD_ADDR_OWVAR 21
71511: PUSH
71512: LD_INT 0
71514: ST_TO_ADDR
// hc_sex := sex_male ;
71515: LD_ADDR_OWVAR 27
71519: PUSH
71520: LD_INT 1
71522: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71523: LD_ADDR_OWVAR 28
71527: PUSH
71528: LD_INT 15
71530: ST_TO_ADDR
// hc_gallery :=  ;
71531: LD_ADDR_OWVAR 33
71535: PUSH
71536: LD_STRING 
71538: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71539: LD_ADDR_OWVAR 31
71543: PUSH
71544: LD_INT 0
71546: PPUSH
71547: LD_INT 3
71549: PPUSH
71550: CALL_OW 12
71554: PUSH
71555: LD_INT 0
71557: PPUSH
71558: LD_INT 3
71560: PPUSH
71561: CALL_OW 12
71565: PUSH
71566: LD_INT 0
71568: PUSH
71569: LD_INT 0
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: ST_TO_ADDR
// end ;
71578: LD_VAR 0 1
71582: RET
// export function PrepareApemanEngineer ( ) ; begin
71583: LD_INT 0
71585: PPUSH
// uc_nation := 0 ;
71586: LD_ADDR_OWVAR 21
71590: PUSH
71591: LD_INT 0
71593: ST_TO_ADDR
// hc_sex := sex_male ;
71594: LD_ADDR_OWVAR 27
71598: PUSH
71599: LD_INT 1
71601: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71602: LD_ADDR_OWVAR 28
71606: PUSH
71607: LD_INT 16
71609: ST_TO_ADDR
// hc_gallery :=  ;
71610: LD_ADDR_OWVAR 33
71614: PUSH
71615: LD_STRING 
71617: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71618: LD_ADDR_OWVAR 31
71622: PUSH
71623: LD_INT 0
71625: PPUSH
71626: LD_INT 3
71628: PPUSH
71629: CALL_OW 12
71633: PUSH
71634: LD_INT 0
71636: PPUSH
71637: LD_INT 3
71639: PPUSH
71640: CALL_OW 12
71644: PUSH
71645: LD_INT 0
71647: PUSH
71648: LD_INT 0
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: ST_TO_ADDR
// end ;
71657: LD_VAR 0 1
71661: RET
// export function PrepareApeman ( agressivity ) ; begin
71662: LD_INT 0
71664: PPUSH
// uc_side := 0 ;
71665: LD_ADDR_OWVAR 20
71669: PUSH
71670: LD_INT 0
71672: ST_TO_ADDR
// uc_nation := 0 ;
71673: LD_ADDR_OWVAR 21
71677: PUSH
71678: LD_INT 0
71680: ST_TO_ADDR
// hc_sex := sex_male ;
71681: LD_ADDR_OWVAR 27
71685: PUSH
71686: LD_INT 1
71688: ST_TO_ADDR
// hc_class := class_apeman ;
71689: LD_ADDR_OWVAR 28
71693: PUSH
71694: LD_INT 12
71696: ST_TO_ADDR
// hc_gallery :=  ;
71697: LD_ADDR_OWVAR 33
71701: PUSH
71702: LD_STRING 
71704: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71705: LD_ADDR_OWVAR 35
71709: PUSH
71710: LD_VAR 0 1
71714: NEG
71715: PPUSH
71716: LD_VAR 0 1
71720: PPUSH
71721: CALL_OW 12
71725: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71726: LD_ADDR_OWVAR 31
71730: PUSH
71731: LD_INT 0
71733: PPUSH
71734: LD_INT 3
71736: PPUSH
71737: CALL_OW 12
71741: PUSH
71742: LD_INT 0
71744: PPUSH
71745: LD_INT 3
71747: PPUSH
71748: CALL_OW 12
71752: PUSH
71753: LD_INT 0
71755: PUSH
71756: LD_INT 0
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: ST_TO_ADDR
// end ;
71765: LD_VAR 0 2
71769: RET
// export function PrepareTiger ( agressivity ) ; begin
71770: LD_INT 0
71772: PPUSH
// uc_side := 0 ;
71773: LD_ADDR_OWVAR 20
71777: PUSH
71778: LD_INT 0
71780: ST_TO_ADDR
// uc_nation := 0 ;
71781: LD_ADDR_OWVAR 21
71785: PUSH
71786: LD_INT 0
71788: ST_TO_ADDR
// hc_class := class_tiger ;
71789: LD_ADDR_OWVAR 28
71793: PUSH
71794: LD_INT 14
71796: ST_TO_ADDR
// hc_gallery :=  ;
71797: LD_ADDR_OWVAR 33
71801: PUSH
71802: LD_STRING 
71804: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71805: LD_ADDR_OWVAR 35
71809: PUSH
71810: LD_VAR 0 1
71814: NEG
71815: PPUSH
71816: LD_VAR 0 1
71820: PPUSH
71821: CALL_OW 12
71825: ST_TO_ADDR
// end ;
71826: LD_VAR 0 2
71830: RET
// export function PrepareEnchidna ( ) ; begin
71831: LD_INT 0
71833: PPUSH
// uc_side := 0 ;
71834: LD_ADDR_OWVAR 20
71838: PUSH
71839: LD_INT 0
71841: ST_TO_ADDR
// uc_nation := 0 ;
71842: LD_ADDR_OWVAR 21
71846: PUSH
71847: LD_INT 0
71849: ST_TO_ADDR
// hc_class := class_baggie ;
71850: LD_ADDR_OWVAR 28
71854: PUSH
71855: LD_INT 13
71857: ST_TO_ADDR
// hc_gallery :=  ;
71858: LD_ADDR_OWVAR 33
71862: PUSH
71863: LD_STRING 
71865: ST_TO_ADDR
// end ;
71866: LD_VAR 0 1
71870: RET
// export function PrepareFrog ( ) ; begin
71871: LD_INT 0
71873: PPUSH
// uc_side := 0 ;
71874: LD_ADDR_OWVAR 20
71878: PUSH
71879: LD_INT 0
71881: ST_TO_ADDR
// uc_nation := 0 ;
71882: LD_ADDR_OWVAR 21
71886: PUSH
71887: LD_INT 0
71889: ST_TO_ADDR
// hc_class := class_frog ;
71890: LD_ADDR_OWVAR 28
71894: PUSH
71895: LD_INT 19
71897: ST_TO_ADDR
// hc_gallery :=  ;
71898: LD_ADDR_OWVAR 33
71902: PUSH
71903: LD_STRING 
71905: ST_TO_ADDR
// end ;
71906: LD_VAR 0 1
71910: RET
// export function PrepareFish ( ) ; begin
71911: LD_INT 0
71913: PPUSH
// uc_side := 0 ;
71914: LD_ADDR_OWVAR 20
71918: PUSH
71919: LD_INT 0
71921: ST_TO_ADDR
// uc_nation := 0 ;
71922: LD_ADDR_OWVAR 21
71926: PUSH
71927: LD_INT 0
71929: ST_TO_ADDR
// hc_class := class_fish ;
71930: LD_ADDR_OWVAR 28
71934: PUSH
71935: LD_INT 20
71937: ST_TO_ADDR
// hc_gallery :=  ;
71938: LD_ADDR_OWVAR 33
71942: PUSH
71943: LD_STRING 
71945: ST_TO_ADDR
// end ;
71946: LD_VAR 0 1
71950: RET
// export function PrepareBird ( ) ; begin
71951: LD_INT 0
71953: PPUSH
// uc_side := 0 ;
71954: LD_ADDR_OWVAR 20
71958: PUSH
71959: LD_INT 0
71961: ST_TO_ADDR
// uc_nation := 0 ;
71962: LD_ADDR_OWVAR 21
71966: PUSH
71967: LD_INT 0
71969: ST_TO_ADDR
// hc_class := class_phororhacos ;
71970: LD_ADDR_OWVAR 28
71974: PUSH
71975: LD_INT 18
71977: ST_TO_ADDR
// hc_gallery :=  ;
71978: LD_ADDR_OWVAR 33
71982: PUSH
71983: LD_STRING 
71985: ST_TO_ADDR
// end ;
71986: LD_VAR 0 1
71990: RET
// export function PrepareHorse ( ) ; begin
71991: LD_INT 0
71993: PPUSH
// uc_side := 0 ;
71994: LD_ADDR_OWVAR 20
71998: PUSH
71999: LD_INT 0
72001: ST_TO_ADDR
// uc_nation := 0 ;
72002: LD_ADDR_OWVAR 21
72006: PUSH
72007: LD_INT 0
72009: ST_TO_ADDR
// hc_class := class_horse ;
72010: LD_ADDR_OWVAR 28
72014: PUSH
72015: LD_INT 21
72017: ST_TO_ADDR
// hc_gallery :=  ;
72018: LD_ADDR_OWVAR 33
72022: PUSH
72023: LD_STRING 
72025: ST_TO_ADDR
// end ;
72026: LD_VAR 0 1
72030: RET
// export function PrepareMastodont ( ) ; begin
72031: LD_INT 0
72033: PPUSH
// uc_side := 0 ;
72034: LD_ADDR_OWVAR 20
72038: PUSH
72039: LD_INT 0
72041: ST_TO_ADDR
// uc_nation := 0 ;
72042: LD_ADDR_OWVAR 21
72046: PUSH
72047: LD_INT 0
72049: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72050: LD_ADDR_OWVAR 37
72054: PUSH
72055: LD_INT 31
72057: ST_TO_ADDR
// vc_control := control_rider ;
72058: LD_ADDR_OWVAR 38
72062: PUSH
72063: LD_INT 4
72065: ST_TO_ADDR
// end ;
72066: LD_VAR 0 1
72070: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72071: LD_INT 0
72073: PPUSH
72074: PPUSH
72075: PPUSH
// uc_side = 0 ;
72076: LD_ADDR_OWVAR 20
72080: PUSH
72081: LD_INT 0
72083: ST_TO_ADDR
// uc_nation = 0 ;
72084: LD_ADDR_OWVAR 21
72088: PUSH
72089: LD_INT 0
72091: ST_TO_ADDR
// InitHc_All ( ) ;
72092: CALL_OW 584
// InitVc ;
72096: CALL_OW 20
// if mastodonts then
72100: LD_VAR 0 6
72104: IFFALSE 72171
// for i = 1 to mastodonts do
72106: LD_ADDR_VAR 0 11
72110: PUSH
72111: DOUBLE
72112: LD_INT 1
72114: DEC
72115: ST_TO_ADDR
72116: LD_VAR 0 6
72120: PUSH
72121: FOR_TO
72122: IFFALSE 72169
// begin vc_chassis := 31 ;
72124: LD_ADDR_OWVAR 37
72128: PUSH
72129: LD_INT 31
72131: ST_TO_ADDR
// vc_control := control_rider ;
72132: LD_ADDR_OWVAR 38
72136: PUSH
72137: LD_INT 4
72139: ST_TO_ADDR
// animal := CreateVehicle ;
72140: LD_ADDR_VAR 0 12
72144: PUSH
72145: CALL_OW 45
72149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72150: LD_VAR 0 12
72154: PPUSH
72155: LD_VAR 0 8
72159: PPUSH
72160: LD_INT 0
72162: PPUSH
72163: CALL 74299 0 3
// end ;
72167: GO 72121
72169: POP
72170: POP
// if horses then
72171: LD_VAR 0 5
72175: IFFALSE 72242
// for i = 1 to horses do
72177: LD_ADDR_VAR 0 11
72181: PUSH
72182: DOUBLE
72183: LD_INT 1
72185: DEC
72186: ST_TO_ADDR
72187: LD_VAR 0 5
72191: PUSH
72192: FOR_TO
72193: IFFALSE 72240
// begin hc_class := 21 ;
72195: LD_ADDR_OWVAR 28
72199: PUSH
72200: LD_INT 21
72202: ST_TO_ADDR
// hc_gallery :=  ;
72203: LD_ADDR_OWVAR 33
72207: PUSH
72208: LD_STRING 
72210: ST_TO_ADDR
// animal := CreateHuman ;
72211: LD_ADDR_VAR 0 12
72215: PUSH
72216: CALL_OW 44
72220: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72221: LD_VAR 0 12
72225: PPUSH
72226: LD_VAR 0 8
72230: PPUSH
72231: LD_INT 0
72233: PPUSH
72234: CALL 74299 0 3
// end ;
72238: GO 72192
72240: POP
72241: POP
// if birds then
72242: LD_VAR 0 1
72246: IFFALSE 72313
// for i = 1 to birds do
72248: LD_ADDR_VAR 0 11
72252: PUSH
72253: DOUBLE
72254: LD_INT 1
72256: DEC
72257: ST_TO_ADDR
72258: LD_VAR 0 1
72262: PUSH
72263: FOR_TO
72264: IFFALSE 72311
// begin hc_class = 18 ;
72266: LD_ADDR_OWVAR 28
72270: PUSH
72271: LD_INT 18
72273: ST_TO_ADDR
// hc_gallery =  ;
72274: LD_ADDR_OWVAR 33
72278: PUSH
72279: LD_STRING 
72281: ST_TO_ADDR
// animal := CreateHuman ;
72282: LD_ADDR_VAR 0 12
72286: PUSH
72287: CALL_OW 44
72291: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72292: LD_VAR 0 12
72296: PPUSH
72297: LD_VAR 0 8
72301: PPUSH
72302: LD_INT 0
72304: PPUSH
72305: CALL 74299 0 3
// end ;
72309: GO 72263
72311: POP
72312: POP
// if tigers then
72313: LD_VAR 0 2
72317: IFFALSE 72401
// for i = 1 to tigers do
72319: LD_ADDR_VAR 0 11
72323: PUSH
72324: DOUBLE
72325: LD_INT 1
72327: DEC
72328: ST_TO_ADDR
72329: LD_VAR 0 2
72333: PUSH
72334: FOR_TO
72335: IFFALSE 72399
// begin hc_class = class_tiger ;
72337: LD_ADDR_OWVAR 28
72341: PUSH
72342: LD_INT 14
72344: ST_TO_ADDR
// hc_gallery =  ;
72345: LD_ADDR_OWVAR 33
72349: PUSH
72350: LD_STRING 
72352: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72353: LD_ADDR_OWVAR 35
72357: PUSH
72358: LD_INT 7
72360: NEG
72361: PPUSH
72362: LD_INT 7
72364: PPUSH
72365: CALL_OW 12
72369: ST_TO_ADDR
// animal := CreateHuman ;
72370: LD_ADDR_VAR 0 12
72374: PUSH
72375: CALL_OW 44
72379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72380: LD_VAR 0 12
72384: PPUSH
72385: LD_VAR 0 8
72389: PPUSH
72390: LD_INT 0
72392: PPUSH
72393: CALL 74299 0 3
// end ;
72397: GO 72334
72399: POP
72400: POP
// if apemans then
72401: LD_VAR 0 3
72405: IFFALSE 72528
// for i = 1 to apemans do
72407: LD_ADDR_VAR 0 11
72411: PUSH
72412: DOUBLE
72413: LD_INT 1
72415: DEC
72416: ST_TO_ADDR
72417: LD_VAR 0 3
72421: PUSH
72422: FOR_TO
72423: IFFALSE 72526
// begin hc_class = class_apeman ;
72425: LD_ADDR_OWVAR 28
72429: PUSH
72430: LD_INT 12
72432: ST_TO_ADDR
// hc_gallery =  ;
72433: LD_ADDR_OWVAR 33
72437: PUSH
72438: LD_STRING 
72440: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72441: LD_ADDR_OWVAR 35
72445: PUSH
72446: LD_INT 2
72448: NEG
72449: PPUSH
72450: LD_INT 2
72452: PPUSH
72453: CALL_OW 12
72457: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72458: LD_ADDR_OWVAR 31
72462: PUSH
72463: LD_INT 1
72465: PPUSH
72466: LD_INT 3
72468: PPUSH
72469: CALL_OW 12
72473: PUSH
72474: LD_INT 1
72476: PPUSH
72477: LD_INT 3
72479: PPUSH
72480: CALL_OW 12
72484: PUSH
72485: LD_INT 0
72487: PUSH
72488: LD_INT 0
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: ST_TO_ADDR
// animal := CreateHuman ;
72497: LD_ADDR_VAR 0 12
72501: PUSH
72502: CALL_OW 44
72506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72507: LD_VAR 0 12
72511: PPUSH
72512: LD_VAR 0 8
72516: PPUSH
72517: LD_INT 0
72519: PPUSH
72520: CALL 74299 0 3
// end ;
72524: GO 72422
72526: POP
72527: POP
// if enchidnas then
72528: LD_VAR 0 4
72532: IFFALSE 72599
// for i = 1 to enchidnas do
72534: LD_ADDR_VAR 0 11
72538: PUSH
72539: DOUBLE
72540: LD_INT 1
72542: DEC
72543: ST_TO_ADDR
72544: LD_VAR 0 4
72548: PUSH
72549: FOR_TO
72550: IFFALSE 72597
// begin hc_class = 13 ;
72552: LD_ADDR_OWVAR 28
72556: PUSH
72557: LD_INT 13
72559: ST_TO_ADDR
// hc_gallery =  ;
72560: LD_ADDR_OWVAR 33
72564: PUSH
72565: LD_STRING 
72567: ST_TO_ADDR
// animal := CreateHuman ;
72568: LD_ADDR_VAR 0 12
72572: PUSH
72573: CALL_OW 44
72577: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72578: LD_VAR 0 12
72582: PPUSH
72583: LD_VAR 0 8
72587: PPUSH
72588: LD_INT 0
72590: PPUSH
72591: CALL 74299 0 3
// end ;
72595: GO 72549
72597: POP
72598: POP
// if fishes then
72599: LD_VAR 0 7
72603: IFFALSE 72670
// for i = 1 to fishes do
72605: LD_ADDR_VAR 0 11
72609: PUSH
72610: DOUBLE
72611: LD_INT 1
72613: DEC
72614: ST_TO_ADDR
72615: LD_VAR 0 7
72619: PUSH
72620: FOR_TO
72621: IFFALSE 72668
// begin hc_class = 20 ;
72623: LD_ADDR_OWVAR 28
72627: PUSH
72628: LD_INT 20
72630: ST_TO_ADDR
// hc_gallery =  ;
72631: LD_ADDR_OWVAR 33
72635: PUSH
72636: LD_STRING 
72638: ST_TO_ADDR
// animal := CreateHuman ;
72639: LD_ADDR_VAR 0 12
72643: PUSH
72644: CALL_OW 44
72648: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72649: LD_VAR 0 12
72653: PPUSH
72654: LD_VAR 0 9
72658: PPUSH
72659: LD_INT 0
72661: PPUSH
72662: CALL 74299 0 3
// end ;
72666: GO 72620
72668: POP
72669: POP
// end ;
72670: LD_VAR 0 10
72674: RET
// export function WantHeal ( sci , unit ) ; begin
72675: LD_INT 0
72677: PPUSH
// if GetTaskList ( sci ) > 0 then
72678: LD_VAR 0 1
72682: PPUSH
72683: CALL_OW 437
72687: PUSH
72688: LD_INT 0
72690: GREATER
72691: IFFALSE 72761
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72693: LD_VAR 0 1
72697: PPUSH
72698: CALL_OW 437
72702: PUSH
72703: LD_INT 1
72705: ARRAY
72706: PUSH
72707: LD_INT 1
72709: ARRAY
72710: PUSH
72711: LD_STRING l
72713: EQUAL
72714: PUSH
72715: LD_VAR 0 1
72719: PPUSH
72720: CALL_OW 437
72724: PUSH
72725: LD_INT 1
72727: ARRAY
72728: PUSH
72729: LD_INT 4
72731: ARRAY
72732: PUSH
72733: LD_VAR 0 2
72737: EQUAL
72738: AND
72739: IFFALSE 72751
// result := true else
72741: LD_ADDR_VAR 0 3
72745: PUSH
72746: LD_INT 1
72748: ST_TO_ADDR
72749: GO 72759
// result := false ;
72751: LD_ADDR_VAR 0 3
72755: PUSH
72756: LD_INT 0
72758: ST_TO_ADDR
// end else
72759: GO 72769
// result := false ;
72761: LD_ADDR_VAR 0 3
72765: PUSH
72766: LD_INT 0
72768: ST_TO_ADDR
// end ;
72769: LD_VAR 0 3
72773: RET
// export function HealTarget ( sci ) ; begin
72774: LD_INT 0
72776: PPUSH
// if not sci then
72777: LD_VAR 0 1
72781: NOT
72782: IFFALSE 72786
// exit ;
72784: GO 72851
// result := 0 ;
72786: LD_ADDR_VAR 0 2
72790: PUSH
72791: LD_INT 0
72793: ST_TO_ADDR
// if GetTaskList ( sci ) then
72794: LD_VAR 0 1
72798: PPUSH
72799: CALL_OW 437
72803: IFFALSE 72851
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72805: LD_VAR 0 1
72809: PPUSH
72810: CALL_OW 437
72814: PUSH
72815: LD_INT 1
72817: ARRAY
72818: PUSH
72819: LD_INT 1
72821: ARRAY
72822: PUSH
72823: LD_STRING l
72825: EQUAL
72826: IFFALSE 72851
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72828: LD_ADDR_VAR 0 2
72832: PUSH
72833: LD_VAR 0 1
72837: PPUSH
72838: CALL_OW 437
72842: PUSH
72843: LD_INT 1
72845: ARRAY
72846: PUSH
72847: LD_INT 4
72849: ARRAY
72850: ST_TO_ADDR
// end ;
72851: LD_VAR 0 2
72855: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72856: LD_INT 0
72858: PPUSH
72859: PPUSH
72860: PPUSH
72861: PPUSH
// if not base_units then
72862: LD_VAR 0 1
72866: NOT
72867: IFFALSE 72871
// exit ;
72869: GO 72958
// result := false ;
72871: LD_ADDR_VAR 0 2
72875: PUSH
72876: LD_INT 0
72878: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72879: LD_ADDR_VAR 0 5
72883: PUSH
72884: LD_VAR 0 1
72888: PPUSH
72889: LD_INT 21
72891: PUSH
72892: LD_INT 3
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PPUSH
72899: CALL_OW 72
72903: ST_TO_ADDR
// if not tmp then
72904: LD_VAR 0 5
72908: NOT
72909: IFFALSE 72913
// exit ;
72911: GO 72958
// for i in tmp do
72913: LD_ADDR_VAR 0 3
72917: PUSH
72918: LD_VAR 0 5
72922: PUSH
72923: FOR_IN
72924: IFFALSE 72956
// begin result := EnemyInRange ( i , 22 ) ;
72926: LD_ADDR_VAR 0 2
72930: PUSH
72931: LD_VAR 0 3
72935: PPUSH
72936: LD_INT 22
72938: PPUSH
72939: CALL 70545 0 2
72943: ST_TO_ADDR
// if result then
72944: LD_VAR 0 2
72948: IFFALSE 72954
// exit ;
72950: POP
72951: POP
72952: GO 72958
// end ;
72954: GO 72923
72956: POP
72957: POP
// end ;
72958: LD_VAR 0 2
72962: RET
// export function FilterByTag ( units , tag ) ; begin
72963: LD_INT 0
72965: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72966: LD_ADDR_VAR 0 3
72970: PUSH
72971: LD_VAR 0 1
72975: PPUSH
72976: LD_INT 120
72978: PUSH
72979: LD_VAR 0 2
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PPUSH
72988: CALL_OW 72
72992: ST_TO_ADDR
// end ;
72993: LD_VAR 0 3
72997: RET
// export function IsDriver ( un ) ; begin
72998: LD_INT 0
73000: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73001: LD_ADDR_VAR 0 2
73005: PUSH
73006: LD_VAR 0 1
73010: PUSH
73011: LD_INT 55
73013: PUSH
73014: EMPTY
73015: LIST
73016: PPUSH
73017: CALL_OW 69
73021: IN
73022: ST_TO_ADDR
// end ;
73023: LD_VAR 0 2
73027: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73028: LD_INT 0
73030: PPUSH
73031: PPUSH
// list := [ ] ;
73032: LD_ADDR_VAR 0 5
73036: PUSH
73037: EMPTY
73038: ST_TO_ADDR
// case d of 0 :
73039: LD_VAR 0 3
73043: PUSH
73044: LD_INT 0
73046: DOUBLE
73047: EQUAL
73048: IFTRUE 73052
73050: GO 73185
73052: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73053: LD_ADDR_VAR 0 5
73057: PUSH
73058: LD_VAR 0 1
73062: PUSH
73063: LD_INT 4
73065: MINUS
73066: PUSH
73067: LD_VAR 0 2
73071: PUSH
73072: LD_INT 4
73074: MINUS
73075: PUSH
73076: LD_INT 2
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: LIST
73083: PUSH
73084: LD_VAR 0 1
73088: PUSH
73089: LD_INT 3
73091: MINUS
73092: PUSH
73093: LD_VAR 0 2
73097: PUSH
73098: LD_INT 1
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: LIST
73105: PUSH
73106: LD_VAR 0 1
73110: PUSH
73111: LD_INT 4
73113: PLUS
73114: PUSH
73115: LD_VAR 0 2
73119: PUSH
73120: LD_INT 4
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: LIST
73127: PUSH
73128: LD_VAR 0 1
73132: PUSH
73133: LD_INT 3
73135: PLUS
73136: PUSH
73137: LD_VAR 0 2
73141: PUSH
73142: LD_INT 3
73144: PLUS
73145: PUSH
73146: LD_INT 5
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: LIST
73153: PUSH
73154: LD_VAR 0 1
73158: PUSH
73159: LD_VAR 0 2
73163: PUSH
73164: LD_INT 4
73166: PLUS
73167: PUSH
73168: LD_INT 0
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: LIST
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: ST_TO_ADDR
// end ; 1 :
73183: GO 73883
73185: LD_INT 1
73187: DOUBLE
73188: EQUAL
73189: IFTRUE 73193
73191: GO 73326
73193: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73194: LD_ADDR_VAR 0 5
73198: PUSH
73199: LD_VAR 0 1
73203: PUSH
73204: LD_VAR 0 2
73208: PUSH
73209: LD_INT 4
73211: MINUS
73212: PUSH
73213: LD_INT 3
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: LIST
73220: PUSH
73221: LD_VAR 0 1
73225: PUSH
73226: LD_INT 3
73228: MINUS
73229: PUSH
73230: LD_VAR 0 2
73234: PUSH
73235: LD_INT 3
73237: MINUS
73238: PUSH
73239: LD_INT 2
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: LIST
73246: PUSH
73247: LD_VAR 0 1
73251: PUSH
73252: LD_INT 4
73254: MINUS
73255: PUSH
73256: LD_VAR 0 2
73260: PUSH
73261: LD_INT 1
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: LIST
73268: PUSH
73269: LD_VAR 0 1
73273: PUSH
73274: LD_VAR 0 2
73278: PUSH
73279: LD_INT 3
73281: PLUS
73282: PUSH
73283: LD_INT 0
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: LIST
73290: PUSH
73291: LD_VAR 0 1
73295: PUSH
73296: LD_INT 4
73298: PLUS
73299: PUSH
73300: LD_VAR 0 2
73304: PUSH
73305: LD_INT 4
73307: PLUS
73308: PUSH
73309: LD_INT 5
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: LIST
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: ST_TO_ADDR
// end ; 2 :
73324: GO 73883
73326: LD_INT 2
73328: DOUBLE
73329: EQUAL
73330: IFTRUE 73334
73332: GO 73463
73334: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73335: LD_ADDR_VAR 0 5
73339: PUSH
73340: LD_VAR 0 1
73344: PUSH
73345: LD_VAR 0 2
73349: PUSH
73350: LD_INT 3
73352: MINUS
73353: PUSH
73354: LD_INT 3
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: LIST
73361: PUSH
73362: LD_VAR 0 1
73366: PUSH
73367: LD_INT 4
73369: PLUS
73370: PUSH
73371: LD_VAR 0 2
73375: PUSH
73376: LD_INT 4
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: LIST
73383: PUSH
73384: LD_VAR 0 1
73388: PUSH
73389: LD_VAR 0 2
73393: PUSH
73394: LD_INT 4
73396: PLUS
73397: PUSH
73398: LD_INT 0
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: LIST
73405: PUSH
73406: LD_VAR 0 1
73410: PUSH
73411: LD_INT 3
73413: MINUS
73414: PUSH
73415: LD_VAR 0 2
73419: PUSH
73420: LD_INT 1
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: LIST
73427: PUSH
73428: LD_VAR 0 1
73432: PUSH
73433: LD_INT 4
73435: MINUS
73436: PUSH
73437: LD_VAR 0 2
73441: PUSH
73442: LD_INT 4
73444: MINUS
73445: PUSH
73446: LD_INT 2
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: LIST
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: ST_TO_ADDR
// end ; 3 :
73461: GO 73883
73463: LD_INT 3
73465: DOUBLE
73466: EQUAL
73467: IFTRUE 73471
73469: GO 73604
73471: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73472: LD_ADDR_VAR 0 5
73476: PUSH
73477: LD_VAR 0 1
73481: PUSH
73482: LD_INT 3
73484: PLUS
73485: PUSH
73486: LD_VAR 0 2
73490: PUSH
73491: LD_INT 4
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: LIST
73498: PUSH
73499: LD_VAR 0 1
73503: PUSH
73504: LD_INT 4
73506: PLUS
73507: PUSH
73508: LD_VAR 0 2
73512: PUSH
73513: LD_INT 4
73515: PLUS
73516: PUSH
73517: LD_INT 5
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: LIST
73524: PUSH
73525: LD_VAR 0 1
73529: PUSH
73530: LD_INT 4
73532: MINUS
73533: PUSH
73534: LD_VAR 0 2
73538: PUSH
73539: LD_INT 1
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: LIST
73546: PUSH
73547: LD_VAR 0 1
73551: PUSH
73552: LD_VAR 0 2
73556: PUSH
73557: LD_INT 4
73559: MINUS
73560: PUSH
73561: LD_INT 3
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: LIST
73568: PUSH
73569: LD_VAR 0 1
73573: PUSH
73574: LD_INT 3
73576: MINUS
73577: PUSH
73578: LD_VAR 0 2
73582: PUSH
73583: LD_INT 3
73585: MINUS
73586: PUSH
73587: LD_INT 2
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: LIST
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: ST_TO_ADDR
// end ; 4 :
73602: GO 73883
73604: LD_INT 4
73606: DOUBLE
73607: EQUAL
73608: IFTRUE 73612
73610: GO 73745
73612: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73613: LD_ADDR_VAR 0 5
73617: PUSH
73618: LD_VAR 0 1
73622: PUSH
73623: LD_VAR 0 2
73627: PUSH
73628: LD_INT 4
73630: PLUS
73631: PUSH
73632: LD_INT 0
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: LIST
73639: PUSH
73640: LD_VAR 0 1
73644: PUSH
73645: LD_INT 3
73647: PLUS
73648: PUSH
73649: LD_VAR 0 2
73653: PUSH
73654: LD_INT 3
73656: PLUS
73657: PUSH
73658: LD_INT 5
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: LIST
73665: PUSH
73666: LD_VAR 0 1
73670: PUSH
73671: LD_INT 4
73673: PLUS
73674: PUSH
73675: LD_VAR 0 2
73679: PUSH
73680: LD_INT 4
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: LIST
73687: PUSH
73688: LD_VAR 0 1
73692: PUSH
73693: LD_VAR 0 2
73697: PUSH
73698: LD_INT 3
73700: MINUS
73701: PUSH
73702: LD_INT 3
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: LIST
73709: PUSH
73710: LD_VAR 0 1
73714: PUSH
73715: LD_INT 4
73717: MINUS
73718: PUSH
73719: LD_VAR 0 2
73723: PUSH
73724: LD_INT 4
73726: MINUS
73727: PUSH
73728: LD_INT 2
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: LIST
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: ST_TO_ADDR
// end ; 5 :
73743: GO 73883
73745: LD_INT 5
73747: DOUBLE
73748: EQUAL
73749: IFTRUE 73753
73751: GO 73882
73753: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73754: LD_ADDR_VAR 0 5
73758: PUSH
73759: LD_VAR 0 1
73763: PUSH
73764: LD_INT 4
73766: MINUS
73767: PUSH
73768: LD_VAR 0 2
73772: PUSH
73773: LD_INT 1
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: LIST
73780: PUSH
73781: LD_VAR 0 1
73785: PUSH
73786: LD_VAR 0 2
73790: PUSH
73791: LD_INT 4
73793: MINUS
73794: PUSH
73795: LD_INT 3
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: LIST
73802: PUSH
73803: LD_VAR 0 1
73807: PUSH
73808: LD_INT 4
73810: PLUS
73811: PUSH
73812: LD_VAR 0 2
73816: PUSH
73817: LD_INT 4
73819: PLUS
73820: PUSH
73821: LD_INT 5
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: LIST
73828: PUSH
73829: LD_VAR 0 1
73833: PUSH
73834: LD_INT 3
73836: PLUS
73837: PUSH
73838: LD_VAR 0 2
73842: PUSH
73843: LD_INT 4
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: LIST
73850: PUSH
73851: LD_VAR 0 1
73855: PUSH
73856: LD_VAR 0 2
73860: PUSH
73861: LD_INT 3
73863: PLUS
73864: PUSH
73865: LD_INT 0
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: LIST
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: ST_TO_ADDR
// end ; end ;
73880: GO 73883
73882: POP
// result := list ;
73883: LD_ADDR_VAR 0 4
73887: PUSH
73888: LD_VAR 0 5
73892: ST_TO_ADDR
// end ;
73893: LD_VAR 0 4
73897: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73898: LD_INT 0
73900: PPUSH
73901: PPUSH
73902: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73903: LD_VAR 0 1
73907: NOT
73908: PUSH
73909: LD_VAR 0 2
73913: PUSH
73914: LD_INT 1
73916: PUSH
73917: LD_INT 2
73919: PUSH
73920: LD_INT 3
73922: PUSH
73923: LD_INT 4
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: IN
73932: NOT
73933: OR
73934: IFFALSE 73938
// exit ;
73936: GO 74021
// tmp := [ ] ;
73938: LD_ADDR_VAR 0 5
73942: PUSH
73943: EMPTY
73944: ST_TO_ADDR
// for i in units do
73945: LD_ADDR_VAR 0 4
73949: PUSH
73950: LD_VAR 0 1
73954: PUSH
73955: FOR_IN
73956: IFFALSE 73990
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73958: LD_ADDR_VAR 0 5
73962: PUSH
73963: LD_VAR 0 5
73967: PPUSH
73968: LD_VAR 0 4
73972: PPUSH
73973: LD_VAR 0 2
73977: PPUSH
73978: CALL_OW 259
73982: PPUSH
73983: CALL 75382 0 2
73987: ST_TO_ADDR
73988: GO 73955
73990: POP
73991: POP
// if not tmp then
73992: LD_VAR 0 5
73996: NOT
73997: IFFALSE 74001
// exit ;
73999: GO 74021
// result := SortListByListDesc ( units , tmp ) ;
74001: LD_ADDR_VAR 0 3
74005: PUSH
74006: LD_VAR 0 1
74010: PPUSH
74011: LD_VAR 0 5
74015: PPUSH
74016: CALL_OW 77
74020: ST_TO_ADDR
// end ;
74021: LD_VAR 0 3
74025: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74026: LD_INT 0
74028: PPUSH
74029: PPUSH
74030: PPUSH
// result := false ;
74031: LD_ADDR_VAR 0 3
74035: PUSH
74036: LD_INT 0
74038: ST_TO_ADDR
// if not building then
74039: LD_VAR 0 2
74043: NOT
74044: IFFALSE 74048
// exit ;
74046: GO 74186
// x := GetX ( building ) ;
74048: LD_ADDR_VAR 0 4
74052: PUSH
74053: LD_VAR 0 2
74057: PPUSH
74058: CALL_OW 250
74062: ST_TO_ADDR
// y := GetY ( building ) ;
74063: LD_ADDR_VAR 0 5
74067: PUSH
74068: LD_VAR 0 2
74072: PPUSH
74073: CALL_OW 251
74077: ST_TO_ADDR
// if not x or not y then
74078: LD_VAR 0 4
74082: NOT
74083: PUSH
74084: LD_VAR 0 5
74088: NOT
74089: OR
74090: IFFALSE 74094
// exit ;
74092: GO 74186
// if GetTaskList ( unit ) then
74094: LD_VAR 0 1
74098: PPUSH
74099: CALL_OW 437
74103: IFFALSE 74186
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74105: LD_STRING e
74107: PUSH
74108: LD_VAR 0 1
74112: PPUSH
74113: CALL_OW 437
74117: PUSH
74118: LD_INT 1
74120: ARRAY
74121: PUSH
74122: LD_INT 1
74124: ARRAY
74125: EQUAL
74126: PUSH
74127: LD_VAR 0 4
74131: PUSH
74132: LD_VAR 0 1
74136: PPUSH
74137: CALL_OW 437
74141: PUSH
74142: LD_INT 1
74144: ARRAY
74145: PUSH
74146: LD_INT 2
74148: ARRAY
74149: EQUAL
74150: AND
74151: PUSH
74152: LD_VAR 0 5
74156: PUSH
74157: LD_VAR 0 1
74161: PPUSH
74162: CALL_OW 437
74166: PUSH
74167: LD_INT 1
74169: ARRAY
74170: PUSH
74171: LD_INT 3
74173: ARRAY
74174: EQUAL
74175: AND
74176: IFFALSE 74186
// result := true end ;
74178: LD_ADDR_VAR 0 3
74182: PUSH
74183: LD_INT 1
74185: ST_TO_ADDR
// end ;
74186: LD_VAR 0 3
74190: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74191: LD_INT 0
74193: PPUSH
// result := false ;
74194: LD_ADDR_VAR 0 4
74198: PUSH
74199: LD_INT 0
74201: ST_TO_ADDR
// if GetTaskList ( unit ) then
74202: LD_VAR 0 1
74206: PPUSH
74207: CALL_OW 437
74211: IFFALSE 74294
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74213: LD_STRING M
74215: PUSH
74216: LD_VAR 0 1
74220: PPUSH
74221: CALL_OW 437
74225: PUSH
74226: LD_INT 1
74228: ARRAY
74229: PUSH
74230: LD_INT 1
74232: ARRAY
74233: EQUAL
74234: PUSH
74235: LD_VAR 0 2
74239: PUSH
74240: LD_VAR 0 1
74244: PPUSH
74245: CALL_OW 437
74249: PUSH
74250: LD_INT 1
74252: ARRAY
74253: PUSH
74254: LD_INT 2
74256: ARRAY
74257: EQUAL
74258: AND
74259: PUSH
74260: LD_VAR 0 3
74264: PUSH
74265: LD_VAR 0 1
74269: PPUSH
74270: CALL_OW 437
74274: PUSH
74275: LD_INT 1
74277: ARRAY
74278: PUSH
74279: LD_INT 3
74281: ARRAY
74282: EQUAL
74283: AND
74284: IFFALSE 74294
// result := true ;
74286: LD_ADDR_VAR 0 4
74290: PUSH
74291: LD_INT 1
74293: ST_TO_ADDR
// end ; end ;
74294: LD_VAR 0 4
74298: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74299: LD_INT 0
74301: PPUSH
74302: PPUSH
74303: PPUSH
74304: PPUSH
// if not unit or not area then
74305: LD_VAR 0 1
74309: NOT
74310: PUSH
74311: LD_VAR 0 2
74315: NOT
74316: OR
74317: IFFALSE 74321
// exit ;
74319: GO 74485
// tmp := AreaToList ( area , i ) ;
74321: LD_ADDR_VAR 0 6
74325: PUSH
74326: LD_VAR 0 2
74330: PPUSH
74331: LD_VAR 0 5
74335: PPUSH
74336: CALL_OW 517
74340: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74341: LD_ADDR_VAR 0 5
74345: PUSH
74346: DOUBLE
74347: LD_INT 1
74349: DEC
74350: ST_TO_ADDR
74351: LD_VAR 0 6
74355: PUSH
74356: LD_INT 1
74358: ARRAY
74359: PUSH
74360: FOR_TO
74361: IFFALSE 74483
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74363: LD_ADDR_VAR 0 7
74367: PUSH
74368: LD_VAR 0 6
74372: PUSH
74373: LD_INT 1
74375: ARRAY
74376: PUSH
74377: LD_VAR 0 5
74381: ARRAY
74382: PUSH
74383: LD_VAR 0 6
74387: PUSH
74388: LD_INT 2
74390: ARRAY
74391: PUSH
74392: LD_VAR 0 5
74396: ARRAY
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74402: LD_VAR 0 7
74406: PUSH
74407: LD_INT 1
74409: ARRAY
74410: PPUSH
74411: LD_VAR 0 7
74415: PUSH
74416: LD_INT 2
74418: ARRAY
74419: PPUSH
74420: CALL_OW 428
74424: PUSH
74425: LD_INT 0
74427: EQUAL
74428: IFFALSE 74481
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74430: LD_VAR 0 1
74434: PPUSH
74435: LD_VAR 0 7
74439: PUSH
74440: LD_INT 1
74442: ARRAY
74443: PPUSH
74444: LD_VAR 0 7
74448: PUSH
74449: LD_INT 2
74451: ARRAY
74452: PPUSH
74453: LD_VAR 0 3
74457: PPUSH
74458: CALL_OW 48
// result := IsPlaced ( unit ) ;
74462: LD_ADDR_VAR 0 4
74466: PUSH
74467: LD_VAR 0 1
74471: PPUSH
74472: CALL_OW 305
74476: ST_TO_ADDR
// exit ;
74477: POP
74478: POP
74479: GO 74485
// end ; end ;
74481: GO 74360
74483: POP
74484: POP
// end ;
74485: LD_VAR 0 4
74489: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74490: LD_INT 0
74492: PPUSH
74493: PPUSH
74494: PPUSH
// if not side or side > 8 then
74495: LD_VAR 0 1
74499: NOT
74500: PUSH
74501: LD_VAR 0 1
74505: PUSH
74506: LD_INT 8
74508: GREATER
74509: OR
74510: IFFALSE 74514
// exit ;
74512: GO 74701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74514: LD_ADDR_VAR 0 4
74518: PUSH
74519: LD_INT 22
74521: PUSH
74522: LD_VAR 0 1
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: PUSH
74531: LD_INT 21
74533: PUSH
74534: LD_INT 3
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PPUSH
74545: CALL_OW 69
74549: ST_TO_ADDR
// if not tmp then
74550: LD_VAR 0 4
74554: NOT
74555: IFFALSE 74559
// exit ;
74557: GO 74701
// enable_addtolog := true ;
74559: LD_ADDR_OWVAR 81
74563: PUSH
74564: LD_INT 1
74566: ST_TO_ADDR
// AddToLog ( [ ) ;
74567: LD_STRING [
74569: PPUSH
74570: CALL_OW 561
// for i in tmp do
74574: LD_ADDR_VAR 0 3
74578: PUSH
74579: LD_VAR 0 4
74583: PUSH
74584: FOR_IN
74585: IFFALSE 74692
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74587: LD_STRING [
74589: PUSH
74590: LD_VAR 0 3
74594: PPUSH
74595: CALL_OW 266
74599: STR
74600: PUSH
74601: LD_STRING , 
74603: STR
74604: PUSH
74605: LD_VAR 0 3
74609: PPUSH
74610: CALL_OW 250
74614: STR
74615: PUSH
74616: LD_STRING , 
74618: STR
74619: PUSH
74620: LD_VAR 0 3
74624: PPUSH
74625: CALL_OW 251
74629: STR
74630: PUSH
74631: LD_STRING , 
74633: STR
74634: PUSH
74635: LD_VAR 0 3
74639: PPUSH
74640: CALL_OW 254
74644: STR
74645: PUSH
74646: LD_STRING , 
74648: STR
74649: PUSH
74650: LD_VAR 0 3
74654: PPUSH
74655: LD_INT 1
74657: PPUSH
74658: CALL_OW 268
74662: STR
74663: PUSH
74664: LD_STRING , 
74666: STR
74667: PUSH
74668: LD_VAR 0 3
74672: PPUSH
74673: LD_INT 2
74675: PPUSH
74676: CALL_OW 268
74680: STR
74681: PUSH
74682: LD_STRING ],
74684: STR
74685: PPUSH
74686: CALL_OW 561
// end ;
74690: GO 74584
74692: POP
74693: POP
// AddToLog ( ]; ) ;
74694: LD_STRING ];
74696: PPUSH
74697: CALL_OW 561
// end ;
74701: LD_VAR 0 2
74705: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74706: LD_INT 0
74708: PPUSH
74709: PPUSH
74710: PPUSH
74711: PPUSH
74712: PPUSH
// if not area or not rate or not max then
74713: LD_VAR 0 1
74717: NOT
74718: PUSH
74719: LD_VAR 0 2
74723: NOT
74724: OR
74725: PUSH
74726: LD_VAR 0 4
74730: NOT
74731: OR
74732: IFFALSE 74736
// exit ;
74734: GO 74925
// while 1 do
74736: LD_INT 1
74738: IFFALSE 74925
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74740: LD_ADDR_VAR 0 9
74744: PUSH
74745: LD_VAR 0 1
74749: PPUSH
74750: LD_INT 1
74752: PPUSH
74753: CALL_OW 287
74757: PUSH
74758: LD_INT 10
74760: MUL
74761: ST_TO_ADDR
// r := rate / 10 ;
74762: LD_ADDR_VAR 0 7
74766: PUSH
74767: LD_VAR 0 2
74771: PUSH
74772: LD_INT 10
74774: DIVREAL
74775: ST_TO_ADDR
// time := 1 1$00 ;
74776: LD_ADDR_VAR 0 8
74780: PUSH
74781: LD_INT 2100
74783: ST_TO_ADDR
// if amount < min then
74784: LD_VAR 0 9
74788: PUSH
74789: LD_VAR 0 3
74793: LESS
74794: IFFALSE 74812
// r := r * 2 else
74796: LD_ADDR_VAR 0 7
74800: PUSH
74801: LD_VAR 0 7
74805: PUSH
74806: LD_INT 2
74808: MUL
74809: ST_TO_ADDR
74810: GO 74838
// if amount > max then
74812: LD_VAR 0 9
74816: PUSH
74817: LD_VAR 0 4
74821: GREATER
74822: IFFALSE 74838
// r := r / 2 ;
74824: LD_ADDR_VAR 0 7
74828: PUSH
74829: LD_VAR 0 7
74833: PUSH
74834: LD_INT 2
74836: DIVREAL
74837: ST_TO_ADDR
// time := time / r ;
74838: LD_ADDR_VAR 0 8
74842: PUSH
74843: LD_VAR 0 8
74847: PUSH
74848: LD_VAR 0 7
74852: DIVREAL
74853: ST_TO_ADDR
// if time < 0 then
74854: LD_VAR 0 8
74858: PUSH
74859: LD_INT 0
74861: LESS
74862: IFFALSE 74879
// time := time * - 1 ;
74864: LD_ADDR_VAR 0 8
74868: PUSH
74869: LD_VAR 0 8
74873: PUSH
74874: LD_INT 1
74876: NEG
74877: MUL
74878: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74879: LD_VAR 0 8
74883: PUSH
74884: LD_INT 35
74886: PPUSH
74887: LD_INT 875
74889: PPUSH
74890: CALL_OW 12
74894: PLUS
74895: PPUSH
74896: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74900: LD_INT 1
74902: PPUSH
74903: LD_INT 5
74905: PPUSH
74906: CALL_OW 12
74910: PPUSH
74911: LD_VAR 0 1
74915: PPUSH
74916: LD_INT 1
74918: PPUSH
74919: CALL_OW 55
// end ;
74923: GO 74736
// end ;
74925: LD_VAR 0 5
74929: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74930: LD_INT 0
74932: PPUSH
74933: PPUSH
74934: PPUSH
74935: PPUSH
74936: PPUSH
74937: PPUSH
74938: PPUSH
74939: PPUSH
// if not turrets or not factories then
74940: LD_VAR 0 1
74944: NOT
74945: PUSH
74946: LD_VAR 0 2
74950: NOT
74951: OR
74952: IFFALSE 74956
// exit ;
74954: GO 75263
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74956: LD_ADDR_VAR 0 10
74960: PUSH
74961: LD_INT 5
74963: PUSH
74964: LD_INT 6
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: PUSH
74971: LD_INT 2
74973: PUSH
74974: LD_INT 4
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: PUSH
74981: LD_INT 3
74983: PUSH
74984: LD_INT 5
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: LIST
74995: PUSH
74996: LD_INT 24
74998: PUSH
74999: LD_INT 25
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: LD_INT 23
75008: PUSH
75009: LD_INT 27
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: PUSH
75020: LD_INT 42
75022: PUSH
75023: LD_INT 43
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 44
75032: PUSH
75033: LD_INT 46
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 45
75042: PUSH
75043: LD_INT 47
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: LIST
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: LIST
75059: ST_TO_ADDR
// result := [ ] ;
75060: LD_ADDR_VAR 0 3
75064: PUSH
75065: EMPTY
75066: ST_TO_ADDR
// for i in turrets do
75067: LD_ADDR_VAR 0 4
75071: PUSH
75072: LD_VAR 0 1
75076: PUSH
75077: FOR_IN
75078: IFFALSE 75261
// begin nat := GetNation ( i ) ;
75080: LD_ADDR_VAR 0 7
75084: PUSH
75085: LD_VAR 0 4
75089: PPUSH
75090: CALL_OW 248
75094: ST_TO_ADDR
// weapon := 0 ;
75095: LD_ADDR_VAR 0 8
75099: PUSH
75100: LD_INT 0
75102: ST_TO_ADDR
// if not nat then
75103: LD_VAR 0 7
75107: NOT
75108: IFFALSE 75112
// continue ;
75110: GO 75077
// for j in list [ nat ] do
75112: LD_ADDR_VAR 0 5
75116: PUSH
75117: LD_VAR 0 10
75121: PUSH
75122: LD_VAR 0 7
75126: ARRAY
75127: PUSH
75128: FOR_IN
75129: IFFALSE 75170
// if GetBWeapon ( i ) = j [ 1 ] then
75131: LD_VAR 0 4
75135: PPUSH
75136: CALL_OW 269
75140: PUSH
75141: LD_VAR 0 5
75145: PUSH
75146: LD_INT 1
75148: ARRAY
75149: EQUAL
75150: IFFALSE 75168
// begin weapon := j [ 2 ] ;
75152: LD_ADDR_VAR 0 8
75156: PUSH
75157: LD_VAR 0 5
75161: PUSH
75162: LD_INT 2
75164: ARRAY
75165: ST_TO_ADDR
// break ;
75166: GO 75170
// end ;
75168: GO 75128
75170: POP
75171: POP
// if not weapon then
75172: LD_VAR 0 8
75176: NOT
75177: IFFALSE 75181
// continue ;
75179: GO 75077
// for k in factories do
75181: LD_ADDR_VAR 0 6
75185: PUSH
75186: LD_VAR 0 2
75190: PUSH
75191: FOR_IN
75192: IFFALSE 75257
// begin weapons := AvailableWeaponList ( k ) ;
75194: LD_ADDR_VAR 0 9
75198: PUSH
75199: LD_VAR 0 6
75203: PPUSH
75204: CALL_OW 478
75208: ST_TO_ADDR
// if not weapons then
75209: LD_VAR 0 9
75213: NOT
75214: IFFALSE 75218
// continue ;
75216: GO 75191
// if weapon in weapons then
75218: LD_VAR 0 8
75222: PUSH
75223: LD_VAR 0 9
75227: IN
75228: IFFALSE 75255
// begin result := [ i , weapon ] ;
75230: LD_ADDR_VAR 0 3
75234: PUSH
75235: LD_VAR 0 4
75239: PUSH
75240: LD_VAR 0 8
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: ST_TO_ADDR
// exit ;
75249: POP
75250: POP
75251: POP
75252: POP
75253: GO 75263
// end ; end ;
75255: GO 75191
75257: POP
75258: POP
// end ;
75259: GO 75077
75261: POP
75262: POP
// end ;
75263: LD_VAR 0 3
75267: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75268: LD_INT 0
75270: PPUSH
// if not side or side > 8 then
75271: LD_VAR 0 3
75275: NOT
75276: PUSH
75277: LD_VAR 0 3
75281: PUSH
75282: LD_INT 8
75284: GREATER
75285: OR
75286: IFFALSE 75290
// exit ;
75288: GO 75349
// if not range then
75290: LD_VAR 0 4
75294: NOT
75295: IFFALSE 75306
// range := - 12 ;
75297: LD_ADDR_VAR 0 4
75301: PUSH
75302: LD_INT 12
75304: NEG
75305: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75306: LD_VAR 0 1
75310: PPUSH
75311: LD_VAR 0 2
75315: PPUSH
75316: LD_VAR 0 3
75320: PPUSH
75321: LD_VAR 0 4
75325: PPUSH
75326: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75330: LD_VAR 0 1
75334: PPUSH
75335: LD_VAR 0 2
75339: PPUSH
75340: LD_VAR 0 3
75344: PPUSH
75345: CALL_OW 331
// end ;
75349: LD_VAR 0 5
75353: RET
// export function Video ( mode ) ; begin
75354: LD_INT 0
75356: PPUSH
// ingame_video = mode ;
75357: LD_ADDR_OWVAR 52
75361: PUSH
75362: LD_VAR 0 1
75366: ST_TO_ADDR
// interface_hidden = mode ;
75367: LD_ADDR_OWVAR 54
75371: PUSH
75372: LD_VAR 0 1
75376: ST_TO_ADDR
// end ;
75377: LD_VAR 0 2
75381: RET
// export function Join ( array , element ) ; begin
75382: LD_INT 0
75384: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75385: LD_ADDR_VAR 0 3
75389: PUSH
75390: LD_VAR 0 1
75394: PPUSH
75395: LD_VAR 0 1
75399: PUSH
75400: LD_INT 1
75402: PLUS
75403: PPUSH
75404: LD_VAR 0 2
75408: PPUSH
75409: CALL_OW 1
75413: ST_TO_ADDR
// end ;
75414: LD_VAR 0 3
75418: RET
// export function JoinUnion ( array , element ) ; begin
75419: LD_INT 0
75421: PPUSH
// result := array union element ;
75422: LD_ADDR_VAR 0 3
75426: PUSH
75427: LD_VAR 0 1
75431: PUSH
75432: LD_VAR 0 2
75436: UNION
75437: ST_TO_ADDR
// end ;
75438: LD_VAR 0 3
75442: RET
// export function GetBehemoths ( side ) ; begin
75443: LD_INT 0
75445: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75446: LD_ADDR_VAR 0 2
75450: PUSH
75451: LD_INT 22
75453: PUSH
75454: LD_VAR 0 1
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 31
75465: PUSH
75466: LD_INT 25
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: PPUSH
75477: CALL_OW 69
75481: ST_TO_ADDR
// end ;
75482: LD_VAR 0 2
75486: RET
// export function Shuffle ( array ) ; var i , index ; begin
75487: LD_INT 0
75489: PPUSH
75490: PPUSH
75491: PPUSH
// result := [ ] ;
75492: LD_ADDR_VAR 0 2
75496: PUSH
75497: EMPTY
75498: ST_TO_ADDR
// if not array then
75499: LD_VAR 0 1
75503: NOT
75504: IFFALSE 75508
// exit ;
75506: GO 75607
// Randomize ;
75508: CALL_OW 10
// for i = array downto 1 do
75512: LD_ADDR_VAR 0 3
75516: PUSH
75517: DOUBLE
75518: LD_VAR 0 1
75522: INC
75523: ST_TO_ADDR
75524: LD_INT 1
75526: PUSH
75527: FOR_DOWNTO
75528: IFFALSE 75605
// begin index := rand ( 1 , array ) ;
75530: LD_ADDR_VAR 0 4
75534: PUSH
75535: LD_INT 1
75537: PPUSH
75538: LD_VAR 0 1
75542: PPUSH
75543: CALL_OW 12
75547: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75548: LD_ADDR_VAR 0 2
75552: PUSH
75553: LD_VAR 0 2
75557: PPUSH
75558: LD_VAR 0 2
75562: PUSH
75563: LD_INT 1
75565: PLUS
75566: PPUSH
75567: LD_VAR 0 1
75571: PUSH
75572: LD_VAR 0 4
75576: ARRAY
75577: PPUSH
75578: CALL_OW 2
75582: ST_TO_ADDR
// array := Delete ( array , index ) ;
75583: LD_ADDR_VAR 0 1
75587: PUSH
75588: LD_VAR 0 1
75592: PPUSH
75593: LD_VAR 0 4
75597: PPUSH
75598: CALL_OW 3
75602: ST_TO_ADDR
// end ;
75603: GO 75527
75605: POP
75606: POP
// end ;
75607: LD_VAR 0 2
75611: RET
// export function GetBaseMaterials ( base ) ; begin
75612: LD_INT 0
75614: PPUSH
// result := [ 0 , 0 , 0 ] ;
75615: LD_ADDR_VAR 0 2
75619: PUSH
75620: LD_INT 0
75622: PUSH
75623: LD_INT 0
75625: PUSH
75626: LD_INT 0
75628: PUSH
75629: EMPTY
75630: LIST
75631: LIST
75632: LIST
75633: ST_TO_ADDR
// if not base then
75634: LD_VAR 0 1
75638: NOT
75639: IFFALSE 75643
// exit ;
75641: GO 75692
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75643: LD_ADDR_VAR 0 2
75647: PUSH
75648: LD_VAR 0 1
75652: PPUSH
75653: LD_INT 1
75655: PPUSH
75656: CALL_OW 275
75660: PUSH
75661: LD_VAR 0 1
75665: PPUSH
75666: LD_INT 2
75668: PPUSH
75669: CALL_OW 275
75673: PUSH
75674: LD_VAR 0 1
75678: PPUSH
75679: LD_INT 3
75681: PPUSH
75682: CALL_OW 275
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: LIST
75691: ST_TO_ADDR
// end ;
75692: LD_VAR 0 2
75696: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75697: LD_INT 0
75699: PPUSH
75700: PPUSH
// result := array ;
75701: LD_ADDR_VAR 0 3
75705: PUSH
75706: LD_VAR 0 1
75710: ST_TO_ADDR
// if size >= result then
75711: LD_VAR 0 2
75715: PUSH
75716: LD_VAR 0 3
75720: GREATEREQUAL
75721: IFFALSE 75725
// exit ;
75723: GO 75775
// if size then
75725: LD_VAR 0 2
75729: IFFALSE 75775
// for i := array downto size do
75731: LD_ADDR_VAR 0 4
75735: PUSH
75736: DOUBLE
75737: LD_VAR 0 1
75741: INC
75742: ST_TO_ADDR
75743: LD_VAR 0 2
75747: PUSH
75748: FOR_DOWNTO
75749: IFFALSE 75773
// result := Delete ( result , result ) ;
75751: LD_ADDR_VAR 0 3
75755: PUSH
75756: LD_VAR 0 3
75760: PPUSH
75761: LD_VAR 0 3
75765: PPUSH
75766: CALL_OW 3
75770: ST_TO_ADDR
75771: GO 75748
75773: POP
75774: POP
// end ;
75775: LD_VAR 0 3
75779: RET
// export function ComExit ( unit ) ; var tmp ; begin
75780: LD_INT 0
75782: PPUSH
75783: PPUSH
// if not IsInUnit ( unit ) then
75784: LD_VAR 0 1
75788: PPUSH
75789: CALL_OW 310
75793: NOT
75794: IFFALSE 75798
// exit ;
75796: GO 75858
// tmp := IsInUnit ( unit ) ;
75798: LD_ADDR_VAR 0 3
75802: PUSH
75803: LD_VAR 0 1
75807: PPUSH
75808: CALL_OW 310
75812: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75813: LD_VAR 0 3
75817: PPUSH
75818: CALL_OW 247
75822: PUSH
75823: LD_INT 2
75825: EQUAL
75826: IFFALSE 75839
// ComExitVehicle ( unit ) else
75828: LD_VAR 0 1
75832: PPUSH
75833: CALL_OW 121
75837: GO 75848
// ComExitBuilding ( unit ) ;
75839: LD_VAR 0 1
75843: PPUSH
75844: CALL_OW 122
// result := tmp ;
75848: LD_ADDR_VAR 0 2
75852: PUSH
75853: LD_VAR 0 3
75857: ST_TO_ADDR
// end ;
75858: LD_VAR 0 2
75862: RET
// export function ComExitAll ( units ) ; var i ; begin
75863: LD_INT 0
75865: PPUSH
75866: PPUSH
// if not units then
75867: LD_VAR 0 1
75871: NOT
75872: IFFALSE 75876
// exit ;
75874: GO 75902
// for i in units do
75876: LD_ADDR_VAR 0 3
75880: PUSH
75881: LD_VAR 0 1
75885: PUSH
75886: FOR_IN
75887: IFFALSE 75900
// ComExit ( i ) ;
75889: LD_VAR 0 3
75893: PPUSH
75894: CALL 75780 0 1
75898: GO 75886
75900: POP
75901: POP
// end ;
75902: LD_VAR 0 2
75906: RET
// export function ResetHc ; begin
75907: LD_INT 0
75909: PPUSH
// InitHc ;
75910: CALL_OW 19
// hc_importance := 0 ;
75914: LD_ADDR_OWVAR 32
75918: PUSH
75919: LD_INT 0
75921: ST_TO_ADDR
// end ;
75922: LD_VAR 0 1
75926: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75927: LD_INT 0
75929: PPUSH
75930: PPUSH
75931: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75932: LD_ADDR_VAR 0 6
75936: PUSH
75937: LD_VAR 0 1
75941: PUSH
75942: LD_VAR 0 3
75946: PLUS
75947: PUSH
75948: LD_INT 2
75950: DIV
75951: ST_TO_ADDR
// if _x < 0 then
75952: LD_VAR 0 6
75956: PUSH
75957: LD_INT 0
75959: LESS
75960: IFFALSE 75977
// _x := _x * - 1 ;
75962: LD_ADDR_VAR 0 6
75966: PUSH
75967: LD_VAR 0 6
75971: PUSH
75972: LD_INT 1
75974: NEG
75975: MUL
75976: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75977: LD_ADDR_VAR 0 7
75981: PUSH
75982: LD_VAR 0 2
75986: PUSH
75987: LD_VAR 0 4
75991: PLUS
75992: PUSH
75993: LD_INT 2
75995: DIV
75996: ST_TO_ADDR
// if _y < 0 then
75997: LD_VAR 0 7
76001: PUSH
76002: LD_INT 0
76004: LESS
76005: IFFALSE 76022
// _y := _y * - 1 ;
76007: LD_ADDR_VAR 0 7
76011: PUSH
76012: LD_VAR 0 7
76016: PUSH
76017: LD_INT 1
76019: NEG
76020: MUL
76021: ST_TO_ADDR
// result := [ _x , _y ] ;
76022: LD_ADDR_VAR 0 5
76026: PUSH
76027: LD_VAR 0 6
76031: PUSH
76032: LD_VAR 0 7
76036: PUSH
76037: EMPTY
76038: LIST
76039: LIST
76040: ST_TO_ADDR
// end ;
76041: LD_VAR 0 5
76045: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76046: LD_INT 0
76048: PPUSH
76049: PPUSH
76050: PPUSH
76051: PPUSH
// task := GetTaskList ( unit ) ;
76052: LD_ADDR_VAR 0 7
76056: PUSH
76057: LD_VAR 0 1
76061: PPUSH
76062: CALL_OW 437
76066: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76067: LD_VAR 0 7
76071: NOT
76072: PUSH
76073: LD_VAR 0 1
76077: PPUSH
76078: LD_VAR 0 2
76082: PPUSH
76083: CALL_OW 308
76087: NOT
76088: AND
76089: IFFALSE 76093
// exit ;
76091: GO 76211
// if IsInArea ( unit , area ) then
76093: LD_VAR 0 1
76097: PPUSH
76098: LD_VAR 0 2
76102: PPUSH
76103: CALL_OW 308
76107: IFFALSE 76125
// begin ComMoveToArea ( unit , goAway ) ;
76109: LD_VAR 0 1
76113: PPUSH
76114: LD_VAR 0 3
76118: PPUSH
76119: CALL_OW 113
// exit ;
76123: GO 76211
// end ; if task [ 1 ] [ 1 ] <> M then
76125: LD_VAR 0 7
76129: PUSH
76130: LD_INT 1
76132: ARRAY
76133: PUSH
76134: LD_INT 1
76136: ARRAY
76137: PUSH
76138: LD_STRING M
76140: NONEQUAL
76141: IFFALSE 76145
// exit ;
76143: GO 76211
// x := task [ 1 ] [ 2 ] ;
76145: LD_ADDR_VAR 0 5
76149: PUSH
76150: LD_VAR 0 7
76154: PUSH
76155: LD_INT 1
76157: ARRAY
76158: PUSH
76159: LD_INT 2
76161: ARRAY
76162: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76163: LD_ADDR_VAR 0 6
76167: PUSH
76168: LD_VAR 0 7
76172: PUSH
76173: LD_INT 1
76175: ARRAY
76176: PUSH
76177: LD_INT 3
76179: ARRAY
76180: ST_TO_ADDR
// if InArea ( x , y , area ) then
76181: LD_VAR 0 5
76185: PPUSH
76186: LD_VAR 0 6
76190: PPUSH
76191: LD_VAR 0 2
76195: PPUSH
76196: CALL_OW 309
76200: IFFALSE 76211
// ComStop ( unit ) ;
76202: LD_VAR 0 1
76206: PPUSH
76207: CALL_OW 141
// end ;
76211: LD_VAR 0 4
76215: RET
// export function Abs ( value ) ; begin
76216: LD_INT 0
76218: PPUSH
// result := value ;
76219: LD_ADDR_VAR 0 2
76223: PUSH
76224: LD_VAR 0 1
76228: ST_TO_ADDR
// if value < 0 then
76229: LD_VAR 0 1
76233: PUSH
76234: LD_INT 0
76236: LESS
76237: IFFALSE 76254
// result := value * - 1 ;
76239: LD_ADDR_VAR 0 2
76243: PUSH
76244: LD_VAR 0 1
76248: PUSH
76249: LD_INT 1
76251: NEG
76252: MUL
76253: ST_TO_ADDR
// end ;
76254: LD_VAR 0 2
76258: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76259: LD_INT 0
76261: PPUSH
76262: PPUSH
76263: PPUSH
76264: PPUSH
76265: PPUSH
76266: PPUSH
76267: PPUSH
76268: PPUSH
// if not unit or not building then
76269: LD_VAR 0 1
76273: NOT
76274: PUSH
76275: LD_VAR 0 2
76279: NOT
76280: OR
76281: IFFALSE 76285
// exit ;
76283: GO 76511
// x := GetX ( building ) ;
76285: LD_ADDR_VAR 0 4
76289: PUSH
76290: LD_VAR 0 2
76294: PPUSH
76295: CALL_OW 250
76299: ST_TO_ADDR
// y := GetY ( building ) ;
76300: LD_ADDR_VAR 0 6
76304: PUSH
76305: LD_VAR 0 2
76309: PPUSH
76310: CALL_OW 251
76314: ST_TO_ADDR
// d := GetDir ( building ) ;
76315: LD_ADDR_VAR 0 8
76319: PUSH
76320: LD_VAR 0 2
76324: PPUSH
76325: CALL_OW 254
76329: ST_TO_ADDR
// r := 4 ;
76330: LD_ADDR_VAR 0 9
76334: PUSH
76335: LD_INT 4
76337: ST_TO_ADDR
// for i := 1 to 5 do
76338: LD_ADDR_VAR 0 10
76342: PUSH
76343: DOUBLE
76344: LD_INT 1
76346: DEC
76347: ST_TO_ADDR
76348: LD_INT 5
76350: PUSH
76351: FOR_TO
76352: IFFALSE 76509
// begin _x := ShiftX ( x , d , r + i ) ;
76354: LD_ADDR_VAR 0 5
76358: PUSH
76359: LD_VAR 0 4
76363: PPUSH
76364: LD_VAR 0 8
76368: PPUSH
76369: LD_VAR 0 9
76373: PUSH
76374: LD_VAR 0 10
76378: PLUS
76379: PPUSH
76380: CALL_OW 272
76384: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76385: LD_ADDR_VAR 0 7
76389: PUSH
76390: LD_VAR 0 6
76394: PPUSH
76395: LD_VAR 0 8
76399: PPUSH
76400: LD_VAR 0 9
76404: PUSH
76405: LD_VAR 0 10
76409: PLUS
76410: PPUSH
76411: CALL_OW 273
76415: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76416: LD_VAR 0 5
76420: PPUSH
76421: LD_VAR 0 7
76425: PPUSH
76426: CALL_OW 488
76430: PUSH
76431: LD_VAR 0 5
76435: PPUSH
76436: LD_VAR 0 7
76440: PPUSH
76441: CALL_OW 428
76445: PPUSH
76446: CALL_OW 247
76450: PUSH
76451: LD_INT 3
76453: PUSH
76454: LD_INT 2
76456: PUSH
76457: EMPTY
76458: LIST
76459: LIST
76460: IN
76461: NOT
76462: AND
76463: IFFALSE 76507
// begin ComMoveXY ( unit , _x , _y ) ;
76465: LD_VAR 0 1
76469: PPUSH
76470: LD_VAR 0 5
76474: PPUSH
76475: LD_VAR 0 7
76479: PPUSH
76480: CALL_OW 111
// result := [ _x , _y ] ;
76484: LD_ADDR_VAR 0 3
76488: PUSH
76489: LD_VAR 0 5
76493: PUSH
76494: LD_VAR 0 7
76498: PUSH
76499: EMPTY
76500: LIST
76501: LIST
76502: ST_TO_ADDR
// exit ;
76503: POP
76504: POP
76505: GO 76511
// end ; end ;
76507: GO 76351
76509: POP
76510: POP
// end ;
76511: LD_VAR 0 3
76515: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76516: LD_INT 0
76518: PPUSH
76519: PPUSH
76520: PPUSH
// result := 0 ;
76521: LD_ADDR_VAR 0 3
76525: PUSH
76526: LD_INT 0
76528: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76529: LD_VAR 0 1
76533: PUSH
76534: LD_INT 0
76536: LESS
76537: PUSH
76538: LD_VAR 0 1
76542: PUSH
76543: LD_INT 8
76545: GREATER
76546: OR
76547: PUSH
76548: LD_VAR 0 2
76552: PUSH
76553: LD_INT 0
76555: LESS
76556: OR
76557: PUSH
76558: LD_VAR 0 2
76562: PUSH
76563: LD_INT 8
76565: GREATER
76566: OR
76567: IFFALSE 76571
// exit ;
76569: GO 76646
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76571: LD_ADDR_VAR 0 4
76575: PUSH
76576: LD_INT 22
76578: PUSH
76579: LD_VAR 0 2
76583: PUSH
76584: EMPTY
76585: LIST
76586: LIST
76587: PPUSH
76588: CALL_OW 69
76592: PUSH
76593: FOR_IN
76594: IFFALSE 76644
// begin un := UnitShoot ( i ) ;
76596: LD_ADDR_VAR 0 5
76600: PUSH
76601: LD_VAR 0 4
76605: PPUSH
76606: CALL_OW 504
76610: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76611: LD_VAR 0 5
76615: PPUSH
76616: CALL_OW 255
76620: PUSH
76621: LD_VAR 0 1
76625: EQUAL
76626: IFFALSE 76642
// begin result := un ;
76628: LD_ADDR_VAR 0 3
76632: PUSH
76633: LD_VAR 0 5
76637: ST_TO_ADDR
// exit ;
76638: POP
76639: POP
76640: GO 76646
// end ; end ;
76642: GO 76593
76644: POP
76645: POP
// end ;
76646: LD_VAR 0 3
76650: RET
// export function GetCargoBay ( units ) ; begin
76651: LD_INT 0
76653: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76654: LD_ADDR_VAR 0 2
76658: PUSH
76659: LD_VAR 0 1
76663: PPUSH
76664: LD_INT 2
76666: PUSH
76667: LD_INT 34
76669: PUSH
76670: LD_INT 12
76672: PUSH
76673: EMPTY
76674: LIST
76675: LIST
76676: PUSH
76677: LD_INT 34
76679: PUSH
76680: LD_INT 51
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: PUSH
76687: LD_INT 34
76689: PUSH
76690: LD_INT 32
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: PUSH
76697: LD_INT 34
76699: PUSH
76700: LD_INT 89
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: LIST
76713: PPUSH
76714: CALL_OW 72
76718: ST_TO_ADDR
// end ;
76719: LD_VAR 0 2
76723: RET
// export function Negate ( value ) ; begin
76724: LD_INT 0
76726: PPUSH
// result := not value ;
76727: LD_ADDR_VAR 0 2
76731: PUSH
76732: LD_VAR 0 1
76736: NOT
76737: ST_TO_ADDR
// end ;
76738: LD_VAR 0 2
76742: RET
// export function Inc ( value ) ; begin
76743: LD_INT 0
76745: PPUSH
// result := value + 1 ;
76746: LD_ADDR_VAR 0 2
76750: PUSH
76751: LD_VAR 0 1
76755: PUSH
76756: LD_INT 1
76758: PLUS
76759: ST_TO_ADDR
// end ;
76760: LD_VAR 0 2
76764: RET
// export function Dec ( value ) ; begin
76765: LD_INT 0
76767: PPUSH
// result := value - 1 ;
76768: LD_ADDR_VAR 0 2
76772: PUSH
76773: LD_VAR 0 1
76777: PUSH
76778: LD_INT 1
76780: MINUS
76781: ST_TO_ADDR
// end ;
76782: LD_VAR 0 2
76786: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76787: LD_INT 0
76789: PPUSH
76790: PPUSH
76791: PPUSH
76792: PPUSH
76793: PPUSH
76794: PPUSH
76795: PPUSH
76796: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76797: LD_VAR 0 1
76801: PPUSH
76802: LD_VAR 0 2
76806: PPUSH
76807: CALL_OW 488
76811: NOT
76812: PUSH
76813: LD_VAR 0 3
76817: PPUSH
76818: LD_VAR 0 4
76822: PPUSH
76823: CALL_OW 488
76827: NOT
76828: OR
76829: IFFALSE 76842
// begin result := - 1 ;
76831: LD_ADDR_VAR 0 5
76835: PUSH
76836: LD_INT 1
76838: NEG
76839: ST_TO_ADDR
// exit ;
76840: GO 77077
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76842: LD_ADDR_VAR 0 12
76846: PUSH
76847: LD_VAR 0 1
76851: PPUSH
76852: LD_VAR 0 2
76856: PPUSH
76857: LD_VAR 0 3
76861: PPUSH
76862: LD_VAR 0 4
76866: PPUSH
76867: CALL 75927 0 4
76871: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76872: LD_ADDR_VAR 0 11
76876: PUSH
76877: LD_VAR 0 1
76881: PPUSH
76882: LD_VAR 0 2
76886: PPUSH
76887: LD_VAR 0 12
76891: PUSH
76892: LD_INT 1
76894: ARRAY
76895: PPUSH
76896: LD_VAR 0 12
76900: PUSH
76901: LD_INT 2
76903: ARRAY
76904: PPUSH
76905: CALL_OW 298
76909: ST_TO_ADDR
// distance := 9999 ;
76910: LD_ADDR_VAR 0 10
76914: PUSH
76915: LD_INT 9999
76917: ST_TO_ADDR
// for i := 0 to 5 do
76918: LD_ADDR_VAR 0 6
76922: PUSH
76923: DOUBLE
76924: LD_INT 0
76926: DEC
76927: ST_TO_ADDR
76928: LD_INT 5
76930: PUSH
76931: FOR_TO
76932: IFFALSE 77075
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76934: LD_ADDR_VAR 0 7
76938: PUSH
76939: LD_VAR 0 1
76943: PPUSH
76944: LD_VAR 0 6
76948: PPUSH
76949: LD_VAR 0 11
76953: PPUSH
76954: CALL_OW 272
76958: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76959: LD_ADDR_VAR 0 8
76963: PUSH
76964: LD_VAR 0 2
76968: PPUSH
76969: LD_VAR 0 6
76973: PPUSH
76974: LD_VAR 0 11
76978: PPUSH
76979: CALL_OW 273
76983: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76984: LD_VAR 0 7
76988: PPUSH
76989: LD_VAR 0 8
76993: PPUSH
76994: CALL_OW 488
76998: NOT
76999: IFFALSE 77003
// continue ;
77001: GO 76931
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77003: LD_ADDR_VAR 0 9
77007: PUSH
77008: LD_VAR 0 12
77012: PUSH
77013: LD_INT 1
77015: ARRAY
77016: PPUSH
77017: LD_VAR 0 12
77021: PUSH
77022: LD_INT 2
77024: ARRAY
77025: PPUSH
77026: LD_VAR 0 7
77030: PPUSH
77031: LD_VAR 0 8
77035: PPUSH
77036: CALL_OW 298
77040: ST_TO_ADDR
// if tmp < distance then
77041: LD_VAR 0 9
77045: PUSH
77046: LD_VAR 0 10
77050: LESS
77051: IFFALSE 77073
// begin result := i ;
77053: LD_ADDR_VAR 0 5
77057: PUSH
77058: LD_VAR 0 6
77062: ST_TO_ADDR
// distance := tmp ;
77063: LD_ADDR_VAR 0 10
77067: PUSH
77068: LD_VAR 0 9
77072: ST_TO_ADDR
// end ; end ;
77073: GO 76931
77075: POP
77076: POP
// end ;
77077: LD_VAR 0 5
77081: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77082: LD_INT 0
77084: PPUSH
77085: PPUSH
// if not driver or not IsInUnit ( driver ) then
77086: LD_VAR 0 1
77090: NOT
77091: PUSH
77092: LD_VAR 0 1
77096: PPUSH
77097: CALL_OW 310
77101: NOT
77102: OR
77103: IFFALSE 77107
// exit ;
77105: GO 77197
// vehicle := IsInUnit ( driver ) ;
77107: LD_ADDR_VAR 0 3
77111: PUSH
77112: LD_VAR 0 1
77116: PPUSH
77117: CALL_OW 310
77121: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77122: LD_VAR 0 1
77126: PPUSH
77127: LD_STRING \
77129: PUSH
77130: LD_INT 0
77132: PUSH
77133: LD_INT 0
77135: PUSH
77136: LD_INT 0
77138: PUSH
77139: LD_INT 0
77141: PUSH
77142: LD_INT 0
77144: PUSH
77145: LD_INT 0
77147: PUSH
77148: EMPTY
77149: LIST
77150: LIST
77151: LIST
77152: LIST
77153: LIST
77154: LIST
77155: LIST
77156: PUSH
77157: LD_STRING E
77159: PUSH
77160: LD_INT 0
77162: PUSH
77163: LD_INT 0
77165: PUSH
77166: LD_VAR 0 3
77170: PUSH
77171: LD_INT 0
77173: PUSH
77174: LD_INT 0
77176: PUSH
77177: LD_INT 0
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: PPUSH
77193: CALL_OW 446
// end ;
77197: LD_VAR 0 2
77201: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77202: LD_INT 0
77204: PPUSH
77205: PPUSH
// if not driver or not IsInUnit ( driver ) then
77206: LD_VAR 0 1
77210: NOT
77211: PUSH
77212: LD_VAR 0 1
77216: PPUSH
77217: CALL_OW 310
77221: NOT
77222: OR
77223: IFFALSE 77227
// exit ;
77225: GO 77317
// vehicle := IsInUnit ( driver ) ;
77227: LD_ADDR_VAR 0 3
77231: PUSH
77232: LD_VAR 0 1
77236: PPUSH
77237: CALL_OW 310
77241: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77242: LD_VAR 0 1
77246: PPUSH
77247: LD_STRING \
77249: PUSH
77250: LD_INT 0
77252: PUSH
77253: LD_INT 0
77255: PUSH
77256: LD_INT 0
77258: PUSH
77259: LD_INT 0
77261: PUSH
77262: LD_INT 0
77264: PUSH
77265: LD_INT 0
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: LIST
77272: LIST
77273: LIST
77274: LIST
77275: LIST
77276: PUSH
77277: LD_STRING E
77279: PUSH
77280: LD_INT 0
77282: PUSH
77283: LD_INT 0
77285: PUSH
77286: LD_VAR 0 3
77290: PUSH
77291: LD_INT 0
77293: PUSH
77294: LD_INT 0
77296: PUSH
77297: LD_INT 0
77299: PUSH
77300: EMPTY
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: PPUSH
77313: CALL_OW 447
// end ;
77317: LD_VAR 0 2
77321: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77322: LD_INT 0
77324: PPUSH
77325: PPUSH
77326: PPUSH
// tmp := [ ] ;
77327: LD_ADDR_VAR 0 5
77331: PUSH
77332: EMPTY
77333: ST_TO_ADDR
// for i in units do
77334: LD_ADDR_VAR 0 4
77338: PUSH
77339: LD_VAR 0 1
77343: PUSH
77344: FOR_IN
77345: IFFALSE 77383
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77347: LD_ADDR_VAR 0 5
77351: PUSH
77352: LD_VAR 0 5
77356: PPUSH
77357: LD_VAR 0 5
77361: PUSH
77362: LD_INT 1
77364: PLUS
77365: PPUSH
77366: LD_VAR 0 4
77370: PPUSH
77371: CALL_OW 256
77375: PPUSH
77376: CALL_OW 2
77380: ST_TO_ADDR
77381: GO 77344
77383: POP
77384: POP
// if not tmp then
77385: LD_VAR 0 5
77389: NOT
77390: IFFALSE 77394
// exit ;
77392: GO 77442
// if asc then
77394: LD_VAR 0 2
77398: IFFALSE 77422
// result := SortListByListAsc ( units , tmp ) else
77400: LD_ADDR_VAR 0 3
77404: PUSH
77405: LD_VAR 0 1
77409: PPUSH
77410: LD_VAR 0 5
77414: PPUSH
77415: CALL_OW 76
77419: ST_TO_ADDR
77420: GO 77442
// result := SortListByListDesc ( units , tmp ) ;
77422: LD_ADDR_VAR 0 3
77426: PUSH
77427: LD_VAR 0 1
77431: PPUSH
77432: LD_VAR 0 5
77436: PPUSH
77437: CALL_OW 77
77441: ST_TO_ADDR
// end ;
77442: LD_VAR 0 3
77446: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77447: LD_INT 0
77449: PPUSH
77450: PPUSH
// task := GetTaskList ( mech ) ;
77451: LD_ADDR_VAR 0 4
77455: PUSH
77456: LD_VAR 0 1
77460: PPUSH
77461: CALL_OW 437
77465: ST_TO_ADDR
// if not task then
77466: LD_VAR 0 4
77470: NOT
77471: IFFALSE 77475
// exit ;
77473: GO 77517
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77475: LD_ADDR_VAR 0 3
77479: PUSH
77480: LD_VAR 0 4
77484: PUSH
77485: LD_INT 1
77487: ARRAY
77488: PUSH
77489: LD_INT 1
77491: ARRAY
77492: PUSH
77493: LD_STRING r
77495: EQUAL
77496: PUSH
77497: LD_VAR 0 4
77501: PUSH
77502: LD_INT 1
77504: ARRAY
77505: PUSH
77506: LD_INT 4
77508: ARRAY
77509: PUSH
77510: LD_VAR 0 2
77514: EQUAL
77515: AND
77516: ST_TO_ADDR
// end ;
77517: LD_VAR 0 3
77521: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77522: LD_INT 0
77524: PPUSH
// SetDir ( unit , d ) ;
77525: LD_VAR 0 1
77529: PPUSH
77530: LD_VAR 0 4
77534: PPUSH
77535: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77539: LD_VAR 0 1
77543: PPUSH
77544: LD_VAR 0 2
77548: PPUSH
77549: LD_VAR 0 3
77553: PPUSH
77554: LD_VAR 0 5
77558: PPUSH
77559: CALL_OW 48
// end ;
77563: LD_VAR 0 6
77567: RET
// export function ToNaturalNumber ( number ) ; begin
77568: LD_INT 0
77570: PPUSH
// result := number div 1 ;
77571: LD_ADDR_VAR 0 2
77575: PUSH
77576: LD_VAR 0 1
77580: PUSH
77581: LD_INT 1
77583: DIV
77584: ST_TO_ADDR
// if number < 0 then
77585: LD_VAR 0 1
77589: PUSH
77590: LD_INT 0
77592: LESS
77593: IFFALSE 77603
// result := 0 ;
77595: LD_ADDR_VAR 0 2
77599: PUSH
77600: LD_INT 0
77602: ST_TO_ADDR
// end ;
77603: LD_VAR 0 2
77607: RET
// export function SortByClass ( units , class ) ; var un ; begin
77608: LD_INT 0
77610: PPUSH
77611: PPUSH
// if not units or not class then
77612: LD_VAR 0 1
77616: NOT
77617: PUSH
77618: LD_VAR 0 2
77622: NOT
77623: OR
77624: IFFALSE 77628
// exit ;
77626: GO 77723
// result := [ ] ;
77628: LD_ADDR_VAR 0 3
77632: PUSH
77633: EMPTY
77634: ST_TO_ADDR
// for un in units do
77635: LD_ADDR_VAR 0 4
77639: PUSH
77640: LD_VAR 0 1
77644: PUSH
77645: FOR_IN
77646: IFFALSE 77721
// if GetClass ( un ) = class then
77648: LD_VAR 0 4
77652: PPUSH
77653: CALL_OW 257
77657: PUSH
77658: LD_VAR 0 2
77662: EQUAL
77663: IFFALSE 77690
// result := Insert ( result , 1 , un ) else
77665: LD_ADDR_VAR 0 3
77669: PUSH
77670: LD_VAR 0 3
77674: PPUSH
77675: LD_INT 1
77677: PPUSH
77678: LD_VAR 0 4
77682: PPUSH
77683: CALL_OW 2
77687: ST_TO_ADDR
77688: GO 77719
// result := Replace ( result , result + 1 , un ) ;
77690: LD_ADDR_VAR 0 3
77694: PUSH
77695: LD_VAR 0 3
77699: PPUSH
77700: LD_VAR 0 3
77704: PUSH
77705: LD_INT 1
77707: PLUS
77708: PPUSH
77709: LD_VAR 0 4
77713: PPUSH
77714: CALL_OW 1
77718: ST_TO_ADDR
77719: GO 77645
77721: POP
77722: POP
// end ;
77723: LD_VAR 0 3
77727: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77728: LD_INT 0
77730: PPUSH
77731: PPUSH
77732: PPUSH
77733: PPUSH
77734: PPUSH
77735: PPUSH
77736: PPUSH
// result := [ ] ;
77737: LD_ADDR_VAR 0 4
77741: PUSH
77742: EMPTY
77743: ST_TO_ADDR
// if x - r < 0 then
77744: LD_VAR 0 1
77748: PUSH
77749: LD_VAR 0 3
77753: MINUS
77754: PUSH
77755: LD_INT 0
77757: LESS
77758: IFFALSE 77770
// min_x := 0 else
77760: LD_ADDR_VAR 0 8
77764: PUSH
77765: LD_INT 0
77767: ST_TO_ADDR
77768: GO 77786
// min_x := x - r ;
77770: LD_ADDR_VAR 0 8
77774: PUSH
77775: LD_VAR 0 1
77779: PUSH
77780: LD_VAR 0 3
77784: MINUS
77785: ST_TO_ADDR
// if y - r < 0 then
77786: LD_VAR 0 2
77790: PUSH
77791: LD_VAR 0 3
77795: MINUS
77796: PUSH
77797: LD_INT 0
77799: LESS
77800: IFFALSE 77812
// min_y := 0 else
77802: LD_ADDR_VAR 0 7
77806: PUSH
77807: LD_INT 0
77809: ST_TO_ADDR
77810: GO 77828
// min_y := y - r ;
77812: LD_ADDR_VAR 0 7
77816: PUSH
77817: LD_VAR 0 2
77821: PUSH
77822: LD_VAR 0 3
77826: MINUS
77827: ST_TO_ADDR
// max_x := x + r ;
77828: LD_ADDR_VAR 0 9
77832: PUSH
77833: LD_VAR 0 1
77837: PUSH
77838: LD_VAR 0 3
77842: PLUS
77843: ST_TO_ADDR
// max_y := y + r ;
77844: LD_ADDR_VAR 0 10
77848: PUSH
77849: LD_VAR 0 2
77853: PUSH
77854: LD_VAR 0 3
77858: PLUS
77859: ST_TO_ADDR
// for _x = min_x to max_x do
77860: LD_ADDR_VAR 0 5
77864: PUSH
77865: DOUBLE
77866: LD_VAR 0 8
77870: DEC
77871: ST_TO_ADDR
77872: LD_VAR 0 9
77876: PUSH
77877: FOR_TO
77878: IFFALSE 77979
// for _y = min_y to max_y do
77880: LD_ADDR_VAR 0 6
77884: PUSH
77885: DOUBLE
77886: LD_VAR 0 7
77890: DEC
77891: ST_TO_ADDR
77892: LD_VAR 0 10
77896: PUSH
77897: FOR_TO
77898: IFFALSE 77975
// begin if not ValidHex ( _x , _y ) then
77900: LD_VAR 0 5
77904: PPUSH
77905: LD_VAR 0 6
77909: PPUSH
77910: CALL_OW 488
77914: NOT
77915: IFFALSE 77919
// continue ;
77917: GO 77897
// if GetResourceTypeXY ( _x , _y ) then
77919: LD_VAR 0 5
77923: PPUSH
77924: LD_VAR 0 6
77928: PPUSH
77929: CALL_OW 283
77933: IFFALSE 77973
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77935: LD_ADDR_VAR 0 4
77939: PUSH
77940: LD_VAR 0 4
77944: PPUSH
77945: LD_VAR 0 4
77949: PUSH
77950: LD_INT 1
77952: PLUS
77953: PPUSH
77954: LD_VAR 0 5
77958: PUSH
77959: LD_VAR 0 6
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PPUSH
77968: CALL_OW 1
77972: ST_TO_ADDR
// end ;
77973: GO 77897
77975: POP
77976: POP
77977: GO 77877
77979: POP
77980: POP
// end ;
77981: LD_VAR 0 4
77985: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77986: LD_INT 0
77988: PPUSH
77989: PPUSH
77990: PPUSH
77991: PPUSH
77992: PPUSH
77993: PPUSH
77994: PPUSH
77995: PPUSH
// if not units then
77996: LD_VAR 0 1
78000: NOT
78001: IFFALSE 78005
// exit ;
78003: GO 78529
// result := UnitFilter ( units , [ f_ok ] ) ;
78005: LD_ADDR_VAR 0 3
78009: PUSH
78010: LD_VAR 0 1
78014: PPUSH
78015: LD_INT 50
78017: PUSH
78018: EMPTY
78019: LIST
78020: PPUSH
78021: CALL_OW 72
78025: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78026: LD_ADDR_VAR 0 8
78030: PUSH
78031: LD_VAR 0 1
78035: PUSH
78036: LD_INT 1
78038: ARRAY
78039: PPUSH
78040: CALL_OW 255
78044: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78045: LD_ADDR_VAR 0 10
78049: PUSH
78050: LD_INT 29
78052: PUSH
78053: LD_INT 91
78055: PUSH
78056: LD_INT 49
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: LIST
78063: ST_TO_ADDR
// if not result then
78064: LD_VAR 0 3
78068: NOT
78069: IFFALSE 78073
// exit ;
78071: GO 78529
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78073: LD_ADDR_VAR 0 5
78077: PUSH
78078: LD_INT 81
78080: PUSH
78081: LD_VAR 0 8
78085: PUSH
78086: EMPTY
78087: LIST
78088: LIST
78089: PPUSH
78090: CALL_OW 69
78094: ST_TO_ADDR
// for i in result do
78095: LD_ADDR_VAR 0 4
78099: PUSH
78100: LD_VAR 0 3
78104: PUSH
78105: FOR_IN
78106: IFFALSE 78527
// begin tag := GetTag ( i ) + 1 ;
78108: LD_ADDR_VAR 0 9
78112: PUSH
78113: LD_VAR 0 4
78117: PPUSH
78118: CALL_OW 110
78122: PUSH
78123: LD_INT 1
78125: PLUS
78126: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78127: LD_ADDR_VAR 0 7
78131: PUSH
78132: LD_VAR 0 4
78136: PPUSH
78137: CALL_OW 250
78141: PPUSH
78142: LD_VAR 0 4
78146: PPUSH
78147: CALL_OW 251
78151: PPUSH
78152: LD_INT 6
78154: PPUSH
78155: CALL 77728 0 3
78159: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78160: LD_VAR 0 4
78164: PPUSH
78165: CALL_OW 247
78169: PUSH
78170: LD_INT 2
78172: EQUAL
78173: PUSH
78174: LD_VAR 0 7
78178: AND
78179: PUSH
78180: LD_VAR 0 4
78184: PPUSH
78185: CALL_OW 264
78189: PUSH
78190: LD_VAR 0 10
78194: IN
78195: NOT
78196: AND
78197: IFFALSE 78236
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78199: LD_VAR 0 4
78203: PPUSH
78204: LD_VAR 0 7
78208: PUSH
78209: LD_INT 1
78211: ARRAY
78212: PUSH
78213: LD_INT 1
78215: ARRAY
78216: PPUSH
78217: LD_VAR 0 7
78221: PUSH
78222: LD_INT 1
78224: ARRAY
78225: PUSH
78226: LD_INT 2
78228: ARRAY
78229: PPUSH
78230: CALL_OW 116
78234: GO 78525
// if path > tag then
78236: LD_VAR 0 2
78240: PUSH
78241: LD_VAR 0 9
78245: GREATER
78246: IFFALSE 78454
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78248: LD_ADDR_VAR 0 6
78252: PUSH
78253: LD_VAR 0 5
78257: PPUSH
78258: LD_INT 91
78260: PUSH
78261: LD_VAR 0 4
78265: PUSH
78266: LD_INT 8
78268: PUSH
78269: EMPTY
78270: LIST
78271: LIST
78272: LIST
78273: PPUSH
78274: CALL_OW 72
78278: ST_TO_ADDR
// if nearEnemy then
78279: LD_VAR 0 6
78283: IFFALSE 78352
// begin if GetWeapon ( i ) = ru_time_lapser then
78285: LD_VAR 0 4
78289: PPUSH
78290: CALL_OW 264
78294: PUSH
78295: LD_INT 49
78297: EQUAL
78298: IFFALSE 78326
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78300: LD_VAR 0 4
78304: PPUSH
78305: LD_VAR 0 6
78309: PPUSH
78310: LD_VAR 0 4
78314: PPUSH
78315: CALL_OW 74
78319: PPUSH
78320: CALL_OW 112
78324: GO 78350
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78326: LD_VAR 0 4
78330: PPUSH
78331: LD_VAR 0 6
78335: PPUSH
78336: LD_VAR 0 4
78340: PPUSH
78341: CALL_OW 74
78345: PPUSH
78346: CALL_OW 115
// end else
78350: GO 78452
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78352: LD_VAR 0 4
78356: PPUSH
78357: LD_VAR 0 2
78361: PUSH
78362: LD_VAR 0 9
78366: ARRAY
78367: PUSH
78368: LD_INT 1
78370: ARRAY
78371: PPUSH
78372: LD_VAR 0 2
78376: PUSH
78377: LD_VAR 0 9
78381: ARRAY
78382: PUSH
78383: LD_INT 2
78385: ARRAY
78386: PPUSH
78387: CALL_OW 297
78391: PUSH
78392: LD_INT 6
78394: GREATER
78395: IFFALSE 78438
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78397: LD_VAR 0 4
78401: PPUSH
78402: LD_VAR 0 2
78406: PUSH
78407: LD_VAR 0 9
78411: ARRAY
78412: PUSH
78413: LD_INT 1
78415: ARRAY
78416: PPUSH
78417: LD_VAR 0 2
78421: PUSH
78422: LD_VAR 0 9
78426: ARRAY
78427: PUSH
78428: LD_INT 2
78430: ARRAY
78431: PPUSH
78432: CALL_OW 114
78436: GO 78452
// SetTag ( i , tag ) ;
78438: LD_VAR 0 4
78442: PPUSH
78443: LD_VAR 0 9
78447: PPUSH
78448: CALL_OW 109
// end else
78452: GO 78525
// if enemy then
78454: LD_VAR 0 5
78458: IFFALSE 78525
// begin if GetWeapon ( i ) = ru_time_lapser then
78460: LD_VAR 0 4
78464: PPUSH
78465: CALL_OW 264
78469: PUSH
78470: LD_INT 49
78472: EQUAL
78473: IFFALSE 78501
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78475: LD_VAR 0 4
78479: PPUSH
78480: LD_VAR 0 5
78484: PPUSH
78485: LD_VAR 0 4
78489: PPUSH
78490: CALL_OW 74
78494: PPUSH
78495: CALL_OW 112
78499: GO 78525
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78501: LD_VAR 0 4
78505: PPUSH
78506: LD_VAR 0 5
78510: PPUSH
78511: LD_VAR 0 4
78515: PPUSH
78516: CALL_OW 74
78520: PPUSH
78521: CALL_OW 115
// end ; end ;
78525: GO 78105
78527: POP
78528: POP
// end ;
78529: LD_VAR 0 3
78533: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78534: LD_INT 0
78536: PPUSH
78537: PPUSH
78538: PPUSH
// if not unit or IsInUnit ( unit ) then
78539: LD_VAR 0 1
78543: NOT
78544: PUSH
78545: LD_VAR 0 1
78549: PPUSH
78550: CALL_OW 310
78554: OR
78555: IFFALSE 78559
// exit ;
78557: GO 78650
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78559: LD_ADDR_VAR 0 4
78563: PUSH
78564: LD_VAR 0 1
78568: PPUSH
78569: CALL_OW 250
78573: PPUSH
78574: LD_VAR 0 2
78578: PPUSH
78579: LD_INT 1
78581: PPUSH
78582: CALL_OW 272
78586: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78587: LD_ADDR_VAR 0 5
78591: PUSH
78592: LD_VAR 0 1
78596: PPUSH
78597: CALL_OW 251
78601: PPUSH
78602: LD_VAR 0 2
78606: PPUSH
78607: LD_INT 1
78609: PPUSH
78610: CALL_OW 273
78614: ST_TO_ADDR
// if ValidHex ( x , y ) then
78615: LD_VAR 0 4
78619: PPUSH
78620: LD_VAR 0 5
78624: PPUSH
78625: CALL_OW 488
78629: IFFALSE 78650
// ComTurnXY ( unit , x , y ) ;
78631: LD_VAR 0 1
78635: PPUSH
78636: LD_VAR 0 4
78640: PPUSH
78641: LD_VAR 0 5
78645: PPUSH
78646: CALL_OW 118
// end ;
78650: LD_VAR 0 3
78654: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78655: LD_INT 0
78657: PPUSH
78658: PPUSH
// result := false ;
78659: LD_ADDR_VAR 0 3
78663: PUSH
78664: LD_INT 0
78666: ST_TO_ADDR
// if not units then
78667: LD_VAR 0 2
78671: NOT
78672: IFFALSE 78676
// exit ;
78674: GO 78721
// for i in units do
78676: LD_ADDR_VAR 0 4
78680: PUSH
78681: LD_VAR 0 2
78685: PUSH
78686: FOR_IN
78687: IFFALSE 78719
// if See ( side , i ) then
78689: LD_VAR 0 1
78693: PPUSH
78694: LD_VAR 0 4
78698: PPUSH
78699: CALL_OW 292
78703: IFFALSE 78717
// begin result := true ;
78705: LD_ADDR_VAR 0 3
78709: PUSH
78710: LD_INT 1
78712: ST_TO_ADDR
// exit ;
78713: POP
78714: POP
78715: GO 78721
// end ;
78717: GO 78686
78719: POP
78720: POP
// end ;
78721: LD_VAR 0 3
78725: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78726: LD_INT 0
78728: PPUSH
78729: PPUSH
78730: PPUSH
78731: PPUSH
// if not unit or not points then
78732: LD_VAR 0 1
78736: NOT
78737: PUSH
78738: LD_VAR 0 2
78742: NOT
78743: OR
78744: IFFALSE 78748
// exit ;
78746: GO 78838
// dist := 99999 ;
78748: LD_ADDR_VAR 0 5
78752: PUSH
78753: LD_INT 99999
78755: ST_TO_ADDR
// for i in points do
78756: LD_ADDR_VAR 0 4
78760: PUSH
78761: LD_VAR 0 2
78765: PUSH
78766: FOR_IN
78767: IFFALSE 78836
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78769: LD_ADDR_VAR 0 6
78773: PUSH
78774: LD_VAR 0 1
78778: PPUSH
78779: LD_VAR 0 4
78783: PUSH
78784: LD_INT 1
78786: ARRAY
78787: PPUSH
78788: LD_VAR 0 4
78792: PUSH
78793: LD_INT 2
78795: ARRAY
78796: PPUSH
78797: CALL_OW 297
78801: ST_TO_ADDR
// if tmpDist < dist then
78802: LD_VAR 0 6
78806: PUSH
78807: LD_VAR 0 5
78811: LESS
78812: IFFALSE 78834
// begin result := i ;
78814: LD_ADDR_VAR 0 3
78818: PUSH
78819: LD_VAR 0 4
78823: ST_TO_ADDR
// dist := tmpDist ;
78824: LD_ADDR_VAR 0 5
78828: PUSH
78829: LD_VAR 0 6
78833: ST_TO_ADDR
// end ; end ;
78834: GO 78766
78836: POP
78837: POP
// end ;
78838: LD_VAR 0 3
78842: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78843: LD_INT 0
78845: PPUSH
// uc_side := side ;
78846: LD_ADDR_OWVAR 20
78850: PUSH
78851: LD_VAR 0 1
78855: ST_TO_ADDR
// uc_nation := 3 ;
78856: LD_ADDR_OWVAR 21
78860: PUSH
78861: LD_INT 3
78863: ST_TO_ADDR
// vc_chassis := 25 ;
78864: LD_ADDR_OWVAR 37
78868: PUSH
78869: LD_INT 25
78871: ST_TO_ADDR
// vc_engine := engine_siberite ;
78872: LD_ADDR_OWVAR 39
78876: PUSH
78877: LD_INT 3
78879: ST_TO_ADDR
// vc_control := control_computer ;
78880: LD_ADDR_OWVAR 38
78884: PUSH
78885: LD_INT 3
78887: ST_TO_ADDR
// vc_weapon := 59 ;
78888: LD_ADDR_OWVAR 40
78892: PUSH
78893: LD_INT 59
78895: ST_TO_ADDR
// result := CreateVehicle ;
78896: LD_ADDR_VAR 0 5
78900: PUSH
78901: CALL_OW 45
78905: ST_TO_ADDR
// SetDir ( result , d ) ;
78906: LD_VAR 0 5
78910: PPUSH
78911: LD_VAR 0 4
78915: PPUSH
78916: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78920: LD_VAR 0 5
78924: PPUSH
78925: LD_VAR 0 2
78929: PPUSH
78930: LD_VAR 0 3
78934: PPUSH
78935: LD_INT 0
78937: PPUSH
78938: CALL_OW 48
// end ;
78942: LD_VAR 0 5
78946: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78947: LD_INT 0
78949: PPUSH
78950: PPUSH
78951: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78952: LD_ADDR_VAR 0 2
78956: PUSH
78957: LD_INT 0
78959: PUSH
78960: LD_INT 0
78962: PUSH
78963: LD_INT 0
78965: PUSH
78966: LD_INT 0
78968: PUSH
78969: EMPTY
78970: LIST
78971: LIST
78972: LIST
78973: LIST
78974: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78975: LD_VAR 0 1
78979: NOT
78980: PUSH
78981: LD_VAR 0 1
78985: PPUSH
78986: CALL_OW 264
78990: PUSH
78991: LD_INT 12
78993: PUSH
78994: LD_INT 51
78996: PUSH
78997: LD_INT 32
78999: PUSH
79000: LD_INT 89
79002: PUSH
79003: EMPTY
79004: LIST
79005: LIST
79006: LIST
79007: LIST
79008: IN
79009: NOT
79010: OR
79011: IFFALSE 79015
// exit ;
79013: GO 79113
// for i := 1 to 3 do
79015: LD_ADDR_VAR 0 3
79019: PUSH
79020: DOUBLE
79021: LD_INT 1
79023: DEC
79024: ST_TO_ADDR
79025: LD_INT 3
79027: PUSH
79028: FOR_TO
79029: IFFALSE 79111
// begin tmp := GetCargo ( cargo , i ) ;
79031: LD_ADDR_VAR 0 4
79035: PUSH
79036: LD_VAR 0 1
79040: PPUSH
79041: LD_VAR 0 3
79045: PPUSH
79046: CALL_OW 289
79050: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79051: LD_ADDR_VAR 0 2
79055: PUSH
79056: LD_VAR 0 2
79060: PPUSH
79061: LD_VAR 0 3
79065: PPUSH
79066: LD_VAR 0 4
79070: PPUSH
79071: CALL_OW 1
79075: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79076: LD_ADDR_VAR 0 2
79080: PUSH
79081: LD_VAR 0 2
79085: PPUSH
79086: LD_INT 4
79088: PPUSH
79089: LD_VAR 0 2
79093: PUSH
79094: LD_INT 4
79096: ARRAY
79097: PUSH
79098: LD_VAR 0 4
79102: PLUS
79103: PPUSH
79104: CALL_OW 1
79108: ST_TO_ADDR
// end ;
79109: GO 79028
79111: POP
79112: POP
// end ;
79113: LD_VAR 0 2
79117: RET
// export function Length ( array ) ; begin
79118: LD_INT 0
79120: PPUSH
// result := array + 0 ;
79121: LD_ADDR_VAR 0 2
79125: PUSH
79126: LD_VAR 0 1
79130: PUSH
79131: LD_INT 0
79133: PLUS
79134: ST_TO_ADDR
// end ;
79135: LD_VAR 0 2
79139: RET
// export function PrepareArray ( array ) ; begin
79140: LD_INT 0
79142: PPUSH
// result := array diff 0 ;
79143: LD_ADDR_VAR 0 2
79147: PUSH
79148: LD_VAR 0 1
79152: PUSH
79153: LD_INT 0
79155: DIFF
79156: ST_TO_ADDR
// if not result [ 1 ] then
79157: LD_VAR 0 2
79161: PUSH
79162: LD_INT 1
79164: ARRAY
79165: NOT
79166: IFFALSE 79186
// result := Delete ( result , 1 ) ;
79168: LD_ADDR_VAR 0 2
79172: PUSH
79173: LD_VAR 0 2
79177: PPUSH
79178: LD_INT 1
79180: PPUSH
79181: CALL_OW 3
79185: ST_TO_ADDR
// end ;
79186: LD_VAR 0 2
79190: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79191: LD_INT 0
79193: PPUSH
79194: PPUSH
79195: PPUSH
79196: PPUSH
// sibRocketRange := 25 ;
79197: LD_ADDR_VAR 0 6
79201: PUSH
79202: LD_INT 25
79204: ST_TO_ADDR
// result := false ;
79205: LD_ADDR_VAR 0 4
79209: PUSH
79210: LD_INT 0
79212: ST_TO_ADDR
// for i := 0 to 5 do
79213: LD_ADDR_VAR 0 5
79217: PUSH
79218: DOUBLE
79219: LD_INT 0
79221: DEC
79222: ST_TO_ADDR
79223: LD_INT 5
79225: PUSH
79226: FOR_TO
79227: IFFALSE 79294
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79229: LD_VAR 0 1
79233: PPUSH
79234: LD_VAR 0 5
79238: PPUSH
79239: LD_VAR 0 6
79243: PPUSH
79244: CALL_OW 272
79248: PPUSH
79249: LD_VAR 0 2
79253: PPUSH
79254: LD_VAR 0 5
79258: PPUSH
79259: LD_VAR 0 6
79263: PPUSH
79264: CALL_OW 273
79268: PPUSH
79269: LD_VAR 0 3
79273: PPUSH
79274: CALL_OW 309
79278: IFFALSE 79292
// begin result := true ;
79280: LD_ADDR_VAR 0 4
79284: PUSH
79285: LD_INT 1
79287: ST_TO_ADDR
// exit ;
79288: POP
79289: POP
79290: GO 79296
// end ;
79292: GO 79226
79294: POP
79295: POP
// end ;
79296: LD_VAR 0 4
79300: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79301: LD_INT 0
79303: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79304: LD_VAR 0 1
79308: PPUSH
79309: LD_VAR 0 2
79313: PPUSH
79314: LD_INT 0
79316: PPUSH
79317: LD_INT 0
79319: PPUSH
79320: LD_INT 1
79322: PPUSH
79323: LD_INT 0
79325: PPUSH
79326: CALL_OW 587
// end ; end_of_file
79330: LD_VAR 0 3
79334: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79335: LD_VAR 0 1
79339: PPUSH
79340: LD_VAR 0 2
79344: PPUSH
79345: LD_VAR 0 3
79349: PPUSH
79350: LD_VAR 0 4
79354: PPUSH
79355: LD_VAR 0 5
79359: PPUSH
79360: LD_VAR 0 6
79364: PPUSH
79365: CALL 17823 0 6
// end ;
79369: PPOPN 6
79371: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79372: LD_INT 0
79374: PPUSH
// begin if not units then
79375: LD_VAR 0 1
79379: NOT
79380: IFFALSE 79384
// exit ;
79382: GO 79384
// end ;
79384: PPOPN 7
79386: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79387: CALL 17727 0 0
// end ;
79391: PPOPN 1
79393: END
