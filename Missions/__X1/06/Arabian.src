Export Heike, Givi, Mike, Ibrahim, Kamil, Kaia, Sophia, Markov, Shariff, Olaf, Omar,
       Kurt, Aviradze, Rolf, arDepot,
       heikeSecondSquad, heikeApes;
Export rolfSquad, omarSquad;
Export Function PrepareArabian;
var i, b, base, hasRadar, hasRemote, hasDrugs, factory, depot, lab, bunkers, tmp;
begin
uc_nation := 2;
uc_side := 5;
Shariff := PrepareUnit('Abdul', false, '');
Omar := PrepareUnit('Omar', false, '');

uc_side := 2;

Heike := PrepareUnit('Heike', (not debug), prefix);
Ibrahim := PrepareUnit('Ibrahim', (not debug), prefix);
Givi := PrepareUnit('Givi', (not debug), prefix);
Kamil := PrepareUnit('Kamil', (not debug), prefix);
Kaia := PrepareUnit('Kaia', (not debug), prefix);
Sophia := PrepareUnit('Sophia', (not debug), prefix);
Markov := PrepareUnit('Markov', (not debug), prefix);
Aviradze := PrepareUnit('Aviradze', (not debug), prefix);
Kurt := PrepareUnit('Kurt', (not debug), prefix);
Mike := PrepareUnit('Mike', (not debug), prefix);
Olaf := PrepareUnit('Olaf', false, '');

heikeSecondSquad := CreateCharacterSet('05_others');
heikeApes := CreateCharacterSet('05_apes');
hasRadar := LoadVariable('05_Radar', debug);
hasRemote := LoadVariable('05_RemoteControl', debug);
hasDrugs := LoadVariable('05_DrugsTested', debug);

if hasDrugs then
   SetTech(tech_StimDrugs, 2, state_researched);

if hasRadar then
   SetTech(tech_radar, 2, state_researched);

if hasRemote then
   SetTech(tech_remCont, 2, state_researched);

// cameras
tmp := AreaToList(camArea, 0);

for i := 1 to tmp[1] do
    if IsEnvironment(tmp[1][i], tmp[2][i]) then
       HiddenCamera(tmp[1][i], tmp[2][i], 2);

base := [];

if debug then
   begin
   base := [
        [b_warehouse, 51, 77, 1, nation_russian, 3, 0, 0, 0],
        // [b_oil_power, 64, 80, 1, nation_russian, 3, 0, 0, 0],
        // [b_oil_power, 61, 73, 2, nation_russian, 3, 0, 0, 0],
        // [b_oil_power, 41, 76, 4, nation_russian, 3, 0, 0, 0],
        // [b_bunker, 52, 67, 3, nation_russian, 3, 0, 0, ru_gatling_gun]
   ];
   end
else if buildingsFromPrev then
   base := buildingsFromPrev;

if base then
   for i := 1 to base do                
       base := Replace(base, i, [base[i][1], base[i][2] + 155, base[i][3] + 3, base[i][4], base[i][5], base[i][6], base[i][7], base[i][8], base[i][9]]);

// prepare base
base := base ^ [
          [b_depot, 206, 80, 1, nation_arabian, 3, 0, 0, 0],
          [b_bunker, 221, 95, 5, nation_arabian, 3, 0, 0, ar_light_gun],
          [b_bunker, 223, 88, 5, nation_arabian, 3, 0, 0, ar_double_machine_gun],
          [b_bunker, 202, 64, 2, nation_arabian, 3, 0, 0, ar_gatling_gun],
          [b_factory, 203, 91, 1, nation_arabian, 3, 0, 0, 0],
          [b_lab_full, 217, 78, 4, nation_arabian, 3, b_lab_weapon, 0, 0],
          [b_solar_power, 220, 99, 1, nation_arabian, 3, 0, 0, 0],
          [b_solar_power, 220, 103, 1, nation_arabian, 3, 0, 0, 0],
          [b_solar_power, 216, 102, 1, nation_arabian, 3, 0, 0, 0],
          [b_ext_gun, 203, 94, 0, nation_arabian, 3, 0, 0, 0],
          [b_ext_stitch, 200, 88, 2, nation_arabian, 3, 0, 0, 0],
          [b_ext_track, 199, 91, 1, nation_arabian, 3, 0, 0, 0],
          [b_oil_power, 197, 81, 1, nation_arabian, 3, 0, 0, 0],
          [b_oil_power, 197, 78, 3, nation_arabian, 3, 0, 0, 0]
        ];

if hasRadar then
   base := Replace(base, base + 1, [b_ext_radar, 203, 87, 3, nation_arabian, 3, 0, 0, 0]);

if hasRemote then
   base := Replace(base, base + 1, [b_ext_radio, 207, 95, 5, nation_arabian, 3, 0, 0, 0]);

for i in base do
    begin
    if HexInfo(i[2], i[3]) then
       continue;

    uc_nation := i[5];

    InitBc;

    bc_type := i[1];
    bc_level := i[6];

    if i[1] = b_lab_full and i[5] = nation_arabian and not i[8] then
       begin
       bc_kind1 := b_lab_weapon;

       if hasRadar then
          bc_kind2 := b_lab_opto
       else
          bc_kind2 := -1;
       end;

    if i[1] in [b_lab_half, b_lab_full] and i[7] then
       bc_kind1 := i[7];

    if i[1] = b_lab_full and i[8] then
       bc_kind1 := i[8];

    b := CreateAndPlaceBuildingXYD(i[2], i[3], i[4]);

    if i[9] then
       PlaceWeaponTurret(b, i[9]);

    if i[1] = b_bunker then
       bunkers := Replace(bunkers, bunkers + 1, b);
    end;

depot := HexInfo(206, 80);
factory := FilterAllUnits([[f_side, 2], [f_btype, b_factory]]);
lab := FilterAllUnits([[f_side, 2], [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]]);
arDepot := depot;

SetResourceType(GetBase(depot), mat_cans, [360, 260, 190, 150][Difficulty]);
SetResourceType(GetBase(depot), mat_oil, [200, 170, 150, 120][Difficulty]);

uc_nation := 2;
uc_side := 2;

PrepareVehicle(ar_medium_trike, engine_combustion, control_manual, ar_gun, 33);
PlaceUnitXYD(CreateVehicle, 190, 64, 5, false);

PrepareVehicle(ar_medium_trike, engine_combustion, control_manual, ar_gatling_gun, 22);
PlaceUnitXYD(CreateVehicle, 188, 67, 5, false);

if hasRemote then
   begin
   PrepareVehicle(ar_medium_trike, engine_combustion, control_manual, ar_control_tower, 35);
   PlaceUnitXYD(CreateVehicle, 191, 71, 5, false);

   PrepareVehicle(ar_half_tracked, engine_combustion, control_remote, ar_gun, 55);
   PlaceUnitXYD(CreateVehicle, 199, 67, 0, false);
   end;

PlaceUnitXY(Heike, 213, 87, false);
ComTurnXY(Heike, 214, 87);

if Kaia then
   begin
   PlaceUnitXY(Kaia, 213, 85, false);
   ComTurnXY(Kaia, 215, 87);
   end;

if Olaf and Kaia then
   begin
   PlaceUnitXY(Olaf, 215, 87, false);
   ComTurnXY(Olaf, 213, 85);
   end
else if Olaf then
   PlaceHumanInUnit(Olaf, factory);

if Givi then
   begin
   if Kaia and Olaf then
      begin
      PlaceUnitXY(Givi, 247, 117, false);
      ComTurnXY(Givi, 248, 118);
      end
   else
      begin
      PlaceUnitXY(Givi, 216, 88, false);
      ComTurnUnit(Givi, Heike);
      end;
   end;

if Kurt then
   PlaceHumanInUnit(Kurt, bunkers[2]);

if Mike then
   PlaceHumanInUnit(Mike, bunkers[3]);

if Kamil then
   begin
   if Kaia and Olaf then
      PlaceHumanInUnit(Kamil, depot)
   else
      begin
      PlaceUnitXY(Kamil, 213, 87, false);
      ComTurnUnit(Kamil, Heike);
      end;
   end;

if Sophia then
   PlaceHumanInUnit(Sophia, depot);

if Aviradze then
   if lab then
      PlaceHumanInUnit(Aviradze, lab[1])
   else
      PlaceUnitXYR(Aviradze, 210, 87, 3, false);

if Ibrahim then
   if lab then
      PlaceHumanInUnit(Ibrahim, lab[1])
   else
      PlaceUnitXYR(Ibrahim, 210, 87, 3, false);

if Markov then
   if factory then
      PlaceHumanInUnit(Markov, factory[1])
   else
      PlaceUnitXYR(Markov, 210, 87, 3, false);

if heikeSecondSquad then
   for i in heikeSecondSquad do
       PlaceUnitXYR(i, 190, 65, 5, false);

if heikeApes then
   for i in heikeApes do
       PlaceUnitXYR(i, 190, 70, 5, false);
End;

Export Function PrepareRolfSquad;
var i, j;
begin
uc_side := 8;
uc_nation := 2;

Rolf := NewCharacter('Bergkamp');
rolfSquad := [ Rolf ];

for i := 1 to 4 do
    begin
    for j := 1 to [5, 2, 3, 1][i] do
        begin
        PrepareHuman(false, i, 5);
        rolfSquad := Join(rolfSquad, CreateHuman);
        end;
    end;

if HexInfo(5, 3) then
   RemoveUnit(HexInfo(5, 3));

for i in rolfSquad do
    begin
    uc_direction := 2;

    if GetClass(i) = class_mechanic then
       begin
       uc_side := 8;
       uc_nation := 2;

       PrepareVehicle(ar_medium_trike, engine_combustion, control_manual, ar_gun, 88);

       PlaceUnitArea(CreateVehicle, northSpawn, false);
       PlaceHumanInUnit(i, HexInfo(5, 3));
       end
    else
       PlaceUnitArea(i, northSpawn, false);

    ComMoveXY(i, 29, 10);

    wait(0$2);
    end;

wait(0$5);
End;

Export Function PrepareRolfBase;
var i, tmp;
begin
ComEnterUnit(Rolf, HexInfo(94, 63));

tmp := [ [b_armoury, 82, 64, 1], [b_breastwork, 73, 58, 0] ];

for i in tmp do
    AddComBuild(UnitFilter(rolfSquad, [f_class, 2]), i[1], i[2], i[3], i[4]);

ComEnterUnit(rolfSquad[2], HexInfo(63, 42));
ComEnterUnit(rolfSquad[3], HexInfo(94, 63));

repeat
 wait(0$1);
until UnitFilter(rolfSquad, [[f_class, 2], [f_not, [f_hastask]]]);

rolfScriptBase := true;
End;

Every 0$1 trigger rolfScriptBase and GetSide(Rolf) = 8 do
var i, b, p, tmp, sol, eng, sci, mech, enemyInBase, hasVehicle;
begin
enable;

if not rolfSquad then
   exit;

enemyInBase := FilterUnitsInArea(ruRolfBase, [f_enemy, 8]);

sol := UnitFilter(rolfSquad, [f_class, 1]);
eng := UnitFilter(rolfSquad, [f_class, 2]);
mech := UnitFilter(rolfSquad, [f_class, 3]);
sci := UnitFilter(rolfSquad, [f_class, 4]);

if sol then
   for i in sol union Rolf do
       if not IsInUnit(i) and not HasTask(i) then
          begin
          if GetLives(i) < 500 and GetDistUnitXY(i, 80, 49) > 6 then
             begin
             ComMoveXY(i, 80, 49);
             continue;
             end;

          tmp := FilterAllUnits([[f_side, 8], [f_ok], [f_or, [f_btype, b_armoury], [f_btype, b_barracks], [f_btype, b_bunker], [f_btype, b_breastwork]]]);

          if tmp then
             begin
             for b in tmp do
                 begin
                 case GetBType(b) of
                      b_armoury, b_barracks: p := 6;
                      b_breastwork, b_bunker: p := 1;
                      end;

                 if UnitsInside(b) < p then
                    ComEnterUnit(i, b);
                 end;
             end;
          end;

if sci then
   for i in sci do
       begin
       if GetDistUnitXY(i, 80, 49) > 9 then
          ComMoveXY(i, 80, 49);
       end;

if mech then
   for i in mech do
       begin
       hasVehicle := IsInUnit(i);

       if enemyInBase then
          begin
          if hasVehicle and GetLives(hasVehicle) > 500 then
             ComAttackUnit(hasVehicle, NearestUnitToUnit(enemyInBase, hasVehicle))
          else if GetDistUnitXY(hasVehicle, 86, 49) > 8 then
             begin
             ComMoveXY(hasVehicle, 86, 49);
             AddComRepairVehicleAndReturn(i);
             end
          end
       else
          begin
          if GetDistUnitXY(i, 86, 49) > 8 then
             ComMoveXY(i, 86, 49)
          else if hasVehicle and GetLives(hasVehicle) < 1000 then
             begin
             SetFuel(hasVehicle, 100);
             ComRepairVehicleAndReturn(i);
             end;
          end;
       end;

tmp := FilterUnitsInArea(ruRolfBase, [[f_not, [f_lives, 1000]], [f_type, unit_building]]);

if tmp and eng then
   begin
   for i in eng do
       if IsInUnit(i) then
          ComExitBuilding(i)
       else if GetLives(i) = 1000 then
          ComRepairBuilding(i, tmp[1])
       else if GetLives(i) < 700 then
          ComMoveXY(i, 80, 49);
   end;

if not tmp and UnitFilter(eng, [f_not, [f_inside]]) then
   for i in UnitFilter(eng, [f_not, [f_inside]]) do
       if GetLives(i) < 1000 then
          ComMoveXY(i, 80, 49)
       else
          ComEnterUnit(i, HexInfo(86, 54));
End;

Export Function PrepareOmarSquad;
var i, j, p;
begin
uc_side := 5;
uc_nation := 2;

omarSquad := [];

for i := 1 to 4 do
    begin
    for j := 1 to [6, 2, 2 + omarVehiclesCounter, 2][i] do
        begin
        PrepareHuman(false, i, 5);
        omarSquad := Join(omarSquad, CreateHuman);

        if i = 1 and Prob(50) then
           SetClass(omarSquad[omarSquad], class_mortar);
        end;
    end;

if HexInfo(340, 205) then
   RemoveUnit(HexInfo(340, 205));

p := 0;

for i in omarSquad do
    begin
    uc_direction := 4;

    if GetClass(i) = class_mechanic and p < 2 then
       begin
       p := p + 1;
       uc_side := 5;

       if rand(0, 1) then
          begin
          uc_nation := 2;
          PrepareVehicle(ar_medium_trike, engine_combustion, control_manual, ar_gun, 88);
          end
       else
          begin
          uc_nation := 3;
          PrepareVehicle(ru_medium_tracked, engine_combustion, control_manual, ru_rocket_launcher, 88);
          end;

       PlaceUnitArea(CreateVehicle, southSpawn, false);
       PlaceHumanInUnit(i, HexInfo(340, 205));
       end
    else
       PlaceUnitArea(i, southSpawn, false);

    ComMoveXY(i, 333, 210);

    wait(0$2);
    end;

PlaceUnitXY(Omar, 340, 205, false);
ComMoveXY(Omar, 333, 206);

wait(0$2);

ComHold(omarSquad);
ComAgressiveMove(omar union UnitFilter(omarSquad, [f_or, [f_class, 1], [f_class, 8]]) union FilterAllUnits([[f_side, 5], [f_type, unit_vehicle]]), 315, 214);

//wait(0$2);
//ComPlaceDelayedCharge(UnitFilter(omarSquad, [f_class, 1])[1], 323, 216, 0);
//AddComMoveXY(UnitFilter(omarSquad, [f_class, 1])[1], 329, 212);

wait(0$22);

ComAgressiveMove(omarSquad union Omar, 329, 231);
End;

Every 0$1 trigger omarScriptBase do
var i, j, b, p, tmp, sol, eng, sci, mech, enemyInBase, hasVehicle;
begin
enable;

if not omarSquad then
   exit;

enemyInBase := FilterUnitsInArea(ruOmarBase, [f_enemy, 5]);

sol := UnitFilter(omarSquad, [f_or, [f_class, 1], [f_class, 8]]);
eng := UnitFilter(omarSquad, [f_class, 2]);
mech := UnitFilter(omarSquad, [f_class, 3]);
sci := UnitFilter(omarSquad, [f_class, 4]);

if sol then
   for i in sol do
       if not HasTask(i) then
          begin
          if not IsInUnit(i) and GetLives(i) < 500 and GetDistUnitXY(i, 333, 234) > 6 then
             begin
             ComMoveXY(i, 333, 234);
             continue;
             end;

          tmp := FilterAllUnits([[f_side, 5], [f_empty], [f_ok], [f_or, [f_btype, b_bunker], [f_btype, b_breastwork]]]);

          if tmp and GetBType(IsInUnit(i)) <> b_breastwork then
             begin
             for j in tmp do
                 if GetTag(j) <> 1 then
                    begin
                    SetTag(j, 1);

                    if IsInUnit(i) then
                       ComExit(i);
      
                    AddComEnterUnit(i, j);
                    end;
             end
          else if not IsInUnit(i) then
             begin
             tmp := FilterAllUnits([[f_side, 5], [f_ok], [f_btype, b_armoury]]);

             if tmp then
                if UnitsInside(tmp[1]) < 6 then
                   ComEnterUnit(i, tmp[1]);
             end;
          end;

if sci then
   for i in sci do
       begin
       if GetDistUnitXY(i, 333, 234) > 9 then
          ComMoveXY(i, 333, 234);
       end;

if mech then
   for i in mech do
       begin
       hasVehicle := IsInUnit(i);

       if enemyInBase then
          begin
          if hasVehicle and GetLives(hasVehicle) > 500 then
             ComAttackUnit(hasVehicle, NearestUnitToUnit(enemyInBase, hasVehicle))
          else if GetDistUnitXY(hasVehicle, 333, 234) > 6 then
             ComMoveXY(hasVehicle, 333, 234);
          end
       else
          begin
          if GetDistUnitXY(i, 333, 234) > 6 then
             ComMoveXY(i, 333, 234)
          else if hasVehicle and GetLives(hasVehicle) < 1000 then
             begin
             SetFuel(hasVehicle, 100);
             ComRepairVehicleAndReturn(i);
             end;
          end;
       end;

tmp := FilterUnitsInArea(ruOmarBase, [[f_not, [f_lives, 1000]], [f_type, unit_building]]);

if tmp and eng then
   begin
   for i in eng do
       if IsInUnit(i) then
          ComExitBuilding(i)
       else if GetLives(i) = 1000 then
          ComRepairBuilding(i, tmp[1])
       else if GetLives(i) < 700 then
          ComMoveXY(i, 333, 234);
   end;

if not tmp and UnitFilter(eng, [f_not, [f_inside]]) then
   for i in UnitFilter(eng, [f_not, [f_inside]]) do
       if GetLives(i) < 1000 then
          ComMoveXY(i, 333, 234)
       else
          ComEnterUnit(i, HexInfo(341, 232));
End;

Every 0$1 trigger GetLives(Omar) < 1000 do
begin
enable;
SetLives(Omar, 1000);
End;

Every 0$1 trigger GetLives(Rolf) < 1000 and rolfAttack do
begin
enable;
SetLives(Rolf, 1000);
End;

Every 0$1 trigger rolfAttack do
var i, tmp, mech, path, tag, rolfCoords;
begin
path := [ [215,162], [195,163], [174,162], [145,163], [127,163] ];
rolfCoords := [221, 161];
tmp := Rolf union rolfSquad;

if not tmp then
   exit;

ComMoveXY(tmp, rolfCoords[1], rolfCoords[2]);

repeat
 wait(0$1);

  tmp := UnitFilter(rolfSquad, [f_or, [f_class, 1], [f_class, 8]]);

  if tmp then
     begin
     for i in tmp do
         begin
         tag := GetTag(i);

         if GetLives(i) < 800 and tag < 101 then
            begin
            SetTag(i, 101);
            ComMoveXY(i, rolfCoords[1], rolfCoords[2]);
            end
         else if tag = 101 then
            begin
            if GetLives(i) = 1000 then
               SetTag(i, 0);
            end
         else
            AgressiveMove(i, path);
         end;
     end;

  tmp := FilterAllUnits([[f_side, 8], [f_type, unit_vehicle], [f_not, [f_weapon, ar_cargo_bay]]]);

  if not tmp then
     continue;

  for i in tmp do
      begin
      mech := IsDrivenBy(i);

      if not mech then
         continue;

      tag := GetTag(i);

      if GetLives(i) >= 600 and tag < 101 then
         AgressiveMove(i, path);

      if GetLives(i) < 600 and tag < 101 then
         begin
         SetTag(i, 101);

         ComMoveXY(i, rolfCoords[1], rolfCoords[2]);
         end;

      if tag = 101 and GetDistUnitXY(i, rolfCoords[1], rolfCoords[2]) < 9 and mech then
         begin
         if GetLives(i) < 1000 then
            AddComRepairVehicleAndReturn(mech)
         else
            SetTag(i, 0);
         end;
      end;
until not tmp;

End;

Every 0$1 trigger omarAttack do
var i, cargo, tmp, tag, mech, x, path, omarAttackCoords;
begin
path := [ [209,221], [190,220], [177,220], [168,223], [150,206] ];
omarAttackCoords := [219, 225, 0];

for i := 1 to 2 do
    begin
    uc_side := 5;
    uc_nation := 2;

    PrepareVehicle(ar_half_tracked, engine_combustion, control_manual, ar_cargo_bay, 80);
    cargo := Join(cargo, CreateVehicle);
    SetDir(cargo[i], 4);
    PlaceUnitArea(cargo[i], omarVehiclesArea, false);

    PrepareMechanic(false, 4);
    PlaceHumanInUnit(CreateHuman, cargo[i]);

    ComMoveXY(cargo[i], 337, 232);
    end;

wait(0$25);

for i := 1 to 2 do
    SetCargo(cargo[i], mat_oil, 100);

ComExitBuilding(UnitFilter(omarSquad, [f_or, [f_class, 1], [f_class, 8]]));

wait(0$3);

AddComAgressiveMove(omarSquad union Omar, omarAttackCoords[1], omarAttackCoords[2]);

wait(0$3);

AddComMoveXY(cargo, 218, 217);

wait(1$00);

repeat
 wait(0$1);

 if omarAttackCoords[3] = 0 then
    if FilterAllUnits([[f_side, 3], [f_distxy, 168, 229, 12]]) = 0 then
       begin
       omarAttackCoords := [167, 222, 1];
       AddComMoveXY(Omar ^ cargo ^ UnitFilter(omarSquad, [f_class, 4]), 167, 222);
       end;

  tmp := UnitFilter(omarSquad, [f_or, [f_class, 1], [f_class, 8]]);

  if tmp then
     begin
     for i in tmp do
         begin
         tag := GetTag(i);

         if GetLives(i) < 800 and tag < 101 then
            begin
            SetTag(i, 101);    
            ComMoveXY(i, omarAttackCoords[1], omarAttackCoords[2]);
            end
         else if tag = 101 then
            begin
            if GetLives(i) = 1000 then
               SetTag(i, 0);
            end
         else
            AgressiveMove(i, path);
         end;
     end;

  tmp := FilterAllUnits([[f_side, 5], [f_type, unit_vehicle], [f_not, [f_weapon, ar_cargo_bay]]]);

  if not tmp then
     continue;

  for i in tmp do
      begin
      mech := IsDrivenBy(i);

      if not mech then
         continue;

      tag := GetTag(i);

      if GetFuel(i) > 90 and tag = 102 then
         SetTag(i, 0)
      else if GetTag(i) = 102 then
         begin
         x := rand(1, 2);
         AddComMoveUnit(i, cargo[x]);

         if GetCargo(cargo[x], mat_oil) < 20 then
            SetCargo(cargo[x], mat_oil, 100);
         end;

       if GetLives(i) >= 600 and tag < 101 then
          AgressiveMove(i, path);

       if GetLives(i) < 600 and tag < 101 then
          begin
          SetTag(i, 101);

          ComMoveXY(i, omarAttackCoords[1], omarAttackCoords[2]);
          end;

       if tag = 101 and GetDistUnitXY(i, omarAttackCoords[1], omarAttackCoords[2]) < 9 and mech then
          begin
          if GetLives(i) < 1000 then
             AddComRepairVehicleAndReturn(mech)
          else
             if GetFuel(i) <= 90 and cargo then
                SetTag(i, 102)
             else
                SetTag(i, 0);
          end;
       end;
until not tmp;
End;

Export Function GoForOil;
var i, tmp, data, chance, vehicle, needOil, heikeInConvoy, success;
begin
SetAreaMapShow(oilArea, 1);

repeat
 wait(0$5);
 heikeInConvoy := false;
 needOil := false;
 tmp := FilterUnitsInArea(oilArea, [[f_side, 2], [f_not, [f_or, [f_weapon, ar_crane], [f_weapon, ar_control_tower]]], [f_control, control_manual]]);

 for i in tmp do
     begin
     if IsDrivenBy(i) = Heike then
        begin
        heikeInConvoy := true;
        Query('QHeikeConvoy');
        break;
        end;

     if GetEngine(i) = engine_combustion and GetFuel(i) < 10 then
        begin
        needOil := true;
        Query('QNeedOil');
        break;
        end;
     end;

 if not needOil and not heikeInConvoy and UnitFilter(tmp, [f_or, [f_weapon, ar_cargo_bay], [f_weapon, ru_cargo_bay]]) then
    if Query('QConvoy') = 1 then
       break;

until false;

SetAreaMapShow(oilArea, 0);

data := [];
chance := [60, 50, 40, 30][Difficulty];

for i in tmp do
    begin
    data := Join(data, [
        i,             // vehicle
        IsDrivenBy(i), // driver
        GetLives(i),   // hp
        GetFuel(i),    // fuel
    ]);

    RemoveUnit(IsDrivenBy(i));
    RemoveUnit(i);

    chance := chance + 20;
    end;

wait(rand(0$45, 2$30));

repeat
 wait(0$1);
until not FilterAllUnits([[f_side, 3], [f_distxy, 261, 71, 12]]) and not HexInfo(277, 80);

for i in data do
    begin
    uc_nation := GetNation(i[1]);
    uc_side := 2;

    PrepareVehicle(GetChassis(i[1]), GetEngine(i[1]), GetControl(i[1]), GetWeapon(i[1]), 66);
    vehicle := CreateVehicle;
    PlaceUnitXYD(vehicle, 277, 80, 4, false);
    PlaceHumanInUnit(i[2], vehicle);
    SetLives(vehicle, i[3]);

    success := Prob(chance);

    if success then
       begin
       if GetEngine(vehicle) = engine_combustion then
          SetFuel(vehicle, 90);

       if GetWeapon(vehicle) in [ar_cargo_bay, ru_cargo_bay] then
          SetCargo(vehicle, mat_oil, 100);
       end
    else 
       begin
       if i[3] > 333 then
          SetLives(vehicle, 333);

       if i[4] > 20 then
          SetFuel(vehicle, 20)
       else
          SetFuel(vehicle, i[4]);
       end;

    ComMoveXY(vehicle, 250, 119);
    AddComMoveXY(vehicle, 211, 80);

    repeat
     wait(0$5);
    until not FilterUnitsInArea(oilArea, [[f_side, 2], [f_placed]]);
    end;

wait(0$10);

GoForOil;
End;

Every 0$2 trigger FilterUnitsInArea(southPassageArea, [[f_type, unit_vehicle], [f_side, 5], [f_empty]]) do
var i;
begin
enable;

for i in FilterUnitsInArea(southPassageArea, [[f_type, unit_vehicle], [f_side, 5], [f_empty]]) do
    KillUnit(i);
End;