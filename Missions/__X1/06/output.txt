// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 62274 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 3 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 3
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6831 0 2
// PrepareArabian ;
  36: CALL 353 0 0
// PrepareRussian ;
  40: CALL 7678 0 0
// Action ;
  44: CALL 15389 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := 1 ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 1
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 10500
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: LD_INT 21000
 281: PUSH
 282: LD_INT 18900
 284: PUSH
 285: LD_INT 16800
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_OWVAR 67
 297: ARRAY
 298: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 299: LD_ADDR_EXP 21
 303: PUSH
 304: LD_INT 4
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: LD_OWVAR 67
 322: ARRAY
 323: ST_TO_ADDR
// omarAttack := false ;
 324: LD_ADDR_EXP 23
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// disableAttackOnHeike := false ;
 332: LD_ADDR_EXP 27
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 340: LD_ADDR_EXP 25
 344: PUSH
 345: LD_INT 8400
 347: ST_TO_ADDR
// end ; end_of_file
 348: LD_VAR 0 1
 352: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 353: LD_INT 0
 355: PPUSH
 356: PPUSH
 357: PPUSH
 358: PPUSH
 359: PPUSH
 360: PPUSH
 361: PPUSH
 362: PPUSH
 363: PPUSH
 364: PPUSH
 365: PPUSH
 366: PPUSH
// uc_nation := 2 ;
 367: LD_ADDR_OWVAR 21
 371: PUSH
 372: LD_INT 2
 374: ST_TO_ADDR
// uc_side := 5 ;
 375: LD_ADDR_OWVAR 20
 379: PUSH
 380: LD_INT 5
 382: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 383: LD_ADDR_EXP 36
 387: PUSH
 388: LD_STRING Abdul
 390: PPUSH
 391: LD_INT 0
 393: PPUSH
 394: LD_STRING 
 396: PPUSH
 397: CALL 23519 0 3
 401: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 402: LD_ADDR_EXP 38
 406: PUSH
 407: LD_STRING Omar
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 23519 0 3
 420: ST_TO_ADDR
// uc_side := 2 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 2
 428: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 429: LD_ADDR_EXP 28
 433: PUSH
 434: LD_STRING Heike
 436: PPUSH
 437: LD_EXP 1
 441: NOT
 442: PPUSH
 443: LD_EXP 2
 447: PPUSH
 448: CALL 23519 0 3
 452: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 31
 457: PUSH
 458: LD_STRING Ibrahim
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 23519 0 3
 476: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 29
 481: PUSH
 482: LD_STRING Givi
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 23519 0 3
 500: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 501: LD_ADDR_EXP 32
 505: PUSH
 506: LD_STRING Kamil
 508: PPUSH
 509: LD_EXP 1
 513: NOT
 514: PPUSH
 515: LD_EXP 2
 519: PPUSH
 520: CALL 23519 0 3
 524: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 525: LD_ADDR_EXP 33
 529: PUSH
 530: LD_STRING Kaia
 532: PPUSH
 533: LD_EXP 1
 537: NOT
 538: PPUSH
 539: LD_EXP 2
 543: PPUSH
 544: CALL 23519 0 3
 548: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 549: LD_ADDR_EXP 34
 553: PUSH
 554: LD_STRING Sophia
 556: PPUSH
 557: LD_EXP 1
 561: NOT
 562: PPUSH
 563: LD_EXP 2
 567: PPUSH
 568: CALL 23519 0 3
 572: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 573: LD_ADDR_EXP 35
 577: PUSH
 578: LD_STRING Markov
 580: PPUSH
 581: LD_EXP 1
 585: NOT
 586: PPUSH
 587: LD_EXP 2
 591: PPUSH
 592: CALL 23519 0 3
 596: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 597: LD_ADDR_EXP 40
 601: PUSH
 602: LD_STRING Aviradze
 604: PPUSH
 605: LD_EXP 1
 609: NOT
 610: PPUSH
 611: LD_EXP 2
 615: PPUSH
 616: CALL 23519 0 3
 620: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 621: LD_ADDR_EXP 39
 625: PUSH
 626: LD_STRING Kurt
 628: PPUSH
 629: LD_EXP 1
 633: NOT
 634: PPUSH
 635: LD_EXP 2
 639: PPUSH
 640: CALL 23519 0 3
 644: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 645: LD_ADDR_EXP 30
 649: PUSH
 650: LD_STRING Mike
 652: PPUSH
 653: LD_EXP 1
 657: NOT
 658: PPUSH
 659: LD_EXP 2
 663: PPUSH
 664: CALL 23519 0 3
 668: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 669: LD_ADDR_EXP 37
 673: PUSH
 674: LD_STRING Olaf
 676: PPUSH
 677: LD_INT 0
 679: PPUSH
 680: LD_STRING 
 682: PPUSH
 683: CALL 23519 0 3
 687: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 688: LD_ADDR_EXP 43
 692: PUSH
 693: LD_STRING 05_others
 695: PPUSH
 696: CALL_OW 31
 700: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 701: LD_ADDR_EXP 44
 705: PUSH
 706: LD_STRING 05_apes
 708: PPUSH
 709: CALL_OW 31
 713: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 714: LD_ADDR_VAR 0 5
 718: PUSH
 719: LD_STRING 05_Radar
 721: PPUSH
 722: LD_EXP 1
 726: PPUSH
 727: CALL_OW 30
 731: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 732: LD_ADDR_VAR 0 6
 736: PUSH
 737: LD_STRING 05_RemoteControl
 739: PPUSH
 740: LD_EXP 1
 744: PPUSH
 745: CALL_OW 30
 749: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 750: LD_ADDR_VAR 0 7
 754: PUSH
 755: LD_STRING 05_DrugsTested
 757: PPUSH
 758: LD_EXP 1
 762: PPUSH
 763: CALL_OW 30
 767: ST_TO_ADDR
// if hasDrugs then
 768: LD_VAR 0 7
 772: IFFALSE 787
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 774: LD_INT 5
 776: PPUSH
 777: LD_INT 2
 779: PPUSH
 780: LD_INT 2
 782: PPUSH
 783: CALL_OW 322
// if hasRadar then
 787: LD_VAR 0 5
 791: IFFALSE 806
// SetTech ( tech_radar , 2 , state_researched ) ;
 793: LD_INT 6
 795: PPUSH
 796: LD_INT 2
 798: PPUSH
 799: LD_INT 2
 801: PPUSH
 802: CALL_OW 322
// if hasRemote then
 806: LD_VAR 0 6
 810: IFFALSE 825
// SetTech ( tech_remCont , 2 , state_researched ) ;
 812: LD_INT 15
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: LD_INT 2
 820: PPUSH
 821: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 825: LD_ADDR_VAR 0 12
 829: PUSH
 830: LD_INT 5
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 517
 840: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: DOUBLE
 847: LD_INT 1
 849: DEC
 850: ST_TO_ADDR
 851: LD_VAR 0 12
 855: PUSH
 856: LD_INT 1
 858: ARRAY
 859: PUSH
 860: FOR_TO
 861: IFFALSE 938
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 863: LD_VAR 0 12
 867: PUSH
 868: LD_INT 1
 870: ARRAY
 871: PUSH
 872: LD_VAR 0 2
 876: ARRAY
 877: PPUSH
 878: LD_VAR 0 12
 882: PUSH
 883: LD_INT 2
 885: ARRAY
 886: PUSH
 887: LD_VAR 0 2
 891: ARRAY
 892: PPUSH
 893: CALL_OW 351
 897: IFFALSE 936
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 899: LD_VAR 0 12
 903: PUSH
 904: LD_INT 1
 906: ARRAY
 907: PUSH
 908: LD_VAR 0 2
 912: ARRAY
 913: PPUSH
 914: LD_VAR 0 12
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: PUSH
 923: LD_VAR 0 2
 927: ARRAY
 928: PPUSH
 929: LD_INT 2
 931: PPUSH
 932: CALL_OW 244
 936: GO 860
 938: POP
 939: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 940: LD_ADDR_VAR 0 4
 944: PUSH
 945: LD_INT 0
 947: PUSH
 948: LD_INT 206
 950: PUSH
 951: LD_INT 80
 953: PUSH
 954: LD_INT 1
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 32
 965: PUSH
 966: LD_INT 221
 968: PUSH
 969: LD_INT 95
 971: PUSH
 972: LD_INT 5
 974: PUSH
 975: LD_INT 23
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 32
 987: PUSH
 988: LD_INT 223
 990: PUSH
 991: LD_INT 88
 993: PUSH
 994: LD_INT 5
 996: PUSH
 997: LD_INT 24
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: PUSH
1007: LD_INT 32
1009: PUSH
1010: LD_INT 202
1012: PUSH
1013: LD_INT 64
1015: PUSH
1016: LD_INT 2
1018: PUSH
1019: LD_INT 25
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 3
1031: PUSH
1032: LD_INT 203
1034: PUSH
1035: LD_INT 91
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: PUSH
1047: LD_INT 8
1049: PUSH
1050: LD_INT 217
1052: PUSH
1053: LD_INT 78
1055: PUSH
1056: LD_INT 4
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 27
1067: PUSH
1068: LD_INT 220
1070: PUSH
1071: LD_INT 99
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: LD_INT 27
1085: PUSH
1086: LD_INT 220
1088: PUSH
1089: LD_INT 103
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: PUSH
1101: LD_INT 27
1103: PUSH
1104: LD_INT 216
1106: PUSH
1107: LD_INT 102
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 17
1121: PUSH
1122: LD_INT 203
1124: PUSH
1125: LD_INT 94
1127: PUSH
1128: LD_INT 0
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: PUSH
1137: LD_INT 23
1139: PUSH
1140: LD_INT 200
1142: PUSH
1143: LD_INT 88
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 16
1157: PUSH
1158: LD_INT 199
1160: PUSH
1161: LD_INT 91
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_INT 26
1175: PUSH
1176: LD_INT 197
1178: PUSH
1179: LD_INT 81
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: PUSH
1191: LD_INT 26
1193: PUSH
1194: LD_INT 197
1196: PUSH
1197: LD_INT 78
1199: PUSH
1200: LD_INT 3
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: ST_TO_ADDR
// if hasRadar then
1225: LD_VAR 0 5
1229: IFFALSE 1273
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1231: LD_ADDR_VAR 0 4
1235: PUSH
1236: LD_VAR 0 4
1240: PPUSH
1241: LD_VAR 0 4
1245: PUSH
1246: LD_INT 1
1248: PLUS
1249: PPUSH
1250: LD_INT 20
1252: PUSH
1253: LD_INT 203
1255: PUSH
1256: LD_INT 87
1258: PUSH
1259: LD_INT 3
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 1
1272: ST_TO_ADDR
// if hasRemote then
1273: LD_VAR 0 6
1277: IFFALSE 1321
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1279: LD_ADDR_VAR 0 4
1283: PUSH
1284: LD_VAR 0 4
1288: PPUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_INT 1
1296: PLUS
1297: PPUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 207
1303: PUSH
1304: LD_INT 95
1306: PUSH
1307: LD_INT 5
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: PPUSH
1316: CALL_OW 1
1320: ST_TO_ADDR
// for i in base do
1321: LD_ADDR_VAR 0 2
1325: PUSH
1326: LD_VAR 0 4
1330: PUSH
1331: FOR_IN
1332: IFFALSE 1513
// begin bc_type := i [ 1 ] ;
1334: LD_ADDR_OWVAR 42
1338: PUSH
1339: LD_VAR 0 2
1343: PUSH
1344: LD_INT 1
1346: ARRAY
1347: ST_TO_ADDR
// bc_level := 3 ;
1348: LD_ADDR_OWVAR 43
1352: PUSH
1353: LD_INT 3
1355: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1356: LD_VAR 0 2
1360: PUSH
1361: LD_INT 1
1363: ARRAY
1364: PUSH
1365: LD_INT 8
1367: EQUAL
1368: IFFALSE 1403
// begin bc_kind1 := b_lab_weapon ;
1370: LD_ADDR_OWVAR 44
1374: PUSH
1375: LD_INT 10
1377: ST_TO_ADDR
// if hasRadar then
1378: LD_VAR 0 5
1382: IFFALSE 1394
// bc_kind2 := b_lab_opto else
1384: LD_ADDR_OWVAR 45
1388: PUSH
1389: LD_INT 15
1391: ST_TO_ADDR
1392: GO 1403
// bc_kind2 := - 1 ;
1394: LD_ADDR_OWVAR 45
1398: PUSH
1399: LD_INT 1
1401: NEG
1402: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1403: LD_ADDR_VAR 0 3
1407: PUSH
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 3
1424: ARRAY
1425: PPUSH
1426: LD_VAR 0 2
1430: PUSH
1431: LD_INT 4
1433: ARRAY
1434: PPUSH
1435: CALL_OW 47
1439: ST_TO_ADDR
// if i > 4 then
1440: LD_VAR 0 2
1444: PUSH
1445: LD_INT 4
1447: GREATER
1448: IFFALSE 1468
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1450: LD_VAR 0 3
1454: PPUSH
1455: LD_VAR 0 2
1459: PUSH
1460: LD_INT 5
1462: ARRAY
1463: PPUSH
1464: CALL_OW 431
// if i [ 1 ] = b_bunker then
1468: LD_VAR 0 2
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PUSH
1477: LD_INT 32
1479: EQUAL
1480: IFFALSE 1511
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1482: LD_ADDR_VAR 0 11
1486: PUSH
1487: LD_VAR 0 11
1491: PPUSH
1492: LD_VAR 0 11
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: PPUSH
1501: LD_VAR 0 3
1505: PPUSH
1506: CALL_OW 1
1510: ST_TO_ADDR
// end ;
1511: GO 1331
1513: POP
1514: POP
// depot := HexInfo ( 206 , 80 ) ;
1515: LD_ADDR_VAR 0 9
1519: PUSH
1520: LD_INT 206
1522: PPUSH
1523: LD_INT 80
1525: PPUSH
1526: CALL_OW 428
1530: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1531: LD_ADDR_VAR 0 8
1535: PUSH
1536: LD_INT 203
1538: PPUSH
1539: LD_INT 91
1541: PPUSH
1542: CALL_OW 428
1546: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1547: LD_ADDR_VAR 0 10
1551: PUSH
1552: LD_INT 217
1554: PPUSH
1555: LD_INT 78
1557: PPUSH
1558: CALL_OW 428
1562: ST_TO_ADDR
// arDepot := depot ;
1563: LD_ADDR_EXP 42
1567: PUSH
1568: LD_VAR 0 9
1572: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1573: LD_VAR 0 9
1577: PPUSH
1578: CALL_OW 274
1582: PPUSH
1583: LD_INT 1
1585: PPUSH
1586: LD_INT 360
1588: PUSH
1589: LD_INT 260
1591: PUSH
1592: LD_INT 160
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_OWVAR 67
1604: ARRAY
1605: PPUSH
1606: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 ] [ Difficulty ] ) ;
1610: LD_VAR 0 9
1614: PPUSH
1615: CALL_OW 274
1619: PPUSH
1620: LD_INT 2
1622: PPUSH
1623: LD_INT 200
1625: PUSH
1626: LD_INT 170
1628: PUSH
1629: LD_INT 130
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: PUSH
1637: LD_OWVAR 67
1641: ARRAY
1642: PPUSH
1643: CALL_OW 277
// uc_nation := 2 ;
1647: LD_ADDR_OWVAR 21
1651: PUSH
1652: LD_INT 2
1654: ST_TO_ADDR
// uc_side := 2 ;
1655: LD_ADDR_OWVAR 20
1659: PUSH
1660: LD_INT 2
1662: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1663: LD_INT 13
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: LD_INT 27
1674: PPUSH
1675: LD_INT 33
1677: PPUSH
1678: CALL 28383 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1682: CALL_OW 45
1686: PPUSH
1687: LD_INT 190
1689: PPUSH
1690: LD_INT 64
1692: PPUSH
1693: LD_INT 5
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL 62188 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1703: LD_INT 13
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 1
1711: PPUSH
1712: LD_INT 25
1714: PPUSH
1715: LD_INT 22
1717: PPUSH
1718: CALL 28383 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1722: CALL_OW 45
1726: PPUSH
1727: LD_INT 188
1729: PPUSH
1730: LD_INT 67
1732: PPUSH
1733: LD_INT 5
1735: PPUSH
1736: LD_INT 0
1738: PPUSH
1739: CALL 62188 0 5
// if hasRemote then
1743: LD_VAR 0 6
1747: IFFALSE 1829
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1749: LD_INT 13
1751: PPUSH
1752: LD_INT 1
1754: PPUSH
1755: LD_INT 1
1757: PPUSH
1758: LD_INT 31
1760: PPUSH
1761: LD_INT 35
1763: PPUSH
1764: CALL 28383 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1768: CALL_OW 45
1772: PPUSH
1773: LD_INT 191
1775: PPUSH
1776: LD_INT 71
1778: PPUSH
1779: LD_INT 5
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: CALL 62188 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1789: LD_INT 14
1791: PPUSH
1792: LD_INT 1
1794: PPUSH
1795: LD_INT 2
1797: PPUSH
1798: LD_INT 27
1800: PPUSH
1801: LD_INT 55
1803: PPUSH
1804: CALL 28383 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1808: CALL_OW 45
1812: PPUSH
1813: LD_INT 199
1815: PPUSH
1816: LD_INT 67
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: LD_INT 0
1824: PPUSH
1825: CALL 62188 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1829: LD_EXP 28
1833: PPUSH
1834: LD_INT 213
1836: PPUSH
1837: LD_INT 87
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1847: LD_EXP 28
1851: PPUSH
1852: LD_INT 214
1854: PPUSH
1855: LD_INT 87
1857: PPUSH
1858: CALL_OW 118
// if Kaia then
1862: LD_EXP 33
1866: IFFALSE 1901
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1868: LD_EXP 33
1872: PPUSH
1873: LD_INT 213
1875: PPUSH
1876: LD_INT 85
1878: PPUSH
1879: LD_INT 0
1881: PPUSH
1882: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1886: LD_EXP 33
1890: PPUSH
1891: LD_INT 215
1893: PPUSH
1894: LD_INT 87
1896: PPUSH
1897: CALL_OW 118
// end ; if Olaf and Kaia then
1901: LD_EXP 37
1905: PUSH
1906: LD_EXP 33
1910: AND
1911: IFFALSE 1948
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1913: LD_EXP 37
1917: PPUSH
1918: LD_INT 215
1920: PPUSH
1921: LD_INT 87
1923: PPUSH
1924: LD_INT 0
1926: PPUSH
1927: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1931: LD_EXP 37
1935: PPUSH
1936: LD_INT 213
1938: PPUSH
1939: LD_INT 85
1941: PPUSH
1942: CALL_OW 118
// end else
1946: GO 1968
// if Olaf then
1948: LD_EXP 37
1952: IFFALSE 1968
// PlaceHumanInUnit ( Olaf , factory ) ;
1954: LD_EXP 37
1958: PPUSH
1959: LD_VAR 0 8
1963: PPUSH
1964: CALL_OW 52
// if Givi then
1968: LD_EXP 29
1972: IFFALSE 2053
// begin if Kaia and Olaf then
1974: LD_EXP 33
1978: PUSH
1979: LD_EXP 37
1983: AND
1984: IFFALSE 2021
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1986: LD_EXP 29
1990: PPUSH
1991: LD_INT 247
1993: PPUSH
1994: LD_INT 117
1996: PPUSH
1997: LD_INT 0
1999: PPUSH
2000: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2004: LD_EXP 29
2008: PPUSH
2009: LD_INT 248
2011: PPUSH
2012: LD_INT 118
2014: PPUSH
2015: CALL_OW 118
// end else
2019: GO 2053
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2021: LD_EXP 29
2025: PPUSH
2026: LD_INT 216
2028: PPUSH
2029: LD_INT 88
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2039: LD_EXP 29
2043: PPUSH
2044: LD_EXP 28
2048: PPUSH
2049: CALL_OW 119
// end ; end ; if Kurt then
2053: LD_EXP 39
2057: IFFALSE 2077
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2059: LD_EXP 39
2063: PPUSH
2064: LD_VAR 0 11
2068: PUSH
2069: LD_INT 2
2071: ARRAY
2072: PPUSH
2073: CALL_OW 52
// if Mike then
2077: LD_EXP 30
2081: IFFALSE 2101
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2083: LD_EXP 30
2087: PPUSH
2088: LD_VAR 0 11
2092: PUSH
2093: LD_INT 3
2095: ARRAY
2096: PPUSH
2097: CALL_OW 52
// if Kamil then
2101: LD_EXP 32
2105: IFFALSE 2167
// begin if Kaia and Olaf then
2107: LD_EXP 33
2111: PUSH
2112: LD_EXP 37
2116: AND
2117: IFFALSE 2135
// PlaceHumanInUnit ( Kamil , depot ) else
2119: LD_EXP 32
2123: PPUSH
2124: LD_VAR 0 9
2128: PPUSH
2129: CALL_OW 52
2133: GO 2167
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2135: LD_EXP 32
2139: PPUSH
2140: LD_INT 213
2142: PPUSH
2143: LD_INT 87
2145: PPUSH
2146: LD_INT 0
2148: PPUSH
2149: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2153: LD_EXP 32
2157: PPUSH
2158: LD_EXP 28
2162: PPUSH
2163: CALL_OW 119
// end ; end ; if Sophia then
2167: LD_EXP 34
2171: IFFALSE 2187
// PlaceHumanInUnit ( Sophia , depot ) ;
2173: LD_EXP 34
2177: PPUSH
2178: LD_VAR 0 9
2182: PPUSH
2183: CALL_OW 52
// if Aviradze then
2187: LD_EXP 40
2191: IFFALSE 2207
// PlaceHumanInUnit ( Aviradze , lab ) ;
2193: LD_EXP 40
2197: PPUSH
2198: LD_VAR 0 10
2202: PPUSH
2203: CALL_OW 52
// if Ibrahim then
2207: LD_EXP 31
2211: IFFALSE 2227
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2213: LD_EXP 31
2217: PPUSH
2218: LD_VAR 0 10
2222: PPUSH
2223: CALL_OW 52
// if Markov then
2227: LD_EXP 35
2231: IFFALSE 2247
// PlaceHumanInUnit ( Markov , factory ) ;
2233: LD_EXP 35
2237: PPUSH
2238: LD_VAR 0 8
2242: PPUSH
2243: CALL_OW 52
// if heikeSecondSquad then
2247: LD_EXP 43
2251: IFFALSE 2291
// for i in heikeSecondSquad do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: LD_EXP 43
2262: PUSH
2263: FOR_IN
2264: IFFALSE 2289
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 190
2273: PPUSH
2274: LD_INT 65
2276: PPUSH
2277: LD_INT 5
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 50
2287: GO 2263
2289: POP
2290: POP
// if heikeApes then
2291: LD_EXP 44
2295: IFFALSE 2335
// for i in heikeApes do
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_EXP 44
2306: PUSH
2307: FOR_IN
2308: IFFALSE 2333
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2310: LD_VAR 0 2
2314: PPUSH
2315: LD_INT 190
2317: PPUSH
2318: LD_INT 70
2320: PPUSH
2321: LD_INT 5
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: CALL_OW 50
2331: GO 2307
2333: POP
2334: POP
// end ;
2335: LD_VAR 0 1
2339: RET
// export function PrepareRolfSquad ; var i , j ; begin
2340: LD_INT 0
2342: PPUSH
2343: PPUSH
2344: PPUSH
// uc_side := 8 ;
2345: LD_ADDR_OWVAR 20
2349: PUSH
2350: LD_INT 8
2352: ST_TO_ADDR
// uc_nation := 2 ;
2353: LD_ADDR_OWVAR 21
2357: PUSH
2358: LD_INT 2
2360: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2361: LD_ADDR_EXP 41
2365: PUSH
2366: LD_STRING Bergkamp
2368: PPUSH
2369: CALL_OW 25
2373: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2374: LD_ADDR_EXP 45
2378: PUSH
2379: LD_EXP 41
2383: PUSH
2384: EMPTY
2385: LIST
2386: ST_TO_ADDR
// for i := 1 to 4 do
2387: LD_ADDR_VAR 0 2
2391: PUSH
2392: DOUBLE
2393: LD_INT 1
2395: DEC
2396: ST_TO_ADDR
2397: LD_INT 4
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2481
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2403: LD_ADDR_VAR 0 3
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 5
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: LD_INT 3
2421: PUSH
2422: LD_INT 1
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: PUSH
2431: LD_VAR 0 2
2435: ARRAY
2436: PUSH
2437: FOR_TO
2438: IFFALSE 2477
// begin PrepareHuman ( false , i , 5 ) ;
2440: LD_INT 0
2442: PPUSH
2443: LD_VAR 0 2
2447: PPUSH
2448: LD_INT 5
2450: PPUSH
2451: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2455: LD_ADDR_EXP 45
2459: PUSH
2460: LD_EXP 45
2464: PPUSH
2465: CALL_OW 44
2469: PPUSH
2470: CALL 60257 0 2
2474: ST_TO_ADDR
// end ;
2475: GO 2437
2477: POP
2478: POP
// end ;
2479: GO 2400
2481: POP
2482: POP
// if HexInfo ( 5 , 3 ) then
2483: LD_INT 5
2485: PPUSH
2486: LD_INT 3
2488: PPUSH
2489: CALL_OW 428
2493: IFFALSE 2510
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2495: LD_INT 5
2497: PPUSH
2498: LD_INT 3
2500: PPUSH
2501: CALL_OW 428
2505: PPUSH
2506: CALL_OW 64
// for i in rolfSquad do
2510: LD_ADDR_VAR 0 2
2514: PUSH
2515: LD_EXP 45
2519: PUSH
2520: FOR_IN
2521: IFFALSE 2657
// begin uc_direction := 2 ;
2523: LD_ADDR_OWVAR 24
2527: PUSH
2528: LD_INT 2
2530: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL_OW 257
2540: PUSH
2541: LD_INT 3
2543: EQUAL
2544: IFFALSE 2618
// begin uc_side := 8 ;
2546: LD_ADDR_OWVAR 20
2550: PUSH
2551: LD_INT 8
2553: ST_TO_ADDR
// uc_nation := 2 ;
2554: LD_ADDR_OWVAR 21
2558: PUSH
2559: LD_INT 2
2561: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2562: LD_INT 13
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_INT 1
2570: PPUSH
2571: LD_INT 27
2573: PPUSH
2574: LD_INT 88
2576: PPUSH
2577: CALL 28383 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 11
2588: PPUSH
2589: LD_INT 0
2591: PPUSH
2592: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2596: LD_VAR 0 2
2600: PPUSH
2601: LD_INT 5
2603: PPUSH
2604: LD_INT 3
2606: PPUSH
2607: CALL_OW 428
2611: PPUSH
2612: CALL_OW 52
// end else
2616: GO 2633
// PlaceUnitArea ( i , northSpawn , false ) ;
2618: LD_VAR 0 2
2622: PPUSH
2623: LD_INT 11
2625: PPUSH
2626: LD_INT 0
2628: PPUSH
2629: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2633: LD_VAR 0 2
2637: PPUSH
2638: LD_INT 29
2640: PPUSH
2641: LD_INT 10
2643: PPUSH
2644: CALL_OW 111
// wait ( 0 0$2 ) ;
2648: LD_INT 70
2650: PPUSH
2651: CALL_OW 67
// end ;
2655: GO 2520
2657: POP
2658: POP
// wait ( 0 0$5 ) ;
2659: LD_INT 175
2661: PPUSH
2662: CALL_OW 67
// end ;
2666: LD_VAR 0 1
2670: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2671: LD_INT 0
2673: PPUSH
2674: PPUSH
2675: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2676: LD_EXP 41
2680: PPUSH
2681: LD_INT 94
2683: PPUSH
2684: LD_INT 63
2686: PPUSH
2687: CALL_OW 428
2691: PPUSH
2692: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2696: LD_ADDR_VAR 0 3
2700: PUSH
2701: LD_INT 4
2703: PUSH
2704: LD_INT 82
2706: PUSH
2707: LD_INT 64
2709: PUSH
2710: LD_INT 1
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 31
2721: PUSH
2722: LD_INT 73
2724: PUSH
2725: LD_INT 58
2727: PUSH
2728: LD_INT 0
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// for i in tmp do
2741: LD_ADDR_VAR 0 2
2745: PUSH
2746: LD_VAR 0 3
2750: PUSH
2751: FOR_IN
2752: IFFALSE 2816
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2754: LD_EXP 45
2758: PPUSH
2759: LD_INT 25
2761: PUSH
2762: LD_INT 2
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 72
2773: PPUSH
2774: LD_VAR 0 2
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_VAR 0 2
2787: PUSH
2788: LD_INT 2
2790: ARRAY
2791: PPUSH
2792: LD_VAR 0 2
2796: PUSH
2797: LD_INT 3
2799: ARRAY
2800: PPUSH
2801: LD_VAR 0 2
2805: PUSH
2806: LD_INT 4
2808: ARRAY
2809: PPUSH
2810: CALL_OW 205
2814: GO 2751
2816: POP
2817: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2818: LD_EXP 45
2822: PUSH
2823: LD_INT 2
2825: ARRAY
2826: PPUSH
2827: LD_INT 63
2829: PPUSH
2830: LD_INT 42
2832: PPUSH
2833: CALL_OW 428
2837: PPUSH
2838: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2842: LD_EXP 45
2846: PUSH
2847: LD_INT 3
2849: ARRAY
2850: PPUSH
2851: LD_INT 94
2853: PPUSH
2854: LD_INT 63
2856: PPUSH
2857: CALL_OW 428
2861: PPUSH
2862: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2866: LD_INT 35
2868: PPUSH
2869: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2873: LD_EXP 45
2877: PPUSH
2878: LD_INT 25
2880: PUSH
2881: LD_INT 2
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 3
2890: PUSH
2891: LD_INT 60
2893: PUSH
2894: EMPTY
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: PPUSH
2905: CALL_OW 72
2909: IFFALSE 2866
// rolfScriptBase := true ;
2911: LD_ADDR_EXP 9
2915: PUSH
2916: LD_INT 1
2918: ST_TO_ADDR
// end ;
2919: LD_VAR 0 1
2923: RET
// every 0 0$1 trigger rolfScriptBase do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2924: LD_EXP 9
2928: IFFALSE 3935
2930: GO 2932
2932: DISABLE
2933: LD_INT 0
2935: PPUSH
2936: PPUSH
2937: PPUSH
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// begin enable ;
2945: ENABLE
// if not rolfSquad then
2946: LD_EXP 45
2950: NOT
2951: IFFALSE 2955
// exit ;
2953: GO 3935
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
2955: LD_ADDR_VAR 0 9
2959: PUSH
2960: LD_INT 12
2962: PPUSH
2963: LD_INT 81
2965: PUSH
2966: LD_INT 8
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PPUSH
2973: CALL_OW 70
2977: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
2978: LD_ADDR_VAR 0 5
2982: PUSH
2983: LD_EXP 45
2987: PPUSH
2988: LD_INT 25
2990: PUSH
2991: LD_INT 1
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: PPUSH
2998: CALL_OW 72
3002: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3003: LD_ADDR_VAR 0 6
3007: PUSH
3008: LD_EXP 45
3012: PPUSH
3013: LD_INT 25
3015: PUSH
3016: LD_INT 2
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 72
3027: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3028: LD_ADDR_VAR 0 8
3032: PUSH
3033: LD_EXP 45
3037: PPUSH
3038: LD_INT 25
3040: PUSH
3041: LD_INT 3
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 72
3052: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3053: LD_ADDR_VAR 0 7
3057: PUSH
3058: LD_EXP 45
3062: PPUSH
3063: LD_INT 25
3065: PUSH
3066: LD_INT 4
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PPUSH
3073: CALL_OW 72
3077: ST_TO_ADDR
// if sol then
3078: LD_VAR 0 5
3082: IFFALSE 3380
// for i in sol union Rolf do
3084: LD_ADDR_VAR 0 1
3088: PUSH
3089: LD_VAR 0 5
3093: PUSH
3094: LD_EXP 41
3098: UNION
3099: PUSH
3100: FOR_IN
3101: IFFALSE 3378
// if not IsInUnit ( i ) and not HasTask ( i ) then
3103: LD_VAR 0 1
3107: PPUSH
3108: CALL_OW 310
3112: NOT
3113: PUSH
3114: LD_VAR 0 1
3118: PPUSH
3119: CALL_OW 314
3123: NOT
3124: AND
3125: IFFALSE 3376
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3127: LD_VAR 0 1
3131: PPUSH
3132: CALL_OW 256
3136: PUSH
3137: LD_INT 500
3139: LESS
3140: PUSH
3141: LD_VAR 0 1
3145: PPUSH
3146: LD_INT 80
3148: PPUSH
3149: LD_INT 49
3151: PPUSH
3152: CALL_OW 297
3156: PUSH
3157: LD_INT 6
3159: GREATER
3160: AND
3161: IFFALSE 3180
// begin ComMoveXY ( i , 80 , 49 ) ;
3163: LD_VAR 0 1
3167: PPUSH
3168: LD_INT 80
3170: PPUSH
3171: LD_INT 49
3173: PPUSH
3174: CALL_OW 111
// continue ;
3178: GO 3100
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3180: LD_ADDR_VAR 0 4
3184: PUSH
3185: LD_INT 22
3187: PUSH
3188: LD_INT 8
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 50
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: LD_INT 2
3203: PUSH
3204: LD_INT 30
3206: PUSH
3207: LD_INT 4
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 30
3216: PUSH
3217: LD_INT 5
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 32
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 31
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: LIST
3255: PPUSH
3256: CALL_OW 69
3260: ST_TO_ADDR
// if tmp then
3261: LD_VAR 0 4
3265: IFFALSE 3376
// begin for b in tmp do
3267: LD_ADDR_VAR 0 2
3271: PUSH
3272: LD_VAR 0 4
3276: PUSH
3277: FOR_IN
3278: IFFALSE 3374
// begin case GetBType ( b ) of b_armoury , b_barracks :
3280: LD_VAR 0 2
3284: PPUSH
3285: CALL_OW 266
3289: PUSH
3290: LD_INT 4
3292: DOUBLE
3293: EQUAL
3294: IFTRUE 3304
3296: LD_INT 5
3298: DOUBLE
3299: EQUAL
3300: IFTRUE 3304
3302: GO 3315
3304: POP
// p := 6 ; b_breastwork , b_bunker :
3305: LD_ADDR_VAR 0 3
3309: PUSH
3310: LD_INT 6
3312: ST_TO_ADDR
3313: GO 3341
3315: LD_INT 31
3317: DOUBLE
3318: EQUAL
3319: IFTRUE 3329
3321: LD_INT 32
3323: DOUBLE
3324: EQUAL
3325: IFTRUE 3329
3327: GO 3340
3329: POP
// p := 1 ; end ;
3330: LD_ADDR_VAR 0 3
3334: PUSH
3335: LD_INT 1
3337: ST_TO_ADDR
3338: GO 3341
3340: POP
// if UnitsInside ( b ) < p then
3341: LD_VAR 0 2
3345: PPUSH
3346: CALL_OW 313
3350: PUSH
3351: LD_VAR 0 3
3355: LESS
3356: IFFALSE 3372
// ComEnterUnit ( i , b ) ;
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_VAR 0 2
3367: PPUSH
3368: CALL_OW 120
// end ;
3372: GO 3277
3374: POP
3375: POP
// end ; end ;
3376: GO 3100
3378: POP
3379: POP
// if sci then
3380: LD_VAR 0 7
3384: IFFALSE 3439
// for i in sci do
3386: LD_ADDR_VAR 0 1
3390: PUSH
3391: LD_VAR 0 7
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3437
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3399: LD_VAR 0 1
3403: PPUSH
3404: LD_INT 80
3406: PPUSH
3407: LD_INT 49
3409: PPUSH
3410: CALL_OW 297
3414: PUSH
3415: LD_INT 9
3417: GREATER
3418: IFFALSE 3435
// ComMoveXY ( i , 80 , 49 ) ;
3420: LD_VAR 0 1
3424: PPUSH
3425: LD_INT 80
3427: PPUSH
3428: LD_INT 49
3430: PPUSH
3431: CALL_OW 111
// end ;
3435: GO 3396
3437: POP
3438: POP
// if mech then
3439: LD_VAR 0 8
3443: IFFALSE 3657
// for i in mech do
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: LD_VAR 0 8
3454: PUSH
3455: FOR_IN
3456: IFFALSE 3655
// begin hasVehicle := IsInUnit ( i ) ;
3458: LD_ADDR_VAR 0 10
3462: PUSH
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 310
3472: ST_TO_ADDR
// if enemyInBase then
3473: LD_VAR 0 9
3477: IFFALSE 3573
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3479: LD_VAR 0 10
3483: PUSH
3484: LD_VAR 0 10
3488: PPUSH
3489: CALL_OW 256
3493: PUSH
3494: LD_INT 500
3496: GREATER
3497: AND
3498: IFFALSE 3526
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3500: LD_VAR 0 10
3504: PPUSH
3505: LD_VAR 0 9
3509: PPUSH
3510: LD_VAR 0 10
3514: PPUSH
3515: CALL_OW 74
3519: PPUSH
3520: CALL_OW 115
3524: GO 3571
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3526: LD_VAR 0 10
3530: PPUSH
3531: LD_INT 86
3533: PPUSH
3534: LD_INT 49
3536: PPUSH
3537: CALL_OW 297
3541: PUSH
3542: LD_INT 8
3544: GREATER
3545: IFFALSE 3571
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3547: LD_VAR 0 10
3551: PPUSH
3552: LD_INT 86
3554: PPUSH
3555: LD_INT 49
3557: PPUSH
3558: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3562: LD_VAR 0 1
3566: PPUSH
3567: CALL 61868 0 1
// end end else
3571: GO 3653
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3573: LD_VAR 0 1
3577: PPUSH
3578: LD_INT 86
3580: PPUSH
3581: LD_INT 49
3583: PPUSH
3584: CALL_OW 297
3588: PUSH
3589: LD_INT 8
3591: GREATER
3592: IFFALSE 3611
// ComMoveXY ( i , 86 , 49 ) else
3594: LD_VAR 0 1
3598: PPUSH
3599: LD_INT 86
3601: PPUSH
3602: LD_INT 49
3604: PPUSH
3605: CALL_OW 111
3609: GO 3653
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3611: LD_VAR 0 10
3615: PUSH
3616: LD_VAR 0 10
3620: PPUSH
3621: CALL_OW 256
3625: PUSH
3626: LD_INT 1000
3628: LESS
3629: AND
3630: IFFALSE 3653
// begin SetFuel ( hasVehicle , 100 ) ;
3632: LD_VAR 0 10
3636: PPUSH
3637: LD_INT 100
3639: PPUSH
3640: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3644: LD_VAR 0 1
3648: PPUSH
3649: CALL 61748 0 1
// end ; end ; end ;
3653: GO 3455
3655: POP
3656: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3657: LD_ADDR_VAR 0 4
3661: PUSH
3662: LD_INT 12
3664: PPUSH
3665: LD_INT 3
3667: PUSH
3668: LD_INT 24
3670: PUSH
3671: LD_INT 1000
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: LD_INT 21
3684: PUSH
3685: LD_INT 3
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: PPUSH
3696: CALL_OW 70
3700: ST_TO_ADDR
// if tmp and eng then
3701: LD_VAR 0 4
3705: PUSH
3706: LD_VAR 0 6
3710: AND
3711: IFFALSE 3817
// begin for i in eng do
3713: LD_ADDR_VAR 0 1
3717: PUSH
3718: LD_VAR 0 6
3722: PUSH
3723: FOR_IN
3724: IFFALSE 3815
// if IsInUnit ( i ) then
3726: LD_VAR 0 1
3730: PPUSH
3731: CALL_OW 310
3735: IFFALSE 3748
// ComExitBuilding ( i ) else
3737: LD_VAR 0 1
3741: PPUSH
3742: CALL_OW 122
3746: GO 3813
// if GetLives ( i ) = 1000 then
3748: LD_VAR 0 1
3752: PPUSH
3753: CALL_OW 256
3757: PUSH
3758: LD_INT 1000
3760: EQUAL
3761: IFFALSE 3783
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3763: LD_VAR 0 1
3767: PPUSH
3768: LD_VAR 0 4
3772: PUSH
3773: LD_INT 1
3775: ARRAY
3776: PPUSH
3777: CALL_OW 130
3781: GO 3813
// if GetLives ( i ) < 700 then
3783: LD_VAR 0 1
3787: PPUSH
3788: CALL_OW 256
3792: PUSH
3793: LD_INT 700
3795: LESS
3796: IFFALSE 3813
// ComMoveXY ( i , 80 , 49 ) ;
3798: LD_VAR 0 1
3802: PPUSH
3803: LD_INT 80
3805: PPUSH
3806: LD_INT 49
3808: PPUSH
3809: CALL_OW 111
3813: GO 3723
3815: POP
3816: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3817: LD_VAR 0 4
3821: NOT
3822: PUSH
3823: LD_VAR 0 6
3827: PPUSH
3828: LD_INT 3
3830: PUSH
3831: LD_INT 54
3833: PUSH
3834: EMPTY
3835: LIST
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: PPUSH
3841: CALL_OW 72
3845: AND
3846: IFFALSE 3935
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3848: LD_ADDR_VAR 0 1
3852: PUSH
3853: LD_VAR 0 6
3857: PPUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 54
3863: PUSH
3864: EMPTY
3865: LIST
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PPUSH
3871: CALL_OW 72
3875: PUSH
3876: FOR_IN
3877: IFFALSE 3933
// if GetLives ( i ) < 1000 then
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 256
3888: PUSH
3889: LD_INT 1000
3891: LESS
3892: IFFALSE 3911
// ComMoveXY ( i , 80 , 49 ) else
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 80
3901: PPUSH
3902: LD_INT 49
3904: PPUSH
3905: CALL_OW 111
3909: GO 3931
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3911: LD_VAR 0 1
3915: PPUSH
3916: LD_INT 86
3918: PPUSH
3919: LD_INT 54
3921: PPUSH
3922: CALL_OW 428
3926: PPUSH
3927: CALL_OW 120
3931: GO 3876
3933: POP
3934: POP
// end ;
3935: PPOPN 10
3937: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3938: LD_INT 0
3940: PPUSH
3941: PPUSH
3942: PPUSH
3943: PPUSH
// uc_side := 5 ;
3944: LD_ADDR_OWVAR 20
3948: PUSH
3949: LD_INT 5
3951: ST_TO_ADDR
// uc_nation := 2 ;
3952: LD_ADDR_OWVAR 21
3956: PUSH
3957: LD_INT 2
3959: ST_TO_ADDR
// omarSquad := [ ] ;
3960: LD_ADDR_EXP 46
3964: PUSH
3965: EMPTY
3966: ST_TO_ADDR
// for i := 1 to 4 do
3967: LD_ADDR_VAR 0 2
3971: PUSH
3972: DOUBLE
3973: LD_INT 1
3975: DEC
3976: ST_TO_ADDR
3977: LD_INT 4
3979: PUSH
3980: FOR_TO
3981: IFFALSE 4104
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: DOUBLE
3989: LD_INT 1
3991: DEC
3992: ST_TO_ADDR
3993: LD_INT 6
3995: PUSH
3996: LD_INT 2
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: LD_EXP 21
4006: PLUS
4007: PUSH
4008: LD_INT 2
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: PUSH
4017: LD_VAR 0 2
4021: ARRAY
4022: PUSH
4023: FOR_TO
4024: IFFALSE 4100
// begin PrepareHuman ( false , i , 5 ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_VAR 0 2
4033: PPUSH
4034: LD_INT 5
4036: PPUSH
4037: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4041: LD_ADDR_EXP 46
4045: PUSH
4046: LD_EXP 46
4050: PPUSH
4051: CALL_OW 44
4055: PPUSH
4056: CALL 60257 0 2
4060: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4061: LD_VAR 0 2
4065: PUSH
4066: LD_INT 1
4068: EQUAL
4069: PUSH
4070: LD_INT 50
4072: PPUSH
4073: CALL_OW 13
4077: AND
4078: IFFALSE 4098
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4080: LD_EXP 46
4084: PUSH
4085: LD_EXP 46
4089: ARRAY
4090: PPUSH
4091: LD_INT 8
4093: PPUSH
4094: CALL_OW 336
// end ;
4098: GO 4023
4100: POP
4101: POP
// end ;
4102: GO 3980
4104: POP
4105: POP
// if HexInfo ( 340 , 205 ) then
4106: LD_INT 340
4108: PPUSH
4109: LD_INT 205
4111: PPUSH
4112: CALL_OW 428
4116: IFFALSE 4133
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4118: LD_INT 340
4120: PPUSH
4121: LD_INT 205
4123: PPUSH
4124: CALL_OW 428
4128: PPUSH
4129: CALL_OW 64
// p := 0 ;
4133: LD_ADDR_VAR 0 4
4137: PUSH
4138: LD_INT 0
4140: ST_TO_ADDR
// for i in omarSquad do
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: LD_EXP 46
4150: PUSH
4151: FOR_IN
4152: IFFALSE 4353
// begin uc_direction := 4 ;
4154: LD_ADDR_OWVAR 24
4158: PUSH
4159: LD_INT 4
4161: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4162: LD_VAR 0 2
4166: PPUSH
4167: CALL_OW 257
4171: PUSH
4172: LD_INT 3
4174: EQUAL
4175: PUSH
4176: LD_VAR 0 4
4180: PUSH
4181: LD_INT 2
4183: LESS
4184: AND
4185: IFFALSE 4314
// begin p := p + 1 ;
4187: LD_ADDR_VAR 0 4
4191: PUSH
4192: LD_VAR 0 4
4196: PUSH
4197: LD_INT 1
4199: PLUS
4200: ST_TO_ADDR
// uc_side := 5 ;
4201: LD_ADDR_OWVAR 20
4205: PUSH
4206: LD_INT 5
4208: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4209: LD_INT 0
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 12
4219: IFFALSE 4250
// begin uc_nation := 2 ;
4221: LD_ADDR_OWVAR 21
4225: PUSH
4226: LD_INT 2
4228: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4229: LD_INT 13
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 1
4237: PPUSH
4238: LD_INT 27
4240: PPUSH
4241: LD_INT 88
4243: PPUSH
4244: CALL 28383 0 5
// end else
4248: GO 4277
// begin uc_nation := 3 ;
4250: LD_ADDR_OWVAR 21
4254: PUSH
4255: LD_INT 3
4257: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4258: LD_INT 22
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 45
4269: PPUSH
4270: LD_INT 88
4272: PPUSH
4273: CALL 28383 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4277: CALL_OW 45
4281: PPUSH
4282: LD_INT 13
4284: PPUSH
4285: LD_INT 0
4287: PPUSH
4288: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4292: LD_VAR 0 2
4296: PPUSH
4297: LD_INT 340
4299: PPUSH
4300: LD_INT 205
4302: PPUSH
4303: CALL_OW 428
4307: PPUSH
4308: CALL_OW 52
// end else
4312: GO 4329
// PlaceUnitArea ( i , southSpawn , false ) ;
4314: LD_VAR 0 2
4318: PPUSH
4319: LD_INT 13
4321: PPUSH
4322: LD_INT 0
4324: PPUSH
4325: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4329: LD_VAR 0 2
4333: PPUSH
4334: LD_INT 333
4336: PPUSH
4337: LD_INT 210
4339: PPUSH
4340: CALL_OW 111
// wait ( 0 0$2 ) ;
4344: LD_INT 70
4346: PPUSH
4347: CALL_OW 67
// end ;
4351: GO 4151
4353: POP
4354: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4355: LD_EXP 38
4359: PPUSH
4360: LD_INT 340
4362: PPUSH
4363: LD_INT 205
4365: PPUSH
4366: LD_INT 0
4368: PPUSH
4369: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4373: LD_EXP 38
4377: PPUSH
4378: LD_INT 333
4380: PPUSH
4381: LD_INT 206
4383: PPUSH
4384: CALL_OW 111
// wait ( 0 0$2 ) ;
4388: LD_INT 70
4390: PPUSH
4391: CALL_OW 67
// ComHold ( omarSquad ) ;
4395: LD_EXP 46
4399: PPUSH
4400: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4404: LD_EXP 38
4408: PUSH
4409: LD_EXP 46
4413: PPUSH
4414: LD_INT 2
4416: PUSH
4417: LD_INT 25
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 25
4429: PUSH
4430: LD_INT 8
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 72
4446: UNION
4447: PUSH
4448: LD_INT 22
4450: PUSH
4451: LD_INT 5
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 21
4460: PUSH
4461: LD_INT 2
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PPUSH
4472: CALL_OW 69
4476: UNION
4477: PPUSH
4478: LD_INT 315
4480: PPUSH
4481: LD_INT 214
4483: PPUSH
4484: CALL_OW 114
// wait ( 0 0$22 ) ;
4488: LD_INT 770
4490: PPUSH
4491: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4495: LD_EXP 46
4499: PUSH
4500: LD_EXP 38
4504: UNION
4505: PPUSH
4506: LD_INT 329
4508: PPUSH
4509: LD_INT 231
4511: PPUSH
4512: CALL_OW 114
// end ;
4516: LD_VAR 0 1
4520: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4521: LD_EXP 10
4525: IFFALSE 5608
4527: GO 4529
4529: DISABLE
4530: LD_INT 0
4532: PPUSH
4533: PPUSH
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
// begin enable ;
4543: ENABLE
// if not omarSquad then
4544: LD_EXP 46
4548: NOT
4549: IFFALSE 4553
// exit ;
4551: GO 5608
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4553: LD_ADDR_VAR 0 10
4557: PUSH
4558: LD_INT 14
4560: PPUSH
4561: LD_INT 81
4563: PUSH
4564: LD_INT 5
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PPUSH
4571: CALL_OW 70
4575: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4576: LD_ADDR_VAR 0 6
4580: PUSH
4581: LD_EXP 46
4585: PPUSH
4586: LD_INT 2
4588: PUSH
4589: LD_INT 25
4591: PUSH
4592: LD_INT 1
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 25
4601: PUSH
4602: LD_INT 8
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 72
4618: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4619: LD_ADDR_VAR 0 7
4623: PUSH
4624: LD_EXP 46
4628: PPUSH
4629: LD_INT 25
4631: PUSH
4632: LD_INT 2
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: PPUSH
4639: CALL_OW 72
4643: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4644: LD_ADDR_VAR 0 9
4648: PUSH
4649: LD_EXP 46
4653: PPUSH
4654: LD_INT 25
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PPUSH
4664: CALL_OW 72
4668: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4669: LD_ADDR_VAR 0 8
4673: PUSH
4674: LD_EXP 46
4678: PPUSH
4679: LD_INT 25
4681: PUSH
4682: LD_INT 4
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 72
4693: ST_TO_ADDR
// if sol then
4694: LD_VAR 0 6
4698: IFFALSE 5062
// for i in sol do
4700: LD_ADDR_VAR 0 1
4704: PUSH
4705: LD_VAR 0 6
4709: PUSH
4710: FOR_IN
4711: IFFALSE 5060
// if not HasTask ( i ) then
4713: LD_VAR 0 1
4717: PPUSH
4718: CALL_OW 314
4722: NOT
4723: IFFALSE 5058
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 310
4734: NOT
4735: PUSH
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 256
4745: PUSH
4746: LD_INT 500
4748: LESS
4749: AND
4750: PUSH
4751: LD_VAR 0 1
4755: PPUSH
4756: LD_INT 333
4758: PPUSH
4759: LD_INT 234
4761: PPUSH
4762: CALL_OW 297
4766: PUSH
4767: LD_INT 6
4769: GREATER
4770: AND
4771: IFFALSE 4790
// begin ComMoveXY ( i , 333 , 234 ) ;
4773: LD_VAR 0 1
4777: PPUSH
4778: LD_INT 333
4780: PPUSH
4781: LD_INT 234
4783: PPUSH
4784: CALL_OW 111
// continue ;
4788: GO 4710
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4790: LD_ADDR_VAR 0 5
4794: PUSH
4795: LD_INT 22
4797: PUSH
4798: LD_INT 5
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 58
4807: PUSH
4808: EMPTY
4809: LIST
4810: PUSH
4811: LD_INT 50
4813: PUSH
4814: EMPTY
4815: LIST
4816: PUSH
4817: LD_INT 2
4819: PUSH
4820: LD_INT 30
4822: PUSH
4823: LD_INT 32
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 30
4832: PUSH
4833: LD_INT 31
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4856: LD_VAR 0 5
4860: PUSH
4861: LD_VAR 0 1
4865: PPUSH
4866: CALL_OW 310
4870: PPUSH
4871: CALL_OW 266
4875: PUSH
4876: LD_INT 31
4878: NONEQUAL
4879: AND
4880: IFFALSE 4962
// begin for j in tmp do
4882: LD_ADDR_VAR 0 2
4886: PUSH
4887: LD_VAR 0 5
4891: PUSH
4892: FOR_IN
4893: IFFALSE 4958
// if GetTag ( j ) <> 1 then
4895: LD_VAR 0 2
4899: PPUSH
4900: CALL_OW 110
4904: PUSH
4905: LD_INT 1
4907: NONEQUAL
4908: IFFALSE 4956
// begin SetTag ( j , 1 ) ;
4910: LD_VAR 0 2
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL_OW 109
// if IsInUnit ( i ) then
4922: LD_VAR 0 1
4926: PPUSH
4927: CALL_OW 310
4931: IFFALSE 4942
// ComExit ( i ) ;
4933: LD_VAR 0 1
4937: PPUSH
4938: CALL 60645 0 1
// AddComEnterUnit ( i , j ) ;
4942: LD_VAR 0 1
4946: PPUSH
4947: LD_VAR 0 2
4951: PPUSH
4952: CALL_OW 180
// end ;
4956: GO 4892
4958: POP
4959: POP
// end else
4960: GO 5058
// if not IsInUnit ( i ) then
4962: LD_VAR 0 1
4966: PPUSH
4967: CALL_OW 310
4971: NOT
4972: IFFALSE 5058
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
4974: LD_ADDR_VAR 0 5
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 5
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 50
4991: PUSH
4992: EMPTY
4993: LIST
4994: PUSH
4995: LD_INT 30
4997: PUSH
4998: LD_INT 4
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 69
5014: ST_TO_ADDR
// if tmp then
5015: LD_VAR 0 5
5019: IFFALSE 5058
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5021: LD_VAR 0 5
5025: PUSH
5026: LD_INT 1
5028: ARRAY
5029: PPUSH
5030: CALL_OW 313
5034: PUSH
5035: LD_INT 6
5037: LESS
5038: IFFALSE 5058
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_VAR 0 5
5049: PUSH
5050: LD_INT 1
5052: ARRAY
5053: PPUSH
5054: CALL_OW 120
// end ; end ;
5058: GO 4710
5060: POP
5061: POP
// if sci then
5062: LD_VAR 0 8
5066: IFFALSE 5121
// for i in sci do
5068: LD_ADDR_VAR 0 1
5072: PUSH
5073: LD_VAR 0 8
5077: PUSH
5078: FOR_IN
5079: IFFALSE 5119
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5081: LD_VAR 0 1
5085: PPUSH
5086: LD_INT 333
5088: PPUSH
5089: LD_INT 234
5091: PPUSH
5092: CALL_OW 297
5096: PUSH
5097: LD_INT 9
5099: GREATER
5100: IFFALSE 5117
// ComMoveXY ( i , 333 , 234 ) ;
5102: LD_VAR 0 1
5106: PPUSH
5107: LD_INT 333
5109: PPUSH
5110: LD_INT 234
5112: PPUSH
5113: CALL_OW 111
// end ;
5117: GO 5078
5119: POP
5120: POP
// if mech then
5121: LD_VAR 0 9
5125: IFFALSE 5330
// for i in mech do
5127: LD_ADDR_VAR 0 1
5131: PUSH
5132: LD_VAR 0 9
5136: PUSH
5137: FOR_IN
5138: IFFALSE 5328
// begin hasVehicle := IsInUnit ( i ) ;
5140: LD_ADDR_VAR 0 11
5144: PUSH
5145: LD_VAR 0 1
5149: PPUSH
5150: CALL_OW 310
5154: ST_TO_ADDR
// if enemyInBase then
5155: LD_VAR 0 10
5159: IFFALSE 5246
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5161: LD_VAR 0 11
5165: PUSH
5166: LD_VAR 0 11
5170: PPUSH
5171: CALL_OW 256
5175: PUSH
5176: LD_INT 500
5178: GREATER
5179: AND
5180: IFFALSE 5208
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5182: LD_VAR 0 11
5186: PPUSH
5187: LD_VAR 0 10
5191: PPUSH
5192: LD_VAR 0 11
5196: PPUSH
5197: CALL_OW 74
5201: PPUSH
5202: CALL_OW 115
5206: GO 5244
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5208: LD_VAR 0 11
5212: PPUSH
5213: LD_INT 333
5215: PPUSH
5216: LD_INT 234
5218: PPUSH
5219: CALL_OW 297
5223: PUSH
5224: LD_INT 6
5226: GREATER
5227: IFFALSE 5244
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5229: LD_VAR 0 11
5233: PPUSH
5234: LD_INT 333
5236: PPUSH
5237: LD_INT 234
5239: PPUSH
5240: CALL_OW 111
// end else
5244: GO 5326
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5246: LD_VAR 0 1
5250: PPUSH
5251: LD_INT 333
5253: PPUSH
5254: LD_INT 234
5256: PPUSH
5257: CALL_OW 297
5261: PUSH
5262: LD_INT 6
5264: GREATER
5265: IFFALSE 5284
// ComMoveXY ( i , 333 , 234 ) else
5267: LD_VAR 0 1
5271: PPUSH
5272: LD_INT 333
5274: PPUSH
5275: LD_INT 234
5277: PPUSH
5278: CALL_OW 111
5282: GO 5326
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5284: LD_VAR 0 11
5288: PUSH
5289: LD_VAR 0 11
5293: PPUSH
5294: CALL_OW 256
5298: PUSH
5299: LD_INT 1000
5301: LESS
5302: AND
5303: IFFALSE 5326
// begin SetFuel ( hasVehicle , 100 ) ;
5305: LD_VAR 0 11
5309: PPUSH
5310: LD_INT 100
5312: PPUSH
5313: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5317: LD_VAR 0 1
5321: PPUSH
5322: CALL 61748 0 1
// end ; end ; end ;
5326: GO 5137
5328: POP
5329: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5330: LD_ADDR_VAR 0 5
5334: PUSH
5335: LD_INT 14
5337: PPUSH
5338: LD_INT 3
5340: PUSH
5341: LD_INT 24
5343: PUSH
5344: LD_INT 1000
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: LD_INT 21
5357: PUSH
5358: LD_INT 3
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PPUSH
5369: CALL_OW 70
5373: ST_TO_ADDR
// if tmp and eng then
5374: LD_VAR 0 5
5378: PUSH
5379: LD_VAR 0 7
5383: AND
5384: IFFALSE 5490
// begin for i in eng do
5386: LD_ADDR_VAR 0 1
5390: PUSH
5391: LD_VAR 0 7
5395: PUSH
5396: FOR_IN
5397: IFFALSE 5488
// if IsInUnit ( i ) then
5399: LD_VAR 0 1
5403: PPUSH
5404: CALL_OW 310
5408: IFFALSE 5421
// ComExitBuilding ( i ) else
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 122
5419: GO 5486
// if GetLives ( i ) = 1000 then
5421: LD_VAR 0 1
5425: PPUSH
5426: CALL_OW 256
5430: PUSH
5431: LD_INT 1000
5433: EQUAL
5434: IFFALSE 5456
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 130
5454: GO 5486
// if GetLives ( i ) < 700 then
5456: LD_VAR 0 1
5460: PPUSH
5461: CALL_OW 256
5465: PUSH
5466: LD_INT 700
5468: LESS
5469: IFFALSE 5486
// ComMoveXY ( i , 333 , 234 ) ;
5471: LD_VAR 0 1
5475: PPUSH
5476: LD_INT 333
5478: PPUSH
5479: LD_INT 234
5481: PPUSH
5482: CALL_OW 111
5486: GO 5396
5488: POP
5489: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5490: LD_VAR 0 5
5494: NOT
5495: PUSH
5496: LD_VAR 0 7
5500: PPUSH
5501: LD_INT 3
5503: PUSH
5504: LD_INT 54
5506: PUSH
5507: EMPTY
5508: LIST
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: CALL_OW 72
5518: AND
5519: IFFALSE 5608
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5521: LD_ADDR_VAR 0 1
5525: PUSH
5526: LD_VAR 0 7
5530: PPUSH
5531: LD_INT 3
5533: PUSH
5534: LD_INT 54
5536: PUSH
5537: EMPTY
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 72
5548: PUSH
5549: FOR_IN
5550: IFFALSE 5606
// if GetLives ( i ) < 1000 then
5552: LD_VAR 0 1
5556: PPUSH
5557: CALL_OW 256
5561: PUSH
5562: LD_INT 1000
5564: LESS
5565: IFFALSE 5584
// ComMoveXY ( i , 333 , 234 ) else
5567: LD_VAR 0 1
5571: PPUSH
5572: LD_INT 333
5574: PPUSH
5575: LD_INT 234
5577: PPUSH
5578: CALL_OW 111
5582: GO 5604
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5584: LD_VAR 0 1
5588: PPUSH
5589: LD_INT 341
5591: PPUSH
5592: LD_INT 232
5594: PPUSH
5595: CALL_OW 428
5599: PPUSH
5600: CALL_OW 120
5604: GO 5549
5606: POP
5607: POP
// end ;
5608: PPOPN 11
5610: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5611: LD_EXP 38
5615: PPUSH
5616: CALL_OW 256
5620: PUSH
5621: LD_INT 1000
5623: LESS
5624: IFFALSE 5642
5626: GO 5628
5628: DISABLE
// begin enable ;
5629: ENABLE
// SetLives ( Omar , 1000 ) ;
5630: LD_EXP 38
5634: PPUSH
5635: LD_INT 1000
5637: PPUSH
5638: CALL_OW 234
// end ;
5642: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5643: LD_EXP 23
5647: IFFALSE 6523
5649: GO 5651
5651: DISABLE
5652: LD_INT 0
5654: PPUSH
5655: PPUSH
// begin wait ( 0 0$25 ) ;
5656: LD_INT 875
5658: PPUSH
5659: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5663: LD_EXP 46
5667: PPUSH
5668: LD_INT 2
5670: PUSH
5671: LD_INT 25
5673: PUSH
5674: LD_INT 1
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 25
5683: PUSH
5684: LD_INT 8
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: PPUSH
5696: CALL_OW 72
5700: PPUSH
5701: CALL_OW 122
// wait ( 0 0$3 ) ;
5705: LD_INT 105
5707: PPUSH
5708: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5712: LD_EXP 46
5716: PUSH
5717: LD_EXP 38
5721: UNION
5722: PPUSH
5723: LD_INT 225
5725: PPUSH
5726: LD_INT 223
5728: PPUSH
5729: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5733: LD_INT 22
5735: PUSH
5736: LD_INT 5
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 2
5745: PUSH
5746: LD_INT 25
5748: PUSH
5749: LD_INT 1
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PUSH
5756: LD_INT 25
5758: PUSH
5759: LD_INT 8
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: LD_INT 21
5768: PUSH
5769: LD_INT 2
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PPUSH
5786: CALL_OW 69
5790: PPUSH
5791: LD_INT 167
5793: PPUSH
5794: LD_INT 231
5796: PPUSH
5797: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5801: LD_EXP 46
5805: PPUSH
5806: LD_INT 25
5808: PUSH
5809: LD_INT 4
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 72
5820: PPUSH
5821: LD_INT 222
5823: PPUSH
5824: LD_INT 229
5826: PPUSH
5827: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5831: LD_INT 35
5833: PPUSH
5834: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5838: LD_ADDR_VAR 0 1
5842: PUSH
5843: LD_EXP 46
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_INT 5
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 21
5860: PUSH
5861: LD_INT 2
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PPUSH
5872: CALL_OW 69
5876: UNION
5877: PUSH
5878: FOR_IN
5879: IFFALSE 6514
// begin if IsDead ( i ) then
5881: LD_VAR 0 1
5885: PPUSH
5886: CALL_OW 301
5890: IFFALSE 5910
// begin omarSquad := omarSquad diff i ;
5892: LD_ADDR_EXP 46
5896: PUSH
5897: LD_EXP 46
5901: PUSH
5902: LD_VAR 0 1
5906: DIFF
5907: ST_TO_ADDR
// continue ;
5908: GO 5878
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5910: LD_VAR 0 1
5914: PPUSH
5915: CALL_OW 257
5919: PUSH
5920: LD_INT 1
5922: PUSH
5923: LD_INT 8
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: IN
5930: IFFALSE 6124
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 256
5941: PUSH
5942: LD_INT 700
5944: LESS
5945: PUSH
5946: LD_VAR 0 1
5950: PPUSH
5951: CALL_OW 110
5955: PUSH
5956: LD_INT 0
5958: EQUAL
5959: AND
5960: IFFALSE 5989
// begin SetTag ( i , 1 ) ;
5962: LD_VAR 0 1
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
5974: LD_VAR 0 1
5978: PPUSH
5979: LD_INT 222
5981: PPUSH
5982: LD_INT 229
5984: PPUSH
5985: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
5989: LD_VAR 0 1
5993: PPUSH
5994: CALL_OW 256
5998: PUSH
5999: LD_INT 1000
6001: EQUAL
6002: PUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 110
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: AND
6017: IFFALSE 6031
// SetTag ( i , 0 ) ;
6019: LD_VAR 0 1
6023: PPUSH
6024: LD_INT 0
6026: PPUSH
6027: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6031: LD_VAR 0 1
6035: PPUSH
6036: CALL_OW 110
6040: PUSH
6041: LD_INT 0
6043: EQUAL
6044: PUSH
6045: LD_VAR 0 1
6049: PPUSH
6050: CALL_OW 256
6054: PUSH
6055: LD_INT 700
6057: GREATEREQUAL
6058: AND
6059: PUSH
6060: LD_VAR 0 1
6064: PPUSH
6065: CALL_OW 314
6069: NOT
6070: AND
6071: IFFALSE 6124
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6073: LD_INT 18
6075: PPUSH
6076: LD_INT 22
6078: PUSH
6079: LD_INT 3
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PPUSH
6086: CALL_OW 70
6090: IFFALSE 6109
// ComAgressiveMove ( i , 167 , 231 ) else
6092: LD_VAR 0 1
6096: PPUSH
6097: LD_INT 167
6099: PPUSH
6100: LD_INT 231
6102: PPUSH
6103: CALL_OW 114
6107: GO 6124
// ComAgressiveMove ( i , 106 , 153 ) ;
6109: LD_VAR 0 1
6113: PPUSH
6114: LD_INT 106
6116: PPUSH
6117: LD_INT 153
6119: PPUSH
6120: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6124: LD_VAR 0 1
6128: PPUSH
6129: CALL_OW 247
6133: PUSH
6134: LD_INT 2
6136: EQUAL
6137: IFFALSE 6512
// begin nearestPoint := [ 219 , 219 ] ;
6139: LD_ADDR_VAR 0 2
6143: PUSH
6144: LD_INT 219
6146: PUSH
6147: LD_INT 219
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6154: LD_VAR 0 1
6158: PPUSH
6159: LD_INT 156
6161: PPUSH
6162: LD_INT 202
6164: PPUSH
6165: CALL_OW 297
6169: PUSH
6170: LD_VAR 0 1
6174: PPUSH
6175: LD_INT 219
6177: PPUSH
6178: LD_INT 219
6180: PPUSH
6181: CALL_OW 297
6185: LESS
6186: IFFALSE 6203
// nearestPoint := [ 156 , 202 ] ;
6188: LD_ADDR_VAR 0 2
6192: PUSH
6193: LD_INT 156
6195: PUSH
6196: LD_INT 202
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6203: LD_VAR 0 1
6207: PPUSH
6208: CALL_OW 256
6212: PUSH
6213: LD_INT 700
6215: LESS
6216: PUSH
6217: LD_VAR 0 1
6221: PPUSH
6222: CALL_OW 110
6226: PUSH
6227: LD_INT 0
6229: EQUAL
6230: AND
6231: IFFALSE 6272
// begin SetTag ( i , 1 ) ;
6233: LD_VAR 0 1
6237: PPUSH
6238: LD_INT 1
6240: PPUSH
6241: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6245: LD_VAR 0 1
6249: PPUSH
6250: LD_VAR 0 2
6254: PUSH
6255: LD_INT 1
6257: ARRAY
6258: PPUSH
6259: LD_VAR 0 2
6263: PUSH
6264: LD_INT 2
6266: ARRAY
6267: PPUSH
6268: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6272: LD_VAR 0 1
6276: PPUSH
6277: CALL_OW 256
6281: PUSH
6282: LD_INT 700
6284: LESS
6285: PUSH
6286: LD_VAR 0 1
6290: PPUSH
6291: CALL_OW 110
6295: PUSH
6296: LD_INT 1
6298: EQUAL
6299: AND
6300: PUSH
6301: LD_VAR 0 1
6305: PPUSH
6306: CALL_OW 311
6310: AND
6311: PUSH
6312: LD_VAR 0 1
6316: PPUSH
6317: LD_VAR 0 2
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: LD_VAR 0 2
6330: PUSH
6331: LD_INT 2
6333: ARRAY
6334: PPUSH
6335: CALL_OW 297
6339: PUSH
6340: LD_INT 10
6342: LESS
6343: AND
6344: IFFALSE 6355
// ComRepairVehicleAndReturn ( i ) ;
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL 61748 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6355: LD_VAR 0 1
6359: PPUSH
6360: CALL_OW 256
6364: PUSH
6365: LD_INT 1000
6367: EQUAL
6368: PUSH
6369: LD_VAR 0 1
6373: PPUSH
6374: CALL_OW 110
6378: PUSH
6379: LD_INT 1
6381: EQUAL
6382: AND
6383: PUSH
6384: LD_VAR 0 1
6388: PPUSH
6389: CALL_OW 311
6393: AND
6394: IFFALSE 6408
// SetTag ( i , 0 ) ;
6396: LD_VAR 0 1
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6408: LD_VAR 0 1
6412: PPUSH
6413: CALL_OW 110
6417: PUSH
6418: LD_INT 0
6420: EQUAL
6421: PUSH
6422: LD_VAR 0 1
6426: PPUSH
6427: CALL_OW 256
6431: PUSH
6432: LD_INT 700
6434: GREATEREQUAL
6435: AND
6436: PUSH
6437: LD_VAR 0 1
6441: PPUSH
6442: CALL_OW 311
6446: AND
6447: PUSH
6448: LD_VAR 0 1
6452: PPUSH
6453: CALL_OW 314
6457: NOT
6458: AND
6459: IFFALSE 6512
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6461: LD_INT 18
6463: PPUSH
6464: LD_INT 22
6466: PUSH
6467: LD_INT 3
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PPUSH
6474: CALL_OW 70
6478: IFFALSE 6497
// ComAgressiveMove ( i , 167 , 231 ) else
6480: LD_VAR 0 1
6484: PPUSH
6485: LD_INT 167
6487: PPUSH
6488: LD_INT 231
6490: PPUSH
6491: CALL_OW 114
6495: GO 6512
// ComAgressiveMove ( i , 106 , 153 ) ;
6497: LD_VAR 0 1
6501: PPUSH
6502: LD_INT 106
6504: PPUSH
6505: LD_INT 153
6507: PPUSH
6508: CALL_OW 114
// end ; end ;
6512: GO 5878
6514: POP
6515: POP
// until not omarSquad ;
6516: LD_EXP 46
6520: NOT
6521: IFFALSE 5831
// end ; end_of_file
6523: PPOPN 2
6525: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6526: LD_INT 0
6528: PPUSH
// uc_side := side ;
6529: LD_ADDR_OWVAR 20
6533: PUSH
6534: LD_VAR 0 1
6538: ST_TO_ADDR
// uc_nation := nation ;
6539: LD_ADDR_OWVAR 21
6543: PUSH
6544: LD_VAR 0 2
6548: ST_TO_ADDR
// vc_chassis := chassis ;
6549: LD_ADDR_OWVAR 37
6553: PUSH
6554: LD_VAR 0 3
6558: ST_TO_ADDR
// vc_engine := engine ;
6559: LD_ADDR_OWVAR 39
6563: PUSH
6564: LD_VAR 0 4
6568: ST_TO_ADDR
// vc_control := control ;
6569: LD_ADDR_OWVAR 38
6573: PUSH
6574: LD_VAR 0 5
6578: ST_TO_ADDR
// vc_weapon := weapon ;
6579: LD_ADDR_OWVAR 40
6583: PUSH
6584: LD_VAR 0 6
6588: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6589: LD_ADDR_OWVAR 41
6593: PUSH
6594: LD_VAR 0 7
6598: ST_TO_ADDR
// result := CreateVehicle ;
6599: LD_ADDR_VAR 0 8
6603: PUSH
6604: CALL_OW 45
6608: ST_TO_ADDR
// end ;
6609: LD_VAR 0 8
6613: RET
// export function SayX ( units , ident ) ; var i ; begin
6614: LD_INT 0
6616: PPUSH
6617: PPUSH
// result := false ;
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: LD_INT 0
6625: ST_TO_ADDR
// if not units then
6626: LD_VAR 0 1
6630: NOT
6631: IFFALSE 6635
// exit ;
6633: GO 6689
// for i in units do
6635: LD_ADDR_VAR 0 4
6639: PUSH
6640: LD_VAR 0 1
6644: PUSH
6645: FOR_IN
6646: IFFALSE 6687
// if IsOk ( i ) then
6648: LD_VAR 0 4
6652: PPUSH
6653: CALL_OW 302
6657: IFFALSE 6685
// begin Say ( i , ident ) ;
6659: LD_VAR 0 4
6663: PPUSH
6664: LD_VAR 0 2
6668: PPUSH
6669: CALL_OW 88
// result := i ;
6673: LD_ADDR_VAR 0 3
6677: PUSH
6678: LD_VAR 0 4
6682: ST_TO_ADDR
// break ;
6683: GO 6687
// end ;
6685: GO 6645
6687: POP
6688: POP
// end ;
6689: LD_VAR 0 3
6693: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6694: LD_INT 0
6696: PPUSH
6697: PPUSH
// InitUc ;
6698: CALL_OW 18
// InitHc ;
6702: CALL_OW 19
// uc_side := 0 ;
6706: LD_ADDR_OWVAR 20
6710: PUSH
6711: LD_INT 0
6713: ST_TO_ADDR
// uc_nation := 0 ;
6714: LD_ADDR_OWVAR 21
6718: PUSH
6719: LD_INT 0
6721: ST_TO_ADDR
// for i = 1 to amount do
6722: LD_ADDR_VAR 0 4
6726: PUSH
6727: DOUBLE
6728: LD_INT 1
6730: DEC
6731: ST_TO_ADDR
6732: LD_VAR 0 2
6736: PUSH
6737: FOR_TO
6738: IFFALSE 6820
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6740: LD_ADDR_OWVAR 29
6744: PUSH
6745: LD_INT 9
6747: PPUSH
6748: LD_INT 12
6750: PPUSH
6751: CALL_OW 12
6755: PUSH
6756: LD_INT 9
6758: PPUSH
6759: LD_INT 12
6761: PPUSH
6762: CALL_OW 12
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6771: LD_ADDR_OWVAR 35
6775: PUSH
6776: LD_INT 1
6778: NEG
6779: PPUSH
6780: LD_INT 1
6782: PPUSH
6783: CALL_OW 12
6787: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6788: LD_INT 0
6790: PPUSH
6791: LD_INT 12
6793: PPUSH
6794: LD_INT 1
6796: PPUSH
6797: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6801: CALL_OW 44
6805: PPUSH
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_INT 0
6813: PPUSH
6814: CALL_OW 49
// end ;
6818: GO 6737
6820: POP
6821: POP
// InitHc ;
6822: CALL_OW 19
// end ;
6826: LD_VAR 0 3
6830: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6831: LD_INT 0
6833: PPUSH
6834: PPUSH
// uc_side := 0 ;
6835: LD_ADDR_OWVAR 20
6839: PUSH
6840: LD_INT 0
6842: ST_TO_ADDR
// uc_nation := 0 ;
6843: LD_ADDR_OWVAR 21
6847: PUSH
6848: LD_INT 0
6850: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
6851: LD_INT 7
6853: PPUSH
6854: LD_INT 6
6856: PUSH
6857: LD_INT 5
6859: PUSH
6860: LD_INT 4
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: PUSH
6868: LD_OWVAR 67
6872: ARRAY
6873: PPUSH
6874: CALL 6694 0 2
// for i = 1 to 2 do
6878: LD_ADDR_VAR 0 4
6882: PUSH
6883: DOUBLE
6884: LD_INT 1
6886: DEC
6887: ST_TO_ADDR
6888: LD_INT 2
6890: PUSH
6891: FOR_TO
6892: IFFALSE 6931
// begin vc_chassis := class_mastodont ;
6894: LD_ADDR_OWVAR 37
6898: PUSH
6899: LD_EXP 74
6903: ST_TO_ADDR
// vc_control := control_rider ;
6904: LD_ADDR_OWVAR 38
6908: PUSH
6909: LD_INT 4
6911: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6912: CALL_OW 45
6916: PPUSH
6917: LD_VAR 0 1
6921: PPUSH
6922: LD_INT 0
6924: PPUSH
6925: CALL 59171 0 3
// end ;
6929: GO 6891
6931: POP
6932: POP
// for i := 1 to 4 do
6933: LD_ADDR_VAR 0 4
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 4
6945: PUSH
6946: FOR_TO
6947: IFFALSE 6986
// begin hc_class := class_horse ;
6949: LD_ADDR_OWVAR 28
6953: PUSH
6954: LD_EXP 75
6958: ST_TO_ADDR
// hc_gallery :=  ;
6959: LD_ADDR_OWVAR 33
6963: PUSH
6964: LD_STRING 
6966: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
6967: CALL_OW 44
6971: PPUSH
6972: LD_VAR 0 1
6976: PPUSH
6977: LD_INT 0
6979: PPUSH
6980: CALL_OW 49
// end ;
6984: GO 6946
6986: POP
6987: POP
// for i = 1 to 5 do
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: DOUBLE
6994: LD_INT 1
6996: DEC
6997: ST_TO_ADDR
6998: LD_INT 5
7000: PUSH
7001: FOR_TO
7002: IFFALSE 7056
// begin hc_class = class_tiger ;
7004: LD_ADDR_OWVAR 28
7008: PUSH
7009: LD_INT 14
7011: ST_TO_ADDR
// hc_gallery =  ;
7012: LD_ADDR_OWVAR 33
7016: PUSH
7017: LD_STRING 
7019: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7020: LD_ADDR_OWVAR 35
7024: PUSH
7025: LD_INT 7
7027: NEG
7028: PPUSH
7029: LD_INT 7
7031: PPUSH
7032: CALL_OW 12
7036: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7037: CALL_OW 44
7041: PPUSH
7042: LD_VAR 0 1
7046: PPUSH
7047: LD_INT 0
7049: PPUSH
7050: CALL 59171 0 3
// end ;
7054: GO 7001
7056: POP
7057: POP
// for i := 1 to 4 do
7058: LD_ADDR_VAR 0 4
7062: PUSH
7063: DOUBLE
7064: LD_INT 1
7066: DEC
7067: ST_TO_ADDR
7068: LD_INT 4
7070: PUSH
7071: FOR_TO
7072: IFFALSE 7109
// begin hc_class := class_phororhacos ;
7074: LD_ADDR_OWVAR 28
7078: PUSH
7079: LD_INT 18
7081: ST_TO_ADDR
// hc_gallery :=  ;
7082: LD_ADDR_OWVAR 33
7086: PUSH
7087: LD_STRING 
7089: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7090: CALL_OW 44
7094: PPUSH
7095: LD_VAR 0 1
7099: PPUSH
7100: LD_INT 0
7102: PPUSH
7103: CALL_OW 49
// end ;
7107: GO 7071
7109: POP
7110: POP
// for i := 1 to 4 do
7111: LD_ADDR_VAR 0 4
7115: PUSH
7116: DOUBLE
7117: LD_INT 1
7119: DEC
7120: ST_TO_ADDR
7121: LD_INT 4
7123: PUSH
7124: FOR_TO
7125: IFFALSE 7162
// begin hc_class := class_baggie ;
7127: LD_ADDR_OWVAR 28
7131: PUSH
7132: LD_INT 13
7134: ST_TO_ADDR
// hc_gallery :=  ;
7135: LD_ADDR_OWVAR 33
7139: PUSH
7140: LD_STRING 
7142: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7143: CALL_OW 44
7147: PPUSH
7148: LD_VAR 0 1
7152: PPUSH
7153: LD_INT 0
7155: PPUSH
7156: CALL_OW 49
// end ;
7160: GO 7124
7162: POP
7163: POP
// for i := 1 to 7 do
7164: LD_ADDR_VAR 0 4
7168: PUSH
7169: DOUBLE
7170: LD_INT 1
7172: DEC
7173: ST_TO_ADDR
7174: LD_INT 7
7176: PUSH
7177: FOR_TO
7178: IFFALSE 7215
// begin hc_class := class_frog ;
7180: LD_ADDR_OWVAR 28
7184: PUSH
7185: LD_INT 19
7187: ST_TO_ADDR
// hc_gallery :=  ;
7188: LD_ADDR_OWVAR 33
7192: PUSH
7193: LD_STRING 
7195: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7196: CALL_OW 44
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_INT 0
7208: PPUSH
7209: CALL_OW 49
// end ;
7213: GO 7177
7215: POP
7216: POP
// end ;
7217: LD_VAR 0 3
7221: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
// if not observer or not unit then
7227: LD_VAR 0 1
7231: NOT
7232: PUSH
7233: LD_VAR 0 2
7237: NOT
7238: OR
7239: IFFALSE 7243
// exit ;
7241: GO 7291
// if not See ( GetSide ( observer ) , unit ) then
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 255
7252: PPUSH
7253: LD_VAR 0 2
7257: PPUSH
7258: CALL_OW 292
7262: NOT
7263: IFFALSE 7267
// exit ;
7265: GO 7291
// result := GetDistUnits ( observer , unit ) < 12 ;
7267: LD_ADDR_VAR 0 3
7271: PUSH
7272: LD_VAR 0 1
7276: PPUSH
7277: LD_VAR 0 2
7281: PPUSH
7282: CALL_OW 296
7286: PUSH
7287: LD_INT 12
7289: LESS
7290: ST_TO_ADDR
// end ;
7291: LD_VAR 0 3
7295: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7296: LD_INT 0
7298: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7299: LD_VAR 0 2
7303: PUSH
7304: LD_INT 1
7306: ARRAY
7307: PPUSH
7308: LD_VAR 0 2
7312: PUSH
7313: LD_INT 2
7315: ARRAY
7316: PPUSH
7317: CALL_OW 488
7321: PUSH
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_INT 2
7338: ARRAY
7339: PPUSH
7340: CALL_OW 428
7344: PUSH
7345: LD_INT 0
7347: EQUAL
7348: AND
7349: IFFALSE 7383
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7351: LD_VAR 0 1
7355: PPUSH
7356: LD_VAR 0 2
7360: PUSH
7361: LD_INT 1
7363: ARRAY
7364: PPUSH
7365: LD_VAR 0 2
7369: PUSH
7370: LD_INT 2
7372: ARRAY
7373: PPUSH
7374: LD_VAR 0 3
7378: PPUSH
7379: CALL_OW 48
// end ;
7383: LD_VAR 0 4
7387: RET
// export function ReverseArray ( array ) ; var i ; begin
7388: LD_INT 0
7390: PPUSH
7391: PPUSH
// if not array then
7392: LD_VAR 0 1
7396: NOT
7397: IFFALSE 7401
// exit ;
7399: GO 7459
// result := [ ] ;
7401: LD_ADDR_VAR 0 2
7405: PUSH
7406: EMPTY
7407: ST_TO_ADDR
// for i := 1 to array do
7408: LD_ADDR_VAR 0 3
7412: PUSH
7413: DOUBLE
7414: LD_INT 1
7416: DEC
7417: ST_TO_ADDR
7418: LD_VAR 0 1
7422: PUSH
7423: FOR_TO
7424: IFFALSE 7457
// result := Insert ( result , 1 , array [ i ] ) ;
7426: LD_ADDR_VAR 0 2
7430: PUSH
7431: LD_VAR 0 2
7435: PPUSH
7436: LD_INT 1
7438: PPUSH
7439: LD_VAR 0 1
7443: PUSH
7444: LD_VAR 0 3
7448: ARRAY
7449: PPUSH
7450: CALL_OW 2
7454: ST_TO_ADDR
7455: GO 7423
7457: POP
7458: POP
// end ;
7459: LD_VAR 0 2
7463: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7464: LD_INT 0
7466: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7467: LD_VAR 0 1
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: LD_VAR 0 3
7481: PPUSH
7482: LD_VAR 0 4
7486: PPUSH
7487: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7491: LD_VAR 0 1
7495: PPUSH
7496: LD_VAR 0 2
7500: PPUSH
7501: LD_VAR 0 3
7505: PPUSH
7506: CALL_OW 331
// end ;
7510: LD_VAR 0 5
7514: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7515: LD_INT 0
7517: PPUSH
// if not units then
7518: LD_VAR 0 1
7522: NOT
7523: IFFALSE 7527
// exit ;
7525: GO 7610
// result := true ;
7527: LD_ADDR_VAR 0 4
7531: PUSH
7532: LD_INT 1
7534: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7535: LD_VAR 0 1
7539: PPUSH
7540: LD_INT 26
7542: PUSH
7543: LD_INT 1
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PPUSH
7550: CALL_OW 72
7554: PUSH
7555: LD_INT 1
7557: ARRAY
7558: PPUSH
7559: LD_VAR 0 2
7563: PPUSH
7564: CALL_OW 88
7568: NOT
7569: IFFALSE 7610
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7571: LD_ADDR_VAR 0 4
7575: PUSH
7576: LD_VAR 0 1
7580: PPUSH
7581: LD_INT 26
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 72
7595: PUSH
7596: LD_INT 1
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL_OW 88
7609: ST_TO_ADDR
// end ;
7610: LD_VAR 0 4
7614: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7615: LD_INT 0
7617: PPUSH
7618: PPUSH
// if not group then
7619: LD_VAR 0 2
7623: NOT
7624: IFFALSE 7628
// exit ;
7626: GO 7673
// for i in group do
7628: LD_ADDR_VAR 0 4
7632: PUSH
7633: LD_VAR 0 2
7637: PUSH
7638: FOR_IN
7639: IFFALSE 7671
// if See ( side , i ) then
7641: LD_VAR 0 1
7645: PPUSH
7646: LD_VAR 0 4
7650: PPUSH
7651: CALL_OW 292
7655: IFFALSE 7669
// begin result := true ;
7657: LD_ADDR_VAR 0 3
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// exit ;
7665: POP
7666: POP
7667: GO 7673
// end ;
7669: GO 7638
7671: POP
7672: POP
// end ; end_of_file
7673: LD_VAR 0 3
7677: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7678: LD_INT 0
7680: PPUSH
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
// uc_side := 3 ;
7687: LD_ADDR_OWVAR 20
7691: PUSH
7692: LD_INT 3
7694: ST_TO_ADDR
// uc_nation := 3 ;
7695: LD_ADDR_OWVAR 21
7699: PUSH
7700: LD_INT 3
7702: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7703: LD_ADDR_EXP 47
7707: PUSH
7708: LD_STRING Morozov
7710: PPUSH
7711: CALL_OW 25
7715: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7716: LD_EXP 47
7720: PPUSH
7721: LD_INT 52
7723: PPUSH
7724: CALL_OW 52
// if not gaidarKilled then
7728: LD_EXP 7
7732: NOT
7733: IFFALSE 7766
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7735: LD_ADDR_EXP 48
7739: PUSH
7740: LD_STRING Gaydar
7742: PPUSH
7743: LD_INT 0
7745: PPUSH
7746: LD_STRING 
7748: PPUSH
7749: CALL 23519 0 3
7753: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7754: LD_EXP 48
7758: PPUSH
7759: LD_INT 52
7761: PPUSH
7762: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7766: LD_INT 52
7768: PPUSH
7769: LD_STRING lenin
7771: PPUSH
7772: CALL_OW 500
// ruOutsiders := [ ] ;
7776: LD_ADDR_EXP 50
7780: PUSH
7781: EMPTY
7782: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7783: LD_ADDR_EXP 52
7787: PUSH
7788: EMPTY
7789: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7790: LD_ADDR_EXP 53
7794: PUSH
7795: EMPTY
7796: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7797: LD_ADDR_EXP 54
7801: PUSH
7802: EMPTY
7803: ST_TO_ADDR
// ruAttackers := [ ] ;
7804: LD_ADDR_EXP 55
7808: PUSH
7809: EMPTY
7810: ST_TO_ADDR
// waveStrength := 0 ;
7811: LD_ADDR_EXP 56
7815: PUSH
7816: LD_INT 0
7818: ST_TO_ADDR
// if not gaidarKilled then
7819: LD_EXP 7
7823: NOT
7824: IFFALSE 7834
// waveStrength := 2 ;
7826: LD_ADDR_EXP 56
7830: PUSH
7831: LD_INT 2
7833: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7834: LD_ADDR_VAR 0 7
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_INT 3
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: LD_INT 21
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PPUSH
7863: CALL_OW 69
7867: ST_TO_ADDR
// for i in tmp do
7868: LD_ADDR_VAR 0 2
7872: PUSH
7873: LD_VAR 0 7
7877: PUSH
7878: FOR_IN
7879: IFFALSE 7912
// SetBLevel ( i , [ 5 , 5 , 6 ] [ Difficulty ] ) ;
7881: LD_VAR 0 2
7885: PPUSH
7886: LD_INT 5
7888: PUSH
7889: LD_INT 5
7891: PUSH
7892: LD_INT 6
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: PUSH
7900: LD_OWVAR 67
7904: ARRAY
7905: PPUSH
7906: CALL_OW 241
7910: GO 7878
7912: POP
7913: POP
// for i := 1 to 3 do
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: DOUBLE
7920: LD_INT 1
7922: DEC
7923: ST_TO_ADDR
7924: LD_INT 3
7926: PUSH
7927: FOR_TO
7928: IFFALSE 7966
// begin PrepareHuman ( false , 1 , 0 ) ;
7930: LD_INT 0
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: LD_INT 0
7938: PPUSH
7939: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7943: CALL_OW 44
7947: PPUSH
7948: LD_INT 75
7950: PPUSH
7951: LD_INT 49
7953: PPUSH
7954: LD_INT 3
7956: PPUSH
7957: LD_INT 0
7959: PPUSH
7960: CALL_OW 50
// end ;
7964: GO 7927
7966: POP
7967: POP
// for i := 1 to 4 do
7968: LD_ADDR_VAR 0 2
7972: PUSH
7973: DOUBLE
7974: LD_INT 1
7976: DEC
7977: ST_TO_ADDR
7978: LD_INT 4
7980: PUSH
7981: FOR_TO
7982: IFFALSE 8028
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
7984: LD_INT 0
7986: PPUSH
7987: LD_INT 1
7989: PPUSH
7990: LD_INT 2
7992: PPUSH
7993: CALL_OW 12
7997: PPUSH
7998: LD_INT 0
8000: PPUSH
8001: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8005: CALL_OW 44
8009: PPUSH
8010: LD_INT 330
8012: PPUSH
8013: LD_INT 231
8015: PPUSH
8016: LD_INT 5
8018: PPUSH
8019: LD_INT 0
8021: PPUSH
8022: CALL_OW 50
// end ;
8026: GO 7981
8028: POP
8029: POP
// hc_class := 1 ;
8030: LD_ADDR_OWVAR 28
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8038: CALL_OW 44
8042: PPUSH
8043: LD_INT 324
8045: PPUSH
8046: LD_INT 219
8048: PPUSH
8049: CALL_OW 428
8053: PPUSH
8054: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8058: CALL_OW 44
8062: PPUSH
8063: LD_INT 316
8065: PPUSH
8066: LD_INT 223
8068: PPUSH
8069: CALL_OW 428
8073: PPUSH
8074: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8078: LD_ADDR_VAR 0 7
8082: PUSH
8083: LD_INT 172
8085: PPUSH
8086: LD_INT 198
8088: PPUSH
8089: CALL_OW 428
8093: PPUSH
8094: CALL_OW 274
8098: PUSH
8099: LD_INT 189
8101: PPUSH
8102: LD_INT 156
8104: PPUSH
8105: CALL_OW 428
8109: PPUSH
8110: CALL_OW 274
8114: PUSH
8115: LD_INT 341
8117: PPUSH
8118: LD_INT 232
8120: PPUSH
8121: CALL_OW 428
8125: PPUSH
8126: CALL_OW 274
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: ST_TO_ADDR
// for i in tmp do
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_VAR 0 7
8145: PUSH
8146: FOR_IN
8147: IFFALSE 8181
// begin SetResourceType ( i , mat_cans , 200 ) ;
8149: LD_VAR 0 2
8153: PPUSH
8154: LD_INT 1
8156: PPUSH
8157: LD_INT 200
8159: PPUSH
8160: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8164: LD_VAR 0 2
8168: PPUSH
8169: LD_INT 2
8171: PPUSH
8172: LD_INT 200
8174: PPUSH
8175: CALL_OW 277
// end ;
8179: GO 8146
8181: POP
8182: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 177 , 114 ] , [ 138 , 96 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8183: LD_ADDR_VAR 0 7
8187: PUSH
8188: LD_INT 198
8190: PUSH
8191: LD_INT 158
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: LD_INT 203
8200: PUSH
8201: LD_INT 166
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: LD_INT 177
8210: PUSH
8211: LD_INT 114
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: PUSH
8218: LD_INT 138
8220: PUSH
8221: LD_INT 96
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: LD_INT 181
8230: PUSH
8231: LD_INT 209
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PUSH
8238: LD_INT 178
8240: PUSH
8241: LD_INT 196
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 181
8250: PUSH
8251: LD_INT 212
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: ST_TO_ADDR
// for i := 1 to tmp do
8267: LD_ADDR_VAR 0 2
8271: PUSH
8272: DOUBLE
8273: LD_INT 1
8275: DEC
8276: ST_TO_ADDR
8277: LD_VAR 0 7
8281: PUSH
8282: FOR_TO
8283: IFFALSE 8400
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
8285: LD_INT 0
8287: PPUSH
8288: LD_INT 1
8290: PPUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: LD_INT 6
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: PUSH
8305: LD_OWVAR 67
8309: ARRAY
8310: PPUSH
8311: CALL_OW 380
// un := CreateHuman ;
8315: LD_ADDR_VAR 0 5
8319: PUSH
8320: CALL_OW 44
8324: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8325: LD_ADDR_VAR 0 4
8329: PUSH
8330: LD_VAR 0 7
8334: PUSH
8335: LD_VAR 0 2
8339: ARRAY
8340: PUSH
8341: LD_INT 1
8343: ARRAY
8344: PPUSH
8345: LD_VAR 0 7
8349: PUSH
8350: LD_VAR 0 2
8354: ARRAY
8355: PUSH
8356: LD_INT 2
8358: ARRAY
8359: PPUSH
8360: CALL_OW 428
8364: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8365: LD_VAR 0 5
8369: PPUSH
8370: LD_VAR 0 4
8374: PPUSH
8375: CALL 56091 0 1
8379: PPUSH
8380: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8384: LD_VAR 0 5
8388: PPUSH
8389: LD_VAR 0 4
8393: PPUSH
8394: CALL_OW 52
// end ;
8398: GO 8282
8400: POP
8401: POP
// for i := 1 to 3 do
8402: LD_ADDR_VAR 0 2
8406: PUSH
8407: DOUBLE
8408: LD_INT 1
8410: DEC
8411: ST_TO_ADDR
8412: LD_INT 3
8414: PUSH
8415: FOR_TO
8416: IFFALSE 8471
// begin InitHc ;
8418: CALL_OW 19
// uc_nation := 0 ;
8422: LD_ADDR_OWVAR 21
8426: PUSH
8427: LD_INT 0
8429: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8430: LD_ADDR_OWVAR 28
8434: PUSH
8435: LD_INT 16
8437: ST_TO_ADDR
// un := CreateHuman ;
8438: LD_ADDR_VAR 0 5
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8448: LD_VAR 0 5
8452: PPUSH
8453: LD_INT 194
8455: PPUSH
8456: LD_INT 164
8458: PPUSH
8459: LD_INT 6
8461: PPUSH
8462: LD_INT 0
8464: PPUSH
8465: CALL_OW 50
// end ;
8469: GO 8415
8471: POP
8472: POP
// uc_nation := 3 ;
8473: LD_ADDR_OWVAR 21
8477: PUSH
8478: LD_INT 3
8480: ST_TO_ADDR
// if Difficulty > 1 then
8481: LD_OWVAR 67
8485: PUSH
8486: LD_INT 1
8488: GREATER
8489: IFFALSE 8745
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8491: LD_INT 24
8493: PPUSH
8494: LD_INT 1
8496: PPUSH
8497: LD_INT 1
8499: PPUSH
8500: LD_INT 44
8502: PPUSH
8503: LD_INT 10
8505: PPUSH
8506: CALL 28383 0 5
// un := CreateVehicle ;
8510: LD_ADDR_VAR 0 5
8514: PUSH
8515: CALL_OW 45
8519: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8520: LD_VAR 0 5
8524: PPUSH
8525: LD_INT 199
8527: PPUSH
8528: LD_INT 162
8530: PPUSH
8531: LD_INT 1
8533: PPUSH
8534: LD_INT 0
8536: PPUSH
8537: CALL 62188 0 5
// ComHold ( un ) ;
8541: LD_VAR 0 5
8545: PPUSH
8546: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8550: LD_INT 0
8552: PPUSH
8553: LD_INT 3
8555: PPUSH
8556: LD_INT 4
8558: PPUSH
8559: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8563: CALL_OW 44
8567: PPUSH
8568: LD_VAR 0 5
8572: PPUSH
8573: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8577: LD_INT 24
8579: PPUSH
8580: LD_INT 1
8582: PPUSH
8583: LD_INT 1
8585: PPUSH
8586: LD_INT 45
8588: PPUSH
8589: LD_INT 10
8591: PPUSH
8592: CALL 28383 0 5
// un := CreateVehicle ;
8596: LD_ADDR_VAR 0 5
8600: PUSH
8601: CALL_OW 45
8605: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8606: LD_VAR 0 5
8610: PPUSH
8611: LD_INT 129
8613: PPUSH
8614: LD_INT 93
8616: PPUSH
8617: LD_INT 1
8619: PPUSH
8620: LD_INT 0
8622: PPUSH
8623: CALL 62188 0 5
// ComHold ( un ) ;
8627: LD_VAR 0 5
8631: PPUSH
8632: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8636: LD_INT 0
8638: PPUSH
8639: LD_INT 3
8641: PPUSH
8642: LD_INT 4
8644: PPUSH
8645: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8649: CALL_OW 44
8653: PPUSH
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 52
// bc_type := b_armoury ;
8663: LD_ADDR_OWVAR 42
8667: PUSH
8668: LD_INT 4
8670: ST_TO_ADDR
// bc_level := 6 ;
8671: LD_ADDR_OWVAR 43
8675: PUSH
8676: LD_INT 6
8678: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
8679: LD_INT 120
8681: PPUSH
8682: LD_INT 100
8684: PPUSH
8685: LD_INT 5
8687: PPUSH
8688: CALL_OW 47
// for i := 1 to 3 do
8692: LD_ADDR_VAR 0 2
8696: PUSH
8697: DOUBLE
8698: LD_INT 1
8700: DEC
8701: ST_TO_ADDR
8702: LD_INT 3
8704: PUSH
8705: FOR_TO
8706: IFFALSE 8743
// begin PrepareHuman ( false , 1 , 5 ) ;
8708: LD_INT 0
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 5
8716: PPUSH
8717: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
8721: CALL_OW 44
8725: PPUSH
8726: LD_INT 120
8728: PPUSH
8729: LD_INT 100
8731: PPUSH
8732: CALL_OW 428
8736: PPUSH
8737: CALL_OW 52
// end ;
8741: GO 8705
8743: POP
8744: POP
// end ; tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
8745: LD_ADDR_VAR 0 7
8749: PUSH
8750: LD_INT 135
8752: PUSH
8753: LD_INT 100
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 137
8762: PUSH
8763: LD_INT 92
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: ST_TO_ADDR
// for i := 1 to tmp do
8774: LD_ADDR_VAR 0 2
8778: PUSH
8779: DOUBLE
8780: LD_INT 1
8782: DEC
8783: ST_TO_ADDR
8784: LD_VAR 0 7
8788: PUSH
8789: FOR_TO
8790: IFFALSE 8956
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
8792: LD_INT 22
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 24
8800: PUSH
8801: LD_INT 24
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: PUSH
8810: LD_OWVAR 67
8814: PUSH
8815: LD_INT 0
8817: PPUSH
8818: LD_INT 1
8820: PPUSH
8821: CALL_OW 12
8825: PLUS
8826: ARRAY
8827: PPUSH
8828: LD_INT 1
8830: PPUSH
8831: LD_INT 1
8833: PPUSH
8834: LD_INT 44
8836: PPUSH
8837: LD_INT 25
8839: PPUSH
8840: CALL 28383 0 5
// veh := CreateVehicle ;
8844: LD_ADDR_VAR 0 6
8848: PUSH
8849: CALL_OW 45
8853: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8854: LD_VAR 0 6
8858: PPUSH
8859: LD_INT 2
8861: PPUSH
8862: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
8866: LD_VAR 0 6
8870: PPUSH
8871: LD_VAR 0 7
8875: PUSH
8876: LD_VAR 0 2
8880: ARRAY
8881: PUSH
8882: LD_INT 1
8884: ARRAY
8885: PPUSH
8886: LD_VAR 0 7
8890: PUSH
8891: LD_VAR 0 2
8895: ARRAY
8896: PUSH
8897: LD_INT 2
8899: ARRAY
8900: PPUSH
8901: LD_INT 0
8903: PPUSH
8904: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
8908: LD_INT 0
8910: PPUSH
8911: LD_INT 3
8913: PPUSH
8914: LD_INT 6
8916: PPUSH
8917: CALL_OW 380
// un := CreateHuman ;
8921: LD_ADDR_VAR 0 5
8925: PUSH
8926: CALL_OW 44
8930: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8931: LD_VAR 0 5
8935: PPUSH
8936: LD_VAR 0 6
8940: PPUSH
8941: CALL_OW 52
// ComHold ( veh ) ;
8945: LD_VAR 0 6
8949: PPUSH
8950: CALL_OW 140
// end ;
8954: GO 8789
8956: POP
8957: POP
// if Difficulty > 1 then
8958: LD_OWVAR 67
8962: PUSH
8963: LD_INT 1
8965: GREATER
8966: IFFALSE 9323
// begin tmp := [ 191 , 122 ] ;
8968: LD_ADDR_VAR 0 7
8972: PUSH
8973: LD_INT 191
8975: PUSH
8976: LD_INT 122
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
8983: LD_INT 24
8985: PPUSH
8986: LD_INT 1
8988: PPUSH
8989: LD_INT 1
8991: PPUSH
8992: LD_INT 44
8994: PPUSH
8995: LD_INT 30
8997: PPUSH
8998: CALL 28383 0 5
// ruBlockadeTank := CreateVehicle ;
9002: LD_ADDR_EXP 49
9006: PUSH
9007: CALL_OW 45
9011: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9012: LD_EXP 49
9016: PPUSH
9017: LD_INT 2
9019: PPUSH
9020: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9024: LD_EXP 49
9028: PPUSH
9029: LD_INT 191
9031: PPUSH
9032: LD_INT 122
9034: PPUSH
9035: LD_INT 0
9037: PPUSH
9038: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
9042: LD_INT 1
9044: PPUSH
9045: LD_INT 5
9047: PUSH
9048: LD_INT 6
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: LD_OWVAR 67
9059: PUSH
9060: LD_INT 1
9062: MINUS
9063: ARRAY
9064: PPUSH
9065: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9069: CALL_OW 44
9073: PPUSH
9074: LD_EXP 49
9078: PPUSH
9079: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9083: LD_EXP 49
9087: PPUSH
9088: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9092: LD_ADDR_EXP 51
9096: PUSH
9097: EMPTY
9098: ST_TO_ADDR
// for i := 1 to [ 3 , 4 ] [ Difficulty - 1 ] do
9099: LD_ADDR_VAR 0 2
9103: PUSH
9104: DOUBLE
9105: LD_INT 1
9107: DEC
9108: ST_TO_ADDR
9109: LD_INT 3
9111: PUSH
9112: LD_INT 4
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: LD_OWVAR 67
9123: PUSH
9124: LD_INT 1
9126: MINUS
9127: ARRAY
9128: PUSH
9129: FOR_TO
9130: IFFALSE 9242
// begin PrepareHuman ( false , 1 , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
9132: LD_INT 0
9134: PPUSH
9135: LD_INT 1
9137: PPUSH
9138: LD_INT 5
9140: PUSH
9141: LD_INT 6
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_OWVAR 67
9152: PUSH
9153: LD_INT 1
9155: MINUS
9156: ARRAY
9157: PPUSH
9158: CALL_OW 380
// un := CreateHuman ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: CALL_OW 44
9171: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9172: LD_VAR 0 5
9176: PPUSH
9177: LD_INT 9
9179: PPUSH
9180: LD_INT 0
9182: PPUSH
9183: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9187: LD_VAR 0 5
9191: PPUSH
9192: LD_INT 198
9194: PPUSH
9195: LD_INT 129
9197: PPUSH
9198: CALL_OW 118
// AddComCrawl ( un ) ;
9202: LD_VAR 0 5
9206: PPUSH
9207: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9211: LD_ADDR_EXP 51
9215: PUSH
9216: LD_EXP 51
9220: PPUSH
9221: LD_EXP 51
9225: PUSH
9226: LD_INT 1
9228: PLUS
9229: PPUSH
9230: LD_VAR 0 5
9234: PPUSH
9235: CALL_OW 1
9239: ST_TO_ADDR
// end ;
9240: GO 9129
9242: POP
9243: POP
// PrepareHuman ( false , 4 , 5 ) ;
9244: LD_INT 0
9246: PPUSH
9247: LD_INT 4
9249: PPUSH
9250: LD_INT 5
9252: PPUSH
9253: CALL_OW 380
// un := CreateHuman ;
9257: LD_ADDR_VAR 0 5
9261: PUSH
9262: CALL_OW 44
9266: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9267: LD_VAR 0 5
9271: PPUSH
9272: LD_INT 179
9274: PPUSH
9275: LD_INT 113
9277: PPUSH
9278: LD_INT 0
9280: PPUSH
9281: CALL_OW 48
// ComHold ( un ) ;
9285: LD_VAR 0 5
9289: PPUSH
9290: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9294: LD_ADDR_EXP 51
9298: PUSH
9299: LD_EXP 51
9303: PPUSH
9304: LD_EXP 51
9308: PUSH
9309: LD_INT 1
9311: PLUS
9312: PPUSH
9313: LD_VAR 0 5
9317: PPUSH
9318: CALL_OW 1
9322: ST_TO_ADDR
// end ; tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_INT 167
9330: PPUSH
9331: LD_INT 243
9333: PPUSH
9334: CALL_OW 428
9338: PPUSH
9339: CALL_OW 274
9343: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9344: LD_VAR 0 7
9348: PPUSH
9349: LD_INT 1
9351: PPUSH
9352: LD_INT 1000
9354: PPUSH
9355: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9359: LD_VAR 0 7
9363: PPUSH
9364: LD_INT 2
9366: PPUSH
9367: LD_INT 400
9369: PPUSH
9370: CALL_OW 277
// tmp := HexInfo ( 169 , 226 ) ;
9374: LD_ADDR_VAR 0 7
9378: PUSH
9379: LD_INT 169
9381: PPUSH
9382: LD_INT 226
9384: PPUSH
9385: CALL_OW 428
9389: ST_TO_ADDR
// for i := 1 to 3 do
9390: LD_ADDR_VAR 0 2
9394: PUSH
9395: DOUBLE
9396: LD_INT 1
9398: DEC
9399: ST_TO_ADDR
9400: LD_INT 3
9402: PUSH
9403: FOR_TO
9404: IFFALSE 9491
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9406: LD_INT 0
9408: PPUSH
9409: LD_INT 1
9411: PPUSH
9412: LD_INT 4
9414: PUSH
9415: LD_INT 5
9417: PUSH
9418: LD_INT 5
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: PUSH
9426: LD_OWVAR 67
9430: ARRAY
9431: PPUSH
9432: CALL_OW 380
// un := CreateHuman ;
9436: LD_ADDR_VAR 0 5
9440: PUSH
9441: CALL_OW 44
9445: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9446: LD_VAR 0 5
9450: PPUSH
9451: LD_VAR 0 7
9455: PPUSH
9456: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9460: LD_ADDR_EXP 52
9464: PUSH
9465: LD_EXP 52
9469: PPUSH
9470: LD_EXP 52
9474: PUSH
9475: LD_INT 1
9477: PLUS
9478: PPUSH
9479: LD_VAR 0 5
9483: PPUSH
9484: CALL_OW 1
9488: ST_TO_ADDR
// end ;
9489: GO 9403
9491: POP
9492: POP
// tmp := [ [ 165 , 224 ] , [ 173 , 228 ] ] ;
9493: LD_ADDR_VAR 0 7
9497: PUSH
9498: LD_INT 165
9500: PUSH
9501: LD_INT 224
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 173
9510: PUSH
9511: LD_INT 228
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: ST_TO_ADDR
// for i := 1 to tmp do
9522: LD_ADDR_VAR 0 2
9526: PUSH
9527: DOUBLE
9528: LD_INT 1
9530: DEC
9531: ST_TO_ADDR
9532: LD_VAR 0 7
9536: PUSH
9537: FOR_TO
9538: IFFALSE 9655
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9540: LD_INT 0
9542: PPUSH
9543: LD_INT 1
9545: PPUSH
9546: LD_INT 4
9548: PUSH
9549: LD_INT 5
9551: PUSH
9552: LD_INT 5
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: PUSH
9560: LD_OWVAR 67
9564: ARRAY
9565: PPUSH
9566: CALL_OW 380
// un := CreateHuman ;
9570: LD_ADDR_VAR 0 5
9574: PUSH
9575: CALL_OW 44
9579: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9580: LD_VAR 0 5
9584: PPUSH
9585: LD_VAR 0 7
9589: PUSH
9590: LD_VAR 0 2
9594: ARRAY
9595: PUSH
9596: LD_INT 1
9598: ARRAY
9599: PPUSH
9600: LD_VAR 0 7
9604: PUSH
9605: LD_VAR 0 2
9609: ARRAY
9610: PUSH
9611: LD_INT 2
9613: ARRAY
9614: PPUSH
9615: CALL_OW 428
9619: PPUSH
9620: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9624: LD_ADDR_EXP 52
9628: PUSH
9629: LD_EXP 52
9633: PPUSH
9634: LD_EXP 52
9638: PUSH
9639: LD_INT 1
9641: PLUS
9642: PPUSH
9643: LD_VAR 0 5
9647: PPUSH
9648: CALL_OW 1
9652: ST_TO_ADDR
// end ;
9653: GO 9537
9655: POP
9656: POP
// for i := 1 to 2 do
9657: LD_ADDR_VAR 0 2
9661: PUSH
9662: DOUBLE
9663: LD_INT 1
9665: DEC
9666: ST_TO_ADDR
9667: LD_INT 2
9669: PUSH
9670: FOR_TO
9671: IFFALSE 9726
// begin InitHc ;
9673: CALL_OW 19
// uc_nation := 0 ;
9677: LD_ADDR_OWVAR 21
9681: PUSH
9682: LD_INT 0
9684: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
9685: LD_ADDR_OWVAR 28
9689: PUSH
9690: LD_INT 16
9692: ST_TO_ADDR
// un := CreateHuman ;
9693: LD_ADDR_VAR 0 5
9697: PUSH
9698: CALL_OW 44
9702: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
9703: LD_VAR 0 5
9707: PPUSH
9708: LD_INT 166
9710: PPUSH
9711: LD_INT 233
9713: PPUSH
9714: LD_INT 2
9716: PPUSH
9717: LD_INT 0
9719: PPUSH
9720: CALL_OW 50
// end ;
9724: GO 9670
9726: POP
9727: POP
// uc_nation := 3 ;
9728: LD_ADDR_OWVAR 21
9732: PUSH
9733: LD_INT 3
9735: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
9736: LD_ADDR_VAR 0 7
9740: PUSH
9741: LD_INT 71
9743: PUSH
9744: LD_INT 52
9746: PUSH
9747: LD_INT 11
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: ST_TO_ADDR
// for i in tmp do
9755: LD_ADDR_VAR 0 2
9759: PUSH
9760: LD_VAR 0 7
9764: PUSH
9765: FOR_IN
9766: IFFALSE 9810
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
9768: LD_VAR 0 2
9772: PPUSH
9773: CALL_OW 274
9777: PPUSH
9778: LD_INT 1
9780: PPUSH
9781: LD_INT 3000
9783: PPUSH
9784: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
9788: LD_VAR 0 2
9792: PPUSH
9793: CALL_OW 274
9797: PPUSH
9798: LD_INT 2
9800: PPUSH
9801: LD_INT 600
9803: PPUSH
9804: CALL_OW 277
// end ;
9808: GO 9765
9810: POP
9811: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
9812: LD_ADDR_VAR 0 7
9816: PUSH
9817: LD_INT 41
9819: PUSH
9820: LD_INT 57
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 38
9829: PUSH
9830: LD_INT 55
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 50
9839: PUSH
9840: LD_INT 73
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 51
9849: PUSH
9850: LD_INT 65
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 82
9859: PUSH
9860: LD_INT 93
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 87
9869: PUSH
9870: LD_INT 100
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: LD_INT 91
9879: PUSH
9880: LD_INT 109
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 84
9889: PUSH
9890: LD_INT 120
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 113
9899: PUSH
9900: LD_INT 153
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 123
9909: PUSH
9910: LD_INT 171
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 125
9919: PUSH
9920: LD_INT 178
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 125
9929: PUSH
9930: LD_INT 188
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 125
9939: PUSH
9940: LD_INT 201
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 33
9949: PUSH
9950: LD_INT 60
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: LD_INT 76
9959: PUSH
9960: LD_INT 95
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 84
9969: PUSH
9970: LD_INT 111
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 112
9979: PUSH
9980: LD_INT 165
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: ST_TO_ADDR
// for i := 1 to tmp do
10006: LD_ADDR_VAR 0 2
10010: PUSH
10011: DOUBLE
10012: LD_INT 1
10014: DEC
10015: ST_TO_ADDR
10016: LD_VAR 0 7
10020: PUSH
10021: FOR_TO
10022: IFFALSE 10261
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10024: LD_ADDR_VAR 0 4
10028: PUSH
10029: LD_VAR 0 7
10033: PUSH
10034: LD_VAR 0 2
10038: ARRAY
10039: PUSH
10040: LD_INT 1
10042: ARRAY
10043: PPUSH
10044: LD_VAR 0 7
10048: PUSH
10049: LD_VAR 0 2
10053: ARRAY
10054: PUSH
10055: LD_INT 2
10057: ARRAY
10058: PPUSH
10059: CALL_OW 428
10063: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10064: LD_VAR 0 4
10068: PPUSH
10069: CALL_OW 266
10073: PUSH
10074: LD_INT 4
10076: PUSH
10077: LD_INT 5
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: IN
10084: IFFALSE 10164
// begin for j := 1 to Difficulty do
10086: LD_ADDR_VAR 0 3
10090: PUSH
10091: DOUBLE
10092: LD_INT 1
10094: DEC
10095: ST_TO_ADDR
10096: LD_OWVAR 67
10100: PUSH
10101: FOR_TO
10102: IFFALSE 10160
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10104: LD_INT 0
10106: PPUSH
10107: LD_INT 1
10109: PPUSH
10110: LD_INT 4
10112: PUSH
10113: LD_INT 5
10115: PUSH
10116: LD_INT 5
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: LD_OWVAR 67
10128: ARRAY
10129: PPUSH
10130: CALL_OW 380
// un := CreateHuman ;
10134: LD_ADDR_VAR 0 5
10138: PUSH
10139: CALL_OW 44
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10144: LD_VAR 0 5
10148: PPUSH
10149: LD_VAR 0 4
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10101
10160: POP
10161: POP
// end else
10162: GO 10230
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10164: LD_INT 0
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: LD_INT 4
10172: PUSH
10173: LD_INT 5
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: LIST
10183: PUSH
10184: LD_OWVAR 67
10188: ARRAY
10189: PPUSH
10190: CALL_OW 380
// un := CreateHuman ;
10194: LD_ADDR_VAR 0 5
10198: PUSH
10199: CALL_OW 44
10203: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10204: LD_VAR 0 5
10208: PPUSH
10209: LD_VAR 0 4
10213: PPUSH
10214: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10218: LD_VAR 0 5
10222: PPUSH
10223: LD_INT 9
10225: PPUSH
10226: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10230: LD_ADDR_EXP 53
10234: PUSH
10235: LD_EXP 53
10239: PPUSH
10240: LD_EXP 53
10244: PUSH
10245: LD_INT 1
10247: PLUS
10248: PPUSH
10249: LD_VAR 0 5
10253: PPUSH
10254: CALL_OW 1
10258: ST_TO_ADDR
// end ;
10259: GO 10021
10261: POP
10262: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10263: LD_ADDR_VAR 0 4
10267: PUSH
10268: LD_INT 10
10270: PPUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 3
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 30
10283: PUSH
10284: LD_INT 32
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: LD_INT 58
10293: PUSH
10294: EMPTY
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: PPUSH
10302: CALL_OW 70
10306: PUSH
10307: FOR_IN
10308: IFFALSE 10434
// begin if not Prob ( [ 40 , 50 , 75 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10310: LD_INT 40
10312: PUSH
10313: LD_INT 50
10315: PUSH
10316: LD_INT 75
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: PUSH
10324: LD_OWVAR 67
10328: ARRAY
10329: PUSH
10330: LD_EXP 7
10334: PUSH
10335: LD_INT 10
10337: MUL
10338: MINUS
10339: PPUSH
10340: CALL_OW 13
10344: NOT
10345: IFFALSE 10349
// continue ;
10347: GO 10307
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10349: LD_INT 0
10351: PPUSH
10352: LD_INT 1
10354: PPUSH
10355: LD_INT 4
10357: PUSH
10358: LD_INT 5
10360: PUSH
10361: LD_INT 5
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: PUSH
10369: LD_OWVAR 67
10373: ARRAY
10374: PPUSH
10375: CALL_OW 380
// un := CreateHuman ;
10379: LD_ADDR_VAR 0 5
10383: PUSH
10384: CALL_OW 44
10388: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10389: LD_VAR 0 5
10393: PPUSH
10394: LD_VAR 0 4
10398: PPUSH
10399: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10403: LD_ADDR_EXP 53
10407: PUSH
10408: LD_EXP 53
10412: PPUSH
10413: LD_EXP 53
10417: PUSH
10418: LD_INT 1
10420: PLUS
10421: PPUSH
10422: LD_VAR 0 5
10426: PPUSH
10427: CALL_OW 1
10431: ST_TO_ADDR
// end ;
10432: GO 10307
10434: POP
10435: POP
// for i := 1 to 5 do
10436: LD_ADDR_VAR 0 2
10440: PUSH
10441: DOUBLE
10442: LD_INT 1
10444: DEC
10445: ST_TO_ADDR
10446: LD_INT 5
10448: PUSH
10449: FOR_TO
10450: IFFALSE 10544
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10452: LD_INT 0
10454: PPUSH
10455: LD_INT 2
10457: PPUSH
10458: LD_INT 4
10460: PUSH
10461: LD_INT 5
10463: PUSH
10464: LD_INT 5
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: PUSH
10472: LD_OWVAR 67
10476: ARRAY
10477: PPUSH
10478: CALL_OW 380
// un := CreateHuman ;
10482: LD_ADDR_VAR 0 5
10486: PUSH
10487: CALL_OW 44
10491: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10492: LD_VAR 0 5
10496: PPUSH
10497: LD_INT 66
10499: PPUSH
10500: LD_INT 101
10502: PPUSH
10503: LD_INT 3
10505: PPUSH
10506: LD_INT 0
10508: PPUSH
10509: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10513: LD_ADDR_EXP 53
10517: PUSH
10518: LD_EXP 53
10522: PPUSH
10523: LD_EXP 53
10527: PUSH
10528: LD_INT 1
10530: PLUS
10531: PPUSH
10532: LD_VAR 0 5
10536: PPUSH
10537: CALL_OW 1
10541: ST_TO_ADDR
// end ;
10542: GO 10449
10544: POP
10545: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10546: LD_ADDR_VAR 0 7
10550: PUSH
10551: LD_INT 72
10553: PUSH
10554: LD_INT 12
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: ST_TO_ADDR
// for i := 1 to tmp do
10561: LD_ADDR_VAR 0 2
10565: PUSH
10566: DOUBLE
10567: LD_INT 1
10569: DEC
10570: ST_TO_ADDR
10571: LD_VAR 0 7
10575: PUSH
10576: FOR_TO
10577: IFFALSE 10690
// for j := 1 to 6 do
10579: LD_ADDR_VAR 0 3
10583: PUSH
10584: DOUBLE
10585: LD_INT 1
10587: DEC
10588: ST_TO_ADDR
10589: LD_INT 6
10591: PUSH
10592: FOR_TO
10593: IFFALSE 10686
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10595: LD_INT 0
10597: PPUSH
10598: LD_INT 3
10600: PPUSH
10601: LD_INT 4
10603: PUSH
10604: LD_INT 5
10606: PUSH
10607: LD_INT 5
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: LD_OWVAR 67
10619: ARRAY
10620: PPUSH
10621: CALL_OW 380
// un := CreateHuman ;
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: CALL_OW 44
10634: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
10635: LD_VAR 0 5
10639: PPUSH
10640: LD_VAR 0 7
10644: PUSH
10645: LD_VAR 0 2
10649: ARRAY
10650: PPUSH
10651: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10655: LD_ADDR_EXP 53
10659: PUSH
10660: LD_EXP 53
10664: PPUSH
10665: LD_EXP 53
10669: PUSH
10670: LD_INT 1
10672: PLUS
10673: PPUSH
10674: LD_VAR 0 5
10678: PPUSH
10679: CALL_OW 1
10683: ST_TO_ADDR
// end ;
10684: GO 10592
10686: POP
10687: POP
10688: GO 10576
10690: POP
10691: POP
// for i := 1 to 3 do
10692: LD_ADDR_VAR 0 2
10696: PUSH
10697: DOUBLE
10698: LD_INT 1
10700: DEC
10701: ST_TO_ADDR
10702: LD_INT 3
10704: PUSH
10705: FOR_TO
10706: IFFALSE 10791
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10708: LD_INT 0
10710: PPUSH
10711: LD_INT 4
10713: PPUSH
10714: LD_INT 4
10716: PUSH
10717: LD_INT 5
10719: PUSH
10720: LD_INT 5
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: PUSH
10728: LD_OWVAR 67
10732: ARRAY
10733: PPUSH
10734: CALL_OW 380
// un := CreateHuman ;
10738: LD_ADDR_VAR 0 5
10742: PUSH
10743: CALL_OW 44
10747: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
10748: LD_VAR 0 5
10752: PPUSH
10753: LD_INT 17
10755: PPUSH
10756: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10760: LD_ADDR_EXP 53
10764: PUSH
10765: LD_EXP 53
10769: PPUSH
10770: LD_EXP 53
10774: PUSH
10775: LD_INT 1
10777: PLUS
10778: PPUSH
10779: LD_VAR 0 5
10783: PPUSH
10784: CALL_OW 1
10788: ST_TO_ADDR
// end ;
10789: GO 10705
10791: POP
10792: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
10793: LD_ADDR_VAR 0 2
10797: PUSH
10798: DOUBLE
10799: LD_INT 1
10801: DEC
10802: ST_TO_ADDR
10803: LD_INT 2
10805: PUSH
10806: LD_INT 3
10808: PUSH
10809: LD_INT 3
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: LIST
10816: PUSH
10817: LD_OWVAR 67
10821: ARRAY
10822: PUSH
10823: FOR_TO
10824: IFFALSE 10944
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
10826: LD_INT 22
10828: PPUSH
10829: LD_INT 1
10831: PPUSH
10832: LD_INT 1
10834: PPUSH
10835: LD_INT 52
10837: PPUSH
10838: LD_INT 100
10840: PPUSH
10841: CALL 28383 0 5
// veh := CreateVehicle ;
10845: LD_ADDR_VAR 0 6
10849: PUSH
10850: CALL_OW 45
10854: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
10855: LD_INT 0
10857: PPUSH
10858: LD_INT 3
10860: PPUSH
10861: LD_INT 4
10863: PPUSH
10864: CALL_OW 380
// un := CreateHuman ;
10868: LD_ADDR_VAR 0 5
10872: PUSH
10873: CALL_OW 44
10877: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
10878: LD_VAR 0 6
10882: PPUSH
10883: LD_INT 107
10885: PPUSH
10886: LD_INT 182
10888: PPUSH
10889: LD_INT 4
10891: PPUSH
10892: LD_INT 0
10894: PPUSH
10895: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10899: LD_VAR 0 5
10903: PPUSH
10904: LD_VAR 0 6
10908: PPUSH
10909: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10913: LD_ADDR_EXP 53
10917: PUSH
10918: LD_EXP 53
10922: PPUSH
10923: LD_EXP 53
10927: PUSH
10928: LD_INT 1
10930: PLUS
10931: PPUSH
10932: LD_VAR 0 5
10936: PPUSH
10937: CALL_OW 1
10941: ST_TO_ADDR
// end ;
10942: GO 10823
10944: POP
10945: POP
// InitHc ;
10946: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 ] [ Difficulty ] do
10950: LD_ADDR_VAR 0 2
10954: PUSH
10955: DOUBLE
10956: LD_INT 1
10958: DEC
10959: ST_TO_ADDR
10960: LD_INT 6
10962: PUSH
10963: LD_INT 8
10965: PUSH
10966: LD_INT 10
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: LD_OWVAR 67
10978: ARRAY
10979: PUSH
10980: FOR_TO
10981: IFFALSE 11053
// begin uc_nation := 0 ;
10983: LD_ADDR_OWVAR 21
10987: PUSH
10988: LD_INT 0
10990: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
10991: LD_ADDR_OWVAR 28
10995: PUSH
10996: LD_INT 15
10998: ST_TO_ADDR
// un := CreateHuman ;
10999: LD_ADDR_VAR 0 5
11003: PUSH
11004: CALL_OW 44
11008: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11009: LD_VAR 0 5
11013: PPUSH
11014: LD_INT 269
11016: PUSH
11017: LD_INT 300
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: LD_VAR 0 2
11028: PUSH
11029: LD_INT 2
11031: MOD
11032: PUSH
11033: LD_INT 1
11035: PLUS
11036: ARRAY
11037: PPUSH
11038: LD_INT 182
11040: PPUSH
11041: LD_INT 4
11043: PPUSH
11044: LD_INT 0
11046: PPUSH
11047: CALL_OW 50
// end ;
11051: GO 10980
11053: POP
11054: POP
// uc_nation := 3 ;
11055: LD_ADDR_OWVAR 21
11059: PUSH
11060: LD_INT 3
11062: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
11063: LD_EXP 8
11067: PUSH
11068: LD_INT 10
11070: PUSH
11071: LD_INT 8
11073: PUSH
11074: LD_INT 6
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: PUSH
11082: LD_OWVAR 67
11086: ARRAY
11087: LESS
11088: IFFALSE 11167
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11090: LD_INT 21
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: LD_INT 51
11101: PPUSH
11102: LD_INT 12
11104: PPUSH
11105: CALL 28383 0 5
// veh := CreateVehicle ;
11109: LD_ADDR_VAR 0 6
11113: PUSH
11114: CALL_OW 45
11118: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11119: LD_VAR 0 6
11123: PPUSH
11124: LD_INT 269
11126: PPUSH
11127: LD_INT 66
11129: PPUSH
11130: LD_INT 4
11132: PPUSH
11133: LD_INT 0
11135: PPUSH
11136: CALL 62188 0 5
// SetLives ( veh , 333 ) ;
11140: LD_VAR 0 6
11144: PPUSH
11145: LD_INT 333
11147: PPUSH
11148: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11152: LD_VAR 0 6
11156: PPUSH
11157: LD_INT 2
11159: PPUSH
11160: LD_INT 100
11162: PPUSH
11163: CALL_OW 290
// end ; end ;
11167: LD_VAR 0 1
11171: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11172: LD_EXP 49
11176: PUSH
11177: LD_EXP 49
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: LD_INT 3
11189: EQUAL
11190: AND
11191: IFFALSE 11354
11193: GO 11195
11195: DISABLE
11196: LD_INT 0
11198: PPUSH
// begin enable ;
11199: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11200: LD_INT 81
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 91
11212: PUSH
11213: LD_EXP 49
11217: PUSH
11218: LD_INT 15
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PPUSH
11230: CALL_OW 69
11234: IFFALSE 11314
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11236: LD_EXP 49
11240: PPUSH
11241: CALL_OW 311
11245: NOT
11246: IFFALSE 11312
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11248: LD_ADDR_VAR 0 1
11252: PUSH
11253: LD_INT 22
11255: PUSH
11256: LD_INT 3
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 21
11265: PUSH
11266: LD_INT 1
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PPUSH
11277: CALL_OW 69
11281: PPUSH
11282: LD_EXP 49
11286: PPUSH
11287: CALL_OW 74
11291: ST_TO_ADDR
// if driver then
11292: LD_VAR 0 1
11296: IFFALSE 11312
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11298: LD_VAR 0 1
11302: PPUSH
11303: LD_EXP 49
11307: PPUSH
11308: CALL_OW 120
// end ; exit ;
11312: GO 11354
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11314: LD_EXP 49
11318: PPUSH
11319: CALL_OW 256
11323: PUSH
11324: LD_INT 1000
11326: LESS
11327: PUSH
11328: LD_EXP 49
11332: PPUSH
11333: CALL_OW 311
11337: AND
11338: IFFALSE 11354
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11340: LD_EXP 49
11344: PPUSH
11345: CALL_OW 311
11349: PPUSH
11350: CALL 61748 0 1
// end ;
11354: PPOPN 1
11356: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11357: LD_EXP 51
11361: PPUSH
11362: LD_INT 3
11364: PUSH
11365: LD_INT 24
11367: PUSH
11368: LD_INT 1000
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 72
11383: PUSH
11384: LD_EXP 51
11388: PPUSH
11389: LD_INT 25
11391: PUSH
11392: LD_INT 4
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 50
11401: PUSH
11402: EMPTY
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PPUSH
11409: CALL_OW 72
11413: AND
11414: IFFALSE 11602
11416: GO 11418
11418: DISABLE
11419: LD_INT 0
11421: PPUSH
11422: PPUSH
11423: PPUSH
// begin enable ;
11424: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11425: LD_ADDR_VAR 0 3
11429: PUSH
11430: LD_EXP 51
11434: PPUSH
11435: LD_INT 3
11437: PUSH
11438: LD_INT 24
11440: PUSH
11441: LD_INT 1000
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PPUSH
11452: CALL_OW 72
11456: PPUSH
11457: LD_INT 1
11459: PPUSH
11460: CALL 61988 0 2
11464: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11465: LD_ADDR_VAR 0 2
11469: PUSH
11470: LD_EXP 51
11474: PPUSH
11475: LD_INT 25
11477: PUSH
11478: LD_INT 4
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 50
11487: PUSH
11488: EMPTY
11489: LIST
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PPUSH
11495: CALL_OW 72
11499: PUSH
11500: LD_INT 1
11502: ARRAY
11503: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11504: LD_VAR 0 2
11508: PPUSH
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 1
11516: ARRAY
11517: PPUSH
11518: CALL 57487 0 2
11522: NOT
11523: IFFALSE 11602
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11525: LD_VAR 0 3
11529: PUSH
11530: LD_INT 1
11532: ARRAY
11533: PPUSH
11534: LD_INT 9
11536: PPUSH
11537: CALL_OW 308
11541: NOT
11542: IFFALSE 11560
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
11544: LD_VAR 0 3
11548: PUSH
11549: LD_INT 1
11551: ARRAY
11552: PPUSH
11553: LD_INT 9
11555: PPUSH
11556: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
11560: LD_VAR 0 2
11564: PPUSH
11565: LD_VAR 0 3
11569: PUSH
11570: LD_INT 1
11572: ARRAY
11573: PPUSH
11574: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
11578: LD_VAR 0 2
11582: PPUSH
11583: LD_INT 179
11585: PPUSH
11586: LD_INT 113
11588: PPUSH
11589: CALL_OW 171
// AddComHold ( sci ) ;
11593: LD_VAR 0 2
11597: PPUSH
11598: CALL_OW 200
// end ; end ;
11602: PPOPN 3
11604: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
11605: LD_INT 2
11607: PPUSH
11608: LD_INT 52
11610: PPUSH
11611: CALL_OW 292
11615: IFFALSE 11720
11617: GO 11619
11619: DISABLE
11620: LD_INT 0
11622: PPUSH
11623: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
11624: LD_ADDR_VAR 0 2
11628: PUSH
11629: LD_EXP 53
11633: PPUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 1
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 50
11646: PUSH
11647: EMPTY
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PPUSH
11654: CALL_OW 72
11658: ST_TO_ADDR
// if not tmp then
11659: LD_VAR 0 2
11663: NOT
11664: IFFALSE 11668
// exit ;
11666: GO 11720
// for i in tmp do
11668: LD_ADDR_VAR 0 1
11672: PUSH
11673: LD_VAR 0 2
11677: PUSH
11678: FOR_IN
11679: IFFALSE 11718
// begin if IsInUnit ( i ) then
11681: LD_VAR 0 1
11685: PPUSH
11686: CALL_OW 310
11690: IFFALSE 11701
// ComExitBuilding ( i ) ;
11692: LD_VAR 0 1
11696: PPUSH
11697: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
11701: LD_VAR 0 1
11705: PPUSH
11706: LD_INT 84
11708: PPUSH
11709: LD_INT 133
11711: PPUSH
11712: CALL_OW 174
// end ;
11716: GO 11678
11718: POP
11719: POP
// end ;
11720: PPOPN 2
11722: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
11723: LD_EXP 14
11727: IFFALSE 11876
11729: GO 11731
11731: DISABLE
11732: LD_INT 0
11734: PPUSH
11735: PPUSH
11736: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
11737: LD_ADDR_VAR 0 2
11741: PUSH
11742: LD_INT 72
11744: PUSH
11745: LD_INT 12
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket , ru_gun ] , [ ru_rocket , ru_heavy_gun ] ] [ Difficulty ] ;
11752: LD_ADDR_VAR 0 3
11756: PUSH
11757: LD_INT 44
11759: PUSH
11760: LD_INT 43
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 47
11769: PUSH
11770: LD_INT 44
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 47
11779: PUSH
11780: LD_INT 46
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: PUSH
11792: LD_OWVAR 67
11796: ARRAY
11797: ST_TO_ADDR
// for i := 1 to 6 do
11798: LD_ADDR_VAR 0 1
11802: PUSH
11803: DOUBLE
11804: LD_INT 1
11806: DEC
11807: ST_TO_ADDR
11808: LD_INT 6
11810: PUSH
11811: FOR_TO
11812: IFFALSE 11874
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
11814: LD_VAR 0 2
11818: PPUSH
11819: LD_INT 22
11821: PUSH
11822: LD_INT 23
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: LD_VAR 0 1
11833: PUSH
11834: LD_INT 2
11836: MOD
11837: PUSH
11838: LD_INT 1
11840: PLUS
11841: ARRAY
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: LD_VAR 0 3
11853: PUSH
11854: LD_VAR 0 1
11858: PUSH
11859: LD_INT 2
11861: MOD
11862: PUSH
11863: LD_INT 1
11865: PLUS
11866: ARRAY
11867: PPUSH
11868: CALL_OW 185
11872: GO 11811
11874: POP
11875: POP
// end ;
11876: PPOPN 3
11878: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
11879: LD_EXP 11
11883: IFFALSE 13032
11885: GO 11887
11887: DISABLE
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
// begin enable ;
11896: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
11897: LD_ADDR_VAR 0 6
11901: PUSH
11902: LD_INT 10
11904: PPUSH
11905: LD_INT 81
11907: PUSH
11908: LD_INT 3
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PPUSH
11915: CALL_OW 70
11919: ST_TO_ADDR
// if ruSpecialVehicleGroup then
11920: LD_EXP 54
11924: IFFALSE 12190
// begin for i in ruSpecialVehicleGroup do
11926: LD_ADDR_VAR 0 1
11930: PUSH
11931: LD_EXP 54
11935: PUSH
11936: FOR_IN
11937: IFFALSE 12188
// begin if enemyInBase then
11939: LD_VAR 0 6
11943: IFFALSE 12186
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
11945: LD_VAR 0 1
11949: PPUSH
11950: CALL_OW 256
11954: PUSH
11955: LD_INT 500
11957: GREATER
11958: PUSH
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 110
11968: PUSH
11969: LD_INT 0
11971: EQUAL
11972: AND
11973: IFFALSE 11999
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
11975: LD_VAR 0 1
11979: PPUSH
11980: LD_VAR 0 6
11984: PPUSH
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL_OW 74
11994: PPUSH
11995: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
11999: LD_VAR 0 1
12003: PPUSH
12004: CALL_OW 256
12008: PUSH
12009: LD_INT 500
12011: LESSEQUAL
12012: PUSH
12013: LD_VAR 0 1
12017: PPUSH
12018: CALL_OW 110
12022: PUSH
12023: LD_INT 0
12025: EQUAL
12026: AND
12027: IFFALSE 12056
// begin SetTag ( i , 1 ) ;
12029: LD_VAR 0 1
12033: PPUSH
12034: LD_INT 1
12036: PPUSH
12037: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12041: LD_VAR 0 1
12045: PPUSH
12046: LD_INT 83
12048: PPUSH
12049: LD_INT 134
12051: PPUSH
12052: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12056: LD_VAR 0 1
12060: PPUSH
12061: CALL_OW 256
12065: PUSH
12066: LD_INT 1000
12068: LESS
12069: PUSH
12070: LD_VAR 0 1
12074: PPUSH
12075: CALL_OW 110
12079: PUSH
12080: LD_INT 1
12082: EQUAL
12083: AND
12084: PUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: LD_INT 83
12092: PPUSH
12093: LD_INT 134
12095: PPUSH
12096: CALL_OW 297
12100: PUSH
12101: LD_INT 6
12103: LESS
12104: AND
12105: IFFALSE 12133
// begin SetFuel ( i , 100 ) ;
12107: LD_VAR 0 1
12111: PPUSH
12112: LD_INT 100
12114: PPUSH
12115: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12119: LD_VAR 0 1
12123: PPUSH
12124: CALL_OW 310
12128: PPUSH
12129: CALL 61868 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12133: LD_VAR 0 1
12137: PPUSH
12138: CALL_OW 256
12142: PUSH
12143: LD_INT 1000
12145: EQUAL
12146: PUSH
12147: LD_VAR 0 1
12151: PPUSH
12152: CALL_OW 110
12156: PUSH
12157: LD_INT 1
12159: EQUAL
12160: AND
12161: PUSH
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 311
12171: AND
12172: IFFALSE 12186
// SetTag ( i , 0 ) ;
12174: LD_VAR 0 1
12178: PPUSH
12179: LD_INT 0
12181: PPUSH
12182: CALL_OW 109
// end ; end ;
12186: GO 11936
12188: POP
12189: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12190: LD_ADDR_VAR 0 5
12194: PUSH
12195: LD_EXP 53
12199: PPUSH
12200: LD_INT 25
12202: PUSH
12203: LD_INT 4
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 72
12214: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12215: LD_ADDR_VAR 0 4
12219: PUSH
12220: LD_EXP 53
12224: PPUSH
12225: LD_INT 92
12227: PUSH
12228: LD_INT 92
12230: PUSH
12231: LD_INT 155
12233: PUSH
12234: LD_INT 12
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 3
12245: PUSH
12246: LD_INT 24
12248: PUSH
12249: LD_INT 1000
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 72
12268: ST_TO_ADDR
// if sci then
12269: LD_VAR 0 5
12273: IFFALSE 12406
// begin if hurt then
12275: LD_VAR 0 4
12279: IFFALSE 12352
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12281: LD_VAR 0 5
12285: PPUSH
12286: LD_INT 3
12288: PUSH
12289: LD_INT 54
12291: PUSH
12292: EMPTY
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PPUSH
12299: CALL_OW 72
12303: IFFALSE 12332
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12305: LD_VAR 0 5
12309: PPUSH
12310: LD_INT 3
12312: PUSH
12313: LD_INT 54
12315: PUSH
12316: EMPTY
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 72
12327: PPUSH
12328: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12332: LD_VAR 0 5
12336: PPUSH
12337: LD_VAR 0 4
12341: PUSH
12342: LD_INT 1
12344: ARRAY
12345: PPUSH
12346: CALL_OW 188
// end else
12350: GO 12406
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12352: LD_VAR 0 5
12356: PPUSH
12357: LD_INT 3
12359: PUSH
12360: LD_INT 54
12362: PUSH
12363: EMPTY
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 72
12374: IFFALSE 12406
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12376: LD_VAR 0 5
12380: PPUSH
12381: LD_INT 3
12383: PUSH
12384: LD_INT 54
12386: PUSH
12387: EMPTY
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 72
12398: PPUSH
12399: LD_INT 17
12401: PPUSH
12402: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12406: LD_ADDR_VAR 0 3
12410: PUSH
12411: LD_INT 10
12413: PPUSH
12414: LD_INT 21
12416: PUSH
12417: LD_INT 3
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: LD_INT 24
12429: PUSH
12430: LD_INT 1000
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PPUSH
12445: CALL_OW 70
12449: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12450: LD_ADDR_VAR 0 2
12454: PUSH
12455: LD_EXP 53
12459: PPUSH
12460: LD_INT 25
12462: PUSH
12463: LD_INT 2
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 72
12474: PUSH
12475: LD_INT 22
12477: PUSH
12478: LD_INT 3
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 34
12487: PUSH
12488: LD_INT 52
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PPUSH
12499: CALL_OW 69
12503: UNION
12504: ST_TO_ADDR
// if not tmp then
12505: LD_VAR 0 2
12509: NOT
12510: IFFALSE 12514
// exit ;
12512: GO 13032
// for i in tmp do
12514: LD_ADDR_VAR 0 1
12518: PUSH
12519: LD_VAR 0 2
12523: PUSH
12524: FOR_IN
12525: IFFALSE 13030
// begin if GetClass ( i ) = 2 then
12527: LD_VAR 0 1
12531: PPUSH
12532: CALL_OW 257
12536: PUSH
12537: LD_INT 2
12539: EQUAL
12540: IFFALSE 12763
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12542: LD_VAR 0 1
12546: PPUSH
12547: CALL_OW 256
12551: PUSH
12552: LD_INT 1000
12554: EQUAL
12555: PUSH
12556: LD_VAR 0 1
12560: PPUSH
12561: CALL_OW 110
12565: PUSH
12566: LD_INT 1
12568: EQUAL
12569: AND
12570: IFFALSE 12584
// SetTag ( i , 0 ) ;
12572: LD_VAR 0 1
12576: PPUSH
12577: LD_INT 0
12579: PPUSH
12580: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12584: LD_VAR 0 1
12588: PPUSH
12589: CALL_OW 256
12593: PUSH
12594: LD_INT 500
12596: LESSEQUAL
12597: PUSH
12598: LD_VAR 0 1
12602: PPUSH
12603: CALL_OW 110
12607: PUSH
12608: LD_INT 0
12610: EQUAL
12611: AND
12612: IFFALSE 12641
// begin SetTag ( i , 1 ) ;
12614: LD_VAR 0 1
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
12626: LD_VAR 0 1
12630: PPUSH
12631: LD_INT 92
12633: PPUSH
12634: LD_INT 155
12636: PPUSH
12637: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
12641: LD_VAR 0 3
12645: PUSH
12646: LD_VAR 0 1
12650: PPUSH
12651: CALL_OW 256
12655: PUSH
12656: LD_INT 500
12658: GREATER
12659: AND
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 110
12670: PUSH
12671: LD_INT 0
12673: EQUAL
12674: AND
12675: PUSH
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL_OW 314
12685: NOT
12686: AND
12687: IFFALSE 12761
// begin if b then
12689: LD_VAR 0 3
12693: IFFALSE 12725
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12695: LD_VAR 0 1
12699: PPUSH
12700: LD_VAR 0 3
12704: PUSH
12705: LD_INT 1
12707: PPUSH
12708: LD_VAR 0 3
12712: PPUSH
12713: CALL_OW 12
12717: ARRAY
12718: PPUSH
12719: CALL_OW 130
12723: GO 12761
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
12725: LD_VAR 0 1
12729: PPUSH
12730: LD_INT 94
12732: PPUSH
12733: LD_INT 165
12735: PPUSH
12736: CALL_OW 297
12740: PUSH
12741: LD_INT 8
12743: GREATER
12744: IFFALSE 12761
// ComMoveXY ( i , 94 , 165 ) ;
12746: LD_VAR 0 1
12750: PPUSH
12751: LD_INT 94
12753: PPUSH
12754: LD_INT 165
12756: PPUSH
12757: CALL_OW 111
// end ; end else
12761: GO 13028
// if GetWeapon ( i ) = ru_crane then
12763: LD_VAR 0 1
12767: PPUSH
12768: CALL_OW 264
12772: PUSH
12773: LD_INT 52
12775: EQUAL
12776: IFFALSE 13028
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12778: LD_VAR 0 1
12782: PPUSH
12783: CALL_OW 256
12787: PUSH
12788: LD_INT 1000
12790: EQUAL
12791: PUSH
12792: LD_VAR 0 1
12796: PPUSH
12797: CALL_OW 110
12801: PUSH
12802: LD_INT 1
12804: EQUAL
12805: AND
12806: IFFALSE 12832
// begin SetTag ( i , 0 ) ;
12808: LD_VAR 0 1
12812: PPUSH
12813: LD_INT 0
12815: PPUSH
12816: CALL_OW 109
// SetFuel ( i , 100 ) ;
12820: LD_VAR 0 1
12824: PPUSH
12825: LD_INT 100
12827: PPUSH
12828: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12832: LD_VAR 0 1
12836: PPUSH
12837: CALL_OW 256
12841: PUSH
12842: LD_INT 500
12844: LESSEQUAL
12845: PUSH
12846: LD_VAR 0 1
12850: PPUSH
12851: CALL_OW 110
12855: PUSH
12856: LD_INT 0
12858: EQUAL
12859: AND
12860: IFFALSE 12903
// begin SetTag ( i , 1 ) ;
12862: LD_VAR 0 1
12866: PPUSH
12867: LD_INT 1
12869: PPUSH
12870: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
12874: LD_VAR 0 1
12878: PPUSH
12879: LD_INT 83
12881: PPUSH
12882: LD_INT 135
12884: PPUSH
12885: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12889: LD_VAR 0 1
12893: PPUSH
12894: CALL_OW 310
12898: PPUSH
12899: CALL 61868 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
12903: LD_VAR 0 1
12907: PPUSH
12908: CALL_OW 256
12912: PUSH
12913: LD_INT 500
12915: GREATER
12916: PUSH
12917: LD_VAR 0 1
12921: PPUSH
12922: CALL_OW 110
12926: PUSH
12927: LD_INT 0
12929: EQUAL
12930: AND
12931: PUSH
12932: LD_VAR 0 1
12936: PPUSH
12937: CALL_OW 311
12941: AND
12942: PUSH
12943: LD_VAR 0 1
12947: PPUSH
12948: CALL_OW 314
12952: NOT
12953: AND
12954: IFFALSE 13028
// begin if b then
12956: LD_VAR 0 3
12960: IFFALSE 12992
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12962: LD_VAR 0 1
12966: PPUSH
12967: LD_VAR 0 3
12971: PUSH
12972: LD_INT 1
12974: PPUSH
12975: LD_VAR 0 3
12979: PPUSH
12980: CALL_OW 12
12984: ARRAY
12985: PPUSH
12986: CALL_OW 130
12990: GO 13028
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
12992: LD_VAR 0 1
12996: PPUSH
12997: LD_INT 94
12999: PPUSH
13000: LD_INT 165
13002: PPUSH
13003: CALL_OW 297
13007: PUSH
13008: LD_INT 8
13010: GREATER
13011: IFFALSE 13028
// ComMoveXY ( i , 94 , 165 ) ;
13013: LD_VAR 0 1
13017: PPUSH
13018: LD_INT 94
13020: PPUSH
13021: LD_INT 165
13023: PPUSH
13024: CALL_OW 111
// end ; end ; end ;
13028: GO 12524
13030: POP
13031: POP
// end ;
13032: PPOPN 6
13034: END
// every 7 7$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13035: LD_EXP 23
13039: NOT
13040: PUSH
13041: LD_EXP 27
13045: NOT
13046: AND
13047: IFFALSE 13933
13049: GO 13051
13051: DISABLE
13052: LD_INT 0
13054: PPUSH
13055: PPUSH
13056: PPUSH
13057: PPUSH
// begin enable ;
13058: ENABLE
// if Prob ( [ 35 , 45 , 55 ] [ Difficulty ] ) then
13059: LD_INT 35
13061: PUSH
13062: LD_INT 45
13064: PUSH
13065: LD_INT 55
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: LIST
13072: PUSH
13073: LD_OWVAR 67
13077: ARRAY
13078: PPUSH
13079: CALL_OW 13
13083: IFFALSE 13099
// waveStrength := waveStrength + 1 ;
13085: LD_ADDR_EXP 56
13089: PUSH
13090: LD_EXP 56
13094: PUSH
13095: LD_INT 1
13097: PLUS
13098: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 ] [ Difficulty ] then
13099: LD_EXP 56
13103: PUSH
13104: LD_INT 4
13106: PUSH
13107: LD_INT 5
13109: PUSH
13110: LD_INT 6
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: LIST
13117: PUSH
13118: LD_OWVAR 67
13122: ARRAY
13123: GREATER
13124: IFFALSE 13157
// begin waveStrength := waveStrength + Difficulty ;
13126: LD_ADDR_EXP 56
13130: PUSH
13131: LD_EXP 56
13135: PUSH
13136: LD_OWVAR 67
13140: PLUS
13141: ST_TO_ADDR
// disableAttackOnHeike := true ;
13142: LD_ADDR_EXP 27
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13150: LD_INT 6300
13152: PPUSH
13153: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13157: LD_EXP 27
13161: PUSH
13162: LD_OWVAR 67
13166: PUSH
13167: LD_INT 1
13169: GREATER
13170: AND
13171: IFFALSE 13376
// begin for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
13173: LD_ADDR_VAR 0 1
13177: PUSH
13178: DOUBLE
13179: LD_INT 1
13181: DEC
13182: ST_TO_ADDR
13183: LD_INT 3
13185: PUSH
13186: LD_INT 3
13188: PUSH
13189: LD_INT 4
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: LD_OWVAR 67
13201: ARRAY
13202: PUSH
13203: FOR_TO
13204: IFFALSE 13374
// begin InitHc ;
13206: CALL_OW 19
// InitVc ;
13210: CALL_OW 20
// uc_side := 3 ;
13214: LD_ADDR_OWVAR 20
13218: PUSH
13219: LD_INT 3
13221: ST_TO_ADDR
// uc_nation := 3 ;
13222: LD_ADDR_OWVAR 21
13226: PUSH
13227: LD_INT 3
13229: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13230: LD_INT 0
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: LD_OWVAR 67
13240: PUSH
13241: LD_INT 2
13243: PLUS
13244: PPUSH
13245: CALL_OW 380
// un := CreateHuman ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: CALL_OW 44
13258: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13259: LD_VAR 0 2
13263: PPUSH
13264: LD_INT 160
13266: PPUSH
13267: LD_INT 3
13269: PPUSH
13270: LD_INT 2
13272: PPUSH
13273: LD_INT 0
13275: PPUSH
13276: CALL 62188 0 5
// SetClass ( un , class_bazooker ) ;
13280: LD_VAR 0 2
13284: PPUSH
13285: LD_INT 9
13287: PPUSH
13288: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13292: LD_ADDR_EXP 55
13296: PUSH
13297: LD_EXP 55
13301: PPUSH
13302: LD_EXP 55
13306: PUSH
13307: LD_INT 1
13309: PLUS
13310: PPUSH
13311: LD_VAR 0 2
13315: PPUSH
13316: CALL_OW 1
13320: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13321: LD_VAR 0 2
13325: PPUSH
13326: LD_INT 177
13328: PPUSH
13329: LD_INT 17
13331: PPUSH
13332: CALL_OW 111
// wait ( 0 0$2 ) ;
13336: LD_INT 70
13338: PPUSH
13339: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13343: LD_ADDR_VAR 0 4
13347: PUSH
13348: LD_VAR 0 4
13352: PPUSH
13353: LD_VAR 0 4
13357: PUSH
13358: LD_INT 1
13360: PLUS
13361: PPUSH
13362: LD_VAR 0 2
13366: PPUSH
13367: CALL_OW 1
13371: ST_TO_ADDR
// end ;
13372: GO 13203
13374: POP
13375: POP
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + waveStrength do
13376: LD_ADDR_VAR 0 1
13380: PUSH
13381: DOUBLE
13382: LD_INT 1
13384: DEC
13385: ST_TO_ADDR
13386: LD_INT 2
13388: PUSH
13389: LD_INT 3
13391: PUSH
13392: LD_INT 4
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: PUSH
13400: LD_OWVAR 67
13404: ARRAY
13405: PUSH
13406: LD_EXP 56
13410: PLUS
13411: PUSH
13412: FOR_TO
13413: IFFALSE 13722
// begin InitHc ;
13415: CALL_OW 19
// InitVc ;
13419: CALL_OW 20
// uc_side := 3 ;
13423: LD_ADDR_OWVAR 20
13427: PUSH
13428: LD_INT 3
13430: ST_TO_ADDR
// uc_nation := 3 ;
13431: LD_ADDR_OWVAR 21
13435: PUSH
13436: LD_INT 3
13438: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13439: LD_INT 22
13441: PUSH
13442: LD_INT 23
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 1
13451: PPUSH
13452: LD_INT 2
13454: PPUSH
13455: CALL_OW 12
13459: ARRAY
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: LD_INT 1
13466: PPUSH
13467: LD_INT 44
13469: PUSH
13470: LD_INT 45
13472: PUSH
13473: LD_INT 43
13475: PUSH
13476: LD_INT 42
13478: PUSH
13479: LD_INT 44
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 1
13491: PPUSH
13492: LD_INT 5
13494: PPUSH
13495: CALL_OW 12
13499: ARRAY
13500: PPUSH
13501: LD_INT 99
13503: PPUSH
13504: CALL 28383 0 5
// veh := CreateVehicle ;
13508: LD_ADDR_VAR 0 3
13512: PUSH
13513: CALL_OW 45
13517: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13518: LD_VAR 0 3
13522: PPUSH
13523: LD_INT 160
13525: PPUSH
13526: LD_INT 3
13528: PPUSH
13529: LD_INT 2
13531: PPUSH
13532: LD_INT 0
13534: PPUSH
13535: CALL 62188 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13539: LD_ADDR_EXP 55
13543: PUSH
13544: LD_EXP 55
13548: PPUSH
13549: LD_EXP 55
13553: PUSH
13554: LD_INT 1
13556: PLUS
13557: PPUSH
13558: LD_VAR 0 3
13562: PPUSH
13563: CALL_OW 1
13567: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
13568: LD_INT 0
13570: PPUSH
13571: LD_INT 3
13573: PPUSH
13574: LD_OWVAR 67
13578: PUSH
13579: LD_INT 2
13581: PLUS
13582: PPUSH
13583: CALL_OW 380
// un := CreateHuman ;
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: CALL_OW 44
13596: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13597: LD_VAR 0 2
13601: PPUSH
13602: LD_VAR 0 3
13606: PPUSH
13607: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13611: LD_ADDR_EXP 55
13615: PUSH
13616: LD_EXP 55
13620: PPUSH
13621: LD_EXP 55
13625: PUSH
13626: LD_INT 1
13628: PLUS
13629: PPUSH
13630: LD_VAR 0 2
13634: PPUSH
13635: CALL_OW 1
13639: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13640: LD_VAR 0 2
13644: PPUSH
13645: LD_INT 177
13647: PPUSH
13648: LD_INT 17
13650: PPUSH
13651: CALL_OW 111
// wait ( 0 0$2 ) ;
13655: LD_INT 70
13657: PPUSH
13658: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
13662: LD_ADDR_VAR 0 4
13666: PUSH
13667: LD_VAR 0 4
13671: PPUSH
13672: LD_VAR 0 4
13676: PUSH
13677: LD_INT 1
13679: PLUS
13680: PPUSH
13681: LD_VAR 0 3
13685: PPUSH
13686: CALL_OW 1
13690: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13691: LD_ADDR_VAR 0 4
13695: PUSH
13696: LD_VAR 0 4
13700: PPUSH
13701: LD_VAR 0 4
13705: PUSH
13706: LD_INT 1
13708: PLUS
13709: PPUSH
13710: LD_VAR 0 2
13714: PPUSH
13715: CALL_OW 1
13719: ST_TO_ADDR
// end ;
13720: GO 13412
13722: POP
13723: POP
// for i in tmp do
13724: LD_ADDR_VAR 0 1
13728: PUSH
13729: LD_VAR 0 4
13733: PUSH
13734: FOR_IN
13735: IFFALSE 13825
// begin if Prob ( 50 ) then
13737: LD_INT 50
13739: PPUSH
13740: CALL_OW 13
13744: IFFALSE 13763
// ComAgressiveMove ( i , 206 , 73 ) else
13746: LD_VAR 0 1
13750: PPUSH
13751: LD_INT 206
13753: PPUSH
13754: LD_INT 73
13756: PPUSH
13757: CALL_OW 114
13761: GO 13823
// begin ComAgressiveMove ( i , 206 , 73 ) ;
13763: LD_VAR 0 1
13767: PPUSH
13768: LD_INT 206
13770: PPUSH
13771: LD_INT 73
13773: PPUSH
13774: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
13778: LD_VAR 0 1
13782: PPUSH
13783: LD_INT 257
13785: PPUSH
13786: LD_INT 105
13788: PPUSH
13789: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
13793: LD_VAR 0 1
13797: PPUSH
13798: LD_INT 227
13800: PPUSH
13801: LD_INT 97
13803: PPUSH
13804: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
13808: LD_VAR 0 1
13812: PPUSH
13813: LD_INT 206
13815: PPUSH
13816: LD_INT 73
13818: PPUSH
13819: CALL_OW 174
// end ; end ;
13823: GO 13734
13825: POP
13826: POP
// repeat wait ( 0 0$1 ) ;
13827: LD_INT 35
13829: PPUSH
13830: CALL_OW 67
// for i in tmp do
13834: LD_ADDR_VAR 0 1
13838: PUSH
13839: LD_VAR 0 4
13843: PUSH
13844: FOR_IN
13845: IFFALSE 13924
// if IsDead ( i ) then
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 301
13856: IFFALSE 13876
// tmp := tmp diff i else
13858: LD_ADDR_VAR 0 4
13862: PUSH
13863: LD_VAR 0 4
13867: PUSH
13868: LD_VAR 0 1
13872: DIFF
13873: ST_TO_ADDR
13874: GO 13922
// if not HasTask ( i ) then
13876: LD_VAR 0 1
13880: PPUSH
13881: CALL_OW 314
13885: NOT
13886: IFFALSE 13922
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
13888: LD_VAR 0 1
13892: PPUSH
13893: LD_INT 81
13895: PUSH
13896: LD_INT 3
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PPUSH
13903: CALL_OW 69
13907: PPUSH
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL_OW 74
13917: PPUSH
13918: CALL_OW 115
13922: GO 13844
13924: POP
13925: POP
// until not tmp ;
13926: LD_VAR 0 4
13930: NOT
13931: IFFALSE 13827
// end ;
13933: PPOPN 4
13935: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
13936: LD_EXP 23
13940: NOT
13941: PUSH
13942: LD_EXP 3
13946: AND
13947: PUSH
13948: LD_EXP 16
13952: NOT
13953: AND
13954: IFFALSE 14786
13956: GO 13958
13958: DISABLE
13959: LD_INT 0
13961: PPUSH
13962: PPUSH
13963: PPUSH
13964: PPUSH
// begin enable ;
13965: ENABLE
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
13966: LD_ADDR_VAR 0 1
13970: PUSH
13971: DOUBLE
13972: LD_INT 1
13974: DEC
13975: ST_TO_ADDR
13976: LD_INT 1
13978: PUSH
13979: LD_INT 2
13981: PUSH
13982: LD_INT 2
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: PUSH
13990: LD_OWVAR 67
13994: ARRAY
13995: PUSH
13996: FOR_TO
13997: IFFALSE 14298
// begin InitHc ;
13999: CALL_OW 19
// InitVc ;
14003: CALL_OW 20
// uc_side := 3 ;
14007: LD_ADDR_OWVAR 20
14011: PUSH
14012: LD_INT 3
14014: ST_TO_ADDR
// uc_nation := 3 ;
14015: LD_ADDR_OWVAR 21
14019: PUSH
14020: LD_INT 3
14022: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14023: LD_INT 22
14025: PUSH
14026: LD_INT 23
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 1
14035: PPUSH
14036: LD_INT 2
14038: PPUSH
14039: CALL_OW 12
14043: ARRAY
14044: PPUSH
14045: LD_INT 1
14047: PPUSH
14048: LD_INT 1
14050: PPUSH
14051: LD_INT 44
14053: PUSH
14054: LD_INT 43
14056: PUSH
14057: LD_INT 42
14059: PUSH
14060: LD_INT 44
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 1
14071: PPUSH
14072: LD_INT 4
14074: PPUSH
14075: CALL_OW 12
14079: ARRAY
14080: PPUSH
14081: LD_INT 99
14083: PPUSH
14084: CALL 28383 0 5
// veh := CreateVehicle ;
14088: LD_ADDR_VAR 0 3
14092: PUSH
14093: CALL_OW 45
14097: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14098: LD_VAR 0 3
14102: PPUSH
14103: LD_INT 5
14105: PPUSH
14106: LD_INT 3
14108: PPUSH
14109: LD_INT 2
14111: PPUSH
14112: LD_INT 0
14114: PPUSH
14115: CALL 62188 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14119: LD_ADDR_EXP 55
14123: PUSH
14124: LD_EXP 55
14128: PPUSH
14129: LD_EXP 55
14133: PUSH
14134: LD_INT 1
14136: PLUS
14137: PPUSH
14138: LD_VAR 0 3
14142: PPUSH
14143: CALL_OW 1
14147: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14148: LD_INT 0
14150: PPUSH
14151: LD_INT 3
14153: PPUSH
14154: LD_OWVAR 67
14158: PPUSH
14159: CALL_OW 380
// un := CreateHuman ;
14163: LD_ADDR_VAR 0 2
14167: PUSH
14168: CALL_OW 44
14172: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14173: LD_VAR 0 2
14177: PPUSH
14178: LD_VAR 0 3
14182: PPUSH
14183: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14187: LD_ADDR_EXP 55
14191: PUSH
14192: LD_EXP 55
14196: PPUSH
14197: LD_EXP 55
14201: PUSH
14202: LD_INT 1
14204: PLUS
14205: PPUSH
14206: LD_VAR 0 2
14210: PPUSH
14211: CALL_OW 1
14215: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14216: LD_VAR 0 2
14220: PPUSH
14221: LD_INT 23
14223: PPUSH
14224: LD_INT 7
14226: PPUSH
14227: CALL_OW 111
// wait ( 0 0$2 ) ;
14231: LD_INT 70
14233: PPUSH
14234: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14238: LD_ADDR_VAR 0 4
14242: PUSH
14243: LD_VAR 0 4
14247: PPUSH
14248: LD_VAR 0 4
14252: PUSH
14253: LD_INT 1
14255: PLUS
14256: PPUSH
14257: LD_VAR 0 3
14261: PPUSH
14262: CALL_OW 1
14266: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14267: LD_ADDR_VAR 0 4
14271: PUSH
14272: LD_VAR 0 4
14276: PPUSH
14277: LD_VAR 0 4
14281: PUSH
14282: LD_INT 1
14284: PLUS
14285: PPUSH
14286: LD_VAR 0 2
14290: PPUSH
14291: CALL_OW 1
14295: ST_TO_ADDR
// end ;
14296: GO 13996
14298: POP
14299: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + waveStrength do
14300: LD_ADDR_VAR 0 1
14304: PUSH
14305: DOUBLE
14306: LD_INT 1
14308: DEC
14309: ST_TO_ADDR
14310: LD_INT 2
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: LD_INT 3
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: PUSH
14324: LD_OWVAR 67
14328: ARRAY
14329: PUSH
14330: LD_EXP 56
14334: PLUS
14335: PUSH
14336: FOR_TO
14337: IFFALSE 14646
// begin InitHc ;
14339: CALL_OW 19
// InitVc ;
14343: CALL_OW 20
// uc_side := 3 ;
14347: LD_ADDR_OWVAR 20
14351: PUSH
14352: LD_INT 3
14354: ST_TO_ADDR
// uc_nation := 3 ;
14355: LD_ADDR_OWVAR 21
14359: PUSH
14360: LD_INT 3
14362: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14363: LD_INT 22
14365: PUSH
14366: LD_INT 23
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 1
14375: PPUSH
14376: LD_INT 2
14378: PPUSH
14379: CALL_OW 12
14383: ARRAY
14384: PPUSH
14385: LD_INT 1
14387: PPUSH
14388: LD_INT 1
14390: PPUSH
14391: LD_INT 44
14393: PUSH
14394: LD_INT 45
14396: PUSH
14397: LD_INT 43
14399: PUSH
14400: LD_INT 42
14402: PUSH
14403: LD_INT 44
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 1
14415: PPUSH
14416: LD_INT 5
14418: PPUSH
14419: CALL_OW 12
14423: ARRAY
14424: PPUSH
14425: LD_INT 99
14427: PPUSH
14428: CALL 28383 0 5
// veh := CreateVehicle ;
14432: LD_ADDR_VAR 0 3
14436: PUSH
14437: CALL_OW 45
14441: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14442: LD_VAR 0 3
14446: PPUSH
14447: LD_INT 127
14449: PPUSH
14450: LD_INT 243
14452: PPUSH
14453: LD_INT 0
14455: PPUSH
14456: LD_INT 0
14458: PPUSH
14459: CALL 62188 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14463: LD_ADDR_EXP 55
14467: PUSH
14468: LD_EXP 55
14472: PPUSH
14473: LD_EXP 55
14477: PUSH
14478: LD_INT 1
14480: PLUS
14481: PPUSH
14482: LD_VAR 0 3
14486: PPUSH
14487: CALL_OW 1
14491: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14492: LD_INT 0
14494: PPUSH
14495: LD_INT 3
14497: PPUSH
14498: LD_OWVAR 67
14502: PUSH
14503: LD_INT 2
14505: PLUS
14506: PPUSH
14507: CALL_OW 380
// un := CreateHuman ;
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: CALL_OW 44
14520: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14521: LD_VAR 0 2
14525: PPUSH
14526: LD_VAR 0 3
14530: PPUSH
14531: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14535: LD_ADDR_EXP 55
14539: PUSH
14540: LD_EXP 55
14544: PPUSH
14545: LD_EXP 55
14549: PUSH
14550: LD_INT 1
14552: PLUS
14553: PPUSH
14554: LD_VAR 0 2
14558: PPUSH
14559: CALL_OW 1
14563: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
14564: LD_VAR 0 2
14568: PPUSH
14569: LD_INT 130
14571: PPUSH
14572: LD_INT 233
14574: PPUSH
14575: CALL_OW 111
// wait ( 0 0$2 ) ;
14579: LD_INT 70
14581: PPUSH
14582: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14586: LD_ADDR_VAR 0 4
14590: PUSH
14591: LD_VAR 0 4
14595: PPUSH
14596: LD_VAR 0 4
14600: PUSH
14601: LD_INT 1
14603: PLUS
14604: PPUSH
14605: LD_VAR 0 3
14609: PPUSH
14610: CALL_OW 1
14614: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14615: LD_ADDR_VAR 0 4
14619: PUSH
14620: LD_VAR 0 4
14624: PPUSH
14625: LD_VAR 0 4
14629: PUSH
14630: LD_INT 1
14632: PLUS
14633: PPUSH
14634: LD_VAR 0 2
14638: PPUSH
14639: CALL_OW 1
14643: ST_TO_ADDR
// end ;
14644: GO 14336
14646: POP
14647: POP
// for i in tmp do
14648: LD_ADDR_VAR 0 1
14652: PUSH
14653: LD_VAR 0 4
14657: PUSH
14658: FOR_IN
14659: IFFALSE 14678
// begin ComAgressiveMove ( i , 76 , 49 ) ;
14661: LD_VAR 0 1
14665: PPUSH
14666: LD_INT 76
14668: PPUSH
14669: LD_INT 49
14671: PPUSH
14672: CALL_OW 114
// end ;
14676: GO 14658
14678: POP
14679: POP
// repeat wait ( 0 0$1 ) ;
14680: LD_INT 35
14682: PPUSH
14683: CALL_OW 67
// for i in tmp do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_VAR 0 4
14696: PUSH
14697: FOR_IN
14698: IFFALSE 14777
// if IsDead ( i ) then
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 301
14709: IFFALSE 14729
// tmp := tmp diff i else
14711: LD_ADDR_VAR 0 4
14715: PUSH
14716: LD_VAR 0 4
14720: PUSH
14721: LD_VAR 0 1
14725: DIFF
14726: ST_TO_ADDR
14727: GO 14775
// if not HasTask ( i ) then
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 314
14738: NOT
14739: IFFALSE 14775
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_INT 81
14748: PUSH
14749: LD_INT 3
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 69
14760: PPUSH
14761: LD_VAR 0 1
14765: PPUSH
14766: CALL_OW 74
14770: PPUSH
14771: CALL_OW 115
14775: GO 14697
14777: POP
14778: POP
// until not tmp ;
14779: LD_VAR 0 4
14783: NOT
14784: IFFALSE 14680
// end ;
14786: PPOPN 4
14788: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
14789: LD_EXP 6
14793: IFFALSE 15264
14795: GO 14797
14797: DISABLE
14798: LD_INT 0
14800: PPUSH
14801: PPUSH
14802: PPUSH
14803: PPUSH
// begin wait ( 3 3$00 ) ;
14804: LD_INT 6300
14806: PPUSH
14807: CALL_OW 67
// for i := 1 to 3 do
14811: LD_ADDR_VAR 0 1
14815: PUSH
14816: DOUBLE
14817: LD_INT 1
14819: DEC
14820: ST_TO_ADDR
14821: LD_INT 3
14823: PUSH
14824: FOR_TO
14825: IFFALSE 15124
// begin InitHc ;
14827: CALL_OW 19
// InitVc ;
14831: CALL_OW 20
// uc_side := 3 ;
14835: LD_ADDR_OWVAR 20
14839: PUSH
14840: LD_INT 3
14842: ST_TO_ADDR
// uc_nation := 3 ;
14843: LD_ADDR_OWVAR 21
14847: PUSH
14848: LD_INT 3
14850: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14851: LD_INT 22
14853: PUSH
14854: LD_INT 23
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 1
14863: PPUSH
14864: LD_INT 2
14866: PPUSH
14867: CALL_OW 12
14871: ARRAY
14872: PPUSH
14873: LD_INT 1
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: LD_INT 44
14881: PUSH
14882: LD_INT 43
14884: PUSH
14885: LD_INT 42
14887: PUSH
14888: LD_INT 44
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 1
14899: PPUSH
14900: LD_INT 4
14902: PPUSH
14903: CALL_OW 12
14907: ARRAY
14908: PPUSH
14909: LD_INT 99
14911: PPUSH
14912: CALL 28383 0 5
// veh := CreateVehicle ;
14916: LD_ADDR_VAR 0 3
14920: PUSH
14921: CALL_OW 45
14925: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_INT 293
14933: PPUSH
14934: LD_INT 246
14936: PPUSH
14937: LD_INT 5
14939: PPUSH
14940: LD_INT 0
14942: PPUSH
14943: CALL 62188 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14947: LD_ADDR_EXP 55
14951: PUSH
14952: LD_EXP 55
14956: PPUSH
14957: LD_EXP 55
14961: PUSH
14962: LD_INT 1
14964: PLUS
14965: PPUSH
14966: LD_VAR 0 3
14970: PPUSH
14971: CALL_OW 1
14975: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
14976: LD_INT 0
14978: PPUSH
14979: LD_INT 3
14981: PPUSH
14982: LD_INT 3
14984: PPUSH
14985: CALL_OW 380
// un := CreateHuman ;
14989: LD_ADDR_VAR 0 2
14993: PUSH
14994: CALL_OW 44
14998: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14999: LD_VAR 0 2
15003: PPUSH
15004: LD_VAR 0 3
15008: PPUSH
15009: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15013: LD_ADDR_EXP 55
15017: PUSH
15018: LD_EXP 55
15022: PPUSH
15023: LD_EXP 55
15027: PUSH
15028: LD_INT 1
15030: PLUS
15031: PPUSH
15032: LD_VAR 0 2
15036: PPUSH
15037: CALL_OW 1
15041: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15042: LD_VAR 0 2
15046: PPUSH
15047: LD_INT 273
15049: PPUSH
15050: LD_INT 227
15052: PPUSH
15053: CALL_OW 111
// wait ( 0 0$2 ) ;
15057: LD_INT 70
15059: PPUSH
15060: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15064: LD_ADDR_VAR 0 4
15068: PUSH
15069: LD_VAR 0 4
15073: PPUSH
15074: LD_VAR 0 4
15078: PUSH
15079: LD_INT 1
15081: PLUS
15082: PPUSH
15083: LD_VAR 0 3
15087: PPUSH
15088: CALL_OW 1
15092: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15093: LD_ADDR_VAR 0 4
15097: PUSH
15098: LD_VAR 0 4
15102: PPUSH
15103: LD_VAR 0 4
15107: PUSH
15108: LD_INT 1
15110: PLUS
15111: PPUSH
15112: LD_VAR 0 2
15116: PPUSH
15117: CALL_OW 1
15121: ST_TO_ADDR
// end ;
15122: GO 14824
15124: POP
15125: POP
// for i in tmp do
15126: LD_ADDR_VAR 0 1
15130: PUSH
15131: LD_VAR 0 4
15135: PUSH
15136: FOR_IN
15137: IFFALSE 15156
// begin ComAgressiveMove ( i , 330 , 231 ) ;
15139: LD_VAR 0 1
15143: PPUSH
15144: LD_INT 330
15146: PPUSH
15147: LD_INT 231
15149: PPUSH
15150: CALL_OW 114
// end ;
15154: GO 15136
15156: POP
15157: POP
// repeat wait ( 0 0$1 ) ;
15158: LD_INT 35
15160: PPUSH
15161: CALL_OW 67
// for i in tmp do
15165: LD_ADDR_VAR 0 1
15169: PUSH
15170: LD_VAR 0 4
15174: PUSH
15175: FOR_IN
15176: IFFALSE 15255
// if IsDead ( i ) then
15178: LD_VAR 0 1
15182: PPUSH
15183: CALL_OW 301
15187: IFFALSE 15207
// tmp := tmp diff i else
15189: LD_ADDR_VAR 0 4
15193: PUSH
15194: LD_VAR 0 4
15198: PUSH
15199: LD_VAR 0 1
15203: DIFF
15204: ST_TO_ADDR
15205: GO 15253
// if not HasTask ( i ) then
15207: LD_VAR 0 1
15211: PPUSH
15212: CALL_OW 314
15216: NOT
15217: IFFALSE 15253
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15219: LD_VAR 0 1
15223: PPUSH
15224: LD_INT 81
15226: PUSH
15227: LD_INT 3
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PPUSH
15234: CALL_OW 69
15238: PPUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 74
15248: PPUSH
15249: CALL_OW 115
15253: GO 15175
15255: POP
15256: POP
// until not tmp ;
15257: LD_VAR 0 4
15261: NOT
15262: IFFALSE 15158
// end ;
15264: PPOPN 4
15266: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15267: LD_INT 3
15269: PUSH
15270: LD_INT 22
15272: PUSH
15273: LD_INT 2
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 32
15286: PUSH
15287: LD_INT 1
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PPUSH
15298: CALL_OW 69
15302: IFFALSE 15386
15304: GO 15306
15306: DISABLE
15307: LD_INT 0
15309: PPUSH
// begin enable ;
15310: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15311: LD_ADDR_VAR 0 1
15315: PUSH
15316: LD_INT 3
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 32
15335: PUSH
15336: LD_INT 1
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PPUSH
15347: CALL_OW 69
15351: PUSH
15352: FOR_IN
15353: IFFALSE 15384
// if GetFuel ( i ) < 3 then
15355: LD_VAR 0 1
15359: PPUSH
15360: CALL_OW 261
15364: PUSH
15365: LD_INT 3
15367: LESS
15368: IFFALSE 15382
// SetFuel ( i , 3 ) ;
15370: LD_VAR 0 1
15374: PPUSH
15375: LD_INT 3
15377: PPUSH
15378: CALL_OW 240
15382: GO 15352
15384: POP
15385: POP
// end ; end_of_file
15386: PPOPN 1
15388: END
// export function Action ; begin
15389: LD_INT 0
15391: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15392: LD_INT 2
15394: PPUSH
15395: LD_INT 4
15397: PPUSH
15398: CALL_OW 332
// Video ( true ) ;
15402: LD_INT 1
15404: PPUSH
15405: CALL 60229 0 1
// CenterNowOnXY ( 213 , 89 ) ;
15409: LD_INT 213
15411: PPUSH
15412: LD_INT 89
15414: PPUSH
15415: CALL_OW 86
// if not debug then
15419: LD_EXP 1
15423: NOT
15424: IFFALSE 15458
// begin if Kaia and Olaf then
15426: LD_EXP 33
15430: PUSH
15431: LD_EXP 37
15435: AND
15436: IFFALSE 15442
// SceneKaiaWithOlaf ;
15438: CALL 15481 0 0
// if Givi and Kamil then
15442: LD_EXP 29
15446: PUSH
15447: LD_EXP 32
15451: AND
15452: IFFALSE 15458
// SceneWithGiviAndKamil ;
15454: CALL 16052 0 0
// end ; Video ( false ) ;
15458: LD_INT 0
15460: PPUSH
15461: CALL 60229 0 1
// ChangeMissionObjectives ( M1 ) ;
15465: LD_STRING M1
15467: PPUSH
15468: CALL_OW 337
// SaveForQuickRestart ;
15472: CALL_OW 22
// end ;
15476: LD_VAR 0 1
15480: RET
// export function SceneKaiaWithOlaf ; begin
15481: LD_INT 0
15483: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
15484: LD_INT 22
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 30
15496: PUSH
15497: LD_INT 3
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PPUSH
15508: CALL_OW 69
15512: PPUSH
15513: LD_INT 14
15515: PPUSH
15516: LD_INT 1
15518: PPUSH
15519: LD_INT 1
15521: PPUSH
15522: LD_INT 26
15524: PPUSH
15525: CALL_OW 125
// wait ( 0 0$1 ) ;
15529: LD_INT 35
15531: PPUSH
15532: CALL_OW 67
// Say ( Kaia , DK-06-Mem-1 ) ;
15536: LD_EXP 33
15540: PPUSH
15541: LD_STRING DK-06-Mem-1
15543: PPUSH
15544: CALL_OW 88
// Say ( Kaia , DK-06-Mem-2 ) ;
15548: LD_EXP 33
15552: PPUSH
15553: LD_STRING DK-06-Mem-2
15555: PPUSH
15556: CALL_OW 88
// Say ( Olaf , DO-06-Mem-3 ) ;
15560: LD_EXP 37
15564: PPUSH
15565: LD_STRING DO-06-Mem-3
15567: PPUSH
15568: CALL_OW 88
// Say ( Kaia , DK-06-Mem-4 ) ;
15572: LD_EXP 33
15576: PPUSH
15577: LD_STRING DK-06-Mem-4
15579: PPUSH
15580: CALL_OW 88
// Say ( Olaf , DO-06-Mem-5 ) ;
15584: LD_EXP 37
15588: PPUSH
15589: LD_STRING DO-06-Mem-5
15591: PPUSH
15592: CALL_OW 88
// wait ( 0 0$2 ) ;
15596: LD_INT 70
15598: PPUSH
15599: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
15603: LD_INT 22
15605: PUSH
15606: LD_INT 2
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 30
15615: PUSH
15616: LD_INT 3
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PPUSH
15627: CALL_OW 69
15631: PPUSH
15632: LD_INT 90
15634: PPUSH
15635: CALL_OW 329
// Say ( Olaf , DO-06-Mem-6 ) ;
15639: LD_EXP 37
15643: PPUSH
15644: LD_STRING DO-06-Mem-6
15646: PPUSH
15647: CALL_OW 88
// Say ( Kaia , DK-06-Mem-7 ) ;
15651: LD_EXP 33
15655: PPUSH
15656: LD_STRING DK-06-Mem-7
15658: PPUSH
15659: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
15663: LD_EXP 28
15667: PPUSH
15668: LD_EXP 33
15672: PPUSH
15673: CALL_OW 119
// Say ( Heike , DH-06-Mem-8 ) ;
15677: LD_EXP 28
15681: PPUSH
15682: LD_STRING DH-06-Mem-8
15684: PPUSH
15685: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
15689: LD_EXP 33
15693: PUSH
15694: LD_EXP 37
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PPUSH
15703: LD_EXP 28
15707: PPUSH
15708: CALL_OW 119
// Say ( Olaf , DO-06-Mem-9 ) ;
15712: LD_EXP 37
15716: PPUSH
15717: LD_STRING DO-06-Mem-9
15719: PPUSH
15720: CALL_OW 88
// Say ( Olaf , DO-06-Mem-10 ) ;
15724: LD_EXP 37
15728: PPUSH
15729: LD_STRING DO-06-Mem-10
15731: PPUSH
15732: CALL_OW 88
// Say ( Olaf , DO-06-Mem-11 ) ;
15736: LD_EXP 37
15740: PPUSH
15741: LD_STRING DO-06-Mem-11
15743: PPUSH
15744: CALL_OW 88
// Say ( Olaf , DO-06-Mem-12 ) ;
15748: LD_EXP 37
15752: PPUSH
15753: LD_STRING DO-06-Mem-12
15755: PPUSH
15756: CALL_OW 88
// Say ( Kaia , DK-06-Mem-13 ) ;
15760: LD_EXP 33
15764: PPUSH
15765: LD_STRING DK-06-Mem-13
15767: PPUSH
15768: CALL_OW 88
// Say ( Kaia , DK-06-Mem-14 ) ;
15772: LD_EXP 33
15776: PPUSH
15777: LD_STRING DK-06-Mem-14
15779: PPUSH
15780: CALL_OW 88
// Say ( Kaia , DK-06-Mem-15 ) ;
15784: LD_EXP 33
15788: PPUSH
15789: LD_STRING DK-06-Mem-15
15791: PPUSH
15792: CALL_OW 88
// Say ( Kaia , DK-06-Mem-16 ) ;
15796: LD_EXP 33
15800: PPUSH
15801: LD_STRING DK-06-Mem-16
15803: PPUSH
15804: CALL_OW 88
// Say ( Kaia , DK-06-Mem-17 ) ;
15808: LD_EXP 33
15812: PPUSH
15813: LD_STRING DK-06-Mem-17
15815: PPUSH
15816: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
15820: LD_EXP 37
15824: PPUSH
15825: LD_EXP 33
15829: PPUSH
15830: CALL_OW 119
// Say ( Olaf , DO-06-Mem-18 ) ;
15834: LD_EXP 37
15838: PPUSH
15839: LD_STRING DO-06-Mem-18
15841: PPUSH
15842: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
15846: LD_EXP 33
15850: PPUSH
15851: LD_EXP 37
15855: PPUSH
15856: CALL_OW 119
// Say ( Kaia , DK-06-Mem-19 ) ;
15860: LD_EXP 33
15864: PPUSH
15865: LD_STRING DK-06-Mem-19
15867: PPUSH
15868: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
15872: LD_EXP 37
15876: PPUSH
15877: LD_INT 214
15879: PPUSH
15880: LD_INT 86
15882: PPUSH
15883: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
15887: LD_EXP 37
15891: PPUSH
15892: LD_EXP 33
15896: PPUSH
15897: CALL_OW 179
// if Givi then
15901: LD_EXP 29
15905: IFFALSE 15936
// begin ComMoveXY ( Givi , 217 , 86 ) ;
15907: LD_EXP 29
15911: PPUSH
15912: LD_INT 217
15914: PPUSH
15915: LD_INT 86
15917: PPUSH
15918: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
15922: LD_EXP 29
15926: PPUSH
15927: LD_EXP 28
15931: PPUSH
15932: CALL_OW 179
// end ; if Kamil then
15936: LD_EXP 32
15940: IFFALSE 15980
// begin ComExit ( Kamil ) ;
15942: LD_EXP 32
15946: PPUSH
15947: CALL 60645 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
15951: LD_EXP 32
15955: PPUSH
15956: LD_INT 212
15958: PPUSH
15959: LD_INT 86
15961: PPUSH
15962: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
15966: LD_EXP 32
15970: PPUSH
15971: LD_EXP 28
15975: PPUSH
15976: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
15980: LD_INT 70
15982: PPUSH
15983: CALL_OW 67
// Say ( Heike , DH-06-Mem-20 ) ;
15987: LD_EXP 28
15991: PPUSH
15992: LD_STRING DH-06-Mem-20
15994: PPUSH
15995: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
15999: LD_EXP 37
16003: PPUSH
16004: LD_INT 215
16006: PPUSH
16007: LD_INT 87
16009: PPUSH
16010: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16014: LD_EXP 37
16018: PPUSH
16019: LD_EXP 33
16023: PPUSH
16024: CALL_OW 179
// Say ( Kaia , DK-06-Mem-21 ) ;
16028: LD_EXP 33
16032: PPUSH
16033: LD_STRING DK-06-Mem-21
16035: PPUSH
16036: CALL_OW 88
// wait ( 0 0$2 ) ;
16040: LD_INT 70
16042: PPUSH
16043: CALL_OW 67
// end ;
16047: LD_VAR 0 1
16051: RET
// export function SceneWithGiviAndKamil ; begin
16052: LD_INT 0
16054: PPUSH
// if Markov then
16055: LD_EXP 35
16059: IFFALSE 16110
// begin if IsInUnit ( Markov ) then
16061: LD_EXP 35
16065: PPUSH
16066: CALL_OW 310
16070: IFFALSE 16081
// ComExit ( Markov ) ;
16072: LD_EXP 35
16076: PPUSH
16077: CALL 60645 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16081: LD_EXP 35
16085: PPUSH
16086: LD_INT 212
16088: PPUSH
16089: LD_INT 88
16091: PPUSH
16092: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16096: LD_EXP 35
16100: PPUSH
16101: LD_EXP 28
16105: PPUSH
16106: CALL_OW 179
// end ; Say ( Givi , DG-06-Obj-1 ) ;
16110: LD_EXP 29
16114: PPUSH
16115: LD_STRING DG-06-Obj-1
16117: PPUSH
16118: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-2 ) ;
16122: LD_EXP 32
16126: PPUSH
16127: LD_STRING DKam-06-Obj-2
16129: PPUSH
16130: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16134: LD_EXP 28
16138: PPUSH
16139: LD_EXP 32
16143: PPUSH
16144: CALL_OW 119
// Say ( Kamil , DKam-06-Obj-3 ) ;
16148: LD_EXP 32
16152: PPUSH
16153: LD_STRING DKam-06-Obj-3
16155: PPUSH
16156: CALL_OW 88
// Say ( Markov , DMar-06-Obj-4 ) ;
16160: LD_EXP 35
16164: PPUSH
16165: LD_STRING DMar-06-Obj-4
16167: PPUSH
16168: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-6 ) ;
16172: LD_EXP 32
16176: PPUSH
16177: LD_STRING DKam-06-Obj-6
16179: PPUSH
16180: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-7 ) ;
16184: LD_EXP 32
16188: PPUSH
16189: LD_STRING DKam-06-Obj-7
16191: PPUSH
16192: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-8 ) ;
16196: LD_EXP 32
16200: PPUSH
16201: LD_STRING DKam-06-Obj-8
16203: PPUSH
16204: CALL_OW 88
// Say ( Heike , DH-06-Obj-9 ) ;
16208: LD_EXP 28
16212: PPUSH
16213: LD_STRING DH-06-Obj-9
16215: PPUSH
16216: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-10 ) ;
16220: LD_EXP 32
16224: PPUSH
16225: LD_STRING DKam-06-Obj-10
16227: PPUSH
16228: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-11 ) ;
16232: LD_EXP 32
16236: PPUSH
16237: LD_STRING DKam-06-Obj-11
16239: PPUSH
16240: CALL_OW 88
// Say ( Markov , DMar-06-Obj-12 ) ;
16244: LD_EXP 35
16248: PPUSH
16249: LD_STRING DMar-06-Obj-12
16251: PPUSH
16252: CALL_OW 88
// Say ( Markov , DMar-06-Obj-13 ) ;
16256: LD_EXP 35
16260: PPUSH
16261: LD_STRING DMar-06-Obj-13
16263: PPUSH
16264: CALL_OW 88
// Say ( Markov , DMar-06-Obj-14 ) ;
16268: LD_EXP 35
16272: PPUSH
16273: LD_STRING DMar-06-Obj-14
16275: PPUSH
16276: CALL_OW 88
// Say ( Olaf , DO-06-Obj-15 ) ;
16280: LD_EXP 37
16284: PPUSH
16285: LD_STRING DO-06-Obj-15
16287: PPUSH
16288: CALL_OW 88
// Say ( Olaf , DO-06-Obj-16 ) ;
16292: LD_EXP 37
16296: PPUSH
16297: LD_STRING DO-06-Obj-16
16299: PPUSH
16300: CALL_OW 88
// Say ( Heike , DH-06-Obj-17 ) ;
16304: LD_EXP 28
16308: PPUSH
16309: LD_STRING DH-06-Obj-17
16311: PPUSH
16312: CALL_OW 88
// Say ( Olaf , DO-06-Obj-18 ) ;
16316: LD_EXP 37
16320: PPUSH
16321: LD_STRING DO-06-Obj-18
16323: PPUSH
16324: CALL_OW 88
// end ;
16328: LD_VAR 0 1
16332: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16333: LD_INT 34
16335: PUSH
16336: LD_EXP 62
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PPUSH
16345: CALL_OW 69
16349: IFFALSE 16546
16351: GO 16353
16353: DISABLE
16354: LD_INT 0
16356: PPUSH
// begin wait ( 0 0$2 ) ;
16357: LD_INT 70
16359: PPUSH
16360: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16364: LD_INT 34
16366: PUSH
16367: LD_EXP 62
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 69
16380: PPUSH
16381: CALL_OW 87
// DialogueOn ;
16385: CALL_OW 6
// if Markov then
16389: LD_EXP 35
16393: IFFALSE 16421
// begin Say ( Markov , DMar-06-Grn-1 ) ;
16395: LD_EXP 35
16399: PPUSH
16400: LD_STRING DMar-06-Grn-1
16402: PPUSH
16403: CALL_OW 88
// Say ( Heike , DH-06-Grn-2 ) ;
16407: LD_EXP 28
16411: PPUSH
16412: LD_STRING DH-06-Grn-2
16414: PPUSH
16415: CALL_OW 88
// end else
16419: GO 16520
// if heikeSecondSquad then
16421: LD_EXP 43
16425: IFFALSE 16520
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16427: LD_ADDR_VAR 0 1
16431: PUSH
16432: LD_EXP 43
16436: PUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_EXP 43
16444: PPUSH
16445: CALL_OW 12
16449: ARRAY
16450: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL_OW 258
16460: PUSH
16461: LD_INT 1
16463: DOUBLE
16464: EQUAL
16465: IFTRUE 16469
16467: GO 16484
16469: POP
// Say ( random , DArm-06-Grn-1 ) ; 2 :
16470: LD_VAR 0 1
16474: PPUSH
16475: LD_STRING DArm-06-Grn-1
16477: PPUSH
16478: CALL_OW 88
16482: GO 16508
16484: LD_INT 2
16486: DOUBLE
16487: EQUAL
16488: IFTRUE 16492
16490: GO 16507
16492: POP
// Say ( random , DArf-06-Grn-1 ) ; end ;
16493: LD_VAR 0 1
16497: PPUSH
16498: LD_STRING DArf-06-Grn-1
16500: PPUSH
16501: CALL_OW 88
16505: GO 16508
16507: POP
// Say ( Heike , DH-06-Grn-2 ) ;
16508: LD_EXP 28
16512: PPUSH
16513: LD_STRING DH-06-Grn-2
16515: PPUSH
16516: CALL_OW 88
// end ; DialogueOff ;
16520: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
16524: LD_STRING MortarConstructed
16526: PPUSH
16527: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
16531: LD_STRING SelfPropelledMortar
16533: PPUSH
16534: CALL_OW 339
// mortarConstructed := true ;
16538: LD_ADDR_EXP 15
16542: PUSH
16543: LD_INT 1
16545: ST_TO_ADDR
// end ;
16546: PPOPN 1
16548: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
16549: LD_INT 2
16551: PPUSH
16552: LD_INT 8
16554: PPUSH
16555: CALL_OW 294
16559: IFFALSE 16702
16561: GO 16563
16563: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
16564: LD_INT 200
16566: PPUSH
16567: LD_INT 162
16569: PPUSH
16570: LD_INT 2
16572: PPUSH
16573: LD_INT 6
16575: NEG
16576: PPUSH
16577: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
16581: LD_INT 200
16583: PPUSH
16584: LD_INT 162
16586: PPUSH
16587: LD_INT 2
16589: PPUSH
16590: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
16594: LD_INT 200
16596: PPUSH
16597: LD_INT 162
16599: PPUSH
16600: CALL_OW 84
// if not IsOk ( Kurt ) then
16604: LD_EXP 39
16608: PPUSH
16609: CALL_OW 302
16613: NOT
16614: IFFALSE 16618
// exit ;
16616: GO 16702
// Say ( Kurt , DKs-06-Otpst-2-1 ) ;
16618: LD_EXP 39
16622: PPUSH
16623: LD_STRING DKs-06-Otpst-2-1
16625: PPUSH
16626: CALL_OW 88
// Say ( Kaia , DK-06-Otpst-2-2 ) ;
16630: LD_EXP 33
16634: PPUSH
16635: LD_STRING DK-06-Otpst-2-2
16637: PPUSH
16638: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-3 ) ;
16642: LD_EXP 39
16646: PPUSH
16647: LD_STRING DKs-06-Otpst-2-3
16649: PPUSH
16650: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-4 ) ;
16654: LD_EXP 39
16658: PPUSH
16659: LD_STRING DKs-06-Otpst-2-4
16661: PPUSH
16662: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-5 ) ;
16666: LD_EXP 39
16670: PPUSH
16671: LD_STRING DKs-06-Otpst-2-5
16673: PPUSH
16674: CALL_OW 88
// Say ( Kamil , DKam-06-Otpst-2-6 ) ;
16678: LD_EXP 32
16682: PPUSH
16683: LD_STRING DKam-06-Otpst-2-6
16685: PPUSH
16686: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-7 ) ;
16690: LD_EXP 39
16694: PPUSH
16695: LD_STRING DKs-06-Otpst-2-7
16697: PPUSH
16698: CALL_OW 88
// end ;
16702: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
16703: LD_INT 8
16705: PPUSH
16706: LD_INT 22
16708: PUSH
16709: LD_INT 3
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 21
16718: PUSH
16719: LD_INT 3
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PPUSH
16730: CALL_OW 70
16734: NOT
16735: PUSH
16736: LD_EXP 3
16740: NOT
16741: AND
16742: IFFALSE 16992
16744: GO 16746
16746: DISABLE
16747: LD_INT 0
16749: PPUSH
// begin outpostDestroyed := true ;
16750: LD_ADDR_EXP 4
16754: PUSH
16755: LD_INT 1
16757: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
16758: LD_INT 22
16760: PUSH
16761: LD_INT 2
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 34
16770: PUSH
16771: LD_EXP 62
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 92
16782: PUSH
16783: LD_INT 195
16785: PUSH
16786: LD_INT 164
16788: PUSH
16789: LD_INT 12
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL_OW 69
16807: NOT
16808: IFFALSE 16812
// exit ;
16810: GO 16992
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
16812: LD_EXP 29
16816: PPUSH
16817: CALL_OW 302
16821: NOT
16822: PUSH
16823: LD_EXP 33
16827: PPUSH
16828: CALL_OW 302
16832: NOT
16833: OR
16834: IFFALSE 16838
// exit ;
16836: GO 16992
// Say ( Givi , DG-06-Otpst-1-1 ) ;
16838: LD_EXP 29
16842: PPUSH
16843: LD_STRING DG-06-Otpst-1-1
16845: PPUSH
16846: CALL_OW 88
// Say ( Kaia , DK-06-Otpst-1-2 ) ;
16850: LD_EXP 33
16854: PPUSH
16855: LD_STRING DK-06-Otpst-1-2
16857: PPUSH
16858: CALL_OW 88
// if IsOk ( Markov ) then
16862: LD_EXP 35
16866: PPUSH
16867: CALL_OW 302
16871: IFFALSE 16899
// begin Say ( Markov , DMar-06-Otpst-1-3 ) ;
16873: LD_EXP 35
16877: PPUSH
16878: LD_STRING DMar-06-Otpst-1-3
16880: PPUSH
16881: CALL_OW 88
// Say ( Markov , DMar-06-Otpst-1-4 ) ;
16885: LD_EXP 35
16889: PPUSH
16890: LD_STRING DMar-06-Otpst-1-4
16892: PPUSH
16893: CALL_OW 88
// end else
16897: GO 16980
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16899: LD_ADDR_VAR 0 1
16903: PUSH
16904: LD_EXP 43
16908: PUSH
16909: LD_INT 1
16911: PPUSH
16912: LD_EXP 43
16916: PPUSH
16917: CALL_OW 12
16921: ARRAY
16922: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 258
16932: PUSH
16933: LD_INT 1
16935: DOUBLE
16936: EQUAL
16937: IFTRUE 16941
16939: GO 16956
16941: POP
// Say ( random , DArm-06-Otpst-1-a-3 ) ; 2 :
16942: LD_VAR 0 1
16946: PPUSH
16947: LD_STRING DArm-06-Otpst-1-a-3
16949: PPUSH
16950: CALL_OW 88
16954: GO 16980
16956: LD_INT 2
16958: DOUBLE
16959: EQUAL
16960: IFTRUE 16964
16962: GO 16979
16964: POP
// Say ( random , DArf-06-Otpst-1-a-3 ) ; end ;
16965: LD_VAR 0 1
16969: PPUSH
16970: LD_STRING DArf-06-Otpst-1-a-3
16972: PPUSH
16973: CALL_OW 88
16977: GO 16980
16979: POP
// end ; Say ( Givi , DG-06-Otpst-1-5 ) ;
16980: LD_EXP 29
16984: PPUSH
16985: LD_STRING DG-06-Otpst-1-5
16987: PPUSH
16988: CALL_OW 88
// end ;
16992: PPOPN 1
16994: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
16995: LD_EXP 33
16999: PPUSH
17000: CALL_OW 256
17004: PUSH
17005: LD_INT 10
17007: LESS
17008: IFFALSE 17122
17010: GO 17012
17012: DISABLE
// begin DialogueOn ;
17013: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17017: LD_EXP 33
17021: PPUSH
17022: CALL_OW 87
// ForceSay ( Kaia , DK-06-Dead-1 ) ;
17026: LD_EXP 33
17030: PPUSH
17031: LD_STRING DK-06-Dead-1
17033: PPUSH
17034: CALL_OW 91
// Say ( Heike , DH-06-Dead-2 ) ;
17038: LD_EXP 28
17042: PPUSH
17043: LD_STRING DH-06-Dead-2
17045: PPUSH
17046: CALL_OW 88
// ForceSay ( Kaia , DK-06-Dead-3 ) ;
17050: LD_EXP 33
17054: PPUSH
17055: LD_STRING DK-06-Dead-3
17057: PPUSH
17058: CALL_OW 91
// Say ( Heike , DH-06-Dead-4 ) ;
17062: LD_EXP 28
17066: PPUSH
17067: LD_STRING DH-06-Dead-4
17069: PPUSH
17070: CALL_OW 88
// if IsOk ( Mike ) then
17074: LD_EXP 30
17078: PPUSH
17079: CALL_OW 302
17083: IFFALSE 17109
// begin Say ( Mike , DM-06-Dead-5 ) ;
17085: LD_EXP 30
17089: PPUSH
17090: LD_STRING DM-06-Dead-5
17092: PPUSH
17093: CALL_OW 88
// Say ( Heike , DH-06-Dead-6 ) ;
17097: LD_EXP 28
17101: PPUSH
17102: LD_STRING DH-06-Dead-6
17104: PPUSH
17105: CALL_OW 88
// end ; DialogueOff ;
17109: CALL_OW 7
// KillUnit ( Kaia ) ;
17113: LD_EXP 33
17117: PPUSH
17118: CALL_OW 66
// end ;
17122: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 8 do var i , tmp , dep ;
17123: LD_OWVAR 1
17127: PUSH
17128: LD_INT 21700
17130: GREATEREQUAL
17131: PUSH
17132: LD_EXP 5
17136: PUSH
17137: LD_INT 8
17139: GREATER
17140: OR
17141: IFFALSE 17548
17143: GO 17145
17145: DISABLE
17146: LD_INT 0
17148: PPUSH
17149: PPUSH
17150: PPUSH
// begin PrepareRolfSquad ;
17151: CALL 2340 0 0
// dep := HexInfo ( 86 , 54 ) ;
17155: LD_ADDR_VAR 0 3
17159: PUSH
17160: LD_INT 86
17162: PPUSH
17163: LD_INT 54
17165: PPUSH
17166: CALL_OW 428
17170: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17171: LD_VAR 0 3
17175: PPUSH
17176: CALL_OW 274
17180: PPUSH
17181: LD_INT 1
17183: PPUSH
17184: LD_INT 300
17186: PPUSH
17187: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17191: LD_VAR 0 3
17195: PPUSH
17196: CALL_OW 274
17200: PPUSH
17201: LD_INT 2
17203: PPUSH
17204: LD_INT 300
17206: PPUSH
17207: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17211: LD_EXP 45
17215: PPUSH
17216: LD_INT 79
17218: PPUSH
17219: LD_INT 52
17221: PPUSH
17222: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17226: LD_INT 35
17228: PPUSH
17229: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17233: LD_INT 12
17235: PPUSH
17236: LD_INT 22
17238: PUSH
17239: LD_INT 3
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 21
17248: PUSH
17249: LD_INT 1
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PPUSH
17260: CALL_OW 70
17264: NOT
17265: IFFALSE 17226
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17267: LD_ADDR_VAR 0 2
17271: PUSH
17272: LD_INT 12
17274: PPUSH
17275: LD_INT 21
17277: PUSH
17278: LD_INT 3
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PPUSH
17285: CALL_OW 70
17289: ST_TO_ADDR
// for i in tmp do
17290: LD_ADDR_VAR 0 1
17294: PUSH
17295: LD_VAR 0 2
17299: PUSH
17300: FOR_IN
17301: IFFALSE 17317
// SetSide ( i , 8 ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_INT 8
17310: PPUSH
17311: CALL_OW 235
17315: GO 17300
17317: POP
17318: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17319: LD_INT 63
17321: PPUSH
17322: LD_INT 42
17324: PPUSH
17325: CALL_OW 428
17329: PPUSH
17330: LD_INT 320
17332: PPUSH
17333: CALL_OW 234
// wait ( 0 0$10 ) ;
17337: LD_INT 350
17339: PPUSH
17340: CALL_OW 67
// DialogueOn ;
17344: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17348: LD_INT 8
17350: PPUSH
17351: LD_INT 2
17353: PPUSH
17354: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17358: LD_INT 86
17360: PPUSH
17361: LD_INT 54
17363: PPUSH
17364: CALL_OW 428
17368: PPUSH
17369: LD_STRING antwerp
17371: PPUSH
17372: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17376: LD_EXP 41
17380: PPUSH
17381: CALL_OW 87
// SayRadio ( Rolf , DRf-06-rast-1 ) ;
17385: LD_EXP 41
17389: PPUSH
17390: LD_STRING DRf-06-rast-1
17392: PPUSH
17393: CALL_OW 94
// Say ( Heike , DH-06-rast-2 ) ;
17397: LD_EXP 28
17401: PPUSH
17402: LD_STRING DH-06-rast-2
17404: PPUSH
17405: CALL_OW 88
// SayRadio ( Rolf , DRf-06-rast-3 ) ;
17409: LD_EXP 41
17413: PPUSH
17414: LD_STRING DRf-06-rast-3
17416: PPUSH
17417: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-4 ) ;
17421: LD_EXP 41
17425: PPUSH
17426: LD_STRING DRf-06-rast-4
17428: PPUSH
17429: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-5 ) ;
17433: LD_EXP 41
17437: PPUSH
17438: LD_STRING DRf-06-rast-5
17440: PPUSH
17441: CALL_OW 94
// if IsOk ( Aviradze ) then
17445: LD_EXP 40
17449: PPUSH
17450: CALL_OW 302
17454: IFFALSE 17513
// begin CenterNowOnUnits ( Aviradze ) ;
17456: LD_EXP 40
17460: PPUSH
17461: CALL_OW 87
// Say ( Aviradze , DA-06-rast-6 ) ;
17465: LD_EXP 40
17469: PPUSH
17470: LD_STRING DA-06-rast-6
17472: PPUSH
17473: CALL_OW 88
// Say ( Heike , DH-06-rast-7 ) ;
17477: LD_EXP 28
17481: PPUSH
17482: LD_STRING DH-06-rast-7
17484: PPUSH
17485: CALL_OW 88
// Say ( Givi , DG-06-rast-8 ) ;
17489: LD_EXP 29
17493: PPUSH
17494: LD_STRING DG-06-rast-8
17496: PPUSH
17497: CALL_OW 88
// Say ( Givi , DG-06-rast-9 ) ;
17501: LD_EXP 29
17505: PPUSH
17506: LD_STRING DG-06-rast-9
17508: PPUSH
17509: CALL_OW 88
// end ; Say ( Heike , DH-06-rast-10 ) ;
17513: LD_EXP 28
17517: PPUSH
17518: LD_STRING DH-06-rast-10
17520: PPUSH
17521: CALL_OW 88
// DialogueOff ;
17525: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17529: LD_STRING M2
17531: PPUSH
17532: CALL_OW 337
// bergkampfArrived := true ;
17536: LD_ADDR_EXP 3
17540: PUSH
17541: LD_INT 1
17543: ST_TO_ADDR
// PrepareRolfBase ;
17544: CALL 2671 0 0
// end ;
17548: PPOPN 3
17550: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) do var i ;
17551: LD_INT 12
17553: PPUSH
17554: LD_INT 22
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PPUSH
17564: CALL_OW 70
17568: PUSH
17569: LD_EXP 41
17573: PPUSH
17574: CALL_OW 302
17578: AND
17579: IFFALSE 18139
17581: GO 17583
17583: DISABLE
17584: LD_INT 0
17586: PPUSH
// begin DialogueOn ;
17587: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
17591: LD_EXP 41
17595: PPUSH
17596: CALL_OW 87
// if rolfSquad >= 10 then
17600: LD_EXP 45
17604: PUSH
17605: LD_INT 10
17607: GREATEREQUAL
17608: IFFALSE 17787
// begin linkedWithRolf := 2 ;
17610: LD_ADDR_EXP 12
17614: PUSH
17615: LD_INT 2
17617: ST_TO_ADDR
// Say ( Rolf , DRf-06-rast-11 ) ;
17618: LD_EXP 41
17622: PPUSH
17623: LD_STRING DRf-06-rast-11
17625: PPUSH
17626: CALL_OW 88
// Say ( Heike , DH-06-rast-12 ) ;
17630: LD_EXP 28
17634: PPUSH
17635: LD_STRING DH-06-rast-12
17637: PPUSH
17638: CALL_OW 88
// Say ( Rolf , DRf-06-rast-13 ) ;
17642: LD_EXP 41
17646: PPUSH
17647: LD_STRING DRf-06-rast-13
17649: PPUSH
17650: CALL_OW 88
// Say ( Heike , DH-06-rast-14 ) ;
17654: LD_EXP 28
17658: PPUSH
17659: LD_STRING DH-06-rast-14
17661: PPUSH
17662: CALL_OW 88
// Say ( Rolf , DRf-06-rast-15 ) ;
17666: LD_EXP 41
17670: PPUSH
17671: LD_STRING DRf-06-rast-15
17673: PPUSH
17674: CALL_OW 88
// Say ( Heike , DH-06-rast-16 ) ;
17678: LD_EXP 28
17682: PPUSH
17683: LD_STRING DH-06-rast-16
17685: PPUSH
17686: CALL_OW 88
// if IsOk ( Mike ) then
17690: LD_EXP 30
17694: PPUSH
17695: CALL_OW 302
17699: IFFALSE 17773
// begin Say ( Mike , DM-06-rast-17 ) ;
17701: LD_EXP 30
17705: PPUSH
17706: LD_STRING DM-06-rast-17
17708: PPUSH
17709: CALL_OW 88
// Say ( Heike , DH-06-rast-18 ) ;
17713: LD_EXP 28
17717: PPUSH
17718: LD_STRING DH-06-rast-18
17720: PPUSH
17721: CALL_OW 88
// Say ( Mike , DM-06-rast-19 ) ;
17725: LD_EXP 30
17729: PPUSH
17730: LD_STRING DM-06-rast-19
17732: PPUSH
17733: CALL_OW 88
// Say ( Heike , DH-06-rast-20 ) ;
17737: LD_EXP 28
17741: PPUSH
17742: LD_STRING DH-06-rast-20
17744: PPUSH
17745: CALL_OW 88
// Say ( Mike , DM-06-rast-21 ) ;
17749: LD_EXP 30
17753: PPUSH
17754: LD_STRING DM-06-rast-21
17756: PPUSH
17757: CALL_OW 88
// Say ( Heike , DH-06-rast-22 ) ;
17761: LD_EXP 28
17765: PPUSH
17766: LD_STRING DH-06-rast-22
17768: PPUSH
17769: CALL_OW 88
// end ; Say ( Heike , DH-06-rast-23 ) ;
17773: LD_EXP 28
17777: PPUSH
17778: LD_STRING DH-06-rast-23
17780: PPUSH
17781: CALL_OW 88
// end else
17785: GO 17937
// begin linkedWithRolf := 1 ;
17787: LD_ADDR_EXP 12
17791: PUSH
17792: LD_INT 1
17794: ST_TO_ADDR
// Say ( Rolf , DRf-06-rast-a-11 ) ;
17795: LD_EXP 41
17799: PPUSH
17800: LD_STRING DRf-06-rast-a-11
17802: PPUSH
17803: CALL_OW 88
// Say ( Heike , DH-06-rast-a-12 ) ;
17807: LD_EXP 28
17811: PPUSH
17812: LD_STRING DH-06-rast-a-12
17814: PPUSH
17815: CALL_OW 88
// if IsOk ( Kurt ) then
17819: LD_EXP 39
17823: PPUSH
17824: CALL_OW 302
17828: IFFALSE 17925
// begin Say ( Kurt , DKs-06-rast-a-13 ) ;
17830: LD_EXP 39
17834: PPUSH
17835: LD_STRING DKs-06-rast-a-13
17837: PPUSH
17838: CALL_OW 88
// Say ( Rolf , DRf-06-rast-a-14 ) ;
17842: LD_EXP 41
17846: PPUSH
17847: LD_STRING DRf-06-rast-a-14
17849: PPUSH
17850: CALL_OW 88
// Say ( Rolf , DRf-06-rast-a-15 ) ;
17854: LD_EXP 41
17858: PPUSH
17859: LD_STRING DRf-06-rast-a-15
17861: PPUSH
17862: CALL_OW 88
// Say ( Kurt , DKs-06-rast-a-16 ) ;
17866: LD_EXP 39
17870: PPUSH
17871: LD_STRING DKs-06-rast-a-16
17873: PPUSH
17874: CALL_OW 88
// if IsOk ( Givi ) then
17878: LD_EXP 29
17882: PPUSH
17883: CALL_OW 302
17887: IFFALSE 17925
// begin Say ( Givi , DG-06-rast-a-17 ) ;
17889: LD_EXP 29
17893: PPUSH
17894: LD_STRING DG-06-rast-a-17
17896: PPUSH
17897: CALL_OW 88
// Say ( Givi , DG-06-rast-a-18 ) ;
17901: LD_EXP 29
17905: PPUSH
17906: LD_STRING DG-06-rast-a-18
17908: PPUSH
17909: CALL_OW 88
// Say ( Kurt , DKs-06-rast-a-19 ) ;
17913: LD_EXP 39
17917: PPUSH
17918: LD_STRING DKs-06-rast-a-19
17920: PPUSH
17921: CALL_OW 88
// end ; end ; Say ( Heike , DH-06-rast-a-20 ) ;
17925: LD_EXP 28
17929: PPUSH
17930: LD_STRING DH-06-rast-a-20
17932: PPUSH
17933: CALL_OW 88
// end ; Say ( Rolf , DRf-06-rast-24 ) ;
17937: LD_EXP 41
17941: PPUSH
17942: LD_STRING DRf-06-rast-24
17944: PPUSH
17945: CALL_OW 88
// if IsOk ( Aviradze ) then
17949: LD_EXP 40
17953: PPUSH
17954: CALL_OW 302
17958: IFFALSE 18058
// begin Say ( Aviradze , DA-06-rast-25 ) ;
17960: LD_EXP 40
17964: PPUSH
17965: LD_STRING DA-06-rast-25
17967: PPUSH
17968: CALL_OW 88
// Say ( Heike , DH-06-rast-26 ) ;
17972: LD_EXP 28
17976: PPUSH
17977: LD_STRING DH-06-rast-26
17979: PPUSH
17980: CALL_OW 88
// Say ( Aviradze , DA-06-rast-27 ) ;
17984: LD_EXP 40
17988: PPUSH
17989: LD_STRING DA-06-rast-27
17991: PPUSH
17992: CALL_OW 88
// if IsOk ( Markov ) then
17996: LD_EXP 35
18000: PPUSH
18001: CALL_OW 302
18005: IFFALSE 18033
// begin Say ( Markov , DMar-06-rast-28 ) ;
18007: LD_EXP 35
18011: PPUSH
18012: LD_STRING DMar-06-rast-28
18014: PPUSH
18015: CALL_OW 88
// Say ( Markov , DMar-06-rast-29 ) ;
18019: LD_EXP 35
18023: PPUSH
18024: LD_STRING DMar-06-rast-29
18026: PPUSH
18027: CALL_OW 88
// end else
18031: GO 18056
// if IsOk ( Sophia ) then
18033: LD_EXP 34
18037: PPUSH
18038: CALL_OW 302
18042: IFFALSE 18056
// begin Say ( Sophia , DS-06-rast-28 ) ;
18044: LD_EXP 34
18048: PPUSH
18049: LD_STRING DS-06-rast-28
18051: PPUSH
18052: CALL_OW 88
// end ; end else
18056: GO 18081
// if IsOk ( Sophia ) then
18058: LD_EXP 34
18062: PPUSH
18063: CALL_OW 302
18067: IFFALSE 18081
// Say ( Sophia , DS-06-rast-29 ) ;
18069: LD_EXP 34
18073: PPUSH
18074: LD_STRING DS-06-rast-29
18076: PPUSH
18077: CALL_OW 88
// DialogueOff ;
18081: CALL_OW 7
// rolfScriptBase := false ;
18085: LD_ADDR_EXP 9
18089: PUSH
18090: LD_INT 0
18092: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
18093: LD_STRING M3
18095: PPUSH
18096: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18100: LD_ADDR_VAR 0 1
18104: PUSH
18105: LD_INT 22
18107: PUSH
18108: LD_INT 8
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PPUSH
18115: CALL_OW 69
18119: PUSH
18120: FOR_IN
18121: IFFALSE 18137
// SetSide ( i , 2 ) ;
18123: LD_VAR 0 1
18127: PPUSH
18128: LD_INT 2
18130: PPUSH
18131: CALL_OW 235
18135: GO 18120
18137: POP
18138: POP
// end ;
18139: PPOPN 1
18141: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf do var random ;
18142: LD_EXP 3
18146: PUSH
18147: LD_EXP 41
18151: PPUSH
18152: CALL_OW 256
18156: PUSH
18157: LD_INT 400
18159: LESS
18160: AND
18161: PUSH
18162: LD_EXP 12
18166: NOT
18167: AND
18168: IFFALSE 18442
18170: GO 18172
18172: DISABLE
18173: LD_INT 0
18175: PPUSH
// begin DialogueOn ;
18176: CALL_OW 6
// SayRadio ( Rolf , DRf-06-rast-f-11 ) ;
18180: LD_EXP 41
18184: PPUSH
18185: LD_STRING DRf-06-rast-f-11
18187: PPUSH
18188: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-f-12 ) ;
18192: LD_EXP 41
18196: PPUSH
18197: LD_STRING DRf-06-rast-f-12
18199: PPUSH
18200: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-f-13 ) ;
18204: LD_EXP 41
18208: PPUSH
18209: LD_STRING DRf-06-rast-f-13
18211: PPUSH
18212: CALL_OW 94
// DialogueOff ;
18216: CALL_OW 7
// KillUnit ( Rolf ) ;
18220: LD_EXP 41
18224: PPUSH
18225: CALL_OW 66
// wait ( 0 0$1 ) ;
18229: LD_INT 35
18231: PPUSH
18232: CALL_OW 67
// if not IsOk ( Givi ) then
18236: LD_EXP 29
18240: PPUSH
18241: CALL_OW 302
18245: NOT
18246: IFFALSE 18250
// exit ;
18248: GO 18442
// DialogueOn ;
18250: CALL_OW 6
// Say ( Givi , DG-06-rast-f-14 ) ;
18254: LD_EXP 29
18258: PPUSH
18259: LD_STRING DG-06-rast-f-14
18261: PPUSH
18262: CALL_OW 88
// Say ( Givi , DG-06-rast-f-15 ) ;
18266: LD_EXP 29
18270: PPUSH
18271: LD_STRING DG-06-rast-f-15
18273: PPUSH
18274: CALL_OW 88
// if IsOk ( Kaia ) then
18278: LD_EXP 33
18282: PPUSH
18283: CALL_OW 302
18287: IFFALSE 18303
// Say ( Kaia , DK-06-rast-f-16 ) else
18289: LD_EXP 33
18293: PPUSH
18294: LD_STRING DK-06-rast-f-16
18296: PPUSH
18297: CALL_OW 88
18301: GO 18390
// if heikeSecondSquad then
18303: LD_EXP 43
18307: IFFALSE 18390
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18309: LD_ADDR_VAR 0 1
18313: PUSH
18314: LD_EXP 43
18318: PUSH
18319: LD_INT 1
18321: PPUSH
18322: LD_EXP 43
18326: PPUSH
18327: CALL_OW 12
18331: ARRAY
18332: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18333: LD_VAR 0 1
18337: PPUSH
18338: CALL_OW 258
18342: PUSH
18343: LD_INT 1
18345: DOUBLE
18346: EQUAL
18347: IFTRUE 18351
18349: GO 18366
18351: POP
// Say ( random , DArm-06-rast-f-a-16 ) ; 2 :
18352: LD_VAR 0 1
18356: PPUSH
18357: LD_STRING DArm-06-rast-f-a-16
18359: PPUSH
18360: CALL_OW 88
18364: GO 18390
18366: LD_INT 2
18368: DOUBLE
18369: EQUAL
18370: IFTRUE 18374
18372: GO 18389
18374: POP
// Say ( random , DArf-06-rast-f-a-16 ) ; end ;
18375: LD_VAR 0 1
18379: PPUSH
18380: LD_STRING DArf-06-rast-f-a-16
18382: PPUSH
18383: CALL_OW 88
18387: GO 18390
18389: POP
// end ; Say ( Givi , DG-06-rast-f-17 ) ;
18390: LD_EXP 29
18394: PPUSH
18395: LD_STRING DG-06-rast-f-17
18397: PPUSH
18398: CALL_OW 88
// Say ( Givi , DG-06-rast-f-18 ) ;
18402: LD_EXP 29
18406: PPUSH
18407: LD_STRING DG-06-rast-f-18
18409: PPUSH
18410: CALL_OW 88
// Say ( Givi , DG-06-rast-f-19 ) ;
18414: LD_EXP 29
18418: PPUSH
18419: LD_STRING DG-06-rast-f-19
18421: PPUSH
18422: CALL_OW 88
// Say ( Givi , DG-06-rast-f-20 ) ;
18426: LD_EXP 29
18430: PPUSH
18431: LD_STRING DG-06-rast-f-20
18433: PPUSH
18434: CALL_OW 88
// DialogueOff ;
18438: CALL_OW 7
// end ;
18442: PPOPN 1
18444: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
18445: LD_INT 2
18447: PPUSH
18448: LD_INT 10
18450: PPUSH
18451: CALL_OW 294
18455: IFFALSE 18528
18457: GO 18459
18459: DISABLE
// begin Say ( Givi , DG-06-Len-1 ) ;
18460: LD_EXP 29
18464: PPUSH
18465: LD_STRING DG-06-Len-1
18467: PPUSH
18468: CALL_OW 88
// Say ( Kurt , DKs-06-Len-2 ) ;
18472: LD_EXP 39
18476: PPUSH
18477: LD_STRING DKs-06-Len-2
18479: PPUSH
18480: CALL_OW 88
// Say ( Kurt , DKs-06-Len-3 ) ;
18484: LD_EXP 39
18488: PPUSH
18489: LD_STRING DKs-06-Len-3
18491: PPUSH
18492: CALL_OW 88
// Say ( Heike , DH-06-Len-4 ) ;
18496: LD_EXP 28
18500: PPUSH
18501: LD_STRING DH-06-Len-4
18503: PPUSH
18504: CALL_OW 88
// Say ( Kaia , DK-06-Len-5 ) ;
18508: LD_EXP 33
18512: PPUSH
18513: LD_STRING DK-06-Len-5
18515: PPUSH
18516: CALL_OW 88
// leninSpotted := true ;
18520: LD_ADDR_EXP 14
18524: PUSH
18525: LD_INT 1
18527: ST_TO_ADDR
// end ;
18528: END
// every 0 0$1 trigger bergkampfArrived and tick > 16 16$00 do var i ;
18529: LD_EXP 3
18533: PUSH
18534: LD_OWVAR 1
18538: PUSH
18539: LD_INT 33600
18541: GREATER
18542: AND
18543: IFFALSE 18913
18545: GO 18547
18547: DISABLE
18548: LD_INT 0
18550: PPUSH
// begin wait ( 1 1$20 ) ;
18551: LD_INT 2800
18553: PPUSH
18554: CALL_OW 67
// PrepareOmarSquad ;
18558: CALL 3938 0 0
// repeat wait ( 0 0$1 ) ;
18562: LD_INT 35
18564: PPUSH
18565: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
18569: LD_INT 14
18571: PPUSH
18572: LD_INT 22
18574: PUSH
18575: LD_INT 3
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 2
18584: PUSH
18585: LD_INT 21
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 59
18597: PUSH
18598: EMPTY
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 70
18614: NOT
18615: IFFALSE 18562
// for i in omarSquad do
18617: LD_ADDR_VAR 0 1
18621: PUSH
18622: LD_EXP 46
18626: PUSH
18627: FOR_IN
18628: IFFALSE 18659
// if GetLives ( i ) < 750 then
18630: LD_VAR 0 1
18634: PPUSH
18635: CALL_OW 256
18639: PUSH
18640: LD_INT 750
18642: LESS
18643: IFFALSE 18657
// SetLives ( i , 1000 ) ;
18645: LD_VAR 0 1
18649: PPUSH
18650: LD_INT 1000
18652: PPUSH
18653: CALL_OW 234
18657: GO 18627
18659: POP
18660: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
18661: LD_ADDR_VAR 0 1
18665: PUSH
18666: LD_INT 14
18668: PPUSH
18669: LD_INT 21
18671: PUSH
18672: LD_INT 3
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PPUSH
18679: CALL_OW 70
18683: PUSH
18684: FOR_IN
18685: IFFALSE 18701
// SetSide ( i , 5 ) ;
18687: LD_VAR 0 1
18691: PPUSH
18692: LD_INT 5
18694: PPUSH
18695: CALL_OW 235
18699: GO 18684
18701: POP
18702: POP
// wait ( 0 0$3 ) ;
18703: LD_INT 105
18705: PPUSH
18706: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
18710: LD_INT 5
18712: PPUSH
18713: LD_INT 2
18715: PPUSH
18716: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
18720: LD_EXP 38
18724: PPUSH
18725: CALL_OW 87
// DialogueOn ;
18729: CALL_OW 6
// SayRadio ( Omar , DOm-06-Veh-1 ) ;
18733: LD_EXP 38
18737: PPUSH
18738: LD_STRING DOm-06-Veh-1
18740: PPUSH
18741: CALL_OW 94
// SayRadio ( Omar , DOm-06-Veh-2 ) ;
18745: LD_EXP 38
18749: PPUSH
18750: LD_STRING DOm-06-Veh-2
18752: PPUSH
18753: CALL_OW 94
// SayRadio ( Omar , DOm-06-Veh-3 ) ;
18757: LD_EXP 38
18761: PPUSH
18762: LD_STRING DOm-06-Veh-3
18764: PPUSH
18765: CALL_OW 94
// if mortarConstructed then
18769: LD_EXP 15
18773: IFFALSE 18787
// SayRadio ( Omar , DOm-06-Veh-4 ) ;
18775: LD_EXP 38
18779: PPUSH
18780: LD_STRING DOm-06-Veh-4
18782: PPUSH
18783: CALL_OW 94
// Say ( Heike , DH-06-Veh-5 ) ;
18787: LD_EXP 28
18791: PPUSH
18792: LD_STRING DH-06-Veh-5
18794: PPUSH
18795: CALL_OW 88
// if IsOk ( Kurt ) then
18799: LD_EXP 39
18803: PPUSH
18804: CALL_OW 302
18808: IFFALSE 18858
// begin Say ( Kurt , DKs-06-Veh-6 ) ;
18810: LD_EXP 39
18814: PPUSH
18815: LD_STRING DKs-06-Veh-6
18817: PPUSH
18818: CALL_OW 88
// Say ( Kurt , DKs-06-Veh-7 ) ;
18822: LD_EXP 39
18826: PPUSH
18827: LD_STRING DKs-06-Veh-7
18829: PPUSH
18830: CALL_OW 88
// Say ( Givi , DG-06-Veh-8 ) ;
18834: LD_EXP 29
18838: PPUSH
18839: LD_STRING DG-06-Veh-8
18841: PPUSH
18842: CALL_OW 88
// Say ( Mike , DM-06-Veh-9 ) ;
18846: LD_EXP 30
18850: PPUSH
18851: LD_STRING DM-06-Veh-9
18853: PPUSH
18854: CALL_OW 88
// end ; DialogueOff ;
18858: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
18862: LD_STRING M4
18864: PPUSH
18865: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
18869: LD_EXP 38
18873: PPUSH
18874: LD_INT 341
18876: PPUSH
18877: LD_INT 232
18879: PPUSH
18880: CALL_OW 428
18884: PPUSH
18885: CALL_OW 120
// omarArrived := true ;
18889: LD_ADDR_EXP 6
18893: PUSH
18894: LD_INT 1
18896: ST_TO_ADDR
// omarScriptBase := true ;
18897: LD_ADDR_EXP 10
18901: PUSH
18902: LD_INT 1
18904: ST_TO_ADDR
// omarWantVehicles := true ;
18905: LD_ADDR_EXP 18
18909: PUSH
18910: LD_INT 1
18912: ST_TO_ADDR
// end ;
18913: PPOPN 1
18915: END
// every 0 0$1 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
18916: LD_EXP 41
18920: PPUSH
18921: CALL_OW 302
18925: PUSH
18926: LD_EXP 12
18930: AND
18931: PUSH
18932: LD_EXP 6
18936: AND
18937: IFFALSE 19034
18939: GO 18941
18941: DISABLE
// begin CenterNowOnUnits ( Rolf ) ;
18942: LD_EXP 41
18946: PPUSH
18947: CALL_OW 87
// DialogueOn ;
18951: CALL_OW 6
// Say ( Rolf , DRf-06-Veh-10 ) ;
18955: LD_EXP 41
18959: PPUSH
18960: LD_STRING DRf-06-Veh-10
18962: PPUSH
18963: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-11 ) ;
18967: LD_EXP 41
18971: PPUSH
18972: LD_STRING DRf-06-Veh-11
18974: PPUSH
18975: CALL_OW 88
// Say ( Heike , DH-06-Veh-12 ) ;
18979: LD_EXP 28
18983: PPUSH
18984: LD_STRING DH-06-Veh-12
18986: PPUSH
18987: CALL_OW 88
// Say ( Heike , DH-06-Veh-13 ) ;
18991: LD_EXP 28
18995: PPUSH
18996: LD_STRING DH-06-Veh-13
18998: PPUSH
18999: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-14 ) ;
19003: LD_EXP 41
19007: PPUSH
19008: LD_STRING DRf-06-Veh-14
19010: PPUSH
19011: CALL_OW 88
// DialogueOff ;
19015: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19019: LD_STRING M5
19021: PPUSH
19022: CALL_OW 337
// rolfWantVehicles := true ;
19026: LD_ADDR_EXP 17
19030: PUSH
19031: LD_INT 1
19033: ST_TO_ADDR
// end ;
19034: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19035: LD_EXP 18
19039: IFFALSE 19731
19041: GO 19043
19043: DISABLE
19044: LD_INT 0
19046: PPUSH
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
19051: PPUSH
// begin wait ( 0 0$3 ) ;
19052: LD_INT 105
19054: PPUSH
19055: CALL_OW 67
// Hint ( OmarVehicles ) ;
19059: LD_STRING OmarVehicles
19061: PPUSH
19062: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19066: LD_INT 16
19068: PPUSH
19069: LD_INT 1
19071: PPUSH
19072: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19076: LD_INT 35
19078: PPUSH
19079: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19083: LD_ADDR_EXP 20
19087: PUSH
19088: LD_EXP 20
19092: PUSH
19093: LD_INT 35
19095: MINUS
19096: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19097: LD_EXP 20
19101: PUSH
19102: LD_INT 0
19104: LESSEQUAL
19105: IFFALSE 19205
// begin display_strings := [ ] ;
19107: LD_ADDR_OWVAR 47
19111: PUSH
19112: EMPTY
19113: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19114: LD_STRING M4a
19116: PPUSH
19117: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19121: LD_INT 16
19123: PPUSH
19124: LD_INT 0
19126: PPUSH
19127: CALL_OW 424
// DialogueOn ;
19131: CALL_OW 6
// SayRadio ( Omar , DOm-06-Veh-b-15 ) ;
19135: LD_EXP 38
19139: PPUSH
19140: LD_STRING DOm-06-Veh-b-15
19142: PPUSH
19143: CALL_OW 94
// Say ( Heike , DH-06-Veh-b-16 ) ;
19147: LD_EXP 28
19151: PPUSH
19152: LD_STRING DH-06-Veh-b-16
19154: PPUSH
19155: CALL_OW 88
// SayRadio ( Omar , DOm-06-Veh-b-17 ) ;
19159: LD_EXP 38
19163: PPUSH
19164: LD_STRING DOm-06-Veh-b-17
19166: PPUSH
19167: CALL_OW 94
// Say ( Kaia , DK-06-Veh-b-18 ) ;
19171: LD_EXP 33
19175: PPUSH
19176: LD_STRING DK-06-Veh-b-18
19178: PPUSH
19179: CALL_OW 88
// DialogueOff ;
19183: CALL_OW 7
// omarAttack := true ;
19187: LD_ADDR_EXP 23
19191: PUSH
19192: LD_INT 1
19194: ST_TO_ADDR
// omarScriptBase := false ;
19195: LD_ADDR_EXP 10
19199: PUSH
19200: LD_INT 0
19202: ST_TO_ADDR
// exit ;
19203: GO 19731
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19205: LD_EXP 21
19209: PUSH
19210: LD_INT 16
19212: PPUSH
19213: LD_INT 22
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 21
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 33
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 58
19245: PUSH
19246: EMPTY
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PPUSH
19255: CALL_OW 70
19259: LESSEQUAL
19260: IFFALSE 19076
// omarWaitingForVehiclesTimer := 0 0$00 ;
19262: LD_ADDR_EXP 20
19266: PUSH
19267: LD_INT 0
19269: ST_TO_ADDR
// display_strings := [ ] ;
19270: LD_ADDR_OWVAR 47
19274: PUSH
19275: EMPTY
19276: ST_TO_ADDR
// DialogueOn ;
19277: CALL_OW 6
// SayRadio ( Omar , DOm-06-Veh-a-15 ) ;
19281: LD_EXP 38
19285: PPUSH
19286: LD_STRING DOm-06-Veh-a-15
19288: PPUSH
19289: CALL_OW 94
// Say ( Kaia , DK-06-Veh-a-16 ) ;
19293: LD_EXP 33
19297: PPUSH
19298: LD_STRING DK-06-Veh-a-16
19300: PPUSH
19301: CALL_OW 88
// DialogueOff ;
19305: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
19309: LD_STRING M4a
19311: PPUSH
19312: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19316: LD_INT 16
19318: PPUSH
19319: LD_INT 0
19321: PPUSH
19322: CALL_OW 424
// omarHasVehicles := true ;
19326: LD_ADDR_EXP 22
19330: PUSH
19331: LD_INT 1
19333: ST_TO_ADDR
// omarAttack := true ;
19334: LD_ADDR_EXP 23
19338: PUSH
19339: LD_INT 1
19341: ST_TO_ADDR
// omarScriptBase := false ;
19342: LD_ADDR_EXP 10
19346: PUSH
19347: LD_INT 0
19349: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19350: LD_ADDR_VAR 0 2
19354: PUSH
19355: LD_INT 16
19357: PPUSH
19358: LD_INT 22
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 21
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 33
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 58
19390: PUSH
19391: EMPTY
19392: LIST
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: PPUSH
19400: CALL_OW 70
19404: ST_TO_ADDR
// for i in tmp do
19405: LD_ADDR_VAR 0 1
19409: PUSH
19410: LD_VAR 0 2
19414: PUSH
19415: FOR_IN
19416: IFFALSE 19444
// begin SetFuel ( i , 100 ) ;
19418: LD_VAR 0 1
19422: PPUSH
19423: LD_INT 100
19425: PPUSH
19426: CALL_OW 240
// SetSide ( i , 5 ) ;
19430: LD_VAR 0 1
19434: PPUSH
19435: LD_INT 5
19437: PPUSH
19438: CALL_OW 235
// end ;
19442: GO 19415
19444: POP
19445: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
19446: LD_ADDR_VAR 0 3
19450: PUSH
19451: LD_EXP 46
19455: PPUSH
19456: LD_INT 25
19458: PUSH
19459: LD_INT 2
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PPUSH
19466: CALL_OW 72
19470: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
19471: LD_ADDR_VAR 0 4
19475: PUSH
19476: LD_EXP 46
19480: PPUSH
19481: LD_INT 3
19483: PUSH
19484: LD_INT 55
19486: PUSH
19487: EMPTY
19488: LIST
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 25
19496: PUSH
19497: LD_INT 3
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PPUSH
19508: CALL_OW 72
19512: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
19513: LD_ADDR_VAR 0 5
19517: PUSH
19518: LD_INT 324
19520: PPUSH
19521: LD_INT 234
19523: PPUSH
19524: CALL_OW 428
19528: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
19529: LD_ADDR_VAR 0 6
19533: PUSH
19534: LD_INT 334
19536: PPUSH
19537: LD_INT 241
19539: PPUSH
19540: CALL_OW 428
19544: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
19545: LD_VAR 0 6
19549: PPUSH
19550: CALL_OW 313
19554: PPUSH
19555: CALL_OW 122
// if eng then
19559: LD_VAR 0 3
19563: IFFALSE 19671
// begin if eng + mech <= tmp then
19565: LD_VAR 0 3
19569: PUSH
19570: LD_VAR 0 4
19574: PLUS
19575: PUSH
19576: LD_VAR 0 2
19580: LESSEQUAL
19581: IFFALSE 19636
// begin ComEnterUnit ( eng , workshop ) ;
19583: LD_VAR 0 3
19587: PPUSH
19588: LD_VAR 0 5
19592: PPUSH
19593: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
19597: LD_VAR 0 3
19601: PPUSH
19602: LD_INT 3
19604: PPUSH
19605: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19609: LD_VAR 0 3
19613: PPUSH
19614: CALL_OW 182
// mech := mech union eng ;
19618: LD_ADDR_VAR 0 4
19622: PUSH
19623: LD_VAR 0 4
19627: PUSH
19628: LD_VAR 0 3
19632: UNION
19633: ST_TO_ADDR
// end else
19634: GO 19671
// begin ComEnterUnit ( eng , armoury ) ;
19636: LD_VAR 0 3
19640: PPUSH
19641: LD_VAR 0 6
19645: PPUSH
19646: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
19650: LD_VAR 0 3
19654: PPUSH
19655: LD_INT 1
19657: PPUSH
19658: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19662: LD_VAR 0 3
19666: PPUSH
19667: CALL_OW 182
// end ; end ; for i := 1 to tmp do
19671: LD_ADDR_VAR 0 1
19675: PUSH
19676: DOUBLE
19677: LD_INT 1
19679: DEC
19680: ST_TO_ADDR
19681: LD_VAR 0 2
19685: PUSH
19686: FOR_TO
19687: IFFALSE 19729
// if i <= mech then
19689: LD_VAR 0 1
19693: PUSH
19694: LD_VAR 0 4
19698: LESSEQUAL
19699: IFFALSE 19727
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
19701: LD_VAR 0 4
19705: PUSH
19706: LD_VAR 0 1
19710: ARRAY
19711: PPUSH
19712: LD_VAR 0 2
19716: PUSH
19717: LD_VAR 0 1
19721: ARRAY
19722: PPUSH
19723: CALL_OW 180
19727: GO 19686
19729: POP
19730: POP
// end ;
19731: PPOPN 6
19733: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
19734: LD_EXP 41
19738: PPUSH
19739: CALL_OW 302
19743: PUSH
19744: LD_EXP 17
19748: AND
19749: IFFALSE 20197
19751: GO 19753
19753: DISABLE
19754: LD_INT 0
19756: PPUSH
// begin repeat wait ( 0 0$1 ) ;
19757: LD_INT 35
19759: PPUSH
19760: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
19764: LD_ADDR_EXP 19
19768: PUSH
19769: LD_EXP 19
19773: PUSH
19774: LD_INT 35
19776: MINUS
19777: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
19778: LD_EXP 19
19782: PUSH
19783: LD_INT 0
19785: LESSEQUAL
19786: PUSH
19787: LD_EXP 23
19791: OR
19792: IFFALSE 20002
// begin display_strings := [ ] ;
19794: LD_ADDR_OWVAR 47
19798: PUSH
19799: EMPTY
19800: ST_TO_ADDR
// DialogueOn ;
19801: CALL_OW 6
// Say ( Rolf , DRf-06-Veh-b-19 ) ;
19805: LD_EXP 41
19809: PPUSH
19810: LD_STRING DRf-06-Veh-b-19
19812: PPUSH
19813: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-b-20 ) ;
19817: LD_EXP 41
19821: PPUSH
19822: LD_STRING DRf-06-Veh-b-20
19824: PPUSH
19825: CALL_OW 88
// Say ( Heike , DH-06-Veh-b-21 ) ;
19829: LD_EXP 28
19833: PPUSH
19834: LD_STRING DH-06-Veh-b-21
19836: PPUSH
19837: CALL_OW 88
// if IsOk ( Givi ) then
19841: LD_EXP 29
19845: PPUSH
19846: CALL_OW 302
19850: IFFALSE 19888
// begin Say ( Givi , DG-06-Veh-b-22 ) ;
19852: LD_EXP 29
19856: PPUSH
19857: LD_STRING DG-06-Veh-b-22
19859: PPUSH
19860: CALL_OW 88
// Say ( Heike , DH-06-Veh-b-23 ) ;
19864: LD_EXP 28
19868: PPUSH
19869: LD_STRING DH-06-Veh-b-23
19871: PPUSH
19872: CALL_OW 88
// Say ( Givi , DG-06-Veh-b-24 ) ;
19876: LD_EXP 29
19880: PPUSH
19881: LD_STRING DG-06-Veh-b-24
19883: PPUSH
19884: CALL_OW 88
// end ; DialogueOff ;
19888: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
19892: LD_STRING M5a
19894: PPUSH
19895: CALL_OW 337
// for i in rolfSquad do
19899: LD_ADDR_VAR 0 1
19903: PUSH
19904: LD_EXP 45
19908: PUSH
19909: FOR_IN
19910: IFFALSE 19976
// begin SetSide ( i , 8 ) ;
19912: LD_VAR 0 1
19916: PPUSH
19917: LD_INT 8
19919: PPUSH
19920: CALL_OW 235
// if IsDriver ( i ) then
19924: LD_VAR 0 1
19928: PPUSH
19929: CALL 57863 0 1
19933: IFFALSE 19954
// SetSide ( IsInUnit ( i ) , 8 ) else
19935: LD_VAR 0 1
19939: PPUSH
19940: CALL_OW 310
19944: PPUSH
19945: LD_INT 8
19947: PPUSH
19948: CALL_OW 235
19952: GO 19974
// if IsInUnit ( i ) then
19954: LD_VAR 0 1
19958: PPUSH
19959: CALL_OW 310
19963: IFFALSE 19974
// ComExitBuilding ( i ) ;
19965: LD_VAR 0 1
19969: PPUSH
19970: CALL_OW 122
// end ;
19974: GO 19909
19976: POP
19977: POP
// wait ( 0 0$1 ) ;
19978: LD_INT 35
19980: PPUSH
19981: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
19985: LD_EXP 45
19989: PPUSH
19990: LD_INT 229
19992: PPUSH
19993: LD_INT 154
19995: PPUSH
19996: CALL_OW 114
// exit ;
20000: GO 20197
// end ; if IsDead ( Rolf ) then
20002: LD_EXP 41
20006: PPUSH
20007: CALL_OW 301
20011: IFFALSE 20022
// begin ChangeMissionObjectives ( M5a ) ;
20013: LD_STRING M5a
20015: PPUSH
20016: CALL_OW 337
// exit ;
20020: GO 20197
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20022: LD_EXP 45
20026: PPUSH
20027: LD_INT 55
20029: PUSH
20030: EMPTY
20031: LIST
20032: PPUSH
20033: CALL_OW 72
20037: PUSH
20038: LD_INT 0
20040: PLUS
20041: PUSH
20042: LD_EXP 45
20046: PUSH
20047: LD_INT 0
20049: PLUS
20050: EQUAL
20051: IFFALSE 19757
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20053: LD_ADDR_EXP 19
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// display_strings := [ ] ;
20061: LD_ADDR_OWVAR 47
20065: PUSH
20066: EMPTY
20067: ST_TO_ADDR
// DialogueOn ;
20068: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20072: LD_EXP 41
20076: PPUSH
20077: CALL_OW 87
// Say ( Rolf , DRf-06-Veh-a-17 ) ;
20081: LD_EXP 41
20085: PPUSH
20086: LD_STRING DRf-06-Veh-a-17
20088: PPUSH
20089: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20093: LD_EXP 28
20097: PPUSH
20098: LD_STRING DH-08-Veh-a-18
20100: PPUSH
20101: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-a-19 ) ;
20105: LD_EXP 41
20109: PPUSH
20110: LD_STRING DRf-06-Veh-a-19
20112: PPUSH
20113: CALL_OW 88
// DialogueOff ;
20117: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20121: LD_STRING M5a
20123: PPUSH
20124: CALL_OW 337
// rolfHasVehicles := true ;
20128: LD_ADDR_EXP 16
20132: PUSH
20133: LD_INT 1
20135: ST_TO_ADDR
// for i in rolfSquad do
20136: LD_ADDR_VAR 0 1
20140: PUSH
20141: LD_EXP 45
20145: PUSH
20146: FOR_IN
20147: IFFALSE 20180
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20149: LD_VAR 0 1
20153: PPUSH
20154: CALL_OW 310
20158: PPUSH
20159: LD_INT 8
20161: PPUSH
20162: CALL_OW 235
// SetSide ( i , 8 ) ;
20166: LD_VAR 0 1
20170: PPUSH
20171: LD_INT 8
20173: PPUSH
20174: CALL_OW 235
// end ;
20178: GO 20146
20180: POP
20181: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20182: LD_EXP 45
20186: PPUSH
20187: LD_INT 229
20189: PPUSH
20190: LD_INT 154
20192: PPUSH
20193: CALL_OW 114
// end ;
20197: PPOPN 1
20199: END
// every 0 0$1 trigger leninSpotted and omarAttack do
20200: LD_EXP 14
20204: PUSH
20205: LD_EXP 23
20209: AND
20210: IFFALSE 20510
20212: GO 20214
20214: DISABLE
// begin wait ( 0 0$45 ) ;
20215: LD_INT 1575
20217: PPUSH
20218: CALL_OW 67
// DialogueOn ;
20222: CALL_OW 6
// SayRadio ( Shariff , DShar-06-End-1 ) ;
20226: LD_EXP 36
20230: PPUSH
20231: LD_STRING DShar-06-End-1
20233: PPUSH
20234: CALL_OW 94
// Say ( Heike , DH-06-End-2 ) ;
20238: LD_EXP 28
20242: PPUSH
20243: LD_STRING DH-06-End-2
20245: PPUSH
20246: CALL_OW 88
// SayRadio ( Shariff , DShar-06-End-3 ) ;
20250: LD_EXP 36
20254: PPUSH
20255: LD_STRING DShar-06-End-3
20257: PPUSH
20258: CALL_OW 94
// Say ( Heike , DH-06-End-4 ) ;
20262: LD_EXP 28
20266: PPUSH
20267: LD_STRING DH-06-End-4
20269: PPUSH
20270: CALL_OW 88
// SayRadio ( Shariff , DShar-06-End-5 ) ;
20274: LD_EXP 36
20278: PPUSH
20279: LD_STRING DShar-06-End-5
20281: PPUSH
20282: CALL_OW 94
// SayRadio ( Shariff , DShar-06-End-6 ) ;
20286: LD_EXP 36
20290: PPUSH
20291: LD_STRING DShar-06-End-6
20293: PPUSH
20294: CALL_OW 94
// dwait ( 0 0$2 ) ;
20298: LD_INT 70
20300: PPUSH
20301: CALL_OW 68
// Say ( Heike , DH-06-End-7 ) ;
20305: LD_EXP 28
20309: PPUSH
20310: LD_STRING DH-06-End-7
20312: PPUSH
20313: CALL_OW 88
// DialogueOff ;
20317: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
20321: LD_STRING M6
20323: PPUSH
20324: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
20328: LD_INT 17
20330: PPUSH
20331: LD_INT 1
20333: PPUSH
20334: CALL_OW 424
// escapeAllowed := true ;
20338: LD_ADDR_EXP 24
20342: PUSH
20343: LD_INT 1
20345: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20346: LD_INT 35
20348: PPUSH
20349: CALL_OW 67
// Say ( Kurt , DKs-06-End-8 ) ;
20353: LD_EXP 39
20357: PPUSH
20358: LD_STRING DKs-06-End-8
20360: PPUSH
20361: CALL_OW 88
// Say ( Kaia , DK-06-End-10 ) ;
20365: LD_EXP 33
20369: PPUSH
20370: LD_STRING DK-06-End-10
20372: PPUSH
20373: CALL_OW 88
// Say ( Kurt , DKs-06-End-9 ) ;
20377: LD_EXP 39
20381: PPUSH
20382: LD_STRING DKs-06-End-9
20384: PPUSH
20385: CALL_OW 88
// Say ( Markov , DMar-06-End-11 ) ;
20389: LD_EXP 35
20393: PPUSH
20394: LD_STRING DMar-06-End-11
20396: PPUSH
20397: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
20401: LD_STRING 05_DrugsTested
20403: PPUSH
20404: LD_EXP 1
20408: PPUSH
20409: CALL_OW 30
20413: IFFALSE 20427
// Say ( Mike , DM-06-End-12 ) ;
20415: LD_EXP 30
20419: PPUSH
20420: LD_STRING DM-06-End-12
20422: PPUSH
20423: CALL_OW 88
// Say ( Olaf , DO-06-End-13 ) ;
20427: LD_EXP 37
20431: PPUSH
20432: LD_STRING DO-06-End-13
20434: PPUSH
20435: CALL_OW 88
// if IsOk ( Sophia ) then
20439: LD_EXP 34
20443: PPUSH
20444: CALL_OW 302
20448: IFFALSE 20474
// begin Say ( Sophia , DS-06-End-15 ) ;
20450: LD_EXP 34
20454: PPUSH
20455: LD_STRING DS-06-End-15
20457: PPUSH
20458: CALL_OW 88
// Say ( Kaia , DK-06-End-16 ) ;
20462: LD_EXP 33
20466: PPUSH
20467: LD_STRING DK-06-End-16
20469: PPUSH
20470: CALL_OW 88
// end ; Say ( Givi , DG-06-End-17 ) ;
20474: LD_EXP 29
20478: PPUSH
20479: LD_STRING DG-06-End-17
20481: PPUSH
20482: CALL_OW 88
// Say ( Givi , DG-06-End-18 ) ;
20486: LD_EXP 29
20490: PPUSH
20491: LD_STRING DG-06-End-18
20493: PPUSH
20494: CALL_OW 88
// Say ( Givi , DG-06-End-19 ) ;
20498: LD_EXP 29
20502: PPUSH
20503: LD_STRING DG-06-End-19
20505: PPUSH
20506: CALL_OW 88
// end ;
20510: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
20511: LD_EXP 24
20515: IFFALSE 20643
20517: GO 20519
20519: DISABLE
20520: LD_INT 0
20522: PPUSH
20523: PPUSH
// begin enable ;
20524: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
20525: LD_ADDR_OWVAR 47
20529: PUSH
20530: LD_STRING #X106-2
20532: PUSH
20533: LD_EXP 25
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
20542: LD_ADDR_EXP 25
20546: PUSH
20547: LD_EXP 25
20551: PUSH
20552: LD_INT 35
20554: MINUS
20555: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
20556: LD_ADDR_VAR 0 2
20560: PUSH
20561: LD_INT 17
20563: PPUSH
20564: LD_INT 22
20566: PUSH
20567: LD_INT 2
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 21
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 23
20586: PUSH
20587: LD_INT 2
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: PPUSH
20599: CALL_OW 71
20603: ST_TO_ADDR
// if not outsiders then
20604: LD_VAR 0 2
20608: NOT
20609: IFFALSE 20626
// begin escapeAllowed := false ;
20611: LD_ADDR_EXP 24
20615: PUSH
20616: LD_INT 0
20618: ST_TO_ADDR
// disable ;
20619: DISABLE
// MissionWin ;
20620: CALL 20646 0 0
// exit ;
20624: GO 20643
// end ; if escapeTimer <= 0 0$00 then
20626: LD_EXP 25
20630: PUSH
20631: LD_INT 0
20633: LESSEQUAL
20634: IFFALSE 20643
// YouLost ( TimeOut ) ;
20636: LD_STRING TimeOut
20638: PPUSH
20639: CALL_OW 104
// end ;
20643: PPOPN 2
20645: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
20646: LD_INT 0
20648: PPUSH
20649: PPUSH
20650: PPUSH
20651: PPUSH
20652: PPUSH
// Say ( Heike , DH-06-End-20 ) ;
20653: LD_EXP 28
20657: PPUSH
20658: LD_STRING DH-06-End-20
20660: PPUSH
20661: CALL_OW 88
// if rolfDied then
20665: LD_EXP 13
20669: IFFALSE 20684
// AddMedal ( med1 , - 1 ) else
20671: LD_STRING med1
20673: PPUSH
20674: LD_INT 1
20676: NEG
20677: PPUSH
20678: CALL_OW 101
20682: GO 20694
// AddMedal ( med1 , 1 ) ;
20684: LD_STRING med1
20686: PPUSH
20687: LD_INT 1
20689: PPUSH
20690: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
20694: LD_EXP 22
20698: PUSH
20699: LD_EXP 16
20703: AND
20704: IFFALSE 20718
// AddMedal ( med2 , 1 ) else
20706: LD_STRING med2
20708: PPUSH
20709: LD_INT 1
20711: PPUSH
20712: CALL_OW 101
20716: GO 20767
// if omarHasVehicles then
20718: LD_EXP 22
20722: IFFALSE 20737
// AddMedal ( med2 , - 1 ) else
20724: LD_STRING med2
20726: PPUSH
20727: LD_INT 1
20729: NEG
20730: PPUSH
20731: CALL_OW 101
20735: GO 20767
// if rolfHasVehicles then
20737: LD_EXP 16
20741: IFFALSE 20756
// AddMedal ( med2 , - 2 ) else
20743: LD_STRING med2
20745: PPUSH
20746: LD_INT 2
20748: NEG
20749: PPUSH
20750: CALL_OW 101
20754: GO 20767
// AddMedal ( med2 , - 3 ) ;
20756: LD_STRING med2
20758: PPUSH
20759: LD_INT 3
20761: NEG
20762: PPUSH
20763: CALL_OW 101
// if ruLoseCounter >= [ 40 , 55 , 70 ] [ Difficulty ] and heikeLoseCounter = 0 then
20767: LD_EXP 5
20771: PUSH
20772: LD_INT 40
20774: PUSH
20775: LD_INT 55
20777: PUSH
20778: LD_INT 70
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: LIST
20785: PUSH
20786: LD_OWVAR 67
20790: ARRAY
20791: GREATEREQUAL
20792: PUSH
20793: LD_EXP 26
20797: PUSH
20798: LD_INT 0
20800: EQUAL
20801: AND
20802: IFFALSE 20816
// AddMedal ( med3 , 1 ) else
20804: LD_STRING med3
20806: PPUSH
20807: LD_INT 1
20809: PPUSH
20810: CALL_OW 101
20814: GO 20846
// if heikeLoseCounter then
20816: LD_EXP 26
20820: IFFALSE 20835
// AddMedal ( med3 , - 1 ) else
20822: LD_STRING med3
20824: PPUSH
20825: LD_INT 1
20827: NEG
20828: PPUSH
20829: CALL_OW 101
20833: GO 20846
// AddMedal ( med3 , - 2 ) ;
20835: LD_STRING med3
20837: PPUSH
20838: LD_INT 2
20840: NEG
20841: PPUSH
20842: CALL_OW 101
// GiveMedals ( MAIN ) ;
20846: LD_STRING MAIN
20848: PPUSH
20849: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
20853: LD_INT 22
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 23
20865: PUSH
20866: LD_INT 2
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 21
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: PPUSH
20888: CALL_OW 69
20892: PPUSH
20893: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
20897: LD_EXP 28
20901: PPUSH
20902: LD_STRING 06_Heike
20904: PPUSH
20905: CALL_OW 38
// if Aviradze then
20909: LD_EXP 40
20913: IFFALSE 20927
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
20915: LD_EXP 40
20919: PPUSH
20920: LD_STRING 06_Aviradze
20922: PPUSH
20923: CALL_OW 38
// if Ibrahim then
20927: LD_EXP 31
20931: IFFALSE 20945
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
20933: LD_EXP 31
20937: PPUSH
20938: LD_STRING 06_Ibrahim
20940: PPUSH
20941: CALL_OW 38
// if Kamil then
20945: LD_EXP 32
20949: IFFALSE 20963
// SaveCharacters ( Kamil , 06_Kamil ) ;
20951: LD_EXP 32
20955: PPUSH
20956: LD_STRING 06_Kamil
20958: PPUSH
20959: CALL_OW 38
// if Sophia then
20963: LD_EXP 34
20967: IFFALSE 20981
// SaveCharacters ( Sophia , 06_Sophia ) ;
20969: LD_EXP 34
20973: PPUSH
20974: LD_STRING 06_Sophia
20976: PPUSH
20977: CALL_OW 38
// if Kaia then
20981: LD_EXP 33
20985: IFFALSE 20999
// SaveCharacters ( Kaia , 06_Kaia ) ;
20987: LD_EXP 33
20991: PPUSH
20992: LD_STRING 06_Kaia
20994: PPUSH
20995: CALL_OW 38
// if Givi then
20999: LD_EXP 29
21003: IFFALSE 21017
// SaveCharacters ( Givi , 06_Givi ) ;
21005: LD_EXP 29
21009: PPUSH
21010: LD_STRING 06_Givi
21012: PPUSH
21013: CALL_OW 38
// if Mike then
21017: LD_EXP 30
21021: IFFALSE 21035
// SaveCharacters ( Mike , 06_Mike ) ;
21023: LD_EXP 30
21027: PPUSH
21028: LD_STRING 06_Mike
21030: PPUSH
21031: CALL_OW 38
// if Markov then
21035: LD_EXP 35
21039: IFFALSE 21053
// SaveCharacters ( Markov , 06_Markov ) ;
21041: LD_EXP 35
21045: PPUSH
21046: LD_STRING 06_Markov
21048: PPUSH
21049: CALL_OW 38
// if Kurt then
21053: LD_EXP 39
21057: IFFALSE 21071
// SaveCharacters ( Kurt , 06_Kurt ) ;
21059: LD_EXP 39
21063: PPUSH
21064: LD_STRING 06_Kurt
21066: PPUSH
21067: CALL_OW 38
// if heikeSecondSquad then
21071: LD_EXP 43
21075: IFFALSE 21089
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
21077: LD_EXP 43
21081: PPUSH
21082: LD_STRING 06_others
21084: PPUSH
21085: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
21089: LD_ADDR_VAR 0 3
21093: PUSH
21094: LD_INT 22
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 23
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PPUSH
21118: CALL_OW 69
21122: ST_TO_ADDR
// if tmp then
21123: LD_VAR 0 3
21127: IFFALSE 21141
// SaveCharacters ( tmp , 06_apes ) ;
21129: LD_VAR 0 3
21133: PPUSH
21134: LD_STRING 06_apes
21136: PPUSH
21137: CALL_OW 38
// if Rolf then
21141: LD_EXP 41
21145: IFFALSE 21159
// SaveCharacters ( Rolf , 06_Rolf ) ;
21147: LD_EXP 41
21151: PPUSH
21152: LD_STRING 06_Rolf
21154: PPUSH
21155: CALL_OW 38
// tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_INT 17
21166: PPUSH
21167: LD_INT 21
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PPUSH
21177: CALL_OW 70
21181: ST_TO_ADDR
// if tmp then
21182: LD_VAR 0 3
21186: IFFALSE 21480
// begin tmp2 := [ ] ;
21188: LD_ADDR_VAR 0 4
21192: PUSH
21193: EMPTY
21194: ST_TO_ADDR
// for i in tmp do
21195: LD_ADDR_VAR 0 2
21199: PUSH
21200: LD_VAR 0 3
21204: PUSH
21205: FOR_IN
21206: IFFALSE 21466
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
21208: LD_VAR 0 2
21212: PPUSH
21213: CALL_OW 264
21217: PUSH
21218: LD_INT 32
21220: PUSH
21221: LD_INT 12
21223: PUSH
21224: LD_INT 51
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: LIST
21231: IN
21232: IFFALSE 21369
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
21234: LD_ADDR_VAR 0 5
21238: PUSH
21239: LD_VAR 0 2
21243: PPUSH
21244: LD_INT 1
21246: PPUSH
21247: CALL_OW 289
21251: PUSH
21252: LD_VAR 0 2
21256: PPUSH
21257: LD_INT 2
21259: PPUSH
21260: CALL_OW 289
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
21269: LD_ADDR_VAR 0 4
21273: PUSH
21274: LD_VAR 0 4
21278: PPUSH
21279: LD_VAR 0 4
21283: PUSH
21284: LD_INT 1
21286: PLUS
21287: PPUSH
21288: LD_VAR 0 2
21292: PPUSH
21293: CALL_OW 265
21297: PUSH
21298: LD_VAR 0 2
21302: PPUSH
21303: CALL_OW 262
21307: PUSH
21308: LD_VAR 0 2
21312: PPUSH
21313: CALL_OW 263
21317: PUSH
21318: LD_VAR 0 2
21322: PPUSH
21323: CALL_OW 264
21327: PUSH
21328: LD_VAR 0 2
21332: PPUSH
21333: CALL_OW 248
21337: PUSH
21338: LD_VAR 0 2
21342: PPUSH
21343: CALL_OW 256
21347: PUSH
21348: LD_VAR 0 5
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: PPUSH
21362: CALL_OW 1
21366: ST_TO_ADDR
// end else
21367: GO 21464
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
21369: LD_ADDR_VAR 0 4
21373: PUSH
21374: LD_VAR 0 4
21378: PPUSH
21379: LD_VAR 0 4
21383: PUSH
21384: LD_INT 1
21386: PLUS
21387: PPUSH
21388: LD_VAR 0 2
21392: PPUSH
21393: CALL_OW 265
21397: PUSH
21398: LD_VAR 0 2
21402: PPUSH
21403: CALL_OW 262
21407: PUSH
21408: LD_VAR 0 2
21412: PPUSH
21413: CALL_OW 263
21417: PUSH
21418: LD_VAR 0 2
21422: PPUSH
21423: CALL_OW 264
21427: PUSH
21428: LD_VAR 0 2
21432: PPUSH
21433: CALL_OW 248
21437: PUSH
21438: LD_VAR 0 2
21442: PPUSH
21443: CALL_OW 256
21447: PUSH
21448: EMPTY
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: PPUSH
21459: CALL_OW 1
21463: ST_TO_ADDR
21464: GO 21205
21466: POP
21467: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
21468: LD_VAR 0 4
21472: PPUSH
21473: LD_STRING 06_Vehicles
21475: PPUSH
21476: CALL_OW 39
// end ; YouWin ;
21480: CALL_OW 103
// end ; end_of_file
21484: LD_VAR 0 1
21488: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
21489: LD_INT 0
21491: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
21492: LD_VAR 0 1
21496: PPUSH
21497: CALL_OW 255
21501: PUSH
21502: LD_INT 2
21504: EQUAL
21505: PUSH
21506: LD_OWVAR 52
21510: AND
21511: PUSH
21512: LD_VAR 0 1
21516: PPUSH
21517: CALL_OW 263
21521: PUSH
21522: LD_INT 1
21524: EQUAL
21525: AND
21526: IFFALSE 21581
// begin driver := IsDrivenBy ( vehicle ) ;
21528: LD_ADDR_VAR 0 3
21532: PUSH
21533: LD_VAR 0 1
21537: PPUSH
21538: CALL_OW 311
21542: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
21543: LD_VAR 0 1
21547: PPUSH
21548: LD_INT 211
21550: PPUSH
21551: LD_INT 101
21553: PPUSH
21554: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21558: LD_VAR 0 3
21562: PPUSH
21563: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21567: LD_VAR 0 3
21571: PPUSH
21572: LD_VAR 0 2
21576: PPUSH
21577: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 255
21590: PUSH
21591: LD_INT 3
21593: EQUAL
21594: IFFALSE 21625
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
21596: LD_ADDR_EXP 54
21600: PUSH
21601: LD_EXP 54
21605: PPUSH
21606: LD_EXP 54
21610: PUSH
21611: LD_INT 1
21613: PLUS
21614: PPUSH
21615: LD_VAR 0 1
21619: PPUSH
21620: CALL_OW 1
21624: ST_TO_ADDR
// end ;
21625: PPOPN 3
21627: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
21628: LD_VAR 0 1
21632: PPUSH
21633: CALL_OW 255
21637: PUSH
21638: LD_INT 8
21640: EQUAL
21641: PUSH
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 266
21651: PUSH
21652: LD_INT 4
21654: EQUAL
21655: AND
21656: IFFALSE 21667
// ComUpgrade ( b ) ;
21658: LD_VAR 0 1
21662: PPUSH
21663: CALL_OW 146
// end ;
21667: PPOPN 1
21669: END
// on UnitDestroyed ( un ) do begin if un = Heike then
21670: LD_VAR 0 1
21674: PUSH
21675: LD_EXP 28
21679: EQUAL
21680: IFFALSE 21689
// YouLost ( Heike ) ;
21682: LD_STRING Heike
21684: PPUSH
21685: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
21689: LD_VAR 0 1
21693: PUSH
21694: LD_INT 22
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 23
21706: PUSH
21707: LD_INT 2
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PPUSH
21718: CALL_OW 69
21722: IN
21723: IFFALSE 21739
// heikeLoseCounter := heikeLoseCounter + 1 ;
21725: LD_ADDR_EXP 26
21729: PUSH
21730: LD_EXP 26
21734: PUSH
21735: LD_INT 1
21737: PLUS
21738: ST_TO_ADDR
// if un = arDepot then
21739: LD_VAR 0 1
21743: PUSH
21744: LD_EXP 42
21748: EQUAL
21749: IFFALSE 21758
// YouLost ( Base ) ;
21751: LD_STRING Base
21753: PPUSH
21754: CALL_OW 104
// if un = Rolf then
21758: LD_VAR 0 1
21762: PUSH
21763: LD_EXP 41
21767: EQUAL
21768: IFFALSE 21778
// rolfDied := true ;
21770: LD_ADDR_EXP 13
21774: PUSH
21775: LD_INT 1
21777: ST_TO_ADDR
// if un in rolfSquad then
21778: LD_VAR 0 1
21782: PUSH
21783: LD_EXP 45
21787: IN
21788: IFFALSE 21806
// rolfSquad := rolfSquad diff un ;
21790: LD_ADDR_EXP 45
21794: PUSH
21795: LD_EXP 45
21799: PUSH
21800: LD_VAR 0 1
21804: DIFF
21805: ST_TO_ADDR
// if un in omarSquad then
21806: LD_VAR 0 1
21810: PUSH
21811: LD_EXP 46
21815: IN
21816: IFFALSE 21834
// omarSquad := omarSquad diff un ;
21818: LD_ADDR_EXP 46
21822: PUSH
21823: LD_EXP 46
21827: PUSH
21828: LD_VAR 0 1
21832: DIFF
21833: ST_TO_ADDR
// if GetSide ( un ) = 3 then
21834: LD_VAR 0 1
21838: PPUSH
21839: CALL_OW 255
21843: PUSH
21844: LD_INT 3
21846: EQUAL
21847: IFFALSE 21863
// ruLoseCounter := ruLoseCounter + 1 ;
21849: LD_ADDR_EXP 5
21853: PUSH
21854: LD_EXP 5
21858: PUSH
21859: LD_INT 1
21861: PLUS
21862: ST_TO_ADDR
// if un in ruAttackers then
21863: LD_VAR 0 1
21867: PUSH
21868: LD_EXP 55
21872: IN
21873: IFFALSE 21891
// ruAttackers := ruAttackers diff un ;
21875: LD_ADDR_EXP 55
21879: PUSH
21880: LD_EXP 55
21884: PUSH
21885: LD_VAR 0 1
21889: DIFF
21890: ST_TO_ADDR
// end ;
21891: PPOPN 1
21893: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
21894: LD_INT 0
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
21900: LD_VAR 0 1
21904: PPUSH
21905: CALL_OW 255
21909: PUSH
21910: LD_INT 3
21912: EQUAL
21913: PUSH
21914: LD_VAR 0 1
21918: PUSH
21919: LD_EXP 55
21923: IN
21924: NOT
21925: AND
21926: IFFALSE 22422
// begin if not IsInArea ( un , ruMainBase ) then
21928: LD_VAR 0 1
21932: PPUSH
21933: LD_INT 10
21935: PPUSH
21936: CALL_OW 308
21940: NOT
21941: IFFALSE 21955
// ComMoveToArea ( un , ruMainBase ) ;
21943: LD_VAR 0 1
21947: PPUSH
21948: LD_INT 10
21950: PPUSH
21951: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
21955: LD_INT 35
21957: PPUSH
21958: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
21962: LD_VAR 0 1
21966: PPUSH
21967: CALL_OW 302
21971: NOT
21972: PUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: LD_INT 10
21980: PPUSH
21981: CALL_OW 308
21985: OR
21986: IFFALSE 21955
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
21988: LD_ADDR_EXP 53
21992: PUSH
21993: LD_EXP 53
21997: PPUSH
21998: LD_EXP 53
22002: PUSH
22003: LD_INT 1
22005: PLUS
22006: PPUSH
22007: LD_VAR 0 1
22011: PPUSH
22012: CALL_OW 1
22016: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
22017: LD_ADDR_VAR 0 8
22021: PUSH
22022: LD_INT 72
22024: PUSH
22025: LD_INT 12
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: ST_TO_ADDR
// if tmp then
22032: LD_VAR 0 8
22036: IFFALSE 22151
// for i in tmp do
22038: LD_ADDR_VAR 0 5
22042: PUSH
22043: LD_VAR 0 8
22047: PUSH
22048: FOR_IN
22049: IFFALSE 22149
// if UnitsInside ( i ) < 6 then
22051: LD_VAR 0 5
22055: PPUSH
22056: CALL_OW 313
22060: PUSH
22061: LD_INT 6
22063: LESS
22064: IFFALSE 22147
// begin AddComEnterUnit ( un , i ) ;
22066: LD_VAR 0 1
22070: PPUSH
22071: LD_VAR 0 5
22075: PPUSH
22076: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
22080: LD_VAR 0 8
22084: PPUSH
22085: LD_INT 22
22087: PUSH
22088: LD_INT 23
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PPUSH
22098: LD_INT 2
22100: PPUSH
22101: CALL_OW 12
22105: ARRAY
22106: PPUSH
22107: LD_INT 1
22109: PPUSH
22110: LD_INT 1
22112: PPUSH
22113: LD_INT 44
22115: PUSH
22116: LD_INT 46
22118: PUSH
22119: LD_INT 47
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: PPUSH
22130: LD_INT 3
22132: PPUSH
22133: CALL_OW 12
22137: ARRAY
22138: PPUSH
22139: CALL_OW 185
// exit ;
22143: POP
22144: POP
22145: GO 22422
// end ;
22147: GO 22048
22149: POP
22150: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
22151: LD_ADDR_VAR 0 8
22155: PUSH
22156: LD_INT 10
22158: PPUSH
22159: LD_INT 22
22161: PUSH
22162: LD_INT 3
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 50
22171: PUSH
22172: EMPTY
22173: LIST
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 30
22180: PUSH
22181: LD_INT 4
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 30
22190: PUSH
22191: LD_INT 5
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 30
22200: PUSH
22201: LD_INT 32
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 30
22210: PUSH
22211: LD_INT 31
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: PPUSH
22230: CALL_OW 70
22234: ST_TO_ADDR
// if not tmp then
22235: LD_VAR 0 8
22239: NOT
22240: IFFALSE 22259
// begin ComMoveXY ( un , 83 , 133 ) ;
22242: LD_VAR 0 1
22246: PPUSH
22247: LD_INT 83
22249: PPUSH
22250: LD_INT 133
22252: PPUSH
22253: CALL_OW 111
// exit ;
22257: GO 22422
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
22259: LD_ADDR_VAR 0 6
22263: PUSH
22264: LD_VAR 0 1
22268: PPUSH
22269: LD_VAR 0 8
22273: PPUSH
22274: LD_INT 1
22276: PPUSH
22277: LD_INT 1
22279: PPUSH
22280: CALL 28940 0 4
22284: PUSH
22285: FOR_IN
22286: IFFALSE 22420
// begin case GetBType ( b ) of b_armoury , b_barracks :
22288: LD_VAR 0 6
22292: PPUSH
22293: CALL_OW 266
22297: PUSH
22298: LD_INT 4
22300: DOUBLE
22301: EQUAL
22302: IFTRUE 22312
22304: LD_INT 5
22306: DOUBLE
22307: EQUAL
22308: IFTRUE 22312
22310: GO 22323
22312: POP
// p := 6 ; b_breastwork , b_bunker :
22313: LD_ADDR_VAR 0 7
22317: PUSH
22318: LD_INT 6
22320: ST_TO_ADDR
22321: GO 22349
22323: LD_INT 31
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22337
22329: LD_INT 32
22331: DOUBLE
22332: EQUAL
22333: IFTRUE 22337
22335: GO 22348
22337: POP
// p := 1 ; end ;
22338: LD_ADDR_VAR 0 7
22342: PUSH
22343: LD_INT 1
22345: ST_TO_ADDR
22346: GO 22349
22348: POP
// if UnitsInside ( b ) < p then
22349: LD_VAR 0 6
22353: PPUSH
22354: CALL_OW 313
22358: PUSH
22359: LD_VAR 0 7
22363: LESS
22364: IFFALSE 22418
// begin ComEnterUnit ( un , b ) ;
22366: LD_VAR 0 1
22370: PPUSH
22371: LD_VAR 0 6
22375: PPUSH
22376: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
22380: LD_VAR 0 6
22384: PPUSH
22385: CALL_OW 266
22389: PUSH
22390: LD_INT 4
22392: PUSH
22393: LD_INT 5
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: IN
22400: IFFALSE 22414
// AddComChangeProfession ( un , class_soldier ) ;
22402: LD_VAR 0 1
22406: PPUSH
22407: LD_INT 1
22409: PPUSH
22410: CALL_OW 183
// exit ;
22414: POP
22415: POP
22416: GO 22422
// end ; end ;
22418: GO 22285
22420: POP
22421: POP
// end ; end ;
22422: PPOPN 8
22424: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
22425: LD_INT 0
22427: PPUSH
22428: PPUSH
22429: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
22430: LD_VAR 0 2
22434: PPUSH
22435: CALL_OW 255
22439: PUSH
22440: LD_INT 3
22442: EQUAL
22443: PUSH
22444: LD_VAR 0 2
22448: PPUSH
22449: CALL_OW 257
22453: PUSH
22454: LD_INT 1
22456: EQUAL
22457: AND
22458: PUSH
22459: LD_VAR 0 2
22463: PUSH
22464: LD_EXP 53
22468: IN
22469: NOT
22470: AND
22471: IFFALSE 22784
// begin ComMoveToArea ( un , ruMainBase ) ;
22473: LD_VAR 0 2
22477: PPUSH
22478: LD_INT 10
22480: PPUSH
22481: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
22485: LD_INT 35
22487: PPUSH
22488: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
22492: LD_VAR 0 2
22496: PPUSH
22497: CALL_OW 302
22501: NOT
22502: PUSH
22503: LD_VAR 0 2
22507: PPUSH
22508: LD_INT 10
22510: PPUSH
22511: CALL_OW 308
22515: OR
22516: IFFALSE 22485
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
22518: LD_ADDR_EXP 53
22522: PUSH
22523: LD_EXP 53
22527: PPUSH
22528: LD_EXP 53
22532: PUSH
22533: LD_INT 1
22535: PLUS
22536: PPUSH
22537: LD_VAR 0 2
22541: PPUSH
22542: CALL_OW 1
22546: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
22547: LD_ADDR_VAR 0 4
22551: PUSH
22552: LD_INT 10
22554: PPUSH
22555: LD_INT 22
22557: PUSH
22558: LD_INT 3
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 50
22567: PUSH
22568: EMPTY
22569: LIST
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: LD_INT 30
22576: PUSH
22577: LD_INT 4
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 30
22586: PUSH
22587: LD_INT 5
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 30
22596: PUSH
22597: LD_INT 32
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 30
22606: PUSH
22607: LD_INT 31
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 70
22630: ST_TO_ADDR
// if not tmp then
22631: LD_VAR 0 4
22635: NOT
22636: IFFALSE 22655
// begin ComMoveXY ( un , 83 , 133 ) ;
22638: LD_VAR 0 2
22642: PPUSH
22643: LD_INT 83
22645: PPUSH
22646: LD_INT 133
22648: PPUSH
22649: CALL_OW 111
// exit ;
22653: GO 23033
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
22655: LD_ADDR_VAR 0 5
22659: PUSH
22660: LD_VAR 0 2
22664: PPUSH
22665: LD_VAR 0 4
22669: PPUSH
22670: LD_INT 1
22672: PPUSH
22673: LD_INT 1
22675: PPUSH
22676: CALL 28940 0 4
22680: PUSH
22681: FOR_IN
22682: IFFALSE 22782
// begin case GetBType ( b ) of b_armoury , b_barracks :
22684: LD_VAR 0 5
22688: PPUSH
22689: CALL_OW 266
22693: PUSH
22694: LD_INT 4
22696: DOUBLE
22697: EQUAL
22698: IFTRUE 22708
22700: LD_INT 5
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22719
22708: POP
// p := 6 ; b_breastwork , b_bunker :
22709: LD_ADDR_VAR 0 3
22713: PUSH
22714: LD_INT 6
22716: ST_TO_ADDR
22717: GO 22745
22719: LD_INT 31
22721: DOUBLE
22722: EQUAL
22723: IFTRUE 22733
22725: LD_INT 32
22727: DOUBLE
22728: EQUAL
22729: IFTRUE 22733
22731: GO 22744
22733: POP
// p := 1 ; end ;
22734: LD_ADDR_VAR 0 3
22738: PUSH
22739: LD_INT 1
22741: ST_TO_ADDR
22742: GO 22745
22744: POP
// if UnitsInside ( b ) < p then
22745: LD_VAR 0 5
22749: PPUSH
22750: CALL_OW 313
22754: PUSH
22755: LD_VAR 0 3
22759: LESS
22760: IFFALSE 22780
// begin ComEnterUnit ( un , b ) ;
22762: LD_VAR 0 2
22766: PPUSH
22767: LD_VAR 0 5
22771: PPUSH
22772: CALL_OW 120
// exit ;
22776: POP
22777: POP
22778: GO 23033
// end ; end ;
22780: GO 22681
22782: POP
22783: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
22784: LD_VAR 0 2
22788: PUSH
22789: LD_EXP 53
22793: IN
22794: PUSH
22795: LD_VAR 0 2
22799: PPUSH
22800: CALL_OW 257
22804: PUSH
22805: LD_INT 1
22807: EQUAL
22808: AND
22809: IFFALSE 23033
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
22811: LD_ADDR_VAR 0 4
22815: PUSH
22816: LD_INT 10
22818: PPUSH
22819: LD_INT 22
22821: PUSH
22822: LD_INT 3
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 50
22831: PUSH
22832: EMPTY
22833: LIST
22834: PUSH
22835: LD_INT 2
22837: PUSH
22838: LD_INT 30
22840: PUSH
22841: LD_INT 4
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 30
22850: PUSH
22851: LD_INT 5
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 30
22860: PUSH
22861: LD_INT 32
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 30
22870: PUSH
22871: LD_INT 31
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: PPUSH
22890: CALL_OW 70
22894: ST_TO_ADDR
// if not tmp then
22895: LD_VAR 0 4
22899: NOT
22900: IFFALSE 22904
// exit ;
22902: GO 23033
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
22904: LD_ADDR_VAR 0 5
22908: PUSH
22909: LD_VAR 0 2
22913: PPUSH
22914: LD_VAR 0 4
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: LD_INT 1
22924: PPUSH
22925: CALL 28940 0 4
22929: PUSH
22930: FOR_IN
22931: IFFALSE 23031
// begin case GetBType ( b ) of b_armoury , b_barracks :
22933: LD_VAR 0 5
22937: PPUSH
22938: CALL_OW 266
22942: PUSH
22943: LD_INT 4
22945: DOUBLE
22946: EQUAL
22947: IFTRUE 22957
22949: LD_INT 5
22951: DOUBLE
22952: EQUAL
22953: IFTRUE 22957
22955: GO 22968
22957: POP
// p := 6 ; b_breastwork , b_bunker :
22958: LD_ADDR_VAR 0 3
22962: PUSH
22963: LD_INT 6
22965: ST_TO_ADDR
22966: GO 22994
22968: LD_INT 31
22970: DOUBLE
22971: EQUAL
22972: IFTRUE 22982
22974: LD_INT 32
22976: DOUBLE
22977: EQUAL
22978: IFTRUE 22982
22980: GO 22993
22982: POP
// p := 1 ; end ;
22983: LD_ADDR_VAR 0 3
22987: PUSH
22988: LD_INT 1
22990: ST_TO_ADDR
22991: GO 22994
22993: POP
// if UnitsInside ( b ) < p then
22994: LD_VAR 0 5
22998: PPUSH
22999: CALL_OW 313
23003: PUSH
23004: LD_VAR 0 3
23008: LESS
23009: IFFALSE 23029
// begin ComEnterUnit ( un , b ) ;
23011: LD_VAR 0 2
23015: PPUSH
23016: LD_VAR 0 5
23020: PPUSH
23021: CALL_OW 120
// exit ;
23025: POP
23026: POP
23027: GO 23033
// end ; end ;
23029: GO 22930
23031: POP
23032: POP
// end ; end ;
23033: PPOPN 5
23035: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
23036: LD_VAR 0 1
23040: PUSH
23041: LD_INT 2
23043: EQUAL
23044: PUSH
23045: LD_VAR 0 2
23049: PUSH
23050: LD_INT 5
23052: PUSH
23053: LD_INT 8
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: IN
23060: AND
23061: IFFALSE 23070
// YouLost ( FriendlyFire ) ;
23063: LD_STRING FriendlyFire
23065: PPUSH
23066: CALL_OW 104
// end ;
23070: PPOPN 2
23072: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
23073: LD_VAR 0 1
23077: PPUSH
23078: CALL_OW 255
23082: PUSH
23083: LD_INT 8
23085: EQUAL
23086: PUSH
23087: LD_VAR 0 1
23091: PPUSH
23092: CALL_OW 266
23096: PUSH
23097: LD_INT 5
23099: EQUAL
23100: AND
23101: IFFALSE 23115
// SetClass ( unit , class_mortar ) ;
23103: LD_VAR 0 2
23107: PPUSH
23108: LD_INT 8
23110: PPUSH
23111: CALL_OW 336
// end ; end_of_file
23115: PPOPN 2
23117: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
23118: LD_INT 6
23120: PPUSH
23121: LD_INT 1
23123: PPUSH
23124: CALL_OW 287
23128: PUSH
23129: LD_INT 300
23131: PUSH
23132: LD_INT 250
23134: PUSH
23135: LD_INT 200
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: PUSH
23143: LD_OWVAR 67
23147: ARRAY
23148: LESS
23149: IFFALSE 23176
23151: GO 23153
23153: DISABLE
// begin enable ;
23154: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
23155: LD_INT 1
23157: PPUSH
23158: LD_INT 5
23160: PPUSH
23161: CALL_OW 12
23165: PPUSH
23166: LD_INT 6
23168: PPUSH
23169: LD_INT 1
23171: PPUSH
23172: CALL_OW 55
// end ; end_of_file
23176: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
23177: LD_EXP 18
23181: PUSH
23182: LD_EXP 20
23186: AND
23187: PUSH
23188: LD_EXP 17
23192: PUSH
23193: LD_EXP 19
23197: AND
23198: OR
23199: IFFALSE 23518
23201: GO 23203
23203: DISABLE
// begin enable ;
23204: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
23205: LD_EXP 18
23209: PUSH
23210: LD_EXP 20
23214: AND
23215: PUSH
23216: LD_EXP 17
23220: PUSH
23221: LD_EXP 19
23225: AND
23226: AND
23227: IFFALSE 23364
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
23229: LD_ADDR_OWVAR 47
23233: PUSH
23234: LD_STRING #X106-1a
23236: PUSH
23237: LD_EXP 21
23241: PUSH
23242: LD_INT 16
23244: PPUSH
23245: LD_INT 22
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 21
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 33
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 58
23277: PUSH
23278: EMPTY
23279: LIST
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: PPUSH
23287: CALL_OW 70
23291: MINUS
23292: PPUSH
23293: CALL 62234 0 1
23297: PUSH
23298: LD_STRING #X106-3a
23300: PUSH
23301: LD_EXP 20
23305: PUSH
23306: LD_STRING #X106-1
23308: PUSH
23309: LD_EXP 45
23313: PUSH
23314: LD_INT 0
23316: PLUS
23317: PUSH
23318: LD_EXP 45
23322: PPUSH
23323: LD_INT 55
23325: PUSH
23326: EMPTY
23327: LIST
23328: PPUSH
23329: CALL_OW 72
23333: PUSH
23334: LD_INT 0
23336: PLUS
23337: MINUS
23338: PPUSH
23339: CALL 62234 0 1
23343: PUSH
23344: LD_STRING #X106-3
23346: PUSH
23347: LD_EXP 19
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: ST_TO_ADDR
// end else
23362: GO 23518
// if omarWantVehicles and omarWaitingForVehiclesTimer then
23364: LD_EXP 18
23368: PUSH
23369: LD_EXP 20
23373: AND
23374: IFFALSE 23461
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
23376: LD_ADDR_OWVAR 47
23380: PUSH
23381: LD_STRING #X106-1a
23383: PUSH
23384: LD_EXP 21
23388: PUSH
23389: LD_INT 16
23391: PPUSH
23392: LD_INT 22
23394: PUSH
23395: LD_INT 2
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 21
23404: PUSH
23405: LD_INT 2
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 33
23414: PUSH
23415: LD_INT 1
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 58
23424: PUSH
23425: EMPTY
23426: LIST
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: PPUSH
23434: CALL_OW 70
23438: MINUS
23439: PPUSH
23440: CALL 62234 0 1
23444: PUSH
23445: LD_STRING #X106-3a
23447: PUSH
23448: LD_EXP 20
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: ST_TO_ADDR
// end else
23459: GO 23518
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
23461: LD_ADDR_OWVAR 47
23465: PUSH
23466: LD_STRING #X106-1
23468: PUSH
23469: LD_EXP 45
23473: PUSH
23474: LD_INT 0
23476: PLUS
23477: PUSH
23478: LD_EXP 45
23482: PPUSH
23483: LD_INT 55
23485: PUSH
23486: EMPTY
23487: LIST
23488: PPUSH
23489: CALL_OW 72
23493: PUSH
23494: LD_INT 0
23496: PLUS
23497: MINUS
23498: PPUSH
23499: CALL 62234 0 1
23503: PUSH
23504: LD_STRING #X106-3
23506: PUSH
23507: LD_EXP 19
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: ST_TO_ADDR
// end ; end ; end_of_file
23518: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23519: LD_INT 0
23521: PPUSH
23522: PPUSH
// if exist_mode then
23523: LD_VAR 0 2
23527: IFFALSE 23552
// unit := CreateCharacter ( prefix & ident ) else
23529: LD_ADDR_VAR 0 5
23533: PUSH
23534: LD_VAR 0 3
23538: PUSH
23539: LD_VAR 0 1
23543: STR
23544: PPUSH
23545: CALL_OW 34
23549: ST_TO_ADDR
23550: GO 23567
// unit := NewCharacter ( ident ) ;
23552: LD_ADDR_VAR 0 5
23556: PUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL_OW 25
23566: ST_TO_ADDR
// result := unit ;
23567: LD_ADDR_VAR 0 4
23571: PUSH
23572: LD_VAR 0 5
23576: ST_TO_ADDR
// end ;
23577: LD_VAR 0 4
23581: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23582: LD_INT 0
23584: PPUSH
23585: PPUSH
// if not side or not nation then
23586: LD_VAR 0 1
23590: NOT
23591: PUSH
23592: LD_VAR 0 2
23596: NOT
23597: OR
23598: IFFALSE 23602
// exit ;
23600: GO 24370
// case nation of nation_american :
23602: LD_VAR 0 2
23606: PUSH
23607: LD_INT 1
23609: DOUBLE
23610: EQUAL
23611: IFTRUE 23615
23613: GO 23829
23615: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23616: LD_ADDR_VAR 0 4
23620: PUSH
23621: LD_INT 35
23623: PUSH
23624: LD_INT 45
23626: PUSH
23627: LD_INT 46
23629: PUSH
23630: LD_INT 47
23632: PUSH
23633: LD_INT 82
23635: PUSH
23636: LD_INT 83
23638: PUSH
23639: LD_INT 84
23641: PUSH
23642: LD_INT 85
23644: PUSH
23645: LD_INT 86
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: LD_INT 6
23656: PUSH
23657: LD_INT 15
23659: PUSH
23660: LD_INT 16
23662: PUSH
23663: LD_INT 7
23665: PUSH
23666: LD_INT 12
23668: PUSH
23669: LD_INT 13
23671: PUSH
23672: LD_INT 10
23674: PUSH
23675: LD_INT 14
23677: PUSH
23678: LD_INT 20
23680: PUSH
23681: LD_INT 21
23683: PUSH
23684: LD_INT 22
23686: PUSH
23687: LD_INT 25
23689: PUSH
23690: LD_INT 32
23692: PUSH
23693: LD_INT 27
23695: PUSH
23696: LD_INT 36
23698: PUSH
23699: LD_INT 69
23701: PUSH
23702: LD_INT 39
23704: PUSH
23705: LD_INT 34
23707: PUSH
23708: LD_INT 40
23710: PUSH
23711: LD_INT 48
23713: PUSH
23714: LD_INT 49
23716: PUSH
23717: LD_INT 50
23719: PUSH
23720: LD_INT 51
23722: PUSH
23723: LD_INT 52
23725: PUSH
23726: LD_INT 53
23728: PUSH
23729: LD_INT 54
23731: PUSH
23732: LD_INT 55
23734: PUSH
23735: LD_INT 56
23737: PUSH
23738: LD_INT 57
23740: PUSH
23741: LD_INT 58
23743: PUSH
23744: LD_INT 59
23746: PUSH
23747: LD_INT 60
23749: PUSH
23750: LD_INT 61
23752: PUSH
23753: LD_INT 62
23755: PUSH
23756: LD_INT 80
23758: PUSH
23759: LD_INT 82
23761: PUSH
23762: LD_INT 83
23764: PUSH
23765: LD_INT 84
23767: PUSH
23768: LD_INT 85
23770: PUSH
23771: LD_INT 86
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: ST_TO_ADDR
23827: GO 24294
23829: LD_INT 2
23831: DOUBLE
23832: EQUAL
23833: IFTRUE 23837
23835: GO 24063
23837: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23838: LD_ADDR_VAR 0 4
23842: PUSH
23843: LD_INT 35
23845: PUSH
23846: LD_INT 45
23848: PUSH
23849: LD_INT 46
23851: PUSH
23852: LD_INT 47
23854: PUSH
23855: LD_INT 82
23857: PUSH
23858: LD_INT 83
23860: PUSH
23861: LD_INT 84
23863: PUSH
23864: LD_INT 85
23866: PUSH
23867: LD_INT 87
23869: PUSH
23870: LD_INT 70
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: LD_INT 11
23878: PUSH
23879: LD_INT 3
23881: PUSH
23882: LD_INT 4
23884: PUSH
23885: LD_INT 5
23887: PUSH
23888: LD_INT 6
23890: PUSH
23891: LD_INT 15
23893: PUSH
23894: LD_INT 18
23896: PUSH
23897: LD_INT 7
23899: PUSH
23900: LD_INT 17
23902: PUSH
23903: LD_INT 8
23905: PUSH
23906: LD_INT 20
23908: PUSH
23909: LD_INT 21
23911: PUSH
23912: LD_INT 22
23914: PUSH
23915: LD_INT 72
23917: PUSH
23918: LD_INT 26
23920: PUSH
23921: LD_INT 69
23923: PUSH
23924: LD_INT 39
23926: PUSH
23927: LD_INT 40
23929: PUSH
23930: LD_INT 41
23932: PUSH
23933: LD_INT 42
23935: PUSH
23936: LD_INT 43
23938: PUSH
23939: LD_INT 48
23941: PUSH
23942: LD_INT 49
23944: PUSH
23945: LD_INT 50
23947: PUSH
23948: LD_INT 51
23950: PUSH
23951: LD_INT 52
23953: PUSH
23954: LD_INT 53
23956: PUSH
23957: LD_INT 54
23959: PUSH
23960: LD_INT 55
23962: PUSH
23963: LD_INT 56
23965: PUSH
23966: LD_INT 60
23968: PUSH
23969: LD_INT 61
23971: PUSH
23972: LD_INT 62
23974: PUSH
23975: LD_INT 66
23977: PUSH
23978: LD_INT 67
23980: PUSH
23981: LD_INT 68
23983: PUSH
23984: LD_INT 81
23986: PUSH
23987: LD_INT 82
23989: PUSH
23990: LD_INT 83
23992: PUSH
23993: LD_INT 84
23995: PUSH
23996: LD_INT 85
23998: PUSH
23999: LD_INT 87
24001: PUSH
24002: LD_INT 88
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: ST_TO_ADDR
24061: GO 24294
24063: LD_INT 3
24065: DOUBLE
24066: EQUAL
24067: IFTRUE 24071
24069: GO 24293
24071: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24072: LD_ADDR_VAR 0 4
24076: PUSH
24077: LD_INT 46
24079: PUSH
24080: LD_INT 47
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: LD_INT 2
24088: PUSH
24089: LD_INT 82
24091: PUSH
24092: LD_INT 83
24094: PUSH
24095: LD_INT 84
24097: PUSH
24098: LD_INT 85
24100: PUSH
24101: LD_INT 86
24103: PUSH
24104: LD_INT 11
24106: PUSH
24107: LD_INT 9
24109: PUSH
24110: LD_INT 20
24112: PUSH
24113: LD_INT 19
24115: PUSH
24116: LD_INT 21
24118: PUSH
24119: LD_INT 24
24121: PUSH
24122: LD_INT 22
24124: PUSH
24125: LD_INT 25
24127: PUSH
24128: LD_INT 28
24130: PUSH
24131: LD_INT 29
24133: PUSH
24134: LD_INT 30
24136: PUSH
24137: LD_INT 31
24139: PUSH
24140: LD_INT 37
24142: PUSH
24143: LD_INT 38
24145: PUSH
24146: LD_INT 32
24148: PUSH
24149: LD_INT 27
24151: PUSH
24152: LD_INT 33
24154: PUSH
24155: LD_INT 69
24157: PUSH
24158: LD_INT 39
24160: PUSH
24161: LD_INT 34
24163: PUSH
24164: LD_INT 40
24166: PUSH
24167: LD_INT 71
24169: PUSH
24170: LD_INT 23
24172: PUSH
24173: LD_INT 44
24175: PUSH
24176: LD_INT 48
24178: PUSH
24179: LD_INT 49
24181: PUSH
24182: LD_INT 50
24184: PUSH
24185: LD_INT 51
24187: PUSH
24188: LD_INT 52
24190: PUSH
24191: LD_INT 53
24193: PUSH
24194: LD_INT 54
24196: PUSH
24197: LD_INT 55
24199: PUSH
24200: LD_INT 56
24202: PUSH
24203: LD_INT 57
24205: PUSH
24206: LD_INT 58
24208: PUSH
24209: LD_INT 59
24211: PUSH
24212: LD_INT 63
24214: PUSH
24215: LD_INT 64
24217: PUSH
24218: LD_INT 65
24220: PUSH
24221: LD_INT 82
24223: PUSH
24224: LD_INT 83
24226: PUSH
24227: LD_INT 84
24229: PUSH
24230: LD_INT 85
24232: PUSH
24233: LD_INT 86
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: ST_TO_ADDR
24291: GO 24294
24293: POP
// if state > - 1 and state < 3 then
24294: LD_VAR 0 3
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: GREATER
24303: PUSH
24304: LD_VAR 0 3
24308: PUSH
24309: LD_INT 3
24311: LESS
24312: AND
24313: IFFALSE 24370
// for i in result do
24315: LD_ADDR_VAR 0 5
24319: PUSH
24320: LD_VAR 0 4
24324: PUSH
24325: FOR_IN
24326: IFFALSE 24368
// if GetTech ( i , side ) <> state then
24328: LD_VAR 0 5
24332: PPUSH
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 321
24342: PUSH
24343: LD_VAR 0 3
24347: NONEQUAL
24348: IFFALSE 24366
// result := result diff i ;
24350: LD_ADDR_VAR 0 4
24354: PUSH
24355: LD_VAR 0 4
24359: PUSH
24360: LD_VAR 0 5
24364: DIFF
24365: ST_TO_ADDR
24366: GO 24325
24368: POP
24369: POP
// end ;
24370: LD_VAR 0 4
24374: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24375: LD_INT 0
24377: PPUSH
24378: PPUSH
24379: PPUSH
// result := true ;
24380: LD_ADDR_VAR 0 3
24384: PUSH
24385: LD_INT 1
24387: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24388: LD_ADDR_VAR 0 5
24392: PUSH
24393: LD_VAR 0 2
24397: PPUSH
24398: CALL_OW 480
24402: ST_TO_ADDR
// if not tmp then
24403: LD_VAR 0 5
24407: NOT
24408: IFFALSE 24412
// exit ;
24410: GO 24461
// for i in tmp do
24412: LD_ADDR_VAR 0 4
24416: PUSH
24417: LD_VAR 0 5
24421: PUSH
24422: FOR_IN
24423: IFFALSE 24459
// if GetTech ( i , side ) <> state_researched then
24425: LD_VAR 0 4
24429: PPUSH
24430: LD_VAR 0 1
24434: PPUSH
24435: CALL_OW 321
24439: PUSH
24440: LD_INT 2
24442: NONEQUAL
24443: IFFALSE 24457
// begin result := false ;
24445: LD_ADDR_VAR 0 3
24449: PUSH
24450: LD_INT 0
24452: ST_TO_ADDR
// exit ;
24453: POP
24454: POP
24455: GO 24461
// end ;
24457: GO 24422
24459: POP
24460: POP
// end ;
24461: LD_VAR 0 3
24465: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24466: LD_INT 0
24468: PPUSH
24469: PPUSH
24470: PPUSH
24471: PPUSH
24472: PPUSH
24473: PPUSH
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
24478: PPUSH
24479: PPUSH
24480: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24481: LD_VAR 0 1
24485: NOT
24486: PUSH
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL_OW 257
24496: PUSH
24497: LD_INT 9
24499: NONEQUAL
24500: OR
24501: IFFALSE 24505
// exit ;
24503: GO 25078
// side := GetSide ( unit ) ;
24505: LD_ADDR_VAR 0 9
24509: PUSH
24510: LD_VAR 0 1
24514: PPUSH
24515: CALL_OW 255
24519: ST_TO_ADDR
// tech_space := tech_spacanom ;
24520: LD_ADDR_VAR 0 12
24524: PUSH
24525: LD_INT 29
24527: ST_TO_ADDR
// tech_time := tech_taurad ;
24528: LD_ADDR_VAR 0 13
24532: PUSH
24533: LD_INT 28
24535: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24536: LD_ADDR_VAR 0 11
24540: PUSH
24541: LD_VAR 0 1
24545: PPUSH
24546: CALL_OW 310
24550: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24551: LD_VAR 0 11
24555: PPUSH
24556: CALL_OW 247
24560: PUSH
24561: LD_INT 2
24563: EQUAL
24564: IFFALSE 24568
// exit ;
24566: GO 25078
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24568: LD_ADDR_VAR 0 8
24572: PUSH
24573: LD_INT 81
24575: PUSH
24576: LD_VAR 0 9
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 3
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PPUSH
24606: CALL_OW 69
24610: ST_TO_ADDR
// if not tmp then
24611: LD_VAR 0 8
24615: NOT
24616: IFFALSE 24620
// exit ;
24618: GO 25078
// if in_unit then
24620: LD_VAR 0 11
24624: IFFALSE 24648
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24626: LD_ADDR_VAR 0 10
24630: PUSH
24631: LD_VAR 0 8
24635: PPUSH
24636: LD_VAR 0 11
24640: PPUSH
24641: CALL_OW 74
24645: ST_TO_ADDR
24646: GO 24668
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24648: LD_ADDR_VAR 0 10
24652: PUSH
24653: LD_VAR 0 8
24657: PPUSH
24658: LD_VAR 0 1
24662: PPUSH
24663: CALL_OW 74
24667: ST_TO_ADDR
// if not enemy then
24668: LD_VAR 0 10
24672: NOT
24673: IFFALSE 24677
// exit ;
24675: GO 25078
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24677: LD_VAR 0 11
24681: PUSH
24682: LD_VAR 0 11
24686: PPUSH
24687: LD_VAR 0 10
24691: PPUSH
24692: CALL_OW 296
24696: PUSH
24697: LD_INT 13
24699: GREATER
24700: AND
24701: PUSH
24702: LD_VAR 0 1
24706: PPUSH
24707: LD_VAR 0 10
24711: PPUSH
24712: CALL_OW 296
24716: PUSH
24717: LD_INT 12
24719: GREATER
24720: OR
24721: IFFALSE 24725
// exit ;
24723: GO 25078
// missile := [ 1 ] ;
24725: LD_ADDR_VAR 0 14
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: EMPTY
24734: LIST
24735: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24736: LD_VAR 0 9
24740: PPUSH
24741: LD_VAR 0 12
24745: PPUSH
24746: CALL_OW 325
24750: IFFALSE 24779
// missile := Insert ( missile , missile + 1 , 2 ) ;
24752: LD_ADDR_VAR 0 14
24756: PUSH
24757: LD_VAR 0 14
24761: PPUSH
24762: LD_VAR 0 14
24766: PUSH
24767: LD_INT 1
24769: PLUS
24770: PPUSH
24771: LD_INT 2
24773: PPUSH
24774: CALL_OW 2
24778: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24779: LD_VAR 0 9
24783: PPUSH
24784: LD_VAR 0 13
24788: PPUSH
24789: CALL_OW 325
24793: PUSH
24794: LD_VAR 0 10
24798: PPUSH
24799: CALL_OW 255
24803: PPUSH
24804: LD_VAR 0 13
24808: PPUSH
24809: CALL_OW 325
24813: NOT
24814: AND
24815: IFFALSE 24844
// missile := Insert ( missile , missile + 1 , 3 ) ;
24817: LD_ADDR_VAR 0 14
24821: PUSH
24822: LD_VAR 0 14
24826: PPUSH
24827: LD_VAR 0 14
24831: PUSH
24832: LD_INT 1
24834: PLUS
24835: PPUSH
24836: LD_INT 3
24838: PPUSH
24839: CALL_OW 2
24843: ST_TO_ADDR
// if missile < 2 then
24844: LD_VAR 0 14
24848: PUSH
24849: LD_INT 2
24851: LESS
24852: IFFALSE 24856
// exit ;
24854: GO 25078
// x := GetX ( enemy ) ;
24856: LD_ADDR_VAR 0 4
24860: PUSH
24861: LD_VAR 0 10
24865: PPUSH
24866: CALL_OW 250
24870: ST_TO_ADDR
// y := GetY ( enemy ) ;
24871: LD_ADDR_VAR 0 5
24875: PUSH
24876: LD_VAR 0 10
24880: PPUSH
24881: CALL_OW 251
24885: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24886: LD_ADDR_VAR 0 6
24890: PUSH
24891: LD_VAR 0 4
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PPUSH
24900: LD_INT 1
24902: PPUSH
24903: CALL_OW 12
24907: PLUS
24908: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24909: LD_ADDR_VAR 0 7
24913: PUSH
24914: LD_VAR 0 5
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PPUSH
24923: LD_INT 1
24925: PPUSH
24926: CALL_OW 12
24930: PLUS
24931: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24932: LD_VAR 0 6
24936: PPUSH
24937: LD_VAR 0 7
24941: PPUSH
24942: CALL_OW 488
24946: NOT
24947: IFFALSE 24969
// begin _x := x ;
24949: LD_ADDR_VAR 0 6
24953: PUSH
24954: LD_VAR 0 4
24958: ST_TO_ADDR
// _y := y ;
24959: LD_ADDR_VAR 0 7
24963: PUSH
24964: LD_VAR 0 5
24968: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24969: LD_ADDR_VAR 0 3
24973: PUSH
24974: LD_INT 1
24976: PPUSH
24977: LD_VAR 0 14
24981: PPUSH
24982: CALL_OW 12
24986: ST_TO_ADDR
// case i of 1 :
24987: LD_VAR 0 3
24991: PUSH
24992: LD_INT 1
24994: DOUBLE
24995: EQUAL
24996: IFTRUE 25000
24998: GO 25017
25000: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25001: LD_VAR 0 1
25005: PPUSH
25006: LD_VAR 0 10
25010: PPUSH
25011: CALL_OW 115
25015: GO 25078
25017: LD_INT 2
25019: DOUBLE
25020: EQUAL
25021: IFTRUE 25025
25023: GO 25047
25025: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25026: LD_VAR 0 1
25030: PPUSH
25031: LD_VAR 0 6
25035: PPUSH
25036: LD_VAR 0 7
25040: PPUSH
25041: CALL_OW 153
25045: GO 25078
25047: LD_INT 3
25049: DOUBLE
25050: EQUAL
25051: IFTRUE 25055
25053: GO 25077
25055: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25056: LD_VAR 0 1
25060: PPUSH
25061: LD_VAR 0 6
25065: PPUSH
25066: LD_VAR 0 7
25070: PPUSH
25071: CALL_OW 154
25075: GO 25078
25077: POP
// end ;
25078: LD_VAR 0 2
25082: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
25087: PPUSH
25088: PPUSH
25089: PPUSH
25090: PPUSH
// if not unit or not building then
25091: LD_VAR 0 1
25095: NOT
25096: PUSH
25097: LD_VAR 0 2
25101: NOT
25102: OR
25103: IFFALSE 25107
// exit ;
25105: GO 25265
// x := GetX ( building ) ;
25107: LD_ADDR_VAR 0 5
25111: PUSH
25112: LD_VAR 0 2
25116: PPUSH
25117: CALL_OW 250
25121: ST_TO_ADDR
// y := GetY ( building ) ;
25122: LD_ADDR_VAR 0 6
25126: PUSH
25127: LD_VAR 0 2
25131: PPUSH
25132: CALL_OW 251
25136: ST_TO_ADDR
// for i = 0 to 5 do
25137: LD_ADDR_VAR 0 4
25141: PUSH
25142: DOUBLE
25143: LD_INT 0
25145: DEC
25146: ST_TO_ADDR
25147: LD_INT 5
25149: PUSH
25150: FOR_TO
25151: IFFALSE 25263
// begin _x := ShiftX ( x , i , 3 ) ;
25153: LD_ADDR_VAR 0 7
25157: PUSH
25158: LD_VAR 0 5
25162: PPUSH
25163: LD_VAR 0 4
25167: PPUSH
25168: LD_INT 3
25170: PPUSH
25171: CALL_OW 272
25175: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25176: LD_ADDR_VAR 0 8
25180: PUSH
25181: LD_VAR 0 6
25185: PPUSH
25186: LD_VAR 0 4
25190: PPUSH
25191: LD_INT 3
25193: PPUSH
25194: CALL_OW 273
25198: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25199: LD_VAR 0 7
25203: PPUSH
25204: LD_VAR 0 8
25208: PPUSH
25209: CALL_OW 488
25213: NOT
25214: IFFALSE 25218
// continue ;
25216: GO 25150
// if HexInfo ( _x , _y ) = 0 then
25218: LD_VAR 0 7
25222: PPUSH
25223: LD_VAR 0 8
25227: PPUSH
25228: CALL_OW 428
25232: PUSH
25233: LD_INT 0
25235: EQUAL
25236: IFFALSE 25261
// begin ComMoveXY ( unit , _x , _y ) ;
25238: LD_VAR 0 1
25242: PPUSH
25243: LD_VAR 0 7
25247: PPUSH
25248: LD_VAR 0 8
25252: PPUSH
25253: CALL_OW 111
// exit ;
25257: POP
25258: POP
25259: GO 25265
// end ; end ;
25261: GO 25150
25263: POP
25264: POP
// end ;
25265: LD_VAR 0 3
25269: RET
// export function ScanBase ( side , base_area ) ; begin
25270: LD_INT 0
25272: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25273: LD_ADDR_VAR 0 3
25277: PUSH
25278: LD_VAR 0 2
25282: PPUSH
25283: LD_INT 81
25285: PUSH
25286: LD_VAR 0 1
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PPUSH
25295: CALL_OW 70
25299: ST_TO_ADDR
// end ;
25300: LD_VAR 0 3
25304: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25305: LD_INT 0
25307: PPUSH
25308: PPUSH
25309: PPUSH
25310: PPUSH
// result := false ;
25311: LD_ADDR_VAR 0 2
25315: PUSH
25316: LD_INT 0
25318: ST_TO_ADDR
// side := GetSide ( unit ) ;
25319: LD_ADDR_VAR 0 3
25323: PUSH
25324: LD_VAR 0 1
25328: PPUSH
25329: CALL_OW 255
25333: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25334: LD_ADDR_VAR 0 4
25338: PUSH
25339: LD_VAR 0 1
25343: PPUSH
25344: CALL_OW 248
25348: ST_TO_ADDR
// case nat of 1 :
25349: LD_VAR 0 4
25353: PUSH
25354: LD_INT 1
25356: DOUBLE
25357: EQUAL
25358: IFTRUE 25362
25360: GO 25373
25362: POP
// tech := tech_lassight ; 2 :
25363: LD_ADDR_VAR 0 5
25367: PUSH
25368: LD_INT 12
25370: ST_TO_ADDR
25371: GO 25412
25373: LD_INT 2
25375: DOUBLE
25376: EQUAL
25377: IFTRUE 25381
25379: GO 25392
25381: POP
// tech := tech_mortar ; 3 :
25382: LD_ADDR_VAR 0 5
25386: PUSH
25387: LD_INT 41
25389: ST_TO_ADDR
25390: GO 25412
25392: LD_INT 3
25394: DOUBLE
25395: EQUAL
25396: IFTRUE 25400
25398: GO 25411
25400: POP
// tech := tech_bazooka ; end ;
25401: LD_ADDR_VAR 0 5
25405: PUSH
25406: LD_INT 44
25408: ST_TO_ADDR
25409: GO 25412
25411: POP
// if Researched ( side , tech ) then
25412: LD_VAR 0 3
25416: PPUSH
25417: LD_VAR 0 5
25421: PPUSH
25422: CALL_OW 325
25426: IFFALSE 25453
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25428: LD_ADDR_VAR 0 2
25432: PUSH
25433: LD_INT 5
25435: PUSH
25436: LD_INT 8
25438: PUSH
25439: LD_INT 9
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: PUSH
25447: LD_VAR 0 4
25451: ARRAY
25452: ST_TO_ADDR
// end ;
25453: LD_VAR 0 2
25457: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25458: LD_INT 0
25460: PPUSH
25461: PPUSH
25462: PPUSH
// if not mines then
25463: LD_VAR 0 2
25467: NOT
25468: IFFALSE 25472
// exit ;
25470: GO 25616
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25472: LD_ADDR_VAR 0 5
25476: PUSH
25477: LD_INT 81
25479: PUSH
25480: LD_VAR 0 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 3
25491: PUSH
25492: LD_INT 21
25494: PUSH
25495: LD_INT 3
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PPUSH
25510: CALL_OW 69
25514: ST_TO_ADDR
// for i in mines do
25515: LD_ADDR_VAR 0 4
25519: PUSH
25520: LD_VAR 0 2
25524: PUSH
25525: FOR_IN
25526: IFFALSE 25614
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25528: LD_VAR 0 4
25532: PUSH
25533: LD_INT 1
25535: ARRAY
25536: PPUSH
25537: LD_VAR 0 4
25541: PUSH
25542: LD_INT 2
25544: ARRAY
25545: PPUSH
25546: CALL_OW 458
25550: NOT
25551: IFFALSE 25555
// continue ;
25553: GO 25525
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25555: LD_VAR 0 4
25559: PUSH
25560: LD_INT 1
25562: ARRAY
25563: PPUSH
25564: LD_VAR 0 4
25568: PUSH
25569: LD_INT 2
25571: ARRAY
25572: PPUSH
25573: CALL_OW 428
25577: PUSH
25578: LD_VAR 0 5
25582: IN
25583: IFFALSE 25612
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25585: LD_VAR 0 4
25589: PUSH
25590: LD_INT 1
25592: ARRAY
25593: PPUSH
25594: LD_VAR 0 4
25598: PUSH
25599: LD_INT 2
25601: ARRAY
25602: PPUSH
25603: LD_VAR 0 1
25607: PPUSH
25608: CALL_OW 456
// end ;
25612: GO 25525
25614: POP
25615: POP
// end ;
25616: LD_VAR 0 3
25620: RET
// export function Count ( array ) ; var i ; begin
25621: LD_INT 0
25623: PPUSH
25624: PPUSH
// result := 0 ;
25625: LD_ADDR_VAR 0 2
25629: PUSH
25630: LD_INT 0
25632: ST_TO_ADDR
// for i in array do
25633: LD_ADDR_VAR 0 3
25637: PUSH
25638: LD_VAR 0 1
25642: PUSH
25643: FOR_IN
25644: IFFALSE 25668
// if i then
25646: LD_VAR 0 3
25650: IFFALSE 25666
// result := result + 1 ;
25652: LD_ADDR_VAR 0 2
25656: PUSH
25657: LD_VAR 0 2
25661: PUSH
25662: LD_INT 1
25664: PLUS
25665: ST_TO_ADDR
25666: GO 25643
25668: POP
25669: POP
// end ;
25670: LD_VAR 0 2
25674: RET
// export function IsEmpty ( building ) ; begin
25675: LD_INT 0
25677: PPUSH
// if not building then
25678: LD_VAR 0 1
25682: NOT
25683: IFFALSE 25687
// exit ;
25685: GO 25730
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25687: LD_ADDR_VAR 0 2
25691: PUSH
25692: LD_VAR 0 1
25696: PUSH
25697: LD_INT 22
25699: PUSH
25700: LD_VAR 0 1
25704: PPUSH
25705: CALL_OW 255
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 58
25716: PUSH
25717: EMPTY
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PPUSH
25724: CALL_OW 69
25728: IN
25729: ST_TO_ADDR
// end ;
25730: LD_VAR 0 2
25734: RET
// export function IsNotFull ( building ) ; begin
25735: LD_INT 0
25737: PPUSH
// if not building then
25738: LD_VAR 0 1
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25766
// result := UnitsInside ( building ) < 6 ;
25747: LD_ADDR_VAR 0 2
25751: PUSH
25752: LD_VAR 0 1
25756: PPUSH
25757: CALL_OW 313
25761: PUSH
25762: LD_INT 6
25764: LESS
25765: ST_TO_ADDR
// end ;
25766: LD_VAR 0 2
25770: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25771: LD_INT 0
25773: PPUSH
25774: PPUSH
25775: PPUSH
25776: PPUSH
// tmp := [ ] ;
25777: LD_ADDR_VAR 0 3
25781: PUSH
25782: EMPTY
25783: ST_TO_ADDR
// list := [ ] ;
25784: LD_ADDR_VAR 0 5
25788: PUSH
25789: EMPTY
25790: ST_TO_ADDR
// for i = 16 to 25 do
25791: LD_ADDR_VAR 0 4
25795: PUSH
25796: DOUBLE
25797: LD_INT 16
25799: DEC
25800: ST_TO_ADDR
25801: LD_INT 25
25803: PUSH
25804: FOR_TO
25805: IFFALSE 25878
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25807: LD_ADDR_VAR 0 3
25811: PUSH
25812: LD_VAR 0 3
25816: PUSH
25817: LD_INT 22
25819: PUSH
25820: LD_VAR 0 1
25824: PPUSH
25825: CALL_OW 255
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 91
25836: PUSH
25837: LD_VAR 0 1
25841: PUSH
25842: LD_INT 6
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 30
25852: PUSH
25853: LD_VAR 0 4
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: LIST
25866: PUSH
25867: EMPTY
25868: LIST
25869: PPUSH
25870: CALL_OW 69
25874: ADD
25875: ST_TO_ADDR
25876: GO 25804
25878: POP
25879: POP
// for i = 1 to tmp do
25880: LD_ADDR_VAR 0 4
25884: PUSH
25885: DOUBLE
25886: LD_INT 1
25888: DEC
25889: ST_TO_ADDR
25890: LD_VAR 0 3
25894: PUSH
25895: FOR_TO
25896: IFFALSE 25984
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25898: LD_ADDR_VAR 0 5
25902: PUSH
25903: LD_VAR 0 5
25907: PUSH
25908: LD_VAR 0 3
25912: PUSH
25913: LD_VAR 0 4
25917: ARRAY
25918: PPUSH
25919: CALL_OW 266
25923: PUSH
25924: LD_VAR 0 3
25928: PUSH
25929: LD_VAR 0 4
25933: ARRAY
25934: PPUSH
25935: CALL_OW 250
25939: PUSH
25940: LD_VAR 0 3
25944: PUSH
25945: LD_VAR 0 4
25949: ARRAY
25950: PPUSH
25951: CALL_OW 251
25955: PUSH
25956: LD_VAR 0 3
25960: PUSH
25961: LD_VAR 0 4
25965: ARRAY
25966: PPUSH
25967: CALL_OW 254
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: PUSH
25978: EMPTY
25979: LIST
25980: ADD
25981: ST_TO_ADDR
25982: GO 25895
25984: POP
25985: POP
// result := list ;
25986: LD_ADDR_VAR 0 2
25990: PUSH
25991: LD_VAR 0 5
25995: ST_TO_ADDR
// end ;
25996: LD_VAR 0 2
26000: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
// if not factory then
26010: LD_VAR 0 1
26014: NOT
26015: IFFALSE 26019
// exit ;
26017: GO 26612
// if control = control_apeman then
26019: LD_VAR 0 4
26023: PUSH
26024: LD_INT 5
26026: EQUAL
26027: IFFALSE 26136
// begin tmp := UnitsInside ( factory ) ;
26029: LD_ADDR_VAR 0 8
26033: PUSH
26034: LD_VAR 0 1
26038: PPUSH
26039: CALL_OW 313
26043: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26044: LD_VAR 0 8
26048: PPUSH
26049: LD_INT 25
26051: PUSH
26052: LD_INT 12
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PPUSH
26059: CALL_OW 72
26063: NOT
26064: IFFALSE 26074
// control := control_manual ;
26066: LD_ADDR_VAR 0 4
26070: PUSH
26071: LD_INT 1
26073: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26074: LD_ADDR_VAR 0 8
26078: PUSH
26079: LD_VAR 0 1
26083: PPUSH
26084: CALL 25771 0 1
26088: ST_TO_ADDR
// if tmp then
26089: LD_VAR 0 8
26093: IFFALSE 26136
// begin for i in tmp do
26095: LD_ADDR_VAR 0 7
26099: PUSH
26100: LD_VAR 0 8
26104: PUSH
26105: FOR_IN
26106: IFFALSE 26134
// if i [ 1 ] = b_ext_radio then
26108: LD_VAR 0 7
26112: PUSH
26113: LD_INT 1
26115: ARRAY
26116: PUSH
26117: LD_INT 22
26119: EQUAL
26120: IFFALSE 26132
// begin control := control_remote ;
26122: LD_ADDR_VAR 0 4
26126: PUSH
26127: LD_INT 2
26129: ST_TO_ADDR
// break ;
26130: GO 26134
// end ;
26132: GO 26105
26134: POP
26135: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26136: LD_VAR 0 1
26140: PPUSH
26141: LD_VAR 0 2
26145: PPUSH
26146: LD_VAR 0 3
26150: PPUSH
26151: LD_VAR 0 4
26155: PPUSH
26156: LD_VAR 0 5
26160: PPUSH
26161: CALL_OW 448
26165: IFFALSE 26200
// begin result := [ chassis , engine , control , weapon ] ;
26167: LD_ADDR_VAR 0 6
26171: PUSH
26172: LD_VAR 0 2
26176: PUSH
26177: LD_VAR 0 3
26181: PUSH
26182: LD_VAR 0 4
26186: PUSH
26187: LD_VAR 0 5
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: ST_TO_ADDR
// exit ;
26198: GO 26612
// end ; _chassis := AvailableChassisList ( factory ) ;
26200: LD_ADDR_VAR 0 9
26204: PUSH
26205: LD_VAR 0 1
26209: PPUSH
26210: CALL_OW 475
26214: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26215: LD_ADDR_VAR 0 11
26219: PUSH
26220: LD_VAR 0 1
26224: PPUSH
26225: CALL_OW 476
26229: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26230: LD_ADDR_VAR 0 12
26234: PUSH
26235: LD_VAR 0 1
26239: PPUSH
26240: CALL_OW 477
26244: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26245: LD_ADDR_VAR 0 10
26249: PUSH
26250: LD_VAR 0 1
26254: PPUSH
26255: CALL_OW 478
26259: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26260: LD_VAR 0 9
26264: NOT
26265: PUSH
26266: LD_VAR 0 11
26270: NOT
26271: OR
26272: PUSH
26273: LD_VAR 0 12
26277: NOT
26278: OR
26279: PUSH
26280: LD_VAR 0 10
26284: NOT
26285: OR
26286: IFFALSE 26321
// begin result := [ chassis , engine , control , weapon ] ;
26288: LD_ADDR_VAR 0 6
26292: PUSH
26293: LD_VAR 0 2
26297: PUSH
26298: LD_VAR 0 3
26302: PUSH
26303: LD_VAR 0 4
26307: PUSH
26308: LD_VAR 0 5
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: ST_TO_ADDR
// exit ;
26319: GO 26612
// end ; if not chassis in _chassis then
26321: LD_VAR 0 2
26325: PUSH
26326: LD_VAR 0 9
26330: IN
26331: NOT
26332: IFFALSE 26358
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26334: LD_ADDR_VAR 0 2
26338: PUSH
26339: LD_VAR 0 9
26343: PUSH
26344: LD_INT 1
26346: PPUSH
26347: LD_VAR 0 9
26351: PPUSH
26352: CALL_OW 12
26356: ARRAY
26357: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26358: LD_VAR 0 2
26362: PPUSH
26363: LD_VAR 0 3
26367: PPUSH
26368: CALL 26617 0 2
26372: NOT
26373: IFFALSE 26432
// repeat engine := _engine [ 1 ] ;
26375: LD_ADDR_VAR 0 3
26379: PUSH
26380: LD_VAR 0 11
26384: PUSH
26385: LD_INT 1
26387: ARRAY
26388: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26389: LD_ADDR_VAR 0 11
26393: PUSH
26394: LD_VAR 0 11
26398: PPUSH
26399: LD_INT 1
26401: PPUSH
26402: CALL_OW 3
26406: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26407: LD_VAR 0 2
26411: PPUSH
26412: LD_VAR 0 3
26416: PPUSH
26417: CALL 26617 0 2
26421: PUSH
26422: LD_VAR 0 11
26426: PUSH
26427: EMPTY
26428: EQUAL
26429: OR
26430: IFFALSE 26375
// if not control in _control then
26432: LD_VAR 0 4
26436: PUSH
26437: LD_VAR 0 12
26441: IN
26442: NOT
26443: IFFALSE 26469
// control := _control [ rand ( 1 , _control ) ] ;
26445: LD_ADDR_VAR 0 4
26449: PUSH
26450: LD_VAR 0 12
26454: PUSH
26455: LD_INT 1
26457: PPUSH
26458: LD_VAR 0 12
26462: PPUSH
26463: CALL_OW 12
26467: ARRAY
26468: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26469: LD_VAR 0 2
26473: PPUSH
26474: LD_VAR 0 5
26478: PPUSH
26479: CALL 26837 0 2
26483: NOT
26484: IFFALSE 26543
// repeat weapon := _weapon [ 1 ] ;
26486: LD_ADDR_VAR 0 5
26490: PUSH
26491: LD_VAR 0 10
26495: PUSH
26496: LD_INT 1
26498: ARRAY
26499: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26500: LD_ADDR_VAR 0 10
26504: PUSH
26505: LD_VAR 0 10
26509: PPUSH
26510: LD_INT 1
26512: PPUSH
26513: CALL_OW 3
26517: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26518: LD_VAR 0 2
26522: PPUSH
26523: LD_VAR 0 5
26527: PPUSH
26528: CALL 26837 0 2
26532: PUSH
26533: LD_VAR 0 10
26537: PUSH
26538: EMPTY
26539: EQUAL
26540: OR
26541: IFFALSE 26486
// result := [ ] ;
26543: LD_ADDR_VAR 0 6
26547: PUSH
26548: EMPTY
26549: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26550: LD_VAR 0 1
26554: PPUSH
26555: LD_VAR 0 2
26559: PPUSH
26560: LD_VAR 0 3
26564: PPUSH
26565: LD_VAR 0 4
26569: PPUSH
26570: LD_VAR 0 5
26574: PPUSH
26575: CALL_OW 448
26579: IFFALSE 26612
// result := [ chassis , engine , control , weapon ] ;
26581: LD_ADDR_VAR 0 6
26585: PUSH
26586: LD_VAR 0 2
26590: PUSH
26591: LD_VAR 0 3
26595: PUSH
26596: LD_VAR 0 4
26600: PUSH
26601: LD_VAR 0 5
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: ST_TO_ADDR
// end ;
26612: LD_VAR 0 6
26616: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26617: LD_INT 0
26619: PPUSH
// if not chassis or not engine then
26620: LD_VAR 0 1
26624: NOT
26625: PUSH
26626: LD_VAR 0 2
26630: NOT
26631: OR
26632: IFFALSE 26636
// exit ;
26634: GO 26832
// case engine of engine_solar :
26636: LD_VAR 0 2
26640: PUSH
26641: LD_INT 2
26643: DOUBLE
26644: EQUAL
26645: IFTRUE 26649
26647: GO 26687
26649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26650: LD_ADDR_VAR 0 3
26654: PUSH
26655: LD_INT 11
26657: PUSH
26658: LD_INT 12
26660: PUSH
26661: LD_INT 13
26663: PUSH
26664: LD_INT 14
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: LD_INT 3
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: ST_TO_ADDR
26685: GO 26816
26687: LD_INT 1
26689: DOUBLE
26690: EQUAL
26691: IFTRUE 26695
26693: GO 26757
26695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26696: LD_ADDR_VAR 0 3
26700: PUSH
26701: LD_INT 11
26703: PUSH
26704: LD_INT 12
26706: PUSH
26707: LD_INT 13
26709: PUSH
26710: LD_INT 14
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: LD_INT 3
26721: PUSH
26722: LD_INT 4
26724: PUSH
26725: LD_INT 5
26727: PUSH
26728: LD_INT 21
26730: PUSH
26731: LD_INT 23
26733: PUSH
26734: LD_INT 22
26736: PUSH
26737: LD_INT 24
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: ST_TO_ADDR
26755: GO 26816
26757: LD_INT 3
26759: DOUBLE
26760: EQUAL
26761: IFTRUE 26765
26763: GO 26815
26765: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26766: LD_ADDR_VAR 0 3
26770: PUSH
26771: LD_INT 13
26773: PUSH
26774: LD_INT 14
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: LD_INT 3
26782: PUSH
26783: LD_INT 4
26785: PUSH
26786: LD_INT 5
26788: PUSH
26789: LD_INT 21
26791: PUSH
26792: LD_INT 22
26794: PUSH
26795: LD_INT 23
26797: PUSH
26798: LD_INT 24
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: ST_TO_ADDR
26813: GO 26816
26815: POP
// result := ( chassis in result ) ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_VAR 0 1
26825: PUSH
26826: LD_VAR 0 3
26830: IN
26831: ST_TO_ADDR
// end ;
26832: LD_VAR 0 3
26836: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26837: LD_INT 0
26839: PPUSH
// if not chassis or not weapon then
26840: LD_VAR 0 1
26844: NOT
26845: PUSH
26846: LD_VAR 0 2
26850: NOT
26851: OR
26852: IFFALSE 26856
// exit ;
26854: GO 27918
// case weapon of us_machine_gun :
26856: LD_VAR 0 2
26860: PUSH
26861: LD_INT 2
26863: DOUBLE
26864: EQUAL
26865: IFTRUE 26869
26867: GO 26899
26869: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26870: LD_ADDR_VAR 0 3
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: LD_INT 3
26883: PUSH
26884: LD_INT 4
26886: PUSH
26887: LD_INT 5
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: ST_TO_ADDR
26897: GO 27902
26899: LD_INT 3
26901: DOUBLE
26902: EQUAL
26903: IFTRUE 26907
26905: GO 26937
26907: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26908: LD_ADDR_VAR 0 3
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: LD_INT 4
26924: PUSH
26925: LD_INT 5
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: ST_TO_ADDR
26935: GO 27902
26937: LD_INT 11
26939: DOUBLE
26940: EQUAL
26941: IFTRUE 26945
26943: GO 26975
26945: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26946: LD_ADDR_VAR 0 3
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: LD_INT 3
26959: PUSH
26960: LD_INT 4
26962: PUSH
26963: LD_INT 5
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: ST_TO_ADDR
26973: GO 27902
26975: LD_INT 4
26977: DOUBLE
26978: EQUAL
26979: IFTRUE 26983
26981: GO 27009
26983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26984: LD_ADDR_VAR 0 3
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: LD_INT 3
26994: PUSH
26995: LD_INT 4
26997: PUSH
26998: LD_INT 5
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: ST_TO_ADDR
27007: GO 27902
27009: LD_INT 5
27011: DOUBLE
27012: EQUAL
27013: IFTRUE 27017
27015: GO 27043
27017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27018: LD_ADDR_VAR 0 3
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 3
27028: PUSH
27029: LD_INT 4
27031: PUSH
27032: LD_INT 5
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: ST_TO_ADDR
27041: GO 27902
27043: LD_INT 9
27045: DOUBLE
27046: EQUAL
27047: IFTRUE 27051
27049: GO 27077
27051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27052: LD_ADDR_VAR 0 3
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: LD_INT 3
27062: PUSH
27063: LD_INT 4
27065: PUSH
27066: LD_INT 5
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: ST_TO_ADDR
27075: GO 27902
27077: LD_INT 7
27079: DOUBLE
27080: EQUAL
27081: IFTRUE 27085
27083: GO 27111
27085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27086: LD_ADDR_VAR 0 3
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: LD_INT 3
27096: PUSH
27097: LD_INT 4
27099: PUSH
27100: LD_INT 5
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: ST_TO_ADDR
27109: GO 27902
27111: LD_INT 12
27113: DOUBLE
27114: EQUAL
27115: IFTRUE 27119
27117: GO 27145
27119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27120: LD_ADDR_VAR 0 3
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: LD_INT 3
27130: PUSH
27131: LD_INT 4
27133: PUSH
27134: LD_INT 5
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: ST_TO_ADDR
27143: GO 27902
27145: LD_INT 13
27147: DOUBLE
27148: EQUAL
27149: IFTRUE 27153
27151: GO 27179
27153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27154: LD_ADDR_VAR 0 3
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: LD_INT 3
27164: PUSH
27165: LD_INT 4
27167: PUSH
27168: LD_INT 5
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: ST_TO_ADDR
27177: GO 27902
27179: LD_INT 14
27181: DOUBLE
27182: EQUAL
27183: IFTRUE 27187
27185: GO 27205
27187: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27188: LD_ADDR_VAR 0 3
27192: PUSH
27193: LD_INT 4
27195: PUSH
27196: LD_INT 5
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: ST_TO_ADDR
27203: GO 27902
27205: LD_INT 6
27207: DOUBLE
27208: EQUAL
27209: IFTRUE 27213
27211: GO 27231
27213: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27214: LD_ADDR_VAR 0 3
27218: PUSH
27219: LD_INT 4
27221: PUSH
27222: LD_INT 5
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: ST_TO_ADDR
27229: GO 27902
27231: LD_INT 10
27233: DOUBLE
27234: EQUAL
27235: IFTRUE 27239
27237: GO 27257
27239: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27240: LD_ADDR_VAR 0 3
27244: PUSH
27245: LD_INT 4
27247: PUSH
27248: LD_INT 5
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: ST_TO_ADDR
27255: GO 27902
27257: LD_INT 22
27259: DOUBLE
27260: EQUAL
27261: IFTRUE 27265
27263: GO 27291
27265: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27266: LD_ADDR_VAR 0 3
27270: PUSH
27271: LD_INT 11
27273: PUSH
27274: LD_INT 12
27276: PUSH
27277: LD_INT 13
27279: PUSH
27280: LD_INT 14
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: ST_TO_ADDR
27289: GO 27902
27291: LD_INT 23
27293: DOUBLE
27294: EQUAL
27295: IFTRUE 27299
27297: GO 27325
27299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27300: LD_ADDR_VAR 0 3
27304: PUSH
27305: LD_INT 11
27307: PUSH
27308: LD_INT 12
27310: PUSH
27311: LD_INT 13
27313: PUSH
27314: LD_INT 14
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: ST_TO_ADDR
27323: GO 27902
27325: LD_INT 24
27327: DOUBLE
27328: EQUAL
27329: IFTRUE 27333
27331: GO 27359
27333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27334: LD_ADDR_VAR 0 3
27338: PUSH
27339: LD_INT 11
27341: PUSH
27342: LD_INT 12
27344: PUSH
27345: LD_INT 13
27347: PUSH
27348: LD_INT 14
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
27357: GO 27902
27359: LD_INT 30
27361: DOUBLE
27362: EQUAL
27363: IFTRUE 27367
27365: GO 27393
27367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27368: LD_ADDR_VAR 0 3
27372: PUSH
27373: LD_INT 11
27375: PUSH
27376: LD_INT 12
27378: PUSH
27379: LD_INT 13
27381: PUSH
27382: LD_INT 14
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
27391: GO 27902
27393: LD_INT 25
27395: DOUBLE
27396: EQUAL
27397: IFTRUE 27401
27399: GO 27419
27401: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27402: LD_ADDR_VAR 0 3
27406: PUSH
27407: LD_INT 13
27409: PUSH
27410: LD_INT 14
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: ST_TO_ADDR
27417: GO 27902
27419: LD_INT 27
27421: DOUBLE
27422: EQUAL
27423: IFTRUE 27427
27425: GO 27445
27427: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27428: LD_ADDR_VAR 0 3
27432: PUSH
27433: LD_INT 13
27435: PUSH
27436: LD_INT 14
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: ST_TO_ADDR
27443: GO 27902
27445: LD_EXP 62
27449: DOUBLE
27450: EQUAL
27451: IFTRUE 27455
27453: GO 27481
27455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27456: LD_ADDR_VAR 0 3
27460: PUSH
27461: LD_INT 11
27463: PUSH
27464: LD_INT 12
27466: PUSH
27467: LD_INT 13
27469: PUSH
27470: LD_INT 14
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
27479: GO 27902
27481: LD_INT 28
27483: DOUBLE
27484: EQUAL
27485: IFTRUE 27489
27487: GO 27507
27489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27490: LD_ADDR_VAR 0 3
27494: PUSH
27495: LD_INT 13
27497: PUSH
27498: LD_INT 14
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: ST_TO_ADDR
27505: GO 27902
27507: LD_INT 29
27509: DOUBLE
27510: EQUAL
27511: IFTRUE 27515
27513: GO 27533
27515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27516: LD_ADDR_VAR 0 3
27520: PUSH
27521: LD_INT 13
27523: PUSH
27524: LD_INT 14
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: ST_TO_ADDR
27531: GO 27902
27533: LD_INT 31
27535: DOUBLE
27536: EQUAL
27537: IFTRUE 27541
27539: GO 27559
27541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27542: LD_ADDR_VAR 0 3
27546: PUSH
27547: LD_INT 13
27549: PUSH
27550: LD_INT 14
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: ST_TO_ADDR
27557: GO 27902
27559: LD_INT 26
27561: DOUBLE
27562: EQUAL
27563: IFTRUE 27567
27565: GO 27585
27567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27568: LD_ADDR_VAR 0 3
27572: PUSH
27573: LD_INT 13
27575: PUSH
27576: LD_INT 14
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: ST_TO_ADDR
27583: GO 27902
27585: LD_INT 42
27587: DOUBLE
27588: EQUAL
27589: IFTRUE 27593
27591: GO 27619
27593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27594: LD_ADDR_VAR 0 3
27598: PUSH
27599: LD_INT 21
27601: PUSH
27602: LD_INT 22
27604: PUSH
27605: LD_INT 23
27607: PUSH
27608: LD_INT 24
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: ST_TO_ADDR
27617: GO 27902
27619: LD_INT 43
27621: DOUBLE
27622: EQUAL
27623: IFTRUE 27627
27625: GO 27653
27627: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27628: LD_ADDR_VAR 0 3
27632: PUSH
27633: LD_INT 21
27635: PUSH
27636: LD_INT 22
27638: PUSH
27639: LD_INT 23
27641: PUSH
27642: LD_INT 24
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: ST_TO_ADDR
27651: GO 27902
27653: LD_INT 44
27655: DOUBLE
27656: EQUAL
27657: IFTRUE 27661
27659: GO 27687
27661: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27662: LD_ADDR_VAR 0 3
27666: PUSH
27667: LD_INT 21
27669: PUSH
27670: LD_INT 22
27672: PUSH
27673: LD_INT 23
27675: PUSH
27676: LD_INT 24
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: ST_TO_ADDR
27685: GO 27902
27687: LD_INT 45
27689: DOUBLE
27690: EQUAL
27691: IFTRUE 27695
27693: GO 27721
27695: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27696: LD_ADDR_VAR 0 3
27700: PUSH
27701: LD_INT 21
27703: PUSH
27704: LD_INT 22
27706: PUSH
27707: LD_INT 23
27709: PUSH
27710: LD_INT 24
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: ST_TO_ADDR
27719: GO 27902
27721: LD_INT 49
27723: DOUBLE
27724: EQUAL
27725: IFTRUE 27729
27727: GO 27755
27729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27730: LD_ADDR_VAR 0 3
27734: PUSH
27735: LD_INT 21
27737: PUSH
27738: LD_INT 22
27740: PUSH
27741: LD_INT 23
27743: PUSH
27744: LD_INT 24
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: ST_TO_ADDR
27753: GO 27902
27755: LD_INT 51
27757: DOUBLE
27758: EQUAL
27759: IFTRUE 27763
27761: GO 27789
27763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27764: LD_ADDR_VAR 0 3
27768: PUSH
27769: LD_INT 21
27771: PUSH
27772: LD_INT 22
27774: PUSH
27775: LD_INT 23
27777: PUSH
27778: LD_INT 24
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: ST_TO_ADDR
27787: GO 27902
27789: LD_INT 52
27791: DOUBLE
27792: EQUAL
27793: IFTRUE 27797
27795: GO 27823
27797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27798: LD_ADDR_VAR 0 3
27802: PUSH
27803: LD_INT 21
27805: PUSH
27806: LD_INT 22
27808: PUSH
27809: LD_INT 23
27811: PUSH
27812: LD_INT 24
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: ST_TO_ADDR
27821: GO 27902
27823: LD_INT 53
27825: DOUBLE
27826: EQUAL
27827: IFTRUE 27831
27829: GO 27849
27831: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27832: LD_ADDR_VAR 0 3
27836: PUSH
27837: LD_INT 23
27839: PUSH
27840: LD_INT 24
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: ST_TO_ADDR
27847: GO 27902
27849: LD_INT 46
27851: DOUBLE
27852: EQUAL
27853: IFTRUE 27857
27855: GO 27875
27857: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27858: LD_ADDR_VAR 0 3
27862: PUSH
27863: LD_INT 23
27865: PUSH
27866: LD_INT 24
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: ST_TO_ADDR
27873: GO 27902
27875: LD_INT 47
27877: DOUBLE
27878: EQUAL
27879: IFTRUE 27883
27881: GO 27901
27883: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27884: LD_ADDR_VAR 0 3
27888: PUSH
27889: LD_INT 23
27891: PUSH
27892: LD_INT 24
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: ST_TO_ADDR
27899: GO 27902
27901: POP
// result := ( chassis in result ) ;
27902: LD_ADDR_VAR 0 3
27906: PUSH
27907: LD_VAR 0 1
27911: PUSH
27912: LD_VAR 0 3
27916: IN
27917: ST_TO_ADDR
// end ;
27918: LD_VAR 0 3
27922: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27923: LD_INT 0
27925: PPUSH
27926: PPUSH
27927: PPUSH
27928: PPUSH
27929: PPUSH
27930: PPUSH
27931: PPUSH
// result := array ;
27932: LD_ADDR_VAR 0 5
27936: PUSH
27937: LD_VAR 0 1
27941: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27942: LD_VAR 0 1
27946: NOT
27947: PUSH
27948: LD_VAR 0 2
27952: NOT
27953: OR
27954: PUSH
27955: LD_VAR 0 3
27959: NOT
27960: OR
27961: PUSH
27962: LD_VAR 0 2
27966: PUSH
27967: LD_VAR 0 1
27971: GREATER
27972: OR
27973: PUSH
27974: LD_VAR 0 3
27978: PUSH
27979: LD_VAR 0 1
27983: GREATER
27984: OR
27985: IFFALSE 27989
// exit ;
27987: GO 28285
// if direction then
27989: LD_VAR 0 4
27993: IFFALSE 28057
// begin d := 1 ;
27995: LD_ADDR_VAR 0 9
27999: PUSH
28000: LD_INT 1
28002: ST_TO_ADDR
// if i_from > i_to then
28003: LD_VAR 0 2
28007: PUSH
28008: LD_VAR 0 3
28012: GREATER
28013: IFFALSE 28039
// length := ( array - i_from ) + i_to else
28015: LD_ADDR_VAR 0 11
28019: PUSH
28020: LD_VAR 0 1
28024: PUSH
28025: LD_VAR 0 2
28029: MINUS
28030: PUSH
28031: LD_VAR 0 3
28035: PLUS
28036: ST_TO_ADDR
28037: GO 28055
// length := i_to - i_from ;
28039: LD_ADDR_VAR 0 11
28043: PUSH
28044: LD_VAR 0 3
28048: PUSH
28049: LD_VAR 0 2
28053: MINUS
28054: ST_TO_ADDR
// end else
28055: GO 28118
// begin d := - 1 ;
28057: LD_ADDR_VAR 0 9
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: ST_TO_ADDR
// if i_from > i_to then
28066: LD_VAR 0 2
28070: PUSH
28071: LD_VAR 0 3
28075: GREATER
28076: IFFALSE 28096
// length := i_from - i_to else
28078: LD_ADDR_VAR 0 11
28082: PUSH
28083: LD_VAR 0 2
28087: PUSH
28088: LD_VAR 0 3
28092: MINUS
28093: ST_TO_ADDR
28094: GO 28118
// length := ( array - i_to ) + i_from ;
28096: LD_ADDR_VAR 0 11
28100: PUSH
28101: LD_VAR 0 1
28105: PUSH
28106: LD_VAR 0 3
28110: MINUS
28111: PUSH
28112: LD_VAR 0 2
28116: PLUS
28117: ST_TO_ADDR
// end ; if not length then
28118: LD_VAR 0 11
28122: NOT
28123: IFFALSE 28127
// exit ;
28125: GO 28285
// tmp := array ;
28127: LD_ADDR_VAR 0 10
28131: PUSH
28132: LD_VAR 0 1
28136: ST_TO_ADDR
// for i = 1 to length do
28137: LD_ADDR_VAR 0 6
28141: PUSH
28142: DOUBLE
28143: LD_INT 1
28145: DEC
28146: ST_TO_ADDR
28147: LD_VAR 0 11
28151: PUSH
28152: FOR_TO
28153: IFFALSE 28273
// begin for j = 1 to array do
28155: LD_ADDR_VAR 0 7
28159: PUSH
28160: DOUBLE
28161: LD_INT 1
28163: DEC
28164: ST_TO_ADDR
28165: LD_VAR 0 1
28169: PUSH
28170: FOR_TO
28171: IFFALSE 28259
// begin k := j + d ;
28173: LD_ADDR_VAR 0 8
28177: PUSH
28178: LD_VAR 0 7
28182: PUSH
28183: LD_VAR 0 9
28187: PLUS
28188: ST_TO_ADDR
// if k > array then
28189: LD_VAR 0 8
28193: PUSH
28194: LD_VAR 0 1
28198: GREATER
28199: IFFALSE 28209
// k := 1 ;
28201: LD_ADDR_VAR 0 8
28205: PUSH
28206: LD_INT 1
28208: ST_TO_ADDR
// if not k then
28209: LD_VAR 0 8
28213: NOT
28214: IFFALSE 28226
// k := array ;
28216: LD_ADDR_VAR 0 8
28220: PUSH
28221: LD_VAR 0 1
28225: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28226: LD_ADDR_VAR 0 10
28230: PUSH
28231: LD_VAR 0 10
28235: PPUSH
28236: LD_VAR 0 8
28240: PPUSH
28241: LD_VAR 0 1
28245: PUSH
28246: LD_VAR 0 7
28250: ARRAY
28251: PPUSH
28252: CALL_OW 1
28256: ST_TO_ADDR
// end ;
28257: GO 28170
28259: POP
28260: POP
// array := tmp ;
28261: LD_ADDR_VAR 0 1
28265: PUSH
28266: LD_VAR 0 10
28270: ST_TO_ADDR
// end ;
28271: GO 28152
28273: POP
28274: POP
// result := array ;
28275: LD_ADDR_VAR 0 5
28279: PUSH
28280: LD_VAR 0 1
28284: ST_TO_ADDR
// end ;
28285: LD_VAR 0 5
28289: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28290: LD_INT 0
28292: PPUSH
28293: PPUSH
// result := 0 ;
28294: LD_ADDR_VAR 0 3
28298: PUSH
28299: LD_INT 0
28301: ST_TO_ADDR
// if not array or not value in array then
28302: LD_VAR 0 1
28306: NOT
28307: PUSH
28308: LD_VAR 0 2
28312: PUSH
28313: LD_VAR 0 1
28317: IN
28318: NOT
28319: OR
28320: IFFALSE 28324
// exit ;
28322: GO 28378
// for i = 1 to array do
28324: LD_ADDR_VAR 0 4
28328: PUSH
28329: DOUBLE
28330: LD_INT 1
28332: DEC
28333: ST_TO_ADDR
28334: LD_VAR 0 1
28338: PUSH
28339: FOR_TO
28340: IFFALSE 28376
// if value = array [ i ] then
28342: LD_VAR 0 2
28346: PUSH
28347: LD_VAR 0 1
28351: PUSH
28352: LD_VAR 0 4
28356: ARRAY
28357: EQUAL
28358: IFFALSE 28374
// begin result := i ;
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_VAR 0 4
28369: ST_TO_ADDR
// exit ;
28370: POP
28371: POP
28372: GO 28378
// end ;
28374: GO 28339
28376: POP
28377: POP
// end ;
28378: LD_VAR 0 3
28382: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28383: LD_INT 0
28385: PPUSH
// vc_chassis := chassis ;
28386: LD_ADDR_OWVAR 37
28390: PUSH
28391: LD_VAR 0 1
28395: ST_TO_ADDR
// vc_engine := engine ;
28396: LD_ADDR_OWVAR 39
28400: PUSH
28401: LD_VAR 0 2
28405: ST_TO_ADDR
// vc_control := control ;
28406: LD_ADDR_OWVAR 38
28410: PUSH
28411: LD_VAR 0 3
28415: ST_TO_ADDR
// vc_weapon := weapon ;
28416: LD_ADDR_OWVAR 40
28420: PUSH
28421: LD_VAR 0 4
28425: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28426: LD_ADDR_OWVAR 41
28430: PUSH
28431: LD_VAR 0 5
28435: ST_TO_ADDR
// end ;
28436: LD_VAR 0 6
28440: RET
// export function WantPlant ( unit ) ; var task ; begin
28441: LD_INT 0
28443: PPUSH
28444: PPUSH
// result := false ;
28445: LD_ADDR_VAR 0 2
28449: PUSH
28450: LD_INT 0
28452: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28453: LD_ADDR_VAR 0 3
28457: PUSH
28458: LD_VAR 0 1
28462: PPUSH
28463: CALL_OW 437
28467: ST_TO_ADDR
// if task then
28468: LD_VAR 0 3
28472: IFFALSE 28500
// if task [ 1 ] [ 1 ] = p then
28474: LD_VAR 0 3
28478: PUSH
28479: LD_INT 1
28481: ARRAY
28482: PUSH
28483: LD_INT 1
28485: ARRAY
28486: PUSH
28487: LD_STRING p
28489: EQUAL
28490: IFFALSE 28500
// result := true ;
28492: LD_ADDR_VAR 0 2
28496: PUSH
28497: LD_INT 1
28499: ST_TO_ADDR
// end ;
28500: LD_VAR 0 2
28504: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28505: LD_INT 0
28507: PPUSH
28508: PPUSH
28509: PPUSH
28510: PPUSH
// if pos < 1 then
28511: LD_VAR 0 2
28515: PUSH
28516: LD_INT 1
28518: LESS
28519: IFFALSE 28523
// exit ;
28521: GO 28826
// if pos = 1 then
28523: LD_VAR 0 2
28527: PUSH
28528: LD_INT 1
28530: EQUAL
28531: IFFALSE 28564
// result := Replace ( arr , pos [ 1 ] , value ) else
28533: LD_ADDR_VAR 0 4
28537: PUSH
28538: LD_VAR 0 1
28542: PPUSH
28543: LD_VAR 0 2
28547: PUSH
28548: LD_INT 1
28550: ARRAY
28551: PPUSH
28552: LD_VAR 0 3
28556: PPUSH
28557: CALL_OW 1
28561: ST_TO_ADDR
28562: GO 28826
// begin tmp := arr ;
28564: LD_ADDR_VAR 0 6
28568: PUSH
28569: LD_VAR 0 1
28573: ST_TO_ADDR
// s_arr := [ tmp ] ;
28574: LD_ADDR_VAR 0 7
28578: PUSH
28579: LD_VAR 0 6
28583: PUSH
28584: EMPTY
28585: LIST
28586: ST_TO_ADDR
// for i = 1 to pos - 1 do
28587: LD_ADDR_VAR 0 5
28591: PUSH
28592: DOUBLE
28593: LD_INT 1
28595: DEC
28596: ST_TO_ADDR
28597: LD_VAR 0 2
28601: PUSH
28602: LD_INT 1
28604: MINUS
28605: PUSH
28606: FOR_TO
28607: IFFALSE 28652
// begin tmp := tmp [ pos [ i ] ] ;
28609: LD_ADDR_VAR 0 6
28613: PUSH
28614: LD_VAR 0 6
28618: PUSH
28619: LD_VAR 0 2
28623: PUSH
28624: LD_VAR 0 5
28628: ARRAY
28629: ARRAY
28630: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28631: LD_ADDR_VAR 0 7
28635: PUSH
28636: LD_VAR 0 7
28640: PUSH
28641: LD_VAR 0 6
28645: PUSH
28646: EMPTY
28647: LIST
28648: ADD
28649: ST_TO_ADDR
// end ;
28650: GO 28606
28652: POP
28653: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28654: LD_ADDR_VAR 0 6
28658: PUSH
28659: LD_VAR 0 6
28663: PPUSH
28664: LD_VAR 0 2
28668: PUSH
28669: LD_VAR 0 2
28673: ARRAY
28674: PPUSH
28675: LD_VAR 0 3
28679: PPUSH
28680: CALL_OW 1
28684: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28685: LD_ADDR_VAR 0 7
28689: PUSH
28690: LD_VAR 0 7
28694: PPUSH
28695: LD_VAR 0 7
28699: PPUSH
28700: LD_VAR 0 6
28704: PPUSH
28705: CALL_OW 1
28709: ST_TO_ADDR
// for i = s_arr downto 2 do
28710: LD_ADDR_VAR 0 5
28714: PUSH
28715: DOUBLE
28716: LD_VAR 0 7
28720: INC
28721: ST_TO_ADDR
28722: LD_INT 2
28724: PUSH
28725: FOR_DOWNTO
28726: IFFALSE 28810
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28728: LD_ADDR_VAR 0 6
28732: PUSH
28733: LD_VAR 0 7
28737: PUSH
28738: LD_VAR 0 5
28742: PUSH
28743: LD_INT 1
28745: MINUS
28746: ARRAY
28747: PPUSH
28748: LD_VAR 0 2
28752: PUSH
28753: LD_VAR 0 5
28757: PUSH
28758: LD_INT 1
28760: MINUS
28761: ARRAY
28762: PPUSH
28763: LD_VAR 0 7
28767: PUSH
28768: LD_VAR 0 5
28772: ARRAY
28773: PPUSH
28774: CALL_OW 1
28778: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28779: LD_ADDR_VAR 0 7
28783: PUSH
28784: LD_VAR 0 7
28788: PPUSH
28789: LD_VAR 0 5
28793: PUSH
28794: LD_INT 1
28796: MINUS
28797: PPUSH
28798: LD_VAR 0 6
28802: PPUSH
28803: CALL_OW 1
28807: ST_TO_ADDR
// end ;
28808: GO 28725
28810: POP
28811: POP
// result := s_arr [ 1 ] ;
28812: LD_ADDR_VAR 0 4
28816: PUSH
28817: LD_VAR 0 7
28821: PUSH
28822: LD_INT 1
28824: ARRAY
28825: ST_TO_ADDR
// end ; end ;
28826: LD_VAR 0 4
28830: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28831: LD_INT 0
28833: PPUSH
28834: PPUSH
// if not list then
28835: LD_VAR 0 1
28839: NOT
28840: IFFALSE 28844
// exit ;
28842: GO 28935
// i := list [ pos1 ] ;
28844: LD_ADDR_VAR 0 5
28848: PUSH
28849: LD_VAR 0 1
28853: PUSH
28854: LD_VAR 0 2
28858: ARRAY
28859: ST_TO_ADDR
// if not i then
28860: LD_VAR 0 5
28864: NOT
28865: IFFALSE 28869
// exit ;
28867: GO 28935
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28869: LD_ADDR_VAR 0 1
28873: PUSH
28874: LD_VAR 0 1
28878: PPUSH
28879: LD_VAR 0 2
28883: PPUSH
28884: LD_VAR 0 1
28888: PUSH
28889: LD_VAR 0 3
28893: ARRAY
28894: PPUSH
28895: CALL_OW 1
28899: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28900: LD_ADDR_VAR 0 1
28904: PUSH
28905: LD_VAR 0 1
28909: PPUSH
28910: LD_VAR 0 3
28914: PPUSH
28915: LD_VAR 0 5
28919: PPUSH
28920: CALL_OW 1
28924: ST_TO_ADDR
// result := list ;
28925: LD_ADDR_VAR 0 4
28929: PUSH
28930: LD_VAR 0 1
28934: ST_TO_ADDR
// end ;
28935: LD_VAR 0 4
28939: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28940: LD_INT 0
28942: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28943: LD_ADDR_VAR 0 5
28947: PUSH
28948: LD_VAR 0 1
28952: PPUSH
28953: CALL_OW 250
28957: PPUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL_OW 251
28967: PPUSH
28968: LD_VAR 0 2
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: LD_VAR 0 4
28982: PPUSH
28983: CALL 28993 0 5
28987: ST_TO_ADDR
// end ;
28988: LD_VAR 0 5
28992: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28993: LD_INT 0
28995: PPUSH
28996: PPUSH
28997: PPUSH
28998: PPUSH
// if not list then
28999: LD_VAR 0 3
29003: NOT
29004: IFFALSE 29008
// exit ;
29006: GO 29396
// result := [ ] ;
29008: LD_ADDR_VAR 0 6
29012: PUSH
29013: EMPTY
29014: ST_TO_ADDR
// for i in list do
29015: LD_ADDR_VAR 0 7
29019: PUSH
29020: LD_VAR 0 3
29024: PUSH
29025: FOR_IN
29026: IFFALSE 29228
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29028: LD_ADDR_VAR 0 9
29032: PUSH
29033: LD_VAR 0 7
29037: PPUSH
29038: LD_VAR 0 1
29042: PPUSH
29043: LD_VAR 0 2
29047: PPUSH
29048: CALL_OW 297
29052: ST_TO_ADDR
// if not result then
29053: LD_VAR 0 6
29057: NOT
29058: IFFALSE 29084
// result := [ [ i , tmp ] ] else
29060: LD_ADDR_VAR 0 6
29064: PUSH
29065: LD_VAR 0 7
29069: PUSH
29070: LD_VAR 0 9
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: ST_TO_ADDR
29082: GO 29226
// begin if result [ result ] [ 2 ] < tmp then
29084: LD_VAR 0 6
29088: PUSH
29089: LD_VAR 0 6
29093: ARRAY
29094: PUSH
29095: LD_INT 2
29097: ARRAY
29098: PUSH
29099: LD_VAR 0 9
29103: LESS
29104: IFFALSE 29146
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29106: LD_ADDR_VAR 0 6
29110: PUSH
29111: LD_VAR 0 6
29115: PPUSH
29116: LD_VAR 0 6
29120: PUSH
29121: LD_INT 1
29123: PLUS
29124: PPUSH
29125: LD_VAR 0 7
29129: PUSH
29130: LD_VAR 0 9
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PPUSH
29139: CALL_OW 2
29143: ST_TO_ADDR
29144: GO 29226
// for j = 1 to result do
29146: LD_ADDR_VAR 0 8
29150: PUSH
29151: DOUBLE
29152: LD_INT 1
29154: DEC
29155: ST_TO_ADDR
29156: LD_VAR 0 6
29160: PUSH
29161: FOR_TO
29162: IFFALSE 29224
// begin if tmp < result [ j ] [ 2 ] then
29164: LD_VAR 0 9
29168: PUSH
29169: LD_VAR 0 6
29173: PUSH
29174: LD_VAR 0 8
29178: ARRAY
29179: PUSH
29180: LD_INT 2
29182: ARRAY
29183: LESS
29184: IFFALSE 29222
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29186: LD_ADDR_VAR 0 6
29190: PUSH
29191: LD_VAR 0 6
29195: PPUSH
29196: LD_VAR 0 8
29200: PPUSH
29201: LD_VAR 0 7
29205: PUSH
29206: LD_VAR 0 9
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PPUSH
29215: CALL_OW 2
29219: ST_TO_ADDR
// break ;
29220: GO 29224
// end ; end ;
29222: GO 29161
29224: POP
29225: POP
// end ; end ;
29226: GO 29025
29228: POP
29229: POP
// if result and not asc then
29230: LD_VAR 0 6
29234: PUSH
29235: LD_VAR 0 4
29239: NOT
29240: AND
29241: IFFALSE 29316
// begin tmp := result ;
29243: LD_ADDR_VAR 0 9
29247: PUSH
29248: LD_VAR 0 6
29252: ST_TO_ADDR
// for i = tmp downto 1 do
29253: LD_ADDR_VAR 0 7
29257: PUSH
29258: DOUBLE
29259: LD_VAR 0 9
29263: INC
29264: ST_TO_ADDR
29265: LD_INT 1
29267: PUSH
29268: FOR_DOWNTO
29269: IFFALSE 29314
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29271: LD_ADDR_VAR 0 6
29275: PUSH
29276: LD_VAR 0 6
29280: PPUSH
29281: LD_VAR 0 9
29285: PUSH
29286: LD_VAR 0 7
29290: MINUS
29291: PUSH
29292: LD_INT 1
29294: PLUS
29295: PPUSH
29296: LD_VAR 0 9
29300: PUSH
29301: LD_VAR 0 7
29305: ARRAY
29306: PPUSH
29307: CALL_OW 1
29311: ST_TO_ADDR
29312: GO 29268
29314: POP
29315: POP
// end ; tmp := [ ] ;
29316: LD_ADDR_VAR 0 9
29320: PUSH
29321: EMPTY
29322: ST_TO_ADDR
// if mode then
29323: LD_VAR 0 5
29327: IFFALSE 29396
// begin for i = 1 to result do
29329: LD_ADDR_VAR 0 7
29333: PUSH
29334: DOUBLE
29335: LD_INT 1
29337: DEC
29338: ST_TO_ADDR
29339: LD_VAR 0 6
29343: PUSH
29344: FOR_TO
29345: IFFALSE 29384
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29347: LD_ADDR_VAR 0 9
29351: PUSH
29352: LD_VAR 0 9
29356: PPUSH
29357: LD_VAR 0 7
29361: PPUSH
29362: LD_VAR 0 6
29366: PUSH
29367: LD_VAR 0 7
29371: ARRAY
29372: PUSH
29373: LD_INT 1
29375: ARRAY
29376: PPUSH
29377: CALL_OW 1
29381: ST_TO_ADDR
29382: GO 29344
29384: POP
29385: POP
// result := tmp ;
29386: LD_ADDR_VAR 0 6
29390: PUSH
29391: LD_VAR 0 9
29395: ST_TO_ADDR
// end ; end ;
29396: LD_VAR 0 6
29400: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29401: LD_INT 0
29403: PPUSH
29404: PPUSH
29405: PPUSH
29406: PPUSH
29407: PPUSH
29408: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29409: LD_ADDR_VAR 0 5
29413: PUSH
29414: LD_INT 0
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: EMPTY
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: ST_TO_ADDR
// if not x or not y then
29431: LD_VAR 0 2
29435: NOT
29436: PUSH
29437: LD_VAR 0 3
29441: NOT
29442: OR
29443: IFFALSE 29447
// exit ;
29445: GO 31099
// if not range then
29447: LD_VAR 0 4
29451: NOT
29452: IFFALSE 29462
// range := 10 ;
29454: LD_ADDR_VAR 0 4
29458: PUSH
29459: LD_INT 10
29461: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29462: LD_ADDR_VAR 0 8
29466: PUSH
29467: LD_INT 81
29469: PUSH
29470: LD_VAR 0 1
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 92
29481: PUSH
29482: LD_VAR 0 2
29486: PUSH
29487: LD_VAR 0 3
29491: PUSH
29492: LD_VAR 0 4
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 3
29505: PUSH
29506: LD_INT 21
29508: PUSH
29509: LD_INT 3
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: PPUSH
29525: CALL_OW 69
29529: ST_TO_ADDR
// if not tmp then
29530: LD_VAR 0 8
29534: NOT
29535: IFFALSE 29539
// exit ;
29537: GO 31099
// for i in tmp do
29539: LD_ADDR_VAR 0 6
29543: PUSH
29544: LD_VAR 0 8
29548: PUSH
29549: FOR_IN
29550: IFFALSE 31074
// begin points := [ 0 , 0 , 0 ] ;
29552: LD_ADDR_VAR 0 9
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: LIST
29570: ST_TO_ADDR
// bpoints := 1 ;
29571: LD_ADDR_VAR 0 10
29575: PUSH
29576: LD_INT 1
29578: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29579: LD_VAR 0 6
29583: PPUSH
29584: CALL_OW 247
29588: PUSH
29589: LD_INT 1
29591: DOUBLE
29592: EQUAL
29593: IFTRUE 29597
29595: GO 30175
29597: POP
// begin if GetClass ( i ) = 1 then
29598: LD_VAR 0 6
29602: PPUSH
29603: CALL_OW 257
29607: PUSH
29608: LD_INT 1
29610: EQUAL
29611: IFFALSE 29632
// points := [ 10 , 5 , 3 ] ;
29613: LD_ADDR_VAR 0 9
29617: PUSH
29618: LD_INT 10
29620: PUSH
29621: LD_INT 5
29623: PUSH
29624: LD_INT 3
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: LIST
29631: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29632: LD_VAR 0 6
29636: PPUSH
29637: CALL_OW 257
29641: PUSH
29642: LD_INT 2
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: LD_INT 4
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: IN
29656: IFFALSE 29677
// points := [ 3 , 2 , 1 ] ;
29658: LD_ADDR_VAR 0 9
29662: PUSH
29663: LD_INT 3
29665: PUSH
29666: LD_INT 2
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29677: LD_VAR 0 6
29681: PPUSH
29682: CALL_OW 257
29686: PUSH
29687: LD_INT 5
29689: EQUAL
29690: IFFALSE 29711
// points := [ 130 , 5 , 2 ] ;
29692: LD_ADDR_VAR 0 9
29696: PUSH
29697: LD_INT 130
29699: PUSH
29700: LD_INT 5
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29711: LD_VAR 0 6
29715: PPUSH
29716: CALL_OW 257
29720: PUSH
29721: LD_INT 8
29723: EQUAL
29724: IFFALSE 29745
// points := [ 35 , 35 , 30 ] ;
29726: LD_ADDR_VAR 0 9
29730: PUSH
29731: LD_INT 35
29733: PUSH
29734: LD_INT 35
29736: PUSH
29737: LD_INT 30
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29745: LD_VAR 0 6
29749: PPUSH
29750: CALL_OW 257
29754: PUSH
29755: LD_INT 9
29757: EQUAL
29758: IFFALSE 29779
// points := [ 20 , 55 , 40 ] ;
29760: LD_ADDR_VAR 0 9
29764: PUSH
29765: LD_INT 20
29767: PUSH
29768: LD_INT 55
29770: PUSH
29771: LD_INT 40
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29779: LD_VAR 0 6
29783: PPUSH
29784: CALL_OW 257
29788: PUSH
29789: LD_INT 12
29791: PUSH
29792: LD_INT 16
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: IN
29799: IFFALSE 29820
// points := [ 5 , 3 , 2 ] ;
29801: LD_ADDR_VAR 0 9
29805: PUSH
29806: LD_INT 5
29808: PUSH
29809: LD_INT 3
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29820: LD_VAR 0 6
29824: PPUSH
29825: CALL_OW 257
29829: PUSH
29830: LD_INT 17
29832: EQUAL
29833: IFFALSE 29854
// points := [ 100 , 50 , 75 ] ;
29835: LD_ADDR_VAR 0 9
29839: PUSH
29840: LD_INT 100
29842: PUSH
29843: LD_INT 50
29845: PUSH
29846: LD_INT 75
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29854: LD_VAR 0 6
29858: PPUSH
29859: CALL_OW 257
29863: PUSH
29864: LD_INT 15
29866: EQUAL
29867: IFFALSE 29888
// points := [ 10 , 5 , 3 ] ;
29869: LD_ADDR_VAR 0 9
29873: PUSH
29874: LD_INT 10
29876: PUSH
29877: LD_INT 5
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: LIST
29887: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29888: LD_VAR 0 6
29892: PPUSH
29893: CALL_OW 257
29897: PUSH
29898: LD_INT 14
29900: EQUAL
29901: IFFALSE 29922
// points := [ 10 , 0 , 0 ] ;
29903: LD_ADDR_VAR 0 9
29907: PUSH
29908: LD_INT 10
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29922: LD_VAR 0 6
29926: PPUSH
29927: CALL_OW 257
29931: PUSH
29932: LD_INT 11
29934: EQUAL
29935: IFFALSE 29956
// points := [ 30 , 10 , 5 ] ;
29937: LD_ADDR_VAR 0 9
29941: PUSH
29942: LD_INT 30
29944: PUSH
29945: LD_INT 10
29947: PUSH
29948: LD_INT 5
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: LIST
29955: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29956: LD_VAR 0 1
29960: PPUSH
29961: LD_INT 5
29963: PPUSH
29964: CALL_OW 321
29968: PUSH
29969: LD_INT 2
29971: EQUAL
29972: IFFALSE 29989
// bpoints := bpoints * 1.8 ;
29974: LD_ADDR_VAR 0 10
29978: PUSH
29979: LD_VAR 0 10
29983: PUSH
29984: LD_REAL  1.80000000000000E+0000
29987: MUL
29988: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29989: LD_VAR 0 6
29993: PPUSH
29994: CALL_OW 257
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 3
30007: PUSH
30008: LD_INT 4
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: IN
30017: PUSH
30018: LD_VAR 0 1
30022: PPUSH
30023: LD_INT 51
30025: PPUSH
30026: CALL_OW 321
30030: PUSH
30031: LD_INT 2
30033: EQUAL
30034: AND
30035: IFFALSE 30052
// bpoints := bpoints * 1.2 ;
30037: LD_ADDR_VAR 0 10
30041: PUSH
30042: LD_VAR 0 10
30046: PUSH
30047: LD_REAL  1.20000000000000E+0000
30050: MUL
30051: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30052: LD_VAR 0 6
30056: PPUSH
30057: CALL_OW 257
30061: PUSH
30062: LD_INT 5
30064: PUSH
30065: LD_INT 7
30067: PUSH
30068: LD_INT 9
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: IN
30076: PUSH
30077: LD_VAR 0 1
30081: PPUSH
30082: LD_INT 52
30084: PPUSH
30085: CALL_OW 321
30089: PUSH
30090: LD_INT 2
30092: EQUAL
30093: AND
30094: IFFALSE 30111
// bpoints := bpoints * 1.5 ;
30096: LD_ADDR_VAR 0 10
30100: PUSH
30101: LD_VAR 0 10
30105: PUSH
30106: LD_REAL  1.50000000000000E+0000
30109: MUL
30110: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30111: LD_VAR 0 1
30115: PPUSH
30116: LD_INT 66
30118: PPUSH
30119: CALL_OW 321
30123: PUSH
30124: LD_INT 2
30126: EQUAL
30127: IFFALSE 30144
// bpoints := bpoints * 1.1 ;
30129: LD_ADDR_VAR 0 10
30133: PUSH
30134: LD_VAR 0 10
30138: PUSH
30139: LD_REAL  1.10000000000000E+0000
30142: MUL
30143: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30144: LD_ADDR_VAR 0 10
30148: PUSH
30149: LD_VAR 0 10
30153: PUSH
30154: LD_VAR 0 6
30158: PPUSH
30159: LD_INT 1
30161: PPUSH
30162: CALL_OW 259
30166: PUSH
30167: LD_REAL  1.15000000000000E+0000
30170: MUL
30171: MUL
30172: ST_TO_ADDR
// end ; unit_vehicle :
30173: GO 31003
30175: LD_INT 2
30177: DOUBLE
30178: EQUAL
30179: IFTRUE 30183
30181: GO 30991
30183: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30184: LD_VAR 0 6
30188: PPUSH
30189: CALL_OW 264
30193: PUSH
30194: LD_INT 2
30196: PUSH
30197: LD_INT 42
30199: PUSH
30200: LD_INT 24
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: IN
30208: IFFALSE 30229
// points := [ 25 , 5 , 3 ] ;
30210: LD_ADDR_VAR 0 9
30214: PUSH
30215: LD_INT 25
30217: PUSH
30218: LD_INT 5
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30229: LD_VAR 0 6
30233: PPUSH
30234: CALL_OW 264
30238: PUSH
30239: LD_INT 4
30241: PUSH
30242: LD_INT 43
30244: PUSH
30245: LD_INT 25
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: LIST
30252: IN
30253: IFFALSE 30274
// points := [ 40 , 15 , 5 ] ;
30255: LD_ADDR_VAR 0 9
30259: PUSH
30260: LD_INT 40
30262: PUSH
30263: LD_INT 15
30265: PUSH
30266: LD_INT 5
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: LIST
30273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30274: LD_VAR 0 6
30278: PPUSH
30279: CALL_OW 264
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: LD_INT 23
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: IN
30294: IFFALSE 30315
// points := [ 7 , 25 , 8 ] ;
30296: LD_ADDR_VAR 0 9
30300: PUSH
30301: LD_INT 7
30303: PUSH
30304: LD_INT 25
30306: PUSH
30307: LD_INT 8
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30315: LD_VAR 0 6
30319: PPUSH
30320: CALL_OW 264
30324: PUSH
30325: LD_INT 5
30327: PUSH
30328: LD_INT 27
30330: PUSH
30331: LD_INT 44
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: IN
30339: IFFALSE 30360
// points := [ 14 , 50 , 16 ] ;
30341: LD_ADDR_VAR 0 9
30345: PUSH
30346: LD_INT 14
30348: PUSH
30349: LD_INT 50
30351: PUSH
30352: LD_INT 16
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: LIST
30359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30360: LD_VAR 0 6
30364: PPUSH
30365: CALL_OW 264
30369: PUSH
30370: LD_INT 6
30372: PUSH
30373: LD_INT 46
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: IN
30380: IFFALSE 30401
// points := [ 32 , 120 , 70 ] ;
30382: LD_ADDR_VAR 0 9
30386: PUSH
30387: LD_INT 32
30389: PUSH
30390: LD_INT 120
30392: PUSH
30393: LD_INT 70
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30401: LD_VAR 0 6
30405: PPUSH
30406: CALL_OW 264
30410: PUSH
30411: LD_INT 7
30413: PUSH
30414: LD_INT 28
30416: PUSH
30417: LD_INT 45
30419: PUSH
30420: LD_EXP 62
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: IN
30431: IFFALSE 30452
// points := [ 35 , 20 , 45 ] ;
30433: LD_ADDR_VAR 0 9
30437: PUSH
30438: LD_INT 35
30440: PUSH
30441: LD_INT 20
30443: PUSH
30444: LD_INT 45
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30452: LD_VAR 0 6
30456: PPUSH
30457: CALL_OW 264
30461: PUSH
30462: LD_INT 47
30464: PUSH
30465: EMPTY
30466: LIST
30467: IN
30468: IFFALSE 30489
// points := [ 67 , 45 , 75 ] ;
30470: LD_ADDR_VAR 0 9
30474: PUSH
30475: LD_INT 67
30477: PUSH
30478: LD_INT 45
30480: PUSH
30481: LD_INT 75
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30489: LD_VAR 0 6
30493: PPUSH
30494: CALL_OW 264
30498: PUSH
30499: LD_INT 26
30501: PUSH
30502: EMPTY
30503: LIST
30504: IN
30505: IFFALSE 30526
// points := [ 120 , 30 , 80 ] ;
30507: LD_ADDR_VAR 0 9
30511: PUSH
30512: LD_INT 120
30514: PUSH
30515: LD_INT 30
30517: PUSH
30518: LD_INT 80
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: LIST
30525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30526: LD_VAR 0 6
30530: PPUSH
30531: CALL_OW 264
30535: PUSH
30536: LD_INT 22
30538: PUSH
30539: EMPTY
30540: LIST
30541: IN
30542: IFFALSE 30563
// points := [ 40 , 1 , 1 ] ;
30544: LD_ADDR_VAR 0 9
30548: PUSH
30549: LD_INT 40
30551: PUSH
30552: LD_INT 1
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30563: LD_VAR 0 6
30567: PPUSH
30568: CALL_OW 264
30572: PUSH
30573: LD_INT 29
30575: PUSH
30576: EMPTY
30577: LIST
30578: IN
30579: IFFALSE 30600
// points := [ 70 , 200 , 400 ] ;
30581: LD_ADDR_VAR 0 9
30585: PUSH
30586: LD_INT 70
30588: PUSH
30589: LD_INT 200
30591: PUSH
30592: LD_INT 400
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: LIST
30599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30600: LD_VAR 0 6
30604: PPUSH
30605: CALL_OW 264
30609: PUSH
30610: LD_INT 14
30612: PUSH
30613: LD_INT 53
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: IN
30620: IFFALSE 30641
// points := [ 40 , 10 , 20 ] ;
30622: LD_ADDR_VAR 0 9
30626: PUSH
30627: LD_INT 40
30629: PUSH
30630: LD_INT 10
30632: PUSH
30633: LD_INT 20
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30641: LD_VAR 0 6
30645: PPUSH
30646: CALL_OW 264
30650: PUSH
30651: LD_INT 9
30653: PUSH
30654: EMPTY
30655: LIST
30656: IN
30657: IFFALSE 30678
// points := [ 5 , 70 , 20 ] ;
30659: LD_ADDR_VAR 0 9
30663: PUSH
30664: LD_INT 5
30666: PUSH
30667: LD_INT 70
30669: PUSH
30670: LD_INT 20
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30678: LD_VAR 0 6
30682: PPUSH
30683: CALL_OW 264
30687: PUSH
30688: LD_INT 10
30690: PUSH
30691: EMPTY
30692: LIST
30693: IN
30694: IFFALSE 30715
// points := [ 35 , 110 , 70 ] ;
30696: LD_ADDR_VAR 0 9
30700: PUSH
30701: LD_INT 35
30703: PUSH
30704: LD_INT 110
30706: PUSH
30707: LD_INT 70
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30715: LD_VAR 0 6
30719: PPUSH
30720: CALL_OW 265
30724: PUSH
30725: LD_INT 25
30727: EQUAL
30728: IFFALSE 30749
// points := [ 80 , 65 , 100 ] ;
30730: LD_ADDR_VAR 0 9
30734: PUSH
30735: LD_INT 80
30737: PUSH
30738: LD_INT 65
30740: PUSH
30741: LD_INT 100
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: LIST
30748: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30749: LD_VAR 0 6
30753: PPUSH
30754: CALL_OW 263
30758: PUSH
30759: LD_INT 1
30761: EQUAL
30762: IFFALSE 30797
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30764: LD_ADDR_VAR 0 10
30768: PUSH
30769: LD_VAR 0 10
30773: PUSH
30774: LD_VAR 0 6
30778: PPUSH
30779: CALL_OW 311
30783: PPUSH
30784: LD_INT 3
30786: PPUSH
30787: CALL_OW 259
30791: PUSH
30792: LD_INT 4
30794: MUL
30795: MUL
30796: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30797: LD_VAR 0 6
30801: PPUSH
30802: CALL_OW 263
30806: PUSH
30807: LD_INT 2
30809: EQUAL
30810: IFFALSE 30861
// begin j := IsControledBy ( i ) ;
30812: LD_ADDR_VAR 0 7
30816: PUSH
30817: LD_VAR 0 6
30821: PPUSH
30822: CALL_OW 312
30826: ST_TO_ADDR
// if j then
30827: LD_VAR 0 7
30831: IFFALSE 30861
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30833: LD_ADDR_VAR 0 10
30837: PUSH
30838: LD_VAR 0 10
30842: PUSH
30843: LD_VAR 0 7
30847: PPUSH
30848: LD_INT 3
30850: PPUSH
30851: CALL_OW 259
30855: PUSH
30856: LD_INT 3
30858: MUL
30859: MUL
30860: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30861: LD_VAR 0 6
30865: PPUSH
30866: CALL_OW 264
30870: PUSH
30871: LD_INT 5
30873: PUSH
30874: LD_INT 6
30876: PUSH
30877: LD_INT 46
30879: PUSH
30880: LD_INT 44
30882: PUSH
30883: LD_INT 47
30885: PUSH
30886: LD_INT 45
30888: PUSH
30889: LD_INT 28
30891: PUSH
30892: LD_INT 7
30894: PUSH
30895: LD_INT 27
30897: PUSH
30898: LD_INT 29
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: IN
30913: PUSH
30914: LD_VAR 0 1
30918: PPUSH
30919: LD_INT 52
30921: PPUSH
30922: CALL_OW 321
30926: PUSH
30927: LD_INT 2
30929: EQUAL
30930: AND
30931: IFFALSE 30948
// bpoints := bpoints * 1.2 ;
30933: LD_ADDR_VAR 0 10
30937: PUSH
30938: LD_VAR 0 10
30942: PUSH
30943: LD_REAL  1.20000000000000E+0000
30946: MUL
30947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30948: LD_VAR 0 6
30952: PPUSH
30953: CALL_OW 264
30957: PUSH
30958: LD_INT 6
30960: PUSH
30961: LD_INT 46
30963: PUSH
30964: LD_INT 47
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: IN
30972: IFFALSE 30989
// bpoints := bpoints * 1.2 ;
30974: LD_ADDR_VAR 0 10
30978: PUSH
30979: LD_VAR 0 10
30983: PUSH
30984: LD_REAL  1.20000000000000E+0000
30987: MUL
30988: ST_TO_ADDR
// end ; unit_building :
30989: GO 31003
30991: LD_INT 3
30993: DOUBLE
30994: EQUAL
30995: IFTRUE 30999
30997: GO 31002
30999: POP
// ; end ;
31000: GO 31003
31002: POP
// for j = 1 to 3 do
31003: LD_ADDR_VAR 0 7
31007: PUSH
31008: DOUBLE
31009: LD_INT 1
31011: DEC
31012: ST_TO_ADDR
31013: LD_INT 3
31015: PUSH
31016: FOR_TO
31017: IFFALSE 31070
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31019: LD_ADDR_VAR 0 5
31023: PUSH
31024: LD_VAR 0 5
31028: PPUSH
31029: LD_VAR 0 7
31033: PPUSH
31034: LD_VAR 0 5
31038: PUSH
31039: LD_VAR 0 7
31043: ARRAY
31044: PUSH
31045: LD_VAR 0 9
31049: PUSH
31050: LD_VAR 0 7
31054: ARRAY
31055: PUSH
31056: LD_VAR 0 10
31060: MUL
31061: PLUS
31062: PPUSH
31063: CALL_OW 1
31067: ST_TO_ADDR
31068: GO 31016
31070: POP
31071: POP
// end ;
31072: GO 29549
31074: POP
31075: POP
// result := Replace ( result , 4 , tmp ) ;
31076: LD_ADDR_VAR 0 5
31080: PUSH
31081: LD_VAR 0 5
31085: PPUSH
31086: LD_INT 4
31088: PPUSH
31089: LD_VAR 0 8
31093: PPUSH
31094: CALL_OW 1
31098: ST_TO_ADDR
// end ;
31099: LD_VAR 0 5
31103: RET
// export function DangerAtRange ( unit , range ) ; begin
31104: LD_INT 0
31106: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31107: LD_ADDR_VAR 0 3
31111: PUSH
31112: LD_VAR 0 1
31116: PPUSH
31117: CALL_OW 255
31121: PPUSH
31122: LD_VAR 0 1
31126: PPUSH
31127: CALL_OW 250
31131: PPUSH
31132: LD_VAR 0 1
31136: PPUSH
31137: CALL_OW 251
31141: PPUSH
31142: LD_VAR 0 2
31146: PPUSH
31147: CALL 29401 0 4
31151: ST_TO_ADDR
// end ;
31152: LD_VAR 0 3
31156: RET
// export function DangerInArea ( side , area ) ; begin
31157: LD_INT 0
31159: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31160: LD_ADDR_VAR 0 3
31164: PUSH
31165: LD_VAR 0 2
31169: PPUSH
31170: LD_INT 81
31172: PUSH
31173: LD_VAR 0 1
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PPUSH
31182: CALL_OW 70
31186: ST_TO_ADDR
// end ;
31187: LD_VAR 0 3
31191: RET
// export function IsExtension ( b ) ; begin
31192: LD_INT 0
31194: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31195: LD_ADDR_VAR 0 2
31199: PUSH
31200: LD_VAR 0 1
31204: PUSH
31205: LD_INT 23
31207: PUSH
31208: LD_INT 20
31210: PUSH
31211: LD_INT 22
31213: PUSH
31214: LD_INT 17
31216: PUSH
31217: LD_INT 24
31219: PUSH
31220: LD_INT 21
31222: PUSH
31223: LD_INT 19
31225: PUSH
31226: LD_INT 16
31228: PUSH
31229: LD_INT 25
31231: PUSH
31232: LD_INT 18
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: IN
31247: ST_TO_ADDR
// end ;
31248: LD_VAR 0 2
31252: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31253: LD_INT 0
31255: PPUSH
31256: PPUSH
31257: PPUSH
// result := [ ] ;
31258: LD_ADDR_VAR 0 4
31262: PUSH
31263: EMPTY
31264: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31265: LD_ADDR_VAR 0 5
31269: PUSH
31270: LD_VAR 0 2
31274: PPUSH
31275: LD_INT 21
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PPUSH
31285: CALL_OW 70
31289: ST_TO_ADDR
// if not tmp then
31290: LD_VAR 0 5
31294: NOT
31295: IFFALSE 31299
// exit ;
31297: GO 31363
// if checkLink then
31299: LD_VAR 0 3
31303: IFFALSE 31353
// begin for i in tmp do
31305: LD_ADDR_VAR 0 6
31309: PUSH
31310: LD_VAR 0 5
31314: PUSH
31315: FOR_IN
31316: IFFALSE 31351
// if GetBase ( i ) <> base then
31318: LD_VAR 0 6
31322: PPUSH
31323: CALL_OW 274
31327: PUSH
31328: LD_VAR 0 1
31332: NONEQUAL
31333: IFFALSE 31349
// ComLinkToBase ( base , i ) ;
31335: LD_VAR 0 1
31339: PPUSH
31340: LD_VAR 0 6
31344: PPUSH
31345: CALL_OW 169
31349: GO 31315
31351: POP
31352: POP
// end ; result := tmp ;
31353: LD_ADDR_VAR 0 4
31357: PUSH
31358: LD_VAR 0 5
31362: ST_TO_ADDR
// end ;
31363: LD_VAR 0 4
31367: RET
// export function ComComplete ( units , b ) ; var i ; begin
31368: LD_INT 0
31370: PPUSH
31371: PPUSH
// if not units then
31372: LD_VAR 0 1
31376: NOT
31377: IFFALSE 31381
// exit ;
31379: GO 31471
// for i in units do
31381: LD_ADDR_VAR 0 4
31385: PUSH
31386: LD_VAR 0 1
31390: PUSH
31391: FOR_IN
31392: IFFALSE 31469
// if BuildingStatus ( b ) = bs_build then
31394: LD_VAR 0 2
31398: PPUSH
31399: CALL_OW 461
31403: PUSH
31404: LD_INT 1
31406: EQUAL
31407: IFFALSE 31467
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31409: LD_VAR 0 4
31413: PPUSH
31414: LD_STRING h
31416: PUSH
31417: LD_VAR 0 2
31421: PPUSH
31422: CALL_OW 250
31426: PUSH
31427: LD_VAR 0 2
31431: PPUSH
31432: CALL_OW 251
31436: PUSH
31437: LD_VAR 0 2
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: PUSH
31460: EMPTY
31461: LIST
31462: PPUSH
31463: CALL_OW 446
31467: GO 31391
31469: POP
31470: POP
// end ;
31471: LD_VAR 0 3
31475: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31476: LD_INT 0
31478: PPUSH
31479: PPUSH
31480: PPUSH
31481: PPUSH
31482: PPUSH
31483: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31484: LD_VAR 0 1
31488: NOT
31489: PUSH
31490: LD_VAR 0 1
31494: PPUSH
31495: CALL_OW 263
31499: PUSH
31500: LD_INT 2
31502: EQUAL
31503: NOT
31504: OR
31505: IFFALSE 31509
// exit ;
31507: GO 31825
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31509: LD_ADDR_VAR 0 6
31513: PUSH
31514: LD_INT 22
31516: PUSH
31517: LD_VAR 0 1
31521: PPUSH
31522: CALL_OW 255
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: LD_INT 30
31536: PUSH
31537: LD_INT 36
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 34
31546: PUSH
31547: LD_INT 31
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PPUSH
31563: CALL_OW 69
31567: ST_TO_ADDR
// if not tmp then
31568: LD_VAR 0 6
31572: NOT
31573: IFFALSE 31577
// exit ;
31575: GO 31825
// result := [ ] ;
31577: LD_ADDR_VAR 0 2
31581: PUSH
31582: EMPTY
31583: ST_TO_ADDR
// for i in tmp do
31584: LD_ADDR_VAR 0 3
31588: PUSH
31589: LD_VAR 0 6
31593: PUSH
31594: FOR_IN
31595: IFFALSE 31666
// begin t := UnitsInside ( i ) ;
31597: LD_ADDR_VAR 0 4
31601: PUSH
31602: LD_VAR 0 3
31606: PPUSH
31607: CALL_OW 313
31611: ST_TO_ADDR
// if t then
31612: LD_VAR 0 4
31616: IFFALSE 31664
// for j in t do
31618: LD_ADDR_VAR 0 7
31622: PUSH
31623: LD_VAR 0 4
31627: PUSH
31628: FOR_IN
31629: IFFALSE 31662
// result := Insert ( result , result + 1 , j ) ;
31631: LD_ADDR_VAR 0 2
31635: PUSH
31636: LD_VAR 0 2
31640: PPUSH
31641: LD_VAR 0 2
31645: PUSH
31646: LD_INT 1
31648: PLUS
31649: PPUSH
31650: LD_VAR 0 7
31654: PPUSH
31655: CALL_OW 2
31659: ST_TO_ADDR
31660: GO 31628
31662: POP
31663: POP
// end ;
31664: GO 31594
31666: POP
31667: POP
// if not result then
31668: LD_VAR 0 2
31672: NOT
31673: IFFALSE 31677
// exit ;
31675: GO 31825
// mech := result [ 1 ] ;
31677: LD_ADDR_VAR 0 5
31681: PUSH
31682: LD_VAR 0 2
31686: PUSH
31687: LD_INT 1
31689: ARRAY
31690: ST_TO_ADDR
// if result > 1 then
31691: LD_VAR 0 2
31695: PUSH
31696: LD_INT 1
31698: GREATER
31699: IFFALSE 31811
// for i = 2 to result do
31701: LD_ADDR_VAR 0 3
31705: PUSH
31706: DOUBLE
31707: LD_INT 2
31709: DEC
31710: ST_TO_ADDR
31711: LD_VAR 0 2
31715: PUSH
31716: FOR_TO
31717: IFFALSE 31809
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31719: LD_ADDR_VAR 0 4
31723: PUSH
31724: LD_VAR 0 2
31728: PUSH
31729: LD_VAR 0 3
31733: ARRAY
31734: PPUSH
31735: LD_INT 3
31737: PPUSH
31738: CALL_OW 259
31742: PUSH
31743: LD_VAR 0 2
31747: PUSH
31748: LD_VAR 0 3
31752: ARRAY
31753: PPUSH
31754: CALL_OW 432
31758: MINUS
31759: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31760: LD_VAR 0 4
31764: PUSH
31765: LD_VAR 0 5
31769: PPUSH
31770: LD_INT 3
31772: PPUSH
31773: CALL_OW 259
31777: PUSH
31778: LD_VAR 0 5
31782: PPUSH
31783: CALL_OW 432
31787: MINUS
31788: GREATEREQUAL
31789: IFFALSE 31807
// mech := result [ i ] ;
31791: LD_ADDR_VAR 0 5
31795: PUSH
31796: LD_VAR 0 2
31800: PUSH
31801: LD_VAR 0 3
31805: ARRAY
31806: ST_TO_ADDR
// end ;
31807: GO 31716
31809: POP
31810: POP
// ComLinkTo ( vehicle , mech ) ;
31811: LD_VAR 0 1
31815: PPUSH
31816: LD_VAR 0 5
31820: PPUSH
31821: CALL_OW 135
// end ;
31825: LD_VAR 0 2
31829: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31830: LD_INT 0
31832: PPUSH
31833: PPUSH
31834: PPUSH
31835: PPUSH
31836: PPUSH
31837: PPUSH
31838: PPUSH
31839: PPUSH
31840: PPUSH
31841: PPUSH
31842: PPUSH
31843: PPUSH
31844: PPUSH
// result := [ ] ;
31845: LD_ADDR_VAR 0 7
31849: PUSH
31850: EMPTY
31851: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31852: LD_VAR 0 1
31856: PPUSH
31857: CALL_OW 266
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: IN
31872: NOT
31873: IFFALSE 31877
// exit ;
31875: GO 33511
// if name then
31877: LD_VAR 0 3
31881: IFFALSE 31897
// SetBName ( base_dep , name ) ;
31883: LD_VAR 0 1
31887: PPUSH
31888: LD_VAR 0 3
31892: PPUSH
31893: CALL_OW 500
// base := GetBase ( base_dep ) ;
31897: LD_ADDR_VAR 0 15
31901: PUSH
31902: LD_VAR 0 1
31906: PPUSH
31907: CALL_OW 274
31911: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31912: LD_ADDR_VAR 0 16
31916: PUSH
31917: LD_VAR 0 1
31921: PPUSH
31922: CALL_OW 255
31926: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31927: LD_ADDR_VAR 0 17
31931: PUSH
31932: LD_VAR 0 1
31936: PPUSH
31937: CALL_OW 248
31941: ST_TO_ADDR
// if sources then
31942: LD_VAR 0 5
31946: IFFALSE 31993
// for i = 1 to 3 do
31948: LD_ADDR_VAR 0 8
31952: PUSH
31953: DOUBLE
31954: LD_INT 1
31956: DEC
31957: ST_TO_ADDR
31958: LD_INT 3
31960: PUSH
31961: FOR_TO
31962: IFFALSE 31991
// AddResourceType ( base , i , sources [ i ] ) ;
31964: LD_VAR 0 15
31968: PPUSH
31969: LD_VAR 0 8
31973: PPUSH
31974: LD_VAR 0 5
31978: PUSH
31979: LD_VAR 0 8
31983: ARRAY
31984: PPUSH
31985: CALL_OW 276
31989: GO 31961
31991: POP
31992: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31993: LD_ADDR_VAR 0 18
31997: PUSH
31998: LD_VAR 0 15
32002: PPUSH
32003: LD_VAR 0 2
32007: PPUSH
32008: LD_INT 1
32010: PPUSH
32011: CALL 31253 0 3
32015: ST_TO_ADDR
// InitHc ;
32016: CALL_OW 19
// InitUc ;
32020: CALL_OW 18
// uc_side := side ;
32024: LD_ADDR_OWVAR 20
32028: PUSH
32029: LD_VAR 0 16
32033: ST_TO_ADDR
// uc_nation := nation ;
32034: LD_ADDR_OWVAR 21
32038: PUSH
32039: LD_VAR 0 17
32043: ST_TO_ADDR
// if buildings then
32044: LD_VAR 0 18
32048: IFFALSE 33370
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32050: LD_ADDR_VAR 0 19
32054: PUSH
32055: LD_VAR 0 18
32059: PPUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 30
32065: PUSH
32066: LD_INT 29
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 30
32075: PUSH
32076: LD_INT 30
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: PPUSH
32088: CALL_OW 72
32092: ST_TO_ADDR
// if tmp then
32093: LD_VAR 0 19
32097: IFFALSE 32145
// for i in tmp do
32099: LD_ADDR_VAR 0 8
32103: PUSH
32104: LD_VAR 0 19
32108: PUSH
32109: FOR_IN
32110: IFFALSE 32143
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32112: LD_VAR 0 8
32116: PPUSH
32117: CALL_OW 250
32121: PPUSH
32122: LD_VAR 0 8
32126: PPUSH
32127: CALL_OW 251
32131: PPUSH
32132: LD_VAR 0 16
32136: PPUSH
32137: CALL_OW 441
32141: GO 32109
32143: POP
32144: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32145: LD_VAR 0 18
32149: PPUSH
32150: LD_INT 2
32152: PUSH
32153: LD_INT 30
32155: PUSH
32156: LD_INT 32
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 30
32165: PUSH
32166: LD_INT 33
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: PPUSH
32178: CALL_OW 72
32182: IFFALSE 32270
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32184: LD_ADDR_VAR 0 8
32188: PUSH
32189: LD_VAR 0 18
32193: PPUSH
32194: LD_INT 2
32196: PUSH
32197: LD_INT 30
32199: PUSH
32200: LD_INT 32
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 30
32209: PUSH
32210: LD_INT 33
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: PPUSH
32222: CALL_OW 72
32226: PUSH
32227: FOR_IN
32228: IFFALSE 32268
// begin if not GetBWeapon ( i ) then
32230: LD_VAR 0 8
32234: PPUSH
32235: CALL_OW 269
32239: NOT
32240: IFFALSE 32266
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32242: LD_VAR 0 8
32246: PPUSH
32247: LD_VAR 0 8
32251: PPUSH
32252: LD_VAR 0 2
32256: PPUSH
32257: CALL 33516 0 2
32261: PPUSH
32262: CALL_OW 431
// end ;
32266: GO 32227
32268: POP
32269: POP
// end ; for i = 1 to personel do
32270: LD_ADDR_VAR 0 8
32274: PUSH
32275: DOUBLE
32276: LD_INT 1
32278: DEC
32279: ST_TO_ADDR
32280: LD_VAR 0 6
32284: PUSH
32285: FOR_TO
32286: IFFALSE 33350
// begin if i > 4 then
32288: LD_VAR 0 8
32292: PUSH
32293: LD_INT 4
32295: GREATER
32296: IFFALSE 32300
// break ;
32298: GO 33350
// case i of 1 :
32300: LD_VAR 0 8
32304: PUSH
32305: LD_INT 1
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32313
32311: GO 32393
32313: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32314: LD_ADDR_VAR 0 12
32318: PUSH
32319: LD_VAR 0 18
32323: PPUSH
32324: LD_INT 22
32326: PUSH
32327: LD_VAR 0 16
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 58
32338: PUSH
32339: EMPTY
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 30
32347: PUSH
32348: LD_INT 32
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 30
32357: PUSH
32358: LD_INT 4
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 30
32367: PUSH
32368: LD_INT 5
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: LIST
32385: PPUSH
32386: CALL_OW 72
32390: ST_TO_ADDR
32391: GO 32615
32393: LD_INT 2
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32463
32401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32402: LD_ADDR_VAR 0 12
32406: PUSH
32407: LD_VAR 0 18
32411: PPUSH
32412: LD_INT 22
32414: PUSH
32415: LD_VAR 0 16
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 2
32426: PUSH
32427: LD_INT 30
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 30
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PPUSH
32456: CALL_OW 72
32460: ST_TO_ADDR
32461: GO 32615
32463: LD_INT 3
32465: DOUBLE
32466: EQUAL
32467: IFTRUE 32471
32469: GO 32533
32471: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32472: LD_ADDR_VAR 0 12
32476: PUSH
32477: LD_VAR 0 18
32481: PPUSH
32482: LD_INT 22
32484: PUSH
32485: LD_VAR 0 16
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: LD_INT 30
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 30
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: LIST
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PPUSH
32526: CALL_OW 72
32530: ST_TO_ADDR
32531: GO 32615
32533: LD_INT 4
32535: DOUBLE
32536: EQUAL
32537: IFTRUE 32541
32539: GO 32614
32541: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32542: LD_ADDR_VAR 0 12
32546: PUSH
32547: LD_VAR 0 18
32551: PPUSH
32552: LD_INT 22
32554: PUSH
32555: LD_VAR 0 16
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: LD_INT 30
32569: PUSH
32570: LD_INT 6
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 30
32579: PUSH
32580: LD_INT 7
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 30
32589: PUSH
32590: LD_INT 8
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PPUSH
32607: CALL_OW 72
32611: ST_TO_ADDR
32612: GO 32615
32614: POP
// if i = 1 then
32615: LD_VAR 0 8
32619: PUSH
32620: LD_INT 1
32622: EQUAL
32623: IFFALSE 32734
// begin tmp := [ ] ;
32625: LD_ADDR_VAR 0 19
32629: PUSH
32630: EMPTY
32631: ST_TO_ADDR
// for j in f do
32632: LD_ADDR_VAR 0 9
32636: PUSH
32637: LD_VAR 0 12
32641: PUSH
32642: FOR_IN
32643: IFFALSE 32716
// if GetBType ( j ) = b_bunker then
32645: LD_VAR 0 9
32649: PPUSH
32650: CALL_OW 266
32654: PUSH
32655: LD_INT 32
32657: EQUAL
32658: IFFALSE 32685
// tmp := Insert ( tmp , 1 , j ) else
32660: LD_ADDR_VAR 0 19
32664: PUSH
32665: LD_VAR 0 19
32669: PPUSH
32670: LD_INT 1
32672: PPUSH
32673: LD_VAR 0 9
32677: PPUSH
32678: CALL_OW 2
32682: ST_TO_ADDR
32683: GO 32714
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32685: LD_ADDR_VAR 0 19
32689: PUSH
32690: LD_VAR 0 19
32694: PPUSH
32695: LD_VAR 0 19
32699: PUSH
32700: LD_INT 1
32702: PLUS
32703: PPUSH
32704: LD_VAR 0 9
32708: PPUSH
32709: CALL_OW 2
32713: ST_TO_ADDR
32714: GO 32642
32716: POP
32717: POP
// if tmp then
32718: LD_VAR 0 19
32722: IFFALSE 32734
// f := tmp ;
32724: LD_ADDR_VAR 0 12
32728: PUSH
32729: LD_VAR 0 19
32733: ST_TO_ADDR
// end ; x := personel [ i ] ;
32734: LD_ADDR_VAR 0 13
32738: PUSH
32739: LD_VAR 0 6
32743: PUSH
32744: LD_VAR 0 8
32748: ARRAY
32749: ST_TO_ADDR
// if x = - 1 then
32750: LD_VAR 0 13
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: EQUAL
32759: IFFALSE 32968
// begin for j in f do
32761: LD_ADDR_VAR 0 9
32765: PUSH
32766: LD_VAR 0 12
32770: PUSH
32771: FOR_IN
32772: IFFALSE 32964
// repeat InitHc ;
32774: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32778: LD_VAR 0 9
32782: PPUSH
32783: CALL_OW 266
32787: PUSH
32788: LD_INT 5
32790: EQUAL
32791: IFFALSE 32861
// begin if UnitsInside ( j ) < 3 then
32793: LD_VAR 0 9
32797: PPUSH
32798: CALL_OW 313
32802: PUSH
32803: LD_INT 3
32805: LESS
32806: IFFALSE 32842
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32808: LD_INT 0
32810: PPUSH
32811: LD_INT 5
32813: PUSH
32814: LD_INT 8
32816: PUSH
32817: LD_INT 9
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: PUSH
32825: LD_VAR 0 17
32829: ARRAY
32830: PPUSH
32831: LD_VAR 0 4
32835: PPUSH
32836: CALL_OW 380
32840: GO 32859
// PrepareHuman ( false , i , skill ) ;
32842: LD_INT 0
32844: PPUSH
32845: LD_VAR 0 8
32849: PPUSH
32850: LD_VAR 0 4
32854: PPUSH
32855: CALL_OW 380
// end else
32859: GO 32878
// PrepareHuman ( false , i , skill ) ;
32861: LD_INT 0
32863: PPUSH
32864: LD_VAR 0 8
32868: PPUSH
32869: LD_VAR 0 4
32873: PPUSH
32874: CALL_OW 380
// un := CreateHuman ;
32878: LD_ADDR_VAR 0 14
32882: PUSH
32883: CALL_OW 44
32887: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32888: LD_ADDR_VAR 0 7
32892: PUSH
32893: LD_VAR 0 7
32897: PPUSH
32898: LD_INT 1
32900: PPUSH
32901: LD_VAR 0 14
32905: PPUSH
32906: CALL_OW 2
32910: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32911: LD_VAR 0 14
32915: PPUSH
32916: LD_VAR 0 9
32920: PPUSH
32921: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32925: LD_VAR 0 9
32929: PPUSH
32930: CALL_OW 313
32934: PUSH
32935: LD_INT 6
32937: EQUAL
32938: PUSH
32939: LD_VAR 0 9
32943: PPUSH
32944: CALL_OW 266
32948: PUSH
32949: LD_INT 32
32951: PUSH
32952: LD_INT 31
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: IN
32959: OR
32960: IFFALSE 32774
32962: GO 32771
32964: POP
32965: POP
// end else
32966: GO 33348
// for j = 1 to x do
32968: LD_ADDR_VAR 0 9
32972: PUSH
32973: DOUBLE
32974: LD_INT 1
32976: DEC
32977: ST_TO_ADDR
32978: LD_VAR 0 13
32982: PUSH
32983: FOR_TO
32984: IFFALSE 33346
// begin InitHc ;
32986: CALL_OW 19
// if not f then
32990: LD_VAR 0 12
32994: NOT
32995: IFFALSE 33084
// begin PrepareHuman ( false , i , skill ) ;
32997: LD_INT 0
32999: PPUSH
33000: LD_VAR 0 8
33004: PPUSH
33005: LD_VAR 0 4
33009: PPUSH
33010: CALL_OW 380
// un := CreateHuman ;
33014: LD_ADDR_VAR 0 14
33018: PUSH
33019: CALL_OW 44
33023: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33024: LD_ADDR_VAR 0 7
33028: PUSH
33029: LD_VAR 0 7
33033: PPUSH
33034: LD_INT 1
33036: PPUSH
33037: LD_VAR 0 14
33041: PPUSH
33042: CALL_OW 2
33046: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33047: LD_VAR 0 14
33051: PPUSH
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL_OW 250
33061: PPUSH
33062: LD_VAR 0 1
33066: PPUSH
33067: CALL_OW 251
33071: PPUSH
33072: LD_INT 10
33074: PPUSH
33075: LD_INT 0
33077: PPUSH
33078: CALL_OW 50
// continue ;
33082: GO 32983
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33084: LD_VAR 0 12
33088: PUSH
33089: LD_INT 1
33091: ARRAY
33092: PPUSH
33093: CALL_OW 313
33097: PUSH
33098: LD_VAR 0 12
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: PPUSH
33107: CALL_OW 266
33111: PUSH
33112: LD_INT 32
33114: PUSH
33115: LD_INT 31
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: IN
33122: AND
33123: PUSH
33124: LD_VAR 0 12
33128: PUSH
33129: LD_INT 1
33131: ARRAY
33132: PPUSH
33133: CALL_OW 313
33137: PUSH
33138: LD_INT 6
33140: EQUAL
33141: OR
33142: IFFALSE 33162
// f := Delete ( f , 1 ) ;
33144: LD_ADDR_VAR 0 12
33148: PUSH
33149: LD_VAR 0 12
33153: PPUSH
33154: LD_INT 1
33156: PPUSH
33157: CALL_OW 3
33161: ST_TO_ADDR
// if not f then
33162: LD_VAR 0 12
33166: NOT
33167: IFFALSE 33185
// begin x := x + 2 ;
33169: LD_ADDR_VAR 0 13
33173: PUSH
33174: LD_VAR 0 13
33178: PUSH
33179: LD_INT 2
33181: PLUS
33182: ST_TO_ADDR
// continue ;
33183: GO 32983
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33185: LD_VAR 0 12
33189: PUSH
33190: LD_INT 1
33192: ARRAY
33193: PPUSH
33194: CALL_OW 266
33198: PUSH
33199: LD_INT 5
33201: EQUAL
33202: IFFALSE 33276
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33204: LD_VAR 0 12
33208: PUSH
33209: LD_INT 1
33211: ARRAY
33212: PPUSH
33213: CALL_OW 313
33217: PUSH
33218: LD_INT 3
33220: LESS
33221: IFFALSE 33257
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33223: LD_INT 0
33225: PPUSH
33226: LD_INT 5
33228: PUSH
33229: LD_INT 8
33231: PUSH
33232: LD_INT 9
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: LIST
33239: PUSH
33240: LD_VAR 0 17
33244: ARRAY
33245: PPUSH
33246: LD_VAR 0 4
33250: PPUSH
33251: CALL_OW 380
33255: GO 33274
// PrepareHuman ( false , i , skill ) ;
33257: LD_INT 0
33259: PPUSH
33260: LD_VAR 0 8
33264: PPUSH
33265: LD_VAR 0 4
33269: PPUSH
33270: CALL_OW 380
// end else
33274: GO 33293
// PrepareHuman ( false , i , skill ) ;
33276: LD_INT 0
33278: PPUSH
33279: LD_VAR 0 8
33283: PPUSH
33284: LD_VAR 0 4
33288: PPUSH
33289: CALL_OW 380
// un := CreateHuman ;
33293: LD_ADDR_VAR 0 14
33297: PUSH
33298: CALL_OW 44
33302: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33303: LD_ADDR_VAR 0 7
33307: PUSH
33308: LD_VAR 0 7
33312: PPUSH
33313: LD_INT 1
33315: PPUSH
33316: LD_VAR 0 14
33320: PPUSH
33321: CALL_OW 2
33325: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33326: LD_VAR 0 14
33330: PPUSH
33331: LD_VAR 0 12
33335: PUSH
33336: LD_INT 1
33338: ARRAY
33339: PPUSH
33340: CALL_OW 52
// end ;
33344: GO 32983
33346: POP
33347: POP
// end ;
33348: GO 32285
33350: POP
33351: POP
// result := result ^ buildings ;
33352: LD_ADDR_VAR 0 7
33356: PUSH
33357: LD_VAR 0 7
33361: PUSH
33362: LD_VAR 0 18
33366: ADD
33367: ST_TO_ADDR
// end else
33368: GO 33511
// begin for i = 1 to personel do
33370: LD_ADDR_VAR 0 8
33374: PUSH
33375: DOUBLE
33376: LD_INT 1
33378: DEC
33379: ST_TO_ADDR
33380: LD_VAR 0 6
33384: PUSH
33385: FOR_TO
33386: IFFALSE 33509
// begin if i > 4 then
33388: LD_VAR 0 8
33392: PUSH
33393: LD_INT 4
33395: GREATER
33396: IFFALSE 33400
// break ;
33398: GO 33509
// x := personel [ i ] ;
33400: LD_ADDR_VAR 0 13
33404: PUSH
33405: LD_VAR 0 6
33409: PUSH
33410: LD_VAR 0 8
33414: ARRAY
33415: ST_TO_ADDR
// if x = - 1 then
33416: LD_VAR 0 13
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: EQUAL
33425: IFFALSE 33429
// continue ;
33427: GO 33385
// PrepareHuman ( false , i , skill ) ;
33429: LD_INT 0
33431: PPUSH
33432: LD_VAR 0 8
33436: PPUSH
33437: LD_VAR 0 4
33441: PPUSH
33442: CALL_OW 380
// un := CreateHuman ;
33446: LD_ADDR_VAR 0 14
33450: PUSH
33451: CALL_OW 44
33455: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33456: LD_VAR 0 14
33460: PPUSH
33461: LD_VAR 0 1
33465: PPUSH
33466: CALL_OW 250
33470: PPUSH
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL_OW 251
33480: PPUSH
33481: LD_INT 10
33483: PPUSH
33484: LD_INT 0
33486: PPUSH
33487: CALL_OW 50
// result := result ^ un ;
33491: LD_ADDR_VAR 0 7
33495: PUSH
33496: LD_VAR 0 7
33500: PUSH
33501: LD_VAR 0 14
33505: ADD
33506: ST_TO_ADDR
// end ;
33507: GO 33385
33509: POP
33510: POP
// end ; end ;
33511: LD_VAR 0 7
33515: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33516: LD_INT 0
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
33527: PPUSH
33528: PPUSH
33529: PPUSH
33530: PPUSH
33531: PPUSH
33532: PPUSH
33533: PPUSH
// result := false ;
33534: LD_ADDR_VAR 0 3
33538: PUSH
33539: LD_INT 0
33541: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33542: LD_VAR 0 1
33546: NOT
33547: PUSH
33548: LD_VAR 0 1
33552: PPUSH
33553: CALL_OW 266
33557: PUSH
33558: LD_INT 32
33560: PUSH
33561: LD_INT 33
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: IN
33568: NOT
33569: OR
33570: IFFALSE 33574
// exit ;
33572: GO 34683
// nat := GetNation ( tower ) ;
33574: LD_ADDR_VAR 0 12
33578: PUSH
33579: LD_VAR 0 1
33583: PPUSH
33584: CALL_OW 248
33588: ST_TO_ADDR
// side := GetSide ( tower ) ;
33589: LD_ADDR_VAR 0 16
33593: PUSH
33594: LD_VAR 0 1
33598: PPUSH
33599: CALL_OW 255
33603: ST_TO_ADDR
// x := GetX ( tower ) ;
33604: LD_ADDR_VAR 0 10
33608: PUSH
33609: LD_VAR 0 1
33613: PPUSH
33614: CALL_OW 250
33618: ST_TO_ADDR
// y := GetY ( tower ) ;
33619: LD_ADDR_VAR 0 11
33623: PUSH
33624: LD_VAR 0 1
33628: PPUSH
33629: CALL_OW 251
33633: ST_TO_ADDR
// if not x or not y then
33634: LD_VAR 0 10
33638: NOT
33639: PUSH
33640: LD_VAR 0 11
33644: NOT
33645: OR
33646: IFFALSE 33650
// exit ;
33648: GO 34683
// weapon := 0 ;
33650: LD_ADDR_VAR 0 18
33654: PUSH
33655: LD_INT 0
33657: ST_TO_ADDR
// fac_list := [ ] ;
33658: LD_ADDR_VAR 0 17
33662: PUSH
33663: EMPTY
33664: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33665: LD_ADDR_VAR 0 6
33669: PUSH
33670: LD_VAR 0 1
33674: PPUSH
33675: CALL_OW 274
33679: PPUSH
33680: LD_VAR 0 2
33684: PPUSH
33685: LD_INT 0
33687: PPUSH
33688: CALL 31253 0 3
33692: PPUSH
33693: LD_INT 30
33695: PUSH
33696: LD_INT 3
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PPUSH
33703: CALL_OW 72
33707: ST_TO_ADDR
// if not factories then
33708: LD_VAR 0 6
33712: NOT
33713: IFFALSE 33717
// exit ;
33715: GO 34683
// for i in factories do
33717: LD_ADDR_VAR 0 8
33721: PUSH
33722: LD_VAR 0 6
33726: PUSH
33727: FOR_IN
33728: IFFALSE 33753
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33730: LD_ADDR_VAR 0 17
33734: PUSH
33735: LD_VAR 0 17
33739: PUSH
33740: LD_VAR 0 8
33744: PPUSH
33745: CALL_OW 478
33749: UNION
33750: ST_TO_ADDR
33751: GO 33727
33753: POP
33754: POP
// if not fac_list then
33755: LD_VAR 0 17
33759: NOT
33760: IFFALSE 33764
// exit ;
33762: GO 34683
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33764: LD_ADDR_VAR 0 5
33768: PUSH
33769: LD_INT 4
33771: PUSH
33772: LD_INT 5
33774: PUSH
33775: LD_INT 9
33777: PUSH
33778: LD_INT 10
33780: PUSH
33781: LD_INT 6
33783: PUSH
33784: LD_INT 7
33786: PUSH
33787: LD_INT 11
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 27
33801: PUSH
33802: LD_INT 28
33804: PUSH
33805: LD_INT 26
33807: PUSH
33808: LD_INT 30
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 43
33819: PUSH
33820: LD_INT 44
33822: PUSH
33823: LD_INT 46
33825: PUSH
33826: LD_INT 45
33828: PUSH
33829: LD_INT 47
33831: PUSH
33832: LD_INT 49
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: PUSH
33848: LD_VAR 0 12
33852: ARRAY
33853: ST_TO_ADDR
// list := list isect fac_list ;
33854: LD_ADDR_VAR 0 5
33858: PUSH
33859: LD_VAR 0 5
33863: PUSH
33864: LD_VAR 0 17
33868: ISECT
33869: ST_TO_ADDR
// if not list then
33870: LD_VAR 0 5
33874: NOT
33875: IFFALSE 33879
// exit ;
33877: GO 34683
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33879: LD_VAR 0 12
33883: PUSH
33884: LD_INT 3
33886: EQUAL
33887: PUSH
33888: LD_INT 49
33890: PUSH
33891: LD_VAR 0 5
33895: IN
33896: AND
33897: PUSH
33898: LD_INT 31
33900: PPUSH
33901: LD_VAR 0 16
33905: PPUSH
33906: CALL_OW 321
33910: PUSH
33911: LD_INT 2
33913: EQUAL
33914: AND
33915: IFFALSE 33975
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33917: LD_INT 22
33919: PUSH
33920: LD_VAR 0 16
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 35
33931: PUSH
33932: LD_INT 49
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 91
33941: PUSH
33942: LD_VAR 0 1
33946: PUSH
33947: LD_INT 10
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: PPUSH
33960: CALL_OW 69
33964: NOT
33965: IFFALSE 33975
// weapon := ru_time_lapser ;
33967: LD_ADDR_VAR 0 18
33971: PUSH
33972: LD_INT 49
33974: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33975: LD_VAR 0 12
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: IN
33990: PUSH
33991: LD_INT 11
33993: PUSH
33994: LD_VAR 0 5
33998: IN
33999: PUSH
34000: LD_INT 30
34002: PUSH
34003: LD_VAR 0 5
34007: IN
34008: OR
34009: AND
34010: PUSH
34011: LD_INT 6
34013: PPUSH
34014: LD_VAR 0 16
34018: PPUSH
34019: CALL_OW 321
34023: PUSH
34024: LD_INT 2
34026: EQUAL
34027: AND
34028: IFFALSE 34193
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34030: LD_INT 22
34032: PUSH
34033: LD_VAR 0 16
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: LD_INT 35
34047: PUSH
34048: LD_INT 11
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 35
34057: PUSH
34058: LD_INT 30
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 91
34072: PUSH
34073: LD_VAR 0 1
34077: PUSH
34078: LD_INT 18
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: LIST
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: PPUSH
34091: CALL_OW 69
34095: NOT
34096: PUSH
34097: LD_INT 22
34099: PUSH
34100: LD_VAR 0 16
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: LD_INT 30
34114: PUSH
34115: LD_INT 32
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 30
34124: PUSH
34125: LD_INT 33
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 91
34139: PUSH
34140: LD_VAR 0 1
34144: PUSH
34145: LD_INT 12
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: LIST
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: PPUSH
34161: CALL_OW 69
34165: PUSH
34166: LD_INT 2
34168: GREATER
34169: AND
34170: IFFALSE 34193
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34172: LD_ADDR_VAR 0 18
34176: PUSH
34177: LD_INT 11
34179: PUSH
34180: LD_INT 30
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_VAR 0 12
34191: ARRAY
34192: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34193: LD_VAR 0 18
34197: NOT
34198: PUSH
34199: LD_INT 40
34201: PPUSH
34202: LD_VAR 0 16
34206: PPUSH
34207: CALL_OW 321
34211: PUSH
34212: LD_INT 2
34214: EQUAL
34215: AND
34216: PUSH
34217: LD_INT 7
34219: PUSH
34220: LD_VAR 0 5
34224: IN
34225: PUSH
34226: LD_INT 28
34228: PUSH
34229: LD_VAR 0 5
34233: IN
34234: OR
34235: PUSH
34236: LD_INT 45
34238: PUSH
34239: LD_VAR 0 5
34243: IN
34244: OR
34245: AND
34246: IFFALSE 34500
// begin hex := GetHexInfo ( x , y ) ;
34248: LD_ADDR_VAR 0 4
34252: PUSH
34253: LD_VAR 0 10
34257: PPUSH
34258: LD_VAR 0 11
34262: PPUSH
34263: CALL_OW 546
34267: ST_TO_ADDR
// if hex [ 1 ] then
34268: LD_VAR 0 4
34272: PUSH
34273: LD_INT 1
34275: ARRAY
34276: IFFALSE 34280
// exit ;
34278: GO 34683
// height := hex [ 2 ] ;
34280: LD_ADDR_VAR 0 15
34284: PUSH
34285: LD_VAR 0 4
34289: PUSH
34290: LD_INT 2
34292: ARRAY
34293: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34294: LD_ADDR_VAR 0 14
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 3
34307: PUSH
34308: LD_INT 5
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
// for i in tmp do
34317: LD_ADDR_VAR 0 8
34321: PUSH
34322: LD_VAR 0 14
34326: PUSH
34327: FOR_IN
34328: IFFALSE 34498
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34330: LD_ADDR_VAR 0 9
34334: PUSH
34335: LD_VAR 0 10
34339: PPUSH
34340: LD_VAR 0 8
34344: PPUSH
34345: LD_INT 5
34347: PPUSH
34348: CALL_OW 272
34352: PUSH
34353: LD_VAR 0 11
34357: PPUSH
34358: LD_VAR 0 8
34362: PPUSH
34363: LD_INT 5
34365: PPUSH
34366: CALL_OW 273
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34375: LD_VAR 0 9
34379: PUSH
34380: LD_INT 1
34382: ARRAY
34383: PPUSH
34384: LD_VAR 0 9
34388: PUSH
34389: LD_INT 2
34391: ARRAY
34392: PPUSH
34393: CALL_OW 488
34397: IFFALSE 34496
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34399: LD_ADDR_VAR 0 4
34403: PUSH
34404: LD_VAR 0 9
34408: PUSH
34409: LD_INT 1
34411: ARRAY
34412: PPUSH
34413: LD_VAR 0 9
34417: PUSH
34418: LD_INT 2
34420: ARRAY
34421: PPUSH
34422: CALL_OW 546
34426: ST_TO_ADDR
// if hex [ 1 ] then
34427: LD_VAR 0 4
34431: PUSH
34432: LD_INT 1
34434: ARRAY
34435: IFFALSE 34439
// continue ;
34437: GO 34327
// h := hex [ 2 ] ;
34439: LD_ADDR_VAR 0 13
34443: PUSH
34444: LD_VAR 0 4
34448: PUSH
34449: LD_INT 2
34451: ARRAY
34452: ST_TO_ADDR
// if h + 7 < height then
34453: LD_VAR 0 13
34457: PUSH
34458: LD_INT 7
34460: PLUS
34461: PUSH
34462: LD_VAR 0 15
34466: LESS
34467: IFFALSE 34496
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34469: LD_ADDR_VAR 0 18
34473: PUSH
34474: LD_INT 7
34476: PUSH
34477: LD_INT 28
34479: PUSH
34480: LD_INT 45
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: PUSH
34488: LD_VAR 0 12
34492: ARRAY
34493: ST_TO_ADDR
// break ;
34494: GO 34498
// end ; end ; end ;
34496: GO 34327
34498: POP
34499: POP
// end ; if not weapon then
34500: LD_VAR 0 18
34504: NOT
34505: IFFALSE 34565
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34507: LD_ADDR_VAR 0 5
34511: PUSH
34512: LD_VAR 0 5
34516: PUSH
34517: LD_INT 11
34519: PUSH
34520: LD_INT 30
34522: PUSH
34523: LD_INT 49
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: DIFF
34531: ST_TO_ADDR
// if not list then
34532: LD_VAR 0 5
34536: NOT
34537: IFFALSE 34541
// exit ;
34539: GO 34683
// weapon := list [ rand ( 1 , list ) ] ;
34541: LD_ADDR_VAR 0 18
34545: PUSH
34546: LD_VAR 0 5
34550: PUSH
34551: LD_INT 1
34553: PPUSH
34554: LD_VAR 0 5
34558: PPUSH
34559: CALL_OW 12
34563: ARRAY
34564: ST_TO_ADDR
// end ; if weapon then
34565: LD_VAR 0 18
34569: IFFALSE 34683
// begin tmp := CostOfWeapon ( weapon ) ;
34571: LD_ADDR_VAR 0 14
34575: PUSH
34576: LD_VAR 0 18
34580: PPUSH
34581: CALL_OW 451
34585: ST_TO_ADDR
// j := GetBase ( tower ) ;
34586: LD_ADDR_VAR 0 9
34590: PUSH
34591: LD_VAR 0 1
34595: PPUSH
34596: CALL_OW 274
34600: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34601: LD_VAR 0 9
34605: PPUSH
34606: LD_INT 1
34608: PPUSH
34609: CALL_OW 275
34613: PUSH
34614: LD_VAR 0 14
34618: PUSH
34619: LD_INT 1
34621: ARRAY
34622: GREATEREQUAL
34623: PUSH
34624: LD_VAR 0 9
34628: PPUSH
34629: LD_INT 2
34631: PPUSH
34632: CALL_OW 275
34636: PUSH
34637: LD_VAR 0 14
34641: PUSH
34642: LD_INT 2
34644: ARRAY
34645: GREATEREQUAL
34646: AND
34647: PUSH
34648: LD_VAR 0 9
34652: PPUSH
34653: LD_INT 3
34655: PPUSH
34656: CALL_OW 275
34660: PUSH
34661: LD_VAR 0 14
34665: PUSH
34666: LD_INT 3
34668: ARRAY
34669: GREATEREQUAL
34670: AND
34671: IFFALSE 34683
// result := weapon ;
34673: LD_ADDR_VAR 0 3
34677: PUSH
34678: LD_VAR 0 18
34682: ST_TO_ADDR
// end ; end ;
34683: LD_VAR 0 3
34687: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34688: LD_INT 0
34690: PPUSH
34691: PPUSH
// result := true ;
34692: LD_ADDR_VAR 0 3
34696: PUSH
34697: LD_INT 1
34699: ST_TO_ADDR
// if array1 = array2 then
34700: LD_VAR 0 1
34704: PUSH
34705: LD_VAR 0 2
34709: EQUAL
34710: IFFALSE 34770
// begin for i = 1 to array1 do
34712: LD_ADDR_VAR 0 4
34716: PUSH
34717: DOUBLE
34718: LD_INT 1
34720: DEC
34721: ST_TO_ADDR
34722: LD_VAR 0 1
34726: PUSH
34727: FOR_TO
34728: IFFALSE 34766
// if array1 [ i ] <> array2 [ i ] then
34730: LD_VAR 0 1
34734: PUSH
34735: LD_VAR 0 4
34739: ARRAY
34740: PUSH
34741: LD_VAR 0 2
34745: PUSH
34746: LD_VAR 0 4
34750: ARRAY
34751: NONEQUAL
34752: IFFALSE 34764
// begin result := false ;
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_INT 0
34761: ST_TO_ADDR
// break ;
34762: GO 34766
// end ;
34764: GO 34727
34766: POP
34767: POP
// end else
34768: GO 34778
// result := false ;
34770: LD_ADDR_VAR 0 3
34774: PUSH
34775: LD_INT 0
34777: ST_TO_ADDR
// end ;
34778: LD_VAR 0 3
34782: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34783: LD_INT 0
34785: PPUSH
34786: PPUSH
// if not array1 or not array2 then
34787: LD_VAR 0 1
34791: NOT
34792: PUSH
34793: LD_VAR 0 2
34797: NOT
34798: OR
34799: IFFALSE 34803
// exit ;
34801: GO 34867
// result := true ;
34803: LD_ADDR_VAR 0 3
34807: PUSH
34808: LD_INT 1
34810: ST_TO_ADDR
// for i = 1 to array1 do
34811: LD_ADDR_VAR 0 4
34815: PUSH
34816: DOUBLE
34817: LD_INT 1
34819: DEC
34820: ST_TO_ADDR
34821: LD_VAR 0 1
34825: PUSH
34826: FOR_TO
34827: IFFALSE 34865
// if array1 [ i ] <> array2 [ i ] then
34829: LD_VAR 0 1
34833: PUSH
34834: LD_VAR 0 4
34838: ARRAY
34839: PUSH
34840: LD_VAR 0 2
34844: PUSH
34845: LD_VAR 0 4
34849: ARRAY
34850: NONEQUAL
34851: IFFALSE 34863
// begin result := false ;
34853: LD_ADDR_VAR 0 3
34857: PUSH
34858: LD_INT 0
34860: ST_TO_ADDR
// break ;
34861: GO 34865
// end ;
34863: GO 34826
34865: POP
34866: POP
// end ;
34867: LD_VAR 0 3
34871: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34872: LD_INT 0
34874: PPUSH
34875: PPUSH
34876: PPUSH
// pom := GetBase ( fac ) ;
34877: LD_ADDR_VAR 0 5
34881: PUSH
34882: LD_VAR 0 1
34886: PPUSH
34887: CALL_OW 274
34891: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34892: LD_ADDR_VAR 0 4
34896: PUSH
34897: LD_VAR 0 2
34901: PUSH
34902: LD_INT 1
34904: ARRAY
34905: PPUSH
34906: LD_VAR 0 2
34910: PUSH
34911: LD_INT 2
34913: ARRAY
34914: PPUSH
34915: LD_VAR 0 2
34919: PUSH
34920: LD_INT 3
34922: ARRAY
34923: PPUSH
34924: LD_VAR 0 2
34928: PUSH
34929: LD_INT 4
34931: ARRAY
34932: PPUSH
34933: CALL_OW 449
34937: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34938: LD_ADDR_VAR 0 3
34942: PUSH
34943: LD_VAR 0 5
34947: PPUSH
34948: LD_INT 1
34950: PPUSH
34951: CALL_OW 275
34955: PUSH
34956: LD_VAR 0 4
34960: PUSH
34961: LD_INT 1
34963: ARRAY
34964: GREATEREQUAL
34965: PUSH
34966: LD_VAR 0 5
34970: PPUSH
34971: LD_INT 2
34973: PPUSH
34974: CALL_OW 275
34978: PUSH
34979: LD_VAR 0 4
34983: PUSH
34984: LD_INT 2
34986: ARRAY
34987: GREATEREQUAL
34988: AND
34989: PUSH
34990: LD_VAR 0 5
34994: PPUSH
34995: LD_INT 3
34997: PPUSH
34998: CALL_OW 275
35002: PUSH
35003: LD_VAR 0 4
35007: PUSH
35008: LD_INT 3
35010: ARRAY
35011: GREATEREQUAL
35012: AND
35013: ST_TO_ADDR
// end ;
35014: LD_VAR 0 3
35018: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35019: LD_INT 0
35021: PPUSH
35022: PPUSH
35023: PPUSH
35024: PPUSH
// pom := GetBase ( building ) ;
35025: LD_ADDR_VAR 0 3
35029: PUSH
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 274
35039: ST_TO_ADDR
// if not pom then
35040: LD_VAR 0 3
35044: NOT
35045: IFFALSE 35049
// exit ;
35047: GO 35219
// btype := GetBType ( building ) ;
35049: LD_ADDR_VAR 0 5
35053: PUSH
35054: LD_VAR 0 1
35058: PPUSH
35059: CALL_OW 266
35063: ST_TO_ADDR
// if btype = b_armoury then
35064: LD_VAR 0 5
35068: PUSH
35069: LD_INT 4
35071: EQUAL
35072: IFFALSE 35082
// btype := b_barracks ;
35074: LD_ADDR_VAR 0 5
35078: PUSH
35079: LD_INT 5
35081: ST_TO_ADDR
// if btype = b_depot then
35082: LD_VAR 0 5
35086: PUSH
35087: LD_INT 0
35089: EQUAL
35090: IFFALSE 35100
// btype := b_warehouse ;
35092: LD_ADDR_VAR 0 5
35096: PUSH
35097: LD_INT 1
35099: ST_TO_ADDR
// if btype = b_workshop then
35100: LD_VAR 0 5
35104: PUSH
35105: LD_INT 2
35107: EQUAL
35108: IFFALSE 35118
// btype := b_factory ;
35110: LD_ADDR_VAR 0 5
35114: PUSH
35115: LD_INT 3
35117: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35118: LD_ADDR_VAR 0 4
35122: PUSH
35123: LD_VAR 0 5
35127: PPUSH
35128: LD_VAR 0 1
35132: PPUSH
35133: CALL_OW 248
35137: PPUSH
35138: CALL_OW 450
35142: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35143: LD_ADDR_VAR 0 2
35147: PUSH
35148: LD_VAR 0 3
35152: PPUSH
35153: LD_INT 1
35155: PPUSH
35156: CALL_OW 275
35160: PUSH
35161: LD_VAR 0 4
35165: PUSH
35166: LD_INT 1
35168: ARRAY
35169: GREATEREQUAL
35170: PUSH
35171: LD_VAR 0 3
35175: PPUSH
35176: LD_INT 2
35178: PPUSH
35179: CALL_OW 275
35183: PUSH
35184: LD_VAR 0 4
35188: PUSH
35189: LD_INT 2
35191: ARRAY
35192: GREATEREQUAL
35193: AND
35194: PUSH
35195: LD_VAR 0 3
35199: PPUSH
35200: LD_INT 3
35202: PPUSH
35203: CALL_OW 275
35207: PUSH
35208: LD_VAR 0 4
35212: PUSH
35213: LD_INT 3
35215: ARRAY
35216: GREATEREQUAL
35217: AND
35218: ST_TO_ADDR
// end ;
35219: LD_VAR 0 2
35223: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35224: LD_INT 0
35226: PPUSH
35227: PPUSH
35228: PPUSH
// pom := GetBase ( building ) ;
35229: LD_ADDR_VAR 0 4
35233: PUSH
35234: LD_VAR 0 1
35238: PPUSH
35239: CALL_OW 274
35243: ST_TO_ADDR
// if not pom then
35244: LD_VAR 0 4
35248: NOT
35249: IFFALSE 35253
// exit ;
35251: GO 35354
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35253: LD_ADDR_VAR 0 5
35257: PUSH
35258: LD_VAR 0 2
35262: PPUSH
35263: LD_VAR 0 1
35267: PPUSH
35268: CALL_OW 248
35272: PPUSH
35273: CALL_OW 450
35277: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35278: LD_ADDR_VAR 0 3
35282: PUSH
35283: LD_VAR 0 4
35287: PPUSH
35288: LD_INT 1
35290: PPUSH
35291: CALL_OW 275
35295: PUSH
35296: LD_VAR 0 5
35300: PUSH
35301: LD_INT 1
35303: ARRAY
35304: GREATEREQUAL
35305: PUSH
35306: LD_VAR 0 4
35310: PPUSH
35311: LD_INT 2
35313: PPUSH
35314: CALL_OW 275
35318: PUSH
35319: LD_VAR 0 5
35323: PUSH
35324: LD_INT 2
35326: ARRAY
35327: GREATEREQUAL
35328: AND
35329: PUSH
35330: LD_VAR 0 4
35334: PPUSH
35335: LD_INT 3
35337: PPUSH
35338: CALL_OW 275
35342: PUSH
35343: LD_VAR 0 5
35347: PUSH
35348: LD_INT 3
35350: ARRAY
35351: GREATEREQUAL
35352: AND
35353: ST_TO_ADDR
// end ;
35354: LD_VAR 0 3
35358: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35359: LD_INT 0
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
// result := false ;
35372: LD_ADDR_VAR 0 8
35376: PUSH
35377: LD_INT 0
35379: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35380: LD_VAR 0 5
35384: NOT
35385: PUSH
35386: LD_VAR 0 1
35390: NOT
35391: OR
35392: PUSH
35393: LD_VAR 0 2
35397: NOT
35398: OR
35399: PUSH
35400: LD_VAR 0 3
35404: NOT
35405: OR
35406: IFFALSE 35410
// exit ;
35408: GO 36224
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35410: LD_ADDR_VAR 0 14
35414: PUSH
35415: LD_VAR 0 1
35419: PPUSH
35420: LD_VAR 0 2
35424: PPUSH
35425: LD_VAR 0 3
35429: PPUSH
35430: LD_VAR 0 4
35434: PPUSH
35435: LD_VAR 0 5
35439: PUSH
35440: LD_INT 1
35442: ARRAY
35443: PPUSH
35444: CALL_OW 248
35448: PPUSH
35449: LD_INT 0
35451: PPUSH
35452: CALL 37461 0 6
35456: ST_TO_ADDR
// if not hexes then
35457: LD_VAR 0 14
35461: NOT
35462: IFFALSE 35466
// exit ;
35464: GO 36224
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35466: LD_ADDR_VAR 0 17
35470: PUSH
35471: LD_VAR 0 5
35475: PPUSH
35476: LD_INT 22
35478: PUSH
35479: LD_VAR 0 13
35483: PPUSH
35484: CALL_OW 255
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: LD_INT 30
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 30
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PPUSH
35525: CALL_OW 72
35529: ST_TO_ADDR
// for i = 1 to hexes do
35530: LD_ADDR_VAR 0 9
35534: PUSH
35535: DOUBLE
35536: LD_INT 1
35538: DEC
35539: ST_TO_ADDR
35540: LD_VAR 0 14
35544: PUSH
35545: FOR_TO
35546: IFFALSE 36222
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35548: LD_ADDR_VAR 0 13
35552: PUSH
35553: LD_VAR 0 14
35557: PUSH
35558: LD_VAR 0 9
35562: ARRAY
35563: PUSH
35564: LD_INT 1
35566: ARRAY
35567: PPUSH
35568: LD_VAR 0 14
35572: PUSH
35573: LD_VAR 0 9
35577: ARRAY
35578: PUSH
35579: LD_INT 2
35581: ARRAY
35582: PPUSH
35583: CALL_OW 428
35587: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35588: LD_VAR 0 14
35592: PUSH
35593: LD_VAR 0 9
35597: ARRAY
35598: PUSH
35599: LD_INT 1
35601: ARRAY
35602: PPUSH
35603: LD_VAR 0 14
35607: PUSH
35608: LD_VAR 0 9
35612: ARRAY
35613: PUSH
35614: LD_INT 2
35616: ARRAY
35617: PPUSH
35618: CALL_OW 351
35622: PUSH
35623: LD_VAR 0 14
35627: PUSH
35628: LD_VAR 0 9
35632: ARRAY
35633: PUSH
35634: LD_INT 1
35636: ARRAY
35637: PPUSH
35638: LD_VAR 0 14
35642: PUSH
35643: LD_VAR 0 9
35647: ARRAY
35648: PUSH
35649: LD_INT 2
35651: ARRAY
35652: PPUSH
35653: CALL_OW 488
35657: NOT
35658: OR
35659: PUSH
35660: LD_VAR 0 13
35664: PPUSH
35665: CALL_OW 247
35669: PUSH
35670: LD_INT 3
35672: EQUAL
35673: OR
35674: IFFALSE 35680
// exit ;
35676: POP
35677: POP
35678: GO 36224
// if not tmp then
35680: LD_VAR 0 13
35684: NOT
35685: IFFALSE 35689
// continue ;
35687: GO 35545
// result := true ;
35689: LD_ADDR_VAR 0 8
35693: PUSH
35694: LD_INT 1
35696: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35697: LD_VAR 0 6
35701: PUSH
35702: LD_VAR 0 13
35706: PPUSH
35707: CALL_OW 247
35711: PUSH
35712: LD_INT 2
35714: EQUAL
35715: AND
35716: PUSH
35717: LD_VAR 0 13
35721: PPUSH
35722: CALL_OW 263
35726: PUSH
35727: LD_INT 1
35729: EQUAL
35730: AND
35731: IFFALSE 35895
// begin if IsDrivenBy ( tmp ) then
35733: LD_VAR 0 13
35737: PPUSH
35738: CALL_OW 311
35742: IFFALSE 35746
// continue ;
35744: GO 35545
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35746: LD_VAR 0 6
35750: PPUSH
35751: LD_INT 3
35753: PUSH
35754: LD_INT 60
35756: PUSH
35757: EMPTY
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 3
35766: PUSH
35767: LD_INT 55
35769: PUSH
35770: EMPTY
35771: LIST
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PPUSH
35781: CALL_OW 72
35785: IFFALSE 35893
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35787: LD_ADDR_VAR 0 18
35791: PUSH
35792: LD_VAR 0 6
35796: PPUSH
35797: LD_INT 3
35799: PUSH
35800: LD_INT 60
35802: PUSH
35803: EMPTY
35804: LIST
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 3
35812: PUSH
35813: LD_INT 55
35815: PUSH
35816: EMPTY
35817: LIST
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PPUSH
35827: CALL_OW 72
35831: PUSH
35832: LD_INT 1
35834: ARRAY
35835: ST_TO_ADDR
// if IsInUnit ( driver ) then
35836: LD_VAR 0 18
35840: PPUSH
35841: CALL_OW 310
35845: IFFALSE 35856
// ComExit ( driver ) ;
35847: LD_VAR 0 18
35851: PPUSH
35852: CALL 60645 0 1
// AddComEnterUnit ( driver , tmp ) ;
35856: LD_VAR 0 18
35860: PPUSH
35861: LD_VAR 0 13
35865: PPUSH
35866: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35870: LD_VAR 0 18
35874: PPUSH
35875: LD_VAR 0 7
35879: PPUSH
35880: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35884: LD_VAR 0 18
35888: PPUSH
35889: CALL_OW 181
// end ; continue ;
35893: GO 35545
// end ; if not cleaners or not tmp in cleaners then
35895: LD_VAR 0 6
35899: NOT
35900: PUSH
35901: LD_VAR 0 13
35905: PUSH
35906: LD_VAR 0 6
35910: IN
35911: NOT
35912: OR
35913: IFFALSE 36220
// begin if dep then
35915: LD_VAR 0 17
35919: IFFALSE 36055
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35921: LD_ADDR_VAR 0 16
35925: PUSH
35926: LD_VAR 0 17
35930: PUSH
35931: LD_INT 1
35933: ARRAY
35934: PPUSH
35935: CALL_OW 250
35939: PPUSH
35940: LD_VAR 0 17
35944: PUSH
35945: LD_INT 1
35947: ARRAY
35948: PPUSH
35949: CALL_OW 254
35953: PPUSH
35954: LD_INT 5
35956: PPUSH
35957: CALL_OW 272
35961: PUSH
35962: LD_VAR 0 17
35966: PUSH
35967: LD_INT 1
35969: ARRAY
35970: PPUSH
35971: CALL_OW 251
35975: PPUSH
35976: LD_VAR 0 17
35980: PUSH
35981: LD_INT 1
35983: ARRAY
35984: PPUSH
35985: CALL_OW 254
35989: PPUSH
35990: LD_INT 5
35992: PPUSH
35993: CALL_OW 273
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36002: LD_VAR 0 16
36006: PUSH
36007: LD_INT 1
36009: ARRAY
36010: PPUSH
36011: LD_VAR 0 16
36015: PUSH
36016: LD_INT 2
36018: ARRAY
36019: PPUSH
36020: CALL_OW 488
36024: IFFALSE 36055
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36026: LD_VAR 0 13
36030: PPUSH
36031: LD_VAR 0 16
36035: PUSH
36036: LD_INT 1
36038: ARRAY
36039: PPUSH
36040: LD_VAR 0 16
36044: PUSH
36045: LD_INT 2
36047: ARRAY
36048: PPUSH
36049: CALL_OW 111
// continue ;
36053: GO 35545
// end ; end ; r := GetDir ( tmp ) ;
36055: LD_ADDR_VAR 0 15
36059: PUSH
36060: LD_VAR 0 13
36064: PPUSH
36065: CALL_OW 254
36069: ST_TO_ADDR
// if r = 5 then
36070: LD_VAR 0 15
36074: PUSH
36075: LD_INT 5
36077: EQUAL
36078: IFFALSE 36088
// r := 0 ;
36080: LD_ADDR_VAR 0 15
36084: PUSH
36085: LD_INT 0
36087: ST_TO_ADDR
// for j = r to 5 do
36088: LD_ADDR_VAR 0 10
36092: PUSH
36093: DOUBLE
36094: LD_VAR 0 15
36098: DEC
36099: ST_TO_ADDR
36100: LD_INT 5
36102: PUSH
36103: FOR_TO
36104: IFFALSE 36218
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36106: LD_ADDR_VAR 0 11
36110: PUSH
36111: LD_VAR 0 13
36115: PPUSH
36116: CALL_OW 250
36120: PPUSH
36121: LD_VAR 0 10
36125: PPUSH
36126: LD_INT 2
36128: PPUSH
36129: CALL_OW 272
36133: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36134: LD_ADDR_VAR 0 12
36138: PUSH
36139: LD_VAR 0 13
36143: PPUSH
36144: CALL_OW 251
36148: PPUSH
36149: LD_VAR 0 10
36153: PPUSH
36154: LD_INT 2
36156: PPUSH
36157: CALL_OW 273
36161: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36162: LD_VAR 0 11
36166: PPUSH
36167: LD_VAR 0 12
36171: PPUSH
36172: CALL_OW 488
36176: PUSH
36177: LD_VAR 0 11
36181: PPUSH
36182: LD_VAR 0 12
36186: PPUSH
36187: CALL_OW 428
36191: NOT
36192: AND
36193: IFFALSE 36216
// begin ComMoveXY ( tmp , _x , _y ) ;
36195: LD_VAR 0 13
36199: PPUSH
36200: LD_VAR 0 11
36204: PPUSH
36205: LD_VAR 0 12
36209: PPUSH
36210: CALL_OW 111
// break ;
36214: GO 36218
// end ; end ;
36216: GO 36103
36218: POP
36219: POP
// end ; end ;
36220: GO 35545
36222: POP
36223: POP
// end ;
36224: LD_VAR 0 8
36228: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36229: LD_INT 0
36231: PPUSH
// result := true ;
36232: LD_ADDR_VAR 0 3
36236: PUSH
36237: LD_INT 1
36239: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36240: LD_VAR 0 2
36244: PUSH
36245: LD_INT 24
36247: DOUBLE
36248: EQUAL
36249: IFTRUE 36259
36251: LD_INT 33
36253: DOUBLE
36254: EQUAL
36255: IFTRUE 36259
36257: GO 36284
36259: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36260: LD_ADDR_VAR 0 3
36264: PUSH
36265: LD_INT 32
36267: PPUSH
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 321
36277: PUSH
36278: LD_INT 2
36280: EQUAL
36281: ST_TO_ADDR
36282: GO 36604
36284: LD_INT 20
36286: DOUBLE
36287: EQUAL
36288: IFTRUE 36292
36290: GO 36317
36292: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36293: LD_ADDR_VAR 0 3
36297: PUSH
36298: LD_INT 6
36300: PPUSH
36301: LD_VAR 0 1
36305: PPUSH
36306: CALL_OW 321
36310: PUSH
36311: LD_INT 2
36313: EQUAL
36314: ST_TO_ADDR
36315: GO 36604
36317: LD_INT 22
36319: DOUBLE
36320: EQUAL
36321: IFTRUE 36331
36323: LD_INT 36
36325: DOUBLE
36326: EQUAL
36327: IFTRUE 36331
36329: GO 36356
36331: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36332: LD_ADDR_VAR 0 3
36336: PUSH
36337: LD_INT 15
36339: PPUSH
36340: LD_VAR 0 1
36344: PPUSH
36345: CALL_OW 321
36349: PUSH
36350: LD_INT 2
36352: EQUAL
36353: ST_TO_ADDR
36354: GO 36604
36356: LD_INT 30
36358: DOUBLE
36359: EQUAL
36360: IFTRUE 36364
36362: GO 36389
36364: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36365: LD_ADDR_VAR 0 3
36369: PUSH
36370: LD_INT 20
36372: PPUSH
36373: LD_VAR 0 1
36377: PPUSH
36378: CALL_OW 321
36382: PUSH
36383: LD_INT 2
36385: EQUAL
36386: ST_TO_ADDR
36387: GO 36604
36389: LD_INT 28
36391: DOUBLE
36392: EQUAL
36393: IFTRUE 36403
36395: LD_INT 21
36397: DOUBLE
36398: EQUAL
36399: IFTRUE 36403
36401: GO 36428
36403: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36404: LD_ADDR_VAR 0 3
36408: PUSH
36409: LD_INT 21
36411: PPUSH
36412: LD_VAR 0 1
36416: PPUSH
36417: CALL_OW 321
36421: PUSH
36422: LD_INT 2
36424: EQUAL
36425: ST_TO_ADDR
36426: GO 36604
36428: LD_INT 16
36430: DOUBLE
36431: EQUAL
36432: IFTRUE 36436
36434: GO 36463
36436: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36437: LD_ADDR_VAR 0 3
36441: PUSH
36442: LD_EXP 69
36446: PPUSH
36447: LD_VAR 0 1
36451: PPUSH
36452: CALL_OW 321
36456: PUSH
36457: LD_INT 2
36459: EQUAL
36460: ST_TO_ADDR
36461: GO 36604
36463: LD_INT 19
36465: DOUBLE
36466: EQUAL
36467: IFTRUE 36477
36469: LD_INT 23
36471: DOUBLE
36472: EQUAL
36473: IFTRUE 36477
36475: GO 36504
36477: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36478: LD_ADDR_VAR 0 3
36482: PUSH
36483: LD_EXP 68
36487: PPUSH
36488: LD_VAR 0 1
36492: PPUSH
36493: CALL_OW 321
36497: PUSH
36498: LD_INT 2
36500: EQUAL
36501: ST_TO_ADDR
36502: GO 36604
36504: LD_INT 17
36506: DOUBLE
36507: EQUAL
36508: IFTRUE 36512
36510: GO 36537
36512: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36513: LD_ADDR_VAR 0 3
36517: PUSH
36518: LD_INT 39
36520: PPUSH
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL_OW 321
36530: PUSH
36531: LD_INT 2
36533: EQUAL
36534: ST_TO_ADDR
36535: GO 36604
36537: LD_INT 18
36539: DOUBLE
36540: EQUAL
36541: IFTRUE 36545
36543: GO 36570
36545: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36546: LD_ADDR_VAR 0 3
36550: PUSH
36551: LD_INT 40
36553: PPUSH
36554: LD_VAR 0 1
36558: PPUSH
36559: CALL_OW 321
36563: PUSH
36564: LD_INT 2
36566: EQUAL
36567: ST_TO_ADDR
36568: GO 36604
36570: LD_INT 27
36572: DOUBLE
36573: EQUAL
36574: IFTRUE 36578
36576: GO 36603
36578: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36579: LD_ADDR_VAR 0 3
36583: PUSH
36584: LD_INT 35
36586: PPUSH
36587: LD_VAR 0 1
36591: PPUSH
36592: CALL_OW 321
36596: PUSH
36597: LD_INT 2
36599: EQUAL
36600: ST_TO_ADDR
36601: GO 36604
36603: POP
// end ;
36604: LD_VAR 0 3
36608: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36609: LD_INT 0
36611: PPUSH
36612: PPUSH
36613: PPUSH
36614: PPUSH
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
36620: PPUSH
36621: PPUSH
// result := false ;
36622: LD_ADDR_VAR 0 6
36626: PUSH
36627: LD_INT 0
36629: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36630: LD_VAR 0 1
36634: NOT
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 266
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: IN
36656: NOT
36657: OR
36658: PUSH
36659: LD_VAR 0 2
36663: NOT
36664: OR
36665: PUSH
36666: LD_VAR 0 5
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: LD_INT 2
36679: PUSH
36680: LD_INT 3
36682: PUSH
36683: LD_INT 4
36685: PUSH
36686: LD_INT 5
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: IN
36697: NOT
36698: OR
36699: PUSH
36700: LD_VAR 0 3
36704: PPUSH
36705: LD_VAR 0 4
36709: PPUSH
36710: CALL_OW 488
36714: NOT
36715: OR
36716: IFFALSE 36720
// exit ;
36718: GO 37456
// side := GetSide ( depot ) ;
36720: LD_ADDR_VAR 0 9
36724: PUSH
36725: LD_VAR 0 1
36729: PPUSH
36730: CALL_OW 255
36734: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36735: LD_VAR 0 9
36739: PPUSH
36740: LD_VAR 0 2
36744: PPUSH
36745: CALL 36229 0 2
36749: NOT
36750: IFFALSE 36754
// exit ;
36752: GO 37456
// pom := GetBase ( depot ) ;
36754: LD_ADDR_VAR 0 10
36758: PUSH
36759: LD_VAR 0 1
36763: PPUSH
36764: CALL_OW 274
36768: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36769: LD_ADDR_VAR 0 11
36773: PUSH
36774: LD_VAR 0 2
36778: PPUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 248
36788: PPUSH
36789: CALL_OW 450
36793: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36794: LD_VAR 0 10
36798: PPUSH
36799: LD_INT 1
36801: PPUSH
36802: CALL_OW 275
36806: PUSH
36807: LD_VAR 0 11
36811: PUSH
36812: LD_INT 1
36814: ARRAY
36815: GREATEREQUAL
36816: PUSH
36817: LD_VAR 0 10
36821: PPUSH
36822: LD_INT 2
36824: PPUSH
36825: CALL_OW 275
36829: PUSH
36830: LD_VAR 0 11
36834: PUSH
36835: LD_INT 2
36837: ARRAY
36838: GREATEREQUAL
36839: AND
36840: PUSH
36841: LD_VAR 0 10
36845: PPUSH
36846: LD_INT 3
36848: PPUSH
36849: CALL_OW 275
36853: PUSH
36854: LD_VAR 0 11
36858: PUSH
36859: LD_INT 3
36861: ARRAY
36862: GREATEREQUAL
36863: AND
36864: NOT
36865: IFFALSE 36869
// exit ;
36867: GO 37456
// if GetBType ( depot ) = b_depot then
36869: LD_VAR 0 1
36873: PPUSH
36874: CALL_OW 266
36878: PUSH
36879: LD_INT 0
36881: EQUAL
36882: IFFALSE 36894
// dist := 28 else
36884: LD_ADDR_VAR 0 14
36888: PUSH
36889: LD_INT 28
36891: ST_TO_ADDR
36892: GO 36902
// dist := 36 ;
36894: LD_ADDR_VAR 0 14
36898: PUSH
36899: LD_INT 36
36901: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36902: LD_VAR 0 1
36906: PPUSH
36907: LD_VAR 0 3
36911: PPUSH
36912: LD_VAR 0 4
36916: PPUSH
36917: CALL_OW 297
36921: PUSH
36922: LD_VAR 0 14
36926: GREATER
36927: IFFALSE 36931
// exit ;
36929: GO 37456
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36931: LD_ADDR_VAR 0 12
36935: PUSH
36936: LD_VAR 0 2
36940: PPUSH
36941: LD_VAR 0 3
36945: PPUSH
36946: LD_VAR 0 4
36950: PPUSH
36951: LD_VAR 0 5
36955: PPUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 248
36965: PPUSH
36966: LD_INT 0
36968: PPUSH
36969: CALL 37461 0 6
36973: ST_TO_ADDR
// if not hexes then
36974: LD_VAR 0 12
36978: NOT
36979: IFFALSE 36983
// exit ;
36981: GO 37456
// hex := GetHexInfo ( x , y ) ;
36983: LD_ADDR_VAR 0 15
36987: PUSH
36988: LD_VAR 0 3
36992: PPUSH
36993: LD_VAR 0 4
36997: PPUSH
36998: CALL_OW 546
37002: ST_TO_ADDR
// if hex [ 1 ] then
37003: LD_VAR 0 15
37007: PUSH
37008: LD_INT 1
37010: ARRAY
37011: IFFALSE 37015
// exit ;
37013: GO 37456
// height := hex [ 2 ] ;
37015: LD_ADDR_VAR 0 13
37019: PUSH
37020: LD_VAR 0 15
37024: PUSH
37025: LD_INT 2
37027: ARRAY
37028: ST_TO_ADDR
// for i = 1 to hexes do
37029: LD_ADDR_VAR 0 7
37033: PUSH
37034: DOUBLE
37035: LD_INT 1
37037: DEC
37038: ST_TO_ADDR
37039: LD_VAR 0 12
37043: PUSH
37044: FOR_TO
37045: IFFALSE 37375
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37047: LD_VAR 0 12
37051: PUSH
37052: LD_VAR 0 7
37056: ARRAY
37057: PUSH
37058: LD_INT 1
37060: ARRAY
37061: PPUSH
37062: LD_VAR 0 12
37066: PUSH
37067: LD_VAR 0 7
37071: ARRAY
37072: PUSH
37073: LD_INT 2
37075: ARRAY
37076: PPUSH
37077: CALL_OW 488
37081: NOT
37082: PUSH
37083: LD_VAR 0 12
37087: PUSH
37088: LD_VAR 0 7
37092: ARRAY
37093: PUSH
37094: LD_INT 1
37096: ARRAY
37097: PPUSH
37098: LD_VAR 0 12
37102: PUSH
37103: LD_VAR 0 7
37107: ARRAY
37108: PUSH
37109: LD_INT 2
37111: ARRAY
37112: PPUSH
37113: CALL_OW 428
37117: PUSH
37118: LD_INT 0
37120: GREATER
37121: OR
37122: PUSH
37123: LD_VAR 0 12
37127: PUSH
37128: LD_VAR 0 7
37132: ARRAY
37133: PUSH
37134: LD_INT 1
37136: ARRAY
37137: PPUSH
37138: LD_VAR 0 12
37142: PUSH
37143: LD_VAR 0 7
37147: ARRAY
37148: PUSH
37149: LD_INT 2
37151: ARRAY
37152: PPUSH
37153: CALL_OW 351
37157: OR
37158: IFFALSE 37164
// exit ;
37160: POP
37161: POP
37162: GO 37456
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37164: LD_ADDR_VAR 0 8
37168: PUSH
37169: LD_VAR 0 12
37173: PUSH
37174: LD_VAR 0 7
37178: ARRAY
37179: PUSH
37180: LD_INT 1
37182: ARRAY
37183: PPUSH
37184: LD_VAR 0 12
37188: PUSH
37189: LD_VAR 0 7
37193: ARRAY
37194: PUSH
37195: LD_INT 2
37197: ARRAY
37198: PPUSH
37199: CALL_OW 546
37203: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37204: LD_VAR 0 8
37208: PUSH
37209: LD_INT 1
37211: ARRAY
37212: PUSH
37213: LD_VAR 0 8
37217: PUSH
37218: LD_INT 2
37220: ARRAY
37221: PUSH
37222: LD_VAR 0 13
37226: PUSH
37227: LD_INT 2
37229: PLUS
37230: GREATER
37231: OR
37232: PUSH
37233: LD_VAR 0 8
37237: PUSH
37238: LD_INT 2
37240: ARRAY
37241: PUSH
37242: LD_VAR 0 13
37246: PUSH
37247: LD_INT 2
37249: MINUS
37250: LESS
37251: OR
37252: PUSH
37253: LD_VAR 0 8
37257: PUSH
37258: LD_INT 3
37260: ARRAY
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: LD_INT 8
37267: PUSH
37268: LD_INT 9
37270: PUSH
37271: LD_INT 10
37273: PUSH
37274: LD_INT 11
37276: PUSH
37277: LD_INT 12
37279: PUSH
37280: LD_INT 13
37282: PUSH
37283: LD_INT 16
37285: PUSH
37286: LD_INT 17
37288: PUSH
37289: LD_INT 18
37291: PUSH
37292: LD_INT 19
37294: PUSH
37295: LD_INT 20
37297: PUSH
37298: LD_INT 21
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: IN
37316: NOT
37317: OR
37318: PUSH
37319: LD_VAR 0 8
37323: PUSH
37324: LD_INT 5
37326: ARRAY
37327: NOT
37328: OR
37329: PUSH
37330: LD_VAR 0 8
37334: PUSH
37335: LD_INT 6
37337: ARRAY
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 7
37347: PUSH
37348: LD_INT 9
37350: PUSH
37351: LD_INT 10
37353: PUSH
37354: LD_INT 11
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: IN
37365: NOT
37366: OR
37367: IFFALSE 37373
// exit ;
37369: POP
37370: POP
37371: GO 37456
// end ;
37373: GO 37044
37375: POP
37376: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37377: LD_VAR 0 9
37381: PPUSH
37382: LD_VAR 0 3
37386: PPUSH
37387: LD_VAR 0 4
37391: PPUSH
37392: LD_INT 20
37394: PPUSH
37395: CALL 29401 0 4
37399: PUSH
37400: LD_INT 4
37402: ARRAY
37403: IFFALSE 37407
// exit ;
37405: GO 37456
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37407: LD_VAR 0 2
37411: PUSH
37412: LD_INT 29
37414: PUSH
37415: LD_INT 30
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: IN
37422: PUSH
37423: LD_VAR 0 3
37427: PPUSH
37428: LD_VAR 0 4
37432: PPUSH
37433: LD_VAR 0 9
37437: PPUSH
37438: CALL_OW 440
37442: NOT
37443: AND
37444: IFFALSE 37448
// exit ;
37446: GO 37456
// result := true ;
37448: LD_ADDR_VAR 0 6
37452: PUSH
37453: LD_INT 1
37455: ST_TO_ADDR
// end ;
37456: LD_VAR 0 6
37460: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37461: LD_INT 0
37463: PPUSH
37464: PPUSH
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
37484: PPUSH
37485: PPUSH
37486: PPUSH
37487: PPUSH
37488: PPUSH
37489: PPUSH
37490: PPUSH
37491: PPUSH
37492: PPUSH
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
37512: PPUSH
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
// result = [ ] ;
37521: LD_ADDR_VAR 0 7
37525: PUSH
37526: EMPTY
37527: ST_TO_ADDR
// temp_list = [ ] ;
37528: LD_ADDR_VAR 0 9
37532: PUSH
37533: EMPTY
37534: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37535: LD_VAR 0 4
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: LD_INT 2
37548: PUSH
37549: LD_INT 3
37551: PUSH
37552: LD_INT 4
37554: PUSH
37555: LD_INT 5
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: IN
37566: NOT
37567: PUSH
37568: LD_VAR 0 1
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: IN
37583: PUSH
37584: LD_VAR 0 5
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: LD_INT 3
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: IN
37603: NOT
37604: AND
37605: OR
37606: IFFALSE 37610
// exit ;
37608: GO 56001
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37610: LD_VAR 0 1
37614: PUSH
37615: LD_INT 6
37617: PUSH
37618: LD_INT 7
37620: PUSH
37621: LD_INT 8
37623: PUSH
37624: LD_INT 13
37626: PUSH
37627: LD_INT 12
37629: PUSH
37630: LD_INT 15
37632: PUSH
37633: LD_INT 11
37635: PUSH
37636: LD_INT 14
37638: PUSH
37639: LD_INT 10
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: IN
37653: IFFALSE 37663
// btype = b_lab ;
37655: LD_ADDR_VAR 0 1
37659: PUSH
37660: LD_INT 6
37662: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37663: LD_VAR 0 6
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: IN
37682: NOT
37683: PUSH
37684: LD_VAR 0 1
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: LD_INT 2
37697: PUSH
37698: LD_INT 3
37700: PUSH
37701: LD_INT 6
37703: PUSH
37704: LD_INT 36
37706: PUSH
37707: LD_INT 4
37709: PUSH
37710: LD_INT 5
37712: PUSH
37713: LD_INT 31
37715: PUSH
37716: LD_INT 32
37718: PUSH
37719: LD_INT 33
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: IN
37735: NOT
37736: PUSH
37737: LD_VAR 0 6
37741: PUSH
37742: LD_INT 1
37744: EQUAL
37745: AND
37746: OR
37747: PUSH
37748: LD_VAR 0 1
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: LD_INT 3
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: IN
37763: NOT
37764: PUSH
37765: LD_VAR 0 6
37769: PUSH
37770: LD_INT 2
37772: EQUAL
37773: AND
37774: OR
37775: IFFALSE 37785
// mode = 0 ;
37777: LD_ADDR_VAR 0 6
37781: PUSH
37782: LD_INT 0
37784: ST_TO_ADDR
// case mode of 0 :
37785: LD_VAR 0 6
37789: PUSH
37790: LD_INT 0
37792: DOUBLE
37793: EQUAL
37794: IFTRUE 37798
37796: GO 49251
37798: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37799: LD_ADDR_VAR 0 11
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: LD_INT 1
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: LD_INT 1
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: LD_INT 2
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: LD_INT 1
37906: NEG
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 2
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 3
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: LD_INT 3
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37992: LD_ADDR_VAR 0 12
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: NEG
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 3
38149: NEG
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 3
38160: NEG
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38188: LD_ADDR_VAR 0 13
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: NEG
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: LD_INT 2
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: NEG
38324: PUSH
38325: LD_INT 2
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: NEG
38336: PUSH
38337: LD_INT 3
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 3
38347: NEG
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 3
38359: NEG
38360: PUSH
38361: LD_INT 3
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38387: LD_ADDR_VAR 0 14
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: LD_INT 2
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 2
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 3
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 3
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38583: LD_ADDR_VAR 0 15
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 2
38717: NEG
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 3
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 3
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38776: LD_ADDR_VAR 0 16
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: LD_INT 2
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 2
38899: NEG
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 2
38911: NEG
38912: PUSH
38913: LD_INT 2
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 3
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: LD_INT 3
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38969: LD_ADDR_VAR 0 17
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 2
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39199: LD_ADDR_VAR 0 18
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: NEG
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: LD_INT 2
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: LD_INT 2
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: LD_INT 2
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: LD_INT 2
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39429: LD_ADDR_VAR 0 19
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 2
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 2
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 2
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: LD_INT 2
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39659: LD_ADDR_VAR 0 20
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: LD_INT 1
39679: NEG
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: LD_INT 2
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: NEG
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: LD_INT 2
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39889: LD_ADDR_VAR 0 21
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 2
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: LD_INT 2
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 2
40076: NEG
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40119: LD_ADDR_VAR 0 22
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 1
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 2
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40349: LD_ADDR_VAR 0 23
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 2
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: PUSH
40485: LD_INT 2
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: LD_INT 3
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40629: LD_ADDR_VAR 0 24
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 3
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 3
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40905: LD_ADDR_VAR 0 25
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: LD_INT 2
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 3
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 3
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41179: LD_ADDR_VAR 0 26
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 2
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: LD_INT 3
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 3
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41455: LD_ADDR_VAR 0 27
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: LD_INT 2
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 2
41631: NEG
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 2
41642: NEG
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 3
41688: NEG
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41735: LD_ADDR_VAR 0 28
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: LD_INT 2
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: LD_INT 3
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 3
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 3
41970: NEG
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 3
41982: NEG
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42017: LD_ADDR_VAR 0 29
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 2
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: NEG
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: LD_INT 3
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 3
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 3
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 3
42261: NEG
42262: PUSH
42263: LD_INT 2
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42296: LD_ADDR_VAR 0 30
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: LD_INT 3
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: LD_INT 2
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: LD_INT 2
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: LD_INT 3
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 3
42539: NEG
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42574: LD_ADDR_VAR 0 31
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 2
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: LD_INT 3
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 3
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42852: LD_ADDR_VAR 0 32
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: LD_INT 3
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 3
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43130: LD_ADDR_VAR 0 33
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: NEG
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: LD_INT 3
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 3
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 3
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 3
43374: NEG
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43409: LD_ADDR_VAR 0 34
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 2
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 3
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: LD_INT 3
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 3
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43689: LD_ADDR_VAR 0 35
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43801: LD_ADDR_VAR 0 36
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 2
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43913: LD_ADDR_VAR 0 37
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44025: LD_ADDR_VAR 0 38
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44137: LD_ADDR_VAR 0 39
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44249: LD_ADDR_VAR 0 40
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44361: LD_ADDR_VAR 0 41
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: LD_INT 2
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: LD_INT 3
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 3
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 3
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 3
44604: PUSH
44605: LD_INT 3
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 3
44635: NEG
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 3
44646: NEG
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: NEG
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 3
44670: NEG
44671: PUSH
44672: LD_INT 3
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44711: LD_ADDR_VAR 0 42
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 2
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 2
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: LD_INT 3
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 3
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 3
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 3
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: LD_INT 3
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: LD_INT 3
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 3
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 3
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 3
45008: NEG
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 3
45020: NEG
45021: PUSH
45022: LD_INT 3
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45061: LD_ADDR_VAR 0 43
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 2
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 3
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 3
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 3
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 3
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 3
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 3
45357: NEG
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 3
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45409: LD_ADDR_VAR 0 44
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 2
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 3
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 3
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 3
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 3
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 3
45652: PUSH
45653: LD_INT 3
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 3
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: NEG
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 3
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: NEG
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: LD_INT 3
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45759: LD_ADDR_VAR 0 45
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: NEG
45950: PUSH
45951: LD_INT 3
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 3
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 3
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 3
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: LD_INT 3
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 3
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 3
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: NEG
46069: PUSH
46070: LD_INT 3
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46109: LD_ADDR_VAR 0 46
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 3
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 3
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 3
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 3
46405: NEG
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46457: LD_ADDR_VAR 0 47
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46608: LD_ADDR_VAR 0 48
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46755: LD_ADDR_VAR 0 49
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46899: LD_ADDR_VAR 0 50
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47043: LD_ADDR_VAR 0 51
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47190: LD_ADDR_VAR 0 52
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: NEG
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47341: LD_ADDR_VAR 0 53
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: NEG
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47571: LD_ADDR_VAR 0 54
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47801: LD_ADDR_VAR 0 55
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: NEG
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48031: LD_ADDR_VAR 0 56
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48261: LD_ADDR_VAR 0 57
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48491: LD_ADDR_VAR 0 58
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48721: LD_ADDR_VAR 0 59
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48809: LD_ADDR_VAR 0 60
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48897: LD_ADDR_VAR 0 61
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48985: LD_ADDR_VAR 0 62
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49073: LD_ADDR_VAR 0 63
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49161: LD_ADDR_VAR 0 64
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: ST_TO_ADDR
// end ; 1 :
49249: GO 55146
49251: LD_INT 1
49253: DOUBLE
49254: EQUAL
49255: IFTRUE 49259
49257: GO 51882
49259: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49260: LD_ADDR_VAR 0 11
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 3
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49304: LD_ADDR_VAR 0 12
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 3
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 3
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: LIST
49344: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49345: LD_ADDR_VAR 0 13
49349: PUSH
49350: LD_INT 3
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: LD_INT 3
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 3
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49385: LD_ADDR_VAR 0 14
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 3
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49426: LD_ADDR_VAR 0 15
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 3
49444: NEG
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 3
49455: NEG
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: LIST
49469: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49470: LD_ADDR_VAR 0 16
49474: PUSH
49475: LD_INT 2
49477: NEG
49478: PUSH
49479: LD_INT 3
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: NEG
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: LIST
49515: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49516: LD_ADDR_VAR 0 17
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49560: LD_ADDR_VAR 0 18
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 3
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 3
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: LIST
49600: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49601: LD_ADDR_VAR 0 19
49605: PUSH
49606: LD_INT 3
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: LD_INT 3
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_INT 3
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: LIST
49640: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49641: LD_ADDR_VAR 0 20
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 3
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: LIST
49681: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49682: LD_ADDR_VAR 0 21
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: NEG
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 3
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: LIST
49725: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49726: LD_ADDR_VAR 0 22
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 3
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 3
49757: NEG
49758: PUSH
49759: LD_INT 3
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: LIST
49771: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49772: LD_ADDR_VAR 0 23
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 3
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 4
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: LIST
49815: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49816: LD_ADDR_VAR 0 24
49820: PUSH
49821: LD_INT 3
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 4
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49857: LD_ADDR_VAR 0 25
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 3
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 4
49874: PUSH
49875: LD_INT 3
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: LD_INT 4
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49897: LD_ADDR_VAR 0 26
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: LD_INT 4
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: LIST
49937: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49938: LD_ADDR_VAR 0 27
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 3
49956: NEG
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 4
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49982: LD_ADDR_VAR 0 28
49986: PUSH
49987: LD_INT 3
49989: NEG
49990: PUSH
49991: LD_INT 3
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 3
50001: NEG
50002: PUSH
50003: LD_INT 4
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 4
50013: NEG
50014: PUSH
50015: LD_INT 3
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: LIST
50027: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50028: LD_ADDR_VAR 0 29
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 3
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 4
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 4
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 3
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 5
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 5
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 4
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 6
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 6
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 5
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50183: LD_ADDR_VAR 0 30
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 3
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 4
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 4
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 5
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 5
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 5
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 6
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 6
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50326: LD_ADDR_VAR 0 31
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: LD_INT 3
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 3
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 4
50363: PUSH
50364: LD_INT 3
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 4
50373: PUSH
50374: LD_INT 4
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 3
50383: PUSH
50384: LD_INT 4
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 5
50393: PUSH
50394: LD_INT 4
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 5
50403: PUSH
50404: LD_INT 5
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 4
50413: PUSH
50414: LD_INT 5
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 6
50423: PUSH
50424: LD_INT 5
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 6
50433: PUSH
50434: LD_INT 6
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 5
50443: PUSH
50444: LD_INT 6
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50465: LD_ADDR_VAR 0 32
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 3
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 4
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 4
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 3
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 5
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: LD_INT 5
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: LD_INT 4
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 6
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 6
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 5
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50608: LD_ADDR_VAR 0 33
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 3
50626: NEG
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 3
50649: NEG
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 4
50660: NEG
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 4
50671: NEG
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 4
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 5
50694: NEG
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 5
50705: NEG
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 5
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 6
50728: NEG
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 6
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50763: LD_ADDR_VAR 0 34
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 3
50794: NEG
50795: PUSH
50796: LD_INT 3
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: NEG
50807: PUSH
50808: LD_INT 4
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 4
50818: NEG
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 4
50830: NEG
50831: PUSH
50832: LD_INT 4
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 4
50842: NEG
50843: PUSH
50844: LD_INT 5
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 5
50854: NEG
50855: PUSH
50856: LD_INT 4
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 5
50866: NEG
50867: PUSH
50868: LD_INT 5
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 5
50878: NEG
50879: PUSH
50880: LD_INT 6
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 6
50890: NEG
50891: PUSH
50892: LD_INT 5
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 6
50902: NEG
50903: PUSH
50904: LD_INT 6
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50926: LD_ADDR_VAR 0 41
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: LIST
50969: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50970: LD_ADDR_VAR 0 42
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: LIST
51010: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51011: LD_ADDR_VAR 0 43
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 3
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: LD_INT 3
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: LIST
51050: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51051: LD_ADDR_VAR 0 44
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 3
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: LIST
51091: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51092: LD_ADDR_VAR 0 45
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 3
51121: NEG
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: LIST
51135: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51136: LD_ADDR_VAR 0 46
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 3
51167: NEG
51168: PUSH
51169: LD_INT 2
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: LIST
51181: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51182: LD_ADDR_VAR 0 47
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: LD_INT 3
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 3
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51215: LD_ADDR_VAR 0 48
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51246: LD_ADDR_VAR 0 49
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51275: LD_ADDR_VAR 0 50
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 3
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51304: LD_ADDR_VAR 0 51
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51335: LD_ADDR_VAR 0 52
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: NEG
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51368: LD_ADDR_VAR 0 53
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 3
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 3
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51412: LD_ADDR_VAR 0 54
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51453: LD_ADDR_VAR 0 55
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: LD_INT 2
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: LD_INT 3
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51493: LD_ADDR_VAR 0 56
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 3
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 3
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: LIST
51533: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51534: LD_ADDR_VAR 0 57
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 3
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 3
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: LIST
51577: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51578: LD_ADDR_VAR 0 58
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: LD_INT 3
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 3
51597: NEG
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: NEG
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: LIST
51623: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51624: LD_ADDR_VAR 0 59
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: LIST
51667: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51668: LD_ADDR_VAR 0 60
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: LIST
51708: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51709: LD_ADDR_VAR 0 61
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: LIST
51748: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51749: LD_ADDR_VAR 0 62
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51790: LD_ADDR_VAR 0 63
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: LIST
51833: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51834: LD_ADDR_VAR 0 64
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: ST_TO_ADDR
// end ; 2 :
51880: GO 55146
51882: LD_INT 2
51884: DOUBLE
51885: EQUAL
51886: IFTRUE 51890
51888: GO 55145
51890: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51891: LD_ADDR_VAR 0 29
51895: PUSH
51896: LD_INT 4
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 4
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 5
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 5
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 4
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 3
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 5
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 3
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 3
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 4
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 4
52021: PUSH
52022: LD_INT 4
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: LD_INT 4
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 3
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 4
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: LD_INT 4
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 4
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 4
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: LD_INT 5
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 5
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: LD_INT 4
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: LD_INT 5
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: LD_INT 3
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 3
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 3
52219: NEG
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 4
52230: NEG
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 4
52241: NEG
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 4
52253: NEG
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 4
52276: NEG
52277: PUSH
52278: LD_INT 4
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 4
52288: NEG
52289: PUSH
52290: LD_INT 5
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 3
52300: NEG
52301: PUSH
52302: LD_INT 4
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 4
52324: NEG
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 5
52336: NEG
52337: PUSH
52338: LD_INT 4
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 5
52348: NEG
52349: PUSH
52350: LD_INT 5
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 3
52360: NEG
52361: PUSH
52362: LD_INT 5
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 5
52372: NEG
52373: PUSH
52374: LD_INT 3
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52429: LD_ADDR_VAR 0 30
52433: PUSH
52434: LD_INT 4
52436: PUSH
52437: LD_INT 4
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 4
52446: PUSH
52447: LD_INT 3
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 5
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 5
52466: PUSH
52467: LD_INT 5
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 4
52476: PUSH
52477: LD_INT 5
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: PUSH
52487: LD_INT 4
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: LD_INT 3
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 5
52506: PUSH
52507: LD_INT 3
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: PUSH
52517: LD_INT 5
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: LD_INT 3
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 4
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 4
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 3
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 4
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 4
52619: NEG
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 4
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 3
52642: NEG
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 3
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 4
52664: NEG
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 5
52675: NEG
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 5
52686: NEG
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 5
52698: NEG
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: NEG
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 3
52721: NEG
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 3
52733: NEG
52734: PUSH
52735: LD_INT 4
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 3
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 3
52769: NEG
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 4
52781: NEG
52782: PUSH
52783: LD_INT 3
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 4
52793: NEG
52794: PUSH
52795: LD_INT 4
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: LD_INT 4
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 4
52817: NEG
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 4
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 5
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 4
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 3
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 3
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 4
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: LD_INT 5
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: LD_INT 5
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52976: LD_ADDR_VAR 0 31
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 4
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 3
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 4
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 5
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 5
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: LD_INT 4
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: LD_INT 3
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 5
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: LD_INT 3
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 3
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 3
53121: NEG
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 4
53132: NEG
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 4
53143: NEG
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 4
53155: NEG
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 4
53178: NEG
53179: PUSH
53180: LD_INT 4
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 4
53190: NEG
53191: PUSH
53192: LD_INT 5
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: NEG
53203: PUSH
53204: LD_INT 4
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 3
53214: NEG
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 4
53226: NEG
53227: PUSH
53228: LD_INT 3
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 5
53238: NEG
53239: PUSH
53240: LD_INT 4
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 5
53250: NEG
53251: PUSH
53252: LD_INT 5
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: LD_INT 5
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 5
53274: NEG
53275: PUSH
53276: LD_INT 3
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 3
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 4
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 3
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 4
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: LD_INT 4
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 4
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 4
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 5
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 5
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 4
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 3
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 5
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53526: LD_ADDR_VAR 0 32
53530: PUSH
53531: LD_INT 4
53533: NEG
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 4
53544: NEG
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 3
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 3
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 4
53578: NEG
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 5
53589: NEG
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 5
53600: NEG
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 5
53612: NEG
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 3
53624: NEG
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: NEG
53636: PUSH
53637: LD_INT 3
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 3
53647: NEG
53648: PUSH
53649: LD_INT 4
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 4
53695: NEG
53696: PUSH
53697: LD_INT 3
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 4
53707: NEG
53708: PUSH
53709: LD_INT 4
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: LD_INT 4
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 4
53731: NEG
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 4
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 5
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: LD_INT 4
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 3
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 3
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 4
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 5
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: LD_INT 5
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 3
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 4
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 4
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 4
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 4
53938: PUSH
53939: LD_INT 4
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 4
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 5
53958: PUSH
53959: LD_INT 4
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 5
53968: PUSH
53969: LD_INT 5
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 4
53978: PUSH
53979: LD_INT 5
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 3
53988: PUSH
53989: LD_INT 4
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 5
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 3
54018: PUSH
54019: LD_INT 5
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54073: LD_ADDR_VAR 0 33
54077: PUSH
54078: LD_INT 4
54080: NEG
54081: PUSH
54082: LD_INT 4
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 4
54092: NEG
54093: PUSH
54094: LD_INT 5
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 3
54104: NEG
54105: PUSH
54106: LD_INT 4
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: LD_INT 3
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 4
54128: NEG
54129: PUSH
54130: LD_INT 3
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 5
54140: NEG
54141: PUSH
54142: LD_INT 4
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 5
54152: NEG
54153: PUSH
54154: LD_INT 5
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: LD_INT 5
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 5
54176: NEG
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 4
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 3
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 3
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 4
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 2
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 4
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 4
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 4
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 5
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 5
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 4
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 3
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 5
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: LD_INT 3
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 3
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 4
54403: PUSH
54404: LD_INT 3
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 4
54413: PUSH
54414: LD_INT 4
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: LD_INT 4
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 4
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: LD_INT 4
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 4
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 3
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 4
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 5
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 5
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: LD_INT 4
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 5
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 3
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54611: LD_ADDR_VAR 0 34
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 4
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 5
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 3
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 4
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: LD_INT 5
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 3
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 2
54708: NEG
54709: PUSH
54710: LD_INT 5
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 3
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 4
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 4
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 3
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 4
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 4
54813: PUSH
54814: LD_INT 4
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 4
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 5
54833: PUSH
54834: LD_INT 4
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 5
54843: PUSH
54844: LD_INT 5
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 4
54853: PUSH
54854: LD_INT 5
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: LD_INT 4
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 5
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: PUSH
54894: LD_INT 5
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 4
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 4
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 4
54996: NEG
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 4
55007: NEG
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: NEG
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 3
55030: NEG
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 4
55041: NEG
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 5
55052: NEG
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 5
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 5
55075: NEG
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 3
55087: NEG
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: ST_TO_ADDR
// end ; end ;
55143: GO 55146
55145: POP
// case btype of b_depot , b_warehouse :
55146: LD_VAR 0 1
55150: PUSH
55151: LD_INT 0
55153: DOUBLE
55154: EQUAL
55155: IFTRUE 55165
55157: LD_INT 1
55159: DOUBLE
55160: EQUAL
55161: IFTRUE 55165
55163: GO 55366
55165: POP
// case nation of nation_american :
55166: LD_VAR 0 5
55170: PUSH
55171: LD_INT 1
55173: DOUBLE
55174: EQUAL
55175: IFTRUE 55179
55177: GO 55235
55179: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55180: LD_ADDR_VAR 0 9
55184: PUSH
55185: LD_VAR 0 11
55189: PUSH
55190: LD_VAR 0 12
55194: PUSH
55195: LD_VAR 0 13
55199: PUSH
55200: LD_VAR 0 14
55204: PUSH
55205: LD_VAR 0 15
55209: PUSH
55210: LD_VAR 0 16
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: PUSH
55223: LD_VAR 0 4
55227: PUSH
55228: LD_INT 1
55230: PLUS
55231: ARRAY
55232: ST_TO_ADDR
55233: GO 55364
55235: LD_INT 2
55237: DOUBLE
55238: EQUAL
55239: IFTRUE 55243
55241: GO 55299
55243: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55244: LD_ADDR_VAR 0 9
55248: PUSH
55249: LD_VAR 0 17
55253: PUSH
55254: LD_VAR 0 18
55258: PUSH
55259: LD_VAR 0 19
55263: PUSH
55264: LD_VAR 0 20
55268: PUSH
55269: LD_VAR 0 21
55273: PUSH
55274: LD_VAR 0 22
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: PUSH
55287: LD_VAR 0 4
55291: PUSH
55292: LD_INT 1
55294: PLUS
55295: ARRAY
55296: ST_TO_ADDR
55297: GO 55364
55299: LD_INT 3
55301: DOUBLE
55302: EQUAL
55303: IFTRUE 55307
55305: GO 55363
55307: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55308: LD_ADDR_VAR 0 9
55312: PUSH
55313: LD_VAR 0 23
55317: PUSH
55318: LD_VAR 0 24
55322: PUSH
55323: LD_VAR 0 25
55327: PUSH
55328: LD_VAR 0 26
55332: PUSH
55333: LD_VAR 0 27
55337: PUSH
55338: LD_VAR 0 28
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: PUSH
55351: LD_VAR 0 4
55355: PUSH
55356: LD_INT 1
55358: PLUS
55359: ARRAY
55360: ST_TO_ADDR
55361: GO 55364
55363: POP
55364: GO 55919
55366: LD_INT 2
55368: DOUBLE
55369: EQUAL
55370: IFTRUE 55380
55372: LD_INT 3
55374: DOUBLE
55375: EQUAL
55376: IFTRUE 55380
55378: GO 55436
55380: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55381: LD_ADDR_VAR 0 9
55385: PUSH
55386: LD_VAR 0 29
55390: PUSH
55391: LD_VAR 0 30
55395: PUSH
55396: LD_VAR 0 31
55400: PUSH
55401: LD_VAR 0 32
55405: PUSH
55406: LD_VAR 0 33
55410: PUSH
55411: LD_VAR 0 34
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: PUSH
55424: LD_VAR 0 4
55428: PUSH
55429: LD_INT 1
55431: PLUS
55432: ARRAY
55433: ST_TO_ADDR
55434: GO 55919
55436: LD_INT 16
55438: DOUBLE
55439: EQUAL
55440: IFTRUE 55498
55442: LD_INT 17
55444: DOUBLE
55445: EQUAL
55446: IFTRUE 55498
55448: LD_INT 18
55450: DOUBLE
55451: EQUAL
55452: IFTRUE 55498
55454: LD_INT 19
55456: DOUBLE
55457: EQUAL
55458: IFTRUE 55498
55460: LD_INT 22
55462: DOUBLE
55463: EQUAL
55464: IFTRUE 55498
55466: LD_INT 20
55468: DOUBLE
55469: EQUAL
55470: IFTRUE 55498
55472: LD_INT 21
55474: DOUBLE
55475: EQUAL
55476: IFTRUE 55498
55478: LD_INT 23
55480: DOUBLE
55481: EQUAL
55482: IFTRUE 55498
55484: LD_INT 24
55486: DOUBLE
55487: EQUAL
55488: IFTRUE 55498
55490: LD_INT 25
55492: DOUBLE
55493: EQUAL
55494: IFTRUE 55498
55496: GO 55554
55498: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55499: LD_ADDR_VAR 0 9
55503: PUSH
55504: LD_VAR 0 35
55508: PUSH
55509: LD_VAR 0 36
55513: PUSH
55514: LD_VAR 0 37
55518: PUSH
55519: LD_VAR 0 38
55523: PUSH
55524: LD_VAR 0 39
55528: PUSH
55529: LD_VAR 0 40
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: PUSH
55542: LD_VAR 0 4
55546: PUSH
55547: LD_INT 1
55549: PLUS
55550: ARRAY
55551: ST_TO_ADDR
55552: GO 55919
55554: LD_INT 6
55556: DOUBLE
55557: EQUAL
55558: IFTRUE 55610
55560: LD_INT 7
55562: DOUBLE
55563: EQUAL
55564: IFTRUE 55610
55566: LD_INT 8
55568: DOUBLE
55569: EQUAL
55570: IFTRUE 55610
55572: LD_INT 13
55574: DOUBLE
55575: EQUAL
55576: IFTRUE 55610
55578: LD_INT 12
55580: DOUBLE
55581: EQUAL
55582: IFTRUE 55610
55584: LD_INT 15
55586: DOUBLE
55587: EQUAL
55588: IFTRUE 55610
55590: LD_INT 11
55592: DOUBLE
55593: EQUAL
55594: IFTRUE 55610
55596: LD_INT 14
55598: DOUBLE
55599: EQUAL
55600: IFTRUE 55610
55602: LD_INT 10
55604: DOUBLE
55605: EQUAL
55606: IFTRUE 55610
55608: GO 55666
55610: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55611: LD_ADDR_VAR 0 9
55615: PUSH
55616: LD_VAR 0 41
55620: PUSH
55621: LD_VAR 0 42
55625: PUSH
55626: LD_VAR 0 43
55630: PUSH
55631: LD_VAR 0 44
55635: PUSH
55636: LD_VAR 0 45
55640: PUSH
55641: LD_VAR 0 46
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: PUSH
55654: LD_VAR 0 4
55658: PUSH
55659: LD_INT 1
55661: PLUS
55662: ARRAY
55663: ST_TO_ADDR
55664: GO 55919
55666: LD_INT 36
55668: DOUBLE
55669: EQUAL
55670: IFTRUE 55674
55672: GO 55730
55674: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55675: LD_ADDR_VAR 0 9
55679: PUSH
55680: LD_VAR 0 47
55684: PUSH
55685: LD_VAR 0 48
55689: PUSH
55690: LD_VAR 0 49
55694: PUSH
55695: LD_VAR 0 50
55699: PUSH
55700: LD_VAR 0 51
55704: PUSH
55705: LD_VAR 0 52
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: PUSH
55718: LD_VAR 0 4
55722: PUSH
55723: LD_INT 1
55725: PLUS
55726: ARRAY
55727: ST_TO_ADDR
55728: GO 55919
55730: LD_INT 4
55732: DOUBLE
55733: EQUAL
55734: IFTRUE 55756
55736: LD_INT 5
55738: DOUBLE
55739: EQUAL
55740: IFTRUE 55756
55742: LD_INT 34
55744: DOUBLE
55745: EQUAL
55746: IFTRUE 55756
55748: LD_INT 37
55750: DOUBLE
55751: EQUAL
55752: IFTRUE 55756
55754: GO 55812
55756: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55757: LD_ADDR_VAR 0 9
55761: PUSH
55762: LD_VAR 0 53
55766: PUSH
55767: LD_VAR 0 54
55771: PUSH
55772: LD_VAR 0 55
55776: PUSH
55777: LD_VAR 0 56
55781: PUSH
55782: LD_VAR 0 57
55786: PUSH
55787: LD_VAR 0 58
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: PUSH
55800: LD_VAR 0 4
55804: PUSH
55805: LD_INT 1
55807: PLUS
55808: ARRAY
55809: ST_TO_ADDR
55810: GO 55919
55812: LD_INT 31
55814: DOUBLE
55815: EQUAL
55816: IFTRUE 55862
55818: LD_INT 32
55820: DOUBLE
55821: EQUAL
55822: IFTRUE 55862
55824: LD_INT 33
55826: DOUBLE
55827: EQUAL
55828: IFTRUE 55862
55830: LD_INT 27
55832: DOUBLE
55833: EQUAL
55834: IFTRUE 55862
55836: LD_INT 26
55838: DOUBLE
55839: EQUAL
55840: IFTRUE 55862
55842: LD_INT 28
55844: DOUBLE
55845: EQUAL
55846: IFTRUE 55862
55848: LD_INT 29
55850: DOUBLE
55851: EQUAL
55852: IFTRUE 55862
55854: LD_INT 30
55856: DOUBLE
55857: EQUAL
55858: IFTRUE 55862
55860: GO 55918
55862: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55863: LD_ADDR_VAR 0 9
55867: PUSH
55868: LD_VAR 0 59
55872: PUSH
55873: LD_VAR 0 60
55877: PUSH
55878: LD_VAR 0 61
55882: PUSH
55883: LD_VAR 0 62
55887: PUSH
55888: LD_VAR 0 63
55892: PUSH
55893: LD_VAR 0 64
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: PUSH
55906: LD_VAR 0 4
55910: PUSH
55911: LD_INT 1
55913: PLUS
55914: ARRAY
55915: ST_TO_ADDR
55916: GO 55919
55918: POP
// temp_list2 = [ ] ;
55919: LD_ADDR_VAR 0 10
55923: PUSH
55924: EMPTY
55925: ST_TO_ADDR
// for i in temp_list do
55926: LD_ADDR_VAR 0 8
55930: PUSH
55931: LD_VAR 0 9
55935: PUSH
55936: FOR_IN
55937: IFFALSE 55989
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55939: LD_ADDR_VAR 0 10
55943: PUSH
55944: LD_VAR 0 10
55948: PUSH
55949: LD_VAR 0 8
55953: PUSH
55954: LD_INT 1
55956: ARRAY
55957: PUSH
55958: LD_VAR 0 2
55962: PLUS
55963: PUSH
55964: LD_VAR 0 8
55968: PUSH
55969: LD_INT 2
55971: ARRAY
55972: PUSH
55973: LD_VAR 0 3
55977: PLUS
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: EMPTY
55984: LIST
55985: ADD
55986: ST_TO_ADDR
55987: GO 55936
55989: POP
55990: POP
// result = temp_list2 ;
55991: LD_ADDR_VAR 0 7
55995: PUSH
55996: LD_VAR 0 10
56000: ST_TO_ADDR
// end ;
56001: LD_VAR 0 7
56005: RET
// export function EnemyInRange ( unit , dist ) ; begin
56006: LD_INT 0
56008: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56009: LD_ADDR_VAR 0 3
56013: PUSH
56014: LD_VAR 0 1
56018: PPUSH
56019: CALL_OW 255
56023: PPUSH
56024: LD_VAR 0 1
56028: PPUSH
56029: CALL_OW 250
56033: PPUSH
56034: LD_VAR 0 1
56038: PPUSH
56039: CALL_OW 251
56043: PPUSH
56044: LD_VAR 0 2
56048: PPUSH
56049: CALL 29401 0 4
56053: PUSH
56054: LD_INT 4
56056: ARRAY
56057: ST_TO_ADDR
// end ;
56058: LD_VAR 0 3
56062: RET
// export function PlayerSeeMe ( unit ) ; begin
56063: LD_INT 0
56065: PPUSH
// result := See ( your_side , unit ) ;
56066: LD_ADDR_VAR 0 2
56070: PUSH
56071: LD_OWVAR 2
56075: PPUSH
56076: LD_VAR 0 1
56080: PPUSH
56081: CALL_OW 292
56085: ST_TO_ADDR
// end ;
56086: LD_VAR 0 2
56090: RET
// export function ReverseDir ( unit ) ; begin
56091: LD_INT 0
56093: PPUSH
// if not unit then
56094: LD_VAR 0 1
56098: NOT
56099: IFFALSE 56103
// exit ;
56101: GO 56126
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56103: LD_ADDR_VAR 0 2
56107: PUSH
56108: LD_VAR 0 1
56112: PPUSH
56113: CALL_OW 254
56117: PUSH
56118: LD_INT 3
56120: PLUS
56121: PUSH
56122: LD_INT 6
56124: MOD
56125: ST_TO_ADDR
// end ;
56126: LD_VAR 0 2
56130: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56131: LD_INT 0
56133: PPUSH
56134: PPUSH
56135: PPUSH
56136: PPUSH
56137: PPUSH
// if not hexes then
56138: LD_VAR 0 2
56142: NOT
56143: IFFALSE 56147
// exit ;
56145: GO 56295
// dist := 9999 ;
56147: LD_ADDR_VAR 0 5
56151: PUSH
56152: LD_INT 9999
56154: ST_TO_ADDR
// for i = 1 to hexes do
56155: LD_ADDR_VAR 0 4
56159: PUSH
56160: DOUBLE
56161: LD_INT 1
56163: DEC
56164: ST_TO_ADDR
56165: LD_VAR 0 2
56169: PUSH
56170: FOR_TO
56171: IFFALSE 56283
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56173: LD_VAR 0 1
56177: PPUSH
56178: LD_VAR 0 2
56182: PUSH
56183: LD_VAR 0 4
56187: ARRAY
56188: PUSH
56189: LD_INT 1
56191: ARRAY
56192: PPUSH
56193: LD_VAR 0 2
56197: PUSH
56198: LD_VAR 0 4
56202: ARRAY
56203: PUSH
56204: LD_INT 2
56206: ARRAY
56207: PPUSH
56208: CALL_OW 297
56212: PUSH
56213: LD_VAR 0 5
56217: LESS
56218: IFFALSE 56281
// begin hex := hexes [ i ] ;
56220: LD_ADDR_VAR 0 7
56224: PUSH
56225: LD_VAR 0 2
56229: PUSH
56230: LD_VAR 0 4
56234: ARRAY
56235: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56236: LD_ADDR_VAR 0 5
56240: PUSH
56241: LD_VAR 0 1
56245: PPUSH
56246: LD_VAR 0 2
56250: PUSH
56251: LD_VAR 0 4
56255: ARRAY
56256: PUSH
56257: LD_INT 1
56259: ARRAY
56260: PPUSH
56261: LD_VAR 0 2
56265: PUSH
56266: LD_VAR 0 4
56270: ARRAY
56271: PUSH
56272: LD_INT 2
56274: ARRAY
56275: PPUSH
56276: CALL_OW 297
56280: ST_TO_ADDR
// end ; end ;
56281: GO 56170
56283: POP
56284: POP
// result := hex ;
56285: LD_ADDR_VAR 0 3
56289: PUSH
56290: LD_VAR 0 7
56294: ST_TO_ADDR
// end ;
56295: LD_VAR 0 3
56299: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56300: LD_INT 0
56302: PPUSH
56303: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56304: LD_VAR 0 1
56308: NOT
56309: PUSH
56310: LD_VAR 0 1
56314: PUSH
56315: LD_INT 21
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 23
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PPUSH
56339: CALL_OW 69
56343: IN
56344: NOT
56345: OR
56346: IFFALSE 56350
// exit ;
56348: GO 56397
// for i = 1 to 3 do
56350: LD_ADDR_VAR 0 3
56354: PUSH
56355: DOUBLE
56356: LD_INT 1
56358: DEC
56359: ST_TO_ADDR
56360: LD_INT 3
56362: PUSH
56363: FOR_TO
56364: IFFALSE 56395
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56366: LD_VAR 0 1
56370: PPUSH
56371: CALL_OW 250
56375: PPUSH
56376: LD_VAR 0 1
56380: PPUSH
56381: CALL_OW 251
56385: PPUSH
56386: LD_INT 1
56388: PPUSH
56389: CALL_OW 453
56393: GO 56363
56395: POP
56396: POP
// end ;
56397: LD_VAR 0 2
56401: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56402: LD_INT 0
56404: PPUSH
56405: PPUSH
56406: PPUSH
56407: PPUSH
56408: PPUSH
56409: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56410: LD_VAR 0 1
56414: NOT
56415: PUSH
56416: LD_VAR 0 2
56420: NOT
56421: OR
56422: PUSH
56423: LD_VAR 0 1
56427: PPUSH
56428: CALL_OW 314
56432: OR
56433: IFFALSE 56437
// exit ;
56435: GO 56878
// x := GetX ( enemy_unit ) ;
56437: LD_ADDR_VAR 0 7
56441: PUSH
56442: LD_VAR 0 2
56446: PPUSH
56447: CALL_OW 250
56451: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56452: LD_ADDR_VAR 0 8
56456: PUSH
56457: LD_VAR 0 2
56461: PPUSH
56462: CALL_OW 251
56466: ST_TO_ADDR
// if not x or not y then
56467: LD_VAR 0 7
56471: NOT
56472: PUSH
56473: LD_VAR 0 8
56477: NOT
56478: OR
56479: IFFALSE 56483
// exit ;
56481: GO 56878
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56483: LD_ADDR_VAR 0 6
56487: PUSH
56488: LD_VAR 0 7
56492: PPUSH
56493: LD_INT 0
56495: PPUSH
56496: LD_INT 4
56498: PPUSH
56499: CALL_OW 272
56503: PUSH
56504: LD_VAR 0 8
56508: PPUSH
56509: LD_INT 0
56511: PPUSH
56512: LD_INT 4
56514: PPUSH
56515: CALL_OW 273
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_VAR 0 7
56528: PPUSH
56529: LD_INT 1
56531: PPUSH
56532: LD_INT 4
56534: PPUSH
56535: CALL_OW 272
56539: PUSH
56540: LD_VAR 0 8
56544: PPUSH
56545: LD_INT 1
56547: PPUSH
56548: LD_INT 4
56550: PPUSH
56551: CALL_OW 273
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_VAR 0 7
56564: PPUSH
56565: LD_INT 2
56567: PPUSH
56568: LD_INT 4
56570: PPUSH
56571: CALL_OW 272
56575: PUSH
56576: LD_VAR 0 8
56580: PPUSH
56581: LD_INT 2
56583: PPUSH
56584: LD_INT 4
56586: PPUSH
56587: CALL_OW 273
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_VAR 0 7
56600: PPUSH
56601: LD_INT 3
56603: PPUSH
56604: LD_INT 4
56606: PPUSH
56607: CALL_OW 272
56611: PUSH
56612: LD_VAR 0 8
56616: PPUSH
56617: LD_INT 3
56619: PPUSH
56620: LD_INT 4
56622: PPUSH
56623: CALL_OW 273
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_VAR 0 7
56636: PPUSH
56637: LD_INT 4
56639: PPUSH
56640: LD_INT 4
56642: PPUSH
56643: CALL_OW 272
56647: PUSH
56648: LD_VAR 0 8
56652: PPUSH
56653: LD_INT 4
56655: PPUSH
56656: LD_INT 4
56658: PPUSH
56659: CALL_OW 273
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_VAR 0 7
56672: PPUSH
56673: LD_INT 5
56675: PPUSH
56676: LD_INT 4
56678: PPUSH
56679: CALL_OW 272
56683: PUSH
56684: LD_VAR 0 8
56688: PPUSH
56689: LD_INT 5
56691: PPUSH
56692: LD_INT 4
56694: PPUSH
56695: CALL_OW 273
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// for i = tmp downto 1 do
56712: LD_ADDR_VAR 0 4
56716: PUSH
56717: DOUBLE
56718: LD_VAR 0 6
56722: INC
56723: ST_TO_ADDR
56724: LD_INT 1
56726: PUSH
56727: FOR_DOWNTO
56728: IFFALSE 56829
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56730: LD_VAR 0 6
56734: PUSH
56735: LD_VAR 0 4
56739: ARRAY
56740: PUSH
56741: LD_INT 1
56743: ARRAY
56744: PPUSH
56745: LD_VAR 0 6
56749: PUSH
56750: LD_VAR 0 4
56754: ARRAY
56755: PUSH
56756: LD_INT 2
56758: ARRAY
56759: PPUSH
56760: CALL_OW 488
56764: NOT
56765: PUSH
56766: LD_VAR 0 6
56770: PUSH
56771: LD_VAR 0 4
56775: ARRAY
56776: PUSH
56777: LD_INT 1
56779: ARRAY
56780: PPUSH
56781: LD_VAR 0 6
56785: PUSH
56786: LD_VAR 0 4
56790: ARRAY
56791: PUSH
56792: LD_INT 2
56794: ARRAY
56795: PPUSH
56796: CALL_OW 428
56800: PUSH
56801: LD_INT 0
56803: NONEQUAL
56804: OR
56805: IFFALSE 56827
// tmp := Delete ( tmp , i ) ;
56807: LD_ADDR_VAR 0 6
56811: PUSH
56812: LD_VAR 0 6
56816: PPUSH
56817: LD_VAR 0 4
56821: PPUSH
56822: CALL_OW 3
56826: ST_TO_ADDR
56827: GO 56727
56829: POP
56830: POP
// j := GetClosestHex ( unit , tmp ) ;
56831: LD_ADDR_VAR 0 5
56835: PUSH
56836: LD_VAR 0 1
56840: PPUSH
56841: LD_VAR 0 6
56845: PPUSH
56846: CALL 56131 0 2
56850: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56851: LD_VAR 0 1
56855: PPUSH
56856: LD_VAR 0 5
56860: PUSH
56861: LD_INT 1
56863: ARRAY
56864: PPUSH
56865: LD_VAR 0 5
56869: PUSH
56870: LD_INT 2
56872: ARRAY
56873: PPUSH
56874: CALL_OW 111
// end ;
56878: LD_VAR 0 3
56882: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56883: LD_INT 0
56885: PPUSH
56886: PPUSH
56887: PPUSH
// uc_side = 0 ;
56888: LD_ADDR_OWVAR 20
56892: PUSH
56893: LD_INT 0
56895: ST_TO_ADDR
// uc_nation = 0 ;
56896: LD_ADDR_OWVAR 21
56900: PUSH
56901: LD_INT 0
56903: ST_TO_ADDR
// InitHc_All ( ) ;
56904: CALL_OW 584
// InitVc ;
56908: CALL_OW 20
// if mastodonts then
56912: LD_VAR 0 6
56916: IFFALSE 56983
// for i = 1 to mastodonts do
56918: LD_ADDR_VAR 0 11
56922: PUSH
56923: DOUBLE
56924: LD_INT 1
56926: DEC
56927: ST_TO_ADDR
56928: LD_VAR 0 6
56932: PUSH
56933: FOR_TO
56934: IFFALSE 56981
// begin vc_chassis := 31 ;
56936: LD_ADDR_OWVAR 37
56940: PUSH
56941: LD_INT 31
56943: ST_TO_ADDR
// vc_control := control_rider ;
56944: LD_ADDR_OWVAR 38
56948: PUSH
56949: LD_INT 4
56951: ST_TO_ADDR
// animal := CreateVehicle ;
56952: LD_ADDR_VAR 0 12
56956: PUSH
56957: CALL_OW 45
56961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56962: LD_VAR 0 12
56966: PPUSH
56967: LD_VAR 0 8
56971: PPUSH
56972: LD_INT 0
56974: PPUSH
56975: CALL 59171 0 3
// end ;
56979: GO 56933
56981: POP
56982: POP
// if horses then
56983: LD_VAR 0 5
56987: IFFALSE 57054
// for i = 1 to horses do
56989: LD_ADDR_VAR 0 11
56993: PUSH
56994: DOUBLE
56995: LD_INT 1
56997: DEC
56998: ST_TO_ADDR
56999: LD_VAR 0 5
57003: PUSH
57004: FOR_TO
57005: IFFALSE 57052
// begin hc_class := 21 ;
57007: LD_ADDR_OWVAR 28
57011: PUSH
57012: LD_INT 21
57014: ST_TO_ADDR
// hc_gallery :=  ;
57015: LD_ADDR_OWVAR 33
57019: PUSH
57020: LD_STRING 
57022: ST_TO_ADDR
// animal := CreateHuman ;
57023: LD_ADDR_VAR 0 12
57027: PUSH
57028: CALL_OW 44
57032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57033: LD_VAR 0 12
57037: PPUSH
57038: LD_VAR 0 8
57042: PPUSH
57043: LD_INT 0
57045: PPUSH
57046: CALL 59171 0 3
// end ;
57050: GO 57004
57052: POP
57053: POP
// if birds then
57054: LD_VAR 0 1
57058: IFFALSE 57125
// for i = 1 to birds do
57060: LD_ADDR_VAR 0 11
57064: PUSH
57065: DOUBLE
57066: LD_INT 1
57068: DEC
57069: ST_TO_ADDR
57070: LD_VAR 0 1
57074: PUSH
57075: FOR_TO
57076: IFFALSE 57123
// begin hc_class = 18 ;
57078: LD_ADDR_OWVAR 28
57082: PUSH
57083: LD_INT 18
57085: ST_TO_ADDR
// hc_gallery =  ;
57086: LD_ADDR_OWVAR 33
57090: PUSH
57091: LD_STRING 
57093: ST_TO_ADDR
// animal := CreateHuman ;
57094: LD_ADDR_VAR 0 12
57098: PUSH
57099: CALL_OW 44
57103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57104: LD_VAR 0 12
57108: PPUSH
57109: LD_VAR 0 8
57113: PPUSH
57114: LD_INT 0
57116: PPUSH
57117: CALL 59171 0 3
// end ;
57121: GO 57075
57123: POP
57124: POP
// if tigers then
57125: LD_VAR 0 2
57129: IFFALSE 57213
// for i = 1 to tigers do
57131: LD_ADDR_VAR 0 11
57135: PUSH
57136: DOUBLE
57137: LD_INT 1
57139: DEC
57140: ST_TO_ADDR
57141: LD_VAR 0 2
57145: PUSH
57146: FOR_TO
57147: IFFALSE 57211
// begin hc_class = class_tiger ;
57149: LD_ADDR_OWVAR 28
57153: PUSH
57154: LD_INT 14
57156: ST_TO_ADDR
// hc_gallery =  ;
57157: LD_ADDR_OWVAR 33
57161: PUSH
57162: LD_STRING 
57164: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57165: LD_ADDR_OWVAR 35
57169: PUSH
57170: LD_INT 7
57172: NEG
57173: PPUSH
57174: LD_INT 7
57176: PPUSH
57177: CALL_OW 12
57181: ST_TO_ADDR
// animal := CreateHuman ;
57182: LD_ADDR_VAR 0 12
57186: PUSH
57187: CALL_OW 44
57191: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57192: LD_VAR 0 12
57196: PPUSH
57197: LD_VAR 0 8
57201: PPUSH
57202: LD_INT 0
57204: PPUSH
57205: CALL 59171 0 3
// end ;
57209: GO 57146
57211: POP
57212: POP
// if apemans then
57213: LD_VAR 0 3
57217: IFFALSE 57340
// for i = 1 to apemans do
57219: LD_ADDR_VAR 0 11
57223: PUSH
57224: DOUBLE
57225: LD_INT 1
57227: DEC
57228: ST_TO_ADDR
57229: LD_VAR 0 3
57233: PUSH
57234: FOR_TO
57235: IFFALSE 57338
// begin hc_class = class_apeman ;
57237: LD_ADDR_OWVAR 28
57241: PUSH
57242: LD_INT 12
57244: ST_TO_ADDR
// hc_gallery =  ;
57245: LD_ADDR_OWVAR 33
57249: PUSH
57250: LD_STRING 
57252: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57253: LD_ADDR_OWVAR 35
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PPUSH
57262: LD_INT 2
57264: PPUSH
57265: CALL_OW 12
57269: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57270: LD_ADDR_OWVAR 31
57274: PUSH
57275: LD_INT 1
57277: PPUSH
57278: LD_INT 3
57280: PPUSH
57281: CALL_OW 12
57285: PUSH
57286: LD_INT 1
57288: PPUSH
57289: LD_INT 3
57291: PPUSH
57292: CALL_OW 12
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: ST_TO_ADDR
// animal := CreateHuman ;
57309: LD_ADDR_VAR 0 12
57313: PUSH
57314: CALL_OW 44
57318: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57319: LD_VAR 0 12
57323: PPUSH
57324: LD_VAR 0 8
57328: PPUSH
57329: LD_INT 0
57331: PPUSH
57332: CALL 59171 0 3
// end ;
57336: GO 57234
57338: POP
57339: POP
// if enchidnas then
57340: LD_VAR 0 4
57344: IFFALSE 57411
// for i = 1 to enchidnas do
57346: LD_ADDR_VAR 0 11
57350: PUSH
57351: DOUBLE
57352: LD_INT 1
57354: DEC
57355: ST_TO_ADDR
57356: LD_VAR 0 4
57360: PUSH
57361: FOR_TO
57362: IFFALSE 57409
// begin hc_class = 13 ;
57364: LD_ADDR_OWVAR 28
57368: PUSH
57369: LD_INT 13
57371: ST_TO_ADDR
// hc_gallery =  ;
57372: LD_ADDR_OWVAR 33
57376: PUSH
57377: LD_STRING 
57379: ST_TO_ADDR
// animal := CreateHuman ;
57380: LD_ADDR_VAR 0 12
57384: PUSH
57385: CALL_OW 44
57389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57390: LD_VAR 0 12
57394: PPUSH
57395: LD_VAR 0 8
57399: PPUSH
57400: LD_INT 0
57402: PPUSH
57403: CALL 59171 0 3
// end ;
57407: GO 57361
57409: POP
57410: POP
// if fishes then
57411: LD_VAR 0 7
57415: IFFALSE 57482
// for i = 1 to fishes do
57417: LD_ADDR_VAR 0 11
57421: PUSH
57422: DOUBLE
57423: LD_INT 1
57425: DEC
57426: ST_TO_ADDR
57427: LD_VAR 0 7
57431: PUSH
57432: FOR_TO
57433: IFFALSE 57480
// begin hc_class = 20 ;
57435: LD_ADDR_OWVAR 28
57439: PUSH
57440: LD_INT 20
57442: ST_TO_ADDR
// hc_gallery =  ;
57443: LD_ADDR_OWVAR 33
57447: PUSH
57448: LD_STRING 
57450: ST_TO_ADDR
// animal := CreateHuman ;
57451: LD_ADDR_VAR 0 12
57455: PUSH
57456: CALL_OW 44
57460: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57461: LD_VAR 0 12
57465: PPUSH
57466: LD_VAR 0 9
57470: PPUSH
57471: LD_INT 0
57473: PPUSH
57474: CALL 59171 0 3
// end ;
57478: GO 57432
57480: POP
57481: POP
// end ;
57482: LD_VAR 0 10
57486: RET
// export function WantHeal ( sci , unit ) ; begin
57487: LD_INT 0
57489: PPUSH
// if GetTaskList ( sci ) > 0 then
57490: LD_VAR 0 1
57494: PPUSH
57495: CALL_OW 437
57499: PUSH
57500: LD_INT 0
57502: GREATER
57503: IFFALSE 57573
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57505: LD_VAR 0 1
57509: PPUSH
57510: CALL_OW 437
57514: PUSH
57515: LD_INT 1
57517: ARRAY
57518: PUSH
57519: LD_INT 1
57521: ARRAY
57522: PUSH
57523: LD_STRING l
57525: EQUAL
57526: PUSH
57527: LD_VAR 0 1
57531: PPUSH
57532: CALL_OW 437
57536: PUSH
57537: LD_INT 1
57539: ARRAY
57540: PUSH
57541: LD_INT 4
57543: ARRAY
57544: PUSH
57545: LD_VAR 0 2
57549: EQUAL
57550: AND
57551: IFFALSE 57563
// result := true else
57553: LD_ADDR_VAR 0 3
57557: PUSH
57558: LD_INT 1
57560: ST_TO_ADDR
57561: GO 57571
// result := false ;
57563: LD_ADDR_VAR 0 3
57567: PUSH
57568: LD_INT 0
57570: ST_TO_ADDR
// end else
57571: GO 57581
// result := false ;
57573: LD_ADDR_VAR 0 3
57577: PUSH
57578: LD_INT 0
57580: ST_TO_ADDR
// end ;
57581: LD_VAR 0 3
57585: RET
// export function HealTarget ( sci ) ; begin
57586: LD_INT 0
57588: PPUSH
// if not sci then
57589: LD_VAR 0 1
57593: NOT
57594: IFFALSE 57598
// exit ;
57596: GO 57663
// result := 0 ;
57598: LD_ADDR_VAR 0 2
57602: PUSH
57603: LD_INT 0
57605: ST_TO_ADDR
// if GetTaskList ( sci ) then
57606: LD_VAR 0 1
57610: PPUSH
57611: CALL_OW 437
57615: IFFALSE 57663
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57617: LD_VAR 0 1
57621: PPUSH
57622: CALL_OW 437
57626: PUSH
57627: LD_INT 1
57629: ARRAY
57630: PUSH
57631: LD_INT 1
57633: ARRAY
57634: PUSH
57635: LD_STRING l
57637: EQUAL
57638: IFFALSE 57663
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57640: LD_ADDR_VAR 0 2
57644: PUSH
57645: LD_VAR 0 1
57649: PPUSH
57650: CALL_OW 437
57654: PUSH
57655: LD_INT 1
57657: ARRAY
57658: PUSH
57659: LD_INT 4
57661: ARRAY
57662: ST_TO_ADDR
// end ;
57663: LD_VAR 0 2
57667: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57668: LD_INT 0
57670: PPUSH
57671: PPUSH
57672: PPUSH
57673: PPUSH
// if not base_units then
57674: LD_VAR 0 1
57678: NOT
57679: IFFALSE 57683
// exit ;
57681: GO 57770
// result := false ;
57683: LD_ADDR_VAR 0 2
57687: PUSH
57688: LD_INT 0
57690: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57691: LD_ADDR_VAR 0 5
57695: PUSH
57696: LD_VAR 0 1
57700: PPUSH
57701: LD_INT 21
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PPUSH
57711: CALL_OW 72
57715: ST_TO_ADDR
// if not tmp then
57716: LD_VAR 0 5
57720: NOT
57721: IFFALSE 57725
// exit ;
57723: GO 57770
// for i in tmp do
57725: LD_ADDR_VAR 0 3
57729: PUSH
57730: LD_VAR 0 5
57734: PUSH
57735: FOR_IN
57736: IFFALSE 57768
// begin result := EnemyInRange ( i , 22 ) ;
57738: LD_ADDR_VAR 0 2
57742: PUSH
57743: LD_VAR 0 3
57747: PPUSH
57748: LD_INT 22
57750: PPUSH
57751: CALL 56006 0 2
57755: ST_TO_ADDR
// if result then
57756: LD_VAR 0 2
57760: IFFALSE 57766
// exit ;
57762: POP
57763: POP
57764: GO 57770
// end ;
57766: GO 57735
57768: POP
57769: POP
// end ;
57770: LD_VAR 0 2
57774: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57775: LD_INT 0
57777: PPUSH
57778: PPUSH
// if not units then
57779: LD_VAR 0 1
57783: NOT
57784: IFFALSE 57788
// exit ;
57786: GO 57858
// result := [ ] ;
57788: LD_ADDR_VAR 0 3
57792: PUSH
57793: EMPTY
57794: ST_TO_ADDR
// for i in units do
57795: LD_ADDR_VAR 0 4
57799: PUSH
57800: LD_VAR 0 1
57804: PUSH
57805: FOR_IN
57806: IFFALSE 57856
// if GetTag ( i ) = tag then
57808: LD_VAR 0 4
57812: PPUSH
57813: CALL_OW 110
57817: PUSH
57818: LD_VAR 0 2
57822: EQUAL
57823: IFFALSE 57854
// result := Insert ( result , result + 1 , i ) ;
57825: LD_ADDR_VAR 0 3
57829: PUSH
57830: LD_VAR 0 3
57834: PPUSH
57835: LD_VAR 0 3
57839: PUSH
57840: LD_INT 1
57842: PLUS
57843: PPUSH
57844: LD_VAR 0 4
57848: PPUSH
57849: CALL_OW 2
57853: ST_TO_ADDR
57854: GO 57805
57856: POP
57857: POP
// end ;
57858: LD_VAR 0 3
57862: RET
// export function IsDriver ( un ) ; begin
57863: LD_INT 0
57865: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57866: LD_ADDR_VAR 0 2
57870: PUSH
57871: LD_VAR 0 1
57875: PUSH
57876: LD_INT 55
57878: PUSH
57879: EMPTY
57880: LIST
57881: PPUSH
57882: CALL_OW 69
57886: IN
57887: ST_TO_ADDR
// end ;
57888: LD_VAR 0 2
57892: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57893: LD_INT 0
57895: PPUSH
57896: PPUSH
// list := [ ] ;
57897: LD_ADDR_VAR 0 5
57901: PUSH
57902: EMPTY
57903: ST_TO_ADDR
// case d of 0 :
57904: LD_VAR 0 3
57908: PUSH
57909: LD_INT 0
57911: DOUBLE
57912: EQUAL
57913: IFTRUE 57917
57915: GO 58050
57917: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57918: LD_ADDR_VAR 0 5
57922: PUSH
57923: LD_VAR 0 1
57927: PUSH
57928: LD_INT 4
57930: MINUS
57931: PUSH
57932: LD_VAR 0 2
57936: PUSH
57937: LD_INT 4
57939: MINUS
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: PUSH
57949: LD_VAR 0 1
57953: PUSH
57954: LD_INT 3
57956: MINUS
57957: PUSH
57958: LD_VAR 0 2
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: PUSH
57971: LD_VAR 0 1
57975: PUSH
57976: LD_INT 4
57978: PLUS
57979: PUSH
57980: LD_VAR 0 2
57984: PUSH
57985: LD_INT 4
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: PUSH
57993: LD_VAR 0 1
57997: PUSH
57998: LD_INT 3
58000: PLUS
58001: PUSH
58002: LD_VAR 0 2
58006: PUSH
58007: LD_INT 3
58009: PLUS
58010: PUSH
58011: LD_INT 5
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: PUSH
58019: LD_VAR 0 1
58023: PUSH
58024: LD_VAR 0 2
58028: PUSH
58029: LD_INT 4
58031: PLUS
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: LIST
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// end ; 1 :
58048: GO 58748
58050: LD_INT 1
58052: DOUBLE
58053: EQUAL
58054: IFTRUE 58058
58056: GO 58191
58058: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58059: LD_ADDR_VAR 0 5
58063: PUSH
58064: LD_VAR 0 1
58068: PUSH
58069: LD_VAR 0 2
58073: PUSH
58074: LD_INT 4
58076: MINUS
58077: PUSH
58078: LD_INT 3
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: LIST
58085: PUSH
58086: LD_VAR 0 1
58090: PUSH
58091: LD_INT 3
58093: MINUS
58094: PUSH
58095: LD_VAR 0 2
58099: PUSH
58100: LD_INT 3
58102: MINUS
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: LIST
58111: PUSH
58112: LD_VAR 0 1
58116: PUSH
58117: LD_INT 4
58119: MINUS
58120: PUSH
58121: LD_VAR 0 2
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: LIST
58133: PUSH
58134: LD_VAR 0 1
58138: PUSH
58139: LD_VAR 0 2
58143: PUSH
58144: LD_INT 3
58146: PLUS
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: LIST
58155: PUSH
58156: LD_VAR 0 1
58160: PUSH
58161: LD_INT 4
58163: PLUS
58164: PUSH
58165: LD_VAR 0 2
58169: PUSH
58170: LD_INT 4
58172: PLUS
58173: PUSH
58174: LD_INT 5
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// end ; 2 :
58189: GO 58748
58191: LD_INT 2
58193: DOUBLE
58194: EQUAL
58195: IFTRUE 58199
58197: GO 58328
58199: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58200: LD_ADDR_VAR 0 5
58204: PUSH
58205: LD_VAR 0 1
58209: PUSH
58210: LD_VAR 0 2
58214: PUSH
58215: LD_INT 3
58217: MINUS
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: PUSH
58227: LD_VAR 0 1
58231: PUSH
58232: LD_INT 4
58234: PLUS
58235: PUSH
58236: LD_VAR 0 2
58240: PUSH
58241: LD_INT 4
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: PUSH
58249: LD_VAR 0 1
58253: PUSH
58254: LD_VAR 0 2
58258: PUSH
58259: LD_INT 4
58261: PLUS
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: LIST
58270: PUSH
58271: LD_VAR 0 1
58275: PUSH
58276: LD_INT 3
58278: MINUS
58279: PUSH
58280: LD_VAR 0 2
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: PUSH
58293: LD_VAR 0 1
58297: PUSH
58298: LD_INT 4
58300: MINUS
58301: PUSH
58302: LD_VAR 0 2
58306: PUSH
58307: LD_INT 4
58309: MINUS
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: LIST
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: ST_TO_ADDR
// end ; 3 :
58326: GO 58748
58328: LD_INT 3
58330: DOUBLE
58331: EQUAL
58332: IFTRUE 58336
58334: GO 58469
58336: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58337: LD_ADDR_VAR 0 5
58341: PUSH
58342: LD_VAR 0 1
58346: PUSH
58347: LD_INT 3
58349: PLUS
58350: PUSH
58351: LD_VAR 0 2
58355: PUSH
58356: LD_INT 4
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: PUSH
58364: LD_VAR 0 1
58368: PUSH
58369: LD_INT 4
58371: PLUS
58372: PUSH
58373: LD_VAR 0 2
58377: PUSH
58378: LD_INT 4
58380: PLUS
58381: PUSH
58382: LD_INT 5
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: LIST
58389: PUSH
58390: LD_VAR 0 1
58394: PUSH
58395: LD_INT 4
58397: MINUS
58398: PUSH
58399: LD_VAR 0 2
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: PUSH
58412: LD_VAR 0 1
58416: PUSH
58417: LD_VAR 0 2
58421: PUSH
58422: LD_INT 4
58424: MINUS
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: PUSH
58434: LD_VAR 0 1
58438: PUSH
58439: LD_INT 3
58441: MINUS
58442: PUSH
58443: LD_VAR 0 2
58447: PUSH
58448: LD_INT 3
58450: MINUS
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: LIST
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: ST_TO_ADDR
// end ; 4 :
58467: GO 58748
58469: LD_INT 4
58471: DOUBLE
58472: EQUAL
58473: IFTRUE 58477
58475: GO 58610
58477: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58478: LD_ADDR_VAR 0 5
58482: PUSH
58483: LD_VAR 0 1
58487: PUSH
58488: LD_VAR 0 2
58492: PUSH
58493: LD_INT 4
58495: PLUS
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: PUSH
58505: LD_VAR 0 1
58509: PUSH
58510: LD_INT 3
58512: PLUS
58513: PUSH
58514: LD_VAR 0 2
58518: PUSH
58519: LD_INT 3
58521: PLUS
58522: PUSH
58523: LD_INT 5
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: PUSH
58531: LD_VAR 0 1
58535: PUSH
58536: LD_INT 4
58538: PLUS
58539: PUSH
58540: LD_VAR 0 2
58544: PUSH
58545: LD_INT 4
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: LIST
58552: PUSH
58553: LD_VAR 0 1
58557: PUSH
58558: LD_VAR 0 2
58562: PUSH
58563: LD_INT 3
58565: MINUS
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: LIST
58574: PUSH
58575: LD_VAR 0 1
58579: PUSH
58580: LD_INT 4
58582: MINUS
58583: PUSH
58584: LD_VAR 0 2
58588: PUSH
58589: LD_INT 4
58591: MINUS
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: LIST
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: ST_TO_ADDR
// end ; 5 :
58608: GO 58748
58610: LD_INT 5
58612: DOUBLE
58613: EQUAL
58614: IFTRUE 58618
58616: GO 58747
58618: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58619: LD_ADDR_VAR 0 5
58623: PUSH
58624: LD_VAR 0 1
58628: PUSH
58629: LD_INT 4
58631: MINUS
58632: PUSH
58633: LD_VAR 0 2
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: PUSH
58646: LD_VAR 0 1
58650: PUSH
58651: LD_VAR 0 2
58655: PUSH
58656: LD_INT 4
58658: MINUS
58659: PUSH
58660: LD_INT 3
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: PUSH
58668: LD_VAR 0 1
58672: PUSH
58673: LD_INT 4
58675: PLUS
58676: PUSH
58677: LD_VAR 0 2
58681: PUSH
58682: LD_INT 4
58684: PLUS
58685: PUSH
58686: LD_INT 5
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: PUSH
58694: LD_VAR 0 1
58698: PUSH
58699: LD_INT 3
58701: PLUS
58702: PUSH
58703: LD_VAR 0 2
58707: PUSH
58708: LD_INT 4
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: PUSH
58716: LD_VAR 0 1
58720: PUSH
58721: LD_VAR 0 2
58725: PUSH
58726: LD_INT 3
58728: PLUS
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: LIST
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: ST_TO_ADDR
// end ; end ;
58745: GO 58748
58747: POP
// result := list ;
58748: LD_ADDR_VAR 0 4
58752: PUSH
58753: LD_VAR 0 5
58757: ST_TO_ADDR
// end ;
58758: LD_VAR 0 4
58762: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58763: LD_INT 0
58765: PPUSH
58766: PPUSH
58767: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58768: LD_VAR 0 1
58772: NOT
58773: PUSH
58774: LD_VAR 0 2
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: LD_INT 4
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: IN
58797: NOT
58798: OR
58799: IFFALSE 58803
// exit ;
58801: GO 58895
// tmp := [ ] ;
58803: LD_ADDR_VAR 0 5
58807: PUSH
58808: EMPTY
58809: ST_TO_ADDR
// for i in units do
58810: LD_ADDR_VAR 0 4
58814: PUSH
58815: LD_VAR 0 1
58819: PUSH
58820: FOR_IN
58821: IFFALSE 58864
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58823: LD_ADDR_VAR 0 5
58827: PUSH
58828: LD_VAR 0 5
58832: PPUSH
58833: LD_VAR 0 5
58837: PUSH
58838: LD_INT 1
58840: PLUS
58841: PPUSH
58842: LD_VAR 0 4
58846: PPUSH
58847: LD_VAR 0 2
58851: PPUSH
58852: CALL_OW 259
58856: PPUSH
58857: CALL_OW 2
58861: ST_TO_ADDR
58862: GO 58820
58864: POP
58865: POP
// if not tmp then
58866: LD_VAR 0 5
58870: NOT
58871: IFFALSE 58875
// exit ;
58873: GO 58895
// result := SortListByListDesc ( units , tmp ) ;
58875: LD_ADDR_VAR 0 3
58879: PUSH
58880: LD_VAR 0 1
58884: PPUSH
58885: LD_VAR 0 5
58889: PPUSH
58890: CALL_OW 77
58894: ST_TO_ADDR
// end ;
58895: LD_VAR 0 3
58899: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58900: LD_INT 0
58902: PPUSH
58903: PPUSH
58904: PPUSH
// result := false ;
58905: LD_ADDR_VAR 0 3
58909: PUSH
58910: LD_INT 0
58912: ST_TO_ADDR
// x := GetX ( building ) ;
58913: LD_ADDR_VAR 0 4
58917: PUSH
58918: LD_VAR 0 2
58922: PPUSH
58923: CALL_OW 250
58927: ST_TO_ADDR
// y := GetY ( building ) ;
58928: LD_ADDR_VAR 0 5
58932: PUSH
58933: LD_VAR 0 2
58937: PPUSH
58938: CALL_OW 251
58942: ST_TO_ADDR
// if not building or not x or not y then
58943: LD_VAR 0 2
58947: NOT
58948: PUSH
58949: LD_VAR 0 4
58953: NOT
58954: OR
58955: PUSH
58956: LD_VAR 0 5
58960: NOT
58961: OR
58962: IFFALSE 58966
// exit ;
58964: GO 59058
// if GetTaskList ( unit ) then
58966: LD_VAR 0 1
58970: PPUSH
58971: CALL_OW 437
58975: IFFALSE 59058
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58977: LD_STRING e
58979: PUSH
58980: LD_VAR 0 1
58984: PPUSH
58985: CALL_OW 437
58989: PUSH
58990: LD_INT 1
58992: ARRAY
58993: PUSH
58994: LD_INT 1
58996: ARRAY
58997: EQUAL
58998: PUSH
58999: LD_VAR 0 4
59003: PUSH
59004: LD_VAR 0 1
59008: PPUSH
59009: CALL_OW 437
59013: PUSH
59014: LD_INT 1
59016: ARRAY
59017: PUSH
59018: LD_INT 2
59020: ARRAY
59021: EQUAL
59022: AND
59023: PUSH
59024: LD_VAR 0 5
59028: PUSH
59029: LD_VAR 0 1
59033: PPUSH
59034: CALL_OW 437
59038: PUSH
59039: LD_INT 1
59041: ARRAY
59042: PUSH
59043: LD_INT 3
59045: ARRAY
59046: EQUAL
59047: AND
59048: IFFALSE 59058
// result := true end ;
59050: LD_ADDR_VAR 0 3
59054: PUSH
59055: LD_INT 1
59057: ST_TO_ADDR
// end ;
59058: LD_VAR 0 3
59062: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59063: LD_INT 0
59065: PPUSH
// result := false ;
59066: LD_ADDR_VAR 0 4
59070: PUSH
59071: LD_INT 0
59073: ST_TO_ADDR
// if GetTaskList ( unit ) then
59074: LD_VAR 0 1
59078: PPUSH
59079: CALL_OW 437
59083: IFFALSE 59166
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59085: LD_STRING M
59087: PUSH
59088: LD_VAR 0 1
59092: PPUSH
59093: CALL_OW 437
59097: PUSH
59098: LD_INT 1
59100: ARRAY
59101: PUSH
59102: LD_INT 1
59104: ARRAY
59105: EQUAL
59106: PUSH
59107: LD_VAR 0 2
59111: PUSH
59112: LD_VAR 0 1
59116: PPUSH
59117: CALL_OW 437
59121: PUSH
59122: LD_INT 1
59124: ARRAY
59125: PUSH
59126: LD_INT 2
59128: ARRAY
59129: EQUAL
59130: AND
59131: PUSH
59132: LD_VAR 0 3
59136: PUSH
59137: LD_VAR 0 1
59141: PPUSH
59142: CALL_OW 437
59146: PUSH
59147: LD_INT 1
59149: ARRAY
59150: PUSH
59151: LD_INT 3
59153: ARRAY
59154: EQUAL
59155: AND
59156: IFFALSE 59166
// result := true ;
59158: LD_ADDR_VAR 0 4
59162: PUSH
59163: LD_INT 1
59165: ST_TO_ADDR
// end ; end ;
59166: LD_VAR 0 4
59170: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59171: LD_INT 0
59173: PPUSH
59174: PPUSH
59175: PPUSH
59176: PPUSH
// if not unit or not area then
59177: LD_VAR 0 1
59181: NOT
59182: PUSH
59183: LD_VAR 0 2
59187: NOT
59188: OR
59189: IFFALSE 59193
// exit ;
59191: GO 59357
// tmp := AreaToList ( area , i ) ;
59193: LD_ADDR_VAR 0 6
59197: PUSH
59198: LD_VAR 0 2
59202: PPUSH
59203: LD_VAR 0 5
59207: PPUSH
59208: CALL_OW 517
59212: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59213: LD_ADDR_VAR 0 5
59217: PUSH
59218: DOUBLE
59219: LD_INT 1
59221: DEC
59222: ST_TO_ADDR
59223: LD_VAR 0 6
59227: PUSH
59228: LD_INT 1
59230: ARRAY
59231: PUSH
59232: FOR_TO
59233: IFFALSE 59355
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59235: LD_ADDR_VAR 0 7
59239: PUSH
59240: LD_VAR 0 6
59244: PUSH
59245: LD_INT 1
59247: ARRAY
59248: PUSH
59249: LD_VAR 0 5
59253: ARRAY
59254: PUSH
59255: LD_VAR 0 6
59259: PUSH
59260: LD_INT 2
59262: ARRAY
59263: PUSH
59264: LD_VAR 0 5
59268: ARRAY
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59274: LD_VAR 0 7
59278: PUSH
59279: LD_INT 1
59281: ARRAY
59282: PPUSH
59283: LD_VAR 0 7
59287: PUSH
59288: LD_INT 2
59290: ARRAY
59291: PPUSH
59292: CALL_OW 428
59296: PUSH
59297: LD_INT 0
59299: EQUAL
59300: IFFALSE 59353
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59302: LD_VAR 0 1
59306: PPUSH
59307: LD_VAR 0 7
59311: PUSH
59312: LD_INT 1
59314: ARRAY
59315: PPUSH
59316: LD_VAR 0 7
59320: PUSH
59321: LD_INT 2
59323: ARRAY
59324: PPUSH
59325: LD_VAR 0 3
59329: PPUSH
59330: CALL_OW 48
// result := IsPlaced ( unit ) ;
59334: LD_ADDR_VAR 0 4
59338: PUSH
59339: LD_VAR 0 1
59343: PPUSH
59344: CALL_OW 305
59348: ST_TO_ADDR
// exit ;
59349: POP
59350: POP
59351: GO 59357
// end ; end ;
59353: GO 59232
59355: POP
59356: POP
// end ;
59357: LD_VAR 0 4
59361: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59362: LD_INT 0
59364: PPUSH
59365: PPUSH
59366: PPUSH
// if not side or side > 8 then
59367: LD_VAR 0 1
59371: NOT
59372: PUSH
59373: LD_VAR 0 1
59377: PUSH
59378: LD_INT 8
59380: GREATER
59381: OR
59382: IFFALSE 59386
// exit ;
59384: GO 59573
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59386: LD_ADDR_VAR 0 4
59390: PUSH
59391: LD_INT 22
59393: PUSH
59394: LD_VAR 0 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 21
59405: PUSH
59406: LD_INT 3
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PPUSH
59417: CALL_OW 69
59421: ST_TO_ADDR
// if not tmp then
59422: LD_VAR 0 4
59426: NOT
59427: IFFALSE 59431
// exit ;
59429: GO 59573
// enable_addtolog := true ;
59431: LD_ADDR_OWVAR 81
59435: PUSH
59436: LD_INT 1
59438: ST_TO_ADDR
// AddToLog ( [ ) ;
59439: LD_STRING [
59441: PPUSH
59442: CALL_OW 561
// for i in tmp do
59446: LD_ADDR_VAR 0 3
59450: PUSH
59451: LD_VAR 0 4
59455: PUSH
59456: FOR_IN
59457: IFFALSE 59564
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59459: LD_STRING [
59461: PUSH
59462: LD_VAR 0 3
59466: PPUSH
59467: CALL_OW 266
59471: STR
59472: PUSH
59473: LD_STRING , 
59475: STR
59476: PUSH
59477: LD_VAR 0 3
59481: PPUSH
59482: CALL_OW 250
59486: STR
59487: PUSH
59488: LD_STRING , 
59490: STR
59491: PUSH
59492: LD_VAR 0 3
59496: PPUSH
59497: CALL_OW 251
59501: STR
59502: PUSH
59503: LD_STRING , 
59505: STR
59506: PUSH
59507: LD_VAR 0 3
59511: PPUSH
59512: CALL_OW 254
59516: STR
59517: PUSH
59518: LD_STRING , 
59520: STR
59521: PUSH
59522: LD_VAR 0 3
59526: PPUSH
59527: LD_INT 1
59529: PPUSH
59530: CALL_OW 268
59534: STR
59535: PUSH
59536: LD_STRING , 
59538: STR
59539: PUSH
59540: LD_VAR 0 3
59544: PPUSH
59545: LD_INT 2
59547: PPUSH
59548: CALL_OW 268
59552: STR
59553: PUSH
59554: LD_STRING ],
59556: STR
59557: PPUSH
59558: CALL_OW 561
// end ;
59562: GO 59456
59564: POP
59565: POP
// AddToLog ( ]; ) ;
59566: LD_STRING ];
59568: PPUSH
59569: CALL_OW 561
// end ;
59573: LD_VAR 0 2
59577: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59578: LD_INT 0
59580: PPUSH
59581: PPUSH
59582: PPUSH
59583: PPUSH
59584: PPUSH
// if not area or not rate or not max then
59585: LD_VAR 0 1
59589: NOT
59590: PUSH
59591: LD_VAR 0 2
59595: NOT
59596: OR
59597: PUSH
59598: LD_VAR 0 4
59602: NOT
59603: OR
59604: IFFALSE 59608
// exit ;
59606: GO 59800
// while 1 do
59608: LD_INT 1
59610: IFFALSE 59800
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59612: LD_ADDR_VAR 0 9
59616: PUSH
59617: LD_VAR 0 1
59621: PPUSH
59622: LD_INT 1
59624: PPUSH
59625: CALL_OW 287
59629: PUSH
59630: LD_INT 10
59632: MUL
59633: ST_TO_ADDR
// r := rate / 10 ;
59634: LD_ADDR_VAR 0 7
59638: PUSH
59639: LD_VAR 0 2
59643: PUSH
59644: LD_INT 10
59646: DIVREAL
59647: ST_TO_ADDR
// time := 1 1$00 ;
59648: LD_ADDR_VAR 0 8
59652: PUSH
59653: LD_INT 2100
59655: ST_TO_ADDR
// if amount < min then
59656: LD_VAR 0 9
59660: PUSH
59661: LD_VAR 0 3
59665: LESS
59666: IFFALSE 59684
// r := r * 2 else
59668: LD_ADDR_VAR 0 7
59672: PUSH
59673: LD_VAR 0 7
59677: PUSH
59678: LD_INT 2
59680: MUL
59681: ST_TO_ADDR
59682: GO 59710
// if amount > max then
59684: LD_VAR 0 9
59688: PUSH
59689: LD_VAR 0 4
59693: GREATER
59694: IFFALSE 59710
// r := r / 2 ;
59696: LD_ADDR_VAR 0 7
59700: PUSH
59701: LD_VAR 0 7
59705: PUSH
59706: LD_INT 2
59708: DIVREAL
59709: ST_TO_ADDR
// time := time / r ;
59710: LD_ADDR_VAR 0 8
59714: PUSH
59715: LD_VAR 0 8
59719: PUSH
59720: LD_VAR 0 7
59724: DIVREAL
59725: ST_TO_ADDR
// if time < 0 then
59726: LD_VAR 0 8
59730: PUSH
59731: LD_INT 0
59733: LESS
59734: IFFALSE 59751
// time := time * - 1 ;
59736: LD_ADDR_VAR 0 8
59740: PUSH
59741: LD_VAR 0 8
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: MUL
59750: ST_TO_ADDR
// wait ( time ) ;
59751: LD_VAR 0 8
59755: PPUSH
59756: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59760: LD_INT 35
59762: PPUSH
59763: LD_INT 875
59765: PPUSH
59766: CALL_OW 12
59770: PPUSH
59771: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59775: LD_INT 1
59777: PPUSH
59778: LD_INT 5
59780: PPUSH
59781: CALL_OW 12
59785: PPUSH
59786: LD_VAR 0 1
59790: PPUSH
59791: LD_INT 1
59793: PPUSH
59794: CALL_OW 55
// end ;
59798: GO 59608
// end ;
59800: LD_VAR 0 5
59804: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59805: LD_INT 0
59807: PPUSH
59808: PPUSH
59809: PPUSH
59810: PPUSH
59811: PPUSH
59812: PPUSH
59813: PPUSH
59814: PPUSH
// if not turrets or not factories then
59815: LD_VAR 0 1
59819: NOT
59820: PUSH
59821: LD_VAR 0 2
59825: NOT
59826: OR
59827: IFFALSE 59831
// exit ;
59829: GO 60138
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59831: LD_ADDR_VAR 0 10
59835: PUSH
59836: LD_INT 5
59838: PUSH
59839: LD_INT 6
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: LD_INT 4
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: LD_INT 5
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 24
59873: PUSH
59874: LD_INT 25
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 23
59883: PUSH
59884: LD_INT 27
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 42
59897: PUSH
59898: LD_INT 43
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 44
59907: PUSH
59908: LD_INT 46
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 45
59917: PUSH
59918: LD_INT 47
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
// result := [ ] ;
59935: LD_ADDR_VAR 0 3
59939: PUSH
59940: EMPTY
59941: ST_TO_ADDR
// for i in turrets do
59942: LD_ADDR_VAR 0 4
59946: PUSH
59947: LD_VAR 0 1
59951: PUSH
59952: FOR_IN
59953: IFFALSE 60136
// begin nat := GetNation ( i ) ;
59955: LD_ADDR_VAR 0 7
59959: PUSH
59960: LD_VAR 0 4
59964: PPUSH
59965: CALL_OW 248
59969: ST_TO_ADDR
// weapon := 0 ;
59970: LD_ADDR_VAR 0 8
59974: PUSH
59975: LD_INT 0
59977: ST_TO_ADDR
// if not nat then
59978: LD_VAR 0 7
59982: NOT
59983: IFFALSE 59987
// continue ;
59985: GO 59952
// for j in list [ nat ] do
59987: LD_ADDR_VAR 0 5
59991: PUSH
59992: LD_VAR 0 10
59996: PUSH
59997: LD_VAR 0 7
60001: ARRAY
60002: PUSH
60003: FOR_IN
60004: IFFALSE 60045
// if GetBWeapon ( i ) = j [ 1 ] then
60006: LD_VAR 0 4
60010: PPUSH
60011: CALL_OW 269
60015: PUSH
60016: LD_VAR 0 5
60020: PUSH
60021: LD_INT 1
60023: ARRAY
60024: EQUAL
60025: IFFALSE 60043
// begin weapon := j [ 2 ] ;
60027: LD_ADDR_VAR 0 8
60031: PUSH
60032: LD_VAR 0 5
60036: PUSH
60037: LD_INT 2
60039: ARRAY
60040: ST_TO_ADDR
// break ;
60041: GO 60045
// end ;
60043: GO 60003
60045: POP
60046: POP
// if not weapon then
60047: LD_VAR 0 8
60051: NOT
60052: IFFALSE 60056
// continue ;
60054: GO 59952
// for k in factories do
60056: LD_ADDR_VAR 0 6
60060: PUSH
60061: LD_VAR 0 2
60065: PUSH
60066: FOR_IN
60067: IFFALSE 60132
// begin weapons := AvailableWeaponList ( k ) ;
60069: LD_ADDR_VAR 0 9
60073: PUSH
60074: LD_VAR 0 6
60078: PPUSH
60079: CALL_OW 478
60083: ST_TO_ADDR
// if not weapons then
60084: LD_VAR 0 9
60088: NOT
60089: IFFALSE 60093
// continue ;
60091: GO 60066
// if weapon in weapons then
60093: LD_VAR 0 8
60097: PUSH
60098: LD_VAR 0 9
60102: IN
60103: IFFALSE 60130
// begin result := [ i , weapon ] ;
60105: LD_ADDR_VAR 0 3
60109: PUSH
60110: LD_VAR 0 4
60114: PUSH
60115: LD_VAR 0 8
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: ST_TO_ADDR
// exit ;
60124: POP
60125: POP
60126: POP
60127: POP
60128: GO 60138
// end ; end ;
60130: GO 60066
60132: POP
60133: POP
// end ;
60134: GO 59952
60136: POP
60137: POP
// end ;
60138: LD_VAR 0 3
60142: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60143: LD_INT 0
60145: PPUSH
// if not side or side > 8 then
60146: LD_VAR 0 3
60150: NOT
60151: PUSH
60152: LD_VAR 0 3
60156: PUSH
60157: LD_INT 8
60159: GREATER
60160: OR
60161: IFFALSE 60165
// exit ;
60163: GO 60224
// if not range then
60165: LD_VAR 0 4
60169: NOT
60170: IFFALSE 60181
// range := - 12 ;
60172: LD_ADDR_VAR 0 4
60176: PUSH
60177: LD_INT 12
60179: NEG
60180: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60181: LD_VAR 0 1
60185: PPUSH
60186: LD_VAR 0 2
60190: PPUSH
60191: LD_VAR 0 3
60195: PPUSH
60196: LD_VAR 0 4
60200: PPUSH
60201: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60205: LD_VAR 0 1
60209: PPUSH
60210: LD_VAR 0 2
60214: PPUSH
60215: LD_VAR 0 3
60219: PPUSH
60220: CALL_OW 331
// end ;
60224: LD_VAR 0 5
60228: RET
// export function Video ( mode ) ; begin
60229: LD_INT 0
60231: PPUSH
// ingame_video = mode ;
60232: LD_ADDR_OWVAR 52
60236: PUSH
60237: LD_VAR 0 1
60241: ST_TO_ADDR
// interface_hidden = mode ;
60242: LD_ADDR_OWVAR 54
60246: PUSH
60247: LD_VAR 0 1
60251: ST_TO_ADDR
// end ;
60252: LD_VAR 0 2
60256: RET
// export function Join ( array , element ) ; begin
60257: LD_INT 0
60259: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60260: LD_ADDR_VAR 0 3
60264: PUSH
60265: LD_VAR 0 1
60269: PPUSH
60270: LD_VAR 0 1
60274: PUSH
60275: LD_INT 1
60277: PLUS
60278: PPUSH
60279: LD_VAR 0 2
60283: PPUSH
60284: CALL_OW 1
60288: ST_TO_ADDR
// end ;
60289: LD_VAR 0 3
60293: RET
// export function JoinUnion ( array , element ) ; begin
60294: LD_INT 0
60296: PPUSH
// result := array union element ;
60297: LD_ADDR_VAR 0 3
60301: PUSH
60302: LD_VAR 0 1
60306: PUSH
60307: LD_VAR 0 2
60311: UNION
60312: ST_TO_ADDR
// end ;
60313: LD_VAR 0 3
60317: RET
// export function GetBehemoths ( side ) ; begin
60318: LD_INT 0
60320: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60321: LD_ADDR_VAR 0 2
60325: PUSH
60326: LD_INT 22
60328: PUSH
60329: LD_VAR 0 1
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 31
60340: PUSH
60341: LD_INT 25
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PPUSH
60352: CALL_OW 69
60356: ST_TO_ADDR
// end ;
60357: LD_VAR 0 2
60361: RET
// export function Shuffle ( array ) ; var i , index ; begin
60362: LD_INT 0
60364: PPUSH
60365: PPUSH
60366: PPUSH
// result := [ ] ;
60367: LD_ADDR_VAR 0 2
60371: PUSH
60372: EMPTY
60373: ST_TO_ADDR
// if not array then
60374: LD_VAR 0 1
60378: NOT
60379: IFFALSE 60383
// exit ;
60381: GO 60482
// Randomize ;
60383: CALL_OW 10
// for i = array downto 1 do
60387: LD_ADDR_VAR 0 3
60391: PUSH
60392: DOUBLE
60393: LD_VAR 0 1
60397: INC
60398: ST_TO_ADDR
60399: LD_INT 1
60401: PUSH
60402: FOR_DOWNTO
60403: IFFALSE 60480
// begin index := rand ( 1 , array ) ;
60405: LD_ADDR_VAR 0 4
60409: PUSH
60410: LD_INT 1
60412: PPUSH
60413: LD_VAR 0 1
60417: PPUSH
60418: CALL_OW 12
60422: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60423: LD_ADDR_VAR 0 2
60427: PUSH
60428: LD_VAR 0 2
60432: PPUSH
60433: LD_VAR 0 2
60437: PUSH
60438: LD_INT 1
60440: PLUS
60441: PPUSH
60442: LD_VAR 0 1
60446: PUSH
60447: LD_VAR 0 4
60451: ARRAY
60452: PPUSH
60453: CALL_OW 2
60457: ST_TO_ADDR
// array := Delete ( array , index ) ;
60458: LD_ADDR_VAR 0 1
60462: PUSH
60463: LD_VAR 0 1
60467: PPUSH
60468: LD_VAR 0 4
60472: PPUSH
60473: CALL_OW 3
60477: ST_TO_ADDR
// end ;
60478: GO 60402
60480: POP
60481: POP
// end ;
60482: LD_VAR 0 2
60486: RET
// export function GetBaseMaterials ( base ) ; begin
60487: LD_INT 0
60489: PPUSH
// result := [ 0 , 0 , 0 ] ;
60490: LD_ADDR_VAR 0 2
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: ST_TO_ADDR
// if not base then
60509: LD_VAR 0 1
60513: NOT
60514: IFFALSE 60518
// exit ;
60516: GO 60567
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60518: LD_ADDR_VAR 0 2
60522: PUSH
60523: LD_VAR 0 1
60527: PPUSH
60528: LD_INT 1
60530: PPUSH
60531: CALL_OW 275
60535: PUSH
60536: LD_VAR 0 1
60540: PPUSH
60541: LD_INT 2
60543: PPUSH
60544: CALL_OW 275
60548: PUSH
60549: LD_VAR 0 1
60553: PPUSH
60554: LD_INT 3
60556: PPUSH
60557: CALL_OW 275
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: LIST
60566: ST_TO_ADDR
// end ;
60567: LD_VAR 0 2
60571: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60572: LD_INT 0
60574: PPUSH
60575: PPUSH
// result := array ;
60576: LD_ADDR_VAR 0 3
60580: PUSH
60581: LD_VAR 0 1
60585: ST_TO_ADDR
// if size > 0 then
60586: LD_VAR 0 2
60590: PUSH
60591: LD_INT 0
60593: GREATER
60594: IFFALSE 60640
// for i := array downto size do
60596: LD_ADDR_VAR 0 4
60600: PUSH
60601: DOUBLE
60602: LD_VAR 0 1
60606: INC
60607: ST_TO_ADDR
60608: LD_VAR 0 2
60612: PUSH
60613: FOR_DOWNTO
60614: IFFALSE 60638
// result := Delete ( result , result ) ;
60616: LD_ADDR_VAR 0 3
60620: PUSH
60621: LD_VAR 0 3
60625: PPUSH
60626: LD_VAR 0 3
60630: PPUSH
60631: CALL_OW 3
60635: ST_TO_ADDR
60636: GO 60613
60638: POP
60639: POP
// end ;
60640: LD_VAR 0 3
60644: RET
// export function ComExit ( unit ) ; var tmp ; begin
60645: LD_INT 0
60647: PPUSH
60648: PPUSH
// if not IsInUnit ( unit ) then
60649: LD_VAR 0 1
60653: PPUSH
60654: CALL_OW 310
60658: NOT
60659: IFFALSE 60663
// exit ;
60661: GO 60723
// tmp := IsInUnit ( unit ) ;
60663: LD_ADDR_VAR 0 3
60667: PUSH
60668: LD_VAR 0 1
60672: PPUSH
60673: CALL_OW 310
60677: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60678: LD_VAR 0 3
60682: PPUSH
60683: CALL_OW 247
60687: PUSH
60688: LD_INT 2
60690: EQUAL
60691: IFFALSE 60704
// ComExitVehicle ( unit ) else
60693: LD_VAR 0 1
60697: PPUSH
60698: CALL_OW 121
60702: GO 60713
// ComExitBuilding ( unit ) ;
60704: LD_VAR 0 1
60708: PPUSH
60709: CALL_OW 122
// result := tmp ;
60713: LD_ADDR_VAR 0 2
60717: PUSH
60718: LD_VAR 0 3
60722: ST_TO_ADDR
// end ;
60723: LD_VAR 0 2
60727: RET
// export function ComExitAll ( units ) ; var i ; begin
60728: LD_INT 0
60730: PPUSH
60731: PPUSH
// if not units then
60732: LD_VAR 0 1
60736: NOT
60737: IFFALSE 60741
// exit ;
60739: GO 60767
// for i in units do
60741: LD_ADDR_VAR 0 3
60745: PUSH
60746: LD_VAR 0 1
60750: PUSH
60751: FOR_IN
60752: IFFALSE 60765
// ComExit ( i ) ;
60754: LD_VAR 0 3
60758: PPUSH
60759: CALL 60645 0 1
60763: GO 60751
60765: POP
60766: POP
// end ;
60767: LD_VAR 0 2
60771: RET
// export function ResetHc ; begin
60772: LD_INT 0
60774: PPUSH
// InitHc ;
60775: CALL_OW 19
// hc_importance := 0 ;
60779: LD_ADDR_OWVAR 32
60783: PUSH
60784: LD_INT 0
60786: ST_TO_ADDR
// end ;
60787: LD_VAR 0 1
60791: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60792: LD_INT 0
60794: PPUSH
60795: PPUSH
60796: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60797: LD_ADDR_VAR 0 6
60801: PUSH
60802: LD_VAR 0 1
60806: PUSH
60807: LD_VAR 0 3
60811: PLUS
60812: PUSH
60813: LD_INT 2
60815: DIV
60816: ST_TO_ADDR
// if _x < 0 then
60817: LD_VAR 0 6
60821: PUSH
60822: LD_INT 0
60824: LESS
60825: IFFALSE 60842
// _x := _x * - 1 ;
60827: LD_ADDR_VAR 0 6
60831: PUSH
60832: LD_VAR 0 6
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: MUL
60841: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60842: LD_ADDR_VAR 0 7
60846: PUSH
60847: LD_VAR 0 2
60851: PUSH
60852: LD_VAR 0 4
60856: PLUS
60857: PUSH
60858: LD_INT 2
60860: DIV
60861: ST_TO_ADDR
// if _y < 0 then
60862: LD_VAR 0 7
60866: PUSH
60867: LD_INT 0
60869: LESS
60870: IFFALSE 60887
// _y := _y * - 1 ;
60872: LD_ADDR_VAR 0 7
60876: PUSH
60877: LD_VAR 0 7
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: MUL
60886: ST_TO_ADDR
// result := [ _x , _y ] ;
60887: LD_ADDR_VAR 0 5
60891: PUSH
60892: LD_VAR 0 6
60896: PUSH
60897: LD_VAR 0 7
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: ST_TO_ADDR
// end ;
60906: LD_VAR 0 5
60910: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60911: LD_INT 0
60913: PPUSH
60914: PPUSH
60915: PPUSH
60916: PPUSH
// task := GetTaskList ( unit ) ;
60917: LD_ADDR_VAR 0 7
60921: PUSH
60922: LD_VAR 0 1
60926: PPUSH
60927: CALL_OW 437
60931: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60932: LD_VAR 0 7
60936: NOT
60937: PUSH
60938: LD_VAR 0 1
60942: PPUSH
60943: LD_VAR 0 2
60947: PPUSH
60948: CALL_OW 308
60952: NOT
60953: AND
60954: IFFALSE 60958
// exit ;
60956: GO 61076
// if IsInArea ( unit , area ) then
60958: LD_VAR 0 1
60962: PPUSH
60963: LD_VAR 0 2
60967: PPUSH
60968: CALL_OW 308
60972: IFFALSE 60990
// begin ComMoveToArea ( unit , goAway ) ;
60974: LD_VAR 0 1
60978: PPUSH
60979: LD_VAR 0 3
60983: PPUSH
60984: CALL_OW 113
// exit ;
60988: GO 61076
// end ; if task [ 1 ] [ 1 ] <> M then
60990: LD_VAR 0 7
60994: PUSH
60995: LD_INT 1
60997: ARRAY
60998: PUSH
60999: LD_INT 1
61001: ARRAY
61002: PUSH
61003: LD_STRING M
61005: NONEQUAL
61006: IFFALSE 61010
// exit ;
61008: GO 61076
// x := task [ 1 ] [ 2 ] ;
61010: LD_ADDR_VAR 0 5
61014: PUSH
61015: LD_VAR 0 7
61019: PUSH
61020: LD_INT 1
61022: ARRAY
61023: PUSH
61024: LD_INT 2
61026: ARRAY
61027: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61028: LD_ADDR_VAR 0 6
61032: PUSH
61033: LD_VAR 0 7
61037: PUSH
61038: LD_INT 1
61040: ARRAY
61041: PUSH
61042: LD_INT 3
61044: ARRAY
61045: ST_TO_ADDR
// if InArea ( x , y , area ) then
61046: LD_VAR 0 5
61050: PPUSH
61051: LD_VAR 0 6
61055: PPUSH
61056: LD_VAR 0 2
61060: PPUSH
61061: CALL_OW 309
61065: IFFALSE 61076
// ComStop ( unit ) ;
61067: LD_VAR 0 1
61071: PPUSH
61072: CALL_OW 141
// end ;
61076: LD_VAR 0 4
61080: RET
// export function Abs ( value ) ; begin
61081: LD_INT 0
61083: PPUSH
// result := value ;
61084: LD_ADDR_VAR 0 2
61088: PUSH
61089: LD_VAR 0 1
61093: ST_TO_ADDR
// if value < 0 then
61094: LD_VAR 0 1
61098: PUSH
61099: LD_INT 0
61101: LESS
61102: IFFALSE 61119
// result := value * - 1 ;
61104: LD_ADDR_VAR 0 2
61108: PUSH
61109: LD_VAR 0 1
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: MUL
61118: ST_TO_ADDR
// end ;
61119: LD_VAR 0 2
61123: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61124: LD_INT 0
61126: PPUSH
61127: PPUSH
61128: PPUSH
61129: PPUSH
61130: PPUSH
61131: PPUSH
61132: PPUSH
61133: PPUSH
// if not unit or not building then
61134: LD_VAR 0 1
61138: NOT
61139: PUSH
61140: LD_VAR 0 2
61144: NOT
61145: OR
61146: IFFALSE 61150
// exit ;
61148: GO 61376
// x := GetX ( building ) ;
61150: LD_ADDR_VAR 0 4
61154: PUSH
61155: LD_VAR 0 2
61159: PPUSH
61160: CALL_OW 250
61164: ST_TO_ADDR
// y := GetY ( building ) ;
61165: LD_ADDR_VAR 0 6
61169: PUSH
61170: LD_VAR 0 2
61174: PPUSH
61175: CALL_OW 251
61179: ST_TO_ADDR
// d := GetDir ( building ) ;
61180: LD_ADDR_VAR 0 8
61184: PUSH
61185: LD_VAR 0 2
61189: PPUSH
61190: CALL_OW 254
61194: ST_TO_ADDR
// r := 4 ;
61195: LD_ADDR_VAR 0 9
61199: PUSH
61200: LD_INT 4
61202: ST_TO_ADDR
// for i := 1 to 5 do
61203: LD_ADDR_VAR 0 10
61207: PUSH
61208: DOUBLE
61209: LD_INT 1
61211: DEC
61212: ST_TO_ADDR
61213: LD_INT 5
61215: PUSH
61216: FOR_TO
61217: IFFALSE 61374
// begin _x := ShiftX ( x , d , r + i ) ;
61219: LD_ADDR_VAR 0 5
61223: PUSH
61224: LD_VAR 0 4
61228: PPUSH
61229: LD_VAR 0 8
61233: PPUSH
61234: LD_VAR 0 9
61238: PUSH
61239: LD_VAR 0 10
61243: PLUS
61244: PPUSH
61245: CALL_OW 272
61249: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61250: LD_ADDR_VAR 0 7
61254: PUSH
61255: LD_VAR 0 6
61259: PPUSH
61260: LD_VAR 0 8
61264: PPUSH
61265: LD_VAR 0 9
61269: PUSH
61270: LD_VAR 0 10
61274: PLUS
61275: PPUSH
61276: CALL_OW 273
61280: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61281: LD_VAR 0 5
61285: PPUSH
61286: LD_VAR 0 7
61290: PPUSH
61291: CALL_OW 488
61295: PUSH
61296: LD_VAR 0 5
61300: PPUSH
61301: LD_VAR 0 7
61305: PPUSH
61306: CALL_OW 428
61310: PPUSH
61311: CALL_OW 247
61315: PUSH
61316: LD_INT 3
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: IN
61326: NOT
61327: AND
61328: IFFALSE 61372
// begin ComMoveXY ( unit , _x , _y ) ;
61330: LD_VAR 0 1
61334: PPUSH
61335: LD_VAR 0 5
61339: PPUSH
61340: LD_VAR 0 7
61344: PPUSH
61345: CALL_OW 111
// result := [ _x , _y ] ;
61349: LD_ADDR_VAR 0 3
61353: PUSH
61354: LD_VAR 0 5
61358: PUSH
61359: LD_VAR 0 7
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: ST_TO_ADDR
// exit ;
61368: POP
61369: POP
61370: GO 61376
// end ; end ;
61372: GO 61216
61374: POP
61375: POP
// end ;
61376: LD_VAR 0 3
61380: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61381: LD_INT 0
61383: PPUSH
61384: PPUSH
61385: PPUSH
// result := 0 ;
61386: LD_ADDR_VAR 0 3
61390: PUSH
61391: LD_INT 0
61393: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61394: LD_VAR 0 1
61398: PUSH
61399: LD_INT 0
61401: LESS
61402: PUSH
61403: LD_VAR 0 1
61407: PUSH
61408: LD_INT 8
61410: GREATER
61411: OR
61412: PUSH
61413: LD_VAR 0 2
61417: PUSH
61418: LD_INT 0
61420: LESS
61421: OR
61422: PUSH
61423: LD_VAR 0 2
61427: PUSH
61428: LD_INT 8
61430: GREATER
61431: OR
61432: IFFALSE 61436
// exit ;
61434: GO 61511
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61436: LD_ADDR_VAR 0 4
61440: PUSH
61441: LD_INT 22
61443: PUSH
61444: LD_VAR 0 2
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PPUSH
61453: CALL_OW 69
61457: PUSH
61458: FOR_IN
61459: IFFALSE 61509
// begin un := UnitShoot ( i ) ;
61461: LD_ADDR_VAR 0 5
61465: PUSH
61466: LD_VAR 0 4
61470: PPUSH
61471: CALL_OW 504
61475: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61476: LD_VAR 0 5
61480: PPUSH
61481: CALL_OW 255
61485: PUSH
61486: LD_VAR 0 1
61490: EQUAL
61491: IFFALSE 61507
// begin result := un ;
61493: LD_ADDR_VAR 0 3
61497: PUSH
61498: LD_VAR 0 5
61502: ST_TO_ADDR
// exit ;
61503: POP
61504: POP
61505: GO 61511
// end ; end ;
61507: GO 61458
61509: POP
61510: POP
// end ;
61511: LD_VAR 0 3
61515: RET
// export function GetCargoBay ( units ) ; begin
61516: LD_INT 0
61518: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61519: LD_ADDR_VAR 0 2
61523: PUSH
61524: LD_VAR 0 1
61528: PPUSH
61529: LD_INT 2
61531: PUSH
61532: LD_INT 34
61534: PUSH
61535: LD_INT 12
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 34
61544: PUSH
61545: LD_INT 51
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 34
61554: PUSH
61555: LD_INT 32
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 34
61564: PUSH
61565: LD_EXP 58
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: PPUSH
61581: CALL_OW 72
61585: ST_TO_ADDR
// end ;
61586: LD_VAR 0 2
61590: RET
// export function Negate ( value ) ; begin
61591: LD_INT 0
61593: PPUSH
// result := not value ;
61594: LD_ADDR_VAR 0 2
61598: PUSH
61599: LD_VAR 0 1
61603: NOT
61604: ST_TO_ADDR
// end ;
61605: LD_VAR 0 2
61609: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
61610: LD_INT 0
61612: PPUSH
// if x1 = x2 then
61613: LD_VAR 0 1
61617: PUSH
61618: LD_VAR 0 3
61622: EQUAL
61623: IFFALSE 61657
// begin if y1 > y2 then
61625: LD_VAR 0 2
61629: PUSH
61630: LD_VAR 0 4
61634: GREATER
61635: IFFALSE 61647
// result := 0 else
61637: LD_ADDR_VAR 0 5
61641: PUSH
61642: LD_INT 0
61644: ST_TO_ADDR
61645: GO 61655
// result := 3 ;
61647: LD_ADDR_VAR 0 5
61651: PUSH
61652: LD_INT 3
61654: ST_TO_ADDR
// exit ;
61655: GO 61743
// end ; if y1 = y2 then
61657: LD_VAR 0 2
61661: PUSH
61662: LD_VAR 0 4
61666: EQUAL
61667: IFFALSE 61701
// begin if x1 > x2 then
61669: LD_VAR 0 1
61673: PUSH
61674: LD_VAR 0 3
61678: GREATER
61679: IFFALSE 61691
// result := 1 else
61681: LD_ADDR_VAR 0 5
61685: PUSH
61686: LD_INT 1
61688: ST_TO_ADDR
61689: GO 61699
// result := 4 ;
61691: LD_ADDR_VAR 0 5
61695: PUSH
61696: LD_INT 4
61698: ST_TO_ADDR
// exit ;
61699: GO 61743
// end ; if x1 > x2 and y1 > y2 then
61701: LD_VAR 0 1
61705: PUSH
61706: LD_VAR 0 3
61710: GREATER
61711: PUSH
61712: LD_VAR 0 2
61716: PUSH
61717: LD_VAR 0 4
61721: GREATER
61722: AND
61723: IFFALSE 61735
// result := 2 else
61725: LD_ADDR_VAR 0 5
61729: PUSH
61730: LD_INT 2
61732: ST_TO_ADDR
61733: GO 61743
// result := 5 ;
61735: LD_ADDR_VAR 0 5
61739: PUSH
61740: LD_INT 5
61742: ST_TO_ADDR
// end ;
61743: LD_VAR 0 5
61747: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61748: LD_INT 0
61750: PPUSH
61751: PPUSH
// if not driver or not IsInUnit ( driver ) then
61752: LD_VAR 0 1
61756: NOT
61757: PUSH
61758: LD_VAR 0 1
61762: PPUSH
61763: CALL_OW 310
61767: NOT
61768: OR
61769: IFFALSE 61773
// exit ;
61771: GO 61863
// vehicle := IsInUnit ( driver ) ;
61773: LD_ADDR_VAR 0 3
61777: PUSH
61778: LD_VAR 0 1
61782: PPUSH
61783: CALL_OW 310
61787: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61788: LD_VAR 0 1
61792: PPUSH
61793: LD_STRING \
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: PUSH
61823: LD_STRING E
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_VAR 0 3
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PPUSH
61859: CALL_OW 446
// end ;
61863: LD_VAR 0 2
61867: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61868: LD_INT 0
61870: PPUSH
61871: PPUSH
// if not driver or not IsInUnit ( driver ) then
61872: LD_VAR 0 1
61876: NOT
61877: PUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: CALL_OW 310
61887: NOT
61888: OR
61889: IFFALSE 61893
// exit ;
61891: GO 61983
// vehicle := IsInUnit ( driver ) ;
61893: LD_ADDR_VAR 0 3
61897: PUSH
61898: LD_VAR 0 1
61902: PPUSH
61903: CALL_OW 310
61907: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61908: LD_VAR 0 1
61912: PPUSH
61913: LD_STRING \
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: PUSH
61943: LD_STRING E
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: LD_VAR 0 3
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PPUSH
61979: CALL_OW 447
// end ;
61983: LD_VAR 0 2
61987: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61988: LD_INT 0
61990: PPUSH
61991: PPUSH
61992: PPUSH
// tmp := [ ] ;
61993: LD_ADDR_VAR 0 5
61997: PUSH
61998: EMPTY
61999: ST_TO_ADDR
// for i in units do
62000: LD_ADDR_VAR 0 4
62004: PUSH
62005: LD_VAR 0 1
62009: PUSH
62010: FOR_IN
62011: IFFALSE 62049
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62013: LD_ADDR_VAR 0 5
62017: PUSH
62018: LD_VAR 0 5
62022: PPUSH
62023: LD_VAR 0 5
62027: PUSH
62028: LD_INT 1
62030: PLUS
62031: PPUSH
62032: LD_VAR 0 4
62036: PPUSH
62037: CALL_OW 256
62041: PPUSH
62042: CALL_OW 2
62046: ST_TO_ADDR
62047: GO 62010
62049: POP
62050: POP
// if not tmp then
62051: LD_VAR 0 5
62055: NOT
62056: IFFALSE 62060
// exit ;
62058: GO 62108
// if asc then
62060: LD_VAR 0 2
62064: IFFALSE 62088
// result := SortListByListAsc ( units , tmp ) else
62066: LD_ADDR_VAR 0 3
62070: PUSH
62071: LD_VAR 0 1
62075: PPUSH
62076: LD_VAR 0 5
62080: PPUSH
62081: CALL_OW 76
62085: ST_TO_ADDR
62086: GO 62108
// result := SortListByListDesc ( units , tmp ) ;
62088: LD_ADDR_VAR 0 3
62092: PUSH
62093: LD_VAR 0 1
62097: PPUSH
62098: LD_VAR 0 5
62102: PPUSH
62103: CALL_OW 77
62107: ST_TO_ADDR
// end ;
62108: LD_VAR 0 3
62112: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62113: LD_INT 0
62115: PPUSH
62116: PPUSH
// task := GetTaskList ( mech ) ;
62117: LD_ADDR_VAR 0 4
62121: PUSH
62122: LD_VAR 0 1
62126: PPUSH
62127: CALL_OW 437
62131: ST_TO_ADDR
// if not task then
62132: LD_VAR 0 4
62136: NOT
62137: IFFALSE 62141
// exit ;
62139: GO 62183
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62141: LD_ADDR_VAR 0 3
62145: PUSH
62146: LD_VAR 0 4
62150: PUSH
62151: LD_INT 1
62153: ARRAY
62154: PUSH
62155: LD_INT 1
62157: ARRAY
62158: PUSH
62159: LD_STRING r
62161: EQUAL
62162: PUSH
62163: LD_VAR 0 4
62167: PUSH
62168: LD_INT 1
62170: ARRAY
62171: PUSH
62172: LD_INT 4
62174: ARRAY
62175: PUSH
62176: LD_VAR 0 2
62180: EQUAL
62181: AND
62182: ST_TO_ADDR
// end ;
62183: LD_VAR 0 3
62187: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62188: LD_INT 0
62190: PPUSH
// SetDir ( unit , d ) ;
62191: LD_VAR 0 1
62195: PPUSH
62196: LD_VAR 0 4
62200: PPUSH
62201: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62205: LD_VAR 0 1
62209: PPUSH
62210: LD_VAR 0 2
62214: PPUSH
62215: LD_VAR 0 3
62219: PPUSH
62220: LD_VAR 0 5
62224: PPUSH
62225: CALL_OW 48
// end ;
62229: LD_VAR 0 6
62233: RET
// export function ToNaturalNumber ( number ) ; begin
62234: LD_INT 0
62236: PPUSH
// result := number div 1 ;
62237: LD_ADDR_VAR 0 2
62241: PUSH
62242: LD_VAR 0 1
62246: PUSH
62247: LD_INT 1
62249: DIV
62250: ST_TO_ADDR
// if number < 0 then
62251: LD_VAR 0 1
62255: PUSH
62256: LD_INT 0
62258: LESS
62259: IFFALSE 62269
// result := 0 ;
62261: LD_ADDR_VAR 0 2
62265: PUSH
62266: LD_INT 0
62268: ST_TO_ADDR
// end ; end_of_file
62269: LD_VAR 0 2
62273: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
62274: LD_INT 0
62276: PPUSH
// ar_miner := 81 ;
62277: LD_ADDR_EXP 64
62281: PUSH
62282: LD_INT 81
62284: ST_TO_ADDR
// ar_crane := 88 ;
62285: LD_ADDR_EXP 63
62289: PUSH
62290: LD_INT 88
62292: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62293: LD_ADDR_EXP 58
62297: PUSH
62298: LD_INT 89
62300: ST_TO_ADDR
// us_hack := 99 ;
62301: LD_ADDR_EXP 59
62305: PUSH
62306: LD_INT 99
62308: ST_TO_ADDR
// us_artillery := 97 ;
62309: LD_ADDR_EXP 60
62313: PUSH
62314: LD_INT 97
62316: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62317: LD_ADDR_EXP 61
62321: PUSH
62322: LD_INT 91
62324: ST_TO_ADDR
// ar_mortar := 92 ;
62325: LD_ADDR_EXP 62
62329: PUSH
62330: LD_INT 92
62332: ST_TO_ADDR
// ru_radar := 98 ;
62333: LD_ADDR_EXP 57
62337: PUSH
62338: LD_INT 98
62340: ST_TO_ADDR
// tech_Artillery := 80 ;
62341: LD_ADDR_EXP 65
62345: PUSH
62346: LD_INT 80
62348: ST_TO_ADDR
// tech_RadMat := 81 ;
62349: LD_ADDR_EXP 66
62353: PUSH
62354: LD_INT 81
62356: ST_TO_ADDR
// tech_BasicTools := 82 ;
62357: LD_ADDR_EXP 67
62361: PUSH
62362: LD_INT 82
62364: ST_TO_ADDR
// tech_Cargo := 83 ;
62365: LD_ADDR_EXP 68
62369: PUSH
62370: LD_INT 83
62372: ST_TO_ADDR
// tech_Track := 84 ;
62373: LD_ADDR_EXP 69
62377: PUSH
62378: LD_INT 84
62380: ST_TO_ADDR
// tech_Crane := 85 ;
62381: LD_ADDR_EXP 70
62385: PUSH
62386: LD_INT 85
62388: ST_TO_ADDR
// tech_Bulldozer := 86 ;
62389: LD_ADDR_EXP 71
62393: PUSH
62394: LD_INT 86
62396: ST_TO_ADDR
// tech_Hovercraft := 87 ;
62397: LD_ADDR_EXP 72
62401: PUSH
62402: LD_INT 87
62404: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
62405: LD_ADDR_EXP 73
62409: PUSH
62410: LD_INT 88
62412: ST_TO_ADDR
// class_mastodont := 31 ;
62413: LD_ADDR_EXP 74
62417: PUSH
62418: LD_INT 31
62420: ST_TO_ADDR
// class_horse := 21 ;
62421: LD_ADDR_EXP 75
62425: PUSH
62426: LD_INT 21
62428: ST_TO_ADDR
// end ;
62429: LD_VAR 0 1
62433: RET
// every 1 do
62434: GO 62436
62436: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
62437: CALL 62274 0 0
62441: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62442: LD_INT 0
62444: PPUSH
// if p2 = 100 then
62445: LD_VAR 0 2
62449: PUSH
62450: LD_INT 100
62452: EQUAL
62453: IFFALSE 63402
// begin if not StreamModeActive then
62455: LD_EXP 76
62459: NOT
62460: IFFALSE 62470
// StreamModeActive := true ;
62462: LD_ADDR_EXP 76
62466: PUSH
62467: LD_INT 1
62469: ST_TO_ADDR
// if p3 = 0 then
62470: LD_VAR 0 3
62474: PUSH
62475: LD_INT 0
62477: EQUAL
62478: IFFALSE 62484
// InitStreamMode ;
62480: CALL 63562 0 0
// if p3 = 1 then
62484: LD_VAR 0 3
62488: PUSH
62489: LD_INT 1
62491: EQUAL
62492: IFFALSE 62502
// sRocket := true ;
62494: LD_ADDR_EXP 81
62498: PUSH
62499: LD_INT 1
62501: ST_TO_ADDR
// if p3 = 2 then
62502: LD_VAR 0 3
62506: PUSH
62507: LD_INT 2
62509: EQUAL
62510: IFFALSE 62520
// sSpeed := true ;
62512: LD_ADDR_EXP 80
62516: PUSH
62517: LD_INT 1
62519: ST_TO_ADDR
// if p3 = 3 then
62520: LD_VAR 0 3
62524: PUSH
62525: LD_INT 3
62527: EQUAL
62528: IFFALSE 62538
// sEngine := true ;
62530: LD_ADDR_EXP 82
62534: PUSH
62535: LD_INT 1
62537: ST_TO_ADDR
// if p3 = 4 then
62538: LD_VAR 0 3
62542: PUSH
62543: LD_INT 4
62545: EQUAL
62546: IFFALSE 62556
// sSpec := true ;
62548: LD_ADDR_EXP 79
62552: PUSH
62553: LD_INT 1
62555: ST_TO_ADDR
// if p3 = 5 then
62556: LD_VAR 0 3
62560: PUSH
62561: LD_INT 5
62563: EQUAL
62564: IFFALSE 62574
// sLevel := true ;
62566: LD_ADDR_EXP 83
62570: PUSH
62571: LD_INT 1
62573: ST_TO_ADDR
// if p3 = 6 then
62574: LD_VAR 0 3
62578: PUSH
62579: LD_INT 6
62581: EQUAL
62582: IFFALSE 62592
// sArmoury := true ;
62584: LD_ADDR_EXP 84
62588: PUSH
62589: LD_INT 1
62591: ST_TO_ADDR
// if p3 = 7 then
62592: LD_VAR 0 3
62596: PUSH
62597: LD_INT 7
62599: EQUAL
62600: IFFALSE 62610
// sRadar := true ;
62602: LD_ADDR_EXP 85
62606: PUSH
62607: LD_INT 1
62609: ST_TO_ADDR
// if p3 = 8 then
62610: LD_VAR 0 3
62614: PUSH
62615: LD_INT 8
62617: EQUAL
62618: IFFALSE 62628
// sBunker := true ;
62620: LD_ADDR_EXP 86
62624: PUSH
62625: LD_INT 1
62627: ST_TO_ADDR
// if p3 = 9 then
62628: LD_VAR 0 3
62632: PUSH
62633: LD_INT 9
62635: EQUAL
62636: IFFALSE 62646
// sHack := true ;
62638: LD_ADDR_EXP 87
62642: PUSH
62643: LD_INT 1
62645: ST_TO_ADDR
// if p3 = 10 then
62646: LD_VAR 0 3
62650: PUSH
62651: LD_INT 10
62653: EQUAL
62654: IFFALSE 62664
// sFire := true ;
62656: LD_ADDR_EXP 88
62660: PUSH
62661: LD_INT 1
62663: ST_TO_ADDR
// if p3 = 11 then
62664: LD_VAR 0 3
62668: PUSH
62669: LD_INT 11
62671: EQUAL
62672: IFFALSE 62682
// sRefresh := true ;
62674: LD_ADDR_EXP 89
62678: PUSH
62679: LD_INT 1
62681: ST_TO_ADDR
// if p3 = 12 then
62682: LD_VAR 0 3
62686: PUSH
62687: LD_INT 12
62689: EQUAL
62690: IFFALSE 62700
// sExp := true ;
62692: LD_ADDR_EXP 90
62696: PUSH
62697: LD_INT 1
62699: ST_TO_ADDR
// if p3 = 13 then
62700: LD_VAR 0 3
62704: PUSH
62705: LD_INT 13
62707: EQUAL
62708: IFFALSE 62718
// sDepot := true ;
62710: LD_ADDR_EXP 91
62714: PUSH
62715: LD_INT 1
62717: ST_TO_ADDR
// if p3 = 14 then
62718: LD_VAR 0 3
62722: PUSH
62723: LD_INT 14
62725: EQUAL
62726: IFFALSE 62736
// sFlag := true ;
62728: LD_ADDR_EXP 92
62732: PUSH
62733: LD_INT 1
62735: ST_TO_ADDR
// if p3 = 15 then
62736: LD_VAR 0 3
62740: PUSH
62741: LD_INT 15
62743: EQUAL
62744: IFFALSE 62754
// sKamikadze := true ;
62746: LD_ADDR_EXP 100
62750: PUSH
62751: LD_INT 1
62753: ST_TO_ADDR
// if p3 = 16 then
62754: LD_VAR 0 3
62758: PUSH
62759: LD_INT 16
62761: EQUAL
62762: IFFALSE 62772
// sTroll := true ;
62764: LD_ADDR_EXP 101
62768: PUSH
62769: LD_INT 1
62771: ST_TO_ADDR
// if p3 = 17 then
62772: LD_VAR 0 3
62776: PUSH
62777: LD_INT 17
62779: EQUAL
62780: IFFALSE 62790
// sSlow := true ;
62782: LD_ADDR_EXP 102
62786: PUSH
62787: LD_INT 1
62789: ST_TO_ADDR
// if p3 = 18 then
62790: LD_VAR 0 3
62794: PUSH
62795: LD_INT 18
62797: EQUAL
62798: IFFALSE 62808
// sLack := true ;
62800: LD_ADDR_EXP 103
62804: PUSH
62805: LD_INT 1
62807: ST_TO_ADDR
// if p3 = 19 then
62808: LD_VAR 0 3
62812: PUSH
62813: LD_INT 19
62815: EQUAL
62816: IFFALSE 62826
// sTank := true ;
62818: LD_ADDR_EXP 105
62822: PUSH
62823: LD_INT 1
62825: ST_TO_ADDR
// if p3 = 20 then
62826: LD_VAR 0 3
62830: PUSH
62831: LD_INT 20
62833: EQUAL
62834: IFFALSE 62844
// sRemote := true ;
62836: LD_ADDR_EXP 106
62840: PUSH
62841: LD_INT 1
62843: ST_TO_ADDR
// if p3 = 21 then
62844: LD_VAR 0 3
62848: PUSH
62849: LD_INT 21
62851: EQUAL
62852: IFFALSE 62862
// sPowell := true ;
62854: LD_ADDR_EXP 107
62858: PUSH
62859: LD_INT 1
62861: ST_TO_ADDR
// if p3 = 22 then
62862: LD_VAR 0 3
62866: PUSH
62867: LD_INT 22
62869: EQUAL
62870: IFFALSE 62880
// sTeleport := true ;
62872: LD_ADDR_EXP 110
62876: PUSH
62877: LD_INT 1
62879: ST_TO_ADDR
// if p3 = 23 then
62880: LD_VAR 0 3
62884: PUSH
62885: LD_INT 23
62887: EQUAL
62888: IFFALSE 62898
// sOilTower := true ;
62890: LD_ADDR_EXP 112
62894: PUSH
62895: LD_INT 1
62897: ST_TO_ADDR
// if p3 = 24 then
62898: LD_VAR 0 3
62902: PUSH
62903: LD_INT 24
62905: EQUAL
62906: IFFALSE 62916
// sShovel := true ;
62908: LD_ADDR_EXP 113
62912: PUSH
62913: LD_INT 1
62915: ST_TO_ADDR
// if p3 = 25 then
62916: LD_VAR 0 3
62920: PUSH
62921: LD_INT 25
62923: EQUAL
62924: IFFALSE 62934
// sSheik := true ;
62926: LD_ADDR_EXP 114
62930: PUSH
62931: LD_INT 1
62933: ST_TO_ADDR
// if p3 = 26 then
62934: LD_VAR 0 3
62938: PUSH
62939: LD_INT 26
62941: EQUAL
62942: IFFALSE 62952
// sEarthquake := true ;
62944: LD_ADDR_EXP 116
62948: PUSH
62949: LD_INT 1
62951: ST_TO_ADDR
// if p3 = 27 then
62952: LD_VAR 0 3
62956: PUSH
62957: LD_INT 27
62959: EQUAL
62960: IFFALSE 62970
// sAI := true ;
62962: LD_ADDR_EXP 117
62966: PUSH
62967: LD_INT 1
62969: ST_TO_ADDR
// if p3 = 28 then
62970: LD_VAR 0 3
62974: PUSH
62975: LD_INT 28
62977: EQUAL
62978: IFFALSE 62988
// sCargo := true ;
62980: LD_ADDR_EXP 120
62984: PUSH
62985: LD_INT 1
62987: ST_TO_ADDR
// if p3 = 29 then
62988: LD_VAR 0 3
62992: PUSH
62993: LD_INT 29
62995: EQUAL
62996: IFFALSE 63006
// sDLaser := true ;
62998: LD_ADDR_EXP 121
63002: PUSH
63003: LD_INT 1
63005: ST_TO_ADDR
// if p3 = 30 then
63006: LD_VAR 0 3
63010: PUSH
63011: LD_INT 30
63013: EQUAL
63014: IFFALSE 63024
// sExchange := true ;
63016: LD_ADDR_EXP 122
63020: PUSH
63021: LD_INT 1
63023: ST_TO_ADDR
// if p3 = 31 then
63024: LD_VAR 0 3
63028: PUSH
63029: LD_INT 31
63031: EQUAL
63032: IFFALSE 63042
// sFac := true ;
63034: LD_ADDR_EXP 123
63038: PUSH
63039: LD_INT 1
63041: ST_TO_ADDR
// if p3 = 32 then
63042: LD_VAR 0 3
63046: PUSH
63047: LD_INT 32
63049: EQUAL
63050: IFFALSE 63060
// sPower := true ;
63052: LD_ADDR_EXP 124
63056: PUSH
63057: LD_INT 1
63059: ST_TO_ADDR
// if p3 = 33 then
63060: LD_VAR 0 3
63064: PUSH
63065: LD_INT 33
63067: EQUAL
63068: IFFALSE 63078
// sRandom := true ;
63070: LD_ADDR_EXP 125
63074: PUSH
63075: LD_INT 1
63077: ST_TO_ADDR
// if p3 = 34 then
63078: LD_VAR 0 3
63082: PUSH
63083: LD_INT 34
63085: EQUAL
63086: IFFALSE 63096
// sShield := true ;
63088: LD_ADDR_EXP 126
63092: PUSH
63093: LD_INT 1
63095: ST_TO_ADDR
// if p3 = 35 then
63096: LD_VAR 0 3
63100: PUSH
63101: LD_INT 35
63103: EQUAL
63104: IFFALSE 63114
// sTime := true ;
63106: LD_ADDR_EXP 127
63110: PUSH
63111: LD_INT 1
63113: ST_TO_ADDR
// if p3 = 36 then
63114: LD_VAR 0 3
63118: PUSH
63119: LD_INT 36
63121: EQUAL
63122: IFFALSE 63132
// sTools := true ;
63124: LD_ADDR_EXP 128
63128: PUSH
63129: LD_INT 1
63131: ST_TO_ADDR
// if p3 = 101 then
63132: LD_VAR 0 3
63136: PUSH
63137: LD_INT 101
63139: EQUAL
63140: IFFALSE 63150
// sSold := true ;
63142: LD_ADDR_EXP 93
63146: PUSH
63147: LD_INT 1
63149: ST_TO_ADDR
// if p3 = 102 then
63150: LD_VAR 0 3
63154: PUSH
63155: LD_INT 102
63157: EQUAL
63158: IFFALSE 63168
// sDiff := true ;
63160: LD_ADDR_EXP 94
63164: PUSH
63165: LD_INT 1
63167: ST_TO_ADDR
// if p3 = 103 then
63168: LD_VAR 0 3
63172: PUSH
63173: LD_INT 103
63175: EQUAL
63176: IFFALSE 63186
// sFog := true ;
63178: LD_ADDR_EXP 97
63182: PUSH
63183: LD_INT 1
63185: ST_TO_ADDR
// if p3 = 104 then
63186: LD_VAR 0 3
63190: PUSH
63191: LD_INT 104
63193: EQUAL
63194: IFFALSE 63204
// sReset := true ;
63196: LD_ADDR_EXP 98
63200: PUSH
63201: LD_INT 1
63203: ST_TO_ADDR
// if p3 = 105 then
63204: LD_VAR 0 3
63208: PUSH
63209: LD_INT 105
63211: EQUAL
63212: IFFALSE 63222
// sSun := true ;
63214: LD_ADDR_EXP 99
63218: PUSH
63219: LD_INT 1
63221: ST_TO_ADDR
// if p3 = 106 then
63222: LD_VAR 0 3
63226: PUSH
63227: LD_INT 106
63229: EQUAL
63230: IFFALSE 63240
// sTiger := true ;
63232: LD_ADDR_EXP 95
63236: PUSH
63237: LD_INT 1
63239: ST_TO_ADDR
// if p3 = 107 then
63240: LD_VAR 0 3
63244: PUSH
63245: LD_INT 107
63247: EQUAL
63248: IFFALSE 63258
// sBomb := true ;
63250: LD_ADDR_EXP 96
63254: PUSH
63255: LD_INT 1
63257: ST_TO_ADDR
// if p3 = 108 then
63258: LD_VAR 0 3
63262: PUSH
63263: LD_INT 108
63265: EQUAL
63266: IFFALSE 63276
// sWound := true ;
63268: LD_ADDR_EXP 104
63272: PUSH
63273: LD_INT 1
63275: ST_TO_ADDR
// if p3 = 109 then
63276: LD_VAR 0 3
63280: PUSH
63281: LD_INT 109
63283: EQUAL
63284: IFFALSE 63294
// sBetray := true ;
63286: LD_ADDR_EXP 108
63290: PUSH
63291: LD_INT 1
63293: ST_TO_ADDR
// if p3 = 110 then
63294: LD_VAR 0 3
63298: PUSH
63299: LD_INT 110
63301: EQUAL
63302: IFFALSE 63312
// sContamin := true ;
63304: LD_ADDR_EXP 109
63308: PUSH
63309: LD_INT 1
63311: ST_TO_ADDR
// if p3 = 111 then
63312: LD_VAR 0 3
63316: PUSH
63317: LD_INT 111
63319: EQUAL
63320: IFFALSE 63330
// sOil := true ;
63322: LD_ADDR_EXP 111
63326: PUSH
63327: LD_INT 1
63329: ST_TO_ADDR
// if p3 = 112 then
63330: LD_VAR 0 3
63334: PUSH
63335: LD_INT 112
63337: EQUAL
63338: IFFALSE 63348
// sStu := true ;
63340: LD_ADDR_EXP 115
63344: PUSH
63345: LD_INT 1
63347: ST_TO_ADDR
// if p3 = 113 then
63348: LD_VAR 0 3
63352: PUSH
63353: LD_INT 113
63355: EQUAL
63356: IFFALSE 63366
// sBazooka := true ;
63358: LD_ADDR_EXP 118
63362: PUSH
63363: LD_INT 1
63365: ST_TO_ADDR
// if p3 = 114 then
63366: LD_VAR 0 3
63370: PUSH
63371: LD_INT 114
63373: EQUAL
63374: IFFALSE 63384
// sMortar := true ;
63376: LD_ADDR_EXP 119
63380: PUSH
63381: LD_INT 1
63383: ST_TO_ADDR
// if p3 = 115 then
63384: LD_VAR 0 3
63388: PUSH
63389: LD_INT 115
63391: EQUAL
63392: IFFALSE 63402
// sRanger := true ;
63394: LD_ADDR_EXP 129
63398: PUSH
63399: LD_INT 1
63401: ST_TO_ADDR
// end ; if p2 = 101 then
63402: LD_VAR 0 2
63406: PUSH
63407: LD_INT 101
63409: EQUAL
63410: IFFALSE 63538
// begin case p3 of 1 :
63412: LD_VAR 0 3
63416: PUSH
63417: LD_INT 1
63419: DOUBLE
63420: EQUAL
63421: IFTRUE 63425
63423: GO 63432
63425: POP
// hHackUnlimitedResources ; 2 :
63426: CALL 74575 0 0
63430: GO 63538
63432: LD_INT 2
63434: DOUBLE
63435: EQUAL
63436: IFTRUE 63440
63438: GO 63447
63440: POP
// hHackSetLevel10 ; 3 :
63441: CALL 74708 0 0
63445: GO 63538
63447: LD_INT 3
63449: DOUBLE
63450: EQUAL
63451: IFTRUE 63455
63453: GO 63462
63455: POP
// hHackSetLevel10YourUnits ; 4 :
63456: CALL 74793 0 0
63460: GO 63538
63462: LD_INT 4
63464: DOUBLE
63465: EQUAL
63466: IFTRUE 63470
63468: GO 63477
63470: POP
// hHackInvincible ; 5 :
63471: CALL 75241 0 0
63475: GO 63538
63477: LD_INT 5
63479: DOUBLE
63480: EQUAL
63481: IFTRUE 63485
63483: GO 63492
63485: POP
// hHackInvisible ; 6 :
63486: CALL 75352 0 0
63490: GO 63538
63492: LD_INT 6
63494: DOUBLE
63495: EQUAL
63496: IFTRUE 63500
63498: GO 63507
63500: POP
// hHackChangeYourSide ; 7 :
63501: CALL 75409 0 0
63505: GO 63538
63507: LD_INT 7
63509: DOUBLE
63510: EQUAL
63511: IFTRUE 63515
63513: GO 63522
63515: POP
// hHackChangeUnitSide ; 8 :
63516: CALL 75451 0 0
63520: GO 63538
63522: LD_INT 8
63524: DOUBLE
63525: EQUAL
63526: IFTRUE 63530
63528: GO 63537
63530: POP
// hHackFog ; end ;
63531: CALL 75552 0 0
63535: GO 63538
63537: POP
// end ; end ;
63538: LD_VAR 0 7
63542: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
63543: GO 63545
63545: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
63546: LD_STRING initStreamRollete();
63548: PPUSH
63549: CALL_OW 559
// InitStreamMode ;
63553: CALL 63562 0 0
// DefineStreamItems ( ) ;
63557: CALL 64002 0 0
// end ;
63561: END
// function InitStreamMode ; begin
63562: LD_INT 0
63564: PPUSH
// streamModeActive := false ;
63565: LD_ADDR_EXP 76
63569: PUSH
63570: LD_INT 0
63572: ST_TO_ADDR
// normalCounter := 36 ;
63573: LD_ADDR_EXP 77
63577: PUSH
63578: LD_INT 36
63580: ST_TO_ADDR
// hardcoreCounter := 16 ;
63581: LD_ADDR_EXP 78
63585: PUSH
63586: LD_INT 16
63588: ST_TO_ADDR
// sRocket := false ;
63589: LD_ADDR_EXP 81
63593: PUSH
63594: LD_INT 0
63596: ST_TO_ADDR
// sSpeed := false ;
63597: LD_ADDR_EXP 80
63601: PUSH
63602: LD_INT 0
63604: ST_TO_ADDR
// sEngine := false ;
63605: LD_ADDR_EXP 82
63609: PUSH
63610: LD_INT 0
63612: ST_TO_ADDR
// sSpec := false ;
63613: LD_ADDR_EXP 79
63617: PUSH
63618: LD_INT 0
63620: ST_TO_ADDR
// sLevel := false ;
63621: LD_ADDR_EXP 83
63625: PUSH
63626: LD_INT 0
63628: ST_TO_ADDR
// sArmoury := false ;
63629: LD_ADDR_EXP 84
63633: PUSH
63634: LD_INT 0
63636: ST_TO_ADDR
// sRadar := false ;
63637: LD_ADDR_EXP 85
63641: PUSH
63642: LD_INT 0
63644: ST_TO_ADDR
// sBunker := false ;
63645: LD_ADDR_EXP 86
63649: PUSH
63650: LD_INT 0
63652: ST_TO_ADDR
// sHack := false ;
63653: LD_ADDR_EXP 87
63657: PUSH
63658: LD_INT 0
63660: ST_TO_ADDR
// sFire := false ;
63661: LD_ADDR_EXP 88
63665: PUSH
63666: LD_INT 0
63668: ST_TO_ADDR
// sRefresh := false ;
63669: LD_ADDR_EXP 89
63673: PUSH
63674: LD_INT 0
63676: ST_TO_ADDR
// sExp := false ;
63677: LD_ADDR_EXP 90
63681: PUSH
63682: LD_INT 0
63684: ST_TO_ADDR
// sDepot := false ;
63685: LD_ADDR_EXP 91
63689: PUSH
63690: LD_INT 0
63692: ST_TO_ADDR
// sFlag := false ;
63693: LD_ADDR_EXP 92
63697: PUSH
63698: LD_INT 0
63700: ST_TO_ADDR
// sKamikadze := false ;
63701: LD_ADDR_EXP 100
63705: PUSH
63706: LD_INT 0
63708: ST_TO_ADDR
// sTroll := false ;
63709: LD_ADDR_EXP 101
63713: PUSH
63714: LD_INT 0
63716: ST_TO_ADDR
// sSlow := false ;
63717: LD_ADDR_EXP 102
63721: PUSH
63722: LD_INT 0
63724: ST_TO_ADDR
// sLack := false ;
63725: LD_ADDR_EXP 103
63729: PUSH
63730: LD_INT 0
63732: ST_TO_ADDR
// sTank := false ;
63733: LD_ADDR_EXP 105
63737: PUSH
63738: LD_INT 0
63740: ST_TO_ADDR
// sRemote := false ;
63741: LD_ADDR_EXP 106
63745: PUSH
63746: LD_INT 0
63748: ST_TO_ADDR
// sPowell := false ;
63749: LD_ADDR_EXP 107
63753: PUSH
63754: LD_INT 0
63756: ST_TO_ADDR
// sTeleport := false ;
63757: LD_ADDR_EXP 110
63761: PUSH
63762: LD_INT 0
63764: ST_TO_ADDR
// sOilTower := false ;
63765: LD_ADDR_EXP 112
63769: PUSH
63770: LD_INT 0
63772: ST_TO_ADDR
// sShovel := false ;
63773: LD_ADDR_EXP 113
63777: PUSH
63778: LD_INT 0
63780: ST_TO_ADDR
// sSheik := false ;
63781: LD_ADDR_EXP 114
63785: PUSH
63786: LD_INT 0
63788: ST_TO_ADDR
// sEarthquake := false ;
63789: LD_ADDR_EXP 116
63793: PUSH
63794: LD_INT 0
63796: ST_TO_ADDR
// sAI := false ;
63797: LD_ADDR_EXP 117
63801: PUSH
63802: LD_INT 0
63804: ST_TO_ADDR
// sCargo := false ;
63805: LD_ADDR_EXP 120
63809: PUSH
63810: LD_INT 0
63812: ST_TO_ADDR
// sDLaser := false ;
63813: LD_ADDR_EXP 121
63817: PUSH
63818: LD_INT 0
63820: ST_TO_ADDR
// sExchange := false ;
63821: LD_ADDR_EXP 122
63825: PUSH
63826: LD_INT 0
63828: ST_TO_ADDR
// sFac := false ;
63829: LD_ADDR_EXP 123
63833: PUSH
63834: LD_INT 0
63836: ST_TO_ADDR
// sPower := false ;
63837: LD_ADDR_EXP 124
63841: PUSH
63842: LD_INT 0
63844: ST_TO_ADDR
// sRandom := false ;
63845: LD_ADDR_EXP 125
63849: PUSH
63850: LD_INT 0
63852: ST_TO_ADDR
// sShield := false ;
63853: LD_ADDR_EXP 126
63857: PUSH
63858: LD_INT 0
63860: ST_TO_ADDR
// sTime := false ;
63861: LD_ADDR_EXP 127
63865: PUSH
63866: LD_INT 0
63868: ST_TO_ADDR
// sTools := false ;
63869: LD_ADDR_EXP 128
63873: PUSH
63874: LD_INT 0
63876: ST_TO_ADDR
// sSold := false ;
63877: LD_ADDR_EXP 93
63881: PUSH
63882: LD_INT 0
63884: ST_TO_ADDR
// sDiff := false ;
63885: LD_ADDR_EXP 94
63889: PUSH
63890: LD_INT 0
63892: ST_TO_ADDR
// sFog := false ;
63893: LD_ADDR_EXP 97
63897: PUSH
63898: LD_INT 0
63900: ST_TO_ADDR
// sReset := false ;
63901: LD_ADDR_EXP 98
63905: PUSH
63906: LD_INT 0
63908: ST_TO_ADDR
// sSun := false ;
63909: LD_ADDR_EXP 99
63913: PUSH
63914: LD_INT 0
63916: ST_TO_ADDR
// sTiger := false ;
63917: LD_ADDR_EXP 95
63921: PUSH
63922: LD_INT 0
63924: ST_TO_ADDR
// sBomb := false ;
63925: LD_ADDR_EXP 96
63929: PUSH
63930: LD_INT 0
63932: ST_TO_ADDR
// sWound := false ;
63933: LD_ADDR_EXP 104
63937: PUSH
63938: LD_INT 0
63940: ST_TO_ADDR
// sBetray := false ;
63941: LD_ADDR_EXP 108
63945: PUSH
63946: LD_INT 0
63948: ST_TO_ADDR
// sContamin := false ;
63949: LD_ADDR_EXP 109
63953: PUSH
63954: LD_INT 0
63956: ST_TO_ADDR
// sOil := false ;
63957: LD_ADDR_EXP 111
63961: PUSH
63962: LD_INT 0
63964: ST_TO_ADDR
// sStu := false ;
63965: LD_ADDR_EXP 115
63969: PUSH
63970: LD_INT 0
63972: ST_TO_ADDR
// sBazooka := false ;
63973: LD_ADDR_EXP 118
63977: PUSH
63978: LD_INT 0
63980: ST_TO_ADDR
// sMortar := false ;
63981: LD_ADDR_EXP 119
63985: PUSH
63986: LD_INT 0
63988: ST_TO_ADDR
// sRanger := false ;
63989: LD_ADDR_EXP 129
63993: PUSH
63994: LD_INT 0
63996: ST_TO_ADDR
// end ;
63997: LD_VAR 0 1
64001: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
64002: LD_INT 0
64004: PPUSH
64005: PPUSH
64006: PPUSH
64007: PPUSH
64008: PPUSH
// result := [ ] ;
64009: LD_ADDR_VAR 0 1
64013: PUSH
64014: EMPTY
64015: ST_TO_ADDR
// if campaign_id = 1 then
64016: LD_OWVAR 69
64020: PUSH
64021: LD_INT 1
64023: EQUAL
64024: IFFALSE 66962
// begin case mission_number of 1 :
64026: LD_OWVAR 70
64030: PUSH
64031: LD_INT 1
64033: DOUBLE
64034: EQUAL
64035: IFTRUE 64039
64037: GO 64103
64039: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
64040: LD_ADDR_VAR 0 1
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: LD_INT 4
64050: PUSH
64051: LD_INT 11
64053: PUSH
64054: LD_INT 12
64056: PUSH
64057: LD_INT 15
64059: PUSH
64060: LD_INT 16
64062: PUSH
64063: LD_INT 22
64065: PUSH
64066: LD_INT 23
64068: PUSH
64069: LD_INT 26
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 101
64085: PUSH
64086: LD_INT 102
64088: PUSH
64089: LD_INT 106
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: ST_TO_ADDR
64101: GO 66960
64103: LD_INT 2
64105: DOUBLE
64106: EQUAL
64107: IFTRUE 64111
64109: GO 64183
64111: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
64112: LD_ADDR_VAR 0 1
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: LD_INT 4
64122: PUSH
64123: LD_INT 11
64125: PUSH
64126: LD_INT 12
64128: PUSH
64129: LD_INT 15
64131: PUSH
64132: LD_INT 16
64134: PUSH
64135: LD_INT 22
64137: PUSH
64138: LD_INT 23
64140: PUSH
64141: LD_INT 26
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 101
64157: PUSH
64158: LD_INT 102
64160: PUSH
64161: LD_INT 105
64163: PUSH
64164: LD_INT 106
64166: PUSH
64167: LD_INT 108
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: ST_TO_ADDR
64181: GO 66960
64183: LD_INT 3
64185: DOUBLE
64186: EQUAL
64187: IFTRUE 64191
64189: GO 64267
64191: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
64192: LD_ADDR_VAR 0 1
64196: PUSH
64197: LD_INT 2
64199: PUSH
64200: LD_INT 4
64202: PUSH
64203: LD_INT 5
64205: PUSH
64206: LD_INT 11
64208: PUSH
64209: LD_INT 12
64211: PUSH
64212: LD_INT 15
64214: PUSH
64215: LD_INT 16
64217: PUSH
64218: LD_INT 22
64220: PUSH
64221: LD_INT 26
64223: PUSH
64224: LD_INT 36
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 101
64241: PUSH
64242: LD_INT 102
64244: PUSH
64245: LD_INT 105
64247: PUSH
64248: LD_INT 106
64250: PUSH
64251: LD_INT 108
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: ST_TO_ADDR
64265: GO 66960
64267: LD_INT 4
64269: DOUBLE
64270: EQUAL
64271: IFTRUE 64275
64273: GO 64359
64275: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
64276: LD_ADDR_VAR 0 1
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 4
64286: PUSH
64287: LD_INT 5
64289: PUSH
64290: LD_INT 8
64292: PUSH
64293: LD_INT 11
64295: PUSH
64296: LD_INT 12
64298: PUSH
64299: LD_INT 15
64301: PUSH
64302: LD_INT 16
64304: PUSH
64305: LD_INT 22
64307: PUSH
64308: LD_INT 23
64310: PUSH
64311: LD_INT 26
64313: PUSH
64314: LD_INT 36
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 101
64333: PUSH
64334: LD_INT 102
64336: PUSH
64337: LD_INT 105
64339: PUSH
64340: LD_INT 106
64342: PUSH
64343: LD_INT 108
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: ST_TO_ADDR
64357: GO 66960
64359: LD_INT 5
64361: DOUBLE
64362: EQUAL
64363: IFTRUE 64367
64365: GO 64467
64367: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
64368: LD_ADDR_VAR 0 1
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: LD_INT 4
64378: PUSH
64379: LD_INT 5
64381: PUSH
64382: LD_INT 6
64384: PUSH
64385: LD_INT 8
64387: PUSH
64388: LD_INT 11
64390: PUSH
64391: LD_INT 12
64393: PUSH
64394: LD_INT 15
64396: PUSH
64397: LD_INT 16
64399: PUSH
64400: LD_INT 22
64402: PUSH
64403: LD_INT 23
64405: PUSH
64406: LD_INT 25
64408: PUSH
64409: LD_INT 26
64411: PUSH
64412: LD_INT 36
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 101
64433: PUSH
64434: LD_INT 102
64436: PUSH
64437: LD_INT 105
64439: PUSH
64440: LD_INT 106
64442: PUSH
64443: LD_INT 108
64445: PUSH
64446: LD_INT 109
64448: PUSH
64449: LD_INT 112
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: ST_TO_ADDR
64465: GO 66960
64467: LD_INT 6
64469: DOUBLE
64470: EQUAL
64471: IFTRUE 64475
64473: GO 64595
64475: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
64476: LD_ADDR_VAR 0 1
64480: PUSH
64481: LD_INT 2
64483: PUSH
64484: LD_INT 4
64486: PUSH
64487: LD_INT 5
64489: PUSH
64490: LD_INT 6
64492: PUSH
64493: LD_INT 8
64495: PUSH
64496: LD_INT 11
64498: PUSH
64499: LD_INT 12
64501: PUSH
64502: LD_INT 15
64504: PUSH
64505: LD_INT 16
64507: PUSH
64508: LD_INT 20
64510: PUSH
64511: LD_INT 21
64513: PUSH
64514: LD_INT 22
64516: PUSH
64517: LD_INT 23
64519: PUSH
64520: LD_INT 25
64522: PUSH
64523: LD_INT 26
64525: PUSH
64526: LD_INT 30
64528: PUSH
64529: LD_INT 31
64531: PUSH
64532: LD_INT 32
64534: PUSH
64535: LD_INT 36
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 101
64561: PUSH
64562: LD_INT 102
64564: PUSH
64565: LD_INT 105
64567: PUSH
64568: LD_INT 106
64570: PUSH
64571: LD_INT 108
64573: PUSH
64574: LD_INT 109
64576: PUSH
64577: LD_INT 112
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: ST_TO_ADDR
64593: GO 66960
64595: LD_INT 7
64597: DOUBLE
64598: EQUAL
64599: IFTRUE 64603
64601: GO 64703
64603: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
64604: LD_ADDR_VAR 0 1
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: LD_INT 4
64614: PUSH
64615: LD_INT 5
64617: PUSH
64618: LD_INT 7
64620: PUSH
64621: LD_INT 11
64623: PUSH
64624: LD_INT 12
64626: PUSH
64627: LD_INT 15
64629: PUSH
64630: LD_INT 16
64632: PUSH
64633: LD_INT 20
64635: PUSH
64636: LD_INT 21
64638: PUSH
64639: LD_INT 22
64641: PUSH
64642: LD_INT 23
64644: PUSH
64645: LD_INT 25
64647: PUSH
64648: LD_INT 26
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 101
64669: PUSH
64670: LD_INT 102
64672: PUSH
64673: LD_INT 103
64675: PUSH
64676: LD_INT 105
64678: PUSH
64679: LD_INT 106
64681: PUSH
64682: LD_INT 108
64684: PUSH
64685: LD_INT 112
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: ST_TO_ADDR
64701: GO 66960
64703: LD_INT 8
64705: DOUBLE
64706: EQUAL
64707: IFTRUE 64711
64709: GO 64839
64711: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
64712: LD_ADDR_VAR 0 1
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: LD_INT 4
64722: PUSH
64723: LD_INT 5
64725: PUSH
64726: LD_INT 6
64728: PUSH
64729: LD_INT 7
64731: PUSH
64732: LD_INT 8
64734: PUSH
64735: LD_INT 11
64737: PUSH
64738: LD_INT 12
64740: PUSH
64741: LD_INT 15
64743: PUSH
64744: LD_INT 16
64746: PUSH
64747: LD_INT 20
64749: PUSH
64750: LD_INT 21
64752: PUSH
64753: LD_INT 22
64755: PUSH
64756: LD_INT 23
64758: PUSH
64759: LD_INT 25
64761: PUSH
64762: LD_INT 26
64764: PUSH
64765: LD_INT 30
64767: PUSH
64768: LD_INT 31
64770: PUSH
64771: LD_INT 32
64773: PUSH
64774: LD_INT 36
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 101
64801: PUSH
64802: LD_INT 102
64804: PUSH
64805: LD_INT 103
64807: PUSH
64808: LD_INT 105
64810: PUSH
64811: LD_INT 106
64813: PUSH
64814: LD_INT 108
64816: PUSH
64817: LD_INT 109
64819: PUSH
64820: LD_INT 112
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: ST_TO_ADDR
64837: GO 66960
64839: LD_INT 9
64841: DOUBLE
64842: EQUAL
64843: IFTRUE 64847
64845: GO 64983
64847: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
64848: LD_ADDR_VAR 0 1
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: LD_INT 4
64858: PUSH
64859: LD_INT 5
64861: PUSH
64862: LD_INT 6
64864: PUSH
64865: LD_INT 7
64867: PUSH
64868: LD_INT 8
64870: PUSH
64871: LD_INT 11
64873: PUSH
64874: LD_INT 12
64876: PUSH
64877: LD_INT 15
64879: PUSH
64880: LD_INT 16
64882: PUSH
64883: LD_INT 20
64885: PUSH
64886: LD_INT 21
64888: PUSH
64889: LD_INT 22
64891: PUSH
64892: LD_INT 23
64894: PUSH
64895: LD_INT 25
64897: PUSH
64898: LD_INT 26
64900: PUSH
64901: LD_INT 28
64903: PUSH
64904: LD_INT 30
64906: PUSH
64907: LD_INT 31
64909: PUSH
64910: LD_INT 32
64912: PUSH
64913: LD_INT 36
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 101
64941: PUSH
64942: LD_INT 102
64944: PUSH
64945: LD_INT 103
64947: PUSH
64948: LD_INT 105
64950: PUSH
64951: LD_INT 106
64953: PUSH
64954: LD_INT 108
64956: PUSH
64957: LD_INT 109
64959: PUSH
64960: LD_INT 112
64962: PUSH
64963: LD_INT 114
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: ST_TO_ADDR
64981: GO 66960
64983: LD_INT 10
64985: DOUBLE
64986: EQUAL
64987: IFTRUE 64991
64989: GO 65175
64991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
64992: LD_ADDR_VAR 0 1
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: LD_INT 4
65002: PUSH
65003: LD_INT 5
65005: PUSH
65006: LD_INT 6
65008: PUSH
65009: LD_INT 7
65011: PUSH
65012: LD_INT 8
65014: PUSH
65015: LD_INT 9
65017: PUSH
65018: LD_INT 10
65020: PUSH
65021: LD_INT 11
65023: PUSH
65024: LD_INT 12
65026: PUSH
65027: LD_INT 13
65029: PUSH
65030: LD_INT 14
65032: PUSH
65033: LD_INT 15
65035: PUSH
65036: LD_INT 16
65038: PUSH
65039: LD_INT 17
65041: PUSH
65042: LD_INT 18
65044: PUSH
65045: LD_INT 19
65047: PUSH
65048: LD_INT 20
65050: PUSH
65051: LD_INT 21
65053: PUSH
65054: LD_INT 22
65056: PUSH
65057: LD_INT 23
65059: PUSH
65060: LD_INT 24
65062: PUSH
65063: LD_INT 25
65065: PUSH
65066: LD_INT 26
65068: PUSH
65069: LD_INT 28
65071: PUSH
65072: LD_INT 30
65074: PUSH
65075: LD_INT 31
65077: PUSH
65078: LD_INT 32
65080: PUSH
65081: LD_INT 36
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 101
65117: PUSH
65118: LD_INT 102
65120: PUSH
65121: LD_INT 103
65123: PUSH
65124: LD_INT 104
65126: PUSH
65127: LD_INT 105
65129: PUSH
65130: LD_INT 106
65132: PUSH
65133: LD_INT 107
65135: PUSH
65136: LD_INT 108
65138: PUSH
65139: LD_INT 109
65141: PUSH
65142: LD_INT 110
65144: PUSH
65145: LD_INT 111
65147: PUSH
65148: LD_INT 112
65150: PUSH
65151: LD_INT 114
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: ST_TO_ADDR
65173: GO 66960
65175: LD_INT 11
65177: DOUBLE
65178: EQUAL
65179: IFTRUE 65183
65181: GO 65375
65183: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
65184: LD_ADDR_VAR 0 1
65188: PUSH
65189: LD_INT 2
65191: PUSH
65192: LD_INT 3
65194: PUSH
65195: LD_INT 4
65197: PUSH
65198: LD_INT 5
65200: PUSH
65201: LD_INT 6
65203: PUSH
65204: LD_INT 7
65206: PUSH
65207: LD_INT 8
65209: PUSH
65210: LD_INT 9
65212: PUSH
65213: LD_INT 10
65215: PUSH
65216: LD_INT 11
65218: PUSH
65219: LD_INT 12
65221: PUSH
65222: LD_INT 13
65224: PUSH
65225: LD_INT 14
65227: PUSH
65228: LD_INT 15
65230: PUSH
65231: LD_INT 16
65233: PUSH
65234: LD_INT 17
65236: PUSH
65237: LD_INT 18
65239: PUSH
65240: LD_INT 19
65242: PUSH
65243: LD_INT 20
65245: PUSH
65246: LD_INT 21
65248: PUSH
65249: LD_INT 22
65251: PUSH
65252: LD_INT 23
65254: PUSH
65255: LD_INT 24
65257: PUSH
65258: LD_INT 25
65260: PUSH
65261: LD_INT 26
65263: PUSH
65264: LD_INT 28
65266: PUSH
65267: LD_INT 30
65269: PUSH
65270: LD_INT 31
65272: PUSH
65273: LD_INT 32
65275: PUSH
65276: LD_INT 34
65278: PUSH
65279: LD_INT 36
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 101
65317: PUSH
65318: LD_INT 102
65320: PUSH
65321: LD_INT 103
65323: PUSH
65324: LD_INT 104
65326: PUSH
65327: LD_INT 105
65329: PUSH
65330: LD_INT 106
65332: PUSH
65333: LD_INT 107
65335: PUSH
65336: LD_INT 108
65338: PUSH
65339: LD_INT 109
65341: PUSH
65342: LD_INT 110
65344: PUSH
65345: LD_INT 111
65347: PUSH
65348: LD_INT 112
65350: PUSH
65351: LD_INT 114
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: ST_TO_ADDR
65373: GO 66960
65375: LD_INT 12
65377: DOUBLE
65378: EQUAL
65379: IFTRUE 65383
65381: GO 65591
65383: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
65384: LD_ADDR_VAR 0 1
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: LD_INT 2
65394: PUSH
65395: LD_INT 3
65397: PUSH
65398: LD_INT 4
65400: PUSH
65401: LD_INT 5
65403: PUSH
65404: LD_INT 6
65406: PUSH
65407: LD_INT 7
65409: PUSH
65410: LD_INT 8
65412: PUSH
65413: LD_INT 9
65415: PUSH
65416: LD_INT 10
65418: PUSH
65419: LD_INT 11
65421: PUSH
65422: LD_INT 12
65424: PUSH
65425: LD_INT 13
65427: PUSH
65428: LD_INT 14
65430: PUSH
65431: LD_INT 15
65433: PUSH
65434: LD_INT 16
65436: PUSH
65437: LD_INT 17
65439: PUSH
65440: LD_INT 18
65442: PUSH
65443: LD_INT 19
65445: PUSH
65446: LD_INT 20
65448: PUSH
65449: LD_INT 21
65451: PUSH
65452: LD_INT 22
65454: PUSH
65455: LD_INT 23
65457: PUSH
65458: LD_INT 24
65460: PUSH
65461: LD_INT 25
65463: PUSH
65464: LD_INT 26
65466: PUSH
65467: LD_INT 27
65469: PUSH
65470: LD_INT 28
65472: PUSH
65473: LD_INT 30
65475: PUSH
65476: LD_INT 31
65478: PUSH
65479: LD_INT 32
65481: PUSH
65482: LD_INT 33
65484: PUSH
65485: LD_INT 34
65487: PUSH
65488: LD_INT 36
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 101
65529: PUSH
65530: LD_INT 102
65532: PUSH
65533: LD_INT 103
65535: PUSH
65536: LD_INT 104
65538: PUSH
65539: LD_INT 105
65541: PUSH
65542: LD_INT 106
65544: PUSH
65545: LD_INT 107
65547: PUSH
65548: LD_INT 108
65550: PUSH
65551: LD_INT 109
65553: PUSH
65554: LD_INT 110
65556: PUSH
65557: LD_INT 111
65559: PUSH
65560: LD_INT 112
65562: PUSH
65563: LD_INT 113
65565: PUSH
65566: LD_INT 114
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: ST_TO_ADDR
65589: GO 66960
65591: LD_INT 13
65593: DOUBLE
65594: EQUAL
65595: IFTRUE 65599
65597: GO 65795
65599: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
65600: LD_ADDR_VAR 0 1
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: LD_INT 2
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: LD_INT 4
65616: PUSH
65617: LD_INT 5
65619: PUSH
65620: LD_INT 8
65622: PUSH
65623: LD_INT 9
65625: PUSH
65626: LD_INT 10
65628: PUSH
65629: LD_INT 11
65631: PUSH
65632: LD_INT 12
65634: PUSH
65635: LD_INT 14
65637: PUSH
65638: LD_INT 15
65640: PUSH
65641: LD_INT 16
65643: PUSH
65644: LD_INT 17
65646: PUSH
65647: LD_INT 18
65649: PUSH
65650: LD_INT 19
65652: PUSH
65653: LD_INT 20
65655: PUSH
65656: LD_INT 21
65658: PUSH
65659: LD_INT 22
65661: PUSH
65662: LD_INT 23
65664: PUSH
65665: LD_INT 24
65667: PUSH
65668: LD_INT 25
65670: PUSH
65671: LD_INT 26
65673: PUSH
65674: LD_INT 27
65676: PUSH
65677: LD_INT 28
65679: PUSH
65680: LD_INT 30
65682: PUSH
65683: LD_INT 31
65685: PUSH
65686: LD_INT 32
65688: PUSH
65689: LD_INT 33
65691: PUSH
65692: LD_INT 34
65694: PUSH
65695: LD_INT 36
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 101
65733: PUSH
65734: LD_INT 102
65736: PUSH
65737: LD_INT 103
65739: PUSH
65740: LD_INT 104
65742: PUSH
65743: LD_INT 105
65745: PUSH
65746: LD_INT 106
65748: PUSH
65749: LD_INT 107
65751: PUSH
65752: LD_INT 108
65754: PUSH
65755: LD_INT 109
65757: PUSH
65758: LD_INT 110
65760: PUSH
65761: LD_INT 111
65763: PUSH
65764: LD_INT 112
65766: PUSH
65767: LD_INT 113
65769: PUSH
65770: LD_INT 114
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: ST_TO_ADDR
65793: GO 66960
65795: LD_INT 14
65797: DOUBLE
65798: EQUAL
65799: IFTRUE 65803
65801: GO 66015
65803: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
65804: LD_ADDR_VAR 0 1
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: LD_INT 2
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: LD_INT 4
65820: PUSH
65821: LD_INT 5
65823: PUSH
65824: LD_INT 6
65826: PUSH
65827: LD_INT 7
65829: PUSH
65830: LD_INT 8
65832: PUSH
65833: LD_INT 9
65835: PUSH
65836: LD_INT 10
65838: PUSH
65839: LD_INT 11
65841: PUSH
65842: LD_INT 12
65844: PUSH
65845: LD_INT 13
65847: PUSH
65848: LD_INT 14
65850: PUSH
65851: LD_INT 15
65853: PUSH
65854: LD_INT 16
65856: PUSH
65857: LD_INT 17
65859: PUSH
65860: LD_INT 18
65862: PUSH
65863: LD_INT 19
65865: PUSH
65866: LD_INT 20
65868: PUSH
65869: LD_INT 21
65871: PUSH
65872: LD_INT 22
65874: PUSH
65875: LD_INT 23
65877: PUSH
65878: LD_INT 24
65880: PUSH
65881: LD_INT 25
65883: PUSH
65884: LD_INT 26
65886: PUSH
65887: LD_INT 27
65889: PUSH
65890: LD_INT 28
65892: PUSH
65893: LD_INT 29
65895: PUSH
65896: LD_INT 30
65898: PUSH
65899: LD_INT 31
65901: PUSH
65902: LD_INT 32
65904: PUSH
65905: LD_INT 33
65907: PUSH
65908: LD_INT 34
65910: PUSH
65911: LD_INT 36
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 101
65953: PUSH
65954: LD_INT 102
65956: PUSH
65957: LD_INT 103
65959: PUSH
65960: LD_INT 104
65962: PUSH
65963: LD_INT 105
65965: PUSH
65966: LD_INT 106
65968: PUSH
65969: LD_INT 107
65971: PUSH
65972: LD_INT 108
65974: PUSH
65975: LD_INT 109
65977: PUSH
65978: LD_INT 110
65980: PUSH
65981: LD_INT 111
65983: PUSH
65984: LD_INT 112
65986: PUSH
65987: LD_INT 113
65989: PUSH
65990: LD_INT 114
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: ST_TO_ADDR
66013: GO 66960
66015: LD_INT 15
66017: DOUBLE
66018: EQUAL
66019: IFTRUE 66023
66021: GO 66235
66023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
66024: LD_ADDR_VAR 0 1
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: LD_INT 2
66034: PUSH
66035: LD_INT 3
66037: PUSH
66038: LD_INT 4
66040: PUSH
66041: LD_INT 5
66043: PUSH
66044: LD_INT 6
66046: PUSH
66047: LD_INT 7
66049: PUSH
66050: LD_INT 8
66052: PUSH
66053: LD_INT 9
66055: PUSH
66056: LD_INT 10
66058: PUSH
66059: LD_INT 11
66061: PUSH
66062: LD_INT 12
66064: PUSH
66065: LD_INT 13
66067: PUSH
66068: LD_INT 14
66070: PUSH
66071: LD_INT 15
66073: PUSH
66074: LD_INT 16
66076: PUSH
66077: LD_INT 17
66079: PUSH
66080: LD_INT 18
66082: PUSH
66083: LD_INT 19
66085: PUSH
66086: LD_INT 20
66088: PUSH
66089: LD_INT 21
66091: PUSH
66092: LD_INT 22
66094: PUSH
66095: LD_INT 23
66097: PUSH
66098: LD_INT 24
66100: PUSH
66101: LD_INT 25
66103: PUSH
66104: LD_INT 26
66106: PUSH
66107: LD_INT 27
66109: PUSH
66110: LD_INT 28
66112: PUSH
66113: LD_INT 29
66115: PUSH
66116: LD_INT 30
66118: PUSH
66119: LD_INT 31
66121: PUSH
66122: LD_INT 32
66124: PUSH
66125: LD_INT 33
66127: PUSH
66128: LD_INT 34
66130: PUSH
66131: LD_INT 36
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 101
66173: PUSH
66174: LD_INT 102
66176: PUSH
66177: LD_INT 103
66179: PUSH
66180: LD_INT 104
66182: PUSH
66183: LD_INT 105
66185: PUSH
66186: LD_INT 106
66188: PUSH
66189: LD_INT 107
66191: PUSH
66192: LD_INT 108
66194: PUSH
66195: LD_INT 109
66197: PUSH
66198: LD_INT 110
66200: PUSH
66201: LD_INT 111
66203: PUSH
66204: LD_INT 112
66206: PUSH
66207: LD_INT 113
66209: PUSH
66210: LD_INT 114
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: ST_TO_ADDR
66233: GO 66960
66235: LD_INT 16
66237: DOUBLE
66238: EQUAL
66239: IFTRUE 66243
66241: GO 66367
66243: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
66244: LD_ADDR_VAR 0 1
66248: PUSH
66249: LD_INT 2
66251: PUSH
66252: LD_INT 4
66254: PUSH
66255: LD_INT 5
66257: PUSH
66258: LD_INT 7
66260: PUSH
66261: LD_INT 11
66263: PUSH
66264: LD_INT 12
66266: PUSH
66267: LD_INT 15
66269: PUSH
66270: LD_INT 16
66272: PUSH
66273: LD_INT 20
66275: PUSH
66276: LD_INT 21
66278: PUSH
66279: LD_INT 22
66281: PUSH
66282: LD_INT 23
66284: PUSH
66285: LD_INT 25
66287: PUSH
66288: LD_INT 26
66290: PUSH
66291: LD_INT 30
66293: PUSH
66294: LD_INT 31
66296: PUSH
66297: LD_INT 32
66299: PUSH
66300: LD_INT 33
66302: PUSH
66303: LD_INT 34
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 101
66329: PUSH
66330: LD_INT 102
66332: PUSH
66333: LD_INT 103
66335: PUSH
66336: LD_INT 106
66338: PUSH
66339: LD_INT 108
66341: PUSH
66342: LD_INT 112
66344: PUSH
66345: LD_INT 113
66347: PUSH
66348: LD_INT 114
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: ST_TO_ADDR
66365: GO 66960
66367: LD_INT 17
66369: DOUBLE
66370: EQUAL
66371: IFTRUE 66375
66373: GO 66587
66375: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
66376: LD_ADDR_VAR 0 1
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: LD_INT 2
66386: PUSH
66387: LD_INT 3
66389: PUSH
66390: LD_INT 4
66392: PUSH
66393: LD_INT 5
66395: PUSH
66396: LD_INT 6
66398: PUSH
66399: LD_INT 7
66401: PUSH
66402: LD_INT 8
66404: PUSH
66405: LD_INT 9
66407: PUSH
66408: LD_INT 10
66410: PUSH
66411: LD_INT 11
66413: PUSH
66414: LD_INT 12
66416: PUSH
66417: LD_INT 13
66419: PUSH
66420: LD_INT 14
66422: PUSH
66423: LD_INT 15
66425: PUSH
66426: LD_INT 16
66428: PUSH
66429: LD_INT 17
66431: PUSH
66432: LD_INT 18
66434: PUSH
66435: LD_INT 19
66437: PUSH
66438: LD_INT 20
66440: PUSH
66441: LD_INT 21
66443: PUSH
66444: LD_INT 22
66446: PUSH
66447: LD_INT 23
66449: PUSH
66450: LD_INT 24
66452: PUSH
66453: LD_INT 25
66455: PUSH
66456: LD_INT 26
66458: PUSH
66459: LD_INT 27
66461: PUSH
66462: LD_INT 28
66464: PUSH
66465: LD_INT 29
66467: PUSH
66468: LD_INT 30
66470: PUSH
66471: LD_INT 31
66473: PUSH
66474: LD_INT 32
66476: PUSH
66477: LD_INT 33
66479: PUSH
66480: LD_INT 34
66482: PUSH
66483: LD_INT 36
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 101
66525: PUSH
66526: LD_INT 102
66528: PUSH
66529: LD_INT 103
66531: PUSH
66532: LD_INT 104
66534: PUSH
66535: LD_INT 105
66537: PUSH
66538: LD_INT 106
66540: PUSH
66541: LD_INT 107
66543: PUSH
66544: LD_INT 108
66546: PUSH
66547: LD_INT 109
66549: PUSH
66550: LD_INT 110
66552: PUSH
66553: LD_INT 111
66555: PUSH
66556: LD_INT 112
66558: PUSH
66559: LD_INT 113
66561: PUSH
66562: LD_INT 114
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: ST_TO_ADDR
66585: GO 66960
66587: LD_INT 18
66589: DOUBLE
66590: EQUAL
66591: IFTRUE 66595
66593: GO 66731
66595: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
66596: LD_ADDR_VAR 0 1
66600: PUSH
66601: LD_INT 2
66603: PUSH
66604: LD_INT 4
66606: PUSH
66607: LD_INT 5
66609: PUSH
66610: LD_INT 7
66612: PUSH
66613: LD_INT 11
66615: PUSH
66616: LD_INT 12
66618: PUSH
66619: LD_INT 15
66621: PUSH
66622: LD_INT 16
66624: PUSH
66625: LD_INT 20
66627: PUSH
66628: LD_INT 21
66630: PUSH
66631: LD_INT 22
66633: PUSH
66634: LD_INT 23
66636: PUSH
66637: LD_INT 25
66639: PUSH
66640: LD_INT 26
66642: PUSH
66643: LD_INT 30
66645: PUSH
66646: LD_INT 31
66648: PUSH
66649: LD_INT 32
66651: PUSH
66652: LD_INT 33
66654: PUSH
66655: LD_INT 34
66657: PUSH
66658: LD_INT 35
66660: PUSH
66661: LD_INT 36
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 101
66689: PUSH
66690: LD_INT 102
66692: PUSH
66693: LD_INT 103
66695: PUSH
66696: LD_INT 106
66698: PUSH
66699: LD_INT 108
66701: PUSH
66702: LD_INT 112
66704: PUSH
66705: LD_INT 113
66707: PUSH
66708: LD_INT 114
66710: PUSH
66711: LD_INT 115
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: ST_TO_ADDR
66729: GO 66960
66731: LD_INT 19
66733: DOUBLE
66734: EQUAL
66735: IFTRUE 66739
66737: GO 66959
66739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
66740: LD_ADDR_VAR 0 1
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: LD_INT 2
66750: PUSH
66751: LD_INT 3
66753: PUSH
66754: LD_INT 4
66756: PUSH
66757: LD_INT 5
66759: PUSH
66760: LD_INT 6
66762: PUSH
66763: LD_INT 7
66765: PUSH
66766: LD_INT 8
66768: PUSH
66769: LD_INT 9
66771: PUSH
66772: LD_INT 10
66774: PUSH
66775: LD_INT 11
66777: PUSH
66778: LD_INT 12
66780: PUSH
66781: LD_INT 13
66783: PUSH
66784: LD_INT 14
66786: PUSH
66787: LD_INT 15
66789: PUSH
66790: LD_INT 16
66792: PUSH
66793: LD_INT 17
66795: PUSH
66796: LD_INT 18
66798: PUSH
66799: LD_INT 19
66801: PUSH
66802: LD_INT 20
66804: PUSH
66805: LD_INT 21
66807: PUSH
66808: LD_INT 22
66810: PUSH
66811: LD_INT 23
66813: PUSH
66814: LD_INT 24
66816: PUSH
66817: LD_INT 25
66819: PUSH
66820: LD_INT 26
66822: PUSH
66823: LD_INT 27
66825: PUSH
66826: LD_INT 28
66828: PUSH
66829: LD_INT 29
66831: PUSH
66832: LD_INT 30
66834: PUSH
66835: LD_INT 31
66837: PUSH
66838: LD_INT 32
66840: PUSH
66841: LD_INT 33
66843: PUSH
66844: LD_INT 34
66846: PUSH
66847: LD_INT 35
66849: PUSH
66850: LD_INT 36
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 101
66893: PUSH
66894: LD_INT 102
66896: PUSH
66897: LD_INT 103
66899: PUSH
66900: LD_INT 104
66902: PUSH
66903: LD_INT 105
66905: PUSH
66906: LD_INT 106
66908: PUSH
66909: LD_INT 107
66911: PUSH
66912: LD_INT 108
66914: PUSH
66915: LD_INT 109
66917: PUSH
66918: LD_INT 110
66920: PUSH
66921: LD_INT 111
66923: PUSH
66924: LD_INT 112
66926: PUSH
66927: LD_INT 113
66929: PUSH
66930: LD_INT 114
66932: PUSH
66933: LD_INT 115
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: ST_TO_ADDR
66957: GO 66960
66959: POP
// end else
66960: GO 67179
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
66962: LD_ADDR_VAR 0 1
66966: PUSH
66967: LD_INT 1
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: LD_INT 3
66975: PUSH
66976: LD_INT 4
66978: PUSH
66979: LD_INT 5
66981: PUSH
66982: LD_INT 6
66984: PUSH
66985: LD_INT 7
66987: PUSH
66988: LD_INT 8
66990: PUSH
66991: LD_INT 9
66993: PUSH
66994: LD_INT 10
66996: PUSH
66997: LD_INT 11
66999: PUSH
67000: LD_INT 12
67002: PUSH
67003: LD_INT 13
67005: PUSH
67006: LD_INT 14
67008: PUSH
67009: LD_INT 15
67011: PUSH
67012: LD_INT 16
67014: PUSH
67015: LD_INT 17
67017: PUSH
67018: LD_INT 18
67020: PUSH
67021: LD_INT 19
67023: PUSH
67024: LD_INT 20
67026: PUSH
67027: LD_INT 21
67029: PUSH
67030: LD_INT 22
67032: PUSH
67033: LD_INT 23
67035: PUSH
67036: LD_INT 24
67038: PUSH
67039: LD_INT 25
67041: PUSH
67042: LD_INT 26
67044: PUSH
67045: LD_INT 27
67047: PUSH
67048: LD_INT 28
67050: PUSH
67051: LD_INT 29
67053: PUSH
67054: LD_INT 30
67056: PUSH
67057: LD_INT 31
67059: PUSH
67060: LD_INT 32
67062: PUSH
67063: LD_INT 33
67065: PUSH
67066: LD_INT 34
67068: PUSH
67069: LD_INT 35
67071: PUSH
67072: LD_INT 36
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 101
67115: PUSH
67116: LD_INT 102
67118: PUSH
67119: LD_INT 103
67121: PUSH
67122: LD_INT 104
67124: PUSH
67125: LD_INT 105
67127: PUSH
67128: LD_INT 106
67130: PUSH
67131: LD_INT 107
67133: PUSH
67134: LD_INT 108
67136: PUSH
67137: LD_INT 109
67139: PUSH
67140: LD_INT 110
67142: PUSH
67143: LD_INT 111
67145: PUSH
67146: LD_INT 112
67148: PUSH
67149: LD_INT 113
67151: PUSH
67152: LD_INT 114
67154: PUSH
67155: LD_INT 115
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: ST_TO_ADDR
// if result then
67179: LD_VAR 0 1
67183: IFFALSE 67472
// begin normal :=  ;
67185: LD_ADDR_VAR 0 3
67189: PUSH
67190: LD_STRING 
67192: ST_TO_ADDR
// hardcore :=  ;
67193: LD_ADDR_VAR 0 4
67197: PUSH
67198: LD_STRING 
67200: ST_TO_ADDR
// for i = 1 to normalCounter do
67201: LD_ADDR_VAR 0 5
67205: PUSH
67206: DOUBLE
67207: LD_INT 1
67209: DEC
67210: ST_TO_ADDR
67211: LD_EXP 77
67215: PUSH
67216: FOR_TO
67217: IFFALSE 67318
// begin tmp := 0 ;
67219: LD_ADDR_VAR 0 2
67223: PUSH
67224: LD_STRING 0
67226: ST_TO_ADDR
// if result [ 1 ] then
67227: LD_VAR 0 1
67231: PUSH
67232: LD_INT 1
67234: ARRAY
67235: IFFALSE 67300
// if result [ 1 ] [ 1 ] = i then
67237: LD_VAR 0 1
67241: PUSH
67242: LD_INT 1
67244: ARRAY
67245: PUSH
67246: LD_INT 1
67248: ARRAY
67249: PUSH
67250: LD_VAR 0 5
67254: EQUAL
67255: IFFALSE 67300
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
67257: LD_ADDR_VAR 0 1
67261: PUSH
67262: LD_VAR 0 1
67266: PPUSH
67267: LD_INT 1
67269: PPUSH
67270: LD_VAR 0 1
67274: PUSH
67275: LD_INT 1
67277: ARRAY
67278: PPUSH
67279: LD_INT 1
67281: PPUSH
67282: CALL_OW 3
67286: PPUSH
67287: CALL_OW 1
67291: ST_TO_ADDR
// tmp := 1 ;
67292: LD_ADDR_VAR 0 2
67296: PUSH
67297: LD_STRING 1
67299: ST_TO_ADDR
// end ; normal := normal & tmp ;
67300: LD_ADDR_VAR 0 3
67304: PUSH
67305: LD_VAR 0 3
67309: PUSH
67310: LD_VAR 0 2
67314: STR
67315: ST_TO_ADDR
// end ;
67316: GO 67216
67318: POP
67319: POP
// for i = 1 to hardcoreCounter do
67320: LD_ADDR_VAR 0 5
67324: PUSH
67325: DOUBLE
67326: LD_INT 1
67328: DEC
67329: ST_TO_ADDR
67330: LD_EXP 78
67334: PUSH
67335: FOR_TO
67336: IFFALSE 67441
// begin tmp := 0 ;
67338: LD_ADDR_VAR 0 2
67342: PUSH
67343: LD_STRING 0
67345: ST_TO_ADDR
// if result [ 2 ] then
67346: LD_VAR 0 1
67350: PUSH
67351: LD_INT 2
67353: ARRAY
67354: IFFALSE 67423
// if result [ 2 ] [ 1 ] = 100 + i then
67356: LD_VAR 0 1
67360: PUSH
67361: LD_INT 2
67363: ARRAY
67364: PUSH
67365: LD_INT 1
67367: ARRAY
67368: PUSH
67369: LD_INT 100
67371: PUSH
67372: LD_VAR 0 5
67376: PLUS
67377: EQUAL
67378: IFFALSE 67423
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67380: LD_ADDR_VAR 0 1
67384: PUSH
67385: LD_VAR 0 1
67389: PPUSH
67390: LD_INT 2
67392: PPUSH
67393: LD_VAR 0 1
67397: PUSH
67398: LD_INT 2
67400: ARRAY
67401: PPUSH
67402: LD_INT 1
67404: PPUSH
67405: CALL_OW 3
67409: PPUSH
67410: CALL_OW 1
67414: ST_TO_ADDR
// tmp := 1 ;
67415: LD_ADDR_VAR 0 2
67419: PUSH
67420: LD_STRING 1
67422: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67423: LD_ADDR_VAR 0 4
67427: PUSH
67428: LD_VAR 0 4
67432: PUSH
67433: LD_VAR 0 2
67437: STR
67438: ST_TO_ADDR
// end ;
67439: GO 67335
67441: POP
67442: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
67443: LD_STRING getStreamItemsFromMission("
67445: PUSH
67446: LD_VAR 0 3
67450: STR
67451: PUSH
67452: LD_STRING ","
67454: STR
67455: PUSH
67456: LD_VAR 0 4
67460: STR
67461: PUSH
67462: LD_STRING ")
67464: STR
67465: PPUSH
67466: CALL_OW 559
// end else
67470: GO 67479
// ToLua ( getStreamItemsFromMission("","") ) ;
67472: LD_STRING getStreamItemsFromMission("","")
67474: PPUSH
67475: CALL_OW 559
// end ;
67479: LD_VAR 0 1
67483: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67484: LD_EXP 76
67488: PUSH
67489: LD_EXP 81
67493: AND
67494: IFFALSE 67618
67496: GO 67498
67498: DISABLE
67499: LD_INT 0
67501: PPUSH
67502: PPUSH
// begin enable ;
67503: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67504: LD_ADDR_VAR 0 2
67508: PUSH
67509: LD_INT 22
67511: PUSH
67512: LD_OWVAR 2
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: LD_INT 34
67526: PUSH
67527: LD_INT 7
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 34
67536: PUSH
67537: LD_INT 45
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 34
67546: PUSH
67547: LD_INT 28
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 34
67556: PUSH
67557: LD_INT 47
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PPUSH
67575: CALL_OW 69
67579: ST_TO_ADDR
// if not tmp then
67580: LD_VAR 0 2
67584: NOT
67585: IFFALSE 67589
// exit ;
67587: GO 67618
// for i in tmp do
67589: LD_ADDR_VAR 0 1
67593: PUSH
67594: LD_VAR 0 2
67598: PUSH
67599: FOR_IN
67600: IFFALSE 67616
// begin SetLives ( i , 0 ) ;
67602: LD_VAR 0 1
67606: PPUSH
67607: LD_INT 0
67609: PPUSH
67610: CALL_OW 234
// end ;
67614: GO 67599
67616: POP
67617: POP
// end ;
67618: PPOPN 2
67620: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67621: LD_EXP 76
67625: PUSH
67626: LD_EXP 82
67630: AND
67631: IFFALSE 67715
67633: GO 67635
67635: DISABLE
67636: LD_INT 0
67638: PPUSH
67639: PPUSH
// begin enable ;
67640: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67641: LD_ADDR_VAR 0 2
67645: PUSH
67646: LD_INT 22
67648: PUSH
67649: LD_OWVAR 2
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 32
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PPUSH
67672: CALL_OW 69
67676: ST_TO_ADDR
// if not tmp then
67677: LD_VAR 0 2
67681: NOT
67682: IFFALSE 67686
// exit ;
67684: GO 67715
// for i in tmp do
67686: LD_ADDR_VAR 0 1
67690: PUSH
67691: LD_VAR 0 2
67695: PUSH
67696: FOR_IN
67697: IFFALSE 67713
// begin SetLives ( i , 0 ) ;
67699: LD_VAR 0 1
67703: PPUSH
67704: LD_INT 0
67706: PPUSH
67707: CALL_OW 234
// end ;
67711: GO 67696
67713: POP
67714: POP
// end ;
67715: PPOPN 2
67717: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67718: LD_EXP 76
67722: PUSH
67723: LD_EXP 79
67727: AND
67728: IFFALSE 67821
67730: GO 67732
67732: DISABLE
67733: LD_INT 0
67735: PPUSH
// begin enable ;
67736: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67737: LD_ADDR_VAR 0 1
67741: PUSH
67742: LD_INT 22
67744: PUSH
67745: LD_OWVAR 2
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: LD_INT 25
67759: PUSH
67760: LD_INT 5
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 25
67769: PUSH
67770: LD_INT 9
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 25
67779: PUSH
67780: LD_INT 8
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PPUSH
67797: CALL_OW 69
67801: PUSH
67802: FOR_IN
67803: IFFALSE 67819
// begin SetClass ( i , 1 ) ;
67805: LD_VAR 0 1
67809: PPUSH
67810: LD_INT 1
67812: PPUSH
67813: CALL_OW 336
// end ;
67817: GO 67802
67819: POP
67820: POP
// end ;
67821: PPOPN 1
67823: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67824: LD_EXP 76
67828: PUSH
67829: LD_EXP 80
67833: AND
67834: PUSH
67835: LD_OWVAR 65
67839: PUSH
67840: LD_INT 7
67842: LESS
67843: AND
67844: IFFALSE 67858
67846: GO 67848
67848: DISABLE
// begin enable ;
67849: ENABLE
// game_speed := 7 ;
67850: LD_ADDR_OWVAR 65
67854: PUSH
67855: LD_INT 7
67857: ST_TO_ADDR
// end ;
67858: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67859: LD_EXP 76
67863: PUSH
67864: LD_EXP 83
67868: AND
67869: IFFALSE 68071
67871: GO 67873
67873: DISABLE
67874: LD_INT 0
67876: PPUSH
67877: PPUSH
67878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67879: LD_ADDR_VAR 0 3
67883: PUSH
67884: LD_INT 81
67886: PUSH
67887: LD_OWVAR 2
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 21
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PPUSH
67910: CALL_OW 69
67914: ST_TO_ADDR
// if not tmp then
67915: LD_VAR 0 3
67919: NOT
67920: IFFALSE 67924
// exit ;
67922: GO 68071
// if tmp > 5 then
67924: LD_VAR 0 3
67928: PUSH
67929: LD_INT 5
67931: GREATER
67932: IFFALSE 67944
// k := 5 else
67934: LD_ADDR_VAR 0 2
67938: PUSH
67939: LD_INT 5
67941: ST_TO_ADDR
67942: GO 67954
// k := tmp ;
67944: LD_ADDR_VAR 0 2
67948: PUSH
67949: LD_VAR 0 3
67953: ST_TO_ADDR
// for i := 1 to k do
67954: LD_ADDR_VAR 0 1
67958: PUSH
67959: DOUBLE
67960: LD_INT 1
67962: DEC
67963: ST_TO_ADDR
67964: LD_VAR 0 2
67968: PUSH
67969: FOR_TO
67970: IFFALSE 68069
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67972: LD_VAR 0 3
67976: PUSH
67977: LD_VAR 0 1
67981: ARRAY
67982: PPUSH
67983: LD_VAR 0 1
67987: PUSH
67988: LD_INT 4
67990: MOD
67991: PUSH
67992: LD_INT 1
67994: PLUS
67995: PPUSH
67996: CALL_OW 259
68000: PUSH
68001: LD_INT 10
68003: LESS
68004: IFFALSE 68067
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68006: LD_VAR 0 3
68010: PUSH
68011: LD_VAR 0 1
68015: ARRAY
68016: PPUSH
68017: LD_VAR 0 1
68021: PUSH
68022: LD_INT 4
68024: MOD
68025: PUSH
68026: LD_INT 1
68028: PLUS
68029: PPUSH
68030: LD_VAR 0 3
68034: PUSH
68035: LD_VAR 0 1
68039: ARRAY
68040: PPUSH
68041: LD_VAR 0 1
68045: PUSH
68046: LD_INT 4
68048: MOD
68049: PUSH
68050: LD_INT 1
68052: PLUS
68053: PPUSH
68054: CALL_OW 259
68058: PUSH
68059: LD_INT 1
68061: PLUS
68062: PPUSH
68063: CALL_OW 237
68067: GO 67969
68069: POP
68070: POP
// end ;
68071: PPOPN 3
68073: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
68074: LD_EXP 76
68078: PUSH
68079: LD_EXP 84
68083: AND
68084: IFFALSE 68104
68086: GO 68088
68088: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
68089: LD_INT 4
68091: PPUSH
68092: LD_OWVAR 2
68096: PPUSH
68097: LD_INT 0
68099: PPUSH
68100: CALL_OW 324
68104: END
// every 0 0$1 trigger StreamModeActive and sShovel do
68105: LD_EXP 76
68109: PUSH
68110: LD_EXP 113
68114: AND
68115: IFFALSE 68135
68117: GO 68119
68119: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
68120: LD_INT 19
68122: PPUSH
68123: LD_OWVAR 2
68127: PPUSH
68128: LD_INT 0
68130: PPUSH
68131: CALL_OW 324
68135: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
68136: LD_EXP 76
68140: PUSH
68141: LD_EXP 85
68145: AND
68146: IFFALSE 68248
68148: GO 68150
68150: DISABLE
68151: LD_INT 0
68153: PPUSH
68154: PPUSH
// begin enable ;
68155: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
68156: LD_ADDR_VAR 0 2
68160: PUSH
68161: LD_INT 22
68163: PUSH
68164: LD_OWVAR 2
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 2
68175: PUSH
68176: LD_INT 34
68178: PUSH
68179: LD_INT 11
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 34
68188: PUSH
68189: LD_INT 30
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: LIST
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PPUSH
68205: CALL_OW 69
68209: ST_TO_ADDR
// if not tmp then
68210: LD_VAR 0 2
68214: NOT
68215: IFFALSE 68219
// exit ;
68217: GO 68248
// for i in tmp do
68219: LD_ADDR_VAR 0 1
68223: PUSH
68224: LD_VAR 0 2
68228: PUSH
68229: FOR_IN
68230: IFFALSE 68246
// begin SetLives ( i , 0 ) ;
68232: LD_VAR 0 1
68236: PPUSH
68237: LD_INT 0
68239: PPUSH
68240: CALL_OW 234
// end ;
68244: GO 68229
68246: POP
68247: POP
// end ;
68248: PPOPN 2
68250: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68251: LD_EXP 76
68255: PUSH
68256: LD_EXP 86
68260: AND
68261: IFFALSE 68281
68263: GO 68265
68265: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68266: LD_INT 32
68268: PPUSH
68269: LD_OWVAR 2
68273: PPUSH
68274: LD_INT 0
68276: PPUSH
68277: CALL_OW 324
68281: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68282: LD_EXP 76
68286: PUSH
68287: LD_EXP 87
68291: AND
68292: IFFALSE 68473
68294: GO 68296
68296: DISABLE
68297: LD_INT 0
68299: PPUSH
68300: PPUSH
68301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68302: LD_ADDR_VAR 0 2
68306: PUSH
68307: LD_INT 22
68309: PUSH
68310: LD_OWVAR 2
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 33
68321: PUSH
68322: LD_INT 3
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PPUSH
68333: CALL_OW 69
68337: ST_TO_ADDR
// if not tmp then
68338: LD_VAR 0 2
68342: NOT
68343: IFFALSE 68347
// exit ;
68345: GO 68473
// side := 0 ;
68347: LD_ADDR_VAR 0 3
68351: PUSH
68352: LD_INT 0
68354: ST_TO_ADDR
// for i := 1 to 8 do
68355: LD_ADDR_VAR 0 1
68359: PUSH
68360: DOUBLE
68361: LD_INT 1
68363: DEC
68364: ST_TO_ADDR
68365: LD_INT 8
68367: PUSH
68368: FOR_TO
68369: IFFALSE 68417
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68371: LD_OWVAR 2
68375: PUSH
68376: LD_VAR 0 1
68380: NONEQUAL
68381: PUSH
68382: LD_OWVAR 2
68386: PPUSH
68387: LD_VAR 0 1
68391: PPUSH
68392: CALL_OW 81
68396: PUSH
68397: LD_INT 2
68399: EQUAL
68400: AND
68401: IFFALSE 68415
// begin side := i ;
68403: LD_ADDR_VAR 0 3
68407: PUSH
68408: LD_VAR 0 1
68412: ST_TO_ADDR
// break ;
68413: GO 68417
// end ;
68415: GO 68368
68417: POP
68418: POP
// if not side then
68419: LD_VAR 0 3
68423: NOT
68424: IFFALSE 68428
// exit ;
68426: GO 68473
// for i := 1 to tmp do
68428: LD_ADDR_VAR 0 1
68432: PUSH
68433: DOUBLE
68434: LD_INT 1
68436: DEC
68437: ST_TO_ADDR
68438: LD_VAR 0 2
68442: PUSH
68443: FOR_TO
68444: IFFALSE 68471
// if Prob ( 60 ) then
68446: LD_INT 60
68448: PPUSH
68449: CALL_OW 13
68453: IFFALSE 68469
// SetSide ( i , side ) ;
68455: LD_VAR 0 1
68459: PPUSH
68460: LD_VAR 0 3
68464: PPUSH
68465: CALL_OW 235
68469: GO 68443
68471: POP
68472: POP
// end ;
68473: PPOPN 3
68475: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68476: LD_EXP 76
68480: PUSH
68481: LD_EXP 89
68485: AND
68486: IFFALSE 68605
68488: GO 68490
68490: DISABLE
68491: LD_INT 0
68493: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68494: LD_ADDR_VAR 0 1
68498: PUSH
68499: LD_INT 22
68501: PUSH
68502: LD_OWVAR 2
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 21
68513: PUSH
68514: LD_INT 1
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: LD_INT 23
68526: PUSH
68527: LD_INT 0
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: LIST
68542: PPUSH
68543: CALL_OW 69
68547: PUSH
68548: FOR_IN
68549: IFFALSE 68603
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68551: LD_VAR 0 1
68555: PPUSH
68556: CALL_OW 257
68560: PUSH
68561: LD_INT 1
68563: PUSH
68564: LD_INT 2
68566: PUSH
68567: LD_INT 3
68569: PUSH
68570: LD_INT 4
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: IN
68579: IFFALSE 68601
// SetClass ( un , rand ( 1 , 4 ) ) ;
68581: LD_VAR 0 1
68585: PPUSH
68586: LD_INT 1
68588: PPUSH
68589: LD_INT 4
68591: PPUSH
68592: CALL_OW 12
68596: PPUSH
68597: CALL_OW 336
68601: GO 68548
68603: POP
68604: POP
// end ;
68605: PPOPN 1
68607: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68608: LD_EXP 76
68612: PUSH
68613: LD_EXP 88
68617: AND
68618: IFFALSE 68697
68620: GO 68622
68622: DISABLE
68623: LD_INT 0
68625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68626: LD_ADDR_VAR 0 1
68630: PUSH
68631: LD_INT 22
68633: PUSH
68634: LD_OWVAR 2
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 21
68645: PUSH
68646: LD_INT 3
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PPUSH
68657: CALL_OW 69
68661: ST_TO_ADDR
// if not tmp then
68662: LD_VAR 0 1
68666: NOT
68667: IFFALSE 68671
// exit ;
68669: GO 68697
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68671: LD_VAR 0 1
68675: PUSH
68676: LD_INT 1
68678: PPUSH
68679: LD_VAR 0 1
68683: PPUSH
68684: CALL_OW 12
68688: ARRAY
68689: PPUSH
68690: LD_INT 100
68692: PPUSH
68693: CALL_OW 234
// end ;
68697: PPOPN 1
68699: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68700: LD_EXP 76
68704: PUSH
68705: LD_EXP 90
68709: AND
68710: IFFALSE 68808
68712: GO 68714
68714: DISABLE
68715: LD_INT 0
68717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68718: LD_ADDR_VAR 0 1
68722: PUSH
68723: LD_INT 22
68725: PUSH
68726: LD_OWVAR 2
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 21
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PPUSH
68749: CALL_OW 69
68753: ST_TO_ADDR
// if not tmp then
68754: LD_VAR 0 1
68758: NOT
68759: IFFALSE 68763
// exit ;
68761: GO 68808
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68763: LD_VAR 0 1
68767: PUSH
68768: LD_INT 1
68770: PPUSH
68771: LD_VAR 0 1
68775: PPUSH
68776: CALL_OW 12
68780: ARRAY
68781: PPUSH
68782: LD_INT 1
68784: PPUSH
68785: LD_INT 4
68787: PPUSH
68788: CALL_OW 12
68792: PPUSH
68793: LD_INT 3000
68795: PPUSH
68796: LD_INT 9000
68798: PPUSH
68799: CALL_OW 12
68803: PPUSH
68804: CALL_OW 492
// end ;
68808: PPOPN 1
68810: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68811: LD_EXP 76
68815: PUSH
68816: LD_EXP 91
68820: AND
68821: IFFALSE 68841
68823: GO 68825
68825: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68826: LD_INT 1
68828: PPUSH
68829: LD_OWVAR 2
68833: PPUSH
68834: LD_INT 0
68836: PPUSH
68837: CALL_OW 324
68841: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68842: LD_EXP 76
68846: PUSH
68847: LD_EXP 92
68851: AND
68852: IFFALSE 68935
68854: GO 68856
68856: DISABLE
68857: LD_INT 0
68859: PPUSH
68860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68861: LD_ADDR_VAR 0 2
68865: PUSH
68866: LD_INT 22
68868: PUSH
68869: LD_OWVAR 2
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 21
68880: PUSH
68881: LD_INT 3
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PPUSH
68892: CALL_OW 69
68896: ST_TO_ADDR
// if not tmp then
68897: LD_VAR 0 2
68901: NOT
68902: IFFALSE 68906
// exit ;
68904: GO 68935
// for i in tmp do
68906: LD_ADDR_VAR 0 1
68910: PUSH
68911: LD_VAR 0 2
68915: PUSH
68916: FOR_IN
68917: IFFALSE 68933
// SetBLevel ( i , 10 ) ;
68919: LD_VAR 0 1
68923: PPUSH
68924: LD_INT 10
68926: PPUSH
68927: CALL_OW 241
68931: GO 68916
68933: POP
68934: POP
// end ;
68935: PPOPN 2
68937: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68938: LD_EXP 76
68942: PUSH
68943: LD_EXP 93
68947: AND
68948: IFFALSE 69059
68950: GO 68952
68952: DISABLE
68953: LD_INT 0
68955: PPUSH
68956: PPUSH
68957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68958: LD_ADDR_VAR 0 3
68962: PUSH
68963: LD_INT 22
68965: PUSH
68966: LD_OWVAR 2
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 25
68977: PUSH
68978: LD_INT 1
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PPUSH
68989: CALL_OW 69
68993: ST_TO_ADDR
// if not tmp then
68994: LD_VAR 0 3
68998: NOT
68999: IFFALSE 69003
// exit ;
69001: GO 69059
// un := tmp [ rand ( 1 , tmp ) ] ;
69003: LD_ADDR_VAR 0 2
69007: PUSH
69008: LD_VAR 0 3
69012: PUSH
69013: LD_INT 1
69015: PPUSH
69016: LD_VAR 0 3
69020: PPUSH
69021: CALL_OW 12
69025: ARRAY
69026: ST_TO_ADDR
// if Crawls ( un ) then
69027: LD_VAR 0 2
69031: PPUSH
69032: CALL_OW 318
69036: IFFALSE 69047
// ComWalk ( un ) ;
69038: LD_VAR 0 2
69042: PPUSH
69043: CALL_OW 138
// SetClass ( un , class_sniper ) ;
69047: LD_VAR 0 2
69051: PPUSH
69052: LD_INT 5
69054: PPUSH
69055: CALL_OW 336
// end ;
69059: PPOPN 3
69061: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
69062: LD_EXP 76
69066: PUSH
69067: LD_EXP 94
69071: AND
69072: PUSH
69073: LD_OWVAR 67
69077: PUSH
69078: LD_INT 3
69080: LESS
69081: AND
69082: IFFALSE 69101
69084: GO 69086
69086: DISABLE
// Difficulty := Difficulty + 1 ;
69087: LD_ADDR_OWVAR 67
69091: PUSH
69092: LD_OWVAR 67
69096: PUSH
69097: LD_INT 1
69099: PLUS
69100: ST_TO_ADDR
69101: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
69102: LD_EXP 76
69106: PUSH
69107: LD_EXP 95
69111: AND
69112: IFFALSE 69215
69114: GO 69116
69116: DISABLE
69117: LD_INT 0
69119: PPUSH
// begin for i := 1 to 5 do
69120: LD_ADDR_VAR 0 1
69124: PUSH
69125: DOUBLE
69126: LD_INT 1
69128: DEC
69129: ST_TO_ADDR
69130: LD_INT 5
69132: PUSH
69133: FOR_TO
69134: IFFALSE 69213
// begin uc_nation := nation_nature ;
69136: LD_ADDR_OWVAR 21
69140: PUSH
69141: LD_INT 0
69143: ST_TO_ADDR
// uc_side := 0 ;
69144: LD_ADDR_OWVAR 20
69148: PUSH
69149: LD_INT 0
69151: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69152: LD_ADDR_OWVAR 29
69156: PUSH
69157: LD_INT 12
69159: PUSH
69160: LD_INT 12
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: ST_TO_ADDR
// hc_agressivity := 20 ;
69167: LD_ADDR_OWVAR 35
69171: PUSH
69172: LD_INT 20
69174: ST_TO_ADDR
// hc_class := class_tiger ;
69175: LD_ADDR_OWVAR 28
69179: PUSH
69180: LD_INT 14
69182: ST_TO_ADDR
// hc_gallery :=  ;
69183: LD_ADDR_OWVAR 33
69187: PUSH
69188: LD_STRING 
69190: ST_TO_ADDR
// hc_name :=  ;
69191: LD_ADDR_OWVAR 26
69195: PUSH
69196: LD_STRING 
69198: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69199: CALL_OW 44
69203: PPUSH
69204: LD_INT 0
69206: PPUSH
69207: CALL_OW 51
// end ;
69211: GO 69133
69213: POP
69214: POP
// end ;
69215: PPOPN 1
69217: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69218: LD_EXP 76
69222: PUSH
69223: LD_EXP 96
69227: AND
69228: IFFALSE 69237
69230: GO 69232
69232: DISABLE
// StreamSibBomb ;
69233: CALL 69238 0 0
69237: END
// export function StreamSibBomb ; var i , x , y ; begin
69238: LD_INT 0
69240: PPUSH
69241: PPUSH
69242: PPUSH
69243: PPUSH
// result := false ;
69244: LD_ADDR_VAR 0 1
69248: PUSH
69249: LD_INT 0
69251: ST_TO_ADDR
// for i := 1 to 16 do
69252: LD_ADDR_VAR 0 2
69256: PUSH
69257: DOUBLE
69258: LD_INT 1
69260: DEC
69261: ST_TO_ADDR
69262: LD_INT 16
69264: PUSH
69265: FOR_TO
69266: IFFALSE 69465
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69268: LD_ADDR_VAR 0 3
69272: PUSH
69273: LD_INT 10
69275: PUSH
69276: LD_INT 20
69278: PUSH
69279: LD_INT 30
69281: PUSH
69282: LD_INT 40
69284: PUSH
69285: LD_INT 50
69287: PUSH
69288: LD_INT 60
69290: PUSH
69291: LD_INT 70
69293: PUSH
69294: LD_INT 80
69296: PUSH
69297: LD_INT 90
69299: PUSH
69300: LD_INT 100
69302: PUSH
69303: LD_INT 110
69305: PUSH
69306: LD_INT 120
69308: PUSH
69309: LD_INT 130
69311: PUSH
69312: LD_INT 140
69314: PUSH
69315: LD_INT 150
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 1
69337: PPUSH
69338: LD_INT 15
69340: PPUSH
69341: CALL_OW 12
69345: ARRAY
69346: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69347: LD_ADDR_VAR 0 4
69351: PUSH
69352: LD_INT 10
69354: PUSH
69355: LD_INT 20
69357: PUSH
69358: LD_INT 30
69360: PUSH
69361: LD_INT 40
69363: PUSH
69364: LD_INT 50
69366: PUSH
69367: LD_INT 60
69369: PUSH
69370: LD_INT 70
69372: PUSH
69373: LD_INT 80
69375: PUSH
69376: LD_INT 90
69378: PUSH
69379: LD_INT 100
69381: PUSH
69382: LD_INT 110
69384: PUSH
69385: LD_INT 120
69387: PUSH
69388: LD_INT 130
69390: PUSH
69391: LD_INT 140
69393: PUSH
69394: LD_INT 150
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 1
69416: PPUSH
69417: LD_INT 15
69419: PPUSH
69420: CALL_OW 12
69424: ARRAY
69425: ST_TO_ADDR
// if ValidHex ( x , y ) then
69426: LD_VAR 0 3
69430: PPUSH
69431: LD_VAR 0 4
69435: PPUSH
69436: CALL_OW 488
69440: IFFALSE 69463
// begin result := [ x , y ] ;
69442: LD_ADDR_VAR 0 1
69446: PUSH
69447: LD_VAR 0 3
69451: PUSH
69452: LD_VAR 0 4
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: ST_TO_ADDR
// break ;
69461: GO 69465
// end ; end ;
69463: GO 69265
69465: POP
69466: POP
// if result then
69467: LD_VAR 0 1
69471: IFFALSE 69531
// begin ToLua ( playSibBomb() ) ;
69473: LD_STRING playSibBomb()
69475: PPUSH
69476: CALL_OW 559
// wait ( 0 0$14 ) ;
69480: LD_INT 490
69482: PPUSH
69483: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69487: LD_VAR 0 1
69491: PUSH
69492: LD_INT 1
69494: ARRAY
69495: PPUSH
69496: LD_VAR 0 1
69500: PUSH
69501: LD_INT 2
69503: ARRAY
69504: PPUSH
69505: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69509: LD_VAR 0 1
69513: PUSH
69514: LD_INT 1
69516: ARRAY
69517: PPUSH
69518: LD_VAR 0 1
69522: PUSH
69523: LD_INT 2
69525: ARRAY
69526: PPUSH
69527: CALL_OW 429
// end ; end ;
69531: LD_VAR 0 1
69535: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69536: LD_EXP 76
69540: PUSH
69541: LD_EXP 98
69545: AND
69546: IFFALSE 69558
69548: GO 69550
69550: DISABLE
// YouLost (  ) ;
69551: LD_STRING 
69553: PPUSH
69554: CALL_OW 104
69558: END
// every 0 0$1 trigger StreamModeActive and sFog do
69559: LD_EXP 76
69563: PUSH
69564: LD_EXP 97
69568: AND
69569: IFFALSE 69583
69571: GO 69573
69573: DISABLE
// FogOff ( your_side ) ;
69574: LD_OWVAR 2
69578: PPUSH
69579: CALL_OW 344
69583: END
// every 0 0$1 trigger StreamModeActive and sSun do
69584: LD_EXP 76
69588: PUSH
69589: LD_EXP 99
69593: AND
69594: IFFALSE 69622
69596: GO 69598
69598: DISABLE
// begin solar_recharge_percent := 0 ;
69599: LD_ADDR_OWVAR 79
69603: PUSH
69604: LD_INT 0
69606: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69607: LD_INT 10500
69609: PPUSH
69610: CALL_OW 67
// solar_recharge_percent := 100 ;
69614: LD_ADDR_OWVAR 79
69618: PUSH
69619: LD_INT 100
69621: ST_TO_ADDR
// end ;
69622: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69623: LD_EXP 76
69627: PUSH
69628: LD_EXP 100
69632: AND
69633: IFFALSE 69872
69635: GO 69637
69637: DISABLE
69638: LD_INT 0
69640: PPUSH
69641: PPUSH
69642: PPUSH
// begin tmp := [ ] ;
69643: LD_ADDR_VAR 0 3
69647: PUSH
69648: EMPTY
69649: ST_TO_ADDR
// for i := 1 to 6 do
69650: LD_ADDR_VAR 0 1
69654: PUSH
69655: DOUBLE
69656: LD_INT 1
69658: DEC
69659: ST_TO_ADDR
69660: LD_INT 6
69662: PUSH
69663: FOR_TO
69664: IFFALSE 69769
// begin uc_nation := nation_nature ;
69666: LD_ADDR_OWVAR 21
69670: PUSH
69671: LD_INT 0
69673: ST_TO_ADDR
// uc_side := 0 ;
69674: LD_ADDR_OWVAR 20
69678: PUSH
69679: LD_INT 0
69681: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69682: LD_ADDR_OWVAR 29
69686: PUSH
69687: LD_INT 12
69689: PUSH
69690: LD_INT 12
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: ST_TO_ADDR
// hc_agressivity := 20 ;
69697: LD_ADDR_OWVAR 35
69701: PUSH
69702: LD_INT 20
69704: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69705: LD_ADDR_OWVAR 28
69709: PUSH
69710: LD_INT 17
69712: ST_TO_ADDR
// hc_gallery :=  ;
69713: LD_ADDR_OWVAR 33
69717: PUSH
69718: LD_STRING 
69720: ST_TO_ADDR
// hc_name :=  ;
69721: LD_ADDR_OWVAR 26
69725: PUSH
69726: LD_STRING 
69728: ST_TO_ADDR
// un := CreateHuman ;
69729: LD_ADDR_VAR 0 2
69733: PUSH
69734: CALL_OW 44
69738: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69739: LD_VAR 0 2
69743: PPUSH
69744: LD_INT 1
69746: PPUSH
69747: CALL_OW 51
// tmp := tmp ^ un ;
69751: LD_ADDR_VAR 0 3
69755: PUSH
69756: LD_VAR 0 3
69760: PUSH
69761: LD_VAR 0 2
69765: ADD
69766: ST_TO_ADDR
// end ;
69767: GO 69663
69769: POP
69770: POP
// repeat wait ( 0 0$1 ) ;
69771: LD_INT 35
69773: PPUSH
69774: CALL_OW 67
// for un in tmp do
69778: LD_ADDR_VAR 0 2
69782: PUSH
69783: LD_VAR 0 3
69787: PUSH
69788: FOR_IN
69789: IFFALSE 69863
// begin if IsDead ( un ) then
69791: LD_VAR 0 2
69795: PPUSH
69796: CALL_OW 301
69800: IFFALSE 69820
// begin tmp := tmp diff un ;
69802: LD_ADDR_VAR 0 3
69806: PUSH
69807: LD_VAR 0 3
69811: PUSH
69812: LD_VAR 0 2
69816: DIFF
69817: ST_TO_ADDR
// continue ;
69818: GO 69788
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69820: LD_VAR 0 2
69824: PPUSH
69825: LD_INT 3
69827: PUSH
69828: LD_INT 22
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PPUSH
69842: CALL_OW 69
69846: PPUSH
69847: LD_VAR 0 2
69851: PPUSH
69852: CALL_OW 74
69856: PPUSH
69857: CALL_OW 115
// end ;
69861: GO 69788
69863: POP
69864: POP
// until not tmp ;
69865: LD_VAR 0 3
69869: NOT
69870: IFFALSE 69771
// end ;
69872: PPOPN 3
69874: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69875: LD_EXP 76
69879: PUSH
69880: LD_EXP 101
69884: AND
69885: IFFALSE 69939
69887: GO 69889
69889: DISABLE
// begin ToLua ( displayTroll(); ) ;
69890: LD_STRING displayTroll();
69892: PPUSH
69893: CALL_OW 559
// wait ( 3 3$00 ) ;
69897: LD_INT 6300
69899: PPUSH
69900: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69904: LD_STRING hideTroll();
69906: PPUSH
69907: CALL_OW 559
// wait ( 1 1$00 ) ;
69911: LD_INT 2100
69913: PPUSH
69914: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69918: LD_STRING displayTroll();
69920: PPUSH
69921: CALL_OW 559
// wait ( 1 1$00 ) ;
69925: LD_INT 2100
69927: PPUSH
69928: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69932: LD_STRING hideTroll();
69934: PPUSH
69935: CALL_OW 559
// end ;
69939: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69940: LD_EXP 76
69944: PUSH
69945: LD_EXP 102
69949: AND
69950: IFFALSE 70013
69952: GO 69954
69954: DISABLE
69955: LD_INT 0
69957: PPUSH
// begin p := 0 ;
69958: LD_ADDR_VAR 0 1
69962: PUSH
69963: LD_INT 0
69965: ST_TO_ADDR
// repeat game_speed := 1 ;
69966: LD_ADDR_OWVAR 65
69970: PUSH
69971: LD_INT 1
69973: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69974: LD_INT 35
69976: PPUSH
69977: CALL_OW 67
// p := p + 1 ;
69981: LD_ADDR_VAR 0 1
69985: PUSH
69986: LD_VAR 0 1
69990: PUSH
69991: LD_INT 1
69993: PLUS
69994: ST_TO_ADDR
// until p >= 60 ;
69995: LD_VAR 0 1
69999: PUSH
70000: LD_INT 60
70002: GREATEREQUAL
70003: IFFALSE 69966
// game_speed := 4 ;
70005: LD_ADDR_OWVAR 65
70009: PUSH
70010: LD_INT 4
70012: ST_TO_ADDR
// end ;
70013: PPOPN 1
70015: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70016: LD_EXP 76
70020: PUSH
70021: LD_EXP 103
70025: AND
70026: IFFALSE 70172
70028: GO 70030
70030: DISABLE
70031: LD_INT 0
70033: PPUSH
70034: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70035: LD_ADDR_VAR 0 1
70039: PUSH
70040: LD_INT 22
70042: PUSH
70043: LD_OWVAR 2
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 2
70054: PUSH
70055: LD_INT 30
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 30
70067: PUSH
70068: LD_INT 1
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: LIST
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PPUSH
70084: CALL_OW 69
70088: ST_TO_ADDR
// if not depot then
70089: LD_VAR 0 1
70093: NOT
70094: IFFALSE 70098
// exit ;
70096: GO 70172
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
70098: LD_ADDR_VAR 0 2
70102: PUSH
70103: LD_VAR 0 1
70107: PUSH
70108: LD_INT 1
70110: PPUSH
70111: LD_VAR 0 1
70115: PPUSH
70116: CALL_OW 12
70120: ARRAY
70121: PPUSH
70122: CALL_OW 274
70126: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
70127: LD_VAR 0 2
70131: PPUSH
70132: LD_INT 1
70134: PPUSH
70135: LD_INT 0
70137: PPUSH
70138: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
70142: LD_VAR 0 2
70146: PPUSH
70147: LD_INT 2
70149: PPUSH
70150: LD_INT 0
70152: PPUSH
70153: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
70157: LD_VAR 0 2
70161: PPUSH
70162: LD_INT 3
70164: PPUSH
70165: LD_INT 0
70167: PPUSH
70168: CALL_OW 277
// end ;
70172: PPOPN 2
70174: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70175: LD_EXP 76
70179: PUSH
70180: LD_EXP 104
70184: AND
70185: IFFALSE 70282
70187: GO 70189
70189: DISABLE
70190: LD_INT 0
70192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70193: LD_ADDR_VAR 0 1
70197: PUSH
70198: LD_INT 22
70200: PUSH
70201: LD_OWVAR 2
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 21
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 3
70222: PUSH
70223: LD_INT 23
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: LIST
70241: PPUSH
70242: CALL_OW 69
70246: ST_TO_ADDR
// if not tmp then
70247: LD_VAR 0 1
70251: NOT
70252: IFFALSE 70256
// exit ;
70254: GO 70282
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70256: LD_VAR 0 1
70260: PUSH
70261: LD_INT 1
70263: PPUSH
70264: LD_VAR 0 1
70268: PPUSH
70269: CALL_OW 12
70273: ARRAY
70274: PPUSH
70275: LD_INT 200
70277: PPUSH
70278: CALL_OW 234
// end ;
70282: PPOPN 1
70284: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70285: LD_EXP 76
70289: PUSH
70290: LD_EXP 105
70294: AND
70295: IFFALSE 70374
70297: GO 70299
70299: DISABLE
70300: LD_INT 0
70302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70303: LD_ADDR_VAR 0 1
70307: PUSH
70308: LD_INT 22
70310: PUSH
70311: LD_OWVAR 2
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 21
70322: PUSH
70323: LD_INT 2
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PPUSH
70334: CALL_OW 69
70338: ST_TO_ADDR
// if not tmp then
70339: LD_VAR 0 1
70343: NOT
70344: IFFALSE 70348
// exit ;
70346: GO 70374
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70348: LD_VAR 0 1
70352: PUSH
70353: LD_INT 1
70355: PPUSH
70356: LD_VAR 0 1
70360: PPUSH
70361: CALL_OW 12
70365: ARRAY
70366: PPUSH
70367: LD_INT 60
70369: PPUSH
70370: CALL_OW 234
// end ;
70374: PPOPN 1
70376: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70377: LD_EXP 76
70381: PUSH
70382: LD_EXP 106
70386: AND
70387: IFFALSE 70486
70389: GO 70391
70391: DISABLE
70392: LD_INT 0
70394: PPUSH
70395: PPUSH
// begin enable ;
70396: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70397: LD_ADDR_VAR 0 1
70401: PUSH
70402: LD_INT 22
70404: PUSH
70405: LD_OWVAR 2
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 61
70416: PUSH
70417: EMPTY
70418: LIST
70419: PUSH
70420: LD_INT 33
70422: PUSH
70423: LD_INT 2
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: LIST
70434: PPUSH
70435: CALL_OW 69
70439: ST_TO_ADDR
// if not tmp then
70440: LD_VAR 0 1
70444: NOT
70445: IFFALSE 70449
// exit ;
70447: GO 70486
// for i in tmp do
70449: LD_ADDR_VAR 0 2
70453: PUSH
70454: LD_VAR 0 1
70458: PUSH
70459: FOR_IN
70460: IFFALSE 70484
// if IsControledBy ( i ) then
70462: LD_VAR 0 2
70466: PPUSH
70467: CALL_OW 312
70471: IFFALSE 70482
// ComUnlink ( i ) ;
70473: LD_VAR 0 2
70477: PPUSH
70478: CALL_OW 136
70482: GO 70459
70484: POP
70485: POP
// end ;
70486: PPOPN 2
70488: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70489: LD_EXP 76
70493: PUSH
70494: LD_EXP 107
70498: AND
70499: IFFALSE 70639
70501: GO 70503
70503: DISABLE
70504: LD_INT 0
70506: PPUSH
70507: PPUSH
// begin ToLua ( displayPowell(); ) ;
70508: LD_STRING displayPowell();
70510: PPUSH
70511: CALL_OW 559
// uc_side := 0 ;
70515: LD_ADDR_OWVAR 20
70519: PUSH
70520: LD_INT 0
70522: ST_TO_ADDR
// uc_nation := 2 ;
70523: LD_ADDR_OWVAR 21
70527: PUSH
70528: LD_INT 2
70530: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70531: LD_ADDR_OWVAR 37
70535: PUSH
70536: LD_INT 14
70538: ST_TO_ADDR
// vc_engine := engine_siberite ;
70539: LD_ADDR_OWVAR 39
70543: PUSH
70544: LD_INT 3
70546: ST_TO_ADDR
// vc_control := control_apeman ;
70547: LD_ADDR_OWVAR 38
70551: PUSH
70552: LD_INT 5
70554: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70555: LD_ADDR_OWVAR 40
70559: PUSH
70560: LD_INT 29
70562: ST_TO_ADDR
// un := CreateVehicle ;
70563: LD_ADDR_VAR 0 2
70567: PUSH
70568: CALL_OW 45
70572: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70573: LD_VAR 0 2
70577: PPUSH
70578: LD_INT 1
70580: PPUSH
70581: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70585: LD_INT 35
70587: PPUSH
70588: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70592: LD_VAR 0 2
70596: PPUSH
70597: LD_INT 22
70599: PUSH
70600: LD_OWVAR 2
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PPUSH
70609: CALL_OW 69
70613: PPUSH
70614: LD_VAR 0 2
70618: PPUSH
70619: CALL_OW 74
70623: PPUSH
70624: CALL_OW 115
// until IsDead ( un ) ;
70628: LD_VAR 0 2
70632: PPUSH
70633: CALL_OW 301
70637: IFFALSE 70585
// end ;
70639: PPOPN 2
70641: END
// every 0 0$1 trigger StreamModeActive and sStu do
70642: LD_EXP 76
70646: PUSH
70647: LD_EXP 115
70651: AND
70652: IFFALSE 70668
70654: GO 70656
70656: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70657: LD_STRING displayStucuk();
70659: PPUSH
70660: CALL_OW 559
// ResetFog ;
70664: CALL_OW 335
// end ;
70668: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70669: LD_EXP 76
70673: PUSH
70674: LD_EXP 108
70678: AND
70679: IFFALSE 70820
70681: GO 70683
70683: DISABLE
70684: LD_INT 0
70686: PPUSH
70687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70688: LD_ADDR_VAR 0 2
70692: PUSH
70693: LD_INT 22
70695: PUSH
70696: LD_OWVAR 2
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 21
70707: PUSH
70708: LD_INT 1
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PPUSH
70719: CALL_OW 69
70723: ST_TO_ADDR
// if not tmp then
70724: LD_VAR 0 2
70728: NOT
70729: IFFALSE 70733
// exit ;
70731: GO 70820
// un := tmp [ rand ( 1 , tmp ) ] ;
70733: LD_ADDR_VAR 0 1
70737: PUSH
70738: LD_VAR 0 2
70742: PUSH
70743: LD_INT 1
70745: PPUSH
70746: LD_VAR 0 2
70750: PPUSH
70751: CALL_OW 12
70755: ARRAY
70756: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70757: LD_VAR 0 1
70761: PPUSH
70762: LD_INT 0
70764: PPUSH
70765: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70769: LD_VAR 0 1
70773: PPUSH
70774: LD_OWVAR 3
70778: PUSH
70779: LD_VAR 0 1
70783: DIFF
70784: PPUSH
70785: LD_VAR 0 1
70789: PPUSH
70790: CALL_OW 74
70794: PPUSH
70795: CALL_OW 115
// wait ( 0 0$20 ) ;
70799: LD_INT 700
70801: PPUSH
70802: CALL_OW 67
// SetSide ( un , your_side ) ;
70806: LD_VAR 0 1
70810: PPUSH
70811: LD_OWVAR 2
70815: PPUSH
70816: CALL_OW 235
// end ;
70820: PPOPN 2
70822: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70823: LD_EXP 76
70827: PUSH
70828: LD_EXP 109
70832: AND
70833: IFFALSE 70939
70835: GO 70837
70837: DISABLE
70838: LD_INT 0
70840: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70841: LD_ADDR_VAR 0 1
70845: PUSH
70846: LD_INT 22
70848: PUSH
70849: LD_OWVAR 2
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: LD_INT 2
70860: PUSH
70861: LD_INT 30
70863: PUSH
70864: LD_INT 0
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 30
70873: PUSH
70874: LD_INT 1
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: LIST
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PPUSH
70890: CALL_OW 69
70894: ST_TO_ADDR
// if not depot then
70895: LD_VAR 0 1
70899: NOT
70900: IFFALSE 70904
// exit ;
70902: GO 70939
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70904: LD_VAR 0 1
70908: PUSH
70909: LD_INT 1
70911: ARRAY
70912: PPUSH
70913: CALL_OW 250
70917: PPUSH
70918: LD_VAR 0 1
70922: PUSH
70923: LD_INT 1
70925: ARRAY
70926: PPUSH
70927: CALL_OW 251
70931: PPUSH
70932: LD_INT 70
70934: PPUSH
70935: CALL_OW 495
// end ;
70939: PPOPN 1
70941: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70942: LD_EXP 76
70946: PUSH
70947: LD_EXP 110
70951: AND
70952: IFFALSE 71163
70954: GO 70956
70956: DISABLE
70957: LD_INT 0
70959: PPUSH
70960: PPUSH
70961: PPUSH
70962: PPUSH
70963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70964: LD_ADDR_VAR 0 5
70968: PUSH
70969: LD_INT 22
70971: PUSH
70972: LD_OWVAR 2
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 21
70983: PUSH
70984: LD_INT 1
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PPUSH
70995: CALL_OW 69
70999: ST_TO_ADDR
// if not tmp then
71000: LD_VAR 0 5
71004: NOT
71005: IFFALSE 71009
// exit ;
71007: GO 71163
// for i in tmp do
71009: LD_ADDR_VAR 0 1
71013: PUSH
71014: LD_VAR 0 5
71018: PUSH
71019: FOR_IN
71020: IFFALSE 71161
// begin d := rand ( 0 , 5 ) ;
71022: LD_ADDR_VAR 0 4
71026: PUSH
71027: LD_INT 0
71029: PPUSH
71030: LD_INT 5
71032: PPUSH
71033: CALL_OW 12
71037: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71038: LD_ADDR_VAR 0 2
71042: PUSH
71043: LD_VAR 0 1
71047: PPUSH
71048: CALL_OW 250
71052: PPUSH
71053: LD_VAR 0 4
71057: PPUSH
71058: LD_INT 3
71060: PPUSH
71061: LD_INT 12
71063: PPUSH
71064: CALL_OW 12
71068: PPUSH
71069: CALL_OW 272
71073: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
71074: LD_ADDR_VAR 0 3
71078: PUSH
71079: LD_VAR 0 1
71083: PPUSH
71084: CALL_OW 251
71088: PPUSH
71089: LD_VAR 0 4
71093: PPUSH
71094: LD_INT 3
71096: PPUSH
71097: LD_INT 12
71099: PPUSH
71100: CALL_OW 12
71104: PPUSH
71105: CALL_OW 273
71109: ST_TO_ADDR
// if ValidHex ( x , y ) then
71110: LD_VAR 0 2
71114: PPUSH
71115: LD_VAR 0 3
71119: PPUSH
71120: CALL_OW 488
71124: IFFALSE 71159
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
71126: LD_VAR 0 1
71130: PPUSH
71131: LD_VAR 0 2
71135: PPUSH
71136: LD_VAR 0 3
71140: PPUSH
71141: LD_INT 3
71143: PPUSH
71144: LD_INT 6
71146: PPUSH
71147: CALL_OW 12
71151: PPUSH
71152: LD_INT 1
71154: PPUSH
71155: CALL_OW 483
// end ;
71159: GO 71019
71161: POP
71162: POP
// end ;
71163: PPOPN 5
71165: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71166: LD_EXP 76
71170: PUSH
71171: LD_EXP 111
71175: AND
71176: IFFALSE 71270
71178: GO 71180
71180: DISABLE
71181: LD_INT 0
71183: PPUSH
71184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71185: LD_ADDR_VAR 0 2
71189: PUSH
71190: LD_INT 22
71192: PUSH
71193: LD_OWVAR 2
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 32
71204: PUSH
71205: LD_INT 1
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 21
71214: PUSH
71215: LD_INT 2
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: LIST
71226: PPUSH
71227: CALL_OW 69
71231: ST_TO_ADDR
// if not tmp then
71232: LD_VAR 0 2
71236: NOT
71237: IFFALSE 71241
// exit ;
71239: GO 71270
// for i in tmp do
71241: LD_ADDR_VAR 0 1
71245: PUSH
71246: LD_VAR 0 2
71250: PUSH
71251: FOR_IN
71252: IFFALSE 71268
// SetFuel ( i , 0 ) ;
71254: LD_VAR 0 1
71258: PPUSH
71259: LD_INT 0
71261: PPUSH
71262: CALL_OW 240
71266: GO 71251
71268: POP
71269: POP
// end ;
71270: PPOPN 2
71272: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71273: LD_EXP 76
71277: PUSH
71278: LD_EXP 112
71282: AND
71283: IFFALSE 71349
71285: GO 71287
71287: DISABLE
71288: LD_INT 0
71290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71291: LD_ADDR_VAR 0 1
71295: PUSH
71296: LD_INT 22
71298: PUSH
71299: LD_OWVAR 2
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 30
71310: PUSH
71311: LD_INT 29
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PPUSH
71322: CALL_OW 69
71326: ST_TO_ADDR
// if not tmp then
71327: LD_VAR 0 1
71331: NOT
71332: IFFALSE 71336
// exit ;
71334: GO 71349
// DestroyUnit ( tmp [ 1 ] ) ;
71336: LD_VAR 0 1
71340: PUSH
71341: LD_INT 1
71343: ARRAY
71344: PPUSH
71345: CALL_OW 65
// end ;
71349: PPOPN 1
71351: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71352: LD_EXP 76
71356: PUSH
71357: LD_EXP 114
71361: AND
71362: IFFALSE 71491
71364: GO 71366
71366: DISABLE
71367: LD_INT 0
71369: PPUSH
// begin uc_side := 0 ;
71370: LD_ADDR_OWVAR 20
71374: PUSH
71375: LD_INT 0
71377: ST_TO_ADDR
// uc_nation := nation_arabian ;
71378: LD_ADDR_OWVAR 21
71382: PUSH
71383: LD_INT 2
71385: ST_TO_ADDR
// hc_gallery :=  ;
71386: LD_ADDR_OWVAR 33
71390: PUSH
71391: LD_STRING 
71393: ST_TO_ADDR
// hc_name :=  ;
71394: LD_ADDR_OWVAR 26
71398: PUSH
71399: LD_STRING 
71401: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71402: LD_INT 1
71404: PPUSH
71405: LD_INT 11
71407: PPUSH
71408: LD_INT 10
71410: PPUSH
71411: CALL_OW 380
// un := CreateHuman ;
71415: LD_ADDR_VAR 0 1
71419: PUSH
71420: CALL_OW 44
71424: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71425: LD_VAR 0 1
71429: PPUSH
71430: LD_INT 1
71432: PPUSH
71433: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71437: LD_INT 35
71439: PPUSH
71440: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71444: LD_VAR 0 1
71448: PPUSH
71449: LD_INT 22
71451: PUSH
71452: LD_OWVAR 2
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PPUSH
71461: CALL_OW 69
71465: PPUSH
71466: LD_VAR 0 1
71470: PPUSH
71471: CALL_OW 74
71475: PPUSH
71476: CALL_OW 115
// until IsDead ( un ) ;
71480: LD_VAR 0 1
71484: PPUSH
71485: CALL_OW 301
71489: IFFALSE 71437
// end ;
71491: PPOPN 1
71493: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71494: LD_EXP 76
71498: PUSH
71499: LD_EXP 116
71503: AND
71504: IFFALSE 71516
71506: GO 71508
71508: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71509: LD_STRING earthquake(getX(game), 0, 32)
71511: PPUSH
71512: CALL_OW 559
71516: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71517: LD_EXP 76
71521: PUSH
71522: LD_EXP 117
71526: AND
71527: IFFALSE 71618
71529: GO 71531
71531: DISABLE
71532: LD_INT 0
71534: PPUSH
// begin enable ;
71535: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71536: LD_ADDR_VAR 0 1
71540: PUSH
71541: LD_INT 22
71543: PUSH
71544: LD_OWVAR 2
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 21
71555: PUSH
71556: LD_INT 2
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 33
71565: PUSH
71566: LD_INT 3
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: LIST
71577: PPUSH
71578: CALL_OW 69
71582: ST_TO_ADDR
// if not tmp then
71583: LD_VAR 0 1
71587: NOT
71588: IFFALSE 71592
// exit ;
71590: GO 71618
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71592: LD_VAR 0 1
71596: PUSH
71597: LD_INT 1
71599: PPUSH
71600: LD_VAR 0 1
71604: PPUSH
71605: CALL_OW 12
71609: ARRAY
71610: PPUSH
71611: LD_INT 1
71613: PPUSH
71614: CALL_OW 234
// end ;
71618: PPOPN 1
71620: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71621: LD_EXP 76
71625: PUSH
71626: LD_EXP 118
71630: AND
71631: IFFALSE 71772
71633: GO 71635
71635: DISABLE
71636: LD_INT 0
71638: PPUSH
71639: PPUSH
71640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71641: LD_ADDR_VAR 0 3
71645: PUSH
71646: LD_INT 22
71648: PUSH
71649: LD_OWVAR 2
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 25
71660: PUSH
71661: LD_INT 1
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PPUSH
71672: CALL_OW 69
71676: ST_TO_ADDR
// if not tmp then
71677: LD_VAR 0 3
71681: NOT
71682: IFFALSE 71686
// exit ;
71684: GO 71772
// un := tmp [ rand ( 1 , tmp ) ] ;
71686: LD_ADDR_VAR 0 2
71690: PUSH
71691: LD_VAR 0 3
71695: PUSH
71696: LD_INT 1
71698: PPUSH
71699: LD_VAR 0 3
71703: PPUSH
71704: CALL_OW 12
71708: ARRAY
71709: ST_TO_ADDR
// if Crawls ( un ) then
71710: LD_VAR 0 2
71714: PPUSH
71715: CALL_OW 318
71719: IFFALSE 71730
// ComWalk ( un ) ;
71721: LD_VAR 0 2
71725: PPUSH
71726: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71730: LD_VAR 0 2
71734: PPUSH
71735: LD_INT 9
71737: PPUSH
71738: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71742: LD_INT 28
71744: PPUSH
71745: LD_OWVAR 2
71749: PPUSH
71750: LD_INT 2
71752: PPUSH
71753: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71757: LD_INT 29
71759: PPUSH
71760: LD_OWVAR 2
71764: PPUSH
71765: LD_INT 2
71767: PPUSH
71768: CALL_OW 322
// end ;
71772: PPOPN 3
71774: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71775: LD_EXP 76
71779: PUSH
71780: LD_EXP 119
71784: AND
71785: IFFALSE 71896
71787: GO 71789
71789: DISABLE
71790: LD_INT 0
71792: PPUSH
71793: PPUSH
71794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71795: LD_ADDR_VAR 0 3
71799: PUSH
71800: LD_INT 22
71802: PUSH
71803: LD_OWVAR 2
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 25
71814: PUSH
71815: LD_INT 1
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PPUSH
71826: CALL_OW 69
71830: ST_TO_ADDR
// if not tmp then
71831: LD_VAR 0 3
71835: NOT
71836: IFFALSE 71840
// exit ;
71838: GO 71896
// un := tmp [ rand ( 1 , tmp ) ] ;
71840: LD_ADDR_VAR 0 2
71844: PUSH
71845: LD_VAR 0 3
71849: PUSH
71850: LD_INT 1
71852: PPUSH
71853: LD_VAR 0 3
71857: PPUSH
71858: CALL_OW 12
71862: ARRAY
71863: ST_TO_ADDR
// if Crawls ( un ) then
71864: LD_VAR 0 2
71868: PPUSH
71869: CALL_OW 318
71873: IFFALSE 71884
// ComWalk ( un ) ;
71875: LD_VAR 0 2
71879: PPUSH
71880: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71884: LD_VAR 0 2
71888: PPUSH
71889: LD_INT 8
71891: PPUSH
71892: CALL_OW 336
// end ;
71896: PPOPN 3
71898: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71899: LD_EXP 76
71903: PUSH
71904: LD_EXP 120
71908: AND
71909: IFFALSE 72053
71911: GO 71913
71913: DISABLE
71914: LD_INT 0
71916: PPUSH
71917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71918: LD_ADDR_VAR 0 2
71922: PUSH
71923: LD_INT 22
71925: PUSH
71926: LD_OWVAR 2
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 21
71937: PUSH
71938: LD_INT 2
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 2
71947: PUSH
71948: LD_INT 34
71950: PUSH
71951: LD_INT 12
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PUSH
71958: LD_INT 34
71960: PUSH
71961: LD_INT 51
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 34
71970: PUSH
71971: LD_INT 32
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: LIST
71988: PPUSH
71989: CALL_OW 69
71993: ST_TO_ADDR
// if not tmp then
71994: LD_VAR 0 2
71998: NOT
71999: IFFALSE 72003
// exit ;
72001: GO 72053
// for i in tmp do
72003: LD_ADDR_VAR 0 1
72007: PUSH
72008: LD_VAR 0 2
72012: PUSH
72013: FOR_IN
72014: IFFALSE 72051
// if GetCargo ( i , mat_artifact ) = 0 then
72016: LD_VAR 0 1
72020: PPUSH
72021: LD_INT 4
72023: PPUSH
72024: CALL_OW 289
72028: PUSH
72029: LD_INT 0
72031: EQUAL
72032: IFFALSE 72049
// SetCargo ( i , mat_siberit , 100 ) ;
72034: LD_VAR 0 1
72038: PPUSH
72039: LD_INT 3
72041: PPUSH
72042: LD_INT 100
72044: PPUSH
72045: CALL_OW 290
72049: GO 72013
72051: POP
72052: POP
// end ;
72053: PPOPN 2
72055: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
72056: LD_EXP 76
72060: PUSH
72061: LD_EXP 121
72065: AND
72066: IFFALSE 72249
72068: GO 72070
72070: DISABLE
72071: LD_INT 0
72073: PPUSH
72074: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72075: LD_ADDR_VAR 0 2
72079: PUSH
72080: LD_INT 22
72082: PUSH
72083: LD_OWVAR 2
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PPUSH
72092: CALL_OW 69
72096: ST_TO_ADDR
// if not tmp then
72097: LD_VAR 0 2
72101: NOT
72102: IFFALSE 72106
// exit ;
72104: GO 72249
// for i := 1 to 2 do
72106: LD_ADDR_VAR 0 1
72110: PUSH
72111: DOUBLE
72112: LD_INT 1
72114: DEC
72115: ST_TO_ADDR
72116: LD_INT 2
72118: PUSH
72119: FOR_TO
72120: IFFALSE 72247
// begin uc_side := your_side ;
72122: LD_ADDR_OWVAR 20
72126: PUSH
72127: LD_OWVAR 2
72131: ST_TO_ADDR
// uc_nation := nation_american ;
72132: LD_ADDR_OWVAR 21
72136: PUSH
72137: LD_INT 1
72139: ST_TO_ADDR
// vc_chassis := us_morphling ;
72140: LD_ADDR_OWVAR 37
72144: PUSH
72145: LD_INT 5
72147: ST_TO_ADDR
// vc_engine := engine_siberite ;
72148: LD_ADDR_OWVAR 39
72152: PUSH
72153: LD_INT 3
72155: ST_TO_ADDR
// vc_control := control_computer ;
72156: LD_ADDR_OWVAR 38
72160: PUSH
72161: LD_INT 3
72163: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72164: LD_ADDR_OWVAR 40
72168: PUSH
72169: LD_INT 10
72171: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72172: LD_VAR 0 2
72176: PUSH
72177: LD_INT 1
72179: ARRAY
72180: PPUSH
72181: CALL_OW 310
72185: NOT
72186: IFFALSE 72233
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72188: CALL_OW 45
72192: PPUSH
72193: LD_VAR 0 2
72197: PUSH
72198: LD_INT 1
72200: ARRAY
72201: PPUSH
72202: CALL_OW 250
72206: PPUSH
72207: LD_VAR 0 2
72211: PUSH
72212: LD_INT 1
72214: ARRAY
72215: PPUSH
72216: CALL_OW 251
72220: PPUSH
72221: LD_INT 12
72223: PPUSH
72224: LD_INT 1
72226: PPUSH
72227: CALL_OW 50
72231: GO 72245
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72233: CALL_OW 45
72237: PPUSH
72238: LD_INT 1
72240: PPUSH
72241: CALL_OW 51
// end ;
72245: GO 72119
72247: POP
72248: POP
// end ;
72249: PPOPN 2
72251: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72252: LD_EXP 76
72256: PUSH
72257: LD_EXP 122
72261: AND
72262: IFFALSE 72484
72264: GO 72266
72266: DISABLE
72267: LD_INT 0
72269: PPUSH
72270: PPUSH
72271: PPUSH
72272: PPUSH
72273: PPUSH
72274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72275: LD_ADDR_VAR 0 6
72279: PUSH
72280: LD_INT 22
72282: PUSH
72283: LD_OWVAR 2
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 21
72294: PUSH
72295: LD_INT 1
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 3
72304: PUSH
72305: LD_INT 23
72307: PUSH
72308: LD_INT 0
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: LIST
72323: PPUSH
72324: CALL_OW 69
72328: ST_TO_ADDR
// if not tmp then
72329: LD_VAR 0 6
72333: NOT
72334: IFFALSE 72338
// exit ;
72336: GO 72484
// s1 := rand ( 1 , 4 ) ;
72338: LD_ADDR_VAR 0 2
72342: PUSH
72343: LD_INT 1
72345: PPUSH
72346: LD_INT 4
72348: PPUSH
72349: CALL_OW 12
72353: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72354: LD_ADDR_VAR 0 4
72358: PUSH
72359: LD_VAR 0 6
72363: PUSH
72364: LD_INT 1
72366: ARRAY
72367: PPUSH
72368: LD_VAR 0 2
72372: PPUSH
72373: CALL_OW 259
72377: ST_TO_ADDR
// if s1 = 1 then
72378: LD_VAR 0 2
72382: PUSH
72383: LD_INT 1
72385: EQUAL
72386: IFFALSE 72406
// s2 := rand ( 2 , 4 ) else
72388: LD_ADDR_VAR 0 3
72392: PUSH
72393: LD_INT 2
72395: PPUSH
72396: LD_INT 4
72398: PPUSH
72399: CALL_OW 12
72403: ST_TO_ADDR
72404: GO 72414
// s2 := 1 ;
72406: LD_ADDR_VAR 0 3
72410: PUSH
72411: LD_INT 1
72413: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72414: LD_ADDR_VAR 0 5
72418: PUSH
72419: LD_VAR 0 6
72423: PUSH
72424: LD_INT 1
72426: ARRAY
72427: PPUSH
72428: LD_VAR 0 3
72432: PPUSH
72433: CALL_OW 259
72437: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72438: LD_VAR 0 6
72442: PUSH
72443: LD_INT 1
72445: ARRAY
72446: PPUSH
72447: LD_VAR 0 2
72451: PPUSH
72452: LD_VAR 0 5
72456: PPUSH
72457: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72461: LD_VAR 0 6
72465: PUSH
72466: LD_INT 1
72468: ARRAY
72469: PPUSH
72470: LD_VAR 0 3
72474: PPUSH
72475: LD_VAR 0 4
72479: PPUSH
72480: CALL_OW 237
// end ;
72484: PPOPN 6
72486: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72487: LD_EXP 76
72491: PUSH
72492: LD_EXP 123
72496: AND
72497: IFFALSE 72576
72499: GO 72501
72501: DISABLE
72502: LD_INT 0
72504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72505: LD_ADDR_VAR 0 1
72509: PUSH
72510: LD_INT 22
72512: PUSH
72513: LD_OWVAR 2
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 30
72524: PUSH
72525: LD_INT 3
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PPUSH
72536: CALL_OW 69
72540: ST_TO_ADDR
// if not tmp then
72541: LD_VAR 0 1
72545: NOT
72546: IFFALSE 72550
// exit ;
72548: GO 72576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72550: LD_VAR 0 1
72554: PUSH
72555: LD_INT 1
72557: PPUSH
72558: LD_VAR 0 1
72562: PPUSH
72563: CALL_OW 12
72567: ARRAY
72568: PPUSH
72569: LD_INT 1
72571: PPUSH
72572: CALL_OW 234
// end ;
72576: PPOPN 1
72578: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72579: LD_EXP 76
72583: PUSH
72584: LD_EXP 124
72588: AND
72589: IFFALSE 72701
72591: GO 72593
72593: DISABLE
72594: LD_INT 0
72596: PPUSH
72597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72598: LD_ADDR_VAR 0 2
72602: PUSH
72603: LD_INT 22
72605: PUSH
72606: LD_OWVAR 2
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 2
72617: PUSH
72618: LD_INT 30
72620: PUSH
72621: LD_INT 27
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 30
72630: PUSH
72631: LD_INT 26
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 30
72640: PUSH
72641: LD_INT 28
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PPUSH
72658: CALL_OW 69
72662: ST_TO_ADDR
// if not tmp then
72663: LD_VAR 0 2
72667: NOT
72668: IFFALSE 72672
// exit ;
72670: GO 72701
// for i in tmp do
72672: LD_ADDR_VAR 0 1
72676: PUSH
72677: LD_VAR 0 2
72681: PUSH
72682: FOR_IN
72683: IFFALSE 72699
// SetLives ( i , 1 ) ;
72685: LD_VAR 0 1
72689: PPUSH
72690: LD_INT 1
72692: PPUSH
72693: CALL_OW 234
72697: GO 72682
72699: POP
72700: POP
// end ;
72701: PPOPN 2
72703: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72704: LD_EXP 76
72708: PUSH
72709: LD_EXP 125
72713: AND
72714: IFFALSE 72988
72716: GO 72718
72718: DISABLE
72719: LD_INT 0
72721: PPUSH
72722: PPUSH
72723: PPUSH
// begin i := rand ( 1 , 7 ) ;
72724: LD_ADDR_VAR 0 1
72728: PUSH
72729: LD_INT 1
72731: PPUSH
72732: LD_INT 7
72734: PPUSH
72735: CALL_OW 12
72739: ST_TO_ADDR
// case i of 1 :
72740: LD_VAR 0 1
72744: PUSH
72745: LD_INT 1
72747: DOUBLE
72748: EQUAL
72749: IFTRUE 72753
72751: GO 72763
72753: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72754: LD_STRING earthquake(getX(game), 0, 32)
72756: PPUSH
72757: CALL_OW 559
72761: GO 72988
72763: LD_INT 2
72765: DOUBLE
72766: EQUAL
72767: IFTRUE 72771
72769: GO 72785
72771: POP
// begin ToLua ( displayStucuk(); ) ;
72772: LD_STRING displayStucuk();
72774: PPUSH
72775: CALL_OW 559
// ResetFog ;
72779: CALL_OW 335
// end ; 3 :
72783: GO 72988
72785: LD_INT 3
72787: DOUBLE
72788: EQUAL
72789: IFTRUE 72793
72791: GO 72897
72793: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72794: LD_ADDR_VAR 0 2
72798: PUSH
72799: LD_INT 22
72801: PUSH
72802: LD_OWVAR 2
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 25
72813: PUSH
72814: LD_INT 1
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PPUSH
72825: CALL_OW 69
72829: ST_TO_ADDR
// if not tmp then
72830: LD_VAR 0 2
72834: NOT
72835: IFFALSE 72839
// exit ;
72837: GO 72988
// un := tmp [ rand ( 1 , tmp ) ] ;
72839: LD_ADDR_VAR 0 3
72843: PUSH
72844: LD_VAR 0 2
72848: PUSH
72849: LD_INT 1
72851: PPUSH
72852: LD_VAR 0 2
72856: PPUSH
72857: CALL_OW 12
72861: ARRAY
72862: ST_TO_ADDR
// if Crawls ( un ) then
72863: LD_VAR 0 3
72867: PPUSH
72868: CALL_OW 318
72872: IFFALSE 72883
// ComWalk ( un ) ;
72874: LD_VAR 0 3
72878: PPUSH
72879: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72883: LD_VAR 0 3
72887: PPUSH
72888: LD_INT 8
72890: PPUSH
72891: CALL_OW 336
// end ; 4 :
72895: GO 72988
72897: LD_INT 4
72899: DOUBLE
72900: EQUAL
72901: IFTRUE 72905
72903: GO 72966
72905: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72906: LD_ADDR_VAR 0 2
72910: PUSH
72911: LD_INT 22
72913: PUSH
72914: LD_OWVAR 2
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 30
72925: PUSH
72926: LD_INT 29
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PPUSH
72937: CALL_OW 69
72941: ST_TO_ADDR
// if not tmp then
72942: LD_VAR 0 2
72946: NOT
72947: IFFALSE 72951
// exit ;
72949: GO 72988
// DestroyUnit ( tmp [ 1 ] ) ;
72951: LD_VAR 0 2
72955: PUSH
72956: LD_INT 1
72958: ARRAY
72959: PPUSH
72960: CALL_OW 65
// end ; 5 .. 7 :
72964: GO 72988
72966: LD_INT 5
72968: DOUBLE
72969: GREATEREQUAL
72970: IFFALSE 72978
72972: LD_INT 7
72974: DOUBLE
72975: LESSEQUAL
72976: IFTRUE 72980
72978: GO 72987
72980: POP
// StreamSibBomb ; end ;
72981: CALL 69238 0 0
72985: GO 72988
72987: POP
// end ;
72988: PPOPN 3
72990: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72991: LD_EXP 76
72995: PUSH
72996: LD_EXP 126
73000: AND
73001: IFFALSE 73157
73003: GO 73005
73005: DISABLE
73006: LD_INT 0
73008: PPUSH
73009: PPUSH
73010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73011: LD_ADDR_VAR 0 2
73015: PUSH
73016: LD_INT 81
73018: PUSH
73019: LD_OWVAR 2
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 2
73030: PUSH
73031: LD_INT 21
73033: PUSH
73034: LD_INT 1
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 21
73043: PUSH
73044: LD_INT 2
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: LIST
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PPUSH
73060: CALL_OW 69
73064: ST_TO_ADDR
// if not tmp then
73065: LD_VAR 0 2
73069: NOT
73070: IFFALSE 73074
// exit ;
73072: GO 73157
// p := 0 ;
73074: LD_ADDR_VAR 0 3
73078: PUSH
73079: LD_INT 0
73081: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73082: LD_INT 35
73084: PPUSH
73085: CALL_OW 67
// p := p + 1 ;
73089: LD_ADDR_VAR 0 3
73093: PUSH
73094: LD_VAR 0 3
73098: PUSH
73099: LD_INT 1
73101: PLUS
73102: ST_TO_ADDR
// for i in tmp do
73103: LD_ADDR_VAR 0 1
73107: PUSH
73108: LD_VAR 0 2
73112: PUSH
73113: FOR_IN
73114: IFFALSE 73145
// if GetLives ( i ) < 1000 then
73116: LD_VAR 0 1
73120: PPUSH
73121: CALL_OW 256
73125: PUSH
73126: LD_INT 1000
73128: LESS
73129: IFFALSE 73143
// SetLives ( i , 1000 ) ;
73131: LD_VAR 0 1
73135: PPUSH
73136: LD_INT 1000
73138: PPUSH
73139: CALL_OW 234
73143: GO 73113
73145: POP
73146: POP
// until p > 20 ;
73147: LD_VAR 0 3
73151: PUSH
73152: LD_INT 20
73154: GREATER
73155: IFFALSE 73082
// end ;
73157: PPOPN 3
73159: END
// every 0 0$1 trigger StreamModeActive and sTime do
73160: LD_EXP 76
73164: PUSH
73165: LD_EXP 127
73169: AND
73170: IFFALSE 73205
73172: GO 73174
73174: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73175: LD_INT 28
73177: PPUSH
73178: LD_OWVAR 2
73182: PPUSH
73183: LD_INT 2
73185: PPUSH
73186: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73190: LD_INT 30
73192: PPUSH
73193: LD_OWVAR 2
73197: PPUSH
73198: LD_INT 2
73200: PPUSH
73201: CALL_OW 322
// end ;
73205: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73206: LD_EXP 76
73210: PUSH
73211: LD_EXP 128
73215: AND
73216: IFFALSE 73337
73218: GO 73220
73220: DISABLE
73221: LD_INT 0
73223: PPUSH
73224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73225: LD_ADDR_VAR 0 2
73229: PUSH
73230: LD_INT 22
73232: PUSH
73233: LD_OWVAR 2
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 21
73244: PUSH
73245: LD_INT 1
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 3
73254: PUSH
73255: LD_INT 23
73257: PUSH
73258: LD_INT 0
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: LIST
73273: PPUSH
73274: CALL_OW 69
73278: ST_TO_ADDR
// if not tmp then
73279: LD_VAR 0 2
73283: NOT
73284: IFFALSE 73288
// exit ;
73286: GO 73337
// for i in tmp do
73288: LD_ADDR_VAR 0 1
73292: PUSH
73293: LD_VAR 0 2
73297: PUSH
73298: FOR_IN
73299: IFFALSE 73335
// begin if Crawls ( i ) then
73301: LD_VAR 0 1
73305: PPUSH
73306: CALL_OW 318
73310: IFFALSE 73321
// ComWalk ( i ) ;
73312: LD_VAR 0 1
73316: PPUSH
73317: CALL_OW 138
// SetClass ( i , 2 ) ;
73321: LD_VAR 0 1
73325: PPUSH
73326: LD_INT 2
73328: PPUSH
73329: CALL_OW 336
// end ;
73333: GO 73298
73335: POP
73336: POP
// end ;
73337: PPOPN 2
73339: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73340: LD_EXP 76
73344: PUSH
73345: LD_EXP 129
73349: AND
73350: IFFALSE 73631
73352: GO 73354
73354: DISABLE
73355: LD_INT 0
73357: PPUSH
73358: PPUSH
73359: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73360: LD_OWVAR 2
73364: PPUSH
73365: LD_INT 9
73367: PPUSH
73368: LD_INT 1
73370: PPUSH
73371: LD_INT 1
73373: PPUSH
73374: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73378: LD_INT 9
73380: PPUSH
73381: LD_OWVAR 2
73385: PPUSH
73386: CALL_OW 343
// uc_side := 9 ;
73390: LD_ADDR_OWVAR 20
73394: PUSH
73395: LD_INT 9
73397: ST_TO_ADDR
// uc_nation := 2 ;
73398: LD_ADDR_OWVAR 21
73402: PUSH
73403: LD_INT 2
73405: ST_TO_ADDR
// hc_name := Dark Warrior ;
73406: LD_ADDR_OWVAR 26
73410: PUSH
73411: LD_STRING Dark Warrior
73413: ST_TO_ADDR
// hc_gallery :=  ;
73414: LD_ADDR_OWVAR 33
73418: PUSH
73419: LD_STRING 
73421: ST_TO_ADDR
// hc_noskilllimit := true ;
73422: LD_ADDR_OWVAR 76
73426: PUSH
73427: LD_INT 1
73429: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73430: LD_ADDR_OWVAR 31
73434: PUSH
73435: LD_INT 30
73437: PUSH
73438: LD_INT 30
73440: PUSH
73441: LD_INT 30
73443: PUSH
73444: LD_INT 30
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: ST_TO_ADDR
// un := CreateHuman ;
73453: LD_ADDR_VAR 0 3
73457: PUSH
73458: CALL_OW 44
73462: ST_TO_ADDR
// hc_noskilllimit := false ;
73463: LD_ADDR_OWVAR 76
73467: PUSH
73468: LD_INT 0
73470: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73471: LD_VAR 0 3
73475: PPUSH
73476: LD_INT 1
73478: PPUSH
73479: CALL_OW 51
// p := 0 ;
73483: LD_ADDR_VAR 0 2
73487: PUSH
73488: LD_INT 0
73490: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73491: LD_INT 35
73493: PPUSH
73494: CALL_OW 67
// p := p + 1 ;
73498: LD_ADDR_VAR 0 2
73502: PUSH
73503: LD_VAR 0 2
73507: PUSH
73508: LD_INT 1
73510: PLUS
73511: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73512: LD_VAR 0 3
73516: PPUSH
73517: CALL_OW 256
73521: PUSH
73522: LD_INT 1000
73524: LESS
73525: IFFALSE 73539
// SetLives ( un , 1000 ) ;
73527: LD_VAR 0 3
73531: PPUSH
73532: LD_INT 1000
73534: PPUSH
73535: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73539: LD_VAR 0 3
73543: PPUSH
73544: LD_INT 81
73546: PUSH
73547: LD_OWVAR 2
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 91
73558: PUSH
73559: LD_VAR 0 3
73563: PUSH
73564: LD_INT 30
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: LIST
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PPUSH
73576: CALL_OW 69
73580: PPUSH
73581: LD_VAR 0 3
73585: PPUSH
73586: CALL_OW 74
73590: PPUSH
73591: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
73595: LD_VAR 0 2
73599: PUSH
73600: LD_INT 60
73602: GREATER
73603: PUSH
73604: LD_VAR 0 3
73608: PPUSH
73609: CALL_OW 301
73613: OR
73614: IFFALSE 73491
// if un then
73616: LD_VAR 0 3
73620: IFFALSE 73631
// RemoveUnit ( un ) ;
73622: LD_VAR 0 3
73626: PPUSH
73627: CALL_OW 64
// end ;
73631: PPOPN 3
73633: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73634: LD_INT 0
73636: PPUSH
// case cmd of 301 :
73637: LD_VAR 0 1
73641: PUSH
73642: LD_INT 301
73644: DOUBLE
73645: EQUAL
73646: IFTRUE 73650
73648: GO 73682
73650: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73651: LD_VAR 0 6
73655: PPUSH
73656: LD_VAR 0 7
73660: PPUSH
73661: LD_VAR 0 8
73665: PPUSH
73666: LD_VAR 0 4
73670: PPUSH
73671: LD_VAR 0 5
73675: PPUSH
73676: CALL 74883 0 5
73680: GO 73803
73682: LD_INT 302
73684: DOUBLE
73685: EQUAL
73686: IFTRUE 73690
73688: GO 73727
73690: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73691: LD_VAR 0 6
73695: PPUSH
73696: LD_VAR 0 7
73700: PPUSH
73701: LD_VAR 0 8
73705: PPUSH
73706: LD_VAR 0 9
73710: PPUSH
73711: LD_VAR 0 4
73715: PPUSH
73716: LD_VAR 0 5
73720: PPUSH
73721: CALL 74974 0 6
73725: GO 73803
73727: LD_INT 303
73729: DOUBLE
73730: EQUAL
73731: IFTRUE 73735
73733: GO 73772
73735: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73736: LD_VAR 0 6
73740: PPUSH
73741: LD_VAR 0 7
73745: PPUSH
73746: LD_VAR 0 8
73750: PPUSH
73751: LD_VAR 0 9
73755: PPUSH
73756: LD_VAR 0 4
73760: PPUSH
73761: LD_VAR 0 5
73765: PPUSH
73766: CALL 73808 0 6
73770: GO 73803
73772: LD_INT 304
73774: DOUBLE
73775: EQUAL
73776: IFTRUE 73780
73778: GO 73802
73780: POP
// hHackTeleport ( unit , x , y ) ; end ;
73781: LD_VAR 0 2
73785: PPUSH
73786: LD_VAR 0 4
73790: PPUSH
73791: LD_VAR 0 5
73795: PPUSH
73796: CALL 75567 0 3
73800: GO 73803
73802: POP
// end ;
73803: LD_VAR 0 12
73807: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73808: LD_INT 0
73810: PPUSH
73811: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73812: LD_VAR 0 1
73816: PUSH
73817: LD_INT 1
73819: LESS
73820: PUSH
73821: LD_VAR 0 1
73825: PUSH
73826: LD_INT 3
73828: GREATER
73829: OR
73830: PUSH
73831: LD_VAR 0 5
73835: PPUSH
73836: LD_VAR 0 6
73840: PPUSH
73841: CALL_OW 428
73845: OR
73846: IFFALSE 73850
// exit ;
73848: GO 74570
// uc_side := your_side ;
73850: LD_ADDR_OWVAR 20
73854: PUSH
73855: LD_OWVAR 2
73859: ST_TO_ADDR
// uc_nation := nation ;
73860: LD_ADDR_OWVAR 21
73864: PUSH
73865: LD_VAR 0 1
73869: ST_TO_ADDR
// bc_level = 1 ;
73870: LD_ADDR_OWVAR 43
73874: PUSH
73875: LD_INT 1
73877: ST_TO_ADDR
// case btype of 1 :
73878: LD_VAR 0 2
73882: PUSH
73883: LD_INT 1
73885: DOUBLE
73886: EQUAL
73887: IFTRUE 73891
73889: GO 73902
73891: POP
// bc_type := b_depot ; 2 :
73892: LD_ADDR_OWVAR 42
73896: PUSH
73897: LD_INT 0
73899: ST_TO_ADDR
73900: GO 74514
73902: LD_INT 2
73904: DOUBLE
73905: EQUAL
73906: IFTRUE 73910
73908: GO 73921
73910: POP
// bc_type := b_warehouse ; 3 :
73911: LD_ADDR_OWVAR 42
73915: PUSH
73916: LD_INT 1
73918: ST_TO_ADDR
73919: GO 74514
73921: LD_INT 3
73923: DOUBLE
73924: EQUAL
73925: IFTRUE 73929
73927: GO 73940
73929: POP
// bc_type := b_lab ; 4 .. 9 :
73930: LD_ADDR_OWVAR 42
73934: PUSH
73935: LD_INT 6
73937: ST_TO_ADDR
73938: GO 74514
73940: LD_INT 4
73942: DOUBLE
73943: GREATEREQUAL
73944: IFFALSE 73952
73946: LD_INT 9
73948: DOUBLE
73949: LESSEQUAL
73950: IFTRUE 73954
73952: GO 74006
73954: POP
// begin bc_type := b_lab_half ;
73955: LD_ADDR_OWVAR 42
73959: PUSH
73960: LD_INT 7
73962: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73963: LD_ADDR_OWVAR 44
73967: PUSH
73968: LD_INT 10
73970: PUSH
73971: LD_INT 11
73973: PUSH
73974: LD_INT 12
73976: PUSH
73977: LD_INT 15
73979: PUSH
73980: LD_INT 14
73982: PUSH
73983: LD_INT 13
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: PUSH
73994: LD_VAR 0 2
73998: PUSH
73999: LD_INT 3
74001: MINUS
74002: ARRAY
74003: ST_TO_ADDR
// end ; 10 .. 13 :
74004: GO 74514
74006: LD_INT 10
74008: DOUBLE
74009: GREATEREQUAL
74010: IFFALSE 74018
74012: LD_INT 13
74014: DOUBLE
74015: LESSEQUAL
74016: IFTRUE 74020
74018: GO 74097
74020: POP
// begin bc_type := b_lab_full ;
74021: LD_ADDR_OWVAR 42
74025: PUSH
74026: LD_INT 8
74028: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74029: LD_ADDR_OWVAR 44
74033: PUSH
74034: LD_INT 10
74036: PUSH
74037: LD_INT 12
74039: PUSH
74040: LD_INT 14
74042: PUSH
74043: LD_INT 13
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: LIST
74050: LIST
74051: PUSH
74052: LD_VAR 0 2
74056: PUSH
74057: LD_INT 9
74059: MINUS
74060: ARRAY
74061: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74062: LD_ADDR_OWVAR 45
74066: PUSH
74067: LD_INT 11
74069: PUSH
74070: LD_INT 15
74072: PUSH
74073: LD_INT 12
74075: PUSH
74076: LD_INT 15
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: PUSH
74085: LD_VAR 0 2
74089: PUSH
74090: LD_INT 9
74092: MINUS
74093: ARRAY
74094: ST_TO_ADDR
// end ; 14 :
74095: GO 74514
74097: LD_INT 14
74099: DOUBLE
74100: EQUAL
74101: IFTRUE 74105
74103: GO 74116
74105: POP
// bc_type := b_workshop ; 15 :
74106: LD_ADDR_OWVAR 42
74110: PUSH
74111: LD_INT 2
74113: ST_TO_ADDR
74114: GO 74514
74116: LD_INT 15
74118: DOUBLE
74119: EQUAL
74120: IFTRUE 74124
74122: GO 74135
74124: POP
// bc_type := b_factory ; 16 :
74125: LD_ADDR_OWVAR 42
74129: PUSH
74130: LD_INT 3
74132: ST_TO_ADDR
74133: GO 74514
74135: LD_INT 16
74137: DOUBLE
74138: EQUAL
74139: IFTRUE 74143
74141: GO 74154
74143: POP
// bc_type := b_ext_gun ; 17 :
74144: LD_ADDR_OWVAR 42
74148: PUSH
74149: LD_INT 17
74151: ST_TO_ADDR
74152: GO 74514
74154: LD_INT 17
74156: DOUBLE
74157: EQUAL
74158: IFTRUE 74162
74160: GO 74190
74162: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74163: LD_ADDR_OWVAR 42
74167: PUSH
74168: LD_INT 19
74170: PUSH
74171: LD_INT 23
74173: PUSH
74174: LD_INT 19
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: LIST
74181: PUSH
74182: LD_VAR 0 1
74186: ARRAY
74187: ST_TO_ADDR
74188: GO 74514
74190: LD_INT 18
74192: DOUBLE
74193: EQUAL
74194: IFTRUE 74198
74196: GO 74209
74198: POP
// bc_type := b_ext_radar ; 19 :
74199: LD_ADDR_OWVAR 42
74203: PUSH
74204: LD_INT 20
74206: ST_TO_ADDR
74207: GO 74514
74209: LD_INT 19
74211: DOUBLE
74212: EQUAL
74213: IFTRUE 74217
74215: GO 74228
74217: POP
// bc_type := b_ext_radio ; 20 :
74218: LD_ADDR_OWVAR 42
74222: PUSH
74223: LD_INT 22
74225: ST_TO_ADDR
74226: GO 74514
74228: LD_INT 20
74230: DOUBLE
74231: EQUAL
74232: IFTRUE 74236
74234: GO 74247
74236: POP
// bc_type := b_ext_siberium ; 21 :
74237: LD_ADDR_OWVAR 42
74241: PUSH
74242: LD_INT 21
74244: ST_TO_ADDR
74245: GO 74514
74247: LD_INT 21
74249: DOUBLE
74250: EQUAL
74251: IFTRUE 74255
74253: GO 74266
74255: POP
// bc_type := b_ext_computer ; 22 :
74256: LD_ADDR_OWVAR 42
74260: PUSH
74261: LD_INT 24
74263: ST_TO_ADDR
74264: GO 74514
74266: LD_INT 22
74268: DOUBLE
74269: EQUAL
74270: IFTRUE 74274
74272: GO 74285
74274: POP
// bc_type := b_ext_track ; 23 :
74275: LD_ADDR_OWVAR 42
74279: PUSH
74280: LD_INT 16
74282: ST_TO_ADDR
74283: GO 74514
74285: LD_INT 23
74287: DOUBLE
74288: EQUAL
74289: IFTRUE 74293
74291: GO 74304
74293: POP
// bc_type := b_ext_laser ; 24 :
74294: LD_ADDR_OWVAR 42
74298: PUSH
74299: LD_INT 25
74301: ST_TO_ADDR
74302: GO 74514
74304: LD_INT 24
74306: DOUBLE
74307: EQUAL
74308: IFTRUE 74312
74310: GO 74323
74312: POP
// bc_type := b_control_tower ; 25 :
74313: LD_ADDR_OWVAR 42
74317: PUSH
74318: LD_INT 36
74320: ST_TO_ADDR
74321: GO 74514
74323: LD_INT 25
74325: DOUBLE
74326: EQUAL
74327: IFTRUE 74331
74329: GO 74342
74331: POP
// bc_type := b_breastwork ; 26 :
74332: LD_ADDR_OWVAR 42
74336: PUSH
74337: LD_INT 31
74339: ST_TO_ADDR
74340: GO 74514
74342: LD_INT 26
74344: DOUBLE
74345: EQUAL
74346: IFTRUE 74350
74348: GO 74361
74350: POP
// bc_type := b_bunker ; 27 :
74351: LD_ADDR_OWVAR 42
74355: PUSH
74356: LD_INT 32
74358: ST_TO_ADDR
74359: GO 74514
74361: LD_INT 27
74363: DOUBLE
74364: EQUAL
74365: IFTRUE 74369
74367: GO 74380
74369: POP
// bc_type := b_turret ; 28 :
74370: LD_ADDR_OWVAR 42
74374: PUSH
74375: LD_INT 33
74377: ST_TO_ADDR
74378: GO 74514
74380: LD_INT 28
74382: DOUBLE
74383: EQUAL
74384: IFTRUE 74388
74386: GO 74399
74388: POP
// bc_type := b_armoury ; 29 :
74389: LD_ADDR_OWVAR 42
74393: PUSH
74394: LD_INT 4
74396: ST_TO_ADDR
74397: GO 74514
74399: LD_INT 29
74401: DOUBLE
74402: EQUAL
74403: IFTRUE 74407
74405: GO 74418
74407: POP
// bc_type := b_barracks ; 30 :
74408: LD_ADDR_OWVAR 42
74412: PUSH
74413: LD_INT 5
74415: ST_TO_ADDR
74416: GO 74514
74418: LD_INT 30
74420: DOUBLE
74421: EQUAL
74422: IFTRUE 74426
74424: GO 74437
74426: POP
// bc_type := b_solar_power ; 31 :
74427: LD_ADDR_OWVAR 42
74431: PUSH
74432: LD_INT 27
74434: ST_TO_ADDR
74435: GO 74514
74437: LD_INT 31
74439: DOUBLE
74440: EQUAL
74441: IFTRUE 74445
74443: GO 74456
74445: POP
// bc_type := b_oil_power ; 32 :
74446: LD_ADDR_OWVAR 42
74450: PUSH
74451: LD_INT 26
74453: ST_TO_ADDR
74454: GO 74514
74456: LD_INT 32
74458: DOUBLE
74459: EQUAL
74460: IFTRUE 74464
74462: GO 74475
74464: POP
// bc_type := b_siberite_power ; 33 :
74465: LD_ADDR_OWVAR 42
74469: PUSH
74470: LD_INT 28
74472: ST_TO_ADDR
74473: GO 74514
74475: LD_INT 33
74477: DOUBLE
74478: EQUAL
74479: IFTRUE 74483
74481: GO 74494
74483: POP
// bc_type := b_oil_mine ; 34 :
74484: LD_ADDR_OWVAR 42
74488: PUSH
74489: LD_INT 29
74491: ST_TO_ADDR
74492: GO 74514
74494: LD_INT 34
74496: DOUBLE
74497: EQUAL
74498: IFTRUE 74502
74500: GO 74513
74502: POP
// bc_type := b_siberite_mine ; end ;
74503: LD_ADDR_OWVAR 42
74507: PUSH
74508: LD_INT 30
74510: ST_TO_ADDR
74511: GO 74514
74513: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74514: LD_ADDR_VAR 0 8
74518: PUSH
74519: LD_VAR 0 5
74523: PPUSH
74524: LD_VAR 0 6
74528: PPUSH
74529: LD_VAR 0 3
74533: PPUSH
74534: CALL_OW 47
74538: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74539: LD_OWVAR 42
74543: PUSH
74544: LD_INT 32
74546: PUSH
74547: LD_INT 33
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: IN
74554: IFFALSE 74570
// PlaceWeaponTurret ( b , weapon ) ;
74556: LD_VAR 0 8
74560: PPUSH
74561: LD_VAR 0 4
74565: PPUSH
74566: CALL_OW 431
// end ;
74570: LD_VAR 0 7
74574: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74575: LD_INT 0
74577: PPUSH
74578: PPUSH
74579: PPUSH
74580: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74581: LD_ADDR_VAR 0 4
74585: PUSH
74586: LD_INT 22
74588: PUSH
74589: LD_OWVAR 2
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: PUSH
74598: LD_INT 2
74600: PUSH
74601: LD_INT 30
74603: PUSH
74604: LD_INT 0
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 30
74613: PUSH
74614: LD_INT 1
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: LIST
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PPUSH
74630: CALL_OW 69
74634: ST_TO_ADDR
// if not tmp then
74635: LD_VAR 0 4
74639: NOT
74640: IFFALSE 74644
// exit ;
74642: GO 74703
// for i in tmp do
74644: LD_ADDR_VAR 0 2
74648: PUSH
74649: LD_VAR 0 4
74653: PUSH
74654: FOR_IN
74655: IFFALSE 74701
// for j = 1 to 3 do
74657: LD_ADDR_VAR 0 3
74661: PUSH
74662: DOUBLE
74663: LD_INT 1
74665: DEC
74666: ST_TO_ADDR
74667: LD_INT 3
74669: PUSH
74670: FOR_TO
74671: IFFALSE 74697
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74673: LD_VAR 0 2
74677: PPUSH
74678: CALL_OW 274
74682: PPUSH
74683: LD_VAR 0 3
74687: PPUSH
74688: LD_INT 99999
74690: PPUSH
74691: CALL_OW 277
74695: GO 74670
74697: POP
74698: POP
74699: GO 74654
74701: POP
74702: POP
// end ;
74703: LD_VAR 0 1
74707: RET
// export function hHackSetLevel10 ; var i , j ; begin
74708: LD_INT 0
74710: PPUSH
74711: PPUSH
74712: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74713: LD_ADDR_VAR 0 2
74717: PUSH
74718: LD_INT 21
74720: PUSH
74721: LD_INT 1
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PPUSH
74728: CALL_OW 69
74732: PUSH
74733: FOR_IN
74734: IFFALSE 74786
// if IsSelected ( i ) then
74736: LD_VAR 0 2
74740: PPUSH
74741: CALL_OW 306
74745: IFFALSE 74784
// begin for j := 1 to 4 do
74747: LD_ADDR_VAR 0 3
74751: PUSH
74752: DOUBLE
74753: LD_INT 1
74755: DEC
74756: ST_TO_ADDR
74757: LD_INT 4
74759: PUSH
74760: FOR_TO
74761: IFFALSE 74782
// SetSkill ( i , j , 10 ) ;
74763: LD_VAR 0 2
74767: PPUSH
74768: LD_VAR 0 3
74772: PPUSH
74773: LD_INT 10
74775: PPUSH
74776: CALL_OW 237
74780: GO 74760
74782: POP
74783: POP
// end ;
74784: GO 74733
74786: POP
74787: POP
// end ;
74788: LD_VAR 0 1
74792: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74793: LD_INT 0
74795: PPUSH
74796: PPUSH
74797: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74798: LD_ADDR_VAR 0 2
74802: PUSH
74803: LD_INT 22
74805: PUSH
74806: LD_OWVAR 2
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 21
74817: PUSH
74818: LD_INT 1
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: PPUSH
74829: CALL_OW 69
74833: PUSH
74834: FOR_IN
74835: IFFALSE 74876
// begin for j := 1 to 4 do
74837: LD_ADDR_VAR 0 3
74841: PUSH
74842: DOUBLE
74843: LD_INT 1
74845: DEC
74846: ST_TO_ADDR
74847: LD_INT 4
74849: PUSH
74850: FOR_TO
74851: IFFALSE 74872
// SetSkill ( i , j , 10 ) ;
74853: LD_VAR 0 2
74857: PPUSH
74858: LD_VAR 0 3
74862: PPUSH
74863: LD_INT 10
74865: PPUSH
74866: CALL_OW 237
74870: GO 74850
74872: POP
74873: POP
// end ;
74874: GO 74834
74876: POP
74877: POP
// end ;
74878: LD_VAR 0 1
74882: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74883: LD_INT 0
74885: PPUSH
// uc_side := your_side ;
74886: LD_ADDR_OWVAR 20
74890: PUSH
74891: LD_OWVAR 2
74895: ST_TO_ADDR
// uc_nation := nation ;
74896: LD_ADDR_OWVAR 21
74900: PUSH
74901: LD_VAR 0 1
74905: ST_TO_ADDR
// InitHc ;
74906: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74910: LD_INT 0
74912: PPUSH
74913: LD_VAR 0 2
74917: PPUSH
74918: LD_VAR 0 3
74922: PPUSH
74923: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74927: LD_VAR 0 4
74931: PPUSH
74932: LD_VAR 0 5
74936: PPUSH
74937: CALL_OW 428
74941: PUSH
74942: LD_INT 0
74944: EQUAL
74945: IFFALSE 74969
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74947: CALL_OW 44
74951: PPUSH
74952: LD_VAR 0 4
74956: PPUSH
74957: LD_VAR 0 5
74961: PPUSH
74962: LD_INT 1
74964: PPUSH
74965: CALL_OW 48
// end ;
74969: LD_VAR 0 6
74973: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74974: LD_INT 0
74976: PPUSH
74977: PPUSH
// uc_side := your_side ;
74978: LD_ADDR_OWVAR 20
74982: PUSH
74983: LD_OWVAR 2
74987: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74988: LD_VAR 0 1
74992: PUSH
74993: LD_INT 1
74995: PUSH
74996: LD_INT 2
74998: PUSH
74999: LD_INT 3
75001: PUSH
75002: LD_INT 4
75004: PUSH
75005: LD_INT 5
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: IN
75015: IFFALSE 75027
// uc_nation := nation_american else
75017: LD_ADDR_OWVAR 21
75021: PUSH
75022: LD_INT 1
75024: ST_TO_ADDR
75025: GO 75070
// if chassis in [ 11 , 12 , 13 , 14 ] then
75027: LD_VAR 0 1
75031: PUSH
75032: LD_INT 11
75034: PUSH
75035: LD_INT 12
75037: PUSH
75038: LD_INT 13
75040: PUSH
75041: LD_INT 14
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: IN
75050: IFFALSE 75062
// uc_nation := nation_arabian else
75052: LD_ADDR_OWVAR 21
75056: PUSH
75057: LD_INT 2
75059: ST_TO_ADDR
75060: GO 75070
// uc_nation := nation_russian ;
75062: LD_ADDR_OWVAR 21
75066: PUSH
75067: LD_INT 3
75069: ST_TO_ADDR
// vc_chassis := chassis ;
75070: LD_ADDR_OWVAR 37
75074: PUSH
75075: LD_VAR 0 1
75079: ST_TO_ADDR
// vc_engine := engine ;
75080: LD_ADDR_OWVAR 39
75084: PUSH
75085: LD_VAR 0 2
75089: ST_TO_ADDR
// vc_control := control ;
75090: LD_ADDR_OWVAR 38
75094: PUSH
75095: LD_VAR 0 3
75099: ST_TO_ADDR
// vc_weapon := weapon ;
75100: LD_ADDR_OWVAR 40
75104: PUSH
75105: LD_VAR 0 4
75109: ST_TO_ADDR
// un := CreateVehicle ;
75110: LD_ADDR_VAR 0 8
75114: PUSH
75115: CALL_OW 45
75119: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75120: LD_VAR 0 8
75124: PPUSH
75125: LD_INT 0
75127: PPUSH
75128: LD_INT 5
75130: PPUSH
75131: CALL_OW 12
75135: PPUSH
75136: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75140: LD_VAR 0 8
75144: PPUSH
75145: LD_VAR 0 5
75149: PPUSH
75150: LD_VAR 0 6
75154: PPUSH
75155: LD_INT 1
75157: PPUSH
75158: CALL_OW 48
// end ;
75162: LD_VAR 0 7
75166: RET
// export hInvincible ; every 1 do
75167: GO 75169
75169: DISABLE
// hInvincible := [ ] ;
75170: LD_ADDR_EXP 130
75174: PUSH
75175: EMPTY
75176: ST_TO_ADDR
75177: END
// every 10 do var i ;
75178: GO 75180
75180: DISABLE
75181: LD_INT 0
75183: PPUSH
// begin enable ;
75184: ENABLE
// if not hInvincible then
75185: LD_EXP 130
75189: NOT
75190: IFFALSE 75194
// exit ;
75192: GO 75238
// for i in hInvincible do
75194: LD_ADDR_VAR 0 1
75198: PUSH
75199: LD_EXP 130
75203: PUSH
75204: FOR_IN
75205: IFFALSE 75236
// if GetLives ( i ) < 1000 then
75207: LD_VAR 0 1
75211: PPUSH
75212: CALL_OW 256
75216: PUSH
75217: LD_INT 1000
75219: LESS
75220: IFFALSE 75234
// SetLives ( i , 1000 ) ;
75222: LD_VAR 0 1
75226: PPUSH
75227: LD_INT 1000
75229: PPUSH
75230: CALL_OW 234
75234: GO 75204
75236: POP
75237: POP
// end ;
75238: PPOPN 1
75240: END
// export function hHackInvincible ; var i ; begin
75241: LD_INT 0
75243: PPUSH
75244: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75245: LD_ADDR_VAR 0 2
75249: PUSH
75250: LD_INT 2
75252: PUSH
75253: LD_INT 21
75255: PUSH
75256: LD_INT 1
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 21
75265: PUSH
75266: LD_INT 2
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: LIST
75277: PPUSH
75278: CALL_OW 69
75282: PUSH
75283: FOR_IN
75284: IFFALSE 75345
// if IsSelected ( i ) then
75286: LD_VAR 0 2
75290: PPUSH
75291: CALL_OW 306
75295: IFFALSE 75343
// begin if i in hInvincible then
75297: LD_VAR 0 2
75301: PUSH
75302: LD_EXP 130
75306: IN
75307: IFFALSE 75327
// hInvincible := hInvincible diff i else
75309: LD_ADDR_EXP 130
75313: PUSH
75314: LD_EXP 130
75318: PUSH
75319: LD_VAR 0 2
75323: DIFF
75324: ST_TO_ADDR
75325: GO 75343
// hInvincible := hInvincible union i ;
75327: LD_ADDR_EXP 130
75331: PUSH
75332: LD_EXP 130
75336: PUSH
75337: LD_VAR 0 2
75341: UNION
75342: ST_TO_ADDR
// end ;
75343: GO 75283
75345: POP
75346: POP
// end ;
75347: LD_VAR 0 1
75351: RET
// export function hHackInvisible ; var i , j ; begin
75352: LD_INT 0
75354: PPUSH
75355: PPUSH
75356: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75357: LD_ADDR_VAR 0 2
75361: PUSH
75362: LD_INT 21
75364: PUSH
75365: LD_INT 1
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PPUSH
75372: CALL_OW 69
75376: PUSH
75377: FOR_IN
75378: IFFALSE 75402
// if IsSelected ( i ) then
75380: LD_VAR 0 2
75384: PPUSH
75385: CALL_OW 306
75389: IFFALSE 75400
// ComForceInvisible ( i ) ;
75391: LD_VAR 0 2
75395: PPUSH
75396: CALL_OW 496
75400: GO 75377
75402: POP
75403: POP
// end ;
75404: LD_VAR 0 1
75408: RET
// export function hHackChangeYourSide ; begin
75409: LD_INT 0
75411: PPUSH
// if your_side = 8 then
75412: LD_OWVAR 2
75416: PUSH
75417: LD_INT 8
75419: EQUAL
75420: IFFALSE 75432
// your_side := 0 else
75422: LD_ADDR_OWVAR 2
75426: PUSH
75427: LD_INT 0
75429: ST_TO_ADDR
75430: GO 75446
// your_side := your_side + 1 ;
75432: LD_ADDR_OWVAR 2
75436: PUSH
75437: LD_OWVAR 2
75441: PUSH
75442: LD_INT 1
75444: PLUS
75445: ST_TO_ADDR
// end ;
75446: LD_VAR 0 1
75450: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75451: LD_INT 0
75453: PPUSH
75454: PPUSH
75455: PPUSH
// for i in all_units do
75456: LD_ADDR_VAR 0 2
75460: PUSH
75461: LD_OWVAR 3
75465: PUSH
75466: FOR_IN
75467: IFFALSE 75545
// if IsSelected ( i ) then
75469: LD_VAR 0 2
75473: PPUSH
75474: CALL_OW 306
75478: IFFALSE 75543
// begin j := GetSide ( i ) ;
75480: LD_ADDR_VAR 0 3
75484: PUSH
75485: LD_VAR 0 2
75489: PPUSH
75490: CALL_OW 255
75494: ST_TO_ADDR
// if j = 8 then
75495: LD_VAR 0 3
75499: PUSH
75500: LD_INT 8
75502: EQUAL
75503: IFFALSE 75515
// j := 0 else
75505: LD_ADDR_VAR 0 3
75509: PUSH
75510: LD_INT 0
75512: ST_TO_ADDR
75513: GO 75529
// j := j + 1 ;
75515: LD_ADDR_VAR 0 3
75519: PUSH
75520: LD_VAR 0 3
75524: PUSH
75525: LD_INT 1
75527: PLUS
75528: ST_TO_ADDR
// SetSide ( i , j ) ;
75529: LD_VAR 0 2
75533: PPUSH
75534: LD_VAR 0 3
75538: PPUSH
75539: CALL_OW 235
// end ;
75543: GO 75466
75545: POP
75546: POP
// end ;
75547: LD_VAR 0 1
75551: RET
// export function hHackFog ; begin
75552: LD_INT 0
75554: PPUSH
// FogOff ( true ) ;
75555: LD_INT 1
75557: PPUSH
75558: CALL_OW 344
// end ;
75562: LD_VAR 0 1
75566: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75567: LD_INT 0
75569: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75570: LD_VAR 0 1
75574: PPUSH
75575: LD_VAR 0 2
75579: PPUSH
75580: LD_VAR 0 3
75584: PPUSH
75585: LD_INT 1
75587: PPUSH
75588: LD_INT 1
75590: PPUSH
75591: CALL_OW 483
// CenterOnXY ( x , y ) ;
75595: LD_VAR 0 2
75599: PPUSH
75600: LD_VAR 0 3
75604: PPUSH
75605: CALL_OW 84
// end ; end_of_file
75609: LD_VAR 0 4
75613: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75614: LD_VAR 0 1
75618: PUSH
75619: LD_INT 200
75621: DOUBLE
75622: GREATEREQUAL
75623: IFFALSE 75631
75625: LD_INT 299
75627: DOUBLE
75628: LESSEQUAL
75629: IFTRUE 75633
75631: GO 75665
75633: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75634: LD_VAR 0 1
75638: PPUSH
75639: LD_VAR 0 2
75643: PPUSH
75644: LD_VAR 0 3
75648: PPUSH
75649: LD_VAR 0 4
75653: PPUSH
75654: LD_VAR 0 5
75658: PPUSH
75659: CALL 75909 0 5
75663: GO 75742
75665: LD_INT 300
75667: DOUBLE
75668: GREATEREQUAL
75669: IFFALSE 75677
75671: LD_INT 399
75673: DOUBLE
75674: LESSEQUAL
75675: IFTRUE 75679
75677: GO 75741
75679: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75680: LD_VAR 0 1
75684: PPUSH
75685: LD_VAR 0 2
75689: PPUSH
75690: LD_VAR 0 3
75694: PPUSH
75695: LD_VAR 0 4
75699: PPUSH
75700: LD_VAR 0 5
75704: PPUSH
75705: LD_VAR 0 6
75709: PPUSH
75710: LD_VAR 0 7
75714: PPUSH
75715: LD_VAR 0 8
75719: PPUSH
75720: LD_VAR 0 9
75724: PPUSH
75725: LD_VAR 0 10
75729: PPUSH
75730: LD_VAR 0 11
75734: PPUSH
75735: CALL 73634 0 11
75739: GO 75742
75741: POP
// end ;
75742: PPOPN 11
75744: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75745: LD_VAR 0 1
75749: PPUSH
75750: LD_VAR 0 2
75754: PPUSH
75755: LD_VAR 0 3
75759: PPUSH
75760: LD_VAR 0 4
75764: PPUSH
75765: LD_VAR 0 5
75769: PPUSH
75770: CALL 75891 0 5
// end ; end_of_file
75774: PPOPN 5
75776: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
75777: LD_INT 0
75779: PPUSH
75780: PPUSH
75781: PPUSH
75782: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
75783: LD_VAR 0 1
75787: PPUSH
75788: CALL_OW 264
75792: PUSH
75793: LD_EXP 61
75797: EQUAL
75798: IFFALSE 75870
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
75800: LD_INT 68
75802: PPUSH
75803: LD_VAR 0 1
75807: PPUSH
75808: CALL_OW 255
75812: PPUSH
75813: CALL_OW 321
75817: PUSH
75818: LD_INT 2
75820: EQUAL
75821: IFFALSE 75833
// eff := 70 else
75823: LD_ADDR_VAR 0 4
75827: PUSH
75828: LD_INT 70
75830: ST_TO_ADDR
75831: GO 75841
// eff := 30 ;
75833: LD_ADDR_VAR 0 4
75837: PUSH
75838: LD_INT 30
75840: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
75841: LD_VAR 0 1
75845: PPUSH
75846: CALL_OW 250
75850: PPUSH
75851: LD_VAR 0 1
75855: PPUSH
75856: CALL_OW 251
75860: PPUSH
75861: LD_VAR 0 4
75865: PPUSH
75866: CALL_OW 495
// end ; end ;
75870: LD_VAR 0 2
75874: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
75875: LD_INT 0
75877: PPUSH
// end ;
75878: LD_VAR 0 4
75882: RET
// export function SOS_Command ( cmd ) ; begin
75883: LD_INT 0
75885: PPUSH
// end ;
75886: LD_VAR 0 2
75890: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
75891: LD_INT 0
75893: PPUSH
// if cmd = 121 then
75894: LD_VAR 0 1
75898: PUSH
75899: LD_INT 121
75901: EQUAL
75902: IFFALSE 75904
// end ;
75904: LD_VAR 0 6
75908: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
75909: LD_INT 0
75911: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
75912: LD_VAR 0 1
75916: PUSH
75917: LD_INT 250
75919: EQUAL
75920: PUSH
75921: LD_VAR 0 2
75925: PPUSH
75926: CALL_OW 264
75930: PUSH
75931: LD_EXP 64
75935: EQUAL
75936: AND
75937: IFFALSE 75958
// MinerPlaceMine ( unit , x , y ) ;
75939: LD_VAR 0 2
75943: PPUSH
75944: LD_VAR 0 4
75948: PPUSH
75949: LD_VAR 0 5
75953: PPUSH
75954: CALL 78307 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
75958: LD_VAR 0 1
75962: PUSH
75963: LD_INT 251
75965: EQUAL
75966: PUSH
75967: LD_VAR 0 2
75971: PPUSH
75972: CALL_OW 264
75976: PUSH
75977: LD_EXP 64
75981: EQUAL
75982: AND
75983: IFFALSE 76004
// MinerDetonateMine ( unit , x , y ) ;
75985: LD_VAR 0 2
75989: PPUSH
75990: LD_VAR 0 4
75994: PPUSH
75995: LD_VAR 0 5
75999: PPUSH
76000: CALL 78584 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
76004: LD_VAR 0 1
76008: PUSH
76009: LD_INT 252
76011: EQUAL
76012: PUSH
76013: LD_VAR 0 2
76017: PPUSH
76018: CALL_OW 264
76022: PUSH
76023: LD_EXP 64
76027: EQUAL
76028: AND
76029: IFFALSE 76050
// MinerCreateMinefield ( unit , x , y ) ;
76031: LD_VAR 0 2
76035: PPUSH
76036: LD_VAR 0 4
76040: PPUSH
76041: LD_VAR 0 5
76045: PPUSH
76046: CALL 79001 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
76050: LD_VAR 0 1
76054: PUSH
76055: LD_INT 253
76057: EQUAL
76058: PUSH
76059: LD_VAR 0 2
76063: PPUSH
76064: CALL_OW 257
76068: PUSH
76069: LD_INT 5
76071: EQUAL
76072: AND
76073: IFFALSE 76094
// ComBinocular ( unit , x , y ) ;
76075: LD_VAR 0 2
76079: PPUSH
76080: LD_VAR 0 4
76084: PPUSH
76085: LD_VAR 0 5
76089: PPUSH
76090: CALL 79372 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
76094: LD_VAR 0 1
76098: PUSH
76099: LD_INT 254
76101: EQUAL
76102: PUSH
76103: LD_VAR 0 2
76107: PPUSH
76108: CALL_OW 264
76112: PUSH
76113: LD_EXP 59
76117: EQUAL
76118: AND
76119: PUSH
76120: LD_VAR 0 3
76124: PPUSH
76125: CALL_OW 263
76129: PUSH
76130: LD_INT 3
76132: EQUAL
76133: AND
76134: IFFALSE 76150
// HackDestroyVehicle ( unit , selectedUnit ) ;
76136: LD_VAR 0 2
76140: PPUSH
76141: LD_VAR 0 3
76145: PPUSH
76146: CALL 77667 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
76150: LD_VAR 0 1
76154: PUSH
76155: LD_INT 255
76157: EQUAL
76158: PUSH
76159: LD_VAR 0 2
76163: PPUSH
76164: CALL_OW 264
76168: PUSH
76169: LD_INT 14
76171: PUSH
76172: LD_INT 53
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: IN
76179: AND
76180: PUSH
76181: LD_VAR 0 4
76185: PPUSH
76186: LD_VAR 0 5
76190: PPUSH
76191: CALL_OW 488
76195: AND
76196: IFFALSE 76220
// CutTreeXYR ( unit , x , y , 12 ) ;
76198: LD_VAR 0 2
76202: PPUSH
76203: LD_VAR 0 4
76207: PPUSH
76208: LD_VAR 0 5
76212: PPUSH
76213: LD_INT 12
76215: PPUSH
76216: CALL 76233 0 4
// end ;
76220: LD_VAR 0 6
76224: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
76225: LD_INT 0
76227: PPUSH
// end ;
76228: LD_VAR 0 4
76232: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
76233: LD_INT 0
76235: PPUSH
76236: PPUSH
76237: PPUSH
76238: PPUSH
76239: PPUSH
76240: PPUSH
76241: PPUSH
76242: PPUSH
76243: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
76244: LD_VAR 0 1
76248: NOT
76249: PUSH
76250: LD_VAR 0 2
76254: PPUSH
76255: LD_VAR 0 3
76259: PPUSH
76260: CALL_OW 488
76264: NOT
76265: OR
76266: PUSH
76267: LD_VAR 0 4
76271: NOT
76272: OR
76273: IFFALSE 76277
// exit ;
76275: GO 76617
// list := [ ] ;
76277: LD_ADDR_VAR 0 13
76281: PUSH
76282: EMPTY
76283: ST_TO_ADDR
// if x - r < 0 then
76284: LD_VAR 0 2
76288: PUSH
76289: LD_VAR 0 4
76293: MINUS
76294: PUSH
76295: LD_INT 0
76297: LESS
76298: IFFALSE 76310
// min_x := 0 else
76300: LD_ADDR_VAR 0 7
76304: PUSH
76305: LD_INT 0
76307: ST_TO_ADDR
76308: GO 76326
// min_x := x - r ;
76310: LD_ADDR_VAR 0 7
76314: PUSH
76315: LD_VAR 0 2
76319: PUSH
76320: LD_VAR 0 4
76324: MINUS
76325: ST_TO_ADDR
// if y - r < 0 then
76326: LD_VAR 0 3
76330: PUSH
76331: LD_VAR 0 4
76335: MINUS
76336: PUSH
76337: LD_INT 0
76339: LESS
76340: IFFALSE 76352
// min_y := 0 else
76342: LD_ADDR_VAR 0 8
76346: PUSH
76347: LD_INT 0
76349: ST_TO_ADDR
76350: GO 76368
// min_y := y - r ;
76352: LD_ADDR_VAR 0 8
76356: PUSH
76357: LD_VAR 0 3
76361: PUSH
76362: LD_VAR 0 4
76366: MINUS
76367: ST_TO_ADDR
// max_x := x + r ;
76368: LD_ADDR_VAR 0 9
76372: PUSH
76373: LD_VAR 0 2
76377: PUSH
76378: LD_VAR 0 4
76382: PLUS
76383: ST_TO_ADDR
// max_y := y + r ;
76384: LD_ADDR_VAR 0 10
76388: PUSH
76389: LD_VAR 0 3
76393: PUSH
76394: LD_VAR 0 4
76398: PLUS
76399: ST_TO_ADDR
// for _x = min_x to max_x do
76400: LD_ADDR_VAR 0 11
76404: PUSH
76405: DOUBLE
76406: LD_VAR 0 7
76410: DEC
76411: ST_TO_ADDR
76412: LD_VAR 0 9
76416: PUSH
76417: FOR_TO
76418: IFFALSE 76535
// for _y = min_y to max_y do
76420: LD_ADDR_VAR 0 12
76424: PUSH
76425: DOUBLE
76426: LD_VAR 0 8
76430: DEC
76431: ST_TO_ADDR
76432: LD_VAR 0 10
76436: PUSH
76437: FOR_TO
76438: IFFALSE 76531
// begin if not ValidHex ( _x , _y ) then
76440: LD_VAR 0 11
76444: PPUSH
76445: LD_VAR 0 12
76449: PPUSH
76450: CALL_OW 488
76454: NOT
76455: IFFALSE 76459
// continue ;
76457: GO 76437
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76459: LD_VAR 0 11
76463: PPUSH
76464: LD_VAR 0 12
76468: PPUSH
76469: CALL_OW 351
76473: PUSH
76474: LD_VAR 0 11
76478: PPUSH
76479: LD_VAR 0 12
76483: PPUSH
76484: CALL_OW 554
76488: AND
76489: IFFALSE 76529
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76491: LD_ADDR_VAR 0 13
76495: PUSH
76496: LD_VAR 0 13
76500: PPUSH
76501: LD_VAR 0 13
76505: PUSH
76506: LD_INT 1
76508: PLUS
76509: PPUSH
76510: LD_VAR 0 11
76514: PUSH
76515: LD_VAR 0 12
76519: PUSH
76520: EMPTY
76521: LIST
76522: LIST
76523: PPUSH
76524: CALL_OW 2
76528: ST_TO_ADDR
// end ;
76529: GO 76437
76531: POP
76532: POP
76533: GO 76417
76535: POP
76536: POP
// if not list then
76537: LD_VAR 0 13
76541: NOT
76542: IFFALSE 76546
// exit ;
76544: GO 76617
// for i in list do
76546: LD_ADDR_VAR 0 6
76550: PUSH
76551: LD_VAR 0 13
76555: PUSH
76556: FOR_IN
76557: IFFALSE 76615
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
76559: LD_VAR 0 1
76563: PPUSH
76564: LD_STRING M
76566: PUSH
76567: LD_VAR 0 6
76571: PUSH
76572: LD_INT 1
76574: ARRAY
76575: PUSH
76576: LD_VAR 0 6
76580: PUSH
76581: LD_INT 2
76583: ARRAY
76584: PUSH
76585: LD_INT 0
76587: PUSH
76588: LD_INT 0
76590: PUSH
76591: LD_INT 0
76593: PUSH
76594: LD_INT 0
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: LIST
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: PUSH
76606: EMPTY
76607: LIST
76608: PPUSH
76609: CALL_OW 447
76613: GO 76556
76615: POP
76616: POP
// end ;
76617: LD_VAR 0 5
76621: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
76622: LD_EXP 133
76626: NOT
76627: IFFALSE 76677
76629: GO 76631
76631: DISABLE
// begin initHack := true ;
76632: LD_ADDR_EXP 133
76636: PUSH
76637: LD_INT 1
76639: ST_TO_ADDR
// hackTanks := [ ] ;
76640: LD_ADDR_EXP 134
76644: PUSH
76645: EMPTY
76646: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
76647: LD_ADDR_EXP 135
76651: PUSH
76652: EMPTY
76653: ST_TO_ADDR
// hackLimit := 3 ;
76654: LD_ADDR_EXP 136
76658: PUSH
76659: LD_INT 3
76661: ST_TO_ADDR
// hackDist := 12 ;
76662: LD_ADDR_EXP 137
76666: PUSH
76667: LD_INT 12
76669: ST_TO_ADDR
// hackCounter := [ ] ;
76670: LD_ADDR_EXP 138
76674: PUSH
76675: EMPTY
76676: ST_TO_ADDR
// end ;
76677: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
76678: LD_EXP 133
76682: PUSH
76683: LD_INT 34
76685: PUSH
76686: LD_EXP 59
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: PPUSH
76695: CALL_OW 69
76699: AND
76700: IFFALSE 76955
76702: GO 76704
76704: DISABLE
76705: LD_INT 0
76707: PPUSH
76708: PPUSH
// begin enable ;
76709: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
76710: LD_ADDR_VAR 0 1
76714: PUSH
76715: LD_INT 34
76717: PUSH
76718: LD_EXP 59
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: PPUSH
76727: CALL_OW 69
76731: PUSH
76732: FOR_IN
76733: IFFALSE 76953
// begin if not i in hackTanks then
76735: LD_VAR 0 1
76739: PUSH
76740: LD_EXP 134
76744: IN
76745: NOT
76746: IFFALSE 76829
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
76748: LD_ADDR_EXP 134
76752: PUSH
76753: LD_EXP 134
76757: PPUSH
76758: LD_EXP 134
76762: PUSH
76763: LD_INT 1
76765: PLUS
76766: PPUSH
76767: LD_VAR 0 1
76771: PPUSH
76772: CALL_OW 1
76776: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
76777: LD_ADDR_EXP 135
76781: PUSH
76782: LD_EXP 135
76786: PPUSH
76787: LD_EXP 135
76791: PUSH
76792: LD_INT 1
76794: PLUS
76795: PPUSH
76796: EMPTY
76797: PPUSH
76798: CALL_OW 1
76802: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
76803: LD_ADDR_EXP 138
76807: PUSH
76808: LD_EXP 138
76812: PPUSH
76813: LD_EXP 138
76817: PUSH
76818: LD_INT 1
76820: PLUS
76821: PPUSH
76822: EMPTY
76823: PPUSH
76824: CALL_OW 1
76828: ST_TO_ADDR
// end ; if not IsOk ( i ) then
76829: LD_VAR 0 1
76833: PPUSH
76834: CALL_OW 302
76838: NOT
76839: IFFALSE 76852
// begin HackUnlinkAll ( i ) ;
76841: LD_VAR 0 1
76845: PPUSH
76846: CALL 76958 0 1
// continue ;
76850: GO 76732
// end ; HackCheckCapturedStatus ( i ) ;
76852: LD_VAR 0 1
76856: PPUSH
76857: CALL 77401 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
76861: LD_ADDR_VAR 0 2
76865: PUSH
76866: LD_INT 81
76868: PUSH
76869: LD_VAR 0 1
76873: PPUSH
76874: CALL_OW 255
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: PUSH
76883: LD_INT 33
76885: PUSH
76886: LD_INT 3
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: PUSH
76893: LD_INT 91
76895: PUSH
76896: LD_VAR 0 1
76900: PUSH
76901: LD_EXP 137
76905: PUSH
76906: EMPTY
76907: LIST
76908: LIST
76909: LIST
76910: PUSH
76911: LD_INT 50
76913: PUSH
76914: EMPTY
76915: LIST
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: PPUSH
76923: CALL_OW 69
76927: ST_TO_ADDR
// if not tmp then
76928: LD_VAR 0 2
76932: NOT
76933: IFFALSE 76937
// continue ;
76935: GO 76732
// HackLink ( i , tmp ) ;
76937: LD_VAR 0 1
76941: PPUSH
76942: LD_VAR 0 2
76946: PPUSH
76947: CALL 77094 0 2
// end ;
76951: GO 76732
76953: POP
76954: POP
// end ;
76955: PPOPN 2
76957: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
76958: LD_INT 0
76960: PPUSH
76961: PPUSH
76962: PPUSH
// if not hack in hackTanks then
76963: LD_VAR 0 1
76967: PUSH
76968: LD_EXP 134
76972: IN
76973: NOT
76974: IFFALSE 76978
// exit ;
76976: GO 77089
// index := GetElementIndex ( hackTanks , hack ) ;
76978: LD_ADDR_VAR 0 4
76982: PUSH
76983: LD_EXP 134
76987: PPUSH
76988: LD_VAR 0 1
76992: PPUSH
76993: CALL 28290 0 2
76997: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
76998: LD_EXP 135
77002: PUSH
77003: LD_VAR 0 4
77007: ARRAY
77008: IFFALSE 77089
// begin for i in hackTanksCaptured [ index ] do
77010: LD_ADDR_VAR 0 3
77014: PUSH
77015: LD_EXP 135
77019: PUSH
77020: LD_VAR 0 4
77024: ARRAY
77025: PUSH
77026: FOR_IN
77027: IFFALSE 77053
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
77029: LD_VAR 0 3
77033: PUSH
77034: LD_INT 1
77036: ARRAY
77037: PPUSH
77038: LD_VAR 0 3
77042: PUSH
77043: LD_INT 2
77045: ARRAY
77046: PPUSH
77047: CALL_OW 235
77051: GO 77026
77053: POP
77054: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
77055: LD_ADDR_EXP 135
77059: PUSH
77060: LD_EXP 135
77064: PPUSH
77065: LD_VAR 0 4
77069: PPUSH
77070: EMPTY
77071: PPUSH
77072: CALL_OW 1
77076: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
77077: LD_VAR 0 1
77081: PPUSH
77082: LD_INT 0
77084: PPUSH
77085: CALL_OW 505
// end ; end ;
77089: LD_VAR 0 2
77093: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
77094: LD_INT 0
77096: PPUSH
77097: PPUSH
77098: PPUSH
// if not hack in hackTanks or not vehicles then
77099: LD_VAR 0 1
77103: PUSH
77104: LD_EXP 134
77108: IN
77109: NOT
77110: PUSH
77111: LD_VAR 0 2
77115: NOT
77116: OR
77117: IFFALSE 77121
// exit ;
77119: GO 77396
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
77121: LD_ADDR_VAR 0 2
77125: PUSH
77126: LD_VAR 0 1
77130: PPUSH
77131: LD_VAR 0 2
77135: PPUSH
77136: LD_INT 1
77138: PPUSH
77139: LD_INT 1
77141: PPUSH
77142: CALL 28940 0 4
77146: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
77147: LD_ADDR_VAR 0 5
77151: PUSH
77152: LD_EXP 134
77156: PPUSH
77157: LD_VAR 0 1
77161: PPUSH
77162: CALL 28290 0 2
77166: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
77167: LD_EXP 135
77171: PUSH
77172: LD_VAR 0 5
77176: ARRAY
77177: PUSH
77178: LD_EXP 136
77182: LESS
77183: IFFALSE 77372
// begin for i := 1 to vehicles do
77185: LD_ADDR_VAR 0 4
77189: PUSH
77190: DOUBLE
77191: LD_INT 1
77193: DEC
77194: ST_TO_ADDR
77195: LD_VAR 0 2
77199: PUSH
77200: FOR_TO
77201: IFFALSE 77370
// begin if hackTanksCaptured [ index ] = hackLimit then
77203: LD_EXP 135
77207: PUSH
77208: LD_VAR 0 5
77212: ARRAY
77213: PUSH
77214: LD_EXP 136
77218: EQUAL
77219: IFFALSE 77223
// break ;
77221: GO 77370
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
77223: LD_ADDR_EXP 138
77227: PUSH
77228: LD_EXP 138
77232: PPUSH
77233: LD_VAR 0 5
77237: PPUSH
77238: LD_EXP 138
77242: PUSH
77243: LD_VAR 0 5
77247: ARRAY
77248: PUSH
77249: LD_INT 1
77251: PLUS
77252: PPUSH
77253: CALL_OW 1
77257: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
77258: LD_ADDR_EXP 135
77262: PUSH
77263: LD_EXP 135
77267: PPUSH
77268: LD_VAR 0 5
77272: PUSH
77273: LD_EXP 135
77277: PUSH
77278: LD_VAR 0 5
77282: ARRAY
77283: PUSH
77284: LD_INT 1
77286: PLUS
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: PPUSH
77292: LD_VAR 0 2
77296: PUSH
77297: LD_VAR 0 4
77301: ARRAY
77302: PUSH
77303: LD_VAR 0 2
77307: PUSH
77308: LD_VAR 0 4
77312: ARRAY
77313: PPUSH
77314: CALL_OW 255
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: PPUSH
77323: CALL 28505 0 3
77327: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
77328: LD_VAR 0 2
77332: PUSH
77333: LD_VAR 0 4
77337: ARRAY
77338: PPUSH
77339: LD_VAR 0 1
77343: PPUSH
77344: CALL_OW 255
77348: PPUSH
77349: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
77353: LD_VAR 0 2
77357: PUSH
77358: LD_VAR 0 4
77362: ARRAY
77363: PPUSH
77364: CALL_OW 141
// end ;
77368: GO 77200
77370: POP
77371: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77372: LD_VAR 0 1
77376: PPUSH
77377: LD_EXP 135
77381: PUSH
77382: LD_VAR 0 5
77386: ARRAY
77387: PUSH
77388: LD_INT 0
77390: PLUS
77391: PPUSH
77392: CALL_OW 505
// end ;
77396: LD_VAR 0 3
77400: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
77401: LD_INT 0
77403: PPUSH
77404: PPUSH
77405: PPUSH
77406: PPUSH
// if not hack in hackTanks then
77407: LD_VAR 0 1
77411: PUSH
77412: LD_EXP 134
77416: IN
77417: NOT
77418: IFFALSE 77422
// exit ;
77420: GO 77662
// index := GetElementIndex ( hackTanks , hack ) ;
77422: LD_ADDR_VAR 0 4
77426: PUSH
77427: LD_EXP 134
77431: PPUSH
77432: LD_VAR 0 1
77436: PPUSH
77437: CALL 28290 0 2
77441: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
77442: LD_ADDR_VAR 0 3
77446: PUSH
77447: DOUBLE
77448: LD_EXP 135
77452: PUSH
77453: LD_VAR 0 4
77457: ARRAY
77458: INC
77459: ST_TO_ADDR
77460: LD_INT 1
77462: PUSH
77463: FOR_DOWNTO
77464: IFFALSE 77636
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
77466: LD_ADDR_VAR 0 5
77470: PUSH
77471: LD_EXP 135
77475: PUSH
77476: LD_VAR 0 4
77480: ARRAY
77481: PUSH
77482: LD_VAR 0 3
77486: ARRAY
77487: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
77488: LD_VAR 0 5
77492: PUSH
77493: LD_INT 1
77495: ARRAY
77496: PPUSH
77497: CALL_OW 302
77501: NOT
77502: PUSH
77503: LD_VAR 0 5
77507: PUSH
77508: LD_INT 1
77510: ARRAY
77511: PPUSH
77512: CALL_OW 255
77516: PUSH
77517: LD_VAR 0 1
77521: PPUSH
77522: CALL_OW 255
77526: NONEQUAL
77527: OR
77528: IFFALSE 77634
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
77530: LD_VAR 0 5
77534: PUSH
77535: LD_INT 1
77537: ARRAY
77538: PPUSH
77539: CALL_OW 305
77543: PUSH
77544: LD_VAR 0 5
77548: PUSH
77549: LD_INT 1
77551: ARRAY
77552: PPUSH
77553: CALL_OW 255
77557: PUSH
77558: LD_VAR 0 1
77562: PPUSH
77563: CALL_OW 255
77567: EQUAL
77568: AND
77569: IFFALSE 77593
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
77571: LD_VAR 0 5
77575: PUSH
77576: LD_INT 1
77578: ARRAY
77579: PPUSH
77580: LD_VAR 0 5
77584: PUSH
77585: LD_INT 2
77587: ARRAY
77588: PPUSH
77589: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
77593: LD_ADDR_EXP 135
77597: PUSH
77598: LD_EXP 135
77602: PPUSH
77603: LD_VAR 0 4
77607: PPUSH
77608: LD_EXP 135
77612: PUSH
77613: LD_VAR 0 4
77617: ARRAY
77618: PPUSH
77619: LD_VAR 0 3
77623: PPUSH
77624: CALL_OW 3
77628: PPUSH
77629: CALL_OW 1
77633: ST_TO_ADDR
// end ; end ;
77634: GO 77463
77636: POP
77637: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77638: LD_VAR 0 1
77642: PPUSH
77643: LD_EXP 135
77647: PUSH
77648: LD_VAR 0 4
77652: ARRAY
77653: PUSH
77654: LD_INT 0
77656: PLUS
77657: PPUSH
77658: CALL_OW 505
// end ;
77662: LD_VAR 0 2
77666: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
77667: LD_INT 0
77669: PPUSH
77670: PPUSH
77671: PPUSH
77672: PPUSH
// if not hack in hackTanks then
77673: LD_VAR 0 1
77677: PUSH
77678: LD_EXP 134
77682: IN
77683: NOT
77684: IFFALSE 77688
// exit ;
77686: GO 77773
// index := GetElementIndex ( hackTanks , hack ) ;
77688: LD_ADDR_VAR 0 5
77692: PUSH
77693: LD_EXP 134
77697: PPUSH
77698: LD_VAR 0 1
77702: PPUSH
77703: CALL 28290 0 2
77707: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
77708: LD_ADDR_VAR 0 4
77712: PUSH
77713: DOUBLE
77714: LD_INT 1
77716: DEC
77717: ST_TO_ADDR
77718: LD_EXP 135
77722: PUSH
77723: LD_VAR 0 5
77727: ARRAY
77728: PUSH
77729: FOR_TO
77730: IFFALSE 77771
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
77732: LD_EXP 135
77736: PUSH
77737: LD_VAR 0 5
77741: ARRAY
77742: PUSH
77743: LD_VAR 0 4
77747: ARRAY
77748: PUSH
77749: LD_INT 1
77751: ARRAY
77752: PUSH
77753: LD_VAR 0 2
77757: EQUAL
77758: IFFALSE 77769
// KillUnit ( vehicle ) ;
77760: LD_VAR 0 2
77764: PPUSH
77765: CALL_OW 66
77769: GO 77729
77771: POP
77772: POP
// end ;
77773: LD_VAR 0 3
77777: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
77778: LD_EXP 139
77782: NOT
77783: IFFALSE 77818
77785: GO 77787
77787: DISABLE
// begin initMiner := true ;
77788: LD_ADDR_EXP 139
77792: PUSH
77793: LD_INT 1
77795: ST_TO_ADDR
// minersList := [ ] ;
77796: LD_ADDR_EXP 140
77800: PUSH
77801: EMPTY
77802: ST_TO_ADDR
// minerMinesList := [ ] ;
77803: LD_ADDR_EXP 141
77807: PUSH
77808: EMPTY
77809: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
77810: LD_ADDR_EXP 142
77814: PUSH
77815: LD_INT 5
77817: ST_TO_ADDR
// end ;
77818: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
77819: LD_EXP 139
77823: PUSH
77824: LD_INT 34
77826: PUSH
77827: LD_EXP 64
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: PPUSH
77836: CALL_OW 69
77840: AND
77841: IFFALSE 78304
77843: GO 77845
77845: DISABLE
77846: LD_INT 0
77848: PPUSH
77849: PPUSH
77850: PPUSH
77851: PPUSH
// begin enable ;
77852: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
77853: LD_ADDR_VAR 0 1
77857: PUSH
77858: LD_INT 34
77860: PUSH
77861: LD_EXP 64
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: PPUSH
77870: CALL_OW 69
77874: PUSH
77875: FOR_IN
77876: IFFALSE 77948
// begin if not i in minersList then
77878: LD_VAR 0 1
77882: PUSH
77883: LD_EXP 140
77887: IN
77888: NOT
77889: IFFALSE 77946
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
77891: LD_ADDR_EXP 140
77895: PUSH
77896: LD_EXP 140
77900: PPUSH
77901: LD_EXP 140
77905: PUSH
77906: LD_INT 1
77908: PLUS
77909: PPUSH
77910: LD_VAR 0 1
77914: PPUSH
77915: CALL_OW 1
77919: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
77920: LD_ADDR_EXP 141
77924: PUSH
77925: LD_EXP 141
77929: PPUSH
77930: LD_EXP 141
77934: PUSH
77935: LD_INT 1
77937: PLUS
77938: PPUSH
77939: EMPTY
77940: PPUSH
77941: CALL_OW 1
77945: ST_TO_ADDR
// end end ;
77946: GO 77875
77948: POP
77949: POP
// for i := minerMinesList downto 1 do
77950: LD_ADDR_VAR 0 1
77954: PUSH
77955: DOUBLE
77956: LD_EXP 141
77960: INC
77961: ST_TO_ADDR
77962: LD_INT 1
77964: PUSH
77965: FOR_DOWNTO
77966: IFFALSE 78302
// begin if IsLive ( minersList [ i ] ) then
77968: LD_EXP 140
77972: PUSH
77973: LD_VAR 0 1
77977: ARRAY
77978: PPUSH
77979: CALL_OW 300
77983: IFFALSE 78011
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
77985: LD_EXP 140
77989: PUSH
77990: LD_VAR 0 1
77994: ARRAY
77995: PPUSH
77996: LD_EXP 141
78000: PUSH
78001: LD_VAR 0 1
78005: ARRAY
78006: PPUSH
78007: CALL_OW 505
// if not minerMinesList [ i ] then
78011: LD_EXP 141
78015: PUSH
78016: LD_VAR 0 1
78020: ARRAY
78021: NOT
78022: IFFALSE 78026
// continue ;
78024: GO 77965
// for j := minerMinesList [ i ] downto 1 do
78026: LD_ADDR_VAR 0 2
78030: PUSH
78031: DOUBLE
78032: LD_EXP 141
78036: PUSH
78037: LD_VAR 0 1
78041: ARRAY
78042: INC
78043: ST_TO_ADDR
78044: LD_INT 1
78046: PUSH
78047: FOR_DOWNTO
78048: IFFALSE 78298
// begin side := GetSide ( minersList [ i ] ) ;
78050: LD_ADDR_VAR 0 3
78054: PUSH
78055: LD_EXP 140
78059: PUSH
78060: LD_VAR 0 1
78064: ARRAY
78065: PPUSH
78066: CALL_OW 255
78070: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
78071: LD_ADDR_VAR 0 4
78075: PUSH
78076: LD_EXP 141
78080: PUSH
78081: LD_VAR 0 1
78085: ARRAY
78086: PUSH
78087: LD_VAR 0 2
78091: ARRAY
78092: PUSH
78093: LD_INT 1
78095: ARRAY
78096: PPUSH
78097: LD_EXP 141
78101: PUSH
78102: LD_VAR 0 1
78106: ARRAY
78107: PUSH
78108: LD_VAR 0 2
78112: ARRAY
78113: PUSH
78114: LD_INT 2
78116: ARRAY
78117: PPUSH
78118: CALL_OW 428
78122: ST_TO_ADDR
// if not tmp then
78123: LD_VAR 0 4
78127: NOT
78128: IFFALSE 78132
// continue ;
78130: GO 78047
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
78132: LD_VAR 0 4
78136: PUSH
78137: LD_INT 81
78139: PUSH
78140: LD_VAR 0 3
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PPUSH
78149: CALL_OW 69
78153: IN
78154: PUSH
78155: LD_EXP 141
78159: PUSH
78160: LD_VAR 0 1
78164: ARRAY
78165: PUSH
78166: LD_VAR 0 2
78170: ARRAY
78171: PUSH
78172: LD_INT 1
78174: ARRAY
78175: PPUSH
78176: LD_EXP 141
78180: PUSH
78181: LD_VAR 0 1
78185: ARRAY
78186: PUSH
78187: LD_VAR 0 2
78191: ARRAY
78192: PUSH
78193: LD_INT 2
78195: ARRAY
78196: PPUSH
78197: CALL_OW 458
78201: AND
78202: IFFALSE 78296
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
78204: LD_EXP 141
78208: PUSH
78209: LD_VAR 0 1
78213: ARRAY
78214: PUSH
78215: LD_VAR 0 2
78219: ARRAY
78220: PUSH
78221: LD_INT 1
78223: ARRAY
78224: PPUSH
78225: LD_EXP 141
78229: PUSH
78230: LD_VAR 0 1
78234: ARRAY
78235: PUSH
78236: LD_VAR 0 2
78240: ARRAY
78241: PUSH
78242: LD_INT 2
78244: ARRAY
78245: PPUSH
78246: LD_VAR 0 3
78250: PPUSH
78251: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
78255: LD_ADDR_EXP 141
78259: PUSH
78260: LD_EXP 141
78264: PPUSH
78265: LD_VAR 0 1
78269: PPUSH
78270: LD_EXP 141
78274: PUSH
78275: LD_VAR 0 1
78279: ARRAY
78280: PPUSH
78281: LD_VAR 0 2
78285: PPUSH
78286: CALL_OW 3
78290: PPUSH
78291: CALL_OW 1
78295: ST_TO_ADDR
// end ; end ;
78296: GO 78047
78298: POP
78299: POP
// end ;
78300: GO 77965
78302: POP
78303: POP
// end ;
78304: PPOPN 4
78306: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
78307: LD_INT 0
78309: PPUSH
78310: PPUSH
// result := false ;
78311: LD_ADDR_VAR 0 4
78315: PUSH
78316: LD_INT 0
78318: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
78319: LD_VAR 0 1
78323: PPUSH
78324: CALL_OW 264
78328: PUSH
78329: LD_EXP 64
78333: EQUAL
78334: NOT
78335: IFFALSE 78339
// exit ;
78337: GO 78579
// index := GetElementIndex ( minersList , unit ) ;
78339: LD_ADDR_VAR 0 5
78343: PUSH
78344: LD_EXP 140
78348: PPUSH
78349: LD_VAR 0 1
78353: PPUSH
78354: CALL 28290 0 2
78358: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
78359: LD_EXP 141
78363: PUSH
78364: LD_VAR 0 5
78368: ARRAY
78369: PUSH
78370: LD_EXP 142
78374: GREATEREQUAL
78375: IFFALSE 78379
// exit ;
78377: GO 78579
// ComMoveXY ( unit , x , y ) ;
78379: LD_VAR 0 1
78383: PPUSH
78384: LD_VAR 0 2
78388: PPUSH
78389: LD_VAR 0 3
78393: PPUSH
78394: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78398: LD_INT 35
78400: PPUSH
78401: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
78405: LD_VAR 0 1
78409: PPUSH
78410: LD_VAR 0 2
78414: PPUSH
78415: LD_VAR 0 3
78419: PPUSH
78420: CALL 59063 0 3
78424: NOT
78425: PUSH
78426: LD_VAR 0 1
78430: PPUSH
78431: CALL_OW 314
78435: AND
78436: IFFALSE 78440
// exit ;
78438: GO 78579
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
78440: LD_VAR 0 2
78444: PPUSH
78445: LD_VAR 0 3
78449: PPUSH
78450: CALL_OW 428
78454: PUSH
78455: LD_VAR 0 1
78459: EQUAL
78460: PUSH
78461: LD_VAR 0 1
78465: PPUSH
78466: CALL_OW 314
78470: NOT
78471: AND
78472: IFFALSE 78398
// PlaySoundXY ( x , y , PlantMine ) ;
78474: LD_VAR 0 2
78478: PPUSH
78479: LD_VAR 0 3
78483: PPUSH
78484: LD_STRING PlantMine
78486: PPUSH
78487: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
78491: LD_VAR 0 2
78495: PPUSH
78496: LD_VAR 0 3
78500: PPUSH
78501: LD_VAR 0 1
78505: PPUSH
78506: CALL_OW 255
78510: PPUSH
78511: LD_INT 0
78513: PPUSH
78514: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
78518: LD_ADDR_EXP 141
78522: PUSH
78523: LD_EXP 141
78527: PPUSH
78528: LD_VAR 0 5
78532: PUSH
78533: LD_EXP 141
78537: PUSH
78538: LD_VAR 0 5
78542: ARRAY
78543: PUSH
78544: LD_INT 1
78546: PLUS
78547: PUSH
78548: EMPTY
78549: LIST
78550: LIST
78551: PPUSH
78552: LD_VAR 0 2
78556: PUSH
78557: LD_VAR 0 3
78561: PUSH
78562: EMPTY
78563: LIST
78564: LIST
78565: PPUSH
78566: CALL 28505 0 3
78570: ST_TO_ADDR
// result := true ;
78571: LD_ADDR_VAR 0 4
78575: PUSH
78576: LD_INT 1
78578: ST_TO_ADDR
// end ;
78579: LD_VAR 0 4
78583: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
78584: LD_INT 0
78586: PPUSH
78587: PPUSH
78588: PPUSH
// if not unit in minersList then
78589: LD_VAR 0 1
78593: PUSH
78594: LD_EXP 140
78598: IN
78599: NOT
78600: IFFALSE 78604
// exit ;
78602: GO 78996
// index := GetElementIndex ( minersList , unit ) ;
78604: LD_ADDR_VAR 0 6
78608: PUSH
78609: LD_EXP 140
78613: PPUSH
78614: LD_VAR 0 1
78618: PPUSH
78619: CALL 28290 0 2
78623: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
78624: LD_ADDR_VAR 0 5
78628: PUSH
78629: DOUBLE
78630: LD_EXP 141
78634: PUSH
78635: LD_VAR 0 6
78639: ARRAY
78640: INC
78641: ST_TO_ADDR
78642: LD_INT 1
78644: PUSH
78645: FOR_DOWNTO
78646: IFFALSE 78807
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
78648: LD_EXP 141
78652: PUSH
78653: LD_VAR 0 6
78657: ARRAY
78658: PUSH
78659: LD_VAR 0 5
78663: ARRAY
78664: PUSH
78665: LD_INT 1
78667: ARRAY
78668: PUSH
78669: LD_VAR 0 2
78673: EQUAL
78674: PUSH
78675: LD_EXP 141
78679: PUSH
78680: LD_VAR 0 6
78684: ARRAY
78685: PUSH
78686: LD_VAR 0 5
78690: ARRAY
78691: PUSH
78692: LD_INT 2
78694: ARRAY
78695: PUSH
78696: LD_VAR 0 3
78700: EQUAL
78701: AND
78702: IFFALSE 78805
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78704: LD_EXP 141
78708: PUSH
78709: LD_VAR 0 6
78713: ARRAY
78714: PUSH
78715: LD_VAR 0 5
78719: ARRAY
78720: PUSH
78721: LD_INT 1
78723: ARRAY
78724: PPUSH
78725: LD_EXP 141
78729: PUSH
78730: LD_VAR 0 6
78734: ARRAY
78735: PUSH
78736: LD_VAR 0 5
78740: ARRAY
78741: PUSH
78742: LD_INT 2
78744: ARRAY
78745: PPUSH
78746: LD_VAR 0 1
78750: PPUSH
78751: CALL_OW 255
78755: PPUSH
78756: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78760: LD_ADDR_EXP 141
78764: PUSH
78765: LD_EXP 141
78769: PPUSH
78770: LD_VAR 0 6
78774: PPUSH
78775: LD_EXP 141
78779: PUSH
78780: LD_VAR 0 6
78784: ARRAY
78785: PPUSH
78786: LD_VAR 0 5
78790: PPUSH
78791: CALL_OW 3
78795: PPUSH
78796: CALL_OW 1
78800: ST_TO_ADDR
// exit ;
78801: POP
78802: POP
78803: GO 78996
// end ; end ;
78805: GO 78645
78807: POP
78808: POP
// for i := minerMinesList [ index ] downto 1 do
78809: LD_ADDR_VAR 0 5
78813: PUSH
78814: DOUBLE
78815: LD_EXP 141
78819: PUSH
78820: LD_VAR 0 6
78824: ARRAY
78825: INC
78826: ST_TO_ADDR
78827: LD_INT 1
78829: PUSH
78830: FOR_DOWNTO
78831: IFFALSE 78994
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
78833: LD_EXP 141
78837: PUSH
78838: LD_VAR 0 6
78842: ARRAY
78843: PUSH
78844: LD_VAR 0 5
78848: ARRAY
78849: PUSH
78850: LD_INT 1
78852: ARRAY
78853: PPUSH
78854: LD_EXP 141
78858: PUSH
78859: LD_VAR 0 6
78863: ARRAY
78864: PUSH
78865: LD_VAR 0 5
78869: ARRAY
78870: PUSH
78871: LD_INT 2
78873: ARRAY
78874: PPUSH
78875: LD_VAR 0 2
78879: PPUSH
78880: LD_VAR 0 3
78884: PPUSH
78885: CALL_OW 298
78889: PUSH
78890: LD_INT 6
78892: LESS
78893: IFFALSE 78992
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78895: LD_EXP 141
78899: PUSH
78900: LD_VAR 0 6
78904: ARRAY
78905: PUSH
78906: LD_VAR 0 5
78910: ARRAY
78911: PUSH
78912: LD_INT 1
78914: ARRAY
78915: PPUSH
78916: LD_EXP 141
78920: PUSH
78921: LD_VAR 0 6
78925: ARRAY
78926: PUSH
78927: LD_VAR 0 5
78931: ARRAY
78932: PUSH
78933: LD_INT 2
78935: ARRAY
78936: PPUSH
78937: LD_VAR 0 1
78941: PPUSH
78942: CALL_OW 255
78946: PPUSH
78947: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78951: LD_ADDR_EXP 141
78955: PUSH
78956: LD_EXP 141
78960: PPUSH
78961: LD_VAR 0 6
78965: PPUSH
78966: LD_EXP 141
78970: PUSH
78971: LD_VAR 0 6
78975: ARRAY
78976: PPUSH
78977: LD_VAR 0 5
78981: PPUSH
78982: CALL_OW 3
78986: PPUSH
78987: CALL_OW 1
78991: ST_TO_ADDR
// end ; end ;
78992: GO 78830
78994: POP
78995: POP
// end ;
78996: LD_VAR 0 4
79000: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
79001: LD_INT 0
79003: PPUSH
79004: PPUSH
79005: PPUSH
79006: PPUSH
79007: PPUSH
79008: PPUSH
79009: PPUSH
79010: PPUSH
79011: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
79012: LD_VAR 0 1
79016: PPUSH
79017: CALL_OW 264
79021: PUSH
79022: LD_EXP 64
79026: EQUAL
79027: NOT
79028: PUSH
79029: LD_VAR 0 1
79033: PUSH
79034: LD_EXP 140
79038: IN
79039: NOT
79040: OR
79041: IFFALSE 79045
// exit ;
79043: GO 79367
// index := GetElementIndex ( minersList , unit ) ;
79045: LD_ADDR_VAR 0 6
79049: PUSH
79050: LD_EXP 140
79054: PPUSH
79055: LD_VAR 0 1
79059: PPUSH
79060: CALL 28290 0 2
79064: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
79065: LD_ADDR_VAR 0 8
79069: PUSH
79070: LD_EXP 142
79074: PUSH
79075: LD_EXP 141
79079: PUSH
79080: LD_VAR 0 6
79084: ARRAY
79085: MINUS
79086: ST_TO_ADDR
// if not minesFreeAmount then
79087: LD_VAR 0 8
79091: NOT
79092: IFFALSE 79096
// exit ;
79094: GO 79367
// tmp := [ ] ;
79096: LD_ADDR_VAR 0 7
79100: PUSH
79101: EMPTY
79102: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
79103: LD_ADDR_VAR 0 5
79107: PUSH
79108: DOUBLE
79109: LD_INT 1
79111: DEC
79112: ST_TO_ADDR
79113: LD_VAR 0 8
79117: PUSH
79118: FOR_TO
79119: IFFALSE 79314
// begin _d := rand ( 0 , 5 ) ;
79121: LD_ADDR_VAR 0 11
79125: PUSH
79126: LD_INT 0
79128: PPUSH
79129: LD_INT 5
79131: PPUSH
79132: CALL_OW 12
79136: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
79137: LD_ADDR_VAR 0 12
79141: PUSH
79142: LD_INT 2
79144: PPUSH
79145: LD_INT 6
79147: PPUSH
79148: CALL_OW 12
79152: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
79153: LD_ADDR_VAR 0 9
79157: PUSH
79158: LD_VAR 0 2
79162: PPUSH
79163: LD_VAR 0 11
79167: PPUSH
79168: LD_VAR 0 12
79172: PPUSH
79173: CALL_OW 272
79177: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
79178: LD_ADDR_VAR 0 10
79182: PUSH
79183: LD_VAR 0 3
79187: PPUSH
79188: LD_VAR 0 11
79192: PPUSH
79193: LD_VAR 0 12
79197: PPUSH
79198: CALL_OW 273
79202: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
79203: LD_VAR 0 9
79207: PPUSH
79208: LD_VAR 0 10
79212: PPUSH
79213: CALL_OW 488
79217: PUSH
79218: LD_VAR 0 9
79222: PUSH
79223: LD_VAR 0 10
79227: PUSH
79228: EMPTY
79229: LIST
79230: LIST
79231: PUSH
79232: LD_VAR 0 7
79236: IN
79237: NOT
79238: AND
79239: PUSH
79240: LD_VAR 0 9
79244: PPUSH
79245: LD_VAR 0 10
79249: PPUSH
79250: CALL_OW 458
79254: NOT
79255: AND
79256: IFFALSE 79298
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
79258: LD_ADDR_VAR 0 7
79262: PUSH
79263: LD_VAR 0 7
79267: PPUSH
79268: LD_VAR 0 7
79272: PUSH
79273: LD_INT 1
79275: PLUS
79276: PPUSH
79277: LD_VAR 0 9
79281: PUSH
79282: LD_VAR 0 10
79286: PUSH
79287: EMPTY
79288: LIST
79289: LIST
79290: PPUSH
79291: CALL_OW 1
79295: ST_TO_ADDR
79296: GO 79312
// i := i - 1 ;
79298: LD_ADDR_VAR 0 5
79302: PUSH
79303: LD_VAR 0 5
79307: PUSH
79308: LD_INT 1
79310: MINUS
79311: ST_TO_ADDR
// end ;
79312: GO 79118
79314: POP
79315: POP
// for i in tmp do
79316: LD_ADDR_VAR 0 5
79320: PUSH
79321: LD_VAR 0 7
79325: PUSH
79326: FOR_IN
79327: IFFALSE 79365
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
79329: LD_VAR 0 1
79333: PPUSH
79334: LD_VAR 0 5
79338: PUSH
79339: LD_INT 1
79341: ARRAY
79342: PPUSH
79343: LD_VAR 0 5
79347: PUSH
79348: LD_INT 2
79350: ARRAY
79351: PPUSH
79352: CALL 78307 0 3
79356: NOT
79357: IFFALSE 79363
// exit ;
79359: POP
79360: POP
79361: GO 79367
79363: GO 79326
79365: POP
79366: POP
// end ;
79367: LD_VAR 0 4
79371: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
79372: LD_INT 0
79374: PPUSH
79375: PPUSH
79376: PPUSH
79377: PPUSH
79378: PPUSH
79379: PPUSH
79380: PPUSH
// if not GetClass ( unit ) = class_sniper then
79381: LD_VAR 0 1
79385: PPUSH
79386: CALL_OW 257
79390: PUSH
79391: LD_INT 5
79393: EQUAL
79394: NOT
79395: IFFALSE 79399
// exit ;
79397: GO 79787
// dist := 8 ;
79399: LD_ADDR_VAR 0 5
79403: PUSH
79404: LD_INT 8
79406: ST_TO_ADDR
// viewRange := 12 ;
79407: LD_ADDR_VAR 0 7
79411: PUSH
79412: LD_INT 12
79414: ST_TO_ADDR
// side := GetSide ( unit ) ;
79415: LD_ADDR_VAR 0 6
79419: PUSH
79420: LD_VAR 0 1
79424: PPUSH
79425: CALL_OW 255
79429: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
79430: LD_INT 61
79432: PPUSH
79433: LD_VAR 0 6
79437: PPUSH
79438: CALL_OW 321
79442: PUSH
79443: LD_INT 2
79445: EQUAL
79446: IFFALSE 79456
// viewRange := 16 ;
79448: LD_ADDR_VAR 0 7
79452: PUSH
79453: LD_INT 16
79455: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
79456: LD_VAR 0 1
79460: PPUSH
79461: LD_VAR 0 2
79465: PPUSH
79466: LD_VAR 0 3
79470: PPUSH
79471: CALL_OW 297
79475: PUSH
79476: LD_VAR 0 5
79480: GREATER
79481: IFFALSE 79560
// begin ComMoveXY ( unit , x , y ) ;
79483: LD_VAR 0 1
79487: PPUSH
79488: LD_VAR 0 2
79492: PPUSH
79493: LD_VAR 0 3
79497: PPUSH
79498: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79502: LD_INT 35
79504: PPUSH
79505: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
79509: LD_VAR 0 1
79513: PPUSH
79514: LD_VAR 0 2
79518: PPUSH
79519: LD_VAR 0 3
79523: PPUSH
79524: CALL 59063 0 3
79528: NOT
79529: IFFALSE 79533
// exit ;
79531: GO 79787
// until GetDistUnitXY ( unit , x , y ) < dist ;
79533: LD_VAR 0 1
79537: PPUSH
79538: LD_VAR 0 2
79542: PPUSH
79543: LD_VAR 0 3
79547: PPUSH
79548: CALL_OW 297
79552: PUSH
79553: LD_VAR 0 5
79557: LESS
79558: IFFALSE 79502
// end ; ComTurnXY ( unit , x , y ) ;
79560: LD_VAR 0 1
79564: PPUSH
79565: LD_VAR 0 2
79569: PPUSH
79570: LD_VAR 0 3
79574: PPUSH
79575: CALL_OW 118
// wait ( 5 ) ;
79579: LD_INT 5
79581: PPUSH
79582: CALL_OW 67
// _d := GetDir ( unit ) ;
79586: LD_ADDR_VAR 0 10
79590: PUSH
79591: LD_VAR 0 1
79595: PPUSH
79596: CALL_OW 254
79600: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
79601: LD_ADDR_VAR 0 8
79605: PUSH
79606: LD_VAR 0 1
79610: PPUSH
79611: CALL_OW 250
79615: PPUSH
79616: LD_VAR 0 10
79620: PPUSH
79621: LD_VAR 0 5
79625: PPUSH
79626: CALL_OW 272
79630: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
79631: LD_ADDR_VAR 0 9
79635: PUSH
79636: LD_VAR 0 1
79640: PPUSH
79641: CALL_OW 251
79645: PPUSH
79646: LD_VAR 0 10
79650: PPUSH
79651: LD_VAR 0 5
79655: PPUSH
79656: CALL_OW 273
79660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79661: LD_VAR 0 8
79665: PPUSH
79666: LD_VAR 0 9
79670: PPUSH
79671: CALL_OW 488
79675: NOT
79676: IFFALSE 79680
// exit ;
79678: GO 79787
// ComAnimCustom ( unit , 1 ) ;
79680: LD_VAR 0 1
79684: PPUSH
79685: LD_INT 1
79687: PPUSH
79688: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
79692: LD_VAR 0 8
79696: PPUSH
79697: LD_VAR 0 9
79701: PPUSH
79702: LD_VAR 0 6
79706: PPUSH
79707: LD_VAR 0 7
79711: PPUSH
79712: CALL_OW 330
// repeat wait ( 1 ) ;
79716: LD_INT 1
79718: PPUSH
79719: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
79723: LD_VAR 0 1
79727: PPUSH
79728: CALL_OW 316
79732: PUSH
79733: LD_VAR 0 1
79737: PPUSH
79738: CALL_OW 314
79742: OR
79743: PUSH
79744: LD_VAR 0 1
79748: PPUSH
79749: CALL_OW 302
79753: NOT
79754: OR
79755: PUSH
79756: LD_VAR 0 1
79760: PPUSH
79761: CALL_OW 301
79765: OR
79766: IFFALSE 79716
// RemoveSeeing ( _x , _y , side ) ;
79768: LD_VAR 0 8
79772: PPUSH
79773: LD_VAR 0 9
79777: PPUSH
79778: LD_VAR 0 6
79782: PPUSH
79783: CALL_OW 331
// end ; end_of_file
79787: LD_VAR 0 4
79791: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79792: LD_VAR 0 1
79796: PPUSH
79797: LD_VAR 0 2
79801: PPUSH
79802: LD_VAR 0 3
79806: PPUSH
79807: LD_VAR 0 4
79811: PPUSH
79812: LD_VAR 0 5
79816: PPUSH
79817: LD_VAR 0 6
79821: PPUSH
79822: CALL 62442 0 6
// end ;
79826: PPOPN 6
79828: END
