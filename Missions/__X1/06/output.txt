// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 9927 0 2
// PrepareArabian ;
  32: CALL 408 0 0
// PrepareRussian ;
  36: CALL 10718 0 0
// Action ;
  40: CALL 18909 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// end ; end_of_file
 403: LD_VAR 0 1
 407: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 408: LD_INT 0
 410: PPUSH
 411: PPUSH
 412: PPUSH
 413: PPUSH
 414: PPUSH
 415: PPUSH
 416: PPUSH
 417: PPUSH
 418: PPUSH
 419: PPUSH
 420: PPUSH
 421: PPUSH
// uc_nation := 2 ;
 422: LD_ADDR_OWVAR 21
 426: PUSH
 427: LD_INT 2
 429: ST_TO_ADDR
// uc_side := 5 ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_INT 5
 437: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 438: LD_ADDR_EXP 41
 442: PUSH
 443: LD_STRING Abdul
 445: PPUSH
 446: LD_INT 0
 448: PPUSH
 449: LD_STRING 
 451: PPUSH
 452: CALL 29005 0 3
 456: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 457: LD_ADDR_EXP 43
 461: PUSH
 462: LD_STRING Omar
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: LD_STRING 
 470: PPUSH
 471: CALL 29005 0 3
 475: ST_TO_ADDR
// uc_side := 2 ;
 476: LD_ADDR_OWVAR 20
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 484: LD_ADDR_EXP 33
 488: PUSH
 489: LD_STRING Heike
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 2
 502: PPUSH
 503: CALL 29005 0 3
 507: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 508: LD_ADDR_EXP 36
 512: PUSH
 513: LD_STRING Ibrahim
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 2
 526: PPUSH
 527: CALL 29005 0 3
 531: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 532: LD_ADDR_EXP 34
 536: PUSH
 537: LD_STRING Givi
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 2
 550: PPUSH
 551: CALL 29005 0 3
 555: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 556: LD_ADDR_EXP 37
 560: PUSH
 561: LD_STRING Kamil
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 2
 574: PPUSH
 575: CALL 29005 0 3
 579: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 580: LD_ADDR_EXP 38
 584: PUSH
 585: LD_STRING Kaia
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 2
 598: PPUSH
 599: CALL 29005 0 3
 603: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 604: LD_ADDR_EXP 39
 608: PUSH
 609: LD_STRING Sophia
 611: PPUSH
 612: LD_EXP 1
 616: NOT
 617: PPUSH
 618: LD_EXP 2
 622: PPUSH
 623: CALL 29005 0 3
 627: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 628: LD_ADDR_EXP 40
 632: PUSH
 633: LD_STRING Markov
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_EXP 2
 646: PPUSH
 647: CALL 29005 0 3
 651: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 652: LD_ADDR_EXP 45
 656: PUSH
 657: LD_STRING Aviradze
 659: PPUSH
 660: LD_EXP 1
 664: NOT
 665: PPUSH
 666: LD_EXP 2
 670: PPUSH
 671: CALL 29005 0 3
 675: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 676: LD_ADDR_EXP 44
 680: PUSH
 681: LD_STRING Kurt
 683: PPUSH
 684: LD_EXP 1
 688: NOT
 689: PPUSH
 690: LD_EXP 2
 694: PPUSH
 695: CALL 29005 0 3
 699: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 700: LD_ADDR_EXP 35
 704: PUSH
 705: LD_STRING Mike
 707: PPUSH
 708: LD_EXP 1
 712: NOT
 713: PPUSH
 714: LD_EXP 2
 718: PPUSH
 719: CALL 29005 0 3
 723: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 724: LD_ADDR_EXP 42
 728: PUSH
 729: LD_STRING Olaf
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: LD_STRING 
 737: PPUSH
 738: CALL 29005 0 3
 742: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 743: LD_ADDR_EXP 48
 747: PUSH
 748: LD_STRING 05_others
 750: PPUSH
 751: CALL_OW 31
 755: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 756: LD_ADDR_EXP 49
 760: PUSH
 761: LD_STRING 05_apes
 763: PPUSH
 764: CALL_OW 31
 768: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 769: LD_ADDR_VAR 0 5
 773: PUSH
 774: LD_STRING 05_Radar
 776: PPUSH
 777: LD_EXP 1
 781: PPUSH
 782: CALL_OW 30
 786: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 787: LD_ADDR_VAR 0 6
 791: PUSH
 792: LD_STRING 05_RemoteControl
 794: PPUSH
 795: LD_EXP 1
 799: PPUSH
 800: CALL_OW 30
 804: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 805: LD_ADDR_VAR 0 7
 809: PUSH
 810: LD_STRING 05_DrugsTested
 812: PPUSH
 813: LD_EXP 1
 817: PPUSH
 818: CALL_OW 30
 822: ST_TO_ADDR
// if hasDrugs then
 823: LD_VAR 0 7
 827: IFFALSE 842
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 829: LD_INT 5
 831: PPUSH
 832: LD_INT 2
 834: PPUSH
 835: LD_INT 2
 837: PPUSH
 838: CALL_OW 322
// if hasRadar then
 842: LD_VAR 0 5
 846: IFFALSE 861
// SetTech ( tech_radar , 2 , state_researched ) ;
 848: LD_INT 6
 850: PPUSH
 851: LD_INT 2
 853: PPUSH
 854: LD_INT 2
 856: PPUSH
 857: CALL_OW 322
// if hasRemote then
 861: LD_VAR 0 6
 865: IFFALSE 880
// SetTech ( tech_remCont , 2 , state_researched ) ;
 867: LD_INT 15
 869: PPUSH
 870: LD_INT 2
 872: PPUSH
 873: LD_INT 2
 875: PPUSH
 876: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 880: LD_ADDR_VAR 0 12
 884: PUSH
 885: LD_INT 5
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 517
 895: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: DOUBLE
 902: LD_INT 1
 904: DEC
 905: ST_TO_ADDR
 906: LD_VAR 0 12
 910: PUSH
 911: LD_INT 1
 913: ARRAY
 914: PUSH
 915: FOR_TO
 916: IFFALSE 993
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 918: LD_VAR 0 12
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: PUSH
 927: LD_VAR 0 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 12
 937: PUSH
 938: LD_INT 2
 940: ARRAY
 941: PUSH
 942: LD_VAR 0 2
 946: ARRAY
 947: PPUSH
 948: CALL_OW 351
 952: IFFALSE 991
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 954: LD_VAR 0 12
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PUSH
 963: LD_VAR 0 2
 967: ARRAY
 968: PPUSH
 969: LD_VAR 0 12
 973: PUSH
 974: LD_INT 2
 976: ARRAY
 977: PUSH
 978: LD_VAR 0 2
 982: ARRAY
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: CALL_OW 244
 991: GO 915
 993: POP
 994: POP
// base := [ ] ;
 995: LD_ADDR_VAR 0 4
 999: PUSH
1000: EMPTY
1001: ST_TO_ADDR
// if debug then
1002: LD_EXP 1
1006: IFFALSE 1056
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1008: LD_ADDR_VAR 0 4
1012: PUSH
1013: LD_INT 1
1015: PUSH
1016: LD_INT 51
1018: PUSH
1019: LD_INT 77
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: LD_INT 3
1027: PUSH
1028: LD_INT 3
1030: PUSH
1031: LD_INT 0
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: LD_INT 0
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: PUSH
1051: EMPTY
1052: LIST
1053: ST_TO_ADDR
// end else
1054: GO 1072
// if buildingsFromPrev then
1056: LD_EXP 30
1060: IFFALSE 1072
// base := buildingsFromPrev ;
1062: LD_ADDR_VAR 0 4
1066: PUSH
1067: LD_EXP 30
1071: ST_TO_ADDR
// if base then
1072: LD_VAR 0 4
1076: IFFALSE 1274
// for i := 1 to base do
1078: LD_ADDR_VAR 0 2
1082: PUSH
1083: DOUBLE
1084: LD_INT 1
1086: DEC
1087: ST_TO_ADDR
1088: LD_VAR 0 4
1092: PUSH
1093: FOR_TO
1094: IFFALSE 1272
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1096: LD_ADDR_VAR 0 4
1100: PUSH
1101: LD_VAR 0 4
1105: PPUSH
1106: LD_VAR 0 2
1110: PPUSH
1111: LD_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: ARRAY
1121: PUSH
1122: LD_INT 1
1124: ARRAY
1125: PUSH
1126: LD_VAR 0 4
1130: PUSH
1131: LD_VAR 0 2
1135: ARRAY
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PUSH
1141: LD_INT 155
1143: PLUS
1144: PUSH
1145: LD_VAR 0 4
1149: PUSH
1150: LD_VAR 0 2
1154: ARRAY
1155: PUSH
1156: LD_INT 3
1158: ARRAY
1159: PUSH
1160: LD_INT 3
1162: PLUS
1163: PUSH
1164: LD_VAR 0 4
1168: PUSH
1169: LD_VAR 0 2
1173: ARRAY
1174: PUSH
1175: LD_INT 4
1177: ARRAY
1178: PUSH
1179: LD_VAR 0 4
1183: PUSH
1184: LD_VAR 0 2
1188: ARRAY
1189: PUSH
1190: LD_INT 5
1192: ARRAY
1193: PUSH
1194: LD_VAR 0 4
1198: PUSH
1199: LD_VAR 0 2
1203: ARRAY
1204: PUSH
1205: LD_INT 6
1207: ARRAY
1208: PUSH
1209: LD_VAR 0 4
1213: PUSH
1214: LD_VAR 0 2
1218: ARRAY
1219: PUSH
1220: LD_INT 7
1222: ARRAY
1223: PUSH
1224: LD_VAR 0 4
1228: PUSH
1229: LD_VAR 0 2
1233: ARRAY
1234: PUSH
1235: LD_INT 8
1237: ARRAY
1238: PUSH
1239: LD_VAR 0 4
1243: PUSH
1244: LD_VAR 0 2
1248: ARRAY
1249: PUSH
1250: LD_INT 9
1252: ARRAY
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: PPUSH
1265: CALL_OW 1
1269: ST_TO_ADDR
1270: GO 1093
1272: POP
1273: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1274: LD_ADDR_VAR 0 4
1278: PUSH
1279: LD_VAR 0 4
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 206
1289: PUSH
1290: LD_INT 80
1292: PUSH
1293: LD_INT 1
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: LD_INT 3
1301: PUSH
1302: LD_INT 0
1304: PUSH
1305: LD_INT 0
1307: PUSH
1308: LD_INT 0
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 32
1324: PUSH
1325: LD_INT 221
1327: PUSH
1328: LD_INT 95
1330: PUSH
1331: LD_INT 5
1333: PUSH
1334: LD_INT 2
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: LD_INT 0
1342: PUSH
1343: LD_INT 0
1345: PUSH
1346: LD_INT 23
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PUSH
1360: LD_INT 32
1362: PUSH
1363: LD_INT 223
1365: PUSH
1366: LD_INT 88
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 2
1374: PUSH
1375: LD_INT 3
1377: PUSH
1378: LD_INT 0
1380: PUSH
1381: LD_INT 0
1383: PUSH
1384: LD_INT 24
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: PUSH
1398: LD_INT 32
1400: PUSH
1401: LD_INT 202
1403: PUSH
1404: LD_INT 64
1406: PUSH
1407: LD_INT 2
1409: PUSH
1410: LD_INT 2
1412: PUSH
1413: LD_INT 3
1415: PUSH
1416: LD_INT 0
1418: PUSH
1419: LD_INT 0
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 203
1441: PUSH
1442: LD_INT 91
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 2
1450: PUSH
1451: LD_INT 3
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 0
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 8
1476: PUSH
1477: LD_INT 217
1479: PUSH
1480: LD_INT 78
1482: PUSH
1483: LD_INT 4
1485: PUSH
1486: LD_INT 2
1488: PUSH
1489: LD_INT 3
1491: PUSH
1492: LD_INT 10
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 0
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 27
1514: PUSH
1515: LD_INT 220
1517: PUSH
1518: LD_INT 99
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 3
1529: PUSH
1530: LD_INT 0
1532: PUSH
1533: LD_INT 0
1535: PUSH
1536: LD_INT 0
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: PUSH
1550: LD_INT 27
1552: PUSH
1553: LD_INT 220
1555: PUSH
1556: LD_INT 103
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 2
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: LD_INT 0
1573: PUSH
1574: LD_INT 0
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 27
1590: PUSH
1591: LD_INT 216
1593: PUSH
1594: LD_INT 102
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 2
1602: PUSH
1603: LD_INT 3
1605: PUSH
1606: LD_INT 0
1608: PUSH
1609: LD_INT 0
1611: PUSH
1612: LD_INT 0
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 17
1628: PUSH
1629: LD_INT 203
1631: PUSH
1632: LD_INT 94
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: LD_INT 2
1640: PUSH
1641: LD_INT 3
1643: PUSH
1644: LD_INT 0
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 23
1666: PUSH
1667: LD_INT 200
1669: PUSH
1670: LD_INT 88
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 0
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 16
1704: PUSH
1705: LD_INT 199
1707: PUSH
1708: LD_INT 91
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: LD_INT 0
1722: PUSH
1723: LD_INT 0
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 26
1742: PUSH
1743: LD_INT 197
1745: PUSH
1746: LD_INT 81
1748: PUSH
1749: LD_INT 1
1751: PUSH
1752: LD_INT 2
1754: PUSH
1755: LD_INT 3
1757: PUSH
1758: LD_INT 0
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 26
1780: PUSH
1781: LD_INT 197
1783: PUSH
1784: LD_INT 78
1786: PUSH
1787: LD_INT 3
1789: PUSH
1790: LD_INT 2
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: LD_INT 0
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: ADD
1832: ST_TO_ADDR
// if hasRadar then
1833: LD_VAR 0 5
1837: IFFALSE 1901
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1839: LD_ADDR_VAR 0 4
1843: PUSH
1844: LD_VAR 0 4
1848: PPUSH
1849: LD_VAR 0 4
1853: PUSH
1854: LD_INT 1
1856: PLUS
1857: PPUSH
1858: LD_INT 20
1860: PUSH
1861: LD_INT 203
1863: PUSH
1864: LD_INT 87
1866: PUSH
1867: LD_INT 3
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: LD_INT 3
1875: PUSH
1876: LD_INT 0
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PPUSH
1896: CALL_OW 1
1900: ST_TO_ADDR
// if hasRemote then
1901: LD_VAR 0 6
1905: IFFALSE 1969
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1907: LD_ADDR_VAR 0 4
1911: PUSH
1912: LD_VAR 0 4
1916: PPUSH
1917: LD_VAR 0 4
1921: PUSH
1922: LD_INT 1
1924: PLUS
1925: PPUSH
1926: LD_INT 22
1928: PUSH
1929: LD_INT 207
1931: PUSH
1932: LD_INT 95
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: LD_INT 2
1940: PUSH
1941: LD_INT 3
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: LD_INT 0
1949: PUSH
1950: LD_INT 0
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 1
1968: ST_TO_ADDR
// for i in base do
1969: LD_ADDR_VAR 0 2
1973: PUSH
1974: LD_VAR 0 4
1978: PUSH
1979: FOR_IN
1980: IFFALSE 2319
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
1982: LD_VAR 0 2
1986: PUSH
1987: LD_INT 2
1989: ARRAY
1990: PPUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_INT 3
1998: ARRAY
1999: PPUSH
2000: CALL_OW 428
2004: IFFALSE 2008
// continue ;
2006: GO 1979
// uc_nation := i [ 5 ] ;
2008: LD_ADDR_OWVAR 21
2012: PUSH
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 5
2020: ARRAY
2021: ST_TO_ADDR
// InitBc ;
2022: CALL_OW 21
// bc_type := i [ 1 ] ;
2026: LD_ADDR_OWVAR 42
2030: PUSH
2031: LD_VAR 0 2
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2040: LD_ADDR_OWVAR 43
2044: PUSH
2045: LD_VAR 0 2
2049: PUSH
2050: LD_INT 6
2052: ARRAY
2053: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2054: LD_VAR 0 2
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PUSH
2063: LD_INT 8
2065: EQUAL
2066: PUSH
2067: LD_VAR 0 2
2071: PUSH
2072: LD_INT 5
2074: ARRAY
2075: PUSH
2076: LD_INT 2
2078: EQUAL
2079: AND
2080: PUSH
2081: LD_VAR 0 2
2085: PUSH
2086: LD_INT 8
2088: ARRAY
2089: NOT
2090: AND
2091: IFFALSE 2126
// begin bc_kind1 := b_lab_weapon ;
2093: LD_ADDR_OWVAR 44
2097: PUSH
2098: LD_INT 10
2100: ST_TO_ADDR
// if hasRadar then
2101: LD_VAR 0 5
2105: IFFALSE 2117
// bc_kind2 := b_lab_opto else
2107: LD_ADDR_OWVAR 45
2111: PUSH
2112: LD_INT 15
2114: ST_TO_ADDR
2115: GO 2126
// bc_kind2 := - 1 ;
2117: LD_ADDR_OWVAR 45
2121: PUSH
2122: LD_INT 1
2124: NEG
2125: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: PUSH
2135: LD_INT 7
2137: PUSH
2138: LD_INT 8
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: IN
2145: PUSH
2146: LD_VAR 0 2
2150: PUSH
2151: LD_INT 7
2153: ARRAY
2154: AND
2155: IFFALSE 2171
// bc_kind1 := i [ 7 ] ;
2157: LD_ADDR_OWVAR 44
2161: PUSH
2162: LD_VAR 0 2
2166: PUSH
2167: LD_INT 7
2169: ARRAY
2170: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 1
2178: ARRAY
2179: PUSH
2180: LD_INT 8
2182: EQUAL
2183: PUSH
2184: LD_VAR 0 2
2188: PUSH
2189: LD_INT 8
2191: ARRAY
2192: AND
2193: IFFALSE 2209
// bc_kind1 := i [ 8 ] ;
2195: LD_ADDR_OWVAR 44
2199: PUSH
2200: LD_VAR 0 2
2204: PUSH
2205: LD_INT 8
2207: ARRAY
2208: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2209: LD_ADDR_VAR 0 3
2213: PUSH
2214: LD_VAR 0 2
2218: PUSH
2219: LD_INT 2
2221: ARRAY
2222: PPUSH
2223: LD_VAR 0 2
2227: PUSH
2228: LD_INT 3
2230: ARRAY
2231: PPUSH
2232: LD_VAR 0 2
2236: PUSH
2237: LD_INT 4
2239: ARRAY
2240: PPUSH
2241: CALL_OW 47
2245: ST_TO_ADDR
// if i [ 9 ] then
2246: LD_VAR 0 2
2250: PUSH
2251: LD_INT 9
2253: ARRAY
2254: IFFALSE 2274
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2256: LD_VAR 0 3
2260: PPUSH
2261: LD_VAR 0 2
2265: PUSH
2266: LD_INT 9
2268: ARRAY
2269: PPUSH
2270: CALL_OW 431
// if i [ 1 ] = b_bunker then
2274: LD_VAR 0 2
2278: PUSH
2279: LD_INT 1
2281: ARRAY
2282: PUSH
2283: LD_INT 32
2285: EQUAL
2286: IFFALSE 2317
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2288: LD_ADDR_VAR 0 11
2292: PUSH
2293: LD_VAR 0 11
2297: PPUSH
2298: LD_VAR 0 11
2302: PUSH
2303: LD_INT 1
2305: PLUS
2306: PPUSH
2307: LD_VAR 0 3
2311: PPUSH
2312: CALL_OW 1
2316: ST_TO_ADDR
// end ;
2317: GO 1979
2319: POP
2320: POP
// depot := HexInfo ( 206 , 80 ) ;
2321: LD_ADDR_VAR 0 9
2325: PUSH
2326: LD_INT 206
2328: PPUSH
2329: LD_INT 80
2331: PPUSH
2332: CALL_OW 428
2336: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2337: LD_ADDR_VAR 0 8
2341: PUSH
2342: LD_INT 22
2344: PUSH
2345: LD_INT 2
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: LD_INT 30
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PPUSH
2366: CALL_OW 69
2370: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2371: LD_ADDR_VAR 0 10
2375: PUSH
2376: LD_INT 22
2378: PUSH
2379: LD_INT 2
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 30
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: LD_INT 30
2401: PUSH
2402: LD_INT 7
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 8
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PPUSH
2429: CALL_OW 69
2433: ST_TO_ADDR
// arDepot := depot ;
2434: LD_ADDR_EXP 47
2438: PUSH
2439: LD_VAR 0 9
2443: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2444: LD_VAR 0 9
2448: PPUSH
2449: CALL_OW 274
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: LD_INT 360
2459: PUSH
2460: LD_INT 260
2462: PUSH
2463: LD_INT 190
2465: PUSH
2466: LD_INT 150
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_OWVAR 67
2479: ARRAY
2480: PPUSH
2481: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2485: LD_VAR 0 9
2489: PPUSH
2490: CALL_OW 274
2494: PPUSH
2495: LD_INT 2
2497: PPUSH
2498: LD_INT 200
2500: PUSH
2501: LD_INT 170
2503: PUSH
2504: LD_INT 150
2506: PUSH
2507: LD_INT 120
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: PUSH
2516: LD_OWVAR 67
2520: ARRAY
2521: PPUSH
2522: CALL_OW 277
// uc_nation := 2 ;
2526: LD_ADDR_OWVAR 21
2530: PUSH
2531: LD_INT 2
2533: ST_TO_ADDR
// uc_side := 2 ;
2534: LD_ADDR_OWVAR 20
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2542: LD_INT 13
2544: PPUSH
2545: LD_INT 1
2547: PPUSH
2548: LD_INT 1
2550: PPUSH
2551: LD_INT 27
2553: PPUSH
2554: LD_INT 33
2556: PPUSH
2557: CALL 34020 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2561: CALL_OW 45
2565: PPUSH
2566: LD_INT 190
2568: PPUSH
2569: LD_INT 64
2571: PPUSH
2572: LD_INT 5
2574: PPUSH
2575: LD_INT 0
2577: PPUSH
2578: CALL 68613 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2582: LD_INT 13
2584: PPUSH
2585: LD_INT 1
2587: PPUSH
2588: LD_INT 1
2590: PPUSH
2591: LD_INT 25
2593: PPUSH
2594: LD_INT 22
2596: PPUSH
2597: CALL 34020 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2601: CALL_OW 45
2605: PPUSH
2606: LD_INT 188
2608: PPUSH
2609: LD_INT 67
2611: PPUSH
2612: LD_INT 5
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL 68613 0 5
// if hasRemote then
2622: LD_VAR 0 6
2626: IFFALSE 2708
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
2628: LD_INT 13
2630: PPUSH
2631: LD_INT 1
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 31
2639: PPUSH
2640: LD_INT 35
2642: PPUSH
2643: CALL 34020 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
2647: CALL_OW 45
2651: PPUSH
2652: LD_INT 191
2654: PPUSH
2655: LD_INT 71
2657: PPUSH
2658: LD_INT 5
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL 68613 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
2668: LD_INT 14
2670: PPUSH
2671: LD_INT 1
2673: PPUSH
2674: LD_INT 2
2676: PPUSH
2677: LD_INT 27
2679: PPUSH
2680: LD_INT 55
2682: PPUSH
2683: CALL 34020 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
2687: CALL_OW 45
2691: PPUSH
2692: LD_INT 199
2694: PPUSH
2695: LD_INT 67
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_INT 0
2703: PPUSH
2704: CALL 68613 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2708: LD_EXP 33
2712: PPUSH
2713: LD_INT 213
2715: PPUSH
2716: LD_INT 87
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2726: LD_EXP 33
2730: PPUSH
2731: LD_INT 214
2733: PPUSH
2734: LD_INT 87
2736: PPUSH
2737: CALL_OW 118
// if Kaia then
2741: LD_EXP 38
2745: IFFALSE 2780
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2747: LD_EXP 38
2751: PPUSH
2752: LD_INT 213
2754: PPUSH
2755: LD_INT 85
2757: PPUSH
2758: LD_INT 0
2760: PPUSH
2761: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2765: LD_EXP 38
2769: PPUSH
2770: LD_INT 215
2772: PPUSH
2773: LD_INT 87
2775: PPUSH
2776: CALL_OW 118
// end ; if Olaf and Kaia then
2780: LD_EXP 42
2784: PUSH
2785: LD_EXP 38
2789: AND
2790: IFFALSE 2827
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2792: LD_EXP 42
2796: PPUSH
2797: LD_INT 215
2799: PPUSH
2800: LD_INT 87
2802: PPUSH
2803: LD_INT 0
2805: PPUSH
2806: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2810: LD_EXP 42
2814: PPUSH
2815: LD_INT 213
2817: PPUSH
2818: LD_INT 85
2820: PPUSH
2821: CALL_OW 118
// end else
2825: GO 2847
// if Olaf then
2827: LD_EXP 42
2831: IFFALSE 2847
// PlaceHumanInUnit ( Olaf , factory ) ;
2833: LD_EXP 42
2837: PPUSH
2838: LD_VAR 0 8
2842: PPUSH
2843: CALL_OW 52
// if Givi then
2847: LD_EXP 34
2851: IFFALSE 2932
// begin if Kaia and Olaf then
2853: LD_EXP 38
2857: PUSH
2858: LD_EXP 42
2862: AND
2863: IFFALSE 2900
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2865: LD_EXP 34
2869: PPUSH
2870: LD_INT 247
2872: PPUSH
2873: LD_INT 117
2875: PPUSH
2876: LD_INT 0
2878: PPUSH
2879: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2883: LD_EXP 34
2887: PPUSH
2888: LD_INT 248
2890: PPUSH
2891: LD_INT 118
2893: PPUSH
2894: CALL_OW 118
// end else
2898: GO 2932
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2900: LD_EXP 34
2904: PPUSH
2905: LD_INT 216
2907: PPUSH
2908: LD_INT 88
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2918: LD_EXP 34
2922: PPUSH
2923: LD_EXP 33
2927: PPUSH
2928: CALL_OW 119
// end ; end ; if Kurt then
2932: LD_EXP 44
2936: IFFALSE 2956
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2938: LD_EXP 44
2942: PPUSH
2943: LD_VAR 0 11
2947: PUSH
2948: LD_INT 2
2950: ARRAY
2951: PPUSH
2952: CALL_OW 52
// if Mike then
2956: LD_EXP 35
2960: IFFALSE 2980
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2962: LD_EXP 35
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 3
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Kamil then
2980: LD_EXP 37
2984: IFFALSE 3046
// begin if Kaia and Olaf then
2986: LD_EXP 38
2990: PUSH
2991: LD_EXP 42
2995: AND
2996: IFFALSE 3014
// PlaceHumanInUnit ( Kamil , depot ) else
2998: LD_EXP 37
3002: PPUSH
3003: LD_VAR 0 9
3007: PPUSH
3008: CALL_OW 52
3012: GO 3046
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3014: LD_EXP 37
3018: PPUSH
3019: LD_INT 213
3021: PPUSH
3022: LD_INT 87
3024: PPUSH
3025: LD_INT 0
3027: PPUSH
3028: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3032: LD_EXP 37
3036: PPUSH
3037: LD_EXP 33
3041: PPUSH
3042: CALL_OW 119
// end ; end ; if Sophia then
3046: LD_EXP 39
3050: IFFALSE 3066
// PlaceHumanInUnit ( Sophia , depot ) ;
3052: LD_EXP 39
3056: PPUSH
3057: LD_VAR 0 9
3061: PPUSH
3062: CALL_OW 52
// if Aviradze then
3066: LD_EXP 45
3070: IFFALSE 3119
// if lab then
3072: LD_VAR 0 10
3076: IFFALSE 3098
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3078: LD_EXP 45
3082: PPUSH
3083: LD_VAR 0 10
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: PPUSH
3092: CALL_OW 52
3096: GO 3119
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3098: LD_EXP 45
3102: PPUSH
3103: LD_INT 210
3105: PPUSH
3106: LD_INT 87
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// if Ibrahim then
3119: LD_EXP 36
3123: IFFALSE 3172
// if lab then
3125: LD_VAR 0 10
3129: IFFALSE 3151
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3131: LD_EXP 36
3135: PPUSH
3136: LD_VAR 0 10
3140: PUSH
3141: LD_INT 1
3143: ARRAY
3144: PPUSH
3145: CALL_OW 52
3149: GO 3172
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3151: LD_EXP 36
3155: PPUSH
3156: LD_INT 210
3158: PPUSH
3159: LD_INT 87
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 50
// if Markov then
3172: LD_EXP 40
3176: IFFALSE 3225
// if factory then
3178: LD_VAR 0 8
3182: IFFALSE 3204
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3184: LD_EXP 40
3188: PPUSH
3189: LD_VAR 0 8
3193: PUSH
3194: LD_INT 1
3196: ARRAY
3197: PPUSH
3198: CALL_OW 52
3202: GO 3225
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3204: LD_EXP 40
3208: PPUSH
3209: LD_INT 210
3211: PPUSH
3212: LD_INT 87
3214: PPUSH
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 0
3220: PPUSH
3221: CALL_OW 50
// if heikeSecondSquad then
3225: LD_EXP 48
3229: IFFALSE 3269
// for i in heikeSecondSquad do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_EXP 48
3240: PUSH
3241: FOR_IN
3242: IFFALSE 3267
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3244: LD_VAR 0 2
3248: PPUSH
3249: LD_INT 190
3251: PPUSH
3252: LD_INT 65
3254: PPUSH
3255: LD_INT 5
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: CALL_OW 50
3265: GO 3241
3267: POP
3268: POP
// if heikeApes then
3269: LD_EXP 49
3273: IFFALSE 3313
// for i in heikeApes do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: LD_EXP 49
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3311
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3288: LD_VAR 0 2
3292: PPUSH
3293: LD_INT 190
3295: PPUSH
3296: LD_INT 70
3298: PPUSH
3299: LD_INT 5
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 50
3309: GO 3285
3311: POP
3312: POP
// end ;
3313: LD_VAR 0 1
3317: RET
// export function PrepareRolfSquad ; var i , j ; begin
3318: LD_INT 0
3320: PPUSH
3321: PPUSH
3322: PPUSH
// uc_side := 8 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 8
3330: ST_TO_ADDR
// uc_nation := 2 ;
3331: LD_ADDR_OWVAR 21
3335: PUSH
3336: LD_INT 2
3338: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3339: LD_ADDR_EXP 46
3343: PUSH
3344: LD_STRING Bergkamp
3346: PPUSH
3347: CALL_OW 25
3351: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3352: LD_ADDR_EXP 50
3356: PUSH
3357: LD_EXP 46
3361: PUSH
3362: EMPTY
3363: LIST
3364: ST_TO_ADDR
// for i := 1 to 4 do
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: DOUBLE
3371: LD_INT 1
3373: DEC
3374: ST_TO_ADDR
3375: LD_INT 4
3377: PUSH
3378: FOR_TO
3379: IFFALSE 3459
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3381: LD_ADDR_VAR 0 3
3385: PUSH
3386: DOUBLE
3387: LD_INT 1
3389: DEC
3390: ST_TO_ADDR
3391: LD_INT 5
3393: PUSH
3394: LD_INT 2
3396: PUSH
3397: LD_INT 3
3399: PUSH
3400: LD_INT 1
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: PUSH
3409: LD_VAR 0 2
3413: ARRAY
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3455
// begin PrepareHuman ( false , i , 5 ) ;
3418: LD_INT 0
3420: PPUSH
3421: LD_VAR 0 2
3425: PPUSH
3426: LD_INT 5
3428: PPUSH
3429: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3433: LD_ADDR_EXP 50
3437: PUSH
3438: LD_EXP 50
3442: PPUSH
3443: CALL_OW 44
3447: PPUSH
3448: CALL 66473 0 2
3452: ST_TO_ADDR
// end ;
3453: GO 3415
3455: POP
3456: POP
// end ;
3457: GO 3378
3459: POP
3460: POP
// if HexInfo ( 5 , 3 ) then
3461: LD_INT 5
3463: PPUSH
3464: LD_INT 3
3466: PPUSH
3467: CALL_OW 428
3471: IFFALSE 3488
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3473: LD_INT 5
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: CALL_OW 428
3483: PPUSH
3484: CALL_OW 64
// for i in rolfSquad do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: LD_EXP 50
3497: PUSH
3498: FOR_IN
3499: IFFALSE 3635
// begin uc_direction := 2 ;
3501: LD_ADDR_OWVAR 24
3505: PUSH
3506: LD_INT 2
3508: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3509: LD_VAR 0 2
3513: PPUSH
3514: CALL_OW 257
3518: PUSH
3519: LD_INT 3
3521: EQUAL
3522: IFFALSE 3596
// begin uc_side := 8 ;
3524: LD_ADDR_OWVAR 20
3528: PUSH
3529: LD_INT 8
3531: ST_TO_ADDR
// uc_nation := 2 ;
3532: LD_ADDR_OWVAR 21
3536: PUSH
3537: LD_INT 2
3539: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3540: LD_INT 13
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: LD_INT 1
3548: PPUSH
3549: LD_INT 27
3551: PPUSH
3552: LD_INT 88
3554: PPUSH
3555: CALL 34020 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3559: CALL_OW 45
3563: PPUSH
3564: LD_INT 11
3566: PPUSH
3567: LD_INT 0
3569: PPUSH
3570: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3574: LD_VAR 0 2
3578: PPUSH
3579: LD_INT 5
3581: PPUSH
3582: LD_INT 3
3584: PPUSH
3585: CALL_OW 428
3589: PPUSH
3590: CALL_OW 52
// end else
3594: GO 3611
// PlaceUnitArea ( i , northSpawn , false ) ;
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 11
3603: PPUSH
3604: LD_INT 0
3606: PPUSH
3607: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3611: LD_VAR 0 2
3615: PPUSH
3616: LD_INT 29
3618: PPUSH
3619: LD_INT 10
3621: PPUSH
3622: CALL_OW 111
// wait ( 0 0$2 ) ;
3626: LD_INT 70
3628: PPUSH
3629: CALL_OW 67
// end ;
3633: GO 3498
3635: POP
3636: POP
// wait ( 0 0$5 ) ;
3637: LD_INT 175
3639: PPUSH
3640: CALL_OW 67
// end ;
3644: LD_VAR 0 1
3648: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3649: LD_INT 0
3651: PPUSH
3652: PPUSH
3653: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3654: LD_EXP 46
3658: PPUSH
3659: LD_INT 94
3661: PPUSH
3662: LD_INT 63
3664: PPUSH
3665: CALL_OW 428
3669: PPUSH
3670: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_INT 4
3681: PUSH
3682: LD_INT 82
3684: PUSH
3685: LD_INT 64
3687: PUSH
3688: LD_INT 1
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 31
3699: PUSH
3700: LD_INT 73
3702: PUSH
3703: LD_INT 58
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: ST_TO_ADDR
// for i in tmp do
3719: LD_ADDR_VAR 0 2
3723: PUSH
3724: LD_VAR 0 3
3728: PUSH
3729: FOR_IN
3730: IFFALSE 3794
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3732: LD_EXP 50
3736: PPUSH
3737: LD_INT 25
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PPUSH
3747: CALL_OW 72
3751: PPUSH
3752: LD_VAR 0 2
3756: PUSH
3757: LD_INT 1
3759: ARRAY
3760: PPUSH
3761: LD_VAR 0 2
3765: PUSH
3766: LD_INT 2
3768: ARRAY
3769: PPUSH
3770: LD_VAR 0 2
3774: PUSH
3775: LD_INT 3
3777: ARRAY
3778: PPUSH
3779: LD_VAR 0 2
3783: PUSH
3784: LD_INT 4
3786: ARRAY
3787: PPUSH
3788: CALL_OW 205
3792: GO 3729
3794: POP
3795: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
3796: LD_EXP 50
3800: PUSH
3801: LD_INT 2
3803: ARRAY
3804: PPUSH
3805: LD_INT 63
3807: PPUSH
3808: LD_INT 42
3810: PPUSH
3811: CALL_OW 428
3815: PPUSH
3816: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
3820: LD_EXP 50
3824: PUSH
3825: LD_INT 3
3827: ARRAY
3828: PPUSH
3829: LD_INT 94
3831: PPUSH
3832: LD_INT 63
3834: PPUSH
3835: CALL_OW 428
3839: PPUSH
3840: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3844: LD_INT 35
3846: PPUSH
3847: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
3851: LD_EXP 50
3855: PPUSH
3856: LD_INT 25
3858: PUSH
3859: LD_INT 2
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 3
3868: PUSH
3869: LD_INT 60
3871: PUSH
3872: EMPTY
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PPUSH
3883: CALL_OW 72
3887: IFFALSE 3844
// rolfScriptBase := true ;
3889: LD_ADDR_EXP 9
3893: PUSH
3894: LD_INT 1
3896: ST_TO_ADDR
// end ;
3897: LD_VAR 0 1
3901: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
3902: LD_EXP 9
3906: PUSH
3907: LD_EXP 46
3911: PPUSH
3912: CALL_OW 255
3916: PUSH
3917: LD_INT 8
3919: EQUAL
3920: AND
3921: IFFALSE 4928
3923: GO 3925
3925: DISABLE
3926: LD_INT 0
3928: PPUSH
3929: PPUSH
3930: PPUSH
3931: PPUSH
3932: PPUSH
3933: PPUSH
3934: PPUSH
3935: PPUSH
3936: PPUSH
3937: PPUSH
// begin enable ;
3938: ENABLE
// if not rolfSquad then
3939: LD_EXP 50
3943: NOT
3944: IFFALSE 3948
// exit ;
3946: GO 4928
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3948: LD_ADDR_VAR 0 9
3952: PUSH
3953: LD_INT 12
3955: PPUSH
3956: LD_INT 81
3958: PUSH
3959: LD_INT 8
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PPUSH
3966: CALL_OW 70
3970: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3971: LD_ADDR_VAR 0 5
3975: PUSH
3976: LD_EXP 50
3980: PPUSH
3981: LD_INT 25
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 72
3995: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3996: LD_ADDR_VAR 0 6
4000: PUSH
4001: LD_EXP 50
4005: PPUSH
4006: LD_INT 25
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PPUSH
4016: CALL_OW 72
4020: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4021: LD_ADDR_VAR 0 8
4025: PUSH
4026: LD_EXP 50
4030: PPUSH
4031: LD_INT 25
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PPUSH
4041: CALL_OW 72
4045: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4046: LD_ADDR_VAR 0 7
4050: PUSH
4051: LD_EXP 50
4055: PPUSH
4056: LD_INT 25
4058: PUSH
4059: LD_INT 4
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PPUSH
4066: CALL_OW 72
4070: ST_TO_ADDR
// if sol then
4071: LD_VAR 0 5
4075: IFFALSE 4373
// for i in sol union Rolf do
4077: LD_ADDR_VAR 0 1
4081: PUSH
4082: LD_VAR 0 5
4086: PUSH
4087: LD_EXP 46
4091: UNION
4092: PUSH
4093: FOR_IN
4094: IFFALSE 4371
// if not IsInUnit ( i ) and not HasTask ( i ) then
4096: LD_VAR 0 1
4100: PPUSH
4101: CALL_OW 310
4105: NOT
4106: PUSH
4107: LD_VAR 0 1
4111: PPUSH
4112: CALL_OW 314
4116: NOT
4117: AND
4118: IFFALSE 4369
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 256
4129: PUSH
4130: LD_INT 500
4132: LESS
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 80
4141: PPUSH
4142: LD_INT 49
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 6
4152: GREATER
4153: AND
4154: IFFALSE 4173
// begin ComMoveXY ( i , 80 , 49 ) ;
4156: LD_VAR 0 1
4160: PPUSH
4161: LD_INT 80
4163: PPUSH
4164: LD_INT 49
4166: PPUSH
4167: CALL_OW 111
// continue ;
4171: GO 4093
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4173: LD_ADDR_VAR 0 4
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 8
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 50
4190: PUSH
4191: EMPTY
4192: LIST
4193: PUSH
4194: LD_INT 2
4196: PUSH
4197: LD_INT 30
4199: PUSH
4200: LD_INT 4
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 30
4209: PUSH
4210: LD_INT 5
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 30
4219: PUSH
4220: LD_INT 32
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 30
4229: PUSH
4230: LD_INT 31
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: PPUSH
4249: CALL_OW 69
4253: ST_TO_ADDR
// if tmp then
4254: LD_VAR 0 4
4258: IFFALSE 4369
// begin for b in tmp do
4260: LD_ADDR_VAR 0 2
4264: PUSH
4265: LD_VAR 0 4
4269: PUSH
4270: FOR_IN
4271: IFFALSE 4367
// begin case GetBType ( b ) of b_armoury , b_barracks :
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL_OW 266
4282: PUSH
4283: LD_INT 4
4285: DOUBLE
4286: EQUAL
4287: IFTRUE 4297
4289: LD_INT 5
4291: DOUBLE
4292: EQUAL
4293: IFTRUE 4297
4295: GO 4308
4297: POP
// p := 6 ; b_breastwork , b_bunker :
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: LD_INT 6
4305: ST_TO_ADDR
4306: GO 4334
4308: LD_INT 31
4310: DOUBLE
4311: EQUAL
4312: IFTRUE 4322
4314: LD_INT 32
4316: DOUBLE
4317: EQUAL
4318: IFTRUE 4322
4320: GO 4333
4322: POP
// p := 1 ; end ;
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
4331: GO 4334
4333: POP
// if UnitsInside ( b ) < p then
4334: LD_VAR 0 2
4338: PPUSH
4339: CALL_OW 313
4343: PUSH
4344: LD_VAR 0 3
4348: LESS
4349: IFFALSE 4365
// ComEnterUnit ( i , b ) ;
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_VAR 0 2
4360: PPUSH
4361: CALL_OW 120
// end ;
4365: GO 4270
4367: POP
4368: POP
// end ; end ;
4369: GO 4093
4371: POP
4372: POP
// if sci then
4373: LD_VAR 0 7
4377: IFFALSE 4432
// for i in sci do
4379: LD_ADDR_VAR 0 1
4383: PUSH
4384: LD_VAR 0 7
4388: PUSH
4389: FOR_IN
4390: IFFALSE 4430
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4392: LD_VAR 0 1
4396: PPUSH
4397: LD_INT 80
4399: PPUSH
4400: LD_INT 49
4402: PPUSH
4403: CALL_OW 297
4407: PUSH
4408: LD_INT 9
4410: GREATER
4411: IFFALSE 4428
// ComMoveXY ( i , 80 , 49 ) ;
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 80
4420: PPUSH
4421: LD_INT 49
4423: PPUSH
4424: CALL_OW 111
// end ;
4428: GO 4389
4430: POP
4431: POP
// if mech then
4432: LD_VAR 0 8
4436: IFFALSE 4650
// for i in mech do
4438: LD_ADDR_VAR 0 1
4442: PUSH
4443: LD_VAR 0 8
4447: PUSH
4448: FOR_IN
4449: IFFALSE 4648
// begin hasVehicle := IsInUnit ( i ) ;
4451: LD_ADDR_VAR 0 10
4455: PUSH
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 310
4465: ST_TO_ADDR
// if enemyInBase then
4466: LD_VAR 0 9
4470: IFFALSE 4566
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4472: LD_VAR 0 10
4476: PUSH
4477: LD_VAR 0 10
4481: PPUSH
4482: CALL_OW 256
4486: PUSH
4487: LD_INT 500
4489: GREATER
4490: AND
4491: IFFALSE 4519
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4493: LD_VAR 0 10
4497: PPUSH
4498: LD_VAR 0 9
4502: PPUSH
4503: LD_VAR 0 10
4507: PPUSH
4508: CALL_OW 74
4512: PPUSH
4513: CALL_OW 115
4517: GO 4564
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4519: LD_VAR 0 10
4523: PPUSH
4524: LD_INT 86
4526: PPUSH
4527: LD_INT 49
4529: PPUSH
4530: CALL_OW 297
4534: PUSH
4535: LD_INT 8
4537: GREATER
4538: IFFALSE 4564
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4540: LD_VAR 0 10
4544: PPUSH
4545: LD_INT 86
4547: PPUSH
4548: LD_INT 49
4550: PPUSH
4551: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4555: LD_VAR 0 1
4559: PPUSH
4560: CALL 68293 0 1
// end end else
4564: GO 4646
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 86
4573: PPUSH
4574: LD_INT 49
4576: PPUSH
4577: CALL_OW 297
4581: PUSH
4582: LD_INT 8
4584: GREATER
4585: IFFALSE 4604
// ComMoveXY ( i , 86 , 49 ) else
4587: LD_VAR 0 1
4591: PPUSH
4592: LD_INT 86
4594: PPUSH
4595: LD_INT 49
4597: PPUSH
4598: CALL_OW 111
4602: GO 4646
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4604: LD_VAR 0 10
4608: PUSH
4609: LD_VAR 0 10
4613: PPUSH
4614: CALL_OW 256
4618: PUSH
4619: LD_INT 1000
4621: LESS
4622: AND
4623: IFFALSE 4646
// begin SetFuel ( hasVehicle , 100 ) ;
4625: LD_VAR 0 10
4629: PPUSH
4630: LD_INT 100
4632: PPUSH
4633: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4637: LD_VAR 0 1
4641: PPUSH
4642: CALL 68173 0 1
// end ; end ; end ;
4646: GO 4448
4648: POP
4649: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4650: LD_ADDR_VAR 0 4
4654: PUSH
4655: LD_INT 12
4657: PPUSH
4658: LD_INT 3
4660: PUSH
4661: LD_INT 24
4663: PUSH
4664: LD_INT 1000
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 3
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 70
4693: ST_TO_ADDR
// if tmp and eng then
4694: LD_VAR 0 4
4698: PUSH
4699: LD_VAR 0 6
4703: AND
4704: IFFALSE 4810
// begin for i in eng do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 6
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4808
// if IsInUnit ( i ) then
4719: LD_VAR 0 1
4723: PPUSH
4724: CALL_OW 310
4728: IFFALSE 4741
// ComExitBuilding ( i ) else
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 122
4739: GO 4806
// if GetLives ( i ) = 1000 then
4741: LD_VAR 0 1
4745: PPUSH
4746: CALL_OW 256
4750: PUSH
4751: LD_INT 1000
4753: EQUAL
4754: IFFALSE 4776
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4756: LD_VAR 0 1
4760: PPUSH
4761: LD_VAR 0 4
4765: PUSH
4766: LD_INT 1
4768: ARRAY
4769: PPUSH
4770: CALL_OW 130
4774: GO 4806
// if GetLives ( i ) < 700 then
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 256
4785: PUSH
4786: LD_INT 700
4788: LESS
4789: IFFALSE 4806
// ComMoveXY ( i , 80 , 49 ) ;
4791: LD_VAR 0 1
4795: PPUSH
4796: LD_INT 80
4798: PPUSH
4799: LD_INT 49
4801: PPUSH
4802: CALL_OW 111
4806: GO 4716
4808: POP
4809: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
4810: LD_VAR 0 4
4814: NOT
4815: PUSH
4816: LD_VAR 0 6
4820: PPUSH
4821: LD_INT 3
4823: PUSH
4824: LD_INT 54
4826: PUSH
4827: EMPTY
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PPUSH
4834: CALL_OW 72
4838: AND
4839: IFFALSE 4928
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
4841: LD_ADDR_VAR 0 1
4845: PUSH
4846: LD_VAR 0 6
4850: PPUSH
4851: LD_INT 3
4853: PUSH
4854: LD_INT 54
4856: PUSH
4857: EMPTY
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PPUSH
4864: CALL_OW 72
4868: PUSH
4869: FOR_IN
4870: IFFALSE 4926
// if GetLives ( i ) < 1000 then
4872: LD_VAR 0 1
4876: PPUSH
4877: CALL_OW 256
4881: PUSH
4882: LD_INT 1000
4884: LESS
4885: IFFALSE 4904
// ComMoveXY ( i , 80 , 49 ) else
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_INT 80
4894: PPUSH
4895: LD_INT 49
4897: PPUSH
4898: CALL_OW 111
4902: GO 4924
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
4904: LD_VAR 0 1
4908: PPUSH
4909: LD_INT 86
4911: PPUSH
4912: LD_INT 54
4914: PPUSH
4915: CALL_OW 428
4919: PPUSH
4920: CALL_OW 120
4924: GO 4869
4926: POP
4927: POP
// end ;
4928: PPOPN 10
4930: END
// export function PrepareOmarSquad ; var i , j , p ; begin
4931: LD_INT 0
4933: PPUSH
4934: PPUSH
4935: PPUSH
4936: PPUSH
// uc_side := 5 ;
4937: LD_ADDR_OWVAR 20
4941: PUSH
4942: LD_INT 5
4944: ST_TO_ADDR
// uc_nation := 2 ;
4945: LD_ADDR_OWVAR 21
4949: PUSH
4950: LD_INT 2
4952: ST_TO_ADDR
// omarSquad := [ ] ;
4953: LD_ADDR_EXP 51
4957: PUSH
4958: EMPTY
4959: ST_TO_ADDR
// for i := 1 to 4 do
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: DOUBLE
4966: LD_INT 1
4968: DEC
4969: ST_TO_ADDR
4970: LD_INT 4
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5097
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: DOUBLE
4982: LD_INT 1
4984: DEC
4985: ST_TO_ADDR
4986: LD_INT 6
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 2
4994: PUSH
4995: LD_EXP 21
4999: PLUS
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: PUSH
5010: LD_VAR 0 2
5014: ARRAY
5015: PUSH
5016: FOR_TO
5017: IFFALSE 5093
// begin PrepareHuman ( false , i , 5 ) ;
5019: LD_INT 0
5021: PPUSH
5022: LD_VAR 0 2
5026: PPUSH
5027: LD_INT 5
5029: PPUSH
5030: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5034: LD_ADDR_EXP 51
5038: PUSH
5039: LD_EXP 51
5043: PPUSH
5044: CALL_OW 44
5048: PPUSH
5049: CALL 66473 0 2
5053: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 1
5061: EQUAL
5062: PUSH
5063: LD_INT 50
5065: PPUSH
5066: CALL_OW 13
5070: AND
5071: IFFALSE 5091
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5073: LD_EXP 51
5077: PUSH
5078: LD_EXP 51
5082: ARRAY
5083: PPUSH
5084: LD_INT 8
5086: PPUSH
5087: CALL_OW 336
// end ;
5091: GO 5016
5093: POP
5094: POP
// end ;
5095: GO 4973
5097: POP
5098: POP
// if HexInfo ( 340 , 205 ) then
5099: LD_INT 340
5101: PPUSH
5102: LD_INT 205
5104: PPUSH
5105: CALL_OW 428
5109: IFFALSE 5126
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5111: LD_INT 340
5113: PPUSH
5114: LD_INT 205
5116: PPUSH
5117: CALL_OW 428
5121: PPUSH
5122: CALL_OW 64
// p := 0 ;
5126: LD_ADDR_VAR 0 4
5130: PUSH
5131: LD_INT 0
5133: ST_TO_ADDR
// for i in omarSquad do
5134: LD_ADDR_VAR 0 2
5138: PUSH
5139: LD_EXP 51
5143: PUSH
5144: FOR_IN
5145: IFFALSE 5346
// begin uc_direction := 4 ;
5147: LD_ADDR_OWVAR 24
5151: PUSH
5152: LD_INT 4
5154: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 257
5164: PUSH
5165: LD_INT 3
5167: EQUAL
5168: PUSH
5169: LD_VAR 0 4
5173: PUSH
5174: LD_INT 2
5176: LESS
5177: AND
5178: IFFALSE 5307
// begin p := p + 1 ;
5180: LD_ADDR_VAR 0 4
5184: PUSH
5185: LD_VAR 0 4
5189: PUSH
5190: LD_INT 1
5192: PLUS
5193: ST_TO_ADDR
// uc_side := 5 ;
5194: LD_ADDR_OWVAR 20
5198: PUSH
5199: LD_INT 5
5201: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5202: LD_INT 0
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: CALL_OW 12
5212: IFFALSE 5243
// begin uc_nation := 2 ;
5214: LD_ADDR_OWVAR 21
5218: PUSH
5219: LD_INT 2
5221: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5222: LD_INT 13
5224: PPUSH
5225: LD_INT 1
5227: PPUSH
5228: LD_INT 1
5230: PPUSH
5231: LD_INT 27
5233: PPUSH
5234: LD_INT 88
5236: PPUSH
5237: CALL 34020 0 5
// end else
5241: GO 5270
// begin uc_nation := 3 ;
5243: LD_ADDR_OWVAR 21
5247: PUSH
5248: LD_INT 3
5250: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5251: LD_INT 22
5253: PPUSH
5254: LD_INT 1
5256: PPUSH
5257: LD_INT 1
5259: PPUSH
5260: LD_INT 45
5262: PPUSH
5263: LD_INT 88
5265: PPUSH
5266: CALL 34020 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5270: CALL_OW 45
5274: PPUSH
5275: LD_INT 13
5277: PPUSH
5278: LD_INT 0
5280: PPUSH
5281: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_INT 340
5292: PPUSH
5293: LD_INT 205
5295: PPUSH
5296: CALL_OW 428
5300: PPUSH
5301: CALL_OW 52
// end else
5305: GO 5322
// PlaceUnitArea ( i , southSpawn , false ) ;
5307: LD_VAR 0 2
5311: PPUSH
5312: LD_INT 13
5314: PPUSH
5315: LD_INT 0
5317: PPUSH
5318: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5322: LD_VAR 0 2
5326: PPUSH
5327: LD_INT 333
5329: PPUSH
5330: LD_INT 210
5332: PPUSH
5333: CALL_OW 111
// wait ( 0 0$2 ) ;
5337: LD_INT 70
5339: PPUSH
5340: CALL_OW 67
// end ;
5344: GO 5144
5346: POP
5347: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5348: LD_EXP 43
5352: PPUSH
5353: LD_INT 340
5355: PPUSH
5356: LD_INT 205
5358: PPUSH
5359: LD_INT 0
5361: PPUSH
5362: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5366: LD_EXP 43
5370: PPUSH
5371: LD_INT 333
5373: PPUSH
5374: LD_INT 206
5376: PPUSH
5377: CALL_OW 111
// wait ( 0 0$2 ) ;
5381: LD_INT 70
5383: PPUSH
5384: CALL_OW 67
// ComHold ( omarSquad ) ;
5388: LD_EXP 51
5392: PPUSH
5393: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5397: LD_EXP 43
5401: PUSH
5402: LD_EXP 51
5406: PPUSH
5407: LD_INT 2
5409: PUSH
5410: LD_INT 25
5412: PUSH
5413: LD_INT 1
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 25
5422: PUSH
5423: LD_INT 8
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: PPUSH
5435: CALL_OW 72
5439: UNION
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_INT 5
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 21
5453: PUSH
5454: LD_INT 2
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 69
5469: UNION
5470: PPUSH
5471: LD_INT 315
5473: PPUSH
5474: LD_INT 214
5476: PPUSH
5477: CALL_OW 114
// wait ( 0 0$22 ) ;
5481: LD_INT 770
5483: PPUSH
5484: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5488: LD_EXP 51
5492: PUSH
5493: LD_EXP 43
5497: UNION
5498: PPUSH
5499: LD_INT 329
5501: PPUSH
5502: LD_INT 231
5504: PPUSH
5505: CALL_OW 114
// end ;
5509: LD_VAR 0 1
5513: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5514: LD_EXP 10
5518: IFFALSE 6601
5520: GO 5522
5522: DISABLE
5523: LD_INT 0
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
// begin enable ;
5536: ENABLE
// if not omarSquad then
5537: LD_EXP 51
5541: NOT
5542: IFFALSE 5546
// exit ;
5544: GO 6601
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5546: LD_ADDR_VAR 0 10
5550: PUSH
5551: LD_INT 14
5553: PPUSH
5554: LD_INT 81
5556: PUSH
5557: LD_INT 5
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PPUSH
5564: CALL_OW 70
5568: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5569: LD_ADDR_VAR 0 6
5573: PUSH
5574: LD_EXP 51
5578: PPUSH
5579: LD_INT 2
5581: PUSH
5582: LD_INT 25
5584: PUSH
5585: LD_INT 1
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: PUSH
5592: LD_INT 25
5594: PUSH
5595: LD_INT 8
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 72
5611: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5612: LD_ADDR_VAR 0 7
5616: PUSH
5617: LD_EXP 51
5621: PPUSH
5622: LD_INT 25
5624: PUSH
5625: LD_INT 2
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PPUSH
5632: CALL_OW 72
5636: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5637: LD_ADDR_VAR 0 9
5641: PUSH
5642: LD_EXP 51
5646: PPUSH
5647: LD_INT 25
5649: PUSH
5650: LD_INT 3
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 72
5661: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_EXP 51
5671: PPUSH
5672: LD_INT 25
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PPUSH
5682: CALL_OW 72
5686: ST_TO_ADDR
// if sol then
5687: LD_VAR 0 6
5691: IFFALSE 6055
// for i in sol do
5693: LD_ADDR_VAR 0 1
5697: PUSH
5698: LD_VAR 0 6
5702: PUSH
5703: FOR_IN
5704: IFFALSE 6053
// if not HasTask ( i ) then
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 314
5715: NOT
5716: IFFALSE 6051
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 310
5727: NOT
5728: PUSH
5729: LD_VAR 0 1
5733: PPUSH
5734: CALL_OW 256
5738: PUSH
5739: LD_INT 500
5741: LESS
5742: AND
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: LD_INT 333
5751: PPUSH
5752: LD_INT 234
5754: PPUSH
5755: CALL_OW 297
5759: PUSH
5760: LD_INT 6
5762: GREATER
5763: AND
5764: IFFALSE 5783
// begin ComMoveXY ( i , 333 , 234 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 333
5773: PPUSH
5774: LD_INT 234
5776: PPUSH
5777: CALL_OW 111
// continue ;
5781: GO 5703
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5783: LD_ADDR_VAR 0 5
5787: PUSH
5788: LD_INT 22
5790: PUSH
5791: LD_INT 5
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 58
5800: PUSH
5801: EMPTY
5802: LIST
5803: PUSH
5804: LD_INT 50
5806: PUSH
5807: EMPTY
5808: LIST
5809: PUSH
5810: LD_INT 2
5812: PUSH
5813: LD_INT 30
5815: PUSH
5816: LD_INT 32
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: LD_INT 30
5825: PUSH
5826: LD_INT 31
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL_OW 69
5848: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
5849: LD_VAR 0 5
5853: PUSH
5854: LD_VAR 0 1
5858: PPUSH
5859: CALL_OW 310
5863: PPUSH
5864: CALL_OW 266
5868: PUSH
5869: LD_INT 31
5871: NONEQUAL
5872: AND
5873: IFFALSE 5955
// begin for j in tmp do
5875: LD_ADDR_VAR 0 2
5879: PUSH
5880: LD_VAR 0 5
5884: PUSH
5885: FOR_IN
5886: IFFALSE 5951
// if GetTag ( j ) <> 1 then
5888: LD_VAR 0 2
5892: PPUSH
5893: CALL_OW 110
5897: PUSH
5898: LD_INT 1
5900: NONEQUAL
5901: IFFALSE 5949
// begin SetTag ( j , 1 ) ;
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: CALL_OW 109
// if IsInUnit ( i ) then
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 310
5924: IFFALSE 5935
// ComExit ( i ) ;
5926: LD_VAR 0 1
5930: PPUSH
5931: CALL 66871 0 1
// AddComEnterUnit ( i , j ) ;
5935: LD_VAR 0 1
5939: PPUSH
5940: LD_VAR 0 2
5944: PPUSH
5945: CALL_OW 180
// end ;
5949: GO 5885
5951: POP
5952: POP
// end else
5953: GO 6051
// if not IsInUnit ( i ) then
5955: LD_VAR 0 1
5959: PPUSH
5960: CALL_OW 310
5964: NOT
5965: IFFALSE 6051
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5967: LD_ADDR_VAR 0 5
5971: PUSH
5972: LD_INT 22
5974: PUSH
5975: LD_INT 5
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PUSH
5982: LD_INT 50
5984: PUSH
5985: EMPTY
5986: LIST
5987: PUSH
5988: LD_INT 30
5990: PUSH
5991: LD_INT 4
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: PPUSH
6003: CALL_OW 69
6007: ST_TO_ADDR
// if tmp then
6008: LD_VAR 0 5
6012: IFFALSE 6051
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6014: LD_VAR 0 5
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: CALL_OW 313
6027: PUSH
6028: LD_INT 6
6030: LESS
6031: IFFALSE 6051
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_VAR 0 5
6042: PUSH
6043: LD_INT 1
6045: ARRAY
6046: PPUSH
6047: CALL_OW 120
// end ; end ;
6051: GO 5703
6053: POP
6054: POP
// if sci then
6055: LD_VAR 0 8
6059: IFFALSE 6114
// for i in sci do
6061: LD_ADDR_VAR 0 1
6065: PUSH
6066: LD_VAR 0 8
6070: PUSH
6071: FOR_IN
6072: IFFALSE 6112
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6074: LD_VAR 0 1
6078: PPUSH
6079: LD_INT 333
6081: PPUSH
6082: LD_INT 234
6084: PPUSH
6085: CALL_OW 297
6089: PUSH
6090: LD_INT 9
6092: GREATER
6093: IFFALSE 6110
// ComMoveXY ( i , 333 , 234 ) ;
6095: LD_VAR 0 1
6099: PPUSH
6100: LD_INT 333
6102: PPUSH
6103: LD_INT 234
6105: PPUSH
6106: CALL_OW 111
// end ;
6110: GO 6071
6112: POP
6113: POP
// if mech then
6114: LD_VAR 0 9
6118: IFFALSE 6323
// for i in mech do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_VAR 0 9
6129: PUSH
6130: FOR_IN
6131: IFFALSE 6321
// begin hasVehicle := IsInUnit ( i ) ;
6133: LD_ADDR_VAR 0 11
6137: PUSH
6138: LD_VAR 0 1
6142: PPUSH
6143: CALL_OW 310
6147: ST_TO_ADDR
// if enemyInBase then
6148: LD_VAR 0 10
6152: IFFALSE 6239
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6154: LD_VAR 0 11
6158: PUSH
6159: LD_VAR 0 11
6163: PPUSH
6164: CALL_OW 256
6168: PUSH
6169: LD_INT 500
6171: GREATER
6172: AND
6173: IFFALSE 6201
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6175: LD_VAR 0 11
6179: PPUSH
6180: LD_VAR 0 10
6184: PPUSH
6185: LD_VAR 0 11
6189: PPUSH
6190: CALL_OW 74
6194: PPUSH
6195: CALL_OW 115
6199: GO 6237
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6201: LD_VAR 0 11
6205: PPUSH
6206: LD_INT 333
6208: PPUSH
6209: LD_INT 234
6211: PPUSH
6212: CALL_OW 297
6216: PUSH
6217: LD_INT 6
6219: GREATER
6220: IFFALSE 6237
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6222: LD_VAR 0 11
6226: PPUSH
6227: LD_INT 333
6229: PPUSH
6230: LD_INT 234
6232: PPUSH
6233: CALL_OW 111
// end else
6237: GO 6319
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6239: LD_VAR 0 1
6243: PPUSH
6244: LD_INT 333
6246: PPUSH
6247: LD_INT 234
6249: PPUSH
6250: CALL_OW 297
6254: PUSH
6255: LD_INT 6
6257: GREATER
6258: IFFALSE 6277
// ComMoveXY ( i , 333 , 234 ) else
6260: LD_VAR 0 1
6264: PPUSH
6265: LD_INT 333
6267: PPUSH
6268: LD_INT 234
6270: PPUSH
6271: CALL_OW 111
6275: GO 6319
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6277: LD_VAR 0 11
6281: PUSH
6282: LD_VAR 0 11
6286: PPUSH
6287: CALL_OW 256
6291: PUSH
6292: LD_INT 1000
6294: LESS
6295: AND
6296: IFFALSE 6319
// begin SetFuel ( hasVehicle , 100 ) ;
6298: LD_VAR 0 11
6302: PPUSH
6303: LD_INT 100
6305: PPUSH
6306: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL 68173 0 1
// end ; end ; end ;
6319: GO 6130
6321: POP
6322: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6323: LD_ADDR_VAR 0 5
6327: PUSH
6328: LD_INT 14
6330: PPUSH
6331: LD_INT 3
6333: PUSH
6334: LD_INT 24
6336: PUSH
6337: LD_INT 1000
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 21
6350: PUSH
6351: LD_INT 3
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PPUSH
6362: CALL_OW 70
6366: ST_TO_ADDR
// if tmp and eng then
6367: LD_VAR 0 5
6371: PUSH
6372: LD_VAR 0 7
6376: AND
6377: IFFALSE 6483
// begin for i in eng do
6379: LD_ADDR_VAR 0 1
6383: PUSH
6384: LD_VAR 0 7
6388: PUSH
6389: FOR_IN
6390: IFFALSE 6481
// if IsInUnit ( i ) then
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 310
6401: IFFALSE 6414
// ComExitBuilding ( i ) else
6403: LD_VAR 0 1
6407: PPUSH
6408: CALL_OW 122
6412: GO 6479
// if GetLives ( i ) = 1000 then
6414: LD_VAR 0 1
6418: PPUSH
6419: CALL_OW 256
6423: PUSH
6424: LD_INT 1000
6426: EQUAL
6427: IFFALSE 6449
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6429: LD_VAR 0 1
6433: PPUSH
6434: LD_VAR 0 5
6438: PUSH
6439: LD_INT 1
6441: ARRAY
6442: PPUSH
6443: CALL_OW 130
6447: GO 6479
// if GetLives ( i ) < 700 then
6449: LD_VAR 0 1
6453: PPUSH
6454: CALL_OW 256
6458: PUSH
6459: LD_INT 700
6461: LESS
6462: IFFALSE 6479
// ComMoveXY ( i , 333 , 234 ) ;
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 333
6471: PPUSH
6472: LD_INT 234
6474: PPUSH
6475: CALL_OW 111
6479: GO 6389
6481: POP
6482: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6483: LD_VAR 0 5
6487: NOT
6488: PUSH
6489: LD_VAR 0 7
6493: PPUSH
6494: LD_INT 3
6496: PUSH
6497: LD_INT 54
6499: PUSH
6500: EMPTY
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 72
6511: AND
6512: IFFALSE 6601
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6514: LD_ADDR_VAR 0 1
6518: PUSH
6519: LD_VAR 0 7
6523: PPUSH
6524: LD_INT 3
6526: PUSH
6527: LD_INT 54
6529: PUSH
6530: EMPTY
6531: LIST
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PPUSH
6537: CALL_OW 72
6541: PUSH
6542: FOR_IN
6543: IFFALSE 6599
// if GetLives ( i ) < 1000 then
6545: LD_VAR 0 1
6549: PPUSH
6550: CALL_OW 256
6554: PUSH
6555: LD_INT 1000
6557: LESS
6558: IFFALSE 6577
// ComMoveXY ( i , 333 , 234 ) else
6560: LD_VAR 0 1
6564: PPUSH
6565: LD_INT 333
6567: PPUSH
6568: LD_INT 234
6570: PPUSH
6571: CALL_OW 111
6575: GO 6597
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6577: LD_VAR 0 1
6581: PPUSH
6582: LD_INT 341
6584: PPUSH
6585: LD_INT 232
6587: PPUSH
6588: CALL_OW 428
6592: PPUSH
6593: CALL_OW 120
6597: GO 6542
6599: POP
6600: POP
// end ;
6601: PPOPN 11
6603: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6604: LD_EXP 43
6608: PPUSH
6609: CALL_OW 256
6613: PUSH
6614: LD_INT 1000
6616: LESS
6617: IFFALSE 6635
6619: GO 6621
6621: DISABLE
// begin enable ;
6622: ENABLE
// SetLives ( Omar , 1000 ) ;
6623: LD_EXP 43
6627: PPUSH
6628: LD_INT 1000
6630: PPUSH
6631: CALL_OW 234
// end ;
6635: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6636: LD_EXP 46
6640: PPUSH
6641: CALL_OW 256
6645: PUSH
6646: LD_INT 1000
6648: LESS
6649: PUSH
6650: LD_EXP 32
6654: AND
6655: IFFALSE 6673
6657: GO 6659
6659: DISABLE
// begin enable ;
6660: ENABLE
// SetLives ( Rolf , 1000 ) ;
6661: LD_EXP 46
6665: PPUSH
6666: LD_INT 1000
6668: PPUSH
6669: CALL_OW 234
// end ;
6673: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6674: LD_EXP 32
6678: IFFALSE 7341
6680: GO 6682
6682: DISABLE
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
6689: PPUSH
6690: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6691: LD_ADDR_VAR 0 4
6695: PUSH
6696: LD_INT 215
6698: PUSH
6699: LD_INT 162
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 195
6708: PUSH
6709: LD_INT 163
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 174
6718: PUSH
6719: LD_INT 162
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 145
6728: PUSH
6729: LD_INT 163
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 127
6738: PUSH
6739: LD_INT 163
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6753: LD_ADDR_VAR 0 6
6757: PUSH
6758: LD_INT 221
6760: PUSH
6761: LD_INT 161
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: LD_EXP 46
6777: PUSH
6778: LD_EXP 50
6782: UNION
6783: ST_TO_ADDR
// if not tmp then
6784: LD_VAR 0 2
6788: NOT
6789: IFFALSE 6793
// exit ;
6791: GO 7341
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
6793: LD_VAR 0 2
6797: PPUSH
6798: LD_VAR 0 6
6802: PUSH
6803: LD_INT 1
6805: ARRAY
6806: PPUSH
6807: LD_VAR 0 6
6811: PUSH
6812: LD_INT 2
6814: ARRAY
6815: PPUSH
6816: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6820: LD_INT 35
6822: PPUSH
6823: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
6827: LD_ADDR_VAR 0 2
6831: PUSH
6832: LD_EXP 50
6836: PPUSH
6837: LD_INT 2
6839: PUSH
6840: LD_INT 25
6842: PUSH
6843: LD_INT 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 25
6852: PUSH
6853: LD_INT 8
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: PPUSH
6865: CALL_OW 72
6869: ST_TO_ADDR
// if tmp then
6870: LD_VAR 0 2
6874: IFFALSE 7027
// begin for i in tmp do
6876: LD_ADDR_VAR 0 1
6880: PUSH
6881: LD_VAR 0 2
6885: PUSH
6886: FOR_IN
6887: IFFALSE 7025
// begin tag := GetTag ( i ) ;
6889: LD_ADDR_VAR 0 5
6893: PUSH
6894: LD_VAR 0 1
6898: PPUSH
6899: CALL_OW 110
6903: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
6904: LD_VAR 0 1
6908: PPUSH
6909: CALL_OW 256
6913: PUSH
6914: LD_INT 800
6916: LESS
6917: PUSH
6918: LD_VAR 0 5
6922: PUSH
6923: LD_INT 101
6925: LESS
6926: AND
6927: IFFALSE 6970
// begin SetTag ( i , 101 ) ;
6929: LD_VAR 0 1
6933: PPUSH
6934: LD_INT 101
6936: PPUSH
6937: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
6941: LD_VAR 0 1
6945: PPUSH
6946: LD_VAR 0 6
6950: PUSH
6951: LD_INT 1
6953: ARRAY
6954: PPUSH
6955: LD_VAR 0 6
6959: PUSH
6960: LD_INT 2
6962: ARRAY
6963: PPUSH
6964: CALL_OW 111
// end else
6968: GO 7023
// if tag = 101 then
6970: LD_VAR 0 5
6974: PUSH
6975: LD_INT 101
6977: EQUAL
6978: IFFALSE 7009
// begin if GetLives ( i ) = 1000 then
6980: LD_VAR 0 1
6984: PPUSH
6985: CALL_OW 256
6989: PUSH
6990: LD_INT 1000
6992: EQUAL
6993: IFFALSE 7007
// SetTag ( i , 0 ) ;
6995: LD_VAR 0 1
6999: PPUSH
7000: LD_INT 0
7002: PPUSH
7003: CALL_OW 109
// end else
7007: GO 7023
// AgressiveMove ( i , path ) ;
7009: LD_VAR 0 1
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: CALL 69077 0 2
// end ;
7023: GO 6886
7025: POP
7026: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7027: LD_ADDR_VAR 0 2
7031: PUSH
7032: LD_INT 22
7034: PUSH
7035: LD_INT 8
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 21
7044: PUSH
7045: LD_INT 2
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 3
7054: PUSH
7055: LD_INT 34
7057: PUSH
7058: LD_INT 32
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: LIST
7073: PPUSH
7074: CALL_OW 69
7078: ST_TO_ADDR
// if not tmp then
7079: LD_VAR 0 2
7083: NOT
7084: IFFALSE 7088
// continue ;
7086: GO 6820
// for i in tmp do
7088: LD_ADDR_VAR 0 1
7092: PUSH
7093: LD_VAR 0 2
7097: PUSH
7098: FOR_IN
7099: IFFALSE 7332
// begin mech := IsDrivenBy ( i ) ;
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 311
7115: ST_TO_ADDR
// if not mech then
7116: LD_VAR 0 3
7120: NOT
7121: IFFALSE 7125
// continue ;
7123: GO 7098
// tag := GetTag ( i ) ;
7125: LD_ADDR_VAR 0 5
7129: PUSH
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 110
7139: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 256
7149: PUSH
7150: LD_INT 600
7152: GREATEREQUAL
7153: PUSH
7154: LD_VAR 0 5
7158: PUSH
7159: LD_INT 101
7161: LESS
7162: AND
7163: IFFALSE 7179
// AgressiveMove ( i , path ) ;
7165: LD_VAR 0 1
7169: PPUSH
7170: LD_VAR 0 4
7174: PPUSH
7175: CALL 69077 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7179: LD_VAR 0 1
7183: PPUSH
7184: CALL_OW 256
7188: PUSH
7189: LD_INT 600
7191: LESS
7192: PUSH
7193: LD_VAR 0 5
7197: PUSH
7198: LD_INT 101
7200: LESS
7201: AND
7202: IFFALSE 7243
// begin SetTag ( i , 101 ) ;
7204: LD_VAR 0 1
7208: PPUSH
7209: LD_INT 101
7211: PPUSH
7212: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7216: LD_VAR 0 1
7220: PPUSH
7221: LD_VAR 0 6
7225: PUSH
7226: LD_INT 1
7228: ARRAY
7229: PPUSH
7230: LD_VAR 0 6
7234: PUSH
7235: LD_INT 2
7237: ARRAY
7238: PPUSH
7239: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7243: LD_VAR 0 5
7247: PUSH
7248: LD_INT 101
7250: EQUAL
7251: PUSH
7252: LD_VAR 0 1
7256: PPUSH
7257: LD_VAR 0 6
7261: PUSH
7262: LD_INT 1
7264: ARRAY
7265: PPUSH
7266: LD_VAR 0 6
7270: PUSH
7271: LD_INT 2
7273: ARRAY
7274: PPUSH
7275: CALL_OW 297
7279: PUSH
7280: LD_INT 9
7282: LESS
7283: AND
7284: PUSH
7285: LD_VAR 0 3
7289: AND
7290: IFFALSE 7330
// begin if GetLives ( i ) < 1000 then
7292: LD_VAR 0 1
7296: PPUSH
7297: CALL_OW 256
7301: PUSH
7302: LD_INT 1000
7304: LESS
7305: IFFALSE 7318
// AddComRepairVehicleAndReturn ( mech ) else
7307: LD_VAR 0 3
7311: PPUSH
7312: CALL 68293 0 1
7316: GO 7330
// SetTag ( i , 0 ) ;
7318: LD_VAR 0 1
7322: PPUSH
7323: LD_INT 0
7325: PPUSH
7326: CALL_OW 109
// end ; end ;
7330: GO 7098
7332: POP
7333: POP
// until not tmp ;
7334: LD_VAR 0 2
7338: NOT
7339: IFFALSE 6820
// end ;
7341: PPOPN 6
7343: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7344: LD_EXP 23
7348: IFFALSE 8576
7350: GO 7352
7352: DISABLE
7353: LD_INT 0
7355: PPUSH
7356: PPUSH
7357: PPUSH
7358: PPUSH
7359: PPUSH
7360: PPUSH
7361: PPUSH
7362: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7363: LD_ADDR_VAR 0 7
7367: PUSH
7368: LD_INT 209
7370: PUSH
7371: LD_INT 221
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 190
7380: PUSH
7381: LD_INT 220
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 177
7390: PUSH
7391: LD_INT 220
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 168
7400: PUSH
7401: LD_INT 223
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 150
7410: PUSH
7411: LD_INT 206
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7425: LD_ADDR_VAR 0 8
7429: PUSH
7430: LD_INT 219
7432: PUSH
7433: LD_INT 225
7435: PUSH
7436: LD_INT 0
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: LIST
7443: ST_TO_ADDR
// for i := 1 to 2 do
7444: LD_ADDR_VAR 0 1
7448: PUSH
7449: DOUBLE
7450: LD_INT 1
7452: DEC
7453: ST_TO_ADDR
7454: LD_INT 2
7456: PUSH
7457: FOR_TO
7458: IFFALSE 7607
// begin uc_side := 5 ;
7460: LD_ADDR_OWVAR 20
7464: PUSH
7465: LD_INT 5
7467: ST_TO_ADDR
// uc_nation := 2 ;
7468: LD_ADDR_OWVAR 21
7472: PUSH
7473: LD_INT 2
7475: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7476: LD_INT 14
7478: PPUSH
7479: LD_INT 1
7481: PPUSH
7482: LD_INT 1
7484: PPUSH
7485: LD_INT 32
7487: PPUSH
7488: LD_INT 80
7490: PPUSH
7491: CALL 34020 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: LD_VAR 0 2
7504: PPUSH
7505: CALL_OW 45
7509: PPUSH
7510: CALL 66473 0 2
7514: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7515: LD_VAR 0 2
7519: PUSH
7520: LD_VAR 0 1
7524: ARRAY
7525: PPUSH
7526: LD_INT 4
7528: PPUSH
7529: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7533: LD_VAR 0 2
7537: PUSH
7538: LD_VAR 0 1
7542: ARRAY
7543: PPUSH
7544: LD_INT 16
7546: PPUSH
7547: LD_INT 0
7549: PPUSH
7550: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7554: LD_INT 0
7556: PPUSH
7557: LD_INT 4
7559: PPUSH
7560: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7564: CALL_OW 44
7568: PPUSH
7569: LD_VAR 0 2
7573: PUSH
7574: LD_VAR 0 1
7578: ARRAY
7579: PPUSH
7580: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7584: LD_VAR 0 2
7588: PUSH
7589: LD_VAR 0 1
7593: ARRAY
7594: PPUSH
7595: LD_INT 337
7597: PPUSH
7598: LD_INT 232
7600: PPUSH
7601: CALL_OW 111
// end ;
7605: GO 7457
7607: POP
7608: POP
// wait ( 0 0$25 ) ;
7609: LD_INT 875
7611: PPUSH
7612: CALL_OW 67
// for i := 1 to 2 do
7616: LD_ADDR_VAR 0 1
7620: PUSH
7621: DOUBLE
7622: LD_INT 1
7624: DEC
7625: ST_TO_ADDR
7626: LD_INT 2
7628: PUSH
7629: FOR_TO
7630: IFFALSE 7655
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7632: LD_VAR 0 2
7636: PUSH
7637: LD_VAR 0 1
7641: ARRAY
7642: PPUSH
7643: LD_INT 2
7645: PPUSH
7646: LD_INT 100
7648: PPUSH
7649: CALL_OW 290
7653: GO 7629
7655: POP
7656: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7657: LD_EXP 51
7661: PPUSH
7662: LD_INT 2
7664: PUSH
7665: LD_INT 25
7667: PUSH
7668: LD_INT 1
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 25
7677: PUSH
7678: LD_INT 8
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 72
7694: PPUSH
7695: CALL_OW 122
// wait ( 0 0$3 ) ;
7699: LD_INT 105
7701: PPUSH
7702: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7706: LD_EXP 51
7710: PUSH
7711: LD_EXP 43
7715: UNION
7716: PPUSH
7717: LD_VAR 0 8
7721: PUSH
7722: LD_INT 1
7724: ARRAY
7725: PPUSH
7726: LD_VAR 0 8
7730: PUSH
7731: LD_INT 2
7733: ARRAY
7734: PPUSH
7735: CALL_OW 174
// wait ( 0 0$3 ) ;
7739: LD_INT 105
7741: PPUSH
7742: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7746: LD_VAR 0 2
7750: PPUSH
7751: LD_INT 218
7753: PPUSH
7754: LD_INT 217
7756: PPUSH
7757: CALL_OW 171
// wait ( 1 1$00 ) ;
7761: LD_INT 2100
7763: PPUSH
7764: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7768: LD_INT 35
7770: PPUSH
7771: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
7775: LD_VAR 0 8
7779: PUSH
7780: LD_INT 3
7782: ARRAY
7783: PUSH
7784: LD_INT 0
7786: EQUAL
7787: IFFALSE 7892
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
7789: LD_INT 22
7791: PUSH
7792: LD_INT 3
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 92
7801: PUSH
7802: LD_INT 168
7804: PUSH
7805: LD_INT 229
7807: PUSH
7808: LD_INT 12
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 69
7825: PUSH
7826: LD_INT 0
7828: EQUAL
7829: IFFALSE 7892
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
7831: LD_ADDR_VAR 0 8
7835: PUSH
7836: LD_INT 167
7838: PUSH
7839: LD_INT 222
7841: PUSH
7842: LD_INT 1
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
7850: LD_EXP 43
7854: PUSH
7855: LD_VAR 0 2
7859: ADD
7860: PUSH
7861: LD_EXP 51
7865: PPUSH
7866: LD_INT 25
7868: PUSH
7869: LD_INT 4
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PPUSH
7876: CALL_OW 72
7880: ADD
7881: PPUSH
7882: LD_INT 167
7884: PPUSH
7885: LD_INT 222
7887: PPUSH
7888: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
7892: LD_ADDR_VAR 0 3
7896: PUSH
7897: LD_EXP 51
7901: PPUSH
7902: LD_INT 2
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 1
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 25
7917: PUSH
7918: LD_INT 8
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: PPUSH
7930: CALL_OW 72
7934: ST_TO_ADDR
// if tmp then
7935: LD_VAR 0 3
7939: IFFALSE 8092
// begin for i in tmp do
7941: LD_ADDR_VAR 0 1
7945: PUSH
7946: LD_VAR 0 3
7950: PUSH
7951: FOR_IN
7952: IFFALSE 8090
// begin tag := GetTag ( i ) ;
7954: LD_ADDR_VAR 0 4
7958: PUSH
7959: LD_VAR 0 1
7963: PPUSH
7964: CALL_OW 110
7968: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 256
7978: PUSH
7979: LD_INT 800
7981: LESS
7982: PUSH
7983: LD_VAR 0 4
7987: PUSH
7988: LD_INT 101
7990: LESS
7991: AND
7992: IFFALSE 8035
// begin SetTag ( i , 101 ) ;
7994: LD_VAR 0 1
7998: PPUSH
7999: LD_INT 101
8001: PPUSH
8002: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8006: LD_VAR 0 1
8010: PPUSH
8011: LD_VAR 0 8
8015: PUSH
8016: LD_INT 1
8018: ARRAY
8019: PPUSH
8020: LD_VAR 0 8
8024: PUSH
8025: LD_INT 2
8027: ARRAY
8028: PPUSH
8029: CALL_OW 111
// end else
8033: GO 8088
// if tag = 101 then
8035: LD_VAR 0 4
8039: PUSH
8040: LD_INT 101
8042: EQUAL
8043: IFFALSE 8074
// begin if GetLives ( i ) = 1000 then
8045: LD_VAR 0 1
8049: PPUSH
8050: CALL_OW 256
8054: PUSH
8055: LD_INT 1000
8057: EQUAL
8058: IFFALSE 8072
// SetTag ( i , 0 ) ;
8060: LD_VAR 0 1
8064: PPUSH
8065: LD_INT 0
8067: PPUSH
8068: CALL_OW 109
// end else
8072: GO 8088
// AgressiveMove ( i , path ) ;
8074: LD_VAR 0 1
8078: PPUSH
8079: LD_VAR 0 7
8083: PPUSH
8084: CALL 69077 0 2
// end ;
8088: GO 7951
8090: POP
8091: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8092: LD_ADDR_VAR 0 3
8096: PUSH
8097: LD_INT 22
8099: PUSH
8100: LD_INT 5
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 21
8109: PUSH
8110: LD_INT 2
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 34
8122: PUSH
8123: LD_INT 32
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: PPUSH
8139: CALL_OW 69
8143: ST_TO_ADDR
// if not tmp then
8144: LD_VAR 0 3
8148: NOT
8149: IFFALSE 8153
// continue ;
8151: GO 7768
// for i in tmp do
8153: LD_ADDR_VAR 0 1
8157: PUSH
8158: LD_VAR 0 3
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8567
// begin mech := IsDrivenBy ( i ) ;
8166: LD_ADDR_VAR 0 5
8170: PUSH
8171: LD_VAR 0 1
8175: PPUSH
8176: CALL_OW 311
8180: ST_TO_ADDR
// if not mech then
8181: LD_VAR 0 5
8185: NOT
8186: IFFALSE 8190
// continue ;
8188: GO 8163
// tag := GetTag ( i ) ;
8190: LD_ADDR_VAR 0 4
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 110
8204: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8205: LD_VAR 0 1
8209: PPUSH
8210: CALL_OW 261
8214: PUSH
8215: LD_INT 90
8217: GREATER
8218: PUSH
8219: LD_VAR 0 4
8223: PUSH
8224: LD_INT 102
8226: EQUAL
8227: AND
8228: IFFALSE 8244
// SetTag ( i , 0 ) else
8230: LD_VAR 0 1
8234: PPUSH
8235: LD_INT 0
8237: PPUSH
8238: CALL_OW 109
8242: GO 8340
// if GetTag ( i ) = 102 then
8244: LD_VAR 0 1
8248: PPUSH
8249: CALL_OW 110
8253: PUSH
8254: LD_INT 102
8256: EQUAL
8257: IFFALSE 8340
// begin x := rand ( 1 , 2 ) ;
8259: LD_ADDR_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: PPUSH
8267: LD_INT 2
8269: PPUSH
8270: CALL_OW 12
8274: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8275: LD_VAR 0 1
8279: PPUSH
8280: LD_VAR 0 2
8284: PUSH
8285: LD_VAR 0 6
8289: ARRAY
8290: PPUSH
8291: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8295: LD_VAR 0 2
8299: PUSH
8300: LD_VAR 0 6
8304: ARRAY
8305: PPUSH
8306: LD_INT 2
8308: PPUSH
8309: CALL_OW 289
8313: PUSH
8314: LD_INT 20
8316: LESS
8317: IFFALSE 8340
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8319: LD_VAR 0 2
8323: PUSH
8324: LD_VAR 0 6
8328: ARRAY
8329: PPUSH
8330: LD_INT 2
8332: PPUSH
8333: LD_INT 100
8335: PPUSH
8336: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8340: LD_VAR 0 1
8344: PPUSH
8345: CALL_OW 256
8349: PUSH
8350: LD_INT 600
8352: GREATEREQUAL
8353: PUSH
8354: LD_VAR 0 4
8358: PUSH
8359: LD_INT 101
8361: LESS
8362: AND
8363: IFFALSE 8379
// AgressiveMove ( i , path ) ;
8365: LD_VAR 0 1
8369: PPUSH
8370: LD_VAR 0 7
8374: PPUSH
8375: CALL 69077 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 256
8388: PUSH
8389: LD_INT 600
8391: LESS
8392: PUSH
8393: LD_VAR 0 4
8397: PUSH
8398: LD_INT 101
8400: LESS
8401: AND
8402: IFFALSE 8443
// begin SetTag ( i , 101 ) ;
8404: LD_VAR 0 1
8408: PPUSH
8409: LD_INT 101
8411: PPUSH
8412: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8416: LD_VAR 0 1
8420: PPUSH
8421: LD_VAR 0 8
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 8
8434: PUSH
8435: LD_INT 2
8437: ARRAY
8438: PPUSH
8439: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8443: LD_VAR 0 4
8447: PUSH
8448: LD_INT 101
8450: EQUAL
8451: PUSH
8452: LD_VAR 0 1
8456: PPUSH
8457: LD_VAR 0 8
8461: PUSH
8462: LD_INT 1
8464: ARRAY
8465: PPUSH
8466: LD_VAR 0 8
8470: PUSH
8471: LD_INT 2
8473: ARRAY
8474: PPUSH
8475: CALL_OW 297
8479: PUSH
8480: LD_INT 9
8482: LESS
8483: AND
8484: PUSH
8485: LD_VAR 0 5
8489: AND
8490: IFFALSE 8565
// begin if GetLives ( i ) < 1000 then
8492: LD_VAR 0 1
8496: PPUSH
8497: CALL_OW 256
8501: PUSH
8502: LD_INT 1000
8504: LESS
8505: IFFALSE 8518
// AddComRepairVehicleAndReturn ( mech ) else
8507: LD_VAR 0 5
8511: PPUSH
8512: CALL 68293 0 1
8516: GO 8565
// if GetFuel ( i ) <= 90 and cargo then
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 261
8527: PUSH
8528: LD_INT 90
8530: LESSEQUAL
8531: PUSH
8532: LD_VAR 0 2
8536: AND
8537: IFFALSE 8553
// SetTag ( i , 102 ) else
8539: LD_VAR 0 1
8543: PPUSH
8544: LD_INT 102
8546: PPUSH
8547: CALL_OW 109
8551: GO 8565
// SetTag ( i , 0 ) ;
8553: LD_VAR 0 1
8557: PPUSH
8558: LD_INT 0
8560: PPUSH
8561: CALL_OW 109
// end ; end ;
8565: GO 8163
8567: POP
8568: POP
// until not tmp ;
8569: LD_VAR 0 3
8573: NOT
8574: IFFALSE 7768
// end ;
8576: PPOPN 8
8578: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8579: LD_INT 0
8581: PPUSH
8582: PPUSH
8583: PPUSH
8584: PPUSH
8585: PPUSH
8586: PPUSH
8587: PPUSH
8588: PPUSH
8589: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8590: LD_INT 20
8592: PPUSH
8593: LD_INT 1
8595: PPUSH
8596: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8600: LD_INT 175
8602: PPUSH
8603: CALL_OW 67
// heikeInConvoy := false ;
8607: LD_ADDR_VAR 0 8
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// needOil := false ;
8615: LD_ADDR_VAR 0 7
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8623: LD_ADDR_VAR 0 3
8627: PUSH
8628: LD_INT 20
8630: PPUSH
8631: LD_INT 22
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 3
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 34
8649: PUSH
8650: LD_INT 88
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 34
8659: PUSH
8660: LD_INT 31
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: LIST
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 33
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 70
8695: ST_TO_ADDR
// for i in tmp do
8696: LD_ADDR_VAR 0 2
8700: PUSH
8701: LD_VAR 0 3
8705: PUSH
8706: FOR_IN
8707: IFFALSE 8792
// begin if IsDrivenBy ( i ) = Heike then
8709: LD_VAR 0 2
8713: PPUSH
8714: CALL_OW 311
8718: PUSH
8719: LD_EXP 33
8723: EQUAL
8724: IFFALSE 8743
// begin heikeInConvoy := true ;
8726: LD_ADDR_VAR 0 8
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
8734: LD_STRING QHeikeConvoy
8736: PPUSH
8737: CALL_OW 97
// break ;
8741: GO 8792
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
8743: LD_VAR 0 2
8747: PPUSH
8748: CALL_OW 262
8752: PUSH
8753: LD_INT 1
8755: EQUAL
8756: PUSH
8757: LD_VAR 0 2
8761: PPUSH
8762: CALL_OW 261
8766: PUSH
8767: LD_INT 10
8769: LESS
8770: AND
8771: IFFALSE 8790
// begin needOil := true ;
8773: LD_ADDR_VAR 0 7
8777: PUSH
8778: LD_INT 1
8780: ST_TO_ADDR
// Query ( QNeedOil ) ;
8781: LD_STRING QNeedOil
8783: PPUSH
8784: CALL_OW 97
// break ;
8788: GO 8792
// end ; end ;
8790: GO 8706
8792: POP
8793: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
8794: LD_VAR 0 7
8798: NOT
8799: PUSH
8800: LD_VAR 0 8
8804: NOT
8805: AND
8806: PUSH
8807: LD_VAR 0 3
8811: PPUSH
8812: LD_INT 2
8814: PUSH
8815: LD_INT 34
8817: PUSH
8818: LD_INT 32
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PUSH
8825: LD_INT 34
8827: PUSH
8828: LD_INT 51
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: PPUSH
8840: CALL_OW 72
8844: AND
8845: IFFALSE 8862
// if Query ( QConvoy ) = 1 then
8847: LD_STRING QConvoy
8849: PPUSH
8850: CALL_OW 97
8854: PUSH
8855: LD_INT 1
8857: EQUAL
8858: IFFALSE 8862
// break ;
8860: GO 8866
// until false ;
8862: LD_INT 0
8864: IFFALSE 8600
// SetAreaMapShow ( oilArea , 0 ) ;
8866: LD_INT 20
8868: PPUSH
8869: LD_INT 0
8871: PPUSH
8872: CALL_OW 424
// data := [ ] ;
8876: LD_ADDR_VAR 0 4
8880: PUSH
8881: EMPTY
8882: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
8883: LD_ADDR_VAR 0 5
8887: PUSH
8888: LD_INT 60
8890: PUSH
8891: LD_INT 50
8893: PUSH
8894: LD_INT 40
8896: PUSH
8897: LD_INT 30
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: LD_OWVAR 67
8910: ARRAY
8911: ST_TO_ADDR
// for i in tmp do
8912: LD_ADDR_VAR 0 2
8916: PUSH
8917: LD_VAR 0 3
8921: PUSH
8922: FOR_IN
8923: IFFALSE 9020
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
8925: LD_ADDR_VAR 0 4
8929: PUSH
8930: LD_VAR 0 4
8934: PPUSH
8935: LD_VAR 0 2
8939: PUSH
8940: LD_VAR 0 2
8944: PPUSH
8945: CALL_OW 311
8949: PUSH
8950: LD_VAR 0 2
8954: PPUSH
8955: CALL_OW 256
8959: PUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 261
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: PPUSH
8976: CALL 66473 0 2
8980: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
8981: LD_VAR 0 2
8985: PPUSH
8986: CALL_OW 311
8990: PPUSH
8991: CALL_OW 64
// RemoveUnit ( i ) ;
8995: LD_VAR 0 2
8999: PPUSH
9000: CALL_OW 64
// chance := chance + 20 ;
9004: LD_ADDR_VAR 0 5
9008: PUSH
9009: LD_VAR 0 5
9013: PUSH
9014: LD_INT 20
9016: PLUS
9017: ST_TO_ADDR
// end ;
9018: GO 8922
9020: POP
9021: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9022: LD_INT 1575
9024: PPUSH
9025: LD_INT 5250
9027: PPUSH
9028: CALL_OW 12
9032: PPUSH
9033: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9037: LD_INT 35
9039: PPUSH
9040: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9044: LD_INT 22
9046: PUSH
9047: LD_INT 3
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PUSH
9054: LD_INT 92
9056: PUSH
9057: LD_INT 261
9059: PUSH
9060: LD_INT 71
9062: PUSH
9063: LD_INT 12
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PPUSH
9076: CALL_OW 69
9080: NOT
9081: PUSH
9082: LD_INT 277
9084: PPUSH
9085: LD_INT 80
9087: PPUSH
9088: CALL_OW 428
9092: NOT
9093: AND
9094: IFFALSE 9037
// for i in data do
9096: LD_ADDR_VAR 0 2
9100: PUSH
9101: LD_VAR 0 4
9105: PUSH
9106: FOR_IN
9107: IFFALSE 9494
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9109: LD_ADDR_OWVAR 21
9113: PUSH
9114: LD_VAR 0 2
9118: PUSH
9119: LD_INT 1
9121: ARRAY
9122: PPUSH
9123: CALL_OW 248
9127: ST_TO_ADDR
// uc_side := 2 ;
9128: LD_ADDR_OWVAR 20
9132: PUSH
9133: LD_INT 2
9135: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9136: LD_VAR 0 2
9140: PUSH
9141: LD_INT 1
9143: ARRAY
9144: PPUSH
9145: CALL_OW 265
9149: PPUSH
9150: LD_VAR 0 2
9154: PUSH
9155: LD_INT 1
9157: ARRAY
9158: PPUSH
9159: CALL_OW 262
9163: PPUSH
9164: LD_VAR 0 2
9168: PUSH
9169: LD_INT 1
9171: ARRAY
9172: PPUSH
9173: CALL_OW 263
9177: PPUSH
9178: LD_VAR 0 2
9182: PUSH
9183: LD_INT 1
9185: ARRAY
9186: PPUSH
9187: CALL_OW 264
9191: PPUSH
9192: LD_INT 66
9194: PPUSH
9195: CALL 34020 0 5
// vehicle := CreateVehicle ;
9199: LD_ADDR_VAR 0 6
9203: PUSH
9204: CALL_OW 45
9208: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9209: LD_VAR 0 6
9213: PPUSH
9214: LD_INT 277
9216: PPUSH
9217: LD_INT 80
9219: PPUSH
9220: LD_INT 4
9222: PPUSH
9223: LD_INT 0
9225: PPUSH
9226: CALL 68613 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 2
9237: ARRAY
9238: PPUSH
9239: LD_VAR 0 6
9243: PPUSH
9244: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9248: LD_VAR 0 6
9252: PPUSH
9253: LD_VAR 0 2
9257: PUSH
9258: LD_INT 3
9260: ARRAY
9261: PPUSH
9262: CALL_OW 234
// success := Prob ( chance ) ;
9266: LD_ADDR_VAR 0 9
9270: PUSH
9271: LD_VAR 0 5
9275: PPUSH
9276: CALL_OW 13
9280: ST_TO_ADDR
// if success then
9281: LD_VAR 0 9
9285: IFFALSE 9353
// begin if GetEngine ( vehicle ) = engine_combustion then
9287: LD_VAR 0 6
9291: PPUSH
9292: CALL_OW 262
9296: PUSH
9297: LD_INT 1
9299: EQUAL
9300: IFFALSE 9314
// SetFuel ( vehicle , 90 ) ;
9302: LD_VAR 0 6
9306: PPUSH
9307: LD_INT 90
9309: PPUSH
9310: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9314: LD_VAR 0 6
9318: PPUSH
9319: CALL_OW 264
9323: PUSH
9324: LD_INT 32
9326: PUSH
9327: LD_INT 51
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: IN
9334: IFFALSE 9351
// SetCargo ( vehicle , mat_oil , 100 ) ;
9336: LD_VAR 0 6
9340: PPUSH
9341: LD_INT 2
9343: PPUSH
9344: LD_INT 100
9346: PPUSH
9347: CALL_OW 290
// end else
9351: GO 9425
// begin if i [ 3 ] > 333 then
9353: LD_VAR 0 2
9357: PUSH
9358: LD_INT 3
9360: ARRAY
9361: PUSH
9362: LD_INT 333
9364: GREATER
9365: IFFALSE 9379
// SetLives ( vehicle , 333 ) ;
9367: LD_VAR 0 6
9371: PPUSH
9372: LD_INT 333
9374: PPUSH
9375: CALL_OW 234
// if i [ 4 ] > 20 then
9379: LD_VAR 0 2
9383: PUSH
9384: LD_INT 4
9386: ARRAY
9387: PUSH
9388: LD_INT 20
9390: GREATER
9391: IFFALSE 9407
// SetFuel ( vehicle , 20 ) else
9393: LD_VAR 0 6
9397: PPUSH
9398: LD_INT 20
9400: PPUSH
9401: CALL_OW 240
9405: GO 9425
// SetFuel ( vehicle , i [ 4 ] ) ;
9407: LD_VAR 0 6
9411: PPUSH
9412: LD_VAR 0 2
9416: PUSH
9417: LD_INT 4
9419: ARRAY
9420: PPUSH
9421: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9425: LD_VAR 0 6
9429: PPUSH
9430: LD_INT 250
9432: PPUSH
9433: LD_INT 119
9435: PPUSH
9436: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9440: LD_VAR 0 6
9444: PPUSH
9445: LD_INT 211
9447: PPUSH
9448: LD_INT 80
9450: PPUSH
9451: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9455: LD_INT 175
9457: PPUSH
9458: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9462: LD_INT 20
9464: PPUSH
9465: LD_INT 22
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 52
9477: PUSH
9478: EMPTY
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL_OW 70
9489: NOT
9490: IFFALSE 9455
// end ;
9492: GO 9106
9494: POP
9495: POP
// wait ( 0 0$10 ) ;
9496: LD_INT 350
9498: PPUSH
9499: CALL_OW 67
// GoForOil ;
9503: CALL 8579 0 0
// end ;
9507: LD_VAR 0 1
9511: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9512: LD_INT 22
9514: PPUSH
9515: LD_INT 21
9517: PUSH
9518: LD_INT 2
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 22
9527: PUSH
9528: LD_INT 5
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 58
9537: PUSH
9538: EMPTY
9539: LIST
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: PPUSH
9546: CALL_OW 70
9550: IFFALSE 9619
9552: GO 9554
9554: DISABLE
9555: LD_INT 0
9557: PPUSH
// begin enable ;
9558: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9559: LD_ADDR_VAR 0 1
9563: PUSH
9564: LD_INT 22
9566: PPUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 2
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 22
9579: PUSH
9580: LD_INT 5
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 58
9589: PUSH
9590: EMPTY
9591: LIST
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: PPUSH
9598: CALL_OW 70
9602: PUSH
9603: FOR_IN
9604: IFFALSE 9617
// KillUnit ( i ) ;
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 66
9615: GO 9603
9617: POP
9618: POP
// end ; end_of_file
9619: PPOPN 1
9621: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9622: LD_INT 0
9624: PPUSH
// uc_side := side ;
9625: LD_ADDR_OWVAR 20
9629: PUSH
9630: LD_VAR 0 1
9634: ST_TO_ADDR
// uc_nation := nation ;
9635: LD_ADDR_OWVAR 21
9639: PUSH
9640: LD_VAR 0 2
9644: ST_TO_ADDR
// vc_chassis := chassis ;
9645: LD_ADDR_OWVAR 37
9649: PUSH
9650: LD_VAR 0 3
9654: ST_TO_ADDR
// vc_engine := engine ;
9655: LD_ADDR_OWVAR 39
9659: PUSH
9660: LD_VAR 0 4
9664: ST_TO_ADDR
// vc_control := control ;
9665: LD_ADDR_OWVAR 38
9669: PUSH
9670: LD_VAR 0 5
9674: ST_TO_ADDR
// vc_weapon := weapon ;
9675: LD_ADDR_OWVAR 40
9679: PUSH
9680: LD_VAR 0 6
9684: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9685: LD_ADDR_OWVAR 41
9689: PUSH
9690: LD_VAR 0 7
9694: ST_TO_ADDR
// result := CreateVehicle ;
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: CALL_OW 45
9704: ST_TO_ADDR
// end ;
9705: LD_VAR 0 8
9709: RET
// export function SayX ( units , ident ) ; var i ; begin
9710: LD_INT 0
9712: PPUSH
9713: PPUSH
// result := false ;
9714: LD_ADDR_VAR 0 3
9718: PUSH
9719: LD_INT 0
9721: ST_TO_ADDR
// if not units then
9722: LD_VAR 0 1
9726: NOT
9727: IFFALSE 9731
// exit ;
9729: GO 9785
// for i in units do
9731: LD_ADDR_VAR 0 4
9735: PUSH
9736: LD_VAR 0 1
9740: PUSH
9741: FOR_IN
9742: IFFALSE 9783
// if IsOk ( i ) then
9744: LD_VAR 0 4
9748: PPUSH
9749: CALL_OW 302
9753: IFFALSE 9781
// begin Say ( i , ident ) ;
9755: LD_VAR 0 4
9759: PPUSH
9760: LD_VAR 0 2
9764: PPUSH
9765: CALL_OW 88
// result := i ;
9769: LD_ADDR_VAR 0 3
9773: PUSH
9774: LD_VAR 0 4
9778: ST_TO_ADDR
// break ;
9779: GO 9783
// end ;
9781: GO 9741
9783: POP
9784: POP
// end ;
9785: LD_VAR 0 3
9789: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
9790: LD_INT 0
9792: PPUSH
9793: PPUSH
// InitUc ;
9794: CALL_OW 18
// InitHc ;
9798: CALL_OW 19
// uc_side := 0 ;
9802: LD_ADDR_OWVAR 20
9806: PUSH
9807: LD_INT 0
9809: ST_TO_ADDR
// uc_nation := 0 ;
9810: LD_ADDR_OWVAR 21
9814: PUSH
9815: LD_INT 0
9817: ST_TO_ADDR
// for i = 1 to amount do
9818: LD_ADDR_VAR 0 4
9822: PUSH
9823: DOUBLE
9824: LD_INT 1
9826: DEC
9827: ST_TO_ADDR
9828: LD_VAR 0 2
9832: PUSH
9833: FOR_TO
9834: IFFALSE 9916
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
9836: LD_ADDR_OWVAR 29
9840: PUSH
9841: LD_INT 9
9843: PPUSH
9844: LD_INT 12
9846: PPUSH
9847: CALL_OW 12
9851: PUSH
9852: LD_INT 9
9854: PPUSH
9855: LD_INT 12
9857: PPUSH
9858: CALL_OW 12
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
9867: LD_ADDR_OWVAR 35
9871: PUSH
9872: LD_INT 1
9874: NEG
9875: PPUSH
9876: LD_INT 1
9878: PPUSH
9879: CALL_OW 12
9883: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9884: LD_INT 0
9886: PPUSH
9887: LD_INT 12
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
9897: CALL_OW 44
9901: PPUSH
9902: LD_VAR 0 1
9906: PPUSH
9907: LD_INT 0
9909: PPUSH
9910: CALL_OW 49
// end ;
9914: GO 9833
9916: POP
9917: POP
// InitHc ;
9918: CALL_OW 19
// end ;
9922: LD_VAR 0 3
9926: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
9927: LD_INT 0
9929: PPUSH
9930: PPUSH
// uc_side := 0 ;
9931: LD_ADDR_OWVAR 20
9935: PUSH
9936: LD_INT 0
9938: ST_TO_ADDR
// uc_nation := 0 ;
9939: LD_ADDR_OWVAR 21
9943: PUSH
9944: LD_INT 0
9946: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
9947: LD_INT 7
9949: PPUSH
9950: LD_INT 6
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: LD_INT 4
9958: PUSH
9959: LD_INT 3
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: PUSH
9968: LD_OWVAR 67
9972: ARRAY
9973: PPUSH
9974: CALL 9790 0 2
// for i = 1 to 2 do
9978: LD_ADDR_VAR 0 4
9982: PUSH
9983: DOUBLE
9984: LD_INT 1
9986: DEC
9987: ST_TO_ADDR
9988: LD_INT 2
9990: PUSH
9991: FOR_TO
9992: IFFALSE 10029
// begin vc_chassis := class_mastodont ;
9994: LD_ADDR_OWVAR 37
9998: PUSH
9999: LD_INT 31
10001: ST_TO_ADDR
// vc_control := control_rider ;
10002: LD_ADDR_OWVAR 38
10006: PUSH
10007: LD_INT 4
10009: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10010: CALL_OW 45
10014: PPUSH
10015: LD_VAR 0 1
10019: PPUSH
10020: LD_INT 0
10022: PPUSH
10023: CALL 65390 0 3
// end ;
10027: GO 9991
10029: POP
10030: POP
// InitHc ;
10031: CALL_OW 19
// for i := 1 to 4 do
10035: LD_ADDR_VAR 0 4
10039: PUSH
10040: DOUBLE
10041: LD_INT 1
10043: DEC
10044: ST_TO_ADDR
10045: LD_INT 4
10047: PUSH
10048: FOR_TO
10049: IFFALSE 10086
// begin hc_class := class_horse ;
10051: LD_ADDR_OWVAR 28
10055: PUSH
10056: LD_INT 21
10058: ST_TO_ADDR
// hc_gallery :=  ;
10059: LD_ADDR_OWVAR 33
10063: PUSH
10064: LD_STRING 
10066: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10067: CALL_OW 44
10071: PPUSH
10072: LD_VAR 0 1
10076: PPUSH
10077: LD_INT 0
10079: PPUSH
10080: CALL_OW 49
// end ;
10084: GO 10048
10086: POP
10087: POP
// InitHc ;
10088: CALL_OW 19
// for i = 1 to 5 do
10092: LD_ADDR_VAR 0 4
10096: PUSH
10097: DOUBLE
10098: LD_INT 1
10100: DEC
10101: ST_TO_ADDR
10102: LD_INT 5
10104: PUSH
10105: FOR_TO
10106: IFFALSE 10160
// begin hc_class = class_tiger ;
10108: LD_ADDR_OWVAR 28
10112: PUSH
10113: LD_INT 14
10115: ST_TO_ADDR
// hc_gallery =  ;
10116: LD_ADDR_OWVAR 33
10120: PUSH
10121: LD_STRING 
10123: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10124: LD_ADDR_OWVAR 35
10128: PUSH
10129: LD_INT 7
10131: NEG
10132: PPUSH
10133: LD_INT 7
10135: PPUSH
10136: CALL_OW 12
10140: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10141: CALL_OW 44
10145: PPUSH
10146: LD_VAR 0 1
10150: PPUSH
10151: LD_INT 0
10153: PPUSH
10154: CALL 65390 0 3
// end ;
10158: GO 10105
10160: POP
10161: POP
// InitHc ;
10162: CALL_OW 19
// for i := 1 to 4 do
10166: LD_ADDR_VAR 0 4
10170: PUSH
10171: DOUBLE
10172: LD_INT 1
10174: DEC
10175: ST_TO_ADDR
10176: LD_INT 4
10178: PUSH
10179: FOR_TO
10180: IFFALSE 10217
// begin hc_class := class_phororhacos ;
10182: LD_ADDR_OWVAR 28
10186: PUSH
10187: LD_INT 18
10189: ST_TO_ADDR
// hc_gallery :=  ;
10190: LD_ADDR_OWVAR 33
10194: PUSH
10195: LD_STRING 
10197: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10198: CALL_OW 44
10202: PPUSH
10203: LD_VAR 0 1
10207: PPUSH
10208: LD_INT 0
10210: PPUSH
10211: CALL_OW 49
// end ;
10215: GO 10179
10217: POP
10218: POP
// InitHc ;
10219: CALL_OW 19
// for i := 1 to 4 do
10223: LD_ADDR_VAR 0 4
10227: PUSH
10228: DOUBLE
10229: LD_INT 1
10231: DEC
10232: ST_TO_ADDR
10233: LD_INT 4
10235: PUSH
10236: FOR_TO
10237: IFFALSE 10274
// begin hc_class := class_baggie ;
10239: LD_ADDR_OWVAR 28
10243: PUSH
10244: LD_INT 13
10246: ST_TO_ADDR
// hc_gallery :=  ;
10247: LD_ADDR_OWVAR 33
10251: PUSH
10252: LD_STRING 
10254: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10255: CALL_OW 44
10259: PPUSH
10260: LD_VAR 0 1
10264: PPUSH
10265: LD_INT 0
10267: PPUSH
10268: CALL_OW 49
// end ;
10272: GO 10236
10274: POP
10275: POP
// InitHc ;
10276: CALL_OW 19
// for i := 1 to 7 do
10280: LD_ADDR_VAR 0 4
10284: PUSH
10285: DOUBLE
10286: LD_INT 1
10288: DEC
10289: ST_TO_ADDR
10290: LD_INT 7
10292: PUSH
10293: FOR_TO
10294: IFFALSE 10331
// begin hc_class := class_frog ;
10296: LD_ADDR_OWVAR 28
10300: PUSH
10301: LD_INT 19
10303: ST_TO_ADDR
// hc_gallery :=  ;
10304: LD_ADDR_OWVAR 33
10308: PUSH
10309: LD_STRING 
10311: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10312: CALL_OW 44
10316: PPUSH
10317: LD_VAR 0 2
10321: PPUSH
10322: LD_INT 0
10324: PPUSH
10325: CALL_OW 49
// end ;
10329: GO 10293
10331: POP
10332: POP
// end ;
10333: LD_VAR 0 3
10337: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10338: LD_INT 0
10340: PPUSH
10341: PPUSH
10342: PPUSH
// if not observer or not unit then
10343: LD_VAR 0 1
10347: NOT
10348: PUSH
10349: LD_VAR 0 2
10353: NOT
10354: OR
10355: IFFALSE 10359
// exit ;
10357: GO 10407
// if not See ( GetSide ( observer ) , unit ) then
10359: LD_VAR 0 1
10363: PPUSH
10364: CALL_OW 255
10368: PPUSH
10369: LD_VAR 0 2
10373: PPUSH
10374: CALL_OW 292
10378: NOT
10379: IFFALSE 10383
// exit ;
10381: GO 10407
// result := GetDistUnits ( observer , unit ) < 12 ;
10383: LD_ADDR_VAR 0 3
10387: PUSH
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_VAR 0 2
10397: PPUSH
10398: CALL_OW 296
10402: PUSH
10403: LD_INT 12
10405: LESS
10406: ST_TO_ADDR
// end ;
10407: LD_VAR 0 3
10411: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10412: LD_INT 0
10414: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10415: LD_VAR 0 2
10419: PUSH
10420: LD_INT 1
10422: ARRAY
10423: PPUSH
10424: LD_VAR 0 2
10428: PUSH
10429: LD_INT 2
10431: ARRAY
10432: PPUSH
10433: CALL_OW 488
10437: PUSH
10438: LD_VAR 0 2
10442: PUSH
10443: LD_INT 1
10445: ARRAY
10446: PPUSH
10447: LD_VAR 0 2
10451: PUSH
10452: LD_INT 2
10454: ARRAY
10455: PPUSH
10456: CALL_OW 428
10460: PUSH
10461: LD_INT 0
10463: EQUAL
10464: AND
10465: IFFALSE 10499
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_VAR 0 2
10476: PUSH
10477: LD_INT 1
10479: ARRAY
10480: PPUSH
10481: LD_VAR 0 2
10485: PUSH
10486: LD_INT 2
10488: ARRAY
10489: PPUSH
10490: LD_VAR 0 3
10494: PPUSH
10495: CALL_OW 48
// end ;
10499: LD_VAR 0 4
10503: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10504: LD_INT 0
10506: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10507: LD_VAR 0 1
10511: PPUSH
10512: LD_VAR 0 2
10516: PPUSH
10517: LD_VAR 0 3
10521: PPUSH
10522: LD_VAR 0 4
10526: PPUSH
10527: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10531: LD_VAR 0 1
10535: PPUSH
10536: LD_VAR 0 2
10540: PPUSH
10541: LD_VAR 0 3
10545: PPUSH
10546: CALL_OW 331
// end ;
10550: LD_VAR 0 5
10554: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10555: LD_INT 0
10557: PPUSH
// if not units then
10558: LD_VAR 0 1
10562: NOT
10563: IFFALSE 10567
// exit ;
10565: GO 10650
// result := true ;
10567: LD_ADDR_VAR 0 4
10571: PUSH
10572: LD_INT 1
10574: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10575: LD_VAR 0 1
10579: PPUSH
10580: LD_INT 26
10582: PUSH
10583: LD_INT 1
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 72
10594: PUSH
10595: LD_INT 1
10597: ARRAY
10598: PPUSH
10599: LD_VAR 0 2
10603: PPUSH
10604: CALL_OW 88
10608: NOT
10609: IFFALSE 10650
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10611: LD_ADDR_VAR 0 4
10615: PUSH
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_INT 26
10623: PUSH
10624: LD_INT 2
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 72
10635: PUSH
10636: LD_INT 1
10638: ARRAY
10639: PPUSH
10640: LD_VAR 0 3
10644: PPUSH
10645: CALL_OW 88
10649: ST_TO_ADDR
// end ;
10650: LD_VAR 0 4
10654: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10655: LD_INT 0
10657: PPUSH
10658: PPUSH
// if not group then
10659: LD_VAR 0 2
10663: NOT
10664: IFFALSE 10668
// exit ;
10666: GO 10713
// for i in group do
10668: LD_ADDR_VAR 0 4
10672: PUSH
10673: LD_VAR 0 2
10677: PUSH
10678: FOR_IN
10679: IFFALSE 10711
// if See ( side , i ) then
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_VAR 0 4
10690: PPUSH
10691: CALL_OW 292
10695: IFFALSE 10709
// begin result := true ;
10697: LD_ADDR_VAR 0 3
10701: PUSH
10702: LD_INT 1
10704: ST_TO_ADDR
// exit ;
10705: POP
10706: POP
10707: GO 10713
// end ;
10709: GO 10678
10711: POP
10712: POP
// end ; end_of_file
10713: LD_VAR 0 3
10717: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
10718: LD_INT 0
10720: PPUSH
10721: PPUSH
10722: PPUSH
10723: PPUSH
10724: PPUSH
10725: PPUSH
10726: PPUSH
// uc_side := 3 ;
10727: LD_ADDR_OWVAR 20
10731: PUSH
10732: LD_INT 3
10734: ST_TO_ADDR
// uc_nation := 3 ;
10735: LD_ADDR_OWVAR 21
10739: PUSH
10740: LD_INT 3
10742: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
10743: LD_ADDR_EXP 52
10747: PUSH
10748: LD_STRING Morozov
10750: PPUSH
10751: CALL_OW 25
10755: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
10756: LD_EXP 52
10760: PPUSH
10761: LD_INT 52
10763: PPUSH
10764: CALL_OW 52
// if not gaidarKilled then
10768: LD_EXP 7
10772: NOT
10773: IFFALSE 10806
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
10775: LD_ADDR_EXP 53
10779: PUSH
10780: LD_STRING Gaydar
10782: PPUSH
10783: LD_INT 0
10785: PPUSH
10786: LD_STRING 
10788: PPUSH
10789: CALL 29005 0 3
10793: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
10794: LD_EXP 53
10798: PPUSH
10799: LD_INT 52
10801: PPUSH
10802: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
10806: LD_INT 52
10808: PPUSH
10809: LD_STRING lenin
10811: PPUSH
10812: CALL_OW 500
// ruOutsiders := [ ] ;
10816: LD_ADDR_EXP 55
10820: PUSH
10821: EMPTY
10822: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
10823: LD_ADDR_EXP 57
10827: PUSH
10828: EMPTY
10829: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
10830: LD_ADDR_EXP 58
10834: PUSH
10835: EMPTY
10836: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
10837: LD_ADDR_EXP 59
10841: PUSH
10842: EMPTY
10843: ST_TO_ADDR
// ruAttackers := [ ] ;
10844: LD_ADDR_EXP 60
10848: PUSH
10849: EMPTY
10850: ST_TO_ADDR
// waveStrength := 0 ;
10851: LD_ADDR_EXP 61
10855: PUSH
10856: LD_INT 0
10858: ST_TO_ADDR
// if not gaidarKilled then
10859: LD_EXP 7
10863: NOT
10864: IFFALSE 10874
// waveStrength := 2 ;
10866: LD_ADDR_EXP 61
10870: PUSH
10871: LD_INT 2
10873: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
10874: LD_ADDR_VAR 0 7
10878: PUSH
10879: LD_INT 22
10881: PUSH
10882: LD_INT 3
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 21
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 69
10907: ST_TO_ADDR
// for i in tmp do
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_VAR 0 7
10917: PUSH
10918: FOR_IN
10919: IFFALSE 10956
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
10921: LD_VAR 0 2
10925: PPUSH
10926: LD_INT 5
10928: PUSH
10929: LD_INT 6
10931: PUSH
10932: LD_INT 7
10934: PUSH
10935: LD_INT 8
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: PUSH
10944: LD_OWVAR 67
10948: ARRAY
10949: PPUSH
10950: CALL_OW 241
10954: GO 10918
10956: POP
10957: POP
// for i := 1 to 3 do
10958: LD_ADDR_VAR 0 2
10962: PUSH
10963: DOUBLE
10964: LD_INT 1
10966: DEC
10967: ST_TO_ADDR
10968: LD_INT 3
10970: PUSH
10971: FOR_TO
10972: IFFALSE 11010
// begin PrepareHuman ( false , 1 , 0 ) ;
10974: LD_INT 0
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: LD_INT 0
10982: PPUSH
10983: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
10987: CALL_OW 44
10991: PPUSH
10992: LD_INT 75
10994: PPUSH
10995: LD_INT 49
10997: PPUSH
10998: LD_INT 3
11000: PPUSH
11001: LD_INT 0
11003: PPUSH
11004: CALL_OW 50
// end ;
11008: GO 10971
11010: POP
11011: POP
// for i := 1 to 4 do
11012: LD_ADDR_VAR 0 2
11016: PUSH
11017: DOUBLE
11018: LD_INT 1
11020: DEC
11021: ST_TO_ADDR
11022: LD_INT 4
11024: PUSH
11025: FOR_TO
11026: IFFALSE 11072
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11028: LD_INT 0
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: LD_INT 2
11036: PPUSH
11037: CALL_OW 12
11041: PPUSH
11042: LD_INT 0
11044: PPUSH
11045: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11049: CALL_OW 44
11053: PPUSH
11054: LD_INT 330
11056: PPUSH
11057: LD_INT 231
11059: PPUSH
11060: LD_INT 5
11062: PPUSH
11063: LD_INT 0
11065: PPUSH
11066: CALL_OW 50
// end ;
11070: GO 11025
11072: POP
11073: POP
// hc_class := 1 ;
11074: LD_ADDR_OWVAR 28
11078: PUSH
11079: LD_INT 1
11081: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11082: CALL_OW 44
11086: PPUSH
11087: LD_INT 324
11089: PPUSH
11090: LD_INT 219
11092: PPUSH
11093: CALL_OW 428
11097: PPUSH
11098: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11102: CALL_OW 44
11106: PPUSH
11107: LD_INT 316
11109: PPUSH
11110: LD_INT 223
11112: PPUSH
11113: CALL_OW 428
11117: PPUSH
11118: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11122: LD_ADDR_VAR 0 7
11126: PUSH
11127: LD_INT 172
11129: PPUSH
11130: LD_INT 198
11132: PPUSH
11133: CALL_OW 428
11137: PPUSH
11138: CALL_OW 274
11142: PUSH
11143: LD_INT 189
11145: PPUSH
11146: LD_INT 156
11148: PPUSH
11149: CALL_OW 428
11153: PPUSH
11154: CALL_OW 274
11158: PUSH
11159: LD_INT 341
11161: PPUSH
11162: LD_INT 232
11164: PPUSH
11165: CALL_OW 428
11169: PPUSH
11170: CALL_OW 274
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: LIST
11179: ST_TO_ADDR
// for i in tmp do
11180: LD_ADDR_VAR 0 2
11184: PUSH
11185: LD_VAR 0 7
11189: PUSH
11190: FOR_IN
11191: IFFALSE 11225
// begin SetResourceType ( i , mat_cans , 200 ) ;
11193: LD_VAR 0 2
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: LD_INT 200
11203: PPUSH
11204: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11208: LD_VAR 0 2
11212: PPUSH
11213: LD_INT 2
11215: PPUSH
11216: LD_INT 300
11218: PPUSH
11219: CALL_OW 277
// end ;
11223: GO 11190
11225: POP
11226: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11227: LD_ADDR_VAR 0 7
11231: PUSH
11232: LD_INT 177
11234: PUSH
11235: LD_INT 114
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 138
11244: PUSH
11245: LD_INT 96
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: ST_TO_ADDR
// for i := 1 to tmp do
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: DOUBLE
11262: LD_INT 1
11264: DEC
11265: ST_TO_ADDR
11266: LD_VAR 0 7
11270: PUSH
11271: FOR_TO
11272: IFFALSE 11355
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11274: LD_INT 0
11276: PPUSH
11277: LD_INT 9
11279: PPUSH
11280: LD_INT 6
11282: PPUSH
11283: CALL_OW 380
// un := CreateHuman ;
11287: LD_ADDR_VAR 0 5
11291: PUSH
11292: CALL_OW 44
11296: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11297: LD_VAR 0 5
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11309: LD_VAR 0 5
11313: PPUSH
11314: LD_VAR 0 7
11318: PUSH
11319: LD_VAR 0 2
11323: ARRAY
11324: PUSH
11325: LD_INT 1
11327: ARRAY
11328: PPUSH
11329: LD_VAR 0 7
11333: PUSH
11334: LD_VAR 0 2
11338: ARRAY
11339: PUSH
11340: LD_INT 2
11342: ARRAY
11343: PPUSH
11344: CALL_OW 428
11348: PPUSH
11349: CALL_OW 52
// end ;
11353: GO 11271
11355: POP
11356: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11357: LD_ADDR_VAR 0 7
11361: PUSH
11362: LD_INT 198
11364: PUSH
11365: LD_INT 158
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 203
11374: PUSH
11375: LD_INT 166
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 181
11384: PUSH
11385: LD_INT 209
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 178
11394: PUSH
11395: LD_INT 196
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 181
11404: PUSH
11405: LD_INT 212
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: ST_TO_ADDR
// for i := 1 to tmp do
11419: LD_ADDR_VAR 0 2
11423: PUSH
11424: DOUBLE
11425: LD_INT 1
11427: DEC
11428: ST_TO_ADDR
11429: LD_VAR 0 7
11433: PUSH
11434: FOR_TO
11435: IFFALSE 11556
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11437: LD_INT 0
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: LD_INT 4
11445: PUSH
11446: LD_INT 5
11448: PUSH
11449: LD_INT 6
11451: PUSH
11452: LD_INT 7
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: PUSH
11461: LD_OWVAR 67
11465: ARRAY
11466: PPUSH
11467: CALL_OW 380
// un := CreateHuman ;
11471: LD_ADDR_VAR 0 5
11475: PUSH
11476: CALL_OW 44
11480: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11481: LD_ADDR_VAR 0 4
11485: PUSH
11486: LD_VAR 0 7
11490: PUSH
11491: LD_VAR 0 2
11495: ARRAY
11496: PUSH
11497: LD_INT 1
11499: ARRAY
11500: PPUSH
11501: LD_VAR 0 7
11505: PUSH
11506: LD_VAR 0 2
11510: ARRAY
11511: PUSH
11512: LD_INT 2
11514: ARRAY
11515: PPUSH
11516: CALL_OW 428
11520: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11521: LD_VAR 0 5
11525: PPUSH
11526: LD_VAR 0 4
11530: PPUSH
11531: CALL 61721 0 1
11535: PPUSH
11536: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11540: LD_VAR 0 5
11544: PPUSH
11545: LD_VAR 0 4
11549: PPUSH
11550: CALL_OW 52
// end ;
11554: GO 11434
11556: POP
11557: POP
// for i := 1 to 3 do
11558: LD_ADDR_VAR 0 2
11562: PUSH
11563: DOUBLE
11564: LD_INT 1
11566: DEC
11567: ST_TO_ADDR
11568: LD_INT 3
11570: PUSH
11571: FOR_TO
11572: IFFALSE 11627
// begin InitHc ;
11574: CALL_OW 19
// uc_nation := 0 ;
11578: LD_ADDR_OWVAR 21
11582: PUSH
11583: LD_INT 0
11585: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11586: LD_ADDR_OWVAR 28
11590: PUSH
11591: LD_INT 16
11593: ST_TO_ADDR
// un := CreateHuman ;
11594: LD_ADDR_VAR 0 5
11598: PUSH
11599: CALL_OW 44
11603: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11604: LD_VAR 0 5
11608: PPUSH
11609: LD_INT 194
11611: PPUSH
11612: LD_INT 164
11614: PPUSH
11615: LD_INT 6
11617: PPUSH
11618: LD_INT 0
11620: PPUSH
11621: CALL_OW 50
// end ;
11625: GO 11571
11627: POP
11628: POP
// uc_nation := 3 ;
11629: LD_ADDR_OWVAR 21
11633: PUSH
11634: LD_INT 3
11636: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11637: LD_INT 24
11639: PPUSH
11640: LD_INT 1
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: LD_INT 44
11648: PPUSH
11649: LD_INT 10
11651: PPUSH
11652: CALL 34020 0 5
// un := CreateVehicle ;
11656: LD_ADDR_VAR 0 5
11660: PUSH
11661: CALL_OW 45
11665: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11666: LD_VAR 0 5
11670: PPUSH
11671: LD_INT 199
11673: PPUSH
11674: LD_INT 166
11676: PPUSH
11677: LD_INT 1
11679: PPUSH
11680: LD_INT 0
11682: PPUSH
11683: CALL 68613 0 5
// ComHold ( un ) ;
11687: LD_VAR 0 5
11691: PPUSH
11692: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
11696: LD_INT 0
11698: PPUSH
11699: LD_INT 3
11701: PPUSH
11702: LD_INT 4
11704: PPUSH
11705: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11709: CALL_OW 44
11713: PPUSH
11714: LD_VAR 0 5
11718: PPUSH
11719: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
11723: LD_INT 24
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: LD_INT 1
11731: PPUSH
11732: LD_INT 45
11734: PPUSH
11735: LD_INT 10
11737: PPUSH
11738: CALL 34020 0 5
// un := CreateVehicle ;
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: CALL_OW 45
11751: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
11752: LD_VAR 0 5
11756: PPUSH
11757: LD_INT 129
11759: PPUSH
11760: LD_INT 93
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: LD_INT 0
11768: PPUSH
11769: CALL 68613 0 5
// ComHold ( un ) ;
11773: LD_VAR 0 5
11777: PPUSH
11778: CALL_OW 140
// if Difficulty > 1 then
11782: LD_OWVAR 67
11786: PUSH
11787: LD_INT 1
11789: GREATER
11790: IFFALSE 11878
// begin PrepareHuman ( false , 3 , 4 ) ;
11792: LD_INT 0
11794: PPUSH
11795: LD_INT 3
11797: PPUSH
11798: LD_INT 4
11800: PPUSH
11801: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11805: CALL_OW 44
11809: PPUSH
11810: LD_VAR 0 5
11814: PPUSH
11815: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
11819: LD_INT 24
11821: PPUSH
11822: LD_INT 1
11824: PPUSH
11825: LD_INT 1
11827: PPUSH
11828: LD_INT 45
11830: PPUSH
11831: LD_INT 10
11833: PPUSH
11834: CALL 34020 0 5
// un := CreateVehicle ;
11838: LD_ADDR_VAR 0 5
11842: PUSH
11843: CALL_OW 45
11847: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
11848: LD_VAR 0 5
11852: PPUSH
11853: LD_INT 200
11855: PPUSH
11856: LD_INT 173
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: LD_INT 0
11864: PPUSH
11865: CALL 68613 0 5
// ComHold ( un ) ;
11869: LD_VAR 0 5
11873: PPUSH
11874: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
11878: LD_INT 0
11880: PPUSH
11881: LD_INT 3
11883: PPUSH
11884: LD_INT 4
11886: PPUSH
11887: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11891: CALL_OW 44
11895: PPUSH
11896: LD_VAR 0 5
11900: PPUSH
11901: CALL_OW 52
// bc_type := b_armoury ;
11905: LD_ADDR_OWVAR 42
11909: PUSH
11910: LD_INT 4
11912: ST_TO_ADDR
// if Difficulty > 1 then
11913: LD_OWVAR 67
11917: PUSH
11918: LD_INT 1
11920: GREATER
11921: IFFALSE 11931
// bc_type := b_barracks ;
11923: LD_ADDR_OWVAR 42
11927: PUSH
11928: LD_INT 5
11930: ST_TO_ADDR
// bc_level := 6 ;
11931: LD_ADDR_OWVAR 43
11935: PUSH
11936: LD_INT 6
11938: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
11939: LD_INT 120
11941: PPUSH
11942: LD_INT 100
11944: PPUSH
11945: LD_INT 5
11947: PPUSH
11948: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
11952: LD_ADDR_VAR 0 2
11956: PUSH
11957: DOUBLE
11958: LD_INT 1
11960: DEC
11961: ST_TO_ADDR
11962: LD_INT 3
11964: PUSH
11965: LD_INT 3
11967: PUSH
11968: LD_INT 4
11970: PUSH
11971: LD_INT 4
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: PUSH
11980: LD_OWVAR 67
11984: ARRAY
11985: PUSH
11986: FOR_TO
11987: IFFALSE 12045
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
11989: LD_INT 0
11991: PPUSH
11992: LD_INT 1
11994: PUSH
11995: LD_INT 1
11997: PUSH
11998: LD_INT 9
12000: PUSH
12001: LD_INT 9
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: PUSH
12010: LD_OWVAR 67
12014: ARRAY
12015: PPUSH
12016: LD_INT 5
12018: PPUSH
12019: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12023: CALL_OW 44
12027: PPUSH
12028: LD_INT 120
12030: PPUSH
12031: LD_INT 100
12033: PPUSH
12034: CALL_OW 428
12038: PPUSH
12039: CALL_OW 52
// end ;
12043: GO 11986
12045: POP
12046: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12047: LD_ADDR_VAR 0 7
12051: PUSH
12052: LD_INT 135
12054: PUSH
12055: LD_INT 100
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 137
12064: PUSH
12065: LD_INT 92
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: ST_TO_ADDR
// for i := 1 to tmp do
12076: LD_ADDR_VAR 0 2
12080: PUSH
12081: DOUBLE
12082: LD_INT 1
12084: DEC
12085: ST_TO_ADDR
12086: LD_VAR 0 7
12090: PUSH
12091: FOR_TO
12092: IFFALSE 12262
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12094: LD_INT 22
12096: PUSH
12097: LD_INT 22
12099: PUSH
12100: LD_INT 24
12102: PUSH
12103: LD_INT 24
12105: PUSH
12106: LD_INT 24
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: LD_OWVAR 67
12120: PUSH
12121: LD_INT 0
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 12
12131: PLUS
12132: ARRAY
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: LD_INT 1
12139: PPUSH
12140: LD_INT 44
12142: PPUSH
12143: LD_INT 25
12145: PPUSH
12146: CALL 34020 0 5
// veh := CreateVehicle ;
12150: LD_ADDR_VAR 0 6
12154: PUSH
12155: CALL_OW 45
12159: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12160: LD_VAR 0 6
12164: PPUSH
12165: LD_INT 2
12167: PPUSH
12168: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12172: LD_VAR 0 6
12176: PPUSH
12177: LD_VAR 0 7
12181: PUSH
12182: LD_VAR 0 2
12186: ARRAY
12187: PUSH
12188: LD_INT 1
12190: ARRAY
12191: PPUSH
12192: LD_VAR 0 7
12196: PUSH
12197: LD_VAR 0 2
12201: ARRAY
12202: PUSH
12203: LD_INT 2
12205: ARRAY
12206: PPUSH
12207: LD_INT 0
12209: PPUSH
12210: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12214: LD_INT 0
12216: PPUSH
12217: LD_INT 3
12219: PPUSH
12220: LD_INT 6
12222: PPUSH
12223: CALL_OW 380
// un := CreateHuman ;
12227: LD_ADDR_VAR 0 5
12231: PUSH
12232: CALL_OW 44
12236: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12237: LD_VAR 0 5
12241: PPUSH
12242: LD_VAR 0 6
12246: PPUSH
12247: CALL_OW 52
// ComHold ( veh ) ;
12251: LD_VAR 0 6
12255: PPUSH
12256: CALL_OW 140
// end ;
12260: GO 12091
12262: POP
12263: POP
// tmp := [ 191 , 122 ] ;
12264: LD_ADDR_VAR 0 7
12268: PUSH
12269: LD_INT 191
12271: PUSH
12272: LD_INT 122
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12279: LD_INT 24
12281: PPUSH
12282: LD_INT 1
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: LD_INT 44
12290: PPUSH
12291: LD_INT 30
12293: PPUSH
12294: CALL 34020 0 5
// ruBlockadeTank := CreateVehicle ;
12298: LD_ADDR_EXP 54
12302: PUSH
12303: CALL_OW 45
12307: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12308: LD_EXP 54
12312: PPUSH
12313: LD_INT 2
12315: PPUSH
12316: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12320: LD_EXP 54
12324: PPUSH
12325: LD_INT 191
12327: PPUSH
12328: LD_INT 122
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12338: LD_INT 1
12340: PPUSH
12341: LD_INT 5
12343: PUSH
12344: LD_INT 6
12346: PUSH
12347: LD_INT 7
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: PUSH
12355: LD_OWVAR 67
12359: PUSH
12360: LD_INT 1
12362: MINUS
12363: ARRAY
12364: PPUSH
12365: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12369: CALL_OW 44
12373: PPUSH
12374: LD_EXP 54
12378: PPUSH
12379: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12383: LD_EXP 54
12387: PPUSH
12388: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12392: LD_ADDR_EXP 56
12396: PUSH
12397: EMPTY
12398: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12399: LD_ADDR_VAR 0 2
12403: PUSH
12404: DOUBLE
12405: LD_INT 1
12407: DEC
12408: ST_TO_ADDR
12409: LD_INT 2
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: LD_INT 3
12417: PUSH
12418: LD_INT 3
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: PUSH
12427: LD_OWVAR 67
12431: ARRAY
12432: PUSH
12433: FOR_TO
12434: IFFALSE 12550
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12436: LD_INT 0
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: LD_INT 4
12444: PUSH
12445: LD_INT 5
12447: PUSH
12448: LD_INT 6
12450: PUSH
12451: LD_INT 7
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: PUSH
12460: LD_OWVAR 67
12464: ARRAY
12465: PPUSH
12466: CALL_OW 380
// un := CreateHuman ;
12470: LD_ADDR_VAR 0 5
12474: PUSH
12475: CALL_OW 44
12479: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12480: LD_VAR 0 5
12484: PPUSH
12485: LD_INT 9
12487: PPUSH
12488: LD_INT 0
12490: PPUSH
12491: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12495: LD_VAR 0 5
12499: PPUSH
12500: LD_INT 198
12502: PPUSH
12503: LD_INT 129
12505: PPUSH
12506: CALL_OW 118
// AddComCrawl ( un ) ;
12510: LD_VAR 0 5
12514: PPUSH
12515: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12519: LD_ADDR_EXP 56
12523: PUSH
12524: LD_EXP 56
12528: PPUSH
12529: LD_EXP 56
12533: PUSH
12534: LD_INT 1
12536: PLUS
12537: PPUSH
12538: LD_VAR 0 5
12542: PPUSH
12543: CALL_OW 1
12547: ST_TO_ADDR
// end ;
12548: GO 12433
12550: POP
12551: POP
// PrepareHuman ( false , 4 , 5 ) ;
12552: LD_INT 0
12554: PPUSH
12555: LD_INT 4
12557: PPUSH
12558: LD_INT 5
12560: PPUSH
12561: CALL_OW 380
// un := CreateHuman ;
12565: LD_ADDR_VAR 0 5
12569: PUSH
12570: CALL_OW 44
12574: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12575: LD_VAR 0 5
12579: PPUSH
12580: LD_INT 179
12582: PPUSH
12583: LD_INT 113
12585: PPUSH
12586: LD_INT 0
12588: PPUSH
12589: CALL_OW 48
// ComHold ( un ) ;
12593: LD_VAR 0 5
12597: PPUSH
12598: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12602: LD_ADDR_EXP 56
12606: PUSH
12607: LD_EXP 56
12611: PPUSH
12612: LD_EXP 56
12616: PUSH
12617: LD_INT 1
12619: PLUS
12620: PPUSH
12621: LD_VAR 0 5
12625: PPUSH
12626: CALL_OW 1
12630: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12631: LD_ADDR_VAR 0 7
12635: PUSH
12636: LD_INT 167
12638: PPUSH
12639: LD_INT 243
12641: PPUSH
12642: CALL_OW 428
12646: PPUSH
12647: CALL_OW 274
12651: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12652: LD_VAR 0 7
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: LD_INT 1000
12662: PPUSH
12663: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12667: LD_VAR 0 7
12671: PPUSH
12672: LD_INT 2
12674: PPUSH
12675: LD_INT 400
12677: PPUSH
12678: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
12682: LD_ADDR_VAR 0 7
12686: PUSH
12687: LD_INT 169
12689: PPUSH
12690: LD_INT 229
12692: PPUSH
12693: CALL_OW 428
12697: ST_TO_ADDR
// for i := 1 to 3 do
12698: LD_ADDR_VAR 0 2
12702: PUSH
12703: DOUBLE
12704: LD_INT 1
12706: DEC
12707: ST_TO_ADDR
12708: LD_INT 3
12710: PUSH
12711: FOR_TO
12712: IFFALSE 12803
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12714: LD_INT 0
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: LD_INT 4
12722: PUSH
12723: LD_INT 5
12725: PUSH
12726: LD_INT 5
12728: PUSH
12729: LD_INT 6
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: PUSH
12738: LD_OWVAR 67
12742: ARRAY
12743: PPUSH
12744: CALL_OW 380
// un := CreateHuman ;
12748: LD_ADDR_VAR 0 5
12752: PUSH
12753: CALL_OW 44
12757: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
12758: LD_VAR 0 5
12762: PPUSH
12763: LD_VAR 0 7
12767: PPUSH
12768: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
12772: LD_ADDR_EXP 57
12776: PUSH
12777: LD_EXP 57
12781: PPUSH
12782: LD_EXP 57
12786: PUSH
12787: LD_INT 1
12789: PLUS
12790: PPUSH
12791: LD_VAR 0 5
12795: PPUSH
12796: CALL_OW 1
12800: ST_TO_ADDR
// end ;
12801: GO 12711
12803: POP
12804: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
12805: LD_ADDR_VAR 0 7
12809: PUSH
12810: LD_INT 165
12812: PUSH
12813: LD_INT 227
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 173
12822: PUSH
12823: LD_INT 231
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: ST_TO_ADDR
// for i := 1 to tmp do
12834: LD_ADDR_VAR 0 2
12838: PUSH
12839: DOUBLE
12840: LD_INT 1
12842: DEC
12843: ST_TO_ADDR
12844: LD_VAR 0 7
12848: PUSH
12849: FOR_TO
12850: IFFALSE 12971
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12852: LD_INT 0
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: LD_INT 4
12860: PUSH
12861: LD_INT 5
12863: PUSH
12864: LD_INT 5
12866: PUSH
12867: LD_INT 6
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: LD_OWVAR 67
12880: ARRAY
12881: PPUSH
12882: CALL_OW 380
// un := CreateHuman ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: CALL_OW 44
12895: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
12896: LD_VAR 0 5
12900: PPUSH
12901: LD_VAR 0 7
12905: PUSH
12906: LD_VAR 0 2
12910: ARRAY
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: LD_VAR 0 7
12920: PUSH
12921: LD_VAR 0 2
12925: ARRAY
12926: PUSH
12927: LD_INT 2
12929: ARRAY
12930: PPUSH
12931: CALL_OW 428
12935: PPUSH
12936: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
12940: LD_ADDR_EXP 57
12944: PUSH
12945: LD_EXP 57
12949: PPUSH
12950: LD_EXP 57
12954: PUSH
12955: LD_INT 1
12957: PLUS
12958: PPUSH
12959: LD_VAR 0 5
12963: PPUSH
12964: CALL_OW 1
12968: ST_TO_ADDR
// end ;
12969: GO 12849
12971: POP
12972: POP
// for i := 1 to 2 do
12973: LD_ADDR_VAR 0 2
12977: PUSH
12978: DOUBLE
12979: LD_INT 1
12981: DEC
12982: ST_TO_ADDR
12983: LD_INT 2
12985: PUSH
12986: FOR_TO
12987: IFFALSE 13042
// begin InitHc ;
12989: CALL_OW 19
// uc_nation := 0 ;
12993: LD_ADDR_OWVAR 21
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13001: LD_ADDR_OWVAR 28
13005: PUSH
13006: LD_INT 16
13008: ST_TO_ADDR
// un := CreateHuman ;
13009: LD_ADDR_VAR 0 5
13013: PUSH
13014: CALL_OW 44
13018: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13019: LD_VAR 0 5
13023: PPUSH
13024: LD_INT 166
13026: PPUSH
13027: LD_INT 233
13029: PPUSH
13030: LD_INT 2
13032: PPUSH
13033: LD_INT 0
13035: PPUSH
13036: CALL_OW 50
// end ;
13040: GO 12986
13042: POP
13043: POP
// uc_nation := 3 ;
13044: LD_ADDR_OWVAR 21
13048: PUSH
13049: LD_INT 3
13051: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13052: LD_ADDR_VAR 0 7
13056: PUSH
13057: LD_INT 71
13059: PUSH
13060: LD_INT 52
13062: PUSH
13063: LD_INT 11
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: ST_TO_ADDR
// for i in tmp do
13071: LD_ADDR_VAR 0 2
13075: PUSH
13076: LD_VAR 0 7
13080: PUSH
13081: FOR_IN
13082: IFFALSE 13126
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13084: LD_VAR 0 2
13088: PPUSH
13089: CALL_OW 274
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: LD_INT 3000
13099: PPUSH
13100: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13104: LD_VAR 0 2
13108: PPUSH
13109: CALL_OW 274
13113: PPUSH
13114: LD_INT 2
13116: PPUSH
13117: LD_INT 600
13119: PPUSH
13120: CALL_OW 277
// end ;
13124: GO 13081
13126: POP
13127: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13128: LD_ADDR_VAR 0 7
13132: PUSH
13133: LD_INT 41
13135: PUSH
13136: LD_INT 57
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 38
13145: PUSH
13146: LD_INT 55
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 50
13155: PUSH
13156: LD_INT 73
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 51
13165: PUSH
13166: LD_INT 65
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 82
13175: PUSH
13176: LD_INT 93
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 87
13185: PUSH
13186: LD_INT 100
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 91
13195: PUSH
13196: LD_INT 109
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 84
13205: PUSH
13206: LD_INT 120
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 113
13215: PUSH
13216: LD_INT 153
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 123
13225: PUSH
13226: LD_INT 171
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: LD_INT 125
13235: PUSH
13236: LD_INT 178
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PUSH
13243: LD_INT 125
13245: PUSH
13246: LD_INT 188
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 125
13255: PUSH
13256: LD_INT 201
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 33
13265: PUSH
13266: LD_INT 60
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 76
13275: PUSH
13276: LD_INT 95
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 84
13285: PUSH
13286: LD_INT 111
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 112
13295: PUSH
13296: LD_INT 165
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: ST_TO_ADDR
// for i := 1 to tmp do
13322: LD_ADDR_VAR 0 2
13326: PUSH
13327: DOUBLE
13328: LD_INT 1
13330: DEC
13331: ST_TO_ADDR
13332: LD_VAR 0 7
13336: PUSH
13337: FOR_TO
13338: IFFALSE 13585
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13340: LD_ADDR_VAR 0 4
13344: PUSH
13345: LD_VAR 0 7
13349: PUSH
13350: LD_VAR 0 2
13354: ARRAY
13355: PUSH
13356: LD_INT 1
13358: ARRAY
13359: PPUSH
13360: LD_VAR 0 7
13364: PUSH
13365: LD_VAR 0 2
13369: ARRAY
13370: PUSH
13371: LD_INT 2
13373: ARRAY
13374: PPUSH
13375: CALL_OW 428
13379: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13380: LD_VAR 0 4
13384: PPUSH
13385: CALL_OW 266
13389: PUSH
13390: LD_INT 4
13392: PUSH
13393: LD_INT 5
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: IN
13400: IFFALSE 13496
// begin for j := 1 to Difficulty do
13402: LD_ADDR_VAR 0 3
13406: PUSH
13407: DOUBLE
13408: LD_INT 1
13410: DEC
13411: ST_TO_ADDR
13412: LD_OWVAR 67
13416: PUSH
13417: FOR_TO
13418: IFFALSE 13492
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13420: LD_INT 0
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: LD_INT 4
13428: PUSH
13429: LD_INT 5
13431: PUSH
13432: LD_INT 5
13434: PUSH
13435: LD_INT 6
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: PUSH
13444: LD_OWVAR 67
13448: ARRAY
13449: PPUSH
13450: CALL_OW 380
// un := CreateHuman ;
13454: LD_ADDR_VAR 0 5
13458: PUSH
13459: CALL_OW 44
13463: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13464: LD_VAR 0 5
13468: PPUSH
13469: LD_VAR 0 4
13473: PPUSH
13474: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13478: LD_VAR 0 5
13482: PPUSH
13483: LD_INT 9
13485: PPUSH
13486: CALL_OW 336
// end ;
13490: GO 13417
13492: POP
13493: POP
// end else
13494: GO 13554
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13496: LD_INT 0
13498: PPUSH
13499: LD_INT 1
13501: PPUSH
13502: LD_INT 4
13504: PUSH
13505: LD_INT 5
13507: PUSH
13508: LD_INT 5
13510: PUSH
13511: LD_INT 6
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: LD_OWVAR 67
13524: ARRAY
13525: PPUSH
13526: CALL_OW 380
// un := CreateHuman ;
13530: LD_ADDR_VAR 0 5
13534: PUSH
13535: CALL_OW 44
13539: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13540: LD_VAR 0 5
13544: PPUSH
13545: LD_VAR 0 4
13549: PPUSH
13550: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13554: LD_ADDR_EXP 58
13558: PUSH
13559: LD_EXP 58
13563: PPUSH
13564: LD_EXP 58
13568: PUSH
13569: LD_INT 1
13571: PLUS
13572: PPUSH
13573: LD_VAR 0 5
13577: PPUSH
13578: CALL_OW 1
13582: ST_TO_ADDR
// end ;
13583: GO 13337
13585: POP
13586: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13587: LD_ADDR_VAR 0 4
13591: PUSH
13592: LD_INT 10
13594: PPUSH
13595: LD_INT 22
13597: PUSH
13598: LD_INT 3
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 30
13607: PUSH
13608: LD_INT 32
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 58
13617: PUSH
13618: EMPTY
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: LIST
13625: PPUSH
13626: CALL_OW 70
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13766
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13634: LD_INT 40
13636: PUSH
13637: LD_INT 50
13639: PUSH
13640: LD_INT 75
13642: PUSH
13643: LD_INT 80
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: PUSH
13652: LD_OWVAR 67
13656: ARRAY
13657: PUSH
13658: LD_EXP 7
13662: PUSH
13663: LD_INT 10
13665: MUL
13666: MINUS
13667: PPUSH
13668: CALL_OW 13
13672: NOT
13673: IFFALSE 13677
// continue ;
13675: GO 13631
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13677: LD_INT 0
13679: PPUSH
13680: LD_INT 1
13682: PPUSH
13683: LD_INT 4
13685: PUSH
13686: LD_INT 5
13688: PUSH
13689: LD_INT 5
13691: PUSH
13692: LD_INT 6
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: PUSH
13701: LD_OWVAR 67
13705: ARRAY
13706: PPUSH
13707: CALL_OW 380
// un := CreateHuman ;
13711: LD_ADDR_VAR 0 5
13715: PUSH
13716: CALL_OW 44
13720: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13721: LD_VAR 0 5
13725: PPUSH
13726: LD_VAR 0 4
13730: PPUSH
13731: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13735: LD_ADDR_EXP 58
13739: PUSH
13740: LD_EXP 58
13744: PPUSH
13745: LD_EXP 58
13749: PUSH
13750: LD_INT 1
13752: PLUS
13753: PPUSH
13754: LD_VAR 0 5
13758: PPUSH
13759: CALL_OW 1
13763: ST_TO_ADDR
// end ;
13764: GO 13631
13766: POP
13767: POP
// for i := 1 to 5 do
13768: LD_ADDR_VAR 0 2
13772: PUSH
13773: DOUBLE
13774: LD_INT 1
13776: DEC
13777: ST_TO_ADDR
13778: LD_INT 5
13780: PUSH
13781: FOR_TO
13782: IFFALSE 13880
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13784: LD_INT 0
13786: PPUSH
13787: LD_INT 2
13789: PPUSH
13790: LD_INT 4
13792: PUSH
13793: LD_INT 5
13795: PUSH
13796: LD_INT 5
13798: PUSH
13799: LD_INT 6
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: PUSH
13808: LD_OWVAR 67
13812: ARRAY
13813: PPUSH
13814: CALL_OW 380
// un := CreateHuman ;
13818: LD_ADDR_VAR 0 5
13822: PUSH
13823: CALL_OW 44
13827: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
13828: LD_VAR 0 5
13832: PPUSH
13833: LD_INT 66
13835: PPUSH
13836: LD_INT 101
13838: PPUSH
13839: LD_INT 3
13841: PPUSH
13842: LD_INT 0
13844: PPUSH
13845: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13849: LD_ADDR_EXP 58
13853: PUSH
13854: LD_EXP 58
13858: PPUSH
13859: LD_EXP 58
13863: PUSH
13864: LD_INT 1
13866: PLUS
13867: PPUSH
13868: LD_VAR 0 5
13872: PPUSH
13873: CALL_OW 1
13877: ST_TO_ADDR
// end ;
13878: GO 13781
13880: POP
13881: POP
// tmp := [ ruFac1 , ruFac2 ] ;
13882: LD_ADDR_VAR 0 7
13886: PUSH
13887: LD_INT 72
13889: PUSH
13890: LD_INT 12
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: ST_TO_ADDR
// for i := 1 to tmp do
13897: LD_ADDR_VAR 0 2
13901: PUSH
13902: DOUBLE
13903: LD_INT 1
13905: DEC
13906: ST_TO_ADDR
13907: LD_VAR 0 7
13911: PUSH
13912: FOR_TO
13913: IFFALSE 14030
// for j := 1 to 6 do
13915: LD_ADDR_VAR 0 3
13919: PUSH
13920: DOUBLE
13921: LD_INT 1
13923: DEC
13924: ST_TO_ADDR
13925: LD_INT 6
13927: PUSH
13928: FOR_TO
13929: IFFALSE 14026
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13931: LD_INT 0
13933: PPUSH
13934: LD_INT 3
13936: PPUSH
13937: LD_INT 4
13939: PUSH
13940: LD_INT 5
13942: PUSH
13943: LD_INT 5
13945: PUSH
13946: LD_INT 6
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: PUSH
13955: LD_OWVAR 67
13959: ARRAY
13960: PPUSH
13961: CALL_OW 380
// un := CreateHuman ;
13965: LD_ADDR_VAR 0 5
13969: PUSH
13970: CALL_OW 44
13974: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
13975: LD_VAR 0 5
13979: PPUSH
13980: LD_VAR 0 7
13984: PUSH
13985: LD_VAR 0 2
13989: ARRAY
13990: PPUSH
13991: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13995: LD_ADDR_EXP 58
13999: PUSH
14000: LD_EXP 58
14004: PPUSH
14005: LD_EXP 58
14009: PUSH
14010: LD_INT 1
14012: PLUS
14013: PPUSH
14014: LD_VAR 0 5
14018: PPUSH
14019: CALL_OW 1
14023: ST_TO_ADDR
// end ;
14024: GO 13928
14026: POP
14027: POP
14028: GO 13912
14030: POP
14031: POP
// for i := 1 to 3 do
14032: LD_ADDR_VAR 0 2
14036: PUSH
14037: DOUBLE
14038: LD_INT 1
14040: DEC
14041: ST_TO_ADDR
14042: LD_INT 3
14044: PUSH
14045: FOR_TO
14046: IFFALSE 14135
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14048: LD_INT 0
14050: PPUSH
14051: LD_INT 4
14053: PPUSH
14054: LD_INT 4
14056: PUSH
14057: LD_INT 5
14059: PUSH
14060: LD_INT 5
14062: PUSH
14063: LD_INT 6
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: LD_OWVAR 67
14076: ARRAY
14077: PPUSH
14078: CALL_OW 380
// un := CreateHuman ;
14082: LD_ADDR_VAR 0 5
14086: PUSH
14087: CALL_OW 44
14091: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14092: LD_VAR 0 5
14096: PPUSH
14097: LD_INT 17
14099: PPUSH
14100: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14104: LD_ADDR_EXP 58
14108: PUSH
14109: LD_EXP 58
14113: PPUSH
14114: LD_EXP 58
14118: PUSH
14119: LD_INT 1
14121: PLUS
14122: PPUSH
14123: LD_VAR 0 5
14127: PPUSH
14128: CALL_OW 1
14132: ST_TO_ADDR
// end ;
14133: GO 14045
14135: POP
14136: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: DOUBLE
14143: LD_INT 1
14145: DEC
14146: ST_TO_ADDR
14147: LD_INT 2
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 3
14155: PUSH
14156: LD_INT 3
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: PUSH
14165: LD_OWVAR 67
14169: ARRAY
14170: PUSH
14171: FOR_TO
14172: IFFALSE 14292
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14174: LD_INT 22
14176: PPUSH
14177: LD_INT 1
14179: PPUSH
14180: LD_INT 1
14182: PPUSH
14183: LD_INT 52
14185: PPUSH
14186: LD_INT 100
14188: PPUSH
14189: CALL 34020 0 5
// veh := CreateVehicle ;
14193: LD_ADDR_VAR 0 6
14197: PUSH
14198: CALL_OW 45
14202: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14203: LD_INT 0
14205: PPUSH
14206: LD_INT 3
14208: PPUSH
14209: LD_INT 4
14211: PPUSH
14212: CALL_OW 380
// un := CreateHuman ;
14216: LD_ADDR_VAR 0 5
14220: PUSH
14221: CALL_OW 44
14225: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14226: LD_VAR 0 6
14230: PPUSH
14231: LD_INT 107
14233: PPUSH
14234: LD_INT 182
14236: PPUSH
14237: LD_INT 4
14239: PPUSH
14240: LD_INT 0
14242: PPUSH
14243: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14247: LD_VAR 0 5
14251: PPUSH
14252: LD_VAR 0 6
14256: PPUSH
14257: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14261: LD_ADDR_EXP 58
14265: PUSH
14266: LD_EXP 58
14270: PPUSH
14271: LD_EXP 58
14275: PUSH
14276: LD_INT 1
14278: PLUS
14279: PPUSH
14280: LD_VAR 0 5
14284: PPUSH
14285: CALL_OW 1
14289: ST_TO_ADDR
// end ;
14290: GO 14171
14292: POP
14293: POP
// InitHc ;
14294: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14298: LD_ADDR_VAR 0 2
14302: PUSH
14303: DOUBLE
14304: LD_INT 1
14306: DEC
14307: ST_TO_ADDR
14308: LD_INT 3
14310: PUSH
14311: LD_INT 5
14313: PUSH
14314: LD_INT 6
14316: PUSH
14317: LD_INT 8
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: LD_OWVAR 67
14330: ARRAY
14331: PUSH
14332: FOR_TO
14333: IFFALSE 14428
// begin uc_nation := 0 ;
14335: LD_ADDR_OWVAR 21
14339: PUSH
14340: LD_INT 0
14342: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14343: LD_ADDR_OWVAR 28
14347: PUSH
14348: LD_INT 15
14350: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14351: LD_ADDR_OWVAR 31
14355: PUSH
14356: LD_INT 3
14358: PUSH
14359: LD_INT 0
14361: PUSH
14362: LD_INT 0
14364: PUSH
14365: LD_INT 0
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: ST_TO_ADDR
// un := CreateHuman ;
14374: LD_ADDR_VAR 0 5
14378: PUSH
14379: CALL_OW 44
14383: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14384: LD_VAR 0 5
14388: PPUSH
14389: LD_INT 269
14391: PUSH
14392: LD_INT 300
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_VAR 0 2
14403: PUSH
14404: LD_INT 2
14406: MOD
14407: PUSH
14408: LD_INT 1
14410: PLUS
14411: ARRAY
14412: PPUSH
14413: LD_INT 182
14415: PPUSH
14416: LD_INT 4
14418: PPUSH
14419: LD_INT 0
14421: PPUSH
14422: CALL_OW 50
// end ;
14426: GO 14332
14428: POP
14429: POP
// uc_nation := 3 ;
14430: LD_ADDR_OWVAR 21
14434: PUSH
14435: LD_INT 3
14437: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14438: LD_EXP 8
14442: PUSH
14443: LD_INT 10
14445: PUSH
14446: LD_INT 8
14448: PUSH
14449: LD_INT 6
14451: PUSH
14452: LD_INT 5
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: PUSH
14461: LD_OWVAR 67
14465: ARRAY
14466: LESS
14467: IFFALSE 14546
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14469: LD_INT 21
14471: PPUSH
14472: LD_INT 1
14474: PPUSH
14475: LD_INT 1
14477: PPUSH
14478: LD_INT 51
14480: PPUSH
14481: LD_INT 12
14483: PPUSH
14484: CALL 34020 0 5
// veh := CreateVehicle ;
14488: LD_ADDR_VAR 0 6
14492: PUSH
14493: CALL_OW 45
14497: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14498: LD_VAR 0 6
14502: PPUSH
14503: LD_INT 269
14505: PPUSH
14506: LD_INT 66
14508: PPUSH
14509: LD_INT 4
14511: PPUSH
14512: LD_INT 0
14514: PPUSH
14515: CALL 68613 0 5
// SetLives ( veh , 333 ) ;
14519: LD_VAR 0 6
14523: PPUSH
14524: LD_INT 333
14526: PPUSH
14527: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14531: LD_VAR 0 6
14535: PPUSH
14536: LD_INT 2
14538: PPUSH
14539: LD_INT 100
14541: PPUSH
14542: CALL_OW 290
// end ; end ;
14546: LD_VAR 0 1
14550: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14551: LD_EXP 54
14555: PUSH
14556: LD_EXP 54
14560: PPUSH
14561: CALL_OW 255
14565: PUSH
14566: LD_INT 3
14568: EQUAL
14569: AND
14570: IFFALSE 14733
14572: GO 14574
14574: DISABLE
14575: LD_INT 0
14577: PPUSH
// begin enable ;
14578: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14579: LD_INT 81
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 91
14591: PUSH
14592: LD_EXP 54
14596: PUSH
14597: LD_INT 15
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: IFFALSE 14693
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14615: LD_EXP 54
14619: PPUSH
14620: CALL_OW 311
14624: NOT
14625: IFFALSE 14691
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14627: LD_ADDR_VAR 0 1
14631: PUSH
14632: LD_INT 22
14634: PUSH
14635: LD_INT 3
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 21
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 69
14660: PPUSH
14661: LD_EXP 54
14665: PPUSH
14666: CALL_OW 74
14670: ST_TO_ADDR
// if driver then
14671: LD_VAR 0 1
14675: IFFALSE 14691
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14677: LD_VAR 0 1
14681: PPUSH
14682: LD_EXP 54
14686: PPUSH
14687: CALL_OW 120
// end ; exit ;
14691: GO 14733
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
14693: LD_EXP 54
14697: PPUSH
14698: CALL_OW 256
14702: PUSH
14703: LD_INT 1000
14705: LESS
14706: PUSH
14707: LD_EXP 54
14711: PPUSH
14712: CALL_OW 311
14716: AND
14717: IFFALSE 14733
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
14719: LD_EXP 54
14723: PPUSH
14724: CALL_OW 311
14728: PPUSH
14729: CALL 68173 0 1
// end ;
14733: PPOPN 1
14735: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
14736: LD_EXP 56
14740: PPUSH
14741: LD_INT 3
14743: PUSH
14744: LD_INT 24
14746: PUSH
14747: LD_INT 1000
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PPUSH
14758: CALL_OW 72
14762: PUSH
14763: LD_EXP 56
14767: PPUSH
14768: LD_INT 25
14770: PUSH
14771: LD_INT 4
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 50
14780: PUSH
14781: EMPTY
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 72
14792: AND
14793: IFFALSE 14981
14795: GO 14797
14797: DISABLE
14798: LD_INT 0
14800: PPUSH
14801: PPUSH
14802: PPUSH
// begin enable ;
14803: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
14804: LD_ADDR_VAR 0 3
14808: PUSH
14809: LD_EXP 56
14813: PPUSH
14814: LD_INT 3
14816: PUSH
14817: LD_INT 24
14819: PUSH
14820: LD_INT 1000
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 72
14835: PPUSH
14836: LD_INT 1
14838: PPUSH
14839: CALL 68413 0 2
14843: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
14844: LD_ADDR_VAR 0 2
14848: PUSH
14849: LD_EXP 56
14853: PPUSH
14854: LD_INT 25
14856: PUSH
14857: LD_INT 4
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: LD_INT 50
14866: PUSH
14867: EMPTY
14868: LIST
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PPUSH
14874: CALL_OW 72
14878: PUSH
14879: LD_INT 1
14881: ARRAY
14882: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
14883: LD_VAR 0 2
14887: PPUSH
14888: LD_VAR 0 3
14892: PUSH
14893: LD_INT 1
14895: ARRAY
14896: PPUSH
14897: CALL 63766 0 2
14901: NOT
14902: IFFALSE 14981
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
14904: LD_VAR 0 3
14908: PUSH
14909: LD_INT 1
14911: ARRAY
14912: PPUSH
14913: LD_INT 9
14915: PPUSH
14916: CALL_OW 308
14920: NOT
14921: IFFALSE 14939
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
14923: LD_VAR 0 3
14927: PUSH
14928: LD_INT 1
14930: ARRAY
14931: PPUSH
14932: LD_INT 9
14934: PPUSH
14935: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
14939: LD_VAR 0 2
14943: PPUSH
14944: LD_VAR 0 3
14948: PUSH
14949: LD_INT 1
14951: ARRAY
14952: PPUSH
14953: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
14957: LD_VAR 0 2
14961: PPUSH
14962: LD_INT 179
14964: PPUSH
14965: LD_INT 113
14967: PPUSH
14968: CALL_OW 171
// AddComHold ( sci ) ;
14972: LD_VAR 0 2
14976: PPUSH
14977: CALL_OW 200
// end ; end ;
14981: PPOPN 3
14983: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
14984: LD_INT 2
14986: PPUSH
14987: LD_INT 52
14989: PPUSH
14990: CALL_OW 292
14994: IFFALSE 15099
14996: GO 14998
14998: DISABLE
14999: LD_INT 0
15001: PPUSH
15002: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_EXP 58
15012: PPUSH
15013: LD_INT 25
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 50
15025: PUSH
15026: EMPTY
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PPUSH
15033: CALL_OW 72
15037: ST_TO_ADDR
// if not tmp then
15038: LD_VAR 0 2
15042: NOT
15043: IFFALSE 15047
// exit ;
15045: GO 15099
// for i in tmp do
15047: LD_ADDR_VAR 0 1
15051: PUSH
15052: LD_VAR 0 2
15056: PUSH
15057: FOR_IN
15058: IFFALSE 15097
// begin if IsInUnit ( i ) then
15060: LD_VAR 0 1
15064: PPUSH
15065: CALL_OW 310
15069: IFFALSE 15080
// ComExitBuilding ( i ) ;
15071: LD_VAR 0 1
15075: PPUSH
15076: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15080: LD_VAR 0 1
15084: PPUSH
15085: LD_INT 84
15087: PPUSH
15088: LD_INT 133
15090: PPUSH
15091: CALL_OW 174
// end ;
15095: GO 15057
15097: POP
15098: POP
// end ;
15099: PPOPN 2
15101: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15102: LD_EXP 14
15106: IFFALSE 15287
15108: GO 15110
15110: DISABLE
15111: LD_INT 0
15113: PPUSH
15114: PPUSH
15115: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15116: LD_ADDR_VAR 0 2
15120: PUSH
15121: LD_INT 72
15123: PUSH
15124: LD_INT 12
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15131: LD_ADDR_VAR 0 3
15135: PUSH
15136: LD_INT 44
15138: PUSH
15139: LD_INT 43
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 45
15148: PUSH
15149: LD_INT 44
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 45
15158: PUSH
15159: LD_INT 46
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 45
15168: PUSH
15169: LD_INT 46
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: LD_OWVAR 67
15186: ARRAY
15187: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15188: LD_ADDR_VAR 0 1
15192: PUSH
15193: DOUBLE
15194: LD_INT 1
15196: DEC
15197: ST_TO_ADDR
15198: LD_INT 1
15200: PUSH
15201: LD_INT 2
15203: PUSH
15204: LD_INT 2
15206: PUSH
15207: LD_INT 3
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: PUSH
15216: LD_OWVAR 67
15220: ARRAY
15221: PUSH
15222: FOR_TO
15223: IFFALSE 15285
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15225: LD_VAR 0 2
15229: PPUSH
15230: LD_INT 22
15232: PUSH
15233: LD_INT 23
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_VAR 0 1
15244: PUSH
15245: LD_INT 2
15247: MOD
15248: PUSH
15249: LD_INT 1
15251: PLUS
15252: ARRAY
15253: PPUSH
15254: LD_INT 1
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: LD_VAR 0 3
15264: PUSH
15265: LD_VAR 0 1
15269: PUSH
15270: LD_INT 2
15272: MOD
15273: PUSH
15274: LD_INT 1
15276: PLUS
15277: ARRAY
15278: PPUSH
15279: CALL_OW 185
15283: GO 15222
15285: POP
15286: POP
// end ;
15287: PPOPN 3
15289: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15290: LD_EXP 11
15294: IFFALSE 16443
15296: GO 15298
15298: DISABLE
15299: LD_INT 0
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
15305: PPUSH
15306: PPUSH
// begin enable ;
15307: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15308: LD_ADDR_VAR 0 6
15312: PUSH
15313: LD_INT 10
15315: PPUSH
15316: LD_INT 81
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PPUSH
15326: CALL_OW 70
15330: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15331: LD_EXP 59
15335: IFFALSE 15601
// begin for i in ruSpecialVehicleGroup do
15337: LD_ADDR_VAR 0 1
15341: PUSH
15342: LD_EXP 59
15346: PUSH
15347: FOR_IN
15348: IFFALSE 15599
// begin if enemyInBase then
15350: LD_VAR 0 6
15354: IFFALSE 15597
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15356: LD_VAR 0 1
15360: PPUSH
15361: CALL_OW 256
15365: PUSH
15366: LD_INT 500
15368: GREATER
15369: PUSH
15370: LD_VAR 0 1
15374: PPUSH
15375: CALL_OW 110
15379: PUSH
15380: LD_INT 0
15382: EQUAL
15383: AND
15384: IFFALSE 15410
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15386: LD_VAR 0 1
15390: PPUSH
15391: LD_VAR 0 6
15395: PPUSH
15396: LD_VAR 0 1
15400: PPUSH
15401: CALL_OW 74
15405: PPUSH
15406: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15410: LD_VAR 0 1
15414: PPUSH
15415: CALL_OW 256
15419: PUSH
15420: LD_INT 500
15422: LESSEQUAL
15423: PUSH
15424: LD_VAR 0 1
15428: PPUSH
15429: CALL_OW 110
15433: PUSH
15434: LD_INT 0
15436: EQUAL
15437: AND
15438: IFFALSE 15467
// begin SetTag ( i , 1 ) ;
15440: LD_VAR 0 1
15444: PPUSH
15445: LD_INT 1
15447: PPUSH
15448: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15452: LD_VAR 0 1
15456: PPUSH
15457: LD_INT 83
15459: PPUSH
15460: LD_INT 134
15462: PPUSH
15463: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15467: LD_VAR 0 1
15471: PPUSH
15472: CALL_OW 256
15476: PUSH
15477: LD_INT 1000
15479: LESS
15480: PUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 110
15490: PUSH
15491: LD_INT 1
15493: EQUAL
15494: AND
15495: PUSH
15496: LD_VAR 0 1
15500: PPUSH
15501: LD_INT 83
15503: PPUSH
15504: LD_INT 134
15506: PPUSH
15507: CALL_OW 297
15511: PUSH
15512: LD_INT 6
15514: LESS
15515: AND
15516: IFFALSE 15544
// begin SetFuel ( i , 100 ) ;
15518: LD_VAR 0 1
15522: PPUSH
15523: LD_INT 100
15525: PPUSH
15526: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15530: LD_VAR 0 1
15534: PPUSH
15535: CALL_OW 310
15539: PPUSH
15540: CALL 68293 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15544: LD_VAR 0 1
15548: PPUSH
15549: CALL_OW 256
15553: PUSH
15554: LD_INT 1000
15556: EQUAL
15557: PUSH
15558: LD_VAR 0 1
15562: PPUSH
15563: CALL_OW 110
15567: PUSH
15568: LD_INT 1
15570: EQUAL
15571: AND
15572: PUSH
15573: LD_VAR 0 1
15577: PPUSH
15578: CALL_OW 311
15582: AND
15583: IFFALSE 15597
// SetTag ( i , 0 ) ;
15585: LD_VAR 0 1
15589: PPUSH
15590: LD_INT 0
15592: PPUSH
15593: CALL_OW 109
// end ; end ;
15597: GO 15347
15599: POP
15600: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15601: LD_ADDR_VAR 0 5
15605: PUSH
15606: LD_EXP 58
15610: PPUSH
15611: LD_INT 25
15613: PUSH
15614: LD_INT 4
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PPUSH
15621: CALL_OW 72
15625: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15626: LD_ADDR_VAR 0 4
15630: PUSH
15631: LD_EXP 58
15635: PPUSH
15636: LD_INT 92
15638: PUSH
15639: LD_INT 92
15641: PUSH
15642: LD_INT 155
15644: PUSH
15645: LD_INT 12
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 3
15656: PUSH
15657: LD_INT 24
15659: PUSH
15660: LD_INT 1000
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PPUSH
15675: CALL_OW 72
15679: ST_TO_ADDR
// if sci then
15680: LD_VAR 0 5
15684: IFFALSE 15817
// begin if hurt then
15686: LD_VAR 0 4
15690: IFFALSE 15763
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15692: LD_VAR 0 5
15696: PPUSH
15697: LD_INT 3
15699: PUSH
15700: LD_INT 54
15702: PUSH
15703: EMPTY
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PPUSH
15710: CALL_OW 72
15714: IFFALSE 15743
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
15716: LD_VAR 0 5
15720: PPUSH
15721: LD_INT 3
15723: PUSH
15724: LD_INT 54
15726: PUSH
15727: EMPTY
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL_OW 72
15738: PPUSH
15739: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
15743: LD_VAR 0 5
15747: PPUSH
15748: LD_VAR 0 4
15752: PUSH
15753: LD_INT 1
15755: ARRAY
15756: PPUSH
15757: CALL_OW 188
// end else
15761: GO 15817
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15763: LD_VAR 0 5
15767: PPUSH
15768: LD_INT 3
15770: PUSH
15771: LD_INT 54
15773: PUSH
15774: EMPTY
15775: LIST
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PPUSH
15781: CALL_OW 72
15785: IFFALSE 15817
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
15787: LD_VAR 0 5
15791: PPUSH
15792: LD_INT 3
15794: PUSH
15795: LD_INT 54
15797: PUSH
15798: EMPTY
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 72
15809: PPUSH
15810: LD_INT 17
15812: PPUSH
15813: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15817: LD_ADDR_VAR 0 3
15821: PUSH
15822: LD_INT 10
15824: PPUSH
15825: LD_INT 21
15827: PUSH
15828: LD_INT 3
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: LD_INT 24
15840: PUSH
15841: LD_INT 1000
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PPUSH
15856: CALL_OW 70
15860: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
15861: LD_ADDR_VAR 0 2
15865: PUSH
15866: LD_EXP 58
15870: PPUSH
15871: LD_INT 25
15873: PUSH
15874: LD_INT 2
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 72
15885: PUSH
15886: LD_INT 22
15888: PUSH
15889: LD_INT 3
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 34
15898: PUSH
15899: LD_INT 52
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PPUSH
15910: CALL_OW 69
15914: UNION
15915: ST_TO_ADDR
// if not tmp then
15916: LD_VAR 0 2
15920: NOT
15921: IFFALSE 15925
// exit ;
15923: GO 16443
// for i in tmp do
15925: LD_ADDR_VAR 0 1
15929: PUSH
15930: LD_VAR 0 2
15934: PUSH
15935: FOR_IN
15936: IFFALSE 16441
// begin if GetClass ( i ) = 2 then
15938: LD_VAR 0 1
15942: PPUSH
15943: CALL_OW 257
15947: PUSH
15948: LD_INT 2
15950: EQUAL
15951: IFFALSE 16174
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
15953: LD_VAR 0 1
15957: PPUSH
15958: CALL_OW 256
15962: PUSH
15963: LD_INT 1000
15965: EQUAL
15966: PUSH
15967: LD_VAR 0 1
15971: PPUSH
15972: CALL_OW 110
15976: PUSH
15977: LD_INT 1
15979: EQUAL
15980: AND
15981: IFFALSE 15995
// SetTag ( i , 0 ) ;
15983: LD_VAR 0 1
15987: PPUSH
15988: LD_INT 0
15990: PPUSH
15991: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 256
16004: PUSH
16005: LD_INT 500
16007: LESSEQUAL
16008: PUSH
16009: LD_VAR 0 1
16013: PPUSH
16014: CALL_OW 110
16018: PUSH
16019: LD_INT 0
16021: EQUAL
16022: AND
16023: IFFALSE 16052
// begin SetTag ( i , 1 ) ;
16025: LD_VAR 0 1
16029: PPUSH
16030: LD_INT 1
16032: PPUSH
16033: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16037: LD_VAR 0 1
16041: PPUSH
16042: LD_INT 92
16044: PPUSH
16045: LD_INT 155
16047: PPUSH
16048: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16052: LD_VAR 0 3
16056: PUSH
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 256
16066: PUSH
16067: LD_INT 500
16069: GREATER
16070: AND
16071: PUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 110
16081: PUSH
16082: LD_INT 0
16084: EQUAL
16085: AND
16086: PUSH
16087: LD_VAR 0 1
16091: PPUSH
16092: CALL_OW 314
16096: NOT
16097: AND
16098: IFFALSE 16172
// begin if b then
16100: LD_VAR 0 3
16104: IFFALSE 16136
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16106: LD_VAR 0 1
16110: PPUSH
16111: LD_VAR 0 3
16115: PUSH
16116: LD_INT 1
16118: PPUSH
16119: LD_VAR 0 3
16123: PPUSH
16124: CALL_OW 12
16128: ARRAY
16129: PPUSH
16130: CALL_OW 130
16134: GO 16172
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16136: LD_VAR 0 1
16140: PPUSH
16141: LD_INT 94
16143: PPUSH
16144: LD_INT 165
16146: PPUSH
16147: CALL_OW 297
16151: PUSH
16152: LD_INT 8
16154: GREATER
16155: IFFALSE 16172
// ComMoveXY ( i , 94 , 165 ) ;
16157: LD_VAR 0 1
16161: PPUSH
16162: LD_INT 94
16164: PPUSH
16165: LD_INT 165
16167: PPUSH
16168: CALL_OW 111
// end ; end else
16172: GO 16439
// if GetWeapon ( i ) = ru_crane then
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 264
16183: PUSH
16184: LD_INT 52
16186: EQUAL
16187: IFFALSE 16439
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 256
16198: PUSH
16199: LD_INT 1000
16201: EQUAL
16202: PUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 110
16212: PUSH
16213: LD_INT 1
16215: EQUAL
16216: AND
16217: IFFALSE 16243
// begin SetTag ( i , 0 ) ;
16219: LD_VAR 0 1
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 109
// SetFuel ( i , 100 ) ;
16231: LD_VAR 0 1
16235: PPUSH
16236: LD_INT 100
16238: PPUSH
16239: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 256
16252: PUSH
16253: LD_INT 500
16255: LESSEQUAL
16256: PUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 110
16266: PUSH
16267: LD_INT 0
16269: EQUAL
16270: AND
16271: IFFALSE 16314
// begin SetTag ( i , 1 ) ;
16273: LD_VAR 0 1
16277: PPUSH
16278: LD_INT 1
16280: PPUSH
16281: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16285: LD_VAR 0 1
16289: PPUSH
16290: LD_INT 83
16292: PPUSH
16293: LD_INT 135
16295: PPUSH
16296: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 310
16309: PPUSH
16310: CALL 68293 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 256
16323: PUSH
16324: LD_INT 500
16326: GREATER
16327: PUSH
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 110
16337: PUSH
16338: LD_INT 0
16340: EQUAL
16341: AND
16342: PUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 311
16352: AND
16353: PUSH
16354: LD_VAR 0 1
16358: PPUSH
16359: CALL_OW 314
16363: NOT
16364: AND
16365: IFFALSE 16439
// begin if b then
16367: LD_VAR 0 3
16371: IFFALSE 16403
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16373: LD_VAR 0 1
16377: PPUSH
16378: LD_VAR 0 3
16382: PUSH
16383: LD_INT 1
16385: PPUSH
16386: LD_VAR 0 3
16390: PPUSH
16391: CALL_OW 12
16395: ARRAY
16396: PPUSH
16397: CALL_OW 130
16401: GO 16439
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16403: LD_VAR 0 1
16407: PPUSH
16408: LD_INT 94
16410: PPUSH
16411: LD_INT 165
16413: PPUSH
16414: CALL_OW 297
16418: PUSH
16419: LD_INT 8
16421: GREATER
16422: IFFALSE 16439
// ComMoveXY ( i , 94 , 165 ) ;
16424: LD_VAR 0 1
16428: PPUSH
16429: LD_INT 94
16431: PPUSH
16432: LD_INT 165
16434: PPUSH
16435: CALL_OW 111
// end ; end ; end ;
16439: GO 15935
16441: POP
16442: POP
// end ;
16443: PPOPN 6
16445: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16446: LD_EXP 23
16450: NOT
16451: PUSH
16452: LD_EXP 27
16456: NOT
16457: AND
16458: IFFALSE 17373
16460: GO 16462
16462: DISABLE
16463: LD_INT 0
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
// begin enable ;
16470: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16471: LD_INT 35
16473: PUSH
16474: LD_INT 45
16476: PUSH
16477: LD_INT 55
16479: PUSH
16480: LD_INT 60
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: PUSH
16489: LD_OWVAR 67
16493: ARRAY
16494: PPUSH
16495: CALL_OW 13
16499: IFFALSE 16515
// waveStrength := waveStrength + 1 ;
16501: LD_ADDR_EXP 61
16505: PUSH
16506: LD_EXP 61
16510: PUSH
16511: LD_INT 1
16513: PLUS
16514: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16515: LD_EXP 61
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: LD_INT 3
16525: PUSH
16526: LD_INT 4
16528: PUSH
16529: LD_INT 4
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_OWVAR 67
16542: ARRAY
16543: GREATER
16544: IFFALSE 16576
// begin waveStrength := waveStrength + 2 ;
16546: LD_ADDR_EXP 61
16550: PUSH
16551: LD_EXP 61
16555: PUSH
16556: LD_INT 2
16558: PLUS
16559: ST_TO_ADDR
// disableAttackOnHeike := true ;
16560: LD_ADDR_EXP 27
16564: PUSH
16565: LD_INT 1
16567: ST_TO_ADDR
// disable ;
16568: DISABLE
// wait ( 3 3$00 ) ;
16569: LD_INT 6300
16571: PPUSH
16572: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16576: LD_ADDR_VAR 0 1
16580: PUSH
16581: DOUBLE
16582: LD_INT 1
16584: DEC
16585: ST_TO_ADDR
16586: LD_INT 2
16588: PUSH
16589: LD_INT 2
16591: PUSH
16592: LD_INT 3
16594: PUSH
16595: LD_INT 4
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: PUSH
16604: LD_OWVAR 67
16608: ARRAY
16609: PUSH
16610: FOR_TO
16611: IFFALSE 16772
// begin InitHc ;
16613: CALL_OW 19
// InitVc ;
16617: CALL_OW 20
// uc_side := 3 ;
16621: LD_ADDR_OWVAR 20
16625: PUSH
16626: LD_INT 3
16628: ST_TO_ADDR
// uc_nation := 3 ;
16629: LD_ADDR_OWVAR 21
16633: PUSH
16634: LD_INT 3
16636: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16637: LD_INT 0
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: LD_OWVAR 67
16647: PUSH
16648: LD_INT 2
16650: PLUS
16651: PPUSH
16652: CALL_OW 380
// un := CreateHuman ;
16656: LD_ADDR_VAR 0 2
16660: PUSH
16661: CALL_OW 44
16665: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16666: LD_VAR 0 2
16670: PPUSH
16671: LD_INT 160
16673: PPUSH
16674: LD_INT 3
16676: PPUSH
16677: LD_INT 2
16679: PPUSH
16680: LD_INT 0
16682: PPUSH
16683: CALL 68613 0 5
// SetClass ( un , class_bazooker ) ;
16687: LD_VAR 0 2
16691: PPUSH
16692: LD_INT 9
16694: PPUSH
16695: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16699: LD_ADDR_EXP 60
16703: PUSH
16704: LD_EXP 60
16708: PPUSH
16709: LD_EXP 60
16713: PUSH
16714: LD_INT 1
16716: PLUS
16717: PPUSH
16718: LD_VAR 0 2
16722: PPUSH
16723: CALL_OW 1
16727: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
16728: LD_VAR 0 2
16732: PPUSH
16733: LD_INT 177
16735: PPUSH
16736: LD_INT 17
16738: PPUSH
16739: CALL_OW 111
// wait ( 0 0$2 ) ;
16743: LD_INT 70
16745: PPUSH
16746: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
16750: LD_ADDR_VAR 0 5
16754: PUSH
16755: LD_VAR 0 5
16759: PPUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: CALL 66473 0 2
16769: ST_TO_ADDR
// end ;
16770: GO 16610
16772: POP
16773: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
16774: LD_VAR 0 5
16778: PPUSH
16779: LD_INT 196
16781: PPUSH
16782: LD_INT 53
16784: PPUSH
16785: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
16789: LD_VAR 0 5
16793: PPUSH
16794: LD_INT 199
16796: PPUSH
16797: LD_INT 62
16799: PPUSH
16800: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
16804: LD_VAR 0 5
16808: PPUSH
16809: LD_INT 205
16811: PPUSH
16812: LD_INT 75
16814: PPUSH
16815: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
16819: LD_ADDR_VAR 0 1
16823: PUSH
16824: DOUBLE
16825: LD_INT 1
16827: DEC
16828: ST_TO_ADDR
16829: LD_INT 2
16831: PUSH
16832: LD_INT 3
16834: PUSH
16835: LD_INT 3
16837: PUSH
16838: LD_INT 4
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: PUSH
16847: LD_OWVAR 67
16851: ARRAY
16852: PUSH
16853: LD_EXP 61
16857: PLUS
16858: PUSH
16859: FOR_TO
16860: IFFALSE 17169
// begin InitHc ;
16862: CALL_OW 19
// InitVc ;
16866: CALL_OW 20
// uc_side := 3 ;
16870: LD_ADDR_OWVAR 20
16874: PUSH
16875: LD_INT 3
16877: ST_TO_ADDR
// uc_nation := 3 ;
16878: LD_ADDR_OWVAR 21
16882: PUSH
16883: LD_INT 3
16885: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
16886: LD_INT 22
16888: PUSH
16889: LD_INT 23
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 1
16898: PPUSH
16899: LD_INT 2
16901: PPUSH
16902: CALL_OW 12
16906: ARRAY
16907: PPUSH
16908: LD_INT 1
16910: PPUSH
16911: LD_INT 1
16913: PPUSH
16914: LD_INT 44
16916: PUSH
16917: LD_INT 45
16919: PUSH
16920: LD_INT 43
16922: PUSH
16923: LD_INT 42
16925: PUSH
16926: LD_INT 44
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 1
16938: PPUSH
16939: LD_INT 5
16941: PPUSH
16942: CALL_OW 12
16946: ARRAY
16947: PPUSH
16948: LD_INT 99
16950: PPUSH
16951: CALL 34020 0 5
// veh := CreateVehicle ;
16955: LD_ADDR_VAR 0 3
16959: PUSH
16960: CALL_OW 45
16964: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
16965: LD_VAR 0 3
16969: PPUSH
16970: LD_INT 160
16972: PPUSH
16973: LD_INT 3
16975: PPUSH
16976: LD_INT 2
16978: PPUSH
16979: LD_INT 0
16981: PPUSH
16982: CALL 68613 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
16986: LD_ADDR_EXP 60
16990: PUSH
16991: LD_EXP 60
16995: PPUSH
16996: LD_EXP 60
17000: PUSH
17001: LD_INT 1
17003: PLUS
17004: PPUSH
17005: LD_VAR 0 3
17009: PPUSH
17010: CALL_OW 1
17014: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17015: LD_INT 0
17017: PPUSH
17018: LD_INT 3
17020: PPUSH
17021: LD_OWVAR 67
17025: PUSH
17026: LD_INT 2
17028: PLUS
17029: PPUSH
17030: CALL_OW 380
// un := CreateHuman ;
17034: LD_ADDR_VAR 0 2
17038: PUSH
17039: CALL_OW 44
17043: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17044: LD_VAR 0 2
17048: PPUSH
17049: LD_VAR 0 3
17053: PPUSH
17054: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17058: LD_ADDR_EXP 60
17062: PUSH
17063: LD_EXP 60
17067: PPUSH
17068: LD_EXP 60
17072: PUSH
17073: LD_INT 1
17075: PLUS
17076: PPUSH
17077: LD_VAR 0 2
17081: PPUSH
17082: CALL_OW 1
17086: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17087: LD_VAR 0 2
17091: PPUSH
17092: LD_INT 177
17094: PPUSH
17095: LD_INT 17
17097: PPUSH
17098: CALL_OW 111
// wait ( 0 0$2 ) ;
17102: LD_INT 70
17104: PPUSH
17105: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17109: LD_ADDR_VAR 0 4
17113: PUSH
17114: LD_VAR 0 4
17118: PPUSH
17119: LD_VAR 0 4
17123: PUSH
17124: LD_INT 1
17126: PLUS
17127: PPUSH
17128: LD_VAR 0 3
17132: PPUSH
17133: CALL_OW 1
17137: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17138: LD_ADDR_VAR 0 4
17142: PUSH
17143: LD_VAR 0 4
17147: PPUSH
17148: LD_VAR 0 4
17152: PUSH
17153: LD_INT 1
17155: PLUS
17156: PPUSH
17157: LD_VAR 0 2
17161: PPUSH
17162: CALL_OW 1
17166: ST_TO_ADDR
// end ;
17167: GO 16859
17169: POP
17170: POP
// for i in tmp do
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: LD_VAR 0 4
17180: PUSH
17181: FOR_IN
17182: IFFALSE 17263
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17184: LD_VAR 0 1
17188: PPUSH
17189: LD_INT 206
17191: PUSH
17192: LD_INT 37
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 239
17201: PUSH
17202: LD_INT 53
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 260
17211: PUSH
17212: LD_INT 67
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 263
17221: PUSH
17222: LD_INT 79
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 257
17231: PUSH
17232: LD_INT 105
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 227
17241: PUSH
17242: LD_INT 97
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL 69077 0 2
17261: GO 17181
17263: POP
17264: POP
// repeat wait ( 0 0$2 ) ;
17265: LD_INT 70
17267: PPUSH
17268: CALL_OW 67
// for i in tmp do
17272: LD_ADDR_VAR 0 1
17276: PUSH
17277: LD_VAR 0 4
17281: PUSH
17282: FOR_IN
17283: IFFALSE 17350
// if IsDead ( i ) then
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 301
17294: IFFALSE 17314
// tmp := tmp diff i else
17296: LD_ADDR_VAR 0 4
17300: PUSH
17301: LD_VAR 0 4
17305: PUSH
17306: LD_VAR 0 1
17310: DIFF
17311: ST_TO_ADDR
17312: GO 17348
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17314: LD_VAR 0 1
17318: PPUSH
17319: LD_INT 81
17321: PUSH
17322: LD_INT 3
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PPUSH
17329: CALL_OW 69
17333: PPUSH
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL_OW 74
17343: PPUSH
17344: CALL_OW 115
17348: GO 17282
17350: POP
17351: POP
// until not tmp ;
17352: LD_VAR 0 4
17356: NOT
17357: IFFALSE 17265
// if firstAttack then
17359: LD_EXP 28
17363: IFFALSE 17373
// firstAttack := false ;
17365: LD_ADDR_EXP 28
17369: PUSH
17370: LD_INT 0
17372: ST_TO_ADDR
// end ;
17373: PPOPN 5
17375: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17376: LD_EXP 23
17380: NOT
17381: PUSH
17382: LD_EXP 32
17386: NOT
17387: AND
17388: PUSH
17389: LD_EXP 3
17393: AND
17394: PUSH
17395: LD_EXP 27
17399: NOT
17400: AND
17401: IFFALSE 18318
17403: GO 17405
17405: DISABLE
17406: LD_INT 0
17408: PPUSH
17409: PPUSH
17410: PPUSH
17411: PPUSH
// begin enable ;
17412: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17413: LD_ADDR_VAR 0 1
17417: PUSH
17418: DOUBLE
17419: LD_INT 1
17421: DEC
17422: ST_TO_ADDR
17423: LD_INT 1
17425: PUSH
17426: LD_INT 2
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 3
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: PUSH
17441: LD_OWVAR 67
17445: ARRAY
17446: PUSH
17447: FOR_TO
17448: IFFALSE 17749
// begin InitHc ;
17450: CALL_OW 19
// InitVc ;
17454: CALL_OW 20
// uc_side := 3 ;
17458: LD_ADDR_OWVAR 20
17462: PUSH
17463: LD_INT 3
17465: ST_TO_ADDR
// uc_nation := 3 ;
17466: LD_ADDR_OWVAR 21
17470: PUSH
17471: LD_INT 3
17473: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17474: LD_INT 22
17476: PUSH
17477: LD_INT 23
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 1
17486: PPUSH
17487: LD_INT 2
17489: PPUSH
17490: CALL_OW 12
17494: ARRAY
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_INT 1
17501: PPUSH
17502: LD_INT 44
17504: PUSH
17505: LD_INT 43
17507: PUSH
17508: LD_INT 42
17510: PUSH
17511: LD_INT 44
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 1
17522: PPUSH
17523: LD_INT 4
17525: PPUSH
17526: CALL_OW 12
17530: ARRAY
17531: PPUSH
17532: LD_INT 99
17534: PPUSH
17535: CALL 34020 0 5
// veh := CreateVehicle ;
17539: LD_ADDR_VAR 0 3
17543: PUSH
17544: CALL_OW 45
17548: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17549: LD_VAR 0 3
17553: PPUSH
17554: LD_INT 5
17556: PPUSH
17557: LD_INT 3
17559: PPUSH
17560: LD_INT 2
17562: PPUSH
17563: LD_INT 0
17565: PPUSH
17566: CALL 68613 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17570: LD_ADDR_EXP 60
17574: PUSH
17575: LD_EXP 60
17579: PPUSH
17580: LD_EXP 60
17584: PUSH
17585: LD_INT 1
17587: PLUS
17588: PPUSH
17589: LD_VAR 0 3
17593: PPUSH
17594: CALL_OW 1
17598: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17599: LD_INT 0
17601: PPUSH
17602: LD_INT 3
17604: PPUSH
17605: LD_OWVAR 67
17609: PPUSH
17610: CALL_OW 380
// un := CreateHuman ;
17614: LD_ADDR_VAR 0 2
17618: PUSH
17619: CALL_OW 44
17623: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17624: LD_VAR 0 2
17628: PPUSH
17629: LD_VAR 0 3
17633: PPUSH
17634: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17638: LD_ADDR_EXP 60
17642: PUSH
17643: LD_EXP 60
17647: PPUSH
17648: LD_EXP 60
17652: PUSH
17653: LD_INT 1
17655: PLUS
17656: PPUSH
17657: LD_VAR 0 2
17661: PPUSH
17662: CALL_OW 1
17666: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17667: LD_VAR 0 2
17671: PPUSH
17672: LD_INT 23
17674: PPUSH
17675: LD_INT 7
17677: PPUSH
17678: CALL_OW 111
// wait ( 0 0$2 ) ;
17682: LD_INT 70
17684: PPUSH
17685: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17689: LD_ADDR_VAR 0 4
17693: PUSH
17694: LD_VAR 0 4
17698: PPUSH
17699: LD_VAR 0 4
17703: PUSH
17704: LD_INT 1
17706: PLUS
17707: PPUSH
17708: LD_VAR 0 3
17712: PPUSH
17713: CALL_OW 1
17717: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17718: LD_ADDR_VAR 0 4
17722: PUSH
17723: LD_VAR 0 4
17727: PPUSH
17728: LD_VAR 0 4
17732: PUSH
17733: LD_INT 1
17735: PLUS
17736: PPUSH
17737: LD_VAR 0 2
17741: PPUSH
17742: CALL_OW 1
17746: ST_TO_ADDR
// end ;
17747: GO 17447
17749: POP
17750: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
17751: LD_ADDR_VAR 0 1
17755: PUSH
17756: DOUBLE
17757: LD_INT 1
17759: DEC
17760: ST_TO_ADDR
17761: LD_INT 2
17763: PUSH
17764: LD_INT 3
17766: PUSH
17767: LD_INT 3
17769: PUSH
17770: LD_INT 4
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: PUSH
17779: LD_OWVAR 67
17783: ARRAY
17784: PUSH
17785: FOR_TO
17786: IFFALSE 18095
// begin InitHc ;
17788: CALL_OW 19
// InitVc ;
17792: CALL_OW 20
// uc_side := 3 ;
17796: LD_ADDR_OWVAR 20
17800: PUSH
17801: LD_INT 3
17803: ST_TO_ADDR
// uc_nation := 3 ;
17804: LD_ADDR_OWVAR 21
17808: PUSH
17809: LD_INT 3
17811: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17812: LD_INT 22
17814: PUSH
17815: LD_INT 23
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 1
17824: PPUSH
17825: LD_INT 2
17827: PPUSH
17828: CALL_OW 12
17832: ARRAY
17833: PPUSH
17834: LD_INT 1
17836: PPUSH
17837: LD_INT 1
17839: PPUSH
17840: LD_INT 44
17842: PUSH
17843: LD_INT 45
17845: PUSH
17846: LD_INT 43
17848: PUSH
17849: LD_INT 42
17851: PUSH
17852: LD_INT 44
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: PPUSH
17865: LD_INT 5
17867: PPUSH
17868: CALL_OW 12
17872: ARRAY
17873: PPUSH
17874: LD_INT 99
17876: PPUSH
17877: CALL 34020 0 5
// veh := CreateVehicle ;
17881: LD_ADDR_VAR 0 3
17885: PUSH
17886: CALL_OW 45
17890: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_INT 127
17898: PPUSH
17899: LD_INT 243
17901: PPUSH
17902: LD_INT 0
17904: PPUSH
17905: LD_INT 0
17907: PPUSH
17908: CALL 68613 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17912: LD_ADDR_EXP 60
17916: PUSH
17917: LD_EXP 60
17921: PPUSH
17922: LD_EXP 60
17926: PUSH
17927: LD_INT 1
17929: PLUS
17930: PPUSH
17931: LD_VAR 0 3
17935: PPUSH
17936: CALL_OW 1
17940: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17941: LD_INT 0
17943: PPUSH
17944: LD_INT 3
17946: PPUSH
17947: LD_OWVAR 67
17951: PUSH
17952: LD_INT 2
17954: PLUS
17955: PPUSH
17956: CALL_OW 380
// un := CreateHuman ;
17960: LD_ADDR_VAR 0 2
17964: PUSH
17965: CALL_OW 44
17969: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17970: LD_VAR 0 2
17974: PPUSH
17975: LD_VAR 0 3
17979: PPUSH
17980: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17984: LD_ADDR_EXP 60
17988: PUSH
17989: LD_EXP 60
17993: PPUSH
17994: LD_EXP 60
17998: PUSH
17999: LD_INT 1
18001: PLUS
18002: PPUSH
18003: LD_VAR 0 2
18007: PPUSH
18008: CALL_OW 1
18012: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18013: LD_VAR 0 2
18017: PPUSH
18018: LD_INT 130
18020: PPUSH
18021: LD_INT 233
18023: PPUSH
18024: CALL_OW 111
// wait ( 0 0$2 ) ;
18028: LD_INT 70
18030: PPUSH
18031: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18035: LD_ADDR_VAR 0 4
18039: PUSH
18040: LD_VAR 0 4
18044: PPUSH
18045: LD_VAR 0 4
18049: PUSH
18050: LD_INT 1
18052: PLUS
18053: PPUSH
18054: LD_VAR 0 3
18058: PPUSH
18059: CALL_OW 1
18063: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18064: LD_ADDR_VAR 0 4
18068: PUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: LD_VAR 0 4
18078: PUSH
18079: LD_INT 1
18081: PLUS
18082: PPUSH
18083: LD_VAR 0 2
18087: PPUSH
18088: CALL_OW 1
18092: ST_TO_ADDR
// end ;
18093: GO 17785
18095: POP
18096: POP
// for i in tmp do
18097: LD_ADDR_VAR 0 1
18101: PUSH
18102: LD_VAR 0 4
18106: PUSH
18107: FOR_IN
18108: IFFALSE 18222
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_INT 130
18117: PUSH
18118: LD_INT 229
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 137
18127: PUSH
18128: LD_INT 216
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 142
18137: PUSH
18138: LD_INT 194
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 140
18147: PUSH
18148: LD_INT 169
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 146
18157: PUSH
18158: LD_INT 162
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 174
18167: PUSH
18168: LD_INT 161
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 158
18177: PUSH
18178: LD_INT 134
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 136
18187: PUSH
18188: LD_INT 107
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 115
18197: PUSH
18198: LD_INT 89
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL 69077 0 2
18220: GO 18107
18222: POP
18223: POP
// repeat wait ( 0 0$2 ) ;
18224: LD_INT 70
18226: PPUSH
18227: CALL_OW 67
// for i in tmp do
18231: LD_ADDR_VAR 0 1
18235: PUSH
18236: LD_VAR 0 4
18240: PUSH
18241: FOR_IN
18242: IFFALSE 18309
// if IsDead ( i ) then
18244: LD_VAR 0 1
18248: PPUSH
18249: CALL_OW 301
18253: IFFALSE 18273
// tmp := tmp diff i else
18255: LD_ADDR_VAR 0 4
18259: PUSH
18260: LD_VAR 0 4
18264: PUSH
18265: LD_VAR 0 1
18269: DIFF
18270: ST_TO_ADDR
18271: GO 18307
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18273: LD_VAR 0 1
18277: PPUSH
18278: LD_INT 81
18280: PUSH
18281: LD_INT 3
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PPUSH
18288: CALL_OW 69
18292: PPUSH
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 74
18302: PPUSH
18303: CALL_OW 115
18307: GO 18241
18309: POP
18310: POP
// until not tmp ;
18311: LD_VAR 0 4
18315: NOT
18316: IFFALSE 18224
// end ;
18318: PPOPN 4
18320: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18321: LD_EXP 6
18325: IFFALSE 18784
18327: GO 18329
18329: DISABLE
18330: LD_INT 0
18332: PPUSH
18333: PPUSH
18334: PPUSH
18335: PPUSH
// begin wait ( 3 3$00 ) ;
18336: LD_INT 6300
18338: PPUSH
18339: CALL_OW 67
// for i := 1 to 3 do
18343: LD_ADDR_VAR 0 1
18347: PUSH
18348: DOUBLE
18349: LD_INT 1
18351: DEC
18352: ST_TO_ADDR
18353: LD_INT 3
18355: PUSH
18356: FOR_TO
18357: IFFALSE 18656
// begin InitHc ;
18359: CALL_OW 19
// InitVc ;
18363: CALL_OW 20
// uc_side := 3 ;
18367: LD_ADDR_OWVAR 20
18371: PUSH
18372: LD_INT 3
18374: ST_TO_ADDR
// uc_nation := 3 ;
18375: LD_ADDR_OWVAR 21
18379: PUSH
18380: LD_INT 3
18382: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18383: LD_INT 22
18385: PUSH
18386: LD_INT 23
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 1
18395: PPUSH
18396: LD_INT 2
18398: PPUSH
18399: CALL_OW 12
18403: ARRAY
18404: PPUSH
18405: LD_INT 1
18407: PPUSH
18408: LD_INT 1
18410: PPUSH
18411: LD_INT 44
18413: PUSH
18414: LD_INT 43
18416: PUSH
18417: LD_INT 42
18419: PUSH
18420: LD_INT 44
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: PPUSH
18432: LD_INT 4
18434: PPUSH
18435: CALL_OW 12
18439: ARRAY
18440: PPUSH
18441: LD_INT 99
18443: PPUSH
18444: CALL 34020 0 5
// veh := CreateVehicle ;
18448: LD_ADDR_VAR 0 3
18452: PUSH
18453: CALL_OW 45
18457: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18458: LD_VAR 0 3
18462: PPUSH
18463: LD_INT 293
18465: PPUSH
18466: LD_INT 246
18468: PPUSH
18469: LD_INT 5
18471: PPUSH
18472: LD_INT 0
18474: PPUSH
18475: CALL 68613 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18479: LD_ADDR_EXP 60
18483: PUSH
18484: LD_EXP 60
18488: PPUSH
18489: LD_EXP 60
18493: PUSH
18494: LD_INT 1
18496: PLUS
18497: PPUSH
18498: LD_VAR 0 3
18502: PPUSH
18503: CALL_OW 1
18507: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18508: LD_INT 0
18510: PPUSH
18511: LD_INT 3
18513: PPUSH
18514: LD_INT 3
18516: PPUSH
18517: CALL_OW 380
// un := CreateHuman ;
18521: LD_ADDR_VAR 0 2
18525: PUSH
18526: CALL_OW 44
18530: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18531: LD_VAR 0 2
18535: PPUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18545: LD_ADDR_EXP 60
18549: PUSH
18550: LD_EXP 60
18554: PPUSH
18555: LD_EXP 60
18559: PUSH
18560: LD_INT 1
18562: PLUS
18563: PPUSH
18564: LD_VAR 0 2
18568: PPUSH
18569: CALL_OW 1
18573: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18574: LD_VAR 0 2
18578: PPUSH
18579: LD_INT 273
18581: PPUSH
18582: LD_INT 227
18584: PPUSH
18585: CALL_OW 111
// wait ( 0 0$2 ) ;
18589: LD_INT 70
18591: PPUSH
18592: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18596: LD_ADDR_VAR 0 4
18600: PUSH
18601: LD_VAR 0 4
18605: PPUSH
18606: LD_VAR 0 4
18610: PUSH
18611: LD_INT 1
18613: PLUS
18614: PPUSH
18615: LD_VAR 0 3
18619: PPUSH
18620: CALL_OW 1
18624: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18625: LD_ADDR_VAR 0 4
18629: PUSH
18630: LD_VAR 0 4
18634: PPUSH
18635: LD_VAR 0 4
18639: PUSH
18640: LD_INT 1
18642: PLUS
18643: PPUSH
18644: LD_VAR 0 2
18648: PPUSH
18649: CALL_OW 1
18653: ST_TO_ADDR
// end ;
18654: GO 18356
18656: POP
18657: POP
// for i in tmp do
18658: LD_ADDR_VAR 0 1
18662: PUSH
18663: LD_VAR 0 4
18667: PUSH
18668: FOR_IN
18669: IFFALSE 18688
// ComAgressiveMove ( i , 330 , 231 ) ;
18671: LD_VAR 0 1
18675: PPUSH
18676: LD_INT 330
18678: PPUSH
18679: LD_INT 231
18681: PPUSH
18682: CALL_OW 114
18686: GO 18668
18688: POP
18689: POP
// repeat wait ( 0 0$2 ) ;
18690: LD_INT 70
18692: PPUSH
18693: CALL_OW 67
// for i in tmp do
18697: LD_ADDR_VAR 0 1
18701: PUSH
18702: LD_VAR 0 4
18706: PUSH
18707: FOR_IN
18708: IFFALSE 18775
// if IsDead ( i ) then
18710: LD_VAR 0 1
18714: PPUSH
18715: CALL_OW 301
18719: IFFALSE 18739
// tmp := tmp diff i else
18721: LD_ADDR_VAR 0 4
18725: PUSH
18726: LD_VAR 0 4
18730: PUSH
18731: LD_VAR 0 1
18735: DIFF
18736: ST_TO_ADDR
18737: GO 18773
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18739: LD_VAR 0 1
18743: PPUSH
18744: LD_INT 81
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: PPUSH
18759: LD_VAR 0 1
18763: PPUSH
18764: CALL_OW 74
18768: PPUSH
18769: CALL_OW 115
18773: GO 18707
18775: POP
18776: POP
// until not tmp ;
18777: LD_VAR 0 4
18781: NOT
18782: IFFALSE 18690
// end ;
18784: PPOPN 4
18786: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
18787: LD_INT 3
18789: PUSH
18790: LD_INT 22
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 32
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PPUSH
18818: CALL_OW 69
18822: IFFALSE 18906
18824: GO 18826
18826: DISABLE
18827: LD_INT 0
18829: PPUSH
// begin enable ;
18830: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
18831: LD_ADDR_VAR 0 1
18835: PUSH
18836: LD_INT 3
18838: PUSH
18839: LD_INT 22
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 32
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PPUSH
18867: CALL_OW 69
18871: PUSH
18872: FOR_IN
18873: IFFALSE 18904
// if GetFuel ( i ) < 3 then
18875: LD_VAR 0 1
18879: PPUSH
18880: CALL_OW 261
18884: PUSH
18885: LD_INT 3
18887: LESS
18888: IFFALSE 18902
// SetFuel ( i , 3 ) ;
18890: LD_VAR 0 1
18894: PPUSH
18895: LD_INT 3
18897: PPUSH
18898: CALL_OW 240
18902: GO 18872
18904: POP
18905: POP
// end ; end_of_file
18906: PPOPN 1
18908: END
// export function Action ; begin
18909: LD_INT 0
18911: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
18912: LD_INT 2
18914: PPUSH
18915: LD_INT 4
18917: PPUSH
18918: CALL_OW 332
// Video ( true ) ;
18922: LD_INT 1
18924: PPUSH
18925: CALL 66445 0 1
// music_nat := 3 ;
18929: LD_ADDR_OWVAR 71
18933: PUSH
18934: LD_INT 3
18936: ST_TO_ADDR
// music_class := music_recon ;
18937: LD_ADDR_OWVAR 72
18941: PUSH
18942: LD_INT 3
18944: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
18945: LD_INT 213
18947: PPUSH
18948: LD_INT 89
18950: PPUSH
18951: CALL_OW 86
// if Kaia and Olaf then
18955: LD_EXP 38
18959: PUSH
18960: LD_EXP 42
18964: AND
18965: IFFALSE 18971
// SceneKaiaWithOlaf ;
18967: CALL 19049 0 0
// if Givi and Kamil then
18971: LD_EXP 34
18975: PUSH
18976: LD_EXP 37
18980: AND
18981: IFFALSE 18987
// SceneWithGiviAndKamil ;
18983: CALL 19620 0 0
// tick := 0 ;
18987: LD_ADDR_OWVAR 1
18991: PUSH
18992: LD_INT 0
18994: ST_TO_ADDR
// wait ( 3 ) ;
18995: LD_INT 3
18997: PPUSH
18998: CALL_OW 67
// Video ( false ) ;
19002: LD_INT 0
19004: PPUSH
19005: CALL 66445 0 1
// ChangeMissionObjectives ( M1 ) ;
19009: LD_STRING M1
19011: PPUSH
19012: CALL_OW 337
// music_nat := music_auto ;
19016: LD_ADDR_OWVAR 71
19020: PUSH
19021: LD_INT 0
19023: ST_TO_ADDR
// music_class := music_auto ;
19024: LD_ADDR_OWVAR 72
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// SaveForQuickRestart ;
19032: CALL_OW 22
// gameActive := true ;
19036: LD_ADDR_EXP 31
19040: PUSH
19041: LD_INT 1
19043: ST_TO_ADDR
// end ;
19044: LD_VAR 0 1
19048: RET
// export function SceneKaiaWithOlaf ; begin
19049: LD_INT 0
19051: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19052: LD_INT 22
19054: PUSH
19055: LD_INT 2
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 30
19064: PUSH
19065: LD_INT 3
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PPUSH
19076: CALL_OW 69
19080: PPUSH
19081: LD_INT 14
19083: PPUSH
19084: LD_INT 1
19086: PPUSH
19087: LD_INT 1
19089: PPUSH
19090: LD_INT 26
19092: PPUSH
19093: CALL_OW 125
// wait ( 0 0$1 ) ;
19097: LD_INT 35
19099: PPUSH
19100: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19104: LD_EXP 38
19108: PPUSH
19109: LD_STRING DK-Mem-1
19111: PPUSH
19112: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19116: LD_EXP 38
19120: PPUSH
19121: LD_STRING DK-Mem-2
19123: PPUSH
19124: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19128: LD_EXP 42
19132: PPUSH
19133: LD_STRING DO-Mem-3
19135: PPUSH
19136: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19140: LD_EXP 38
19144: PPUSH
19145: LD_STRING DK-Mem-4
19147: PPUSH
19148: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19152: LD_EXP 42
19156: PPUSH
19157: LD_STRING DO-Mem-5
19159: PPUSH
19160: CALL_OW 88
// wait ( 0 0$2 ) ;
19164: LD_INT 70
19166: PPUSH
19167: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19171: LD_INT 22
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 30
19183: PUSH
19184: LD_INT 3
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: PPUSH
19200: LD_INT 90
19202: PPUSH
19203: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19207: LD_EXP 42
19211: PPUSH
19212: LD_STRING DO-Mem-6
19214: PPUSH
19215: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19219: LD_EXP 38
19223: PPUSH
19224: LD_STRING DK-Mem-7
19226: PPUSH
19227: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19231: LD_EXP 33
19235: PPUSH
19236: LD_EXP 38
19240: PPUSH
19241: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19245: LD_EXP 33
19249: PPUSH
19250: LD_STRING DH-Mem-8
19252: PPUSH
19253: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19257: LD_EXP 38
19261: PUSH
19262: LD_EXP 42
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: LD_EXP 33
19275: PPUSH
19276: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19280: LD_EXP 42
19284: PPUSH
19285: LD_STRING DO-Mem-9
19287: PPUSH
19288: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19292: LD_EXP 42
19296: PPUSH
19297: LD_STRING DO-Mem-10
19299: PPUSH
19300: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19304: LD_EXP 42
19308: PPUSH
19309: LD_STRING DO-Mem-11
19311: PPUSH
19312: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19316: LD_EXP 42
19320: PPUSH
19321: LD_STRING DO-Mem-12
19323: PPUSH
19324: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19328: LD_EXP 38
19332: PPUSH
19333: LD_STRING DK-Mem-13
19335: PPUSH
19336: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19340: LD_EXP 38
19344: PPUSH
19345: LD_STRING DK-Mem-14
19347: PPUSH
19348: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19352: LD_EXP 38
19356: PPUSH
19357: LD_STRING DK-Mem-15
19359: PPUSH
19360: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19364: LD_EXP 38
19368: PPUSH
19369: LD_STRING DK-Mem-16
19371: PPUSH
19372: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19376: LD_EXP 38
19380: PPUSH
19381: LD_STRING DK-Mem-17
19383: PPUSH
19384: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19388: LD_EXP 42
19392: PPUSH
19393: LD_EXP 38
19397: PPUSH
19398: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19402: LD_EXP 42
19406: PPUSH
19407: LD_STRING DO-Mem-18
19409: PPUSH
19410: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19414: LD_EXP 38
19418: PPUSH
19419: LD_EXP 42
19423: PPUSH
19424: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19428: LD_EXP 38
19432: PPUSH
19433: LD_STRING DK-Mem-19
19435: PPUSH
19436: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19440: LD_EXP 42
19444: PPUSH
19445: LD_INT 214
19447: PPUSH
19448: LD_INT 86
19450: PPUSH
19451: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19455: LD_EXP 42
19459: PPUSH
19460: LD_EXP 38
19464: PPUSH
19465: CALL_OW 179
// if Givi then
19469: LD_EXP 34
19473: IFFALSE 19504
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19475: LD_EXP 34
19479: PPUSH
19480: LD_INT 217
19482: PPUSH
19483: LD_INT 86
19485: PPUSH
19486: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19490: LD_EXP 34
19494: PPUSH
19495: LD_EXP 33
19499: PPUSH
19500: CALL_OW 179
// end ; if Kamil then
19504: LD_EXP 37
19508: IFFALSE 19548
// begin ComExit ( Kamil ) ;
19510: LD_EXP 37
19514: PPUSH
19515: CALL 66871 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19519: LD_EXP 37
19523: PPUSH
19524: LD_INT 212
19526: PPUSH
19527: LD_INT 86
19529: PPUSH
19530: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19534: LD_EXP 37
19538: PPUSH
19539: LD_EXP 33
19543: PPUSH
19544: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19548: LD_INT 70
19550: PPUSH
19551: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19555: LD_EXP 33
19559: PPUSH
19560: LD_STRING DH-Mem-20
19562: PPUSH
19563: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19567: LD_EXP 42
19571: PPUSH
19572: LD_INT 215
19574: PPUSH
19575: LD_INT 87
19577: PPUSH
19578: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19582: LD_EXP 42
19586: PPUSH
19587: LD_EXP 38
19591: PPUSH
19592: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19596: LD_EXP 38
19600: PPUSH
19601: LD_STRING DK-Mem-21
19603: PPUSH
19604: CALL_OW 88
// wait ( 0 0$2 ) ;
19608: LD_INT 70
19610: PPUSH
19611: CALL_OW 67
// end ;
19615: LD_VAR 0 1
19619: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19620: LD_INT 0
19622: PPUSH
19623: PPUSH
// if Markov then
19624: LD_EXP 40
19628: IFFALSE 19746
// begin p := 0 ;
19630: LD_ADDR_VAR 0 2
19634: PUSH
19635: LD_INT 0
19637: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19638: LD_EXP 40
19642: PPUSH
19643: CALL_OW 310
19647: IFFALSE 19658
// ComExit ( Markov ) ;
19649: LD_EXP 40
19653: PPUSH
19654: CALL 66871 0 1
// wait ( 0 0$1 ) ;
19658: LD_INT 35
19660: PPUSH
19661: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19665: LD_EXP 40
19669: PPUSH
19670: LD_INT 212
19672: PPUSH
19673: LD_INT 88
19675: PPUSH
19676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19680: LD_INT 35
19682: PPUSH
19683: CALL_OW 67
// p := Inc ( p ) ;
19687: LD_ADDR_VAR 0 2
19691: PUSH
19692: LD_VAR 0 2
19696: PPUSH
19697: CALL 67834 0 1
19701: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
19702: LD_EXP 40
19706: PPUSH
19707: LD_EXP 33
19711: PPUSH
19712: CALL_OW 296
19716: PUSH
19717: LD_INT 6
19719: LESS
19720: PUSH
19721: LD_VAR 0 2
19725: PUSH
19726: LD_INT 12
19728: GREATER
19729: OR
19730: IFFALSE 19680
// AddComTurnUnit ( Markov , Heike ) ;
19732: LD_EXP 40
19736: PPUSH
19737: LD_EXP 33
19741: PPUSH
19742: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
19746: LD_EXP 34
19750: PPUSH
19751: LD_STRING DG-Obj-1
19753: PPUSH
19754: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
19758: LD_EXP 37
19762: PPUSH
19763: LD_STRING DKam-Obj-2
19765: PPUSH
19766: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
19770: LD_EXP 33
19774: PPUSH
19775: LD_EXP 37
19779: PPUSH
19780: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
19784: LD_EXP 37
19788: PPUSH
19789: LD_STRING DKam-Obj-3
19791: PPUSH
19792: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
19796: LD_EXP 40
19800: PPUSH
19801: LD_STRING DMar-Obj-4
19803: PPUSH
19804: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
19808: LD_EXP 37
19812: PPUSH
19813: LD_STRING DKam-Obj-6
19815: PPUSH
19816: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
19820: LD_EXP 37
19824: PPUSH
19825: LD_STRING DKam-Obj-7
19827: PPUSH
19828: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
19832: LD_EXP 37
19836: PPUSH
19837: LD_STRING DKam-Obj-8
19839: PPUSH
19840: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
19844: LD_EXP 33
19848: PPUSH
19849: LD_STRING DH-Obj-9
19851: PPUSH
19852: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
19856: LD_EXP 37
19860: PPUSH
19861: LD_STRING DKam-Obj-10
19863: PPUSH
19864: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
19868: LD_EXP 37
19872: PPUSH
19873: LD_STRING DKam-Obj-11
19875: PPUSH
19876: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
19880: LD_EXP 40
19884: PPUSH
19885: LD_STRING DMar-Obj-12
19887: PPUSH
19888: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
19892: LD_EXP 40
19896: PPUSH
19897: LD_STRING DMar-Obj-13
19899: PPUSH
19900: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
19904: LD_EXP 40
19908: PPUSH
19909: LD_STRING DMar-Obj-14
19911: PPUSH
19912: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
19916: LD_EXP 42
19920: PPUSH
19921: LD_STRING DO-Obj-15
19923: PPUSH
19924: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
19928: LD_EXP 42
19932: PPUSH
19933: LD_STRING DO-Obj-16
19935: PPUSH
19936: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
19940: LD_EXP 33
19944: PPUSH
19945: LD_STRING DH-Obj-17
19947: PPUSH
19948: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
19952: LD_EXP 42
19956: PPUSH
19957: LD_STRING DO-Obj-18
19959: PPUSH
19960: CALL_OW 88
// end ;
19964: LD_VAR 0 1
19968: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
19969: LD_INT 34
19971: PUSH
19972: LD_INT 92
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PPUSH
19979: CALL_OW 69
19983: IFFALSE 20178
19985: GO 19987
19987: DISABLE
19988: LD_INT 0
19990: PPUSH
// begin wait ( 0 0$2 ) ;
19991: LD_INT 70
19993: PPUSH
19994: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
19998: LD_INT 34
20000: PUSH
20001: LD_INT 92
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PPUSH
20008: CALL_OW 69
20012: PPUSH
20013: CALL_OW 87
// DialogueOn ;
20017: CALL_OW 6
// if Markov then
20021: LD_EXP 40
20025: IFFALSE 20053
// begin Say ( Markov , DMar-Grn-1 ) ;
20027: LD_EXP 40
20031: PPUSH
20032: LD_STRING DMar-Grn-1
20034: PPUSH
20035: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20039: LD_EXP 33
20043: PPUSH
20044: LD_STRING DH-Grn-2
20046: PPUSH
20047: CALL_OW 88
// end else
20051: GO 20152
// if heikeSecondSquad then
20053: LD_EXP 48
20057: IFFALSE 20152
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20059: LD_ADDR_VAR 0 1
20063: PUSH
20064: LD_EXP 48
20068: PUSH
20069: LD_INT 1
20071: PPUSH
20072: LD_EXP 48
20076: PPUSH
20077: CALL_OW 12
20081: ARRAY
20082: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL_OW 258
20092: PUSH
20093: LD_INT 1
20095: DOUBLE
20096: EQUAL
20097: IFTRUE 20101
20099: GO 20116
20101: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20102: LD_VAR 0 1
20106: PPUSH
20107: LD_STRING DArm-Grn-1
20109: PPUSH
20110: CALL_OW 88
20114: GO 20140
20116: LD_INT 2
20118: DOUBLE
20119: EQUAL
20120: IFTRUE 20124
20122: GO 20139
20124: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20125: LD_VAR 0 1
20129: PPUSH
20130: LD_STRING DArf-Grn-1
20132: PPUSH
20133: CALL_OW 88
20137: GO 20140
20139: POP
// Say ( Heike , DH-Grn-2 ) ;
20140: LD_EXP 33
20144: PPUSH
20145: LD_STRING DH-Grn-2
20147: PPUSH
20148: CALL_OW 88
// end ; DialogueOff ;
20152: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20156: LD_STRING MortarConstructed
20158: PPUSH
20159: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20163: LD_STRING SelfPropelledMortar
20165: PPUSH
20166: CALL_OW 339
// mortarConstructed := true ;
20170: LD_ADDR_EXP 15
20174: PUSH
20175: LD_INT 1
20177: ST_TO_ADDR
// end ;
20178: PPOPN 1
20180: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20181: LD_INT 2
20183: PPUSH
20184: LD_INT 8
20186: PPUSH
20187: CALL_OW 294
20191: IFFALSE 20334
20193: GO 20195
20195: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20196: LD_INT 200
20198: PPUSH
20199: LD_INT 162
20201: PPUSH
20202: LD_INT 2
20204: PPUSH
20205: LD_INT 6
20207: NEG
20208: PPUSH
20209: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20213: LD_INT 200
20215: PPUSH
20216: LD_INT 162
20218: PPUSH
20219: LD_INT 2
20221: PPUSH
20222: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20226: LD_INT 200
20228: PPUSH
20229: LD_INT 162
20231: PPUSH
20232: CALL_OW 84
// if not IsOk ( Kurt ) then
20236: LD_EXP 44
20240: PPUSH
20241: CALL_OW 302
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 20334
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20250: LD_EXP 44
20254: PPUSH
20255: LD_STRING DKs-Otpst-2-1
20257: PPUSH
20258: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20262: LD_EXP 38
20266: PPUSH
20267: LD_STRING DK-Otpst-2-2
20269: PPUSH
20270: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20274: LD_EXP 44
20278: PPUSH
20279: LD_STRING DKs-Otpst-2-3
20281: PPUSH
20282: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20286: LD_EXP 44
20290: PPUSH
20291: LD_STRING DKs-Otpst-2-4
20293: PPUSH
20294: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20298: LD_EXP 44
20302: PPUSH
20303: LD_STRING DKs-Otpst-2-5
20305: PPUSH
20306: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20310: LD_EXP 37
20314: PPUSH
20315: LD_STRING DKam-Otpst-2-6
20317: PPUSH
20318: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20322: LD_EXP 44
20326: PPUSH
20327: LD_STRING DKs-Otpst-2-7
20329: PPUSH
20330: CALL_OW 88
// end ;
20334: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20335: LD_INT 8
20337: PPUSH
20338: LD_INT 22
20340: PUSH
20341: LD_INT 3
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 21
20350: PUSH
20351: LD_INT 3
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PPUSH
20362: CALL_OW 70
20366: NOT
20367: PUSH
20368: LD_EXP 3
20372: NOT
20373: AND
20374: IFFALSE 20622
20376: GO 20378
20378: DISABLE
20379: LD_INT 0
20381: PPUSH
// begin outpostDestroyed := true ;
20382: LD_ADDR_EXP 4
20386: PUSH
20387: LD_INT 1
20389: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20390: LD_INT 22
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 34
20402: PUSH
20403: LD_INT 92
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 92
20412: PUSH
20413: LD_INT 195
20415: PUSH
20416: LD_INT 164
20418: PUSH
20419: LD_INT 12
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: LIST
20432: PPUSH
20433: CALL_OW 69
20437: NOT
20438: IFFALSE 20442
// exit ;
20440: GO 20622
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20442: LD_EXP 34
20446: PPUSH
20447: CALL_OW 302
20451: NOT
20452: PUSH
20453: LD_EXP 38
20457: PPUSH
20458: CALL_OW 302
20462: NOT
20463: OR
20464: IFFALSE 20468
// exit ;
20466: GO 20622
// Say ( Givi , DG-Otpst-1-1 ) ;
20468: LD_EXP 34
20472: PPUSH
20473: LD_STRING DG-Otpst-1-1
20475: PPUSH
20476: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20480: LD_EXP 38
20484: PPUSH
20485: LD_STRING DK-Otpst-1-2
20487: PPUSH
20488: CALL_OW 88
// if IsOk ( Markov ) then
20492: LD_EXP 40
20496: PPUSH
20497: CALL_OW 302
20501: IFFALSE 20529
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20503: LD_EXP 40
20507: PPUSH
20508: LD_STRING DMar-Otpst-1-3
20510: PPUSH
20511: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20515: LD_EXP 40
20519: PPUSH
20520: LD_STRING DMar-Otpst-1-4
20522: PPUSH
20523: CALL_OW 88
// end else
20527: GO 20610
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20529: LD_ADDR_VAR 0 1
20533: PUSH
20534: LD_EXP 48
20538: PUSH
20539: LD_INT 1
20541: PPUSH
20542: LD_EXP 48
20546: PPUSH
20547: CALL_OW 12
20551: ARRAY
20552: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20553: LD_VAR 0 1
20557: PPUSH
20558: CALL_OW 258
20562: PUSH
20563: LD_INT 1
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20586
20571: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20572: LD_VAR 0 1
20576: PPUSH
20577: LD_STRING DArm-Otpst-1-a-3
20579: PPUSH
20580: CALL_OW 88
20584: GO 20610
20586: LD_INT 2
20588: DOUBLE
20589: EQUAL
20590: IFTRUE 20594
20592: GO 20609
20594: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20595: LD_VAR 0 1
20599: PPUSH
20600: LD_STRING DArf-Otpst-1-a-3
20602: PPUSH
20603: CALL_OW 88
20607: GO 20610
20609: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20610: LD_EXP 34
20614: PPUSH
20615: LD_STRING DG-Otpst-1-5
20617: PPUSH
20618: CALL_OW 88
// end ;
20622: PPOPN 1
20624: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20625: LD_EXP 38
20629: PPUSH
20630: CALL_OW 256
20634: PUSH
20635: LD_INT 10
20637: LESS
20638: IFFALSE 20752
20640: GO 20642
20642: DISABLE
// begin DialogueOn ;
20643: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20647: LD_EXP 38
20651: PPUSH
20652: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20656: LD_EXP 38
20660: PPUSH
20661: LD_STRING DK-Dead-1
20663: PPUSH
20664: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20668: LD_EXP 33
20672: PPUSH
20673: LD_STRING DH-Dead-2
20675: PPUSH
20676: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
20680: LD_EXP 38
20684: PPUSH
20685: LD_STRING DK-Dead-3
20687: PPUSH
20688: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
20692: LD_EXP 33
20696: PPUSH
20697: LD_STRING DH-Dead-4
20699: PPUSH
20700: CALL_OW 88
// if IsOk ( Mike ) then
20704: LD_EXP 35
20708: PPUSH
20709: CALL_OW 302
20713: IFFALSE 20739
// begin Say ( Mike , DM-Dead-5 ) ;
20715: LD_EXP 35
20719: PPUSH
20720: LD_STRING DM-Dead-5
20722: PPUSH
20723: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
20727: LD_EXP 33
20731: PPUSH
20732: LD_STRING DH-Dead-6
20734: PPUSH
20735: CALL_OW 88
// end ; DialogueOff ;
20739: CALL_OW 7
// KillUnit ( Kaia ) ;
20743: LD_EXP 38
20747: PPUSH
20748: CALL_OW 66
// end ;
20752: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
20753: LD_OWVAR 1
20757: PUSH
20758: LD_INT 31500
20760: GREATEREQUAL
20761: PUSH
20762: LD_EXP 5
20766: PUSH
20767: LD_INT 5
20769: GREATER
20770: OR
20771: PUSH
20772: LD_INT 22
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 92
20784: PUSH
20785: LD_INT 103
20787: PUSH
20788: LD_INT 81
20790: PUSH
20791: LD_INT 20
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PPUSH
20804: CALL_OW 69
20808: OR
20809: IFFALSE 21249
20811: GO 20813
20813: DISABLE
20814: LD_INT 0
20816: PPUSH
20817: PPUSH
20818: PPUSH
// begin PrepareRolfSquad ;
20819: CALL 3318 0 0
// dep := HexInfo ( 86 , 54 ) ;
20823: LD_ADDR_VAR 0 3
20827: PUSH
20828: LD_INT 86
20830: PPUSH
20831: LD_INT 54
20833: PPUSH
20834: CALL_OW 428
20838: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
20839: LD_VAR 0 3
20843: PPUSH
20844: CALL_OW 274
20848: PPUSH
20849: LD_INT 1
20851: PPUSH
20852: LD_INT 300
20854: PPUSH
20855: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
20859: LD_VAR 0 3
20863: PPUSH
20864: CALL_OW 274
20868: PPUSH
20869: LD_INT 2
20871: PPUSH
20872: LD_INT 300
20874: PPUSH
20875: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
20879: LD_EXP 50
20883: PPUSH
20884: LD_INT 79
20886: PPUSH
20887: LD_INT 52
20889: PPUSH
20890: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
20894: LD_INT 35
20896: PPUSH
20897: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
20901: LD_EXP 50
20905: PPUSH
20906: LD_INT 3
20908: PUSH
20909: LD_INT 60
20911: PUSH
20912: EMPTY
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PPUSH
20919: CALL_OW 72
20923: PPUSH
20924: LD_INT 79
20926: PPUSH
20927: LD_INT 52
20929: PPUSH
20930: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20934: LD_INT 12
20936: PPUSH
20937: LD_INT 22
20939: PUSH
20940: LD_INT 3
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 21
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PPUSH
20961: CALL_OW 70
20965: NOT
20966: IFFALSE 20894
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
20968: LD_ADDR_VAR 0 2
20972: PUSH
20973: LD_INT 12
20975: PPUSH
20976: LD_INT 21
20978: PUSH
20979: LD_INT 3
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PPUSH
20986: CALL_OW 70
20990: ST_TO_ADDR
// for i in tmp do
20991: LD_ADDR_VAR 0 1
20995: PUSH
20996: LD_VAR 0 2
21000: PUSH
21001: FOR_IN
21002: IFFALSE 21018
// SetSide ( i , 8 ) ;
21004: LD_VAR 0 1
21008: PPUSH
21009: LD_INT 8
21011: PPUSH
21012: CALL_OW 235
21016: GO 21001
21018: POP
21019: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21020: LD_INT 63
21022: PPUSH
21023: LD_INT 42
21025: PPUSH
21026: CALL_OW 428
21030: PPUSH
21031: LD_INT 320
21033: PPUSH
21034: CALL_OW 234
// wait ( 0 0$10 ) ;
21038: LD_INT 350
21040: PPUSH
21041: CALL_OW 67
// DialogueOn ;
21045: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21049: LD_INT 8
21051: PPUSH
21052: LD_INT 2
21054: PPUSH
21055: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21059: LD_INT 86
21061: PPUSH
21062: LD_INT 54
21064: PPUSH
21065: CALL_OW 428
21069: PPUSH
21070: LD_STRING antwerp
21072: PPUSH
21073: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21077: LD_EXP 46
21081: PPUSH
21082: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21086: LD_EXP 46
21090: PPUSH
21091: LD_STRING DRf-rast-1
21093: PPUSH
21094: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21098: LD_EXP 33
21102: PPUSH
21103: LD_STRING DH-rast-2
21105: PPUSH
21106: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21110: LD_EXP 46
21114: PPUSH
21115: LD_STRING DRf-rast-3
21117: PPUSH
21118: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21122: LD_EXP 46
21126: PPUSH
21127: LD_STRING DRf-rast-4
21129: PPUSH
21130: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21134: LD_EXP 46
21138: PPUSH
21139: LD_STRING DRf-rast-5
21141: PPUSH
21142: CALL_OW 94
// if IsOk ( Aviradze ) then
21146: LD_EXP 45
21150: PPUSH
21151: CALL_OW 302
21155: IFFALSE 21214
// begin CenterNowOnUnits ( Aviradze ) ;
21157: LD_EXP 45
21161: PPUSH
21162: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21166: LD_EXP 45
21170: PPUSH
21171: LD_STRING DA-rast-6
21173: PPUSH
21174: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21178: LD_EXP 33
21182: PPUSH
21183: LD_STRING DH-rast-7
21185: PPUSH
21186: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21190: LD_EXP 34
21194: PPUSH
21195: LD_STRING DG-rast-8
21197: PPUSH
21198: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21202: LD_EXP 34
21206: PPUSH
21207: LD_STRING DG-rast-9
21209: PPUSH
21210: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21214: LD_EXP 33
21218: PPUSH
21219: LD_STRING DH-rast-10
21221: PPUSH
21222: CALL_OW 88
// DialogueOff ;
21226: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21230: LD_STRING M2
21232: PPUSH
21233: CALL_OW 337
// bergkampfArrived := true ;
21237: LD_ADDR_EXP 3
21241: PUSH
21242: LD_INT 1
21244: ST_TO_ADDR
// PrepareRolfBase ;
21245: CALL 3649 0 0
// end ;
21249: PPOPN 3
21251: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21252: LD_INT 12
21254: PPUSH
21255: LD_INT 22
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PPUSH
21265: CALL_OW 70
21269: PUSH
21270: LD_EXP 46
21274: PPUSH
21275: CALL_OW 302
21279: AND
21280: PUSH
21281: LD_EXP 29
21285: AND
21286: IFFALSE 21846
21288: GO 21290
21290: DISABLE
21291: LD_INT 0
21293: PPUSH
// begin rolfScriptBase := false ;
21294: LD_ADDR_EXP 9
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// DialogueOn ;
21302: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21306: LD_EXP 46
21310: PPUSH
21311: CALL_OW 87
// if rolfSquad >= 10 then
21315: LD_EXP 50
21319: PUSH
21320: LD_INT 10
21322: GREATEREQUAL
21323: IFFALSE 21502
// begin linkedWithRolf := 2 ;
21325: LD_ADDR_EXP 12
21329: PUSH
21330: LD_INT 2
21332: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21333: LD_EXP 46
21337: PPUSH
21338: LD_STRING DRf-rast-11
21340: PPUSH
21341: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21345: LD_EXP 33
21349: PPUSH
21350: LD_STRING DH-rast-12
21352: PPUSH
21353: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21357: LD_EXP 46
21361: PPUSH
21362: LD_STRING DRf-rast-13
21364: PPUSH
21365: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21369: LD_EXP 33
21373: PPUSH
21374: LD_STRING DH-rast-14
21376: PPUSH
21377: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21381: LD_EXP 46
21385: PPUSH
21386: LD_STRING DRf-rast-15
21388: PPUSH
21389: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21393: LD_EXP 33
21397: PPUSH
21398: LD_STRING DH-rast-16
21400: PPUSH
21401: CALL_OW 88
// if IsOk ( Mike ) then
21405: LD_EXP 35
21409: PPUSH
21410: CALL_OW 302
21414: IFFALSE 21488
// begin Say ( Mike , DM-rast-17 ) ;
21416: LD_EXP 35
21420: PPUSH
21421: LD_STRING DM-rast-17
21423: PPUSH
21424: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21428: LD_EXP 33
21432: PPUSH
21433: LD_STRING DH-rast-18
21435: PPUSH
21436: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21440: LD_EXP 35
21444: PPUSH
21445: LD_STRING DM-rast-19
21447: PPUSH
21448: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21452: LD_EXP 33
21456: PPUSH
21457: LD_STRING DH-rast-20
21459: PPUSH
21460: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21464: LD_EXP 35
21468: PPUSH
21469: LD_STRING DM-rast-21
21471: PPUSH
21472: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21476: LD_EXP 33
21480: PPUSH
21481: LD_STRING DH-rast-22
21483: PPUSH
21484: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21488: LD_EXP 33
21492: PPUSH
21493: LD_STRING DH-rast-23
21495: PPUSH
21496: CALL_OW 88
// end else
21500: GO 21652
// begin linkedWithRolf := 1 ;
21502: LD_ADDR_EXP 12
21506: PUSH
21507: LD_INT 1
21509: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21510: LD_EXP 46
21514: PPUSH
21515: LD_STRING DRf-rast-a-11
21517: PPUSH
21518: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21522: LD_EXP 33
21526: PPUSH
21527: LD_STRING DH-rast-a-12
21529: PPUSH
21530: CALL_OW 88
// if IsOk ( Kurt ) then
21534: LD_EXP 44
21538: PPUSH
21539: CALL_OW 302
21543: IFFALSE 21640
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21545: LD_EXP 44
21549: PPUSH
21550: LD_STRING DKs-rast-a-13
21552: PPUSH
21553: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21557: LD_EXP 46
21561: PPUSH
21562: LD_STRING DRf-rast-a-14
21564: PPUSH
21565: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21569: LD_EXP 46
21573: PPUSH
21574: LD_STRING DRf-rast-a-15
21576: PPUSH
21577: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21581: LD_EXP 44
21585: PPUSH
21586: LD_STRING DKs-rast-a-16
21588: PPUSH
21589: CALL_OW 88
// if IsOk ( Givi ) then
21593: LD_EXP 34
21597: PPUSH
21598: CALL_OW 302
21602: IFFALSE 21640
// begin Say ( Givi , DG-rast-a-17 ) ;
21604: LD_EXP 34
21608: PPUSH
21609: LD_STRING DG-rast-a-17
21611: PPUSH
21612: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21616: LD_EXP 34
21620: PPUSH
21621: LD_STRING DG-rast-a-18
21623: PPUSH
21624: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21628: LD_EXP 44
21632: PPUSH
21633: LD_STRING DKs-rast-a-19
21635: PPUSH
21636: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21640: LD_EXP 33
21644: PPUSH
21645: LD_STRING DH-rast-a-20
21647: PPUSH
21648: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21652: LD_EXP 46
21656: PPUSH
21657: LD_STRING DRf-rast-24
21659: PPUSH
21660: CALL_OW 88
// if IsOk ( Aviradze ) then
21664: LD_EXP 45
21668: PPUSH
21669: CALL_OW 302
21673: IFFALSE 21773
// begin Say ( Aviradze , DA-rast-25 ) ;
21675: LD_EXP 45
21679: PPUSH
21680: LD_STRING DA-rast-25
21682: PPUSH
21683: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
21687: LD_EXP 33
21691: PPUSH
21692: LD_STRING DH-rast-26
21694: PPUSH
21695: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
21699: LD_EXP 45
21703: PPUSH
21704: LD_STRING DA-rast-27
21706: PPUSH
21707: CALL_OW 88
// if IsOk ( Markov ) then
21711: LD_EXP 40
21715: PPUSH
21716: CALL_OW 302
21720: IFFALSE 21748
// begin Say ( Markov , DMar-rast-28 ) ;
21722: LD_EXP 40
21726: PPUSH
21727: LD_STRING DMar-rast-28
21729: PPUSH
21730: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
21734: LD_EXP 40
21738: PPUSH
21739: LD_STRING DMar-rast-29
21741: PPUSH
21742: CALL_OW 88
// end else
21746: GO 21771
// if IsOk ( Sophia ) then
21748: LD_EXP 39
21752: PPUSH
21753: CALL_OW 302
21757: IFFALSE 21771
// begin Say ( Sophia , DS-rast-28 ) ;
21759: LD_EXP 39
21763: PPUSH
21764: LD_STRING DS-rast-28
21766: PPUSH
21767: CALL_OW 88
// end ; end else
21771: GO 21796
// if IsOk ( Sophia ) then
21773: LD_EXP 39
21777: PPUSH
21778: CALL_OW 302
21782: IFFALSE 21796
// Say ( Sophia , DS-rast-29 ) ;
21784: LD_EXP 39
21788: PPUSH
21789: LD_STRING DS-rast-29
21791: PPUSH
21792: CALL_OW 88
// DialogueOff ;
21796: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
21800: LD_STRING M3
21802: PPUSH
21803: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
21807: LD_ADDR_VAR 0 1
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_INT 8
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PPUSH
21822: CALL_OW 69
21826: PUSH
21827: FOR_IN
21828: IFFALSE 21844
// SetSide ( i , 2 ) ;
21830: LD_VAR 0 1
21834: PPUSH
21835: LD_INT 2
21837: PPUSH
21838: CALL_OW 235
21842: GO 21827
21844: POP
21845: POP
// end ;
21846: PPOPN 1
21848: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
21849: LD_EXP 23
21853: PUSH
21854: LD_EXP 12
21858: NOT
21859: AND
21860: PUSH
21861: LD_EXP 29
21865: AND
21866: IFFALSE 21957
21868: GO 21870
21870: DISABLE
21871: LD_INT 0
21873: PPUSH
// begin canRolfJoin := false ;
21874: LD_ADDR_EXP 29
21878: PUSH
21879: LD_INT 0
21881: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
21882: LD_STRING M3
21884: PPUSH
21885: CALL_OW 337
// for i in rolfSquad do
21889: LD_ADDR_VAR 0 1
21893: PUSH
21894: LD_EXP 50
21898: PUSH
21899: FOR_IN
21900: IFFALSE 21955
// begin ComExit ( i ) ;
21902: LD_VAR 0 1
21906: PPUSH
21907: CALL 66871 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
21911: LD_VAR 0 1
21915: PPUSH
21916: LD_INT 147
21918: PPUSH
21919: LD_INT 162
21921: PPUSH
21922: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
21926: LD_VAR 0 1
21930: PPUSH
21931: LD_INT 1050
21933: PPUSH
21934: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
21938: LD_VAR 0 1
21942: PPUSH
21943: LD_INT 103
21945: PPUSH
21946: LD_INT 162
21948: PPUSH
21949: CALL_OW 174
// end ;
21953: GO 21899
21955: POP
21956: POP
// end ;
21957: PPOPN 1
21959: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
21960: LD_EXP 3
21964: PUSH
21965: LD_EXP 46
21969: PPUSH
21970: CALL_OW 256
21974: PUSH
21975: LD_INT 400
21977: LESS
21978: AND
21979: PUSH
21980: LD_EXP 12
21984: NOT
21985: AND
21986: PUSH
21987: LD_EXP 29
21991: AND
21992: IFFALSE 22266
21994: GO 21996
21996: DISABLE
21997: LD_INT 0
21999: PPUSH
// begin DialogueOn ;
22000: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22004: LD_EXP 46
22008: PPUSH
22009: LD_STRING DRf-rast-f-11
22011: PPUSH
22012: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22016: LD_EXP 46
22020: PPUSH
22021: LD_STRING DRf-rast-f-12
22023: PPUSH
22024: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22028: LD_EXP 46
22032: PPUSH
22033: LD_STRING DRf-rast-f-13
22035: PPUSH
22036: CALL_OW 94
// DialogueOff ;
22040: CALL_OW 7
// KillUnit ( Rolf ) ;
22044: LD_EXP 46
22048: PPUSH
22049: CALL_OW 66
// wait ( 0 0$1 ) ;
22053: LD_INT 35
22055: PPUSH
22056: CALL_OW 67
// if not IsOk ( Givi ) then
22060: LD_EXP 34
22064: PPUSH
22065: CALL_OW 302
22069: NOT
22070: IFFALSE 22074
// exit ;
22072: GO 22266
// DialogueOn ;
22074: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22078: LD_EXP 34
22082: PPUSH
22083: LD_STRING DG-rast-f-14
22085: PPUSH
22086: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22090: LD_EXP 34
22094: PPUSH
22095: LD_STRING DG-rast-f-15
22097: PPUSH
22098: CALL_OW 88
// if IsOk ( Kaia ) then
22102: LD_EXP 38
22106: PPUSH
22107: CALL_OW 302
22111: IFFALSE 22127
// Say ( Kaia , DK-rast-f-16 ) else
22113: LD_EXP 38
22117: PPUSH
22118: LD_STRING DK-rast-f-16
22120: PPUSH
22121: CALL_OW 88
22125: GO 22214
// if heikeSecondSquad then
22127: LD_EXP 48
22131: IFFALSE 22214
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22133: LD_ADDR_VAR 0 1
22137: PUSH
22138: LD_EXP 48
22142: PUSH
22143: LD_INT 1
22145: PPUSH
22146: LD_EXP 48
22150: PPUSH
22151: CALL_OW 12
22155: ARRAY
22156: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 258
22166: PUSH
22167: LD_INT 1
22169: DOUBLE
22170: EQUAL
22171: IFTRUE 22175
22173: GO 22190
22175: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22176: LD_VAR 0 1
22180: PPUSH
22181: LD_STRING DArm-rast-f-a-16
22183: PPUSH
22184: CALL_OW 88
22188: GO 22214
22190: LD_INT 2
22192: DOUBLE
22193: EQUAL
22194: IFTRUE 22198
22196: GO 22213
22198: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22199: LD_VAR 0 1
22203: PPUSH
22204: LD_STRING DArf-rast-f-a-16
22206: PPUSH
22207: CALL_OW 88
22211: GO 22214
22213: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22214: LD_EXP 34
22218: PPUSH
22219: LD_STRING DG-rast-f-17
22221: PPUSH
22222: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22226: LD_EXP 34
22230: PPUSH
22231: LD_STRING DG-rast-f-18
22233: PPUSH
22234: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22238: LD_EXP 34
22242: PPUSH
22243: LD_STRING DG-rast-f-19
22245: PPUSH
22246: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22250: LD_EXP 34
22254: PPUSH
22255: LD_STRING DG-rast-f-20
22257: PPUSH
22258: CALL_OW 88
// DialogueOff ;
22262: CALL_OW 7
// end ;
22266: PPOPN 1
22268: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22269: LD_EXP 31
22273: PUSH
22274: LD_INT 2
22276: PPUSH
22277: LD_INT 10
22279: PPUSH
22280: CALL_OW 294
22284: AND
22285: IFFALSE 22358
22287: GO 22289
22289: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22290: LD_EXP 34
22294: PPUSH
22295: LD_STRING DG-Len-1
22297: PPUSH
22298: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22302: LD_EXP 44
22306: PPUSH
22307: LD_STRING DKs-Len-2
22309: PPUSH
22310: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22314: LD_EXP 44
22318: PPUSH
22319: LD_STRING DKs-Len-3
22321: PPUSH
22322: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22326: LD_EXP 33
22330: PPUSH
22331: LD_STRING DH-Len-4
22333: PPUSH
22334: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22338: LD_EXP 38
22342: PPUSH
22343: LD_STRING DK-Len-5
22345: PPUSH
22346: CALL_OW 88
// leninSpotted := true ;
22350: LD_ADDR_EXP 14
22354: PUSH
22355: LD_INT 1
22357: ST_TO_ADDR
// end ;
22358: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22359: LD_EXP 1
22363: PUSH
22364: LD_EXP 3
22368: PUSH
22369: LD_OWVAR 1
22373: PUSH
22374: LD_INT 67200
22376: PUSH
22377: LD_INT 63000
22379: PUSH
22380: LD_INT 58800
22382: PUSH
22383: LD_INT 54600
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: PUSH
22392: LD_OWVAR 67
22396: ARRAY
22397: GREATER
22398: AND
22399: OR
22400: IFFALSE 23137
22402: GO 22404
22404: DISABLE
22405: LD_INT 0
22407: PPUSH
22408: PPUSH
22409: PPUSH
22410: PPUSH
// begin PrepareOmarSquad ;
22411: CALL 4931 0 0
// repeat wait ( 0 0$1 ) ;
22415: LD_INT 35
22417: PPUSH
22418: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22422: LD_INT 14
22424: PPUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 3
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 21
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 59
22450: PUSH
22451: EMPTY
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PPUSH
22463: CALL_OW 70
22467: NOT
22468: IFFALSE 22415
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22470: LD_ADDR_VAR 0 2
22474: PUSH
22475: LD_INT 14
22477: PPUSH
22478: LD_INT 22
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PPUSH
22488: CALL_OW 70
22492: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22493: LD_ADDR_VAR 0 3
22497: PUSH
22498: LD_VAR 0 2
22502: PUSH
22503: LD_INT 0
22505: GREATER
22506: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22507: LD_ADDR_VAR 0 4
22511: PUSH
22512: LD_EXP 33
22516: PPUSH
22517: LD_INT 14
22519: PPUSH
22520: CALL_OW 308
22524: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22525: LD_VAR 0 2
22529: PPUSH
22530: LD_INT 21
22532: PUSH
22533: LD_INT 3
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PPUSH
22540: CALL_OW 72
22544: IFFALSE 22649
// begin if heikeNearbyOmar then
22546: LD_VAR 0 4
22550: IFFALSE 22566
// Say ( Omar , DOm-Base-1b ) else
22552: LD_EXP 43
22556: PPUSH
22557: LD_STRING DOm-Base-1b
22559: PPUSH
22560: CALL_OW 88
22564: GO 22578
// SayRadio ( Omar , DOm-Base-1br ) ;
22566: LD_EXP 43
22570: PPUSH
22571: LD_STRING DOm-Base-1br
22573: PPUSH
22574: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22578: LD_ADDR_VAR 0 1
22582: PUSH
22583: LD_VAR 0 2
22587: PPUSH
22588: LD_INT 21
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PPUSH
22598: CALL_OW 72
22602: PUSH
22603: FOR_IN
22604: IFFALSE 22645
// begin if UnitsInside ( i ) then
22606: LD_VAR 0 1
22610: PPUSH
22611: CALL_OW 313
22615: IFFALSE 22631
// ComExitBuilding ( UnitsInside ( i ) ) ;
22617: LD_VAR 0 1
22621: PPUSH
22622: CALL_OW 313
22626: PPUSH
22627: CALL_OW 122
// SetSide ( i , 5 ) ;
22631: LD_VAR 0 1
22635: PPUSH
22636: LD_INT 5
22638: PPUSH
22639: CALL_OW 235
// end ;
22643: GO 22603
22645: POP
22646: POP
// end else
22647: GO 22742
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22649: LD_VAR 0 2
22653: PPUSH
22654: LD_INT 21
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 72
22668: IFFALSE 22704
// begin if heikeNearbyOmar then
22670: LD_VAR 0 4
22674: IFFALSE 22690
// Say ( Omar , DOm-Base-1v ) else
22676: LD_EXP 43
22680: PPUSH
22681: LD_STRING DOm-Base-1v
22683: PPUSH
22684: CALL_OW 88
22688: GO 22702
// SayRadio ( Omar , DOm-Base-1vr ) end else
22690: LD_EXP 43
22694: PPUSH
22695: LD_STRING DOm-Base-1vr
22697: PPUSH
22698: CALL_OW 94
22702: GO 22742
// if inOmarBase then
22704: LD_VAR 0 3
22708: IFFALSE 22742
// begin if heikeNearbyOmar then
22710: LD_VAR 0 4
22714: IFFALSE 22730
// Say ( Omar , DOm-Base-1h ) else
22716: LD_EXP 43
22720: PPUSH
22721: LD_STRING DOm-Base-1h
22723: PPUSH
22724: CALL_OW 88
22728: GO 22742
// SayRadio ( Omar , DOm-Base-1hr ) end ;
22730: LD_EXP 43
22734: PPUSH
22735: LD_STRING DOm-Base-1hr
22737: PPUSH
22738: CALL_OW 94
// for i in omarSquad do
22742: LD_ADDR_VAR 0 1
22746: PUSH
22747: LD_EXP 51
22751: PUSH
22752: FOR_IN
22753: IFFALSE 22784
// if GetLives ( i ) < 750 then
22755: LD_VAR 0 1
22759: PPUSH
22760: CALL_OW 256
22764: PUSH
22765: LD_INT 750
22767: LESS
22768: IFFALSE 22782
// SetLives ( i , 1000 ) ;
22770: LD_VAR 0 1
22774: PPUSH
22775: LD_INT 1000
22777: PPUSH
22778: CALL_OW 234
22782: GO 22752
22784: POP
22785: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
22786: LD_ADDR_VAR 0 1
22790: PUSH
22791: LD_INT 14
22793: PPUSH
22794: LD_INT 21
22796: PUSH
22797: LD_INT 3
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PPUSH
22804: CALL_OW 70
22808: PUSH
22809: FOR_IN
22810: IFFALSE 22826
// SetSide ( i , 5 ) ;
22812: LD_VAR 0 1
22816: PPUSH
22817: LD_INT 5
22819: PPUSH
22820: CALL_OW 235
22824: GO 22809
22826: POP
22827: POP
// wait ( 0 0$3 ) ;
22828: LD_INT 105
22830: PPUSH
22831: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
22835: LD_INT 5
22837: PPUSH
22838: LD_INT 2
22840: PPUSH
22841: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
22845: LD_EXP 43
22849: PPUSH
22850: CALL_OW 87
// DialogueOn ;
22854: CALL_OW 6
// if heikeNearbyOmar then
22858: LD_VAR 0 4
22862: IFFALSE 22920
// begin Say ( Omar , DOm-Veh-1a ) ;
22864: LD_EXP 43
22868: PPUSH
22869: LD_STRING DOm-Veh-1a
22871: PPUSH
22872: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
22876: LD_EXP 43
22880: PPUSH
22881: LD_STRING DOm-Veh-2a
22883: PPUSH
22884: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
22888: LD_EXP 43
22892: PPUSH
22893: LD_STRING DOm-Veh-3a
22895: PPUSH
22896: CALL_OW 88
// if mortarConstructed then
22900: LD_EXP 15
22904: IFFALSE 22918
// Say ( Omar , DOm-Veh-4a ) ;
22906: LD_EXP 43
22910: PPUSH
22911: LD_STRING DOm-Veh-4a
22913: PPUSH
22914: CALL_OW 88
// end else
22918: GO 22974
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
22920: LD_EXP 43
22924: PPUSH
22925: LD_STRING DOm-Veh-1
22927: PPUSH
22928: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
22932: LD_EXP 43
22936: PPUSH
22937: LD_STRING DOm-Veh-2
22939: PPUSH
22940: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
22944: LD_EXP 43
22948: PPUSH
22949: LD_STRING DOm-Veh-3
22951: PPUSH
22952: CALL_OW 94
// if mortarConstructed then
22956: LD_EXP 15
22960: IFFALSE 22974
// SayRadio ( Omar , DOm-Veh-4 ) ;
22962: LD_EXP 43
22966: PPUSH
22967: LD_STRING DOm-Veh-4
22969: PPUSH
22970: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
22974: LD_EXP 33
22978: PPUSH
22979: LD_STRING DH-Veh-5
22981: PPUSH
22982: CALL_OW 88
// if IsOk ( Kurt ) then
22986: LD_EXP 44
22990: PPUSH
22991: CALL_OW 302
22995: IFFALSE 23045
// begin Say ( Kurt , DKs-Veh-6 ) ;
22997: LD_EXP 44
23001: PPUSH
23002: LD_STRING DKs-Veh-6
23004: PPUSH
23005: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23009: LD_EXP 44
23013: PPUSH
23014: LD_STRING DKs-Veh-7
23016: PPUSH
23017: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23021: LD_EXP 34
23025: PPUSH
23026: LD_STRING DG-Veh-8
23028: PPUSH
23029: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23033: LD_EXP 35
23037: PPUSH
23038: LD_STRING DM-Veh-9
23040: PPUSH
23041: CALL_OW 88
// end ; DialogueOff ;
23045: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23049: LD_STRING M4
23051: PPUSH
23052: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23056: LD_EXP 43
23060: PPUSH
23061: LD_INT 341
23063: PPUSH
23064: LD_INT 232
23066: PPUSH
23067: CALL_OW 428
23071: PPUSH
23072: CALL_OW 120
// omarArrived := true ;
23076: LD_ADDR_EXP 6
23080: PUSH
23081: LD_INT 1
23083: ST_TO_ADDR
// omarScriptBase := true ;
23084: LD_ADDR_EXP 10
23088: PUSH
23089: LD_INT 1
23091: ST_TO_ADDR
// omarWantVehicles := true ;
23092: LD_ADDR_EXP 18
23096: PUSH
23097: LD_INT 1
23099: ST_TO_ADDR
// if debug then
23100: LD_EXP 1
23104: IFFALSE 23137
// begin wait ( 0 0$25 ) ;
23106: LD_INT 875
23108: PPUSH
23109: CALL_OW 67
// omarScriptBase := false ;
23113: LD_ADDR_EXP 10
23117: PUSH
23118: LD_INT 0
23120: ST_TO_ADDR
// omarWantVehicles := false ;
23121: LD_ADDR_EXP 18
23125: PUSH
23126: LD_INT 0
23128: ST_TO_ADDR
// omarAttack := true ;
23129: LD_ADDR_EXP 23
23133: PUSH
23134: LD_INT 1
23136: ST_TO_ADDR
// end ; end ;
23137: PPOPN 4
23139: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23140: LD_INT 10
23142: PPUSH
23143: LD_INT 22
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PPUSH
23153: CALL_OW 70
23157: PUSH
23158: LD_EXP 6
23162: AND
23163: PUSH
23164: LD_EXP 43
23168: PPUSH
23169: CALL_OW 302
23173: AND
23174: PUSH
23175: LD_EXP 23
23179: NOT
23180: AND
23181: IFFALSE 23198
23183: GO 23185
23185: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23186: LD_EXP 43
23190: PPUSH
23191: LD_STRING DOm-Lenin
23193: PPUSH
23194: CALL_OW 94
23198: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23199: LD_EXP 46
23203: PPUSH
23204: CALL_OW 302
23208: PUSH
23209: LD_EXP 12
23213: AND
23214: PUSH
23215: LD_EXP 6
23219: AND
23220: IFFALSE 23324
23222: GO 23224
23224: DISABLE
// begin wait ( 1 1$00 ) ;
23225: LD_INT 2100
23227: PPUSH
23228: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23232: LD_EXP 46
23236: PPUSH
23237: CALL_OW 87
// DialogueOn ;
23241: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23245: LD_EXP 46
23249: PPUSH
23250: LD_STRING DRf-Veh-10
23252: PPUSH
23253: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23257: LD_EXP 46
23261: PPUSH
23262: LD_STRING DRf-Veh-11
23264: PPUSH
23265: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23269: LD_EXP 33
23273: PPUSH
23274: LD_STRING DH-Veh-12
23276: PPUSH
23277: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23281: LD_EXP 33
23285: PPUSH
23286: LD_STRING DH-Veh-13
23288: PPUSH
23289: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23293: LD_EXP 46
23297: PPUSH
23298: LD_STRING DRf-Veh-14
23300: PPUSH
23301: CALL_OW 88
// DialogueOff ;
23305: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23309: LD_STRING M5
23311: PPUSH
23312: CALL_OW 337
// rolfWantVehicles := true ;
23316: LD_ADDR_EXP 17
23320: PUSH
23321: LD_INT 1
23323: ST_TO_ADDR
// end ;
23324: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23325: LD_EXP 18
23329: IFFALSE 24092
23331: GO 23333
23333: DISABLE
23334: LD_INT 0
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
23340: PPUSH
23341: PPUSH
// begin wait ( 0 0$3 ) ;
23342: LD_INT 105
23344: PPUSH
23345: CALL_OW 67
// Hint ( OmarVehicles ) ;
23349: LD_STRING OmarVehicles
23351: PPUSH
23352: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23356: LD_INT 16
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23366: LD_INT 35
23368: PPUSH
23369: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23373: LD_ADDR_EXP 20
23377: PUSH
23378: LD_EXP 20
23382: PUSH
23383: LD_INT 35
23385: MINUS
23386: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23387: LD_EXP 20
23391: PUSH
23392: LD_INT 0
23394: LESSEQUAL
23395: IFFALSE 23495
// begin display_strings := [ ] ;
23397: LD_ADDR_OWVAR 47
23401: PUSH
23402: EMPTY
23403: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23404: LD_STRING M4a
23406: PPUSH
23407: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23411: LD_INT 16
23413: PPUSH
23414: LD_INT 0
23416: PPUSH
23417: CALL_OW 424
// DialogueOn ;
23421: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23425: LD_EXP 43
23429: PPUSH
23430: LD_STRING DOm-Veh-b-15
23432: PPUSH
23433: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23437: LD_EXP 33
23441: PPUSH
23442: LD_STRING DH-Veh-b-16
23444: PPUSH
23445: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23449: LD_EXP 43
23453: PPUSH
23454: LD_STRING DOm-Veh-b-17
23456: PPUSH
23457: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23461: LD_EXP 38
23465: PPUSH
23466: LD_STRING DK-Veh-b-18
23468: PPUSH
23469: CALL_OW 88
// DialogueOff ;
23473: CALL_OW 7
// omarAttack := true ;
23477: LD_ADDR_EXP 23
23481: PUSH
23482: LD_INT 1
23484: ST_TO_ADDR
// omarScriptBase := false ;
23485: LD_ADDR_EXP 10
23489: PUSH
23490: LD_INT 0
23492: ST_TO_ADDR
// exit ;
23493: GO 24092
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23495: LD_EXP 21
23499: PUSH
23500: LD_INT 16
23502: PPUSH
23503: LD_INT 22
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 21
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: LD_INT 34
23531: PUSH
23532: LD_INT 32
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 34
23541: PUSH
23542: LD_INT 88
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 34
23551: PUSH
23552: LD_INT 31
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 33
23571: PUSH
23572: LD_INT 1
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 58
23581: PUSH
23582: EMPTY
23583: LIST
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: PPUSH
23592: CALL_OW 70
23596: LESSEQUAL
23597: IFFALSE 23366
// omarWaitingForVehiclesTimer := 0 0$00 ;
23599: LD_ADDR_EXP 20
23603: PUSH
23604: LD_INT 0
23606: ST_TO_ADDR
// display_strings := [ ] ;
23607: LD_ADDR_OWVAR 47
23611: PUSH
23612: EMPTY
23613: ST_TO_ADDR
// DialogueOn ;
23614: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23618: LD_EXP 43
23622: PPUSH
23623: LD_STRING DOm-Veh-a-15
23625: PPUSH
23626: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23630: LD_EXP 38
23634: PPUSH
23635: LD_STRING DK-Veh-a-16
23637: PPUSH
23638: CALL_OW 88
// DialogueOff ;
23642: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23646: LD_STRING M4a
23648: PPUSH
23649: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23653: LD_INT 16
23655: PPUSH
23656: LD_INT 0
23658: PPUSH
23659: CALL_OW 424
// omarHasVehicles := true ;
23663: LD_ADDR_EXP 22
23667: PUSH
23668: LD_INT 1
23670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23671: LD_INT 35
23673: PPUSH
23674: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23678: LD_EXP 19
23682: PUSH
23683: LD_INT 0
23685: EQUAL
23686: IFFALSE 23671
// wait ( 1 1$00 ) ;
23688: LD_INT 2100
23690: PPUSH
23691: CALL_OW 67
// omarAttack := true ;
23695: LD_ADDR_EXP 23
23699: PUSH
23700: LD_INT 1
23702: ST_TO_ADDR
// omarScriptBase := false ;
23703: LD_ADDR_EXP 10
23707: PUSH
23708: LD_INT 0
23710: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23711: LD_ADDR_VAR 0 2
23715: PUSH
23716: LD_INT 16
23718: PPUSH
23719: LD_INT 22
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 21
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 33
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 58
23751: PUSH
23752: EMPTY
23753: LIST
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: PPUSH
23761: CALL_OW 70
23765: ST_TO_ADDR
// for i in tmp do
23766: LD_ADDR_VAR 0 1
23770: PUSH
23771: LD_VAR 0 2
23775: PUSH
23776: FOR_IN
23777: IFFALSE 23805
// begin SetFuel ( i , 100 ) ;
23779: LD_VAR 0 1
23783: PPUSH
23784: LD_INT 100
23786: PPUSH
23787: CALL_OW 240
// SetSide ( i , 5 ) ;
23791: LD_VAR 0 1
23795: PPUSH
23796: LD_INT 5
23798: PPUSH
23799: CALL_OW 235
// end ;
23803: GO 23776
23805: POP
23806: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
23807: LD_ADDR_VAR 0 3
23811: PUSH
23812: LD_EXP 51
23816: PPUSH
23817: LD_INT 25
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PPUSH
23827: CALL_OW 72
23831: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
23832: LD_ADDR_VAR 0 4
23836: PUSH
23837: LD_EXP 51
23841: PPUSH
23842: LD_INT 3
23844: PUSH
23845: LD_INT 55
23847: PUSH
23848: EMPTY
23849: LIST
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 25
23857: PUSH
23858: LD_INT 3
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PPUSH
23869: CALL_OW 72
23873: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
23874: LD_ADDR_VAR 0 5
23878: PUSH
23879: LD_INT 324
23881: PPUSH
23882: LD_INT 234
23884: PPUSH
23885: CALL_OW 428
23889: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
23890: LD_ADDR_VAR 0 6
23894: PUSH
23895: LD_INT 334
23897: PPUSH
23898: LD_INT 241
23900: PPUSH
23901: CALL_OW 428
23905: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
23906: LD_VAR 0 6
23910: PPUSH
23911: CALL_OW 313
23915: PPUSH
23916: CALL_OW 122
// if eng then
23920: LD_VAR 0 3
23924: IFFALSE 24032
// begin if eng + mech <= tmp then
23926: LD_VAR 0 3
23930: PUSH
23931: LD_VAR 0 4
23935: PLUS
23936: PUSH
23937: LD_VAR 0 2
23941: LESSEQUAL
23942: IFFALSE 23997
// begin ComEnterUnit ( eng , workshop ) ;
23944: LD_VAR 0 3
23948: PPUSH
23949: LD_VAR 0 5
23953: PPUSH
23954: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
23958: LD_VAR 0 3
23962: PPUSH
23963: LD_INT 3
23965: PPUSH
23966: CALL_OW 183
// AddComExitBuilding ( eng ) ;
23970: LD_VAR 0 3
23974: PPUSH
23975: CALL_OW 182
// mech := mech union eng ;
23979: LD_ADDR_VAR 0 4
23983: PUSH
23984: LD_VAR 0 4
23988: PUSH
23989: LD_VAR 0 3
23993: UNION
23994: ST_TO_ADDR
// end else
23995: GO 24032
// begin ComEnterUnit ( eng , armoury ) ;
23997: LD_VAR 0 3
24001: PPUSH
24002: LD_VAR 0 6
24006: PPUSH
24007: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24011: LD_VAR 0 3
24015: PPUSH
24016: LD_INT 1
24018: PPUSH
24019: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24023: LD_VAR 0 3
24027: PPUSH
24028: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24032: LD_ADDR_VAR 0 1
24036: PUSH
24037: DOUBLE
24038: LD_INT 1
24040: DEC
24041: ST_TO_ADDR
24042: LD_VAR 0 2
24046: PUSH
24047: FOR_TO
24048: IFFALSE 24090
// if i <= mech then
24050: LD_VAR 0 1
24054: PUSH
24055: LD_VAR 0 4
24059: LESSEQUAL
24060: IFFALSE 24088
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24062: LD_VAR 0 4
24066: PUSH
24067: LD_VAR 0 1
24071: ARRAY
24072: PPUSH
24073: LD_VAR 0 2
24077: PUSH
24078: LD_VAR 0 1
24082: ARRAY
24083: PPUSH
24084: CALL_OW 180
24088: GO 24047
24090: POP
24091: POP
// end ;
24092: PPOPN 6
24094: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24095: LD_EXP 46
24099: PPUSH
24100: CALL_OW 302
24104: PUSH
24105: LD_EXP 17
24109: AND
24110: IFFALSE 24734
24112: GO 24114
24114: DISABLE
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24119: LD_INT 35
24121: PPUSH
24122: CALL_OW 67
// hasBadWeapons := false ;
24126: LD_ADDR_VAR 0 2
24130: PUSH
24131: LD_INT 0
24133: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24134: LD_ADDR_EXP 19
24138: PUSH
24139: LD_EXP 19
24143: PUSH
24144: LD_INT 35
24146: MINUS
24147: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24148: LD_EXP 19
24152: PUSH
24153: LD_INT 0
24155: LESSEQUAL
24156: IFFALSE 24418
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24158: LD_ADDR_EXP 19
24162: PUSH
24163: LD_INT 0
24165: ST_TO_ADDR
// display_strings := [ ] ;
24166: LD_ADDR_OWVAR 47
24170: PUSH
24171: EMPTY
24172: ST_TO_ADDR
// DialogueOn ;
24173: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24177: LD_EXP 46
24181: PPUSH
24182: LD_STRING DRf-Veh-b-19
24184: PPUSH
24185: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24189: LD_EXP 46
24193: PPUSH
24194: LD_STRING DRf-Veh-b-20
24196: PPUSH
24197: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24201: LD_EXP 33
24205: PPUSH
24206: LD_STRING DH-Veh-b-21
24208: PPUSH
24209: CALL_OW 88
// if IsOk ( Givi ) then
24213: LD_EXP 34
24217: PPUSH
24218: CALL_OW 302
24222: IFFALSE 24260
// begin Say ( Givi , DG-Veh-b-22 ) ;
24224: LD_EXP 34
24228: PPUSH
24229: LD_STRING DG-Veh-b-22
24231: PPUSH
24232: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24236: LD_EXP 33
24240: PPUSH
24241: LD_STRING DH-Veh-b-23
24243: PPUSH
24244: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24248: LD_EXP 34
24252: PPUSH
24253: LD_STRING DG-Veh-b-24
24255: PPUSH
24256: CALL_OW 88
// end ; DialogueOff ;
24260: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24264: LD_STRING M5a
24266: PPUSH
24267: CALL_OW 337
// for i in rolfSquad do
24271: LD_ADDR_VAR 0 1
24275: PUSH
24276: LD_EXP 50
24280: PUSH
24281: FOR_IN
24282: IFFALSE 24399
// begin SetSide ( i , 8 ) ;
24284: LD_VAR 0 1
24288: PPUSH
24289: LD_INT 8
24291: PPUSH
24292: CALL_OW 235
// if IsDriver ( i ) then
24296: LD_VAR 0 1
24300: PPUSH
24301: CALL 64089 0 1
24305: IFFALSE 24377
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 310
24316: PPUSH
24317: CALL_OW 264
24321: PUSH
24322: LD_INT 51
24324: PUSH
24325: LD_INT 52
24327: PUSH
24328: LD_INT 32
24330: PUSH
24331: LD_INT 88
24333: PUSH
24334: LD_INT 31
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: IN
24344: NOT
24345: IFFALSE 24366
// SetSide ( IsInUnit ( i ) , 8 ) else
24347: LD_VAR 0 1
24351: PPUSH
24352: CALL_OW 310
24356: PPUSH
24357: LD_INT 8
24359: PPUSH
24360: CALL_OW 235
24364: GO 24375
// ComExitVehicle ( i ) ;
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 121
// end else
24375: GO 24397
// if IsInUnit ( i ) then
24377: LD_VAR 0 1
24381: PPUSH
24382: CALL_OW 310
24386: IFFALSE 24397
// ComExitBuilding ( i ) ;
24388: LD_VAR 0 1
24392: PPUSH
24393: CALL_OW 122
// end ;
24397: GO 24281
24399: POP
24400: POP
// wait ( 0 0$10 ) ;
24401: LD_INT 350
24403: PPUSH
24404: CALL_OW 67
// rolfAttack := true ;
24408: LD_ADDR_EXP 32
24412: PUSH
24413: LD_INT 1
24415: ST_TO_ADDR
// exit ;
24416: GO 24734
// end ; if IsDead ( Rolf ) then
24418: LD_EXP 46
24422: PPUSH
24423: CALL_OW 301
24427: IFFALSE 24438
// begin ChangeMissionObjectives ( M5a ) ;
24429: LD_STRING M5a
24431: PPUSH
24432: CALL_OW 337
// exit ;
24436: GO 24734
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24438: LD_EXP 50
24442: PPUSH
24443: LD_INT 55
24445: PUSH
24446: EMPTY
24447: LIST
24448: PPUSH
24449: CALL_OW 72
24453: PPUSH
24454: CALL 31107 0 1
24458: PUSH
24459: LD_EXP 50
24463: PPUSH
24464: CALL 31107 0 1
24468: EQUAL
24469: IFFALSE 24586
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24471: LD_ADDR_VAR 0 1
24475: PUSH
24476: LD_EXP 50
24480: PPUSH
24481: LD_INT 55
24483: PUSH
24484: EMPTY
24485: LIST
24486: PPUSH
24487: CALL_OW 72
24491: PUSH
24492: FOR_IN
24493: IFFALSE 24553
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24495: LD_VAR 0 1
24499: PPUSH
24500: CALL_OW 310
24504: PPUSH
24505: CALL_OW 264
24509: PUSH
24510: LD_INT 51
24512: PUSH
24513: LD_INT 52
24515: PUSH
24516: LD_INT 32
24518: PUSH
24519: LD_INT 88
24521: PUSH
24522: LD_INT 31
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: IN
24532: IFFALSE 24551
// begin hasBadWeapons := true ;
24534: LD_ADDR_VAR 0 2
24538: PUSH
24539: LD_INT 1
24541: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24542: LD_STRING QBadWeapon
24544: PPUSH
24545: CALL_OW 97
// break ;
24549: GO 24553
// end ;
24551: GO 24492
24553: POP
24554: POP
// if not hasBadWeapons then
24555: LD_VAR 0 2
24559: NOT
24560: IFFALSE 24586
// if Query ( QRolf ) = 1 then
24562: LD_STRING QRolf
24564: PPUSH
24565: CALL_OW 97
24569: PUSH
24570: LD_INT 1
24572: EQUAL
24573: IFFALSE 24579
// break else
24575: GO 24590
24577: GO 24586
// wait ( 0 0$15 ) ;
24579: LD_INT 525
24581: PPUSH
24582: CALL_OW 67
// end ; until false ;
24586: LD_INT 0
24588: IFFALSE 24119
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24590: LD_ADDR_EXP 19
24594: PUSH
24595: LD_INT 0
24597: ST_TO_ADDR
// display_strings := [ ] ;
24598: LD_ADDR_OWVAR 47
24602: PUSH
24603: EMPTY
24604: ST_TO_ADDR
// DialogueOn ;
24605: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24609: LD_EXP 46
24613: PPUSH
24614: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24618: LD_EXP 46
24622: PPUSH
24623: LD_STRING DRf-Veh-a-17
24625: PPUSH
24626: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24630: LD_EXP 33
24634: PPUSH
24635: LD_STRING DH-08-Veh-a-18
24637: PPUSH
24638: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24642: LD_EXP 46
24646: PPUSH
24647: LD_STRING DRf-Veh-a-19
24649: PPUSH
24650: CALL_OW 88
// DialogueOff ;
24654: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24658: LD_STRING M5a
24660: PPUSH
24661: CALL_OW 337
// rolfHasVehicles := true ;
24665: LD_ADDR_EXP 16
24669: PUSH
24670: LD_INT 1
24672: ST_TO_ADDR
// for i in rolfSquad do
24673: LD_ADDR_VAR 0 1
24677: PUSH
24678: LD_EXP 50
24682: PUSH
24683: FOR_IN
24684: IFFALSE 24717
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 310
24695: PPUSH
24696: LD_INT 8
24698: PPUSH
24699: CALL_OW 235
// SetSide ( i , 8 ) ;
24703: LD_VAR 0 1
24707: PPUSH
24708: LD_INT 8
24710: PPUSH
24711: CALL_OW 235
// end ;
24715: GO 24683
24717: POP
24718: POP
// wait ( 0 0$10 ) ;
24719: LD_INT 350
24721: PPUSH
24722: CALL_OW 67
// rolfAttack := true ;
24726: LD_ADDR_EXP 32
24730: PUSH
24731: LD_INT 1
24733: ST_TO_ADDR
// end ;
24734: PPOPN 2
24736: END
// every 0 0$1 trigger leninSpotted do
24737: LD_EXP 14
24741: IFFALSE 24829
24743: GO 24745
24745: DISABLE
// begin wait ( 0 0$10 ) ;
24746: LD_INT 350
24748: PPUSH
24749: CALL_OW 67
// DialogueOn ;
24753: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
24757: LD_EXP 45
24761: PPUSH
24762: LD_STRING DA-Transmission-1
24764: PPUSH
24765: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
24769: LD_EXP 52
24773: PPUSH
24774: LD_STRING DMzw-Transmission-2
24776: PPUSH
24777: CALL_OW 94
// if gaidarKilled then
24781: LD_EXP 7
24785: IFFALSE 24801
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
24787: LD_EXP 52
24791: PPUSH
24792: LD_STRING DMzw-Transmission-3
24794: PPUSH
24795: CALL_OW 94
24799: GO 24813
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
24801: LD_EXP 52
24805: PPUSH
24806: LD_STRING DMzw-Transmission-a-3
24808: PPUSH
24809: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
24813: LD_EXP 33
24817: PPUSH
24818: LD_STRING DH-Transmission-4
24820: PPUSH
24821: CALL_OW 88
// DialogueOff ;
24825: CALL_OW 7
// end ;
24829: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
24830: LD_INT 22
24832: PUSH
24833: LD_INT 3
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 25
24842: PUSH
24843: LD_INT 9
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 101
24852: PUSH
24853: LD_INT 2
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: LIST
24864: PPUSH
24865: CALL_OW 69
24869: PUSH
24870: LD_EXP 33
24874: PPUSH
24875: CALL_OW 302
24879: AND
24880: IFFALSE 24960
24882: GO 24884
24884: DISABLE
// begin wait ( 0 0$3 ) ;
24885: LD_INT 105
24887: PPUSH
24888: CALL_OW 67
// DialogueOn ;
24892: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
24896: LD_INT 22
24898: PUSH
24899: LD_INT 3
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 25
24908: PUSH
24909: LD_INT 9
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 101
24918: PUSH
24919: LD_INT 2
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: LIST
24930: PPUSH
24931: CALL_OW 69
24935: PUSH
24936: LD_INT 1
24938: ARRAY
24939: PPUSH
24940: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
24944: LD_EXP 33
24948: PPUSH
24949: LD_STRING DH-Rubazooka-1
24951: PPUSH
24952: CALL_OW 88
// DialogueOff ;
24956: CALL_OW 7
// end ;
24960: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
24961: LD_INT 19
24963: PPUSH
24964: LD_INT 22
24966: PUSH
24967: LD_INT 3
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PPUSH
24974: CALL_OW 70
24978: PUSH
24979: LD_EXP 28
24983: AND
24984: IFFALSE 25043
24986: GO 24988
24988: DISABLE
// begin DialogueOn ;
24989: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
24993: LD_INT 19
24995: PPUSH
24996: LD_INT 22
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PPUSH
25006: CALL_OW 70
25010: PPUSH
25011: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25015: LD_EXP 33
25019: PPUSH
25020: LD_STRING DH-Ruattfirst-1
25022: PPUSH
25023: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25027: LD_EXP 33
25031: PPUSH
25032: LD_STRING DH-Ruattfirst-2
25034: PPUSH
25035: CALL_OW 88
// DialogueOff ;
25039: CALL_OW 7
// end ;
25043: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25044: LD_INT 19
25046: PPUSH
25047: LD_INT 22
25049: PUSH
25050: LD_INT 3
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PPUSH
25057: CALL_OW 70
25061: PUSH
25062: LD_EXP 28
25066: NOT
25067: AND
25068: IFFALSE 25115
25070: GO 25072
25072: DISABLE
// begin DialogueOn ;
25073: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25077: LD_INT 19
25079: PPUSH
25080: LD_INT 22
25082: PUSH
25083: LD_INT 3
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PPUSH
25090: CALL_OW 70
25094: PPUSH
25095: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25099: LD_EXP 33
25103: PPUSH
25104: LD_STRING DH-Ruattnext-1
25106: PPUSH
25107: CALL_OW 88
// DialogueOff ;
25111: CALL_OW 7
// end ;
25115: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25116: LD_EXP 52
25120: PPUSH
25121: CALL_OW 301
25125: PUSH
25126: LD_EXP 43
25130: PPUSH
25131: CALL_OW 302
25135: AND
25136: IFFALSE 25153
25138: GO 25140
25140: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25141: LD_EXP 43
25145: PPUSH
25146: LD_STRING DOm-Morozov
25148: PPUSH
25149: CALL_OW 94
25153: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25154: LD_EXP 31
25158: PUSH
25159: LD_EXP 47
25163: PPUSH
25164: CALL_OW 274
25168: PPUSH
25169: LD_INT 2
25171: PPUSH
25172: CALL_OW 275
25176: PUSH
25177: LD_INT 30
25179: LESSEQUAL
25180: AND
25181: IFFALSE 25271
25183: GO 25185
25185: DISABLE
// begin wait ( 0 0$10 ) ;
25186: LD_INT 350
25188: PPUSH
25189: CALL_OW 67
// DialogueOn ;
25193: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25197: LD_EXP 33
25201: PPUSH
25202: LD_STRING DH-Fuel-1
25204: PPUSH
25205: CALL_OW 88
// if IsOk ( Givi ) then
25209: LD_EXP 34
25213: PPUSH
25214: CALL_OW 302
25218: IFFALSE 25256
// begin Say ( Givi , DG-Fuel-2 ) ;
25220: LD_EXP 34
25224: PPUSH
25225: LD_STRING DG-Fuel-2
25227: PPUSH
25228: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25232: LD_EXP 34
25236: PPUSH
25237: LD_STRING DG-Fuel-3
25239: PPUSH
25240: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25244: LD_EXP 34
25248: PPUSH
25249: LD_STRING DG-Fuel-4
25251: PPUSH
25252: CALL_OW 88
// end ; DialogueOff ;
25256: CALL_OW 7
// Query ( QOil ) ;
25260: LD_STRING QOil
25262: PPUSH
25263: CALL_OW 97
// GoForOil ( ) ;
25267: CALL 8579 0 0
// end ;
25271: END
// every 0 0$1 trigger ( leninSpotted and omarAttack ) or IsDead ( Morozov ) do
25272: LD_EXP 14
25276: PUSH
25277: LD_EXP 23
25281: AND
25282: PUSH
25283: LD_EXP 52
25287: PPUSH
25288: CALL_OW 301
25292: OR
25293: IFFALSE 25634
25295: GO 25297
25297: DISABLE
// begin if IsDead ( Morozov ) then
25298: LD_EXP 52
25302: PPUSH
25303: CALL_OW 301
25307: IFFALSE 25318
// wait ( 1 1$45 ) else
25309: LD_INT 3675
25311: PPUSH
25312: CALL_OW 67
25316: GO 25346
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25318: LD_INT 19950
25320: PUSH
25321: LD_INT 16800
25323: PUSH
25324: LD_INT 16100
25326: PUSH
25327: LD_INT 13650
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: PUSH
25336: LD_OWVAR 67
25340: ARRAY
25341: PPUSH
25342: CALL_OW 67
// DialogueOn ;
25346: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25350: LD_EXP 41
25354: PPUSH
25355: LD_STRING DShar-End-1
25357: PPUSH
25358: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25362: LD_EXP 33
25366: PPUSH
25367: LD_STRING DH-End-2
25369: PPUSH
25370: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25374: LD_EXP 41
25378: PPUSH
25379: LD_STRING DShar-End-3
25381: PPUSH
25382: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25386: LD_EXP 33
25390: PPUSH
25391: LD_STRING DH-End-4
25393: PPUSH
25394: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25398: LD_EXP 41
25402: PPUSH
25403: LD_STRING DShar-End-5
25405: PPUSH
25406: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25410: LD_EXP 41
25414: PPUSH
25415: LD_STRING DShar-End-6
25417: PPUSH
25418: CALL_OW 94
// dwait ( 0 0$2 ) ;
25422: LD_INT 70
25424: PPUSH
25425: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25429: LD_EXP 33
25433: PPUSH
25434: LD_STRING DH-End-7
25436: PPUSH
25437: CALL_OW 88
// DialogueOff ;
25441: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25445: LD_STRING M6
25447: PPUSH
25448: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25452: LD_INT 17
25454: PPUSH
25455: LD_INT 1
25457: PPUSH
25458: CALL_OW 424
// escapeAllowed := true ;
25462: LD_ADDR_EXP 24
25466: PUSH
25467: LD_INT 1
25469: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25470: LD_INT 70
25472: PPUSH
25473: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25477: LD_EXP 44
25481: PPUSH
25482: LD_STRING DKs-End-8
25484: PPUSH
25485: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25489: LD_EXP 38
25493: PPUSH
25494: LD_STRING DK-End-10
25496: PPUSH
25497: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25501: LD_EXP 44
25505: PPUSH
25506: LD_STRING DKs-End-9
25508: PPUSH
25509: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25513: LD_EXP 40
25517: PPUSH
25518: LD_STRING DMar-End-11
25520: PPUSH
25521: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25525: LD_STRING 05_DrugsTested
25527: PPUSH
25528: LD_EXP 1
25532: PPUSH
25533: CALL_OW 30
25537: IFFALSE 25551
// Say ( Mike , DM-End-12 ) ;
25539: LD_EXP 35
25543: PPUSH
25544: LD_STRING DM-End-12
25546: PPUSH
25547: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25551: LD_EXP 42
25555: PPUSH
25556: LD_STRING DO-End-13
25558: PPUSH
25559: CALL_OW 88
// if IsOk ( Sophia ) then
25563: LD_EXP 39
25567: PPUSH
25568: CALL_OW 302
25572: IFFALSE 25598
// begin Say ( Sophia , DS-End-15 ) ;
25574: LD_EXP 39
25578: PPUSH
25579: LD_STRING DS-End-15
25581: PPUSH
25582: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25586: LD_EXP 38
25590: PPUSH
25591: LD_STRING DK-End-16
25593: PPUSH
25594: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25598: LD_EXP 34
25602: PPUSH
25603: LD_STRING DG-End-17
25605: PPUSH
25606: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25610: LD_EXP 34
25614: PPUSH
25615: LD_STRING DG-End-18
25617: PPUSH
25618: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25622: LD_EXP 34
25626: PPUSH
25627: LD_STRING DG-End-19
25629: PPUSH
25630: CALL_OW 88
// end ;
25634: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25635: LD_EXP 24
25639: IFFALSE 25778
25641: GO 25643
25643: DISABLE
25644: LD_INT 0
25646: PPUSH
25647: PPUSH
// begin repeat wait ( 0 0$1 ) ;
25648: LD_INT 35
25650: PPUSH
25651: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
25655: LD_ADDR_OWVAR 47
25659: PUSH
25660: LD_STRING #X106-2
25662: PUSH
25663: LD_EXP 25
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
25672: LD_ADDR_EXP 25
25676: PUSH
25677: LD_EXP 25
25681: PUSH
25682: LD_INT 35
25684: MINUS
25685: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
25686: LD_ADDR_VAR 0 2
25690: PUSH
25691: LD_INT 17
25693: PPUSH
25694: LD_INT 22
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 21
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 23
25716: PUSH
25717: LD_INT 2
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: LIST
25728: PPUSH
25729: CALL_OW 71
25733: ST_TO_ADDR
// if not outsiders then
25734: LD_VAR 0 2
25738: NOT
25739: IFFALSE 25755
// begin escapeAllowed := false ;
25741: LD_ADDR_EXP 24
25745: PUSH
25746: LD_INT 0
25748: ST_TO_ADDR
// MissionWin ;
25749: CALL 25781 0 0
// exit ;
25753: GO 25778
// end ; if escapeTimer <= 0 0$00 then
25755: LD_EXP 25
25759: PUSH
25760: LD_INT 0
25762: LESSEQUAL
25763: IFFALSE 25774
// begin YouLost ( TimeOut ) ;
25765: LD_STRING TimeOut
25767: PPUSH
25768: CALL_OW 104
// exit ;
25772: GO 25778
// end ; until false ;
25774: LD_INT 0
25776: IFFALSE 25648
// end ;
25778: PPOPN 2
25780: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
25781: LD_INT 0
25783: PPUSH
25784: PPUSH
25785: PPUSH
25786: PPUSH
25787: PPUSH
// Say ( Heike , DH-End-20 ) ;
25788: LD_EXP 33
25792: PPUSH
25793: LD_STRING DH-End-20
25795: PPUSH
25796: CALL_OW 88
// if rolfDied then
25800: LD_EXP 13
25804: IFFALSE 25819
// AddMedal ( med1 , - 1 ) else
25806: LD_STRING med1
25808: PPUSH
25809: LD_INT 1
25811: NEG
25812: PPUSH
25813: CALL_OW 101
25817: GO 25849
// if not canRolfJoin then
25819: LD_EXP 29
25823: NOT
25824: IFFALSE 25839
// AddMedal ( med1 , - 2 ) else
25826: LD_STRING med1
25828: PPUSH
25829: LD_INT 2
25831: NEG
25832: PPUSH
25833: CALL_OW 101
25837: GO 25849
// AddMedal ( med1 , 1 ) ;
25839: LD_STRING med1
25841: PPUSH
25842: LD_INT 1
25844: PPUSH
25845: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
25849: LD_EXP 22
25853: PUSH
25854: LD_EXP 16
25858: AND
25859: IFFALSE 25873
// AddMedal ( med2 , 1 ) else
25861: LD_STRING med2
25863: PPUSH
25864: LD_INT 1
25866: PPUSH
25867: CALL_OW 101
25871: GO 25922
// if omarHasVehicles then
25873: LD_EXP 22
25877: IFFALSE 25892
// AddMedal ( med2 , - 1 ) else
25879: LD_STRING med2
25881: PPUSH
25882: LD_INT 1
25884: NEG
25885: PPUSH
25886: CALL_OW 101
25890: GO 25922
// if rolfHasVehicles then
25892: LD_EXP 16
25896: IFFALSE 25911
// AddMedal ( med2 , - 2 ) else
25898: LD_STRING med2
25900: PPUSH
25901: LD_INT 2
25903: NEG
25904: PPUSH
25905: CALL_OW 101
25909: GO 25922
// AddMedal ( med2 , - 3 ) ;
25911: LD_STRING med2
25913: PPUSH
25914: LD_INT 3
25916: NEG
25917: PPUSH
25918: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 60 ] [ Difficulty ] and heikeLoseCounter = 0 then
25922: LD_EXP 5
25926: PUSH
25927: LD_INT 30
25929: PUSH
25930: LD_INT 45
25932: PUSH
25933: LD_INT 50
25935: PUSH
25936: LD_INT 60
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: PUSH
25945: LD_OWVAR 67
25949: ARRAY
25950: GREATEREQUAL
25951: PUSH
25952: LD_EXP 26
25956: PUSH
25957: LD_INT 0
25959: EQUAL
25960: AND
25961: IFFALSE 25975
// AddMedal ( med3 , 1 ) else
25963: LD_STRING med3
25965: PPUSH
25966: LD_INT 1
25968: PPUSH
25969: CALL_OW 101
25973: GO 26005
// if heikeLoseCounter then
25975: LD_EXP 26
25979: IFFALSE 25994
// AddMedal ( med3 , - 2 ) else
25981: LD_STRING med3
25983: PPUSH
25984: LD_INT 2
25986: NEG
25987: PPUSH
25988: CALL_OW 101
25992: GO 26005
// AddMedal ( med3 , - 1 ) ;
25994: LD_STRING med3
25996: PPUSH
25997: LD_INT 1
25999: NEG
26000: PPUSH
26001: CALL_OW 101
// GiveMedals ( MAIN ) ;
26005: LD_STRING MAIN
26007: PPUSH
26008: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26012: LD_INT 22
26014: PUSH
26015: LD_INT 2
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 23
26024: PUSH
26025: LD_INT 2
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 21
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: PPUSH
26047: CALL_OW 69
26051: PPUSH
26052: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26056: LD_EXP 33
26060: PPUSH
26061: LD_STRING 06_Heike
26063: PPUSH
26064: CALL_OW 38
// if Aviradze then
26068: LD_EXP 45
26072: IFFALSE 26086
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26074: LD_EXP 45
26078: PPUSH
26079: LD_STRING 06_Aviradze
26081: PPUSH
26082: CALL_OW 38
// if Ibrahim then
26086: LD_EXP 36
26090: IFFALSE 26104
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26092: LD_EXP 36
26096: PPUSH
26097: LD_STRING 06_Ibrahim
26099: PPUSH
26100: CALL_OW 38
// if Kamil then
26104: LD_EXP 37
26108: IFFALSE 26122
// SaveCharacters ( Kamil , 06_Kamil ) ;
26110: LD_EXP 37
26114: PPUSH
26115: LD_STRING 06_Kamil
26117: PPUSH
26118: CALL_OW 38
// if Sophia then
26122: LD_EXP 39
26126: IFFALSE 26140
// SaveCharacters ( Sophia , 06_Sophia ) ;
26128: LD_EXP 39
26132: PPUSH
26133: LD_STRING 06_Sophia
26135: PPUSH
26136: CALL_OW 38
// if Kaia then
26140: LD_EXP 38
26144: IFFALSE 26158
// SaveCharacters ( Kaia , 06_Kaia ) ;
26146: LD_EXP 38
26150: PPUSH
26151: LD_STRING 06_Kaia
26153: PPUSH
26154: CALL_OW 38
// if Givi then
26158: LD_EXP 34
26162: IFFALSE 26176
// SaveCharacters ( Givi , 06_Givi ) ;
26164: LD_EXP 34
26168: PPUSH
26169: LD_STRING 06_Givi
26171: PPUSH
26172: CALL_OW 38
// if Olaf then
26176: LD_EXP 42
26180: IFFALSE 26194
// SaveCharacters ( Olaf , 06_Olaf ) ;
26182: LD_EXP 42
26186: PPUSH
26187: LD_STRING 06_Olaf
26189: PPUSH
26190: CALL_OW 38
// if Mike then
26194: LD_EXP 35
26198: IFFALSE 26212
// SaveCharacters ( Mike , 06_Mike ) ;
26200: LD_EXP 35
26204: PPUSH
26205: LD_STRING 06_Mike
26207: PPUSH
26208: CALL_OW 38
// if Markov then
26212: LD_EXP 40
26216: IFFALSE 26230
// SaveCharacters ( Markov , 06_Markov ) ;
26218: LD_EXP 40
26222: PPUSH
26223: LD_STRING 06_Markov
26225: PPUSH
26226: CALL_OW 38
// if Kurt then
26230: LD_EXP 44
26234: IFFALSE 26248
// SaveCharacters ( Kurt , 06_Kurt ) ;
26236: LD_EXP 44
26240: PPUSH
26241: LD_STRING 06_Kurt
26243: PPUSH
26244: CALL_OW 38
// if heikeSecondSquad then
26248: LD_EXP 48
26252: IFFALSE 26266
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26254: LD_EXP 48
26258: PPUSH
26259: LD_STRING 06_others
26261: PPUSH
26262: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26266: LD_ADDR_VAR 0 3
26270: PUSH
26271: LD_INT 22
26273: PUSH
26274: LD_INT 2
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 23
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: ST_TO_ADDR
// if tmp then
26300: LD_VAR 0 3
26304: IFFALSE 26318
// SaveCharacters ( tmp , 06_apes ) ;
26306: LD_VAR 0 3
26310: PPUSH
26311: LD_STRING 06_apes
26313: PPUSH
26314: CALL_OW 38
// if Rolf then
26318: LD_EXP 46
26322: IFFALSE 26373
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26324: LD_EXP 46
26328: PPUSH
26329: LD_STRING 06_Rolf
26331: PPUSH
26332: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26336: LD_STRING enableBioCharacter(BIO_ROLF)
26338: PPUSH
26339: CALL_OW 559
// if rolfSquad diff Rolf then
26343: LD_EXP 50
26347: PUSH
26348: LD_EXP 46
26352: DIFF
26353: IFFALSE 26373
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26355: LD_EXP 50
26359: PUSH
26360: LD_EXP 46
26364: DIFF
26365: PPUSH
26366: LD_STRING 06_RolfSquad
26368: PPUSH
26369: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26373: LD_ADDR_VAR 0 3
26377: PUSH
26378: LD_INT 17
26380: PPUSH
26381: LD_INT 21
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PPUSH
26391: CALL_OW 70
26395: ST_TO_ADDR
// if tmp then
26396: LD_VAR 0 3
26400: IFFALSE 26694
// begin tmp2 := [ ] ;
26402: LD_ADDR_VAR 0 4
26406: PUSH
26407: EMPTY
26408: ST_TO_ADDR
// for i in tmp do
26409: LD_ADDR_VAR 0 2
26413: PUSH
26414: LD_VAR 0 3
26418: PUSH
26419: FOR_IN
26420: IFFALSE 26680
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26422: LD_VAR 0 2
26426: PPUSH
26427: CALL_OW 264
26431: PUSH
26432: LD_INT 32
26434: PUSH
26435: LD_INT 12
26437: PUSH
26438: LD_INT 51
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: LIST
26445: IN
26446: IFFALSE 26583
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26448: LD_ADDR_VAR 0 5
26452: PUSH
26453: LD_VAR 0 2
26457: PPUSH
26458: LD_INT 1
26460: PPUSH
26461: CALL_OW 289
26465: PUSH
26466: LD_VAR 0 2
26470: PPUSH
26471: LD_INT 2
26473: PPUSH
26474: CALL_OW 289
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26483: LD_ADDR_VAR 0 4
26487: PUSH
26488: LD_VAR 0 4
26492: PPUSH
26493: LD_VAR 0 4
26497: PUSH
26498: LD_INT 1
26500: PLUS
26501: PPUSH
26502: LD_VAR 0 2
26506: PPUSH
26507: CALL_OW 265
26511: PUSH
26512: LD_VAR 0 2
26516: PPUSH
26517: CALL_OW 262
26521: PUSH
26522: LD_VAR 0 2
26526: PPUSH
26527: CALL_OW 263
26531: PUSH
26532: LD_VAR 0 2
26536: PPUSH
26537: CALL_OW 264
26541: PUSH
26542: LD_VAR 0 2
26546: PPUSH
26547: CALL_OW 248
26551: PUSH
26552: LD_VAR 0 2
26556: PPUSH
26557: CALL_OW 256
26561: PUSH
26562: LD_VAR 0 5
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: PPUSH
26576: CALL_OW 1
26580: ST_TO_ADDR
// end else
26581: GO 26678
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26583: LD_ADDR_VAR 0 4
26587: PUSH
26588: LD_VAR 0 4
26592: PPUSH
26593: LD_VAR 0 4
26597: PUSH
26598: LD_INT 1
26600: PLUS
26601: PPUSH
26602: LD_VAR 0 2
26606: PPUSH
26607: CALL_OW 265
26611: PUSH
26612: LD_VAR 0 2
26616: PPUSH
26617: CALL_OW 262
26621: PUSH
26622: LD_VAR 0 2
26626: PPUSH
26627: CALL_OW 263
26631: PUSH
26632: LD_VAR 0 2
26636: PPUSH
26637: CALL_OW 264
26641: PUSH
26642: LD_VAR 0 2
26646: PPUSH
26647: CALL_OW 248
26651: PUSH
26652: LD_VAR 0 2
26656: PPUSH
26657: CALL_OW 256
26661: PUSH
26662: EMPTY
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: PPUSH
26673: CALL_OW 1
26677: ST_TO_ADDR
26678: GO 26419
26680: POP
26681: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
26682: LD_VAR 0 4
26686: PPUSH
26687: LD_STRING 06_Vehicles
26689: PPUSH
26690: CALL_OW 39
// end ; YouWin ;
26694: CALL_OW 103
// end ; end_of_file
26698: LD_VAR 0 1
26702: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
26703: LD_INT 0
26705: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
26706: LD_VAR 0 1
26710: PPUSH
26711: LD_VAR 0 2
26715: PPUSH
26716: CALL 86508 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
26720: LD_VAR 0 1
26724: PPUSH
26725: CALL_OW 255
26729: PUSH
26730: LD_INT 2
26732: EQUAL
26733: PUSH
26734: LD_OWVAR 52
26738: AND
26739: PUSH
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 263
26749: PUSH
26750: LD_INT 1
26752: EQUAL
26753: AND
26754: IFFALSE 26809
// begin driver := IsDrivenBy ( vehicle ) ;
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL_OW 311
26770: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
26771: LD_VAR 0 1
26775: PPUSH
26776: LD_INT 211
26778: PPUSH
26779: LD_INT 101
26781: PPUSH
26782: CALL_OW 111
// AddComExitVehicle ( driver ) ;
26786: LD_VAR 0 3
26790: PPUSH
26791: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26795: LD_VAR 0 3
26799: PPUSH
26800: LD_VAR 0 2
26804: PPUSH
26805: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
26809: LD_VAR 0 1
26813: PPUSH
26814: CALL_OW 255
26818: PUSH
26819: LD_INT 3
26821: EQUAL
26822: IFFALSE 26853
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
26824: LD_ADDR_EXP 59
26828: PUSH
26829: LD_EXP 59
26833: PPUSH
26834: LD_EXP 59
26838: PUSH
26839: LD_INT 1
26841: PLUS
26842: PPUSH
26843: LD_VAR 0 1
26847: PPUSH
26848: CALL_OW 1
26852: ST_TO_ADDR
// end ;
26853: PPOPN 3
26855: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
26856: LD_VAR 0 1
26860: PPUSH
26861: CALL_OW 255
26865: PUSH
26866: LD_INT 8
26868: EQUAL
26869: PUSH
26870: LD_VAR 0 1
26874: PPUSH
26875: CALL_OW 266
26879: PUSH
26880: LD_INT 4
26882: EQUAL
26883: AND
26884: IFFALSE 26895
// ComUpgrade ( b ) ;
26886: LD_VAR 0 1
26890: PPUSH
26891: CALL_OW 146
// end ;
26895: PPOPN 1
26897: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
26898: LD_VAR 0 1
26902: PPUSH
26903: CALL 86388 0 1
// if un = Heike then
26907: LD_VAR 0 1
26911: PUSH
26912: LD_EXP 33
26916: EQUAL
26917: IFFALSE 26926
// YouLost ( Heike ) ;
26919: LD_STRING Heike
26921: PPUSH
26922: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
26926: LD_VAR 0 1
26930: PUSH
26931: LD_INT 22
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 23
26943: PUSH
26944: LD_INT 2
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PPUSH
26955: CALL_OW 69
26959: IN
26960: IFFALSE 26976
// heikeLoseCounter := heikeLoseCounter + 1 ;
26962: LD_ADDR_EXP 26
26966: PUSH
26967: LD_EXP 26
26971: PUSH
26972: LD_INT 1
26974: PLUS
26975: ST_TO_ADDR
// if un = arDepot then
26976: LD_VAR 0 1
26980: PUSH
26981: LD_EXP 47
26985: EQUAL
26986: IFFALSE 26995
// YouLost ( Base ) ;
26988: LD_STRING Base
26990: PPUSH
26991: CALL_OW 104
// if un = Rolf then
26995: LD_VAR 0 1
26999: PUSH
27000: LD_EXP 46
27004: EQUAL
27005: IFFALSE 27015
// rolfDied := true ;
27007: LD_ADDR_EXP 13
27011: PUSH
27012: LD_INT 1
27014: ST_TO_ADDR
// if un in rolfSquad then
27015: LD_VAR 0 1
27019: PUSH
27020: LD_EXP 50
27024: IN
27025: IFFALSE 27043
// rolfSquad := rolfSquad diff un ;
27027: LD_ADDR_EXP 50
27031: PUSH
27032: LD_EXP 50
27036: PUSH
27037: LD_VAR 0 1
27041: DIFF
27042: ST_TO_ADDR
// if un in omarSquad then
27043: LD_VAR 0 1
27047: PUSH
27048: LD_EXP 51
27052: IN
27053: IFFALSE 27071
// omarSquad := omarSquad diff un ;
27055: LD_ADDR_EXP 51
27059: PUSH
27060: LD_EXP 51
27064: PUSH
27065: LD_VAR 0 1
27069: DIFF
27070: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27071: LD_VAR 0 1
27075: PPUSH
27076: CALL_OW 255
27080: PUSH
27081: LD_INT 3
27083: EQUAL
27084: IFFALSE 27100
// ruLoseCounter := ruLoseCounter + 1 ;
27086: LD_ADDR_EXP 5
27090: PUSH
27091: LD_EXP 5
27095: PUSH
27096: LD_INT 1
27098: PLUS
27099: ST_TO_ADDR
// if un in ruAttackers then
27100: LD_VAR 0 1
27104: PUSH
27105: LD_EXP 60
27109: IN
27110: IFFALSE 27128
// ruAttackers := ruAttackers diff un ;
27112: LD_ADDR_EXP 60
27116: PUSH
27117: LD_EXP 60
27121: PUSH
27122: LD_VAR 0 1
27126: DIFF
27127: ST_TO_ADDR
// end ;
27128: PPOPN 1
27130: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27131: LD_INT 0
27133: PPUSH
27134: PPUSH
27135: PPUSH
27136: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27137: LD_VAR 0 2
27141: PPUSH
27142: CALL_OW 255
27146: PUSH
27147: LD_INT 8
27149: EQUAL
27150: PUSH
27151: LD_EXP 32
27155: AND
27156: IFFALSE 27173
// ComMoveXY ( un , 221 , 161 ) ;
27158: LD_VAR 0 1
27162: PPUSH
27163: LD_INT 221
27165: PPUSH
27166: LD_INT 161
27168: PPUSH
27169: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27173: LD_VAR 0 2
27177: PPUSH
27178: CALL_OW 255
27182: PUSH
27183: LD_INT 5
27185: EQUAL
27186: PUSH
27187: LD_EXP 23
27191: AND
27192: IFFALSE 27301
// begin ComMoveXY ( un , 333 , 233 ) ;
27194: LD_VAR 0 1
27198: PPUSH
27199: LD_INT 333
27201: PPUSH
27202: LD_INT 233
27204: PPUSH
27205: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27209: LD_INT 334
27211: PPUSH
27212: LD_INT 241
27214: PPUSH
27215: CALL_OW 428
27219: NOT
27220: PUSH
27221: LD_INT 334
27223: PPUSH
27224: LD_INT 241
27226: PPUSH
27227: CALL_OW 428
27231: PPUSH
27232: CALL_OW 266
27236: PUSH
27237: LD_INT 4
27239: EQUAL
27240: NOT
27241: OR
27242: IFFALSE 27246
// exit ;
27244: GO 27823
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27246: LD_VAR 0 1
27250: PPUSH
27251: LD_INT 334
27253: PPUSH
27254: LD_INT 241
27256: PPUSH
27257: CALL_OW 428
27261: PPUSH
27262: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27266: LD_VAR 0 1
27270: PPUSH
27271: LD_INT 1
27273: PPUSH
27274: CALL_OW 183
// AddComExitBuilding ( un ) ;
27278: LD_VAR 0 1
27282: PPUSH
27283: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27287: LD_VAR 0 1
27291: PPUSH
27292: LD_EXP 43
27296: PPUSH
27297: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 255
27310: PUSH
27311: LD_INT 3
27313: EQUAL
27314: PUSH
27315: LD_VAR 0 1
27319: PUSH
27320: LD_EXP 60
27324: IN
27325: NOT
27326: AND
27327: IFFALSE 27823
// begin if not IsInArea ( un , ruMainBase ) then
27329: LD_VAR 0 1
27333: PPUSH
27334: LD_INT 10
27336: PPUSH
27337: CALL_OW 308
27341: NOT
27342: IFFALSE 27356
// ComMoveToArea ( un , ruMainBase ) ;
27344: LD_VAR 0 1
27348: PPUSH
27349: LD_INT 10
27351: PPUSH
27352: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
27356: LD_INT 35
27358: PPUSH
27359: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27363: LD_VAR 0 1
27367: PPUSH
27368: CALL_OW 302
27372: NOT
27373: PUSH
27374: LD_VAR 0 1
27378: PPUSH
27379: LD_INT 10
27381: PPUSH
27382: CALL_OW 308
27386: OR
27387: IFFALSE 27356
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27389: LD_ADDR_EXP 58
27393: PUSH
27394: LD_EXP 58
27398: PPUSH
27399: LD_EXP 58
27403: PUSH
27404: LD_INT 1
27406: PLUS
27407: PPUSH
27408: LD_VAR 0 1
27412: PPUSH
27413: CALL_OW 1
27417: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27418: LD_ADDR_VAR 0 8
27422: PUSH
27423: LD_INT 72
27425: PUSH
27426: LD_INT 12
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: ST_TO_ADDR
// if tmp then
27433: LD_VAR 0 8
27437: IFFALSE 27552
// for i in tmp do
27439: LD_ADDR_VAR 0 5
27443: PUSH
27444: LD_VAR 0 8
27448: PUSH
27449: FOR_IN
27450: IFFALSE 27550
// if UnitsInside ( i ) < 6 then
27452: LD_VAR 0 5
27456: PPUSH
27457: CALL_OW 313
27461: PUSH
27462: LD_INT 6
27464: LESS
27465: IFFALSE 27548
// begin AddComEnterUnit ( un , i ) ;
27467: LD_VAR 0 1
27471: PPUSH
27472: LD_VAR 0 5
27476: PPUSH
27477: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27481: LD_VAR 0 8
27485: PPUSH
27486: LD_INT 22
27488: PUSH
27489: LD_INT 23
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PPUSH
27499: LD_INT 2
27501: PPUSH
27502: CALL_OW 12
27506: ARRAY
27507: PPUSH
27508: LD_INT 1
27510: PPUSH
27511: LD_INT 1
27513: PPUSH
27514: LD_INT 44
27516: PUSH
27517: LD_INT 46
27519: PUSH
27520: LD_INT 47
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: PPUSH
27531: LD_INT 3
27533: PPUSH
27534: CALL_OW 12
27538: ARRAY
27539: PPUSH
27540: CALL_OW 185
// exit ;
27544: POP
27545: POP
27546: GO 27823
// end ;
27548: GO 27449
27550: POP
27551: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27552: LD_ADDR_VAR 0 8
27556: PUSH
27557: LD_INT 10
27559: PPUSH
27560: LD_INT 22
27562: PUSH
27563: LD_INT 3
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 50
27572: PUSH
27573: EMPTY
27574: LIST
27575: PUSH
27576: LD_INT 2
27578: PUSH
27579: LD_INT 30
27581: PUSH
27582: LD_INT 4
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 30
27591: PUSH
27592: LD_INT 5
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 30
27601: PUSH
27602: LD_INT 32
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 30
27611: PUSH
27612: LD_INT 31
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: PPUSH
27631: CALL_OW 70
27635: ST_TO_ADDR
// if not tmp then
27636: LD_VAR 0 8
27640: NOT
27641: IFFALSE 27660
// begin ComMoveXY ( un , 83 , 133 ) ;
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_INT 83
27650: PPUSH
27651: LD_INT 133
27653: PPUSH
27654: CALL_OW 111
// exit ;
27658: GO 27823
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
27660: LD_ADDR_VAR 0 6
27664: PUSH
27665: LD_VAR 0 1
27669: PPUSH
27670: LD_VAR 0 8
27674: PPUSH
27675: LD_INT 1
27677: PPUSH
27678: LD_INT 1
27680: PPUSH
27681: CALL 34577 0 4
27685: PUSH
27686: FOR_IN
27687: IFFALSE 27821
// begin case GetBType ( b ) of b_armoury , b_barracks :
27689: LD_VAR 0 6
27693: PPUSH
27694: CALL_OW 266
27698: PUSH
27699: LD_INT 4
27701: DOUBLE
27702: EQUAL
27703: IFTRUE 27713
27705: LD_INT 5
27707: DOUBLE
27708: EQUAL
27709: IFTRUE 27713
27711: GO 27724
27713: POP
// p := 6 ; b_breastwork , b_bunker :
27714: LD_ADDR_VAR 0 7
27718: PUSH
27719: LD_INT 6
27721: ST_TO_ADDR
27722: GO 27750
27724: LD_INT 31
27726: DOUBLE
27727: EQUAL
27728: IFTRUE 27738
27730: LD_INT 32
27732: DOUBLE
27733: EQUAL
27734: IFTRUE 27738
27736: GO 27749
27738: POP
// p := 1 ; end ;
27739: LD_ADDR_VAR 0 7
27743: PUSH
27744: LD_INT 1
27746: ST_TO_ADDR
27747: GO 27750
27749: POP
// if UnitsInside ( b ) < p then
27750: LD_VAR 0 6
27754: PPUSH
27755: CALL_OW 313
27759: PUSH
27760: LD_VAR 0 7
27764: LESS
27765: IFFALSE 27819
// begin ComEnterUnit ( un , b ) ;
27767: LD_VAR 0 1
27771: PPUSH
27772: LD_VAR 0 6
27776: PPUSH
27777: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
27781: LD_VAR 0 6
27785: PPUSH
27786: CALL_OW 266
27790: PUSH
27791: LD_INT 4
27793: PUSH
27794: LD_INT 5
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: IN
27801: IFFALSE 27815
// AddComChangeProfession ( un , class_soldier ) ;
27803: LD_VAR 0 1
27807: PPUSH
27808: LD_INT 1
27810: PPUSH
27811: CALL_OW 183
// exit ;
27815: POP
27816: POP
27817: GO 27823
// end ; end ;
27819: GO 27686
27821: POP
27822: POP
// end ; end ;
27823: PPOPN 8
27825: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
27826: LD_INT 0
27828: PPUSH
27829: PPUSH
27830: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
27831: LD_VAR 0 2
27835: PPUSH
27836: CALL_OW 255
27840: PUSH
27841: LD_INT 3
27843: EQUAL
27844: PUSH
27845: LD_VAR 0 2
27849: PPUSH
27850: CALL_OW 257
27854: PUSH
27855: LD_INT 1
27857: EQUAL
27858: AND
27859: PUSH
27860: LD_VAR 0 2
27864: PUSH
27865: LD_EXP 58
27869: IN
27870: NOT
27871: AND
27872: IFFALSE 28185
// begin ComMoveToArea ( un , ruMainBase ) ;
27874: LD_VAR 0 2
27878: PPUSH
27879: LD_INT 10
27881: PPUSH
27882: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
27886: LD_INT 35
27888: PPUSH
27889: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27893: LD_VAR 0 2
27897: PPUSH
27898: CALL_OW 302
27902: NOT
27903: PUSH
27904: LD_VAR 0 2
27908: PPUSH
27909: LD_INT 10
27911: PPUSH
27912: CALL_OW 308
27916: OR
27917: IFFALSE 27886
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27919: LD_ADDR_EXP 58
27923: PUSH
27924: LD_EXP 58
27928: PPUSH
27929: LD_EXP 58
27933: PUSH
27934: LD_INT 1
27936: PLUS
27937: PPUSH
27938: LD_VAR 0 2
27942: PPUSH
27943: CALL_OW 1
27947: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27948: LD_ADDR_VAR 0 4
27952: PUSH
27953: LD_INT 10
27955: PPUSH
27956: LD_INT 22
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 50
27968: PUSH
27969: EMPTY
27970: LIST
27971: PUSH
27972: LD_INT 2
27974: PUSH
27975: LD_INT 30
27977: PUSH
27978: LD_INT 4
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 30
27987: PUSH
27988: LD_INT 5
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 30
27997: PUSH
27998: LD_INT 32
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 30
28007: PUSH
28008: LD_INT 31
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: PPUSH
28027: CALL_OW 70
28031: ST_TO_ADDR
// if not tmp then
28032: LD_VAR 0 4
28036: NOT
28037: IFFALSE 28056
// begin ComMoveXY ( un , 83 , 133 ) ;
28039: LD_VAR 0 2
28043: PPUSH
28044: LD_INT 83
28046: PPUSH
28047: LD_INT 133
28049: PPUSH
28050: CALL_OW 111
// exit ;
28054: GO 28434
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28056: LD_ADDR_VAR 0 5
28060: PUSH
28061: LD_VAR 0 2
28065: PPUSH
28066: LD_VAR 0 4
28070: PPUSH
28071: LD_INT 1
28073: PPUSH
28074: LD_INT 1
28076: PPUSH
28077: CALL 34577 0 4
28081: PUSH
28082: FOR_IN
28083: IFFALSE 28183
// begin case GetBType ( b ) of b_armoury , b_barracks :
28085: LD_VAR 0 5
28089: PPUSH
28090: CALL_OW 266
28094: PUSH
28095: LD_INT 4
28097: DOUBLE
28098: EQUAL
28099: IFTRUE 28109
28101: LD_INT 5
28103: DOUBLE
28104: EQUAL
28105: IFTRUE 28109
28107: GO 28120
28109: POP
// p := 6 ; b_breastwork , b_bunker :
28110: LD_ADDR_VAR 0 3
28114: PUSH
28115: LD_INT 6
28117: ST_TO_ADDR
28118: GO 28146
28120: LD_INT 31
28122: DOUBLE
28123: EQUAL
28124: IFTRUE 28134
28126: LD_INT 32
28128: DOUBLE
28129: EQUAL
28130: IFTRUE 28134
28132: GO 28145
28134: POP
// p := 1 ; end ;
28135: LD_ADDR_VAR 0 3
28139: PUSH
28140: LD_INT 1
28142: ST_TO_ADDR
28143: GO 28146
28145: POP
// if UnitsInside ( b ) < p then
28146: LD_VAR 0 5
28150: PPUSH
28151: CALL_OW 313
28155: PUSH
28156: LD_VAR 0 3
28160: LESS
28161: IFFALSE 28181
// begin ComEnterUnit ( un , b ) ;
28163: LD_VAR 0 2
28167: PPUSH
28168: LD_VAR 0 5
28172: PPUSH
28173: CALL_OW 120
// exit ;
28177: POP
28178: POP
28179: GO 28434
// end ; end ;
28181: GO 28082
28183: POP
28184: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28185: LD_VAR 0 2
28189: PUSH
28190: LD_EXP 58
28194: IN
28195: PUSH
28196: LD_VAR 0 2
28200: PPUSH
28201: CALL_OW 257
28205: PUSH
28206: LD_INT 1
28208: EQUAL
28209: AND
28210: IFFALSE 28434
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28212: LD_ADDR_VAR 0 4
28216: PUSH
28217: LD_INT 10
28219: PPUSH
28220: LD_INT 22
28222: PUSH
28223: LD_INT 3
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 50
28232: PUSH
28233: EMPTY
28234: LIST
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: LD_INT 30
28241: PUSH
28242: LD_INT 4
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 30
28251: PUSH
28252: LD_INT 5
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 30
28261: PUSH
28262: LD_INT 32
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 30
28271: PUSH
28272: LD_INT 31
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: PPUSH
28291: CALL_OW 70
28295: ST_TO_ADDR
// if not tmp then
28296: LD_VAR 0 4
28300: NOT
28301: IFFALSE 28305
// exit ;
28303: GO 28434
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28305: LD_ADDR_VAR 0 5
28309: PUSH
28310: LD_VAR 0 2
28314: PPUSH
28315: LD_VAR 0 4
28319: PPUSH
28320: LD_INT 1
28322: PPUSH
28323: LD_INT 1
28325: PPUSH
28326: CALL 34577 0 4
28330: PUSH
28331: FOR_IN
28332: IFFALSE 28432
// begin case GetBType ( b ) of b_armoury , b_barracks :
28334: LD_VAR 0 5
28338: PPUSH
28339: CALL_OW 266
28343: PUSH
28344: LD_INT 4
28346: DOUBLE
28347: EQUAL
28348: IFTRUE 28358
28350: LD_INT 5
28352: DOUBLE
28353: EQUAL
28354: IFTRUE 28358
28356: GO 28369
28358: POP
// p := 6 ; b_breastwork , b_bunker :
28359: LD_ADDR_VAR 0 3
28363: PUSH
28364: LD_INT 6
28366: ST_TO_ADDR
28367: GO 28395
28369: LD_INT 31
28371: DOUBLE
28372: EQUAL
28373: IFTRUE 28383
28375: LD_INT 32
28377: DOUBLE
28378: EQUAL
28379: IFTRUE 28383
28381: GO 28394
28383: POP
// p := 1 ; end ;
28384: LD_ADDR_VAR 0 3
28388: PUSH
28389: LD_INT 1
28391: ST_TO_ADDR
28392: GO 28395
28394: POP
// if UnitsInside ( b ) < p then
28395: LD_VAR 0 5
28399: PPUSH
28400: CALL_OW 313
28404: PUSH
28405: LD_VAR 0 3
28409: LESS
28410: IFFALSE 28430
// begin ComEnterUnit ( un , b ) ;
28412: LD_VAR 0 2
28416: PPUSH
28417: LD_VAR 0 5
28421: PPUSH
28422: CALL_OW 120
// exit ;
28426: POP
28427: POP
28428: GO 28434
// end ; end ;
28430: GO 28331
28432: POP
28433: POP
// end ; end ;
28434: PPOPN 5
28436: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28437: LD_VAR 0 1
28441: PUSH
28442: LD_INT 2
28444: EQUAL
28445: PUSH
28446: LD_VAR 0 2
28450: PUSH
28451: LD_INT 5
28453: PUSH
28454: LD_INT 8
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: IN
28461: AND
28462: IFFALSE 28471
// YouLost ( FriendlyFire ) ;
28464: LD_STRING FriendlyFire
28466: PPUSH
28467: CALL_OW 104
// end ;
28471: PPOPN 2
28473: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28474: LD_VAR 0 1
28478: PPUSH
28479: CALL_OW 255
28483: PUSH
28484: LD_INT 8
28486: EQUAL
28487: PUSH
28488: LD_VAR 0 1
28492: PPUSH
28493: CALL_OW 266
28497: PUSH
28498: LD_INT 5
28500: EQUAL
28501: AND
28502: IFFALSE 28516
// SetClass ( unit , class_mortar ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_INT 8
28511: PPUSH
28512: CALL_OW 336
// end ; end_of_file
28516: PPOPN 2
28518: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 400 , 320 , 280 , 250 ] [ Difficulty ] do
28519: LD_INT 6
28521: PPUSH
28522: LD_INT 1
28524: PPUSH
28525: CALL_OW 287
28529: PUSH
28530: LD_INT 400
28532: PUSH
28533: LD_INT 320
28535: PUSH
28536: LD_INT 280
28538: PUSH
28539: LD_INT 250
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: PUSH
28548: LD_OWVAR 67
28552: ARRAY
28553: LESS
28554: IFFALSE 28581
28556: GO 28558
28558: DISABLE
// begin enable ;
28559: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28560: LD_INT 1
28562: PPUSH
28563: LD_INT 5
28565: PPUSH
28566: CALL_OW 12
28570: PPUSH
28571: LD_INT 6
28573: PPUSH
28574: LD_INT 1
28576: PPUSH
28577: CALL_OW 55
// end ;
28581: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] do
28582: LD_INT 50
28584: PPUSH
28585: CALL_OW 13
28589: PUSH
28590: LD_OWVAR 1
28594: PUSH
28595: LD_INT 58800
28597: PUSH
28598: LD_INT 56700
28600: PUSH
28601: LD_INT 54600
28603: PUSH
28604: LD_INT 52500
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: PUSH
28613: LD_OWVAR 67
28617: ARRAY
28618: LESS
28619: AND
28620: IFFALSE 28662
28622: GO 28624
28624: DISABLE
// begin enable ;
28625: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
28626: LD_INT 35
28628: PPUSH
28629: LD_INT 350
28631: PPUSH
28632: CALL_OW 12
28636: PPUSH
28637: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
28641: LD_INT 1
28643: PPUSH
28644: LD_INT 5
28646: PPUSH
28647: CALL_OW 12
28651: PPUSH
28652: LD_INT 21
28654: PPUSH
28655: LD_INT 1
28657: PPUSH
28658: CALL_OW 55
// end ; end_of_file
28662: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
28663: LD_EXP 18
28667: PUSH
28668: LD_EXP 20
28672: AND
28673: PUSH
28674: LD_EXP 17
28678: PUSH
28679: LD_EXP 19
28683: AND
28684: OR
28685: IFFALSE 29004
28687: GO 28689
28689: DISABLE
// begin enable ;
28690: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
28691: LD_EXP 18
28695: PUSH
28696: LD_EXP 20
28700: AND
28701: PUSH
28702: LD_EXP 17
28706: PUSH
28707: LD_EXP 19
28711: AND
28712: AND
28713: IFFALSE 28850
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
28715: LD_ADDR_OWVAR 47
28719: PUSH
28720: LD_STRING #X106-1a
28722: PUSH
28723: LD_EXP 21
28727: PUSH
28728: LD_INT 16
28730: PPUSH
28731: LD_INT 22
28733: PUSH
28734: LD_INT 2
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 21
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 33
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 58
28763: PUSH
28764: EMPTY
28765: LIST
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: PPUSH
28773: CALL_OW 70
28777: MINUS
28778: PPUSH
28779: CALL 68659 0 1
28783: PUSH
28784: LD_STRING #X106-3a
28786: PUSH
28787: LD_EXP 20
28791: PUSH
28792: LD_STRING #X106-1
28794: PUSH
28795: LD_EXP 50
28799: PUSH
28800: LD_INT 0
28802: PLUS
28803: PUSH
28804: LD_EXP 50
28808: PPUSH
28809: LD_INT 55
28811: PUSH
28812: EMPTY
28813: LIST
28814: PPUSH
28815: CALL_OW 72
28819: PUSH
28820: LD_INT 0
28822: PLUS
28823: MINUS
28824: PPUSH
28825: CALL 68659 0 1
28829: PUSH
28830: LD_STRING #X106-3
28832: PUSH
28833: LD_EXP 19
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: ST_TO_ADDR
// end else
28848: GO 29004
// if omarWantVehicles and omarWaitingForVehiclesTimer then
28850: LD_EXP 18
28854: PUSH
28855: LD_EXP 20
28859: AND
28860: IFFALSE 28947
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
28862: LD_ADDR_OWVAR 47
28866: PUSH
28867: LD_STRING #X106-1a
28869: PUSH
28870: LD_EXP 21
28874: PUSH
28875: LD_INT 16
28877: PPUSH
28878: LD_INT 22
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 21
28890: PUSH
28891: LD_INT 2
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 33
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 58
28910: PUSH
28911: EMPTY
28912: LIST
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: PPUSH
28920: CALL_OW 70
28924: MINUS
28925: PPUSH
28926: CALL 68659 0 1
28930: PUSH
28931: LD_STRING #X106-3a
28933: PUSH
28934: LD_EXP 20
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: ST_TO_ADDR
// end else
28945: GO 29004
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
28947: LD_ADDR_OWVAR 47
28951: PUSH
28952: LD_STRING #X106-1
28954: PUSH
28955: LD_EXP 50
28959: PUSH
28960: LD_INT 0
28962: PLUS
28963: PUSH
28964: LD_EXP 50
28968: PPUSH
28969: LD_INT 55
28971: PUSH
28972: EMPTY
28973: LIST
28974: PPUSH
28975: CALL_OW 72
28979: PUSH
28980: LD_INT 0
28982: PLUS
28983: MINUS
28984: PPUSH
28985: CALL 68659 0 1
28989: PUSH
28990: LD_STRING #X106-3
28992: PUSH
28993: LD_EXP 19
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: ST_TO_ADDR
// end ; end ; end_of_file
29004: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29005: LD_INT 0
29007: PPUSH
29008: PPUSH
// if exist_mode then
29009: LD_VAR 0 2
29013: IFFALSE 29038
// unit := CreateCharacter ( prefix & ident ) else
29015: LD_ADDR_VAR 0 5
29019: PUSH
29020: LD_VAR 0 3
29024: PUSH
29025: LD_VAR 0 1
29029: STR
29030: PPUSH
29031: CALL_OW 34
29035: ST_TO_ADDR
29036: GO 29053
// unit := NewCharacter ( ident ) ;
29038: LD_ADDR_VAR 0 5
29042: PUSH
29043: LD_VAR 0 1
29047: PPUSH
29048: CALL_OW 25
29052: ST_TO_ADDR
// result := unit ;
29053: LD_ADDR_VAR 0 4
29057: PUSH
29058: LD_VAR 0 5
29062: ST_TO_ADDR
// end ;
29063: LD_VAR 0 4
29067: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29068: LD_INT 0
29070: PPUSH
29071: PPUSH
// if not side or not nation then
29072: LD_VAR 0 1
29076: NOT
29077: PUSH
29078: LD_VAR 0 2
29082: NOT
29083: OR
29084: IFFALSE 29088
// exit ;
29086: GO 29856
// case nation of nation_american :
29088: LD_VAR 0 2
29092: PUSH
29093: LD_INT 1
29095: DOUBLE
29096: EQUAL
29097: IFTRUE 29101
29099: GO 29315
29101: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29102: LD_ADDR_VAR 0 4
29106: PUSH
29107: LD_INT 35
29109: PUSH
29110: LD_INT 45
29112: PUSH
29113: LD_INT 46
29115: PUSH
29116: LD_INT 47
29118: PUSH
29119: LD_INT 82
29121: PUSH
29122: LD_INT 83
29124: PUSH
29125: LD_INT 84
29127: PUSH
29128: LD_INT 85
29130: PUSH
29131: LD_INT 86
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: LD_INT 2
29139: PUSH
29140: LD_INT 6
29142: PUSH
29143: LD_INT 15
29145: PUSH
29146: LD_INT 16
29148: PUSH
29149: LD_INT 7
29151: PUSH
29152: LD_INT 12
29154: PUSH
29155: LD_INT 13
29157: PUSH
29158: LD_INT 10
29160: PUSH
29161: LD_INT 14
29163: PUSH
29164: LD_INT 20
29166: PUSH
29167: LD_INT 21
29169: PUSH
29170: LD_INT 22
29172: PUSH
29173: LD_INT 25
29175: PUSH
29176: LD_INT 32
29178: PUSH
29179: LD_INT 27
29181: PUSH
29182: LD_INT 36
29184: PUSH
29185: LD_INT 69
29187: PUSH
29188: LD_INT 39
29190: PUSH
29191: LD_INT 34
29193: PUSH
29194: LD_INT 40
29196: PUSH
29197: LD_INT 48
29199: PUSH
29200: LD_INT 49
29202: PUSH
29203: LD_INT 50
29205: PUSH
29206: LD_INT 51
29208: PUSH
29209: LD_INT 52
29211: PUSH
29212: LD_INT 53
29214: PUSH
29215: LD_INT 54
29217: PUSH
29218: LD_INT 55
29220: PUSH
29221: LD_INT 56
29223: PUSH
29224: LD_INT 57
29226: PUSH
29227: LD_INT 58
29229: PUSH
29230: LD_INT 59
29232: PUSH
29233: LD_INT 60
29235: PUSH
29236: LD_INT 61
29238: PUSH
29239: LD_INT 62
29241: PUSH
29242: LD_INT 80
29244: PUSH
29245: LD_INT 82
29247: PUSH
29248: LD_INT 83
29250: PUSH
29251: LD_INT 84
29253: PUSH
29254: LD_INT 85
29256: PUSH
29257: LD_INT 86
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
29313: GO 29780
29315: LD_INT 2
29317: DOUBLE
29318: EQUAL
29319: IFTRUE 29323
29321: GO 29549
29323: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29324: LD_ADDR_VAR 0 4
29328: PUSH
29329: LD_INT 35
29331: PUSH
29332: LD_INT 45
29334: PUSH
29335: LD_INT 46
29337: PUSH
29338: LD_INT 47
29340: PUSH
29341: LD_INT 82
29343: PUSH
29344: LD_INT 83
29346: PUSH
29347: LD_INT 84
29349: PUSH
29350: LD_INT 85
29352: PUSH
29353: LD_INT 87
29355: PUSH
29356: LD_INT 70
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: LD_INT 11
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: LD_INT 4
29370: PUSH
29371: LD_INT 5
29373: PUSH
29374: LD_INT 6
29376: PUSH
29377: LD_INT 15
29379: PUSH
29380: LD_INT 18
29382: PUSH
29383: LD_INT 7
29385: PUSH
29386: LD_INT 17
29388: PUSH
29389: LD_INT 8
29391: PUSH
29392: LD_INT 20
29394: PUSH
29395: LD_INT 21
29397: PUSH
29398: LD_INT 22
29400: PUSH
29401: LD_INT 72
29403: PUSH
29404: LD_INT 26
29406: PUSH
29407: LD_INT 69
29409: PUSH
29410: LD_INT 39
29412: PUSH
29413: LD_INT 40
29415: PUSH
29416: LD_INT 41
29418: PUSH
29419: LD_INT 42
29421: PUSH
29422: LD_INT 43
29424: PUSH
29425: LD_INT 48
29427: PUSH
29428: LD_INT 49
29430: PUSH
29431: LD_INT 50
29433: PUSH
29434: LD_INT 51
29436: PUSH
29437: LD_INT 52
29439: PUSH
29440: LD_INT 53
29442: PUSH
29443: LD_INT 54
29445: PUSH
29446: LD_INT 55
29448: PUSH
29449: LD_INT 56
29451: PUSH
29452: LD_INT 60
29454: PUSH
29455: LD_INT 61
29457: PUSH
29458: LD_INT 62
29460: PUSH
29461: LD_INT 66
29463: PUSH
29464: LD_INT 67
29466: PUSH
29467: LD_INT 68
29469: PUSH
29470: LD_INT 81
29472: PUSH
29473: LD_INT 82
29475: PUSH
29476: LD_INT 83
29478: PUSH
29479: LD_INT 84
29481: PUSH
29482: LD_INT 85
29484: PUSH
29485: LD_INT 87
29487: PUSH
29488: LD_INT 88
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: ST_TO_ADDR
29547: GO 29780
29549: LD_INT 3
29551: DOUBLE
29552: EQUAL
29553: IFTRUE 29557
29555: GO 29779
29557: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29558: LD_ADDR_VAR 0 4
29562: PUSH
29563: LD_INT 46
29565: PUSH
29566: LD_INT 47
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: LD_INT 82
29577: PUSH
29578: LD_INT 83
29580: PUSH
29581: LD_INT 84
29583: PUSH
29584: LD_INT 85
29586: PUSH
29587: LD_INT 86
29589: PUSH
29590: LD_INT 11
29592: PUSH
29593: LD_INT 9
29595: PUSH
29596: LD_INT 20
29598: PUSH
29599: LD_INT 19
29601: PUSH
29602: LD_INT 21
29604: PUSH
29605: LD_INT 24
29607: PUSH
29608: LD_INT 22
29610: PUSH
29611: LD_INT 25
29613: PUSH
29614: LD_INT 28
29616: PUSH
29617: LD_INT 29
29619: PUSH
29620: LD_INT 30
29622: PUSH
29623: LD_INT 31
29625: PUSH
29626: LD_INT 37
29628: PUSH
29629: LD_INT 38
29631: PUSH
29632: LD_INT 32
29634: PUSH
29635: LD_INT 27
29637: PUSH
29638: LD_INT 33
29640: PUSH
29641: LD_INT 69
29643: PUSH
29644: LD_INT 39
29646: PUSH
29647: LD_INT 34
29649: PUSH
29650: LD_INT 40
29652: PUSH
29653: LD_INT 71
29655: PUSH
29656: LD_INT 23
29658: PUSH
29659: LD_INT 44
29661: PUSH
29662: LD_INT 48
29664: PUSH
29665: LD_INT 49
29667: PUSH
29668: LD_INT 50
29670: PUSH
29671: LD_INT 51
29673: PUSH
29674: LD_INT 52
29676: PUSH
29677: LD_INT 53
29679: PUSH
29680: LD_INT 54
29682: PUSH
29683: LD_INT 55
29685: PUSH
29686: LD_INT 56
29688: PUSH
29689: LD_INT 57
29691: PUSH
29692: LD_INT 58
29694: PUSH
29695: LD_INT 59
29697: PUSH
29698: LD_INT 63
29700: PUSH
29701: LD_INT 64
29703: PUSH
29704: LD_INT 65
29706: PUSH
29707: LD_INT 82
29709: PUSH
29710: LD_INT 83
29712: PUSH
29713: LD_INT 84
29715: PUSH
29716: LD_INT 85
29718: PUSH
29719: LD_INT 86
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: ST_TO_ADDR
29777: GO 29780
29779: POP
// if state > - 1 and state < 3 then
29780: LD_VAR 0 3
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: GREATER
29789: PUSH
29790: LD_VAR 0 3
29794: PUSH
29795: LD_INT 3
29797: LESS
29798: AND
29799: IFFALSE 29856
// for i in result do
29801: LD_ADDR_VAR 0 5
29805: PUSH
29806: LD_VAR 0 4
29810: PUSH
29811: FOR_IN
29812: IFFALSE 29854
// if GetTech ( i , side ) <> state then
29814: LD_VAR 0 5
29818: PPUSH
29819: LD_VAR 0 1
29823: PPUSH
29824: CALL_OW 321
29828: PUSH
29829: LD_VAR 0 3
29833: NONEQUAL
29834: IFFALSE 29852
// result := result diff i ;
29836: LD_ADDR_VAR 0 4
29840: PUSH
29841: LD_VAR 0 4
29845: PUSH
29846: LD_VAR 0 5
29850: DIFF
29851: ST_TO_ADDR
29852: GO 29811
29854: POP
29855: POP
// end ;
29856: LD_VAR 0 4
29860: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29861: LD_INT 0
29863: PPUSH
29864: PPUSH
29865: PPUSH
// result := true ;
29866: LD_ADDR_VAR 0 3
29870: PUSH
29871: LD_INT 1
29873: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29874: LD_ADDR_VAR 0 5
29878: PUSH
29879: LD_VAR 0 2
29883: PPUSH
29884: CALL_OW 480
29888: ST_TO_ADDR
// if not tmp then
29889: LD_VAR 0 5
29893: NOT
29894: IFFALSE 29898
// exit ;
29896: GO 29947
// for i in tmp do
29898: LD_ADDR_VAR 0 4
29902: PUSH
29903: LD_VAR 0 5
29907: PUSH
29908: FOR_IN
29909: IFFALSE 29945
// if GetTech ( i , side ) <> state_researched then
29911: LD_VAR 0 4
29915: PPUSH
29916: LD_VAR 0 1
29920: PPUSH
29921: CALL_OW 321
29925: PUSH
29926: LD_INT 2
29928: NONEQUAL
29929: IFFALSE 29943
// begin result := false ;
29931: LD_ADDR_VAR 0 3
29935: PUSH
29936: LD_INT 0
29938: ST_TO_ADDR
// exit ;
29939: POP
29940: POP
29941: GO 29947
// end ;
29943: GO 29908
29945: POP
29946: POP
// end ;
29947: LD_VAR 0 3
29951: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29952: LD_INT 0
29954: PPUSH
29955: PPUSH
29956: PPUSH
29957: PPUSH
29958: PPUSH
29959: PPUSH
29960: PPUSH
29961: PPUSH
29962: PPUSH
29963: PPUSH
29964: PPUSH
29965: PPUSH
29966: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29967: LD_VAR 0 1
29971: NOT
29972: PUSH
29973: LD_VAR 0 1
29977: PPUSH
29978: CALL_OW 257
29982: PUSH
29983: LD_INT 9
29985: NONEQUAL
29986: OR
29987: IFFALSE 29991
// exit ;
29989: GO 30564
// side := GetSide ( unit ) ;
29991: LD_ADDR_VAR 0 9
29995: PUSH
29996: LD_VAR 0 1
30000: PPUSH
30001: CALL_OW 255
30005: ST_TO_ADDR
// tech_space := tech_spacanom ;
30006: LD_ADDR_VAR 0 12
30010: PUSH
30011: LD_INT 29
30013: ST_TO_ADDR
// tech_time := tech_taurad ;
30014: LD_ADDR_VAR 0 13
30018: PUSH
30019: LD_INT 28
30021: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30022: LD_ADDR_VAR 0 11
30026: PUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: CALL_OW 310
30036: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30037: LD_VAR 0 11
30041: PPUSH
30042: CALL_OW 247
30046: PUSH
30047: LD_INT 2
30049: EQUAL
30050: IFFALSE 30054
// exit ;
30052: GO 30564
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30054: LD_ADDR_VAR 0 8
30058: PUSH
30059: LD_INT 81
30061: PUSH
30062: LD_VAR 0 9
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: LD_INT 21
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PPUSH
30092: CALL_OW 69
30096: ST_TO_ADDR
// if not tmp then
30097: LD_VAR 0 8
30101: NOT
30102: IFFALSE 30106
// exit ;
30104: GO 30564
// if in_unit then
30106: LD_VAR 0 11
30110: IFFALSE 30134
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30112: LD_ADDR_VAR 0 10
30116: PUSH
30117: LD_VAR 0 8
30121: PPUSH
30122: LD_VAR 0 11
30126: PPUSH
30127: CALL_OW 74
30131: ST_TO_ADDR
30132: GO 30154
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30134: LD_ADDR_VAR 0 10
30138: PUSH
30139: LD_VAR 0 8
30143: PPUSH
30144: LD_VAR 0 1
30148: PPUSH
30149: CALL_OW 74
30153: ST_TO_ADDR
// if not enemy then
30154: LD_VAR 0 10
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30564
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30163: LD_VAR 0 11
30167: PUSH
30168: LD_VAR 0 11
30172: PPUSH
30173: LD_VAR 0 10
30177: PPUSH
30178: CALL_OW 296
30182: PUSH
30183: LD_INT 13
30185: GREATER
30186: AND
30187: PUSH
30188: LD_VAR 0 1
30192: PPUSH
30193: LD_VAR 0 10
30197: PPUSH
30198: CALL_OW 296
30202: PUSH
30203: LD_INT 12
30205: GREATER
30206: OR
30207: IFFALSE 30211
// exit ;
30209: GO 30564
// missile := [ 1 ] ;
30211: LD_ADDR_VAR 0 14
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: EMPTY
30220: LIST
30221: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30222: LD_VAR 0 9
30226: PPUSH
30227: LD_VAR 0 12
30231: PPUSH
30232: CALL_OW 325
30236: IFFALSE 30265
// missile := Replace ( missile , missile + 1 , 2 ) ;
30238: LD_ADDR_VAR 0 14
30242: PUSH
30243: LD_VAR 0 14
30247: PPUSH
30248: LD_VAR 0 14
30252: PUSH
30253: LD_INT 1
30255: PLUS
30256: PPUSH
30257: LD_INT 2
30259: PPUSH
30260: CALL_OW 1
30264: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30265: LD_VAR 0 9
30269: PPUSH
30270: LD_VAR 0 13
30274: PPUSH
30275: CALL_OW 325
30279: PUSH
30280: LD_VAR 0 10
30284: PPUSH
30285: CALL_OW 255
30289: PPUSH
30290: LD_VAR 0 13
30294: PPUSH
30295: CALL_OW 325
30299: NOT
30300: AND
30301: IFFALSE 30330
// missile := Replace ( missile , missile + 1 , 3 ) ;
30303: LD_ADDR_VAR 0 14
30307: PUSH
30308: LD_VAR 0 14
30312: PPUSH
30313: LD_VAR 0 14
30317: PUSH
30318: LD_INT 1
30320: PLUS
30321: PPUSH
30322: LD_INT 3
30324: PPUSH
30325: CALL_OW 1
30329: ST_TO_ADDR
// if missile < 2 then
30330: LD_VAR 0 14
30334: PUSH
30335: LD_INT 2
30337: LESS
30338: IFFALSE 30342
// exit ;
30340: GO 30564
// x := GetX ( enemy ) ;
30342: LD_ADDR_VAR 0 4
30346: PUSH
30347: LD_VAR 0 10
30351: PPUSH
30352: CALL_OW 250
30356: ST_TO_ADDR
// y := GetY ( enemy ) ;
30357: LD_ADDR_VAR 0 5
30361: PUSH
30362: LD_VAR 0 10
30366: PPUSH
30367: CALL_OW 251
30371: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30372: LD_ADDR_VAR 0 6
30376: PUSH
30377: LD_VAR 0 4
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PPUSH
30386: LD_INT 1
30388: PPUSH
30389: CALL_OW 12
30393: PLUS
30394: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30395: LD_ADDR_VAR 0 7
30399: PUSH
30400: LD_VAR 0 5
30404: PUSH
30405: LD_INT 1
30407: NEG
30408: PPUSH
30409: LD_INT 1
30411: PPUSH
30412: CALL_OW 12
30416: PLUS
30417: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30418: LD_VAR 0 6
30422: PPUSH
30423: LD_VAR 0 7
30427: PPUSH
30428: CALL_OW 488
30432: NOT
30433: IFFALSE 30455
// begin _x := x ;
30435: LD_ADDR_VAR 0 6
30439: PUSH
30440: LD_VAR 0 4
30444: ST_TO_ADDR
// _y := y ;
30445: LD_ADDR_VAR 0 7
30449: PUSH
30450: LD_VAR 0 5
30454: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_INT 1
30462: PPUSH
30463: LD_VAR 0 14
30467: PPUSH
30468: CALL_OW 12
30472: ST_TO_ADDR
// case i of 1 :
30473: LD_VAR 0 3
30477: PUSH
30478: LD_INT 1
30480: DOUBLE
30481: EQUAL
30482: IFTRUE 30486
30484: GO 30503
30486: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30487: LD_VAR 0 1
30491: PPUSH
30492: LD_VAR 0 10
30496: PPUSH
30497: CALL_OW 115
30501: GO 30564
30503: LD_INT 2
30505: DOUBLE
30506: EQUAL
30507: IFTRUE 30511
30509: GO 30533
30511: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30512: LD_VAR 0 1
30516: PPUSH
30517: LD_VAR 0 6
30521: PPUSH
30522: LD_VAR 0 7
30526: PPUSH
30527: CALL_OW 153
30531: GO 30564
30533: LD_INT 3
30535: DOUBLE
30536: EQUAL
30537: IFTRUE 30541
30539: GO 30563
30541: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30542: LD_VAR 0 1
30546: PPUSH
30547: LD_VAR 0 6
30551: PPUSH
30552: LD_VAR 0 7
30556: PPUSH
30557: CALL_OW 154
30561: GO 30564
30563: POP
// end ;
30564: LD_VAR 0 2
30568: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30569: LD_INT 0
30571: PPUSH
30572: PPUSH
30573: PPUSH
30574: PPUSH
30575: PPUSH
30576: PPUSH
// if not unit or not building then
30577: LD_VAR 0 1
30581: NOT
30582: PUSH
30583: LD_VAR 0 2
30587: NOT
30588: OR
30589: IFFALSE 30593
// exit ;
30591: GO 30751
// x := GetX ( building ) ;
30593: LD_ADDR_VAR 0 5
30597: PUSH
30598: LD_VAR 0 2
30602: PPUSH
30603: CALL_OW 250
30607: ST_TO_ADDR
// y := GetY ( building ) ;
30608: LD_ADDR_VAR 0 6
30612: PUSH
30613: LD_VAR 0 2
30617: PPUSH
30618: CALL_OW 251
30622: ST_TO_ADDR
// for i = 0 to 5 do
30623: LD_ADDR_VAR 0 4
30627: PUSH
30628: DOUBLE
30629: LD_INT 0
30631: DEC
30632: ST_TO_ADDR
30633: LD_INT 5
30635: PUSH
30636: FOR_TO
30637: IFFALSE 30749
// begin _x := ShiftX ( x , i , 3 ) ;
30639: LD_ADDR_VAR 0 7
30643: PUSH
30644: LD_VAR 0 5
30648: PPUSH
30649: LD_VAR 0 4
30653: PPUSH
30654: LD_INT 3
30656: PPUSH
30657: CALL_OW 272
30661: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30662: LD_ADDR_VAR 0 8
30666: PUSH
30667: LD_VAR 0 6
30671: PPUSH
30672: LD_VAR 0 4
30676: PPUSH
30677: LD_INT 3
30679: PPUSH
30680: CALL_OW 273
30684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30685: LD_VAR 0 7
30689: PPUSH
30690: LD_VAR 0 8
30694: PPUSH
30695: CALL_OW 488
30699: NOT
30700: IFFALSE 30704
// continue ;
30702: GO 30636
// if HexInfo ( _x , _y ) = 0 then
30704: LD_VAR 0 7
30708: PPUSH
30709: LD_VAR 0 8
30713: PPUSH
30714: CALL_OW 428
30718: PUSH
30719: LD_INT 0
30721: EQUAL
30722: IFFALSE 30747
// begin ComMoveXY ( unit , _x , _y ) ;
30724: LD_VAR 0 1
30728: PPUSH
30729: LD_VAR 0 7
30733: PPUSH
30734: LD_VAR 0 8
30738: PPUSH
30739: CALL_OW 111
// exit ;
30743: POP
30744: POP
30745: GO 30751
// end ; end ;
30747: GO 30636
30749: POP
30750: POP
// end ;
30751: LD_VAR 0 3
30755: RET
// export function ScanBase ( side , base_area ) ; begin
30756: LD_INT 0
30758: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30759: LD_ADDR_VAR 0 3
30763: PUSH
30764: LD_VAR 0 2
30768: PPUSH
30769: LD_INT 81
30771: PUSH
30772: LD_VAR 0 1
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PPUSH
30781: CALL_OW 70
30785: ST_TO_ADDR
// end ;
30786: LD_VAR 0 3
30790: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30791: LD_INT 0
30793: PPUSH
30794: PPUSH
30795: PPUSH
30796: PPUSH
// result := false ;
30797: LD_ADDR_VAR 0 2
30801: PUSH
30802: LD_INT 0
30804: ST_TO_ADDR
// side := GetSide ( unit ) ;
30805: LD_ADDR_VAR 0 3
30809: PUSH
30810: LD_VAR 0 1
30814: PPUSH
30815: CALL_OW 255
30819: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30820: LD_ADDR_VAR 0 4
30824: PUSH
30825: LD_VAR 0 1
30829: PPUSH
30830: CALL_OW 248
30834: ST_TO_ADDR
// case nat of 1 :
30835: LD_VAR 0 4
30839: PUSH
30840: LD_INT 1
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30859
30848: POP
// tech := tech_lassight ; 2 :
30849: LD_ADDR_VAR 0 5
30853: PUSH
30854: LD_INT 12
30856: ST_TO_ADDR
30857: GO 30898
30859: LD_INT 2
30861: DOUBLE
30862: EQUAL
30863: IFTRUE 30867
30865: GO 30878
30867: POP
// tech := tech_mortar ; 3 :
30868: LD_ADDR_VAR 0 5
30872: PUSH
30873: LD_INT 41
30875: ST_TO_ADDR
30876: GO 30898
30878: LD_INT 3
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 30897
30886: POP
// tech := tech_bazooka ; end ;
30887: LD_ADDR_VAR 0 5
30891: PUSH
30892: LD_INT 44
30894: ST_TO_ADDR
30895: GO 30898
30897: POP
// if Researched ( side , tech ) then
30898: LD_VAR 0 3
30902: PPUSH
30903: LD_VAR 0 5
30907: PPUSH
30908: CALL_OW 325
30912: IFFALSE 30939
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30914: LD_ADDR_VAR 0 2
30918: PUSH
30919: LD_INT 5
30921: PUSH
30922: LD_INT 8
30924: PUSH
30925: LD_INT 9
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: PUSH
30933: LD_VAR 0 4
30937: ARRAY
30938: ST_TO_ADDR
// end ;
30939: LD_VAR 0 2
30943: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30944: LD_INT 0
30946: PPUSH
30947: PPUSH
30948: PPUSH
// if not mines then
30949: LD_VAR 0 2
30953: NOT
30954: IFFALSE 30958
// exit ;
30956: GO 31102
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30958: LD_ADDR_VAR 0 5
30962: PUSH
30963: LD_INT 81
30965: PUSH
30966: LD_VAR 0 1
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 3
30977: PUSH
30978: LD_INT 21
30980: PUSH
30981: LD_INT 3
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PPUSH
30996: CALL_OW 69
31000: ST_TO_ADDR
// for i in mines do
31001: LD_ADDR_VAR 0 4
31005: PUSH
31006: LD_VAR 0 2
31010: PUSH
31011: FOR_IN
31012: IFFALSE 31100
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31014: LD_VAR 0 4
31018: PUSH
31019: LD_INT 1
31021: ARRAY
31022: PPUSH
31023: LD_VAR 0 4
31027: PUSH
31028: LD_INT 2
31030: ARRAY
31031: PPUSH
31032: CALL_OW 458
31036: NOT
31037: IFFALSE 31041
// continue ;
31039: GO 31011
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31041: LD_VAR 0 4
31045: PUSH
31046: LD_INT 1
31048: ARRAY
31049: PPUSH
31050: LD_VAR 0 4
31054: PUSH
31055: LD_INT 2
31057: ARRAY
31058: PPUSH
31059: CALL_OW 428
31063: PUSH
31064: LD_VAR 0 5
31068: IN
31069: IFFALSE 31098
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31071: LD_VAR 0 4
31075: PUSH
31076: LD_INT 1
31078: ARRAY
31079: PPUSH
31080: LD_VAR 0 4
31084: PUSH
31085: LD_INT 2
31087: ARRAY
31088: PPUSH
31089: LD_VAR 0 1
31093: PPUSH
31094: CALL_OW 456
// end ;
31098: GO 31011
31100: POP
31101: POP
// end ;
31102: LD_VAR 0 3
31106: RET
// export function Count ( array ) ; var i ; begin
31107: LD_INT 0
31109: PPUSH
31110: PPUSH
// result := 0 ;
31111: LD_ADDR_VAR 0 2
31115: PUSH
31116: LD_INT 0
31118: ST_TO_ADDR
// for i in array do
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_VAR 0 1
31128: PUSH
31129: FOR_IN
31130: IFFALSE 31154
// if i then
31132: LD_VAR 0 3
31136: IFFALSE 31152
// result := result + 1 ;
31138: LD_ADDR_VAR 0 2
31142: PUSH
31143: LD_VAR 0 2
31147: PUSH
31148: LD_INT 1
31150: PLUS
31151: ST_TO_ADDR
31152: GO 31129
31154: POP
31155: POP
// end ;
31156: LD_VAR 0 2
31160: RET
// export function IsEmpty ( building ) ; begin
31161: LD_INT 0
31163: PPUSH
// if not building then
31164: LD_VAR 0 1
31168: NOT
31169: IFFALSE 31173
// exit ;
31171: GO 31216
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31173: LD_ADDR_VAR 0 2
31177: PUSH
31178: LD_VAR 0 1
31182: PUSH
31183: LD_INT 22
31185: PUSH
31186: LD_VAR 0 1
31190: PPUSH
31191: CALL_OW 255
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 58
31202: PUSH
31203: EMPTY
31204: LIST
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PPUSH
31210: CALL_OW 69
31214: IN
31215: ST_TO_ADDR
// end ;
31216: LD_VAR 0 2
31220: RET
// export function IsNotFull ( building ) ; var places ; begin
31221: LD_INT 0
31223: PPUSH
31224: PPUSH
// if not building then
31225: LD_VAR 0 1
31229: NOT
31230: IFFALSE 31234
// exit ;
31232: GO 31405
// result := false ;
31234: LD_ADDR_VAR 0 2
31238: PUSH
31239: LD_INT 0
31241: ST_TO_ADDR
// places := 0 ;
31242: LD_ADDR_VAR 0 3
31246: PUSH
31247: LD_INT 0
31249: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31250: LD_VAR 0 1
31254: PPUSH
31255: CALL_OW 266
31259: PUSH
31260: LD_INT 0
31262: DOUBLE
31263: EQUAL
31264: IFTRUE 31322
31266: LD_INT 1
31268: DOUBLE
31269: EQUAL
31270: IFTRUE 31322
31272: LD_INT 6
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31322
31278: LD_INT 7
31280: DOUBLE
31281: EQUAL
31282: IFTRUE 31322
31284: LD_INT 8
31286: DOUBLE
31287: EQUAL
31288: IFTRUE 31322
31290: LD_INT 4
31292: DOUBLE
31293: EQUAL
31294: IFTRUE 31322
31296: LD_INT 5
31298: DOUBLE
31299: EQUAL
31300: IFTRUE 31322
31302: LD_INT 2
31304: DOUBLE
31305: EQUAL
31306: IFTRUE 31322
31308: LD_INT 3
31310: DOUBLE
31311: EQUAL
31312: IFTRUE 31322
31314: LD_INT 35
31316: DOUBLE
31317: EQUAL
31318: IFTRUE 31322
31320: GO 31333
31322: POP
// places := 6 ; b_bunker , b_breastwork :
31323: LD_ADDR_VAR 0 3
31327: PUSH
31328: LD_INT 6
31330: ST_TO_ADDR
31331: GO 31378
31333: LD_INT 32
31335: DOUBLE
31336: EQUAL
31337: IFTRUE 31347
31339: LD_INT 31
31341: DOUBLE
31342: EQUAL
31343: IFTRUE 31347
31345: GO 31358
31347: POP
// places := 1 ; b_control_tower :
31348: LD_ADDR_VAR 0 3
31352: PUSH
31353: LD_INT 1
31355: ST_TO_ADDR
31356: GO 31378
31358: LD_INT 36
31360: DOUBLE
31361: EQUAL
31362: IFTRUE 31366
31364: GO 31377
31366: POP
// places := 3 ; end ;
31367: LD_ADDR_VAR 0 3
31371: PUSH
31372: LD_INT 3
31374: ST_TO_ADDR
31375: GO 31378
31377: POP
// if places then
31378: LD_VAR 0 3
31382: IFFALSE 31405
// result := UnitsInside ( building ) < places ;
31384: LD_ADDR_VAR 0 2
31388: PUSH
31389: LD_VAR 0 1
31393: PPUSH
31394: CALL_OW 313
31398: PUSH
31399: LD_VAR 0 3
31403: LESS
31404: ST_TO_ADDR
// end ;
31405: LD_VAR 0 2
31409: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31410: LD_INT 0
31412: PPUSH
31413: PPUSH
31414: PPUSH
31415: PPUSH
// tmp := [ ] ;
31416: LD_ADDR_VAR 0 3
31420: PUSH
31421: EMPTY
31422: ST_TO_ADDR
// list := [ ] ;
31423: LD_ADDR_VAR 0 5
31427: PUSH
31428: EMPTY
31429: ST_TO_ADDR
// for i = 16 to 25 do
31430: LD_ADDR_VAR 0 4
31434: PUSH
31435: DOUBLE
31436: LD_INT 16
31438: DEC
31439: ST_TO_ADDR
31440: LD_INT 25
31442: PUSH
31443: FOR_TO
31444: IFFALSE 31517
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31446: LD_ADDR_VAR 0 3
31450: PUSH
31451: LD_VAR 0 3
31455: PUSH
31456: LD_INT 22
31458: PUSH
31459: LD_VAR 0 1
31463: PPUSH
31464: CALL_OW 255
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 91
31475: PUSH
31476: LD_VAR 0 1
31480: PUSH
31481: LD_INT 6
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 30
31491: PUSH
31492: LD_VAR 0 4
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: PUSH
31506: EMPTY
31507: LIST
31508: PPUSH
31509: CALL_OW 69
31513: ADD
31514: ST_TO_ADDR
31515: GO 31443
31517: POP
31518: POP
// for i = 1 to tmp do
31519: LD_ADDR_VAR 0 4
31523: PUSH
31524: DOUBLE
31525: LD_INT 1
31527: DEC
31528: ST_TO_ADDR
31529: LD_VAR 0 3
31533: PUSH
31534: FOR_TO
31535: IFFALSE 31623
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31537: LD_ADDR_VAR 0 5
31541: PUSH
31542: LD_VAR 0 5
31546: PUSH
31547: LD_VAR 0 3
31551: PUSH
31552: LD_VAR 0 4
31556: ARRAY
31557: PPUSH
31558: CALL_OW 266
31562: PUSH
31563: LD_VAR 0 3
31567: PUSH
31568: LD_VAR 0 4
31572: ARRAY
31573: PPUSH
31574: CALL_OW 250
31578: PUSH
31579: LD_VAR 0 3
31583: PUSH
31584: LD_VAR 0 4
31588: ARRAY
31589: PPUSH
31590: CALL_OW 251
31594: PUSH
31595: LD_VAR 0 3
31599: PUSH
31600: LD_VAR 0 4
31604: ARRAY
31605: PPUSH
31606: CALL_OW 254
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: PUSH
31617: EMPTY
31618: LIST
31619: ADD
31620: ST_TO_ADDR
31621: GO 31534
31623: POP
31624: POP
// result := list ;
31625: LD_ADDR_VAR 0 2
31629: PUSH
31630: LD_VAR 0 5
31634: ST_TO_ADDR
// end ;
31635: LD_VAR 0 2
31639: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31640: LD_INT 0
31642: PPUSH
31643: PPUSH
31644: PPUSH
31645: PPUSH
31646: PPUSH
31647: PPUSH
31648: PPUSH
// if not factory then
31649: LD_VAR 0 1
31653: NOT
31654: IFFALSE 31658
// exit ;
31656: GO 32251
// if control = control_apeman then
31658: LD_VAR 0 4
31662: PUSH
31663: LD_INT 5
31665: EQUAL
31666: IFFALSE 31775
// begin tmp := UnitsInside ( factory ) ;
31668: LD_ADDR_VAR 0 8
31672: PUSH
31673: LD_VAR 0 1
31677: PPUSH
31678: CALL_OW 313
31682: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31683: LD_VAR 0 8
31687: PPUSH
31688: LD_INT 25
31690: PUSH
31691: LD_INT 12
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PPUSH
31698: CALL_OW 72
31702: NOT
31703: IFFALSE 31713
// control := control_manual ;
31705: LD_ADDR_VAR 0 4
31709: PUSH
31710: LD_INT 1
31712: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31713: LD_ADDR_VAR 0 8
31717: PUSH
31718: LD_VAR 0 1
31722: PPUSH
31723: CALL 31410 0 1
31727: ST_TO_ADDR
// if tmp then
31728: LD_VAR 0 8
31732: IFFALSE 31775
// begin for i in tmp do
31734: LD_ADDR_VAR 0 7
31738: PUSH
31739: LD_VAR 0 8
31743: PUSH
31744: FOR_IN
31745: IFFALSE 31773
// if i [ 1 ] = b_ext_radio then
31747: LD_VAR 0 7
31751: PUSH
31752: LD_INT 1
31754: ARRAY
31755: PUSH
31756: LD_INT 22
31758: EQUAL
31759: IFFALSE 31771
// begin control := control_remote ;
31761: LD_ADDR_VAR 0 4
31765: PUSH
31766: LD_INT 2
31768: ST_TO_ADDR
// break ;
31769: GO 31773
// end ;
31771: GO 31744
31773: POP
31774: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31775: LD_VAR 0 1
31779: PPUSH
31780: LD_VAR 0 2
31784: PPUSH
31785: LD_VAR 0 3
31789: PPUSH
31790: LD_VAR 0 4
31794: PPUSH
31795: LD_VAR 0 5
31799: PPUSH
31800: CALL_OW 448
31804: IFFALSE 31839
// begin result := [ chassis , engine , control , weapon ] ;
31806: LD_ADDR_VAR 0 6
31810: PUSH
31811: LD_VAR 0 2
31815: PUSH
31816: LD_VAR 0 3
31820: PUSH
31821: LD_VAR 0 4
31825: PUSH
31826: LD_VAR 0 5
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: ST_TO_ADDR
// exit ;
31837: GO 32251
// end ; _chassis := AvailableChassisList ( factory ) ;
31839: LD_ADDR_VAR 0 9
31843: PUSH
31844: LD_VAR 0 1
31848: PPUSH
31849: CALL_OW 475
31853: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31854: LD_ADDR_VAR 0 11
31858: PUSH
31859: LD_VAR 0 1
31863: PPUSH
31864: CALL_OW 476
31868: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31869: LD_ADDR_VAR 0 12
31873: PUSH
31874: LD_VAR 0 1
31878: PPUSH
31879: CALL_OW 477
31883: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31884: LD_ADDR_VAR 0 10
31888: PUSH
31889: LD_VAR 0 1
31893: PPUSH
31894: CALL_OW 478
31898: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31899: LD_VAR 0 9
31903: NOT
31904: PUSH
31905: LD_VAR 0 11
31909: NOT
31910: OR
31911: PUSH
31912: LD_VAR 0 12
31916: NOT
31917: OR
31918: PUSH
31919: LD_VAR 0 10
31923: NOT
31924: OR
31925: IFFALSE 31960
// begin result := [ chassis , engine , control , weapon ] ;
31927: LD_ADDR_VAR 0 6
31931: PUSH
31932: LD_VAR 0 2
31936: PUSH
31937: LD_VAR 0 3
31941: PUSH
31942: LD_VAR 0 4
31946: PUSH
31947: LD_VAR 0 5
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: ST_TO_ADDR
// exit ;
31958: GO 32251
// end ; if not chassis in _chassis then
31960: LD_VAR 0 2
31964: PUSH
31965: LD_VAR 0 9
31969: IN
31970: NOT
31971: IFFALSE 31997
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31973: LD_ADDR_VAR 0 2
31977: PUSH
31978: LD_VAR 0 9
31982: PUSH
31983: LD_INT 1
31985: PPUSH
31986: LD_VAR 0 9
31990: PPUSH
31991: CALL_OW 12
31995: ARRAY
31996: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31997: LD_VAR 0 2
32001: PPUSH
32002: LD_VAR 0 3
32006: PPUSH
32007: CALL 32256 0 2
32011: NOT
32012: IFFALSE 32071
// repeat engine := _engine [ 1 ] ;
32014: LD_ADDR_VAR 0 3
32018: PUSH
32019: LD_VAR 0 11
32023: PUSH
32024: LD_INT 1
32026: ARRAY
32027: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32028: LD_ADDR_VAR 0 11
32032: PUSH
32033: LD_VAR 0 11
32037: PPUSH
32038: LD_INT 1
32040: PPUSH
32041: CALL_OW 3
32045: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32046: LD_VAR 0 2
32050: PPUSH
32051: LD_VAR 0 3
32055: PPUSH
32056: CALL 32256 0 2
32060: PUSH
32061: LD_VAR 0 11
32065: PUSH
32066: EMPTY
32067: EQUAL
32068: OR
32069: IFFALSE 32014
// if not control in _control then
32071: LD_VAR 0 4
32075: PUSH
32076: LD_VAR 0 12
32080: IN
32081: NOT
32082: IFFALSE 32108
// control := _control [ rand ( 1 , _control ) ] ;
32084: LD_ADDR_VAR 0 4
32088: PUSH
32089: LD_VAR 0 12
32093: PUSH
32094: LD_INT 1
32096: PPUSH
32097: LD_VAR 0 12
32101: PPUSH
32102: CALL_OW 12
32106: ARRAY
32107: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32108: LD_VAR 0 2
32112: PPUSH
32113: LD_VAR 0 5
32117: PPUSH
32118: CALL 32476 0 2
32122: NOT
32123: IFFALSE 32182
// repeat weapon := _weapon [ 1 ] ;
32125: LD_ADDR_VAR 0 5
32129: PUSH
32130: LD_VAR 0 10
32134: PUSH
32135: LD_INT 1
32137: ARRAY
32138: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32139: LD_ADDR_VAR 0 10
32143: PUSH
32144: LD_VAR 0 10
32148: PPUSH
32149: LD_INT 1
32151: PPUSH
32152: CALL_OW 3
32156: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32157: LD_VAR 0 2
32161: PPUSH
32162: LD_VAR 0 5
32166: PPUSH
32167: CALL 32476 0 2
32171: PUSH
32172: LD_VAR 0 10
32176: PUSH
32177: EMPTY
32178: EQUAL
32179: OR
32180: IFFALSE 32125
// result := [ ] ;
32182: LD_ADDR_VAR 0 6
32186: PUSH
32187: EMPTY
32188: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32189: LD_VAR 0 1
32193: PPUSH
32194: LD_VAR 0 2
32198: PPUSH
32199: LD_VAR 0 3
32203: PPUSH
32204: LD_VAR 0 4
32208: PPUSH
32209: LD_VAR 0 5
32213: PPUSH
32214: CALL_OW 448
32218: IFFALSE 32251
// result := [ chassis , engine , control , weapon ] ;
32220: LD_ADDR_VAR 0 6
32224: PUSH
32225: LD_VAR 0 2
32229: PUSH
32230: LD_VAR 0 3
32234: PUSH
32235: LD_VAR 0 4
32239: PUSH
32240: LD_VAR 0 5
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: ST_TO_ADDR
// end ;
32251: LD_VAR 0 6
32255: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32256: LD_INT 0
32258: PPUSH
// if not chassis or not engine then
32259: LD_VAR 0 1
32263: NOT
32264: PUSH
32265: LD_VAR 0 2
32269: NOT
32270: OR
32271: IFFALSE 32275
// exit ;
32273: GO 32471
// case engine of engine_solar :
32275: LD_VAR 0 2
32279: PUSH
32280: LD_INT 2
32282: DOUBLE
32283: EQUAL
32284: IFTRUE 32288
32286: GO 32326
32288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32289: LD_ADDR_VAR 0 3
32293: PUSH
32294: LD_INT 11
32296: PUSH
32297: LD_INT 12
32299: PUSH
32300: LD_INT 13
32302: PUSH
32303: LD_INT 14
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 3
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
32324: GO 32455
32326: LD_INT 1
32328: DOUBLE
32329: EQUAL
32330: IFTRUE 32334
32332: GO 32396
32334: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32335: LD_ADDR_VAR 0 3
32339: PUSH
32340: LD_INT 11
32342: PUSH
32343: LD_INT 12
32345: PUSH
32346: LD_INT 13
32348: PUSH
32349: LD_INT 14
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: LD_INT 3
32360: PUSH
32361: LD_INT 4
32363: PUSH
32364: LD_INT 5
32366: PUSH
32367: LD_INT 21
32369: PUSH
32370: LD_INT 23
32372: PUSH
32373: LD_INT 22
32375: PUSH
32376: LD_INT 24
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: ST_TO_ADDR
32394: GO 32455
32396: LD_INT 3
32398: DOUBLE
32399: EQUAL
32400: IFTRUE 32404
32402: GO 32454
32404: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32405: LD_ADDR_VAR 0 3
32409: PUSH
32410: LD_INT 13
32412: PUSH
32413: LD_INT 14
32415: PUSH
32416: LD_INT 2
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: LD_INT 4
32424: PUSH
32425: LD_INT 5
32427: PUSH
32428: LD_INT 21
32430: PUSH
32431: LD_INT 22
32433: PUSH
32434: LD_INT 23
32436: PUSH
32437: LD_INT 24
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: ST_TO_ADDR
32452: GO 32455
32454: POP
// result := ( chassis in result ) ;
32455: LD_ADDR_VAR 0 3
32459: PUSH
32460: LD_VAR 0 1
32464: PUSH
32465: LD_VAR 0 3
32469: IN
32470: ST_TO_ADDR
// end ;
32471: LD_VAR 0 3
32475: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32476: LD_INT 0
32478: PPUSH
// if not chassis or not weapon then
32479: LD_VAR 0 1
32483: NOT
32484: PUSH
32485: LD_VAR 0 2
32489: NOT
32490: OR
32491: IFFALSE 32495
// exit ;
32493: GO 33555
// case weapon of us_machine_gun :
32495: LD_VAR 0 2
32499: PUSH
32500: LD_INT 2
32502: DOUBLE
32503: EQUAL
32504: IFTRUE 32508
32506: GO 32538
32508: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: LD_INT 3
32522: PUSH
32523: LD_INT 4
32525: PUSH
32526: LD_INT 5
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: ST_TO_ADDR
32536: GO 33539
32538: LD_INT 3
32540: DOUBLE
32541: EQUAL
32542: IFTRUE 32546
32544: GO 32576
32546: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32547: LD_ADDR_VAR 0 3
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: LD_INT 3
32560: PUSH
32561: LD_INT 4
32563: PUSH
32564: LD_INT 5
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: ST_TO_ADDR
32574: GO 33539
32576: LD_INT 11
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32584
32582: GO 32614
32584: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: LD_INT 2
32595: PUSH
32596: LD_INT 3
32598: PUSH
32599: LD_INT 4
32601: PUSH
32602: LD_INT 5
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: ST_TO_ADDR
32612: GO 33539
32614: LD_INT 4
32616: DOUBLE
32617: EQUAL
32618: IFTRUE 32622
32620: GO 32648
32622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32623: LD_ADDR_VAR 0 3
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: LD_INT 4
32636: PUSH
32637: LD_INT 5
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
32646: GO 33539
32648: LD_INT 5
32650: DOUBLE
32651: EQUAL
32652: IFTRUE 32656
32654: GO 32682
32656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32657: LD_ADDR_VAR 0 3
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: LD_INT 4
32670: PUSH
32671: LD_INT 5
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: ST_TO_ADDR
32680: GO 33539
32682: LD_INT 9
32684: DOUBLE
32685: EQUAL
32686: IFTRUE 32690
32688: GO 32716
32690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32691: LD_ADDR_VAR 0 3
32695: PUSH
32696: LD_INT 2
32698: PUSH
32699: LD_INT 3
32701: PUSH
32702: LD_INT 4
32704: PUSH
32705: LD_INT 5
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
32714: GO 33539
32716: LD_INT 7
32718: DOUBLE
32719: EQUAL
32720: IFTRUE 32724
32722: GO 32750
32724: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32725: LD_ADDR_VAR 0 3
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 3
32735: PUSH
32736: LD_INT 4
32738: PUSH
32739: LD_INT 5
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
32748: GO 33539
32750: LD_INT 12
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32758
32756: GO 32784
32758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32759: LD_ADDR_VAR 0 3
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: LD_INT 4
32772: PUSH
32773: LD_INT 5
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: ST_TO_ADDR
32782: GO 33539
32784: LD_INT 13
32786: DOUBLE
32787: EQUAL
32788: IFTRUE 32792
32790: GO 32818
32792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32793: LD_ADDR_VAR 0 3
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: LD_INT 4
32806: PUSH
32807: LD_INT 5
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: ST_TO_ADDR
32816: GO 33539
32818: LD_INT 14
32820: DOUBLE
32821: EQUAL
32822: IFTRUE 32826
32824: GO 32844
32826: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32827: LD_ADDR_VAR 0 3
32831: PUSH
32832: LD_INT 4
32834: PUSH
32835: LD_INT 5
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: ST_TO_ADDR
32842: GO 33539
32844: LD_INT 6
32846: DOUBLE
32847: EQUAL
32848: IFTRUE 32852
32850: GO 32870
32852: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32853: LD_ADDR_VAR 0 3
32857: PUSH
32858: LD_INT 4
32860: PUSH
32861: LD_INT 5
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: ST_TO_ADDR
32868: GO 33539
32870: LD_INT 10
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 32896
32878: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32879: LD_ADDR_VAR 0 3
32883: PUSH
32884: LD_INT 4
32886: PUSH
32887: LD_INT 5
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: ST_TO_ADDR
32894: GO 33539
32896: LD_INT 22
32898: DOUBLE
32899: EQUAL
32900: IFTRUE 32904
32902: GO 32930
32904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32905: LD_ADDR_VAR 0 3
32909: PUSH
32910: LD_INT 11
32912: PUSH
32913: LD_INT 12
32915: PUSH
32916: LD_INT 13
32918: PUSH
32919: LD_INT 14
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: ST_TO_ADDR
32928: GO 33539
32930: LD_INT 23
32932: DOUBLE
32933: EQUAL
32934: IFTRUE 32938
32936: GO 32964
32938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32939: LD_ADDR_VAR 0 3
32943: PUSH
32944: LD_INT 11
32946: PUSH
32947: LD_INT 12
32949: PUSH
32950: LD_INT 13
32952: PUSH
32953: LD_INT 14
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: ST_TO_ADDR
32962: GO 33539
32964: LD_INT 24
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32972
32970: GO 32998
32972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32973: LD_ADDR_VAR 0 3
32977: PUSH
32978: LD_INT 11
32980: PUSH
32981: LD_INT 12
32983: PUSH
32984: LD_INT 13
32986: PUSH
32987: LD_INT 14
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: ST_TO_ADDR
32996: GO 33539
32998: LD_INT 30
33000: DOUBLE
33001: EQUAL
33002: IFTRUE 33006
33004: GO 33032
33006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33007: LD_ADDR_VAR 0 3
33011: PUSH
33012: LD_INT 11
33014: PUSH
33015: LD_INT 12
33017: PUSH
33018: LD_INT 13
33020: PUSH
33021: LD_INT 14
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: ST_TO_ADDR
33030: GO 33539
33032: LD_INT 25
33034: DOUBLE
33035: EQUAL
33036: IFTRUE 33040
33038: GO 33058
33040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33041: LD_ADDR_VAR 0 3
33045: PUSH
33046: LD_INT 13
33048: PUSH
33049: LD_INT 14
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: ST_TO_ADDR
33056: GO 33539
33058: LD_INT 27
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33084
33066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33067: LD_ADDR_VAR 0 3
33071: PUSH
33072: LD_INT 13
33074: PUSH
33075: LD_INT 14
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: ST_TO_ADDR
33082: GO 33539
33084: LD_INT 92
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33118
33092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33093: LD_ADDR_VAR 0 3
33097: PUSH
33098: LD_INT 11
33100: PUSH
33101: LD_INT 12
33103: PUSH
33104: LD_INT 13
33106: PUSH
33107: LD_INT 14
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: ST_TO_ADDR
33116: GO 33539
33118: LD_INT 28
33120: DOUBLE
33121: EQUAL
33122: IFTRUE 33126
33124: GO 33144
33126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33127: LD_ADDR_VAR 0 3
33131: PUSH
33132: LD_INT 13
33134: PUSH
33135: LD_INT 14
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: ST_TO_ADDR
33142: GO 33539
33144: LD_INT 29
33146: DOUBLE
33147: EQUAL
33148: IFTRUE 33152
33150: GO 33170
33152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33153: LD_ADDR_VAR 0 3
33157: PUSH
33158: LD_INT 13
33160: PUSH
33161: LD_INT 14
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: ST_TO_ADDR
33168: GO 33539
33170: LD_INT 31
33172: DOUBLE
33173: EQUAL
33174: IFTRUE 33178
33176: GO 33196
33178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33179: LD_ADDR_VAR 0 3
33183: PUSH
33184: LD_INT 13
33186: PUSH
33187: LD_INT 14
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: ST_TO_ADDR
33194: GO 33539
33196: LD_INT 26
33198: DOUBLE
33199: EQUAL
33200: IFTRUE 33204
33202: GO 33222
33204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33205: LD_ADDR_VAR 0 3
33209: PUSH
33210: LD_INT 13
33212: PUSH
33213: LD_INT 14
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: ST_TO_ADDR
33220: GO 33539
33222: LD_INT 42
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33256
33230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33231: LD_ADDR_VAR 0 3
33235: PUSH
33236: LD_INT 21
33238: PUSH
33239: LD_INT 22
33241: PUSH
33242: LD_INT 23
33244: PUSH
33245: LD_INT 24
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: ST_TO_ADDR
33254: GO 33539
33256: LD_INT 43
33258: DOUBLE
33259: EQUAL
33260: IFTRUE 33264
33262: GO 33290
33264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33265: LD_ADDR_VAR 0 3
33269: PUSH
33270: LD_INT 21
33272: PUSH
33273: LD_INT 22
33275: PUSH
33276: LD_INT 23
33278: PUSH
33279: LD_INT 24
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: ST_TO_ADDR
33288: GO 33539
33290: LD_INT 44
33292: DOUBLE
33293: EQUAL
33294: IFTRUE 33298
33296: GO 33324
33298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33299: LD_ADDR_VAR 0 3
33303: PUSH
33304: LD_INT 21
33306: PUSH
33307: LD_INT 22
33309: PUSH
33310: LD_INT 23
33312: PUSH
33313: LD_INT 24
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: ST_TO_ADDR
33322: GO 33539
33324: LD_INT 45
33326: DOUBLE
33327: EQUAL
33328: IFTRUE 33332
33330: GO 33358
33332: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33333: LD_ADDR_VAR 0 3
33337: PUSH
33338: LD_INT 21
33340: PUSH
33341: LD_INT 22
33343: PUSH
33344: LD_INT 23
33346: PUSH
33347: LD_INT 24
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: ST_TO_ADDR
33356: GO 33539
33358: LD_INT 49
33360: DOUBLE
33361: EQUAL
33362: IFTRUE 33366
33364: GO 33392
33366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33367: LD_ADDR_VAR 0 3
33371: PUSH
33372: LD_INT 21
33374: PUSH
33375: LD_INT 22
33377: PUSH
33378: LD_INT 23
33380: PUSH
33381: LD_INT 24
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: ST_TO_ADDR
33390: GO 33539
33392: LD_INT 51
33394: DOUBLE
33395: EQUAL
33396: IFTRUE 33400
33398: GO 33426
33400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33401: LD_ADDR_VAR 0 3
33405: PUSH
33406: LD_INT 21
33408: PUSH
33409: LD_INT 22
33411: PUSH
33412: LD_INT 23
33414: PUSH
33415: LD_INT 24
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: ST_TO_ADDR
33424: GO 33539
33426: LD_INT 52
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33434
33432: GO 33460
33434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33435: LD_ADDR_VAR 0 3
33439: PUSH
33440: LD_INT 21
33442: PUSH
33443: LD_INT 22
33445: PUSH
33446: LD_INT 23
33448: PUSH
33449: LD_INT 24
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: ST_TO_ADDR
33458: GO 33539
33460: LD_INT 53
33462: DOUBLE
33463: EQUAL
33464: IFTRUE 33468
33466: GO 33486
33468: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33469: LD_ADDR_VAR 0 3
33473: PUSH
33474: LD_INT 23
33476: PUSH
33477: LD_INT 24
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: ST_TO_ADDR
33484: GO 33539
33486: LD_INT 46
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33512
33494: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: LD_INT 23
33502: PUSH
33503: LD_INT 24
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: ST_TO_ADDR
33510: GO 33539
33512: LD_INT 47
33514: DOUBLE
33515: EQUAL
33516: IFTRUE 33520
33518: GO 33538
33520: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33521: LD_ADDR_VAR 0 3
33525: PUSH
33526: LD_INT 23
33528: PUSH
33529: LD_INT 24
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: ST_TO_ADDR
33536: GO 33539
33538: POP
// result := ( chassis in result ) ;
33539: LD_ADDR_VAR 0 3
33543: PUSH
33544: LD_VAR 0 1
33548: PUSH
33549: LD_VAR 0 3
33553: IN
33554: ST_TO_ADDR
// end ;
33555: LD_VAR 0 3
33559: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33560: LD_INT 0
33562: PPUSH
33563: PPUSH
33564: PPUSH
33565: PPUSH
33566: PPUSH
33567: PPUSH
33568: PPUSH
// result := array ;
33569: LD_ADDR_VAR 0 5
33573: PUSH
33574: LD_VAR 0 1
33578: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33579: LD_VAR 0 1
33583: NOT
33584: PUSH
33585: LD_VAR 0 2
33589: NOT
33590: OR
33591: PUSH
33592: LD_VAR 0 3
33596: NOT
33597: OR
33598: PUSH
33599: LD_VAR 0 2
33603: PUSH
33604: LD_VAR 0 1
33608: GREATER
33609: OR
33610: PUSH
33611: LD_VAR 0 3
33615: PUSH
33616: LD_VAR 0 1
33620: GREATER
33621: OR
33622: IFFALSE 33626
// exit ;
33624: GO 33922
// if direction then
33626: LD_VAR 0 4
33630: IFFALSE 33694
// begin d := 1 ;
33632: LD_ADDR_VAR 0 9
33636: PUSH
33637: LD_INT 1
33639: ST_TO_ADDR
// if i_from > i_to then
33640: LD_VAR 0 2
33644: PUSH
33645: LD_VAR 0 3
33649: GREATER
33650: IFFALSE 33676
// length := ( array - i_from ) + i_to else
33652: LD_ADDR_VAR 0 11
33656: PUSH
33657: LD_VAR 0 1
33661: PUSH
33662: LD_VAR 0 2
33666: MINUS
33667: PUSH
33668: LD_VAR 0 3
33672: PLUS
33673: ST_TO_ADDR
33674: GO 33692
// length := i_to - i_from ;
33676: LD_ADDR_VAR 0 11
33680: PUSH
33681: LD_VAR 0 3
33685: PUSH
33686: LD_VAR 0 2
33690: MINUS
33691: ST_TO_ADDR
// end else
33692: GO 33755
// begin d := - 1 ;
33694: LD_ADDR_VAR 0 9
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: ST_TO_ADDR
// if i_from > i_to then
33703: LD_VAR 0 2
33707: PUSH
33708: LD_VAR 0 3
33712: GREATER
33713: IFFALSE 33733
// length := i_from - i_to else
33715: LD_ADDR_VAR 0 11
33719: PUSH
33720: LD_VAR 0 2
33724: PUSH
33725: LD_VAR 0 3
33729: MINUS
33730: ST_TO_ADDR
33731: GO 33755
// length := ( array - i_to ) + i_from ;
33733: LD_ADDR_VAR 0 11
33737: PUSH
33738: LD_VAR 0 1
33742: PUSH
33743: LD_VAR 0 3
33747: MINUS
33748: PUSH
33749: LD_VAR 0 2
33753: PLUS
33754: ST_TO_ADDR
// end ; if not length then
33755: LD_VAR 0 11
33759: NOT
33760: IFFALSE 33764
// exit ;
33762: GO 33922
// tmp := array ;
33764: LD_ADDR_VAR 0 10
33768: PUSH
33769: LD_VAR 0 1
33773: ST_TO_ADDR
// for i = 1 to length do
33774: LD_ADDR_VAR 0 6
33778: PUSH
33779: DOUBLE
33780: LD_INT 1
33782: DEC
33783: ST_TO_ADDR
33784: LD_VAR 0 11
33788: PUSH
33789: FOR_TO
33790: IFFALSE 33910
// begin for j = 1 to array do
33792: LD_ADDR_VAR 0 7
33796: PUSH
33797: DOUBLE
33798: LD_INT 1
33800: DEC
33801: ST_TO_ADDR
33802: LD_VAR 0 1
33806: PUSH
33807: FOR_TO
33808: IFFALSE 33896
// begin k := j + d ;
33810: LD_ADDR_VAR 0 8
33814: PUSH
33815: LD_VAR 0 7
33819: PUSH
33820: LD_VAR 0 9
33824: PLUS
33825: ST_TO_ADDR
// if k > array then
33826: LD_VAR 0 8
33830: PUSH
33831: LD_VAR 0 1
33835: GREATER
33836: IFFALSE 33846
// k := 1 ;
33838: LD_ADDR_VAR 0 8
33842: PUSH
33843: LD_INT 1
33845: ST_TO_ADDR
// if not k then
33846: LD_VAR 0 8
33850: NOT
33851: IFFALSE 33863
// k := array ;
33853: LD_ADDR_VAR 0 8
33857: PUSH
33858: LD_VAR 0 1
33862: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33863: LD_ADDR_VAR 0 10
33867: PUSH
33868: LD_VAR 0 10
33872: PPUSH
33873: LD_VAR 0 8
33877: PPUSH
33878: LD_VAR 0 1
33882: PUSH
33883: LD_VAR 0 7
33887: ARRAY
33888: PPUSH
33889: CALL_OW 1
33893: ST_TO_ADDR
// end ;
33894: GO 33807
33896: POP
33897: POP
// array := tmp ;
33898: LD_ADDR_VAR 0 1
33902: PUSH
33903: LD_VAR 0 10
33907: ST_TO_ADDR
// end ;
33908: GO 33789
33910: POP
33911: POP
// result := array ;
33912: LD_ADDR_VAR 0 5
33916: PUSH
33917: LD_VAR 0 1
33921: ST_TO_ADDR
// end ;
33922: LD_VAR 0 5
33926: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33927: LD_INT 0
33929: PPUSH
33930: PPUSH
// result := 0 ;
33931: LD_ADDR_VAR 0 3
33935: PUSH
33936: LD_INT 0
33938: ST_TO_ADDR
// if not array or not value in array then
33939: LD_VAR 0 1
33943: NOT
33944: PUSH
33945: LD_VAR 0 2
33949: PUSH
33950: LD_VAR 0 1
33954: IN
33955: NOT
33956: OR
33957: IFFALSE 33961
// exit ;
33959: GO 34015
// for i = 1 to array do
33961: LD_ADDR_VAR 0 4
33965: PUSH
33966: DOUBLE
33967: LD_INT 1
33969: DEC
33970: ST_TO_ADDR
33971: LD_VAR 0 1
33975: PUSH
33976: FOR_TO
33977: IFFALSE 34013
// if value = array [ i ] then
33979: LD_VAR 0 2
33983: PUSH
33984: LD_VAR 0 1
33988: PUSH
33989: LD_VAR 0 4
33993: ARRAY
33994: EQUAL
33995: IFFALSE 34011
// begin result := i ;
33997: LD_ADDR_VAR 0 3
34001: PUSH
34002: LD_VAR 0 4
34006: ST_TO_ADDR
// exit ;
34007: POP
34008: POP
34009: GO 34015
// end ;
34011: GO 33976
34013: POP
34014: POP
// end ;
34015: LD_VAR 0 3
34019: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34020: LD_INT 0
34022: PPUSH
// vc_chassis := chassis ;
34023: LD_ADDR_OWVAR 37
34027: PUSH
34028: LD_VAR 0 1
34032: ST_TO_ADDR
// vc_engine := engine ;
34033: LD_ADDR_OWVAR 39
34037: PUSH
34038: LD_VAR 0 2
34042: ST_TO_ADDR
// vc_control := control ;
34043: LD_ADDR_OWVAR 38
34047: PUSH
34048: LD_VAR 0 3
34052: ST_TO_ADDR
// vc_weapon := weapon ;
34053: LD_ADDR_OWVAR 40
34057: PUSH
34058: LD_VAR 0 4
34062: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34063: LD_ADDR_OWVAR 41
34067: PUSH
34068: LD_VAR 0 5
34072: ST_TO_ADDR
// end ;
34073: LD_VAR 0 6
34077: RET
// export function WantPlant ( unit ) ; var task ; begin
34078: LD_INT 0
34080: PPUSH
34081: PPUSH
// result := false ;
34082: LD_ADDR_VAR 0 2
34086: PUSH
34087: LD_INT 0
34089: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34090: LD_ADDR_VAR 0 3
34094: PUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 437
34104: ST_TO_ADDR
// if task then
34105: LD_VAR 0 3
34109: IFFALSE 34137
// if task [ 1 ] [ 1 ] = p then
34111: LD_VAR 0 3
34115: PUSH
34116: LD_INT 1
34118: ARRAY
34119: PUSH
34120: LD_INT 1
34122: ARRAY
34123: PUSH
34124: LD_STRING p
34126: EQUAL
34127: IFFALSE 34137
// result := true ;
34129: LD_ADDR_VAR 0 2
34133: PUSH
34134: LD_INT 1
34136: ST_TO_ADDR
// end ;
34137: LD_VAR 0 2
34141: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34142: LD_INT 0
34144: PPUSH
34145: PPUSH
34146: PPUSH
34147: PPUSH
// if pos < 1 then
34148: LD_VAR 0 2
34152: PUSH
34153: LD_INT 1
34155: LESS
34156: IFFALSE 34160
// exit ;
34158: GO 34463
// if pos = 1 then
34160: LD_VAR 0 2
34164: PUSH
34165: LD_INT 1
34167: EQUAL
34168: IFFALSE 34201
// result := Replace ( arr , pos [ 1 ] , value ) else
34170: LD_ADDR_VAR 0 4
34174: PUSH
34175: LD_VAR 0 1
34179: PPUSH
34180: LD_VAR 0 2
34184: PUSH
34185: LD_INT 1
34187: ARRAY
34188: PPUSH
34189: LD_VAR 0 3
34193: PPUSH
34194: CALL_OW 1
34198: ST_TO_ADDR
34199: GO 34463
// begin tmp := arr ;
34201: LD_ADDR_VAR 0 6
34205: PUSH
34206: LD_VAR 0 1
34210: ST_TO_ADDR
// s_arr := [ tmp ] ;
34211: LD_ADDR_VAR 0 7
34215: PUSH
34216: LD_VAR 0 6
34220: PUSH
34221: EMPTY
34222: LIST
34223: ST_TO_ADDR
// for i = 1 to pos - 1 do
34224: LD_ADDR_VAR 0 5
34228: PUSH
34229: DOUBLE
34230: LD_INT 1
34232: DEC
34233: ST_TO_ADDR
34234: LD_VAR 0 2
34238: PUSH
34239: LD_INT 1
34241: MINUS
34242: PUSH
34243: FOR_TO
34244: IFFALSE 34289
// begin tmp := tmp [ pos [ i ] ] ;
34246: LD_ADDR_VAR 0 6
34250: PUSH
34251: LD_VAR 0 6
34255: PUSH
34256: LD_VAR 0 2
34260: PUSH
34261: LD_VAR 0 5
34265: ARRAY
34266: ARRAY
34267: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34268: LD_ADDR_VAR 0 7
34272: PUSH
34273: LD_VAR 0 7
34277: PUSH
34278: LD_VAR 0 6
34282: PUSH
34283: EMPTY
34284: LIST
34285: ADD
34286: ST_TO_ADDR
// end ;
34287: GO 34243
34289: POP
34290: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34291: LD_ADDR_VAR 0 6
34295: PUSH
34296: LD_VAR 0 6
34300: PPUSH
34301: LD_VAR 0 2
34305: PUSH
34306: LD_VAR 0 2
34310: ARRAY
34311: PPUSH
34312: LD_VAR 0 3
34316: PPUSH
34317: CALL_OW 1
34321: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34322: LD_ADDR_VAR 0 7
34326: PUSH
34327: LD_VAR 0 7
34331: PPUSH
34332: LD_VAR 0 7
34336: PPUSH
34337: LD_VAR 0 6
34341: PPUSH
34342: CALL_OW 1
34346: ST_TO_ADDR
// for i = s_arr downto 2 do
34347: LD_ADDR_VAR 0 5
34351: PUSH
34352: DOUBLE
34353: LD_VAR 0 7
34357: INC
34358: ST_TO_ADDR
34359: LD_INT 2
34361: PUSH
34362: FOR_DOWNTO
34363: IFFALSE 34447
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34365: LD_ADDR_VAR 0 6
34369: PUSH
34370: LD_VAR 0 7
34374: PUSH
34375: LD_VAR 0 5
34379: PUSH
34380: LD_INT 1
34382: MINUS
34383: ARRAY
34384: PPUSH
34385: LD_VAR 0 2
34389: PUSH
34390: LD_VAR 0 5
34394: PUSH
34395: LD_INT 1
34397: MINUS
34398: ARRAY
34399: PPUSH
34400: LD_VAR 0 7
34404: PUSH
34405: LD_VAR 0 5
34409: ARRAY
34410: PPUSH
34411: CALL_OW 1
34415: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34416: LD_ADDR_VAR 0 7
34420: PUSH
34421: LD_VAR 0 7
34425: PPUSH
34426: LD_VAR 0 5
34430: PUSH
34431: LD_INT 1
34433: MINUS
34434: PPUSH
34435: LD_VAR 0 6
34439: PPUSH
34440: CALL_OW 1
34444: ST_TO_ADDR
// end ;
34445: GO 34362
34447: POP
34448: POP
// result := s_arr [ 1 ] ;
34449: LD_ADDR_VAR 0 4
34453: PUSH
34454: LD_VAR 0 7
34458: PUSH
34459: LD_INT 1
34461: ARRAY
34462: ST_TO_ADDR
// end ; end ;
34463: LD_VAR 0 4
34467: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34468: LD_INT 0
34470: PPUSH
34471: PPUSH
// if not list then
34472: LD_VAR 0 1
34476: NOT
34477: IFFALSE 34481
// exit ;
34479: GO 34572
// i := list [ pos1 ] ;
34481: LD_ADDR_VAR 0 5
34485: PUSH
34486: LD_VAR 0 1
34490: PUSH
34491: LD_VAR 0 2
34495: ARRAY
34496: ST_TO_ADDR
// if not i then
34497: LD_VAR 0 5
34501: NOT
34502: IFFALSE 34506
// exit ;
34504: GO 34572
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34506: LD_ADDR_VAR 0 1
34510: PUSH
34511: LD_VAR 0 1
34515: PPUSH
34516: LD_VAR 0 2
34520: PPUSH
34521: LD_VAR 0 1
34525: PUSH
34526: LD_VAR 0 3
34530: ARRAY
34531: PPUSH
34532: CALL_OW 1
34536: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34537: LD_ADDR_VAR 0 1
34541: PUSH
34542: LD_VAR 0 1
34546: PPUSH
34547: LD_VAR 0 3
34551: PPUSH
34552: LD_VAR 0 5
34556: PPUSH
34557: CALL_OW 1
34561: ST_TO_ADDR
// result := list ;
34562: LD_ADDR_VAR 0 4
34566: PUSH
34567: LD_VAR 0 1
34571: ST_TO_ADDR
// end ;
34572: LD_VAR 0 4
34576: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34577: LD_INT 0
34579: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34580: LD_ADDR_VAR 0 5
34584: PUSH
34585: LD_VAR 0 1
34589: PPUSH
34590: CALL_OW 250
34594: PPUSH
34595: LD_VAR 0 1
34599: PPUSH
34600: CALL_OW 251
34604: PPUSH
34605: LD_VAR 0 2
34609: PPUSH
34610: LD_VAR 0 3
34614: PPUSH
34615: LD_VAR 0 4
34619: PPUSH
34620: CALL 34630 0 5
34624: ST_TO_ADDR
// end ;
34625: LD_VAR 0 5
34629: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34630: LD_INT 0
34632: PPUSH
34633: PPUSH
34634: PPUSH
34635: PPUSH
// if not list then
34636: LD_VAR 0 3
34640: NOT
34641: IFFALSE 34645
// exit ;
34643: GO 35033
// result := [ ] ;
34645: LD_ADDR_VAR 0 6
34649: PUSH
34650: EMPTY
34651: ST_TO_ADDR
// for i in list do
34652: LD_ADDR_VAR 0 7
34656: PUSH
34657: LD_VAR 0 3
34661: PUSH
34662: FOR_IN
34663: IFFALSE 34865
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34665: LD_ADDR_VAR 0 9
34669: PUSH
34670: LD_VAR 0 7
34674: PPUSH
34675: LD_VAR 0 1
34679: PPUSH
34680: LD_VAR 0 2
34684: PPUSH
34685: CALL_OW 297
34689: ST_TO_ADDR
// if not result then
34690: LD_VAR 0 6
34694: NOT
34695: IFFALSE 34721
// result := [ [ i , tmp ] ] else
34697: LD_ADDR_VAR 0 6
34701: PUSH
34702: LD_VAR 0 7
34706: PUSH
34707: LD_VAR 0 9
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: EMPTY
34717: LIST
34718: ST_TO_ADDR
34719: GO 34863
// begin if result [ result ] [ 2 ] < tmp then
34721: LD_VAR 0 6
34725: PUSH
34726: LD_VAR 0 6
34730: ARRAY
34731: PUSH
34732: LD_INT 2
34734: ARRAY
34735: PUSH
34736: LD_VAR 0 9
34740: LESS
34741: IFFALSE 34783
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34743: LD_ADDR_VAR 0 6
34747: PUSH
34748: LD_VAR 0 6
34752: PPUSH
34753: LD_VAR 0 6
34757: PUSH
34758: LD_INT 1
34760: PLUS
34761: PPUSH
34762: LD_VAR 0 7
34766: PUSH
34767: LD_VAR 0 9
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PPUSH
34776: CALL_OW 2
34780: ST_TO_ADDR
34781: GO 34863
// for j = 1 to result do
34783: LD_ADDR_VAR 0 8
34787: PUSH
34788: DOUBLE
34789: LD_INT 1
34791: DEC
34792: ST_TO_ADDR
34793: LD_VAR 0 6
34797: PUSH
34798: FOR_TO
34799: IFFALSE 34861
// begin if tmp < result [ j ] [ 2 ] then
34801: LD_VAR 0 9
34805: PUSH
34806: LD_VAR 0 6
34810: PUSH
34811: LD_VAR 0 8
34815: ARRAY
34816: PUSH
34817: LD_INT 2
34819: ARRAY
34820: LESS
34821: IFFALSE 34859
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34823: LD_ADDR_VAR 0 6
34827: PUSH
34828: LD_VAR 0 6
34832: PPUSH
34833: LD_VAR 0 8
34837: PPUSH
34838: LD_VAR 0 7
34842: PUSH
34843: LD_VAR 0 9
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PPUSH
34852: CALL_OW 2
34856: ST_TO_ADDR
// break ;
34857: GO 34861
// end ; end ;
34859: GO 34798
34861: POP
34862: POP
// end ; end ;
34863: GO 34662
34865: POP
34866: POP
// if result and not asc then
34867: LD_VAR 0 6
34871: PUSH
34872: LD_VAR 0 4
34876: NOT
34877: AND
34878: IFFALSE 34953
// begin tmp := result ;
34880: LD_ADDR_VAR 0 9
34884: PUSH
34885: LD_VAR 0 6
34889: ST_TO_ADDR
// for i = tmp downto 1 do
34890: LD_ADDR_VAR 0 7
34894: PUSH
34895: DOUBLE
34896: LD_VAR 0 9
34900: INC
34901: ST_TO_ADDR
34902: LD_INT 1
34904: PUSH
34905: FOR_DOWNTO
34906: IFFALSE 34951
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34908: LD_ADDR_VAR 0 6
34912: PUSH
34913: LD_VAR 0 6
34917: PPUSH
34918: LD_VAR 0 9
34922: PUSH
34923: LD_VAR 0 7
34927: MINUS
34928: PUSH
34929: LD_INT 1
34931: PLUS
34932: PPUSH
34933: LD_VAR 0 9
34937: PUSH
34938: LD_VAR 0 7
34942: ARRAY
34943: PPUSH
34944: CALL_OW 1
34948: ST_TO_ADDR
34949: GO 34905
34951: POP
34952: POP
// end ; tmp := [ ] ;
34953: LD_ADDR_VAR 0 9
34957: PUSH
34958: EMPTY
34959: ST_TO_ADDR
// if mode then
34960: LD_VAR 0 5
34964: IFFALSE 35033
// begin for i = 1 to result do
34966: LD_ADDR_VAR 0 7
34970: PUSH
34971: DOUBLE
34972: LD_INT 1
34974: DEC
34975: ST_TO_ADDR
34976: LD_VAR 0 6
34980: PUSH
34981: FOR_TO
34982: IFFALSE 35021
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34984: LD_ADDR_VAR 0 9
34988: PUSH
34989: LD_VAR 0 9
34993: PPUSH
34994: LD_VAR 0 7
34998: PPUSH
34999: LD_VAR 0 6
35003: PUSH
35004: LD_VAR 0 7
35008: ARRAY
35009: PUSH
35010: LD_INT 1
35012: ARRAY
35013: PPUSH
35014: CALL_OW 1
35018: ST_TO_ADDR
35019: GO 34981
35021: POP
35022: POP
// result := tmp ;
35023: LD_ADDR_VAR 0 6
35027: PUSH
35028: LD_VAR 0 9
35032: ST_TO_ADDR
// end ; end ;
35033: LD_VAR 0 6
35037: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35038: LD_INT 0
35040: PPUSH
35041: PPUSH
35042: PPUSH
35043: PPUSH
35044: PPUSH
35045: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35046: LD_ADDR_VAR 0 5
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: EMPTY
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
// if not x or not y then
35068: LD_VAR 0 2
35072: NOT
35073: PUSH
35074: LD_VAR 0 3
35078: NOT
35079: OR
35080: IFFALSE 35084
// exit ;
35082: GO 36734
// if not range then
35084: LD_VAR 0 4
35088: NOT
35089: IFFALSE 35099
// range := 10 ;
35091: LD_ADDR_VAR 0 4
35095: PUSH
35096: LD_INT 10
35098: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35099: LD_ADDR_VAR 0 8
35103: PUSH
35104: LD_INT 81
35106: PUSH
35107: LD_VAR 0 1
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 92
35118: PUSH
35119: LD_VAR 0 2
35123: PUSH
35124: LD_VAR 0 3
35128: PUSH
35129: LD_VAR 0 4
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 3
35142: PUSH
35143: LD_INT 21
35145: PUSH
35146: LD_INT 3
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: LIST
35161: PPUSH
35162: CALL_OW 69
35166: ST_TO_ADDR
// if not tmp then
35167: LD_VAR 0 8
35171: NOT
35172: IFFALSE 35176
// exit ;
35174: GO 36734
// for i in tmp do
35176: LD_ADDR_VAR 0 6
35180: PUSH
35181: LD_VAR 0 8
35185: PUSH
35186: FOR_IN
35187: IFFALSE 36709
// begin points := [ 0 , 0 , 0 ] ;
35189: LD_ADDR_VAR 0 9
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// bpoints := 1 ;
35208: LD_ADDR_VAR 0 10
35212: PUSH
35213: LD_INT 1
35215: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35216: LD_VAR 0 6
35220: PPUSH
35221: CALL_OW 247
35225: PUSH
35226: LD_INT 1
35228: DOUBLE
35229: EQUAL
35230: IFTRUE 35234
35232: GO 35812
35234: POP
// begin if GetClass ( i ) = 1 then
35235: LD_VAR 0 6
35239: PPUSH
35240: CALL_OW 257
35244: PUSH
35245: LD_INT 1
35247: EQUAL
35248: IFFALSE 35269
// points := [ 10 , 5 , 3 ] ;
35250: LD_ADDR_VAR 0 9
35254: PUSH
35255: LD_INT 10
35257: PUSH
35258: LD_INT 5
35260: PUSH
35261: LD_INT 3
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: LIST
35268: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35269: LD_VAR 0 6
35273: PPUSH
35274: CALL_OW 257
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 3
35284: PUSH
35285: LD_INT 4
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: IN
35293: IFFALSE 35314
// points := [ 3 , 2 , 1 ] ;
35295: LD_ADDR_VAR 0 9
35299: PUSH
35300: LD_INT 3
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35314: LD_VAR 0 6
35318: PPUSH
35319: CALL_OW 257
35323: PUSH
35324: LD_INT 5
35326: EQUAL
35327: IFFALSE 35348
// points := [ 130 , 5 , 2 ] ;
35329: LD_ADDR_VAR 0 9
35333: PUSH
35334: LD_INT 130
35336: PUSH
35337: LD_INT 5
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35348: LD_VAR 0 6
35352: PPUSH
35353: CALL_OW 257
35357: PUSH
35358: LD_INT 8
35360: EQUAL
35361: IFFALSE 35382
// points := [ 35 , 35 , 30 ] ;
35363: LD_ADDR_VAR 0 9
35367: PUSH
35368: LD_INT 35
35370: PUSH
35371: LD_INT 35
35373: PUSH
35374: LD_INT 30
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35382: LD_VAR 0 6
35386: PPUSH
35387: CALL_OW 257
35391: PUSH
35392: LD_INT 9
35394: EQUAL
35395: IFFALSE 35416
// points := [ 20 , 55 , 40 ] ;
35397: LD_ADDR_VAR 0 9
35401: PUSH
35402: LD_INT 20
35404: PUSH
35405: LD_INT 55
35407: PUSH
35408: LD_INT 40
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35416: LD_VAR 0 6
35420: PPUSH
35421: CALL_OW 257
35425: PUSH
35426: LD_INT 12
35428: PUSH
35429: LD_INT 16
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: IN
35436: IFFALSE 35457
// points := [ 5 , 3 , 2 ] ;
35438: LD_ADDR_VAR 0 9
35442: PUSH
35443: LD_INT 5
35445: PUSH
35446: LD_INT 3
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: LIST
35456: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35457: LD_VAR 0 6
35461: PPUSH
35462: CALL_OW 257
35466: PUSH
35467: LD_INT 17
35469: EQUAL
35470: IFFALSE 35491
// points := [ 100 , 50 , 75 ] ;
35472: LD_ADDR_VAR 0 9
35476: PUSH
35477: LD_INT 100
35479: PUSH
35480: LD_INT 50
35482: PUSH
35483: LD_INT 75
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: LIST
35490: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35491: LD_VAR 0 6
35495: PPUSH
35496: CALL_OW 257
35500: PUSH
35501: LD_INT 15
35503: EQUAL
35504: IFFALSE 35525
// points := [ 10 , 5 , 3 ] ;
35506: LD_ADDR_VAR 0 9
35510: PUSH
35511: LD_INT 10
35513: PUSH
35514: LD_INT 5
35516: PUSH
35517: LD_INT 3
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35525: LD_VAR 0 6
35529: PPUSH
35530: CALL_OW 257
35534: PUSH
35535: LD_INT 14
35537: EQUAL
35538: IFFALSE 35559
// points := [ 10 , 0 , 0 ] ;
35540: LD_ADDR_VAR 0 9
35544: PUSH
35545: LD_INT 10
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35559: LD_VAR 0 6
35563: PPUSH
35564: CALL_OW 257
35568: PUSH
35569: LD_INT 11
35571: EQUAL
35572: IFFALSE 35593
// points := [ 30 , 10 , 5 ] ;
35574: LD_ADDR_VAR 0 9
35578: PUSH
35579: LD_INT 30
35581: PUSH
35582: LD_INT 10
35584: PUSH
35585: LD_INT 5
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35593: LD_VAR 0 1
35597: PPUSH
35598: LD_INT 5
35600: PPUSH
35601: CALL_OW 321
35605: PUSH
35606: LD_INT 2
35608: EQUAL
35609: IFFALSE 35626
// bpoints := bpoints * 1.8 ;
35611: LD_ADDR_VAR 0 10
35615: PUSH
35616: LD_VAR 0 10
35620: PUSH
35621: LD_REAL  1.80000000000000E+0000
35624: MUL
35625: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35626: LD_VAR 0 6
35630: PPUSH
35631: CALL_OW 257
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: LD_INT 3
35644: PUSH
35645: LD_INT 4
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: IN
35654: PUSH
35655: LD_VAR 0 1
35659: PPUSH
35660: LD_INT 51
35662: PPUSH
35663: CALL_OW 321
35667: PUSH
35668: LD_INT 2
35670: EQUAL
35671: AND
35672: IFFALSE 35689
// bpoints := bpoints * 1.2 ;
35674: LD_ADDR_VAR 0 10
35678: PUSH
35679: LD_VAR 0 10
35683: PUSH
35684: LD_REAL  1.20000000000000E+0000
35687: MUL
35688: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35689: LD_VAR 0 6
35693: PPUSH
35694: CALL_OW 257
35698: PUSH
35699: LD_INT 5
35701: PUSH
35702: LD_INT 7
35704: PUSH
35705: LD_INT 9
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: IN
35713: PUSH
35714: LD_VAR 0 1
35718: PPUSH
35719: LD_INT 52
35721: PPUSH
35722: CALL_OW 321
35726: PUSH
35727: LD_INT 2
35729: EQUAL
35730: AND
35731: IFFALSE 35748
// bpoints := bpoints * 1.5 ;
35733: LD_ADDR_VAR 0 10
35737: PUSH
35738: LD_VAR 0 10
35742: PUSH
35743: LD_REAL  1.50000000000000E+0000
35746: MUL
35747: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35748: LD_VAR 0 1
35752: PPUSH
35753: LD_INT 66
35755: PPUSH
35756: CALL_OW 321
35760: PUSH
35761: LD_INT 2
35763: EQUAL
35764: IFFALSE 35781
// bpoints := bpoints * 1.1 ;
35766: LD_ADDR_VAR 0 10
35770: PUSH
35771: LD_VAR 0 10
35775: PUSH
35776: LD_REAL  1.10000000000000E+0000
35779: MUL
35780: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35781: LD_ADDR_VAR 0 10
35785: PUSH
35786: LD_VAR 0 10
35790: PUSH
35791: LD_VAR 0 6
35795: PPUSH
35796: LD_INT 1
35798: PPUSH
35799: CALL_OW 259
35803: PUSH
35804: LD_REAL  1.15000000000000E+0000
35807: MUL
35808: MUL
35809: ST_TO_ADDR
// end ; unit_vehicle :
35810: GO 36638
35812: LD_INT 2
35814: DOUBLE
35815: EQUAL
35816: IFTRUE 35820
35818: GO 36626
35820: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35821: LD_VAR 0 6
35825: PPUSH
35826: CALL_OW 264
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: LD_INT 42
35836: PUSH
35837: LD_INT 24
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: IN
35845: IFFALSE 35866
// points := [ 25 , 5 , 3 ] ;
35847: LD_ADDR_VAR 0 9
35851: PUSH
35852: LD_INT 25
35854: PUSH
35855: LD_INT 5
35857: PUSH
35858: LD_INT 3
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35866: LD_VAR 0 6
35870: PPUSH
35871: CALL_OW 264
35875: PUSH
35876: LD_INT 4
35878: PUSH
35879: LD_INT 43
35881: PUSH
35882: LD_INT 25
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: IN
35890: IFFALSE 35911
// points := [ 40 , 15 , 5 ] ;
35892: LD_ADDR_VAR 0 9
35896: PUSH
35897: LD_INT 40
35899: PUSH
35900: LD_INT 15
35902: PUSH
35903: LD_INT 5
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35911: LD_VAR 0 6
35915: PPUSH
35916: CALL_OW 264
35920: PUSH
35921: LD_INT 3
35923: PUSH
35924: LD_INT 23
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: IN
35931: IFFALSE 35952
// points := [ 7 , 25 , 8 ] ;
35933: LD_ADDR_VAR 0 9
35937: PUSH
35938: LD_INT 7
35940: PUSH
35941: LD_INT 25
35943: PUSH
35944: LD_INT 8
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35952: LD_VAR 0 6
35956: PPUSH
35957: CALL_OW 264
35961: PUSH
35962: LD_INT 5
35964: PUSH
35965: LD_INT 27
35967: PUSH
35968: LD_INT 44
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: IN
35976: IFFALSE 35997
// points := [ 14 , 50 , 16 ] ;
35978: LD_ADDR_VAR 0 9
35982: PUSH
35983: LD_INT 14
35985: PUSH
35986: LD_INT 50
35988: PUSH
35989: LD_INT 16
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35997: LD_VAR 0 6
36001: PPUSH
36002: CALL_OW 264
36006: PUSH
36007: LD_INT 6
36009: PUSH
36010: LD_INT 46
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: IN
36017: IFFALSE 36038
// points := [ 32 , 120 , 70 ] ;
36019: LD_ADDR_VAR 0 9
36023: PUSH
36024: LD_INT 32
36026: PUSH
36027: LD_INT 120
36029: PUSH
36030: LD_INT 70
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: LIST
36037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36038: LD_VAR 0 6
36042: PPUSH
36043: CALL_OW 264
36047: PUSH
36048: LD_INT 7
36050: PUSH
36051: LD_INT 28
36053: PUSH
36054: LD_INT 45
36056: PUSH
36057: LD_INT 92
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: IN
36066: IFFALSE 36087
// points := [ 35 , 20 , 45 ] ;
36068: LD_ADDR_VAR 0 9
36072: PUSH
36073: LD_INT 35
36075: PUSH
36076: LD_INT 20
36078: PUSH
36079: LD_INT 45
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36087: LD_VAR 0 6
36091: PPUSH
36092: CALL_OW 264
36096: PUSH
36097: LD_INT 47
36099: PUSH
36100: EMPTY
36101: LIST
36102: IN
36103: IFFALSE 36124
// points := [ 67 , 45 , 75 ] ;
36105: LD_ADDR_VAR 0 9
36109: PUSH
36110: LD_INT 67
36112: PUSH
36113: LD_INT 45
36115: PUSH
36116: LD_INT 75
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36124: LD_VAR 0 6
36128: PPUSH
36129: CALL_OW 264
36133: PUSH
36134: LD_INT 26
36136: PUSH
36137: EMPTY
36138: LIST
36139: IN
36140: IFFALSE 36161
// points := [ 120 , 30 , 80 ] ;
36142: LD_ADDR_VAR 0 9
36146: PUSH
36147: LD_INT 120
36149: PUSH
36150: LD_INT 30
36152: PUSH
36153: LD_INT 80
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36161: LD_VAR 0 6
36165: PPUSH
36166: CALL_OW 264
36170: PUSH
36171: LD_INT 22
36173: PUSH
36174: EMPTY
36175: LIST
36176: IN
36177: IFFALSE 36198
// points := [ 40 , 1 , 1 ] ;
36179: LD_ADDR_VAR 0 9
36183: PUSH
36184: LD_INT 40
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: LIST
36197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36198: LD_VAR 0 6
36202: PPUSH
36203: CALL_OW 264
36207: PUSH
36208: LD_INT 29
36210: PUSH
36211: EMPTY
36212: LIST
36213: IN
36214: IFFALSE 36235
// points := [ 70 , 200 , 400 ] ;
36216: LD_ADDR_VAR 0 9
36220: PUSH
36221: LD_INT 70
36223: PUSH
36224: LD_INT 200
36226: PUSH
36227: LD_INT 400
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36235: LD_VAR 0 6
36239: PPUSH
36240: CALL_OW 264
36244: PUSH
36245: LD_INT 14
36247: PUSH
36248: LD_INT 53
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: IN
36255: IFFALSE 36276
// points := [ 40 , 10 , 20 ] ;
36257: LD_ADDR_VAR 0 9
36261: PUSH
36262: LD_INT 40
36264: PUSH
36265: LD_INT 10
36267: PUSH
36268: LD_INT 20
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36276: LD_VAR 0 6
36280: PPUSH
36281: CALL_OW 264
36285: PUSH
36286: LD_INT 9
36288: PUSH
36289: EMPTY
36290: LIST
36291: IN
36292: IFFALSE 36313
// points := [ 5 , 70 , 20 ] ;
36294: LD_ADDR_VAR 0 9
36298: PUSH
36299: LD_INT 5
36301: PUSH
36302: LD_INT 70
36304: PUSH
36305: LD_INT 20
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36313: LD_VAR 0 6
36317: PPUSH
36318: CALL_OW 264
36322: PUSH
36323: LD_INT 10
36325: PUSH
36326: EMPTY
36327: LIST
36328: IN
36329: IFFALSE 36350
// points := [ 35 , 110 , 70 ] ;
36331: LD_ADDR_VAR 0 9
36335: PUSH
36336: LD_INT 35
36338: PUSH
36339: LD_INT 110
36341: PUSH
36342: LD_INT 70
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36350: LD_VAR 0 6
36354: PPUSH
36355: CALL_OW 265
36359: PUSH
36360: LD_INT 25
36362: EQUAL
36363: IFFALSE 36384
// points := [ 80 , 65 , 100 ] ;
36365: LD_ADDR_VAR 0 9
36369: PUSH
36370: LD_INT 80
36372: PUSH
36373: LD_INT 65
36375: PUSH
36376: LD_INT 100
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: LIST
36383: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36384: LD_VAR 0 6
36388: PPUSH
36389: CALL_OW 263
36393: PUSH
36394: LD_INT 1
36396: EQUAL
36397: IFFALSE 36432
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36399: LD_ADDR_VAR 0 10
36403: PUSH
36404: LD_VAR 0 10
36408: PUSH
36409: LD_VAR 0 6
36413: PPUSH
36414: CALL_OW 311
36418: PPUSH
36419: LD_INT 3
36421: PPUSH
36422: CALL_OW 259
36426: PUSH
36427: LD_INT 4
36429: MUL
36430: MUL
36431: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36432: LD_VAR 0 6
36436: PPUSH
36437: CALL_OW 263
36441: PUSH
36442: LD_INT 2
36444: EQUAL
36445: IFFALSE 36496
// begin j := IsControledBy ( i ) ;
36447: LD_ADDR_VAR 0 7
36451: PUSH
36452: LD_VAR 0 6
36456: PPUSH
36457: CALL_OW 312
36461: ST_TO_ADDR
// if j then
36462: LD_VAR 0 7
36466: IFFALSE 36496
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36468: LD_ADDR_VAR 0 10
36472: PUSH
36473: LD_VAR 0 10
36477: PUSH
36478: LD_VAR 0 7
36482: PPUSH
36483: LD_INT 3
36485: PPUSH
36486: CALL_OW 259
36490: PUSH
36491: LD_INT 3
36493: MUL
36494: MUL
36495: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36496: LD_VAR 0 6
36500: PPUSH
36501: CALL_OW 264
36505: PUSH
36506: LD_INT 5
36508: PUSH
36509: LD_INT 6
36511: PUSH
36512: LD_INT 46
36514: PUSH
36515: LD_INT 44
36517: PUSH
36518: LD_INT 47
36520: PUSH
36521: LD_INT 45
36523: PUSH
36524: LD_INT 28
36526: PUSH
36527: LD_INT 7
36529: PUSH
36530: LD_INT 27
36532: PUSH
36533: LD_INT 29
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: IN
36548: PUSH
36549: LD_VAR 0 1
36553: PPUSH
36554: LD_INT 52
36556: PPUSH
36557: CALL_OW 321
36561: PUSH
36562: LD_INT 2
36564: EQUAL
36565: AND
36566: IFFALSE 36583
// bpoints := bpoints * 1.2 ;
36568: LD_ADDR_VAR 0 10
36572: PUSH
36573: LD_VAR 0 10
36577: PUSH
36578: LD_REAL  1.20000000000000E+0000
36581: MUL
36582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36583: LD_VAR 0 6
36587: PPUSH
36588: CALL_OW 264
36592: PUSH
36593: LD_INT 6
36595: PUSH
36596: LD_INT 46
36598: PUSH
36599: LD_INT 47
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: LIST
36606: IN
36607: IFFALSE 36624
// bpoints := bpoints * 1.2 ;
36609: LD_ADDR_VAR 0 10
36613: PUSH
36614: LD_VAR 0 10
36618: PUSH
36619: LD_REAL  1.20000000000000E+0000
36622: MUL
36623: ST_TO_ADDR
// end ; unit_building :
36624: GO 36638
36626: LD_INT 3
36628: DOUBLE
36629: EQUAL
36630: IFTRUE 36634
36632: GO 36637
36634: POP
// ; end ;
36635: GO 36638
36637: POP
// for j = 1 to 3 do
36638: LD_ADDR_VAR 0 7
36642: PUSH
36643: DOUBLE
36644: LD_INT 1
36646: DEC
36647: ST_TO_ADDR
36648: LD_INT 3
36650: PUSH
36651: FOR_TO
36652: IFFALSE 36705
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36654: LD_ADDR_VAR 0 5
36658: PUSH
36659: LD_VAR 0 5
36663: PPUSH
36664: LD_VAR 0 7
36668: PPUSH
36669: LD_VAR 0 5
36673: PUSH
36674: LD_VAR 0 7
36678: ARRAY
36679: PUSH
36680: LD_VAR 0 9
36684: PUSH
36685: LD_VAR 0 7
36689: ARRAY
36690: PUSH
36691: LD_VAR 0 10
36695: MUL
36696: PLUS
36697: PPUSH
36698: CALL_OW 1
36702: ST_TO_ADDR
36703: GO 36651
36705: POP
36706: POP
// end ;
36707: GO 35186
36709: POP
36710: POP
// result := Replace ( result , 4 , tmp ) ;
36711: LD_ADDR_VAR 0 5
36715: PUSH
36716: LD_VAR 0 5
36720: PPUSH
36721: LD_INT 4
36723: PPUSH
36724: LD_VAR 0 8
36728: PPUSH
36729: CALL_OW 1
36733: ST_TO_ADDR
// end ;
36734: LD_VAR 0 5
36738: RET
// export function DangerAtRange ( unit , range ) ; begin
36739: LD_INT 0
36741: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36742: LD_ADDR_VAR 0 3
36746: PUSH
36747: LD_VAR 0 1
36751: PPUSH
36752: CALL_OW 255
36756: PPUSH
36757: LD_VAR 0 1
36761: PPUSH
36762: CALL_OW 250
36766: PPUSH
36767: LD_VAR 0 1
36771: PPUSH
36772: CALL_OW 251
36776: PPUSH
36777: LD_VAR 0 2
36781: PPUSH
36782: CALL 35038 0 4
36786: ST_TO_ADDR
// end ;
36787: LD_VAR 0 3
36791: RET
// export function DangerInArea ( side , area ) ; begin
36792: LD_INT 0
36794: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36795: LD_ADDR_VAR 0 3
36799: PUSH
36800: LD_VAR 0 2
36804: PPUSH
36805: LD_INT 81
36807: PUSH
36808: LD_VAR 0 1
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PPUSH
36817: CALL_OW 70
36821: ST_TO_ADDR
// end ;
36822: LD_VAR 0 3
36826: RET
// export function IsExtension ( b ) ; begin
36827: LD_INT 0
36829: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36830: LD_ADDR_VAR 0 2
36834: PUSH
36835: LD_VAR 0 1
36839: PUSH
36840: LD_INT 23
36842: PUSH
36843: LD_INT 20
36845: PUSH
36846: LD_INT 22
36848: PUSH
36849: LD_INT 17
36851: PUSH
36852: LD_INT 24
36854: PUSH
36855: LD_INT 21
36857: PUSH
36858: LD_INT 19
36860: PUSH
36861: LD_INT 16
36863: PUSH
36864: LD_INT 25
36866: PUSH
36867: LD_INT 18
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: IN
36882: ST_TO_ADDR
// end ;
36883: LD_VAR 0 2
36887: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36888: LD_INT 0
36890: PPUSH
36891: PPUSH
36892: PPUSH
// result := [ ] ;
36893: LD_ADDR_VAR 0 4
36897: PUSH
36898: EMPTY
36899: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36900: LD_ADDR_VAR 0 5
36904: PUSH
36905: LD_VAR 0 2
36909: PPUSH
36910: LD_INT 21
36912: PUSH
36913: LD_INT 3
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PPUSH
36920: CALL_OW 70
36924: ST_TO_ADDR
// if not tmp then
36925: LD_VAR 0 5
36929: NOT
36930: IFFALSE 36934
// exit ;
36932: GO 36998
// if checkLink then
36934: LD_VAR 0 3
36938: IFFALSE 36988
// begin for i in tmp do
36940: LD_ADDR_VAR 0 6
36944: PUSH
36945: LD_VAR 0 5
36949: PUSH
36950: FOR_IN
36951: IFFALSE 36986
// if GetBase ( i ) <> base then
36953: LD_VAR 0 6
36957: PPUSH
36958: CALL_OW 274
36962: PUSH
36963: LD_VAR 0 1
36967: NONEQUAL
36968: IFFALSE 36984
// ComLinkToBase ( base , i ) ;
36970: LD_VAR 0 1
36974: PPUSH
36975: LD_VAR 0 6
36979: PPUSH
36980: CALL_OW 169
36984: GO 36950
36986: POP
36987: POP
// end ; result := tmp ;
36988: LD_ADDR_VAR 0 4
36992: PUSH
36993: LD_VAR 0 5
36997: ST_TO_ADDR
// end ;
36998: LD_VAR 0 4
37002: RET
// export function ComComplete ( units , b ) ; var i ; begin
37003: LD_INT 0
37005: PPUSH
37006: PPUSH
// if not units then
37007: LD_VAR 0 1
37011: NOT
37012: IFFALSE 37016
// exit ;
37014: GO 37106
// for i in units do
37016: LD_ADDR_VAR 0 4
37020: PUSH
37021: LD_VAR 0 1
37025: PUSH
37026: FOR_IN
37027: IFFALSE 37104
// if BuildingStatus ( b ) = bs_build then
37029: LD_VAR 0 2
37033: PPUSH
37034: CALL_OW 461
37038: PUSH
37039: LD_INT 1
37041: EQUAL
37042: IFFALSE 37102
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37044: LD_VAR 0 4
37048: PPUSH
37049: LD_STRING h
37051: PUSH
37052: LD_VAR 0 2
37056: PPUSH
37057: CALL_OW 250
37061: PUSH
37062: LD_VAR 0 2
37066: PPUSH
37067: CALL_OW 251
37071: PUSH
37072: LD_VAR 0 2
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: PUSH
37095: EMPTY
37096: LIST
37097: PPUSH
37098: CALL_OW 446
37102: GO 37026
37104: POP
37105: POP
// end ;
37106: LD_VAR 0 3
37110: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37111: LD_INT 0
37113: PPUSH
37114: PPUSH
37115: PPUSH
37116: PPUSH
37117: PPUSH
37118: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37119: LD_VAR 0 1
37123: NOT
37124: PUSH
37125: LD_VAR 0 1
37129: PPUSH
37130: CALL_OW 263
37134: PUSH
37135: LD_INT 2
37137: NONEQUAL
37138: OR
37139: IFFALSE 37143
// exit ;
37141: GO 37459
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37143: LD_ADDR_VAR 0 6
37147: PUSH
37148: LD_INT 22
37150: PUSH
37151: LD_VAR 0 1
37155: PPUSH
37156: CALL_OW 255
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 2
37167: PUSH
37168: LD_INT 30
37170: PUSH
37171: LD_INT 36
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 34
37180: PUSH
37181: LD_INT 31
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PPUSH
37197: CALL_OW 69
37201: ST_TO_ADDR
// if not tmp then
37202: LD_VAR 0 6
37206: NOT
37207: IFFALSE 37211
// exit ;
37209: GO 37459
// result := [ ] ;
37211: LD_ADDR_VAR 0 2
37215: PUSH
37216: EMPTY
37217: ST_TO_ADDR
// for i in tmp do
37218: LD_ADDR_VAR 0 3
37222: PUSH
37223: LD_VAR 0 6
37227: PUSH
37228: FOR_IN
37229: IFFALSE 37300
// begin t := UnitsInside ( i ) ;
37231: LD_ADDR_VAR 0 4
37235: PUSH
37236: LD_VAR 0 3
37240: PPUSH
37241: CALL_OW 313
37245: ST_TO_ADDR
// if t then
37246: LD_VAR 0 4
37250: IFFALSE 37298
// for j in t do
37252: LD_ADDR_VAR 0 7
37256: PUSH
37257: LD_VAR 0 4
37261: PUSH
37262: FOR_IN
37263: IFFALSE 37296
// result := Replace ( result , result + 1 , j ) ;
37265: LD_ADDR_VAR 0 2
37269: PUSH
37270: LD_VAR 0 2
37274: PPUSH
37275: LD_VAR 0 2
37279: PUSH
37280: LD_INT 1
37282: PLUS
37283: PPUSH
37284: LD_VAR 0 7
37288: PPUSH
37289: CALL_OW 1
37293: ST_TO_ADDR
37294: GO 37262
37296: POP
37297: POP
// end ;
37298: GO 37228
37300: POP
37301: POP
// if not result then
37302: LD_VAR 0 2
37306: NOT
37307: IFFALSE 37311
// exit ;
37309: GO 37459
// mech := result [ 1 ] ;
37311: LD_ADDR_VAR 0 5
37315: PUSH
37316: LD_VAR 0 2
37320: PUSH
37321: LD_INT 1
37323: ARRAY
37324: ST_TO_ADDR
// if result > 1 then
37325: LD_VAR 0 2
37329: PUSH
37330: LD_INT 1
37332: GREATER
37333: IFFALSE 37445
// begin for i = 2 to result do
37335: LD_ADDR_VAR 0 3
37339: PUSH
37340: DOUBLE
37341: LD_INT 2
37343: DEC
37344: ST_TO_ADDR
37345: LD_VAR 0 2
37349: PUSH
37350: FOR_TO
37351: IFFALSE 37443
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37353: LD_ADDR_VAR 0 4
37357: PUSH
37358: LD_VAR 0 2
37362: PUSH
37363: LD_VAR 0 3
37367: ARRAY
37368: PPUSH
37369: LD_INT 3
37371: PPUSH
37372: CALL_OW 259
37376: PUSH
37377: LD_VAR 0 2
37381: PUSH
37382: LD_VAR 0 3
37386: ARRAY
37387: PPUSH
37388: CALL_OW 432
37392: MINUS
37393: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37394: LD_VAR 0 4
37398: PUSH
37399: LD_VAR 0 5
37403: PPUSH
37404: LD_INT 3
37406: PPUSH
37407: CALL_OW 259
37411: PUSH
37412: LD_VAR 0 5
37416: PPUSH
37417: CALL_OW 432
37421: MINUS
37422: GREATEREQUAL
37423: IFFALSE 37441
// mech := result [ i ] ;
37425: LD_ADDR_VAR 0 5
37429: PUSH
37430: LD_VAR 0 2
37434: PUSH
37435: LD_VAR 0 3
37439: ARRAY
37440: ST_TO_ADDR
// end ;
37441: GO 37350
37443: POP
37444: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37445: LD_VAR 0 1
37449: PPUSH
37450: LD_VAR 0 5
37454: PPUSH
37455: CALL_OW 135
// end ;
37459: LD_VAR 0 2
37463: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37464: LD_INT 0
37466: PPUSH
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
37478: PPUSH
// result := [ ] ;
37479: LD_ADDR_VAR 0 7
37483: PUSH
37484: EMPTY
37485: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37486: LD_VAR 0 1
37490: PPUSH
37491: CALL_OW 266
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: IN
37506: NOT
37507: IFFALSE 37511
// exit ;
37509: GO 39145
// if name then
37511: LD_VAR 0 3
37515: IFFALSE 37531
// SetBName ( base_dep , name ) ;
37517: LD_VAR 0 1
37521: PPUSH
37522: LD_VAR 0 3
37526: PPUSH
37527: CALL_OW 500
// base := GetBase ( base_dep ) ;
37531: LD_ADDR_VAR 0 15
37535: PUSH
37536: LD_VAR 0 1
37540: PPUSH
37541: CALL_OW 274
37545: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37546: LD_ADDR_VAR 0 16
37550: PUSH
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 255
37560: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37561: LD_ADDR_VAR 0 17
37565: PUSH
37566: LD_VAR 0 1
37570: PPUSH
37571: CALL_OW 248
37575: ST_TO_ADDR
// if sources then
37576: LD_VAR 0 5
37580: IFFALSE 37627
// for i = 1 to 3 do
37582: LD_ADDR_VAR 0 8
37586: PUSH
37587: DOUBLE
37588: LD_INT 1
37590: DEC
37591: ST_TO_ADDR
37592: LD_INT 3
37594: PUSH
37595: FOR_TO
37596: IFFALSE 37625
// AddResourceType ( base , i , sources [ i ] ) ;
37598: LD_VAR 0 15
37602: PPUSH
37603: LD_VAR 0 8
37607: PPUSH
37608: LD_VAR 0 5
37612: PUSH
37613: LD_VAR 0 8
37617: ARRAY
37618: PPUSH
37619: CALL_OW 276
37623: GO 37595
37625: POP
37626: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37627: LD_ADDR_VAR 0 18
37631: PUSH
37632: LD_VAR 0 15
37636: PPUSH
37637: LD_VAR 0 2
37641: PPUSH
37642: LD_INT 1
37644: PPUSH
37645: CALL 36888 0 3
37649: ST_TO_ADDR
// InitHc ;
37650: CALL_OW 19
// InitUc ;
37654: CALL_OW 18
// uc_side := side ;
37658: LD_ADDR_OWVAR 20
37662: PUSH
37663: LD_VAR 0 16
37667: ST_TO_ADDR
// uc_nation := nation ;
37668: LD_ADDR_OWVAR 21
37672: PUSH
37673: LD_VAR 0 17
37677: ST_TO_ADDR
// if buildings then
37678: LD_VAR 0 18
37682: IFFALSE 39004
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37684: LD_ADDR_VAR 0 19
37688: PUSH
37689: LD_VAR 0 18
37693: PPUSH
37694: LD_INT 2
37696: PUSH
37697: LD_INT 30
37699: PUSH
37700: LD_INT 29
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 30
37709: PUSH
37710: LD_INT 30
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: PPUSH
37722: CALL_OW 72
37726: ST_TO_ADDR
// if tmp then
37727: LD_VAR 0 19
37731: IFFALSE 37779
// for i in tmp do
37733: LD_ADDR_VAR 0 8
37737: PUSH
37738: LD_VAR 0 19
37742: PUSH
37743: FOR_IN
37744: IFFALSE 37777
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37746: LD_VAR 0 8
37750: PPUSH
37751: CALL_OW 250
37755: PPUSH
37756: LD_VAR 0 8
37760: PPUSH
37761: CALL_OW 251
37765: PPUSH
37766: LD_VAR 0 16
37770: PPUSH
37771: CALL_OW 441
37775: GO 37743
37777: POP
37778: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37779: LD_VAR 0 18
37783: PPUSH
37784: LD_INT 2
37786: PUSH
37787: LD_INT 30
37789: PUSH
37790: LD_INT 32
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 30
37799: PUSH
37800: LD_INT 33
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: PPUSH
37812: CALL_OW 72
37816: IFFALSE 37904
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37818: LD_ADDR_VAR 0 8
37822: PUSH
37823: LD_VAR 0 18
37827: PPUSH
37828: LD_INT 2
37830: PUSH
37831: LD_INT 30
37833: PUSH
37834: LD_INT 32
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 30
37843: PUSH
37844: LD_INT 33
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: PPUSH
37856: CALL_OW 72
37860: PUSH
37861: FOR_IN
37862: IFFALSE 37902
// begin if not GetBWeapon ( i ) then
37864: LD_VAR 0 8
37868: PPUSH
37869: CALL_OW 269
37873: NOT
37874: IFFALSE 37900
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37876: LD_VAR 0 8
37880: PPUSH
37881: LD_VAR 0 8
37885: PPUSH
37886: LD_VAR 0 2
37890: PPUSH
37891: CALL 39150 0 2
37895: PPUSH
37896: CALL_OW 431
// end ;
37900: GO 37861
37902: POP
37903: POP
// end ; for i = 1 to personel do
37904: LD_ADDR_VAR 0 8
37908: PUSH
37909: DOUBLE
37910: LD_INT 1
37912: DEC
37913: ST_TO_ADDR
37914: LD_VAR 0 6
37918: PUSH
37919: FOR_TO
37920: IFFALSE 38984
// begin if i > 4 then
37922: LD_VAR 0 8
37926: PUSH
37927: LD_INT 4
37929: GREATER
37930: IFFALSE 37934
// break ;
37932: GO 38984
// case i of 1 :
37934: LD_VAR 0 8
37938: PUSH
37939: LD_INT 1
37941: DOUBLE
37942: EQUAL
37943: IFTRUE 37947
37945: GO 38027
37947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37948: LD_ADDR_VAR 0 12
37952: PUSH
37953: LD_VAR 0 18
37957: PPUSH
37958: LD_INT 22
37960: PUSH
37961: LD_VAR 0 16
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 58
37972: PUSH
37973: EMPTY
37974: LIST
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: LD_INT 30
37981: PUSH
37982: LD_INT 32
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 30
37991: PUSH
37992: LD_INT 4
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 30
38001: PUSH
38002: LD_INT 5
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: PPUSH
38020: CALL_OW 72
38024: ST_TO_ADDR
38025: GO 38249
38027: LD_INT 2
38029: DOUBLE
38030: EQUAL
38031: IFTRUE 38035
38033: GO 38097
38035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38036: LD_ADDR_VAR 0 12
38040: PUSH
38041: LD_VAR 0 18
38045: PPUSH
38046: LD_INT 22
38048: PUSH
38049: LD_VAR 0 16
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: LD_INT 30
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 30
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: LIST
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PPUSH
38090: CALL_OW 72
38094: ST_TO_ADDR
38095: GO 38249
38097: LD_INT 3
38099: DOUBLE
38100: EQUAL
38101: IFTRUE 38105
38103: GO 38167
38105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38106: LD_ADDR_VAR 0 12
38110: PUSH
38111: LD_VAR 0 18
38115: PPUSH
38116: LD_INT 22
38118: PUSH
38119: LD_VAR 0 16
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: LD_INT 30
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 30
38143: PUSH
38144: LD_INT 3
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: LIST
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PPUSH
38160: CALL_OW 72
38164: ST_TO_ADDR
38165: GO 38249
38167: LD_INT 4
38169: DOUBLE
38170: EQUAL
38171: IFTRUE 38175
38173: GO 38248
38175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38176: LD_ADDR_VAR 0 12
38180: PUSH
38181: LD_VAR 0 18
38185: PPUSH
38186: LD_INT 22
38188: PUSH
38189: LD_VAR 0 16
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 2
38200: PUSH
38201: LD_INT 30
38203: PUSH
38204: LD_INT 6
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 30
38213: PUSH
38214: LD_INT 7
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 30
38223: PUSH
38224: LD_INT 8
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PPUSH
38241: CALL_OW 72
38245: ST_TO_ADDR
38246: GO 38249
38248: POP
// if i = 1 then
38249: LD_VAR 0 8
38253: PUSH
38254: LD_INT 1
38256: EQUAL
38257: IFFALSE 38368
// begin tmp := [ ] ;
38259: LD_ADDR_VAR 0 19
38263: PUSH
38264: EMPTY
38265: ST_TO_ADDR
// for j in f do
38266: LD_ADDR_VAR 0 9
38270: PUSH
38271: LD_VAR 0 12
38275: PUSH
38276: FOR_IN
38277: IFFALSE 38350
// if GetBType ( j ) = b_bunker then
38279: LD_VAR 0 9
38283: PPUSH
38284: CALL_OW 266
38288: PUSH
38289: LD_INT 32
38291: EQUAL
38292: IFFALSE 38319
// tmp := Insert ( tmp , 1 , j ) else
38294: LD_ADDR_VAR 0 19
38298: PUSH
38299: LD_VAR 0 19
38303: PPUSH
38304: LD_INT 1
38306: PPUSH
38307: LD_VAR 0 9
38311: PPUSH
38312: CALL_OW 2
38316: ST_TO_ADDR
38317: GO 38348
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38319: LD_ADDR_VAR 0 19
38323: PUSH
38324: LD_VAR 0 19
38328: PPUSH
38329: LD_VAR 0 19
38333: PUSH
38334: LD_INT 1
38336: PLUS
38337: PPUSH
38338: LD_VAR 0 9
38342: PPUSH
38343: CALL_OW 2
38347: ST_TO_ADDR
38348: GO 38276
38350: POP
38351: POP
// if tmp then
38352: LD_VAR 0 19
38356: IFFALSE 38368
// f := tmp ;
38358: LD_ADDR_VAR 0 12
38362: PUSH
38363: LD_VAR 0 19
38367: ST_TO_ADDR
// end ; x := personel [ i ] ;
38368: LD_ADDR_VAR 0 13
38372: PUSH
38373: LD_VAR 0 6
38377: PUSH
38378: LD_VAR 0 8
38382: ARRAY
38383: ST_TO_ADDR
// if x = - 1 then
38384: LD_VAR 0 13
38388: PUSH
38389: LD_INT 1
38391: NEG
38392: EQUAL
38393: IFFALSE 38602
// begin for j in f do
38395: LD_ADDR_VAR 0 9
38399: PUSH
38400: LD_VAR 0 12
38404: PUSH
38405: FOR_IN
38406: IFFALSE 38598
// repeat InitHc ;
38408: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38412: LD_VAR 0 9
38416: PPUSH
38417: CALL_OW 266
38421: PUSH
38422: LD_INT 5
38424: EQUAL
38425: IFFALSE 38495
// begin if UnitsInside ( j ) < 3 then
38427: LD_VAR 0 9
38431: PPUSH
38432: CALL_OW 313
38436: PUSH
38437: LD_INT 3
38439: LESS
38440: IFFALSE 38476
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38442: LD_INT 0
38444: PPUSH
38445: LD_INT 5
38447: PUSH
38448: LD_INT 8
38450: PUSH
38451: LD_INT 9
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: LIST
38458: PUSH
38459: LD_VAR 0 17
38463: ARRAY
38464: PPUSH
38465: LD_VAR 0 4
38469: PPUSH
38470: CALL_OW 380
38474: GO 38493
// PrepareHuman ( false , i , skill ) ;
38476: LD_INT 0
38478: PPUSH
38479: LD_VAR 0 8
38483: PPUSH
38484: LD_VAR 0 4
38488: PPUSH
38489: CALL_OW 380
// end else
38493: GO 38512
// PrepareHuman ( false , i , skill ) ;
38495: LD_INT 0
38497: PPUSH
38498: LD_VAR 0 8
38502: PPUSH
38503: LD_VAR 0 4
38507: PPUSH
38508: CALL_OW 380
// un := CreateHuman ;
38512: LD_ADDR_VAR 0 14
38516: PUSH
38517: CALL_OW 44
38521: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38522: LD_ADDR_VAR 0 7
38526: PUSH
38527: LD_VAR 0 7
38531: PPUSH
38532: LD_INT 1
38534: PPUSH
38535: LD_VAR 0 14
38539: PPUSH
38540: CALL_OW 2
38544: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38545: LD_VAR 0 14
38549: PPUSH
38550: LD_VAR 0 9
38554: PPUSH
38555: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38559: LD_VAR 0 9
38563: PPUSH
38564: CALL_OW 313
38568: PUSH
38569: LD_INT 6
38571: EQUAL
38572: PUSH
38573: LD_VAR 0 9
38577: PPUSH
38578: CALL_OW 266
38582: PUSH
38583: LD_INT 32
38585: PUSH
38586: LD_INT 31
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: IN
38593: OR
38594: IFFALSE 38408
38596: GO 38405
38598: POP
38599: POP
// end else
38600: GO 38982
// for j = 1 to x do
38602: LD_ADDR_VAR 0 9
38606: PUSH
38607: DOUBLE
38608: LD_INT 1
38610: DEC
38611: ST_TO_ADDR
38612: LD_VAR 0 13
38616: PUSH
38617: FOR_TO
38618: IFFALSE 38980
// begin InitHc ;
38620: CALL_OW 19
// if not f then
38624: LD_VAR 0 12
38628: NOT
38629: IFFALSE 38718
// begin PrepareHuman ( false , i , skill ) ;
38631: LD_INT 0
38633: PPUSH
38634: LD_VAR 0 8
38638: PPUSH
38639: LD_VAR 0 4
38643: PPUSH
38644: CALL_OW 380
// un := CreateHuman ;
38648: LD_ADDR_VAR 0 14
38652: PUSH
38653: CALL_OW 44
38657: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38658: LD_ADDR_VAR 0 7
38662: PUSH
38663: LD_VAR 0 7
38667: PPUSH
38668: LD_INT 1
38670: PPUSH
38671: LD_VAR 0 14
38675: PPUSH
38676: CALL_OW 2
38680: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38681: LD_VAR 0 14
38685: PPUSH
38686: LD_VAR 0 1
38690: PPUSH
38691: CALL_OW 250
38695: PPUSH
38696: LD_VAR 0 1
38700: PPUSH
38701: CALL_OW 251
38705: PPUSH
38706: LD_INT 10
38708: PPUSH
38709: LD_INT 0
38711: PPUSH
38712: CALL_OW 50
// continue ;
38716: GO 38617
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38718: LD_VAR 0 12
38722: PUSH
38723: LD_INT 1
38725: ARRAY
38726: PPUSH
38727: CALL_OW 313
38731: PUSH
38732: LD_VAR 0 12
38736: PUSH
38737: LD_INT 1
38739: ARRAY
38740: PPUSH
38741: CALL_OW 266
38745: PUSH
38746: LD_INT 32
38748: PUSH
38749: LD_INT 31
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: IN
38756: AND
38757: PUSH
38758: LD_VAR 0 12
38762: PUSH
38763: LD_INT 1
38765: ARRAY
38766: PPUSH
38767: CALL_OW 313
38771: PUSH
38772: LD_INT 6
38774: EQUAL
38775: OR
38776: IFFALSE 38796
// f := Delete ( f , 1 ) ;
38778: LD_ADDR_VAR 0 12
38782: PUSH
38783: LD_VAR 0 12
38787: PPUSH
38788: LD_INT 1
38790: PPUSH
38791: CALL_OW 3
38795: ST_TO_ADDR
// if not f then
38796: LD_VAR 0 12
38800: NOT
38801: IFFALSE 38819
// begin x := x + 2 ;
38803: LD_ADDR_VAR 0 13
38807: PUSH
38808: LD_VAR 0 13
38812: PUSH
38813: LD_INT 2
38815: PLUS
38816: ST_TO_ADDR
// continue ;
38817: GO 38617
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38819: LD_VAR 0 12
38823: PUSH
38824: LD_INT 1
38826: ARRAY
38827: PPUSH
38828: CALL_OW 266
38832: PUSH
38833: LD_INT 5
38835: EQUAL
38836: IFFALSE 38910
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38838: LD_VAR 0 12
38842: PUSH
38843: LD_INT 1
38845: ARRAY
38846: PPUSH
38847: CALL_OW 313
38851: PUSH
38852: LD_INT 3
38854: LESS
38855: IFFALSE 38891
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38857: LD_INT 0
38859: PPUSH
38860: LD_INT 5
38862: PUSH
38863: LD_INT 8
38865: PUSH
38866: LD_INT 9
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: LIST
38873: PUSH
38874: LD_VAR 0 17
38878: ARRAY
38879: PPUSH
38880: LD_VAR 0 4
38884: PPUSH
38885: CALL_OW 380
38889: GO 38908
// PrepareHuman ( false , i , skill ) ;
38891: LD_INT 0
38893: PPUSH
38894: LD_VAR 0 8
38898: PPUSH
38899: LD_VAR 0 4
38903: PPUSH
38904: CALL_OW 380
// end else
38908: GO 38927
// PrepareHuman ( false , i , skill ) ;
38910: LD_INT 0
38912: PPUSH
38913: LD_VAR 0 8
38917: PPUSH
38918: LD_VAR 0 4
38922: PPUSH
38923: CALL_OW 380
// un := CreateHuman ;
38927: LD_ADDR_VAR 0 14
38931: PUSH
38932: CALL_OW 44
38936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38937: LD_ADDR_VAR 0 7
38941: PUSH
38942: LD_VAR 0 7
38946: PPUSH
38947: LD_INT 1
38949: PPUSH
38950: LD_VAR 0 14
38954: PPUSH
38955: CALL_OW 2
38959: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38960: LD_VAR 0 14
38964: PPUSH
38965: LD_VAR 0 12
38969: PUSH
38970: LD_INT 1
38972: ARRAY
38973: PPUSH
38974: CALL_OW 52
// end ;
38978: GO 38617
38980: POP
38981: POP
// end ;
38982: GO 37919
38984: POP
38985: POP
// result := result ^ buildings ;
38986: LD_ADDR_VAR 0 7
38990: PUSH
38991: LD_VAR 0 7
38995: PUSH
38996: LD_VAR 0 18
39000: ADD
39001: ST_TO_ADDR
// end else
39002: GO 39145
// begin for i = 1 to personel do
39004: LD_ADDR_VAR 0 8
39008: PUSH
39009: DOUBLE
39010: LD_INT 1
39012: DEC
39013: ST_TO_ADDR
39014: LD_VAR 0 6
39018: PUSH
39019: FOR_TO
39020: IFFALSE 39143
// begin if i > 4 then
39022: LD_VAR 0 8
39026: PUSH
39027: LD_INT 4
39029: GREATER
39030: IFFALSE 39034
// break ;
39032: GO 39143
// x := personel [ i ] ;
39034: LD_ADDR_VAR 0 13
39038: PUSH
39039: LD_VAR 0 6
39043: PUSH
39044: LD_VAR 0 8
39048: ARRAY
39049: ST_TO_ADDR
// if x = - 1 then
39050: LD_VAR 0 13
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: EQUAL
39059: IFFALSE 39063
// continue ;
39061: GO 39019
// PrepareHuman ( false , i , skill ) ;
39063: LD_INT 0
39065: PPUSH
39066: LD_VAR 0 8
39070: PPUSH
39071: LD_VAR 0 4
39075: PPUSH
39076: CALL_OW 380
// un := CreateHuman ;
39080: LD_ADDR_VAR 0 14
39084: PUSH
39085: CALL_OW 44
39089: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39090: LD_VAR 0 14
39094: PPUSH
39095: LD_VAR 0 1
39099: PPUSH
39100: CALL_OW 250
39104: PPUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: CALL_OW 251
39114: PPUSH
39115: LD_INT 10
39117: PPUSH
39118: LD_INT 0
39120: PPUSH
39121: CALL_OW 50
// result := result ^ un ;
39125: LD_ADDR_VAR 0 7
39129: PUSH
39130: LD_VAR 0 7
39134: PUSH
39135: LD_VAR 0 14
39139: ADD
39140: ST_TO_ADDR
// end ;
39141: GO 39019
39143: POP
39144: POP
// end ; end ;
39145: LD_VAR 0 7
39149: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39150: LD_INT 0
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
// result := false ;
39168: LD_ADDR_VAR 0 3
39172: PUSH
39173: LD_INT 0
39175: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39176: LD_VAR 0 1
39180: NOT
39181: PUSH
39182: LD_VAR 0 1
39186: PPUSH
39187: CALL_OW 266
39191: PUSH
39192: LD_INT 32
39194: PUSH
39195: LD_INT 33
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: IN
39202: NOT
39203: OR
39204: IFFALSE 39208
// exit ;
39206: GO 40317
// nat := GetNation ( tower ) ;
39208: LD_ADDR_VAR 0 12
39212: PUSH
39213: LD_VAR 0 1
39217: PPUSH
39218: CALL_OW 248
39222: ST_TO_ADDR
// side := GetSide ( tower ) ;
39223: LD_ADDR_VAR 0 16
39227: PUSH
39228: LD_VAR 0 1
39232: PPUSH
39233: CALL_OW 255
39237: ST_TO_ADDR
// x := GetX ( tower ) ;
39238: LD_ADDR_VAR 0 10
39242: PUSH
39243: LD_VAR 0 1
39247: PPUSH
39248: CALL_OW 250
39252: ST_TO_ADDR
// y := GetY ( tower ) ;
39253: LD_ADDR_VAR 0 11
39257: PUSH
39258: LD_VAR 0 1
39262: PPUSH
39263: CALL_OW 251
39267: ST_TO_ADDR
// if not x or not y then
39268: LD_VAR 0 10
39272: NOT
39273: PUSH
39274: LD_VAR 0 11
39278: NOT
39279: OR
39280: IFFALSE 39284
// exit ;
39282: GO 40317
// weapon := 0 ;
39284: LD_ADDR_VAR 0 18
39288: PUSH
39289: LD_INT 0
39291: ST_TO_ADDR
// fac_list := [ ] ;
39292: LD_ADDR_VAR 0 17
39296: PUSH
39297: EMPTY
39298: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39299: LD_ADDR_VAR 0 6
39303: PUSH
39304: LD_VAR 0 1
39308: PPUSH
39309: CALL_OW 274
39313: PPUSH
39314: LD_VAR 0 2
39318: PPUSH
39319: LD_INT 0
39321: PPUSH
39322: CALL 36888 0 3
39326: PPUSH
39327: LD_INT 30
39329: PUSH
39330: LD_INT 3
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PPUSH
39337: CALL_OW 72
39341: ST_TO_ADDR
// if not factories then
39342: LD_VAR 0 6
39346: NOT
39347: IFFALSE 39351
// exit ;
39349: GO 40317
// for i in factories do
39351: LD_ADDR_VAR 0 8
39355: PUSH
39356: LD_VAR 0 6
39360: PUSH
39361: FOR_IN
39362: IFFALSE 39387
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39364: LD_ADDR_VAR 0 17
39368: PUSH
39369: LD_VAR 0 17
39373: PUSH
39374: LD_VAR 0 8
39378: PPUSH
39379: CALL_OW 478
39383: UNION
39384: ST_TO_ADDR
39385: GO 39361
39387: POP
39388: POP
// if not fac_list then
39389: LD_VAR 0 17
39393: NOT
39394: IFFALSE 39398
// exit ;
39396: GO 40317
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39398: LD_ADDR_VAR 0 5
39402: PUSH
39403: LD_INT 4
39405: PUSH
39406: LD_INT 5
39408: PUSH
39409: LD_INT 9
39411: PUSH
39412: LD_INT 10
39414: PUSH
39415: LD_INT 6
39417: PUSH
39418: LD_INT 7
39420: PUSH
39421: LD_INT 11
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 27
39435: PUSH
39436: LD_INT 28
39438: PUSH
39439: LD_INT 26
39441: PUSH
39442: LD_INT 30
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 43
39453: PUSH
39454: LD_INT 44
39456: PUSH
39457: LD_INT 46
39459: PUSH
39460: LD_INT 45
39462: PUSH
39463: LD_INT 47
39465: PUSH
39466: LD_INT 49
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: PUSH
39482: LD_VAR 0 12
39486: ARRAY
39487: ST_TO_ADDR
// list := list isect fac_list ;
39488: LD_ADDR_VAR 0 5
39492: PUSH
39493: LD_VAR 0 5
39497: PUSH
39498: LD_VAR 0 17
39502: ISECT
39503: ST_TO_ADDR
// if not list then
39504: LD_VAR 0 5
39508: NOT
39509: IFFALSE 39513
// exit ;
39511: GO 40317
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39513: LD_VAR 0 12
39517: PUSH
39518: LD_INT 3
39520: EQUAL
39521: PUSH
39522: LD_INT 49
39524: PUSH
39525: LD_VAR 0 5
39529: IN
39530: AND
39531: PUSH
39532: LD_INT 31
39534: PPUSH
39535: LD_VAR 0 16
39539: PPUSH
39540: CALL_OW 321
39544: PUSH
39545: LD_INT 2
39547: EQUAL
39548: AND
39549: IFFALSE 39609
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39551: LD_INT 22
39553: PUSH
39554: LD_VAR 0 16
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 35
39565: PUSH
39566: LD_INT 49
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 91
39575: PUSH
39576: LD_VAR 0 1
39580: PUSH
39581: LD_INT 10
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: LIST
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: LIST
39593: PPUSH
39594: CALL_OW 69
39598: NOT
39599: IFFALSE 39609
// weapon := ru_time_lapser ;
39601: LD_ADDR_VAR 0 18
39605: PUSH
39606: LD_INT 49
39608: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39609: LD_VAR 0 12
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: IN
39624: PUSH
39625: LD_INT 11
39627: PUSH
39628: LD_VAR 0 5
39632: IN
39633: PUSH
39634: LD_INT 30
39636: PUSH
39637: LD_VAR 0 5
39641: IN
39642: OR
39643: AND
39644: PUSH
39645: LD_INT 6
39647: PPUSH
39648: LD_VAR 0 16
39652: PPUSH
39653: CALL_OW 321
39657: PUSH
39658: LD_INT 2
39660: EQUAL
39661: AND
39662: IFFALSE 39827
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39664: LD_INT 22
39666: PUSH
39667: LD_VAR 0 16
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: LD_INT 35
39681: PUSH
39682: LD_INT 11
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 35
39691: PUSH
39692: LD_INT 30
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 91
39706: PUSH
39707: LD_VAR 0 1
39711: PUSH
39712: LD_INT 18
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: LIST
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: PPUSH
39725: CALL_OW 69
39729: NOT
39730: PUSH
39731: LD_INT 22
39733: PUSH
39734: LD_VAR 0 16
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: LD_INT 30
39748: PUSH
39749: LD_INT 32
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 30
39758: PUSH
39759: LD_INT 33
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 91
39773: PUSH
39774: LD_VAR 0 1
39778: PUSH
39779: LD_INT 12
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: PPUSH
39795: CALL_OW 69
39799: PUSH
39800: LD_INT 2
39802: GREATER
39803: AND
39804: IFFALSE 39827
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39806: LD_ADDR_VAR 0 18
39810: PUSH
39811: LD_INT 11
39813: PUSH
39814: LD_INT 30
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_VAR 0 12
39825: ARRAY
39826: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39827: LD_VAR 0 18
39831: NOT
39832: PUSH
39833: LD_INT 40
39835: PPUSH
39836: LD_VAR 0 16
39840: PPUSH
39841: CALL_OW 321
39845: PUSH
39846: LD_INT 2
39848: EQUAL
39849: AND
39850: PUSH
39851: LD_INT 7
39853: PUSH
39854: LD_VAR 0 5
39858: IN
39859: PUSH
39860: LD_INT 28
39862: PUSH
39863: LD_VAR 0 5
39867: IN
39868: OR
39869: PUSH
39870: LD_INT 45
39872: PUSH
39873: LD_VAR 0 5
39877: IN
39878: OR
39879: AND
39880: IFFALSE 40134
// begin hex := GetHexInfo ( x , y ) ;
39882: LD_ADDR_VAR 0 4
39886: PUSH
39887: LD_VAR 0 10
39891: PPUSH
39892: LD_VAR 0 11
39896: PPUSH
39897: CALL_OW 546
39901: ST_TO_ADDR
// if hex [ 1 ] then
39902: LD_VAR 0 4
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: IFFALSE 39914
// exit ;
39912: GO 40317
// height := hex [ 2 ] ;
39914: LD_ADDR_VAR 0 15
39918: PUSH
39919: LD_VAR 0 4
39923: PUSH
39924: LD_INT 2
39926: ARRAY
39927: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39928: LD_ADDR_VAR 0 14
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: LD_INT 5
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: ST_TO_ADDR
// for i in tmp do
39951: LD_ADDR_VAR 0 8
39955: PUSH
39956: LD_VAR 0 14
39960: PUSH
39961: FOR_IN
39962: IFFALSE 40132
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39964: LD_ADDR_VAR 0 9
39968: PUSH
39969: LD_VAR 0 10
39973: PPUSH
39974: LD_VAR 0 8
39978: PPUSH
39979: LD_INT 5
39981: PPUSH
39982: CALL_OW 272
39986: PUSH
39987: LD_VAR 0 11
39991: PPUSH
39992: LD_VAR 0 8
39996: PPUSH
39997: LD_INT 5
39999: PPUSH
40000: CALL_OW 273
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40009: LD_VAR 0 9
40013: PUSH
40014: LD_INT 1
40016: ARRAY
40017: PPUSH
40018: LD_VAR 0 9
40022: PUSH
40023: LD_INT 2
40025: ARRAY
40026: PPUSH
40027: CALL_OW 488
40031: IFFALSE 40130
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40033: LD_ADDR_VAR 0 4
40037: PUSH
40038: LD_VAR 0 9
40042: PUSH
40043: LD_INT 1
40045: ARRAY
40046: PPUSH
40047: LD_VAR 0 9
40051: PUSH
40052: LD_INT 2
40054: ARRAY
40055: PPUSH
40056: CALL_OW 546
40060: ST_TO_ADDR
// if hex [ 1 ] then
40061: LD_VAR 0 4
40065: PUSH
40066: LD_INT 1
40068: ARRAY
40069: IFFALSE 40073
// continue ;
40071: GO 39961
// h := hex [ 2 ] ;
40073: LD_ADDR_VAR 0 13
40077: PUSH
40078: LD_VAR 0 4
40082: PUSH
40083: LD_INT 2
40085: ARRAY
40086: ST_TO_ADDR
// if h + 7 < height then
40087: LD_VAR 0 13
40091: PUSH
40092: LD_INT 7
40094: PLUS
40095: PUSH
40096: LD_VAR 0 15
40100: LESS
40101: IFFALSE 40130
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40103: LD_ADDR_VAR 0 18
40107: PUSH
40108: LD_INT 7
40110: PUSH
40111: LD_INT 28
40113: PUSH
40114: LD_INT 45
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: LD_VAR 0 12
40126: ARRAY
40127: ST_TO_ADDR
// break ;
40128: GO 40132
// end ; end ; end ;
40130: GO 39961
40132: POP
40133: POP
// end ; if not weapon then
40134: LD_VAR 0 18
40138: NOT
40139: IFFALSE 40199
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40141: LD_ADDR_VAR 0 5
40145: PUSH
40146: LD_VAR 0 5
40150: PUSH
40151: LD_INT 11
40153: PUSH
40154: LD_INT 30
40156: PUSH
40157: LD_INT 49
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: DIFF
40165: ST_TO_ADDR
// if not list then
40166: LD_VAR 0 5
40170: NOT
40171: IFFALSE 40175
// exit ;
40173: GO 40317
// weapon := list [ rand ( 1 , list ) ] ;
40175: LD_ADDR_VAR 0 18
40179: PUSH
40180: LD_VAR 0 5
40184: PUSH
40185: LD_INT 1
40187: PPUSH
40188: LD_VAR 0 5
40192: PPUSH
40193: CALL_OW 12
40197: ARRAY
40198: ST_TO_ADDR
// end ; if weapon then
40199: LD_VAR 0 18
40203: IFFALSE 40317
// begin tmp := CostOfWeapon ( weapon ) ;
40205: LD_ADDR_VAR 0 14
40209: PUSH
40210: LD_VAR 0 18
40214: PPUSH
40215: CALL_OW 451
40219: ST_TO_ADDR
// j := GetBase ( tower ) ;
40220: LD_ADDR_VAR 0 9
40224: PUSH
40225: LD_VAR 0 1
40229: PPUSH
40230: CALL_OW 274
40234: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40235: LD_VAR 0 9
40239: PPUSH
40240: LD_INT 1
40242: PPUSH
40243: CALL_OW 275
40247: PUSH
40248: LD_VAR 0 14
40252: PUSH
40253: LD_INT 1
40255: ARRAY
40256: GREATEREQUAL
40257: PUSH
40258: LD_VAR 0 9
40262: PPUSH
40263: LD_INT 2
40265: PPUSH
40266: CALL_OW 275
40270: PUSH
40271: LD_VAR 0 14
40275: PUSH
40276: LD_INT 2
40278: ARRAY
40279: GREATEREQUAL
40280: AND
40281: PUSH
40282: LD_VAR 0 9
40286: PPUSH
40287: LD_INT 3
40289: PPUSH
40290: CALL_OW 275
40294: PUSH
40295: LD_VAR 0 14
40299: PUSH
40300: LD_INT 3
40302: ARRAY
40303: GREATEREQUAL
40304: AND
40305: IFFALSE 40317
// result := weapon ;
40307: LD_ADDR_VAR 0 3
40311: PUSH
40312: LD_VAR 0 18
40316: ST_TO_ADDR
// end ; end ;
40317: LD_VAR 0 3
40321: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40322: LD_INT 0
40324: PPUSH
40325: PPUSH
// result := true ;
40326: LD_ADDR_VAR 0 3
40330: PUSH
40331: LD_INT 1
40333: ST_TO_ADDR
// if array1 = array2 then
40334: LD_VAR 0 1
40338: PUSH
40339: LD_VAR 0 2
40343: EQUAL
40344: IFFALSE 40404
// begin for i = 1 to array1 do
40346: LD_ADDR_VAR 0 4
40350: PUSH
40351: DOUBLE
40352: LD_INT 1
40354: DEC
40355: ST_TO_ADDR
40356: LD_VAR 0 1
40360: PUSH
40361: FOR_TO
40362: IFFALSE 40400
// if array1 [ i ] <> array2 [ i ] then
40364: LD_VAR 0 1
40368: PUSH
40369: LD_VAR 0 4
40373: ARRAY
40374: PUSH
40375: LD_VAR 0 2
40379: PUSH
40380: LD_VAR 0 4
40384: ARRAY
40385: NONEQUAL
40386: IFFALSE 40398
// begin result := false ;
40388: LD_ADDR_VAR 0 3
40392: PUSH
40393: LD_INT 0
40395: ST_TO_ADDR
// break ;
40396: GO 40400
// end ;
40398: GO 40361
40400: POP
40401: POP
// end else
40402: GO 40412
// result := false ;
40404: LD_ADDR_VAR 0 3
40408: PUSH
40409: LD_INT 0
40411: ST_TO_ADDR
// end ;
40412: LD_VAR 0 3
40416: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40417: LD_INT 0
40419: PPUSH
40420: PPUSH
// if not array1 or not array2 then
40421: LD_VAR 0 1
40425: NOT
40426: PUSH
40427: LD_VAR 0 2
40431: NOT
40432: OR
40433: IFFALSE 40437
// exit ;
40435: GO 40501
// result := true ;
40437: LD_ADDR_VAR 0 3
40441: PUSH
40442: LD_INT 1
40444: ST_TO_ADDR
// for i = 1 to array1 do
40445: LD_ADDR_VAR 0 4
40449: PUSH
40450: DOUBLE
40451: LD_INT 1
40453: DEC
40454: ST_TO_ADDR
40455: LD_VAR 0 1
40459: PUSH
40460: FOR_TO
40461: IFFALSE 40499
// if array1 [ i ] <> array2 [ i ] then
40463: LD_VAR 0 1
40467: PUSH
40468: LD_VAR 0 4
40472: ARRAY
40473: PUSH
40474: LD_VAR 0 2
40478: PUSH
40479: LD_VAR 0 4
40483: ARRAY
40484: NONEQUAL
40485: IFFALSE 40497
// begin result := false ;
40487: LD_ADDR_VAR 0 3
40491: PUSH
40492: LD_INT 0
40494: ST_TO_ADDR
// break ;
40495: GO 40499
// end ;
40497: GO 40460
40499: POP
40500: POP
// end ;
40501: LD_VAR 0 3
40505: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40506: LD_INT 0
40508: PPUSH
40509: PPUSH
40510: PPUSH
// pom := GetBase ( fac ) ;
40511: LD_ADDR_VAR 0 5
40515: PUSH
40516: LD_VAR 0 1
40520: PPUSH
40521: CALL_OW 274
40525: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40526: LD_ADDR_VAR 0 4
40530: PUSH
40531: LD_VAR 0 2
40535: PUSH
40536: LD_INT 1
40538: ARRAY
40539: PPUSH
40540: LD_VAR 0 2
40544: PUSH
40545: LD_INT 2
40547: ARRAY
40548: PPUSH
40549: LD_VAR 0 2
40553: PUSH
40554: LD_INT 3
40556: ARRAY
40557: PPUSH
40558: LD_VAR 0 2
40562: PUSH
40563: LD_INT 4
40565: ARRAY
40566: PPUSH
40567: CALL_OW 449
40571: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40572: LD_ADDR_VAR 0 3
40576: PUSH
40577: LD_VAR 0 5
40581: PPUSH
40582: LD_INT 1
40584: PPUSH
40585: CALL_OW 275
40589: PUSH
40590: LD_VAR 0 4
40594: PUSH
40595: LD_INT 1
40597: ARRAY
40598: GREATEREQUAL
40599: PUSH
40600: LD_VAR 0 5
40604: PPUSH
40605: LD_INT 2
40607: PPUSH
40608: CALL_OW 275
40612: PUSH
40613: LD_VAR 0 4
40617: PUSH
40618: LD_INT 2
40620: ARRAY
40621: GREATEREQUAL
40622: AND
40623: PUSH
40624: LD_VAR 0 5
40628: PPUSH
40629: LD_INT 3
40631: PPUSH
40632: CALL_OW 275
40636: PUSH
40637: LD_VAR 0 4
40641: PUSH
40642: LD_INT 3
40644: ARRAY
40645: GREATEREQUAL
40646: AND
40647: ST_TO_ADDR
// end ;
40648: LD_VAR 0 3
40652: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40653: LD_INT 0
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
// pom := GetBase ( building ) ;
40659: LD_ADDR_VAR 0 3
40663: PUSH
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 274
40673: ST_TO_ADDR
// if not pom then
40674: LD_VAR 0 3
40678: NOT
40679: IFFALSE 40683
// exit ;
40681: GO 40853
// btype := GetBType ( building ) ;
40683: LD_ADDR_VAR 0 5
40687: PUSH
40688: LD_VAR 0 1
40692: PPUSH
40693: CALL_OW 266
40697: ST_TO_ADDR
// if btype = b_armoury then
40698: LD_VAR 0 5
40702: PUSH
40703: LD_INT 4
40705: EQUAL
40706: IFFALSE 40716
// btype := b_barracks ;
40708: LD_ADDR_VAR 0 5
40712: PUSH
40713: LD_INT 5
40715: ST_TO_ADDR
// if btype = b_depot then
40716: LD_VAR 0 5
40720: PUSH
40721: LD_INT 0
40723: EQUAL
40724: IFFALSE 40734
// btype := b_warehouse ;
40726: LD_ADDR_VAR 0 5
40730: PUSH
40731: LD_INT 1
40733: ST_TO_ADDR
// if btype = b_workshop then
40734: LD_VAR 0 5
40738: PUSH
40739: LD_INT 2
40741: EQUAL
40742: IFFALSE 40752
// btype := b_factory ;
40744: LD_ADDR_VAR 0 5
40748: PUSH
40749: LD_INT 3
40751: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40752: LD_ADDR_VAR 0 4
40756: PUSH
40757: LD_VAR 0 5
40761: PPUSH
40762: LD_VAR 0 1
40766: PPUSH
40767: CALL_OW 248
40771: PPUSH
40772: CALL_OW 450
40776: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40777: LD_ADDR_VAR 0 2
40781: PUSH
40782: LD_VAR 0 3
40786: PPUSH
40787: LD_INT 1
40789: PPUSH
40790: CALL_OW 275
40794: PUSH
40795: LD_VAR 0 4
40799: PUSH
40800: LD_INT 1
40802: ARRAY
40803: GREATEREQUAL
40804: PUSH
40805: LD_VAR 0 3
40809: PPUSH
40810: LD_INT 2
40812: PPUSH
40813: CALL_OW 275
40817: PUSH
40818: LD_VAR 0 4
40822: PUSH
40823: LD_INT 2
40825: ARRAY
40826: GREATEREQUAL
40827: AND
40828: PUSH
40829: LD_VAR 0 3
40833: PPUSH
40834: LD_INT 3
40836: PPUSH
40837: CALL_OW 275
40841: PUSH
40842: LD_VAR 0 4
40846: PUSH
40847: LD_INT 3
40849: ARRAY
40850: GREATEREQUAL
40851: AND
40852: ST_TO_ADDR
// end ;
40853: LD_VAR 0 2
40857: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40858: LD_INT 0
40860: PPUSH
40861: PPUSH
40862: PPUSH
// pom := GetBase ( building ) ;
40863: LD_ADDR_VAR 0 4
40867: PUSH
40868: LD_VAR 0 1
40872: PPUSH
40873: CALL_OW 274
40877: ST_TO_ADDR
// if not pom then
40878: LD_VAR 0 4
40882: NOT
40883: IFFALSE 40887
// exit ;
40885: GO 40988
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40887: LD_ADDR_VAR 0 5
40891: PUSH
40892: LD_VAR 0 2
40896: PPUSH
40897: LD_VAR 0 1
40901: PPUSH
40902: CALL_OW 248
40906: PPUSH
40907: CALL_OW 450
40911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40912: LD_ADDR_VAR 0 3
40916: PUSH
40917: LD_VAR 0 4
40921: PPUSH
40922: LD_INT 1
40924: PPUSH
40925: CALL_OW 275
40929: PUSH
40930: LD_VAR 0 5
40934: PUSH
40935: LD_INT 1
40937: ARRAY
40938: GREATEREQUAL
40939: PUSH
40940: LD_VAR 0 4
40944: PPUSH
40945: LD_INT 2
40947: PPUSH
40948: CALL_OW 275
40952: PUSH
40953: LD_VAR 0 5
40957: PUSH
40958: LD_INT 2
40960: ARRAY
40961: GREATEREQUAL
40962: AND
40963: PUSH
40964: LD_VAR 0 4
40968: PPUSH
40969: LD_INT 3
40971: PPUSH
40972: CALL_OW 275
40976: PUSH
40977: LD_VAR 0 5
40981: PUSH
40982: LD_INT 3
40984: ARRAY
40985: GREATEREQUAL
40986: AND
40987: ST_TO_ADDR
// end ;
40988: LD_VAR 0 3
40992: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40993: LD_INT 0
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
41002: PPUSH
41003: PPUSH
41004: PPUSH
41005: PPUSH
// result := false ;
41006: LD_ADDR_VAR 0 8
41010: PUSH
41011: LD_INT 0
41013: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41014: LD_VAR 0 5
41018: NOT
41019: PUSH
41020: LD_VAR 0 1
41024: NOT
41025: OR
41026: PUSH
41027: LD_VAR 0 2
41031: NOT
41032: OR
41033: PUSH
41034: LD_VAR 0 3
41038: NOT
41039: OR
41040: IFFALSE 41044
// exit ;
41042: GO 41858
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41044: LD_ADDR_VAR 0 14
41048: PUSH
41049: LD_VAR 0 1
41053: PPUSH
41054: LD_VAR 0 2
41058: PPUSH
41059: LD_VAR 0 3
41063: PPUSH
41064: LD_VAR 0 4
41068: PPUSH
41069: LD_VAR 0 5
41073: PUSH
41074: LD_INT 1
41076: ARRAY
41077: PPUSH
41078: CALL_OW 248
41082: PPUSH
41083: LD_INT 0
41085: PPUSH
41086: CALL 43091 0 6
41090: ST_TO_ADDR
// if not hexes then
41091: LD_VAR 0 14
41095: NOT
41096: IFFALSE 41100
// exit ;
41098: GO 41858
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41100: LD_ADDR_VAR 0 17
41104: PUSH
41105: LD_VAR 0 5
41109: PPUSH
41110: LD_INT 22
41112: PUSH
41113: LD_VAR 0 13
41117: PPUSH
41118: CALL_OW 255
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 30
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 30
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PPUSH
41159: CALL_OW 72
41163: ST_TO_ADDR
// for i = 1 to hexes do
41164: LD_ADDR_VAR 0 9
41168: PUSH
41169: DOUBLE
41170: LD_INT 1
41172: DEC
41173: ST_TO_ADDR
41174: LD_VAR 0 14
41178: PUSH
41179: FOR_TO
41180: IFFALSE 41856
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41182: LD_ADDR_VAR 0 13
41186: PUSH
41187: LD_VAR 0 14
41191: PUSH
41192: LD_VAR 0 9
41196: ARRAY
41197: PUSH
41198: LD_INT 1
41200: ARRAY
41201: PPUSH
41202: LD_VAR 0 14
41206: PUSH
41207: LD_VAR 0 9
41211: ARRAY
41212: PUSH
41213: LD_INT 2
41215: ARRAY
41216: PPUSH
41217: CALL_OW 428
41221: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41222: LD_VAR 0 14
41226: PUSH
41227: LD_VAR 0 9
41231: ARRAY
41232: PUSH
41233: LD_INT 1
41235: ARRAY
41236: PPUSH
41237: LD_VAR 0 14
41241: PUSH
41242: LD_VAR 0 9
41246: ARRAY
41247: PUSH
41248: LD_INT 2
41250: ARRAY
41251: PPUSH
41252: CALL_OW 351
41256: PUSH
41257: LD_VAR 0 14
41261: PUSH
41262: LD_VAR 0 9
41266: ARRAY
41267: PUSH
41268: LD_INT 1
41270: ARRAY
41271: PPUSH
41272: LD_VAR 0 14
41276: PUSH
41277: LD_VAR 0 9
41281: ARRAY
41282: PUSH
41283: LD_INT 2
41285: ARRAY
41286: PPUSH
41287: CALL_OW 488
41291: NOT
41292: OR
41293: PUSH
41294: LD_VAR 0 13
41298: PPUSH
41299: CALL_OW 247
41303: PUSH
41304: LD_INT 3
41306: EQUAL
41307: OR
41308: IFFALSE 41314
// exit ;
41310: POP
41311: POP
41312: GO 41858
// if not tmp then
41314: LD_VAR 0 13
41318: NOT
41319: IFFALSE 41323
// continue ;
41321: GO 41179
// result := true ;
41323: LD_ADDR_VAR 0 8
41327: PUSH
41328: LD_INT 1
41330: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41331: LD_VAR 0 6
41335: PUSH
41336: LD_VAR 0 13
41340: PPUSH
41341: CALL_OW 247
41345: PUSH
41346: LD_INT 2
41348: EQUAL
41349: AND
41350: PUSH
41351: LD_VAR 0 13
41355: PPUSH
41356: CALL_OW 263
41360: PUSH
41361: LD_INT 1
41363: EQUAL
41364: AND
41365: IFFALSE 41529
// begin if IsDrivenBy ( tmp ) then
41367: LD_VAR 0 13
41371: PPUSH
41372: CALL_OW 311
41376: IFFALSE 41380
// continue ;
41378: GO 41179
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41380: LD_VAR 0 6
41384: PPUSH
41385: LD_INT 3
41387: PUSH
41388: LD_INT 60
41390: PUSH
41391: EMPTY
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 3
41400: PUSH
41401: LD_INT 55
41403: PUSH
41404: EMPTY
41405: LIST
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PPUSH
41415: CALL_OW 72
41419: IFFALSE 41527
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41421: LD_ADDR_VAR 0 18
41425: PUSH
41426: LD_VAR 0 6
41430: PPUSH
41431: LD_INT 3
41433: PUSH
41434: LD_INT 60
41436: PUSH
41437: EMPTY
41438: LIST
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 3
41446: PUSH
41447: LD_INT 55
41449: PUSH
41450: EMPTY
41451: LIST
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PPUSH
41461: CALL_OW 72
41465: PUSH
41466: LD_INT 1
41468: ARRAY
41469: ST_TO_ADDR
// if IsInUnit ( driver ) then
41470: LD_VAR 0 18
41474: PPUSH
41475: CALL_OW 310
41479: IFFALSE 41490
// ComExit ( driver ) ;
41481: LD_VAR 0 18
41485: PPUSH
41486: CALL 66871 0 1
// AddComEnterUnit ( driver , tmp ) ;
41490: LD_VAR 0 18
41494: PPUSH
41495: LD_VAR 0 13
41499: PPUSH
41500: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41504: LD_VAR 0 18
41508: PPUSH
41509: LD_VAR 0 7
41513: PPUSH
41514: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41518: LD_VAR 0 18
41522: PPUSH
41523: CALL_OW 181
// end ; continue ;
41527: GO 41179
// end ; if not cleaners or not tmp in cleaners then
41529: LD_VAR 0 6
41533: NOT
41534: PUSH
41535: LD_VAR 0 13
41539: PUSH
41540: LD_VAR 0 6
41544: IN
41545: NOT
41546: OR
41547: IFFALSE 41854
// begin if dep then
41549: LD_VAR 0 17
41553: IFFALSE 41689
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41555: LD_ADDR_VAR 0 16
41559: PUSH
41560: LD_VAR 0 17
41564: PUSH
41565: LD_INT 1
41567: ARRAY
41568: PPUSH
41569: CALL_OW 250
41573: PPUSH
41574: LD_VAR 0 17
41578: PUSH
41579: LD_INT 1
41581: ARRAY
41582: PPUSH
41583: CALL_OW 254
41587: PPUSH
41588: LD_INT 5
41590: PPUSH
41591: CALL_OW 272
41595: PUSH
41596: LD_VAR 0 17
41600: PUSH
41601: LD_INT 1
41603: ARRAY
41604: PPUSH
41605: CALL_OW 251
41609: PPUSH
41610: LD_VAR 0 17
41614: PUSH
41615: LD_INT 1
41617: ARRAY
41618: PPUSH
41619: CALL_OW 254
41623: PPUSH
41624: LD_INT 5
41626: PPUSH
41627: CALL_OW 273
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41636: LD_VAR 0 16
41640: PUSH
41641: LD_INT 1
41643: ARRAY
41644: PPUSH
41645: LD_VAR 0 16
41649: PUSH
41650: LD_INT 2
41652: ARRAY
41653: PPUSH
41654: CALL_OW 488
41658: IFFALSE 41689
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41660: LD_VAR 0 13
41664: PPUSH
41665: LD_VAR 0 16
41669: PUSH
41670: LD_INT 1
41672: ARRAY
41673: PPUSH
41674: LD_VAR 0 16
41678: PUSH
41679: LD_INT 2
41681: ARRAY
41682: PPUSH
41683: CALL_OW 111
// continue ;
41687: GO 41179
// end ; end ; r := GetDir ( tmp ) ;
41689: LD_ADDR_VAR 0 15
41693: PUSH
41694: LD_VAR 0 13
41698: PPUSH
41699: CALL_OW 254
41703: ST_TO_ADDR
// if r = 5 then
41704: LD_VAR 0 15
41708: PUSH
41709: LD_INT 5
41711: EQUAL
41712: IFFALSE 41722
// r := 0 ;
41714: LD_ADDR_VAR 0 15
41718: PUSH
41719: LD_INT 0
41721: ST_TO_ADDR
// for j = r to 5 do
41722: LD_ADDR_VAR 0 10
41726: PUSH
41727: DOUBLE
41728: LD_VAR 0 15
41732: DEC
41733: ST_TO_ADDR
41734: LD_INT 5
41736: PUSH
41737: FOR_TO
41738: IFFALSE 41852
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41740: LD_ADDR_VAR 0 11
41744: PUSH
41745: LD_VAR 0 13
41749: PPUSH
41750: CALL_OW 250
41754: PPUSH
41755: LD_VAR 0 10
41759: PPUSH
41760: LD_INT 2
41762: PPUSH
41763: CALL_OW 272
41767: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41768: LD_ADDR_VAR 0 12
41772: PUSH
41773: LD_VAR 0 13
41777: PPUSH
41778: CALL_OW 251
41782: PPUSH
41783: LD_VAR 0 10
41787: PPUSH
41788: LD_INT 2
41790: PPUSH
41791: CALL_OW 273
41795: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41796: LD_VAR 0 11
41800: PPUSH
41801: LD_VAR 0 12
41805: PPUSH
41806: CALL_OW 488
41810: PUSH
41811: LD_VAR 0 11
41815: PPUSH
41816: LD_VAR 0 12
41820: PPUSH
41821: CALL_OW 428
41825: NOT
41826: AND
41827: IFFALSE 41850
// begin ComMoveXY ( tmp , _x , _y ) ;
41829: LD_VAR 0 13
41833: PPUSH
41834: LD_VAR 0 11
41838: PPUSH
41839: LD_VAR 0 12
41843: PPUSH
41844: CALL_OW 111
// break ;
41848: GO 41852
// end ; end ;
41850: GO 41737
41852: POP
41853: POP
// end ; end ;
41854: GO 41179
41856: POP
41857: POP
// end ;
41858: LD_VAR 0 8
41862: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41863: LD_INT 0
41865: PPUSH
// result := true ;
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_INT 1
41873: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41874: LD_VAR 0 2
41878: PUSH
41879: LD_INT 24
41881: DOUBLE
41882: EQUAL
41883: IFTRUE 41893
41885: LD_INT 33
41887: DOUBLE
41888: EQUAL
41889: IFTRUE 41893
41891: GO 41918
41893: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41894: LD_ADDR_VAR 0 3
41898: PUSH
41899: LD_INT 32
41901: PPUSH
41902: LD_VAR 0 1
41906: PPUSH
41907: CALL_OW 321
41911: PUSH
41912: LD_INT 2
41914: EQUAL
41915: ST_TO_ADDR
41916: GO 42234
41918: LD_INT 20
41920: DOUBLE
41921: EQUAL
41922: IFTRUE 41926
41924: GO 41951
41926: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41927: LD_ADDR_VAR 0 3
41931: PUSH
41932: LD_INT 6
41934: PPUSH
41935: LD_VAR 0 1
41939: PPUSH
41940: CALL_OW 321
41944: PUSH
41945: LD_INT 2
41947: EQUAL
41948: ST_TO_ADDR
41949: GO 42234
41951: LD_INT 22
41953: DOUBLE
41954: EQUAL
41955: IFTRUE 41965
41957: LD_INT 36
41959: DOUBLE
41960: EQUAL
41961: IFTRUE 41965
41963: GO 41990
41965: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41966: LD_ADDR_VAR 0 3
41970: PUSH
41971: LD_INT 15
41973: PPUSH
41974: LD_VAR 0 1
41978: PPUSH
41979: CALL_OW 321
41983: PUSH
41984: LD_INT 2
41986: EQUAL
41987: ST_TO_ADDR
41988: GO 42234
41990: LD_INT 30
41992: DOUBLE
41993: EQUAL
41994: IFTRUE 41998
41996: GO 42023
41998: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41999: LD_ADDR_VAR 0 3
42003: PUSH
42004: LD_INT 20
42006: PPUSH
42007: LD_VAR 0 1
42011: PPUSH
42012: CALL_OW 321
42016: PUSH
42017: LD_INT 2
42019: EQUAL
42020: ST_TO_ADDR
42021: GO 42234
42023: LD_INT 28
42025: DOUBLE
42026: EQUAL
42027: IFTRUE 42037
42029: LD_INT 21
42031: DOUBLE
42032: EQUAL
42033: IFTRUE 42037
42035: GO 42062
42037: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42038: LD_ADDR_VAR 0 3
42042: PUSH
42043: LD_INT 21
42045: PPUSH
42046: LD_VAR 0 1
42050: PPUSH
42051: CALL_OW 321
42055: PUSH
42056: LD_INT 2
42058: EQUAL
42059: ST_TO_ADDR
42060: GO 42234
42062: LD_INT 16
42064: DOUBLE
42065: EQUAL
42066: IFTRUE 42070
42068: GO 42095
42070: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42071: LD_ADDR_VAR 0 3
42075: PUSH
42076: LD_INT 84
42078: PPUSH
42079: LD_VAR 0 1
42083: PPUSH
42084: CALL_OW 321
42088: PUSH
42089: LD_INT 2
42091: EQUAL
42092: ST_TO_ADDR
42093: GO 42234
42095: LD_INT 19
42097: DOUBLE
42098: EQUAL
42099: IFTRUE 42109
42101: LD_INT 23
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42109
42107: GO 42134
42109: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42110: LD_ADDR_VAR 0 3
42114: PUSH
42115: LD_INT 83
42117: PPUSH
42118: LD_VAR 0 1
42122: PPUSH
42123: CALL_OW 321
42127: PUSH
42128: LD_INT 2
42130: EQUAL
42131: ST_TO_ADDR
42132: GO 42234
42134: LD_INT 17
42136: DOUBLE
42137: EQUAL
42138: IFTRUE 42142
42140: GO 42167
42142: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42143: LD_ADDR_VAR 0 3
42147: PUSH
42148: LD_INT 39
42150: PPUSH
42151: LD_VAR 0 1
42155: PPUSH
42156: CALL_OW 321
42160: PUSH
42161: LD_INT 2
42163: EQUAL
42164: ST_TO_ADDR
42165: GO 42234
42167: LD_INT 18
42169: DOUBLE
42170: EQUAL
42171: IFTRUE 42175
42173: GO 42200
42175: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42176: LD_ADDR_VAR 0 3
42180: PUSH
42181: LD_INT 40
42183: PPUSH
42184: LD_VAR 0 1
42188: PPUSH
42189: CALL_OW 321
42193: PUSH
42194: LD_INT 2
42196: EQUAL
42197: ST_TO_ADDR
42198: GO 42234
42200: LD_INT 27
42202: DOUBLE
42203: EQUAL
42204: IFTRUE 42208
42206: GO 42233
42208: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42209: LD_ADDR_VAR 0 3
42213: PUSH
42214: LD_INT 35
42216: PPUSH
42217: LD_VAR 0 1
42221: PPUSH
42222: CALL_OW 321
42226: PUSH
42227: LD_INT 2
42229: EQUAL
42230: ST_TO_ADDR
42231: GO 42234
42233: POP
// end ;
42234: LD_VAR 0 3
42238: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42239: LD_INT 0
42241: PPUSH
42242: PPUSH
42243: PPUSH
42244: PPUSH
42245: PPUSH
42246: PPUSH
42247: PPUSH
42248: PPUSH
42249: PPUSH
42250: PPUSH
42251: PPUSH
// result := false ;
42252: LD_ADDR_VAR 0 6
42256: PUSH
42257: LD_INT 0
42259: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42260: LD_VAR 0 1
42264: NOT
42265: PUSH
42266: LD_VAR 0 1
42270: PPUSH
42271: CALL_OW 266
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: IN
42286: NOT
42287: OR
42288: PUSH
42289: LD_VAR 0 2
42293: NOT
42294: OR
42295: PUSH
42296: LD_VAR 0 5
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 3
42312: PUSH
42313: LD_INT 4
42315: PUSH
42316: LD_INT 5
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: IN
42327: NOT
42328: OR
42329: PUSH
42330: LD_VAR 0 3
42334: PPUSH
42335: LD_VAR 0 4
42339: PPUSH
42340: CALL_OW 488
42344: NOT
42345: OR
42346: IFFALSE 42350
// exit ;
42348: GO 43086
// side := GetSide ( depot ) ;
42350: LD_ADDR_VAR 0 9
42354: PUSH
42355: LD_VAR 0 1
42359: PPUSH
42360: CALL_OW 255
42364: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42365: LD_VAR 0 9
42369: PPUSH
42370: LD_VAR 0 2
42374: PPUSH
42375: CALL 41863 0 2
42379: NOT
42380: IFFALSE 42384
// exit ;
42382: GO 43086
// pom := GetBase ( depot ) ;
42384: LD_ADDR_VAR 0 10
42388: PUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 274
42398: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42399: LD_ADDR_VAR 0 11
42403: PUSH
42404: LD_VAR 0 2
42408: PPUSH
42409: LD_VAR 0 1
42413: PPUSH
42414: CALL_OW 248
42418: PPUSH
42419: CALL_OW 450
42423: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42424: LD_VAR 0 10
42428: PPUSH
42429: LD_INT 1
42431: PPUSH
42432: CALL_OW 275
42436: PUSH
42437: LD_VAR 0 11
42441: PUSH
42442: LD_INT 1
42444: ARRAY
42445: GREATEREQUAL
42446: PUSH
42447: LD_VAR 0 10
42451: PPUSH
42452: LD_INT 2
42454: PPUSH
42455: CALL_OW 275
42459: PUSH
42460: LD_VAR 0 11
42464: PUSH
42465: LD_INT 2
42467: ARRAY
42468: GREATEREQUAL
42469: AND
42470: PUSH
42471: LD_VAR 0 10
42475: PPUSH
42476: LD_INT 3
42478: PPUSH
42479: CALL_OW 275
42483: PUSH
42484: LD_VAR 0 11
42488: PUSH
42489: LD_INT 3
42491: ARRAY
42492: GREATEREQUAL
42493: AND
42494: NOT
42495: IFFALSE 42499
// exit ;
42497: GO 43086
// if GetBType ( depot ) = b_depot then
42499: LD_VAR 0 1
42503: PPUSH
42504: CALL_OW 266
42508: PUSH
42509: LD_INT 0
42511: EQUAL
42512: IFFALSE 42524
// dist := 28 else
42514: LD_ADDR_VAR 0 14
42518: PUSH
42519: LD_INT 28
42521: ST_TO_ADDR
42522: GO 42532
// dist := 36 ;
42524: LD_ADDR_VAR 0 14
42528: PUSH
42529: LD_INT 36
42531: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42532: LD_VAR 0 1
42536: PPUSH
42537: LD_VAR 0 3
42541: PPUSH
42542: LD_VAR 0 4
42546: PPUSH
42547: CALL_OW 297
42551: PUSH
42552: LD_VAR 0 14
42556: GREATER
42557: IFFALSE 42561
// exit ;
42559: GO 43086
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42561: LD_ADDR_VAR 0 12
42565: PUSH
42566: LD_VAR 0 2
42570: PPUSH
42571: LD_VAR 0 3
42575: PPUSH
42576: LD_VAR 0 4
42580: PPUSH
42581: LD_VAR 0 5
42585: PPUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 248
42595: PPUSH
42596: LD_INT 0
42598: PPUSH
42599: CALL 43091 0 6
42603: ST_TO_ADDR
// if not hexes then
42604: LD_VAR 0 12
42608: NOT
42609: IFFALSE 42613
// exit ;
42611: GO 43086
// hex := GetHexInfo ( x , y ) ;
42613: LD_ADDR_VAR 0 15
42617: PUSH
42618: LD_VAR 0 3
42622: PPUSH
42623: LD_VAR 0 4
42627: PPUSH
42628: CALL_OW 546
42632: ST_TO_ADDR
// if hex [ 1 ] then
42633: LD_VAR 0 15
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: IFFALSE 42645
// exit ;
42643: GO 43086
// height := hex [ 2 ] ;
42645: LD_ADDR_VAR 0 13
42649: PUSH
42650: LD_VAR 0 15
42654: PUSH
42655: LD_INT 2
42657: ARRAY
42658: ST_TO_ADDR
// for i = 1 to hexes do
42659: LD_ADDR_VAR 0 7
42663: PUSH
42664: DOUBLE
42665: LD_INT 1
42667: DEC
42668: ST_TO_ADDR
42669: LD_VAR 0 12
42673: PUSH
42674: FOR_TO
42675: IFFALSE 43005
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42677: LD_VAR 0 12
42681: PUSH
42682: LD_VAR 0 7
42686: ARRAY
42687: PUSH
42688: LD_INT 1
42690: ARRAY
42691: PPUSH
42692: LD_VAR 0 12
42696: PUSH
42697: LD_VAR 0 7
42701: ARRAY
42702: PUSH
42703: LD_INT 2
42705: ARRAY
42706: PPUSH
42707: CALL_OW 488
42711: NOT
42712: PUSH
42713: LD_VAR 0 12
42717: PUSH
42718: LD_VAR 0 7
42722: ARRAY
42723: PUSH
42724: LD_INT 1
42726: ARRAY
42727: PPUSH
42728: LD_VAR 0 12
42732: PUSH
42733: LD_VAR 0 7
42737: ARRAY
42738: PUSH
42739: LD_INT 2
42741: ARRAY
42742: PPUSH
42743: CALL_OW 428
42747: PUSH
42748: LD_INT 0
42750: GREATER
42751: OR
42752: PUSH
42753: LD_VAR 0 12
42757: PUSH
42758: LD_VAR 0 7
42762: ARRAY
42763: PUSH
42764: LD_INT 1
42766: ARRAY
42767: PPUSH
42768: LD_VAR 0 12
42772: PUSH
42773: LD_VAR 0 7
42777: ARRAY
42778: PUSH
42779: LD_INT 2
42781: ARRAY
42782: PPUSH
42783: CALL_OW 351
42787: OR
42788: IFFALSE 42794
// exit ;
42790: POP
42791: POP
42792: GO 43086
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42794: LD_ADDR_VAR 0 8
42798: PUSH
42799: LD_VAR 0 12
42803: PUSH
42804: LD_VAR 0 7
42808: ARRAY
42809: PUSH
42810: LD_INT 1
42812: ARRAY
42813: PPUSH
42814: LD_VAR 0 12
42818: PUSH
42819: LD_VAR 0 7
42823: ARRAY
42824: PUSH
42825: LD_INT 2
42827: ARRAY
42828: PPUSH
42829: CALL_OW 546
42833: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42834: LD_VAR 0 8
42838: PUSH
42839: LD_INT 1
42841: ARRAY
42842: PUSH
42843: LD_VAR 0 8
42847: PUSH
42848: LD_INT 2
42850: ARRAY
42851: PUSH
42852: LD_VAR 0 13
42856: PUSH
42857: LD_INT 2
42859: PLUS
42860: GREATER
42861: OR
42862: PUSH
42863: LD_VAR 0 8
42867: PUSH
42868: LD_INT 2
42870: ARRAY
42871: PUSH
42872: LD_VAR 0 13
42876: PUSH
42877: LD_INT 2
42879: MINUS
42880: LESS
42881: OR
42882: PUSH
42883: LD_VAR 0 8
42887: PUSH
42888: LD_INT 3
42890: ARRAY
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 8
42897: PUSH
42898: LD_INT 9
42900: PUSH
42901: LD_INT 10
42903: PUSH
42904: LD_INT 11
42906: PUSH
42907: LD_INT 12
42909: PUSH
42910: LD_INT 13
42912: PUSH
42913: LD_INT 16
42915: PUSH
42916: LD_INT 17
42918: PUSH
42919: LD_INT 18
42921: PUSH
42922: LD_INT 19
42924: PUSH
42925: LD_INT 20
42927: PUSH
42928: LD_INT 21
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: IN
42946: NOT
42947: OR
42948: PUSH
42949: LD_VAR 0 8
42953: PUSH
42954: LD_INT 5
42956: ARRAY
42957: NOT
42958: OR
42959: PUSH
42960: LD_VAR 0 8
42964: PUSH
42965: LD_INT 6
42967: ARRAY
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 7
42977: PUSH
42978: LD_INT 9
42980: PUSH
42981: LD_INT 10
42983: PUSH
42984: LD_INT 11
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: IN
42995: NOT
42996: OR
42997: IFFALSE 43003
// exit ;
42999: POP
43000: POP
43001: GO 43086
// end ;
43003: GO 42674
43005: POP
43006: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43007: LD_VAR 0 9
43011: PPUSH
43012: LD_VAR 0 3
43016: PPUSH
43017: LD_VAR 0 4
43021: PPUSH
43022: LD_INT 20
43024: PPUSH
43025: CALL 35038 0 4
43029: PUSH
43030: LD_INT 4
43032: ARRAY
43033: IFFALSE 43037
// exit ;
43035: GO 43086
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43037: LD_VAR 0 2
43041: PUSH
43042: LD_INT 29
43044: PUSH
43045: LD_INT 30
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: IN
43052: PUSH
43053: LD_VAR 0 3
43057: PPUSH
43058: LD_VAR 0 4
43062: PPUSH
43063: LD_VAR 0 9
43067: PPUSH
43068: CALL_OW 440
43072: NOT
43073: AND
43074: IFFALSE 43078
// exit ;
43076: GO 43086
// result := true ;
43078: LD_ADDR_VAR 0 6
43082: PUSH
43083: LD_INT 1
43085: ST_TO_ADDR
// end ;
43086: LD_VAR 0 6
43090: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43091: LD_INT 0
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
43101: PPUSH
43102: PPUSH
43103: PPUSH
43104: PPUSH
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
43112: PPUSH
43113: PPUSH
43114: PPUSH
43115: PPUSH
43116: PPUSH
43117: PPUSH
43118: PPUSH
43119: PPUSH
43120: PPUSH
43121: PPUSH
43122: PPUSH
43123: PPUSH
43124: PPUSH
43125: PPUSH
43126: PPUSH
43127: PPUSH
43128: PPUSH
43129: PPUSH
43130: PPUSH
43131: PPUSH
43132: PPUSH
43133: PPUSH
43134: PPUSH
43135: PPUSH
43136: PPUSH
43137: PPUSH
43138: PPUSH
43139: PPUSH
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
// result = [ ] ;
43151: LD_ADDR_VAR 0 7
43155: PUSH
43156: EMPTY
43157: ST_TO_ADDR
// temp_list = [ ] ;
43158: LD_ADDR_VAR 0 9
43162: PUSH
43163: EMPTY
43164: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43165: LD_VAR 0 4
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: LD_INT 3
43181: PUSH
43182: LD_INT 4
43184: PUSH
43185: LD_INT 5
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: IN
43196: NOT
43197: PUSH
43198: LD_VAR 0 1
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: IN
43213: PUSH
43214: LD_VAR 0 5
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: LD_INT 3
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: IN
43233: NOT
43234: AND
43235: OR
43236: IFFALSE 43240
// exit ;
43238: GO 61631
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43240: LD_VAR 0 1
43244: PUSH
43245: LD_INT 6
43247: PUSH
43248: LD_INT 7
43250: PUSH
43251: LD_INT 8
43253: PUSH
43254: LD_INT 13
43256: PUSH
43257: LD_INT 12
43259: PUSH
43260: LD_INT 15
43262: PUSH
43263: LD_INT 11
43265: PUSH
43266: LD_INT 14
43268: PUSH
43269: LD_INT 10
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: IN
43283: IFFALSE 43293
// btype = b_lab ;
43285: LD_ADDR_VAR 0 1
43289: PUSH
43290: LD_INT 6
43292: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43293: LD_VAR 0 6
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: LIST
43311: IN
43312: NOT
43313: PUSH
43314: LD_VAR 0 1
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: LD_INT 3
43330: PUSH
43331: LD_INT 6
43333: PUSH
43334: LD_INT 36
43336: PUSH
43337: LD_INT 4
43339: PUSH
43340: LD_INT 5
43342: PUSH
43343: LD_INT 31
43345: PUSH
43346: LD_INT 32
43348: PUSH
43349: LD_INT 33
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: IN
43365: NOT
43366: PUSH
43367: LD_VAR 0 6
43371: PUSH
43372: LD_INT 1
43374: EQUAL
43375: AND
43376: OR
43377: PUSH
43378: LD_VAR 0 1
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: IN
43393: NOT
43394: PUSH
43395: LD_VAR 0 6
43399: PUSH
43400: LD_INT 2
43402: EQUAL
43403: AND
43404: OR
43405: IFFALSE 43415
// mode = 0 ;
43407: LD_ADDR_VAR 0 6
43411: PUSH
43412: LD_INT 0
43414: ST_TO_ADDR
// case mode of 0 :
43415: LD_VAR 0 6
43419: PUSH
43420: LD_INT 0
43422: DOUBLE
43423: EQUAL
43424: IFTRUE 43428
43426: GO 54881
43428: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43429: LD_ADDR_VAR 0 11
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 3
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43622: LD_ADDR_VAR 0 12
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: NEG
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 3
43779: NEG
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 3
43790: NEG
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43818: LD_ADDR_VAR 0 13
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: NEG
43966: PUSH
43967: LD_INT 3
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 3
43977: NEG
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 3
43989: NEG
43990: PUSH
43991: LD_INT 3
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44017: LD_ADDR_VAR 0 14
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: LD_INT 3
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 3
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44213: LD_ADDR_VAR 0 15
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 3
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 3
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44406: LD_ADDR_VAR 0 16
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 3
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 3
44563: PUSH
44564: LD_INT 3
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 3
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44599: LD_ADDR_VAR 0 17
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 2
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44829: LD_ADDR_VAR 0 18
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45059: LD_ADDR_VAR 0 19
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: LD_INT 2
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45289: LD_ADDR_VAR 0 20
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: NEG
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45519: LD_ADDR_VAR 0 21
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45749: LD_ADDR_VAR 0 22
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45979: LD_ADDR_VAR 0 23
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 3
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 3
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 2
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46259: LD_ADDR_VAR 0 24
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46535: LD_ADDR_VAR 0 25
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 3
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 3
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 3
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 3
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46809: LD_ADDR_VAR 0 26
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 3
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47085: LD_ADDR_VAR 0 27
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 3
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 3
47330: NEG
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47365: LD_ADDR_VAR 0 28
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 2
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: LD_INT 3
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 3
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 3
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 3
47612: NEG
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47647: LD_ADDR_VAR 0 29
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: LD_INT 3
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47926: LD_ADDR_VAR 0 30
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 3
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 3
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 3
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48204: LD_ADDR_VAR 0 31
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: LD_INT 3
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 3
48447: NEG
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48482: LD_ADDR_VAR 0 32
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 3
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 3
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 3
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: NEG
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48760: LD_ADDR_VAR 0 33
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: NEG
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: LD_INT 3
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 3
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 3
49004: NEG
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49039: LD_ADDR_VAR 0 34
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 3
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 3
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49319: LD_ADDR_VAR 0 35
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49431: LD_ADDR_VAR 0 36
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49543: LD_ADDR_VAR 0 37
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49655: LD_ADDR_VAR 0 38
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49767: LD_ADDR_VAR 0 39
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49879: LD_ADDR_VAR 0 40
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49991: LD_ADDR_VAR 0 41
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: LD_INT 3
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 3
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 3
50288: NEG
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 3
50300: NEG
50301: PUSH
50302: LD_INT 3
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50341: LD_ADDR_VAR 0 42
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: LD_INT 3
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 3
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: LD_INT 3
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: LD_INT 3
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 3
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 3
50638: NEG
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 3
50650: NEG
50651: PUSH
50652: LD_INT 3
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50691: LD_ADDR_VAR 0 43
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 3
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 3
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 3
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 3
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 3
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51039: LD_ADDR_VAR 0 44
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 3
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 3
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 3
51282: PUSH
51283: LD_INT 3
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 3
51324: NEG
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 3
51336: NEG
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 3
51348: NEG
51349: PUSH
51350: LD_INT 3
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51389: LD_ADDR_VAR 0 45
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: LD_INT 3
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 3
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 3
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 3
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 3
51698: NEG
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51739: LD_ADDR_VAR 0 46
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 3
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 3
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 3
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 3
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52087: LD_ADDR_VAR 0 47
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52238: LD_ADDR_VAR 0 48
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52385: LD_ADDR_VAR 0 49
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52529: LD_ADDR_VAR 0 50
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52673: LD_ADDR_VAR 0 51
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52820: LD_ADDR_VAR 0 52
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52971: LD_ADDR_VAR 0 53
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53201: LD_ADDR_VAR 0 54
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53431: LD_ADDR_VAR 0 55
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53661: LD_ADDR_VAR 0 56
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: LD_INT 2
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 2
53860: NEG
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53891: LD_ADDR_VAR 0 57
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: NEG
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54121: LD_ADDR_VAR 0 58
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54351: LD_ADDR_VAR 0 59
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54439: LD_ADDR_VAR 0 60
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54527: LD_ADDR_VAR 0 61
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54615: LD_ADDR_VAR 0 62
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54703: LD_ADDR_VAR 0 63
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54791: LD_ADDR_VAR 0 64
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: ST_TO_ADDR
// end ; 1 :
54879: GO 60776
54881: LD_INT 1
54883: DOUBLE
54884: EQUAL
54885: IFTRUE 54889
54887: GO 57512
54889: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54890: LD_ADDR_VAR 0 11
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 3
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 3
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54934: LD_ADDR_VAR 0 12
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 3
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 3
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: LIST
54974: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54975: LD_ADDR_VAR 0 13
54979: PUSH
54980: LD_INT 3
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55015: LD_ADDR_VAR 0 14
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 3
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 3
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: LIST
55055: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55056: LD_ADDR_VAR 0 15
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 3
55074: NEG
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55100: LD_ADDR_VAR 0 16
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 3
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: LIST
55145: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55146: LD_ADDR_VAR 0 17
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: LD_INT 3
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 3
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55190: LD_ADDR_VAR 0 18
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: LIST
55230: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55231: LD_ADDR_VAR 0 19
55235: PUSH
55236: LD_INT 3
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 3
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: LIST
55270: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55271: LD_ADDR_VAR 0 20
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55312: LD_ADDR_VAR 0 21
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 3
55330: NEG
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: LIST
55355: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55356: LD_ADDR_VAR 0 22
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: LD_INT 3
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 3
55387: NEG
55388: PUSH
55389: LD_INT 3
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: LIST
55401: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55402: LD_ADDR_VAR 0 23
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 3
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: LD_INT 4
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 3
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55446: LD_ADDR_VAR 0 24
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 4
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: LIST
55486: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55487: LD_ADDR_VAR 0 25
55491: PUSH
55492: LD_INT 3
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 4
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55527: LD_ADDR_VAR 0 26
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 3
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 4
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 3
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55568: LD_ADDR_VAR 0 27
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 4
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55612: LD_ADDR_VAR 0 28
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: LD_INT 3
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: LD_INT 4
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 4
55643: NEG
55644: PUSH
55645: LD_INT 3
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: LIST
55657: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55658: LD_ADDR_VAR 0 29
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 3
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 4
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 4
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 5
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 5
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: LD_INT 4
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 6
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 6
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 5
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55813: LD_ADDR_VAR 0 30
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 3
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 4
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 4
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 4
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 5
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 5
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 5
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 6
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 6
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55956: LD_ADDR_VAR 0 31
55960: PUSH
55961: LD_INT 3
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 3
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: LD_INT 3
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 4
55993: PUSH
55994: LD_INT 3
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 4
56003: PUSH
56004: LD_INT 4
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: PUSH
56014: LD_INT 4
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 5
56023: PUSH
56024: LD_INT 4
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 5
56033: PUSH
56034: LD_INT 5
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 4
56043: PUSH
56044: LD_INT 5
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 6
56053: PUSH
56054: LD_INT 5
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 6
56063: PUSH
56064: LD_INT 6
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 5
56073: PUSH
56074: LD_INT 6
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56095: LD_ADDR_VAR 0 32
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 4
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 4
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 3
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 5
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 5
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: LD_INT 4
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 6
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 6
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 5
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56238: LD_ADDR_VAR 0 33
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 4
56290: NEG
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 4
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 4
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 5
56324: NEG
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 5
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 5
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 6
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 6
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56393: LD_ADDR_VAR 0 34
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 3
56412: NEG
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: LD_INT 3
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: NEG
56437: PUSH
56438: LD_INT 4
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 4
56448: NEG
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 4
56460: NEG
56461: PUSH
56462: LD_INT 4
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 4
56472: NEG
56473: PUSH
56474: LD_INT 5
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 5
56484: NEG
56485: PUSH
56486: LD_INT 4
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 5
56496: NEG
56497: PUSH
56498: LD_INT 5
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 5
56508: NEG
56509: PUSH
56510: LD_INT 6
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 6
56520: NEG
56521: PUSH
56522: LD_INT 5
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 6
56532: NEG
56533: PUSH
56534: LD_INT 6
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56556: LD_ADDR_VAR 0 41
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56600: LD_ADDR_VAR 0 42
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56641: LD_ADDR_VAR 0 43
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 3
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: LIST
56680: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56681: LD_ADDR_VAR 0 44
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: LIST
56721: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56722: LD_ADDR_VAR 0 45
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: LIST
56765: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56766: LD_ADDR_VAR 0 46
56770: PUSH
56771: LD_INT 2
56773: NEG
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 2
56785: NEG
56786: PUSH
56787: LD_INT 3
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: NEG
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: LIST
56811: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56812: LD_ADDR_VAR 0 47
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 3
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56845: LD_ADDR_VAR 0 48
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56876: LD_ADDR_VAR 0 49
56880: PUSH
56881: LD_INT 3
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56905: LD_ADDR_VAR 0 50
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56934: LD_ADDR_VAR 0 51
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56965: LD_ADDR_VAR 0 52
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: LD_INT 2
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56998: LD_ADDR_VAR 0 53
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 3
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57042: LD_ADDR_VAR 0 54
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57083: LD_ADDR_VAR 0 55
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: LD_INT 3
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57123: LD_ADDR_VAR 0 56
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 3
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 3
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57164: LD_ADDR_VAR 0 57
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 3
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57208: LD_ADDR_VAR 0 58
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 3
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: LD_INT 3
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57254: LD_ADDR_VAR 0 59
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57298: LD_ADDR_VAR 0 60
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57339: LD_ADDR_VAR 0 61
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: LD_INT 2
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: LIST
57378: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57379: LD_ADDR_VAR 0 62
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57420: LD_ADDR_VAR 0 63
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57464: LD_ADDR_VAR 0 64
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// end ; 2 :
57510: GO 60776
57512: LD_INT 2
57514: DOUBLE
57515: EQUAL
57516: IFTRUE 57520
57518: GO 60775
57520: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57521: LD_ADDR_VAR 0 29
57525: PUSH
57526: LD_INT 4
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 4
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 5
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 4
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: LD_INT 2
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 5
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: LD_INT 3
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 4
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: LD_INT 4
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 4
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 4
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: LD_INT 4
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: LD_INT 5
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 5
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: NEG
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 3
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 4
57860: NEG
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 4
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 4
57883: NEG
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 4
57906: NEG
57907: PUSH
57908: LD_INT 4
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 4
57918: NEG
57919: PUSH
57920: LD_INT 5
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 3
57930: NEG
57931: PUSH
57932: LD_INT 4
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: NEG
57943: PUSH
57944: LD_INT 3
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 4
57954: NEG
57955: PUSH
57956: LD_INT 3
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 5
57966: NEG
57967: PUSH
57968: LD_INT 4
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 5
57978: NEG
57979: PUSH
57980: LD_INT 5
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: LD_INT 5
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 5
58002: NEG
58003: PUSH
58004: LD_INT 3
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58059: LD_ADDR_VAR 0 30
58063: PUSH
58064: LD_INT 4
58066: PUSH
58067: LD_INT 4
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 4
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 5
58086: PUSH
58087: LD_INT 4
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 5
58096: PUSH
58097: LD_INT 5
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 4
58106: PUSH
58107: LD_INT 5
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: LD_INT 4
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 5
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 5
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 4
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 4
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 4
58249: NEG
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 4
58260: NEG
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 3
58272: NEG
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 3
58283: NEG
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 4
58294: NEG
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 5
58305: NEG
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 5
58316: NEG
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 5
58328: NEG
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: LD_INT 3
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 3
58363: NEG
58364: PUSH
58365: LD_INT 4
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: LD_INT 2
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 4
58411: NEG
58412: PUSH
58413: LD_INT 3
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 4
58423: NEG
58424: PUSH
58425: LD_INT 4
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: LD_INT 4
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 4
58447: NEG
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 4
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 5
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: LD_INT 4
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: LD_INT 4
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 5
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: LD_INT 3
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: LD_INT 5
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58606: LD_ADDR_VAR 0 31
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 4
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 4
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 5
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 5
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 4
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 3
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: LD_INT 5
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: LD_INT 3
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 3
58706: NEG
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 3
58717: NEG
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 3
58751: NEG
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 4
58762: NEG
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 4
58773: NEG
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 4
58785: NEG
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 4
58808: NEG
58809: PUSH
58810: LD_INT 4
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 4
58820: NEG
58821: PUSH
58822: LD_INT 5
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: LD_INT 4
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: NEG
58845: PUSH
58846: LD_INT 3
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 4
58856: NEG
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 5
58868: NEG
58869: PUSH
58870: LD_INT 4
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 5
58880: NEG
58881: PUSH
58882: LD_INT 5
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 3
58892: NEG
58893: PUSH
58894: LD_INT 5
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 5
58904: NEG
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: LD_INT 4
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: LD_INT 3
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 4
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 4
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 4
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 4
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 5
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 5
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 4
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 3
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 3
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 5
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59156: LD_ADDR_VAR 0 32
59160: PUSH
59161: LD_INT 4
59163: NEG
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 4
59174: NEG
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 4
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 5
59219: NEG
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 5
59230: NEG
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 5
59242: NEG
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 3
59265: NEG
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 3
59277: NEG
59278: PUSH
59279: LD_INT 4
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: LD_INT 3
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: NEG
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 4
59325: NEG
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 4
59337: NEG
59338: PUSH
59339: LD_INT 4
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: LD_INT 4
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 4
59361: NEG
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 4
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: LD_INT 5
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: LD_INT 4
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 3
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 3
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 4
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 5
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: LD_INT 5
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 3
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 4
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 4
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 3
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 4
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: LD_INT 4
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 4
59578: PUSH
59579: LD_INT 3
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 5
59588: PUSH
59589: LD_INT 4
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 5
59598: PUSH
59599: LD_INT 5
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 4
59608: PUSH
59609: LD_INT 5
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: LD_INT 4
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 5
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: LD_INT 5
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59703: LD_ADDR_VAR 0 33
59707: PUSH
59708: LD_INT 4
59710: NEG
59711: PUSH
59712: LD_INT 4
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 4
59722: NEG
59723: PUSH
59724: LD_INT 5
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 3
59734: NEG
59735: PUSH
59736: LD_INT 4
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 3
59746: NEG
59747: PUSH
59748: LD_INT 3
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 4
59758: NEG
59759: PUSH
59760: LD_INT 3
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 5
59770: NEG
59771: PUSH
59772: LD_INT 4
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 5
59782: NEG
59783: PUSH
59784: LD_INT 5
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: NEG
59795: PUSH
59796: LD_INT 5
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 5
59806: NEG
59807: PUSH
59808: LD_INT 3
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 3
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 4
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 3
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: LD_INT 4
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 2
59908: NEG
59909: PUSH
59910: LD_INT 4
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 4
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 4
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 5
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 5
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 4
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 3
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 5
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 3
60013: PUSH
60014: LD_INT 3
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 4
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 4
60043: PUSH
60044: LD_INT 4
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: LD_INT 4
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 3
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 4
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: LD_INT 4
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 4
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 4
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 5
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 4
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: LD_INT 5
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: NEG
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60241: LD_ADDR_VAR 0 34
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 4
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 5
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: LD_INT 4
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 5
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 5
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 3
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 3
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 4
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 4
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 4
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 4
60443: PUSH
60444: LD_INT 4
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 4
60453: PUSH
60454: LD_INT 3
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 5
60463: PUSH
60464: LD_INT 4
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 5
60473: PUSH
60474: LD_INT 5
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 4
60483: PUSH
60484: LD_INT 5
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: LD_INT 4
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: LD_INT 3
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 5
60513: PUSH
60514: LD_INT 3
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: LD_INT 5
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: LD_INT 3
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 4
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 4
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: LD_INT 4
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 4
60626: NEG
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 4
60637: NEG
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 3
60649: NEG
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 3
60660: NEG
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 4
60671: NEG
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 5
60682: NEG
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 5
60693: NEG
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 5
60705: NEG
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: ST_TO_ADDR
// end ; end ;
60773: GO 60776
60775: POP
// case btype of b_depot , b_warehouse :
60776: LD_VAR 0 1
60780: PUSH
60781: LD_INT 0
60783: DOUBLE
60784: EQUAL
60785: IFTRUE 60795
60787: LD_INT 1
60789: DOUBLE
60790: EQUAL
60791: IFTRUE 60795
60793: GO 60996
60795: POP
// case nation of nation_american :
60796: LD_VAR 0 5
60800: PUSH
60801: LD_INT 1
60803: DOUBLE
60804: EQUAL
60805: IFTRUE 60809
60807: GO 60865
60809: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60810: LD_ADDR_VAR 0 9
60814: PUSH
60815: LD_VAR 0 11
60819: PUSH
60820: LD_VAR 0 12
60824: PUSH
60825: LD_VAR 0 13
60829: PUSH
60830: LD_VAR 0 14
60834: PUSH
60835: LD_VAR 0 15
60839: PUSH
60840: LD_VAR 0 16
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: PUSH
60853: LD_VAR 0 4
60857: PUSH
60858: LD_INT 1
60860: PLUS
60861: ARRAY
60862: ST_TO_ADDR
60863: GO 60994
60865: LD_INT 2
60867: DOUBLE
60868: EQUAL
60869: IFTRUE 60873
60871: GO 60929
60873: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60874: LD_ADDR_VAR 0 9
60878: PUSH
60879: LD_VAR 0 17
60883: PUSH
60884: LD_VAR 0 18
60888: PUSH
60889: LD_VAR 0 19
60893: PUSH
60894: LD_VAR 0 20
60898: PUSH
60899: LD_VAR 0 21
60903: PUSH
60904: LD_VAR 0 22
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: PUSH
60917: LD_VAR 0 4
60921: PUSH
60922: LD_INT 1
60924: PLUS
60925: ARRAY
60926: ST_TO_ADDR
60927: GO 60994
60929: LD_INT 3
60931: DOUBLE
60932: EQUAL
60933: IFTRUE 60937
60935: GO 60993
60937: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60938: LD_ADDR_VAR 0 9
60942: PUSH
60943: LD_VAR 0 23
60947: PUSH
60948: LD_VAR 0 24
60952: PUSH
60953: LD_VAR 0 25
60957: PUSH
60958: LD_VAR 0 26
60962: PUSH
60963: LD_VAR 0 27
60967: PUSH
60968: LD_VAR 0 28
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: PUSH
60981: LD_VAR 0 4
60985: PUSH
60986: LD_INT 1
60988: PLUS
60989: ARRAY
60990: ST_TO_ADDR
60991: GO 60994
60993: POP
60994: GO 61549
60996: LD_INT 2
60998: DOUBLE
60999: EQUAL
61000: IFTRUE 61010
61002: LD_INT 3
61004: DOUBLE
61005: EQUAL
61006: IFTRUE 61010
61008: GO 61066
61010: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61011: LD_ADDR_VAR 0 9
61015: PUSH
61016: LD_VAR 0 29
61020: PUSH
61021: LD_VAR 0 30
61025: PUSH
61026: LD_VAR 0 31
61030: PUSH
61031: LD_VAR 0 32
61035: PUSH
61036: LD_VAR 0 33
61040: PUSH
61041: LD_VAR 0 34
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: PUSH
61054: LD_VAR 0 4
61058: PUSH
61059: LD_INT 1
61061: PLUS
61062: ARRAY
61063: ST_TO_ADDR
61064: GO 61549
61066: LD_INT 16
61068: DOUBLE
61069: EQUAL
61070: IFTRUE 61128
61072: LD_INT 17
61074: DOUBLE
61075: EQUAL
61076: IFTRUE 61128
61078: LD_INT 18
61080: DOUBLE
61081: EQUAL
61082: IFTRUE 61128
61084: LD_INT 19
61086: DOUBLE
61087: EQUAL
61088: IFTRUE 61128
61090: LD_INT 22
61092: DOUBLE
61093: EQUAL
61094: IFTRUE 61128
61096: LD_INT 20
61098: DOUBLE
61099: EQUAL
61100: IFTRUE 61128
61102: LD_INT 21
61104: DOUBLE
61105: EQUAL
61106: IFTRUE 61128
61108: LD_INT 23
61110: DOUBLE
61111: EQUAL
61112: IFTRUE 61128
61114: LD_INT 24
61116: DOUBLE
61117: EQUAL
61118: IFTRUE 61128
61120: LD_INT 25
61122: DOUBLE
61123: EQUAL
61124: IFTRUE 61128
61126: GO 61184
61128: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61129: LD_ADDR_VAR 0 9
61133: PUSH
61134: LD_VAR 0 35
61138: PUSH
61139: LD_VAR 0 36
61143: PUSH
61144: LD_VAR 0 37
61148: PUSH
61149: LD_VAR 0 38
61153: PUSH
61154: LD_VAR 0 39
61158: PUSH
61159: LD_VAR 0 40
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: PUSH
61172: LD_VAR 0 4
61176: PUSH
61177: LD_INT 1
61179: PLUS
61180: ARRAY
61181: ST_TO_ADDR
61182: GO 61549
61184: LD_INT 6
61186: DOUBLE
61187: EQUAL
61188: IFTRUE 61240
61190: LD_INT 7
61192: DOUBLE
61193: EQUAL
61194: IFTRUE 61240
61196: LD_INT 8
61198: DOUBLE
61199: EQUAL
61200: IFTRUE 61240
61202: LD_INT 13
61204: DOUBLE
61205: EQUAL
61206: IFTRUE 61240
61208: LD_INT 12
61210: DOUBLE
61211: EQUAL
61212: IFTRUE 61240
61214: LD_INT 15
61216: DOUBLE
61217: EQUAL
61218: IFTRUE 61240
61220: LD_INT 11
61222: DOUBLE
61223: EQUAL
61224: IFTRUE 61240
61226: LD_INT 14
61228: DOUBLE
61229: EQUAL
61230: IFTRUE 61240
61232: LD_INT 10
61234: DOUBLE
61235: EQUAL
61236: IFTRUE 61240
61238: GO 61296
61240: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61241: LD_ADDR_VAR 0 9
61245: PUSH
61246: LD_VAR 0 41
61250: PUSH
61251: LD_VAR 0 42
61255: PUSH
61256: LD_VAR 0 43
61260: PUSH
61261: LD_VAR 0 44
61265: PUSH
61266: LD_VAR 0 45
61270: PUSH
61271: LD_VAR 0 46
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: PUSH
61284: LD_VAR 0 4
61288: PUSH
61289: LD_INT 1
61291: PLUS
61292: ARRAY
61293: ST_TO_ADDR
61294: GO 61549
61296: LD_INT 36
61298: DOUBLE
61299: EQUAL
61300: IFTRUE 61304
61302: GO 61360
61304: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61305: LD_ADDR_VAR 0 9
61309: PUSH
61310: LD_VAR 0 47
61314: PUSH
61315: LD_VAR 0 48
61319: PUSH
61320: LD_VAR 0 49
61324: PUSH
61325: LD_VAR 0 50
61329: PUSH
61330: LD_VAR 0 51
61334: PUSH
61335: LD_VAR 0 52
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: PUSH
61348: LD_VAR 0 4
61352: PUSH
61353: LD_INT 1
61355: PLUS
61356: ARRAY
61357: ST_TO_ADDR
61358: GO 61549
61360: LD_INT 4
61362: DOUBLE
61363: EQUAL
61364: IFTRUE 61386
61366: LD_INT 5
61368: DOUBLE
61369: EQUAL
61370: IFTRUE 61386
61372: LD_INT 34
61374: DOUBLE
61375: EQUAL
61376: IFTRUE 61386
61378: LD_INT 37
61380: DOUBLE
61381: EQUAL
61382: IFTRUE 61386
61384: GO 61442
61386: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61387: LD_ADDR_VAR 0 9
61391: PUSH
61392: LD_VAR 0 53
61396: PUSH
61397: LD_VAR 0 54
61401: PUSH
61402: LD_VAR 0 55
61406: PUSH
61407: LD_VAR 0 56
61411: PUSH
61412: LD_VAR 0 57
61416: PUSH
61417: LD_VAR 0 58
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: PUSH
61430: LD_VAR 0 4
61434: PUSH
61435: LD_INT 1
61437: PLUS
61438: ARRAY
61439: ST_TO_ADDR
61440: GO 61549
61442: LD_INT 31
61444: DOUBLE
61445: EQUAL
61446: IFTRUE 61492
61448: LD_INT 32
61450: DOUBLE
61451: EQUAL
61452: IFTRUE 61492
61454: LD_INT 33
61456: DOUBLE
61457: EQUAL
61458: IFTRUE 61492
61460: LD_INT 27
61462: DOUBLE
61463: EQUAL
61464: IFTRUE 61492
61466: LD_INT 26
61468: DOUBLE
61469: EQUAL
61470: IFTRUE 61492
61472: LD_INT 28
61474: DOUBLE
61475: EQUAL
61476: IFTRUE 61492
61478: LD_INT 29
61480: DOUBLE
61481: EQUAL
61482: IFTRUE 61492
61484: LD_INT 30
61486: DOUBLE
61487: EQUAL
61488: IFTRUE 61492
61490: GO 61548
61492: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61493: LD_ADDR_VAR 0 9
61497: PUSH
61498: LD_VAR 0 59
61502: PUSH
61503: LD_VAR 0 60
61507: PUSH
61508: LD_VAR 0 61
61512: PUSH
61513: LD_VAR 0 62
61517: PUSH
61518: LD_VAR 0 63
61522: PUSH
61523: LD_VAR 0 64
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: PUSH
61536: LD_VAR 0 4
61540: PUSH
61541: LD_INT 1
61543: PLUS
61544: ARRAY
61545: ST_TO_ADDR
61546: GO 61549
61548: POP
// temp_list2 = [ ] ;
61549: LD_ADDR_VAR 0 10
61553: PUSH
61554: EMPTY
61555: ST_TO_ADDR
// for i in temp_list do
61556: LD_ADDR_VAR 0 8
61560: PUSH
61561: LD_VAR 0 9
61565: PUSH
61566: FOR_IN
61567: IFFALSE 61619
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61569: LD_ADDR_VAR 0 10
61573: PUSH
61574: LD_VAR 0 10
61578: PUSH
61579: LD_VAR 0 8
61583: PUSH
61584: LD_INT 1
61586: ARRAY
61587: PUSH
61588: LD_VAR 0 2
61592: PLUS
61593: PUSH
61594: LD_VAR 0 8
61598: PUSH
61599: LD_INT 2
61601: ARRAY
61602: PUSH
61603: LD_VAR 0 3
61607: PLUS
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: EMPTY
61614: LIST
61615: ADD
61616: ST_TO_ADDR
61617: GO 61566
61619: POP
61620: POP
// result = temp_list2 ;
61621: LD_ADDR_VAR 0 7
61625: PUSH
61626: LD_VAR 0 10
61630: ST_TO_ADDR
// end ;
61631: LD_VAR 0 7
61635: RET
// export function EnemyInRange ( unit , dist ) ; begin
61636: LD_INT 0
61638: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61639: LD_ADDR_VAR 0 3
61643: PUSH
61644: LD_VAR 0 1
61648: PPUSH
61649: CALL_OW 255
61653: PPUSH
61654: LD_VAR 0 1
61658: PPUSH
61659: CALL_OW 250
61663: PPUSH
61664: LD_VAR 0 1
61668: PPUSH
61669: CALL_OW 251
61673: PPUSH
61674: LD_VAR 0 2
61678: PPUSH
61679: CALL 35038 0 4
61683: PUSH
61684: LD_INT 4
61686: ARRAY
61687: ST_TO_ADDR
// end ;
61688: LD_VAR 0 3
61692: RET
// export function PlayerSeeMe ( unit ) ; begin
61693: LD_INT 0
61695: PPUSH
// result := See ( your_side , unit ) ;
61696: LD_ADDR_VAR 0 2
61700: PUSH
61701: LD_OWVAR 2
61705: PPUSH
61706: LD_VAR 0 1
61710: PPUSH
61711: CALL_OW 292
61715: ST_TO_ADDR
// end ;
61716: LD_VAR 0 2
61720: RET
// export function ReverseDir ( unit ) ; begin
61721: LD_INT 0
61723: PPUSH
// if not unit then
61724: LD_VAR 0 1
61728: NOT
61729: IFFALSE 61733
// exit ;
61731: GO 61756
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61733: LD_ADDR_VAR 0 2
61737: PUSH
61738: LD_VAR 0 1
61742: PPUSH
61743: CALL_OW 254
61747: PUSH
61748: LD_INT 3
61750: PLUS
61751: PUSH
61752: LD_INT 6
61754: MOD
61755: ST_TO_ADDR
// end ;
61756: LD_VAR 0 2
61760: RET
// export function ReverseArray ( array ) ; var i ; begin
61761: LD_INT 0
61763: PPUSH
61764: PPUSH
// if not array then
61765: LD_VAR 0 1
61769: NOT
61770: IFFALSE 61774
// exit ;
61772: GO 61829
// result := [ ] ;
61774: LD_ADDR_VAR 0 2
61778: PUSH
61779: EMPTY
61780: ST_TO_ADDR
// for i := array downto 1 do
61781: LD_ADDR_VAR 0 3
61785: PUSH
61786: DOUBLE
61787: LD_VAR 0 1
61791: INC
61792: ST_TO_ADDR
61793: LD_INT 1
61795: PUSH
61796: FOR_DOWNTO
61797: IFFALSE 61827
// result := Join ( result , array [ i ] ) ;
61799: LD_ADDR_VAR 0 2
61803: PUSH
61804: LD_VAR 0 2
61808: PPUSH
61809: LD_VAR 0 1
61813: PUSH
61814: LD_VAR 0 3
61818: ARRAY
61819: PPUSH
61820: CALL 66473 0 2
61824: ST_TO_ADDR
61825: GO 61796
61827: POP
61828: POP
// end ;
61829: LD_VAR 0 2
61833: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61834: LD_INT 0
61836: PPUSH
61837: PPUSH
61838: PPUSH
61839: PPUSH
61840: PPUSH
61841: PPUSH
// if not unit or not hexes then
61842: LD_VAR 0 1
61846: NOT
61847: PUSH
61848: LD_VAR 0 2
61852: NOT
61853: OR
61854: IFFALSE 61858
// exit ;
61856: GO 61981
// dist := 9999 ;
61858: LD_ADDR_VAR 0 5
61862: PUSH
61863: LD_INT 9999
61865: ST_TO_ADDR
// for i = 1 to hexes do
61866: LD_ADDR_VAR 0 4
61870: PUSH
61871: DOUBLE
61872: LD_INT 1
61874: DEC
61875: ST_TO_ADDR
61876: LD_VAR 0 2
61880: PUSH
61881: FOR_TO
61882: IFFALSE 61969
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61884: LD_ADDR_VAR 0 6
61888: PUSH
61889: LD_VAR 0 1
61893: PPUSH
61894: LD_VAR 0 2
61898: PUSH
61899: LD_VAR 0 4
61903: ARRAY
61904: PUSH
61905: LD_INT 1
61907: ARRAY
61908: PPUSH
61909: LD_VAR 0 2
61913: PUSH
61914: LD_VAR 0 4
61918: ARRAY
61919: PUSH
61920: LD_INT 2
61922: ARRAY
61923: PPUSH
61924: CALL_OW 297
61928: ST_TO_ADDR
// if tdist < dist then
61929: LD_VAR 0 6
61933: PUSH
61934: LD_VAR 0 5
61938: LESS
61939: IFFALSE 61967
// begin hex := hexes [ i ] ;
61941: LD_ADDR_VAR 0 8
61945: PUSH
61946: LD_VAR 0 2
61950: PUSH
61951: LD_VAR 0 4
61955: ARRAY
61956: ST_TO_ADDR
// dist := tdist ;
61957: LD_ADDR_VAR 0 5
61961: PUSH
61962: LD_VAR 0 6
61966: ST_TO_ADDR
// end ; end ;
61967: GO 61881
61969: POP
61970: POP
// result := hex ;
61971: LD_ADDR_VAR 0 3
61975: PUSH
61976: LD_VAR 0 8
61980: ST_TO_ADDR
// end ;
61981: LD_VAR 0 3
61985: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61986: LD_INT 0
61988: PPUSH
61989: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61990: LD_VAR 0 1
61994: NOT
61995: PUSH
61996: LD_VAR 0 1
62000: PUSH
62001: LD_INT 21
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 23
62013: PUSH
62014: LD_INT 2
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PPUSH
62025: CALL_OW 69
62029: IN
62030: NOT
62031: OR
62032: IFFALSE 62036
// exit ;
62034: GO 62083
// for i = 1 to 3 do
62036: LD_ADDR_VAR 0 3
62040: PUSH
62041: DOUBLE
62042: LD_INT 1
62044: DEC
62045: ST_TO_ADDR
62046: LD_INT 3
62048: PUSH
62049: FOR_TO
62050: IFFALSE 62081
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62052: LD_VAR 0 1
62056: PPUSH
62057: CALL_OW 250
62061: PPUSH
62062: LD_VAR 0 1
62066: PPUSH
62067: CALL_OW 251
62071: PPUSH
62072: LD_INT 1
62074: PPUSH
62075: CALL_OW 453
62079: GO 62049
62081: POP
62082: POP
// end ;
62083: LD_VAR 0 2
62087: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62088: LD_INT 0
62090: PPUSH
62091: PPUSH
62092: PPUSH
62093: PPUSH
62094: PPUSH
62095: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62096: LD_VAR 0 1
62100: NOT
62101: PUSH
62102: LD_VAR 0 2
62106: NOT
62107: OR
62108: PUSH
62109: LD_VAR 0 1
62113: PPUSH
62114: CALL_OW 314
62118: OR
62119: IFFALSE 62123
// exit ;
62121: GO 62590
// if GetLives ( i ) < 250 then
62123: LD_VAR 0 4
62127: PPUSH
62128: CALL_OW 256
62132: PUSH
62133: LD_INT 250
62135: LESS
62136: IFFALSE 62149
// begin ComAutodestruct ( i ) ;
62138: LD_VAR 0 4
62142: PPUSH
62143: CALL 61986 0 1
// exit ;
62147: GO 62590
// end ; x := GetX ( enemy_unit ) ;
62149: LD_ADDR_VAR 0 7
62153: PUSH
62154: LD_VAR 0 2
62158: PPUSH
62159: CALL_OW 250
62163: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62164: LD_ADDR_VAR 0 8
62168: PUSH
62169: LD_VAR 0 2
62173: PPUSH
62174: CALL_OW 251
62178: ST_TO_ADDR
// if not x or not y then
62179: LD_VAR 0 7
62183: NOT
62184: PUSH
62185: LD_VAR 0 8
62189: NOT
62190: OR
62191: IFFALSE 62195
// exit ;
62193: GO 62590
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62195: LD_ADDR_VAR 0 6
62199: PUSH
62200: LD_VAR 0 7
62204: PPUSH
62205: LD_INT 0
62207: PPUSH
62208: LD_INT 4
62210: PPUSH
62211: CALL_OW 272
62215: PUSH
62216: LD_VAR 0 8
62220: PPUSH
62221: LD_INT 0
62223: PPUSH
62224: LD_INT 4
62226: PPUSH
62227: CALL_OW 273
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_VAR 0 7
62240: PPUSH
62241: LD_INT 1
62243: PPUSH
62244: LD_INT 4
62246: PPUSH
62247: CALL_OW 272
62251: PUSH
62252: LD_VAR 0 8
62256: PPUSH
62257: LD_INT 1
62259: PPUSH
62260: LD_INT 4
62262: PPUSH
62263: CALL_OW 273
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_VAR 0 7
62276: PPUSH
62277: LD_INT 2
62279: PPUSH
62280: LD_INT 4
62282: PPUSH
62283: CALL_OW 272
62287: PUSH
62288: LD_VAR 0 8
62292: PPUSH
62293: LD_INT 2
62295: PPUSH
62296: LD_INT 4
62298: PPUSH
62299: CALL_OW 273
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_VAR 0 7
62312: PPUSH
62313: LD_INT 3
62315: PPUSH
62316: LD_INT 4
62318: PPUSH
62319: CALL_OW 272
62323: PUSH
62324: LD_VAR 0 8
62328: PPUSH
62329: LD_INT 3
62331: PPUSH
62332: LD_INT 4
62334: PPUSH
62335: CALL_OW 273
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_VAR 0 7
62348: PPUSH
62349: LD_INT 4
62351: PPUSH
62352: LD_INT 4
62354: PPUSH
62355: CALL_OW 272
62359: PUSH
62360: LD_VAR 0 8
62364: PPUSH
62365: LD_INT 4
62367: PPUSH
62368: LD_INT 4
62370: PPUSH
62371: CALL_OW 273
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_VAR 0 7
62384: PPUSH
62385: LD_INT 5
62387: PPUSH
62388: LD_INT 4
62390: PPUSH
62391: CALL_OW 272
62395: PUSH
62396: LD_VAR 0 8
62400: PPUSH
62401: LD_INT 5
62403: PPUSH
62404: LD_INT 4
62406: PPUSH
62407: CALL_OW 273
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: ST_TO_ADDR
// for i = tmp downto 1 do
62424: LD_ADDR_VAR 0 4
62428: PUSH
62429: DOUBLE
62430: LD_VAR 0 6
62434: INC
62435: ST_TO_ADDR
62436: LD_INT 1
62438: PUSH
62439: FOR_DOWNTO
62440: IFFALSE 62541
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62442: LD_VAR 0 6
62446: PUSH
62447: LD_VAR 0 4
62451: ARRAY
62452: PUSH
62453: LD_INT 1
62455: ARRAY
62456: PPUSH
62457: LD_VAR 0 6
62461: PUSH
62462: LD_VAR 0 4
62466: ARRAY
62467: PUSH
62468: LD_INT 2
62470: ARRAY
62471: PPUSH
62472: CALL_OW 488
62476: NOT
62477: PUSH
62478: LD_VAR 0 6
62482: PUSH
62483: LD_VAR 0 4
62487: ARRAY
62488: PUSH
62489: LD_INT 1
62491: ARRAY
62492: PPUSH
62493: LD_VAR 0 6
62497: PUSH
62498: LD_VAR 0 4
62502: ARRAY
62503: PUSH
62504: LD_INT 2
62506: ARRAY
62507: PPUSH
62508: CALL_OW 428
62512: PUSH
62513: LD_INT 0
62515: NONEQUAL
62516: OR
62517: IFFALSE 62539
// tmp := Delete ( tmp , i ) ;
62519: LD_ADDR_VAR 0 6
62523: PUSH
62524: LD_VAR 0 6
62528: PPUSH
62529: LD_VAR 0 4
62533: PPUSH
62534: CALL_OW 3
62538: ST_TO_ADDR
62539: GO 62439
62541: POP
62542: POP
// j := GetClosestHex ( unit , tmp ) ;
62543: LD_ADDR_VAR 0 5
62547: PUSH
62548: LD_VAR 0 1
62552: PPUSH
62553: LD_VAR 0 6
62557: PPUSH
62558: CALL 61834 0 2
62562: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62563: LD_VAR 0 1
62567: PPUSH
62568: LD_VAR 0 5
62572: PUSH
62573: LD_INT 1
62575: ARRAY
62576: PPUSH
62577: LD_VAR 0 5
62581: PUSH
62582: LD_INT 2
62584: ARRAY
62585: PPUSH
62586: CALL_OW 111
// end ;
62590: LD_VAR 0 3
62594: RET
// export function PrepareApemanSoldier ( ) ; begin
62595: LD_INT 0
62597: PPUSH
// uc_nation := 0 ;
62598: LD_ADDR_OWVAR 21
62602: PUSH
62603: LD_INT 0
62605: ST_TO_ADDR
// hc_sex := sex_male ;
62606: LD_ADDR_OWVAR 27
62610: PUSH
62611: LD_INT 1
62613: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62614: LD_ADDR_OWVAR 28
62618: PUSH
62619: LD_INT 15
62621: ST_TO_ADDR
// hc_gallery :=  ;
62622: LD_ADDR_OWVAR 33
62626: PUSH
62627: LD_STRING 
62629: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62630: LD_ADDR_OWVAR 31
62634: PUSH
62635: LD_INT 0
62637: PPUSH
62638: LD_INT 3
62640: PPUSH
62641: CALL_OW 12
62645: PUSH
62646: LD_INT 0
62648: PPUSH
62649: LD_INT 3
62651: PPUSH
62652: CALL_OW 12
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: ST_TO_ADDR
// end ;
62669: LD_VAR 0 1
62673: RET
// export function PrepareApemanEngineer ( ) ; begin
62674: LD_INT 0
62676: PPUSH
// uc_nation := 0 ;
62677: LD_ADDR_OWVAR 21
62681: PUSH
62682: LD_INT 0
62684: ST_TO_ADDR
// hc_sex := sex_male ;
62685: LD_ADDR_OWVAR 27
62689: PUSH
62690: LD_INT 1
62692: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62693: LD_ADDR_OWVAR 28
62697: PUSH
62698: LD_INT 16
62700: ST_TO_ADDR
// hc_gallery :=  ;
62701: LD_ADDR_OWVAR 33
62705: PUSH
62706: LD_STRING 
62708: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62709: LD_ADDR_OWVAR 31
62713: PUSH
62714: LD_INT 0
62716: PPUSH
62717: LD_INT 3
62719: PPUSH
62720: CALL_OW 12
62724: PUSH
62725: LD_INT 0
62727: PPUSH
62728: LD_INT 3
62730: PPUSH
62731: CALL_OW 12
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: ST_TO_ADDR
// end ;
62748: LD_VAR 0 1
62752: RET
// export function PrepareApeman ( agressivity ) ; begin
62753: LD_INT 0
62755: PPUSH
// uc_side := 0 ;
62756: LD_ADDR_OWVAR 20
62760: PUSH
62761: LD_INT 0
62763: ST_TO_ADDR
// uc_nation := 0 ;
62764: LD_ADDR_OWVAR 21
62768: PUSH
62769: LD_INT 0
62771: ST_TO_ADDR
// hc_sex := sex_male ;
62772: LD_ADDR_OWVAR 27
62776: PUSH
62777: LD_INT 1
62779: ST_TO_ADDR
// hc_class := class_apeman ;
62780: LD_ADDR_OWVAR 28
62784: PUSH
62785: LD_INT 12
62787: ST_TO_ADDR
// hc_gallery :=  ;
62788: LD_ADDR_OWVAR 33
62792: PUSH
62793: LD_STRING 
62795: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62796: LD_ADDR_OWVAR 35
62800: PUSH
62801: LD_VAR 0 1
62805: NEG
62806: PPUSH
62807: LD_VAR 0 1
62811: PPUSH
62812: CALL_OW 12
62816: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62817: LD_ADDR_OWVAR 31
62821: PUSH
62822: LD_INT 0
62824: PPUSH
62825: LD_INT 3
62827: PPUSH
62828: CALL_OW 12
62832: PUSH
62833: LD_INT 0
62835: PPUSH
62836: LD_INT 3
62838: PPUSH
62839: CALL_OW 12
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: ST_TO_ADDR
// end ;
62856: LD_VAR 0 2
62860: RET
// export function PrepareTiger ( agressivity ) ; begin
62861: LD_INT 0
62863: PPUSH
// uc_side := 0 ;
62864: LD_ADDR_OWVAR 20
62868: PUSH
62869: LD_INT 0
62871: ST_TO_ADDR
// uc_nation := 0 ;
62872: LD_ADDR_OWVAR 21
62876: PUSH
62877: LD_INT 0
62879: ST_TO_ADDR
// hc_class := class_tiger ;
62880: LD_ADDR_OWVAR 28
62884: PUSH
62885: LD_INT 14
62887: ST_TO_ADDR
// hc_gallery :=  ;
62888: LD_ADDR_OWVAR 33
62892: PUSH
62893: LD_STRING 
62895: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62896: LD_ADDR_OWVAR 35
62900: PUSH
62901: LD_VAR 0 1
62905: NEG
62906: PPUSH
62907: LD_VAR 0 1
62911: PPUSH
62912: CALL_OW 12
62916: ST_TO_ADDR
// end ;
62917: LD_VAR 0 2
62921: RET
// export function PrepareEnchidna ( ) ; begin
62922: LD_INT 0
62924: PPUSH
// uc_side := 0 ;
62925: LD_ADDR_OWVAR 20
62929: PUSH
62930: LD_INT 0
62932: ST_TO_ADDR
// uc_nation := 0 ;
62933: LD_ADDR_OWVAR 21
62937: PUSH
62938: LD_INT 0
62940: ST_TO_ADDR
// hc_class := class_baggie ;
62941: LD_ADDR_OWVAR 28
62945: PUSH
62946: LD_INT 13
62948: ST_TO_ADDR
// hc_gallery :=  ;
62949: LD_ADDR_OWVAR 33
62953: PUSH
62954: LD_STRING 
62956: ST_TO_ADDR
// end ;
62957: LD_VAR 0 1
62961: RET
// export function PrepareFrog ( ) ; begin
62962: LD_INT 0
62964: PPUSH
// uc_side := 0 ;
62965: LD_ADDR_OWVAR 20
62969: PUSH
62970: LD_INT 0
62972: ST_TO_ADDR
// uc_nation := 0 ;
62973: LD_ADDR_OWVAR 21
62977: PUSH
62978: LD_INT 0
62980: ST_TO_ADDR
// hc_class := class_frog ;
62981: LD_ADDR_OWVAR 28
62985: PUSH
62986: LD_INT 19
62988: ST_TO_ADDR
// hc_gallery :=  ;
62989: LD_ADDR_OWVAR 33
62993: PUSH
62994: LD_STRING 
62996: ST_TO_ADDR
// end ;
62997: LD_VAR 0 1
63001: RET
// export function PrepareFish ( ) ; begin
63002: LD_INT 0
63004: PPUSH
// uc_side := 0 ;
63005: LD_ADDR_OWVAR 20
63009: PUSH
63010: LD_INT 0
63012: ST_TO_ADDR
// uc_nation := 0 ;
63013: LD_ADDR_OWVAR 21
63017: PUSH
63018: LD_INT 0
63020: ST_TO_ADDR
// hc_class := class_fish ;
63021: LD_ADDR_OWVAR 28
63025: PUSH
63026: LD_INT 20
63028: ST_TO_ADDR
// hc_gallery :=  ;
63029: LD_ADDR_OWVAR 33
63033: PUSH
63034: LD_STRING 
63036: ST_TO_ADDR
// end ;
63037: LD_VAR 0 1
63041: RET
// export function PrepareBird ( ) ; begin
63042: LD_INT 0
63044: PPUSH
// uc_side := 0 ;
63045: LD_ADDR_OWVAR 20
63049: PUSH
63050: LD_INT 0
63052: ST_TO_ADDR
// uc_nation := 0 ;
63053: LD_ADDR_OWVAR 21
63057: PUSH
63058: LD_INT 0
63060: ST_TO_ADDR
// hc_class := class_phororhacos ;
63061: LD_ADDR_OWVAR 28
63065: PUSH
63066: LD_INT 18
63068: ST_TO_ADDR
// hc_gallery :=  ;
63069: LD_ADDR_OWVAR 33
63073: PUSH
63074: LD_STRING 
63076: ST_TO_ADDR
// end ;
63077: LD_VAR 0 1
63081: RET
// export function PrepareHorse ( ) ; begin
63082: LD_INT 0
63084: PPUSH
// uc_side := 0 ;
63085: LD_ADDR_OWVAR 20
63089: PUSH
63090: LD_INT 0
63092: ST_TO_ADDR
// uc_nation := 0 ;
63093: LD_ADDR_OWVAR 21
63097: PUSH
63098: LD_INT 0
63100: ST_TO_ADDR
// hc_class := class_horse ;
63101: LD_ADDR_OWVAR 28
63105: PUSH
63106: LD_INT 21
63108: ST_TO_ADDR
// hc_gallery :=  ;
63109: LD_ADDR_OWVAR 33
63113: PUSH
63114: LD_STRING 
63116: ST_TO_ADDR
// end ;
63117: LD_VAR 0 1
63121: RET
// export function PrepareMastodont ( ) ; begin
63122: LD_INT 0
63124: PPUSH
// uc_side := 0 ;
63125: LD_ADDR_OWVAR 20
63129: PUSH
63130: LD_INT 0
63132: ST_TO_ADDR
// uc_nation := 0 ;
63133: LD_ADDR_OWVAR 21
63137: PUSH
63138: LD_INT 0
63140: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63141: LD_ADDR_OWVAR 37
63145: PUSH
63146: LD_INT 31
63148: ST_TO_ADDR
// vc_control := control_rider ;
63149: LD_ADDR_OWVAR 38
63153: PUSH
63154: LD_INT 4
63156: ST_TO_ADDR
// end ;
63157: LD_VAR 0 1
63161: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63162: LD_INT 0
63164: PPUSH
63165: PPUSH
63166: PPUSH
// uc_side = 0 ;
63167: LD_ADDR_OWVAR 20
63171: PUSH
63172: LD_INT 0
63174: ST_TO_ADDR
// uc_nation = 0 ;
63175: LD_ADDR_OWVAR 21
63179: PUSH
63180: LD_INT 0
63182: ST_TO_ADDR
// InitHc_All ( ) ;
63183: CALL_OW 584
// InitVc ;
63187: CALL_OW 20
// if mastodonts then
63191: LD_VAR 0 6
63195: IFFALSE 63262
// for i = 1 to mastodonts do
63197: LD_ADDR_VAR 0 11
63201: PUSH
63202: DOUBLE
63203: LD_INT 1
63205: DEC
63206: ST_TO_ADDR
63207: LD_VAR 0 6
63211: PUSH
63212: FOR_TO
63213: IFFALSE 63260
// begin vc_chassis := 31 ;
63215: LD_ADDR_OWVAR 37
63219: PUSH
63220: LD_INT 31
63222: ST_TO_ADDR
// vc_control := control_rider ;
63223: LD_ADDR_OWVAR 38
63227: PUSH
63228: LD_INT 4
63230: ST_TO_ADDR
// animal := CreateVehicle ;
63231: LD_ADDR_VAR 0 12
63235: PUSH
63236: CALL_OW 45
63240: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63241: LD_VAR 0 12
63245: PPUSH
63246: LD_VAR 0 8
63250: PPUSH
63251: LD_INT 0
63253: PPUSH
63254: CALL 65390 0 3
// end ;
63258: GO 63212
63260: POP
63261: POP
// if horses then
63262: LD_VAR 0 5
63266: IFFALSE 63333
// for i = 1 to horses do
63268: LD_ADDR_VAR 0 11
63272: PUSH
63273: DOUBLE
63274: LD_INT 1
63276: DEC
63277: ST_TO_ADDR
63278: LD_VAR 0 5
63282: PUSH
63283: FOR_TO
63284: IFFALSE 63331
// begin hc_class := 21 ;
63286: LD_ADDR_OWVAR 28
63290: PUSH
63291: LD_INT 21
63293: ST_TO_ADDR
// hc_gallery :=  ;
63294: LD_ADDR_OWVAR 33
63298: PUSH
63299: LD_STRING 
63301: ST_TO_ADDR
// animal := CreateHuman ;
63302: LD_ADDR_VAR 0 12
63306: PUSH
63307: CALL_OW 44
63311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63312: LD_VAR 0 12
63316: PPUSH
63317: LD_VAR 0 8
63321: PPUSH
63322: LD_INT 0
63324: PPUSH
63325: CALL 65390 0 3
// end ;
63329: GO 63283
63331: POP
63332: POP
// if birds then
63333: LD_VAR 0 1
63337: IFFALSE 63404
// for i = 1 to birds do
63339: LD_ADDR_VAR 0 11
63343: PUSH
63344: DOUBLE
63345: LD_INT 1
63347: DEC
63348: ST_TO_ADDR
63349: LD_VAR 0 1
63353: PUSH
63354: FOR_TO
63355: IFFALSE 63402
// begin hc_class = 18 ;
63357: LD_ADDR_OWVAR 28
63361: PUSH
63362: LD_INT 18
63364: ST_TO_ADDR
// hc_gallery =  ;
63365: LD_ADDR_OWVAR 33
63369: PUSH
63370: LD_STRING 
63372: ST_TO_ADDR
// animal := CreateHuman ;
63373: LD_ADDR_VAR 0 12
63377: PUSH
63378: CALL_OW 44
63382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63383: LD_VAR 0 12
63387: PPUSH
63388: LD_VAR 0 8
63392: PPUSH
63393: LD_INT 0
63395: PPUSH
63396: CALL 65390 0 3
// end ;
63400: GO 63354
63402: POP
63403: POP
// if tigers then
63404: LD_VAR 0 2
63408: IFFALSE 63492
// for i = 1 to tigers do
63410: LD_ADDR_VAR 0 11
63414: PUSH
63415: DOUBLE
63416: LD_INT 1
63418: DEC
63419: ST_TO_ADDR
63420: LD_VAR 0 2
63424: PUSH
63425: FOR_TO
63426: IFFALSE 63490
// begin hc_class = class_tiger ;
63428: LD_ADDR_OWVAR 28
63432: PUSH
63433: LD_INT 14
63435: ST_TO_ADDR
// hc_gallery =  ;
63436: LD_ADDR_OWVAR 33
63440: PUSH
63441: LD_STRING 
63443: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63444: LD_ADDR_OWVAR 35
63448: PUSH
63449: LD_INT 7
63451: NEG
63452: PPUSH
63453: LD_INT 7
63455: PPUSH
63456: CALL_OW 12
63460: ST_TO_ADDR
// animal := CreateHuman ;
63461: LD_ADDR_VAR 0 12
63465: PUSH
63466: CALL_OW 44
63470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63471: LD_VAR 0 12
63475: PPUSH
63476: LD_VAR 0 8
63480: PPUSH
63481: LD_INT 0
63483: PPUSH
63484: CALL 65390 0 3
// end ;
63488: GO 63425
63490: POP
63491: POP
// if apemans then
63492: LD_VAR 0 3
63496: IFFALSE 63619
// for i = 1 to apemans do
63498: LD_ADDR_VAR 0 11
63502: PUSH
63503: DOUBLE
63504: LD_INT 1
63506: DEC
63507: ST_TO_ADDR
63508: LD_VAR 0 3
63512: PUSH
63513: FOR_TO
63514: IFFALSE 63617
// begin hc_class = class_apeman ;
63516: LD_ADDR_OWVAR 28
63520: PUSH
63521: LD_INT 12
63523: ST_TO_ADDR
// hc_gallery =  ;
63524: LD_ADDR_OWVAR 33
63528: PUSH
63529: LD_STRING 
63531: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63532: LD_ADDR_OWVAR 35
63536: PUSH
63537: LD_INT 2
63539: NEG
63540: PPUSH
63541: LD_INT 2
63543: PPUSH
63544: CALL_OW 12
63548: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63549: LD_ADDR_OWVAR 31
63553: PUSH
63554: LD_INT 1
63556: PPUSH
63557: LD_INT 3
63559: PPUSH
63560: CALL_OW 12
63564: PUSH
63565: LD_INT 1
63567: PPUSH
63568: LD_INT 3
63570: PPUSH
63571: CALL_OW 12
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: ST_TO_ADDR
// animal := CreateHuman ;
63588: LD_ADDR_VAR 0 12
63592: PUSH
63593: CALL_OW 44
63597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63598: LD_VAR 0 12
63602: PPUSH
63603: LD_VAR 0 8
63607: PPUSH
63608: LD_INT 0
63610: PPUSH
63611: CALL 65390 0 3
// end ;
63615: GO 63513
63617: POP
63618: POP
// if enchidnas then
63619: LD_VAR 0 4
63623: IFFALSE 63690
// for i = 1 to enchidnas do
63625: LD_ADDR_VAR 0 11
63629: PUSH
63630: DOUBLE
63631: LD_INT 1
63633: DEC
63634: ST_TO_ADDR
63635: LD_VAR 0 4
63639: PUSH
63640: FOR_TO
63641: IFFALSE 63688
// begin hc_class = 13 ;
63643: LD_ADDR_OWVAR 28
63647: PUSH
63648: LD_INT 13
63650: ST_TO_ADDR
// hc_gallery =  ;
63651: LD_ADDR_OWVAR 33
63655: PUSH
63656: LD_STRING 
63658: ST_TO_ADDR
// animal := CreateHuman ;
63659: LD_ADDR_VAR 0 12
63663: PUSH
63664: CALL_OW 44
63668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63669: LD_VAR 0 12
63673: PPUSH
63674: LD_VAR 0 8
63678: PPUSH
63679: LD_INT 0
63681: PPUSH
63682: CALL 65390 0 3
// end ;
63686: GO 63640
63688: POP
63689: POP
// if fishes then
63690: LD_VAR 0 7
63694: IFFALSE 63761
// for i = 1 to fishes do
63696: LD_ADDR_VAR 0 11
63700: PUSH
63701: DOUBLE
63702: LD_INT 1
63704: DEC
63705: ST_TO_ADDR
63706: LD_VAR 0 7
63710: PUSH
63711: FOR_TO
63712: IFFALSE 63759
// begin hc_class = 20 ;
63714: LD_ADDR_OWVAR 28
63718: PUSH
63719: LD_INT 20
63721: ST_TO_ADDR
// hc_gallery =  ;
63722: LD_ADDR_OWVAR 33
63726: PUSH
63727: LD_STRING 
63729: ST_TO_ADDR
// animal := CreateHuman ;
63730: LD_ADDR_VAR 0 12
63734: PUSH
63735: CALL_OW 44
63739: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63740: LD_VAR 0 12
63744: PPUSH
63745: LD_VAR 0 9
63749: PPUSH
63750: LD_INT 0
63752: PPUSH
63753: CALL 65390 0 3
// end ;
63757: GO 63711
63759: POP
63760: POP
// end ;
63761: LD_VAR 0 10
63765: RET
// export function WantHeal ( sci , unit ) ; begin
63766: LD_INT 0
63768: PPUSH
// if GetTaskList ( sci ) > 0 then
63769: LD_VAR 0 1
63773: PPUSH
63774: CALL_OW 437
63778: PUSH
63779: LD_INT 0
63781: GREATER
63782: IFFALSE 63852
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63784: LD_VAR 0 1
63788: PPUSH
63789: CALL_OW 437
63793: PUSH
63794: LD_INT 1
63796: ARRAY
63797: PUSH
63798: LD_INT 1
63800: ARRAY
63801: PUSH
63802: LD_STRING l
63804: EQUAL
63805: PUSH
63806: LD_VAR 0 1
63810: PPUSH
63811: CALL_OW 437
63815: PUSH
63816: LD_INT 1
63818: ARRAY
63819: PUSH
63820: LD_INT 4
63822: ARRAY
63823: PUSH
63824: LD_VAR 0 2
63828: EQUAL
63829: AND
63830: IFFALSE 63842
// result := true else
63832: LD_ADDR_VAR 0 3
63836: PUSH
63837: LD_INT 1
63839: ST_TO_ADDR
63840: GO 63850
// result := false ;
63842: LD_ADDR_VAR 0 3
63846: PUSH
63847: LD_INT 0
63849: ST_TO_ADDR
// end else
63850: GO 63860
// result := false ;
63852: LD_ADDR_VAR 0 3
63856: PUSH
63857: LD_INT 0
63859: ST_TO_ADDR
// end ;
63860: LD_VAR 0 3
63864: RET
// export function HealTarget ( sci ) ; begin
63865: LD_INT 0
63867: PPUSH
// if not sci then
63868: LD_VAR 0 1
63872: NOT
63873: IFFALSE 63877
// exit ;
63875: GO 63942
// result := 0 ;
63877: LD_ADDR_VAR 0 2
63881: PUSH
63882: LD_INT 0
63884: ST_TO_ADDR
// if GetTaskList ( sci ) then
63885: LD_VAR 0 1
63889: PPUSH
63890: CALL_OW 437
63894: IFFALSE 63942
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63896: LD_VAR 0 1
63900: PPUSH
63901: CALL_OW 437
63905: PUSH
63906: LD_INT 1
63908: ARRAY
63909: PUSH
63910: LD_INT 1
63912: ARRAY
63913: PUSH
63914: LD_STRING l
63916: EQUAL
63917: IFFALSE 63942
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63919: LD_ADDR_VAR 0 2
63923: PUSH
63924: LD_VAR 0 1
63928: PPUSH
63929: CALL_OW 437
63933: PUSH
63934: LD_INT 1
63936: ARRAY
63937: PUSH
63938: LD_INT 4
63940: ARRAY
63941: ST_TO_ADDR
// end ;
63942: LD_VAR 0 2
63946: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63947: LD_INT 0
63949: PPUSH
63950: PPUSH
63951: PPUSH
63952: PPUSH
// if not base_units then
63953: LD_VAR 0 1
63957: NOT
63958: IFFALSE 63962
// exit ;
63960: GO 64049
// result := false ;
63962: LD_ADDR_VAR 0 2
63966: PUSH
63967: LD_INT 0
63969: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63970: LD_ADDR_VAR 0 5
63974: PUSH
63975: LD_VAR 0 1
63979: PPUSH
63980: LD_INT 21
63982: PUSH
63983: LD_INT 3
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PPUSH
63990: CALL_OW 72
63994: ST_TO_ADDR
// if not tmp then
63995: LD_VAR 0 5
63999: NOT
64000: IFFALSE 64004
// exit ;
64002: GO 64049
// for i in tmp do
64004: LD_ADDR_VAR 0 3
64008: PUSH
64009: LD_VAR 0 5
64013: PUSH
64014: FOR_IN
64015: IFFALSE 64047
// begin result := EnemyInRange ( i , 22 ) ;
64017: LD_ADDR_VAR 0 2
64021: PUSH
64022: LD_VAR 0 3
64026: PPUSH
64027: LD_INT 22
64029: PPUSH
64030: CALL 61636 0 2
64034: ST_TO_ADDR
// if result then
64035: LD_VAR 0 2
64039: IFFALSE 64045
// exit ;
64041: POP
64042: POP
64043: GO 64049
// end ;
64045: GO 64014
64047: POP
64048: POP
// end ;
64049: LD_VAR 0 2
64053: RET
// export function FilterByTag ( units , tag ) ; begin
64054: LD_INT 0
64056: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64057: LD_ADDR_VAR 0 3
64061: PUSH
64062: LD_VAR 0 1
64066: PPUSH
64067: LD_INT 120
64069: PUSH
64070: LD_VAR 0 2
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PPUSH
64079: CALL_OW 72
64083: ST_TO_ADDR
// end ;
64084: LD_VAR 0 3
64088: RET
// export function IsDriver ( un ) ; begin
64089: LD_INT 0
64091: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64092: LD_ADDR_VAR 0 2
64096: PUSH
64097: LD_VAR 0 1
64101: PUSH
64102: LD_INT 55
64104: PUSH
64105: EMPTY
64106: LIST
64107: PPUSH
64108: CALL_OW 69
64112: IN
64113: ST_TO_ADDR
// end ;
64114: LD_VAR 0 2
64118: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64119: LD_INT 0
64121: PPUSH
64122: PPUSH
// list := [ ] ;
64123: LD_ADDR_VAR 0 5
64127: PUSH
64128: EMPTY
64129: ST_TO_ADDR
// case d of 0 :
64130: LD_VAR 0 3
64134: PUSH
64135: LD_INT 0
64137: DOUBLE
64138: EQUAL
64139: IFTRUE 64143
64141: GO 64276
64143: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64144: LD_ADDR_VAR 0 5
64148: PUSH
64149: LD_VAR 0 1
64153: PUSH
64154: LD_INT 4
64156: MINUS
64157: PUSH
64158: LD_VAR 0 2
64162: PUSH
64163: LD_INT 4
64165: MINUS
64166: PUSH
64167: LD_INT 2
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: LIST
64174: PUSH
64175: LD_VAR 0 1
64179: PUSH
64180: LD_INT 3
64182: MINUS
64183: PUSH
64184: LD_VAR 0 2
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: LIST
64196: PUSH
64197: LD_VAR 0 1
64201: PUSH
64202: LD_INT 4
64204: PLUS
64205: PUSH
64206: LD_VAR 0 2
64210: PUSH
64211: LD_INT 4
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: LIST
64218: PUSH
64219: LD_VAR 0 1
64223: PUSH
64224: LD_INT 3
64226: PLUS
64227: PUSH
64228: LD_VAR 0 2
64232: PUSH
64233: LD_INT 3
64235: PLUS
64236: PUSH
64237: LD_INT 5
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: LIST
64244: PUSH
64245: LD_VAR 0 1
64249: PUSH
64250: LD_VAR 0 2
64254: PUSH
64255: LD_INT 4
64257: PLUS
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: LIST
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: ST_TO_ADDR
// end ; 1 :
64274: GO 64974
64276: LD_INT 1
64278: DOUBLE
64279: EQUAL
64280: IFTRUE 64284
64282: GO 64417
64284: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64285: LD_ADDR_VAR 0 5
64289: PUSH
64290: LD_VAR 0 1
64294: PUSH
64295: LD_VAR 0 2
64299: PUSH
64300: LD_INT 4
64302: MINUS
64303: PUSH
64304: LD_INT 3
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: LIST
64311: PUSH
64312: LD_VAR 0 1
64316: PUSH
64317: LD_INT 3
64319: MINUS
64320: PUSH
64321: LD_VAR 0 2
64325: PUSH
64326: LD_INT 3
64328: MINUS
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: LIST
64337: PUSH
64338: LD_VAR 0 1
64342: PUSH
64343: LD_INT 4
64345: MINUS
64346: PUSH
64347: LD_VAR 0 2
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: LIST
64359: PUSH
64360: LD_VAR 0 1
64364: PUSH
64365: LD_VAR 0 2
64369: PUSH
64370: LD_INT 3
64372: PLUS
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: LIST
64381: PUSH
64382: LD_VAR 0 1
64386: PUSH
64387: LD_INT 4
64389: PLUS
64390: PUSH
64391: LD_VAR 0 2
64395: PUSH
64396: LD_INT 4
64398: PLUS
64399: PUSH
64400: LD_INT 5
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: ST_TO_ADDR
// end ; 2 :
64415: GO 64974
64417: LD_INT 2
64419: DOUBLE
64420: EQUAL
64421: IFTRUE 64425
64423: GO 64554
64425: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64426: LD_ADDR_VAR 0 5
64430: PUSH
64431: LD_VAR 0 1
64435: PUSH
64436: LD_VAR 0 2
64440: PUSH
64441: LD_INT 3
64443: MINUS
64444: PUSH
64445: LD_INT 3
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: LIST
64452: PUSH
64453: LD_VAR 0 1
64457: PUSH
64458: LD_INT 4
64460: PLUS
64461: PUSH
64462: LD_VAR 0 2
64466: PUSH
64467: LD_INT 4
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: PUSH
64475: LD_VAR 0 1
64479: PUSH
64480: LD_VAR 0 2
64484: PUSH
64485: LD_INT 4
64487: PLUS
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: LIST
64496: PUSH
64497: LD_VAR 0 1
64501: PUSH
64502: LD_INT 3
64504: MINUS
64505: PUSH
64506: LD_VAR 0 2
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: LIST
64518: PUSH
64519: LD_VAR 0 1
64523: PUSH
64524: LD_INT 4
64526: MINUS
64527: PUSH
64528: LD_VAR 0 2
64532: PUSH
64533: LD_INT 4
64535: MINUS
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: LIST
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: ST_TO_ADDR
// end ; 3 :
64552: GO 64974
64554: LD_INT 3
64556: DOUBLE
64557: EQUAL
64558: IFTRUE 64562
64560: GO 64695
64562: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64563: LD_ADDR_VAR 0 5
64567: PUSH
64568: LD_VAR 0 1
64572: PUSH
64573: LD_INT 3
64575: PLUS
64576: PUSH
64577: LD_VAR 0 2
64581: PUSH
64582: LD_INT 4
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: LIST
64589: PUSH
64590: LD_VAR 0 1
64594: PUSH
64595: LD_INT 4
64597: PLUS
64598: PUSH
64599: LD_VAR 0 2
64603: PUSH
64604: LD_INT 4
64606: PLUS
64607: PUSH
64608: LD_INT 5
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: LIST
64615: PUSH
64616: LD_VAR 0 1
64620: PUSH
64621: LD_INT 4
64623: MINUS
64624: PUSH
64625: LD_VAR 0 2
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: LIST
64637: PUSH
64638: LD_VAR 0 1
64642: PUSH
64643: LD_VAR 0 2
64647: PUSH
64648: LD_INT 4
64650: MINUS
64651: PUSH
64652: LD_INT 3
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: PUSH
64660: LD_VAR 0 1
64664: PUSH
64665: LD_INT 3
64667: MINUS
64668: PUSH
64669: LD_VAR 0 2
64673: PUSH
64674: LD_INT 3
64676: MINUS
64677: PUSH
64678: LD_INT 2
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: ST_TO_ADDR
// end ; 4 :
64693: GO 64974
64695: LD_INT 4
64697: DOUBLE
64698: EQUAL
64699: IFTRUE 64703
64701: GO 64836
64703: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64704: LD_ADDR_VAR 0 5
64708: PUSH
64709: LD_VAR 0 1
64713: PUSH
64714: LD_VAR 0 2
64718: PUSH
64719: LD_INT 4
64721: PLUS
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: LIST
64730: PUSH
64731: LD_VAR 0 1
64735: PUSH
64736: LD_INT 3
64738: PLUS
64739: PUSH
64740: LD_VAR 0 2
64744: PUSH
64745: LD_INT 3
64747: PLUS
64748: PUSH
64749: LD_INT 5
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: PUSH
64757: LD_VAR 0 1
64761: PUSH
64762: LD_INT 4
64764: PLUS
64765: PUSH
64766: LD_VAR 0 2
64770: PUSH
64771: LD_INT 4
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: LIST
64778: PUSH
64779: LD_VAR 0 1
64783: PUSH
64784: LD_VAR 0 2
64788: PUSH
64789: LD_INT 3
64791: MINUS
64792: PUSH
64793: LD_INT 3
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: PUSH
64801: LD_VAR 0 1
64805: PUSH
64806: LD_INT 4
64808: MINUS
64809: PUSH
64810: LD_VAR 0 2
64814: PUSH
64815: LD_INT 4
64817: MINUS
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: ST_TO_ADDR
// end ; 5 :
64834: GO 64974
64836: LD_INT 5
64838: DOUBLE
64839: EQUAL
64840: IFTRUE 64844
64842: GO 64973
64844: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64845: LD_ADDR_VAR 0 5
64849: PUSH
64850: LD_VAR 0 1
64854: PUSH
64855: LD_INT 4
64857: MINUS
64858: PUSH
64859: LD_VAR 0 2
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: LIST
64871: PUSH
64872: LD_VAR 0 1
64876: PUSH
64877: LD_VAR 0 2
64881: PUSH
64882: LD_INT 4
64884: MINUS
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: LIST
64893: PUSH
64894: LD_VAR 0 1
64898: PUSH
64899: LD_INT 4
64901: PLUS
64902: PUSH
64903: LD_VAR 0 2
64907: PUSH
64908: LD_INT 4
64910: PLUS
64911: PUSH
64912: LD_INT 5
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: LIST
64919: PUSH
64920: LD_VAR 0 1
64924: PUSH
64925: LD_INT 3
64927: PLUS
64928: PUSH
64929: LD_VAR 0 2
64933: PUSH
64934: LD_INT 4
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: LIST
64941: PUSH
64942: LD_VAR 0 1
64946: PUSH
64947: LD_VAR 0 2
64951: PUSH
64952: LD_INT 3
64954: PLUS
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: LIST
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: ST_TO_ADDR
// end ; end ;
64971: GO 64974
64973: POP
// result := list ;
64974: LD_ADDR_VAR 0 4
64978: PUSH
64979: LD_VAR 0 5
64983: ST_TO_ADDR
// end ;
64984: LD_VAR 0 4
64988: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64989: LD_INT 0
64991: PPUSH
64992: PPUSH
64993: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64994: LD_VAR 0 1
64998: NOT
64999: PUSH
65000: LD_VAR 0 2
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 2
65010: PUSH
65011: LD_INT 3
65013: PUSH
65014: LD_INT 4
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: IN
65023: NOT
65024: OR
65025: IFFALSE 65029
// exit ;
65027: GO 65112
// tmp := [ ] ;
65029: LD_ADDR_VAR 0 5
65033: PUSH
65034: EMPTY
65035: ST_TO_ADDR
// for i in units do
65036: LD_ADDR_VAR 0 4
65040: PUSH
65041: LD_VAR 0 1
65045: PUSH
65046: FOR_IN
65047: IFFALSE 65081
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65049: LD_ADDR_VAR 0 5
65053: PUSH
65054: LD_VAR 0 5
65058: PPUSH
65059: LD_VAR 0 4
65063: PPUSH
65064: LD_VAR 0 2
65068: PPUSH
65069: CALL_OW 259
65073: PPUSH
65074: CALL 66473 0 2
65078: ST_TO_ADDR
65079: GO 65046
65081: POP
65082: POP
// if not tmp then
65083: LD_VAR 0 5
65087: NOT
65088: IFFALSE 65092
// exit ;
65090: GO 65112
// result := SortListByListDesc ( units , tmp ) ;
65092: LD_ADDR_VAR 0 3
65096: PUSH
65097: LD_VAR 0 1
65101: PPUSH
65102: LD_VAR 0 5
65106: PPUSH
65107: CALL_OW 77
65111: ST_TO_ADDR
// end ;
65112: LD_VAR 0 3
65116: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65117: LD_INT 0
65119: PPUSH
65120: PPUSH
65121: PPUSH
// result := false ;
65122: LD_ADDR_VAR 0 3
65126: PUSH
65127: LD_INT 0
65129: ST_TO_ADDR
// if not building then
65130: LD_VAR 0 2
65134: NOT
65135: IFFALSE 65139
// exit ;
65137: GO 65277
// x := GetX ( building ) ;
65139: LD_ADDR_VAR 0 4
65143: PUSH
65144: LD_VAR 0 2
65148: PPUSH
65149: CALL_OW 250
65153: ST_TO_ADDR
// y := GetY ( building ) ;
65154: LD_ADDR_VAR 0 5
65158: PUSH
65159: LD_VAR 0 2
65163: PPUSH
65164: CALL_OW 251
65168: ST_TO_ADDR
// if not x or not y then
65169: LD_VAR 0 4
65173: NOT
65174: PUSH
65175: LD_VAR 0 5
65179: NOT
65180: OR
65181: IFFALSE 65185
// exit ;
65183: GO 65277
// if GetTaskList ( unit ) then
65185: LD_VAR 0 1
65189: PPUSH
65190: CALL_OW 437
65194: IFFALSE 65277
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65196: LD_STRING e
65198: PUSH
65199: LD_VAR 0 1
65203: PPUSH
65204: CALL_OW 437
65208: PUSH
65209: LD_INT 1
65211: ARRAY
65212: PUSH
65213: LD_INT 1
65215: ARRAY
65216: EQUAL
65217: PUSH
65218: LD_VAR 0 4
65222: PUSH
65223: LD_VAR 0 1
65227: PPUSH
65228: CALL_OW 437
65232: PUSH
65233: LD_INT 1
65235: ARRAY
65236: PUSH
65237: LD_INT 2
65239: ARRAY
65240: EQUAL
65241: AND
65242: PUSH
65243: LD_VAR 0 5
65247: PUSH
65248: LD_VAR 0 1
65252: PPUSH
65253: CALL_OW 437
65257: PUSH
65258: LD_INT 1
65260: ARRAY
65261: PUSH
65262: LD_INT 3
65264: ARRAY
65265: EQUAL
65266: AND
65267: IFFALSE 65277
// result := true end ;
65269: LD_ADDR_VAR 0 3
65273: PUSH
65274: LD_INT 1
65276: ST_TO_ADDR
// end ;
65277: LD_VAR 0 3
65281: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65282: LD_INT 0
65284: PPUSH
// result := false ;
65285: LD_ADDR_VAR 0 4
65289: PUSH
65290: LD_INT 0
65292: ST_TO_ADDR
// if GetTaskList ( unit ) then
65293: LD_VAR 0 1
65297: PPUSH
65298: CALL_OW 437
65302: IFFALSE 65385
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65304: LD_STRING M
65306: PUSH
65307: LD_VAR 0 1
65311: PPUSH
65312: CALL_OW 437
65316: PUSH
65317: LD_INT 1
65319: ARRAY
65320: PUSH
65321: LD_INT 1
65323: ARRAY
65324: EQUAL
65325: PUSH
65326: LD_VAR 0 2
65330: PUSH
65331: LD_VAR 0 1
65335: PPUSH
65336: CALL_OW 437
65340: PUSH
65341: LD_INT 1
65343: ARRAY
65344: PUSH
65345: LD_INT 2
65347: ARRAY
65348: EQUAL
65349: AND
65350: PUSH
65351: LD_VAR 0 3
65355: PUSH
65356: LD_VAR 0 1
65360: PPUSH
65361: CALL_OW 437
65365: PUSH
65366: LD_INT 1
65368: ARRAY
65369: PUSH
65370: LD_INT 3
65372: ARRAY
65373: EQUAL
65374: AND
65375: IFFALSE 65385
// result := true ;
65377: LD_ADDR_VAR 0 4
65381: PUSH
65382: LD_INT 1
65384: ST_TO_ADDR
// end ; end ;
65385: LD_VAR 0 4
65389: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65390: LD_INT 0
65392: PPUSH
65393: PPUSH
65394: PPUSH
65395: PPUSH
// if not unit or not area then
65396: LD_VAR 0 1
65400: NOT
65401: PUSH
65402: LD_VAR 0 2
65406: NOT
65407: OR
65408: IFFALSE 65412
// exit ;
65410: GO 65576
// tmp := AreaToList ( area , i ) ;
65412: LD_ADDR_VAR 0 6
65416: PUSH
65417: LD_VAR 0 2
65421: PPUSH
65422: LD_VAR 0 5
65426: PPUSH
65427: CALL_OW 517
65431: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65432: LD_ADDR_VAR 0 5
65436: PUSH
65437: DOUBLE
65438: LD_INT 1
65440: DEC
65441: ST_TO_ADDR
65442: LD_VAR 0 6
65446: PUSH
65447: LD_INT 1
65449: ARRAY
65450: PUSH
65451: FOR_TO
65452: IFFALSE 65574
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65454: LD_ADDR_VAR 0 7
65458: PUSH
65459: LD_VAR 0 6
65463: PUSH
65464: LD_INT 1
65466: ARRAY
65467: PUSH
65468: LD_VAR 0 5
65472: ARRAY
65473: PUSH
65474: LD_VAR 0 6
65478: PUSH
65479: LD_INT 2
65481: ARRAY
65482: PUSH
65483: LD_VAR 0 5
65487: ARRAY
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65493: LD_VAR 0 7
65497: PUSH
65498: LD_INT 1
65500: ARRAY
65501: PPUSH
65502: LD_VAR 0 7
65506: PUSH
65507: LD_INT 2
65509: ARRAY
65510: PPUSH
65511: CALL_OW 428
65515: PUSH
65516: LD_INT 0
65518: EQUAL
65519: IFFALSE 65572
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65521: LD_VAR 0 1
65525: PPUSH
65526: LD_VAR 0 7
65530: PUSH
65531: LD_INT 1
65533: ARRAY
65534: PPUSH
65535: LD_VAR 0 7
65539: PUSH
65540: LD_INT 2
65542: ARRAY
65543: PPUSH
65544: LD_VAR 0 3
65548: PPUSH
65549: CALL_OW 48
// result := IsPlaced ( unit ) ;
65553: LD_ADDR_VAR 0 4
65557: PUSH
65558: LD_VAR 0 1
65562: PPUSH
65563: CALL_OW 305
65567: ST_TO_ADDR
// exit ;
65568: POP
65569: POP
65570: GO 65576
// end ; end ;
65572: GO 65451
65574: POP
65575: POP
// end ;
65576: LD_VAR 0 4
65580: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65581: LD_INT 0
65583: PPUSH
65584: PPUSH
65585: PPUSH
// if not side or side > 8 then
65586: LD_VAR 0 1
65590: NOT
65591: PUSH
65592: LD_VAR 0 1
65596: PUSH
65597: LD_INT 8
65599: GREATER
65600: OR
65601: IFFALSE 65605
// exit ;
65603: GO 65792
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65605: LD_ADDR_VAR 0 4
65609: PUSH
65610: LD_INT 22
65612: PUSH
65613: LD_VAR 0 1
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 21
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PPUSH
65636: CALL_OW 69
65640: ST_TO_ADDR
// if not tmp then
65641: LD_VAR 0 4
65645: NOT
65646: IFFALSE 65650
// exit ;
65648: GO 65792
// enable_addtolog := true ;
65650: LD_ADDR_OWVAR 81
65654: PUSH
65655: LD_INT 1
65657: ST_TO_ADDR
// AddToLog ( [ ) ;
65658: LD_STRING [
65660: PPUSH
65661: CALL_OW 561
// for i in tmp do
65665: LD_ADDR_VAR 0 3
65669: PUSH
65670: LD_VAR 0 4
65674: PUSH
65675: FOR_IN
65676: IFFALSE 65783
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65678: LD_STRING [
65680: PUSH
65681: LD_VAR 0 3
65685: PPUSH
65686: CALL_OW 266
65690: STR
65691: PUSH
65692: LD_STRING , 
65694: STR
65695: PUSH
65696: LD_VAR 0 3
65700: PPUSH
65701: CALL_OW 250
65705: STR
65706: PUSH
65707: LD_STRING , 
65709: STR
65710: PUSH
65711: LD_VAR 0 3
65715: PPUSH
65716: CALL_OW 251
65720: STR
65721: PUSH
65722: LD_STRING , 
65724: STR
65725: PUSH
65726: LD_VAR 0 3
65730: PPUSH
65731: CALL_OW 254
65735: STR
65736: PUSH
65737: LD_STRING , 
65739: STR
65740: PUSH
65741: LD_VAR 0 3
65745: PPUSH
65746: LD_INT 1
65748: PPUSH
65749: CALL_OW 268
65753: STR
65754: PUSH
65755: LD_STRING , 
65757: STR
65758: PUSH
65759: LD_VAR 0 3
65763: PPUSH
65764: LD_INT 2
65766: PPUSH
65767: CALL_OW 268
65771: STR
65772: PUSH
65773: LD_STRING ],
65775: STR
65776: PPUSH
65777: CALL_OW 561
// end ;
65781: GO 65675
65783: POP
65784: POP
// AddToLog ( ]; ) ;
65785: LD_STRING ];
65787: PPUSH
65788: CALL_OW 561
// end ;
65792: LD_VAR 0 2
65796: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65797: LD_INT 0
65799: PPUSH
65800: PPUSH
65801: PPUSH
65802: PPUSH
65803: PPUSH
// if not area or not rate or not max then
65804: LD_VAR 0 1
65808: NOT
65809: PUSH
65810: LD_VAR 0 2
65814: NOT
65815: OR
65816: PUSH
65817: LD_VAR 0 4
65821: NOT
65822: OR
65823: IFFALSE 65827
// exit ;
65825: GO 66016
// while 1 do
65827: LD_INT 1
65829: IFFALSE 66016
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65831: LD_ADDR_VAR 0 9
65835: PUSH
65836: LD_VAR 0 1
65840: PPUSH
65841: LD_INT 1
65843: PPUSH
65844: CALL_OW 287
65848: PUSH
65849: LD_INT 10
65851: MUL
65852: ST_TO_ADDR
// r := rate / 10 ;
65853: LD_ADDR_VAR 0 7
65857: PUSH
65858: LD_VAR 0 2
65862: PUSH
65863: LD_INT 10
65865: DIVREAL
65866: ST_TO_ADDR
// time := 1 1$00 ;
65867: LD_ADDR_VAR 0 8
65871: PUSH
65872: LD_INT 2100
65874: ST_TO_ADDR
// if amount < min then
65875: LD_VAR 0 9
65879: PUSH
65880: LD_VAR 0 3
65884: LESS
65885: IFFALSE 65903
// r := r * 2 else
65887: LD_ADDR_VAR 0 7
65891: PUSH
65892: LD_VAR 0 7
65896: PUSH
65897: LD_INT 2
65899: MUL
65900: ST_TO_ADDR
65901: GO 65929
// if amount > max then
65903: LD_VAR 0 9
65907: PUSH
65908: LD_VAR 0 4
65912: GREATER
65913: IFFALSE 65929
// r := r / 2 ;
65915: LD_ADDR_VAR 0 7
65919: PUSH
65920: LD_VAR 0 7
65924: PUSH
65925: LD_INT 2
65927: DIVREAL
65928: ST_TO_ADDR
// time := time / r ;
65929: LD_ADDR_VAR 0 8
65933: PUSH
65934: LD_VAR 0 8
65938: PUSH
65939: LD_VAR 0 7
65943: DIVREAL
65944: ST_TO_ADDR
// if time < 0 then
65945: LD_VAR 0 8
65949: PUSH
65950: LD_INT 0
65952: LESS
65953: IFFALSE 65970
// time := time * - 1 ;
65955: LD_ADDR_VAR 0 8
65959: PUSH
65960: LD_VAR 0 8
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: MUL
65969: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65970: LD_VAR 0 8
65974: PUSH
65975: LD_INT 35
65977: PPUSH
65978: LD_INT 875
65980: PPUSH
65981: CALL_OW 12
65985: PLUS
65986: PPUSH
65987: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65991: LD_INT 1
65993: PPUSH
65994: LD_INT 5
65996: PPUSH
65997: CALL_OW 12
66001: PPUSH
66002: LD_VAR 0 1
66006: PPUSH
66007: LD_INT 1
66009: PPUSH
66010: CALL_OW 55
// end ;
66014: GO 65827
// end ;
66016: LD_VAR 0 5
66020: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66021: LD_INT 0
66023: PPUSH
66024: PPUSH
66025: PPUSH
66026: PPUSH
66027: PPUSH
66028: PPUSH
66029: PPUSH
66030: PPUSH
// if not turrets or not factories then
66031: LD_VAR 0 1
66035: NOT
66036: PUSH
66037: LD_VAR 0 2
66041: NOT
66042: OR
66043: IFFALSE 66047
// exit ;
66045: GO 66354
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66047: LD_ADDR_VAR 0 10
66051: PUSH
66052: LD_INT 5
66054: PUSH
66055: LD_INT 6
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 2
66064: PUSH
66065: LD_INT 4
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 3
66074: PUSH
66075: LD_INT 5
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 24
66089: PUSH
66090: LD_INT 25
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 23
66099: PUSH
66100: LD_INT 27
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 42
66113: PUSH
66114: LD_INT 43
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 44
66123: PUSH
66124: LD_INT 46
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 45
66133: PUSH
66134: LD_INT 47
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: LIST
66150: ST_TO_ADDR
// result := [ ] ;
66151: LD_ADDR_VAR 0 3
66155: PUSH
66156: EMPTY
66157: ST_TO_ADDR
// for i in turrets do
66158: LD_ADDR_VAR 0 4
66162: PUSH
66163: LD_VAR 0 1
66167: PUSH
66168: FOR_IN
66169: IFFALSE 66352
// begin nat := GetNation ( i ) ;
66171: LD_ADDR_VAR 0 7
66175: PUSH
66176: LD_VAR 0 4
66180: PPUSH
66181: CALL_OW 248
66185: ST_TO_ADDR
// weapon := 0 ;
66186: LD_ADDR_VAR 0 8
66190: PUSH
66191: LD_INT 0
66193: ST_TO_ADDR
// if not nat then
66194: LD_VAR 0 7
66198: NOT
66199: IFFALSE 66203
// continue ;
66201: GO 66168
// for j in list [ nat ] do
66203: LD_ADDR_VAR 0 5
66207: PUSH
66208: LD_VAR 0 10
66212: PUSH
66213: LD_VAR 0 7
66217: ARRAY
66218: PUSH
66219: FOR_IN
66220: IFFALSE 66261
// if GetBWeapon ( i ) = j [ 1 ] then
66222: LD_VAR 0 4
66226: PPUSH
66227: CALL_OW 269
66231: PUSH
66232: LD_VAR 0 5
66236: PUSH
66237: LD_INT 1
66239: ARRAY
66240: EQUAL
66241: IFFALSE 66259
// begin weapon := j [ 2 ] ;
66243: LD_ADDR_VAR 0 8
66247: PUSH
66248: LD_VAR 0 5
66252: PUSH
66253: LD_INT 2
66255: ARRAY
66256: ST_TO_ADDR
// break ;
66257: GO 66261
// end ;
66259: GO 66219
66261: POP
66262: POP
// if not weapon then
66263: LD_VAR 0 8
66267: NOT
66268: IFFALSE 66272
// continue ;
66270: GO 66168
// for k in factories do
66272: LD_ADDR_VAR 0 6
66276: PUSH
66277: LD_VAR 0 2
66281: PUSH
66282: FOR_IN
66283: IFFALSE 66348
// begin weapons := AvailableWeaponList ( k ) ;
66285: LD_ADDR_VAR 0 9
66289: PUSH
66290: LD_VAR 0 6
66294: PPUSH
66295: CALL_OW 478
66299: ST_TO_ADDR
// if not weapons then
66300: LD_VAR 0 9
66304: NOT
66305: IFFALSE 66309
// continue ;
66307: GO 66282
// if weapon in weapons then
66309: LD_VAR 0 8
66313: PUSH
66314: LD_VAR 0 9
66318: IN
66319: IFFALSE 66346
// begin result := [ i , weapon ] ;
66321: LD_ADDR_VAR 0 3
66325: PUSH
66326: LD_VAR 0 4
66330: PUSH
66331: LD_VAR 0 8
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: ST_TO_ADDR
// exit ;
66340: POP
66341: POP
66342: POP
66343: POP
66344: GO 66354
// end ; end ;
66346: GO 66282
66348: POP
66349: POP
// end ;
66350: GO 66168
66352: POP
66353: POP
// end ;
66354: LD_VAR 0 3
66358: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66359: LD_INT 0
66361: PPUSH
// if not side or side > 8 then
66362: LD_VAR 0 3
66366: NOT
66367: PUSH
66368: LD_VAR 0 3
66372: PUSH
66373: LD_INT 8
66375: GREATER
66376: OR
66377: IFFALSE 66381
// exit ;
66379: GO 66440
// if not range then
66381: LD_VAR 0 4
66385: NOT
66386: IFFALSE 66397
// range := - 12 ;
66388: LD_ADDR_VAR 0 4
66392: PUSH
66393: LD_INT 12
66395: NEG
66396: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66397: LD_VAR 0 1
66401: PPUSH
66402: LD_VAR 0 2
66406: PPUSH
66407: LD_VAR 0 3
66411: PPUSH
66412: LD_VAR 0 4
66416: PPUSH
66417: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66421: LD_VAR 0 1
66425: PPUSH
66426: LD_VAR 0 2
66430: PPUSH
66431: LD_VAR 0 3
66435: PPUSH
66436: CALL_OW 331
// end ;
66440: LD_VAR 0 5
66444: RET
// export function Video ( mode ) ; begin
66445: LD_INT 0
66447: PPUSH
// ingame_video = mode ;
66448: LD_ADDR_OWVAR 52
66452: PUSH
66453: LD_VAR 0 1
66457: ST_TO_ADDR
// interface_hidden = mode ;
66458: LD_ADDR_OWVAR 54
66462: PUSH
66463: LD_VAR 0 1
66467: ST_TO_ADDR
// end ;
66468: LD_VAR 0 2
66472: RET
// export function Join ( array , element ) ; begin
66473: LD_INT 0
66475: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66476: LD_ADDR_VAR 0 3
66480: PUSH
66481: LD_VAR 0 1
66485: PPUSH
66486: LD_VAR 0 1
66490: PUSH
66491: LD_INT 1
66493: PLUS
66494: PPUSH
66495: LD_VAR 0 2
66499: PPUSH
66500: CALL_OW 1
66504: ST_TO_ADDR
// end ;
66505: LD_VAR 0 3
66509: RET
// export function JoinUnion ( array , element ) ; begin
66510: LD_INT 0
66512: PPUSH
// result := array union element ;
66513: LD_ADDR_VAR 0 3
66517: PUSH
66518: LD_VAR 0 1
66522: PUSH
66523: LD_VAR 0 2
66527: UNION
66528: ST_TO_ADDR
// end ;
66529: LD_VAR 0 3
66533: RET
// export function GetBehemoths ( side ) ; begin
66534: LD_INT 0
66536: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66537: LD_ADDR_VAR 0 2
66541: PUSH
66542: LD_INT 22
66544: PUSH
66545: LD_VAR 0 1
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 31
66556: PUSH
66557: LD_INT 25
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PPUSH
66568: CALL_OW 69
66572: ST_TO_ADDR
// end ;
66573: LD_VAR 0 2
66577: RET
// export function Shuffle ( array ) ; var i , index ; begin
66578: LD_INT 0
66580: PPUSH
66581: PPUSH
66582: PPUSH
// result := [ ] ;
66583: LD_ADDR_VAR 0 2
66587: PUSH
66588: EMPTY
66589: ST_TO_ADDR
// if not array then
66590: LD_VAR 0 1
66594: NOT
66595: IFFALSE 66599
// exit ;
66597: GO 66698
// Randomize ;
66599: CALL_OW 10
// for i = array downto 1 do
66603: LD_ADDR_VAR 0 3
66607: PUSH
66608: DOUBLE
66609: LD_VAR 0 1
66613: INC
66614: ST_TO_ADDR
66615: LD_INT 1
66617: PUSH
66618: FOR_DOWNTO
66619: IFFALSE 66696
// begin index := rand ( 1 , array ) ;
66621: LD_ADDR_VAR 0 4
66625: PUSH
66626: LD_INT 1
66628: PPUSH
66629: LD_VAR 0 1
66633: PPUSH
66634: CALL_OW 12
66638: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66639: LD_ADDR_VAR 0 2
66643: PUSH
66644: LD_VAR 0 2
66648: PPUSH
66649: LD_VAR 0 2
66653: PUSH
66654: LD_INT 1
66656: PLUS
66657: PPUSH
66658: LD_VAR 0 1
66662: PUSH
66663: LD_VAR 0 4
66667: ARRAY
66668: PPUSH
66669: CALL_OW 2
66673: ST_TO_ADDR
// array := Delete ( array , index ) ;
66674: LD_ADDR_VAR 0 1
66678: PUSH
66679: LD_VAR 0 1
66683: PPUSH
66684: LD_VAR 0 4
66688: PPUSH
66689: CALL_OW 3
66693: ST_TO_ADDR
// end ;
66694: GO 66618
66696: POP
66697: POP
// end ;
66698: LD_VAR 0 2
66702: RET
// export function GetBaseMaterials ( base ) ; begin
66703: LD_INT 0
66705: PPUSH
// result := [ 0 , 0 , 0 ] ;
66706: LD_ADDR_VAR 0 2
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: LIST
66724: ST_TO_ADDR
// if not base then
66725: LD_VAR 0 1
66729: NOT
66730: IFFALSE 66734
// exit ;
66732: GO 66783
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66734: LD_ADDR_VAR 0 2
66738: PUSH
66739: LD_VAR 0 1
66743: PPUSH
66744: LD_INT 1
66746: PPUSH
66747: CALL_OW 275
66751: PUSH
66752: LD_VAR 0 1
66756: PPUSH
66757: LD_INT 2
66759: PPUSH
66760: CALL_OW 275
66764: PUSH
66765: LD_VAR 0 1
66769: PPUSH
66770: LD_INT 3
66772: PPUSH
66773: CALL_OW 275
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: LIST
66782: ST_TO_ADDR
// end ;
66783: LD_VAR 0 2
66787: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66788: LD_INT 0
66790: PPUSH
66791: PPUSH
// result := array ;
66792: LD_ADDR_VAR 0 3
66796: PUSH
66797: LD_VAR 0 1
66801: ST_TO_ADDR
// if size >= result then
66802: LD_VAR 0 2
66806: PUSH
66807: LD_VAR 0 3
66811: GREATEREQUAL
66812: IFFALSE 66816
// exit ;
66814: GO 66866
// if size then
66816: LD_VAR 0 2
66820: IFFALSE 66866
// for i := array downto size do
66822: LD_ADDR_VAR 0 4
66826: PUSH
66827: DOUBLE
66828: LD_VAR 0 1
66832: INC
66833: ST_TO_ADDR
66834: LD_VAR 0 2
66838: PUSH
66839: FOR_DOWNTO
66840: IFFALSE 66864
// result := Delete ( result , result ) ;
66842: LD_ADDR_VAR 0 3
66846: PUSH
66847: LD_VAR 0 3
66851: PPUSH
66852: LD_VAR 0 3
66856: PPUSH
66857: CALL_OW 3
66861: ST_TO_ADDR
66862: GO 66839
66864: POP
66865: POP
// end ;
66866: LD_VAR 0 3
66870: RET
// export function ComExit ( unit ) ; var tmp ; begin
66871: LD_INT 0
66873: PPUSH
66874: PPUSH
// if not IsInUnit ( unit ) then
66875: LD_VAR 0 1
66879: PPUSH
66880: CALL_OW 310
66884: NOT
66885: IFFALSE 66889
// exit ;
66887: GO 66949
// tmp := IsInUnit ( unit ) ;
66889: LD_ADDR_VAR 0 3
66893: PUSH
66894: LD_VAR 0 1
66898: PPUSH
66899: CALL_OW 310
66903: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66904: LD_VAR 0 3
66908: PPUSH
66909: CALL_OW 247
66913: PUSH
66914: LD_INT 2
66916: EQUAL
66917: IFFALSE 66930
// ComExitVehicle ( unit ) else
66919: LD_VAR 0 1
66923: PPUSH
66924: CALL_OW 121
66928: GO 66939
// ComExitBuilding ( unit ) ;
66930: LD_VAR 0 1
66934: PPUSH
66935: CALL_OW 122
// result := tmp ;
66939: LD_ADDR_VAR 0 2
66943: PUSH
66944: LD_VAR 0 3
66948: ST_TO_ADDR
// end ;
66949: LD_VAR 0 2
66953: RET
// export function ComExitAll ( units ) ; var i ; begin
66954: LD_INT 0
66956: PPUSH
66957: PPUSH
// if not units then
66958: LD_VAR 0 1
66962: NOT
66963: IFFALSE 66967
// exit ;
66965: GO 66993
// for i in units do
66967: LD_ADDR_VAR 0 3
66971: PUSH
66972: LD_VAR 0 1
66976: PUSH
66977: FOR_IN
66978: IFFALSE 66991
// ComExit ( i ) ;
66980: LD_VAR 0 3
66984: PPUSH
66985: CALL 66871 0 1
66989: GO 66977
66991: POP
66992: POP
// end ;
66993: LD_VAR 0 2
66997: RET
// export function ResetHc ; begin
66998: LD_INT 0
67000: PPUSH
// InitHc ;
67001: CALL_OW 19
// hc_importance := 0 ;
67005: LD_ADDR_OWVAR 32
67009: PUSH
67010: LD_INT 0
67012: ST_TO_ADDR
// end ;
67013: LD_VAR 0 1
67017: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67018: LD_INT 0
67020: PPUSH
67021: PPUSH
67022: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67023: LD_ADDR_VAR 0 6
67027: PUSH
67028: LD_VAR 0 1
67032: PUSH
67033: LD_VAR 0 3
67037: PLUS
67038: PUSH
67039: LD_INT 2
67041: DIV
67042: ST_TO_ADDR
// if _x < 0 then
67043: LD_VAR 0 6
67047: PUSH
67048: LD_INT 0
67050: LESS
67051: IFFALSE 67068
// _x := _x * - 1 ;
67053: LD_ADDR_VAR 0 6
67057: PUSH
67058: LD_VAR 0 6
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: MUL
67067: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67068: LD_ADDR_VAR 0 7
67072: PUSH
67073: LD_VAR 0 2
67077: PUSH
67078: LD_VAR 0 4
67082: PLUS
67083: PUSH
67084: LD_INT 2
67086: DIV
67087: ST_TO_ADDR
// if _y < 0 then
67088: LD_VAR 0 7
67092: PUSH
67093: LD_INT 0
67095: LESS
67096: IFFALSE 67113
// _y := _y * - 1 ;
67098: LD_ADDR_VAR 0 7
67102: PUSH
67103: LD_VAR 0 7
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: MUL
67112: ST_TO_ADDR
// result := [ _x , _y ] ;
67113: LD_ADDR_VAR 0 5
67117: PUSH
67118: LD_VAR 0 6
67122: PUSH
67123: LD_VAR 0 7
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: ST_TO_ADDR
// end ;
67132: LD_VAR 0 5
67136: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67137: LD_INT 0
67139: PPUSH
67140: PPUSH
67141: PPUSH
67142: PPUSH
// task := GetTaskList ( unit ) ;
67143: LD_ADDR_VAR 0 7
67147: PUSH
67148: LD_VAR 0 1
67152: PPUSH
67153: CALL_OW 437
67157: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67158: LD_VAR 0 7
67162: NOT
67163: PUSH
67164: LD_VAR 0 1
67168: PPUSH
67169: LD_VAR 0 2
67173: PPUSH
67174: CALL_OW 308
67178: NOT
67179: AND
67180: IFFALSE 67184
// exit ;
67182: GO 67302
// if IsInArea ( unit , area ) then
67184: LD_VAR 0 1
67188: PPUSH
67189: LD_VAR 0 2
67193: PPUSH
67194: CALL_OW 308
67198: IFFALSE 67216
// begin ComMoveToArea ( unit , goAway ) ;
67200: LD_VAR 0 1
67204: PPUSH
67205: LD_VAR 0 3
67209: PPUSH
67210: CALL_OW 113
// exit ;
67214: GO 67302
// end ; if task [ 1 ] [ 1 ] <> M then
67216: LD_VAR 0 7
67220: PUSH
67221: LD_INT 1
67223: ARRAY
67224: PUSH
67225: LD_INT 1
67227: ARRAY
67228: PUSH
67229: LD_STRING M
67231: NONEQUAL
67232: IFFALSE 67236
// exit ;
67234: GO 67302
// x := task [ 1 ] [ 2 ] ;
67236: LD_ADDR_VAR 0 5
67240: PUSH
67241: LD_VAR 0 7
67245: PUSH
67246: LD_INT 1
67248: ARRAY
67249: PUSH
67250: LD_INT 2
67252: ARRAY
67253: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67254: LD_ADDR_VAR 0 6
67258: PUSH
67259: LD_VAR 0 7
67263: PUSH
67264: LD_INT 1
67266: ARRAY
67267: PUSH
67268: LD_INT 3
67270: ARRAY
67271: ST_TO_ADDR
// if InArea ( x , y , area ) then
67272: LD_VAR 0 5
67276: PPUSH
67277: LD_VAR 0 6
67281: PPUSH
67282: LD_VAR 0 2
67286: PPUSH
67287: CALL_OW 309
67291: IFFALSE 67302
// ComStop ( unit ) ;
67293: LD_VAR 0 1
67297: PPUSH
67298: CALL_OW 141
// end ;
67302: LD_VAR 0 4
67306: RET
// export function Abs ( value ) ; begin
67307: LD_INT 0
67309: PPUSH
// result := value ;
67310: LD_ADDR_VAR 0 2
67314: PUSH
67315: LD_VAR 0 1
67319: ST_TO_ADDR
// if value < 0 then
67320: LD_VAR 0 1
67324: PUSH
67325: LD_INT 0
67327: LESS
67328: IFFALSE 67345
// result := value * - 1 ;
67330: LD_ADDR_VAR 0 2
67334: PUSH
67335: LD_VAR 0 1
67339: PUSH
67340: LD_INT 1
67342: NEG
67343: MUL
67344: ST_TO_ADDR
// end ;
67345: LD_VAR 0 2
67349: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67350: LD_INT 0
67352: PPUSH
67353: PPUSH
67354: PPUSH
67355: PPUSH
67356: PPUSH
67357: PPUSH
67358: PPUSH
67359: PPUSH
// if not unit or not building then
67360: LD_VAR 0 1
67364: NOT
67365: PUSH
67366: LD_VAR 0 2
67370: NOT
67371: OR
67372: IFFALSE 67376
// exit ;
67374: GO 67602
// x := GetX ( building ) ;
67376: LD_ADDR_VAR 0 4
67380: PUSH
67381: LD_VAR 0 2
67385: PPUSH
67386: CALL_OW 250
67390: ST_TO_ADDR
// y := GetY ( building ) ;
67391: LD_ADDR_VAR 0 6
67395: PUSH
67396: LD_VAR 0 2
67400: PPUSH
67401: CALL_OW 251
67405: ST_TO_ADDR
// d := GetDir ( building ) ;
67406: LD_ADDR_VAR 0 8
67410: PUSH
67411: LD_VAR 0 2
67415: PPUSH
67416: CALL_OW 254
67420: ST_TO_ADDR
// r := 4 ;
67421: LD_ADDR_VAR 0 9
67425: PUSH
67426: LD_INT 4
67428: ST_TO_ADDR
// for i := 1 to 5 do
67429: LD_ADDR_VAR 0 10
67433: PUSH
67434: DOUBLE
67435: LD_INT 1
67437: DEC
67438: ST_TO_ADDR
67439: LD_INT 5
67441: PUSH
67442: FOR_TO
67443: IFFALSE 67600
// begin _x := ShiftX ( x , d , r + i ) ;
67445: LD_ADDR_VAR 0 5
67449: PUSH
67450: LD_VAR 0 4
67454: PPUSH
67455: LD_VAR 0 8
67459: PPUSH
67460: LD_VAR 0 9
67464: PUSH
67465: LD_VAR 0 10
67469: PLUS
67470: PPUSH
67471: CALL_OW 272
67475: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67476: LD_ADDR_VAR 0 7
67480: PUSH
67481: LD_VAR 0 6
67485: PPUSH
67486: LD_VAR 0 8
67490: PPUSH
67491: LD_VAR 0 9
67495: PUSH
67496: LD_VAR 0 10
67500: PLUS
67501: PPUSH
67502: CALL_OW 273
67506: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67507: LD_VAR 0 5
67511: PPUSH
67512: LD_VAR 0 7
67516: PPUSH
67517: CALL_OW 488
67521: PUSH
67522: LD_VAR 0 5
67526: PPUSH
67527: LD_VAR 0 7
67531: PPUSH
67532: CALL_OW 428
67536: PPUSH
67537: CALL_OW 247
67541: PUSH
67542: LD_INT 3
67544: PUSH
67545: LD_INT 2
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: IN
67552: NOT
67553: AND
67554: IFFALSE 67598
// begin ComMoveXY ( unit , _x , _y ) ;
67556: LD_VAR 0 1
67560: PPUSH
67561: LD_VAR 0 5
67565: PPUSH
67566: LD_VAR 0 7
67570: PPUSH
67571: CALL_OW 111
// result := [ _x , _y ] ;
67575: LD_ADDR_VAR 0 3
67579: PUSH
67580: LD_VAR 0 5
67584: PUSH
67585: LD_VAR 0 7
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: ST_TO_ADDR
// exit ;
67594: POP
67595: POP
67596: GO 67602
// end ; end ;
67598: GO 67442
67600: POP
67601: POP
// end ;
67602: LD_VAR 0 3
67606: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67607: LD_INT 0
67609: PPUSH
67610: PPUSH
67611: PPUSH
// result := 0 ;
67612: LD_ADDR_VAR 0 3
67616: PUSH
67617: LD_INT 0
67619: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67620: LD_VAR 0 1
67624: PUSH
67625: LD_INT 0
67627: LESS
67628: PUSH
67629: LD_VAR 0 1
67633: PUSH
67634: LD_INT 8
67636: GREATER
67637: OR
67638: PUSH
67639: LD_VAR 0 2
67643: PUSH
67644: LD_INT 0
67646: LESS
67647: OR
67648: PUSH
67649: LD_VAR 0 2
67653: PUSH
67654: LD_INT 8
67656: GREATER
67657: OR
67658: IFFALSE 67662
// exit ;
67660: GO 67737
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67662: LD_ADDR_VAR 0 4
67666: PUSH
67667: LD_INT 22
67669: PUSH
67670: LD_VAR 0 2
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PPUSH
67679: CALL_OW 69
67683: PUSH
67684: FOR_IN
67685: IFFALSE 67735
// begin un := UnitShoot ( i ) ;
67687: LD_ADDR_VAR 0 5
67691: PUSH
67692: LD_VAR 0 4
67696: PPUSH
67697: CALL_OW 504
67701: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67702: LD_VAR 0 5
67706: PPUSH
67707: CALL_OW 255
67711: PUSH
67712: LD_VAR 0 1
67716: EQUAL
67717: IFFALSE 67733
// begin result := un ;
67719: LD_ADDR_VAR 0 3
67723: PUSH
67724: LD_VAR 0 5
67728: ST_TO_ADDR
// exit ;
67729: POP
67730: POP
67731: GO 67737
// end ; end ;
67733: GO 67684
67735: POP
67736: POP
// end ;
67737: LD_VAR 0 3
67741: RET
// export function GetCargoBay ( units ) ; begin
67742: LD_INT 0
67744: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67745: LD_ADDR_VAR 0 2
67749: PUSH
67750: LD_VAR 0 1
67754: PPUSH
67755: LD_INT 2
67757: PUSH
67758: LD_INT 34
67760: PUSH
67761: LD_INT 12
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 34
67770: PUSH
67771: LD_INT 51
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 34
67780: PUSH
67781: LD_INT 32
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 34
67790: PUSH
67791: LD_INT 89
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: PPUSH
67805: CALL_OW 72
67809: ST_TO_ADDR
// end ;
67810: LD_VAR 0 2
67814: RET
// export function Negate ( value ) ; begin
67815: LD_INT 0
67817: PPUSH
// result := not value ;
67818: LD_ADDR_VAR 0 2
67822: PUSH
67823: LD_VAR 0 1
67827: NOT
67828: ST_TO_ADDR
// end ;
67829: LD_VAR 0 2
67833: RET
// export function Inc ( value ) ; begin
67834: LD_INT 0
67836: PPUSH
// result := value + 1 ;
67837: LD_ADDR_VAR 0 2
67841: PUSH
67842: LD_VAR 0 1
67846: PUSH
67847: LD_INT 1
67849: PLUS
67850: ST_TO_ADDR
// end ;
67851: LD_VAR 0 2
67855: RET
// export function Dec ( value ) ; begin
67856: LD_INT 0
67858: PPUSH
// result := value - 1 ;
67859: LD_ADDR_VAR 0 2
67863: PUSH
67864: LD_VAR 0 1
67868: PUSH
67869: LD_INT 1
67871: MINUS
67872: ST_TO_ADDR
// end ;
67873: LD_VAR 0 2
67877: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67878: LD_INT 0
67880: PPUSH
67881: PPUSH
67882: PPUSH
67883: PPUSH
67884: PPUSH
67885: PPUSH
67886: PPUSH
67887: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67888: LD_VAR 0 1
67892: PPUSH
67893: LD_VAR 0 2
67897: PPUSH
67898: CALL_OW 488
67902: NOT
67903: PUSH
67904: LD_VAR 0 3
67908: PPUSH
67909: LD_VAR 0 4
67913: PPUSH
67914: CALL_OW 488
67918: NOT
67919: OR
67920: IFFALSE 67933
// begin result := - 1 ;
67922: LD_ADDR_VAR 0 5
67926: PUSH
67927: LD_INT 1
67929: NEG
67930: ST_TO_ADDR
// exit ;
67931: GO 68168
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67933: LD_ADDR_VAR 0 12
67937: PUSH
67938: LD_VAR 0 1
67942: PPUSH
67943: LD_VAR 0 2
67947: PPUSH
67948: LD_VAR 0 3
67952: PPUSH
67953: LD_VAR 0 4
67957: PPUSH
67958: CALL 67018 0 4
67962: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67963: LD_ADDR_VAR 0 11
67967: PUSH
67968: LD_VAR 0 1
67972: PPUSH
67973: LD_VAR 0 2
67977: PPUSH
67978: LD_VAR 0 12
67982: PUSH
67983: LD_INT 1
67985: ARRAY
67986: PPUSH
67987: LD_VAR 0 12
67991: PUSH
67992: LD_INT 2
67994: ARRAY
67995: PPUSH
67996: CALL_OW 298
68000: ST_TO_ADDR
// distance := 9999 ;
68001: LD_ADDR_VAR 0 10
68005: PUSH
68006: LD_INT 9999
68008: ST_TO_ADDR
// for i := 0 to 5 do
68009: LD_ADDR_VAR 0 6
68013: PUSH
68014: DOUBLE
68015: LD_INT 0
68017: DEC
68018: ST_TO_ADDR
68019: LD_INT 5
68021: PUSH
68022: FOR_TO
68023: IFFALSE 68166
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68025: LD_ADDR_VAR 0 7
68029: PUSH
68030: LD_VAR 0 1
68034: PPUSH
68035: LD_VAR 0 6
68039: PPUSH
68040: LD_VAR 0 11
68044: PPUSH
68045: CALL_OW 272
68049: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68050: LD_ADDR_VAR 0 8
68054: PUSH
68055: LD_VAR 0 2
68059: PPUSH
68060: LD_VAR 0 6
68064: PPUSH
68065: LD_VAR 0 11
68069: PPUSH
68070: CALL_OW 273
68074: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68075: LD_VAR 0 7
68079: PPUSH
68080: LD_VAR 0 8
68084: PPUSH
68085: CALL_OW 488
68089: NOT
68090: IFFALSE 68094
// continue ;
68092: GO 68022
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68094: LD_ADDR_VAR 0 9
68098: PUSH
68099: LD_VAR 0 12
68103: PUSH
68104: LD_INT 1
68106: ARRAY
68107: PPUSH
68108: LD_VAR 0 12
68112: PUSH
68113: LD_INT 2
68115: ARRAY
68116: PPUSH
68117: LD_VAR 0 7
68121: PPUSH
68122: LD_VAR 0 8
68126: PPUSH
68127: CALL_OW 298
68131: ST_TO_ADDR
// if tmp < distance then
68132: LD_VAR 0 9
68136: PUSH
68137: LD_VAR 0 10
68141: LESS
68142: IFFALSE 68164
// begin result := i ;
68144: LD_ADDR_VAR 0 5
68148: PUSH
68149: LD_VAR 0 6
68153: ST_TO_ADDR
// distance := tmp ;
68154: LD_ADDR_VAR 0 10
68158: PUSH
68159: LD_VAR 0 9
68163: ST_TO_ADDR
// end ; end ;
68164: GO 68022
68166: POP
68167: POP
// end ;
68168: LD_VAR 0 5
68172: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68173: LD_INT 0
68175: PPUSH
68176: PPUSH
// if not driver or not IsInUnit ( driver ) then
68177: LD_VAR 0 1
68181: NOT
68182: PUSH
68183: LD_VAR 0 1
68187: PPUSH
68188: CALL_OW 310
68192: NOT
68193: OR
68194: IFFALSE 68198
// exit ;
68196: GO 68288
// vehicle := IsInUnit ( driver ) ;
68198: LD_ADDR_VAR 0 3
68202: PUSH
68203: LD_VAR 0 1
68207: PPUSH
68208: CALL_OW 310
68212: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68213: LD_VAR 0 1
68217: PPUSH
68218: LD_STRING \
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: LD_INT 0
68229: PUSH
68230: LD_INT 0
68232: PUSH
68233: LD_INT 0
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: PUSH
68248: LD_STRING E
68250: PUSH
68251: LD_INT 0
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: LD_VAR 0 3
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: LD_INT 0
68267: PUSH
68268: LD_INT 0
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PPUSH
68284: CALL_OW 446
// end ;
68288: LD_VAR 0 2
68292: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68293: LD_INT 0
68295: PPUSH
68296: PPUSH
// if not driver or not IsInUnit ( driver ) then
68297: LD_VAR 0 1
68301: NOT
68302: PUSH
68303: LD_VAR 0 1
68307: PPUSH
68308: CALL_OW 310
68312: NOT
68313: OR
68314: IFFALSE 68318
// exit ;
68316: GO 68408
// vehicle := IsInUnit ( driver ) ;
68318: LD_ADDR_VAR 0 3
68322: PUSH
68323: LD_VAR 0 1
68327: PPUSH
68328: CALL_OW 310
68332: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68333: LD_VAR 0 1
68337: PPUSH
68338: LD_STRING \
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: LD_INT 0
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: LD_INT 0
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: PUSH
68368: LD_STRING E
68370: PUSH
68371: LD_INT 0
68373: PUSH
68374: LD_INT 0
68376: PUSH
68377: LD_VAR 0 3
68381: PUSH
68382: LD_INT 0
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: LD_INT 0
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PPUSH
68404: CALL_OW 447
// end ;
68408: LD_VAR 0 2
68412: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68413: LD_INT 0
68415: PPUSH
68416: PPUSH
68417: PPUSH
// tmp := [ ] ;
68418: LD_ADDR_VAR 0 5
68422: PUSH
68423: EMPTY
68424: ST_TO_ADDR
// for i in units do
68425: LD_ADDR_VAR 0 4
68429: PUSH
68430: LD_VAR 0 1
68434: PUSH
68435: FOR_IN
68436: IFFALSE 68474
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68438: LD_ADDR_VAR 0 5
68442: PUSH
68443: LD_VAR 0 5
68447: PPUSH
68448: LD_VAR 0 5
68452: PUSH
68453: LD_INT 1
68455: PLUS
68456: PPUSH
68457: LD_VAR 0 4
68461: PPUSH
68462: CALL_OW 256
68466: PPUSH
68467: CALL_OW 2
68471: ST_TO_ADDR
68472: GO 68435
68474: POP
68475: POP
// if not tmp then
68476: LD_VAR 0 5
68480: NOT
68481: IFFALSE 68485
// exit ;
68483: GO 68533
// if asc then
68485: LD_VAR 0 2
68489: IFFALSE 68513
// result := SortListByListAsc ( units , tmp ) else
68491: LD_ADDR_VAR 0 3
68495: PUSH
68496: LD_VAR 0 1
68500: PPUSH
68501: LD_VAR 0 5
68505: PPUSH
68506: CALL_OW 76
68510: ST_TO_ADDR
68511: GO 68533
// result := SortListByListDesc ( units , tmp ) ;
68513: LD_ADDR_VAR 0 3
68517: PUSH
68518: LD_VAR 0 1
68522: PPUSH
68523: LD_VAR 0 5
68527: PPUSH
68528: CALL_OW 77
68532: ST_TO_ADDR
// end ;
68533: LD_VAR 0 3
68537: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68538: LD_INT 0
68540: PPUSH
68541: PPUSH
// task := GetTaskList ( mech ) ;
68542: LD_ADDR_VAR 0 4
68546: PUSH
68547: LD_VAR 0 1
68551: PPUSH
68552: CALL_OW 437
68556: ST_TO_ADDR
// if not task then
68557: LD_VAR 0 4
68561: NOT
68562: IFFALSE 68566
// exit ;
68564: GO 68608
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68566: LD_ADDR_VAR 0 3
68570: PUSH
68571: LD_VAR 0 4
68575: PUSH
68576: LD_INT 1
68578: ARRAY
68579: PUSH
68580: LD_INT 1
68582: ARRAY
68583: PUSH
68584: LD_STRING r
68586: EQUAL
68587: PUSH
68588: LD_VAR 0 4
68592: PUSH
68593: LD_INT 1
68595: ARRAY
68596: PUSH
68597: LD_INT 4
68599: ARRAY
68600: PUSH
68601: LD_VAR 0 2
68605: EQUAL
68606: AND
68607: ST_TO_ADDR
// end ;
68608: LD_VAR 0 3
68612: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68613: LD_INT 0
68615: PPUSH
// SetDir ( unit , d ) ;
68616: LD_VAR 0 1
68620: PPUSH
68621: LD_VAR 0 4
68625: PPUSH
68626: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68630: LD_VAR 0 1
68634: PPUSH
68635: LD_VAR 0 2
68639: PPUSH
68640: LD_VAR 0 3
68644: PPUSH
68645: LD_VAR 0 5
68649: PPUSH
68650: CALL_OW 48
// end ;
68654: LD_VAR 0 6
68658: RET
// export function ToNaturalNumber ( number ) ; begin
68659: LD_INT 0
68661: PPUSH
// result := number div 1 ;
68662: LD_ADDR_VAR 0 2
68666: PUSH
68667: LD_VAR 0 1
68671: PUSH
68672: LD_INT 1
68674: DIV
68675: ST_TO_ADDR
// if number < 0 then
68676: LD_VAR 0 1
68680: PUSH
68681: LD_INT 0
68683: LESS
68684: IFFALSE 68694
// result := 0 ;
68686: LD_ADDR_VAR 0 2
68690: PUSH
68691: LD_INT 0
68693: ST_TO_ADDR
// end ;
68694: LD_VAR 0 2
68698: RET
// export function SortByClass ( units , class ) ; var un ; begin
68699: LD_INT 0
68701: PPUSH
68702: PPUSH
// if not units or not class then
68703: LD_VAR 0 1
68707: NOT
68708: PUSH
68709: LD_VAR 0 2
68713: NOT
68714: OR
68715: IFFALSE 68719
// exit ;
68717: GO 68814
// result := [ ] ;
68719: LD_ADDR_VAR 0 3
68723: PUSH
68724: EMPTY
68725: ST_TO_ADDR
// for un in units do
68726: LD_ADDR_VAR 0 4
68730: PUSH
68731: LD_VAR 0 1
68735: PUSH
68736: FOR_IN
68737: IFFALSE 68812
// if GetClass ( un ) = class then
68739: LD_VAR 0 4
68743: PPUSH
68744: CALL_OW 257
68748: PUSH
68749: LD_VAR 0 2
68753: EQUAL
68754: IFFALSE 68781
// result := Insert ( result , 1 , un ) else
68756: LD_ADDR_VAR 0 3
68760: PUSH
68761: LD_VAR 0 3
68765: PPUSH
68766: LD_INT 1
68768: PPUSH
68769: LD_VAR 0 4
68773: PPUSH
68774: CALL_OW 2
68778: ST_TO_ADDR
68779: GO 68810
// result := Replace ( result , result + 1 , un ) ;
68781: LD_ADDR_VAR 0 3
68785: PUSH
68786: LD_VAR 0 3
68790: PPUSH
68791: LD_VAR 0 3
68795: PUSH
68796: LD_INT 1
68798: PLUS
68799: PPUSH
68800: LD_VAR 0 4
68804: PPUSH
68805: CALL_OW 1
68809: ST_TO_ADDR
68810: GO 68736
68812: POP
68813: POP
// end ;
68814: LD_VAR 0 3
68818: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68819: LD_INT 0
68821: PPUSH
68822: PPUSH
68823: PPUSH
68824: PPUSH
68825: PPUSH
68826: PPUSH
68827: PPUSH
// result := [ ] ;
68828: LD_ADDR_VAR 0 4
68832: PUSH
68833: EMPTY
68834: ST_TO_ADDR
// if x - r < 0 then
68835: LD_VAR 0 1
68839: PUSH
68840: LD_VAR 0 3
68844: MINUS
68845: PUSH
68846: LD_INT 0
68848: LESS
68849: IFFALSE 68861
// min_x := 0 else
68851: LD_ADDR_VAR 0 8
68855: PUSH
68856: LD_INT 0
68858: ST_TO_ADDR
68859: GO 68877
// min_x := x - r ;
68861: LD_ADDR_VAR 0 8
68865: PUSH
68866: LD_VAR 0 1
68870: PUSH
68871: LD_VAR 0 3
68875: MINUS
68876: ST_TO_ADDR
// if y - r < 0 then
68877: LD_VAR 0 2
68881: PUSH
68882: LD_VAR 0 3
68886: MINUS
68887: PUSH
68888: LD_INT 0
68890: LESS
68891: IFFALSE 68903
// min_y := 0 else
68893: LD_ADDR_VAR 0 7
68897: PUSH
68898: LD_INT 0
68900: ST_TO_ADDR
68901: GO 68919
// min_y := y - r ;
68903: LD_ADDR_VAR 0 7
68907: PUSH
68908: LD_VAR 0 2
68912: PUSH
68913: LD_VAR 0 3
68917: MINUS
68918: ST_TO_ADDR
// max_x := x + r ;
68919: LD_ADDR_VAR 0 9
68923: PUSH
68924: LD_VAR 0 1
68928: PUSH
68929: LD_VAR 0 3
68933: PLUS
68934: ST_TO_ADDR
// max_y := y + r ;
68935: LD_ADDR_VAR 0 10
68939: PUSH
68940: LD_VAR 0 2
68944: PUSH
68945: LD_VAR 0 3
68949: PLUS
68950: ST_TO_ADDR
// for _x = min_x to max_x do
68951: LD_ADDR_VAR 0 5
68955: PUSH
68956: DOUBLE
68957: LD_VAR 0 8
68961: DEC
68962: ST_TO_ADDR
68963: LD_VAR 0 9
68967: PUSH
68968: FOR_TO
68969: IFFALSE 69070
// for _y = min_y to max_y do
68971: LD_ADDR_VAR 0 6
68975: PUSH
68976: DOUBLE
68977: LD_VAR 0 7
68981: DEC
68982: ST_TO_ADDR
68983: LD_VAR 0 10
68987: PUSH
68988: FOR_TO
68989: IFFALSE 69066
// begin if not ValidHex ( _x , _y ) then
68991: LD_VAR 0 5
68995: PPUSH
68996: LD_VAR 0 6
69000: PPUSH
69001: CALL_OW 488
69005: NOT
69006: IFFALSE 69010
// continue ;
69008: GO 68988
// if GetResourceTypeXY ( _x , _y ) then
69010: LD_VAR 0 5
69014: PPUSH
69015: LD_VAR 0 6
69019: PPUSH
69020: CALL_OW 283
69024: IFFALSE 69064
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69026: LD_ADDR_VAR 0 4
69030: PUSH
69031: LD_VAR 0 4
69035: PPUSH
69036: LD_VAR 0 4
69040: PUSH
69041: LD_INT 1
69043: PLUS
69044: PPUSH
69045: LD_VAR 0 5
69049: PUSH
69050: LD_VAR 0 6
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PPUSH
69059: CALL_OW 1
69063: ST_TO_ADDR
// end ;
69064: GO 68988
69066: POP
69067: POP
69068: GO 68968
69070: POP
69071: POP
// end ;
69072: LD_VAR 0 4
69076: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69077: LD_INT 0
69079: PPUSH
69080: PPUSH
69081: PPUSH
69082: PPUSH
69083: PPUSH
69084: PPUSH
69085: PPUSH
69086: PPUSH
// if not units then
69087: LD_VAR 0 1
69091: NOT
69092: IFFALSE 69096
// exit ;
69094: GO 69620
// result := UnitFilter ( units , [ f_ok ] ) ;
69096: LD_ADDR_VAR 0 3
69100: PUSH
69101: LD_VAR 0 1
69105: PPUSH
69106: LD_INT 50
69108: PUSH
69109: EMPTY
69110: LIST
69111: PPUSH
69112: CALL_OW 72
69116: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69117: LD_ADDR_VAR 0 8
69121: PUSH
69122: LD_VAR 0 1
69126: PUSH
69127: LD_INT 1
69129: ARRAY
69130: PPUSH
69131: CALL_OW 255
69135: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69136: LD_ADDR_VAR 0 10
69140: PUSH
69141: LD_INT 29
69143: PUSH
69144: LD_INT 91
69146: PUSH
69147: LD_INT 49
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: LIST
69154: ST_TO_ADDR
// if not result then
69155: LD_VAR 0 3
69159: NOT
69160: IFFALSE 69164
// exit ;
69162: GO 69620
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69164: LD_ADDR_VAR 0 5
69168: PUSH
69169: LD_INT 81
69171: PUSH
69172: LD_VAR 0 8
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PPUSH
69181: CALL_OW 69
69185: ST_TO_ADDR
// for i in result do
69186: LD_ADDR_VAR 0 4
69190: PUSH
69191: LD_VAR 0 3
69195: PUSH
69196: FOR_IN
69197: IFFALSE 69618
// begin tag := GetTag ( i ) + 1 ;
69199: LD_ADDR_VAR 0 9
69203: PUSH
69204: LD_VAR 0 4
69208: PPUSH
69209: CALL_OW 110
69213: PUSH
69214: LD_INT 1
69216: PLUS
69217: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69218: LD_ADDR_VAR 0 7
69222: PUSH
69223: LD_VAR 0 4
69227: PPUSH
69228: CALL_OW 250
69232: PPUSH
69233: LD_VAR 0 4
69237: PPUSH
69238: CALL_OW 251
69242: PPUSH
69243: LD_INT 6
69245: PPUSH
69246: CALL 68819 0 3
69250: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69251: LD_VAR 0 4
69255: PPUSH
69256: CALL_OW 247
69260: PUSH
69261: LD_INT 2
69263: EQUAL
69264: PUSH
69265: LD_VAR 0 7
69269: AND
69270: PUSH
69271: LD_VAR 0 4
69275: PPUSH
69276: CALL_OW 264
69280: PUSH
69281: LD_VAR 0 10
69285: IN
69286: NOT
69287: AND
69288: IFFALSE 69327
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69290: LD_VAR 0 4
69294: PPUSH
69295: LD_VAR 0 7
69299: PUSH
69300: LD_INT 1
69302: ARRAY
69303: PUSH
69304: LD_INT 1
69306: ARRAY
69307: PPUSH
69308: LD_VAR 0 7
69312: PUSH
69313: LD_INT 1
69315: ARRAY
69316: PUSH
69317: LD_INT 2
69319: ARRAY
69320: PPUSH
69321: CALL_OW 116
69325: GO 69616
// if path > tag then
69327: LD_VAR 0 2
69331: PUSH
69332: LD_VAR 0 9
69336: GREATER
69337: IFFALSE 69545
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69339: LD_ADDR_VAR 0 6
69343: PUSH
69344: LD_VAR 0 5
69348: PPUSH
69349: LD_INT 91
69351: PUSH
69352: LD_VAR 0 4
69356: PUSH
69357: LD_INT 8
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: LIST
69364: PPUSH
69365: CALL_OW 72
69369: ST_TO_ADDR
// if nearEnemy then
69370: LD_VAR 0 6
69374: IFFALSE 69443
// begin if GetWeapon ( i ) = ru_time_lapser then
69376: LD_VAR 0 4
69380: PPUSH
69381: CALL_OW 264
69385: PUSH
69386: LD_INT 49
69388: EQUAL
69389: IFFALSE 69417
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69391: LD_VAR 0 4
69395: PPUSH
69396: LD_VAR 0 6
69400: PPUSH
69401: LD_VAR 0 4
69405: PPUSH
69406: CALL_OW 74
69410: PPUSH
69411: CALL_OW 112
69415: GO 69441
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69417: LD_VAR 0 4
69421: PPUSH
69422: LD_VAR 0 6
69426: PPUSH
69427: LD_VAR 0 4
69431: PPUSH
69432: CALL_OW 74
69436: PPUSH
69437: CALL_OW 115
// end else
69441: GO 69543
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69443: LD_VAR 0 4
69447: PPUSH
69448: LD_VAR 0 2
69452: PUSH
69453: LD_VAR 0 9
69457: ARRAY
69458: PUSH
69459: LD_INT 1
69461: ARRAY
69462: PPUSH
69463: LD_VAR 0 2
69467: PUSH
69468: LD_VAR 0 9
69472: ARRAY
69473: PUSH
69474: LD_INT 2
69476: ARRAY
69477: PPUSH
69478: CALL_OW 297
69482: PUSH
69483: LD_INT 6
69485: GREATER
69486: IFFALSE 69529
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69488: LD_VAR 0 4
69492: PPUSH
69493: LD_VAR 0 2
69497: PUSH
69498: LD_VAR 0 9
69502: ARRAY
69503: PUSH
69504: LD_INT 1
69506: ARRAY
69507: PPUSH
69508: LD_VAR 0 2
69512: PUSH
69513: LD_VAR 0 9
69517: ARRAY
69518: PUSH
69519: LD_INT 2
69521: ARRAY
69522: PPUSH
69523: CALL_OW 114
69527: GO 69543
// SetTag ( i , tag ) ;
69529: LD_VAR 0 4
69533: PPUSH
69534: LD_VAR 0 9
69538: PPUSH
69539: CALL_OW 109
// end else
69543: GO 69616
// if enemy then
69545: LD_VAR 0 5
69549: IFFALSE 69616
// begin if GetWeapon ( i ) = ru_time_lapser then
69551: LD_VAR 0 4
69555: PPUSH
69556: CALL_OW 264
69560: PUSH
69561: LD_INT 49
69563: EQUAL
69564: IFFALSE 69592
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69566: LD_VAR 0 4
69570: PPUSH
69571: LD_VAR 0 5
69575: PPUSH
69576: LD_VAR 0 4
69580: PPUSH
69581: CALL_OW 74
69585: PPUSH
69586: CALL_OW 112
69590: GO 69616
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69592: LD_VAR 0 4
69596: PPUSH
69597: LD_VAR 0 5
69601: PPUSH
69602: LD_VAR 0 4
69606: PPUSH
69607: CALL_OW 74
69611: PPUSH
69612: CALL_OW 115
// end ; end ;
69616: GO 69196
69618: POP
69619: POP
// end ;
69620: LD_VAR 0 3
69624: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69625: LD_INT 0
69627: PPUSH
69628: PPUSH
69629: PPUSH
// if not unit or IsInUnit ( unit ) then
69630: LD_VAR 0 1
69634: NOT
69635: PUSH
69636: LD_VAR 0 1
69640: PPUSH
69641: CALL_OW 310
69645: OR
69646: IFFALSE 69650
// exit ;
69648: GO 69741
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69650: LD_ADDR_VAR 0 4
69654: PUSH
69655: LD_VAR 0 1
69659: PPUSH
69660: CALL_OW 250
69664: PPUSH
69665: LD_VAR 0 2
69669: PPUSH
69670: LD_INT 1
69672: PPUSH
69673: CALL_OW 272
69677: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69678: LD_ADDR_VAR 0 5
69682: PUSH
69683: LD_VAR 0 1
69687: PPUSH
69688: CALL_OW 251
69692: PPUSH
69693: LD_VAR 0 2
69697: PPUSH
69698: LD_INT 1
69700: PPUSH
69701: CALL_OW 273
69705: ST_TO_ADDR
// if ValidHex ( x , y ) then
69706: LD_VAR 0 4
69710: PPUSH
69711: LD_VAR 0 5
69715: PPUSH
69716: CALL_OW 488
69720: IFFALSE 69741
// ComTurnXY ( unit , x , y ) ;
69722: LD_VAR 0 1
69726: PPUSH
69727: LD_VAR 0 4
69731: PPUSH
69732: LD_VAR 0 5
69736: PPUSH
69737: CALL_OW 118
// end ;
69741: LD_VAR 0 3
69745: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69746: LD_INT 0
69748: PPUSH
69749: PPUSH
// result := false ;
69750: LD_ADDR_VAR 0 3
69754: PUSH
69755: LD_INT 0
69757: ST_TO_ADDR
// if not units then
69758: LD_VAR 0 2
69762: NOT
69763: IFFALSE 69767
// exit ;
69765: GO 69812
// for i in units do
69767: LD_ADDR_VAR 0 4
69771: PUSH
69772: LD_VAR 0 2
69776: PUSH
69777: FOR_IN
69778: IFFALSE 69810
// if See ( side , i ) then
69780: LD_VAR 0 1
69784: PPUSH
69785: LD_VAR 0 4
69789: PPUSH
69790: CALL_OW 292
69794: IFFALSE 69808
// begin result := true ;
69796: LD_ADDR_VAR 0 3
69800: PUSH
69801: LD_INT 1
69803: ST_TO_ADDR
// exit ;
69804: POP
69805: POP
69806: GO 69812
// end ;
69808: GO 69777
69810: POP
69811: POP
// end ;
69812: LD_VAR 0 3
69816: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69817: LD_INT 0
69819: PPUSH
69820: PPUSH
69821: PPUSH
69822: PPUSH
// if not unit or not points then
69823: LD_VAR 0 1
69827: NOT
69828: PUSH
69829: LD_VAR 0 2
69833: NOT
69834: OR
69835: IFFALSE 69839
// exit ;
69837: GO 69929
// dist := 99999 ;
69839: LD_ADDR_VAR 0 5
69843: PUSH
69844: LD_INT 99999
69846: ST_TO_ADDR
// for i in points do
69847: LD_ADDR_VAR 0 4
69851: PUSH
69852: LD_VAR 0 2
69856: PUSH
69857: FOR_IN
69858: IFFALSE 69927
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69860: LD_ADDR_VAR 0 6
69864: PUSH
69865: LD_VAR 0 1
69869: PPUSH
69870: LD_VAR 0 4
69874: PUSH
69875: LD_INT 1
69877: ARRAY
69878: PPUSH
69879: LD_VAR 0 4
69883: PUSH
69884: LD_INT 2
69886: ARRAY
69887: PPUSH
69888: CALL_OW 297
69892: ST_TO_ADDR
// if tmpDist < dist then
69893: LD_VAR 0 6
69897: PUSH
69898: LD_VAR 0 5
69902: LESS
69903: IFFALSE 69925
// begin result := i ;
69905: LD_ADDR_VAR 0 3
69909: PUSH
69910: LD_VAR 0 4
69914: ST_TO_ADDR
// dist := tmpDist ;
69915: LD_ADDR_VAR 0 5
69919: PUSH
69920: LD_VAR 0 6
69924: ST_TO_ADDR
// end ; end ;
69925: GO 69857
69927: POP
69928: POP
// end ;
69929: LD_VAR 0 3
69933: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69934: LD_INT 0
69936: PPUSH
// uc_side := side ;
69937: LD_ADDR_OWVAR 20
69941: PUSH
69942: LD_VAR 0 1
69946: ST_TO_ADDR
// uc_nation := 3 ;
69947: LD_ADDR_OWVAR 21
69951: PUSH
69952: LD_INT 3
69954: ST_TO_ADDR
// vc_chassis := 25 ;
69955: LD_ADDR_OWVAR 37
69959: PUSH
69960: LD_INT 25
69962: ST_TO_ADDR
// vc_engine := engine_siberite ;
69963: LD_ADDR_OWVAR 39
69967: PUSH
69968: LD_INT 3
69970: ST_TO_ADDR
// vc_control := control_computer ;
69971: LD_ADDR_OWVAR 38
69975: PUSH
69976: LD_INT 3
69978: ST_TO_ADDR
// vc_weapon := 59 ;
69979: LD_ADDR_OWVAR 40
69983: PUSH
69984: LD_INT 59
69986: ST_TO_ADDR
// result := CreateVehicle ;
69987: LD_ADDR_VAR 0 5
69991: PUSH
69992: CALL_OW 45
69996: ST_TO_ADDR
// SetDir ( result , d ) ;
69997: LD_VAR 0 5
70001: PPUSH
70002: LD_VAR 0 4
70006: PPUSH
70007: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70011: LD_VAR 0 5
70015: PPUSH
70016: LD_VAR 0 2
70020: PPUSH
70021: LD_VAR 0 3
70025: PPUSH
70026: LD_INT 0
70028: PPUSH
70029: CALL_OW 48
// end ;
70033: LD_VAR 0 5
70037: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70038: LD_INT 0
70040: PPUSH
70041: PPUSH
70042: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70043: LD_ADDR_VAR 0 2
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: LD_INT 0
70056: PUSH
70057: LD_INT 0
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70066: LD_VAR 0 1
70070: NOT
70071: PUSH
70072: LD_VAR 0 1
70076: PPUSH
70077: CALL_OW 264
70081: PUSH
70082: LD_INT 12
70084: PUSH
70085: LD_INT 51
70087: PUSH
70088: LD_INT 32
70090: PUSH
70091: LD_INT 89
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: IN
70100: NOT
70101: OR
70102: IFFALSE 70106
// exit ;
70104: GO 70204
// for i := 1 to 3 do
70106: LD_ADDR_VAR 0 3
70110: PUSH
70111: DOUBLE
70112: LD_INT 1
70114: DEC
70115: ST_TO_ADDR
70116: LD_INT 3
70118: PUSH
70119: FOR_TO
70120: IFFALSE 70202
// begin tmp := GetCargo ( cargo , i ) ;
70122: LD_ADDR_VAR 0 4
70126: PUSH
70127: LD_VAR 0 1
70131: PPUSH
70132: LD_VAR 0 3
70136: PPUSH
70137: CALL_OW 289
70141: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70142: LD_ADDR_VAR 0 2
70146: PUSH
70147: LD_VAR 0 2
70151: PPUSH
70152: LD_VAR 0 3
70156: PPUSH
70157: LD_VAR 0 4
70161: PPUSH
70162: CALL_OW 1
70166: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70167: LD_ADDR_VAR 0 2
70171: PUSH
70172: LD_VAR 0 2
70176: PPUSH
70177: LD_INT 4
70179: PPUSH
70180: LD_VAR 0 2
70184: PUSH
70185: LD_INT 4
70187: ARRAY
70188: PUSH
70189: LD_VAR 0 4
70193: PLUS
70194: PPUSH
70195: CALL_OW 1
70199: ST_TO_ADDR
// end ;
70200: GO 70119
70202: POP
70203: POP
// end ;
70204: LD_VAR 0 2
70208: RET
// export function Length ( array ) ; begin
70209: LD_INT 0
70211: PPUSH
// result := array + 0 ;
70212: LD_ADDR_VAR 0 2
70216: PUSH
70217: LD_VAR 0 1
70221: PUSH
70222: LD_INT 0
70224: PLUS
70225: ST_TO_ADDR
// end ;
70226: LD_VAR 0 2
70230: RET
// export function PrepareArray ( array ) ; begin
70231: LD_INT 0
70233: PPUSH
// result := array diff 0 ;
70234: LD_ADDR_VAR 0 2
70238: PUSH
70239: LD_VAR 0 1
70243: PUSH
70244: LD_INT 0
70246: DIFF
70247: ST_TO_ADDR
// if not result [ 1 ] then
70248: LD_VAR 0 2
70252: PUSH
70253: LD_INT 1
70255: ARRAY
70256: NOT
70257: IFFALSE 70277
// result := Delete ( result , 1 ) ;
70259: LD_ADDR_VAR 0 2
70263: PUSH
70264: LD_VAR 0 2
70268: PPUSH
70269: LD_INT 1
70271: PPUSH
70272: CALL_OW 3
70276: ST_TO_ADDR
// end ;
70277: LD_VAR 0 2
70281: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70282: LD_INT 0
70284: PPUSH
70285: PPUSH
70286: PPUSH
70287: PPUSH
// sibRocketRange := 25 ;
70288: LD_ADDR_VAR 0 6
70292: PUSH
70293: LD_INT 25
70295: ST_TO_ADDR
// result := false ;
70296: LD_ADDR_VAR 0 4
70300: PUSH
70301: LD_INT 0
70303: ST_TO_ADDR
// for i := 0 to 5 do
70304: LD_ADDR_VAR 0 5
70308: PUSH
70309: DOUBLE
70310: LD_INT 0
70312: DEC
70313: ST_TO_ADDR
70314: LD_INT 5
70316: PUSH
70317: FOR_TO
70318: IFFALSE 70385
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70320: LD_VAR 0 1
70324: PPUSH
70325: LD_VAR 0 5
70329: PPUSH
70330: LD_VAR 0 6
70334: PPUSH
70335: CALL_OW 272
70339: PPUSH
70340: LD_VAR 0 2
70344: PPUSH
70345: LD_VAR 0 5
70349: PPUSH
70350: LD_VAR 0 6
70354: PPUSH
70355: CALL_OW 273
70359: PPUSH
70360: LD_VAR 0 3
70364: PPUSH
70365: CALL_OW 309
70369: IFFALSE 70383
// begin result := true ;
70371: LD_ADDR_VAR 0 4
70375: PUSH
70376: LD_INT 1
70378: ST_TO_ADDR
// exit ;
70379: POP
70380: POP
70381: GO 70387
// end ;
70383: GO 70317
70385: POP
70386: POP
// end ;
70387: LD_VAR 0 4
70391: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70392: LD_INT 0
70394: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70395: LD_VAR 0 1
70399: PPUSH
70400: LD_VAR 0 2
70404: PPUSH
70405: LD_INT 0
70407: PPUSH
70408: LD_INT 0
70410: PPUSH
70411: LD_INT 1
70413: PPUSH
70414: LD_INT 0
70416: PPUSH
70417: CALL_OW 587
// end ; end_of_file end_of_file
70421: LD_VAR 0 3
70425: RET
// every 0 0$1 do
70426: GO 70428
70428: DISABLE
// begin enable ;
70429: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70430: LD_STRING updateTimer(
70432: PUSH
70433: LD_OWVAR 1
70437: STR
70438: PUSH
70439: LD_STRING );
70441: STR
70442: PPUSH
70443: CALL_OW 559
// end ;
70447: END
// export function SOS_MapStart ( ) ; begin
70448: LD_INT 0
70450: PPUSH
// if streamModeActive then
70451: LD_EXP 63
70455: IFFALSE 70464
// DefineStreamItems ( true ) ;
70457: LD_INT 1
70459: PPUSH
70460: CALL 72268 0 1
// UpdateLuaVariables ( ) ;
70464: CALL 70481 0 0
// UpdateFactoryWaypoints ( ) ;
70468: CALL 85129 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70472: CALL 85386 0 0
// end ;
70476: LD_VAR 0 1
70480: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
70481: LD_INT 0
70483: PPUSH
// if not globalGameSaveCounter then
70484: LD_EXP 62
70488: NOT
70489: IFFALSE 70500
// ToLua ( setGameSaveCounter(0) ) else
70491: LD_STRING setGameSaveCounter(0)
70493: PPUSH
70494: CALL_OW 559
70498: GO 70532
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
70500: LD_ADDR_EXP 62
70504: PUSH
70505: LD_EXP 62
70509: PPUSH
70510: CALL 67834 0 1
70514: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70515: LD_STRING setGameSaveCounter(
70517: PUSH
70518: LD_EXP 62
70522: STR
70523: PUSH
70524: LD_STRING )
70526: STR
70527: PPUSH
70528: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
70532: LD_STRING setGameDifficulty(
70534: PUSH
70535: LD_OWVAR 67
70539: STR
70540: PUSH
70541: LD_STRING )
70543: STR
70544: PPUSH
70545: CALL_OW 559
// end ;
70549: LD_VAR 0 1
70553: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70554: LD_INT 0
70556: PPUSH
// if p2 = stream_mode then
70557: LD_VAR 0 2
70561: PUSH
70562: LD_INT 100
70564: EQUAL
70565: IFFALSE 71568
// begin if not StreamModeActive then
70567: LD_EXP 63
70571: NOT
70572: IFFALSE 70582
// StreamModeActive := true ;
70574: LD_ADDR_EXP 63
70578: PUSH
70579: LD_INT 1
70581: ST_TO_ADDR
// if p3 = 0 then
70582: LD_VAR 0 3
70586: PUSH
70587: LD_INT 0
70589: EQUAL
70590: IFFALSE 70596
// InitStreamMode ;
70592: CALL 71804 0 0
// if p3 = 1 then
70596: LD_VAR 0 3
70600: PUSH
70601: LD_INT 1
70603: EQUAL
70604: IFFALSE 70614
// sRocket := true ;
70606: LD_ADDR_EXP 68
70610: PUSH
70611: LD_INT 1
70613: ST_TO_ADDR
// if p3 = 2 then
70614: LD_VAR 0 3
70618: PUSH
70619: LD_INT 2
70621: EQUAL
70622: IFFALSE 70632
// sSpeed := true ;
70624: LD_ADDR_EXP 67
70628: PUSH
70629: LD_INT 1
70631: ST_TO_ADDR
// if p3 = 3 then
70632: LD_VAR 0 3
70636: PUSH
70637: LD_INT 3
70639: EQUAL
70640: IFFALSE 70650
// sEngine := true ;
70642: LD_ADDR_EXP 69
70646: PUSH
70647: LD_INT 1
70649: ST_TO_ADDR
// if p3 = 4 then
70650: LD_VAR 0 3
70654: PUSH
70655: LD_INT 4
70657: EQUAL
70658: IFFALSE 70668
// sSpec := true ;
70660: LD_ADDR_EXP 66
70664: PUSH
70665: LD_INT 1
70667: ST_TO_ADDR
// if p3 = 5 then
70668: LD_VAR 0 3
70672: PUSH
70673: LD_INT 5
70675: EQUAL
70676: IFFALSE 70686
// sLevel := true ;
70678: LD_ADDR_EXP 70
70682: PUSH
70683: LD_INT 1
70685: ST_TO_ADDR
// if p3 = 6 then
70686: LD_VAR 0 3
70690: PUSH
70691: LD_INT 6
70693: EQUAL
70694: IFFALSE 70704
// sArmoury := true ;
70696: LD_ADDR_EXP 71
70700: PUSH
70701: LD_INT 1
70703: ST_TO_ADDR
// if p3 = 7 then
70704: LD_VAR 0 3
70708: PUSH
70709: LD_INT 7
70711: EQUAL
70712: IFFALSE 70722
// sRadar := true ;
70714: LD_ADDR_EXP 72
70718: PUSH
70719: LD_INT 1
70721: ST_TO_ADDR
// if p3 = 8 then
70722: LD_VAR 0 3
70726: PUSH
70727: LD_INT 8
70729: EQUAL
70730: IFFALSE 70740
// sBunker := true ;
70732: LD_ADDR_EXP 73
70736: PUSH
70737: LD_INT 1
70739: ST_TO_ADDR
// if p3 = 9 then
70740: LD_VAR 0 3
70744: PUSH
70745: LD_INT 9
70747: EQUAL
70748: IFFALSE 70758
// sHack := true ;
70750: LD_ADDR_EXP 74
70754: PUSH
70755: LD_INT 1
70757: ST_TO_ADDR
// if p3 = 10 then
70758: LD_VAR 0 3
70762: PUSH
70763: LD_INT 10
70765: EQUAL
70766: IFFALSE 70776
// sFire := true ;
70768: LD_ADDR_EXP 75
70772: PUSH
70773: LD_INT 1
70775: ST_TO_ADDR
// if p3 = 11 then
70776: LD_VAR 0 3
70780: PUSH
70781: LD_INT 11
70783: EQUAL
70784: IFFALSE 70794
// sRefresh := true ;
70786: LD_ADDR_EXP 76
70790: PUSH
70791: LD_INT 1
70793: ST_TO_ADDR
// if p3 = 12 then
70794: LD_VAR 0 3
70798: PUSH
70799: LD_INT 12
70801: EQUAL
70802: IFFALSE 70812
// sExp := true ;
70804: LD_ADDR_EXP 77
70808: PUSH
70809: LD_INT 1
70811: ST_TO_ADDR
// if p3 = 13 then
70812: LD_VAR 0 3
70816: PUSH
70817: LD_INT 13
70819: EQUAL
70820: IFFALSE 70830
// sDepot := true ;
70822: LD_ADDR_EXP 78
70826: PUSH
70827: LD_INT 1
70829: ST_TO_ADDR
// if p3 = 14 then
70830: LD_VAR 0 3
70834: PUSH
70835: LD_INT 14
70837: EQUAL
70838: IFFALSE 70848
// sFlag := true ;
70840: LD_ADDR_EXP 79
70844: PUSH
70845: LD_INT 1
70847: ST_TO_ADDR
// if p3 = 15 then
70848: LD_VAR 0 3
70852: PUSH
70853: LD_INT 15
70855: EQUAL
70856: IFFALSE 70866
// sKamikadze := true ;
70858: LD_ADDR_EXP 87
70862: PUSH
70863: LD_INT 1
70865: ST_TO_ADDR
// if p3 = 16 then
70866: LD_VAR 0 3
70870: PUSH
70871: LD_INT 16
70873: EQUAL
70874: IFFALSE 70884
// sTroll := true ;
70876: LD_ADDR_EXP 88
70880: PUSH
70881: LD_INT 1
70883: ST_TO_ADDR
// if p3 = 17 then
70884: LD_VAR 0 3
70888: PUSH
70889: LD_INT 17
70891: EQUAL
70892: IFFALSE 70902
// sSlow := true ;
70894: LD_ADDR_EXP 89
70898: PUSH
70899: LD_INT 1
70901: ST_TO_ADDR
// if p3 = 18 then
70902: LD_VAR 0 3
70906: PUSH
70907: LD_INT 18
70909: EQUAL
70910: IFFALSE 70920
// sLack := true ;
70912: LD_ADDR_EXP 90
70916: PUSH
70917: LD_INT 1
70919: ST_TO_ADDR
// if p3 = 19 then
70920: LD_VAR 0 3
70924: PUSH
70925: LD_INT 19
70927: EQUAL
70928: IFFALSE 70938
// sTank := true ;
70930: LD_ADDR_EXP 92
70934: PUSH
70935: LD_INT 1
70937: ST_TO_ADDR
// if p3 = 20 then
70938: LD_VAR 0 3
70942: PUSH
70943: LD_INT 20
70945: EQUAL
70946: IFFALSE 70956
// sRemote := true ;
70948: LD_ADDR_EXP 93
70952: PUSH
70953: LD_INT 1
70955: ST_TO_ADDR
// if p3 = 21 then
70956: LD_VAR 0 3
70960: PUSH
70961: LD_INT 21
70963: EQUAL
70964: IFFALSE 70974
// sPowell := true ;
70966: LD_ADDR_EXP 94
70970: PUSH
70971: LD_INT 1
70973: ST_TO_ADDR
// if p3 = 22 then
70974: LD_VAR 0 3
70978: PUSH
70979: LD_INT 22
70981: EQUAL
70982: IFFALSE 70992
// sTeleport := true ;
70984: LD_ADDR_EXP 97
70988: PUSH
70989: LD_INT 1
70991: ST_TO_ADDR
// if p3 = 23 then
70992: LD_VAR 0 3
70996: PUSH
70997: LD_INT 23
70999: EQUAL
71000: IFFALSE 71010
// sOilTower := true ;
71002: LD_ADDR_EXP 99
71006: PUSH
71007: LD_INT 1
71009: ST_TO_ADDR
// if p3 = 24 then
71010: LD_VAR 0 3
71014: PUSH
71015: LD_INT 24
71017: EQUAL
71018: IFFALSE 71028
// sShovel := true ;
71020: LD_ADDR_EXP 100
71024: PUSH
71025: LD_INT 1
71027: ST_TO_ADDR
// if p3 = 25 then
71028: LD_VAR 0 3
71032: PUSH
71033: LD_INT 25
71035: EQUAL
71036: IFFALSE 71046
// sSheik := true ;
71038: LD_ADDR_EXP 101
71042: PUSH
71043: LD_INT 1
71045: ST_TO_ADDR
// if p3 = 26 then
71046: LD_VAR 0 3
71050: PUSH
71051: LD_INT 26
71053: EQUAL
71054: IFFALSE 71064
// sEarthquake := true ;
71056: LD_ADDR_EXP 103
71060: PUSH
71061: LD_INT 1
71063: ST_TO_ADDR
// if p3 = 27 then
71064: LD_VAR 0 3
71068: PUSH
71069: LD_INT 27
71071: EQUAL
71072: IFFALSE 71082
// sAI := true ;
71074: LD_ADDR_EXP 104
71078: PUSH
71079: LD_INT 1
71081: ST_TO_ADDR
// if p3 = 28 then
71082: LD_VAR 0 3
71086: PUSH
71087: LD_INT 28
71089: EQUAL
71090: IFFALSE 71100
// sCargo := true ;
71092: LD_ADDR_EXP 107
71096: PUSH
71097: LD_INT 1
71099: ST_TO_ADDR
// if p3 = 29 then
71100: LD_VAR 0 3
71104: PUSH
71105: LD_INT 29
71107: EQUAL
71108: IFFALSE 71118
// sDLaser := true ;
71110: LD_ADDR_EXP 108
71114: PUSH
71115: LD_INT 1
71117: ST_TO_ADDR
// if p3 = 30 then
71118: LD_VAR 0 3
71122: PUSH
71123: LD_INT 30
71125: EQUAL
71126: IFFALSE 71136
// sExchange := true ;
71128: LD_ADDR_EXP 109
71132: PUSH
71133: LD_INT 1
71135: ST_TO_ADDR
// if p3 = 31 then
71136: LD_VAR 0 3
71140: PUSH
71141: LD_INT 31
71143: EQUAL
71144: IFFALSE 71154
// sFac := true ;
71146: LD_ADDR_EXP 110
71150: PUSH
71151: LD_INT 1
71153: ST_TO_ADDR
// if p3 = 32 then
71154: LD_VAR 0 3
71158: PUSH
71159: LD_INT 32
71161: EQUAL
71162: IFFALSE 71172
// sPower := true ;
71164: LD_ADDR_EXP 111
71168: PUSH
71169: LD_INT 1
71171: ST_TO_ADDR
// if p3 = 33 then
71172: LD_VAR 0 3
71176: PUSH
71177: LD_INT 33
71179: EQUAL
71180: IFFALSE 71190
// sRandom := true ;
71182: LD_ADDR_EXP 112
71186: PUSH
71187: LD_INT 1
71189: ST_TO_ADDR
// if p3 = 34 then
71190: LD_VAR 0 3
71194: PUSH
71195: LD_INT 34
71197: EQUAL
71198: IFFALSE 71208
// sShield := true ;
71200: LD_ADDR_EXP 113
71204: PUSH
71205: LD_INT 1
71207: ST_TO_ADDR
// if p3 = 35 then
71208: LD_VAR 0 3
71212: PUSH
71213: LD_INT 35
71215: EQUAL
71216: IFFALSE 71226
// sTime := true ;
71218: LD_ADDR_EXP 114
71222: PUSH
71223: LD_INT 1
71225: ST_TO_ADDR
// if p3 = 36 then
71226: LD_VAR 0 3
71230: PUSH
71231: LD_INT 36
71233: EQUAL
71234: IFFALSE 71244
// sTools := true ;
71236: LD_ADDR_EXP 115
71240: PUSH
71241: LD_INT 1
71243: ST_TO_ADDR
// if p3 = 101 then
71244: LD_VAR 0 3
71248: PUSH
71249: LD_INT 101
71251: EQUAL
71252: IFFALSE 71262
// sSold := true ;
71254: LD_ADDR_EXP 80
71258: PUSH
71259: LD_INT 1
71261: ST_TO_ADDR
// if p3 = 102 then
71262: LD_VAR 0 3
71266: PUSH
71267: LD_INT 102
71269: EQUAL
71270: IFFALSE 71280
// sDiff := true ;
71272: LD_ADDR_EXP 81
71276: PUSH
71277: LD_INT 1
71279: ST_TO_ADDR
// if p3 = 103 then
71280: LD_VAR 0 3
71284: PUSH
71285: LD_INT 103
71287: EQUAL
71288: IFFALSE 71298
// sFog := true ;
71290: LD_ADDR_EXP 84
71294: PUSH
71295: LD_INT 1
71297: ST_TO_ADDR
// if p3 = 104 then
71298: LD_VAR 0 3
71302: PUSH
71303: LD_INT 104
71305: EQUAL
71306: IFFALSE 71316
// sReset := true ;
71308: LD_ADDR_EXP 85
71312: PUSH
71313: LD_INT 1
71315: ST_TO_ADDR
// if p3 = 105 then
71316: LD_VAR 0 3
71320: PUSH
71321: LD_INT 105
71323: EQUAL
71324: IFFALSE 71334
// sSun := true ;
71326: LD_ADDR_EXP 86
71330: PUSH
71331: LD_INT 1
71333: ST_TO_ADDR
// if p3 = 106 then
71334: LD_VAR 0 3
71338: PUSH
71339: LD_INT 106
71341: EQUAL
71342: IFFALSE 71352
// sTiger := true ;
71344: LD_ADDR_EXP 82
71348: PUSH
71349: LD_INT 1
71351: ST_TO_ADDR
// if p3 = 107 then
71352: LD_VAR 0 3
71356: PUSH
71357: LD_INT 107
71359: EQUAL
71360: IFFALSE 71370
// sBomb := true ;
71362: LD_ADDR_EXP 83
71366: PUSH
71367: LD_INT 1
71369: ST_TO_ADDR
// if p3 = 108 then
71370: LD_VAR 0 3
71374: PUSH
71375: LD_INT 108
71377: EQUAL
71378: IFFALSE 71388
// sWound := true ;
71380: LD_ADDR_EXP 91
71384: PUSH
71385: LD_INT 1
71387: ST_TO_ADDR
// if p3 = 109 then
71388: LD_VAR 0 3
71392: PUSH
71393: LD_INT 109
71395: EQUAL
71396: IFFALSE 71406
// sBetray := true ;
71398: LD_ADDR_EXP 95
71402: PUSH
71403: LD_INT 1
71405: ST_TO_ADDR
// if p3 = 110 then
71406: LD_VAR 0 3
71410: PUSH
71411: LD_INT 110
71413: EQUAL
71414: IFFALSE 71424
// sContamin := true ;
71416: LD_ADDR_EXP 96
71420: PUSH
71421: LD_INT 1
71423: ST_TO_ADDR
// if p3 = 111 then
71424: LD_VAR 0 3
71428: PUSH
71429: LD_INT 111
71431: EQUAL
71432: IFFALSE 71442
// sOil := true ;
71434: LD_ADDR_EXP 98
71438: PUSH
71439: LD_INT 1
71441: ST_TO_ADDR
// if p3 = 112 then
71442: LD_VAR 0 3
71446: PUSH
71447: LD_INT 112
71449: EQUAL
71450: IFFALSE 71460
// sStu := true ;
71452: LD_ADDR_EXP 102
71456: PUSH
71457: LD_INT 1
71459: ST_TO_ADDR
// if p3 = 113 then
71460: LD_VAR 0 3
71464: PUSH
71465: LD_INT 113
71467: EQUAL
71468: IFFALSE 71478
// sBazooka := true ;
71470: LD_ADDR_EXP 105
71474: PUSH
71475: LD_INT 1
71477: ST_TO_ADDR
// if p3 = 114 then
71478: LD_VAR 0 3
71482: PUSH
71483: LD_INT 114
71485: EQUAL
71486: IFFALSE 71496
// sMortar := true ;
71488: LD_ADDR_EXP 106
71492: PUSH
71493: LD_INT 1
71495: ST_TO_ADDR
// if p3 = 115 then
71496: LD_VAR 0 3
71500: PUSH
71501: LD_INT 115
71503: EQUAL
71504: IFFALSE 71514
// sRanger := true ;
71506: LD_ADDR_EXP 116
71510: PUSH
71511: LD_INT 1
71513: ST_TO_ADDR
// if p3 = 116 then
71514: LD_VAR 0 3
71518: PUSH
71519: LD_INT 116
71521: EQUAL
71522: IFFALSE 71532
// sComputer := true ;
71524: LD_ADDR_EXP 117
71528: PUSH
71529: LD_INT 1
71531: ST_TO_ADDR
// if p3 = 117 then
71532: LD_VAR 0 3
71536: PUSH
71537: LD_INT 117
71539: EQUAL
71540: IFFALSE 71550
// s30 := true ;
71542: LD_ADDR_EXP 118
71546: PUSH
71547: LD_INT 1
71549: ST_TO_ADDR
// if p3 = 118 then
71550: LD_VAR 0 3
71554: PUSH
71555: LD_INT 118
71557: EQUAL
71558: IFFALSE 71568
// s60 := true ;
71560: LD_ADDR_EXP 119
71564: PUSH
71565: LD_INT 1
71567: ST_TO_ADDR
// end ; if p2 = hack_mode then
71568: LD_VAR 0 2
71572: PUSH
71573: LD_INT 101
71575: EQUAL
71576: IFFALSE 71704
// begin case p3 of 1 :
71578: LD_VAR 0 3
71582: PUSH
71583: LD_INT 1
71585: DOUBLE
71586: EQUAL
71587: IFTRUE 71591
71589: GO 71598
71591: POP
// hHackUnlimitedResources ; 2 :
71592: CALL 83875 0 0
71596: GO 71704
71598: LD_INT 2
71600: DOUBLE
71601: EQUAL
71602: IFTRUE 71606
71604: GO 71613
71606: POP
// hHackSetLevel10 ; 3 :
71607: CALL 84008 0 0
71611: GO 71704
71613: LD_INT 3
71615: DOUBLE
71616: EQUAL
71617: IFTRUE 71621
71619: GO 71628
71621: POP
// hHackSetLevel10YourUnits ; 4 :
71622: CALL 84093 0 0
71626: GO 71704
71628: LD_INT 4
71630: DOUBLE
71631: EQUAL
71632: IFTRUE 71636
71634: GO 71643
71636: POP
// hHackInvincible ; 5 :
71637: CALL 84541 0 0
71641: GO 71704
71643: LD_INT 5
71645: DOUBLE
71646: EQUAL
71647: IFTRUE 71651
71649: GO 71658
71651: POP
// hHackInvisible ; 6 :
71652: CALL 84652 0 0
71656: GO 71704
71658: LD_INT 6
71660: DOUBLE
71661: EQUAL
71662: IFTRUE 71666
71664: GO 71673
71666: POP
// hHackChangeYourSide ; 7 :
71667: CALL 84709 0 0
71671: GO 71704
71673: LD_INT 7
71675: DOUBLE
71676: EQUAL
71677: IFTRUE 71681
71679: GO 71688
71681: POP
// hHackChangeUnitSide ; 8 :
71682: CALL 84751 0 0
71686: GO 71704
71688: LD_INT 8
71690: DOUBLE
71691: EQUAL
71692: IFTRUE 71696
71694: GO 71703
71696: POP
// hHackFog ; end ;
71697: CALL 84852 0 0
71701: GO 71704
71703: POP
// end ; if p2 = game_save_mode then
71704: LD_VAR 0 2
71708: PUSH
71709: LD_INT 102
71711: EQUAL
71712: IFFALSE 71777
// begin if p3 = 1 then
71714: LD_VAR 0 3
71718: PUSH
71719: LD_INT 1
71721: EQUAL
71722: IFFALSE 71734
// globalGameSaveCounter := p4 ;
71724: LD_ADDR_EXP 62
71728: PUSH
71729: LD_VAR 0 4
71733: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
71734: LD_VAR 0 3
71738: PUSH
71739: LD_INT 2
71741: EQUAL
71742: PUSH
71743: LD_EXP 62
71747: AND
71748: IFFALSE 71767
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71750: LD_STRING setGameSaveCounter(
71752: PUSH
71753: LD_EXP 62
71757: STR
71758: PUSH
71759: LD_STRING )
71761: STR
71762: PPUSH
71763: CALL_OW 559
// display_strings := globalGameSaveCounter ;
71767: LD_ADDR_OWVAR 47
71771: PUSH
71772: LD_EXP 62
71776: ST_TO_ADDR
// end ; end ;
71777: LD_VAR 0 7
71781: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
71782: GO 71784
71784: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
71785: LD_STRING initStreamRollete();
71787: PPUSH
71788: CALL_OW 559
// InitStreamMode ;
71792: CALL 71804 0 0
// DefineStreamItems ( false ) ;
71796: LD_INT 0
71798: PPUSH
71799: CALL 72268 0 1
// end ;
71803: END
// function InitStreamMode ; begin
71804: LD_INT 0
71806: PPUSH
// streamModeActive := false ;
71807: LD_ADDR_EXP 63
71811: PUSH
71812: LD_INT 0
71814: ST_TO_ADDR
// normalCounter := 36 ;
71815: LD_ADDR_EXP 64
71819: PUSH
71820: LD_INT 36
71822: ST_TO_ADDR
// hardcoreCounter := 18 ;
71823: LD_ADDR_EXP 65
71827: PUSH
71828: LD_INT 18
71830: ST_TO_ADDR
// sRocket := false ;
71831: LD_ADDR_EXP 68
71835: PUSH
71836: LD_INT 0
71838: ST_TO_ADDR
// sSpeed := false ;
71839: LD_ADDR_EXP 67
71843: PUSH
71844: LD_INT 0
71846: ST_TO_ADDR
// sEngine := false ;
71847: LD_ADDR_EXP 69
71851: PUSH
71852: LD_INT 0
71854: ST_TO_ADDR
// sSpec := false ;
71855: LD_ADDR_EXP 66
71859: PUSH
71860: LD_INT 0
71862: ST_TO_ADDR
// sLevel := false ;
71863: LD_ADDR_EXP 70
71867: PUSH
71868: LD_INT 0
71870: ST_TO_ADDR
// sArmoury := false ;
71871: LD_ADDR_EXP 71
71875: PUSH
71876: LD_INT 0
71878: ST_TO_ADDR
// sRadar := false ;
71879: LD_ADDR_EXP 72
71883: PUSH
71884: LD_INT 0
71886: ST_TO_ADDR
// sBunker := false ;
71887: LD_ADDR_EXP 73
71891: PUSH
71892: LD_INT 0
71894: ST_TO_ADDR
// sHack := false ;
71895: LD_ADDR_EXP 74
71899: PUSH
71900: LD_INT 0
71902: ST_TO_ADDR
// sFire := false ;
71903: LD_ADDR_EXP 75
71907: PUSH
71908: LD_INT 0
71910: ST_TO_ADDR
// sRefresh := false ;
71911: LD_ADDR_EXP 76
71915: PUSH
71916: LD_INT 0
71918: ST_TO_ADDR
// sExp := false ;
71919: LD_ADDR_EXP 77
71923: PUSH
71924: LD_INT 0
71926: ST_TO_ADDR
// sDepot := false ;
71927: LD_ADDR_EXP 78
71931: PUSH
71932: LD_INT 0
71934: ST_TO_ADDR
// sFlag := false ;
71935: LD_ADDR_EXP 79
71939: PUSH
71940: LD_INT 0
71942: ST_TO_ADDR
// sKamikadze := false ;
71943: LD_ADDR_EXP 87
71947: PUSH
71948: LD_INT 0
71950: ST_TO_ADDR
// sTroll := false ;
71951: LD_ADDR_EXP 88
71955: PUSH
71956: LD_INT 0
71958: ST_TO_ADDR
// sSlow := false ;
71959: LD_ADDR_EXP 89
71963: PUSH
71964: LD_INT 0
71966: ST_TO_ADDR
// sLack := false ;
71967: LD_ADDR_EXP 90
71971: PUSH
71972: LD_INT 0
71974: ST_TO_ADDR
// sTank := false ;
71975: LD_ADDR_EXP 92
71979: PUSH
71980: LD_INT 0
71982: ST_TO_ADDR
// sRemote := false ;
71983: LD_ADDR_EXP 93
71987: PUSH
71988: LD_INT 0
71990: ST_TO_ADDR
// sPowell := false ;
71991: LD_ADDR_EXP 94
71995: PUSH
71996: LD_INT 0
71998: ST_TO_ADDR
// sTeleport := false ;
71999: LD_ADDR_EXP 97
72003: PUSH
72004: LD_INT 0
72006: ST_TO_ADDR
// sOilTower := false ;
72007: LD_ADDR_EXP 99
72011: PUSH
72012: LD_INT 0
72014: ST_TO_ADDR
// sShovel := false ;
72015: LD_ADDR_EXP 100
72019: PUSH
72020: LD_INT 0
72022: ST_TO_ADDR
// sSheik := false ;
72023: LD_ADDR_EXP 101
72027: PUSH
72028: LD_INT 0
72030: ST_TO_ADDR
// sEarthquake := false ;
72031: LD_ADDR_EXP 103
72035: PUSH
72036: LD_INT 0
72038: ST_TO_ADDR
// sAI := false ;
72039: LD_ADDR_EXP 104
72043: PUSH
72044: LD_INT 0
72046: ST_TO_ADDR
// sCargo := false ;
72047: LD_ADDR_EXP 107
72051: PUSH
72052: LD_INT 0
72054: ST_TO_ADDR
// sDLaser := false ;
72055: LD_ADDR_EXP 108
72059: PUSH
72060: LD_INT 0
72062: ST_TO_ADDR
// sExchange := false ;
72063: LD_ADDR_EXP 109
72067: PUSH
72068: LD_INT 0
72070: ST_TO_ADDR
// sFac := false ;
72071: LD_ADDR_EXP 110
72075: PUSH
72076: LD_INT 0
72078: ST_TO_ADDR
// sPower := false ;
72079: LD_ADDR_EXP 111
72083: PUSH
72084: LD_INT 0
72086: ST_TO_ADDR
// sRandom := false ;
72087: LD_ADDR_EXP 112
72091: PUSH
72092: LD_INT 0
72094: ST_TO_ADDR
// sShield := false ;
72095: LD_ADDR_EXP 113
72099: PUSH
72100: LD_INT 0
72102: ST_TO_ADDR
// sTime := false ;
72103: LD_ADDR_EXP 114
72107: PUSH
72108: LD_INT 0
72110: ST_TO_ADDR
// sTools := false ;
72111: LD_ADDR_EXP 115
72115: PUSH
72116: LD_INT 0
72118: ST_TO_ADDR
// sSold := false ;
72119: LD_ADDR_EXP 80
72123: PUSH
72124: LD_INT 0
72126: ST_TO_ADDR
// sDiff := false ;
72127: LD_ADDR_EXP 81
72131: PUSH
72132: LD_INT 0
72134: ST_TO_ADDR
// sFog := false ;
72135: LD_ADDR_EXP 84
72139: PUSH
72140: LD_INT 0
72142: ST_TO_ADDR
// sReset := false ;
72143: LD_ADDR_EXP 85
72147: PUSH
72148: LD_INT 0
72150: ST_TO_ADDR
// sSun := false ;
72151: LD_ADDR_EXP 86
72155: PUSH
72156: LD_INT 0
72158: ST_TO_ADDR
// sTiger := false ;
72159: LD_ADDR_EXP 82
72163: PUSH
72164: LD_INT 0
72166: ST_TO_ADDR
// sBomb := false ;
72167: LD_ADDR_EXP 83
72171: PUSH
72172: LD_INT 0
72174: ST_TO_ADDR
// sWound := false ;
72175: LD_ADDR_EXP 91
72179: PUSH
72180: LD_INT 0
72182: ST_TO_ADDR
// sBetray := false ;
72183: LD_ADDR_EXP 95
72187: PUSH
72188: LD_INT 0
72190: ST_TO_ADDR
// sContamin := false ;
72191: LD_ADDR_EXP 96
72195: PUSH
72196: LD_INT 0
72198: ST_TO_ADDR
// sOil := false ;
72199: LD_ADDR_EXP 98
72203: PUSH
72204: LD_INT 0
72206: ST_TO_ADDR
// sStu := false ;
72207: LD_ADDR_EXP 102
72211: PUSH
72212: LD_INT 0
72214: ST_TO_ADDR
// sBazooka := false ;
72215: LD_ADDR_EXP 105
72219: PUSH
72220: LD_INT 0
72222: ST_TO_ADDR
// sMortar := false ;
72223: LD_ADDR_EXP 106
72227: PUSH
72228: LD_INT 0
72230: ST_TO_ADDR
// sRanger := false ;
72231: LD_ADDR_EXP 116
72235: PUSH
72236: LD_INT 0
72238: ST_TO_ADDR
// sComputer := false ;
72239: LD_ADDR_EXP 117
72243: PUSH
72244: LD_INT 0
72246: ST_TO_ADDR
// s30 := false ;
72247: LD_ADDR_EXP 118
72251: PUSH
72252: LD_INT 0
72254: ST_TO_ADDR
// s60 := false ;
72255: LD_ADDR_EXP 119
72259: PUSH
72260: LD_INT 0
72262: ST_TO_ADDR
// end ;
72263: LD_VAR 0 1
72267: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72268: LD_INT 0
72270: PPUSH
72271: PPUSH
72272: PPUSH
72273: PPUSH
72274: PPUSH
72275: PPUSH
72276: PPUSH
// result := [ ] ;
72277: LD_ADDR_VAR 0 2
72281: PUSH
72282: EMPTY
72283: ST_TO_ADDR
// if campaign_id = 1 then
72284: LD_OWVAR 69
72288: PUSH
72289: LD_INT 1
72291: EQUAL
72292: IFFALSE 75458
// begin case mission_number of 1 :
72294: LD_OWVAR 70
72298: PUSH
72299: LD_INT 1
72301: DOUBLE
72302: EQUAL
72303: IFTRUE 72307
72305: GO 72383
72307: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72308: LD_ADDR_VAR 0 2
72312: PUSH
72313: LD_INT 2
72315: PUSH
72316: LD_INT 4
72318: PUSH
72319: LD_INT 11
72321: PUSH
72322: LD_INT 12
72324: PUSH
72325: LD_INT 15
72327: PUSH
72328: LD_INT 16
72330: PUSH
72331: LD_INT 22
72333: PUSH
72334: LD_INT 23
72336: PUSH
72337: LD_INT 26
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 101
72353: PUSH
72354: LD_INT 102
72356: PUSH
72357: LD_INT 106
72359: PUSH
72360: LD_INT 116
72362: PUSH
72363: LD_INT 117
72365: PUSH
72366: LD_INT 118
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: ST_TO_ADDR
72381: GO 75456
72383: LD_INT 2
72385: DOUBLE
72386: EQUAL
72387: IFTRUE 72391
72389: GO 72475
72391: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72392: LD_ADDR_VAR 0 2
72396: PUSH
72397: LD_INT 2
72399: PUSH
72400: LD_INT 4
72402: PUSH
72403: LD_INT 11
72405: PUSH
72406: LD_INT 12
72408: PUSH
72409: LD_INT 15
72411: PUSH
72412: LD_INT 16
72414: PUSH
72415: LD_INT 22
72417: PUSH
72418: LD_INT 23
72420: PUSH
72421: LD_INT 26
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 101
72437: PUSH
72438: LD_INT 102
72440: PUSH
72441: LD_INT 105
72443: PUSH
72444: LD_INT 106
72446: PUSH
72447: LD_INT 108
72449: PUSH
72450: LD_INT 116
72452: PUSH
72453: LD_INT 117
72455: PUSH
72456: LD_INT 118
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: ST_TO_ADDR
72473: GO 75456
72475: LD_INT 3
72477: DOUBLE
72478: EQUAL
72479: IFTRUE 72483
72481: GO 72571
72483: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
72484: LD_ADDR_VAR 0 2
72488: PUSH
72489: LD_INT 2
72491: PUSH
72492: LD_INT 4
72494: PUSH
72495: LD_INT 5
72497: PUSH
72498: LD_INT 11
72500: PUSH
72501: LD_INT 12
72503: PUSH
72504: LD_INT 15
72506: PUSH
72507: LD_INT 16
72509: PUSH
72510: LD_INT 22
72512: PUSH
72513: LD_INT 26
72515: PUSH
72516: LD_INT 36
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 101
72533: PUSH
72534: LD_INT 102
72536: PUSH
72537: LD_INT 105
72539: PUSH
72540: LD_INT 106
72542: PUSH
72543: LD_INT 108
72545: PUSH
72546: LD_INT 116
72548: PUSH
72549: LD_INT 117
72551: PUSH
72552: LD_INT 118
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: ST_TO_ADDR
72569: GO 75456
72571: LD_INT 4
72573: DOUBLE
72574: EQUAL
72575: IFTRUE 72579
72577: GO 72675
72579: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
72580: LD_ADDR_VAR 0 2
72584: PUSH
72585: LD_INT 2
72587: PUSH
72588: LD_INT 4
72590: PUSH
72591: LD_INT 5
72593: PUSH
72594: LD_INT 8
72596: PUSH
72597: LD_INT 11
72599: PUSH
72600: LD_INT 12
72602: PUSH
72603: LD_INT 15
72605: PUSH
72606: LD_INT 16
72608: PUSH
72609: LD_INT 22
72611: PUSH
72612: LD_INT 23
72614: PUSH
72615: LD_INT 26
72617: PUSH
72618: LD_INT 36
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 101
72637: PUSH
72638: LD_INT 102
72640: PUSH
72641: LD_INT 105
72643: PUSH
72644: LD_INT 106
72646: PUSH
72647: LD_INT 108
72649: PUSH
72650: LD_INT 116
72652: PUSH
72653: LD_INT 117
72655: PUSH
72656: LD_INT 118
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: ST_TO_ADDR
72673: GO 75456
72675: LD_INT 5
72677: DOUBLE
72678: EQUAL
72679: IFTRUE 72683
72681: GO 72795
72683: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
72684: LD_ADDR_VAR 0 2
72688: PUSH
72689: LD_INT 2
72691: PUSH
72692: LD_INT 4
72694: PUSH
72695: LD_INT 5
72697: PUSH
72698: LD_INT 6
72700: PUSH
72701: LD_INT 8
72703: PUSH
72704: LD_INT 11
72706: PUSH
72707: LD_INT 12
72709: PUSH
72710: LD_INT 15
72712: PUSH
72713: LD_INT 16
72715: PUSH
72716: LD_INT 22
72718: PUSH
72719: LD_INT 23
72721: PUSH
72722: LD_INT 25
72724: PUSH
72725: LD_INT 26
72727: PUSH
72728: LD_INT 36
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 101
72749: PUSH
72750: LD_INT 102
72752: PUSH
72753: LD_INT 105
72755: PUSH
72756: LD_INT 106
72758: PUSH
72759: LD_INT 108
72761: PUSH
72762: LD_INT 109
72764: PUSH
72765: LD_INT 112
72767: PUSH
72768: LD_INT 116
72770: PUSH
72771: LD_INT 117
72773: PUSH
72774: LD_INT 118
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: ST_TO_ADDR
72793: GO 75456
72795: LD_INT 6
72797: DOUBLE
72798: EQUAL
72799: IFTRUE 72803
72801: GO 72935
72803: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
72804: LD_ADDR_VAR 0 2
72808: PUSH
72809: LD_INT 2
72811: PUSH
72812: LD_INT 4
72814: PUSH
72815: LD_INT 5
72817: PUSH
72818: LD_INT 6
72820: PUSH
72821: LD_INT 8
72823: PUSH
72824: LD_INT 11
72826: PUSH
72827: LD_INT 12
72829: PUSH
72830: LD_INT 15
72832: PUSH
72833: LD_INT 16
72835: PUSH
72836: LD_INT 20
72838: PUSH
72839: LD_INT 21
72841: PUSH
72842: LD_INT 22
72844: PUSH
72845: LD_INT 23
72847: PUSH
72848: LD_INT 25
72850: PUSH
72851: LD_INT 26
72853: PUSH
72854: LD_INT 30
72856: PUSH
72857: LD_INT 31
72859: PUSH
72860: LD_INT 32
72862: PUSH
72863: LD_INT 36
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 101
72889: PUSH
72890: LD_INT 102
72892: PUSH
72893: LD_INT 105
72895: PUSH
72896: LD_INT 106
72898: PUSH
72899: LD_INT 108
72901: PUSH
72902: LD_INT 109
72904: PUSH
72905: LD_INT 112
72907: PUSH
72908: LD_INT 116
72910: PUSH
72911: LD_INT 117
72913: PUSH
72914: LD_INT 118
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: LIST
72926: LIST
72927: LIST
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: ST_TO_ADDR
72933: GO 75456
72935: LD_INT 7
72937: DOUBLE
72938: EQUAL
72939: IFTRUE 72943
72941: GO 73055
72943: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
72944: LD_ADDR_VAR 0 2
72948: PUSH
72949: LD_INT 2
72951: PUSH
72952: LD_INT 4
72954: PUSH
72955: LD_INT 5
72957: PUSH
72958: LD_INT 7
72960: PUSH
72961: LD_INT 11
72963: PUSH
72964: LD_INT 12
72966: PUSH
72967: LD_INT 15
72969: PUSH
72970: LD_INT 16
72972: PUSH
72973: LD_INT 20
72975: PUSH
72976: LD_INT 21
72978: PUSH
72979: LD_INT 22
72981: PUSH
72982: LD_INT 23
72984: PUSH
72985: LD_INT 25
72987: PUSH
72988: LD_INT 26
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 101
73009: PUSH
73010: LD_INT 102
73012: PUSH
73013: LD_INT 103
73015: PUSH
73016: LD_INT 105
73018: PUSH
73019: LD_INT 106
73021: PUSH
73022: LD_INT 108
73024: PUSH
73025: LD_INT 112
73027: PUSH
73028: LD_INT 116
73030: PUSH
73031: LD_INT 117
73033: PUSH
73034: LD_INT 118
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: ST_TO_ADDR
73053: GO 75456
73055: LD_INT 8
73057: DOUBLE
73058: EQUAL
73059: IFTRUE 73063
73061: GO 73203
73063: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
73064: LD_ADDR_VAR 0 2
73068: PUSH
73069: LD_INT 2
73071: PUSH
73072: LD_INT 4
73074: PUSH
73075: LD_INT 5
73077: PUSH
73078: LD_INT 6
73080: PUSH
73081: LD_INT 7
73083: PUSH
73084: LD_INT 8
73086: PUSH
73087: LD_INT 11
73089: PUSH
73090: LD_INT 12
73092: PUSH
73093: LD_INT 15
73095: PUSH
73096: LD_INT 16
73098: PUSH
73099: LD_INT 20
73101: PUSH
73102: LD_INT 21
73104: PUSH
73105: LD_INT 22
73107: PUSH
73108: LD_INT 23
73110: PUSH
73111: LD_INT 25
73113: PUSH
73114: LD_INT 26
73116: PUSH
73117: LD_INT 30
73119: PUSH
73120: LD_INT 31
73122: PUSH
73123: LD_INT 32
73125: PUSH
73126: LD_INT 36
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 101
73153: PUSH
73154: LD_INT 102
73156: PUSH
73157: LD_INT 103
73159: PUSH
73160: LD_INT 105
73162: PUSH
73163: LD_INT 106
73165: PUSH
73166: LD_INT 108
73168: PUSH
73169: LD_INT 109
73171: PUSH
73172: LD_INT 112
73174: PUSH
73175: LD_INT 116
73177: PUSH
73178: LD_INT 117
73180: PUSH
73181: LD_INT 118
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: ST_TO_ADDR
73201: GO 75456
73203: LD_INT 9
73205: DOUBLE
73206: EQUAL
73207: IFTRUE 73211
73209: GO 73359
73211: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
73212: LD_ADDR_VAR 0 2
73216: PUSH
73217: LD_INT 2
73219: PUSH
73220: LD_INT 4
73222: PUSH
73223: LD_INT 5
73225: PUSH
73226: LD_INT 6
73228: PUSH
73229: LD_INT 7
73231: PUSH
73232: LD_INT 8
73234: PUSH
73235: LD_INT 11
73237: PUSH
73238: LD_INT 12
73240: PUSH
73241: LD_INT 15
73243: PUSH
73244: LD_INT 16
73246: PUSH
73247: LD_INT 20
73249: PUSH
73250: LD_INT 21
73252: PUSH
73253: LD_INT 22
73255: PUSH
73256: LD_INT 23
73258: PUSH
73259: LD_INT 25
73261: PUSH
73262: LD_INT 26
73264: PUSH
73265: LD_INT 28
73267: PUSH
73268: LD_INT 30
73270: PUSH
73271: LD_INT 31
73273: PUSH
73274: LD_INT 32
73276: PUSH
73277: LD_INT 36
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 101
73305: PUSH
73306: LD_INT 102
73308: PUSH
73309: LD_INT 103
73311: PUSH
73312: LD_INT 105
73314: PUSH
73315: LD_INT 106
73317: PUSH
73318: LD_INT 108
73320: PUSH
73321: LD_INT 109
73323: PUSH
73324: LD_INT 112
73326: PUSH
73327: LD_INT 114
73329: PUSH
73330: LD_INT 116
73332: PUSH
73333: LD_INT 117
73335: PUSH
73336: LD_INT 118
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: ST_TO_ADDR
73357: GO 75456
73359: LD_INT 10
73361: DOUBLE
73362: EQUAL
73363: IFTRUE 73367
73365: GO 73563
73367: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73368: LD_ADDR_VAR 0 2
73372: PUSH
73373: LD_INT 2
73375: PUSH
73376: LD_INT 4
73378: PUSH
73379: LD_INT 5
73381: PUSH
73382: LD_INT 6
73384: PUSH
73385: LD_INT 7
73387: PUSH
73388: LD_INT 8
73390: PUSH
73391: LD_INT 9
73393: PUSH
73394: LD_INT 10
73396: PUSH
73397: LD_INT 11
73399: PUSH
73400: LD_INT 12
73402: PUSH
73403: LD_INT 13
73405: PUSH
73406: LD_INT 14
73408: PUSH
73409: LD_INT 15
73411: PUSH
73412: LD_INT 16
73414: PUSH
73415: LD_INT 17
73417: PUSH
73418: LD_INT 18
73420: PUSH
73421: LD_INT 19
73423: PUSH
73424: LD_INT 20
73426: PUSH
73427: LD_INT 21
73429: PUSH
73430: LD_INT 22
73432: PUSH
73433: LD_INT 23
73435: PUSH
73436: LD_INT 24
73438: PUSH
73439: LD_INT 25
73441: PUSH
73442: LD_INT 26
73444: PUSH
73445: LD_INT 28
73447: PUSH
73448: LD_INT 30
73450: PUSH
73451: LD_INT 31
73453: PUSH
73454: LD_INT 32
73456: PUSH
73457: LD_INT 36
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: LIST
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: LIST
73485: LIST
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 101
73493: PUSH
73494: LD_INT 102
73496: PUSH
73497: LD_INT 103
73499: PUSH
73500: LD_INT 104
73502: PUSH
73503: LD_INT 105
73505: PUSH
73506: LD_INT 106
73508: PUSH
73509: LD_INT 107
73511: PUSH
73512: LD_INT 108
73514: PUSH
73515: LD_INT 109
73517: PUSH
73518: LD_INT 110
73520: PUSH
73521: LD_INT 111
73523: PUSH
73524: LD_INT 112
73526: PUSH
73527: LD_INT 114
73529: PUSH
73530: LD_INT 116
73532: PUSH
73533: LD_INT 117
73535: PUSH
73536: LD_INT 118
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: ST_TO_ADDR
73561: GO 75456
73563: LD_INT 11
73565: DOUBLE
73566: EQUAL
73567: IFTRUE 73571
73569: GO 73775
73571: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
73572: LD_ADDR_VAR 0 2
73576: PUSH
73577: LD_INT 2
73579: PUSH
73580: LD_INT 3
73582: PUSH
73583: LD_INT 4
73585: PUSH
73586: LD_INT 5
73588: PUSH
73589: LD_INT 6
73591: PUSH
73592: LD_INT 7
73594: PUSH
73595: LD_INT 8
73597: PUSH
73598: LD_INT 9
73600: PUSH
73601: LD_INT 10
73603: PUSH
73604: LD_INT 11
73606: PUSH
73607: LD_INT 12
73609: PUSH
73610: LD_INT 13
73612: PUSH
73613: LD_INT 14
73615: PUSH
73616: LD_INT 15
73618: PUSH
73619: LD_INT 16
73621: PUSH
73622: LD_INT 17
73624: PUSH
73625: LD_INT 18
73627: PUSH
73628: LD_INT 19
73630: PUSH
73631: LD_INT 20
73633: PUSH
73634: LD_INT 21
73636: PUSH
73637: LD_INT 22
73639: PUSH
73640: LD_INT 23
73642: PUSH
73643: LD_INT 24
73645: PUSH
73646: LD_INT 25
73648: PUSH
73649: LD_INT 26
73651: PUSH
73652: LD_INT 28
73654: PUSH
73655: LD_INT 30
73657: PUSH
73658: LD_INT 31
73660: PUSH
73661: LD_INT 32
73663: PUSH
73664: LD_INT 34
73666: PUSH
73667: LD_INT 36
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: PUSH
73703: LD_INT 101
73705: PUSH
73706: LD_INT 102
73708: PUSH
73709: LD_INT 103
73711: PUSH
73712: LD_INT 104
73714: PUSH
73715: LD_INT 105
73717: PUSH
73718: LD_INT 106
73720: PUSH
73721: LD_INT 107
73723: PUSH
73724: LD_INT 108
73726: PUSH
73727: LD_INT 109
73729: PUSH
73730: LD_INT 110
73732: PUSH
73733: LD_INT 111
73735: PUSH
73736: LD_INT 112
73738: PUSH
73739: LD_INT 114
73741: PUSH
73742: LD_INT 116
73744: PUSH
73745: LD_INT 117
73747: PUSH
73748: LD_INT 118
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: ST_TO_ADDR
73773: GO 75456
73775: LD_INT 12
73777: DOUBLE
73778: EQUAL
73779: IFTRUE 73783
73781: GO 74003
73783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
73784: LD_ADDR_VAR 0 2
73788: PUSH
73789: LD_INT 1
73791: PUSH
73792: LD_INT 2
73794: PUSH
73795: LD_INT 3
73797: PUSH
73798: LD_INT 4
73800: PUSH
73801: LD_INT 5
73803: PUSH
73804: LD_INT 6
73806: PUSH
73807: LD_INT 7
73809: PUSH
73810: LD_INT 8
73812: PUSH
73813: LD_INT 9
73815: PUSH
73816: LD_INT 10
73818: PUSH
73819: LD_INT 11
73821: PUSH
73822: LD_INT 12
73824: PUSH
73825: LD_INT 13
73827: PUSH
73828: LD_INT 14
73830: PUSH
73831: LD_INT 15
73833: PUSH
73834: LD_INT 16
73836: PUSH
73837: LD_INT 17
73839: PUSH
73840: LD_INT 18
73842: PUSH
73843: LD_INT 19
73845: PUSH
73846: LD_INT 20
73848: PUSH
73849: LD_INT 21
73851: PUSH
73852: LD_INT 22
73854: PUSH
73855: LD_INT 23
73857: PUSH
73858: LD_INT 24
73860: PUSH
73861: LD_INT 25
73863: PUSH
73864: LD_INT 26
73866: PUSH
73867: LD_INT 27
73869: PUSH
73870: LD_INT 28
73872: PUSH
73873: LD_INT 30
73875: PUSH
73876: LD_INT 31
73878: PUSH
73879: LD_INT 32
73881: PUSH
73882: LD_INT 33
73884: PUSH
73885: LD_INT 34
73887: PUSH
73888: LD_INT 36
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 101
73929: PUSH
73930: LD_INT 102
73932: PUSH
73933: LD_INT 103
73935: PUSH
73936: LD_INT 104
73938: PUSH
73939: LD_INT 105
73941: PUSH
73942: LD_INT 106
73944: PUSH
73945: LD_INT 107
73947: PUSH
73948: LD_INT 108
73950: PUSH
73951: LD_INT 109
73953: PUSH
73954: LD_INT 110
73956: PUSH
73957: LD_INT 111
73959: PUSH
73960: LD_INT 112
73962: PUSH
73963: LD_INT 113
73965: PUSH
73966: LD_INT 114
73968: PUSH
73969: LD_INT 116
73971: PUSH
73972: LD_INT 117
73974: PUSH
73975: LD_INT 118
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: LIST
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: ST_TO_ADDR
74001: GO 75456
74003: LD_INT 13
74005: DOUBLE
74006: EQUAL
74007: IFTRUE 74011
74009: GO 74219
74011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
74012: LD_ADDR_VAR 0 2
74016: PUSH
74017: LD_INT 1
74019: PUSH
74020: LD_INT 2
74022: PUSH
74023: LD_INT 3
74025: PUSH
74026: LD_INT 4
74028: PUSH
74029: LD_INT 5
74031: PUSH
74032: LD_INT 8
74034: PUSH
74035: LD_INT 9
74037: PUSH
74038: LD_INT 10
74040: PUSH
74041: LD_INT 11
74043: PUSH
74044: LD_INT 12
74046: PUSH
74047: LD_INT 14
74049: PUSH
74050: LD_INT 15
74052: PUSH
74053: LD_INT 16
74055: PUSH
74056: LD_INT 17
74058: PUSH
74059: LD_INT 18
74061: PUSH
74062: LD_INT 19
74064: PUSH
74065: LD_INT 20
74067: PUSH
74068: LD_INT 21
74070: PUSH
74071: LD_INT 22
74073: PUSH
74074: LD_INT 23
74076: PUSH
74077: LD_INT 24
74079: PUSH
74080: LD_INT 25
74082: PUSH
74083: LD_INT 26
74085: PUSH
74086: LD_INT 27
74088: PUSH
74089: LD_INT 28
74091: PUSH
74092: LD_INT 30
74094: PUSH
74095: LD_INT 31
74097: PUSH
74098: LD_INT 32
74100: PUSH
74101: LD_INT 33
74103: PUSH
74104: LD_INT 34
74106: PUSH
74107: LD_INT 36
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: PUSH
74143: LD_INT 101
74145: PUSH
74146: LD_INT 102
74148: PUSH
74149: LD_INT 103
74151: PUSH
74152: LD_INT 104
74154: PUSH
74155: LD_INT 105
74157: PUSH
74158: LD_INT 106
74160: PUSH
74161: LD_INT 107
74163: PUSH
74164: LD_INT 108
74166: PUSH
74167: LD_INT 109
74169: PUSH
74170: LD_INT 110
74172: PUSH
74173: LD_INT 111
74175: PUSH
74176: LD_INT 112
74178: PUSH
74179: LD_INT 113
74181: PUSH
74182: LD_INT 114
74184: PUSH
74185: LD_INT 116
74187: PUSH
74188: LD_INT 117
74190: PUSH
74191: LD_INT 118
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: LIST
74198: LIST
74199: LIST
74200: LIST
74201: LIST
74202: LIST
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: ST_TO_ADDR
74217: GO 75456
74219: LD_INT 14
74221: DOUBLE
74222: EQUAL
74223: IFTRUE 74227
74225: GO 74451
74227: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74228: LD_ADDR_VAR 0 2
74232: PUSH
74233: LD_INT 1
74235: PUSH
74236: LD_INT 2
74238: PUSH
74239: LD_INT 3
74241: PUSH
74242: LD_INT 4
74244: PUSH
74245: LD_INT 5
74247: PUSH
74248: LD_INT 6
74250: PUSH
74251: LD_INT 7
74253: PUSH
74254: LD_INT 8
74256: PUSH
74257: LD_INT 9
74259: PUSH
74260: LD_INT 10
74262: PUSH
74263: LD_INT 11
74265: PUSH
74266: LD_INT 12
74268: PUSH
74269: LD_INT 13
74271: PUSH
74272: LD_INT 14
74274: PUSH
74275: LD_INT 15
74277: PUSH
74278: LD_INT 16
74280: PUSH
74281: LD_INT 17
74283: PUSH
74284: LD_INT 18
74286: PUSH
74287: LD_INT 19
74289: PUSH
74290: LD_INT 20
74292: PUSH
74293: LD_INT 21
74295: PUSH
74296: LD_INT 22
74298: PUSH
74299: LD_INT 23
74301: PUSH
74302: LD_INT 24
74304: PUSH
74305: LD_INT 25
74307: PUSH
74308: LD_INT 26
74310: PUSH
74311: LD_INT 27
74313: PUSH
74314: LD_INT 28
74316: PUSH
74317: LD_INT 29
74319: PUSH
74320: LD_INT 30
74322: PUSH
74323: LD_INT 31
74325: PUSH
74326: LD_INT 32
74328: PUSH
74329: LD_INT 33
74331: PUSH
74332: LD_INT 34
74334: PUSH
74335: LD_INT 36
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 101
74377: PUSH
74378: LD_INT 102
74380: PUSH
74381: LD_INT 103
74383: PUSH
74384: LD_INT 104
74386: PUSH
74387: LD_INT 105
74389: PUSH
74390: LD_INT 106
74392: PUSH
74393: LD_INT 107
74395: PUSH
74396: LD_INT 108
74398: PUSH
74399: LD_INT 109
74401: PUSH
74402: LD_INT 110
74404: PUSH
74405: LD_INT 111
74407: PUSH
74408: LD_INT 112
74410: PUSH
74411: LD_INT 113
74413: PUSH
74414: LD_INT 114
74416: PUSH
74417: LD_INT 116
74419: PUSH
74420: LD_INT 117
74422: PUSH
74423: LD_INT 118
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: ST_TO_ADDR
74449: GO 75456
74451: LD_INT 15
74453: DOUBLE
74454: EQUAL
74455: IFTRUE 74459
74457: GO 74683
74459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
74460: LD_ADDR_VAR 0 2
74464: PUSH
74465: LD_INT 1
74467: PUSH
74468: LD_INT 2
74470: PUSH
74471: LD_INT 3
74473: PUSH
74474: LD_INT 4
74476: PUSH
74477: LD_INT 5
74479: PUSH
74480: LD_INT 6
74482: PUSH
74483: LD_INT 7
74485: PUSH
74486: LD_INT 8
74488: PUSH
74489: LD_INT 9
74491: PUSH
74492: LD_INT 10
74494: PUSH
74495: LD_INT 11
74497: PUSH
74498: LD_INT 12
74500: PUSH
74501: LD_INT 13
74503: PUSH
74504: LD_INT 14
74506: PUSH
74507: LD_INT 15
74509: PUSH
74510: LD_INT 16
74512: PUSH
74513: LD_INT 17
74515: PUSH
74516: LD_INT 18
74518: PUSH
74519: LD_INT 19
74521: PUSH
74522: LD_INT 20
74524: PUSH
74525: LD_INT 21
74527: PUSH
74528: LD_INT 22
74530: PUSH
74531: LD_INT 23
74533: PUSH
74534: LD_INT 24
74536: PUSH
74537: LD_INT 25
74539: PUSH
74540: LD_INT 26
74542: PUSH
74543: LD_INT 27
74545: PUSH
74546: LD_INT 28
74548: PUSH
74549: LD_INT 29
74551: PUSH
74552: LD_INT 30
74554: PUSH
74555: LD_INT 31
74557: PUSH
74558: LD_INT 32
74560: PUSH
74561: LD_INT 33
74563: PUSH
74564: LD_INT 34
74566: PUSH
74567: LD_INT 36
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: LIST
74596: LIST
74597: LIST
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 101
74609: PUSH
74610: LD_INT 102
74612: PUSH
74613: LD_INT 103
74615: PUSH
74616: LD_INT 104
74618: PUSH
74619: LD_INT 105
74621: PUSH
74622: LD_INT 106
74624: PUSH
74625: LD_INT 107
74627: PUSH
74628: LD_INT 108
74630: PUSH
74631: LD_INT 109
74633: PUSH
74634: LD_INT 110
74636: PUSH
74637: LD_INT 111
74639: PUSH
74640: LD_INT 112
74642: PUSH
74643: LD_INT 113
74645: PUSH
74646: LD_INT 114
74648: PUSH
74649: LD_INT 116
74651: PUSH
74652: LD_INT 117
74654: PUSH
74655: LD_INT 118
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: ST_TO_ADDR
74681: GO 75456
74683: LD_INT 16
74685: DOUBLE
74686: EQUAL
74687: IFTRUE 74691
74689: GO 74827
74691: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
74692: LD_ADDR_VAR 0 2
74696: PUSH
74697: LD_INT 2
74699: PUSH
74700: LD_INT 4
74702: PUSH
74703: LD_INT 5
74705: PUSH
74706: LD_INT 7
74708: PUSH
74709: LD_INT 11
74711: PUSH
74712: LD_INT 12
74714: PUSH
74715: LD_INT 15
74717: PUSH
74718: LD_INT 16
74720: PUSH
74721: LD_INT 20
74723: PUSH
74724: LD_INT 21
74726: PUSH
74727: LD_INT 22
74729: PUSH
74730: LD_INT 23
74732: PUSH
74733: LD_INT 25
74735: PUSH
74736: LD_INT 26
74738: PUSH
74739: LD_INT 30
74741: PUSH
74742: LD_INT 31
74744: PUSH
74745: LD_INT 32
74747: PUSH
74748: LD_INT 33
74750: PUSH
74751: LD_INT 34
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: PUSH
74775: LD_INT 101
74777: PUSH
74778: LD_INT 102
74780: PUSH
74781: LD_INT 103
74783: PUSH
74784: LD_INT 106
74786: PUSH
74787: LD_INT 108
74789: PUSH
74790: LD_INT 112
74792: PUSH
74793: LD_INT 113
74795: PUSH
74796: LD_INT 114
74798: PUSH
74799: LD_INT 116
74801: PUSH
74802: LD_INT 117
74804: PUSH
74805: LD_INT 118
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: ST_TO_ADDR
74825: GO 75456
74827: LD_INT 17
74829: DOUBLE
74830: EQUAL
74831: IFTRUE 74835
74833: GO 75059
74835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
74836: LD_ADDR_VAR 0 2
74840: PUSH
74841: LD_INT 1
74843: PUSH
74844: LD_INT 2
74846: PUSH
74847: LD_INT 3
74849: PUSH
74850: LD_INT 4
74852: PUSH
74853: LD_INT 5
74855: PUSH
74856: LD_INT 6
74858: PUSH
74859: LD_INT 7
74861: PUSH
74862: LD_INT 8
74864: PUSH
74865: LD_INT 9
74867: PUSH
74868: LD_INT 10
74870: PUSH
74871: LD_INT 11
74873: PUSH
74874: LD_INT 12
74876: PUSH
74877: LD_INT 13
74879: PUSH
74880: LD_INT 14
74882: PUSH
74883: LD_INT 15
74885: PUSH
74886: LD_INT 16
74888: PUSH
74889: LD_INT 17
74891: PUSH
74892: LD_INT 18
74894: PUSH
74895: LD_INT 19
74897: PUSH
74898: LD_INT 20
74900: PUSH
74901: LD_INT 21
74903: PUSH
74904: LD_INT 22
74906: PUSH
74907: LD_INT 23
74909: PUSH
74910: LD_INT 24
74912: PUSH
74913: LD_INT 25
74915: PUSH
74916: LD_INT 26
74918: PUSH
74919: LD_INT 27
74921: PUSH
74922: LD_INT 28
74924: PUSH
74925: LD_INT 29
74927: PUSH
74928: LD_INT 30
74930: PUSH
74931: LD_INT 31
74933: PUSH
74934: LD_INT 32
74936: PUSH
74937: LD_INT 33
74939: PUSH
74940: LD_INT 34
74942: PUSH
74943: LD_INT 36
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: PUSH
74983: LD_INT 101
74985: PUSH
74986: LD_INT 102
74988: PUSH
74989: LD_INT 103
74991: PUSH
74992: LD_INT 104
74994: PUSH
74995: LD_INT 105
74997: PUSH
74998: LD_INT 106
75000: PUSH
75001: LD_INT 107
75003: PUSH
75004: LD_INT 108
75006: PUSH
75007: LD_INT 109
75009: PUSH
75010: LD_INT 110
75012: PUSH
75013: LD_INT 111
75015: PUSH
75016: LD_INT 112
75018: PUSH
75019: LD_INT 113
75021: PUSH
75022: LD_INT 114
75024: PUSH
75025: LD_INT 116
75027: PUSH
75028: LD_INT 117
75030: PUSH
75031: LD_INT 118
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: ST_TO_ADDR
75057: GO 75456
75059: LD_INT 18
75061: DOUBLE
75062: EQUAL
75063: IFTRUE 75067
75065: GO 75215
75067: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
75068: LD_ADDR_VAR 0 2
75072: PUSH
75073: LD_INT 2
75075: PUSH
75076: LD_INT 4
75078: PUSH
75079: LD_INT 5
75081: PUSH
75082: LD_INT 7
75084: PUSH
75085: LD_INT 11
75087: PUSH
75088: LD_INT 12
75090: PUSH
75091: LD_INT 15
75093: PUSH
75094: LD_INT 16
75096: PUSH
75097: LD_INT 20
75099: PUSH
75100: LD_INT 21
75102: PUSH
75103: LD_INT 22
75105: PUSH
75106: LD_INT 23
75108: PUSH
75109: LD_INT 25
75111: PUSH
75112: LD_INT 26
75114: PUSH
75115: LD_INT 30
75117: PUSH
75118: LD_INT 31
75120: PUSH
75121: LD_INT 32
75123: PUSH
75124: LD_INT 33
75126: PUSH
75127: LD_INT 34
75129: PUSH
75130: LD_INT 35
75132: PUSH
75133: LD_INT 36
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 101
75161: PUSH
75162: LD_INT 102
75164: PUSH
75165: LD_INT 103
75167: PUSH
75168: LD_INT 106
75170: PUSH
75171: LD_INT 108
75173: PUSH
75174: LD_INT 112
75176: PUSH
75177: LD_INT 113
75179: PUSH
75180: LD_INT 114
75182: PUSH
75183: LD_INT 115
75185: PUSH
75186: LD_INT 116
75188: PUSH
75189: LD_INT 117
75191: PUSH
75192: LD_INT 118
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: ST_TO_ADDR
75213: GO 75456
75215: LD_INT 19
75217: DOUBLE
75218: EQUAL
75219: IFTRUE 75223
75221: GO 75455
75223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75224: LD_ADDR_VAR 0 2
75228: PUSH
75229: LD_INT 1
75231: PUSH
75232: LD_INT 2
75234: PUSH
75235: LD_INT 3
75237: PUSH
75238: LD_INT 4
75240: PUSH
75241: LD_INT 5
75243: PUSH
75244: LD_INT 6
75246: PUSH
75247: LD_INT 7
75249: PUSH
75250: LD_INT 8
75252: PUSH
75253: LD_INT 9
75255: PUSH
75256: LD_INT 10
75258: PUSH
75259: LD_INT 11
75261: PUSH
75262: LD_INT 12
75264: PUSH
75265: LD_INT 13
75267: PUSH
75268: LD_INT 14
75270: PUSH
75271: LD_INT 15
75273: PUSH
75274: LD_INT 16
75276: PUSH
75277: LD_INT 17
75279: PUSH
75280: LD_INT 18
75282: PUSH
75283: LD_INT 19
75285: PUSH
75286: LD_INT 20
75288: PUSH
75289: LD_INT 21
75291: PUSH
75292: LD_INT 22
75294: PUSH
75295: LD_INT 23
75297: PUSH
75298: LD_INT 24
75300: PUSH
75301: LD_INT 25
75303: PUSH
75304: LD_INT 26
75306: PUSH
75307: LD_INT 27
75309: PUSH
75310: LD_INT 28
75312: PUSH
75313: LD_INT 29
75315: PUSH
75316: LD_INT 30
75318: PUSH
75319: LD_INT 31
75321: PUSH
75322: LD_INT 32
75324: PUSH
75325: LD_INT 33
75327: PUSH
75328: LD_INT 34
75330: PUSH
75331: LD_INT 35
75333: PUSH
75334: LD_INT 36
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: PUSH
75375: LD_INT 101
75377: PUSH
75378: LD_INT 102
75380: PUSH
75381: LD_INT 103
75383: PUSH
75384: LD_INT 104
75386: PUSH
75387: LD_INT 105
75389: PUSH
75390: LD_INT 106
75392: PUSH
75393: LD_INT 107
75395: PUSH
75396: LD_INT 108
75398: PUSH
75399: LD_INT 109
75401: PUSH
75402: LD_INT 110
75404: PUSH
75405: LD_INT 111
75407: PUSH
75408: LD_INT 112
75410: PUSH
75411: LD_INT 113
75413: PUSH
75414: LD_INT 114
75416: PUSH
75417: LD_INT 115
75419: PUSH
75420: LD_INT 116
75422: PUSH
75423: LD_INT 117
75425: PUSH
75426: LD_INT 118
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: ST_TO_ADDR
75453: GO 75456
75455: POP
// end else
75456: GO 75687
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
75458: LD_ADDR_VAR 0 2
75462: PUSH
75463: LD_INT 1
75465: PUSH
75466: LD_INT 2
75468: PUSH
75469: LD_INT 3
75471: PUSH
75472: LD_INT 4
75474: PUSH
75475: LD_INT 5
75477: PUSH
75478: LD_INT 6
75480: PUSH
75481: LD_INT 7
75483: PUSH
75484: LD_INT 8
75486: PUSH
75487: LD_INT 9
75489: PUSH
75490: LD_INT 10
75492: PUSH
75493: LD_INT 11
75495: PUSH
75496: LD_INT 12
75498: PUSH
75499: LD_INT 13
75501: PUSH
75502: LD_INT 14
75504: PUSH
75505: LD_INT 15
75507: PUSH
75508: LD_INT 16
75510: PUSH
75511: LD_INT 17
75513: PUSH
75514: LD_INT 18
75516: PUSH
75517: LD_INT 19
75519: PUSH
75520: LD_INT 20
75522: PUSH
75523: LD_INT 21
75525: PUSH
75526: LD_INT 22
75528: PUSH
75529: LD_INT 23
75531: PUSH
75532: LD_INT 24
75534: PUSH
75535: LD_INT 25
75537: PUSH
75538: LD_INT 26
75540: PUSH
75541: LD_INT 27
75543: PUSH
75544: LD_INT 28
75546: PUSH
75547: LD_INT 29
75549: PUSH
75550: LD_INT 30
75552: PUSH
75553: LD_INT 31
75555: PUSH
75556: LD_INT 32
75558: PUSH
75559: LD_INT 33
75561: PUSH
75562: LD_INT 34
75564: PUSH
75565: LD_INT 35
75567: PUSH
75568: LD_INT 36
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: LIST
75608: PUSH
75609: LD_INT 101
75611: PUSH
75612: LD_INT 102
75614: PUSH
75615: LD_INT 103
75617: PUSH
75618: LD_INT 104
75620: PUSH
75621: LD_INT 105
75623: PUSH
75624: LD_INT 106
75626: PUSH
75627: LD_INT 107
75629: PUSH
75630: LD_INT 108
75632: PUSH
75633: LD_INT 109
75635: PUSH
75636: LD_INT 110
75638: PUSH
75639: LD_INT 111
75641: PUSH
75642: LD_INT 112
75644: PUSH
75645: LD_INT 113
75647: PUSH
75648: LD_INT 114
75650: PUSH
75651: LD_INT 115
75653: PUSH
75654: LD_INT 116
75656: PUSH
75657: LD_INT 117
75659: PUSH
75660: LD_INT 118
75662: PUSH
75663: EMPTY
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: ST_TO_ADDR
// if result then
75687: LD_VAR 0 2
75691: IFFALSE 76477
// begin normal :=  ;
75693: LD_ADDR_VAR 0 5
75697: PUSH
75698: LD_STRING 
75700: ST_TO_ADDR
// hardcore :=  ;
75701: LD_ADDR_VAR 0 6
75705: PUSH
75706: LD_STRING 
75708: ST_TO_ADDR
// active :=  ;
75709: LD_ADDR_VAR 0 7
75713: PUSH
75714: LD_STRING 
75716: ST_TO_ADDR
// for i = 1 to normalCounter do
75717: LD_ADDR_VAR 0 8
75721: PUSH
75722: DOUBLE
75723: LD_INT 1
75725: DEC
75726: ST_TO_ADDR
75727: LD_EXP 64
75731: PUSH
75732: FOR_TO
75733: IFFALSE 75834
// begin tmp := 0 ;
75735: LD_ADDR_VAR 0 3
75739: PUSH
75740: LD_STRING 0
75742: ST_TO_ADDR
// if result [ 1 ] then
75743: LD_VAR 0 2
75747: PUSH
75748: LD_INT 1
75750: ARRAY
75751: IFFALSE 75816
// if result [ 1 ] [ 1 ] = i then
75753: LD_VAR 0 2
75757: PUSH
75758: LD_INT 1
75760: ARRAY
75761: PUSH
75762: LD_INT 1
75764: ARRAY
75765: PUSH
75766: LD_VAR 0 8
75770: EQUAL
75771: IFFALSE 75816
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
75773: LD_ADDR_VAR 0 2
75777: PUSH
75778: LD_VAR 0 2
75782: PPUSH
75783: LD_INT 1
75785: PPUSH
75786: LD_VAR 0 2
75790: PUSH
75791: LD_INT 1
75793: ARRAY
75794: PPUSH
75795: LD_INT 1
75797: PPUSH
75798: CALL_OW 3
75802: PPUSH
75803: CALL_OW 1
75807: ST_TO_ADDR
// tmp := 1 ;
75808: LD_ADDR_VAR 0 3
75812: PUSH
75813: LD_STRING 1
75815: ST_TO_ADDR
// end ; normal := normal & tmp ;
75816: LD_ADDR_VAR 0 5
75820: PUSH
75821: LD_VAR 0 5
75825: PUSH
75826: LD_VAR 0 3
75830: STR
75831: ST_TO_ADDR
// end ;
75832: GO 75732
75834: POP
75835: POP
// for i = 1 to hardcoreCounter do
75836: LD_ADDR_VAR 0 8
75840: PUSH
75841: DOUBLE
75842: LD_INT 1
75844: DEC
75845: ST_TO_ADDR
75846: LD_EXP 65
75850: PUSH
75851: FOR_TO
75852: IFFALSE 75957
// begin tmp := 0 ;
75854: LD_ADDR_VAR 0 3
75858: PUSH
75859: LD_STRING 0
75861: ST_TO_ADDR
// if result [ 2 ] then
75862: LD_VAR 0 2
75866: PUSH
75867: LD_INT 2
75869: ARRAY
75870: IFFALSE 75939
// if result [ 2 ] [ 1 ] = 100 + i then
75872: LD_VAR 0 2
75876: PUSH
75877: LD_INT 2
75879: ARRAY
75880: PUSH
75881: LD_INT 1
75883: ARRAY
75884: PUSH
75885: LD_INT 100
75887: PUSH
75888: LD_VAR 0 8
75892: PLUS
75893: EQUAL
75894: IFFALSE 75939
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
75896: LD_ADDR_VAR 0 2
75900: PUSH
75901: LD_VAR 0 2
75905: PPUSH
75906: LD_INT 2
75908: PPUSH
75909: LD_VAR 0 2
75913: PUSH
75914: LD_INT 2
75916: ARRAY
75917: PPUSH
75918: LD_INT 1
75920: PPUSH
75921: CALL_OW 3
75925: PPUSH
75926: CALL_OW 1
75930: ST_TO_ADDR
// tmp := 1 ;
75931: LD_ADDR_VAR 0 3
75935: PUSH
75936: LD_STRING 1
75938: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
75939: LD_ADDR_VAR 0 6
75943: PUSH
75944: LD_VAR 0 6
75948: PUSH
75949: LD_VAR 0 3
75953: STR
75954: ST_TO_ADDR
// end ;
75955: GO 75851
75957: POP
75958: POP
// if isGameLoad then
75959: LD_VAR 0 1
75963: IFFALSE 76438
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
75965: LD_ADDR_VAR 0 4
75969: PUSH
75970: LD_EXP 68
75974: PUSH
75975: LD_EXP 67
75979: PUSH
75980: LD_EXP 69
75984: PUSH
75985: LD_EXP 66
75989: PUSH
75990: LD_EXP 70
75994: PUSH
75995: LD_EXP 71
75999: PUSH
76000: LD_EXP 72
76004: PUSH
76005: LD_EXP 73
76009: PUSH
76010: LD_EXP 74
76014: PUSH
76015: LD_EXP 75
76019: PUSH
76020: LD_EXP 76
76024: PUSH
76025: LD_EXP 77
76029: PUSH
76030: LD_EXP 78
76034: PUSH
76035: LD_EXP 79
76039: PUSH
76040: LD_EXP 87
76044: PUSH
76045: LD_EXP 88
76049: PUSH
76050: LD_EXP 89
76054: PUSH
76055: LD_EXP 90
76059: PUSH
76060: LD_EXP 92
76064: PUSH
76065: LD_EXP 93
76069: PUSH
76070: LD_EXP 94
76074: PUSH
76075: LD_EXP 97
76079: PUSH
76080: LD_EXP 99
76084: PUSH
76085: LD_EXP 100
76089: PUSH
76090: LD_EXP 101
76094: PUSH
76095: LD_EXP 103
76099: PUSH
76100: LD_EXP 104
76104: PUSH
76105: LD_EXP 107
76109: PUSH
76110: LD_EXP 108
76114: PUSH
76115: LD_EXP 109
76119: PUSH
76120: LD_EXP 110
76124: PUSH
76125: LD_EXP 111
76129: PUSH
76130: LD_EXP 112
76134: PUSH
76135: LD_EXP 113
76139: PUSH
76140: LD_EXP 114
76144: PUSH
76145: LD_EXP 115
76149: PUSH
76150: LD_EXP 80
76154: PUSH
76155: LD_EXP 81
76159: PUSH
76160: LD_EXP 84
76164: PUSH
76165: LD_EXP 85
76169: PUSH
76170: LD_EXP 86
76174: PUSH
76175: LD_EXP 82
76179: PUSH
76180: LD_EXP 83
76184: PUSH
76185: LD_EXP 91
76189: PUSH
76190: LD_EXP 95
76194: PUSH
76195: LD_EXP 96
76199: PUSH
76200: LD_EXP 98
76204: PUSH
76205: LD_EXP 102
76209: PUSH
76210: LD_EXP 105
76214: PUSH
76215: LD_EXP 106
76219: PUSH
76220: LD_EXP 116
76224: PUSH
76225: LD_EXP 117
76229: PUSH
76230: LD_EXP 118
76234: PUSH
76235: LD_EXP 119
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: LIST
76247: LIST
76248: LIST
76249: LIST
76250: LIST
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: LIST
76265: LIST
76266: LIST
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: LIST
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: ST_TO_ADDR
// tmp :=  ;
76296: LD_ADDR_VAR 0 3
76300: PUSH
76301: LD_STRING 
76303: ST_TO_ADDR
// for i = 1 to normalCounter do
76304: LD_ADDR_VAR 0 8
76308: PUSH
76309: DOUBLE
76310: LD_INT 1
76312: DEC
76313: ST_TO_ADDR
76314: LD_EXP 64
76318: PUSH
76319: FOR_TO
76320: IFFALSE 76356
// begin if flags [ i ] then
76322: LD_VAR 0 4
76326: PUSH
76327: LD_VAR 0 8
76331: ARRAY
76332: IFFALSE 76354
// tmp := tmp & i & ; ;
76334: LD_ADDR_VAR 0 3
76338: PUSH
76339: LD_VAR 0 3
76343: PUSH
76344: LD_VAR 0 8
76348: STR
76349: PUSH
76350: LD_STRING ;
76352: STR
76353: ST_TO_ADDR
// end ;
76354: GO 76319
76356: POP
76357: POP
// for i = 1 to hardcoreCounter do
76358: LD_ADDR_VAR 0 8
76362: PUSH
76363: DOUBLE
76364: LD_INT 1
76366: DEC
76367: ST_TO_ADDR
76368: LD_EXP 65
76372: PUSH
76373: FOR_TO
76374: IFFALSE 76420
// begin if flags [ normalCounter + i ] then
76376: LD_VAR 0 4
76380: PUSH
76381: LD_EXP 64
76385: PUSH
76386: LD_VAR 0 8
76390: PLUS
76391: ARRAY
76392: IFFALSE 76418
// tmp := tmp & ( 100 + i ) & ; ;
76394: LD_ADDR_VAR 0 3
76398: PUSH
76399: LD_VAR 0 3
76403: PUSH
76404: LD_INT 100
76406: PUSH
76407: LD_VAR 0 8
76411: PLUS
76412: STR
76413: PUSH
76414: LD_STRING ;
76416: STR
76417: ST_TO_ADDR
// end ;
76418: GO 76373
76420: POP
76421: POP
// if tmp then
76422: LD_VAR 0 3
76426: IFFALSE 76438
// active := tmp ;
76428: LD_ADDR_VAR 0 7
76432: PUSH
76433: LD_VAR 0 3
76437: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76438: LD_STRING getStreamItemsFromMission("
76440: PUSH
76441: LD_VAR 0 5
76445: STR
76446: PUSH
76447: LD_STRING ","
76449: STR
76450: PUSH
76451: LD_VAR 0 6
76455: STR
76456: PUSH
76457: LD_STRING ","
76459: STR
76460: PUSH
76461: LD_VAR 0 7
76465: STR
76466: PUSH
76467: LD_STRING ")
76469: STR
76470: PPUSH
76471: CALL_OW 559
// end else
76475: GO 76484
// ToLua ( getStreamItemsFromMission("","","") ) ;
76477: LD_STRING getStreamItemsFromMission("","","")
76479: PPUSH
76480: CALL_OW 559
// end ;
76484: LD_VAR 0 2
76488: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
76489: LD_EXP 63
76493: PUSH
76494: LD_EXP 68
76498: AND
76499: IFFALSE 76623
76501: GO 76503
76503: DISABLE
76504: LD_INT 0
76506: PPUSH
76507: PPUSH
// begin enable ;
76508: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
76509: LD_ADDR_VAR 0 2
76513: PUSH
76514: LD_INT 22
76516: PUSH
76517: LD_OWVAR 2
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: PUSH
76526: LD_INT 2
76528: PUSH
76529: LD_INT 34
76531: PUSH
76532: LD_INT 7
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: LD_INT 34
76541: PUSH
76542: LD_INT 45
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: LD_INT 34
76551: PUSH
76552: LD_INT 28
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PUSH
76559: LD_INT 34
76561: PUSH
76562: LD_INT 47
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: LIST
76573: LIST
76574: LIST
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: PPUSH
76580: CALL_OW 69
76584: ST_TO_ADDR
// if not tmp then
76585: LD_VAR 0 2
76589: NOT
76590: IFFALSE 76594
// exit ;
76592: GO 76623
// for i in tmp do
76594: LD_ADDR_VAR 0 1
76598: PUSH
76599: LD_VAR 0 2
76603: PUSH
76604: FOR_IN
76605: IFFALSE 76621
// begin SetLives ( i , 0 ) ;
76607: LD_VAR 0 1
76611: PPUSH
76612: LD_INT 0
76614: PPUSH
76615: CALL_OW 234
// end ;
76619: GO 76604
76621: POP
76622: POP
// end ;
76623: PPOPN 2
76625: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
76626: LD_EXP 63
76630: PUSH
76631: LD_EXP 69
76635: AND
76636: IFFALSE 76720
76638: GO 76640
76640: DISABLE
76641: LD_INT 0
76643: PPUSH
76644: PPUSH
// begin enable ;
76645: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
76646: LD_ADDR_VAR 0 2
76650: PUSH
76651: LD_INT 22
76653: PUSH
76654: LD_OWVAR 2
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: PUSH
76663: LD_INT 32
76665: PUSH
76666: LD_INT 3
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PUSH
76673: EMPTY
76674: LIST
76675: LIST
76676: PPUSH
76677: CALL_OW 69
76681: ST_TO_ADDR
// if not tmp then
76682: LD_VAR 0 2
76686: NOT
76687: IFFALSE 76691
// exit ;
76689: GO 76720
// for i in tmp do
76691: LD_ADDR_VAR 0 1
76695: PUSH
76696: LD_VAR 0 2
76700: PUSH
76701: FOR_IN
76702: IFFALSE 76718
// begin SetLives ( i , 0 ) ;
76704: LD_VAR 0 1
76708: PPUSH
76709: LD_INT 0
76711: PPUSH
76712: CALL_OW 234
// end ;
76716: GO 76701
76718: POP
76719: POP
// end ;
76720: PPOPN 2
76722: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
76723: LD_EXP 63
76727: PUSH
76728: LD_EXP 66
76732: AND
76733: IFFALSE 76826
76735: GO 76737
76737: DISABLE
76738: LD_INT 0
76740: PPUSH
// begin enable ;
76741: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
76742: LD_ADDR_VAR 0 1
76746: PUSH
76747: LD_INT 22
76749: PUSH
76750: LD_OWVAR 2
76754: PUSH
76755: EMPTY
76756: LIST
76757: LIST
76758: PUSH
76759: LD_INT 2
76761: PUSH
76762: LD_INT 25
76764: PUSH
76765: LD_INT 5
76767: PUSH
76768: EMPTY
76769: LIST
76770: LIST
76771: PUSH
76772: LD_INT 25
76774: PUSH
76775: LD_INT 9
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: PUSH
76782: LD_INT 25
76784: PUSH
76785: LD_INT 8
76787: PUSH
76788: EMPTY
76789: LIST
76790: LIST
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: PPUSH
76802: CALL_OW 69
76806: PUSH
76807: FOR_IN
76808: IFFALSE 76824
// begin SetClass ( i , 1 ) ;
76810: LD_VAR 0 1
76814: PPUSH
76815: LD_INT 1
76817: PPUSH
76818: CALL_OW 336
// end ;
76822: GO 76807
76824: POP
76825: POP
// end ;
76826: PPOPN 1
76828: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
76829: LD_EXP 63
76833: PUSH
76834: LD_EXP 67
76838: AND
76839: PUSH
76840: LD_OWVAR 65
76844: PUSH
76845: LD_INT 7
76847: LESS
76848: AND
76849: IFFALSE 76863
76851: GO 76853
76853: DISABLE
// begin enable ;
76854: ENABLE
// game_speed := 7 ;
76855: LD_ADDR_OWVAR 65
76859: PUSH
76860: LD_INT 7
76862: ST_TO_ADDR
// end ;
76863: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
76864: LD_EXP 63
76868: PUSH
76869: LD_EXP 70
76873: AND
76874: IFFALSE 77076
76876: GO 76878
76878: DISABLE
76879: LD_INT 0
76881: PPUSH
76882: PPUSH
76883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76884: LD_ADDR_VAR 0 3
76888: PUSH
76889: LD_INT 81
76891: PUSH
76892: LD_OWVAR 2
76896: PUSH
76897: EMPTY
76898: LIST
76899: LIST
76900: PUSH
76901: LD_INT 21
76903: PUSH
76904: LD_INT 1
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: PPUSH
76915: CALL_OW 69
76919: ST_TO_ADDR
// if not tmp then
76920: LD_VAR 0 3
76924: NOT
76925: IFFALSE 76929
// exit ;
76927: GO 77076
// if tmp > 5 then
76929: LD_VAR 0 3
76933: PUSH
76934: LD_INT 5
76936: GREATER
76937: IFFALSE 76949
// k := 5 else
76939: LD_ADDR_VAR 0 2
76943: PUSH
76944: LD_INT 5
76946: ST_TO_ADDR
76947: GO 76959
// k := tmp ;
76949: LD_ADDR_VAR 0 2
76953: PUSH
76954: LD_VAR 0 3
76958: ST_TO_ADDR
// for i := 1 to k do
76959: LD_ADDR_VAR 0 1
76963: PUSH
76964: DOUBLE
76965: LD_INT 1
76967: DEC
76968: ST_TO_ADDR
76969: LD_VAR 0 2
76973: PUSH
76974: FOR_TO
76975: IFFALSE 77074
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
76977: LD_VAR 0 3
76981: PUSH
76982: LD_VAR 0 1
76986: ARRAY
76987: PPUSH
76988: LD_VAR 0 1
76992: PUSH
76993: LD_INT 4
76995: MOD
76996: PUSH
76997: LD_INT 1
76999: PLUS
77000: PPUSH
77001: CALL_OW 259
77005: PUSH
77006: LD_INT 10
77008: LESS
77009: IFFALSE 77072
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77011: LD_VAR 0 3
77015: PUSH
77016: LD_VAR 0 1
77020: ARRAY
77021: PPUSH
77022: LD_VAR 0 1
77026: PUSH
77027: LD_INT 4
77029: MOD
77030: PUSH
77031: LD_INT 1
77033: PLUS
77034: PPUSH
77035: LD_VAR 0 3
77039: PUSH
77040: LD_VAR 0 1
77044: ARRAY
77045: PPUSH
77046: LD_VAR 0 1
77050: PUSH
77051: LD_INT 4
77053: MOD
77054: PUSH
77055: LD_INT 1
77057: PLUS
77058: PPUSH
77059: CALL_OW 259
77063: PUSH
77064: LD_INT 1
77066: PLUS
77067: PPUSH
77068: CALL_OW 237
77072: GO 76974
77074: POP
77075: POP
// end ;
77076: PPOPN 3
77078: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
77079: LD_EXP 63
77083: PUSH
77084: LD_EXP 71
77088: AND
77089: IFFALSE 77109
77091: GO 77093
77093: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
77094: LD_INT 4
77096: PPUSH
77097: LD_OWVAR 2
77101: PPUSH
77102: LD_INT 0
77104: PPUSH
77105: CALL_OW 324
77109: END
// every 0 0$1 trigger StreamModeActive and sShovel do
77110: LD_EXP 63
77114: PUSH
77115: LD_EXP 100
77119: AND
77120: IFFALSE 77140
77122: GO 77124
77124: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
77125: LD_INT 19
77127: PPUSH
77128: LD_OWVAR 2
77132: PPUSH
77133: LD_INT 0
77135: PPUSH
77136: CALL_OW 324
77140: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77141: LD_EXP 63
77145: PUSH
77146: LD_EXP 72
77150: AND
77151: IFFALSE 77253
77153: GO 77155
77155: DISABLE
77156: LD_INT 0
77158: PPUSH
77159: PPUSH
// begin enable ;
77160: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77161: LD_ADDR_VAR 0 2
77165: PUSH
77166: LD_INT 22
77168: PUSH
77169: LD_OWVAR 2
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: LD_INT 2
77180: PUSH
77181: LD_INT 34
77183: PUSH
77184: LD_INT 11
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PUSH
77191: LD_INT 34
77193: PUSH
77194: LD_INT 30
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: LIST
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: PPUSH
77210: CALL_OW 69
77214: ST_TO_ADDR
// if not tmp then
77215: LD_VAR 0 2
77219: NOT
77220: IFFALSE 77224
// exit ;
77222: GO 77253
// for i in tmp do
77224: LD_ADDR_VAR 0 1
77228: PUSH
77229: LD_VAR 0 2
77233: PUSH
77234: FOR_IN
77235: IFFALSE 77251
// begin SetLives ( i , 0 ) ;
77237: LD_VAR 0 1
77241: PPUSH
77242: LD_INT 0
77244: PPUSH
77245: CALL_OW 234
// end ;
77249: GO 77234
77251: POP
77252: POP
// end ;
77253: PPOPN 2
77255: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77256: LD_EXP 63
77260: PUSH
77261: LD_EXP 73
77265: AND
77266: IFFALSE 77286
77268: GO 77270
77270: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77271: LD_INT 32
77273: PPUSH
77274: LD_OWVAR 2
77278: PPUSH
77279: LD_INT 0
77281: PPUSH
77282: CALL_OW 324
77286: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77287: LD_EXP 63
77291: PUSH
77292: LD_EXP 74
77296: AND
77297: IFFALSE 77478
77299: GO 77301
77301: DISABLE
77302: LD_INT 0
77304: PPUSH
77305: PPUSH
77306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77307: LD_ADDR_VAR 0 2
77311: PUSH
77312: LD_INT 22
77314: PUSH
77315: LD_OWVAR 2
77319: PUSH
77320: EMPTY
77321: LIST
77322: LIST
77323: PUSH
77324: LD_INT 33
77326: PUSH
77327: LD_INT 3
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: PPUSH
77338: CALL_OW 69
77342: ST_TO_ADDR
// if not tmp then
77343: LD_VAR 0 2
77347: NOT
77348: IFFALSE 77352
// exit ;
77350: GO 77478
// side := 0 ;
77352: LD_ADDR_VAR 0 3
77356: PUSH
77357: LD_INT 0
77359: ST_TO_ADDR
// for i := 1 to 8 do
77360: LD_ADDR_VAR 0 1
77364: PUSH
77365: DOUBLE
77366: LD_INT 1
77368: DEC
77369: ST_TO_ADDR
77370: LD_INT 8
77372: PUSH
77373: FOR_TO
77374: IFFALSE 77422
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77376: LD_OWVAR 2
77380: PUSH
77381: LD_VAR 0 1
77385: NONEQUAL
77386: PUSH
77387: LD_OWVAR 2
77391: PPUSH
77392: LD_VAR 0 1
77396: PPUSH
77397: CALL_OW 81
77401: PUSH
77402: LD_INT 2
77404: EQUAL
77405: AND
77406: IFFALSE 77420
// begin side := i ;
77408: LD_ADDR_VAR 0 3
77412: PUSH
77413: LD_VAR 0 1
77417: ST_TO_ADDR
// break ;
77418: GO 77422
// end ;
77420: GO 77373
77422: POP
77423: POP
// if not side then
77424: LD_VAR 0 3
77428: NOT
77429: IFFALSE 77433
// exit ;
77431: GO 77478
// for i := 1 to tmp do
77433: LD_ADDR_VAR 0 1
77437: PUSH
77438: DOUBLE
77439: LD_INT 1
77441: DEC
77442: ST_TO_ADDR
77443: LD_VAR 0 2
77447: PUSH
77448: FOR_TO
77449: IFFALSE 77476
// if Prob ( 60 ) then
77451: LD_INT 60
77453: PPUSH
77454: CALL_OW 13
77458: IFFALSE 77474
// SetSide ( i , side ) ;
77460: LD_VAR 0 1
77464: PPUSH
77465: LD_VAR 0 3
77469: PPUSH
77470: CALL_OW 235
77474: GO 77448
77476: POP
77477: POP
// end ;
77478: PPOPN 3
77480: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77481: LD_EXP 63
77485: PUSH
77486: LD_EXP 76
77490: AND
77491: IFFALSE 77610
77493: GO 77495
77495: DISABLE
77496: LD_INT 0
77498: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
77499: LD_ADDR_VAR 0 1
77503: PUSH
77504: LD_INT 22
77506: PUSH
77507: LD_OWVAR 2
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PUSH
77516: LD_INT 21
77518: PUSH
77519: LD_INT 1
77521: PUSH
77522: EMPTY
77523: LIST
77524: LIST
77525: PUSH
77526: LD_INT 3
77528: PUSH
77529: LD_INT 23
77531: PUSH
77532: LD_INT 0
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: EMPTY
77544: LIST
77545: LIST
77546: LIST
77547: PPUSH
77548: CALL_OW 69
77552: PUSH
77553: FOR_IN
77554: IFFALSE 77608
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
77556: LD_VAR 0 1
77560: PPUSH
77561: CALL_OW 257
77565: PUSH
77566: LD_INT 1
77568: PUSH
77569: LD_INT 2
77571: PUSH
77572: LD_INT 3
77574: PUSH
77575: LD_INT 4
77577: PUSH
77578: EMPTY
77579: LIST
77580: LIST
77581: LIST
77582: LIST
77583: IN
77584: IFFALSE 77606
// SetClass ( un , rand ( 1 , 4 ) ) ;
77586: LD_VAR 0 1
77590: PPUSH
77591: LD_INT 1
77593: PPUSH
77594: LD_INT 4
77596: PPUSH
77597: CALL_OW 12
77601: PPUSH
77602: CALL_OW 336
77606: GO 77553
77608: POP
77609: POP
// end ;
77610: PPOPN 1
77612: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
77613: LD_EXP 63
77617: PUSH
77618: LD_EXP 75
77622: AND
77623: IFFALSE 77702
77625: GO 77627
77627: DISABLE
77628: LD_INT 0
77630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77631: LD_ADDR_VAR 0 1
77635: PUSH
77636: LD_INT 22
77638: PUSH
77639: LD_OWVAR 2
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: PUSH
77648: LD_INT 21
77650: PUSH
77651: LD_INT 3
77653: PUSH
77654: EMPTY
77655: LIST
77656: LIST
77657: PUSH
77658: EMPTY
77659: LIST
77660: LIST
77661: PPUSH
77662: CALL_OW 69
77666: ST_TO_ADDR
// if not tmp then
77667: LD_VAR 0 1
77671: NOT
77672: IFFALSE 77676
// exit ;
77674: GO 77702
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
77676: LD_VAR 0 1
77680: PUSH
77681: LD_INT 1
77683: PPUSH
77684: LD_VAR 0 1
77688: PPUSH
77689: CALL_OW 12
77693: ARRAY
77694: PPUSH
77695: LD_INT 100
77697: PPUSH
77698: CALL_OW 234
// end ;
77702: PPOPN 1
77704: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
77705: LD_EXP 63
77709: PUSH
77710: LD_EXP 77
77714: AND
77715: IFFALSE 77813
77717: GO 77719
77719: DISABLE
77720: LD_INT 0
77722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77723: LD_ADDR_VAR 0 1
77727: PUSH
77728: LD_INT 22
77730: PUSH
77731: LD_OWVAR 2
77735: PUSH
77736: EMPTY
77737: LIST
77738: LIST
77739: PUSH
77740: LD_INT 21
77742: PUSH
77743: LD_INT 1
77745: PUSH
77746: EMPTY
77747: LIST
77748: LIST
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: PPUSH
77754: CALL_OW 69
77758: ST_TO_ADDR
// if not tmp then
77759: LD_VAR 0 1
77763: NOT
77764: IFFALSE 77768
// exit ;
77766: GO 77813
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
77768: LD_VAR 0 1
77772: PUSH
77773: LD_INT 1
77775: PPUSH
77776: LD_VAR 0 1
77780: PPUSH
77781: CALL_OW 12
77785: ARRAY
77786: PPUSH
77787: LD_INT 1
77789: PPUSH
77790: LD_INT 4
77792: PPUSH
77793: CALL_OW 12
77797: PPUSH
77798: LD_INT 3000
77800: PPUSH
77801: LD_INT 9000
77803: PPUSH
77804: CALL_OW 12
77808: PPUSH
77809: CALL_OW 492
// end ;
77813: PPOPN 1
77815: END
// every 0 0$1 trigger StreamModeActive and sDepot do
77816: LD_EXP 63
77820: PUSH
77821: LD_EXP 78
77825: AND
77826: IFFALSE 77846
77828: GO 77830
77830: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
77831: LD_INT 1
77833: PPUSH
77834: LD_OWVAR 2
77838: PPUSH
77839: LD_INT 0
77841: PPUSH
77842: CALL_OW 324
77846: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
77847: LD_EXP 63
77851: PUSH
77852: LD_EXP 79
77856: AND
77857: IFFALSE 77940
77859: GO 77861
77861: DISABLE
77862: LD_INT 0
77864: PPUSH
77865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77866: LD_ADDR_VAR 0 2
77870: PUSH
77871: LD_INT 22
77873: PUSH
77874: LD_OWVAR 2
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: LD_INT 21
77885: PUSH
77886: LD_INT 3
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PUSH
77893: EMPTY
77894: LIST
77895: LIST
77896: PPUSH
77897: CALL_OW 69
77901: ST_TO_ADDR
// if not tmp then
77902: LD_VAR 0 2
77906: NOT
77907: IFFALSE 77911
// exit ;
77909: GO 77940
// for i in tmp do
77911: LD_ADDR_VAR 0 1
77915: PUSH
77916: LD_VAR 0 2
77920: PUSH
77921: FOR_IN
77922: IFFALSE 77938
// SetBLevel ( i , 10 ) ;
77924: LD_VAR 0 1
77928: PPUSH
77929: LD_INT 10
77931: PPUSH
77932: CALL_OW 241
77936: GO 77921
77938: POP
77939: POP
// end ;
77940: PPOPN 2
77942: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
77943: LD_EXP 63
77947: PUSH
77948: LD_EXP 80
77952: AND
77953: IFFALSE 78064
77955: GO 77957
77957: DISABLE
77958: LD_INT 0
77960: PPUSH
77961: PPUSH
77962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77963: LD_ADDR_VAR 0 3
77967: PUSH
77968: LD_INT 22
77970: PUSH
77971: LD_OWVAR 2
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: PUSH
77980: LD_INT 25
77982: PUSH
77983: LD_INT 1
77985: PUSH
77986: EMPTY
77987: LIST
77988: LIST
77989: PUSH
77990: EMPTY
77991: LIST
77992: LIST
77993: PPUSH
77994: CALL_OW 69
77998: ST_TO_ADDR
// if not tmp then
77999: LD_VAR 0 3
78003: NOT
78004: IFFALSE 78008
// exit ;
78006: GO 78064
// un := tmp [ rand ( 1 , tmp ) ] ;
78008: LD_ADDR_VAR 0 2
78012: PUSH
78013: LD_VAR 0 3
78017: PUSH
78018: LD_INT 1
78020: PPUSH
78021: LD_VAR 0 3
78025: PPUSH
78026: CALL_OW 12
78030: ARRAY
78031: ST_TO_ADDR
// if Crawls ( un ) then
78032: LD_VAR 0 2
78036: PPUSH
78037: CALL_OW 318
78041: IFFALSE 78052
// ComWalk ( un ) ;
78043: LD_VAR 0 2
78047: PPUSH
78048: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78052: LD_VAR 0 2
78056: PPUSH
78057: LD_INT 5
78059: PPUSH
78060: CALL_OW 336
// end ;
78064: PPOPN 3
78066: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
78067: LD_EXP 63
78071: PUSH
78072: LD_EXP 81
78076: AND
78077: PUSH
78078: LD_OWVAR 67
78082: PUSH
78083: LD_INT 4
78085: LESS
78086: AND
78087: IFFALSE 78106
78089: GO 78091
78091: DISABLE
// begin Difficulty := Difficulty + 1 ;
78092: LD_ADDR_OWVAR 67
78096: PUSH
78097: LD_OWVAR 67
78101: PUSH
78102: LD_INT 1
78104: PLUS
78105: ST_TO_ADDR
// end ;
78106: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
78107: LD_EXP 63
78111: PUSH
78112: LD_EXP 82
78116: AND
78117: IFFALSE 78220
78119: GO 78121
78121: DISABLE
78122: LD_INT 0
78124: PPUSH
// begin for i := 1 to 5 do
78125: LD_ADDR_VAR 0 1
78129: PUSH
78130: DOUBLE
78131: LD_INT 1
78133: DEC
78134: ST_TO_ADDR
78135: LD_INT 5
78137: PUSH
78138: FOR_TO
78139: IFFALSE 78218
// begin uc_nation := nation_nature ;
78141: LD_ADDR_OWVAR 21
78145: PUSH
78146: LD_INT 0
78148: ST_TO_ADDR
// uc_side := 0 ;
78149: LD_ADDR_OWVAR 20
78153: PUSH
78154: LD_INT 0
78156: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78157: LD_ADDR_OWVAR 29
78161: PUSH
78162: LD_INT 12
78164: PUSH
78165: LD_INT 12
78167: PUSH
78168: EMPTY
78169: LIST
78170: LIST
78171: ST_TO_ADDR
// hc_agressivity := 20 ;
78172: LD_ADDR_OWVAR 35
78176: PUSH
78177: LD_INT 20
78179: ST_TO_ADDR
// hc_class := class_tiger ;
78180: LD_ADDR_OWVAR 28
78184: PUSH
78185: LD_INT 14
78187: ST_TO_ADDR
// hc_gallery :=  ;
78188: LD_ADDR_OWVAR 33
78192: PUSH
78193: LD_STRING 
78195: ST_TO_ADDR
// hc_name :=  ;
78196: LD_ADDR_OWVAR 26
78200: PUSH
78201: LD_STRING 
78203: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78204: CALL_OW 44
78208: PPUSH
78209: LD_INT 0
78211: PPUSH
78212: CALL_OW 51
// end ;
78216: GO 78138
78218: POP
78219: POP
// end ;
78220: PPOPN 1
78222: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78223: LD_EXP 63
78227: PUSH
78228: LD_EXP 83
78232: AND
78233: IFFALSE 78242
78235: GO 78237
78237: DISABLE
// StreamSibBomb ;
78238: CALL 78243 0 0
78242: END
// export function StreamSibBomb ; var i , x , y ; begin
78243: LD_INT 0
78245: PPUSH
78246: PPUSH
78247: PPUSH
78248: PPUSH
// result := false ;
78249: LD_ADDR_VAR 0 1
78253: PUSH
78254: LD_INT 0
78256: ST_TO_ADDR
// for i := 1 to 16 do
78257: LD_ADDR_VAR 0 2
78261: PUSH
78262: DOUBLE
78263: LD_INT 1
78265: DEC
78266: ST_TO_ADDR
78267: LD_INT 16
78269: PUSH
78270: FOR_TO
78271: IFFALSE 78470
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78273: LD_ADDR_VAR 0 3
78277: PUSH
78278: LD_INT 10
78280: PUSH
78281: LD_INT 20
78283: PUSH
78284: LD_INT 30
78286: PUSH
78287: LD_INT 40
78289: PUSH
78290: LD_INT 50
78292: PUSH
78293: LD_INT 60
78295: PUSH
78296: LD_INT 70
78298: PUSH
78299: LD_INT 80
78301: PUSH
78302: LD_INT 90
78304: PUSH
78305: LD_INT 100
78307: PUSH
78308: LD_INT 110
78310: PUSH
78311: LD_INT 120
78313: PUSH
78314: LD_INT 130
78316: PUSH
78317: LD_INT 140
78319: PUSH
78320: LD_INT 150
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: LIST
78327: LIST
78328: LIST
78329: LIST
78330: LIST
78331: LIST
78332: LIST
78333: LIST
78334: LIST
78335: LIST
78336: LIST
78337: LIST
78338: LIST
78339: PUSH
78340: LD_INT 1
78342: PPUSH
78343: LD_INT 15
78345: PPUSH
78346: CALL_OW 12
78350: ARRAY
78351: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78352: LD_ADDR_VAR 0 4
78356: PUSH
78357: LD_INT 10
78359: PUSH
78360: LD_INT 20
78362: PUSH
78363: LD_INT 30
78365: PUSH
78366: LD_INT 40
78368: PUSH
78369: LD_INT 50
78371: PUSH
78372: LD_INT 60
78374: PUSH
78375: LD_INT 70
78377: PUSH
78378: LD_INT 80
78380: PUSH
78381: LD_INT 90
78383: PUSH
78384: LD_INT 100
78386: PUSH
78387: LD_INT 110
78389: PUSH
78390: LD_INT 120
78392: PUSH
78393: LD_INT 130
78395: PUSH
78396: LD_INT 140
78398: PUSH
78399: LD_INT 150
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: LIST
78406: LIST
78407: LIST
78408: LIST
78409: LIST
78410: LIST
78411: LIST
78412: LIST
78413: LIST
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: PUSH
78419: LD_INT 1
78421: PPUSH
78422: LD_INT 15
78424: PPUSH
78425: CALL_OW 12
78429: ARRAY
78430: ST_TO_ADDR
// if ValidHex ( x , y ) then
78431: LD_VAR 0 3
78435: PPUSH
78436: LD_VAR 0 4
78440: PPUSH
78441: CALL_OW 488
78445: IFFALSE 78468
// begin result := [ x , y ] ;
78447: LD_ADDR_VAR 0 1
78451: PUSH
78452: LD_VAR 0 3
78456: PUSH
78457: LD_VAR 0 4
78461: PUSH
78462: EMPTY
78463: LIST
78464: LIST
78465: ST_TO_ADDR
// break ;
78466: GO 78470
// end ; end ;
78468: GO 78270
78470: POP
78471: POP
// if result then
78472: LD_VAR 0 1
78476: IFFALSE 78536
// begin ToLua ( playSibBomb() ) ;
78478: LD_STRING playSibBomb()
78480: PPUSH
78481: CALL_OW 559
// wait ( 0 0$14 ) ;
78485: LD_INT 490
78487: PPUSH
78488: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
78492: LD_VAR 0 1
78496: PUSH
78497: LD_INT 1
78499: ARRAY
78500: PPUSH
78501: LD_VAR 0 1
78505: PUSH
78506: LD_INT 2
78508: ARRAY
78509: PPUSH
78510: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
78514: LD_VAR 0 1
78518: PUSH
78519: LD_INT 1
78521: ARRAY
78522: PPUSH
78523: LD_VAR 0 1
78527: PUSH
78528: LD_INT 2
78530: ARRAY
78531: PPUSH
78532: CALL_OW 429
// end ; end ;
78536: LD_VAR 0 1
78540: RET
// every 0 0$1 trigger StreamModeActive and sReset do
78541: LD_EXP 63
78545: PUSH
78546: LD_EXP 85
78550: AND
78551: IFFALSE 78563
78553: GO 78555
78555: DISABLE
// YouLost (  ) ;
78556: LD_STRING 
78558: PPUSH
78559: CALL_OW 104
78563: END
// every 0 0$1 trigger StreamModeActive and sFog do
78564: LD_EXP 63
78568: PUSH
78569: LD_EXP 84
78573: AND
78574: IFFALSE 78588
78576: GO 78578
78578: DISABLE
// FogOff ( your_side ) ;
78579: LD_OWVAR 2
78583: PPUSH
78584: CALL_OW 344
78588: END
// every 0 0$1 trigger StreamModeActive and sSun do
78589: LD_EXP 63
78593: PUSH
78594: LD_EXP 86
78598: AND
78599: IFFALSE 78627
78601: GO 78603
78603: DISABLE
// begin solar_recharge_percent := 0 ;
78604: LD_ADDR_OWVAR 79
78608: PUSH
78609: LD_INT 0
78611: ST_TO_ADDR
// wait ( 5 5$00 ) ;
78612: LD_INT 10500
78614: PPUSH
78615: CALL_OW 67
// solar_recharge_percent := 100 ;
78619: LD_ADDR_OWVAR 79
78623: PUSH
78624: LD_INT 100
78626: ST_TO_ADDR
// end ;
78627: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
78628: LD_EXP 63
78632: PUSH
78633: LD_EXP 87
78637: AND
78638: IFFALSE 78877
78640: GO 78642
78642: DISABLE
78643: LD_INT 0
78645: PPUSH
78646: PPUSH
78647: PPUSH
// begin tmp := [ ] ;
78648: LD_ADDR_VAR 0 3
78652: PUSH
78653: EMPTY
78654: ST_TO_ADDR
// for i := 1 to 6 do
78655: LD_ADDR_VAR 0 1
78659: PUSH
78660: DOUBLE
78661: LD_INT 1
78663: DEC
78664: ST_TO_ADDR
78665: LD_INT 6
78667: PUSH
78668: FOR_TO
78669: IFFALSE 78774
// begin uc_nation := nation_nature ;
78671: LD_ADDR_OWVAR 21
78675: PUSH
78676: LD_INT 0
78678: ST_TO_ADDR
// uc_side := 0 ;
78679: LD_ADDR_OWVAR 20
78683: PUSH
78684: LD_INT 0
78686: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78687: LD_ADDR_OWVAR 29
78691: PUSH
78692: LD_INT 12
78694: PUSH
78695: LD_INT 12
78697: PUSH
78698: EMPTY
78699: LIST
78700: LIST
78701: ST_TO_ADDR
// hc_agressivity := 20 ;
78702: LD_ADDR_OWVAR 35
78706: PUSH
78707: LD_INT 20
78709: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
78710: LD_ADDR_OWVAR 28
78714: PUSH
78715: LD_INT 17
78717: ST_TO_ADDR
// hc_gallery :=  ;
78718: LD_ADDR_OWVAR 33
78722: PUSH
78723: LD_STRING 
78725: ST_TO_ADDR
// hc_name :=  ;
78726: LD_ADDR_OWVAR 26
78730: PUSH
78731: LD_STRING 
78733: ST_TO_ADDR
// un := CreateHuman ;
78734: LD_ADDR_VAR 0 2
78738: PUSH
78739: CALL_OW 44
78743: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
78744: LD_VAR 0 2
78748: PPUSH
78749: LD_INT 1
78751: PPUSH
78752: CALL_OW 51
// tmp := tmp ^ un ;
78756: LD_ADDR_VAR 0 3
78760: PUSH
78761: LD_VAR 0 3
78765: PUSH
78766: LD_VAR 0 2
78770: ADD
78771: ST_TO_ADDR
// end ;
78772: GO 78668
78774: POP
78775: POP
// repeat wait ( 0 0$1 ) ;
78776: LD_INT 35
78778: PPUSH
78779: CALL_OW 67
// for un in tmp do
78783: LD_ADDR_VAR 0 2
78787: PUSH
78788: LD_VAR 0 3
78792: PUSH
78793: FOR_IN
78794: IFFALSE 78868
// begin if IsDead ( un ) then
78796: LD_VAR 0 2
78800: PPUSH
78801: CALL_OW 301
78805: IFFALSE 78825
// begin tmp := tmp diff un ;
78807: LD_ADDR_VAR 0 3
78811: PUSH
78812: LD_VAR 0 3
78816: PUSH
78817: LD_VAR 0 2
78821: DIFF
78822: ST_TO_ADDR
// continue ;
78823: GO 78793
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
78825: LD_VAR 0 2
78829: PPUSH
78830: LD_INT 3
78832: PUSH
78833: LD_INT 22
78835: PUSH
78836: LD_INT 0
78838: PUSH
78839: EMPTY
78840: LIST
78841: LIST
78842: PUSH
78843: EMPTY
78844: LIST
78845: LIST
78846: PPUSH
78847: CALL_OW 69
78851: PPUSH
78852: LD_VAR 0 2
78856: PPUSH
78857: CALL_OW 74
78861: PPUSH
78862: CALL_OW 115
// end ;
78866: GO 78793
78868: POP
78869: POP
// until not tmp ;
78870: LD_VAR 0 3
78874: NOT
78875: IFFALSE 78776
// end ;
78877: PPOPN 3
78879: END
// every 0 0$1 trigger StreamModeActive and sTroll do
78880: LD_EXP 63
78884: PUSH
78885: LD_EXP 88
78889: AND
78890: IFFALSE 78944
78892: GO 78894
78894: DISABLE
// begin ToLua ( displayTroll(); ) ;
78895: LD_STRING displayTroll();
78897: PPUSH
78898: CALL_OW 559
// wait ( 3 3$00 ) ;
78902: LD_INT 6300
78904: PPUSH
78905: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78909: LD_STRING hideTroll();
78911: PPUSH
78912: CALL_OW 559
// wait ( 1 1$00 ) ;
78916: LD_INT 2100
78918: PPUSH
78919: CALL_OW 67
// ToLua ( displayTroll(); ) ;
78923: LD_STRING displayTroll();
78925: PPUSH
78926: CALL_OW 559
// wait ( 1 1$00 ) ;
78930: LD_INT 2100
78932: PPUSH
78933: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78937: LD_STRING hideTroll();
78939: PPUSH
78940: CALL_OW 559
// end ;
78944: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
78945: LD_EXP 63
78949: PUSH
78950: LD_EXP 89
78954: AND
78955: IFFALSE 79018
78957: GO 78959
78959: DISABLE
78960: LD_INT 0
78962: PPUSH
// begin p := 0 ;
78963: LD_ADDR_VAR 0 1
78967: PUSH
78968: LD_INT 0
78970: ST_TO_ADDR
// repeat game_speed := 1 ;
78971: LD_ADDR_OWVAR 65
78975: PUSH
78976: LD_INT 1
78978: ST_TO_ADDR
// wait ( 0 0$1 ) ;
78979: LD_INT 35
78981: PPUSH
78982: CALL_OW 67
// p := p + 1 ;
78986: LD_ADDR_VAR 0 1
78990: PUSH
78991: LD_VAR 0 1
78995: PUSH
78996: LD_INT 1
78998: PLUS
78999: ST_TO_ADDR
// until p >= 60 ;
79000: LD_VAR 0 1
79004: PUSH
79005: LD_INT 60
79007: GREATEREQUAL
79008: IFFALSE 78971
// game_speed := 4 ;
79010: LD_ADDR_OWVAR 65
79014: PUSH
79015: LD_INT 4
79017: ST_TO_ADDR
// end ;
79018: PPOPN 1
79020: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79021: LD_EXP 63
79025: PUSH
79026: LD_EXP 90
79030: AND
79031: IFFALSE 79177
79033: GO 79035
79035: DISABLE
79036: LD_INT 0
79038: PPUSH
79039: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79040: LD_ADDR_VAR 0 1
79044: PUSH
79045: LD_INT 22
79047: PUSH
79048: LD_OWVAR 2
79052: PUSH
79053: EMPTY
79054: LIST
79055: LIST
79056: PUSH
79057: LD_INT 2
79059: PUSH
79060: LD_INT 30
79062: PUSH
79063: LD_INT 0
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: PUSH
79070: LD_INT 30
79072: PUSH
79073: LD_INT 1
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: LIST
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: PPUSH
79089: CALL_OW 69
79093: ST_TO_ADDR
// if not depot then
79094: LD_VAR 0 1
79098: NOT
79099: IFFALSE 79103
// exit ;
79101: GO 79177
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
79103: LD_ADDR_VAR 0 2
79107: PUSH
79108: LD_VAR 0 1
79112: PUSH
79113: LD_INT 1
79115: PPUSH
79116: LD_VAR 0 1
79120: PPUSH
79121: CALL_OW 12
79125: ARRAY
79126: PPUSH
79127: CALL_OW 274
79131: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79132: LD_VAR 0 2
79136: PPUSH
79137: LD_INT 1
79139: PPUSH
79140: LD_INT 0
79142: PPUSH
79143: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79147: LD_VAR 0 2
79151: PPUSH
79152: LD_INT 2
79154: PPUSH
79155: LD_INT 0
79157: PPUSH
79158: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79162: LD_VAR 0 2
79166: PPUSH
79167: LD_INT 3
79169: PPUSH
79170: LD_INT 0
79172: PPUSH
79173: CALL_OW 277
// end ;
79177: PPOPN 2
79179: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79180: LD_EXP 63
79184: PUSH
79185: LD_EXP 91
79189: AND
79190: IFFALSE 79287
79192: GO 79194
79194: DISABLE
79195: LD_INT 0
79197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79198: LD_ADDR_VAR 0 1
79202: PUSH
79203: LD_INT 22
79205: PUSH
79206: LD_OWVAR 2
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: PUSH
79215: LD_INT 21
79217: PUSH
79218: LD_INT 1
79220: PUSH
79221: EMPTY
79222: LIST
79223: LIST
79224: PUSH
79225: LD_INT 3
79227: PUSH
79228: LD_INT 23
79230: PUSH
79231: LD_INT 0
79233: PUSH
79234: EMPTY
79235: LIST
79236: LIST
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: PUSH
79242: EMPTY
79243: LIST
79244: LIST
79245: LIST
79246: PPUSH
79247: CALL_OW 69
79251: ST_TO_ADDR
// if not tmp then
79252: LD_VAR 0 1
79256: NOT
79257: IFFALSE 79261
// exit ;
79259: GO 79287
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79261: LD_VAR 0 1
79265: PUSH
79266: LD_INT 1
79268: PPUSH
79269: LD_VAR 0 1
79273: PPUSH
79274: CALL_OW 12
79278: ARRAY
79279: PPUSH
79280: LD_INT 200
79282: PPUSH
79283: CALL_OW 234
// end ;
79287: PPOPN 1
79289: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79290: LD_EXP 63
79294: PUSH
79295: LD_EXP 92
79299: AND
79300: IFFALSE 79379
79302: GO 79304
79304: DISABLE
79305: LD_INT 0
79307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79308: LD_ADDR_VAR 0 1
79312: PUSH
79313: LD_INT 22
79315: PUSH
79316: LD_OWVAR 2
79320: PUSH
79321: EMPTY
79322: LIST
79323: LIST
79324: PUSH
79325: LD_INT 21
79327: PUSH
79328: LD_INT 2
79330: PUSH
79331: EMPTY
79332: LIST
79333: LIST
79334: PUSH
79335: EMPTY
79336: LIST
79337: LIST
79338: PPUSH
79339: CALL_OW 69
79343: ST_TO_ADDR
// if not tmp then
79344: LD_VAR 0 1
79348: NOT
79349: IFFALSE 79353
// exit ;
79351: GO 79379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79353: LD_VAR 0 1
79357: PUSH
79358: LD_INT 1
79360: PPUSH
79361: LD_VAR 0 1
79365: PPUSH
79366: CALL_OW 12
79370: ARRAY
79371: PPUSH
79372: LD_INT 60
79374: PPUSH
79375: CALL_OW 234
// end ;
79379: PPOPN 1
79381: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79382: LD_EXP 63
79386: PUSH
79387: LD_EXP 93
79391: AND
79392: IFFALSE 79491
79394: GO 79396
79396: DISABLE
79397: LD_INT 0
79399: PPUSH
79400: PPUSH
// begin enable ;
79401: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79402: LD_ADDR_VAR 0 1
79406: PUSH
79407: LD_INT 22
79409: PUSH
79410: LD_OWVAR 2
79414: PUSH
79415: EMPTY
79416: LIST
79417: LIST
79418: PUSH
79419: LD_INT 61
79421: PUSH
79422: EMPTY
79423: LIST
79424: PUSH
79425: LD_INT 33
79427: PUSH
79428: LD_INT 2
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: PUSH
79435: EMPTY
79436: LIST
79437: LIST
79438: LIST
79439: PPUSH
79440: CALL_OW 69
79444: ST_TO_ADDR
// if not tmp then
79445: LD_VAR 0 1
79449: NOT
79450: IFFALSE 79454
// exit ;
79452: GO 79491
// for i in tmp do
79454: LD_ADDR_VAR 0 2
79458: PUSH
79459: LD_VAR 0 1
79463: PUSH
79464: FOR_IN
79465: IFFALSE 79489
// if IsControledBy ( i ) then
79467: LD_VAR 0 2
79471: PPUSH
79472: CALL_OW 312
79476: IFFALSE 79487
// ComUnlink ( i ) ;
79478: LD_VAR 0 2
79482: PPUSH
79483: CALL_OW 136
79487: GO 79464
79489: POP
79490: POP
// end ;
79491: PPOPN 2
79493: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
79494: LD_EXP 63
79498: PUSH
79499: LD_EXP 94
79503: AND
79504: IFFALSE 79644
79506: GO 79508
79508: DISABLE
79509: LD_INT 0
79511: PPUSH
79512: PPUSH
// begin ToLua ( displayPowell(); ) ;
79513: LD_STRING displayPowell();
79515: PPUSH
79516: CALL_OW 559
// uc_side := 0 ;
79520: LD_ADDR_OWVAR 20
79524: PUSH
79525: LD_INT 0
79527: ST_TO_ADDR
// uc_nation := 2 ;
79528: LD_ADDR_OWVAR 21
79532: PUSH
79533: LD_INT 2
79535: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
79536: LD_ADDR_OWVAR 37
79540: PUSH
79541: LD_INT 14
79543: ST_TO_ADDR
// vc_engine := engine_siberite ;
79544: LD_ADDR_OWVAR 39
79548: PUSH
79549: LD_INT 3
79551: ST_TO_ADDR
// vc_control := control_apeman ;
79552: LD_ADDR_OWVAR 38
79556: PUSH
79557: LD_INT 5
79559: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
79560: LD_ADDR_OWVAR 40
79564: PUSH
79565: LD_INT 29
79567: ST_TO_ADDR
// un := CreateVehicle ;
79568: LD_ADDR_VAR 0 2
79572: PUSH
79573: CALL_OW 45
79577: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79578: LD_VAR 0 2
79582: PPUSH
79583: LD_INT 1
79585: PPUSH
79586: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79590: LD_INT 35
79592: PPUSH
79593: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79597: LD_VAR 0 2
79601: PPUSH
79602: LD_INT 22
79604: PUSH
79605: LD_OWVAR 2
79609: PUSH
79610: EMPTY
79611: LIST
79612: LIST
79613: PPUSH
79614: CALL_OW 69
79618: PPUSH
79619: LD_VAR 0 2
79623: PPUSH
79624: CALL_OW 74
79628: PPUSH
79629: CALL_OW 115
// until IsDead ( un ) ;
79633: LD_VAR 0 2
79637: PPUSH
79638: CALL_OW 301
79642: IFFALSE 79590
// end ;
79644: PPOPN 2
79646: END
// every 0 0$1 trigger StreamModeActive and sStu do
79647: LD_EXP 63
79651: PUSH
79652: LD_EXP 102
79656: AND
79657: IFFALSE 79673
79659: GO 79661
79661: DISABLE
// begin ToLua ( displayStucuk(); ) ;
79662: LD_STRING displayStucuk();
79664: PPUSH
79665: CALL_OW 559
// ResetFog ;
79669: CALL_OW 335
// end ;
79673: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
79674: LD_EXP 63
79678: PUSH
79679: LD_EXP 95
79683: AND
79684: IFFALSE 79825
79686: GO 79688
79688: DISABLE
79689: LD_INT 0
79691: PPUSH
79692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79693: LD_ADDR_VAR 0 2
79697: PUSH
79698: LD_INT 22
79700: PUSH
79701: LD_OWVAR 2
79705: PUSH
79706: EMPTY
79707: LIST
79708: LIST
79709: PUSH
79710: LD_INT 21
79712: PUSH
79713: LD_INT 1
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: PUSH
79720: EMPTY
79721: LIST
79722: LIST
79723: PPUSH
79724: CALL_OW 69
79728: ST_TO_ADDR
// if not tmp then
79729: LD_VAR 0 2
79733: NOT
79734: IFFALSE 79738
// exit ;
79736: GO 79825
// un := tmp [ rand ( 1 , tmp ) ] ;
79738: LD_ADDR_VAR 0 1
79742: PUSH
79743: LD_VAR 0 2
79747: PUSH
79748: LD_INT 1
79750: PPUSH
79751: LD_VAR 0 2
79755: PPUSH
79756: CALL_OW 12
79760: ARRAY
79761: ST_TO_ADDR
// SetSide ( un , 0 ) ;
79762: LD_VAR 0 1
79766: PPUSH
79767: LD_INT 0
79769: PPUSH
79770: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
79774: LD_VAR 0 1
79778: PPUSH
79779: LD_OWVAR 3
79783: PUSH
79784: LD_VAR 0 1
79788: DIFF
79789: PPUSH
79790: LD_VAR 0 1
79794: PPUSH
79795: CALL_OW 74
79799: PPUSH
79800: CALL_OW 115
// wait ( 0 0$20 ) ;
79804: LD_INT 700
79806: PPUSH
79807: CALL_OW 67
// SetSide ( un , your_side ) ;
79811: LD_VAR 0 1
79815: PPUSH
79816: LD_OWVAR 2
79820: PPUSH
79821: CALL_OW 235
// end ;
79825: PPOPN 2
79827: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
79828: LD_EXP 63
79832: PUSH
79833: LD_EXP 96
79837: AND
79838: IFFALSE 79944
79840: GO 79842
79842: DISABLE
79843: LD_INT 0
79845: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79846: LD_ADDR_VAR 0 1
79850: PUSH
79851: LD_INT 22
79853: PUSH
79854: LD_OWVAR 2
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: PUSH
79863: LD_INT 2
79865: PUSH
79866: LD_INT 30
79868: PUSH
79869: LD_INT 0
79871: PUSH
79872: EMPTY
79873: LIST
79874: LIST
79875: PUSH
79876: LD_INT 30
79878: PUSH
79879: LD_INT 1
79881: PUSH
79882: EMPTY
79883: LIST
79884: LIST
79885: PUSH
79886: EMPTY
79887: LIST
79888: LIST
79889: LIST
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: PPUSH
79895: CALL_OW 69
79899: ST_TO_ADDR
// if not depot then
79900: LD_VAR 0 1
79904: NOT
79905: IFFALSE 79909
// exit ;
79907: GO 79944
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
79909: LD_VAR 0 1
79913: PUSH
79914: LD_INT 1
79916: ARRAY
79917: PPUSH
79918: CALL_OW 250
79922: PPUSH
79923: LD_VAR 0 1
79927: PUSH
79928: LD_INT 1
79930: ARRAY
79931: PPUSH
79932: CALL_OW 251
79936: PPUSH
79937: LD_INT 70
79939: PPUSH
79940: CALL_OW 495
// end ;
79944: PPOPN 1
79946: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
79947: LD_EXP 63
79951: PUSH
79952: LD_EXP 97
79956: AND
79957: IFFALSE 80168
79959: GO 79961
79961: DISABLE
79962: LD_INT 0
79964: PPUSH
79965: PPUSH
79966: PPUSH
79967: PPUSH
79968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79969: LD_ADDR_VAR 0 5
79973: PUSH
79974: LD_INT 22
79976: PUSH
79977: LD_OWVAR 2
79981: PUSH
79982: EMPTY
79983: LIST
79984: LIST
79985: PUSH
79986: LD_INT 21
79988: PUSH
79989: LD_INT 1
79991: PUSH
79992: EMPTY
79993: LIST
79994: LIST
79995: PUSH
79996: EMPTY
79997: LIST
79998: LIST
79999: PPUSH
80000: CALL_OW 69
80004: ST_TO_ADDR
// if not tmp then
80005: LD_VAR 0 5
80009: NOT
80010: IFFALSE 80014
// exit ;
80012: GO 80168
// for i in tmp do
80014: LD_ADDR_VAR 0 1
80018: PUSH
80019: LD_VAR 0 5
80023: PUSH
80024: FOR_IN
80025: IFFALSE 80166
// begin d := rand ( 0 , 5 ) ;
80027: LD_ADDR_VAR 0 4
80031: PUSH
80032: LD_INT 0
80034: PPUSH
80035: LD_INT 5
80037: PPUSH
80038: CALL_OW 12
80042: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80043: LD_ADDR_VAR 0 2
80047: PUSH
80048: LD_VAR 0 1
80052: PPUSH
80053: CALL_OW 250
80057: PPUSH
80058: LD_VAR 0 4
80062: PPUSH
80063: LD_INT 3
80065: PPUSH
80066: LD_INT 12
80068: PPUSH
80069: CALL_OW 12
80073: PPUSH
80074: CALL_OW 272
80078: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
80079: LD_ADDR_VAR 0 3
80083: PUSH
80084: LD_VAR 0 1
80088: PPUSH
80089: CALL_OW 251
80093: PPUSH
80094: LD_VAR 0 4
80098: PPUSH
80099: LD_INT 3
80101: PPUSH
80102: LD_INT 12
80104: PPUSH
80105: CALL_OW 12
80109: PPUSH
80110: CALL_OW 273
80114: ST_TO_ADDR
// if ValidHex ( x , y ) then
80115: LD_VAR 0 2
80119: PPUSH
80120: LD_VAR 0 3
80124: PPUSH
80125: CALL_OW 488
80129: IFFALSE 80164
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80131: LD_VAR 0 1
80135: PPUSH
80136: LD_VAR 0 2
80140: PPUSH
80141: LD_VAR 0 3
80145: PPUSH
80146: LD_INT 3
80148: PPUSH
80149: LD_INT 6
80151: PPUSH
80152: CALL_OW 12
80156: PPUSH
80157: LD_INT 1
80159: PPUSH
80160: CALL_OW 483
// end ;
80164: GO 80024
80166: POP
80167: POP
// end ;
80168: PPOPN 5
80170: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80171: LD_EXP 63
80175: PUSH
80176: LD_EXP 98
80180: AND
80181: IFFALSE 80275
80183: GO 80185
80185: DISABLE
80186: LD_INT 0
80188: PPUSH
80189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80190: LD_ADDR_VAR 0 2
80194: PUSH
80195: LD_INT 22
80197: PUSH
80198: LD_OWVAR 2
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: PUSH
80207: LD_INT 32
80209: PUSH
80210: LD_INT 1
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: PUSH
80217: LD_INT 21
80219: PUSH
80220: LD_INT 2
80222: PUSH
80223: EMPTY
80224: LIST
80225: LIST
80226: PUSH
80227: EMPTY
80228: LIST
80229: LIST
80230: LIST
80231: PPUSH
80232: CALL_OW 69
80236: ST_TO_ADDR
// if not tmp then
80237: LD_VAR 0 2
80241: NOT
80242: IFFALSE 80246
// exit ;
80244: GO 80275
// for i in tmp do
80246: LD_ADDR_VAR 0 1
80250: PUSH
80251: LD_VAR 0 2
80255: PUSH
80256: FOR_IN
80257: IFFALSE 80273
// SetFuel ( i , 0 ) ;
80259: LD_VAR 0 1
80263: PPUSH
80264: LD_INT 0
80266: PPUSH
80267: CALL_OW 240
80271: GO 80256
80273: POP
80274: POP
// end ;
80275: PPOPN 2
80277: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80278: LD_EXP 63
80282: PUSH
80283: LD_EXP 99
80287: AND
80288: IFFALSE 80354
80290: GO 80292
80292: DISABLE
80293: LD_INT 0
80295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80296: LD_ADDR_VAR 0 1
80300: PUSH
80301: LD_INT 22
80303: PUSH
80304: LD_OWVAR 2
80308: PUSH
80309: EMPTY
80310: LIST
80311: LIST
80312: PUSH
80313: LD_INT 30
80315: PUSH
80316: LD_INT 29
80318: PUSH
80319: EMPTY
80320: LIST
80321: LIST
80322: PUSH
80323: EMPTY
80324: LIST
80325: LIST
80326: PPUSH
80327: CALL_OW 69
80331: ST_TO_ADDR
// if not tmp then
80332: LD_VAR 0 1
80336: NOT
80337: IFFALSE 80341
// exit ;
80339: GO 80354
// DestroyUnit ( tmp [ 1 ] ) ;
80341: LD_VAR 0 1
80345: PUSH
80346: LD_INT 1
80348: ARRAY
80349: PPUSH
80350: CALL_OW 65
// end ;
80354: PPOPN 1
80356: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80357: LD_EXP 63
80361: PUSH
80362: LD_EXP 101
80366: AND
80367: IFFALSE 80496
80369: GO 80371
80371: DISABLE
80372: LD_INT 0
80374: PPUSH
// begin uc_side := 0 ;
80375: LD_ADDR_OWVAR 20
80379: PUSH
80380: LD_INT 0
80382: ST_TO_ADDR
// uc_nation := nation_arabian ;
80383: LD_ADDR_OWVAR 21
80387: PUSH
80388: LD_INT 2
80390: ST_TO_ADDR
// hc_gallery :=  ;
80391: LD_ADDR_OWVAR 33
80395: PUSH
80396: LD_STRING 
80398: ST_TO_ADDR
// hc_name :=  ;
80399: LD_ADDR_OWVAR 26
80403: PUSH
80404: LD_STRING 
80406: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80407: LD_INT 1
80409: PPUSH
80410: LD_INT 11
80412: PPUSH
80413: LD_INT 10
80415: PPUSH
80416: CALL_OW 380
// un := CreateHuman ;
80420: LD_ADDR_VAR 0 1
80424: PUSH
80425: CALL_OW 44
80429: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80430: LD_VAR 0 1
80434: PPUSH
80435: LD_INT 1
80437: PPUSH
80438: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80442: LD_INT 35
80444: PPUSH
80445: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80449: LD_VAR 0 1
80453: PPUSH
80454: LD_INT 22
80456: PUSH
80457: LD_OWVAR 2
80461: PUSH
80462: EMPTY
80463: LIST
80464: LIST
80465: PPUSH
80466: CALL_OW 69
80470: PPUSH
80471: LD_VAR 0 1
80475: PPUSH
80476: CALL_OW 74
80480: PPUSH
80481: CALL_OW 115
// until IsDead ( un ) ;
80485: LD_VAR 0 1
80489: PPUSH
80490: CALL_OW 301
80494: IFFALSE 80442
// end ;
80496: PPOPN 1
80498: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
80499: LD_EXP 63
80503: PUSH
80504: LD_EXP 103
80508: AND
80509: IFFALSE 80521
80511: GO 80513
80513: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
80514: LD_STRING earthquake(getX(game), 0, 32)
80516: PPUSH
80517: CALL_OW 559
80521: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
80522: LD_EXP 63
80526: PUSH
80527: LD_EXP 104
80531: AND
80532: IFFALSE 80623
80534: GO 80536
80536: DISABLE
80537: LD_INT 0
80539: PPUSH
// begin enable ;
80540: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
80541: LD_ADDR_VAR 0 1
80545: PUSH
80546: LD_INT 22
80548: PUSH
80549: LD_OWVAR 2
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: PUSH
80558: LD_INT 21
80560: PUSH
80561: LD_INT 2
80563: PUSH
80564: EMPTY
80565: LIST
80566: LIST
80567: PUSH
80568: LD_INT 33
80570: PUSH
80571: LD_INT 3
80573: PUSH
80574: EMPTY
80575: LIST
80576: LIST
80577: PUSH
80578: EMPTY
80579: LIST
80580: LIST
80581: LIST
80582: PPUSH
80583: CALL_OW 69
80587: ST_TO_ADDR
// if not tmp then
80588: LD_VAR 0 1
80592: NOT
80593: IFFALSE 80597
// exit ;
80595: GO 80623
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80597: LD_VAR 0 1
80601: PUSH
80602: LD_INT 1
80604: PPUSH
80605: LD_VAR 0 1
80609: PPUSH
80610: CALL_OW 12
80614: ARRAY
80615: PPUSH
80616: LD_INT 1
80618: PPUSH
80619: CALL_OW 234
// end ;
80623: PPOPN 1
80625: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
80626: LD_EXP 63
80630: PUSH
80631: LD_EXP 105
80635: AND
80636: IFFALSE 80777
80638: GO 80640
80640: DISABLE
80641: LD_INT 0
80643: PPUSH
80644: PPUSH
80645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80646: LD_ADDR_VAR 0 3
80650: PUSH
80651: LD_INT 22
80653: PUSH
80654: LD_OWVAR 2
80658: PUSH
80659: EMPTY
80660: LIST
80661: LIST
80662: PUSH
80663: LD_INT 25
80665: PUSH
80666: LD_INT 1
80668: PUSH
80669: EMPTY
80670: LIST
80671: LIST
80672: PUSH
80673: EMPTY
80674: LIST
80675: LIST
80676: PPUSH
80677: CALL_OW 69
80681: ST_TO_ADDR
// if not tmp then
80682: LD_VAR 0 3
80686: NOT
80687: IFFALSE 80691
// exit ;
80689: GO 80777
// un := tmp [ rand ( 1 , tmp ) ] ;
80691: LD_ADDR_VAR 0 2
80695: PUSH
80696: LD_VAR 0 3
80700: PUSH
80701: LD_INT 1
80703: PPUSH
80704: LD_VAR 0 3
80708: PPUSH
80709: CALL_OW 12
80713: ARRAY
80714: ST_TO_ADDR
// if Crawls ( un ) then
80715: LD_VAR 0 2
80719: PPUSH
80720: CALL_OW 318
80724: IFFALSE 80735
// ComWalk ( un ) ;
80726: LD_VAR 0 2
80730: PPUSH
80731: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
80735: LD_VAR 0 2
80739: PPUSH
80740: LD_INT 9
80742: PPUSH
80743: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
80747: LD_INT 28
80749: PPUSH
80750: LD_OWVAR 2
80754: PPUSH
80755: LD_INT 2
80757: PPUSH
80758: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
80762: LD_INT 29
80764: PPUSH
80765: LD_OWVAR 2
80769: PPUSH
80770: LD_INT 2
80772: PPUSH
80773: CALL_OW 322
// end ;
80777: PPOPN 3
80779: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
80780: LD_EXP 63
80784: PUSH
80785: LD_EXP 106
80789: AND
80790: IFFALSE 80901
80792: GO 80794
80794: DISABLE
80795: LD_INT 0
80797: PPUSH
80798: PPUSH
80799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80800: LD_ADDR_VAR 0 3
80804: PUSH
80805: LD_INT 22
80807: PUSH
80808: LD_OWVAR 2
80812: PUSH
80813: EMPTY
80814: LIST
80815: LIST
80816: PUSH
80817: LD_INT 25
80819: PUSH
80820: LD_INT 1
80822: PUSH
80823: EMPTY
80824: LIST
80825: LIST
80826: PUSH
80827: EMPTY
80828: LIST
80829: LIST
80830: PPUSH
80831: CALL_OW 69
80835: ST_TO_ADDR
// if not tmp then
80836: LD_VAR 0 3
80840: NOT
80841: IFFALSE 80845
// exit ;
80843: GO 80901
// un := tmp [ rand ( 1 , tmp ) ] ;
80845: LD_ADDR_VAR 0 2
80849: PUSH
80850: LD_VAR 0 3
80854: PUSH
80855: LD_INT 1
80857: PPUSH
80858: LD_VAR 0 3
80862: PPUSH
80863: CALL_OW 12
80867: ARRAY
80868: ST_TO_ADDR
// if Crawls ( un ) then
80869: LD_VAR 0 2
80873: PPUSH
80874: CALL_OW 318
80878: IFFALSE 80889
// ComWalk ( un ) ;
80880: LD_VAR 0 2
80884: PPUSH
80885: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80889: LD_VAR 0 2
80893: PPUSH
80894: LD_INT 8
80896: PPUSH
80897: CALL_OW 336
// end ;
80901: PPOPN 3
80903: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
80904: LD_EXP 63
80908: PUSH
80909: LD_EXP 107
80913: AND
80914: IFFALSE 81058
80916: GO 80918
80918: DISABLE
80919: LD_INT 0
80921: PPUSH
80922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
80923: LD_ADDR_VAR 0 2
80927: PUSH
80928: LD_INT 22
80930: PUSH
80931: LD_OWVAR 2
80935: PUSH
80936: EMPTY
80937: LIST
80938: LIST
80939: PUSH
80940: LD_INT 21
80942: PUSH
80943: LD_INT 2
80945: PUSH
80946: EMPTY
80947: LIST
80948: LIST
80949: PUSH
80950: LD_INT 2
80952: PUSH
80953: LD_INT 34
80955: PUSH
80956: LD_INT 12
80958: PUSH
80959: EMPTY
80960: LIST
80961: LIST
80962: PUSH
80963: LD_INT 34
80965: PUSH
80966: LD_INT 51
80968: PUSH
80969: EMPTY
80970: LIST
80971: LIST
80972: PUSH
80973: LD_INT 34
80975: PUSH
80976: LD_INT 32
80978: PUSH
80979: EMPTY
80980: LIST
80981: LIST
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: LIST
80987: LIST
80988: PUSH
80989: EMPTY
80990: LIST
80991: LIST
80992: LIST
80993: PPUSH
80994: CALL_OW 69
80998: ST_TO_ADDR
// if not tmp then
80999: LD_VAR 0 2
81003: NOT
81004: IFFALSE 81008
// exit ;
81006: GO 81058
// for i in tmp do
81008: LD_ADDR_VAR 0 1
81012: PUSH
81013: LD_VAR 0 2
81017: PUSH
81018: FOR_IN
81019: IFFALSE 81056
// if GetCargo ( i , mat_artifact ) = 0 then
81021: LD_VAR 0 1
81025: PPUSH
81026: LD_INT 4
81028: PPUSH
81029: CALL_OW 289
81033: PUSH
81034: LD_INT 0
81036: EQUAL
81037: IFFALSE 81054
// SetCargo ( i , mat_siberit , 100 ) ;
81039: LD_VAR 0 1
81043: PPUSH
81044: LD_INT 3
81046: PPUSH
81047: LD_INT 100
81049: PPUSH
81050: CALL_OW 290
81054: GO 81018
81056: POP
81057: POP
// end ;
81058: PPOPN 2
81060: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81061: LD_EXP 63
81065: PUSH
81066: LD_EXP 108
81070: AND
81071: IFFALSE 81254
81073: GO 81075
81075: DISABLE
81076: LD_INT 0
81078: PPUSH
81079: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81080: LD_ADDR_VAR 0 2
81084: PUSH
81085: LD_INT 22
81087: PUSH
81088: LD_OWVAR 2
81092: PUSH
81093: EMPTY
81094: LIST
81095: LIST
81096: PPUSH
81097: CALL_OW 69
81101: ST_TO_ADDR
// if not tmp then
81102: LD_VAR 0 2
81106: NOT
81107: IFFALSE 81111
// exit ;
81109: GO 81254
// for i := 1 to 2 do
81111: LD_ADDR_VAR 0 1
81115: PUSH
81116: DOUBLE
81117: LD_INT 1
81119: DEC
81120: ST_TO_ADDR
81121: LD_INT 2
81123: PUSH
81124: FOR_TO
81125: IFFALSE 81252
// begin uc_side := your_side ;
81127: LD_ADDR_OWVAR 20
81131: PUSH
81132: LD_OWVAR 2
81136: ST_TO_ADDR
// uc_nation := nation_american ;
81137: LD_ADDR_OWVAR 21
81141: PUSH
81142: LD_INT 1
81144: ST_TO_ADDR
// vc_chassis := us_morphling ;
81145: LD_ADDR_OWVAR 37
81149: PUSH
81150: LD_INT 5
81152: ST_TO_ADDR
// vc_engine := engine_siberite ;
81153: LD_ADDR_OWVAR 39
81157: PUSH
81158: LD_INT 3
81160: ST_TO_ADDR
// vc_control := control_computer ;
81161: LD_ADDR_OWVAR 38
81165: PUSH
81166: LD_INT 3
81168: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81169: LD_ADDR_OWVAR 40
81173: PUSH
81174: LD_INT 10
81176: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81177: LD_VAR 0 2
81181: PUSH
81182: LD_INT 1
81184: ARRAY
81185: PPUSH
81186: CALL_OW 310
81190: NOT
81191: IFFALSE 81238
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81193: CALL_OW 45
81197: PPUSH
81198: LD_VAR 0 2
81202: PUSH
81203: LD_INT 1
81205: ARRAY
81206: PPUSH
81207: CALL_OW 250
81211: PPUSH
81212: LD_VAR 0 2
81216: PUSH
81217: LD_INT 1
81219: ARRAY
81220: PPUSH
81221: CALL_OW 251
81225: PPUSH
81226: LD_INT 12
81228: PPUSH
81229: LD_INT 1
81231: PPUSH
81232: CALL_OW 50
81236: GO 81250
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81238: CALL_OW 45
81242: PPUSH
81243: LD_INT 1
81245: PPUSH
81246: CALL_OW 51
// end ;
81250: GO 81124
81252: POP
81253: POP
// end ;
81254: PPOPN 2
81256: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81257: LD_EXP 63
81261: PUSH
81262: LD_EXP 109
81266: AND
81267: IFFALSE 81489
81269: GO 81271
81271: DISABLE
81272: LD_INT 0
81274: PPUSH
81275: PPUSH
81276: PPUSH
81277: PPUSH
81278: PPUSH
81279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81280: LD_ADDR_VAR 0 6
81284: PUSH
81285: LD_INT 22
81287: PUSH
81288: LD_OWVAR 2
81292: PUSH
81293: EMPTY
81294: LIST
81295: LIST
81296: PUSH
81297: LD_INT 21
81299: PUSH
81300: LD_INT 1
81302: PUSH
81303: EMPTY
81304: LIST
81305: LIST
81306: PUSH
81307: LD_INT 3
81309: PUSH
81310: LD_INT 23
81312: PUSH
81313: LD_INT 0
81315: PUSH
81316: EMPTY
81317: LIST
81318: LIST
81319: PUSH
81320: EMPTY
81321: LIST
81322: LIST
81323: PUSH
81324: EMPTY
81325: LIST
81326: LIST
81327: LIST
81328: PPUSH
81329: CALL_OW 69
81333: ST_TO_ADDR
// if not tmp then
81334: LD_VAR 0 6
81338: NOT
81339: IFFALSE 81343
// exit ;
81341: GO 81489
// s1 := rand ( 1 , 4 ) ;
81343: LD_ADDR_VAR 0 2
81347: PUSH
81348: LD_INT 1
81350: PPUSH
81351: LD_INT 4
81353: PPUSH
81354: CALL_OW 12
81358: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81359: LD_ADDR_VAR 0 4
81363: PUSH
81364: LD_VAR 0 6
81368: PUSH
81369: LD_INT 1
81371: ARRAY
81372: PPUSH
81373: LD_VAR 0 2
81377: PPUSH
81378: CALL_OW 259
81382: ST_TO_ADDR
// if s1 = 1 then
81383: LD_VAR 0 2
81387: PUSH
81388: LD_INT 1
81390: EQUAL
81391: IFFALSE 81411
// s2 := rand ( 2 , 4 ) else
81393: LD_ADDR_VAR 0 3
81397: PUSH
81398: LD_INT 2
81400: PPUSH
81401: LD_INT 4
81403: PPUSH
81404: CALL_OW 12
81408: ST_TO_ADDR
81409: GO 81419
// s2 := 1 ;
81411: LD_ADDR_VAR 0 3
81415: PUSH
81416: LD_INT 1
81418: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81419: LD_ADDR_VAR 0 5
81423: PUSH
81424: LD_VAR 0 6
81428: PUSH
81429: LD_INT 1
81431: ARRAY
81432: PPUSH
81433: LD_VAR 0 3
81437: PPUSH
81438: CALL_OW 259
81442: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81443: LD_VAR 0 6
81447: PUSH
81448: LD_INT 1
81450: ARRAY
81451: PPUSH
81452: LD_VAR 0 2
81456: PPUSH
81457: LD_VAR 0 5
81461: PPUSH
81462: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81466: LD_VAR 0 6
81470: PUSH
81471: LD_INT 1
81473: ARRAY
81474: PPUSH
81475: LD_VAR 0 3
81479: PPUSH
81480: LD_VAR 0 4
81484: PPUSH
81485: CALL_OW 237
// end ;
81489: PPOPN 6
81491: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
81492: LD_EXP 63
81496: PUSH
81497: LD_EXP 110
81501: AND
81502: IFFALSE 81581
81504: GO 81506
81506: DISABLE
81507: LD_INT 0
81509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
81510: LD_ADDR_VAR 0 1
81514: PUSH
81515: LD_INT 22
81517: PUSH
81518: LD_OWVAR 2
81522: PUSH
81523: EMPTY
81524: LIST
81525: LIST
81526: PUSH
81527: LD_INT 30
81529: PUSH
81530: LD_INT 3
81532: PUSH
81533: EMPTY
81534: LIST
81535: LIST
81536: PUSH
81537: EMPTY
81538: LIST
81539: LIST
81540: PPUSH
81541: CALL_OW 69
81545: ST_TO_ADDR
// if not tmp then
81546: LD_VAR 0 1
81550: NOT
81551: IFFALSE 81555
// exit ;
81553: GO 81581
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81555: LD_VAR 0 1
81559: PUSH
81560: LD_INT 1
81562: PPUSH
81563: LD_VAR 0 1
81567: PPUSH
81568: CALL_OW 12
81572: ARRAY
81573: PPUSH
81574: LD_INT 1
81576: PPUSH
81577: CALL_OW 234
// end ;
81581: PPOPN 1
81583: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
81584: LD_EXP 63
81588: PUSH
81589: LD_EXP 111
81593: AND
81594: IFFALSE 81706
81596: GO 81598
81598: DISABLE
81599: LD_INT 0
81601: PPUSH
81602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
81603: LD_ADDR_VAR 0 2
81607: PUSH
81608: LD_INT 22
81610: PUSH
81611: LD_OWVAR 2
81615: PUSH
81616: EMPTY
81617: LIST
81618: LIST
81619: PUSH
81620: LD_INT 2
81622: PUSH
81623: LD_INT 30
81625: PUSH
81626: LD_INT 27
81628: PUSH
81629: EMPTY
81630: LIST
81631: LIST
81632: PUSH
81633: LD_INT 30
81635: PUSH
81636: LD_INT 26
81638: PUSH
81639: EMPTY
81640: LIST
81641: LIST
81642: PUSH
81643: LD_INT 30
81645: PUSH
81646: LD_INT 28
81648: PUSH
81649: EMPTY
81650: LIST
81651: LIST
81652: PUSH
81653: EMPTY
81654: LIST
81655: LIST
81656: LIST
81657: LIST
81658: PUSH
81659: EMPTY
81660: LIST
81661: LIST
81662: PPUSH
81663: CALL_OW 69
81667: ST_TO_ADDR
// if not tmp then
81668: LD_VAR 0 2
81672: NOT
81673: IFFALSE 81677
// exit ;
81675: GO 81706
// for i in tmp do
81677: LD_ADDR_VAR 0 1
81681: PUSH
81682: LD_VAR 0 2
81686: PUSH
81687: FOR_IN
81688: IFFALSE 81704
// SetLives ( i , 1 ) ;
81690: LD_VAR 0 1
81694: PPUSH
81695: LD_INT 1
81697: PPUSH
81698: CALL_OW 234
81702: GO 81687
81704: POP
81705: POP
// end ;
81706: PPOPN 2
81708: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
81709: LD_EXP 63
81713: PUSH
81714: LD_EXP 112
81718: AND
81719: IFFALSE 82006
81721: GO 81723
81723: DISABLE
81724: LD_INT 0
81726: PPUSH
81727: PPUSH
81728: PPUSH
// begin i := rand ( 1 , 7 ) ;
81729: LD_ADDR_VAR 0 1
81733: PUSH
81734: LD_INT 1
81736: PPUSH
81737: LD_INT 7
81739: PPUSH
81740: CALL_OW 12
81744: ST_TO_ADDR
// case i of 1 :
81745: LD_VAR 0 1
81749: PUSH
81750: LD_INT 1
81752: DOUBLE
81753: EQUAL
81754: IFTRUE 81758
81756: GO 81768
81758: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
81759: LD_STRING earthquake(getX(game), 0, 32)
81761: PPUSH
81762: CALL_OW 559
81766: GO 82006
81768: LD_INT 2
81770: DOUBLE
81771: EQUAL
81772: IFTRUE 81776
81774: GO 81790
81776: POP
// begin ToLua ( displayStucuk(); ) ;
81777: LD_STRING displayStucuk();
81779: PPUSH
81780: CALL_OW 559
// ResetFog ;
81784: CALL_OW 335
// end ; 3 :
81788: GO 82006
81790: LD_INT 3
81792: DOUBLE
81793: EQUAL
81794: IFTRUE 81798
81796: GO 81902
81798: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81799: LD_ADDR_VAR 0 2
81803: PUSH
81804: LD_INT 22
81806: PUSH
81807: LD_OWVAR 2
81811: PUSH
81812: EMPTY
81813: LIST
81814: LIST
81815: PUSH
81816: LD_INT 25
81818: PUSH
81819: LD_INT 1
81821: PUSH
81822: EMPTY
81823: LIST
81824: LIST
81825: PUSH
81826: EMPTY
81827: LIST
81828: LIST
81829: PPUSH
81830: CALL_OW 69
81834: ST_TO_ADDR
// if not tmp then
81835: LD_VAR 0 2
81839: NOT
81840: IFFALSE 81844
// exit ;
81842: GO 82006
// un := tmp [ rand ( 1 , tmp ) ] ;
81844: LD_ADDR_VAR 0 3
81848: PUSH
81849: LD_VAR 0 2
81853: PUSH
81854: LD_INT 1
81856: PPUSH
81857: LD_VAR 0 2
81861: PPUSH
81862: CALL_OW 12
81866: ARRAY
81867: ST_TO_ADDR
// if Crawls ( un ) then
81868: LD_VAR 0 3
81872: PPUSH
81873: CALL_OW 318
81877: IFFALSE 81888
// ComWalk ( un ) ;
81879: LD_VAR 0 3
81883: PPUSH
81884: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81888: LD_VAR 0 3
81892: PPUSH
81893: LD_INT 8
81895: PPUSH
81896: CALL_OW 336
// end ; 4 :
81900: GO 82006
81902: LD_INT 4
81904: DOUBLE
81905: EQUAL
81906: IFTRUE 81910
81908: GO 81984
81910: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81911: LD_ADDR_VAR 0 2
81915: PUSH
81916: LD_INT 22
81918: PUSH
81919: LD_OWVAR 2
81923: PUSH
81924: EMPTY
81925: LIST
81926: LIST
81927: PUSH
81928: LD_INT 30
81930: PUSH
81931: LD_INT 29
81933: PUSH
81934: EMPTY
81935: LIST
81936: LIST
81937: PUSH
81938: EMPTY
81939: LIST
81940: LIST
81941: PPUSH
81942: CALL_OW 69
81946: ST_TO_ADDR
// if not tmp then
81947: LD_VAR 0 2
81951: NOT
81952: IFFALSE 81956
// exit ;
81954: GO 82006
// CenterNowOnUnits ( tmp [ 1 ] ) ;
81956: LD_VAR 0 2
81960: PUSH
81961: LD_INT 1
81963: ARRAY
81964: PPUSH
81965: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
81969: LD_VAR 0 2
81973: PUSH
81974: LD_INT 1
81976: ARRAY
81977: PPUSH
81978: CALL_OW 65
// end ; 5 .. 7 :
81982: GO 82006
81984: LD_INT 5
81986: DOUBLE
81987: GREATEREQUAL
81988: IFFALSE 81996
81990: LD_INT 7
81992: DOUBLE
81993: LESSEQUAL
81994: IFTRUE 81998
81996: GO 82005
81998: POP
// StreamSibBomb ; end ;
81999: CALL 78243 0 0
82003: GO 82006
82005: POP
// end ;
82006: PPOPN 3
82008: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82009: LD_EXP 63
82013: PUSH
82014: LD_EXP 113
82018: AND
82019: IFFALSE 82175
82021: GO 82023
82023: DISABLE
82024: LD_INT 0
82026: PPUSH
82027: PPUSH
82028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82029: LD_ADDR_VAR 0 2
82033: PUSH
82034: LD_INT 81
82036: PUSH
82037: LD_OWVAR 2
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: PUSH
82046: LD_INT 2
82048: PUSH
82049: LD_INT 21
82051: PUSH
82052: LD_INT 1
82054: PUSH
82055: EMPTY
82056: LIST
82057: LIST
82058: PUSH
82059: LD_INT 21
82061: PUSH
82062: LD_INT 2
82064: PUSH
82065: EMPTY
82066: LIST
82067: LIST
82068: PUSH
82069: EMPTY
82070: LIST
82071: LIST
82072: LIST
82073: PUSH
82074: EMPTY
82075: LIST
82076: LIST
82077: PPUSH
82078: CALL_OW 69
82082: ST_TO_ADDR
// if not tmp then
82083: LD_VAR 0 2
82087: NOT
82088: IFFALSE 82092
// exit ;
82090: GO 82175
// p := 0 ;
82092: LD_ADDR_VAR 0 3
82096: PUSH
82097: LD_INT 0
82099: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82100: LD_INT 35
82102: PPUSH
82103: CALL_OW 67
// p := p + 1 ;
82107: LD_ADDR_VAR 0 3
82111: PUSH
82112: LD_VAR 0 3
82116: PUSH
82117: LD_INT 1
82119: PLUS
82120: ST_TO_ADDR
// for i in tmp do
82121: LD_ADDR_VAR 0 1
82125: PUSH
82126: LD_VAR 0 2
82130: PUSH
82131: FOR_IN
82132: IFFALSE 82163
// if GetLives ( i ) < 1000 then
82134: LD_VAR 0 1
82138: PPUSH
82139: CALL_OW 256
82143: PUSH
82144: LD_INT 1000
82146: LESS
82147: IFFALSE 82161
// SetLives ( i , 1000 ) ;
82149: LD_VAR 0 1
82153: PPUSH
82154: LD_INT 1000
82156: PPUSH
82157: CALL_OW 234
82161: GO 82131
82163: POP
82164: POP
// until p > 20 ;
82165: LD_VAR 0 3
82169: PUSH
82170: LD_INT 20
82172: GREATER
82173: IFFALSE 82100
// end ;
82175: PPOPN 3
82177: END
// every 0 0$1 trigger StreamModeActive and sTime do
82178: LD_EXP 63
82182: PUSH
82183: LD_EXP 114
82187: AND
82188: IFFALSE 82223
82190: GO 82192
82192: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82193: LD_INT 28
82195: PPUSH
82196: LD_OWVAR 2
82200: PPUSH
82201: LD_INT 2
82203: PPUSH
82204: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82208: LD_INT 30
82210: PPUSH
82211: LD_OWVAR 2
82215: PPUSH
82216: LD_INT 2
82218: PPUSH
82219: CALL_OW 322
// end ;
82223: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82224: LD_EXP 63
82228: PUSH
82229: LD_EXP 115
82233: AND
82234: IFFALSE 82355
82236: GO 82238
82238: DISABLE
82239: LD_INT 0
82241: PPUSH
82242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82243: LD_ADDR_VAR 0 2
82247: PUSH
82248: LD_INT 22
82250: PUSH
82251: LD_OWVAR 2
82255: PUSH
82256: EMPTY
82257: LIST
82258: LIST
82259: PUSH
82260: LD_INT 21
82262: PUSH
82263: LD_INT 1
82265: PUSH
82266: EMPTY
82267: LIST
82268: LIST
82269: PUSH
82270: LD_INT 3
82272: PUSH
82273: LD_INT 23
82275: PUSH
82276: LD_INT 0
82278: PUSH
82279: EMPTY
82280: LIST
82281: LIST
82282: PUSH
82283: EMPTY
82284: LIST
82285: LIST
82286: PUSH
82287: EMPTY
82288: LIST
82289: LIST
82290: LIST
82291: PPUSH
82292: CALL_OW 69
82296: ST_TO_ADDR
// if not tmp then
82297: LD_VAR 0 2
82301: NOT
82302: IFFALSE 82306
// exit ;
82304: GO 82355
// for i in tmp do
82306: LD_ADDR_VAR 0 1
82310: PUSH
82311: LD_VAR 0 2
82315: PUSH
82316: FOR_IN
82317: IFFALSE 82353
// begin if Crawls ( i ) then
82319: LD_VAR 0 1
82323: PPUSH
82324: CALL_OW 318
82328: IFFALSE 82339
// ComWalk ( i ) ;
82330: LD_VAR 0 1
82334: PPUSH
82335: CALL_OW 138
// SetClass ( i , 2 ) ;
82339: LD_VAR 0 1
82343: PPUSH
82344: LD_INT 2
82346: PPUSH
82347: CALL_OW 336
// end ;
82351: GO 82316
82353: POP
82354: POP
// end ;
82355: PPOPN 2
82357: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82358: LD_EXP 63
82362: PUSH
82363: LD_EXP 116
82367: AND
82368: IFFALSE 82656
82370: GO 82372
82372: DISABLE
82373: LD_INT 0
82375: PPUSH
82376: PPUSH
82377: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82378: LD_OWVAR 2
82382: PPUSH
82383: LD_INT 9
82385: PPUSH
82386: LD_INT 1
82388: PPUSH
82389: LD_INT 1
82391: PPUSH
82392: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82396: LD_INT 9
82398: PPUSH
82399: LD_OWVAR 2
82403: PPUSH
82404: CALL_OW 343
// uc_side := 9 ;
82408: LD_ADDR_OWVAR 20
82412: PUSH
82413: LD_INT 9
82415: ST_TO_ADDR
// uc_nation := 2 ;
82416: LD_ADDR_OWVAR 21
82420: PUSH
82421: LD_INT 2
82423: ST_TO_ADDR
// hc_name := Dark Warrior ;
82424: LD_ADDR_OWVAR 26
82428: PUSH
82429: LD_STRING Dark Warrior
82431: ST_TO_ADDR
// hc_gallery :=  ;
82432: LD_ADDR_OWVAR 33
82436: PUSH
82437: LD_STRING 
82439: ST_TO_ADDR
// hc_noskilllimit := true ;
82440: LD_ADDR_OWVAR 76
82444: PUSH
82445: LD_INT 1
82447: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82448: LD_ADDR_OWVAR 31
82452: PUSH
82453: LD_INT 30
82455: PUSH
82456: LD_INT 30
82458: PUSH
82459: LD_INT 30
82461: PUSH
82462: LD_INT 30
82464: PUSH
82465: EMPTY
82466: LIST
82467: LIST
82468: LIST
82469: LIST
82470: ST_TO_ADDR
// un := CreateHuman ;
82471: LD_ADDR_VAR 0 3
82475: PUSH
82476: CALL_OW 44
82480: ST_TO_ADDR
// hc_noskilllimit := false ;
82481: LD_ADDR_OWVAR 76
82485: PUSH
82486: LD_INT 0
82488: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82489: LD_VAR 0 3
82493: PPUSH
82494: LD_INT 1
82496: PPUSH
82497: CALL_OW 51
// ToLua ( playRanger() ) ;
82501: LD_STRING playRanger()
82503: PPUSH
82504: CALL_OW 559
// p := 0 ;
82508: LD_ADDR_VAR 0 2
82512: PUSH
82513: LD_INT 0
82515: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82516: LD_INT 35
82518: PPUSH
82519: CALL_OW 67
// p := p + 1 ;
82523: LD_ADDR_VAR 0 2
82527: PUSH
82528: LD_VAR 0 2
82532: PUSH
82533: LD_INT 1
82535: PLUS
82536: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
82537: LD_VAR 0 3
82541: PPUSH
82542: CALL_OW 256
82546: PUSH
82547: LD_INT 1000
82549: LESS
82550: IFFALSE 82564
// SetLives ( un , 1000 ) ;
82552: LD_VAR 0 3
82556: PPUSH
82557: LD_INT 1000
82559: PPUSH
82560: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
82564: LD_VAR 0 3
82568: PPUSH
82569: LD_INT 81
82571: PUSH
82572: LD_OWVAR 2
82576: PUSH
82577: EMPTY
82578: LIST
82579: LIST
82580: PUSH
82581: LD_INT 91
82583: PUSH
82584: LD_VAR 0 3
82588: PUSH
82589: LD_INT 30
82591: PUSH
82592: EMPTY
82593: LIST
82594: LIST
82595: LIST
82596: PUSH
82597: EMPTY
82598: LIST
82599: LIST
82600: PPUSH
82601: CALL_OW 69
82605: PPUSH
82606: LD_VAR 0 3
82610: PPUSH
82611: CALL_OW 74
82615: PPUSH
82616: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
82620: LD_VAR 0 2
82624: PUSH
82625: LD_INT 80
82627: GREATER
82628: PUSH
82629: LD_VAR 0 3
82633: PPUSH
82634: CALL_OW 301
82638: OR
82639: IFFALSE 82516
// if un then
82641: LD_VAR 0 3
82645: IFFALSE 82656
// RemoveUnit ( un ) ;
82647: LD_VAR 0 3
82651: PPUSH
82652: CALL_OW 64
// end ;
82656: PPOPN 3
82658: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
82659: LD_EXP 117
82663: IFFALSE 82779
82665: GO 82667
82667: DISABLE
82668: LD_INT 0
82670: PPUSH
82671: PPUSH
82672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
82673: LD_ADDR_VAR 0 2
82677: PUSH
82678: LD_INT 81
82680: PUSH
82681: LD_OWVAR 2
82685: PUSH
82686: EMPTY
82687: LIST
82688: LIST
82689: PUSH
82690: LD_INT 21
82692: PUSH
82693: LD_INT 1
82695: PUSH
82696: EMPTY
82697: LIST
82698: LIST
82699: PUSH
82700: EMPTY
82701: LIST
82702: LIST
82703: PPUSH
82704: CALL_OW 69
82708: ST_TO_ADDR
// ToLua ( playComputer() ) ;
82709: LD_STRING playComputer()
82711: PPUSH
82712: CALL_OW 559
// if not tmp then
82716: LD_VAR 0 2
82720: NOT
82721: IFFALSE 82725
// exit ;
82723: GO 82779
// for i in tmp do
82725: LD_ADDR_VAR 0 1
82729: PUSH
82730: LD_VAR 0 2
82734: PUSH
82735: FOR_IN
82736: IFFALSE 82777
// for j := 1 to 4 do
82738: LD_ADDR_VAR 0 3
82742: PUSH
82743: DOUBLE
82744: LD_INT 1
82746: DEC
82747: ST_TO_ADDR
82748: LD_INT 4
82750: PUSH
82751: FOR_TO
82752: IFFALSE 82773
// SetSkill ( i , j , 10 ) ;
82754: LD_VAR 0 1
82758: PPUSH
82759: LD_VAR 0 3
82763: PPUSH
82764: LD_INT 10
82766: PPUSH
82767: CALL_OW 237
82771: GO 82751
82773: POP
82774: POP
82775: GO 82735
82777: POP
82778: POP
// end ;
82779: PPOPN 3
82781: END
// every 0 0$1 trigger s30 do var i , tmp ;
82782: LD_EXP 118
82786: IFFALSE 82855
82788: GO 82790
82790: DISABLE
82791: LD_INT 0
82793: PPUSH
82794: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82795: LD_ADDR_VAR 0 2
82799: PUSH
82800: LD_INT 22
82802: PUSH
82803: LD_OWVAR 2
82807: PUSH
82808: EMPTY
82809: LIST
82810: LIST
82811: PPUSH
82812: CALL_OW 69
82816: ST_TO_ADDR
// if not tmp then
82817: LD_VAR 0 2
82821: NOT
82822: IFFALSE 82826
// exit ;
82824: GO 82855
// for i in tmp do
82826: LD_ADDR_VAR 0 1
82830: PUSH
82831: LD_VAR 0 2
82835: PUSH
82836: FOR_IN
82837: IFFALSE 82853
// SetLives ( i , 300 ) ;
82839: LD_VAR 0 1
82843: PPUSH
82844: LD_INT 300
82846: PPUSH
82847: CALL_OW 234
82851: GO 82836
82853: POP
82854: POP
// end ;
82855: PPOPN 2
82857: END
// every 0 0$1 trigger s60 do var i , tmp ;
82858: LD_EXP 119
82862: IFFALSE 82931
82864: GO 82866
82866: DISABLE
82867: LD_INT 0
82869: PPUSH
82870: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82871: LD_ADDR_VAR 0 2
82875: PUSH
82876: LD_INT 22
82878: PUSH
82879: LD_OWVAR 2
82883: PUSH
82884: EMPTY
82885: LIST
82886: LIST
82887: PPUSH
82888: CALL_OW 69
82892: ST_TO_ADDR
// if not tmp then
82893: LD_VAR 0 2
82897: NOT
82898: IFFALSE 82902
// exit ;
82900: GO 82931
// for i in tmp do
82902: LD_ADDR_VAR 0 1
82906: PUSH
82907: LD_VAR 0 2
82911: PUSH
82912: FOR_IN
82913: IFFALSE 82929
// SetLives ( i , 600 ) ;
82915: LD_VAR 0 1
82919: PPUSH
82920: LD_INT 600
82922: PPUSH
82923: CALL_OW 234
82927: GO 82912
82929: POP
82930: POP
// end ;
82931: PPOPN 2
82933: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
82934: LD_INT 0
82936: PPUSH
// case cmd of 301 :
82937: LD_VAR 0 1
82941: PUSH
82942: LD_INT 301
82944: DOUBLE
82945: EQUAL
82946: IFTRUE 82950
82948: GO 82982
82950: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
82951: LD_VAR 0 6
82955: PPUSH
82956: LD_VAR 0 7
82960: PPUSH
82961: LD_VAR 0 8
82965: PPUSH
82966: LD_VAR 0 4
82970: PPUSH
82971: LD_VAR 0 5
82975: PPUSH
82976: CALL 84183 0 5
82980: GO 83103
82982: LD_INT 302
82984: DOUBLE
82985: EQUAL
82986: IFTRUE 82990
82988: GO 83027
82990: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
82991: LD_VAR 0 6
82995: PPUSH
82996: LD_VAR 0 7
83000: PPUSH
83001: LD_VAR 0 8
83005: PPUSH
83006: LD_VAR 0 9
83010: PPUSH
83011: LD_VAR 0 4
83015: PPUSH
83016: LD_VAR 0 5
83020: PPUSH
83021: CALL 84274 0 6
83025: GO 83103
83027: LD_INT 303
83029: DOUBLE
83030: EQUAL
83031: IFTRUE 83035
83033: GO 83072
83035: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83036: LD_VAR 0 6
83040: PPUSH
83041: LD_VAR 0 7
83045: PPUSH
83046: LD_VAR 0 8
83050: PPUSH
83051: LD_VAR 0 9
83055: PPUSH
83056: LD_VAR 0 4
83060: PPUSH
83061: LD_VAR 0 5
83065: PPUSH
83066: CALL 83108 0 6
83070: GO 83103
83072: LD_INT 304
83074: DOUBLE
83075: EQUAL
83076: IFTRUE 83080
83078: GO 83102
83080: POP
// hHackTeleport ( unit , x , y ) ; end ;
83081: LD_VAR 0 2
83085: PPUSH
83086: LD_VAR 0 4
83090: PPUSH
83091: LD_VAR 0 5
83095: PPUSH
83096: CALL 84867 0 3
83100: GO 83103
83102: POP
// end ;
83103: LD_VAR 0 12
83107: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
83108: LD_INT 0
83110: PPUSH
83111: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
83112: LD_VAR 0 1
83116: PUSH
83117: LD_INT 1
83119: LESS
83120: PUSH
83121: LD_VAR 0 1
83125: PUSH
83126: LD_INT 3
83128: GREATER
83129: OR
83130: PUSH
83131: LD_VAR 0 5
83135: PPUSH
83136: LD_VAR 0 6
83140: PPUSH
83141: CALL_OW 428
83145: OR
83146: IFFALSE 83150
// exit ;
83148: GO 83870
// uc_side := your_side ;
83150: LD_ADDR_OWVAR 20
83154: PUSH
83155: LD_OWVAR 2
83159: ST_TO_ADDR
// uc_nation := nation ;
83160: LD_ADDR_OWVAR 21
83164: PUSH
83165: LD_VAR 0 1
83169: ST_TO_ADDR
// bc_level = 1 ;
83170: LD_ADDR_OWVAR 43
83174: PUSH
83175: LD_INT 1
83177: ST_TO_ADDR
// case btype of 1 :
83178: LD_VAR 0 2
83182: PUSH
83183: LD_INT 1
83185: DOUBLE
83186: EQUAL
83187: IFTRUE 83191
83189: GO 83202
83191: POP
// bc_type := b_depot ; 2 :
83192: LD_ADDR_OWVAR 42
83196: PUSH
83197: LD_INT 0
83199: ST_TO_ADDR
83200: GO 83814
83202: LD_INT 2
83204: DOUBLE
83205: EQUAL
83206: IFTRUE 83210
83208: GO 83221
83210: POP
// bc_type := b_warehouse ; 3 :
83211: LD_ADDR_OWVAR 42
83215: PUSH
83216: LD_INT 1
83218: ST_TO_ADDR
83219: GO 83814
83221: LD_INT 3
83223: DOUBLE
83224: EQUAL
83225: IFTRUE 83229
83227: GO 83240
83229: POP
// bc_type := b_lab ; 4 .. 9 :
83230: LD_ADDR_OWVAR 42
83234: PUSH
83235: LD_INT 6
83237: ST_TO_ADDR
83238: GO 83814
83240: LD_INT 4
83242: DOUBLE
83243: GREATEREQUAL
83244: IFFALSE 83252
83246: LD_INT 9
83248: DOUBLE
83249: LESSEQUAL
83250: IFTRUE 83254
83252: GO 83306
83254: POP
// begin bc_type := b_lab_half ;
83255: LD_ADDR_OWVAR 42
83259: PUSH
83260: LD_INT 7
83262: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83263: LD_ADDR_OWVAR 44
83267: PUSH
83268: LD_INT 10
83270: PUSH
83271: LD_INT 11
83273: PUSH
83274: LD_INT 12
83276: PUSH
83277: LD_INT 15
83279: PUSH
83280: LD_INT 14
83282: PUSH
83283: LD_INT 13
83285: PUSH
83286: EMPTY
83287: LIST
83288: LIST
83289: LIST
83290: LIST
83291: LIST
83292: LIST
83293: PUSH
83294: LD_VAR 0 2
83298: PUSH
83299: LD_INT 3
83301: MINUS
83302: ARRAY
83303: ST_TO_ADDR
// end ; 10 .. 13 :
83304: GO 83814
83306: LD_INT 10
83308: DOUBLE
83309: GREATEREQUAL
83310: IFFALSE 83318
83312: LD_INT 13
83314: DOUBLE
83315: LESSEQUAL
83316: IFTRUE 83320
83318: GO 83397
83320: POP
// begin bc_type := b_lab_full ;
83321: LD_ADDR_OWVAR 42
83325: PUSH
83326: LD_INT 8
83328: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83329: LD_ADDR_OWVAR 44
83333: PUSH
83334: LD_INT 10
83336: PUSH
83337: LD_INT 12
83339: PUSH
83340: LD_INT 14
83342: PUSH
83343: LD_INT 13
83345: PUSH
83346: EMPTY
83347: LIST
83348: LIST
83349: LIST
83350: LIST
83351: PUSH
83352: LD_VAR 0 2
83356: PUSH
83357: LD_INT 9
83359: MINUS
83360: ARRAY
83361: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83362: LD_ADDR_OWVAR 45
83366: PUSH
83367: LD_INT 11
83369: PUSH
83370: LD_INT 15
83372: PUSH
83373: LD_INT 12
83375: PUSH
83376: LD_INT 15
83378: PUSH
83379: EMPTY
83380: LIST
83381: LIST
83382: LIST
83383: LIST
83384: PUSH
83385: LD_VAR 0 2
83389: PUSH
83390: LD_INT 9
83392: MINUS
83393: ARRAY
83394: ST_TO_ADDR
// end ; 14 :
83395: GO 83814
83397: LD_INT 14
83399: DOUBLE
83400: EQUAL
83401: IFTRUE 83405
83403: GO 83416
83405: POP
// bc_type := b_workshop ; 15 :
83406: LD_ADDR_OWVAR 42
83410: PUSH
83411: LD_INT 2
83413: ST_TO_ADDR
83414: GO 83814
83416: LD_INT 15
83418: DOUBLE
83419: EQUAL
83420: IFTRUE 83424
83422: GO 83435
83424: POP
// bc_type := b_factory ; 16 :
83425: LD_ADDR_OWVAR 42
83429: PUSH
83430: LD_INT 3
83432: ST_TO_ADDR
83433: GO 83814
83435: LD_INT 16
83437: DOUBLE
83438: EQUAL
83439: IFTRUE 83443
83441: GO 83454
83443: POP
// bc_type := b_ext_gun ; 17 :
83444: LD_ADDR_OWVAR 42
83448: PUSH
83449: LD_INT 17
83451: ST_TO_ADDR
83452: GO 83814
83454: LD_INT 17
83456: DOUBLE
83457: EQUAL
83458: IFTRUE 83462
83460: GO 83490
83462: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83463: LD_ADDR_OWVAR 42
83467: PUSH
83468: LD_INT 19
83470: PUSH
83471: LD_INT 23
83473: PUSH
83474: LD_INT 19
83476: PUSH
83477: EMPTY
83478: LIST
83479: LIST
83480: LIST
83481: PUSH
83482: LD_VAR 0 1
83486: ARRAY
83487: ST_TO_ADDR
83488: GO 83814
83490: LD_INT 18
83492: DOUBLE
83493: EQUAL
83494: IFTRUE 83498
83496: GO 83509
83498: POP
// bc_type := b_ext_radar ; 19 :
83499: LD_ADDR_OWVAR 42
83503: PUSH
83504: LD_INT 20
83506: ST_TO_ADDR
83507: GO 83814
83509: LD_INT 19
83511: DOUBLE
83512: EQUAL
83513: IFTRUE 83517
83515: GO 83528
83517: POP
// bc_type := b_ext_radio ; 20 :
83518: LD_ADDR_OWVAR 42
83522: PUSH
83523: LD_INT 22
83525: ST_TO_ADDR
83526: GO 83814
83528: LD_INT 20
83530: DOUBLE
83531: EQUAL
83532: IFTRUE 83536
83534: GO 83547
83536: POP
// bc_type := b_ext_siberium ; 21 :
83537: LD_ADDR_OWVAR 42
83541: PUSH
83542: LD_INT 21
83544: ST_TO_ADDR
83545: GO 83814
83547: LD_INT 21
83549: DOUBLE
83550: EQUAL
83551: IFTRUE 83555
83553: GO 83566
83555: POP
// bc_type := b_ext_computer ; 22 :
83556: LD_ADDR_OWVAR 42
83560: PUSH
83561: LD_INT 24
83563: ST_TO_ADDR
83564: GO 83814
83566: LD_INT 22
83568: DOUBLE
83569: EQUAL
83570: IFTRUE 83574
83572: GO 83585
83574: POP
// bc_type := b_ext_track ; 23 :
83575: LD_ADDR_OWVAR 42
83579: PUSH
83580: LD_INT 16
83582: ST_TO_ADDR
83583: GO 83814
83585: LD_INT 23
83587: DOUBLE
83588: EQUAL
83589: IFTRUE 83593
83591: GO 83604
83593: POP
// bc_type := b_ext_laser ; 24 :
83594: LD_ADDR_OWVAR 42
83598: PUSH
83599: LD_INT 25
83601: ST_TO_ADDR
83602: GO 83814
83604: LD_INT 24
83606: DOUBLE
83607: EQUAL
83608: IFTRUE 83612
83610: GO 83623
83612: POP
// bc_type := b_control_tower ; 25 :
83613: LD_ADDR_OWVAR 42
83617: PUSH
83618: LD_INT 36
83620: ST_TO_ADDR
83621: GO 83814
83623: LD_INT 25
83625: DOUBLE
83626: EQUAL
83627: IFTRUE 83631
83629: GO 83642
83631: POP
// bc_type := b_breastwork ; 26 :
83632: LD_ADDR_OWVAR 42
83636: PUSH
83637: LD_INT 31
83639: ST_TO_ADDR
83640: GO 83814
83642: LD_INT 26
83644: DOUBLE
83645: EQUAL
83646: IFTRUE 83650
83648: GO 83661
83650: POP
// bc_type := b_bunker ; 27 :
83651: LD_ADDR_OWVAR 42
83655: PUSH
83656: LD_INT 32
83658: ST_TO_ADDR
83659: GO 83814
83661: LD_INT 27
83663: DOUBLE
83664: EQUAL
83665: IFTRUE 83669
83667: GO 83680
83669: POP
// bc_type := b_turret ; 28 :
83670: LD_ADDR_OWVAR 42
83674: PUSH
83675: LD_INT 33
83677: ST_TO_ADDR
83678: GO 83814
83680: LD_INT 28
83682: DOUBLE
83683: EQUAL
83684: IFTRUE 83688
83686: GO 83699
83688: POP
// bc_type := b_armoury ; 29 :
83689: LD_ADDR_OWVAR 42
83693: PUSH
83694: LD_INT 4
83696: ST_TO_ADDR
83697: GO 83814
83699: LD_INT 29
83701: DOUBLE
83702: EQUAL
83703: IFTRUE 83707
83705: GO 83718
83707: POP
// bc_type := b_barracks ; 30 :
83708: LD_ADDR_OWVAR 42
83712: PUSH
83713: LD_INT 5
83715: ST_TO_ADDR
83716: GO 83814
83718: LD_INT 30
83720: DOUBLE
83721: EQUAL
83722: IFTRUE 83726
83724: GO 83737
83726: POP
// bc_type := b_solar_power ; 31 :
83727: LD_ADDR_OWVAR 42
83731: PUSH
83732: LD_INT 27
83734: ST_TO_ADDR
83735: GO 83814
83737: LD_INT 31
83739: DOUBLE
83740: EQUAL
83741: IFTRUE 83745
83743: GO 83756
83745: POP
// bc_type := b_oil_power ; 32 :
83746: LD_ADDR_OWVAR 42
83750: PUSH
83751: LD_INT 26
83753: ST_TO_ADDR
83754: GO 83814
83756: LD_INT 32
83758: DOUBLE
83759: EQUAL
83760: IFTRUE 83764
83762: GO 83775
83764: POP
// bc_type := b_siberite_power ; 33 :
83765: LD_ADDR_OWVAR 42
83769: PUSH
83770: LD_INT 28
83772: ST_TO_ADDR
83773: GO 83814
83775: LD_INT 33
83777: DOUBLE
83778: EQUAL
83779: IFTRUE 83783
83781: GO 83794
83783: POP
// bc_type := b_oil_mine ; 34 :
83784: LD_ADDR_OWVAR 42
83788: PUSH
83789: LD_INT 29
83791: ST_TO_ADDR
83792: GO 83814
83794: LD_INT 34
83796: DOUBLE
83797: EQUAL
83798: IFTRUE 83802
83800: GO 83813
83802: POP
// bc_type := b_siberite_mine ; end ;
83803: LD_ADDR_OWVAR 42
83807: PUSH
83808: LD_INT 30
83810: ST_TO_ADDR
83811: GO 83814
83813: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
83814: LD_ADDR_VAR 0 8
83818: PUSH
83819: LD_VAR 0 5
83823: PPUSH
83824: LD_VAR 0 6
83828: PPUSH
83829: LD_VAR 0 3
83833: PPUSH
83834: CALL_OW 47
83838: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
83839: LD_OWVAR 42
83843: PUSH
83844: LD_INT 32
83846: PUSH
83847: LD_INT 33
83849: PUSH
83850: EMPTY
83851: LIST
83852: LIST
83853: IN
83854: IFFALSE 83870
// PlaceWeaponTurret ( b , weapon ) ;
83856: LD_VAR 0 8
83860: PPUSH
83861: LD_VAR 0 4
83865: PPUSH
83866: CALL_OW 431
// end ;
83870: LD_VAR 0 7
83874: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
83875: LD_INT 0
83877: PPUSH
83878: PPUSH
83879: PPUSH
83880: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83881: LD_ADDR_VAR 0 4
83885: PUSH
83886: LD_INT 22
83888: PUSH
83889: LD_OWVAR 2
83893: PUSH
83894: EMPTY
83895: LIST
83896: LIST
83897: PUSH
83898: LD_INT 2
83900: PUSH
83901: LD_INT 30
83903: PUSH
83904: LD_INT 0
83906: PUSH
83907: EMPTY
83908: LIST
83909: LIST
83910: PUSH
83911: LD_INT 30
83913: PUSH
83914: LD_INT 1
83916: PUSH
83917: EMPTY
83918: LIST
83919: LIST
83920: PUSH
83921: EMPTY
83922: LIST
83923: LIST
83924: LIST
83925: PUSH
83926: EMPTY
83927: LIST
83928: LIST
83929: PPUSH
83930: CALL_OW 69
83934: ST_TO_ADDR
// if not tmp then
83935: LD_VAR 0 4
83939: NOT
83940: IFFALSE 83944
// exit ;
83942: GO 84003
// for i in tmp do
83944: LD_ADDR_VAR 0 2
83948: PUSH
83949: LD_VAR 0 4
83953: PUSH
83954: FOR_IN
83955: IFFALSE 84001
// for j = 1 to 3 do
83957: LD_ADDR_VAR 0 3
83961: PUSH
83962: DOUBLE
83963: LD_INT 1
83965: DEC
83966: ST_TO_ADDR
83967: LD_INT 3
83969: PUSH
83970: FOR_TO
83971: IFFALSE 83997
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
83973: LD_VAR 0 2
83977: PPUSH
83978: CALL_OW 274
83982: PPUSH
83983: LD_VAR 0 3
83987: PPUSH
83988: LD_INT 99999
83990: PPUSH
83991: CALL_OW 277
83995: GO 83970
83997: POP
83998: POP
83999: GO 83954
84001: POP
84002: POP
// end ;
84003: LD_VAR 0 1
84007: RET
// export function hHackSetLevel10 ; var i , j ; begin
84008: LD_INT 0
84010: PPUSH
84011: PPUSH
84012: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84013: LD_ADDR_VAR 0 2
84017: PUSH
84018: LD_INT 21
84020: PUSH
84021: LD_INT 1
84023: PUSH
84024: EMPTY
84025: LIST
84026: LIST
84027: PPUSH
84028: CALL_OW 69
84032: PUSH
84033: FOR_IN
84034: IFFALSE 84086
// if IsSelected ( i ) then
84036: LD_VAR 0 2
84040: PPUSH
84041: CALL_OW 306
84045: IFFALSE 84084
// begin for j := 1 to 4 do
84047: LD_ADDR_VAR 0 3
84051: PUSH
84052: DOUBLE
84053: LD_INT 1
84055: DEC
84056: ST_TO_ADDR
84057: LD_INT 4
84059: PUSH
84060: FOR_TO
84061: IFFALSE 84082
// SetSkill ( i , j , 10 ) ;
84063: LD_VAR 0 2
84067: PPUSH
84068: LD_VAR 0 3
84072: PPUSH
84073: LD_INT 10
84075: PPUSH
84076: CALL_OW 237
84080: GO 84060
84082: POP
84083: POP
// end ;
84084: GO 84033
84086: POP
84087: POP
// end ;
84088: LD_VAR 0 1
84092: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
84093: LD_INT 0
84095: PPUSH
84096: PPUSH
84097: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
84098: LD_ADDR_VAR 0 2
84102: PUSH
84103: LD_INT 22
84105: PUSH
84106: LD_OWVAR 2
84110: PUSH
84111: EMPTY
84112: LIST
84113: LIST
84114: PUSH
84115: LD_INT 21
84117: PUSH
84118: LD_INT 1
84120: PUSH
84121: EMPTY
84122: LIST
84123: LIST
84124: PUSH
84125: EMPTY
84126: LIST
84127: LIST
84128: PPUSH
84129: CALL_OW 69
84133: PUSH
84134: FOR_IN
84135: IFFALSE 84176
// begin for j := 1 to 4 do
84137: LD_ADDR_VAR 0 3
84141: PUSH
84142: DOUBLE
84143: LD_INT 1
84145: DEC
84146: ST_TO_ADDR
84147: LD_INT 4
84149: PUSH
84150: FOR_TO
84151: IFFALSE 84172
// SetSkill ( i , j , 10 ) ;
84153: LD_VAR 0 2
84157: PPUSH
84158: LD_VAR 0 3
84162: PPUSH
84163: LD_INT 10
84165: PPUSH
84166: CALL_OW 237
84170: GO 84150
84172: POP
84173: POP
// end ;
84174: GO 84134
84176: POP
84177: POP
// end ;
84178: LD_VAR 0 1
84182: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84183: LD_INT 0
84185: PPUSH
// uc_side := your_side ;
84186: LD_ADDR_OWVAR 20
84190: PUSH
84191: LD_OWVAR 2
84195: ST_TO_ADDR
// uc_nation := nation ;
84196: LD_ADDR_OWVAR 21
84200: PUSH
84201: LD_VAR 0 1
84205: ST_TO_ADDR
// InitHc ;
84206: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84210: LD_INT 0
84212: PPUSH
84213: LD_VAR 0 2
84217: PPUSH
84218: LD_VAR 0 3
84222: PPUSH
84223: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84227: LD_VAR 0 4
84231: PPUSH
84232: LD_VAR 0 5
84236: PPUSH
84237: CALL_OW 428
84241: PUSH
84242: LD_INT 0
84244: EQUAL
84245: IFFALSE 84269
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84247: CALL_OW 44
84251: PPUSH
84252: LD_VAR 0 4
84256: PPUSH
84257: LD_VAR 0 5
84261: PPUSH
84262: LD_INT 1
84264: PPUSH
84265: CALL_OW 48
// end ;
84269: LD_VAR 0 6
84273: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84274: LD_INT 0
84276: PPUSH
84277: PPUSH
// uc_side := your_side ;
84278: LD_ADDR_OWVAR 20
84282: PUSH
84283: LD_OWVAR 2
84287: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84288: LD_VAR 0 1
84292: PUSH
84293: LD_INT 1
84295: PUSH
84296: LD_INT 2
84298: PUSH
84299: LD_INT 3
84301: PUSH
84302: LD_INT 4
84304: PUSH
84305: LD_INT 5
84307: PUSH
84308: EMPTY
84309: LIST
84310: LIST
84311: LIST
84312: LIST
84313: LIST
84314: IN
84315: IFFALSE 84327
// uc_nation := nation_american else
84317: LD_ADDR_OWVAR 21
84321: PUSH
84322: LD_INT 1
84324: ST_TO_ADDR
84325: GO 84370
// if chassis in [ 11 , 12 , 13 , 14 ] then
84327: LD_VAR 0 1
84331: PUSH
84332: LD_INT 11
84334: PUSH
84335: LD_INT 12
84337: PUSH
84338: LD_INT 13
84340: PUSH
84341: LD_INT 14
84343: PUSH
84344: EMPTY
84345: LIST
84346: LIST
84347: LIST
84348: LIST
84349: IN
84350: IFFALSE 84362
// uc_nation := nation_arabian else
84352: LD_ADDR_OWVAR 21
84356: PUSH
84357: LD_INT 2
84359: ST_TO_ADDR
84360: GO 84370
// uc_nation := nation_russian ;
84362: LD_ADDR_OWVAR 21
84366: PUSH
84367: LD_INT 3
84369: ST_TO_ADDR
// vc_chassis := chassis ;
84370: LD_ADDR_OWVAR 37
84374: PUSH
84375: LD_VAR 0 1
84379: ST_TO_ADDR
// vc_engine := engine ;
84380: LD_ADDR_OWVAR 39
84384: PUSH
84385: LD_VAR 0 2
84389: ST_TO_ADDR
// vc_control := control ;
84390: LD_ADDR_OWVAR 38
84394: PUSH
84395: LD_VAR 0 3
84399: ST_TO_ADDR
// vc_weapon := weapon ;
84400: LD_ADDR_OWVAR 40
84404: PUSH
84405: LD_VAR 0 4
84409: ST_TO_ADDR
// un := CreateVehicle ;
84410: LD_ADDR_VAR 0 8
84414: PUSH
84415: CALL_OW 45
84419: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84420: LD_VAR 0 8
84424: PPUSH
84425: LD_INT 0
84427: PPUSH
84428: LD_INT 5
84430: PPUSH
84431: CALL_OW 12
84435: PPUSH
84436: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84440: LD_VAR 0 8
84444: PPUSH
84445: LD_VAR 0 5
84449: PPUSH
84450: LD_VAR 0 6
84454: PPUSH
84455: LD_INT 1
84457: PPUSH
84458: CALL_OW 48
// end ;
84462: LD_VAR 0 7
84466: RET
// export hInvincible ; every 1 do
84467: GO 84469
84469: DISABLE
// hInvincible := [ ] ;
84470: LD_ADDR_EXP 120
84474: PUSH
84475: EMPTY
84476: ST_TO_ADDR
84477: END
// every 10 do var i ;
84478: GO 84480
84480: DISABLE
84481: LD_INT 0
84483: PPUSH
// begin enable ;
84484: ENABLE
// if not hInvincible then
84485: LD_EXP 120
84489: NOT
84490: IFFALSE 84494
// exit ;
84492: GO 84538
// for i in hInvincible do
84494: LD_ADDR_VAR 0 1
84498: PUSH
84499: LD_EXP 120
84503: PUSH
84504: FOR_IN
84505: IFFALSE 84536
// if GetLives ( i ) < 1000 then
84507: LD_VAR 0 1
84511: PPUSH
84512: CALL_OW 256
84516: PUSH
84517: LD_INT 1000
84519: LESS
84520: IFFALSE 84534
// SetLives ( i , 1000 ) ;
84522: LD_VAR 0 1
84526: PPUSH
84527: LD_INT 1000
84529: PPUSH
84530: CALL_OW 234
84534: GO 84504
84536: POP
84537: POP
// end ;
84538: PPOPN 1
84540: END
// export function hHackInvincible ; var i ; begin
84541: LD_INT 0
84543: PPUSH
84544: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84545: LD_ADDR_VAR 0 2
84549: PUSH
84550: LD_INT 2
84552: PUSH
84553: LD_INT 21
84555: PUSH
84556: LD_INT 1
84558: PUSH
84559: EMPTY
84560: LIST
84561: LIST
84562: PUSH
84563: LD_INT 21
84565: PUSH
84566: LD_INT 2
84568: PUSH
84569: EMPTY
84570: LIST
84571: LIST
84572: PUSH
84573: EMPTY
84574: LIST
84575: LIST
84576: LIST
84577: PPUSH
84578: CALL_OW 69
84582: PUSH
84583: FOR_IN
84584: IFFALSE 84645
// if IsSelected ( i ) then
84586: LD_VAR 0 2
84590: PPUSH
84591: CALL_OW 306
84595: IFFALSE 84643
// begin if i in hInvincible then
84597: LD_VAR 0 2
84601: PUSH
84602: LD_EXP 120
84606: IN
84607: IFFALSE 84627
// hInvincible := hInvincible diff i else
84609: LD_ADDR_EXP 120
84613: PUSH
84614: LD_EXP 120
84618: PUSH
84619: LD_VAR 0 2
84623: DIFF
84624: ST_TO_ADDR
84625: GO 84643
// hInvincible := hInvincible union i ;
84627: LD_ADDR_EXP 120
84631: PUSH
84632: LD_EXP 120
84636: PUSH
84637: LD_VAR 0 2
84641: UNION
84642: ST_TO_ADDR
// end ;
84643: GO 84583
84645: POP
84646: POP
// end ;
84647: LD_VAR 0 1
84651: RET
// export function hHackInvisible ; var i , j ; begin
84652: LD_INT 0
84654: PPUSH
84655: PPUSH
84656: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84657: LD_ADDR_VAR 0 2
84661: PUSH
84662: LD_INT 21
84664: PUSH
84665: LD_INT 1
84667: PUSH
84668: EMPTY
84669: LIST
84670: LIST
84671: PPUSH
84672: CALL_OW 69
84676: PUSH
84677: FOR_IN
84678: IFFALSE 84702
// if IsSelected ( i ) then
84680: LD_VAR 0 2
84684: PPUSH
84685: CALL_OW 306
84689: IFFALSE 84700
// ComForceInvisible ( i ) ;
84691: LD_VAR 0 2
84695: PPUSH
84696: CALL_OW 496
84700: GO 84677
84702: POP
84703: POP
// end ;
84704: LD_VAR 0 1
84708: RET
// export function hHackChangeYourSide ; begin
84709: LD_INT 0
84711: PPUSH
// if your_side = 8 then
84712: LD_OWVAR 2
84716: PUSH
84717: LD_INT 8
84719: EQUAL
84720: IFFALSE 84732
// your_side := 0 else
84722: LD_ADDR_OWVAR 2
84726: PUSH
84727: LD_INT 0
84729: ST_TO_ADDR
84730: GO 84746
// your_side := your_side + 1 ;
84732: LD_ADDR_OWVAR 2
84736: PUSH
84737: LD_OWVAR 2
84741: PUSH
84742: LD_INT 1
84744: PLUS
84745: ST_TO_ADDR
// end ;
84746: LD_VAR 0 1
84750: RET
// export function hHackChangeUnitSide ; var i , j ; begin
84751: LD_INT 0
84753: PPUSH
84754: PPUSH
84755: PPUSH
// for i in all_units do
84756: LD_ADDR_VAR 0 2
84760: PUSH
84761: LD_OWVAR 3
84765: PUSH
84766: FOR_IN
84767: IFFALSE 84845
// if IsSelected ( i ) then
84769: LD_VAR 0 2
84773: PPUSH
84774: CALL_OW 306
84778: IFFALSE 84843
// begin j := GetSide ( i ) ;
84780: LD_ADDR_VAR 0 3
84784: PUSH
84785: LD_VAR 0 2
84789: PPUSH
84790: CALL_OW 255
84794: ST_TO_ADDR
// if j = 8 then
84795: LD_VAR 0 3
84799: PUSH
84800: LD_INT 8
84802: EQUAL
84803: IFFALSE 84815
// j := 0 else
84805: LD_ADDR_VAR 0 3
84809: PUSH
84810: LD_INT 0
84812: ST_TO_ADDR
84813: GO 84829
// j := j + 1 ;
84815: LD_ADDR_VAR 0 3
84819: PUSH
84820: LD_VAR 0 3
84824: PUSH
84825: LD_INT 1
84827: PLUS
84828: ST_TO_ADDR
// SetSide ( i , j ) ;
84829: LD_VAR 0 2
84833: PPUSH
84834: LD_VAR 0 3
84838: PPUSH
84839: CALL_OW 235
// end ;
84843: GO 84766
84845: POP
84846: POP
// end ;
84847: LD_VAR 0 1
84851: RET
// export function hHackFog ; begin
84852: LD_INT 0
84854: PPUSH
// FogOff ( true ) ;
84855: LD_INT 1
84857: PPUSH
84858: CALL_OW 344
// end ;
84862: LD_VAR 0 1
84866: RET
// export function hHackTeleport ( unit , x , y ) ; begin
84867: LD_INT 0
84869: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
84870: LD_VAR 0 1
84874: PPUSH
84875: LD_VAR 0 2
84879: PPUSH
84880: LD_VAR 0 3
84884: PPUSH
84885: LD_INT 1
84887: PPUSH
84888: LD_INT 1
84890: PPUSH
84891: CALL_OW 483
// CenterOnXY ( x , y ) ;
84895: LD_VAR 0 2
84899: PPUSH
84900: LD_VAR 0 3
84904: PPUSH
84905: CALL_OW 84
// end ;
84909: LD_VAR 0 4
84913: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
84914: LD_INT 0
84916: PPUSH
84917: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
84918: LD_VAR 0 1
84922: NOT
84923: PUSH
84924: LD_VAR 0 2
84928: PPUSH
84929: LD_VAR 0 3
84933: PPUSH
84934: CALL_OW 488
84938: NOT
84939: OR
84940: PUSH
84941: LD_VAR 0 1
84945: PPUSH
84946: CALL_OW 266
84950: PUSH
84951: LD_INT 3
84953: NONEQUAL
84954: PUSH
84955: LD_VAR 0 1
84959: PPUSH
84960: CALL_OW 247
84964: PUSH
84965: LD_INT 1
84967: EQUAL
84968: NOT
84969: AND
84970: OR
84971: IFFALSE 84975
// exit ;
84973: GO 85124
// if GetType ( factory ) = unit_human then
84975: LD_VAR 0 1
84979: PPUSH
84980: CALL_OW 247
84984: PUSH
84985: LD_INT 1
84987: EQUAL
84988: IFFALSE 85005
// factory := IsInUnit ( factory ) ;
84990: LD_ADDR_VAR 0 1
84994: PUSH
84995: LD_VAR 0 1
84999: PPUSH
85000: CALL_OW 310
85004: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
85005: LD_VAR 0 1
85009: PPUSH
85010: CALL_OW 266
85014: PUSH
85015: LD_INT 3
85017: NONEQUAL
85018: IFFALSE 85022
// exit ;
85020: GO 85124
// if HexInfo ( x , y ) = factory then
85022: LD_VAR 0 2
85026: PPUSH
85027: LD_VAR 0 3
85031: PPUSH
85032: CALL_OW 428
85036: PUSH
85037: LD_VAR 0 1
85041: EQUAL
85042: IFFALSE 85069
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85044: LD_ADDR_EXP 121
85048: PUSH
85049: LD_EXP 121
85053: PPUSH
85054: LD_VAR 0 1
85058: PPUSH
85059: LD_INT 0
85061: PPUSH
85062: CALL_OW 1
85066: ST_TO_ADDR
85067: GO 85120
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
85069: LD_ADDR_EXP 121
85073: PUSH
85074: LD_EXP 121
85078: PPUSH
85079: LD_VAR 0 1
85083: PPUSH
85084: LD_VAR 0 1
85088: PPUSH
85089: CALL_OW 255
85093: PUSH
85094: LD_VAR 0 1
85098: PUSH
85099: LD_VAR 0 2
85103: PUSH
85104: LD_VAR 0 3
85108: PUSH
85109: EMPTY
85110: LIST
85111: LIST
85112: LIST
85113: LIST
85114: PPUSH
85115: CALL_OW 1
85119: ST_TO_ADDR
// UpdateFactoryWaypoints ;
85120: CALL 85129 0 0
// end ;
85124: LD_VAR 0 4
85128: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
85129: LD_INT 0
85131: PPUSH
85132: PPUSH
85133: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
85134: LD_STRING resetFactoryWaypoint();
85136: PPUSH
85137: CALL_OW 559
// if factoryWaypoints then
85141: LD_EXP 121
85145: IFFALSE 85271
// begin list := PrepareArray ( factoryWaypoints ) ;
85147: LD_ADDR_VAR 0 3
85151: PUSH
85152: LD_EXP 121
85156: PPUSH
85157: CALL 70231 0 1
85161: ST_TO_ADDR
// for i := 1 to list do
85162: LD_ADDR_VAR 0 2
85166: PUSH
85167: DOUBLE
85168: LD_INT 1
85170: DEC
85171: ST_TO_ADDR
85172: LD_VAR 0 3
85176: PUSH
85177: FOR_TO
85178: IFFALSE 85269
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85180: LD_STRING setFactoryWaypointXY(
85182: PUSH
85183: LD_VAR 0 3
85187: PUSH
85188: LD_VAR 0 2
85192: ARRAY
85193: PUSH
85194: LD_INT 1
85196: ARRAY
85197: STR
85198: PUSH
85199: LD_STRING ,
85201: STR
85202: PUSH
85203: LD_VAR 0 3
85207: PUSH
85208: LD_VAR 0 2
85212: ARRAY
85213: PUSH
85214: LD_INT 2
85216: ARRAY
85217: STR
85218: PUSH
85219: LD_STRING ,
85221: STR
85222: PUSH
85223: LD_VAR 0 3
85227: PUSH
85228: LD_VAR 0 2
85232: ARRAY
85233: PUSH
85234: LD_INT 3
85236: ARRAY
85237: STR
85238: PUSH
85239: LD_STRING ,
85241: STR
85242: PUSH
85243: LD_VAR 0 3
85247: PUSH
85248: LD_VAR 0 2
85252: ARRAY
85253: PUSH
85254: LD_INT 4
85256: ARRAY
85257: STR
85258: PUSH
85259: LD_STRING )
85261: STR
85262: PPUSH
85263: CALL_OW 559
85267: GO 85177
85269: POP
85270: POP
// end ; end ;
85271: LD_VAR 0 1
85275: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85276: LD_INT 0
85278: PPUSH
// if HexInfo ( x , y ) = warehouse then
85279: LD_VAR 0 2
85283: PPUSH
85284: LD_VAR 0 3
85288: PPUSH
85289: CALL_OW 428
85293: PUSH
85294: LD_VAR 0 1
85298: EQUAL
85299: IFFALSE 85326
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85301: LD_ADDR_EXP 122
85305: PUSH
85306: LD_EXP 122
85310: PPUSH
85311: LD_VAR 0 1
85315: PPUSH
85316: LD_INT 0
85318: PPUSH
85319: CALL_OW 1
85323: ST_TO_ADDR
85324: GO 85377
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
85326: LD_ADDR_EXP 122
85330: PUSH
85331: LD_EXP 122
85335: PPUSH
85336: LD_VAR 0 1
85340: PPUSH
85341: LD_VAR 0 1
85345: PPUSH
85346: CALL_OW 255
85350: PUSH
85351: LD_VAR 0 1
85355: PUSH
85356: LD_VAR 0 2
85360: PUSH
85361: LD_VAR 0 3
85365: PUSH
85366: EMPTY
85367: LIST
85368: LIST
85369: LIST
85370: LIST
85371: PPUSH
85372: CALL_OW 1
85376: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85377: CALL 85386 0 0
// end ;
85381: LD_VAR 0 4
85385: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85386: LD_INT 0
85388: PPUSH
85389: PPUSH
85390: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85391: LD_STRING resetWarehouseGatheringPoints();
85393: PPUSH
85394: CALL_OW 559
// if warehouseGatheringPoints then
85398: LD_EXP 122
85402: IFFALSE 85528
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85404: LD_ADDR_VAR 0 3
85408: PUSH
85409: LD_EXP 122
85413: PPUSH
85414: CALL 70231 0 1
85418: ST_TO_ADDR
// for i := 1 to list do
85419: LD_ADDR_VAR 0 2
85423: PUSH
85424: DOUBLE
85425: LD_INT 1
85427: DEC
85428: ST_TO_ADDR
85429: LD_VAR 0 3
85433: PUSH
85434: FOR_TO
85435: IFFALSE 85526
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85437: LD_STRING setWarehouseGatheringPointXY(
85439: PUSH
85440: LD_VAR 0 3
85444: PUSH
85445: LD_VAR 0 2
85449: ARRAY
85450: PUSH
85451: LD_INT 1
85453: ARRAY
85454: STR
85455: PUSH
85456: LD_STRING ,
85458: STR
85459: PUSH
85460: LD_VAR 0 3
85464: PUSH
85465: LD_VAR 0 2
85469: ARRAY
85470: PUSH
85471: LD_INT 2
85473: ARRAY
85474: STR
85475: PUSH
85476: LD_STRING ,
85478: STR
85479: PUSH
85480: LD_VAR 0 3
85484: PUSH
85485: LD_VAR 0 2
85489: ARRAY
85490: PUSH
85491: LD_INT 3
85493: ARRAY
85494: STR
85495: PUSH
85496: LD_STRING ,
85498: STR
85499: PUSH
85500: LD_VAR 0 3
85504: PUSH
85505: LD_VAR 0 2
85509: ARRAY
85510: PUSH
85511: LD_INT 4
85513: ARRAY
85514: STR
85515: PUSH
85516: LD_STRING )
85518: STR
85519: PPUSH
85520: CALL_OW 559
85524: GO 85434
85526: POP
85527: POP
// end ; end ;
85528: LD_VAR 0 1
85532: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85533: LD_EXP 122
85537: IFFALSE 86222
85539: GO 85541
85541: DISABLE
85542: LD_INT 0
85544: PPUSH
85545: PPUSH
85546: PPUSH
85547: PPUSH
85548: PPUSH
85549: PPUSH
85550: PPUSH
85551: PPUSH
85552: PPUSH
// begin enable ;
85553: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85554: LD_ADDR_VAR 0 3
85558: PUSH
85559: LD_EXP 122
85563: PPUSH
85564: CALL 70231 0 1
85568: ST_TO_ADDR
// if not list then
85569: LD_VAR 0 3
85573: NOT
85574: IFFALSE 85578
// exit ;
85576: GO 86222
// for i := 1 to list do
85578: LD_ADDR_VAR 0 1
85582: PUSH
85583: DOUBLE
85584: LD_INT 1
85586: DEC
85587: ST_TO_ADDR
85588: LD_VAR 0 3
85592: PUSH
85593: FOR_TO
85594: IFFALSE 86220
// begin depot := list [ i ] [ 2 ] ;
85596: LD_ADDR_VAR 0 8
85600: PUSH
85601: LD_VAR 0 3
85605: PUSH
85606: LD_VAR 0 1
85610: ARRAY
85611: PUSH
85612: LD_INT 2
85614: ARRAY
85615: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
85616: LD_ADDR_VAR 0 5
85620: PUSH
85621: LD_VAR 0 3
85625: PUSH
85626: LD_VAR 0 1
85630: ARRAY
85631: PUSH
85632: LD_INT 1
85634: ARRAY
85635: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
85636: LD_VAR 0 8
85640: PPUSH
85641: CALL_OW 301
85645: PUSH
85646: LD_VAR 0 5
85650: PUSH
85651: LD_VAR 0 8
85655: PPUSH
85656: CALL_OW 255
85660: NONEQUAL
85661: OR
85662: IFFALSE 85691
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
85664: LD_ADDR_EXP 122
85668: PUSH
85669: LD_EXP 122
85673: PPUSH
85674: LD_VAR 0 8
85678: PPUSH
85679: LD_INT 0
85681: PPUSH
85682: CALL_OW 1
85686: ST_TO_ADDR
// exit ;
85687: POP
85688: POP
85689: GO 86222
// end ; x := list [ i ] [ 3 ] ;
85691: LD_ADDR_VAR 0 6
85695: PUSH
85696: LD_VAR 0 3
85700: PUSH
85701: LD_VAR 0 1
85705: ARRAY
85706: PUSH
85707: LD_INT 3
85709: ARRAY
85710: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
85711: LD_ADDR_VAR 0 7
85715: PUSH
85716: LD_VAR 0 3
85720: PUSH
85721: LD_VAR 0 1
85725: ARRAY
85726: PUSH
85727: LD_INT 4
85729: ARRAY
85730: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
85731: LD_ADDR_VAR 0 9
85735: PUSH
85736: LD_VAR 0 6
85740: PPUSH
85741: LD_VAR 0 7
85745: PPUSH
85746: LD_INT 16
85748: PPUSH
85749: CALL 68819 0 3
85753: ST_TO_ADDR
// if not cratesNearbyPoint then
85754: LD_VAR 0 9
85758: NOT
85759: IFFALSE 85765
// exit ;
85761: POP
85762: POP
85763: GO 86222
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
85765: LD_ADDR_VAR 0 4
85769: PUSH
85770: LD_INT 22
85772: PUSH
85773: LD_VAR 0 5
85777: PUSH
85778: EMPTY
85779: LIST
85780: LIST
85781: PUSH
85782: LD_INT 3
85784: PUSH
85785: LD_INT 60
85787: PUSH
85788: EMPTY
85789: LIST
85790: PUSH
85791: EMPTY
85792: LIST
85793: LIST
85794: PUSH
85795: LD_INT 91
85797: PUSH
85798: LD_VAR 0 8
85802: PUSH
85803: LD_INT 6
85805: PUSH
85806: EMPTY
85807: LIST
85808: LIST
85809: LIST
85810: PUSH
85811: LD_INT 2
85813: PUSH
85814: LD_INT 25
85816: PUSH
85817: LD_INT 2
85819: PUSH
85820: EMPTY
85821: LIST
85822: LIST
85823: PUSH
85824: LD_INT 25
85826: PUSH
85827: LD_INT 16
85829: PUSH
85830: EMPTY
85831: LIST
85832: LIST
85833: PUSH
85834: EMPTY
85835: LIST
85836: LIST
85837: LIST
85838: PUSH
85839: EMPTY
85840: LIST
85841: LIST
85842: LIST
85843: LIST
85844: PPUSH
85845: CALL_OW 69
85849: PUSH
85850: LD_VAR 0 8
85854: PPUSH
85855: CALL_OW 313
85859: PPUSH
85860: LD_INT 3
85862: PUSH
85863: LD_INT 60
85865: PUSH
85866: EMPTY
85867: LIST
85868: PUSH
85869: EMPTY
85870: LIST
85871: LIST
85872: PUSH
85873: LD_INT 2
85875: PUSH
85876: LD_INT 25
85878: PUSH
85879: LD_INT 2
85881: PUSH
85882: EMPTY
85883: LIST
85884: LIST
85885: PUSH
85886: LD_INT 25
85888: PUSH
85889: LD_INT 16
85891: PUSH
85892: EMPTY
85893: LIST
85894: LIST
85895: PUSH
85896: EMPTY
85897: LIST
85898: LIST
85899: LIST
85900: PUSH
85901: EMPTY
85902: LIST
85903: LIST
85904: PPUSH
85905: CALL_OW 72
85909: UNION
85910: ST_TO_ADDR
// if tmp then
85911: LD_VAR 0 4
85915: IFFALSE 85995
// begin tmp := ShrinkArray ( tmp , 3 ) ;
85917: LD_ADDR_VAR 0 4
85921: PUSH
85922: LD_VAR 0 4
85926: PPUSH
85927: LD_INT 3
85929: PPUSH
85930: CALL 66788 0 2
85934: ST_TO_ADDR
// for j in tmp do
85935: LD_ADDR_VAR 0 2
85939: PUSH
85940: LD_VAR 0 4
85944: PUSH
85945: FOR_IN
85946: IFFALSE 85989
// begin if IsInUnit ( j ) then
85948: LD_VAR 0 2
85952: PPUSH
85953: CALL_OW 310
85957: IFFALSE 85968
// ComExit ( j ) ;
85959: LD_VAR 0 2
85963: PPUSH
85964: CALL 66871 0 1
// AddComCollect ( j , x , y ) ;
85968: LD_VAR 0 2
85972: PPUSH
85973: LD_VAR 0 6
85977: PPUSH
85978: LD_VAR 0 7
85982: PPUSH
85983: CALL_OW 177
// end ;
85987: GO 85945
85989: POP
85990: POP
// exit ;
85991: POP
85992: POP
85993: GO 86222
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
85995: LD_ADDR_VAR 0 4
85999: PUSH
86000: LD_INT 22
86002: PUSH
86003: LD_VAR 0 5
86007: PUSH
86008: EMPTY
86009: LIST
86010: LIST
86011: PUSH
86012: LD_INT 91
86014: PUSH
86015: LD_VAR 0 8
86019: PUSH
86020: LD_INT 8
86022: PUSH
86023: EMPTY
86024: LIST
86025: LIST
86026: LIST
86027: PUSH
86028: LD_INT 2
86030: PUSH
86031: LD_INT 34
86033: PUSH
86034: LD_INT 12
86036: PUSH
86037: EMPTY
86038: LIST
86039: LIST
86040: PUSH
86041: LD_INT 34
86043: PUSH
86044: LD_INT 51
86046: PUSH
86047: EMPTY
86048: LIST
86049: LIST
86050: PUSH
86051: LD_INT 34
86053: PUSH
86054: LD_INT 32
86056: PUSH
86057: EMPTY
86058: LIST
86059: LIST
86060: PUSH
86061: LD_INT 34
86063: PUSH
86064: LD_INT 89
86066: PUSH
86067: EMPTY
86068: LIST
86069: LIST
86070: PUSH
86071: EMPTY
86072: LIST
86073: LIST
86074: LIST
86075: LIST
86076: LIST
86077: PUSH
86078: EMPTY
86079: LIST
86080: LIST
86081: LIST
86082: PPUSH
86083: CALL_OW 69
86087: ST_TO_ADDR
// if tmp then
86088: LD_VAR 0 4
86092: IFFALSE 86218
// begin for j in tmp do
86094: LD_ADDR_VAR 0 2
86098: PUSH
86099: LD_VAR 0 4
86103: PUSH
86104: FOR_IN
86105: IFFALSE 86216
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
86107: LD_VAR 0 2
86111: PPUSH
86112: CALL_OW 262
86116: PUSH
86117: LD_INT 3
86119: EQUAL
86120: PUSH
86121: LD_VAR 0 2
86125: PPUSH
86126: CALL_OW 261
86130: PUSH
86131: LD_INT 20
86133: GREATER
86134: OR
86135: PUSH
86136: LD_VAR 0 2
86140: PPUSH
86141: CALL_OW 314
86145: NOT
86146: AND
86147: PUSH
86148: LD_VAR 0 2
86152: PPUSH
86153: CALL_OW 263
86157: PUSH
86158: LD_INT 1
86160: NONEQUAL
86161: PUSH
86162: LD_VAR 0 2
86166: PPUSH
86167: CALL_OW 311
86171: OR
86172: AND
86173: IFFALSE 86214
// begin ComCollect ( j , x , y ) ;
86175: LD_VAR 0 2
86179: PPUSH
86180: LD_VAR 0 6
86184: PPUSH
86185: LD_VAR 0 7
86189: PPUSH
86190: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
86194: LD_VAR 0 2
86198: PPUSH
86199: LD_VAR 0 8
86203: PPUSH
86204: CALL_OW 172
// exit ;
86208: POP
86209: POP
86210: POP
86211: POP
86212: GO 86222
// end ;
86214: GO 86104
86216: POP
86217: POP
// end ; end ;
86218: GO 85593
86220: POP
86221: POP
// end ; end_of_file
86222: PPOPN 9
86224: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86225: LD_VAR 0 1
86229: PUSH
86230: LD_INT 200
86232: DOUBLE
86233: GREATEREQUAL
86234: IFFALSE 86242
86236: LD_INT 299
86238: DOUBLE
86239: LESSEQUAL
86240: IFTRUE 86244
86242: GO 86276
86244: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86245: LD_VAR 0 1
86249: PPUSH
86250: LD_VAR 0 2
86254: PPUSH
86255: LD_VAR 0 3
86259: PPUSH
86260: LD_VAR 0 4
86264: PPUSH
86265: LD_VAR 0 5
86269: PPUSH
86270: CALL 86764 0 5
86274: GO 86353
86276: LD_INT 300
86278: DOUBLE
86279: GREATEREQUAL
86280: IFFALSE 86288
86282: LD_INT 399
86284: DOUBLE
86285: LESSEQUAL
86286: IFTRUE 86290
86288: GO 86352
86290: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86291: LD_VAR 0 1
86295: PPUSH
86296: LD_VAR 0 2
86300: PPUSH
86301: LD_VAR 0 3
86305: PPUSH
86306: LD_VAR 0 4
86310: PPUSH
86311: LD_VAR 0 5
86315: PPUSH
86316: LD_VAR 0 6
86320: PPUSH
86321: LD_VAR 0 7
86325: PPUSH
86326: LD_VAR 0 8
86330: PPUSH
86331: LD_VAR 0 9
86335: PPUSH
86336: LD_VAR 0 10
86340: PPUSH
86341: LD_VAR 0 11
86345: PPUSH
86346: CALL 82934 0 11
86350: GO 86353
86352: POP
// end ;
86353: PPOPN 11
86355: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86356: LD_VAR 0 1
86360: PPUSH
86361: LD_VAR 0 2
86365: PPUSH
86366: LD_VAR 0 3
86370: PPUSH
86371: LD_VAR 0 4
86375: PPUSH
86376: LD_VAR 0 5
86380: PPUSH
86381: CALL 86500 0 5
// end ; end_of_file
86385: PPOPN 5
86387: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86388: LD_INT 0
86390: PPUSH
86391: PPUSH
86392: PPUSH
86393: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86394: LD_VAR 0 1
86398: PPUSH
86399: CALL_OW 264
86403: PUSH
86404: LD_INT 91
86406: EQUAL
86407: IFFALSE 86479
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86409: LD_INT 68
86411: PPUSH
86412: LD_VAR 0 1
86416: PPUSH
86417: CALL_OW 255
86421: PPUSH
86422: CALL_OW 321
86426: PUSH
86427: LD_INT 2
86429: EQUAL
86430: IFFALSE 86442
// eff := 70 else
86432: LD_ADDR_VAR 0 4
86436: PUSH
86437: LD_INT 70
86439: ST_TO_ADDR
86440: GO 86450
// eff := 30 ;
86442: LD_ADDR_VAR 0 4
86446: PUSH
86447: LD_INT 30
86449: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
86450: LD_VAR 0 1
86454: PPUSH
86455: CALL_OW 250
86459: PPUSH
86460: LD_VAR 0 1
86464: PPUSH
86465: CALL_OW 251
86469: PPUSH
86470: LD_VAR 0 4
86474: PPUSH
86475: CALL_OW 495
// end ; end ;
86479: LD_VAR 0 2
86483: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
86484: LD_INT 0
86486: PPUSH
// end ;
86487: LD_VAR 0 4
86491: RET
// export function SOS_Command ( cmd ) ; begin
86492: LD_INT 0
86494: PPUSH
// end ;
86495: LD_VAR 0 2
86499: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
86500: LD_INT 0
86502: PPUSH
// end ;
86503: LD_VAR 0 6
86507: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
86508: LD_INT 0
86510: PPUSH
86511: PPUSH
// if not vehicle or not factory then
86512: LD_VAR 0 1
86516: NOT
86517: PUSH
86518: LD_VAR 0 2
86522: NOT
86523: OR
86524: IFFALSE 86528
// exit ;
86526: GO 86759
// if factoryWaypoints >= factory then
86528: LD_EXP 121
86532: PUSH
86533: LD_VAR 0 2
86537: GREATEREQUAL
86538: IFFALSE 86759
// if factoryWaypoints [ factory ] then
86540: LD_EXP 121
86544: PUSH
86545: LD_VAR 0 2
86549: ARRAY
86550: IFFALSE 86759
// begin if GetControl ( vehicle ) = control_manual then
86552: LD_VAR 0 1
86556: PPUSH
86557: CALL_OW 263
86561: PUSH
86562: LD_INT 1
86564: EQUAL
86565: IFFALSE 86646
// begin driver := IsDrivenBy ( vehicle ) ;
86567: LD_ADDR_VAR 0 4
86571: PUSH
86572: LD_VAR 0 1
86576: PPUSH
86577: CALL_OW 311
86581: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86582: LD_VAR 0 4
86586: PPUSH
86587: LD_EXP 121
86591: PUSH
86592: LD_VAR 0 2
86596: ARRAY
86597: PUSH
86598: LD_INT 3
86600: ARRAY
86601: PPUSH
86602: LD_EXP 121
86606: PUSH
86607: LD_VAR 0 2
86611: ARRAY
86612: PUSH
86613: LD_INT 4
86615: ARRAY
86616: PPUSH
86617: CALL_OW 171
// AddComExitVehicle ( driver ) ;
86621: LD_VAR 0 4
86625: PPUSH
86626: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
86630: LD_VAR 0 4
86634: PPUSH
86635: LD_VAR 0 2
86639: PPUSH
86640: CALL_OW 180
// end else
86644: GO 86759
// if GetControl ( vehicle ) = control_remote then
86646: LD_VAR 0 1
86650: PPUSH
86651: CALL_OW 263
86655: PUSH
86656: LD_INT 2
86658: EQUAL
86659: IFFALSE 86720
// begin wait ( 0 0$2 ) ;
86661: LD_INT 70
86663: PPUSH
86664: CALL_OW 67
// if Connect ( vehicle ) then
86668: LD_VAR 0 1
86672: PPUSH
86673: CALL 37111 0 1
86677: IFFALSE 86718
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86679: LD_VAR 0 1
86683: PPUSH
86684: LD_EXP 121
86688: PUSH
86689: LD_VAR 0 2
86693: ARRAY
86694: PUSH
86695: LD_INT 3
86697: ARRAY
86698: PPUSH
86699: LD_EXP 121
86703: PUSH
86704: LD_VAR 0 2
86708: ARRAY
86709: PUSH
86710: LD_INT 4
86712: ARRAY
86713: PPUSH
86714: CALL_OW 171
// end else
86718: GO 86759
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86720: LD_VAR 0 1
86724: PPUSH
86725: LD_EXP 121
86729: PUSH
86730: LD_VAR 0 2
86734: ARRAY
86735: PUSH
86736: LD_INT 3
86738: ARRAY
86739: PPUSH
86740: LD_EXP 121
86744: PUSH
86745: LD_VAR 0 2
86749: ARRAY
86750: PUSH
86751: LD_INT 4
86753: ARRAY
86754: PPUSH
86755: CALL_OW 171
// end ; end ;
86759: LD_VAR 0 3
86763: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
86764: LD_INT 0
86766: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
86767: LD_VAR 0 1
86771: PUSH
86772: LD_INT 250
86774: EQUAL
86775: PUSH
86776: LD_VAR 0 2
86780: PPUSH
86781: CALL_OW 264
86785: PUSH
86786: LD_INT 81
86788: EQUAL
86789: AND
86790: IFFALSE 86811
// MinerPlaceMine ( unit , x , y ) ;
86792: LD_VAR 0 2
86796: PPUSH
86797: LD_VAR 0 4
86801: PPUSH
86802: LD_VAR 0 5
86806: PPUSH
86807: CALL 89196 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
86811: LD_VAR 0 1
86815: PUSH
86816: LD_INT 251
86818: EQUAL
86819: PUSH
86820: LD_VAR 0 2
86824: PPUSH
86825: CALL_OW 264
86829: PUSH
86830: LD_INT 81
86832: EQUAL
86833: AND
86834: IFFALSE 86855
// MinerDetonateMine ( unit , x , y ) ;
86836: LD_VAR 0 2
86840: PPUSH
86841: LD_VAR 0 4
86845: PPUSH
86846: LD_VAR 0 5
86850: PPUSH
86851: CALL 89471 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
86855: LD_VAR 0 1
86859: PUSH
86860: LD_INT 252
86862: EQUAL
86863: PUSH
86864: LD_VAR 0 2
86868: PPUSH
86869: CALL_OW 264
86873: PUSH
86874: LD_INT 81
86876: EQUAL
86877: AND
86878: IFFALSE 86899
// MinerCreateMinefield ( unit , x , y ) ;
86880: LD_VAR 0 2
86884: PPUSH
86885: LD_VAR 0 4
86889: PPUSH
86890: LD_VAR 0 5
86894: PPUSH
86895: CALL 89888 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
86899: LD_VAR 0 1
86903: PUSH
86904: LD_INT 253
86906: EQUAL
86907: PUSH
86908: LD_VAR 0 2
86912: PPUSH
86913: CALL_OW 257
86917: PUSH
86918: LD_INT 5
86920: EQUAL
86921: AND
86922: IFFALSE 86943
// ComBinocular ( unit , x , y ) ;
86924: LD_VAR 0 2
86928: PPUSH
86929: LD_VAR 0 4
86933: PPUSH
86934: LD_VAR 0 5
86938: PPUSH
86939: CALL 90257 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
86943: LD_VAR 0 1
86947: PUSH
86948: LD_INT 254
86950: EQUAL
86951: PUSH
86952: LD_VAR 0 2
86956: PPUSH
86957: CALL_OW 264
86961: PUSH
86962: LD_INT 99
86964: EQUAL
86965: AND
86966: PUSH
86967: LD_VAR 0 3
86971: PPUSH
86972: CALL_OW 263
86976: PUSH
86977: LD_INT 3
86979: EQUAL
86980: AND
86981: IFFALSE 86997
// HackDestroyVehicle ( unit , selectedUnit ) ;
86983: LD_VAR 0 2
86987: PPUSH
86988: LD_VAR 0 3
86992: PPUSH
86993: CALL 88560 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
86997: LD_VAR 0 1
87001: PUSH
87002: LD_INT 255
87004: EQUAL
87005: PUSH
87006: LD_VAR 0 2
87010: PPUSH
87011: CALL_OW 264
87015: PUSH
87016: LD_INT 14
87018: PUSH
87019: LD_INT 53
87021: PUSH
87022: EMPTY
87023: LIST
87024: LIST
87025: IN
87026: AND
87027: PUSH
87028: LD_VAR 0 4
87032: PPUSH
87033: LD_VAR 0 5
87037: PPUSH
87038: CALL_OW 488
87042: AND
87043: IFFALSE 87067
// CutTreeXYR ( unit , x , y , 12 ) ;
87045: LD_VAR 0 2
87049: PPUSH
87050: LD_VAR 0 4
87054: PPUSH
87055: LD_VAR 0 5
87059: PPUSH
87060: LD_INT 12
87062: PPUSH
87063: CALL 87130 0 4
// if cmd = 256 then
87067: LD_VAR 0 1
87071: PUSH
87072: LD_INT 256
87074: EQUAL
87075: IFFALSE 87096
// SetFactoryWaypoint ( unit , x , y ) ;
87077: LD_VAR 0 2
87081: PPUSH
87082: LD_VAR 0 4
87086: PPUSH
87087: LD_VAR 0 5
87091: PPUSH
87092: CALL 84914 0 3
// if cmd = 257 then
87096: LD_VAR 0 1
87100: PUSH
87101: LD_INT 257
87103: EQUAL
87104: IFFALSE 87125
// SetWarehouseGatheringPoint ( unit , x , y ) ;
87106: LD_VAR 0 2
87110: PPUSH
87111: LD_VAR 0 4
87115: PPUSH
87116: LD_VAR 0 5
87120: PPUSH
87121: CALL 85276 0 3
// end ;
87125: LD_VAR 0 6
87129: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87130: LD_INT 0
87132: PPUSH
87133: PPUSH
87134: PPUSH
87135: PPUSH
87136: PPUSH
87137: PPUSH
87138: PPUSH
87139: PPUSH
87140: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
87141: LD_VAR 0 1
87145: NOT
87146: PUSH
87147: LD_VAR 0 2
87151: PPUSH
87152: LD_VAR 0 3
87156: PPUSH
87157: CALL_OW 488
87161: NOT
87162: OR
87163: PUSH
87164: LD_VAR 0 4
87168: NOT
87169: OR
87170: IFFALSE 87174
// exit ;
87172: GO 87514
// list := [ ] ;
87174: LD_ADDR_VAR 0 13
87178: PUSH
87179: EMPTY
87180: ST_TO_ADDR
// if x - r < 0 then
87181: LD_VAR 0 2
87185: PUSH
87186: LD_VAR 0 4
87190: MINUS
87191: PUSH
87192: LD_INT 0
87194: LESS
87195: IFFALSE 87207
// min_x := 0 else
87197: LD_ADDR_VAR 0 7
87201: PUSH
87202: LD_INT 0
87204: ST_TO_ADDR
87205: GO 87223
// min_x := x - r ;
87207: LD_ADDR_VAR 0 7
87211: PUSH
87212: LD_VAR 0 2
87216: PUSH
87217: LD_VAR 0 4
87221: MINUS
87222: ST_TO_ADDR
// if y - r < 0 then
87223: LD_VAR 0 3
87227: PUSH
87228: LD_VAR 0 4
87232: MINUS
87233: PUSH
87234: LD_INT 0
87236: LESS
87237: IFFALSE 87249
// min_y := 0 else
87239: LD_ADDR_VAR 0 8
87243: PUSH
87244: LD_INT 0
87246: ST_TO_ADDR
87247: GO 87265
// min_y := y - r ;
87249: LD_ADDR_VAR 0 8
87253: PUSH
87254: LD_VAR 0 3
87258: PUSH
87259: LD_VAR 0 4
87263: MINUS
87264: ST_TO_ADDR
// max_x := x + r ;
87265: LD_ADDR_VAR 0 9
87269: PUSH
87270: LD_VAR 0 2
87274: PUSH
87275: LD_VAR 0 4
87279: PLUS
87280: ST_TO_ADDR
// max_y := y + r ;
87281: LD_ADDR_VAR 0 10
87285: PUSH
87286: LD_VAR 0 3
87290: PUSH
87291: LD_VAR 0 4
87295: PLUS
87296: ST_TO_ADDR
// for _x = min_x to max_x do
87297: LD_ADDR_VAR 0 11
87301: PUSH
87302: DOUBLE
87303: LD_VAR 0 7
87307: DEC
87308: ST_TO_ADDR
87309: LD_VAR 0 9
87313: PUSH
87314: FOR_TO
87315: IFFALSE 87432
// for _y = min_y to max_y do
87317: LD_ADDR_VAR 0 12
87321: PUSH
87322: DOUBLE
87323: LD_VAR 0 8
87327: DEC
87328: ST_TO_ADDR
87329: LD_VAR 0 10
87333: PUSH
87334: FOR_TO
87335: IFFALSE 87428
// begin if not ValidHex ( _x , _y ) then
87337: LD_VAR 0 11
87341: PPUSH
87342: LD_VAR 0 12
87346: PPUSH
87347: CALL_OW 488
87351: NOT
87352: IFFALSE 87356
// continue ;
87354: GO 87334
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87356: LD_VAR 0 11
87360: PPUSH
87361: LD_VAR 0 12
87365: PPUSH
87366: CALL_OW 351
87370: PUSH
87371: LD_VAR 0 11
87375: PPUSH
87376: LD_VAR 0 12
87380: PPUSH
87381: CALL_OW 554
87385: AND
87386: IFFALSE 87426
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87388: LD_ADDR_VAR 0 13
87392: PUSH
87393: LD_VAR 0 13
87397: PPUSH
87398: LD_VAR 0 13
87402: PUSH
87403: LD_INT 1
87405: PLUS
87406: PPUSH
87407: LD_VAR 0 11
87411: PUSH
87412: LD_VAR 0 12
87416: PUSH
87417: EMPTY
87418: LIST
87419: LIST
87420: PPUSH
87421: CALL_OW 2
87425: ST_TO_ADDR
// end ;
87426: GO 87334
87428: POP
87429: POP
87430: GO 87314
87432: POP
87433: POP
// if not list then
87434: LD_VAR 0 13
87438: NOT
87439: IFFALSE 87443
// exit ;
87441: GO 87514
// for i in list do
87443: LD_ADDR_VAR 0 6
87447: PUSH
87448: LD_VAR 0 13
87452: PUSH
87453: FOR_IN
87454: IFFALSE 87512
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87456: LD_VAR 0 1
87460: PPUSH
87461: LD_STRING M
87463: PUSH
87464: LD_VAR 0 6
87468: PUSH
87469: LD_INT 1
87471: ARRAY
87472: PUSH
87473: LD_VAR 0 6
87477: PUSH
87478: LD_INT 2
87480: ARRAY
87481: PUSH
87482: LD_INT 0
87484: PUSH
87485: LD_INT 0
87487: PUSH
87488: LD_INT 0
87490: PUSH
87491: LD_INT 0
87493: PUSH
87494: EMPTY
87495: LIST
87496: LIST
87497: LIST
87498: LIST
87499: LIST
87500: LIST
87501: LIST
87502: PUSH
87503: EMPTY
87504: LIST
87505: PPUSH
87506: CALL_OW 447
87510: GO 87453
87512: POP
87513: POP
// end ;
87514: LD_VAR 0 5
87518: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
87519: LD_EXP 124
87523: NOT
87524: IFFALSE 87574
87526: GO 87528
87528: DISABLE
// begin initHack := true ;
87529: LD_ADDR_EXP 124
87533: PUSH
87534: LD_INT 1
87536: ST_TO_ADDR
// hackTanks := [ ] ;
87537: LD_ADDR_EXP 125
87541: PUSH
87542: EMPTY
87543: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
87544: LD_ADDR_EXP 126
87548: PUSH
87549: EMPTY
87550: ST_TO_ADDR
// hackLimit := 3 ;
87551: LD_ADDR_EXP 127
87555: PUSH
87556: LD_INT 3
87558: ST_TO_ADDR
// hackDist := 12 ;
87559: LD_ADDR_EXP 128
87563: PUSH
87564: LD_INT 12
87566: ST_TO_ADDR
// hackCounter := [ ] ;
87567: LD_ADDR_EXP 129
87571: PUSH
87572: EMPTY
87573: ST_TO_ADDR
// end ;
87574: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
87575: LD_EXP 124
87579: PUSH
87580: LD_INT 34
87582: PUSH
87583: LD_INT 99
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: PPUSH
87590: CALL_OW 69
87594: AND
87595: IFFALSE 87848
87597: GO 87599
87599: DISABLE
87600: LD_INT 0
87602: PPUSH
87603: PPUSH
// begin enable ;
87604: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
87605: LD_ADDR_VAR 0 1
87609: PUSH
87610: LD_INT 34
87612: PUSH
87613: LD_INT 99
87615: PUSH
87616: EMPTY
87617: LIST
87618: LIST
87619: PPUSH
87620: CALL_OW 69
87624: PUSH
87625: FOR_IN
87626: IFFALSE 87846
// begin if not i in hackTanks then
87628: LD_VAR 0 1
87632: PUSH
87633: LD_EXP 125
87637: IN
87638: NOT
87639: IFFALSE 87722
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
87641: LD_ADDR_EXP 125
87645: PUSH
87646: LD_EXP 125
87650: PPUSH
87651: LD_EXP 125
87655: PUSH
87656: LD_INT 1
87658: PLUS
87659: PPUSH
87660: LD_VAR 0 1
87664: PPUSH
87665: CALL_OW 1
87669: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
87670: LD_ADDR_EXP 126
87674: PUSH
87675: LD_EXP 126
87679: PPUSH
87680: LD_EXP 126
87684: PUSH
87685: LD_INT 1
87687: PLUS
87688: PPUSH
87689: EMPTY
87690: PPUSH
87691: CALL_OW 1
87695: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
87696: LD_ADDR_EXP 129
87700: PUSH
87701: LD_EXP 129
87705: PPUSH
87706: LD_EXP 129
87710: PUSH
87711: LD_INT 1
87713: PLUS
87714: PPUSH
87715: EMPTY
87716: PPUSH
87717: CALL_OW 1
87721: ST_TO_ADDR
// end ; if not IsOk ( i ) then
87722: LD_VAR 0 1
87726: PPUSH
87727: CALL_OW 302
87731: NOT
87732: IFFALSE 87745
// begin HackUnlinkAll ( i ) ;
87734: LD_VAR 0 1
87738: PPUSH
87739: CALL 87851 0 1
// continue ;
87743: GO 87625
// end ; HackCheckCapturedStatus ( i ) ;
87745: LD_VAR 0 1
87749: PPUSH
87750: CALL 88294 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
87754: LD_ADDR_VAR 0 2
87758: PUSH
87759: LD_INT 81
87761: PUSH
87762: LD_VAR 0 1
87766: PPUSH
87767: CALL_OW 255
87771: PUSH
87772: EMPTY
87773: LIST
87774: LIST
87775: PUSH
87776: LD_INT 33
87778: PUSH
87779: LD_INT 3
87781: PUSH
87782: EMPTY
87783: LIST
87784: LIST
87785: PUSH
87786: LD_INT 91
87788: PUSH
87789: LD_VAR 0 1
87793: PUSH
87794: LD_EXP 128
87798: PUSH
87799: EMPTY
87800: LIST
87801: LIST
87802: LIST
87803: PUSH
87804: LD_INT 50
87806: PUSH
87807: EMPTY
87808: LIST
87809: PUSH
87810: EMPTY
87811: LIST
87812: LIST
87813: LIST
87814: LIST
87815: PPUSH
87816: CALL_OW 69
87820: ST_TO_ADDR
// if not tmp then
87821: LD_VAR 0 2
87825: NOT
87826: IFFALSE 87830
// continue ;
87828: GO 87625
// HackLink ( i , tmp ) ;
87830: LD_VAR 0 1
87834: PPUSH
87835: LD_VAR 0 2
87839: PPUSH
87840: CALL 87987 0 2
// end ;
87844: GO 87625
87846: POP
87847: POP
// end ;
87848: PPOPN 2
87850: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
87851: LD_INT 0
87853: PPUSH
87854: PPUSH
87855: PPUSH
// if not hack in hackTanks then
87856: LD_VAR 0 1
87860: PUSH
87861: LD_EXP 125
87865: IN
87866: NOT
87867: IFFALSE 87871
// exit ;
87869: GO 87982
// index := GetElementIndex ( hackTanks , hack ) ;
87871: LD_ADDR_VAR 0 4
87875: PUSH
87876: LD_EXP 125
87880: PPUSH
87881: LD_VAR 0 1
87885: PPUSH
87886: CALL 33927 0 2
87890: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
87891: LD_EXP 126
87895: PUSH
87896: LD_VAR 0 4
87900: ARRAY
87901: IFFALSE 87982
// begin for i in hackTanksCaptured [ index ] do
87903: LD_ADDR_VAR 0 3
87907: PUSH
87908: LD_EXP 126
87912: PUSH
87913: LD_VAR 0 4
87917: ARRAY
87918: PUSH
87919: FOR_IN
87920: IFFALSE 87946
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
87922: LD_VAR 0 3
87926: PUSH
87927: LD_INT 1
87929: ARRAY
87930: PPUSH
87931: LD_VAR 0 3
87935: PUSH
87936: LD_INT 2
87938: ARRAY
87939: PPUSH
87940: CALL_OW 235
87944: GO 87919
87946: POP
87947: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
87948: LD_ADDR_EXP 126
87952: PUSH
87953: LD_EXP 126
87957: PPUSH
87958: LD_VAR 0 4
87962: PPUSH
87963: EMPTY
87964: PPUSH
87965: CALL_OW 1
87969: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
87970: LD_VAR 0 1
87974: PPUSH
87975: LD_INT 0
87977: PPUSH
87978: CALL_OW 505
// end ; end ;
87982: LD_VAR 0 2
87986: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
87987: LD_INT 0
87989: PPUSH
87990: PPUSH
87991: PPUSH
// if not hack in hackTanks or not vehicles then
87992: LD_VAR 0 1
87996: PUSH
87997: LD_EXP 125
88001: IN
88002: NOT
88003: PUSH
88004: LD_VAR 0 2
88008: NOT
88009: OR
88010: IFFALSE 88014
// exit ;
88012: GO 88289
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
88014: LD_ADDR_VAR 0 2
88018: PUSH
88019: LD_VAR 0 1
88023: PPUSH
88024: LD_VAR 0 2
88028: PPUSH
88029: LD_INT 1
88031: PPUSH
88032: LD_INT 1
88034: PPUSH
88035: CALL 34577 0 4
88039: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
88040: LD_ADDR_VAR 0 5
88044: PUSH
88045: LD_EXP 125
88049: PPUSH
88050: LD_VAR 0 1
88054: PPUSH
88055: CALL 33927 0 2
88059: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
88060: LD_EXP 126
88064: PUSH
88065: LD_VAR 0 5
88069: ARRAY
88070: PUSH
88071: LD_EXP 127
88075: LESS
88076: IFFALSE 88265
// begin for i := 1 to vehicles do
88078: LD_ADDR_VAR 0 4
88082: PUSH
88083: DOUBLE
88084: LD_INT 1
88086: DEC
88087: ST_TO_ADDR
88088: LD_VAR 0 2
88092: PUSH
88093: FOR_TO
88094: IFFALSE 88263
// begin if hackTanksCaptured [ index ] = hackLimit then
88096: LD_EXP 126
88100: PUSH
88101: LD_VAR 0 5
88105: ARRAY
88106: PUSH
88107: LD_EXP 127
88111: EQUAL
88112: IFFALSE 88116
// break ;
88114: GO 88263
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
88116: LD_ADDR_EXP 129
88120: PUSH
88121: LD_EXP 129
88125: PPUSH
88126: LD_VAR 0 5
88130: PPUSH
88131: LD_EXP 129
88135: PUSH
88136: LD_VAR 0 5
88140: ARRAY
88141: PUSH
88142: LD_INT 1
88144: PLUS
88145: PPUSH
88146: CALL_OW 1
88150: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
88151: LD_ADDR_EXP 126
88155: PUSH
88156: LD_EXP 126
88160: PPUSH
88161: LD_VAR 0 5
88165: PUSH
88166: LD_EXP 126
88170: PUSH
88171: LD_VAR 0 5
88175: ARRAY
88176: PUSH
88177: LD_INT 1
88179: PLUS
88180: PUSH
88181: EMPTY
88182: LIST
88183: LIST
88184: PPUSH
88185: LD_VAR 0 2
88189: PUSH
88190: LD_VAR 0 4
88194: ARRAY
88195: PUSH
88196: LD_VAR 0 2
88200: PUSH
88201: LD_VAR 0 4
88205: ARRAY
88206: PPUSH
88207: CALL_OW 255
88211: PUSH
88212: EMPTY
88213: LIST
88214: LIST
88215: PPUSH
88216: CALL 34142 0 3
88220: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
88221: LD_VAR 0 2
88225: PUSH
88226: LD_VAR 0 4
88230: ARRAY
88231: PPUSH
88232: LD_VAR 0 1
88236: PPUSH
88237: CALL_OW 255
88241: PPUSH
88242: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
88246: LD_VAR 0 2
88250: PUSH
88251: LD_VAR 0 4
88255: ARRAY
88256: PPUSH
88257: CALL_OW 141
// end ;
88261: GO 88093
88263: POP
88264: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88265: LD_VAR 0 1
88269: PPUSH
88270: LD_EXP 126
88274: PUSH
88275: LD_VAR 0 5
88279: ARRAY
88280: PUSH
88281: LD_INT 0
88283: PLUS
88284: PPUSH
88285: CALL_OW 505
// end ;
88289: LD_VAR 0 3
88293: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
88294: LD_INT 0
88296: PPUSH
88297: PPUSH
88298: PPUSH
88299: PPUSH
// if not hack in hackTanks then
88300: LD_VAR 0 1
88304: PUSH
88305: LD_EXP 125
88309: IN
88310: NOT
88311: IFFALSE 88315
// exit ;
88313: GO 88555
// index := GetElementIndex ( hackTanks , hack ) ;
88315: LD_ADDR_VAR 0 4
88319: PUSH
88320: LD_EXP 125
88324: PPUSH
88325: LD_VAR 0 1
88329: PPUSH
88330: CALL 33927 0 2
88334: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
88335: LD_ADDR_VAR 0 3
88339: PUSH
88340: DOUBLE
88341: LD_EXP 126
88345: PUSH
88346: LD_VAR 0 4
88350: ARRAY
88351: INC
88352: ST_TO_ADDR
88353: LD_INT 1
88355: PUSH
88356: FOR_DOWNTO
88357: IFFALSE 88529
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88359: LD_ADDR_VAR 0 5
88363: PUSH
88364: LD_EXP 126
88368: PUSH
88369: LD_VAR 0 4
88373: ARRAY
88374: PUSH
88375: LD_VAR 0 3
88379: ARRAY
88380: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88381: LD_VAR 0 5
88385: PUSH
88386: LD_INT 1
88388: ARRAY
88389: PPUSH
88390: CALL_OW 302
88394: NOT
88395: PUSH
88396: LD_VAR 0 5
88400: PUSH
88401: LD_INT 1
88403: ARRAY
88404: PPUSH
88405: CALL_OW 255
88409: PUSH
88410: LD_VAR 0 1
88414: PPUSH
88415: CALL_OW 255
88419: NONEQUAL
88420: OR
88421: IFFALSE 88527
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88423: LD_VAR 0 5
88427: PUSH
88428: LD_INT 1
88430: ARRAY
88431: PPUSH
88432: CALL_OW 305
88436: PUSH
88437: LD_VAR 0 5
88441: PUSH
88442: LD_INT 1
88444: ARRAY
88445: PPUSH
88446: CALL_OW 255
88450: PUSH
88451: LD_VAR 0 1
88455: PPUSH
88456: CALL_OW 255
88460: EQUAL
88461: AND
88462: IFFALSE 88486
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
88464: LD_VAR 0 5
88468: PUSH
88469: LD_INT 1
88471: ARRAY
88472: PPUSH
88473: LD_VAR 0 5
88477: PUSH
88478: LD_INT 2
88480: ARRAY
88481: PPUSH
88482: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
88486: LD_ADDR_EXP 126
88490: PUSH
88491: LD_EXP 126
88495: PPUSH
88496: LD_VAR 0 4
88500: PPUSH
88501: LD_EXP 126
88505: PUSH
88506: LD_VAR 0 4
88510: ARRAY
88511: PPUSH
88512: LD_VAR 0 3
88516: PPUSH
88517: CALL_OW 3
88521: PPUSH
88522: CALL_OW 1
88526: ST_TO_ADDR
// end ; end ;
88527: GO 88356
88529: POP
88530: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88531: LD_VAR 0 1
88535: PPUSH
88536: LD_EXP 126
88540: PUSH
88541: LD_VAR 0 4
88545: ARRAY
88546: PUSH
88547: LD_INT 0
88549: PLUS
88550: PPUSH
88551: CALL_OW 505
// end ;
88555: LD_VAR 0 2
88559: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
88560: LD_INT 0
88562: PPUSH
88563: PPUSH
88564: PPUSH
88565: PPUSH
// if not hack in hackTanks then
88566: LD_VAR 0 1
88570: PUSH
88571: LD_EXP 125
88575: IN
88576: NOT
88577: IFFALSE 88581
// exit ;
88579: GO 88666
// index := GetElementIndex ( hackTanks , hack ) ;
88581: LD_ADDR_VAR 0 5
88585: PUSH
88586: LD_EXP 125
88590: PPUSH
88591: LD_VAR 0 1
88595: PPUSH
88596: CALL 33927 0 2
88600: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
88601: LD_ADDR_VAR 0 4
88605: PUSH
88606: DOUBLE
88607: LD_INT 1
88609: DEC
88610: ST_TO_ADDR
88611: LD_EXP 126
88615: PUSH
88616: LD_VAR 0 5
88620: ARRAY
88621: PUSH
88622: FOR_TO
88623: IFFALSE 88664
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
88625: LD_EXP 126
88629: PUSH
88630: LD_VAR 0 5
88634: ARRAY
88635: PUSH
88636: LD_VAR 0 4
88640: ARRAY
88641: PUSH
88642: LD_INT 1
88644: ARRAY
88645: PUSH
88646: LD_VAR 0 2
88650: EQUAL
88651: IFFALSE 88662
// KillUnit ( vehicle ) ;
88653: LD_VAR 0 2
88657: PPUSH
88658: CALL_OW 66
88662: GO 88622
88664: POP
88665: POP
// end ;
88666: LD_VAR 0 3
88670: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
88671: LD_EXP 130
88675: NOT
88676: IFFALSE 88711
88678: GO 88680
88680: DISABLE
// begin initMiner := true ;
88681: LD_ADDR_EXP 130
88685: PUSH
88686: LD_INT 1
88688: ST_TO_ADDR
// minersList := [ ] ;
88689: LD_ADDR_EXP 131
88693: PUSH
88694: EMPTY
88695: ST_TO_ADDR
// minerMinesList := [ ] ;
88696: LD_ADDR_EXP 132
88700: PUSH
88701: EMPTY
88702: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
88703: LD_ADDR_EXP 133
88707: PUSH
88708: LD_INT 5
88710: ST_TO_ADDR
// end ;
88711: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
88712: LD_EXP 130
88716: PUSH
88717: LD_INT 34
88719: PUSH
88720: LD_INT 81
88722: PUSH
88723: EMPTY
88724: LIST
88725: LIST
88726: PPUSH
88727: CALL_OW 69
88731: AND
88732: IFFALSE 89193
88734: GO 88736
88736: DISABLE
88737: LD_INT 0
88739: PPUSH
88740: PPUSH
88741: PPUSH
88742: PPUSH
// begin enable ;
88743: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
88744: LD_ADDR_VAR 0 1
88748: PUSH
88749: LD_INT 34
88751: PUSH
88752: LD_INT 81
88754: PUSH
88755: EMPTY
88756: LIST
88757: LIST
88758: PPUSH
88759: CALL_OW 69
88763: PUSH
88764: FOR_IN
88765: IFFALSE 88837
// begin if not i in minersList then
88767: LD_VAR 0 1
88771: PUSH
88772: LD_EXP 131
88776: IN
88777: NOT
88778: IFFALSE 88835
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
88780: LD_ADDR_EXP 131
88784: PUSH
88785: LD_EXP 131
88789: PPUSH
88790: LD_EXP 131
88794: PUSH
88795: LD_INT 1
88797: PLUS
88798: PPUSH
88799: LD_VAR 0 1
88803: PPUSH
88804: CALL_OW 1
88808: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
88809: LD_ADDR_EXP 132
88813: PUSH
88814: LD_EXP 132
88818: PPUSH
88819: LD_EXP 132
88823: PUSH
88824: LD_INT 1
88826: PLUS
88827: PPUSH
88828: EMPTY
88829: PPUSH
88830: CALL_OW 1
88834: ST_TO_ADDR
// end end ;
88835: GO 88764
88837: POP
88838: POP
// for i := minerMinesList downto 1 do
88839: LD_ADDR_VAR 0 1
88843: PUSH
88844: DOUBLE
88845: LD_EXP 132
88849: INC
88850: ST_TO_ADDR
88851: LD_INT 1
88853: PUSH
88854: FOR_DOWNTO
88855: IFFALSE 89191
// begin if IsLive ( minersList [ i ] ) then
88857: LD_EXP 131
88861: PUSH
88862: LD_VAR 0 1
88866: ARRAY
88867: PPUSH
88868: CALL_OW 300
88872: IFFALSE 88900
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
88874: LD_EXP 131
88878: PUSH
88879: LD_VAR 0 1
88883: ARRAY
88884: PPUSH
88885: LD_EXP 132
88889: PUSH
88890: LD_VAR 0 1
88894: ARRAY
88895: PPUSH
88896: CALL_OW 505
// if not minerMinesList [ i ] then
88900: LD_EXP 132
88904: PUSH
88905: LD_VAR 0 1
88909: ARRAY
88910: NOT
88911: IFFALSE 88915
// continue ;
88913: GO 88854
// for j := minerMinesList [ i ] downto 1 do
88915: LD_ADDR_VAR 0 2
88919: PUSH
88920: DOUBLE
88921: LD_EXP 132
88925: PUSH
88926: LD_VAR 0 1
88930: ARRAY
88931: INC
88932: ST_TO_ADDR
88933: LD_INT 1
88935: PUSH
88936: FOR_DOWNTO
88937: IFFALSE 89187
// begin side := GetSide ( minersList [ i ] ) ;
88939: LD_ADDR_VAR 0 3
88943: PUSH
88944: LD_EXP 131
88948: PUSH
88949: LD_VAR 0 1
88953: ARRAY
88954: PPUSH
88955: CALL_OW 255
88959: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
88960: LD_ADDR_VAR 0 4
88964: PUSH
88965: LD_EXP 132
88969: PUSH
88970: LD_VAR 0 1
88974: ARRAY
88975: PUSH
88976: LD_VAR 0 2
88980: ARRAY
88981: PUSH
88982: LD_INT 1
88984: ARRAY
88985: PPUSH
88986: LD_EXP 132
88990: PUSH
88991: LD_VAR 0 1
88995: ARRAY
88996: PUSH
88997: LD_VAR 0 2
89001: ARRAY
89002: PUSH
89003: LD_INT 2
89005: ARRAY
89006: PPUSH
89007: CALL_OW 428
89011: ST_TO_ADDR
// if not tmp then
89012: LD_VAR 0 4
89016: NOT
89017: IFFALSE 89021
// continue ;
89019: GO 88936
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
89021: LD_VAR 0 4
89025: PUSH
89026: LD_INT 81
89028: PUSH
89029: LD_VAR 0 3
89033: PUSH
89034: EMPTY
89035: LIST
89036: LIST
89037: PPUSH
89038: CALL_OW 69
89042: IN
89043: PUSH
89044: LD_EXP 132
89048: PUSH
89049: LD_VAR 0 1
89053: ARRAY
89054: PUSH
89055: LD_VAR 0 2
89059: ARRAY
89060: PUSH
89061: LD_INT 1
89063: ARRAY
89064: PPUSH
89065: LD_EXP 132
89069: PUSH
89070: LD_VAR 0 1
89074: ARRAY
89075: PUSH
89076: LD_VAR 0 2
89080: ARRAY
89081: PUSH
89082: LD_INT 2
89084: ARRAY
89085: PPUSH
89086: CALL_OW 458
89090: AND
89091: IFFALSE 89185
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
89093: LD_EXP 132
89097: PUSH
89098: LD_VAR 0 1
89102: ARRAY
89103: PUSH
89104: LD_VAR 0 2
89108: ARRAY
89109: PUSH
89110: LD_INT 1
89112: ARRAY
89113: PPUSH
89114: LD_EXP 132
89118: PUSH
89119: LD_VAR 0 1
89123: ARRAY
89124: PUSH
89125: LD_VAR 0 2
89129: ARRAY
89130: PUSH
89131: LD_INT 2
89133: ARRAY
89134: PPUSH
89135: LD_VAR 0 3
89139: PPUSH
89140: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89144: LD_ADDR_EXP 132
89148: PUSH
89149: LD_EXP 132
89153: PPUSH
89154: LD_VAR 0 1
89158: PPUSH
89159: LD_EXP 132
89163: PUSH
89164: LD_VAR 0 1
89168: ARRAY
89169: PPUSH
89170: LD_VAR 0 2
89174: PPUSH
89175: CALL_OW 3
89179: PPUSH
89180: CALL_OW 1
89184: ST_TO_ADDR
// end ; end ;
89185: GO 88936
89187: POP
89188: POP
// end ;
89189: GO 88854
89191: POP
89192: POP
// end ;
89193: PPOPN 4
89195: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
89196: LD_INT 0
89198: PPUSH
89199: PPUSH
// result := false ;
89200: LD_ADDR_VAR 0 4
89204: PUSH
89205: LD_INT 0
89207: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
89208: LD_VAR 0 1
89212: PPUSH
89213: CALL_OW 264
89217: PUSH
89218: LD_INT 81
89220: EQUAL
89221: NOT
89222: IFFALSE 89226
// exit ;
89224: GO 89466
// index := GetElementIndex ( minersList , unit ) ;
89226: LD_ADDR_VAR 0 5
89230: PUSH
89231: LD_EXP 131
89235: PPUSH
89236: LD_VAR 0 1
89240: PPUSH
89241: CALL 33927 0 2
89245: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
89246: LD_EXP 132
89250: PUSH
89251: LD_VAR 0 5
89255: ARRAY
89256: PUSH
89257: LD_EXP 133
89261: GREATEREQUAL
89262: IFFALSE 89266
// exit ;
89264: GO 89466
// ComMoveXY ( unit , x , y ) ;
89266: LD_VAR 0 1
89270: PPUSH
89271: LD_VAR 0 2
89275: PPUSH
89276: LD_VAR 0 3
89280: PPUSH
89281: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89285: LD_INT 35
89287: PPUSH
89288: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
89292: LD_VAR 0 1
89296: PPUSH
89297: LD_VAR 0 2
89301: PPUSH
89302: LD_VAR 0 3
89306: PPUSH
89307: CALL 65282 0 3
89311: NOT
89312: PUSH
89313: LD_VAR 0 1
89317: PPUSH
89318: CALL_OW 314
89322: AND
89323: IFFALSE 89327
// exit ;
89325: GO 89466
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
89327: LD_VAR 0 2
89331: PPUSH
89332: LD_VAR 0 3
89336: PPUSH
89337: CALL_OW 428
89341: PUSH
89342: LD_VAR 0 1
89346: EQUAL
89347: PUSH
89348: LD_VAR 0 1
89352: PPUSH
89353: CALL_OW 314
89357: NOT
89358: AND
89359: IFFALSE 89285
// PlaySoundXY ( x , y , PlantMine ) ;
89361: LD_VAR 0 2
89365: PPUSH
89366: LD_VAR 0 3
89370: PPUSH
89371: LD_STRING PlantMine
89373: PPUSH
89374: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
89378: LD_VAR 0 2
89382: PPUSH
89383: LD_VAR 0 3
89387: PPUSH
89388: LD_VAR 0 1
89392: PPUSH
89393: CALL_OW 255
89397: PPUSH
89398: LD_INT 0
89400: PPUSH
89401: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
89405: LD_ADDR_EXP 132
89409: PUSH
89410: LD_EXP 132
89414: PPUSH
89415: LD_VAR 0 5
89419: PUSH
89420: LD_EXP 132
89424: PUSH
89425: LD_VAR 0 5
89429: ARRAY
89430: PUSH
89431: LD_INT 1
89433: PLUS
89434: PUSH
89435: EMPTY
89436: LIST
89437: LIST
89438: PPUSH
89439: LD_VAR 0 2
89443: PUSH
89444: LD_VAR 0 3
89448: PUSH
89449: EMPTY
89450: LIST
89451: LIST
89452: PPUSH
89453: CALL 34142 0 3
89457: ST_TO_ADDR
// result := true ;
89458: LD_ADDR_VAR 0 4
89462: PUSH
89463: LD_INT 1
89465: ST_TO_ADDR
// end ;
89466: LD_VAR 0 4
89470: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
89471: LD_INT 0
89473: PPUSH
89474: PPUSH
89475: PPUSH
// if not unit in minersList then
89476: LD_VAR 0 1
89480: PUSH
89481: LD_EXP 131
89485: IN
89486: NOT
89487: IFFALSE 89491
// exit ;
89489: GO 89883
// index := GetElementIndex ( minersList , unit ) ;
89491: LD_ADDR_VAR 0 6
89495: PUSH
89496: LD_EXP 131
89500: PPUSH
89501: LD_VAR 0 1
89505: PPUSH
89506: CALL 33927 0 2
89510: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
89511: LD_ADDR_VAR 0 5
89515: PUSH
89516: DOUBLE
89517: LD_EXP 132
89521: PUSH
89522: LD_VAR 0 6
89526: ARRAY
89527: INC
89528: ST_TO_ADDR
89529: LD_INT 1
89531: PUSH
89532: FOR_DOWNTO
89533: IFFALSE 89694
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
89535: LD_EXP 132
89539: PUSH
89540: LD_VAR 0 6
89544: ARRAY
89545: PUSH
89546: LD_VAR 0 5
89550: ARRAY
89551: PUSH
89552: LD_INT 1
89554: ARRAY
89555: PUSH
89556: LD_VAR 0 2
89560: EQUAL
89561: PUSH
89562: LD_EXP 132
89566: PUSH
89567: LD_VAR 0 6
89571: ARRAY
89572: PUSH
89573: LD_VAR 0 5
89577: ARRAY
89578: PUSH
89579: LD_INT 2
89581: ARRAY
89582: PUSH
89583: LD_VAR 0 3
89587: EQUAL
89588: AND
89589: IFFALSE 89692
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89591: LD_EXP 132
89595: PUSH
89596: LD_VAR 0 6
89600: ARRAY
89601: PUSH
89602: LD_VAR 0 5
89606: ARRAY
89607: PUSH
89608: LD_INT 1
89610: ARRAY
89611: PPUSH
89612: LD_EXP 132
89616: PUSH
89617: LD_VAR 0 6
89621: ARRAY
89622: PUSH
89623: LD_VAR 0 5
89627: ARRAY
89628: PUSH
89629: LD_INT 2
89631: ARRAY
89632: PPUSH
89633: LD_VAR 0 1
89637: PPUSH
89638: CALL_OW 255
89642: PPUSH
89643: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89647: LD_ADDR_EXP 132
89651: PUSH
89652: LD_EXP 132
89656: PPUSH
89657: LD_VAR 0 6
89661: PPUSH
89662: LD_EXP 132
89666: PUSH
89667: LD_VAR 0 6
89671: ARRAY
89672: PPUSH
89673: LD_VAR 0 5
89677: PPUSH
89678: CALL_OW 3
89682: PPUSH
89683: CALL_OW 1
89687: ST_TO_ADDR
// exit ;
89688: POP
89689: POP
89690: GO 89883
// end ; end ;
89692: GO 89532
89694: POP
89695: POP
// for i := minerMinesList [ index ] downto 1 do
89696: LD_ADDR_VAR 0 5
89700: PUSH
89701: DOUBLE
89702: LD_EXP 132
89706: PUSH
89707: LD_VAR 0 6
89711: ARRAY
89712: INC
89713: ST_TO_ADDR
89714: LD_INT 1
89716: PUSH
89717: FOR_DOWNTO
89718: IFFALSE 89881
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
89720: LD_EXP 132
89724: PUSH
89725: LD_VAR 0 6
89729: ARRAY
89730: PUSH
89731: LD_VAR 0 5
89735: ARRAY
89736: PUSH
89737: LD_INT 1
89739: ARRAY
89740: PPUSH
89741: LD_EXP 132
89745: PUSH
89746: LD_VAR 0 6
89750: ARRAY
89751: PUSH
89752: LD_VAR 0 5
89756: ARRAY
89757: PUSH
89758: LD_INT 2
89760: ARRAY
89761: PPUSH
89762: LD_VAR 0 2
89766: PPUSH
89767: LD_VAR 0 3
89771: PPUSH
89772: CALL_OW 298
89776: PUSH
89777: LD_INT 6
89779: LESS
89780: IFFALSE 89879
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89782: LD_EXP 132
89786: PUSH
89787: LD_VAR 0 6
89791: ARRAY
89792: PUSH
89793: LD_VAR 0 5
89797: ARRAY
89798: PUSH
89799: LD_INT 1
89801: ARRAY
89802: PPUSH
89803: LD_EXP 132
89807: PUSH
89808: LD_VAR 0 6
89812: ARRAY
89813: PUSH
89814: LD_VAR 0 5
89818: ARRAY
89819: PUSH
89820: LD_INT 2
89822: ARRAY
89823: PPUSH
89824: LD_VAR 0 1
89828: PPUSH
89829: CALL_OW 255
89833: PPUSH
89834: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89838: LD_ADDR_EXP 132
89842: PUSH
89843: LD_EXP 132
89847: PPUSH
89848: LD_VAR 0 6
89852: PPUSH
89853: LD_EXP 132
89857: PUSH
89858: LD_VAR 0 6
89862: ARRAY
89863: PPUSH
89864: LD_VAR 0 5
89868: PPUSH
89869: CALL_OW 3
89873: PPUSH
89874: CALL_OW 1
89878: ST_TO_ADDR
// end ; end ;
89879: GO 89717
89881: POP
89882: POP
// end ;
89883: LD_VAR 0 4
89887: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
89888: LD_INT 0
89890: PPUSH
89891: PPUSH
89892: PPUSH
89893: PPUSH
89894: PPUSH
89895: PPUSH
89896: PPUSH
89897: PPUSH
89898: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
89899: LD_VAR 0 1
89903: PPUSH
89904: CALL_OW 264
89908: PUSH
89909: LD_INT 81
89911: EQUAL
89912: NOT
89913: PUSH
89914: LD_VAR 0 1
89918: PUSH
89919: LD_EXP 131
89923: IN
89924: NOT
89925: OR
89926: IFFALSE 89930
// exit ;
89928: GO 90252
// index := GetElementIndex ( minersList , unit ) ;
89930: LD_ADDR_VAR 0 6
89934: PUSH
89935: LD_EXP 131
89939: PPUSH
89940: LD_VAR 0 1
89944: PPUSH
89945: CALL 33927 0 2
89949: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
89950: LD_ADDR_VAR 0 8
89954: PUSH
89955: LD_EXP 133
89959: PUSH
89960: LD_EXP 132
89964: PUSH
89965: LD_VAR 0 6
89969: ARRAY
89970: MINUS
89971: ST_TO_ADDR
// if not minesFreeAmount then
89972: LD_VAR 0 8
89976: NOT
89977: IFFALSE 89981
// exit ;
89979: GO 90252
// tmp := [ ] ;
89981: LD_ADDR_VAR 0 7
89985: PUSH
89986: EMPTY
89987: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
89988: LD_ADDR_VAR 0 5
89992: PUSH
89993: DOUBLE
89994: LD_INT 1
89996: DEC
89997: ST_TO_ADDR
89998: LD_VAR 0 8
90002: PUSH
90003: FOR_TO
90004: IFFALSE 90199
// begin _d := rand ( 0 , 5 ) ;
90006: LD_ADDR_VAR 0 11
90010: PUSH
90011: LD_INT 0
90013: PPUSH
90014: LD_INT 5
90016: PPUSH
90017: CALL_OW 12
90021: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
90022: LD_ADDR_VAR 0 12
90026: PUSH
90027: LD_INT 2
90029: PPUSH
90030: LD_INT 6
90032: PPUSH
90033: CALL_OW 12
90037: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
90038: LD_ADDR_VAR 0 9
90042: PUSH
90043: LD_VAR 0 2
90047: PPUSH
90048: LD_VAR 0 11
90052: PPUSH
90053: LD_VAR 0 12
90057: PPUSH
90058: CALL_OW 272
90062: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
90063: LD_ADDR_VAR 0 10
90067: PUSH
90068: LD_VAR 0 3
90072: PPUSH
90073: LD_VAR 0 11
90077: PPUSH
90078: LD_VAR 0 12
90082: PPUSH
90083: CALL_OW 273
90087: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
90088: LD_VAR 0 9
90092: PPUSH
90093: LD_VAR 0 10
90097: PPUSH
90098: CALL_OW 488
90102: PUSH
90103: LD_VAR 0 9
90107: PUSH
90108: LD_VAR 0 10
90112: PUSH
90113: EMPTY
90114: LIST
90115: LIST
90116: PUSH
90117: LD_VAR 0 7
90121: IN
90122: NOT
90123: AND
90124: PUSH
90125: LD_VAR 0 9
90129: PPUSH
90130: LD_VAR 0 10
90134: PPUSH
90135: CALL_OW 458
90139: NOT
90140: AND
90141: IFFALSE 90183
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
90143: LD_ADDR_VAR 0 7
90147: PUSH
90148: LD_VAR 0 7
90152: PPUSH
90153: LD_VAR 0 7
90157: PUSH
90158: LD_INT 1
90160: PLUS
90161: PPUSH
90162: LD_VAR 0 9
90166: PUSH
90167: LD_VAR 0 10
90171: PUSH
90172: EMPTY
90173: LIST
90174: LIST
90175: PPUSH
90176: CALL_OW 1
90180: ST_TO_ADDR
90181: GO 90197
// i := i - 1 ;
90183: LD_ADDR_VAR 0 5
90187: PUSH
90188: LD_VAR 0 5
90192: PUSH
90193: LD_INT 1
90195: MINUS
90196: ST_TO_ADDR
// end ;
90197: GO 90003
90199: POP
90200: POP
// for i in tmp do
90201: LD_ADDR_VAR 0 5
90205: PUSH
90206: LD_VAR 0 7
90210: PUSH
90211: FOR_IN
90212: IFFALSE 90250
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
90214: LD_VAR 0 1
90218: PPUSH
90219: LD_VAR 0 5
90223: PUSH
90224: LD_INT 1
90226: ARRAY
90227: PPUSH
90228: LD_VAR 0 5
90232: PUSH
90233: LD_INT 2
90235: ARRAY
90236: PPUSH
90237: CALL 89196 0 3
90241: NOT
90242: IFFALSE 90248
// exit ;
90244: POP
90245: POP
90246: GO 90252
90248: GO 90211
90250: POP
90251: POP
// end ;
90252: LD_VAR 0 4
90256: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
90257: LD_INT 0
90259: PPUSH
90260: PPUSH
90261: PPUSH
90262: PPUSH
90263: PPUSH
90264: PPUSH
90265: PPUSH
// if not GetClass ( unit ) = class_sniper then
90266: LD_VAR 0 1
90270: PPUSH
90271: CALL_OW 257
90275: PUSH
90276: LD_INT 5
90278: EQUAL
90279: NOT
90280: IFFALSE 90284
// exit ;
90282: GO 90672
// dist := 8 ;
90284: LD_ADDR_VAR 0 5
90288: PUSH
90289: LD_INT 8
90291: ST_TO_ADDR
// viewRange := 12 ;
90292: LD_ADDR_VAR 0 7
90296: PUSH
90297: LD_INT 12
90299: ST_TO_ADDR
// side := GetSide ( unit ) ;
90300: LD_ADDR_VAR 0 6
90304: PUSH
90305: LD_VAR 0 1
90309: PPUSH
90310: CALL_OW 255
90314: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
90315: LD_INT 61
90317: PPUSH
90318: LD_VAR 0 6
90322: PPUSH
90323: CALL_OW 321
90327: PUSH
90328: LD_INT 2
90330: EQUAL
90331: IFFALSE 90341
// viewRange := 16 ;
90333: LD_ADDR_VAR 0 7
90337: PUSH
90338: LD_INT 16
90340: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
90341: LD_VAR 0 1
90345: PPUSH
90346: LD_VAR 0 2
90350: PPUSH
90351: LD_VAR 0 3
90355: PPUSH
90356: CALL_OW 297
90360: PUSH
90361: LD_VAR 0 5
90365: GREATER
90366: IFFALSE 90445
// begin ComMoveXY ( unit , x , y ) ;
90368: LD_VAR 0 1
90372: PPUSH
90373: LD_VAR 0 2
90377: PPUSH
90378: LD_VAR 0 3
90382: PPUSH
90383: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90387: LD_INT 35
90389: PPUSH
90390: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
90394: LD_VAR 0 1
90398: PPUSH
90399: LD_VAR 0 2
90403: PPUSH
90404: LD_VAR 0 3
90408: PPUSH
90409: CALL 65282 0 3
90413: NOT
90414: IFFALSE 90418
// exit ;
90416: GO 90672
// until GetDistUnitXY ( unit , x , y ) < dist ;
90418: LD_VAR 0 1
90422: PPUSH
90423: LD_VAR 0 2
90427: PPUSH
90428: LD_VAR 0 3
90432: PPUSH
90433: CALL_OW 297
90437: PUSH
90438: LD_VAR 0 5
90442: LESS
90443: IFFALSE 90387
// end ; ComTurnXY ( unit , x , y ) ;
90445: LD_VAR 0 1
90449: PPUSH
90450: LD_VAR 0 2
90454: PPUSH
90455: LD_VAR 0 3
90459: PPUSH
90460: CALL_OW 118
// wait ( 5 ) ;
90464: LD_INT 5
90466: PPUSH
90467: CALL_OW 67
// _d := GetDir ( unit ) ;
90471: LD_ADDR_VAR 0 10
90475: PUSH
90476: LD_VAR 0 1
90480: PPUSH
90481: CALL_OW 254
90485: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
90486: LD_ADDR_VAR 0 8
90490: PUSH
90491: LD_VAR 0 1
90495: PPUSH
90496: CALL_OW 250
90500: PPUSH
90501: LD_VAR 0 10
90505: PPUSH
90506: LD_VAR 0 5
90510: PPUSH
90511: CALL_OW 272
90515: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
90516: LD_ADDR_VAR 0 9
90520: PUSH
90521: LD_VAR 0 1
90525: PPUSH
90526: CALL_OW 251
90530: PPUSH
90531: LD_VAR 0 10
90535: PPUSH
90536: LD_VAR 0 5
90540: PPUSH
90541: CALL_OW 273
90545: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
90546: LD_VAR 0 8
90550: PPUSH
90551: LD_VAR 0 9
90555: PPUSH
90556: CALL_OW 488
90560: NOT
90561: IFFALSE 90565
// exit ;
90563: GO 90672
// ComAnimCustom ( unit , 1 ) ;
90565: LD_VAR 0 1
90569: PPUSH
90570: LD_INT 1
90572: PPUSH
90573: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
90577: LD_VAR 0 8
90581: PPUSH
90582: LD_VAR 0 9
90586: PPUSH
90587: LD_VAR 0 6
90591: PPUSH
90592: LD_VAR 0 7
90596: PPUSH
90597: CALL_OW 330
// repeat wait ( 1 ) ;
90601: LD_INT 1
90603: PPUSH
90604: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
90608: LD_VAR 0 1
90612: PPUSH
90613: CALL_OW 316
90617: PUSH
90618: LD_VAR 0 1
90622: PPUSH
90623: CALL_OW 314
90627: OR
90628: PUSH
90629: LD_VAR 0 1
90633: PPUSH
90634: CALL_OW 302
90638: NOT
90639: OR
90640: PUSH
90641: LD_VAR 0 1
90645: PPUSH
90646: CALL_OW 301
90650: OR
90651: IFFALSE 90601
// RemoveSeeing ( _x , _y , side ) ;
90653: LD_VAR 0 8
90657: PPUSH
90658: LD_VAR 0 9
90662: PPUSH
90663: LD_VAR 0 6
90667: PPUSH
90668: CALL_OW 331
// end ; end_of_file
90672: LD_VAR 0 4
90676: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
90677: LD_VAR 0 1
90681: PPUSH
90682: LD_VAR 0 2
90686: PPUSH
90687: LD_VAR 0 3
90691: PPUSH
90692: LD_VAR 0 4
90696: PPUSH
90697: LD_VAR 0 5
90701: PPUSH
90702: LD_VAR 0 6
90706: PPUSH
90707: CALL 70554 0 6
// end ;
90711: PPOPN 6
90713: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
90714: LD_INT 0
90716: PPUSH
// begin if not units then
90717: LD_VAR 0 1
90721: NOT
90722: IFFALSE 90726
// exit ;
90724: GO 90726
// end ;
90726: PPOPN 7
90728: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
90729: CALL 70448 0 0
// end ;
90733: PPOPN 1
90735: END
