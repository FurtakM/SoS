// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10248 0 2
// PrepareArabian ;
  32: CALL 501 0 0
// PrepareRussian ;
  36: CALL 11039 0 0
// Action ;
  40: CALL 19230 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: PUSH
 430: LD_EXP 47
 434: PPUSH
 435: CALL_OW 302
 439: AND
 440: PUSH
 441: LD_EXP 6
 445: NOT
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 452: LD_STRING ACH_ROLF
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$2 trigger collectedOil >= 300 do
 460: LD_EXP 33
 464: PUSH
 465: LD_INT 300
 467: GREATEREQUAL
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_OIL ) ;
 473: LD_STRING ACH_OIL
 475: PPUSH
 476: CALL_OW 543
 480: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 481: LD_INT 52
 483: PPUSH
 484: CALL_OW 301
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 493: LD_STRING ACH_LENIN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
// uc_nation := 2 ;
 517: LD_ADDR_OWVAR 21
 521: PUSH
 522: LD_INT 2
 524: ST_TO_ADDR
// uc_side := 5 ;
 525: LD_ADDR_OWVAR 20
 529: PUSH
 530: LD_INT 5
 532: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 533: LD_ADDR_EXP 42
 537: PUSH
 538: LD_STRING Abdul
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: LD_STRING 
 546: PPUSH
 547: CALL 29448 0 3
 551: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 552: LD_ADDR_EXP 44
 556: PUSH
 557: LD_STRING Omar
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 29448 0 3
 570: ST_TO_ADDR
// uc_side := 2 ;
 571: LD_ADDR_OWVAR 20
 575: PUSH
 576: LD_INT 2
 578: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 579: LD_ADDR_EXP 34
 583: PUSH
 584: LD_STRING Heike
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_EXP 2
 597: PPUSH
 598: CALL 29448 0 3
 602: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 603: LD_ADDR_EXP 37
 607: PUSH
 608: LD_STRING Ibrahim
 610: PPUSH
 611: LD_EXP 1
 615: NOT
 616: PPUSH
 617: LD_EXP 2
 621: PPUSH
 622: CALL 29448 0 3
 626: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 627: LD_ADDR_EXP 35
 631: PUSH
 632: LD_STRING Givi
 634: PPUSH
 635: LD_EXP 1
 639: NOT
 640: PPUSH
 641: LD_EXP 2
 645: PPUSH
 646: CALL 29448 0 3
 650: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 651: LD_ADDR_EXP 38
 655: PUSH
 656: LD_STRING Kamil
 658: PPUSH
 659: LD_EXP 1
 663: NOT
 664: PPUSH
 665: LD_EXP 2
 669: PPUSH
 670: CALL 29448 0 3
 674: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 675: LD_ADDR_EXP 39
 679: PUSH
 680: LD_STRING Kaia
 682: PPUSH
 683: LD_EXP 1
 687: NOT
 688: PPUSH
 689: LD_EXP 2
 693: PPUSH
 694: CALL 29448 0 3
 698: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 699: LD_ADDR_EXP 40
 703: PUSH
 704: LD_STRING Sophia
 706: PPUSH
 707: LD_EXP 1
 711: NOT
 712: PPUSH
 713: LD_EXP 2
 717: PPUSH
 718: CALL 29448 0 3
 722: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 723: LD_ADDR_EXP 41
 727: PUSH
 728: LD_STRING Markov
 730: PPUSH
 731: LD_EXP 1
 735: NOT
 736: PPUSH
 737: LD_EXP 2
 741: PPUSH
 742: CALL 29448 0 3
 746: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 747: LD_ADDR_EXP 46
 751: PUSH
 752: LD_STRING Aviradze
 754: PPUSH
 755: LD_EXP 1
 759: NOT
 760: PPUSH
 761: LD_EXP 2
 765: PPUSH
 766: CALL 29448 0 3
 770: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 771: LD_ADDR_EXP 45
 775: PUSH
 776: LD_STRING Kurt
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL 29448 0 3
 794: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 795: LD_ADDR_EXP 36
 799: PUSH
 800: LD_STRING Mike
 802: PPUSH
 803: LD_EXP 1
 807: NOT
 808: PPUSH
 809: LD_EXP 2
 813: PPUSH
 814: CALL 29448 0 3
 818: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 819: LD_ADDR_EXP 43
 823: PUSH
 824: LD_STRING Olaf
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_STRING 
 832: PPUSH
 833: CALL 29448 0 3
 837: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING 05_others
 845: PPUSH
 846: CALL_OW 31
 850: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 851: LD_ADDR_EXP 50
 855: PUSH
 856: LD_STRING 05_apes
 858: PPUSH
 859: CALL_OW 31
 863: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_STRING 05_Radar
 871: PPUSH
 872: LD_EXP 1
 876: PPUSH
 877: CALL_OW 30
 881: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 882: LD_ADDR_VAR 0 6
 886: PUSH
 887: LD_STRING 05_RemoteControl
 889: PPUSH
 890: LD_EXP 1
 894: PPUSH
 895: CALL_OW 30
 899: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 900: LD_ADDR_VAR 0 7
 904: PUSH
 905: LD_STRING 05_DrugsTested
 907: PPUSH
 908: LD_EXP 1
 912: PPUSH
 913: CALL_OW 30
 917: ST_TO_ADDR
// if hasDrugs then
 918: LD_VAR 0 7
 922: IFFALSE 937
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 924: LD_INT 5
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 322
// if hasRadar then
 937: LD_VAR 0 5
 941: IFFALSE 956
// SetTech ( tech_radar , 2 , state_researched ) ;
 943: LD_INT 6
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: LD_INT 2
 951: PPUSH
 952: CALL_OW 322
// if hasRemote then
 956: LD_VAR 0 6
 960: IFFALSE 975
// SetTech ( tech_remCont , 2 , state_researched ) ;
 962: LD_INT 15
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: LD_INT 2
 970: PPUSH
 971: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 975: LD_ADDR_VAR 0 13
 979: PUSH
 980: LD_INT 5
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 517
 990: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 13
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PUSH
1010: FOR_TO
1011: IFFALSE 1088
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1013: LD_VAR 0 13
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PUSH
1022: LD_VAR 0 2
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 13
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: CALL_OW 351
1047: IFFALSE 1086
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1049: LD_VAR 0 13
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 13
1068: PUSH
1069: LD_INT 2
1071: ARRAY
1072: PUSH
1073: LD_VAR 0 2
1077: ARRAY
1078: PPUSH
1079: LD_INT 2
1081: PPUSH
1082: CALL_OW 244
1086: GO 1010
1088: POP
1089: POP
// base := [ ] ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// if debug then
1097: LD_EXP 1
1101: IFFALSE 1151
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1103: LD_ADDR_VAR 0 4
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 51
1113: PUSH
1114: LD_INT 77
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 3
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: ST_TO_ADDR
// end else
1149: GO 1167
// if buildingsFromPrev then
1151: LD_EXP 30
1155: IFFALSE 1167
// base := buildingsFromPrev ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_EXP 30
1166: ST_TO_ADDR
// if base then
1167: LD_VAR 0 4
1171: IFFALSE 1369
// for i := 1 to base do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_VAR 0 4
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1367
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_VAR 0 2
1205: PPUSH
1206: LD_VAR 0 4
1210: PUSH
1211: LD_VAR 0 2
1215: ARRAY
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_VAR 0 2
1230: ARRAY
1231: PUSH
1232: LD_INT 2
1234: ARRAY
1235: PUSH
1236: LD_INT 155
1238: PLUS
1239: PUSH
1240: LD_VAR 0 4
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 3
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: PLUS
1258: PUSH
1259: LD_VAR 0 4
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: PUSH
1270: LD_INT 4
1272: ARRAY
1273: PUSH
1274: LD_VAR 0 4
1278: PUSH
1279: LD_VAR 0 2
1283: ARRAY
1284: PUSH
1285: LD_INT 5
1287: ARRAY
1288: PUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 6
1302: ARRAY
1303: PUSH
1304: LD_VAR 0 4
1308: PUSH
1309: LD_VAR 0 2
1313: ARRAY
1314: PUSH
1315: LD_INT 7
1317: ARRAY
1318: PUSH
1319: LD_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: ARRAY
1329: PUSH
1330: LD_INT 8
1332: ARRAY
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: LD_VAR 0 2
1343: ARRAY
1344: PUSH
1345: LD_INT 9
1347: ARRAY
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 1
1364: ST_TO_ADDR
1365: GO 1188
1367: POP
1368: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1369: LD_ADDR_VAR 0 4
1373: PUSH
1374: LD_VAR 0 4
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: LD_INT 206
1384: PUSH
1385: LD_INT 80
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 2
1393: PUSH
1394: LD_INT 3
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 32
1419: PUSH
1420: LD_INT 221
1422: PUSH
1423: LD_INT 95
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 23
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 32
1457: PUSH
1458: LD_INT 223
1460: PUSH
1461: LD_INT 88
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 2
1469: PUSH
1470: LD_INT 3
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 24
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 32
1495: PUSH
1496: LD_INT 202
1498: PUSH
1499: LD_INT 64
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: LD_INT 25
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: LD_INT 203
1536: PUSH
1537: LD_INT 91
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 8
1571: PUSH
1572: LD_INT 217
1574: PUSH
1575: LD_INT 78
1577: PUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: LD_INT 10
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 220
1612: PUSH
1613: LD_INT 99
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 220
1650: PUSH
1651: LD_INT 103
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: LD_INT 0
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 216
1688: PUSH
1689: LD_INT 102
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 0
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 17
1723: PUSH
1724: LD_INT 203
1726: PUSH
1727: LD_INT 94
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 200
1764: PUSH
1765: LD_INT 88
1767: PUSH
1768: LD_INT 2
1770: PUSH
1771: LD_INT 2
1773: PUSH
1774: LD_INT 3
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 16
1799: PUSH
1800: LD_INT 199
1802: PUSH
1803: LD_INT 91
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 3
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 197
1840: PUSH
1841: LD_INT 81
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 26
1875: PUSH
1876: LD_INT 197
1878: PUSH
1879: LD_INT 78
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ADD
1927: ST_TO_ADDR
// if hasRadar then
1928: LD_VAR 0 5
1932: IFFALSE 1996
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1934: LD_ADDR_VAR 0 4
1938: PUSH
1939: LD_VAR 0 4
1943: PPUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_INT 1
1951: PLUS
1952: PPUSH
1953: LD_INT 20
1955: PUSH
1956: LD_INT 203
1958: PUSH
1959: LD_INT 87
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 3
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 1
1995: ST_TO_ADDR
// if hasRemote then
1996: LD_VAR 0 6
2000: IFFALSE 2064
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2002: LD_ADDR_VAR 0 4
2006: PUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_VAR 0 4
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 207
2026: PUSH
2027: LD_INT 95
2029: PUSH
2030: LD_INT 5
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: LD_INT 0
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 1
2063: ST_TO_ADDR
// for i in base do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_VAR 0 4
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2429
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2077: LD_VAR 0 2
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 2
2090: PUSH
2091: LD_INT 3
2093: ARRAY
2094: PPUSH
2095: CALL_OW 428
2099: IFFALSE 2103
// continue ;
2101: GO 2074
// uc_nation := i [ 5 ] ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: ARRAY
2116: ST_TO_ADDR
// InitBc ;
2117: CALL_OW 21
// bc_type := i [ 1 ] ;
2121: LD_ADDR_OWVAR 42
2125: PUSH
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2135: LD_ADDR_OWVAR 43
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 6
2147: ARRAY
2148: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2149: LD_ADDR_OWVAR 44
2153: PUSH
2154: LD_INT 9
2156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2157: LD_ADDR_OWVAR 45
2161: PUSH
2162: LD_INT 9
2164: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_INT 8
2176: EQUAL
2177: PUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_INT 5
2185: ARRAY
2186: PUSH
2187: LD_INT 2
2189: EQUAL
2190: AND
2191: PUSH
2192: LD_VAR 0 2
2196: PUSH
2197: LD_INT 8
2199: ARRAY
2200: NOT
2201: AND
2202: IFFALSE 2236
// begin bc_kind1 := b_lab_weapon ;
2204: LD_ADDR_OWVAR 44
2208: PUSH
2209: LD_INT 10
2211: ST_TO_ADDR
// if hasRadar then
2212: LD_VAR 0 5
2216: IFFALSE 2228
// bc_kind2 := b_lab_opto else
2218: LD_ADDR_OWVAR 45
2222: PUSH
2223: LD_INT 15
2225: ST_TO_ADDR
2226: GO 2236
// bc_kind2 := b_lab_basic ;
2228: LD_ADDR_OWVAR 45
2232: PUSH
2233: LD_INT 9
2235: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2236: LD_VAR 0 2
2240: PUSH
2241: LD_INT 1
2243: ARRAY
2244: PUSH
2245: LD_INT 7
2247: PUSH
2248: LD_INT 8
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: IN
2255: PUSH
2256: LD_VAR 0 2
2260: PUSH
2261: LD_INT 7
2263: ARRAY
2264: AND
2265: IFFALSE 2281
// bc_kind1 := i [ 7 ] ;
2267: LD_ADDR_OWVAR 44
2271: PUSH
2272: LD_VAR 0 2
2276: PUSH
2277: LD_INT 7
2279: ARRAY
2280: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2281: LD_VAR 0 2
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PUSH
2290: LD_INT 8
2292: EQUAL
2293: PUSH
2294: LD_VAR 0 2
2298: PUSH
2299: LD_INT 8
2301: ARRAY
2302: AND
2303: IFFALSE 2319
// bc_kind1 := i [ 8 ] ;
2305: LD_ADDR_OWVAR 44
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_INT 8
2317: ARRAY
2318: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 2
2331: ARRAY
2332: PPUSH
2333: LD_VAR 0 2
2337: PUSH
2338: LD_INT 3
2340: ARRAY
2341: PPUSH
2342: LD_VAR 0 2
2346: PUSH
2347: LD_INT 4
2349: ARRAY
2350: PPUSH
2351: CALL_OW 47
2355: ST_TO_ADDR
// if i [ 9 ] then
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 9
2363: ARRAY
2364: IFFALSE 2384
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2366: LD_VAR 0 3
2370: PPUSH
2371: LD_VAR 0 2
2375: PUSH
2376: LD_INT 9
2378: ARRAY
2379: PPUSH
2380: CALL_OW 431
// if i [ 1 ] = b_bunker then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PUSH
2393: LD_INT 32
2395: EQUAL
2396: IFFALSE 2427
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2398: LD_ADDR_VAR 0 11
2402: PUSH
2403: LD_VAR 0 11
2407: PPUSH
2408: LD_VAR 0 11
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: PPUSH
2417: LD_VAR 0 3
2421: PPUSH
2422: CALL_OW 1
2426: ST_TO_ADDR
// end ;
2427: GO 2074
2429: POP
2430: POP
// depot := HexInfo ( 206 , 80 ) ;
2431: LD_ADDR_VAR 0 9
2435: PUSH
2436: LD_INT 206
2438: PPUSH
2439: LD_INT 80
2441: PPUSH
2442: CALL_OW 428
2446: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2447: LD_ADDR_VAR 0 8
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 30
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 69
2480: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_INT 22
2488: PUSH
2489: LD_INT 2
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 30
2501: PUSH
2502: LD_INT 6
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 30
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 30
2521: PUSH
2522: LD_INT 8
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PPUSH
2539: CALL_OW 69
2543: ST_TO_ADDR
// arDepot := depot ;
2544: LD_ADDR_EXP 48
2548: PUSH
2549: LD_VAR 0 9
2553: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2554: LD_VAR 0 9
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 360
2569: PUSH
2570: LD_INT 260
2572: PUSH
2573: LD_INT 190
2575: PUSH
2576: LD_INT 150
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: CALL_OW 274
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: LD_INT 200
2610: PUSH
2611: LD_INT 170
2613: PUSH
2614: LD_INT 150
2616: PUSH
2617: LD_INT 120
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PPUSH
2632: CALL_OW 277
// uc_nation := 2 ;
2636: LD_ADDR_OWVAR 21
2640: PUSH
2641: LD_INT 2
2643: ST_TO_ADDR
// uc_side := 2 ;
2644: LD_ADDR_OWVAR 20
2648: PUSH
2649: LD_INT 2
2651: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2652: LD_INT 13
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 27
2663: PPUSH
2664: LD_INT 33
2666: PPUSH
2667: CALL 34288 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2671: CALL_OW 45
2675: PPUSH
2676: LD_INT 190
2678: PPUSH
2679: LD_INT 64
2681: PPUSH
2682: LD_INT 5
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL 69290 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2692: LD_INT 13
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 1
2700: PPUSH
2701: LD_INT 25
2703: PPUSH
2704: LD_INT 22
2706: PPUSH
2707: CALL 34288 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2711: CALL_OW 45
2715: PPUSH
2716: LD_INT 188
2718: PPUSH
2719: LD_INT 67
2721: PPUSH
2722: LD_INT 5
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL 69290 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2732: LD_EXP 34
2736: PPUSH
2737: LD_INT 213
2739: PPUSH
2740: LD_INT 87
2742: PPUSH
2743: LD_INT 0
2745: PPUSH
2746: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2750: LD_EXP 34
2754: PPUSH
2755: LD_INT 214
2757: PPUSH
2758: LD_INT 87
2760: PPUSH
2761: CALL_OW 118
// if Kaia then
2765: LD_EXP 39
2769: IFFALSE 2804
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2771: LD_EXP 39
2775: PPUSH
2776: LD_INT 213
2778: PPUSH
2779: LD_INT 85
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2789: LD_EXP 39
2793: PPUSH
2794: LD_INT 215
2796: PPUSH
2797: LD_INT 87
2799: PPUSH
2800: CALL_OW 118
// end ; if Olaf and Kaia then
2804: LD_EXP 43
2808: PUSH
2809: LD_EXP 39
2813: AND
2814: IFFALSE 2851
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2816: LD_EXP 43
2820: PPUSH
2821: LD_INT 215
2823: PPUSH
2824: LD_INT 87
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2834: LD_EXP 43
2838: PPUSH
2839: LD_INT 213
2841: PPUSH
2842: LD_INT 85
2844: PPUSH
2845: CALL_OW 118
// end else
2849: GO 2871
// if Olaf then
2851: LD_EXP 43
2855: IFFALSE 2871
// PlaceHumanInUnit ( Olaf , factory ) ;
2857: LD_EXP 43
2861: PPUSH
2862: LD_VAR 0 8
2866: PPUSH
2867: CALL_OW 52
// if Givi then
2871: LD_EXP 35
2875: IFFALSE 2956
// begin if Kaia and Olaf then
2877: LD_EXP 39
2881: PUSH
2882: LD_EXP 43
2886: AND
2887: IFFALSE 2924
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2889: LD_EXP 35
2893: PPUSH
2894: LD_INT 247
2896: PPUSH
2897: LD_INT 117
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 248
2914: PPUSH
2915: LD_INT 118
2917: PPUSH
2918: CALL_OW 118
// end else
2922: GO 2956
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2924: LD_EXP 35
2928: PPUSH
2929: LD_INT 216
2931: PPUSH
2932: LD_INT 88
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_EXP 34
2951: PPUSH
2952: CALL_OW 119
// end ; end ; if Kurt then
2956: LD_EXP 45
2960: IFFALSE 2980
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2962: LD_EXP 45
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Mike then
2980: LD_EXP 36
2984: IFFALSE 3004
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2986: LD_EXP 36
2990: PPUSH
2991: LD_VAR 0 11
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 52
// if Kamil then
3004: LD_EXP 38
3008: IFFALSE 3070
// begin if Kaia and Olaf then
3010: LD_EXP 39
3014: PUSH
3015: LD_EXP 43
3019: AND
3020: IFFALSE 3038
// PlaceHumanInUnit ( Kamil , depot ) else
3022: LD_EXP 38
3026: PPUSH
3027: LD_VAR 0 9
3031: PPUSH
3032: CALL_OW 52
3036: GO 3070
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3038: LD_EXP 38
3042: PPUSH
3043: LD_INT 213
3045: PPUSH
3046: LD_INT 87
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3056: LD_EXP 38
3060: PPUSH
3061: LD_EXP 34
3065: PPUSH
3066: CALL_OW 119
// end ; end ; if Sophia then
3070: LD_EXP 40
3074: IFFALSE 3090
// PlaceHumanInUnit ( Sophia , depot ) ;
3076: LD_EXP 40
3080: PPUSH
3081: LD_VAR 0 9
3085: PPUSH
3086: CALL_OW 52
// if Aviradze then
3090: LD_EXP 46
3094: IFFALSE 3143
// if lab then
3096: LD_VAR 0 10
3100: IFFALSE 3122
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3102: LD_EXP 46
3106: PPUSH
3107: LD_VAR 0 10
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: CALL_OW 52
3120: GO 3143
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3122: LD_EXP 46
3126: PPUSH
3127: LD_INT 210
3129: PPUSH
3130: LD_INT 87
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 50
// if Ibrahim then
3143: LD_EXP 37
3147: IFFALSE 3196
// if lab then
3149: LD_VAR 0 10
3153: IFFALSE 3175
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3155: LD_EXP 37
3159: PPUSH
3160: LD_VAR 0 10
3164: PUSH
3165: LD_INT 1
3167: ARRAY
3168: PPUSH
3169: CALL_OW 52
3173: GO 3196
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3175: LD_EXP 37
3179: PPUSH
3180: LD_INT 210
3182: PPUSH
3183: LD_INT 87
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 0
3191: PPUSH
3192: CALL_OW 50
// if Markov then
3196: LD_EXP 41
3200: IFFALSE 3249
// if factory then
3202: LD_VAR 0 8
3206: IFFALSE 3228
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3208: LD_EXP 41
3212: PPUSH
3213: LD_VAR 0 8
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: CALL_OW 52
3226: GO 3249
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3228: LD_EXP 41
3232: PPUSH
3233: LD_INT 210
3235: PPUSH
3236: LD_INT 87
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 0
3244: PPUSH
3245: CALL_OW 50
// if heikeSecondSquad then
3249: LD_EXP 49
3253: IFFALSE 3293
// for i in heikeSecondSquad do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 49
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3291
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3268: LD_VAR 0 2
3272: PPUSH
3273: LD_INT 190
3275: PPUSH
3276: LD_INT 65
3278: PPUSH
3279: LD_INT 5
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 50
3289: GO 3265
3291: POP
3292: POP
// if heikeApes then
3293: LD_EXP 50
3297: IFFALSE 3337
// for i in heikeApes do
3299: LD_ADDR_VAR 0 2
3303: PUSH
3304: LD_EXP 50
3308: PUSH
3309: FOR_IN
3310: IFFALSE 3335
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_INT 190
3319: PPUSH
3320: LD_INT 70
3322: PPUSH
3323: LD_INT 5
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 50
3333: GO 3309
3335: POP
3336: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3337: LD_ADDR_VAR 0 13
3341: PUSH
3342: LD_STRING 05_Vehicles
3344: PPUSH
3345: EMPTY
3346: PPUSH
3347: CALL_OW 30
3351: ST_TO_ADDR
// if tmp then
3352: LD_VAR 0 13
3356: IFFALSE 3526
// begin limiter := 10 ;
3358: LD_ADDR_VAR 0 14
3362: PUSH
3363: LD_INT 10
3365: ST_TO_ADDR
// for i in tmp do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: LD_VAR 0 13
3375: PUSH
3376: FOR_IN
3377: IFFALSE 3524
// begin limiter := Dec ( limiter ) ;
3379: LD_ADDR_VAR 0 14
3383: PUSH
3384: LD_VAR 0 14
3388: PPUSH
3389: CALL 68533 0 1
3393: ST_TO_ADDR
// if limiter = 0 then
3394: LD_VAR 0 14
3398: PUSH
3399: LD_INT 0
3401: EQUAL
3402: IFFALSE 3406
// break ;
3404: GO 3524
// uc_side := 2 ;
3406: LD_ADDR_OWVAR 20
3410: PUSH
3411: LD_INT 2
3413: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3414: LD_ADDR_OWVAR 21
3418: PUSH
3419: LD_VAR 0 2
3423: PUSH
3424: LD_INT 5
3426: ARRAY
3427: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3428: LD_VAR 0 2
3432: PUSH
3433: LD_INT 1
3435: ARRAY
3436: PPUSH
3437: LD_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: ARRAY
3445: PPUSH
3446: LD_VAR 0 2
3450: PUSH
3451: LD_INT 3
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 2
3459: PUSH
3460: LD_INT 4
3462: ARRAY
3463: PPUSH
3464: LD_INT 20
3466: PPUSH
3467: CALL 34288 0 5
// veh := CreateVehicle ;
3471: LD_ADDR_VAR 0 12
3475: PUSH
3476: CALL_OW 45
3480: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3481: LD_VAR 0 12
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: LD_INT 5
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 252
3508: PPUSH
3509: LD_INT 111
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 50
// end ;
3522: GO 3376
3524: POP
3525: POP
// end ; end ;
3526: LD_VAR 0 1
3530: RET
// export function PrepareRolfSquad ; var i , j ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
3535: PPUSH
// uc_side := 8 ;
3536: LD_ADDR_OWVAR 20
3540: PUSH
3541: LD_INT 8
3543: ST_TO_ADDR
// uc_nation := 2 ;
3544: LD_ADDR_OWVAR 21
3548: PUSH
3549: LD_INT 2
3551: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3552: LD_ADDR_EXP 47
3556: PUSH
3557: LD_STRING Bergkamp
3559: PPUSH
3560: CALL_OW 25
3564: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3565: LD_ADDR_EXP 51
3569: PUSH
3570: LD_EXP 47
3574: PUSH
3575: EMPTY
3576: LIST
3577: ST_TO_ADDR
// for i := 1 to 4 do
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: DOUBLE
3584: LD_INT 1
3586: DEC
3587: ST_TO_ADDR
3588: LD_INT 4
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3672
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 5
3606: PUSH
3607: LD_INT 2
3609: PUSH
3610: LD_INT 3
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: FOR_TO
3629: IFFALSE 3668
// begin PrepareHuman ( false , i , 5 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3646: LD_ADDR_EXP 51
3650: PUSH
3651: LD_EXP 51
3655: PPUSH
3656: CALL_OW 44
3660: PPUSH
3661: CALL 67150 0 2
3665: ST_TO_ADDR
// end ;
3666: GO 3628
3668: POP
3669: POP
// end ;
3670: GO 3591
3672: POP
3673: POP
// if HexInfo ( 5 , 3 ) then
3674: LD_INT 5
3676: PPUSH
3677: LD_INT 3
3679: PPUSH
3680: CALL_OW 428
3684: IFFALSE 3701
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3686: LD_INT 5
3688: PPUSH
3689: LD_INT 3
3691: PPUSH
3692: CALL_OW 428
3696: PPUSH
3697: CALL_OW 64
// for i in rolfSquad do
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: LD_EXP 51
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3848
// begin uc_direction := 2 ;
3714: LD_ADDR_OWVAR 24
3718: PUSH
3719: LD_INT 2
3721: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3722: LD_VAR 0 2
3726: PPUSH
3727: CALL_OW 257
3731: PUSH
3732: LD_INT 3
3734: EQUAL
3735: IFFALSE 3809
// begin uc_side := 8 ;
3737: LD_ADDR_OWVAR 20
3741: PUSH
3742: LD_INT 8
3744: ST_TO_ADDR
// uc_nation := 2 ;
3745: LD_ADDR_OWVAR 21
3749: PUSH
3750: LD_INT 2
3752: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3753: LD_INT 13
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 27
3764: PPUSH
3765: LD_INT 88
3767: PPUSH
3768: CALL 34288 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3772: CALL_OW 45
3776: PPUSH
3777: LD_INT 11
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_INT 5
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 428
3802: PPUSH
3803: CALL_OW 52
// end else
3807: GO 3824
// PlaceUnitArea ( i , northSpawn , false ) ;
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_INT 11
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3824: LD_VAR 0 2
3828: PPUSH
3829: LD_INT 29
3831: PPUSH
3832: LD_INT 10
3834: PPUSH
3835: CALL_OW 111
// wait ( 0 0$2 ) ;
3839: LD_INT 70
3841: PPUSH
3842: CALL_OW 67
// end ;
3846: GO 3711
3848: POP
3849: POP
// wait ( 0 0$5 ) ;
3850: LD_INT 175
3852: PPUSH
3853: CALL_OW 67
// end ;
3857: LD_VAR 0 1
3861: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3862: LD_INT 0
3864: PPUSH
3865: PPUSH
3866: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3867: LD_EXP 47
3871: PPUSH
3872: LD_INT 94
3874: PPUSH
3875: LD_INT 63
3877: PPUSH
3878: CALL_OW 428
3882: PPUSH
3883: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 4
3894: PUSH
3895: LD_INT 82
3897: PUSH
3898: LD_INT 64
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 31
3912: PUSH
3913: LD_INT 73
3915: PUSH
3916: LD_INT 58
3918: PUSH
3919: LD_INT 0
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: ST_TO_ADDR
// for i in tmp do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: LD_VAR 0 3
3941: PUSH
3942: FOR_IN
3943: IFFALSE 4007
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3945: LD_EXP 51
3949: PPUSH
3950: LD_INT 25
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PPUSH
3960: CALL_OW 72
3964: PPUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 2
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 3
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 2
3996: PUSH
3997: LD_INT 4
3999: ARRAY
4000: PPUSH
4001: CALL_OW 205
4005: GO 3942
4007: POP
4008: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4009: LD_EXP 51
4013: PUSH
4014: LD_INT 2
4016: ARRAY
4017: PPUSH
4018: LD_INT 63
4020: PPUSH
4021: LD_INT 42
4023: PPUSH
4024: CALL_OW 428
4028: PPUSH
4029: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4033: LD_EXP 51
4037: PUSH
4038: LD_INT 3
4040: ARRAY
4041: PPUSH
4042: LD_INT 94
4044: PPUSH
4045: LD_INT 63
4047: PPUSH
4048: CALL_OW 428
4052: PPUSH
4053: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4057: LD_INT 35
4059: PPUSH
4060: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4064: LD_EXP 51
4068: PPUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: LD_INT 60
4084: PUSH
4085: EMPTY
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 72
4100: IFFALSE 4057
// rolfScriptBase := true ;
4102: LD_ADDR_EXP 9
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// end ;
4110: LD_VAR 0 1
4114: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4115: LD_EXP 9
4119: PUSH
4120: LD_EXP 47
4124: PPUSH
4125: CALL_OW 255
4129: PUSH
4130: LD_INT 8
4132: EQUAL
4133: AND
4134: IFFALSE 5141
4136: GO 4138
4138: DISABLE
4139: LD_INT 0
4141: PPUSH
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
4146: PPUSH
4147: PPUSH
4148: PPUSH
4149: PPUSH
4150: PPUSH
// begin enable ;
4151: ENABLE
// if not rolfSquad then
4152: LD_EXP 51
4156: NOT
4157: IFFALSE 4161
// exit ;
4159: GO 5141
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_INT 12
4168: PPUSH
4169: LD_INT 81
4171: PUSH
4172: LD_INT 8
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4184: LD_ADDR_VAR 0 5
4188: PUSH
4189: LD_EXP 51
4193: PPUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 72
4208: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4209: LD_ADDR_VAR 0 6
4213: PUSH
4214: LD_EXP 51
4218: PPUSH
4219: LD_INT 25
4221: PUSH
4222: LD_INT 2
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 72
4233: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4234: LD_ADDR_VAR 0 8
4238: PUSH
4239: LD_EXP 51
4243: PPUSH
4244: LD_INT 25
4246: PUSH
4247: LD_INT 3
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4259: LD_ADDR_VAR 0 7
4263: PUSH
4264: LD_EXP 51
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: ST_TO_ADDR
// if sol then
4284: LD_VAR 0 5
4288: IFFALSE 4586
// for i in sol union Rolf do
4290: LD_ADDR_VAR 0 1
4294: PUSH
4295: LD_VAR 0 5
4299: PUSH
4300: LD_EXP 47
4304: UNION
4305: PUSH
4306: FOR_IN
4307: IFFALSE 4584
// if not IsInUnit ( i ) and not HasTask ( i ) then
4309: LD_VAR 0 1
4313: PPUSH
4314: CALL_OW 310
4318: NOT
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL_OW 314
4329: NOT
4330: AND
4331: IFFALSE 4582
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4333: LD_VAR 0 1
4337: PPUSH
4338: CALL_OW 256
4342: PUSH
4343: LD_INT 500
4345: LESS
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: LD_INT 80
4354: PPUSH
4355: LD_INT 49
4357: PPUSH
4358: CALL_OW 297
4362: PUSH
4363: LD_INT 6
4365: GREATER
4366: AND
4367: IFFALSE 4386
// begin ComMoveXY ( i , 80 , 49 ) ;
4369: LD_VAR 0 1
4373: PPUSH
4374: LD_INT 80
4376: PPUSH
4377: LD_INT 49
4379: PPUSH
4380: CALL_OW 111
// continue ;
4384: GO 4306
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4386: LD_ADDR_VAR 0 4
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 8
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 50
4403: PUSH
4404: EMPTY
4405: LIST
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: LD_INT 30
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 30
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 30
4432: PUSH
4433: LD_INT 32
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 31
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: ST_TO_ADDR
// if tmp then
4467: LD_VAR 0 4
4471: IFFALSE 4582
// begin for b in tmp do
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: LD_VAR 0 4
4482: PUSH
4483: FOR_IN
4484: IFFALSE 4580
// begin case GetBType ( b ) of b_armoury , b_barracks :
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 266
4495: PUSH
4496: LD_INT 4
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4510
4502: LD_INT 5
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4521
4510: POP
// p := 6 ; b_breastwork , b_bunker :
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 6
4518: ST_TO_ADDR
4519: GO 4547
4521: LD_INT 31
4523: DOUBLE
4524: EQUAL
4525: IFTRUE 4535
4527: LD_INT 32
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4546
4535: POP
// p := 1 ; end ;
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
4544: GO 4547
4546: POP
// if UnitsInside ( b ) < p then
4547: LD_VAR 0 2
4551: PPUSH
4552: CALL_OW 313
4556: PUSH
4557: LD_VAR 0 3
4561: LESS
4562: IFFALSE 4578
// ComEnterUnit ( i , b ) ;
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_VAR 0 2
4573: PPUSH
4574: CALL_OW 120
// end ;
4578: GO 4483
4580: POP
4581: POP
// end ; end ;
4582: GO 4306
4584: POP
4585: POP
// if sci then
4586: LD_VAR 0 7
4590: IFFALSE 4645
// for i in sci do
4592: LD_ADDR_VAR 0 1
4596: PUSH
4597: LD_VAR 0 7
4601: PUSH
4602: FOR_IN
4603: IFFALSE 4643
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4605: LD_VAR 0 1
4609: PPUSH
4610: LD_INT 80
4612: PPUSH
4613: LD_INT 49
4615: PPUSH
4616: CALL_OW 297
4620: PUSH
4621: LD_INT 9
4623: GREATER
4624: IFFALSE 4641
// ComMoveXY ( i , 80 , 49 ) ;
4626: LD_VAR 0 1
4630: PPUSH
4631: LD_INT 80
4633: PPUSH
4634: LD_INT 49
4636: PPUSH
4637: CALL_OW 111
// end ;
4641: GO 4602
4643: POP
4644: POP
// if mech then
4645: LD_VAR 0 8
4649: IFFALSE 4863
// for i in mech do
4651: LD_ADDR_VAR 0 1
4655: PUSH
4656: LD_VAR 0 8
4660: PUSH
4661: FOR_IN
4662: IFFALSE 4861
// begin hasVehicle := IsInUnit ( i ) ;
4664: LD_ADDR_VAR 0 10
4668: PUSH
4669: LD_VAR 0 1
4673: PPUSH
4674: CALL_OW 310
4678: ST_TO_ADDR
// if enemyInBase then
4679: LD_VAR 0 9
4683: IFFALSE 4779
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4685: LD_VAR 0 10
4689: PUSH
4690: LD_VAR 0 10
4694: PPUSH
4695: CALL_OW 256
4699: PUSH
4700: LD_INT 500
4702: GREATER
4703: AND
4704: IFFALSE 4732
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4706: LD_VAR 0 10
4710: PPUSH
4711: LD_VAR 0 9
4715: PPUSH
4716: LD_VAR 0 10
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 115
4730: GO 4777
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4732: LD_VAR 0 10
4736: PPUSH
4737: LD_INT 86
4739: PPUSH
4740: LD_INT 49
4742: PPUSH
4743: CALL_OW 297
4747: PUSH
4748: LD_INT 8
4750: GREATER
4751: IFFALSE 4777
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4753: LD_VAR 0 10
4757: PPUSH
4758: LD_INT 86
4760: PPUSH
4761: LD_INT 49
4763: PPUSH
4764: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL 68970 0 1
// end end else
4777: GO 4859
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4779: LD_VAR 0 1
4783: PPUSH
4784: LD_INT 86
4786: PPUSH
4787: LD_INT 49
4789: PPUSH
4790: CALL_OW 297
4794: PUSH
4795: LD_INT 8
4797: GREATER
4798: IFFALSE 4817
// ComMoveXY ( i , 86 , 49 ) else
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 86
4807: PPUSH
4808: LD_INT 49
4810: PPUSH
4811: CALL_OW 111
4815: GO 4859
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4817: LD_VAR 0 10
4821: PUSH
4822: LD_VAR 0 10
4826: PPUSH
4827: CALL_OW 256
4831: PUSH
4832: LD_INT 1000
4834: LESS
4835: AND
4836: IFFALSE 4859
// begin SetFuel ( hasVehicle , 100 ) ;
4838: LD_VAR 0 10
4842: PPUSH
4843: LD_INT 100
4845: PPUSH
4846: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: CALL 68850 0 1
// end ; end ; end ;
4859: GO 4661
4861: POP
4862: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4863: LD_ADDR_VAR 0 4
4867: PUSH
4868: LD_INT 12
4870: PPUSH
4871: LD_INT 3
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: LD_INT 1000
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 70
4906: ST_TO_ADDR
// if tmp and eng then
4907: LD_VAR 0 4
4911: PUSH
4912: LD_VAR 0 6
4916: AND
4917: IFFALSE 5023
// begin for i in eng do
4919: LD_ADDR_VAR 0 1
4923: PUSH
4924: LD_VAR 0 6
4928: PUSH
4929: FOR_IN
4930: IFFALSE 5021
// if IsInUnit ( i ) then
4932: LD_VAR 0 1
4936: PPUSH
4937: CALL_OW 310
4941: IFFALSE 4954
// ComExitBuilding ( i ) else
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 122
4952: GO 5019
// if GetLives ( i ) = 1000 then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 256
4963: PUSH
4964: LD_INT 1000
4966: EQUAL
4967: IFFALSE 4989
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_VAR 0 4
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 130
4987: GO 5019
// if GetLives ( i ) < 700 then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 256
4998: PUSH
4999: LD_INT 700
5001: LESS
5002: IFFALSE 5019
// ComMoveXY ( i , 80 , 49 ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_INT 80
5011: PPUSH
5012: LD_INT 49
5014: PPUSH
5015: CALL_OW 111
5019: GO 4929
5021: POP
5022: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5023: LD_VAR 0 4
5027: NOT
5028: PUSH
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 3
5036: PUSH
5037: LD_INT 54
5039: PUSH
5040: EMPTY
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 72
5051: AND
5052: IFFALSE 5141
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5054: LD_ADDR_VAR 0 1
5058: PUSH
5059: LD_VAR 0 6
5063: PPUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 54
5069: PUSH
5070: EMPTY
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PPUSH
5077: CALL_OW 72
5081: PUSH
5082: FOR_IN
5083: IFFALSE 5139
// if GetLives ( i ) < 1000 then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 256
5094: PUSH
5095: LD_INT 1000
5097: LESS
5098: IFFALSE 5117
// ComMoveXY ( i , 80 , 49 ) else
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 80
5107: PPUSH
5108: LD_INT 49
5110: PPUSH
5111: CALL_OW 111
5115: GO 5137
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5117: LD_VAR 0 1
5121: PPUSH
5122: LD_INT 86
5124: PPUSH
5125: LD_INT 54
5127: PPUSH
5128: CALL_OW 428
5132: PPUSH
5133: CALL_OW 120
5137: GO 5082
5139: POP
5140: POP
// end ;
5141: PPOPN 10
5143: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
5149: PPUSH
// uc_side := 5 ;
5150: LD_ADDR_OWVAR 20
5154: PUSH
5155: LD_INT 5
5157: ST_TO_ADDR
// uc_nation := 2 ;
5158: LD_ADDR_OWVAR 21
5162: PUSH
5163: LD_INT 2
5165: ST_TO_ADDR
// omarSquad := [ ] ;
5166: LD_ADDR_EXP 52
5170: PUSH
5171: EMPTY
5172: ST_TO_ADDR
// for i := 1 to 4 do
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: DOUBLE
5179: LD_INT 1
5181: DEC
5182: ST_TO_ADDR
5183: LD_INT 4
5185: PUSH
5186: FOR_TO
5187: IFFALSE 5310
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 6
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_EXP 21
5212: PLUS
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: PUSH
5229: FOR_TO
5230: IFFALSE 5306
// begin PrepareHuman ( false , i , 5 ) ;
5232: LD_INT 0
5234: PPUSH
5235: LD_VAR 0 2
5239: PPUSH
5240: LD_INT 5
5242: PPUSH
5243: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5247: LD_ADDR_EXP 52
5251: PUSH
5252: LD_EXP 52
5256: PPUSH
5257: CALL_OW 44
5261: PPUSH
5262: CALL 67150 0 2
5266: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 1
5274: EQUAL
5275: PUSH
5276: LD_INT 50
5278: PPUSH
5279: CALL_OW 13
5283: AND
5284: IFFALSE 5304
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5286: LD_EXP 52
5290: PUSH
5291: LD_EXP 52
5295: ARRAY
5296: PPUSH
5297: LD_INT 8
5299: PPUSH
5300: CALL_OW 336
// end ;
5304: GO 5229
5306: POP
5307: POP
// end ;
5308: GO 5186
5310: POP
5311: POP
// if HexInfo ( 340 , 205 ) then
5312: LD_INT 340
5314: PPUSH
5315: LD_INT 205
5317: PPUSH
5318: CALL_OW 428
5322: IFFALSE 5339
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5324: LD_INT 340
5326: PPUSH
5327: LD_INT 205
5329: PPUSH
5330: CALL_OW 428
5334: PPUSH
5335: CALL_OW 64
// p := 0 ;
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_INT 0
5346: ST_TO_ADDR
// for i in omarSquad do
5347: LD_ADDR_VAR 0 2
5351: PUSH
5352: LD_EXP 52
5356: PUSH
5357: FOR_IN
5358: IFFALSE 5559
// begin uc_direction := 4 ;
5360: LD_ADDR_OWVAR 24
5364: PUSH
5365: LD_INT 4
5367: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5368: LD_VAR 0 2
5372: PPUSH
5373: CALL_OW 257
5377: PUSH
5378: LD_INT 3
5380: EQUAL
5381: PUSH
5382: LD_VAR 0 4
5386: PUSH
5387: LD_INT 2
5389: LESS
5390: AND
5391: IFFALSE 5520
// begin p := p + 1 ;
5393: LD_ADDR_VAR 0 4
5397: PUSH
5398: LD_VAR 0 4
5402: PUSH
5403: LD_INT 1
5405: PLUS
5406: ST_TO_ADDR
// uc_side := 5 ;
5407: LD_ADDR_OWVAR 20
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5415: LD_INT 0
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 12
5425: IFFALSE 5456
// begin uc_nation := 2 ;
5427: LD_ADDR_OWVAR 21
5431: PUSH
5432: LD_INT 2
5434: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5435: LD_INT 13
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: LD_INT 27
5446: PPUSH
5447: LD_INT 88
5449: PPUSH
5450: CALL 34288 0 5
// end else
5454: GO 5483
// begin uc_nation := 3 ;
5456: LD_ADDR_OWVAR 21
5460: PUSH
5461: LD_INT 3
5463: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5464: LD_INT 22
5466: PPUSH
5467: LD_INT 1
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 45
5475: PPUSH
5476: LD_INT 88
5478: PPUSH
5479: CALL 34288 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5483: CALL_OW 45
5487: PPUSH
5488: LD_INT 13
5490: PPUSH
5491: LD_INT 0
5493: PPUSH
5494: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5498: LD_VAR 0 2
5502: PPUSH
5503: LD_INT 340
5505: PPUSH
5506: LD_INT 205
5508: PPUSH
5509: CALL_OW 428
5513: PPUSH
5514: CALL_OW 52
// end else
5518: GO 5535
// PlaceUnitArea ( i , southSpawn , false ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 13
5527: PPUSH
5528: LD_INT 0
5530: PPUSH
5531: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5535: LD_VAR 0 2
5539: PPUSH
5540: LD_INT 333
5542: PPUSH
5543: LD_INT 210
5545: PPUSH
5546: CALL_OW 111
// wait ( 0 0$2 ) ;
5550: LD_INT 70
5552: PPUSH
5553: CALL_OW 67
// end ;
5557: GO 5357
5559: POP
5560: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_INT 340
5568: PPUSH
5569: LD_INT 205
5571: PPUSH
5572: LD_INT 0
5574: PPUSH
5575: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5579: LD_EXP 44
5583: PPUSH
5584: LD_INT 333
5586: PPUSH
5587: LD_INT 206
5589: PPUSH
5590: CALL_OW 111
// wait ( 0 0$2 ) ;
5594: LD_INT 70
5596: PPUSH
5597: CALL_OW 67
// ComHold ( omarSquad ) ;
5601: LD_EXP 52
5605: PPUSH
5606: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5610: LD_EXP 44
5614: PUSH
5615: LD_EXP 52
5619: PPUSH
5620: LD_INT 2
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: PPUSH
5648: CALL_OW 72
5652: UNION
5653: PUSH
5654: LD_INT 22
5656: PUSH
5657: LD_INT 5
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 21
5666: PUSH
5667: LD_INT 2
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 69
5682: UNION
5683: PPUSH
5684: LD_INT 315
5686: PPUSH
5687: LD_INT 214
5689: PPUSH
5690: CALL_OW 114
// wait ( 0 0$22 ) ;
5694: LD_INT 770
5696: PPUSH
5697: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5701: LD_EXP 52
5705: PUSH
5706: LD_EXP 44
5710: UNION
5711: PPUSH
5712: LD_INT 329
5714: PPUSH
5715: LD_INT 231
5717: PPUSH
5718: CALL_OW 114
// end ;
5722: LD_VAR 0 1
5726: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5727: LD_EXP 10
5731: IFFALSE 6814
5733: GO 5735
5735: DISABLE
5736: LD_INT 0
5738: PPUSH
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
// begin enable ;
5749: ENABLE
// if not omarSquad then
5750: LD_EXP 52
5754: NOT
5755: IFFALSE 5759
// exit ;
5757: GO 6814
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5759: LD_ADDR_VAR 0 10
5763: PUSH
5764: LD_INT 14
5766: PPUSH
5767: LD_INT 81
5769: PUSH
5770: LD_INT 5
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5782: LD_ADDR_VAR 0 6
5786: PUSH
5787: LD_EXP 52
5791: PPUSH
5792: LD_INT 2
5794: PUSH
5795: LD_INT 25
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 8
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 72
5824: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5825: LD_ADDR_VAR 0 7
5829: PUSH
5830: LD_EXP 52
5834: PPUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 72
5849: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5850: LD_ADDR_VAR 0 9
5854: PUSH
5855: LD_EXP 52
5859: PPUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 3
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_EXP 52
5884: PPUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 4
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 72
5899: ST_TO_ADDR
// if sol then
5900: LD_VAR 0 6
5904: IFFALSE 6268
// for i in sol do
5906: LD_ADDR_VAR 0 1
5910: PUSH
5911: LD_VAR 0 6
5915: PUSH
5916: FOR_IN
5917: IFFALSE 6266
// if not HasTask ( i ) then
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 314
5928: NOT
5929: IFFALSE 6264
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 310
5940: NOT
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 256
5951: PUSH
5952: LD_INT 500
5954: LESS
5955: AND
5956: PUSH
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 333
5964: PPUSH
5965: LD_INT 234
5967: PPUSH
5968: CALL_OW 297
5972: PUSH
5973: LD_INT 6
5975: GREATER
5976: AND
5977: IFFALSE 5996
// begin ComMoveXY ( i , 333 , 234 ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: LD_INT 333
5986: PPUSH
5987: LD_INT 234
5989: PPUSH
5990: CALL_OW 111
// continue ;
5994: GO 5916
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 5
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 58
6013: PUSH
6014: EMPTY
6015: LIST
6016: PUSH
6017: LD_INT 50
6019: PUSH
6020: EMPTY
6021: LIST
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 30
6028: PUSH
6029: LD_INT 32
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 30
6038: PUSH
6039: LD_INT 31
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6062: LD_VAR 0 5
6066: PUSH
6067: LD_VAR 0 1
6071: PPUSH
6072: CALL_OW 310
6076: PPUSH
6077: CALL_OW 266
6081: PUSH
6082: LD_INT 31
6084: NONEQUAL
6085: AND
6086: IFFALSE 6168
// begin for j in tmp do
6088: LD_ADDR_VAR 0 2
6092: PUSH
6093: LD_VAR 0 5
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6164
// if GetTag ( j ) <> 1 then
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 110
6110: PUSH
6111: LD_INT 1
6113: NONEQUAL
6114: IFFALSE 6162
// begin SetTag ( j , 1 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 109
// if IsInUnit ( i ) then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 310
6137: IFFALSE 6148
// ComExit ( i ) ;
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 67548 0 1
// AddComEnterUnit ( i , j ) ;
6148: LD_VAR 0 1
6152: PPUSH
6153: LD_VAR 0 2
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 6098
6164: POP
6165: POP
// end else
6166: GO 6264
// if not IsInUnit ( i ) then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 310
6177: NOT
6178: IFFALSE 6264
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6180: LD_ADDR_VAR 0 5
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 50
6197: PUSH
6198: EMPTY
6199: LIST
6200: PUSH
6201: LD_INT 30
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: ST_TO_ADDR
// if tmp then
6221: LD_VAR 0 5
6225: IFFALSE 6264
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6227: LD_VAR 0 5
6231: PUSH
6232: LD_INT 1
6234: ARRAY
6235: PPUSH
6236: CALL_OW 313
6240: PUSH
6241: LD_INT 6
6243: LESS
6244: IFFALSE 6264
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_VAR 0 5
6255: PUSH
6256: LD_INT 1
6258: ARRAY
6259: PPUSH
6260: CALL_OW 120
// end ; end ;
6264: GO 5916
6266: POP
6267: POP
// if sci then
6268: LD_VAR 0 8
6272: IFFALSE 6327
// for i in sci do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 8
6283: PUSH
6284: FOR_IN
6285: IFFALSE 6325
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 333
6294: PPUSH
6295: LD_INT 234
6297: PPUSH
6298: CALL_OW 297
6302: PUSH
6303: LD_INT 9
6305: GREATER
6306: IFFALSE 6323
// ComMoveXY ( i , 333 , 234 ) ;
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_INT 333
6315: PPUSH
6316: LD_INT 234
6318: PPUSH
6319: CALL_OW 111
// end ;
6323: GO 6284
6325: POP
6326: POP
// if mech then
6327: LD_VAR 0 9
6331: IFFALSE 6536
// for i in mech do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 9
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6534
// begin hasVehicle := IsInUnit ( i ) ;
6346: LD_ADDR_VAR 0 11
6350: PUSH
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 310
6360: ST_TO_ADDR
// if enemyInBase then
6361: LD_VAR 0 10
6365: IFFALSE 6452
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6367: LD_VAR 0 11
6371: PUSH
6372: LD_VAR 0 11
6376: PPUSH
6377: CALL_OW 256
6381: PUSH
6382: LD_INT 500
6384: GREATER
6385: AND
6386: IFFALSE 6414
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6388: LD_VAR 0 11
6392: PPUSH
6393: LD_VAR 0 10
6397: PPUSH
6398: LD_VAR 0 11
6402: PPUSH
6403: CALL_OW 74
6407: PPUSH
6408: CALL_OW 115
6412: GO 6450
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6414: LD_VAR 0 11
6418: PPUSH
6419: LD_INT 333
6421: PPUSH
6422: LD_INT 234
6424: PPUSH
6425: CALL_OW 297
6429: PUSH
6430: LD_INT 6
6432: GREATER
6433: IFFALSE 6450
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6435: LD_VAR 0 11
6439: PPUSH
6440: LD_INT 333
6442: PPUSH
6443: LD_INT 234
6445: PPUSH
6446: CALL_OW 111
// end else
6450: GO 6532
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_INT 333
6459: PPUSH
6460: LD_INT 234
6462: PPUSH
6463: CALL_OW 297
6467: PUSH
6468: LD_INT 6
6470: GREATER
6471: IFFALSE 6490
// ComMoveXY ( i , 333 , 234 ) else
6473: LD_VAR 0 1
6477: PPUSH
6478: LD_INT 333
6480: PPUSH
6481: LD_INT 234
6483: PPUSH
6484: CALL_OW 111
6488: GO 6532
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6490: LD_VAR 0 11
6494: PUSH
6495: LD_VAR 0 11
6499: PPUSH
6500: CALL_OW 256
6504: PUSH
6505: LD_INT 1000
6507: LESS
6508: AND
6509: IFFALSE 6532
// begin SetFuel ( hasVehicle , 100 ) ;
6511: LD_VAR 0 11
6515: PPUSH
6516: LD_INT 100
6518: PPUSH
6519: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL 68850 0 1
// end ; end ; end ;
6532: GO 6343
6534: POP
6535: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_INT 14
6543: PPUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 24
6549: PUSH
6550: LD_INT 1000
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 21
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 70
6579: ST_TO_ADDR
// if tmp and eng then
6580: LD_VAR 0 5
6584: PUSH
6585: LD_VAR 0 7
6589: AND
6590: IFFALSE 6696
// begin for i in eng do
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_VAR 0 7
6601: PUSH
6602: FOR_IN
6603: IFFALSE 6694
// if IsInUnit ( i ) then
6605: LD_VAR 0 1
6609: PPUSH
6610: CALL_OW 310
6614: IFFALSE 6627
// ComExitBuilding ( i ) else
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 122
6625: GO 6692
// if GetLives ( i ) = 1000 then
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 256
6636: PUSH
6637: LD_INT 1000
6639: EQUAL
6640: IFFALSE 6662
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6642: LD_VAR 0 1
6646: PPUSH
6647: LD_VAR 0 5
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: CALL_OW 130
6660: GO 6692
// if GetLives ( i ) < 700 then
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 256
6671: PUSH
6672: LD_INT 700
6674: LESS
6675: IFFALSE 6692
// ComMoveXY ( i , 333 , 234 ) ;
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_INT 333
6684: PPUSH
6685: LD_INT 234
6687: PPUSH
6688: CALL_OW 111
6692: GO 6602
6694: POP
6695: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6696: LD_VAR 0 5
6700: NOT
6701: PUSH
6702: LD_VAR 0 7
6706: PPUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 54
6712: PUSH
6713: EMPTY
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 72
6724: AND
6725: IFFALSE 6814
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6727: LD_ADDR_VAR 0 1
6731: PUSH
6732: LD_VAR 0 7
6736: PPUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 54
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PPUSH
6750: CALL_OW 72
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6812
// if GetLives ( i ) < 1000 then
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 256
6767: PUSH
6768: LD_INT 1000
6770: LESS
6771: IFFALSE 6790
// ComMoveXY ( i , 333 , 234 ) else
6773: LD_VAR 0 1
6777: PPUSH
6778: LD_INT 333
6780: PPUSH
6781: LD_INT 234
6783: PPUSH
6784: CALL_OW 111
6788: GO 6810
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6790: LD_VAR 0 1
6794: PPUSH
6795: LD_INT 341
6797: PPUSH
6798: LD_INT 232
6800: PPUSH
6801: CALL_OW 428
6805: PPUSH
6806: CALL_OW 120
6810: GO 6755
6812: POP
6813: POP
// end ;
6814: PPOPN 11
6816: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6817: LD_EXP 44
6821: PPUSH
6822: CALL_OW 256
6826: PUSH
6827: LD_INT 1000
6829: LESS
6830: IFFALSE 6848
6832: GO 6834
6834: DISABLE
// begin enable ;
6835: ENABLE
// SetLives ( Omar , 1000 ) ;
6836: LD_EXP 44
6840: PPUSH
6841: LD_INT 1000
6843: PPUSH
6844: CALL_OW 234
// end ;
6848: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6849: LD_EXP 47
6853: PPUSH
6854: CALL_OW 256
6858: PUSH
6859: LD_INT 1000
6861: LESS
6862: PUSH
6863: LD_EXP 32
6867: AND
6868: IFFALSE 6886
6870: GO 6872
6872: DISABLE
// begin enable ;
6873: ENABLE
// SetLives ( Rolf , 1000 ) ;
6874: LD_EXP 47
6878: PPUSH
6879: LD_INT 1000
6881: PPUSH
6882: CALL_OW 234
// end ;
6886: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6887: LD_EXP 32
6891: IFFALSE 7571
6893: GO 6895
6895: DISABLE
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6904: LD_ADDR_VAR 0 4
6908: PUSH
6909: LD_INT 215
6911: PUSH
6912: LD_INT 162
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 195
6921: PUSH
6922: LD_INT 163
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 174
6931: PUSH
6932: LD_INT 162
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 145
6941: PUSH
6942: LD_INT 163
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 127
6951: PUSH
6952: LD_INT 163
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6966: LD_ADDR_VAR 0 6
6970: PUSH
6971: LD_INT 221
6973: PUSH
6974: LD_INT 161
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_EXP 47
6990: PUSH
6991: LD_EXP 51
6995: UNION
6996: ST_TO_ADDR
// if not tmp then
6997: LD_VAR 0 2
7001: NOT
7002: IFFALSE 7006
// exit ;
7004: GO 7571
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_VAR 0 6
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 2
7027: ARRAY
7028: PPUSH
7029: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_EXP 51
7049: PPUSH
7050: LD_INT 3
7052: PUSH
7053: LD_INT 55
7055: PUSH
7056: EMPTY
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 8
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 72
7099: ST_TO_ADDR
// if tmp then
7100: LD_VAR 0 2
7104: IFFALSE 7257
// begin for i in tmp do
7106: LD_ADDR_VAR 0 1
7110: PUSH
7111: LD_VAR 0 2
7115: PUSH
7116: FOR_IN
7117: IFFALSE 7255
// begin tag := GetTag ( i ) ;
7119: LD_ADDR_VAR 0 5
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 110
7133: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 256
7143: PUSH
7144: LD_INT 800
7146: LESS
7147: PUSH
7148: LD_VAR 0 5
7152: PUSH
7153: LD_INT 101
7155: LESS
7156: AND
7157: IFFALSE 7200
// begin SetTag ( i , 101 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 101
7166: PPUSH
7167: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_VAR 0 6
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 6
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: PPUSH
7194: CALL_OW 111
// end else
7198: GO 7253
// if tag = 101 then
7200: LD_VAR 0 5
7204: PUSH
7205: LD_INT 101
7207: EQUAL
7208: IFFALSE 7239
// begin if GetLives ( i ) = 1000 then
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 256
7219: PUSH
7220: LD_INT 1000
7222: EQUAL
7223: IFFALSE 7237
// SetTag ( i , 0 ) ;
7225: LD_VAR 0 1
7229: PPUSH
7230: LD_INT 0
7232: PPUSH
7233: CALL_OW 109
// end else
7237: GO 7253
// AgressiveMove ( i , path ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_VAR 0 4
7248: PPUSH
7249: CALL 69754 0 2
// end ;
7253: GO 7116
7255: POP
7256: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 8
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 34
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PPUSH
7304: CALL_OW 69
7308: ST_TO_ADDR
// if not tmp then
7309: LD_VAR 0 2
7313: NOT
7314: IFFALSE 7318
// continue ;
7316: GO 7033
// for i in tmp do
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: LD_VAR 0 2
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7562
// begin mech := IsDrivenBy ( i ) ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 311
7345: ST_TO_ADDR
// if not mech then
7346: LD_VAR 0 3
7350: NOT
7351: IFFALSE 7355
// continue ;
7353: GO 7328
// tag := GetTag ( i ) ;
7355: LD_ADDR_VAR 0 5
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 110
7369: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 256
7379: PUSH
7380: LD_INT 600
7382: GREATEREQUAL
7383: PUSH
7384: LD_VAR 0 5
7388: PUSH
7389: LD_INT 101
7391: LESS
7392: AND
7393: IFFALSE 7409
// AgressiveMove ( i , path ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: CALL 69754 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 256
7418: PUSH
7419: LD_INT 600
7421: LESS
7422: PUSH
7423: LD_VAR 0 5
7427: PUSH
7428: LD_INT 101
7430: LESS
7431: AND
7432: IFFALSE 7473
// begin SetTag ( i , 101 ) ;
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_INT 101
7441: PPUSH
7442: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 6
7464: PUSH
7465: LD_INT 2
7467: ARRAY
7468: PPUSH
7469: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7473: LD_VAR 0 5
7477: PUSH
7478: LD_INT 101
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_VAR 0 6
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PPUSH
7505: CALL_OW 297
7509: PUSH
7510: LD_INT 9
7512: LESS
7513: AND
7514: PUSH
7515: LD_VAR 0 3
7519: AND
7520: IFFALSE 7560
// begin if GetLives ( i ) < 1000 then
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 256
7531: PUSH
7532: LD_INT 1000
7534: LESS
7535: IFFALSE 7548
// AddComRepairVehicleAndReturn ( mech ) else
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL 68970 0 1
7546: GO 7560
// SetTag ( i , 0 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 0
7555: PPUSH
7556: CALL_OW 109
// end ; end ;
7560: GO 7328
7562: POP
7563: POP
// until not tmp ;
7564: LD_VAR 0 2
7568: NOT
7569: IFFALSE 7033
// end ;
7571: PPOPN 6
7573: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7574: LD_EXP 23
7578: IFFALSE 8883
7580: GO 7582
7582: DISABLE
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7593: LD_ADDR_VAR 0 7
7597: PUSH
7598: LD_INT 209
7600: PUSH
7601: LD_INT 221
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 190
7610: PUSH
7611: LD_INT 220
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 177
7620: PUSH
7621: LD_INT 220
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 168
7630: PUSH
7631: LD_INT 223
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 150
7640: PUSH
7641: LD_INT 206
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7655: LD_ADDR_VAR 0 8
7659: PUSH
7660: LD_INT 219
7662: PUSH
7663: LD_INT 225
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// for i := 1 to 2 do
7674: LD_ADDR_VAR 0 1
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_INT 2
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7837
// begin uc_side := 5 ;
7690: LD_ADDR_OWVAR 20
7694: PUSH
7695: LD_INT 5
7697: ST_TO_ADDR
// uc_nation := 2 ;
7698: LD_ADDR_OWVAR 21
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7706: LD_INT 14
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: LD_INT 1
7714: PPUSH
7715: LD_INT 32
7717: PPUSH
7718: LD_INT 80
7720: PPUSH
7721: CALL 34288 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7725: LD_ADDR_VAR 0 2
7729: PUSH
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL_OW 45
7739: PPUSH
7740: CALL 67150 0 2
7744: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7745: LD_VAR 0 2
7749: PUSH
7750: LD_VAR 0 1
7754: ARRAY
7755: PPUSH
7756: LD_INT 4
7758: PPUSH
7759: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: ARRAY
7773: PPUSH
7774: LD_INT 16
7776: PPUSH
7777: LD_INT 0
7779: PPUSH
7780: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7784: LD_INT 0
7786: PPUSH
7787: LD_INT 4
7789: PPUSH
7790: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7794: CALL_OW 44
7798: PPUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PPUSH
7810: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7814: LD_VAR 0 2
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 337
7827: PPUSH
7828: LD_INT 232
7830: PPUSH
7831: CALL_OW 111
// end ;
7835: GO 7687
7837: POP
7838: POP
// wait ( 0 0$25 ) ;
7839: LD_INT 875
7841: PPUSH
7842: CALL_OW 67
// for i := 1 to 2 do
7846: LD_ADDR_VAR 0 1
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_INT 2
7858: PUSH
7859: FOR_TO
7860: IFFALSE 7885
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7862: LD_VAR 0 2
7866: PUSH
7867: LD_VAR 0 1
7871: ARRAY
7872: PPUSH
7873: LD_INT 2
7875: PPUSH
7876: LD_INT 100
7878: PPUSH
7879: CALL_OW 290
7883: GO 7859
7885: POP
7886: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7887: LD_EXP 52
7891: PPUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 8
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 72
7924: PPUSH
7925: CALL_OW 122
// wait ( 0 0$3 ) ;
7929: LD_INT 105
7931: PPUSH
7932: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7936: LD_EXP 52
7940: PUSH
7941: LD_EXP 44
7945: UNION
7946: PPUSH
7947: LD_VAR 0 8
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 8
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 174
// wait ( 0 0$3 ) ;
7969: LD_INT 105
7971: PPUSH
7972: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_INT 218
7983: PPUSH
7984: LD_INT 217
7986: PPUSH
7987: CALL_OW 171
// wait ( 1 1$00 ) ;
7991: LD_INT 2100
7993: PPUSH
7994: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8005: LD_VAR 0 8
8009: PUSH
8010: LD_INT 3
8012: ARRAY
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: IFFALSE 8122
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8019: LD_INT 22
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 92
8031: PUSH
8032: LD_INT 168
8034: PUSH
8035: LD_INT 229
8037: PUSH
8038: LD_INT 12
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PPUSH
8051: CALL_OW 69
8055: PUSH
8056: LD_INT 0
8058: EQUAL
8059: IFFALSE 8122
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8061: LD_ADDR_VAR 0 8
8065: PUSH
8066: LD_INT 167
8068: PUSH
8069: LD_INT 222
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8080: LD_EXP 44
8084: PUSH
8085: LD_VAR 0 2
8089: ADD
8090: PUSH
8091: LD_EXP 52
8095: PPUSH
8096: LD_INT 25
8098: PUSH
8099: LD_INT 4
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 72
8110: ADD
8111: PPUSH
8112: LD_INT 167
8114: PPUSH
8115: LD_INT 222
8117: PPUSH
8118: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8122: LD_ADDR_VAR 0 3
8126: PUSH
8127: LD_EXP 52
8131: PPUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 55
8137: PUSH
8138: EMPTY
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 25
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 72
8181: ST_TO_ADDR
// if tmp then
8182: LD_VAR 0 3
8186: IFFALSE 8399
// begin for i in tmp do
8188: LD_ADDR_VAR 0 1
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: FOR_IN
8199: IFFALSE 8397
// begin tag := GetTag ( i ) ;
8201: LD_ADDR_VAR 0 4
8205: PUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 110
8215: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 256
8225: PUSH
8226: LD_INT 800
8228: LESS
8229: PUSH
8230: LD_VAR 0 4
8234: PUSH
8235: LD_INT 101
8237: LESS
8238: AND
8239: IFFALSE 8282
// begin SetTag ( i , 101 ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 101
8248: PPUSH
8249: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 8
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 8
8271: PUSH
8272: LD_INT 2
8274: ARRAY
8275: PPUSH
8276: CALL_OW 111
// end else
8280: GO 8395
// if tag = 101 then
8282: LD_VAR 0 4
8286: PUSH
8287: LD_INT 101
8289: EQUAL
8290: IFFALSE 8381
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8292: LD_VAR 0 1
8296: PPUSH
8297: LD_VAR 0 8
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 8
8310: PUSH
8311: LD_INT 2
8313: ARRAY
8314: PPUSH
8315: CALL_OW 297
8319: PUSH
8320: LD_INT 10
8322: GREATER
8323: IFFALSE 8352
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 8
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: LD_VAR 0 8
8343: PUSH
8344: LD_INT 2
8346: ARRAY
8347: PPUSH
8348: CALL_OW 111
// if GetLives ( i ) = 1000 then
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 256
8361: PUSH
8362: LD_INT 1000
8364: EQUAL
8365: IFFALSE 8379
// SetTag ( i , 0 ) ;
8367: LD_VAR 0 1
8371: PPUSH
8372: LD_INT 0
8374: PPUSH
8375: CALL_OW 109
// end else
8379: GO 8395
// AgressiveMove ( i , path ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_VAR 0 7
8390: PPUSH
8391: CALL 69754 0 2
// end ;
8395: GO 8198
8397: POP
8398: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8399: LD_ADDR_VAR 0 3
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: LD_INT 34
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: ST_TO_ADDR
// if not tmp then
8451: LD_VAR 0 3
8455: NOT
8456: IFFALSE 8460
// continue ;
8458: GO 7998
// for i in tmp do
8460: LD_ADDR_VAR 0 1
8464: PUSH
8465: LD_VAR 0 3
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8874
// begin mech := IsDrivenBy ( i ) ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 311
8487: ST_TO_ADDR
// if not mech then
8488: LD_VAR 0 5
8492: NOT
8493: IFFALSE 8497
// continue ;
8495: GO 8470
// tag := GetTag ( i ) ;
8497: LD_ADDR_VAR 0 4
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 110
8511: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 261
8521: PUSH
8522: LD_INT 90
8524: GREATER
8525: PUSH
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 102
8533: EQUAL
8534: AND
8535: IFFALSE 8551
// SetTag ( i , 0 ) else
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_INT 0
8544: PPUSH
8545: CALL_OW 109
8549: GO 8647
// if GetTag ( i ) = 102 then
8551: LD_VAR 0 1
8555: PPUSH
8556: CALL_OW 110
8560: PUSH
8561: LD_INT 102
8563: EQUAL
8564: IFFALSE 8647
// begin x := rand ( 1 , 2 ) ;
8566: LD_ADDR_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 2
8576: PPUSH
8577: CALL_OW 12
8581: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PPUSH
8598: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8602: LD_VAR 0 2
8606: PUSH
8607: LD_VAR 0 6
8611: ARRAY
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: CALL_OW 289
8620: PUSH
8621: LD_INT 20
8623: LESS
8624: IFFALSE 8647
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8626: LD_VAR 0 2
8630: PUSH
8631: LD_VAR 0 6
8635: ARRAY
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: LD_INT 100
8642: PPUSH
8643: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 256
8656: PUSH
8657: LD_INT 600
8659: GREATEREQUAL
8660: PUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 101
8668: LESS
8669: AND
8670: IFFALSE 8686
// AgressiveMove ( i , path ) ;
8672: LD_VAR 0 1
8676: PPUSH
8677: LD_VAR 0 7
8681: PPUSH
8682: CALL 69754 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 256
8695: PUSH
8696: LD_INT 600
8698: LESS
8699: PUSH
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 101
8707: LESS
8708: AND
8709: IFFALSE 8750
// begin SetTag ( i , 101 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 101
8718: PPUSH
8719: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_VAR 0 8
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_VAR 0 8
8741: PUSH
8742: LD_INT 2
8744: ARRAY
8745: PPUSH
8746: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8750: LD_VAR 0 4
8754: PUSH
8755: LD_INT 101
8757: EQUAL
8758: PUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: LD_VAR 0 8
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_VAR 0 8
8777: PUSH
8778: LD_INT 2
8780: ARRAY
8781: PPUSH
8782: CALL_OW 297
8786: PUSH
8787: LD_INT 9
8789: LESS
8790: AND
8791: PUSH
8792: LD_VAR 0 5
8796: AND
8797: IFFALSE 8872
// begin if GetLives ( i ) < 1000 then
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 256
8808: PUSH
8809: LD_INT 1000
8811: LESS
8812: IFFALSE 8825
// AddComRepairVehicleAndReturn ( mech ) else
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL 68970 0 1
8823: GO 8872
// if GetFuel ( i ) <= 50 and cargo then
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 261
8834: PUSH
8835: LD_INT 50
8837: LESSEQUAL
8838: PUSH
8839: LD_VAR 0 2
8843: AND
8844: IFFALSE 8860
// SetTag ( i , 102 ) else
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_INT 102
8853: PPUSH
8854: CALL_OW 109
8858: GO 8872
// SetTag ( i , 0 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 0
8867: PPUSH
8868: CALL_OW 109
// end ; end ;
8872: GO 8470
8874: POP
8875: POP
// until not tmp ;
8876: LD_VAR 0 3
8880: NOT
8881: IFFALSE 7998
// end ;
8883: PPOPN 8
8885: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8897: LD_INT 20
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8907: LD_INT 175
8909: PPUSH
8910: CALL_OW 67
// heikeInConvoy := false ;
8914: LD_ADDR_VAR 0 8
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// needOil := false ;
8922: LD_ADDR_VAR 0 7
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_INT 20
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 34
8956: PUSH
8957: LD_INT 88
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 34
8966: PUSH
8967: LD_INT 31
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 33
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: ST_TO_ADDR
// for i in tmp do
9003: LD_ADDR_VAR 0 2
9007: PUSH
9008: LD_VAR 0 3
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9099
// begin if IsDrivenBy ( i ) = Heike then
9016: LD_VAR 0 2
9020: PPUSH
9021: CALL_OW 311
9025: PUSH
9026: LD_EXP 34
9030: EQUAL
9031: IFFALSE 9050
// begin heikeInConvoy := true ;
9033: LD_ADDR_VAR 0 8
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9041: LD_STRING QHeikeConvoy
9043: PPUSH
9044: CALL_OW 97
// break ;
9048: GO 9099
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL_OW 262
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: PUSH
9064: LD_VAR 0 2
9068: PPUSH
9069: CALL_OW 261
9073: PUSH
9074: LD_INT 10
9076: LESS
9077: AND
9078: IFFALSE 9097
// begin needOil := true ;
9080: LD_ADDR_VAR 0 7
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// Query ( QNeedOil ) ;
9088: LD_STRING QNeedOil
9090: PPUSH
9091: CALL_OW 97
// break ;
9095: GO 9099
// end ; end ;
9097: GO 9013
9099: POP
9100: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9101: LD_VAR 0 7
9105: NOT
9106: PUSH
9107: LD_VAR 0 8
9111: NOT
9112: AND
9113: PUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 34
9124: PUSH
9125: LD_INT 32
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 34
9134: PUSH
9135: LD_INT 51
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 72
9151: AND
9152: IFFALSE 9169
// if Query ( QConvoy ) = 1 then
9154: LD_STRING QConvoy
9156: PPUSH
9157: CALL_OW 97
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9169
// break ;
9167: GO 9173
// until false ;
9169: LD_INT 0
9171: IFFALSE 8907
// SetAreaMapShow ( oilArea , 0 ) ;
9173: LD_INT 20
9175: PPUSH
9176: LD_INT 0
9178: PPUSH
9179: CALL_OW 424
// data := [ ] ;
9183: LD_ADDR_VAR 0 4
9187: PUSH
9188: EMPTY
9189: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: LD_INT 60
9197: PUSH
9198: LD_INT 50
9200: PUSH
9201: LD_INT 40
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_OWVAR 67
9217: ARRAY
9218: ST_TO_ADDR
// for i in tmp do
9219: LD_ADDR_VAR 0 2
9223: PUSH
9224: LD_VAR 0 3
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9327
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_VAR 0 4
9241: PPUSH
9242: LD_VAR 0 2
9246: PUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: CALL_OW 311
9256: PUSH
9257: LD_VAR 0 2
9261: PPUSH
9262: CALL_OW 256
9266: PUSH
9267: LD_VAR 0 2
9271: PPUSH
9272: CALL_OW 261
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PPUSH
9283: CALL 67150 0 2
9287: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9288: LD_VAR 0 2
9292: PPUSH
9293: CALL_OW 311
9297: PPUSH
9298: CALL_OW 64
// RemoveUnit ( i ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: CALL_OW 64
// chance := chance + 20 ;
9311: LD_ADDR_VAR 0 5
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: LD_INT 20
9323: PLUS
9324: ST_TO_ADDR
// end ;
9325: GO 9229
9327: POP
9328: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9329: LD_INT 1575
9331: PPUSH
9332: LD_INT 5250
9334: PPUSH
9335: CALL_OW 12
9339: PPUSH
9340: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9344: LD_INT 35
9346: PPUSH
9347: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9351: LD_INT 22
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 92
9363: PUSH
9364: LD_INT 261
9366: PUSH
9367: LD_INT 71
9369: PUSH
9370: LD_INT 12
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: NOT
9388: PUSH
9389: LD_INT 277
9391: PPUSH
9392: LD_INT 80
9394: PPUSH
9395: CALL_OW 428
9399: NOT
9400: AND
9401: IFFALSE 9344
// for i in data do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: LD_VAR 0 4
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9815
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9416: LD_ADDR_OWVAR 21
9420: PUSH
9421: LD_VAR 0 2
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 248
9434: ST_TO_ADDR
// uc_side := 2 ;
9435: LD_ADDR_OWVAR 20
9439: PUSH
9440: LD_INT 2
9442: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: CALL_OW 265
9456: PPUSH
9457: LD_VAR 0 2
9461: PUSH
9462: LD_INT 1
9464: ARRAY
9465: PPUSH
9466: CALL_OW 262
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: CALL_OW 263
9484: PPUSH
9485: LD_VAR 0 2
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PPUSH
9494: CALL_OW 264
9498: PPUSH
9499: LD_INT 66
9501: PPUSH
9502: CALL 34288 0 5
// vehicle := CreateVehicle ;
9506: LD_ADDR_VAR 0 6
9510: PUSH
9511: CALL_OW 45
9515: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_INT 277
9523: PPUSH
9524: LD_INT 80
9526: PPUSH
9527: LD_INT 4
9529: PPUSH
9530: LD_INT 0
9532: PPUSH
9533: CALL 69290 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9537: LD_VAR 0 2
9541: PUSH
9542: LD_INT 2
9544: ARRAY
9545: PPUSH
9546: LD_VAR 0 6
9550: PPUSH
9551: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9555: LD_VAR 0 6
9559: PPUSH
9560: LD_VAR 0 2
9564: PUSH
9565: LD_INT 3
9567: ARRAY
9568: PPUSH
9569: CALL_OW 234
// success := Prob ( chance ) ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_VAR 0 5
9582: PPUSH
9583: CALL_OW 13
9587: ST_TO_ADDR
// if success then
9588: LD_VAR 0 9
9592: IFFALSE 9674
// begin if GetEngine ( vehicle ) = engine_combustion then
9594: LD_VAR 0 6
9598: PPUSH
9599: CALL_OW 262
9603: PUSH
9604: LD_INT 1
9606: EQUAL
9607: IFFALSE 9621
// SetFuel ( vehicle , 90 ) ;
9609: LD_VAR 0 6
9613: PPUSH
9614: LD_INT 90
9616: PPUSH
9617: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 264
9630: PUSH
9631: LD_INT 32
9633: PUSH
9634: LD_INT 51
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: IN
9641: IFFALSE 9672
// begin collectedOil := collectedOil + 100 ;
9643: LD_ADDR_EXP 33
9647: PUSH
9648: LD_EXP 33
9652: PUSH
9653: LD_INT 100
9655: PLUS
9656: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9657: LD_VAR 0 6
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: LD_INT 100
9667: PPUSH
9668: CALL_OW 290
// end ; end else
9672: GO 9746
// begin if i [ 3 ] > 333 then
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 3
9681: ARRAY
9682: PUSH
9683: LD_INT 333
9685: GREATER
9686: IFFALSE 9700
// SetLives ( vehicle , 333 ) ;
9688: LD_VAR 0 6
9692: PPUSH
9693: LD_INT 333
9695: PPUSH
9696: CALL_OW 234
// if i [ 4 ] > 20 then
9700: LD_VAR 0 2
9704: PUSH
9705: LD_INT 4
9707: ARRAY
9708: PUSH
9709: LD_INT 20
9711: GREATER
9712: IFFALSE 9728
// SetFuel ( vehicle , 20 ) else
9714: LD_VAR 0 6
9718: PPUSH
9719: LD_INT 20
9721: PPUSH
9722: CALL_OW 240
9726: GO 9746
// SetFuel ( vehicle , i [ 4 ] ) ;
9728: LD_VAR 0 6
9732: PPUSH
9733: LD_VAR 0 2
9737: PUSH
9738: LD_INT 4
9740: ARRAY
9741: PPUSH
9742: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9746: LD_VAR 0 6
9750: PPUSH
9751: LD_INT 250
9753: PPUSH
9754: LD_INT 119
9756: PPUSH
9757: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_INT 211
9768: PPUSH
9769: LD_INT 80
9771: PPUSH
9772: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9776: LD_INT 175
9778: PPUSH
9779: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9783: LD_INT 20
9785: PPUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 2
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 52
9798: PUSH
9799: EMPTY
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PPUSH
9806: CALL_OW 70
9810: NOT
9811: IFFALSE 9776
// end ;
9813: GO 9413
9815: POP
9816: POP
// wait ( 0 0$10 ) ;
9817: LD_INT 350
9819: PPUSH
9820: CALL_OW 67
// GoForOil ;
9824: CALL 8886 0 0
// end ;
9828: LD_VAR 0 1
9832: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9833: LD_INT 22
9835: PPUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_INT 5
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 58
9858: PUSH
9859: EMPTY
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: PPUSH
9867: CALL_OW 70
9871: IFFALSE 9940
9873: GO 9875
9875: DISABLE
9876: LD_INT 0
9878: PPUSH
// begin enable ;
9879: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9880: LD_ADDR_VAR 0 1
9884: PUSH
9885: LD_INT 22
9887: PPUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 22
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 58
9910: PUSH
9911: EMPTY
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 9938
// KillUnit ( i ) ;
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 66
9936: GO 9924
9938: POP
9939: POP
// end ; end_of_file
9940: PPOPN 1
9942: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9943: LD_INT 0
9945: PPUSH
// uc_side := side ;
9946: LD_ADDR_OWVAR 20
9950: PUSH
9951: LD_VAR 0 1
9955: ST_TO_ADDR
// uc_nation := nation ;
9956: LD_ADDR_OWVAR 21
9960: PUSH
9961: LD_VAR 0 2
9965: ST_TO_ADDR
// vc_chassis := chassis ;
9966: LD_ADDR_OWVAR 37
9970: PUSH
9971: LD_VAR 0 3
9975: ST_TO_ADDR
// vc_engine := engine ;
9976: LD_ADDR_OWVAR 39
9980: PUSH
9981: LD_VAR 0 4
9985: ST_TO_ADDR
// vc_control := control ;
9986: LD_ADDR_OWVAR 38
9990: PUSH
9991: LD_VAR 0 5
9995: ST_TO_ADDR
// vc_weapon := weapon ;
9996: LD_ADDR_OWVAR 40
10000: PUSH
10001: LD_VAR 0 6
10005: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10006: LD_ADDR_OWVAR 41
10010: PUSH
10011: LD_VAR 0 7
10015: ST_TO_ADDR
// result := CreateVehicle ;
10016: LD_ADDR_VAR 0 8
10020: PUSH
10021: CALL_OW 45
10025: ST_TO_ADDR
// end ;
10026: LD_VAR 0 8
10030: RET
// export function SayX ( units , ident ) ; var i ; begin
10031: LD_INT 0
10033: PPUSH
10034: PPUSH
// result := false ;
10035: LD_ADDR_VAR 0 3
10039: PUSH
10040: LD_INT 0
10042: ST_TO_ADDR
// if not units then
10043: LD_VAR 0 1
10047: NOT
10048: IFFALSE 10052
// exit ;
10050: GO 10106
// for i in units do
10052: LD_ADDR_VAR 0 4
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: FOR_IN
10063: IFFALSE 10104
// if IsOk ( i ) then
10065: LD_VAR 0 4
10069: PPUSH
10070: CALL_OW 302
10074: IFFALSE 10102
// begin Say ( i , ident ) ;
10076: LD_VAR 0 4
10080: PPUSH
10081: LD_VAR 0 2
10085: PPUSH
10086: CALL_OW 88
// result := i ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_VAR 0 4
10099: ST_TO_ADDR
// break ;
10100: GO 10104
// end ;
10102: GO 10062
10104: POP
10105: POP
// end ;
10106: LD_VAR 0 3
10110: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10111: LD_INT 0
10113: PPUSH
10114: PPUSH
// InitUc ;
10115: CALL_OW 18
// InitHc ;
10119: CALL_OW 19
// uc_side := 0 ;
10123: LD_ADDR_OWVAR 20
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// uc_nation := 0 ;
10131: LD_ADDR_OWVAR 21
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// for i = 1 to amount do
10139: LD_ADDR_VAR 0 4
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_VAR 0 2
10153: PUSH
10154: FOR_TO
10155: IFFALSE 10237
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10157: LD_ADDR_OWVAR 29
10161: PUSH
10162: LD_INT 9
10164: PPUSH
10165: LD_INT 12
10167: PPUSH
10168: CALL_OW 12
10172: PUSH
10173: LD_INT 9
10175: PPUSH
10176: LD_INT 12
10178: PPUSH
10179: CALL_OW 12
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10188: LD_ADDR_OWVAR 35
10192: PUSH
10193: LD_INT 1
10195: NEG
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 12
10204: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10205: LD_INT 0
10207: PPUSH
10208: LD_INT 12
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10218: CALL_OW 44
10222: PPUSH
10223: LD_VAR 0 1
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 49
// end ;
10235: GO 10154
10237: POP
10238: POP
// InitHc ;
10239: CALL_OW 19
// end ;
10243: LD_VAR 0 3
10247: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10248: LD_INT 0
10250: PPUSH
10251: PPUSH
// uc_side := 0 ;
10252: LD_ADDR_OWVAR 20
10256: PUSH
10257: LD_INT 0
10259: ST_TO_ADDR
// uc_nation := 0 ;
10260: LD_ADDR_OWVAR 21
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10268: LD_INT 7
10270: PPUSH
10271: LD_INT 6
10273: PUSH
10274: LD_INT 5
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_OWVAR 67
10293: ARRAY
10294: PPUSH
10295: CALL 10111 0 2
// for i = 1 to 2 do
10299: LD_ADDR_VAR 0 4
10303: PUSH
10304: DOUBLE
10305: LD_INT 1
10307: DEC
10308: ST_TO_ADDR
10309: LD_INT 2
10311: PUSH
10312: FOR_TO
10313: IFFALSE 10350
// begin vc_chassis := class_mastodont ;
10315: LD_ADDR_OWVAR 37
10319: PUSH
10320: LD_INT 31
10322: ST_TO_ADDR
// vc_control := control_rider ;
10323: LD_ADDR_OWVAR 38
10327: PUSH
10328: LD_INT 4
10330: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10331: CALL_OW 45
10335: PPUSH
10336: LD_VAR 0 1
10340: PPUSH
10341: LD_INT 0
10343: PPUSH
10344: CALL 66055 0 3
// end ;
10348: GO 10312
10350: POP
10351: POP
// InitHc ;
10352: CALL_OW 19
// for i := 1 to 3 do
10356: LD_ADDR_VAR 0 4
10360: PUSH
10361: DOUBLE
10362: LD_INT 1
10364: DEC
10365: ST_TO_ADDR
10366: LD_INT 3
10368: PUSH
10369: FOR_TO
10370: IFFALSE 10407
// begin hc_class := class_horse ;
10372: LD_ADDR_OWVAR 28
10376: PUSH
10377: LD_INT 21
10379: ST_TO_ADDR
// hc_gallery :=  ;
10380: LD_ADDR_OWVAR 33
10384: PUSH
10385: LD_STRING 
10387: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10388: CALL_OW 44
10392: PPUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: LD_INT 0
10400: PPUSH
10401: CALL_OW 49
// end ;
10405: GO 10369
10407: POP
10408: POP
// InitHc ;
10409: CALL_OW 19
// for i = 1 to 3 do
10413: LD_ADDR_VAR 0 4
10417: PUSH
10418: DOUBLE
10419: LD_INT 1
10421: DEC
10422: ST_TO_ADDR
10423: LD_INT 3
10425: PUSH
10426: FOR_TO
10427: IFFALSE 10481
// begin hc_class = class_tiger ;
10429: LD_ADDR_OWVAR 28
10433: PUSH
10434: LD_INT 14
10436: ST_TO_ADDR
// hc_gallery =  ;
10437: LD_ADDR_OWVAR 33
10441: PUSH
10442: LD_STRING 
10444: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10445: LD_ADDR_OWVAR 35
10449: PUSH
10450: LD_INT 7
10452: NEG
10453: PPUSH
10454: LD_INT 7
10456: PPUSH
10457: CALL_OW 12
10461: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10462: CALL_OW 44
10466: PPUSH
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_INT 0
10474: PPUSH
10475: CALL 66055 0 3
// end ;
10479: GO 10426
10481: POP
10482: POP
// InitHc ;
10483: CALL_OW 19
// for i := 1 to 4 do
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: DOUBLE
10493: LD_INT 1
10495: DEC
10496: ST_TO_ADDR
10497: LD_INT 4
10499: PUSH
10500: FOR_TO
10501: IFFALSE 10538
// begin hc_class := class_phororhacos ;
10503: LD_ADDR_OWVAR 28
10507: PUSH
10508: LD_INT 18
10510: ST_TO_ADDR
// hc_gallery :=  ;
10511: LD_ADDR_OWVAR 33
10515: PUSH
10516: LD_STRING 
10518: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10519: CALL_OW 44
10523: PPUSH
10524: LD_VAR 0 1
10528: PPUSH
10529: LD_INT 0
10531: PPUSH
10532: CALL_OW 49
// end ;
10536: GO 10500
10538: POP
10539: POP
// InitHc ;
10540: CALL_OW 19
// for i := 1 to 4 do
10544: LD_ADDR_VAR 0 4
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 4
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10595
// begin hc_class := class_baggie ;
10560: LD_ADDR_OWVAR 28
10564: PUSH
10565: LD_INT 13
10567: ST_TO_ADDR
// hc_gallery :=  ;
10568: LD_ADDR_OWVAR 33
10572: PUSH
10573: LD_STRING 
10575: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10576: CALL_OW 44
10580: PPUSH
10581: LD_VAR 0 1
10585: PPUSH
10586: LD_INT 0
10588: PPUSH
10589: CALL_OW 49
// end ;
10593: GO 10557
10595: POP
10596: POP
// InitHc ;
10597: CALL_OW 19
// for i := 1 to 7 do
10601: LD_ADDR_VAR 0 4
10605: PUSH
10606: DOUBLE
10607: LD_INT 1
10609: DEC
10610: ST_TO_ADDR
10611: LD_INT 7
10613: PUSH
10614: FOR_TO
10615: IFFALSE 10652
// begin hc_class := class_frog ;
10617: LD_ADDR_OWVAR 28
10621: PUSH
10622: LD_INT 19
10624: ST_TO_ADDR
// hc_gallery :=  ;
10625: LD_ADDR_OWVAR 33
10629: PUSH
10630: LD_STRING 
10632: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10633: CALL_OW 44
10637: PPUSH
10638: LD_VAR 0 2
10642: PPUSH
10643: LD_INT 0
10645: PPUSH
10646: CALL_OW 49
// end ;
10650: GO 10614
10652: POP
10653: POP
// end ;
10654: LD_VAR 0 3
10658: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10659: LD_INT 0
10661: PPUSH
10662: PPUSH
10663: PPUSH
// if not observer or not unit then
10664: LD_VAR 0 1
10668: NOT
10669: PUSH
10670: LD_VAR 0 2
10674: NOT
10675: OR
10676: IFFALSE 10680
// exit ;
10678: GO 10728
// if not See ( GetSide ( observer ) , unit ) then
10680: LD_VAR 0 1
10684: PPUSH
10685: CALL_OW 255
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 292
10699: NOT
10700: IFFALSE 10704
// exit ;
10702: GO 10728
// result := GetDistUnits ( observer , unit ) < 12 ;
10704: LD_ADDR_VAR 0 3
10708: PUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: LD_VAR 0 2
10718: PPUSH
10719: CALL_OW 296
10723: PUSH
10724: LD_INT 12
10726: LESS
10727: ST_TO_ADDR
// end ;
10728: LD_VAR 0 3
10732: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10733: LD_INT 0
10735: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10736: LD_VAR 0 2
10740: PUSH
10741: LD_INT 1
10743: ARRAY
10744: PPUSH
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 2
10752: ARRAY
10753: PPUSH
10754: CALL_OW 488
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: LD_INT 1
10766: ARRAY
10767: PPUSH
10768: LD_VAR 0 2
10772: PUSH
10773: LD_INT 2
10775: ARRAY
10776: PPUSH
10777: CALL_OW 428
10781: PUSH
10782: LD_INT 0
10784: EQUAL
10785: AND
10786: IFFALSE 10820
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10788: LD_VAR 0 1
10792: PPUSH
10793: LD_VAR 0 2
10797: PUSH
10798: LD_INT 1
10800: ARRAY
10801: PPUSH
10802: LD_VAR 0 2
10806: PUSH
10807: LD_INT 2
10809: ARRAY
10810: PPUSH
10811: LD_VAR 0 3
10815: PPUSH
10816: CALL_OW 48
// end ;
10820: LD_VAR 0 4
10824: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10825: LD_INT 0
10827: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_VAR 0 2
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_VAR 0 4
10847: PPUSH
10848: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PPUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: CALL_OW 331
// end ;
10871: LD_VAR 0 5
10875: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10876: LD_INT 0
10878: PPUSH
// if not units then
10879: LD_VAR 0 1
10883: NOT
10884: IFFALSE 10888
// exit ;
10886: GO 10971
// result := true ;
10888: LD_ADDR_VAR 0 4
10892: PUSH
10893: LD_INT 1
10895: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_INT 26
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 72
10915: PUSH
10916: LD_INT 1
10918: ARRAY
10919: PPUSH
10920: LD_VAR 0 2
10924: PPUSH
10925: CALL_OW 88
10929: NOT
10930: IFFALSE 10971
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10932: LD_ADDR_VAR 0 4
10936: PUSH
10937: LD_VAR 0 1
10941: PPUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PPUSH
10952: CALL_OW 72
10956: PUSH
10957: LD_INT 1
10959: ARRAY
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: CALL_OW 88
10970: ST_TO_ADDR
// end ;
10971: LD_VAR 0 4
10975: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
// if not group then
10980: LD_VAR 0 2
10984: NOT
10985: IFFALSE 10989
// exit ;
10987: GO 11034
// for i in group do
10989: LD_ADDR_VAR 0 4
10993: PUSH
10994: LD_VAR 0 2
10998: PUSH
10999: FOR_IN
11000: IFFALSE 11032
// if See ( side , i ) then
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_VAR 0 4
11011: PPUSH
11012: CALL_OW 292
11016: IFFALSE 11030
// begin result := true ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// exit ;
11026: POP
11027: POP
11028: GO 11034
// end ;
11030: GO 10999
11032: POP
11033: POP
// end ; end_of_file
11034: LD_VAR 0 3
11038: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11039: LD_INT 0
11041: PPUSH
11042: PPUSH
11043: PPUSH
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
// uc_side := 3 ;
11048: LD_ADDR_OWVAR 20
11052: PUSH
11053: LD_INT 3
11055: ST_TO_ADDR
// uc_nation := 3 ;
11056: LD_ADDR_OWVAR 21
11060: PUSH
11061: LD_INT 3
11063: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11064: LD_ADDR_EXP 53
11068: PUSH
11069: LD_STRING Morozov
11071: PPUSH
11072: CALL_OW 25
11076: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11077: LD_EXP 53
11081: PPUSH
11082: LD_INT 52
11084: PPUSH
11085: CALL_OW 52
// if not gaidarKilled then
11089: LD_EXP 7
11093: NOT
11094: IFFALSE 11127
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11096: LD_ADDR_EXP 54
11100: PUSH
11101: LD_STRING Gaydar
11103: PPUSH
11104: LD_INT 0
11106: PPUSH
11107: LD_STRING 
11109: PPUSH
11110: CALL 29448 0 3
11114: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11115: LD_EXP 54
11119: PPUSH
11120: LD_INT 52
11122: PPUSH
11123: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11127: LD_INT 52
11129: PPUSH
11130: LD_STRING lenin
11132: PPUSH
11133: CALL_OW 500
// ruOutsiders := [ ] ;
11137: LD_ADDR_EXP 56
11141: PUSH
11142: EMPTY
11143: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11144: LD_ADDR_EXP 58
11148: PUSH
11149: EMPTY
11150: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11151: LD_ADDR_EXP 59
11155: PUSH
11156: EMPTY
11157: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11158: LD_ADDR_EXP 60
11162: PUSH
11163: EMPTY
11164: ST_TO_ADDR
// ruAttackers := [ ] ;
11165: LD_ADDR_EXP 61
11169: PUSH
11170: EMPTY
11171: ST_TO_ADDR
// waveStrength := 0 ;
11172: LD_ADDR_EXP 62
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// if not gaidarKilled then
11180: LD_EXP 7
11184: NOT
11185: IFFALSE 11195
// waveStrength := 2 ;
11187: LD_ADDR_EXP 62
11191: PUSH
11192: LD_INT 2
11194: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11195: LD_ADDR_VAR 0 7
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 21
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PPUSH
11224: CALL_OW 69
11228: ST_TO_ADDR
// for i in tmp do
11229: LD_ADDR_VAR 0 2
11233: PUSH
11234: LD_VAR 0 7
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11277
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11242: LD_VAR 0 2
11246: PPUSH
11247: LD_INT 5
11249: PUSH
11250: LD_INT 6
11252: PUSH
11253: LD_INT 7
11255: PUSH
11256: LD_INT 8
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: LD_OWVAR 67
11269: ARRAY
11270: PPUSH
11271: CALL_OW 241
11275: GO 11239
11277: POP
11278: POP
// for i := 1 to 3 do
11279: LD_ADDR_VAR 0 2
11283: PUSH
11284: DOUBLE
11285: LD_INT 1
11287: DEC
11288: ST_TO_ADDR
11289: LD_INT 3
11291: PUSH
11292: FOR_TO
11293: IFFALSE 11331
// begin PrepareHuman ( false , 1 , 0 ) ;
11295: LD_INT 0
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 0
11303: PPUSH
11304: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11308: CALL_OW 44
11312: PPUSH
11313: LD_INT 75
11315: PPUSH
11316: LD_INT 49
11318: PPUSH
11319: LD_INT 3
11321: PPUSH
11322: LD_INT 0
11324: PPUSH
11325: CALL_OW 50
// end ;
11329: GO 11292
11331: POP
11332: POP
// for i := 1 to 4 do
11333: LD_ADDR_VAR 0 2
11337: PUSH
11338: DOUBLE
11339: LD_INT 1
11341: DEC
11342: ST_TO_ADDR
11343: LD_INT 4
11345: PUSH
11346: FOR_TO
11347: IFFALSE 11393
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11349: LD_INT 0
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 2
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 0
11365: PPUSH
11366: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11370: CALL_OW 44
11374: PPUSH
11375: LD_INT 330
11377: PPUSH
11378: LD_INT 231
11380: PPUSH
11381: LD_INT 5
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 50
// end ;
11391: GO 11346
11393: POP
11394: POP
// hc_class := 1 ;
11395: LD_ADDR_OWVAR 28
11399: PUSH
11400: LD_INT 1
11402: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11403: CALL_OW 44
11407: PPUSH
11408: LD_INT 324
11410: PPUSH
11411: LD_INT 219
11413: PPUSH
11414: CALL_OW 428
11418: PPUSH
11419: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11423: CALL_OW 44
11427: PPUSH
11428: LD_INT 316
11430: PPUSH
11431: LD_INT 223
11433: PPUSH
11434: CALL_OW 428
11438: PPUSH
11439: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11443: LD_ADDR_VAR 0 7
11447: PUSH
11448: LD_INT 172
11450: PPUSH
11451: LD_INT 198
11453: PPUSH
11454: CALL_OW 428
11458: PPUSH
11459: CALL_OW 274
11463: PUSH
11464: LD_INT 189
11466: PPUSH
11467: LD_INT 156
11469: PPUSH
11470: CALL_OW 428
11474: PPUSH
11475: CALL_OW 274
11479: PUSH
11480: LD_INT 341
11482: PPUSH
11483: LD_INT 232
11485: PPUSH
11486: CALL_OW 428
11490: PPUSH
11491: CALL_OW 274
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: ST_TO_ADDR
// for i in tmp do
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_VAR 0 7
11510: PUSH
11511: FOR_IN
11512: IFFALSE 11546
// begin SetResourceType ( i , mat_cans , 200 ) ;
11514: LD_VAR 0 2
11518: PPUSH
11519: LD_INT 1
11521: PPUSH
11522: LD_INT 200
11524: PPUSH
11525: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11529: LD_VAR 0 2
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: LD_INT 300
11539: PPUSH
11540: CALL_OW 277
// end ;
11544: GO 11511
11546: POP
11547: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11548: LD_ADDR_VAR 0 7
11552: PUSH
11553: LD_INT 177
11555: PUSH
11556: LD_INT 114
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 138
11565: PUSH
11566: LD_INT 96
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: ST_TO_ADDR
// for i := 1 to tmp do
11577: LD_ADDR_VAR 0 2
11581: PUSH
11582: DOUBLE
11583: LD_INT 1
11585: DEC
11586: ST_TO_ADDR
11587: LD_VAR 0 7
11591: PUSH
11592: FOR_TO
11593: IFFALSE 11676
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11595: LD_INT 0
11597: PPUSH
11598: LD_INT 9
11600: PPUSH
11601: LD_INT 6
11603: PPUSH
11604: CALL_OW 380
// un := CreateHuman ;
11608: LD_ADDR_VAR 0 5
11612: PUSH
11613: CALL_OW 44
11617: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11618: LD_VAR 0 5
11622: PPUSH
11623: LD_INT 2
11625: PPUSH
11626: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11630: LD_VAR 0 5
11634: PPUSH
11635: LD_VAR 0 7
11639: PUSH
11640: LD_VAR 0 2
11644: ARRAY
11645: PUSH
11646: LD_INT 1
11648: ARRAY
11649: PPUSH
11650: LD_VAR 0 7
11654: PUSH
11655: LD_VAR 0 2
11659: ARRAY
11660: PUSH
11661: LD_INT 2
11663: ARRAY
11664: PPUSH
11665: CALL_OW 428
11669: PPUSH
11670: CALL_OW 52
// end ;
11674: GO 11592
11676: POP
11677: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11678: LD_ADDR_VAR 0 7
11682: PUSH
11683: LD_INT 198
11685: PUSH
11686: LD_INT 158
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 203
11695: PUSH
11696: LD_INT 166
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 181
11705: PUSH
11706: LD_INT 209
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 178
11715: PUSH
11716: LD_INT 196
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 181
11725: PUSH
11726: LD_INT 212
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: ST_TO_ADDR
// for i := 1 to tmp do
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: DOUBLE
11746: LD_INT 1
11748: DEC
11749: ST_TO_ADDR
11750: LD_VAR 0 7
11754: PUSH
11755: FOR_TO
11756: IFFALSE 11877
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11758: LD_INT 0
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: LD_INT 6
11772: PUSH
11773: LD_INT 7
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: LD_OWVAR 67
11786: ARRAY
11787: PPUSH
11788: CALL_OW 380
// un := CreateHuman ;
11792: LD_ADDR_VAR 0 5
11796: PUSH
11797: CALL_OW 44
11801: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11802: LD_ADDR_VAR 0 4
11806: PUSH
11807: LD_VAR 0 7
11811: PUSH
11812: LD_VAR 0 2
11816: ARRAY
11817: PUSH
11818: LD_INT 1
11820: ARRAY
11821: PPUSH
11822: LD_VAR 0 7
11826: PUSH
11827: LD_VAR 0 2
11831: ARRAY
11832: PUSH
11833: LD_INT 2
11835: ARRAY
11836: PPUSH
11837: CALL_OW 428
11841: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11842: LD_VAR 0 5
11846: PPUSH
11847: LD_VAR 0 4
11851: PPUSH
11852: CALL 62386 0 1
11856: PPUSH
11857: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11861: LD_VAR 0 5
11865: PPUSH
11866: LD_VAR 0 4
11870: PPUSH
11871: CALL_OW 52
// end ;
11875: GO 11755
11877: POP
11878: POP
// for i := 1 to 3 do
11879: LD_ADDR_VAR 0 2
11883: PUSH
11884: DOUBLE
11885: LD_INT 1
11887: DEC
11888: ST_TO_ADDR
11889: LD_INT 3
11891: PUSH
11892: FOR_TO
11893: IFFALSE 11948
// begin InitHc ;
11895: CALL_OW 19
// uc_nation := 0 ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11907: LD_ADDR_OWVAR 28
11911: PUSH
11912: LD_INT 16
11914: ST_TO_ADDR
// un := CreateHuman ;
11915: LD_ADDR_VAR 0 5
11919: PUSH
11920: CALL_OW 44
11924: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11925: LD_VAR 0 5
11929: PPUSH
11930: LD_INT 194
11932: PPUSH
11933: LD_INT 164
11935: PPUSH
11936: LD_INT 6
11938: PPUSH
11939: LD_INT 0
11941: PPUSH
11942: CALL_OW 50
// end ;
11946: GO 11892
11948: POP
11949: POP
// uc_nation := 3 ;
11950: LD_ADDR_OWVAR 21
11954: PUSH
11955: LD_INT 3
11957: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11958: LD_INT 24
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: LD_INT 44
11969: PPUSH
11970: LD_INT 10
11972: PPUSH
11973: CALL 34288 0 5
// un := CreateVehicle ;
11977: LD_ADDR_VAR 0 5
11981: PUSH
11982: CALL_OW 45
11986: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11987: LD_VAR 0 5
11991: PPUSH
11992: LD_INT 199
11994: PPUSH
11995: LD_INT 166
11997: PPUSH
11998: LD_INT 1
12000: PPUSH
12001: LD_INT 0
12003: PPUSH
12004: CALL 69290 0 5
// ComHold ( un ) ;
12008: LD_VAR 0 5
12012: PPUSH
12013: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12017: LD_INT 0
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: LD_INT 4
12025: PPUSH
12026: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12030: CALL_OW 44
12034: PPUSH
12035: LD_VAR 0 5
12039: PPUSH
12040: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12044: LD_INT 24
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: LD_INT 45
12055: PPUSH
12056: LD_INT 10
12058: PPUSH
12059: CALL 34288 0 5
// un := CreateVehicle ;
12063: LD_ADDR_VAR 0 5
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12073: LD_VAR 0 5
12077: PPUSH
12078: LD_INT 129
12080: PPUSH
12081: LD_INT 93
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: LD_INT 0
12089: PPUSH
12090: CALL 69290 0 5
// ComHold ( un ) ;
12094: LD_VAR 0 5
12098: PPUSH
12099: CALL_OW 140
// if Difficulty > 1 then
12103: LD_OWVAR 67
12107: PUSH
12108: LD_INT 1
12110: GREATER
12111: IFFALSE 12199
// begin PrepareHuman ( false , 3 , 4 ) ;
12113: LD_INT 0
12115: PPUSH
12116: LD_INT 3
12118: PPUSH
12119: LD_INT 4
12121: PPUSH
12122: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12126: CALL_OW 44
12130: PPUSH
12131: LD_VAR 0 5
12135: PPUSH
12136: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12140: LD_INT 24
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_INT 45
12151: PPUSH
12152: LD_INT 10
12154: PPUSH
12155: CALL 34288 0 5
// un := CreateVehicle ;
12159: LD_ADDR_VAR 0 5
12163: PUSH
12164: CALL_OW 45
12168: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12169: LD_VAR 0 5
12173: PPUSH
12174: LD_INT 200
12176: PPUSH
12177: LD_INT 173
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 0
12185: PPUSH
12186: CALL 69290 0 5
// ComHold ( un ) ;
12190: LD_VAR 0 5
12194: PPUSH
12195: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12199: LD_INT 0
12201: PPUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12212: CALL_OW 44
12216: PPUSH
12217: LD_VAR 0 5
12221: PPUSH
12222: CALL_OW 52
// bc_type := b_armoury ;
12226: LD_ADDR_OWVAR 42
12230: PUSH
12231: LD_INT 4
12233: ST_TO_ADDR
// if Difficulty > 1 then
12234: LD_OWVAR 67
12238: PUSH
12239: LD_INT 1
12241: GREATER
12242: IFFALSE 12252
// bc_type := b_barracks ;
12244: LD_ADDR_OWVAR 42
12248: PUSH
12249: LD_INT 5
12251: ST_TO_ADDR
// bc_level := 6 ;
12252: LD_ADDR_OWVAR 43
12256: PUSH
12257: LD_INT 6
12259: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12260: LD_INT 120
12262: PPUSH
12263: LD_INT 100
12265: PPUSH
12266: LD_INT 5
12268: PPUSH
12269: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: DOUBLE
12279: LD_INT 1
12281: DEC
12282: ST_TO_ADDR
12283: LD_INT 3
12285: PUSH
12286: LD_INT 3
12288: PUSH
12289: LD_INT 4
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PUSH
12301: LD_OWVAR 67
12305: ARRAY
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12366
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12310: LD_INT 0
12312: PPUSH
12313: LD_INT 1
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: LD_INT 9
12321: PUSH
12322: LD_INT 9
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PPUSH
12337: LD_INT 5
12339: PPUSH
12340: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12344: CALL_OW 44
12348: PPUSH
12349: LD_INT 120
12351: PPUSH
12352: LD_INT 100
12354: PPUSH
12355: CALL_OW 428
12359: PPUSH
12360: CALL_OW 52
// end ;
12364: GO 12307
12366: POP
12367: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12368: LD_ADDR_VAR 0 7
12372: PUSH
12373: LD_INT 135
12375: PUSH
12376: LD_INT 100
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 137
12385: PUSH
12386: LD_INT 92
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: ST_TO_ADDR
// for i := 1 to tmp do
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: DOUBLE
12403: LD_INT 1
12405: DEC
12406: ST_TO_ADDR
12407: LD_VAR 0 7
12411: PUSH
12412: FOR_TO
12413: IFFALSE 12583
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12415: LD_INT 22
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 24
12423: PUSH
12424: LD_INT 24
12426: PUSH
12427: LD_INT 24
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: LD_OWVAR 67
12441: PUSH
12442: LD_INT 0
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 12
12452: PLUS
12453: ARRAY
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: LD_INT 1
12460: PPUSH
12461: LD_INT 44
12463: PPUSH
12464: LD_INT 25
12466: PPUSH
12467: CALL 34288 0 5
// veh := CreateVehicle ;
12471: LD_ADDR_VAR 0 6
12475: PUSH
12476: CALL_OW 45
12480: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_INT 2
12488: PPUSH
12489: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12493: LD_VAR 0 6
12497: PPUSH
12498: LD_VAR 0 7
12502: PUSH
12503: LD_VAR 0 2
12507: ARRAY
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PPUSH
12513: LD_VAR 0 7
12517: PUSH
12518: LD_VAR 0 2
12522: ARRAY
12523: PUSH
12524: LD_INT 2
12526: ARRAY
12527: PPUSH
12528: LD_INT 0
12530: PPUSH
12531: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12535: LD_INT 0
12537: PPUSH
12538: LD_INT 3
12540: PPUSH
12541: LD_INT 6
12543: PPUSH
12544: CALL_OW 380
// un := CreateHuman ;
12548: LD_ADDR_VAR 0 5
12552: PUSH
12553: CALL_OW 44
12557: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12558: LD_VAR 0 5
12562: PPUSH
12563: LD_VAR 0 6
12567: PPUSH
12568: CALL_OW 52
// ComHold ( veh ) ;
12572: LD_VAR 0 6
12576: PPUSH
12577: CALL_OW 140
// end ;
12581: GO 12412
12583: POP
12584: POP
// tmp := [ 191 , 122 ] ;
12585: LD_ADDR_VAR 0 7
12589: PUSH
12590: LD_INT 191
12592: PUSH
12593: LD_INT 122
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12600: LD_INT 24
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: LD_INT 44
12611: PPUSH
12612: LD_INT 30
12614: PPUSH
12615: CALL 34288 0 5
// ruBlockadeTank := CreateVehicle ;
12619: LD_ADDR_EXP 55
12623: PUSH
12624: CALL_OW 45
12628: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12629: LD_EXP 55
12633: PPUSH
12634: LD_INT 2
12636: PPUSH
12637: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12641: LD_EXP 55
12645: PPUSH
12646: LD_INT 191
12648: PPUSH
12649: LD_INT 122
12651: PPUSH
12652: LD_INT 0
12654: PPUSH
12655: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12659: LD_INT 1
12661: PPUSH
12662: LD_INT 5
12664: PUSH
12665: LD_INT 6
12667: PUSH
12668: LD_INT 7
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_OWVAR 67
12680: PUSH
12681: LD_INT 1
12683: MINUS
12684: ARRAY
12685: PPUSH
12686: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12690: CALL_OW 44
12694: PPUSH
12695: LD_EXP 55
12699: PPUSH
12700: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12704: LD_EXP 55
12708: PPUSH
12709: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12713: LD_ADDR_EXP 57
12717: PUSH
12718: EMPTY
12719: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: DOUBLE
12726: LD_INT 1
12728: DEC
12729: ST_TO_ADDR
12730: LD_INT 2
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_OWVAR 67
12752: ARRAY
12753: PUSH
12754: FOR_TO
12755: IFFALSE 12871
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12757: LD_INT 0
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: LD_INT 4
12765: PUSH
12766: LD_INT 5
12768: PUSH
12769: LD_INT 6
12771: PUSH
12772: LD_INT 7
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: PUSH
12781: LD_OWVAR 67
12785: ARRAY
12786: PPUSH
12787: CALL_OW 380
// un := CreateHuman ;
12791: LD_ADDR_VAR 0 5
12795: PUSH
12796: CALL_OW 44
12800: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12801: LD_VAR 0 5
12805: PPUSH
12806: LD_INT 9
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12816: LD_VAR 0 5
12820: PPUSH
12821: LD_INT 198
12823: PPUSH
12824: LD_INT 129
12826: PPUSH
12827: CALL_OW 118
// AddComCrawl ( un ) ;
12831: LD_VAR 0 5
12835: PPUSH
12836: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12840: LD_ADDR_EXP 57
12844: PUSH
12845: LD_EXP 57
12849: PPUSH
12850: LD_EXP 57
12854: PUSH
12855: LD_INT 1
12857: PLUS
12858: PPUSH
12859: LD_VAR 0 5
12863: PPUSH
12864: CALL_OW 1
12868: ST_TO_ADDR
// end ;
12869: GO 12754
12871: POP
12872: POP
// PrepareHuman ( false , 4 , 5 ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 4
12878: PPUSH
12879: LD_INT 5
12881: PPUSH
12882: CALL_OW 380
// un := CreateHuman ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: CALL_OW 44
12895: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12896: LD_VAR 0 5
12900: PPUSH
12901: LD_INT 179
12903: PPUSH
12904: LD_INT 113
12906: PPUSH
12907: LD_INT 0
12909: PPUSH
12910: CALL_OW 48
// ComHold ( un ) ;
12914: LD_VAR 0 5
12918: PPUSH
12919: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12923: LD_ADDR_EXP 57
12927: PUSH
12928: LD_EXP 57
12932: PPUSH
12933: LD_EXP 57
12937: PUSH
12938: LD_INT 1
12940: PLUS
12941: PPUSH
12942: LD_VAR 0 5
12946: PPUSH
12947: CALL_OW 1
12951: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12952: LD_ADDR_VAR 0 7
12956: PUSH
12957: LD_INT 167
12959: PPUSH
12960: LD_INT 243
12962: PPUSH
12963: CALL_OW 428
12967: PPUSH
12968: CALL_OW 274
12972: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12973: LD_VAR 0 7
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: LD_INT 1000
12983: PPUSH
12984: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12988: LD_VAR 0 7
12992: PPUSH
12993: LD_INT 2
12995: PPUSH
12996: LD_INT 400
12998: PPUSH
12999: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13003: LD_ADDR_VAR 0 7
13007: PUSH
13008: LD_INT 169
13010: PPUSH
13011: LD_INT 229
13013: PPUSH
13014: CALL_OW 428
13018: ST_TO_ADDR
// for i := 1 to 3 do
13019: LD_ADDR_VAR 0 2
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_INT 3
13031: PUSH
13032: FOR_TO
13033: IFFALSE 13124
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13035: LD_INT 0
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_INT 4
13043: PUSH
13044: LD_INT 5
13046: PUSH
13047: LD_INT 5
13049: PUSH
13050: LD_INT 6
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_OWVAR 67
13063: ARRAY
13064: PPUSH
13065: CALL_OW 380
// un := CreateHuman ;
13069: LD_ADDR_VAR 0 5
13073: PUSH
13074: CALL_OW 44
13078: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13079: LD_VAR 0 5
13083: PPUSH
13084: LD_VAR 0 7
13088: PPUSH
13089: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13093: LD_ADDR_EXP 58
13097: PUSH
13098: LD_EXP 58
13102: PPUSH
13103: LD_EXP 58
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: PPUSH
13112: LD_VAR 0 5
13116: PPUSH
13117: CALL_OW 1
13121: ST_TO_ADDR
// end ;
13122: GO 13032
13124: POP
13125: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13126: LD_ADDR_VAR 0 7
13130: PUSH
13131: LD_INT 165
13133: PUSH
13134: LD_INT 227
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 173
13143: PUSH
13144: LD_INT 231
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: ST_TO_ADDR
// for i := 1 to tmp do
13155: LD_ADDR_VAR 0 2
13159: PUSH
13160: DOUBLE
13161: LD_INT 1
13163: DEC
13164: ST_TO_ADDR
13165: LD_VAR 0 7
13169: PUSH
13170: FOR_TO
13171: IFFALSE 13292
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13173: LD_INT 0
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 4
13181: PUSH
13182: LD_INT 5
13184: PUSH
13185: LD_INT 5
13187: PUSH
13188: LD_INT 6
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: LD_OWVAR 67
13201: ARRAY
13202: PPUSH
13203: CALL_OW 380
// un := CreateHuman ;
13207: LD_ADDR_VAR 0 5
13211: PUSH
13212: CALL_OW 44
13216: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13217: LD_VAR 0 5
13221: PPUSH
13222: LD_VAR 0 7
13226: PUSH
13227: LD_VAR 0 2
13231: ARRAY
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PPUSH
13237: LD_VAR 0 7
13241: PUSH
13242: LD_VAR 0 2
13246: ARRAY
13247: PUSH
13248: LD_INT 2
13250: ARRAY
13251: PPUSH
13252: CALL_OW 428
13256: PPUSH
13257: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13261: LD_ADDR_EXP 58
13265: PUSH
13266: LD_EXP 58
13270: PPUSH
13271: LD_EXP 58
13275: PUSH
13276: LD_INT 1
13278: PLUS
13279: PPUSH
13280: LD_VAR 0 5
13284: PPUSH
13285: CALL_OW 1
13289: ST_TO_ADDR
// end ;
13290: GO 13170
13292: POP
13293: POP
// for i := 1 to 2 do
13294: LD_ADDR_VAR 0 2
13298: PUSH
13299: DOUBLE
13300: LD_INT 1
13302: DEC
13303: ST_TO_ADDR
13304: LD_INT 2
13306: PUSH
13307: FOR_TO
13308: IFFALSE 13363
// begin InitHc ;
13310: CALL_OW 19
// uc_nation := 0 ;
13314: LD_ADDR_OWVAR 21
13318: PUSH
13319: LD_INT 0
13321: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13322: LD_ADDR_OWVAR 28
13326: PUSH
13327: LD_INT 16
13329: ST_TO_ADDR
// un := CreateHuman ;
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: CALL_OW 44
13339: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13340: LD_VAR 0 5
13344: PPUSH
13345: LD_INT 166
13347: PPUSH
13348: LD_INT 233
13350: PPUSH
13351: LD_INT 2
13353: PPUSH
13354: LD_INT 0
13356: PPUSH
13357: CALL_OW 50
// end ;
13361: GO 13307
13363: POP
13364: POP
// uc_nation := 3 ;
13365: LD_ADDR_OWVAR 21
13369: PUSH
13370: LD_INT 3
13372: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13373: LD_ADDR_VAR 0 7
13377: PUSH
13378: LD_INT 71
13380: PUSH
13381: LD_INT 52
13383: PUSH
13384: LD_INT 11
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: ST_TO_ADDR
// for i in tmp do
13392: LD_ADDR_VAR 0 2
13396: PUSH
13397: LD_VAR 0 7
13401: PUSH
13402: FOR_IN
13403: IFFALSE 13447
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13405: LD_VAR 0 2
13409: PPUSH
13410: CALL_OW 274
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: LD_INT 3000
13420: PPUSH
13421: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13425: LD_VAR 0 2
13429: PPUSH
13430: CALL_OW 274
13434: PPUSH
13435: LD_INT 2
13437: PPUSH
13438: LD_INT 600
13440: PPUSH
13441: CALL_OW 277
// end ;
13445: GO 13402
13447: POP
13448: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13449: LD_ADDR_VAR 0 7
13453: PUSH
13454: LD_INT 41
13456: PUSH
13457: LD_INT 57
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 38
13466: PUSH
13467: LD_INT 55
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 50
13476: PUSH
13477: LD_INT 73
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 51
13486: PUSH
13487: LD_INT 65
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 82
13496: PUSH
13497: LD_INT 93
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 87
13506: PUSH
13507: LD_INT 100
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 91
13516: PUSH
13517: LD_INT 109
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 84
13526: PUSH
13527: LD_INT 120
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 113
13536: PUSH
13537: LD_INT 153
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 123
13546: PUSH
13547: LD_INT 171
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 125
13556: PUSH
13557: LD_INT 178
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 125
13566: PUSH
13567: LD_INT 188
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 125
13576: PUSH
13577: LD_INT 201
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 33
13586: PUSH
13587: LD_INT 60
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 76
13596: PUSH
13597: LD_INT 95
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 84
13606: PUSH
13607: LD_INT 111
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 112
13616: PUSH
13617: LD_INT 165
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: ST_TO_ADDR
// for i := 1 to tmp do
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: DOUBLE
13649: LD_INT 1
13651: DEC
13652: ST_TO_ADDR
13653: LD_VAR 0 7
13657: PUSH
13658: FOR_TO
13659: IFFALSE 13906
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13661: LD_ADDR_VAR 0 4
13665: PUSH
13666: LD_VAR 0 7
13670: PUSH
13671: LD_VAR 0 2
13675: ARRAY
13676: PUSH
13677: LD_INT 1
13679: ARRAY
13680: PPUSH
13681: LD_VAR 0 7
13685: PUSH
13686: LD_VAR 0 2
13690: ARRAY
13691: PUSH
13692: LD_INT 2
13694: ARRAY
13695: PPUSH
13696: CALL_OW 428
13700: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13701: LD_VAR 0 4
13705: PPUSH
13706: CALL_OW 266
13710: PUSH
13711: LD_INT 4
13713: PUSH
13714: LD_INT 5
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: IN
13721: IFFALSE 13817
// begin for j := 1 to Difficulty do
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: DOUBLE
13729: LD_INT 1
13731: DEC
13732: ST_TO_ADDR
13733: LD_OWVAR 67
13737: PUSH
13738: FOR_TO
13739: IFFALSE 13813
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13741: LD_INT 0
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: LD_INT 6
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_OWVAR 67
13769: ARRAY
13770: PPUSH
13771: CALL_OW 380
// un := CreateHuman ;
13775: LD_ADDR_VAR 0 5
13779: PUSH
13780: CALL_OW 44
13784: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13785: LD_VAR 0 5
13789: PPUSH
13790: LD_VAR 0 4
13794: PPUSH
13795: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13799: LD_VAR 0 5
13803: PPUSH
13804: LD_INT 9
13806: PPUSH
13807: CALL_OW 336
// end ;
13811: GO 13738
13813: POP
13814: POP
// end else
13815: GO 13875
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13817: LD_INT 0
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 5
13828: PUSH
13829: LD_INT 5
13831: PUSH
13832: LD_INT 6
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_OWVAR 67
13845: ARRAY
13846: PPUSH
13847: CALL_OW 380
// un := CreateHuman ;
13851: LD_ADDR_VAR 0 5
13855: PUSH
13856: CALL_OW 44
13860: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13861: LD_VAR 0 5
13865: PPUSH
13866: LD_VAR 0 4
13870: PPUSH
13871: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13875: LD_ADDR_EXP 59
13879: PUSH
13880: LD_EXP 59
13884: PPUSH
13885: LD_EXP 59
13889: PUSH
13890: LD_INT 1
13892: PLUS
13893: PPUSH
13894: LD_VAR 0 5
13898: PPUSH
13899: CALL_OW 1
13903: ST_TO_ADDR
// end ;
13904: GO 13658
13906: POP
13907: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13908: LD_ADDR_VAR 0 4
13912: PUSH
13913: LD_INT 10
13915: PPUSH
13916: LD_INT 22
13918: PUSH
13919: LD_INT 3
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 30
13928: PUSH
13929: LD_INT 32
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 58
13938: PUSH
13939: EMPTY
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: PPUSH
13947: CALL_OW 70
13951: PUSH
13952: FOR_IN
13953: IFFALSE 14087
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13955: LD_INT 40
13957: PUSH
13958: LD_INT 50
13960: PUSH
13961: LD_INT 75
13963: PUSH
13964: LD_INT 80
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: LD_OWVAR 67
13977: ARRAY
13978: PUSH
13979: LD_EXP 7
13983: PUSH
13984: LD_INT 10
13986: MUL
13987: MINUS
13988: PPUSH
13989: CALL_OW 13
13993: NOT
13994: IFFALSE 13998
// continue ;
13996: GO 13952
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13998: LD_INT 0
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 4
14006: PUSH
14007: LD_INT 5
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: LD_INT 6
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: PUSH
14022: LD_OWVAR 67
14026: ARRAY
14027: PPUSH
14028: CALL_OW 380
// un := CreateHuman ;
14032: LD_ADDR_VAR 0 5
14036: PUSH
14037: CALL_OW 44
14041: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14042: LD_VAR 0 5
14046: PPUSH
14047: LD_VAR 0 4
14051: PPUSH
14052: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14056: LD_ADDR_EXP 59
14060: PUSH
14061: LD_EXP 59
14065: PPUSH
14066: LD_EXP 59
14070: PUSH
14071: LD_INT 1
14073: PLUS
14074: PPUSH
14075: LD_VAR 0 5
14079: PPUSH
14080: CALL_OW 1
14084: ST_TO_ADDR
// end ;
14085: GO 13952
14087: POP
14088: POP
// for i := 1 to 5 do
14089: LD_ADDR_VAR 0 2
14093: PUSH
14094: DOUBLE
14095: LD_INT 1
14097: DEC
14098: ST_TO_ADDR
14099: LD_INT 5
14101: PUSH
14102: FOR_TO
14103: IFFALSE 14201
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14105: LD_INT 0
14107: PPUSH
14108: LD_INT 2
14110: PPUSH
14111: LD_INT 4
14113: PUSH
14114: LD_INT 5
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 6
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: PUSH
14129: LD_OWVAR 67
14133: ARRAY
14134: PPUSH
14135: CALL_OW 380
// un := CreateHuman ;
14139: LD_ADDR_VAR 0 5
14143: PUSH
14144: CALL_OW 44
14148: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14149: LD_VAR 0 5
14153: PPUSH
14154: LD_INT 66
14156: PPUSH
14157: LD_INT 101
14159: PPUSH
14160: LD_INT 3
14162: PPUSH
14163: LD_INT 0
14165: PPUSH
14166: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14170: LD_ADDR_EXP 59
14174: PUSH
14175: LD_EXP 59
14179: PPUSH
14180: LD_EXP 59
14184: PUSH
14185: LD_INT 1
14187: PLUS
14188: PPUSH
14189: LD_VAR 0 5
14193: PPUSH
14194: CALL_OW 1
14198: ST_TO_ADDR
// end ;
14199: GO 14102
14201: POP
14202: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14203: LD_ADDR_VAR 0 7
14207: PUSH
14208: LD_INT 72
14210: PUSH
14211: LD_INT 12
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: ST_TO_ADDR
// for i := 1 to tmp do
14218: LD_ADDR_VAR 0 2
14222: PUSH
14223: DOUBLE
14224: LD_INT 1
14226: DEC
14227: ST_TO_ADDR
14228: LD_VAR 0 7
14232: PUSH
14233: FOR_TO
14234: IFFALSE 14351
// for j := 1 to 6 do
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_INT 6
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14347
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14252: LD_INT 0
14254: PPUSH
14255: LD_INT 3
14257: PPUSH
14258: LD_INT 4
14260: PUSH
14261: LD_INT 5
14263: PUSH
14264: LD_INT 5
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: LD_OWVAR 67
14280: ARRAY
14281: PPUSH
14282: CALL_OW 380
// un := CreateHuman ;
14286: LD_ADDR_VAR 0 5
14290: PUSH
14291: CALL_OW 44
14295: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14296: LD_VAR 0 5
14300: PPUSH
14301: LD_VAR 0 7
14305: PUSH
14306: LD_VAR 0 2
14310: ARRAY
14311: PPUSH
14312: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14316: LD_ADDR_EXP 59
14320: PUSH
14321: LD_EXP 59
14325: PPUSH
14326: LD_EXP 59
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: PPUSH
14335: LD_VAR 0 5
14339: PPUSH
14340: CALL_OW 1
14344: ST_TO_ADDR
// end ;
14345: GO 14249
14347: POP
14348: POP
14349: GO 14233
14351: POP
14352: POP
// for i := 1 to 3 do
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: DOUBLE
14359: LD_INT 1
14361: DEC
14362: ST_TO_ADDR
14363: LD_INT 3
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14456
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14369: LD_INT 0
14371: PPUSH
14372: LD_INT 4
14374: PPUSH
14375: LD_INT 4
14377: PUSH
14378: LD_INT 5
14380: PUSH
14381: LD_INT 5
14383: PUSH
14384: LD_INT 6
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: LD_OWVAR 67
14397: ARRAY
14398: PPUSH
14399: CALL_OW 380
// un := CreateHuman ;
14403: LD_ADDR_VAR 0 5
14407: PUSH
14408: CALL_OW 44
14412: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14413: LD_VAR 0 5
14417: PPUSH
14418: LD_INT 17
14420: PPUSH
14421: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14425: LD_ADDR_EXP 59
14429: PUSH
14430: LD_EXP 59
14434: PPUSH
14435: LD_EXP 59
14439: PUSH
14440: LD_INT 1
14442: PLUS
14443: PPUSH
14444: LD_VAR 0 5
14448: PPUSH
14449: CALL_OW 1
14453: ST_TO_ADDR
// end ;
14454: GO 14366
14456: POP
14457: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: DOUBLE
14464: LD_INT 1
14466: DEC
14467: ST_TO_ADDR
14468: LD_INT 2
14470: PUSH
14471: LD_INT 3
14473: PUSH
14474: LD_INT 3
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PUSH
14486: LD_OWVAR 67
14490: ARRAY
14491: PUSH
14492: FOR_TO
14493: IFFALSE 14613
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14495: LD_INT 22
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: LD_INT 1
14503: PPUSH
14504: LD_INT 52
14506: PPUSH
14507: LD_INT 100
14509: PPUSH
14510: CALL 34288 0 5
// veh := CreateVehicle ;
14514: LD_ADDR_VAR 0 6
14518: PUSH
14519: CALL_OW 45
14523: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14524: LD_INT 0
14526: PPUSH
14527: LD_INT 3
14529: PPUSH
14530: LD_INT 4
14532: PPUSH
14533: CALL_OW 380
// un := CreateHuman ;
14537: LD_ADDR_VAR 0 5
14541: PUSH
14542: CALL_OW 44
14546: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14547: LD_VAR 0 6
14551: PPUSH
14552: LD_INT 107
14554: PPUSH
14555: LD_INT 182
14557: PPUSH
14558: LD_INT 4
14560: PPUSH
14561: LD_INT 0
14563: PPUSH
14564: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14568: LD_VAR 0 5
14572: PPUSH
14573: LD_VAR 0 6
14577: PPUSH
14578: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14582: LD_ADDR_EXP 59
14586: PUSH
14587: LD_EXP 59
14591: PPUSH
14592: LD_EXP 59
14596: PUSH
14597: LD_INT 1
14599: PLUS
14600: PPUSH
14601: LD_VAR 0 5
14605: PPUSH
14606: CALL_OW 1
14610: ST_TO_ADDR
// end ;
14611: GO 14492
14613: POP
14614: POP
// InitHc ;
14615: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14619: LD_ADDR_VAR 0 2
14623: PUSH
14624: DOUBLE
14625: LD_INT 1
14627: DEC
14628: ST_TO_ADDR
14629: LD_INT 3
14631: PUSH
14632: LD_INT 5
14634: PUSH
14635: LD_INT 6
14637: PUSH
14638: LD_INT 8
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_OWVAR 67
14651: ARRAY
14652: PUSH
14653: FOR_TO
14654: IFFALSE 14749
// begin uc_nation := 0 ;
14656: LD_ADDR_OWVAR 21
14660: PUSH
14661: LD_INT 0
14663: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14664: LD_ADDR_OWVAR 28
14668: PUSH
14669: LD_INT 15
14671: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14672: LD_ADDR_OWVAR 31
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: LD_INT 0
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// un := CreateHuman ;
14695: LD_ADDR_VAR 0 5
14699: PUSH
14700: CALL_OW 44
14704: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14705: LD_VAR 0 5
14709: PPUSH
14710: LD_INT 269
14712: PUSH
14713: LD_INT 300
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_VAR 0 2
14724: PUSH
14725: LD_INT 2
14727: MOD
14728: PUSH
14729: LD_INT 1
14731: PLUS
14732: ARRAY
14733: PPUSH
14734: LD_INT 182
14736: PPUSH
14737: LD_INT 4
14739: PPUSH
14740: LD_INT 0
14742: PPUSH
14743: CALL_OW 50
// end ;
14747: GO 14653
14749: POP
14750: POP
// uc_nation := 3 ;
14751: LD_ADDR_OWVAR 21
14755: PUSH
14756: LD_INT 3
14758: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14759: LD_EXP 8
14763: PUSH
14764: LD_INT 10
14766: PUSH
14767: LD_INT 8
14769: PUSH
14770: LD_INT 6
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: LD_OWVAR 67
14786: ARRAY
14787: LESS
14788: IFFALSE 14867
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14790: LD_INT 21
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: LD_INT 51
14801: PPUSH
14802: LD_INT 12
14804: PPUSH
14805: CALL 34288 0 5
// veh := CreateVehicle ;
14809: LD_ADDR_VAR 0 6
14813: PUSH
14814: CALL_OW 45
14818: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14819: LD_VAR 0 6
14823: PPUSH
14824: LD_INT 269
14826: PPUSH
14827: LD_INT 66
14829: PPUSH
14830: LD_INT 4
14832: PPUSH
14833: LD_INT 0
14835: PPUSH
14836: CALL 69290 0 5
// SetLives ( veh , 333 ) ;
14840: LD_VAR 0 6
14844: PPUSH
14845: LD_INT 333
14847: PPUSH
14848: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14852: LD_VAR 0 6
14856: PPUSH
14857: LD_INT 2
14859: PPUSH
14860: LD_INT 100
14862: PPUSH
14863: CALL_OW 290
// end ; end ;
14867: LD_VAR 0 1
14871: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14872: LD_EXP 55
14876: PUSH
14877: LD_EXP 55
14881: PPUSH
14882: CALL_OW 255
14886: PUSH
14887: LD_INT 3
14889: EQUAL
14890: AND
14891: IFFALSE 15054
14893: GO 14895
14895: DISABLE
14896: LD_INT 0
14898: PPUSH
// begin enable ;
14899: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14900: LD_INT 81
14902: PUSH
14903: LD_INT 3
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 91
14912: PUSH
14913: LD_EXP 55
14917: PUSH
14918: LD_INT 15
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: IFFALSE 15014
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14936: LD_EXP 55
14940: PPUSH
14941: CALL_OW 311
14945: NOT
14946: IFFALSE 15012
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 21
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: PPUSH
14982: LD_EXP 55
14986: PPUSH
14987: CALL_OW 74
14991: ST_TO_ADDR
// if driver then
14992: LD_VAR 0 1
14996: IFFALSE 15012
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: LD_EXP 55
15007: PPUSH
15008: CALL_OW 120
// end ; exit ;
15012: GO 15054
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15014: LD_EXP 55
15018: PPUSH
15019: CALL_OW 256
15023: PUSH
15024: LD_INT 1000
15026: LESS
15027: PUSH
15028: LD_EXP 55
15032: PPUSH
15033: CALL_OW 311
15037: AND
15038: IFFALSE 15054
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15040: LD_EXP 55
15044: PPUSH
15045: CALL_OW 311
15049: PPUSH
15050: CALL 68850 0 1
// end ;
15054: PPOPN 1
15056: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15057: LD_EXP 57
15061: PPUSH
15062: LD_INT 3
15064: PUSH
15065: LD_INT 24
15067: PUSH
15068: LD_INT 1000
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 72
15083: PUSH
15084: LD_EXP 57
15088: PPUSH
15089: LD_INT 25
15091: PUSH
15092: LD_INT 4
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 50
15101: PUSH
15102: EMPTY
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 72
15113: AND
15114: IFFALSE 15302
15116: GO 15118
15118: DISABLE
15119: LD_INT 0
15121: PPUSH
15122: PPUSH
15123: PPUSH
// begin enable ;
15124: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_EXP 57
15134: PPUSH
15135: LD_INT 3
15137: PUSH
15138: LD_INT 24
15140: PUSH
15141: LD_INT 1000
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: CALL_OW 72
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL 69090 0 2
15164: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15165: LD_ADDR_VAR 0 2
15169: PUSH
15170: LD_EXP 57
15174: PPUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 4
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 50
15187: PUSH
15188: EMPTY
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 72
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15204: LD_VAR 0 2
15208: PPUSH
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: CALL 64431 0 2
15222: NOT
15223: IFFALSE 15302
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 1
15232: ARRAY
15233: PPUSH
15234: LD_INT 9
15236: PPUSH
15237: CALL_OW 308
15241: NOT
15242: IFFALSE 15260
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15244: LD_VAR 0 3
15248: PUSH
15249: LD_INT 1
15251: ARRAY
15252: PPUSH
15253: LD_INT 9
15255: PPUSH
15256: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15260: LD_VAR 0 2
15264: PPUSH
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15278: LD_VAR 0 2
15282: PPUSH
15283: LD_INT 179
15285: PPUSH
15286: LD_INT 113
15288: PPUSH
15289: CALL_OW 171
// AddComHold ( sci ) ;
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 200
// end ; end ;
15302: PPOPN 3
15304: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
15305: LD_INT 2
15307: PPUSH
15308: LD_INT 52
15310: PPUSH
15311: CALL_OW 292
15315: IFFALSE 15420
15317: GO 15319
15319: DISABLE
15320: LD_INT 0
15322: PPUSH
15323: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15324: LD_ADDR_VAR 0 2
15328: PUSH
15329: LD_EXP 59
15333: PPUSH
15334: LD_INT 25
15336: PUSH
15337: LD_INT 1
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 50
15346: PUSH
15347: EMPTY
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 72
15358: ST_TO_ADDR
// if not tmp then
15359: LD_VAR 0 2
15363: NOT
15364: IFFALSE 15368
// exit ;
15366: GO 15420
// for i in tmp do
15368: LD_ADDR_VAR 0 1
15372: PUSH
15373: LD_VAR 0 2
15377: PUSH
15378: FOR_IN
15379: IFFALSE 15418
// begin if IsInUnit ( i ) then
15381: LD_VAR 0 1
15385: PPUSH
15386: CALL_OW 310
15390: IFFALSE 15401
// ComExitBuilding ( i ) ;
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15401: LD_VAR 0 1
15405: PPUSH
15406: LD_INT 84
15408: PPUSH
15409: LD_INT 133
15411: PPUSH
15412: CALL_OW 174
// end ;
15416: GO 15378
15418: POP
15419: POP
// end ;
15420: PPOPN 2
15422: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15423: LD_EXP 14
15427: IFFALSE 15608
15429: GO 15431
15431: DISABLE
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15437: LD_ADDR_VAR 0 2
15441: PUSH
15442: LD_INT 72
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_INT 44
15459: PUSH
15460: LD_INT 43
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 45
15469: PUSH
15470: LD_INT 44
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 45
15479: PUSH
15480: LD_INT 46
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 45
15489: PUSH
15490: LD_INT 46
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: PUSH
15503: LD_OWVAR 67
15507: ARRAY
15508: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15509: LD_ADDR_VAR 0 1
15513: PUSH
15514: DOUBLE
15515: LD_INT 1
15517: DEC
15518: ST_TO_ADDR
15519: LD_INT 1
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_OWVAR 67
15541: ARRAY
15542: PUSH
15543: FOR_TO
15544: IFFALSE 15606
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15546: LD_VAR 0 2
15550: PPUSH
15551: LD_INT 22
15553: PUSH
15554: LD_INT 23
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_VAR 0 1
15565: PUSH
15566: LD_INT 2
15568: MOD
15569: PUSH
15570: LD_INT 1
15572: PLUS
15573: ARRAY
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 1
15590: PUSH
15591: LD_INT 2
15593: MOD
15594: PUSH
15595: LD_INT 1
15597: PLUS
15598: ARRAY
15599: PPUSH
15600: CALL_OW 185
15604: GO 15543
15606: POP
15607: POP
// end ;
15608: PPOPN 3
15610: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15611: LD_EXP 11
15615: IFFALSE 16764
15617: GO 15619
15619: DISABLE
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
// begin enable ;
15628: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15629: LD_ADDR_VAR 0 6
15633: PUSH
15634: LD_INT 10
15636: PPUSH
15637: LD_INT 81
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 70
15651: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15652: LD_EXP 60
15656: IFFALSE 15922
// begin for i in ruSpecialVehicleGroup do
15658: LD_ADDR_VAR 0 1
15662: PUSH
15663: LD_EXP 60
15667: PUSH
15668: FOR_IN
15669: IFFALSE 15920
// begin if enemyInBase then
15671: LD_VAR 0 6
15675: IFFALSE 15918
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 256
15686: PUSH
15687: LD_INT 500
15689: GREATER
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 110
15700: PUSH
15701: LD_INT 0
15703: EQUAL
15704: AND
15705: IFFALSE 15731
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15707: LD_VAR 0 1
15711: PPUSH
15712: LD_VAR 0 6
15716: PPUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 74
15726: PPUSH
15727: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 256
15740: PUSH
15741: LD_INT 500
15743: LESSEQUAL
15744: PUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 110
15754: PUSH
15755: LD_INT 0
15757: EQUAL
15758: AND
15759: IFFALSE 15788
// begin SetTag ( i , 1 ) ;
15761: LD_VAR 0 1
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15773: LD_VAR 0 1
15777: PPUSH
15778: LD_INT 83
15780: PPUSH
15781: LD_INT 134
15783: PPUSH
15784: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL_OW 256
15797: PUSH
15798: LD_INT 1000
15800: LESS
15801: PUSH
15802: LD_VAR 0 1
15806: PPUSH
15807: CALL_OW 110
15811: PUSH
15812: LD_INT 1
15814: EQUAL
15815: AND
15816: PUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: LD_INT 83
15824: PPUSH
15825: LD_INT 134
15827: PPUSH
15828: CALL_OW 297
15832: PUSH
15833: LD_INT 6
15835: LESS
15836: AND
15837: IFFALSE 15865
// begin SetFuel ( i , 100 ) ;
15839: LD_VAR 0 1
15843: PPUSH
15844: LD_INT 100
15846: PPUSH
15847: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 310
15860: PPUSH
15861: CALL 68970 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 256
15874: PUSH
15875: LD_INT 1000
15877: EQUAL
15878: PUSH
15879: LD_VAR 0 1
15883: PPUSH
15884: CALL_OW 110
15888: PUSH
15889: LD_INT 1
15891: EQUAL
15892: AND
15893: PUSH
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 311
15903: AND
15904: IFFALSE 15918
// SetTag ( i , 0 ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_INT 0
15913: PPUSH
15914: CALL_OW 109
// end ; end ;
15918: GO 15668
15920: POP
15921: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15922: LD_ADDR_VAR 0 5
15926: PUSH
15927: LD_EXP 59
15931: PPUSH
15932: LD_INT 25
15934: PUSH
15935: LD_INT 4
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 72
15946: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15947: LD_ADDR_VAR 0 4
15951: PUSH
15952: LD_EXP 59
15956: PPUSH
15957: LD_INT 92
15959: PUSH
15960: LD_INT 92
15962: PUSH
15963: LD_INT 155
15965: PUSH
15966: LD_INT 12
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 24
15980: PUSH
15981: LD_INT 1000
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 72
16000: ST_TO_ADDR
// if sci then
16001: LD_VAR 0 5
16005: IFFALSE 16138
// begin if hurt then
16007: LD_VAR 0 4
16011: IFFALSE 16084
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16013: LD_VAR 0 5
16017: PPUSH
16018: LD_INT 3
16020: PUSH
16021: LD_INT 54
16023: PUSH
16024: EMPTY
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL_OW 72
16035: IFFALSE 16064
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16037: LD_VAR 0 5
16041: PPUSH
16042: LD_INT 3
16044: PUSH
16045: LD_INT 54
16047: PUSH
16048: EMPTY
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 72
16059: PPUSH
16060: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16064: LD_VAR 0 5
16068: PPUSH
16069: LD_VAR 0 4
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PPUSH
16078: CALL_OW 188
// end else
16082: GO 16138
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16084: LD_VAR 0 5
16088: PPUSH
16089: LD_INT 3
16091: PUSH
16092: LD_INT 54
16094: PUSH
16095: EMPTY
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: IFFALSE 16138
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16108: LD_VAR 0 5
16112: PPUSH
16113: LD_INT 3
16115: PUSH
16116: LD_INT 54
16118: PUSH
16119: EMPTY
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 72
16130: PPUSH
16131: LD_INT 17
16133: PPUSH
16134: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_INT 10
16145: PPUSH
16146: LD_INT 21
16148: PUSH
16149: LD_INT 3
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: LD_INT 24
16161: PUSH
16162: LD_INT 1000
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 70
16181: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: LD_EXP 59
16191: PPUSH
16192: LD_INT 25
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 72
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 3
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 34
16219: PUSH
16220: LD_INT 52
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: UNION
16236: ST_TO_ADDR
// if not tmp then
16237: LD_VAR 0 2
16241: NOT
16242: IFFALSE 16246
// exit ;
16244: GO 16764
// for i in tmp do
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_VAR 0 2
16255: PUSH
16256: FOR_IN
16257: IFFALSE 16762
// begin if GetClass ( i ) = 2 then
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 257
16268: PUSH
16269: LD_INT 2
16271: EQUAL
16272: IFFALSE 16495
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 256
16283: PUSH
16284: LD_INT 1000
16286: EQUAL
16287: PUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 110
16297: PUSH
16298: LD_INT 1
16300: EQUAL
16301: AND
16302: IFFALSE 16316
// SetTag ( i , 0 ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_INT 0
16311: PPUSH
16312: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 256
16325: PUSH
16326: LD_INT 500
16328: LESSEQUAL
16329: PUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 110
16339: PUSH
16340: LD_INT 0
16342: EQUAL
16343: AND
16344: IFFALSE 16373
// begin SetTag ( i , 1 ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 92
16365: PPUSH
16366: LD_INT 155
16368: PPUSH
16369: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16373: LD_VAR 0 3
16377: PUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 256
16387: PUSH
16388: LD_INT 500
16390: GREATER
16391: AND
16392: PUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 110
16402: PUSH
16403: LD_INT 0
16405: EQUAL
16406: AND
16407: PUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 314
16417: NOT
16418: AND
16419: IFFALSE 16493
// begin if b then
16421: LD_VAR 0 3
16425: IFFALSE 16457
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16427: LD_VAR 0 1
16431: PPUSH
16432: LD_VAR 0 3
16436: PUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_VAR 0 3
16444: PPUSH
16445: CALL_OW 12
16449: ARRAY
16450: PPUSH
16451: CALL_OW 130
16455: GO 16493
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16457: LD_VAR 0 1
16461: PPUSH
16462: LD_INT 94
16464: PPUSH
16465: LD_INT 165
16467: PPUSH
16468: CALL_OW 297
16472: PUSH
16473: LD_INT 8
16475: GREATER
16476: IFFALSE 16493
// ComMoveXY ( i , 94 , 165 ) ;
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_INT 94
16485: PPUSH
16486: LD_INT 165
16488: PPUSH
16489: CALL_OW 111
// end ; end else
16493: GO 16760
// if GetWeapon ( i ) = ru_crane then
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 264
16504: PUSH
16505: LD_INT 52
16507: EQUAL
16508: IFFALSE 16760
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 256
16519: PUSH
16520: LD_INT 1000
16522: EQUAL
16523: PUSH
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 110
16533: PUSH
16534: LD_INT 1
16536: EQUAL
16537: AND
16538: IFFALSE 16564
// begin SetTag ( i , 0 ) ;
16540: LD_VAR 0 1
16544: PPUSH
16545: LD_INT 0
16547: PPUSH
16548: CALL_OW 109
// SetFuel ( i , 100 ) ;
16552: LD_VAR 0 1
16556: PPUSH
16557: LD_INT 100
16559: PPUSH
16560: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 256
16573: PUSH
16574: LD_INT 500
16576: LESSEQUAL
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 110
16587: PUSH
16588: LD_INT 0
16590: EQUAL
16591: AND
16592: IFFALSE 16635
// begin SetTag ( i , 1 ) ;
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16606: LD_VAR 0 1
16610: PPUSH
16611: LD_INT 83
16613: PPUSH
16614: LD_INT 135
16616: PPUSH
16617: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 310
16630: PPUSH
16631: CALL 68970 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 256
16644: PUSH
16645: LD_INT 500
16647: GREATER
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 110
16658: PUSH
16659: LD_INT 0
16661: EQUAL
16662: AND
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 311
16673: AND
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 314
16684: NOT
16685: AND
16686: IFFALSE 16760
// begin if b then
16688: LD_VAR 0 3
16692: IFFALSE 16724
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 1
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: CALL_OW 12
16716: ARRAY
16717: PPUSH
16718: CALL_OW 130
16722: GO 16760
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16724: LD_VAR 0 1
16728: PPUSH
16729: LD_INT 94
16731: PPUSH
16732: LD_INT 165
16734: PPUSH
16735: CALL_OW 297
16739: PUSH
16740: LD_INT 8
16742: GREATER
16743: IFFALSE 16760
// ComMoveXY ( i , 94 , 165 ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 94
16752: PPUSH
16753: LD_INT 165
16755: PPUSH
16756: CALL_OW 111
// end ; end ; end ;
16760: GO 16256
16762: POP
16763: POP
// end ;
16764: PPOPN 6
16766: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16767: LD_EXP 23
16771: NOT
16772: PUSH
16773: LD_EXP 27
16777: NOT
16778: AND
16779: IFFALSE 17694
16781: GO 16783
16783: DISABLE
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
16790: PPUSH
// begin enable ;
16791: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16792: LD_INT 35
16794: PUSH
16795: LD_INT 45
16797: PUSH
16798: LD_INT 55
16800: PUSH
16801: LD_INT 60
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: LD_OWVAR 67
16814: ARRAY
16815: PPUSH
16816: CALL_OW 13
16820: IFFALSE 16836
// waveStrength := waveStrength + 1 ;
16822: LD_ADDR_EXP 62
16826: PUSH
16827: LD_EXP 62
16831: PUSH
16832: LD_INT 1
16834: PLUS
16835: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16836: LD_EXP 62
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 4
16849: PUSH
16850: LD_INT 4
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PUSH
16859: LD_OWVAR 67
16863: ARRAY
16864: GREATER
16865: IFFALSE 16897
// begin waveStrength := waveStrength + 2 ;
16867: LD_ADDR_EXP 62
16871: PUSH
16872: LD_EXP 62
16876: PUSH
16877: LD_INT 2
16879: PLUS
16880: ST_TO_ADDR
// disableAttackOnHeike := true ;
16881: LD_ADDR_EXP 27
16885: PUSH
16886: LD_INT 1
16888: ST_TO_ADDR
// disable ;
16889: DISABLE
// wait ( 3 3$00 ) ;
16890: LD_INT 6300
16892: PPUSH
16893: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16897: LD_ADDR_VAR 0 1
16901: PUSH
16902: DOUBLE
16903: LD_INT 1
16905: DEC
16906: ST_TO_ADDR
16907: LD_INT 2
16909: PUSH
16910: LD_INT 2
16912: PUSH
16913: LD_INT 3
16915: PUSH
16916: LD_INT 4
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_OWVAR 67
16929: ARRAY
16930: PUSH
16931: FOR_TO
16932: IFFALSE 17093
// begin InitHc ;
16934: CALL_OW 19
// InitVc ;
16938: CALL_OW 20
// uc_side := 3 ;
16942: LD_ADDR_OWVAR 20
16946: PUSH
16947: LD_INT 3
16949: ST_TO_ADDR
// uc_nation := 3 ;
16950: LD_ADDR_OWVAR 21
16954: PUSH
16955: LD_INT 3
16957: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16958: LD_INT 0
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_OWVAR 67
16968: PUSH
16969: LD_INT 2
16971: PLUS
16972: PPUSH
16973: CALL_OW 380
// un := CreateHuman ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: CALL_OW 44
16986: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16987: LD_VAR 0 2
16991: PPUSH
16992: LD_INT 160
16994: PPUSH
16995: LD_INT 3
16997: PPUSH
16998: LD_INT 2
17000: PPUSH
17001: LD_INT 0
17003: PPUSH
17004: CALL 69290 0 5
// SetClass ( un , class_bazooker ) ;
17008: LD_VAR 0 2
17012: PPUSH
17013: LD_INT 9
17015: PPUSH
17016: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17020: LD_ADDR_EXP 61
17024: PUSH
17025: LD_EXP 61
17029: PPUSH
17030: LD_EXP 61
17034: PUSH
17035: LD_INT 1
17037: PLUS
17038: PPUSH
17039: LD_VAR 0 2
17043: PPUSH
17044: CALL_OW 1
17048: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17049: LD_VAR 0 2
17053: PPUSH
17054: LD_INT 177
17056: PPUSH
17057: LD_INT 17
17059: PPUSH
17060: CALL_OW 111
// wait ( 0 0$2 ) ;
17064: LD_INT 70
17066: PPUSH
17067: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17071: LD_ADDR_VAR 0 5
17075: PUSH
17076: LD_VAR 0 5
17080: PPUSH
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL 67150 0 2
17090: ST_TO_ADDR
// end ;
17091: GO 16931
17093: POP
17094: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17095: LD_VAR 0 5
17099: PPUSH
17100: LD_INT 196
17102: PPUSH
17103: LD_INT 53
17105: PPUSH
17106: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17110: LD_VAR 0 5
17114: PPUSH
17115: LD_INT 199
17117: PPUSH
17118: LD_INT 62
17120: PPUSH
17121: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17125: LD_VAR 0 5
17129: PPUSH
17130: LD_INT 205
17132: PPUSH
17133: LD_INT 75
17135: PPUSH
17136: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17140: LD_ADDR_VAR 0 1
17144: PUSH
17145: DOUBLE
17146: LD_INT 1
17148: DEC
17149: ST_TO_ADDR
17150: LD_INT 2
17152: PUSH
17153: LD_INT 3
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: LD_INT 4
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: PUSH
17168: LD_OWVAR 67
17172: ARRAY
17173: PUSH
17174: LD_EXP 62
17178: PLUS
17179: PUSH
17180: FOR_TO
17181: IFFALSE 17490
// begin InitHc ;
17183: CALL_OW 19
// InitVc ;
17187: CALL_OW 20
// uc_side := 3 ;
17191: LD_ADDR_OWVAR 20
17195: PUSH
17196: LD_INT 3
17198: ST_TO_ADDR
// uc_nation := 3 ;
17199: LD_ADDR_OWVAR 21
17203: PUSH
17204: LD_INT 3
17206: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17207: LD_INT 22
17209: PUSH
17210: LD_INT 23
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PPUSH
17220: LD_INT 2
17222: PPUSH
17223: CALL_OW 12
17227: ARRAY
17228: PPUSH
17229: LD_INT 1
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: LD_INT 44
17237: PUSH
17238: LD_INT 45
17240: PUSH
17241: LD_INT 43
17243: PUSH
17244: LD_INT 42
17246: PUSH
17247: LD_INT 44
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 5
17262: PPUSH
17263: CALL_OW 12
17267: ARRAY
17268: PPUSH
17269: LD_INT 99
17271: PPUSH
17272: CALL 34288 0 5
// veh := CreateVehicle ;
17276: LD_ADDR_VAR 0 3
17280: PUSH
17281: CALL_OW 45
17285: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17286: LD_VAR 0 3
17290: PPUSH
17291: LD_INT 160
17293: PPUSH
17294: LD_INT 3
17296: PPUSH
17297: LD_INT 2
17299: PPUSH
17300: LD_INT 0
17302: PPUSH
17303: CALL 69290 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17307: LD_ADDR_EXP 61
17311: PUSH
17312: LD_EXP 61
17316: PPUSH
17317: LD_EXP 61
17321: PUSH
17322: LD_INT 1
17324: PLUS
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: CALL_OW 1
17335: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17336: LD_INT 0
17338: PPUSH
17339: LD_INT 3
17341: PPUSH
17342: LD_OWVAR 67
17346: PUSH
17347: LD_INT 2
17349: PLUS
17350: PPUSH
17351: CALL_OW 380
// un := CreateHuman ;
17355: LD_ADDR_VAR 0 2
17359: PUSH
17360: CALL_OW 44
17364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17379: LD_ADDR_EXP 61
17383: PUSH
17384: LD_EXP 61
17388: PPUSH
17389: LD_EXP 61
17393: PUSH
17394: LD_INT 1
17396: PLUS
17397: PPUSH
17398: LD_VAR 0 2
17402: PPUSH
17403: CALL_OW 1
17407: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17408: LD_VAR 0 2
17412: PPUSH
17413: LD_INT 177
17415: PPUSH
17416: LD_INT 17
17418: PPUSH
17419: CALL_OW 111
// wait ( 0 0$2 ) ;
17423: LD_INT 70
17425: PPUSH
17426: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17430: LD_ADDR_VAR 0 4
17434: PUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: LD_VAR 0 4
17444: PUSH
17445: LD_INT 1
17447: PLUS
17448: PPUSH
17449: LD_VAR 0 3
17453: PPUSH
17454: CALL_OW 1
17458: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17459: LD_ADDR_VAR 0 4
17463: PUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_VAR 0 4
17473: PUSH
17474: LD_INT 1
17476: PLUS
17477: PPUSH
17478: LD_VAR 0 2
17482: PPUSH
17483: CALL_OW 1
17487: ST_TO_ADDR
// end ;
17488: GO 17180
17490: POP
17491: POP
// for i in tmp do
17492: LD_ADDR_VAR 0 1
17496: PUSH
17497: LD_VAR 0 4
17501: PUSH
17502: FOR_IN
17503: IFFALSE 17584
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17505: LD_VAR 0 1
17509: PPUSH
17510: LD_INT 206
17512: PUSH
17513: LD_INT 37
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 239
17522: PUSH
17523: LD_INT 53
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 260
17532: PUSH
17533: LD_INT 67
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 263
17542: PUSH
17543: LD_INT 79
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 257
17552: PUSH
17553: LD_INT 105
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 227
17562: PUSH
17563: LD_INT 97
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL 69754 0 2
17582: GO 17502
17584: POP
17585: POP
// repeat wait ( 0 0$2 ) ;
17586: LD_INT 70
17588: PPUSH
17589: CALL_OW 67
// for i in tmp do
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 4
17602: PUSH
17603: FOR_IN
17604: IFFALSE 17671
// if IsDead ( i ) then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 301
17615: IFFALSE 17635
// tmp := tmp diff i else
17617: LD_ADDR_VAR 0 4
17621: PUSH
17622: LD_VAR 0 4
17626: PUSH
17627: LD_VAR 0 1
17631: DIFF
17632: ST_TO_ADDR
17633: GO 17669
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17635: LD_VAR 0 1
17639: PPUSH
17640: LD_INT 81
17642: PUSH
17643: LD_INT 3
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: PPUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 74
17664: PPUSH
17665: CALL_OW 115
17669: GO 17603
17671: POP
17672: POP
// until not tmp ;
17673: LD_VAR 0 4
17677: NOT
17678: IFFALSE 17586
// if firstAttack then
17680: LD_EXP 28
17684: IFFALSE 17694
// firstAttack := false ;
17686: LD_ADDR_EXP 28
17690: PUSH
17691: LD_INT 0
17693: ST_TO_ADDR
// end ;
17694: PPOPN 5
17696: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17697: LD_EXP 23
17701: NOT
17702: PUSH
17703: LD_EXP 32
17707: NOT
17708: AND
17709: PUSH
17710: LD_EXP 3
17714: AND
17715: PUSH
17716: LD_EXP 27
17720: NOT
17721: AND
17722: IFFALSE 18639
17724: GO 17726
17726: DISABLE
17727: LD_INT 0
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
// begin enable ;
17733: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17734: LD_ADDR_VAR 0 1
17738: PUSH
17739: DOUBLE
17740: LD_INT 1
17742: DEC
17743: ST_TO_ADDR
17744: LD_INT 1
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: LD_INT 3
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: LD_OWVAR 67
17766: ARRAY
17767: PUSH
17768: FOR_TO
17769: IFFALSE 18070
// begin InitHc ;
17771: CALL_OW 19
// InitVc ;
17775: CALL_OW 20
// uc_side := 3 ;
17779: LD_ADDR_OWVAR 20
17783: PUSH
17784: LD_INT 3
17786: ST_TO_ADDR
// uc_nation := 3 ;
17787: LD_ADDR_OWVAR 21
17791: PUSH
17792: LD_INT 3
17794: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17795: LD_INT 22
17797: PUSH
17798: LD_INT 23
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: PPUSH
17808: LD_INT 2
17810: PPUSH
17811: CALL_OW 12
17815: ARRAY
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: LD_INT 1
17822: PPUSH
17823: LD_INT 44
17825: PUSH
17826: LD_INT 43
17828: PUSH
17829: LD_INT 42
17831: PUSH
17832: LD_INT 44
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PPUSH
17844: LD_INT 4
17846: PPUSH
17847: CALL_OW 12
17851: ARRAY
17852: PPUSH
17853: LD_INT 99
17855: PPUSH
17856: CALL 34288 0 5
// veh := CreateVehicle ;
17860: LD_ADDR_VAR 0 3
17864: PUSH
17865: CALL_OW 45
17869: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17870: LD_VAR 0 3
17874: PPUSH
17875: LD_INT 5
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 2
17883: PPUSH
17884: LD_INT 0
17886: PPUSH
17887: CALL 69290 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17891: LD_ADDR_EXP 61
17895: PUSH
17896: LD_EXP 61
17900: PPUSH
17901: LD_EXP 61
17905: PUSH
17906: LD_INT 1
17908: PLUS
17909: PPUSH
17910: LD_VAR 0 3
17914: PPUSH
17915: CALL_OW 1
17919: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17920: LD_INT 0
17922: PPUSH
17923: LD_INT 3
17925: PPUSH
17926: LD_OWVAR 67
17930: PPUSH
17931: CALL_OW 380
// un := CreateHuman ;
17935: LD_ADDR_VAR 0 2
17939: PUSH
17940: CALL_OW 44
17944: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17945: LD_VAR 0 2
17949: PPUSH
17950: LD_VAR 0 3
17954: PPUSH
17955: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17959: LD_ADDR_EXP 61
17963: PUSH
17964: LD_EXP 61
17968: PPUSH
17969: LD_EXP 61
17973: PUSH
17974: LD_INT 1
17976: PLUS
17977: PPUSH
17978: LD_VAR 0 2
17982: PPUSH
17983: CALL_OW 1
17987: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: LD_INT 23
17995: PPUSH
17996: LD_INT 7
17998: PPUSH
17999: CALL_OW 111
// wait ( 0 0$2 ) ;
18003: LD_INT 70
18005: PPUSH
18006: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18010: LD_ADDR_VAR 0 4
18014: PUSH
18015: LD_VAR 0 4
18019: PPUSH
18020: LD_VAR 0 4
18024: PUSH
18025: LD_INT 1
18027: PLUS
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: CALL_OW 1
18038: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18039: LD_ADDR_VAR 0 4
18043: PUSH
18044: LD_VAR 0 4
18048: PPUSH
18049: LD_VAR 0 4
18053: PUSH
18054: LD_INT 1
18056: PLUS
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: CALL_OW 1
18067: ST_TO_ADDR
// end ;
18068: GO 17768
18070: POP
18071: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18072: LD_ADDR_VAR 0 1
18076: PUSH
18077: DOUBLE
18078: LD_INT 1
18080: DEC
18081: ST_TO_ADDR
18082: LD_INT 2
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: PUSH
18100: LD_OWVAR 67
18104: ARRAY
18105: PUSH
18106: FOR_TO
18107: IFFALSE 18416
// begin InitHc ;
18109: CALL_OW 19
// InitVc ;
18113: CALL_OW 20
// uc_side := 3 ;
18117: LD_ADDR_OWVAR 20
18121: PUSH
18122: LD_INT 3
18124: ST_TO_ADDR
// uc_nation := 3 ;
18125: LD_ADDR_OWVAR 21
18129: PUSH
18130: LD_INT 3
18132: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18133: LD_INT 22
18135: PUSH
18136: LD_INT 23
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 1
18145: PPUSH
18146: LD_INT 2
18148: PPUSH
18149: CALL_OW 12
18153: ARRAY
18154: PPUSH
18155: LD_INT 1
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: LD_INT 44
18163: PUSH
18164: LD_INT 45
18166: PUSH
18167: LD_INT 43
18169: PUSH
18170: LD_INT 42
18172: PUSH
18173: LD_INT 44
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: PPUSH
18186: LD_INT 5
18188: PPUSH
18189: CALL_OW 12
18193: ARRAY
18194: PPUSH
18195: LD_INT 99
18197: PPUSH
18198: CALL 34288 0 5
// veh := CreateVehicle ;
18202: LD_ADDR_VAR 0 3
18206: PUSH
18207: CALL_OW 45
18211: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18212: LD_VAR 0 3
18216: PPUSH
18217: LD_INT 127
18219: PPUSH
18220: LD_INT 243
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: LD_INT 0
18228: PPUSH
18229: CALL 69290 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18233: LD_ADDR_EXP 61
18237: PUSH
18238: LD_EXP 61
18242: PPUSH
18243: LD_EXP 61
18247: PUSH
18248: LD_INT 1
18250: PLUS
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: CALL_OW 1
18261: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18262: LD_INT 0
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: LD_OWVAR 67
18272: PUSH
18273: LD_INT 2
18275: PLUS
18276: PPUSH
18277: CALL_OW 380
// un := CreateHuman ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: CALL_OW 44
18290: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18305: LD_ADDR_EXP 61
18309: PUSH
18310: LD_EXP 61
18314: PPUSH
18315: LD_EXP 61
18319: PUSH
18320: LD_INT 1
18322: PLUS
18323: PPUSH
18324: LD_VAR 0 2
18328: PPUSH
18329: CALL_OW 1
18333: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18334: LD_VAR 0 2
18338: PPUSH
18339: LD_INT 130
18341: PPUSH
18342: LD_INT 233
18344: PPUSH
18345: CALL_OW 111
// wait ( 0 0$2 ) ;
18349: LD_INT 70
18351: PPUSH
18352: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18356: LD_ADDR_VAR 0 4
18360: PUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 4
18370: PUSH
18371: LD_INT 1
18373: PLUS
18374: PPUSH
18375: LD_VAR 0 3
18379: PPUSH
18380: CALL_OW 1
18384: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18385: LD_ADDR_VAR 0 4
18389: PUSH
18390: LD_VAR 0 4
18394: PPUSH
18395: LD_VAR 0 4
18399: PUSH
18400: LD_INT 1
18402: PLUS
18403: PPUSH
18404: LD_VAR 0 2
18408: PPUSH
18409: CALL_OW 1
18413: ST_TO_ADDR
// end ;
18414: GO 18106
18416: POP
18417: POP
// for i in tmp do
18418: LD_ADDR_VAR 0 1
18422: PUSH
18423: LD_VAR 0 4
18427: PUSH
18428: FOR_IN
18429: IFFALSE 18543
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18431: LD_VAR 0 1
18435: PPUSH
18436: LD_INT 130
18438: PUSH
18439: LD_INT 229
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 137
18448: PUSH
18449: LD_INT 216
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 142
18458: PUSH
18459: LD_INT 194
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 140
18468: PUSH
18469: LD_INT 169
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 146
18478: PUSH
18479: LD_INT 162
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 174
18488: PUSH
18489: LD_INT 161
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 158
18498: PUSH
18499: LD_INT 134
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 136
18508: PUSH
18509: LD_INT 107
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 115
18518: PUSH
18519: LD_INT 89
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: PPUSH
18537: CALL 69754 0 2
18541: GO 18428
18543: POP
18544: POP
// repeat wait ( 0 0$2 ) ;
18545: LD_INT 70
18547: PPUSH
18548: CALL_OW 67
// for i in tmp do
18552: LD_ADDR_VAR 0 1
18556: PUSH
18557: LD_VAR 0 4
18561: PUSH
18562: FOR_IN
18563: IFFALSE 18630
// if IsDead ( i ) then
18565: LD_VAR 0 1
18569: PPUSH
18570: CALL_OW 301
18574: IFFALSE 18594
// tmp := tmp diff i else
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: LD_VAR 0 4
18585: PUSH
18586: LD_VAR 0 1
18590: DIFF
18591: ST_TO_ADDR
18592: GO 18628
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18594: LD_VAR 0 1
18598: PPUSH
18599: LD_INT 81
18601: PUSH
18602: LD_INT 3
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 69
18613: PPUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 74
18623: PPUSH
18624: CALL_OW 115
18628: GO 18562
18630: POP
18631: POP
// until not tmp ;
18632: LD_VAR 0 4
18636: NOT
18637: IFFALSE 18545
// end ;
18639: PPOPN 4
18641: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18642: LD_EXP 6
18646: IFFALSE 19105
18648: GO 18650
18650: DISABLE
18651: LD_INT 0
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
// begin wait ( 3 3$00 ) ;
18657: LD_INT 6300
18659: PPUSH
18660: CALL_OW 67
// for i := 1 to 3 do
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: DOUBLE
18670: LD_INT 1
18672: DEC
18673: ST_TO_ADDR
18674: LD_INT 3
18676: PUSH
18677: FOR_TO
18678: IFFALSE 18977
// begin InitHc ;
18680: CALL_OW 19
// InitVc ;
18684: CALL_OW 20
// uc_side := 3 ;
18688: LD_ADDR_OWVAR 20
18692: PUSH
18693: LD_INT 3
18695: ST_TO_ADDR
// uc_nation := 3 ;
18696: LD_ADDR_OWVAR 21
18700: PUSH
18701: LD_INT 3
18703: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18704: LD_INT 22
18706: PUSH
18707: LD_INT 23
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: PPUSH
18717: LD_INT 2
18719: PPUSH
18720: CALL_OW 12
18724: ARRAY
18725: PPUSH
18726: LD_INT 1
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: LD_INT 44
18734: PUSH
18735: LD_INT 43
18737: PUSH
18738: LD_INT 42
18740: PUSH
18741: LD_INT 44
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PPUSH
18753: LD_INT 4
18755: PPUSH
18756: CALL_OW 12
18760: ARRAY
18761: PPUSH
18762: LD_INT 99
18764: PPUSH
18765: CALL 34288 0 5
// veh := CreateVehicle ;
18769: LD_ADDR_VAR 0 3
18773: PUSH
18774: CALL_OW 45
18778: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18779: LD_VAR 0 3
18783: PPUSH
18784: LD_INT 293
18786: PPUSH
18787: LD_INT 246
18789: PPUSH
18790: LD_INT 5
18792: PPUSH
18793: LD_INT 0
18795: PPUSH
18796: CALL 69290 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18800: LD_ADDR_EXP 61
18804: PUSH
18805: LD_EXP 61
18809: PPUSH
18810: LD_EXP 61
18814: PUSH
18815: LD_INT 1
18817: PLUS
18818: PPUSH
18819: LD_VAR 0 3
18823: PPUSH
18824: CALL_OW 1
18828: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18829: LD_INT 0
18831: PPUSH
18832: LD_INT 3
18834: PPUSH
18835: LD_INT 3
18837: PPUSH
18838: CALL_OW 380
// un := CreateHuman ;
18842: LD_ADDR_VAR 0 2
18846: PUSH
18847: CALL_OW 44
18851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18852: LD_VAR 0 2
18856: PPUSH
18857: LD_VAR 0 3
18861: PPUSH
18862: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18866: LD_ADDR_EXP 61
18870: PUSH
18871: LD_EXP 61
18875: PPUSH
18876: LD_EXP 61
18880: PUSH
18881: LD_INT 1
18883: PLUS
18884: PPUSH
18885: LD_VAR 0 2
18889: PPUSH
18890: CALL_OW 1
18894: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18895: LD_VAR 0 2
18899: PPUSH
18900: LD_INT 273
18902: PPUSH
18903: LD_INT 227
18905: PPUSH
18906: CALL_OW 111
// wait ( 0 0$2 ) ;
18910: LD_INT 70
18912: PPUSH
18913: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18917: LD_ADDR_VAR 0 4
18921: PUSH
18922: LD_VAR 0 4
18926: PPUSH
18927: LD_VAR 0 4
18931: PUSH
18932: LD_INT 1
18934: PLUS
18935: PPUSH
18936: LD_VAR 0 3
18940: PPUSH
18941: CALL_OW 1
18945: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18946: LD_ADDR_VAR 0 4
18950: PUSH
18951: LD_VAR 0 4
18955: PPUSH
18956: LD_VAR 0 4
18960: PUSH
18961: LD_INT 1
18963: PLUS
18964: PPUSH
18965: LD_VAR 0 2
18969: PPUSH
18970: CALL_OW 1
18974: ST_TO_ADDR
// end ;
18975: GO 18677
18977: POP
18978: POP
// for i in tmp do
18979: LD_ADDR_VAR 0 1
18983: PUSH
18984: LD_VAR 0 4
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19009
// ComAgressiveMove ( i , 330 , 231 ) ;
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_INT 330
18999: PPUSH
19000: LD_INT 231
19002: PPUSH
19003: CALL_OW 114
19007: GO 18989
19009: POP
19010: POP
// repeat wait ( 0 0$2 ) ;
19011: LD_INT 70
19013: PPUSH
19014: CALL_OW 67
// for i in tmp do
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_VAR 0 4
19027: PUSH
19028: FOR_IN
19029: IFFALSE 19096
// if IsDead ( i ) then
19031: LD_VAR 0 1
19035: PPUSH
19036: CALL_OW 301
19040: IFFALSE 19060
// tmp := tmp diff i else
19042: LD_ADDR_VAR 0 4
19046: PUSH
19047: LD_VAR 0 4
19051: PUSH
19052: LD_VAR 0 1
19056: DIFF
19057: ST_TO_ADDR
19058: GO 19094
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 81
19067: PUSH
19068: LD_INT 3
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: CALL_OW 69
19079: PPUSH
19080: LD_VAR 0 1
19084: PPUSH
19085: CALL_OW 74
19089: PPUSH
19090: CALL_OW 115
19094: GO 19028
19096: POP
19097: POP
// until not tmp ;
19098: LD_VAR 0 4
19102: NOT
19103: IFFALSE 19011
// end ;
19105: PPOPN 4
19107: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19108: LD_INT 3
19110: PUSH
19111: LD_INT 22
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 32
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 69
19143: IFFALSE 19227
19145: GO 19147
19147: DISABLE
19148: LD_INT 0
19150: PPUSH
// begin enable ;
19151: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 32
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PPUSH
19188: CALL_OW 69
19192: PUSH
19193: FOR_IN
19194: IFFALSE 19225
// if GetFuel ( i ) < 3 then
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 261
19205: PUSH
19206: LD_INT 3
19208: LESS
19209: IFFALSE 19223
// SetFuel ( i , 3 ) ;
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_INT 3
19218: PPUSH
19219: CALL_OW 240
19223: GO 19193
19225: POP
19226: POP
// end ; end_of_file
19227: PPOPN 1
19229: END
// export function Action ; begin
19230: LD_INT 0
19232: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19233: LD_INT 2
19235: PPUSH
19236: LD_INT 4
19238: PPUSH
19239: CALL_OW 332
// Video ( true ) ;
19243: LD_INT 1
19245: PPUSH
19246: CALL 67122 0 1
// music_nat := 3 ;
19250: LD_ADDR_OWVAR 71
19254: PUSH
19255: LD_INT 3
19257: ST_TO_ADDR
// music_class := music_recon ;
19258: LD_ADDR_OWVAR 72
19262: PUSH
19263: LD_INT 3
19265: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19266: LD_INT 213
19268: PPUSH
19269: LD_INT 89
19271: PPUSH
19272: CALL_OW 86
// if Kaia and Olaf then
19276: LD_EXP 39
19280: PUSH
19281: LD_EXP 43
19285: AND
19286: IFFALSE 19292
// SceneKaiaWithOlaf ;
19288: CALL 19370 0 0
// if Givi and Kamil then
19292: LD_EXP 35
19296: PUSH
19297: LD_EXP 38
19301: AND
19302: IFFALSE 19308
// SceneWithGiviAndKamil ;
19304: CALL 19941 0 0
// tick := 0 ;
19308: LD_ADDR_OWVAR 1
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// wait ( 3 ) ;
19316: LD_INT 3
19318: PPUSH
19319: CALL_OW 67
// Video ( false ) ;
19323: LD_INT 0
19325: PPUSH
19326: CALL 67122 0 1
// ChangeMissionObjectives ( M1 ) ;
19330: LD_STRING M1
19332: PPUSH
19333: CALL_OW 337
// music_nat := music_auto ;
19337: LD_ADDR_OWVAR 71
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
// music_class := music_auto ;
19345: LD_ADDR_OWVAR 72
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
// SaveForQuickRestart ;
19353: CALL_OW 22
// gameActive := true ;
19357: LD_ADDR_EXP 31
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// end ;
19365: LD_VAR 0 1
19369: RET
// export function SceneKaiaWithOlaf ; begin
19370: LD_INT 0
19372: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19373: LD_INT 22
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 30
19385: PUSH
19386: LD_INT 3
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PPUSH
19397: CALL_OW 69
19401: PPUSH
19402: LD_INT 14
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: LD_INT 26
19413: PPUSH
19414: CALL_OW 125
// wait ( 0 0$1 ) ;
19418: LD_INT 35
19420: PPUSH
19421: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19425: LD_EXP 39
19429: PPUSH
19430: LD_STRING DK-Mem-1
19432: PPUSH
19433: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19437: LD_EXP 39
19441: PPUSH
19442: LD_STRING DK-Mem-2
19444: PPUSH
19445: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19449: LD_EXP 43
19453: PPUSH
19454: LD_STRING DO-Mem-3
19456: PPUSH
19457: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19461: LD_EXP 39
19465: PPUSH
19466: LD_STRING DK-Mem-4
19468: PPUSH
19469: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19473: LD_EXP 43
19477: PPUSH
19478: LD_STRING DO-Mem-5
19480: PPUSH
19481: CALL_OW 88
// wait ( 0 0$2 ) ;
19485: LD_INT 70
19487: PPUSH
19488: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19492: LD_INT 22
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 30
19504: PUSH
19505: LD_INT 3
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PPUSH
19516: CALL_OW 69
19520: PPUSH
19521: LD_INT 90
19523: PPUSH
19524: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19528: LD_EXP 43
19532: PPUSH
19533: LD_STRING DO-Mem-6
19535: PPUSH
19536: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19540: LD_EXP 39
19544: PPUSH
19545: LD_STRING DK-Mem-7
19547: PPUSH
19548: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19552: LD_EXP 34
19556: PPUSH
19557: LD_EXP 39
19561: PPUSH
19562: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19566: LD_EXP 34
19570: PPUSH
19571: LD_STRING DH-Mem-8
19573: PPUSH
19574: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19578: LD_EXP 39
19582: PUSH
19583: LD_EXP 43
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PPUSH
19592: LD_EXP 34
19596: PPUSH
19597: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19601: LD_EXP 43
19605: PPUSH
19606: LD_STRING DO-Mem-9
19608: PPUSH
19609: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19613: LD_EXP 43
19617: PPUSH
19618: LD_STRING DO-Mem-10
19620: PPUSH
19621: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19625: LD_EXP 43
19629: PPUSH
19630: LD_STRING DO-Mem-11
19632: PPUSH
19633: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19637: LD_EXP 43
19641: PPUSH
19642: LD_STRING DO-Mem-12
19644: PPUSH
19645: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19649: LD_EXP 39
19653: PPUSH
19654: LD_STRING DK-Mem-13
19656: PPUSH
19657: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19661: LD_EXP 39
19665: PPUSH
19666: LD_STRING DK-Mem-14
19668: PPUSH
19669: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19673: LD_EXP 39
19677: PPUSH
19678: LD_STRING DK-Mem-15
19680: PPUSH
19681: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19685: LD_EXP 39
19689: PPUSH
19690: LD_STRING DK-Mem-16
19692: PPUSH
19693: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19697: LD_EXP 39
19701: PPUSH
19702: LD_STRING DK-Mem-17
19704: PPUSH
19705: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19709: LD_EXP 43
19713: PPUSH
19714: LD_EXP 39
19718: PPUSH
19719: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19723: LD_EXP 43
19727: PPUSH
19728: LD_STRING DO-Mem-18
19730: PPUSH
19731: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19735: LD_EXP 39
19739: PPUSH
19740: LD_EXP 43
19744: PPUSH
19745: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19749: LD_EXP 39
19753: PPUSH
19754: LD_STRING DK-Mem-19
19756: PPUSH
19757: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19761: LD_EXP 43
19765: PPUSH
19766: LD_INT 214
19768: PPUSH
19769: LD_INT 86
19771: PPUSH
19772: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19776: LD_EXP 43
19780: PPUSH
19781: LD_EXP 39
19785: PPUSH
19786: CALL_OW 179
// if Givi then
19790: LD_EXP 35
19794: IFFALSE 19825
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19796: LD_EXP 35
19800: PPUSH
19801: LD_INT 217
19803: PPUSH
19804: LD_INT 86
19806: PPUSH
19807: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19811: LD_EXP 35
19815: PPUSH
19816: LD_EXP 34
19820: PPUSH
19821: CALL_OW 179
// end ; if Kamil then
19825: LD_EXP 38
19829: IFFALSE 19869
// begin ComExit ( Kamil ) ;
19831: LD_EXP 38
19835: PPUSH
19836: CALL 67548 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19840: LD_EXP 38
19844: PPUSH
19845: LD_INT 212
19847: PPUSH
19848: LD_INT 86
19850: PPUSH
19851: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19855: LD_EXP 38
19859: PPUSH
19860: LD_EXP 34
19864: PPUSH
19865: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19869: LD_INT 70
19871: PPUSH
19872: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19876: LD_EXP 34
19880: PPUSH
19881: LD_STRING DH-Mem-20
19883: PPUSH
19884: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19888: LD_EXP 43
19892: PPUSH
19893: LD_INT 215
19895: PPUSH
19896: LD_INT 87
19898: PPUSH
19899: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19903: LD_EXP 43
19907: PPUSH
19908: LD_EXP 39
19912: PPUSH
19913: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19917: LD_EXP 39
19921: PPUSH
19922: LD_STRING DK-Mem-21
19924: PPUSH
19925: CALL_OW 88
// wait ( 0 0$2 ) ;
19929: LD_INT 70
19931: PPUSH
19932: CALL_OW 67
// end ;
19936: LD_VAR 0 1
19940: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19941: LD_INT 0
19943: PPUSH
19944: PPUSH
// if Markov then
19945: LD_EXP 41
19949: IFFALSE 20067
// begin p := 0 ;
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19959: LD_EXP 41
19963: PPUSH
19964: CALL_OW 310
19968: IFFALSE 19979
// ComExit ( Markov ) ;
19970: LD_EXP 41
19974: PPUSH
19975: CALL 67548 0 1
// wait ( 0 0$1 ) ;
19979: LD_INT 35
19981: PPUSH
19982: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19986: LD_EXP 41
19990: PPUSH
19991: LD_INT 212
19993: PPUSH
19994: LD_INT 88
19996: PPUSH
19997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20001: LD_INT 35
20003: PPUSH
20004: CALL_OW 67
// p := Inc ( p ) ;
20008: LD_ADDR_VAR 0 2
20012: PUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: CALL 68511 0 1
20022: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20023: LD_EXP 41
20027: PPUSH
20028: LD_EXP 34
20032: PPUSH
20033: CALL_OW 296
20037: PUSH
20038: LD_INT 6
20040: LESS
20041: PUSH
20042: LD_VAR 0 2
20046: PUSH
20047: LD_INT 12
20049: GREATER
20050: OR
20051: IFFALSE 20001
// AddComTurnUnit ( Markov , Heike ) ;
20053: LD_EXP 41
20057: PPUSH
20058: LD_EXP 34
20062: PPUSH
20063: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20067: LD_EXP 35
20071: PPUSH
20072: LD_STRING DG-Obj-1
20074: PPUSH
20075: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20079: LD_EXP 38
20083: PPUSH
20084: LD_STRING DKam-Obj-2
20086: PPUSH
20087: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20091: LD_EXP 34
20095: PPUSH
20096: LD_EXP 38
20100: PPUSH
20101: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20105: LD_EXP 38
20109: PPUSH
20110: LD_STRING DKam-Obj-3
20112: PPUSH
20113: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20117: LD_EXP 41
20121: PPUSH
20122: LD_STRING DMar-Obj-4
20124: PPUSH
20125: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20129: LD_EXP 38
20133: PPUSH
20134: LD_STRING DKam-Obj-6
20136: PPUSH
20137: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20141: LD_EXP 38
20145: PPUSH
20146: LD_STRING DKam-Obj-7
20148: PPUSH
20149: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20153: LD_EXP 38
20157: PPUSH
20158: LD_STRING DKam-Obj-8
20160: PPUSH
20161: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20165: LD_EXP 34
20169: PPUSH
20170: LD_STRING DH-Obj-9
20172: PPUSH
20173: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20177: LD_EXP 38
20181: PPUSH
20182: LD_STRING DKam-Obj-10
20184: PPUSH
20185: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20189: LD_EXP 38
20193: PPUSH
20194: LD_STRING DKam-Obj-11
20196: PPUSH
20197: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20201: LD_EXP 41
20205: PPUSH
20206: LD_STRING DMar-Obj-12
20208: PPUSH
20209: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20213: LD_EXP 41
20217: PPUSH
20218: LD_STRING DMar-Obj-13
20220: PPUSH
20221: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20225: LD_EXP 41
20229: PPUSH
20230: LD_STRING DMar-Obj-14
20232: PPUSH
20233: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20237: LD_EXP 43
20241: PPUSH
20242: LD_STRING DO-Obj-15
20244: PPUSH
20245: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20249: LD_EXP 43
20253: PPUSH
20254: LD_STRING DO-Obj-16
20256: PPUSH
20257: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20261: LD_EXP 34
20265: PPUSH
20266: LD_STRING DH-Obj-17
20268: PPUSH
20269: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20273: LD_EXP 43
20277: PPUSH
20278: LD_STRING DO-Obj-18
20280: PPUSH
20281: CALL_OW 88
// end ;
20285: LD_VAR 0 1
20289: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20290: LD_INT 34
20292: PUSH
20293: LD_INT 92
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: IFFALSE 20499
20306: GO 20308
20308: DISABLE
20309: LD_INT 0
20311: PPUSH
// begin wait ( 0 0$2 ) ;
20312: LD_INT 70
20314: PPUSH
20315: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20319: LD_INT 34
20321: PUSH
20322: LD_INT 92
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PPUSH
20329: CALL_OW 69
20333: PPUSH
20334: CALL_OW 87
// DialogueOn ;
20338: CALL_OW 6
// if Markov then
20342: LD_EXP 41
20346: IFFALSE 20374
// begin Say ( Markov , DMar-Grn-1 ) ;
20348: LD_EXP 41
20352: PPUSH
20353: LD_STRING DMar-Grn-1
20355: PPUSH
20356: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20360: LD_EXP 34
20364: PPUSH
20365: LD_STRING DH-Grn-2
20367: PPUSH
20368: CALL_OW 88
// end else
20372: GO 20473
// if heikeSecondSquad then
20374: LD_EXP 49
20378: IFFALSE 20473
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20380: LD_ADDR_VAR 0 1
20384: PUSH
20385: LD_EXP 49
20389: PUSH
20390: LD_INT 1
20392: PPUSH
20393: LD_EXP 49
20397: PPUSH
20398: CALL_OW 12
20402: ARRAY
20403: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20404: LD_VAR 0 1
20408: PPUSH
20409: CALL_OW 258
20413: PUSH
20414: LD_INT 1
20416: DOUBLE
20417: EQUAL
20418: IFTRUE 20422
20420: GO 20437
20422: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20423: LD_VAR 0 1
20427: PPUSH
20428: LD_STRING DArm-Grn-1
20430: PPUSH
20431: CALL_OW 88
20435: GO 20461
20437: LD_INT 2
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20460
20445: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20446: LD_VAR 0 1
20450: PPUSH
20451: LD_STRING DArf-Grn-1
20453: PPUSH
20454: CALL_OW 88
20458: GO 20461
20460: POP
// Say ( Heike , DH-Grn-2 ) ;
20461: LD_EXP 34
20465: PPUSH
20466: LD_STRING DH-Grn-2
20468: PPUSH
20469: CALL_OW 88
// end ; DialogueOff ;
20473: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20477: LD_STRING MortarConstructed
20479: PPUSH
20480: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20484: LD_STRING SelfPropelledMortar
20486: PPUSH
20487: CALL_OW 339
// mortarConstructed := true ;
20491: LD_ADDR_EXP 15
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// end ;
20499: PPOPN 1
20501: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20502: LD_INT 2
20504: PPUSH
20505: LD_INT 8
20507: PPUSH
20508: CALL_OW 294
20512: IFFALSE 20655
20514: GO 20516
20516: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20517: LD_INT 200
20519: PPUSH
20520: LD_INT 162
20522: PPUSH
20523: LD_INT 2
20525: PPUSH
20526: LD_INT 6
20528: NEG
20529: PPUSH
20530: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20534: LD_INT 200
20536: PPUSH
20537: LD_INT 162
20539: PPUSH
20540: LD_INT 2
20542: PPUSH
20543: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20547: LD_INT 200
20549: PPUSH
20550: LD_INT 162
20552: PPUSH
20553: CALL_OW 84
// if not IsOk ( Kurt ) then
20557: LD_EXP 45
20561: PPUSH
20562: CALL_OW 302
20566: NOT
20567: IFFALSE 20571
// exit ;
20569: GO 20655
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20571: LD_EXP 45
20575: PPUSH
20576: LD_STRING DKs-Otpst-2-1
20578: PPUSH
20579: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20583: LD_EXP 39
20587: PPUSH
20588: LD_STRING DK-Otpst-2-2
20590: PPUSH
20591: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20595: LD_EXP 45
20599: PPUSH
20600: LD_STRING DKs-Otpst-2-3
20602: PPUSH
20603: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20607: LD_EXP 45
20611: PPUSH
20612: LD_STRING DKs-Otpst-2-4
20614: PPUSH
20615: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20619: LD_EXP 45
20623: PPUSH
20624: LD_STRING DKs-Otpst-2-5
20626: PPUSH
20627: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20631: LD_EXP 38
20635: PPUSH
20636: LD_STRING DKam-Otpst-2-6
20638: PPUSH
20639: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20643: LD_EXP 45
20647: PPUSH
20648: LD_STRING DKs-Otpst-2-7
20650: PPUSH
20651: CALL_OW 88
// end ;
20655: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20656: LD_INT 8
20658: PPUSH
20659: LD_INT 22
20661: PUSH
20662: LD_INT 3
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 21
20671: PUSH
20672: LD_INT 3
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 70
20687: NOT
20688: PUSH
20689: LD_EXP 3
20693: NOT
20694: AND
20695: IFFALSE 20943
20697: GO 20699
20699: DISABLE
20700: LD_INT 0
20702: PPUSH
// begin outpostDestroyed := true ;
20703: LD_ADDR_EXP 4
20707: PUSH
20708: LD_INT 1
20710: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20711: LD_INT 22
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 34
20723: PUSH
20724: LD_INT 92
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 92
20733: PUSH
20734: LD_INT 195
20736: PUSH
20737: LD_INT 164
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: NOT
20759: IFFALSE 20763
// exit ;
20761: GO 20943
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20763: LD_EXP 35
20767: PPUSH
20768: CALL_OW 302
20772: NOT
20773: PUSH
20774: LD_EXP 39
20778: PPUSH
20779: CALL_OW 302
20783: NOT
20784: OR
20785: IFFALSE 20789
// exit ;
20787: GO 20943
// Say ( Givi , DG-Otpst-1-1 ) ;
20789: LD_EXP 35
20793: PPUSH
20794: LD_STRING DG-Otpst-1-1
20796: PPUSH
20797: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20801: LD_EXP 39
20805: PPUSH
20806: LD_STRING DK-Otpst-1-2
20808: PPUSH
20809: CALL_OW 88
// if IsOk ( Markov ) then
20813: LD_EXP 41
20817: PPUSH
20818: CALL_OW 302
20822: IFFALSE 20850
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20824: LD_EXP 41
20828: PPUSH
20829: LD_STRING DMar-Otpst-1-3
20831: PPUSH
20832: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20836: LD_EXP 41
20840: PPUSH
20841: LD_STRING DMar-Otpst-1-4
20843: PPUSH
20844: CALL_OW 88
// end else
20848: GO 20931
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20850: LD_ADDR_VAR 0 1
20854: PUSH
20855: LD_EXP 49
20859: PUSH
20860: LD_INT 1
20862: PPUSH
20863: LD_EXP 49
20867: PPUSH
20868: CALL_OW 12
20872: ARRAY
20873: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 258
20883: PUSH
20884: LD_INT 1
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20907
20892: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20893: LD_VAR 0 1
20897: PPUSH
20898: LD_STRING DArm-Otpst-1-a-3
20900: PPUSH
20901: CALL_OW 88
20905: GO 20931
20907: LD_INT 2
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20930
20915: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20916: LD_VAR 0 1
20920: PPUSH
20921: LD_STRING DArf-Otpst-1-a-3
20923: PPUSH
20924: CALL_OW 88
20928: GO 20931
20930: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20931: LD_EXP 35
20935: PPUSH
20936: LD_STRING DG-Otpst-1-5
20938: PPUSH
20939: CALL_OW 88
// end ;
20943: PPOPN 1
20945: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20946: LD_EXP 39
20950: PPUSH
20951: CALL_OW 256
20955: PUSH
20956: LD_INT 10
20958: LESS
20959: IFFALSE 21073
20961: GO 20963
20963: DISABLE
// begin DialogueOn ;
20964: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20968: LD_EXP 39
20972: PPUSH
20973: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20977: LD_EXP 39
20981: PPUSH
20982: LD_STRING DK-Dead-1
20984: PPUSH
20985: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20989: LD_EXP 34
20993: PPUSH
20994: LD_STRING DH-Dead-2
20996: PPUSH
20997: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21001: LD_EXP 39
21005: PPUSH
21006: LD_STRING DK-Dead-3
21008: PPUSH
21009: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21013: LD_EXP 34
21017: PPUSH
21018: LD_STRING DH-Dead-4
21020: PPUSH
21021: CALL_OW 88
// if IsOk ( Mike ) then
21025: LD_EXP 36
21029: PPUSH
21030: CALL_OW 302
21034: IFFALSE 21060
// begin Say ( Mike , DM-Dead-5 ) ;
21036: LD_EXP 36
21040: PPUSH
21041: LD_STRING DM-Dead-5
21043: PPUSH
21044: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21048: LD_EXP 34
21052: PPUSH
21053: LD_STRING DH-Dead-6
21055: PPUSH
21056: CALL_OW 88
// end ; DialogueOff ;
21060: CALL_OW 7
// KillUnit ( Kaia ) ;
21064: LD_EXP 39
21068: PPUSH
21069: CALL_OW 66
// end ;
21073: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21074: LD_OWVAR 1
21078: PUSH
21079: LD_INT 31500
21081: GREATEREQUAL
21082: PUSH
21083: LD_EXP 5
21087: PUSH
21088: LD_INT 5
21090: GREATER
21091: OR
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 92
21105: PUSH
21106: LD_INT 103
21108: PUSH
21109: LD_INT 81
21111: PUSH
21112: LD_INT 20
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PPUSH
21125: CALL_OW 69
21129: OR
21130: IFFALSE 21570
21132: GO 21134
21134: DISABLE
21135: LD_INT 0
21137: PPUSH
21138: PPUSH
21139: PPUSH
// begin PrepareRolfSquad ;
21140: CALL 3531 0 0
// dep := HexInfo ( 86 , 54 ) ;
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: LD_INT 86
21151: PPUSH
21152: LD_INT 54
21154: PPUSH
21155: CALL_OW 428
21159: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21160: LD_VAR 0 3
21164: PPUSH
21165: CALL_OW 274
21169: PPUSH
21170: LD_INT 1
21172: PPUSH
21173: LD_INT 300
21175: PPUSH
21176: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21180: LD_VAR 0 3
21184: PPUSH
21185: CALL_OW 274
21189: PPUSH
21190: LD_INT 2
21192: PPUSH
21193: LD_INT 300
21195: PPUSH
21196: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21200: LD_EXP 51
21204: PPUSH
21205: LD_INT 79
21207: PPUSH
21208: LD_INT 52
21210: PPUSH
21211: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21215: LD_INT 35
21217: PPUSH
21218: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21222: LD_EXP 51
21226: PPUSH
21227: LD_INT 3
21229: PUSH
21230: LD_INT 60
21232: PUSH
21233: EMPTY
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 72
21244: PPUSH
21245: LD_INT 79
21247: PPUSH
21248: LD_INT 52
21250: PPUSH
21251: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21255: LD_INT 12
21257: PPUSH
21258: LD_INT 22
21260: PUSH
21261: LD_INT 3
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 21
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 70
21286: NOT
21287: IFFALSE 21215
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 12
21296: PPUSH
21297: LD_INT 21
21299: PUSH
21300: LD_INT 3
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PPUSH
21307: CALL_OW 70
21311: ST_TO_ADDR
// for i in tmp do
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_VAR 0 2
21321: PUSH
21322: FOR_IN
21323: IFFALSE 21339
// SetSide ( i , 8 ) ;
21325: LD_VAR 0 1
21329: PPUSH
21330: LD_INT 8
21332: PPUSH
21333: CALL_OW 235
21337: GO 21322
21339: POP
21340: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21341: LD_INT 63
21343: PPUSH
21344: LD_INT 42
21346: PPUSH
21347: CALL_OW 428
21351: PPUSH
21352: LD_INT 320
21354: PPUSH
21355: CALL_OW 234
// wait ( 0 0$10 ) ;
21359: LD_INT 350
21361: PPUSH
21362: CALL_OW 67
// DialogueOn ;
21366: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21370: LD_INT 8
21372: PPUSH
21373: LD_INT 2
21375: PPUSH
21376: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21380: LD_INT 86
21382: PPUSH
21383: LD_INT 54
21385: PPUSH
21386: CALL_OW 428
21390: PPUSH
21391: LD_STRING antwerp
21393: PPUSH
21394: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21398: LD_EXP 47
21402: PPUSH
21403: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21407: LD_EXP 47
21411: PPUSH
21412: LD_STRING DRf-rast-1
21414: PPUSH
21415: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21419: LD_EXP 34
21423: PPUSH
21424: LD_STRING DH-rast-2
21426: PPUSH
21427: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21431: LD_EXP 47
21435: PPUSH
21436: LD_STRING DRf-rast-3
21438: PPUSH
21439: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21443: LD_EXP 47
21447: PPUSH
21448: LD_STRING DRf-rast-4
21450: PPUSH
21451: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21455: LD_EXP 47
21459: PPUSH
21460: LD_STRING DRf-rast-5
21462: PPUSH
21463: CALL_OW 94
// if IsOk ( Aviradze ) then
21467: LD_EXP 46
21471: PPUSH
21472: CALL_OW 302
21476: IFFALSE 21535
// begin CenterNowOnUnits ( Aviradze ) ;
21478: LD_EXP 46
21482: PPUSH
21483: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21487: LD_EXP 46
21491: PPUSH
21492: LD_STRING DA-rast-6
21494: PPUSH
21495: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21499: LD_EXP 34
21503: PPUSH
21504: LD_STRING DH-rast-7
21506: PPUSH
21507: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21511: LD_EXP 35
21515: PPUSH
21516: LD_STRING DG-rast-8
21518: PPUSH
21519: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21523: LD_EXP 35
21527: PPUSH
21528: LD_STRING DG-rast-9
21530: PPUSH
21531: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21535: LD_EXP 34
21539: PPUSH
21540: LD_STRING DH-rast-10
21542: PPUSH
21543: CALL_OW 88
// DialogueOff ;
21547: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21551: LD_STRING M2
21553: PPUSH
21554: CALL_OW 337
// bergkampfArrived := true ;
21558: LD_ADDR_EXP 3
21562: PUSH
21563: LD_INT 1
21565: ST_TO_ADDR
// PrepareRolfBase ;
21566: CALL 3862 0 0
// end ;
21570: PPOPN 3
21572: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21573: LD_INT 12
21575: PPUSH
21576: LD_INT 22
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PPUSH
21586: CALL_OW 70
21590: PUSH
21591: LD_EXP 47
21595: PPUSH
21596: CALL_OW 302
21600: AND
21601: PUSH
21602: LD_EXP 29
21606: AND
21607: IFFALSE 22167
21609: GO 21611
21611: DISABLE
21612: LD_INT 0
21614: PPUSH
// begin rolfScriptBase := false ;
21615: LD_ADDR_EXP 9
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// DialogueOn ;
21623: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21627: LD_EXP 47
21631: PPUSH
21632: CALL_OW 87
// if rolfSquad >= 10 then
21636: LD_EXP 51
21640: PUSH
21641: LD_INT 10
21643: GREATEREQUAL
21644: IFFALSE 21823
// begin linkedWithRolf := 2 ;
21646: LD_ADDR_EXP 12
21650: PUSH
21651: LD_INT 2
21653: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21654: LD_EXP 47
21658: PPUSH
21659: LD_STRING DRf-rast-11
21661: PPUSH
21662: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21666: LD_EXP 34
21670: PPUSH
21671: LD_STRING DH-rast-12
21673: PPUSH
21674: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21678: LD_EXP 47
21682: PPUSH
21683: LD_STRING DRf-rast-13
21685: PPUSH
21686: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21690: LD_EXP 34
21694: PPUSH
21695: LD_STRING DH-rast-14
21697: PPUSH
21698: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21702: LD_EXP 47
21706: PPUSH
21707: LD_STRING DRf-rast-15
21709: PPUSH
21710: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21714: LD_EXP 34
21718: PPUSH
21719: LD_STRING DH-rast-16
21721: PPUSH
21722: CALL_OW 88
// if IsOk ( Mike ) then
21726: LD_EXP 36
21730: PPUSH
21731: CALL_OW 302
21735: IFFALSE 21809
// begin Say ( Mike , DM-rast-17 ) ;
21737: LD_EXP 36
21741: PPUSH
21742: LD_STRING DM-rast-17
21744: PPUSH
21745: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21749: LD_EXP 34
21753: PPUSH
21754: LD_STRING DH-rast-18
21756: PPUSH
21757: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21761: LD_EXP 36
21765: PPUSH
21766: LD_STRING DM-rast-19
21768: PPUSH
21769: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21773: LD_EXP 34
21777: PPUSH
21778: LD_STRING DH-rast-20
21780: PPUSH
21781: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21785: LD_EXP 36
21789: PPUSH
21790: LD_STRING DM-rast-21
21792: PPUSH
21793: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21797: LD_EXP 34
21801: PPUSH
21802: LD_STRING DH-rast-22
21804: PPUSH
21805: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21809: LD_EXP 34
21813: PPUSH
21814: LD_STRING DH-rast-23
21816: PPUSH
21817: CALL_OW 88
// end else
21821: GO 21973
// begin linkedWithRolf := 1 ;
21823: LD_ADDR_EXP 12
21827: PUSH
21828: LD_INT 1
21830: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21831: LD_EXP 47
21835: PPUSH
21836: LD_STRING DRf-rast-a-11
21838: PPUSH
21839: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21843: LD_EXP 34
21847: PPUSH
21848: LD_STRING DH-rast-a-12
21850: PPUSH
21851: CALL_OW 88
// if IsOk ( Kurt ) then
21855: LD_EXP 45
21859: PPUSH
21860: CALL_OW 302
21864: IFFALSE 21961
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21866: LD_EXP 45
21870: PPUSH
21871: LD_STRING DKs-rast-a-13
21873: PPUSH
21874: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21878: LD_EXP 47
21882: PPUSH
21883: LD_STRING DRf-rast-a-14
21885: PPUSH
21886: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21890: LD_EXP 47
21894: PPUSH
21895: LD_STRING DRf-rast-a-15
21897: PPUSH
21898: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21902: LD_EXP 45
21906: PPUSH
21907: LD_STRING DKs-rast-a-16
21909: PPUSH
21910: CALL_OW 88
// if IsOk ( Givi ) then
21914: LD_EXP 35
21918: PPUSH
21919: CALL_OW 302
21923: IFFALSE 21961
// begin Say ( Givi , DG-rast-a-17 ) ;
21925: LD_EXP 35
21929: PPUSH
21930: LD_STRING DG-rast-a-17
21932: PPUSH
21933: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21937: LD_EXP 35
21941: PPUSH
21942: LD_STRING DG-rast-a-18
21944: PPUSH
21945: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21949: LD_EXP 45
21953: PPUSH
21954: LD_STRING DKs-rast-a-19
21956: PPUSH
21957: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21961: LD_EXP 34
21965: PPUSH
21966: LD_STRING DH-rast-a-20
21968: PPUSH
21969: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21973: LD_EXP 47
21977: PPUSH
21978: LD_STRING DRf-rast-24
21980: PPUSH
21981: CALL_OW 88
// if IsOk ( Aviradze ) then
21985: LD_EXP 46
21989: PPUSH
21990: CALL_OW 302
21994: IFFALSE 22094
// begin Say ( Aviradze , DA-rast-25 ) ;
21996: LD_EXP 46
22000: PPUSH
22001: LD_STRING DA-rast-25
22003: PPUSH
22004: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22008: LD_EXP 34
22012: PPUSH
22013: LD_STRING DH-rast-26
22015: PPUSH
22016: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22020: LD_EXP 46
22024: PPUSH
22025: LD_STRING DA-rast-27
22027: PPUSH
22028: CALL_OW 88
// if IsOk ( Markov ) then
22032: LD_EXP 41
22036: PPUSH
22037: CALL_OW 302
22041: IFFALSE 22069
// begin Say ( Markov , DMar-rast-28 ) ;
22043: LD_EXP 41
22047: PPUSH
22048: LD_STRING DMar-rast-28
22050: PPUSH
22051: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22055: LD_EXP 41
22059: PPUSH
22060: LD_STRING DMar-rast-29
22062: PPUSH
22063: CALL_OW 88
// end else
22067: GO 22092
// if IsOk ( Sophia ) then
22069: LD_EXP 40
22073: PPUSH
22074: CALL_OW 302
22078: IFFALSE 22092
// begin Say ( Sophia , DS-rast-28 ) ;
22080: LD_EXP 40
22084: PPUSH
22085: LD_STRING DS-rast-28
22087: PPUSH
22088: CALL_OW 88
// end ; end else
22092: GO 22117
// if IsOk ( Sophia ) then
22094: LD_EXP 40
22098: PPUSH
22099: CALL_OW 302
22103: IFFALSE 22117
// Say ( Sophia , DS-rast-29 ) ;
22105: LD_EXP 40
22109: PPUSH
22110: LD_STRING DS-rast-29
22112: PPUSH
22113: CALL_OW 88
// DialogueOff ;
22117: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22121: LD_STRING M3
22123: PPUSH
22124: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_INT 22
22135: PUSH
22136: LD_INT 8
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PPUSH
22143: CALL_OW 69
22147: PUSH
22148: FOR_IN
22149: IFFALSE 22165
// SetSide ( i , 2 ) ;
22151: LD_VAR 0 1
22155: PPUSH
22156: LD_INT 2
22158: PPUSH
22159: CALL_OW 235
22163: GO 22148
22165: POP
22166: POP
// end ;
22167: PPOPN 1
22169: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22170: LD_EXP 23
22174: PUSH
22175: LD_EXP 12
22179: NOT
22180: AND
22181: PUSH
22182: LD_EXP 29
22186: AND
22187: IFFALSE 22278
22189: GO 22191
22191: DISABLE
22192: LD_INT 0
22194: PPUSH
// begin canRolfJoin := false ;
22195: LD_ADDR_EXP 29
22199: PUSH
22200: LD_INT 0
22202: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22203: LD_STRING M3
22205: PPUSH
22206: CALL_OW 337
// for i in rolfSquad do
22210: LD_ADDR_VAR 0 1
22214: PUSH
22215: LD_EXP 51
22219: PUSH
22220: FOR_IN
22221: IFFALSE 22276
// begin ComExit ( i ) ;
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL 67548 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22232: LD_VAR 0 1
22236: PPUSH
22237: LD_INT 147
22239: PPUSH
22240: LD_INT 162
22242: PPUSH
22243: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22247: LD_VAR 0 1
22251: PPUSH
22252: LD_INT 1050
22254: PPUSH
22255: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22259: LD_VAR 0 1
22263: PPUSH
22264: LD_INT 103
22266: PPUSH
22267: LD_INT 162
22269: PPUSH
22270: CALL_OW 174
// end ;
22274: GO 22220
22276: POP
22277: POP
// end ;
22278: PPOPN 1
22280: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22281: LD_EXP 3
22285: PUSH
22286: LD_EXP 47
22290: PPUSH
22291: CALL_OW 256
22295: PUSH
22296: LD_INT 400
22298: LESS
22299: AND
22300: PUSH
22301: LD_EXP 12
22305: NOT
22306: AND
22307: PUSH
22308: LD_EXP 29
22312: AND
22313: IFFALSE 22587
22315: GO 22317
22317: DISABLE
22318: LD_INT 0
22320: PPUSH
// begin DialogueOn ;
22321: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22325: LD_EXP 47
22329: PPUSH
22330: LD_STRING DRf-rast-f-11
22332: PPUSH
22333: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22337: LD_EXP 47
22341: PPUSH
22342: LD_STRING DRf-rast-f-12
22344: PPUSH
22345: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22349: LD_EXP 47
22353: PPUSH
22354: LD_STRING DRf-rast-f-13
22356: PPUSH
22357: CALL_OW 94
// DialogueOff ;
22361: CALL_OW 7
// KillUnit ( Rolf ) ;
22365: LD_EXP 47
22369: PPUSH
22370: CALL_OW 66
// wait ( 0 0$1 ) ;
22374: LD_INT 35
22376: PPUSH
22377: CALL_OW 67
// if not IsOk ( Givi ) then
22381: LD_EXP 35
22385: PPUSH
22386: CALL_OW 302
22390: NOT
22391: IFFALSE 22395
// exit ;
22393: GO 22587
// DialogueOn ;
22395: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22399: LD_EXP 35
22403: PPUSH
22404: LD_STRING DG-rast-f-14
22406: PPUSH
22407: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22411: LD_EXP 35
22415: PPUSH
22416: LD_STRING DG-rast-f-15
22418: PPUSH
22419: CALL_OW 88
// if IsOk ( Kaia ) then
22423: LD_EXP 39
22427: PPUSH
22428: CALL_OW 302
22432: IFFALSE 22448
// Say ( Kaia , DK-rast-f-16 ) else
22434: LD_EXP 39
22438: PPUSH
22439: LD_STRING DK-rast-f-16
22441: PPUSH
22442: CALL_OW 88
22446: GO 22535
// if heikeSecondSquad then
22448: LD_EXP 49
22452: IFFALSE 22535
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22454: LD_ADDR_VAR 0 1
22458: PUSH
22459: LD_EXP 49
22463: PUSH
22464: LD_INT 1
22466: PPUSH
22467: LD_EXP 49
22471: PPUSH
22472: CALL_OW 12
22476: ARRAY
22477: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 258
22487: PUSH
22488: LD_INT 1
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22511
22496: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22497: LD_VAR 0 1
22501: PPUSH
22502: LD_STRING DArm-rast-f-a-16
22504: PPUSH
22505: CALL_OW 88
22509: GO 22535
22511: LD_INT 2
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22534
22519: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22520: LD_VAR 0 1
22524: PPUSH
22525: LD_STRING DArf-rast-f-a-16
22527: PPUSH
22528: CALL_OW 88
22532: GO 22535
22534: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22535: LD_EXP 35
22539: PPUSH
22540: LD_STRING DG-rast-f-17
22542: PPUSH
22543: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22547: LD_EXP 35
22551: PPUSH
22552: LD_STRING DG-rast-f-18
22554: PPUSH
22555: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22559: LD_EXP 35
22563: PPUSH
22564: LD_STRING DG-rast-f-19
22566: PPUSH
22567: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22571: LD_EXP 35
22575: PPUSH
22576: LD_STRING DG-rast-f-20
22578: PPUSH
22579: CALL_OW 88
// DialogueOff ;
22583: CALL_OW 7
// end ;
22587: PPOPN 1
22589: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22590: LD_EXP 31
22594: PUSH
22595: LD_INT 2
22597: PPUSH
22598: LD_INT 10
22600: PPUSH
22601: CALL_OW 294
22605: AND
22606: IFFALSE 22679
22608: GO 22610
22610: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22611: LD_EXP 35
22615: PPUSH
22616: LD_STRING DG-Len-1
22618: PPUSH
22619: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22623: LD_EXP 45
22627: PPUSH
22628: LD_STRING DKs-Len-2
22630: PPUSH
22631: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22635: LD_EXP 45
22639: PPUSH
22640: LD_STRING DKs-Len-3
22642: PPUSH
22643: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22647: LD_EXP 34
22651: PPUSH
22652: LD_STRING DH-Len-4
22654: PPUSH
22655: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22659: LD_EXP 39
22663: PPUSH
22664: LD_STRING DK-Len-5
22666: PPUSH
22667: CALL_OW 88
// leninSpotted := true ;
22671: LD_ADDR_EXP 14
22675: PUSH
22676: LD_INT 1
22678: ST_TO_ADDR
// end ;
22679: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22680: LD_EXP 1
22684: PUSH
22685: LD_EXP 3
22689: PUSH
22690: LD_OWVAR 1
22694: PUSH
22695: LD_INT 67200
22697: PUSH
22698: LD_INT 63000
22700: PUSH
22701: LD_INT 58800
22703: PUSH
22704: LD_INT 54600
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: PUSH
22713: LD_OWVAR 67
22717: ARRAY
22718: GREATER
22719: AND
22720: OR
22721: IFFALSE 23458
22723: GO 22725
22725: DISABLE
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
22730: PPUSH
22731: PPUSH
// begin PrepareOmarSquad ;
22732: CALL 5144 0 0
// repeat wait ( 0 0$1 ) ;
22736: LD_INT 35
22738: PPUSH
22739: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22743: LD_INT 14
22745: PPUSH
22746: LD_INT 22
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 21
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 59
22771: PUSH
22772: EMPTY
22773: LIST
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 70
22788: NOT
22789: IFFALSE 22736
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22791: LD_ADDR_VAR 0 2
22795: PUSH
22796: LD_INT 14
22798: PPUSH
22799: LD_INT 22
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PPUSH
22809: CALL_OW 70
22813: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22814: LD_ADDR_VAR 0 3
22818: PUSH
22819: LD_VAR 0 2
22823: PUSH
22824: LD_INT 0
22826: GREATER
22827: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22828: LD_ADDR_VAR 0 4
22832: PUSH
22833: LD_EXP 34
22837: PPUSH
22838: LD_INT 14
22840: PPUSH
22841: CALL_OW 308
22845: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_INT 21
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 72
22865: IFFALSE 22970
// begin if heikeNearbyOmar then
22867: LD_VAR 0 4
22871: IFFALSE 22887
// Say ( Omar , DOm-Base-1b ) else
22873: LD_EXP 44
22877: PPUSH
22878: LD_STRING DOm-Base-1b
22880: PPUSH
22881: CALL_OW 88
22885: GO 22899
// SayRadio ( Omar , DOm-Base-1br ) ;
22887: LD_EXP 44
22891: PPUSH
22892: LD_STRING DOm-Base-1br
22894: PPUSH
22895: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22899: LD_ADDR_VAR 0 1
22903: PUSH
22904: LD_VAR 0 2
22908: PPUSH
22909: LD_INT 21
22911: PUSH
22912: LD_INT 3
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PPUSH
22919: CALL_OW 72
22923: PUSH
22924: FOR_IN
22925: IFFALSE 22966
// begin if UnitsInside ( i ) then
22927: LD_VAR 0 1
22931: PPUSH
22932: CALL_OW 313
22936: IFFALSE 22952
// ComExitBuilding ( UnitsInside ( i ) ) ;
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 313
22947: PPUSH
22948: CALL_OW 122
// SetSide ( i , 5 ) ;
22952: LD_VAR 0 1
22956: PPUSH
22957: LD_INT 5
22959: PPUSH
22960: CALL_OW 235
// end ;
22964: GO 22924
22966: POP
22967: POP
// end else
22968: GO 23063
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22970: LD_VAR 0 2
22974: PPUSH
22975: LD_INT 21
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PPUSH
22985: CALL_OW 72
22989: IFFALSE 23025
// begin if heikeNearbyOmar then
22991: LD_VAR 0 4
22995: IFFALSE 23011
// Say ( Omar , DOm-Base-1v ) else
22997: LD_EXP 44
23001: PPUSH
23002: LD_STRING DOm-Base-1v
23004: PPUSH
23005: CALL_OW 88
23009: GO 23023
// SayRadio ( Omar , DOm-Base-1vr ) end else
23011: LD_EXP 44
23015: PPUSH
23016: LD_STRING DOm-Base-1vr
23018: PPUSH
23019: CALL_OW 94
23023: GO 23063
// if inOmarBase then
23025: LD_VAR 0 3
23029: IFFALSE 23063
// begin if heikeNearbyOmar then
23031: LD_VAR 0 4
23035: IFFALSE 23051
// Say ( Omar , DOm-Base-1h ) else
23037: LD_EXP 44
23041: PPUSH
23042: LD_STRING DOm-Base-1h
23044: PPUSH
23045: CALL_OW 88
23049: GO 23063
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23051: LD_EXP 44
23055: PPUSH
23056: LD_STRING DOm-Base-1hr
23058: PPUSH
23059: CALL_OW 94
// for i in omarSquad do
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_EXP 52
23072: PUSH
23073: FOR_IN
23074: IFFALSE 23105
// if GetLives ( i ) < 750 then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 256
23085: PUSH
23086: LD_INT 750
23088: LESS
23089: IFFALSE 23103
// SetLives ( i , 1000 ) ;
23091: LD_VAR 0 1
23095: PPUSH
23096: LD_INT 1000
23098: PPUSH
23099: CALL_OW 234
23103: GO 23073
23105: POP
23106: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23107: LD_ADDR_VAR 0 1
23111: PUSH
23112: LD_INT 14
23114: PPUSH
23115: LD_INT 21
23117: PUSH
23118: LD_INT 3
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 70
23129: PUSH
23130: FOR_IN
23131: IFFALSE 23147
// SetSide ( i , 5 ) ;
23133: LD_VAR 0 1
23137: PPUSH
23138: LD_INT 5
23140: PPUSH
23141: CALL_OW 235
23145: GO 23130
23147: POP
23148: POP
// wait ( 0 0$3 ) ;
23149: LD_INT 105
23151: PPUSH
23152: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23156: LD_INT 5
23158: PPUSH
23159: LD_INT 2
23161: PPUSH
23162: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23166: LD_EXP 44
23170: PPUSH
23171: CALL_OW 87
// DialogueOn ;
23175: CALL_OW 6
// if heikeNearbyOmar then
23179: LD_VAR 0 4
23183: IFFALSE 23241
// begin Say ( Omar , DOm-Veh-1a ) ;
23185: LD_EXP 44
23189: PPUSH
23190: LD_STRING DOm-Veh-1a
23192: PPUSH
23193: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23197: LD_EXP 44
23201: PPUSH
23202: LD_STRING DOm-Veh-2a
23204: PPUSH
23205: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23209: LD_EXP 44
23213: PPUSH
23214: LD_STRING DOm-Veh-3a
23216: PPUSH
23217: CALL_OW 88
// if mortarConstructed then
23221: LD_EXP 15
23225: IFFALSE 23239
// Say ( Omar , DOm-Veh-4a ) ;
23227: LD_EXP 44
23231: PPUSH
23232: LD_STRING DOm-Veh-4a
23234: PPUSH
23235: CALL_OW 88
// end else
23239: GO 23295
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23241: LD_EXP 44
23245: PPUSH
23246: LD_STRING DOm-Veh-1
23248: PPUSH
23249: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23253: LD_EXP 44
23257: PPUSH
23258: LD_STRING DOm-Veh-2
23260: PPUSH
23261: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23265: LD_EXP 44
23269: PPUSH
23270: LD_STRING DOm-Veh-3
23272: PPUSH
23273: CALL_OW 94
// if mortarConstructed then
23277: LD_EXP 15
23281: IFFALSE 23295
// SayRadio ( Omar , DOm-Veh-4 ) ;
23283: LD_EXP 44
23287: PPUSH
23288: LD_STRING DOm-Veh-4
23290: PPUSH
23291: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23295: LD_EXP 34
23299: PPUSH
23300: LD_STRING DH-Veh-5
23302: PPUSH
23303: CALL_OW 88
// if IsOk ( Kurt ) then
23307: LD_EXP 45
23311: PPUSH
23312: CALL_OW 302
23316: IFFALSE 23366
// begin Say ( Kurt , DKs-Veh-6 ) ;
23318: LD_EXP 45
23322: PPUSH
23323: LD_STRING DKs-Veh-6
23325: PPUSH
23326: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23330: LD_EXP 45
23334: PPUSH
23335: LD_STRING DKs-Veh-7
23337: PPUSH
23338: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23342: LD_EXP 35
23346: PPUSH
23347: LD_STRING DG-Veh-8
23349: PPUSH
23350: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23354: LD_EXP 36
23358: PPUSH
23359: LD_STRING DM-Veh-9
23361: PPUSH
23362: CALL_OW 88
// end ; DialogueOff ;
23366: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23370: LD_STRING M4
23372: PPUSH
23373: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23377: LD_EXP 44
23381: PPUSH
23382: LD_INT 341
23384: PPUSH
23385: LD_INT 232
23387: PPUSH
23388: CALL_OW 428
23392: PPUSH
23393: CALL_OW 120
// omarArrived := true ;
23397: LD_ADDR_EXP 6
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// omarScriptBase := true ;
23405: LD_ADDR_EXP 10
23409: PUSH
23410: LD_INT 1
23412: ST_TO_ADDR
// omarWantVehicles := true ;
23413: LD_ADDR_EXP 18
23417: PUSH
23418: LD_INT 1
23420: ST_TO_ADDR
// if debug then
23421: LD_EXP 1
23425: IFFALSE 23458
// begin wait ( 0 0$25 ) ;
23427: LD_INT 875
23429: PPUSH
23430: CALL_OW 67
// omarScriptBase := false ;
23434: LD_ADDR_EXP 10
23438: PUSH
23439: LD_INT 0
23441: ST_TO_ADDR
// omarWantVehicles := false ;
23442: LD_ADDR_EXP 18
23446: PUSH
23447: LD_INT 0
23449: ST_TO_ADDR
// omarAttack := true ;
23450: LD_ADDR_EXP 23
23454: PUSH
23455: LD_INT 1
23457: ST_TO_ADDR
// end ; end ;
23458: PPOPN 4
23460: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23461: LD_INT 10
23463: PPUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PPUSH
23474: CALL_OW 70
23478: PUSH
23479: LD_EXP 6
23483: AND
23484: PUSH
23485: LD_EXP 44
23489: PPUSH
23490: CALL_OW 302
23494: AND
23495: PUSH
23496: LD_EXP 23
23500: NOT
23501: AND
23502: IFFALSE 23519
23504: GO 23506
23506: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23507: LD_EXP 44
23511: PPUSH
23512: LD_STRING DOm-Lenin
23514: PPUSH
23515: CALL_OW 94
23519: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23520: LD_EXP 47
23524: PPUSH
23525: CALL_OW 302
23529: PUSH
23530: LD_EXP 12
23534: AND
23535: PUSH
23536: LD_EXP 6
23540: AND
23541: IFFALSE 23645
23543: GO 23545
23545: DISABLE
// begin wait ( 1 1$00 ) ;
23546: LD_INT 2100
23548: PPUSH
23549: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23553: LD_EXP 47
23557: PPUSH
23558: CALL_OW 87
// DialogueOn ;
23562: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23566: LD_EXP 47
23570: PPUSH
23571: LD_STRING DRf-Veh-10
23573: PPUSH
23574: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23578: LD_EXP 47
23582: PPUSH
23583: LD_STRING DRf-Veh-11
23585: PPUSH
23586: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23590: LD_EXP 34
23594: PPUSH
23595: LD_STRING DH-Veh-12
23597: PPUSH
23598: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23602: LD_EXP 34
23606: PPUSH
23607: LD_STRING DH-Veh-13
23609: PPUSH
23610: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23614: LD_EXP 47
23618: PPUSH
23619: LD_STRING DRf-Veh-14
23621: PPUSH
23622: CALL_OW 88
// DialogueOff ;
23626: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23630: LD_STRING M5
23632: PPUSH
23633: CALL_OW 337
// rolfWantVehicles := true ;
23637: LD_ADDR_EXP 17
23641: PUSH
23642: LD_INT 1
23644: ST_TO_ADDR
// end ;
23645: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23646: LD_EXP 18
23650: IFFALSE 24413
23652: GO 23654
23654: DISABLE
23655: LD_INT 0
23657: PPUSH
23658: PPUSH
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
// begin wait ( 0 0$3 ) ;
23663: LD_INT 105
23665: PPUSH
23666: CALL_OW 67
// Hint ( OmarVehicles ) ;
23670: LD_STRING OmarVehicles
23672: PPUSH
23673: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23677: LD_INT 16
23679: PPUSH
23680: LD_INT 1
23682: PPUSH
23683: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23687: LD_INT 35
23689: PPUSH
23690: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23694: LD_ADDR_EXP 20
23698: PUSH
23699: LD_EXP 20
23703: PUSH
23704: LD_INT 35
23706: MINUS
23707: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23708: LD_EXP 20
23712: PUSH
23713: LD_INT 0
23715: LESSEQUAL
23716: IFFALSE 23816
// begin display_strings := [ ] ;
23718: LD_ADDR_OWVAR 47
23722: PUSH
23723: EMPTY
23724: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23725: LD_STRING M4a
23727: PPUSH
23728: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23732: LD_INT 16
23734: PPUSH
23735: LD_INT 0
23737: PPUSH
23738: CALL_OW 424
// DialogueOn ;
23742: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23746: LD_EXP 44
23750: PPUSH
23751: LD_STRING DOm-Veh-b-15
23753: PPUSH
23754: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23758: LD_EXP 34
23762: PPUSH
23763: LD_STRING DH-Veh-b-16
23765: PPUSH
23766: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23770: LD_EXP 44
23774: PPUSH
23775: LD_STRING DOm-Veh-b-17
23777: PPUSH
23778: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23782: LD_EXP 39
23786: PPUSH
23787: LD_STRING DK-Veh-b-18
23789: PPUSH
23790: CALL_OW 88
// DialogueOff ;
23794: CALL_OW 7
// omarAttack := true ;
23798: LD_ADDR_EXP 23
23802: PUSH
23803: LD_INT 1
23805: ST_TO_ADDR
// omarScriptBase := false ;
23806: LD_ADDR_EXP 10
23810: PUSH
23811: LD_INT 0
23813: ST_TO_ADDR
// exit ;
23814: GO 24413
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23816: LD_EXP 21
23820: PUSH
23821: LD_INT 16
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 21
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 3
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 34
23852: PUSH
23853: LD_INT 32
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 34
23862: PUSH
23863: LD_INT 88
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 34
23872: PUSH
23873: LD_INT 31
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 33
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 58
23902: PUSH
23903: EMPTY
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: PPUSH
23913: CALL_OW 70
23917: LESSEQUAL
23918: IFFALSE 23687
// omarWaitingForVehiclesTimer := 0 0$00 ;
23920: LD_ADDR_EXP 20
23924: PUSH
23925: LD_INT 0
23927: ST_TO_ADDR
// display_strings := [ ] ;
23928: LD_ADDR_OWVAR 47
23932: PUSH
23933: EMPTY
23934: ST_TO_ADDR
// DialogueOn ;
23935: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23939: LD_EXP 44
23943: PPUSH
23944: LD_STRING DOm-Veh-a-15
23946: PPUSH
23947: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23951: LD_EXP 39
23955: PPUSH
23956: LD_STRING DK-Veh-a-16
23958: PPUSH
23959: CALL_OW 88
// DialogueOff ;
23963: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23967: LD_STRING M4a
23969: PPUSH
23970: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23974: LD_INT 16
23976: PPUSH
23977: LD_INT 0
23979: PPUSH
23980: CALL_OW 424
// omarHasVehicles := true ;
23984: LD_ADDR_EXP 22
23988: PUSH
23989: LD_INT 1
23991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23992: LD_INT 35
23994: PPUSH
23995: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23999: LD_EXP 19
24003: PUSH
24004: LD_INT 0
24006: EQUAL
24007: IFFALSE 23992
// wait ( 1 1$00 ) ;
24009: LD_INT 2100
24011: PPUSH
24012: CALL_OW 67
// omarAttack := true ;
24016: LD_ADDR_EXP 23
24020: PUSH
24021: LD_INT 1
24023: ST_TO_ADDR
// omarScriptBase := false ;
24024: LD_ADDR_EXP 10
24028: PUSH
24029: LD_INT 0
24031: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24032: LD_ADDR_VAR 0 2
24036: PUSH
24037: LD_INT 16
24039: PPUSH
24040: LD_INT 22
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 21
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 33
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 58
24072: PUSH
24073: EMPTY
24074: LIST
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 70
24086: ST_TO_ADDR
// for i in tmp do
24087: LD_ADDR_VAR 0 1
24091: PUSH
24092: LD_VAR 0 2
24096: PUSH
24097: FOR_IN
24098: IFFALSE 24126
// begin SetFuel ( i , 100 ) ;
24100: LD_VAR 0 1
24104: PPUSH
24105: LD_INT 100
24107: PPUSH
24108: CALL_OW 240
// SetSide ( i , 5 ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_INT 5
24119: PPUSH
24120: CALL_OW 235
// end ;
24124: GO 24097
24126: POP
24127: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24128: LD_ADDR_VAR 0 3
24132: PUSH
24133: LD_EXP 52
24137: PPUSH
24138: LD_INT 25
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 72
24152: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24153: LD_ADDR_VAR 0 4
24157: PUSH
24158: LD_EXP 52
24162: PPUSH
24163: LD_INT 3
24165: PUSH
24166: LD_INT 55
24168: PUSH
24169: EMPTY
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 25
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PPUSH
24190: CALL_OW 72
24194: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24195: LD_ADDR_VAR 0 5
24199: PUSH
24200: LD_INT 324
24202: PPUSH
24203: LD_INT 234
24205: PPUSH
24206: CALL_OW 428
24210: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24211: LD_ADDR_VAR 0 6
24215: PUSH
24216: LD_INT 334
24218: PPUSH
24219: LD_INT 241
24221: PPUSH
24222: CALL_OW 428
24226: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24227: LD_VAR 0 6
24231: PPUSH
24232: CALL_OW 313
24236: PPUSH
24237: CALL_OW 122
// if eng then
24241: LD_VAR 0 3
24245: IFFALSE 24353
// begin if eng + mech <= tmp then
24247: LD_VAR 0 3
24251: PUSH
24252: LD_VAR 0 4
24256: PLUS
24257: PUSH
24258: LD_VAR 0 2
24262: LESSEQUAL
24263: IFFALSE 24318
// begin ComEnterUnit ( eng , workshop ) ;
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_VAR 0 5
24274: PPUSH
24275: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24279: LD_VAR 0 3
24283: PPUSH
24284: LD_INT 3
24286: PPUSH
24287: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24291: LD_VAR 0 3
24295: PPUSH
24296: CALL_OW 182
// mech := mech union eng ;
24300: LD_ADDR_VAR 0 4
24304: PUSH
24305: LD_VAR 0 4
24309: PUSH
24310: LD_VAR 0 3
24314: UNION
24315: ST_TO_ADDR
// end else
24316: GO 24353
// begin ComEnterUnit ( eng , armoury ) ;
24318: LD_VAR 0 3
24322: PPUSH
24323: LD_VAR 0 6
24327: PPUSH
24328: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24332: LD_VAR 0 3
24336: PPUSH
24337: LD_INT 1
24339: PPUSH
24340: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24344: LD_VAR 0 3
24348: PPUSH
24349: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24353: LD_ADDR_VAR 0 1
24357: PUSH
24358: DOUBLE
24359: LD_INT 1
24361: DEC
24362: ST_TO_ADDR
24363: LD_VAR 0 2
24367: PUSH
24368: FOR_TO
24369: IFFALSE 24411
// if i <= mech then
24371: LD_VAR 0 1
24375: PUSH
24376: LD_VAR 0 4
24380: LESSEQUAL
24381: IFFALSE 24409
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24383: LD_VAR 0 4
24387: PUSH
24388: LD_VAR 0 1
24392: ARRAY
24393: PPUSH
24394: LD_VAR 0 2
24398: PUSH
24399: LD_VAR 0 1
24403: ARRAY
24404: PPUSH
24405: CALL_OW 180
24409: GO 24368
24411: POP
24412: POP
// end ;
24413: PPOPN 6
24415: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24416: LD_EXP 47
24420: PPUSH
24421: CALL_OW 302
24425: PUSH
24426: LD_EXP 17
24430: AND
24431: IFFALSE 25055
24433: GO 24435
24435: DISABLE
24436: LD_INT 0
24438: PPUSH
24439: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24440: LD_INT 35
24442: PPUSH
24443: CALL_OW 67
// hasBadWeapons := false ;
24447: LD_ADDR_VAR 0 2
24451: PUSH
24452: LD_INT 0
24454: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24455: LD_ADDR_EXP 19
24459: PUSH
24460: LD_EXP 19
24464: PUSH
24465: LD_INT 35
24467: MINUS
24468: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24469: LD_EXP 19
24473: PUSH
24474: LD_INT 0
24476: LESSEQUAL
24477: IFFALSE 24739
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24479: LD_ADDR_EXP 19
24483: PUSH
24484: LD_INT 0
24486: ST_TO_ADDR
// display_strings := [ ] ;
24487: LD_ADDR_OWVAR 47
24491: PUSH
24492: EMPTY
24493: ST_TO_ADDR
// DialogueOn ;
24494: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24498: LD_EXP 47
24502: PPUSH
24503: LD_STRING DRf-Veh-b-19
24505: PPUSH
24506: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24510: LD_EXP 47
24514: PPUSH
24515: LD_STRING DRf-Veh-b-20
24517: PPUSH
24518: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24522: LD_EXP 34
24526: PPUSH
24527: LD_STRING DH-Veh-b-21
24529: PPUSH
24530: CALL_OW 88
// if IsOk ( Givi ) then
24534: LD_EXP 35
24538: PPUSH
24539: CALL_OW 302
24543: IFFALSE 24581
// begin Say ( Givi , DG-Veh-b-22 ) ;
24545: LD_EXP 35
24549: PPUSH
24550: LD_STRING DG-Veh-b-22
24552: PPUSH
24553: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24557: LD_EXP 34
24561: PPUSH
24562: LD_STRING DH-Veh-b-23
24564: PPUSH
24565: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24569: LD_EXP 35
24573: PPUSH
24574: LD_STRING DG-Veh-b-24
24576: PPUSH
24577: CALL_OW 88
// end ; DialogueOff ;
24581: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24585: LD_STRING M5a
24587: PPUSH
24588: CALL_OW 337
// for i in rolfSquad do
24592: LD_ADDR_VAR 0 1
24596: PUSH
24597: LD_EXP 51
24601: PUSH
24602: FOR_IN
24603: IFFALSE 24720
// begin SetSide ( i , 8 ) ;
24605: LD_VAR 0 1
24609: PPUSH
24610: LD_INT 8
24612: PPUSH
24613: CALL_OW 235
// if IsDriver ( i ) then
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL 64754 0 1
24626: IFFALSE 24698
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 310
24637: PPUSH
24638: CALL_OW 264
24642: PUSH
24643: LD_INT 51
24645: PUSH
24646: LD_INT 52
24648: PUSH
24649: LD_INT 32
24651: PUSH
24652: LD_INT 88
24654: PUSH
24655: LD_INT 31
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: IN
24665: NOT
24666: IFFALSE 24687
// SetSide ( IsInUnit ( i ) , 8 ) else
24668: LD_VAR 0 1
24672: PPUSH
24673: CALL_OW 310
24677: PPUSH
24678: LD_INT 8
24680: PPUSH
24681: CALL_OW 235
24685: GO 24696
// ComExitVehicle ( i ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 121
// end else
24696: GO 24718
// if IsInUnit ( i ) then
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 310
24707: IFFALSE 24718
// ComExitBuilding ( i ) ;
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 122
// end ;
24718: GO 24602
24720: POP
24721: POP
// wait ( 0 0$10 ) ;
24722: LD_INT 350
24724: PPUSH
24725: CALL_OW 67
// rolfAttack := true ;
24729: LD_ADDR_EXP 32
24733: PUSH
24734: LD_INT 1
24736: ST_TO_ADDR
// exit ;
24737: GO 25055
// end ; if IsDead ( Rolf ) then
24739: LD_EXP 47
24743: PPUSH
24744: CALL_OW 301
24748: IFFALSE 24759
// begin ChangeMissionObjectives ( M5a ) ;
24750: LD_STRING M5a
24752: PPUSH
24753: CALL_OW 337
// exit ;
24757: GO 25055
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24759: LD_EXP 51
24763: PPUSH
24764: LD_INT 55
24766: PUSH
24767: EMPTY
24768: LIST
24769: PPUSH
24770: CALL_OW 72
24774: PPUSH
24775: CALL 31550 0 1
24779: PUSH
24780: LD_EXP 51
24784: PPUSH
24785: CALL 31550 0 1
24789: EQUAL
24790: IFFALSE 24907
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24792: LD_ADDR_VAR 0 1
24796: PUSH
24797: LD_EXP 51
24801: PPUSH
24802: LD_INT 55
24804: PUSH
24805: EMPTY
24806: LIST
24807: PPUSH
24808: CALL_OW 72
24812: PUSH
24813: FOR_IN
24814: IFFALSE 24874
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24816: LD_VAR 0 1
24820: PPUSH
24821: CALL_OW 310
24825: PPUSH
24826: CALL_OW 264
24830: PUSH
24831: LD_INT 51
24833: PUSH
24834: LD_INT 52
24836: PUSH
24837: LD_INT 32
24839: PUSH
24840: LD_INT 88
24842: PUSH
24843: LD_INT 31
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: IN
24853: IFFALSE 24872
// begin hasBadWeapons := true ;
24855: LD_ADDR_VAR 0 2
24859: PUSH
24860: LD_INT 1
24862: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24863: LD_STRING QBadWeapon
24865: PPUSH
24866: CALL_OW 97
// break ;
24870: GO 24874
// end ;
24872: GO 24813
24874: POP
24875: POP
// if not hasBadWeapons then
24876: LD_VAR 0 2
24880: NOT
24881: IFFALSE 24907
// if Query ( QRolf ) = 1 then
24883: LD_STRING QRolf
24885: PPUSH
24886: CALL_OW 97
24890: PUSH
24891: LD_INT 1
24893: EQUAL
24894: IFFALSE 24900
// break else
24896: GO 24911
24898: GO 24907
// wait ( 0 0$15 ) ;
24900: LD_INT 525
24902: PPUSH
24903: CALL_OW 67
// end ; until false ;
24907: LD_INT 0
24909: IFFALSE 24440
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24911: LD_ADDR_EXP 19
24915: PUSH
24916: LD_INT 0
24918: ST_TO_ADDR
// display_strings := [ ] ;
24919: LD_ADDR_OWVAR 47
24923: PUSH
24924: EMPTY
24925: ST_TO_ADDR
// DialogueOn ;
24926: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24930: LD_EXP 47
24934: PPUSH
24935: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24939: LD_EXP 47
24943: PPUSH
24944: LD_STRING DRf-Veh-a-17
24946: PPUSH
24947: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24951: LD_EXP 34
24955: PPUSH
24956: LD_STRING DH-08-Veh-a-18
24958: PPUSH
24959: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24963: LD_EXP 47
24967: PPUSH
24968: LD_STRING DRf-Veh-a-19
24970: PPUSH
24971: CALL_OW 88
// DialogueOff ;
24975: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24979: LD_STRING M5a
24981: PPUSH
24982: CALL_OW 337
// rolfHasVehicles := true ;
24986: LD_ADDR_EXP 16
24990: PUSH
24991: LD_INT 1
24993: ST_TO_ADDR
// for i in rolfSquad do
24994: LD_ADDR_VAR 0 1
24998: PUSH
24999: LD_EXP 51
25003: PUSH
25004: FOR_IN
25005: IFFALSE 25038
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL_OW 310
25016: PPUSH
25017: LD_INT 8
25019: PPUSH
25020: CALL_OW 235
// SetSide ( i , 8 ) ;
25024: LD_VAR 0 1
25028: PPUSH
25029: LD_INT 8
25031: PPUSH
25032: CALL_OW 235
// end ;
25036: GO 25004
25038: POP
25039: POP
// wait ( 0 0$10 ) ;
25040: LD_INT 350
25042: PPUSH
25043: CALL_OW 67
// rolfAttack := true ;
25047: LD_ADDR_EXP 32
25051: PUSH
25052: LD_INT 1
25054: ST_TO_ADDR
// end ;
25055: PPOPN 2
25057: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25058: LD_EXP 32
25062: PUSH
25063: LD_EXP 23
25067: AND
25068: IFFALSE 25080
25070: GO 25072
25072: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25073: LD_STRING M6a
25075: PPUSH
25076: CALL_OW 337
25080: END
// every 0 0$1 trigger leninSpotted do
25081: LD_EXP 14
25085: IFFALSE 25173
25087: GO 25089
25089: DISABLE
// begin wait ( 0 0$10 ) ;
25090: LD_INT 350
25092: PPUSH
25093: CALL_OW 67
// DialogueOn ;
25097: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25101: LD_EXP 46
25105: PPUSH
25106: LD_STRING DA-Transmission-1
25108: PPUSH
25109: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25113: LD_EXP 53
25117: PPUSH
25118: LD_STRING DMzw-Transmission-2
25120: PPUSH
25121: CALL_OW 94
// if gaidarKilled then
25125: LD_EXP 7
25129: IFFALSE 25145
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25131: LD_EXP 53
25135: PPUSH
25136: LD_STRING DMzw-Transmission-3
25138: PPUSH
25139: CALL_OW 94
25143: GO 25157
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25145: LD_EXP 53
25149: PPUSH
25150: LD_STRING DMzw-Transmission-a-3
25152: PPUSH
25153: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25157: LD_EXP 34
25161: PPUSH
25162: LD_STRING DH-Transmission-4
25164: PPUSH
25165: CALL_OW 88
// DialogueOff ;
25169: CALL_OW 7
// end ;
25173: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25174: LD_INT 22
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 25
25186: PUSH
25187: LD_INT 9
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 101
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: PPUSH
25209: CALL_OW 69
25213: PUSH
25214: LD_EXP 34
25218: PPUSH
25219: CALL_OW 302
25223: AND
25224: IFFALSE 25304
25226: GO 25228
25228: DISABLE
// begin wait ( 0 0$3 ) ;
25229: LD_INT 105
25231: PPUSH
25232: CALL_OW 67
// DialogueOn ;
25236: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25240: LD_INT 22
25242: PUSH
25243: LD_INT 3
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 25
25252: PUSH
25253: LD_INT 9
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 101
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: PPUSH
25275: CALL_OW 69
25279: PUSH
25280: LD_INT 1
25282: ARRAY
25283: PPUSH
25284: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25288: LD_EXP 34
25292: PPUSH
25293: LD_STRING DH-Rubazooka-1
25295: PPUSH
25296: CALL_OW 88
// DialogueOff ;
25300: CALL_OW 7
// end ;
25304: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25305: LD_INT 19
25307: PPUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PPUSH
25318: CALL_OW 70
25322: PUSH
25323: LD_EXP 28
25327: AND
25328: IFFALSE 25387
25330: GO 25332
25332: DISABLE
// begin DialogueOn ;
25333: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25337: LD_INT 19
25339: PPUSH
25340: LD_INT 22
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: CALL_OW 70
25354: PPUSH
25355: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25359: LD_EXP 34
25363: PPUSH
25364: LD_STRING DH-Ruattfirst-1
25366: PPUSH
25367: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25371: LD_EXP 34
25375: PPUSH
25376: LD_STRING DH-Ruattfirst-2
25378: PPUSH
25379: CALL_OW 88
// DialogueOff ;
25383: CALL_OW 7
// end ;
25387: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25388: LD_INT 19
25390: PPUSH
25391: LD_INT 22
25393: PUSH
25394: LD_INT 3
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 70
25405: PUSH
25406: LD_EXP 28
25410: NOT
25411: AND
25412: IFFALSE 25459
25414: GO 25416
25416: DISABLE
// begin DialogueOn ;
25417: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25421: LD_INT 19
25423: PPUSH
25424: LD_INT 22
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 70
25438: PPUSH
25439: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25443: LD_EXP 34
25447: PPUSH
25448: LD_STRING DH-Ruattnext-1
25450: PPUSH
25451: CALL_OW 88
// DialogueOff ;
25455: CALL_OW 7
// end ;
25459: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25460: LD_EXP 53
25464: PPUSH
25465: CALL_OW 301
25469: PUSH
25470: LD_EXP 44
25474: PPUSH
25475: CALL_OW 302
25479: AND
25480: IFFALSE 25497
25482: GO 25484
25484: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25485: LD_EXP 44
25489: PPUSH
25490: LD_STRING DOm-Morozov
25492: PPUSH
25493: CALL_OW 94
25497: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25498: LD_EXP 31
25502: PUSH
25503: LD_EXP 48
25507: PPUSH
25508: CALL_OW 274
25512: PPUSH
25513: LD_INT 2
25515: PPUSH
25516: CALL_OW 275
25520: PUSH
25521: LD_INT 30
25523: LESSEQUAL
25524: AND
25525: IFFALSE 25615
25527: GO 25529
25529: DISABLE
// begin wait ( 0 0$10 ) ;
25530: LD_INT 350
25532: PPUSH
25533: CALL_OW 67
// DialogueOn ;
25537: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25541: LD_EXP 34
25545: PPUSH
25546: LD_STRING DH-Fuel-1
25548: PPUSH
25549: CALL_OW 88
// if IsOk ( Givi ) then
25553: LD_EXP 35
25557: PPUSH
25558: CALL_OW 302
25562: IFFALSE 25600
// begin Say ( Givi , DG-Fuel-2 ) ;
25564: LD_EXP 35
25568: PPUSH
25569: LD_STRING DG-Fuel-2
25571: PPUSH
25572: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25576: LD_EXP 35
25580: PPUSH
25581: LD_STRING DG-Fuel-3
25583: PPUSH
25584: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25588: LD_EXP 35
25592: PPUSH
25593: LD_STRING DG-Fuel-4
25595: PPUSH
25596: CALL_OW 88
// end ; DialogueOff ;
25600: CALL_OW 7
// Query ( QOil ) ;
25604: LD_STRING QOil
25606: PPUSH
25607: CALL_OW 97
// GoForOil ( ) ;
25611: CALL 8886 0 0
// end ;
25615: END
// every 0 0$1 trigger ( leninSpotted and omarAttack ) or IsDead ( Morozov ) do
25616: LD_EXP 14
25620: PUSH
25621: LD_EXP 23
25625: AND
25626: PUSH
25627: LD_EXP 53
25631: PPUSH
25632: CALL_OW 301
25636: OR
25637: IFFALSE 25978
25639: GO 25641
25641: DISABLE
// begin if IsDead ( Morozov ) then
25642: LD_EXP 53
25646: PPUSH
25647: CALL_OW 301
25651: IFFALSE 25662
// wait ( 1 1$45 ) else
25653: LD_INT 3675
25655: PPUSH
25656: CALL_OW 67
25660: GO 25690
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25662: LD_INT 19950
25664: PUSH
25665: LD_INT 16800
25667: PUSH
25668: LD_INT 16100
25670: PUSH
25671: LD_INT 13650
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: PUSH
25680: LD_OWVAR 67
25684: ARRAY
25685: PPUSH
25686: CALL_OW 67
// DialogueOn ;
25690: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25694: LD_EXP 42
25698: PPUSH
25699: LD_STRING DShar-End-1
25701: PPUSH
25702: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25706: LD_EXP 34
25710: PPUSH
25711: LD_STRING DH-End-2
25713: PPUSH
25714: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25718: LD_EXP 42
25722: PPUSH
25723: LD_STRING DShar-End-3
25725: PPUSH
25726: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25730: LD_EXP 34
25734: PPUSH
25735: LD_STRING DH-End-4
25737: PPUSH
25738: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25742: LD_EXP 42
25746: PPUSH
25747: LD_STRING DShar-End-5
25749: PPUSH
25750: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25754: LD_EXP 42
25758: PPUSH
25759: LD_STRING DShar-End-6
25761: PPUSH
25762: CALL_OW 94
// dwait ( 0 0$2 ) ;
25766: LD_INT 70
25768: PPUSH
25769: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25773: LD_EXP 34
25777: PPUSH
25778: LD_STRING DH-End-7
25780: PPUSH
25781: CALL_OW 88
// DialogueOff ;
25785: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25789: LD_STRING M6
25791: PPUSH
25792: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25796: LD_INT 17
25798: PPUSH
25799: LD_INT 1
25801: PPUSH
25802: CALL_OW 424
// escapeAllowed := true ;
25806: LD_ADDR_EXP 24
25810: PUSH
25811: LD_INT 1
25813: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25814: LD_INT 70
25816: PPUSH
25817: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25821: LD_EXP 45
25825: PPUSH
25826: LD_STRING DKs-End-8
25828: PPUSH
25829: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25833: LD_EXP 39
25837: PPUSH
25838: LD_STRING DK-End-10
25840: PPUSH
25841: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25845: LD_EXP 45
25849: PPUSH
25850: LD_STRING DKs-End-9
25852: PPUSH
25853: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25857: LD_EXP 41
25861: PPUSH
25862: LD_STRING DMar-End-11
25864: PPUSH
25865: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25869: LD_STRING 05_DrugsTested
25871: PPUSH
25872: LD_EXP 1
25876: PPUSH
25877: CALL_OW 30
25881: IFFALSE 25895
// Say ( Mike , DM-End-12 ) ;
25883: LD_EXP 36
25887: PPUSH
25888: LD_STRING DM-End-12
25890: PPUSH
25891: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25895: LD_EXP 43
25899: PPUSH
25900: LD_STRING DO-End-13
25902: PPUSH
25903: CALL_OW 88
// if IsOk ( Sophia ) then
25907: LD_EXP 40
25911: PPUSH
25912: CALL_OW 302
25916: IFFALSE 25942
// begin Say ( Sophia , DS-End-15 ) ;
25918: LD_EXP 40
25922: PPUSH
25923: LD_STRING DS-End-15
25925: PPUSH
25926: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25930: LD_EXP 39
25934: PPUSH
25935: LD_STRING DK-End-16
25937: PPUSH
25938: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25942: LD_EXP 35
25946: PPUSH
25947: LD_STRING DG-End-17
25949: PPUSH
25950: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25954: LD_EXP 35
25958: PPUSH
25959: LD_STRING DG-End-18
25961: PPUSH
25962: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25966: LD_EXP 35
25970: PPUSH
25971: LD_STRING DG-End-19
25973: PPUSH
25974: CALL_OW 88
// end ;
25978: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25979: LD_EXP 24
25983: IFFALSE 26122
25985: GO 25987
25987: DISABLE
25988: LD_INT 0
25990: PPUSH
25991: PPUSH
// begin repeat wait ( 0 0$1 ) ;
25992: LD_INT 35
25994: PPUSH
25995: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
25999: LD_ADDR_OWVAR 47
26003: PUSH
26004: LD_STRING #X106-2
26006: PUSH
26007: LD_EXP 25
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26016: LD_ADDR_EXP 25
26020: PUSH
26021: LD_EXP 25
26025: PUSH
26026: LD_INT 35
26028: MINUS
26029: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26030: LD_ADDR_VAR 0 2
26034: PUSH
26035: LD_INT 17
26037: PPUSH
26038: LD_INT 22
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 21
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 23
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: PPUSH
26073: CALL_OW 71
26077: ST_TO_ADDR
// if not outsiders then
26078: LD_VAR 0 2
26082: NOT
26083: IFFALSE 26099
// begin escapeAllowed := false ;
26085: LD_ADDR_EXP 24
26089: PUSH
26090: LD_INT 0
26092: ST_TO_ADDR
// MissionWin ;
26093: CALL 26125 0 0
// exit ;
26097: GO 26122
// end ; if escapeTimer <= 0 0$00 then
26099: LD_EXP 25
26103: PUSH
26104: LD_INT 0
26106: LESSEQUAL
26107: IFFALSE 26118
// begin YouLost ( TimeOut ) ;
26109: LD_STRING TimeOut
26111: PPUSH
26112: CALL_OW 104
// exit ;
26116: GO 26122
// end ; until false ;
26118: LD_INT 0
26120: IFFALSE 25992
// end ;
26122: PPOPN 2
26124: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
// if tick <= 55 55$00 then
26132: LD_OWVAR 1
26136: PUSH
26137: LD_INT 115500
26139: LESSEQUAL
26140: IFFALSE 26149
// SetAchievement ( ACH_HSPEED_6 ) ;
26142: LD_STRING ACH_HSPEED_6
26144: PPUSH
26145: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26149: LD_EXP 34
26153: PPUSH
26154: LD_STRING DH-End-20
26156: PPUSH
26157: CALL_OW 88
// if rolfDied then
26161: LD_EXP 13
26165: IFFALSE 26180
// AddMedal ( med1 , - 1 ) else
26167: LD_STRING med1
26169: PPUSH
26170: LD_INT 1
26172: NEG
26173: PPUSH
26174: CALL_OW 101
26178: GO 26210
// if not canRolfJoin then
26180: LD_EXP 29
26184: NOT
26185: IFFALSE 26200
// AddMedal ( med1 , - 2 ) else
26187: LD_STRING med1
26189: PPUSH
26190: LD_INT 2
26192: NEG
26193: PPUSH
26194: CALL_OW 101
26198: GO 26210
// AddMedal ( med1 , 1 ) ;
26200: LD_STRING med1
26202: PPUSH
26203: LD_INT 1
26205: PPUSH
26206: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26210: LD_EXP 22
26214: PUSH
26215: LD_EXP 16
26219: AND
26220: IFFALSE 26234
// AddMedal ( med2 , 1 ) else
26222: LD_STRING med2
26224: PPUSH
26225: LD_INT 1
26227: PPUSH
26228: CALL_OW 101
26232: GO 26283
// if omarHasVehicles then
26234: LD_EXP 22
26238: IFFALSE 26253
// AddMedal ( med2 , - 1 ) else
26240: LD_STRING med2
26242: PPUSH
26243: LD_INT 1
26245: NEG
26246: PPUSH
26247: CALL_OW 101
26251: GO 26283
// if rolfHasVehicles then
26253: LD_EXP 16
26257: IFFALSE 26272
// AddMedal ( med2 , - 2 ) else
26259: LD_STRING med2
26261: PPUSH
26262: LD_INT 2
26264: NEG
26265: PPUSH
26266: CALL_OW 101
26270: GO 26283
// AddMedal ( med2 , - 3 ) ;
26272: LD_STRING med2
26274: PPUSH
26275: LD_INT 3
26277: NEG
26278: PPUSH
26279: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26283: LD_EXP 5
26287: PUSH
26288: LD_INT 20
26290: PUSH
26291: LD_INT 30
26293: PUSH
26294: LD_INT 40
26296: PUSH
26297: LD_INT 50
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: PUSH
26306: LD_OWVAR 67
26310: ARRAY
26311: GREATEREQUAL
26312: PUSH
26313: LD_EXP 26
26317: PUSH
26318: LD_INT 0
26320: EQUAL
26321: AND
26322: IFFALSE 26336
// AddMedal ( med3 , 1 ) else
26324: LD_STRING med3
26326: PPUSH
26327: LD_INT 1
26329: PPUSH
26330: CALL_OW 101
26334: GO 26366
// if heikeLoseCounter then
26336: LD_EXP 26
26340: IFFALSE 26355
// AddMedal ( med3 , - 2 ) else
26342: LD_STRING med3
26344: PPUSH
26345: LD_INT 2
26347: NEG
26348: PPUSH
26349: CALL_OW 101
26353: GO 26366
// AddMedal ( med3 , - 1 ) ;
26355: LD_STRING med3
26357: PPUSH
26358: LD_INT 1
26360: NEG
26361: PPUSH
26362: CALL_OW 101
// GiveMedals ( MAIN ) ;
26366: LD_STRING MAIN
26368: PPUSH
26369: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26373: LD_INT 22
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 23
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 21
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: PPUSH
26408: CALL_OW 69
26412: PPUSH
26413: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26417: LD_EXP 34
26421: PPUSH
26422: LD_STRING 06_Heike
26424: PPUSH
26425: CALL_OW 38
// if Aviradze then
26429: LD_EXP 46
26433: IFFALSE 26447
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26435: LD_EXP 46
26439: PPUSH
26440: LD_STRING 06_Aviradze
26442: PPUSH
26443: CALL_OW 38
// if Ibrahim then
26447: LD_EXP 37
26451: IFFALSE 26465
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26453: LD_EXP 37
26457: PPUSH
26458: LD_STRING 06_Ibrahim
26460: PPUSH
26461: CALL_OW 38
// if Kamil then
26465: LD_EXP 38
26469: IFFALSE 26483
// SaveCharacters ( Kamil , 06_Kamil ) ;
26471: LD_EXP 38
26475: PPUSH
26476: LD_STRING 06_Kamil
26478: PPUSH
26479: CALL_OW 38
// if Sophia then
26483: LD_EXP 40
26487: IFFALSE 26501
// SaveCharacters ( Sophia , 06_Sophia ) ;
26489: LD_EXP 40
26493: PPUSH
26494: LD_STRING 06_Sophia
26496: PPUSH
26497: CALL_OW 38
// if Kaia then
26501: LD_EXP 39
26505: IFFALSE 26519
// SaveCharacters ( Kaia , 06_Kaia ) ;
26507: LD_EXP 39
26511: PPUSH
26512: LD_STRING 06_Kaia
26514: PPUSH
26515: CALL_OW 38
// if Givi then
26519: LD_EXP 35
26523: IFFALSE 26537
// SaveCharacters ( Givi , 06_Givi ) ;
26525: LD_EXP 35
26529: PPUSH
26530: LD_STRING 06_Givi
26532: PPUSH
26533: CALL_OW 38
// if Olaf then
26537: LD_EXP 43
26541: IFFALSE 26555
// SaveCharacters ( Olaf , 06_Olaf ) ;
26543: LD_EXP 43
26547: PPUSH
26548: LD_STRING 06_Olaf
26550: PPUSH
26551: CALL_OW 38
// if Mike then
26555: LD_EXP 36
26559: IFFALSE 26573
// SaveCharacters ( Mike , 06_Mike ) ;
26561: LD_EXP 36
26565: PPUSH
26566: LD_STRING 06_Mike
26568: PPUSH
26569: CALL_OW 38
// if Markov then
26573: LD_EXP 41
26577: IFFALSE 26591
// SaveCharacters ( Markov , 06_Markov ) ;
26579: LD_EXP 41
26583: PPUSH
26584: LD_STRING 06_Markov
26586: PPUSH
26587: CALL_OW 38
// if Kurt then
26591: LD_EXP 45
26595: IFFALSE 26609
// SaveCharacters ( Kurt , 06_Kurt ) ;
26597: LD_EXP 45
26601: PPUSH
26602: LD_STRING 06_Kurt
26604: PPUSH
26605: CALL_OW 38
// if heikeSecondSquad then
26609: LD_EXP 49
26613: IFFALSE 26627
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26615: LD_EXP 49
26619: PPUSH
26620: LD_STRING 06_others
26622: PPUSH
26623: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26627: LD_ADDR_VAR 0 3
26631: PUSH
26632: LD_INT 22
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 23
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PPUSH
26656: CALL_OW 69
26660: ST_TO_ADDR
// if tmp then
26661: LD_VAR 0 3
26665: IFFALSE 26679
// SaveCharacters ( tmp , 06_apes ) ;
26667: LD_VAR 0 3
26671: PPUSH
26672: LD_STRING 06_apes
26674: PPUSH
26675: CALL_OW 38
// if Rolf then
26679: LD_EXP 47
26683: IFFALSE 26734
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26685: LD_EXP 47
26689: PPUSH
26690: LD_STRING 06_Rolf
26692: PPUSH
26693: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26697: LD_STRING enableBioCharacter(BIO_ROLF)
26699: PPUSH
26700: CALL_OW 559
// if rolfSquad diff Rolf then
26704: LD_EXP 51
26708: PUSH
26709: LD_EXP 47
26713: DIFF
26714: IFFALSE 26734
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26716: LD_EXP 51
26720: PUSH
26721: LD_EXP 47
26725: DIFF
26726: PPUSH
26727: LD_STRING 06_RolfSquad
26729: PPUSH
26730: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_INT 17
26741: PPUSH
26742: LD_INT 21
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PPUSH
26752: CALL_OW 70
26756: ST_TO_ADDR
// if tmp then
26757: LD_VAR 0 3
26761: IFFALSE 27055
// begin tmp2 := [ ] ;
26763: LD_ADDR_VAR 0 4
26767: PUSH
26768: EMPTY
26769: ST_TO_ADDR
// for i in tmp do
26770: LD_ADDR_VAR 0 2
26774: PUSH
26775: LD_VAR 0 3
26779: PUSH
26780: FOR_IN
26781: IFFALSE 27041
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26783: LD_VAR 0 2
26787: PPUSH
26788: CALL_OW 264
26792: PUSH
26793: LD_INT 32
26795: PUSH
26796: LD_INT 12
26798: PUSH
26799: LD_INT 51
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: IN
26807: IFFALSE 26944
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26809: LD_ADDR_VAR 0 5
26813: PUSH
26814: LD_VAR 0 2
26818: PPUSH
26819: LD_INT 1
26821: PPUSH
26822: CALL_OW 289
26826: PUSH
26827: LD_VAR 0 2
26831: PPUSH
26832: LD_INT 2
26834: PPUSH
26835: CALL_OW 289
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26844: LD_ADDR_VAR 0 4
26848: PUSH
26849: LD_VAR 0 4
26853: PPUSH
26854: LD_VAR 0 4
26858: PUSH
26859: LD_INT 1
26861: PLUS
26862: PPUSH
26863: LD_VAR 0 2
26867: PPUSH
26868: CALL_OW 265
26872: PUSH
26873: LD_VAR 0 2
26877: PPUSH
26878: CALL_OW 262
26882: PUSH
26883: LD_VAR 0 2
26887: PPUSH
26888: CALL_OW 263
26892: PUSH
26893: LD_VAR 0 2
26897: PPUSH
26898: CALL_OW 264
26902: PUSH
26903: LD_VAR 0 2
26907: PPUSH
26908: CALL_OW 248
26912: PUSH
26913: LD_VAR 0 2
26917: PPUSH
26918: CALL_OW 256
26922: PUSH
26923: LD_VAR 0 5
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: PPUSH
26937: CALL_OW 1
26941: ST_TO_ADDR
// end else
26942: GO 27039
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26944: LD_ADDR_VAR 0 4
26948: PUSH
26949: LD_VAR 0 4
26953: PPUSH
26954: LD_VAR 0 4
26958: PUSH
26959: LD_INT 1
26961: PLUS
26962: PPUSH
26963: LD_VAR 0 2
26967: PPUSH
26968: CALL_OW 265
26972: PUSH
26973: LD_VAR 0 2
26977: PPUSH
26978: CALL_OW 262
26982: PUSH
26983: LD_VAR 0 2
26987: PPUSH
26988: CALL_OW 263
26992: PUSH
26993: LD_VAR 0 2
26997: PPUSH
26998: CALL_OW 264
27002: PUSH
27003: LD_VAR 0 2
27007: PPUSH
27008: CALL_OW 248
27012: PUSH
27013: LD_VAR 0 2
27017: PPUSH
27018: CALL_OW 256
27022: PUSH
27023: EMPTY
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 1
27038: ST_TO_ADDR
27039: GO 26780
27041: POP
27042: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27043: LD_VAR 0 4
27047: PPUSH
27048: LD_STRING 06_Vehicles
27050: PPUSH
27051: CALL_OW 39
// end ; YouWin ;
27055: CALL_OW 103
// end ; end_of_file
27059: LD_VAR 0 1
27063: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27064: LD_INT 0
27066: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_VAR 0 2
27076: PPUSH
27077: CALL 87457 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 255
27090: PUSH
27091: LD_INT 2
27093: EQUAL
27094: PUSH
27095: LD_OWVAR 52
27099: AND
27100: PUSH
27101: LD_VAR 0 1
27105: PPUSH
27106: CALL_OW 263
27110: PUSH
27111: LD_INT 1
27113: EQUAL
27114: AND
27115: IFFALSE 27170
// begin driver := IsDrivenBy ( vehicle ) ;
27117: LD_ADDR_VAR 0 3
27121: PUSH
27122: LD_VAR 0 1
27126: PPUSH
27127: CALL_OW 311
27131: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27132: LD_VAR 0 1
27136: PPUSH
27137: LD_INT 211
27139: PPUSH
27140: LD_INT 101
27142: PPUSH
27143: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27147: LD_VAR 0 3
27151: PPUSH
27152: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27156: LD_VAR 0 3
27160: PPUSH
27161: LD_VAR 0 2
27165: PPUSH
27166: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27170: LD_VAR 0 1
27174: PPUSH
27175: CALL_OW 255
27179: PUSH
27180: LD_INT 3
27182: EQUAL
27183: IFFALSE 27214
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27185: LD_ADDR_EXP 60
27189: PUSH
27190: LD_EXP 60
27194: PPUSH
27195: LD_EXP 60
27199: PUSH
27200: LD_INT 1
27202: PLUS
27203: PPUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 1
27213: ST_TO_ADDR
// end ;
27214: PPOPN 3
27216: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27217: LD_VAR 0 1
27221: PPUSH
27222: CALL_OW 255
27226: PUSH
27227: LD_INT 8
27229: EQUAL
27230: PUSH
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL_OW 266
27240: PUSH
27241: LD_INT 4
27243: EQUAL
27244: AND
27245: IFFALSE 27256
// ComUpgrade ( b ) ;
27247: LD_VAR 0 1
27251: PPUSH
27252: CALL_OW 146
// end ;
27256: PPOPN 1
27258: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL 87337 0 1
// if un = Heike then
27268: LD_VAR 0 1
27272: PUSH
27273: LD_EXP 34
27277: EQUAL
27278: IFFALSE 27287
// YouLost ( Heike ) ;
27280: LD_STRING Heike
27282: PPUSH
27283: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
27287: LD_VAR 0 1
27291: PUSH
27292: LD_INT 22
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 21
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 23
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: PPUSH
27327: CALL_OW 69
27331: IN
27332: IFFALSE 27348
// heikeLoseCounter := heikeLoseCounter + 1 ;
27334: LD_ADDR_EXP 26
27338: PUSH
27339: LD_EXP 26
27343: PUSH
27344: LD_INT 1
27346: PLUS
27347: ST_TO_ADDR
// if un = arDepot then
27348: LD_VAR 0 1
27352: PUSH
27353: LD_EXP 48
27357: EQUAL
27358: IFFALSE 27367
// YouLost ( Base ) ;
27360: LD_STRING Base
27362: PPUSH
27363: CALL_OW 104
// if un = Rolf then
27367: LD_VAR 0 1
27371: PUSH
27372: LD_EXP 47
27376: EQUAL
27377: IFFALSE 27387
// rolfDied := true ;
27379: LD_ADDR_EXP 13
27383: PUSH
27384: LD_INT 1
27386: ST_TO_ADDR
// if un in rolfSquad then
27387: LD_VAR 0 1
27391: PUSH
27392: LD_EXP 51
27396: IN
27397: IFFALSE 27415
// rolfSquad := rolfSquad diff un ;
27399: LD_ADDR_EXP 51
27403: PUSH
27404: LD_EXP 51
27408: PUSH
27409: LD_VAR 0 1
27413: DIFF
27414: ST_TO_ADDR
// if un in omarSquad then
27415: LD_VAR 0 1
27419: PUSH
27420: LD_EXP 52
27424: IN
27425: IFFALSE 27443
// omarSquad := omarSquad diff un ;
27427: LD_ADDR_EXP 52
27431: PUSH
27432: LD_EXP 52
27436: PUSH
27437: LD_VAR 0 1
27441: DIFF
27442: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27443: LD_VAR 0 1
27447: PPUSH
27448: CALL_OW 255
27452: PUSH
27453: LD_INT 3
27455: EQUAL
27456: IFFALSE 27472
// ruLoseCounter := ruLoseCounter + 1 ;
27458: LD_ADDR_EXP 5
27462: PUSH
27463: LD_EXP 5
27467: PUSH
27468: LD_INT 1
27470: PLUS
27471: ST_TO_ADDR
// if un in ruAttackers then
27472: LD_VAR 0 1
27476: PUSH
27477: LD_EXP 61
27481: IN
27482: IFFALSE 27500
// ruAttackers := ruAttackers diff un ;
27484: LD_ADDR_EXP 61
27488: PUSH
27489: LD_EXP 61
27493: PUSH
27494: LD_VAR 0 1
27498: DIFF
27499: ST_TO_ADDR
// end ;
27500: PPOPN 1
27502: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27503: LD_VAR 0 2
27507: PPUSH
27508: CALL_OW 255
27512: PUSH
27513: LD_INT 5
27515: PUSH
27516: LD_INT 8
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: IN
27523: PUSH
27524: LD_VAR 0 2
27528: PPUSH
27529: CALL_OW 256
27533: PUSH
27534: LD_INT 1000
27536: LESS
27537: AND
27538: IFFALSE 27552
// SetLives ( unit , 1000 ) ;
27540: LD_VAR 0 2
27544: PPUSH
27545: LD_INT 1000
27547: PPUSH
27548: CALL_OW 234
// end ;
27552: PPOPN 2
27554: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27555: LD_INT 0
27557: PPUSH
27558: PPUSH
27559: PPUSH
27560: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27561: LD_VAR 0 2
27565: PPUSH
27566: CALL_OW 255
27570: PUSH
27571: LD_INT 8
27573: EQUAL
27574: PUSH
27575: LD_EXP 32
27579: AND
27580: IFFALSE 27597
// ComMoveXY ( un , 221 , 161 ) ;
27582: LD_VAR 0 1
27586: PPUSH
27587: LD_INT 221
27589: PPUSH
27590: LD_INT 161
27592: PPUSH
27593: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27597: LD_VAR 0 2
27601: PPUSH
27602: CALL_OW 255
27606: PUSH
27607: LD_INT 5
27609: EQUAL
27610: PUSH
27611: LD_EXP 23
27615: AND
27616: IFFALSE 27725
// begin ComMoveXY ( un , 333 , 233 ) ;
27618: LD_VAR 0 1
27622: PPUSH
27623: LD_INT 333
27625: PPUSH
27626: LD_INT 233
27628: PPUSH
27629: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27633: LD_INT 334
27635: PPUSH
27636: LD_INT 241
27638: PPUSH
27639: CALL_OW 428
27643: NOT
27644: PUSH
27645: LD_INT 334
27647: PPUSH
27648: LD_INT 241
27650: PPUSH
27651: CALL_OW 428
27655: PPUSH
27656: CALL_OW 266
27660: PUSH
27661: LD_INT 4
27663: EQUAL
27664: NOT
27665: OR
27666: IFFALSE 27670
// exit ;
27668: GO 28250
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27670: LD_VAR 0 1
27674: PPUSH
27675: LD_INT 334
27677: PPUSH
27678: LD_INT 241
27680: PPUSH
27681: CALL_OW 428
27685: PPUSH
27686: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27690: LD_VAR 0 1
27694: PPUSH
27695: LD_INT 1
27697: PPUSH
27698: CALL_OW 183
// AddComExitBuilding ( un ) ;
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27711: LD_VAR 0 1
27715: PPUSH
27716: LD_EXP 44
27720: PPUSH
27721: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL_OW 255
27734: PUSH
27735: LD_INT 3
27737: EQUAL
27738: PUSH
27739: LD_VAR 0 1
27743: PUSH
27744: LD_EXP 61
27748: IN
27749: NOT
27750: AND
27751: IFFALSE 28250
// begin if not IsInArea ( un , ruMainBase ) then
27753: LD_VAR 0 1
27757: PPUSH
27758: LD_INT 10
27760: PPUSH
27761: CALL_OW 308
27765: NOT
27766: IFFALSE 27783
// ComMoveXY ( un , 62 , 98 ) ;
27768: LD_VAR 0 1
27772: PPUSH
27773: LD_INT 62
27775: PPUSH
27776: LD_INT 98
27778: PPUSH
27779: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27783: LD_INT 35
27785: PPUSH
27786: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27790: LD_VAR 0 1
27794: PPUSH
27795: CALL_OW 302
27799: NOT
27800: PUSH
27801: LD_VAR 0 1
27805: PPUSH
27806: LD_INT 10
27808: PPUSH
27809: CALL_OW 308
27813: OR
27814: IFFALSE 27783
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27816: LD_ADDR_EXP 59
27820: PUSH
27821: LD_EXP 59
27825: PPUSH
27826: LD_EXP 59
27830: PUSH
27831: LD_INT 1
27833: PLUS
27834: PPUSH
27835: LD_VAR 0 1
27839: PPUSH
27840: CALL_OW 1
27844: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27845: LD_ADDR_VAR 0 8
27849: PUSH
27850: LD_INT 72
27852: PUSH
27853: LD_INT 12
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: ST_TO_ADDR
// if tmp then
27860: LD_VAR 0 8
27864: IFFALSE 27979
// for i in tmp do
27866: LD_ADDR_VAR 0 5
27870: PUSH
27871: LD_VAR 0 8
27875: PUSH
27876: FOR_IN
27877: IFFALSE 27977
// if UnitsInside ( i ) < 6 then
27879: LD_VAR 0 5
27883: PPUSH
27884: CALL_OW 313
27888: PUSH
27889: LD_INT 6
27891: LESS
27892: IFFALSE 27975
// begin AddComEnterUnit ( un , i ) ;
27894: LD_VAR 0 1
27898: PPUSH
27899: LD_VAR 0 5
27903: PPUSH
27904: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27908: LD_VAR 0 8
27912: PPUSH
27913: LD_INT 22
27915: PUSH
27916: LD_INT 23
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: PPUSH
27926: LD_INT 2
27928: PPUSH
27929: CALL_OW 12
27933: ARRAY
27934: PPUSH
27935: LD_INT 1
27937: PPUSH
27938: LD_INT 1
27940: PPUSH
27941: LD_INT 44
27943: PUSH
27944: LD_INT 46
27946: PUSH
27947: LD_INT 47
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_INT 3
27960: PPUSH
27961: CALL_OW 12
27965: ARRAY
27966: PPUSH
27967: CALL_OW 185
// exit ;
27971: POP
27972: POP
27973: GO 28250
// end ;
27975: GO 27876
27977: POP
27978: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27979: LD_ADDR_VAR 0 8
27983: PUSH
27984: LD_INT 10
27986: PPUSH
27987: LD_INT 22
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 50
27999: PUSH
28000: EMPTY
28001: LIST
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: LD_INT 30
28008: PUSH
28009: LD_INT 4
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 30
28018: PUSH
28019: LD_INT 5
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 30
28028: PUSH
28029: LD_INT 32
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 30
28038: PUSH
28039: LD_INT 31
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: LIST
28057: PPUSH
28058: CALL_OW 70
28062: ST_TO_ADDR
// if not tmp then
28063: LD_VAR 0 8
28067: NOT
28068: IFFALSE 28087
// begin ComMoveXY ( un , 83 , 133 ) ;
28070: LD_VAR 0 1
28074: PPUSH
28075: LD_INT 83
28077: PPUSH
28078: LD_INT 133
28080: PPUSH
28081: CALL_OW 111
// exit ;
28085: GO 28250
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28087: LD_ADDR_VAR 0 6
28091: PUSH
28092: LD_VAR 0 1
28096: PPUSH
28097: LD_VAR 0 8
28101: PPUSH
28102: LD_INT 1
28104: PPUSH
28105: LD_INT 1
28107: PPUSH
28108: CALL 34845 0 4
28112: PUSH
28113: FOR_IN
28114: IFFALSE 28248
// begin case GetBType ( b ) of b_armoury , b_barracks :
28116: LD_VAR 0 6
28120: PPUSH
28121: CALL_OW 266
28125: PUSH
28126: LD_INT 4
28128: DOUBLE
28129: EQUAL
28130: IFTRUE 28140
28132: LD_INT 5
28134: DOUBLE
28135: EQUAL
28136: IFTRUE 28140
28138: GO 28151
28140: POP
// p := 6 ; b_breastwork , b_bunker :
28141: LD_ADDR_VAR 0 7
28145: PUSH
28146: LD_INT 6
28148: ST_TO_ADDR
28149: GO 28177
28151: LD_INT 31
28153: DOUBLE
28154: EQUAL
28155: IFTRUE 28165
28157: LD_INT 32
28159: DOUBLE
28160: EQUAL
28161: IFTRUE 28165
28163: GO 28176
28165: POP
// p := 1 ; end ;
28166: LD_ADDR_VAR 0 7
28170: PUSH
28171: LD_INT 1
28173: ST_TO_ADDR
28174: GO 28177
28176: POP
// if UnitsInside ( b ) < p then
28177: LD_VAR 0 6
28181: PPUSH
28182: CALL_OW 313
28186: PUSH
28187: LD_VAR 0 7
28191: LESS
28192: IFFALSE 28246
// begin ComEnterUnit ( un , b ) ;
28194: LD_VAR 0 1
28198: PPUSH
28199: LD_VAR 0 6
28203: PPUSH
28204: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28208: LD_VAR 0 6
28212: PPUSH
28213: CALL_OW 266
28217: PUSH
28218: LD_INT 4
28220: PUSH
28221: LD_INT 5
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: IN
28228: IFFALSE 28242
// AddComChangeProfession ( un , class_soldier ) ;
28230: LD_VAR 0 1
28234: PPUSH
28235: LD_INT 1
28237: PPUSH
28238: CALL_OW 183
// exit ;
28242: POP
28243: POP
28244: GO 28250
// end ; end ;
28246: GO 28113
28248: POP
28249: POP
// end ; end ;
28250: PPOPN 8
28252: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28253: LD_INT 0
28255: PPUSH
28256: PPUSH
28257: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28258: LD_VAR 0 2
28262: PPUSH
28263: CALL_OW 255
28267: PUSH
28268: LD_INT 3
28270: EQUAL
28271: PUSH
28272: LD_VAR 0 2
28276: PPUSH
28277: CALL_OW 257
28281: PUSH
28282: LD_INT 1
28284: EQUAL
28285: AND
28286: PUSH
28287: LD_VAR 0 2
28291: PUSH
28292: LD_EXP 59
28296: IN
28297: NOT
28298: AND
28299: IFFALSE 28612
// begin ComMoveToArea ( un , ruMainBase ) ;
28301: LD_VAR 0 2
28305: PPUSH
28306: LD_INT 10
28308: PPUSH
28309: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28313: LD_INT 35
28315: PPUSH
28316: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28320: LD_VAR 0 2
28324: PPUSH
28325: CALL_OW 302
28329: NOT
28330: PUSH
28331: LD_VAR 0 2
28335: PPUSH
28336: LD_INT 10
28338: PPUSH
28339: CALL_OW 308
28343: OR
28344: IFFALSE 28313
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28346: LD_ADDR_EXP 59
28350: PUSH
28351: LD_EXP 59
28355: PPUSH
28356: LD_EXP 59
28360: PUSH
28361: LD_INT 1
28363: PLUS
28364: PPUSH
28365: LD_VAR 0 2
28369: PPUSH
28370: CALL_OW 1
28374: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28375: LD_ADDR_VAR 0 4
28379: PUSH
28380: LD_INT 10
28382: PPUSH
28383: LD_INT 22
28385: PUSH
28386: LD_INT 3
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 50
28395: PUSH
28396: EMPTY
28397: LIST
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: LD_INT 30
28404: PUSH
28405: LD_INT 4
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 30
28414: PUSH
28415: LD_INT 5
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 30
28424: PUSH
28425: LD_INT 32
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 30
28434: PUSH
28435: LD_INT 31
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: PPUSH
28454: CALL_OW 70
28458: ST_TO_ADDR
// if not tmp then
28459: LD_VAR 0 4
28463: NOT
28464: IFFALSE 28483
// begin ComMoveXY ( un , 83 , 133 ) ;
28466: LD_VAR 0 2
28470: PPUSH
28471: LD_INT 83
28473: PPUSH
28474: LD_INT 133
28476: PPUSH
28477: CALL_OW 111
// exit ;
28481: GO 28861
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28483: LD_ADDR_VAR 0 5
28487: PUSH
28488: LD_VAR 0 2
28492: PPUSH
28493: LD_VAR 0 4
28497: PPUSH
28498: LD_INT 1
28500: PPUSH
28501: LD_INT 1
28503: PPUSH
28504: CALL 34845 0 4
28508: PUSH
28509: FOR_IN
28510: IFFALSE 28610
// begin case GetBType ( b ) of b_armoury , b_barracks :
28512: LD_VAR 0 5
28516: PPUSH
28517: CALL_OW 266
28521: PUSH
28522: LD_INT 4
28524: DOUBLE
28525: EQUAL
28526: IFTRUE 28536
28528: LD_INT 5
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28547
28536: POP
// p := 6 ; b_breastwork , b_bunker :
28537: LD_ADDR_VAR 0 3
28541: PUSH
28542: LD_INT 6
28544: ST_TO_ADDR
28545: GO 28573
28547: LD_INT 31
28549: DOUBLE
28550: EQUAL
28551: IFTRUE 28561
28553: LD_INT 32
28555: DOUBLE
28556: EQUAL
28557: IFTRUE 28561
28559: GO 28572
28561: POP
// p := 1 ; end ;
28562: LD_ADDR_VAR 0 3
28566: PUSH
28567: LD_INT 1
28569: ST_TO_ADDR
28570: GO 28573
28572: POP
// if UnitsInside ( b ) < p then
28573: LD_VAR 0 5
28577: PPUSH
28578: CALL_OW 313
28582: PUSH
28583: LD_VAR 0 3
28587: LESS
28588: IFFALSE 28608
// begin ComEnterUnit ( un , b ) ;
28590: LD_VAR 0 2
28594: PPUSH
28595: LD_VAR 0 5
28599: PPUSH
28600: CALL_OW 120
// exit ;
28604: POP
28605: POP
28606: GO 28861
// end ; end ;
28608: GO 28509
28610: POP
28611: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28612: LD_VAR 0 2
28616: PUSH
28617: LD_EXP 59
28621: IN
28622: PUSH
28623: LD_VAR 0 2
28627: PPUSH
28628: CALL_OW 257
28632: PUSH
28633: LD_INT 1
28635: EQUAL
28636: AND
28637: IFFALSE 28861
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28639: LD_ADDR_VAR 0 4
28643: PUSH
28644: LD_INT 10
28646: PPUSH
28647: LD_INT 22
28649: PUSH
28650: LD_INT 3
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 50
28659: PUSH
28660: EMPTY
28661: LIST
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: LD_INT 30
28668: PUSH
28669: LD_INT 4
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 30
28678: PUSH
28679: LD_INT 5
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 30
28688: PUSH
28689: LD_INT 32
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 30
28698: PUSH
28699: LD_INT 31
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: LIST
28717: PPUSH
28718: CALL_OW 70
28722: ST_TO_ADDR
// if not tmp then
28723: LD_VAR 0 4
28727: NOT
28728: IFFALSE 28732
// exit ;
28730: GO 28861
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28732: LD_ADDR_VAR 0 5
28736: PUSH
28737: LD_VAR 0 2
28741: PPUSH
28742: LD_VAR 0 4
28746: PPUSH
28747: LD_INT 1
28749: PPUSH
28750: LD_INT 1
28752: PPUSH
28753: CALL 34845 0 4
28757: PUSH
28758: FOR_IN
28759: IFFALSE 28859
// begin case GetBType ( b ) of b_armoury , b_barracks :
28761: LD_VAR 0 5
28765: PPUSH
28766: CALL_OW 266
28770: PUSH
28771: LD_INT 4
28773: DOUBLE
28774: EQUAL
28775: IFTRUE 28785
28777: LD_INT 5
28779: DOUBLE
28780: EQUAL
28781: IFTRUE 28785
28783: GO 28796
28785: POP
// p := 6 ; b_breastwork , b_bunker :
28786: LD_ADDR_VAR 0 3
28790: PUSH
28791: LD_INT 6
28793: ST_TO_ADDR
28794: GO 28822
28796: LD_INT 31
28798: DOUBLE
28799: EQUAL
28800: IFTRUE 28810
28802: LD_INT 32
28804: DOUBLE
28805: EQUAL
28806: IFTRUE 28810
28808: GO 28821
28810: POP
// p := 1 ; end ;
28811: LD_ADDR_VAR 0 3
28815: PUSH
28816: LD_INT 1
28818: ST_TO_ADDR
28819: GO 28822
28821: POP
// if UnitsInside ( b ) < p then
28822: LD_VAR 0 5
28826: PPUSH
28827: CALL_OW 313
28831: PUSH
28832: LD_VAR 0 3
28836: LESS
28837: IFFALSE 28857
// begin ComEnterUnit ( un , b ) ;
28839: LD_VAR 0 2
28843: PPUSH
28844: LD_VAR 0 5
28848: PPUSH
28849: CALL_OW 120
// exit ;
28853: POP
28854: POP
28855: GO 28861
// end ; end ;
28857: GO 28758
28859: POP
28860: POP
// end ; end ;
28861: PPOPN 5
28863: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28864: LD_VAR 0 1
28868: PUSH
28869: LD_INT 2
28871: EQUAL
28872: PUSH
28873: LD_VAR 0 2
28877: PUSH
28878: LD_INT 5
28880: PUSH
28881: LD_INT 8
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: IN
28888: AND
28889: IFFALSE 28898
// YouLost ( FriendlyFire ) ;
28891: LD_STRING FriendlyFire
28893: PPUSH
28894: CALL_OW 104
// end ;
28898: PPOPN 2
28900: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28901: LD_VAR 0 1
28905: PPUSH
28906: CALL_OW 255
28910: PUSH
28911: LD_INT 8
28913: EQUAL
28914: PUSH
28915: LD_VAR 0 1
28919: PPUSH
28920: CALL_OW 266
28924: PUSH
28925: LD_INT 5
28927: EQUAL
28928: AND
28929: IFFALSE 28943
// SetClass ( unit , class_mortar ) ;
28931: LD_VAR 0 2
28935: PPUSH
28936: LD_INT 8
28938: PPUSH
28939: CALL_OW 336
// end ; end_of_file
28943: PPOPN 2
28945: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
28946: LD_INT 6
28948: PPUSH
28949: LD_INT 1
28951: PPUSH
28952: CALL_OW 287
28956: PUSH
28957: LD_INT 20
28959: PUSH
28960: LD_INT 18
28962: PUSH
28963: LD_INT 16
28965: PUSH
28966: LD_INT 12
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: PUSH
28975: LD_OWVAR 67
28979: ARRAY
28980: LESS
28981: IFFALSE 29008
28983: GO 28985
28985: DISABLE
// begin enable ;
28986: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28987: LD_INT 1
28989: PPUSH
28990: LD_INT 5
28992: PPUSH
28993: CALL_OW 12
28997: PPUSH
28998: LD_INT 6
29000: PPUSH
29001: LD_INT 1
29003: PPUSH
29004: CALL_OW 55
// end ;
29008: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
29009: LD_INT 50
29011: PPUSH
29012: CALL_OW 13
29016: PUSH
29017: LD_OWVAR 1
29021: PUSH
29022: LD_INT 58800
29024: PUSH
29025: LD_INT 56700
29027: PUSH
29028: LD_INT 54600
29030: PUSH
29031: LD_INT 52500
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: PUSH
29040: LD_OWVAR 67
29044: ARRAY
29045: LESS
29046: AND
29047: PUSH
29048: LD_INT 21
29050: PPUSH
29051: LD_INT 1
29053: PPUSH
29054: CALL_OW 287
29058: PUSH
29059: LD_INT 10
29061: LESS
29062: AND
29063: IFFALSE 29105
29065: GO 29067
29067: DISABLE
// begin enable ;
29068: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29069: LD_INT 35
29071: PPUSH
29072: LD_INT 350
29074: PPUSH
29075: CALL_OW 12
29079: PPUSH
29080: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29084: LD_INT 1
29086: PPUSH
29087: LD_INT 5
29089: PPUSH
29090: CALL_OW 12
29094: PPUSH
29095: LD_INT 21
29097: PPUSH
29098: LD_INT 1
29100: PPUSH
29101: CALL_OW 55
// end ; end_of_file
29105: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29106: LD_EXP 18
29110: PUSH
29111: LD_EXP 20
29115: AND
29116: PUSH
29117: LD_EXP 17
29121: PUSH
29122: LD_EXP 19
29126: AND
29127: OR
29128: IFFALSE 29447
29130: GO 29132
29132: DISABLE
// begin enable ;
29133: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29134: LD_EXP 18
29138: PUSH
29139: LD_EXP 20
29143: AND
29144: PUSH
29145: LD_EXP 17
29149: PUSH
29150: LD_EXP 19
29154: AND
29155: AND
29156: IFFALSE 29293
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29158: LD_ADDR_OWVAR 47
29162: PUSH
29163: LD_STRING #X106-1a
29165: PUSH
29166: LD_EXP 21
29170: PUSH
29171: LD_INT 16
29173: PPUSH
29174: LD_INT 22
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 21
29186: PUSH
29187: LD_INT 2
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 33
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 58
29206: PUSH
29207: EMPTY
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: PPUSH
29216: CALL_OW 70
29220: MINUS
29221: PPUSH
29222: CALL 69336 0 1
29226: PUSH
29227: LD_STRING #X106-3a
29229: PUSH
29230: LD_EXP 20
29234: PUSH
29235: LD_STRING #X106-1
29237: PUSH
29238: LD_EXP 51
29242: PUSH
29243: LD_INT 0
29245: PLUS
29246: PUSH
29247: LD_EXP 51
29251: PPUSH
29252: LD_INT 55
29254: PUSH
29255: EMPTY
29256: LIST
29257: PPUSH
29258: CALL_OW 72
29262: PUSH
29263: LD_INT 0
29265: PLUS
29266: MINUS
29267: PPUSH
29268: CALL 69336 0 1
29272: PUSH
29273: LD_STRING #X106-3
29275: PUSH
29276: LD_EXP 19
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
// end else
29291: GO 29447
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29293: LD_EXP 18
29297: PUSH
29298: LD_EXP 20
29302: AND
29303: IFFALSE 29390
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29305: LD_ADDR_OWVAR 47
29309: PUSH
29310: LD_STRING #X106-1a
29312: PUSH
29313: LD_EXP 21
29317: PUSH
29318: LD_INT 16
29320: PPUSH
29321: LD_INT 22
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 21
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 33
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 58
29353: PUSH
29354: EMPTY
29355: LIST
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL_OW 70
29367: MINUS
29368: PPUSH
29369: CALL 69336 0 1
29373: PUSH
29374: LD_STRING #X106-3a
29376: PUSH
29377: LD_EXP 20
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: ST_TO_ADDR
// end else
29388: GO 29447
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29390: LD_ADDR_OWVAR 47
29394: PUSH
29395: LD_STRING #X106-1
29397: PUSH
29398: LD_EXP 51
29402: PUSH
29403: LD_INT 0
29405: PLUS
29406: PUSH
29407: LD_EXP 51
29411: PPUSH
29412: LD_INT 55
29414: PUSH
29415: EMPTY
29416: LIST
29417: PPUSH
29418: CALL_OW 72
29422: PUSH
29423: LD_INT 0
29425: PLUS
29426: MINUS
29427: PPUSH
29428: CALL 69336 0 1
29432: PUSH
29433: LD_STRING #X106-3
29435: PUSH
29436: LD_EXP 19
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: ST_TO_ADDR
// end ; end ; end_of_file
29447: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29448: LD_INT 0
29450: PPUSH
29451: PPUSH
// if exist_mode then
29452: LD_VAR 0 2
29456: IFFALSE 29481
// unit := CreateCharacter ( prefix & ident ) else
29458: LD_ADDR_VAR 0 5
29462: PUSH
29463: LD_VAR 0 3
29467: PUSH
29468: LD_VAR 0 1
29472: STR
29473: PPUSH
29474: CALL_OW 34
29478: ST_TO_ADDR
29479: GO 29496
// unit := NewCharacter ( ident ) ;
29481: LD_ADDR_VAR 0 5
29485: PUSH
29486: LD_VAR 0 1
29490: PPUSH
29491: CALL_OW 25
29495: ST_TO_ADDR
// result := unit ;
29496: LD_ADDR_VAR 0 4
29500: PUSH
29501: LD_VAR 0 5
29505: ST_TO_ADDR
// end ;
29506: LD_VAR 0 4
29510: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29511: LD_INT 0
29513: PPUSH
29514: PPUSH
// if not side or not nation then
29515: LD_VAR 0 1
29519: NOT
29520: PUSH
29521: LD_VAR 0 2
29525: NOT
29526: OR
29527: IFFALSE 29531
// exit ;
29529: GO 30299
// case nation of nation_american :
29531: LD_VAR 0 2
29535: PUSH
29536: LD_INT 1
29538: DOUBLE
29539: EQUAL
29540: IFTRUE 29544
29542: GO 29758
29544: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29545: LD_ADDR_VAR 0 4
29549: PUSH
29550: LD_INT 35
29552: PUSH
29553: LD_INT 45
29555: PUSH
29556: LD_INT 46
29558: PUSH
29559: LD_INT 47
29561: PUSH
29562: LD_INT 82
29564: PUSH
29565: LD_INT 83
29567: PUSH
29568: LD_INT 84
29570: PUSH
29571: LD_INT 85
29573: PUSH
29574: LD_INT 86
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 6
29585: PUSH
29586: LD_INT 15
29588: PUSH
29589: LD_INT 16
29591: PUSH
29592: LD_INT 7
29594: PUSH
29595: LD_INT 12
29597: PUSH
29598: LD_INT 13
29600: PUSH
29601: LD_INT 10
29603: PUSH
29604: LD_INT 14
29606: PUSH
29607: LD_INT 20
29609: PUSH
29610: LD_INT 21
29612: PUSH
29613: LD_INT 22
29615: PUSH
29616: LD_INT 25
29618: PUSH
29619: LD_INT 32
29621: PUSH
29622: LD_INT 27
29624: PUSH
29625: LD_INT 36
29627: PUSH
29628: LD_INT 69
29630: PUSH
29631: LD_INT 39
29633: PUSH
29634: LD_INT 34
29636: PUSH
29637: LD_INT 40
29639: PUSH
29640: LD_INT 48
29642: PUSH
29643: LD_INT 49
29645: PUSH
29646: LD_INT 50
29648: PUSH
29649: LD_INT 51
29651: PUSH
29652: LD_INT 52
29654: PUSH
29655: LD_INT 53
29657: PUSH
29658: LD_INT 54
29660: PUSH
29661: LD_INT 55
29663: PUSH
29664: LD_INT 56
29666: PUSH
29667: LD_INT 57
29669: PUSH
29670: LD_INT 58
29672: PUSH
29673: LD_INT 59
29675: PUSH
29676: LD_INT 60
29678: PUSH
29679: LD_INT 61
29681: PUSH
29682: LD_INT 62
29684: PUSH
29685: LD_INT 80
29687: PUSH
29688: LD_INT 82
29690: PUSH
29691: LD_INT 83
29693: PUSH
29694: LD_INT 84
29696: PUSH
29697: LD_INT 85
29699: PUSH
29700: LD_INT 86
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: ST_TO_ADDR
29756: GO 30223
29758: LD_INT 2
29760: DOUBLE
29761: EQUAL
29762: IFTRUE 29766
29764: GO 29992
29766: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29767: LD_ADDR_VAR 0 4
29771: PUSH
29772: LD_INT 35
29774: PUSH
29775: LD_INT 45
29777: PUSH
29778: LD_INT 46
29780: PUSH
29781: LD_INT 47
29783: PUSH
29784: LD_INT 82
29786: PUSH
29787: LD_INT 83
29789: PUSH
29790: LD_INT 84
29792: PUSH
29793: LD_INT 85
29795: PUSH
29796: LD_INT 87
29798: PUSH
29799: LD_INT 70
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: LD_INT 11
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: LD_INT 4
29813: PUSH
29814: LD_INT 5
29816: PUSH
29817: LD_INT 6
29819: PUSH
29820: LD_INT 15
29822: PUSH
29823: LD_INT 18
29825: PUSH
29826: LD_INT 7
29828: PUSH
29829: LD_INT 17
29831: PUSH
29832: LD_INT 8
29834: PUSH
29835: LD_INT 20
29837: PUSH
29838: LD_INT 21
29840: PUSH
29841: LD_INT 22
29843: PUSH
29844: LD_INT 72
29846: PUSH
29847: LD_INT 26
29849: PUSH
29850: LD_INT 69
29852: PUSH
29853: LD_INT 39
29855: PUSH
29856: LD_INT 40
29858: PUSH
29859: LD_INT 41
29861: PUSH
29862: LD_INT 42
29864: PUSH
29865: LD_INT 43
29867: PUSH
29868: LD_INT 48
29870: PUSH
29871: LD_INT 49
29873: PUSH
29874: LD_INT 50
29876: PUSH
29877: LD_INT 51
29879: PUSH
29880: LD_INT 52
29882: PUSH
29883: LD_INT 53
29885: PUSH
29886: LD_INT 54
29888: PUSH
29889: LD_INT 55
29891: PUSH
29892: LD_INT 56
29894: PUSH
29895: LD_INT 60
29897: PUSH
29898: LD_INT 61
29900: PUSH
29901: LD_INT 62
29903: PUSH
29904: LD_INT 66
29906: PUSH
29907: LD_INT 67
29909: PUSH
29910: LD_INT 68
29912: PUSH
29913: LD_INT 81
29915: PUSH
29916: LD_INT 82
29918: PUSH
29919: LD_INT 83
29921: PUSH
29922: LD_INT 84
29924: PUSH
29925: LD_INT 85
29927: PUSH
29928: LD_INT 87
29930: PUSH
29931: LD_INT 88
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: ST_TO_ADDR
29990: GO 30223
29992: LD_INT 3
29994: DOUBLE
29995: EQUAL
29996: IFTRUE 30000
29998: GO 30222
30000: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30001: LD_ADDR_VAR 0 4
30005: PUSH
30006: LD_INT 46
30008: PUSH
30009: LD_INT 47
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: LD_INT 2
30017: PUSH
30018: LD_INT 82
30020: PUSH
30021: LD_INT 83
30023: PUSH
30024: LD_INT 84
30026: PUSH
30027: LD_INT 85
30029: PUSH
30030: LD_INT 86
30032: PUSH
30033: LD_INT 11
30035: PUSH
30036: LD_INT 9
30038: PUSH
30039: LD_INT 20
30041: PUSH
30042: LD_INT 19
30044: PUSH
30045: LD_INT 21
30047: PUSH
30048: LD_INT 24
30050: PUSH
30051: LD_INT 22
30053: PUSH
30054: LD_INT 25
30056: PUSH
30057: LD_INT 28
30059: PUSH
30060: LD_INT 29
30062: PUSH
30063: LD_INT 30
30065: PUSH
30066: LD_INT 31
30068: PUSH
30069: LD_INT 37
30071: PUSH
30072: LD_INT 38
30074: PUSH
30075: LD_INT 32
30077: PUSH
30078: LD_INT 27
30080: PUSH
30081: LD_INT 33
30083: PUSH
30084: LD_INT 69
30086: PUSH
30087: LD_INT 39
30089: PUSH
30090: LD_INT 34
30092: PUSH
30093: LD_INT 40
30095: PUSH
30096: LD_INT 71
30098: PUSH
30099: LD_INT 23
30101: PUSH
30102: LD_INT 44
30104: PUSH
30105: LD_INT 48
30107: PUSH
30108: LD_INT 49
30110: PUSH
30111: LD_INT 50
30113: PUSH
30114: LD_INT 51
30116: PUSH
30117: LD_INT 52
30119: PUSH
30120: LD_INT 53
30122: PUSH
30123: LD_INT 54
30125: PUSH
30126: LD_INT 55
30128: PUSH
30129: LD_INT 56
30131: PUSH
30132: LD_INT 57
30134: PUSH
30135: LD_INT 58
30137: PUSH
30138: LD_INT 59
30140: PUSH
30141: LD_INT 63
30143: PUSH
30144: LD_INT 64
30146: PUSH
30147: LD_INT 65
30149: PUSH
30150: LD_INT 82
30152: PUSH
30153: LD_INT 83
30155: PUSH
30156: LD_INT 84
30158: PUSH
30159: LD_INT 85
30161: PUSH
30162: LD_INT 86
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: ST_TO_ADDR
30220: GO 30223
30222: POP
// if state > - 1 and state < 3 then
30223: LD_VAR 0 3
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: GREATER
30232: PUSH
30233: LD_VAR 0 3
30237: PUSH
30238: LD_INT 3
30240: LESS
30241: AND
30242: IFFALSE 30299
// for i in result do
30244: LD_ADDR_VAR 0 5
30248: PUSH
30249: LD_VAR 0 4
30253: PUSH
30254: FOR_IN
30255: IFFALSE 30297
// if GetTech ( i , side ) <> state then
30257: LD_VAR 0 5
30261: PPUSH
30262: LD_VAR 0 1
30266: PPUSH
30267: CALL_OW 321
30271: PUSH
30272: LD_VAR 0 3
30276: NONEQUAL
30277: IFFALSE 30295
// result := result diff i ;
30279: LD_ADDR_VAR 0 4
30283: PUSH
30284: LD_VAR 0 4
30288: PUSH
30289: LD_VAR 0 5
30293: DIFF
30294: ST_TO_ADDR
30295: GO 30254
30297: POP
30298: POP
// end ;
30299: LD_VAR 0 4
30303: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30304: LD_INT 0
30306: PPUSH
30307: PPUSH
30308: PPUSH
// result := true ;
30309: LD_ADDR_VAR 0 3
30313: PUSH
30314: LD_INT 1
30316: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30317: LD_ADDR_VAR 0 5
30321: PUSH
30322: LD_VAR 0 2
30326: PPUSH
30327: CALL_OW 480
30331: ST_TO_ADDR
// if not tmp then
30332: LD_VAR 0 5
30336: NOT
30337: IFFALSE 30341
// exit ;
30339: GO 30390
// for i in tmp do
30341: LD_ADDR_VAR 0 4
30345: PUSH
30346: LD_VAR 0 5
30350: PUSH
30351: FOR_IN
30352: IFFALSE 30388
// if GetTech ( i , side ) <> state_researched then
30354: LD_VAR 0 4
30358: PPUSH
30359: LD_VAR 0 1
30363: PPUSH
30364: CALL_OW 321
30368: PUSH
30369: LD_INT 2
30371: NONEQUAL
30372: IFFALSE 30386
// begin result := false ;
30374: LD_ADDR_VAR 0 3
30378: PUSH
30379: LD_INT 0
30381: ST_TO_ADDR
// exit ;
30382: POP
30383: POP
30384: GO 30390
// end ;
30386: GO 30351
30388: POP
30389: POP
// end ;
30390: LD_VAR 0 3
30394: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30395: LD_INT 0
30397: PPUSH
30398: PPUSH
30399: PPUSH
30400: PPUSH
30401: PPUSH
30402: PPUSH
30403: PPUSH
30404: PPUSH
30405: PPUSH
30406: PPUSH
30407: PPUSH
30408: PPUSH
30409: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30410: LD_VAR 0 1
30414: NOT
30415: PUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: CALL_OW 257
30425: PUSH
30426: LD_INT 9
30428: NONEQUAL
30429: OR
30430: IFFALSE 30434
// exit ;
30432: GO 31007
// side := GetSide ( unit ) ;
30434: LD_ADDR_VAR 0 9
30438: PUSH
30439: LD_VAR 0 1
30443: PPUSH
30444: CALL_OW 255
30448: ST_TO_ADDR
// tech_space := tech_spacanom ;
30449: LD_ADDR_VAR 0 12
30453: PUSH
30454: LD_INT 29
30456: ST_TO_ADDR
// tech_time := tech_taurad ;
30457: LD_ADDR_VAR 0 13
30461: PUSH
30462: LD_INT 28
30464: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30465: LD_ADDR_VAR 0 11
30469: PUSH
30470: LD_VAR 0 1
30474: PPUSH
30475: CALL_OW 310
30479: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30480: LD_VAR 0 11
30484: PPUSH
30485: CALL_OW 247
30489: PUSH
30490: LD_INT 2
30492: EQUAL
30493: IFFALSE 30497
// exit ;
30495: GO 31007
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30497: LD_ADDR_VAR 0 8
30501: PUSH
30502: LD_INT 81
30504: PUSH
30505: LD_VAR 0 9
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: LD_INT 21
30519: PUSH
30520: LD_INT 3
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PPUSH
30535: CALL_OW 69
30539: ST_TO_ADDR
// if not tmp then
30540: LD_VAR 0 8
30544: NOT
30545: IFFALSE 30549
// exit ;
30547: GO 31007
// if in_unit then
30549: LD_VAR 0 11
30553: IFFALSE 30577
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30555: LD_ADDR_VAR 0 10
30559: PUSH
30560: LD_VAR 0 8
30564: PPUSH
30565: LD_VAR 0 11
30569: PPUSH
30570: CALL_OW 74
30574: ST_TO_ADDR
30575: GO 30597
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30577: LD_ADDR_VAR 0 10
30581: PUSH
30582: LD_VAR 0 8
30586: PPUSH
30587: LD_VAR 0 1
30591: PPUSH
30592: CALL_OW 74
30596: ST_TO_ADDR
// if not enemy then
30597: LD_VAR 0 10
30601: NOT
30602: IFFALSE 30606
// exit ;
30604: GO 31007
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30606: LD_VAR 0 11
30610: PUSH
30611: LD_VAR 0 11
30615: PPUSH
30616: LD_VAR 0 10
30620: PPUSH
30621: CALL_OW 296
30625: PUSH
30626: LD_INT 13
30628: GREATER
30629: AND
30630: PUSH
30631: LD_VAR 0 1
30635: PPUSH
30636: LD_VAR 0 10
30640: PPUSH
30641: CALL_OW 296
30645: PUSH
30646: LD_INT 12
30648: GREATER
30649: OR
30650: IFFALSE 30654
// exit ;
30652: GO 31007
// missile := [ 1 ] ;
30654: LD_ADDR_VAR 0 14
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: EMPTY
30663: LIST
30664: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30665: LD_VAR 0 9
30669: PPUSH
30670: LD_VAR 0 12
30674: PPUSH
30675: CALL_OW 325
30679: IFFALSE 30708
// missile := Replace ( missile , missile + 1 , 2 ) ;
30681: LD_ADDR_VAR 0 14
30685: PUSH
30686: LD_VAR 0 14
30690: PPUSH
30691: LD_VAR 0 14
30695: PUSH
30696: LD_INT 1
30698: PLUS
30699: PPUSH
30700: LD_INT 2
30702: PPUSH
30703: CALL_OW 1
30707: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30708: LD_VAR 0 9
30712: PPUSH
30713: LD_VAR 0 13
30717: PPUSH
30718: CALL_OW 325
30722: PUSH
30723: LD_VAR 0 10
30727: PPUSH
30728: CALL_OW 255
30732: PPUSH
30733: LD_VAR 0 13
30737: PPUSH
30738: CALL_OW 325
30742: NOT
30743: AND
30744: IFFALSE 30773
// missile := Replace ( missile , missile + 1 , 3 ) ;
30746: LD_ADDR_VAR 0 14
30750: PUSH
30751: LD_VAR 0 14
30755: PPUSH
30756: LD_VAR 0 14
30760: PUSH
30761: LD_INT 1
30763: PLUS
30764: PPUSH
30765: LD_INT 3
30767: PPUSH
30768: CALL_OW 1
30772: ST_TO_ADDR
// if missile < 2 then
30773: LD_VAR 0 14
30777: PUSH
30778: LD_INT 2
30780: LESS
30781: IFFALSE 30785
// exit ;
30783: GO 31007
// x := GetX ( enemy ) ;
30785: LD_ADDR_VAR 0 4
30789: PUSH
30790: LD_VAR 0 10
30794: PPUSH
30795: CALL_OW 250
30799: ST_TO_ADDR
// y := GetY ( enemy ) ;
30800: LD_ADDR_VAR 0 5
30804: PUSH
30805: LD_VAR 0 10
30809: PPUSH
30810: CALL_OW 251
30814: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30815: LD_ADDR_VAR 0 6
30819: PUSH
30820: LD_VAR 0 4
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PPUSH
30829: LD_INT 1
30831: PPUSH
30832: CALL_OW 12
30836: PLUS
30837: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30838: LD_ADDR_VAR 0 7
30842: PUSH
30843: LD_VAR 0 5
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PPUSH
30852: LD_INT 1
30854: PPUSH
30855: CALL_OW 12
30859: PLUS
30860: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30861: LD_VAR 0 6
30865: PPUSH
30866: LD_VAR 0 7
30870: PPUSH
30871: CALL_OW 488
30875: NOT
30876: IFFALSE 30898
// begin _x := x ;
30878: LD_ADDR_VAR 0 6
30882: PUSH
30883: LD_VAR 0 4
30887: ST_TO_ADDR
// _y := y ;
30888: LD_ADDR_VAR 0 7
30892: PUSH
30893: LD_VAR 0 5
30897: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30898: LD_ADDR_VAR 0 3
30902: PUSH
30903: LD_INT 1
30905: PPUSH
30906: LD_VAR 0 14
30910: PPUSH
30911: CALL_OW 12
30915: ST_TO_ADDR
// case i of 1 :
30916: LD_VAR 0 3
30920: PUSH
30921: LD_INT 1
30923: DOUBLE
30924: EQUAL
30925: IFTRUE 30929
30927: GO 30946
30929: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30930: LD_VAR 0 1
30934: PPUSH
30935: LD_VAR 0 10
30939: PPUSH
30940: CALL_OW 115
30944: GO 31007
30946: LD_INT 2
30948: DOUBLE
30949: EQUAL
30950: IFTRUE 30954
30952: GO 30976
30954: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30955: LD_VAR 0 1
30959: PPUSH
30960: LD_VAR 0 6
30964: PPUSH
30965: LD_VAR 0 7
30969: PPUSH
30970: CALL_OW 153
30974: GO 31007
30976: LD_INT 3
30978: DOUBLE
30979: EQUAL
30980: IFTRUE 30984
30982: GO 31006
30984: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30985: LD_VAR 0 1
30989: PPUSH
30990: LD_VAR 0 6
30994: PPUSH
30995: LD_VAR 0 7
30999: PPUSH
31000: CALL_OW 154
31004: GO 31007
31006: POP
// end ;
31007: LD_VAR 0 2
31011: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31012: LD_INT 0
31014: PPUSH
31015: PPUSH
31016: PPUSH
31017: PPUSH
31018: PPUSH
31019: PPUSH
// if not unit or not building then
31020: LD_VAR 0 1
31024: NOT
31025: PUSH
31026: LD_VAR 0 2
31030: NOT
31031: OR
31032: IFFALSE 31036
// exit ;
31034: GO 31194
// x := GetX ( building ) ;
31036: LD_ADDR_VAR 0 5
31040: PUSH
31041: LD_VAR 0 2
31045: PPUSH
31046: CALL_OW 250
31050: ST_TO_ADDR
// y := GetY ( building ) ;
31051: LD_ADDR_VAR 0 6
31055: PUSH
31056: LD_VAR 0 2
31060: PPUSH
31061: CALL_OW 251
31065: ST_TO_ADDR
// for i = 0 to 5 do
31066: LD_ADDR_VAR 0 4
31070: PUSH
31071: DOUBLE
31072: LD_INT 0
31074: DEC
31075: ST_TO_ADDR
31076: LD_INT 5
31078: PUSH
31079: FOR_TO
31080: IFFALSE 31192
// begin _x := ShiftX ( x , i , 3 ) ;
31082: LD_ADDR_VAR 0 7
31086: PUSH
31087: LD_VAR 0 5
31091: PPUSH
31092: LD_VAR 0 4
31096: PPUSH
31097: LD_INT 3
31099: PPUSH
31100: CALL_OW 272
31104: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31105: LD_ADDR_VAR 0 8
31109: PUSH
31110: LD_VAR 0 6
31114: PPUSH
31115: LD_VAR 0 4
31119: PPUSH
31120: LD_INT 3
31122: PPUSH
31123: CALL_OW 273
31127: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31128: LD_VAR 0 7
31132: PPUSH
31133: LD_VAR 0 8
31137: PPUSH
31138: CALL_OW 488
31142: NOT
31143: IFFALSE 31147
// continue ;
31145: GO 31079
// if HexInfo ( _x , _y ) = 0 then
31147: LD_VAR 0 7
31151: PPUSH
31152: LD_VAR 0 8
31156: PPUSH
31157: CALL_OW 428
31161: PUSH
31162: LD_INT 0
31164: EQUAL
31165: IFFALSE 31190
// begin ComMoveXY ( unit , _x , _y ) ;
31167: LD_VAR 0 1
31171: PPUSH
31172: LD_VAR 0 7
31176: PPUSH
31177: LD_VAR 0 8
31181: PPUSH
31182: CALL_OW 111
// exit ;
31186: POP
31187: POP
31188: GO 31194
// end ; end ;
31190: GO 31079
31192: POP
31193: POP
// end ;
31194: LD_VAR 0 3
31198: RET
// export function ScanBase ( side , base_area ) ; begin
31199: LD_INT 0
31201: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31202: LD_ADDR_VAR 0 3
31206: PUSH
31207: LD_VAR 0 2
31211: PPUSH
31212: LD_INT 81
31214: PUSH
31215: LD_VAR 0 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PPUSH
31224: CALL_OW 70
31228: ST_TO_ADDR
// end ;
31229: LD_VAR 0 3
31233: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
// result := false ;
31240: LD_ADDR_VAR 0 2
31244: PUSH
31245: LD_INT 0
31247: ST_TO_ADDR
// side := GetSide ( unit ) ;
31248: LD_ADDR_VAR 0 3
31252: PUSH
31253: LD_VAR 0 1
31257: PPUSH
31258: CALL_OW 255
31262: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31263: LD_ADDR_VAR 0 4
31267: PUSH
31268: LD_VAR 0 1
31272: PPUSH
31273: CALL_OW 248
31277: ST_TO_ADDR
// case nat of 1 :
31278: LD_VAR 0 4
31282: PUSH
31283: LD_INT 1
31285: DOUBLE
31286: EQUAL
31287: IFTRUE 31291
31289: GO 31302
31291: POP
// tech := tech_lassight ; 2 :
31292: LD_ADDR_VAR 0 5
31296: PUSH
31297: LD_INT 12
31299: ST_TO_ADDR
31300: GO 31341
31302: LD_INT 2
31304: DOUBLE
31305: EQUAL
31306: IFTRUE 31310
31308: GO 31321
31310: POP
// tech := tech_mortar ; 3 :
31311: LD_ADDR_VAR 0 5
31315: PUSH
31316: LD_INT 41
31318: ST_TO_ADDR
31319: GO 31341
31321: LD_INT 3
31323: DOUBLE
31324: EQUAL
31325: IFTRUE 31329
31327: GO 31340
31329: POP
// tech := tech_bazooka ; end ;
31330: LD_ADDR_VAR 0 5
31334: PUSH
31335: LD_INT 44
31337: ST_TO_ADDR
31338: GO 31341
31340: POP
// if Researched ( side , tech ) then
31341: LD_VAR 0 3
31345: PPUSH
31346: LD_VAR 0 5
31350: PPUSH
31351: CALL_OW 325
31355: IFFALSE 31382
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31357: LD_ADDR_VAR 0 2
31361: PUSH
31362: LD_INT 5
31364: PUSH
31365: LD_INT 8
31367: PUSH
31368: LD_INT 9
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: PUSH
31376: LD_VAR 0 4
31380: ARRAY
31381: ST_TO_ADDR
// end ;
31382: LD_VAR 0 2
31386: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31387: LD_INT 0
31389: PPUSH
31390: PPUSH
31391: PPUSH
// if not mines then
31392: LD_VAR 0 2
31396: NOT
31397: IFFALSE 31401
// exit ;
31399: GO 31545
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31401: LD_ADDR_VAR 0 5
31405: PUSH
31406: LD_INT 81
31408: PUSH
31409: LD_VAR 0 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: LD_INT 21
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PPUSH
31439: CALL_OW 69
31443: ST_TO_ADDR
// for i in mines do
31444: LD_ADDR_VAR 0 4
31448: PUSH
31449: LD_VAR 0 2
31453: PUSH
31454: FOR_IN
31455: IFFALSE 31543
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31457: LD_VAR 0 4
31461: PUSH
31462: LD_INT 1
31464: ARRAY
31465: PPUSH
31466: LD_VAR 0 4
31470: PUSH
31471: LD_INT 2
31473: ARRAY
31474: PPUSH
31475: CALL_OW 458
31479: NOT
31480: IFFALSE 31484
// continue ;
31482: GO 31454
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31484: LD_VAR 0 4
31488: PUSH
31489: LD_INT 1
31491: ARRAY
31492: PPUSH
31493: LD_VAR 0 4
31497: PUSH
31498: LD_INT 2
31500: ARRAY
31501: PPUSH
31502: CALL_OW 428
31506: PUSH
31507: LD_VAR 0 5
31511: IN
31512: IFFALSE 31541
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31514: LD_VAR 0 4
31518: PUSH
31519: LD_INT 1
31521: ARRAY
31522: PPUSH
31523: LD_VAR 0 4
31527: PUSH
31528: LD_INT 2
31530: ARRAY
31531: PPUSH
31532: LD_VAR 0 1
31536: PPUSH
31537: CALL_OW 456
// end ;
31541: GO 31454
31543: POP
31544: POP
// end ;
31545: LD_VAR 0 3
31549: RET
// export function Count ( array ) ; begin
31550: LD_INT 0
31552: PPUSH
// result := array + 0 ;
31553: LD_ADDR_VAR 0 2
31557: PUSH
31558: LD_VAR 0 1
31562: PUSH
31563: LD_INT 0
31565: PLUS
31566: ST_TO_ADDR
// end ;
31567: LD_VAR 0 2
31571: RET
// export function IsEmpty ( building ) ; begin
31572: LD_INT 0
31574: PPUSH
// if not building then
31575: LD_VAR 0 1
31579: NOT
31580: IFFALSE 31584
// exit ;
31582: GO 31627
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31584: LD_ADDR_VAR 0 2
31588: PUSH
31589: LD_VAR 0 1
31593: PUSH
31594: LD_INT 22
31596: PUSH
31597: LD_VAR 0 1
31601: PPUSH
31602: CALL_OW 255
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 58
31613: PUSH
31614: EMPTY
31615: LIST
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PPUSH
31621: CALL_OW 69
31625: IN
31626: ST_TO_ADDR
// end ;
31627: LD_VAR 0 2
31631: RET
// export function IsNotFull ( building ) ; var places ; begin
31632: LD_INT 0
31634: PPUSH
31635: PPUSH
// if not building then
31636: LD_VAR 0 1
31640: NOT
31641: IFFALSE 31645
// exit ;
31643: GO 31673
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31645: LD_ADDR_VAR 0 2
31649: PUSH
31650: LD_VAR 0 1
31654: PPUSH
31655: LD_INT 3
31657: PUSH
31658: LD_INT 62
31660: PUSH
31661: EMPTY
31662: LIST
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PPUSH
31668: CALL_OW 72
31672: ST_TO_ADDR
// end ;
31673: LD_VAR 0 2
31677: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31678: LD_INT 0
31680: PPUSH
31681: PPUSH
31682: PPUSH
31683: PPUSH
// tmp := [ ] ;
31684: LD_ADDR_VAR 0 3
31688: PUSH
31689: EMPTY
31690: ST_TO_ADDR
// list := [ ] ;
31691: LD_ADDR_VAR 0 5
31695: PUSH
31696: EMPTY
31697: ST_TO_ADDR
// for i = 16 to 25 do
31698: LD_ADDR_VAR 0 4
31702: PUSH
31703: DOUBLE
31704: LD_INT 16
31706: DEC
31707: ST_TO_ADDR
31708: LD_INT 25
31710: PUSH
31711: FOR_TO
31712: IFFALSE 31785
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31714: LD_ADDR_VAR 0 3
31718: PUSH
31719: LD_VAR 0 3
31723: PUSH
31724: LD_INT 22
31726: PUSH
31727: LD_VAR 0 1
31731: PPUSH
31732: CALL_OW 255
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 91
31743: PUSH
31744: LD_VAR 0 1
31748: PUSH
31749: LD_INT 6
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 30
31759: PUSH
31760: LD_VAR 0 4
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: LIST
31773: PUSH
31774: EMPTY
31775: LIST
31776: PPUSH
31777: CALL_OW 69
31781: ADD
31782: ST_TO_ADDR
31783: GO 31711
31785: POP
31786: POP
// for i = 1 to tmp do
31787: LD_ADDR_VAR 0 4
31791: PUSH
31792: DOUBLE
31793: LD_INT 1
31795: DEC
31796: ST_TO_ADDR
31797: LD_VAR 0 3
31801: PUSH
31802: FOR_TO
31803: IFFALSE 31891
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31805: LD_ADDR_VAR 0 5
31809: PUSH
31810: LD_VAR 0 5
31814: PUSH
31815: LD_VAR 0 3
31819: PUSH
31820: LD_VAR 0 4
31824: ARRAY
31825: PPUSH
31826: CALL_OW 266
31830: PUSH
31831: LD_VAR 0 3
31835: PUSH
31836: LD_VAR 0 4
31840: ARRAY
31841: PPUSH
31842: CALL_OW 250
31846: PUSH
31847: LD_VAR 0 3
31851: PUSH
31852: LD_VAR 0 4
31856: ARRAY
31857: PPUSH
31858: CALL_OW 251
31862: PUSH
31863: LD_VAR 0 3
31867: PUSH
31868: LD_VAR 0 4
31872: ARRAY
31873: PPUSH
31874: CALL_OW 254
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: PUSH
31885: EMPTY
31886: LIST
31887: ADD
31888: ST_TO_ADDR
31889: GO 31802
31891: POP
31892: POP
// result := list ;
31893: LD_ADDR_VAR 0 2
31897: PUSH
31898: LD_VAR 0 5
31902: ST_TO_ADDR
// end ;
31903: LD_VAR 0 2
31907: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31908: LD_INT 0
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
// if not factory then
31917: LD_VAR 0 1
31921: NOT
31922: IFFALSE 31926
// exit ;
31924: GO 32519
// if control = control_apeman then
31926: LD_VAR 0 4
31930: PUSH
31931: LD_INT 5
31933: EQUAL
31934: IFFALSE 32043
// begin tmp := UnitsInside ( factory ) ;
31936: LD_ADDR_VAR 0 8
31940: PUSH
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 313
31950: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31951: LD_VAR 0 8
31955: PPUSH
31956: LD_INT 25
31958: PUSH
31959: LD_INT 12
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PPUSH
31966: CALL_OW 72
31970: NOT
31971: IFFALSE 31981
// control := control_manual ;
31973: LD_ADDR_VAR 0 4
31977: PUSH
31978: LD_INT 1
31980: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31981: LD_ADDR_VAR 0 8
31985: PUSH
31986: LD_VAR 0 1
31990: PPUSH
31991: CALL 31678 0 1
31995: ST_TO_ADDR
// if tmp then
31996: LD_VAR 0 8
32000: IFFALSE 32043
// begin for i in tmp do
32002: LD_ADDR_VAR 0 7
32006: PUSH
32007: LD_VAR 0 8
32011: PUSH
32012: FOR_IN
32013: IFFALSE 32041
// if i [ 1 ] = b_ext_radio then
32015: LD_VAR 0 7
32019: PUSH
32020: LD_INT 1
32022: ARRAY
32023: PUSH
32024: LD_INT 22
32026: EQUAL
32027: IFFALSE 32039
// begin control := control_remote ;
32029: LD_ADDR_VAR 0 4
32033: PUSH
32034: LD_INT 2
32036: ST_TO_ADDR
// break ;
32037: GO 32041
// end ;
32039: GO 32012
32041: POP
32042: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32043: LD_VAR 0 1
32047: PPUSH
32048: LD_VAR 0 2
32052: PPUSH
32053: LD_VAR 0 3
32057: PPUSH
32058: LD_VAR 0 4
32062: PPUSH
32063: LD_VAR 0 5
32067: PPUSH
32068: CALL_OW 448
32072: IFFALSE 32107
// begin result := [ chassis , engine , control , weapon ] ;
32074: LD_ADDR_VAR 0 6
32078: PUSH
32079: LD_VAR 0 2
32083: PUSH
32084: LD_VAR 0 3
32088: PUSH
32089: LD_VAR 0 4
32093: PUSH
32094: LD_VAR 0 5
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: ST_TO_ADDR
// exit ;
32105: GO 32519
// end ; _chassis := AvailableChassisList ( factory ) ;
32107: LD_ADDR_VAR 0 9
32111: PUSH
32112: LD_VAR 0 1
32116: PPUSH
32117: CALL_OW 475
32121: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32122: LD_ADDR_VAR 0 11
32126: PUSH
32127: LD_VAR 0 1
32131: PPUSH
32132: CALL_OW 476
32136: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32137: LD_ADDR_VAR 0 12
32141: PUSH
32142: LD_VAR 0 1
32146: PPUSH
32147: CALL_OW 477
32151: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32152: LD_ADDR_VAR 0 10
32156: PUSH
32157: LD_VAR 0 1
32161: PPUSH
32162: CALL_OW 478
32166: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32167: LD_VAR 0 9
32171: NOT
32172: PUSH
32173: LD_VAR 0 11
32177: NOT
32178: OR
32179: PUSH
32180: LD_VAR 0 12
32184: NOT
32185: OR
32186: PUSH
32187: LD_VAR 0 10
32191: NOT
32192: OR
32193: IFFALSE 32228
// begin result := [ chassis , engine , control , weapon ] ;
32195: LD_ADDR_VAR 0 6
32199: PUSH
32200: LD_VAR 0 2
32204: PUSH
32205: LD_VAR 0 3
32209: PUSH
32210: LD_VAR 0 4
32214: PUSH
32215: LD_VAR 0 5
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: ST_TO_ADDR
// exit ;
32226: GO 32519
// end ; if not chassis in _chassis then
32228: LD_VAR 0 2
32232: PUSH
32233: LD_VAR 0 9
32237: IN
32238: NOT
32239: IFFALSE 32265
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32241: LD_ADDR_VAR 0 2
32245: PUSH
32246: LD_VAR 0 9
32250: PUSH
32251: LD_INT 1
32253: PPUSH
32254: LD_VAR 0 9
32258: PPUSH
32259: CALL_OW 12
32263: ARRAY
32264: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32265: LD_VAR 0 2
32269: PPUSH
32270: LD_VAR 0 3
32274: PPUSH
32275: CALL 32524 0 2
32279: NOT
32280: IFFALSE 32339
// repeat engine := _engine [ 1 ] ;
32282: LD_ADDR_VAR 0 3
32286: PUSH
32287: LD_VAR 0 11
32291: PUSH
32292: LD_INT 1
32294: ARRAY
32295: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32296: LD_ADDR_VAR 0 11
32300: PUSH
32301: LD_VAR 0 11
32305: PPUSH
32306: LD_INT 1
32308: PPUSH
32309: CALL_OW 3
32313: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32314: LD_VAR 0 2
32318: PPUSH
32319: LD_VAR 0 3
32323: PPUSH
32324: CALL 32524 0 2
32328: PUSH
32329: LD_VAR 0 11
32333: PUSH
32334: EMPTY
32335: EQUAL
32336: OR
32337: IFFALSE 32282
// if not control in _control then
32339: LD_VAR 0 4
32343: PUSH
32344: LD_VAR 0 12
32348: IN
32349: NOT
32350: IFFALSE 32376
// control := _control [ rand ( 1 , _control ) ] ;
32352: LD_ADDR_VAR 0 4
32356: PUSH
32357: LD_VAR 0 12
32361: PUSH
32362: LD_INT 1
32364: PPUSH
32365: LD_VAR 0 12
32369: PPUSH
32370: CALL_OW 12
32374: ARRAY
32375: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32376: LD_VAR 0 2
32380: PPUSH
32381: LD_VAR 0 5
32385: PPUSH
32386: CALL 32744 0 2
32390: NOT
32391: IFFALSE 32450
// repeat weapon := _weapon [ 1 ] ;
32393: LD_ADDR_VAR 0 5
32397: PUSH
32398: LD_VAR 0 10
32402: PUSH
32403: LD_INT 1
32405: ARRAY
32406: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32407: LD_ADDR_VAR 0 10
32411: PUSH
32412: LD_VAR 0 10
32416: PPUSH
32417: LD_INT 1
32419: PPUSH
32420: CALL_OW 3
32424: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32425: LD_VAR 0 2
32429: PPUSH
32430: LD_VAR 0 5
32434: PPUSH
32435: CALL 32744 0 2
32439: PUSH
32440: LD_VAR 0 10
32444: PUSH
32445: EMPTY
32446: EQUAL
32447: OR
32448: IFFALSE 32393
// result := [ ] ;
32450: LD_ADDR_VAR 0 6
32454: PUSH
32455: EMPTY
32456: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32457: LD_VAR 0 1
32461: PPUSH
32462: LD_VAR 0 2
32466: PPUSH
32467: LD_VAR 0 3
32471: PPUSH
32472: LD_VAR 0 4
32476: PPUSH
32477: LD_VAR 0 5
32481: PPUSH
32482: CALL_OW 448
32486: IFFALSE 32519
// result := [ chassis , engine , control , weapon ] ;
32488: LD_ADDR_VAR 0 6
32492: PUSH
32493: LD_VAR 0 2
32497: PUSH
32498: LD_VAR 0 3
32502: PUSH
32503: LD_VAR 0 4
32507: PUSH
32508: LD_VAR 0 5
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: ST_TO_ADDR
// end ;
32519: LD_VAR 0 6
32523: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32524: LD_INT 0
32526: PPUSH
// if not chassis or not engine then
32527: LD_VAR 0 1
32531: NOT
32532: PUSH
32533: LD_VAR 0 2
32537: NOT
32538: OR
32539: IFFALSE 32543
// exit ;
32541: GO 32739
// case engine of engine_solar :
32543: LD_VAR 0 2
32547: PUSH
32548: LD_INT 2
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32594
32556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32557: LD_ADDR_VAR 0 3
32561: PUSH
32562: LD_INT 11
32564: PUSH
32565: LD_INT 12
32567: PUSH
32568: LD_INT 13
32570: PUSH
32571: LD_INT 14
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 3
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: ST_TO_ADDR
32592: GO 32723
32594: LD_INT 1
32596: DOUBLE
32597: EQUAL
32598: IFTRUE 32602
32600: GO 32664
32602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32603: LD_ADDR_VAR 0 3
32607: PUSH
32608: LD_INT 11
32610: PUSH
32611: LD_INT 12
32613: PUSH
32614: LD_INT 13
32616: PUSH
32617: LD_INT 14
32619: PUSH
32620: LD_INT 1
32622: PUSH
32623: LD_INT 2
32625: PUSH
32626: LD_INT 3
32628: PUSH
32629: LD_INT 4
32631: PUSH
32632: LD_INT 5
32634: PUSH
32635: LD_INT 21
32637: PUSH
32638: LD_INT 23
32640: PUSH
32641: LD_INT 22
32643: PUSH
32644: LD_INT 24
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: ST_TO_ADDR
32662: GO 32723
32664: LD_INT 3
32666: DOUBLE
32667: EQUAL
32668: IFTRUE 32672
32670: GO 32722
32672: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32673: LD_ADDR_VAR 0 3
32677: PUSH
32678: LD_INT 13
32680: PUSH
32681: LD_INT 14
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: LD_INT 3
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: LD_INT 5
32695: PUSH
32696: LD_INT 21
32698: PUSH
32699: LD_INT 22
32701: PUSH
32702: LD_INT 23
32704: PUSH
32705: LD_INT 24
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: ST_TO_ADDR
32720: GO 32723
32722: POP
// result := ( chassis in result ) ;
32723: LD_ADDR_VAR 0 3
32727: PUSH
32728: LD_VAR 0 1
32732: PUSH
32733: LD_VAR 0 3
32737: IN
32738: ST_TO_ADDR
// end ;
32739: LD_VAR 0 3
32743: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32744: LD_INT 0
32746: PPUSH
// if not chassis or not weapon then
32747: LD_VAR 0 1
32751: NOT
32752: PUSH
32753: LD_VAR 0 2
32757: NOT
32758: OR
32759: IFFALSE 32763
// exit ;
32761: GO 33823
// case weapon of us_machine_gun :
32763: LD_VAR 0 2
32767: PUSH
32768: LD_INT 2
32770: DOUBLE
32771: EQUAL
32772: IFTRUE 32776
32774: GO 32806
32776: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32777: LD_ADDR_VAR 0 3
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: LD_INT 3
32790: PUSH
32791: LD_INT 4
32793: PUSH
32794: LD_INT 5
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: ST_TO_ADDR
32804: GO 33807
32806: LD_INT 3
32808: DOUBLE
32809: EQUAL
32810: IFTRUE 32814
32812: GO 32844
32814: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32815: LD_ADDR_VAR 0 3
32819: PUSH
32820: LD_INT 1
32822: PUSH
32823: LD_INT 2
32825: PUSH
32826: LD_INT 3
32828: PUSH
32829: LD_INT 4
32831: PUSH
32832: LD_INT 5
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: ST_TO_ADDR
32842: GO 33807
32844: LD_INT 11
32846: DOUBLE
32847: EQUAL
32848: IFTRUE 32852
32850: GO 32882
32852: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32853: LD_ADDR_VAR 0 3
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: LD_INT 3
32866: PUSH
32867: LD_INT 4
32869: PUSH
32870: LD_INT 5
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: ST_TO_ADDR
32880: GO 33807
32882: LD_INT 4
32884: DOUBLE
32885: EQUAL
32886: IFTRUE 32890
32888: GO 32916
32890: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32891: LD_ADDR_VAR 0 3
32895: PUSH
32896: LD_INT 2
32898: PUSH
32899: LD_INT 3
32901: PUSH
32902: LD_INT 4
32904: PUSH
32905: LD_INT 5
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
32914: GO 33807
32916: LD_INT 5
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32950
32924: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32925: LD_ADDR_VAR 0 3
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: LD_INT 4
32938: PUSH
32939: LD_INT 5
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: ST_TO_ADDR
32948: GO 33807
32950: LD_INT 9
32952: DOUBLE
32953: EQUAL
32954: IFTRUE 32958
32956: GO 32984
32958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32959: LD_ADDR_VAR 0 3
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: LD_INT 4
32972: PUSH
32973: LD_INT 5
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
32982: GO 33807
32984: LD_INT 7
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33018
32992: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32993: LD_ADDR_VAR 0 3
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: LD_INT 3
33003: PUSH
33004: LD_INT 4
33006: PUSH
33007: LD_INT 5
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
33016: GO 33807
33018: LD_INT 12
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33052
33026: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33027: LD_ADDR_VAR 0 3
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: LD_INT 4
33040: PUSH
33041: LD_INT 5
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
33050: GO 33807
33052: LD_INT 13
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33086
33060: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33061: LD_ADDR_VAR 0 3
33065: PUSH
33066: LD_INT 2
33068: PUSH
33069: LD_INT 3
33071: PUSH
33072: LD_INT 4
33074: PUSH
33075: LD_INT 5
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
33084: GO 33807
33086: LD_INT 14
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33112
33094: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33095: LD_ADDR_VAR 0 3
33099: PUSH
33100: LD_INT 4
33102: PUSH
33103: LD_INT 5
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: ST_TO_ADDR
33110: GO 33807
33112: LD_INT 6
33114: DOUBLE
33115: EQUAL
33116: IFTRUE 33120
33118: GO 33138
33120: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33121: LD_ADDR_VAR 0 3
33125: PUSH
33126: LD_INT 4
33128: PUSH
33129: LD_INT 5
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: ST_TO_ADDR
33136: GO 33807
33138: LD_INT 10
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33146
33144: GO 33164
33146: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33147: LD_ADDR_VAR 0 3
33151: PUSH
33152: LD_INT 4
33154: PUSH
33155: LD_INT 5
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: ST_TO_ADDR
33162: GO 33807
33164: LD_INT 22
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33172
33170: GO 33198
33172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33173: LD_ADDR_VAR 0 3
33177: PUSH
33178: LD_INT 11
33180: PUSH
33181: LD_INT 12
33183: PUSH
33184: LD_INT 13
33186: PUSH
33187: LD_INT 14
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
33196: GO 33807
33198: LD_INT 23
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33206
33204: GO 33232
33206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33207: LD_ADDR_VAR 0 3
33211: PUSH
33212: LD_INT 11
33214: PUSH
33215: LD_INT 12
33217: PUSH
33218: LD_INT 13
33220: PUSH
33221: LD_INT 14
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: ST_TO_ADDR
33230: GO 33807
33232: LD_INT 24
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33240
33238: GO 33266
33240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33241: LD_ADDR_VAR 0 3
33245: PUSH
33246: LD_INT 11
33248: PUSH
33249: LD_INT 12
33251: PUSH
33252: LD_INT 13
33254: PUSH
33255: LD_INT 14
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: ST_TO_ADDR
33264: GO 33807
33266: LD_INT 30
33268: DOUBLE
33269: EQUAL
33270: IFTRUE 33274
33272: GO 33300
33274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33275: LD_ADDR_VAR 0 3
33279: PUSH
33280: LD_INT 11
33282: PUSH
33283: LD_INT 12
33285: PUSH
33286: LD_INT 13
33288: PUSH
33289: LD_INT 14
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: ST_TO_ADDR
33298: GO 33807
33300: LD_INT 25
33302: DOUBLE
33303: EQUAL
33304: IFTRUE 33308
33306: GO 33326
33308: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33309: LD_ADDR_VAR 0 3
33313: PUSH
33314: LD_INT 13
33316: PUSH
33317: LD_INT 14
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: ST_TO_ADDR
33324: GO 33807
33326: LD_INT 27
33328: DOUBLE
33329: EQUAL
33330: IFTRUE 33334
33332: GO 33352
33334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33335: LD_ADDR_VAR 0 3
33339: PUSH
33340: LD_INT 13
33342: PUSH
33343: LD_INT 14
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: ST_TO_ADDR
33350: GO 33807
33352: LD_INT 92
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33386
33360: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: LD_INT 11
33368: PUSH
33369: LD_INT 12
33371: PUSH
33372: LD_INT 13
33374: PUSH
33375: LD_INT 14
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: ST_TO_ADDR
33384: GO 33807
33386: LD_INT 28
33388: DOUBLE
33389: EQUAL
33390: IFTRUE 33394
33392: GO 33412
33394: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33395: LD_ADDR_VAR 0 3
33399: PUSH
33400: LD_INT 13
33402: PUSH
33403: LD_INT 14
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: ST_TO_ADDR
33410: GO 33807
33412: LD_INT 29
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 33438
33420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33421: LD_ADDR_VAR 0 3
33425: PUSH
33426: LD_INT 13
33428: PUSH
33429: LD_INT 14
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: ST_TO_ADDR
33436: GO 33807
33438: LD_INT 31
33440: DOUBLE
33441: EQUAL
33442: IFTRUE 33446
33444: GO 33464
33446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33447: LD_ADDR_VAR 0 3
33451: PUSH
33452: LD_INT 13
33454: PUSH
33455: LD_INT 14
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: ST_TO_ADDR
33462: GO 33807
33464: LD_INT 26
33466: DOUBLE
33467: EQUAL
33468: IFTRUE 33472
33470: GO 33490
33472: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33473: LD_ADDR_VAR 0 3
33477: PUSH
33478: LD_INT 13
33480: PUSH
33481: LD_INT 14
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: ST_TO_ADDR
33488: GO 33807
33490: LD_INT 42
33492: DOUBLE
33493: EQUAL
33494: IFTRUE 33498
33496: GO 33524
33498: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33499: LD_ADDR_VAR 0 3
33503: PUSH
33504: LD_INT 21
33506: PUSH
33507: LD_INT 22
33509: PUSH
33510: LD_INT 23
33512: PUSH
33513: LD_INT 24
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: ST_TO_ADDR
33522: GO 33807
33524: LD_INT 43
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33558
33532: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_INT 21
33540: PUSH
33541: LD_INT 22
33543: PUSH
33544: LD_INT 23
33546: PUSH
33547: LD_INT 24
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: ST_TO_ADDR
33556: GO 33807
33558: LD_INT 44
33560: DOUBLE
33561: EQUAL
33562: IFTRUE 33566
33564: GO 33592
33566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33567: LD_ADDR_VAR 0 3
33571: PUSH
33572: LD_INT 21
33574: PUSH
33575: LD_INT 22
33577: PUSH
33578: LD_INT 23
33580: PUSH
33581: LD_INT 24
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: ST_TO_ADDR
33590: GO 33807
33592: LD_INT 45
33594: DOUBLE
33595: EQUAL
33596: IFTRUE 33600
33598: GO 33626
33600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33601: LD_ADDR_VAR 0 3
33605: PUSH
33606: LD_INT 21
33608: PUSH
33609: LD_INT 22
33611: PUSH
33612: LD_INT 23
33614: PUSH
33615: LD_INT 24
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: ST_TO_ADDR
33624: GO 33807
33626: LD_INT 49
33628: DOUBLE
33629: EQUAL
33630: IFTRUE 33634
33632: GO 33660
33634: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33635: LD_ADDR_VAR 0 3
33639: PUSH
33640: LD_INT 21
33642: PUSH
33643: LD_INT 22
33645: PUSH
33646: LD_INT 23
33648: PUSH
33649: LD_INT 24
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: ST_TO_ADDR
33658: GO 33807
33660: LD_INT 51
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33668
33666: GO 33694
33668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33669: LD_ADDR_VAR 0 3
33673: PUSH
33674: LD_INT 21
33676: PUSH
33677: LD_INT 22
33679: PUSH
33680: LD_INT 23
33682: PUSH
33683: LD_INT 24
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
33692: GO 33807
33694: LD_INT 52
33696: DOUBLE
33697: EQUAL
33698: IFTRUE 33702
33700: GO 33728
33702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: LD_INT 21
33710: PUSH
33711: LD_INT 22
33713: PUSH
33714: LD_INT 23
33716: PUSH
33717: LD_INT 24
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: ST_TO_ADDR
33726: GO 33807
33728: LD_INT 53
33730: DOUBLE
33731: EQUAL
33732: IFTRUE 33736
33734: GO 33754
33736: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: LD_INT 23
33744: PUSH
33745: LD_INT 24
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: ST_TO_ADDR
33752: GO 33807
33754: LD_INT 46
33756: DOUBLE
33757: EQUAL
33758: IFTRUE 33762
33760: GO 33780
33762: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33763: LD_ADDR_VAR 0 3
33767: PUSH
33768: LD_INT 23
33770: PUSH
33771: LD_INT 24
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: ST_TO_ADDR
33778: GO 33807
33780: LD_INT 47
33782: DOUBLE
33783: EQUAL
33784: IFTRUE 33788
33786: GO 33806
33788: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33789: LD_ADDR_VAR 0 3
33793: PUSH
33794: LD_INT 23
33796: PUSH
33797: LD_INT 24
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: ST_TO_ADDR
33804: GO 33807
33806: POP
// result := ( chassis in result ) ;
33807: LD_ADDR_VAR 0 3
33811: PUSH
33812: LD_VAR 0 1
33816: PUSH
33817: LD_VAR 0 3
33821: IN
33822: ST_TO_ADDR
// end ;
33823: LD_VAR 0 3
33827: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33828: LD_INT 0
33830: PPUSH
33831: PPUSH
33832: PPUSH
33833: PPUSH
33834: PPUSH
33835: PPUSH
33836: PPUSH
// result := array ;
33837: LD_ADDR_VAR 0 5
33841: PUSH
33842: LD_VAR 0 1
33846: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33847: LD_VAR 0 1
33851: NOT
33852: PUSH
33853: LD_VAR 0 2
33857: NOT
33858: OR
33859: PUSH
33860: LD_VAR 0 3
33864: NOT
33865: OR
33866: PUSH
33867: LD_VAR 0 2
33871: PUSH
33872: LD_VAR 0 1
33876: GREATER
33877: OR
33878: PUSH
33879: LD_VAR 0 3
33883: PUSH
33884: LD_VAR 0 1
33888: GREATER
33889: OR
33890: IFFALSE 33894
// exit ;
33892: GO 34190
// if direction then
33894: LD_VAR 0 4
33898: IFFALSE 33962
// begin d := 1 ;
33900: LD_ADDR_VAR 0 9
33904: PUSH
33905: LD_INT 1
33907: ST_TO_ADDR
// if i_from > i_to then
33908: LD_VAR 0 2
33912: PUSH
33913: LD_VAR 0 3
33917: GREATER
33918: IFFALSE 33944
// length := ( array - i_from ) + i_to else
33920: LD_ADDR_VAR 0 11
33924: PUSH
33925: LD_VAR 0 1
33929: PUSH
33930: LD_VAR 0 2
33934: MINUS
33935: PUSH
33936: LD_VAR 0 3
33940: PLUS
33941: ST_TO_ADDR
33942: GO 33960
// length := i_to - i_from ;
33944: LD_ADDR_VAR 0 11
33948: PUSH
33949: LD_VAR 0 3
33953: PUSH
33954: LD_VAR 0 2
33958: MINUS
33959: ST_TO_ADDR
// end else
33960: GO 34023
// begin d := - 1 ;
33962: LD_ADDR_VAR 0 9
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: ST_TO_ADDR
// if i_from > i_to then
33971: LD_VAR 0 2
33975: PUSH
33976: LD_VAR 0 3
33980: GREATER
33981: IFFALSE 34001
// length := i_from - i_to else
33983: LD_ADDR_VAR 0 11
33987: PUSH
33988: LD_VAR 0 2
33992: PUSH
33993: LD_VAR 0 3
33997: MINUS
33998: ST_TO_ADDR
33999: GO 34023
// length := ( array - i_to ) + i_from ;
34001: LD_ADDR_VAR 0 11
34005: PUSH
34006: LD_VAR 0 1
34010: PUSH
34011: LD_VAR 0 3
34015: MINUS
34016: PUSH
34017: LD_VAR 0 2
34021: PLUS
34022: ST_TO_ADDR
// end ; if not length then
34023: LD_VAR 0 11
34027: NOT
34028: IFFALSE 34032
// exit ;
34030: GO 34190
// tmp := array ;
34032: LD_ADDR_VAR 0 10
34036: PUSH
34037: LD_VAR 0 1
34041: ST_TO_ADDR
// for i = 1 to length do
34042: LD_ADDR_VAR 0 6
34046: PUSH
34047: DOUBLE
34048: LD_INT 1
34050: DEC
34051: ST_TO_ADDR
34052: LD_VAR 0 11
34056: PUSH
34057: FOR_TO
34058: IFFALSE 34178
// begin for j = 1 to array do
34060: LD_ADDR_VAR 0 7
34064: PUSH
34065: DOUBLE
34066: LD_INT 1
34068: DEC
34069: ST_TO_ADDR
34070: LD_VAR 0 1
34074: PUSH
34075: FOR_TO
34076: IFFALSE 34164
// begin k := j + d ;
34078: LD_ADDR_VAR 0 8
34082: PUSH
34083: LD_VAR 0 7
34087: PUSH
34088: LD_VAR 0 9
34092: PLUS
34093: ST_TO_ADDR
// if k > array then
34094: LD_VAR 0 8
34098: PUSH
34099: LD_VAR 0 1
34103: GREATER
34104: IFFALSE 34114
// k := 1 ;
34106: LD_ADDR_VAR 0 8
34110: PUSH
34111: LD_INT 1
34113: ST_TO_ADDR
// if not k then
34114: LD_VAR 0 8
34118: NOT
34119: IFFALSE 34131
// k := array ;
34121: LD_ADDR_VAR 0 8
34125: PUSH
34126: LD_VAR 0 1
34130: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34131: LD_ADDR_VAR 0 10
34135: PUSH
34136: LD_VAR 0 10
34140: PPUSH
34141: LD_VAR 0 8
34145: PPUSH
34146: LD_VAR 0 1
34150: PUSH
34151: LD_VAR 0 7
34155: ARRAY
34156: PPUSH
34157: CALL_OW 1
34161: ST_TO_ADDR
// end ;
34162: GO 34075
34164: POP
34165: POP
// array := tmp ;
34166: LD_ADDR_VAR 0 1
34170: PUSH
34171: LD_VAR 0 10
34175: ST_TO_ADDR
// end ;
34176: GO 34057
34178: POP
34179: POP
// result := array ;
34180: LD_ADDR_VAR 0 5
34184: PUSH
34185: LD_VAR 0 1
34189: ST_TO_ADDR
// end ;
34190: LD_VAR 0 5
34194: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34195: LD_INT 0
34197: PPUSH
34198: PPUSH
// result := 0 ;
34199: LD_ADDR_VAR 0 3
34203: PUSH
34204: LD_INT 0
34206: ST_TO_ADDR
// if not array or not value in array then
34207: LD_VAR 0 1
34211: NOT
34212: PUSH
34213: LD_VAR 0 2
34217: PUSH
34218: LD_VAR 0 1
34222: IN
34223: NOT
34224: OR
34225: IFFALSE 34229
// exit ;
34227: GO 34283
// for i = 1 to array do
34229: LD_ADDR_VAR 0 4
34233: PUSH
34234: DOUBLE
34235: LD_INT 1
34237: DEC
34238: ST_TO_ADDR
34239: LD_VAR 0 1
34243: PUSH
34244: FOR_TO
34245: IFFALSE 34281
// if value = array [ i ] then
34247: LD_VAR 0 2
34251: PUSH
34252: LD_VAR 0 1
34256: PUSH
34257: LD_VAR 0 4
34261: ARRAY
34262: EQUAL
34263: IFFALSE 34279
// begin result := i ;
34265: LD_ADDR_VAR 0 3
34269: PUSH
34270: LD_VAR 0 4
34274: ST_TO_ADDR
// exit ;
34275: POP
34276: POP
34277: GO 34283
// end ;
34279: GO 34244
34281: POP
34282: POP
// end ;
34283: LD_VAR 0 3
34287: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34288: LD_INT 0
34290: PPUSH
// vc_chassis := chassis ;
34291: LD_ADDR_OWVAR 37
34295: PUSH
34296: LD_VAR 0 1
34300: ST_TO_ADDR
// vc_engine := engine ;
34301: LD_ADDR_OWVAR 39
34305: PUSH
34306: LD_VAR 0 2
34310: ST_TO_ADDR
// vc_control := control ;
34311: LD_ADDR_OWVAR 38
34315: PUSH
34316: LD_VAR 0 3
34320: ST_TO_ADDR
// vc_weapon := weapon ;
34321: LD_ADDR_OWVAR 40
34325: PUSH
34326: LD_VAR 0 4
34330: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34331: LD_ADDR_OWVAR 41
34335: PUSH
34336: LD_VAR 0 5
34340: ST_TO_ADDR
// end ;
34341: LD_VAR 0 6
34345: RET
// export function WantPlant ( unit ) ; var task ; begin
34346: LD_INT 0
34348: PPUSH
34349: PPUSH
// result := false ;
34350: LD_ADDR_VAR 0 2
34354: PUSH
34355: LD_INT 0
34357: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34358: LD_ADDR_VAR 0 3
34362: PUSH
34363: LD_VAR 0 1
34367: PPUSH
34368: CALL_OW 437
34372: ST_TO_ADDR
// if task then
34373: LD_VAR 0 3
34377: IFFALSE 34405
// if task [ 1 ] [ 1 ] = p then
34379: LD_VAR 0 3
34383: PUSH
34384: LD_INT 1
34386: ARRAY
34387: PUSH
34388: LD_INT 1
34390: ARRAY
34391: PUSH
34392: LD_STRING p
34394: EQUAL
34395: IFFALSE 34405
// result := true ;
34397: LD_ADDR_VAR 0 2
34401: PUSH
34402: LD_INT 1
34404: ST_TO_ADDR
// end ;
34405: LD_VAR 0 2
34409: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34410: LD_INT 0
34412: PPUSH
34413: PPUSH
34414: PPUSH
34415: PPUSH
// if pos < 1 then
34416: LD_VAR 0 2
34420: PUSH
34421: LD_INT 1
34423: LESS
34424: IFFALSE 34428
// exit ;
34426: GO 34731
// if pos = 1 then
34428: LD_VAR 0 2
34432: PUSH
34433: LD_INT 1
34435: EQUAL
34436: IFFALSE 34469
// result := Replace ( arr , pos [ 1 ] , value ) else
34438: LD_ADDR_VAR 0 4
34442: PUSH
34443: LD_VAR 0 1
34447: PPUSH
34448: LD_VAR 0 2
34452: PUSH
34453: LD_INT 1
34455: ARRAY
34456: PPUSH
34457: LD_VAR 0 3
34461: PPUSH
34462: CALL_OW 1
34466: ST_TO_ADDR
34467: GO 34731
// begin tmp := arr ;
34469: LD_ADDR_VAR 0 6
34473: PUSH
34474: LD_VAR 0 1
34478: ST_TO_ADDR
// s_arr := [ tmp ] ;
34479: LD_ADDR_VAR 0 7
34483: PUSH
34484: LD_VAR 0 6
34488: PUSH
34489: EMPTY
34490: LIST
34491: ST_TO_ADDR
// for i = 1 to pos - 1 do
34492: LD_ADDR_VAR 0 5
34496: PUSH
34497: DOUBLE
34498: LD_INT 1
34500: DEC
34501: ST_TO_ADDR
34502: LD_VAR 0 2
34506: PUSH
34507: LD_INT 1
34509: MINUS
34510: PUSH
34511: FOR_TO
34512: IFFALSE 34557
// begin tmp := tmp [ pos [ i ] ] ;
34514: LD_ADDR_VAR 0 6
34518: PUSH
34519: LD_VAR 0 6
34523: PUSH
34524: LD_VAR 0 2
34528: PUSH
34529: LD_VAR 0 5
34533: ARRAY
34534: ARRAY
34535: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34536: LD_ADDR_VAR 0 7
34540: PUSH
34541: LD_VAR 0 7
34545: PUSH
34546: LD_VAR 0 6
34550: PUSH
34551: EMPTY
34552: LIST
34553: ADD
34554: ST_TO_ADDR
// end ;
34555: GO 34511
34557: POP
34558: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34559: LD_ADDR_VAR 0 6
34563: PUSH
34564: LD_VAR 0 6
34568: PPUSH
34569: LD_VAR 0 2
34573: PUSH
34574: LD_VAR 0 2
34578: ARRAY
34579: PPUSH
34580: LD_VAR 0 3
34584: PPUSH
34585: CALL_OW 1
34589: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34590: LD_ADDR_VAR 0 7
34594: PUSH
34595: LD_VAR 0 7
34599: PPUSH
34600: LD_VAR 0 7
34604: PPUSH
34605: LD_VAR 0 6
34609: PPUSH
34610: CALL_OW 1
34614: ST_TO_ADDR
// for i = s_arr downto 2 do
34615: LD_ADDR_VAR 0 5
34619: PUSH
34620: DOUBLE
34621: LD_VAR 0 7
34625: INC
34626: ST_TO_ADDR
34627: LD_INT 2
34629: PUSH
34630: FOR_DOWNTO
34631: IFFALSE 34715
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34633: LD_ADDR_VAR 0 6
34637: PUSH
34638: LD_VAR 0 7
34642: PUSH
34643: LD_VAR 0 5
34647: PUSH
34648: LD_INT 1
34650: MINUS
34651: ARRAY
34652: PPUSH
34653: LD_VAR 0 2
34657: PUSH
34658: LD_VAR 0 5
34662: PUSH
34663: LD_INT 1
34665: MINUS
34666: ARRAY
34667: PPUSH
34668: LD_VAR 0 7
34672: PUSH
34673: LD_VAR 0 5
34677: ARRAY
34678: PPUSH
34679: CALL_OW 1
34683: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34684: LD_ADDR_VAR 0 7
34688: PUSH
34689: LD_VAR 0 7
34693: PPUSH
34694: LD_VAR 0 5
34698: PUSH
34699: LD_INT 1
34701: MINUS
34702: PPUSH
34703: LD_VAR 0 6
34707: PPUSH
34708: CALL_OW 1
34712: ST_TO_ADDR
// end ;
34713: GO 34630
34715: POP
34716: POP
// result := s_arr [ 1 ] ;
34717: LD_ADDR_VAR 0 4
34721: PUSH
34722: LD_VAR 0 7
34726: PUSH
34727: LD_INT 1
34729: ARRAY
34730: ST_TO_ADDR
// end ; end ;
34731: LD_VAR 0 4
34735: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34736: LD_INT 0
34738: PPUSH
34739: PPUSH
// if not list then
34740: LD_VAR 0 1
34744: NOT
34745: IFFALSE 34749
// exit ;
34747: GO 34840
// i := list [ pos1 ] ;
34749: LD_ADDR_VAR 0 5
34753: PUSH
34754: LD_VAR 0 1
34758: PUSH
34759: LD_VAR 0 2
34763: ARRAY
34764: ST_TO_ADDR
// if not i then
34765: LD_VAR 0 5
34769: NOT
34770: IFFALSE 34774
// exit ;
34772: GO 34840
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34774: LD_ADDR_VAR 0 1
34778: PUSH
34779: LD_VAR 0 1
34783: PPUSH
34784: LD_VAR 0 2
34788: PPUSH
34789: LD_VAR 0 1
34793: PUSH
34794: LD_VAR 0 3
34798: ARRAY
34799: PPUSH
34800: CALL_OW 1
34804: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34805: LD_ADDR_VAR 0 1
34809: PUSH
34810: LD_VAR 0 1
34814: PPUSH
34815: LD_VAR 0 3
34819: PPUSH
34820: LD_VAR 0 5
34824: PPUSH
34825: CALL_OW 1
34829: ST_TO_ADDR
// result := list ;
34830: LD_ADDR_VAR 0 4
34834: PUSH
34835: LD_VAR 0 1
34839: ST_TO_ADDR
// end ;
34840: LD_VAR 0 4
34844: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34845: LD_INT 0
34847: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34848: LD_ADDR_VAR 0 5
34852: PUSH
34853: LD_VAR 0 1
34857: PPUSH
34858: CALL_OW 250
34862: PPUSH
34863: LD_VAR 0 1
34867: PPUSH
34868: CALL_OW 251
34872: PPUSH
34873: LD_VAR 0 2
34877: PPUSH
34878: LD_VAR 0 3
34882: PPUSH
34883: LD_VAR 0 4
34887: PPUSH
34888: CALL 35266 0 5
34892: ST_TO_ADDR
// end ;
34893: LD_VAR 0 5
34897: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34898: LD_INT 0
34900: PPUSH
34901: PPUSH
34902: PPUSH
34903: PPUSH
// if not list or not unit then
34904: LD_VAR 0 2
34908: NOT
34909: PUSH
34910: LD_VAR 0 1
34914: NOT
34915: OR
34916: IFFALSE 34920
// exit ;
34918: GO 35261
// result := [ ] ;
34920: LD_ADDR_VAR 0 5
34924: PUSH
34925: EMPTY
34926: ST_TO_ADDR
// for i in list do
34927: LD_ADDR_VAR 0 6
34931: PUSH
34932: LD_VAR 0 2
34936: PUSH
34937: FOR_IN
34938: IFFALSE 35156
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34940: LD_ADDR_VAR 0 8
34944: PUSH
34945: LD_VAR 0 1
34949: PPUSH
34950: LD_VAR 0 6
34954: PUSH
34955: LD_INT 1
34957: ARRAY
34958: PPUSH
34959: LD_VAR 0 6
34963: PUSH
34964: LD_INT 2
34966: ARRAY
34967: PPUSH
34968: CALL_OW 297
34972: ST_TO_ADDR
// if not Count ( result ) then
34973: LD_VAR 0 5
34977: PPUSH
34978: CALL 31550 0 1
34982: NOT
34983: IFFALSE 35016
// begin result := Join ( result , [ i , tmp ] ) ;
34985: LD_ADDR_VAR 0 5
34989: PUSH
34990: LD_VAR 0 5
34994: PPUSH
34995: LD_VAR 0 6
34999: PUSH
35000: LD_VAR 0 8
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PPUSH
35009: CALL 67150 0 2
35013: ST_TO_ADDR
// continue ;
35014: GO 34937
// end ; if result [ result ] [ 2 ] <= tmp then
35016: LD_VAR 0 5
35020: PUSH
35021: LD_VAR 0 5
35025: ARRAY
35026: PUSH
35027: LD_INT 2
35029: ARRAY
35030: PUSH
35031: LD_VAR 0 8
35035: LESSEQUAL
35036: IFFALSE 35069
// result := Join ( result , [ i , tmp ] ) else
35038: LD_ADDR_VAR 0 5
35042: PUSH
35043: LD_VAR 0 5
35047: PPUSH
35048: LD_VAR 0 6
35052: PUSH
35053: LD_VAR 0 8
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PPUSH
35062: CALL 67150 0 2
35066: ST_TO_ADDR
35067: GO 35154
// begin for j := 1 to Count ( result ) do
35069: LD_ADDR_VAR 0 7
35073: PUSH
35074: DOUBLE
35075: LD_INT 1
35077: DEC
35078: ST_TO_ADDR
35079: LD_VAR 0 5
35083: PPUSH
35084: CALL 31550 0 1
35088: PUSH
35089: FOR_TO
35090: IFFALSE 35152
// begin if tmp < result [ j ] [ 2 ] then
35092: LD_VAR 0 8
35096: PUSH
35097: LD_VAR 0 5
35101: PUSH
35102: LD_VAR 0 7
35106: ARRAY
35107: PUSH
35108: LD_INT 2
35110: ARRAY
35111: LESS
35112: IFFALSE 35150
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35114: LD_ADDR_VAR 0 5
35118: PUSH
35119: LD_VAR 0 5
35123: PPUSH
35124: LD_VAR 0 7
35128: PPUSH
35129: LD_VAR 0 6
35133: PUSH
35134: LD_VAR 0 8
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PPUSH
35143: CALL_OW 2
35147: ST_TO_ADDR
// break ;
35148: GO 35152
// end ; end ;
35150: GO 35089
35152: POP
35153: POP
// end ; end ;
35154: GO 34937
35156: POP
35157: POP
// if result and not asc then
35158: LD_VAR 0 5
35162: PUSH
35163: LD_VAR 0 3
35167: NOT
35168: AND
35169: IFFALSE 35186
// result := ReverseArray ( result ) ;
35171: LD_ADDR_VAR 0 5
35175: PUSH
35176: LD_VAR 0 5
35180: PPUSH
35181: CALL 62426 0 1
35185: ST_TO_ADDR
// tmp := [ ] ;
35186: LD_ADDR_VAR 0 8
35190: PUSH
35191: EMPTY
35192: ST_TO_ADDR
// if mode then
35193: LD_VAR 0 4
35197: IFFALSE 35261
// begin for i := 1 to result do
35199: LD_ADDR_VAR 0 6
35203: PUSH
35204: DOUBLE
35205: LD_INT 1
35207: DEC
35208: ST_TO_ADDR
35209: LD_VAR 0 5
35213: PUSH
35214: FOR_TO
35215: IFFALSE 35249
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35217: LD_ADDR_VAR 0 8
35221: PUSH
35222: LD_VAR 0 8
35226: PPUSH
35227: LD_VAR 0 5
35231: PUSH
35232: LD_VAR 0 6
35236: ARRAY
35237: PUSH
35238: LD_INT 1
35240: ARRAY
35241: PPUSH
35242: CALL 67150 0 2
35246: ST_TO_ADDR
35247: GO 35214
35249: POP
35250: POP
// result := tmp ;
35251: LD_ADDR_VAR 0 5
35255: PUSH
35256: LD_VAR 0 8
35260: ST_TO_ADDR
// end ; end ;
35261: LD_VAR 0 5
35265: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35266: LD_INT 0
35268: PPUSH
35269: PPUSH
35270: PPUSH
35271: PPUSH
// if not list then
35272: LD_VAR 0 3
35276: NOT
35277: IFFALSE 35281
// exit ;
35279: GO 35669
// result := [ ] ;
35281: LD_ADDR_VAR 0 6
35285: PUSH
35286: EMPTY
35287: ST_TO_ADDR
// for i in list do
35288: LD_ADDR_VAR 0 7
35292: PUSH
35293: LD_VAR 0 3
35297: PUSH
35298: FOR_IN
35299: IFFALSE 35501
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35301: LD_ADDR_VAR 0 9
35305: PUSH
35306: LD_VAR 0 7
35310: PPUSH
35311: LD_VAR 0 1
35315: PPUSH
35316: LD_VAR 0 2
35320: PPUSH
35321: CALL_OW 297
35325: ST_TO_ADDR
// if not result then
35326: LD_VAR 0 6
35330: NOT
35331: IFFALSE 35357
// result := [ [ i , tmp ] ] else
35333: LD_ADDR_VAR 0 6
35337: PUSH
35338: LD_VAR 0 7
35342: PUSH
35343: LD_VAR 0 9
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: EMPTY
35353: LIST
35354: ST_TO_ADDR
35355: GO 35499
// begin if result [ result ] [ 2 ] < tmp then
35357: LD_VAR 0 6
35361: PUSH
35362: LD_VAR 0 6
35366: ARRAY
35367: PUSH
35368: LD_INT 2
35370: ARRAY
35371: PUSH
35372: LD_VAR 0 9
35376: LESS
35377: IFFALSE 35419
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35379: LD_ADDR_VAR 0 6
35383: PUSH
35384: LD_VAR 0 6
35388: PPUSH
35389: LD_VAR 0 6
35393: PUSH
35394: LD_INT 1
35396: PLUS
35397: PPUSH
35398: LD_VAR 0 7
35402: PUSH
35403: LD_VAR 0 9
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PPUSH
35412: CALL_OW 2
35416: ST_TO_ADDR
35417: GO 35499
// for j = 1 to result do
35419: LD_ADDR_VAR 0 8
35423: PUSH
35424: DOUBLE
35425: LD_INT 1
35427: DEC
35428: ST_TO_ADDR
35429: LD_VAR 0 6
35433: PUSH
35434: FOR_TO
35435: IFFALSE 35497
// begin if tmp < result [ j ] [ 2 ] then
35437: LD_VAR 0 9
35441: PUSH
35442: LD_VAR 0 6
35446: PUSH
35447: LD_VAR 0 8
35451: ARRAY
35452: PUSH
35453: LD_INT 2
35455: ARRAY
35456: LESS
35457: IFFALSE 35495
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35459: LD_ADDR_VAR 0 6
35463: PUSH
35464: LD_VAR 0 6
35468: PPUSH
35469: LD_VAR 0 8
35473: PPUSH
35474: LD_VAR 0 7
35478: PUSH
35479: LD_VAR 0 9
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PPUSH
35488: CALL_OW 2
35492: ST_TO_ADDR
// break ;
35493: GO 35497
// end ; end ;
35495: GO 35434
35497: POP
35498: POP
// end ; end ;
35499: GO 35298
35501: POP
35502: POP
// if result and not asc then
35503: LD_VAR 0 6
35507: PUSH
35508: LD_VAR 0 4
35512: NOT
35513: AND
35514: IFFALSE 35589
// begin tmp := result ;
35516: LD_ADDR_VAR 0 9
35520: PUSH
35521: LD_VAR 0 6
35525: ST_TO_ADDR
// for i = tmp downto 1 do
35526: LD_ADDR_VAR 0 7
35530: PUSH
35531: DOUBLE
35532: LD_VAR 0 9
35536: INC
35537: ST_TO_ADDR
35538: LD_INT 1
35540: PUSH
35541: FOR_DOWNTO
35542: IFFALSE 35587
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35544: LD_ADDR_VAR 0 6
35548: PUSH
35549: LD_VAR 0 6
35553: PPUSH
35554: LD_VAR 0 9
35558: PUSH
35559: LD_VAR 0 7
35563: MINUS
35564: PUSH
35565: LD_INT 1
35567: PLUS
35568: PPUSH
35569: LD_VAR 0 9
35573: PUSH
35574: LD_VAR 0 7
35578: ARRAY
35579: PPUSH
35580: CALL_OW 1
35584: ST_TO_ADDR
35585: GO 35541
35587: POP
35588: POP
// end ; tmp := [ ] ;
35589: LD_ADDR_VAR 0 9
35593: PUSH
35594: EMPTY
35595: ST_TO_ADDR
// if mode then
35596: LD_VAR 0 5
35600: IFFALSE 35669
// begin for i = 1 to result do
35602: LD_ADDR_VAR 0 7
35606: PUSH
35607: DOUBLE
35608: LD_INT 1
35610: DEC
35611: ST_TO_ADDR
35612: LD_VAR 0 6
35616: PUSH
35617: FOR_TO
35618: IFFALSE 35657
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35620: LD_ADDR_VAR 0 9
35624: PUSH
35625: LD_VAR 0 9
35629: PPUSH
35630: LD_VAR 0 7
35634: PPUSH
35635: LD_VAR 0 6
35639: PUSH
35640: LD_VAR 0 7
35644: ARRAY
35645: PUSH
35646: LD_INT 1
35648: ARRAY
35649: PPUSH
35650: CALL_OW 1
35654: ST_TO_ADDR
35655: GO 35617
35657: POP
35658: POP
// result := tmp ;
35659: LD_ADDR_VAR 0 6
35663: PUSH
35664: LD_VAR 0 9
35668: ST_TO_ADDR
// end ; end ;
35669: LD_VAR 0 6
35673: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35674: LD_INT 0
35676: PPUSH
35677: PPUSH
35678: PPUSH
35679: PPUSH
35680: PPUSH
35681: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35682: LD_ADDR_VAR 0 5
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: ST_TO_ADDR
// if not x or not y then
35704: LD_VAR 0 2
35708: NOT
35709: PUSH
35710: LD_VAR 0 3
35714: NOT
35715: OR
35716: IFFALSE 35720
// exit ;
35718: GO 37370
// if not range then
35720: LD_VAR 0 4
35724: NOT
35725: IFFALSE 35735
// range := 10 ;
35727: LD_ADDR_VAR 0 4
35731: PUSH
35732: LD_INT 10
35734: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35735: LD_ADDR_VAR 0 8
35739: PUSH
35740: LD_INT 81
35742: PUSH
35743: LD_VAR 0 1
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 92
35754: PUSH
35755: LD_VAR 0 2
35759: PUSH
35760: LD_VAR 0 3
35764: PUSH
35765: LD_VAR 0 4
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 3
35778: PUSH
35779: LD_INT 21
35781: PUSH
35782: LD_INT 3
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: PPUSH
35798: CALL_OW 69
35802: ST_TO_ADDR
// if not tmp then
35803: LD_VAR 0 8
35807: NOT
35808: IFFALSE 35812
// exit ;
35810: GO 37370
// for i in tmp do
35812: LD_ADDR_VAR 0 6
35816: PUSH
35817: LD_VAR 0 8
35821: PUSH
35822: FOR_IN
35823: IFFALSE 37345
// begin points := [ 0 , 0 , 0 ] ;
35825: LD_ADDR_VAR 0 9
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: ST_TO_ADDR
// bpoints := 1 ;
35844: LD_ADDR_VAR 0 10
35848: PUSH
35849: LD_INT 1
35851: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35852: LD_VAR 0 6
35856: PPUSH
35857: CALL_OW 247
35861: PUSH
35862: LD_INT 1
35864: DOUBLE
35865: EQUAL
35866: IFTRUE 35870
35868: GO 36448
35870: POP
// begin if GetClass ( i ) = 1 then
35871: LD_VAR 0 6
35875: PPUSH
35876: CALL_OW 257
35880: PUSH
35881: LD_INT 1
35883: EQUAL
35884: IFFALSE 35905
// points := [ 10 , 5 , 3 ] ;
35886: LD_ADDR_VAR 0 9
35890: PUSH
35891: LD_INT 10
35893: PUSH
35894: LD_INT 5
35896: PUSH
35897: LD_INT 3
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35905: LD_VAR 0 6
35909: PPUSH
35910: CALL_OW 257
35914: PUSH
35915: LD_INT 2
35917: PUSH
35918: LD_INT 3
35920: PUSH
35921: LD_INT 4
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: IN
35929: IFFALSE 35950
// points := [ 3 , 2 , 1 ] ;
35931: LD_ADDR_VAR 0 9
35935: PUSH
35936: LD_INT 3
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35950: LD_VAR 0 6
35954: PPUSH
35955: CALL_OW 257
35959: PUSH
35960: LD_INT 5
35962: EQUAL
35963: IFFALSE 35984
// points := [ 130 , 5 , 2 ] ;
35965: LD_ADDR_VAR 0 9
35969: PUSH
35970: LD_INT 130
35972: PUSH
35973: LD_INT 5
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35984: LD_VAR 0 6
35988: PPUSH
35989: CALL_OW 257
35993: PUSH
35994: LD_INT 8
35996: EQUAL
35997: IFFALSE 36018
// points := [ 35 , 35 , 30 ] ;
35999: LD_ADDR_VAR 0 9
36003: PUSH
36004: LD_INT 35
36006: PUSH
36007: LD_INT 35
36009: PUSH
36010: LD_INT 30
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36018: LD_VAR 0 6
36022: PPUSH
36023: CALL_OW 257
36027: PUSH
36028: LD_INT 9
36030: EQUAL
36031: IFFALSE 36052
// points := [ 20 , 55 , 40 ] ;
36033: LD_ADDR_VAR 0 9
36037: PUSH
36038: LD_INT 20
36040: PUSH
36041: LD_INT 55
36043: PUSH
36044: LD_INT 40
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36052: LD_VAR 0 6
36056: PPUSH
36057: CALL_OW 257
36061: PUSH
36062: LD_INT 12
36064: PUSH
36065: LD_INT 16
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: IN
36072: IFFALSE 36093
// points := [ 5 , 3 , 2 ] ;
36074: LD_ADDR_VAR 0 9
36078: PUSH
36079: LD_INT 5
36081: PUSH
36082: LD_INT 3
36084: PUSH
36085: LD_INT 2
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36093: LD_VAR 0 6
36097: PPUSH
36098: CALL_OW 257
36102: PUSH
36103: LD_INT 17
36105: EQUAL
36106: IFFALSE 36127
// points := [ 100 , 50 , 75 ] ;
36108: LD_ADDR_VAR 0 9
36112: PUSH
36113: LD_INT 100
36115: PUSH
36116: LD_INT 50
36118: PUSH
36119: LD_INT 75
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36127: LD_VAR 0 6
36131: PPUSH
36132: CALL_OW 257
36136: PUSH
36137: LD_INT 15
36139: EQUAL
36140: IFFALSE 36161
// points := [ 10 , 5 , 3 ] ;
36142: LD_ADDR_VAR 0 9
36146: PUSH
36147: LD_INT 10
36149: PUSH
36150: LD_INT 5
36152: PUSH
36153: LD_INT 3
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36161: LD_VAR 0 6
36165: PPUSH
36166: CALL_OW 257
36170: PUSH
36171: LD_INT 14
36173: EQUAL
36174: IFFALSE 36195
// points := [ 10 , 0 , 0 ] ;
36176: LD_ADDR_VAR 0 9
36180: PUSH
36181: LD_INT 10
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36195: LD_VAR 0 6
36199: PPUSH
36200: CALL_OW 257
36204: PUSH
36205: LD_INT 11
36207: EQUAL
36208: IFFALSE 36229
// points := [ 30 , 10 , 5 ] ;
36210: LD_ADDR_VAR 0 9
36214: PUSH
36215: LD_INT 30
36217: PUSH
36218: LD_INT 10
36220: PUSH
36221: LD_INT 5
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36229: LD_VAR 0 1
36233: PPUSH
36234: LD_INT 5
36236: PPUSH
36237: CALL_OW 321
36241: PUSH
36242: LD_INT 2
36244: EQUAL
36245: IFFALSE 36262
// bpoints := bpoints * 1.8 ;
36247: LD_ADDR_VAR 0 10
36251: PUSH
36252: LD_VAR 0 10
36256: PUSH
36257: LD_REAL  1.80000000000000E+0000
36260: MUL
36261: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36262: LD_VAR 0 6
36266: PPUSH
36267: CALL_OW 257
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: LD_INT 2
36277: PUSH
36278: LD_INT 3
36280: PUSH
36281: LD_INT 4
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: IN
36290: PUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: LD_INT 51
36298: PPUSH
36299: CALL_OW 321
36303: PUSH
36304: LD_INT 2
36306: EQUAL
36307: AND
36308: IFFALSE 36325
// bpoints := bpoints * 1.2 ;
36310: LD_ADDR_VAR 0 10
36314: PUSH
36315: LD_VAR 0 10
36319: PUSH
36320: LD_REAL  1.20000000000000E+0000
36323: MUL
36324: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36325: LD_VAR 0 6
36329: PPUSH
36330: CALL_OW 257
36334: PUSH
36335: LD_INT 5
36337: PUSH
36338: LD_INT 7
36340: PUSH
36341: LD_INT 9
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: IN
36349: PUSH
36350: LD_VAR 0 1
36354: PPUSH
36355: LD_INT 52
36357: PPUSH
36358: CALL_OW 321
36362: PUSH
36363: LD_INT 2
36365: EQUAL
36366: AND
36367: IFFALSE 36384
// bpoints := bpoints * 1.5 ;
36369: LD_ADDR_VAR 0 10
36373: PUSH
36374: LD_VAR 0 10
36378: PUSH
36379: LD_REAL  1.50000000000000E+0000
36382: MUL
36383: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36384: LD_VAR 0 1
36388: PPUSH
36389: LD_INT 66
36391: PPUSH
36392: CALL_OW 321
36396: PUSH
36397: LD_INT 2
36399: EQUAL
36400: IFFALSE 36417
// bpoints := bpoints * 1.1 ;
36402: LD_ADDR_VAR 0 10
36406: PUSH
36407: LD_VAR 0 10
36411: PUSH
36412: LD_REAL  1.10000000000000E+0000
36415: MUL
36416: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36417: LD_ADDR_VAR 0 10
36421: PUSH
36422: LD_VAR 0 10
36426: PUSH
36427: LD_VAR 0 6
36431: PPUSH
36432: LD_INT 1
36434: PPUSH
36435: CALL_OW 259
36439: PUSH
36440: LD_REAL  1.15000000000000E+0000
36443: MUL
36444: MUL
36445: ST_TO_ADDR
// end ; unit_vehicle :
36446: GO 37274
36448: LD_INT 2
36450: DOUBLE
36451: EQUAL
36452: IFTRUE 36456
36454: GO 37262
36456: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36457: LD_VAR 0 6
36461: PPUSH
36462: CALL_OW 264
36466: PUSH
36467: LD_INT 2
36469: PUSH
36470: LD_INT 42
36472: PUSH
36473: LD_INT 24
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: IN
36481: IFFALSE 36502
// points := [ 25 , 5 , 3 ] ;
36483: LD_ADDR_VAR 0 9
36487: PUSH
36488: LD_INT 25
36490: PUSH
36491: LD_INT 5
36493: PUSH
36494: LD_INT 3
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36502: LD_VAR 0 6
36506: PPUSH
36507: CALL_OW 264
36511: PUSH
36512: LD_INT 4
36514: PUSH
36515: LD_INT 43
36517: PUSH
36518: LD_INT 25
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: IN
36526: IFFALSE 36547
// points := [ 40 , 15 , 5 ] ;
36528: LD_ADDR_VAR 0 9
36532: PUSH
36533: LD_INT 40
36535: PUSH
36536: LD_INT 15
36538: PUSH
36539: LD_INT 5
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36547: LD_VAR 0 6
36551: PPUSH
36552: CALL_OW 264
36556: PUSH
36557: LD_INT 3
36559: PUSH
36560: LD_INT 23
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: IN
36567: IFFALSE 36588
// points := [ 7 , 25 , 8 ] ;
36569: LD_ADDR_VAR 0 9
36573: PUSH
36574: LD_INT 7
36576: PUSH
36577: LD_INT 25
36579: PUSH
36580: LD_INT 8
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36588: LD_VAR 0 6
36592: PPUSH
36593: CALL_OW 264
36597: PUSH
36598: LD_INT 5
36600: PUSH
36601: LD_INT 27
36603: PUSH
36604: LD_INT 44
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: IN
36612: IFFALSE 36633
// points := [ 14 , 50 , 16 ] ;
36614: LD_ADDR_VAR 0 9
36618: PUSH
36619: LD_INT 14
36621: PUSH
36622: LD_INT 50
36624: PUSH
36625: LD_INT 16
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36633: LD_VAR 0 6
36637: PPUSH
36638: CALL_OW 264
36642: PUSH
36643: LD_INT 6
36645: PUSH
36646: LD_INT 46
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: IN
36653: IFFALSE 36674
// points := [ 32 , 120 , 70 ] ;
36655: LD_ADDR_VAR 0 9
36659: PUSH
36660: LD_INT 32
36662: PUSH
36663: LD_INT 120
36665: PUSH
36666: LD_INT 70
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36674: LD_VAR 0 6
36678: PPUSH
36679: CALL_OW 264
36683: PUSH
36684: LD_INT 7
36686: PUSH
36687: LD_INT 28
36689: PUSH
36690: LD_INT 45
36692: PUSH
36693: LD_INT 92
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: IN
36702: IFFALSE 36723
// points := [ 35 , 20 , 45 ] ;
36704: LD_ADDR_VAR 0 9
36708: PUSH
36709: LD_INT 35
36711: PUSH
36712: LD_INT 20
36714: PUSH
36715: LD_INT 45
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36723: LD_VAR 0 6
36727: PPUSH
36728: CALL_OW 264
36732: PUSH
36733: LD_INT 47
36735: PUSH
36736: EMPTY
36737: LIST
36738: IN
36739: IFFALSE 36760
// points := [ 67 , 45 , 75 ] ;
36741: LD_ADDR_VAR 0 9
36745: PUSH
36746: LD_INT 67
36748: PUSH
36749: LD_INT 45
36751: PUSH
36752: LD_INT 75
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36760: LD_VAR 0 6
36764: PPUSH
36765: CALL_OW 264
36769: PUSH
36770: LD_INT 26
36772: PUSH
36773: EMPTY
36774: LIST
36775: IN
36776: IFFALSE 36797
// points := [ 120 , 30 , 80 ] ;
36778: LD_ADDR_VAR 0 9
36782: PUSH
36783: LD_INT 120
36785: PUSH
36786: LD_INT 30
36788: PUSH
36789: LD_INT 80
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: LIST
36796: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36797: LD_VAR 0 6
36801: PPUSH
36802: CALL_OW 264
36806: PUSH
36807: LD_INT 22
36809: PUSH
36810: EMPTY
36811: LIST
36812: IN
36813: IFFALSE 36834
// points := [ 40 , 1 , 1 ] ;
36815: LD_ADDR_VAR 0 9
36819: PUSH
36820: LD_INT 40
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36834: LD_VAR 0 6
36838: PPUSH
36839: CALL_OW 264
36843: PUSH
36844: LD_INT 29
36846: PUSH
36847: EMPTY
36848: LIST
36849: IN
36850: IFFALSE 36871
// points := [ 70 , 200 , 400 ] ;
36852: LD_ADDR_VAR 0 9
36856: PUSH
36857: LD_INT 70
36859: PUSH
36860: LD_INT 200
36862: PUSH
36863: LD_INT 400
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36871: LD_VAR 0 6
36875: PPUSH
36876: CALL_OW 264
36880: PUSH
36881: LD_INT 14
36883: PUSH
36884: LD_INT 53
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: IN
36891: IFFALSE 36912
// points := [ 40 , 10 , 20 ] ;
36893: LD_ADDR_VAR 0 9
36897: PUSH
36898: LD_INT 40
36900: PUSH
36901: LD_INT 10
36903: PUSH
36904: LD_INT 20
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: LIST
36911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36912: LD_VAR 0 6
36916: PPUSH
36917: CALL_OW 264
36921: PUSH
36922: LD_INT 9
36924: PUSH
36925: EMPTY
36926: LIST
36927: IN
36928: IFFALSE 36949
// points := [ 5 , 70 , 20 ] ;
36930: LD_ADDR_VAR 0 9
36934: PUSH
36935: LD_INT 5
36937: PUSH
36938: LD_INT 70
36940: PUSH
36941: LD_INT 20
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36949: LD_VAR 0 6
36953: PPUSH
36954: CALL_OW 264
36958: PUSH
36959: LD_INT 10
36961: PUSH
36962: EMPTY
36963: LIST
36964: IN
36965: IFFALSE 36986
// points := [ 35 , 110 , 70 ] ;
36967: LD_ADDR_VAR 0 9
36971: PUSH
36972: LD_INT 35
36974: PUSH
36975: LD_INT 110
36977: PUSH
36978: LD_INT 70
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36986: LD_VAR 0 6
36990: PPUSH
36991: CALL_OW 265
36995: PUSH
36996: LD_INT 25
36998: EQUAL
36999: IFFALSE 37020
// points := [ 80 , 65 , 100 ] ;
37001: LD_ADDR_VAR 0 9
37005: PUSH
37006: LD_INT 80
37008: PUSH
37009: LD_INT 65
37011: PUSH
37012: LD_INT 100
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37020: LD_VAR 0 6
37024: PPUSH
37025: CALL_OW 263
37029: PUSH
37030: LD_INT 1
37032: EQUAL
37033: IFFALSE 37068
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37035: LD_ADDR_VAR 0 10
37039: PUSH
37040: LD_VAR 0 10
37044: PUSH
37045: LD_VAR 0 6
37049: PPUSH
37050: CALL_OW 311
37054: PPUSH
37055: LD_INT 3
37057: PPUSH
37058: CALL_OW 259
37062: PUSH
37063: LD_INT 4
37065: MUL
37066: MUL
37067: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37068: LD_VAR 0 6
37072: PPUSH
37073: CALL_OW 263
37077: PUSH
37078: LD_INT 2
37080: EQUAL
37081: IFFALSE 37132
// begin j := IsControledBy ( i ) ;
37083: LD_ADDR_VAR 0 7
37087: PUSH
37088: LD_VAR 0 6
37092: PPUSH
37093: CALL_OW 312
37097: ST_TO_ADDR
// if j then
37098: LD_VAR 0 7
37102: IFFALSE 37132
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37104: LD_ADDR_VAR 0 10
37108: PUSH
37109: LD_VAR 0 10
37113: PUSH
37114: LD_VAR 0 7
37118: PPUSH
37119: LD_INT 3
37121: PPUSH
37122: CALL_OW 259
37126: PUSH
37127: LD_INT 3
37129: MUL
37130: MUL
37131: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37132: LD_VAR 0 6
37136: PPUSH
37137: CALL_OW 264
37141: PUSH
37142: LD_INT 5
37144: PUSH
37145: LD_INT 6
37147: PUSH
37148: LD_INT 46
37150: PUSH
37151: LD_INT 44
37153: PUSH
37154: LD_INT 47
37156: PUSH
37157: LD_INT 45
37159: PUSH
37160: LD_INT 28
37162: PUSH
37163: LD_INT 7
37165: PUSH
37166: LD_INT 27
37168: PUSH
37169: LD_INT 29
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: IN
37184: PUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: LD_INT 52
37192: PPUSH
37193: CALL_OW 321
37197: PUSH
37198: LD_INT 2
37200: EQUAL
37201: AND
37202: IFFALSE 37219
// bpoints := bpoints * 1.2 ;
37204: LD_ADDR_VAR 0 10
37208: PUSH
37209: LD_VAR 0 10
37213: PUSH
37214: LD_REAL  1.20000000000000E+0000
37217: MUL
37218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37219: LD_VAR 0 6
37223: PPUSH
37224: CALL_OW 264
37228: PUSH
37229: LD_INT 6
37231: PUSH
37232: LD_INT 46
37234: PUSH
37235: LD_INT 47
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: IN
37243: IFFALSE 37260
// bpoints := bpoints * 1.2 ;
37245: LD_ADDR_VAR 0 10
37249: PUSH
37250: LD_VAR 0 10
37254: PUSH
37255: LD_REAL  1.20000000000000E+0000
37258: MUL
37259: ST_TO_ADDR
// end ; unit_building :
37260: GO 37274
37262: LD_INT 3
37264: DOUBLE
37265: EQUAL
37266: IFTRUE 37270
37268: GO 37273
37270: POP
// ; end ;
37271: GO 37274
37273: POP
// for j = 1 to 3 do
37274: LD_ADDR_VAR 0 7
37278: PUSH
37279: DOUBLE
37280: LD_INT 1
37282: DEC
37283: ST_TO_ADDR
37284: LD_INT 3
37286: PUSH
37287: FOR_TO
37288: IFFALSE 37341
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37290: LD_ADDR_VAR 0 5
37294: PUSH
37295: LD_VAR 0 5
37299: PPUSH
37300: LD_VAR 0 7
37304: PPUSH
37305: LD_VAR 0 5
37309: PUSH
37310: LD_VAR 0 7
37314: ARRAY
37315: PUSH
37316: LD_VAR 0 9
37320: PUSH
37321: LD_VAR 0 7
37325: ARRAY
37326: PUSH
37327: LD_VAR 0 10
37331: MUL
37332: PLUS
37333: PPUSH
37334: CALL_OW 1
37338: ST_TO_ADDR
37339: GO 37287
37341: POP
37342: POP
// end ;
37343: GO 35822
37345: POP
37346: POP
// result := Replace ( result , 4 , tmp ) ;
37347: LD_ADDR_VAR 0 5
37351: PUSH
37352: LD_VAR 0 5
37356: PPUSH
37357: LD_INT 4
37359: PPUSH
37360: LD_VAR 0 8
37364: PPUSH
37365: CALL_OW 1
37369: ST_TO_ADDR
// end ;
37370: LD_VAR 0 5
37374: RET
// export function DangerAtRange ( unit , range ) ; begin
37375: LD_INT 0
37377: PPUSH
// if not unit then
37378: LD_VAR 0 1
37382: NOT
37383: IFFALSE 37387
// exit ;
37385: GO 37432
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37387: LD_ADDR_VAR 0 3
37391: PUSH
37392: LD_VAR 0 1
37396: PPUSH
37397: CALL_OW 255
37401: PPUSH
37402: LD_VAR 0 1
37406: PPUSH
37407: CALL_OW 250
37411: PPUSH
37412: LD_VAR 0 1
37416: PPUSH
37417: CALL_OW 251
37421: PPUSH
37422: LD_VAR 0 2
37426: PPUSH
37427: CALL 35674 0 4
37431: ST_TO_ADDR
// end ;
37432: LD_VAR 0 3
37436: RET
// export function DangerInArea ( side , area ) ; begin
37437: LD_INT 0
37439: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37440: LD_ADDR_VAR 0 3
37444: PUSH
37445: LD_VAR 0 2
37449: PPUSH
37450: LD_INT 81
37452: PUSH
37453: LD_VAR 0 1
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PPUSH
37462: CALL_OW 70
37466: ST_TO_ADDR
// end ;
37467: LD_VAR 0 3
37471: RET
// export function IsExtension ( b ) ; begin
37472: LD_INT 0
37474: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37475: LD_ADDR_VAR 0 2
37479: PUSH
37480: LD_VAR 0 1
37484: PUSH
37485: LD_INT 23
37487: PUSH
37488: LD_INT 20
37490: PUSH
37491: LD_INT 22
37493: PUSH
37494: LD_INT 17
37496: PUSH
37497: LD_INT 24
37499: PUSH
37500: LD_INT 21
37502: PUSH
37503: LD_INT 19
37505: PUSH
37506: LD_INT 16
37508: PUSH
37509: LD_INT 25
37511: PUSH
37512: LD_INT 18
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: IN
37527: ST_TO_ADDR
// end ;
37528: LD_VAR 0 2
37532: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37533: LD_INT 0
37535: PPUSH
37536: PPUSH
37537: PPUSH
// result := [ ] ;
37538: LD_ADDR_VAR 0 4
37542: PUSH
37543: EMPTY
37544: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37545: LD_ADDR_VAR 0 5
37549: PUSH
37550: LD_VAR 0 2
37554: PPUSH
37555: LD_INT 21
37557: PUSH
37558: LD_INT 3
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PPUSH
37565: CALL_OW 70
37569: ST_TO_ADDR
// if not tmp then
37570: LD_VAR 0 5
37574: NOT
37575: IFFALSE 37579
// exit ;
37577: GO 37643
// if checkLink then
37579: LD_VAR 0 3
37583: IFFALSE 37633
// begin for i in tmp do
37585: LD_ADDR_VAR 0 6
37589: PUSH
37590: LD_VAR 0 5
37594: PUSH
37595: FOR_IN
37596: IFFALSE 37631
// if GetBase ( i ) <> base then
37598: LD_VAR 0 6
37602: PPUSH
37603: CALL_OW 274
37607: PUSH
37608: LD_VAR 0 1
37612: NONEQUAL
37613: IFFALSE 37629
// ComLinkToBase ( base , i ) ;
37615: LD_VAR 0 1
37619: PPUSH
37620: LD_VAR 0 6
37624: PPUSH
37625: CALL_OW 169
37629: GO 37595
37631: POP
37632: POP
// end ; result := tmp ;
37633: LD_ADDR_VAR 0 4
37637: PUSH
37638: LD_VAR 0 5
37642: ST_TO_ADDR
// end ;
37643: LD_VAR 0 4
37647: RET
// export function ComComplete ( units , b ) ; var i ; begin
37648: LD_INT 0
37650: PPUSH
37651: PPUSH
// if not units then
37652: LD_VAR 0 1
37656: NOT
37657: IFFALSE 37661
// exit ;
37659: GO 37751
// for i in units do
37661: LD_ADDR_VAR 0 4
37665: PUSH
37666: LD_VAR 0 1
37670: PUSH
37671: FOR_IN
37672: IFFALSE 37749
// if BuildingStatus ( b ) = bs_build then
37674: LD_VAR 0 2
37678: PPUSH
37679: CALL_OW 461
37683: PUSH
37684: LD_INT 1
37686: EQUAL
37687: IFFALSE 37747
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37689: LD_VAR 0 4
37693: PPUSH
37694: LD_STRING h
37696: PUSH
37697: LD_VAR 0 2
37701: PPUSH
37702: CALL_OW 250
37706: PUSH
37707: LD_VAR 0 2
37711: PPUSH
37712: CALL_OW 251
37716: PUSH
37717: LD_VAR 0 2
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: PUSH
37740: EMPTY
37741: LIST
37742: PPUSH
37743: CALL_OW 446
37747: GO 37671
37749: POP
37750: POP
// end ;
37751: LD_VAR 0 3
37755: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37756: LD_INT 0
37758: PPUSH
37759: PPUSH
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37764: LD_VAR 0 1
37768: NOT
37769: PUSH
37770: LD_VAR 0 1
37774: PPUSH
37775: CALL_OW 263
37779: PUSH
37780: LD_INT 2
37782: NONEQUAL
37783: OR
37784: IFFALSE 37788
// exit ;
37786: GO 38104
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37788: LD_ADDR_VAR 0 6
37792: PUSH
37793: LD_INT 22
37795: PUSH
37796: LD_VAR 0 1
37800: PPUSH
37801: CALL_OW 255
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: LD_INT 30
37815: PUSH
37816: LD_INT 36
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 34
37825: PUSH
37826: LD_INT 31
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: LIST
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PPUSH
37842: CALL_OW 69
37846: ST_TO_ADDR
// if not tmp then
37847: LD_VAR 0 6
37851: NOT
37852: IFFALSE 37856
// exit ;
37854: GO 38104
// result := [ ] ;
37856: LD_ADDR_VAR 0 2
37860: PUSH
37861: EMPTY
37862: ST_TO_ADDR
// for i in tmp do
37863: LD_ADDR_VAR 0 3
37867: PUSH
37868: LD_VAR 0 6
37872: PUSH
37873: FOR_IN
37874: IFFALSE 37945
// begin t := UnitsInside ( i ) ;
37876: LD_ADDR_VAR 0 4
37880: PUSH
37881: LD_VAR 0 3
37885: PPUSH
37886: CALL_OW 313
37890: ST_TO_ADDR
// if t then
37891: LD_VAR 0 4
37895: IFFALSE 37943
// for j in t do
37897: LD_ADDR_VAR 0 7
37901: PUSH
37902: LD_VAR 0 4
37906: PUSH
37907: FOR_IN
37908: IFFALSE 37941
// result := Replace ( result , result + 1 , j ) ;
37910: LD_ADDR_VAR 0 2
37914: PUSH
37915: LD_VAR 0 2
37919: PPUSH
37920: LD_VAR 0 2
37924: PUSH
37925: LD_INT 1
37927: PLUS
37928: PPUSH
37929: LD_VAR 0 7
37933: PPUSH
37934: CALL_OW 1
37938: ST_TO_ADDR
37939: GO 37907
37941: POP
37942: POP
// end ;
37943: GO 37873
37945: POP
37946: POP
// if not result then
37947: LD_VAR 0 2
37951: NOT
37952: IFFALSE 37956
// exit ;
37954: GO 38104
// mech := result [ 1 ] ;
37956: LD_ADDR_VAR 0 5
37960: PUSH
37961: LD_VAR 0 2
37965: PUSH
37966: LD_INT 1
37968: ARRAY
37969: ST_TO_ADDR
// if result > 1 then
37970: LD_VAR 0 2
37974: PUSH
37975: LD_INT 1
37977: GREATER
37978: IFFALSE 38090
// begin for i = 2 to result do
37980: LD_ADDR_VAR 0 3
37984: PUSH
37985: DOUBLE
37986: LD_INT 2
37988: DEC
37989: ST_TO_ADDR
37990: LD_VAR 0 2
37994: PUSH
37995: FOR_TO
37996: IFFALSE 38088
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37998: LD_ADDR_VAR 0 4
38002: PUSH
38003: LD_VAR 0 2
38007: PUSH
38008: LD_VAR 0 3
38012: ARRAY
38013: PPUSH
38014: LD_INT 3
38016: PPUSH
38017: CALL_OW 259
38021: PUSH
38022: LD_VAR 0 2
38026: PUSH
38027: LD_VAR 0 3
38031: ARRAY
38032: PPUSH
38033: CALL_OW 432
38037: MINUS
38038: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38039: LD_VAR 0 4
38043: PUSH
38044: LD_VAR 0 5
38048: PPUSH
38049: LD_INT 3
38051: PPUSH
38052: CALL_OW 259
38056: PUSH
38057: LD_VAR 0 5
38061: PPUSH
38062: CALL_OW 432
38066: MINUS
38067: GREATEREQUAL
38068: IFFALSE 38086
// mech := result [ i ] ;
38070: LD_ADDR_VAR 0 5
38074: PUSH
38075: LD_VAR 0 2
38079: PUSH
38080: LD_VAR 0 3
38084: ARRAY
38085: ST_TO_ADDR
// end ;
38086: GO 37995
38088: POP
38089: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38090: LD_VAR 0 1
38094: PPUSH
38095: LD_VAR 0 5
38099: PPUSH
38100: CALL_OW 135
// end ;
38104: LD_VAR 0 2
38108: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38109: LD_INT 0
38111: PPUSH
38112: PPUSH
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
38118: PPUSH
38119: PPUSH
38120: PPUSH
38121: PPUSH
38122: PPUSH
38123: PPUSH
// result := [ ] ;
38124: LD_ADDR_VAR 0 7
38128: PUSH
38129: EMPTY
38130: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38131: LD_VAR 0 1
38135: PPUSH
38136: CALL_OW 266
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: IN
38151: NOT
38152: IFFALSE 38156
// exit ;
38154: GO 39790
// if name then
38156: LD_VAR 0 3
38160: IFFALSE 38176
// SetBName ( base_dep , name ) ;
38162: LD_VAR 0 1
38166: PPUSH
38167: LD_VAR 0 3
38171: PPUSH
38172: CALL_OW 500
// base := GetBase ( base_dep ) ;
38176: LD_ADDR_VAR 0 15
38180: PUSH
38181: LD_VAR 0 1
38185: PPUSH
38186: CALL_OW 274
38190: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38191: LD_ADDR_VAR 0 16
38195: PUSH
38196: LD_VAR 0 1
38200: PPUSH
38201: CALL_OW 255
38205: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38206: LD_ADDR_VAR 0 17
38210: PUSH
38211: LD_VAR 0 1
38215: PPUSH
38216: CALL_OW 248
38220: ST_TO_ADDR
// if sources then
38221: LD_VAR 0 5
38225: IFFALSE 38272
// for i = 1 to 3 do
38227: LD_ADDR_VAR 0 8
38231: PUSH
38232: DOUBLE
38233: LD_INT 1
38235: DEC
38236: ST_TO_ADDR
38237: LD_INT 3
38239: PUSH
38240: FOR_TO
38241: IFFALSE 38270
// AddResourceType ( base , i , sources [ i ] ) ;
38243: LD_VAR 0 15
38247: PPUSH
38248: LD_VAR 0 8
38252: PPUSH
38253: LD_VAR 0 5
38257: PUSH
38258: LD_VAR 0 8
38262: ARRAY
38263: PPUSH
38264: CALL_OW 276
38268: GO 38240
38270: POP
38271: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38272: LD_ADDR_VAR 0 18
38276: PUSH
38277: LD_VAR 0 15
38281: PPUSH
38282: LD_VAR 0 2
38286: PPUSH
38287: LD_INT 1
38289: PPUSH
38290: CALL 37533 0 3
38294: ST_TO_ADDR
// InitHc ;
38295: CALL_OW 19
// InitUc ;
38299: CALL_OW 18
// uc_side := side ;
38303: LD_ADDR_OWVAR 20
38307: PUSH
38308: LD_VAR 0 16
38312: ST_TO_ADDR
// uc_nation := nation ;
38313: LD_ADDR_OWVAR 21
38317: PUSH
38318: LD_VAR 0 17
38322: ST_TO_ADDR
// if buildings then
38323: LD_VAR 0 18
38327: IFFALSE 39649
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38329: LD_ADDR_VAR 0 19
38333: PUSH
38334: LD_VAR 0 18
38338: PPUSH
38339: LD_INT 2
38341: PUSH
38342: LD_INT 30
38344: PUSH
38345: LD_INT 29
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 30
38354: PUSH
38355: LD_INT 30
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: PPUSH
38367: CALL_OW 72
38371: ST_TO_ADDR
// if tmp then
38372: LD_VAR 0 19
38376: IFFALSE 38424
// for i in tmp do
38378: LD_ADDR_VAR 0 8
38382: PUSH
38383: LD_VAR 0 19
38387: PUSH
38388: FOR_IN
38389: IFFALSE 38422
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38391: LD_VAR 0 8
38395: PPUSH
38396: CALL_OW 250
38400: PPUSH
38401: LD_VAR 0 8
38405: PPUSH
38406: CALL_OW 251
38410: PPUSH
38411: LD_VAR 0 16
38415: PPUSH
38416: CALL_OW 441
38420: GO 38388
38422: POP
38423: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38424: LD_VAR 0 18
38428: PPUSH
38429: LD_INT 2
38431: PUSH
38432: LD_INT 30
38434: PUSH
38435: LD_INT 32
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 30
38444: PUSH
38445: LD_INT 33
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: PPUSH
38457: CALL_OW 72
38461: IFFALSE 38549
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38463: LD_ADDR_VAR 0 8
38467: PUSH
38468: LD_VAR 0 18
38472: PPUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 30
38478: PUSH
38479: LD_INT 32
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 30
38488: PUSH
38489: LD_INT 33
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: PPUSH
38501: CALL_OW 72
38505: PUSH
38506: FOR_IN
38507: IFFALSE 38547
// begin if not GetBWeapon ( i ) then
38509: LD_VAR 0 8
38513: PPUSH
38514: CALL_OW 269
38518: NOT
38519: IFFALSE 38545
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38521: LD_VAR 0 8
38525: PPUSH
38526: LD_VAR 0 8
38530: PPUSH
38531: LD_VAR 0 2
38535: PPUSH
38536: CALL 39795 0 2
38540: PPUSH
38541: CALL_OW 431
// end ;
38545: GO 38506
38547: POP
38548: POP
// end ; for i = 1 to personel do
38549: LD_ADDR_VAR 0 8
38553: PUSH
38554: DOUBLE
38555: LD_INT 1
38557: DEC
38558: ST_TO_ADDR
38559: LD_VAR 0 6
38563: PUSH
38564: FOR_TO
38565: IFFALSE 39629
// begin if i > 4 then
38567: LD_VAR 0 8
38571: PUSH
38572: LD_INT 4
38574: GREATER
38575: IFFALSE 38579
// break ;
38577: GO 39629
// case i of 1 :
38579: LD_VAR 0 8
38583: PUSH
38584: LD_INT 1
38586: DOUBLE
38587: EQUAL
38588: IFTRUE 38592
38590: GO 38672
38592: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38593: LD_ADDR_VAR 0 12
38597: PUSH
38598: LD_VAR 0 18
38602: PPUSH
38603: LD_INT 22
38605: PUSH
38606: LD_VAR 0 16
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 58
38617: PUSH
38618: EMPTY
38619: LIST
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: LD_INT 30
38626: PUSH
38627: LD_INT 32
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 30
38636: PUSH
38637: LD_INT 4
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 30
38646: PUSH
38647: LD_INT 5
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: PPUSH
38665: CALL_OW 72
38669: ST_TO_ADDR
38670: GO 38894
38672: LD_INT 2
38674: DOUBLE
38675: EQUAL
38676: IFTRUE 38680
38678: GO 38742
38680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38681: LD_ADDR_VAR 0 12
38685: PUSH
38686: LD_VAR 0 18
38690: PPUSH
38691: LD_INT 22
38693: PUSH
38694: LD_VAR 0 16
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: LD_INT 30
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 30
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: LIST
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PPUSH
38735: CALL_OW 72
38739: ST_TO_ADDR
38740: GO 38894
38742: LD_INT 3
38744: DOUBLE
38745: EQUAL
38746: IFTRUE 38750
38748: GO 38812
38750: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38751: LD_ADDR_VAR 0 12
38755: PUSH
38756: LD_VAR 0 18
38760: PPUSH
38761: LD_INT 22
38763: PUSH
38764: LD_VAR 0 16
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: LD_INT 30
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 30
38788: PUSH
38789: LD_INT 3
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: LIST
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PPUSH
38805: CALL_OW 72
38809: ST_TO_ADDR
38810: GO 38894
38812: LD_INT 4
38814: DOUBLE
38815: EQUAL
38816: IFTRUE 38820
38818: GO 38893
38820: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38821: LD_ADDR_VAR 0 12
38825: PUSH
38826: LD_VAR 0 18
38830: PPUSH
38831: LD_INT 22
38833: PUSH
38834: LD_VAR 0 16
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 30
38848: PUSH
38849: LD_INT 6
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 30
38858: PUSH
38859: LD_INT 7
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 30
38868: PUSH
38869: LD_INT 8
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PPUSH
38886: CALL_OW 72
38890: ST_TO_ADDR
38891: GO 38894
38893: POP
// if i = 1 then
38894: LD_VAR 0 8
38898: PUSH
38899: LD_INT 1
38901: EQUAL
38902: IFFALSE 39013
// begin tmp := [ ] ;
38904: LD_ADDR_VAR 0 19
38908: PUSH
38909: EMPTY
38910: ST_TO_ADDR
// for j in f do
38911: LD_ADDR_VAR 0 9
38915: PUSH
38916: LD_VAR 0 12
38920: PUSH
38921: FOR_IN
38922: IFFALSE 38995
// if GetBType ( j ) = b_bunker then
38924: LD_VAR 0 9
38928: PPUSH
38929: CALL_OW 266
38933: PUSH
38934: LD_INT 32
38936: EQUAL
38937: IFFALSE 38964
// tmp := Insert ( tmp , 1 , j ) else
38939: LD_ADDR_VAR 0 19
38943: PUSH
38944: LD_VAR 0 19
38948: PPUSH
38949: LD_INT 1
38951: PPUSH
38952: LD_VAR 0 9
38956: PPUSH
38957: CALL_OW 2
38961: ST_TO_ADDR
38962: GO 38993
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38964: LD_ADDR_VAR 0 19
38968: PUSH
38969: LD_VAR 0 19
38973: PPUSH
38974: LD_VAR 0 19
38978: PUSH
38979: LD_INT 1
38981: PLUS
38982: PPUSH
38983: LD_VAR 0 9
38987: PPUSH
38988: CALL_OW 2
38992: ST_TO_ADDR
38993: GO 38921
38995: POP
38996: POP
// if tmp then
38997: LD_VAR 0 19
39001: IFFALSE 39013
// f := tmp ;
39003: LD_ADDR_VAR 0 12
39007: PUSH
39008: LD_VAR 0 19
39012: ST_TO_ADDR
// end ; x := personel [ i ] ;
39013: LD_ADDR_VAR 0 13
39017: PUSH
39018: LD_VAR 0 6
39022: PUSH
39023: LD_VAR 0 8
39027: ARRAY
39028: ST_TO_ADDR
// if x = - 1 then
39029: LD_VAR 0 13
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: EQUAL
39038: IFFALSE 39247
// begin for j in f do
39040: LD_ADDR_VAR 0 9
39044: PUSH
39045: LD_VAR 0 12
39049: PUSH
39050: FOR_IN
39051: IFFALSE 39243
// repeat InitHc ;
39053: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39057: LD_VAR 0 9
39061: PPUSH
39062: CALL_OW 266
39066: PUSH
39067: LD_INT 5
39069: EQUAL
39070: IFFALSE 39140
// begin if UnitsInside ( j ) < 3 then
39072: LD_VAR 0 9
39076: PPUSH
39077: CALL_OW 313
39081: PUSH
39082: LD_INT 3
39084: LESS
39085: IFFALSE 39121
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39087: LD_INT 0
39089: PPUSH
39090: LD_INT 5
39092: PUSH
39093: LD_INT 8
39095: PUSH
39096: LD_INT 9
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: LIST
39103: PUSH
39104: LD_VAR 0 17
39108: ARRAY
39109: PPUSH
39110: LD_VAR 0 4
39114: PPUSH
39115: CALL_OW 380
39119: GO 39138
// PrepareHuman ( false , i , skill ) ;
39121: LD_INT 0
39123: PPUSH
39124: LD_VAR 0 8
39128: PPUSH
39129: LD_VAR 0 4
39133: PPUSH
39134: CALL_OW 380
// end else
39138: GO 39157
// PrepareHuman ( false , i , skill ) ;
39140: LD_INT 0
39142: PPUSH
39143: LD_VAR 0 8
39147: PPUSH
39148: LD_VAR 0 4
39152: PPUSH
39153: CALL_OW 380
// un := CreateHuman ;
39157: LD_ADDR_VAR 0 14
39161: PUSH
39162: CALL_OW 44
39166: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39167: LD_ADDR_VAR 0 7
39171: PUSH
39172: LD_VAR 0 7
39176: PPUSH
39177: LD_INT 1
39179: PPUSH
39180: LD_VAR 0 14
39184: PPUSH
39185: CALL_OW 2
39189: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39190: LD_VAR 0 14
39194: PPUSH
39195: LD_VAR 0 9
39199: PPUSH
39200: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39204: LD_VAR 0 9
39208: PPUSH
39209: CALL_OW 313
39213: PUSH
39214: LD_INT 6
39216: EQUAL
39217: PUSH
39218: LD_VAR 0 9
39222: PPUSH
39223: CALL_OW 266
39227: PUSH
39228: LD_INT 32
39230: PUSH
39231: LD_INT 31
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: IN
39238: OR
39239: IFFALSE 39053
39241: GO 39050
39243: POP
39244: POP
// end else
39245: GO 39627
// for j = 1 to x do
39247: LD_ADDR_VAR 0 9
39251: PUSH
39252: DOUBLE
39253: LD_INT 1
39255: DEC
39256: ST_TO_ADDR
39257: LD_VAR 0 13
39261: PUSH
39262: FOR_TO
39263: IFFALSE 39625
// begin InitHc ;
39265: CALL_OW 19
// if not f then
39269: LD_VAR 0 12
39273: NOT
39274: IFFALSE 39363
// begin PrepareHuman ( false , i , skill ) ;
39276: LD_INT 0
39278: PPUSH
39279: LD_VAR 0 8
39283: PPUSH
39284: LD_VAR 0 4
39288: PPUSH
39289: CALL_OW 380
// un := CreateHuman ;
39293: LD_ADDR_VAR 0 14
39297: PUSH
39298: CALL_OW 44
39302: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39303: LD_ADDR_VAR 0 7
39307: PUSH
39308: LD_VAR 0 7
39312: PPUSH
39313: LD_INT 1
39315: PPUSH
39316: LD_VAR 0 14
39320: PPUSH
39321: CALL_OW 2
39325: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39326: LD_VAR 0 14
39330: PPUSH
39331: LD_VAR 0 1
39335: PPUSH
39336: CALL_OW 250
39340: PPUSH
39341: LD_VAR 0 1
39345: PPUSH
39346: CALL_OW 251
39350: PPUSH
39351: LD_INT 10
39353: PPUSH
39354: LD_INT 0
39356: PPUSH
39357: CALL_OW 50
// continue ;
39361: GO 39262
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39363: LD_VAR 0 12
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: PPUSH
39372: CALL_OW 313
39376: PUSH
39377: LD_VAR 0 12
39381: PUSH
39382: LD_INT 1
39384: ARRAY
39385: PPUSH
39386: CALL_OW 266
39390: PUSH
39391: LD_INT 32
39393: PUSH
39394: LD_INT 31
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: IN
39401: AND
39402: PUSH
39403: LD_VAR 0 12
39407: PUSH
39408: LD_INT 1
39410: ARRAY
39411: PPUSH
39412: CALL_OW 313
39416: PUSH
39417: LD_INT 6
39419: EQUAL
39420: OR
39421: IFFALSE 39441
// f := Delete ( f , 1 ) ;
39423: LD_ADDR_VAR 0 12
39427: PUSH
39428: LD_VAR 0 12
39432: PPUSH
39433: LD_INT 1
39435: PPUSH
39436: CALL_OW 3
39440: ST_TO_ADDR
// if not f then
39441: LD_VAR 0 12
39445: NOT
39446: IFFALSE 39464
// begin x := x + 2 ;
39448: LD_ADDR_VAR 0 13
39452: PUSH
39453: LD_VAR 0 13
39457: PUSH
39458: LD_INT 2
39460: PLUS
39461: ST_TO_ADDR
// continue ;
39462: GO 39262
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39464: LD_VAR 0 12
39468: PUSH
39469: LD_INT 1
39471: ARRAY
39472: PPUSH
39473: CALL_OW 266
39477: PUSH
39478: LD_INT 5
39480: EQUAL
39481: IFFALSE 39555
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39483: LD_VAR 0 12
39487: PUSH
39488: LD_INT 1
39490: ARRAY
39491: PPUSH
39492: CALL_OW 313
39496: PUSH
39497: LD_INT 3
39499: LESS
39500: IFFALSE 39536
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39502: LD_INT 0
39504: PPUSH
39505: LD_INT 5
39507: PUSH
39508: LD_INT 8
39510: PUSH
39511: LD_INT 9
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: LIST
39518: PUSH
39519: LD_VAR 0 17
39523: ARRAY
39524: PPUSH
39525: LD_VAR 0 4
39529: PPUSH
39530: CALL_OW 380
39534: GO 39553
// PrepareHuman ( false , i , skill ) ;
39536: LD_INT 0
39538: PPUSH
39539: LD_VAR 0 8
39543: PPUSH
39544: LD_VAR 0 4
39548: PPUSH
39549: CALL_OW 380
// end else
39553: GO 39572
// PrepareHuman ( false , i , skill ) ;
39555: LD_INT 0
39557: PPUSH
39558: LD_VAR 0 8
39562: PPUSH
39563: LD_VAR 0 4
39567: PPUSH
39568: CALL_OW 380
// un := CreateHuman ;
39572: LD_ADDR_VAR 0 14
39576: PUSH
39577: CALL_OW 44
39581: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39582: LD_ADDR_VAR 0 7
39586: PUSH
39587: LD_VAR 0 7
39591: PPUSH
39592: LD_INT 1
39594: PPUSH
39595: LD_VAR 0 14
39599: PPUSH
39600: CALL_OW 2
39604: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39605: LD_VAR 0 14
39609: PPUSH
39610: LD_VAR 0 12
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: PPUSH
39619: CALL_OW 52
// end ;
39623: GO 39262
39625: POP
39626: POP
// end ;
39627: GO 38564
39629: POP
39630: POP
// result := result ^ buildings ;
39631: LD_ADDR_VAR 0 7
39635: PUSH
39636: LD_VAR 0 7
39640: PUSH
39641: LD_VAR 0 18
39645: ADD
39646: ST_TO_ADDR
// end else
39647: GO 39790
// begin for i = 1 to personel do
39649: LD_ADDR_VAR 0 8
39653: PUSH
39654: DOUBLE
39655: LD_INT 1
39657: DEC
39658: ST_TO_ADDR
39659: LD_VAR 0 6
39663: PUSH
39664: FOR_TO
39665: IFFALSE 39788
// begin if i > 4 then
39667: LD_VAR 0 8
39671: PUSH
39672: LD_INT 4
39674: GREATER
39675: IFFALSE 39679
// break ;
39677: GO 39788
// x := personel [ i ] ;
39679: LD_ADDR_VAR 0 13
39683: PUSH
39684: LD_VAR 0 6
39688: PUSH
39689: LD_VAR 0 8
39693: ARRAY
39694: ST_TO_ADDR
// if x = - 1 then
39695: LD_VAR 0 13
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: EQUAL
39704: IFFALSE 39708
// continue ;
39706: GO 39664
// PrepareHuman ( false , i , skill ) ;
39708: LD_INT 0
39710: PPUSH
39711: LD_VAR 0 8
39715: PPUSH
39716: LD_VAR 0 4
39720: PPUSH
39721: CALL_OW 380
// un := CreateHuman ;
39725: LD_ADDR_VAR 0 14
39729: PUSH
39730: CALL_OW 44
39734: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39735: LD_VAR 0 14
39739: PPUSH
39740: LD_VAR 0 1
39744: PPUSH
39745: CALL_OW 250
39749: PPUSH
39750: LD_VAR 0 1
39754: PPUSH
39755: CALL_OW 251
39759: PPUSH
39760: LD_INT 10
39762: PPUSH
39763: LD_INT 0
39765: PPUSH
39766: CALL_OW 50
// result := result ^ un ;
39770: LD_ADDR_VAR 0 7
39774: PUSH
39775: LD_VAR 0 7
39779: PUSH
39780: LD_VAR 0 14
39784: ADD
39785: ST_TO_ADDR
// end ;
39786: GO 39664
39788: POP
39789: POP
// end ; end ;
39790: LD_VAR 0 7
39794: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39795: LD_INT 0
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
// result := false ;
39813: LD_ADDR_VAR 0 3
39817: PUSH
39818: LD_INT 0
39820: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39821: LD_VAR 0 1
39825: NOT
39826: PUSH
39827: LD_VAR 0 1
39831: PPUSH
39832: CALL_OW 266
39836: PUSH
39837: LD_INT 32
39839: PUSH
39840: LD_INT 33
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: IN
39847: NOT
39848: OR
39849: IFFALSE 39853
// exit ;
39851: GO 40962
// nat := GetNation ( tower ) ;
39853: LD_ADDR_VAR 0 12
39857: PUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 248
39867: ST_TO_ADDR
// side := GetSide ( tower ) ;
39868: LD_ADDR_VAR 0 16
39872: PUSH
39873: LD_VAR 0 1
39877: PPUSH
39878: CALL_OW 255
39882: ST_TO_ADDR
// x := GetX ( tower ) ;
39883: LD_ADDR_VAR 0 10
39887: PUSH
39888: LD_VAR 0 1
39892: PPUSH
39893: CALL_OW 250
39897: ST_TO_ADDR
// y := GetY ( tower ) ;
39898: LD_ADDR_VAR 0 11
39902: PUSH
39903: LD_VAR 0 1
39907: PPUSH
39908: CALL_OW 251
39912: ST_TO_ADDR
// if not x or not y then
39913: LD_VAR 0 10
39917: NOT
39918: PUSH
39919: LD_VAR 0 11
39923: NOT
39924: OR
39925: IFFALSE 39929
// exit ;
39927: GO 40962
// weapon := 0 ;
39929: LD_ADDR_VAR 0 18
39933: PUSH
39934: LD_INT 0
39936: ST_TO_ADDR
// fac_list := [ ] ;
39937: LD_ADDR_VAR 0 17
39941: PUSH
39942: EMPTY
39943: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39944: LD_ADDR_VAR 0 6
39948: PUSH
39949: LD_VAR 0 1
39953: PPUSH
39954: CALL_OW 274
39958: PPUSH
39959: LD_VAR 0 2
39963: PPUSH
39964: LD_INT 0
39966: PPUSH
39967: CALL 37533 0 3
39971: PPUSH
39972: LD_INT 30
39974: PUSH
39975: LD_INT 3
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PPUSH
39982: CALL_OW 72
39986: ST_TO_ADDR
// if not factories then
39987: LD_VAR 0 6
39991: NOT
39992: IFFALSE 39996
// exit ;
39994: GO 40962
// for i in factories do
39996: LD_ADDR_VAR 0 8
40000: PUSH
40001: LD_VAR 0 6
40005: PUSH
40006: FOR_IN
40007: IFFALSE 40032
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40009: LD_ADDR_VAR 0 17
40013: PUSH
40014: LD_VAR 0 17
40018: PUSH
40019: LD_VAR 0 8
40023: PPUSH
40024: CALL_OW 478
40028: UNION
40029: ST_TO_ADDR
40030: GO 40006
40032: POP
40033: POP
// if not fac_list then
40034: LD_VAR 0 17
40038: NOT
40039: IFFALSE 40043
// exit ;
40041: GO 40962
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40043: LD_ADDR_VAR 0 5
40047: PUSH
40048: LD_INT 4
40050: PUSH
40051: LD_INT 5
40053: PUSH
40054: LD_INT 9
40056: PUSH
40057: LD_INT 10
40059: PUSH
40060: LD_INT 6
40062: PUSH
40063: LD_INT 7
40065: PUSH
40066: LD_INT 11
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 27
40080: PUSH
40081: LD_INT 28
40083: PUSH
40084: LD_INT 26
40086: PUSH
40087: LD_INT 30
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 43
40098: PUSH
40099: LD_INT 44
40101: PUSH
40102: LD_INT 46
40104: PUSH
40105: LD_INT 45
40107: PUSH
40108: LD_INT 47
40110: PUSH
40111: LD_INT 49
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: PUSH
40127: LD_VAR 0 12
40131: ARRAY
40132: ST_TO_ADDR
// list := list isect fac_list ;
40133: LD_ADDR_VAR 0 5
40137: PUSH
40138: LD_VAR 0 5
40142: PUSH
40143: LD_VAR 0 17
40147: ISECT
40148: ST_TO_ADDR
// if not list then
40149: LD_VAR 0 5
40153: NOT
40154: IFFALSE 40158
// exit ;
40156: GO 40962
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40158: LD_VAR 0 12
40162: PUSH
40163: LD_INT 3
40165: EQUAL
40166: PUSH
40167: LD_INT 49
40169: PUSH
40170: LD_VAR 0 5
40174: IN
40175: AND
40176: PUSH
40177: LD_INT 31
40179: PPUSH
40180: LD_VAR 0 16
40184: PPUSH
40185: CALL_OW 321
40189: PUSH
40190: LD_INT 2
40192: EQUAL
40193: AND
40194: IFFALSE 40254
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40196: LD_INT 22
40198: PUSH
40199: LD_VAR 0 16
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 35
40210: PUSH
40211: LD_INT 49
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 91
40220: PUSH
40221: LD_VAR 0 1
40225: PUSH
40226: LD_INT 10
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: PPUSH
40239: CALL_OW 69
40243: NOT
40244: IFFALSE 40254
// weapon := ru_time_lapser ;
40246: LD_ADDR_VAR 0 18
40250: PUSH
40251: LD_INT 49
40253: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40254: LD_VAR 0 12
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: IN
40269: PUSH
40270: LD_INT 11
40272: PUSH
40273: LD_VAR 0 5
40277: IN
40278: PUSH
40279: LD_INT 30
40281: PUSH
40282: LD_VAR 0 5
40286: IN
40287: OR
40288: AND
40289: PUSH
40290: LD_INT 6
40292: PPUSH
40293: LD_VAR 0 16
40297: PPUSH
40298: CALL_OW 321
40302: PUSH
40303: LD_INT 2
40305: EQUAL
40306: AND
40307: IFFALSE 40472
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40309: LD_INT 22
40311: PUSH
40312: LD_VAR 0 16
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: PUSH
40324: LD_INT 35
40326: PUSH
40327: LD_INT 11
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 35
40336: PUSH
40337: LD_INT 30
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 91
40351: PUSH
40352: LD_VAR 0 1
40356: PUSH
40357: LD_INT 18
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: LIST
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: LIST
40369: PPUSH
40370: CALL_OW 69
40374: NOT
40375: PUSH
40376: LD_INT 22
40378: PUSH
40379: LD_VAR 0 16
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 2
40390: PUSH
40391: LD_INT 30
40393: PUSH
40394: LD_INT 32
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 30
40403: PUSH
40404: LD_INT 33
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 91
40418: PUSH
40419: LD_VAR 0 1
40423: PUSH
40424: LD_INT 12
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: LIST
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: PUSH
40437: EMPTY
40438: LIST
40439: PPUSH
40440: CALL_OW 69
40444: PUSH
40445: LD_INT 2
40447: GREATER
40448: AND
40449: IFFALSE 40472
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40451: LD_ADDR_VAR 0 18
40455: PUSH
40456: LD_INT 11
40458: PUSH
40459: LD_INT 30
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_VAR 0 12
40470: ARRAY
40471: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40472: LD_VAR 0 18
40476: NOT
40477: PUSH
40478: LD_INT 40
40480: PPUSH
40481: LD_VAR 0 16
40485: PPUSH
40486: CALL_OW 321
40490: PUSH
40491: LD_INT 2
40493: EQUAL
40494: AND
40495: PUSH
40496: LD_INT 7
40498: PUSH
40499: LD_VAR 0 5
40503: IN
40504: PUSH
40505: LD_INT 28
40507: PUSH
40508: LD_VAR 0 5
40512: IN
40513: OR
40514: PUSH
40515: LD_INT 45
40517: PUSH
40518: LD_VAR 0 5
40522: IN
40523: OR
40524: AND
40525: IFFALSE 40779
// begin hex := GetHexInfo ( x , y ) ;
40527: LD_ADDR_VAR 0 4
40531: PUSH
40532: LD_VAR 0 10
40536: PPUSH
40537: LD_VAR 0 11
40541: PPUSH
40542: CALL_OW 546
40546: ST_TO_ADDR
// if hex [ 1 ] then
40547: LD_VAR 0 4
40551: PUSH
40552: LD_INT 1
40554: ARRAY
40555: IFFALSE 40559
// exit ;
40557: GO 40962
// height := hex [ 2 ] ;
40559: LD_ADDR_VAR 0 15
40563: PUSH
40564: LD_VAR 0 4
40568: PUSH
40569: LD_INT 2
40571: ARRAY
40572: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40573: LD_ADDR_VAR 0 14
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: LD_INT 3
40586: PUSH
40587: LD_INT 5
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: ST_TO_ADDR
// for i in tmp do
40596: LD_ADDR_VAR 0 8
40600: PUSH
40601: LD_VAR 0 14
40605: PUSH
40606: FOR_IN
40607: IFFALSE 40777
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40609: LD_ADDR_VAR 0 9
40613: PUSH
40614: LD_VAR 0 10
40618: PPUSH
40619: LD_VAR 0 8
40623: PPUSH
40624: LD_INT 5
40626: PPUSH
40627: CALL_OW 272
40631: PUSH
40632: LD_VAR 0 11
40636: PPUSH
40637: LD_VAR 0 8
40641: PPUSH
40642: LD_INT 5
40644: PPUSH
40645: CALL_OW 273
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40654: LD_VAR 0 9
40658: PUSH
40659: LD_INT 1
40661: ARRAY
40662: PPUSH
40663: LD_VAR 0 9
40667: PUSH
40668: LD_INT 2
40670: ARRAY
40671: PPUSH
40672: CALL_OW 488
40676: IFFALSE 40775
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40678: LD_ADDR_VAR 0 4
40682: PUSH
40683: LD_VAR 0 9
40687: PUSH
40688: LD_INT 1
40690: ARRAY
40691: PPUSH
40692: LD_VAR 0 9
40696: PUSH
40697: LD_INT 2
40699: ARRAY
40700: PPUSH
40701: CALL_OW 546
40705: ST_TO_ADDR
// if hex [ 1 ] then
40706: LD_VAR 0 4
40710: PUSH
40711: LD_INT 1
40713: ARRAY
40714: IFFALSE 40718
// continue ;
40716: GO 40606
// h := hex [ 2 ] ;
40718: LD_ADDR_VAR 0 13
40722: PUSH
40723: LD_VAR 0 4
40727: PUSH
40728: LD_INT 2
40730: ARRAY
40731: ST_TO_ADDR
// if h + 7 < height then
40732: LD_VAR 0 13
40736: PUSH
40737: LD_INT 7
40739: PLUS
40740: PUSH
40741: LD_VAR 0 15
40745: LESS
40746: IFFALSE 40775
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40748: LD_ADDR_VAR 0 18
40752: PUSH
40753: LD_INT 7
40755: PUSH
40756: LD_INT 28
40758: PUSH
40759: LD_INT 45
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: LIST
40766: PUSH
40767: LD_VAR 0 12
40771: ARRAY
40772: ST_TO_ADDR
// break ;
40773: GO 40777
// end ; end ; end ;
40775: GO 40606
40777: POP
40778: POP
// end ; if not weapon then
40779: LD_VAR 0 18
40783: NOT
40784: IFFALSE 40844
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40786: LD_ADDR_VAR 0 5
40790: PUSH
40791: LD_VAR 0 5
40795: PUSH
40796: LD_INT 11
40798: PUSH
40799: LD_INT 30
40801: PUSH
40802: LD_INT 49
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: LIST
40809: DIFF
40810: ST_TO_ADDR
// if not list then
40811: LD_VAR 0 5
40815: NOT
40816: IFFALSE 40820
// exit ;
40818: GO 40962
// weapon := list [ rand ( 1 , list ) ] ;
40820: LD_ADDR_VAR 0 18
40824: PUSH
40825: LD_VAR 0 5
40829: PUSH
40830: LD_INT 1
40832: PPUSH
40833: LD_VAR 0 5
40837: PPUSH
40838: CALL_OW 12
40842: ARRAY
40843: ST_TO_ADDR
// end ; if weapon then
40844: LD_VAR 0 18
40848: IFFALSE 40962
// begin tmp := CostOfWeapon ( weapon ) ;
40850: LD_ADDR_VAR 0 14
40854: PUSH
40855: LD_VAR 0 18
40859: PPUSH
40860: CALL_OW 451
40864: ST_TO_ADDR
// j := GetBase ( tower ) ;
40865: LD_ADDR_VAR 0 9
40869: PUSH
40870: LD_VAR 0 1
40874: PPUSH
40875: CALL_OW 274
40879: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40880: LD_VAR 0 9
40884: PPUSH
40885: LD_INT 1
40887: PPUSH
40888: CALL_OW 275
40892: PUSH
40893: LD_VAR 0 14
40897: PUSH
40898: LD_INT 1
40900: ARRAY
40901: GREATEREQUAL
40902: PUSH
40903: LD_VAR 0 9
40907: PPUSH
40908: LD_INT 2
40910: PPUSH
40911: CALL_OW 275
40915: PUSH
40916: LD_VAR 0 14
40920: PUSH
40921: LD_INT 2
40923: ARRAY
40924: GREATEREQUAL
40925: AND
40926: PUSH
40927: LD_VAR 0 9
40931: PPUSH
40932: LD_INT 3
40934: PPUSH
40935: CALL_OW 275
40939: PUSH
40940: LD_VAR 0 14
40944: PUSH
40945: LD_INT 3
40947: ARRAY
40948: GREATEREQUAL
40949: AND
40950: IFFALSE 40962
// result := weapon ;
40952: LD_ADDR_VAR 0 3
40956: PUSH
40957: LD_VAR 0 18
40961: ST_TO_ADDR
// end ; end ;
40962: LD_VAR 0 3
40966: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40967: LD_INT 0
40969: PPUSH
40970: PPUSH
// result := true ;
40971: LD_ADDR_VAR 0 3
40975: PUSH
40976: LD_INT 1
40978: ST_TO_ADDR
// if array1 = array2 then
40979: LD_VAR 0 1
40983: PUSH
40984: LD_VAR 0 2
40988: EQUAL
40989: IFFALSE 41049
// begin for i = 1 to array1 do
40991: LD_ADDR_VAR 0 4
40995: PUSH
40996: DOUBLE
40997: LD_INT 1
40999: DEC
41000: ST_TO_ADDR
41001: LD_VAR 0 1
41005: PUSH
41006: FOR_TO
41007: IFFALSE 41045
// if array1 [ i ] <> array2 [ i ] then
41009: LD_VAR 0 1
41013: PUSH
41014: LD_VAR 0 4
41018: ARRAY
41019: PUSH
41020: LD_VAR 0 2
41024: PUSH
41025: LD_VAR 0 4
41029: ARRAY
41030: NONEQUAL
41031: IFFALSE 41043
// begin result := false ;
41033: LD_ADDR_VAR 0 3
41037: PUSH
41038: LD_INT 0
41040: ST_TO_ADDR
// break ;
41041: GO 41045
// end ;
41043: GO 41006
41045: POP
41046: POP
// end else
41047: GO 41057
// result := false ;
41049: LD_ADDR_VAR 0 3
41053: PUSH
41054: LD_INT 0
41056: ST_TO_ADDR
// end ;
41057: LD_VAR 0 3
41061: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41062: LD_INT 0
41064: PPUSH
41065: PPUSH
// if not array1 or not array2 then
41066: LD_VAR 0 1
41070: NOT
41071: PUSH
41072: LD_VAR 0 2
41076: NOT
41077: OR
41078: IFFALSE 41082
// exit ;
41080: GO 41146
// result := true ;
41082: LD_ADDR_VAR 0 3
41086: PUSH
41087: LD_INT 1
41089: ST_TO_ADDR
// for i = 1 to array1 do
41090: LD_ADDR_VAR 0 4
41094: PUSH
41095: DOUBLE
41096: LD_INT 1
41098: DEC
41099: ST_TO_ADDR
41100: LD_VAR 0 1
41104: PUSH
41105: FOR_TO
41106: IFFALSE 41144
// if array1 [ i ] <> array2 [ i ] then
41108: LD_VAR 0 1
41112: PUSH
41113: LD_VAR 0 4
41117: ARRAY
41118: PUSH
41119: LD_VAR 0 2
41123: PUSH
41124: LD_VAR 0 4
41128: ARRAY
41129: NONEQUAL
41130: IFFALSE 41142
// begin result := false ;
41132: LD_ADDR_VAR 0 3
41136: PUSH
41137: LD_INT 0
41139: ST_TO_ADDR
// break ;
41140: GO 41144
// end ;
41142: GO 41105
41144: POP
41145: POP
// end ;
41146: LD_VAR 0 3
41150: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41151: LD_INT 0
41153: PPUSH
41154: PPUSH
41155: PPUSH
// pom := GetBase ( fac ) ;
41156: LD_ADDR_VAR 0 5
41160: PUSH
41161: LD_VAR 0 1
41165: PPUSH
41166: CALL_OW 274
41170: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41171: LD_ADDR_VAR 0 4
41175: PUSH
41176: LD_VAR 0 2
41180: PUSH
41181: LD_INT 1
41183: ARRAY
41184: PPUSH
41185: LD_VAR 0 2
41189: PUSH
41190: LD_INT 2
41192: ARRAY
41193: PPUSH
41194: LD_VAR 0 2
41198: PUSH
41199: LD_INT 3
41201: ARRAY
41202: PPUSH
41203: LD_VAR 0 2
41207: PUSH
41208: LD_INT 4
41210: ARRAY
41211: PPUSH
41212: CALL_OW 449
41216: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41217: LD_ADDR_VAR 0 3
41221: PUSH
41222: LD_VAR 0 5
41226: PPUSH
41227: LD_INT 1
41229: PPUSH
41230: CALL_OW 275
41234: PUSH
41235: LD_VAR 0 4
41239: PUSH
41240: LD_INT 1
41242: ARRAY
41243: GREATEREQUAL
41244: PUSH
41245: LD_VAR 0 5
41249: PPUSH
41250: LD_INT 2
41252: PPUSH
41253: CALL_OW 275
41257: PUSH
41258: LD_VAR 0 4
41262: PUSH
41263: LD_INT 2
41265: ARRAY
41266: GREATEREQUAL
41267: AND
41268: PUSH
41269: LD_VAR 0 5
41273: PPUSH
41274: LD_INT 3
41276: PPUSH
41277: CALL_OW 275
41281: PUSH
41282: LD_VAR 0 4
41286: PUSH
41287: LD_INT 3
41289: ARRAY
41290: GREATEREQUAL
41291: AND
41292: ST_TO_ADDR
// end ;
41293: LD_VAR 0 3
41297: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41298: LD_INT 0
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
// pom := GetBase ( building ) ;
41304: LD_ADDR_VAR 0 3
41308: PUSH
41309: LD_VAR 0 1
41313: PPUSH
41314: CALL_OW 274
41318: ST_TO_ADDR
// if not pom then
41319: LD_VAR 0 3
41323: NOT
41324: IFFALSE 41328
// exit ;
41326: GO 41498
// btype := GetBType ( building ) ;
41328: LD_ADDR_VAR 0 5
41332: PUSH
41333: LD_VAR 0 1
41337: PPUSH
41338: CALL_OW 266
41342: ST_TO_ADDR
// if btype = b_armoury then
41343: LD_VAR 0 5
41347: PUSH
41348: LD_INT 4
41350: EQUAL
41351: IFFALSE 41361
// btype := b_barracks ;
41353: LD_ADDR_VAR 0 5
41357: PUSH
41358: LD_INT 5
41360: ST_TO_ADDR
// if btype = b_depot then
41361: LD_VAR 0 5
41365: PUSH
41366: LD_INT 0
41368: EQUAL
41369: IFFALSE 41379
// btype := b_warehouse ;
41371: LD_ADDR_VAR 0 5
41375: PUSH
41376: LD_INT 1
41378: ST_TO_ADDR
// if btype = b_workshop then
41379: LD_VAR 0 5
41383: PUSH
41384: LD_INT 2
41386: EQUAL
41387: IFFALSE 41397
// btype := b_factory ;
41389: LD_ADDR_VAR 0 5
41393: PUSH
41394: LD_INT 3
41396: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41397: LD_ADDR_VAR 0 4
41401: PUSH
41402: LD_VAR 0 5
41406: PPUSH
41407: LD_VAR 0 1
41411: PPUSH
41412: CALL_OW 248
41416: PPUSH
41417: CALL_OW 450
41421: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41422: LD_ADDR_VAR 0 2
41426: PUSH
41427: LD_VAR 0 3
41431: PPUSH
41432: LD_INT 1
41434: PPUSH
41435: CALL_OW 275
41439: PUSH
41440: LD_VAR 0 4
41444: PUSH
41445: LD_INT 1
41447: ARRAY
41448: GREATEREQUAL
41449: PUSH
41450: LD_VAR 0 3
41454: PPUSH
41455: LD_INT 2
41457: PPUSH
41458: CALL_OW 275
41462: PUSH
41463: LD_VAR 0 4
41467: PUSH
41468: LD_INT 2
41470: ARRAY
41471: GREATEREQUAL
41472: AND
41473: PUSH
41474: LD_VAR 0 3
41478: PPUSH
41479: LD_INT 3
41481: PPUSH
41482: CALL_OW 275
41486: PUSH
41487: LD_VAR 0 4
41491: PUSH
41492: LD_INT 3
41494: ARRAY
41495: GREATEREQUAL
41496: AND
41497: ST_TO_ADDR
// end ;
41498: LD_VAR 0 2
41502: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41503: LD_INT 0
41505: PPUSH
41506: PPUSH
41507: PPUSH
// pom := GetBase ( building ) ;
41508: LD_ADDR_VAR 0 4
41512: PUSH
41513: LD_VAR 0 1
41517: PPUSH
41518: CALL_OW 274
41522: ST_TO_ADDR
// if not pom then
41523: LD_VAR 0 4
41527: NOT
41528: IFFALSE 41532
// exit ;
41530: GO 41633
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41532: LD_ADDR_VAR 0 5
41536: PUSH
41537: LD_VAR 0 2
41541: PPUSH
41542: LD_VAR 0 1
41546: PPUSH
41547: CALL_OW 248
41551: PPUSH
41552: CALL_OW 450
41556: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41557: LD_ADDR_VAR 0 3
41561: PUSH
41562: LD_VAR 0 4
41566: PPUSH
41567: LD_INT 1
41569: PPUSH
41570: CALL_OW 275
41574: PUSH
41575: LD_VAR 0 5
41579: PUSH
41580: LD_INT 1
41582: ARRAY
41583: GREATEREQUAL
41584: PUSH
41585: LD_VAR 0 4
41589: PPUSH
41590: LD_INT 2
41592: PPUSH
41593: CALL_OW 275
41597: PUSH
41598: LD_VAR 0 5
41602: PUSH
41603: LD_INT 2
41605: ARRAY
41606: GREATEREQUAL
41607: AND
41608: PUSH
41609: LD_VAR 0 4
41613: PPUSH
41614: LD_INT 3
41616: PPUSH
41617: CALL_OW 275
41621: PUSH
41622: LD_VAR 0 5
41626: PUSH
41627: LD_INT 3
41629: ARRAY
41630: GREATEREQUAL
41631: AND
41632: ST_TO_ADDR
// end ;
41633: LD_VAR 0 3
41637: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41638: LD_INT 0
41640: PPUSH
41641: PPUSH
41642: PPUSH
41643: PPUSH
41644: PPUSH
41645: PPUSH
41646: PPUSH
41647: PPUSH
41648: PPUSH
41649: PPUSH
41650: PPUSH
// result := false ;
41651: LD_ADDR_VAR 0 8
41655: PUSH
41656: LD_INT 0
41658: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41659: LD_VAR 0 5
41663: NOT
41664: PUSH
41665: LD_VAR 0 1
41669: NOT
41670: OR
41671: PUSH
41672: LD_VAR 0 2
41676: NOT
41677: OR
41678: PUSH
41679: LD_VAR 0 3
41683: NOT
41684: OR
41685: IFFALSE 41689
// exit ;
41687: GO 42503
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41689: LD_ADDR_VAR 0 14
41693: PUSH
41694: LD_VAR 0 1
41698: PPUSH
41699: LD_VAR 0 2
41703: PPUSH
41704: LD_VAR 0 3
41708: PPUSH
41709: LD_VAR 0 4
41713: PPUSH
41714: LD_VAR 0 5
41718: PUSH
41719: LD_INT 1
41721: ARRAY
41722: PPUSH
41723: CALL_OW 248
41727: PPUSH
41728: LD_INT 0
41730: PPUSH
41731: CALL 43756 0 6
41735: ST_TO_ADDR
// if not hexes then
41736: LD_VAR 0 14
41740: NOT
41741: IFFALSE 41745
// exit ;
41743: GO 42503
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41745: LD_ADDR_VAR 0 17
41749: PUSH
41750: LD_VAR 0 5
41754: PPUSH
41755: LD_INT 22
41757: PUSH
41758: LD_VAR 0 13
41762: PPUSH
41763: CALL_OW 255
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 2
41774: PUSH
41775: LD_INT 30
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 30
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: LIST
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PPUSH
41804: CALL_OW 72
41808: ST_TO_ADDR
// for i = 1 to hexes do
41809: LD_ADDR_VAR 0 9
41813: PUSH
41814: DOUBLE
41815: LD_INT 1
41817: DEC
41818: ST_TO_ADDR
41819: LD_VAR 0 14
41823: PUSH
41824: FOR_TO
41825: IFFALSE 42501
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41827: LD_ADDR_VAR 0 13
41831: PUSH
41832: LD_VAR 0 14
41836: PUSH
41837: LD_VAR 0 9
41841: ARRAY
41842: PUSH
41843: LD_INT 1
41845: ARRAY
41846: PPUSH
41847: LD_VAR 0 14
41851: PUSH
41852: LD_VAR 0 9
41856: ARRAY
41857: PUSH
41858: LD_INT 2
41860: ARRAY
41861: PPUSH
41862: CALL_OW 428
41866: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41867: LD_VAR 0 14
41871: PUSH
41872: LD_VAR 0 9
41876: ARRAY
41877: PUSH
41878: LD_INT 1
41880: ARRAY
41881: PPUSH
41882: LD_VAR 0 14
41886: PUSH
41887: LD_VAR 0 9
41891: ARRAY
41892: PUSH
41893: LD_INT 2
41895: ARRAY
41896: PPUSH
41897: CALL_OW 351
41901: PUSH
41902: LD_VAR 0 14
41906: PUSH
41907: LD_VAR 0 9
41911: ARRAY
41912: PUSH
41913: LD_INT 1
41915: ARRAY
41916: PPUSH
41917: LD_VAR 0 14
41921: PUSH
41922: LD_VAR 0 9
41926: ARRAY
41927: PUSH
41928: LD_INT 2
41930: ARRAY
41931: PPUSH
41932: CALL_OW 488
41936: NOT
41937: OR
41938: PUSH
41939: LD_VAR 0 13
41943: PPUSH
41944: CALL_OW 247
41948: PUSH
41949: LD_INT 3
41951: EQUAL
41952: OR
41953: IFFALSE 41959
// exit ;
41955: POP
41956: POP
41957: GO 42503
// if not tmp then
41959: LD_VAR 0 13
41963: NOT
41964: IFFALSE 41968
// continue ;
41966: GO 41824
// result := true ;
41968: LD_ADDR_VAR 0 8
41972: PUSH
41973: LD_INT 1
41975: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41976: LD_VAR 0 6
41980: PUSH
41981: LD_VAR 0 13
41985: PPUSH
41986: CALL_OW 247
41990: PUSH
41991: LD_INT 2
41993: EQUAL
41994: AND
41995: PUSH
41996: LD_VAR 0 13
42000: PPUSH
42001: CALL_OW 263
42005: PUSH
42006: LD_INT 1
42008: EQUAL
42009: AND
42010: IFFALSE 42174
// begin if IsDrivenBy ( tmp ) then
42012: LD_VAR 0 13
42016: PPUSH
42017: CALL_OW 311
42021: IFFALSE 42025
// continue ;
42023: GO 41824
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42025: LD_VAR 0 6
42029: PPUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 60
42035: PUSH
42036: EMPTY
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 3
42045: PUSH
42046: LD_INT 55
42048: PUSH
42049: EMPTY
42050: LIST
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PPUSH
42060: CALL_OW 72
42064: IFFALSE 42172
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42066: LD_ADDR_VAR 0 18
42070: PUSH
42071: LD_VAR 0 6
42075: PPUSH
42076: LD_INT 3
42078: PUSH
42079: LD_INT 60
42081: PUSH
42082: EMPTY
42083: LIST
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 3
42091: PUSH
42092: LD_INT 55
42094: PUSH
42095: EMPTY
42096: LIST
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PPUSH
42106: CALL_OW 72
42110: PUSH
42111: LD_INT 1
42113: ARRAY
42114: ST_TO_ADDR
// if IsInUnit ( driver ) then
42115: LD_VAR 0 18
42119: PPUSH
42120: CALL_OW 310
42124: IFFALSE 42135
// ComExit ( driver ) ;
42126: LD_VAR 0 18
42130: PPUSH
42131: CALL 67548 0 1
// AddComEnterUnit ( driver , tmp ) ;
42135: LD_VAR 0 18
42139: PPUSH
42140: LD_VAR 0 13
42144: PPUSH
42145: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42149: LD_VAR 0 18
42153: PPUSH
42154: LD_VAR 0 7
42158: PPUSH
42159: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42163: LD_VAR 0 18
42167: PPUSH
42168: CALL_OW 181
// end ; continue ;
42172: GO 41824
// end ; if not cleaners or not tmp in cleaners then
42174: LD_VAR 0 6
42178: NOT
42179: PUSH
42180: LD_VAR 0 13
42184: PUSH
42185: LD_VAR 0 6
42189: IN
42190: NOT
42191: OR
42192: IFFALSE 42499
// begin if dep then
42194: LD_VAR 0 17
42198: IFFALSE 42334
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42200: LD_ADDR_VAR 0 16
42204: PUSH
42205: LD_VAR 0 17
42209: PUSH
42210: LD_INT 1
42212: ARRAY
42213: PPUSH
42214: CALL_OW 250
42218: PPUSH
42219: LD_VAR 0 17
42223: PUSH
42224: LD_INT 1
42226: ARRAY
42227: PPUSH
42228: CALL_OW 254
42232: PPUSH
42233: LD_INT 5
42235: PPUSH
42236: CALL_OW 272
42240: PUSH
42241: LD_VAR 0 17
42245: PUSH
42246: LD_INT 1
42248: ARRAY
42249: PPUSH
42250: CALL_OW 251
42254: PPUSH
42255: LD_VAR 0 17
42259: PUSH
42260: LD_INT 1
42262: ARRAY
42263: PPUSH
42264: CALL_OW 254
42268: PPUSH
42269: LD_INT 5
42271: PPUSH
42272: CALL_OW 273
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42281: LD_VAR 0 16
42285: PUSH
42286: LD_INT 1
42288: ARRAY
42289: PPUSH
42290: LD_VAR 0 16
42294: PUSH
42295: LD_INT 2
42297: ARRAY
42298: PPUSH
42299: CALL_OW 488
42303: IFFALSE 42334
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42305: LD_VAR 0 13
42309: PPUSH
42310: LD_VAR 0 16
42314: PUSH
42315: LD_INT 1
42317: ARRAY
42318: PPUSH
42319: LD_VAR 0 16
42323: PUSH
42324: LD_INT 2
42326: ARRAY
42327: PPUSH
42328: CALL_OW 111
// continue ;
42332: GO 41824
// end ; end ; r := GetDir ( tmp ) ;
42334: LD_ADDR_VAR 0 15
42338: PUSH
42339: LD_VAR 0 13
42343: PPUSH
42344: CALL_OW 254
42348: ST_TO_ADDR
// if r = 5 then
42349: LD_VAR 0 15
42353: PUSH
42354: LD_INT 5
42356: EQUAL
42357: IFFALSE 42367
// r := 0 ;
42359: LD_ADDR_VAR 0 15
42363: PUSH
42364: LD_INT 0
42366: ST_TO_ADDR
// for j = r to 5 do
42367: LD_ADDR_VAR 0 10
42371: PUSH
42372: DOUBLE
42373: LD_VAR 0 15
42377: DEC
42378: ST_TO_ADDR
42379: LD_INT 5
42381: PUSH
42382: FOR_TO
42383: IFFALSE 42497
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42385: LD_ADDR_VAR 0 11
42389: PUSH
42390: LD_VAR 0 13
42394: PPUSH
42395: CALL_OW 250
42399: PPUSH
42400: LD_VAR 0 10
42404: PPUSH
42405: LD_INT 2
42407: PPUSH
42408: CALL_OW 272
42412: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42413: LD_ADDR_VAR 0 12
42417: PUSH
42418: LD_VAR 0 13
42422: PPUSH
42423: CALL_OW 251
42427: PPUSH
42428: LD_VAR 0 10
42432: PPUSH
42433: LD_INT 2
42435: PPUSH
42436: CALL_OW 273
42440: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42441: LD_VAR 0 11
42445: PPUSH
42446: LD_VAR 0 12
42450: PPUSH
42451: CALL_OW 488
42455: PUSH
42456: LD_VAR 0 11
42460: PPUSH
42461: LD_VAR 0 12
42465: PPUSH
42466: CALL_OW 428
42470: NOT
42471: AND
42472: IFFALSE 42495
// begin ComMoveXY ( tmp , _x , _y ) ;
42474: LD_VAR 0 13
42478: PPUSH
42479: LD_VAR 0 11
42483: PPUSH
42484: LD_VAR 0 12
42488: PPUSH
42489: CALL_OW 111
// break ;
42493: GO 42497
// end ; end ;
42495: GO 42382
42497: POP
42498: POP
// end ; end ;
42499: GO 41824
42501: POP
42502: POP
// end ;
42503: LD_VAR 0 8
42507: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42508: LD_INT 0
42510: PPUSH
// result := true ;
42511: LD_ADDR_VAR 0 3
42515: PUSH
42516: LD_INT 1
42518: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42519: LD_VAR 0 2
42523: PUSH
42524: LD_INT 24
42526: DOUBLE
42527: EQUAL
42528: IFTRUE 42538
42530: LD_INT 33
42532: DOUBLE
42533: EQUAL
42534: IFTRUE 42538
42536: GO 42563
42538: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42539: LD_ADDR_VAR 0 3
42543: PUSH
42544: LD_INT 32
42546: PPUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: CALL_OW 321
42556: PUSH
42557: LD_INT 2
42559: EQUAL
42560: ST_TO_ADDR
42561: GO 42879
42563: LD_INT 20
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42571
42569: GO 42596
42571: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42572: LD_ADDR_VAR 0 3
42576: PUSH
42577: LD_INT 6
42579: PPUSH
42580: LD_VAR 0 1
42584: PPUSH
42585: CALL_OW 321
42589: PUSH
42590: LD_INT 2
42592: EQUAL
42593: ST_TO_ADDR
42594: GO 42879
42596: LD_INT 22
42598: DOUBLE
42599: EQUAL
42600: IFTRUE 42610
42602: LD_INT 36
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42635
42610: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 15
42618: PPUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: CALL_OW 321
42628: PUSH
42629: LD_INT 2
42631: EQUAL
42632: ST_TO_ADDR
42633: GO 42879
42635: LD_INT 30
42637: DOUBLE
42638: EQUAL
42639: IFTRUE 42643
42641: GO 42668
42643: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42644: LD_ADDR_VAR 0 3
42648: PUSH
42649: LD_INT 20
42651: PPUSH
42652: LD_VAR 0 1
42656: PPUSH
42657: CALL_OW 321
42661: PUSH
42662: LD_INT 2
42664: EQUAL
42665: ST_TO_ADDR
42666: GO 42879
42668: LD_INT 28
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42682
42674: LD_INT 21
42676: DOUBLE
42677: EQUAL
42678: IFTRUE 42682
42680: GO 42707
42682: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42683: LD_ADDR_VAR 0 3
42687: PUSH
42688: LD_INT 21
42690: PPUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: CALL_OW 321
42700: PUSH
42701: LD_INT 2
42703: EQUAL
42704: ST_TO_ADDR
42705: GO 42879
42707: LD_INT 16
42709: DOUBLE
42710: EQUAL
42711: IFTRUE 42715
42713: GO 42740
42715: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42716: LD_ADDR_VAR 0 3
42720: PUSH
42721: LD_INT 84
42723: PPUSH
42724: LD_VAR 0 1
42728: PPUSH
42729: CALL_OW 321
42733: PUSH
42734: LD_INT 2
42736: EQUAL
42737: ST_TO_ADDR
42738: GO 42879
42740: LD_INT 19
42742: DOUBLE
42743: EQUAL
42744: IFTRUE 42754
42746: LD_INT 23
42748: DOUBLE
42749: EQUAL
42750: IFTRUE 42754
42752: GO 42779
42754: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42755: LD_ADDR_VAR 0 3
42759: PUSH
42760: LD_INT 83
42762: PPUSH
42763: LD_VAR 0 1
42767: PPUSH
42768: CALL_OW 321
42772: PUSH
42773: LD_INT 2
42775: EQUAL
42776: ST_TO_ADDR
42777: GO 42879
42779: LD_INT 17
42781: DOUBLE
42782: EQUAL
42783: IFTRUE 42787
42785: GO 42812
42787: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42788: LD_ADDR_VAR 0 3
42792: PUSH
42793: LD_INT 39
42795: PPUSH
42796: LD_VAR 0 1
42800: PPUSH
42801: CALL_OW 321
42805: PUSH
42806: LD_INT 2
42808: EQUAL
42809: ST_TO_ADDR
42810: GO 42879
42812: LD_INT 18
42814: DOUBLE
42815: EQUAL
42816: IFTRUE 42820
42818: GO 42845
42820: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42821: LD_ADDR_VAR 0 3
42825: PUSH
42826: LD_INT 40
42828: PPUSH
42829: LD_VAR 0 1
42833: PPUSH
42834: CALL_OW 321
42838: PUSH
42839: LD_INT 2
42841: EQUAL
42842: ST_TO_ADDR
42843: GO 42879
42845: LD_INT 27
42847: DOUBLE
42848: EQUAL
42849: IFTRUE 42853
42851: GO 42878
42853: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42854: LD_ADDR_VAR 0 3
42858: PUSH
42859: LD_INT 35
42861: PPUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: CALL_OW 321
42871: PUSH
42872: LD_INT 2
42874: EQUAL
42875: ST_TO_ADDR
42876: GO 42879
42878: POP
// end ;
42879: LD_VAR 0 3
42883: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42884: LD_INT 0
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
42892: PPUSH
42893: PPUSH
42894: PPUSH
42895: PPUSH
42896: PPUSH
// result := false ;
42897: LD_ADDR_VAR 0 6
42901: PUSH
42902: LD_INT 0
42904: ST_TO_ADDR
// if btype = b_depot then
42905: LD_VAR 0 2
42909: PUSH
42910: LD_INT 0
42912: EQUAL
42913: IFFALSE 42925
// begin result := true ;
42915: LD_ADDR_VAR 0 6
42919: PUSH
42920: LD_INT 1
42922: ST_TO_ADDR
// exit ;
42923: GO 43751
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42925: LD_VAR 0 1
42929: NOT
42930: PUSH
42931: LD_VAR 0 1
42935: PPUSH
42936: CALL_OW 266
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: IN
42951: NOT
42952: OR
42953: PUSH
42954: LD_VAR 0 2
42958: NOT
42959: OR
42960: PUSH
42961: LD_VAR 0 5
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 3
42977: PUSH
42978: LD_INT 4
42980: PUSH
42981: LD_INT 5
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: IN
42992: NOT
42993: OR
42994: PUSH
42995: LD_VAR 0 3
42999: PPUSH
43000: LD_VAR 0 4
43004: PPUSH
43005: CALL_OW 488
43009: NOT
43010: OR
43011: IFFALSE 43015
// exit ;
43013: GO 43751
// side := GetSide ( depot ) ;
43015: LD_ADDR_VAR 0 9
43019: PUSH
43020: LD_VAR 0 1
43024: PPUSH
43025: CALL_OW 255
43029: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43030: LD_VAR 0 9
43034: PPUSH
43035: LD_VAR 0 2
43039: PPUSH
43040: CALL 42508 0 2
43044: NOT
43045: IFFALSE 43049
// exit ;
43047: GO 43751
// pom := GetBase ( depot ) ;
43049: LD_ADDR_VAR 0 10
43053: PUSH
43054: LD_VAR 0 1
43058: PPUSH
43059: CALL_OW 274
43063: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43064: LD_ADDR_VAR 0 11
43068: PUSH
43069: LD_VAR 0 2
43073: PPUSH
43074: LD_VAR 0 1
43078: PPUSH
43079: CALL_OW 248
43083: PPUSH
43084: CALL_OW 450
43088: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43089: LD_VAR 0 10
43093: PPUSH
43094: LD_INT 1
43096: PPUSH
43097: CALL_OW 275
43101: PUSH
43102: LD_VAR 0 11
43106: PUSH
43107: LD_INT 1
43109: ARRAY
43110: GREATEREQUAL
43111: PUSH
43112: LD_VAR 0 10
43116: PPUSH
43117: LD_INT 2
43119: PPUSH
43120: CALL_OW 275
43124: PUSH
43125: LD_VAR 0 11
43129: PUSH
43130: LD_INT 2
43132: ARRAY
43133: GREATEREQUAL
43134: AND
43135: PUSH
43136: LD_VAR 0 10
43140: PPUSH
43141: LD_INT 3
43143: PPUSH
43144: CALL_OW 275
43148: PUSH
43149: LD_VAR 0 11
43153: PUSH
43154: LD_INT 3
43156: ARRAY
43157: GREATEREQUAL
43158: AND
43159: NOT
43160: IFFALSE 43164
// exit ;
43162: GO 43751
// if GetBType ( depot ) = b_depot then
43164: LD_VAR 0 1
43168: PPUSH
43169: CALL_OW 266
43173: PUSH
43174: LD_INT 0
43176: EQUAL
43177: IFFALSE 43189
// dist := 28 else
43179: LD_ADDR_VAR 0 14
43183: PUSH
43184: LD_INT 28
43186: ST_TO_ADDR
43187: GO 43197
// dist := 36 ;
43189: LD_ADDR_VAR 0 14
43193: PUSH
43194: LD_INT 36
43196: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43197: LD_VAR 0 1
43201: PPUSH
43202: LD_VAR 0 3
43206: PPUSH
43207: LD_VAR 0 4
43211: PPUSH
43212: CALL_OW 297
43216: PUSH
43217: LD_VAR 0 14
43221: GREATER
43222: IFFALSE 43226
// exit ;
43224: GO 43751
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43226: LD_ADDR_VAR 0 12
43230: PUSH
43231: LD_VAR 0 2
43235: PPUSH
43236: LD_VAR 0 3
43240: PPUSH
43241: LD_VAR 0 4
43245: PPUSH
43246: LD_VAR 0 5
43250: PPUSH
43251: LD_VAR 0 1
43255: PPUSH
43256: CALL_OW 248
43260: PPUSH
43261: LD_INT 0
43263: PPUSH
43264: CALL 43756 0 6
43268: ST_TO_ADDR
// if not hexes then
43269: LD_VAR 0 12
43273: NOT
43274: IFFALSE 43278
// exit ;
43276: GO 43751
// hex := GetHexInfo ( x , y ) ;
43278: LD_ADDR_VAR 0 15
43282: PUSH
43283: LD_VAR 0 3
43287: PPUSH
43288: LD_VAR 0 4
43292: PPUSH
43293: CALL_OW 546
43297: ST_TO_ADDR
// if hex [ 1 ] then
43298: LD_VAR 0 15
43302: PUSH
43303: LD_INT 1
43305: ARRAY
43306: IFFALSE 43310
// exit ;
43308: GO 43751
// height := hex [ 2 ] ;
43310: LD_ADDR_VAR 0 13
43314: PUSH
43315: LD_VAR 0 15
43319: PUSH
43320: LD_INT 2
43322: ARRAY
43323: ST_TO_ADDR
// for i = 1 to hexes do
43324: LD_ADDR_VAR 0 7
43328: PUSH
43329: DOUBLE
43330: LD_INT 1
43332: DEC
43333: ST_TO_ADDR
43334: LD_VAR 0 12
43338: PUSH
43339: FOR_TO
43340: IFFALSE 43670
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43342: LD_VAR 0 12
43346: PUSH
43347: LD_VAR 0 7
43351: ARRAY
43352: PUSH
43353: LD_INT 1
43355: ARRAY
43356: PPUSH
43357: LD_VAR 0 12
43361: PUSH
43362: LD_VAR 0 7
43366: ARRAY
43367: PUSH
43368: LD_INT 2
43370: ARRAY
43371: PPUSH
43372: CALL_OW 488
43376: NOT
43377: PUSH
43378: LD_VAR 0 12
43382: PUSH
43383: LD_VAR 0 7
43387: ARRAY
43388: PUSH
43389: LD_INT 1
43391: ARRAY
43392: PPUSH
43393: LD_VAR 0 12
43397: PUSH
43398: LD_VAR 0 7
43402: ARRAY
43403: PUSH
43404: LD_INT 2
43406: ARRAY
43407: PPUSH
43408: CALL_OW 428
43412: PUSH
43413: LD_INT 0
43415: GREATER
43416: OR
43417: PUSH
43418: LD_VAR 0 12
43422: PUSH
43423: LD_VAR 0 7
43427: ARRAY
43428: PUSH
43429: LD_INT 1
43431: ARRAY
43432: PPUSH
43433: LD_VAR 0 12
43437: PUSH
43438: LD_VAR 0 7
43442: ARRAY
43443: PUSH
43444: LD_INT 2
43446: ARRAY
43447: PPUSH
43448: CALL_OW 351
43452: OR
43453: IFFALSE 43459
// exit ;
43455: POP
43456: POP
43457: GO 43751
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43459: LD_ADDR_VAR 0 8
43463: PUSH
43464: LD_VAR 0 12
43468: PUSH
43469: LD_VAR 0 7
43473: ARRAY
43474: PUSH
43475: LD_INT 1
43477: ARRAY
43478: PPUSH
43479: LD_VAR 0 12
43483: PUSH
43484: LD_VAR 0 7
43488: ARRAY
43489: PUSH
43490: LD_INT 2
43492: ARRAY
43493: PPUSH
43494: CALL_OW 546
43498: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43499: LD_VAR 0 8
43503: PUSH
43504: LD_INT 1
43506: ARRAY
43507: PUSH
43508: LD_VAR 0 8
43512: PUSH
43513: LD_INT 2
43515: ARRAY
43516: PUSH
43517: LD_VAR 0 13
43521: PUSH
43522: LD_INT 2
43524: PLUS
43525: GREATER
43526: OR
43527: PUSH
43528: LD_VAR 0 8
43532: PUSH
43533: LD_INT 2
43535: ARRAY
43536: PUSH
43537: LD_VAR 0 13
43541: PUSH
43542: LD_INT 2
43544: MINUS
43545: LESS
43546: OR
43547: PUSH
43548: LD_VAR 0 8
43552: PUSH
43553: LD_INT 3
43555: ARRAY
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 8
43562: PUSH
43563: LD_INT 9
43565: PUSH
43566: LD_INT 10
43568: PUSH
43569: LD_INT 11
43571: PUSH
43572: LD_INT 12
43574: PUSH
43575: LD_INT 13
43577: PUSH
43578: LD_INT 16
43580: PUSH
43581: LD_INT 17
43583: PUSH
43584: LD_INT 18
43586: PUSH
43587: LD_INT 19
43589: PUSH
43590: LD_INT 20
43592: PUSH
43593: LD_INT 21
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: IN
43611: NOT
43612: OR
43613: PUSH
43614: LD_VAR 0 8
43618: PUSH
43619: LD_INT 5
43621: ARRAY
43622: NOT
43623: OR
43624: PUSH
43625: LD_VAR 0 8
43629: PUSH
43630: LD_INT 6
43632: ARRAY
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 7
43642: PUSH
43643: LD_INT 9
43645: PUSH
43646: LD_INT 10
43648: PUSH
43649: LD_INT 11
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: IN
43660: NOT
43661: OR
43662: IFFALSE 43668
// exit ;
43664: POP
43665: POP
43666: GO 43751
// end ;
43668: GO 43339
43670: POP
43671: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43672: LD_VAR 0 9
43676: PPUSH
43677: LD_VAR 0 3
43681: PPUSH
43682: LD_VAR 0 4
43686: PPUSH
43687: LD_INT 20
43689: PPUSH
43690: CALL 35674 0 4
43694: PUSH
43695: LD_INT 4
43697: ARRAY
43698: IFFALSE 43702
// exit ;
43700: GO 43751
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43702: LD_VAR 0 2
43706: PUSH
43707: LD_INT 29
43709: PUSH
43710: LD_INT 30
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: IN
43717: PUSH
43718: LD_VAR 0 3
43722: PPUSH
43723: LD_VAR 0 4
43727: PPUSH
43728: LD_VAR 0 9
43732: PPUSH
43733: CALL_OW 440
43737: NOT
43738: AND
43739: IFFALSE 43743
// exit ;
43741: GO 43751
// result := true ;
43743: LD_ADDR_VAR 0 6
43747: PUSH
43748: LD_INT 1
43750: ST_TO_ADDR
// end ;
43751: LD_VAR 0 6
43755: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43756: LD_INT 0
43758: PPUSH
43759: PPUSH
43760: PPUSH
43761: PPUSH
43762: PPUSH
43763: PPUSH
43764: PPUSH
43765: PPUSH
43766: PPUSH
43767: PPUSH
43768: PPUSH
43769: PPUSH
43770: PPUSH
43771: PPUSH
43772: PPUSH
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
// result = [ ] ;
43816: LD_ADDR_VAR 0 7
43820: PUSH
43821: EMPTY
43822: ST_TO_ADDR
// temp_list = [ ] ;
43823: LD_ADDR_VAR 0 9
43827: PUSH
43828: EMPTY
43829: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43830: LD_VAR 0 4
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: LD_INT 3
43846: PUSH
43847: LD_INT 4
43849: PUSH
43850: LD_INT 5
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: IN
43861: NOT
43862: PUSH
43863: LD_VAR 0 1
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: IN
43878: PUSH
43879: LD_VAR 0 5
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: LD_INT 3
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: LIST
43897: IN
43898: NOT
43899: AND
43900: OR
43901: IFFALSE 43905
// exit ;
43903: GO 62296
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43905: LD_VAR 0 1
43909: PUSH
43910: LD_INT 6
43912: PUSH
43913: LD_INT 7
43915: PUSH
43916: LD_INT 8
43918: PUSH
43919: LD_INT 13
43921: PUSH
43922: LD_INT 12
43924: PUSH
43925: LD_INT 15
43927: PUSH
43928: LD_INT 11
43930: PUSH
43931: LD_INT 14
43933: PUSH
43934: LD_INT 10
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: IN
43948: IFFALSE 43958
// btype = b_lab ;
43950: LD_ADDR_VAR 0 1
43954: PUSH
43955: LD_INT 6
43957: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43958: LD_VAR 0 6
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: IN
43977: NOT
43978: PUSH
43979: LD_VAR 0 1
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 3
43995: PUSH
43996: LD_INT 6
43998: PUSH
43999: LD_INT 36
44001: PUSH
44002: LD_INT 4
44004: PUSH
44005: LD_INT 5
44007: PUSH
44008: LD_INT 31
44010: PUSH
44011: LD_INT 32
44013: PUSH
44014: LD_INT 33
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: IN
44030: NOT
44031: PUSH
44032: LD_VAR 0 6
44036: PUSH
44037: LD_INT 1
44039: EQUAL
44040: AND
44041: OR
44042: PUSH
44043: LD_VAR 0 1
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 3
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: IN
44058: NOT
44059: PUSH
44060: LD_VAR 0 6
44064: PUSH
44065: LD_INT 2
44067: EQUAL
44068: AND
44069: OR
44070: IFFALSE 44080
// mode = 0 ;
44072: LD_ADDR_VAR 0 6
44076: PUSH
44077: LD_INT 0
44079: ST_TO_ADDR
// case mode of 0 :
44080: LD_VAR 0 6
44084: PUSH
44085: LD_INT 0
44087: DOUBLE
44088: EQUAL
44089: IFTRUE 44093
44091: GO 55546
44093: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44094: LD_ADDR_VAR 0 11
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 3
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44287: LD_ADDR_VAR 0 12
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 3
44444: NEG
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 3
44455: NEG
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44483: LD_ADDR_VAR 0 13
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: LD_INT 3
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 3
44642: NEG
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 3
44654: NEG
44655: PUSH
44656: LD_INT 3
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44682: LD_ADDR_VAR 0 14
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 3
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 3
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44878: LD_ADDR_VAR 0 15
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 3
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45071: LD_ADDR_VAR 0 16
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 3
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 3
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45264: LD_ADDR_VAR 0 17
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45494: LD_ADDR_VAR 0 18
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45724: LD_ADDR_VAR 0 19
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45954: LD_ADDR_VAR 0 20
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46184: LD_ADDR_VAR 0 21
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46414: LD_ADDR_VAR 0 22
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46644: LD_ADDR_VAR 0 23
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 3
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46924: LD_ADDR_VAR 0 24
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 2
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47200: LD_ADDR_VAR 0 25
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47474: LD_ADDR_VAR 0 26
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 3
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47750: LD_ADDR_VAR 0 27
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 3
47983: NEG
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 3
47995: NEG
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48030: LD_ADDR_VAR 0 28
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: LD_INT 3
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 3
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 3
48265: NEG
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 3
48277: NEG
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48312: LD_ADDR_VAR 0 29
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 3
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 3
48556: NEG
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48591: LD_ADDR_VAR 0 30
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 3
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 3
48834: NEG
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48869: LD_ADDR_VAR 0 31
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 3
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 3
49112: NEG
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49147: LD_ADDR_VAR 0 32
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 3
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 3
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 3
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49425: LD_ADDR_VAR 0 33
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: LD_INT 3
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49704: LD_ADDR_VAR 0 34
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: LD_INT 3
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 3
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49984: LD_ADDR_VAR 0 35
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50096: LD_ADDR_VAR 0 36
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50208: LD_ADDR_VAR 0 37
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50320: LD_ADDR_VAR 0 38
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50432: LD_ADDR_VAR 0 39
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50544: LD_ADDR_VAR 0 40
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50656: LD_ADDR_VAR 0 41
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 2
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: NEG
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 3
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: LD_INT 3
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 3
50953: NEG
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 3
50965: NEG
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51006: LD_ADDR_VAR 0 42
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: NEG
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: LD_INT 3
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: LD_INT 3
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: LD_INT 3
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 3
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 3
51303: NEG
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 3
51315: NEG
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51356: LD_ADDR_VAR 0 43
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 2
51533: NEG
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 3
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 3
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 3
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 3
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51704: LD_ADDR_VAR 0 44
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 2
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 3
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 3
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: LD_INT 3
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 3
52001: NEG
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 3
52013: NEG
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52054: LD_ADDR_VAR 0 45
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 3
52300: PUSH
52301: LD_INT 3
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 3
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 3
52351: NEG
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: NEG
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52404: LD_ADDR_VAR 0 46
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 3
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 3
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 3
52711: NEG
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52752: LD_ADDR_VAR 0 47
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52903: LD_ADDR_VAR 0 48
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53050: LD_ADDR_VAR 0 49
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53194: LD_ADDR_VAR 0 50
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53338: LD_ADDR_VAR 0 51
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53485: LD_ADDR_VAR 0 52
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53636: LD_ADDR_VAR 0 53
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53866: LD_ADDR_VAR 0 54
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54096: LD_ADDR_VAR 0 55
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: LD_INT 2
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 2
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54326: LD_ADDR_VAR 0 56
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 2
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54556: LD_ADDR_VAR 0 57
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54786: LD_ADDR_VAR 0 58
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55016: LD_ADDR_VAR 0 59
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55104: LD_ADDR_VAR 0 60
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55192: LD_ADDR_VAR 0 61
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55280: LD_ADDR_VAR 0 62
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55368: LD_ADDR_VAR 0 63
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55456: LD_ADDR_VAR 0 64
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: ST_TO_ADDR
// end ; 1 :
55544: GO 61441
55546: LD_INT 1
55548: DOUBLE
55549: EQUAL
55550: IFTRUE 55554
55552: GO 58177
55554: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55555: LD_ADDR_VAR 0 11
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55599: LD_ADDR_VAR 0 12
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 3
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55640: LD_ADDR_VAR 0 13
55644: PUSH
55645: LD_INT 3
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: LD_INT 3
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55680: LD_ADDR_VAR 0 14
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55721: LD_ADDR_VAR 0 15
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 3
55739: NEG
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: LIST
55764: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55765: LD_ADDR_VAR 0 16
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 3
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55811: LD_ADDR_VAR 0 17
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 3
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55855: LD_ADDR_VAR 0 18
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 3
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: LIST
55895: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55896: LD_ADDR_VAR 0 19
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 3
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55936: LD_ADDR_VAR 0 20
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 3
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 3
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55977: LD_ADDR_VAR 0 21
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56021: LD_ADDR_VAR 0 22
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 3
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 3
56052: NEG
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56067: LD_ADDR_VAR 0 23
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 3
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 4
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: LIST
56110: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56111: LD_ADDR_VAR 0 24
56115: PUSH
56116: LD_INT 3
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 4
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: LIST
56151: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56152: LD_ADDR_VAR 0 25
56156: PUSH
56157: LD_INT 3
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 4
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 3
56179: PUSH
56180: LD_INT 4
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: LIST
56191: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56192: LD_ADDR_VAR 0 26
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 4
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 3
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: LIST
56232: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56233: LD_ADDR_VAR 0 27
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 3
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 4
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56277: LD_ADDR_VAR 0 28
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 3
56296: NEG
56297: PUSH
56298: LD_INT 4
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 4
56308: NEG
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: LIST
56322: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56323: LD_ADDR_VAR 0 29
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 3
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 3
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 4
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 4
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: LD_INT 3
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 5
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 5
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: LD_INT 4
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 6
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 6
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 5
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56478: LD_ADDR_VAR 0 30
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 3
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 3
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 4
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 4
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 4
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 5
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 5
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 5
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 6
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 6
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56621: LD_ADDR_VAR 0 31
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 4
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 4
56668: PUSH
56669: LD_INT 4
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 5
56688: PUSH
56689: LD_INT 4
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 5
56698: PUSH
56699: LD_INT 5
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 4
56708: PUSH
56709: LD_INT 5
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 6
56718: PUSH
56719: LD_INT 5
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 6
56728: PUSH
56729: LD_INT 6
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 5
56738: PUSH
56739: LD_INT 6
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56760: LD_ADDR_VAR 0 32
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 3
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 3
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 4
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 4
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 3
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 5
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 5
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 4
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 6
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 6
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 5
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56903: LD_ADDR_VAR 0 33
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 4
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 4
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 4
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 5
56989: NEG
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 5
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 5
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 6
57023: NEG
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 6
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57058: LD_ADDR_VAR 0 34
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 3
57101: NEG
57102: PUSH
57103: LD_INT 4
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 4
57113: NEG
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 4
57125: NEG
57126: PUSH
57127: LD_INT 4
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 4
57137: NEG
57138: PUSH
57139: LD_INT 5
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 5
57149: NEG
57150: PUSH
57151: LD_INT 4
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 5
57161: NEG
57162: PUSH
57163: LD_INT 5
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 5
57173: NEG
57174: PUSH
57175: LD_INT 6
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 6
57185: NEG
57186: PUSH
57187: LD_INT 5
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 6
57197: NEG
57198: PUSH
57199: LD_INT 6
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57221: LD_ADDR_VAR 0 41
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 3
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: LIST
57264: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57265: LD_ADDR_VAR 0 42
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57306: LD_ADDR_VAR 0 43
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: LIST
57345: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57346: LD_ADDR_VAR 0 44
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57387: LD_ADDR_VAR 0 45
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: NEG
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: LIST
57430: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57431: LD_ADDR_VAR 0 46
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: NEG
57463: PUSH
57464: LD_INT 2
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: LIST
57476: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57477: LD_ADDR_VAR 0 47
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57510: LD_ADDR_VAR 0 48
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57541: LD_ADDR_VAR 0 49
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57570: LD_ADDR_VAR 0 50
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57599: LD_ADDR_VAR 0 51
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57630: LD_ADDR_VAR 0 52
57634: PUSH
57635: LD_INT 3
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57663: LD_ADDR_VAR 0 53
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57707: LD_ADDR_VAR 0 54
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57748: LD_ADDR_VAR 0 55
57752: PUSH
57753: LD_INT 3
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: LD_INT 3
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: LIST
57787: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57788: LD_ADDR_VAR 0 56
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: LIST
57828: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57829: LD_ADDR_VAR 0 57
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: NEG
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57873: LD_ADDR_VAR 0 58
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: NEG
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: LIST
57918: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57919: LD_ADDR_VAR 0 59
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: LIST
57962: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57963: LD_ADDR_VAR 0 60
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58004: LD_ADDR_VAR 0 61
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58044: LD_ADDR_VAR 0 62
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: LIST
58084: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58085: LD_ADDR_VAR 0 63
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: NEG
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58129: LD_ADDR_VAR 0 64
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: LIST
58174: ST_TO_ADDR
// end ; 2 :
58175: GO 61441
58177: LD_INT 2
58179: DOUBLE
58180: EQUAL
58181: IFTRUE 58185
58183: GO 61440
58185: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58186: LD_ADDR_VAR 0 29
58190: PUSH
58191: LD_INT 4
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 4
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 5
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 5
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 4
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: LD_INT 2
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 5
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 3
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 4
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 4
58316: PUSH
58317: LD_INT 4
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 3
58326: PUSH
58327: LD_INT 4
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: LD_INT 3
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: LD_INT 2
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 4
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 4
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 4
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 4
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 5
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 5
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 4
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: LD_INT 5
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 2
58458: NEG
58459: PUSH
58460: LD_INT 3
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 3
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 4
58525: NEG
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 4
58536: NEG
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 4
58548: NEG
58549: PUSH
58550: LD_INT 2
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 4
58571: NEG
58572: PUSH
58573: LD_INT 4
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 4
58583: NEG
58584: PUSH
58585: LD_INT 5
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 3
58595: NEG
58596: PUSH
58597: LD_INT 4
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 4
58619: NEG
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 5
58631: NEG
58632: PUSH
58633: LD_INT 4
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 5
58643: NEG
58644: PUSH
58645: LD_INT 5
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: LD_INT 5
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 5
58667: NEG
58668: PUSH
58669: LD_INT 3
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58724: LD_ADDR_VAR 0 30
58728: PUSH
58729: LD_INT 4
58731: PUSH
58732: LD_INT 4
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 5
58751: PUSH
58752: LD_INT 4
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 5
58761: PUSH
58762: LD_INT 5
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 4
58771: PUSH
58772: LD_INT 5
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: LD_INT 4
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 5
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 3
58811: PUSH
58812: LD_INT 5
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 4
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 4
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: LD_INT 3
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: LD_INT 4
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 4
58914: NEG
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 4
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 4
58959: NEG
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 5
58970: NEG
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 5
58981: NEG
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 5
58993: NEG
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 3
59005: NEG
59006: PUSH
59007: LD_INT 2
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 3
59028: NEG
59029: PUSH
59030: LD_INT 4
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: NEG
59041: PUSH
59042: LD_INT 3
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: NEG
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 3
59064: NEG
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 4
59076: NEG
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 4
59088: NEG
59089: PUSH
59090: LD_INT 4
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 4
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 4
59112: NEG
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 4
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 5
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: LD_INT 4
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: LD_INT 3
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 4
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 5
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 3
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: LD_INT 5
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59271: LD_ADDR_VAR 0 31
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 4
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: LD_INT 4
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: LD_INT 5
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 5
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 4
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: LD_INT 3
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: LD_INT 5
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 3
59382: NEG
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 3
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 4
59427: NEG
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 4
59438: NEG
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 4
59450: NEG
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: LD_INT 4
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 4
59485: NEG
59486: PUSH
59487: LD_INT 5
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 3
59497: NEG
59498: PUSH
59499: LD_INT 4
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 3
59509: NEG
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 4
59521: NEG
59522: PUSH
59523: LD_INT 3
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 5
59533: NEG
59534: PUSH
59535: LD_INT 4
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 5
59545: NEG
59546: PUSH
59547: LD_INT 5
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: LD_INT 5
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 5
59569: NEG
59570: PUSH
59571: LD_INT 3
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: LD_INT 3
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 4
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: LD_INT 3
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: LD_INT 4
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: LD_INT 2
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: LD_INT 4
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 4
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 4
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 5
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 5
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 4
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 3
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 3
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 5
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59821: LD_ADDR_VAR 0 32
59825: PUSH
59826: LD_INT 4
59828: NEG
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 4
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: NEG
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 4
59873: NEG
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 5
59884: NEG
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 5
59895: NEG
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 5
59907: NEG
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 3
59942: NEG
59943: PUSH
59944: LD_INT 4
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: LD_INT 3
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 3
59978: NEG
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 4
59990: NEG
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 4
60002: NEG
60003: PUSH
60004: LD_INT 4
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: LD_INT 4
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 4
60026: NEG
60027: PUSH
60028: LD_INT 2
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 4
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 5
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 4
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 3
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 4
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: LD_INT 5
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 3
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: LD_INT 5
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 3
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 4
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 4
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 2
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 4
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 4
60233: PUSH
60234: LD_INT 4
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 4
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 5
60253: PUSH
60254: LD_INT 4
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 5
60263: PUSH
60264: LD_INT 5
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 4
60273: PUSH
60274: LD_INT 5
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: LD_INT 4
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 3
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 5
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: LD_INT 5
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60368: LD_ADDR_VAR 0 33
60372: PUSH
60373: LD_INT 4
60375: NEG
60376: PUSH
60377: LD_INT 4
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 4
60387: NEG
60388: PUSH
60389: LD_INT 5
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: LD_INT 3
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 4
60423: NEG
60424: PUSH
60425: LD_INT 3
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 5
60435: NEG
60436: PUSH
60437: LD_INT 4
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 5
60447: NEG
60448: PUSH
60449: LD_INT 5
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: LD_INT 5
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 5
60471: NEG
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 3
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: LD_INT 4
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 3
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 2
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: LD_INT 3
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: LD_INT 4
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 4
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 4
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 4
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 5
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 5
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 4
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 3
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 3
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 5
60668: PUSH
60669: LD_INT 2
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 3
60678: PUSH
60679: LD_INT 3
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 3
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 4
60698: PUSH
60699: LD_INT 3
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 4
60708: PUSH
60709: LD_INT 4
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: LD_INT 4
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: LD_INT 3
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: LD_INT 2
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: LD_INT 2
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 4
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: LD_INT 4
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 4
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: LD_INT 5
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 5
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: LD_INT 4
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 3
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 5
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 2
60850: NEG
60851: PUSH
60852: LD_INT 3
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60906: LD_ADDR_VAR 0 34
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 4
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 5
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: LD_INT 4
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: LD_INT 3
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: LD_INT 4
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: LD_INT 5
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: LD_INT 3
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: LD_INT 5
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 3
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 4
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 4
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 3
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 2
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 4
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 4
61108: PUSH
61109: LD_INT 4
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 4
61118: PUSH
61119: LD_INT 3
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 5
61128: PUSH
61129: LD_INT 4
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 5
61138: PUSH
61139: LD_INT 5
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 4
61148: PUSH
61149: LD_INT 5
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 3
61158: PUSH
61159: LD_INT 4
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 3
61168: PUSH
61169: LD_INT 3
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 5
61178: PUSH
61179: LD_INT 3
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 3
61188: PUSH
61189: LD_INT 5
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: LD_INT 3
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: LD_INT 4
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: LD_INT 4
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 3
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: PUSH
61271: LD_INT 4
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: LD_INT 2
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 4
61291: NEG
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 4
61302: NEG
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 3
61314: NEG
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 4
61336: NEG
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 5
61347: NEG
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 5
61358: NEG
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 5
61370: NEG
61371: PUSH
61372: LD_INT 2
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: NEG
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: ST_TO_ADDR
// end ; end ;
61438: GO 61441
61440: POP
// case btype of b_depot , b_warehouse :
61441: LD_VAR 0 1
61445: PUSH
61446: LD_INT 0
61448: DOUBLE
61449: EQUAL
61450: IFTRUE 61460
61452: LD_INT 1
61454: DOUBLE
61455: EQUAL
61456: IFTRUE 61460
61458: GO 61661
61460: POP
// case nation of nation_american :
61461: LD_VAR 0 5
61465: PUSH
61466: LD_INT 1
61468: DOUBLE
61469: EQUAL
61470: IFTRUE 61474
61472: GO 61530
61474: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61475: LD_ADDR_VAR 0 9
61479: PUSH
61480: LD_VAR 0 11
61484: PUSH
61485: LD_VAR 0 12
61489: PUSH
61490: LD_VAR 0 13
61494: PUSH
61495: LD_VAR 0 14
61499: PUSH
61500: LD_VAR 0 15
61504: PUSH
61505: LD_VAR 0 16
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: PUSH
61518: LD_VAR 0 4
61522: PUSH
61523: LD_INT 1
61525: PLUS
61526: ARRAY
61527: ST_TO_ADDR
61528: GO 61659
61530: LD_INT 2
61532: DOUBLE
61533: EQUAL
61534: IFTRUE 61538
61536: GO 61594
61538: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61539: LD_ADDR_VAR 0 9
61543: PUSH
61544: LD_VAR 0 17
61548: PUSH
61549: LD_VAR 0 18
61553: PUSH
61554: LD_VAR 0 19
61558: PUSH
61559: LD_VAR 0 20
61563: PUSH
61564: LD_VAR 0 21
61568: PUSH
61569: LD_VAR 0 22
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: PUSH
61582: LD_VAR 0 4
61586: PUSH
61587: LD_INT 1
61589: PLUS
61590: ARRAY
61591: ST_TO_ADDR
61592: GO 61659
61594: LD_INT 3
61596: DOUBLE
61597: EQUAL
61598: IFTRUE 61602
61600: GO 61658
61602: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61603: LD_ADDR_VAR 0 9
61607: PUSH
61608: LD_VAR 0 23
61612: PUSH
61613: LD_VAR 0 24
61617: PUSH
61618: LD_VAR 0 25
61622: PUSH
61623: LD_VAR 0 26
61627: PUSH
61628: LD_VAR 0 27
61632: PUSH
61633: LD_VAR 0 28
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: PUSH
61646: LD_VAR 0 4
61650: PUSH
61651: LD_INT 1
61653: PLUS
61654: ARRAY
61655: ST_TO_ADDR
61656: GO 61659
61658: POP
61659: GO 62214
61661: LD_INT 2
61663: DOUBLE
61664: EQUAL
61665: IFTRUE 61675
61667: LD_INT 3
61669: DOUBLE
61670: EQUAL
61671: IFTRUE 61675
61673: GO 61731
61675: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61676: LD_ADDR_VAR 0 9
61680: PUSH
61681: LD_VAR 0 29
61685: PUSH
61686: LD_VAR 0 30
61690: PUSH
61691: LD_VAR 0 31
61695: PUSH
61696: LD_VAR 0 32
61700: PUSH
61701: LD_VAR 0 33
61705: PUSH
61706: LD_VAR 0 34
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: PUSH
61719: LD_VAR 0 4
61723: PUSH
61724: LD_INT 1
61726: PLUS
61727: ARRAY
61728: ST_TO_ADDR
61729: GO 62214
61731: LD_INT 16
61733: DOUBLE
61734: EQUAL
61735: IFTRUE 61793
61737: LD_INT 17
61739: DOUBLE
61740: EQUAL
61741: IFTRUE 61793
61743: LD_INT 18
61745: DOUBLE
61746: EQUAL
61747: IFTRUE 61793
61749: LD_INT 19
61751: DOUBLE
61752: EQUAL
61753: IFTRUE 61793
61755: LD_INT 22
61757: DOUBLE
61758: EQUAL
61759: IFTRUE 61793
61761: LD_INT 20
61763: DOUBLE
61764: EQUAL
61765: IFTRUE 61793
61767: LD_INT 21
61769: DOUBLE
61770: EQUAL
61771: IFTRUE 61793
61773: LD_INT 23
61775: DOUBLE
61776: EQUAL
61777: IFTRUE 61793
61779: LD_INT 24
61781: DOUBLE
61782: EQUAL
61783: IFTRUE 61793
61785: LD_INT 25
61787: DOUBLE
61788: EQUAL
61789: IFTRUE 61793
61791: GO 61849
61793: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61794: LD_ADDR_VAR 0 9
61798: PUSH
61799: LD_VAR 0 35
61803: PUSH
61804: LD_VAR 0 36
61808: PUSH
61809: LD_VAR 0 37
61813: PUSH
61814: LD_VAR 0 38
61818: PUSH
61819: LD_VAR 0 39
61823: PUSH
61824: LD_VAR 0 40
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: PUSH
61837: LD_VAR 0 4
61841: PUSH
61842: LD_INT 1
61844: PLUS
61845: ARRAY
61846: ST_TO_ADDR
61847: GO 62214
61849: LD_INT 6
61851: DOUBLE
61852: EQUAL
61853: IFTRUE 61905
61855: LD_INT 7
61857: DOUBLE
61858: EQUAL
61859: IFTRUE 61905
61861: LD_INT 8
61863: DOUBLE
61864: EQUAL
61865: IFTRUE 61905
61867: LD_INT 13
61869: DOUBLE
61870: EQUAL
61871: IFTRUE 61905
61873: LD_INT 12
61875: DOUBLE
61876: EQUAL
61877: IFTRUE 61905
61879: LD_INT 15
61881: DOUBLE
61882: EQUAL
61883: IFTRUE 61905
61885: LD_INT 11
61887: DOUBLE
61888: EQUAL
61889: IFTRUE 61905
61891: LD_INT 14
61893: DOUBLE
61894: EQUAL
61895: IFTRUE 61905
61897: LD_INT 10
61899: DOUBLE
61900: EQUAL
61901: IFTRUE 61905
61903: GO 61961
61905: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61906: LD_ADDR_VAR 0 9
61910: PUSH
61911: LD_VAR 0 41
61915: PUSH
61916: LD_VAR 0 42
61920: PUSH
61921: LD_VAR 0 43
61925: PUSH
61926: LD_VAR 0 44
61930: PUSH
61931: LD_VAR 0 45
61935: PUSH
61936: LD_VAR 0 46
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: PUSH
61949: LD_VAR 0 4
61953: PUSH
61954: LD_INT 1
61956: PLUS
61957: ARRAY
61958: ST_TO_ADDR
61959: GO 62214
61961: LD_INT 36
61963: DOUBLE
61964: EQUAL
61965: IFTRUE 61969
61967: GO 62025
61969: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61970: LD_ADDR_VAR 0 9
61974: PUSH
61975: LD_VAR 0 47
61979: PUSH
61980: LD_VAR 0 48
61984: PUSH
61985: LD_VAR 0 49
61989: PUSH
61990: LD_VAR 0 50
61994: PUSH
61995: LD_VAR 0 51
61999: PUSH
62000: LD_VAR 0 52
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: PUSH
62013: LD_VAR 0 4
62017: PUSH
62018: LD_INT 1
62020: PLUS
62021: ARRAY
62022: ST_TO_ADDR
62023: GO 62214
62025: LD_INT 4
62027: DOUBLE
62028: EQUAL
62029: IFTRUE 62051
62031: LD_INT 5
62033: DOUBLE
62034: EQUAL
62035: IFTRUE 62051
62037: LD_INT 34
62039: DOUBLE
62040: EQUAL
62041: IFTRUE 62051
62043: LD_INT 37
62045: DOUBLE
62046: EQUAL
62047: IFTRUE 62051
62049: GO 62107
62051: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62052: LD_ADDR_VAR 0 9
62056: PUSH
62057: LD_VAR 0 53
62061: PUSH
62062: LD_VAR 0 54
62066: PUSH
62067: LD_VAR 0 55
62071: PUSH
62072: LD_VAR 0 56
62076: PUSH
62077: LD_VAR 0 57
62081: PUSH
62082: LD_VAR 0 58
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: PUSH
62095: LD_VAR 0 4
62099: PUSH
62100: LD_INT 1
62102: PLUS
62103: ARRAY
62104: ST_TO_ADDR
62105: GO 62214
62107: LD_INT 31
62109: DOUBLE
62110: EQUAL
62111: IFTRUE 62157
62113: LD_INT 32
62115: DOUBLE
62116: EQUAL
62117: IFTRUE 62157
62119: LD_INT 33
62121: DOUBLE
62122: EQUAL
62123: IFTRUE 62157
62125: LD_INT 27
62127: DOUBLE
62128: EQUAL
62129: IFTRUE 62157
62131: LD_INT 26
62133: DOUBLE
62134: EQUAL
62135: IFTRUE 62157
62137: LD_INT 28
62139: DOUBLE
62140: EQUAL
62141: IFTRUE 62157
62143: LD_INT 29
62145: DOUBLE
62146: EQUAL
62147: IFTRUE 62157
62149: LD_INT 30
62151: DOUBLE
62152: EQUAL
62153: IFTRUE 62157
62155: GO 62213
62157: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62158: LD_ADDR_VAR 0 9
62162: PUSH
62163: LD_VAR 0 59
62167: PUSH
62168: LD_VAR 0 60
62172: PUSH
62173: LD_VAR 0 61
62177: PUSH
62178: LD_VAR 0 62
62182: PUSH
62183: LD_VAR 0 63
62187: PUSH
62188: LD_VAR 0 64
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: PUSH
62201: LD_VAR 0 4
62205: PUSH
62206: LD_INT 1
62208: PLUS
62209: ARRAY
62210: ST_TO_ADDR
62211: GO 62214
62213: POP
// temp_list2 = [ ] ;
62214: LD_ADDR_VAR 0 10
62218: PUSH
62219: EMPTY
62220: ST_TO_ADDR
// for i in temp_list do
62221: LD_ADDR_VAR 0 8
62225: PUSH
62226: LD_VAR 0 9
62230: PUSH
62231: FOR_IN
62232: IFFALSE 62284
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62234: LD_ADDR_VAR 0 10
62238: PUSH
62239: LD_VAR 0 10
62243: PUSH
62244: LD_VAR 0 8
62248: PUSH
62249: LD_INT 1
62251: ARRAY
62252: PUSH
62253: LD_VAR 0 2
62257: PLUS
62258: PUSH
62259: LD_VAR 0 8
62263: PUSH
62264: LD_INT 2
62266: ARRAY
62267: PUSH
62268: LD_VAR 0 3
62272: PLUS
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: EMPTY
62279: LIST
62280: ADD
62281: ST_TO_ADDR
62282: GO 62231
62284: POP
62285: POP
// result = temp_list2 ;
62286: LD_ADDR_VAR 0 7
62290: PUSH
62291: LD_VAR 0 10
62295: ST_TO_ADDR
// end ;
62296: LD_VAR 0 7
62300: RET
// export function EnemyInRange ( unit , dist ) ; begin
62301: LD_INT 0
62303: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62304: LD_ADDR_VAR 0 3
62308: PUSH
62309: LD_VAR 0 1
62313: PPUSH
62314: CALL_OW 255
62318: PPUSH
62319: LD_VAR 0 1
62323: PPUSH
62324: CALL_OW 250
62328: PPUSH
62329: LD_VAR 0 1
62333: PPUSH
62334: CALL_OW 251
62338: PPUSH
62339: LD_VAR 0 2
62343: PPUSH
62344: CALL 35674 0 4
62348: PUSH
62349: LD_INT 4
62351: ARRAY
62352: ST_TO_ADDR
// end ;
62353: LD_VAR 0 3
62357: RET
// export function PlayerSeeMe ( unit ) ; begin
62358: LD_INT 0
62360: PPUSH
// result := See ( your_side , unit ) ;
62361: LD_ADDR_VAR 0 2
62365: PUSH
62366: LD_OWVAR 2
62370: PPUSH
62371: LD_VAR 0 1
62375: PPUSH
62376: CALL_OW 292
62380: ST_TO_ADDR
// end ;
62381: LD_VAR 0 2
62385: RET
// export function ReverseDir ( unit ) ; begin
62386: LD_INT 0
62388: PPUSH
// if not unit then
62389: LD_VAR 0 1
62393: NOT
62394: IFFALSE 62398
// exit ;
62396: GO 62421
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62398: LD_ADDR_VAR 0 2
62402: PUSH
62403: LD_VAR 0 1
62407: PPUSH
62408: CALL_OW 254
62412: PUSH
62413: LD_INT 3
62415: PLUS
62416: PUSH
62417: LD_INT 6
62419: MOD
62420: ST_TO_ADDR
// end ;
62421: LD_VAR 0 2
62425: RET
// export function ReverseArray ( array ) ; var i ; begin
62426: LD_INT 0
62428: PPUSH
62429: PPUSH
// if not array then
62430: LD_VAR 0 1
62434: NOT
62435: IFFALSE 62439
// exit ;
62437: GO 62494
// result := [ ] ;
62439: LD_ADDR_VAR 0 2
62443: PUSH
62444: EMPTY
62445: ST_TO_ADDR
// for i := array downto 1 do
62446: LD_ADDR_VAR 0 3
62450: PUSH
62451: DOUBLE
62452: LD_VAR 0 1
62456: INC
62457: ST_TO_ADDR
62458: LD_INT 1
62460: PUSH
62461: FOR_DOWNTO
62462: IFFALSE 62492
// result := Join ( result , array [ i ] ) ;
62464: LD_ADDR_VAR 0 2
62468: PUSH
62469: LD_VAR 0 2
62473: PPUSH
62474: LD_VAR 0 1
62478: PUSH
62479: LD_VAR 0 3
62483: ARRAY
62484: PPUSH
62485: CALL 67150 0 2
62489: ST_TO_ADDR
62490: GO 62461
62492: POP
62493: POP
// end ;
62494: LD_VAR 0 2
62498: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62499: LD_INT 0
62501: PPUSH
62502: PPUSH
62503: PPUSH
62504: PPUSH
62505: PPUSH
62506: PPUSH
// if not unit or not hexes then
62507: LD_VAR 0 1
62511: NOT
62512: PUSH
62513: LD_VAR 0 2
62517: NOT
62518: OR
62519: IFFALSE 62523
// exit ;
62521: GO 62646
// dist := 9999 ;
62523: LD_ADDR_VAR 0 5
62527: PUSH
62528: LD_INT 9999
62530: ST_TO_ADDR
// for i = 1 to hexes do
62531: LD_ADDR_VAR 0 4
62535: PUSH
62536: DOUBLE
62537: LD_INT 1
62539: DEC
62540: ST_TO_ADDR
62541: LD_VAR 0 2
62545: PUSH
62546: FOR_TO
62547: IFFALSE 62634
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62549: LD_ADDR_VAR 0 6
62553: PUSH
62554: LD_VAR 0 1
62558: PPUSH
62559: LD_VAR 0 2
62563: PUSH
62564: LD_VAR 0 4
62568: ARRAY
62569: PUSH
62570: LD_INT 1
62572: ARRAY
62573: PPUSH
62574: LD_VAR 0 2
62578: PUSH
62579: LD_VAR 0 4
62583: ARRAY
62584: PUSH
62585: LD_INT 2
62587: ARRAY
62588: PPUSH
62589: CALL_OW 297
62593: ST_TO_ADDR
// if tdist < dist then
62594: LD_VAR 0 6
62598: PUSH
62599: LD_VAR 0 5
62603: LESS
62604: IFFALSE 62632
// begin hex := hexes [ i ] ;
62606: LD_ADDR_VAR 0 8
62610: PUSH
62611: LD_VAR 0 2
62615: PUSH
62616: LD_VAR 0 4
62620: ARRAY
62621: ST_TO_ADDR
// dist := tdist ;
62622: LD_ADDR_VAR 0 5
62626: PUSH
62627: LD_VAR 0 6
62631: ST_TO_ADDR
// end ; end ;
62632: GO 62546
62634: POP
62635: POP
// result := hex ;
62636: LD_ADDR_VAR 0 3
62640: PUSH
62641: LD_VAR 0 8
62645: ST_TO_ADDR
// end ;
62646: LD_VAR 0 3
62650: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62651: LD_INT 0
62653: PPUSH
62654: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62655: LD_VAR 0 1
62659: NOT
62660: PUSH
62661: LD_VAR 0 1
62665: PUSH
62666: LD_INT 21
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 23
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PPUSH
62690: CALL_OW 69
62694: IN
62695: NOT
62696: OR
62697: IFFALSE 62701
// exit ;
62699: GO 62748
// for i = 1 to 3 do
62701: LD_ADDR_VAR 0 3
62705: PUSH
62706: DOUBLE
62707: LD_INT 1
62709: DEC
62710: ST_TO_ADDR
62711: LD_INT 3
62713: PUSH
62714: FOR_TO
62715: IFFALSE 62746
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 250
62726: PPUSH
62727: LD_VAR 0 1
62731: PPUSH
62732: CALL_OW 251
62736: PPUSH
62737: LD_INT 1
62739: PPUSH
62740: CALL_OW 453
62744: GO 62714
62746: POP
62747: POP
// end ;
62748: LD_VAR 0 2
62752: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62753: LD_INT 0
62755: PPUSH
62756: PPUSH
62757: PPUSH
62758: PPUSH
62759: PPUSH
62760: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62761: LD_VAR 0 1
62765: NOT
62766: PUSH
62767: LD_VAR 0 2
62771: NOT
62772: OR
62773: PUSH
62774: LD_VAR 0 1
62778: PPUSH
62779: CALL_OW 314
62783: OR
62784: IFFALSE 62788
// exit ;
62786: GO 63255
// if GetLives ( i ) < 250 then
62788: LD_VAR 0 4
62792: PPUSH
62793: CALL_OW 256
62797: PUSH
62798: LD_INT 250
62800: LESS
62801: IFFALSE 62814
// begin ComAutodestruct ( i ) ;
62803: LD_VAR 0 4
62807: PPUSH
62808: CALL 62651 0 1
// exit ;
62812: GO 63255
// end ; x := GetX ( enemy_unit ) ;
62814: LD_ADDR_VAR 0 7
62818: PUSH
62819: LD_VAR 0 2
62823: PPUSH
62824: CALL_OW 250
62828: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62829: LD_ADDR_VAR 0 8
62833: PUSH
62834: LD_VAR 0 2
62838: PPUSH
62839: CALL_OW 251
62843: ST_TO_ADDR
// if not x or not y then
62844: LD_VAR 0 7
62848: NOT
62849: PUSH
62850: LD_VAR 0 8
62854: NOT
62855: OR
62856: IFFALSE 62860
// exit ;
62858: GO 63255
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62860: LD_ADDR_VAR 0 6
62864: PUSH
62865: LD_VAR 0 7
62869: PPUSH
62870: LD_INT 0
62872: PPUSH
62873: LD_INT 4
62875: PPUSH
62876: CALL_OW 272
62880: PUSH
62881: LD_VAR 0 8
62885: PPUSH
62886: LD_INT 0
62888: PPUSH
62889: LD_INT 4
62891: PPUSH
62892: CALL_OW 273
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_VAR 0 7
62905: PPUSH
62906: LD_INT 1
62908: PPUSH
62909: LD_INT 4
62911: PPUSH
62912: CALL_OW 272
62916: PUSH
62917: LD_VAR 0 8
62921: PPUSH
62922: LD_INT 1
62924: PPUSH
62925: LD_INT 4
62927: PPUSH
62928: CALL_OW 273
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_VAR 0 7
62941: PPUSH
62942: LD_INT 2
62944: PPUSH
62945: LD_INT 4
62947: PPUSH
62948: CALL_OW 272
62952: PUSH
62953: LD_VAR 0 8
62957: PPUSH
62958: LD_INT 2
62960: PPUSH
62961: LD_INT 4
62963: PPUSH
62964: CALL_OW 273
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_VAR 0 7
62977: PPUSH
62978: LD_INT 3
62980: PPUSH
62981: LD_INT 4
62983: PPUSH
62984: CALL_OW 272
62988: PUSH
62989: LD_VAR 0 8
62993: PPUSH
62994: LD_INT 3
62996: PPUSH
62997: LD_INT 4
62999: PPUSH
63000: CALL_OW 273
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_VAR 0 7
63013: PPUSH
63014: LD_INT 4
63016: PPUSH
63017: LD_INT 4
63019: PPUSH
63020: CALL_OW 272
63024: PUSH
63025: LD_VAR 0 8
63029: PPUSH
63030: LD_INT 4
63032: PPUSH
63033: LD_INT 4
63035: PPUSH
63036: CALL_OW 273
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_VAR 0 7
63049: PPUSH
63050: LD_INT 5
63052: PPUSH
63053: LD_INT 4
63055: PPUSH
63056: CALL_OW 272
63060: PUSH
63061: LD_VAR 0 8
63065: PPUSH
63066: LD_INT 5
63068: PPUSH
63069: LD_INT 4
63071: PPUSH
63072: CALL_OW 273
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: ST_TO_ADDR
// for i = tmp downto 1 do
63089: LD_ADDR_VAR 0 4
63093: PUSH
63094: DOUBLE
63095: LD_VAR 0 6
63099: INC
63100: ST_TO_ADDR
63101: LD_INT 1
63103: PUSH
63104: FOR_DOWNTO
63105: IFFALSE 63206
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63107: LD_VAR 0 6
63111: PUSH
63112: LD_VAR 0 4
63116: ARRAY
63117: PUSH
63118: LD_INT 1
63120: ARRAY
63121: PPUSH
63122: LD_VAR 0 6
63126: PUSH
63127: LD_VAR 0 4
63131: ARRAY
63132: PUSH
63133: LD_INT 2
63135: ARRAY
63136: PPUSH
63137: CALL_OW 488
63141: NOT
63142: PUSH
63143: LD_VAR 0 6
63147: PUSH
63148: LD_VAR 0 4
63152: ARRAY
63153: PUSH
63154: LD_INT 1
63156: ARRAY
63157: PPUSH
63158: LD_VAR 0 6
63162: PUSH
63163: LD_VAR 0 4
63167: ARRAY
63168: PUSH
63169: LD_INT 2
63171: ARRAY
63172: PPUSH
63173: CALL_OW 428
63177: PUSH
63178: LD_INT 0
63180: NONEQUAL
63181: OR
63182: IFFALSE 63204
// tmp := Delete ( tmp , i ) ;
63184: LD_ADDR_VAR 0 6
63188: PUSH
63189: LD_VAR 0 6
63193: PPUSH
63194: LD_VAR 0 4
63198: PPUSH
63199: CALL_OW 3
63203: ST_TO_ADDR
63204: GO 63104
63206: POP
63207: POP
// j := GetClosestHex ( unit , tmp ) ;
63208: LD_ADDR_VAR 0 5
63212: PUSH
63213: LD_VAR 0 1
63217: PPUSH
63218: LD_VAR 0 6
63222: PPUSH
63223: CALL 62499 0 2
63227: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63228: LD_VAR 0 1
63232: PPUSH
63233: LD_VAR 0 5
63237: PUSH
63238: LD_INT 1
63240: ARRAY
63241: PPUSH
63242: LD_VAR 0 5
63246: PUSH
63247: LD_INT 2
63249: ARRAY
63250: PPUSH
63251: CALL_OW 111
// end ;
63255: LD_VAR 0 3
63259: RET
// export function PrepareApemanSoldier ( ) ; begin
63260: LD_INT 0
63262: PPUSH
// uc_nation := 0 ;
63263: LD_ADDR_OWVAR 21
63267: PUSH
63268: LD_INT 0
63270: ST_TO_ADDR
// hc_sex := sex_male ;
63271: LD_ADDR_OWVAR 27
63275: PUSH
63276: LD_INT 1
63278: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63279: LD_ADDR_OWVAR 28
63283: PUSH
63284: LD_INT 15
63286: ST_TO_ADDR
// hc_gallery :=  ;
63287: LD_ADDR_OWVAR 33
63291: PUSH
63292: LD_STRING 
63294: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63295: LD_ADDR_OWVAR 31
63299: PUSH
63300: LD_INT 0
63302: PPUSH
63303: LD_INT 3
63305: PPUSH
63306: CALL_OW 12
63310: PUSH
63311: LD_INT 0
63313: PPUSH
63314: LD_INT 3
63316: PPUSH
63317: CALL_OW 12
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: ST_TO_ADDR
// end ;
63334: LD_VAR 0 1
63338: RET
// export function PrepareApemanEngineer ( ) ; begin
63339: LD_INT 0
63341: PPUSH
// uc_nation := 0 ;
63342: LD_ADDR_OWVAR 21
63346: PUSH
63347: LD_INT 0
63349: ST_TO_ADDR
// hc_sex := sex_male ;
63350: LD_ADDR_OWVAR 27
63354: PUSH
63355: LD_INT 1
63357: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63358: LD_ADDR_OWVAR 28
63362: PUSH
63363: LD_INT 16
63365: ST_TO_ADDR
// hc_gallery :=  ;
63366: LD_ADDR_OWVAR 33
63370: PUSH
63371: LD_STRING 
63373: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63374: LD_ADDR_OWVAR 31
63378: PUSH
63379: LD_INT 0
63381: PPUSH
63382: LD_INT 3
63384: PPUSH
63385: CALL_OW 12
63389: PUSH
63390: LD_INT 0
63392: PPUSH
63393: LD_INT 3
63395: PPUSH
63396: CALL_OW 12
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: ST_TO_ADDR
// end ;
63413: LD_VAR 0 1
63417: RET
// export function PrepareApeman ( agressivity ) ; begin
63418: LD_INT 0
63420: PPUSH
// uc_side := 0 ;
63421: LD_ADDR_OWVAR 20
63425: PUSH
63426: LD_INT 0
63428: ST_TO_ADDR
// uc_nation := 0 ;
63429: LD_ADDR_OWVAR 21
63433: PUSH
63434: LD_INT 0
63436: ST_TO_ADDR
// hc_sex := sex_male ;
63437: LD_ADDR_OWVAR 27
63441: PUSH
63442: LD_INT 1
63444: ST_TO_ADDR
// hc_class := class_apeman ;
63445: LD_ADDR_OWVAR 28
63449: PUSH
63450: LD_INT 12
63452: ST_TO_ADDR
// hc_gallery :=  ;
63453: LD_ADDR_OWVAR 33
63457: PUSH
63458: LD_STRING 
63460: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63461: LD_ADDR_OWVAR 35
63465: PUSH
63466: LD_VAR 0 1
63470: NEG
63471: PPUSH
63472: LD_VAR 0 1
63476: PPUSH
63477: CALL_OW 12
63481: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63482: LD_ADDR_OWVAR 31
63486: PUSH
63487: LD_INT 0
63489: PPUSH
63490: LD_INT 3
63492: PPUSH
63493: CALL_OW 12
63497: PUSH
63498: LD_INT 0
63500: PPUSH
63501: LD_INT 3
63503: PPUSH
63504: CALL_OW 12
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: ST_TO_ADDR
// end ;
63521: LD_VAR 0 2
63525: RET
// export function PrepareTiger ( agressivity ) ; begin
63526: LD_INT 0
63528: PPUSH
// uc_side := 0 ;
63529: LD_ADDR_OWVAR 20
63533: PUSH
63534: LD_INT 0
63536: ST_TO_ADDR
// uc_nation := 0 ;
63537: LD_ADDR_OWVAR 21
63541: PUSH
63542: LD_INT 0
63544: ST_TO_ADDR
// hc_class := class_tiger ;
63545: LD_ADDR_OWVAR 28
63549: PUSH
63550: LD_INT 14
63552: ST_TO_ADDR
// hc_gallery :=  ;
63553: LD_ADDR_OWVAR 33
63557: PUSH
63558: LD_STRING 
63560: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63561: LD_ADDR_OWVAR 35
63565: PUSH
63566: LD_VAR 0 1
63570: NEG
63571: PPUSH
63572: LD_VAR 0 1
63576: PPUSH
63577: CALL_OW 12
63581: ST_TO_ADDR
// end ;
63582: LD_VAR 0 2
63586: RET
// export function PrepareEnchidna ( ) ; begin
63587: LD_INT 0
63589: PPUSH
// uc_side := 0 ;
63590: LD_ADDR_OWVAR 20
63594: PUSH
63595: LD_INT 0
63597: ST_TO_ADDR
// uc_nation := 0 ;
63598: LD_ADDR_OWVAR 21
63602: PUSH
63603: LD_INT 0
63605: ST_TO_ADDR
// hc_class := class_baggie ;
63606: LD_ADDR_OWVAR 28
63610: PUSH
63611: LD_INT 13
63613: ST_TO_ADDR
// hc_gallery :=  ;
63614: LD_ADDR_OWVAR 33
63618: PUSH
63619: LD_STRING 
63621: ST_TO_ADDR
// end ;
63622: LD_VAR 0 1
63626: RET
// export function PrepareFrog ( ) ; begin
63627: LD_INT 0
63629: PPUSH
// uc_side := 0 ;
63630: LD_ADDR_OWVAR 20
63634: PUSH
63635: LD_INT 0
63637: ST_TO_ADDR
// uc_nation := 0 ;
63638: LD_ADDR_OWVAR 21
63642: PUSH
63643: LD_INT 0
63645: ST_TO_ADDR
// hc_class := class_frog ;
63646: LD_ADDR_OWVAR 28
63650: PUSH
63651: LD_INT 19
63653: ST_TO_ADDR
// hc_gallery :=  ;
63654: LD_ADDR_OWVAR 33
63658: PUSH
63659: LD_STRING 
63661: ST_TO_ADDR
// end ;
63662: LD_VAR 0 1
63666: RET
// export function PrepareFish ( ) ; begin
63667: LD_INT 0
63669: PPUSH
// uc_side := 0 ;
63670: LD_ADDR_OWVAR 20
63674: PUSH
63675: LD_INT 0
63677: ST_TO_ADDR
// uc_nation := 0 ;
63678: LD_ADDR_OWVAR 21
63682: PUSH
63683: LD_INT 0
63685: ST_TO_ADDR
// hc_class := class_fish ;
63686: LD_ADDR_OWVAR 28
63690: PUSH
63691: LD_INT 20
63693: ST_TO_ADDR
// hc_gallery :=  ;
63694: LD_ADDR_OWVAR 33
63698: PUSH
63699: LD_STRING 
63701: ST_TO_ADDR
// end ;
63702: LD_VAR 0 1
63706: RET
// export function PrepareBird ( ) ; begin
63707: LD_INT 0
63709: PPUSH
// uc_side := 0 ;
63710: LD_ADDR_OWVAR 20
63714: PUSH
63715: LD_INT 0
63717: ST_TO_ADDR
// uc_nation := 0 ;
63718: LD_ADDR_OWVAR 21
63722: PUSH
63723: LD_INT 0
63725: ST_TO_ADDR
// hc_class := class_phororhacos ;
63726: LD_ADDR_OWVAR 28
63730: PUSH
63731: LD_INT 18
63733: ST_TO_ADDR
// hc_gallery :=  ;
63734: LD_ADDR_OWVAR 33
63738: PUSH
63739: LD_STRING 
63741: ST_TO_ADDR
// end ;
63742: LD_VAR 0 1
63746: RET
// export function PrepareHorse ( ) ; begin
63747: LD_INT 0
63749: PPUSH
// uc_side := 0 ;
63750: LD_ADDR_OWVAR 20
63754: PUSH
63755: LD_INT 0
63757: ST_TO_ADDR
// uc_nation := 0 ;
63758: LD_ADDR_OWVAR 21
63762: PUSH
63763: LD_INT 0
63765: ST_TO_ADDR
// hc_class := class_horse ;
63766: LD_ADDR_OWVAR 28
63770: PUSH
63771: LD_INT 21
63773: ST_TO_ADDR
// hc_gallery :=  ;
63774: LD_ADDR_OWVAR 33
63778: PUSH
63779: LD_STRING 
63781: ST_TO_ADDR
// end ;
63782: LD_VAR 0 1
63786: RET
// export function PrepareMastodont ( ) ; begin
63787: LD_INT 0
63789: PPUSH
// uc_side := 0 ;
63790: LD_ADDR_OWVAR 20
63794: PUSH
63795: LD_INT 0
63797: ST_TO_ADDR
// uc_nation := 0 ;
63798: LD_ADDR_OWVAR 21
63802: PUSH
63803: LD_INT 0
63805: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63806: LD_ADDR_OWVAR 37
63810: PUSH
63811: LD_INT 31
63813: ST_TO_ADDR
// vc_control := control_rider ;
63814: LD_ADDR_OWVAR 38
63818: PUSH
63819: LD_INT 4
63821: ST_TO_ADDR
// end ;
63822: LD_VAR 0 1
63826: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63827: LD_INT 0
63829: PPUSH
63830: PPUSH
63831: PPUSH
// uc_side = 0 ;
63832: LD_ADDR_OWVAR 20
63836: PUSH
63837: LD_INT 0
63839: ST_TO_ADDR
// uc_nation = 0 ;
63840: LD_ADDR_OWVAR 21
63844: PUSH
63845: LD_INT 0
63847: ST_TO_ADDR
// InitHc_All ( ) ;
63848: CALL_OW 584
// InitVc ;
63852: CALL_OW 20
// if mastodonts then
63856: LD_VAR 0 6
63860: IFFALSE 63927
// for i = 1 to mastodonts do
63862: LD_ADDR_VAR 0 11
63866: PUSH
63867: DOUBLE
63868: LD_INT 1
63870: DEC
63871: ST_TO_ADDR
63872: LD_VAR 0 6
63876: PUSH
63877: FOR_TO
63878: IFFALSE 63925
// begin vc_chassis := 31 ;
63880: LD_ADDR_OWVAR 37
63884: PUSH
63885: LD_INT 31
63887: ST_TO_ADDR
// vc_control := control_rider ;
63888: LD_ADDR_OWVAR 38
63892: PUSH
63893: LD_INT 4
63895: ST_TO_ADDR
// animal := CreateVehicle ;
63896: LD_ADDR_VAR 0 12
63900: PUSH
63901: CALL_OW 45
63905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63906: LD_VAR 0 12
63910: PPUSH
63911: LD_VAR 0 8
63915: PPUSH
63916: LD_INT 0
63918: PPUSH
63919: CALL 66055 0 3
// end ;
63923: GO 63877
63925: POP
63926: POP
// if horses then
63927: LD_VAR 0 5
63931: IFFALSE 63998
// for i = 1 to horses do
63933: LD_ADDR_VAR 0 11
63937: PUSH
63938: DOUBLE
63939: LD_INT 1
63941: DEC
63942: ST_TO_ADDR
63943: LD_VAR 0 5
63947: PUSH
63948: FOR_TO
63949: IFFALSE 63996
// begin hc_class := 21 ;
63951: LD_ADDR_OWVAR 28
63955: PUSH
63956: LD_INT 21
63958: ST_TO_ADDR
// hc_gallery :=  ;
63959: LD_ADDR_OWVAR 33
63963: PUSH
63964: LD_STRING 
63966: ST_TO_ADDR
// animal := CreateHuman ;
63967: LD_ADDR_VAR 0 12
63971: PUSH
63972: CALL_OW 44
63976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63977: LD_VAR 0 12
63981: PPUSH
63982: LD_VAR 0 8
63986: PPUSH
63987: LD_INT 0
63989: PPUSH
63990: CALL 66055 0 3
// end ;
63994: GO 63948
63996: POP
63997: POP
// if birds then
63998: LD_VAR 0 1
64002: IFFALSE 64069
// for i = 1 to birds do
64004: LD_ADDR_VAR 0 11
64008: PUSH
64009: DOUBLE
64010: LD_INT 1
64012: DEC
64013: ST_TO_ADDR
64014: LD_VAR 0 1
64018: PUSH
64019: FOR_TO
64020: IFFALSE 64067
// begin hc_class := 18 ;
64022: LD_ADDR_OWVAR 28
64026: PUSH
64027: LD_INT 18
64029: ST_TO_ADDR
// hc_gallery =  ;
64030: LD_ADDR_OWVAR 33
64034: PUSH
64035: LD_STRING 
64037: ST_TO_ADDR
// animal := CreateHuman ;
64038: LD_ADDR_VAR 0 12
64042: PUSH
64043: CALL_OW 44
64047: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64048: LD_VAR 0 12
64052: PPUSH
64053: LD_VAR 0 8
64057: PPUSH
64058: LD_INT 0
64060: PPUSH
64061: CALL 66055 0 3
// end ;
64065: GO 64019
64067: POP
64068: POP
// if tigers then
64069: LD_VAR 0 2
64073: IFFALSE 64157
// for i = 1 to tigers do
64075: LD_ADDR_VAR 0 11
64079: PUSH
64080: DOUBLE
64081: LD_INT 1
64083: DEC
64084: ST_TO_ADDR
64085: LD_VAR 0 2
64089: PUSH
64090: FOR_TO
64091: IFFALSE 64155
// begin hc_class = class_tiger ;
64093: LD_ADDR_OWVAR 28
64097: PUSH
64098: LD_INT 14
64100: ST_TO_ADDR
// hc_gallery =  ;
64101: LD_ADDR_OWVAR 33
64105: PUSH
64106: LD_STRING 
64108: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64109: LD_ADDR_OWVAR 35
64113: PUSH
64114: LD_INT 7
64116: NEG
64117: PPUSH
64118: LD_INT 7
64120: PPUSH
64121: CALL_OW 12
64125: ST_TO_ADDR
// animal := CreateHuman ;
64126: LD_ADDR_VAR 0 12
64130: PUSH
64131: CALL_OW 44
64135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64136: LD_VAR 0 12
64140: PPUSH
64141: LD_VAR 0 8
64145: PPUSH
64146: LD_INT 0
64148: PPUSH
64149: CALL 66055 0 3
// end ;
64153: GO 64090
64155: POP
64156: POP
// if apemans then
64157: LD_VAR 0 3
64161: IFFALSE 64284
// for i = 1 to apemans do
64163: LD_ADDR_VAR 0 11
64167: PUSH
64168: DOUBLE
64169: LD_INT 1
64171: DEC
64172: ST_TO_ADDR
64173: LD_VAR 0 3
64177: PUSH
64178: FOR_TO
64179: IFFALSE 64282
// begin hc_class = class_apeman ;
64181: LD_ADDR_OWVAR 28
64185: PUSH
64186: LD_INT 12
64188: ST_TO_ADDR
// hc_gallery =  ;
64189: LD_ADDR_OWVAR 33
64193: PUSH
64194: LD_STRING 
64196: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64197: LD_ADDR_OWVAR 35
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PPUSH
64206: LD_INT 2
64208: PPUSH
64209: CALL_OW 12
64213: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64214: LD_ADDR_OWVAR 31
64218: PUSH
64219: LD_INT 1
64221: PPUSH
64222: LD_INT 3
64224: PPUSH
64225: CALL_OW 12
64229: PUSH
64230: LD_INT 1
64232: PPUSH
64233: LD_INT 3
64235: PPUSH
64236: CALL_OW 12
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: ST_TO_ADDR
// animal := CreateHuman ;
64253: LD_ADDR_VAR 0 12
64257: PUSH
64258: CALL_OW 44
64262: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64263: LD_VAR 0 12
64267: PPUSH
64268: LD_VAR 0 8
64272: PPUSH
64273: LD_INT 0
64275: PPUSH
64276: CALL 66055 0 3
// end ;
64280: GO 64178
64282: POP
64283: POP
// if enchidnas then
64284: LD_VAR 0 4
64288: IFFALSE 64355
// for i = 1 to enchidnas do
64290: LD_ADDR_VAR 0 11
64294: PUSH
64295: DOUBLE
64296: LD_INT 1
64298: DEC
64299: ST_TO_ADDR
64300: LD_VAR 0 4
64304: PUSH
64305: FOR_TO
64306: IFFALSE 64353
// begin hc_class = 13 ;
64308: LD_ADDR_OWVAR 28
64312: PUSH
64313: LD_INT 13
64315: ST_TO_ADDR
// hc_gallery =  ;
64316: LD_ADDR_OWVAR 33
64320: PUSH
64321: LD_STRING 
64323: ST_TO_ADDR
// animal := CreateHuman ;
64324: LD_ADDR_VAR 0 12
64328: PUSH
64329: CALL_OW 44
64333: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64334: LD_VAR 0 12
64338: PPUSH
64339: LD_VAR 0 8
64343: PPUSH
64344: LD_INT 0
64346: PPUSH
64347: CALL 66055 0 3
// end ;
64351: GO 64305
64353: POP
64354: POP
// if fishes then
64355: LD_VAR 0 7
64359: IFFALSE 64426
// for i = 1 to fishes do
64361: LD_ADDR_VAR 0 11
64365: PUSH
64366: DOUBLE
64367: LD_INT 1
64369: DEC
64370: ST_TO_ADDR
64371: LD_VAR 0 7
64375: PUSH
64376: FOR_TO
64377: IFFALSE 64424
// begin hc_class = 20 ;
64379: LD_ADDR_OWVAR 28
64383: PUSH
64384: LD_INT 20
64386: ST_TO_ADDR
// hc_gallery =  ;
64387: LD_ADDR_OWVAR 33
64391: PUSH
64392: LD_STRING 
64394: ST_TO_ADDR
// animal := CreateHuman ;
64395: LD_ADDR_VAR 0 12
64399: PUSH
64400: CALL_OW 44
64404: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64405: LD_VAR 0 12
64409: PPUSH
64410: LD_VAR 0 9
64414: PPUSH
64415: LD_INT 0
64417: PPUSH
64418: CALL 66055 0 3
// end ;
64422: GO 64376
64424: POP
64425: POP
// end ;
64426: LD_VAR 0 10
64430: RET
// export function WantHeal ( sci , unit ) ; begin
64431: LD_INT 0
64433: PPUSH
// if GetTaskList ( sci ) > 0 then
64434: LD_VAR 0 1
64438: PPUSH
64439: CALL_OW 437
64443: PUSH
64444: LD_INT 0
64446: GREATER
64447: IFFALSE 64517
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64449: LD_VAR 0 1
64453: PPUSH
64454: CALL_OW 437
64458: PUSH
64459: LD_INT 1
64461: ARRAY
64462: PUSH
64463: LD_INT 1
64465: ARRAY
64466: PUSH
64467: LD_STRING l
64469: EQUAL
64470: PUSH
64471: LD_VAR 0 1
64475: PPUSH
64476: CALL_OW 437
64480: PUSH
64481: LD_INT 1
64483: ARRAY
64484: PUSH
64485: LD_INT 4
64487: ARRAY
64488: PUSH
64489: LD_VAR 0 2
64493: EQUAL
64494: AND
64495: IFFALSE 64507
// result := true else
64497: LD_ADDR_VAR 0 3
64501: PUSH
64502: LD_INT 1
64504: ST_TO_ADDR
64505: GO 64515
// result := false ;
64507: LD_ADDR_VAR 0 3
64511: PUSH
64512: LD_INT 0
64514: ST_TO_ADDR
// end else
64515: GO 64525
// result := false ;
64517: LD_ADDR_VAR 0 3
64521: PUSH
64522: LD_INT 0
64524: ST_TO_ADDR
// end ;
64525: LD_VAR 0 3
64529: RET
// export function HealTarget ( sci ) ; begin
64530: LD_INT 0
64532: PPUSH
// if not sci then
64533: LD_VAR 0 1
64537: NOT
64538: IFFALSE 64542
// exit ;
64540: GO 64607
// result := 0 ;
64542: LD_ADDR_VAR 0 2
64546: PUSH
64547: LD_INT 0
64549: ST_TO_ADDR
// if GetTaskList ( sci ) then
64550: LD_VAR 0 1
64554: PPUSH
64555: CALL_OW 437
64559: IFFALSE 64607
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64561: LD_VAR 0 1
64565: PPUSH
64566: CALL_OW 437
64570: PUSH
64571: LD_INT 1
64573: ARRAY
64574: PUSH
64575: LD_INT 1
64577: ARRAY
64578: PUSH
64579: LD_STRING l
64581: EQUAL
64582: IFFALSE 64607
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64584: LD_ADDR_VAR 0 2
64588: PUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: CALL_OW 437
64598: PUSH
64599: LD_INT 1
64601: ARRAY
64602: PUSH
64603: LD_INT 4
64605: ARRAY
64606: ST_TO_ADDR
// end ;
64607: LD_VAR 0 2
64611: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64612: LD_INT 0
64614: PPUSH
64615: PPUSH
64616: PPUSH
64617: PPUSH
// if not base_units then
64618: LD_VAR 0 1
64622: NOT
64623: IFFALSE 64627
// exit ;
64625: GO 64714
// result := false ;
64627: LD_ADDR_VAR 0 2
64631: PUSH
64632: LD_INT 0
64634: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64635: LD_ADDR_VAR 0 5
64639: PUSH
64640: LD_VAR 0 1
64644: PPUSH
64645: LD_INT 21
64647: PUSH
64648: LD_INT 3
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PPUSH
64655: CALL_OW 72
64659: ST_TO_ADDR
// if not tmp then
64660: LD_VAR 0 5
64664: NOT
64665: IFFALSE 64669
// exit ;
64667: GO 64714
// for i in tmp do
64669: LD_ADDR_VAR 0 3
64673: PUSH
64674: LD_VAR 0 5
64678: PUSH
64679: FOR_IN
64680: IFFALSE 64712
// begin result := EnemyInRange ( i , 22 ) ;
64682: LD_ADDR_VAR 0 2
64686: PUSH
64687: LD_VAR 0 3
64691: PPUSH
64692: LD_INT 22
64694: PPUSH
64695: CALL 62301 0 2
64699: ST_TO_ADDR
// if result then
64700: LD_VAR 0 2
64704: IFFALSE 64710
// exit ;
64706: POP
64707: POP
64708: GO 64714
// end ;
64710: GO 64679
64712: POP
64713: POP
// end ;
64714: LD_VAR 0 2
64718: RET
// export function FilterByTag ( units , tag ) ; begin
64719: LD_INT 0
64721: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64722: LD_ADDR_VAR 0 3
64726: PUSH
64727: LD_VAR 0 1
64731: PPUSH
64732: LD_INT 120
64734: PUSH
64735: LD_VAR 0 2
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PPUSH
64744: CALL_OW 72
64748: ST_TO_ADDR
// end ;
64749: LD_VAR 0 3
64753: RET
// export function IsDriver ( un ) ; begin
64754: LD_INT 0
64756: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64757: LD_ADDR_VAR 0 2
64761: PUSH
64762: LD_VAR 0 1
64766: PUSH
64767: LD_INT 55
64769: PUSH
64770: EMPTY
64771: LIST
64772: PPUSH
64773: CALL_OW 69
64777: IN
64778: ST_TO_ADDR
// end ;
64779: LD_VAR 0 2
64783: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64784: LD_INT 0
64786: PPUSH
64787: PPUSH
// list := [ ] ;
64788: LD_ADDR_VAR 0 5
64792: PUSH
64793: EMPTY
64794: ST_TO_ADDR
// case d of 0 :
64795: LD_VAR 0 3
64799: PUSH
64800: LD_INT 0
64802: DOUBLE
64803: EQUAL
64804: IFTRUE 64808
64806: GO 64941
64808: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64809: LD_ADDR_VAR 0 5
64813: PUSH
64814: LD_VAR 0 1
64818: PUSH
64819: LD_INT 4
64821: MINUS
64822: PUSH
64823: LD_VAR 0 2
64827: PUSH
64828: LD_INT 4
64830: MINUS
64831: PUSH
64832: LD_INT 2
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: LIST
64839: PUSH
64840: LD_VAR 0 1
64844: PUSH
64845: LD_INT 3
64847: MINUS
64848: PUSH
64849: LD_VAR 0 2
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: PUSH
64862: LD_VAR 0 1
64866: PUSH
64867: LD_INT 4
64869: PLUS
64870: PUSH
64871: LD_VAR 0 2
64875: PUSH
64876: LD_INT 4
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: PUSH
64884: LD_VAR 0 1
64888: PUSH
64889: LD_INT 3
64891: PLUS
64892: PUSH
64893: LD_VAR 0 2
64897: PUSH
64898: LD_INT 3
64900: PLUS
64901: PUSH
64902: LD_INT 5
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: LIST
64909: PUSH
64910: LD_VAR 0 1
64914: PUSH
64915: LD_VAR 0 2
64919: PUSH
64920: LD_INT 4
64922: PLUS
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: ST_TO_ADDR
// end ; 1 :
64939: GO 65639
64941: LD_INT 1
64943: DOUBLE
64944: EQUAL
64945: IFTRUE 64949
64947: GO 65082
64949: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64950: LD_ADDR_VAR 0 5
64954: PUSH
64955: LD_VAR 0 1
64959: PUSH
64960: LD_VAR 0 2
64964: PUSH
64965: LD_INT 4
64967: MINUS
64968: PUSH
64969: LD_INT 3
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: PUSH
64977: LD_VAR 0 1
64981: PUSH
64982: LD_INT 3
64984: MINUS
64985: PUSH
64986: LD_VAR 0 2
64990: PUSH
64991: LD_INT 3
64993: MINUS
64994: PUSH
64995: LD_INT 2
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: LIST
65002: PUSH
65003: LD_VAR 0 1
65007: PUSH
65008: LD_INT 4
65010: MINUS
65011: PUSH
65012: LD_VAR 0 2
65016: PUSH
65017: LD_INT 1
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: LIST
65024: PUSH
65025: LD_VAR 0 1
65029: PUSH
65030: LD_VAR 0 2
65034: PUSH
65035: LD_INT 3
65037: PLUS
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: PUSH
65047: LD_VAR 0 1
65051: PUSH
65052: LD_INT 4
65054: PLUS
65055: PUSH
65056: LD_VAR 0 2
65060: PUSH
65061: LD_INT 4
65063: PLUS
65064: PUSH
65065: LD_INT 5
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: LIST
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: ST_TO_ADDR
// end ; 2 :
65080: GO 65639
65082: LD_INT 2
65084: DOUBLE
65085: EQUAL
65086: IFTRUE 65090
65088: GO 65219
65090: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65091: LD_ADDR_VAR 0 5
65095: PUSH
65096: LD_VAR 0 1
65100: PUSH
65101: LD_VAR 0 2
65105: PUSH
65106: LD_INT 3
65108: MINUS
65109: PUSH
65110: LD_INT 3
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: PUSH
65118: LD_VAR 0 1
65122: PUSH
65123: LD_INT 4
65125: PLUS
65126: PUSH
65127: LD_VAR 0 2
65131: PUSH
65132: LD_INT 4
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: PUSH
65140: LD_VAR 0 1
65144: PUSH
65145: LD_VAR 0 2
65149: PUSH
65150: LD_INT 4
65152: PLUS
65153: PUSH
65154: LD_INT 0
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: LIST
65161: PUSH
65162: LD_VAR 0 1
65166: PUSH
65167: LD_INT 3
65169: MINUS
65170: PUSH
65171: LD_VAR 0 2
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: LIST
65183: PUSH
65184: LD_VAR 0 1
65188: PUSH
65189: LD_INT 4
65191: MINUS
65192: PUSH
65193: LD_VAR 0 2
65197: PUSH
65198: LD_INT 4
65200: MINUS
65201: PUSH
65202: LD_INT 2
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: LIST
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// end ; 3 :
65217: GO 65639
65219: LD_INT 3
65221: DOUBLE
65222: EQUAL
65223: IFTRUE 65227
65225: GO 65360
65227: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65228: LD_ADDR_VAR 0 5
65232: PUSH
65233: LD_VAR 0 1
65237: PUSH
65238: LD_INT 3
65240: PLUS
65241: PUSH
65242: LD_VAR 0 2
65246: PUSH
65247: LD_INT 4
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: LIST
65254: PUSH
65255: LD_VAR 0 1
65259: PUSH
65260: LD_INT 4
65262: PLUS
65263: PUSH
65264: LD_VAR 0 2
65268: PUSH
65269: LD_INT 4
65271: PLUS
65272: PUSH
65273: LD_INT 5
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: LIST
65280: PUSH
65281: LD_VAR 0 1
65285: PUSH
65286: LD_INT 4
65288: MINUS
65289: PUSH
65290: LD_VAR 0 2
65294: PUSH
65295: LD_INT 1
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: LIST
65302: PUSH
65303: LD_VAR 0 1
65307: PUSH
65308: LD_VAR 0 2
65312: PUSH
65313: LD_INT 4
65315: MINUS
65316: PUSH
65317: LD_INT 3
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: PUSH
65325: LD_VAR 0 1
65329: PUSH
65330: LD_INT 3
65332: MINUS
65333: PUSH
65334: LD_VAR 0 2
65338: PUSH
65339: LD_INT 3
65341: MINUS
65342: PUSH
65343: LD_INT 2
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: ST_TO_ADDR
// end ; 4 :
65358: GO 65639
65360: LD_INT 4
65362: DOUBLE
65363: EQUAL
65364: IFTRUE 65368
65366: GO 65501
65368: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65369: LD_ADDR_VAR 0 5
65373: PUSH
65374: LD_VAR 0 1
65378: PUSH
65379: LD_VAR 0 2
65383: PUSH
65384: LD_INT 4
65386: PLUS
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: LIST
65395: PUSH
65396: LD_VAR 0 1
65400: PUSH
65401: LD_INT 3
65403: PLUS
65404: PUSH
65405: LD_VAR 0 2
65409: PUSH
65410: LD_INT 3
65412: PLUS
65413: PUSH
65414: LD_INT 5
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: PUSH
65422: LD_VAR 0 1
65426: PUSH
65427: LD_INT 4
65429: PLUS
65430: PUSH
65431: LD_VAR 0 2
65435: PUSH
65436: LD_INT 4
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: LIST
65443: PUSH
65444: LD_VAR 0 1
65448: PUSH
65449: LD_VAR 0 2
65453: PUSH
65454: LD_INT 3
65456: MINUS
65457: PUSH
65458: LD_INT 3
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: PUSH
65466: LD_VAR 0 1
65470: PUSH
65471: LD_INT 4
65473: MINUS
65474: PUSH
65475: LD_VAR 0 2
65479: PUSH
65480: LD_INT 4
65482: MINUS
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: LIST
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: ST_TO_ADDR
// end ; 5 :
65499: GO 65639
65501: LD_INT 5
65503: DOUBLE
65504: EQUAL
65505: IFTRUE 65509
65507: GO 65638
65509: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65510: LD_ADDR_VAR 0 5
65514: PUSH
65515: LD_VAR 0 1
65519: PUSH
65520: LD_INT 4
65522: MINUS
65523: PUSH
65524: LD_VAR 0 2
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: PUSH
65537: LD_VAR 0 1
65541: PUSH
65542: LD_VAR 0 2
65546: PUSH
65547: LD_INT 4
65549: MINUS
65550: PUSH
65551: LD_INT 3
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: LIST
65558: PUSH
65559: LD_VAR 0 1
65563: PUSH
65564: LD_INT 4
65566: PLUS
65567: PUSH
65568: LD_VAR 0 2
65572: PUSH
65573: LD_INT 4
65575: PLUS
65576: PUSH
65577: LD_INT 5
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: PUSH
65585: LD_VAR 0 1
65589: PUSH
65590: LD_INT 3
65592: PLUS
65593: PUSH
65594: LD_VAR 0 2
65598: PUSH
65599: LD_INT 4
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: PUSH
65607: LD_VAR 0 1
65611: PUSH
65612: LD_VAR 0 2
65616: PUSH
65617: LD_INT 3
65619: PLUS
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: LIST
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: ST_TO_ADDR
// end ; end ;
65636: GO 65639
65638: POP
// result := list ;
65639: LD_ADDR_VAR 0 4
65643: PUSH
65644: LD_VAR 0 5
65648: ST_TO_ADDR
// end ;
65649: LD_VAR 0 4
65653: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65654: LD_INT 0
65656: PPUSH
65657: PPUSH
65658: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65659: LD_VAR 0 1
65663: NOT
65664: PUSH
65665: LD_VAR 0 2
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: LD_INT 2
65675: PUSH
65676: LD_INT 3
65678: PUSH
65679: LD_INT 4
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: IN
65688: NOT
65689: OR
65690: IFFALSE 65694
// exit ;
65692: GO 65777
// tmp := [ ] ;
65694: LD_ADDR_VAR 0 5
65698: PUSH
65699: EMPTY
65700: ST_TO_ADDR
// for i in units do
65701: LD_ADDR_VAR 0 4
65705: PUSH
65706: LD_VAR 0 1
65710: PUSH
65711: FOR_IN
65712: IFFALSE 65746
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65714: LD_ADDR_VAR 0 5
65718: PUSH
65719: LD_VAR 0 5
65723: PPUSH
65724: LD_VAR 0 4
65728: PPUSH
65729: LD_VAR 0 2
65733: PPUSH
65734: CALL_OW 259
65738: PPUSH
65739: CALL 67150 0 2
65743: ST_TO_ADDR
65744: GO 65711
65746: POP
65747: POP
// if not tmp then
65748: LD_VAR 0 5
65752: NOT
65753: IFFALSE 65757
// exit ;
65755: GO 65777
// result := SortListByListDesc ( units , tmp ) ;
65757: LD_ADDR_VAR 0 3
65761: PUSH
65762: LD_VAR 0 1
65766: PPUSH
65767: LD_VAR 0 5
65771: PPUSH
65772: CALL_OW 77
65776: ST_TO_ADDR
// end ;
65777: LD_VAR 0 3
65781: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65782: LD_INT 0
65784: PPUSH
65785: PPUSH
65786: PPUSH
// result := false ;
65787: LD_ADDR_VAR 0 3
65791: PUSH
65792: LD_INT 0
65794: ST_TO_ADDR
// if not building then
65795: LD_VAR 0 2
65799: NOT
65800: IFFALSE 65804
// exit ;
65802: GO 65942
// x := GetX ( building ) ;
65804: LD_ADDR_VAR 0 4
65808: PUSH
65809: LD_VAR 0 2
65813: PPUSH
65814: CALL_OW 250
65818: ST_TO_ADDR
// y := GetY ( building ) ;
65819: LD_ADDR_VAR 0 5
65823: PUSH
65824: LD_VAR 0 2
65828: PPUSH
65829: CALL_OW 251
65833: ST_TO_ADDR
// if not x or not y then
65834: LD_VAR 0 4
65838: NOT
65839: PUSH
65840: LD_VAR 0 5
65844: NOT
65845: OR
65846: IFFALSE 65850
// exit ;
65848: GO 65942
// if GetTaskList ( unit ) then
65850: LD_VAR 0 1
65854: PPUSH
65855: CALL_OW 437
65859: IFFALSE 65942
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65861: LD_STRING e
65863: PUSH
65864: LD_VAR 0 1
65868: PPUSH
65869: CALL_OW 437
65873: PUSH
65874: LD_INT 1
65876: ARRAY
65877: PUSH
65878: LD_INT 1
65880: ARRAY
65881: EQUAL
65882: PUSH
65883: LD_VAR 0 4
65887: PUSH
65888: LD_VAR 0 1
65892: PPUSH
65893: CALL_OW 437
65897: PUSH
65898: LD_INT 1
65900: ARRAY
65901: PUSH
65902: LD_INT 2
65904: ARRAY
65905: EQUAL
65906: AND
65907: PUSH
65908: LD_VAR 0 5
65912: PUSH
65913: LD_VAR 0 1
65917: PPUSH
65918: CALL_OW 437
65922: PUSH
65923: LD_INT 1
65925: ARRAY
65926: PUSH
65927: LD_INT 3
65929: ARRAY
65930: EQUAL
65931: AND
65932: IFFALSE 65942
// result := true end ;
65934: LD_ADDR_VAR 0 3
65938: PUSH
65939: LD_INT 1
65941: ST_TO_ADDR
// end ;
65942: LD_VAR 0 3
65946: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65947: LD_INT 0
65949: PPUSH
// result := false ;
65950: LD_ADDR_VAR 0 4
65954: PUSH
65955: LD_INT 0
65957: ST_TO_ADDR
// if GetTaskList ( unit ) then
65958: LD_VAR 0 1
65962: PPUSH
65963: CALL_OW 437
65967: IFFALSE 66050
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65969: LD_STRING M
65971: PUSH
65972: LD_VAR 0 1
65976: PPUSH
65977: CALL_OW 437
65981: PUSH
65982: LD_INT 1
65984: ARRAY
65985: PUSH
65986: LD_INT 1
65988: ARRAY
65989: EQUAL
65990: PUSH
65991: LD_VAR 0 2
65995: PUSH
65996: LD_VAR 0 1
66000: PPUSH
66001: CALL_OW 437
66005: PUSH
66006: LD_INT 1
66008: ARRAY
66009: PUSH
66010: LD_INT 2
66012: ARRAY
66013: EQUAL
66014: AND
66015: PUSH
66016: LD_VAR 0 3
66020: PUSH
66021: LD_VAR 0 1
66025: PPUSH
66026: CALL_OW 437
66030: PUSH
66031: LD_INT 1
66033: ARRAY
66034: PUSH
66035: LD_INT 3
66037: ARRAY
66038: EQUAL
66039: AND
66040: IFFALSE 66050
// result := true ;
66042: LD_ADDR_VAR 0 4
66046: PUSH
66047: LD_INT 1
66049: ST_TO_ADDR
// end ; end ;
66050: LD_VAR 0 4
66054: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66055: LD_INT 0
66057: PPUSH
66058: PPUSH
66059: PPUSH
66060: PPUSH
// if not unit or not area then
66061: LD_VAR 0 1
66065: NOT
66066: PUSH
66067: LD_VAR 0 2
66071: NOT
66072: OR
66073: IFFALSE 66077
// exit ;
66075: GO 66253
// tmp := AreaToList ( area , i ) ;
66077: LD_ADDR_VAR 0 6
66081: PUSH
66082: LD_VAR 0 2
66086: PPUSH
66087: LD_VAR 0 5
66091: PPUSH
66092: CALL_OW 517
66096: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66097: LD_ADDR_VAR 0 5
66101: PUSH
66102: DOUBLE
66103: LD_INT 1
66105: DEC
66106: ST_TO_ADDR
66107: LD_VAR 0 6
66111: PUSH
66112: LD_INT 1
66114: ARRAY
66115: PUSH
66116: FOR_TO
66117: IFFALSE 66251
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66119: LD_ADDR_VAR 0 7
66123: PUSH
66124: LD_VAR 0 6
66128: PUSH
66129: LD_INT 1
66131: ARRAY
66132: PUSH
66133: LD_VAR 0 5
66137: ARRAY
66138: PUSH
66139: LD_VAR 0 6
66143: PUSH
66144: LD_INT 2
66146: ARRAY
66147: PUSH
66148: LD_VAR 0 5
66152: ARRAY
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66158: LD_INT 92
66160: PUSH
66161: LD_VAR 0 7
66165: PUSH
66166: LD_INT 1
66168: ARRAY
66169: PUSH
66170: LD_VAR 0 7
66174: PUSH
66175: LD_INT 2
66177: ARRAY
66178: PUSH
66179: LD_INT 2
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: PPUSH
66188: CALL_OW 69
66192: PUSH
66193: LD_INT 0
66195: EQUAL
66196: IFFALSE 66249
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66198: LD_VAR 0 1
66202: PPUSH
66203: LD_VAR 0 7
66207: PUSH
66208: LD_INT 1
66210: ARRAY
66211: PPUSH
66212: LD_VAR 0 7
66216: PUSH
66217: LD_INT 2
66219: ARRAY
66220: PPUSH
66221: LD_VAR 0 3
66225: PPUSH
66226: CALL_OW 48
// result := IsPlaced ( unit ) ;
66230: LD_ADDR_VAR 0 4
66234: PUSH
66235: LD_VAR 0 1
66239: PPUSH
66240: CALL_OW 305
66244: ST_TO_ADDR
// exit ;
66245: POP
66246: POP
66247: GO 66253
// end ; end ;
66249: GO 66116
66251: POP
66252: POP
// end ;
66253: LD_VAR 0 4
66257: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66258: LD_INT 0
66260: PPUSH
66261: PPUSH
66262: PPUSH
// if not side or side > 8 then
66263: LD_VAR 0 1
66267: NOT
66268: PUSH
66269: LD_VAR 0 1
66273: PUSH
66274: LD_INT 8
66276: GREATER
66277: OR
66278: IFFALSE 66282
// exit ;
66280: GO 66469
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66282: LD_ADDR_VAR 0 4
66286: PUSH
66287: LD_INT 22
66289: PUSH
66290: LD_VAR 0 1
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 21
66301: PUSH
66302: LD_INT 3
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PPUSH
66313: CALL_OW 69
66317: ST_TO_ADDR
// if not tmp then
66318: LD_VAR 0 4
66322: NOT
66323: IFFALSE 66327
// exit ;
66325: GO 66469
// enable_addtolog := true ;
66327: LD_ADDR_OWVAR 81
66331: PUSH
66332: LD_INT 1
66334: ST_TO_ADDR
// AddToLog ( [ ) ;
66335: LD_STRING [
66337: PPUSH
66338: CALL_OW 561
// for i in tmp do
66342: LD_ADDR_VAR 0 3
66346: PUSH
66347: LD_VAR 0 4
66351: PUSH
66352: FOR_IN
66353: IFFALSE 66460
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66355: LD_STRING [
66357: PUSH
66358: LD_VAR 0 3
66362: PPUSH
66363: CALL_OW 266
66367: STR
66368: PUSH
66369: LD_STRING , 
66371: STR
66372: PUSH
66373: LD_VAR 0 3
66377: PPUSH
66378: CALL_OW 250
66382: STR
66383: PUSH
66384: LD_STRING , 
66386: STR
66387: PUSH
66388: LD_VAR 0 3
66392: PPUSH
66393: CALL_OW 251
66397: STR
66398: PUSH
66399: LD_STRING , 
66401: STR
66402: PUSH
66403: LD_VAR 0 3
66407: PPUSH
66408: CALL_OW 254
66412: STR
66413: PUSH
66414: LD_STRING , 
66416: STR
66417: PUSH
66418: LD_VAR 0 3
66422: PPUSH
66423: LD_INT 1
66425: PPUSH
66426: CALL_OW 268
66430: STR
66431: PUSH
66432: LD_STRING , 
66434: STR
66435: PUSH
66436: LD_VAR 0 3
66440: PPUSH
66441: LD_INT 2
66443: PPUSH
66444: CALL_OW 268
66448: STR
66449: PUSH
66450: LD_STRING ],
66452: STR
66453: PPUSH
66454: CALL_OW 561
// end ;
66458: GO 66352
66460: POP
66461: POP
// AddToLog ( ]; ) ;
66462: LD_STRING ];
66464: PPUSH
66465: CALL_OW 561
// end ;
66469: LD_VAR 0 2
66473: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66474: LD_INT 0
66476: PPUSH
66477: PPUSH
66478: PPUSH
66479: PPUSH
66480: PPUSH
// if not area or not rate or not max then
66481: LD_VAR 0 1
66485: NOT
66486: PUSH
66487: LD_VAR 0 2
66491: NOT
66492: OR
66493: PUSH
66494: LD_VAR 0 4
66498: NOT
66499: OR
66500: IFFALSE 66504
// exit ;
66502: GO 66693
// while 1 do
66504: LD_INT 1
66506: IFFALSE 66693
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66508: LD_ADDR_VAR 0 9
66512: PUSH
66513: LD_VAR 0 1
66517: PPUSH
66518: LD_INT 1
66520: PPUSH
66521: CALL_OW 287
66525: PUSH
66526: LD_INT 10
66528: MUL
66529: ST_TO_ADDR
// r := rate / 10 ;
66530: LD_ADDR_VAR 0 7
66534: PUSH
66535: LD_VAR 0 2
66539: PUSH
66540: LD_INT 10
66542: DIVREAL
66543: ST_TO_ADDR
// time := 1 1$00 ;
66544: LD_ADDR_VAR 0 8
66548: PUSH
66549: LD_INT 2100
66551: ST_TO_ADDR
// if amount < min then
66552: LD_VAR 0 9
66556: PUSH
66557: LD_VAR 0 3
66561: LESS
66562: IFFALSE 66580
// r := r * 2 else
66564: LD_ADDR_VAR 0 7
66568: PUSH
66569: LD_VAR 0 7
66573: PUSH
66574: LD_INT 2
66576: MUL
66577: ST_TO_ADDR
66578: GO 66606
// if amount > max then
66580: LD_VAR 0 9
66584: PUSH
66585: LD_VAR 0 4
66589: GREATER
66590: IFFALSE 66606
// r := r / 2 ;
66592: LD_ADDR_VAR 0 7
66596: PUSH
66597: LD_VAR 0 7
66601: PUSH
66602: LD_INT 2
66604: DIVREAL
66605: ST_TO_ADDR
// time := time / r ;
66606: LD_ADDR_VAR 0 8
66610: PUSH
66611: LD_VAR 0 8
66615: PUSH
66616: LD_VAR 0 7
66620: DIVREAL
66621: ST_TO_ADDR
// if time < 0 then
66622: LD_VAR 0 8
66626: PUSH
66627: LD_INT 0
66629: LESS
66630: IFFALSE 66647
// time := time * - 1 ;
66632: LD_ADDR_VAR 0 8
66636: PUSH
66637: LD_VAR 0 8
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: MUL
66646: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66647: LD_VAR 0 8
66651: PUSH
66652: LD_INT 35
66654: PPUSH
66655: LD_INT 875
66657: PPUSH
66658: CALL_OW 12
66662: PLUS
66663: PPUSH
66664: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66668: LD_INT 1
66670: PPUSH
66671: LD_INT 5
66673: PPUSH
66674: CALL_OW 12
66678: PPUSH
66679: LD_VAR 0 1
66683: PPUSH
66684: LD_INT 1
66686: PPUSH
66687: CALL_OW 55
// end ;
66691: GO 66504
// end ;
66693: LD_VAR 0 5
66697: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66698: LD_INT 0
66700: PPUSH
66701: PPUSH
66702: PPUSH
66703: PPUSH
66704: PPUSH
66705: PPUSH
66706: PPUSH
66707: PPUSH
// if not turrets or not factories then
66708: LD_VAR 0 1
66712: NOT
66713: PUSH
66714: LD_VAR 0 2
66718: NOT
66719: OR
66720: IFFALSE 66724
// exit ;
66722: GO 67031
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66724: LD_ADDR_VAR 0 10
66728: PUSH
66729: LD_INT 5
66731: PUSH
66732: LD_INT 6
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 2
66741: PUSH
66742: LD_INT 4
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: LD_INT 5
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 24
66766: PUSH
66767: LD_INT 25
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 23
66776: PUSH
66777: LD_INT 27
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 42
66790: PUSH
66791: LD_INT 43
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 44
66800: PUSH
66801: LD_INT 46
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 45
66810: PUSH
66811: LD_INT 47
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: LIST
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: LIST
66827: ST_TO_ADDR
// result := [ ] ;
66828: LD_ADDR_VAR 0 3
66832: PUSH
66833: EMPTY
66834: ST_TO_ADDR
// for i in turrets do
66835: LD_ADDR_VAR 0 4
66839: PUSH
66840: LD_VAR 0 1
66844: PUSH
66845: FOR_IN
66846: IFFALSE 67029
// begin nat := GetNation ( i ) ;
66848: LD_ADDR_VAR 0 7
66852: PUSH
66853: LD_VAR 0 4
66857: PPUSH
66858: CALL_OW 248
66862: ST_TO_ADDR
// weapon := 0 ;
66863: LD_ADDR_VAR 0 8
66867: PUSH
66868: LD_INT 0
66870: ST_TO_ADDR
// if not nat then
66871: LD_VAR 0 7
66875: NOT
66876: IFFALSE 66880
// continue ;
66878: GO 66845
// for j in list [ nat ] do
66880: LD_ADDR_VAR 0 5
66884: PUSH
66885: LD_VAR 0 10
66889: PUSH
66890: LD_VAR 0 7
66894: ARRAY
66895: PUSH
66896: FOR_IN
66897: IFFALSE 66938
// if GetBWeapon ( i ) = j [ 1 ] then
66899: LD_VAR 0 4
66903: PPUSH
66904: CALL_OW 269
66908: PUSH
66909: LD_VAR 0 5
66913: PUSH
66914: LD_INT 1
66916: ARRAY
66917: EQUAL
66918: IFFALSE 66936
// begin weapon := j [ 2 ] ;
66920: LD_ADDR_VAR 0 8
66924: PUSH
66925: LD_VAR 0 5
66929: PUSH
66930: LD_INT 2
66932: ARRAY
66933: ST_TO_ADDR
// break ;
66934: GO 66938
// end ;
66936: GO 66896
66938: POP
66939: POP
// if not weapon then
66940: LD_VAR 0 8
66944: NOT
66945: IFFALSE 66949
// continue ;
66947: GO 66845
// for k in factories do
66949: LD_ADDR_VAR 0 6
66953: PUSH
66954: LD_VAR 0 2
66958: PUSH
66959: FOR_IN
66960: IFFALSE 67025
// begin weapons := AvailableWeaponList ( k ) ;
66962: LD_ADDR_VAR 0 9
66966: PUSH
66967: LD_VAR 0 6
66971: PPUSH
66972: CALL_OW 478
66976: ST_TO_ADDR
// if not weapons then
66977: LD_VAR 0 9
66981: NOT
66982: IFFALSE 66986
// continue ;
66984: GO 66959
// if weapon in weapons then
66986: LD_VAR 0 8
66990: PUSH
66991: LD_VAR 0 9
66995: IN
66996: IFFALSE 67023
// begin result := [ i , weapon ] ;
66998: LD_ADDR_VAR 0 3
67002: PUSH
67003: LD_VAR 0 4
67007: PUSH
67008: LD_VAR 0 8
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: ST_TO_ADDR
// exit ;
67017: POP
67018: POP
67019: POP
67020: POP
67021: GO 67031
// end ; end ;
67023: GO 66959
67025: POP
67026: POP
// end ;
67027: GO 66845
67029: POP
67030: POP
// end ;
67031: LD_VAR 0 3
67035: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67036: LD_INT 0
67038: PPUSH
// if not side or side > 8 then
67039: LD_VAR 0 3
67043: NOT
67044: PUSH
67045: LD_VAR 0 3
67049: PUSH
67050: LD_INT 8
67052: GREATER
67053: OR
67054: IFFALSE 67058
// exit ;
67056: GO 67117
// if not range then
67058: LD_VAR 0 4
67062: NOT
67063: IFFALSE 67074
// range := - 12 ;
67065: LD_ADDR_VAR 0 4
67069: PUSH
67070: LD_INT 12
67072: NEG
67073: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67074: LD_VAR 0 1
67078: PPUSH
67079: LD_VAR 0 2
67083: PPUSH
67084: LD_VAR 0 3
67088: PPUSH
67089: LD_VAR 0 4
67093: PPUSH
67094: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67098: LD_VAR 0 1
67102: PPUSH
67103: LD_VAR 0 2
67107: PPUSH
67108: LD_VAR 0 3
67112: PPUSH
67113: CALL_OW 331
// end ;
67117: LD_VAR 0 5
67121: RET
// export function Video ( mode ) ; begin
67122: LD_INT 0
67124: PPUSH
// ingame_video = mode ;
67125: LD_ADDR_OWVAR 52
67129: PUSH
67130: LD_VAR 0 1
67134: ST_TO_ADDR
// interface_hidden = mode ;
67135: LD_ADDR_OWVAR 54
67139: PUSH
67140: LD_VAR 0 1
67144: ST_TO_ADDR
// end ;
67145: LD_VAR 0 2
67149: RET
// export function Join ( array , element ) ; begin
67150: LD_INT 0
67152: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67153: LD_ADDR_VAR 0 3
67157: PUSH
67158: LD_VAR 0 1
67162: PPUSH
67163: LD_VAR 0 1
67167: PUSH
67168: LD_INT 1
67170: PLUS
67171: PPUSH
67172: LD_VAR 0 2
67176: PPUSH
67177: CALL_OW 1
67181: ST_TO_ADDR
// end ;
67182: LD_VAR 0 3
67186: RET
// export function JoinUnion ( array , element ) ; begin
67187: LD_INT 0
67189: PPUSH
// result := array union element ;
67190: LD_ADDR_VAR 0 3
67194: PUSH
67195: LD_VAR 0 1
67199: PUSH
67200: LD_VAR 0 2
67204: UNION
67205: ST_TO_ADDR
// end ;
67206: LD_VAR 0 3
67210: RET
// export function GetBehemoths ( side ) ; begin
67211: LD_INT 0
67213: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67214: LD_ADDR_VAR 0 2
67218: PUSH
67219: LD_INT 22
67221: PUSH
67222: LD_VAR 0 1
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 31
67233: PUSH
67234: LD_INT 25
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PPUSH
67245: CALL_OW 69
67249: ST_TO_ADDR
// end ;
67250: LD_VAR 0 2
67254: RET
// export function Shuffle ( array ) ; var i , index ; begin
67255: LD_INT 0
67257: PPUSH
67258: PPUSH
67259: PPUSH
// result := [ ] ;
67260: LD_ADDR_VAR 0 2
67264: PUSH
67265: EMPTY
67266: ST_TO_ADDR
// if not array then
67267: LD_VAR 0 1
67271: NOT
67272: IFFALSE 67276
// exit ;
67274: GO 67375
// Randomize ;
67276: CALL_OW 10
// for i = array downto 1 do
67280: LD_ADDR_VAR 0 3
67284: PUSH
67285: DOUBLE
67286: LD_VAR 0 1
67290: INC
67291: ST_TO_ADDR
67292: LD_INT 1
67294: PUSH
67295: FOR_DOWNTO
67296: IFFALSE 67373
// begin index := rand ( 1 , array ) ;
67298: LD_ADDR_VAR 0 4
67302: PUSH
67303: LD_INT 1
67305: PPUSH
67306: LD_VAR 0 1
67310: PPUSH
67311: CALL_OW 12
67315: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67316: LD_ADDR_VAR 0 2
67320: PUSH
67321: LD_VAR 0 2
67325: PPUSH
67326: LD_VAR 0 2
67330: PUSH
67331: LD_INT 1
67333: PLUS
67334: PPUSH
67335: LD_VAR 0 1
67339: PUSH
67340: LD_VAR 0 4
67344: ARRAY
67345: PPUSH
67346: CALL_OW 2
67350: ST_TO_ADDR
// array := Delete ( array , index ) ;
67351: LD_ADDR_VAR 0 1
67355: PUSH
67356: LD_VAR 0 1
67360: PPUSH
67361: LD_VAR 0 4
67365: PPUSH
67366: CALL_OW 3
67370: ST_TO_ADDR
// end ;
67371: GO 67295
67373: POP
67374: POP
// end ;
67375: LD_VAR 0 2
67379: RET
// export function GetBaseMaterials ( base ) ; begin
67380: LD_INT 0
67382: PPUSH
// result := [ 0 , 0 , 0 ] ;
67383: LD_ADDR_VAR 0 2
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: LIST
67401: ST_TO_ADDR
// if not base then
67402: LD_VAR 0 1
67406: NOT
67407: IFFALSE 67411
// exit ;
67409: GO 67460
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67411: LD_ADDR_VAR 0 2
67415: PUSH
67416: LD_VAR 0 1
67420: PPUSH
67421: LD_INT 1
67423: PPUSH
67424: CALL_OW 275
67428: PUSH
67429: LD_VAR 0 1
67433: PPUSH
67434: LD_INT 2
67436: PPUSH
67437: CALL_OW 275
67441: PUSH
67442: LD_VAR 0 1
67446: PPUSH
67447: LD_INT 3
67449: PPUSH
67450: CALL_OW 275
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: LIST
67459: ST_TO_ADDR
// end ;
67460: LD_VAR 0 2
67464: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67465: LD_INT 0
67467: PPUSH
67468: PPUSH
// result := array ;
67469: LD_ADDR_VAR 0 3
67473: PUSH
67474: LD_VAR 0 1
67478: ST_TO_ADDR
// if size >= result then
67479: LD_VAR 0 2
67483: PUSH
67484: LD_VAR 0 3
67488: GREATEREQUAL
67489: IFFALSE 67493
// exit ;
67491: GO 67543
// if size then
67493: LD_VAR 0 2
67497: IFFALSE 67543
// for i := array downto size do
67499: LD_ADDR_VAR 0 4
67503: PUSH
67504: DOUBLE
67505: LD_VAR 0 1
67509: INC
67510: ST_TO_ADDR
67511: LD_VAR 0 2
67515: PUSH
67516: FOR_DOWNTO
67517: IFFALSE 67541
// result := Delete ( result , result ) ;
67519: LD_ADDR_VAR 0 3
67523: PUSH
67524: LD_VAR 0 3
67528: PPUSH
67529: LD_VAR 0 3
67533: PPUSH
67534: CALL_OW 3
67538: ST_TO_ADDR
67539: GO 67516
67541: POP
67542: POP
// end ;
67543: LD_VAR 0 3
67547: RET
// export function ComExit ( unit ) ; var tmp ; begin
67548: LD_INT 0
67550: PPUSH
67551: PPUSH
// if not IsInUnit ( unit ) then
67552: LD_VAR 0 1
67556: PPUSH
67557: CALL_OW 310
67561: NOT
67562: IFFALSE 67566
// exit ;
67564: GO 67626
// tmp := IsInUnit ( unit ) ;
67566: LD_ADDR_VAR 0 3
67570: PUSH
67571: LD_VAR 0 1
67575: PPUSH
67576: CALL_OW 310
67580: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67581: LD_VAR 0 3
67585: PPUSH
67586: CALL_OW 247
67590: PUSH
67591: LD_INT 2
67593: EQUAL
67594: IFFALSE 67607
// ComExitVehicle ( unit ) else
67596: LD_VAR 0 1
67600: PPUSH
67601: CALL_OW 121
67605: GO 67616
// ComExitBuilding ( unit ) ;
67607: LD_VAR 0 1
67611: PPUSH
67612: CALL_OW 122
// result := tmp ;
67616: LD_ADDR_VAR 0 2
67620: PUSH
67621: LD_VAR 0 3
67625: ST_TO_ADDR
// end ;
67626: LD_VAR 0 2
67630: RET
// export function ComExitAll ( units ) ; var i ; begin
67631: LD_INT 0
67633: PPUSH
67634: PPUSH
// if not units then
67635: LD_VAR 0 1
67639: NOT
67640: IFFALSE 67644
// exit ;
67642: GO 67670
// for i in units do
67644: LD_ADDR_VAR 0 3
67648: PUSH
67649: LD_VAR 0 1
67653: PUSH
67654: FOR_IN
67655: IFFALSE 67668
// ComExit ( i ) ;
67657: LD_VAR 0 3
67661: PPUSH
67662: CALL 67548 0 1
67666: GO 67654
67668: POP
67669: POP
// end ;
67670: LD_VAR 0 2
67674: RET
// export function ResetHc ; begin
67675: LD_INT 0
67677: PPUSH
// InitHc ;
67678: CALL_OW 19
// hc_importance := 0 ;
67682: LD_ADDR_OWVAR 32
67686: PUSH
67687: LD_INT 0
67689: ST_TO_ADDR
// end ;
67690: LD_VAR 0 1
67694: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67695: LD_INT 0
67697: PPUSH
67698: PPUSH
67699: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67700: LD_ADDR_VAR 0 6
67704: PUSH
67705: LD_VAR 0 1
67709: PUSH
67710: LD_VAR 0 3
67714: PLUS
67715: PUSH
67716: LD_INT 2
67718: DIV
67719: ST_TO_ADDR
// if _x < 0 then
67720: LD_VAR 0 6
67724: PUSH
67725: LD_INT 0
67727: LESS
67728: IFFALSE 67745
// _x := _x * - 1 ;
67730: LD_ADDR_VAR 0 6
67734: PUSH
67735: LD_VAR 0 6
67739: PUSH
67740: LD_INT 1
67742: NEG
67743: MUL
67744: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67745: LD_ADDR_VAR 0 7
67749: PUSH
67750: LD_VAR 0 2
67754: PUSH
67755: LD_VAR 0 4
67759: PLUS
67760: PUSH
67761: LD_INT 2
67763: DIV
67764: ST_TO_ADDR
// if _y < 0 then
67765: LD_VAR 0 7
67769: PUSH
67770: LD_INT 0
67772: LESS
67773: IFFALSE 67790
// _y := _y * - 1 ;
67775: LD_ADDR_VAR 0 7
67779: PUSH
67780: LD_VAR 0 7
67784: PUSH
67785: LD_INT 1
67787: NEG
67788: MUL
67789: ST_TO_ADDR
// result := [ _x , _y ] ;
67790: LD_ADDR_VAR 0 5
67794: PUSH
67795: LD_VAR 0 6
67799: PUSH
67800: LD_VAR 0 7
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: ST_TO_ADDR
// end ;
67809: LD_VAR 0 5
67813: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67814: LD_INT 0
67816: PPUSH
67817: PPUSH
67818: PPUSH
67819: PPUSH
// task := GetTaskList ( unit ) ;
67820: LD_ADDR_VAR 0 7
67824: PUSH
67825: LD_VAR 0 1
67829: PPUSH
67830: CALL_OW 437
67834: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67835: LD_VAR 0 7
67839: NOT
67840: PUSH
67841: LD_VAR 0 1
67845: PPUSH
67846: LD_VAR 0 2
67850: PPUSH
67851: CALL_OW 308
67855: NOT
67856: AND
67857: IFFALSE 67861
// exit ;
67859: GO 67979
// if IsInArea ( unit , area ) then
67861: LD_VAR 0 1
67865: PPUSH
67866: LD_VAR 0 2
67870: PPUSH
67871: CALL_OW 308
67875: IFFALSE 67893
// begin ComMoveToArea ( unit , goAway ) ;
67877: LD_VAR 0 1
67881: PPUSH
67882: LD_VAR 0 3
67886: PPUSH
67887: CALL_OW 113
// exit ;
67891: GO 67979
// end ; if task [ 1 ] [ 1 ] <> M then
67893: LD_VAR 0 7
67897: PUSH
67898: LD_INT 1
67900: ARRAY
67901: PUSH
67902: LD_INT 1
67904: ARRAY
67905: PUSH
67906: LD_STRING M
67908: NONEQUAL
67909: IFFALSE 67913
// exit ;
67911: GO 67979
// x := task [ 1 ] [ 2 ] ;
67913: LD_ADDR_VAR 0 5
67917: PUSH
67918: LD_VAR 0 7
67922: PUSH
67923: LD_INT 1
67925: ARRAY
67926: PUSH
67927: LD_INT 2
67929: ARRAY
67930: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67931: LD_ADDR_VAR 0 6
67935: PUSH
67936: LD_VAR 0 7
67940: PUSH
67941: LD_INT 1
67943: ARRAY
67944: PUSH
67945: LD_INT 3
67947: ARRAY
67948: ST_TO_ADDR
// if InArea ( x , y , area ) then
67949: LD_VAR 0 5
67953: PPUSH
67954: LD_VAR 0 6
67958: PPUSH
67959: LD_VAR 0 2
67963: PPUSH
67964: CALL_OW 309
67968: IFFALSE 67979
// ComStop ( unit ) ;
67970: LD_VAR 0 1
67974: PPUSH
67975: CALL_OW 141
// end ;
67979: LD_VAR 0 4
67983: RET
// export function Abs ( value ) ; begin
67984: LD_INT 0
67986: PPUSH
// result := value ;
67987: LD_ADDR_VAR 0 2
67991: PUSH
67992: LD_VAR 0 1
67996: ST_TO_ADDR
// if value < 0 then
67997: LD_VAR 0 1
68001: PUSH
68002: LD_INT 0
68004: LESS
68005: IFFALSE 68022
// result := value * - 1 ;
68007: LD_ADDR_VAR 0 2
68011: PUSH
68012: LD_VAR 0 1
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: MUL
68021: ST_TO_ADDR
// end ;
68022: LD_VAR 0 2
68026: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68027: LD_INT 0
68029: PPUSH
68030: PPUSH
68031: PPUSH
68032: PPUSH
68033: PPUSH
68034: PPUSH
68035: PPUSH
68036: PPUSH
// if not unit or not building then
68037: LD_VAR 0 1
68041: NOT
68042: PUSH
68043: LD_VAR 0 2
68047: NOT
68048: OR
68049: IFFALSE 68053
// exit ;
68051: GO 68279
// x := GetX ( building ) ;
68053: LD_ADDR_VAR 0 4
68057: PUSH
68058: LD_VAR 0 2
68062: PPUSH
68063: CALL_OW 250
68067: ST_TO_ADDR
// y := GetY ( building ) ;
68068: LD_ADDR_VAR 0 6
68072: PUSH
68073: LD_VAR 0 2
68077: PPUSH
68078: CALL_OW 251
68082: ST_TO_ADDR
// d := GetDir ( building ) ;
68083: LD_ADDR_VAR 0 8
68087: PUSH
68088: LD_VAR 0 2
68092: PPUSH
68093: CALL_OW 254
68097: ST_TO_ADDR
// r := 4 ;
68098: LD_ADDR_VAR 0 9
68102: PUSH
68103: LD_INT 4
68105: ST_TO_ADDR
// for i := 1 to 5 do
68106: LD_ADDR_VAR 0 10
68110: PUSH
68111: DOUBLE
68112: LD_INT 1
68114: DEC
68115: ST_TO_ADDR
68116: LD_INT 5
68118: PUSH
68119: FOR_TO
68120: IFFALSE 68277
// begin _x := ShiftX ( x , d , r + i ) ;
68122: LD_ADDR_VAR 0 5
68126: PUSH
68127: LD_VAR 0 4
68131: PPUSH
68132: LD_VAR 0 8
68136: PPUSH
68137: LD_VAR 0 9
68141: PUSH
68142: LD_VAR 0 10
68146: PLUS
68147: PPUSH
68148: CALL_OW 272
68152: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68153: LD_ADDR_VAR 0 7
68157: PUSH
68158: LD_VAR 0 6
68162: PPUSH
68163: LD_VAR 0 8
68167: PPUSH
68168: LD_VAR 0 9
68172: PUSH
68173: LD_VAR 0 10
68177: PLUS
68178: PPUSH
68179: CALL_OW 273
68183: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68184: LD_VAR 0 5
68188: PPUSH
68189: LD_VAR 0 7
68193: PPUSH
68194: CALL_OW 488
68198: PUSH
68199: LD_VAR 0 5
68203: PPUSH
68204: LD_VAR 0 7
68208: PPUSH
68209: CALL_OW 428
68213: PPUSH
68214: CALL_OW 247
68218: PUSH
68219: LD_INT 3
68221: PUSH
68222: LD_INT 2
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: IN
68229: NOT
68230: AND
68231: IFFALSE 68275
// begin ComMoveXY ( unit , _x , _y ) ;
68233: LD_VAR 0 1
68237: PPUSH
68238: LD_VAR 0 5
68242: PPUSH
68243: LD_VAR 0 7
68247: PPUSH
68248: CALL_OW 111
// result := [ _x , _y ] ;
68252: LD_ADDR_VAR 0 3
68256: PUSH
68257: LD_VAR 0 5
68261: PUSH
68262: LD_VAR 0 7
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: ST_TO_ADDR
// exit ;
68271: POP
68272: POP
68273: GO 68279
// end ; end ;
68275: GO 68119
68277: POP
68278: POP
// end ;
68279: LD_VAR 0 3
68283: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68284: LD_INT 0
68286: PPUSH
68287: PPUSH
68288: PPUSH
// result := 0 ;
68289: LD_ADDR_VAR 0 3
68293: PUSH
68294: LD_INT 0
68296: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68297: LD_VAR 0 1
68301: PUSH
68302: LD_INT 0
68304: LESS
68305: PUSH
68306: LD_VAR 0 1
68310: PUSH
68311: LD_INT 8
68313: GREATER
68314: OR
68315: PUSH
68316: LD_VAR 0 2
68320: PUSH
68321: LD_INT 0
68323: LESS
68324: OR
68325: PUSH
68326: LD_VAR 0 2
68330: PUSH
68331: LD_INT 8
68333: GREATER
68334: OR
68335: IFFALSE 68339
// exit ;
68337: GO 68414
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68339: LD_ADDR_VAR 0 4
68343: PUSH
68344: LD_INT 22
68346: PUSH
68347: LD_VAR 0 2
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PPUSH
68356: CALL_OW 69
68360: PUSH
68361: FOR_IN
68362: IFFALSE 68412
// begin un := UnitShoot ( i ) ;
68364: LD_ADDR_VAR 0 5
68368: PUSH
68369: LD_VAR 0 4
68373: PPUSH
68374: CALL_OW 504
68378: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68379: LD_VAR 0 5
68383: PPUSH
68384: CALL_OW 255
68388: PUSH
68389: LD_VAR 0 1
68393: EQUAL
68394: IFFALSE 68410
// begin result := un ;
68396: LD_ADDR_VAR 0 3
68400: PUSH
68401: LD_VAR 0 5
68405: ST_TO_ADDR
// exit ;
68406: POP
68407: POP
68408: GO 68414
// end ; end ;
68410: GO 68361
68412: POP
68413: POP
// end ;
68414: LD_VAR 0 3
68418: RET
// export function GetCargoBay ( units ) ; begin
68419: LD_INT 0
68421: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68422: LD_ADDR_VAR 0 2
68426: PUSH
68427: LD_VAR 0 1
68431: PPUSH
68432: LD_INT 2
68434: PUSH
68435: LD_INT 34
68437: PUSH
68438: LD_INT 12
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 34
68447: PUSH
68448: LD_INT 51
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 34
68457: PUSH
68458: LD_INT 32
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 34
68467: PUSH
68468: LD_INT 89
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: PPUSH
68482: CALL_OW 72
68486: ST_TO_ADDR
// end ;
68487: LD_VAR 0 2
68491: RET
// export function Negate ( value ) ; begin
68492: LD_INT 0
68494: PPUSH
// result := not value ;
68495: LD_ADDR_VAR 0 2
68499: PUSH
68500: LD_VAR 0 1
68504: NOT
68505: ST_TO_ADDR
// end ;
68506: LD_VAR 0 2
68510: RET
// export function Inc ( value ) ; begin
68511: LD_INT 0
68513: PPUSH
// result := value + 1 ;
68514: LD_ADDR_VAR 0 2
68518: PUSH
68519: LD_VAR 0 1
68523: PUSH
68524: LD_INT 1
68526: PLUS
68527: ST_TO_ADDR
// end ;
68528: LD_VAR 0 2
68532: RET
// export function Dec ( value ) ; begin
68533: LD_INT 0
68535: PPUSH
// result := value - 1 ;
68536: LD_ADDR_VAR 0 2
68540: PUSH
68541: LD_VAR 0 1
68545: PUSH
68546: LD_INT 1
68548: MINUS
68549: ST_TO_ADDR
// end ;
68550: LD_VAR 0 2
68554: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68555: LD_INT 0
68557: PPUSH
68558: PPUSH
68559: PPUSH
68560: PPUSH
68561: PPUSH
68562: PPUSH
68563: PPUSH
68564: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68565: LD_VAR 0 1
68569: PPUSH
68570: LD_VAR 0 2
68574: PPUSH
68575: CALL_OW 488
68579: NOT
68580: PUSH
68581: LD_VAR 0 3
68585: PPUSH
68586: LD_VAR 0 4
68590: PPUSH
68591: CALL_OW 488
68595: NOT
68596: OR
68597: IFFALSE 68610
// begin result := - 1 ;
68599: LD_ADDR_VAR 0 5
68603: PUSH
68604: LD_INT 1
68606: NEG
68607: ST_TO_ADDR
// exit ;
68608: GO 68845
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68610: LD_ADDR_VAR 0 12
68614: PUSH
68615: LD_VAR 0 1
68619: PPUSH
68620: LD_VAR 0 2
68624: PPUSH
68625: LD_VAR 0 3
68629: PPUSH
68630: LD_VAR 0 4
68634: PPUSH
68635: CALL 67695 0 4
68639: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68640: LD_ADDR_VAR 0 11
68644: PUSH
68645: LD_VAR 0 1
68649: PPUSH
68650: LD_VAR 0 2
68654: PPUSH
68655: LD_VAR 0 12
68659: PUSH
68660: LD_INT 1
68662: ARRAY
68663: PPUSH
68664: LD_VAR 0 12
68668: PUSH
68669: LD_INT 2
68671: ARRAY
68672: PPUSH
68673: CALL_OW 298
68677: ST_TO_ADDR
// distance := 9999 ;
68678: LD_ADDR_VAR 0 10
68682: PUSH
68683: LD_INT 9999
68685: ST_TO_ADDR
// for i := 0 to 5 do
68686: LD_ADDR_VAR 0 6
68690: PUSH
68691: DOUBLE
68692: LD_INT 0
68694: DEC
68695: ST_TO_ADDR
68696: LD_INT 5
68698: PUSH
68699: FOR_TO
68700: IFFALSE 68843
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68702: LD_ADDR_VAR 0 7
68706: PUSH
68707: LD_VAR 0 1
68711: PPUSH
68712: LD_VAR 0 6
68716: PPUSH
68717: LD_VAR 0 11
68721: PPUSH
68722: CALL_OW 272
68726: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68727: LD_ADDR_VAR 0 8
68731: PUSH
68732: LD_VAR 0 2
68736: PPUSH
68737: LD_VAR 0 6
68741: PPUSH
68742: LD_VAR 0 11
68746: PPUSH
68747: CALL_OW 273
68751: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68752: LD_VAR 0 7
68756: PPUSH
68757: LD_VAR 0 8
68761: PPUSH
68762: CALL_OW 488
68766: NOT
68767: IFFALSE 68771
// continue ;
68769: GO 68699
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68771: LD_ADDR_VAR 0 9
68775: PUSH
68776: LD_VAR 0 12
68780: PUSH
68781: LD_INT 1
68783: ARRAY
68784: PPUSH
68785: LD_VAR 0 12
68789: PUSH
68790: LD_INT 2
68792: ARRAY
68793: PPUSH
68794: LD_VAR 0 7
68798: PPUSH
68799: LD_VAR 0 8
68803: PPUSH
68804: CALL_OW 298
68808: ST_TO_ADDR
// if tmp < distance then
68809: LD_VAR 0 9
68813: PUSH
68814: LD_VAR 0 10
68818: LESS
68819: IFFALSE 68841
// begin result := i ;
68821: LD_ADDR_VAR 0 5
68825: PUSH
68826: LD_VAR 0 6
68830: ST_TO_ADDR
// distance := tmp ;
68831: LD_ADDR_VAR 0 10
68835: PUSH
68836: LD_VAR 0 9
68840: ST_TO_ADDR
// end ; end ;
68841: GO 68699
68843: POP
68844: POP
// end ;
68845: LD_VAR 0 5
68849: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68850: LD_INT 0
68852: PPUSH
68853: PPUSH
// if not driver or not IsInUnit ( driver ) then
68854: LD_VAR 0 1
68858: NOT
68859: PUSH
68860: LD_VAR 0 1
68864: PPUSH
68865: CALL_OW 310
68869: NOT
68870: OR
68871: IFFALSE 68875
// exit ;
68873: GO 68965
// vehicle := IsInUnit ( driver ) ;
68875: LD_ADDR_VAR 0 3
68879: PUSH
68880: LD_VAR 0 1
68884: PPUSH
68885: CALL_OW 310
68889: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68890: LD_VAR 0 1
68894: PPUSH
68895: LD_STRING \
68897: PUSH
68898: LD_INT 0
68900: PUSH
68901: LD_INT 0
68903: PUSH
68904: LD_INT 0
68906: PUSH
68907: LD_INT 0
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: LD_INT 0
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: PUSH
68925: LD_STRING E
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: LD_VAR 0 3
68938: PUSH
68939: LD_INT 0
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PPUSH
68961: CALL_OW 446
// end ;
68965: LD_VAR 0 2
68969: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68970: LD_INT 0
68972: PPUSH
68973: PPUSH
// if not driver or not IsInUnit ( driver ) then
68974: LD_VAR 0 1
68978: NOT
68979: PUSH
68980: LD_VAR 0 1
68984: PPUSH
68985: CALL_OW 310
68989: NOT
68990: OR
68991: IFFALSE 68995
// exit ;
68993: GO 69085
// vehicle := IsInUnit ( driver ) ;
68995: LD_ADDR_VAR 0 3
68999: PUSH
69000: LD_VAR 0 1
69004: PPUSH
69005: CALL_OW 310
69009: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69010: LD_VAR 0 1
69014: PPUSH
69015: LD_STRING \
69017: PUSH
69018: LD_INT 0
69020: PUSH
69021: LD_INT 0
69023: PUSH
69024: LD_INT 0
69026: PUSH
69027: LD_INT 0
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: PUSH
69045: LD_STRING E
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: LD_VAR 0 3
69058: PUSH
69059: LD_INT 0
69061: PUSH
69062: LD_INT 0
69064: PUSH
69065: LD_INT 0
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PPUSH
69081: CALL_OW 447
// end ;
69085: LD_VAR 0 2
69089: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69090: LD_INT 0
69092: PPUSH
69093: PPUSH
69094: PPUSH
// tmp := [ ] ;
69095: LD_ADDR_VAR 0 5
69099: PUSH
69100: EMPTY
69101: ST_TO_ADDR
// for i in units do
69102: LD_ADDR_VAR 0 4
69106: PUSH
69107: LD_VAR 0 1
69111: PUSH
69112: FOR_IN
69113: IFFALSE 69151
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69115: LD_ADDR_VAR 0 5
69119: PUSH
69120: LD_VAR 0 5
69124: PPUSH
69125: LD_VAR 0 5
69129: PUSH
69130: LD_INT 1
69132: PLUS
69133: PPUSH
69134: LD_VAR 0 4
69138: PPUSH
69139: CALL_OW 256
69143: PPUSH
69144: CALL_OW 2
69148: ST_TO_ADDR
69149: GO 69112
69151: POP
69152: POP
// if not tmp then
69153: LD_VAR 0 5
69157: NOT
69158: IFFALSE 69162
// exit ;
69160: GO 69210
// if asc then
69162: LD_VAR 0 2
69166: IFFALSE 69190
// result := SortListByListAsc ( units , tmp ) else
69168: LD_ADDR_VAR 0 3
69172: PUSH
69173: LD_VAR 0 1
69177: PPUSH
69178: LD_VAR 0 5
69182: PPUSH
69183: CALL_OW 76
69187: ST_TO_ADDR
69188: GO 69210
// result := SortListByListDesc ( units , tmp ) ;
69190: LD_ADDR_VAR 0 3
69194: PUSH
69195: LD_VAR 0 1
69199: PPUSH
69200: LD_VAR 0 5
69204: PPUSH
69205: CALL_OW 77
69209: ST_TO_ADDR
// end ;
69210: LD_VAR 0 3
69214: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69215: LD_INT 0
69217: PPUSH
69218: PPUSH
// task := GetTaskList ( mech ) ;
69219: LD_ADDR_VAR 0 4
69223: PUSH
69224: LD_VAR 0 1
69228: PPUSH
69229: CALL_OW 437
69233: ST_TO_ADDR
// if not task then
69234: LD_VAR 0 4
69238: NOT
69239: IFFALSE 69243
// exit ;
69241: GO 69285
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69243: LD_ADDR_VAR 0 3
69247: PUSH
69248: LD_VAR 0 4
69252: PUSH
69253: LD_INT 1
69255: ARRAY
69256: PUSH
69257: LD_INT 1
69259: ARRAY
69260: PUSH
69261: LD_STRING r
69263: EQUAL
69264: PUSH
69265: LD_VAR 0 4
69269: PUSH
69270: LD_INT 1
69272: ARRAY
69273: PUSH
69274: LD_INT 4
69276: ARRAY
69277: PUSH
69278: LD_VAR 0 2
69282: EQUAL
69283: AND
69284: ST_TO_ADDR
// end ;
69285: LD_VAR 0 3
69289: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69290: LD_INT 0
69292: PPUSH
// SetDir ( unit , d ) ;
69293: LD_VAR 0 1
69297: PPUSH
69298: LD_VAR 0 4
69302: PPUSH
69303: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69307: LD_VAR 0 1
69311: PPUSH
69312: LD_VAR 0 2
69316: PPUSH
69317: LD_VAR 0 3
69321: PPUSH
69322: LD_VAR 0 5
69326: PPUSH
69327: CALL_OW 48
// end ;
69331: LD_VAR 0 6
69335: RET
// export function ToNaturalNumber ( number ) ; begin
69336: LD_INT 0
69338: PPUSH
// result := number div 1 ;
69339: LD_ADDR_VAR 0 2
69343: PUSH
69344: LD_VAR 0 1
69348: PUSH
69349: LD_INT 1
69351: DIV
69352: ST_TO_ADDR
// if number < 0 then
69353: LD_VAR 0 1
69357: PUSH
69358: LD_INT 0
69360: LESS
69361: IFFALSE 69371
// result := 0 ;
69363: LD_ADDR_VAR 0 2
69367: PUSH
69368: LD_INT 0
69370: ST_TO_ADDR
// end ;
69371: LD_VAR 0 2
69375: RET
// export function SortByClass ( units , class ) ; var un ; begin
69376: LD_INT 0
69378: PPUSH
69379: PPUSH
// if not units or not class then
69380: LD_VAR 0 1
69384: NOT
69385: PUSH
69386: LD_VAR 0 2
69390: NOT
69391: OR
69392: IFFALSE 69396
// exit ;
69394: GO 69491
// result := [ ] ;
69396: LD_ADDR_VAR 0 3
69400: PUSH
69401: EMPTY
69402: ST_TO_ADDR
// for un in units do
69403: LD_ADDR_VAR 0 4
69407: PUSH
69408: LD_VAR 0 1
69412: PUSH
69413: FOR_IN
69414: IFFALSE 69489
// if GetClass ( un ) = class then
69416: LD_VAR 0 4
69420: PPUSH
69421: CALL_OW 257
69425: PUSH
69426: LD_VAR 0 2
69430: EQUAL
69431: IFFALSE 69458
// result := Insert ( result , 1 , un ) else
69433: LD_ADDR_VAR 0 3
69437: PUSH
69438: LD_VAR 0 3
69442: PPUSH
69443: LD_INT 1
69445: PPUSH
69446: LD_VAR 0 4
69450: PPUSH
69451: CALL_OW 2
69455: ST_TO_ADDR
69456: GO 69487
// result := Replace ( result , result + 1 , un ) ;
69458: LD_ADDR_VAR 0 3
69462: PUSH
69463: LD_VAR 0 3
69467: PPUSH
69468: LD_VAR 0 3
69472: PUSH
69473: LD_INT 1
69475: PLUS
69476: PPUSH
69477: LD_VAR 0 4
69481: PPUSH
69482: CALL_OW 1
69486: ST_TO_ADDR
69487: GO 69413
69489: POP
69490: POP
// end ;
69491: LD_VAR 0 3
69495: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69496: LD_INT 0
69498: PPUSH
69499: PPUSH
69500: PPUSH
69501: PPUSH
69502: PPUSH
69503: PPUSH
69504: PPUSH
// result := [ ] ;
69505: LD_ADDR_VAR 0 4
69509: PUSH
69510: EMPTY
69511: ST_TO_ADDR
// if x - r < 0 then
69512: LD_VAR 0 1
69516: PUSH
69517: LD_VAR 0 3
69521: MINUS
69522: PUSH
69523: LD_INT 0
69525: LESS
69526: IFFALSE 69538
// min_x := 0 else
69528: LD_ADDR_VAR 0 8
69532: PUSH
69533: LD_INT 0
69535: ST_TO_ADDR
69536: GO 69554
// min_x := x - r ;
69538: LD_ADDR_VAR 0 8
69542: PUSH
69543: LD_VAR 0 1
69547: PUSH
69548: LD_VAR 0 3
69552: MINUS
69553: ST_TO_ADDR
// if y - r < 0 then
69554: LD_VAR 0 2
69558: PUSH
69559: LD_VAR 0 3
69563: MINUS
69564: PUSH
69565: LD_INT 0
69567: LESS
69568: IFFALSE 69580
// min_y := 0 else
69570: LD_ADDR_VAR 0 7
69574: PUSH
69575: LD_INT 0
69577: ST_TO_ADDR
69578: GO 69596
// min_y := y - r ;
69580: LD_ADDR_VAR 0 7
69584: PUSH
69585: LD_VAR 0 2
69589: PUSH
69590: LD_VAR 0 3
69594: MINUS
69595: ST_TO_ADDR
// max_x := x + r ;
69596: LD_ADDR_VAR 0 9
69600: PUSH
69601: LD_VAR 0 1
69605: PUSH
69606: LD_VAR 0 3
69610: PLUS
69611: ST_TO_ADDR
// max_y := y + r ;
69612: LD_ADDR_VAR 0 10
69616: PUSH
69617: LD_VAR 0 2
69621: PUSH
69622: LD_VAR 0 3
69626: PLUS
69627: ST_TO_ADDR
// for _x = min_x to max_x do
69628: LD_ADDR_VAR 0 5
69632: PUSH
69633: DOUBLE
69634: LD_VAR 0 8
69638: DEC
69639: ST_TO_ADDR
69640: LD_VAR 0 9
69644: PUSH
69645: FOR_TO
69646: IFFALSE 69747
// for _y = min_y to max_y do
69648: LD_ADDR_VAR 0 6
69652: PUSH
69653: DOUBLE
69654: LD_VAR 0 7
69658: DEC
69659: ST_TO_ADDR
69660: LD_VAR 0 10
69664: PUSH
69665: FOR_TO
69666: IFFALSE 69743
// begin if not ValidHex ( _x , _y ) then
69668: LD_VAR 0 5
69672: PPUSH
69673: LD_VAR 0 6
69677: PPUSH
69678: CALL_OW 488
69682: NOT
69683: IFFALSE 69687
// continue ;
69685: GO 69665
// if GetResourceTypeXY ( _x , _y ) then
69687: LD_VAR 0 5
69691: PPUSH
69692: LD_VAR 0 6
69696: PPUSH
69697: CALL_OW 283
69701: IFFALSE 69741
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69703: LD_ADDR_VAR 0 4
69707: PUSH
69708: LD_VAR 0 4
69712: PPUSH
69713: LD_VAR 0 4
69717: PUSH
69718: LD_INT 1
69720: PLUS
69721: PPUSH
69722: LD_VAR 0 5
69726: PUSH
69727: LD_VAR 0 6
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PPUSH
69736: CALL_OW 1
69740: ST_TO_ADDR
// end ;
69741: GO 69665
69743: POP
69744: POP
69745: GO 69645
69747: POP
69748: POP
// end ;
69749: LD_VAR 0 4
69753: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69754: LD_INT 0
69756: PPUSH
69757: PPUSH
69758: PPUSH
69759: PPUSH
69760: PPUSH
69761: PPUSH
69762: PPUSH
69763: PPUSH
// if not units then
69764: LD_VAR 0 1
69768: NOT
69769: IFFALSE 69773
// exit ;
69771: GO 70297
// result := UnitFilter ( units , [ f_ok ] ) ;
69773: LD_ADDR_VAR 0 3
69777: PUSH
69778: LD_VAR 0 1
69782: PPUSH
69783: LD_INT 50
69785: PUSH
69786: EMPTY
69787: LIST
69788: PPUSH
69789: CALL_OW 72
69793: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69794: LD_ADDR_VAR 0 8
69798: PUSH
69799: LD_VAR 0 1
69803: PUSH
69804: LD_INT 1
69806: ARRAY
69807: PPUSH
69808: CALL_OW 255
69812: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69813: LD_ADDR_VAR 0 10
69817: PUSH
69818: LD_INT 29
69820: PUSH
69821: LD_INT 91
69823: PUSH
69824: LD_INT 49
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: LIST
69831: ST_TO_ADDR
// if not result then
69832: LD_VAR 0 3
69836: NOT
69837: IFFALSE 69841
// exit ;
69839: GO 70297
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69841: LD_ADDR_VAR 0 5
69845: PUSH
69846: LD_INT 81
69848: PUSH
69849: LD_VAR 0 8
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PPUSH
69858: CALL_OW 69
69862: ST_TO_ADDR
// for i in result do
69863: LD_ADDR_VAR 0 4
69867: PUSH
69868: LD_VAR 0 3
69872: PUSH
69873: FOR_IN
69874: IFFALSE 70295
// begin tag := GetTag ( i ) + 1 ;
69876: LD_ADDR_VAR 0 9
69880: PUSH
69881: LD_VAR 0 4
69885: PPUSH
69886: CALL_OW 110
69890: PUSH
69891: LD_INT 1
69893: PLUS
69894: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69895: LD_ADDR_VAR 0 7
69899: PUSH
69900: LD_VAR 0 4
69904: PPUSH
69905: CALL_OW 250
69909: PPUSH
69910: LD_VAR 0 4
69914: PPUSH
69915: CALL_OW 251
69919: PPUSH
69920: LD_INT 6
69922: PPUSH
69923: CALL 69496 0 3
69927: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69928: LD_VAR 0 4
69932: PPUSH
69933: CALL_OW 247
69937: PUSH
69938: LD_INT 2
69940: EQUAL
69941: PUSH
69942: LD_VAR 0 7
69946: AND
69947: PUSH
69948: LD_VAR 0 4
69952: PPUSH
69953: CALL_OW 264
69957: PUSH
69958: LD_VAR 0 10
69962: IN
69963: NOT
69964: AND
69965: IFFALSE 70004
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69967: LD_VAR 0 4
69971: PPUSH
69972: LD_VAR 0 7
69976: PUSH
69977: LD_INT 1
69979: ARRAY
69980: PUSH
69981: LD_INT 1
69983: ARRAY
69984: PPUSH
69985: LD_VAR 0 7
69989: PUSH
69990: LD_INT 1
69992: ARRAY
69993: PUSH
69994: LD_INT 2
69996: ARRAY
69997: PPUSH
69998: CALL_OW 116
70002: GO 70293
// if path > tag then
70004: LD_VAR 0 2
70008: PUSH
70009: LD_VAR 0 9
70013: GREATER
70014: IFFALSE 70222
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70016: LD_ADDR_VAR 0 6
70020: PUSH
70021: LD_VAR 0 5
70025: PPUSH
70026: LD_INT 91
70028: PUSH
70029: LD_VAR 0 4
70033: PUSH
70034: LD_INT 8
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: LIST
70041: PPUSH
70042: CALL_OW 72
70046: ST_TO_ADDR
// if nearEnemy then
70047: LD_VAR 0 6
70051: IFFALSE 70120
// begin if GetWeapon ( i ) = ru_time_lapser then
70053: LD_VAR 0 4
70057: PPUSH
70058: CALL_OW 264
70062: PUSH
70063: LD_INT 49
70065: EQUAL
70066: IFFALSE 70094
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70068: LD_VAR 0 4
70072: PPUSH
70073: LD_VAR 0 6
70077: PPUSH
70078: LD_VAR 0 4
70082: PPUSH
70083: CALL_OW 74
70087: PPUSH
70088: CALL_OW 112
70092: GO 70118
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70094: LD_VAR 0 4
70098: PPUSH
70099: LD_VAR 0 6
70103: PPUSH
70104: LD_VAR 0 4
70108: PPUSH
70109: CALL_OW 74
70113: PPUSH
70114: CALL 71222 0 2
// end else
70118: GO 70220
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70120: LD_VAR 0 4
70124: PPUSH
70125: LD_VAR 0 2
70129: PUSH
70130: LD_VAR 0 9
70134: ARRAY
70135: PUSH
70136: LD_INT 1
70138: ARRAY
70139: PPUSH
70140: LD_VAR 0 2
70144: PUSH
70145: LD_VAR 0 9
70149: ARRAY
70150: PUSH
70151: LD_INT 2
70153: ARRAY
70154: PPUSH
70155: CALL_OW 297
70159: PUSH
70160: LD_INT 6
70162: GREATER
70163: IFFALSE 70206
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70165: LD_VAR 0 4
70169: PPUSH
70170: LD_VAR 0 2
70174: PUSH
70175: LD_VAR 0 9
70179: ARRAY
70180: PUSH
70181: LD_INT 1
70183: ARRAY
70184: PPUSH
70185: LD_VAR 0 2
70189: PUSH
70190: LD_VAR 0 9
70194: ARRAY
70195: PUSH
70196: LD_INT 2
70198: ARRAY
70199: PPUSH
70200: CALL_OW 114
70204: GO 70220
// SetTag ( i , tag ) ;
70206: LD_VAR 0 4
70210: PPUSH
70211: LD_VAR 0 9
70215: PPUSH
70216: CALL_OW 109
// end else
70220: GO 70293
// if enemy then
70222: LD_VAR 0 5
70226: IFFALSE 70293
// begin if GetWeapon ( i ) = ru_time_lapser then
70228: LD_VAR 0 4
70232: PPUSH
70233: CALL_OW 264
70237: PUSH
70238: LD_INT 49
70240: EQUAL
70241: IFFALSE 70269
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70243: LD_VAR 0 4
70247: PPUSH
70248: LD_VAR 0 5
70252: PPUSH
70253: LD_VAR 0 4
70257: PPUSH
70258: CALL_OW 74
70262: PPUSH
70263: CALL_OW 112
70267: GO 70293
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70269: LD_VAR 0 4
70273: PPUSH
70274: LD_VAR 0 5
70278: PPUSH
70279: LD_VAR 0 4
70283: PPUSH
70284: CALL_OW 74
70288: PPUSH
70289: CALL 71222 0 2
// end ; end ;
70293: GO 69873
70295: POP
70296: POP
// end ;
70297: LD_VAR 0 3
70301: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70302: LD_INT 0
70304: PPUSH
70305: PPUSH
70306: PPUSH
// if not unit or IsInUnit ( unit ) then
70307: LD_VAR 0 1
70311: NOT
70312: PUSH
70313: LD_VAR 0 1
70317: PPUSH
70318: CALL_OW 310
70322: OR
70323: IFFALSE 70327
// exit ;
70325: GO 70418
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70327: LD_ADDR_VAR 0 4
70331: PUSH
70332: LD_VAR 0 1
70336: PPUSH
70337: CALL_OW 250
70341: PPUSH
70342: LD_VAR 0 2
70346: PPUSH
70347: LD_INT 1
70349: PPUSH
70350: CALL_OW 272
70354: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70355: LD_ADDR_VAR 0 5
70359: PUSH
70360: LD_VAR 0 1
70364: PPUSH
70365: CALL_OW 251
70369: PPUSH
70370: LD_VAR 0 2
70374: PPUSH
70375: LD_INT 1
70377: PPUSH
70378: CALL_OW 273
70382: ST_TO_ADDR
// if ValidHex ( x , y ) then
70383: LD_VAR 0 4
70387: PPUSH
70388: LD_VAR 0 5
70392: PPUSH
70393: CALL_OW 488
70397: IFFALSE 70418
// ComTurnXY ( unit , x , y ) ;
70399: LD_VAR 0 1
70403: PPUSH
70404: LD_VAR 0 4
70408: PPUSH
70409: LD_VAR 0 5
70413: PPUSH
70414: CALL_OW 118
// end ;
70418: LD_VAR 0 3
70422: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70423: LD_INT 0
70425: PPUSH
70426: PPUSH
// result := false ;
70427: LD_ADDR_VAR 0 3
70431: PUSH
70432: LD_INT 0
70434: ST_TO_ADDR
// if not units then
70435: LD_VAR 0 2
70439: NOT
70440: IFFALSE 70444
// exit ;
70442: GO 70489
// for i in units do
70444: LD_ADDR_VAR 0 4
70448: PUSH
70449: LD_VAR 0 2
70453: PUSH
70454: FOR_IN
70455: IFFALSE 70487
// if See ( side , i ) then
70457: LD_VAR 0 1
70461: PPUSH
70462: LD_VAR 0 4
70466: PPUSH
70467: CALL_OW 292
70471: IFFALSE 70485
// begin result := true ;
70473: LD_ADDR_VAR 0 3
70477: PUSH
70478: LD_INT 1
70480: ST_TO_ADDR
// exit ;
70481: POP
70482: POP
70483: GO 70489
// end ;
70485: GO 70454
70487: POP
70488: POP
// end ;
70489: LD_VAR 0 3
70493: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70494: LD_INT 0
70496: PPUSH
70497: PPUSH
70498: PPUSH
70499: PPUSH
// if not unit or not points then
70500: LD_VAR 0 1
70504: NOT
70505: PUSH
70506: LD_VAR 0 2
70510: NOT
70511: OR
70512: IFFALSE 70516
// exit ;
70514: GO 70606
// dist := 99999 ;
70516: LD_ADDR_VAR 0 5
70520: PUSH
70521: LD_INT 99999
70523: ST_TO_ADDR
// for i in points do
70524: LD_ADDR_VAR 0 4
70528: PUSH
70529: LD_VAR 0 2
70533: PUSH
70534: FOR_IN
70535: IFFALSE 70604
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70537: LD_ADDR_VAR 0 6
70541: PUSH
70542: LD_VAR 0 1
70546: PPUSH
70547: LD_VAR 0 4
70551: PUSH
70552: LD_INT 1
70554: ARRAY
70555: PPUSH
70556: LD_VAR 0 4
70560: PUSH
70561: LD_INT 2
70563: ARRAY
70564: PPUSH
70565: CALL_OW 297
70569: ST_TO_ADDR
// if tmpDist < dist then
70570: LD_VAR 0 6
70574: PUSH
70575: LD_VAR 0 5
70579: LESS
70580: IFFALSE 70602
// begin result := i ;
70582: LD_ADDR_VAR 0 3
70586: PUSH
70587: LD_VAR 0 4
70591: ST_TO_ADDR
// dist := tmpDist ;
70592: LD_ADDR_VAR 0 5
70596: PUSH
70597: LD_VAR 0 6
70601: ST_TO_ADDR
// end ; end ;
70602: GO 70534
70604: POP
70605: POP
// end ;
70606: LD_VAR 0 3
70610: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70611: LD_INT 0
70613: PPUSH
// uc_side := side ;
70614: LD_ADDR_OWVAR 20
70618: PUSH
70619: LD_VAR 0 1
70623: ST_TO_ADDR
// uc_nation := 3 ;
70624: LD_ADDR_OWVAR 21
70628: PUSH
70629: LD_INT 3
70631: ST_TO_ADDR
// vc_chassis := 25 ;
70632: LD_ADDR_OWVAR 37
70636: PUSH
70637: LD_INT 25
70639: ST_TO_ADDR
// vc_engine := engine_siberite ;
70640: LD_ADDR_OWVAR 39
70644: PUSH
70645: LD_INT 3
70647: ST_TO_ADDR
// vc_control := control_computer ;
70648: LD_ADDR_OWVAR 38
70652: PUSH
70653: LD_INT 3
70655: ST_TO_ADDR
// vc_weapon := 59 ;
70656: LD_ADDR_OWVAR 40
70660: PUSH
70661: LD_INT 59
70663: ST_TO_ADDR
// result := CreateVehicle ;
70664: LD_ADDR_VAR 0 5
70668: PUSH
70669: CALL_OW 45
70673: ST_TO_ADDR
// SetDir ( result , d ) ;
70674: LD_VAR 0 5
70678: PPUSH
70679: LD_VAR 0 4
70683: PPUSH
70684: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70688: LD_VAR 0 5
70692: PPUSH
70693: LD_VAR 0 2
70697: PPUSH
70698: LD_VAR 0 3
70702: PPUSH
70703: LD_INT 0
70705: PPUSH
70706: CALL_OW 48
// end ;
70710: LD_VAR 0 5
70714: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70715: LD_INT 0
70717: PPUSH
70718: PPUSH
70719: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70720: LD_ADDR_VAR 0 2
70724: PUSH
70725: LD_INT 0
70727: PUSH
70728: LD_INT 0
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: LD_INT 0
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70743: LD_VAR 0 1
70747: NOT
70748: PUSH
70749: LD_VAR 0 1
70753: PPUSH
70754: CALL_OW 264
70758: PUSH
70759: LD_INT 12
70761: PUSH
70762: LD_INT 51
70764: PUSH
70765: LD_INT 32
70767: PUSH
70768: LD_INT 89
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: IN
70777: NOT
70778: OR
70779: IFFALSE 70783
// exit ;
70781: GO 70881
// for i := 1 to 3 do
70783: LD_ADDR_VAR 0 3
70787: PUSH
70788: DOUBLE
70789: LD_INT 1
70791: DEC
70792: ST_TO_ADDR
70793: LD_INT 3
70795: PUSH
70796: FOR_TO
70797: IFFALSE 70879
// begin tmp := GetCargo ( cargo , i ) ;
70799: LD_ADDR_VAR 0 4
70803: PUSH
70804: LD_VAR 0 1
70808: PPUSH
70809: LD_VAR 0 3
70813: PPUSH
70814: CALL_OW 289
70818: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70819: LD_ADDR_VAR 0 2
70823: PUSH
70824: LD_VAR 0 2
70828: PPUSH
70829: LD_VAR 0 3
70833: PPUSH
70834: LD_VAR 0 4
70838: PPUSH
70839: CALL_OW 1
70843: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70844: LD_ADDR_VAR 0 2
70848: PUSH
70849: LD_VAR 0 2
70853: PPUSH
70854: LD_INT 4
70856: PPUSH
70857: LD_VAR 0 2
70861: PUSH
70862: LD_INT 4
70864: ARRAY
70865: PUSH
70866: LD_VAR 0 4
70870: PLUS
70871: PPUSH
70872: CALL_OW 1
70876: ST_TO_ADDR
// end ;
70877: GO 70796
70879: POP
70880: POP
// end ;
70881: LD_VAR 0 2
70885: RET
// export function Length ( array ) ; begin
70886: LD_INT 0
70888: PPUSH
// result := array + 0 ;
70889: LD_ADDR_VAR 0 2
70893: PUSH
70894: LD_VAR 0 1
70898: PUSH
70899: LD_INT 0
70901: PLUS
70902: ST_TO_ADDR
// end ;
70903: LD_VAR 0 2
70907: RET
// export function PrepareArray ( array ) ; begin
70908: LD_INT 0
70910: PPUSH
// result := array diff 0 ;
70911: LD_ADDR_VAR 0 2
70915: PUSH
70916: LD_VAR 0 1
70920: PUSH
70921: LD_INT 0
70923: DIFF
70924: ST_TO_ADDR
// if not result [ 1 ] then
70925: LD_VAR 0 2
70929: PUSH
70930: LD_INT 1
70932: ARRAY
70933: NOT
70934: IFFALSE 70954
// result := Delete ( result , 1 ) ;
70936: LD_ADDR_VAR 0 2
70940: PUSH
70941: LD_VAR 0 2
70945: PPUSH
70946: LD_INT 1
70948: PPUSH
70949: CALL_OW 3
70953: ST_TO_ADDR
// end ;
70954: LD_VAR 0 2
70958: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70959: LD_INT 0
70961: PPUSH
70962: PPUSH
70963: PPUSH
70964: PPUSH
// sibRocketRange := 25 ;
70965: LD_ADDR_VAR 0 6
70969: PUSH
70970: LD_INT 25
70972: ST_TO_ADDR
// result := false ;
70973: LD_ADDR_VAR 0 4
70977: PUSH
70978: LD_INT 0
70980: ST_TO_ADDR
// for i := 0 to 5 do
70981: LD_ADDR_VAR 0 5
70985: PUSH
70986: DOUBLE
70987: LD_INT 0
70989: DEC
70990: ST_TO_ADDR
70991: LD_INT 5
70993: PUSH
70994: FOR_TO
70995: IFFALSE 71062
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70997: LD_VAR 0 1
71001: PPUSH
71002: LD_VAR 0 5
71006: PPUSH
71007: LD_VAR 0 6
71011: PPUSH
71012: CALL_OW 272
71016: PPUSH
71017: LD_VAR 0 2
71021: PPUSH
71022: LD_VAR 0 5
71026: PPUSH
71027: LD_VAR 0 6
71031: PPUSH
71032: CALL_OW 273
71036: PPUSH
71037: LD_VAR 0 3
71041: PPUSH
71042: CALL_OW 309
71046: IFFALSE 71060
// begin result := true ;
71048: LD_ADDR_VAR 0 4
71052: PUSH
71053: LD_INT 1
71055: ST_TO_ADDR
// exit ;
71056: POP
71057: POP
71058: GO 71064
// end ;
71060: GO 70994
71062: POP
71063: POP
// end ;
71064: LD_VAR 0 4
71068: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71069: LD_INT 0
71071: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71072: LD_VAR 0 1
71076: PPUSH
71077: LD_VAR 0 2
71081: PPUSH
71082: LD_INT 0
71084: PPUSH
71085: LD_INT 0
71087: PPUSH
71088: LD_INT 1
71090: PPUSH
71091: LD_INT 0
71093: PPUSH
71094: CALL_OW 587
// end ;
71098: LD_VAR 0 3
71102: RET
// export function CenterOnNow ( unit ) ; begin
71103: LD_INT 0
71105: PPUSH
// result := IsInUnit ( unit ) ;
71106: LD_ADDR_VAR 0 2
71110: PUSH
71111: LD_VAR 0 1
71115: PPUSH
71116: CALL_OW 310
71120: ST_TO_ADDR
// if not result then
71121: LD_VAR 0 2
71125: NOT
71126: IFFALSE 71138
// result := unit ;
71128: LD_ADDR_VAR 0 2
71132: PUSH
71133: LD_VAR 0 1
71137: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71138: LD_VAR 0 1
71142: PPUSH
71143: CALL_OW 87
// end ;
71147: LD_VAR 0 2
71151: RET
// export function ComMoveHex ( unit , hex ) ; begin
71152: LD_INT 0
71154: PPUSH
// if not hex then
71155: LD_VAR 0 2
71159: NOT
71160: IFFALSE 71164
// exit ;
71162: GO 71217
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71164: LD_VAR 0 2
71168: PUSH
71169: LD_INT 1
71171: ARRAY
71172: PPUSH
71173: LD_VAR 0 2
71177: PUSH
71178: LD_INT 2
71180: ARRAY
71181: PPUSH
71182: CALL_OW 428
71186: IFFALSE 71190
// exit ;
71188: GO 71217
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71190: LD_VAR 0 1
71194: PPUSH
71195: LD_VAR 0 2
71199: PUSH
71200: LD_INT 1
71202: ARRAY
71203: PPUSH
71204: LD_VAR 0 2
71208: PUSH
71209: LD_INT 2
71211: ARRAY
71212: PPUSH
71213: CALL_OW 111
// end ;
71217: LD_VAR 0 3
71221: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71222: LD_INT 0
71224: PPUSH
71225: PPUSH
71226: PPUSH
// if not unit or not enemy then
71227: LD_VAR 0 1
71231: NOT
71232: PUSH
71233: LD_VAR 0 2
71237: NOT
71238: OR
71239: IFFALSE 71243
// exit ;
71241: GO 71367
// x := GetX ( enemy ) ;
71243: LD_ADDR_VAR 0 4
71247: PUSH
71248: LD_VAR 0 2
71252: PPUSH
71253: CALL_OW 250
71257: ST_TO_ADDR
// y := GetY ( enemy ) ;
71258: LD_ADDR_VAR 0 5
71262: PUSH
71263: LD_VAR 0 2
71267: PPUSH
71268: CALL_OW 251
71272: ST_TO_ADDR
// if ValidHex ( x , y ) then
71273: LD_VAR 0 4
71277: PPUSH
71278: LD_VAR 0 5
71282: PPUSH
71283: CALL_OW 488
71287: IFFALSE 71367
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71289: LD_VAR 0 2
71293: PPUSH
71294: CALL_OW 247
71298: PUSH
71299: LD_INT 3
71301: PUSH
71302: LD_INT 2
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: IN
71309: PUSH
71310: LD_VAR 0 1
71314: PPUSH
71315: CALL_OW 255
71319: PPUSH
71320: LD_VAR 0 2
71324: PPUSH
71325: CALL_OW 292
71329: AND
71330: IFFALSE 71348
// ComAttackUnit ( unit , enemy ) else
71332: LD_VAR 0 1
71336: PPUSH
71337: LD_VAR 0 2
71341: PPUSH
71342: CALL_OW 115
71346: GO 71367
// ComAgressiveMove ( unit , x , y ) ;
71348: LD_VAR 0 1
71352: PPUSH
71353: LD_VAR 0 4
71357: PPUSH
71358: LD_VAR 0 5
71362: PPUSH
71363: CALL_OW 114
// end ; end_of_file end_of_file
71367: LD_VAR 0 3
71371: RET
// export globalGameSaveCounter ; every 0 0$1 do
71372: GO 71374
71374: DISABLE
// begin enable ;
71375: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
71376: LD_STRING updateTimer(
71378: PUSH
71379: LD_OWVAR 1
71383: STR
71384: PUSH
71385: LD_STRING );
71387: STR
71388: PPUSH
71389: CALL_OW 559
// end ;
71393: END
// every 0 0$1 do
71394: GO 71396
71396: DISABLE
// begin globalGameSaveCounter := 0 ;
71397: LD_ADDR_EXP 63
71401: PUSH
71402: LD_INT 0
71404: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
71405: LD_STRING setGameSaveCounter(0)
71407: PPUSH
71408: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
71412: LD_STRING initStreamRollete();
71414: PPUSH
71415: CALL_OW 559
// InitStreamMode ;
71419: CALL 72745 0 0
// DefineStreamItems ( false ) ;
71423: LD_INT 0
71425: PPUSH
71426: CALL 73209 0 1
// end ;
71430: END
// export function SOS_MapStart ( ) ; begin
71431: LD_INT 0
71433: PPUSH
// if streamModeActive then
71434: LD_EXP 64
71438: IFFALSE 71447
// DefineStreamItems ( true ) ;
71440: LD_INT 1
71442: PPUSH
71443: CALL 73209 0 1
// UpdateLuaVariables ( ) ;
71447: CALL 71464 0 0
// UpdateFactoryWaypoints ( ) ;
71451: CALL 86078 0 0
// UpdateWarehouseGatheringPoints ( ) ;
71455: CALL 86335 0 0
// end ;
71459: LD_VAR 0 1
71463: RET
// function UpdateLuaVariables ( ) ; begin
71464: LD_INT 0
71466: PPUSH
// if globalGameSaveCounter then
71467: LD_EXP 63
71471: IFFALSE 71505
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
71473: LD_ADDR_EXP 63
71477: PUSH
71478: LD_EXP 63
71482: PPUSH
71483: CALL 68511 0 1
71487: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71488: LD_STRING setGameSaveCounter(
71490: PUSH
71491: LD_EXP 63
71495: STR
71496: PUSH
71497: LD_STRING )
71499: STR
71500: PPUSH
71501: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
71505: LD_STRING setGameDifficulty(
71507: PUSH
71508: LD_OWVAR 67
71512: STR
71513: PUSH
71514: LD_STRING )
71516: STR
71517: PPUSH
71518: CALL_OW 559
// end ;
71522: LD_VAR 0 1
71526: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71527: LD_INT 0
71529: PPUSH
// if p2 = stream_mode then
71530: LD_VAR 0 2
71534: PUSH
71535: LD_INT 100
71537: EQUAL
71538: IFFALSE 72541
// begin if not StreamModeActive then
71540: LD_EXP 64
71544: NOT
71545: IFFALSE 71555
// StreamModeActive := true ;
71547: LD_ADDR_EXP 64
71551: PUSH
71552: LD_INT 1
71554: ST_TO_ADDR
// if p3 = 0 then
71555: LD_VAR 0 3
71559: PUSH
71560: LD_INT 0
71562: EQUAL
71563: IFFALSE 71569
// InitStreamMode ;
71565: CALL 72745 0 0
// if p3 = 1 then
71569: LD_VAR 0 3
71573: PUSH
71574: LD_INT 1
71576: EQUAL
71577: IFFALSE 71587
// sRocket := true ;
71579: LD_ADDR_EXP 69
71583: PUSH
71584: LD_INT 1
71586: ST_TO_ADDR
// if p3 = 2 then
71587: LD_VAR 0 3
71591: PUSH
71592: LD_INT 2
71594: EQUAL
71595: IFFALSE 71605
// sSpeed := true ;
71597: LD_ADDR_EXP 68
71601: PUSH
71602: LD_INT 1
71604: ST_TO_ADDR
// if p3 = 3 then
71605: LD_VAR 0 3
71609: PUSH
71610: LD_INT 3
71612: EQUAL
71613: IFFALSE 71623
// sEngine := true ;
71615: LD_ADDR_EXP 70
71619: PUSH
71620: LD_INT 1
71622: ST_TO_ADDR
// if p3 = 4 then
71623: LD_VAR 0 3
71627: PUSH
71628: LD_INT 4
71630: EQUAL
71631: IFFALSE 71641
// sSpec := true ;
71633: LD_ADDR_EXP 67
71637: PUSH
71638: LD_INT 1
71640: ST_TO_ADDR
// if p3 = 5 then
71641: LD_VAR 0 3
71645: PUSH
71646: LD_INT 5
71648: EQUAL
71649: IFFALSE 71659
// sLevel := true ;
71651: LD_ADDR_EXP 71
71655: PUSH
71656: LD_INT 1
71658: ST_TO_ADDR
// if p3 = 6 then
71659: LD_VAR 0 3
71663: PUSH
71664: LD_INT 6
71666: EQUAL
71667: IFFALSE 71677
// sArmoury := true ;
71669: LD_ADDR_EXP 72
71673: PUSH
71674: LD_INT 1
71676: ST_TO_ADDR
// if p3 = 7 then
71677: LD_VAR 0 3
71681: PUSH
71682: LD_INT 7
71684: EQUAL
71685: IFFALSE 71695
// sRadar := true ;
71687: LD_ADDR_EXP 73
71691: PUSH
71692: LD_INT 1
71694: ST_TO_ADDR
// if p3 = 8 then
71695: LD_VAR 0 3
71699: PUSH
71700: LD_INT 8
71702: EQUAL
71703: IFFALSE 71713
// sBunker := true ;
71705: LD_ADDR_EXP 74
71709: PUSH
71710: LD_INT 1
71712: ST_TO_ADDR
// if p3 = 9 then
71713: LD_VAR 0 3
71717: PUSH
71718: LD_INT 9
71720: EQUAL
71721: IFFALSE 71731
// sHack := true ;
71723: LD_ADDR_EXP 75
71727: PUSH
71728: LD_INT 1
71730: ST_TO_ADDR
// if p3 = 10 then
71731: LD_VAR 0 3
71735: PUSH
71736: LD_INT 10
71738: EQUAL
71739: IFFALSE 71749
// sFire := true ;
71741: LD_ADDR_EXP 76
71745: PUSH
71746: LD_INT 1
71748: ST_TO_ADDR
// if p3 = 11 then
71749: LD_VAR 0 3
71753: PUSH
71754: LD_INT 11
71756: EQUAL
71757: IFFALSE 71767
// sRefresh := true ;
71759: LD_ADDR_EXP 77
71763: PUSH
71764: LD_INT 1
71766: ST_TO_ADDR
// if p3 = 12 then
71767: LD_VAR 0 3
71771: PUSH
71772: LD_INT 12
71774: EQUAL
71775: IFFALSE 71785
// sExp := true ;
71777: LD_ADDR_EXP 78
71781: PUSH
71782: LD_INT 1
71784: ST_TO_ADDR
// if p3 = 13 then
71785: LD_VAR 0 3
71789: PUSH
71790: LD_INT 13
71792: EQUAL
71793: IFFALSE 71803
// sDepot := true ;
71795: LD_ADDR_EXP 79
71799: PUSH
71800: LD_INT 1
71802: ST_TO_ADDR
// if p3 = 14 then
71803: LD_VAR 0 3
71807: PUSH
71808: LD_INT 14
71810: EQUAL
71811: IFFALSE 71821
// sFlag := true ;
71813: LD_ADDR_EXP 80
71817: PUSH
71818: LD_INT 1
71820: ST_TO_ADDR
// if p3 = 15 then
71821: LD_VAR 0 3
71825: PUSH
71826: LD_INT 15
71828: EQUAL
71829: IFFALSE 71839
// sKamikadze := true ;
71831: LD_ADDR_EXP 88
71835: PUSH
71836: LD_INT 1
71838: ST_TO_ADDR
// if p3 = 16 then
71839: LD_VAR 0 3
71843: PUSH
71844: LD_INT 16
71846: EQUAL
71847: IFFALSE 71857
// sTroll := true ;
71849: LD_ADDR_EXP 89
71853: PUSH
71854: LD_INT 1
71856: ST_TO_ADDR
// if p3 = 17 then
71857: LD_VAR 0 3
71861: PUSH
71862: LD_INT 17
71864: EQUAL
71865: IFFALSE 71875
// sSlow := true ;
71867: LD_ADDR_EXP 90
71871: PUSH
71872: LD_INT 1
71874: ST_TO_ADDR
// if p3 = 18 then
71875: LD_VAR 0 3
71879: PUSH
71880: LD_INT 18
71882: EQUAL
71883: IFFALSE 71893
// sLack := true ;
71885: LD_ADDR_EXP 91
71889: PUSH
71890: LD_INT 1
71892: ST_TO_ADDR
// if p3 = 19 then
71893: LD_VAR 0 3
71897: PUSH
71898: LD_INT 19
71900: EQUAL
71901: IFFALSE 71911
// sTank := true ;
71903: LD_ADDR_EXP 93
71907: PUSH
71908: LD_INT 1
71910: ST_TO_ADDR
// if p3 = 20 then
71911: LD_VAR 0 3
71915: PUSH
71916: LD_INT 20
71918: EQUAL
71919: IFFALSE 71929
// sRemote := true ;
71921: LD_ADDR_EXP 94
71925: PUSH
71926: LD_INT 1
71928: ST_TO_ADDR
// if p3 = 21 then
71929: LD_VAR 0 3
71933: PUSH
71934: LD_INT 21
71936: EQUAL
71937: IFFALSE 71947
// sPowell := true ;
71939: LD_ADDR_EXP 95
71943: PUSH
71944: LD_INT 1
71946: ST_TO_ADDR
// if p3 = 22 then
71947: LD_VAR 0 3
71951: PUSH
71952: LD_INT 22
71954: EQUAL
71955: IFFALSE 71965
// sTeleport := true ;
71957: LD_ADDR_EXP 98
71961: PUSH
71962: LD_INT 1
71964: ST_TO_ADDR
// if p3 = 23 then
71965: LD_VAR 0 3
71969: PUSH
71970: LD_INT 23
71972: EQUAL
71973: IFFALSE 71983
// sOilTower := true ;
71975: LD_ADDR_EXP 100
71979: PUSH
71980: LD_INT 1
71982: ST_TO_ADDR
// if p3 = 24 then
71983: LD_VAR 0 3
71987: PUSH
71988: LD_INT 24
71990: EQUAL
71991: IFFALSE 72001
// sShovel := true ;
71993: LD_ADDR_EXP 101
71997: PUSH
71998: LD_INT 1
72000: ST_TO_ADDR
// if p3 = 25 then
72001: LD_VAR 0 3
72005: PUSH
72006: LD_INT 25
72008: EQUAL
72009: IFFALSE 72019
// sSheik := true ;
72011: LD_ADDR_EXP 102
72015: PUSH
72016: LD_INT 1
72018: ST_TO_ADDR
// if p3 = 26 then
72019: LD_VAR 0 3
72023: PUSH
72024: LD_INT 26
72026: EQUAL
72027: IFFALSE 72037
// sEarthquake := true ;
72029: LD_ADDR_EXP 104
72033: PUSH
72034: LD_INT 1
72036: ST_TO_ADDR
// if p3 = 27 then
72037: LD_VAR 0 3
72041: PUSH
72042: LD_INT 27
72044: EQUAL
72045: IFFALSE 72055
// sAI := true ;
72047: LD_ADDR_EXP 105
72051: PUSH
72052: LD_INT 1
72054: ST_TO_ADDR
// if p3 = 28 then
72055: LD_VAR 0 3
72059: PUSH
72060: LD_INT 28
72062: EQUAL
72063: IFFALSE 72073
// sCargo := true ;
72065: LD_ADDR_EXP 108
72069: PUSH
72070: LD_INT 1
72072: ST_TO_ADDR
// if p3 = 29 then
72073: LD_VAR 0 3
72077: PUSH
72078: LD_INT 29
72080: EQUAL
72081: IFFALSE 72091
// sDLaser := true ;
72083: LD_ADDR_EXP 109
72087: PUSH
72088: LD_INT 1
72090: ST_TO_ADDR
// if p3 = 30 then
72091: LD_VAR 0 3
72095: PUSH
72096: LD_INT 30
72098: EQUAL
72099: IFFALSE 72109
// sExchange := true ;
72101: LD_ADDR_EXP 110
72105: PUSH
72106: LD_INT 1
72108: ST_TO_ADDR
// if p3 = 31 then
72109: LD_VAR 0 3
72113: PUSH
72114: LD_INT 31
72116: EQUAL
72117: IFFALSE 72127
// sFac := true ;
72119: LD_ADDR_EXP 111
72123: PUSH
72124: LD_INT 1
72126: ST_TO_ADDR
// if p3 = 32 then
72127: LD_VAR 0 3
72131: PUSH
72132: LD_INT 32
72134: EQUAL
72135: IFFALSE 72145
// sPower := true ;
72137: LD_ADDR_EXP 112
72141: PUSH
72142: LD_INT 1
72144: ST_TO_ADDR
// if p3 = 33 then
72145: LD_VAR 0 3
72149: PUSH
72150: LD_INT 33
72152: EQUAL
72153: IFFALSE 72163
// sRandom := true ;
72155: LD_ADDR_EXP 113
72159: PUSH
72160: LD_INT 1
72162: ST_TO_ADDR
// if p3 = 34 then
72163: LD_VAR 0 3
72167: PUSH
72168: LD_INT 34
72170: EQUAL
72171: IFFALSE 72181
// sShield := true ;
72173: LD_ADDR_EXP 114
72177: PUSH
72178: LD_INT 1
72180: ST_TO_ADDR
// if p3 = 35 then
72181: LD_VAR 0 3
72185: PUSH
72186: LD_INT 35
72188: EQUAL
72189: IFFALSE 72199
// sTime := true ;
72191: LD_ADDR_EXP 115
72195: PUSH
72196: LD_INT 1
72198: ST_TO_ADDR
// if p3 = 36 then
72199: LD_VAR 0 3
72203: PUSH
72204: LD_INT 36
72206: EQUAL
72207: IFFALSE 72217
// sTools := true ;
72209: LD_ADDR_EXP 116
72213: PUSH
72214: LD_INT 1
72216: ST_TO_ADDR
// if p3 = 101 then
72217: LD_VAR 0 3
72221: PUSH
72222: LD_INT 101
72224: EQUAL
72225: IFFALSE 72235
// sSold := true ;
72227: LD_ADDR_EXP 81
72231: PUSH
72232: LD_INT 1
72234: ST_TO_ADDR
// if p3 = 102 then
72235: LD_VAR 0 3
72239: PUSH
72240: LD_INT 102
72242: EQUAL
72243: IFFALSE 72253
// sDiff := true ;
72245: LD_ADDR_EXP 82
72249: PUSH
72250: LD_INT 1
72252: ST_TO_ADDR
// if p3 = 103 then
72253: LD_VAR 0 3
72257: PUSH
72258: LD_INT 103
72260: EQUAL
72261: IFFALSE 72271
// sFog := true ;
72263: LD_ADDR_EXP 85
72267: PUSH
72268: LD_INT 1
72270: ST_TO_ADDR
// if p3 = 104 then
72271: LD_VAR 0 3
72275: PUSH
72276: LD_INT 104
72278: EQUAL
72279: IFFALSE 72289
// sReset := true ;
72281: LD_ADDR_EXP 86
72285: PUSH
72286: LD_INT 1
72288: ST_TO_ADDR
// if p3 = 105 then
72289: LD_VAR 0 3
72293: PUSH
72294: LD_INT 105
72296: EQUAL
72297: IFFALSE 72307
// sSun := true ;
72299: LD_ADDR_EXP 87
72303: PUSH
72304: LD_INT 1
72306: ST_TO_ADDR
// if p3 = 106 then
72307: LD_VAR 0 3
72311: PUSH
72312: LD_INT 106
72314: EQUAL
72315: IFFALSE 72325
// sTiger := true ;
72317: LD_ADDR_EXP 83
72321: PUSH
72322: LD_INT 1
72324: ST_TO_ADDR
// if p3 = 107 then
72325: LD_VAR 0 3
72329: PUSH
72330: LD_INT 107
72332: EQUAL
72333: IFFALSE 72343
// sBomb := true ;
72335: LD_ADDR_EXP 84
72339: PUSH
72340: LD_INT 1
72342: ST_TO_ADDR
// if p3 = 108 then
72343: LD_VAR 0 3
72347: PUSH
72348: LD_INT 108
72350: EQUAL
72351: IFFALSE 72361
// sWound := true ;
72353: LD_ADDR_EXP 92
72357: PUSH
72358: LD_INT 1
72360: ST_TO_ADDR
// if p3 = 109 then
72361: LD_VAR 0 3
72365: PUSH
72366: LD_INT 109
72368: EQUAL
72369: IFFALSE 72379
// sBetray := true ;
72371: LD_ADDR_EXP 96
72375: PUSH
72376: LD_INT 1
72378: ST_TO_ADDR
// if p3 = 110 then
72379: LD_VAR 0 3
72383: PUSH
72384: LD_INT 110
72386: EQUAL
72387: IFFALSE 72397
// sContamin := true ;
72389: LD_ADDR_EXP 97
72393: PUSH
72394: LD_INT 1
72396: ST_TO_ADDR
// if p3 = 111 then
72397: LD_VAR 0 3
72401: PUSH
72402: LD_INT 111
72404: EQUAL
72405: IFFALSE 72415
// sOil := true ;
72407: LD_ADDR_EXP 99
72411: PUSH
72412: LD_INT 1
72414: ST_TO_ADDR
// if p3 = 112 then
72415: LD_VAR 0 3
72419: PUSH
72420: LD_INT 112
72422: EQUAL
72423: IFFALSE 72433
// sStu := true ;
72425: LD_ADDR_EXP 103
72429: PUSH
72430: LD_INT 1
72432: ST_TO_ADDR
// if p3 = 113 then
72433: LD_VAR 0 3
72437: PUSH
72438: LD_INT 113
72440: EQUAL
72441: IFFALSE 72451
// sBazooka := true ;
72443: LD_ADDR_EXP 106
72447: PUSH
72448: LD_INT 1
72450: ST_TO_ADDR
// if p3 = 114 then
72451: LD_VAR 0 3
72455: PUSH
72456: LD_INT 114
72458: EQUAL
72459: IFFALSE 72469
// sMortar := true ;
72461: LD_ADDR_EXP 107
72465: PUSH
72466: LD_INT 1
72468: ST_TO_ADDR
// if p3 = 115 then
72469: LD_VAR 0 3
72473: PUSH
72474: LD_INT 115
72476: EQUAL
72477: IFFALSE 72487
// sRanger := true ;
72479: LD_ADDR_EXP 117
72483: PUSH
72484: LD_INT 1
72486: ST_TO_ADDR
// if p3 = 116 then
72487: LD_VAR 0 3
72491: PUSH
72492: LD_INT 116
72494: EQUAL
72495: IFFALSE 72505
// sComputer := true ;
72497: LD_ADDR_EXP 118
72501: PUSH
72502: LD_INT 1
72504: ST_TO_ADDR
// if p3 = 117 then
72505: LD_VAR 0 3
72509: PUSH
72510: LD_INT 117
72512: EQUAL
72513: IFFALSE 72523
// s30 := true ;
72515: LD_ADDR_EXP 119
72519: PUSH
72520: LD_INT 1
72522: ST_TO_ADDR
// if p3 = 118 then
72523: LD_VAR 0 3
72527: PUSH
72528: LD_INT 118
72530: EQUAL
72531: IFFALSE 72541
// s60 := true ;
72533: LD_ADDR_EXP 120
72537: PUSH
72538: LD_INT 1
72540: ST_TO_ADDR
// end ; if p2 = hack_mode then
72541: LD_VAR 0 2
72545: PUSH
72546: LD_INT 101
72548: EQUAL
72549: IFFALSE 72677
// begin case p3 of 1 :
72551: LD_VAR 0 3
72555: PUSH
72556: LD_INT 1
72558: DOUBLE
72559: EQUAL
72560: IFTRUE 72564
72562: GO 72571
72564: POP
// hHackUnlimitedResources ; 2 :
72565: CALL 84824 0 0
72569: GO 72677
72571: LD_INT 2
72573: DOUBLE
72574: EQUAL
72575: IFTRUE 72579
72577: GO 72586
72579: POP
// hHackSetLevel10 ; 3 :
72580: CALL 84957 0 0
72584: GO 72677
72586: LD_INT 3
72588: DOUBLE
72589: EQUAL
72590: IFTRUE 72594
72592: GO 72601
72594: POP
// hHackSetLevel10YourUnits ; 4 :
72595: CALL 85042 0 0
72599: GO 72677
72601: LD_INT 4
72603: DOUBLE
72604: EQUAL
72605: IFTRUE 72609
72607: GO 72616
72609: POP
// hHackInvincible ; 5 :
72610: CALL 85490 0 0
72614: GO 72677
72616: LD_INT 5
72618: DOUBLE
72619: EQUAL
72620: IFTRUE 72624
72622: GO 72631
72624: POP
// hHackInvisible ; 6 :
72625: CALL 85601 0 0
72629: GO 72677
72631: LD_INT 6
72633: DOUBLE
72634: EQUAL
72635: IFTRUE 72639
72637: GO 72646
72639: POP
// hHackChangeYourSide ; 7 :
72640: CALL 85658 0 0
72644: GO 72677
72646: LD_INT 7
72648: DOUBLE
72649: EQUAL
72650: IFTRUE 72654
72652: GO 72661
72654: POP
// hHackChangeUnitSide ; 8 :
72655: CALL 85700 0 0
72659: GO 72677
72661: LD_INT 8
72663: DOUBLE
72664: EQUAL
72665: IFTRUE 72669
72667: GO 72676
72669: POP
// hHackFog ; end ;
72670: CALL 85801 0 0
72674: GO 72677
72676: POP
// end ; if p2 = game_save_mode then
72677: LD_VAR 0 2
72681: PUSH
72682: LD_INT 102
72684: EQUAL
72685: IFFALSE 72740
// begin if p3 = 1 then
72687: LD_VAR 0 3
72691: PUSH
72692: LD_INT 1
72694: EQUAL
72695: IFFALSE 72707
// globalGameSaveCounter := p4 ;
72697: LD_ADDR_EXP 63
72701: PUSH
72702: LD_VAR 0 4
72706: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
72707: LD_VAR 0 3
72711: PUSH
72712: LD_INT 2
72714: EQUAL
72715: PUSH
72716: LD_EXP 63
72720: AND
72721: IFFALSE 72740
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72723: LD_STRING setGameSaveCounter(
72725: PUSH
72726: LD_EXP 63
72730: STR
72731: PUSH
72732: LD_STRING )
72734: STR
72735: PPUSH
72736: CALL_OW 559
// end ; end ;
72740: LD_VAR 0 7
72744: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
72745: LD_INT 0
72747: PPUSH
// streamModeActive := false ;
72748: LD_ADDR_EXP 64
72752: PUSH
72753: LD_INT 0
72755: ST_TO_ADDR
// normalCounter := 36 ;
72756: LD_ADDR_EXP 65
72760: PUSH
72761: LD_INT 36
72763: ST_TO_ADDR
// hardcoreCounter := 18 ;
72764: LD_ADDR_EXP 66
72768: PUSH
72769: LD_INT 18
72771: ST_TO_ADDR
// sRocket := false ;
72772: LD_ADDR_EXP 69
72776: PUSH
72777: LD_INT 0
72779: ST_TO_ADDR
// sSpeed := false ;
72780: LD_ADDR_EXP 68
72784: PUSH
72785: LD_INT 0
72787: ST_TO_ADDR
// sEngine := false ;
72788: LD_ADDR_EXP 70
72792: PUSH
72793: LD_INT 0
72795: ST_TO_ADDR
// sSpec := false ;
72796: LD_ADDR_EXP 67
72800: PUSH
72801: LD_INT 0
72803: ST_TO_ADDR
// sLevel := false ;
72804: LD_ADDR_EXP 71
72808: PUSH
72809: LD_INT 0
72811: ST_TO_ADDR
// sArmoury := false ;
72812: LD_ADDR_EXP 72
72816: PUSH
72817: LD_INT 0
72819: ST_TO_ADDR
// sRadar := false ;
72820: LD_ADDR_EXP 73
72824: PUSH
72825: LD_INT 0
72827: ST_TO_ADDR
// sBunker := false ;
72828: LD_ADDR_EXP 74
72832: PUSH
72833: LD_INT 0
72835: ST_TO_ADDR
// sHack := false ;
72836: LD_ADDR_EXP 75
72840: PUSH
72841: LD_INT 0
72843: ST_TO_ADDR
// sFire := false ;
72844: LD_ADDR_EXP 76
72848: PUSH
72849: LD_INT 0
72851: ST_TO_ADDR
// sRefresh := false ;
72852: LD_ADDR_EXP 77
72856: PUSH
72857: LD_INT 0
72859: ST_TO_ADDR
// sExp := false ;
72860: LD_ADDR_EXP 78
72864: PUSH
72865: LD_INT 0
72867: ST_TO_ADDR
// sDepot := false ;
72868: LD_ADDR_EXP 79
72872: PUSH
72873: LD_INT 0
72875: ST_TO_ADDR
// sFlag := false ;
72876: LD_ADDR_EXP 80
72880: PUSH
72881: LD_INT 0
72883: ST_TO_ADDR
// sKamikadze := false ;
72884: LD_ADDR_EXP 88
72888: PUSH
72889: LD_INT 0
72891: ST_TO_ADDR
// sTroll := false ;
72892: LD_ADDR_EXP 89
72896: PUSH
72897: LD_INT 0
72899: ST_TO_ADDR
// sSlow := false ;
72900: LD_ADDR_EXP 90
72904: PUSH
72905: LD_INT 0
72907: ST_TO_ADDR
// sLack := false ;
72908: LD_ADDR_EXP 91
72912: PUSH
72913: LD_INT 0
72915: ST_TO_ADDR
// sTank := false ;
72916: LD_ADDR_EXP 93
72920: PUSH
72921: LD_INT 0
72923: ST_TO_ADDR
// sRemote := false ;
72924: LD_ADDR_EXP 94
72928: PUSH
72929: LD_INT 0
72931: ST_TO_ADDR
// sPowell := false ;
72932: LD_ADDR_EXP 95
72936: PUSH
72937: LD_INT 0
72939: ST_TO_ADDR
// sTeleport := false ;
72940: LD_ADDR_EXP 98
72944: PUSH
72945: LD_INT 0
72947: ST_TO_ADDR
// sOilTower := false ;
72948: LD_ADDR_EXP 100
72952: PUSH
72953: LD_INT 0
72955: ST_TO_ADDR
// sShovel := false ;
72956: LD_ADDR_EXP 101
72960: PUSH
72961: LD_INT 0
72963: ST_TO_ADDR
// sSheik := false ;
72964: LD_ADDR_EXP 102
72968: PUSH
72969: LD_INT 0
72971: ST_TO_ADDR
// sEarthquake := false ;
72972: LD_ADDR_EXP 104
72976: PUSH
72977: LD_INT 0
72979: ST_TO_ADDR
// sAI := false ;
72980: LD_ADDR_EXP 105
72984: PUSH
72985: LD_INT 0
72987: ST_TO_ADDR
// sCargo := false ;
72988: LD_ADDR_EXP 108
72992: PUSH
72993: LD_INT 0
72995: ST_TO_ADDR
// sDLaser := false ;
72996: LD_ADDR_EXP 109
73000: PUSH
73001: LD_INT 0
73003: ST_TO_ADDR
// sExchange := false ;
73004: LD_ADDR_EXP 110
73008: PUSH
73009: LD_INT 0
73011: ST_TO_ADDR
// sFac := false ;
73012: LD_ADDR_EXP 111
73016: PUSH
73017: LD_INT 0
73019: ST_TO_ADDR
// sPower := false ;
73020: LD_ADDR_EXP 112
73024: PUSH
73025: LD_INT 0
73027: ST_TO_ADDR
// sRandom := false ;
73028: LD_ADDR_EXP 113
73032: PUSH
73033: LD_INT 0
73035: ST_TO_ADDR
// sShield := false ;
73036: LD_ADDR_EXP 114
73040: PUSH
73041: LD_INT 0
73043: ST_TO_ADDR
// sTime := false ;
73044: LD_ADDR_EXP 115
73048: PUSH
73049: LD_INT 0
73051: ST_TO_ADDR
// sTools := false ;
73052: LD_ADDR_EXP 116
73056: PUSH
73057: LD_INT 0
73059: ST_TO_ADDR
// sSold := false ;
73060: LD_ADDR_EXP 81
73064: PUSH
73065: LD_INT 0
73067: ST_TO_ADDR
// sDiff := false ;
73068: LD_ADDR_EXP 82
73072: PUSH
73073: LD_INT 0
73075: ST_TO_ADDR
// sFog := false ;
73076: LD_ADDR_EXP 85
73080: PUSH
73081: LD_INT 0
73083: ST_TO_ADDR
// sReset := false ;
73084: LD_ADDR_EXP 86
73088: PUSH
73089: LD_INT 0
73091: ST_TO_ADDR
// sSun := false ;
73092: LD_ADDR_EXP 87
73096: PUSH
73097: LD_INT 0
73099: ST_TO_ADDR
// sTiger := false ;
73100: LD_ADDR_EXP 83
73104: PUSH
73105: LD_INT 0
73107: ST_TO_ADDR
// sBomb := false ;
73108: LD_ADDR_EXP 84
73112: PUSH
73113: LD_INT 0
73115: ST_TO_ADDR
// sWound := false ;
73116: LD_ADDR_EXP 92
73120: PUSH
73121: LD_INT 0
73123: ST_TO_ADDR
// sBetray := false ;
73124: LD_ADDR_EXP 96
73128: PUSH
73129: LD_INT 0
73131: ST_TO_ADDR
// sContamin := false ;
73132: LD_ADDR_EXP 97
73136: PUSH
73137: LD_INT 0
73139: ST_TO_ADDR
// sOil := false ;
73140: LD_ADDR_EXP 99
73144: PUSH
73145: LD_INT 0
73147: ST_TO_ADDR
// sStu := false ;
73148: LD_ADDR_EXP 103
73152: PUSH
73153: LD_INT 0
73155: ST_TO_ADDR
// sBazooka := false ;
73156: LD_ADDR_EXP 106
73160: PUSH
73161: LD_INT 0
73163: ST_TO_ADDR
// sMortar := false ;
73164: LD_ADDR_EXP 107
73168: PUSH
73169: LD_INT 0
73171: ST_TO_ADDR
// sRanger := false ;
73172: LD_ADDR_EXP 117
73176: PUSH
73177: LD_INT 0
73179: ST_TO_ADDR
// sComputer := false ;
73180: LD_ADDR_EXP 118
73184: PUSH
73185: LD_INT 0
73187: ST_TO_ADDR
// s30 := false ;
73188: LD_ADDR_EXP 119
73192: PUSH
73193: LD_INT 0
73195: ST_TO_ADDR
// s60 := false ;
73196: LD_ADDR_EXP 120
73200: PUSH
73201: LD_INT 0
73203: ST_TO_ADDR
// end ;
73204: LD_VAR 0 1
73208: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
73209: LD_INT 0
73211: PPUSH
73212: PPUSH
73213: PPUSH
73214: PPUSH
73215: PPUSH
73216: PPUSH
73217: PPUSH
// result := [ ] ;
73218: LD_ADDR_VAR 0 2
73222: PUSH
73223: EMPTY
73224: ST_TO_ADDR
// if campaign_id = 1 then
73225: LD_OWVAR 69
73229: PUSH
73230: LD_INT 1
73232: EQUAL
73233: IFFALSE 76399
// begin case mission_number of 1 :
73235: LD_OWVAR 70
73239: PUSH
73240: LD_INT 1
73242: DOUBLE
73243: EQUAL
73244: IFTRUE 73248
73246: GO 73324
73248: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
73249: LD_ADDR_VAR 0 2
73253: PUSH
73254: LD_INT 2
73256: PUSH
73257: LD_INT 4
73259: PUSH
73260: LD_INT 11
73262: PUSH
73263: LD_INT 12
73265: PUSH
73266: LD_INT 15
73268: PUSH
73269: LD_INT 16
73271: PUSH
73272: LD_INT 22
73274: PUSH
73275: LD_INT 23
73277: PUSH
73278: LD_INT 26
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 101
73294: PUSH
73295: LD_INT 102
73297: PUSH
73298: LD_INT 106
73300: PUSH
73301: LD_INT 116
73303: PUSH
73304: LD_INT 117
73306: PUSH
73307: LD_INT 118
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: ST_TO_ADDR
73322: GO 76397
73324: LD_INT 2
73326: DOUBLE
73327: EQUAL
73328: IFTRUE 73332
73330: GO 73416
73332: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
73333: LD_ADDR_VAR 0 2
73337: PUSH
73338: LD_INT 2
73340: PUSH
73341: LD_INT 4
73343: PUSH
73344: LD_INT 11
73346: PUSH
73347: LD_INT 12
73349: PUSH
73350: LD_INT 15
73352: PUSH
73353: LD_INT 16
73355: PUSH
73356: LD_INT 22
73358: PUSH
73359: LD_INT 23
73361: PUSH
73362: LD_INT 26
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 101
73378: PUSH
73379: LD_INT 102
73381: PUSH
73382: LD_INT 105
73384: PUSH
73385: LD_INT 106
73387: PUSH
73388: LD_INT 108
73390: PUSH
73391: LD_INT 116
73393: PUSH
73394: LD_INT 117
73396: PUSH
73397: LD_INT 118
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: ST_TO_ADDR
73414: GO 76397
73416: LD_INT 3
73418: DOUBLE
73419: EQUAL
73420: IFTRUE 73424
73422: GO 73512
73424: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
73425: LD_ADDR_VAR 0 2
73429: PUSH
73430: LD_INT 2
73432: PUSH
73433: LD_INT 4
73435: PUSH
73436: LD_INT 5
73438: PUSH
73439: LD_INT 11
73441: PUSH
73442: LD_INT 12
73444: PUSH
73445: LD_INT 15
73447: PUSH
73448: LD_INT 16
73450: PUSH
73451: LD_INT 22
73453: PUSH
73454: LD_INT 26
73456: PUSH
73457: LD_INT 36
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 101
73474: PUSH
73475: LD_INT 102
73477: PUSH
73478: LD_INT 105
73480: PUSH
73481: LD_INT 106
73483: PUSH
73484: LD_INT 108
73486: PUSH
73487: LD_INT 116
73489: PUSH
73490: LD_INT 117
73492: PUSH
73493: LD_INT 118
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: LIST
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: ST_TO_ADDR
73510: GO 76397
73512: LD_INT 4
73514: DOUBLE
73515: EQUAL
73516: IFTRUE 73520
73518: GO 73616
73520: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
73521: LD_ADDR_VAR 0 2
73525: PUSH
73526: LD_INT 2
73528: PUSH
73529: LD_INT 4
73531: PUSH
73532: LD_INT 5
73534: PUSH
73535: LD_INT 8
73537: PUSH
73538: LD_INT 11
73540: PUSH
73541: LD_INT 12
73543: PUSH
73544: LD_INT 15
73546: PUSH
73547: LD_INT 16
73549: PUSH
73550: LD_INT 22
73552: PUSH
73553: LD_INT 23
73555: PUSH
73556: LD_INT 26
73558: PUSH
73559: LD_INT 36
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: PUSH
73576: LD_INT 101
73578: PUSH
73579: LD_INT 102
73581: PUSH
73582: LD_INT 105
73584: PUSH
73585: LD_INT 106
73587: PUSH
73588: LD_INT 108
73590: PUSH
73591: LD_INT 116
73593: PUSH
73594: LD_INT 117
73596: PUSH
73597: LD_INT 118
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: ST_TO_ADDR
73614: GO 76397
73616: LD_INT 5
73618: DOUBLE
73619: EQUAL
73620: IFTRUE 73624
73622: GO 73736
73624: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
73625: LD_ADDR_VAR 0 2
73629: PUSH
73630: LD_INT 2
73632: PUSH
73633: LD_INT 4
73635: PUSH
73636: LD_INT 5
73638: PUSH
73639: LD_INT 6
73641: PUSH
73642: LD_INT 8
73644: PUSH
73645: LD_INT 11
73647: PUSH
73648: LD_INT 12
73650: PUSH
73651: LD_INT 15
73653: PUSH
73654: LD_INT 16
73656: PUSH
73657: LD_INT 22
73659: PUSH
73660: LD_INT 23
73662: PUSH
73663: LD_INT 25
73665: PUSH
73666: LD_INT 26
73668: PUSH
73669: LD_INT 36
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 101
73690: PUSH
73691: LD_INT 102
73693: PUSH
73694: LD_INT 105
73696: PUSH
73697: LD_INT 106
73699: PUSH
73700: LD_INT 108
73702: PUSH
73703: LD_INT 109
73705: PUSH
73706: LD_INT 112
73708: PUSH
73709: LD_INT 116
73711: PUSH
73712: LD_INT 117
73714: PUSH
73715: LD_INT 118
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: ST_TO_ADDR
73734: GO 76397
73736: LD_INT 6
73738: DOUBLE
73739: EQUAL
73740: IFTRUE 73744
73742: GO 73876
73744: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
73745: LD_ADDR_VAR 0 2
73749: PUSH
73750: LD_INT 2
73752: PUSH
73753: LD_INT 4
73755: PUSH
73756: LD_INT 5
73758: PUSH
73759: LD_INT 6
73761: PUSH
73762: LD_INT 8
73764: PUSH
73765: LD_INT 11
73767: PUSH
73768: LD_INT 12
73770: PUSH
73771: LD_INT 15
73773: PUSH
73774: LD_INT 16
73776: PUSH
73777: LD_INT 20
73779: PUSH
73780: LD_INT 21
73782: PUSH
73783: LD_INT 22
73785: PUSH
73786: LD_INT 23
73788: PUSH
73789: LD_INT 25
73791: PUSH
73792: LD_INT 26
73794: PUSH
73795: LD_INT 30
73797: PUSH
73798: LD_INT 31
73800: PUSH
73801: LD_INT 32
73803: PUSH
73804: LD_INT 36
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 101
73830: PUSH
73831: LD_INT 102
73833: PUSH
73834: LD_INT 105
73836: PUSH
73837: LD_INT 106
73839: PUSH
73840: LD_INT 108
73842: PUSH
73843: LD_INT 109
73845: PUSH
73846: LD_INT 112
73848: PUSH
73849: LD_INT 116
73851: PUSH
73852: LD_INT 117
73854: PUSH
73855: LD_INT 118
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: ST_TO_ADDR
73874: GO 76397
73876: LD_INT 7
73878: DOUBLE
73879: EQUAL
73880: IFTRUE 73884
73882: GO 73996
73884: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
73885: LD_ADDR_VAR 0 2
73889: PUSH
73890: LD_INT 2
73892: PUSH
73893: LD_INT 4
73895: PUSH
73896: LD_INT 5
73898: PUSH
73899: LD_INT 7
73901: PUSH
73902: LD_INT 11
73904: PUSH
73905: LD_INT 12
73907: PUSH
73908: LD_INT 15
73910: PUSH
73911: LD_INT 16
73913: PUSH
73914: LD_INT 20
73916: PUSH
73917: LD_INT 21
73919: PUSH
73920: LD_INT 22
73922: PUSH
73923: LD_INT 23
73925: PUSH
73926: LD_INT 25
73928: PUSH
73929: LD_INT 26
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: LIST
73946: LIST
73947: PUSH
73948: LD_INT 101
73950: PUSH
73951: LD_INT 102
73953: PUSH
73954: LD_INT 103
73956: PUSH
73957: LD_INT 105
73959: PUSH
73960: LD_INT 106
73962: PUSH
73963: LD_INT 108
73965: PUSH
73966: LD_INT 112
73968: PUSH
73969: LD_INT 116
73971: PUSH
73972: LD_INT 117
73974: PUSH
73975: LD_INT 118
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: ST_TO_ADDR
73994: GO 76397
73996: LD_INT 8
73998: DOUBLE
73999: EQUAL
74000: IFTRUE 74004
74002: GO 74144
74004: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
74005: LD_ADDR_VAR 0 2
74009: PUSH
74010: LD_INT 2
74012: PUSH
74013: LD_INT 4
74015: PUSH
74016: LD_INT 5
74018: PUSH
74019: LD_INT 6
74021: PUSH
74022: LD_INT 7
74024: PUSH
74025: LD_INT 8
74027: PUSH
74028: LD_INT 11
74030: PUSH
74031: LD_INT 12
74033: PUSH
74034: LD_INT 15
74036: PUSH
74037: LD_INT 16
74039: PUSH
74040: LD_INT 20
74042: PUSH
74043: LD_INT 21
74045: PUSH
74046: LD_INT 22
74048: PUSH
74049: LD_INT 23
74051: PUSH
74052: LD_INT 25
74054: PUSH
74055: LD_INT 26
74057: PUSH
74058: LD_INT 30
74060: PUSH
74061: LD_INT 31
74063: PUSH
74064: LD_INT 32
74066: PUSH
74067: LD_INT 36
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: LIST
74090: LIST
74091: PUSH
74092: LD_INT 101
74094: PUSH
74095: LD_INT 102
74097: PUSH
74098: LD_INT 103
74100: PUSH
74101: LD_INT 105
74103: PUSH
74104: LD_INT 106
74106: PUSH
74107: LD_INT 108
74109: PUSH
74110: LD_INT 109
74112: PUSH
74113: LD_INT 112
74115: PUSH
74116: LD_INT 116
74118: PUSH
74119: LD_INT 117
74121: PUSH
74122: LD_INT 118
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: ST_TO_ADDR
74142: GO 76397
74144: LD_INT 9
74146: DOUBLE
74147: EQUAL
74148: IFTRUE 74152
74150: GO 74300
74152: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
74153: LD_ADDR_VAR 0 2
74157: PUSH
74158: LD_INT 2
74160: PUSH
74161: LD_INT 4
74163: PUSH
74164: LD_INT 5
74166: PUSH
74167: LD_INT 6
74169: PUSH
74170: LD_INT 7
74172: PUSH
74173: LD_INT 8
74175: PUSH
74176: LD_INT 11
74178: PUSH
74179: LD_INT 12
74181: PUSH
74182: LD_INT 15
74184: PUSH
74185: LD_INT 16
74187: PUSH
74188: LD_INT 20
74190: PUSH
74191: LD_INT 21
74193: PUSH
74194: LD_INT 22
74196: PUSH
74197: LD_INT 23
74199: PUSH
74200: LD_INT 25
74202: PUSH
74203: LD_INT 26
74205: PUSH
74206: LD_INT 28
74208: PUSH
74209: LD_INT 30
74211: PUSH
74212: LD_INT 31
74214: PUSH
74215: LD_INT 32
74217: PUSH
74218: LD_INT 36
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: PUSH
74244: LD_INT 101
74246: PUSH
74247: LD_INT 102
74249: PUSH
74250: LD_INT 103
74252: PUSH
74253: LD_INT 105
74255: PUSH
74256: LD_INT 106
74258: PUSH
74259: LD_INT 108
74261: PUSH
74262: LD_INT 109
74264: PUSH
74265: LD_INT 112
74267: PUSH
74268: LD_INT 114
74270: PUSH
74271: LD_INT 116
74273: PUSH
74274: LD_INT 117
74276: PUSH
74277: LD_INT 118
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: ST_TO_ADDR
74298: GO 76397
74300: LD_INT 10
74302: DOUBLE
74303: EQUAL
74304: IFTRUE 74308
74306: GO 74504
74308: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
74309: LD_ADDR_VAR 0 2
74313: PUSH
74314: LD_INT 2
74316: PUSH
74317: LD_INT 4
74319: PUSH
74320: LD_INT 5
74322: PUSH
74323: LD_INT 6
74325: PUSH
74326: LD_INT 7
74328: PUSH
74329: LD_INT 8
74331: PUSH
74332: LD_INT 9
74334: PUSH
74335: LD_INT 10
74337: PUSH
74338: LD_INT 11
74340: PUSH
74341: LD_INT 12
74343: PUSH
74344: LD_INT 13
74346: PUSH
74347: LD_INT 14
74349: PUSH
74350: LD_INT 15
74352: PUSH
74353: LD_INT 16
74355: PUSH
74356: LD_INT 17
74358: PUSH
74359: LD_INT 18
74361: PUSH
74362: LD_INT 19
74364: PUSH
74365: LD_INT 20
74367: PUSH
74368: LD_INT 21
74370: PUSH
74371: LD_INT 22
74373: PUSH
74374: LD_INT 23
74376: PUSH
74377: LD_INT 24
74379: PUSH
74380: LD_INT 25
74382: PUSH
74383: LD_INT 26
74385: PUSH
74386: LD_INT 28
74388: PUSH
74389: LD_INT 30
74391: PUSH
74392: LD_INT 31
74394: PUSH
74395: LD_INT 32
74397: PUSH
74398: LD_INT 36
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: PUSH
74432: LD_INT 101
74434: PUSH
74435: LD_INT 102
74437: PUSH
74438: LD_INT 103
74440: PUSH
74441: LD_INT 104
74443: PUSH
74444: LD_INT 105
74446: PUSH
74447: LD_INT 106
74449: PUSH
74450: LD_INT 107
74452: PUSH
74453: LD_INT 108
74455: PUSH
74456: LD_INT 109
74458: PUSH
74459: LD_INT 110
74461: PUSH
74462: LD_INT 111
74464: PUSH
74465: LD_INT 112
74467: PUSH
74468: LD_INT 114
74470: PUSH
74471: LD_INT 116
74473: PUSH
74474: LD_INT 117
74476: PUSH
74477: LD_INT 118
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: ST_TO_ADDR
74502: GO 76397
74504: LD_INT 11
74506: DOUBLE
74507: EQUAL
74508: IFTRUE 74512
74510: GO 74716
74512: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
74513: LD_ADDR_VAR 0 2
74517: PUSH
74518: LD_INT 2
74520: PUSH
74521: LD_INT 3
74523: PUSH
74524: LD_INT 4
74526: PUSH
74527: LD_INT 5
74529: PUSH
74530: LD_INT 6
74532: PUSH
74533: LD_INT 7
74535: PUSH
74536: LD_INT 8
74538: PUSH
74539: LD_INT 9
74541: PUSH
74542: LD_INT 10
74544: PUSH
74545: LD_INT 11
74547: PUSH
74548: LD_INT 12
74550: PUSH
74551: LD_INT 13
74553: PUSH
74554: LD_INT 14
74556: PUSH
74557: LD_INT 15
74559: PUSH
74560: LD_INT 16
74562: PUSH
74563: LD_INT 17
74565: PUSH
74566: LD_INT 18
74568: PUSH
74569: LD_INT 19
74571: PUSH
74572: LD_INT 20
74574: PUSH
74575: LD_INT 21
74577: PUSH
74578: LD_INT 22
74580: PUSH
74581: LD_INT 23
74583: PUSH
74584: LD_INT 24
74586: PUSH
74587: LD_INT 25
74589: PUSH
74590: LD_INT 26
74592: PUSH
74593: LD_INT 28
74595: PUSH
74596: LD_INT 30
74598: PUSH
74599: LD_INT 31
74601: PUSH
74602: LD_INT 32
74604: PUSH
74605: LD_INT 34
74607: PUSH
74608: LD_INT 36
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: PUSH
74644: LD_INT 101
74646: PUSH
74647: LD_INT 102
74649: PUSH
74650: LD_INT 103
74652: PUSH
74653: LD_INT 104
74655: PUSH
74656: LD_INT 105
74658: PUSH
74659: LD_INT 106
74661: PUSH
74662: LD_INT 107
74664: PUSH
74665: LD_INT 108
74667: PUSH
74668: LD_INT 109
74670: PUSH
74671: LD_INT 110
74673: PUSH
74674: LD_INT 111
74676: PUSH
74677: LD_INT 112
74679: PUSH
74680: LD_INT 114
74682: PUSH
74683: LD_INT 116
74685: PUSH
74686: LD_INT 117
74688: PUSH
74689: LD_INT 118
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: LIST
74696: LIST
74697: LIST
74698: LIST
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: ST_TO_ADDR
74714: GO 76397
74716: LD_INT 12
74718: DOUBLE
74719: EQUAL
74720: IFTRUE 74724
74722: GO 74944
74724: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
74725: LD_ADDR_VAR 0 2
74729: PUSH
74730: LD_INT 1
74732: PUSH
74733: LD_INT 2
74735: PUSH
74736: LD_INT 3
74738: PUSH
74739: LD_INT 4
74741: PUSH
74742: LD_INT 5
74744: PUSH
74745: LD_INT 6
74747: PUSH
74748: LD_INT 7
74750: PUSH
74751: LD_INT 8
74753: PUSH
74754: LD_INT 9
74756: PUSH
74757: LD_INT 10
74759: PUSH
74760: LD_INT 11
74762: PUSH
74763: LD_INT 12
74765: PUSH
74766: LD_INT 13
74768: PUSH
74769: LD_INT 14
74771: PUSH
74772: LD_INT 15
74774: PUSH
74775: LD_INT 16
74777: PUSH
74778: LD_INT 17
74780: PUSH
74781: LD_INT 18
74783: PUSH
74784: LD_INT 19
74786: PUSH
74787: LD_INT 20
74789: PUSH
74790: LD_INT 21
74792: PUSH
74793: LD_INT 22
74795: PUSH
74796: LD_INT 23
74798: PUSH
74799: LD_INT 24
74801: PUSH
74802: LD_INT 25
74804: PUSH
74805: LD_INT 26
74807: PUSH
74808: LD_INT 27
74810: PUSH
74811: LD_INT 28
74813: PUSH
74814: LD_INT 30
74816: PUSH
74817: LD_INT 31
74819: PUSH
74820: LD_INT 32
74822: PUSH
74823: LD_INT 33
74825: PUSH
74826: LD_INT 34
74828: PUSH
74829: LD_INT 36
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: PUSH
74868: LD_INT 101
74870: PUSH
74871: LD_INT 102
74873: PUSH
74874: LD_INT 103
74876: PUSH
74877: LD_INT 104
74879: PUSH
74880: LD_INT 105
74882: PUSH
74883: LD_INT 106
74885: PUSH
74886: LD_INT 107
74888: PUSH
74889: LD_INT 108
74891: PUSH
74892: LD_INT 109
74894: PUSH
74895: LD_INT 110
74897: PUSH
74898: LD_INT 111
74900: PUSH
74901: LD_INT 112
74903: PUSH
74904: LD_INT 113
74906: PUSH
74907: LD_INT 114
74909: PUSH
74910: LD_INT 116
74912: PUSH
74913: LD_INT 117
74915: PUSH
74916: LD_INT 118
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: ST_TO_ADDR
74942: GO 76397
74944: LD_INT 13
74946: DOUBLE
74947: EQUAL
74948: IFTRUE 74952
74950: GO 75160
74952: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
74953: LD_ADDR_VAR 0 2
74957: PUSH
74958: LD_INT 1
74960: PUSH
74961: LD_INT 2
74963: PUSH
74964: LD_INT 3
74966: PUSH
74967: LD_INT 4
74969: PUSH
74970: LD_INT 5
74972: PUSH
74973: LD_INT 8
74975: PUSH
74976: LD_INT 9
74978: PUSH
74979: LD_INT 10
74981: PUSH
74982: LD_INT 11
74984: PUSH
74985: LD_INT 12
74987: PUSH
74988: LD_INT 14
74990: PUSH
74991: LD_INT 15
74993: PUSH
74994: LD_INT 16
74996: PUSH
74997: LD_INT 17
74999: PUSH
75000: LD_INT 18
75002: PUSH
75003: LD_INT 19
75005: PUSH
75006: LD_INT 20
75008: PUSH
75009: LD_INT 21
75011: PUSH
75012: LD_INT 22
75014: PUSH
75015: LD_INT 23
75017: PUSH
75018: LD_INT 24
75020: PUSH
75021: LD_INT 25
75023: PUSH
75024: LD_INT 26
75026: PUSH
75027: LD_INT 27
75029: PUSH
75030: LD_INT 28
75032: PUSH
75033: LD_INT 30
75035: PUSH
75036: LD_INT 31
75038: PUSH
75039: LD_INT 32
75041: PUSH
75042: LD_INT 33
75044: PUSH
75045: LD_INT 34
75047: PUSH
75048: LD_INT 36
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: PUSH
75084: LD_INT 101
75086: PUSH
75087: LD_INT 102
75089: PUSH
75090: LD_INT 103
75092: PUSH
75093: LD_INT 104
75095: PUSH
75096: LD_INT 105
75098: PUSH
75099: LD_INT 106
75101: PUSH
75102: LD_INT 107
75104: PUSH
75105: LD_INT 108
75107: PUSH
75108: LD_INT 109
75110: PUSH
75111: LD_INT 110
75113: PUSH
75114: LD_INT 111
75116: PUSH
75117: LD_INT 112
75119: PUSH
75120: LD_INT 113
75122: PUSH
75123: LD_INT 114
75125: PUSH
75126: LD_INT 116
75128: PUSH
75129: LD_INT 117
75131: PUSH
75132: LD_INT 118
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: ST_TO_ADDR
75158: GO 76397
75160: LD_INT 14
75162: DOUBLE
75163: EQUAL
75164: IFTRUE 75168
75166: GO 75392
75168: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
75169: LD_ADDR_VAR 0 2
75173: PUSH
75174: LD_INT 1
75176: PUSH
75177: LD_INT 2
75179: PUSH
75180: LD_INT 3
75182: PUSH
75183: LD_INT 4
75185: PUSH
75186: LD_INT 5
75188: PUSH
75189: LD_INT 6
75191: PUSH
75192: LD_INT 7
75194: PUSH
75195: LD_INT 8
75197: PUSH
75198: LD_INT 9
75200: PUSH
75201: LD_INT 10
75203: PUSH
75204: LD_INT 11
75206: PUSH
75207: LD_INT 12
75209: PUSH
75210: LD_INT 13
75212: PUSH
75213: LD_INT 14
75215: PUSH
75216: LD_INT 15
75218: PUSH
75219: LD_INT 16
75221: PUSH
75222: LD_INT 17
75224: PUSH
75225: LD_INT 18
75227: PUSH
75228: LD_INT 19
75230: PUSH
75231: LD_INT 20
75233: PUSH
75234: LD_INT 21
75236: PUSH
75237: LD_INT 22
75239: PUSH
75240: LD_INT 23
75242: PUSH
75243: LD_INT 24
75245: PUSH
75246: LD_INT 25
75248: PUSH
75249: LD_INT 26
75251: PUSH
75252: LD_INT 27
75254: PUSH
75255: LD_INT 28
75257: PUSH
75258: LD_INT 29
75260: PUSH
75261: LD_INT 30
75263: PUSH
75264: LD_INT 31
75266: PUSH
75267: LD_INT 32
75269: PUSH
75270: LD_INT 33
75272: PUSH
75273: LD_INT 34
75275: PUSH
75276: LD_INT 36
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: LIST
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: LIST
75289: LIST
75290: LIST
75291: LIST
75292: LIST
75293: LIST
75294: LIST
75295: LIST
75296: LIST
75297: LIST
75298: LIST
75299: LIST
75300: LIST
75301: LIST
75302: LIST
75303: LIST
75304: LIST
75305: LIST
75306: LIST
75307: LIST
75308: LIST
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: PUSH
75316: LD_INT 101
75318: PUSH
75319: LD_INT 102
75321: PUSH
75322: LD_INT 103
75324: PUSH
75325: LD_INT 104
75327: PUSH
75328: LD_INT 105
75330: PUSH
75331: LD_INT 106
75333: PUSH
75334: LD_INT 107
75336: PUSH
75337: LD_INT 108
75339: PUSH
75340: LD_INT 109
75342: PUSH
75343: LD_INT 110
75345: PUSH
75346: LD_INT 111
75348: PUSH
75349: LD_INT 112
75351: PUSH
75352: LD_INT 113
75354: PUSH
75355: LD_INT 114
75357: PUSH
75358: LD_INT 116
75360: PUSH
75361: LD_INT 117
75363: PUSH
75364: LD_INT 118
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: ST_TO_ADDR
75390: GO 76397
75392: LD_INT 15
75394: DOUBLE
75395: EQUAL
75396: IFTRUE 75400
75398: GO 75624
75400: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
75401: LD_ADDR_VAR 0 2
75405: PUSH
75406: LD_INT 1
75408: PUSH
75409: LD_INT 2
75411: PUSH
75412: LD_INT 3
75414: PUSH
75415: LD_INT 4
75417: PUSH
75418: LD_INT 5
75420: PUSH
75421: LD_INT 6
75423: PUSH
75424: LD_INT 7
75426: PUSH
75427: LD_INT 8
75429: PUSH
75430: LD_INT 9
75432: PUSH
75433: LD_INT 10
75435: PUSH
75436: LD_INT 11
75438: PUSH
75439: LD_INT 12
75441: PUSH
75442: LD_INT 13
75444: PUSH
75445: LD_INT 14
75447: PUSH
75448: LD_INT 15
75450: PUSH
75451: LD_INT 16
75453: PUSH
75454: LD_INT 17
75456: PUSH
75457: LD_INT 18
75459: PUSH
75460: LD_INT 19
75462: PUSH
75463: LD_INT 20
75465: PUSH
75466: LD_INT 21
75468: PUSH
75469: LD_INT 22
75471: PUSH
75472: LD_INT 23
75474: PUSH
75475: LD_INT 24
75477: PUSH
75478: LD_INT 25
75480: PUSH
75481: LD_INT 26
75483: PUSH
75484: LD_INT 27
75486: PUSH
75487: LD_INT 28
75489: PUSH
75490: LD_INT 29
75492: PUSH
75493: LD_INT 30
75495: PUSH
75496: LD_INT 31
75498: PUSH
75499: LD_INT 32
75501: PUSH
75502: LD_INT 33
75504: PUSH
75505: LD_INT 34
75507: PUSH
75508: LD_INT 36
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: PUSH
75548: LD_INT 101
75550: PUSH
75551: LD_INT 102
75553: PUSH
75554: LD_INT 103
75556: PUSH
75557: LD_INT 104
75559: PUSH
75560: LD_INT 105
75562: PUSH
75563: LD_INT 106
75565: PUSH
75566: LD_INT 107
75568: PUSH
75569: LD_INT 108
75571: PUSH
75572: LD_INT 109
75574: PUSH
75575: LD_INT 110
75577: PUSH
75578: LD_INT 111
75580: PUSH
75581: LD_INT 112
75583: PUSH
75584: LD_INT 113
75586: PUSH
75587: LD_INT 114
75589: PUSH
75590: LD_INT 116
75592: PUSH
75593: LD_INT 117
75595: PUSH
75596: LD_INT 118
75598: PUSH
75599: EMPTY
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: ST_TO_ADDR
75622: GO 76397
75624: LD_INT 16
75626: DOUBLE
75627: EQUAL
75628: IFTRUE 75632
75630: GO 75768
75632: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
75633: LD_ADDR_VAR 0 2
75637: PUSH
75638: LD_INT 2
75640: PUSH
75641: LD_INT 4
75643: PUSH
75644: LD_INT 5
75646: PUSH
75647: LD_INT 7
75649: PUSH
75650: LD_INT 11
75652: PUSH
75653: LD_INT 12
75655: PUSH
75656: LD_INT 15
75658: PUSH
75659: LD_INT 16
75661: PUSH
75662: LD_INT 20
75664: PUSH
75665: LD_INT 21
75667: PUSH
75668: LD_INT 22
75670: PUSH
75671: LD_INT 23
75673: PUSH
75674: LD_INT 25
75676: PUSH
75677: LD_INT 26
75679: PUSH
75680: LD_INT 30
75682: PUSH
75683: LD_INT 31
75685: PUSH
75686: LD_INT 32
75688: PUSH
75689: LD_INT 33
75691: PUSH
75692: LD_INT 34
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: LIST
75707: LIST
75708: LIST
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: LIST
75714: LIST
75715: PUSH
75716: LD_INT 101
75718: PUSH
75719: LD_INT 102
75721: PUSH
75722: LD_INT 103
75724: PUSH
75725: LD_INT 106
75727: PUSH
75728: LD_INT 108
75730: PUSH
75731: LD_INT 112
75733: PUSH
75734: LD_INT 113
75736: PUSH
75737: LD_INT 114
75739: PUSH
75740: LD_INT 116
75742: PUSH
75743: LD_INT 117
75745: PUSH
75746: LD_INT 118
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: LIST
75759: LIST
75760: LIST
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: ST_TO_ADDR
75766: GO 76397
75768: LD_INT 17
75770: DOUBLE
75771: EQUAL
75772: IFTRUE 75776
75774: GO 76000
75776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
75777: LD_ADDR_VAR 0 2
75781: PUSH
75782: LD_INT 1
75784: PUSH
75785: LD_INT 2
75787: PUSH
75788: LD_INT 3
75790: PUSH
75791: LD_INT 4
75793: PUSH
75794: LD_INT 5
75796: PUSH
75797: LD_INT 6
75799: PUSH
75800: LD_INT 7
75802: PUSH
75803: LD_INT 8
75805: PUSH
75806: LD_INT 9
75808: PUSH
75809: LD_INT 10
75811: PUSH
75812: LD_INT 11
75814: PUSH
75815: LD_INT 12
75817: PUSH
75818: LD_INT 13
75820: PUSH
75821: LD_INT 14
75823: PUSH
75824: LD_INT 15
75826: PUSH
75827: LD_INT 16
75829: PUSH
75830: LD_INT 17
75832: PUSH
75833: LD_INT 18
75835: PUSH
75836: LD_INT 19
75838: PUSH
75839: LD_INT 20
75841: PUSH
75842: LD_INT 21
75844: PUSH
75845: LD_INT 22
75847: PUSH
75848: LD_INT 23
75850: PUSH
75851: LD_INT 24
75853: PUSH
75854: LD_INT 25
75856: PUSH
75857: LD_INT 26
75859: PUSH
75860: LD_INT 27
75862: PUSH
75863: LD_INT 28
75865: PUSH
75866: LD_INT 29
75868: PUSH
75869: LD_INT 30
75871: PUSH
75872: LD_INT 31
75874: PUSH
75875: LD_INT 32
75877: PUSH
75878: LD_INT 33
75880: PUSH
75881: LD_INT 34
75883: PUSH
75884: LD_INT 36
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 101
75926: PUSH
75927: LD_INT 102
75929: PUSH
75930: LD_INT 103
75932: PUSH
75933: LD_INT 104
75935: PUSH
75936: LD_INT 105
75938: PUSH
75939: LD_INT 106
75941: PUSH
75942: LD_INT 107
75944: PUSH
75945: LD_INT 108
75947: PUSH
75948: LD_INT 109
75950: PUSH
75951: LD_INT 110
75953: PUSH
75954: LD_INT 111
75956: PUSH
75957: LD_INT 112
75959: PUSH
75960: LD_INT 113
75962: PUSH
75963: LD_INT 114
75965: PUSH
75966: LD_INT 116
75968: PUSH
75969: LD_INT 117
75971: PUSH
75972: LD_INT 118
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: ST_TO_ADDR
75998: GO 76397
76000: LD_INT 18
76002: DOUBLE
76003: EQUAL
76004: IFTRUE 76008
76006: GO 76156
76008: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
76009: LD_ADDR_VAR 0 2
76013: PUSH
76014: LD_INT 2
76016: PUSH
76017: LD_INT 4
76019: PUSH
76020: LD_INT 5
76022: PUSH
76023: LD_INT 7
76025: PUSH
76026: LD_INT 11
76028: PUSH
76029: LD_INT 12
76031: PUSH
76032: LD_INT 15
76034: PUSH
76035: LD_INT 16
76037: PUSH
76038: LD_INT 20
76040: PUSH
76041: LD_INT 21
76043: PUSH
76044: LD_INT 22
76046: PUSH
76047: LD_INT 23
76049: PUSH
76050: LD_INT 25
76052: PUSH
76053: LD_INT 26
76055: PUSH
76056: LD_INT 30
76058: PUSH
76059: LD_INT 31
76061: PUSH
76062: LD_INT 32
76064: PUSH
76065: LD_INT 33
76067: PUSH
76068: LD_INT 34
76070: PUSH
76071: LD_INT 35
76073: PUSH
76074: LD_INT 36
76076: PUSH
76077: EMPTY
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: PUSH
76100: LD_INT 101
76102: PUSH
76103: LD_INT 102
76105: PUSH
76106: LD_INT 103
76108: PUSH
76109: LD_INT 106
76111: PUSH
76112: LD_INT 108
76114: PUSH
76115: LD_INT 112
76117: PUSH
76118: LD_INT 113
76120: PUSH
76121: LD_INT 114
76123: PUSH
76124: LD_INT 115
76126: PUSH
76127: LD_INT 116
76129: PUSH
76130: LD_INT 117
76132: PUSH
76133: LD_INT 118
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: ST_TO_ADDR
76154: GO 76397
76156: LD_INT 19
76158: DOUBLE
76159: EQUAL
76160: IFTRUE 76164
76162: GO 76396
76164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
76165: LD_ADDR_VAR 0 2
76169: PUSH
76170: LD_INT 1
76172: PUSH
76173: LD_INT 2
76175: PUSH
76176: LD_INT 3
76178: PUSH
76179: LD_INT 4
76181: PUSH
76182: LD_INT 5
76184: PUSH
76185: LD_INT 6
76187: PUSH
76188: LD_INT 7
76190: PUSH
76191: LD_INT 8
76193: PUSH
76194: LD_INT 9
76196: PUSH
76197: LD_INT 10
76199: PUSH
76200: LD_INT 11
76202: PUSH
76203: LD_INT 12
76205: PUSH
76206: LD_INT 13
76208: PUSH
76209: LD_INT 14
76211: PUSH
76212: LD_INT 15
76214: PUSH
76215: LD_INT 16
76217: PUSH
76218: LD_INT 17
76220: PUSH
76221: LD_INT 18
76223: PUSH
76224: LD_INT 19
76226: PUSH
76227: LD_INT 20
76229: PUSH
76230: LD_INT 21
76232: PUSH
76233: LD_INT 22
76235: PUSH
76236: LD_INT 23
76238: PUSH
76239: LD_INT 24
76241: PUSH
76242: LD_INT 25
76244: PUSH
76245: LD_INT 26
76247: PUSH
76248: LD_INT 27
76250: PUSH
76251: LD_INT 28
76253: PUSH
76254: LD_INT 29
76256: PUSH
76257: LD_INT 30
76259: PUSH
76260: LD_INT 31
76262: PUSH
76263: LD_INT 32
76265: PUSH
76266: LD_INT 33
76268: PUSH
76269: LD_INT 34
76271: PUSH
76272: LD_INT 35
76274: PUSH
76275: LD_INT 36
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: LIST
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: LIST
76308: LIST
76309: LIST
76310: LIST
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: PUSH
76316: LD_INT 101
76318: PUSH
76319: LD_INT 102
76321: PUSH
76322: LD_INT 103
76324: PUSH
76325: LD_INT 104
76327: PUSH
76328: LD_INT 105
76330: PUSH
76331: LD_INT 106
76333: PUSH
76334: LD_INT 107
76336: PUSH
76337: LD_INT 108
76339: PUSH
76340: LD_INT 109
76342: PUSH
76343: LD_INT 110
76345: PUSH
76346: LD_INT 111
76348: PUSH
76349: LD_INT 112
76351: PUSH
76352: LD_INT 113
76354: PUSH
76355: LD_INT 114
76357: PUSH
76358: LD_INT 115
76360: PUSH
76361: LD_INT 116
76363: PUSH
76364: LD_INT 117
76366: PUSH
76367: LD_INT 118
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: LIST
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: ST_TO_ADDR
76394: GO 76397
76396: POP
// end else
76397: GO 76628
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
76399: LD_ADDR_VAR 0 2
76403: PUSH
76404: LD_INT 1
76406: PUSH
76407: LD_INT 2
76409: PUSH
76410: LD_INT 3
76412: PUSH
76413: LD_INT 4
76415: PUSH
76416: LD_INT 5
76418: PUSH
76419: LD_INT 6
76421: PUSH
76422: LD_INT 7
76424: PUSH
76425: LD_INT 8
76427: PUSH
76428: LD_INT 9
76430: PUSH
76431: LD_INT 10
76433: PUSH
76434: LD_INT 11
76436: PUSH
76437: LD_INT 12
76439: PUSH
76440: LD_INT 13
76442: PUSH
76443: LD_INT 14
76445: PUSH
76446: LD_INT 15
76448: PUSH
76449: LD_INT 16
76451: PUSH
76452: LD_INT 17
76454: PUSH
76455: LD_INT 18
76457: PUSH
76458: LD_INT 19
76460: PUSH
76461: LD_INT 20
76463: PUSH
76464: LD_INT 21
76466: PUSH
76467: LD_INT 22
76469: PUSH
76470: LD_INT 23
76472: PUSH
76473: LD_INT 24
76475: PUSH
76476: LD_INT 25
76478: PUSH
76479: LD_INT 26
76481: PUSH
76482: LD_INT 27
76484: PUSH
76485: LD_INT 28
76487: PUSH
76488: LD_INT 29
76490: PUSH
76491: LD_INT 30
76493: PUSH
76494: LD_INT 31
76496: PUSH
76497: LD_INT 32
76499: PUSH
76500: LD_INT 33
76502: PUSH
76503: LD_INT 34
76505: PUSH
76506: LD_INT 35
76508: PUSH
76509: LD_INT 36
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: LIST
76540: LIST
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: LIST
76546: LIST
76547: LIST
76548: LIST
76549: PUSH
76550: LD_INT 101
76552: PUSH
76553: LD_INT 102
76555: PUSH
76556: LD_INT 103
76558: PUSH
76559: LD_INT 104
76561: PUSH
76562: LD_INT 105
76564: PUSH
76565: LD_INT 106
76567: PUSH
76568: LD_INT 107
76570: PUSH
76571: LD_INT 108
76573: PUSH
76574: LD_INT 109
76576: PUSH
76577: LD_INT 110
76579: PUSH
76580: LD_INT 111
76582: PUSH
76583: LD_INT 112
76585: PUSH
76586: LD_INT 113
76588: PUSH
76589: LD_INT 114
76591: PUSH
76592: LD_INT 115
76594: PUSH
76595: LD_INT 116
76597: PUSH
76598: LD_INT 117
76600: PUSH
76601: LD_INT 118
76603: PUSH
76604: EMPTY
76605: LIST
76606: LIST
76607: LIST
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: LIST
76623: PUSH
76624: EMPTY
76625: LIST
76626: LIST
76627: ST_TO_ADDR
// if result then
76628: LD_VAR 0 2
76632: IFFALSE 77418
// begin normal :=  ;
76634: LD_ADDR_VAR 0 5
76638: PUSH
76639: LD_STRING 
76641: ST_TO_ADDR
// hardcore :=  ;
76642: LD_ADDR_VAR 0 6
76646: PUSH
76647: LD_STRING 
76649: ST_TO_ADDR
// active :=  ;
76650: LD_ADDR_VAR 0 7
76654: PUSH
76655: LD_STRING 
76657: ST_TO_ADDR
// for i = 1 to normalCounter do
76658: LD_ADDR_VAR 0 8
76662: PUSH
76663: DOUBLE
76664: LD_INT 1
76666: DEC
76667: ST_TO_ADDR
76668: LD_EXP 65
76672: PUSH
76673: FOR_TO
76674: IFFALSE 76775
// begin tmp := 0 ;
76676: LD_ADDR_VAR 0 3
76680: PUSH
76681: LD_STRING 0
76683: ST_TO_ADDR
// if result [ 1 ] then
76684: LD_VAR 0 2
76688: PUSH
76689: LD_INT 1
76691: ARRAY
76692: IFFALSE 76757
// if result [ 1 ] [ 1 ] = i then
76694: LD_VAR 0 2
76698: PUSH
76699: LD_INT 1
76701: ARRAY
76702: PUSH
76703: LD_INT 1
76705: ARRAY
76706: PUSH
76707: LD_VAR 0 8
76711: EQUAL
76712: IFFALSE 76757
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
76714: LD_ADDR_VAR 0 2
76718: PUSH
76719: LD_VAR 0 2
76723: PPUSH
76724: LD_INT 1
76726: PPUSH
76727: LD_VAR 0 2
76731: PUSH
76732: LD_INT 1
76734: ARRAY
76735: PPUSH
76736: LD_INT 1
76738: PPUSH
76739: CALL_OW 3
76743: PPUSH
76744: CALL_OW 1
76748: ST_TO_ADDR
// tmp := 1 ;
76749: LD_ADDR_VAR 0 3
76753: PUSH
76754: LD_STRING 1
76756: ST_TO_ADDR
// end ; normal := normal & tmp ;
76757: LD_ADDR_VAR 0 5
76761: PUSH
76762: LD_VAR 0 5
76766: PUSH
76767: LD_VAR 0 3
76771: STR
76772: ST_TO_ADDR
// end ;
76773: GO 76673
76775: POP
76776: POP
// for i = 1 to hardcoreCounter do
76777: LD_ADDR_VAR 0 8
76781: PUSH
76782: DOUBLE
76783: LD_INT 1
76785: DEC
76786: ST_TO_ADDR
76787: LD_EXP 66
76791: PUSH
76792: FOR_TO
76793: IFFALSE 76898
// begin tmp := 0 ;
76795: LD_ADDR_VAR 0 3
76799: PUSH
76800: LD_STRING 0
76802: ST_TO_ADDR
// if result [ 2 ] then
76803: LD_VAR 0 2
76807: PUSH
76808: LD_INT 2
76810: ARRAY
76811: IFFALSE 76880
// if result [ 2 ] [ 1 ] = 100 + i then
76813: LD_VAR 0 2
76817: PUSH
76818: LD_INT 2
76820: ARRAY
76821: PUSH
76822: LD_INT 1
76824: ARRAY
76825: PUSH
76826: LD_INT 100
76828: PUSH
76829: LD_VAR 0 8
76833: PLUS
76834: EQUAL
76835: IFFALSE 76880
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
76837: LD_ADDR_VAR 0 2
76841: PUSH
76842: LD_VAR 0 2
76846: PPUSH
76847: LD_INT 2
76849: PPUSH
76850: LD_VAR 0 2
76854: PUSH
76855: LD_INT 2
76857: ARRAY
76858: PPUSH
76859: LD_INT 1
76861: PPUSH
76862: CALL_OW 3
76866: PPUSH
76867: CALL_OW 1
76871: ST_TO_ADDR
// tmp := 1 ;
76872: LD_ADDR_VAR 0 3
76876: PUSH
76877: LD_STRING 1
76879: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
76880: LD_ADDR_VAR 0 6
76884: PUSH
76885: LD_VAR 0 6
76889: PUSH
76890: LD_VAR 0 3
76894: STR
76895: ST_TO_ADDR
// end ;
76896: GO 76792
76898: POP
76899: POP
// if isGameLoad then
76900: LD_VAR 0 1
76904: IFFALSE 77379
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
76906: LD_ADDR_VAR 0 4
76910: PUSH
76911: LD_EXP 69
76915: PUSH
76916: LD_EXP 68
76920: PUSH
76921: LD_EXP 70
76925: PUSH
76926: LD_EXP 67
76930: PUSH
76931: LD_EXP 71
76935: PUSH
76936: LD_EXP 72
76940: PUSH
76941: LD_EXP 73
76945: PUSH
76946: LD_EXP 74
76950: PUSH
76951: LD_EXP 75
76955: PUSH
76956: LD_EXP 76
76960: PUSH
76961: LD_EXP 77
76965: PUSH
76966: LD_EXP 78
76970: PUSH
76971: LD_EXP 79
76975: PUSH
76976: LD_EXP 80
76980: PUSH
76981: LD_EXP 88
76985: PUSH
76986: LD_EXP 89
76990: PUSH
76991: LD_EXP 90
76995: PUSH
76996: LD_EXP 91
77000: PUSH
77001: LD_EXP 93
77005: PUSH
77006: LD_EXP 94
77010: PUSH
77011: LD_EXP 95
77015: PUSH
77016: LD_EXP 98
77020: PUSH
77021: LD_EXP 100
77025: PUSH
77026: LD_EXP 101
77030: PUSH
77031: LD_EXP 102
77035: PUSH
77036: LD_EXP 104
77040: PUSH
77041: LD_EXP 105
77045: PUSH
77046: LD_EXP 108
77050: PUSH
77051: LD_EXP 109
77055: PUSH
77056: LD_EXP 110
77060: PUSH
77061: LD_EXP 111
77065: PUSH
77066: LD_EXP 112
77070: PUSH
77071: LD_EXP 113
77075: PUSH
77076: LD_EXP 114
77080: PUSH
77081: LD_EXP 115
77085: PUSH
77086: LD_EXP 116
77090: PUSH
77091: LD_EXP 81
77095: PUSH
77096: LD_EXP 82
77100: PUSH
77101: LD_EXP 85
77105: PUSH
77106: LD_EXP 86
77110: PUSH
77111: LD_EXP 87
77115: PUSH
77116: LD_EXP 83
77120: PUSH
77121: LD_EXP 84
77125: PUSH
77126: LD_EXP 92
77130: PUSH
77131: LD_EXP 96
77135: PUSH
77136: LD_EXP 97
77140: PUSH
77141: LD_EXP 99
77145: PUSH
77146: LD_EXP 103
77150: PUSH
77151: LD_EXP 106
77155: PUSH
77156: LD_EXP 107
77160: PUSH
77161: LD_EXP 117
77165: PUSH
77166: LD_EXP 118
77170: PUSH
77171: LD_EXP 119
77175: PUSH
77176: LD_EXP 120
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: ST_TO_ADDR
// tmp :=  ;
77237: LD_ADDR_VAR 0 3
77241: PUSH
77242: LD_STRING 
77244: ST_TO_ADDR
// for i = 1 to normalCounter do
77245: LD_ADDR_VAR 0 8
77249: PUSH
77250: DOUBLE
77251: LD_INT 1
77253: DEC
77254: ST_TO_ADDR
77255: LD_EXP 65
77259: PUSH
77260: FOR_TO
77261: IFFALSE 77297
// begin if flags [ i ] then
77263: LD_VAR 0 4
77267: PUSH
77268: LD_VAR 0 8
77272: ARRAY
77273: IFFALSE 77295
// tmp := tmp & i & ; ;
77275: LD_ADDR_VAR 0 3
77279: PUSH
77280: LD_VAR 0 3
77284: PUSH
77285: LD_VAR 0 8
77289: STR
77290: PUSH
77291: LD_STRING ;
77293: STR
77294: ST_TO_ADDR
// end ;
77295: GO 77260
77297: POP
77298: POP
// for i = 1 to hardcoreCounter do
77299: LD_ADDR_VAR 0 8
77303: PUSH
77304: DOUBLE
77305: LD_INT 1
77307: DEC
77308: ST_TO_ADDR
77309: LD_EXP 66
77313: PUSH
77314: FOR_TO
77315: IFFALSE 77361
// begin if flags [ normalCounter + i ] then
77317: LD_VAR 0 4
77321: PUSH
77322: LD_EXP 65
77326: PUSH
77327: LD_VAR 0 8
77331: PLUS
77332: ARRAY
77333: IFFALSE 77359
// tmp := tmp & ( 100 + i ) & ; ;
77335: LD_ADDR_VAR 0 3
77339: PUSH
77340: LD_VAR 0 3
77344: PUSH
77345: LD_INT 100
77347: PUSH
77348: LD_VAR 0 8
77352: PLUS
77353: STR
77354: PUSH
77355: LD_STRING ;
77357: STR
77358: ST_TO_ADDR
// end ;
77359: GO 77314
77361: POP
77362: POP
// if tmp then
77363: LD_VAR 0 3
77367: IFFALSE 77379
// active := tmp ;
77369: LD_ADDR_VAR 0 7
77373: PUSH
77374: LD_VAR 0 3
77378: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
77379: LD_STRING getStreamItemsFromMission("
77381: PUSH
77382: LD_VAR 0 5
77386: STR
77387: PUSH
77388: LD_STRING ","
77390: STR
77391: PUSH
77392: LD_VAR 0 6
77396: STR
77397: PUSH
77398: LD_STRING ","
77400: STR
77401: PUSH
77402: LD_VAR 0 7
77406: STR
77407: PUSH
77408: LD_STRING ")
77410: STR
77411: PPUSH
77412: CALL_OW 559
// end else
77416: GO 77425
// ToLua ( getStreamItemsFromMission("","","") ) ;
77418: LD_STRING getStreamItemsFromMission("","","")
77420: PPUSH
77421: CALL_OW 559
// end ;
77425: LD_VAR 0 2
77429: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
77430: LD_EXP 64
77434: PUSH
77435: LD_EXP 69
77439: AND
77440: IFFALSE 77564
77442: GO 77444
77444: DISABLE
77445: LD_INT 0
77447: PPUSH
77448: PPUSH
// begin enable ;
77449: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
77450: LD_ADDR_VAR 0 2
77454: PUSH
77455: LD_INT 22
77457: PUSH
77458: LD_OWVAR 2
77462: PUSH
77463: EMPTY
77464: LIST
77465: LIST
77466: PUSH
77467: LD_INT 2
77469: PUSH
77470: LD_INT 34
77472: PUSH
77473: LD_INT 7
77475: PUSH
77476: EMPTY
77477: LIST
77478: LIST
77479: PUSH
77480: LD_INT 34
77482: PUSH
77483: LD_INT 45
77485: PUSH
77486: EMPTY
77487: LIST
77488: LIST
77489: PUSH
77490: LD_INT 34
77492: PUSH
77493: LD_INT 28
77495: PUSH
77496: EMPTY
77497: LIST
77498: LIST
77499: PUSH
77500: LD_INT 34
77502: PUSH
77503: LD_INT 47
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PUSH
77510: EMPTY
77511: LIST
77512: LIST
77513: LIST
77514: LIST
77515: LIST
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: PPUSH
77521: CALL_OW 69
77525: ST_TO_ADDR
// if not tmp then
77526: LD_VAR 0 2
77530: NOT
77531: IFFALSE 77535
// exit ;
77533: GO 77564
// for i in tmp do
77535: LD_ADDR_VAR 0 1
77539: PUSH
77540: LD_VAR 0 2
77544: PUSH
77545: FOR_IN
77546: IFFALSE 77562
// begin SetLives ( i , 0 ) ;
77548: LD_VAR 0 1
77552: PPUSH
77553: LD_INT 0
77555: PPUSH
77556: CALL_OW 234
// end ;
77560: GO 77545
77562: POP
77563: POP
// end ;
77564: PPOPN 2
77566: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
77567: LD_EXP 64
77571: PUSH
77572: LD_EXP 70
77576: AND
77577: IFFALSE 77661
77579: GO 77581
77581: DISABLE
77582: LD_INT 0
77584: PPUSH
77585: PPUSH
// begin enable ;
77586: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
77587: LD_ADDR_VAR 0 2
77591: PUSH
77592: LD_INT 22
77594: PUSH
77595: LD_OWVAR 2
77599: PUSH
77600: EMPTY
77601: LIST
77602: LIST
77603: PUSH
77604: LD_INT 32
77606: PUSH
77607: LD_INT 3
77609: PUSH
77610: EMPTY
77611: LIST
77612: LIST
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: PPUSH
77618: CALL_OW 69
77622: ST_TO_ADDR
// if not tmp then
77623: LD_VAR 0 2
77627: NOT
77628: IFFALSE 77632
// exit ;
77630: GO 77661
// for i in tmp do
77632: LD_ADDR_VAR 0 1
77636: PUSH
77637: LD_VAR 0 2
77641: PUSH
77642: FOR_IN
77643: IFFALSE 77659
// begin SetLives ( i , 0 ) ;
77645: LD_VAR 0 1
77649: PPUSH
77650: LD_INT 0
77652: PPUSH
77653: CALL_OW 234
// end ;
77657: GO 77642
77659: POP
77660: POP
// end ;
77661: PPOPN 2
77663: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
77664: LD_EXP 64
77668: PUSH
77669: LD_EXP 67
77673: AND
77674: IFFALSE 77767
77676: GO 77678
77678: DISABLE
77679: LD_INT 0
77681: PPUSH
// begin enable ;
77682: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
77683: LD_ADDR_VAR 0 1
77687: PUSH
77688: LD_INT 22
77690: PUSH
77691: LD_OWVAR 2
77695: PUSH
77696: EMPTY
77697: LIST
77698: LIST
77699: PUSH
77700: LD_INT 2
77702: PUSH
77703: LD_INT 25
77705: PUSH
77706: LD_INT 5
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: PUSH
77713: LD_INT 25
77715: PUSH
77716: LD_INT 9
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: PUSH
77723: LD_INT 25
77725: PUSH
77726: LD_INT 8
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: LIST
77737: LIST
77738: PUSH
77739: EMPTY
77740: LIST
77741: LIST
77742: PPUSH
77743: CALL_OW 69
77747: PUSH
77748: FOR_IN
77749: IFFALSE 77765
// begin SetClass ( i , 1 ) ;
77751: LD_VAR 0 1
77755: PPUSH
77756: LD_INT 1
77758: PPUSH
77759: CALL_OW 336
// end ;
77763: GO 77748
77765: POP
77766: POP
// end ;
77767: PPOPN 1
77769: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
77770: LD_EXP 64
77774: PUSH
77775: LD_EXP 68
77779: AND
77780: PUSH
77781: LD_OWVAR 65
77785: PUSH
77786: LD_INT 7
77788: LESS
77789: AND
77790: IFFALSE 77804
77792: GO 77794
77794: DISABLE
// begin enable ;
77795: ENABLE
// game_speed := 7 ;
77796: LD_ADDR_OWVAR 65
77800: PUSH
77801: LD_INT 7
77803: ST_TO_ADDR
// end ;
77804: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
77805: LD_EXP 64
77809: PUSH
77810: LD_EXP 71
77814: AND
77815: IFFALSE 78017
77817: GO 77819
77819: DISABLE
77820: LD_INT 0
77822: PPUSH
77823: PPUSH
77824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77825: LD_ADDR_VAR 0 3
77829: PUSH
77830: LD_INT 81
77832: PUSH
77833: LD_OWVAR 2
77837: PUSH
77838: EMPTY
77839: LIST
77840: LIST
77841: PUSH
77842: LD_INT 21
77844: PUSH
77845: LD_INT 1
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: PUSH
77852: EMPTY
77853: LIST
77854: LIST
77855: PPUSH
77856: CALL_OW 69
77860: ST_TO_ADDR
// if not tmp then
77861: LD_VAR 0 3
77865: NOT
77866: IFFALSE 77870
// exit ;
77868: GO 78017
// if tmp > 5 then
77870: LD_VAR 0 3
77874: PUSH
77875: LD_INT 5
77877: GREATER
77878: IFFALSE 77890
// k := 5 else
77880: LD_ADDR_VAR 0 2
77884: PUSH
77885: LD_INT 5
77887: ST_TO_ADDR
77888: GO 77900
// k := tmp ;
77890: LD_ADDR_VAR 0 2
77894: PUSH
77895: LD_VAR 0 3
77899: ST_TO_ADDR
// for i := 1 to k do
77900: LD_ADDR_VAR 0 1
77904: PUSH
77905: DOUBLE
77906: LD_INT 1
77908: DEC
77909: ST_TO_ADDR
77910: LD_VAR 0 2
77914: PUSH
77915: FOR_TO
77916: IFFALSE 78015
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
77918: LD_VAR 0 3
77922: PUSH
77923: LD_VAR 0 1
77927: ARRAY
77928: PPUSH
77929: LD_VAR 0 1
77933: PUSH
77934: LD_INT 4
77936: MOD
77937: PUSH
77938: LD_INT 1
77940: PLUS
77941: PPUSH
77942: CALL_OW 259
77946: PUSH
77947: LD_INT 10
77949: LESS
77950: IFFALSE 78013
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77952: LD_VAR 0 3
77956: PUSH
77957: LD_VAR 0 1
77961: ARRAY
77962: PPUSH
77963: LD_VAR 0 1
77967: PUSH
77968: LD_INT 4
77970: MOD
77971: PUSH
77972: LD_INT 1
77974: PLUS
77975: PPUSH
77976: LD_VAR 0 3
77980: PUSH
77981: LD_VAR 0 1
77985: ARRAY
77986: PPUSH
77987: LD_VAR 0 1
77991: PUSH
77992: LD_INT 4
77994: MOD
77995: PUSH
77996: LD_INT 1
77998: PLUS
77999: PPUSH
78000: CALL_OW 259
78004: PUSH
78005: LD_INT 1
78007: PLUS
78008: PPUSH
78009: CALL_OW 237
78013: GO 77915
78015: POP
78016: POP
// end ;
78017: PPOPN 3
78019: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78020: LD_EXP 64
78024: PUSH
78025: LD_EXP 72
78029: AND
78030: IFFALSE 78050
78032: GO 78034
78034: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78035: LD_INT 4
78037: PPUSH
78038: LD_OWVAR 2
78042: PPUSH
78043: LD_INT 0
78045: PPUSH
78046: CALL_OW 324
78050: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78051: LD_EXP 64
78055: PUSH
78056: LD_EXP 101
78060: AND
78061: IFFALSE 78081
78063: GO 78065
78065: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78066: LD_INT 19
78068: PPUSH
78069: LD_OWVAR 2
78073: PPUSH
78074: LD_INT 0
78076: PPUSH
78077: CALL_OW 324
78081: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
78082: LD_EXP 64
78086: PUSH
78087: LD_EXP 73
78091: AND
78092: IFFALSE 78194
78094: GO 78096
78096: DISABLE
78097: LD_INT 0
78099: PPUSH
78100: PPUSH
// begin enable ;
78101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
78102: LD_ADDR_VAR 0 2
78106: PUSH
78107: LD_INT 22
78109: PUSH
78110: LD_OWVAR 2
78114: PUSH
78115: EMPTY
78116: LIST
78117: LIST
78118: PUSH
78119: LD_INT 2
78121: PUSH
78122: LD_INT 34
78124: PUSH
78125: LD_INT 11
78127: PUSH
78128: EMPTY
78129: LIST
78130: LIST
78131: PUSH
78132: LD_INT 34
78134: PUSH
78135: LD_INT 30
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: LIST
78146: PUSH
78147: EMPTY
78148: LIST
78149: LIST
78150: PPUSH
78151: CALL_OW 69
78155: ST_TO_ADDR
// if not tmp then
78156: LD_VAR 0 2
78160: NOT
78161: IFFALSE 78165
// exit ;
78163: GO 78194
// for i in tmp do
78165: LD_ADDR_VAR 0 1
78169: PUSH
78170: LD_VAR 0 2
78174: PUSH
78175: FOR_IN
78176: IFFALSE 78192
// begin SetLives ( i , 0 ) ;
78178: LD_VAR 0 1
78182: PPUSH
78183: LD_INT 0
78185: PPUSH
78186: CALL_OW 234
// end ;
78190: GO 78175
78192: POP
78193: POP
// end ;
78194: PPOPN 2
78196: END
// every 0 0$1 trigger StreamModeActive and sBunker do
78197: LD_EXP 64
78201: PUSH
78202: LD_EXP 74
78206: AND
78207: IFFALSE 78227
78209: GO 78211
78211: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
78212: LD_INT 32
78214: PPUSH
78215: LD_OWVAR 2
78219: PPUSH
78220: LD_INT 0
78222: PPUSH
78223: CALL_OW 324
78227: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
78228: LD_EXP 64
78232: PUSH
78233: LD_EXP 75
78237: AND
78238: IFFALSE 78419
78240: GO 78242
78242: DISABLE
78243: LD_INT 0
78245: PPUSH
78246: PPUSH
78247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
78248: LD_ADDR_VAR 0 2
78252: PUSH
78253: LD_INT 22
78255: PUSH
78256: LD_OWVAR 2
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: PUSH
78265: LD_INT 33
78267: PUSH
78268: LD_INT 3
78270: PUSH
78271: EMPTY
78272: LIST
78273: LIST
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: PPUSH
78279: CALL_OW 69
78283: ST_TO_ADDR
// if not tmp then
78284: LD_VAR 0 2
78288: NOT
78289: IFFALSE 78293
// exit ;
78291: GO 78419
// side := 0 ;
78293: LD_ADDR_VAR 0 3
78297: PUSH
78298: LD_INT 0
78300: ST_TO_ADDR
// for i := 1 to 8 do
78301: LD_ADDR_VAR 0 1
78305: PUSH
78306: DOUBLE
78307: LD_INT 1
78309: DEC
78310: ST_TO_ADDR
78311: LD_INT 8
78313: PUSH
78314: FOR_TO
78315: IFFALSE 78363
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
78317: LD_OWVAR 2
78321: PUSH
78322: LD_VAR 0 1
78326: NONEQUAL
78327: PUSH
78328: LD_OWVAR 2
78332: PPUSH
78333: LD_VAR 0 1
78337: PPUSH
78338: CALL_OW 81
78342: PUSH
78343: LD_INT 2
78345: EQUAL
78346: AND
78347: IFFALSE 78361
// begin side := i ;
78349: LD_ADDR_VAR 0 3
78353: PUSH
78354: LD_VAR 0 1
78358: ST_TO_ADDR
// break ;
78359: GO 78363
// end ;
78361: GO 78314
78363: POP
78364: POP
// if not side then
78365: LD_VAR 0 3
78369: NOT
78370: IFFALSE 78374
// exit ;
78372: GO 78419
// for i := 1 to tmp do
78374: LD_ADDR_VAR 0 1
78378: PUSH
78379: DOUBLE
78380: LD_INT 1
78382: DEC
78383: ST_TO_ADDR
78384: LD_VAR 0 2
78388: PUSH
78389: FOR_TO
78390: IFFALSE 78417
// if Prob ( 60 ) then
78392: LD_INT 60
78394: PPUSH
78395: CALL_OW 13
78399: IFFALSE 78415
// SetSide ( i , side ) ;
78401: LD_VAR 0 1
78405: PPUSH
78406: LD_VAR 0 3
78410: PPUSH
78411: CALL_OW 235
78415: GO 78389
78417: POP
78418: POP
// end ;
78419: PPOPN 3
78421: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
78422: LD_EXP 64
78426: PUSH
78427: LD_EXP 77
78431: AND
78432: IFFALSE 78551
78434: GO 78436
78436: DISABLE
78437: LD_INT 0
78439: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
78440: LD_ADDR_VAR 0 1
78444: PUSH
78445: LD_INT 22
78447: PUSH
78448: LD_OWVAR 2
78452: PUSH
78453: EMPTY
78454: LIST
78455: LIST
78456: PUSH
78457: LD_INT 21
78459: PUSH
78460: LD_INT 1
78462: PUSH
78463: EMPTY
78464: LIST
78465: LIST
78466: PUSH
78467: LD_INT 3
78469: PUSH
78470: LD_INT 23
78472: PUSH
78473: LD_INT 0
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: PUSH
78480: EMPTY
78481: LIST
78482: LIST
78483: PUSH
78484: EMPTY
78485: LIST
78486: LIST
78487: LIST
78488: PPUSH
78489: CALL_OW 69
78493: PUSH
78494: FOR_IN
78495: IFFALSE 78549
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
78497: LD_VAR 0 1
78501: PPUSH
78502: CALL_OW 257
78506: PUSH
78507: LD_INT 1
78509: PUSH
78510: LD_INT 2
78512: PUSH
78513: LD_INT 3
78515: PUSH
78516: LD_INT 4
78518: PUSH
78519: EMPTY
78520: LIST
78521: LIST
78522: LIST
78523: LIST
78524: IN
78525: IFFALSE 78547
// SetClass ( un , rand ( 1 , 4 ) ) ;
78527: LD_VAR 0 1
78531: PPUSH
78532: LD_INT 1
78534: PPUSH
78535: LD_INT 4
78537: PPUSH
78538: CALL_OW 12
78542: PPUSH
78543: CALL_OW 336
78547: GO 78494
78549: POP
78550: POP
// end ;
78551: PPOPN 1
78553: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
78554: LD_EXP 64
78558: PUSH
78559: LD_EXP 76
78563: AND
78564: IFFALSE 78643
78566: GO 78568
78568: DISABLE
78569: LD_INT 0
78571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78572: LD_ADDR_VAR 0 1
78576: PUSH
78577: LD_INT 22
78579: PUSH
78580: LD_OWVAR 2
78584: PUSH
78585: EMPTY
78586: LIST
78587: LIST
78588: PUSH
78589: LD_INT 21
78591: PUSH
78592: LD_INT 3
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: PUSH
78599: EMPTY
78600: LIST
78601: LIST
78602: PPUSH
78603: CALL_OW 69
78607: ST_TO_ADDR
// if not tmp then
78608: LD_VAR 0 1
78612: NOT
78613: IFFALSE 78617
// exit ;
78615: GO 78643
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
78617: LD_VAR 0 1
78621: PUSH
78622: LD_INT 1
78624: PPUSH
78625: LD_VAR 0 1
78629: PPUSH
78630: CALL_OW 12
78634: ARRAY
78635: PPUSH
78636: LD_INT 100
78638: PPUSH
78639: CALL_OW 234
// end ;
78643: PPOPN 1
78645: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
78646: LD_EXP 64
78650: PUSH
78651: LD_EXP 78
78655: AND
78656: IFFALSE 78754
78658: GO 78660
78660: DISABLE
78661: LD_INT 0
78663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78664: LD_ADDR_VAR 0 1
78668: PUSH
78669: LD_INT 22
78671: PUSH
78672: LD_OWVAR 2
78676: PUSH
78677: EMPTY
78678: LIST
78679: LIST
78680: PUSH
78681: LD_INT 21
78683: PUSH
78684: LD_INT 1
78686: PUSH
78687: EMPTY
78688: LIST
78689: LIST
78690: PUSH
78691: EMPTY
78692: LIST
78693: LIST
78694: PPUSH
78695: CALL_OW 69
78699: ST_TO_ADDR
// if not tmp then
78700: LD_VAR 0 1
78704: NOT
78705: IFFALSE 78709
// exit ;
78707: GO 78754
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
78709: LD_VAR 0 1
78713: PUSH
78714: LD_INT 1
78716: PPUSH
78717: LD_VAR 0 1
78721: PPUSH
78722: CALL_OW 12
78726: ARRAY
78727: PPUSH
78728: LD_INT 1
78730: PPUSH
78731: LD_INT 4
78733: PPUSH
78734: CALL_OW 12
78738: PPUSH
78739: LD_INT 3000
78741: PPUSH
78742: LD_INT 9000
78744: PPUSH
78745: CALL_OW 12
78749: PPUSH
78750: CALL_OW 492
// end ;
78754: PPOPN 1
78756: END
// every 0 0$1 trigger StreamModeActive and sDepot do
78757: LD_EXP 64
78761: PUSH
78762: LD_EXP 79
78766: AND
78767: IFFALSE 78787
78769: GO 78771
78771: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
78772: LD_INT 1
78774: PPUSH
78775: LD_OWVAR 2
78779: PPUSH
78780: LD_INT 0
78782: PPUSH
78783: CALL_OW 324
78787: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
78788: LD_EXP 64
78792: PUSH
78793: LD_EXP 80
78797: AND
78798: IFFALSE 78881
78800: GO 78802
78802: DISABLE
78803: LD_INT 0
78805: PPUSH
78806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
78807: LD_ADDR_VAR 0 2
78811: PUSH
78812: LD_INT 22
78814: PUSH
78815: LD_OWVAR 2
78819: PUSH
78820: EMPTY
78821: LIST
78822: LIST
78823: PUSH
78824: LD_INT 21
78826: PUSH
78827: LD_INT 3
78829: PUSH
78830: EMPTY
78831: LIST
78832: LIST
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: PPUSH
78838: CALL_OW 69
78842: ST_TO_ADDR
// if not tmp then
78843: LD_VAR 0 2
78847: NOT
78848: IFFALSE 78852
// exit ;
78850: GO 78881
// for i in tmp do
78852: LD_ADDR_VAR 0 1
78856: PUSH
78857: LD_VAR 0 2
78861: PUSH
78862: FOR_IN
78863: IFFALSE 78879
// SetBLevel ( i , 10 ) ;
78865: LD_VAR 0 1
78869: PPUSH
78870: LD_INT 10
78872: PPUSH
78873: CALL_OW 241
78877: GO 78862
78879: POP
78880: POP
// end ;
78881: PPOPN 2
78883: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
78884: LD_EXP 64
78888: PUSH
78889: LD_EXP 81
78893: AND
78894: IFFALSE 79005
78896: GO 78898
78898: DISABLE
78899: LD_INT 0
78901: PPUSH
78902: PPUSH
78903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78904: LD_ADDR_VAR 0 3
78908: PUSH
78909: LD_INT 22
78911: PUSH
78912: LD_OWVAR 2
78916: PUSH
78917: EMPTY
78918: LIST
78919: LIST
78920: PUSH
78921: LD_INT 25
78923: PUSH
78924: LD_INT 1
78926: PUSH
78927: EMPTY
78928: LIST
78929: LIST
78930: PUSH
78931: EMPTY
78932: LIST
78933: LIST
78934: PPUSH
78935: CALL_OW 69
78939: ST_TO_ADDR
// if not tmp then
78940: LD_VAR 0 3
78944: NOT
78945: IFFALSE 78949
// exit ;
78947: GO 79005
// un := tmp [ rand ( 1 , tmp ) ] ;
78949: LD_ADDR_VAR 0 2
78953: PUSH
78954: LD_VAR 0 3
78958: PUSH
78959: LD_INT 1
78961: PPUSH
78962: LD_VAR 0 3
78966: PPUSH
78967: CALL_OW 12
78971: ARRAY
78972: ST_TO_ADDR
// if Crawls ( un ) then
78973: LD_VAR 0 2
78977: PPUSH
78978: CALL_OW 318
78982: IFFALSE 78993
// ComWalk ( un ) ;
78984: LD_VAR 0 2
78988: PPUSH
78989: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78993: LD_VAR 0 2
78997: PPUSH
78998: LD_INT 5
79000: PPUSH
79001: CALL_OW 336
// end ;
79005: PPOPN 3
79007: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
79008: LD_EXP 64
79012: PUSH
79013: LD_EXP 82
79017: AND
79018: PUSH
79019: LD_OWVAR 67
79023: PUSH
79024: LD_INT 4
79026: LESS
79027: AND
79028: IFFALSE 79047
79030: GO 79032
79032: DISABLE
// begin Difficulty := Difficulty + 1 ;
79033: LD_ADDR_OWVAR 67
79037: PUSH
79038: LD_OWVAR 67
79042: PUSH
79043: LD_INT 1
79045: PLUS
79046: ST_TO_ADDR
// end ;
79047: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79048: LD_EXP 64
79052: PUSH
79053: LD_EXP 83
79057: AND
79058: IFFALSE 79161
79060: GO 79062
79062: DISABLE
79063: LD_INT 0
79065: PPUSH
// begin for i := 1 to 5 do
79066: LD_ADDR_VAR 0 1
79070: PUSH
79071: DOUBLE
79072: LD_INT 1
79074: DEC
79075: ST_TO_ADDR
79076: LD_INT 5
79078: PUSH
79079: FOR_TO
79080: IFFALSE 79159
// begin uc_nation := nation_nature ;
79082: LD_ADDR_OWVAR 21
79086: PUSH
79087: LD_INT 0
79089: ST_TO_ADDR
// uc_side := 0 ;
79090: LD_ADDR_OWVAR 20
79094: PUSH
79095: LD_INT 0
79097: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79098: LD_ADDR_OWVAR 29
79102: PUSH
79103: LD_INT 12
79105: PUSH
79106: LD_INT 12
79108: PUSH
79109: EMPTY
79110: LIST
79111: LIST
79112: ST_TO_ADDR
// hc_agressivity := 20 ;
79113: LD_ADDR_OWVAR 35
79117: PUSH
79118: LD_INT 20
79120: ST_TO_ADDR
// hc_class := class_tiger ;
79121: LD_ADDR_OWVAR 28
79125: PUSH
79126: LD_INT 14
79128: ST_TO_ADDR
// hc_gallery :=  ;
79129: LD_ADDR_OWVAR 33
79133: PUSH
79134: LD_STRING 
79136: ST_TO_ADDR
// hc_name :=  ;
79137: LD_ADDR_OWVAR 26
79141: PUSH
79142: LD_STRING 
79144: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
79145: CALL_OW 44
79149: PPUSH
79150: LD_INT 0
79152: PPUSH
79153: CALL_OW 51
// end ;
79157: GO 79079
79159: POP
79160: POP
// end ;
79161: PPOPN 1
79163: END
// every 0 0$1 trigger StreamModeActive and sBomb do
79164: LD_EXP 64
79168: PUSH
79169: LD_EXP 84
79173: AND
79174: IFFALSE 79183
79176: GO 79178
79178: DISABLE
// StreamSibBomb ;
79179: CALL 79184 0 0
79183: END
// export function StreamSibBomb ; var i , x , y ; begin
79184: LD_INT 0
79186: PPUSH
79187: PPUSH
79188: PPUSH
79189: PPUSH
// result := false ;
79190: LD_ADDR_VAR 0 1
79194: PUSH
79195: LD_INT 0
79197: ST_TO_ADDR
// for i := 1 to 16 do
79198: LD_ADDR_VAR 0 2
79202: PUSH
79203: DOUBLE
79204: LD_INT 1
79206: DEC
79207: ST_TO_ADDR
79208: LD_INT 16
79210: PUSH
79211: FOR_TO
79212: IFFALSE 79411
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79214: LD_ADDR_VAR 0 3
79218: PUSH
79219: LD_INT 10
79221: PUSH
79222: LD_INT 20
79224: PUSH
79225: LD_INT 30
79227: PUSH
79228: LD_INT 40
79230: PUSH
79231: LD_INT 50
79233: PUSH
79234: LD_INT 60
79236: PUSH
79237: LD_INT 70
79239: PUSH
79240: LD_INT 80
79242: PUSH
79243: LD_INT 90
79245: PUSH
79246: LD_INT 100
79248: PUSH
79249: LD_INT 110
79251: PUSH
79252: LD_INT 120
79254: PUSH
79255: LD_INT 130
79257: PUSH
79258: LD_INT 140
79260: PUSH
79261: LD_INT 150
79263: PUSH
79264: EMPTY
79265: LIST
79266: LIST
79267: LIST
79268: LIST
79269: LIST
79270: LIST
79271: LIST
79272: LIST
79273: LIST
79274: LIST
79275: LIST
79276: LIST
79277: LIST
79278: LIST
79279: LIST
79280: PUSH
79281: LD_INT 1
79283: PPUSH
79284: LD_INT 15
79286: PPUSH
79287: CALL_OW 12
79291: ARRAY
79292: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79293: LD_ADDR_VAR 0 4
79297: PUSH
79298: LD_INT 10
79300: PUSH
79301: LD_INT 20
79303: PUSH
79304: LD_INT 30
79306: PUSH
79307: LD_INT 40
79309: PUSH
79310: LD_INT 50
79312: PUSH
79313: LD_INT 60
79315: PUSH
79316: LD_INT 70
79318: PUSH
79319: LD_INT 80
79321: PUSH
79322: LD_INT 90
79324: PUSH
79325: LD_INT 100
79327: PUSH
79328: LD_INT 110
79330: PUSH
79331: LD_INT 120
79333: PUSH
79334: LD_INT 130
79336: PUSH
79337: LD_INT 140
79339: PUSH
79340: LD_INT 150
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: LIST
79347: LIST
79348: LIST
79349: LIST
79350: LIST
79351: LIST
79352: LIST
79353: LIST
79354: LIST
79355: LIST
79356: LIST
79357: LIST
79358: LIST
79359: PUSH
79360: LD_INT 1
79362: PPUSH
79363: LD_INT 15
79365: PPUSH
79366: CALL_OW 12
79370: ARRAY
79371: ST_TO_ADDR
// if ValidHex ( x , y ) then
79372: LD_VAR 0 3
79376: PPUSH
79377: LD_VAR 0 4
79381: PPUSH
79382: CALL_OW 488
79386: IFFALSE 79409
// begin result := [ x , y ] ;
79388: LD_ADDR_VAR 0 1
79392: PUSH
79393: LD_VAR 0 3
79397: PUSH
79398: LD_VAR 0 4
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: ST_TO_ADDR
// break ;
79407: GO 79411
// end ; end ;
79409: GO 79211
79411: POP
79412: POP
// if result then
79413: LD_VAR 0 1
79417: IFFALSE 79477
// begin ToLua ( playSibBomb() ) ;
79419: LD_STRING playSibBomb()
79421: PPUSH
79422: CALL_OW 559
// wait ( 0 0$14 ) ;
79426: LD_INT 490
79428: PPUSH
79429: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
79433: LD_VAR 0 1
79437: PUSH
79438: LD_INT 1
79440: ARRAY
79441: PPUSH
79442: LD_VAR 0 1
79446: PUSH
79447: LD_INT 2
79449: ARRAY
79450: PPUSH
79451: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
79455: LD_VAR 0 1
79459: PUSH
79460: LD_INT 1
79462: ARRAY
79463: PPUSH
79464: LD_VAR 0 1
79468: PUSH
79469: LD_INT 2
79471: ARRAY
79472: PPUSH
79473: CALL_OW 429
// end ; end ;
79477: LD_VAR 0 1
79481: RET
// every 0 0$1 trigger StreamModeActive and sReset do
79482: LD_EXP 64
79486: PUSH
79487: LD_EXP 86
79491: AND
79492: IFFALSE 79504
79494: GO 79496
79496: DISABLE
// YouLost (  ) ;
79497: LD_STRING 
79499: PPUSH
79500: CALL_OW 104
79504: END
// every 0 0$1 trigger StreamModeActive and sFog do
79505: LD_EXP 64
79509: PUSH
79510: LD_EXP 85
79514: AND
79515: IFFALSE 79529
79517: GO 79519
79519: DISABLE
// FogOff ( your_side ) ;
79520: LD_OWVAR 2
79524: PPUSH
79525: CALL_OW 344
79529: END
// every 0 0$1 trigger StreamModeActive and sSun do
79530: LD_EXP 64
79534: PUSH
79535: LD_EXP 87
79539: AND
79540: IFFALSE 79568
79542: GO 79544
79544: DISABLE
// begin solar_recharge_percent := 0 ;
79545: LD_ADDR_OWVAR 79
79549: PUSH
79550: LD_INT 0
79552: ST_TO_ADDR
// wait ( 5 5$00 ) ;
79553: LD_INT 10500
79555: PPUSH
79556: CALL_OW 67
// solar_recharge_percent := 100 ;
79560: LD_ADDR_OWVAR 79
79564: PUSH
79565: LD_INT 100
79567: ST_TO_ADDR
// end ;
79568: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
79569: LD_EXP 64
79573: PUSH
79574: LD_EXP 88
79578: AND
79579: IFFALSE 79818
79581: GO 79583
79583: DISABLE
79584: LD_INT 0
79586: PPUSH
79587: PPUSH
79588: PPUSH
// begin tmp := [ ] ;
79589: LD_ADDR_VAR 0 3
79593: PUSH
79594: EMPTY
79595: ST_TO_ADDR
// for i := 1 to 6 do
79596: LD_ADDR_VAR 0 1
79600: PUSH
79601: DOUBLE
79602: LD_INT 1
79604: DEC
79605: ST_TO_ADDR
79606: LD_INT 6
79608: PUSH
79609: FOR_TO
79610: IFFALSE 79715
// begin uc_nation := nation_nature ;
79612: LD_ADDR_OWVAR 21
79616: PUSH
79617: LD_INT 0
79619: ST_TO_ADDR
// uc_side := 0 ;
79620: LD_ADDR_OWVAR 20
79624: PUSH
79625: LD_INT 0
79627: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79628: LD_ADDR_OWVAR 29
79632: PUSH
79633: LD_INT 12
79635: PUSH
79636: LD_INT 12
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: ST_TO_ADDR
// hc_agressivity := 20 ;
79643: LD_ADDR_OWVAR 35
79647: PUSH
79648: LD_INT 20
79650: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
79651: LD_ADDR_OWVAR 28
79655: PUSH
79656: LD_INT 17
79658: ST_TO_ADDR
// hc_gallery :=  ;
79659: LD_ADDR_OWVAR 33
79663: PUSH
79664: LD_STRING 
79666: ST_TO_ADDR
// hc_name :=  ;
79667: LD_ADDR_OWVAR 26
79671: PUSH
79672: LD_STRING 
79674: ST_TO_ADDR
// un := CreateHuman ;
79675: LD_ADDR_VAR 0 2
79679: PUSH
79680: CALL_OW 44
79684: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
79685: LD_VAR 0 2
79689: PPUSH
79690: LD_INT 1
79692: PPUSH
79693: CALL_OW 51
// tmp := tmp ^ un ;
79697: LD_ADDR_VAR 0 3
79701: PUSH
79702: LD_VAR 0 3
79706: PUSH
79707: LD_VAR 0 2
79711: ADD
79712: ST_TO_ADDR
// end ;
79713: GO 79609
79715: POP
79716: POP
// repeat wait ( 0 0$1 ) ;
79717: LD_INT 35
79719: PPUSH
79720: CALL_OW 67
// for un in tmp do
79724: LD_ADDR_VAR 0 2
79728: PUSH
79729: LD_VAR 0 3
79733: PUSH
79734: FOR_IN
79735: IFFALSE 79809
// begin if IsDead ( un ) then
79737: LD_VAR 0 2
79741: PPUSH
79742: CALL_OW 301
79746: IFFALSE 79766
// begin tmp := tmp diff un ;
79748: LD_ADDR_VAR 0 3
79752: PUSH
79753: LD_VAR 0 3
79757: PUSH
79758: LD_VAR 0 2
79762: DIFF
79763: ST_TO_ADDR
// continue ;
79764: GO 79734
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
79766: LD_VAR 0 2
79770: PPUSH
79771: LD_INT 3
79773: PUSH
79774: LD_INT 22
79776: PUSH
79777: LD_INT 0
79779: PUSH
79780: EMPTY
79781: LIST
79782: LIST
79783: PUSH
79784: EMPTY
79785: LIST
79786: LIST
79787: PPUSH
79788: CALL_OW 69
79792: PPUSH
79793: LD_VAR 0 2
79797: PPUSH
79798: CALL_OW 74
79802: PPUSH
79803: CALL_OW 115
// end ;
79807: GO 79734
79809: POP
79810: POP
// until not tmp ;
79811: LD_VAR 0 3
79815: NOT
79816: IFFALSE 79717
// end ;
79818: PPOPN 3
79820: END
// every 0 0$1 trigger StreamModeActive and sTroll do
79821: LD_EXP 64
79825: PUSH
79826: LD_EXP 89
79830: AND
79831: IFFALSE 79885
79833: GO 79835
79835: DISABLE
// begin ToLua ( displayTroll(); ) ;
79836: LD_STRING displayTroll();
79838: PPUSH
79839: CALL_OW 559
// wait ( 3 3$00 ) ;
79843: LD_INT 6300
79845: PPUSH
79846: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79850: LD_STRING hideTroll();
79852: PPUSH
79853: CALL_OW 559
// wait ( 1 1$00 ) ;
79857: LD_INT 2100
79859: PPUSH
79860: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79864: LD_STRING displayTroll();
79866: PPUSH
79867: CALL_OW 559
// wait ( 1 1$00 ) ;
79871: LD_INT 2100
79873: PPUSH
79874: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79878: LD_STRING hideTroll();
79880: PPUSH
79881: CALL_OW 559
// end ;
79885: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
79886: LD_EXP 64
79890: PUSH
79891: LD_EXP 90
79895: AND
79896: IFFALSE 79959
79898: GO 79900
79900: DISABLE
79901: LD_INT 0
79903: PPUSH
// begin p := 0 ;
79904: LD_ADDR_VAR 0 1
79908: PUSH
79909: LD_INT 0
79911: ST_TO_ADDR
// repeat game_speed := 1 ;
79912: LD_ADDR_OWVAR 65
79916: PUSH
79917: LD_INT 1
79919: ST_TO_ADDR
// wait ( 0 0$1 ) ;
79920: LD_INT 35
79922: PPUSH
79923: CALL_OW 67
// p := p + 1 ;
79927: LD_ADDR_VAR 0 1
79931: PUSH
79932: LD_VAR 0 1
79936: PUSH
79937: LD_INT 1
79939: PLUS
79940: ST_TO_ADDR
// until p >= 60 ;
79941: LD_VAR 0 1
79945: PUSH
79946: LD_INT 60
79948: GREATEREQUAL
79949: IFFALSE 79912
// game_speed := 4 ;
79951: LD_ADDR_OWVAR 65
79955: PUSH
79956: LD_INT 4
79958: ST_TO_ADDR
// end ;
79959: PPOPN 1
79961: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79962: LD_EXP 64
79966: PUSH
79967: LD_EXP 91
79971: AND
79972: IFFALSE 80118
79974: GO 79976
79976: DISABLE
79977: LD_INT 0
79979: PPUSH
79980: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79981: LD_ADDR_VAR 0 1
79985: PUSH
79986: LD_INT 22
79988: PUSH
79989: LD_OWVAR 2
79993: PUSH
79994: EMPTY
79995: LIST
79996: LIST
79997: PUSH
79998: LD_INT 2
80000: PUSH
80001: LD_INT 30
80003: PUSH
80004: LD_INT 0
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PUSH
80011: LD_INT 30
80013: PUSH
80014: LD_INT 1
80016: PUSH
80017: EMPTY
80018: LIST
80019: LIST
80020: PUSH
80021: EMPTY
80022: LIST
80023: LIST
80024: LIST
80025: PUSH
80026: EMPTY
80027: LIST
80028: LIST
80029: PPUSH
80030: CALL_OW 69
80034: ST_TO_ADDR
// if not depot then
80035: LD_VAR 0 1
80039: NOT
80040: IFFALSE 80044
// exit ;
80042: GO 80118
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80044: LD_ADDR_VAR 0 2
80048: PUSH
80049: LD_VAR 0 1
80053: PUSH
80054: LD_INT 1
80056: PPUSH
80057: LD_VAR 0 1
80061: PPUSH
80062: CALL_OW 12
80066: ARRAY
80067: PPUSH
80068: CALL_OW 274
80072: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
80073: LD_VAR 0 2
80077: PPUSH
80078: LD_INT 1
80080: PPUSH
80081: LD_INT 0
80083: PPUSH
80084: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
80088: LD_VAR 0 2
80092: PPUSH
80093: LD_INT 2
80095: PPUSH
80096: LD_INT 0
80098: PPUSH
80099: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
80103: LD_VAR 0 2
80107: PPUSH
80108: LD_INT 3
80110: PPUSH
80111: LD_INT 0
80113: PPUSH
80114: CALL_OW 277
// end ;
80118: PPOPN 2
80120: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
80121: LD_EXP 64
80125: PUSH
80126: LD_EXP 92
80130: AND
80131: IFFALSE 80228
80133: GO 80135
80135: DISABLE
80136: LD_INT 0
80138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80139: LD_ADDR_VAR 0 1
80143: PUSH
80144: LD_INT 22
80146: PUSH
80147: LD_OWVAR 2
80151: PUSH
80152: EMPTY
80153: LIST
80154: LIST
80155: PUSH
80156: LD_INT 21
80158: PUSH
80159: LD_INT 1
80161: PUSH
80162: EMPTY
80163: LIST
80164: LIST
80165: PUSH
80166: LD_INT 3
80168: PUSH
80169: LD_INT 23
80171: PUSH
80172: LD_INT 0
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: PUSH
80179: EMPTY
80180: LIST
80181: LIST
80182: PUSH
80183: EMPTY
80184: LIST
80185: LIST
80186: LIST
80187: PPUSH
80188: CALL_OW 69
80192: ST_TO_ADDR
// if not tmp then
80193: LD_VAR 0 1
80197: NOT
80198: IFFALSE 80202
// exit ;
80200: GO 80228
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
80202: LD_VAR 0 1
80206: PUSH
80207: LD_INT 1
80209: PPUSH
80210: LD_VAR 0 1
80214: PPUSH
80215: CALL_OW 12
80219: ARRAY
80220: PPUSH
80221: LD_INT 200
80223: PPUSH
80224: CALL_OW 234
// end ;
80228: PPOPN 1
80230: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
80231: LD_EXP 64
80235: PUSH
80236: LD_EXP 93
80240: AND
80241: IFFALSE 80320
80243: GO 80245
80245: DISABLE
80246: LD_INT 0
80248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
80249: LD_ADDR_VAR 0 1
80253: PUSH
80254: LD_INT 22
80256: PUSH
80257: LD_OWVAR 2
80261: PUSH
80262: EMPTY
80263: LIST
80264: LIST
80265: PUSH
80266: LD_INT 21
80268: PUSH
80269: LD_INT 2
80271: PUSH
80272: EMPTY
80273: LIST
80274: LIST
80275: PUSH
80276: EMPTY
80277: LIST
80278: LIST
80279: PPUSH
80280: CALL_OW 69
80284: ST_TO_ADDR
// if not tmp then
80285: LD_VAR 0 1
80289: NOT
80290: IFFALSE 80294
// exit ;
80292: GO 80320
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
80294: LD_VAR 0 1
80298: PUSH
80299: LD_INT 1
80301: PPUSH
80302: LD_VAR 0 1
80306: PPUSH
80307: CALL_OW 12
80311: ARRAY
80312: PPUSH
80313: LD_INT 60
80315: PPUSH
80316: CALL_OW 234
// end ;
80320: PPOPN 1
80322: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
80323: LD_EXP 64
80327: PUSH
80328: LD_EXP 94
80332: AND
80333: IFFALSE 80432
80335: GO 80337
80337: DISABLE
80338: LD_INT 0
80340: PPUSH
80341: PPUSH
// begin enable ;
80342: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
80343: LD_ADDR_VAR 0 1
80347: PUSH
80348: LD_INT 22
80350: PUSH
80351: LD_OWVAR 2
80355: PUSH
80356: EMPTY
80357: LIST
80358: LIST
80359: PUSH
80360: LD_INT 61
80362: PUSH
80363: EMPTY
80364: LIST
80365: PUSH
80366: LD_INT 33
80368: PUSH
80369: LD_INT 2
80371: PUSH
80372: EMPTY
80373: LIST
80374: LIST
80375: PUSH
80376: EMPTY
80377: LIST
80378: LIST
80379: LIST
80380: PPUSH
80381: CALL_OW 69
80385: ST_TO_ADDR
// if not tmp then
80386: LD_VAR 0 1
80390: NOT
80391: IFFALSE 80395
// exit ;
80393: GO 80432
// for i in tmp do
80395: LD_ADDR_VAR 0 2
80399: PUSH
80400: LD_VAR 0 1
80404: PUSH
80405: FOR_IN
80406: IFFALSE 80430
// if IsControledBy ( i ) then
80408: LD_VAR 0 2
80412: PPUSH
80413: CALL_OW 312
80417: IFFALSE 80428
// ComUnlink ( i ) ;
80419: LD_VAR 0 2
80423: PPUSH
80424: CALL_OW 136
80428: GO 80405
80430: POP
80431: POP
// end ;
80432: PPOPN 2
80434: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
80435: LD_EXP 64
80439: PUSH
80440: LD_EXP 95
80444: AND
80445: IFFALSE 80585
80447: GO 80449
80449: DISABLE
80450: LD_INT 0
80452: PPUSH
80453: PPUSH
// begin ToLua ( displayPowell(); ) ;
80454: LD_STRING displayPowell();
80456: PPUSH
80457: CALL_OW 559
// uc_side := 0 ;
80461: LD_ADDR_OWVAR 20
80465: PUSH
80466: LD_INT 0
80468: ST_TO_ADDR
// uc_nation := 2 ;
80469: LD_ADDR_OWVAR 21
80473: PUSH
80474: LD_INT 2
80476: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
80477: LD_ADDR_OWVAR 37
80481: PUSH
80482: LD_INT 14
80484: ST_TO_ADDR
// vc_engine := engine_siberite ;
80485: LD_ADDR_OWVAR 39
80489: PUSH
80490: LD_INT 3
80492: ST_TO_ADDR
// vc_control := control_apeman ;
80493: LD_ADDR_OWVAR 38
80497: PUSH
80498: LD_INT 5
80500: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
80501: LD_ADDR_OWVAR 40
80505: PUSH
80506: LD_INT 29
80508: ST_TO_ADDR
// un := CreateVehicle ;
80509: LD_ADDR_VAR 0 2
80513: PUSH
80514: CALL_OW 45
80518: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80519: LD_VAR 0 2
80523: PPUSH
80524: LD_INT 1
80526: PPUSH
80527: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80531: LD_INT 35
80533: PPUSH
80534: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80538: LD_VAR 0 2
80542: PPUSH
80543: LD_INT 22
80545: PUSH
80546: LD_OWVAR 2
80550: PUSH
80551: EMPTY
80552: LIST
80553: LIST
80554: PPUSH
80555: CALL_OW 69
80559: PPUSH
80560: LD_VAR 0 2
80564: PPUSH
80565: CALL_OW 74
80569: PPUSH
80570: CALL_OW 115
// until IsDead ( un ) ;
80574: LD_VAR 0 2
80578: PPUSH
80579: CALL_OW 301
80583: IFFALSE 80531
// end ;
80585: PPOPN 2
80587: END
// every 0 0$1 trigger StreamModeActive and sStu do
80588: LD_EXP 64
80592: PUSH
80593: LD_EXP 103
80597: AND
80598: IFFALSE 80614
80600: GO 80602
80602: DISABLE
// begin ToLua ( displayStucuk(); ) ;
80603: LD_STRING displayStucuk();
80605: PPUSH
80606: CALL_OW 559
// ResetFog ;
80610: CALL_OW 335
// end ;
80614: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
80615: LD_EXP 64
80619: PUSH
80620: LD_EXP 96
80624: AND
80625: IFFALSE 80766
80627: GO 80629
80629: DISABLE
80630: LD_INT 0
80632: PPUSH
80633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80634: LD_ADDR_VAR 0 2
80638: PUSH
80639: LD_INT 22
80641: PUSH
80642: LD_OWVAR 2
80646: PUSH
80647: EMPTY
80648: LIST
80649: LIST
80650: PUSH
80651: LD_INT 21
80653: PUSH
80654: LD_INT 1
80656: PUSH
80657: EMPTY
80658: LIST
80659: LIST
80660: PUSH
80661: EMPTY
80662: LIST
80663: LIST
80664: PPUSH
80665: CALL_OW 69
80669: ST_TO_ADDR
// if not tmp then
80670: LD_VAR 0 2
80674: NOT
80675: IFFALSE 80679
// exit ;
80677: GO 80766
// un := tmp [ rand ( 1 , tmp ) ] ;
80679: LD_ADDR_VAR 0 1
80683: PUSH
80684: LD_VAR 0 2
80688: PUSH
80689: LD_INT 1
80691: PPUSH
80692: LD_VAR 0 2
80696: PPUSH
80697: CALL_OW 12
80701: ARRAY
80702: ST_TO_ADDR
// SetSide ( un , 0 ) ;
80703: LD_VAR 0 1
80707: PPUSH
80708: LD_INT 0
80710: PPUSH
80711: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
80715: LD_VAR 0 1
80719: PPUSH
80720: LD_OWVAR 3
80724: PUSH
80725: LD_VAR 0 1
80729: DIFF
80730: PPUSH
80731: LD_VAR 0 1
80735: PPUSH
80736: CALL_OW 74
80740: PPUSH
80741: CALL_OW 115
// wait ( 0 0$20 ) ;
80745: LD_INT 700
80747: PPUSH
80748: CALL_OW 67
// SetSide ( un , your_side ) ;
80752: LD_VAR 0 1
80756: PPUSH
80757: LD_OWVAR 2
80761: PPUSH
80762: CALL_OW 235
// end ;
80766: PPOPN 2
80768: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
80769: LD_EXP 64
80773: PUSH
80774: LD_EXP 97
80778: AND
80779: IFFALSE 80885
80781: GO 80783
80783: DISABLE
80784: LD_INT 0
80786: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80787: LD_ADDR_VAR 0 1
80791: PUSH
80792: LD_INT 22
80794: PUSH
80795: LD_OWVAR 2
80799: PUSH
80800: EMPTY
80801: LIST
80802: LIST
80803: PUSH
80804: LD_INT 2
80806: PUSH
80807: LD_INT 30
80809: PUSH
80810: LD_INT 0
80812: PUSH
80813: EMPTY
80814: LIST
80815: LIST
80816: PUSH
80817: LD_INT 30
80819: PUSH
80820: LD_INT 1
80822: PUSH
80823: EMPTY
80824: LIST
80825: LIST
80826: PUSH
80827: EMPTY
80828: LIST
80829: LIST
80830: LIST
80831: PUSH
80832: EMPTY
80833: LIST
80834: LIST
80835: PPUSH
80836: CALL_OW 69
80840: ST_TO_ADDR
// if not depot then
80841: LD_VAR 0 1
80845: NOT
80846: IFFALSE 80850
// exit ;
80848: GO 80885
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80850: LD_VAR 0 1
80854: PUSH
80855: LD_INT 1
80857: ARRAY
80858: PPUSH
80859: CALL_OW 250
80863: PPUSH
80864: LD_VAR 0 1
80868: PUSH
80869: LD_INT 1
80871: ARRAY
80872: PPUSH
80873: CALL_OW 251
80877: PPUSH
80878: LD_INT 70
80880: PPUSH
80881: CALL_OW 495
// end ;
80885: PPOPN 1
80887: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
80888: LD_EXP 64
80892: PUSH
80893: LD_EXP 98
80897: AND
80898: IFFALSE 81109
80900: GO 80902
80902: DISABLE
80903: LD_INT 0
80905: PPUSH
80906: PPUSH
80907: PPUSH
80908: PPUSH
80909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80910: LD_ADDR_VAR 0 5
80914: PUSH
80915: LD_INT 22
80917: PUSH
80918: LD_OWVAR 2
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: PUSH
80927: LD_INT 21
80929: PUSH
80930: LD_INT 1
80932: PUSH
80933: EMPTY
80934: LIST
80935: LIST
80936: PUSH
80937: EMPTY
80938: LIST
80939: LIST
80940: PPUSH
80941: CALL_OW 69
80945: ST_TO_ADDR
// if not tmp then
80946: LD_VAR 0 5
80950: NOT
80951: IFFALSE 80955
// exit ;
80953: GO 81109
// for i in tmp do
80955: LD_ADDR_VAR 0 1
80959: PUSH
80960: LD_VAR 0 5
80964: PUSH
80965: FOR_IN
80966: IFFALSE 81107
// begin d := rand ( 0 , 5 ) ;
80968: LD_ADDR_VAR 0 4
80972: PUSH
80973: LD_INT 0
80975: PPUSH
80976: LD_INT 5
80978: PPUSH
80979: CALL_OW 12
80983: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80984: LD_ADDR_VAR 0 2
80988: PUSH
80989: LD_VAR 0 1
80993: PPUSH
80994: CALL_OW 250
80998: PPUSH
80999: LD_VAR 0 4
81003: PPUSH
81004: LD_INT 3
81006: PPUSH
81007: LD_INT 12
81009: PPUSH
81010: CALL_OW 12
81014: PPUSH
81015: CALL_OW 272
81019: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81020: LD_ADDR_VAR 0 3
81024: PUSH
81025: LD_VAR 0 1
81029: PPUSH
81030: CALL_OW 251
81034: PPUSH
81035: LD_VAR 0 4
81039: PPUSH
81040: LD_INT 3
81042: PPUSH
81043: LD_INT 12
81045: PPUSH
81046: CALL_OW 12
81050: PPUSH
81051: CALL_OW 273
81055: ST_TO_ADDR
// if ValidHex ( x , y ) then
81056: LD_VAR 0 2
81060: PPUSH
81061: LD_VAR 0 3
81065: PPUSH
81066: CALL_OW 488
81070: IFFALSE 81105
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
81072: LD_VAR 0 1
81076: PPUSH
81077: LD_VAR 0 2
81081: PPUSH
81082: LD_VAR 0 3
81086: PPUSH
81087: LD_INT 3
81089: PPUSH
81090: LD_INT 6
81092: PPUSH
81093: CALL_OW 12
81097: PPUSH
81098: LD_INT 1
81100: PPUSH
81101: CALL_OW 483
// end ;
81105: GO 80965
81107: POP
81108: POP
// end ;
81109: PPOPN 5
81111: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
81112: LD_EXP 64
81116: PUSH
81117: LD_EXP 99
81121: AND
81122: IFFALSE 81216
81124: GO 81126
81126: DISABLE
81127: LD_INT 0
81129: PPUSH
81130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
81131: LD_ADDR_VAR 0 2
81135: PUSH
81136: LD_INT 22
81138: PUSH
81139: LD_OWVAR 2
81143: PUSH
81144: EMPTY
81145: LIST
81146: LIST
81147: PUSH
81148: LD_INT 32
81150: PUSH
81151: LD_INT 1
81153: PUSH
81154: EMPTY
81155: LIST
81156: LIST
81157: PUSH
81158: LD_INT 21
81160: PUSH
81161: LD_INT 2
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: PUSH
81168: EMPTY
81169: LIST
81170: LIST
81171: LIST
81172: PPUSH
81173: CALL_OW 69
81177: ST_TO_ADDR
// if not tmp then
81178: LD_VAR 0 2
81182: NOT
81183: IFFALSE 81187
// exit ;
81185: GO 81216
// for i in tmp do
81187: LD_ADDR_VAR 0 1
81191: PUSH
81192: LD_VAR 0 2
81196: PUSH
81197: FOR_IN
81198: IFFALSE 81214
// SetFuel ( i , 0 ) ;
81200: LD_VAR 0 1
81204: PPUSH
81205: LD_INT 0
81207: PPUSH
81208: CALL_OW 240
81212: GO 81197
81214: POP
81215: POP
// end ;
81216: PPOPN 2
81218: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
81219: LD_EXP 64
81223: PUSH
81224: LD_EXP 100
81228: AND
81229: IFFALSE 81295
81231: GO 81233
81233: DISABLE
81234: LD_INT 0
81236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81237: LD_ADDR_VAR 0 1
81241: PUSH
81242: LD_INT 22
81244: PUSH
81245: LD_OWVAR 2
81249: PUSH
81250: EMPTY
81251: LIST
81252: LIST
81253: PUSH
81254: LD_INT 30
81256: PUSH
81257: LD_INT 29
81259: PUSH
81260: EMPTY
81261: LIST
81262: LIST
81263: PUSH
81264: EMPTY
81265: LIST
81266: LIST
81267: PPUSH
81268: CALL_OW 69
81272: ST_TO_ADDR
// if not tmp then
81273: LD_VAR 0 1
81277: NOT
81278: IFFALSE 81282
// exit ;
81280: GO 81295
// DestroyUnit ( tmp [ 1 ] ) ;
81282: LD_VAR 0 1
81286: PUSH
81287: LD_INT 1
81289: ARRAY
81290: PPUSH
81291: CALL_OW 65
// end ;
81295: PPOPN 1
81297: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
81298: LD_EXP 64
81302: PUSH
81303: LD_EXP 102
81307: AND
81308: IFFALSE 81437
81310: GO 81312
81312: DISABLE
81313: LD_INT 0
81315: PPUSH
// begin uc_side := 0 ;
81316: LD_ADDR_OWVAR 20
81320: PUSH
81321: LD_INT 0
81323: ST_TO_ADDR
// uc_nation := nation_arabian ;
81324: LD_ADDR_OWVAR 21
81328: PUSH
81329: LD_INT 2
81331: ST_TO_ADDR
// hc_gallery :=  ;
81332: LD_ADDR_OWVAR 33
81336: PUSH
81337: LD_STRING 
81339: ST_TO_ADDR
// hc_name :=  ;
81340: LD_ADDR_OWVAR 26
81344: PUSH
81345: LD_STRING 
81347: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
81348: LD_INT 1
81350: PPUSH
81351: LD_INT 11
81353: PPUSH
81354: LD_INT 10
81356: PPUSH
81357: CALL_OW 380
// un := CreateHuman ;
81361: LD_ADDR_VAR 0 1
81365: PUSH
81366: CALL_OW 44
81370: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81371: LD_VAR 0 1
81375: PPUSH
81376: LD_INT 1
81378: PPUSH
81379: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81383: LD_INT 35
81385: PPUSH
81386: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81390: LD_VAR 0 1
81394: PPUSH
81395: LD_INT 22
81397: PUSH
81398: LD_OWVAR 2
81402: PUSH
81403: EMPTY
81404: LIST
81405: LIST
81406: PPUSH
81407: CALL_OW 69
81411: PPUSH
81412: LD_VAR 0 1
81416: PPUSH
81417: CALL_OW 74
81421: PPUSH
81422: CALL_OW 115
// until IsDead ( un ) ;
81426: LD_VAR 0 1
81430: PPUSH
81431: CALL_OW 301
81435: IFFALSE 81383
// end ;
81437: PPOPN 1
81439: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
81440: LD_EXP 64
81444: PUSH
81445: LD_EXP 104
81449: AND
81450: IFFALSE 81462
81452: GO 81454
81454: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
81455: LD_STRING earthquake(getX(game), 0, 32)
81457: PPUSH
81458: CALL_OW 559
81462: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
81463: LD_EXP 64
81467: PUSH
81468: LD_EXP 105
81472: AND
81473: IFFALSE 81564
81475: GO 81477
81477: DISABLE
81478: LD_INT 0
81480: PPUSH
// begin enable ;
81481: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
81482: LD_ADDR_VAR 0 1
81486: PUSH
81487: LD_INT 22
81489: PUSH
81490: LD_OWVAR 2
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: PUSH
81499: LD_INT 21
81501: PUSH
81502: LD_INT 2
81504: PUSH
81505: EMPTY
81506: LIST
81507: LIST
81508: PUSH
81509: LD_INT 33
81511: PUSH
81512: LD_INT 3
81514: PUSH
81515: EMPTY
81516: LIST
81517: LIST
81518: PUSH
81519: EMPTY
81520: LIST
81521: LIST
81522: LIST
81523: PPUSH
81524: CALL_OW 69
81528: ST_TO_ADDR
// if not tmp then
81529: LD_VAR 0 1
81533: NOT
81534: IFFALSE 81538
// exit ;
81536: GO 81564
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81538: LD_VAR 0 1
81542: PUSH
81543: LD_INT 1
81545: PPUSH
81546: LD_VAR 0 1
81550: PPUSH
81551: CALL_OW 12
81555: ARRAY
81556: PPUSH
81557: LD_INT 1
81559: PPUSH
81560: CALL_OW 234
// end ;
81564: PPOPN 1
81566: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
81567: LD_EXP 64
81571: PUSH
81572: LD_EXP 106
81576: AND
81577: IFFALSE 81718
81579: GO 81581
81581: DISABLE
81582: LD_INT 0
81584: PPUSH
81585: PPUSH
81586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81587: LD_ADDR_VAR 0 3
81591: PUSH
81592: LD_INT 22
81594: PUSH
81595: LD_OWVAR 2
81599: PUSH
81600: EMPTY
81601: LIST
81602: LIST
81603: PUSH
81604: LD_INT 25
81606: PUSH
81607: LD_INT 1
81609: PUSH
81610: EMPTY
81611: LIST
81612: LIST
81613: PUSH
81614: EMPTY
81615: LIST
81616: LIST
81617: PPUSH
81618: CALL_OW 69
81622: ST_TO_ADDR
// if not tmp then
81623: LD_VAR 0 3
81627: NOT
81628: IFFALSE 81632
// exit ;
81630: GO 81718
// un := tmp [ rand ( 1 , tmp ) ] ;
81632: LD_ADDR_VAR 0 2
81636: PUSH
81637: LD_VAR 0 3
81641: PUSH
81642: LD_INT 1
81644: PPUSH
81645: LD_VAR 0 3
81649: PPUSH
81650: CALL_OW 12
81654: ARRAY
81655: ST_TO_ADDR
// if Crawls ( un ) then
81656: LD_VAR 0 2
81660: PPUSH
81661: CALL_OW 318
81665: IFFALSE 81676
// ComWalk ( un ) ;
81667: LD_VAR 0 2
81671: PPUSH
81672: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
81676: LD_VAR 0 2
81680: PPUSH
81681: LD_INT 9
81683: PPUSH
81684: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
81688: LD_INT 28
81690: PPUSH
81691: LD_OWVAR 2
81695: PPUSH
81696: LD_INT 2
81698: PPUSH
81699: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
81703: LD_INT 29
81705: PPUSH
81706: LD_OWVAR 2
81710: PPUSH
81711: LD_INT 2
81713: PPUSH
81714: CALL_OW 322
// end ;
81718: PPOPN 3
81720: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
81721: LD_EXP 64
81725: PUSH
81726: LD_EXP 107
81730: AND
81731: IFFALSE 81842
81733: GO 81735
81735: DISABLE
81736: LD_INT 0
81738: PPUSH
81739: PPUSH
81740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81741: LD_ADDR_VAR 0 3
81745: PUSH
81746: LD_INT 22
81748: PUSH
81749: LD_OWVAR 2
81753: PUSH
81754: EMPTY
81755: LIST
81756: LIST
81757: PUSH
81758: LD_INT 25
81760: PUSH
81761: LD_INT 1
81763: PUSH
81764: EMPTY
81765: LIST
81766: LIST
81767: PUSH
81768: EMPTY
81769: LIST
81770: LIST
81771: PPUSH
81772: CALL_OW 69
81776: ST_TO_ADDR
// if not tmp then
81777: LD_VAR 0 3
81781: NOT
81782: IFFALSE 81786
// exit ;
81784: GO 81842
// un := tmp [ rand ( 1 , tmp ) ] ;
81786: LD_ADDR_VAR 0 2
81790: PUSH
81791: LD_VAR 0 3
81795: PUSH
81796: LD_INT 1
81798: PPUSH
81799: LD_VAR 0 3
81803: PPUSH
81804: CALL_OW 12
81808: ARRAY
81809: ST_TO_ADDR
// if Crawls ( un ) then
81810: LD_VAR 0 2
81814: PPUSH
81815: CALL_OW 318
81819: IFFALSE 81830
// ComWalk ( un ) ;
81821: LD_VAR 0 2
81825: PPUSH
81826: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81830: LD_VAR 0 2
81834: PPUSH
81835: LD_INT 8
81837: PPUSH
81838: CALL_OW 336
// end ;
81842: PPOPN 3
81844: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
81845: LD_EXP 64
81849: PUSH
81850: LD_EXP 108
81854: AND
81855: IFFALSE 81999
81857: GO 81859
81859: DISABLE
81860: LD_INT 0
81862: PPUSH
81863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81864: LD_ADDR_VAR 0 2
81868: PUSH
81869: LD_INT 22
81871: PUSH
81872: LD_OWVAR 2
81876: PUSH
81877: EMPTY
81878: LIST
81879: LIST
81880: PUSH
81881: LD_INT 21
81883: PUSH
81884: LD_INT 2
81886: PUSH
81887: EMPTY
81888: LIST
81889: LIST
81890: PUSH
81891: LD_INT 2
81893: PUSH
81894: LD_INT 34
81896: PUSH
81897: LD_INT 12
81899: PUSH
81900: EMPTY
81901: LIST
81902: LIST
81903: PUSH
81904: LD_INT 34
81906: PUSH
81907: LD_INT 51
81909: PUSH
81910: EMPTY
81911: LIST
81912: LIST
81913: PUSH
81914: LD_INT 34
81916: PUSH
81917: LD_INT 32
81919: PUSH
81920: EMPTY
81921: LIST
81922: LIST
81923: PUSH
81924: EMPTY
81925: LIST
81926: LIST
81927: LIST
81928: LIST
81929: PUSH
81930: EMPTY
81931: LIST
81932: LIST
81933: LIST
81934: PPUSH
81935: CALL_OW 69
81939: ST_TO_ADDR
// if not tmp then
81940: LD_VAR 0 2
81944: NOT
81945: IFFALSE 81949
// exit ;
81947: GO 81999
// for i in tmp do
81949: LD_ADDR_VAR 0 1
81953: PUSH
81954: LD_VAR 0 2
81958: PUSH
81959: FOR_IN
81960: IFFALSE 81997
// if GetCargo ( i , mat_artifact ) = 0 then
81962: LD_VAR 0 1
81966: PPUSH
81967: LD_INT 4
81969: PPUSH
81970: CALL_OW 289
81974: PUSH
81975: LD_INT 0
81977: EQUAL
81978: IFFALSE 81995
// SetCargo ( i , mat_siberit , 100 ) ;
81980: LD_VAR 0 1
81984: PPUSH
81985: LD_INT 3
81987: PPUSH
81988: LD_INT 100
81990: PPUSH
81991: CALL_OW 290
81995: GO 81959
81997: POP
81998: POP
// end ;
81999: PPOPN 2
82001: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
82002: LD_EXP 64
82006: PUSH
82007: LD_EXP 109
82011: AND
82012: IFFALSE 82195
82014: GO 82016
82016: DISABLE
82017: LD_INT 0
82019: PPUSH
82020: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82021: LD_ADDR_VAR 0 2
82025: PUSH
82026: LD_INT 22
82028: PUSH
82029: LD_OWVAR 2
82033: PUSH
82034: EMPTY
82035: LIST
82036: LIST
82037: PPUSH
82038: CALL_OW 69
82042: ST_TO_ADDR
// if not tmp then
82043: LD_VAR 0 2
82047: NOT
82048: IFFALSE 82052
// exit ;
82050: GO 82195
// for i := 1 to 2 do
82052: LD_ADDR_VAR 0 1
82056: PUSH
82057: DOUBLE
82058: LD_INT 1
82060: DEC
82061: ST_TO_ADDR
82062: LD_INT 2
82064: PUSH
82065: FOR_TO
82066: IFFALSE 82193
// begin uc_side := your_side ;
82068: LD_ADDR_OWVAR 20
82072: PUSH
82073: LD_OWVAR 2
82077: ST_TO_ADDR
// uc_nation := nation_american ;
82078: LD_ADDR_OWVAR 21
82082: PUSH
82083: LD_INT 1
82085: ST_TO_ADDR
// vc_chassis := us_morphling ;
82086: LD_ADDR_OWVAR 37
82090: PUSH
82091: LD_INT 5
82093: ST_TO_ADDR
// vc_engine := engine_siberite ;
82094: LD_ADDR_OWVAR 39
82098: PUSH
82099: LD_INT 3
82101: ST_TO_ADDR
// vc_control := control_computer ;
82102: LD_ADDR_OWVAR 38
82106: PUSH
82107: LD_INT 3
82109: ST_TO_ADDR
// vc_weapon := us_double_laser ;
82110: LD_ADDR_OWVAR 40
82114: PUSH
82115: LD_INT 10
82117: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
82118: LD_VAR 0 2
82122: PUSH
82123: LD_INT 1
82125: ARRAY
82126: PPUSH
82127: CALL_OW 310
82131: NOT
82132: IFFALSE 82179
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
82134: CALL_OW 45
82138: PPUSH
82139: LD_VAR 0 2
82143: PUSH
82144: LD_INT 1
82146: ARRAY
82147: PPUSH
82148: CALL_OW 250
82152: PPUSH
82153: LD_VAR 0 2
82157: PUSH
82158: LD_INT 1
82160: ARRAY
82161: PPUSH
82162: CALL_OW 251
82166: PPUSH
82167: LD_INT 12
82169: PPUSH
82170: LD_INT 1
82172: PPUSH
82173: CALL_OW 50
82177: GO 82191
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
82179: CALL_OW 45
82183: PPUSH
82184: LD_INT 1
82186: PPUSH
82187: CALL_OW 51
// end ;
82191: GO 82065
82193: POP
82194: POP
// end ;
82195: PPOPN 2
82197: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
82198: LD_EXP 64
82202: PUSH
82203: LD_EXP 110
82207: AND
82208: IFFALSE 82430
82210: GO 82212
82212: DISABLE
82213: LD_INT 0
82215: PPUSH
82216: PPUSH
82217: PPUSH
82218: PPUSH
82219: PPUSH
82220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82221: LD_ADDR_VAR 0 6
82225: PUSH
82226: LD_INT 22
82228: PUSH
82229: LD_OWVAR 2
82233: PUSH
82234: EMPTY
82235: LIST
82236: LIST
82237: PUSH
82238: LD_INT 21
82240: PUSH
82241: LD_INT 1
82243: PUSH
82244: EMPTY
82245: LIST
82246: LIST
82247: PUSH
82248: LD_INT 3
82250: PUSH
82251: LD_INT 23
82253: PUSH
82254: LD_INT 0
82256: PUSH
82257: EMPTY
82258: LIST
82259: LIST
82260: PUSH
82261: EMPTY
82262: LIST
82263: LIST
82264: PUSH
82265: EMPTY
82266: LIST
82267: LIST
82268: LIST
82269: PPUSH
82270: CALL_OW 69
82274: ST_TO_ADDR
// if not tmp then
82275: LD_VAR 0 6
82279: NOT
82280: IFFALSE 82284
// exit ;
82282: GO 82430
// s1 := rand ( 1 , 4 ) ;
82284: LD_ADDR_VAR 0 2
82288: PUSH
82289: LD_INT 1
82291: PPUSH
82292: LD_INT 4
82294: PPUSH
82295: CALL_OW 12
82299: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
82300: LD_ADDR_VAR 0 4
82304: PUSH
82305: LD_VAR 0 6
82309: PUSH
82310: LD_INT 1
82312: ARRAY
82313: PPUSH
82314: LD_VAR 0 2
82318: PPUSH
82319: CALL_OW 259
82323: ST_TO_ADDR
// if s1 = 1 then
82324: LD_VAR 0 2
82328: PUSH
82329: LD_INT 1
82331: EQUAL
82332: IFFALSE 82352
// s2 := rand ( 2 , 4 ) else
82334: LD_ADDR_VAR 0 3
82338: PUSH
82339: LD_INT 2
82341: PPUSH
82342: LD_INT 4
82344: PPUSH
82345: CALL_OW 12
82349: ST_TO_ADDR
82350: GO 82360
// s2 := 1 ;
82352: LD_ADDR_VAR 0 3
82356: PUSH
82357: LD_INT 1
82359: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
82360: LD_ADDR_VAR 0 5
82364: PUSH
82365: LD_VAR 0 6
82369: PUSH
82370: LD_INT 1
82372: ARRAY
82373: PPUSH
82374: LD_VAR 0 3
82378: PPUSH
82379: CALL_OW 259
82383: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
82384: LD_VAR 0 6
82388: PUSH
82389: LD_INT 1
82391: ARRAY
82392: PPUSH
82393: LD_VAR 0 2
82397: PPUSH
82398: LD_VAR 0 5
82402: PPUSH
82403: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
82407: LD_VAR 0 6
82411: PUSH
82412: LD_INT 1
82414: ARRAY
82415: PPUSH
82416: LD_VAR 0 3
82420: PPUSH
82421: LD_VAR 0 4
82425: PPUSH
82426: CALL_OW 237
// end ;
82430: PPOPN 6
82432: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
82433: LD_EXP 64
82437: PUSH
82438: LD_EXP 111
82442: AND
82443: IFFALSE 82522
82445: GO 82447
82447: DISABLE
82448: LD_INT 0
82450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
82451: LD_ADDR_VAR 0 1
82455: PUSH
82456: LD_INT 22
82458: PUSH
82459: LD_OWVAR 2
82463: PUSH
82464: EMPTY
82465: LIST
82466: LIST
82467: PUSH
82468: LD_INT 30
82470: PUSH
82471: LD_INT 3
82473: PUSH
82474: EMPTY
82475: LIST
82476: LIST
82477: PUSH
82478: EMPTY
82479: LIST
82480: LIST
82481: PPUSH
82482: CALL_OW 69
82486: ST_TO_ADDR
// if not tmp then
82487: LD_VAR 0 1
82491: NOT
82492: IFFALSE 82496
// exit ;
82494: GO 82522
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82496: LD_VAR 0 1
82500: PUSH
82501: LD_INT 1
82503: PPUSH
82504: LD_VAR 0 1
82508: PPUSH
82509: CALL_OW 12
82513: ARRAY
82514: PPUSH
82515: LD_INT 1
82517: PPUSH
82518: CALL_OW 234
// end ;
82522: PPOPN 1
82524: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
82525: LD_EXP 64
82529: PUSH
82530: LD_EXP 112
82534: AND
82535: IFFALSE 82647
82537: GO 82539
82539: DISABLE
82540: LD_INT 0
82542: PPUSH
82543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
82544: LD_ADDR_VAR 0 2
82548: PUSH
82549: LD_INT 22
82551: PUSH
82552: LD_OWVAR 2
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: PUSH
82561: LD_INT 2
82563: PUSH
82564: LD_INT 30
82566: PUSH
82567: LD_INT 27
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: PUSH
82574: LD_INT 30
82576: PUSH
82577: LD_INT 26
82579: PUSH
82580: EMPTY
82581: LIST
82582: LIST
82583: PUSH
82584: LD_INT 30
82586: PUSH
82587: LD_INT 28
82589: PUSH
82590: EMPTY
82591: LIST
82592: LIST
82593: PUSH
82594: EMPTY
82595: LIST
82596: LIST
82597: LIST
82598: LIST
82599: PUSH
82600: EMPTY
82601: LIST
82602: LIST
82603: PPUSH
82604: CALL_OW 69
82608: ST_TO_ADDR
// if not tmp then
82609: LD_VAR 0 2
82613: NOT
82614: IFFALSE 82618
// exit ;
82616: GO 82647
// for i in tmp do
82618: LD_ADDR_VAR 0 1
82622: PUSH
82623: LD_VAR 0 2
82627: PUSH
82628: FOR_IN
82629: IFFALSE 82645
// SetLives ( i , 1 ) ;
82631: LD_VAR 0 1
82635: PPUSH
82636: LD_INT 1
82638: PPUSH
82639: CALL_OW 234
82643: GO 82628
82645: POP
82646: POP
// end ;
82647: PPOPN 2
82649: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
82650: LD_EXP 64
82654: PUSH
82655: LD_EXP 113
82659: AND
82660: IFFALSE 82947
82662: GO 82664
82664: DISABLE
82665: LD_INT 0
82667: PPUSH
82668: PPUSH
82669: PPUSH
// begin i := rand ( 1 , 7 ) ;
82670: LD_ADDR_VAR 0 1
82674: PUSH
82675: LD_INT 1
82677: PPUSH
82678: LD_INT 7
82680: PPUSH
82681: CALL_OW 12
82685: ST_TO_ADDR
// case i of 1 :
82686: LD_VAR 0 1
82690: PUSH
82691: LD_INT 1
82693: DOUBLE
82694: EQUAL
82695: IFTRUE 82699
82697: GO 82709
82699: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
82700: LD_STRING earthquake(getX(game), 0, 32)
82702: PPUSH
82703: CALL_OW 559
82707: GO 82947
82709: LD_INT 2
82711: DOUBLE
82712: EQUAL
82713: IFTRUE 82717
82715: GO 82731
82717: POP
// begin ToLua ( displayStucuk(); ) ;
82718: LD_STRING displayStucuk();
82720: PPUSH
82721: CALL_OW 559
// ResetFog ;
82725: CALL_OW 335
// end ; 3 :
82729: GO 82947
82731: LD_INT 3
82733: DOUBLE
82734: EQUAL
82735: IFTRUE 82739
82737: GO 82843
82739: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82740: LD_ADDR_VAR 0 2
82744: PUSH
82745: LD_INT 22
82747: PUSH
82748: LD_OWVAR 2
82752: PUSH
82753: EMPTY
82754: LIST
82755: LIST
82756: PUSH
82757: LD_INT 25
82759: PUSH
82760: LD_INT 1
82762: PUSH
82763: EMPTY
82764: LIST
82765: LIST
82766: PUSH
82767: EMPTY
82768: LIST
82769: LIST
82770: PPUSH
82771: CALL_OW 69
82775: ST_TO_ADDR
// if not tmp then
82776: LD_VAR 0 2
82780: NOT
82781: IFFALSE 82785
// exit ;
82783: GO 82947
// un := tmp [ rand ( 1 , tmp ) ] ;
82785: LD_ADDR_VAR 0 3
82789: PUSH
82790: LD_VAR 0 2
82794: PUSH
82795: LD_INT 1
82797: PPUSH
82798: LD_VAR 0 2
82802: PPUSH
82803: CALL_OW 12
82807: ARRAY
82808: ST_TO_ADDR
// if Crawls ( un ) then
82809: LD_VAR 0 3
82813: PPUSH
82814: CALL_OW 318
82818: IFFALSE 82829
// ComWalk ( un ) ;
82820: LD_VAR 0 3
82824: PPUSH
82825: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82829: LD_VAR 0 3
82833: PPUSH
82834: LD_INT 8
82836: PPUSH
82837: CALL_OW 336
// end ; 4 :
82841: GO 82947
82843: LD_INT 4
82845: DOUBLE
82846: EQUAL
82847: IFTRUE 82851
82849: GO 82925
82851: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82852: LD_ADDR_VAR 0 2
82856: PUSH
82857: LD_INT 22
82859: PUSH
82860: LD_OWVAR 2
82864: PUSH
82865: EMPTY
82866: LIST
82867: LIST
82868: PUSH
82869: LD_INT 30
82871: PUSH
82872: LD_INT 29
82874: PUSH
82875: EMPTY
82876: LIST
82877: LIST
82878: PUSH
82879: EMPTY
82880: LIST
82881: LIST
82882: PPUSH
82883: CALL_OW 69
82887: ST_TO_ADDR
// if not tmp then
82888: LD_VAR 0 2
82892: NOT
82893: IFFALSE 82897
// exit ;
82895: GO 82947
// CenterNowOnUnits ( tmp [ 1 ] ) ;
82897: LD_VAR 0 2
82901: PUSH
82902: LD_INT 1
82904: ARRAY
82905: PPUSH
82906: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
82910: LD_VAR 0 2
82914: PUSH
82915: LD_INT 1
82917: ARRAY
82918: PPUSH
82919: CALL_OW 65
// end ; 5 .. 7 :
82923: GO 82947
82925: LD_INT 5
82927: DOUBLE
82928: GREATEREQUAL
82929: IFFALSE 82937
82931: LD_INT 7
82933: DOUBLE
82934: LESSEQUAL
82935: IFTRUE 82939
82937: GO 82946
82939: POP
// StreamSibBomb ; end ;
82940: CALL 79184 0 0
82944: GO 82947
82946: POP
// end ;
82947: PPOPN 3
82949: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82950: LD_EXP 64
82954: PUSH
82955: LD_EXP 114
82959: AND
82960: IFFALSE 83116
82962: GO 82964
82964: DISABLE
82965: LD_INT 0
82967: PPUSH
82968: PPUSH
82969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82970: LD_ADDR_VAR 0 2
82974: PUSH
82975: LD_INT 81
82977: PUSH
82978: LD_OWVAR 2
82982: PUSH
82983: EMPTY
82984: LIST
82985: LIST
82986: PUSH
82987: LD_INT 2
82989: PUSH
82990: LD_INT 21
82992: PUSH
82993: LD_INT 1
82995: PUSH
82996: EMPTY
82997: LIST
82998: LIST
82999: PUSH
83000: LD_INT 21
83002: PUSH
83003: LD_INT 2
83005: PUSH
83006: EMPTY
83007: LIST
83008: LIST
83009: PUSH
83010: EMPTY
83011: LIST
83012: LIST
83013: LIST
83014: PUSH
83015: EMPTY
83016: LIST
83017: LIST
83018: PPUSH
83019: CALL_OW 69
83023: ST_TO_ADDR
// if not tmp then
83024: LD_VAR 0 2
83028: NOT
83029: IFFALSE 83033
// exit ;
83031: GO 83116
// p := 0 ;
83033: LD_ADDR_VAR 0 3
83037: PUSH
83038: LD_INT 0
83040: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83041: LD_INT 35
83043: PPUSH
83044: CALL_OW 67
// p := p + 1 ;
83048: LD_ADDR_VAR 0 3
83052: PUSH
83053: LD_VAR 0 3
83057: PUSH
83058: LD_INT 1
83060: PLUS
83061: ST_TO_ADDR
// for i in tmp do
83062: LD_ADDR_VAR 0 1
83066: PUSH
83067: LD_VAR 0 2
83071: PUSH
83072: FOR_IN
83073: IFFALSE 83104
// if GetLives ( i ) < 1000 then
83075: LD_VAR 0 1
83079: PPUSH
83080: CALL_OW 256
83084: PUSH
83085: LD_INT 1000
83087: LESS
83088: IFFALSE 83102
// SetLives ( i , 1000 ) ;
83090: LD_VAR 0 1
83094: PPUSH
83095: LD_INT 1000
83097: PPUSH
83098: CALL_OW 234
83102: GO 83072
83104: POP
83105: POP
// until p > 20 ;
83106: LD_VAR 0 3
83110: PUSH
83111: LD_INT 20
83113: GREATER
83114: IFFALSE 83041
// end ;
83116: PPOPN 3
83118: END
// every 0 0$1 trigger StreamModeActive and sTime do
83119: LD_EXP 64
83123: PUSH
83124: LD_EXP 115
83128: AND
83129: IFFALSE 83164
83131: GO 83133
83133: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
83134: LD_INT 28
83136: PPUSH
83137: LD_OWVAR 2
83141: PPUSH
83142: LD_INT 2
83144: PPUSH
83145: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
83149: LD_INT 30
83151: PPUSH
83152: LD_OWVAR 2
83156: PPUSH
83157: LD_INT 2
83159: PPUSH
83160: CALL_OW 322
// end ;
83164: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
83165: LD_EXP 64
83169: PUSH
83170: LD_EXP 116
83174: AND
83175: IFFALSE 83296
83177: GO 83179
83179: DISABLE
83180: LD_INT 0
83182: PPUSH
83183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83184: LD_ADDR_VAR 0 2
83188: PUSH
83189: LD_INT 22
83191: PUSH
83192: LD_OWVAR 2
83196: PUSH
83197: EMPTY
83198: LIST
83199: LIST
83200: PUSH
83201: LD_INT 21
83203: PUSH
83204: LD_INT 1
83206: PUSH
83207: EMPTY
83208: LIST
83209: LIST
83210: PUSH
83211: LD_INT 3
83213: PUSH
83214: LD_INT 23
83216: PUSH
83217: LD_INT 0
83219: PUSH
83220: EMPTY
83221: LIST
83222: LIST
83223: PUSH
83224: EMPTY
83225: LIST
83226: LIST
83227: PUSH
83228: EMPTY
83229: LIST
83230: LIST
83231: LIST
83232: PPUSH
83233: CALL_OW 69
83237: ST_TO_ADDR
// if not tmp then
83238: LD_VAR 0 2
83242: NOT
83243: IFFALSE 83247
// exit ;
83245: GO 83296
// for i in tmp do
83247: LD_ADDR_VAR 0 1
83251: PUSH
83252: LD_VAR 0 2
83256: PUSH
83257: FOR_IN
83258: IFFALSE 83294
// begin if Crawls ( i ) then
83260: LD_VAR 0 1
83264: PPUSH
83265: CALL_OW 318
83269: IFFALSE 83280
// ComWalk ( i ) ;
83271: LD_VAR 0 1
83275: PPUSH
83276: CALL_OW 138
// SetClass ( i , 2 ) ;
83280: LD_VAR 0 1
83284: PPUSH
83285: LD_INT 2
83287: PPUSH
83288: CALL_OW 336
// end ;
83292: GO 83257
83294: POP
83295: POP
// end ;
83296: PPOPN 2
83298: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
83299: LD_EXP 64
83303: PUSH
83304: LD_EXP 117
83308: AND
83309: IFFALSE 83597
83311: GO 83313
83313: DISABLE
83314: LD_INT 0
83316: PPUSH
83317: PPUSH
83318: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
83319: LD_OWVAR 2
83323: PPUSH
83324: LD_INT 9
83326: PPUSH
83327: LD_INT 1
83329: PPUSH
83330: LD_INT 1
83332: PPUSH
83333: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
83337: LD_INT 9
83339: PPUSH
83340: LD_OWVAR 2
83344: PPUSH
83345: CALL_OW 343
// uc_side := 9 ;
83349: LD_ADDR_OWVAR 20
83353: PUSH
83354: LD_INT 9
83356: ST_TO_ADDR
// uc_nation := 2 ;
83357: LD_ADDR_OWVAR 21
83361: PUSH
83362: LD_INT 2
83364: ST_TO_ADDR
// hc_name := Dark Warrior ;
83365: LD_ADDR_OWVAR 26
83369: PUSH
83370: LD_STRING Dark Warrior
83372: ST_TO_ADDR
// hc_gallery :=  ;
83373: LD_ADDR_OWVAR 33
83377: PUSH
83378: LD_STRING 
83380: ST_TO_ADDR
// hc_noskilllimit := true ;
83381: LD_ADDR_OWVAR 76
83385: PUSH
83386: LD_INT 1
83388: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
83389: LD_ADDR_OWVAR 31
83393: PUSH
83394: LD_INT 30
83396: PUSH
83397: LD_INT 30
83399: PUSH
83400: LD_INT 30
83402: PUSH
83403: LD_INT 30
83405: PUSH
83406: EMPTY
83407: LIST
83408: LIST
83409: LIST
83410: LIST
83411: ST_TO_ADDR
// un := CreateHuman ;
83412: LD_ADDR_VAR 0 3
83416: PUSH
83417: CALL_OW 44
83421: ST_TO_ADDR
// hc_noskilllimit := false ;
83422: LD_ADDR_OWVAR 76
83426: PUSH
83427: LD_INT 0
83429: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83430: LD_VAR 0 3
83434: PPUSH
83435: LD_INT 1
83437: PPUSH
83438: CALL_OW 51
// ToLua ( playRanger() ) ;
83442: LD_STRING playRanger()
83444: PPUSH
83445: CALL_OW 559
// p := 0 ;
83449: LD_ADDR_VAR 0 2
83453: PUSH
83454: LD_INT 0
83456: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83457: LD_INT 35
83459: PPUSH
83460: CALL_OW 67
// p := p + 1 ;
83464: LD_ADDR_VAR 0 2
83468: PUSH
83469: LD_VAR 0 2
83473: PUSH
83474: LD_INT 1
83476: PLUS
83477: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
83478: LD_VAR 0 3
83482: PPUSH
83483: CALL_OW 256
83487: PUSH
83488: LD_INT 1000
83490: LESS
83491: IFFALSE 83505
// SetLives ( un , 1000 ) ;
83493: LD_VAR 0 3
83497: PPUSH
83498: LD_INT 1000
83500: PPUSH
83501: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
83505: LD_VAR 0 3
83509: PPUSH
83510: LD_INT 81
83512: PUSH
83513: LD_OWVAR 2
83517: PUSH
83518: EMPTY
83519: LIST
83520: LIST
83521: PUSH
83522: LD_INT 91
83524: PUSH
83525: LD_VAR 0 3
83529: PUSH
83530: LD_INT 30
83532: PUSH
83533: EMPTY
83534: LIST
83535: LIST
83536: LIST
83537: PUSH
83538: EMPTY
83539: LIST
83540: LIST
83541: PPUSH
83542: CALL_OW 69
83546: PPUSH
83547: LD_VAR 0 3
83551: PPUSH
83552: CALL_OW 74
83556: PPUSH
83557: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
83561: LD_VAR 0 2
83565: PUSH
83566: LD_INT 80
83568: GREATER
83569: PUSH
83570: LD_VAR 0 3
83574: PPUSH
83575: CALL_OW 301
83579: OR
83580: IFFALSE 83457
// if un then
83582: LD_VAR 0 3
83586: IFFALSE 83597
// RemoveUnit ( un ) ;
83588: LD_VAR 0 3
83592: PPUSH
83593: CALL_OW 64
// end ;
83597: PPOPN 3
83599: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
83600: LD_EXP 118
83604: IFFALSE 83720
83606: GO 83608
83608: DISABLE
83609: LD_INT 0
83611: PPUSH
83612: PPUSH
83613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
83614: LD_ADDR_VAR 0 2
83618: PUSH
83619: LD_INT 81
83621: PUSH
83622: LD_OWVAR 2
83626: PUSH
83627: EMPTY
83628: LIST
83629: LIST
83630: PUSH
83631: LD_INT 21
83633: PUSH
83634: LD_INT 1
83636: PUSH
83637: EMPTY
83638: LIST
83639: LIST
83640: PUSH
83641: EMPTY
83642: LIST
83643: LIST
83644: PPUSH
83645: CALL_OW 69
83649: ST_TO_ADDR
// ToLua ( playComputer() ) ;
83650: LD_STRING playComputer()
83652: PPUSH
83653: CALL_OW 559
// if not tmp then
83657: LD_VAR 0 2
83661: NOT
83662: IFFALSE 83666
// exit ;
83664: GO 83720
// for i in tmp do
83666: LD_ADDR_VAR 0 1
83670: PUSH
83671: LD_VAR 0 2
83675: PUSH
83676: FOR_IN
83677: IFFALSE 83718
// for j := 1 to 4 do
83679: LD_ADDR_VAR 0 3
83683: PUSH
83684: DOUBLE
83685: LD_INT 1
83687: DEC
83688: ST_TO_ADDR
83689: LD_INT 4
83691: PUSH
83692: FOR_TO
83693: IFFALSE 83714
// SetSkill ( i , j , 10 ) ;
83695: LD_VAR 0 1
83699: PPUSH
83700: LD_VAR 0 3
83704: PPUSH
83705: LD_INT 10
83707: PPUSH
83708: CALL_OW 237
83712: GO 83692
83714: POP
83715: POP
83716: GO 83676
83718: POP
83719: POP
// end ;
83720: PPOPN 3
83722: END
// every 0 0$1 trigger s30 do var i , tmp ;
83723: LD_EXP 119
83727: IFFALSE 83796
83729: GO 83731
83731: DISABLE
83732: LD_INT 0
83734: PPUSH
83735: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83736: LD_ADDR_VAR 0 2
83740: PUSH
83741: LD_INT 22
83743: PUSH
83744: LD_OWVAR 2
83748: PUSH
83749: EMPTY
83750: LIST
83751: LIST
83752: PPUSH
83753: CALL_OW 69
83757: ST_TO_ADDR
// if not tmp then
83758: LD_VAR 0 2
83762: NOT
83763: IFFALSE 83767
// exit ;
83765: GO 83796
// for i in tmp do
83767: LD_ADDR_VAR 0 1
83771: PUSH
83772: LD_VAR 0 2
83776: PUSH
83777: FOR_IN
83778: IFFALSE 83794
// SetLives ( i , 300 ) ;
83780: LD_VAR 0 1
83784: PPUSH
83785: LD_INT 300
83787: PPUSH
83788: CALL_OW 234
83792: GO 83777
83794: POP
83795: POP
// end ;
83796: PPOPN 2
83798: END
// every 0 0$1 trigger s60 do var i , tmp ;
83799: LD_EXP 120
83803: IFFALSE 83872
83805: GO 83807
83807: DISABLE
83808: LD_INT 0
83810: PPUSH
83811: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83812: LD_ADDR_VAR 0 2
83816: PUSH
83817: LD_INT 22
83819: PUSH
83820: LD_OWVAR 2
83824: PUSH
83825: EMPTY
83826: LIST
83827: LIST
83828: PPUSH
83829: CALL_OW 69
83833: ST_TO_ADDR
// if not tmp then
83834: LD_VAR 0 2
83838: NOT
83839: IFFALSE 83843
// exit ;
83841: GO 83872
// for i in tmp do
83843: LD_ADDR_VAR 0 1
83847: PUSH
83848: LD_VAR 0 2
83852: PUSH
83853: FOR_IN
83854: IFFALSE 83870
// SetLives ( i , 600 ) ;
83856: LD_VAR 0 1
83860: PPUSH
83861: LD_INT 600
83863: PPUSH
83864: CALL_OW 234
83868: GO 83853
83870: POP
83871: POP
// end ;
83872: PPOPN 2
83874: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
83875: LD_INT 0
83877: PPUSH
// case cmd of 301 :
83878: LD_VAR 0 1
83882: PUSH
83883: LD_INT 301
83885: DOUBLE
83886: EQUAL
83887: IFTRUE 83891
83889: GO 83923
83891: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
83892: LD_VAR 0 6
83896: PPUSH
83897: LD_VAR 0 7
83901: PPUSH
83902: LD_VAR 0 8
83906: PPUSH
83907: LD_VAR 0 4
83911: PPUSH
83912: LD_VAR 0 5
83916: PPUSH
83917: CALL 85132 0 5
83921: GO 84044
83923: LD_INT 302
83925: DOUBLE
83926: EQUAL
83927: IFTRUE 83931
83929: GO 83968
83931: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
83932: LD_VAR 0 6
83936: PPUSH
83937: LD_VAR 0 7
83941: PPUSH
83942: LD_VAR 0 8
83946: PPUSH
83947: LD_VAR 0 9
83951: PPUSH
83952: LD_VAR 0 4
83956: PPUSH
83957: LD_VAR 0 5
83961: PPUSH
83962: CALL 85223 0 6
83966: GO 84044
83968: LD_INT 303
83970: DOUBLE
83971: EQUAL
83972: IFTRUE 83976
83974: GO 84013
83976: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83977: LD_VAR 0 6
83981: PPUSH
83982: LD_VAR 0 7
83986: PPUSH
83987: LD_VAR 0 8
83991: PPUSH
83992: LD_VAR 0 9
83996: PPUSH
83997: LD_VAR 0 4
84001: PPUSH
84002: LD_VAR 0 5
84006: PPUSH
84007: CALL 84049 0 6
84011: GO 84044
84013: LD_INT 304
84015: DOUBLE
84016: EQUAL
84017: IFTRUE 84021
84019: GO 84043
84021: POP
// hHackTeleport ( unit , x , y ) ; end ;
84022: LD_VAR 0 2
84026: PPUSH
84027: LD_VAR 0 4
84031: PPUSH
84032: LD_VAR 0 5
84036: PPUSH
84037: CALL 85816 0 3
84041: GO 84044
84043: POP
// end ;
84044: LD_VAR 0 12
84048: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
84049: LD_INT 0
84051: PPUSH
84052: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
84053: LD_VAR 0 1
84057: PUSH
84058: LD_INT 1
84060: LESS
84061: PUSH
84062: LD_VAR 0 1
84066: PUSH
84067: LD_INT 3
84069: GREATER
84070: OR
84071: PUSH
84072: LD_VAR 0 5
84076: PPUSH
84077: LD_VAR 0 6
84081: PPUSH
84082: CALL_OW 428
84086: OR
84087: IFFALSE 84091
// exit ;
84089: GO 84819
// uc_side := your_side ;
84091: LD_ADDR_OWVAR 20
84095: PUSH
84096: LD_OWVAR 2
84100: ST_TO_ADDR
// uc_nation := nation ;
84101: LD_ADDR_OWVAR 21
84105: PUSH
84106: LD_VAR 0 1
84110: ST_TO_ADDR
// bc_level = 1 ;
84111: LD_ADDR_OWVAR 43
84115: PUSH
84116: LD_INT 1
84118: ST_TO_ADDR
// case btype of 1 :
84119: LD_VAR 0 2
84123: PUSH
84124: LD_INT 1
84126: DOUBLE
84127: EQUAL
84128: IFTRUE 84132
84130: GO 84143
84132: POP
// bc_type := b_depot ; 2 :
84133: LD_ADDR_OWVAR 42
84137: PUSH
84138: LD_INT 0
84140: ST_TO_ADDR
84141: GO 84763
84143: LD_INT 2
84145: DOUBLE
84146: EQUAL
84147: IFTRUE 84151
84149: GO 84162
84151: POP
// bc_type := b_warehouse ; 3 :
84152: LD_ADDR_OWVAR 42
84156: PUSH
84157: LD_INT 1
84159: ST_TO_ADDR
84160: GO 84763
84162: LD_INT 3
84164: DOUBLE
84165: EQUAL
84166: IFTRUE 84170
84168: GO 84181
84170: POP
// bc_type := b_lab ; 4 .. 9 :
84171: LD_ADDR_OWVAR 42
84175: PUSH
84176: LD_INT 6
84178: ST_TO_ADDR
84179: GO 84763
84181: LD_INT 4
84183: DOUBLE
84184: GREATEREQUAL
84185: IFFALSE 84193
84187: LD_INT 9
84189: DOUBLE
84190: LESSEQUAL
84191: IFTRUE 84195
84193: GO 84255
84195: POP
// begin bc_type := b_lab_half ;
84196: LD_ADDR_OWVAR 42
84200: PUSH
84201: LD_INT 7
84203: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
84204: LD_ADDR_OWVAR 44
84208: PUSH
84209: LD_INT 10
84211: PUSH
84212: LD_INT 11
84214: PUSH
84215: LD_INT 12
84217: PUSH
84218: LD_INT 15
84220: PUSH
84221: LD_INT 14
84223: PUSH
84224: LD_INT 13
84226: PUSH
84227: EMPTY
84228: LIST
84229: LIST
84230: LIST
84231: LIST
84232: LIST
84233: LIST
84234: PUSH
84235: LD_VAR 0 2
84239: PUSH
84240: LD_INT 3
84242: MINUS
84243: ARRAY
84244: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
84245: LD_ADDR_OWVAR 45
84249: PUSH
84250: LD_INT 9
84252: ST_TO_ADDR
// end ; 10 .. 13 :
84253: GO 84763
84255: LD_INT 10
84257: DOUBLE
84258: GREATEREQUAL
84259: IFFALSE 84267
84261: LD_INT 13
84263: DOUBLE
84264: LESSEQUAL
84265: IFTRUE 84269
84267: GO 84346
84269: POP
// begin bc_type := b_lab_full ;
84270: LD_ADDR_OWVAR 42
84274: PUSH
84275: LD_INT 8
84277: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
84278: LD_ADDR_OWVAR 44
84282: PUSH
84283: LD_INT 10
84285: PUSH
84286: LD_INT 12
84288: PUSH
84289: LD_INT 14
84291: PUSH
84292: LD_INT 13
84294: PUSH
84295: EMPTY
84296: LIST
84297: LIST
84298: LIST
84299: LIST
84300: PUSH
84301: LD_VAR 0 2
84305: PUSH
84306: LD_INT 9
84308: MINUS
84309: ARRAY
84310: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
84311: LD_ADDR_OWVAR 45
84315: PUSH
84316: LD_INT 11
84318: PUSH
84319: LD_INT 15
84321: PUSH
84322: LD_INT 12
84324: PUSH
84325: LD_INT 15
84327: PUSH
84328: EMPTY
84329: LIST
84330: LIST
84331: LIST
84332: LIST
84333: PUSH
84334: LD_VAR 0 2
84338: PUSH
84339: LD_INT 9
84341: MINUS
84342: ARRAY
84343: ST_TO_ADDR
// end ; 14 :
84344: GO 84763
84346: LD_INT 14
84348: DOUBLE
84349: EQUAL
84350: IFTRUE 84354
84352: GO 84365
84354: POP
// bc_type := b_workshop ; 15 :
84355: LD_ADDR_OWVAR 42
84359: PUSH
84360: LD_INT 2
84362: ST_TO_ADDR
84363: GO 84763
84365: LD_INT 15
84367: DOUBLE
84368: EQUAL
84369: IFTRUE 84373
84371: GO 84384
84373: POP
// bc_type := b_factory ; 16 :
84374: LD_ADDR_OWVAR 42
84378: PUSH
84379: LD_INT 3
84381: ST_TO_ADDR
84382: GO 84763
84384: LD_INT 16
84386: DOUBLE
84387: EQUAL
84388: IFTRUE 84392
84390: GO 84403
84392: POP
// bc_type := b_ext_gun ; 17 :
84393: LD_ADDR_OWVAR 42
84397: PUSH
84398: LD_INT 17
84400: ST_TO_ADDR
84401: GO 84763
84403: LD_INT 17
84405: DOUBLE
84406: EQUAL
84407: IFTRUE 84411
84409: GO 84439
84411: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
84412: LD_ADDR_OWVAR 42
84416: PUSH
84417: LD_INT 19
84419: PUSH
84420: LD_INT 23
84422: PUSH
84423: LD_INT 19
84425: PUSH
84426: EMPTY
84427: LIST
84428: LIST
84429: LIST
84430: PUSH
84431: LD_VAR 0 1
84435: ARRAY
84436: ST_TO_ADDR
84437: GO 84763
84439: LD_INT 18
84441: DOUBLE
84442: EQUAL
84443: IFTRUE 84447
84445: GO 84458
84447: POP
// bc_type := b_ext_radar ; 19 :
84448: LD_ADDR_OWVAR 42
84452: PUSH
84453: LD_INT 20
84455: ST_TO_ADDR
84456: GO 84763
84458: LD_INT 19
84460: DOUBLE
84461: EQUAL
84462: IFTRUE 84466
84464: GO 84477
84466: POP
// bc_type := b_ext_radio ; 20 :
84467: LD_ADDR_OWVAR 42
84471: PUSH
84472: LD_INT 22
84474: ST_TO_ADDR
84475: GO 84763
84477: LD_INT 20
84479: DOUBLE
84480: EQUAL
84481: IFTRUE 84485
84483: GO 84496
84485: POP
// bc_type := b_ext_siberium ; 21 :
84486: LD_ADDR_OWVAR 42
84490: PUSH
84491: LD_INT 21
84493: ST_TO_ADDR
84494: GO 84763
84496: LD_INT 21
84498: DOUBLE
84499: EQUAL
84500: IFTRUE 84504
84502: GO 84515
84504: POP
// bc_type := b_ext_computer ; 22 :
84505: LD_ADDR_OWVAR 42
84509: PUSH
84510: LD_INT 24
84512: ST_TO_ADDR
84513: GO 84763
84515: LD_INT 22
84517: DOUBLE
84518: EQUAL
84519: IFTRUE 84523
84521: GO 84534
84523: POP
// bc_type := b_ext_track ; 23 :
84524: LD_ADDR_OWVAR 42
84528: PUSH
84529: LD_INT 16
84531: ST_TO_ADDR
84532: GO 84763
84534: LD_INT 23
84536: DOUBLE
84537: EQUAL
84538: IFTRUE 84542
84540: GO 84553
84542: POP
// bc_type := b_ext_laser ; 24 :
84543: LD_ADDR_OWVAR 42
84547: PUSH
84548: LD_INT 25
84550: ST_TO_ADDR
84551: GO 84763
84553: LD_INT 24
84555: DOUBLE
84556: EQUAL
84557: IFTRUE 84561
84559: GO 84572
84561: POP
// bc_type := b_control_tower ; 25 :
84562: LD_ADDR_OWVAR 42
84566: PUSH
84567: LD_INT 36
84569: ST_TO_ADDR
84570: GO 84763
84572: LD_INT 25
84574: DOUBLE
84575: EQUAL
84576: IFTRUE 84580
84578: GO 84591
84580: POP
// bc_type := b_breastwork ; 26 :
84581: LD_ADDR_OWVAR 42
84585: PUSH
84586: LD_INT 31
84588: ST_TO_ADDR
84589: GO 84763
84591: LD_INT 26
84593: DOUBLE
84594: EQUAL
84595: IFTRUE 84599
84597: GO 84610
84599: POP
// bc_type := b_bunker ; 27 :
84600: LD_ADDR_OWVAR 42
84604: PUSH
84605: LD_INT 32
84607: ST_TO_ADDR
84608: GO 84763
84610: LD_INT 27
84612: DOUBLE
84613: EQUAL
84614: IFTRUE 84618
84616: GO 84629
84618: POP
// bc_type := b_turret ; 28 :
84619: LD_ADDR_OWVAR 42
84623: PUSH
84624: LD_INT 33
84626: ST_TO_ADDR
84627: GO 84763
84629: LD_INT 28
84631: DOUBLE
84632: EQUAL
84633: IFTRUE 84637
84635: GO 84648
84637: POP
// bc_type := b_armoury ; 29 :
84638: LD_ADDR_OWVAR 42
84642: PUSH
84643: LD_INT 4
84645: ST_TO_ADDR
84646: GO 84763
84648: LD_INT 29
84650: DOUBLE
84651: EQUAL
84652: IFTRUE 84656
84654: GO 84667
84656: POP
// bc_type := b_barracks ; 30 :
84657: LD_ADDR_OWVAR 42
84661: PUSH
84662: LD_INT 5
84664: ST_TO_ADDR
84665: GO 84763
84667: LD_INT 30
84669: DOUBLE
84670: EQUAL
84671: IFTRUE 84675
84673: GO 84686
84675: POP
// bc_type := b_solar_power ; 31 :
84676: LD_ADDR_OWVAR 42
84680: PUSH
84681: LD_INT 27
84683: ST_TO_ADDR
84684: GO 84763
84686: LD_INT 31
84688: DOUBLE
84689: EQUAL
84690: IFTRUE 84694
84692: GO 84705
84694: POP
// bc_type := b_oil_power ; 32 :
84695: LD_ADDR_OWVAR 42
84699: PUSH
84700: LD_INT 26
84702: ST_TO_ADDR
84703: GO 84763
84705: LD_INT 32
84707: DOUBLE
84708: EQUAL
84709: IFTRUE 84713
84711: GO 84724
84713: POP
// bc_type := b_siberite_power ; 33 :
84714: LD_ADDR_OWVAR 42
84718: PUSH
84719: LD_INT 28
84721: ST_TO_ADDR
84722: GO 84763
84724: LD_INT 33
84726: DOUBLE
84727: EQUAL
84728: IFTRUE 84732
84730: GO 84743
84732: POP
// bc_type := b_oil_mine ; 34 :
84733: LD_ADDR_OWVAR 42
84737: PUSH
84738: LD_INT 29
84740: ST_TO_ADDR
84741: GO 84763
84743: LD_INT 34
84745: DOUBLE
84746: EQUAL
84747: IFTRUE 84751
84749: GO 84762
84751: POP
// bc_type := b_siberite_mine ; end ;
84752: LD_ADDR_OWVAR 42
84756: PUSH
84757: LD_INT 30
84759: ST_TO_ADDR
84760: GO 84763
84762: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
84763: LD_ADDR_VAR 0 8
84767: PUSH
84768: LD_VAR 0 5
84772: PPUSH
84773: LD_VAR 0 6
84777: PPUSH
84778: LD_VAR 0 3
84782: PPUSH
84783: CALL_OW 47
84787: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
84788: LD_OWVAR 42
84792: PUSH
84793: LD_INT 32
84795: PUSH
84796: LD_INT 33
84798: PUSH
84799: EMPTY
84800: LIST
84801: LIST
84802: IN
84803: IFFALSE 84819
// PlaceWeaponTurret ( b , weapon ) ;
84805: LD_VAR 0 8
84809: PPUSH
84810: LD_VAR 0 4
84814: PPUSH
84815: CALL_OW 431
// end ;
84819: LD_VAR 0 7
84823: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
84824: LD_INT 0
84826: PPUSH
84827: PPUSH
84828: PPUSH
84829: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84830: LD_ADDR_VAR 0 4
84834: PUSH
84835: LD_INT 22
84837: PUSH
84838: LD_OWVAR 2
84842: PUSH
84843: EMPTY
84844: LIST
84845: LIST
84846: PUSH
84847: LD_INT 2
84849: PUSH
84850: LD_INT 30
84852: PUSH
84853: LD_INT 0
84855: PUSH
84856: EMPTY
84857: LIST
84858: LIST
84859: PUSH
84860: LD_INT 30
84862: PUSH
84863: LD_INT 1
84865: PUSH
84866: EMPTY
84867: LIST
84868: LIST
84869: PUSH
84870: EMPTY
84871: LIST
84872: LIST
84873: LIST
84874: PUSH
84875: EMPTY
84876: LIST
84877: LIST
84878: PPUSH
84879: CALL_OW 69
84883: ST_TO_ADDR
// if not tmp then
84884: LD_VAR 0 4
84888: NOT
84889: IFFALSE 84893
// exit ;
84891: GO 84952
// for i in tmp do
84893: LD_ADDR_VAR 0 2
84897: PUSH
84898: LD_VAR 0 4
84902: PUSH
84903: FOR_IN
84904: IFFALSE 84950
// for j = 1 to 3 do
84906: LD_ADDR_VAR 0 3
84910: PUSH
84911: DOUBLE
84912: LD_INT 1
84914: DEC
84915: ST_TO_ADDR
84916: LD_INT 3
84918: PUSH
84919: FOR_TO
84920: IFFALSE 84946
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
84922: LD_VAR 0 2
84926: PPUSH
84927: CALL_OW 274
84931: PPUSH
84932: LD_VAR 0 3
84936: PPUSH
84937: LD_INT 99999
84939: PPUSH
84940: CALL_OW 277
84944: GO 84919
84946: POP
84947: POP
84948: GO 84903
84950: POP
84951: POP
// end ;
84952: LD_VAR 0 1
84956: RET
// export function hHackSetLevel10 ; var i , j ; begin
84957: LD_INT 0
84959: PPUSH
84960: PPUSH
84961: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84962: LD_ADDR_VAR 0 2
84966: PUSH
84967: LD_INT 21
84969: PUSH
84970: LD_INT 1
84972: PUSH
84973: EMPTY
84974: LIST
84975: LIST
84976: PPUSH
84977: CALL_OW 69
84981: PUSH
84982: FOR_IN
84983: IFFALSE 85035
// if IsSelected ( i ) then
84985: LD_VAR 0 2
84989: PPUSH
84990: CALL_OW 306
84994: IFFALSE 85033
// begin for j := 1 to 4 do
84996: LD_ADDR_VAR 0 3
85000: PUSH
85001: DOUBLE
85002: LD_INT 1
85004: DEC
85005: ST_TO_ADDR
85006: LD_INT 4
85008: PUSH
85009: FOR_TO
85010: IFFALSE 85031
// SetSkill ( i , j , 10 ) ;
85012: LD_VAR 0 2
85016: PPUSH
85017: LD_VAR 0 3
85021: PPUSH
85022: LD_INT 10
85024: PPUSH
85025: CALL_OW 237
85029: GO 85009
85031: POP
85032: POP
// end ;
85033: GO 84982
85035: POP
85036: POP
// end ;
85037: LD_VAR 0 1
85041: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
85042: LD_INT 0
85044: PPUSH
85045: PPUSH
85046: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
85047: LD_ADDR_VAR 0 2
85051: PUSH
85052: LD_INT 22
85054: PUSH
85055: LD_OWVAR 2
85059: PUSH
85060: EMPTY
85061: LIST
85062: LIST
85063: PUSH
85064: LD_INT 21
85066: PUSH
85067: LD_INT 1
85069: PUSH
85070: EMPTY
85071: LIST
85072: LIST
85073: PUSH
85074: EMPTY
85075: LIST
85076: LIST
85077: PPUSH
85078: CALL_OW 69
85082: PUSH
85083: FOR_IN
85084: IFFALSE 85125
// begin for j := 1 to 4 do
85086: LD_ADDR_VAR 0 3
85090: PUSH
85091: DOUBLE
85092: LD_INT 1
85094: DEC
85095: ST_TO_ADDR
85096: LD_INT 4
85098: PUSH
85099: FOR_TO
85100: IFFALSE 85121
// SetSkill ( i , j , 10 ) ;
85102: LD_VAR 0 2
85106: PPUSH
85107: LD_VAR 0 3
85111: PPUSH
85112: LD_INT 10
85114: PPUSH
85115: CALL_OW 237
85119: GO 85099
85121: POP
85122: POP
// end ;
85123: GO 85083
85125: POP
85126: POP
// end ;
85127: LD_VAR 0 1
85131: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
85132: LD_INT 0
85134: PPUSH
// uc_side := your_side ;
85135: LD_ADDR_OWVAR 20
85139: PUSH
85140: LD_OWVAR 2
85144: ST_TO_ADDR
// uc_nation := nation ;
85145: LD_ADDR_OWVAR 21
85149: PUSH
85150: LD_VAR 0 1
85154: ST_TO_ADDR
// InitHc ;
85155: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
85159: LD_INT 0
85161: PPUSH
85162: LD_VAR 0 2
85166: PPUSH
85167: LD_VAR 0 3
85171: PPUSH
85172: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
85176: LD_VAR 0 4
85180: PPUSH
85181: LD_VAR 0 5
85185: PPUSH
85186: CALL_OW 428
85190: PUSH
85191: LD_INT 0
85193: EQUAL
85194: IFFALSE 85218
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
85196: CALL_OW 44
85200: PPUSH
85201: LD_VAR 0 4
85205: PPUSH
85206: LD_VAR 0 5
85210: PPUSH
85211: LD_INT 1
85213: PPUSH
85214: CALL_OW 48
// end ;
85218: LD_VAR 0 6
85222: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
85223: LD_INT 0
85225: PPUSH
85226: PPUSH
// uc_side := your_side ;
85227: LD_ADDR_OWVAR 20
85231: PUSH
85232: LD_OWVAR 2
85236: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
85237: LD_VAR 0 1
85241: PUSH
85242: LD_INT 1
85244: PUSH
85245: LD_INT 2
85247: PUSH
85248: LD_INT 3
85250: PUSH
85251: LD_INT 4
85253: PUSH
85254: LD_INT 5
85256: PUSH
85257: EMPTY
85258: LIST
85259: LIST
85260: LIST
85261: LIST
85262: LIST
85263: IN
85264: IFFALSE 85276
// uc_nation := nation_american else
85266: LD_ADDR_OWVAR 21
85270: PUSH
85271: LD_INT 1
85273: ST_TO_ADDR
85274: GO 85319
// if chassis in [ 11 , 12 , 13 , 14 ] then
85276: LD_VAR 0 1
85280: PUSH
85281: LD_INT 11
85283: PUSH
85284: LD_INT 12
85286: PUSH
85287: LD_INT 13
85289: PUSH
85290: LD_INT 14
85292: PUSH
85293: EMPTY
85294: LIST
85295: LIST
85296: LIST
85297: LIST
85298: IN
85299: IFFALSE 85311
// uc_nation := nation_arabian else
85301: LD_ADDR_OWVAR 21
85305: PUSH
85306: LD_INT 2
85308: ST_TO_ADDR
85309: GO 85319
// uc_nation := nation_russian ;
85311: LD_ADDR_OWVAR 21
85315: PUSH
85316: LD_INT 3
85318: ST_TO_ADDR
// vc_chassis := chassis ;
85319: LD_ADDR_OWVAR 37
85323: PUSH
85324: LD_VAR 0 1
85328: ST_TO_ADDR
// vc_engine := engine ;
85329: LD_ADDR_OWVAR 39
85333: PUSH
85334: LD_VAR 0 2
85338: ST_TO_ADDR
// vc_control := control ;
85339: LD_ADDR_OWVAR 38
85343: PUSH
85344: LD_VAR 0 3
85348: ST_TO_ADDR
// vc_weapon := weapon ;
85349: LD_ADDR_OWVAR 40
85353: PUSH
85354: LD_VAR 0 4
85358: ST_TO_ADDR
// un := CreateVehicle ;
85359: LD_ADDR_VAR 0 8
85363: PUSH
85364: CALL_OW 45
85368: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
85369: LD_VAR 0 8
85373: PPUSH
85374: LD_INT 0
85376: PPUSH
85377: LD_INT 5
85379: PPUSH
85380: CALL_OW 12
85384: PPUSH
85385: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
85389: LD_VAR 0 8
85393: PPUSH
85394: LD_VAR 0 5
85398: PPUSH
85399: LD_VAR 0 6
85403: PPUSH
85404: LD_INT 1
85406: PPUSH
85407: CALL_OW 48
// end ;
85411: LD_VAR 0 7
85415: RET
// export hInvincible ; every 1 do
85416: GO 85418
85418: DISABLE
// hInvincible := [ ] ;
85419: LD_ADDR_EXP 121
85423: PUSH
85424: EMPTY
85425: ST_TO_ADDR
85426: END
// every 10 do var i ;
85427: GO 85429
85429: DISABLE
85430: LD_INT 0
85432: PPUSH
// begin enable ;
85433: ENABLE
// if not hInvincible then
85434: LD_EXP 121
85438: NOT
85439: IFFALSE 85443
// exit ;
85441: GO 85487
// for i in hInvincible do
85443: LD_ADDR_VAR 0 1
85447: PUSH
85448: LD_EXP 121
85452: PUSH
85453: FOR_IN
85454: IFFALSE 85485
// if GetLives ( i ) < 1000 then
85456: LD_VAR 0 1
85460: PPUSH
85461: CALL_OW 256
85465: PUSH
85466: LD_INT 1000
85468: LESS
85469: IFFALSE 85483
// SetLives ( i , 1000 ) ;
85471: LD_VAR 0 1
85475: PPUSH
85476: LD_INT 1000
85478: PPUSH
85479: CALL_OW 234
85483: GO 85453
85485: POP
85486: POP
// end ;
85487: PPOPN 1
85489: END
// export function hHackInvincible ; var i ; begin
85490: LD_INT 0
85492: PPUSH
85493: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
85494: LD_ADDR_VAR 0 2
85498: PUSH
85499: LD_INT 2
85501: PUSH
85502: LD_INT 21
85504: PUSH
85505: LD_INT 1
85507: PUSH
85508: EMPTY
85509: LIST
85510: LIST
85511: PUSH
85512: LD_INT 21
85514: PUSH
85515: LD_INT 2
85517: PUSH
85518: EMPTY
85519: LIST
85520: LIST
85521: PUSH
85522: EMPTY
85523: LIST
85524: LIST
85525: LIST
85526: PPUSH
85527: CALL_OW 69
85531: PUSH
85532: FOR_IN
85533: IFFALSE 85594
// if IsSelected ( i ) then
85535: LD_VAR 0 2
85539: PPUSH
85540: CALL_OW 306
85544: IFFALSE 85592
// begin if i in hInvincible then
85546: LD_VAR 0 2
85550: PUSH
85551: LD_EXP 121
85555: IN
85556: IFFALSE 85576
// hInvincible := hInvincible diff i else
85558: LD_ADDR_EXP 121
85562: PUSH
85563: LD_EXP 121
85567: PUSH
85568: LD_VAR 0 2
85572: DIFF
85573: ST_TO_ADDR
85574: GO 85592
// hInvincible := hInvincible union i ;
85576: LD_ADDR_EXP 121
85580: PUSH
85581: LD_EXP 121
85585: PUSH
85586: LD_VAR 0 2
85590: UNION
85591: ST_TO_ADDR
// end ;
85592: GO 85532
85594: POP
85595: POP
// end ;
85596: LD_VAR 0 1
85600: RET
// export function hHackInvisible ; var i , j ; begin
85601: LD_INT 0
85603: PPUSH
85604: PPUSH
85605: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85606: LD_ADDR_VAR 0 2
85610: PUSH
85611: LD_INT 21
85613: PUSH
85614: LD_INT 1
85616: PUSH
85617: EMPTY
85618: LIST
85619: LIST
85620: PPUSH
85621: CALL_OW 69
85625: PUSH
85626: FOR_IN
85627: IFFALSE 85651
// if IsSelected ( i ) then
85629: LD_VAR 0 2
85633: PPUSH
85634: CALL_OW 306
85638: IFFALSE 85649
// ComForceInvisible ( i ) ;
85640: LD_VAR 0 2
85644: PPUSH
85645: CALL_OW 496
85649: GO 85626
85651: POP
85652: POP
// end ;
85653: LD_VAR 0 1
85657: RET
// export function hHackChangeYourSide ; begin
85658: LD_INT 0
85660: PPUSH
// if your_side = 8 then
85661: LD_OWVAR 2
85665: PUSH
85666: LD_INT 8
85668: EQUAL
85669: IFFALSE 85681
// your_side := 0 else
85671: LD_ADDR_OWVAR 2
85675: PUSH
85676: LD_INT 0
85678: ST_TO_ADDR
85679: GO 85695
// your_side := your_side + 1 ;
85681: LD_ADDR_OWVAR 2
85685: PUSH
85686: LD_OWVAR 2
85690: PUSH
85691: LD_INT 1
85693: PLUS
85694: ST_TO_ADDR
// end ;
85695: LD_VAR 0 1
85699: RET
// export function hHackChangeUnitSide ; var i , j ; begin
85700: LD_INT 0
85702: PPUSH
85703: PPUSH
85704: PPUSH
// for i in all_units do
85705: LD_ADDR_VAR 0 2
85709: PUSH
85710: LD_OWVAR 3
85714: PUSH
85715: FOR_IN
85716: IFFALSE 85794
// if IsSelected ( i ) then
85718: LD_VAR 0 2
85722: PPUSH
85723: CALL_OW 306
85727: IFFALSE 85792
// begin j := GetSide ( i ) ;
85729: LD_ADDR_VAR 0 3
85733: PUSH
85734: LD_VAR 0 2
85738: PPUSH
85739: CALL_OW 255
85743: ST_TO_ADDR
// if j = 8 then
85744: LD_VAR 0 3
85748: PUSH
85749: LD_INT 8
85751: EQUAL
85752: IFFALSE 85764
// j := 0 else
85754: LD_ADDR_VAR 0 3
85758: PUSH
85759: LD_INT 0
85761: ST_TO_ADDR
85762: GO 85778
// j := j + 1 ;
85764: LD_ADDR_VAR 0 3
85768: PUSH
85769: LD_VAR 0 3
85773: PUSH
85774: LD_INT 1
85776: PLUS
85777: ST_TO_ADDR
// SetSide ( i , j ) ;
85778: LD_VAR 0 2
85782: PPUSH
85783: LD_VAR 0 3
85787: PPUSH
85788: CALL_OW 235
// end ;
85792: GO 85715
85794: POP
85795: POP
// end ;
85796: LD_VAR 0 1
85800: RET
// export function hHackFog ; begin
85801: LD_INT 0
85803: PPUSH
// FogOff ( true ) ;
85804: LD_INT 1
85806: PPUSH
85807: CALL_OW 344
// end ;
85811: LD_VAR 0 1
85815: RET
// export function hHackTeleport ( unit , x , y ) ; begin
85816: LD_INT 0
85818: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
85819: LD_VAR 0 1
85823: PPUSH
85824: LD_VAR 0 2
85828: PPUSH
85829: LD_VAR 0 3
85833: PPUSH
85834: LD_INT 1
85836: PPUSH
85837: LD_INT 1
85839: PPUSH
85840: CALL_OW 483
// CenterOnXY ( x , y ) ;
85844: LD_VAR 0 2
85848: PPUSH
85849: LD_VAR 0 3
85853: PPUSH
85854: CALL_OW 84
// end ;
85858: LD_VAR 0 4
85862: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
85863: LD_INT 0
85865: PPUSH
85866: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
85867: LD_VAR 0 1
85871: NOT
85872: PUSH
85873: LD_VAR 0 2
85877: PPUSH
85878: LD_VAR 0 3
85882: PPUSH
85883: CALL_OW 488
85887: NOT
85888: OR
85889: PUSH
85890: LD_VAR 0 1
85894: PPUSH
85895: CALL_OW 266
85899: PUSH
85900: LD_INT 3
85902: NONEQUAL
85903: PUSH
85904: LD_VAR 0 1
85908: PPUSH
85909: CALL_OW 247
85913: PUSH
85914: LD_INT 1
85916: EQUAL
85917: NOT
85918: AND
85919: OR
85920: IFFALSE 85924
// exit ;
85922: GO 86073
// if GetType ( factory ) = unit_human then
85924: LD_VAR 0 1
85928: PPUSH
85929: CALL_OW 247
85933: PUSH
85934: LD_INT 1
85936: EQUAL
85937: IFFALSE 85954
// factory := IsInUnit ( factory ) ;
85939: LD_ADDR_VAR 0 1
85943: PUSH
85944: LD_VAR 0 1
85948: PPUSH
85949: CALL_OW 310
85953: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
85954: LD_VAR 0 1
85958: PPUSH
85959: CALL_OW 266
85963: PUSH
85964: LD_INT 3
85966: NONEQUAL
85967: IFFALSE 85971
// exit ;
85969: GO 86073
// if HexInfo ( x , y ) = factory then
85971: LD_VAR 0 2
85975: PPUSH
85976: LD_VAR 0 3
85980: PPUSH
85981: CALL_OW 428
85985: PUSH
85986: LD_VAR 0 1
85990: EQUAL
85991: IFFALSE 86018
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85993: LD_ADDR_EXP 122
85997: PUSH
85998: LD_EXP 122
86002: PPUSH
86003: LD_VAR 0 1
86007: PPUSH
86008: LD_INT 0
86010: PPUSH
86011: CALL_OW 1
86015: ST_TO_ADDR
86016: GO 86069
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
86018: LD_ADDR_EXP 122
86022: PUSH
86023: LD_EXP 122
86027: PPUSH
86028: LD_VAR 0 1
86032: PPUSH
86033: LD_VAR 0 1
86037: PPUSH
86038: CALL_OW 255
86042: PUSH
86043: LD_VAR 0 1
86047: PUSH
86048: LD_VAR 0 2
86052: PUSH
86053: LD_VAR 0 3
86057: PUSH
86058: EMPTY
86059: LIST
86060: LIST
86061: LIST
86062: LIST
86063: PPUSH
86064: CALL_OW 1
86068: ST_TO_ADDR
// UpdateFactoryWaypoints ;
86069: CALL 86078 0 0
// end ;
86073: LD_VAR 0 4
86077: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
86078: LD_INT 0
86080: PPUSH
86081: PPUSH
86082: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
86083: LD_STRING resetFactoryWaypoint();
86085: PPUSH
86086: CALL_OW 559
// if factoryWaypoints then
86090: LD_EXP 122
86094: IFFALSE 86220
// begin list := PrepareArray ( factoryWaypoints ) ;
86096: LD_ADDR_VAR 0 3
86100: PUSH
86101: LD_EXP 122
86105: PPUSH
86106: CALL 70908 0 1
86110: ST_TO_ADDR
// for i := 1 to list do
86111: LD_ADDR_VAR 0 2
86115: PUSH
86116: DOUBLE
86117: LD_INT 1
86119: DEC
86120: ST_TO_ADDR
86121: LD_VAR 0 3
86125: PUSH
86126: FOR_TO
86127: IFFALSE 86218
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86129: LD_STRING setFactoryWaypointXY(
86131: PUSH
86132: LD_VAR 0 3
86136: PUSH
86137: LD_VAR 0 2
86141: ARRAY
86142: PUSH
86143: LD_INT 1
86145: ARRAY
86146: STR
86147: PUSH
86148: LD_STRING ,
86150: STR
86151: PUSH
86152: LD_VAR 0 3
86156: PUSH
86157: LD_VAR 0 2
86161: ARRAY
86162: PUSH
86163: LD_INT 2
86165: ARRAY
86166: STR
86167: PUSH
86168: LD_STRING ,
86170: STR
86171: PUSH
86172: LD_VAR 0 3
86176: PUSH
86177: LD_VAR 0 2
86181: ARRAY
86182: PUSH
86183: LD_INT 3
86185: ARRAY
86186: STR
86187: PUSH
86188: LD_STRING ,
86190: STR
86191: PUSH
86192: LD_VAR 0 3
86196: PUSH
86197: LD_VAR 0 2
86201: ARRAY
86202: PUSH
86203: LD_INT 4
86205: ARRAY
86206: STR
86207: PUSH
86208: LD_STRING )
86210: STR
86211: PPUSH
86212: CALL_OW 559
86216: GO 86126
86218: POP
86219: POP
// end ; end ;
86220: LD_VAR 0 1
86224: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
86225: LD_INT 0
86227: PPUSH
// if HexInfo ( x , y ) = warehouse then
86228: LD_VAR 0 2
86232: PPUSH
86233: LD_VAR 0 3
86237: PPUSH
86238: CALL_OW 428
86242: PUSH
86243: LD_VAR 0 1
86247: EQUAL
86248: IFFALSE 86275
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
86250: LD_ADDR_EXP 123
86254: PUSH
86255: LD_EXP 123
86259: PPUSH
86260: LD_VAR 0 1
86264: PPUSH
86265: LD_INT 0
86267: PPUSH
86268: CALL_OW 1
86272: ST_TO_ADDR
86273: GO 86326
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
86275: LD_ADDR_EXP 123
86279: PUSH
86280: LD_EXP 123
86284: PPUSH
86285: LD_VAR 0 1
86289: PPUSH
86290: LD_VAR 0 1
86294: PPUSH
86295: CALL_OW 255
86299: PUSH
86300: LD_VAR 0 1
86304: PUSH
86305: LD_VAR 0 2
86309: PUSH
86310: LD_VAR 0 3
86314: PUSH
86315: EMPTY
86316: LIST
86317: LIST
86318: LIST
86319: LIST
86320: PPUSH
86321: CALL_OW 1
86325: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
86326: CALL 86335 0 0
// end ;
86330: LD_VAR 0 4
86334: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
86335: LD_INT 0
86337: PPUSH
86338: PPUSH
86339: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
86340: LD_STRING resetWarehouseGatheringPoints();
86342: PPUSH
86343: CALL_OW 559
// if warehouseGatheringPoints then
86347: LD_EXP 123
86351: IFFALSE 86477
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
86353: LD_ADDR_VAR 0 3
86357: PUSH
86358: LD_EXP 123
86362: PPUSH
86363: CALL 70908 0 1
86367: ST_TO_ADDR
// for i := 1 to list do
86368: LD_ADDR_VAR 0 2
86372: PUSH
86373: DOUBLE
86374: LD_INT 1
86376: DEC
86377: ST_TO_ADDR
86378: LD_VAR 0 3
86382: PUSH
86383: FOR_TO
86384: IFFALSE 86475
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86386: LD_STRING setWarehouseGatheringPointXY(
86388: PUSH
86389: LD_VAR 0 3
86393: PUSH
86394: LD_VAR 0 2
86398: ARRAY
86399: PUSH
86400: LD_INT 1
86402: ARRAY
86403: STR
86404: PUSH
86405: LD_STRING ,
86407: STR
86408: PUSH
86409: LD_VAR 0 3
86413: PUSH
86414: LD_VAR 0 2
86418: ARRAY
86419: PUSH
86420: LD_INT 2
86422: ARRAY
86423: STR
86424: PUSH
86425: LD_STRING ,
86427: STR
86428: PUSH
86429: LD_VAR 0 3
86433: PUSH
86434: LD_VAR 0 2
86438: ARRAY
86439: PUSH
86440: LD_INT 3
86442: ARRAY
86443: STR
86444: PUSH
86445: LD_STRING ,
86447: STR
86448: PUSH
86449: LD_VAR 0 3
86453: PUSH
86454: LD_VAR 0 2
86458: ARRAY
86459: PUSH
86460: LD_INT 4
86462: ARRAY
86463: STR
86464: PUSH
86465: LD_STRING )
86467: STR
86468: PPUSH
86469: CALL_OW 559
86473: GO 86383
86475: POP
86476: POP
// end ; end ;
86477: LD_VAR 0 1
86481: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
86482: LD_EXP 123
86486: IFFALSE 87171
86488: GO 86490
86490: DISABLE
86491: LD_INT 0
86493: PPUSH
86494: PPUSH
86495: PPUSH
86496: PPUSH
86497: PPUSH
86498: PPUSH
86499: PPUSH
86500: PPUSH
86501: PPUSH
// begin enable ;
86502: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
86503: LD_ADDR_VAR 0 3
86507: PUSH
86508: LD_EXP 123
86512: PPUSH
86513: CALL 70908 0 1
86517: ST_TO_ADDR
// if not list then
86518: LD_VAR 0 3
86522: NOT
86523: IFFALSE 86527
// exit ;
86525: GO 87171
// for i := 1 to list do
86527: LD_ADDR_VAR 0 1
86531: PUSH
86532: DOUBLE
86533: LD_INT 1
86535: DEC
86536: ST_TO_ADDR
86537: LD_VAR 0 3
86541: PUSH
86542: FOR_TO
86543: IFFALSE 87169
// begin depot := list [ i ] [ 2 ] ;
86545: LD_ADDR_VAR 0 8
86549: PUSH
86550: LD_VAR 0 3
86554: PUSH
86555: LD_VAR 0 1
86559: ARRAY
86560: PUSH
86561: LD_INT 2
86563: ARRAY
86564: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
86565: LD_ADDR_VAR 0 5
86569: PUSH
86570: LD_VAR 0 3
86574: PUSH
86575: LD_VAR 0 1
86579: ARRAY
86580: PUSH
86581: LD_INT 1
86583: ARRAY
86584: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
86585: LD_VAR 0 8
86589: PPUSH
86590: CALL_OW 301
86594: PUSH
86595: LD_VAR 0 5
86599: PUSH
86600: LD_VAR 0 8
86604: PPUSH
86605: CALL_OW 255
86609: NONEQUAL
86610: OR
86611: IFFALSE 86640
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
86613: LD_ADDR_EXP 123
86617: PUSH
86618: LD_EXP 123
86622: PPUSH
86623: LD_VAR 0 8
86627: PPUSH
86628: LD_INT 0
86630: PPUSH
86631: CALL_OW 1
86635: ST_TO_ADDR
// exit ;
86636: POP
86637: POP
86638: GO 87171
// end ; x := list [ i ] [ 3 ] ;
86640: LD_ADDR_VAR 0 6
86644: PUSH
86645: LD_VAR 0 3
86649: PUSH
86650: LD_VAR 0 1
86654: ARRAY
86655: PUSH
86656: LD_INT 3
86658: ARRAY
86659: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
86660: LD_ADDR_VAR 0 7
86664: PUSH
86665: LD_VAR 0 3
86669: PUSH
86670: LD_VAR 0 1
86674: ARRAY
86675: PUSH
86676: LD_INT 4
86678: ARRAY
86679: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
86680: LD_ADDR_VAR 0 9
86684: PUSH
86685: LD_VAR 0 6
86689: PPUSH
86690: LD_VAR 0 7
86694: PPUSH
86695: LD_INT 16
86697: PPUSH
86698: CALL 69496 0 3
86702: ST_TO_ADDR
// if not cratesNearbyPoint then
86703: LD_VAR 0 9
86707: NOT
86708: IFFALSE 86714
// exit ;
86710: POP
86711: POP
86712: GO 87171
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
86714: LD_ADDR_VAR 0 4
86718: PUSH
86719: LD_INT 22
86721: PUSH
86722: LD_VAR 0 5
86726: PUSH
86727: EMPTY
86728: LIST
86729: LIST
86730: PUSH
86731: LD_INT 3
86733: PUSH
86734: LD_INT 60
86736: PUSH
86737: EMPTY
86738: LIST
86739: PUSH
86740: EMPTY
86741: LIST
86742: LIST
86743: PUSH
86744: LD_INT 91
86746: PUSH
86747: LD_VAR 0 8
86751: PUSH
86752: LD_INT 6
86754: PUSH
86755: EMPTY
86756: LIST
86757: LIST
86758: LIST
86759: PUSH
86760: LD_INT 2
86762: PUSH
86763: LD_INT 25
86765: PUSH
86766: LD_INT 2
86768: PUSH
86769: EMPTY
86770: LIST
86771: LIST
86772: PUSH
86773: LD_INT 25
86775: PUSH
86776: LD_INT 16
86778: PUSH
86779: EMPTY
86780: LIST
86781: LIST
86782: PUSH
86783: EMPTY
86784: LIST
86785: LIST
86786: LIST
86787: PUSH
86788: EMPTY
86789: LIST
86790: LIST
86791: LIST
86792: LIST
86793: PPUSH
86794: CALL_OW 69
86798: PUSH
86799: LD_VAR 0 8
86803: PPUSH
86804: CALL_OW 313
86808: PPUSH
86809: LD_INT 3
86811: PUSH
86812: LD_INT 60
86814: PUSH
86815: EMPTY
86816: LIST
86817: PUSH
86818: EMPTY
86819: LIST
86820: LIST
86821: PUSH
86822: LD_INT 2
86824: PUSH
86825: LD_INT 25
86827: PUSH
86828: LD_INT 2
86830: PUSH
86831: EMPTY
86832: LIST
86833: LIST
86834: PUSH
86835: LD_INT 25
86837: PUSH
86838: LD_INT 16
86840: PUSH
86841: EMPTY
86842: LIST
86843: LIST
86844: PUSH
86845: EMPTY
86846: LIST
86847: LIST
86848: LIST
86849: PUSH
86850: EMPTY
86851: LIST
86852: LIST
86853: PPUSH
86854: CALL_OW 72
86858: UNION
86859: ST_TO_ADDR
// if tmp then
86860: LD_VAR 0 4
86864: IFFALSE 86944
// begin tmp := ShrinkArray ( tmp , 3 ) ;
86866: LD_ADDR_VAR 0 4
86870: PUSH
86871: LD_VAR 0 4
86875: PPUSH
86876: LD_INT 3
86878: PPUSH
86879: CALL 67465 0 2
86883: ST_TO_ADDR
// for j in tmp do
86884: LD_ADDR_VAR 0 2
86888: PUSH
86889: LD_VAR 0 4
86893: PUSH
86894: FOR_IN
86895: IFFALSE 86938
// begin if IsInUnit ( j ) then
86897: LD_VAR 0 2
86901: PPUSH
86902: CALL_OW 310
86906: IFFALSE 86917
// ComExit ( j ) ;
86908: LD_VAR 0 2
86912: PPUSH
86913: CALL 67548 0 1
// AddComCollect ( j , x , y ) ;
86917: LD_VAR 0 2
86921: PPUSH
86922: LD_VAR 0 6
86926: PPUSH
86927: LD_VAR 0 7
86931: PPUSH
86932: CALL_OW 177
// end ;
86936: GO 86894
86938: POP
86939: POP
// exit ;
86940: POP
86941: POP
86942: GO 87171
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
86944: LD_ADDR_VAR 0 4
86948: PUSH
86949: LD_INT 22
86951: PUSH
86952: LD_VAR 0 5
86956: PUSH
86957: EMPTY
86958: LIST
86959: LIST
86960: PUSH
86961: LD_INT 91
86963: PUSH
86964: LD_VAR 0 8
86968: PUSH
86969: LD_INT 8
86971: PUSH
86972: EMPTY
86973: LIST
86974: LIST
86975: LIST
86976: PUSH
86977: LD_INT 2
86979: PUSH
86980: LD_INT 34
86982: PUSH
86983: LD_INT 12
86985: PUSH
86986: EMPTY
86987: LIST
86988: LIST
86989: PUSH
86990: LD_INT 34
86992: PUSH
86993: LD_INT 51
86995: PUSH
86996: EMPTY
86997: LIST
86998: LIST
86999: PUSH
87000: LD_INT 34
87002: PUSH
87003: LD_INT 32
87005: PUSH
87006: EMPTY
87007: LIST
87008: LIST
87009: PUSH
87010: LD_INT 34
87012: PUSH
87013: LD_INT 89
87015: PUSH
87016: EMPTY
87017: LIST
87018: LIST
87019: PUSH
87020: EMPTY
87021: LIST
87022: LIST
87023: LIST
87024: LIST
87025: LIST
87026: PUSH
87027: EMPTY
87028: LIST
87029: LIST
87030: LIST
87031: PPUSH
87032: CALL_OW 69
87036: ST_TO_ADDR
// if tmp then
87037: LD_VAR 0 4
87041: IFFALSE 87167
// begin for j in tmp do
87043: LD_ADDR_VAR 0 2
87047: PUSH
87048: LD_VAR 0 4
87052: PUSH
87053: FOR_IN
87054: IFFALSE 87165
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
87056: LD_VAR 0 2
87060: PPUSH
87061: CALL_OW 262
87065: PUSH
87066: LD_INT 3
87068: EQUAL
87069: PUSH
87070: LD_VAR 0 2
87074: PPUSH
87075: CALL_OW 261
87079: PUSH
87080: LD_INT 20
87082: GREATER
87083: OR
87084: PUSH
87085: LD_VAR 0 2
87089: PPUSH
87090: CALL_OW 314
87094: NOT
87095: AND
87096: PUSH
87097: LD_VAR 0 2
87101: PPUSH
87102: CALL_OW 263
87106: PUSH
87107: LD_INT 1
87109: NONEQUAL
87110: PUSH
87111: LD_VAR 0 2
87115: PPUSH
87116: CALL_OW 311
87120: OR
87121: AND
87122: IFFALSE 87163
// begin ComCollect ( j , x , y ) ;
87124: LD_VAR 0 2
87128: PPUSH
87129: LD_VAR 0 6
87133: PPUSH
87134: LD_VAR 0 7
87138: PPUSH
87139: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
87143: LD_VAR 0 2
87147: PPUSH
87148: LD_VAR 0 8
87152: PPUSH
87153: CALL_OW 172
// exit ;
87157: POP
87158: POP
87159: POP
87160: POP
87161: GO 87171
// end ;
87163: GO 87053
87165: POP
87166: POP
// end ; end ;
87167: GO 86542
87169: POP
87170: POP
// end ; end_of_file
87171: PPOPN 9
87173: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
87174: LD_VAR 0 1
87178: PUSH
87179: LD_INT 200
87181: DOUBLE
87182: GREATEREQUAL
87183: IFFALSE 87191
87185: LD_INT 299
87187: DOUBLE
87188: LESSEQUAL
87189: IFTRUE 87193
87191: GO 87225
87193: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
87194: LD_VAR 0 1
87198: PPUSH
87199: LD_VAR 0 2
87203: PPUSH
87204: LD_VAR 0 3
87208: PPUSH
87209: LD_VAR 0 4
87213: PPUSH
87214: LD_VAR 0 5
87218: PPUSH
87219: CALL 87713 0 5
87223: GO 87302
87225: LD_INT 300
87227: DOUBLE
87228: GREATEREQUAL
87229: IFFALSE 87237
87231: LD_INT 399
87233: DOUBLE
87234: LESSEQUAL
87235: IFTRUE 87239
87237: GO 87301
87239: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
87240: LD_VAR 0 1
87244: PPUSH
87245: LD_VAR 0 2
87249: PPUSH
87250: LD_VAR 0 3
87254: PPUSH
87255: LD_VAR 0 4
87259: PPUSH
87260: LD_VAR 0 5
87264: PPUSH
87265: LD_VAR 0 6
87269: PPUSH
87270: LD_VAR 0 7
87274: PPUSH
87275: LD_VAR 0 8
87279: PPUSH
87280: LD_VAR 0 9
87284: PPUSH
87285: LD_VAR 0 10
87289: PPUSH
87290: LD_VAR 0 11
87294: PPUSH
87295: CALL 83875 0 11
87299: GO 87302
87301: POP
// end ;
87302: PPOPN 11
87304: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
87305: LD_VAR 0 1
87309: PPUSH
87310: LD_VAR 0 2
87314: PPUSH
87315: LD_VAR 0 3
87319: PPUSH
87320: LD_VAR 0 4
87324: PPUSH
87325: LD_VAR 0 5
87329: PPUSH
87330: CALL 87449 0 5
// end ; end_of_file
87334: PPOPN 5
87336: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
87337: LD_INT 0
87339: PPUSH
87340: PPUSH
87341: PPUSH
87342: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
87343: LD_VAR 0 1
87347: PPUSH
87348: CALL_OW 264
87352: PUSH
87353: LD_INT 91
87355: EQUAL
87356: IFFALSE 87428
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
87358: LD_INT 68
87360: PPUSH
87361: LD_VAR 0 1
87365: PPUSH
87366: CALL_OW 255
87370: PPUSH
87371: CALL_OW 321
87375: PUSH
87376: LD_INT 2
87378: EQUAL
87379: IFFALSE 87391
// eff := 70 else
87381: LD_ADDR_VAR 0 4
87385: PUSH
87386: LD_INT 70
87388: ST_TO_ADDR
87389: GO 87399
// eff := 30 ;
87391: LD_ADDR_VAR 0 4
87395: PUSH
87396: LD_INT 30
87398: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
87399: LD_VAR 0 1
87403: PPUSH
87404: CALL_OW 250
87408: PPUSH
87409: LD_VAR 0 1
87413: PPUSH
87414: CALL_OW 251
87418: PPUSH
87419: LD_VAR 0 4
87423: PPUSH
87424: CALL_OW 495
// end ; end ;
87428: LD_VAR 0 2
87432: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
87433: LD_INT 0
87435: PPUSH
// end ;
87436: LD_VAR 0 4
87440: RET
// export function SOS_Command ( cmd ) ; begin
87441: LD_INT 0
87443: PPUSH
// end ;
87444: LD_VAR 0 2
87448: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
87449: LD_INT 0
87451: PPUSH
// end ;
87452: LD_VAR 0 6
87456: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
87457: LD_INT 0
87459: PPUSH
87460: PPUSH
// if not vehicle or not factory then
87461: LD_VAR 0 1
87465: NOT
87466: PUSH
87467: LD_VAR 0 2
87471: NOT
87472: OR
87473: IFFALSE 87477
// exit ;
87475: GO 87708
// if factoryWaypoints >= factory then
87477: LD_EXP 122
87481: PUSH
87482: LD_VAR 0 2
87486: GREATEREQUAL
87487: IFFALSE 87708
// if factoryWaypoints [ factory ] then
87489: LD_EXP 122
87493: PUSH
87494: LD_VAR 0 2
87498: ARRAY
87499: IFFALSE 87708
// begin if GetControl ( vehicle ) = control_manual then
87501: LD_VAR 0 1
87505: PPUSH
87506: CALL_OW 263
87510: PUSH
87511: LD_INT 1
87513: EQUAL
87514: IFFALSE 87595
// begin driver := IsDrivenBy ( vehicle ) ;
87516: LD_ADDR_VAR 0 4
87520: PUSH
87521: LD_VAR 0 1
87525: PPUSH
87526: CALL_OW 311
87530: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87531: LD_VAR 0 4
87535: PPUSH
87536: LD_EXP 122
87540: PUSH
87541: LD_VAR 0 2
87545: ARRAY
87546: PUSH
87547: LD_INT 3
87549: ARRAY
87550: PPUSH
87551: LD_EXP 122
87555: PUSH
87556: LD_VAR 0 2
87560: ARRAY
87561: PUSH
87562: LD_INT 4
87564: ARRAY
87565: PPUSH
87566: CALL_OW 171
// AddComExitVehicle ( driver ) ;
87570: LD_VAR 0 4
87574: PPUSH
87575: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
87579: LD_VAR 0 4
87583: PPUSH
87584: LD_VAR 0 2
87588: PPUSH
87589: CALL_OW 180
// end else
87593: GO 87708
// if GetControl ( vehicle ) = control_remote then
87595: LD_VAR 0 1
87599: PPUSH
87600: CALL_OW 263
87604: PUSH
87605: LD_INT 2
87607: EQUAL
87608: IFFALSE 87669
// begin wait ( 0 0$2 ) ;
87610: LD_INT 70
87612: PPUSH
87613: CALL_OW 67
// if Connect ( vehicle ) then
87617: LD_VAR 0 1
87621: PPUSH
87622: CALL 37756 0 1
87626: IFFALSE 87667
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87628: LD_VAR 0 1
87632: PPUSH
87633: LD_EXP 122
87637: PUSH
87638: LD_VAR 0 2
87642: ARRAY
87643: PUSH
87644: LD_INT 3
87646: ARRAY
87647: PPUSH
87648: LD_EXP 122
87652: PUSH
87653: LD_VAR 0 2
87657: ARRAY
87658: PUSH
87659: LD_INT 4
87661: ARRAY
87662: PPUSH
87663: CALL_OW 171
// end else
87667: GO 87708
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
87669: LD_VAR 0 1
87673: PPUSH
87674: LD_EXP 122
87678: PUSH
87679: LD_VAR 0 2
87683: ARRAY
87684: PUSH
87685: LD_INT 3
87687: ARRAY
87688: PPUSH
87689: LD_EXP 122
87693: PUSH
87694: LD_VAR 0 2
87698: ARRAY
87699: PUSH
87700: LD_INT 4
87702: ARRAY
87703: PPUSH
87704: CALL_OW 171
// end ; end ;
87708: LD_VAR 0 3
87712: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
87713: LD_INT 0
87715: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
87716: LD_VAR 0 1
87720: PUSH
87721: LD_INT 250
87723: EQUAL
87724: PUSH
87725: LD_VAR 0 2
87729: PPUSH
87730: CALL_OW 264
87734: PUSH
87735: LD_INT 81
87737: EQUAL
87738: AND
87739: IFFALSE 87760
// MinerPlaceMine ( unit , x , y ) ;
87741: LD_VAR 0 2
87745: PPUSH
87746: LD_VAR 0 4
87750: PPUSH
87751: LD_VAR 0 5
87755: PPUSH
87756: CALL 90584 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
87760: LD_VAR 0 1
87764: PUSH
87765: LD_INT 251
87767: EQUAL
87768: PUSH
87769: LD_VAR 0 2
87773: PPUSH
87774: CALL_OW 264
87778: PUSH
87779: LD_INT 81
87781: EQUAL
87782: AND
87783: IFFALSE 87804
// MinerDetonateMine ( unit , x , y ) ;
87785: LD_VAR 0 2
87789: PPUSH
87790: LD_VAR 0 4
87794: PPUSH
87795: LD_VAR 0 5
87799: PPUSH
87800: CALL 90859 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
87804: LD_VAR 0 1
87808: PUSH
87809: LD_INT 252
87811: EQUAL
87812: PUSH
87813: LD_VAR 0 2
87817: PPUSH
87818: CALL_OW 264
87822: PUSH
87823: LD_INT 81
87825: EQUAL
87826: AND
87827: IFFALSE 87848
// MinerCreateMinefield ( unit , x , y ) ;
87829: LD_VAR 0 2
87833: PPUSH
87834: LD_VAR 0 4
87838: PPUSH
87839: LD_VAR 0 5
87843: PPUSH
87844: CALL 91276 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
87848: LD_VAR 0 1
87852: PUSH
87853: LD_INT 253
87855: EQUAL
87856: PUSH
87857: LD_VAR 0 2
87861: PPUSH
87862: CALL_OW 257
87866: PUSH
87867: LD_INT 5
87869: EQUAL
87870: AND
87871: IFFALSE 87892
// ComBinocular ( unit , x , y ) ;
87873: LD_VAR 0 2
87877: PPUSH
87878: LD_VAR 0 4
87882: PPUSH
87883: LD_VAR 0 5
87887: PPUSH
87888: CALL 91645 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
87892: LD_VAR 0 1
87896: PUSH
87897: LD_INT 254
87899: EQUAL
87900: PUSH
87901: LD_VAR 0 2
87905: PPUSH
87906: CALL_OW 264
87910: PUSH
87911: LD_INT 99
87913: EQUAL
87914: AND
87915: PUSH
87916: LD_VAR 0 3
87920: PPUSH
87921: CALL_OW 263
87925: PUSH
87926: LD_INT 3
87928: EQUAL
87929: AND
87930: IFFALSE 87946
// HackDestroyVehicle ( unit , selectedUnit ) ;
87932: LD_VAR 0 2
87936: PPUSH
87937: LD_VAR 0 3
87941: PPUSH
87942: CALL 89948 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
87946: LD_VAR 0 1
87950: PUSH
87951: LD_INT 255
87953: EQUAL
87954: PUSH
87955: LD_VAR 0 2
87959: PPUSH
87960: CALL_OW 264
87964: PUSH
87965: LD_INT 14
87967: PUSH
87968: LD_INT 53
87970: PUSH
87971: EMPTY
87972: LIST
87973: LIST
87974: IN
87975: AND
87976: PUSH
87977: LD_VAR 0 4
87981: PPUSH
87982: LD_VAR 0 5
87986: PPUSH
87987: CALL_OW 488
87991: AND
87992: IFFALSE 88016
// CutTreeXYR ( unit , x , y , 12 ) ;
87994: LD_VAR 0 2
87998: PPUSH
87999: LD_VAR 0 4
88003: PPUSH
88004: LD_VAR 0 5
88008: PPUSH
88009: LD_INT 12
88011: PPUSH
88012: CALL 88111 0 4
// if cmd = 256 then
88016: LD_VAR 0 1
88020: PUSH
88021: LD_INT 256
88023: EQUAL
88024: IFFALSE 88045
// SetFactoryWaypoint ( unit , x , y ) ;
88026: LD_VAR 0 2
88030: PPUSH
88031: LD_VAR 0 4
88035: PPUSH
88036: LD_VAR 0 5
88040: PPUSH
88041: CALL 85863 0 3
// if cmd = 257 then
88045: LD_VAR 0 1
88049: PUSH
88050: LD_INT 257
88052: EQUAL
88053: IFFALSE 88074
// SetWarehouseGatheringPoint ( unit , x , y ) ;
88055: LD_VAR 0 2
88059: PPUSH
88060: LD_VAR 0 4
88064: PPUSH
88065: LD_VAR 0 5
88069: PPUSH
88070: CALL 86225 0 3
// if cmd = 258 then
88074: LD_VAR 0 1
88078: PUSH
88079: LD_INT 258
88081: EQUAL
88082: IFFALSE 88106
// BurnTreeXYR ( unit , x , y , 8 ) ;
88084: LD_VAR 0 2
88088: PPUSH
88089: LD_VAR 0 4
88093: PPUSH
88094: LD_VAR 0 5
88098: PPUSH
88099: LD_INT 8
88101: PPUSH
88102: CALL 88505 0 4
// end ;
88106: LD_VAR 0 6
88110: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88111: LD_INT 0
88113: PPUSH
88114: PPUSH
88115: PPUSH
88116: PPUSH
88117: PPUSH
88118: PPUSH
88119: PPUSH
88120: PPUSH
88121: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
88122: LD_VAR 0 1
88126: PPUSH
88127: CALL_OW 302
88131: NOT
88132: PUSH
88133: LD_VAR 0 2
88137: PPUSH
88138: LD_VAR 0 3
88142: PPUSH
88143: CALL_OW 488
88147: NOT
88148: OR
88149: PUSH
88150: LD_VAR 0 4
88154: NOT
88155: OR
88156: IFFALSE 88160
// exit ;
88158: GO 88500
// list := [ ] ;
88160: LD_ADDR_VAR 0 13
88164: PUSH
88165: EMPTY
88166: ST_TO_ADDR
// if x - r < 0 then
88167: LD_VAR 0 2
88171: PUSH
88172: LD_VAR 0 4
88176: MINUS
88177: PUSH
88178: LD_INT 0
88180: LESS
88181: IFFALSE 88193
// min_x := 0 else
88183: LD_ADDR_VAR 0 7
88187: PUSH
88188: LD_INT 0
88190: ST_TO_ADDR
88191: GO 88209
// min_x := x - r ;
88193: LD_ADDR_VAR 0 7
88197: PUSH
88198: LD_VAR 0 2
88202: PUSH
88203: LD_VAR 0 4
88207: MINUS
88208: ST_TO_ADDR
// if y - r < 0 then
88209: LD_VAR 0 3
88213: PUSH
88214: LD_VAR 0 4
88218: MINUS
88219: PUSH
88220: LD_INT 0
88222: LESS
88223: IFFALSE 88235
// min_y := 0 else
88225: LD_ADDR_VAR 0 8
88229: PUSH
88230: LD_INT 0
88232: ST_TO_ADDR
88233: GO 88251
// min_y := y - r ;
88235: LD_ADDR_VAR 0 8
88239: PUSH
88240: LD_VAR 0 3
88244: PUSH
88245: LD_VAR 0 4
88249: MINUS
88250: ST_TO_ADDR
// max_x := x + r ;
88251: LD_ADDR_VAR 0 9
88255: PUSH
88256: LD_VAR 0 2
88260: PUSH
88261: LD_VAR 0 4
88265: PLUS
88266: ST_TO_ADDR
// max_y := y + r ;
88267: LD_ADDR_VAR 0 10
88271: PUSH
88272: LD_VAR 0 3
88276: PUSH
88277: LD_VAR 0 4
88281: PLUS
88282: ST_TO_ADDR
// for _x = min_x to max_x do
88283: LD_ADDR_VAR 0 11
88287: PUSH
88288: DOUBLE
88289: LD_VAR 0 7
88293: DEC
88294: ST_TO_ADDR
88295: LD_VAR 0 9
88299: PUSH
88300: FOR_TO
88301: IFFALSE 88418
// for _y = min_y to max_y do
88303: LD_ADDR_VAR 0 12
88307: PUSH
88308: DOUBLE
88309: LD_VAR 0 8
88313: DEC
88314: ST_TO_ADDR
88315: LD_VAR 0 10
88319: PUSH
88320: FOR_TO
88321: IFFALSE 88414
// begin if not ValidHex ( _x , _y ) then
88323: LD_VAR 0 11
88327: PPUSH
88328: LD_VAR 0 12
88332: PPUSH
88333: CALL_OW 488
88337: NOT
88338: IFFALSE 88342
// continue ;
88340: GO 88320
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88342: LD_VAR 0 11
88346: PPUSH
88347: LD_VAR 0 12
88351: PPUSH
88352: CALL_OW 351
88356: PUSH
88357: LD_VAR 0 11
88361: PPUSH
88362: LD_VAR 0 12
88366: PPUSH
88367: CALL_OW 554
88371: AND
88372: IFFALSE 88412
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88374: LD_ADDR_VAR 0 13
88378: PUSH
88379: LD_VAR 0 13
88383: PPUSH
88384: LD_VAR 0 13
88388: PUSH
88389: LD_INT 1
88391: PLUS
88392: PPUSH
88393: LD_VAR 0 11
88397: PUSH
88398: LD_VAR 0 12
88402: PUSH
88403: EMPTY
88404: LIST
88405: LIST
88406: PPUSH
88407: CALL_OW 2
88411: ST_TO_ADDR
// end ;
88412: GO 88320
88414: POP
88415: POP
88416: GO 88300
88418: POP
88419: POP
// if not list then
88420: LD_VAR 0 13
88424: NOT
88425: IFFALSE 88429
// exit ;
88427: GO 88500
// for i in list do
88429: LD_ADDR_VAR 0 6
88433: PUSH
88434: LD_VAR 0 13
88438: PUSH
88439: FOR_IN
88440: IFFALSE 88498
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
88442: LD_VAR 0 1
88446: PPUSH
88447: LD_STRING M
88449: PUSH
88450: LD_VAR 0 6
88454: PUSH
88455: LD_INT 1
88457: ARRAY
88458: PUSH
88459: LD_VAR 0 6
88463: PUSH
88464: LD_INT 2
88466: ARRAY
88467: PUSH
88468: LD_INT 0
88470: PUSH
88471: LD_INT 0
88473: PUSH
88474: LD_INT 0
88476: PUSH
88477: LD_INT 0
88479: PUSH
88480: EMPTY
88481: LIST
88482: LIST
88483: LIST
88484: LIST
88485: LIST
88486: LIST
88487: LIST
88488: PUSH
88489: EMPTY
88490: LIST
88491: PPUSH
88492: CALL_OW 447
88496: GO 88439
88498: POP
88499: POP
// end ;
88500: LD_VAR 0 5
88504: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88505: LD_INT 0
88507: PPUSH
88508: PPUSH
88509: PPUSH
88510: PPUSH
88511: PPUSH
88512: PPUSH
88513: PPUSH
88514: PPUSH
88515: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
88516: LD_VAR 0 1
88520: PPUSH
88521: CALL_OW 302
88525: NOT
88526: PUSH
88527: LD_VAR 0 2
88531: PPUSH
88532: LD_VAR 0 3
88536: PPUSH
88537: CALL_OW 488
88541: NOT
88542: OR
88543: PUSH
88544: LD_VAR 0 4
88548: NOT
88549: OR
88550: IFFALSE 88554
// exit ;
88552: GO 88902
// list := [ ] ;
88554: LD_ADDR_VAR 0 13
88558: PUSH
88559: EMPTY
88560: ST_TO_ADDR
// if x - r < 0 then
88561: LD_VAR 0 2
88565: PUSH
88566: LD_VAR 0 4
88570: MINUS
88571: PUSH
88572: LD_INT 0
88574: LESS
88575: IFFALSE 88587
// min_x := 0 else
88577: LD_ADDR_VAR 0 7
88581: PUSH
88582: LD_INT 0
88584: ST_TO_ADDR
88585: GO 88603
// min_x := x - r ;
88587: LD_ADDR_VAR 0 7
88591: PUSH
88592: LD_VAR 0 2
88596: PUSH
88597: LD_VAR 0 4
88601: MINUS
88602: ST_TO_ADDR
// if y - r < 0 then
88603: LD_VAR 0 3
88607: PUSH
88608: LD_VAR 0 4
88612: MINUS
88613: PUSH
88614: LD_INT 0
88616: LESS
88617: IFFALSE 88629
// min_y := 0 else
88619: LD_ADDR_VAR 0 8
88623: PUSH
88624: LD_INT 0
88626: ST_TO_ADDR
88627: GO 88645
// min_y := y - r ;
88629: LD_ADDR_VAR 0 8
88633: PUSH
88634: LD_VAR 0 3
88638: PUSH
88639: LD_VAR 0 4
88643: MINUS
88644: ST_TO_ADDR
// max_x := x + r ;
88645: LD_ADDR_VAR 0 9
88649: PUSH
88650: LD_VAR 0 2
88654: PUSH
88655: LD_VAR 0 4
88659: PLUS
88660: ST_TO_ADDR
// max_y := y + r ;
88661: LD_ADDR_VAR 0 10
88665: PUSH
88666: LD_VAR 0 3
88670: PUSH
88671: LD_VAR 0 4
88675: PLUS
88676: ST_TO_ADDR
// for _x = min_x to max_x do
88677: LD_ADDR_VAR 0 11
88681: PUSH
88682: DOUBLE
88683: LD_VAR 0 7
88687: DEC
88688: ST_TO_ADDR
88689: LD_VAR 0 9
88693: PUSH
88694: FOR_TO
88695: IFFALSE 88812
// for _y = min_y to max_y do
88697: LD_ADDR_VAR 0 12
88701: PUSH
88702: DOUBLE
88703: LD_VAR 0 8
88707: DEC
88708: ST_TO_ADDR
88709: LD_VAR 0 10
88713: PUSH
88714: FOR_TO
88715: IFFALSE 88808
// begin if not ValidHex ( _x , _y ) then
88717: LD_VAR 0 11
88721: PPUSH
88722: LD_VAR 0 12
88726: PPUSH
88727: CALL_OW 488
88731: NOT
88732: IFFALSE 88736
// continue ;
88734: GO 88714
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88736: LD_VAR 0 11
88740: PPUSH
88741: LD_VAR 0 12
88745: PPUSH
88746: CALL_OW 351
88750: PUSH
88751: LD_VAR 0 11
88755: PPUSH
88756: LD_VAR 0 12
88760: PPUSH
88761: CALL_OW 554
88765: AND
88766: IFFALSE 88806
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88768: LD_ADDR_VAR 0 13
88772: PUSH
88773: LD_VAR 0 13
88777: PPUSH
88778: LD_VAR 0 13
88782: PUSH
88783: LD_INT 1
88785: PLUS
88786: PPUSH
88787: LD_VAR 0 11
88791: PUSH
88792: LD_VAR 0 12
88796: PUSH
88797: EMPTY
88798: LIST
88799: LIST
88800: PPUSH
88801: CALL_OW 2
88805: ST_TO_ADDR
// end ;
88806: GO 88714
88808: POP
88809: POP
88810: GO 88694
88812: POP
88813: POP
// if not list then
88814: LD_VAR 0 13
88818: NOT
88819: IFFALSE 88823
// exit ;
88821: GO 88902
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
88823: LD_ADDR_VAR 0 13
88827: PUSH
88828: LD_VAR 0 1
88832: PPUSH
88833: LD_VAR 0 13
88837: PPUSH
88838: LD_INT 1
88840: PPUSH
88841: LD_INT 1
88843: PPUSH
88844: CALL 34898 0 4
88848: ST_TO_ADDR
// ComStop ( flame ) ;
88849: LD_VAR 0 1
88853: PPUSH
88854: CALL_OW 141
// for i in list do
88858: LD_ADDR_VAR 0 6
88862: PUSH
88863: LD_VAR 0 13
88867: PUSH
88868: FOR_IN
88869: IFFALSE 88900
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
88871: LD_VAR 0 1
88875: PPUSH
88876: LD_VAR 0 6
88880: PUSH
88881: LD_INT 1
88883: ARRAY
88884: PPUSH
88885: LD_VAR 0 6
88889: PUSH
88890: LD_INT 2
88892: ARRAY
88893: PPUSH
88894: CALL_OW 176
88898: GO 88868
88900: POP
88901: POP
// end ;
88902: LD_VAR 0 5
88906: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
88907: LD_EXP 125
88911: NOT
88912: IFFALSE 88962
88914: GO 88916
88916: DISABLE
// begin initHack := true ;
88917: LD_ADDR_EXP 125
88921: PUSH
88922: LD_INT 1
88924: ST_TO_ADDR
// hackTanks := [ ] ;
88925: LD_ADDR_EXP 126
88929: PUSH
88930: EMPTY
88931: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
88932: LD_ADDR_EXP 127
88936: PUSH
88937: EMPTY
88938: ST_TO_ADDR
// hackLimit := 3 ;
88939: LD_ADDR_EXP 128
88943: PUSH
88944: LD_INT 3
88946: ST_TO_ADDR
// hackDist := 12 ;
88947: LD_ADDR_EXP 129
88951: PUSH
88952: LD_INT 12
88954: ST_TO_ADDR
// hackCounter := [ ] ;
88955: LD_ADDR_EXP 130
88959: PUSH
88960: EMPTY
88961: ST_TO_ADDR
// end ;
88962: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
88963: LD_EXP 125
88967: PUSH
88968: LD_INT 34
88970: PUSH
88971: LD_INT 99
88973: PUSH
88974: EMPTY
88975: LIST
88976: LIST
88977: PPUSH
88978: CALL_OW 69
88982: AND
88983: IFFALSE 89236
88985: GO 88987
88987: DISABLE
88988: LD_INT 0
88990: PPUSH
88991: PPUSH
// begin enable ;
88992: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
88993: LD_ADDR_VAR 0 1
88997: PUSH
88998: LD_INT 34
89000: PUSH
89001: LD_INT 99
89003: PUSH
89004: EMPTY
89005: LIST
89006: LIST
89007: PPUSH
89008: CALL_OW 69
89012: PUSH
89013: FOR_IN
89014: IFFALSE 89234
// begin if not i in hackTanks then
89016: LD_VAR 0 1
89020: PUSH
89021: LD_EXP 126
89025: IN
89026: NOT
89027: IFFALSE 89110
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
89029: LD_ADDR_EXP 126
89033: PUSH
89034: LD_EXP 126
89038: PPUSH
89039: LD_EXP 126
89043: PUSH
89044: LD_INT 1
89046: PLUS
89047: PPUSH
89048: LD_VAR 0 1
89052: PPUSH
89053: CALL_OW 1
89057: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
89058: LD_ADDR_EXP 127
89062: PUSH
89063: LD_EXP 127
89067: PPUSH
89068: LD_EXP 127
89072: PUSH
89073: LD_INT 1
89075: PLUS
89076: PPUSH
89077: EMPTY
89078: PPUSH
89079: CALL_OW 1
89083: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
89084: LD_ADDR_EXP 130
89088: PUSH
89089: LD_EXP 130
89093: PPUSH
89094: LD_EXP 130
89098: PUSH
89099: LD_INT 1
89101: PLUS
89102: PPUSH
89103: EMPTY
89104: PPUSH
89105: CALL_OW 1
89109: ST_TO_ADDR
// end ; if not IsOk ( i ) then
89110: LD_VAR 0 1
89114: PPUSH
89115: CALL_OW 302
89119: NOT
89120: IFFALSE 89133
// begin HackUnlinkAll ( i ) ;
89122: LD_VAR 0 1
89126: PPUSH
89127: CALL 89239 0 1
// continue ;
89131: GO 89013
// end ; HackCheckCapturedStatus ( i ) ;
89133: LD_VAR 0 1
89137: PPUSH
89138: CALL 89682 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
89142: LD_ADDR_VAR 0 2
89146: PUSH
89147: LD_INT 81
89149: PUSH
89150: LD_VAR 0 1
89154: PPUSH
89155: CALL_OW 255
89159: PUSH
89160: EMPTY
89161: LIST
89162: LIST
89163: PUSH
89164: LD_INT 33
89166: PUSH
89167: LD_INT 3
89169: PUSH
89170: EMPTY
89171: LIST
89172: LIST
89173: PUSH
89174: LD_INT 91
89176: PUSH
89177: LD_VAR 0 1
89181: PUSH
89182: LD_EXP 129
89186: PUSH
89187: EMPTY
89188: LIST
89189: LIST
89190: LIST
89191: PUSH
89192: LD_INT 50
89194: PUSH
89195: EMPTY
89196: LIST
89197: PUSH
89198: EMPTY
89199: LIST
89200: LIST
89201: LIST
89202: LIST
89203: PPUSH
89204: CALL_OW 69
89208: ST_TO_ADDR
// if not tmp then
89209: LD_VAR 0 2
89213: NOT
89214: IFFALSE 89218
// continue ;
89216: GO 89013
// HackLink ( i , tmp ) ;
89218: LD_VAR 0 1
89222: PPUSH
89223: LD_VAR 0 2
89227: PPUSH
89228: CALL 89375 0 2
// end ;
89232: GO 89013
89234: POP
89235: POP
// end ;
89236: PPOPN 2
89238: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
89239: LD_INT 0
89241: PPUSH
89242: PPUSH
89243: PPUSH
// if not hack in hackTanks then
89244: LD_VAR 0 1
89248: PUSH
89249: LD_EXP 126
89253: IN
89254: NOT
89255: IFFALSE 89259
// exit ;
89257: GO 89370
// index := GetElementIndex ( hackTanks , hack ) ;
89259: LD_ADDR_VAR 0 4
89263: PUSH
89264: LD_EXP 126
89268: PPUSH
89269: LD_VAR 0 1
89273: PPUSH
89274: CALL 34195 0 2
89278: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
89279: LD_EXP 127
89283: PUSH
89284: LD_VAR 0 4
89288: ARRAY
89289: IFFALSE 89370
// begin for i in hackTanksCaptured [ index ] do
89291: LD_ADDR_VAR 0 3
89295: PUSH
89296: LD_EXP 127
89300: PUSH
89301: LD_VAR 0 4
89305: ARRAY
89306: PUSH
89307: FOR_IN
89308: IFFALSE 89334
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
89310: LD_VAR 0 3
89314: PUSH
89315: LD_INT 1
89317: ARRAY
89318: PPUSH
89319: LD_VAR 0 3
89323: PUSH
89324: LD_INT 2
89326: ARRAY
89327: PPUSH
89328: CALL_OW 235
89332: GO 89307
89334: POP
89335: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
89336: LD_ADDR_EXP 127
89340: PUSH
89341: LD_EXP 127
89345: PPUSH
89346: LD_VAR 0 4
89350: PPUSH
89351: EMPTY
89352: PPUSH
89353: CALL_OW 1
89357: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
89358: LD_VAR 0 1
89362: PPUSH
89363: LD_INT 0
89365: PPUSH
89366: CALL_OW 505
// end ; end ;
89370: LD_VAR 0 2
89374: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
89375: LD_INT 0
89377: PPUSH
89378: PPUSH
89379: PPUSH
// if not hack in hackTanks or not vehicles then
89380: LD_VAR 0 1
89384: PUSH
89385: LD_EXP 126
89389: IN
89390: NOT
89391: PUSH
89392: LD_VAR 0 2
89396: NOT
89397: OR
89398: IFFALSE 89402
// exit ;
89400: GO 89677
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
89402: LD_ADDR_VAR 0 2
89406: PUSH
89407: LD_VAR 0 1
89411: PPUSH
89412: LD_VAR 0 2
89416: PPUSH
89417: LD_INT 1
89419: PPUSH
89420: LD_INT 1
89422: PPUSH
89423: CALL 34845 0 4
89427: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
89428: LD_ADDR_VAR 0 5
89432: PUSH
89433: LD_EXP 126
89437: PPUSH
89438: LD_VAR 0 1
89442: PPUSH
89443: CALL 34195 0 2
89447: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
89448: LD_EXP 127
89452: PUSH
89453: LD_VAR 0 5
89457: ARRAY
89458: PUSH
89459: LD_EXP 128
89463: LESS
89464: IFFALSE 89653
// begin for i := 1 to vehicles do
89466: LD_ADDR_VAR 0 4
89470: PUSH
89471: DOUBLE
89472: LD_INT 1
89474: DEC
89475: ST_TO_ADDR
89476: LD_VAR 0 2
89480: PUSH
89481: FOR_TO
89482: IFFALSE 89651
// begin if hackTanksCaptured [ index ] = hackLimit then
89484: LD_EXP 127
89488: PUSH
89489: LD_VAR 0 5
89493: ARRAY
89494: PUSH
89495: LD_EXP 128
89499: EQUAL
89500: IFFALSE 89504
// break ;
89502: GO 89651
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
89504: LD_ADDR_EXP 130
89508: PUSH
89509: LD_EXP 130
89513: PPUSH
89514: LD_VAR 0 5
89518: PPUSH
89519: LD_EXP 130
89523: PUSH
89524: LD_VAR 0 5
89528: ARRAY
89529: PUSH
89530: LD_INT 1
89532: PLUS
89533: PPUSH
89534: CALL_OW 1
89538: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
89539: LD_ADDR_EXP 127
89543: PUSH
89544: LD_EXP 127
89548: PPUSH
89549: LD_VAR 0 5
89553: PUSH
89554: LD_EXP 127
89558: PUSH
89559: LD_VAR 0 5
89563: ARRAY
89564: PUSH
89565: LD_INT 1
89567: PLUS
89568: PUSH
89569: EMPTY
89570: LIST
89571: LIST
89572: PPUSH
89573: LD_VAR 0 2
89577: PUSH
89578: LD_VAR 0 4
89582: ARRAY
89583: PUSH
89584: LD_VAR 0 2
89588: PUSH
89589: LD_VAR 0 4
89593: ARRAY
89594: PPUSH
89595: CALL_OW 255
89599: PUSH
89600: EMPTY
89601: LIST
89602: LIST
89603: PPUSH
89604: CALL 34410 0 3
89608: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
89609: LD_VAR 0 2
89613: PUSH
89614: LD_VAR 0 4
89618: ARRAY
89619: PPUSH
89620: LD_VAR 0 1
89624: PPUSH
89625: CALL_OW 255
89629: PPUSH
89630: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
89634: LD_VAR 0 2
89638: PUSH
89639: LD_VAR 0 4
89643: ARRAY
89644: PPUSH
89645: CALL_OW 141
// end ;
89649: GO 89481
89651: POP
89652: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89653: LD_VAR 0 1
89657: PPUSH
89658: LD_EXP 127
89662: PUSH
89663: LD_VAR 0 5
89667: ARRAY
89668: PUSH
89669: LD_INT 0
89671: PLUS
89672: PPUSH
89673: CALL_OW 505
// end ;
89677: LD_VAR 0 3
89681: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
89682: LD_INT 0
89684: PPUSH
89685: PPUSH
89686: PPUSH
89687: PPUSH
// if not hack in hackTanks then
89688: LD_VAR 0 1
89692: PUSH
89693: LD_EXP 126
89697: IN
89698: NOT
89699: IFFALSE 89703
// exit ;
89701: GO 89943
// index := GetElementIndex ( hackTanks , hack ) ;
89703: LD_ADDR_VAR 0 4
89707: PUSH
89708: LD_EXP 126
89712: PPUSH
89713: LD_VAR 0 1
89717: PPUSH
89718: CALL 34195 0 2
89722: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
89723: LD_ADDR_VAR 0 3
89727: PUSH
89728: DOUBLE
89729: LD_EXP 127
89733: PUSH
89734: LD_VAR 0 4
89738: ARRAY
89739: INC
89740: ST_TO_ADDR
89741: LD_INT 1
89743: PUSH
89744: FOR_DOWNTO
89745: IFFALSE 89917
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
89747: LD_ADDR_VAR 0 5
89751: PUSH
89752: LD_EXP 127
89756: PUSH
89757: LD_VAR 0 4
89761: ARRAY
89762: PUSH
89763: LD_VAR 0 3
89767: ARRAY
89768: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
89769: LD_VAR 0 5
89773: PUSH
89774: LD_INT 1
89776: ARRAY
89777: PPUSH
89778: CALL_OW 302
89782: NOT
89783: PUSH
89784: LD_VAR 0 5
89788: PUSH
89789: LD_INT 1
89791: ARRAY
89792: PPUSH
89793: CALL_OW 255
89797: PUSH
89798: LD_VAR 0 1
89802: PPUSH
89803: CALL_OW 255
89807: NONEQUAL
89808: OR
89809: IFFALSE 89915
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
89811: LD_VAR 0 5
89815: PUSH
89816: LD_INT 1
89818: ARRAY
89819: PPUSH
89820: CALL_OW 305
89824: PUSH
89825: LD_VAR 0 5
89829: PUSH
89830: LD_INT 1
89832: ARRAY
89833: PPUSH
89834: CALL_OW 255
89838: PUSH
89839: LD_VAR 0 1
89843: PPUSH
89844: CALL_OW 255
89848: EQUAL
89849: AND
89850: IFFALSE 89874
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
89852: LD_VAR 0 5
89856: PUSH
89857: LD_INT 1
89859: ARRAY
89860: PPUSH
89861: LD_VAR 0 5
89865: PUSH
89866: LD_INT 2
89868: ARRAY
89869: PPUSH
89870: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
89874: LD_ADDR_EXP 127
89878: PUSH
89879: LD_EXP 127
89883: PPUSH
89884: LD_VAR 0 4
89888: PPUSH
89889: LD_EXP 127
89893: PUSH
89894: LD_VAR 0 4
89898: ARRAY
89899: PPUSH
89900: LD_VAR 0 3
89904: PPUSH
89905: CALL_OW 3
89909: PPUSH
89910: CALL_OW 1
89914: ST_TO_ADDR
// end ; end ;
89915: GO 89744
89917: POP
89918: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89919: LD_VAR 0 1
89923: PPUSH
89924: LD_EXP 127
89928: PUSH
89929: LD_VAR 0 4
89933: ARRAY
89934: PUSH
89935: LD_INT 0
89937: PLUS
89938: PPUSH
89939: CALL_OW 505
// end ;
89943: LD_VAR 0 2
89947: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
89948: LD_INT 0
89950: PPUSH
89951: PPUSH
89952: PPUSH
89953: PPUSH
// if not hack in hackTanks then
89954: LD_VAR 0 1
89958: PUSH
89959: LD_EXP 126
89963: IN
89964: NOT
89965: IFFALSE 89969
// exit ;
89967: GO 90054
// index := GetElementIndex ( hackTanks , hack ) ;
89969: LD_ADDR_VAR 0 5
89973: PUSH
89974: LD_EXP 126
89978: PPUSH
89979: LD_VAR 0 1
89983: PPUSH
89984: CALL 34195 0 2
89988: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
89989: LD_ADDR_VAR 0 4
89993: PUSH
89994: DOUBLE
89995: LD_INT 1
89997: DEC
89998: ST_TO_ADDR
89999: LD_EXP 127
90003: PUSH
90004: LD_VAR 0 5
90008: ARRAY
90009: PUSH
90010: FOR_TO
90011: IFFALSE 90052
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
90013: LD_EXP 127
90017: PUSH
90018: LD_VAR 0 5
90022: ARRAY
90023: PUSH
90024: LD_VAR 0 4
90028: ARRAY
90029: PUSH
90030: LD_INT 1
90032: ARRAY
90033: PUSH
90034: LD_VAR 0 2
90038: EQUAL
90039: IFFALSE 90050
// KillUnit ( vehicle ) ;
90041: LD_VAR 0 2
90045: PPUSH
90046: CALL_OW 66
90050: GO 90010
90052: POP
90053: POP
// end ;
90054: LD_VAR 0 3
90058: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
90059: LD_EXP 131
90063: NOT
90064: IFFALSE 90099
90066: GO 90068
90068: DISABLE
// begin initMiner := true ;
90069: LD_ADDR_EXP 131
90073: PUSH
90074: LD_INT 1
90076: ST_TO_ADDR
// minersList := [ ] ;
90077: LD_ADDR_EXP 132
90081: PUSH
90082: EMPTY
90083: ST_TO_ADDR
// minerMinesList := [ ] ;
90084: LD_ADDR_EXP 133
90088: PUSH
90089: EMPTY
90090: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
90091: LD_ADDR_EXP 134
90095: PUSH
90096: LD_INT 5
90098: ST_TO_ADDR
// end ;
90099: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
90100: LD_EXP 131
90104: PUSH
90105: LD_INT 34
90107: PUSH
90108: LD_INT 81
90110: PUSH
90111: EMPTY
90112: LIST
90113: LIST
90114: PPUSH
90115: CALL_OW 69
90119: AND
90120: IFFALSE 90581
90122: GO 90124
90124: DISABLE
90125: LD_INT 0
90127: PPUSH
90128: PPUSH
90129: PPUSH
90130: PPUSH
// begin enable ;
90131: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
90132: LD_ADDR_VAR 0 1
90136: PUSH
90137: LD_INT 34
90139: PUSH
90140: LD_INT 81
90142: PUSH
90143: EMPTY
90144: LIST
90145: LIST
90146: PPUSH
90147: CALL_OW 69
90151: PUSH
90152: FOR_IN
90153: IFFALSE 90225
// begin if not i in minersList then
90155: LD_VAR 0 1
90159: PUSH
90160: LD_EXP 132
90164: IN
90165: NOT
90166: IFFALSE 90223
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
90168: LD_ADDR_EXP 132
90172: PUSH
90173: LD_EXP 132
90177: PPUSH
90178: LD_EXP 132
90182: PUSH
90183: LD_INT 1
90185: PLUS
90186: PPUSH
90187: LD_VAR 0 1
90191: PPUSH
90192: CALL_OW 1
90196: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
90197: LD_ADDR_EXP 133
90201: PUSH
90202: LD_EXP 133
90206: PPUSH
90207: LD_EXP 133
90211: PUSH
90212: LD_INT 1
90214: PLUS
90215: PPUSH
90216: EMPTY
90217: PPUSH
90218: CALL_OW 1
90222: ST_TO_ADDR
// end end ;
90223: GO 90152
90225: POP
90226: POP
// for i := minerMinesList downto 1 do
90227: LD_ADDR_VAR 0 1
90231: PUSH
90232: DOUBLE
90233: LD_EXP 133
90237: INC
90238: ST_TO_ADDR
90239: LD_INT 1
90241: PUSH
90242: FOR_DOWNTO
90243: IFFALSE 90579
// begin if IsLive ( minersList [ i ] ) then
90245: LD_EXP 132
90249: PUSH
90250: LD_VAR 0 1
90254: ARRAY
90255: PPUSH
90256: CALL_OW 300
90260: IFFALSE 90288
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
90262: LD_EXP 132
90266: PUSH
90267: LD_VAR 0 1
90271: ARRAY
90272: PPUSH
90273: LD_EXP 133
90277: PUSH
90278: LD_VAR 0 1
90282: ARRAY
90283: PPUSH
90284: CALL_OW 505
// if not minerMinesList [ i ] then
90288: LD_EXP 133
90292: PUSH
90293: LD_VAR 0 1
90297: ARRAY
90298: NOT
90299: IFFALSE 90303
// continue ;
90301: GO 90242
// for j := minerMinesList [ i ] downto 1 do
90303: LD_ADDR_VAR 0 2
90307: PUSH
90308: DOUBLE
90309: LD_EXP 133
90313: PUSH
90314: LD_VAR 0 1
90318: ARRAY
90319: INC
90320: ST_TO_ADDR
90321: LD_INT 1
90323: PUSH
90324: FOR_DOWNTO
90325: IFFALSE 90575
// begin side := GetSide ( minersList [ i ] ) ;
90327: LD_ADDR_VAR 0 3
90331: PUSH
90332: LD_EXP 132
90336: PUSH
90337: LD_VAR 0 1
90341: ARRAY
90342: PPUSH
90343: CALL_OW 255
90347: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
90348: LD_ADDR_VAR 0 4
90352: PUSH
90353: LD_EXP 133
90357: PUSH
90358: LD_VAR 0 1
90362: ARRAY
90363: PUSH
90364: LD_VAR 0 2
90368: ARRAY
90369: PUSH
90370: LD_INT 1
90372: ARRAY
90373: PPUSH
90374: LD_EXP 133
90378: PUSH
90379: LD_VAR 0 1
90383: ARRAY
90384: PUSH
90385: LD_VAR 0 2
90389: ARRAY
90390: PUSH
90391: LD_INT 2
90393: ARRAY
90394: PPUSH
90395: CALL_OW 428
90399: ST_TO_ADDR
// if not tmp then
90400: LD_VAR 0 4
90404: NOT
90405: IFFALSE 90409
// continue ;
90407: GO 90324
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
90409: LD_VAR 0 4
90413: PUSH
90414: LD_INT 81
90416: PUSH
90417: LD_VAR 0 3
90421: PUSH
90422: EMPTY
90423: LIST
90424: LIST
90425: PPUSH
90426: CALL_OW 69
90430: IN
90431: PUSH
90432: LD_EXP 133
90436: PUSH
90437: LD_VAR 0 1
90441: ARRAY
90442: PUSH
90443: LD_VAR 0 2
90447: ARRAY
90448: PUSH
90449: LD_INT 1
90451: ARRAY
90452: PPUSH
90453: LD_EXP 133
90457: PUSH
90458: LD_VAR 0 1
90462: ARRAY
90463: PUSH
90464: LD_VAR 0 2
90468: ARRAY
90469: PUSH
90470: LD_INT 2
90472: ARRAY
90473: PPUSH
90474: CALL_OW 458
90478: AND
90479: IFFALSE 90573
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
90481: LD_EXP 133
90485: PUSH
90486: LD_VAR 0 1
90490: ARRAY
90491: PUSH
90492: LD_VAR 0 2
90496: ARRAY
90497: PUSH
90498: LD_INT 1
90500: ARRAY
90501: PPUSH
90502: LD_EXP 133
90506: PUSH
90507: LD_VAR 0 1
90511: ARRAY
90512: PUSH
90513: LD_VAR 0 2
90517: ARRAY
90518: PUSH
90519: LD_INT 2
90521: ARRAY
90522: PPUSH
90523: LD_VAR 0 3
90527: PPUSH
90528: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
90532: LD_ADDR_EXP 133
90536: PUSH
90537: LD_EXP 133
90541: PPUSH
90542: LD_VAR 0 1
90546: PPUSH
90547: LD_EXP 133
90551: PUSH
90552: LD_VAR 0 1
90556: ARRAY
90557: PPUSH
90558: LD_VAR 0 2
90562: PPUSH
90563: CALL_OW 3
90567: PPUSH
90568: CALL_OW 1
90572: ST_TO_ADDR
// end ; end ;
90573: GO 90324
90575: POP
90576: POP
// end ;
90577: GO 90242
90579: POP
90580: POP
// end ;
90581: PPOPN 4
90583: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
90584: LD_INT 0
90586: PPUSH
90587: PPUSH
// result := false ;
90588: LD_ADDR_VAR 0 4
90592: PUSH
90593: LD_INT 0
90595: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
90596: LD_VAR 0 1
90600: PPUSH
90601: CALL_OW 264
90605: PUSH
90606: LD_INT 81
90608: EQUAL
90609: NOT
90610: IFFALSE 90614
// exit ;
90612: GO 90854
// index := GetElementIndex ( minersList , unit ) ;
90614: LD_ADDR_VAR 0 5
90618: PUSH
90619: LD_EXP 132
90623: PPUSH
90624: LD_VAR 0 1
90628: PPUSH
90629: CALL 34195 0 2
90633: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
90634: LD_EXP 133
90638: PUSH
90639: LD_VAR 0 5
90643: ARRAY
90644: PUSH
90645: LD_EXP 134
90649: GREATEREQUAL
90650: IFFALSE 90654
// exit ;
90652: GO 90854
// ComMoveXY ( unit , x , y ) ;
90654: LD_VAR 0 1
90658: PPUSH
90659: LD_VAR 0 2
90663: PPUSH
90664: LD_VAR 0 3
90668: PPUSH
90669: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90673: LD_INT 35
90675: PPUSH
90676: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
90680: LD_VAR 0 1
90684: PPUSH
90685: LD_VAR 0 2
90689: PPUSH
90690: LD_VAR 0 3
90694: PPUSH
90695: CALL 65947 0 3
90699: NOT
90700: PUSH
90701: LD_VAR 0 1
90705: PPUSH
90706: CALL_OW 314
90710: AND
90711: IFFALSE 90715
// exit ;
90713: GO 90854
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
90715: LD_VAR 0 2
90719: PPUSH
90720: LD_VAR 0 3
90724: PPUSH
90725: CALL_OW 428
90729: PUSH
90730: LD_VAR 0 1
90734: EQUAL
90735: PUSH
90736: LD_VAR 0 1
90740: PPUSH
90741: CALL_OW 314
90745: NOT
90746: AND
90747: IFFALSE 90673
// PlaySoundXY ( x , y , PlantMine ) ;
90749: LD_VAR 0 2
90753: PPUSH
90754: LD_VAR 0 3
90758: PPUSH
90759: LD_STRING PlantMine
90761: PPUSH
90762: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
90766: LD_VAR 0 2
90770: PPUSH
90771: LD_VAR 0 3
90775: PPUSH
90776: LD_VAR 0 1
90780: PPUSH
90781: CALL_OW 255
90785: PPUSH
90786: LD_INT 0
90788: PPUSH
90789: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
90793: LD_ADDR_EXP 133
90797: PUSH
90798: LD_EXP 133
90802: PPUSH
90803: LD_VAR 0 5
90807: PUSH
90808: LD_EXP 133
90812: PUSH
90813: LD_VAR 0 5
90817: ARRAY
90818: PUSH
90819: LD_INT 1
90821: PLUS
90822: PUSH
90823: EMPTY
90824: LIST
90825: LIST
90826: PPUSH
90827: LD_VAR 0 2
90831: PUSH
90832: LD_VAR 0 3
90836: PUSH
90837: EMPTY
90838: LIST
90839: LIST
90840: PPUSH
90841: CALL 34410 0 3
90845: ST_TO_ADDR
// result := true ;
90846: LD_ADDR_VAR 0 4
90850: PUSH
90851: LD_INT 1
90853: ST_TO_ADDR
// end ;
90854: LD_VAR 0 4
90858: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
90859: LD_INT 0
90861: PPUSH
90862: PPUSH
90863: PPUSH
// if not unit in minersList then
90864: LD_VAR 0 1
90868: PUSH
90869: LD_EXP 132
90873: IN
90874: NOT
90875: IFFALSE 90879
// exit ;
90877: GO 91271
// index := GetElementIndex ( minersList , unit ) ;
90879: LD_ADDR_VAR 0 6
90883: PUSH
90884: LD_EXP 132
90888: PPUSH
90889: LD_VAR 0 1
90893: PPUSH
90894: CALL 34195 0 2
90898: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
90899: LD_ADDR_VAR 0 5
90903: PUSH
90904: DOUBLE
90905: LD_EXP 133
90909: PUSH
90910: LD_VAR 0 6
90914: ARRAY
90915: INC
90916: ST_TO_ADDR
90917: LD_INT 1
90919: PUSH
90920: FOR_DOWNTO
90921: IFFALSE 91082
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
90923: LD_EXP 133
90927: PUSH
90928: LD_VAR 0 6
90932: ARRAY
90933: PUSH
90934: LD_VAR 0 5
90938: ARRAY
90939: PUSH
90940: LD_INT 1
90942: ARRAY
90943: PUSH
90944: LD_VAR 0 2
90948: EQUAL
90949: PUSH
90950: LD_EXP 133
90954: PUSH
90955: LD_VAR 0 6
90959: ARRAY
90960: PUSH
90961: LD_VAR 0 5
90965: ARRAY
90966: PUSH
90967: LD_INT 2
90969: ARRAY
90970: PUSH
90971: LD_VAR 0 3
90975: EQUAL
90976: AND
90977: IFFALSE 91080
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90979: LD_EXP 133
90983: PUSH
90984: LD_VAR 0 6
90988: ARRAY
90989: PUSH
90990: LD_VAR 0 5
90994: ARRAY
90995: PUSH
90996: LD_INT 1
90998: ARRAY
90999: PPUSH
91000: LD_EXP 133
91004: PUSH
91005: LD_VAR 0 6
91009: ARRAY
91010: PUSH
91011: LD_VAR 0 5
91015: ARRAY
91016: PUSH
91017: LD_INT 2
91019: ARRAY
91020: PPUSH
91021: LD_VAR 0 1
91025: PPUSH
91026: CALL_OW 255
91030: PPUSH
91031: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
91035: LD_ADDR_EXP 133
91039: PUSH
91040: LD_EXP 133
91044: PPUSH
91045: LD_VAR 0 6
91049: PPUSH
91050: LD_EXP 133
91054: PUSH
91055: LD_VAR 0 6
91059: ARRAY
91060: PPUSH
91061: LD_VAR 0 5
91065: PPUSH
91066: CALL_OW 3
91070: PPUSH
91071: CALL_OW 1
91075: ST_TO_ADDR
// exit ;
91076: POP
91077: POP
91078: GO 91271
// end ; end ;
91080: GO 90920
91082: POP
91083: POP
// for i := minerMinesList [ index ] downto 1 do
91084: LD_ADDR_VAR 0 5
91088: PUSH
91089: DOUBLE
91090: LD_EXP 133
91094: PUSH
91095: LD_VAR 0 6
91099: ARRAY
91100: INC
91101: ST_TO_ADDR
91102: LD_INT 1
91104: PUSH
91105: FOR_DOWNTO
91106: IFFALSE 91269
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
91108: LD_EXP 133
91112: PUSH
91113: LD_VAR 0 6
91117: ARRAY
91118: PUSH
91119: LD_VAR 0 5
91123: ARRAY
91124: PUSH
91125: LD_INT 1
91127: ARRAY
91128: PPUSH
91129: LD_EXP 133
91133: PUSH
91134: LD_VAR 0 6
91138: ARRAY
91139: PUSH
91140: LD_VAR 0 5
91144: ARRAY
91145: PUSH
91146: LD_INT 2
91148: ARRAY
91149: PPUSH
91150: LD_VAR 0 2
91154: PPUSH
91155: LD_VAR 0 3
91159: PPUSH
91160: CALL_OW 298
91164: PUSH
91165: LD_INT 6
91167: LESS
91168: IFFALSE 91267
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
91170: LD_EXP 133
91174: PUSH
91175: LD_VAR 0 6
91179: ARRAY
91180: PUSH
91181: LD_VAR 0 5
91185: ARRAY
91186: PUSH
91187: LD_INT 1
91189: ARRAY
91190: PPUSH
91191: LD_EXP 133
91195: PUSH
91196: LD_VAR 0 6
91200: ARRAY
91201: PUSH
91202: LD_VAR 0 5
91206: ARRAY
91207: PUSH
91208: LD_INT 2
91210: ARRAY
91211: PPUSH
91212: LD_VAR 0 1
91216: PPUSH
91217: CALL_OW 255
91221: PPUSH
91222: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
91226: LD_ADDR_EXP 133
91230: PUSH
91231: LD_EXP 133
91235: PPUSH
91236: LD_VAR 0 6
91240: PPUSH
91241: LD_EXP 133
91245: PUSH
91246: LD_VAR 0 6
91250: ARRAY
91251: PPUSH
91252: LD_VAR 0 5
91256: PPUSH
91257: CALL_OW 3
91261: PPUSH
91262: CALL_OW 1
91266: ST_TO_ADDR
// end ; end ;
91267: GO 91105
91269: POP
91270: POP
// end ;
91271: LD_VAR 0 4
91275: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
91276: LD_INT 0
91278: PPUSH
91279: PPUSH
91280: PPUSH
91281: PPUSH
91282: PPUSH
91283: PPUSH
91284: PPUSH
91285: PPUSH
91286: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
91287: LD_VAR 0 1
91291: PPUSH
91292: CALL_OW 264
91296: PUSH
91297: LD_INT 81
91299: EQUAL
91300: NOT
91301: PUSH
91302: LD_VAR 0 1
91306: PUSH
91307: LD_EXP 132
91311: IN
91312: NOT
91313: OR
91314: IFFALSE 91318
// exit ;
91316: GO 91640
// index := GetElementIndex ( minersList , unit ) ;
91318: LD_ADDR_VAR 0 6
91322: PUSH
91323: LD_EXP 132
91327: PPUSH
91328: LD_VAR 0 1
91332: PPUSH
91333: CALL 34195 0 2
91337: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
91338: LD_ADDR_VAR 0 8
91342: PUSH
91343: LD_EXP 134
91347: PUSH
91348: LD_EXP 133
91352: PUSH
91353: LD_VAR 0 6
91357: ARRAY
91358: MINUS
91359: ST_TO_ADDR
// if not minesFreeAmount then
91360: LD_VAR 0 8
91364: NOT
91365: IFFALSE 91369
// exit ;
91367: GO 91640
// tmp := [ ] ;
91369: LD_ADDR_VAR 0 7
91373: PUSH
91374: EMPTY
91375: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
91376: LD_ADDR_VAR 0 5
91380: PUSH
91381: DOUBLE
91382: LD_INT 1
91384: DEC
91385: ST_TO_ADDR
91386: LD_VAR 0 8
91390: PUSH
91391: FOR_TO
91392: IFFALSE 91587
// begin _d := rand ( 0 , 5 ) ;
91394: LD_ADDR_VAR 0 11
91398: PUSH
91399: LD_INT 0
91401: PPUSH
91402: LD_INT 5
91404: PPUSH
91405: CALL_OW 12
91409: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
91410: LD_ADDR_VAR 0 12
91414: PUSH
91415: LD_INT 2
91417: PPUSH
91418: LD_INT 6
91420: PPUSH
91421: CALL_OW 12
91425: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
91426: LD_ADDR_VAR 0 9
91430: PUSH
91431: LD_VAR 0 2
91435: PPUSH
91436: LD_VAR 0 11
91440: PPUSH
91441: LD_VAR 0 12
91445: PPUSH
91446: CALL_OW 272
91450: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
91451: LD_ADDR_VAR 0 10
91455: PUSH
91456: LD_VAR 0 3
91460: PPUSH
91461: LD_VAR 0 11
91465: PPUSH
91466: LD_VAR 0 12
91470: PPUSH
91471: CALL_OW 273
91475: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
91476: LD_VAR 0 9
91480: PPUSH
91481: LD_VAR 0 10
91485: PPUSH
91486: CALL_OW 488
91490: PUSH
91491: LD_VAR 0 9
91495: PUSH
91496: LD_VAR 0 10
91500: PUSH
91501: EMPTY
91502: LIST
91503: LIST
91504: PUSH
91505: LD_VAR 0 7
91509: IN
91510: NOT
91511: AND
91512: PUSH
91513: LD_VAR 0 9
91517: PPUSH
91518: LD_VAR 0 10
91522: PPUSH
91523: CALL_OW 458
91527: NOT
91528: AND
91529: IFFALSE 91571
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
91531: LD_ADDR_VAR 0 7
91535: PUSH
91536: LD_VAR 0 7
91540: PPUSH
91541: LD_VAR 0 7
91545: PUSH
91546: LD_INT 1
91548: PLUS
91549: PPUSH
91550: LD_VAR 0 9
91554: PUSH
91555: LD_VAR 0 10
91559: PUSH
91560: EMPTY
91561: LIST
91562: LIST
91563: PPUSH
91564: CALL_OW 1
91568: ST_TO_ADDR
91569: GO 91585
// i := i - 1 ;
91571: LD_ADDR_VAR 0 5
91575: PUSH
91576: LD_VAR 0 5
91580: PUSH
91581: LD_INT 1
91583: MINUS
91584: ST_TO_ADDR
// end ;
91585: GO 91391
91587: POP
91588: POP
// for i in tmp do
91589: LD_ADDR_VAR 0 5
91593: PUSH
91594: LD_VAR 0 7
91598: PUSH
91599: FOR_IN
91600: IFFALSE 91638
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
91602: LD_VAR 0 1
91606: PPUSH
91607: LD_VAR 0 5
91611: PUSH
91612: LD_INT 1
91614: ARRAY
91615: PPUSH
91616: LD_VAR 0 5
91620: PUSH
91621: LD_INT 2
91623: ARRAY
91624: PPUSH
91625: CALL 90584 0 3
91629: NOT
91630: IFFALSE 91636
// exit ;
91632: POP
91633: POP
91634: GO 91640
91636: GO 91599
91638: POP
91639: POP
// end ;
91640: LD_VAR 0 4
91644: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
91645: LD_INT 0
91647: PPUSH
91648: PPUSH
91649: PPUSH
91650: PPUSH
91651: PPUSH
91652: PPUSH
91653: PPUSH
// if not GetClass ( unit ) = class_sniper then
91654: LD_VAR 0 1
91658: PPUSH
91659: CALL_OW 257
91663: PUSH
91664: LD_INT 5
91666: EQUAL
91667: NOT
91668: IFFALSE 91672
// exit ;
91670: GO 92060
// dist := 8 ;
91672: LD_ADDR_VAR 0 5
91676: PUSH
91677: LD_INT 8
91679: ST_TO_ADDR
// viewRange := 12 ;
91680: LD_ADDR_VAR 0 7
91684: PUSH
91685: LD_INT 12
91687: ST_TO_ADDR
// side := GetSide ( unit ) ;
91688: LD_ADDR_VAR 0 6
91692: PUSH
91693: LD_VAR 0 1
91697: PPUSH
91698: CALL_OW 255
91702: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
91703: LD_INT 61
91705: PPUSH
91706: LD_VAR 0 6
91710: PPUSH
91711: CALL_OW 321
91715: PUSH
91716: LD_INT 2
91718: EQUAL
91719: IFFALSE 91729
// viewRange := 16 ;
91721: LD_ADDR_VAR 0 7
91725: PUSH
91726: LD_INT 16
91728: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
91729: LD_VAR 0 1
91733: PPUSH
91734: LD_VAR 0 2
91738: PPUSH
91739: LD_VAR 0 3
91743: PPUSH
91744: CALL_OW 297
91748: PUSH
91749: LD_VAR 0 5
91753: GREATER
91754: IFFALSE 91833
// begin ComMoveXY ( unit , x , y ) ;
91756: LD_VAR 0 1
91760: PPUSH
91761: LD_VAR 0 2
91765: PPUSH
91766: LD_VAR 0 3
91770: PPUSH
91771: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
91775: LD_INT 35
91777: PPUSH
91778: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
91782: LD_VAR 0 1
91786: PPUSH
91787: LD_VAR 0 2
91791: PPUSH
91792: LD_VAR 0 3
91796: PPUSH
91797: CALL 65947 0 3
91801: NOT
91802: IFFALSE 91806
// exit ;
91804: GO 92060
// until GetDistUnitXY ( unit , x , y ) < dist ;
91806: LD_VAR 0 1
91810: PPUSH
91811: LD_VAR 0 2
91815: PPUSH
91816: LD_VAR 0 3
91820: PPUSH
91821: CALL_OW 297
91825: PUSH
91826: LD_VAR 0 5
91830: LESS
91831: IFFALSE 91775
// end ; ComTurnXY ( unit , x , y ) ;
91833: LD_VAR 0 1
91837: PPUSH
91838: LD_VAR 0 2
91842: PPUSH
91843: LD_VAR 0 3
91847: PPUSH
91848: CALL_OW 118
// wait ( 5 ) ;
91852: LD_INT 5
91854: PPUSH
91855: CALL_OW 67
// _d := GetDir ( unit ) ;
91859: LD_ADDR_VAR 0 10
91863: PUSH
91864: LD_VAR 0 1
91868: PPUSH
91869: CALL_OW 254
91873: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
91874: LD_ADDR_VAR 0 8
91878: PUSH
91879: LD_VAR 0 1
91883: PPUSH
91884: CALL_OW 250
91888: PPUSH
91889: LD_VAR 0 10
91893: PPUSH
91894: LD_VAR 0 5
91898: PPUSH
91899: CALL_OW 272
91903: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
91904: LD_ADDR_VAR 0 9
91908: PUSH
91909: LD_VAR 0 1
91913: PPUSH
91914: CALL_OW 251
91918: PPUSH
91919: LD_VAR 0 10
91923: PPUSH
91924: LD_VAR 0 5
91928: PPUSH
91929: CALL_OW 273
91933: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
91934: LD_VAR 0 8
91938: PPUSH
91939: LD_VAR 0 9
91943: PPUSH
91944: CALL_OW 488
91948: NOT
91949: IFFALSE 91953
// exit ;
91951: GO 92060
// ComAnimCustom ( unit , 1 ) ;
91953: LD_VAR 0 1
91957: PPUSH
91958: LD_INT 1
91960: PPUSH
91961: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
91965: LD_VAR 0 8
91969: PPUSH
91970: LD_VAR 0 9
91974: PPUSH
91975: LD_VAR 0 6
91979: PPUSH
91980: LD_VAR 0 7
91984: PPUSH
91985: CALL_OW 330
// repeat wait ( 1 ) ;
91989: LD_INT 1
91991: PPUSH
91992: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
91996: LD_VAR 0 1
92000: PPUSH
92001: CALL_OW 316
92005: PUSH
92006: LD_VAR 0 1
92010: PPUSH
92011: CALL_OW 314
92015: OR
92016: PUSH
92017: LD_VAR 0 1
92021: PPUSH
92022: CALL_OW 302
92026: NOT
92027: OR
92028: PUSH
92029: LD_VAR 0 1
92033: PPUSH
92034: CALL_OW 301
92038: OR
92039: IFFALSE 91989
// RemoveSeeing ( _x , _y , side ) ;
92041: LD_VAR 0 8
92045: PPUSH
92046: LD_VAR 0 9
92050: PPUSH
92051: LD_VAR 0 6
92055: PPUSH
92056: CALL_OW 331
// end ; end_of_file
92060: LD_VAR 0 4
92064: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
92065: LD_VAR 0 1
92069: PPUSH
92070: LD_VAR 0 2
92074: PPUSH
92075: LD_VAR 0 3
92079: PPUSH
92080: LD_VAR 0 4
92084: PPUSH
92085: LD_VAR 0 5
92089: PPUSH
92090: LD_VAR 0 6
92094: PPUSH
92095: CALL 71527 0 6
// end ;
92099: PPOPN 6
92101: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
92102: LD_INT 0
92104: PPUSH
// begin if not units then
92105: LD_VAR 0 1
92109: NOT
92110: IFFALSE 92114
// exit ;
92112: GO 92114
// end ;
92114: PPOPN 7
92116: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
92117: CALL 71431 0 0
// end ;
92121: PPOPN 1
92123: END
