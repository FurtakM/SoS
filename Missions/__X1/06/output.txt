// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ( natureArea , swampArea ) ;
   8: LD_INT 1
  10: PPUSH
  11: LD_INT 3
  13: PPUSH
  14: CALL 1901 0 2
// PrepareArabian ;
  18: CALL 62 0 0
// PrepareRussian ;
  22: CALL 2717 0 0
// Action ;
  26: CALL 2764 0 0
// FogOff ( 3 ) ;
  30: LD_INT 3
  32: PPUSH
  33: CALL_OW 344
// end ;
  37: END
// export debug , prefix ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := true ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// prefix := 05_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 05_
  56: ST_TO_ADDR
// end ; end_of_file
  57: LD_VAR 0 1
  61: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeApes ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers ; begin
  62: LD_INT 0
  64: PPUSH
  65: PPUSH
  66: PPUSH
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
// uc_nation := 2 ;
  75: LD_ADDR_OWVAR 21
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// uc_side := 5 ;
  83: LD_ADDR_OWVAR 20
  87: PUSH
  88: LD_INT 5
  90: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
  91: LD_ADDR_EXP 11
  95: PUSH
  96: LD_STRING Abdul
  98: PPUSH
  99: LD_INT 0
 101: PPUSH
 102: LD_STRING 
 104: PPUSH
 105: CALL 3360 0 3
 109: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 110: LD_ADDR_EXP 13
 114: PUSH
 115: LD_STRING Omar
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_STRING 
 123: PPUSH
 124: CALL 3360 0 3
 128: ST_TO_ADDR
// uc_side := 2 ;
 129: LD_ADDR_OWVAR 20
 133: PUSH
 134: LD_INT 2
 136: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 137: LD_ADDR_EXP 3
 141: PUSH
 142: LD_STRING Heike
 144: PPUSH
 145: LD_EXP 1
 149: NOT
 150: PPUSH
 151: LD_EXP 2
 155: PPUSH
 156: CALL 3360 0 3
 160: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_STRING Ibrahim
 168: PPUSH
 169: LD_EXP 1
 173: NOT
 174: PPUSH
 175: LD_EXP 2
 179: PPUSH
 180: CALL 3360 0 3
 184: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 185: LD_ADDR_EXP 4
 189: PUSH
 190: LD_STRING Givi
 192: PPUSH
 193: LD_EXP 1
 197: NOT
 198: PPUSH
 199: LD_EXP 2
 203: PPUSH
 204: CALL 3360 0 3
 208: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 209: LD_ADDR_EXP 7
 213: PUSH
 214: LD_STRING Kamil
 216: PPUSH
 217: LD_EXP 1
 221: NOT
 222: PPUSH
 223: LD_EXP 2
 227: PPUSH
 228: CALL 3360 0 3
 232: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 233: LD_ADDR_EXP 8
 237: PUSH
 238: LD_STRING Kaia
 240: PPUSH
 241: LD_EXP 1
 245: NOT
 246: PPUSH
 247: LD_EXP 2
 251: PPUSH
 252: CALL 3360 0 3
 256: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 257: LD_ADDR_EXP 9
 261: PUSH
 262: LD_STRING Sophia
 264: PPUSH
 265: LD_EXP 1
 269: NOT
 270: PPUSH
 271: LD_EXP 2
 275: PPUSH
 276: CALL 3360 0 3
 280: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 281: LD_ADDR_EXP 10
 285: PUSH
 286: LD_STRING Markov
 288: PPUSH
 289: LD_EXP 1
 293: NOT
 294: PPUSH
 295: LD_EXP 2
 299: PPUSH
 300: CALL 3360 0 3
 304: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 305: LD_ADDR_EXP 15
 309: PUSH
 310: LD_STRING Aviradze
 312: PPUSH
 313: LD_EXP 1
 317: NOT
 318: PPUSH
 319: LD_EXP 2
 323: PPUSH
 324: CALL 3360 0 3
 328: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 329: LD_ADDR_EXP 14
 333: PUSH
 334: LD_STRING Kurt
 336: PPUSH
 337: LD_EXP 1
 341: NOT
 342: PPUSH
 343: LD_EXP 2
 347: PPUSH
 348: CALL 3360 0 3
 352: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 353: LD_ADDR_EXP 5
 357: PUSH
 358: LD_STRING Mike
 360: PPUSH
 361: LD_EXP 1
 365: NOT
 366: PPUSH
 367: LD_EXP 2
 371: PPUSH
 372: CALL 3360 0 3
 376: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 377: LD_ADDR_EXP 12
 381: PUSH
 382: LD_STRING Olaf
 384: PPUSH
 385: LD_INT 0
 387: PPUSH
 388: LD_STRING 
 390: PPUSH
 391: CALL 3360 0 3
 395: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 396: LD_ADDR_EXP 16
 400: PUSH
 401: LD_STRING 05_others
 403: PPUSH
 404: CALL_OW 31
 408: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 409: LD_ADDR_EXP 17
 413: PUSH
 414: LD_STRING 05_apes
 416: PPUSH
 417: CALL_OW 31
 421: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 422: LD_ADDR_VAR 0 5
 426: PUSH
 427: LD_STRING 05_Radar
 429: PPUSH
 430: LD_EXP 1
 434: PPUSH
 435: CALL_OW 30
 439: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 440: LD_ADDR_VAR 0 6
 444: PUSH
 445: LD_STRING 05_RemoteControl
 447: PPUSH
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 30
 457: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 458: LD_ADDR_VAR 0 7
 462: PUSH
 463: LD_STRING 05_DrugsTested
 465: PPUSH
 466: LD_EXP 1
 470: PPUSH
 471: CALL_OW 30
 475: ST_TO_ADDR
// if hasDrugs then
 476: LD_VAR 0 7
 480: IFFALSE 495
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 482: LD_INT 5
 484: PPUSH
 485: LD_INT 2
 487: PPUSH
 488: LD_INT 2
 490: PPUSH
 491: CALL_OW 322
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_INT 0
 502: PUSH
 503: LD_INT 206
 505: PUSH
 506: LD_INT 80
 508: PUSH
 509: LD_INT 1
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 32
 520: PUSH
 521: LD_INT 221
 523: PUSH
 524: LD_INT 95
 526: PUSH
 527: LD_INT 5
 529: PUSH
 530: LD_INT 23
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 32
 542: PUSH
 543: LD_INT 223
 545: PUSH
 546: LD_INT 88
 548: PUSH
 549: LD_INT 5
 551: PUSH
 552: LD_INT 24
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 32
 564: PUSH
 565: LD_INT 202
 567: PUSH
 568: LD_INT 64
 570: PUSH
 571: LD_INT 2
 573: PUSH
 574: LD_INT 25
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: PUSH
 584: LD_INT 3
 586: PUSH
 587: LD_INT 203
 589: PUSH
 590: LD_INT 91
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: LIST
 600: LIST
 601: PUSH
 602: LD_INT 8
 604: PUSH
 605: LD_INT 217
 607: PUSH
 608: LD_INT 78
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 27
 622: PUSH
 623: LD_INT 220
 625: PUSH
 626: LD_INT 99
 628: PUSH
 629: LD_INT 1
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 27
 640: PUSH
 641: LD_INT 220
 643: PUSH
 644: LD_INT 103
 646: PUSH
 647: LD_INT 1
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 27
 658: PUSH
 659: LD_INT 216
 661: PUSH
 662: LD_INT 102
 664: PUSH
 665: LD_INT 1
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 17
 676: PUSH
 677: LD_INT 203
 679: PUSH
 680: LD_INT 94
 682: PUSH
 683: LD_INT 0
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 23
 694: PUSH
 695: LD_INT 200
 697: PUSH
 698: LD_INT 88
 700: PUSH
 701: LD_INT 2
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 16
 712: PUSH
 713: LD_INT 199
 715: PUSH
 716: LD_INT 91
 718: PUSH
 719: LD_INT 1
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 26
 730: PUSH
 731: LD_INT 197
 733: PUSH
 734: LD_INT 81
 736: PUSH
 737: LD_INT 1
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: LD_INT 26
 748: PUSH
 749: LD_INT 197
 751: PUSH
 752: LD_INT 78
 754: PUSH
 755: LD_INT 3
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: LIST
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: ST_TO_ADDR
// if hasRadar then
 780: LD_VAR 0 5
 784: IFFALSE 828
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
 786: LD_ADDR_VAR 0 4
 790: PUSH
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_VAR 0 4
 800: PUSH
 801: LD_INT 1
 803: PLUS
 804: PPUSH
 805: LD_INT 20
 807: PUSH
 808: LD_INT 203
 810: PUSH
 811: LD_INT 87
 813: PUSH
 814: LD_INT 3
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: PPUSH
 823: CALL_OW 1
 827: ST_TO_ADDR
// if hasRemote then
 828: LD_VAR 0 6
 832: IFFALSE 876
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
 834: LD_ADDR_VAR 0 4
 838: PUSH
 839: LD_VAR 0 4
 843: PPUSH
 844: LD_VAR 0 4
 848: PUSH
 849: LD_INT 1
 851: PLUS
 852: PPUSH
 853: LD_INT 22
 855: PUSH
 856: LD_INT 207
 858: PUSH
 859: LD_INT 95
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PPUSH
 871: CALL_OW 1
 875: ST_TO_ADDR
// for i in base do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: LD_VAR 0 4
 885: PUSH
 886: FOR_IN
 887: IFFALSE 1068
// begin bc_type := i [ 1 ] ;
 889: LD_ADDR_OWVAR 42
 893: PUSH
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: ST_TO_ADDR
// bc_level := 3 ;
 903: LD_ADDR_OWVAR 43
 907: PUSH
 908: LD_INT 3
 910: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
 911: LD_VAR 0 2
 915: PUSH
 916: LD_INT 1
 918: ARRAY
 919: PUSH
 920: LD_INT 8
 922: EQUAL
 923: IFFALSE 958
// begin bc_kind1 := b_lab_weapon ;
 925: LD_ADDR_OWVAR 44
 929: PUSH
 930: LD_INT 10
 932: ST_TO_ADDR
// if hasRadar then
 933: LD_VAR 0 5
 937: IFFALSE 949
// bc_kind2 := b_lab_opto else
 939: LD_ADDR_OWVAR 45
 943: PUSH
 944: LD_INT 15
 946: ST_TO_ADDR
 947: GO 958
// bc_kind2 := - 1 ;
 949: LD_ADDR_OWVAR 45
 953: PUSH
 954: LD_INT 1
 956: NEG
 957: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
 958: LD_ADDR_VAR 0 3
 962: PUSH
 963: LD_VAR 0 2
 967: PUSH
 968: LD_INT 2
 970: ARRAY
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 3
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 4
 988: ARRAY
 989: PPUSH
 990: CALL_OW 47
 994: ST_TO_ADDR
// if i > 4 then
 995: LD_VAR 0 2
 999: PUSH
1000: LD_INT 4
1002: GREATER
1003: IFFALSE 1023
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1005: LD_VAR 0 3
1009: PPUSH
1010: LD_VAR 0 2
1014: PUSH
1015: LD_INT 5
1017: ARRAY
1018: PPUSH
1019: CALL_OW 431
// if i [ 1 ] = b_bunker then
1023: LD_VAR 0 2
1027: PUSH
1028: LD_INT 1
1030: ARRAY
1031: PUSH
1032: LD_INT 32
1034: EQUAL
1035: IFFALSE 1066
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1037: LD_ADDR_VAR 0 11
1041: PUSH
1042: LD_VAR 0 11
1046: PPUSH
1047: LD_VAR 0 11
1051: PUSH
1052: LD_INT 1
1054: PLUS
1055: PPUSH
1056: LD_VAR 0 3
1060: PPUSH
1061: CALL_OW 1
1065: ST_TO_ADDR
// end ;
1066: GO 886
1068: POP
1069: POP
// depot := HexInfo ( 206 , 80 ) ;
1070: LD_ADDR_VAR 0 9
1074: PUSH
1075: LD_INT 206
1077: PPUSH
1078: LD_INT 80
1080: PPUSH
1081: CALL_OW 428
1085: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1086: LD_ADDR_VAR 0 8
1090: PUSH
1091: LD_INT 203
1093: PPUSH
1094: LD_INT 91
1096: PPUSH
1097: CALL_OW 428
1101: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1102: LD_ADDR_VAR 0 10
1106: PUSH
1107: LD_INT 217
1109: PPUSH
1110: LD_INT 78
1112: PPUSH
1113: CALL_OW 428
1117: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1118: LD_VAR 0 9
1122: PPUSH
1123: CALL_OW 274
1127: PPUSH
1128: LD_INT 1
1130: PPUSH
1131: LD_INT 360
1133: PUSH
1134: LD_INT 260
1136: PUSH
1137: LD_INT 160
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_OWVAR 67
1149: ARRAY
1150: PPUSH
1151: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1155: LD_VAR 0 9
1159: PPUSH
1160: CALL_OW 274
1164: PPUSH
1165: LD_INT 2
1167: PPUSH
1168: LD_INT 200
1170: PUSH
1171: LD_INT 150
1173: PUSH
1174: LD_INT 100
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_OWVAR 67
1186: ARRAY
1187: PPUSH
1188: CALL_OW 277
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1192: LD_EXP 3
1196: PPUSH
1197: LD_INT 213
1199: PPUSH
1200: LD_INT 87
1202: PPUSH
1203: LD_INT 0
1205: PPUSH
1206: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1210: LD_EXP 3
1214: PPUSH
1215: LD_INT 214
1217: PPUSH
1218: LD_INT 87
1220: PPUSH
1221: CALL_OW 118
// if Kaia then
1225: LD_EXP 8
1229: IFFALSE 1264
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1231: LD_EXP 8
1235: PPUSH
1236: LD_INT 213
1238: PPUSH
1239: LD_INT 85
1241: PPUSH
1242: LD_INT 0
1244: PPUSH
1245: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1249: LD_EXP 8
1253: PPUSH
1254: LD_INT 215
1256: PPUSH
1257: LD_INT 87
1259: PPUSH
1260: CALL_OW 118
// end ; if Olaf and Kaia then
1264: LD_EXP 12
1268: PUSH
1269: LD_EXP 8
1273: AND
1274: IFFALSE 1311
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1276: LD_EXP 12
1280: PPUSH
1281: LD_INT 215
1283: PPUSH
1284: LD_INT 87
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1294: LD_EXP 12
1298: PPUSH
1299: LD_INT 213
1301: PPUSH
1302: LD_INT 85
1304: PPUSH
1305: CALL_OW 118
// end else
1309: GO 1331
// if Olaf then
1311: LD_EXP 12
1315: IFFALSE 1331
// PlaceHumanInUnit ( Olaf , factory ) ;
1317: LD_EXP 12
1321: PPUSH
1322: LD_VAR 0 8
1326: PPUSH
1327: CALL_OW 52
// if Givi then
1331: LD_EXP 4
1335: IFFALSE 1355
// PlaceHumanInUnit ( Givi , bunkers [ 1 ] ) ;
1337: LD_EXP 4
1341: PPUSH
1342: LD_VAR 0 11
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 52
// if Kurt then
1355: LD_EXP 14
1359: IFFALSE 1379
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
1361: LD_EXP 14
1365: PPUSH
1366: LD_VAR 0 11
1370: PUSH
1371: LD_INT 2
1373: ARRAY
1374: PPUSH
1375: CALL_OW 52
// if Mike then
1379: LD_EXP 5
1383: IFFALSE 1403
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
1385: LD_EXP 5
1389: PPUSH
1390: LD_VAR 0 11
1394: PUSH
1395: LD_INT 3
1397: ARRAY
1398: PPUSH
1399: CALL_OW 52
// if Kamil then
1403: LD_EXP 7
1407: IFFALSE 1423
// PlaceHumanInUnit ( Kamil , depot ) ;
1409: LD_EXP 7
1413: PPUSH
1414: LD_VAR 0 9
1418: PPUSH
1419: CALL_OW 52
// if Sophia then
1423: LD_EXP 9
1427: IFFALSE 1443
// PlaceHumanInUnit ( Sophia , depot ) ;
1429: LD_EXP 9
1433: PPUSH
1434: LD_VAR 0 9
1438: PPUSH
1439: CALL_OW 52
// if Aviradze then
1443: LD_EXP 15
1447: IFFALSE 1463
// PlaceHumanInUnit ( Aviradze , lab ) ;
1449: LD_EXP 15
1453: PPUSH
1454: LD_VAR 0 10
1458: PPUSH
1459: CALL_OW 52
// if Ibrahim then
1463: LD_EXP 6
1467: IFFALSE 1483
// PlaceHumanInUnit ( Ibrahim , lab ) ;
1469: LD_EXP 6
1473: PPUSH
1474: LD_VAR 0 10
1478: PPUSH
1479: CALL_OW 52
// if Markov then
1483: LD_EXP 10
1487: IFFALSE 1503
// PlaceHumanInUnit ( Markov , factory ) ;
1489: LD_EXP 10
1493: PPUSH
1494: LD_VAR 0 8
1498: PPUSH
1499: CALL_OW 52
// if heikeSecondSquad then
1503: LD_EXP 16
1507: IFFALSE 1547
// for i in heikeSecondSquad do
1509: LD_ADDR_VAR 0 2
1513: PUSH
1514: LD_EXP 16
1518: PUSH
1519: FOR_IN
1520: IFFALSE 1545
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
1522: LD_VAR 0 2
1526: PPUSH
1527: LD_INT 190
1529: PPUSH
1530: LD_INT 65
1532: PPUSH
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 50
1543: GO 1519
1545: POP
1546: POP
// if heikeApes then
1547: LD_EXP 17
1551: IFFALSE 1591
// for i in heikeApes do
1553: LD_ADDR_VAR 0 2
1557: PUSH
1558: LD_EXP 17
1562: PUSH
1563: FOR_IN
1564: IFFALSE 1589
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
1566: LD_VAR 0 2
1570: PPUSH
1571: LD_INT 190
1573: PPUSH
1574: LD_INT 70
1576: PPUSH
1577: LD_INT 5
1579: PPUSH
1580: LD_INT 0
1582: PPUSH
1583: CALL_OW 50
1587: GO 1563
1589: POP
1590: POP
// end ; end_of_file
1591: LD_VAR 0 1
1595: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
1596: LD_INT 0
1598: PPUSH
// uc_side := side ;
1599: LD_ADDR_OWVAR 20
1603: PUSH
1604: LD_VAR 0 1
1608: ST_TO_ADDR
// uc_nation := nation ;
1609: LD_ADDR_OWVAR 21
1613: PUSH
1614: LD_VAR 0 2
1618: ST_TO_ADDR
// vc_chassis := chassis ;
1619: LD_ADDR_OWVAR 37
1623: PUSH
1624: LD_VAR 0 3
1628: ST_TO_ADDR
// vc_engine := engine ;
1629: LD_ADDR_OWVAR 39
1633: PUSH
1634: LD_VAR 0 4
1638: ST_TO_ADDR
// vc_control := control ;
1639: LD_ADDR_OWVAR 38
1643: PUSH
1644: LD_VAR 0 5
1648: ST_TO_ADDR
// vc_weapon := weapon ;
1649: LD_ADDR_OWVAR 40
1653: PUSH
1654: LD_VAR 0 6
1658: ST_TO_ADDR
// vc_fuel_battery := fuel ;
1659: LD_ADDR_OWVAR 41
1663: PUSH
1664: LD_VAR 0 7
1668: ST_TO_ADDR
// result := CreateVehicle ;
1669: LD_ADDR_VAR 0 8
1673: PUSH
1674: CALL_OW 45
1678: ST_TO_ADDR
// end ;
1679: LD_VAR 0 8
1683: RET
// export function SayX ( units , ident ) ; var i ; begin
1684: LD_INT 0
1686: PPUSH
1687: PPUSH
// result := false ;
1688: LD_ADDR_VAR 0 3
1692: PUSH
1693: LD_INT 0
1695: ST_TO_ADDR
// if not units then
1696: LD_VAR 0 1
1700: NOT
1701: IFFALSE 1705
// exit ;
1703: GO 1759
// for i in units do
1705: LD_ADDR_VAR 0 4
1709: PUSH
1710: LD_VAR 0 1
1714: PUSH
1715: FOR_IN
1716: IFFALSE 1757
// if IsOk ( i ) then
1718: LD_VAR 0 4
1722: PPUSH
1723: CALL_OW 302
1727: IFFALSE 1755
// begin Say ( i , ident ) ;
1729: LD_VAR 0 4
1733: PPUSH
1734: LD_VAR 0 2
1738: PPUSH
1739: CALL_OW 88
// result := i ;
1743: LD_ADDR_VAR 0 3
1747: PUSH
1748: LD_VAR 0 4
1752: ST_TO_ADDR
// break ;
1753: GO 1757
// end ;
1755: GO 1715
1757: POP
1758: POP
// end ;
1759: LD_VAR 0 3
1763: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1764: LD_INT 0
1766: PPUSH
1767: PPUSH
// InitUc ;
1768: CALL_OW 18
// InitHc ;
1772: CALL_OW 19
// uc_side := 0 ;
1776: LD_ADDR_OWVAR 20
1780: PUSH
1781: LD_INT 0
1783: ST_TO_ADDR
// uc_nation := 0 ;
1784: LD_ADDR_OWVAR 21
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// for i = 1 to amount do
1792: LD_ADDR_VAR 0 4
1796: PUSH
1797: DOUBLE
1798: LD_INT 1
1800: DEC
1801: ST_TO_ADDR
1802: LD_VAR 0 2
1806: PUSH
1807: FOR_TO
1808: IFFALSE 1890
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1810: LD_ADDR_OWVAR 29
1814: PUSH
1815: LD_INT 9
1817: PPUSH
1818: LD_INT 12
1820: PPUSH
1821: CALL_OW 12
1825: PUSH
1826: LD_INT 9
1828: PPUSH
1829: LD_INT 12
1831: PPUSH
1832: CALL_OW 12
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1841: LD_ADDR_OWVAR 35
1845: PUSH
1846: LD_INT 1
1848: NEG
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: CALL_OW 12
1857: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1858: LD_INT 0
1860: PPUSH
1861: LD_INT 12
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1871: CALL_OW 44
1875: PPUSH
1876: LD_VAR 0 1
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 49
// end ;
1888: GO 1807
1890: POP
1891: POP
// InitHc ;
1892: CALL_OW 19
// end ;
1896: LD_VAR 0 3
1900: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
1901: LD_INT 0
1903: PPUSH
1904: PPUSH
// uc_side := 0 ;
1905: LD_ADDR_OWVAR 20
1909: PUSH
1910: LD_INT 0
1912: ST_TO_ADDR
// uc_nation := 0 ;
1913: LD_ADDR_OWVAR 21
1917: PUSH
1918: LD_INT 0
1920: ST_TO_ADDR
// for i = 1 to 2 do
1921: LD_ADDR_VAR 0 4
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 2
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1972
// begin vc_chassis := 31 ;
1937: LD_ADDR_OWVAR 37
1941: PUSH
1942: LD_INT 31
1944: ST_TO_ADDR
// vc_control := control_rider ;
1945: LD_ADDR_OWVAR 38
1949: PUSH
1950: LD_INT 4
1952: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
1953: CALL_OW 45
1957: PPUSH
1958: LD_VAR 0 1
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: CALL 38583 0 3
// end ;
1970: GO 1934
1972: POP
1973: POP
// for i := 1 to 4 do
1974: LD_ADDR_VAR 0 4
1978: PUSH
1979: DOUBLE
1980: LD_INT 1
1982: DEC
1983: ST_TO_ADDR
1984: LD_INT 4
1986: PUSH
1987: FOR_TO
1988: IFFALSE 2025
// begin hc_class := 21 ;
1990: LD_ADDR_OWVAR 28
1994: PUSH
1995: LD_INT 21
1997: ST_TO_ADDR
// hc_gallery :=  ;
1998: LD_ADDR_OWVAR 33
2002: PUSH
2003: LD_STRING 
2005: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2006: CALL_OW 44
2010: PPUSH
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_INT 0
2018: PPUSH
2019: CALL_OW 49
// end ;
2023: GO 1987
2025: POP
2026: POP
// for i = 1 to 5 do
2027: LD_ADDR_VAR 0 4
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_INT 5
2039: PUSH
2040: FOR_TO
2041: IFFALSE 2095
// begin hc_class = class_tiger ;
2043: LD_ADDR_OWVAR 28
2047: PUSH
2048: LD_INT 14
2050: ST_TO_ADDR
// hc_gallery =  ;
2051: LD_ADDR_OWVAR 33
2055: PUSH
2056: LD_STRING 
2058: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
2059: LD_ADDR_OWVAR 35
2063: PUSH
2064: LD_INT 7
2066: NEG
2067: PPUSH
2068: LD_INT 7
2070: PPUSH
2071: CALL_OW 12
2075: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
2076: CALL_OW 44
2080: PPUSH
2081: LD_VAR 0 1
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL 38583 0 3
// end ;
2093: GO 2040
2095: POP
2096: POP
// for i := 1 to 4 do
2097: LD_ADDR_VAR 0 4
2101: PUSH
2102: DOUBLE
2103: LD_INT 1
2105: DEC
2106: ST_TO_ADDR
2107: LD_INT 4
2109: PUSH
2110: FOR_TO
2111: IFFALSE 2148
// begin hc_class := 18 ;
2113: LD_ADDR_OWVAR 28
2117: PUSH
2118: LD_INT 18
2120: ST_TO_ADDR
// hc_gallery :=  ;
2121: LD_ADDR_OWVAR 33
2125: PUSH
2126: LD_STRING 
2128: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2129: CALL_OW 44
2133: PPUSH
2134: LD_VAR 0 1
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: CALL_OW 49
// end ;
2146: GO 2110
2148: POP
2149: POP
// for i := 1 to 4 do
2150: LD_ADDR_VAR 0 4
2154: PUSH
2155: DOUBLE
2156: LD_INT 1
2158: DEC
2159: ST_TO_ADDR
2160: LD_INT 4
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2201
// begin hc_class := 13 ;
2166: LD_ADDR_OWVAR 28
2170: PUSH
2171: LD_INT 13
2173: ST_TO_ADDR
// hc_gallery :=  ;
2174: LD_ADDR_OWVAR 33
2178: PUSH
2179: LD_STRING 
2181: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2182: CALL_OW 44
2186: PPUSH
2187: LD_VAR 0 1
2191: PPUSH
2192: LD_INT 0
2194: PPUSH
2195: CALL_OW 49
// end ;
2199: GO 2163
2201: POP
2202: POP
// for i := 1 to 7 do
2203: LD_ADDR_VAR 0 4
2207: PUSH
2208: DOUBLE
2209: LD_INT 1
2211: DEC
2212: ST_TO_ADDR
2213: LD_INT 7
2215: PUSH
2216: FOR_TO
2217: IFFALSE 2254
// begin hc_class := class_frog ;
2219: LD_ADDR_OWVAR 28
2223: PUSH
2224: LD_INT 19
2226: ST_TO_ADDR
// hc_gallery :=  ;
2227: LD_ADDR_OWVAR 33
2231: PUSH
2232: LD_STRING 
2234: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
2235: CALL_OW 44
2239: PPUSH
2240: LD_VAR 0 2
2244: PPUSH
2245: LD_INT 0
2247: PPUSH
2248: CALL_OW 49
// end ;
2252: GO 2216
2254: POP
2255: POP
// end ;
2256: LD_VAR 0 3
2260: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
2261: LD_INT 0
2263: PPUSH
2264: PPUSH
2265: PPUSH
// if not observer or not unit then
2266: LD_VAR 0 1
2270: NOT
2271: PUSH
2272: LD_VAR 0 2
2276: NOT
2277: OR
2278: IFFALSE 2282
// exit ;
2280: GO 2330
// if not See ( GetSide ( observer ) , unit ) then
2282: LD_VAR 0 1
2286: PPUSH
2287: CALL_OW 255
2291: PPUSH
2292: LD_VAR 0 2
2296: PPUSH
2297: CALL_OW 292
2301: NOT
2302: IFFALSE 2306
// exit ;
2304: GO 2330
// result := GetDistUnits ( observer , unit ) < 12 ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_VAR 0 1
2315: PPUSH
2316: LD_VAR 0 2
2320: PPUSH
2321: CALL_OW 296
2325: PUSH
2326: LD_INT 12
2328: LESS
2329: ST_TO_ADDR
// end ;
2330: LD_VAR 0 3
2334: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
2335: LD_INT 0
2337: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
2338: LD_VAR 0 2
2342: PUSH
2343: LD_INT 1
2345: ARRAY
2346: PPUSH
2347: LD_VAR 0 2
2351: PUSH
2352: LD_INT 2
2354: ARRAY
2355: PPUSH
2356: CALL_OW 488
2360: PUSH
2361: LD_VAR 0 2
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PPUSH
2370: LD_VAR 0 2
2374: PUSH
2375: LD_INT 2
2377: ARRAY
2378: PPUSH
2379: CALL_OW 428
2383: PUSH
2384: LD_INT 0
2386: EQUAL
2387: AND
2388: IFFALSE 2422
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
2390: LD_VAR 0 1
2394: PPUSH
2395: LD_VAR 0 2
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_VAR 0 2
2408: PUSH
2409: LD_INT 2
2411: ARRAY
2412: PPUSH
2413: LD_VAR 0 3
2417: PPUSH
2418: CALL_OW 48
// end ;
2422: LD_VAR 0 4
2426: RET
// export function ReverseArray ( array ) ; var i ; begin
2427: LD_INT 0
2429: PPUSH
2430: PPUSH
// if not array then
2431: LD_VAR 0 1
2435: NOT
2436: IFFALSE 2440
// exit ;
2438: GO 2498
// result := [ ] ;
2440: LD_ADDR_VAR 0 2
2444: PUSH
2445: EMPTY
2446: ST_TO_ADDR
// for i := 1 to array do
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: DOUBLE
2453: LD_INT 1
2455: DEC
2456: ST_TO_ADDR
2457: LD_VAR 0 1
2461: PUSH
2462: FOR_TO
2463: IFFALSE 2496
// result := Insert ( result , 1 , array [ i ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_VAR 0 2
2474: PPUSH
2475: LD_INT 1
2477: PPUSH
2478: LD_VAR 0 1
2482: PUSH
2483: LD_VAR 0 3
2487: ARRAY
2488: PPUSH
2489: CALL_OW 2
2493: ST_TO_ADDR
2494: GO 2462
2496: POP
2497: POP
// end ;
2498: LD_VAR 0 2
2502: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2503: LD_INT 0
2505: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2506: LD_VAR 0 1
2510: PPUSH
2511: LD_VAR 0 2
2515: PPUSH
2516: LD_VAR 0 3
2520: PPUSH
2521: LD_VAR 0 4
2525: PPUSH
2526: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2530: LD_VAR 0 1
2534: PPUSH
2535: LD_VAR 0 2
2539: PPUSH
2540: LD_VAR 0 3
2544: PPUSH
2545: CALL_OW 331
// end ;
2549: LD_VAR 0 5
2553: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2554: LD_INT 0
2556: PPUSH
// if not units then
2557: LD_VAR 0 1
2561: NOT
2562: IFFALSE 2566
// exit ;
2564: GO 2649
// result := true ;
2566: LD_ADDR_VAR 0 4
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
2574: LD_VAR 0 1
2578: PPUSH
2579: LD_INT 26
2581: PUSH
2582: LD_INT 1
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 72
2593: PUSH
2594: LD_INT 1
2596: ARRAY
2597: PPUSH
2598: LD_VAR 0 2
2602: PPUSH
2603: CALL_OW 88
2607: NOT
2608: IFFALSE 2649
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2610: LD_ADDR_VAR 0 4
2614: PUSH
2615: LD_VAR 0 1
2619: PPUSH
2620: LD_INT 26
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PPUSH
2630: CALL_OW 72
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: CALL_OW 88
2648: ST_TO_ADDR
// end ;
2649: LD_VAR 0 4
2653: RET
// export function SeeGroup ( side , group ) ; var i ; begin
2654: LD_INT 0
2656: PPUSH
2657: PPUSH
// if not group then
2658: LD_VAR 0 2
2662: NOT
2663: IFFALSE 2667
// exit ;
2665: GO 2712
// for i in group do
2667: LD_ADDR_VAR 0 4
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: FOR_IN
2678: IFFALSE 2710
// if See ( side , i ) then
2680: LD_VAR 0 1
2684: PPUSH
2685: LD_VAR 0 4
2689: PPUSH
2690: CALL_OW 292
2694: IFFALSE 2708
// begin result := true ;
2696: LD_ADDR_VAR 0 3
2700: PUSH
2701: LD_INT 1
2703: ST_TO_ADDR
// exit ;
2704: POP
2705: POP
2706: GO 2712
// end ;
2708: GO 2677
2710: POP
2711: POP
// end ; end_of_file
2712: LD_VAR 0 3
2716: RET
// export Morozov ; export function PrepareRussian ; begin
2717: LD_INT 0
2719: PPUSH
// uc_side := 3 ;
2720: LD_ADDR_OWVAR 20
2724: PUSH
2725: LD_INT 3
2727: ST_TO_ADDR
// uc_nation := 3 ;
2728: LD_ADDR_OWVAR 21
2732: PUSH
2733: LD_INT 3
2735: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
2736: LD_ADDR_EXP 18
2740: PUSH
2741: LD_STRING Morozov
2743: PPUSH
2744: CALL_OW 25
2748: ST_TO_ADDR
// SetBName ( ruLenin , lenin ) ;
2749: LD_INT 52
2751: PPUSH
2752: LD_STRING lenin
2754: PPUSH
2755: CALL_OW 500
// end ; end_of_file
2759: LD_VAR 0 1
2763: RET
// export function Action ; begin
2764: LD_INT 0
2766: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
2767: LD_INT 2
2769: PPUSH
2770: LD_INT 4
2772: PPUSH
2773: CALL_OW 332
// InGameOn ;
2777: CALL_OW 8
// CenterNowOnXY ( 213 , 89 ) ;
2781: LD_INT 213
2783: PPUSH
2784: LD_INT 89
2786: PPUSH
2787: CALL_OW 86
// if Kaia and Olaf then
2791: LD_EXP 8
2795: PUSH
2796: LD_EXP 12
2800: AND
2801: IFFALSE 2807
// SceneKaiaWithOlaf ;
2803: CALL 2816 0 0
// InGameOff ;
2807: CALL_OW 9
// end ;
2811: LD_VAR 0 1
2815: RET
// export function SceneKaiaWithOlaf ; begin
2816: LD_INT 0
2818: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
2819: LD_INT 22
2821: PUSH
2822: LD_INT 2
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 3
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PPUSH
2843: CALL_OW 69
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: LD_INT 1
2853: PPUSH
2854: LD_INT 1
2856: PPUSH
2857: LD_INT 26
2859: PPUSH
2860: CALL_OW 125
// wait ( 0 0$1 ) ;
2864: LD_INT 35
2866: PPUSH
2867: CALL_OW 67
// Say ( Kaia , DK-06-Mem-1 ) ;
2871: LD_EXP 8
2875: PPUSH
2876: LD_STRING DK-06-Mem-1
2878: PPUSH
2879: CALL_OW 88
// Say ( Kaia , DK-06-Mem-2 ) ;
2883: LD_EXP 8
2887: PPUSH
2888: LD_STRING DK-06-Mem-2
2890: PPUSH
2891: CALL_OW 88
// Say ( Olaf , DO-06-Mem-3 ) ;
2895: LD_EXP 12
2899: PPUSH
2900: LD_STRING DO-06-Mem-3
2902: PPUSH
2903: CALL_OW 88
// Say ( Kaia , DK-06-Mem-4 ) ;
2907: LD_EXP 8
2911: PPUSH
2912: LD_STRING DK-06-Mem-4
2914: PPUSH
2915: CALL_OW 88
// Say ( Olaf , DO-06-Mem-5 ) ;
2919: LD_EXP 12
2923: PPUSH
2924: LD_STRING DO-06-Mem-5
2926: PPUSH
2927: CALL_OW 88
// wait ( 0 0$2 ) ;
2931: LD_INT 70
2933: PPUSH
2934: CALL_OW 67
// Say ( Olaf , DO-06-Mem-6 ) ;
2938: LD_EXP 12
2942: PPUSH
2943: LD_STRING DO-06-Mem-6
2945: PPUSH
2946: CALL_OW 88
// Say ( Kaia , DK-06-Mem-7 ) ;
2950: LD_EXP 8
2954: PPUSH
2955: LD_STRING DK-06-Mem-7
2957: PPUSH
2958: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
2962: LD_EXP 3
2966: PPUSH
2967: LD_EXP 8
2971: PPUSH
2972: CALL_OW 119
// Say ( Heike , DH-06-Mem-8 ) ;
2976: LD_EXP 3
2980: PPUSH
2981: LD_STRING DH-06-Mem-8
2983: PPUSH
2984: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
2988: LD_EXP 8
2992: PUSH
2993: LD_EXP 12
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PPUSH
3002: LD_EXP 3
3006: PPUSH
3007: CALL_OW 119
// Say ( Olaf , DO-06-Mem-9 ) ;
3011: LD_EXP 12
3015: PPUSH
3016: LD_STRING DO-06-Mem-9
3018: PPUSH
3019: CALL_OW 88
// Say ( Olaf , DO-06-Mem-10 ) ;
3023: LD_EXP 12
3027: PPUSH
3028: LD_STRING DO-06-Mem-10
3030: PPUSH
3031: CALL_OW 88
// Say ( Olaf , DO-06-Mem-11 ) ;
3035: LD_EXP 12
3039: PPUSH
3040: LD_STRING DO-06-Mem-11
3042: PPUSH
3043: CALL_OW 88
// Say ( Olaf , DO-06-Mem-12 ) ;
3047: LD_EXP 12
3051: PPUSH
3052: LD_STRING DO-06-Mem-12
3054: PPUSH
3055: CALL_OW 88
// Say ( Kaia , DK-06-Mem-13 ) ;
3059: LD_EXP 8
3063: PPUSH
3064: LD_STRING DK-06-Mem-13
3066: PPUSH
3067: CALL_OW 88
// Say ( Kaia , DK-06-Mem-14 ) ;
3071: LD_EXP 8
3075: PPUSH
3076: LD_STRING DK-06-Mem-14
3078: PPUSH
3079: CALL_OW 88
// Say ( Kaia , DK-06-Mem-15 ) ;
3083: LD_EXP 8
3087: PPUSH
3088: LD_STRING DK-06-Mem-15
3090: PPUSH
3091: CALL_OW 88
// Say ( Kaia , DK-06-Mem-16 ) ;
3095: LD_EXP 8
3099: PPUSH
3100: LD_STRING DK-06-Mem-16
3102: PPUSH
3103: CALL_OW 88
// Say ( Kaia , DK-06-Mem-17 ) ;
3107: LD_EXP 8
3111: PPUSH
3112: LD_STRING DK-06-Mem-17
3114: PPUSH
3115: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
3119: LD_EXP 12
3123: PPUSH
3124: LD_EXP 8
3128: PPUSH
3129: CALL_OW 119
// Say ( Olaf , DO-06-Mem-18 ) ;
3133: LD_EXP 12
3137: PPUSH
3138: LD_STRING DO-06-Mem-18
3140: PPUSH
3141: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
3145: LD_EXP 8
3149: PPUSH
3150: LD_EXP 12
3154: PPUSH
3155: CALL_OW 119
// Say ( Kaia , DK-06-Mem-19 ) ;
3159: LD_EXP 8
3163: PPUSH
3164: LD_STRING DK-06-Mem-19
3166: PPUSH
3167: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
3171: LD_EXP 12
3175: PPUSH
3176: LD_INT 214
3178: PPUSH
3179: LD_INT 86
3181: PPUSH
3182: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
3186: LD_EXP 12
3190: PPUSH
3191: LD_EXP 8
3195: PPUSH
3196: CALL_OW 179
// wait ( 0 0$1 ) ;
3200: LD_INT 35
3202: PPUSH
3203: CALL_OW 67
// Say ( Heike , DH-06-Mem-20 ) ;
3207: LD_EXP 3
3211: PPUSH
3212: LD_STRING DH-06-Mem-20
3214: PPUSH
3215: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
3219: LD_EXP 12
3223: PPUSH
3224: LD_INT 215
3226: PPUSH
3227: LD_INT 87
3229: PPUSH
3230: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
3234: LD_EXP 12
3238: PPUSH
3239: LD_EXP 8
3243: PPUSH
3244: CALL_OW 179
// Say ( Kaia , DK-06-Mem-21 ) ;
3248: LD_EXP 8
3252: PPUSH
3253: LD_STRING DK-06-Mem-21
3255: PPUSH
3256: CALL_OW 88
// end ; end_of_file
3260: LD_VAR 0 1
3264: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
3265: LD_INT 0
3267: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
3268: LD_VAR 0 1
3272: PPUSH
3273: CALL_OW 255
3277: PUSH
3278: LD_INT 2
3280: EQUAL
3281: PUSH
3282: LD_OWVAR 52
3286: AND
3287: PUSH
3288: LD_VAR 0 1
3292: PPUSH
3293: CALL_OW 263
3297: PUSH
3298: LD_INT 1
3300: EQUAL
3301: AND
3302: IFFALSE 3357
// begin driver := IsDrivenBy ( vehicle ) ;
3304: LD_ADDR_VAR 0 3
3308: PUSH
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL_OW 311
3318: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
3319: LD_VAR 0 1
3323: PPUSH
3324: LD_INT 211
3326: PPUSH
3327: LD_INT 101
3329: PPUSH
3330: CALL_OW 111
// AddComExitVehicle ( driver ) ;
3334: LD_VAR 0 3
3338: PPUSH
3339: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
3343: LD_VAR 0 3
3347: PPUSH
3348: LD_VAR 0 2
3352: PPUSH
3353: CALL_OW 180
// end ; end ; end_of_file
3357: PPOPN 3
3359: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3360: LD_INT 0
3362: PPUSH
3363: PPUSH
// if exist_mode then
3364: LD_VAR 0 2
3368: IFFALSE 3393
// unit := CreateCharacter ( prefix & ident ) else
3370: LD_ADDR_VAR 0 5
3374: PUSH
3375: LD_VAR 0 3
3379: PUSH
3380: LD_VAR 0 1
3384: STR
3385: PPUSH
3386: CALL_OW 34
3390: ST_TO_ADDR
3391: GO 3408
// unit := NewCharacter ( ident ) ;
3393: LD_ADDR_VAR 0 5
3397: PUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 25
3407: ST_TO_ADDR
// result := unit ;
3408: LD_ADDR_VAR 0 4
3412: PUSH
3413: LD_VAR 0 5
3417: ST_TO_ADDR
// end ;
3418: LD_VAR 0 4
3422: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3423: LD_INT 0
3425: PPUSH
3426: PPUSH
// if not side or not nation then
3427: LD_VAR 0 1
3431: NOT
3432: PUSH
3433: LD_VAR 0 2
3437: NOT
3438: OR
3439: IFFALSE 3443
// exit ;
3441: GO 4207
// case nation of nation_american :
3443: LD_VAR 0 2
3447: PUSH
3448: LD_INT 1
3450: DOUBLE
3451: EQUAL
3452: IFTRUE 3456
3454: GO 3670
3456: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3457: LD_ADDR_VAR 0 4
3461: PUSH
3462: LD_INT 35
3464: PUSH
3465: LD_INT 45
3467: PUSH
3468: LD_INT 46
3470: PUSH
3471: LD_INT 47
3473: PUSH
3474: LD_INT 82
3476: PUSH
3477: LD_INT 83
3479: PUSH
3480: LD_INT 84
3482: PUSH
3483: LD_INT 85
3485: PUSH
3486: LD_INT 86
3488: PUSH
3489: LD_INT 1
3491: PUSH
3492: LD_INT 2
3494: PUSH
3495: LD_INT 6
3497: PUSH
3498: LD_INT 15
3500: PUSH
3501: LD_INT 16
3503: PUSH
3504: LD_INT 7
3506: PUSH
3507: LD_INT 12
3509: PUSH
3510: LD_INT 13
3512: PUSH
3513: LD_INT 10
3515: PUSH
3516: LD_INT 14
3518: PUSH
3519: LD_INT 20
3521: PUSH
3522: LD_INT 21
3524: PUSH
3525: LD_INT 22
3527: PUSH
3528: LD_INT 25
3530: PUSH
3531: LD_INT 32
3533: PUSH
3534: LD_INT 27
3536: PUSH
3537: LD_INT 36
3539: PUSH
3540: LD_INT 69
3542: PUSH
3543: LD_INT 39
3545: PUSH
3546: LD_INT 34
3548: PUSH
3549: LD_INT 40
3551: PUSH
3552: LD_INT 48
3554: PUSH
3555: LD_INT 49
3557: PUSH
3558: LD_INT 50
3560: PUSH
3561: LD_INT 51
3563: PUSH
3564: LD_INT 52
3566: PUSH
3567: LD_INT 53
3569: PUSH
3570: LD_INT 54
3572: PUSH
3573: LD_INT 55
3575: PUSH
3576: LD_INT 56
3578: PUSH
3579: LD_INT 57
3581: PUSH
3582: LD_INT 58
3584: PUSH
3585: LD_INT 59
3587: PUSH
3588: LD_INT 60
3590: PUSH
3591: LD_INT 61
3593: PUSH
3594: LD_INT 62
3596: PUSH
3597: LD_INT 80
3599: PUSH
3600: LD_INT 82
3602: PUSH
3603: LD_INT 83
3605: PUSH
3606: LD_INT 84
3608: PUSH
3609: LD_INT 85
3611: PUSH
3612: LD_INT 86
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: ST_TO_ADDR
3668: GO 4131
3670: LD_INT 2
3672: DOUBLE
3673: EQUAL
3674: IFTRUE 3678
3676: GO 3900
3678: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
3679: LD_ADDR_VAR 0 4
3683: PUSH
3684: LD_INT 35
3686: PUSH
3687: LD_INT 45
3689: PUSH
3690: LD_INT 46
3692: PUSH
3693: LD_INT 47
3695: PUSH
3696: LD_INT 82
3698: PUSH
3699: LD_INT 83
3701: PUSH
3702: LD_INT 84
3704: PUSH
3705: LD_INT 85
3707: PUSH
3708: LD_INT 87
3710: PUSH
3711: LD_INT 70
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: LD_INT 11
3719: PUSH
3720: LD_INT 3
3722: PUSH
3723: LD_INT 4
3725: PUSH
3726: LD_INT 5
3728: PUSH
3729: LD_INT 6
3731: PUSH
3732: LD_INT 15
3734: PUSH
3735: LD_INT 18
3737: PUSH
3738: LD_INT 7
3740: PUSH
3741: LD_INT 17
3743: PUSH
3744: LD_INT 8
3746: PUSH
3747: LD_INT 20
3749: PUSH
3750: LD_INT 21
3752: PUSH
3753: LD_INT 22
3755: PUSH
3756: LD_INT 72
3758: PUSH
3759: LD_INT 26
3761: PUSH
3762: LD_INT 69
3764: PUSH
3765: LD_INT 39
3767: PUSH
3768: LD_INT 40
3770: PUSH
3771: LD_INT 41
3773: PUSH
3774: LD_INT 42
3776: PUSH
3777: LD_INT 43
3779: PUSH
3780: LD_INT 48
3782: PUSH
3783: LD_INT 49
3785: PUSH
3786: LD_INT 50
3788: PUSH
3789: LD_INT 51
3791: PUSH
3792: LD_INT 52
3794: PUSH
3795: LD_INT 53
3797: PUSH
3798: LD_INT 54
3800: PUSH
3801: LD_INT 55
3803: PUSH
3804: LD_INT 56
3806: PUSH
3807: LD_INT 60
3809: PUSH
3810: LD_INT 61
3812: PUSH
3813: LD_INT 62
3815: PUSH
3816: LD_INT 66
3818: PUSH
3819: LD_INT 67
3821: PUSH
3822: LD_INT 68
3824: PUSH
3825: LD_INT 81
3827: PUSH
3828: LD_INT 82
3830: PUSH
3831: LD_INT 83
3833: PUSH
3834: LD_INT 84
3836: PUSH
3837: LD_INT 85
3839: PUSH
3840: LD_INT 87
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: ST_TO_ADDR
3898: GO 4131
3900: LD_INT 3
3902: DOUBLE
3903: EQUAL
3904: IFTRUE 3908
3906: GO 4130
3908: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3909: LD_ADDR_VAR 0 4
3913: PUSH
3914: LD_INT 46
3916: PUSH
3917: LD_INT 47
3919: PUSH
3920: LD_INT 1
3922: PUSH
3923: LD_INT 2
3925: PUSH
3926: LD_INT 82
3928: PUSH
3929: LD_INT 83
3931: PUSH
3932: LD_INT 84
3934: PUSH
3935: LD_INT 85
3937: PUSH
3938: LD_INT 86
3940: PUSH
3941: LD_INT 11
3943: PUSH
3944: LD_INT 9
3946: PUSH
3947: LD_INT 20
3949: PUSH
3950: LD_INT 19
3952: PUSH
3953: LD_INT 21
3955: PUSH
3956: LD_INT 24
3958: PUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 25
3964: PUSH
3965: LD_INT 28
3967: PUSH
3968: LD_INT 29
3970: PUSH
3971: LD_INT 30
3973: PUSH
3974: LD_INT 31
3976: PUSH
3977: LD_INT 37
3979: PUSH
3980: LD_INT 38
3982: PUSH
3983: LD_INT 32
3985: PUSH
3986: LD_INT 27
3988: PUSH
3989: LD_INT 33
3991: PUSH
3992: LD_INT 69
3994: PUSH
3995: LD_INT 39
3997: PUSH
3998: LD_INT 34
4000: PUSH
4001: LD_INT 40
4003: PUSH
4004: LD_INT 71
4006: PUSH
4007: LD_INT 23
4009: PUSH
4010: LD_INT 44
4012: PUSH
4013: LD_INT 48
4015: PUSH
4016: LD_INT 49
4018: PUSH
4019: LD_INT 50
4021: PUSH
4022: LD_INT 51
4024: PUSH
4025: LD_INT 52
4027: PUSH
4028: LD_INT 53
4030: PUSH
4031: LD_INT 54
4033: PUSH
4034: LD_INT 55
4036: PUSH
4037: LD_INT 56
4039: PUSH
4040: LD_INT 57
4042: PUSH
4043: LD_INT 58
4045: PUSH
4046: LD_INT 59
4048: PUSH
4049: LD_INT 63
4051: PUSH
4052: LD_INT 64
4054: PUSH
4055: LD_INT 65
4057: PUSH
4058: LD_INT 82
4060: PUSH
4061: LD_INT 83
4063: PUSH
4064: LD_INT 84
4066: PUSH
4067: LD_INT 85
4069: PUSH
4070: LD_INT 86
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: ST_TO_ADDR
4128: GO 4131
4130: POP
// if state > - 1 and state < 3 then
4131: LD_VAR 0 3
4135: PUSH
4136: LD_INT 1
4138: NEG
4139: GREATER
4140: PUSH
4141: LD_VAR 0 3
4145: PUSH
4146: LD_INT 3
4148: LESS
4149: AND
4150: IFFALSE 4207
// for i in result do
4152: LD_ADDR_VAR 0 5
4156: PUSH
4157: LD_VAR 0 4
4161: PUSH
4162: FOR_IN
4163: IFFALSE 4205
// if GetTech ( i , side ) <> state then
4165: LD_VAR 0 5
4169: PPUSH
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL_OW 321
4179: PUSH
4180: LD_VAR 0 3
4184: NONEQUAL
4185: IFFALSE 4203
// result := result diff i ;
4187: LD_ADDR_VAR 0 4
4191: PUSH
4192: LD_VAR 0 4
4196: PUSH
4197: LD_VAR 0 5
4201: DIFF
4202: ST_TO_ADDR
4203: GO 4162
4205: POP
4206: POP
// end ;
4207: LD_VAR 0 4
4211: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4212: LD_INT 0
4214: PPUSH
4215: PPUSH
4216: PPUSH
// result := true ;
4217: LD_ADDR_VAR 0 3
4221: PUSH
4222: LD_INT 1
4224: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4225: LD_ADDR_VAR 0 5
4229: PUSH
4230: LD_VAR 0 2
4234: PPUSH
4235: CALL_OW 480
4239: ST_TO_ADDR
// if not tmp then
4240: LD_VAR 0 5
4244: NOT
4245: IFFALSE 4249
// exit ;
4247: GO 4298
// for i in tmp do
4249: LD_ADDR_VAR 0 4
4253: PUSH
4254: LD_VAR 0 5
4258: PUSH
4259: FOR_IN
4260: IFFALSE 4296
// if GetTech ( i , side ) <> state_researched then
4262: LD_VAR 0 4
4266: PPUSH
4267: LD_VAR 0 1
4271: PPUSH
4272: CALL_OW 321
4276: PUSH
4277: LD_INT 2
4279: NONEQUAL
4280: IFFALSE 4294
// begin result := false ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: LD_INT 0
4289: ST_TO_ADDR
// exit ;
4290: POP
4291: POP
4292: GO 4298
// end ;
4294: GO 4259
4296: POP
4297: POP
// end ;
4298: LD_VAR 0 3
4302: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4303: LD_INT 0
4305: PPUSH
4306: PPUSH
4307: PPUSH
4308: PPUSH
4309: PPUSH
4310: PPUSH
4311: PPUSH
4312: PPUSH
4313: PPUSH
4314: PPUSH
4315: PPUSH
4316: PPUSH
4317: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4318: LD_VAR 0 1
4322: NOT
4323: PUSH
4324: LD_VAR 0 1
4328: PPUSH
4329: CALL_OW 257
4333: PUSH
4334: LD_INT 9
4336: NONEQUAL
4337: OR
4338: IFFALSE 4342
// exit ;
4340: GO 4915
// side := GetSide ( unit ) ;
4342: LD_ADDR_VAR 0 9
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: CALL_OW 255
4356: ST_TO_ADDR
// tech_space := tech_spacanom ;
4357: LD_ADDR_VAR 0 12
4361: PUSH
4362: LD_INT 29
4364: ST_TO_ADDR
// tech_time := tech_taurad ;
4365: LD_ADDR_VAR 0 13
4369: PUSH
4370: LD_INT 28
4372: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4373: LD_ADDR_VAR 0 11
4377: PUSH
4378: LD_VAR 0 1
4382: PPUSH
4383: CALL_OW 310
4387: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4388: LD_VAR 0 11
4392: PPUSH
4393: CALL_OW 247
4397: PUSH
4398: LD_INT 2
4400: EQUAL
4401: IFFALSE 4405
// exit ;
4403: GO 4915
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4405: LD_ADDR_VAR 0 8
4409: PUSH
4410: LD_INT 81
4412: PUSH
4413: LD_VAR 0 9
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 3
4424: PUSH
4425: LD_INT 21
4427: PUSH
4428: LD_INT 3
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PPUSH
4443: CALL_OW 69
4447: ST_TO_ADDR
// if not tmp then
4448: LD_VAR 0 8
4452: NOT
4453: IFFALSE 4457
// exit ;
4455: GO 4915
// if in_unit then
4457: LD_VAR 0 11
4461: IFFALSE 4485
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4463: LD_ADDR_VAR 0 10
4467: PUSH
4468: LD_VAR 0 8
4472: PPUSH
4473: LD_VAR 0 11
4477: PPUSH
4478: CALL_OW 74
4482: ST_TO_ADDR
4483: GO 4505
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4485: LD_ADDR_VAR 0 10
4489: PUSH
4490: LD_VAR 0 8
4494: PPUSH
4495: LD_VAR 0 1
4499: PPUSH
4500: CALL_OW 74
4504: ST_TO_ADDR
// if not enemy then
4505: LD_VAR 0 10
4509: NOT
4510: IFFALSE 4514
// exit ;
4512: GO 4915
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4514: LD_VAR 0 11
4518: PUSH
4519: LD_VAR 0 11
4523: PPUSH
4524: LD_VAR 0 10
4528: PPUSH
4529: CALL_OW 296
4533: PUSH
4534: LD_INT 13
4536: GREATER
4537: AND
4538: PUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: LD_VAR 0 10
4548: PPUSH
4549: CALL_OW 296
4553: PUSH
4554: LD_INT 12
4556: GREATER
4557: OR
4558: IFFALSE 4562
// exit ;
4560: GO 4915
// missile := [ 1 ] ;
4562: LD_ADDR_VAR 0 14
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: EMPTY
4571: LIST
4572: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4573: LD_VAR 0 9
4577: PPUSH
4578: LD_VAR 0 12
4582: PPUSH
4583: CALL_OW 325
4587: IFFALSE 4616
// missile := Insert ( missile , missile + 1 , 2 ) ;
4589: LD_ADDR_VAR 0 14
4593: PUSH
4594: LD_VAR 0 14
4598: PPUSH
4599: LD_VAR 0 14
4603: PUSH
4604: LD_INT 1
4606: PLUS
4607: PPUSH
4608: LD_INT 2
4610: PPUSH
4611: CALL_OW 2
4615: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4616: LD_VAR 0 9
4620: PPUSH
4621: LD_VAR 0 13
4625: PPUSH
4626: CALL_OW 325
4630: PUSH
4631: LD_VAR 0 10
4635: PPUSH
4636: CALL_OW 255
4640: PPUSH
4641: LD_VAR 0 13
4645: PPUSH
4646: CALL_OW 325
4650: NOT
4651: AND
4652: IFFALSE 4681
// missile := Insert ( missile , missile + 1 , 3 ) ;
4654: LD_ADDR_VAR 0 14
4658: PUSH
4659: LD_VAR 0 14
4663: PPUSH
4664: LD_VAR 0 14
4668: PUSH
4669: LD_INT 1
4671: PLUS
4672: PPUSH
4673: LD_INT 3
4675: PPUSH
4676: CALL_OW 2
4680: ST_TO_ADDR
// if missile < 2 then
4681: LD_VAR 0 14
4685: PUSH
4686: LD_INT 2
4688: LESS
4689: IFFALSE 4693
// exit ;
4691: GO 4915
// x := GetX ( enemy ) ;
4693: LD_ADDR_VAR 0 4
4697: PUSH
4698: LD_VAR 0 10
4702: PPUSH
4703: CALL_OW 250
4707: ST_TO_ADDR
// y := GetY ( enemy ) ;
4708: LD_ADDR_VAR 0 5
4712: PUSH
4713: LD_VAR 0 10
4717: PPUSH
4718: CALL_OW 251
4722: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4723: LD_ADDR_VAR 0 6
4727: PUSH
4728: LD_VAR 0 4
4732: PUSH
4733: LD_INT 1
4735: NEG
4736: PPUSH
4737: LD_INT 1
4739: PPUSH
4740: CALL_OW 12
4744: PLUS
4745: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4746: LD_ADDR_VAR 0 7
4750: PUSH
4751: LD_VAR 0 5
4755: PUSH
4756: LD_INT 1
4758: NEG
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 12
4767: PLUS
4768: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4769: LD_VAR 0 6
4773: PPUSH
4774: LD_VAR 0 7
4778: PPUSH
4779: CALL_OW 488
4783: NOT
4784: IFFALSE 4806
// begin _x := x ;
4786: LD_ADDR_VAR 0 6
4790: PUSH
4791: LD_VAR 0 4
4795: ST_TO_ADDR
// _y := y ;
4796: LD_ADDR_VAR 0 7
4800: PUSH
4801: LD_VAR 0 5
4805: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4806: LD_ADDR_VAR 0 3
4810: PUSH
4811: LD_INT 1
4813: PPUSH
4814: LD_VAR 0 14
4818: PPUSH
4819: CALL_OW 12
4823: ST_TO_ADDR
// case i of 1 :
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 1
4831: DOUBLE
4832: EQUAL
4833: IFTRUE 4837
4835: GO 4854
4837: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4838: LD_VAR 0 1
4842: PPUSH
4843: LD_VAR 0 10
4847: PPUSH
4848: CALL_OW 115
4852: GO 4915
4854: LD_INT 2
4856: DOUBLE
4857: EQUAL
4858: IFTRUE 4862
4860: GO 4884
4862: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4863: LD_VAR 0 1
4867: PPUSH
4868: LD_VAR 0 6
4872: PPUSH
4873: LD_VAR 0 7
4877: PPUSH
4878: CALL_OW 153
4882: GO 4915
4884: LD_INT 3
4886: DOUBLE
4887: EQUAL
4888: IFTRUE 4892
4890: GO 4914
4892: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4893: LD_VAR 0 1
4897: PPUSH
4898: LD_VAR 0 6
4902: PPUSH
4903: LD_VAR 0 7
4907: PPUSH
4908: CALL_OW 154
4912: GO 4915
4914: POP
// end ;
4915: LD_VAR 0 2
4919: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4920: LD_INT 0
4922: PPUSH
4923: PPUSH
4924: PPUSH
4925: PPUSH
4926: PPUSH
4927: PPUSH
// if not unit or not building then
4928: LD_VAR 0 1
4932: NOT
4933: PUSH
4934: LD_VAR 0 2
4938: NOT
4939: OR
4940: IFFALSE 4944
// exit ;
4942: GO 5102
// x := GetX ( building ) ;
4944: LD_ADDR_VAR 0 5
4948: PUSH
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 250
4958: ST_TO_ADDR
// y := GetY ( building ) ;
4959: LD_ADDR_VAR 0 6
4963: PUSH
4964: LD_VAR 0 2
4968: PPUSH
4969: CALL_OW 251
4973: ST_TO_ADDR
// for i = 0 to 5 do
4974: LD_ADDR_VAR 0 4
4978: PUSH
4979: DOUBLE
4980: LD_INT 0
4982: DEC
4983: ST_TO_ADDR
4984: LD_INT 5
4986: PUSH
4987: FOR_TO
4988: IFFALSE 5100
// begin _x := ShiftX ( x , i , 3 ) ;
4990: LD_ADDR_VAR 0 7
4994: PUSH
4995: LD_VAR 0 5
4999: PPUSH
5000: LD_VAR 0 4
5004: PPUSH
5005: LD_INT 3
5007: PPUSH
5008: CALL_OW 272
5012: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5013: LD_ADDR_VAR 0 8
5017: PUSH
5018: LD_VAR 0 6
5022: PPUSH
5023: LD_VAR 0 4
5027: PPUSH
5028: LD_INT 3
5030: PPUSH
5031: CALL_OW 273
5035: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5036: LD_VAR 0 7
5040: PPUSH
5041: LD_VAR 0 8
5045: PPUSH
5046: CALL_OW 488
5050: NOT
5051: IFFALSE 5055
// continue ;
5053: GO 4987
// if HexInfo ( _x , _y ) = 0 then
5055: LD_VAR 0 7
5059: PPUSH
5060: LD_VAR 0 8
5064: PPUSH
5065: CALL_OW 428
5069: PUSH
5070: LD_INT 0
5072: EQUAL
5073: IFFALSE 5098
// begin ComMoveXY ( unit , _x , _y ) ;
5075: LD_VAR 0 1
5079: PPUSH
5080: LD_VAR 0 7
5084: PPUSH
5085: LD_VAR 0 8
5089: PPUSH
5090: CALL_OW 111
// exit ;
5094: POP
5095: POP
5096: GO 5102
// end ; end ;
5098: GO 4987
5100: POP
5101: POP
// end ;
5102: LD_VAR 0 3
5106: RET
// export function ScanBase ( side , base_area ) ; begin
5107: LD_INT 0
5109: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5110: LD_ADDR_VAR 0 3
5114: PUSH
5115: LD_VAR 0 2
5119: PPUSH
5120: LD_INT 81
5122: PUSH
5123: LD_VAR 0 1
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PPUSH
5132: CALL_OW 70
5136: ST_TO_ADDR
// end ;
5137: LD_VAR 0 3
5141: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5142: LD_INT 0
5144: PPUSH
5145: PPUSH
5146: PPUSH
5147: PPUSH
// result := false ;
5148: LD_ADDR_VAR 0 2
5152: PUSH
5153: LD_INT 0
5155: ST_TO_ADDR
// side := GetSide ( unit ) ;
5156: LD_ADDR_VAR 0 3
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: CALL_OW 255
5170: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5171: LD_ADDR_VAR 0 4
5175: PUSH
5176: LD_VAR 0 1
5180: PPUSH
5181: CALL_OW 248
5185: ST_TO_ADDR
// case nat of 1 :
5186: LD_VAR 0 4
5190: PUSH
5191: LD_INT 1
5193: DOUBLE
5194: EQUAL
5195: IFTRUE 5199
5197: GO 5210
5199: POP
// tech := tech_lassight ; 2 :
5200: LD_ADDR_VAR 0 5
5204: PUSH
5205: LD_INT 12
5207: ST_TO_ADDR
5208: GO 5249
5210: LD_INT 2
5212: DOUBLE
5213: EQUAL
5214: IFTRUE 5218
5216: GO 5229
5218: POP
// tech := tech_mortar ; 3 :
5219: LD_ADDR_VAR 0 5
5223: PUSH
5224: LD_INT 41
5226: ST_TO_ADDR
5227: GO 5249
5229: LD_INT 3
5231: DOUBLE
5232: EQUAL
5233: IFTRUE 5237
5235: GO 5248
5237: POP
// tech := tech_bazooka ; end ;
5238: LD_ADDR_VAR 0 5
5242: PUSH
5243: LD_INT 44
5245: ST_TO_ADDR
5246: GO 5249
5248: POP
// if Researched ( side , tech ) then
5249: LD_VAR 0 3
5253: PPUSH
5254: LD_VAR 0 5
5258: PPUSH
5259: CALL_OW 325
5263: IFFALSE 5290
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5265: LD_ADDR_VAR 0 2
5269: PUSH
5270: LD_INT 5
5272: PUSH
5273: LD_INT 8
5275: PUSH
5276: LD_INT 9
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_VAR 0 4
5288: ARRAY
5289: ST_TO_ADDR
// end ;
5290: LD_VAR 0 2
5294: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5295: LD_INT 0
5297: PPUSH
5298: PPUSH
5299: PPUSH
// if not mines then
5300: LD_VAR 0 2
5304: NOT
5305: IFFALSE 5309
// exit ;
5307: GO 5453
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5309: LD_ADDR_VAR 0 5
5313: PUSH
5314: LD_INT 81
5316: PUSH
5317: LD_VAR 0 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PUSH
5326: LD_INT 3
5328: PUSH
5329: LD_INT 21
5331: PUSH
5332: LD_INT 3
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PPUSH
5347: CALL_OW 69
5351: ST_TO_ADDR
// for i in mines do
5352: LD_ADDR_VAR 0 4
5356: PUSH
5357: LD_VAR 0 2
5361: PUSH
5362: FOR_IN
5363: IFFALSE 5451
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5365: LD_VAR 0 4
5369: PUSH
5370: LD_INT 1
5372: ARRAY
5373: PPUSH
5374: LD_VAR 0 4
5378: PUSH
5379: LD_INT 2
5381: ARRAY
5382: PPUSH
5383: CALL_OW 458
5387: NOT
5388: IFFALSE 5392
// continue ;
5390: GO 5362
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5392: LD_VAR 0 4
5396: PUSH
5397: LD_INT 1
5399: ARRAY
5400: PPUSH
5401: LD_VAR 0 4
5405: PUSH
5406: LD_INT 2
5408: ARRAY
5409: PPUSH
5410: CALL_OW 428
5414: PUSH
5415: LD_VAR 0 5
5419: IN
5420: IFFALSE 5449
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5422: LD_VAR 0 4
5426: PUSH
5427: LD_INT 1
5429: ARRAY
5430: PPUSH
5431: LD_VAR 0 4
5435: PUSH
5436: LD_INT 2
5438: ARRAY
5439: PPUSH
5440: LD_VAR 0 1
5444: PPUSH
5445: CALL_OW 456
// end ;
5449: GO 5362
5451: POP
5452: POP
// end ;
5453: LD_VAR 0 3
5457: RET
// export function Count ( array ) ; var i ; begin
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
// result := 0 ;
5462: LD_ADDR_VAR 0 2
5466: PUSH
5467: LD_INT 0
5469: ST_TO_ADDR
// for i in array do
5470: LD_ADDR_VAR 0 3
5474: PUSH
5475: LD_VAR 0 1
5479: PUSH
5480: FOR_IN
5481: IFFALSE 5505
// if i then
5483: LD_VAR 0 3
5487: IFFALSE 5503
// result := result + 1 ;
5489: LD_ADDR_VAR 0 2
5493: PUSH
5494: LD_VAR 0 2
5498: PUSH
5499: LD_INT 1
5501: PLUS
5502: ST_TO_ADDR
5503: GO 5480
5505: POP
5506: POP
// end ;
5507: LD_VAR 0 2
5511: RET
// export function IsEmpty ( building ) ; begin
5512: LD_INT 0
5514: PPUSH
// if not building then
5515: LD_VAR 0 1
5519: NOT
5520: IFFALSE 5524
// exit ;
5522: GO 5567
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5524: LD_ADDR_VAR 0 2
5528: PUSH
5529: LD_VAR 0 1
5533: PUSH
5534: LD_INT 22
5536: PUSH
5537: LD_VAR 0 1
5541: PPUSH
5542: CALL_OW 255
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 58
5553: PUSH
5554: EMPTY
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 69
5565: IN
5566: ST_TO_ADDR
// end ;
5567: LD_VAR 0 2
5571: RET
// export function IsNotFull ( building ) ; begin
5572: LD_INT 0
5574: PPUSH
// if not building then
5575: LD_VAR 0 1
5579: NOT
5580: IFFALSE 5584
// exit ;
5582: GO 5603
// result := UnitsInside ( building ) < 6 ;
5584: LD_ADDR_VAR 0 2
5588: PUSH
5589: LD_VAR 0 1
5593: PPUSH
5594: CALL_OW 313
5598: PUSH
5599: LD_INT 6
5601: LESS
5602: ST_TO_ADDR
// end ;
5603: LD_VAR 0 2
5607: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5608: LD_INT 0
5610: PPUSH
5611: PPUSH
5612: PPUSH
5613: PPUSH
// tmp := [ ] ;
5614: LD_ADDR_VAR 0 3
5618: PUSH
5619: EMPTY
5620: ST_TO_ADDR
// list := [ ] ;
5621: LD_ADDR_VAR 0 5
5625: PUSH
5626: EMPTY
5627: ST_TO_ADDR
// for i = 16 to 25 do
5628: LD_ADDR_VAR 0 4
5632: PUSH
5633: DOUBLE
5634: LD_INT 16
5636: DEC
5637: ST_TO_ADDR
5638: LD_INT 25
5640: PUSH
5641: FOR_TO
5642: IFFALSE 5715
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5644: LD_ADDR_VAR 0 3
5648: PUSH
5649: LD_VAR 0 3
5653: PUSH
5654: LD_INT 22
5656: PUSH
5657: LD_VAR 0 1
5661: PPUSH
5662: CALL_OW 255
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 91
5673: PUSH
5674: LD_VAR 0 1
5678: PUSH
5679: LD_INT 6
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: PUSH
5687: LD_INT 30
5689: PUSH
5690: LD_VAR 0 4
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: EMPTY
5705: LIST
5706: PPUSH
5707: CALL_OW 69
5711: ADD
5712: ST_TO_ADDR
5713: GO 5641
5715: POP
5716: POP
// for i = 1 to tmp do
5717: LD_ADDR_VAR 0 4
5721: PUSH
5722: DOUBLE
5723: LD_INT 1
5725: DEC
5726: ST_TO_ADDR
5727: LD_VAR 0 3
5731: PUSH
5732: FOR_TO
5733: IFFALSE 5821
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5735: LD_ADDR_VAR 0 5
5739: PUSH
5740: LD_VAR 0 5
5744: PUSH
5745: LD_VAR 0 3
5749: PUSH
5750: LD_VAR 0 4
5754: ARRAY
5755: PPUSH
5756: CALL_OW 266
5760: PUSH
5761: LD_VAR 0 3
5765: PUSH
5766: LD_VAR 0 4
5770: ARRAY
5771: PPUSH
5772: CALL_OW 250
5776: PUSH
5777: LD_VAR 0 3
5781: PUSH
5782: LD_VAR 0 4
5786: ARRAY
5787: PPUSH
5788: CALL_OW 251
5792: PUSH
5793: LD_VAR 0 3
5797: PUSH
5798: LD_VAR 0 4
5802: ARRAY
5803: PPUSH
5804: CALL_OW 254
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: ADD
5818: ST_TO_ADDR
5819: GO 5732
5821: POP
5822: POP
// result := list ;
5823: LD_ADDR_VAR 0 2
5827: PUSH
5828: LD_VAR 0 5
5832: ST_TO_ADDR
// end ;
5833: LD_VAR 0 2
5837: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5838: LD_INT 0
5840: PPUSH
5841: PPUSH
5842: PPUSH
5843: PPUSH
5844: PPUSH
5845: PPUSH
5846: PPUSH
// if not factory then
5847: LD_VAR 0 1
5851: NOT
5852: IFFALSE 5856
// exit ;
5854: GO 6449
// if control = control_apeman then
5856: LD_VAR 0 4
5860: PUSH
5861: LD_INT 5
5863: EQUAL
5864: IFFALSE 5973
// begin tmp := UnitsInside ( factory ) ;
5866: LD_ADDR_VAR 0 8
5870: PUSH
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 313
5880: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5881: LD_VAR 0 8
5885: PPUSH
5886: LD_INT 25
5888: PUSH
5889: LD_INT 12
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PPUSH
5896: CALL_OW 72
5900: NOT
5901: IFFALSE 5911
// control := control_manual ;
5903: LD_ADDR_VAR 0 4
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5911: LD_ADDR_VAR 0 8
5915: PUSH
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL 5608 0 1
5925: ST_TO_ADDR
// if tmp then
5926: LD_VAR 0 8
5930: IFFALSE 5973
// begin for i in tmp do
5932: LD_ADDR_VAR 0 7
5936: PUSH
5937: LD_VAR 0 8
5941: PUSH
5942: FOR_IN
5943: IFFALSE 5971
// if i [ 1 ] = b_ext_radio then
5945: LD_VAR 0 7
5949: PUSH
5950: LD_INT 1
5952: ARRAY
5953: PUSH
5954: LD_INT 22
5956: EQUAL
5957: IFFALSE 5969
// begin control := control_remote ;
5959: LD_ADDR_VAR 0 4
5963: PUSH
5964: LD_INT 2
5966: ST_TO_ADDR
// break ;
5967: GO 5971
// end ;
5969: GO 5942
5971: POP
5972: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5973: LD_VAR 0 1
5977: PPUSH
5978: LD_VAR 0 2
5982: PPUSH
5983: LD_VAR 0 3
5987: PPUSH
5988: LD_VAR 0 4
5992: PPUSH
5993: LD_VAR 0 5
5997: PPUSH
5998: CALL_OW 448
6002: IFFALSE 6037
// begin result := [ chassis , engine , control , weapon ] ;
6004: LD_ADDR_VAR 0 6
6008: PUSH
6009: LD_VAR 0 2
6013: PUSH
6014: LD_VAR 0 3
6018: PUSH
6019: LD_VAR 0 4
6023: PUSH
6024: LD_VAR 0 5
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: ST_TO_ADDR
// exit ;
6035: GO 6449
// end ; _chassis := AvailableChassisList ( factory ) ;
6037: LD_ADDR_VAR 0 9
6041: PUSH
6042: LD_VAR 0 1
6046: PPUSH
6047: CALL_OW 475
6051: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6052: LD_ADDR_VAR 0 11
6056: PUSH
6057: LD_VAR 0 1
6061: PPUSH
6062: CALL_OW 476
6066: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6067: LD_ADDR_VAR 0 12
6071: PUSH
6072: LD_VAR 0 1
6076: PPUSH
6077: CALL_OW 477
6081: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6082: LD_ADDR_VAR 0 10
6086: PUSH
6087: LD_VAR 0 1
6091: PPUSH
6092: CALL_OW 478
6096: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6097: LD_VAR 0 9
6101: NOT
6102: PUSH
6103: LD_VAR 0 11
6107: NOT
6108: OR
6109: PUSH
6110: LD_VAR 0 12
6114: NOT
6115: OR
6116: PUSH
6117: LD_VAR 0 10
6121: NOT
6122: OR
6123: IFFALSE 6158
// begin result := [ chassis , engine , control , weapon ] ;
6125: LD_ADDR_VAR 0 6
6129: PUSH
6130: LD_VAR 0 2
6134: PUSH
6135: LD_VAR 0 3
6139: PUSH
6140: LD_VAR 0 4
6144: PUSH
6145: LD_VAR 0 5
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: ST_TO_ADDR
// exit ;
6156: GO 6449
// end ; if not chassis in _chassis then
6158: LD_VAR 0 2
6162: PUSH
6163: LD_VAR 0 9
6167: IN
6168: NOT
6169: IFFALSE 6195
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6171: LD_ADDR_VAR 0 2
6175: PUSH
6176: LD_VAR 0 9
6180: PUSH
6181: LD_INT 1
6183: PPUSH
6184: LD_VAR 0 9
6188: PPUSH
6189: CALL_OW 12
6193: ARRAY
6194: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6195: LD_VAR 0 2
6199: PPUSH
6200: LD_VAR 0 3
6204: PPUSH
6205: CALL 6454 0 2
6209: NOT
6210: IFFALSE 6269
// repeat engine := _engine [ 1 ] ;
6212: LD_ADDR_VAR 0 3
6216: PUSH
6217: LD_VAR 0 11
6221: PUSH
6222: LD_INT 1
6224: ARRAY
6225: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6226: LD_ADDR_VAR 0 11
6230: PUSH
6231: LD_VAR 0 11
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 3
6243: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6244: LD_VAR 0 2
6248: PPUSH
6249: LD_VAR 0 3
6253: PPUSH
6254: CALL 6454 0 2
6258: PUSH
6259: LD_VAR 0 11
6263: PUSH
6264: EMPTY
6265: EQUAL
6266: OR
6267: IFFALSE 6212
// if not control in _control then
6269: LD_VAR 0 4
6273: PUSH
6274: LD_VAR 0 12
6278: IN
6279: NOT
6280: IFFALSE 6306
// control := _control [ rand ( 1 , _control ) ] ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_VAR 0 12
6291: PUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_VAR 0 12
6299: PPUSH
6300: CALL_OW 12
6304: ARRAY
6305: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6306: LD_VAR 0 2
6310: PPUSH
6311: LD_VAR 0 5
6315: PPUSH
6316: CALL 6674 0 2
6320: NOT
6321: IFFALSE 6380
// repeat weapon := _weapon [ 1 ] ;
6323: LD_ADDR_VAR 0 5
6327: PUSH
6328: LD_VAR 0 10
6332: PUSH
6333: LD_INT 1
6335: ARRAY
6336: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6337: LD_ADDR_VAR 0 10
6341: PUSH
6342: LD_VAR 0 10
6346: PPUSH
6347: LD_INT 1
6349: PPUSH
6350: CALL_OW 3
6354: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6355: LD_VAR 0 2
6359: PPUSH
6360: LD_VAR 0 5
6364: PPUSH
6365: CALL 6674 0 2
6369: PUSH
6370: LD_VAR 0 10
6374: PUSH
6375: EMPTY
6376: EQUAL
6377: OR
6378: IFFALSE 6323
// result := [ ] ;
6380: LD_ADDR_VAR 0 6
6384: PUSH
6385: EMPTY
6386: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6387: LD_VAR 0 1
6391: PPUSH
6392: LD_VAR 0 2
6396: PPUSH
6397: LD_VAR 0 3
6401: PPUSH
6402: LD_VAR 0 4
6406: PPUSH
6407: LD_VAR 0 5
6411: PPUSH
6412: CALL_OW 448
6416: IFFALSE 6449
// result := [ chassis , engine , control , weapon ] ;
6418: LD_ADDR_VAR 0 6
6422: PUSH
6423: LD_VAR 0 2
6427: PUSH
6428: LD_VAR 0 3
6432: PUSH
6433: LD_VAR 0 4
6437: PUSH
6438: LD_VAR 0 5
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: ST_TO_ADDR
// end ;
6449: LD_VAR 0 6
6453: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6454: LD_INT 0
6456: PPUSH
// if not chassis or not engine then
6457: LD_VAR 0 1
6461: NOT
6462: PUSH
6463: LD_VAR 0 2
6467: NOT
6468: OR
6469: IFFALSE 6473
// exit ;
6471: GO 6669
// case engine of engine_solar :
6473: LD_VAR 0 2
6477: PUSH
6478: LD_INT 2
6480: DOUBLE
6481: EQUAL
6482: IFTRUE 6486
6484: GO 6524
6486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6487: LD_ADDR_VAR 0 3
6491: PUSH
6492: LD_INT 11
6494: PUSH
6495: LD_INT 12
6497: PUSH
6498: LD_INT 13
6500: PUSH
6501: LD_INT 14
6503: PUSH
6504: LD_INT 1
6506: PUSH
6507: LD_INT 2
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: ST_TO_ADDR
6522: GO 6653
6524: LD_INT 1
6526: DOUBLE
6527: EQUAL
6528: IFTRUE 6532
6530: GO 6594
6532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6533: LD_ADDR_VAR 0 3
6537: PUSH
6538: LD_INT 11
6540: PUSH
6541: LD_INT 12
6543: PUSH
6544: LD_INT 13
6546: PUSH
6547: LD_INT 14
6549: PUSH
6550: LD_INT 1
6552: PUSH
6553: LD_INT 2
6555: PUSH
6556: LD_INT 3
6558: PUSH
6559: LD_INT 4
6561: PUSH
6562: LD_INT 5
6564: PUSH
6565: LD_INT 21
6567: PUSH
6568: LD_INT 23
6570: PUSH
6571: LD_INT 22
6573: PUSH
6574: LD_INT 24
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: ST_TO_ADDR
6592: GO 6653
6594: LD_INT 3
6596: DOUBLE
6597: EQUAL
6598: IFTRUE 6602
6600: GO 6652
6602: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6603: LD_ADDR_VAR 0 3
6607: PUSH
6608: LD_INT 13
6610: PUSH
6611: LD_INT 14
6613: PUSH
6614: LD_INT 2
6616: PUSH
6617: LD_INT 3
6619: PUSH
6620: LD_INT 4
6622: PUSH
6623: LD_INT 5
6625: PUSH
6626: LD_INT 21
6628: PUSH
6629: LD_INT 22
6631: PUSH
6632: LD_INT 23
6634: PUSH
6635: LD_INT 24
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: ST_TO_ADDR
6650: GO 6653
6652: POP
// result := ( chassis in result ) ;
6653: LD_ADDR_VAR 0 3
6657: PUSH
6658: LD_VAR 0 1
6662: PUSH
6663: LD_VAR 0 3
6667: IN
6668: ST_TO_ADDR
// end ;
6669: LD_VAR 0 3
6673: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6674: LD_INT 0
6676: PPUSH
// if not chassis or not weapon then
6677: LD_VAR 0 1
6681: NOT
6682: PUSH
6683: LD_VAR 0 2
6687: NOT
6688: OR
6689: IFFALSE 6693
// exit ;
6691: GO 7719
// case weapon of us_machine_gun :
6693: LD_VAR 0 2
6697: PUSH
6698: LD_INT 2
6700: DOUBLE
6701: EQUAL
6702: IFTRUE 6706
6704: GO 6736
6706: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6707: LD_ADDR_VAR 0 3
6711: PUSH
6712: LD_INT 1
6714: PUSH
6715: LD_INT 2
6717: PUSH
6718: LD_INT 3
6720: PUSH
6721: LD_INT 4
6723: PUSH
6724: LD_INT 5
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: ST_TO_ADDR
6734: GO 7703
6736: LD_INT 3
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6744
6742: GO 6774
6744: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6745: LD_ADDR_VAR 0 3
6749: PUSH
6750: LD_INT 1
6752: PUSH
6753: LD_INT 2
6755: PUSH
6756: LD_INT 3
6758: PUSH
6759: LD_INT 4
6761: PUSH
6762: LD_INT 5
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: ST_TO_ADDR
6772: GO 7703
6774: LD_INT 11
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6812
6782: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6783: LD_ADDR_VAR 0 3
6787: PUSH
6788: LD_INT 1
6790: PUSH
6791: LD_INT 2
6793: PUSH
6794: LD_INT 3
6796: PUSH
6797: LD_INT 4
6799: PUSH
6800: LD_INT 5
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: ST_TO_ADDR
6810: GO 7703
6812: LD_INT 4
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6846
6820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 3
6831: PUSH
6832: LD_INT 4
6834: PUSH
6835: LD_INT 5
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 7703
6846: LD_INT 5
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6880
6854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 2
6862: PUSH
6863: LD_INT 3
6865: PUSH
6866: LD_INT 4
6868: PUSH
6869: LD_INT 5
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 7703
6880: LD_INT 9
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6914
6888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: LD_INT 2
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: LD_INT 4
6902: PUSH
6903: LD_INT 5
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: ST_TO_ADDR
6912: GO 7703
6914: LD_INT 7
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 6948
6922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6923: LD_ADDR_VAR 0 3
6927: PUSH
6928: LD_INT 2
6930: PUSH
6931: LD_INT 3
6933: PUSH
6934: LD_INT 4
6936: PUSH
6937: LD_INT 5
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7703
6948: LD_INT 12
6950: DOUBLE
6951: EQUAL
6952: IFTRUE 6956
6954: GO 6982
6956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6957: LD_ADDR_VAR 0 3
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 4
6970: PUSH
6971: LD_INT 5
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: ST_TO_ADDR
6980: GO 7703
6982: LD_INT 13
6984: DOUBLE
6985: EQUAL
6986: IFTRUE 6990
6988: GO 7016
6990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6991: LD_ADDR_VAR 0 3
6995: PUSH
6996: LD_INT 2
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: LD_INT 4
7004: PUSH
7005: LD_INT 5
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: ST_TO_ADDR
7014: GO 7703
7016: LD_INT 14
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7042
7024: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: LD_INT 4
7032: PUSH
7033: LD_INT 5
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: ST_TO_ADDR
7040: GO 7703
7042: LD_INT 6
7044: DOUBLE
7045: EQUAL
7046: IFTRUE 7050
7048: GO 7068
7050: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7051: LD_ADDR_VAR 0 3
7055: PUSH
7056: LD_INT 4
7058: PUSH
7059: LD_INT 5
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: ST_TO_ADDR
7066: GO 7703
7068: LD_INT 10
7070: DOUBLE
7071: EQUAL
7072: IFTRUE 7076
7074: GO 7094
7076: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7077: LD_ADDR_VAR 0 3
7081: PUSH
7082: LD_INT 4
7084: PUSH
7085: LD_INT 5
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: ST_TO_ADDR
7092: GO 7703
7094: LD_INT 22
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7128
7102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7103: LD_ADDR_VAR 0 3
7107: PUSH
7108: LD_INT 11
7110: PUSH
7111: LD_INT 12
7113: PUSH
7114: LD_INT 13
7116: PUSH
7117: LD_INT 14
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: ST_TO_ADDR
7126: GO 7703
7128: LD_INT 23
7130: DOUBLE
7131: EQUAL
7132: IFTRUE 7136
7134: GO 7162
7136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_INT 11
7144: PUSH
7145: LD_INT 12
7147: PUSH
7148: LD_INT 13
7150: PUSH
7151: LD_INT 14
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: ST_TO_ADDR
7160: GO 7703
7162: LD_INT 24
7164: DOUBLE
7165: EQUAL
7166: IFTRUE 7170
7168: GO 7196
7170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7171: LD_ADDR_VAR 0 3
7175: PUSH
7176: LD_INT 11
7178: PUSH
7179: LD_INT 12
7181: PUSH
7182: LD_INT 13
7184: PUSH
7185: LD_INT 14
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: ST_TO_ADDR
7194: GO 7703
7196: LD_INT 30
7198: DOUBLE
7199: EQUAL
7200: IFTRUE 7204
7202: GO 7230
7204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7205: LD_ADDR_VAR 0 3
7209: PUSH
7210: LD_INT 11
7212: PUSH
7213: LD_INT 12
7215: PUSH
7216: LD_INT 13
7218: PUSH
7219: LD_INT 14
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: ST_TO_ADDR
7228: GO 7703
7230: LD_INT 25
7232: DOUBLE
7233: EQUAL
7234: IFTRUE 7238
7236: GO 7256
7238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_INT 13
7246: PUSH
7247: LD_INT 14
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: ST_TO_ADDR
7254: GO 7703
7256: LD_INT 27
7258: DOUBLE
7259: EQUAL
7260: IFTRUE 7264
7262: GO 7282
7264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7265: LD_ADDR_VAR 0 3
7269: PUSH
7270: LD_INT 13
7272: PUSH
7273: LD_INT 14
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: ST_TO_ADDR
7280: GO 7703
7282: LD_INT 28
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7308
7290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7291: LD_ADDR_VAR 0 3
7295: PUSH
7296: LD_INT 13
7298: PUSH
7299: LD_INT 14
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: ST_TO_ADDR
7306: GO 7703
7308: LD_INT 29
7310: DOUBLE
7311: EQUAL
7312: IFTRUE 7316
7314: GO 7334
7316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: LD_INT 13
7324: PUSH
7325: LD_INT 14
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: ST_TO_ADDR
7332: GO 7703
7334: LD_INT 31
7336: DOUBLE
7337: EQUAL
7338: IFTRUE 7342
7340: GO 7360
7342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7343: LD_ADDR_VAR 0 3
7347: PUSH
7348: LD_INT 13
7350: PUSH
7351: LD_INT 14
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: ST_TO_ADDR
7358: GO 7703
7360: LD_INT 26
7362: DOUBLE
7363: EQUAL
7364: IFTRUE 7368
7366: GO 7386
7368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7369: LD_ADDR_VAR 0 3
7373: PUSH
7374: LD_INT 13
7376: PUSH
7377: LD_INT 14
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: ST_TO_ADDR
7384: GO 7703
7386: LD_INT 42
7388: DOUBLE
7389: EQUAL
7390: IFTRUE 7394
7392: GO 7420
7394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7395: LD_ADDR_VAR 0 3
7399: PUSH
7400: LD_INT 21
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 23
7408: PUSH
7409: LD_INT 24
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: ST_TO_ADDR
7418: GO 7703
7420: LD_INT 43
7422: DOUBLE
7423: EQUAL
7424: IFTRUE 7428
7426: GO 7454
7428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7429: LD_ADDR_VAR 0 3
7433: PUSH
7434: LD_INT 21
7436: PUSH
7437: LD_INT 22
7439: PUSH
7440: LD_INT 23
7442: PUSH
7443: LD_INT 24
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: ST_TO_ADDR
7452: GO 7703
7454: LD_INT 44
7456: DOUBLE
7457: EQUAL
7458: IFTRUE 7462
7460: GO 7488
7462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7463: LD_ADDR_VAR 0 3
7467: PUSH
7468: LD_INT 21
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_INT 23
7476: PUSH
7477: LD_INT 24
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: ST_TO_ADDR
7486: GO 7703
7488: LD_INT 45
7490: DOUBLE
7491: EQUAL
7492: IFTRUE 7496
7494: GO 7522
7496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7497: LD_ADDR_VAR 0 3
7501: PUSH
7502: LD_INT 21
7504: PUSH
7505: LD_INT 22
7507: PUSH
7508: LD_INT 23
7510: PUSH
7511: LD_INT 24
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: ST_TO_ADDR
7520: GO 7703
7522: LD_INT 49
7524: DOUBLE
7525: EQUAL
7526: IFTRUE 7530
7528: GO 7556
7530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7531: LD_ADDR_VAR 0 3
7535: PUSH
7536: LD_INT 21
7538: PUSH
7539: LD_INT 22
7541: PUSH
7542: LD_INT 23
7544: PUSH
7545: LD_INT 24
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: ST_TO_ADDR
7554: GO 7703
7556: LD_INT 51
7558: DOUBLE
7559: EQUAL
7560: IFTRUE 7564
7562: GO 7590
7564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7565: LD_ADDR_VAR 0 3
7569: PUSH
7570: LD_INT 21
7572: PUSH
7573: LD_INT 22
7575: PUSH
7576: LD_INT 23
7578: PUSH
7579: LD_INT 24
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: ST_TO_ADDR
7588: GO 7703
7590: LD_INT 52
7592: DOUBLE
7593: EQUAL
7594: IFTRUE 7598
7596: GO 7624
7598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7599: LD_ADDR_VAR 0 3
7603: PUSH
7604: LD_INT 21
7606: PUSH
7607: LD_INT 22
7609: PUSH
7610: LD_INT 23
7612: PUSH
7613: LD_INT 24
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: ST_TO_ADDR
7622: GO 7703
7624: LD_INT 53
7626: DOUBLE
7627: EQUAL
7628: IFTRUE 7632
7630: GO 7650
7632: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7633: LD_ADDR_VAR 0 3
7637: PUSH
7638: LD_INT 23
7640: PUSH
7641: LD_INT 24
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: ST_TO_ADDR
7648: GO 7703
7650: LD_INT 46
7652: DOUBLE
7653: EQUAL
7654: IFTRUE 7658
7656: GO 7676
7658: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7659: LD_ADDR_VAR 0 3
7663: PUSH
7664: LD_INT 23
7666: PUSH
7667: LD_INT 24
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: ST_TO_ADDR
7674: GO 7703
7676: LD_INT 47
7678: DOUBLE
7679: EQUAL
7680: IFTRUE 7684
7682: GO 7702
7684: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7685: LD_ADDR_VAR 0 3
7689: PUSH
7690: LD_INT 23
7692: PUSH
7693: LD_INT 24
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: ST_TO_ADDR
7700: GO 7703
7702: POP
// result := ( chassis in result ) ;
7703: LD_ADDR_VAR 0 3
7707: PUSH
7708: LD_VAR 0 1
7712: PUSH
7713: LD_VAR 0 3
7717: IN
7718: ST_TO_ADDR
// end ;
7719: LD_VAR 0 3
7723: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7724: LD_INT 0
7726: PPUSH
7727: PPUSH
7728: PPUSH
7729: PPUSH
7730: PPUSH
7731: PPUSH
7732: PPUSH
// result := array ;
7733: LD_ADDR_VAR 0 5
7737: PUSH
7738: LD_VAR 0 1
7742: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7743: LD_VAR 0 1
7747: NOT
7748: PUSH
7749: LD_VAR 0 2
7753: NOT
7754: OR
7755: PUSH
7756: LD_VAR 0 3
7760: NOT
7761: OR
7762: PUSH
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: GREATER
7773: OR
7774: PUSH
7775: LD_VAR 0 3
7779: PUSH
7780: LD_VAR 0 1
7784: GREATER
7785: OR
7786: IFFALSE 7790
// exit ;
7788: GO 8086
// if direction then
7790: LD_VAR 0 4
7794: IFFALSE 7858
// begin d := 1 ;
7796: LD_ADDR_VAR 0 9
7800: PUSH
7801: LD_INT 1
7803: ST_TO_ADDR
// if i_from > i_to then
7804: LD_VAR 0 2
7808: PUSH
7809: LD_VAR 0 3
7813: GREATER
7814: IFFALSE 7840
// length := ( array - i_from ) + i_to else
7816: LD_ADDR_VAR 0 11
7820: PUSH
7821: LD_VAR 0 1
7825: PUSH
7826: LD_VAR 0 2
7830: MINUS
7831: PUSH
7832: LD_VAR 0 3
7836: PLUS
7837: ST_TO_ADDR
7838: GO 7856
// length := i_to - i_from ;
7840: LD_ADDR_VAR 0 11
7844: PUSH
7845: LD_VAR 0 3
7849: PUSH
7850: LD_VAR 0 2
7854: MINUS
7855: ST_TO_ADDR
// end else
7856: GO 7919
// begin d := - 1 ;
7858: LD_ADDR_VAR 0 9
7862: PUSH
7863: LD_INT 1
7865: NEG
7866: ST_TO_ADDR
// if i_from > i_to then
7867: LD_VAR 0 2
7871: PUSH
7872: LD_VAR 0 3
7876: GREATER
7877: IFFALSE 7897
// length := i_from - i_to else
7879: LD_ADDR_VAR 0 11
7883: PUSH
7884: LD_VAR 0 2
7888: PUSH
7889: LD_VAR 0 3
7893: MINUS
7894: ST_TO_ADDR
7895: GO 7919
// length := ( array - i_to ) + i_from ;
7897: LD_ADDR_VAR 0 11
7901: PUSH
7902: LD_VAR 0 1
7906: PUSH
7907: LD_VAR 0 3
7911: MINUS
7912: PUSH
7913: LD_VAR 0 2
7917: PLUS
7918: ST_TO_ADDR
// end ; if not length then
7919: LD_VAR 0 11
7923: NOT
7924: IFFALSE 7928
// exit ;
7926: GO 8086
// tmp := array ;
7928: LD_ADDR_VAR 0 10
7932: PUSH
7933: LD_VAR 0 1
7937: ST_TO_ADDR
// for i = 1 to length do
7938: LD_ADDR_VAR 0 6
7942: PUSH
7943: DOUBLE
7944: LD_INT 1
7946: DEC
7947: ST_TO_ADDR
7948: LD_VAR 0 11
7952: PUSH
7953: FOR_TO
7954: IFFALSE 8074
// begin for j = 1 to array do
7956: LD_ADDR_VAR 0 7
7960: PUSH
7961: DOUBLE
7962: LD_INT 1
7964: DEC
7965: ST_TO_ADDR
7966: LD_VAR 0 1
7970: PUSH
7971: FOR_TO
7972: IFFALSE 8060
// begin k := j + d ;
7974: LD_ADDR_VAR 0 8
7978: PUSH
7979: LD_VAR 0 7
7983: PUSH
7984: LD_VAR 0 9
7988: PLUS
7989: ST_TO_ADDR
// if k > array then
7990: LD_VAR 0 8
7994: PUSH
7995: LD_VAR 0 1
7999: GREATER
8000: IFFALSE 8010
// k := 1 ;
8002: LD_ADDR_VAR 0 8
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// if not k then
8010: LD_VAR 0 8
8014: NOT
8015: IFFALSE 8027
// k := array ;
8017: LD_ADDR_VAR 0 8
8021: PUSH
8022: LD_VAR 0 1
8026: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8027: LD_ADDR_VAR 0 10
8031: PUSH
8032: LD_VAR 0 10
8036: PPUSH
8037: LD_VAR 0 8
8041: PPUSH
8042: LD_VAR 0 1
8046: PUSH
8047: LD_VAR 0 7
8051: ARRAY
8052: PPUSH
8053: CALL_OW 1
8057: ST_TO_ADDR
// end ;
8058: GO 7971
8060: POP
8061: POP
// array := tmp ;
8062: LD_ADDR_VAR 0 1
8066: PUSH
8067: LD_VAR 0 10
8071: ST_TO_ADDR
// end ;
8072: GO 7953
8074: POP
8075: POP
// result := array ;
8076: LD_ADDR_VAR 0 5
8080: PUSH
8081: LD_VAR 0 1
8085: ST_TO_ADDR
// end ;
8086: LD_VAR 0 5
8090: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8091: LD_INT 0
8093: PPUSH
8094: PPUSH
// result := 0 ;
8095: LD_ADDR_VAR 0 3
8099: PUSH
8100: LD_INT 0
8102: ST_TO_ADDR
// if not array or not value in array then
8103: LD_VAR 0 1
8107: NOT
8108: PUSH
8109: LD_VAR 0 2
8113: PUSH
8114: LD_VAR 0 1
8118: IN
8119: NOT
8120: OR
8121: IFFALSE 8125
// exit ;
8123: GO 8179
// for i = 1 to array do
8125: LD_ADDR_VAR 0 4
8129: PUSH
8130: DOUBLE
8131: LD_INT 1
8133: DEC
8134: ST_TO_ADDR
8135: LD_VAR 0 1
8139: PUSH
8140: FOR_TO
8141: IFFALSE 8177
// if value = array [ i ] then
8143: LD_VAR 0 2
8147: PUSH
8148: LD_VAR 0 1
8152: PUSH
8153: LD_VAR 0 4
8157: ARRAY
8158: EQUAL
8159: IFFALSE 8175
// begin result := i ;
8161: LD_ADDR_VAR 0 3
8165: PUSH
8166: LD_VAR 0 4
8170: ST_TO_ADDR
// exit ;
8171: POP
8172: POP
8173: GO 8179
// end ;
8175: GO 8140
8177: POP
8178: POP
// end ;
8179: LD_VAR 0 3
8183: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8184: LD_INT 0
8186: PPUSH
// vc_chassis := chassis ;
8187: LD_ADDR_OWVAR 37
8191: PUSH
8192: LD_VAR 0 1
8196: ST_TO_ADDR
// vc_engine := engine ;
8197: LD_ADDR_OWVAR 39
8201: PUSH
8202: LD_VAR 0 2
8206: ST_TO_ADDR
// vc_control := control ;
8207: LD_ADDR_OWVAR 38
8211: PUSH
8212: LD_VAR 0 3
8216: ST_TO_ADDR
// vc_weapon := weapon ;
8217: LD_ADDR_OWVAR 40
8221: PUSH
8222: LD_VAR 0 4
8226: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8227: LD_ADDR_OWVAR 41
8231: PUSH
8232: LD_VAR 0 5
8236: ST_TO_ADDR
// end ;
8237: LD_VAR 0 6
8241: RET
// export function WantPlant ( unit ) ; var task ; begin
8242: LD_INT 0
8244: PPUSH
8245: PPUSH
// result := false ;
8246: LD_ADDR_VAR 0 2
8250: PUSH
8251: LD_INT 0
8253: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8254: LD_ADDR_VAR 0 3
8258: PUSH
8259: LD_VAR 0 1
8263: PPUSH
8264: CALL_OW 437
8268: ST_TO_ADDR
// if task then
8269: LD_VAR 0 3
8273: IFFALSE 8301
// if task [ 1 ] [ 1 ] = p then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 1
8282: ARRAY
8283: PUSH
8284: LD_INT 1
8286: ARRAY
8287: PUSH
8288: LD_STRING p
8290: EQUAL
8291: IFFALSE 8301
// result := true ;
8293: LD_ADDR_VAR 0 2
8297: PUSH
8298: LD_INT 1
8300: ST_TO_ADDR
// end ;
8301: LD_VAR 0 2
8305: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
// if pos < 1 then
8312: LD_VAR 0 2
8316: PUSH
8317: LD_INT 1
8319: LESS
8320: IFFALSE 8324
// exit ;
8322: GO 8627
// if pos = 1 then
8324: LD_VAR 0 2
8328: PUSH
8329: LD_INT 1
8331: EQUAL
8332: IFFALSE 8365
// result := Replace ( arr , pos [ 1 ] , value ) else
8334: LD_ADDR_VAR 0 4
8338: PUSH
8339: LD_VAR 0 1
8343: PPUSH
8344: LD_VAR 0 2
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 3
8357: PPUSH
8358: CALL_OW 1
8362: ST_TO_ADDR
8363: GO 8627
// begin tmp := arr ;
8365: LD_ADDR_VAR 0 6
8369: PUSH
8370: LD_VAR 0 1
8374: ST_TO_ADDR
// s_arr := [ tmp ] ;
8375: LD_ADDR_VAR 0 7
8379: PUSH
8380: LD_VAR 0 6
8384: PUSH
8385: EMPTY
8386: LIST
8387: ST_TO_ADDR
// for i = 1 to pos - 1 do
8388: LD_ADDR_VAR 0 5
8392: PUSH
8393: DOUBLE
8394: LD_INT 1
8396: DEC
8397: ST_TO_ADDR
8398: LD_VAR 0 2
8402: PUSH
8403: LD_INT 1
8405: MINUS
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8453
// begin tmp := tmp [ pos [ i ] ] ;
8410: LD_ADDR_VAR 0 6
8414: PUSH
8415: LD_VAR 0 6
8419: PUSH
8420: LD_VAR 0 2
8424: PUSH
8425: LD_VAR 0 5
8429: ARRAY
8430: ARRAY
8431: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8432: LD_ADDR_VAR 0 7
8436: PUSH
8437: LD_VAR 0 7
8441: PUSH
8442: LD_VAR 0 6
8446: PUSH
8447: EMPTY
8448: LIST
8449: ADD
8450: ST_TO_ADDR
// end ;
8451: GO 8407
8453: POP
8454: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8455: LD_ADDR_VAR 0 6
8459: PUSH
8460: LD_VAR 0 6
8464: PPUSH
8465: LD_VAR 0 2
8469: PUSH
8470: LD_VAR 0 2
8474: ARRAY
8475: PPUSH
8476: LD_VAR 0 3
8480: PPUSH
8481: CALL_OW 1
8485: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8486: LD_ADDR_VAR 0 7
8490: PUSH
8491: LD_VAR 0 7
8495: PPUSH
8496: LD_VAR 0 7
8500: PPUSH
8501: LD_VAR 0 6
8505: PPUSH
8506: CALL_OW 1
8510: ST_TO_ADDR
// for i = s_arr downto 2 do
8511: LD_ADDR_VAR 0 5
8515: PUSH
8516: DOUBLE
8517: LD_VAR 0 7
8521: INC
8522: ST_TO_ADDR
8523: LD_INT 2
8525: PUSH
8526: FOR_DOWNTO
8527: IFFALSE 8611
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8529: LD_ADDR_VAR 0 6
8533: PUSH
8534: LD_VAR 0 7
8538: PUSH
8539: LD_VAR 0 5
8543: PUSH
8544: LD_INT 1
8546: MINUS
8547: ARRAY
8548: PPUSH
8549: LD_VAR 0 2
8553: PUSH
8554: LD_VAR 0 5
8558: PUSH
8559: LD_INT 1
8561: MINUS
8562: ARRAY
8563: PPUSH
8564: LD_VAR 0 7
8568: PUSH
8569: LD_VAR 0 5
8573: ARRAY
8574: PPUSH
8575: CALL_OW 1
8579: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8580: LD_ADDR_VAR 0 7
8584: PUSH
8585: LD_VAR 0 7
8589: PPUSH
8590: LD_VAR 0 5
8594: PUSH
8595: LD_INT 1
8597: MINUS
8598: PPUSH
8599: LD_VAR 0 6
8603: PPUSH
8604: CALL_OW 1
8608: ST_TO_ADDR
// end ;
8609: GO 8526
8611: POP
8612: POP
// result := s_arr [ 1 ] ;
8613: LD_ADDR_VAR 0 4
8617: PUSH
8618: LD_VAR 0 7
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: ST_TO_ADDR
// end ; end ;
8627: LD_VAR 0 4
8631: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8632: LD_INT 0
8634: PPUSH
8635: PPUSH
// if not list then
8636: LD_VAR 0 1
8640: NOT
8641: IFFALSE 8645
// exit ;
8643: GO 8736
// i := list [ pos1 ] ;
8645: LD_ADDR_VAR 0 5
8649: PUSH
8650: LD_VAR 0 1
8654: PUSH
8655: LD_VAR 0 2
8659: ARRAY
8660: ST_TO_ADDR
// if not i then
8661: LD_VAR 0 5
8665: NOT
8666: IFFALSE 8670
// exit ;
8668: GO 8736
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8670: LD_ADDR_VAR 0 1
8674: PUSH
8675: LD_VAR 0 1
8679: PPUSH
8680: LD_VAR 0 2
8684: PPUSH
8685: LD_VAR 0 1
8689: PUSH
8690: LD_VAR 0 3
8694: ARRAY
8695: PPUSH
8696: CALL_OW 1
8700: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8701: LD_ADDR_VAR 0 1
8705: PUSH
8706: LD_VAR 0 1
8710: PPUSH
8711: LD_VAR 0 3
8715: PPUSH
8716: LD_VAR 0 5
8720: PPUSH
8721: CALL_OW 1
8725: ST_TO_ADDR
// result := list ;
8726: LD_ADDR_VAR 0 4
8730: PUSH
8731: LD_VAR 0 1
8735: ST_TO_ADDR
// end ;
8736: LD_VAR 0 4
8740: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8741: LD_INT 0
8743: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8744: LD_ADDR_VAR 0 5
8748: PUSH
8749: LD_VAR 0 1
8753: PPUSH
8754: CALL_OW 250
8758: PPUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: CALL_OW 251
8768: PPUSH
8769: LD_VAR 0 2
8773: PPUSH
8774: LD_VAR 0 3
8778: PPUSH
8779: LD_VAR 0 4
8783: PPUSH
8784: CALL 8794 0 5
8788: ST_TO_ADDR
// end ;
8789: LD_VAR 0 5
8793: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8794: LD_INT 0
8796: PPUSH
8797: PPUSH
8798: PPUSH
8799: PPUSH
// if not list then
8800: LD_VAR 0 3
8804: NOT
8805: IFFALSE 8809
// exit ;
8807: GO 9197
// result := [ ] ;
8809: LD_ADDR_VAR 0 6
8813: PUSH
8814: EMPTY
8815: ST_TO_ADDR
// for i in list do
8816: LD_ADDR_VAR 0 7
8820: PUSH
8821: LD_VAR 0 3
8825: PUSH
8826: FOR_IN
8827: IFFALSE 9029
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8829: LD_ADDR_VAR 0 9
8833: PUSH
8834: LD_VAR 0 7
8838: PPUSH
8839: LD_VAR 0 1
8843: PPUSH
8844: LD_VAR 0 2
8848: PPUSH
8849: CALL_OW 297
8853: ST_TO_ADDR
// if not result then
8854: LD_VAR 0 6
8858: NOT
8859: IFFALSE 8885
// result := [ [ i , tmp ] ] else
8861: LD_ADDR_VAR 0 6
8865: PUSH
8866: LD_VAR 0 7
8870: PUSH
8871: LD_VAR 0 9
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: ST_TO_ADDR
8883: GO 9027
// begin if result [ result ] [ 2 ] < tmp then
8885: LD_VAR 0 6
8889: PUSH
8890: LD_VAR 0 6
8894: ARRAY
8895: PUSH
8896: LD_INT 2
8898: ARRAY
8899: PUSH
8900: LD_VAR 0 9
8904: LESS
8905: IFFALSE 8947
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8907: LD_ADDR_VAR 0 6
8911: PUSH
8912: LD_VAR 0 6
8916: PPUSH
8917: LD_VAR 0 6
8921: PUSH
8922: LD_INT 1
8924: PLUS
8925: PPUSH
8926: LD_VAR 0 7
8930: PUSH
8931: LD_VAR 0 9
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 2
8944: ST_TO_ADDR
8945: GO 9027
// for j = 1 to result do
8947: LD_ADDR_VAR 0 8
8951: PUSH
8952: DOUBLE
8953: LD_INT 1
8955: DEC
8956: ST_TO_ADDR
8957: LD_VAR 0 6
8961: PUSH
8962: FOR_TO
8963: IFFALSE 9025
// begin if tmp < result [ j ] [ 2 ] then
8965: LD_VAR 0 9
8969: PUSH
8970: LD_VAR 0 6
8974: PUSH
8975: LD_VAR 0 8
8979: ARRAY
8980: PUSH
8981: LD_INT 2
8983: ARRAY
8984: LESS
8985: IFFALSE 9023
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8987: LD_ADDR_VAR 0 6
8991: PUSH
8992: LD_VAR 0 6
8996: PPUSH
8997: LD_VAR 0 8
9001: PPUSH
9002: LD_VAR 0 7
9006: PUSH
9007: LD_VAR 0 9
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PPUSH
9016: CALL_OW 2
9020: ST_TO_ADDR
// break ;
9021: GO 9025
// end ; end ;
9023: GO 8962
9025: POP
9026: POP
// end ; end ;
9027: GO 8826
9029: POP
9030: POP
// if result and not asc then
9031: LD_VAR 0 6
9035: PUSH
9036: LD_VAR 0 4
9040: NOT
9041: AND
9042: IFFALSE 9117
// begin tmp := result ;
9044: LD_ADDR_VAR 0 9
9048: PUSH
9049: LD_VAR 0 6
9053: ST_TO_ADDR
// for i = tmp downto 1 do
9054: LD_ADDR_VAR 0 7
9058: PUSH
9059: DOUBLE
9060: LD_VAR 0 9
9064: INC
9065: ST_TO_ADDR
9066: LD_INT 1
9068: PUSH
9069: FOR_DOWNTO
9070: IFFALSE 9115
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9072: LD_ADDR_VAR 0 6
9076: PUSH
9077: LD_VAR 0 6
9081: PPUSH
9082: LD_VAR 0 9
9086: PUSH
9087: LD_VAR 0 7
9091: MINUS
9092: PUSH
9093: LD_INT 1
9095: PLUS
9096: PPUSH
9097: LD_VAR 0 9
9101: PUSH
9102: LD_VAR 0 7
9106: ARRAY
9107: PPUSH
9108: CALL_OW 1
9112: ST_TO_ADDR
9113: GO 9069
9115: POP
9116: POP
// end ; tmp := [ ] ;
9117: LD_ADDR_VAR 0 9
9121: PUSH
9122: EMPTY
9123: ST_TO_ADDR
// if mode then
9124: LD_VAR 0 5
9128: IFFALSE 9197
// begin for i = 1 to result do
9130: LD_ADDR_VAR 0 7
9134: PUSH
9135: DOUBLE
9136: LD_INT 1
9138: DEC
9139: ST_TO_ADDR
9140: LD_VAR 0 6
9144: PUSH
9145: FOR_TO
9146: IFFALSE 9185
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9148: LD_ADDR_VAR 0 9
9152: PUSH
9153: LD_VAR 0 9
9157: PPUSH
9158: LD_VAR 0 7
9162: PPUSH
9163: LD_VAR 0 6
9167: PUSH
9168: LD_VAR 0 7
9172: ARRAY
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 1
9182: ST_TO_ADDR
9183: GO 9145
9185: POP
9186: POP
// result := tmp ;
9187: LD_ADDR_VAR 0 6
9191: PUSH
9192: LD_VAR 0 9
9196: ST_TO_ADDR
// end ; end ;
9197: LD_VAR 0 6
9201: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9202: LD_INT 0
9204: PPUSH
9205: PPUSH
9206: PPUSH
9207: PPUSH
9208: PPUSH
9209: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9210: LD_ADDR_VAR 0 5
9214: PUSH
9215: LD_INT 0
9217: PUSH
9218: LD_INT 0
9220: PUSH
9221: LD_INT 0
9223: PUSH
9224: EMPTY
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: ST_TO_ADDR
// if not x or not y then
9232: LD_VAR 0 2
9236: NOT
9237: PUSH
9238: LD_VAR 0 3
9242: NOT
9243: OR
9244: IFFALSE 9248
// exit ;
9246: GO 10894
// if not range then
9248: LD_VAR 0 4
9252: NOT
9253: IFFALSE 9263
// range := 10 ;
9255: LD_ADDR_VAR 0 4
9259: PUSH
9260: LD_INT 10
9262: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9263: LD_ADDR_VAR 0 8
9267: PUSH
9268: LD_INT 81
9270: PUSH
9271: LD_VAR 0 1
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 92
9282: PUSH
9283: LD_VAR 0 2
9287: PUSH
9288: LD_VAR 0 3
9292: PUSH
9293: LD_VAR 0 4
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 3
9306: PUSH
9307: LD_INT 21
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: PPUSH
9326: CALL_OW 69
9330: ST_TO_ADDR
// if not tmp then
9331: LD_VAR 0 8
9335: NOT
9336: IFFALSE 9340
// exit ;
9338: GO 10894
// for i in tmp do
9340: LD_ADDR_VAR 0 6
9344: PUSH
9345: LD_VAR 0 8
9349: PUSH
9350: FOR_IN
9351: IFFALSE 10869
// begin points := [ 0 , 0 , 0 ] ;
9353: LD_ADDR_VAR 0 9
9357: PUSH
9358: LD_INT 0
9360: PUSH
9361: LD_INT 0
9363: PUSH
9364: LD_INT 0
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: LIST
9371: ST_TO_ADDR
// bpoints := 1 ;
9372: LD_ADDR_VAR 0 10
9376: PUSH
9377: LD_INT 1
9379: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9380: LD_VAR 0 6
9384: PPUSH
9385: CALL_OW 247
9389: PUSH
9390: LD_INT 1
9392: DOUBLE
9393: EQUAL
9394: IFTRUE 9398
9396: GO 9976
9398: POP
// begin if GetClass ( i ) = 1 then
9399: LD_VAR 0 6
9403: PPUSH
9404: CALL_OW 257
9408: PUSH
9409: LD_INT 1
9411: EQUAL
9412: IFFALSE 9433
// points := [ 10 , 5 , 3 ] ;
9414: LD_ADDR_VAR 0 9
9418: PUSH
9419: LD_INT 10
9421: PUSH
9422: LD_INT 5
9424: PUSH
9425: LD_INT 3
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: LIST
9432: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 257
9442: PUSH
9443: LD_INT 2
9445: PUSH
9446: LD_INT 3
9448: PUSH
9449: LD_INT 4
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: IN
9457: IFFALSE 9478
// points := [ 3 , 2 , 1 ] ;
9459: LD_ADDR_VAR 0 9
9463: PUSH
9464: LD_INT 3
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 1
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9478: LD_VAR 0 6
9482: PPUSH
9483: CALL_OW 257
9487: PUSH
9488: LD_INT 5
9490: EQUAL
9491: IFFALSE 9512
// points := [ 130 , 5 , 2 ] ;
9493: LD_ADDR_VAR 0 9
9497: PUSH
9498: LD_INT 130
9500: PUSH
9501: LD_INT 5
9503: PUSH
9504: LD_INT 2
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9512: LD_VAR 0 6
9516: PPUSH
9517: CALL_OW 257
9521: PUSH
9522: LD_INT 8
9524: EQUAL
9525: IFFALSE 9546
// points := [ 35 , 35 , 30 ] ;
9527: LD_ADDR_VAR 0 9
9531: PUSH
9532: LD_INT 35
9534: PUSH
9535: LD_INT 35
9537: PUSH
9538: LD_INT 30
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9546: LD_VAR 0 6
9550: PPUSH
9551: CALL_OW 257
9555: PUSH
9556: LD_INT 9
9558: EQUAL
9559: IFFALSE 9580
// points := [ 20 , 55 , 40 ] ;
9561: LD_ADDR_VAR 0 9
9565: PUSH
9566: LD_INT 20
9568: PUSH
9569: LD_INT 55
9571: PUSH
9572: LD_INT 40
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: LIST
9579: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9580: LD_VAR 0 6
9584: PPUSH
9585: CALL_OW 257
9589: PUSH
9590: LD_INT 12
9592: PUSH
9593: LD_INT 16
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: IN
9600: IFFALSE 9621
// points := [ 5 , 3 , 2 ] ;
9602: LD_ADDR_VAR 0 9
9606: PUSH
9607: LD_INT 5
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: LD_INT 2
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 257
9630: PUSH
9631: LD_INT 17
9633: EQUAL
9634: IFFALSE 9655
// points := [ 100 , 50 , 75 ] ;
9636: LD_ADDR_VAR 0 9
9640: PUSH
9641: LD_INT 100
9643: PUSH
9644: LD_INT 50
9646: PUSH
9647: LD_INT 75
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9655: LD_VAR 0 6
9659: PPUSH
9660: CALL_OW 257
9664: PUSH
9665: LD_INT 15
9667: EQUAL
9668: IFFALSE 9689
// points := [ 10 , 5 , 3 ] ;
9670: LD_ADDR_VAR 0 9
9674: PUSH
9675: LD_INT 10
9677: PUSH
9678: LD_INT 5
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9689: LD_VAR 0 6
9693: PPUSH
9694: CALL_OW 257
9698: PUSH
9699: LD_INT 14
9701: EQUAL
9702: IFFALSE 9723
// points := [ 10 , 0 , 0 ] ;
9704: LD_ADDR_VAR 0 9
9708: PUSH
9709: LD_INT 10
9711: PUSH
9712: LD_INT 0
9714: PUSH
9715: LD_INT 0
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9723: LD_VAR 0 6
9727: PPUSH
9728: CALL_OW 257
9732: PUSH
9733: LD_INT 11
9735: EQUAL
9736: IFFALSE 9757
// points := [ 30 , 10 , 5 ] ;
9738: LD_ADDR_VAR 0 9
9742: PUSH
9743: LD_INT 30
9745: PUSH
9746: LD_INT 10
9748: PUSH
9749: LD_INT 5
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9757: LD_VAR 0 1
9761: PPUSH
9762: LD_INT 5
9764: PPUSH
9765: CALL_OW 321
9769: PUSH
9770: LD_INT 2
9772: EQUAL
9773: IFFALSE 9790
// bpoints := bpoints * 1.8 ;
9775: LD_ADDR_VAR 0 10
9779: PUSH
9780: LD_VAR 0 10
9784: PUSH
9785: LD_REAL  1.80000000000000E+0000
9788: MUL
9789: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9790: LD_VAR 0 6
9794: PPUSH
9795: CALL_OW 257
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: LD_INT 2
9805: PUSH
9806: LD_INT 3
9808: PUSH
9809: LD_INT 4
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: IN
9818: PUSH
9819: LD_VAR 0 1
9823: PPUSH
9824: LD_INT 51
9826: PPUSH
9827: CALL_OW 321
9831: PUSH
9832: LD_INT 2
9834: EQUAL
9835: AND
9836: IFFALSE 9853
// bpoints := bpoints * 1.2 ;
9838: LD_ADDR_VAR 0 10
9842: PUSH
9843: LD_VAR 0 10
9847: PUSH
9848: LD_REAL  1.20000000000000E+0000
9851: MUL
9852: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9853: LD_VAR 0 6
9857: PPUSH
9858: CALL_OW 257
9862: PUSH
9863: LD_INT 5
9865: PUSH
9866: LD_INT 7
9868: PUSH
9869: LD_INT 9
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: IN
9877: PUSH
9878: LD_VAR 0 1
9882: PPUSH
9883: LD_INT 52
9885: PPUSH
9886: CALL_OW 321
9890: PUSH
9891: LD_INT 2
9893: EQUAL
9894: AND
9895: IFFALSE 9912
// bpoints := bpoints * 1.5 ;
9897: LD_ADDR_VAR 0 10
9901: PUSH
9902: LD_VAR 0 10
9906: PUSH
9907: LD_REAL  1.50000000000000E+0000
9910: MUL
9911: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9912: LD_VAR 0 1
9916: PPUSH
9917: LD_INT 66
9919: PPUSH
9920: CALL_OW 321
9924: PUSH
9925: LD_INT 2
9927: EQUAL
9928: IFFALSE 9945
// bpoints := bpoints * 1.1 ;
9930: LD_ADDR_VAR 0 10
9934: PUSH
9935: LD_VAR 0 10
9939: PUSH
9940: LD_REAL  1.10000000000000E+0000
9943: MUL
9944: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9945: LD_ADDR_VAR 0 10
9949: PUSH
9950: LD_VAR 0 10
9954: PUSH
9955: LD_VAR 0 6
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: CALL_OW 259
9967: PUSH
9968: LD_REAL  1.15000000000000E+0000
9971: MUL
9972: MUL
9973: ST_TO_ADDR
// end ; unit_vehicle :
9974: GO 10798
9976: LD_INT 2
9978: DOUBLE
9979: EQUAL
9980: IFTRUE 9984
9982: GO 10786
9984: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9985: LD_VAR 0 6
9989: PPUSH
9990: CALL_OW 264
9994: PUSH
9995: LD_INT 2
9997: PUSH
9998: LD_INT 42
10000: PUSH
10001: LD_INT 24
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: IN
10009: IFFALSE 10030
// points := [ 25 , 5 , 3 ] ;
10011: LD_ADDR_VAR 0 9
10015: PUSH
10016: LD_INT 25
10018: PUSH
10019: LD_INT 5
10021: PUSH
10022: LD_INT 3
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: LIST
10029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10030: LD_VAR 0 6
10034: PPUSH
10035: CALL_OW 264
10039: PUSH
10040: LD_INT 4
10042: PUSH
10043: LD_INT 43
10045: PUSH
10046: LD_INT 25
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: LIST
10053: IN
10054: IFFALSE 10075
// points := [ 40 , 15 , 5 ] ;
10056: LD_ADDR_VAR 0 9
10060: PUSH
10061: LD_INT 40
10063: PUSH
10064: LD_INT 15
10066: PUSH
10067: LD_INT 5
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: LIST
10074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10075: LD_VAR 0 6
10079: PPUSH
10080: CALL_OW 264
10084: PUSH
10085: LD_INT 3
10087: PUSH
10088: LD_INT 23
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: IN
10095: IFFALSE 10116
// points := [ 7 , 25 , 8 ] ;
10097: LD_ADDR_VAR 0 9
10101: PUSH
10102: LD_INT 7
10104: PUSH
10105: LD_INT 25
10107: PUSH
10108: LD_INT 8
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: LIST
10115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10116: LD_VAR 0 6
10120: PPUSH
10121: CALL_OW 264
10125: PUSH
10126: LD_INT 5
10128: PUSH
10129: LD_INT 27
10131: PUSH
10132: LD_INT 44
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: IN
10140: IFFALSE 10161
// points := [ 14 , 50 , 16 ] ;
10142: LD_ADDR_VAR 0 9
10146: PUSH
10147: LD_INT 14
10149: PUSH
10150: LD_INT 50
10152: PUSH
10153: LD_INT 16
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: LIST
10160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10161: LD_VAR 0 6
10165: PPUSH
10166: CALL_OW 264
10170: PUSH
10171: LD_INT 6
10173: PUSH
10174: LD_INT 46
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: IN
10181: IFFALSE 10202
// points := [ 32 , 120 , 70 ] ;
10183: LD_ADDR_VAR 0 9
10187: PUSH
10188: LD_INT 32
10190: PUSH
10191: LD_INT 120
10193: PUSH
10194: LD_INT 70
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
10202: LD_VAR 0 6
10206: PPUSH
10207: CALL_OW 264
10211: PUSH
10212: LD_INT 7
10214: PUSH
10215: LD_INT 28
10217: PUSH
10218: LD_INT 45
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: IN
10226: IFFALSE 10247
// points := [ 35 , 20 , 45 ] ;
10228: LD_ADDR_VAR 0 9
10232: PUSH
10233: LD_INT 35
10235: PUSH
10236: LD_INT 20
10238: PUSH
10239: LD_INT 45
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: LIST
10246: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10247: LD_VAR 0 6
10251: PPUSH
10252: CALL_OW 264
10256: PUSH
10257: LD_INT 47
10259: PUSH
10260: EMPTY
10261: LIST
10262: IN
10263: IFFALSE 10284
// points := [ 67 , 45 , 75 ] ;
10265: LD_ADDR_VAR 0 9
10269: PUSH
10270: LD_INT 67
10272: PUSH
10273: LD_INT 45
10275: PUSH
10276: LD_INT 75
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10284: LD_VAR 0 6
10288: PPUSH
10289: CALL_OW 264
10293: PUSH
10294: LD_INT 26
10296: PUSH
10297: EMPTY
10298: LIST
10299: IN
10300: IFFALSE 10321
// points := [ 120 , 30 , 80 ] ;
10302: LD_ADDR_VAR 0 9
10306: PUSH
10307: LD_INT 120
10309: PUSH
10310: LD_INT 30
10312: PUSH
10313: LD_INT 80
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10321: LD_VAR 0 6
10325: PPUSH
10326: CALL_OW 264
10330: PUSH
10331: LD_INT 22
10333: PUSH
10334: EMPTY
10335: LIST
10336: IN
10337: IFFALSE 10358
// points := [ 40 , 1 , 1 ] ;
10339: LD_ADDR_VAR 0 9
10343: PUSH
10344: LD_INT 40
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: LD_INT 1
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: LIST
10357: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10358: LD_VAR 0 6
10362: PPUSH
10363: CALL_OW 264
10367: PUSH
10368: LD_INT 29
10370: PUSH
10371: EMPTY
10372: LIST
10373: IN
10374: IFFALSE 10395
// points := [ 70 , 200 , 400 ] ;
10376: LD_ADDR_VAR 0 9
10380: PUSH
10381: LD_INT 70
10383: PUSH
10384: LD_INT 200
10386: PUSH
10387: LD_INT 400
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10395: LD_VAR 0 6
10399: PPUSH
10400: CALL_OW 264
10404: PUSH
10405: LD_INT 14
10407: PUSH
10408: LD_INT 53
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: IN
10415: IFFALSE 10436
// points := [ 40 , 10 , 20 ] ;
10417: LD_ADDR_VAR 0 9
10421: PUSH
10422: LD_INT 40
10424: PUSH
10425: LD_INT 10
10427: PUSH
10428: LD_INT 20
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: LIST
10435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10436: LD_VAR 0 6
10440: PPUSH
10441: CALL_OW 264
10445: PUSH
10446: LD_INT 9
10448: PUSH
10449: EMPTY
10450: LIST
10451: IN
10452: IFFALSE 10473
// points := [ 5 , 70 , 20 ] ;
10454: LD_ADDR_VAR 0 9
10458: PUSH
10459: LD_INT 5
10461: PUSH
10462: LD_INT 70
10464: PUSH
10465: LD_INT 20
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10473: LD_VAR 0 6
10477: PPUSH
10478: CALL_OW 264
10482: PUSH
10483: LD_INT 10
10485: PUSH
10486: EMPTY
10487: LIST
10488: IN
10489: IFFALSE 10510
// points := [ 35 , 110 , 70 ] ;
10491: LD_ADDR_VAR 0 9
10495: PUSH
10496: LD_INT 35
10498: PUSH
10499: LD_INT 110
10501: PUSH
10502: LD_INT 70
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10510: LD_VAR 0 6
10514: PPUSH
10515: CALL_OW 265
10519: PUSH
10520: LD_INT 25
10522: EQUAL
10523: IFFALSE 10544
// points := [ 80 , 65 , 100 ] ;
10525: LD_ADDR_VAR 0 9
10529: PUSH
10530: LD_INT 80
10532: PUSH
10533: LD_INT 65
10535: PUSH
10536: LD_INT 100
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10544: LD_VAR 0 6
10548: PPUSH
10549: CALL_OW 263
10553: PUSH
10554: LD_INT 1
10556: EQUAL
10557: IFFALSE 10592
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10559: LD_ADDR_VAR 0 10
10563: PUSH
10564: LD_VAR 0 10
10568: PUSH
10569: LD_VAR 0 6
10573: PPUSH
10574: CALL_OW 311
10578: PPUSH
10579: LD_INT 3
10581: PPUSH
10582: CALL_OW 259
10586: PUSH
10587: LD_INT 4
10589: MUL
10590: MUL
10591: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10592: LD_VAR 0 6
10596: PPUSH
10597: CALL_OW 263
10601: PUSH
10602: LD_INT 2
10604: EQUAL
10605: IFFALSE 10656
// begin j := IsControledBy ( i ) ;
10607: LD_ADDR_VAR 0 7
10611: PUSH
10612: LD_VAR 0 6
10616: PPUSH
10617: CALL_OW 312
10621: ST_TO_ADDR
// if j then
10622: LD_VAR 0 7
10626: IFFALSE 10656
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10628: LD_ADDR_VAR 0 10
10632: PUSH
10633: LD_VAR 0 10
10637: PUSH
10638: LD_VAR 0 7
10642: PPUSH
10643: LD_INT 3
10645: PPUSH
10646: CALL_OW 259
10650: PUSH
10651: LD_INT 3
10653: MUL
10654: MUL
10655: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10656: LD_VAR 0 6
10660: PPUSH
10661: CALL_OW 264
10665: PUSH
10666: LD_INT 5
10668: PUSH
10669: LD_INT 6
10671: PUSH
10672: LD_INT 46
10674: PUSH
10675: LD_INT 44
10677: PUSH
10678: LD_INT 47
10680: PUSH
10681: LD_INT 45
10683: PUSH
10684: LD_INT 28
10686: PUSH
10687: LD_INT 7
10689: PUSH
10690: LD_INT 27
10692: PUSH
10693: LD_INT 29
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: IN
10708: PUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: LD_INT 52
10716: PPUSH
10717: CALL_OW 321
10721: PUSH
10722: LD_INT 2
10724: EQUAL
10725: AND
10726: IFFALSE 10743
// bpoints := bpoints * 1.2 ;
10728: LD_ADDR_VAR 0 10
10732: PUSH
10733: LD_VAR 0 10
10737: PUSH
10738: LD_REAL  1.20000000000000E+0000
10741: MUL
10742: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10743: LD_VAR 0 6
10747: PPUSH
10748: CALL_OW 264
10752: PUSH
10753: LD_INT 6
10755: PUSH
10756: LD_INT 46
10758: PUSH
10759: LD_INT 47
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: LIST
10766: IN
10767: IFFALSE 10784
// bpoints := bpoints * 1.2 ;
10769: LD_ADDR_VAR 0 10
10773: PUSH
10774: LD_VAR 0 10
10778: PUSH
10779: LD_REAL  1.20000000000000E+0000
10782: MUL
10783: ST_TO_ADDR
// end ; unit_building :
10784: GO 10798
10786: LD_INT 3
10788: DOUBLE
10789: EQUAL
10790: IFTRUE 10794
10792: GO 10797
10794: POP
// ; end ;
10795: GO 10798
10797: POP
// for j = 1 to 3 do
10798: LD_ADDR_VAR 0 7
10802: PUSH
10803: DOUBLE
10804: LD_INT 1
10806: DEC
10807: ST_TO_ADDR
10808: LD_INT 3
10810: PUSH
10811: FOR_TO
10812: IFFALSE 10865
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10814: LD_ADDR_VAR 0 5
10818: PUSH
10819: LD_VAR 0 5
10823: PPUSH
10824: LD_VAR 0 7
10828: PPUSH
10829: LD_VAR 0 5
10833: PUSH
10834: LD_VAR 0 7
10838: ARRAY
10839: PUSH
10840: LD_VAR 0 9
10844: PUSH
10845: LD_VAR 0 7
10849: ARRAY
10850: PUSH
10851: LD_VAR 0 10
10855: MUL
10856: PLUS
10857: PPUSH
10858: CALL_OW 1
10862: ST_TO_ADDR
10863: GO 10811
10865: POP
10866: POP
// end ;
10867: GO 9350
10869: POP
10870: POP
// result := Replace ( result , 4 , tmp ) ;
10871: LD_ADDR_VAR 0 5
10875: PUSH
10876: LD_VAR 0 5
10880: PPUSH
10881: LD_INT 4
10883: PPUSH
10884: LD_VAR 0 8
10888: PPUSH
10889: CALL_OW 1
10893: ST_TO_ADDR
// end ;
10894: LD_VAR 0 5
10898: RET
// export function DangerAtRange ( unit , range ) ; begin
10899: LD_INT 0
10901: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10902: LD_ADDR_VAR 0 3
10906: PUSH
10907: LD_VAR 0 1
10911: PPUSH
10912: CALL_OW 255
10916: PPUSH
10917: LD_VAR 0 1
10921: PPUSH
10922: CALL_OW 250
10926: PPUSH
10927: LD_VAR 0 1
10931: PPUSH
10932: CALL_OW 251
10936: PPUSH
10937: LD_VAR 0 2
10941: PPUSH
10942: CALL 9202 0 4
10946: ST_TO_ADDR
// end ;
10947: LD_VAR 0 3
10951: RET
// export function DangerInArea ( side , area ) ; begin
10952: LD_INT 0
10954: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10955: LD_ADDR_VAR 0 3
10959: PUSH
10960: LD_VAR 0 2
10964: PPUSH
10965: LD_INT 81
10967: PUSH
10968: LD_VAR 0 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PPUSH
10977: CALL_OW 70
10981: ST_TO_ADDR
// end ;
10982: LD_VAR 0 3
10986: RET
// export function IsExtension ( b ) ; begin
10987: LD_INT 0
10989: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10990: LD_ADDR_VAR 0 2
10994: PUSH
10995: LD_VAR 0 1
10999: PUSH
11000: LD_INT 23
11002: PUSH
11003: LD_INT 20
11005: PUSH
11006: LD_INT 22
11008: PUSH
11009: LD_INT 17
11011: PUSH
11012: LD_INT 24
11014: PUSH
11015: LD_INT 21
11017: PUSH
11018: LD_INT 19
11020: PUSH
11021: LD_INT 16
11023: PUSH
11024: LD_INT 25
11026: PUSH
11027: LD_INT 18
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: IN
11042: ST_TO_ADDR
// end ;
11043: LD_VAR 0 2
11047: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11048: LD_INT 0
11050: PPUSH
11051: PPUSH
11052: PPUSH
// result := [ ] ;
11053: LD_ADDR_VAR 0 4
11057: PUSH
11058: EMPTY
11059: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11060: LD_ADDR_VAR 0 5
11064: PUSH
11065: LD_VAR 0 2
11069: PPUSH
11070: LD_INT 21
11072: PUSH
11073: LD_INT 3
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PPUSH
11080: CALL_OW 70
11084: ST_TO_ADDR
// if not tmp then
11085: LD_VAR 0 5
11089: NOT
11090: IFFALSE 11094
// exit ;
11092: GO 11158
// if checkLink then
11094: LD_VAR 0 3
11098: IFFALSE 11148
// begin for i in tmp do
11100: LD_ADDR_VAR 0 6
11104: PUSH
11105: LD_VAR 0 5
11109: PUSH
11110: FOR_IN
11111: IFFALSE 11146
// if GetBase ( i ) <> base then
11113: LD_VAR 0 6
11117: PPUSH
11118: CALL_OW 274
11122: PUSH
11123: LD_VAR 0 1
11127: NONEQUAL
11128: IFFALSE 11144
// ComLinkToBase ( base , i ) ;
11130: LD_VAR 0 1
11134: PPUSH
11135: LD_VAR 0 6
11139: PPUSH
11140: CALL_OW 169
11144: GO 11110
11146: POP
11147: POP
// end ; result := tmp ;
11148: LD_ADDR_VAR 0 4
11152: PUSH
11153: LD_VAR 0 5
11157: ST_TO_ADDR
// end ;
11158: LD_VAR 0 4
11162: RET
// export function ComComplete ( units , b ) ; var i ; begin
11163: LD_INT 0
11165: PPUSH
11166: PPUSH
// if not units then
11167: LD_VAR 0 1
11171: NOT
11172: IFFALSE 11176
// exit ;
11174: GO 11266
// for i in units do
11176: LD_ADDR_VAR 0 4
11180: PUSH
11181: LD_VAR 0 1
11185: PUSH
11186: FOR_IN
11187: IFFALSE 11264
// if BuildingStatus ( b ) = bs_build then
11189: LD_VAR 0 2
11193: PPUSH
11194: CALL_OW 461
11198: PUSH
11199: LD_INT 1
11201: EQUAL
11202: IFFALSE 11262
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11204: LD_VAR 0 4
11208: PPUSH
11209: LD_STRING h
11211: PUSH
11212: LD_VAR 0 2
11216: PPUSH
11217: CALL_OW 250
11221: PUSH
11222: LD_VAR 0 2
11226: PPUSH
11227: CALL_OW 251
11231: PUSH
11232: LD_VAR 0 2
11236: PUSH
11237: LD_INT 0
11239: PUSH
11240: LD_INT 0
11242: PUSH
11243: LD_INT 0
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: PPUSH
11258: CALL_OW 446
11262: GO 11186
11264: POP
11265: POP
// end ;
11266: LD_VAR 0 3
11270: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11271: LD_INT 0
11273: PPUSH
11274: PPUSH
11275: PPUSH
11276: PPUSH
11277: PPUSH
11278: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
11279: LD_VAR 0 1
11283: NOT
11284: PUSH
11285: LD_VAR 0 1
11289: PPUSH
11290: CALL_OW 263
11294: PUSH
11295: LD_INT 2
11297: EQUAL
11298: NOT
11299: OR
11300: IFFALSE 11304
// exit ;
11302: GO 11620
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11304: LD_ADDR_VAR 0 6
11308: PUSH
11309: LD_INT 22
11311: PUSH
11312: LD_VAR 0 1
11316: PPUSH
11317: CALL_OW 255
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 36
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 34
11341: PUSH
11342: LD_INT 31
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PPUSH
11358: CALL_OW 69
11362: ST_TO_ADDR
// if not tmp then
11363: LD_VAR 0 6
11367: NOT
11368: IFFALSE 11372
// exit ;
11370: GO 11620
// result := [ ] ;
11372: LD_ADDR_VAR 0 2
11376: PUSH
11377: EMPTY
11378: ST_TO_ADDR
// for i in tmp do
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: LD_VAR 0 6
11388: PUSH
11389: FOR_IN
11390: IFFALSE 11461
// begin t := UnitsInside ( i ) ;
11392: LD_ADDR_VAR 0 4
11396: PUSH
11397: LD_VAR 0 3
11401: PPUSH
11402: CALL_OW 313
11406: ST_TO_ADDR
// if t then
11407: LD_VAR 0 4
11411: IFFALSE 11459
// for j in t do
11413: LD_ADDR_VAR 0 7
11417: PUSH
11418: LD_VAR 0 4
11422: PUSH
11423: FOR_IN
11424: IFFALSE 11457
// result := Insert ( result , result + 1 , j ) ;
11426: LD_ADDR_VAR 0 2
11430: PUSH
11431: LD_VAR 0 2
11435: PPUSH
11436: LD_VAR 0 2
11440: PUSH
11441: LD_INT 1
11443: PLUS
11444: PPUSH
11445: LD_VAR 0 7
11449: PPUSH
11450: CALL_OW 2
11454: ST_TO_ADDR
11455: GO 11423
11457: POP
11458: POP
// end ;
11459: GO 11389
11461: POP
11462: POP
// if not result then
11463: LD_VAR 0 2
11467: NOT
11468: IFFALSE 11472
// exit ;
11470: GO 11620
// mech := result [ 1 ] ;
11472: LD_ADDR_VAR 0 5
11476: PUSH
11477: LD_VAR 0 2
11481: PUSH
11482: LD_INT 1
11484: ARRAY
11485: ST_TO_ADDR
// if result > 1 then
11486: LD_VAR 0 2
11490: PUSH
11491: LD_INT 1
11493: GREATER
11494: IFFALSE 11606
// for i = 2 to result do
11496: LD_ADDR_VAR 0 3
11500: PUSH
11501: DOUBLE
11502: LD_INT 2
11504: DEC
11505: ST_TO_ADDR
11506: LD_VAR 0 2
11510: PUSH
11511: FOR_TO
11512: IFFALSE 11604
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11514: LD_ADDR_VAR 0 4
11518: PUSH
11519: LD_VAR 0 2
11523: PUSH
11524: LD_VAR 0 3
11528: ARRAY
11529: PPUSH
11530: LD_INT 3
11532: PPUSH
11533: CALL_OW 259
11537: PUSH
11538: LD_VAR 0 2
11542: PUSH
11543: LD_VAR 0 3
11547: ARRAY
11548: PPUSH
11549: CALL_OW 432
11553: MINUS
11554: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11555: LD_VAR 0 4
11559: PUSH
11560: LD_VAR 0 5
11564: PPUSH
11565: LD_INT 3
11567: PPUSH
11568: CALL_OW 259
11572: PUSH
11573: LD_VAR 0 5
11577: PPUSH
11578: CALL_OW 432
11582: MINUS
11583: GREATEREQUAL
11584: IFFALSE 11602
// mech := result [ i ] ;
11586: LD_ADDR_VAR 0 5
11590: PUSH
11591: LD_VAR 0 2
11595: PUSH
11596: LD_VAR 0 3
11600: ARRAY
11601: ST_TO_ADDR
// end ;
11602: GO 11511
11604: POP
11605: POP
// ComLinkTo ( vehicle , mech ) ;
11606: LD_VAR 0 1
11610: PPUSH
11611: LD_VAR 0 5
11615: PPUSH
11616: CALL_OW 135
// end ;
11620: LD_VAR 0 2
11624: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11625: LD_INT 0
11627: PPUSH
11628: PPUSH
11629: PPUSH
11630: PPUSH
11631: PPUSH
11632: PPUSH
11633: PPUSH
11634: PPUSH
11635: PPUSH
11636: PPUSH
11637: PPUSH
11638: PPUSH
11639: PPUSH
// result := [ ] ;
11640: LD_ADDR_VAR 0 7
11644: PUSH
11645: EMPTY
11646: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11647: LD_VAR 0 1
11651: PPUSH
11652: CALL_OW 266
11656: PUSH
11657: LD_INT 0
11659: PUSH
11660: LD_INT 1
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: IN
11667: NOT
11668: IFFALSE 11672
// exit ;
11670: GO 13306
// if name then
11672: LD_VAR 0 3
11676: IFFALSE 11692
// SetBName ( base_dep , name ) ;
11678: LD_VAR 0 1
11682: PPUSH
11683: LD_VAR 0 3
11687: PPUSH
11688: CALL_OW 500
// base := GetBase ( base_dep ) ;
11692: LD_ADDR_VAR 0 15
11696: PUSH
11697: LD_VAR 0 1
11701: PPUSH
11702: CALL_OW 274
11706: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11707: LD_ADDR_VAR 0 16
11711: PUSH
11712: LD_VAR 0 1
11716: PPUSH
11717: CALL_OW 255
11721: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11722: LD_ADDR_VAR 0 17
11726: PUSH
11727: LD_VAR 0 1
11731: PPUSH
11732: CALL_OW 248
11736: ST_TO_ADDR
// if sources then
11737: LD_VAR 0 5
11741: IFFALSE 11788
// for i = 1 to 3 do
11743: LD_ADDR_VAR 0 8
11747: PUSH
11748: DOUBLE
11749: LD_INT 1
11751: DEC
11752: ST_TO_ADDR
11753: LD_INT 3
11755: PUSH
11756: FOR_TO
11757: IFFALSE 11786
// AddResourceType ( base , i , sources [ i ] ) ;
11759: LD_VAR 0 15
11763: PPUSH
11764: LD_VAR 0 8
11768: PPUSH
11769: LD_VAR 0 5
11773: PUSH
11774: LD_VAR 0 8
11778: ARRAY
11779: PPUSH
11780: CALL_OW 276
11784: GO 11756
11786: POP
11787: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11788: LD_ADDR_VAR 0 18
11792: PUSH
11793: LD_VAR 0 15
11797: PPUSH
11798: LD_VAR 0 2
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL 11048 0 3
11810: ST_TO_ADDR
// InitHc ;
11811: CALL_OW 19
// InitUc ;
11815: CALL_OW 18
// uc_side := side ;
11819: LD_ADDR_OWVAR 20
11823: PUSH
11824: LD_VAR 0 16
11828: ST_TO_ADDR
// uc_nation := nation ;
11829: LD_ADDR_OWVAR 21
11833: PUSH
11834: LD_VAR 0 17
11838: ST_TO_ADDR
// if buildings then
11839: LD_VAR 0 18
11843: IFFALSE 13165
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11845: LD_ADDR_VAR 0 19
11849: PUSH
11850: LD_VAR 0 18
11854: PPUSH
11855: LD_INT 2
11857: PUSH
11858: LD_INT 30
11860: PUSH
11861: LD_INT 29
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 30
11870: PUSH
11871: LD_INT 30
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: ST_TO_ADDR
// if tmp then
11888: LD_VAR 0 19
11892: IFFALSE 11940
// for i in tmp do
11894: LD_ADDR_VAR 0 8
11898: PUSH
11899: LD_VAR 0 19
11903: PUSH
11904: FOR_IN
11905: IFFALSE 11938
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11907: LD_VAR 0 8
11911: PPUSH
11912: CALL_OW 250
11916: PPUSH
11917: LD_VAR 0 8
11921: PPUSH
11922: CALL_OW 251
11926: PPUSH
11927: LD_VAR 0 16
11931: PPUSH
11932: CALL_OW 441
11936: GO 11904
11938: POP
11939: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11940: LD_VAR 0 18
11944: PPUSH
11945: LD_INT 2
11947: PUSH
11948: LD_INT 30
11950: PUSH
11951: LD_INT 32
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 30
11960: PUSH
11961: LD_INT 33
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: PPUSH
11973: CALL_OW 72
11977: IFFALSE 12065
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11979: LD_ADDR_VAR 0 8
11983: PUSH
11984: LD_VAR 0 18
11988: PPUSH
11989: LD_INT 2
11991: PUSH
11992: LD_INT 30
11994: PUSH
11995: LD_INT 32
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: LD_INT 30
12004: PUSH
12005: LD_INT 33
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: LIST
12016: PPUSH
12017: CALL_OW 72
12021: PUSH
12022: FOR_IN
12023: IFFALSE 12063
// begin if not GetBWeapon ( i ) then
12025: LD_VAR 0 8
12029: PPUSH
12030: CALL_OW 269
12034: NOT
12035: IFFALSE 12061
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12037: LD_VAR 0 8
12041: PPUSH
12042: LD_VAR 0 8
12046: PPUSH
12047: LD_VAR 0 2
12051: PPUSH
12052: CALL 13311 0 2
12056: PPUSH
12057: CALL_OW 431
// end ;
12061: GO 12022
12063: POP
12064: POP
// end ; for i = 1 to personel do
12065: LD_ADDR_VAR 0 8
12069: PUSH
12070: DOUBLE
12071: LD_INT 1
12073: DEC
12074: ST_TO_ADDR
12075: LD_VAR 0 6
12079: PUSH
12080: FOR_TO
12081: IFFALSE 13145
// begin if i > 4 then
12083: LD_VAR 0 8
12087: PUSH
12088: LD_INT 4
12090: GREATER
12091: IFFALSE 12095
// break ;
12093: GO 13145
// case i of 1 :
12095: LD_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: DOUBLE
12103: EQUAL
12104: IFTRUE 12108
12106: GO 12188
12108: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12109: LD_ADDR_VAR 0 12
12113: PUSH
12114: LD_VAR 0 18
12118: PPUSH
12119: LD_INT 22
12121: PUSH
12122: LD_VAR 0 16
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 58
12133: PUSH
12134: EMPTY
12135: LIST
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: LD_INT 30
12142: PUSH
12143: LD_INT 32
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 30
12152: PUSH
12153: LD_INT 4
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 30
12162: PUSH
12163: LD_INT 5
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: PPUSH
12181: CALL_OW 72
12185: ST_TO_ADDR
12186: GO 12410
12188: LD_INT 2
12190: DOUBLE
12191: EQUAL
12192: IFTRUE 12196
12194: GO 12258
12196: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12197: LD_ADDR_VAR 0 12
12201: PUSH
12202: LD_VAR 0 18
12206: PPUSH
12207: LD_INT 22
12209: PUSH
12210: LD_VAR 0 16
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 2
12221: PUSH
12222: LD_INT 30
12224: PUSH
12225: LD_INT 0
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 30
12234: PUSH
12235: LD_INT 1
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL_OW 72
12255: ST_TO_ADDR
12256: GO 12410
12258: LD_INT 3
12260: DOUBLE
12261: EQUAL
12262: IFTRUE 12266
12264: GO 12328
12266: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12267: LD_ADDR_VAR 0 12
12271: PUSH
12272: LD_VAR 0 18
12276: PPUSH
12277: LD_INT 22
12279: PUSH
12280: LD_VAR 0 16
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 2
12291: PUSH
12292: LD_INT 30
12294: PUSH
12295: LD_INT 2
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 30
12304: PUSH
12305: LD_INT 3
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 72
12325: ST_TO_ADDR
12326: GO 12410
12328: LD_INT 4
12330: DOUBLE
12331: EQUAL
12332: IFTRUE 12336
12334: GO 12409
12336: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12337: LD_ADDR_VAR 0 12
12341: PUSH
12342: LD_VAR 0 18
12346: PPUSH
12347: LD_INT 22
12349: PUSH
12350: LD_VAR 0 16
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 2
12361: PUSH
12362: LD_INT 30
12364: PUSH
12365: LD_INT 6
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 30
12374: PUSH
12375: LD_INT 7
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 30
12384: PUSH
12385: LD_INT 8
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PPUSH
12402: CALL_OW 72
12406: ST_TO_ADDR
12407: GO 12410
12409: POP
// if i = 1 then
12410: LD_VAR 0 8
12414: PUSH
12415: LD_INT 1
12417: EQUAL
12418: IFFALSE 12529
// begin tmp := [ ] ;
12420: LD_ADDR_VAR 0 19
12424: PUSH
12425: EMPTY
12426: ST_TO_ADDR
// for j in f do
12427: LD_ADDR_VAR 0 9
12431: PUSH
12432: LD_VAR 0 12
12436: PUSH
12437: FOR_IN
12438: IFFALSE 12511
// if GetBType ( j ) = b_bunker then
12440: LD_VAR 0 9
12444: PPUSH
12445: CALL_OW 266
12449: PUSH
12450: LD_INT 32
12452: EQUAL
12453: IFFALSE 12480
// tmp := Insert ( tmp , 1 , j ) else
12455: LD_ADDR_VAR 0 19
12459: PUSH
12460: LD_VAR 0 19
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: LD_VAR 0 9
12472: PPUSH
12473: CALL_OW 2
12477: ST_TO_ADDR
12478: GO 12509
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12480: LD_ADDR_VAR 0 19
12484: PUSH
12485: LD_VAR 0 19
12489: PPUSH
12490: LD_VAR 0 19
12494: PUSH
12495: LD_INT 1
12497: PLUS
12498: PPUSH
12499: LD_VAR 0 9
12503: PPUSH
12504: CALL_OW 2
12508: ST_TO_ADDR
12509: GO 12437
12511: POP
12512: POP
// if tmp then
12513: LD_VAR 0 19
12517: IFFALSE 12529
// f := tmp ;
12519: LD_ADDR_VAR 0 12
12523: PUSH
12524: LD_VAR 0 19
12528: ST_TO_ADDR
// end ; x := personel [ i ] ;
12529: LD_ADDR_VAR 0 13
12533: PUSH
12534: LD_VAR 0 6
12538: PUSH
12539: LD_VAR 0 8
12543: ARRAY
12544: ST_TO_ADDR
// if x = - 1 then
12545: LD_VAR 0 13
12549: PUSH
12550: LD_INT 1
12552: NEG
12553: EQUAL
12554: IFFALSE 12763
// begin for j in f do
12556: LD_ADDR_VAR 0 9
12560: PUSH
12561: LD_VAR 0 12
12565: PUSH
12566: FOR_IN
12567: IFFALSE 12759
// repeat InitHc ;
12569: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12573: LD_VAR 0 9
12577: PPUSH
12578: CALL_OW 266
12582: PUSH
12583: LD_INT 5
12585: EQUAL
12586: IFFALSE 12656
// begin if UnitsInside ( j ) < 3 then
12588: LD_VAR 0 9
12592: PPUSH
12593: CALL_OW 313
12597: PUSH
12598: LD_INT 3
12600: LESS
12601: IFFALSE 12637
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12603: LD_INT 0
12605: PPUSH
12606: LD_INT 5
12608: PUSH
12609: LD_INT 8
12611: PUSH
12612: LD_INT 9
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_VAR 0 17
12624: ARRAY
12625: PPUSH
12626: LD_VAR 0 4
12630: PPUSH
12631: CALL_OW 380
12635: GO 12654
// PrepareHuman ( false , i , skill ) ;
12637: LD_INT 0
12639: PPUSH
12640: LD_VAR 0 8
12644: PPUSH
12645: LD_VAR 0 4
12649: PPUSH
12650: CALL_OW 380
// end else
12654: GO 12673
// PrepareHuman ( false , i , skill ) ;
12656: LD_INT 0
12658: PPUSH
12659: LD_VAR 0 8
12663: PPUSH
12664: LD_VAR 0 4
12668: PPUSH
12669: CALL_OW 380
// un := CreateHuman ;
12673: LD_ADDR_VAR 0 14
12677: PUSH
12678: CALL_OW 44
12682: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12683: LD_ADDR_VAR 0 7
12687: PUSH
12688: LD_VAR 0 7
12692: PPUSH
12693: LD_INT 1
12695: PPUSH
12696: LD_VAR 0 14
12700: PPUSH
12701: CALL_OW 2
12705: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12706: LD_VAR 0 14
12710: PPUSH
12711: LD_VAR 0 9
12715: PPUSH
12716: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12720: LD_VAR 0 9
12724: PPUSH
12725: CALL_OW 313
12729: PUSH
12730: LD_INT 6
12732: EQUAL
12733: PUSH
12734: LD_VAR 0 9
12738: PPUSH
12739: CALL_OW 266
12743: PUSH
12744: LD_INT 32
12746: PUSH
12747: LD_INT 31
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: IN
12754: OR
12755: IFFALSE 12569
12757: GO 12566
12759: POP
12760: POP
// end else
12761: GO 13143
// for j = 1 to x do
12763: LD_ADDR_VAR 0 9
12767: PUSH
12768: DOUBLE
12769: LD_INT 1
12771: DEC
12772: ST_TO_ADDR
12773: LD_VAR 0 13
12777: PUSH
12778: FOR_TO
12779: IFFALSE 13141
// begin InitHc ;
12781: CALL_OW 19
// if not f then
12785: LD_VAR 0 12
12789: NOT
12790: IFFALSE 12879
// begin PrepareHuman ( false , i , skill ) ;
12792: LD_INT 0
12794: PPUSH
12795: LD_VAR 0 8
12799: PPUSH
12800: LD_VAR 0 4
12804: PPUSH
12805: CALL_OW 380
// un := CreateHuman ;
12809: LD_ADDR_VAR 0 14
12813: PUSH
12814: CALL_OW 44
12818: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12819: LD_ADDR_VAR 0 7
12823: PUSH
12824: LD_VAR 0 7
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: LD_VAR 0 14
12836: PPUSH
12837: CALL_OW 2
12841: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12842: LD_VAR 0 14
12846: PPUSH
12847: LD_VAR 0 1
12851: PPUSH
12852: CALL_OW 250
12856: PPUSH
12857: LD_VAR 0 1
12861: PPUSH
12862: CALL_OW 251
12866: PPUSH
12867: LD_INT 10
12869: PPUSH
12870: LD_INT 0
12872: PPUSH
12873: CALL_OW 50
// continue ;
12877: GO 12778
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12879: LD_VAR 0 12
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL_OW 313
12892: PUSH
12893: LD_VAR 0 12
12897: PUSH
12898: LD_INT 1
12900: ARRAY
12901: PPUSH
12902: CALL_OW 266
12906: PUSH
12907: LD_INT 32
12909: PUSH
12910: LD_INT 31
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: IN
12917: AND
12918: PUSH
12919: LD_VAR 0 12
12923: PUSH
12924: LD_INT 1
12926: ARRAY
12927: PPUSH
12928: CALL_OW 313
12932: PUSH
12933: LD_INT 6
12935: EQUAL
12936: OR
12937: IFFALSE 12957
// f := Delete ( f , 1 ) ;
12939: LD_ADDR_VAR 0 12
12943: PUSH
12944: LD_VAR 0 12
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: CALL_OW 3
12956: ST_TO_ADDR
// if not f then
12957: LD_VAR 0 12
12961: NOT
12962: IFFALSE 12980
// begin x := x + 2 ;
12964: LD_ADDR_VAR 0 13
12968: PUSH
12969: LD_VAR 0 13
12973: PUSH
12974: LD_INT 2
12976: PLUS
12977: ST_TO_ADDR
// continue ;
12978: GO 12778
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12980: LD_VAR 0 12
12984: PUSH
12985: LD_INT 1
12987: ARRAY
12988: PPUSH
12989: CALL_OW 266
12993: PUSH
12994: LD_INT 5
12996: EQUAL
12997: IFFALSE 13071
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12999: LD_VAR 0 12
13003: PUSH
13004: LD_INT 1
13006: ARRAY
13007: PPUSH
13008: CALL_OW 313
13012: PUSH
13013: LD_INT 3
13015: LESS
13016: IFFALSE 13052
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13018: LD_INT 0
13020: PPUSH
13021: LD_INT 5
13023: PUSH
13024: LD_INT 8
13026: PUSH
13027: LD_INT 9
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: LD_VAR 0 17
13039: ARRAY
13040: PPUSH
13041: LD_VAR 0 4
13045: PPUSH
13046: CALL_OW 380
13050: GO 13069
// PrepareHuman ( false , i , skill ) ;
13052: LD_INT 0
13054: PPUSH
13055: LD_VAR 0 8
13059: PPUSH
13060: LD_VAR 0 4
13064: PPUSH
13065: CALL_OW 380
// end else
13069: GO 13088
// PrepareHuman ( false , i , skill ) ;
13071: LD_INT 0
13073: PPUSH
13074: LD_VAR 0 8
13078: PPUSH
13079: LD_VAR 0 4
13083: PPUSH
13084: CALL_OW 380
// un := CreateHuman ;
13088: LD_ADDR_VAR 0 14
13092: PUSH
13093: CALL_OW 44
13097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13098: LD_ADDR_VAR 0 7
13102: PUSH
13103: LD_VAR 0 7
13107: PPUSH
13108: LD_INT 1
13110: PPUSH
13111: LD_VAR 0 14
13115: PPUSH
13116: CALL_OW 2
13120: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13121: LD_VAR 0 14
13125: PPUSH
13126: LD_VAR 0 12
13130: PUSH
13131: LD_INT 1
13133: ARRAY
13134: PPUSH
13135: CALL_OW 52
// end ;
13139: GO 12778
13141: POP
13142: POP
// end ;
13143: GO 12080
13145: POP
13146: POP
// result := result ^ buildings ;
13147: LD_ADDR_VAR 0 7
13151: PUSH
13152: LD_VAR 0 7
13156: PUSH
13157: LD_VAR 0 18
13161: ADD
13162: ST_TO_ADDR
// end else
13163: GO 13306
// begin for i = 1 to personel do
13165: LD_ADDR_VAR 0 8
13169: PUSH
13170: DOUBLE
13171: LD_INT 1
13173: DEC
13174: ST_TO_ADDR
13175: LD_VAR 0 6
13179: PUSH
13180: FOR_TO
13181: IFFALSE 13304
// begin if i > 4 then
13183: LD_VAR 0 8
13187: PUSH
13188: LD_INT 4
13190: GREATER
13191: IFFALSE 13195
// break ;
13193: GO 13304
// x := personel [ i ] ;
13195: LD_ADDR_VAR 0 13
13199: PUSH
13200: LD_VAR 0 6
13204: PUSH
13205: LD_VAR 0 8
13209: ARRAY
13210: ST_TO_ADDR
// if x = - 1 then
13211: LD_VAR 0 13
13215: PUSH
13216: LD_INT 1
13218: NEG
13219: EQUAL
13220: IFFALSE 13224
// continue ;
13222: GO 13180
// PrepareHuman ( false , i , skill ) ;
13224: LD_INT 0
13226: PPUSH
13227: LD_VAR 0 8
13231: PPUSH
13232: LD_VAR 0 4
13236: PPUSH
13237: CALL_OW 380
// un := CreateHuman ;
13241: LD_ADDR_VAR 0 14
13245: PUSH
13246: CALL_OW 44
13250: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13251: LD_VAR 0 14
13255: PPUSH
13256: LD_VAR 0 1
13260: PPUSH
13261: CALL_OW 250
13265: PPUSH
13266: LD_VAR 0 1
13270: PPUSH
13271: CALL_OW 251
13275: PPUSH
13276: LD_INT 10
13278: PPUSH
13279: LD_INT 0
13281: PPUSH
13282: CALL_OW 50
// result := result ^ un ;
13286: LD_ADDR_VAR 0 7
13290: PUSH
13291: LD_VAR 0 7
13295: PUSH
13296: LD_VAR 0 14
13300: ADD
13301: ST_TO_ADDR
// end ;
13302: GO 13180
13304: POP
13305: POP
// end ; end ;
13306: LD_VAR 0 7
13310: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13311: LD_INT 0
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
13326: PPUSH
13327: PPUSH
13328: PPUSH
// result := false ;
13329: LD_ADDR_VAR 0 3
13333: PUSH
13334: LD_INT 0
13336: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13337: LD_VAR 0 1
13341: NOT
13342: PUSH
13343: LD_VAR 0 1
13347: PPUSH
13348: CALL_OW 266
13352: PUSH
13353: LD_INT 32
13355: PUSH
13356: LD_INT 33
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: IN
13363: NOT
13364: OR
13365: IFFALSE 13369
// exit ;
13367: GO 14508
// nat := GetNation ( tower ) ;
13369: LD_ADDR_VAR 0 12
13373: PUSH
13374: LD_VAR 0 1
13378: PPUSH
13379: CALL_OW 248
13383: ST_TO_ADDR
// side := GetSide ( tower ) ;
13384: LD_ADDR_VAR 0 16
13388: PUSH
13389: LD_VAR 0 1
13393: PPUSH
13394: CALL_OW 255
13398: ST_TO_ADDR
// x := GetX ( tower ) ;
13399: LD_ADDR_VAR 0 10
13403: PUSH
13404: LD_VAR 0 1
13408: PPUSH
13409: CALL_OW 250
13413: ST_TO_ADDR
// y := GetY ( tower ) ;
13414: LD_ADDR_VAR 0 11
13418: PUSH
13419: LD_VAR 0 1
13423: PPUSH
13424: CALL_OW 251
13428: ST_TO_ADDR
// if not x or not y then
13429: LD_VAR 0 10
13433: NOT
13434: PUSH
13435: LD_VAR 0 11
13439: NOT
13440: OR
13441: IFFALSE 13445
// exit ;
13443: GO 14508
// weapon := 0 ;
13445: LD_ADDR_VAR 0 18
13449: PUSH
13450: LD_INT 0
13452: ST_TO_ADDR
// fac_list := [ ] ;
13453: LD_ADDR_VAR 0 17
13457: PUSH
13458: EMPTY
13459: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13460: LD_ADDR_VAR 0 6
13464: PUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: CALL_OW 274
13474: PPUSH
13475: LD_VAR 0 2
13479: PPUSH
13480: LD_INT 0
13482: PPUSH
13483: CALL 11048 0 3
13487: PPUSH
13488: LD_INT 30
13490: PUSH
13491: LD_INT 3
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 72
13502: ST_TO_ADDR
// if not factories then
13503: LD_VAR 0 6
13507: NOT
13508: IFFALSE 13512
// exit ;
13510: GO 14508
// for i in factories do
13512: LD_ADDR_VAR 0 8
13516: PUSH
13517: LD_VAR 0 6
13521: PUSH
13522: FOR_IN
13523: IFFALSE 13548
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13525: LD_ADDR_VAR 0 17
13529: PUSH
13530: LD_VAR 0 17
13534: PUSH
13535: LD_VAR 0 8
13539: PPUSH
13540: CALL_OW 478
13544: UNION
13545: ST_TO_ADDR
13546: GO 13522
13548: POP
13549: POP
// if not fac_list then
13550: LD_VAR 0 17
13554: NOT
13555: IFFALSE 13559
// exit ;
13557: GO 14508
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13559: LD_ADDR_VAR 0 5
13563: PUSH
13564: LD_INT 4
13566: PUSH
13567: LD_INT 5
13569: PUSH
13570: LD_INT 9
13572: PUSH
13573: LD_INT 10
13575: PUSH
13576: LD_INT 6
13578: PUSH
13579: LD_INT 7
13581: PUSH
13582: LD_INT 11
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 27
13596: PUSH
13597: LD_INT 28
13599: PUSH
13600: LD_INT 26
13602: PUSH
13603: LD_INT 30
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 43
13614: PUSH
13615: LD_INT 44
13617: PUSH
13618: LD_INT 46
13620: PUSH
13621: LD_INT 45
13623: PUSH
13624: LD_INT 47
13626: PUSH
13627: LD_INT 49
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: PUSH
13643: LD_VAR 0 12
13647: ARRAY
13648: ST_TO_ADDR
// for i in list do
13649: LD_ADDR_VAR 0 8
13653: PUSH
13654: LD_VAR 0 5
13658: PUSH
13659: FOR_IN
13660: IFFALSE 13693
// if not i in fac_list then
13662: LD_VAR 0 8
13666: PUSH
13667: LD_VAR 0 17
13671: IN
13672: NOT
13673: IFFALSE 13691
// list := list diff i ;
13675: LD_ADDR_VAR 0 5
13679: PUSH
13680: LD_VAR 0 5
13684: PUSH
13685: LD_VAR 0 8
13689: DIFF
13690: ST_TO_ADDR
13691: GO 13659
13693: POP
13694: POP
// if not list then
13695: LD_VAR 0 5
13699: NOT
13700: IFFALSE 13704
// exit ;
13702: GO 14508
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13704: LD_VAR 0 12
13708: PUSH
13709: LD_INT 3
13711: EQUAL
13712: PUSH
13713: LD_INT 49
13715: PUSH
13716: LD_VAR 0 5
13720: IN
13721: AND
13722: PUSH
13723: LD_INT 31
13725: PPUSH
13726: LD_VAR 0 16
13730: PPUSH
13731: CALL_OW 321
13735: PUSH
13736: LD_INT 2
13738: EQUAL
13739: AND
13740: IFFALSE 13800
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13742: LD_INT 22
13744: PUSH
13745: LD_VAR 0 16
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 35
13756: PUSH
13757: LD_INT 49
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 91
13766: PUSH
13767: LD_VAR 0 1
13771: PUSH
13772: LD_INT 10
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: LIST
13784: PPUSH
13785: CALL_OW 69
13789: NOT
13790: IFFALSE 13800
// weapon := ru_time_lapser ;
13792: LD_ADDR_VAR 0 18
13796: PUSH
13797: LD_INT 49
13799: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13800: LD_VAR 0 12
13804: PUSH
13805: LD_INT 1
13807: PUSH
13808: LD_INT 2
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: IN
13815: PUSH
13816: LD_INT 11
13818: PUSH
13819: LD_VAR 0 5
13823: IN
13824: PUSH
13825: LD_INT 30
13827: PUSH
13828: LD_VAR 0 5
13832: IN
13833: OR
13834: AND
13835: PUSH
13836: LD_INT 6
13838: PPUSH
13839: LD_VAR 0 16
13843: PPUSH
13844: CALL_OW 321
13848: PUSH
13849: LD_INT 2
13851: EQUAL
13852: AND
13853: IFFALSE 14018
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13855: LD_INT 22
13857: PUSH
13858: LD_VAR 0 16
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 2
13869: PUSH
13870: LD_INT 35
13872: PUSH
13873: LD_INT 11
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 35
13882: PUSH
13883: LD_INT 30
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 91
13897: PUSH
13898: LD_VAR 0 1
13902: PUSH
13903: LD_INT 18
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: NOT
13921: PUSH
13922: LD_INT 22
13924: PUSH
13925: LD_VAR 0 16
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 2
13936: PUSH
13937: LD_INT 30
13939: PUSH
13940: LD_INT 32
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 30
13949: PUSH
13950: LD_INT 33
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 91
13964: PUSH
13965: LD_VAR 0 1
13969: PUSH
13970: LD_INT 12
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: PUSH
13991: LD_INT 2
13993: GREATER
13994: AND
13995: IFFALSE 14018
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13997: LD_ADDR_VAR 0 18
14001: PUSH
14002: LD_INT 11
14004: PUSH
14005: LD_INT 30
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_VAR 0 12
14016: ARRAY
14017: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14018: LD_VAR 0 18
14022: NOT
14023: PUSH
14024: LD_INT 40
14026: PPUSH
14027: LD_VAR 0 16
14031: PPUSH
14032: CALL_OW 321
14036: PUSH
14037: LD_INT 2
14039: EQUAL
14040: AND
14041: PUSH
14042: LD_INT 7
14044: PUSH
14045: LD_VAR 0 5
14049: IN
14050: PUSH
14051: LD_INT 28
14053: PUSH
14054: LD_VAR 0 5
14058: IN
14059: OR
14060: PUSH
14061: LD_INT 45
14063: PUSH
14064: LD_VAR 0 5
14068: IN
14069: OR
14070: AND
14071: IFFALSE 14325
// begin hex := GetHexInfo ( x , y ) ;
14073: LD_ADDR_VAR 0 4
14077: PUSH
14078: LD_VAR 0 10
14082: PPUSH
14083: LD_VAR 0 11
14087: PPUSH
14088: CALL_OW 546
14092: ST_TO_ADDR
// if hex [ 1 ] then
14093: LD_VAR 0 4
14097: PUSH
14098: LD_INT 1
14100: ARRAY
14101: IFFALSE 14105
// exit ;
14103: GO 14508
// height := hex [ 2 ] ;
14105: LD_ADDR_VAR 0 15
14109: PUSH
14110: LD_VAR 0 4
14114: PUSH
14115: LD_INT 2
14117: ARRAY
14118: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14119: LD_ADDR_VAR 0 14
14123: PUSH
14124: LD_INT 0
14126: PUSH
14127: LD_INT 2
14129: PUSH
14130: LD_INT 3
14132: PUSH
14133: LD_INT 5
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: ST_TO_ADDR
// for i in tmp do
14142: LD_ADDR_VAR 0 8
14146: PUSH
14147: LD_VAR 0 14
14151: PUSH
14152: FOR_IN
14153: IFFALSE 14323
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14155: LD_ADDR_VAR 0 9
14159: PUSH
14160: LD_VAR 0 10
14164: PPUSH
14165: LD_VAR 0 8
14169: PPUSH
14170: LD_INT 5
14172: PPUSH
14173: CALL_OW 272
14177: PUSH
14178: LD_VAR 0 11
14182: PPUSH
14183: LD_VAR 0 8
14187: PPUSH
14188: LD_INT 5
14190: PPUSH
14191: CALL_OW 273
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14200: LD_VAR 0 9
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: PPUSH
14209: LD_VAR 0 9
14213: PUSH
14214: LD_INT 2
14216: ARRAY
14217: PPUSH
14218: CALL_OW 488
14222: IFFALSE 14321
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14224: LD_ADDR_VAR 0 4
14228: PUSH
14229: LD_VAR 0 9
14233: PUSH
14234: LD_INT 1
14236: ARRAY
14237: PPUSH
14238: LD_VAR 0 9
14242: PUSH
14243: LD_INT 2
14245: ARRAY
14246: PPUSH
14247: CALL_OW 546
14251: ST_TO_ADDR
// if hex [ 1 ] then
14252: LD_VAR 0 4
14256: PUSH
14257: LD_INT 1
14259: ARRAY
14260: IFFALSE 14264
// continue ;
14262: GO 14152
// h := hex [ 2 ] ;
14264: LD_ADDR_VAR 0 13
14268: PUSH
14269: LD_VAR 0 4
14273: PUSH
14274: LD_INT 2
14276: ARRAY
14277: ST_TO_ADDR
// if h + 7 < height then
14278: LD_VAR 0 13
14282: PUSH
14283: LD_INT 7
14285: PLUS
14286: PUSH
14287: LD_VAR 0 15
14291: LESS
14292: IFFALSE 14321
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14294: LD_ADDR_VAR 0 18
14298: PUSH
14299: LD_INT 7
14301: PUSH
14302: LD_INT 28
14304: PUSH
14305: LD_INT 45
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: LIST
14312: PUSH
14313: LD_VAR 0 12
14317: ARRAY
14318: ST_TO_ADDR
// break ;
14319: GO 14323
// end ; end ; end ;
14321: GO 14152
14323: POP
14324: POP
// end ; if not weapon then
14325: LD_VAR 0 18
14329: NOT
14330: IFFALSE 14390
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14332: LD_ADDR_VAR 0 5
14336: PUSH
14337: LD_VAR 0 5
14341: PUSH
14342: LD_INT 11
14344: PUSH
14345: LD_INT 30
14347: PUSH
14348: LD_INT 49
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: DIFF
14356: ST_TO_ADDR
// if not list then
14357: LD_VAR 0 5
14361: NOT
14362: IFFALSE 14366
// exit ;
14364: GO 14508
// weapon := list [ rand ( 1 , list ) ] ;
14366: LD_ADDR_VAR 0 18
14370: PUSH
14371: LD_VAR 0 5
14375: PUSH
14376: LD_INT 1
14378: PPUSH
14379: LD_VAR 0 5
14383: PPUSH
14384: CALL_OW 12
14388: ARRAY
14389: ST_TO_ADDR
// end ; if weapon then
14390: LD_VAR 0 18
14394: IFFALSE 14508
// begin tmp := CostOfWeapon ( weapon ) ;
14396: LD_ADDR_VAR 0 14
14400: PUSH
14401: LD_VAR 0 18
14405: PPUSH
14406: CALL_OW 451
14410: ST_TO_ADDR
// j := GetBase ( tower ) ;
14411: LD_ADDR_VAR 0 9
14415: PUSH
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 274
14425: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14426: LD_VAR 0 9
14430: PPUSH
14431: LD_INT 1
14433: PPUSH
14434: CALL_OW 275
14438: PUSH
14439: LD_VAR 0 14
14443: PUSH
14444: LD_INT 1
14446: ARRAY
14447: GREATEREQUAL
14448: PUSH
14449: LD_VAR 0 9
14453: PPUSH
14454: LD_INT 2
14456: PPUSH
14457: CALL_OW 275
14461: PUSH
14462: LD_VAR 0 14
14466: PUSH
14467: LD_INT 2
14469: ARRAY
14470: GREATEREQUAL
14471: AND
14472: PUSH
14473: LD_VAR 0 9
14477: PPUSH
14478: LD_INT 3
14480: PPUSH
14481: CALL_OW 275
14485: PUSH
14486: LD_VAR 0 14
14490: PUSH
14491: LD_INT 3
14493: ARRAY
14494: GREATEREQUAL
14495: AND
14496: IFFALSE 14508
// result := weapon ;
14498: LD_ADDR_VAR 0 3
14502: PUSH
14503: LD_VAR 0 18
14507: ST_TO_ADDR
// end ; end ;
14508: LD_VAR 0 3
14512: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14513: LD_INT 0
14515: PPUSH
14516: PPUSH
// result := true ;
14517: LD_ADDR_VAR 0 3
14521: PUSH
14522: LD_INT 1
14524: ST_TO_ADDR
// if array1 = array2 then
14525: LD_VAR 0 1
14529: PUSH
14530: LD_VAR 0 2
14534: EQUAL
14535: IFFALSE 14595
// begin for i = 1 to array1 do
14537: LD_ADDR_VAR 0 4
14541: PUSH
14542: DOUBLE
14543: LD_INT 1
14545: DEC
14546: ST_TO_ADDR
14547: LD_VAR 0 1
14551: PUSH
14552: FOR_TO
14553: IFFALSE 14591
// if array1 [ i ] <> array2 [ i ] then
14555: LD_VAR 0 1
14559: PUSH
14560: LD_VAR 0 4
14564: ARRAY
14565: PUSH
14566: LD_VAR 0 2
14570: PUSH
14571: LD_VAR 0 4
14575: ARRAY
14576: NONEQUAL
14577: IFFALSE 14589
// begin result := false ;
14579: LD_ADDR_VAR 0 3
14583: PUSH
14584: LD_INT 0
14586: ST_TO_ADDR
// break ;
14587: GO 14591
// end ;
14589: GO 14552
14591: POP
14592: POP
// end else
14593: GO 14603
// result := false ;
14595: LD_ADDR_VAR 0 3
14599: PUSH
14600: LD_INT 0
14602: ST_TO_ADDR
// end ;
14603: LD_VAR 0 3
14607: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14608: LD_INT 0
14610: PPUSH
14611: PPUSH
// if not array1 or not array2 then
14612: LD_VAR 0 1
14616: NOT
14617: PUSH
14618: LD_VAR 0 2
14622: NOT
14623: OR
14624: IFFALSE 14628
// exit ;
14626: GO 14692
// result := true ;
14628: LD_ADDR_VAR 0 3
14632: PUSH
14633: LD_INT 1
14635: ST_TO_ADDR
// for i = 1 to array1 do
14636: LD_ADDR_VAR 0 4
14640: PUSH
14641: DOUBLE
14642: LD_INT 1
14644: DEC
14645: ST_TO_ADDR
14646: LD_VAR 0 1
14650: PUSH
14651: FOR_TO
14652: IFFALSE 14690
// if array1 [ i ] <> array2 [ i ] then
14654: LD_VAR 0 1
14658: PUSH
14659: LD_VAR 0 4
14663: ARRAY
14664: PUSH
14665: LD_VAR 0 2
14669: PUSH
14670: LD_VAR 0 4
14674: ARRAY
14675: NONEQUAL
14676: IFFALSE 14688
// begin result := false ;
14678: LD_ADDR_VAR 0 3
14682: PUSH
14683: LD_INT 0
14685: ST_TO_ADDR
// break ;
14686: GO 14690
// end ;
14688: GO 14651
14690: POP
14691: POP
// end ;
14692: LD_VAR 0 3
14696: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14697: LD_INT 0
14699: PPUSH
14700: PPUSH
14701: PPUSH
// pom := GetBase ( fac ) ;
14702: LD_ADDR_VAR 0 5
14706: PUSH
14707: LD_VAR 0 1
14711: PPUSH
14712: CALL_OW 274
14716: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14717: LD_ADDR_VAR 0 4
14721: PUSH
14722: LD_VAR 0 2
14726: PUSH
14727: LD_INT 1
14729: ARRAY
14730: PPUSH
14731: LD_VAR 0 2
14735: PUSH
14736: LD_INT 2
14738: ARRAY
14739: PPUSH
14740: LD_VAR 0 2
14744: PUSH
14745: LD_INT 3
14747: ARRAY
14748: PPUSH
14749: LD_VAR 0 2
14753: PUSH
14754: LD_INT 4
14756: ARRAY
14757: PPUSH
14758: CALL_OW 449
14762: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14763: LD_ADDR_VAR 0 3
14767: PUSH
14768: LD_VAR 0 5
14772: PPUSH
14773: LD_INT 1
14775: PPUSH
14776: CALL_OW 275
14780: PUSH
14781: LD_VAR 0 4
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: GREATEREQUAL
14790: PUSH
14791: LD_VAR 0 5
14795: PPUSH
14796: LD_INT 2
14798: PPUSH
14799: CALL_OW 275
14803: PUSH
14804: LD_VAR 0 4
14808: PUSH
14809: LD_INT 2
14811: ARRAY
14812: GREATEREQUAL
14813: AND
14814: PUSH
14815: LD_VAR 0 5
14819: PPUSH
14820: LD_INT 3
14822: PPUSH
14823: CALL_OW 275
14827: PUSH
14828: LD_VAR 0 4
14832: PUSH
14833: LD_INT 3
14835: ARRAY
14836: GREATEREQUAL
14837: AND
14838: ST_TO_ADDR
// end ;
14839: LD_VAR 0 3
14843: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14844: LD_INT 0
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
// pom := GetBase ( building ) ;
14850: LD_ADDR_VAR 0 3
14854: PUSH
14855: LD_VAR 0 1
14859: PPUSH
14860: CALL_OW 274
14864: ST_TO_ADDR
// if not pom then
14865: LD_VAR 0 3
14869: NOT
14870: IFFALSE 14874
// exit ;
14872: GO 15044
// btype := GetBType ( building ) ;
14874: LD_ADDR_VAR 0 5
14878: PUSH
14879: LD_VAR 0 1
14883: PPUSH
14884: CALL_OW 266
14888: ST_TO_ADDR
// if btype = b_armoury then
14889: LD_VAR 0 5
14893: PUSH
14894: LD_INT 4
14896: EQUAL
14897: IFFALSE 14907
// btype := b_barracks ;
14899: LD_ADDR_VAR 0 5
14903: PUSH
14904: LD_INT 5
14906: ST_TO_ADDR
// if btype = b_depot then
14907: LD_VAR 0 5
14911: PUSH
14912: LD_INT 0
14914: EQUAL
14915: IFFALSE 14925
// btype := b_warehouse ;
14917: LD_ADDR_VAR 0 5
14921: PUSH
14922: LD_INT 1
14924: ST_TO_ADDR
// if btype = b_workshop then
14925: LD_VAR 0 5
14929: PUSH
14930: LD_INT 2
14932: EQUAL
14933: IFFALSE 14943
// btype := b_factory ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_INT 3
14942: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14943: LD_ADDR_VAR 0 4
14947: PUSH
14948: LD_VAR 0 5
14952: PPUSH
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 248
14962: PPUSH
14963: CALL_OW 450
14967: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14968: LD_ADDR_VAR 0 2
14972: PUSH
14973: LD_VAR 0 3
14977: PPUSH
14978: LD_INT 1
14980: PPUSH
14981: CALL_OW 275
14985: PUSH
14986: LD_VAR 0 4
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: GREATEREQUAL
14995: PUSH
14996: LD_VAR 0 3
15000: PPUSH
15001: LD_INT 2
15003: PPUSH
15004: CALL_OW 275
15008: PUSH
15009: LD_VAR 0 4
15013: PUSH
15014: LD_INT 2
15016: ARRAY
15017: GREATEREQUAL
15018: AND
15019: PUSH
15020: LD_VAR 0 3
15024: PPUSH
15025: LD_INT 3
15027: PPUSH
15028: CALL_OW 275
15032: PUSH
15033: LD_VAR 0 4
15037: PUSH
15038: LD_INT 3
15040: ARRAY
15041: GREATEREQUAL
15042: AND
15043: ST_TO_ADDR
// end ;
15044: LD_VAR 0 2
15048: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15049: LD_INT 0
15051: PPUSH
15052: PPUSH
15053: PPUSH
// pom := GetBase ( building ) ;
15054: LD_ADDR_VAR 0 4
15058: PUSH
15059: LD_VAR 0 1
15063: PPUSH
15064: CALL_OW 274
15068: ST_TO_ADDR
// if not pom then
15069: LD_VAR 0 4
15073: NOT
15074: IFFALSE 15078
// exit ;
15076: GO 15179
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15078: LD_ADDR_VAR 0 5
15082: PUSH
15083: LD_VAR 0 2
15087: PPUSH
15088: LD_VAR 0 1
15092: PPUSH
15093: CALL_OW 248
15097: PPUSH
15098: CALL_OW 450
15102: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15103: LD_ADDR_VAR 0 3
15107: PUSH
15108: LD_VAR 0 4
15112: PPUSH
15113: LD_INT 1
15115: PPUSH
15116: CALL_OW 275
15120: PUSH
15121: LD_VAR 0 5
15125: PUSH
15126: LD_INT 1
15128: ARRAY
15129: GREATEREQUAL
15130: PUSH
15131: LD_VAR 0 4
15135: PPUSH
15136: LD_INT 2
15138: PPUSH
15139: CALL_OW 275
15143: PUSH
15144: LD_VAR 0 5
15148: PUSH
15149: LD_INT 2
15151: ARRAY
15152: GREATEREQUAL
15153: AND
15154: PUSH
15155: LD_VAR 0 4
15159: PPUSH
15160: LD_INT 3
15162: PPUSH
15163: CALL_OW 275
15167: PUSH
15168: LD_VAR 0 5
15172: PUSH
15173: LD_INT 3
15175: ARRAY
15176: GREATEREQUAL
15177: AND
15178: ST_TO_ADDR
// end ;
15179: LD_VAR 0 3
15183: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15184: LD_INT 0
15186: PPUSH
15187: PPUSH
15188: PPUSH
15189: PPUSH
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
15194: PPUSH
15195: PPUSH
15196: PPUSH
// result := false ;
15197: LD_ADDR_VAR 0 8
15201: PUSH
15202: LD_INT 0
15204: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15205: LD_VAR 0 5
15209: NOT
15210: PUSH
15211: LD_VAR 0 1
15215: NOT
15216: OR
15217: PUSH
15218: LD_VAR 0 2
15222: NOT
15223: OR
15224: PUSH
15225: LD_VAR 0 3
15229: NOT
15230: OR
15231: IFFALSE 15235
// exit ;
15233: GO 16036
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15235: LD_ADDR_VAR 0 14
15239: PUSH
15240: LD_VAR 0 1
15244: PPUSH
15245: LD_VAR 0 2
15249: PPUSH
15250: LD_VAR 0 3
15254: PPUSH
15255: LD_VAR 0 4
15259: PPUSH
15260: LD_VAR 0 5
15264: PUSH
15265: LD_INT 1
15267: ARRAY
15268: PPUSH
15269: CALL_OW 248
15273: PPUSH
15274: LD_INT 0
15276: PPUSH
15277: CALL 16873 0 6
15281: ST_TO_ADDR
// if not hexes then
15282: LD_VAR 0 14
15286: NOT
15287: IFFALSE 15291
// exit ;
15289: GO 16036
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15291: LD_ADDR_VAR 0 17
15295: PUSH
15296: LD_VAR 0 5
15300: PPUSH
15301: LD_INT 22
15303: PUSH
15304: LD_VAR 0 13
15308: PPUSH
15309: CALL_OW 255
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 2
15320: PUSH
15321: LD_INT 30
15323: PUSH
15324: LD_INT 0
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 30
15333: PUSH
15334: LD_INT 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PPUSH
15350: CALL_OW 72
15354: ST_TO_ADDR
// for i = 1 to hexes do
15355: LD_ADDR_VAR 0 9
15359: PUSH
15360: DOUBLE
15361: LD_INT 1
15363: DEC
15364: ST_TO_ADDR
15365: LD_VAR 0 14
15369: PUSH
15370: FOR_TO
15371: IFFALSE 16034
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15373: LD_ADDR_VAR 0 13
15377: PUSH
15378: LD_VAR 0 14
15382: PUSH
15383: LD_VAR 0 9
15387: ARRAY
15388: PUSH
15389: LD_INT 1
15391: ARRAY
15392: PPUSH
15393: LD_VAR 0 14
15397: PUSH
15398: LD_VAR 0 9
15402: ARRAY
15403: PUSH
15404: LD_INT 2
15406: ARRAY
15407: PPUSH
15408: CALL_OW 428
15412: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15413: LD_VAR 0 14
15417: PUSH
15418: LD_VAR 0 9
15422: ARRAY
15423: PUSH
15424: LD_INT 1
15426: ARRAY
15427: PPUSH
15428: LD_VAR 0 14
15432: PUSH
15433: LD_VAR 0 9
15437: ARRAY
15438: PUSH
15439: LD_INT 2
15441: ARRAY
15442: PPUSH
15443: CALL_OW 351
15447: PUSH
15448: LD_VAR 0 14
15452: PUSH
15453: LD_VAR 0 9
15457: ARRAY
15458: PUSH
15459: LD_INT 1
15461: ARRAY
15462: PPUSH
15463: LD_VAR 0 14
15467: PUSH
15468: LD_VAR 0 9
15472: ARRAY
15473: PUSH
15474: LD_INT 2
15476: ARRAY
15477: PPUSH
15478: CALL_OW 488
15482: NOT
15483: OR
15484: PUSH
15485: LD_VAR 0 13
15489: PPUSH
15490: CALL_OW 247
15494: PUSH
15495: LD_INT 3
15497: EQUAL
15498: OR
15499: IFFALSE 15505
// exit ;
15501: POP
15502: POP
15503: GO 16036
// if not tmp then
15505: LD_VAR 0 13
15509: NOT
15510: IFFALSE 15514
// continue ;
15512: GO 15370
// result := true ;
15514: LD_ADDR_VAR 0 8
15518: PUSH
15519: LD_INT 1
15521: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15522: LD_VAR 0 13
15526: PPUSH
15527: CALL_OW 247
15531: PUSH
15532: LD_INT 2
15534: EQUAL
15535: PUSH
15536: LD_VAR 0 13
15540: PPUSH
15541: CALL_OW 263
15545: PUSH
15546: LD_INT 1
15548: EQUAL
15549: AND
15550: IFFALSE 15714
// begin if IsDrivenBy ( tmp ) then
15552: LD_VAR 0 13
15556: PPUSH
15557: CALL_OW 311
15561: IFFALSE 15565
// continue ;
15563: GO 15370
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15565: LD_VAR 0 6
15569: PPUSH
15570: LD_INT 3
15572: PUSH
15573: LD_INT 60
15575: PUSH
15576: EMPTY
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 3
15585: PUSH
15586: LD_INT 55
15588: PUSH
15589: EMPTY
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PPUSH
15600: CALL_OW 72
15604: IFFALSE 15712
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15606: LD_ADDR_VAR 0 18
15610: PUSH
15611: LD_VAR 0 6
15615: PPUSH
15616: LD_INT 3
15618: PUSH
15619: LD_INT 60
15621: PUSH
15622: EMPTY
15623: LIST
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 3
15631: PUSH
15632: LD_INT 55
15634: PUSH
15635: EMPTY
15636: LIST
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PPUSH
15646: CALL_OW 72
15650: PUSH
15651: LD_INT 1
15653: ARRAY
15654: ST_TO_ADDR
// if IsInUnit ( driver ) then
15655: LD_VAR 0 18
15659: PPUSH
15660: CALL_OW 310
15664: IFFALSE 15675
// ComExit ( driver ) ;
15666: LD_VAR 0 18
15670: PPUSH
15671: CALL 40057 0 1
// AddComEnterUnit ( driver , tmp ) ;
15675: LD_VAR 0 18
15679: PPUSH
15680: LD_VAR 0 13
15684: PPUSH
15685: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15689: LD_VAR 0 18
15693: PPUSH
15694: LD_VAR 0 7
15698: PPUSH
15699: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15703: LD_VAR 0 18
15707: PPUSH
15708: CALL_OW 181
// end ; continue ;
15712: GO 15370
// end ; if not tmp in cleaners then
15714: LD_VAR 0 13
15718: PUSH
15719: LD_VAR 0 6
15723: IN
15724: NOT
15725: IFFALSE 16032
// begin if dep then
15727: LD_VAR 0 17
15731: IFFALSE 15867
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15733: LD_ADDR_VAR 0 16
15737: PUSH
15738: LD_VAR 0 17
15742: PUSH
15743: LD_INT 1
15745: ARRAY
15746: PPUSH
15747: CALL_OW 250
15751: PPUSH
15752: LD_VAR 0 17
15756: PUSH
15757: LD_INT 1
15759: ARRAY
15760: PPUSH
15761: CALL_OW 254
15765: PPUSH
15766: LD_INT 5
15768: PPUSH
15769: CALL_OW 272
15773: PUSH
15774: LD_VAR 0 17
15778: PUSH
15779: LD_INT 1
15781: ARRAY
15782: PPUSH
15783: CALL_OW 251
15787: PPUSH
15788: LD_VAR 0 17
15792: PUSH
15793: LD_INT 1
15795: ARRAY
15796: PPUSH
15797: CALL_OW 254
15801: PPUSH
15802: LD_INT 5
15804: PPUSH
15805: CALL_OW 273
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15814: LD_VAR 0 16
15818: PUSH
15819: LD_INT 1
15821: ARRAY
15822: PPUSH
15823: LD_VAR 0 16
15827: PUSH
15828: LD_INT 2
15830: ARRAY
15831: PPUSH
15832: CALL_OW 488
15836: IFFALSE 15867
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15838: LD_VAR 0 13
15842: PPUSH
15843: LD_VAR 0 16
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: LD_VAR 0 16
15856: PUSH
15857: LD_INT 2
15859: ARRAY
15860: PPUSH
15861: CALL_OW 111
// continue ;
15865: GO 15370
// end ; end ; r := GetDir ( tmp ) ;
15867: LD_ADDR_VAR 0 15
15871: PUSH
15872: LD_VAR 0 13
15876: PPUSH
15877: CALL_OW 254
15881: ST_TO_ADDR
// if r = 5 then
15882: LD_VAR 0 15
15886: PUSH
15887: LD_INT 5
15889: EQUAL
15890: IFFALSE 15900
// r := 0 ;
15892: LD_ADDR_VAR 0 15
15896: PUSH
15897: LD_INT 0
15899: ST_TO_ADDR
// for j = r to 5 do
15900: LD_ADDR_VAR 0 10
15904: PUSH
15905: DOUBLE
15906: LD_VAR 0 15
15910: DEC
15911: ST_TO_ADDR
15912: LD_INT 5
15914: PUSH
15915: FOR_TO
15916: IFFALSE 16030
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15918: LD_ADDR_VAR 0 11
15922: PUSH
15923: LD_VAR 0 13
15927: PPUSH
15928: CALL_OW 250
15932: PPUSH
15933: LD_VAR 0 10
15937: PPUSH
15938: LD_INT 2
15940: PPUSH
15941: CALL_OW 272
15945: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15946: LD_ADDR_VAR 0 12
15950: PUSH
15951: LD_VAR 0 13
15955: PPUSH
15956: CALL_OW 251
15960: PPUSH
15961: LD_VAR 0 10
15965: PPUSH
15966: LD_INT 2
15968: PPUSH
15969: CALL_OW 273
15973: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15974: LD_VAR 0 11
15978: PPUSH
15979: LD_VAR 0 12
15983: PPUSH
15984: CALL_OW 488
15988: PUSH
15989: LD_VAR 0 11
15993: PPUSH
15994: LD_VAR 0 12
15998: PPUSH
15999: CALL_OW 428
16003: NOT
16004: AND
16005: IFFALSE 16028
// begin ComMoveXY ( tmp , _x , _y ) ;
16007: LD_VAR 0 13
16011: PPUSH
16012: LD_VAR 0 11
16016: PPUSH
16017: LD_VAR 0 12
16021: PPUSH
16022: CALL_OW 111
// break ;
16026: GO 16030
// end ; end ;
16028: GO 15915
16030: POP
16031: POP
// end ; end ;
16032: GO 15370
16034: POP
16035: POP
// end ;
16036: LD_VAR 0 8
16040: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
16041: LD_INT 0
16043: PPUSH
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
// result := false ;
16053: LD_ADDR_VAR 0 6
16057: PUSH
16058: LD_INT 0
16060: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16061: LD_VAR 0 1
16065: NOT
16066: PUSH
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 266
16076: PUSH
16077: LD_INT 0
16079: PUSH
16080: LD_INT 1
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: IN
16087: NOT
16088: OR
16089: PUSH
16090: LD_VAR 0 2
16094: NOT
16095: OR
16096: PUSH
16097: LD_VAR 0 5
16101: PUSH
16102: LD_INT 0
16104: PUSH
16105: LD_INT 1
16107: PUSH
16108: LD_INT 2
16110: PUSH
16111: LD_INT 3
16113: PUSH
16114: LD_INT 4
16116: PUSH
16117: LD_INT 5
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: IN
16128: NOT
16129: OR
16130: PUSH
16131: LD_VAR 0 3
16135: PPUSH
16136: LD_VAR 0 4
16140: PPUSH
16141: CALL_OW 488
16145: NOT
16146: OR
16147: IFFALSE 16151
// exit ;
16149: GO 16868
// pom := GetBase ( depot ) ;
16151: LD_ADDR_VAR 0 10
16155: PUSH
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 274
16165: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16166: LD_ADDR_VAR 0 11
16170: PUSH
16171: LD_VAR 0 2
16175: PPUSH
16176: LD_VAR 0 1
16180: PPUSH
16181: CALL_OW 248
16185: PPUSH
16186: CALL_OW 450
16190: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16191: LD_VAR 0 10
16195: PPUSH
16196: LD_INT 1
16198: PPUSH
16199: CALL_OW 275
16203: PUSH
16204: LD_VAR 0 11
16208: PUSH
16209: LD_INT 1
16211: ARRAY
16212: GREATEREQUAL
16213: PUSH
16214: LD_VAR 0 10
16218: PPUSH
16219: LD_INT 2
16221: PPUSH
16222: CALL_OW 275
16226: PUSH
16227: LD_VAR 0 11
16231: PUSH
16232: LD_INT 2
16234: ARRAY
16235: GREATEREQUAL
16236: AND
16237: PUSH
16238: LD_VAR 0 10
16242: PPUSH
16243: LD_INT 3
16245: PPUSH
16246: CALL_OW 275
16250: PUSH
16251: LD_VAR 0 11
16255: PUSH
16256: LD_INT 3
16258: ARRAY
16259: GREATEREQUAL
16260: AND
16261: NOT
16262: IFFALSE 16266
// exit ;
16264: GO 16868
// if GetBType ( depot ) = b_depot then
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 266
16275: PUSH
16276: LD_INT 0
16278: EQUAL
16279: IFFALSE 16291
// dist := 28 else
16281: LD_ADDR_VAR 0 14
16285: PUSH
16286: LD_INT 28
16288: ST_TO_ADDR
16289: GO 16299
// dist := 36 ;
16291: LD_ADDR_VAR 0 14
16295: PUSH
16296: LD_INT 36
16298: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16299: LD_VAR 0 1
16303: PPUSH
16304: LD_VAR 0 3
16308: PPUSH
16309: LD_VAR 0 4
16313: PPUSH
16314: CALL_OW 297
16318: PUSH
16319: LD_VAR 0 14
16323: GREATER
16324: IFFALSE 16328
// exit ;
16326: GO 16868
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16328: LD_ADDR_VAR 0 12
16332: PUSH
16333: LD_VAR 0 2
16337: PPUSH
16338: LD_VAR 0 3
16342: PPUSH
16343: LD_VAR 0 4
16347: PPUSH
16348: LD_VAR 0 5
16352: PPUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 248
16362: PPUSH
16363: LD_INT 0
16365: PPUSH
16366: CALL 16873 0 6
16370: ST_TO_ADDR
// if not hexes then
16371: LD_VAR 0 12
16375: NOT
16376: IFFALSE 16380
// exit ;
16378: GO 16868
// hex := GetHexInfo ( x , y ) ;
16380: LD_ADDR_VAR 0 15
16384: PUSH
16385: LD_VAR 0 3
16389: PPUSH
16390: LD_VAR 0 4
16394: PPUSH
16395: CALL_OW 546
16399: ST_TO_ADDR
// if hex [ 1 ] then
16400: LD_VAR 0 15
16404: PUSH
16405: LD_INT 1
16407: ARRAY
16408: IFFALSE 16412
// exit ;
16410: GO 16868
// height := hex [ 2 ] ;
16412: LD_ADDR_VAR 0 13
16416: PUSH
16417: LD_VAR 0 15
16421: PUSH
16422: LD_INT 2
16424: ARRAY
16425: ST_TO_ADDR
// for i = 1 to hexes do
16426: LD_ADDR_VAR 0 7
16430: PUSH
16431: DOUBLE
16432: LD_INT 1
16434: DEC
16435: ST_TO_ADDR
16436: LD_VAR 0 12
16440: PUSH
16441: FOR_TO
16442: IFFALSE 16772
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16444: LD_VAR 0 12
16448: PUSH
16449: LD_VAR 0 7
16453: ARRAY
16454: PUSH
16455: LD_INT 1
16457: ARRAY
16458: PPUSH
16459: LD_VAR 0 12
16463: PUSH
16464: LD_VAR 0 7
16468: ARRAY
16469: PUSH
16470: LD_INT 2
16472: ARRAY
16473: PPUSH
16474: CALL_OW 488
16478: NOT
16479: PUSH
16480: LD_VAR 0 12
16484: PUSH
16485: LD_VAR 0 7
16489: ARRAY
16490: PUSH
16491: LD_INT 1
16493: ARRAY
16494: PPUSH
16495: LD_VAR 0 12
16499: PUSH
16500: LD_VAR 0 7
16504: ARRAY
16505: PUSH
16506: LD_INT 2
16508: ARRAY
16509: PPUSH
16510: CALL_OW 428
16514: PUSH
16515: LD_INT 0
16517: GREATER
16518: OR
16519: PUSH
16520: LD_VAR 0 12
16524: PUSH
16525: LD_VAR 0 7
16529: ARRAY
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PPUSH
16535: LD_VAR 0 12
16539: PUSH
16540: LD_VAR 0 7
16544: ARRAY
16545: PUSH
16546: LD_INT 2
16548: ARRAY
16549: PPUSH
16550: CALL_OW 351
16554: OR
16555: IFFALSE 16561
// exit ;
16557: POP
16558: POP
16559: GO 16868
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16561: LD_ADDR_VAR 0 8
16565: PUSH
16566: LD_VAR 0 12
16570: PUSH
16571: LD_VAR 0 7
16575: ARRAY
16576: PUSH
16577: LD_INT 1
16579: ARRAY
16580: PPUSH
16581: LD_VAR 0 12
16585: PUSH
16586: LD_VAR 0 7
16590: ARRAY
16591: PUSH
16592: LD_INT 2
16594: ARRAY
16595: PPUSH
16596: CALL_OW 546
16600: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16601: LD_VAR 0 8
16605: PUSH
16606: LD_INT 1
16608: ARRAY
16609: PUSH
16610: LD_VAR 0 8
16614: PUSH
16615: LD_INT 2
16617: ARRAY
16618: PUSH
16619: LD_VAR 0 13
16623: PUSH
16624: LD_INT 2
16626: PLUS
16627: GREATER
16628: OR
16629: PUSH
16630: LD_VAR 0 8
16634: PUSH
16635: LD_INT 2
16637: ARRAY
16638: PUSH
16639: LD_VAR 0 13
16643: PUSH
16644: LD_INT 2
16646: MINUS
16647: LESS
16648: OR
16649: PUSH
16650: LD_VAR 0 8
16654: PUSH
16655: LD_INT 3
16657: ARRAY
16658: PUSH
16659: LD_INT 0
16661: PUSH
16662: LD_INT 8
16664: PUSH
16665: LD_INT 9
16667: PUSH
16668: LD_INT 10
16670: PUSH
16671: LD_INT 11
16673: PUSH
16674: LD_INT 12
16676: PUSH
16677: LD_INT 13
16679: PUSH
16680: LD_INT 16
16682: PUSH
16683: LD_INT 17
16685: PUSH
16686: LD_INT 18
16688: PUSH
16689: LD_INT 19
16691: PUSH
16692: LD_INT 20
16694: PUSH
16695: LD_INT 21
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: IN
16713: NOT
16714: OR
16715: PUSH
16716: LD_VAR 0 8
16720: PUSH
16721: LD_INT 5
16723: ARRAY
16724: NOT
16725: OR
16726: PUSH
16727: LD_VAR 0 8
16731: PUSH
16732: LD_INT 6
16734: ARRAY
16735: PUSH
16736: LD_INT 1
16738: PUSH
16739: LD_INT 2
16741: PUSH
16742: LD_INT 7
16744: PUSH
16745: LD_INT 9
16747: PUSH
16748: LD_INT 10
16750: PUSH
16751: LD_INT 11
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: IN
16762: NOT
16763: OR
16764: IFFALSE 16770
// exit ;
16766: POP
16767: POP
16768: GO 16868
// end ;
16770: GO 16441
16772: POP
16773: POP
// side := GetSide ( depot ) ;
16774: LD_ADDR_VAR 0 9
16778: PUSH
16779: LD_VAR 0 1
16783: PPUSH
16784: CALL_OW 255
16788: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16789: LD_VAR 0 9
16793: PPUSH
16794: LD_VAR 0 3
16798: PPUSH
16799: LD_VAR 0 4
16803: PPUSH
16804: LD_INT 20
16806: PPUSH
16807: CALL 9202 0 4
16811: PUSH
16812: LD_INT 4
16814: ARRAY
16815: IFFALSE 16819
// exit ;
16817: GO 16868
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16819: LD_VAR 0 2
16823: PUSH
16824: LD_INT 29
16826: PUSH
16827: LD_INT 30
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: IN
16834: PUSH
16835: LD_VAR 0 3
16839: PPUSH
16840: LD_VAR 0 4
16844: PPUSH
16845: LD_VAR 0 9
16849: PPUSH
16850: CALL_OW 440
16854: NOT
16855: AND
16856: IFFALSE 16860
// exit ;
16858: GO 16868
// result := true ;
16860: LD_ADDR_VAR 0 6
16864: PUSH
16865: LD_INT 1
16867: ST_TO_ADDR
// end ;
16868: LD_VAR 0 6
16872: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16873: LD_INT 0
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
16879: PPUSH
16880: PPUSH
16881: PPUSH
16882: PPUSH
16883: PPUSH
16884: PPUSH
16885: PPUSH
16886: PPUSH
16887: PPUSH
16888: PPUSH
16889: PPUSH
16890: PPUSH
16891: PPUSH
16892: PPUSH
16893: PPUSH
16894: PPUSH
16895: PPUSH
16896: PPUSH
16897: PPUSH
16898: PPUSH
16899: PPUSH
16900: PPUSH
16901: PPUSH
16902: PPUSH
16903: PPUSH
16904: PPUSH
16905: PPUSH
16906: PPUSH
16907: PPUSH
16908: PPUSH
16909: PPUSH
16910: PPUSH
16911: PPUSH
16912: PPUSH
16913: PPUSH
16914: PPUSH
16915: PPUSH
16916: PPUSH
16917: PPUSH
16918: PPUSH
16919: PPUSH
16920: PPUSH
16921: PPUSH
16922: PPUSH
16923: PPUSH
16924: PPUSH
16925: PPUSH
16926: PPUSH
16927: PPUSH
16928: PPUSH
16929: PPUSH
16930: PPUSH
16931: PPUSH
16932: PPUSH
// result = [ ] ;
16933: LD_ADDR_VAR 0 7
16937: PUSH
16938: EMPTY
16939: ST_TO_ADDR
// temp_list = [ ] ;
16940: LD_ADDR_VAR 0 9
16944: PUSH
16945: EMPTY
16946: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16947: LD_VAR 0 4
16951: PUSH
16952: LD_INT 0
16954: PUSH
16955: LD_INT 1
16957: PUSH
16958: LD_INT 2
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: LD_INT 4
16966: PUSH
16967: LD_INT 5
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: IN
16978: NOT
16979: PUSH
16980: LD_VAR 0 1
16984: PUSH
16985: LD_INT 0
16987: PUSH
16988: LD_INT 1
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: IN
16995: PUSH
16996: LD_VAR 0 5
17000: PUSH
17001: LD_INT 1
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: LIST
17014: IN
17015: NOT
17016: AND
17017: OR
17018: IFFALSE 17022
// exit ;
17020: GO 35413
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17022: LD_VAR 0 1
17026: PUSH
17027: LD_INT 6
17029: PUSH
17030: LD_INT 7
17032: PUSH
17033: LD_INT 8
17035: PUSH
17036: LD_INT 13
17038: PUSH
17039: LD_INT 12
17041: PUSH
17042: LD_INT 15
17044: PUSH
17045: LD_INT 11
17047: PUSH
17048: LD_INT 14
17050: PUSH
17051: LD_INT 10
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: IN
17065: IFFALSE 17075
// btype = b_lab ;
17067: LD_ADDR_VAR 0 1
17071: PUSH
17072: LD_INT 6
17074: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17075: LD_VAR 0 6
17079: PUSH
17080: LD_INT 0
17082: PUSH
17083: LD_INT 1
17085: PUSH
17086: LD_INT 2
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: IN
17094: NOT
17095: PUSH
17096: LD_VAR 0 1
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: LD_INT 1
17106: PUSH
17107: LD_INT 2
17109: PUSH
17110: LD_INT 3
17112: PUSH
17113: LD_INT 6
17115: PUSH
17116: LD_INT 36
17118: PUSH
17119: LD_INT 4
17121: PUSH
17122: LD_INT 5
17124: PUSH
17125: LD_INT 31
17127: PUSH
17128: LD_INT 32
17130: PUSH
17131: LD_INT 33
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: IN
17147: NOT
17148: PUSH
17149: LD_VAR 0 6
17153: PUSH
17154: LD_INT 1
17156: EQUAL
17157: AND
17158: OR
17159: PUSH
17160: LD_VAR 0 1
17164: PUSH
17165: LD_INT 2
17167: PUSH
17168: LD_INT 3
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: IN
17175: NOT
17176: PUSH
17177: LD_VAR 0 6
17181: PUSH
17182: LD_INT 2
17184: EQUAL
17185: AND
17186: OR
17187: IFFALSE 17197
// mode = 0 ;
17189: LD_ADDR_VAR 0 6
17193: PUSH
17194: LD_INT 0
17196: ST_TO_ADDR
// case mode of 0 :
17197: LD_VAR 0 6
17201: PUSH
17202: LD_INT 0
17204: DOUBLE
17205: EQUAL
17206: IFTRUE 17210
17208: GO 28663
17210: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17211: LD_ADDR_VAR 0 11
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: LD_INT 0
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 0
17228: PUSH
17229: LD_INT 1
17231: NEG
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 1
17249: PUSH
17250: LD_INT 1
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: NEG
17270: PUSH
17271: LD_INT 0
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: NEG
17281: PUSH
17282: LD_INT 1
17284: NEG
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 1
17292: NEG
17293: PUSH
17294: LD_INT 2
17296: NEG
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: LD_INT 2
17307: NEG
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 1
17315: PUSH
17316: LD_INT 1
17318: NEG
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 1
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 0
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 1
17346: NEG
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: LD_INT 3
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 0
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 1
17377: NEG
17378: PUSH
17379: LD_INT 2
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17404: LD_ADDR_VAR 0 12
17408: PUSH
17409: LD_INT 0
17411: PUSH
17412: LD_INT 0
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 0
17421: PUSH
17422: LD_INT 1
17424: NEG
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 1
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: LD_INT 1
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 1
17462: NEG
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 1
17473: NEG
17474: PUSH
17475: LD_INT 1
17477: NEG
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: LD_INT 1
17488: NEG
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 2
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 1
17516: NEG
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 2
17527: NEG
17528: PUSH
17529: LD_INT 0
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 2
17538: NEG
17539: PUSH
17540: LD_INT 1
17542: NEG
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 2
17550: NEG
17551: PUSH
17552: LD_INT 1
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 3
17561: NEG
17562: PUSH
17563: LD_INT 0
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 3
17572: NEG
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17600: LD_ADDR_VAR 0 13
17604: PUSH
17605: LD_INT 0
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 0
17617: PUSH
17618: LD_INT 1
17620: NEG
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: LD_INT 0
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: LD_INT 1
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 0
17648: PUSH
17649: LD_INT 1
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 1
17658: NEG
17659: PUSH
17660: LD_INT 0
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 1
17669: NEG
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 1
17681: NEG
17682: PUSH
17683: LD_INT 2
17685: NEG
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 2
17703: PUSH
17704: LD_INT 2
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: LD_INT 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 2
17723: NEG
17724: PUSH
17725: LD_INT 1
17727: NEG
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 2
17735: NEG
17736: PUSH
17737: LD_INT 2
17739: NEG
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 2
17747: NEG
17748: PUSH
17749: LD_INT 3
17751: NEG
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 3
17759: NEG
17760: PUSH
17761: LD_INT 2
17763: NEG
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 3
17771: NEG
17772: PUSH
17773: LD_INT 3
17775: NEG
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17799: LD_ADDR_VAR 0 14
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 0
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 0
17847: PUSH
17848: LD_INT 1
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 1
17857: NEG
17858: PUSH
17859: LD_INT 0
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 1
17868: NEG
17869: PUSH
17870: LD_INT 1
17872: NEG
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 1
17880: NEG
17881: PUSH
17882: LD_INT 2
17884: NEG
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: LD_INT 2
17895: NEG
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 1
17903: PUSH
17904: LD_INT 1
17906: NEG
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: LD_INT 2
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: LD_INT 1
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: NEG
17946: PUSH
17947: LD_INT 3
17949: NEG
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: LD_INT 3
17960: NEG
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: LD_INT 2
17971: NEG
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17995: LD_ADDR_VAR 0 15
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: LD_INT 0
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: LD_INT 1
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: NEG
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 1
18064: NEG
18065: PUSH
18066: LD_INT 1
18068: NEG
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: LD_INT 1
18079: NEG
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 2
18087: PUSH
18088: LD_INT 0
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: LD_INT 1
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 2
18118: NEG
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 2
18129: NEG
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 1
18144: NEG
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 3
18152: PUSH
18153: LD_INT 0
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 3
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18188: LD_ADDR_VAR 0 16
18192: PUSH
18193: LD_INT 0
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 0
18205: PUSH
18206: LD_INT 1
18208: NEG
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: LD_INT 1
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: LD_INT 0
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 1
18257: NEG
18258: PUSH
18259: LD_INT 1
18261: NEG
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 2
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 2
18311: NEG
18312: PUSH
18313: LD_INT 1
18315: NEG
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 2
18323: NEG
18324: PUSH
18325: LD_INT 2
18327: NEG
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 3
18335: PUSH
18336: LD_INT 2
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 3
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18381: LD_ADDR_VAR 0 17
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: LD_INT 1
18401: NEG
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 1
18439: NEG
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 1
18450: NEG
18451: PUSH
18452: LD_INT 1
18454: NEG
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: LD_INT 2
18466: NEG
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: LD_INT 2
18477: NEG
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: LD_INT 1
18488: NEG
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 2
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: NEG
18547: PUSH
18548: LD_INT 1
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 2
18557: NEG
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 2
18568: NEG
18569: PUSH
18570: LD_INT 1
18572: NEG
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 2
18580: NEG
18581: PUSH
18582: LD_INT 2
18584: NEG
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18611: LD_ADDR_VAR 0 18
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 0
18628: PUSH
18629: LD_INT 1
18631: NEG
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 1
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 0
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 1
18669: NEG
18670: PUSH
18671: LD_INT 0
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 1
18680: NEG
18681: PUSH
18682: LD_INT 1
18684: NEG
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 1
18692: NEG
18693: PUSH
18694: LD_INT 2
18696: NEG
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 0
18704: PUSH
18705: LD_INT 2
18707: NEG
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: LD_INT 1
18718: NEG
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 2
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: PUSH
18757: LD_INT 2
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 0
18766: PUSH
18767: LD_INT 2
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: NEG
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 2
18787: NEG
18788: PUSH
18789: LD_INT 0
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 2
18798: NEG
18799: PUSH
18800: LD_INT 1
18802: NEG
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 2
18810: NEG
18811: PUSH
18812: LD_INT 2
18814: NEG
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18841: LD_ADDR_VAR 0 19
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 1
18910: NEG
18911: PUSH
18912: LD_INT 1
18914: NEG
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PUSH
18924: LD_INT 2
18926: NEG
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: LD_INT 2
18937: NEG
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: NEG
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: NEG
19018: PUSH
19019: LD_INT 0
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 2
19028: NEG
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: LD_INT 2
19044: NEG
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19071: LD_ADDR_VAR 0 20
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: LD_INT 1
19091: NEG
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: LD_INT 0
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 1
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 1
19129: NEG
19130: PUSH
19131: LD_INT 0
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: LD_INT 1
19144: NEG
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 1
19152: NEG
19153: PUSH
19154: LD_INT 2
19156: NEG
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 0
19164: PUSH
19165: LD_INT 2
19167: NEG
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 2
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 1
19216: PUSH
19217: LD_INT 2
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: LD_INT 2
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 1
19236: NEG
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 2
19247: NEG
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 2
19258: NEG
19259: PUSH
19260: LD_INT 1
19262: NEG
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 2
19270: NEG
19271: PUSH
19272: LD_INT 2
19274: NEG
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19301: LD_ADDR_VAR 0 21
19305: PUSH
19306: LD_INT 0
19308: PUSH
19309: LD_INT 0
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: LD_INT 1
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: LD_INT 1
19374: NEG
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: NEG
19383: PUSH
19384: LD_INT 2
19386: NEG
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: LD_INT 2
19397: NEG
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: LD_INT 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: LD_INT 2
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: LD_INT 2
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 1
19466: NEG
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: NEG
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 2
19488: NEG
19489: PUSH
19490: LD_INT 1
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 2
19500: NEG
19501: PUSH
19502: LD_INT 2
19504: NEG
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19531: LD_ADDR_VAR 0 22
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: LD_INT 1
19551: NEG
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 1
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 1
19589: NEG
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: LD_INT 1
19604: NEG
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: LD_INT 2
19616: NEG
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: LD_INT 2
19627: NEG
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 2
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: LD_INT 2
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 2
19707: NEG
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 2
19718: NEG
19719: PUSH
19720: LD_INT 1
19722: NEG
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 2
19730: NEG
19731: PUSH
19732: LD_INT 2
19734: NEG
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19761: LD_ADDR_VAR 0 23
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 0
19778: PUSH
19779: LD_INT 1
19781: NEG
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 1
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 0
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 1
19819: NEG
19820: PUSH
19821: LD_INT 0
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 1
19830: NEG
19831: PUSH
19832: LD_INT 1
19834: NEG
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 1
19842: NEG
19843: PUSH
19844: LD_INT 2
19846: NEG
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 0
19854: PUSH
19855: LD_INT 2
19857: NEG
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: LD_INT 1
19868: NEG
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 2
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 2
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: LD_INT 2
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: LD_INT 2
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: NEG
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 2
19937: NEG
19938: PUSH
19939: LD_INT 0
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 2
19948: NEG
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 2
19960: NEG
19961: PUSH
19962: LD_INT 2
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 2
19972: NEG
19973: PUSH
19974: LD_INT 3
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 1
19984: NEG
19985: PUSH
19986: LD_INT 3
19988: NEG
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: LD_INT 2
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20041: LD_ADDR_VAR 0 24
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: LD_INT 0
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 0
20058: PUSH
20059: LD_INT 1
20061: NEG
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 0
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: LD_INT 1
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: NEG
20123: PUSH
20124: LD_INT 2
20126: NEG
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: LD_INT 2
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: LD_INT 1
20148: NEG
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: LD_INT 2
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 0
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 1
20206: NEG
20207: PUSH
20208: LD_INT 1
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 2
20228: NEG
20229: PUSH
20230: LD_INT 1
20232: NEG
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 2
20240: NEG
20241: PUSH
20242: LD_INT 2
20244: NEG
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: LD_INT 2
20255: NEG
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 2
20263: PUSH
20264: LD_INT 1
20266: NEG
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 3
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 3
20284: PUSH
20285: LD_INT 2
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20317: LD_ADDR_VAR 0 25
20321: PUSH
20322: LD_INT 0
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 1
20375: NEG
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: NEG
20387: PUSH
20388: LD_INT 1
20390: NEG
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 1
20398: NEG
20399: PUSH
20400: LD_INT 2
20402: NEG
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 2
20413: NEG
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: LD_INT 1
20424: NEG
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 2
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 2
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 2
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: LD_INT 2
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 0
20472: PUSH
20473: LD_INT 2
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: NEG
20483: PUSH
20484: LD_INT 1
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 2
20493: NEG
20494: PUSH
20495: LD_INT 0
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: NEG
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: NEG
20517: PUSH
20518: LD_INT 2
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 3
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 3
20538: PUSH
20539: LD_INT 2
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: LD_INT 3
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: LD_INT 3
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20591: LD_ADDR_VAR 0 26
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 1
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 0
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: NEG
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: LD_INT 1
20664: NEG
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: NEG
20673: PUSH
20674: LD_INT 2
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: LD_INT 2
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 2
20706: PUSH
20707: LD_INT 0
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: PUSH
20727: LD_INT 2
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 1
20736: PUSH
20737: LD_INT 2
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 1
20756: NEG
20757: PUSH
20758: LD_INT 1
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 2
20767: NEG
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 2
20778: NEG
20779: PUSH
20780: LD_INT 1
20782: NEG
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 2
20790: NEG
20791: PUSH
20792: LD_INT 2
20794: NEG
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: LD_INT 3
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 1
20812: PUSH
20813: LD_INT 3
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 1
20822: NEG
20823: PUSH
20824: LD_INT 2
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 2
20833: NEG
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20867: LD_ADDR_VAR 0 27
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: LD_INT 2
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: LD_INT 1
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: LD_INT 0
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: NEG
21055: PUSH
21056: LD_INT 1
21058: NEG
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: LD_INT 2
21070: NEG
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 1
21078: NEG
21079: PUSH
21080: LD_INT 2
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 2
21089: NEG
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 3
21100: NEG
21101: PUSH
21102: LD_INT 1
21104: NEG
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 3
21112: NEG
21113: PUSH
21114: LD_INT 2
21116: NEG
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21147: LD_ADDR_VAR 0 28
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: LD_INT 1
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: LD_INT 2
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 0
21240: PUSH
21241: LD_INT 2
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: LD_INT 2
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: NEG
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: NEG
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 2
21334: NEG
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 2
21346: NEG
21347: PUSH
21348: LD_INT 2
21350: NEG
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 2
21358: NEG
21359: PUSH
21360: LD_INT 3
21362: NEG
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 1
21370: NEG
21371: PUSH
21372: LD_INT 3
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 3
21382: NEG
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 3
21394: NEG
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21429: LD_ADDR_VAR 0 29
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 0
21446: PUSH
21447: LD_INT 1
21449: NEG
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: LD_INT 0
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 0
21477: PUSH
21478: LD_INT 1
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: NEG
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: NEG
21499: PUSH
21500: LD_INT 1
21502: NEG
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 1
21510: NEG
21511: PUSH
21512: LD_INT 2
21514: NEG
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: LD_INT 2
21525: NEG
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 1
21533: PUSH
21534: LD_INT 1
21536: NEG
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 0
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 2
21554: PUSH
21555: LD_INT 1
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 1
21564: PUSH
21565: LD_INT 2
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: LD_INT 2
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 1
21584: NEG
21585: PUSH
21586: LD_INT 1
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 2
21595: NEG
21596: PUSH
21597: LD_INT 1
21599: NEG
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 2
21607: NEG
21608: PUSH
21609: LD_INT 2
21611: NEG
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 2
21619: NEG
21620: PUSH
21621: LD_INT 3
21623: NEG
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: LD_INT 1
21634: NEG
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 3
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: LD_INT 3
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: LD_INT 2
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 3
21673: NEG
21674: PUSH
21675: LD_INT 2
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21708: LD_ADDR_VAR 0 30
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 0
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: LD_INT 1
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: LD_INT 2
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: LD_INT 2
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 0
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: NEG
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 2
21885: NEG
21886: PUSH
21887: LD_INT 1
21889: NEG
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 1
21897: NEG
21898: PUSH
21899: LD_INT 3
21901: NEG
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: LD_INT 2
21912: NEG
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 3
21920: PUSH
21921: LD_INT 2
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 2
21930: PUSH
21931: LD_INT 3
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 2
21940: NEG
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 3
21951: NEG
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21986: LD_ADDR_VAR 0 31
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: LD_INT 0
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 0
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 1
22055: NEG
22056: PUSH
22057: LD_INT 1
22059: NEG
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: LD_INT 2
22071: NEG
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 0
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 2
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: LD_INT 2
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: LD_INT 2
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: NEG
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 2
22163: NEG
22164: PUSH
22165: LD_INT 2
22167: NEG
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 2
22175: NEG
22176: PUSH
22177: LD_INT 3
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 2
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 3
22198: PUSH
22199: LD_INT 1
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: LD_INT 3
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 1
22218: NEG
22219: PUSH
22220: LD_INT 2
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 3
22229: NEG
22230: PUSH
22231: LD_INT 2
22233: NEG
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22264: LD_ADDR_VAR 0 32
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: NEG
22323: PUSH
22324: LD_INT 0
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: LD_INT 1
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: LD_INT 2
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: LD_INT 2
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: LD_INT 2
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: LD_INT 2
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: LD_INT 1
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 2
22441: NEG
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: LD_INT 3
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: LD_INT 2
22468: NEG
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 3
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 2
22486: PUSH
22487: LD_INT 3
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 2
22496: NEG
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 3
22507: NEG
22508: PUSH
22509: LD_INT 1
22511: NEG
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22542: LD_ADDR_VAR 0 33
22546: PUSH
22547: LD_INT 0
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: LD_INT 0
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: NEG
22612: PUSH
22613: LD_INT 1
22615: NEG
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: NEG
22624: PUSH
22625: LD_INT 2
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 2
22646: PUSH
22647: LD_INT 0
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 0
22676: PUSH
22677: LD_INT 2
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 1
22686: NEG
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 2
22697: NEG
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 2
22708: NEG
22709: PUSH
22710: LD_INT 1
22712: NEG
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: NEG
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 2
22732: NEG
22733: PUSH
22734: LD_INT 3
22736: NEG
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 3
22755: PUSH
22756: LD_INT 1
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: LD_INT 3
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: LD_INT 2
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 3
22786: NEG
22787: PUSH
22788: LD_INT 2
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22821: LD_ADDR_VAR 0 34
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 0
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: NEG
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: LD_INT 1
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: LD_INT 2
22906: NEG
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: LD_INT 2
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 2
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: LD_INT 2
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 1
22966: NEG
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 2
22977: NEG
22978: PUSH
22979: LD_INT 0
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 2
22988: NEG
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 2
23000: NEG
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: NEG
23013: PUSH
23014: LD_INT 3
23016: NEG
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: PUSH
23025: LD_INT 2
23027: NEG
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 3
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 2
23045: PUSH
23046: LD_INT 3
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 2
23055: NEG
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 3
23066: NEG
23067: PUSH
23068: LD_INT 1
23070: NEG
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23101: LD_ADDR_VAR 0 35
23105: PUSH
23106: LD_INT 0
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 0
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: LD_INT 1
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: NEG
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23213: LD_ADDR_VAR 0 36
23217: PUSH
23218: LD_INT 0
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: LD_INT 2
23298: NEG
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23325: LD_ADDR_VAR 0 37
23329: PUSH
23330: LD_INT 0
23332: PUSH
23333: LD_INT 0
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: LD_INT 1
23345: NEG
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: LD_INT 1
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: NEG
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: LD_INT 1
23398: NEG
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 1
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23437: LD_ADDR_VAR 0 38
23441: PUSH
23442: LD_INT 0
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 0
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 1
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: NEG
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23549: LD_ADDR_VAR 0 39
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: LD_INT 1
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: NEG
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: LD_INT 2
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 2
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23661: LD_ADDR_VAR 0 40
23665: PUSH
23666: LD_INT 0
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 0
23678: PUSH
23679: LD_INT 1
23681: NEG
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: NEG
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23773: LD_ADDR_VAR 0 41
23777: PUSH
23778: LD_INT 0
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: LD_INT 1
23793: NEG
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 0
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 1
23831: NEG
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: LD_INT 1
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 1
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 2
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 2
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 1
23917: NEG
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 2
23928: NEG
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 2
23939: NEG
23940: PUSH
23941: LD_INT 1
23943: NEG
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: LD_INT 2
23955: NEG
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 2
23963: NEG
23964: PUSH
23965: LD_INT 3
23967: NEG
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 2
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 3
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 3
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 3
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 3
24016: PUSH
24017: LD_INT 3
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 3
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 2
24036: NEG
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 3
24047: NEG
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 3
24058: NEG
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 3
24070: NEG
24071: PUSH
24072: LD_INT 2
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 3
24082: NEG
24083: PUSH
24084: LD_INT 3
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24123: LD_ADDR_VAR 0 42
24127: PUSH
24128: LD_INT 0
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: LD_INT 1
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: NEG
24205: PUSH
24206: LD_INT 2
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: LD_INT 2
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: LD_INT 1
24230: NEG
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 1
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: LD_INT 2
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: LD_INT 2
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: NEG
24290: PUSH
24291: LD_INT 1
24293: NEG
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 2
24301: NEG
24302: PUSH
24303: LD_INT 2
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 2
24313: NEG
24314: PUSH
24315: LD_INT 3
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: LD_INT 3
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 0
24337: PUSH
24338: LD_INT 3
24340: NEG
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: LD_INT 2
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 3
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 3
24369: PUSH
24370: LD_INT 3
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 2
24379: PUSH
24380: LD_INT 3
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 1
24389: PUSH
24390: LD_INT 3
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: LD_INT 3
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: NEG
24410: PUSH
24411: LD_INT 2
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 3
24420: NEG
24421: PUSH
24422: LD_INT 2
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 3
24432: NEG
24433: PUSH
24434: LD_INT 3
24436: NEG
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24473: LD_ADDR_VAR 0 43
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: LD_INT 1
24493: NEG
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: LD_INT 0
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: LD_INT 0
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 1
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 1
24554: NEG
24555: PUSH
24556: LD_INT 2
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: LD_INT 1
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: NEG
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: LD_INT 3
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: LD_INT 3
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: LD_INT 2
24688: NEG
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 2
24696: PUSH
24697: LD_INT 1
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 3
24707: PUSH
24708: LD_INT 0
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 3
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: LD_INT 3
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 2
24758: NEG
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 3
24769: NEG
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 3
24780: NEG
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24821: LD_ADDR_VAR 0 44
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 1
24841: NEG
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: LD_INT 1
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: NEG
24903: PUSH
24904: LD_INT 2
24906: NEG
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 1
24917: NEG
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: LD_INT 2
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: LD_INT 2
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 1
24965: NEG
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 2
24976: NEG
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 2
24987: NEG
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 2
24999: NEG
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: NEG
25012: PUSH
25013: LD_INT 3
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 2
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 3
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 3
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 3
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 3
25064: PUSH
25065: LD_INT 3
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 2
25074: PUSH
25075: LD_INT 3
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 2
25084: NEG
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 3
25095: NEG
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 3
25106: NEG
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 3
25118: NEG
25119: PUSH
25120: LD_INT 2
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 3
25130: NEG
25131: PUSH
25132: LD_INT 3
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25171: LD_ADDR_VAR 0 45
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 1
25252: NEG
25253: PUSH
25254: LD_INT 2
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 2
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: LD_INT 1
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 2
25337: NEG
25338: PUSH
25339: LD_INT 1
25341: NEG
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 2
25349: NEG
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: NEG
25362: PUSH
25363: LD_INT 3
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: LD_INT 3
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 0
25385: PUSH
25386: LD_INT 3
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 3
25407: PUSH
25408: LD_INT 2
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 3
25417: PUSH
25418: LD_INT 3
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: LD_INT 3
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: LD_INT 3
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: LD_INT 3
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: NEG
25458: PUSH
25459: LD_INT 2
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 3
25468: NEG
25469: PUSH
25470: LD_INT 2
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 3
25480: NEG
25481: PUSH
25482: LD_INT 3
25484: NEG
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25521: LD_ADDR_VAR 0 46
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: LD_INT 1
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: NEG
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: LD_INT 1
25628: NEG
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 2
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: LD_INT 2
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: LD_INT 2
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: LD_INT 3
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 0
25722: PUSH
25723: LD_INT 3
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: LD_INT 2
25736: NEG
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 3
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 3
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 3
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: LD_INT 3
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 2
25806: NEG
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 3
25817: NEG
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 3
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25869: LD_ADDR_VAR 0 47
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: LD_INT 1
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: NEG
25985: PUSH
25986: LD_INT 1
25988: NEG
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 2
25996: NEG
25997: PUSH
25998: LD_INT 2
26000: NEG
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26020: LD_ADDR_VAR 0 48
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: NEG
26102: PUSH
26103: LD_INT 2
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: LD_INT 2
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 1
26124: PUSH
26125: LD_INT 1
26127: NEG
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 2
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26167: LD_ADDR_VAR 0 49
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: NEG
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 2
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: PUSH
26280: LD_INT 2
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26311: LD_ADDR_VAR 0 50
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 0
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 2
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: NEG
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26455: LD_ADDR_VAR 0 51
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 0
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 1
26524: NEG
26525: PUSH
26526: LD_INT 1
26528: NEG
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: NEG
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 2
26578: NEG
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26602: LD_ADDR_VAR 0 52
26606: PUSH
26607: LD_INT 0
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: NEG
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: LD_INT 2
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 2
26706: NEG
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 2
26717: NEG
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 2
26729: NEG
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26753: LD_ADDR_VAR 0 53
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: LD_INT 1
26773: NEG
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: NEG
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: NEG
26835: PUSH
26836: LD_INT 2
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: LD_INT 2
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: LD_INT 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: NEG
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 2
26940: NEG
26941: PUSH
26942: LD_INT 1
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 2
26952: NEG
26953: PUSH
26954: LD_INT 2
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26983: LD_ADDR_VAR 0 54
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: LD_INT 0
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: NEG
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: LD_INT 2
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 2
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 2
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 2
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 2
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: NEG
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 2
27170: NEG
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: NEG
27183: PUSH
27184: LD_INT 2
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27213: LD_ADDR_VAR 0 55
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: LD_INT 2
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 2
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 2
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 2
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 2
27389: NEG
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 2
27400: NEG
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 2
27412: NEG
27413: PUSH
27414: LD_INT 2
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27443: LD_ADDR_VAR 0 56
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 2
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 2
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 2
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 2
27578: PUSH
27579: LD_INT 2
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: NEG
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 2
27619: NEG
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 2
27630: NEG
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 2
27642: NEG
27643: PUSH
27644: LD_INT 2
27646: NEG
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27673: LD_ADDR_VAR 0 57
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: LD_INT 1
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: LD_INT 1
27746: NEG
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: NEG
27755: PUSH
27756: LD_INT 2
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: LD_INT 2
27769: NEG
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 2
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 2
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 2
27849: NEG
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 2
27860: NEG
27861: PUSH
27862: LD_INT 1
27864: NEG
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 2
27872: NEG
27873: PUSH
27874: LD_INT 2
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27903: LD_ADDR_VAR 0 58
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: LD_INT 1
27976: NEG
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 2
27988: NEG
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: LD_INT 2
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 2
28079: NEG
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 2
28090: NEG
28091: PUSH
28092: LD_INT 1
28094: NEG
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 2
28102: NEG
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28133: LD_ADDR_VAR 0 59
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: LD_INT 1
28206: NEG
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28221: LD_ADDR_VAR 0 60
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28309: LD_ADDR_VAR 0 61
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: LD_INT 1
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: LD_INT 1
28382: NEG
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28397: LD_ADDR_VAR 0 62
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28485: LD_ADDR_VAR 0 63
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28573: LD_ADDR_VAR 0 64
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: LD_INT 0
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: ST_TO_ADDR
// end ; 1 :
28661: GO 34558
28663: LD_INT 1
28665: DOUBLE
28666: EQUAL
28667: IFTRUE 28671
28669: GO 31294
28671: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28672: LD_ADDR_VAR 0 11
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: LD_INT 3
28683: NEG
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: LD_INT 3
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: LD_INT 2
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28716: LD_ADDR_VAR 0 12
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: LD_INT 1
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 3
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 3
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: LIST
28756: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28757: LD_ADDR_VAR 0 13
28761: PUSH
28762: LD_INT 3
28764: PUSH
28765: LD_INT 2
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 3
28774: PUSH
28775: LD_INT 3
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: PUSH
28785: LD_INT 3
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28797: LD_ADDR_VAR 0 14
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: LD_INT 3
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: LD_INT 3
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: LD_INT 2
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28838: LD_ADDR_VAR 0 15
28842: PUSH
28843: LD_INT 2
28845: NEG
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 3
28856: NEG
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 3
28867: NEG
28868: PUSH
28869: LD_INT 1
28871: NEG
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: LIST
28881: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28882: LD_ADDR_VAR 0 16
28886: PUSH
28887: LD_INT 2
28889: NEG
28890: PUSH
28891: LD_INT 3
28893: NEG
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 3
28901: NEG
28902: PUSH
28903: LD_INT 2
28905: NEG
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 3
28913: NEG
28914: PUSH
28915: LD_INT 3
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: LIST
28927: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28928: LD_ADDR_VAR 0 17
28932: PUSH
28933: LD_INT 1
28935: NEG
28936: PUSH
28937: LD_INT 3
28939: NEG
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: LD_INT 3
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: LIST
28971: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28972: LD_ADDR_VAR 0 18
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 3
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 3
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: LIST
29012: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29013: LD_ADDR_VAR 0 19
29017: PUSH
29018: LD_INT 3
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 3
29030: PUSH
29031: LD_INT 3
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 2
29040: PUSH
29041: LD_INT 3
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29053: LD_ADDR_VAR 0 20
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: LD_INT 3
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: LD_INT 3
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: LIST
29093: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29094: LD_ADDR_VAR 0 21
29098: PUSH
29099: LD_INT 2
29101: NEG
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 3
29112: NEG
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 3
29123: NEG
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29138: LD_ADDR_VAR 0 22
29142: PUSH
29143: LD_INT 2
29145: NEG
29146: PUSH
29147: LD_INT 3
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 3
29157: NEG
29158: PUSH
29159: LD_INT 2
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 3
29169: NEG
29170: PUSH
29171: LD_INT 3
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29184: LD_ADDR_VAR 0 23
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: LD_INT 3
29194: NEG
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: LD_INT 4
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: LD_INT 3
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29228: LD_ADDR_VAR 0 24
29232: PUSH
29233: LD_INT 3
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 3
29245: PUSH
29246: LD_INT 1
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 4
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29269: LD_ADDR_VAR 0 25
29273: PUSH
29274: LD_INT 3
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 4
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: LD_INT 4
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: LIST
29308: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29309: LD_ADDR_VAR 0 26
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: LD_INT 3
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: LD_INT 4
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: LD_INT 3
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29350: LD_ADDR_VAR 0 27
29354: PUSH
29355: LD_INT 3
29357: NEG
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 3
29368: NEG
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 4
29379: NEG
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29394: LD_ADDR_VAR 0 28
29398: PUSH
29399: LD_INT 3
29401: NEG
29402: PUSH
29403: LD_INT 3
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 3
29413: NEG
29414: PUSH
29415: LD_INT 4
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 4
29425: NEG
29426: PUSH
29427: LD_INT 3
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29440: LD_ADDR_VAR 0 29
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: LD_INT 3
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 0
29459: PUSH
29460: LD_INT 3
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 4
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 0
29493: PUSH
29494: LD_INT 4
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: LD_INT 3
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: LD_INT 5
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 0
29527: PUSH
29528: LD_INT 5
29530: NEG
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: LD_INT 4
29541: NEG
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 1
29549: NEG
29550: PUSH
29551: LD_INT 6
29553: NEG
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 6
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 5
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29595: LD_ADDR_VAR 0 30
29599: PUSH
29600: LD_INT 2
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 1
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 4
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 4
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 4
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 5
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 5
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 5
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 6
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 6
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29738: LD_ADDR_VAR 0 31
29742: PUSH
29743: LD_INT 3
29745: PUSH
29746: LD_INT 2
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: LD_INT 3
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 4
29775: PUSH
29776: LD_INT 3
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 4
29785: PUSH
29786: LD_INT 4
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 3
29795: PUSH
29796: LD_INT 4
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 5
29805: PUSH
29806: LD_INT 4
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 5
29815: PUSH
29816: LD_INT 5
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 4
29825: PUSH
29826: LD_INT 5
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 6
29835: PUSH
29836: LD_INT 5
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 6
29845: PUSH
29846: LD_INT 6
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 5
29855: PUSH
29856: LD_INT 6
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29877: LD_ADDR_VAR 0 32
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: LD_INT 3
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: LD_INT 3
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: NEG
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: LD_INT 4
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: LD_INT 4
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: LD_INT 3
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: LD_INT 5
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 5
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: LD_INT 4
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 6
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: LD_INT 6
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: LD_INT 5
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30020: LD_ADDR_VAR 0 33
30024: PUSH
30025: LD_INT 2
30027: NEG
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 3
30038: NEG
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 3
30049: NEG
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 3
30061: NEG
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 4
30072: NEG
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 4
30083: NEG
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 4
30095: NEG
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 5
30106: NEG
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 5
30117: NEG
30118: PUSH
30119: LD_INT 1
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 5
30129: NEG
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 6
30140: NEG
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 6
30151: NEG
30152: PUSH
30153: LD_INT 1
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30175: LD_ADDR_VAR 0 34
30179: PUSH
30180: LD_INT 2
30182: NEG
30183: PUSH
30184: LD_INT 3
30186: NEG
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 3
30194: NEG
30195: PUSH
30196: LD_INT 2
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: LD_INT 3
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: LD_INT 4
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 4
30230: NEG
30231: PUSH
30232: LD_INT 3
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 4
30242: NEG
30243: PUSH
30244: LD_INT 4
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 4
30254: NEG
30255: PUSH
30256: LD_INT 5
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 5
30266: NEG
30267: PUSH
30268: LD_INT 4
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 5
30278: NEG
30279: PUSH
30280: LD_INT 5
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 5
30290: NEG
30291: PUSH
30292: LD_INT 6
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 6
30302: NEG
30303: PUSH
30304: LD_INT 5
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 6
30314: NEG
30315: PUSH
30316: LD_INT 6
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30338: LD_ADDR_VAR 0 41
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: LD_INT 2
30348: NEG
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: LD_INT 3
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: LD_INT 2
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: LIST
30381: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30382: LD_ADDR_VAR 0 42
30386: PUSH
30387: LD_INT 2
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 3
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30423: LD_ADDR_VAR 0 43
30427: PUSH
30428: LD_INT 2
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 3
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: LD_INT 3
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: LIST
30462: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30463: LD_ADDR_VAR 0 44
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 2
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: NEG
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30504: LD_ADDR_VAR 0 45
30508: PUSH
30509: LD_INT 2
30511: NEG
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: LD_INT 1
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: LIST
30547: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30548: LD_ADDR_VAR 0 46
30552: PUSH
30553: LD_INT 2
30555: NEG
30556: PUSH
30557: LD_INT 2
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 2
30567: NEG
30568: PUSH
30569: LD_INT 3
30571: NEG
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: NEG
30580: PUSH
30581: LD_INT 2
30583: NEG
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: LIST
30593: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30594: LD_ADDR_VAR 0 47
30598: PUSH
30599: LD_INT 2
30601: NEG
30602: PUSH
30603: LD_INT 3
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 1
30613: NEG
30614: PUSH
30615: LD_INT 3
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30627: LD_ADDR_VAR 0 48
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: LD_INT 2
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: LD_INT 1
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30658: LD_ADDR_VAR 0 49
30662: PUSH
30663: LD_INT 3
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 3
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30687: LD_ADDR_VAR 0 50
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: LD_INT 3
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: LD_INT 3
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30716: LD_ADDR_VAR 0 51
30720: PUSH
30721: LD_INT 1
30723: NEG
30724: PUSH
30725: LD_INT 2
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 2
30734: NEG
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30747: LD_ADDR_VAR 0 52
30751: PUSH
30752: LD_INT 3
30754: NEG
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 3
30766: NEG
30767: PUSH
30768: LD_INT 2
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30780: LD_ADDR_VAR 0 53
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: LD_INT 3
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: LD_INT 3
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: LD_INT 2
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30824: LD_ADDR_VAR 0 54
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 3
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 3
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30865: LD_ADDR_VAR 0 55
30869: PUSH
30870: LD_INT 3
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 3
30882: PUSH
30883: LD_INT 3
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: LD_INT 3
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30905: LD_ADDR_VAR 0 56
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: LD_INT 3
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: LD_INT 3
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: LIST
30945: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30946: LD_ADDR_VAR 0 57
30950: PUSH
30951: LD_INT 2
30953: NEG
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 3
30975: NEG
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: LIST
30989: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30990: LD_ADDR_VAR 0 58
30994: PUSH
30995: LD_INT 2
30997: NEG
30998: PUSH
30999: LD_INT 3
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: NEG
31010: PUSH
31011: LD_INT 2
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 3
31021: NEG
31022: PUSH
31023: LD_INT 3
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31036: LD_ADDR_VAR 0 59
31040: PUSH
31041: LD_INT 1
31043: NEG
31044: PUSH
31045: LD_INT 2
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: LD_INT 2
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: LIST
31079: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31080: LD_ADDR_VAR 0 60
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 2
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31121: LD_ADDR_VAR 0 61
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: LIST
31160: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31161: LD_ADDR_VAR 0 62
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31202: LD_ADDR_VAR 0 63
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: LD_INT 0
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31246: LD_ADDR_VAR 0 64
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: LIST
31291: ST_TO_ADDR
// end ; 2 :
31292: GO 34558
31294: LD_INT 2
31296: DOUBLE
31297: EQUAL
31298: IFTRUE 31302
31300: GO 34557
31302: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31303: LD_ADDR_VAR 0 29
31307: PUSH
31308: LD_INT 4
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 4
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 5
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 5
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 4
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 3
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 3
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 3
31382: PUSH
31383: LD_INT 2
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 5
31393: PUSH
31394: LD_INT 2
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 3
31403: PUSH
31404: LD_INT 3
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 3
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 4
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 4
31433: PUSH
31434: LD_INT 4
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: LD_INT 4
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: LD_INT 3
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 4
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: LD_INT 4
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: LD_INT 4
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: LD_INT 4
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: LD_INT 5
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: LD_INT 5
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: LD_INT 4
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: LD_INT 3
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 2
31565: PUSH
31566: LD_INT 5
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 3
31586: NEG
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 3
31597: NEG
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: NEG
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 2
31620: NEG
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 3
31631: NEG
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 4
31642: NEG
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 4
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 4
31665: NEG
31666: PUSH
31667: LD_INT 2
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 4
31688: NEG
31689: PUSH
31690: LD_INT 4
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 4
31700: NEG
31701: PUSH
31702: LD_INT 5
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 3
31712: NEG
31713: PUSH
31714: LD_INT 4
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 3
31724: NEG
31725: PUSH
31726: LD_INT 3
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 4
31736: NEG
31737: PUSH
31738: LD_INT 3
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 5
31748: NEG
31749: PUSH
31750: LD_INT 4
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 5
31760: NEG
31761: PUSH
31762: LD_INT 5
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 3
31772: NEG
31773: PUSH
31774: LD_INT 5
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 5
31784: NEG
31785: PUSH
31786: LD_INT 3
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31841: LD_ADDR_VAR 0 30
31845: PUSH
31846: LD_INT 4
31848: PUSH
31849: LD_INT 4
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 4
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 5
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 5
31878: PUSH
31879: LD_INT 5
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 4
31888: PUSH
31889: LD_INT 5
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 3
31898: PUSH
31899: LD_INT 4
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 3
31908: PUSH
31909: LD_INT 3
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 5
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: PUSH
31929: LD_INT 5
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: LD_INT 3
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: LD_INT 3
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: LD_INT 4
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: LD_INT 4
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: LD_INT 2
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: LD_INT 4
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 4
32031: NEG
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 4
32042: NEG
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 3
32054: NEG
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 3
32065: NEG
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 4
32076: NEG
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 5
32087: NEG
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 5
32098: NEG
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 5
32110: NEG
32111: PUSH
32112: LD_INT 2
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 3
32133: NEG
32134: PUSH
32135: LD_INT 3
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 3
32145: NEG
32146: PUSH
32147: LD_INT 4
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: LD_INT 3
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: LD_INT 2
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 3
32181: NEG
32182: PUSH
32183: LD_INT 2
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 4
32193: NEG
32194: PUSH
32195: LD_INT 3
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 4
32205: NEG
32206: PUSH
32207: LD_INT 4
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: NEG
32218: PUSH
32219: LD_INT 4
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 4
32229: NEG
32230: PUSH
32231: LD_INT 2
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 4
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: LD_INT 5
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: LD_INT 4
32266: NEG
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: LD_INT 3
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: LD_INT 3
32288: NEG
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: LD_INT 4
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: LD_INT 5
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: LD_INT 3
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: NEG
32332: PUSH
32333: LD_INT 5
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32388: LD_ADDR_VAR 0 31
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: LD_INT 4
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: LD_INT 3
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: LD_INT 4
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: LD_INT 5
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: LD_INT 5
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: LD_INT 4
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 1
32456: NEG
32457: PUSH
32458: LD_INT 3
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 5
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 2
32477: NEG
32478: PUSH
32479: LD_INT 3
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 3
32488: NEG
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: NEG
32500: PUSH
32501: LD_INT 1
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 3
32533: NEG
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 4
32544: NEG
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 4
32555: NEG
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 4
32567: NEG
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: NEG
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 4
32590: NEG
32591: PUSH
32592: LD_INT 4
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 4
32602: NEG
32603: PUSH
32604: LD_INT 5
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 3
32614: NEG
32615: PUSH
32616: LD_INT 4
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 3
32626: NEG
32627: PUSH
32628: LD_INT 3
32630: NEG
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 4
32638: NEG
32639: PUSH
32640: LD_INT 3
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 5
32650: NEG
32651: PUSH
32652: LD_INT 4
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 5
32662: NEG
32663: PUSH
32664: LD_INT 5
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 3
32674: NEG
32675: PUSH
32676: LD_INT 5
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 5
32686: NEG
32687: PUSH
32688: LD_INT 3
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 3
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 4
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 3
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: LD_INT 2
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: LD_INT 3
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 4
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 2
32788: NEG
32789: PUSH
32790: LD_INT 4
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 4
32800: PUSH
32801: LD_INT 0
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 4
32810: PUSH
32811: LD_INT 1
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 5
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 5
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 4
32841: PUSH
32842: LD_INT 1
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 3
32872: PUSH
32873: LD_INT 2
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 5
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32938: LD_ADDR_VAR 0 32
32942: PUSH
32943: LD_INT 4
32945: NEG
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: NEG
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 3
32968: NEG
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 3
32979: NEG
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 4
32990: NEG
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 5
33001: NEG
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 5
33012: NEG
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 5
33024: NEG
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 3
33036: NEG
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 3
33047: NEG
33048: PUSH
33049: LD_INT 3
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 3
33059: NEG
33060: PUSH
33061: LD_INT 4
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 2
33071: NEG
33072: PUSH
33073: LD_INT 3
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: LD_INT 2
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 3
33095: NEG
33096: PUSH
33097: LD_INT 2
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 4
33107: NEG
33108: PUSH
33109: LD_INT 3
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 4
33119: NEG
33120: PUSH
33121: LD_INT 4
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 2
33131: NEG
33132: PUSH
33133: LD_INT 4
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 4
33143: NEG
33144: PUSH
33145: LD_INT 2
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: LD_INT 4
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 5
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: LD_INT 4
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 3
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: LD_INT 3
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 4
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: LD_INT 5
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 2
33234: PUSH
33235: LD_INT 3
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 2
33245: NEG
33246: PUSH
33247: LD_INT 5
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 3
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 4
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 4
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 2
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: LD_INT 2
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 4
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 4
33350: PUSH
33351: LD_INT 4
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 4
33360: PUSH
33361: LD_INT 3
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 5
33370: PUSH
33371: LD_INT 4
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 5
33380: PUSH
33381: LD_INT 5
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 4
33390: PUSH
33391: LD_INT 5
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 3
33400: PUSH
33401: LD_INT 4
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 3
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 5
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 3
33430: PUSH
33431: LD_INT 5
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33485: LD_ADDR_VAR 0 33
33489: PUSH
33490: LD_INT 4
33492: NEG
33493: PUSH
33494: LD_INT 4
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 4
33504: NEG
33505: PUSH
33506: LD_INT 5
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 3
33516: NEG
33517: PUSH
33518: LD_INT 4
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 3
33528: NEG
33529: PUSH
33530: LD_INT 3
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 4
33540: NEG
33541: PUSH
33542: LD_INT 3
33544: NEG
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 5
33552: NEG
33553: PUSH
33554: LD_INT 4
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 5
33564: NEG
33565: PUSH
33566: LD_INT 5
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 3
33576: NEG
33577: PUSH
33578: LD_INT 5
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 5
33588: NEG
33589: PUSH
33590: LD_INT 3
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 3
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 4
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: LD_INT 3
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: LD_INT 2
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: LD_INT 2
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: LD_INT 3
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 4
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 2
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: LD_INT 4
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 4
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 4
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 5
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 5
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 4
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 3
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 3
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 3
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 5
33785: PUSH
33786: LD_INT 2
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 3
33795: PUSH
33796: LD_INT 3
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 3
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 4
33815: PUSH
33816: LD_INT 3
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 4
33825: PUSH
33826: LD_INT 4
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 3
33835: PUSH
33836: LD_INT 4
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: LD_INT 3
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 4
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: LD_INT 4
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: LD_INT 4
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 3
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: LD_INT 4
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: LD_INT 5
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 5
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: LD_INT 4
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: LD_INT 3
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: LD_INT 5
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 2
33967: NEG
33968: PUSH
33969: LD_INT 3
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34023: LD_ADDR_VAR 0 34
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: LD_INT 4
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 5
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 4
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: LD_INT 3
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 3
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 4
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 1
34097: NEG
34098: PUSH
34099: LD_INT 5
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 3
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 2
34120: NEG
34121: PUSH
34122: LD_INT 5
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: LD_INT 1
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 4
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 4
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 3
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: LD_INT 2
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 4
34215: PUSH
34216: LD_INT 2
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 4
34225: PUSH
34226: LD_INT 4
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 4
34235: PUSH
34236: LD_INT 3
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 5
34245: PUSH
34246: LD_INT 4
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 5
34255: PUSH
34256: LD_INT 5
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 4
34265: PUSH
34266: LD_INT 5
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 3
34275: PUSH
34276: LD_INT 4
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 3
34285: PUSH
34286: LD_INT 3
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 5
34295: PUSH
34296: LD_INT 3
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 3
34305: PUSH
34306: LD_INT 5
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: LD_INT 3
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: LD_INT 3
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: LD_INT 4
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: LD_INT 4
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: LD_INT 3
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 1
34376: NEG
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: LD_INT 4
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 2
34397: NEG
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 4
34408: NEG
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 4
34419: NEG
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 3
34431: NEG
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 3
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 4
34453: NEG
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 5
34464: NEG
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 5
34475: NEG
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 5
34487: NEG
34488: PUSH
34489: LD_INT 2
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 3
34499: NEG
34500: PUSH
34501: LD_INT 2
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: ST_TO_ADDR
// end ; end ;
34555: GO 34558
34557: POP
// case btype of b_depot , b_warehouse :
34558: LD_VAR 0 1
34562: PUSH
34563: LD_INT 0
34565: DOUBLE
34566: EQUAL
34567: IFTRUE 34577
34569: LD_INT 1
34571: DOUBLE
34572: EQUAL
34573: IFTRUE 34577
34575: GO 34778
34577: POP
// case nation of nation_american :
34578: LD_VAR 0 5
34582: PUSH
34583: LD_INT 1
34585: DOUBLE
34586: EQUAL
34587: IFTRUE 34591
34589: GO 34647
34591: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34592: LD_ADDR_VAR 0 9
34596: PUSH
34597: LD_VAR 0 11
34601: PUSH
34602: LD_VAR 0 12
34606: PUSH
34607: LD_VAR 0 13
34611: PUSH
34612: LD_VAR 0 14
34616: PUSH
34617: LD_VAR 0 15
34621: PUSH
34622: LD_VAR 0 16
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: PUSH
34635: LD_VAR 0 4
34639: PUSH
34640: LD_INT 1
34642: PLUS
34643: ARRAY
34644: ST_TO_ADDR
34645: GO 34776
34647: LD_INT 2
34649: DOUBLE
34650: EQUAL
34651: IFTRUE 34655
34653: GO 34711
34655: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34656: LD_ADDR_VAR 0 9
34660: PUSH
34661: LD_VAR 0 17
34665: PUSH
34666: LD_VAR 0 18
34670: PUSH
34671: LD_VAR 0 19
34675: PUSH
34676: LD_VAR 0 20
34680: PUSH
34681: LD_VAR 0 21
34685: PUSH
34686: LD_VAR 0 22
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: PUSH
34699: LD_VAR 0 4
34703: PUSH
34704: LD_INT 1
34706: PLUS
34707: ARRAY
34708: ST_TO_ADDR
34709: GO 34776
34711: LD_INT 3
34713: DOUBLE
34714: EQUAL
34715: IFTRUE 34719
34717: GO 34775
34719: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34720: LD_ADDR_VAR 0 9
34724: PUSH
34725: LD_VAR 0 23
34729: PUSH
34730: LD_VAR 0 24
34734: PUSH
34735: LD_VAR 0 25
34739: PUSH
34740: LD_VAR 0 26
34744: PUSH
34745: LD_VAR 0 27
34749: PUSH
34750: LD_VAR 0 28
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: PUSH
34763: LD_VAR 0 4
34767: PUSH
34768: LD_INT 1
34770: PLUS
34771: ARRAY
34772: ST_TO_ADDR
34773: GO 34776
34775: POP
34776: GO 35331
34778: LD_INT 2
34780: DOUBLE
34781: EQUAL
34782: IFTRUE 34792
34784: LD_INT 3
34786: DOUBLE
34787: EQUAL
34788: IFTRUE 34792
34790: GO 34848
34792: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34793: LD_ADDR_VAR 0 9
34797: PUSH
34798: LD_VAR 0 29
34802: PUSH
34803: LD_VAR 0 30
34807: PUSH
34808: LD_VAR 0 31
34812: PUSH
34813: LD_VAR 0 32
34817: PUSH
34818: LD_VAR 0 33
34822: PUSH
34823: LD_VAR 0 34
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: PUSH
34836: LD_VAR 0 4
34840: PUSH
34841: LD_INT 1
34843: PLUS
34844: ARRAY
34845: ST_TO_ADDR
34846: GO 35331
34848: LD_INT 16
34850: DOUBLE
34851: EQUAL
34852: IFTRUE 34910
34854: LD_INT 17
34856: DOUBLE
34857: EQUAL
34858: IFTRUE 34910
34860: LD_INT 18
34862: DOUBLE
34863: EQUAL
34864: IFTRUE 34910
34866: LD_INT 19
34868: DOUBLE
34869: EQUAL
34870: IFTRUE 34910
34872: LD_INT 22
34874: DOUBLE
34875: EQUAL
34876: IFTRUE 34910
34878: LD_INT 20
34880: DOUBLE
34881: EQUAL
34882: IFTRUE 34910
34884: LD_INT 21
34886: DOUBLE
34887: EQUAL
34888: IFTRUE 34910
34890: LD_INT 23
34892: DOUBLE
34893: EQUAL
34894: IFTRUE 34910
34896: LD_INT 24
34898: DOUBLE
34899: EQUAL
34900: IFTRUE 34910
34902: LD_INT 25
34904: DOUBLE
34905: EQUAL
34906: IFTRUE 34910
34908: GO 34966
34910: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34911: LD_ADDR_VAR 0 9
34915: PUSH
34916: LD_VAR 0 35
34920: PUSH
34921: LD_VAR 0 36
34925: PUSH
34926: LD_VAR 0 37
34930: PUSH
34931: LD_VAR 0 38
34935: PUSH
34936: LD_VAR 0 39
34940: PUSH
34941: LD_VAR 0 40
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: PUSH
34954: LD_VAR 0 4
34958: PUSH
34959: LD_INT 1
34961: PLUS
34962: ARRAY
34963: ST_TO_ADDR
34964: GO 35331
34966: LD_INT 6
34968: DOUBLE
34969: EQUAL
34970: IFTRUE 35022
34972: LD_INT 7
34974: DOUBLE
34975: EQUAL
34976: IFTRUE 35022
34978: LD_INT 8
34980: DOUBLE
34981: EQUAL
34982: IFTRUE 35022
34984: LD_INT 13
34986: DOUBLE
34987: EQUAL
34988: IFTRUE 35022
34990: LD_INT 12
34992: DOUBLE
34993: EQUAL
34994: IFTRUE 35022
34996: LD_INT 15
34998: DOUBLE
34999: EQUAL
35000: IFTRUE 35022
35002: LD_INT 11
35004: DOUBLE
35005: EQUAL
35006: IFTRUE 35022
35008: LD_INT 14
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35022
35014: LD_INT 10
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35022
35020: GO 35078
35022: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35023: LD_ADDR_VAR 0 9
35027: PUSH
35028: LD_VAR 0 41
35032: PUSH
35033: LD_VAR 0 42
35037: PUSH
35038: LD_VAR 0 43
35042: PUSH
35043: LD_VAR 0 44
35047: PUSH
35048: LD_VAR 0 45
35052: PUSH
35053: LD_VAR 0 46
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: PUSH
35066: LD_VAR 0 4
35070: PUSH
35071: LD_INT 1
35073: PLUS
35074: ARRAY
35075: ST_TO_ADDR
35076: GO 35331
35078: LD_INT 36
35080: DOUBLE
35081: EQUAL
35082: IFTRUE 35086
35084: GO 35142
35086: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35087: LD_ADDR_VAR 0 9
35091: PUSH
35092: LD_VAR 0 47
35096: PUSH
35097: LD_VAR 0 48
35101: PUSH
35102: LD_VAR 0 49
35106: PUSH
35107: LD_VAR 0 50
35111: PUSH
35112: LD_VAR 0 51
35116: PUSH
35117: LD_VAR 0 52
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: PUSH
35130: LD_VAR 0 4
35134: PUSH
35135: LD_INT 1
35137: PLUS
35138: ARRAY
35139: ST_TO_ADDR
35140: GO 35331
35142: LD_INT 4
35144: DOUBLE
35145: EQUAL
35146: IFTRUE 35168
35148: LD_INT 5
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35168
35154: LD_INT 34
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35168
35160: LD_INT 37
35162: DOUBLE
35163: EQUAL
35164: IFTRUE 35168
35166: GO 35224
35168: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35169: LD_ADDR_VAR 0 9
35173: PUSH
35174: LD_VAR 0 53
35178: PUSH
35179: LD_VAR 0 54
35183: PUSH
35184: LD_VAR 0 55
35188: PUSH
35189: LD_VAR 0 56
35193: PUSH
35194: LD_VAR 0 57
35198: PUSH
35199: LD_VAR 0 58
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: PUSH
35212: LD_VAR 0 4
35216: PUSH
35217: LD_INT 1
35219: PLUS
35220: ARRAY
35221: ST_TO_ADDR
35222: GO 35331
35224: LD_INT 31
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35274
35230: LD_INT 32
35232: DOUBLE
35233: EQUAL
35234: IFTRUE 35274
35236: LD_INT 33
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35274
35242: LD_INT 27
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35274
35248: LD_INT 26
35250: DOUBLE
35251: EQUAL
35252: IFTRUE 35274
35254: LD_INT 28
35256: DOUBLE
35257: EQUAL
35258: IFTRUE 35274
35260: LD_INT 29
35262: DOUBLE
35263: EQUAL
35264: IFTRUE 35274
35266: LD_INT 30
35268: DOUBLE
35269: EQUAL
35270: IFTRUE 35274
35272: GO 35330
35274: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35275: LD_ADDR_VAR 0 9
35279: PUSH
35280: LD_VAR 0 59
35284: PUSH
35285: LD_VAR 0 60
35289: PUSH
35290: LD_VAR 0 61
35294: PUSH
35295: LD_VAR 0 62
35299: PUSH
35300: LD_VAR 0 63
35304: PUSH
35305: LD_VAR 0 64
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: PUSH
35318: LD_VAR 0 4
35322: PUSH
35323: LD_INT 1
35325: PLUS
35326: ARRAY
35327: ST_TO_ADDR
35328: GO 35331
35330: POP
// temp_list2 = [ ] ;
35331: LD_ADDR_VAR 0 10
35335: PUSH
35336: EMPTY
35337: ST_TO_ADDR
// for i in temp_list do
35338: LD_ADDR_VAR 0 8
35342: PUSH
35343: LD_VAR 0 9
35347: PUSH
35348: FOR_IN
35349: IFFALSE 35401
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35351: LD_ADDR_VAR 0 10
35355: PUSH
35356: LD_VAR 0 10
35360: PUSH
35361: LD_VAR 0 8
35365: PUSH
35366: LD_INT 1
35368: ARRAY
35369: PUSH
35370: LD_VAR 0 2
35374: PLUS
35375: PUSH
35376: LD_VAR 0 8
35380: PUSH
35381: LD_INT 2
35383: ARRAY
35384: PUSH
35385: LD_VAR 0 3
35389: PLUS
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: EMPTY
35396: LIST
35397: ADD
35398: ST_TO_ADDR
35399: GO 35348
35401: POP
35402: POP
// result = temp_list2 ;
35403: LD_ADDR_VAR 0 7
35407: PUSH
35408: LD_VAR 0 10
35412: ST_TO_ADDR
// end ;
35413: LD_VAR 0 7
35417: RET
// export function EnemyInRange ( unit , dist ) ; begin
35418: LD_INT 0
35420: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35421: LD_ADDR_VAR 0 3
35425: PUSH
35426: LD_VAR 0 1
35430: PPUSH
35431: CALL_OW 255
35435: PPUSH
35436: LD_VAR 0 1
35440: PPUSH
35441: CALL_OW 250
35445: PPUSH
35446: LD_VAR 0 1
35450: PPUSH
35451: CALL_OW 251
35455: PPUSH
35456: LD_VAR 0 2
35460: PPUSH
35461: CALL 9202 0 4
35465: PUSH
35466: LD_INT 4
35468: ARRAY
35469: ST_TO_ADDR
// end ;
35470: LD_VAR 0 3
35474: RET
// export function PlayerSeeMe ( unit ) ; begin
35475: LD_INT 0
35477: PPUSH
// result := See ( your_side , unit ) ;
35478: LD_ADDR_VAR 0 2
35482: PUSH
35483: LD_OWVAR 2
35487: PPUSH
35488: LD_VAR 0 1
35492: PPUSH
35493: CALL_OW 292
35497: ST_TO_ADDR
// end ;
35498: LD_VAR 0 2
35502: RET
// export function ReverseDir ( unit ) ; begin
35503: LD_INT 0
35505: PPUSH
// if not unit then
35506: LD_VAR 0 1
35510: NOT
35511: IFFALSE 35515
// exit ;
35513: GO 35538
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35515: LD_ADDR_VAR 0 2
35519: PUSH
35520: LD_VAR 0 1
35524: PPUSH
35525: CALL_OW 254
35529: PUSH
35530: LD_INT 3
35532: PLUS
35533: PUSH
35534: LD_INT 6
35536: MOD
35537: ST_TO_ADDR
// end ;
35538: LD_VAR 0 2
35542: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
35543: LD_INT 0
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
// if not hexes then
35550: LD_VAR 0 2
35554: NOT
35555: IFFALSE 35559
// exit ;
35557: GO 35707
// dist := 9999 ;
35559: LD_ADDR_VAR 0 5
35563: PUSH
35564: LD_INT 9999
35566: ST_TO_ADDR
// for i = 1 to hexes do
35567: LD_ADDR_VAR 0 4
35571: PUSH
35572: DOUBLE
35573: LD_INT 1
35575: DEC
35576: ST_TO_ADDR
35577: LD_VAR 0 2
35581: PUSH
35582: FOR_TO
35583: IFFALSE 35695
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
35585: LD_VAR 0 1
35589: PPUSH
35590: LD_VAR 0 2
35594: PUSH
35595: LD_VAR 0 4
35599: ARRAY
35600: PUSH
35601: LD_INT 1
35603: ARRAY
35604: PPUSH
35605: LD_VAR 0 2
35609: PUSH
35610: LD_VAR 0 4
35614: ARRAY
35615: PUSH
35616: LD_INT 2
35618: ARRAY
35619: PPUSH
35620: CALL_OW 297
35624: PUSH
35625: LD_VAR 0 5
35629: LESS
35630: IFFALSE 35693
// begin hex := hexes [ i ] ;
35632: LD_ADDR_VAR 0 7
35636: PUSH
35637: LD_VAR 0 2
35641: PUSH
35642: LD_VAR 0 4
35646: ARRAY
35647: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35648: LD_ADDR_VAR 0 5
35652: PUSH
35653: LD_VAR 0 1
35657: PPUSH
35658: LD_VAR 0 2
35662: PUSH
35663: LD_VAR 0 4
35667: ARRAY
35668: PUSH
35669: LD_INT 1
35671: ARRAY
35672: PPUSH
35673: LD_VAR 0 2
35677: PUSH
35678: LD_VAR 0 4
35682: ARRAY
35683: PUSH
35684: LD_INT 2
35686: ARRAY
35687: PPUSH
35688: CALL_OW 297
35692: ST_TO_ADDR
// end ; end ;
35693: GO 35582
35695: POP
35696: POP
// result := hex ;
35697: LD_ADDR_VAR 0 3
35701: PUSH
35702: LD_VAR 0 7
35706: ST_TO_ADDR
// end ;
35707: LD_VAR 0 3
35711: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35712: LD_INT 0
35714: PPUSH
35715: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35716: LD_VAR 0 1
35720: NOT
35721: PUSH
35722: LD_VAR 0 1
35726: PUSH
35727: LD_INT 21
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 23
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PPUSH
35751: CALL_OW 69
35755: IN
35756: NOT
35757: OR
35758: IFFALSE 35762
// exit ;
35760: GO 35809
// for i = 1 to 3 do
35762: LD_ADDR_VAR 0 3
35766: PUSH
35767: DOUBLE
35768: LD_INT 1
35770: DEC
35771: ST_TO_ADDR
35772: LD_INT 3
35774: PUSH
35775: FOR_TO
35776: IFFALSE 35807
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35778: LD_VAR 0 1
35782: PPUSH
35783: CALL_OW 250
35787: PPUSH
35788: LD_VAR 0 1
35792: PPUSH
35793: CALL_OW 251
35797: PPUSH
35798: LD_INT 1
35800: PPUSH
35801: CALL_OW 453
35805: GO 35775
35807: POP
35808: POP
// end ;
35809: LD_VAR 0 2
35813: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35814: LD_INT 0
35816: PPUSH
35817: PPUSH
35818: PPUSH
35819: PPUSH
35820: PPUSH
35821: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35822: LD_VAR 0 1
35826: NOT
35827: PUSH
35828: LD_VAR 0 2
35832: NOT
35833: OR
35834: PUSH
35835: LD_VAR 0 1
35839: PPUSH
35840: CALL_OW 314
35844: OR
35845: IFFALSE 35849
// exit ;
35847: GO 36290
// x := GetX ( enemy_unit ) ;
35849: LD_ADDR_VAR 0 7
35853: PUSH
35854: LD_VAR 0 2
35858: PPUSH
35859: CALL_OW 250
35863: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35864: LD_ADDR_VAR 0 8
35868: PUSH
35869: LD_VAR 0 2
35873: PPUSH
35874: CALL_OW 251
35878: ST_TO_ADDR
// if not x or not y then
35879: LD_VAR 0 7
35883: NOT
35884: PUSH
35885: LD_VAR 0 8
35889: NOT
35890: OR
35891: IFFALSE 35895
// exit ;
35893: GO 36290
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35895: LD_ADDR_VAR 0 6
35899: PUSH
35900: LD_VAR 0 7
35904: PPUSH
35905: LD_INT 0
35907: PPUSH
35908: LD_INT 4
35910: PPUSH
35911: CALL_OW 272
35915: PUSH
35916: LD_VAR 0 8
35920: PPUSH
35921: LD_INT 0
35923: PPUSH
35924: LD_INT 4
35926: PPUSH
35927: CALL_OW 273
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_VAR 0 7
35940: PPUSH
35941: LD_INT 1
35943: PPUSH
35944: LD_INT 4
35946: PPUSH
35947: CALL_OW 272
35951: PUSH
35952: LD_VAR 0 8
35956: PPUSH
35957: LD_INT 1
35959: PPUSH
35960: LD_INT 4
35962: PPUSH
35963: CALL_OW 273
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_VAR 0 7
35976: PPUSH
35977: LD_INT 2
35979: PPUSH
35980: LD_INT 4
35982: PPUSH
35983: CALL_OW 272
35987: PUSH
35988: LD_VAR 0 8
35992: PPUSH
35993: LD_INT 2
35995: PPUSH
35996: LD_INT 4
35998: PPUSH
35999: CALL_OW 273
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_VAR 0 7
36012: PPUSH
36013: LD_INT 3
36015: PPUSH
36016: LD_INT 4
36018: PPUSH
36019: CALL_OW 272
36023: PUSH
36024: LD_VAR 0 8
36028: PPUSH
36029: LD_INT 3
36031: PPUSH
36032: LD_INT 4
36034: PPUSH
36035: CALL_OW 273
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_VAR 0 7
36048: PPUSH
36049: LD_INT 4
36051: PPUSH
36052: LD_INT 4
36054: PPUSH
36055: CALL_OW 272
36059: PUSH
36060: LD_VAR 0 8
36064: PPUSH
36065: LD_INT 4
36067: PPUSH
36068: LD_INT 4
36070: PPUSH
36071: CALL_OW 273
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_VAR 0 7
36084: PPUSH
36085: LD_INT 5
36087: PPUSH
36088: LD_INT 4
36090: PPUSH
36091: CALL_OW 272
36095: PUSH
36096: LD_VAR 0 8
36100: PPUSH
36101: LD_INT 5
36103: PPUSH
36104: LD_INT 4
36106: PPUSH
36107: CALL_OW 273
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: ST_TO_ADDR
// for i = tmp downto 1 do
36124: LD_ADDR_VAR 0 4
36128: PUSH
36129: DOUBLE
36130: LD_VAR 0 6
36134: INC
36135: ST_TO_ADDR
36136: LD_INT 1
36138: PUSH
36139: FOR_DOWNTO
36140: IFFALSE 36241
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36142: LD_VAR 0 6
36146: PUSH
36147: LD_VAR 0 4
36151: ARRAY
36152: PUSH
36153: LD_INT 1
36155: ARRAY
36156: PPUSH
36157: LD_VAR 0 6
36161: PUSH
36162: LD_VAR 0 4
36166: ARRAY
36167: PUSH
36168: LD_INT 2
36170: ARRAY
36171: PPUSH
36172: CALL_OW 488
36176: NOT
36177: PUSH
36178: LD_VAR 0 6
36182: PUSH
36183: LD_VAR 0 4
36187: ARRAY
36188: PUSH
36189: LD_INT 1
36191: ARRAY
36192: PPUSH
36193: LD_VAR 0 6
36197: PUSH
36198: LD_VAR 0 4
36202: ARRAY
36203: PUSH
36204: LD_INT 2
36206: ARRAY
36207: PPUSH
36208: CALL_OW 428
36212: PUSH
36213: LD_INT 0
36215: NONEQUAL
36216: OR
36217: IFFALSE 36239
// tmp := Delete ( tmp , i ) ;
36219: LD_ADDR_VAR 0 6
36223: PUSH
36224: LD_VAR 0 6
36228: PPUSH
36229: LD_VAR 0 4
36233: PPUSH
36234: CALL_OW 3
36238: ST_TO_ADDR
36239: GO 36139
36241: POP
36242: POP
// j := GetClosestHex ( unit , tmp ) ;
36243: LD_ADDR_VAR 0 5
36247: PUSH
36248: LD_VAR 0 1
36252: PPUSH
36253: LD_VAR 0 6
36257: PPUSH
36258: CALL 35543 0 2
36262: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36263: LD_VAR 0 1
36267: PPUSH
36268: LD_VAR 0 5
36272: PUSH
36273: LD_INT 1
36275: ARRAY
36276: PPUSH
36277: LD_VAR 0 5
36281: PUSH
36282: LD_INT 2
36284: ARRAY
36285: PPUSH
36286: CALL_OW 111
// end ;
36290: LD_VAR 0 3
36294: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36295: LD_INT 0
36297: PPUSH
36298: PPUSH
36299: PPUSH
// uc_side = 0 ;
36300: LD_ADDR_OWVAR 20
36304: PUSH
36305: LD_INT 0
36307: ST_TO_ADDR
// uc_nation = 0 ;
36308: LD_ADDR_OWVAR 21
36312: PUSH
36313: LD_INT 0
36315: ST_TO_ADDR
// InitHc_All ( ) ;
36316: CALL_OW 584
// InitVc ;
36320: CALL_OW 20
// if mastodonts then
36324: LD_VAR 0 6
36328: IFFALSE 36395
// for i = 1 to mastodonts do
36330: LD_ADDR_VAR 0 11
36334: PUSH
36335: DOUBLE
36336: LD_INT 1
36338: DEC
36339: ST_TO_ADDR
36340: LD_VAR 0 6
36344: PUSH
36345: FOR_TO
36346: IFFALSE 36393
// begin vc_chassis := 31 ;
36348: LD_ADDR_OWVAR 37
36352: PUSH
36353: LD_INT 31
36355: ST_TO_ADDR
// vc_control := control_rider ;
36356: LD_ADDR_OWVAR 38
36360: PUSH
36361: LD_INT 4
36363: ST_TO_ADDR
// animal := CreateVehicle ;
36364: LD_ADDR_VAR 0 12
36368: PUSH
36369: CALL_OW 45
36373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36374: LD_VAR 0 12
36378: PPUSH
36379: LD_VAR 0 8
36383: PPUSH
36384: LD_INT 0
36386: PPUSH
36387: CALL 38583 0 3
// end ;
36391: GO 36345
36393: POP
36394: POP
// if horses then
36395: LD_VAR 0 5
36399: IFFALSE 36466
// for i = 1 to horses do
36401: LD_ADDR_VAR 0 11
36405: PUSH
36406: DOUBLE
36407: LD_INT 1
36409: DEC
36410: ST_TO_ADDR
36411: LD_VAR 0 5
36415: PUSH
36416: FOR_TO
36417: IFFALSE 36464
// begin hc_class := 21 ;
36419: LD_ADDR_OWVAR 28
36423: PUSH
36424: LD_INT 21
36426: ST_TO_ADDR
// hc_gallery :=  ;
36427: LD_ADDR_OWVAR 33
36431: PUSH
36432: LD_STRING 
36434: ST_TO_ADDR
// animal := CreateHuman ;
36435: LD_ADDR_VAR 0 12
36439: PUSH
36440: CALL_OW 44
36444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36445: LD_VAR 0 12
36449: PPUSH
36450: LD_VAR 0 8
36454: PPUSH
36455: LD_INT 0
36457: PPUSH
36458: CALL 38583 0 3
// end ;
36462: GO 36416
36464: POP
36465: POP
// if birds then
36466: LD_VAR 0 1
36470: IFFALSE 36537
// for i = 1 to birds do
36472: LD_ADDR_VAR 0 11
36476: PUSH
36477: DOUBLE
36478: LD_INT 1
36480: DEC
36481: ST_TO_ADDR
36482: LD_VAR 0 1
36486: PUSH
36487: FOR_TO
36488: IFFALSE 36535
// begin hc_class = 18 ;
36490: LD_ADDR_OWVAR 28
36494: PUSH
36495: LD_INT 18
36497: ST_TO_ADDR
// hc_gallery =  ;
36498: LD_ADDR_OWVAR 33
36502: PUSH
36503: LD_STRING 
36505: ST_TO_ADDR
// animal := CreateHuman ;
36506: LD_ADDR_VAR 0 12
36510: PUSH
36511: CALL_OW 44
36515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36516: LD_VAR 0 12
36520: PPUSH
36521: LD_VAR 0 8
36525: PPUSH
36526: LD_INT 0
36528: PPUSH
36529: CALL 38583 0 3
// end ;
36533: GO 36487
36535: POP
36536: POP
// if tigers then
36537: LD_VAR 0 2
36541: IFFALSE 36625
// for i = 1 to tigers do
36543: LD_ADDR_VAR 0 11
36547: PUSH
36548: DOUBLE
36549: LD_INT 1
36551: DEC
36552: ST_TO_ADDR
36553: LD_VAR 0 2
36557: PUSH
36558: FOR_TO
36559: IFFALSE 36623
// begin hc_class = class_tiger ;
36561: LD_ADDR_OWVAR 28
36565: PUSH
36566: LD_INT 14
36568: ST_TO_ADDR
// hc_gallery =  ;
36569: LD_ADDR_OWVAR 33
36573: PUSH
36574: LD_STRING 
36576: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36577: LD_ADDR_OWVAR 35
36581: PUSH
36582: LD_INT 7
36584: NEG
36585: PPUSH
36586: LD_INT 7
36588: PPUSH
36589: CALL_OW 12
36593: ST_TO_ADDR
// animal := CreateHuman ;
36594: LD_ADDR_VAR 0 12
36598: PUSH
36599: CALL_OW 44
36603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36604: LD_VAR 0 12
36608: PPUSH
36609: LD_VAR 0 8
36613: PPUSH
36614: LD_INT 0
36616: PPUSH
36617: CALL 38583 0 3
// end ;
36621: GO 36558
36623: POP
36624: POP
// if apemans then
36625: LD_VAR 0 3
36629: IFFALSE 36752
// for i = 1 to apemans do
36631: LD_ADDR_VAR 0 11
36635: PUSH
36636: DOUBLE
36637: LD_INT 1
36639: DEC
36640: ST_TO_ADDR
36641: LD_VAR 0 3
36645: PUSH
36646: FOR_TO
36647: IFFALSE 36750
// begin hc_class = class_apeman ;
36649: LD_ADDR_OWVAR 28
36653: PUSH
36654: LD_INT 12
36656: ST_TO_ADDR
// hc_gallery =  ;
36657: LD_ADDR_OWVAR 33
36661: PUSH
36662: LD_STRING 
36664: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
36665: LD_ADDR_OWVAR 35
36669: PUSH
36670: LD_INT 5
36672: NEG
36673: PPUSH
36674: LD_INT 5
36676: PPUSH
36677: CALL_OW 12
36681: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36682: LD_ADDR_OWVAR 31
36686: PUSH
36687: LD_INT 1
36689: PPUSH
36690: LD_INT 3
36692: PPUSH
36693: CALL_OW 12
36697: PUSH
36698: LD_INT 1
36700: PPUSH
36701: LD_INT 3
36703: PPUSH
36704: CALL_OW 12
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: ST_TO_ADDR
// animal := CreateHuman ;
36721: LD_ADDR_VAR 0 12
36725: PUSH
36726: CALL_OW 44
36730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36731: LD_VAR 0 12
36735: PPUSH
36736: LD_VAR 0 8
36740: PPUSH
36741: LD_INT 0
36743: PPUSH
36744: CALL 38583 0 3
// end ;
36748: GO 36646
36750: POP
36751: POP
// if enchidnas then
36752: LD_VAR 0 4
36756: IFFALSE 36823
// for i = 1 to enchidnas do
36758: LD_ADDR_VAR 0 11
36762: PUSH
36763: DOUBLE
36764: LD_INT 1
36766: DEC
36767: ST_TO_ADDR
36768: LD_VAR 0 4
36772: PUSH
36773: FOR_TO
36774: IFFALSE 36821
// begin hc_class = 13 ;
36776: LD_ADDR_OWVAR 28
36780: PUSH
36781: LD_INT 13
36783: ST_TO_ADDR
// hc_gallery =  ;
36784: LD_ADDR_OWVAR 33
36788: PUSH
36789: LD_STRING 
36791: ST_TO_ADDR
// animal := CreateHuman ;
36792: LD_ADDR_VAR 0 12
36796: PUSH
36797: CALL_OW 44
36801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36802: LD_VAR 0 12
36806: PPUSH
36807: LD_VAR 0 8
36811: PPUSH
36812: LD_INT 0
36814: PPUSH
36815: CALL 38583 0 3
// end ;
36819: GO 36773
36821: POP
36822: POP
// if fishes then
36823: LD_VAR 0 7
36827: IFFALSE 36894
// for i = 1 to fishes do
36829: LD_ADDR_VAR 0 11
36833: PUSH
36834: DOUBLE
36835: LD_INT 1
36837: DEC
36838: ST_TO_ADDR
36839: LD_VAR 0 7
36843: PUSH
36844: FOR_TO
36845: IFFALSE 36892
// begin hc_class = 20 ;
36847: LD_ADDR_OWVAR 28
36851: PUSH
36852: LD_INT 20
36854: ST_TO_ADDR
// hc_gallery =  ;
36855: LD_ADDR_OWVAR 33
36859: PUSH
36860: LD_STRING 
36862: ST_TO_ADDR
// animal := CreateHuman ;
36863: LD_ADDR_VAR 0 12
36867: PUSH
36868: CALL_OW 44
36872: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36873: LD_VAR 0 12
36877: PPUSH
36878: LD_VAR 0 9
36882: PPUSH
36883: LD_INT 0
36885: PPUSH
36886: CALL 38583 0 3
// end ;
36890: GO 36844
36892: POP
36893: POP
// end ;
36894: LD_VAR 0 10
36898: RET
// export function WantHeal ( sci , unit ) ; begin
36899: LD_INT 0
36901: PPUSH
// if GetTaskList ( sci ) > 0 then
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL_OW 437
36911: PUSH
36912: LD_INT 0
36914: GREATER
36915: IFFALSE 36985
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36917: LD_VAR 0 1
36921: PPUSH
36922: CALL_OW 437
36926: PUSH
36927: LD_INT 1
36929: ARRAY
36930: PUSH
36931: LD_INT 1
36933: ARRAY
36934: PUSH
36935: LD_STRING l
36937: EQUAL
36938: PUSH
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 437
36948: PUSH
36949: LD_INT 1
36951: ARRAY
36952: PUSH
36953: LD_INT 4
36955: ARRAY
36956: PUSH
36957: LD_VAR 0 2
36961: EQUAL
36962: AND
36963: IFFALSE 36975
// result := true else
36965: LD_ADDR_VAR 0 3
36969: PUSH
36970: LD_INT 1
36972: ST_TO_ADDR
36973: GO 36983
// result := false ;
36975: LD_ADDR_VAR 0 3
36979: PUSH
36980: LD_INT 0
36982: ST_TO_ADDR
// end else
36983: GO 36993
// result := false ;
36985: LD_ADDR_VAR 0 3
36989: PUSH
36990: LD_INT 0
36992: ST_TO_ADDR
// end ;
36993: LD_VAR 0 3
36997: RET
// export function HealTarget ( sci ) ; begin
36998: LD_INT 0
37000: PPUSH
// if not sci then
37001: LD_VAR 0 1
37005: NOT
37006: IFFALSE 37010
// exit ;
37008: GO 37075
// result := 0 ;
37010: LD_ADDR_VAR 0 2
37014: PUSH
37015: LD_INT 0
37017: ST_TO_ADDR
// if GetTaskList ( sci ) then
37018: LD_VAR 0 1
37022: PPUSH
37023: CALL_OW 437
37027: IFFALSE 37075
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37029: LD_VAR 0 1
37033: PPUSH
37034: CALL_OW 437
37038: PUSH
37039: LD_INT 1
37041: ARRAY
37042: PUSH
37043: LD_INT 1
37045: ARRAY
37046: PUSH
37047: LD_STRING l
37049: EQUAL
37050: IFFALSE 37075
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37052: LD_ADDR_VAR 0 2
37056: PUSH
37057: LD_VAR 0 1
37061: PPUSH
37062: CALL_OW 437
37066: PUSH
37067: LD_INT 1
37069: ARRAY
37070: PUSH
37071: LD_INT 4
37073: ARRAY
37074: ST_TO_ADDR
// end ;
37075: LD_VAR 0 2
37079: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37080: LD_INT 0
37082: PPUSH
37083: PPUSH
37084: PPUSH
37085: PPUSH
// if not base_units then
37086: LD_VAR 0 1
37090: NOT
37091: IFFALSE 37095
// exit ;
37093: GO 37182
// result := false ;
37095: LD_ADDR_VAR 0 2
37099: PUSH
37100: LD_INT 0
37102: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37103: LD_ADDR_VAR 0 5
37107: PUSH
37108: LD_VAR 0 1
37112: PPUSH
37113: LD_INT 21
37115: PUSH
37116: LD_INT 3
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PPUSH
37123: CALL_OW 72
37127: ST_TO_ADDR
// if not tmp then
37128: LD_VAR 0 5
37132: NOT
37133: IFFALSE 37137
// exit ;
37135: GO 37182
// for i in tmp do
37137: LD_ADDR_VAR 0 3
37141: PUSH
37142: LD_VAR 0 5
37146: PUSH
37147: FOR_IN
37148: IFFALSE 37180
// begin result := EnemyInRange ( i , 22 ) ;
37150: LD_ADDR_VAR 0 2
37154: PUSH
37155: LD_VAR 0 3
37159: PPUSH
37160: LD_INT 22
37162: PPUSH
37163: CALL 35418 0 2
37167: ST_TO_ADDR
// if result then
37168: LD_VAR 0 2
37172: IFFALSE 37178
// exit ;
37174: POP
37175: POP
37176: GO 37182
// end ;
37178: GO 37147
37180: POP
37181: POP
// end ;
37182: LD_VAR 0 2
37186: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
37187: LD_INT 0
37189: PPUSH
37190: PPUSH
// if not units then
37191: LD_VAR 0 1
37195: NOT
37196: IFFALSE 37200
// exit ;
37198: GO 37270
// result := [ ] ;
37200: LD_ADDR_VAR 0 3
37204: PUSH
37205: EMPTY
37206: ST_TO_ADDR
// for i in units do
37207: LD_ADDR_VAR 0 4
37211: PUSH
37212: LD_VAR 0 1
37216: PUSH
37217: FOR_IN
37218: IFFALSE 37268
// if GetTag ( i ) = tag then
37220: LD_VAR 0 4
37224: PPUSH
37225: CALL_OW 110
37229: PUSH
37230: LD_VAR 0 2
37234: EQUAL
37235: IFFALSE 37266
// result := Insert ( result , result + 1 , i ) ;
37237: LD_ADDR_VAR 0 3
37241: PUSH
37242: LD_VAR 0 3
37246: PPUSH
37247: LD_VAR 0 3
37251: PUSH
37252: LD_INT 1
37254: PLUS
37255: PPUSH
37256: LD_VAR 0 4
37260: PPUSH
37261: CALL_OW 2
37265: ST_TO_ADDR
37266: GO 37217
37268: POP
37269: POP
// end ;
37270: LD_VAR 0 3
37274: RET
// export function IsDriver ( un ) ; begin
37275: LD_INT 0
37277: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37278: LD_ADDR_VAR 0 2
37282: PUSH
37283: LD_VAR 0 1
37287: PUSH
37288: LD_INT 55
37290: PUSH
37291: EMPTY
37292: LIST
37293: PPUSH
37294: CALL_OW 69
37298: IN
37299: ST_TO_ADDR
// end ;
37300: LD_VAR 0 2
37304: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37305: LD_INT 0
37307: PPUSH
37308: PPUSH
// list := [ ] ;
37309: LD_ADDR_VAR 0 5
37313: PUSH
37314: EMPTY
37315: ST_TO_ADDR
// case d of 0 :
37316: LD_VAR 0 3
37320: PUSH
37321: LD_INT 0
37323: DOUBLE
37324: EQUAL
37325: IFTRUE 37329
37327: GO 37462
37329: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37330: LD_ADDR_VAR 0 5
37334: PUSH
37335: LD_VAR 0 1
37339: PUSH
37340: LD_INT 4
37342: MINUS
37343: PUSH
37344: LD_VAR 0 2
37348: PUSH
37349: LD_INT 4
37351: MINUS
37352: PUSH
37353: LD_INT 2
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: PUSH
37361: LD_VAR 0 1
37365: PUSH
37366: LD_INT 3
37368: MINUS
37369: PUSH
37370: LD_VAR 0 2
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: PUSH
37383: LD_VAR 0 1
37387: PUSH
37388: LD_INT 4
37390: PLUS
37391: PUSH
37392: LD_VAR 0 2
37396: PUSH
37397: LD_INT 4
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: PUSH
37405: LD_VAR 0 1
37409: PUSH
37410: LD_INT 3
37412: PLUS
37413: PUSH
37414: LD_VAR 0 2
37418: PUSH
37419: LD_INT 3
37421: PLUS
37422: PUSH
37423: LD_INT 5
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: PUSH
37431: LD_VAR 0 1
37435: PUSH
37436: LD_VAR 0 2
37440: PUSH
37441: LD_INT 4
37443: PLUS
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: LIST
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: ST_TO_ADDR
// end ; 1 :
37460: GO 38160
37462: LD_INT 1
37464: DOUBLE
37465: EQUAL
37466: IFTRUE 37470
37468: GO 37603
37470: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37471: LD_ADDR_VAR 0 5
37475: PUSH
37476: LD_VAR 0 1
37480: PUSH
37481: LD_VAR 0 2
37485: PUSH
37486: LD_INT 4
37488: MINUS
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: LIST
37497: PUSH
37498: LD_VAR 0 1
37502: PUSH
37503: LD_INT 3
37505: MINUS
37506: PUSH
37507: LD_VAR 0 2
37511: PUSH
37512: LD_INT 3
37514: MINUS
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: LIST
37523: PUSH
37524: LD_VAR 0 1
37528: PUSH
37529: LD_INT 4
37531: MINUS
37532: PUSH
37533: LD_VAR 0 2
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: PUSH
37546: LD_VAR 0 1
37550: PUSH
37551: LD_VAR 0 2
37555: PUSH
37556: LD_INT 3
37558: PLUS
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: PUSH
37568: LD_VAR 0 1
37572: PUSH
37573: LD_INT 4
37575: PLUS
37576: PUSH
37577: LD_VAR 0 2
37581: PUSH
37582: LD_INT 4
37584: PLUS
37585: PUSH
37586: LD_INT 5
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: ST_TO_ADDR
// end ; 2 :
37601: GO 38160
37603: LD_INT 2
37605: DOUBLE
37606: EQUAL
37607: IFTRUE 37611
37609: GO 37740
37611: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37612: LD_ADDR_VAR 0 5
37616: PUSH
37617: LD_VAR 0 1
37621: PUSH
37622: LD_VAR 0 2
37626: PUSH
37627: LD_INT 3
37629: MINUS
37630: PUSH
37631: LD_INT 3
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: PUSH
37639: LD_VAR 0 1
37643: PUSH
37644: LD_INT 4
37646: PLUS
37647: PUSH
37648: LD_VAR 0 2
37652: PUSH
37653: LD_INT 4
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: PUSH
37661: LD_VAR 0 1
37665: PUSH
37666: LD_VAR 0 2
37670: PUSH
37671: LD_INT 4
37673: PLUS
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: LIST
37682: PUSH
37683: LD_VAR 0 1
37687: PUSH
37688: LD_INT 3
37690: MINUS
37691: PUSH
37692: LD_VAR 0 2
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: PUSH
37705: LD_VAR 0 1
37709: PUSH
37710: LD_INT 4
37712: MINUS
37713: PUSH
37714: LD_VAR 0 2
37718: PUSH
37719: LD_INT 4
37721: MINUS
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: ST_TO_ADDR
// end ; 3 :
37738: GO 38160
37740: LD_INT 3
37742: DOUBLE
37743: EQUAL
37744: IFTRUE 37748
37746: GO 37881
37748: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37749: LD_ADDR_VAR 0 5
37753: PUSH
37754: LD_VAR 0 1
37758: PUSH
37759: LD_INT 3
37761: PLUS
37762: PUSH
37763: LD_VAR 0 2
37767: PUSH
37768: LD_INT 4
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: PUSH
37776: LD_VAR 0 1
37780: PUSH
37781: LD_INT 4
37783: PLUS
37784: PUSH
37785: LD_VAR 0 2
37789: PUSH
37790: LD_INT 4
37792: PLUS
37793: PUSH
37794: LD_INT 5
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: PUSH
37802: LD_VAR 0 1
37806: PUSH
37807: LD_INT 4
37809: MINUS
37810: PUSH
37811: LD_VAR 0 2
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: PUSH
37824: LD_VAR 0 1
37828: PUSH
37829: LD_VAR 0 2
37833: PUSH
37834: LD_INT 4
37836: MINUS
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: PUSH
37846: LD_VAR 0 1
37850: PUSH
37851: LD_INT 3
37853: MINUS
37854: PUSH
37855: LD_VAR 0 2
37859: PUSH
37860: LD_INT 3
37862: MINUS
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: ST_TO_ADDR
// end ; 4 :
37879: GO 38160
37881: LD_INT 4
37883: DOUBLE
37884: EQUAL
37885: IFTRUE 37889
37887: GO 38022
37889: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37890: LD_ADDR_VAR 0 5
37894: PUSH
37895: LD_VAR 0 1
37899: PUSH
37900: LD_VAR 0 2
37904: PUSH
37905: LD_INT 4
37907: PLUS
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: PUSH
37917: LD_VAR 0 1
37921: PUSH
37922: LD_INT 3
37924: PLUS
37925: PUSH
37926: LD_VAR 0 2
37930: PUSH
37931: LD_INT 3
37933: PLUS
37934: PUSH
37935: LD_INT 5
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: LIST
37942: PUSH
37943: LD_VAR 0 1
37947: PUSH
37948: LD_INT 4
37950: PLUS
37951: PUSH
37952: LD_VAR 0 2
37956: PUSH
37957: LD_INT 4
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: PUSH
37965: LD_VAR 0 1
37969: PUSH
37970: LD_VAR 0 2
37974: PUSH
37975: LD_INT 3
37977: MINUS
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: LIST
37986: PUSH
37987: LD_VAR 0 1
37991: PUSH
37992: LD_INT 4
37994: MINUS
37995: PUSH
37996: LD_VAR 0 2
38000: PUSH
38001: LD_INT 4
38003: MINUS
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: LIST
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: ST_TO_ADDR
// end ; 5 :
38020: GO 38160
38022: LD_INT 5
38024: DOUBLE
38025: EQUAL
38026: IFTRUE 38030
38028: GO 38159
38030: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38031: LD_ADDR_VAR 0 5
38035: PUSH
38036: LD_VAR 0 1
38040: PUSH
38041: LD_INT 4
38043: MINUS
38044: PUSH
38045: LD_VAR 0 2
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: PUSH
38058: LD_VAR 0 1
38062: PUSH
38063: LD_VAR 0 2
38067: PUSH
38068: LD_INT 4
38070: MINUS
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: LIST
38079: PUSH
38080: LD_VAR 0 1
38084: PUSH
38085: LD_INT 4
38087: PLUS
38088: PUSH
38089: LD_VAR 0 2
38093: PUSH
38094: LD_INT 4
38096: PLUS
38097: PUSH
38098: LD_INT 5
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: LIST
38105: PUSH
38106: LD_VAR 0 1
38110: PUSH
38111: LD_INT 3
38113: PLUS
38114: PUSH
38115: LD_VAR 0 2
38119: PUSH
38120: LD_INT 4
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: PUSH
38128: LD_VAR 0 1
38132: PUSH
38133: LD_VAR 0 2
38137: PUSH
38138: LD_INT 3
38140: PLUS
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: LIST
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: ST_TO_ADDR
// end ; end ;
38157: GO 38160
38159: POP
// result := list ;
38160: LD_ADDR_VAR 0 4
38164: PUSH
38165: LD_VAR 0 5
38169: ST_TO_ADDR
// end ;
38170: LD_VAR 0 4
38174: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38175: LD_INT 0
38177: PPUSH
38178: PPUSH
38179: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38180: LD_VAR 0 1
38184: NOT
38185: PUSH
38186: LD_VAR 0 2
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: LD_INT 3
38199: PUSH
38200: LD_INT 4
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: IN
38209: NOT
38210: OR
38211: IFFALSE 38215
// exit ;
38213: GO 38307
// tmp := [ ] ;
38215: LD_ADDR_VAR 0 5
38219: PUSH
38220: EMPTY
38221: ST_TO_ADDR
// for i in units do
38222: LD_ADDR_VAR 0 4
38226: PUSH
38227: LD_VAR 0 1
38231: PUSH
38232: FOR_IN
38233: IFFALSE 38276
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
38235: LD_ADDR_VAR 0 5
38239: PUSH
38240: LD_VAR 0 5
38244: PPUSH
38245: LD_VAR 0 5
38249: PUSH
38250: LD_INT 1
38252: PLUS
38253: PPUSH
38254: LD_VAR 0 4
38258: PPUSH
38259: LD_VAR 0 2
38263: PPUSH
38264: CALL_OW 259
38268: PPUSH
38269: CALL_OW 2
38273: ST_TO_ADDR
38274: GO 38232
38276: POP
38277: POP
// if not tmp then
38278: LD_VAR 0 5
38282: NOT
38283: IFFALSE 38287
// exit ;
38285: GO 38307
// result := SortListByListDesc ( units , tmp ) ;
38287: LD_ADDR_VAR 0 3
38291: PUSH
38292: LD_VAR 0 1
38296: PPUSH
38297: LD_VAR 0 5
38301: PPUSH
38302: CALL_OW 77
38306: ST_TO_ADDR
// end ;
38307: LD_VAR 0 3
38311: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38312: LD_INT 0
38314: PPUSH
38315: PPUSH
38316: PPUSH
// result := false ;
38317: LD_ADDR_VAR 0 3
38321: PUSH
38322: LD_INT 0
38324: ST_TO_ADDR
// x := GetX ( building ) ;
38325: LD_ADDR_VAR 0 4
38329: PUSH
38330: LD_VAR 0 2
38334: PPUSH
38335: CALL_OW 250
38339: ST_TO_ADDR
// y := GetY ( building ) ;
38340: LD_ADDR_VAR 0 5
38344: PUSH
38345: LD_VAR 0 2
38349: PPUSH
38350: CALL_OW 251
38354: ST_TO_ADDR
// if not building or not x or not y then
38355: LD_VAR 0 2
38359: NOT
38360: PUSH
38361: LD_VAR 0 4
38365: NOT
38366: OR
38367: PUSH
38368: LD_VAR 0 5
38372: NOT
38373: OR
38374: IFFALSE 38378
// exit ;
38376: GO 38470
// if GetTaskList ( unit ) then
38378: LD_VAR 0 1
38382: PPUSH
38383: CALL_OW 437
38387: IFFALSE 38470
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38389: LD_STRING e
38391: PUSH
38392: LD_VAR 0 1
38396: PPUSH
38397: CALL_OW 437
38401: PUSH
38402: LD_INT 1
38404: ARRAY
38405: PUSH
38406: LD_INT 1
38408: ARRAY
38409: EQUAL
38410: PUSH
38411: LD_VAR 0 4
38415: PUSH
38416: LD_VAR 0 1
38420: PPUSH
38421: CALL_OW 437
38425: PUSH
38426: LD_INT 1
38428: ARRAY
38429: PUSH
38430: LD_INT 2
38432: ARRAY
38433: EQUAL
38434: AND
38435: PUSH
38436: LD_VAR 0 5
38440: PUSH
38441: LD_VAR 0 1
38445: PPUSH
38446: CALL_OW 437
38450: PUSH
38451: LD_INT 1
38453: ARRAY
38454: PUSH
38455: LD_INT 3
38457: ARRAY
38458: EQUAL
38459: AND
38460: IFFALSE 38470
// result := true end ;
38462: LD_ADDR_VAR 0 3
38466: PUSH
38467: LD_INT 1
38469: ST_TO_ADDR
// end ;
38470: LD_VAR 0 3
38474: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38475: LD_INT 0
38477: PPUSH
// result := false ;
38478: LD_ADDR_VAR 0 4
38482: PUSH
38483: LD_INT 0
38485: ST_TO_ADDR
// if GetTaskList ( unit ) then
38486: LD_VAR 0 1
38490: PPUSH
38491: CALL_OW 437
38495: IFFALSE 38578
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38497: LD_STRING M
38499: PUSH
38500: LD_VAR 0 1
38504: PPUSH
38505: CALL_OW 437
38509: PUSH
38510: LD_INT 1
38512: ARRAY
38513: PUSH
38514: LD_INT 1
38516: ARRAY
38517: EQUAL
38518: PUSH
38519: LD_VAR 0 2
38523: PUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: CALL_OW 437
38533: PUSH
38534: LD_INT 1
38536: ARRAY
38537: PUSH
38538: LD_INT 2
38540: ARRAY
38541: EQUAL
38542: AND
38543: PUSH
38544: LD_VAR 0 3
38548: PUSH
38549: LD_VAR 0 1
38553: PPUSH
38554: CALL_OW 437
38558: PUSH
38559: LD_INT 1
38561: ARRAY
38562: PUSH
38563: LD_INT 3
38565: ARRAY
38566: EQUAL
38567: AND
38568: IFFALSE 38578
// result := true ;
38570: LD_ADDR_VAR 0 4
38574: PUSH
38575: LD_INT 1
38577: ST_TO_ADDR
// end ; end ;
38578: LD_VAR 0 4
38582: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38583: LD_INT 0
38585: PPUSH
38586: PPUSH
38587: PPUSH
38588: PPUSH
// if not unit or not area then
38589: LD_VAR 0 1
38593: NOT
38594: PUSH
38595: LD_VAR 0 2
38599: NOT
38600: OR
38601: IFFALSE 38605
// exit ;
38603: GO 38769
// tmp := AreaToList ( area , i ) ;
38605: LD_ADDR_VAR 0 6
38609: PUSH
38610: LD_VAR 0 2
38614: PPUSH
38615: LD_VAR 0 5
38619: PPUSH
38620: CALL_OW 517
38624: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38625: LD_ADDR_VAR 0 5
38629: PUSH
38630: DOUBLE
38631: LD_INT 1
38633: DEC
38634: ST_TO_ADDR
38635: LD_VAR 0 6
38639: PUSH
38640: LD_INT 1
38642: ARRAY
38643: PUSH
38644: FOR_TO
38645: IFFALSE 38767
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38647: LD_ADDR_VAR 0 7
38651: PUSH
38652: LD_VAR 0 6
38656: PUSH
38657: LD_INT 1
38659: ARRAY
38660: PUSH
38661: LD_VAR 0 5
38665: ARRAY
38666: PUSH
38667: LD_VAR 0 6
38671: PUSH
38672: LD_INT 2
38674: ARRAY
38675: PUSH
38676: LD_VAR 0 5
38680: ARRAY
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
38686: LD_VAR 0 7
38690: PUSH
38691: LD_INT 1
38693: ARRAY
38694: PPUSH
38695: LD_VAR 0 7
38699: PUSH
38700: LD_INT 2
38702: ARRAY
38703: PPUSH
38704: CALL_OW 428
38708: PUSH
38709: LD_INT 0
38711: EQUAL
38712: IFFALSE 38765
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38714: LD_VAR 0 1
38718: PPUSH
38719: LD_VAR 0 7
38723: PUSH
38724: LD_INT 1
38726: ARRAY
38727: PPUSH
38728: LD_VAR 0 7
38732: PUSH
38733: LD_INT 2
38735: ARRAY
38736: PPUSH
38737: LD_VAR 0 3
38741: PPUSH
38742: CALL_OW 48
// result := IsPlaced ( unit ) ;
38746: LD_ADDR_VAR 0 4
38750: PUSH
38751: LD_VAR 0 1
38755: PPUSH
38756: CALL_OW 305
38760: ST_TO_ADDR
// exit ;
38761: POP
38762: POP
38763: GO 38769
// end ; end ;
38765: GO 38644
38767: POP
38768: POP
// end ;
38769: LD_VAR 0 4
38773: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38774: LD_INT 0
38776: PPUSH
38777: PPUSH
38778: PPUSH
// if not side or side > 8 then
38779: LD_VAR 0 1
38783: NOT
38784: PUSH
38785: LD_VAR 0 1
38789: PUSH
38790: LD_INT 8
38792: GREATER
38793: OR
38794: IFFALSE 38798
// exit ;
38796: GO 38985
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38798: LD_ADDR_VAR 0 4
38802: PUSH
38803: LD_INT 22
38805: PUSH
38806: LD_VAR 0 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 21
38817: PUSH
38818: LD_INT 3
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PPUSH
38829: CALL_OW 69
38833: ST_TO_ADDR
// if not tmp then
38834: LD_VAR 0 4
38838: NOT
38839: IFFALSE 38843
// exit ;
38841: GO 38985
// enable_addtolog := true ;
38843: LD_ADDR_OWVAR 81
38847: PUSH
38848: LD_INT 1
38850: ST_TO_ADDR
// AddToLog ( [ ) ;
38851: LD_STRING [
38853: PPUSH
38854: CALL_OW 561
// for i in tmp do
38858: LD_ADDR_VAR 0 3
38862: PUSH
38863: LD_VAR 0 4
38867: PUSH
38868: FOR_IN
38869: IFFALSE 38976
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38871: LD_STRING [
38873: PUSH
38874: LD_VAR 0 3
38878: PPUSH
38879: CALL_OW 266
38883: STR
38884: PUSH
38885: LD_STRING , 
38887: STR
38888: PUSH
38889: LD_VAR 0 3
38893: PPUSH
38894: CALL_OW 250
38898: STR
38899: PUSH
38900: LD_STRING , 
38902: STR
38903: PUSH
38904: LD_VAR 0 3
38908: PPUSH
38909: CALL_OW 251
38913: STR
38914: PUSH
38915: LD_STRING , 
38917: STR
38918: PUSH
38919: LD_VAR 0 3
38923: PPUSH
38924: CALL_OW 254
38928: STR
38929: PUSH
38930: LD_STRING , 
38932: STR
38933: PUSH
38934: LD_VAR 0 3
38938: PPUSH
38939: LD_INT 1
38941: PPUSH
38942: CALL_OW 268
38946: STR
38947: PUSH
38948: LD_STRING , 
38950: STR
38951: PUSH
38952: LD_VAR 0 3
38956: PPUSH
38957: LD_INT 2
38959: PPUSH
38960: CALL_OW 268
38964: STR
38965: PUSH
38966: LD_STRING ],
38968: STR
38969: PPUSH
38970: CALL_OW 561
// end ;
38974: GO 38868
38976: POP
38977: POP
// AddToLog ( ]; ) ;
38978: LD_STRING ];
38980: PPUSH
38981: CALL_OW 561
// end ;
38985: LD_VAR 0 2
38989: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38990: LD_INT 0
38992: PPUSH
38993: PPUSH
38994: PPUSH
38995: PPUSH
38996: PPUSH
// if not area or not rate or not max then
38997: LD_VAR 0 1
39001: NOT
39002: PUSH
39003: LD_VAR 0 2
39007: NOT
39008: OR
39009: PUSH
39010: LD_VAR 0 4
39014: NOT
39015: OR
39016: IFFALSE 39020
// exit ;
39018: GO 39212
// while 1 do
39020: LD_INT 1
39022: IFFALSE 39212
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39024: LD_ADDR_VAR 0 9
39028: PUSH
39029: LD_VAR 0 1
39033: PPUSH
39034: LD_INT 1
39036: PPUSH
39037: CALL_OW 287
39041: PUSH
39042: LD_INT 10
39044: MUL
39045: ST_TO_ADDR
// r := rate / 10 ;
39046: LD_ADDR_VAR 0 7
39050: PUSH
39051: LD_VAR 0 2
39055: PUSH
39056: LD_INT 10
39058: DIVREAL
39059: ST_TO_ADDR
// time := 1 1$00 ;
39060: LD_ADDR_VAR 0 8
39064: PUSH
39065: LD_INT 2100
39067: ST_TO_ADDR
// if amount < min then
39068: LD_VAR 0 9
39072: PUSH
39073: LD_VAR 0 3
39077: LESS
39078: IFFALSE 39096
// r := r * 2 else
39080: LD_ADDR_VAR 0 7
39084: PUSH
39085: LD_VAR 0 7
39089: PUSH
39090: LD_INT 2
39092: MUL
39093: ST_TO_ADDR
39094: GO 39122
// if amount > max then
39096: LD_VAR 0 9
39100: PUSH
39101: LD_VAR 0 4
39105: GREATER
39106: IFFALSE 39122
// r := r / 2 ;
39108: LD_ADDR_VAR 0 7
39112: PUSH
39113: LD_VAR 0 7
39117: PUSH
39118: LD_INT 2
39120: DIVREAL
39121: ST_TO_ADDR
// time := time / r ;
39122: LD_ADDR_VAR 0 8
39126: PUSH
39127: LD_VAR 0 8
39131: PUSH
39132: LD_VAR 0 7
39136: DIVREAL
39137: ST_TO_ADDR
// if time < 0 then
39138: LD_VAR 0 8
39142: PUSH
39143: LD_INT 0
39145: LESS
39146: IFFALSE 39163
// time := time * - 1 ;
39148: LD_ADDR_VAR 0 8
39152: PUSH
39153: LD_VAR 0 8
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: MUL
39162: ST_TO_ADDR
// wait ( time ) ;
39163: LD_VAR 0 8
39167: PPUSH
39168: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
39172: LD_INT 35
39174: PPUSH
39175: LD_INT 875
39177: PPUSH
39178: CALL_OW 12
39182: PPUSH
39183: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39187: LD_INT 1
39189: PPUSH
39190: LD_INT 5
39192: PPUSH
39193: CALL_OW 12
39197: PPUSH
39198: LD_VAR 0 1
39202: PPUSH
39203: LD_INT 1
39205: PPUSH
39206: CALL_OW 55
// end ;
39210: GO 39020
// end ;
39212: LD_VAR 0 5
39216: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39217: LD_INT 0
39219: PPUSH
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
// if not turrets or not factories then
39227: LD_VAR 0 1
39231: NOT
39232: PUSH
39233: LD_VAR 0 2
39237: NOT
39238: OR
39239: IFFALSE 39243
// exit ;
39241: GO 39550
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39243: LD_ADDR_VAR 0 10
39247: PUSH
39248: LD_INT 5
39250: PUSH
39251: LD_INT 6
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: LD_INT 4
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 3
39270: PUSH
39271: LD_INT 5
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 24
39285: PUSH
39286: LD_INT 25
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 23
39295: PUSH
39296: LD_INT 27
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 42
39309: PUSH
39310: LD_INT 43
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 44
39319: PUSH
39320: LD_INT 46
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 45
39329: PUSH
39330: LD_INT 47
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: ST_TO_ADDR
// result := [ ] ;
39347: LD_ADDR_VAR 0 3
39351: PUSH
39352: EMPTY
39353: ST_TO_ADDR
// for i in turrets do
39354: LD_ADDR_VAR 0 4
39358: PUSH
39359: LD_VAR 0 1
39363: PUSH
39364: FOR_IN
39365: IFFALSE 39548
// begin nat := GetNation ( i ) ;
39367: LD_ADDR_VAR 0 7
39371: PUSH
39372: LD_VAR 0 4
39376: PPUSH
39377: CALL_OW 248
39381: ST_TO_ADDR
// weapon := 0 ;
39382: LD_ADDR_VAR 0 8
39386: PUSH
39387: LD_INT 0
39389: ST_TO_ADDR
// if not nat then
39390: LD_VAR 0 7
39394: NOT
39395: IFFALSE 39399
// continue ;
39397: GO 39364
// for j in list [ nat ] do
39399: LD_ADDR_VAR 0 5
39403: PUSH
39404: LD_VAR 0 10
39408: PUSH
39409: LD_VAR 0 7
39413: ARRAY
39414: PUSH
39415: FOR_IN
39416: IFFALSE 39457
// if GetBWeapon ( i ) = j [ 1 ] then
39418: LD_VAR 0 4
39422: PPUSH
39423: CALL_OW 269
39427: PUSH
39428: LD_VAR 0 5
39432: PUSH
39433: LD_INT 1
39435: ARRAY
39436: EQUAL
39437: IFFALSE 39455
// begin weapon := j [ 2 ] ;
39439: LD_ADDR_VAR 0 8
39443: PUSH
39444: LD_VAR 0 5
39448: PUSH
39449: LD_INT 2
39451: ARRAY
39452: ST_TO_ADDR
// break ;
39453: GO 39457
// end ;
39455: GO 39415
39457: POP
39458: POP
// if not weapon then
39459: LD_VAR 0 8
39463: NOT
39464: IFFALSE 39468
// continue ;
39466: GO 39364
// for k in factories do
39468: LD_ADDR_VAR 0 6
39472: PUSH
39473: LD_VAR 0 2
39477: PUSH
39478: FOR_IN
39479: IFFALSE 39544
// begin weapons := AvailableWeaponList ( k ) ;
39481: LD_ADDR_VAR 0 9
39485: PUSH
39486: LD_VAR 0 6
39490: PPUSH
39491: CALL_OW 478
39495: ST_TO_ADDR
// if not weapons then
39496: LD_VAR 0 9
39500: NOT
39501: IFFALSE 39505
// continue ;
39503: GO 39478
// if weapon in weapons then
39505: LD_VAR 0 8
39509: PUSH
39510: LD_VAR 0 9
39514: IN
39515: IFFALSE 39542
// begin result := [ i , weapon ] ;
39517: LD_ADDR_VAR 0 3
39521: PUSH
39522: LD_VAR 0 4
39526: PUSH
39527: LD_VAR 0 8
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: ST_TO_ADDR
// exit ;
39536: POP
39537: POP
39538: POP
39539: POP
39540: GO 39550
// end ; end ;
39542: GO 39478
39544: POP
39545: POP
// end ;
39546: GO 39364
39548: POP
39549: POP
// end ;
39550: LD_VAR 0 3
39554: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39555: LD_INT 0
39557: PPUSH
// if not side or side > 8 then
39558: LD_VAR 0 3
39562: NOT
39563: PUSH
39564: LD_VAR 0 3
39568: PUSH
39569: LD_INT 8
39571: GREATER
39572: OR
39573: IFFALSE 39577
// exit ;
39575: GO 39636
// if not range then
39577: LD_VAR 0 4
39581: NOT
39582: IFFALSE 39593
// range := - 12 ;
39584: LD_ADDR_VAR 0 4
39588: PUSH
39589: LD_INT 12
39591: NEG
39592: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39593: LD_VAR 0 1
39597: PPUSH
39598: LD_VAR 0 2
39602: PPUSH
39603: LD_VAR 0 3
39607: PPUSH
39608: LD_VAR 0 4
39612: PPUSH
39613: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39617: LD_VAR 0 1
39621: PPUSH
39622: LD_VAR 0 2
39626: PPUSH
39627: LD_VAR 0 3
39631: PPUSH
39632: CALL_OW 331
// end ;
39636: LD_VAR 0 5
39640: RET
// export function Video ( mode ) ; begin
39641: LD_INT 0
39643: PPUSH
// ingame_video = mode ;
39644: LD_ADDR_OWVAR 52
39648: PUSH
39649: LD_VAR 0 1
39653: ST_TO_ADDR
// interface_hidden = mode ;
39654: LD_ADDR_OWVAR 54
39658: PUSH
39659: LD_VAR 0 1
39663: ST_TO_ADDR
// end ;
39664: LD_VAR 0 2
39668: RET
// export function Join ( array , element ) ; begin
39669: LD_INT 0
39671: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39672: LD_ADDR_VAR 0 3
39676: PUSH
39677: LD_VAR 0 1
39681: PPUSH
39682: LD_VAR 0 1
39686: PUSH
39687: LD_INT 1
39689: PLUS
39690: PPUSH
39691: LD_VAR 0 2
39695: PPUSH
39696: CALL_OW 1
39700: ST_TO_ADDR
// end ;
39701: LD_VAR 0 3
39705: RET
// export function JoinUnion ( array , element ) ; begin
39706: LD_INT 0
39708: PPUSH
// result := array union element ;
39709: LD_ADDR_VAR 0 3
39713: PUSH
39714: LD_VAR 0 1
39718: PUSH
39719: LD_VAR 0 2
39723: UNION
39724: ST_TO_ADDR
// end ;
39725: LD_VAR 0 3
39729: RET
// export function GetBehemoths ( side ) ; begin
39730: LD_INT 0
39732: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
39733: LD_ADDR_VAR 0 2
39737: PUSH
39738: LD_INT 22
39740: PUSH
39741: LD_VAR 0 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 31
39752: PUSH
39753: LD_INT 25
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PPUSH
39764: CALL_OW 69
39768: ST_TO_ADDR
// end ;
39769: LD_VAR 0 2
39773: RET
// export function Shuffle ( array ) ; var i , index ; begin
39774: LD_INT 0
39776: PPUSH
39777: PPUSH
39778: PPUSH
// result := [ ] ;
39779: LD_ADDR_VAR 0 2
39783: PUSH
39784: EMPTY
39785: ST_TO_ADDR
// if not array then
39786: LD_VAR 0 1
39790: NOT
39791: IFFALSE 39795
// exit ;
39793: GO 39894
// Randomize ;
39795: CALL_OW 10
// for i = array downto 1 do
39799: LD_ADDR_VAR 0 3
39803: PUSH
39804: DOUBLE
39805: LD_VAR 0 1
39809: INC
39810: ST_TO_ADDR
39811: LD_INT 1
39813: PUSH
39814: FOR_DOWNTO
39815: IFFALSE 39892
// begin index := rand ( 1 , array ) ;
39817: LD_ADDR_VAR 0 4
39821: PUSH
39822: LD_INT 1
39824: PPUSH
39825: LD_VAR 0 1
39829: PPUSH
39830: CALL_OW 12
39834: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39835: LD_ADDR_VAR 0 2
39839: PUSH
39840: LD_VAR 0 2
39844: PPUSH
39845: LD_VAR 0 2
39849: PUSH
39850: LD_INT 1
39852: PLUS
39853: PPUSH
39854: LD_VAR 0 1
39858: PUSH
39859: LD_VAR 0 4
39863: ARRAY
39864: PPUSH
39865: CALL_OW 2
39869: ST_TO_ADDR
// array := Delete ( array , index ) ;
39870: LD_ADDR_VAR 0 1
39874: PUSH
39875: LD_VAR 0 1
39879: PPUSH
39880: LD_VAR 0 4
39884: PPUSH
39885: CALL_OW 3
39889: ST_TO_ADDR
// end ;
39890: GO 39814
39892: POP
39893: POP
// end ;
39894: LD_VAR 0 2
39898: RET
// export function GetBaseMaterials ( base ) ; begin
39899: LD_INT 0
39901: PPUSH
// result := [ 0 , 0 , 0 ] ;
39902: LD_ADDR_VAR 0 2
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: LIST
39920: ST_TO_ADDR
// if not base then
39921: LD_VAR 0 1
39925: NOT
39926: IFFALSE 39930
// exit ;
39928: GO 39979
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39930: LD_ADDR_VAR 0 2
39934: PUSH
39935: LD_VAR 0 1
39939: PPUSH
39940: LD_INT 1
39942: PPUSH
39943: CALL_OW 275
39947: PUSH
39948: LD_VAR 0 1
39952: PPUSH
39953: LD_INT 2
39955: PPUSH
39956: CALL_OW 275
39960: PUSH
39961: LD_VAR 0 1
39965: PPUSH
39966: LD_INT 3
39968: PPUSH
39969: CALL_OW 275
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: ST_TO_ADDR
// end ;
39979: LD_VAR 0 2
39983: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39984: LD_INT 0
39986: PPUSH
39987: PPUSH
// result := array ;
39988: LD_ADDR_VAR 0 3
39992: PUSH
39993: LD_VAR 0 1
39997: ST_TO_ADDR
// if size > 0 then
39998: LD_VAR 0 2
40002: PUSH
40003: LD_INT 0
40005: GREATER
40006: IFFALSE 40052
// for i := array downto size do
40008: LD_ADDR_VAR 0 4
40012: PUSH
40013: DOUBLE
40014: LD_VAR 0 1
40018: INC
40019: ST_TO_ADDR
40020: LD_VAR 0 2
40024: PUSH
40025: FOR_DOWNTO
40026: IFFALSE 40050
// result := Delete ( result , result ) ;
40028: LD_ADDR_VAR 0 3
40032: PUSH
40033: LD_VAR 0 3
40037: PPUSH
40038: LD_VAR 0 3
40042: PPUSH
40043: CALL_OW 3
40047: ST_TO_ADDR
40048: GO 40025
40050: POP
40051: POP
// end ;
40052: LD_VAR 0 3
40056: RET
// export function ComExit ( unit ) ; var tmp ; begin
40057: LD_INT 0
40059: PPUSH
40060: PPUSH
// if not IsInUnit ( unit ) then
40061: LD_VAR 0 1
40065: PPUSH
40066: CALL_OW 310
40070: NOT
40071: IFFALSE 40075
// exit ;
40073: GO 40135
// tmp := IsInUnit ( unit ) ;
40075: LD_ADDR_VAR 0 3
40079: PUSH
40080: LD_VAR 0 1
40084: PPUSH
40085: CALL_OW 310
40089: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40090: LD_VAR 0 3
40094: PPUSH
40095: CALL_OW 247
40099: PUSH
40100: LD_INT 2
40102: EQUAL
40103: IFFALSE 40116
// ComExitVehicle ( unit ) else
40105: LD_VAR 0 1
40109: PPUSH
40110: CALL_OW 121
40114: GO 40125
// ComExitBuilding ( unit ) ;
40116: LD_VAR 0 1
40120: PPUSH
40121: CALL_OW 122
// result := tmp ;
40125: LD_ADDR_VAR 0 2
40129: PUSH
40130: LD_VAR 0 3
40134: ST_TO_ADDR
// end ;
40135: LD_VAR 0 2
40139: RET
// export function ComExitAll ( units ) ; var i ; begin
40140: LD_INT 0
40142: PPUSH
40143: PPUSH
// if not units then
40144: LD_VAR 0 1
40148: NOT
40149: IFFALSE 40153
// exit ;
40151: GO 40179
// for i in units do
40153: LD_ADDR_VAR 0 3
40157: PUSH
40158: LD_VAR 0 1
40162: PUSH
40163: FOR_IN
40164: IFFALSE 40177
// ComExit ( i ) ;
40166: LD_VAR 0 3
40170: PPUSH
40171: CALL 40057 0 1
40175: GO 40163
40177: POP
40178: POP
// end ;
40179: LD_VAR 0 2
40183: RET
// export function ResetHc ; begin
40184: LD_INT 0
40186: PPUSH
// InitHc ;
40187: CALL_OW 19
// hc_importance := 0 ;
40191: LD_ADDR_OWVAR 32
40195: PUSH
40196: LD_INT 0
40198: ST_TO_ADDR
// end ;
40199: LD_VAR 0 1
40203: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40204: LD_INT 0
40206: PPUSH
40207: PPUSH
40208: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40209: LD_ADDR_VAR 0 6
40213: PUSH
40214: LD_VAR 0 1
40218: PUSH
40219: LD_VAR 0 3
40223: PLUS
40224: PUSH
40225: LD_INT 2
40227: DIV
40228: ST_TO_ADDR
// if _x < 0 then
40229: LD_VAR 0 6
40233: PUSH
40234: LD_INT 0
40236: LESS
40237: IFFALSE 40254
// _x := _x * - 1 ;
40239: LD_ADDR_VAR 0 6
40243: PUSH
40244: LD_VAR 0 6
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: MUL
40253: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40254: LD_ADDR_VAR 0 7
40258: PUSH
40259: LD_VAR 0 2
40263: PUSH
40264: LD_VAR 0 4
40268: PLUS
40269: PUSH
40270: LD_INT 2
40272: DIV
40273: ST_TO_ADDR
// if _y < 0 then
40274: LD_VAR 0 7
40278: PUSH
40279: LD_INT 0
40281: LESS
40282: IFFALSE 40299
// _y := _y * - 1 ;
40284: LD_ADDR_VAR 0 7
40288: PUSH
40289: LD_VAR 0 7
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: MUL
40298: ST_TO_ADDR
// result := [ _x , _y ] ;
40299: LD_ADDR_VAR 0 5
40303: PUSH
40304: LD_VAR 0 6
40308: PUSH
40309: LD_VAR 0 7
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// end ;
40318: LD_VAR 0 5
40322: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40323: LD_INT 0
40325: PPUSH
40326: PPUSH
40327: PPUSH
40328: PPUSH
// task := GetTaskList ( unit ) ;
40329: LD_ADDR_VAR 0 7
40333: PUSH
40334: LD_VAR 0 1
40338: PPUSH
40339: CALL_OW 437
40343: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40344: LD_VAR 0 7
40348: NOT
40349: PUSH
40350: LD_VAR 0 1
40354: PPUSH
40355: LD_VAR 0 2
40359: PPUSH
40360: CALL_OW 308
40364: NOT
40365: AND
40366: IFFALSE 40370
// exit ;
40368: GO 40488
// if IsInArea ( unit , area ) then
40370: LD_VAR 0 1
40374: PPUSH
40375: LD_VAR 0 2
40379: PPUSH
40380: CALL_OW 308
40384: IFFALSE 40402
// begin ComMoveToArea ( unit , goAway ) ;
40386: LD_VAR 0 1
40390: PPUSH
40391: LD_VAR 0 3
40395: PPUSH
40396: CALL_OW 113
// exit ;
40400: GO 40488
// end ; if task [ 1 ] [ 1 ] <> M then
40402: LD_VAR 0 7
40406: PUSH
40407: LD_INT 1
40409: ARRAY
40410: PUSH
40411: LD_INT 1
40413: ARRAY
40414: PUSH
40415: LD_STRING M
40417: NONEQUAL
40418: IFFALSE 40422
// exit ;
40420: GO 40488
// x := task [ 1 ] [ 2 ] ;
40422: LD_ADDR_VAR 0 5
40426: PUSH
40427: LD_VAR 0 7
40431: PUSH
40432: LD_INT 1
40434: ARRAY
40435: PUSH
40436: LD_INT 2
40438: ARRAY
40439: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40440: LD_ADDR_VAR 0 6
40444: PUSH
40445: LD_VAR 0 7
40449: PUSH
40450: LD_INT 1
40452: ARRAY
40453: PUSH
40454: LD_INT 3
40456: ARRAY
40457: ST_TO_ADDR
// if InArea ( x , y , area ) then
40458: LD_VAR 0 5
40462: PPUSH
40463: LD_VAR 0 6
40467: PPUSH
40468: LD_VAR 0 2
40472: PPUSH
40473: CALL_OW 309
40477: IFFALSE 40488
// ComStop ( unit ) ;
40479: LD_VAR 0 1
40483: PPUSH
40484: CALL_OW 141
// end ;
40488: LD_VAR 0 4
40492: RET
// export function Abs ( value ) ; begin
40493: LD_INT 0
40495: PPUSH
// result := value ;
40496: LD_ADDR_VAR 0 2
40500: PUSH
40501: LD_VAR 0 1
40505: ST_TO_ADDR
// if value < 0 then
40506: LD_VAR 0 1
40510: PUSH
40511: LD_INT 0
40513: LESS
40514: IFFALSE 40531
// result := value * - 1 ;
40516: LD_ADDR_VAR 0 2
40520: PUSH
40521: LD_VAR 0 1
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: MUL
40530: ST_TO_ADDR
// end ;
40531: LD_VAR 0 2
40535: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40536: LD_INT 0
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
// if not unit or not building then
40546: LD_VAR 0 1
40550: NOT
40551: PUSH
40552: LD_VAR 0 2
40556: NOT
40557: OR
40558: IFFALSE 40562
// exit ;
40560: GO 40788
// x := GetX ( building ) ;
40562: LD_ADDR_VAR 0 4
40566: PUSH
40567: LD_VAR 0 2
40571: PPUSH
40572: CALL_OW 250
40576: ST_TO_ADDR
// y := GetY ( building ) ;
40577: LD_ADDR_VAR 0 6
40581: PUSH
40582: LD_VAR 0 2
40586: PPUSH
40587: CALL_OW 251
40591: ST_TO_ADDR
// d := GetDir ( building ) ;
40592: LD_ADDR_VAR 0 8
40596: PUSH
40597: LD_VAR 0 2
40601: PPUSH
40602: CALL_OW 254
40606: ST_TO_ADDR
// r := 4 ;
40607: LD_ADDR_VAR 0 9
40611: PUSH
40612: LD_INT 4
40614: ST_TO_ADDR
// for i := 1 to 5 do
40615: LD_ADDR_VAR 0 10
40619: PUSH
40620: DOUBLE
40621: LD_INT 1
40623: DEC
40624: ST_TO_ADDR
40625: LD_INT 5
40627: PUSH
40628: FOR_TO
40629: IFFALSE 40786
// begin _x := ShiftX ( x , d , r + i ) ;
40631: LD_ADDR_VAR 0 5
40635: PUSH
40636: LD_VAR 0 4
40640: PPUSH
40641: LD_VAR 0 8
40645: PPUSH
40646: LD_VAR 0 9
40650: PUSH
40651: LD_VAR 0 10
40655: PLUS
40656: PPUSH
40657: CALL_OW 272
40661: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40662: LD_ADDR_VAR 0 7
40666: PUSH
40667: LD_VAR 0 6
40671: PPUSH
40672: LD_VAR 0 8
40676: PPUSH
40677: LD_VAR 0 9
40681: PUSH
40682: LD_VAR 0 10
40686: PLUS
40687: PPUSH
40688: CALL_OW 273
40692: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40693: LD_VAR 0 5
40697: PPUSH
40698: LD_VAR 0 7
40702: PPUSH
40703: CALL_OW 488
40707: PUSH
40708: LD_VAR 0 5
40712: PPUSH
40713: LD_VAR 0 7
40717: PPUSH
40718: CALL_OW 428
40722: PPUSH
40723: CALL_OW 247
40727: PUSH
40728: LD_INT 3
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: IN
40738: NOT
40739: AND
40740: IFFALSE 40784
// begin ComMoveXY ( unit , _x , _y ) ;
40742: LD_VAR 0 1
40746: PPUSH
40747: LD_VAR 0 5
40751: PPUSH
40752: LD_VAR 0 7
40756: PPUSH
40757: CALL_OW 111
// result := [ _x , _y ] ;
40761: LD_ADDR_VAR 0 3
40765: PUSH
40766: LD_VAR 0 5
40770: PUSH
40771: LD_VAR 0 7
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: ST_TO_ADDR
// exit ;
40780: POP
40781: POP
40782: GO 40788
// end ; end ;
40784: GO 40628
40786: POP
40787: POP
// end ;
40788: LD_VAR 0 3
40792: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40793: LD_INT 0
40795: PPUSH
40796: PPUSH
40797: PPUSH
// result := 0 ;
40798: LD_ADDR_VAR 0 3
40802: PUSH
40803: LD_INT 0
40805: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40806: LD_VAR 0 1
40810: PUSH
40811: LD_INT 0
40813: LESS
40814: PUSH
40815: LD_VAR 0 1
40819: PUSH
40820: LD_INT 8
40822: GREATER
40823: OR
40824: PUSH
40825: LD_VAR 0 2
40829: PUSH
40830: LD_INT 0
40832: LESS
40833: OR
40834: PUSH
40835: LD_VAR 0 2
40839: PUSH
40840: LD_INT 8
40842: GREATER
40843: OR
40844: IFFALSE 40848
// exit ;
40846: GO 40923
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40848: LD_ADDR_VAR 0 4
40852: PUSH
40853: LD_INT 22
40855: PUSH
40856: LD_VAR 0 2
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PPUSH
40865: CALL_OW 69
40869: PUSH
40870: FOR_IN
40871: IFFALSE 40921
// begin un := UnitShoot ( i ) ;
40873: LD_ADDR_VAR 0 5
40877: PUSH
40878: LD_VAR 0 4
40882: PPUSH
40883: CALL_OW 504
40887: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40888: LD_VAR 0 5
40892: PPUSH
40893: CALL_OW 255
40897: PUSH
40898: LD_VAR 0 1
40902: EQUAL
40903: IFFALSE 40919
// begin result := un ;
40905: LD_ADDR_VAR 0 3
40909: PUSH
40910: LD_VAR 0 5
40914: ST_TO_ADDR
// exit ;
40915: POP
40916: POP
40917: GO 40923
// end ; end ;
40919: GO 40870
40921: POP
40922: POP
// end ;
40923: LD_VAR 0 3
40927: RET
// export function GetCargoBay ( units ) ; begin
40928: LD_INT 0
40930: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40931: LD_ADDR_VAR 0 2
40935: PUSH
40936: LD_VAR 0 1
40940: PPUSH
40941: LD_INT 2
40943: PUSH
40944: LD_INT 34
40946: PUSH
40947: LD_INT 12
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 34
40956: PUSH
40957: LD_INT 51
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 34
40966: PUSH
40967: LD_INT 32
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 34
40976: PUSH
40977: LD_EXP 20
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: PPUSH
40993: CALL_OW 72
40997: ST_TO_ADDR
// end ; end_of_file
40998: LD_VAR 0 2
41002: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
41003: LD_INT 0
41005: PPUSH
// ar_miner := 81 ;
41006: LD_ADDR_EXP 26
41010: PUSH
41011: LD_INT 81
41013: ST_TO_ADDR
// ar_crane := 88 ;
41014: LD_ADDR_EXP 25
41018: PUSH
41019: LD_INT 88
41021: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
41022: LD_ADDR_EXP 20
41026: PUSH
41027: LD_INT 89
41029: ST_TO_ADDR
// us_hack := 99 ;
41030: LD_ADDR_EXP 21
41034: PUSH
41035: LD_INT 99
41037: ST_TO_ADDR
// us_artillery := 97 ;
41038: LD_ADDR_EXP 22
41042: PUSH
41043: LD_INT 97
41045: ST_TO_ADDR
// ar_bio_bomb := 91 ;
41046: LD_ADDR_EXP 23
41050: PUSH
41051: LD_INT 91
41053: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
41054: LD_ADDR_EXP 24
41058: PUSH
41059: LD_INT 92
41061: ST_TO_ADDR
// ru_radar := 98 ;
41062: LD_ADDR_EXP 19
41066: PUSH
41067: LD_INT 98
41069: ST_TO_ADDR
// tech_Artillery := 80 ;
41070: LD_ADDR_EXP 27
41074: PUSH
41075: LD_INT 80
41077: ST_TO_ADDR
// tech_RadMat := 81 ;
41078: LD_ADDR_EXP 28
41082: PUSH
41083: LD_INT 81
41085: ST_TO_ADDR
// tech_BasicTools := 82 ;
41086: LD_ADDR_EXP 29
41090: PUSH
41091: LD_INT 82
41093: ST_TO_ADDR
// tech_Cargo := 83 ;
41094: LD_ADDR_EXP 30
41098: PUSH
41099: LD_INT 83
41101: ST_TO_ADDR
// tech_Track := 84 ;
41102: LD_ADDR_EXP 31
41106: PUSH
41107: LD_INT 84
41109: ST_TO_ADDR
// tech_Crane := 85 ;
41110: LD_ADDR_EXP 32
41114: PUSH
41115: LD_INT 85
41117: ST_TO_ADDR
// tech_Bulldozer := 86 ;
41118: LD_ADDR_EXP 33
41122: PUSH
41123: LD_INT 86
41125: ST_TO_ADDR
// tech_Hovercraft := 87 ;
41126: LD_ADDR_EXP 34
41130: PUSH
41131: LD_INT 87
41133: ST_TO_ADDR
// end ;
41134: LD_VAR 0 1
41138: RET
// every 1 do
41139: GO 41141
41141: DISABLE
// InitGlobalVariables ;
41142: CALL 41003 0 0
41146: END
