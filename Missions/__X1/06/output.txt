// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10352 0 2
// PrepareArabian ;
  32: CALL 505 0 0
// PrepareRussian ;
  36: CALL 11285 0 0
// Action ;
  40: CALL 19613 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: IFFALSE 442
 431: PUSH
 432: LD_EXP 47
 436: PPUSH
 437: CALL_OW 302
 441: AND
 442: IFFALSE 451
 444: PUSH
 445: LD_EXP 6
 449: NOT
 450: AND
 451: IFFALSE 463
 453: GO 455
 455: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 456: LD_STRING ACH_ROLF
 458: PPUSH
 459: CALL_OW 543
 463: END
// every 0 0$2 trigger collectedOil >= 300 do
 464: LD_EXP 33
 468: PUSH
 469: LD_INT 300
 471: GREATEREQUAL
 472: IFFALSE 484
 474: GO 476
 476: DISABLE
// SetAchievement ( ACH_OIL ) ;
 477: LD_STRING ACH_OIL
 479: PPUSH
 480: CALL_OW 543
 484: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 485: LD_INT 52
 487: PPUSH
 488: CALL_OW 301
 492: IFFALSE 504
 494: GO 496
 496: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 497: LD_STRING ACH_LENIN
 499: PPUSH
 500: CALL_OW 543
 504: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
// uc_nation := 2 ;
 521: LD_ADDR_OWVAR 21
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// uc_side := 5 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 5
 536: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 537: LD_ADDR_EXP 42
 541: PUSH
 542: LD_STRING Abdul
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: LD_STRING 
 550: PPUSH
 551: CALL 30291 0 3
 555: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 556: LD_ADDR_EXP 44
 560: PUSH
 561: LD_STRING Omar
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: LD_STRING 
 569: PPUSH
 570: CALL 30291 0 3
 574: ST_TO_ADDR
// uc_side := 2 ;
 575: LD_ADDR_OWVAR 20
 579: PUSH
 580: LD_INT 2
 582: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 583: LD_ADDR_EXP 34
 587: PUSH
 588: LD_STRING Heike
 590: PPUSH
 591: LD_EXP 1
 595: NOT
 596: PPUSH
 597: LD_EXP 2
 601: PPUSH
 602: CALL 30291 0 3
 606: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 607: LD_ADDR_EXP 37
 611: PUSH
 612: LD_STRING Ibrahim
 614: PPUSH
 615: LD_EXP 1
 619: NOT
 620: PPUSH
 621: LD_EXP 2
 625: PPUSH
 626: CALL 30291 0 3
 630: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 631: LD_ADDR_EXP 35
 635: PUSH
 636: LD_STRING Givi
 638: PPUSH
 639: LD_EXP 1
 643: NOT
 644: PPUSH
 645: LD_EXP 2
 649: PPUSH
 650: CALL 30291 0 3
 654: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 655: LD_ADDR_EXP 38
 659: PUSH
 660: LD_STRING Kamil
 662: PPUSH
 663: LD_EXP 1
 667: NOT
 668: PPUSH
 669: LD_EXP 2
 673: PPUSH
 674: CALL 30291 0 3
 678: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 679: LD_ADDR_EXP 39
 683: PUSH
 684: LD_STRING Kaia
 686: PPUSH
 687: LD_EXP 1
 691: NOT
 692: PPUSH
 693: LD_EXP 2
 697: PPUSH
 698: CALL 30291 0 3
 702: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 703: LD_ADDR_EXP 40
 707: PUSH
 708: LD_STRING Sophia
 710: PPUSH
 711: LD_EXP 1
 715: NOT
 716: PPUSH
 717: LD_EXP 2
 721: PPUSH
 722: CALL 30291 0 3
 726: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 727: LD_ADDR_EXP 41
 731: PUSH
 732: LD_STRING Markov
 734: PPUSH
 735: LD_EXP 1
 739: NOT
 740: PPUSH
 741: LD_EXP 2
 745: PPUSH
 746: CALL 30291 0 3
 750: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 751: LD_ADDR_EXP 46
 755: PUSH
 756: LD_STRING Aviradze
 758: PPUSH
 759: LD_EXP 1
 763: NOT
 764: PPUSH
 765: LD_EXP 2
 769: PPUSH
 770: CALL 30291 0 3
 774: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 775: LD_ADDR_EXP 45
 779: PUSH
 780: LD_STRING Kurt
 782: PPUSH
 783: LD_EXP 1
 787: NOT
 788: PPUSH
 789: LD_EXP 2
 793: PPUSH
 794: CALL 30291 0 3
 798: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 799: LD_ADDR_EXP 36
 803: PUSH
 804: LD_STRING Mike
 806: PPUSH
 807: LD_EXP 1
 811: NOT
 812: PPUSH
 813: LD_EXP 2
 817: PPUSH
 818: CALL 30291 0 3
 822: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 823: LD_ADDR_EXP 43
 827: PUSH
 828: LD_STRING Olaf
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: LD_STRING 
 836: PPUSH
 837: CALL 30291 0 3
 841: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 842: LD_ADDR_EXP 49
 846: PUSH
 847: LD_STRING 05_others
 849: PPUSH
 850: CALL_OW 31
 854: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 855: LD_ADDR_EXP 50
 859: PUSH
 860: LD_STRING 05_apes
 862: PPUSH
 863: CALL_OW 31
 867: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 868: LD_ADDR_VAR 0 5
 872: PUSH
 873: LD_STRING 05_Radar
 875: PPUSH
 876: LD_EXP 1
 880: PPUSH
 881: CALL_OW 30
 885: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 886: LD_ADDR_VAR 0 6
 890: PUSH
 891: LD_STRING 05_RemoteControl
 893: PPUSH
 894: LD_EXP 1
 898: PPUSH
 899: CALL_OW 30
 903: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 904: LD_ADDR_VAR 0 7
 908: PUSH
 909: LD_STRING 05_DrugsTested
 911: PPUSH
 912: LD_EXP 1
 916: PPUSH
 917: CALL_OW 30
 921: ST_TO_ADDR
// if hasDrugs then
 922: LD_VAR 0 7
 926: IFFALSE 941
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_INT 2
 933: PPUSH
 934: LD_INT 2
 936: PPUSH
 937: CALL_OW 322
// if hasRadar then
 941: LD_VAR 0 5
 945: IFFALSE 960
// SetTech ( tech_radar , 2 , state_researched ) ;
 947: LD_INT 6
 949: PPUSH
 950: LD_INT 2
 952: PPUSH
 953: LD_INT 2
 955: PPUSH
 956: CALL_OW 322
// if hasRemote then
 960: LD_VAR 0 6
 964: IFFALSE 979
// SetTech ( tech_remCont , 2 , state_researched ) ;
 966: LD_INT 15
 968: PPUSH
 969: LD_INT 2
 971: PPUSH
 972: LD_INT 2
 974: PPUSH
 975: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 979: LD_ADDR_VAR 0 13
 983: PUSH
 984: LD_INT 5
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 517
 994: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: DOUBLE
1001: LD_INT 1
1003: DEC
1004: ST_TO_ADDR
1005: LD_VAR 0 13
1009: PUSH
1010: LD_INT 1
1012: ARRAY
1013: PUSH
1014: FOR_TO
1015: IFFALSE 1092
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1017: LD_VAR 0 13
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PUSH
1026: LD_VAR 0 2
1030: ARRAY
1031: PPUSH
1032: LD_VAR 0 13
1036: PUSH
1037: LD_INT 2
1039: ARRAY
1040: PUSH
1041: LD_VAR 0 2
1045: ARRAY
1046: PPUSH
1047: CALL_OW 351
1051: IFFALSE 1090
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1053: LD_VAR 0 13
1057: PUSH
1058: LD_INT 1
1060: ARRAY
1061: PUSH
1062: LD_VAR 0 2
1066: ARRAY
1067: PPUSH
1068: LD_VAR 0 13
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PUSH
1077: LD_VAR 0 2
1081: ARRAY
1082: PPUSH
1083: LD_INT 2
1085: PPUSH
1086: CALL_OW 244
1090: GO 1014
1092: POP
1093: POP
// base := [ ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: EMPTY
1100: ST_TO_ADDR
// if debug then
1101: LD_EXP 1
1105: IFFALSE 1155
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1107: LD_ADDR_VAR 0 4
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: LD_INT 51
1117: PUSH
1118: LD_INT 77
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 3
1126: PUSH
1127: LD_INT 3
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: EMPTY
1151: LIST
1152: ST_TO_ADDR
// end else
1153: GO 1171
// if buildingsFromPrev then
1155: LD_EXP 30
1159: IFFALSE 1171
// base := buildingsFromPrev ;
1161: LD_ADDR_VAR 0 4
1165: PUSH
1166: LD_EXP 30
1170: ST_TO_ADDR
// if base then
1171: LD_VAR 0 4
1175: IFFALSE 1373
// for i := 1 to base do
1177: LD_ADDR_VAR 0 2
1181: PUSH
1182: DOUBLE
1183: LD_INT 1
1185: DEC
1186: ST_TO_ADDR
1187: LD_VAR 0 4
1191: PUSH
1192: FOR_TO
1193: IFFALSE 1371
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1195: LD_ADDR_VAR 0 4
1199: PUSH
1200: LD_VAR 0 4
1204: PPUSH
1205: LD_VAR 0 2
1209: PPUSH
1210: LD_VAR 0 4
1214: PUSH
1215: LD_VAR 0 2
1219: ARRAY
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PUSH
1225: LD_VAR 0 4
1229: PUSH
1230: LD_VAR 0 2
1234: ARRAY
1235: PUSH
1236: LD_INT 2
1238: ARRAY
1239: PUSH
1240: LD_INT 155
1242: PLUS
1243: PUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_VAR 0 2
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: ARRAY
1258: PUSH
1259: LD_INT 3
1261: PLUS
1262: PUSH
1263: LD_VAR 0 4
1267: PUSH
1268: LD_VAR 0 2
1272: ARRAY
1273: PUSH
1274: LD_INT 4
1276: ARRAY
1277: PUSH
1278: LD_VAR 0 4
1282: PUSH
1283: LD_VAR 0 2
1287: ARRAY
1288: PUSH
1289: LD_INT 5
1291: ARRAY
1292: PUSH
1293: LD_VAR 0 4
1297: PUSH
1298: LD_VAR 0 2
1302: ARRAY
1303: PUSH
1304: LD_INT 6
1306: ARRAY
1307: PUSH
1308: LD_VAR 0 4
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: PUSH
1319: LD_INT 7
1321: ARRAY
1322: PUSH
1323: LD_VAR 0 4
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 8
1336: ARRAY
1337: PUSH
1338: LD_VAR 0 4
1342: PUSH
1343: LD_VAR 0 2
1347: ARRAY
1348: PUSH
1349: LD_INT 9
1351: ARRAY
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: PPUSH
1364: CALL_OW 1
1368: ST_TO_ADDR
1369: GO 1192
1371: POP
1372: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1373: LD_ADDR_VAR 0 4
1377: PUSH
1378: LD_VAR 0 4
1382: PUSH
1383: LD_INT 0
1385: PUSH
1386: LD_INT 206
1388: PUSH
1389: LD_INT 80
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 2
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: LD_INT 0
1403: PUSH
1404: LD_INT 0
1406: PUSH
1407: LD_INT 0
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_INT 32
1423: PUSH
1424: LD_INT 221
1426: PUSH
1427: LD_INT 95
1429: PUSH
1430: LD_INT 5
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 23
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 32
1461: PUSH
1462: LD_INT 223
1464: PUSH
1465: LD_INT 88
1467: PUSH
1468: LD_INT 5
1470: PUSH
1471: LD_INT 2
1473: PUSH
1474: LD_INT 3
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 0
1482: PUSH
1483: LD_INT 24
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 32
1499: PUSH
1500: LD_INT 202
1502: PUSH
1503: LD_INT 64
1505: PUSH
1506: LD_INT 2
1508: PUSH
1509: LD_INT 2
1511: PUSH
1512: LD_INT 3
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: LD_INT 0
1520: PUSH
1521: LD_INT 25
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 3
1537: PUSH
1538: LD_INT 203
1540: PUSH
1541: LD_INT 91
1543: PUSH
1544: LD_INT 1
1546: PUSH
1547: LD_INT 2
1549: PUSH
1550: LD_INT 3
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 0
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 8
1575: PUSH
1576: LD_INT 217
1578: PUSH
1579: LD_INT 78
1581: PUSH
1582: LD_INT 4
1584: PUSH
1585: LD_INT 2
1587: PUSH
1588: LD_INT 3
1590: PUSH
1591: LD_INT 10
1593: PUSH
1594: LD_INT 0
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 27
1613: PUSH
1614: LD_INT 220
1616: PUSH
1617: LD_INT 99
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 3
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 27
1651: PUSH
1652: LD_INT 220
1654: PUSH
1655: LD_INT 103
1657: PUSH
1658: LD_INT 1
1660: PUSH
1661: LD_INT 2
1663: PUSH
1664: LD_INT 3
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 0
1672: PUSH
1673: LD_INT 0
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 27
1689: PUSH
1690: LD_INT 216
1692: PUSH
1693: LD_INT 102
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: LD_INT 3
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 17
1727: PUSH
1728: LD_INT 203
1730: PUSH
1731: LD_INT 94
1733: PUSH
1734: LD_INT 0
1736: PUSH
1737: LD_INT 2
1739: PUSH
1740: LD_INT 3
1742: PUSH
1743: LD_INT 0
1745: PUSH
1746: LD_INT 0
1748: PUSH
1749: LD_INT 0
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 23
1765: PUSH
1766: LD_INT 200
1768: PUSH
1769: LD_INT 88
1771: PUSH
1772: LD_INT 2
1774: PUSH
1775: LD_INT 2
1777: PUSH
1778: LD_INT 3
1780: PUSH
1781: LD_INT 0
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 16
1803: PUSH
1804: LD_INT 199
1806: PUSH
1807: LD_INT 91
1809: PUSH
1810: LD_INT 1
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: LD_INT 0
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 26
1841: PUSH
1842: LD_INT 197
1844: PUSH
1845: LD_INT 81
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: LD_INT 2
1853: PUSH
1854: LD_INT 3
1856: PUSH
1857: LD_INT 0
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: LD_INT 0
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 26
1879: PUSH
1880: LD_INT 197
1882: PUSH
1883: LD_INT 78
1885: PUSH
1886: LD_INT 3
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 3
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: LD_INT 0
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: ADD
1931: ST_TO_ADDR
// if hasRadar then
1932: LD_VAR 0 5
1936: IFFALSE 2000
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1938: LD_ADDR_VAR 0 4
1942: PUSH
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_VAR 0 4
1952: PUSH
1953: LD_INT 1
1955: PLUS
1956: PPUSH
1957: LD_INT 20
1959: PUSH
1960: LD_INT 203
1962: PUSH
1963: LD_INT 87
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: LD_INT 2
1971: PUSH
1972: LD_INT 3
1974: PUSH
1975: LD_INT 0
1977: PUSH
1978: LD_INT 0
1980: PUSH
1981: LD_INT 0
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 1
1999: ST_TO_ADDR
// if hasRemote then
2000: LD_VAR 0 6
2004: IFFALSE 2068
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2006: LD_ADDR_VAR 0 4
2010: PUSH
2011: LD_VAR 0 4
2015: PPUSH
2016: LD_VAR 0 4
2020: PUSH
2021: LD_INT 1
2023: PLUS
2024: PPUSH
2025: LD_INT 22
2027: PUSH
2028: LD_INT 207
2030: PUSH
2031: LD_INT 95
2033: PUSH
2034: LD_INT 5
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: LD_INT 3
2042: PUSH
2043: LD_INT 0
2045: PUSH
2046: LD_INT 0
2048: PUSH
2049: LD_INT 0
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: PPUSH
2063: CALL_OW 1
2067: ST_TO_ADDR
// for i in base do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_VAR 0 4
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2443
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2081: LD_VAR 0 2
2085: PUSH
2086: LD_INT 2
2088: ARRAY
2089: PPUSH
2090: LD_VAR 0 2
2094: PUSH
2095: LD_INT 3
2097: ARRAY
2098: PPUSH
2099: CALL_OW 428
2103: IFFALSE 2107
// continue ;
2105: GO 2078
// uc_nation := i [ 5 ] ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_VAR 0 2
2116: PUSH
2117: LD_INT 5
2119: ARRAY
2120: ST_TO_ADDR
// InitBc ;
2121: CALL_OW 21
// bc_type := i [ 1 ] ;
2125: LD_ADDR_OWVAR 42
2129: PUSH
2130: LD_VAR 0 2
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2139: LD_ADDR_OWVAR 43
2143: PUSH
2144: LD_VAR 0 2
2148: PUSH
2149: LD_INT 6
2151: ARRAY
2152: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2153: LD_ADDR_OWVAR 44
2157: PUSH
2158: LD_INT 9
2160: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2161: LD_ADDR_OWVAR 45
2165: PUSH
2166: LD_INT 9
2168: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2169: LD_VAR 0 2
2173: PUSH
2174: LD_INT 1
2176: ARRAY
2177: PUSH
2178: LD_INT 8
2180: EQUAL
2181: IFFALSE 2197
2183: PUSH
2184: LD_VAR 0 2
2188: PUSH
2189: LD_INT 5
2191: ARRAY
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: AND
2197: IFFALSE 2210
2199: PUSH
2200: LD_VAR 0 2
2204: PUSH
2205: LD_INT 8
2207: ARRAY
2208: NOT
2209: AND
2210: IFFALSE 2246
// begin bc_kind1 := b_lab_weapon ;
2212: LD_ADDR_OWVAR 44
2216: PUSH
2217: LD_INT 10
2219: ST_TO_ADDR
// if hasRadar then
2220: LD_VAR 0 5
2224: IFFALSE 2236
// bc_kind2 := b_lab_opto else
2226: LD_ADDR_OWVAR 45
2230: PUSH
2231: LD_INT 15
2233: ST_TO_ADDR
2234: GO 2244
// bc_kind2 := b_lab_basic ;
2236: LD_ADDR_OWVAR 45
2240: PUSH
2241: LD_INT 9
2243: ST_TO_ADDR
// end else
2244: GO 2333
// begin if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2246: LD_VAR 0 2
2250: PUSH
2251: LD_INT 1
2253: ARRAY
2254: PUSH
2255: LD_INT 7
2257: PUSH
2258: LD_INT 8
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: IN
2265: IFFALSE 2277
2267: PUSH
2268: LD_VAR 0 2
2272: PUSH
2273: LD_INT 7
2275: ARRAY
2276: AND
2277: IFFALSE 2333
// begin bc_kind1 := i [ 7 ] ;
2279: LD_ADDR_OWVAR 44
2283: PUSH
2284: LD_VAR 0 2
2288: PUSH
2289: LD_INT 7
2291: ARRAY
2292: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2293: LD_VAR 0 2
2297: PUSH
2298: LD_INT 1
2300: ARRAY
2301: PUSH
2302: LD_INT 8
2304: EQUAL
2305: IFFALSE 2317
2307: PUSH
2308: LD_VAR 0 2
2312: PUSH
2313: LD_INT 8
2315: ARRAY
2316: AND
2317: IFFALSE 2333
// bc_kind2 := i [ 8 ] ;
2319: LD_ADDR_OWVAR 45
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 8
2331: ARRAY
2332: ST_TO_ADDR
// end ; end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2333: LD_ADDR_VAR 0 3
2337: PUSH
2338: LD_VAR 0 2
2342: PUSH
2343: LD_INT 2
2345: ARRAY
2346: PPUSH
2347: LD_VAR 0 2
2351: PUSH
2352: LD_INT 3
2354: ARRAY
2355: PPUSH
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 4
2363: ARRAY
2364: PPUSH
2365: CALL_OW 47
2369: ST_TO_ADDR
// if i [ 9 ] then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_INT 9
2377: ARRAY
2378: IFFALSE 2398
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2380: LD_VAR 0 3
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_INT 9
2392: ARRAY
2393: PPUSH
2394: CALL_OW 431
// if i [ 1 ] = b_bunker then
2398: LD_VAR 0 2
2402: PUSH
2403: LD_INT 1
2405: ARRAY
2406: PUSH
2407: LD_INT 32
2409: EQUAL
2410: IFFALSE 2441
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2412: LD_ADDR_VAR 0 11
2416: PUSH
2417: LD_VAR 0 11
2421: PPUSH
2422: LD_VAR 0 11
2426: PUSH
2427: LD_INT 1
2429: PLUS
2430: PPUSH
2431: LD_VAR 0 3
2435: PPUSH
2436: CALL_OW 1
2440: ST_TO_ADDR
// end ;
2441: GO 2078
2443: POP
2444: POP
// depot := HexInfo ( 206 , 80 ) ;
2445: LD_ADDR_VAR 0 9
2449: PUSH
2450: LD_INT 206
2452: PPUSH
2453: LD_INT 80
2455: PPUSH
2456: CALL_OW 428
2460: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2461: LD_ADDR_VAR 0 8
2465: PUSH
2466: LD_INT 22
2468: PUSH
2469: LD_INT 2
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 30
2478: PUSH
2479: LD_INT 3
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: PPUSH
2490: CALL_OW 69
2494: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2495: LD_ADDR_VAR 0 10
2499: PUSH
2500: LD_INT 22
2502: PUSH
2503: LD_INT 2
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: LD_INT 30
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 30
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 30
2535: PUSH
2536: LD_INT 8
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PPUSH
2553: CALL_OW 69
2557: ST_TO_ADDR
// arDepot := depot ;
2558: LD_ADDR_EXP 48
2562: PUSH
2563: LD_VAR 0 9
2567: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2568: LD_VAR 0 9
2572: PPUSH
2573: CALL_OW 274
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: LD_INT 360
2583: PUSH
2584: LD_INT 260
2586: PUSH
2587: LD_INT 190
2589: PUSH
2590: LD_INT 150
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: PUSH
2599: LD_OWVAR 67
2603: ARRAY
2604: PPUSH
2605: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2609: LD_VAR 0 9
2613: PPUSH
2614: CALL_OW 274
2618: PPUSH
2619: LD_INT 2
2621: PPUSH
2622: LD_INT 200
2624: PUSH
2625: LD_INT 170
2627: PUSH
2628: LD_INT 150
2630: PUSH
2631: LD_INT 120
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: LIST
2638: LIST
2639: PUSH
2640: LD_OWVAR 67
2644: ARRAY
2645: PPUSH
2646: CALL_OW 277
// uc_nation := 2 ;
2650: LD_ADDR_OWVAR 21
2654: PUSH
2655: LD_INT 2
2657: ST_TO_ADDR
// uc_side := 2 ;
2658: LD_ADDR_OWVAR 20
2662: PUSH
2663: LD_INT 2
2665: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2666: LD_INT 13
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: LD_INT 27
2677: PPUSH
2678: LD_INT 33
2680: PPUSH
2681: CALL 35311 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2685: CALL_OW 45
2689: PPUSH
2690: LD_INT 190
2692: PPUSH
2693: LD_INT 64
2695: PPUSH
2696: LD_INT 5
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL 70651 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2706: LD_INT 13
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 1
2714: PPUSH
2715: LD_INT 25
2717: PPUSH
2718: LD_INT 22
2720: PPUSH
2721: CALL 35311 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2725: CALL_OW 45
2729: PPUSH
2730: LD_INT 188
2732: PPUSH
2733: LD_INT 67
2735: PPUSH
2736: LD_INT 5
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL 70651 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2746: LD_EXP 34
2750: PPUSH
2751: LD_INT 213
2753: PPUSH
2754: LD_INT 87
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2764: LD_EXP 34
2768: PPUSH
2769: LD_INT 214
2771: PPUSH
2772: LD_INT 87
2774: PPUSH
2775: CALL_OW 118
// if Kaia then
2779: LD_EXP 39
2783: IFFALSE 2818
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2785: LD_EXP 39
2789: PPUSH
2790: LD_INT 213
2792: PPUSH
2793: LD_INT 85
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2803: LD_EXP 39
2807: PPUSH
2808: LD_INT 215
2810: PPUSH
2811: LD_INT 87
2813: PPUSH
2814: CALL_OW 118
// end ; if Olaf and Kaia then
2818: LD_EXP 43
2822: IFFALSE 2830
2824: PUSH
2825: LD_EXP 39
2829: AND
2830: IFFALSE 2867
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2832: LD_EXP 43
2836: PPUSH
2837: LD_INT 215
2839: PPUSH
2840: LD_INT 87
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2850: LD_EXP 43
2854: PPUSH
2855: LD_INT 213
2857: PPUSH
2858: LD_INT 85
2860: PPUSH
2861: CALL_OW 118
// end else
2865: GO 2887
// if Olaf then
2867: LD_EXP 43
2871: IFFALSE 2887
// PlaceHumanInUnit ( Olaf , factory ) ;
2873: LD_EXP 43
2877: PPUSH
2878: LD_VAR 0 8
2882: PPUSH
2883: CALL_OW 52
// if Givi then
2887: LD_EXP 35
2891: IFFALSE 2974
// begin if Kaia and Olaf then
2893: LD_EXP 39
2897: IFFALSE 2905
2899: PUSH
2900: LD_EXP 43
2904: AND
2905: IFFALSE 2942
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 247
2914: PPUSH
2915: LD_INT 117
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2925: LD_EXP 35
2929: PPUSH
2930: LD_INT 248
2932: PPUSH
2933: LD_INT 118
2935: PPUSH
2936: CALL_OW 118
// end else
2940: GO 2974
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_INT 216
2949: PPUSH
2950: LD_INT 88
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2960: LD_EXP 35
2964: PPUSH
2965: LD_EXP 34
2969: PPUSH
2970: CALL_OW 119
// end ; end ; if Kurt then
2974: LD_EXP 45
2978: IFFALSE 2998
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2980: LD_EXP 45
2984: PPUSH
2985: LD_VAR 0 11
2989: PUSH
2990: LD_INT 2
2992: ARRAY
2993: PPUSH
2994: CALL_OW 52
// if Mike then
2998: LD_EXP 36
3002: IFFALSE 3022
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
3004: LD_EXP 36
3008: PPUSH
3009: LD_VAR 0 11
3013: PUSH
3014: LD_INT 3
3016: ARRAY
3017: PPUSH
3018: CALL_OW 52
// if Kamil then
3022: LD_EXP 38
3026: IFFALSE 3090
// begin if Kaia and Olaf then
3028: LD_EXP 39
3032: IFFALSE 3040
3034: PUSH
3035: LD_EXP 43
3039: AND
3040: IFFALSE 3058
// PlaceHumanInUnit ( Kamil , depot ) else
3042: LD_EXP 38
3046: PPUSH
3047: LD_VAR 0 9
3051: PPUSH
3052: CALL_OW 52
3056: GO 3090
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3058: LD_EXP 38
3062: PPUSH
3063: LD_INT 213
3065: PPUSH
3066: LD_INT 87
3068: PPUSH
3069: LD_INT 0
3071: PPUSH
3072: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3076: LD_EXP 38
3080: PPUSH
3081: LD_EXP 34
3085: PPUSH
3086: CALL_OW 119
// end ; end ; if Sophia then
3090: LD_EXP 40
3094: IFFALSE 3110
// PlaceHumanInUnit ( Sophia , depot ) ;
3096: LD_EXP 40
3100: PPUSH
3101: LD_VAR 0 9
3105: PPUSH
3106: CALL_OW 52
// if Aviradze then
3110: LD_EXP 46
3114: IFFALSE 3163
// if lab then
3116: LD_VAR 0 10
3120: IFFALSE 3142
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3122: LD_EXP 46
3126: PPUSH
3127: LD_VAR 0 10
3131: PUSH
3132: LD_INT 1
3134: ARRAY
3135: PPUSH
3136: CALL_OW 52
3140: GO 3163
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3142: LD_EXP 46
3146: PPUSH
3147: LD_INT 210
3149: PPUSH
3150: LD_INT 87
3152: PPUSH
3153: LD_INT 3
3155: PPUSH
3156: LD_INT 0
3158: PPUSH
3159: CALL_OW 50
// if Ibrahim then
3163: LD_EXP 37
3167: IFFALSE 3216
// if lab then
3169: LD_VAR 0 10
3173: IFFALSE 3195
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3175: LD_EXP 37
3179: PPUSH
3180: LD_VAR 0 10
3184: PUSH
3185: LD_INT 1
3187: ARRAY
3188: PPUSH
3189: CALL_OW 52
3193: GO 3216
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3195: LD_EXP 37
3199: PPUSH
3200: LD_INT 210
3202: PPUSH
3203: LD_INT 87
3205: PPUSH
3206: LD_INT 3
3208: PPUSH
3209: LD_INT 0
3211: PPUSH
3212: CALL_OW 50
// if Markov then
3216: LD_EXP 41
3220: IFFALSE 3269
// if factory then
3222: LD_VAR 0 8
3226: IFFALSE 3248
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3228: LD_EXP 41
3232: PPUSH
3233: LD_VAR 0 8
3237: PUSH
3238: LD_INT 1
3240: ARRAY
3241: PPUSH
3242: CALL_OW 52
3246: GO 3269
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3248: LD_EXP 41
3252: PPUSH
3253: LD_INT 210
3255: PPUSH
3256: LD_INT 87
3258: PPUSH
3259: LD_INT 3
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 50
// if heikeSecondSquad then
3269: LD_EXP 49
3273: IFFALSE 3313
// for i in heikeSecondSquad do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: LD_EXP 49
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3311
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3288: LD_VAR 0 2
3292: PPUSH
3293: LD_INT 190
3295: PPUSH
3296: LD_INT 65
3298: PPUSH
3299: LD_INT 5
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 50
3309: GO 3285
3311: POP
3312: POP
// if heikeApes then
3313: LD_EXP 50
3317: IFFALSE 3357
// for i in heikeApes do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: LD_EXP 50
3328: PUSH
3329: FOR_IN
3330: IFFALSE 3355
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3332: LD_VAR 0 2
3336: PPUSH
3337: LD_INT 190
3339: PPUSH
3340: LD_INT 70
3342: PPUSH
3343: LD_INT 5
3345: PPUSH
3346: LD_INT 0
3348: PPUSH
3349: CALL_OW 50
3353: GO 3329
3355: POP
3356: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3357: LD_ADDR_VAR 0 13
3361: PUSH
3362: LD_STRING 05_Vehicles
3364: PPUSH
3365: EMPTY
3366: PPUSH
3367: CALL_OW 30
3371: ST_TO_ADDR
// if tmp then
3372: LD_VAR 0 13
3376: IFFALSE 3546
// begin limiter := 10 ;
3378: LD_ADDR_VAR 0 14
3382: PUSH
3383: LD_INT 10
3385: ST_TO_ADDR
// for i in tmp do
3386: LD_ADDR_VAR 0 2
3390: PUSH
3391: LD_VAR 0 13
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3544
// begin limiter := Dec ( limiter ) ;
3399: LD_ADDR_VAR 0 14
3403: PUSH
3404: LD_VAR 0 14
3408: PPUSH
3409: CALL 69886 0 1
3413: ST_TO_ADDR
// if limiter = 0 then
3414: LD_VAR 0 14
3418: PUSH
3419: LD_INT 0
3421: EQUAL
3422: IFFALSE 3426
// break ;
3424: GO 3544
// uc_side := 2 ;
3426: LD_ADDR_OWVAR 20
3430: PUSH
3431: LD_INT 2
3433: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3434: LD_ADDR_OWVAR 21
3438: PUSH
3439: LD_VAR 0 2
3443: PUSH
3444: LD_INT 5
3446: ARRAY
3447: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3448: LD_VAR 0 2
3452: PUSH
3453: LD_INT 1
3455: ARRAY
3456: PPUSH
3457: LD_VAR 0 2
3461: PUSH
3462: LD_INT 2
3464: ARRAY
3465: PPUSH
3466: LD_VAR 0 2
3470: PUSH
3471: LD_INT 3
3473: ARRAY
3474: PPUSH
3475: LD_VAR 0 2
3479: PUSH
3480: LD_INT 4
3482: ARRAY
3483: PPUSH
3484: LD_INT 20
3486: PPUSH
3487: CALL 35311 0 5
// veh := CreateVehicle ;
3491: LD_ADDR_VAR 0 12
3495: PUSH
3496: CALL_OW 45
3500: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: LD_INT 5
3511: PPUSH
3512: CALL_OW 12
3516: PPUSH
3517: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3521: LD_VAR 0 12
3525: PPUSH
3526: LD_INT 252
3528: PPUSH
3529: LD_INT 111
3531: PPUSH
3532: LD_INT 8
3534: PPUSH
3535: LD_INT 0
3537: PPUSH
3538: CALL_OW 50
// end ;
3542: GO 3396
3544: POP
3545: POP
// end ; end ;
3546: LD_VAR 0 1
3550: RET
// export function PrepareRolfSquad ; var i , j ; begin
3551: LD_INT 0
3553: PPUSH
3554: PPUSH
3555: PPUSH
// uc_side := 8 ;
3556: LD_ADDR_OWVAR 20
3560: PUSH
3561: LD_INT 8
3563: ST_TO_ADDR
// uc_nation := 2 ;
3564: LD_ADDR_OWVAR 21
3568: PUSH
3569: LD_INT 2
3571: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3572: LD_ADDR_EXP 47
3576: PUSH
3577: LD_STRING Bergkamp
3579: PPUSH
3580: CALL_OW 25
3584: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3585: LD_ADDR_EXP 51
3589: PUSH
3590: LD_EXP 47
3594: PUSH
3595: EMPTY
3596: LIST
3597: ST_TO_ADDR
// for i := 1 to 4 do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_INT 4
3610: PUSH
3611: FOR_TO
3612: IFFALSE 3692
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3614: LD_ADDR_VAR 0 3
3618: PUSH
3619: DOUBLE
3620: LD_INT 1
3622: DEC
3623: ST_TO_ADDR
3624: LD_INT 5
3626: PUSH
3627: LD_INT 2
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: LD_INT 1
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: PUSH
3642: LD_VAR 0 2
3646: ARRAY
3647: PUSH
3648: FOR_TO
3649: IFFALSE 3688
// begin PrepareHuman ( false , i , 5 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_INT 5
3661: PPUSH
3662: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3666: LD_ADDR_EXP 51
3670: PUSH
3671: LD_EXP 51
3675: PPUSH
3676: CALL_OW 44
3680: PPUSH
3681: CALL 68491 0 2
3685: ST_TO_ADDR
// end ;
3686: GO 3648
3688: POP
3689: POP
// end ;
3690: GO 3611
3692: POP
3693: POP
// if HexInfo ( 5 , 3 ) then
3694: LD_INT 5
3696: PPUSH
3697: LD_INT 3
3699: PPUSH
3700: CALL_OW 428
3704: IFFALSE 3721
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3706: LD_INT 5
3708: PPUSH
3709: LD_INT 3
3711: PPUSH
3712: CALL_OW 428
3716: PPUSH
3717: CALL_OW 64
// for i in rolfSquad do
3721: LD_ADDR_VAR 0 2
3725: PUSH
3726: LD_EXP 51
3730: PUSH
3731: FOR_IN
3732: IFFALSE 3868
// begin uc_direction := 2 ;
3734: LD_ADDR_OWVAR 24
3738: PUSH
3739: LD_INT 2
3741: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3742: LD_VAR 0 2
3746: PPUSH
3747: CALL_OW 257
3751: PUSH
3752: LD_INT 3
3754: EQUAL
3755: IFFALSE 3829
// begin uc_side := 8 ;
3757: LD_ADDR_OWVAR 20
3761: PUSH
3762: LD_INT 8
3764: ST_TO_ADDR
// uc_nation := 2 ;
3765: LD_ADDR_OWVAR 21
3769: PUSH
3770: LD_INT 2
3772: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3773: LD_INT 13
3775: PPUSH
3776: LD_INT 1
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 27
3784: PPUSH
3785: LD_INT 88
3787: PPUSH
3788: CALL 35311 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3792: CALL_OW 45
3796: PPUSH
3797: LD_INT 11
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3807: LD_VAR 0 2
3811: PPUSH
3812: LD_INT 5
3814: PPUSH
3815: LD_INT 3
3817: PPUSH
3818: CALL_OW 428
3822: PPUSH
3823: CALL_OW 52
// end else
3827: GO 3844
// PlaceUnitArea ( i , northSpawn , false ) ;
3829: LD_VAR 0 2
3833: PPUSH
3834: LD_INT 11
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3844: LD_VAR 0 2
3848: PPUSH
3849: LD_INT 29
3851: PPUSH
3852: LD_INT 10
3854: PPUSH
3855: CALL_OW 111
// wait ( 0 0$2 ) ;
3859: LD_INT 70
3861: PPUSH
3862: CALL_OW 67
// end ;
3866: GO 3731
3868: POP
3869: POP
// wait ( 0 0$5 ) ;
3870: LD_INT 175
3872: PPUSH
3873: CALL_OW 67
// end ;
3877: LD_VAR 0 1
3881: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3882: LD_INT 0
3884: PPUSH
3885: PPUSH
3886: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3887: LD_EXP 47
3891: PPUSH
3892: LD_INT 94
3894: PPUSH
3895: LD_INT 63
3897: PPUSH
3898: CALL_OW 428
3902: PPUSH
3903: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3907: LD_ADDR_VAR 0 3
3911: PUSH
3912: LD_INT 4
3914: PUSH
3915: LD_INT 82
3917: PUSH
3918: LD_INT 64
3920: PUSH
3921: LD_INT 1
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 31
3932: PUSH
3933: LD_INT 73
3935: PUSH
3936: LD_INT 58
3938: PUSH
3939: LD_INT 0
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: ST_TO_ADDR
// for i in tmp do
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_VAR 0 3
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4027
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3965: LD_EXP 51
3969: PPUSH
3970: LD_INT 25
3972: PUSH
3973: LD_INT 2
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PPUSH
3980: CALL_OW 72
3984: PPUSH
3985: LD_VAR 0 2
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_VAR 0 2
3998: PUSH
3999: LD_INT 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 2
4007: PUSH
4008: LD_INT 3
4010: ARRAY
4011: PPUSH
4012: LD_VAR 0 2
4016: PUSH
4017: LD_INT 4
4019: ARRAY
4020: PPUSH
4021: CALL_OW 205
4025: GO 3962
4027: POP
4028: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4029: LD_EXP 51
4033: PUSH
4034: LD_INT 2
4036: ARRAY
4037: PPUSH
4038: LD_INT 63
4040: PPUSH
4041: LD_INT 42
4043: PPUSH
4044: CALL_OW 428
4048: PPUSH
4049: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4053: LD_EXP 51
4057: PUSH
4058: LD_INT 3
4060: ARRAY
4061: PPUSH
4062: LD_INT 94
4064: PPUSH
4065: LD_INT 63
4067: PPUSH
4068: CALL_OW 428
4072: PPUSH
4073: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4077: LD_INT 35
4079: PPUSH
4080: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4084: LD_EXP 51
4088: PPUSH
4089: LD_INT 25
4091: PUSH
4092: LD_INT 2
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 3
4101: PUSH
4102: LD_INT 60
4104: PUSH
4105: EMPTY
4106: LIST
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 72
4120: IFFALSE 4077
// rolfScriptBase := true ;
4122: LD_ADDR_EXP 9
4126: PUSH
4127: LD_INT 1
4129: ST_TO_ADDR
// end ;
4130: LD_VAR 0 1
4134: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4135: LD_EXP 9
4139: IFFALSE 4156
4141: PUSH
4142: LD_EXP 47
4146: PPUSH
4147: CALL_OW 255
4151: PUSH
4152: LD_INT 8
4154: EQUAL
4155: AND
4156: IFFALSE 5175
4158: GO 4160
4160: DISABLE
4161: LD_INT 0
4163: PPUSH
4164: PPUSH
4165: PPUSH
4166: PPUSH
4167: PPUSH
4168: PPUSH
4169: PPUSH
4170: PPUSH
4171: PPUSH
4172: PPUSH
// begin enable ;
4173: ENABLE
// if not rolfSquad then
4174: LD_EXP 51
4178: NOT
4179: IFFALSE 4183
// exit ;
4181: GO 5175
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4183: LD_ADDR_VAR 0 9
4187: PUSH
4188: LD_INT 12
4190: PPUSH
4191: LD_INT 81
4193: PUSH
4194: LD_INT 8
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PPUSH
4201: CALL_OW 70
4205: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4206: LD_ADDR_VAR 0 5
4210: PUSH
4211: LD_EXP 51
4215: PPUSH
4216: LD_INT 25
4218: PUSH
4219: LD_INT 1
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PPUSH
4226: CALL_OW 72
4230: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4231: LD_ADDR_VAR 0 6
4235: PUSH
4236: LD_EXP 51
4240: PPUSH
4241: LD_INT 25
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 72
4255: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4256: LD_ADDR_VAR 0 8
4260: PUSH
4261: LD_EXP 51
4265: PPUSH
4266: LD_INT 25
4268: PUSH
4269: LD_INT 3
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PPUSH
4276: CALL_OW 72
4280: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4281: LD_ADDR_VAR 0 7
4285: PUSH
4286: LD_EXP 51
4290: PPUSH
4291: LD_INT 25
4293: PUSH
4294: LD_INT 4
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 72
4305: ST_TO_ADDR
// if sol then
4306: LD_VAR 0 5
4310: IFFALSE 4612
// for i in sol union Rolf do
4312: LD_ADDR_VAR 0 1
4316: PUSH
4317: LD_VAR 0 5
4321: PUSH
4322: LD_EXP 47
4326: UNION
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4610
// if not IsInUnit ( i ) and not HasTask ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 310
4340: NOT
4341: IFFALSE 4355
4343: PUSH
4344: LD_VAR 0 1
4348: PPUSH
4349: CALL_OW 314
4353: NOT
4354: AND
4355: IFFALSE 4608
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4357: LD_VAR 0 1
4361: PPUSH
4362: CALL_OW 256
4366: PUSH
4367: LD_INT 500
4369: LESS
4370: IFFALSE 4393
4372: PUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: LD_INT 80
4380: PPUSH
4381: LD_INT 49
4383: PPUSH
4384: CALL_OW 297
4388: PUSH
4389: LD_INT 6
4391: GREATER
4392: AND
4393: IFFALSE 4412
// begin ComMoveXY ( i , 80 , 49 ) ;
4395: LD_VAR 0 1
4399: PPUSH
4400: LD_INT 80
4402: PPUSH
4403: LD_INT 49
4405: PPUSH
4406: CALL_OW 111
// continue ;
4410: GO 4328
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4412: LD_ADDR_VAR 0 4
4416: PUSH
4417: LD_INT 22
4419: PUSH
4420: LD_INT 8
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 50
4429: PUSH
4430: EMPTY
4431: LIST
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: LD_INT 30
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 30
4448: PUSH
4449: LD_INT 5
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 30
4458: PUSH
4459: LD_INT 32
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 30
4468: PUSH
4469: LD_INT 31
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: ST_TO_ADDR
// if tmp then
4493: LD_VAR 0 4
4497: IFFALSE 4608
// begin for b in tmp do
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: LD_VAR 0 4
4508: PUSH
4509: FOR_IN
4510: IFFALSE 4606
// begin case GetBType ( b ) of b_armoury , b_barracks :
4512: LD_VAR 0 2
4516: PPUSH
4517: CALL_OW 266
4521: PUSH
4522: LD_INT 4
4524: DOUBLE
4525: EQUAL
4526: IFTRUE 4536
4528: LD_INT 5
4530: DOUBLE
4531: EQUAL
4532: IFTRUE 4536
4534: GO 4547
4536: POP
// p := 6 ; b_breastwork , b_bunker :
4537: LD_ADDR_VAR 0 3
4541: PUSH
4542: LD_INT 6
4544: ST_TO_ADDR
4545: GO 4573
4547: LD_INT 31
4549: DOUBLE
4550: EQUAL
4551: IFTRUE 4561
4553: LD_INT 32
4555: DOUBLE
4556: EQUAL
4557: IFTRUE 4561
4559: GO 4572
4561: POP
// p := 1 ; end ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_INT 1
4569: ST_TO_ADDR
4570: GO 4573
4572: POP
// if UnitsInside ( b ) < p then
4573: LD_VAR 0 2
4577: PPUSH
4578: CALL_OW 313
4582: PUSH
4583: LD_VAR 0 3
4587: LESS
4588: IFFALSE 4604
// ComEnterUnit ( i , b ) ;
4590: LD_VAR 0 1
4594: PPUSH
4595: LD_VAR 0 2
4599: PPUSH
4600: CALL_OW 120
// end ;
4604: GO 4509
4606: POP
4607: POP
// end ; end ;
4608: GO 4328
4610: POP
4611: POP
// if sci then
4612: LD_VAR 0 7
4616: IFFALSE 4671
// for i in sci do
4618: LD_ADDR_VAR 0 1
4622: PUSH
4623: LD_VAR 0 7
4627: PUSH
4628: FOR_IN
4629: IFFALSE 4669
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4631: LD_VAR 0 1
4635: PPUSH
4636: LD_INT 80
4638: PPUSH
4639: LD_INT 49
4641: PPUSH
4642: CALL_OW 297
4646: PUSH
4647: LD_INT 9
4649: GREATER
4650: IFFALSE 4667
// ComMoveXY ( i , 80 , 49 ) ;
4652: LD_VAR 0 1
4656: PPUSH
4657: LD_INT 80
4659: PPUSH
4660: LD_INT 49
4662: PPUSH
4663: CALL_OW 111
// end ;
4667: GO 4628
4669: POP
4670: POP
// if mech then
4671: LD_VAR 0 8
4675: IFFALSE 4893
// for i in mech do
4677: LD_ADDR_VAR 0 1
4681: PUSH
4682: LD_VAR 0 8
4686: PUSH
4687: FOR_IN
4688: IFFALSE 4891
// begin hasVehicle := IsInUnit ( i ) ;
4690: LD_ADDR_VAR 0 10
4694: PUSH
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 310
4704: ST_TO_ADDR
// if enemyInBase then
4705: LD_VAR 0 9
4709: IFFALSE 4807
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4711: LD_VAR 0 10
4715: IFFALSE 4732
4717: PUSH
4718: LD_VAR 0 10
4722: PPUSH
4723: CALL_OW 256
4727: PUSH
4728: LD_INT 500
4730: GREATER
4731: AND
4732: IFFALSE 4760
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4734: LD_VAR 0 10
4738: PPUSH
4739: LD_VAR 0 9
4743: PPUSH
4744: LD_VAR 0 10
4748: PPUSH
4749: CALL_OW 74
4753: PPUSH
4754: CALL_OW 115
4758: GO 4805
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4760: LD_VAR 0 10
4764: PPUSH
4765: LD_INT 86
4767: PPUSH
4768: LD_INT 49
4770: PPUSH
4771: CALL_OW 297
4775: PUSH
4776: LD_INT 8
4778: GREATER
4779: IFFALSE 4805
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4781: LD_VAR 0 10
4785: PPUSH
4786: LD_INT 86
4788: PPUSH
4789: LD_INT 49
4791: PPUSH
4792: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: CALL 70327 0 1
// end end else
4805: GO 4889
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4807: LD_VAR 0 1
4811: PPUSH
4812: LD_INT 86
4814: PPUSH
4815: LD_INT 49
4817: PPUSH
4818: CALL_OW 297
4822: PUSH
4823: LD_INT 8
4825: GREATER
4826: IFFALSE 4845
// ComMoveXY ( i , 86 , 49 ) else
4828: LD_VAR 0 1
4832: PPUSH
4833: LD_INT 86
4835: PPUSH
4836: LD_INT 49
4838: PPUSH
4839: CALL_OW 111
4843: GO 4889
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4845: LD_VAR 0 10
4849: IFFALSE 4866
4851: PUSH
4852: LD_VAR 0 10
4856: PPUSH
4857: CALL_OW 256
4861: PUSH
4862: LD_INT 1000
4864: LESS
4865: AND
4866: IFFALSE 4889
// begin SetFuel ( hasVehicle , 100 ) ;
4868: LD_VAR 0 10
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4880: LD_VAR 0 1
4884: PPUSH
4885: CALL 70205 0 1
// end ; end ; end ;
4889: GO 4687
4891: POP
4892: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4893: LD_ADDR_VAR 0 4
4897: PUSH
4898: LD_INT 12
4900: PPUSH
4901: LD_INT 3
4903: PUSH
4904: LD_INT 24
4906: PUSH
4907: LD_INT 1000
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 21
4920: PUSH
4921: LD_INT 3
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PPUSH
4932: CALL_OW 70
4936: ST_TO_ADDR
// if tmp and eng then
4937: LD_VAR 0 4
4941: IFFALSE 4949
4943: PUSH
4944: LD_VAR 0 6
4948: AND
4949: IFFALSE 5055
// begin for i in eng do
4951: LD_ADDR_VAR 0 1
4955: PUSH
4956: LD_VAR 0 6
4960: PUSH
4961: FOR_IN
4962: IFFALSE 5053
// if IsInUnit ( i ) then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 310
4973: IFFALSE 4986
// ComExitBuilding ( i ) else
4975: LD_VAR 0 1
4979: PPUSH
4980: CALL_OW 122
4984: GO 5051
// if GetLives ( i ) = 1000 then
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 256
4995: PUSH
4996: LD_INT 1000
4998: EQUAL
4999: IFFALSE 5021
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5001: LD_VAR 0 1
5005: PPUSH
5006: LD_VAR 0 4
5010: PUSH
5011: LD_INT 1
5013: ARRAY
5014: PPUSH
5015: CALL_OW 130
5019: GO 5051
// if GetLives ( i ) < 700 then
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 256
5030: PUSH
5031: LD_INT 700
5033: LESS
5034: IFFALSE 5051
// ComMoveXY ( i , 80 , 49 ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_INT 80
5043: PPUSH
5044: LD_INT 49
5046: PPUSH
5047: CALL_OW 111
5051: GO 4961
5053: POP
5054: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5055: LD_VAR 0 4
5059: NOT
5060: IFFALSE 5086
5062: PUSH
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_INT 3
5070: PUSH
5071: LD_INT 54
5073: PUSH
5074: EMPTY
5075: LIST
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PPUSH
5081: CALL_OW 72
5085: AND
5086: IFFALSE 5175
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5088: LD_ADDR_VAR 0 1
5092: PUSH
5093: LD_VAR 0 6
5097: PPUSH
5098: LD_INT 3
5100: PUSH
5101: LD_INT 54
5103: PUSH
5104: EMPTY
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PPUSH
5111: CALL_OW 72
5115: PUSH
5116: FOR_IN
5117: IFFALSE 5173
// if GetLives ( i ) < 1000 then
5119: LD_VAR 0 1
5123: PPUSH
5124: CALL_OW 256
5128: PUSH
5129: LD_INT 1000
5131: LESS
5132: IFFALSE 5151
// ComMoveXY ( i , 80 , 49 ) else
5134: LD_VAR 0 1
5138: PPUSH
5139: LD_INT 80
5141: PPUSH
5142: LD_INT 49
5144: PPUSH
5145: CALL_OW 111
5149: GO 5171
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5151: LD_VAR 0 1
5155: PPUSH
5156: LD_INT 86
5158: PPUSH
5159: LD_INT 54
5161: PPUSH
5162: CALL_OW 428
5166: PPUSH
5167: CALL_OW 120
5171: GO 5116
5173: POP
5174: POP
// end ;
5175: PPOPN 10
5177: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5178: LD_INT 0
5180: PPUSH
5181: PPUSH
5182: PPUSH
5183: PPUSH
// uc_side := 5 ;
5184: LD_ADDR_OWVAR 20
5188: PUSH
5189: LD_INT 5
5191: ST_TO_ADDR
// uc_nation := 2 ;
5192: LD_ADDR_OWVAR 21
5196: PUSH
5197: LD_INT 2
5199: ST_TO_ADDR
// omarSquad := [ ] ;
5200: LD_ADDR_EXP 52
5204: PUSH
5205: EMPTY
5206: ST_TO_ADDR
// for i := 1 to 4 do
5207: LD_ADDR_VAR 0 2
5211: PUSH
5212: DOUBLE
5213: LD_INT 1
5215: DEC
5216: ST_TO_ADDR
5217: LD_INT 4
5219: PUSH
5220: FOR_TO
5221: IFFALSE 5346
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5223: LD_ADDR_VAR 0 3
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 6
5235: PUSH
5236: LD_INT 2
5238: PUSH
5239: LD_INT 2
5241: PUSH
5242: LD_EXP 21
5246: PLUS
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: LD_VAR 0 2
5261: ARRAY
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5342
// begin PrepareHuman ( false , i , 5 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: LD_INT 5
5276: PPUSH
5277: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5281: LD_ADDR_EXP 52
5285: PUSH
5286: LD_EXP 52
5290: PPUSH
5291: CALL_OW 44
5295: PPUSH
5296: CALL 68491 0 2
5300: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5301: LD_VAR 0 2
5305: PUSH
5306: LD_INT 1
5308: EQUAL
5309: IFFALSE 5320
5311: PUSH
5312: LD_INT 50
5314: PPUSH
5315: CALL_OW 13
5319: AND
5320: IFFALSE 5340
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5322: LD_EXP 52
5326: PUSH
5327: LD_EXP 52
5331: ARRAY
5332: PPUSH
5333: LD_INT 8
5335: PPUSH
5336: CALL_OW 336
// end ;
5340: GO 5263
5342: POP
5343: POP
// end ;
5344: GO 5220
5346: POP
5347: POP
// if HexInfo ( 340 , 205 ) then
5348: LD_INT 340
5350: PPUSH
5351: LD_INT 205
5353: PPUSH
5354: CALL_OW 428
5358: IFFALSE 5375
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5360: LD_INT 340
5362: PPUSH
5363: LD_INT 205
5365: PPUSH
5366: CALL_OW 428
5370: PPUSH
5371: CALL_OW 64
// p := 0 ;
5375: LD_ADDR_VAR 0 4
5379: PUSH
5380: LD_INT 0
5382: ST_TO_ADDR
// for i in omarSquad do
5383: LD_ADDR_VAR 0 2
5387: PUSH
5388: LD_EXP 52
5392: PUSH
5393: FOR_IN
5394: IFFALSE 5597
// begin uc_direction := 4 ;
5396: LD_ADDR_OWVAR 24
5400: PUSH
5401: LD_INT 4
5403: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5404: LD_VAR 0 2
5408: PPUSH
5409: CALL_OW 257
5413: PUSH
5414: LD_INT 3
5416: EQUAL
5417: IFFALSE 5429
5419: PUSH
5420: LD_VAR 0 4
5424: PUSH
5425: LD_INT 2
5427: LESS
5428: AND
5429: IFFALSE 5558
// begin p := p + 1 ;
5431: LD_ADDR_VAR 0 4
5435: PUSH
5436: LD_VAR 0 4
5440: PUSH
5441: LD_INT 1
5443: PLUS
5444: ST_TO_ADDR
// uc_side := 5 ;
5445: LD_ADDR_OWVAR 20
5449: PUSH
5450: LD_INT 5
5452: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5453: LD_INT 0
5455: PPUSH
5456: LD_INT 1
5458: PPUSH
5459: CALL_OW 12
5463: IFFALSE 5494
// begin uc_nation := 2 ;
5465: LD_ADDR_OWVAR 21
5469: PUSH
5470: LD_INT 2
5472: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5473: LD_INT 13
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: LD_INT 1
5481: PPUSH
5482: LD_INT 27
5484: PPUSH
5485: LD_INT 88
5487: PPUSH
5488: CALL 35311 0 5
// end else
5492: GO 5521
// begin uc_nation := 3 ;
5494: LD_ADDR_OWVAR 21
5498: PUSH
5499: LD_INT 3
5501: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5502: LD_INT 22
5504: PPUSH
5505: LD_INT 1
5507: PPUSH
5508: LD_INT 1
5510: PPUSH
5511: LD_INT 45
5513: PPUSH
5514: LD_INT 88
5516: PPUSH
5517: CALL 35311 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5521: CALL_OW 45
5525: PPUSH
5526: LD_INT 13
5528: PPUSH
5529: LD_INT 0
5531: PPUSH
5532: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5536: LD_VAR 0 2
5540: PPUSH
5541: LD_INT 340
5543: PPUSH
5544: LD_INT 205
5546: PPUSH
5547: CALL_OW 428
5551: PPUSH
5552: CALL_OW 52
// end else
5556: GO 5573
// PlaceUnitArea ( i , southSpawn , false ) ;
5558: LD_VAR 0 2
5562: PPUSH
5563: LD_INT 13
5565: PPUSH
5566: LD_INT 0
5568: PPUSH
5569: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5573: LD_VAR 0 2
5577: PPUSH
5578: LD_INT 333
5580: PPUSH
5581: LD_INT 210
5583: PPUSH
5584: CALL_OW 111
// wait ( 0 0$2 ) ;
5588: LD_INT 70
5590: PPUSH
5591: CALL_OW 67
// end ;
5595: GO 5393
5597: POP
5598: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5599: LD_EXP 44
5603: PPUSH
5604: LD_INT 340
5606: PPUSH
5607: LD_INT 205
5609: PPUSH
5610: LD_INT 0
5612: PPUSH
5613: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5617: LD_EXP 44
5621: PPUSH
5622: LD_INT 333
5624: PPUSH
5625: LD_INT 206
5627: PPUSH
5628: CALL_OW 111
// wait ( 0 0$2 ) ;
5632: LD_INT 70
5634: PPUSH
5635: CALL_OW 67
// ComHold ( omarSquad ) ;
5639: LD_EXP 52
5643: PPUSH
5644: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5648: LD_EXP 44
5652: PUSH
5653: LD_EXP 52
5657: PPUSH
5658: LD_INT 2
5660: PUSH
5661: LD_INT 25
5663: PUSH
5664: LD_INT 1
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 25
5673: PUSH
5674: LD_INT 8
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PPUSH
5686: CALL_OW 72
5690: UNION
5691: PUSH
5692: LD_INT 22
5694: PUSH
5695: LD_INT 5
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 21
5704: PUSH
5705: LD_INT 2
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: UNION
5721: PPUSH
5722: LD_INT 315
5724: PPUSH
5725: LD_INT 214
5727: PPUSH
5728: CALL_OW 114
// wait ( 0 0$22 ) ;
5732: LD_INT 770
5734: PPUSH
5735: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5739: LD_EXP 52
5743: PUSH
5744: LD_EXP 44
5748: UNION
5749: PPUSH
5750: LD_INT 329
5752: PPUSH
5753: LD_INT 231
5755: PPUSH
5756: CALL_OW 114
// end ;
5760: LD_VAR 0 1
5764: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5765: LD_EXP 10
5769: IFFALSE 6866
5771: GO 5773
5773: DISABLE
5774: LD_INT 0
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
5785: PPUSH
5786: PPUSH
// begin enable ;
5787: ENABLE
// if not omarSquad then
5788: LD_EXP 52
5792: NOT
5793: IFFALSE 5797
// exit ;
5795: GO 6866
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5797: LD_ADDR_VAR 0 10
5801: PUSH
5802: LD_INT 14
5804: PPUSH
5805: LD_INT 81
5807: PUSH
5808: LD_INT 5
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PPUSH
5815: CALL_OW 70
5819: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5820: LD_ADDR_VAR 0 6
5824: PUSH
5825: LD_EXP 52
5829: PPUSH
5830: LD_INT 2
5832: PUSH
5833: LD_INT 25
5835: PUSH
5836: LD_INT 1
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: PUSH
5843: LD_INT 25
5845: PUSH
5846: LD_INT 8
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 72
5862: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5863: LD_ADDR_VAR 0 7
5867: PUSH
5868: LD_EXP 52
5872: PPUSH
5873: LD_INT 25
5875: PUSH
5876: LD_INT 2
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PPUSH
5883: CALL_OW 72
5887: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5888: LD_ADDR_VAR 0 9
5892: PUSH
5893: LD_EXP 52
5897: PPUSH
5898: LD_INT 25
5900: PUSH
5901: LD_INT 3
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: CALL_OW 72
5912: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5913: LD_ADDR_VAR 0 8
5917: PUSH
5918: LD_EXP 52
5922: PPUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 4
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PPUSH
5933: CALL_OW 72
5937: ST_TO_ADDR
// if sol then
5938: LD_VAR 0 6
5942: IFFALSE 6312
// for i in sol do
5944: LD_ADDR_VAR 0 1
5948: PUSH
5949: LD_VAR 0 6
5953: PUSH
5954: FOR_IN
5955: IFFALSE 6310
// if not HasTask ( i ) then
5957: LD_VAR 0 1
5961: PPUSH
5962: CALL_OW 314
5966: NOT
5967: IFFALSE 6308
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5969: LD_VAR 0 1
5973: PPUSH
5974: CALL_OW 310
5978: NOT
5979: IFFALSE 5996
5981: PUSH
5982: LD_VAR 0 1
5986: PPUSH
5987: CALL_OW 256
5991: PUSH
5992: LD_INT 500
5994: LESS
5995: AND
5996: IFFALSE 6019
5998: PUSH
5999: LD_VAR 0 1
6003: PPUSH
6004: LD_INT 333
6006: PPUSH
6007: LD_INT 234
6009: PPUSH
6010: CALL_OW 297
6014: PUSH
6015: LD_INT 6
6017: GREATER
6018: AND
6019: IFFALSE 6038
// begin ComMoveXY ( i , 333 , 234 ) ;
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 333
6028: PPUSH
6029: LD_INT 234
6031: PPUSH
6032: CALL_OW 111
// continue ;
6036: GO 5954
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
6038: LD_ADDR_VAR 0 5
6042: PUSH
6043: LD_INT 22
6045: PUSH
6046: LD_INT 5
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 58
6055: PUSH
6056: EMPTY
6057: LIST
6058: PUSH
6059: LD_INT 50
6061: PUSH
6062: EMPTY
6063: LIST
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: LD_INT 30
6070: PUSH
6071: LD_INT 32
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 30
6080: PUSH
6081: LD_INT 31
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PPUSH
6099: CALL_OW 69
6103: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6104: LD_VAR 0 5
6108: IFFALSE 6130
6110: PUSH
6111: LD_VAR 0 1
6115: PPUSH
6116: CALL_OW 310
6120: PPUSH
6121: CALL_OW 266
6125: PUSH
6126: LD_INT 31
6128: NONEQUAL
6129: AND
6130: IFFALSE 6212
// begin for j in tmp do
6132: LD_ADDR_VAR 0 2
6136: PUSH
6137: LD_VAR 0 5
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6208
// if GetTag ( j ) <> 1 then
6145: LD_VAR 0 2
6149: PPUSH
6150: CALL_OW 110
6154: PUSH
6155: LD_INT 1
6157: NONEQUAL
6158: IFFALSE 6206
// begin SetTag ( j , 1 ) ;
6160: LD_VAR 0 2
6164: PPUSH
6165: LD_INT 1
6167: PPUSH
6168: CALL_OW 109
// if IsInUnit ( i ) then
6172: LD_VAR 0 1
6176: PPUSH
6177: CALL_OW 310
6181: IFFALSE 6192
// ComExit ( i ) ;
6183: LD_VAR 0 1
6187: PPUSH
6188: CALL 68889 0 1
// AddComEnterUnit ( i , j ) ;
6192: LD_VAR 0 1
6196: PPUSH
6197: LD_VAR 0 2
6201: PPUSH
6202: CALL_OW 180
// end ;
6206: GO 6142
6208: POP
6209: POP
// end else
6210: GO 6308
// if not IsInUnit ( i ) then
6212: LD_VAR 0 1
6216: PPUSH
6217: CALL_OW 310
6221: NOT
6222: IFFALSE 6308
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6224: LD_ADDR_VAR 0 5
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_INT 5
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 50
6241: PUSH
6242: EMPTY
6243: LIST
6244: PUSH
6245: LD_INT 30
6247: PUSH
6248: LD_INT 4
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 69
6264: ST_TO_ADDR
// if tmp then
6265: LD_VAR 0 5
6269: IFFALSE 6308
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6271: LD_VAR 0 5
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PPUSH
6280: CALL_OW 313
6284: PUSH
6285: LD_INT 6
6287: LESS
6288: IFFALSE 6308
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6290: LD_VAR 0 1
6294: PPUSH
6295: LD_VAR 0 5
6299: PUSH
6300: LD_INT 1
6302: ARRAY
6303: PPUSH
6304: CALL_OW 120
// end ; end ;
6308: GO 5954
6310: POP
6311: POP
// if sci then
6312: LD_VAR 0 8
6316: IFFALSE 6371
// for i in sci do
6318: LD_ADDR_VAR 0 1
6322: PUSH
6323: LD_VAR 0 8
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6369
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 333
6338: PPUSH
6339: LD_INT 234
6341: PPUSH
6342: CALL_OW 297
6346: PUSH
6347: LD_INT 9
6349: GREATER
6350: IFFALSE 6367
// ComMoveXY ( i , 333 , 234 ) ;
6352: LD_VAR 0 1
6356: PPUSH
6357: LD_INT 333
6359: PPUSH
6360: LD_INT 234
6362: PPUSH
6363: CALL_OW 111
// end ;
6367: GO 6328
6369: POP
6370: POP
// if mech then
6371: LD_VAR 0 9
6375: IFFALSE 6584
// for i in mech do
6377: LD_ADDR_VAR 0 1
6381: PUSH
6382: LD_VAR 0 9
6386: PUSH
6387: FOR_IN
6388: IFFALSE 6582
// begin hasVehicle := IsInUnit ( i ) ;
6390: LD_ADDR_VAR 0 11
6394: PUSH
6395: LD_VAR 0 1
6399: PPUSH
6400: CALL_OW 310
6404: ST_TO_ADDR
// if enemyInBase then
6405: LD_VAR 0 10
6409: IFFALSE 6498
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6411: LD_VAR 0 11
6415: IFFALSE 6432
6417: PUSH
6418: LD_VAR 0 11
6422: PPUSH
6423: CALL_OW 256
6427: PUSH
6428: LD_INT 500
6430: GREATER
6431: AND
6432: IFFALSE 6460
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6434: LD_VAR 0 11
6438: PPUSH
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 11
6448: PPUSH
6449: CALL_OW 74
6453: PPUSH
6454: CALL_OW 115
6458: GO 6496
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6460: LD_VAR 0 11
6464: PPUSH
6465: LD_INT 333
6467: PPUSH
6468: LD_INT 234
6470: PPUSH
6471: CALL_OW 297
6475: PUSH
6476: LD_INT 6
6478: GREATER
6479: IFFALSE 6496
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6481: LD_VAR 0 11
6485: PPUSH
6486: LD_INT 333
6488: PPUSH
6489: LD_INT 234
6491: PPUSH
6492: CALL_OW 111
// end else
6496: GO 6580
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_INT 333
6505: PPUSH
6506: LD_INT 234
6508: PPUSH
6509: CALL_OW 297
6513: PUSH
6514: LD_INT 6
6516: GREATER
6517: IFFALSE 6536
// ComMoveXY ( i , 333 , 234 ) else
6519: LD_VAR 0 1
6523: PPUSH
6524: LD_INT 333
6526: PPUSH
6527: LD_INT 234
6529: PPUSH
6530: CALL_OW 111
6534: GO 6580
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6536: LD_VAR 0 11
6540: IFFALSE 6557
6542: PUSH
6543: LD_VAR 0 11
6547: PPUSH
6548: CALL_OW 256
6552: PUSH
6553: LD_INT 1000
6555: LESS
6556: AND
6557: IFFALSE 6580
// begin SetFuel ( hasVehicle , 100 ) ;
6559: LD_VAR 0 11
6563: PPUSH
6564: LD_INT 100
6566: PPUSH
6567: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6571: LD_VAR 0 1
6575: PPUSH
6576: CALL 70205 0 1
// end ; end ; end ;
6580: GO 6387
6582: POP
6583: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_INT 14
6591: PPUSH
6592: LD_INT 3
6594: PUSH
6595: LD_INT 24
6597: PUSH
6598: LD_INT 1000
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 21
6611: PUSH
6612: LD_INT 3
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PPUSH
6623: CALL_OW 70
6627: ST_TO_ADDR
// if tmp and eng then
6628: LD_VAR 0 5
6632: IFFALSE 6640
6634: PUSH
6635: LD_VAR 0 7
6639: AND
6640: IFFALSE 6746
// begin for i in eng do
6642: LD_ADDR_VAR 0 1
6646: PUSH
6647: LD_VAR 0 7
6651: PUSH
6652: FOR_IN
6653: IFFALSE 6744
// if IsInUnit ( i ) then
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 310
6664: IFFALSE 6677
// ComExitBuilding ( i ) else
6666: LD_VAR 0 1
6670: PPUSH
6671: CALL_OW 122
6675: GO 6742
// if GetLives ( i ) = 1000 then
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 256
6686: PUSH
6687: LD_INT 1000
6689: EQUAL
6690: IFFALSE 6712
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6692: LD_VAR 0 1
6696: PPUSH
6697: LD_VAR 0 5
6701: PUSH
6702: LD_INT 1
6704: ARRAY
6705: PPUSH
6706: CALL_OW 130
6710: GO 6742
// if GetLives ( i ) < 700 then
6712: LD_VAR 0 1
6716: PPUSH
6717: CALL_OW 256
6721: PUSH
6722: LD_INT 700
6724: LESS
6725: IFFALSE 6742
// ComMoveXY ( i , 333 , 234 ) ;
6727: LD_VAR 0 1
6731: PPUSH
6732: LD_INT 333
6734: PPUSH
6735: LD_INT 234
6737: PPUSH
6738: CALL_OW 111
6742: GO 6652
6744: POP
6745: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6746: LD_VAR 0 5
6750: NOT
6751: IFFALSE 6777
6753: PUSH
6754: LD_VAR 0 7
6758: PPUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 54
6764: PUSH
6765: EMPTY
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PPUSH
6772: CALL_OW 72
6776: AND
6777: IFFALSE 6866
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6779: LD_ADDR_VAR 0 1
6783: PUSH
6784: LD_VAR 0 7
6788: PPUSH
6789: LD_INT 3
6791: PUSH
6792: LD_INT 54
6794: PUSH
6795: EMPTY
6796: LIST
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PPUSH
6802: CALL_OW 72
6806: PUSH
6807: FOR_IN
6808: IFFALSE 6864
// if GetLives ( i ) < 1000 then
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 256
6819: PUSH
6820: LD_INT 1000
6822: LESS
6823: IFFALSE 6842
// ComMoveXY ( i , 333 , 234 ) else
6825: LD_VAR 0 1
6829: PPUSH
6830: LD_INT 333
6832: PPUSH
6833: LD_INT 234
6835: PPUSH
6836: CALL_OW 111
6840: GO 6862
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6842: LD_VAR 0 1
6846: PPUSH
6847: LD_INT 341
6849: PPUSH
6850: LD_INT 232
6852: PPUSH
6853: CALL_OW 428
6857: PPUSH
6858: CALL_OW 120
6862: GO 6807
6864: POP
6865: POP
// end ;
6866: PPOPN 11
6868: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6869: LD_EXP 44
6873: PPUSH
6874: CALL_OW 256
6878: PUSH
6879: LD_INT 1000
6881: LESS
6882: IFFALSE 6900
6884: GO 6886
6886: DISABLE
// begin enable ;
6887: ENABLE
// SetLives ( Omar , 1000 ) ;
6888: LD_EXP 44
6892: PPUSH
6893: LD_INT 1000
6895: PPUSH
6896: CALL_OW 234
// end ;
6900: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6901: LD_EXP 47
6905: PPUSH
6906: CALL_OW 256
6910: PUSH
6911: LD_INT 1000
6913: LESS
6914: IFFALSE 6922
6916: PUSH
6917: LD_EXP 32
6921: AND
6922: IFFALSE 6940
6924: GO 6926
6926: DISABLE
// begin enable ;
6927: ENABLE
// SetLives ( Rolf , 1000 ) ;
6928: LD_EXP 47
6932: PPUSH
6933: LD_INT 1000
6935: PPUSH
6936: CALL_OW 234
// end ;
6940: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6941: LD_EXP 32
6945: IFFALSE 7635
6947: GO 6949
6949: DISABLE
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: LD_INT 215
6965: PUSH
6966: LD_INT 162
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 195
6975: PUSH
6976: LD_INT 163
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 174
6985: PUSH
6986: LD_INT 162
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 145
6995: PUSH
6996: LD_INT 163
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 127
7005: PUSH
7006: LD_INT 163
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
7020: LD_ADDR_VAR 0 6
7024: PUSH
7025: LD_INT 221
7027: PUSH
7028: LD_INT 161
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
7035: LD_ADDR_VAR 0 2
7039: PUSH
7040: LD_EXP 47
7044: PUSH
7045: LD_EXP 51
7049: UNION
7050: ST_TO_ADDR
// if not tmp then
7051: LD_VAR 0 2
7055: NOT
7056: IFFALSE 7060
// exit ;
7058: GO 7635
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7060: LD_VAR 0 2
7064: PPUSH
7065: LD_VAR 0 6
7069: PUSH
7070: LD_INT 1
7072: ARRAY
7073: PPUSH
7074: LD_VAR 0 6
7078: PUSH
7079: LD_INT 2
7081: ARRAY
7082: PPUSH
7083: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7087: LD_INT 35
7089: PPUSH
7090: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7094: LD_ADDR_VAR 0 2
7098: PUSH
7099: LD_EXP 51
7103: PPUSH
7104: LD_INT 3
7106: PUSH
7107: LD_INT 55
7109: PUSH
7110: EMPTY
7111: LIST
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 25
7122: PUSH
7123: LD_INT 1
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 25
7132: PUSH
7133: LD_INT 8
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PPUSH
7149: CALL_OW 72
7153: ST_TO_ADDR
// if tmp then
7154: LD_VAR 0 2
7158: IFFALSE 7313
// begin for i in tmp do
7160: LD_ADDR_VAR 0 1
7164: PUSH
7165: LD_VAR 0 2
7169: PUSH
7170: FOR_IN
7171: IFFALSE 7311
// begin tag := GetTag ( i ) ;
7173: LD_ADDR_VAR 0 5
7177: PUSH
7178: LD_VAR 0 1
7182: PPUSH
7183: CALL_OW 110
7187: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL_OW 256
7197: PUSH
7198: LD_INT 800
7200: LESS
7201: IFFALSE 7213
7203: PUSH
7204: LD_VAR 0 5
7208: PUSH
7209: LD_INT 101
7211: LESS
7212: AND
7213: IFFALSE 7256
// begin SetTag ( i , 101 ) ;
7215: LD_VAR 0 1
7219: PPUSH
7220: LD_INT 101
7222: PPUSH
7223: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7227: LD_VAR 0 1
7231: PPUSH
7232: LD_VAR 0 6
7236: PUSH
7237: LD_INT 1
7239: ARRAY
7240: PPUSH
7241: LD_VAR 0 6
7245: PUSH
7246: LD_INT 2
7248: ARRAY
7249: PPUSH
7250: CALL_OW 111
// end else
7254: GO 7309
// if tag = 101 then
7256: LD_VAR 0 5
7260: PUSH
7261: LD_INT 101
7263: EQUAL
7264: IFFALSE 7295
// begin if GetLives ( i ) = 1000 then
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 256
7275: PUSH
7276: LD_INT 1000
7278: EQUAL
7279: IFFALSE 7293
// SetTag ( i , 0 ) ;
7281: LD_VAR 0 1
7285: PPUSH
7286: LD_INT 0
7288: PPUSH
7289: CALL_OW 109
// end else
7293: GO 7309
// AgressiveMove ( i , path ) ;
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_VAR 0 4
7304: PPUSH
7305: CALL 71257 0 2
// end ;
7309: GO 7170
7311: POP
7312: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_INT 22
7320: PUSH
7321: LD_INT 8
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 21
7330: PUSH
7331: LD_INT 2
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 3
7340: PUSH
7341: LD_INT 34
7343: PUSH
7344: LD_INT 32
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: PPUSH
7360: CALL_OW 69
7364: ST_TO_ADDR
// if not tmp then
7365: LD_VAR 0 2
7369: NOT
7370: IFFALSE 7374
// continue ;
7372: GO 7087
// for i in tmp do
7374: LD_ADDR_VAR 0 1
7378: PUSH
7379: LD_VAR 0 2
7383: PUSH
7384: FOR_IN
7385: IFFALSE 7626
// begin mech := IsDrivenBy ( i ) ;
7387: LD_ADDR_VAR 0 3
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 311
7401: ST_TO_ADDR
// if not mech then
7402: LD_VAR 0 3
7406: NOT
7407: IFFALSE 7411
// continue ;
7409: GO 7384
// tag := GetTag ( i ) ;
7411: LD_ADDR_VAR 0 5
7415: PUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 110
7425: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 256
7435: PUSH
7436: LD_INT 600
7438: GREATEREQUAL
7439: IFFALSE 7451
7441: PUSH
7442: LD_VAR 0 5
7446: PUSH
7447: LD_INT 101
7449: LESS
7450: AND
7451: IFFALSE 7467
// AgressiveMove ( i , path ) ;
7453: LD_VAR 0 1
7457: PPUSH
7458: LD_VAR 0 4
7462: PPUSH
7463: CALL 71257 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7467: LD_VAR 0 1
7471: PPUSH
7472: CALL_OW 256
7476: PUSH
7477: LD_INT 600
7479: LESS
7480: IFFALSE 7492
7482: PUSH
7483: LD_VAR 0 5
7487: PUSH
7488: LD_INT 101
7490: LESS
7491: AND
7492: IFFALSE 7533
// begin SetTag ( i , 101 ) ;
7494: LD_VAR 0 1
7498: PPUSH
7499: LD_INT 101
7501: PPUSH
7502: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_VAR 0 6
7515: PUSH
7516: LD_INT 1
7518: ARRAY
7519: PPUSH
7520: LD_VAR 0 6
7524: PUSH
7525: LD_INT 2
7527: ARRAY
7528: PPUSH
7529: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7533: LD_VAR 0 5
7537: PUSH
7538: LD_INT 101
7540: EQUAL
7541: IFFALSE 7576
7543: PUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: LD_VAR 0 6
7553: PUSH
7554: LD_INT 1
7556: ARRAY
7557: PPUSH
7558: LD_VAR 0 6
7562: PUSH
7563: LD_INT 2
7565: ARRAY
7566: PPUSH
7567: CALL_OW 297
7571: PUSH
7572: LD_INT 9
7574: LESS
7575: AND
7576: IFFALSE 7584
7578: PUSH
7579: LD_VAR 0 3
7583: AND
7584: IFFALSE 7624
// begin if GetLives ( i ) < 1000 then
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL_OW 256
7595: PUSH
7596: LD_INT 1000
7598: LESS
7599: IFFALSE 7612
// AddComRepairVehicleAndReturn ( mech ) else
7601: LD_VAR 0 3
7605: PPUSH
7606: CALL 70327 0 1
7610: GO 7624
// SetTag ( i , 0 ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_INT 0
7619: PPUSH
7620: CALL_OW 109
// end ; end ;
7624: GO 7384
7626: POP
7627: POP
// until not tmp ;
7628: LD_VAR 0 2
7632: NOT
7633: IFFALSE 7087
// end ;
7635: PPOPN 6
7637: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7638: LD_EXP 23
7642: IFFALSE 8961
7644: GO 7646
7646: DISABLE
7647: LD_INT 0
7649: PPUSH
7650: PPUSH
7651: PPUSH
7652: PPUSH
7653: PPUSH
7654: PPUSH
7655: PPUSH
7656: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7657: LD_ADDR_VAR 0 7
7661: PUSH
7662: LD_INT 209
7664: PUSH
7665: LD_INT 221
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 190
7674: PUSH
7675: LD_INT 220
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 177
7684: PUSH
7685: LD_INT 220
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 168
7694: PUSH
7695: LD_INT 223
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 150
7704: PUSH
7705: LD_INT 206
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7719: LD_ADDR_VAR 0 8
7723: PUSH
7724: LD_INT 219
7726: PUSH
7727: LD_INT 225
7729: PUSH
7730: LD_INT 0
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: ST_TO_ADDR
// for i := 1 to 2 do
7738: LD_ADDR_VAR 0 1
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_INT 2
7750: PUSH
7751: FOR_TO
7752: IFFALSE 7901
// begin uc_side := 5 ;
7754: LD_ADDR_OWVAR 20
7758: PUSH
7759: LD_INT 5
7761: ST_TO_ADDR
// uc_nation := 2 ;
7762: LD_ADDR_OWVAR 21
7766: PUSH
7767: LD_INT 2
7769: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7770: LD_INT 14
7772: PPUSH
7773: LD_INT 1
7775: PPUSH
7776: LD_INT 1
7778: PPUSH
7779: LD_INT 32
7781: PPUSH
7782: LD_INT 80
7784: PPUSH
7785: CALL 35311 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7789: LD_ADDR_VAR 0 2
7793: PUSH
7794: LD_VAR 0 2
7798: PPUSH
7799: CALL_OW 45
7803: PPUSH
7804: CALL 68491 0 2
7808: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7809: LD_VAR 0 2
7813: PUSH
7814: LD_VAR 0 1
7818: ARRAY
7819: PPUSH
7820: LD_INT 4
7822: PPUSH
7823: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7827: LD_VAR 0 2
7831: PUSH
7832: LD_VAR 0 1
7836: ARRAY
7837: PPUSH
7838: LD_INT 16
7840: PPUSH
7841: LD_INT 0
7843: PPUSH
7844: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7848: LD_INT 0
7850: PPUSH
7851: LD_INT 4
7853: PPUSH
7854: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7858: CALL_OW 44
7862: PPUSH
7863: LD_VAR 0 2
7867: PUSH
7868: LD_VAR 0 1
7872: ARRAY
7873: PPUSH
7874: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7878: LD_VAR 0 2
7882: PUSH
7883: LD_VAR 0 1
7887: ARRAY
7888: PPUSH
7889: LD_INT 337
7891: PPUSH
7892: LD_INT 232
7894: PPUSH
7895: CALL_OW 111
// end ;
7899: GO 7751
7901: POP
7902: POP
// wait ( 0 0$25 ) ;
7903: LD_INT 875
7905: PPUSH
7906: CALL_OW 67
// for i := 1 to 2 do
7910: LD_ADDR_VAR 0 1
7914: PUSH
7915: DOUBLE
7916: LD_INT 1
7918: DEC
7919: ST_TO_ADDR
7920: LD_INT 2
7922: PUSH
7923: FOR_TO
7924: IFFALSE 7949
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7926: LD_VAR 0 2
7930: PUSH
7931: LD_VAR 0 1
7935: ARRAY
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: LD_INT 100
7942: PPUSH
7943: CALL_OW 290
7947: GO 7923
7949: POP
7950: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7951: LD_EXP 52
7955: PPUSH
7956: LD_INT 2
7958: PUSH
7959: LD_INT 25
7961: PUSH
7962: LD_INT 1
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: LD_INT 25
7971: PUSH
7972: LD_INT 8
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 72
7988: PPUSH
7989: CALL_OW 122
// wait ( 0 0$3 ) ;
7993: LD_INT 105
7995: PPUSH
7996: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8000: LD_EXP 52
8004: PUSH
8005: LD_EXP 44
8009: UNION
8010: PPUSH
8011: LD_VAR 0 8
8015: PUSH
8016: LD_INT 1
8018: ARRAY
8019: PPUSH
8020: LD_VAR 0 8
8024: PUSH
8025: LD_INT 2
8027: ARRAY
8028: PPUSH
8029: CALL_OW 174
// wait ( 0 0$3 ) ;
8033: LD_INT 105
8035: PPUSH
8036: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
8040: LD_VAR 0 2
8044: PPUSH
8045: LD_INT 218
8047: PPUSH
8048: LD_INT 217
8050: PPUSH
8051: CALL_OW 171
// wait ( 1 1$00 ) ;
8055: LD_INT 2100
8057: PPUSH
8058: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8062: LD_INT 35
8064: PPUSH
8065: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8069: LD_VAR 0 8
8073: PUSH
8074: LD_INT 3
8076: ARRAY
8077: PUSH
8078: LD_INT 0
8080: EQUAL
8081: IFFALSE 8186
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8083: LD_INT 22
8085: PUSH
8086: LD_INT 3
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 92
8095: PUSH
8096: LD_INT 168
8098: PUSH
8099: LD_INT 229
8101: PUSH
8102: LD_INT 12
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: PPUSH
8115: CALL_OW 69
8119: PUSH
8120: LD_INT 0
8122: EQUAL
8123: IFFALSE 8186
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8125: LD_ADDR_VAR 0 8
8129: PUSH
8130: LD_INT 167
8132: PUSH
8133: LD_INT 222
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8144: LD_EXP 44
8148: PUSH
8149: LD_VAR 0 2
8153: ADD
8154: PUSH
8155: LD_EXP 52
8159: PPUSH
8160: LD_INT 25
8162: PUSH
8163: LD_INT 4
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 72
8174: ADD
8175: PPUSH
8176: LD_INT 167
8178: PPUSH
8179: LD_INT 222
8181: PPUSH
8182: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8186: LD_ADDR_VAR 0 3
8190: PUSH
8191: LD_EXP 52
8195: PPUSH
8196: LD_INT 3
8198: PUSH
8199: LD_INT 55
8201: PUSH
8202: EMPTY
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: LD_INT 25
8214: PUSH
8215: LD_INT 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 8
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 72
8245: ST_TO_ADDR
// if tmp then
8246: LD_VAR 0 3
8250: IFFALSE 8465
// begin for i in tmp do
8252: LD_ADDR_VAR 0 1
8256: PUSH
8257: LD_VAR 0 3
8261: PUSH
8262: FOR_IN
8263: IFFALSE 8463
// begin tag := GetTag ( i ) ;
8265: LD_ADDR_VAR 0 4
8269: PUSH
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 110
8279: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8280: LD_VAR 0 1
8284: PPUSH
8285: CALL_OW 256
8289: PUSH
8290: LD_INT 800
8292: LESS
8293: IFFALSE 8305
8295: PUSH
8296: LD_VAR 0 4
8300: PUSH
8301: LD_INT 101
8303: LESS
8304: AND
8305: IFFALSE 8348
// begin SetTag ( i , 101 ) ;
8307: LD_VAR 0 1
8311: PPUSH
8312: LD_INT 101
8314: PPUSH
8315: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8319: LD_VAR 0 1
8323: PPUSH
8324: LD_VAR 0 8
8328: PUSH
8329: LD_INT 1
8331: ARRAY
8332: PPUSH
8333: LD_VAR 0 8
8337: PUSH
8338: LD_INT 2
8340: ARRAY
8341: PPUSH
8342: CALL_OW 111
// end else
8346: GO 8461
// if tag = 101 then
8348: LD_VAR 0 4
8352: PUSH
8353: LD_INT 101
8355: EQUAL
8356: IFFALSE 8447
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8358: LD_VAR 0 1
8362: PPUSH
8363: LD_VAR 0 8
8367: PUSH
8368: LD_INT 1
8370: ARRAY
8371: PPUSH
8372: LD_VAR 0 8
8376: PUSH
8377: LD_INT 2
8379: ARRAY
8380: PPUSH
8381: CALL_OW 297
8385: PUSH
8386: LD_INT 10
8388: GREATER
8389: IFFALSE 8418
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 8
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PPUSH
8405: LD_VAR 0 8
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 111
// if GetLives ( i ) = 1000 then
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL_OW 256
8427: PUSH
8428: LD_INT 1000
8430: EQUAL
8431: IFFALSE 8445
// SetTag ( i , 0 ) ;
8433: LD_VAR 0 1
8437: PPUSH
8438: LD_INT 0
8440: PPUSH
8441: CALL_OW 109
// end else
8445: GO 8461
// AgressiveMove ( i , path ) ;
8447: LD_VAR 0 1
8451: PPUSH
8452: LD_VAR 0 7
8456: PPUSH
8457: CALL 71257 0 2
// end ;
8461: GO 8262
8463: POP
8464: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8465: LD_ADDR_VAR 0 3
8469: PUSH
8470: LD_INT 22
8472: PUSH
8473: LD_INT 5
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 21
8482: PUSH
8483: LD_INT 2
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 3
8492: PUSH
8493: LD_INT 34
8495: PUSH
8496: LD_INT 32
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: PPUSH
8512: CALL_OW 69
8516: ST_TO_ADDR
// if not tmp then
8517: LD_VAR 0 3
8521: NOT
8522: IFFALSE 8526
// continue ;
8524: GO 8062
// for i in tmp do
8526: LD_ADDR_VAR 0 1
8530: PUSH
8531: LD_VAR 0 3
8535: PUSH
8536: FOR_IN
8537: IFFALSE 8952
// begin mech := IsDrivenBy ( i ) ;
8539: LD_ADDR_VAR 0 5
8543: PUSH
8544: LD_VAR 0 1
8548: PPUSH
8549: CALL_OW 311
8553: ST_TO_ADDR
// if not mech then
8554: LD_VAR 0 5
8558: NOT
8559: IFFALSE 8563
// continue ;
8561: GO 8536
// tag := GetTag ( i ) ;
8563: LD_ADDR_VAR 0 4
8567: PUSH
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL_OW 110
8577: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8578: LD_VAR 0 1
8582: PPUSH
8583: CALL_OW 261
8587: PUSH
8588: LD_INT 90
8590: GREATER
8591: IFFALSE 8603
8593: PUSH
8594: LD_VAR 0 4
8598: PUSH
8599: LD_INT 102
8601: EQUAL
8602: AND
8603: IFFALSE 8619
// SetTag ( i , 0 ) else
8605: LD_VAR 0 1
8609: PPUSH
8610: LD_INT 0
8612: PPUSH
8613: CALL_OW 109
8617: GO 8715
// if GetTag ( i ) = 102 then
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 110
8628: PUSH
8629: LD_INT 102
8631: EQUAL
8632: IFFALSE 8715
// begin x := rand ( 1 , 2 ) ;
8634: LD_ADDR_VAR 0 6
8638: PUSH
8639: LD_INT 1
8641: PPUSH
8642: LD_INT 2
8644: PPUSH
8645: CALL_OW 12
8649: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8650: LD_VAR 0 1
8654: PPUSH
8655: LD_VAR 0 2
8659: PUSH
8660: LD_VAR 0 6
8664: ARRAY
8665: PPUSH
8666: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8670: LD_VAR 0 2
8674: PUSH
8675: LD_VAR 0 6
8679: ARRAY
8680: PPUSH
8681: LD_INT 2
8683: PPUSH
8684: CALL_OW 289
8688: PUSH
8689: LD_INT 20
8691: LESS
8692: IFFALSE 8715
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8694: LD_VAR 0 2
8698: PUSH
8699: LD_VAR 0 6
8703: ARRAY
8704: PPUSH
8705: LD_INT 2
8707: PPUSH
8708: LD_INT 100
8710: PPUSH
8711: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8715: LD_VAR 0 1
8719: PPUSH
8720: CALL_OW 256
8724: PUSH
8725: LD_INT 600
8727: GREATEREQUAL
8728: IFFALSE 8740
8730: PUSH
8731: LD_VAR 0 4
8735: PUSH
8736: LD_INT 101
8738: LESS
8739: AND
8740: IFFALSE 8756
// AgressiveMove ( i , path ) ;
8742: LD_VAR 0 1
8746: PPUSH
8747: LD_VAR 0 7
8751: PPUSH
8752: CALL 71257 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8756: LD_VAR 0 1
8760: PPUSH
8761: CALL_OW 256
8765: PUSH
8766: LD_INT 600
8768: LESS
8769: IFFALSE 8781
8771: PUSH
8772: LD_VAR 0 4
8776: PUSH
8777: LD_INT 101
8779: LESS
8780: AND
8781: IFFALSE 8822
// begin SetTag ( i , 101 ) ;
8783: LD_VAR 0 1
8787: PPUSH
8788: LD_INT 101
8790: PPUSH
8791: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_VAR 0 8
8804: PUSH
8805: LD_INT 1
8807: ARRAY
8808: PPUSH
8809: LD_VAR 0 8
8813: PUSH
8814: LD_INT 2
8816: ARRAY
8817: PPUSH
8818: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8822: LD_VAR 0 4
8826: PUSH
8827: LD_INT 101
8829: EQUAL
8830: IFFALSE 8865
8832: PUSH
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_VAR 0 8
8842: PUSH
8843: LD_INT 1
8845: ARRAY
8846: PPUSH
8847: LD_VAR 0 8
8851: PUSH
8852: LD_INT 2
8854: ARRAY
8855: PPUSH
8856: CALL_OW 297
8860: PUSH
8861: LD_INT 9
8863: LESS
8864: AND
8865: IFFALSE 8873
8867: PUSH
8868: LD_VAR 0 5
8872: AND
8873: IFFALSE 8950
// begin if GetLives ( i ) < 1000 then
8875: LD_VAR 0 1
8879: PPUSH
8880: CALL_OW 256
8884: PUSH
8885: LD_INT 1000
8887: LESS
8888: IFFALSE 8901
// AddComRepairVehicleAndReturn ( mech ) else
8890: LD_VAR 0 5
8894: PPUSH
8895: CALL 70327 0 1
8899: GO 8950
// if GetFuel ( i ) <= 50 and cargo then
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 261
8910: PUSH
8911: LD_INT 50
8913: LESSEQUAL
8914: IFFALSE 8922
8916: PUSH
8917: LD_VAR 0 2
8921: AND
8922: IFFALSE 8938
// SetTag ( i , 102 ) else
8924: LD_VAR 0 1
8928: PPUSH
8929: LD_INT 102
8931: PPUSH
8932: CALL_OW 109
8936: GO 8950
// SetTag ( i , 0 ) ;
8938: LD_VAR 0 1
8942: PPUSH
8943: LD_INT 0
8945: PPUSH
8946: CALL_OW 109
// end ; end ;
8950: GO 8536
8952: POP
8953: POP
// until not tmp ;
8954: LD_VAR 0 3
8958: NOT
8959: IFFALSE 8062
// end ;
8961: PPOPN 8
8963: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
8969: PPUSH
8970: PPUSH
8971: PPUSH
8972: PPUSH
8973: PPUSH
8974: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8975: LD_INT 20
8977: PPUSH
8978: LD_INT 1
8980: PPUSH
8981: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8985: LD_INT 175
8987: PPUSH
8988: CALL_OW 67
// heikeInConvoy := false ;
8992: LD_ADDR_VAR 0 8
8996: PUSH
8997: LD_INT 0
8999: ST_TO_ADDR
// needOil := false ;
9000: LD_ADDR_VAR 0 7
9004: PUSH
9005: LD_INT 0
9007: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
9008: LD_ADDR_VAR 0 3
9012: PUSH
9013: LD_INT 20
9015: PPUSH
9016: LD_INT 22
9018: PUSH
9019: LD_INT 2
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 3
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: LD_INT 34
9034: PUSH
9035: LD_INT 88
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 34
9044: PUSH
9045: LD_INT 31
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 33
9063: PUSH
9064: LD_INT 1
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: PPUSH
9076: CALL_OW 70
9080: ST_TO_ADDR
// for i in tmp do
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_VAR 0 3
9090: PUSH
9091: FOR_IN
9092: IFFALSE 9179
// begin if IsDrivenBy ( i ) = Heike then
9094: LD_VAR 0 2
9098: PPUSH
9099: CALL_OW 311
9103: PUSH
9104: LD_EXP 34
9108: EQUAL
9109: IFFALSE 9128
// begin heikeInConvoy := true ;
9111: LD_ADDR_VAR 0 8
9115: PUSH
9116: LD_INT 1
9118: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9119: LD_STRING QHeikeConvoy
9121: PPUSH
9122: CALL_OW 97
// break ;
9126: GO 9179
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9128: LD_VAR 0 2
9132: PPUSH
9133: CALL_OW 262
9137: PUSH
9138: LD_INT 1
9140: EQUAL
9141: IFFALSE 9158
9143: PUSH
9144: LD_VAR 0 2
9148: PPUSH
9149: CALL_OW 261
9153: PUSH
9154: LD_INT 10
9156: LESS
9157: AND
9158: IFFALSE 9177
// begin needOil := true ;
9160: LD_ADDR_VAR 0 7
9164: PUSH
9165: LD_INT 1
9167: ST_TO_ADDR
// Query ( QNeedOil ) ;
9168: LD_STRING QNeedOil
9170: PPUSH
9171: CALL_OW 97
// break ;
9175: GO 9179
// end ; end ;
9177: GO 9091
9179: POP
9180: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9181: LD_VAR 0 7
9185: NOT
9186: IFFALSE 9195
9188: PUSH
9189: LD_VAR 0 8
9193: NOT
9194: AND
9195: IFFALSE 9236
9197: PUSH
9198: LD_VAR 0 3
9202: PPUSH
9203: LD_INT 2
9205: PUSH
9206: LD_INT 34
9208: PUSH
9209: LD_INT 32
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 34
9218: PUSH
9219: LD_INT 51
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 72
9235: AND
9236: IFFALSE 9253
// if Query ( QConvoy ) = 1 then
9238: LD_STRING QConvoy
9240: PPUSH
9241: CALL_OW 97
9245: PUSH
9246: LD_INT 1
9248: EQUAL
9249: IFFALSE 9253
// break ;
9251: GO 9257
// until false ;
9253: LD_INT 0
9255: IFFALSE 8985
// SetAreaMapShow ( oilArea , 0 ) ;
9257: LD_INT 20
9259: PPUSH
9260: LD_INT 0
9262: PPUSH
9263: CALL_OW 424
// data := [ ] ;
9267: LD_ADDR_VAR 0 4
9271: PUSH
9272: EMPTY
9273: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9274: LD_ADDR_VAR 0 5
9278: PUSH
9279: LD_INT 60
9281: PUSH
9282: LD_INT 50
9284: PUSH
9285: LD_INT 40
9287: PUSH
9288: LD_INT 30
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: PUSH
9297: LD_OWVAR 67
9301: ARRAY
9302: ST_TO_ADDR
// for i in tmp do
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: LD_VAR 0 3
9312: PUSH
9313: FOR_IN
9314: IFFALSE 9411
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9316: LD_ADDR_VAR 0 4
9320: PUSH
9321: LD_VAR 0 4
9325: PPUSH
9326: LD_VAR 0 2
9330: PUSH
9331: LD_VAR 0 2
9335: PPUSH
9336: CALL_OW 311
9340: PUSH
9341: LD_VAR 0 2
9345: PPUSH
9346: CALL_OW 256
9350: PUSH
9351: LD_VAR 0 2
9355: PPUSH
9356: CALL_OW 261
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL 68491 0 2
9371: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9372: LD_VAR 0 2
9376: PPUSH
9377: CALL_OW 311
9381: PPUSH
9382: CALL_OW 64
// RemoveUnit ( i ) ;
9386: LD_VAR 0 2
9390: PPUSH
9391: CALL_OW 64
// chance := chance + 20 ;
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_VAR 0 5
9404: PUSH
9405: LD_INT 20
9407: PLUS
9408: ST_TO_ADDR
// end ;
9409: GO 9313
9411: POP
9412: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9413: LD_INT 1575
9415: PPUSH
9416: LD_INT 5250
9418: PPUSH
9419: CALL_OW 12
9423: PPUSH
9424: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9428: LD_INT 35
9430: PPUSH
9431: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9435: LD_INT 22
9437: PUSH
9438: LD_INT 3
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 92
9447: PUSH
9448: LD_INT 261
9450: PUSH
9451: LD_INT 71
9453: PUSH
9454: LD_INT 12
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PPUSH
9467: CALL_OW 69
9471: NOT
9472: IFFALSE 9487
9474: PUSH
9475: LD_INT 277
9477: PPUSH
9478: LD_INT 80
9480: PPUSH
9481: CALL_OW 428
9485: NOT
9486: AND
9487: IFFALSE 9428
// for i in data do
9489: LD_ADDR_VAR 0 2
9493: PUSH
9494: LD_VAR 0 4
9498: PUSH
9499: FOR_IN
9500: IFFALSE 9919
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9502: LD_ADDR_OWVAR 21
9506: PUSH
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 248
9520: ST_TO_ADDR
// uc_side := 2 ;
9521: LD_ADDR_OWVAR 20
9525: PUSH
9526: LD_INT 2
9528: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9529: LD_VAR 0 2
9533: PUSH
9534: LD_INT 1
9536: ARRAY
9537: PPUSH
9538: CALL_OW 265
9542: PPUSH
9543: LD_VAR 0 2
9547: PUSH
9548: LD_INT 1
9550: ARRAY
9551: PPUSH
9552: CALL_OW 262
9556: PPUSH
9557: LD_VAR 0 2
9561: PUSH
9562: LD_INT 1
9564: ARRAY
9565: PPUSH
9566: CALL_OW 263
9570: PPUSH
9571: LD_VAR 0 2
9575: PUSH
9576: LD_INT 1
9578: ARRAY
9579: PPUSH
9580: CALL_OW 264
9584: PPUSH
9585: LD_INT 66
9587: PPUSH
9588: CALL 35311 0 5
// vehicle := CreateVehicle ;
9592: LD_ADDR_VAR 0 6
9596: PUSH
9597: CALL_OW 45
9601: ST_TO_ADDR
// SetDir ( vehicle , 4 ) ;
9602: LD_VAR 0 6
9606: PPUSH
9607: LD_INT 4
9609: PPUSH
9610: CALL_OW 233
// repeat wait ( 10 ) ;
9614: LD_INT 10
9616: PPUSH
9617: CALL_OW 67
// until PlaceUnitXY ( vehicle , 277 , 80 , false ) ;
9621: LD_VAR 0 6
9625: PPUSH
9626: LD_INT 277
9628: PPUSH
9629: LD_INT 80
9631: PPUSH
9632: LD_INT 0
9634: PPUSH
9635: CALL_OW 48
9639: IFFALSE 9614
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9641: LD_VAR 0 2
9645: PUSH
9646: LD_INT 2
9648: ARRAY
9649: PPUSH
9650: LD_VAR 0 6
9654: PPUSH
9655: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9659: LD_VAR 0 6
9663: PPUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_INT 3
9671: ARRAY
9672: PPUSH
9673: CALL_OW 234
// success := Prob ( chance ) ;
9677: LD_ADDR_VAR 0 9
9681: PUSH
9682: LD_VAR 0 5
9686: PPUSH
9687: CALL_OW 13
9691: ST_TO_ADDR
// if success then
9692: LD_VAR 0 9
9696: IFFALSE 9778
// begin if GetEngine ( vehicle ) = engine_combustion then
9698: LD_VAR 0 6
9702: PPUSH
9703: CALL_OW 262
9707: PUSH
9708: LD_INT 1
9710: EQUAL
9711: IFFALSE 9725
// SetFuel ( vehicle , 90 ) ;
9713: LD_VAR 0 6
9717: PPUSH
9718: LD_INT 90
9720: PPUSH
9721: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9725: LD_VAR 0 6
9729: PPUSH
9730: CALL_OW 264
9734: PUSH
9735: LD_INT 32
9737: PUSH
9738: LD_INT 51
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: IN
9745: IFFALSE 9776
// begin collectedOil := collectedOil + 100 ;
9747: LD_ADDR_EXP 33
9751: PUSH
9752: LD_EXP 33
9756: PUSH
9757: LD_INT 100
9759: PLUS
9760: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_INT 2
9768: PPUSH
9769: LD_INT 100
9771: PPUSH
9772: CALL_OW 290
// end ; end else
9776: GO 9850
// begin if i [ 3 ] > 333 then
9778: LD_VAR 0 2
9782: PUSH
9783: LD_INT 3
9785: ARRAY
9786: PUSH
9787: LD_INT 333
9789: GREATER
9790: IFFALSE 9804
// SetLives ( vehicle , 333 ) ;
9792: LD_VAR 0 6
9796: PPUSH
9797: LD_INT 333
9799: PPUSH
9800: CALL_OW 234
// if i [ 4 ] > 20 then
9804: LD_VAR 0 2
9808: PUSH
9809: LD_INT 4
9811: ARRAY
9812: PUSH
9813: LD_INT 20
9815: GREATER
9816: IFFALSE 9832
// SetFuel ( vehicle , 20 ) else
9818: LD_VAR 0 6
9822: PPUSH
9823: LD_INT 20
9825: PPUSH
9826: CALL_OW 240
9830: GO 9850
// SetFuel ( vehicle , i [ 4 ] ) ;
9832: LD_VAR 0 6
9836: PPUSH
9837: LD_VAR 0 2
9841: PUSH
9842: LD_INT 4
9844: ARRAY
9845: PPUSH
9846: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9850: LD_VAR 0 6
9854: PPUSH
9855: LD_INT 250
9857: PPUSH
9858: LD_INT 119
9860: PPUSH
9861: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9865: LD_VAR 0 6
9869: PPUSH
9870: LD_INT 211
9872: PPUSH
9873: LD_INT 80
9875: PPUSH
9876: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9880: LD_INT 175
9882: PPUSH
9883: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9887: LD_INT 20
9889: PPUSH
9890: LD_INT 22
9892: PUSH
9893: LD_INT 2
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 52
9902: PUSH
9903: EMPTY
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PPUSH
9910: CALL_OW 70
9914: NOT
9915: IFFALSE 9880
// end ;
9917: GO 9499
9919: POP
9920: POP
// wait ( 0 0$10 ) ;
9921: LD_INT 350
9923: PPUSH
9924: CALL_OW 67
// GoForOil ;
9928: CALL 8964 0 0
// end ;
9932: LD_VAR 0 1
9936: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9937: LD_INT 22
9939: PPUSH
9940: LD_INT 21
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 22
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 58
9962: PUSH
9963: EMPTY
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 70
9975: IFFALSE 10044
9977: GO 9979
9979: DISABLE
9980: LD_INT 0
9982: PPUSH
// begin enable ;
9983: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9984: LD_ADDR_VAR 0 1
9988: PUSH
9989: LD_INT 22
9991: PPUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 2
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_INT 5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 58
10014: PUSH
10015: EMPTY
10016: LIST
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 70
10027: PUSH
10028: FOR_IN
10029: IFFALSE 10042
// KillUnit ( i ) ;
10031: LD_VAR 0 1
10035: PPUSH
10036: CALL_OW 66
10040: GO 10028
10042: POP
10043: POP
// end ; end_of_file
10044: PPOPN 1
10046: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
10047: LD_INT 0
10049: PPUSH
// uc_side := side ;
10050: LD_ADDR_OWVAR 20
10054: PUSH
10055: LD_VAR 0 1
10059: ST_TO_ADDR
// uc_nation := nation ;
10060: LD_ADDR_OWVAR 21
10064: PUSH
10065: LD_VAR 0 2
10069: ST_TO_ADDR
// vc_chassis := chassis ;
10070: LD_ADDR_OWVAR 37
10074: PUSH
10075: LD_VAR 0 3
10079: ST_TO_ADDR
// vc_engine := engine ;
10080: LD_ADDR_OWVAR 39
10084: PUSH
10085: LD_VAR 0 4
10089: ST_TO_ADDR
// vc_control := control ;
10090: LD_ADDR_OWVAR 38
10094: PUSH
10095: LD_VAR 0 5
10099: ST_TO_ADDR
// vc_weapon := weapon ;
10100: LD_ADDR_OWVAR 40
10104: PUSH
10105: LD_VAR 0 6
10109: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10110: LD_ADDR_OWVAR 41
10114: PUSH
10115: LD_VAR 0 7
10119: ST_TO_ADDR
// result := CreateVehicle ;
10120: LD_ADDR_VAR 0 8
10124: PUSH
10125: CALL_OW 45
10129: ST_TO_ADDR
// end ;
10130: LD_VAR 0 8
10134: RET
// export function SayX ( units , ident ) ; var i ; begin
10135: LD_INT 0
10137: PPUSH
10138: PPUSH
// result := false ;
10139: LD_ADDR_VAR 0 3
10143: PUSH
10144: LD_INT 0
10146: ST_TO_ADDR
// if not units then
10147: LD_VAR 0 1
10151: NOT
10152: IFFALSE 10156
// exit ;
10154: GO 10210
// for i in units do
10156: LD_ADDR_VAR 0 4
10160: PUSH
10161: LD_VAR 0 1
10165: PUSH
10166: FOR_IN
10167: IFFALSE 10208
// if IsOk ( i ) then
10169: LD_VAR 0 4
10173: PPUSH
10174: CALL_OW 302
10178: IFFALSE 10206
// begin Say ( i , ident ) ;
10180: LD_VAR 0 4
10184: PPUSH
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 88
// result := i ;
10194: LD_ADDR_VAR 0 3
10198: PUSH
10199: LD_VAR 0 4
10203: ST_TO_ADDR
// break ;
10204: GO 10208
// end ;
10206: GO 10166
10208: POP
10209: POP
// end ;
10210: LD_VAR 0 3
10214: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// InitUc ;
10219: CALL_OW 18
// InitHc ;
10223: CALL_OW 19
// uc_side := 0 ;
10227: LD_ADDR_OWVAR 20
10231: PUSH
10232: LD_INT 0
10234: ST_TO_ADDR
// uc_nation := 0 ;
10235: LD_ADDR_OWVAR 21
10239: PUSH
10240: LD_INT 0
10242: ST_TO_ADDR
// for i = 1 to amount do
10243: LD_ADDR_VAR 0 4
10247: PUSH
10248: DOUBLE
10249: LD_INT 1
10251: DEC
10252: ST_TO_ADDR
10253: LD_VAR 0 2
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10341
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10261: LD_ADDR_OWVAR 29
10265: PUSH
10266: LD_INT 9
10268: PPUSH
10269: LD_INT 12
10271: PPUSH
10272: CALL_OW 12
10276: PUSH
10277: LD_INT 9
10279: PPUSH
10280: LD_INT 12
10282: PPUSH
10283: CALL_OW 12
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10292: LD_ADDR_OWVAR 35
10296: PUSH
10297: LD_INT 1
10299: NEG
10300: PPUSH
10301: LD_INT 1
10303: PPUSH
10304: CALL_OW 12
10308: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_INT 12
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10322: CALL_OW 44
10326: PPUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: LD_INT 0
10334: PPUSH
10335: CALL_OW 49
// end ;
10339: GO 10258
10341: POP
10342: POP
// InitHc ;
10343: CALL_OW 19
// end ;
10347: LD_VAR 0 3
10351: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10352: LD_INT 0
10354: PPUSH
10355: PPUSH
// uc_side := 0 ;
10356: LD_ADDR_OWVAR 20
10360: PUSH
10361: LD_INT 0
10363: ST_TO_ADDR
// uc_nation := 0 ;
10364: LD_ADDR_OWVAR 21
10368: PUSH
10369: LD_INT 0
10371: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10372: LD_INT 7
10374: PPUSH
10375: LD_INT 6
10377: PUSH
10378: LD_INT 5
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: LD_INT 3
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: PUSH
10393: LD_OWVAR 67
10397: ARRAY
10398: PPUSH
10399: CALL 10215 0 2
// for i = 1 to 2 do
10403: LD_ADDR_VAR 0 4
10407: PUSH
10408: DOUBLE
10409: LD_INT 1
10411: DEC
10412: ST_TO_ADDR
10413: LD_INT 2
10415: PUSH
10416: FOR_TO
10417: IFFALSE 10454
// begin vc_chassis := class_mastodont ;
10419: LD_ADDR_OWVAR 37
10423: PUSH
10424: LD_INT 31
10426: ST_TO_ADDR
// vc_control := control_rider ;
10427: LD_ADDR_OWVAR 38
10431: PUSH
10432: LD_INT 4
10434: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10435: CALL_OW 45
10439: PPUSH
10440: LD_VAR 0 1
10444: PPUSH
10445: LD_INT 0
10447: PPUSH
10448: CALL 67384 0 3
// end ;
10452: GO 10416
10454: POP
10455: POP
// InitHc ;
10456: CALL_OW 19
// for i := 1 to 3 do
10460: LD_ADDR_VAR 0 4
10464: PUSH
10465: DOUBLE
10466: LD_INT 1
10468: DEC
10469: ST_TO_ADDR
10470: LD_INT 3
10472: PUSH
10473: FOR_TO
10474: IFFALSE 10511
// begin hc_class := class_horse ;
10476: LD_ADDR_OWVAR 28
10480: PUSH
10481: LD_INT 21
10483: ST_TO_ADDR
// hc_gallery :=  ;
10484: LD_ADDR_OWVAR 33
10488: PUSH
10489: LD_STRING 
10491: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10492: CALL_OW 44
10496: PPUSH
10497: LD_VAR 0 1
10501: PPUSH
10502: LD_INT 0
10504: PPUSH
10505: CALL_OW 49
// end ;
10509: GO 10473
10511: POP
10512: POP
// InitHc ;
10513: CALL_OW 19
// for i = 1 to 3 do
10517: LD_ADDR_VAR 0 4
10521: PUSH
10522: DOUBLE
10523: LD_INT 1
10525: DEC
10526: ST_TO_ADDR
10527: LD_INT 3
10529: PUSH
10530: FOR_TO
10531: IFFALSE 10585
// begin hc_class = class_tiger ;
10533: LD_ADDR_OWVAR 28
10537: PUSH
10538: LD_INT 14
10540: ST_TO_ADDR
// hc_gallery =  ;
10541: LD_ADDR_OWVAR 33
10545: PUSH
10546: LD_STRING 
10548: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10549: LD_ADDR_OWVAR 35
10553: PUSH
10554: LD_INT 7
10556: NEG
10557: PPUSH
10558: LD_INT 7
10560: PPUSH
10561: CALL_OW 12
10565: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10566: CALL_OW 44
10570: PPUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: LD_INT 0
10578: PPUSH
10579: CALL 67384 0 3
// end ;
10583: GO 10530
10585: POP
10586: POP
// InitHc ;
10587: CALL_OW 19
// for i := 1 to 4 do
10591: LD_ADDR_VAR 0 4
10595: PUSH
10596: DOUBLE
10597: LD_INT 1
10599: DEC
10600: ST_TO_ADDR
10601: LD_INT 4
10603: PUSH
10604: FOR_TO
10605: IFFALSE 10642
// begin hc_class := class_phororhacos ;
10607: LD_ADDR_OWVAR 28
10611: PUSH
10612: LD_INT 18
10614: ST_TO_ADDR
// hc_gallery :=  ;
10615: LD_ADDR_OWVAR 33
10619: PUSH
10620: LD_STRING 
10622: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10623: CALL_OW 44
10627: PPUSH
10628: LD_VAR 0 1
10632: PPUSH
10633: LD_INT 0
10635: PPUSH
10636: CALL_OW 49
// end ;
10640: GO 10604
10642: POP
10643: POP
// InitHc ;
10644: CALL_OW 19
// for i := 1 to 4 do
10648: LD_ADDR_VAR 0 4
10652: PUSH
10653: DOUBLE
10654: LD_INT 1
10656: DEC
10657: ST_TO_ADDR
10658: LD_INT 4
10660: PUSH
10661: FOR_TO
10662: IFFALSE 10699
// begin hc_class := class_baggie ;
10664: LD_ADDR_OWVAR 28
10668: PUSH
10669: LD_INT 13
10671: ST_TO_ADDR
// hc_gallery :=  ;
10672: LD_ADDR_OWVAR 33
10676: PUSH
10677: LD_STRING 
10679: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10680: CALL_OW 44
10684: PPUSH
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_INT 0
10692: PPUSH
10693: CALL_OW 49
// end ;
10697: GO 10661
10699: POP
10700: POP
// InitHc ;
10701: CALL_OW 19
// for i := 1 to 7 do
10705: LD_ADDR_VAR 0 4
10709: PUSH
10710: DOUBLE
10711: LD_INT 1
10713: DEC
10714: ST_TO_ADDR
10715: LD_INT 7
10717: PUSH
10718: FOR_TO
10719: IFFALSE 10756
// begin hc_class := class_frog ;
10721: LD_ADDR_OWVAR 28
10725: PUSH
10726: LD_INT 19
10728: ST_TO_ADDR
// hc_gallery :=  ;
10729: LD_ADDR_OWVAR 33
10733: PUSH
10734: LD_STRING 
10736: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10737: CALL_OW 44
10741: PPUSH
10742: LD_VAR 0 2
10746: PPUSH
10747: LD_INT 0
10749: PPUSH
10750: CALL_OW 49
// end ;
10754: GO 10718
10756: POP
10757: POP
// end ;
10758: LD_VAR 0 3
10762: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
// if not observer or not unit then
10768: LD_VAR 0 1
10772: NOT
10773: IFTRUE 10782
10775: PUSH
10776: LD_VAR 0 2
10780: NOT
10781: OR
10782: IFFALSE 10786
// exit ;
10784: GO 10834
// if not See ( GetSide ( observer ) , unit ) then
10786: LD_VAR 0 1
10790: PPUSH
10791: CALL_OW 255
10795: PPUSH
10796: LD_VAR 0 2
10800: PPUSH
10801: CALL_OW 292
10805: NOT
10806: IFFALSE 10810
// exit ;
10808: GO 10834
// result := GetDistUnits ( observer , unit ) < 12 ;
10810: LD_ADDR_VAR 0 3
10814: PUSH
10815: LD_VAR 0 1
10819: PPUSH
10820: LD_VAR 0 2
10824: PPUSH
10825: CALL_OW 296
10829: PUSH
10830: LD_INT 12
10832: LESS
10833: ST_TO_ADDR
// end ;
10834: LD_VAR 0 3
10838: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10839: LD_INT 0
10841: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10842: LD_VAR 0 2
10846: PUSH
10847: LD_INT 1
10849: ARRAY
10850: PPUSH
10851: LD_VAR 0 2
10855: PUSH
10856: LD_INT 2
10858: ARRAY
10859: PPUSH
10860: CALL_OW 488
10864: IFFALSE 10894
10866: PUSH
10867: LD_VAR 0 2
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: PPUSH
10876: LD_VAR 0 2
10880: PUSH
10881: LD_INT 2
10883: ARRAY
10884: PPUSH
10885: CALL_OW 428
10889: PUSH
10890: LD_INT 0
10892: EQUAL
10893: AND
10894: IFFALSE 10928
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_VAR 0 2
10905: PUSH
10906: LD_INT 1
10908: ARRAY
10909: PPUSH
10910: LD_VAR 0 2
10914: PUSH
10915: LD_INT 2
10917: ARRAY
10918: PPUSH
10919: LD_VAR 0 3
10923: PPUSH
10924: CALL_OW 48
// end ;
10928: LD_VAR 0 4
10932: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10933: LD_INT 0
10935: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10936: LD_VAR 0 1
10940: PPUSH
10941: LD_VAR 0 2
10945: PPUSH
10946: LD_VAR 0 3
10950: PPUSH
10951: LD_VAR 0 4
10955: PPUSH
10956: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10960: LD_VAR 0 1
10964: PPUSH
10965: LD_VAR 0 2
10969: PPUSH
10970: LD_VAR 0 3
10974: PPUSH
10975: CALL_OW 331
// end ;
10979: LD_VAR 0 5
10983: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10984: LD_INT 0
10986: PPUSH
// if not units then
10987: LD_VAR 0 1
10991: NOT
10992: IFFALSE 10996
// exit ;
10994: GO 11079
// result := true ;
10996: LD_ADDR_VAR 0 4
11000: PUSH
11001: LD_INT 1
11003: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
11004: LD_VAR 0 1
11008: PPUSH
11009: LD_INT 26
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PPUSH
11019: CALL_OW 72
11023: PUSH
11024: LD_INT 1
11026: ARRAY
11027: PPUSH
11028: LD_VAR 0 2
11032: PPUSH
11033: CALL_OW 88
11037: NOT
11038: IFFALSE 11079
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
11040: LD_ADDR_VAR 0 4
11044: PUSH
11045: LD_VAR 0 1
11049: PPUSH
11050: LD_INT 26
11052: PUSH
11053: LD_INT 2
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PPUSH
11060: CALL_OW 72
11064: PUSH
11065: LD_INT 1
11067: ARRAY
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: CALL_OW 88
11078: ST_TO_ADDR
// end ;
11079: LD_VAR 0 4
11083: RET
// export function SeeGroup ( side , group ) ; var i ; begin
11084: LD_INT 0
11086: PPUSH
11087: PPUSH
// if not group then
11088: LD_VAR 0 2
11092: NOT
11093: IFFALSE 11097
// exit ;
11095: GO 11142
// for i in group do
11097: LD_ADDR_VAR 0 4
11101: PUSH
11102: LD_VAR 0 2
11106: PUSH
11107: FOR_IN
11108: IFFALSE 11140
// if See ( side , i ) then
11110: LD_VAR 0 1
11114: PPUSH
11115: LD_VAR 0 4
11119: PPUSH
11120: CALL_OW 292
11124: IFFALSE 11138
// begin result := true ;
11126: LD_ADDR_VAR 0 3
11130: PUSH
11131: LD_INT 1
11133: ST_TO_ADDR
// exit ;
11134: POP
11135: POP
11136: GO 11142
// end ;
11138: GO 11107
11140: POP
11141: POP
// end ;
11142: LD_VAR 0 3
11146: RET
// export function MarkRolfSquad ; var i , tmp ; begin
11147: LD_INT 0
11149: PPUSH
11150: PPUSH
11151: PPUSH
// if not rolfSquad then
11152: LD_EXP 51
11156: NOT
11157: IFFALSE 11161
// exit ;
11159: GO 11280
// tmp := LFC_UNITS_CUSTOM_ICON = { ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: LD_STRING LFC_UNITS_CUSTOM_ICON = {
11168: ST_TO_ADDR
// for i := 1 to Count ( rolfSquad ) do
11169: LD_ADDR_VAR 0 2
11173: PUSH
11174: DOUBLE
11175: LD_INT 1
11177: DEC
11178: ST_TO_ADDR
11179: LD_EXP 51
11183: PPUSH
11184: CALL 32515 0 1
11188: PUSH
11189: FOR_TO
11190: IFFALSE 11255
// begin tmp := tmp & { & rolfSquad [ i ] & , 12} ;
11192: LD_ADDR_VAR 0 3
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_STRING {
11204: STR
11205: PUSH
11206: LD_EXP 51
11210: PUSH
11211: LD_VAR 0 2
11215: ARRAY
11216: STR
11217: PUSH
11218: LD_STRING , 12}
11220: STR
11221: ST_TO_ADDR
// if i < Count ( rolfSquad ) then
11222: LD_VAR 0 2
11226: PUSH
11227: LD_EXP 51
11231: PPUSH
11232: CALL 32515 0 1
11236: LESS
11237: IFFALSE 11253
// tmp := tmp & ,  ;
11239: LD_ADDR_VAR 0 3
11243: PUSH
11244: LD_VAR 0 3
11248: PUSH
11249: LD_STRING , 
11251: STR
11252: ST_TO_ADDR
// end ;
11253: GO 11189
11255: POP
11256: POP
// tmp := tmp & } ;
11257: LD_ADDR_VAR 0 3
11261: PUSH
11262: LD_VAR 0 3
11266: PUSH
11267: LD_STRING }
11269: STR
11270: ST_TO_ADDR
// ToLua ( tmp ) ;
11271: LD_VAR 0 3
11275: PPUSH
11276: CALL_OW 559
// end ; end_of_file
11280: LD_VAR 0 1
11284: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
11289: PPUSH
11290: PPUSH
11291: PPUSH
11292: PPUSH
11293: PPUSH
// uc_side := 3 ;
11294: LD_ADDR_OWVAR 20
11298: PUSH
11299: LD_INT 3
11301: ST_TO_ADDR
// uc_nation := 3 ;
11302: LD_ADDR_OWVAR 21
11306: PUSH
11307: LD_INT 3
11309: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11310: LD_ADDR_EXP 53
11314: PUSH
11315: LD_STRING Morozov
11317: PPUSH
11318: CALL_OW 25
11322: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11323: LD_EXP 53
11327: PPUSH
11328: LD_INT 52
11330: PPUSH
11331: CALL_OW 52
// if not gaidarKilled then
11335: LD_EXP 7
11339: NOT
11340: IFFALSE 11373
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11342: LD_ADDR_EXP 54
11346: PUSH
11347: LD_STRING Gaydar
11349: PPUSH
11350: LD_INT 0
11352: PPUSH
11353: LD_STRING 
11355: PPUSH
11356: CALL 30291 0 3
11360: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11361: LD_EXP 54
11365: PPUSH
11366: LD_INT 52
11368: PPUSH
11369: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11373: LD_INT 52
11375: PPUSH
11376: LD_STRING lenin
11378: PPUSH
11379: CALL_OW 500
// ruOutsiders := [ ] ;
11383: LD_ADDR_EXP 56
11387: PUSH
11388: EMPTY
11389: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11390: LD_ADDR_EXP 58
11394: PUSH
11395: EMPTY
11396: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11397: LD_ADDR_EXP 59
11401: PUSH
11402: EMPTY
11403: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11404: LD_ADDR_EXP 60
11408: PUSH
11409: EMPTY
11410: ST_TO_ADDR
// ruAttackers := [ ] ;
11411: LD_ADDR_EXP 61
11415: PUSH
11416: EMPTY
11417: ST_TO_ADDR
// waveStrength := 0 ;
11418: LD_ADDR_EXP 62
11422: PUSH
11423: LD_INT 0
11425: ST_TO_ADDR
// if not gaidarKilled then
11426: LD_EXP 7
11430: NOT
11431: IFFALSE 11441
// waveStrength := 2 ;
11433: LD_ADDR_EXP 62
11437: PUSH
11438: LD_INT 2
11440: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11441: LD_ADDR_VAR 0 7
11445: PUSH
11446: LD_INT 22
11448: PUSH
11449: LD_INT 3
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 21
11458: PUSH
11459: LD_INT 3
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 69
11474: ST_TO_ADDR
// for i in tmp do
11475: LD_ADDR_VAR 0 2
11479: PUSH
11480: LD_VAR 0 7
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11523
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11488: LD_VAR 0 2
11492: PPUSH
11493: LD_INT 5
11495: PUSH
11496: LD_INT 6
11498: PUSH
11499: LD_INT 7
11501: PUSH
11502: LD_INT 8
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: PUSH
11511: LD_OWVAR 67
11515: ARRAY
11516: PPUSH
11517: CALL_OW 241
11521: GO 11485
11523: POP
11524: POP
// for i := 1 to 3 do
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: DOUBLE
11531: LD_INT 1
11533: DEC
11534: ST_TO_ADDR
11535: LD_INT 3
11537: PUSH
11538: FOR_TO
11539: IFFALSE 11577
// begin PrepareHuman ( false , 1 , 0 ) ;
11541: LD_INT 0
11543: PPUSH
11544: LD_INT 1
11546: PPUSH
11547: LD_INT 0
11549: PPUSH
11550: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11554: CALL_OW 44
11558: PPUSH
11559: LD_INT 75
11561: PPUSH
11562: LD_INT 49
11564: PPUSH
11565: LD_INT 3
11567: PPUSH
11568: LD_INT 0
11570: PPUSH
11571: CALL_OW 50
// end ;
11575: GO 11538
11577: POP
11578: POP
// for i := 1 to 4 do
11579: LD_ADDR_VAR 0 2
11583: PUSH
11584: DOUBLE
11585: LD_INT 1
11587: DEC
11588: ST_TO_ADDR
11589: LD_INT 4
11591: PUSH
11592: FOR_TO
11593: IFFALSE 11639
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11595: LD_INT 0
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: LD_INT 2
11603: PPUSH
11604: CALL_OW 12
11608: PPUSH
11609: LD_INT 0
11611: PPUSH
11612: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11616: CALL_OW 44
11620: PPUSH
11621: LD_INT 330
11623: PPUSH
11624: LD_INT 231
11626: PPUSH
11627: LD_INT 5
11629: PPUSH
11630: LD_INT 0
11632: PPUSH
11633: CALL_OW 50
// end ;
11637: GO 11592
11639: POP
11640: POP
// hc_class := 1 ;
11641: LD_ADDR_OWVAR 28
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11649: CALL_OW 44
11653: PPUSH
11654: LD_INT 324
11656: PPUSH
11657: LD_INT 219
11659: PPUSH
11660: CALL_OW 428
11664: PPUSH
11665: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11669: CALL_OW 44
11673: PPUSH
11674: LD_INT 316
11676: PPUSH
11677: LD_INT 223
11679: PPUSH
11680: CALL_OW 428
11684: PPUSH
11685: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11689: LD_ADDR_VAR 0 7
11693: PUSH
11694: LD_INT 172
11696: PPUSH
11697: LD_INT 198
11699: PPUSH
11700: CALL_OW 428
11704: PPUSH
11705: CALL_OW 274
11709: PUSH
11710: LD_INT 189
11712: PPUSH
11713: LD_INT 156
11715: PPUSH
11716: CALL_OW 428
11720: PPUSH
11721: CALL_OW 274
11725: PUSH
11726: LD_INT 341
11728: PPUSH
11729: LD_INT 232
11731: PPUSH
11732: CALL_OW 428
11736: PPUSH
11737: CALL_OW 274
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: ST_TO_ADDR
// for i in tmp do
11747: LD_ADDR_VAR 0 2
11751: PUSH
11752: LD_VAR 0 7
11756: PUSH
11757: FOR_IN
11758: IFFALSE 11792
// begin SetResourceType ( i , mat_cans , 200 ) ;
11760: LD_VAR 0 2
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: LD_INT 200
11770: PPUSH
11771: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11775: LD_VAR 0 2
11779: PPUSH
11780: LD_INT 2
11782: PPUSH
11783: LD_INT 300
11785: PPUSH
11786: CALL_OW 277
// end ;
11790: GO 11757
11792: POP
11793: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11794: LD_ADDR_VAR 0 7
11798: PUSH
11799: LD_INT 177
11801: PUSH
11802: LD_INT 114
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 138
11811: PUSH
11812: LD_INT 96
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: ST_TO_ADDR
// for i := 1 to tmp do
11823: LD_ADDR_VAR 0 2
11827: PUSH
11828: DOUBLE
11829: LD_INT 1
11831: DEC
11832: ST_TO_ADDR
11833: LD_VAR 0 7
11837: PUSH
11838: FOR_TO
11839: IFFALSE 11922
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11841: LD_INT 0
11843: PPUSH
11844: LD_INT 9
11846: PPUSH
11847: LD_INT 6
11849: PPUSH
11850: CALL_OW 380
// un := CreateHuman ;
11854: LD_ADDR_VAR 0 5
11858: PUSH
11859: CALL_OW 44
11863: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11864: LD_VAR 0 5
11868: PPUSH
11869: LD_INT 2
11871: PPUSH
11872: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11876: LD_VAR 0 5
11880: PPUSH
11881: LD_VAR 0 7
11885: PUSH
11886: LD_VAR 0 2
11890: ARRAY
11891: PUSH
11892: LD_INT 1
11894: ARRAY
11895: PPUSH
11896: LD_VAR 0 7
11900: PUSH
11901: LD_VAR 0 2
11905: ARRAY
11906: PUSH
11907: LD_INT 2
11909: ARRAY
11910: PPUSH
11911: CALL_OW 428
11915: PPUSH
11916: CALL_OW 52
// end ;
11920: GO 11838
11922: POP
11923: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11924: LD_ADDR_VAR 0 7
11928: PUSH
11929: LD_INT 198
11931: PUSH
11932: LD_INT 158
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 203
11941: PUSH
11942: LD_INT 166
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 181
11951: PUSH
11952: LD_INT 209
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 178
11961: PUSH
11962: LD_INT 196
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 181
11971: PUSH
11972: LD_INT 212
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: ST_TO_ADDR
// for i := 1 to tmp do
11986: LD_ADDR_VAR 0 2
11990: PUSH
11991: DOUBLE
11992: LD_INT 1
11994: DEC
11995: ST_TO_ADDR
11996: LD_VAR 0 7
12000: PUSH
12001: FOR_TO
12002: IFFALSE 12123
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12004: LD_INT 0
12006: PPUSH
12007: LD_INT 1
12009: PPUSH
12010: LD_INT 4
12012: PUSH
12013: LD_INT 5
12015: PUSH
12016: LD_INT 6
12018: PUSH
12019: LD_INT 7
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: LD_OWVAR 67
12032: ARRAY
12033: PPUSH
12034: CALL_OW 380
// un := CreateHuman ;
12038: LD_ADDR_VAR 0 5
12042: PUSH
12043: CALL_OW 44
12047: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
12048: LD_ADDR_VAR 0 4
12052: PUSH
12053: LD_VAR 0 7
12057: PUSH
12058: LD_VAR 0 2
12062: ARRAY
12063: PUSH
12064: LD_INT 1
12066: ARRAY
12067: PPUSH
12068: LD_VAR 0 7
12072: PUSH
12073: LD_VAR 0 2
12077: ARRAY
12078: PUSH
12079: LD_INT 2
12081: ARRAY
12082: PPUSH
12083: CALL_OW 428
12087: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
12088: LD_VAR 0 5
12092: PPUSH
12093: LD_VAR 0 4
12097: PPUSH
12098: CALL 63531 0 1
12102: PPUSH
12103: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
12107: LD_VAR 0 5
12111: PPUSH
12112: LD_VAR 0 4
12116: PPUSH
12117: CALL_OW 52
// end ;
12121: GO 12001
12123: POP
12124: POP
// for i := 1 to 3 do
12125: LD_ADDR_VAR 0 2
12129: PUSH
12130: DOUBLE
12131: LD_INT 1
12133: DEC
12134: ST_TO_ADDR
12135: LD_INT 3
12137: PUSH
12138: FOR_TO
12139: IFFALSE 12194
// begin InitHc ;
12141: CALL_OW 19
// uc_nation := 0 ;
12145: LD_ADDR_OWVAR 21
12149: PUSH
12150: LD_INT 0
12152: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
12153: LD_ADDR_OWVAR 28
12157: PUSH
12158: LD_INT 16
12160: ST_TO_ADDR
// un := CreateHuman ;
12161: LD_ADDR_VAR 0 5
12165: PUSH
12166: CALL_OW 44
12170: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
12171: LD_VAR 0 5
12175: PPUSH
12176: LD_INT 194
12178: PPUSH
12179: LD_INT 164
12181: PPUSH
12182: LD_INT 6
12184: PPUSH
12185: LD_INT 0
12187: PPUSH
12188: CALL_OW 50
// end ;
12192: GO 12138
12194: POP
12195: POP
// uc_nation := 3 ;
12196: LD_ADDR_OWVAR 21
12200: PUSH
12201: LD_INT 3
12203: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
12204: LD_INT 24
12206: PPUSH
12207: LD_INT 1
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: LD_INT 44
12215: PPUSH
12216: LD_INT 10
12218: PPUSH
12219: CALL 35311 0 5
// un := CreateVehicle ;
12223: LD_ADDR_VAR 0 5
12227: PUSH
12228: CALL_OW 45
12232: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
12233: LD_VAR 0 5
12237: PPUSH
12238: LD_INT 199
12240: PPUSH
12241: LD_INT 166
12243: PPUSH
12244: LD_INT 1
12246: PPUSH
12247: LD_INT 0
12249: PPUSH
12250: CALL 70651 0 5
// ComHold ( un ) ;
12254: LD_VAR 0 5
12258: PPUSH
12259: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12263: LD_INT 0
12265: PPUSH
12266: LD_INT 3
12268: PPUSH
12269: LD_INT 4
12271: PPUSH
12272: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12276: CALL_OW 44
12280: PPUSH
12281: LD_VAR 0 5
12285: PPUSH
12286: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12290: LD_INT 24
12292: PPUSH
12293: LD_INT 1
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: LD_INT 45
12301: PPUSH
12302: LD_INT 10
12304: PPUSH
12305: CALL 35311 0 5
// un := CreateVehicle ;
12309: LD_ADDR_VAR 0 5
12313: PUSH
12314: CALL_OW 45
12318: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12319: LD_VAR 0 5
12323: PPUSH
12324: LD_INT 129
12326: PPUSH
12327: LD_INT 93
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: LD_INT 0
12335: PPUSH
12336: CALL 70651 0 5
// ComHold ( un ) ;
12340: LD_VAR 0 5
12344: PPUSH
12345: CALL_OW 140
// if Difficulty > 1 then
12349: LD_OWVAR 67
12353: PUSH
12354: LD_INT 1
12356: GREATER
12357: IFFALSE 12445
// begin PrepareHuman ( false , 3 , 4 ) ;
12359: LD_INT 0
12361: PPUSH
12362: LD_INT 3
12364: PPUSH
12365: LD_INT 4
12367: PPUSH
12368: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12372: CALL_OW 44
12376: PPUSH
12377: LD_VAR 0 5
12381: PPUSH
12382: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12386: LD_INT 24
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: LD_INT 45
12397: PPUSH
12398: LD_INT 10
12400: PPUSH
12401: CALL 35311 0 5
// un := CreateVehicle ;
12405: LD_ADDR_VAR 0 5
12409: PUSH
12410: CALL_OW 45
12414: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12415: LD_VAR 0 5
12419: PPUSH
12420: LD_INT 200
12422: PPUSH
12423: LD_INT 173
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: LD_INT 0
12431: PPUSH
12432: CALL 70651 0 5
// ComHold ( un ) ;
12436: LD_VAR 0 5
12440: PPUSH
12441: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12445: LD_INT 0
12447: PPUSH
12448: LD_INT 3
12450: PPUSH
12451: LD_INT 4
12453: PPUSH
12454: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12458: CALL_OW 44
12462: PPUSH
12463: LD_VAR 0 5
12467: PPUSH
12468: CALL_OW 52
// bc_type := b_armoury ;
12472: LD_ADDR_OWVAR 42
12476: PUSH
12477: LD_INT 4
12479: ST_TO_ADDR
// if Difficulty > 1 then
12480: LD_OWVAR 67
12484: PUSH
12485: LD_INT 1
12487: GREATER
12488: IFFALSE 12498
// bc_type := b_barracks ;
12490: LD_ADDR_OWVAR 42
12494: PUSH
12495: LD_INT 5
12497: ST_TO_ADDR
// bc_level := 6 ;
12498: LD_ADDR_OWVAR 43
12502: PUSH
12503: LD_INT 6
12505: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12506: LD_INT 120
12508: PPUSH
12509: LD_INT 100
12511: PPUSH
12512: LD_INT 5
12514: PPUSH
12515: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12519: LD_ADDR_VAR 0 2
12523: PUSH
12524: DOUBLE
12525: LD_INT 1
12527: DEC
12528: ST_TO_ADDR
12529: LD_INT 3
12531: PUSH
12532: LD_INT 3
12534: PUSH
12535: LD_INT 4
12537: PUSH
12538: LD_INT 4
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: PUSH
12547: LD_OWVAR 67
12551: ARRAY
12552: PUSH
12553: FOR_TO
12554: IFFALSE 12612
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12556: LD_INT 0
12558: PPUSH
12559: LD_INT 1
12561: PUSH
12562: LD_INT 1
12564: PUSH
12565: LD_INT 9
12567: PUSH
12568: LD_INT 9
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: PUSH
12577: LD_OWVAR 67
12581: ARRAY
12582: PPUSH
12583: LD_INT 5
12585: PPUSH
12586: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12590: CALL_OW 44
12594: PPUSH
12595: LD_INT 120
12597: PPUSH
12598: LD_INT 100
12600: PPUSH
12601: CALL_OW 428
12605: PPUSH
12606: CALL_OW 52
// end ;
12610: GO 12553
12612: POP
12613: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12614: LD_ADDR_VAR 0 7
12618: PUSH
12619: LD_INT 135
12621: PUSH
12622: LD_INT 100
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 137
12631: PUSH
12632: LD_INT 92
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: ST_TO_ADDR
// for i := 1 to tmp do
12643: LD_ADDR_VAR 0 2
12647: PUSH
12648: DOUBLE
12649: LD_INT 1
12651: DEC
12652: ST_TO_ADDR
12653: LD_VAR 0 7
12657: PUSH
12658: FOR_TO
12659: IFFALSE 12829
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12661: LD_INT 22
12663: PUSH
12664: LD_INT 22
12666: PUSH
12667: LD_INT 24
12669: PUSH
12670: LD_INT 24
12672: PUSH
12673: LD_INT 24
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: PUSH
12683: LD_OWVAR 67
12687: PUSH
12688: LD_INT 0
12690: PPUSH
12691: LD_INT 1
12693: PPUSH
12694: CALL_OW 12
12698: PLUS
12699: ARRAY
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: LD_INT 44
12709: PPUSH
12710: LD_INT 25
12712: PPUSH
12713: CALL 35311 0 5
// veh := CreateVehicle ;
12717: LD_ADDR_VAR 0 6
12721: PUSH
12722: CALL_OW 45
12726: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12727: LD_VAR 0 6
12731: PPUSH
12732: LD_INT 2
12734: PPUSH
12735: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12739: LD_VAR 0 6
12743: PPUSH
12744: LD_VAR 0 7
12748: PUSH
12749: LD_VAR 0 2
12753: ARRAY
12754: PUSH
12755: LD_INT 1
12757: ARRAY
12758: PPUSH
12759: LD_VAR 0 7
12763: PUSH
12764: LD_VAR 0 2
12768: ARRAY
12769: PUSH
12770: LD_INT 2
12772: ARRAY
12773: PPUSH
12774: LD_INT 0
12776: PPUSH
12777: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12781: LD_INT 0
12783: PPUSH
12784: LD_INT 3
12786: PPUSH
12787: LD_INT 6
12789: PPUSH
12790: CALL_OW 380
// un := CreateHuman ;
12794: LD_ADDR_VAR 0 5
12798: PUSH
12799: CALL_OW 44
12803: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12804: LD_VAR 0 5
12808: PPUSH
12809: LD_VAR 0 6
12813: PPUSH
12814: CALL_OW 52
// ComHold ( veh ) ;
12818: LD_VAR 0 6
12822: PPUSH
12823: CALL_OW 140
// end ;
12827: GO 12658
12829: POP
12830: POP
// tmp := [ 191 , 122 ] ;
12831: LD_ADDR_VAR 0 7
12835: PUSH
12836: LD_INT 191
12838: PUSH
12839: LD_INT 122
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12846: LD_INT 24
12848: PPUSH
12849: LD_INT 1
12851: PPUSH
12852: LD_INT 1
12854: PPUSH
12855: LD_INT 44
12857: PPUSH
12858: LD_INT 30
12860: PPUSH
12861: CALL 35311 0 5
// ruBlockadeTank := CreateVehicle ;
12865: LD_ADDR_EXP 55
12869: PUSH
12870: CALL_OW 45
12874: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12875: LD_EXP 55
12879: PPUSH
12880: LD_INT 2
12882: PPUSH
12883: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12887: LD_EXP 55
12891: PPUSH
12892: LD_INT 191
12894: PPUSH
12895: LD_INT 122
12897: PPUSH
12898: LD_INT 0
12900: PPUSH
12901: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12905: LD_INT 1
12907: PPUSH
12908: LD_INT 5
12910: PUSH
12911: LD_INT 6
12913: PUSH
12914: LD_INT 7
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: PUSH
12922: LD_OWVAR 67
12926: PUSH
12927: LD_INT 1
12929: MINUS
12930: ARRAY
12931: PPUSH
12932: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12936: CALL_OW 44
12940: PPUSH
12941: LD_EXP 55
12945: PPUSH
12946: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12950: LD_EXP 55
12954: PPUSH
12955: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12959: LD_ADDR_EXP 57
12963: PUSH
12964: EMPTY
12965: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12966: LD_ADDR_VAR 0 2
12970: PUSH
12971: DOUBLE
12972: LD_INT 1
12974: DEC
12975: ST_TO_ADDR
12976: LD_INT 2
12978: PUSH
12979: LD_INT 2
12981: PUSH
12982: LD_INT 3
12984: PUSH
12985: LD_INT 3
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: PUSH
12994: LD_OWVAR 67
12998: ARRAY
12999: PUSH
13000: FOR_TO
13001: IFFALSE 13117
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
13003: LD_INT 0
13005: PPUSH
13006: LD_INT 1
13008: PPUSH
13009: LD_INT 4
13011: PUSH
13012: LD_INT 5
13014: PUSH
13015: LD_INT 6
13017: PUSH
13018: LD_INT 7
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: LD_OWVAR 67
13031: ARRAY
13032: PPUSH
13033: CALL_OW 380
// un := CreateHuman ;
13037: LD_ADDR_VAR 0 5
13041: PUSH
13042: CALL_OW 44
13046: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
13047: LD_VAR 0 5
13051: PPUSH
13052: LD_INT 9
13054: PPUSH
13055: LD_INT 0
13057: PPUSH
13058: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
13062: LD_VAR 0 5
13066: PPUSH
13067: LD_INT 198
13069: PPUSH
13070: LD_INT 129
13072: PPUSH
13073: CALL_OW 118
// AddComCrawl ( un ) ;
13077: LD_VAR 0 5
13081: PPUSH
13082: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
13086: LD_ADDR_EXP 57
13090: PUSH
13091: LD_EXP 57
13095: PPUSH
13096: LD_EXP 57
13100: PUSH
13101: LD_INT 1
13103: PLUS
13104: PPUSH
13105: LD_VAR 0 5
13109: PPUSH
13110: CALL_OW 1
13114: ST_TO_ADDR
// end ;
13115: GO 13000
13117: POP
13118: POP
// PrepareHuman ( false , 4 , 5 ) ;
13119: LD_INT 0
13121: PPUSH
13122: LD_INT 4
13124: PPUSH
13125: LD_INT 5
13127: PPUSH
13128: CALL_OW 380
// un := CreateHuman ;
13132: LD_ADDR_VAR 0 5
13136: PUSH
13137: CALL_OW 44
13141: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
13142: LD_VAR 0 5
13146: PPUSH
13147: LD_INT 179
13149: PPUSH
13150: LD_INT 113
13152: PPUSH
13153: LD_INT 0
13155: PPUSH
13156: CALL_OW 48
// ComHold ( un ) ;
13160: LD_VAR 0 5
13164: PPUSH
13165: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
13169: LD_ADDR_EXP 57
13173: PUSH
13174: LD_EXP 57
13178: PPUSH
13179: LD_EXP 57
13183: PUSH
13184: LD_INT 1
13186: PLUS
13187: PPUSH
13188: LD_VAR 0 5
13192: PPUSH
13193: CALL_OW 1
13197: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
13198: LD_ADDR_VAR 0 7
13202: PUSH
13203: LD_INT 167
13205: PPUSH
13206: LD_INT 243
13208: PPUSH
13209: CALL_OW 428
13213: PPUSH
13214: CALL_OW 274
13218: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
13219: LD_VAR 0 7
13223: PPUSH
13224: LD_INT 1
13226: PPUSH
13227: LD_INT 1000
13229: PPUSH
13230: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
13234: LD_VAR 0 7
13238: PPUSH
13239: LD_INT 2
13241: PPUSH
13242: LD_INT 400
13244: PPUSH
13245: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13249: LD_ADDR_VAR 0 7
13253: PUSH
13254: LD_INT 169
13256: PPUSH
13257: LD_INT 229
13259: PPUSH
13260: CALL_OW 428
13264: ST_TO_ADDR
// for i := 1 to 3 do
13265: LD_ADDR_VAR 0 2
13269: PUSH
13270: DOUBLE
13271: LD_INT 1
13273: DEC
13274: ST_TO_ADDR
13275: LD_INT 3
13277: PUSH
13278: FOR_TO
13279: IFFALSE 13370
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13281: LD_INT 0
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: LD_INT 4
13289: PUSH
13290: LD_INT 5
13292: PUSH
13293: LD_INT 5
13295: PUSH
13296: LD_INT 6
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: PUSH
13305: LD_OWVAR 67
13309: ARRAY
13310: PPUSH
13311: CALL_OW 380
// un := CreateHuman ;
13315: LD_ADDR_VAR 0 5
13319: PUSH
13320: CALL_OW 44
13324: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13325: LD_VAR 0 5
13329: PPUSH
13330: LD_VAR 0 7
13334: PPUSH
13335: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13339: LD_ADDR_EXP 58
13343: PUSH
13344: LD_EXP 58
13348: PPUSH
13349: LD_EXP 58
13353: PUSH
13354: LD_INT 1
13356: PLUS
13357: PPUSH
13358: LD_VAR 0 5
13362: PPUSH
13363: CALL_OW 1
13367: ST_TO_ADDR
// end ;
13368: GO 13278
13370: POP
13371: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13372: LD_ADDR_VAR 0 7
13376: PUSH
13377: LD_INT 165
13379: PUSH
13380: LD_INT 227
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 173
13389: PUSH
13390: LD_INT 231
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: ST_TO_ADDR
// for i := 1 to tmp do
13401: LD_ADDR_VAR 0 2
13405: PUSH
13406: DOUBLE
13407: LD_INT 1
13409: DEC
13410: ST_TO_ADDR
13411: LD_VAR 0 7
13415: PUSH
13416: FOR_TO
13417: IFFALSE 13538
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13419: LD_INT 0
13421: PPUSH
13422: LD_INT 1
13424: PPUSH
13425: LD_INT 4
13427: PUSH
13428: LD_INT 5
13430: PUSH
13431: LD_INT 5
13433: PUSH
13434: LD_INT 6
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: PUSH
13443: LD_OWVAR 67
13447: ARRAY
13448: PPUSH
13449: CALL_OW 380
// un := CreateHuman ;
13453: LD_ADDR_VAR 0 5
13457: PUSH
13458: CALL_OW 44
13462: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13463: LD_VAR 0 5
13467: PPUSH
13468: LD_VAR 0 7
13472: PUSH
13473: LD_VAR 0 2
13477: ARRAY
13478: PUSH
13479: LD_INT 1
13481: ARRAY
13482: PPUSH
13483: LD_VAR 0 7
13487: PUSH
13488: LD_VAR 0 2
13492: ARRAY
13493: PUSH
13494: LD_INT 2
13496: ARRAY
13497: PPUSH
13498: CALL_OW 428
13502: PPUSH
13503: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13507: LD_ADDR_EXP 58
13511: PUSH
13512: LD_EXP 58
13516: PPUSH
13517: LD_EXP 58
13521: PUSH
13522: LD_INT 1
13524: PLUS
13525: PPUSH
13526: LD_VAR 0 5
13530: PPUSH
13531: CALL_OW 1
13535: ST_TO_ADDR
// end ;
13536: GO 13416
13538: POP
13539: POP
// for i := 1 to 2 do
13540: LD_ADDR_VAR 0 2
13544: PUSH
13545: DOUBLE
13546: LD_INT 1
13548: DEC
13549: ST_TO_ADDR
13550: LD_INT 2
13552: PUSH
13553: FOR_TO
13554: IFFALSE 13609
// begin InitHc ;
13556: CALL_OW 19
// uc_nation := 0 ;
13560: LD_ADDR_OWVAR 21
13564: PUSH
13565: LD_INT 0
13567: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13568: LD_ADDR_OWVAR 28
13572: PUSH
13573: LD_INT 16
13575: ST_TO_ADDR
// un := CreateHuman ;
13576: LD_ADDR_VAR 0 5
13580: PUSH
13581: CALL_OW 44
13585: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13586: LD_VAR 0 5
13590: PPUSH
13591: LD_INT 166
13593: PPUSH
13594: LD_INT 233
13596: PPUSH
13597: LD_INT 2
13599: PPUSH
13600: LD_INT 0
13602: PPUSH
13603: CALL_OW 50
// end ;
13607: GO 13553
13609: POP
13610: POP
// uc_nation := 3 ;
13611: LD_ADDR_OWVAR 21
13615: PUSH
13616: LD_INT 3
13618: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13619: LD_ADDR_VAR 0 7
13623: PUSH
13624: LD_INT 71
13626: PUSH
13627: LD_INT 52
13629: PUSH
13630: LD_INT 11
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: ST_TO_ADDR
// for i in tmp do
13638: LD_ADDR_VAR 0 2
13642: PUSH
13643: LD_VAR 0 7
13647: PUSH
13648: FOR_IN
13649: IFFALSE 13693
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13651: LD_VAR 0 2
13655: PPUSH
13656: CALL_OW 274
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: LD_INT 3000
13666: PPUSH
13667: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13671: LD_VAR 0 2
13675: PPUSH
13676: CALL_OW 274
13680: PPUSH
13681: LD_INT 2
13683: PPUSH
13684: LD_INT 600
13686: PPUSH
13687: CALL_OW 277
// end ;
13691: GO 13648
13693: POP
13694: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13695: LD_ADDR_VAR 0 7
13699: PUSH
13700: LD_INT 41
13702: PUSH
13703: LD_INT 57
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 38
13712: PUSH
13713: LD_INT 55
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 50
13722: PUSH
13723: LD_INT 73
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 51
13732: PUSH
13733: LD_INT 65
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 82
13742: PUSH
13743: LD_INT 93
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 87
13752: PUSH
13753: LD_INT 100
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 91
13762: PUSH
13763: LD_INT 109
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 84
13772: PUSH
13773: LD_INT 120
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 113
13782: PUSH
13783: LD_INT 153
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 123
13792: PUSH
13793: LD_INT 171
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 125
13802: PUSH
13803: LD_INT 178
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 125
13812: PUSH
13813: LD_INT 188
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 125
13822: PUSH
13823: LD_INT 201
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 33
13832: PUSH
13833: LD_INT 60
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: LD_INT 76
13842: PUSH
13843: LD_INT 95
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 84
13852: PUSH
13853: LD_INT 111
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 112
13862: PUSH
13863: LD_INT 165
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: ST_TO_ADDR
// for i := 1 to tmp do
13889: LD_ADDR_VAR 0 2
13893: PUSH
13894: DOUBLE
13895: LD_INT 1
13897: DEC
13898: ST_TO_ADDR
13899: LD_VAR 0 7
13903: PUSH
13904: FOR_TO
13905: IFFALSE 14152
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13907: LD_ADDR_VAR 0 4
13911: PUSH
13912: LD_VAR 0 7
13916: PUSH
13917: LD_VAR 0 2
13921: ARRAY
13922: PUSH
13923: LD_INT 1
13925: ARRAY
13926: PPUSH
13927: LD_VAR 0 7
13931: PUSH
13932: LD_VAR 0 2
13936: ARRAY
13937: PUSH
13938: LD_INT 2
13940: ARRAY
13941: PPUSH
13942: CALL_OW 428
13946: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13947: LD_VAR 0 4
13951: PPUSH
13952: CALL_OW 266
13956: PUSH
13957: LD_INT 4
13959: PUSH
13960: LD_INT 5
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: IN
13967: IFFALSE 14063
// begin for j := 1 to Difficulty do
13969: LD_ADDR_VAR 0 3
13973: PUSH
13974: DOUBLE
13975: LD_INT 1
13977: DEC
13978: ST_TO_ADDR
13979: LD_OWVAR 67
13983: PUSH
13984: FOR_TO
13985: IFFALSE 14059
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13987: LD_INT 0
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: LD_INT 4
13995: PUSH
13996: LD_INT 5
13998: PUSH
13999: LD_INT 5
14001: PUSH
14002: LD_INT 6
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: PUSH
14011: LD_OWVAR 67
14015: ARRAY
14016: PPUSH
14017: CALL_OW 380
// un := CreateHuman ;
14021: LD_ADDR_VAR 0 5
14025: PUSH
14026: CALL_OW 44
14030: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14031: LD_VAR 0 5
14035: PPUSH
14036: LD_VAR 0 4
14040: PPUSH
14041: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
14045: LD_VAR 0 5
14049: PPUSH
14050: LD_INT 9
14052: PPUSH
14053: CALL_OW 336
// end ;
14057: GO 13984
14059: POP
14060: POP
// end else
14061: GO 14121
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14063: LD_INT 0
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: LD_INT 4
14071: PUSH
14072: LD_INT 5
14074: PUSH
14075: LD_INT 5
14077: PUSH
14078: LD_INT 6
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: PUSH
14087: LD_OWVAR 67
14091: ARRAY
14092: PPUSH
14093: CALL_OW 380
// un := CreateHuman ;
14097: LD_ADDR_VAR 0 5
14101: PUSH
14102: CALL_OW 44
14106: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14107: LD_VAR 0 5
14111: PPUSH
14112: LD_VAR 0 4
14116: PPUSH
14117: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14121: LD_ADDR_EXP 59
14125: PUSH
14126: LD_EXP 59
14130: PPUSH
14131: LD_EXP 59
14135: PUSH
14136: LD_INT 1
14138: PLUS
14139: PPUSH
14140: LD_VAR 0 5
14144: PPUSH
14145: CALL_OW 1
14149: ST_TO_ADDR
// end ;
14150: GO 13904
14152: POP
14153: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
14154: LD_ADDR_VAR 0 4
14158: PUSH
14159: LD_INT 10
14161: PPUSH
14162: LD_INT 22
14164: PUSH
14165: LD_INT 3
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 30
14174: PUSH
14175: LD_INT 32
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 58
14184: PUSH
14185: EMPTY
14186: LIST
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: LIST
14192: PPUSH
14193: CALL_OW 70
14197: PUSH
14198: FOR_IN
14199: IFFALSE 14333
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
14201: LD_INT 40
14203: PUSH
14204: LD_INT 50
14206: PUSH
14207: LD_INT 75
14209: PUSH
14210: LD_INT 80
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: PUSH
14219: LD_OWVAR 67
14223: ARRAY
14224: PUSH
14225: LD_EXP 7
14229: PUSH
14230: LD_INT 10
14232: MUL
14233: MINUS
14234: PPUSH
14235: CALL_OW 13
14239: NOT
14240: IFFALSE 14244
// continue ;
14242: GO 14198
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14244: LD_INT 0
14246: PPUSH
14247: LD_INT 1
14249: PPUSH
14250: LD_INT 4
14252: PUSH
14253: LD_INT 5
14255: PUSH
14256: LD_INT 5
14258: PUSH
14259: LD_INT 6
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: PUSH
14268: LD_OWVAR 67
14272: ARRAY
14273: PPUSH
14274: CALL_OW 380
// un := CreateHuman ;
14278: LD_ADDR_VAR 0 5
14282: PUSH
14283: CALL_OW 44
14287: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14288: LD_VAR 0 5
14292: PPUSH
14293: LD_VAR 0 4
14297: PPUSH
14298: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14302: LD_ADDR_EXP 59
14306: PUSH
14307: LD_EXP 59
14311: PPUSH
14312: LD_EXP 59
14316: PUSH
14317: LD_INT 1
14319: PLUS
14320: PPUSH
14321: LD_VAR 0 5
14325: PPUSH
14326: CALL_OW 1
14330: ST_TO_ADDR
// end ;
14331: GO 14198
14333: POP
14334: POP
// for i := 1 to 5 do
14335: LD_ADDR_VAR 0 2
14339: PUSH
14340: DOUBLE
14341: LD_INT 1
14343: DEC
14344: ST_TO_ADDR
14345: LD_INT 5
14347: PUSH
14348: FOR_TO
14349: IFFALSE 14447
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14351: LD_INT 0
14353: PPUSH
14354: LD_INT 2
14356: PPUSH
14357: LD_INT 4
14359: PUSH
14360: LD_INT 5
14362: PUSH
14363: LD_INT 5
14365: PUSH
14366: LD_INT 6
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: PUSH
14375: LD_OWVAR 67
14379: ARRAY
14380: PPUSH
14381: CALL_OW 380
// un := CreateHuman ;
14385: LD_ADDR_VAR 0 5
14389: PUSH
14390: CALL_OW 44
14394: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14395: LD_VAR 0 5
14399: PPUSH
14400: LD_INT 66
14402: PPUSH
14403: LD_INT 101
14405: PPUSH
14406: LD_INT 3
14408: PPUSH
14409: LD_INT 0
14411: PPUSH
14412: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14416: LD_ADDR_EXP 59
14420: PUSH
14421: LD_EXP 59
14425: PPUSH
14426: LD_EXP 59
14430: PUSH
14431: LD_INT 1
14433: PLUS
14434: PPUSH
14435: LD_VAR 0 5
14439: PPUSH
14440: CALL_OW 1
14444: ST_TO_ADDR
// end ;
14445: GO 14348
14447: POP
14448: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14449: LD_ADDR_VAR 0 7
14453: PUSH
14454: LD_INT 72
14456: PUSH
14457: LD_INT 12
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// for i := 1 to tmp do
14464: LD_ADDR_VAR 0 2
14468: PUSH
14469: DOUBLE
14470: LD_INT 1
14472: DEC
14473: ST_TO_ADDR
14474: LD_VAR 0 7
14478: PUSH
14479: FOR_TO
14480: IFFALSE 14597
// for j := 1 to 6 do
14482: LD_ADDR_VAR 0 3
14486: PUSH
14487: DOUBLE
14488: LD_INT 1
14490: DEC
14491: ST_TO_ADDR
14492: LD_INT 6
14494: PUSH
14495: FOR_TO
14496: IFFALSE 14593
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14498: LD_INT 0
14500: PPUSH
14501: LD_INT 3
14503: PPUSH
14504: LD_INT 4
14506: PUSH
14507: LD_INT 5
14509: PUSH
14510: LD_INT 5
14512: PUSH
14513: LD_INT 6
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: PUSH
14522: LD_OWVAR 67
14526: ARRAY
14527: PPUSH
14528: CALL_OW 380
// un := CreateHuman ;
14532: LD_ADDR_VAR 0 5
14536: PUSH
14537: CALL_OW 44
14541: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14542: LD_VAR 0 5
14546: PPUSH
14547: LD_VAR 0 7
14551: PUSH
14552: LD_VAR 0 2
14556: ARRAY
14557: PPUSH
14558: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14562: LD_ADDR_EXP 59
14566: PUSH
14567: LD_EXP 59
14571: PPUSH
14572: LD_EXP 59
14576: PUSH
14577: LD_INT 1
14579: PLUS
14580: PPUSH
14581: LD_VAR 0 5
14585: PPUSH
14586: CALL_OW 1
14590: ST_TO_ADDR
// end ;
14591: GO 14495
14593: POP
14594: POP
14595: GO 14479
14597: POP
14598: POP
// for i := 1 to 3 do
14599: LD_ADDR_VAR 0 2
14603: PUSH
14604: DOUBLE
14605: LD_INT 1
14607: DEC
14608: ST_TO_ADDR
14609: LD_INT 3
14611: PUSH
14612: FOR_TO
14613: IFFALSE 14702
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14615: LD_INT 0
14617: PPUSH
14618: LD_INT 4
14620: PPUSH
14621: LD_INT 4
14623: PUSH
14624: LD_INT 5
14626: PUSH
14627: LD_INT 5
14629: PUSH
14630: LD_INT 6
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: LD_OWVAR 67
14643: ARRAY
14644: PPUSH
14645: CALL_OW 380
// un := CreateHuman ;
14649: LD_ADDR_VAR 0 5
14653: PUSH
14654: CALL_OW 44
14658: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14659: LD_VAR 0 5
14663: PPUSH
14664: LD_INT 17
14666: PPUSH
14667: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14671: LD_ADDR_EXP 59
14675: PUSH
14676: LD_EXP 59
14680: PPUSH
14681: LD_EXP 59
14685: PUSH
14686: LD_INT 1
14688: PLUS
14689: PPUSH
14690: LD_VAR 0 5
14694: PPUSH
14695: CALL_OW 1
14699: ST_TO_ADDR
// end ;
14700: GO 14612
14702: POP
14703: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14704: LD_ADDR_VAR 0 2
14708: PUSH
14709: DOUBLE
14710: LD_INT 1
14712: DEC
14713: ST_TO_ADDR
14714: LD_INT 2
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: LD_INT 3
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: PUSH
14732: LD_OWVAR 67
14736: ARRAY
14737: PUSH
14738: FOR_TO
14739: IFFALSE 14859
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14741: LD_INT 22
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: LD_INT 1
14749: PPUSH
14750: LD_INT 52
14752: PPUSH
14753: LD_INT 100
14755: PPUSH
14756: CALL 35311 0 5
// veh := CreateVehicle ;
14760: LD_ADDR_VAR 0 6
14764: PUSH
14765: CALL_OW 45
14769: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14770: LD_INT 0
14772: PPUSH
14773: LD_INT 3
14775: PPUSH
14776: LD_INT 4
14778: PPUSH
14779: CALL_OW 380
// un := CreateHuman ;
14783: LD_ADDR_VAR 0 5
14787: PUSH
14788: CALL_OW 44
14792: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14793: LD_VAR 0 6
14797: PPUSH
14798: LD_INT 107
14800: PPUSH
14801: LD_INT 182
14803: PPUSH
14804: LD_INT 4
14806: PPUSH
14807: LD_INT 0
14809: PPUSH
14810: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14814: LD_VAR 0 5
14818: PPUSH
14819: LD_VAR 0 6
14823: PPUSH
14824: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14828: LD_ADDR_EXP 59
14832: PUSH
14833: LD_EXP 59
14837: PPUSH
14838: LD_EXP 59
14842: PUSH
14843: LD_INT 1
14845: PLUS
14846: PPUSH
14847: LD_VAR 0 5
14851: PPUSH
14852: CALL_OW 1
14856: ST_TO_ADDR
// end ;
14857: GO 14738
14859: POP
14860: POP
// InitHc ;
14861: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14865: LD_ADDR_VAR 0 2
14869: PUSH
14870: DOUBLE
14871: LD_INT 1
14873: DEC
14874: ST_TO_ADDR
14875: LD_INT 3
14877: PUSH
14878: LD_INT 5
14880: PUSH
14881: LD_INT 6
14883: PUSH
14884: LD_INT 8
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: PUSH
14893: LD_OWVAR 67
14897: ARRAY
14898: PUSH
14899: FOR_TO
14900: IFFALSE 14995
// begin uc_nation := 0 ;
14902: LD_ADDR_OWVAR 21
14906: PUSH
14907: LD_INT 0
14909: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14910: LD_ADDR_OWVAR 28
14914: PUSH
14915: LD_INT 15
14917: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14918: LD_ADDR_OWVAR 31
14922: PUSH
14923: LD_INT 3
14925: PUSH
14926: LD_INT 0
14928: PUSH
14929: LD_INT 0
14931: PUSH
14932: LD_INT 0
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: ST_TO_ADDR
// un := CreateHuman ;
14941: LD_ADDR_VAR 0 5
14945: PUSH
14946: CALL_OW 44
14950: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14951: LD_VAR 0 5
14955: PPUSH
14956: LD_INT 269
14958: PUSH
14959: LD_INT 300
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_VAR 0 2
14970: PUSH
14971: LD_INT 2
14973: MOD
14974: PUSH
14975: LD_INT 1
14977: PLUS
14978: ARRAY
14979: PPUSH
14980: LD_INT 182
14982: PPUSH
14983: LD_INT 4
14985: PPUSH
14986: LD_INT 0
14988: PPUSH
14989: CALL_OW 50
// end ;
14993: GO 14899
14995: POP
14996: POP
// uc_nation := 3 ;
14997: LD_ADDR_OWVAR 21
15001: PUSH
15002: LD_INT 3
15004: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
15005: LD_EXP 8
15009: PUSH
15010: LD_INT 10
15012: PUSH
15013: LD_INT 8
15015: PUSH
15016: LD_INT 6
15018: PUSH
15019: LD_INT 5
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: PUSH
15028: LD_OWVAR 67
15032: ARRAY
15033: LESS
15034: IFFALSE 15113
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
15036: LD_INT 21
15038: PPUSH
15039: LD_INT 1
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: LD_INT 51
15047: PPUSH
15048: LD_INT 12
15050: PPUSH
15051: CALL 35311 0 5
// veh := CreateVehicle ;
15055: LD_ADDR_VAR 0 6
15059: PUSH
15060: CALL_OW 45
15064: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
15065: LD_VAR 0 6
15069: PPUSH
15070: LD_INT 269
15072: PPUSH
15073: LD_INT 66
15075: PPUSH
15076: LD_INT 4
15078: PPUSH
15079: LD_INT 0
15081: PPUSH
15082: CALL 70651 0 5
// SetLives ( veh , 333 ) ;
15086: LD_VAR 0 6
15090: PPUSH
15091: LD_INT 333
15093: PPUSH
15094: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
15098: LD_VAR 0 6
15102: PPUSH
15103: LD_INT 2
15105: PPUSH
15106: LD_INT 100
15108: PPUSH
15109: CALL_OW 290
// end ; end ;
15113: LD_VAR 0 1
15117: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
15118: LD_EXP 55
15122: IFFALSE 15139
15124: PUSH
15125: LD_EXP 55
15129: PPUSH
15130: CALL_OW 255
15134: PUSH
15135: LD_INT 3
15137: EQUAL
15138: AND
15139: IFFALSE 15304
15141: GO 15143
15143: DISABLE
15144: LD_INT 0
15146: PPUSH
// begin enable ;
15147: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
15148: LD_INT 81
15150: PUSH
15151: LD_INT 3
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 91
15160: PUSH
15161: LD_EXP 55
15165: PUSH
15166: LD_INT 15
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PPUSH
15178: CALL_OW 69
15182: IFFALSE 15262
// begin if not IsDrivenBy ( ruBlockadeTank ) then
15184: LD_EXP 55
15188: PPUSH
15189: CALL_OW 311
15193: NOT
15194: IFFALSE 15260
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
15196: LD_ADDR_VAR 0 1
15200: PUSH
15201: LD_INT 22
15203: PUSH
15204: LD_INT 3
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 21
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PPUSH
15225: CALL_OW 69
15229: PPUSH
15230: LD_EXP 55
15234: PPUSH
15235: CALL_OW 74
15239: ST_TO_ADDR
// if driver then
15240: LD_VAR 0 1
15244: IFFALSE 15260
// ComEnterUnit ( driver , ruBlockadeTank ) ;
15246: LD_VAR 0 1
15250: PPUSH
15251: LD_EXP 55
15255: PPUSH
15256: CALL_OW 120
// end ; exit ;
15260: GO 15304
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15262: LD_EXP 55
15266: PPUSH
15267: CALL_OW 256
15271: PUSH
15272: LD_INT 1000
15274: LESS
15275: IFFALSE 15288
15277: PUSH
15278: LD_EXP 55
15282: PPUSH
15283: CALL_OW 311
15287: AND
15288: IFFALSE 15304
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15290: LD_EXP 55
15294: PPUSH
15295: CALL_OW 311
15299: PPUSH
15300: CALL 70205 0 1
// end ;
15304: PPOPN 1
15306: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15307: LD_EXP 57
15311: PPUSH
15312: LD_INT 3
15314: PUSH
15315: LD_INT 24
15317: PUSH
15318: LD_INT 1000
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 72
15333: IFFALSE 15366
15335: PUSH
15336: LD_EXP 57
15340: PPUSH
15341: LD_INT 25
15343: PUSH
15344: LD_INT 4
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 50
15353: PUSH
15354: EMPTY
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PPUSH
15361: CALL_OW 72
15365: AND
15366: IFFALSE 15554
15368: GO 15370
15370: DISABLE
15371: LD_INT 0
15373: PPUSH
15374: PPUSH
15375: PPUSH
// begin enable ;
15376: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15377: LD_ADDR_VAR 0 3
15381: PUSH
15382: LD_EXP 57
15386: PPUSH
15387: LD_INT 3
15389: PUSH
15390: LD_INT 24
15392: PUSH
15393: LD_INT 1000
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 72
15408: PPUSH
15409: LD_INT 1
15411: PPUSH
15412: CALL 70449 0 2
15416: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15417: LD_ADDR_VAR 0 2
15421: PUSH
15422: LD_EXP 57
15426: PPUSH
15427: LD_INT 25
15429: PUSH
15430: LD_INT 4
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 50
15439: PUSH
15440: EMPTY
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 72
15451: PUSH
15452: LD_INT 1
15454: ARRAY
15455: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15456: LD_VAR 0 2
15460: PPUSH
15461: LD_VAR 0 3
15465: PUSH
15466: LD_INT 1
15468: ARRAY
15469: PPUSH
15470: CALL 65746 0 2
15474: NOT
15475: IFFALSE 15554
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15477: LD_VAR 0 3
15481: PUSH
15482: LD_INT 1
15484: ARRAY
15485: PPUSH
15486: LD_INT 9
15488: PPUSH
15489: CALL_OW 308
15493: NOT
15494: IFFALSE 15512
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15496: LD_VAR 0 3
15500: PUSH
15501: LD_INT 1
15503: ARRAY
15504: PPUSH
15505: LD_INT 9
15507: PPUSH
15508: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15512: LD_VAR 0 2
15516: PPUSH
15517: LD_VAR 0 3
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PPUSH
15526: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15530: LD_VAR 0 2
15534: PPUSH
15535: LD_INT 179
15537: PPUSH
15538: LD_INT 113
15540: PPUSH
15541: CALL_OW 171
// AddComHold ( sci ) ;
15545: LD_VAR 0 2
15549: PPUSH
15550: CALL_OW 200
// end ; end ;
15554: PPOPN 3
15556: END
// every 0 0$1 trigger not IsOk ( Morozov ) do var i , tmp ;
15557: LD_EXP 53
15561: PPUSH
15562: CALL_OW 302
15566: NOT
15567: IFFALSE 15683
15569: GO 15571
15571: DISABLE
15572: LD_INT 0
15574: PPUSH
15575: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15576: LD_ADDR_VAR 0 2
15580: PUSH
15581: LD_EXP 59
15585: PPUSH
15586: LD_INT 25
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 50
15598: PUSH
15599: EMPTY
15600: LIST
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PPUSH
15606: CALL_OW 72
15610: ST_TO_ADDR
// if not tmp then
15611: LD_VAR 0 2
15615: NOT
15616: IFFALSE 15620
// exit ;
15618: GO 15683
// for i in tmp do
15620: LD_ADDR_VAR 0 1
15624: PUSH
15625: LD_VAR 0 2
15629: PUSH
15630: FOR_IN
15631: IFFALSE 15681
// begin if Prob ( 50 ) then
15633: LD_INT 50
15635: PPUSH
15636: CALL_OW 13
15640: IFFALSE 15644
// continue ;
15642: GO 15630
// if IsInUnit ( i ) then
15644: LD_VAR 0 1
15648: PPUSH
15649: CALL_OW 310
15653: IFFALSE 15664
// ComExitBuilding ( i ) ;
15655: LD_VAR 0 1
15659: PPUSH
15660: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15664: LD_VAR 0 1
15668: PPUSH
15669: LD_INT 84
15671: PPUSH
15672: LD_INT 133
15674: PPUSH
15675: CALL_OW 174
// end ;
15679: GO 15630
15681: POP
15682: POP
// end ;
15683: PPOPN 2
15685: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15686: LD_EXP 14
15690: IFFALSE 15871
15692: GO 15694
15694: DISABLE
15695: LD_INT 0
15697: PPUSH
15698: PPUSH
15699: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15700: LD_ADDR_VAR 0 2
15704: PUSH
15705: LD_INT 72
15707: PUSH
15708: LD_INT 12
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15715: LD_ADDR_VAR 0 3
15719: PUSH
15720: LD_INT 44
15722: PUSH
15723: LD_INT 43
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 45
15732: PUSH
15733: LD_INT 44
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 45
15742: PUSH
15743: LD_INT 46
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 45
15752: PUSH
15753: LD_INT 46
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: PUSH
15766: LD_OWVAR 67
15770: ARRAY
15771: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15772: LD_ADDR_VAR 0 1
15776: PUSH
15777: DOUBLE
15778: LD_INT 1
15780: DEC
15781: ST_TO_ADDR
15782: LD_INT 1
15784: PUSH
15785: LD_INT 2
15787: PUSH
15788: LD_INT 2
15790: PUSH
15791: LD_INT 3
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: PUSH
15800: LD_OWVAR 67
15804: ARRAY
15805: PUSH
15806: FOR_TO
15807: IFFALSE 15869
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15809: LD_VAR 0 2
15813: PPUSH
15814: LD_INT 22
15816: PUSH
15817: LD_INT 23
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_VAR 0 1
15828: PUSH
15829: LD_INT 2
15831: MOD
15832: PUSH
15833: LD_INT 1
15835: PLUS
15836: ARRAY
15837: PPUSH
15838: LD_INT 1
15840: PPUSH
15841: LD_INT 1
15843: PPUSH
15844: LD_VAR 0 3
15848: PUSH
15849: LD_VAR 0 1
15853: PUSH
15854: LD_INT 2
15856: MOD
15857: PUSH
15858: LD_INT 1
15860: PLUS
15861: ARRAY
15862: PPUSH
15863: CALL_OW 185
15867: GO 15806
15869: POP
15870: POP
// end ;
15871: PPOPN 3
15873: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15874: LD_EXP 11
15878: IFFALSE 17059
15880: GO 15882
15882: DISABLE
15883: LD_INT 0
15885: PPUSH
15886: PPUSH
15887: PPUSH
15888: PPUSH
15889: PPUSH
15890: PPUSH
// begin enable ;
15891: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15892: LD_ADDR_VAR 0 6
15896: PUSH
15897: LD_INT 10
15899: PPUSH
15900: LD_INT 81
15902: PUSH
15903: LD_INT 3
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PPUSH
15910: CALL_OW 70
15914: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15915: LD_EXP 60
15919: IFFALSE 16197
// begin for i in ruSpecialVehicleGroup do
15921: LD_ADDR_VAR 0 1
15925: PUSH
15926: LD_EXP 60
15930: PUSH
15931: FOR_IN
15932: IFFALSE 16195
// begin if enemyInBase then
15934: LD_VAR 0 6
15938: IFFALSE 16193
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15940: LD_VAR 0 1
15944: PPUSH
15945: CALL_OW 256
15949: PUSH
15950: LD_INT 500
15952: GREATER
15953: IFFALSE 15970
15955: PUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 110
15965: PUSH
15966: LD_INT 0
15968: EQUAL
15969: AND
15970: IFFALSE 15996
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15972: LD_VAR 0 1
15976: PPUSH
15977: LD_VAR 0 6
15981: PPUSH
15982: LD_VAR 0 1
15986: PPUSH
15987: CALL_OW 74
15991: PPUSH
15992: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15996: LD_VAR 0 1
16000: PPUSH
16001: CALL_OW 256
16005: PUSH
16006: LD_INT 500
16008: LESSEQUAL
16009: IFFALSE 16026
16011: PUSH
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 110
16021: PUSH
16022: LD_INT 0
16024: EQUAL
16025: AND
16026: IFFALSE 16055
// begin SetTag ( i , 1 ) ;
16028: LD_VAR 0 1
16032: PPUSH
16033: LD_INT 1
16035: PPUSH
16036: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_INT 83
16047: PPUSH
16048: LD_INT 134
16050: PPUSH
16051: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
16055: LD_VAR 0 1
16059: PPUSH
16060: CALL_OW 256
16064: PUSH
16065: LD_INT 1000
16067: LESS
16068: IFFALSE 16085
16070: PUSH
16071: LD_VAR 0 1
16075: PPUSH
16076: CALL_OW 110
16080: PUSH
16081: LD_INT 1
16083: EQUAL
16084: AND
16085: IFFALSE 16108
16087: PUSH
16088: LD_VAR 0 1
16092: PPUSH
16093: LD_INT 83
16095: PPUSH
16096: LD_INT 134
16098: PPUSH
16099: CALL_OW 297
16103: PUSH
16104: LD_INT 6
16106: LESS
16107: AND
16108: IFFALSE 16136
// begin SetFuel ( i , 100 ) ;
16110: LD_VAR 0 1
16114: PPUSH
16115: LD_INT 100
16117: PPUSH
16118: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16122: LD_VAR 0 1
16126: PPUSH
16127: CALL_OW 310
16131: PPUSH
16132: CALL 70327 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
16136: LD_VAR 0 1
16140: PPUSH
16141: CALL_OW 256
16145: PUSH
16146: LD_INT 1000
16148: EQUAL
16149: IFFALSE 16166
16151: PUSH
16152: LD_VAR 0 1
16156: PPUSH
16157: CALL_OW 110
16161: PUSH
16162: LD_INT 1
16164: EQUAL
16165: AND
16166: IFFALSE 16179
16168: PUSH
16169: LD_VAR 0 1
16173: PPUSH
16174: CALL_OW 311
16178: AND
16179: IFFALSE 16193
// SetTag ( i , 0 ) ;
16181: LD_VAR 0 1
16185: PPUSH
16186: LD_INT 0
16188: PPUSH
16189: CALL_OW 109
// end ; end ;
16193: GO 15931
16195: POP
16196: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
16197: LD_ADDR_VAR 0 5
16201: PUSH
16202: LD_EXP 59
16206: PPUSH
16207: LD_INT 25
16209: PUSH
16210: LD_INT 4
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PPUSH
16217: CALL_OW 72
16221: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16222: LD_ADDR_VAR 0 4
16226: PUSH
16227: LD_EXP 59
16231: PPUSH
16232: LD_INT 92
16234: PUSH
16235: LD_INT 92
16237: PUSH
16238: LD_INT 155
16240: PUSH
16241: LD_INT 12
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 3
16252: PUSH
16253: LD_INT 24
16255: PUSH
16256: LD_INT 1000
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PPUSH
16271: CALL_OW 72
16275: ST_TO_ADDR
// if sci then
16276: LD_VAR 0 5
16280: IFFALSE 16413
// begin if hurt then
16282: LD_VAR 0 4
16286: IFFALSE 16359
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16288: LD_VAR 0 5
16292: PPUSH
16293: LD_INT 3
16295: PUSH
16296: LD_INT 54
16298: PUSH
16299: EMPTY
16300: LIST
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PPUSH
16306: CALL_OW 72
16310: IFFALSE 16339
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16312: LD_VAR 0 5
16316: PPUSH
16317: LD_INT 3
16319: PUSH
16320: LD_INT 54
16322: PUSH
16323: EMPTY
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PPUSH
16330: CALL_OW 72
16334: PPUSH
16335: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16339: LD_VAR 0 5
16343: PPUSH
16344: LD_VAR 0 4
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PPUSH
16353: CALL_OW 188
// end else
16357: GO 16413
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16359: LD_VAR 0 5
16363: PPUSH
16364: LD_INT 3
16366: PUSH
16367: LD_INT 54
16369: PUSH
16370: EMPTY
16371: LIST
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PPUSH
16377: CALL_OW 72
16381: IFFALSE 16413
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16383: LD_VAR 0 5
16387: PPUSH
16388: LD_INT 3
16390: PUSH
16391: LD_INT 54
16393: PUSH
16394: EMPTY
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PPUSH
16401: CALL_OW 72
16405: PPUSH
16406: LD_INT 17
16408: PPUSH
16409: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_INT 10
16420: PPUSH
16421: LD_INT 21
16423: PUSH
16424: LD_INT 3
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 3
16433: PUSH
16434: LD_INT 24
16436: PUSH
16437: LD_INT 1000
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PPUSH
16452: CALL_OW 70
16456: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16457: LD_ADDR_VAR 0 2
16461: PUSH
16462: LD_EXP 59
16466: PPUSH
16467: LD_INT 25
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PPUSH
16477: CALL_OW 72
16481: PUSH
16482: LD_INT 22
16484: PUSH
16485: LD_INT 3
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 34
16494: PUSH
16495: LD_INT 52
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PPUSH
16506: CALL_OW 69
16510: UNION
16511: ST_TO_ADDR
// if not tmp then
16512: LD_VAR 0 2
16516: NOT
16517: IFFALSE 16521
// exit ;
16519: GO 17059
// for i in tmp do
16521: LD_ADDR_VAR 0 1
16525: PUSH
16526: LD_VAR 0 2
16530: PUSH
16531: FOR_IN
16532: IFFALSE 17057
// begin if GetClass ( i ) = 2 then
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 257
16543: PUSH
16544: LD_INT 2
16546: EQUAL
16547: IFFALSE 16780
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16549: LD_VAR 0 1
16553: PPUSH
16554: CALL_OW 256
16558: PUSH
16559: LD_INT 1000
16561: EQUAL
16562: IFFALSE 16579
16564: PUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 110
16574: PUSH
16575: LD_INT 1
16577: EQUAL
16578: AND
16579: IFFALSE 16593
// SetTag ( i , 0 ) ;
16581: LD_VAR 0 1
16585: PPUSH
16586: LD_INT 0
16588: PPUSH
16589: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 256
16602: PUSH
16603: LD_INT 500
16605: LESSEQUAL
16606: IFFALSE 16623
16608: PUSH
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 110
16618: PUSH
16619: LD_INT 0
16621: EQUAL
16622: AND
16623: IFFALSE 16652
// begin SetTag ( i , 1 ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: LD_INT 1
16632: PPUSH
16633: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16637: LD_VAR 0 1
16641: PPUSH
16642: LD_INT 92
16644: PPUSH
16645: LD_INT 155
16647: PPUSH
16648: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16652: LD_VAR 0 3
16656: IFFALSE 16673
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 256
16668: PUSH
16669: LD_INT 500
16671: GREATER
16672: AND
16673: IFFALSE 16690
16675: PUSH
16676: LD_VAR 0 1
16680: PPUSH
16681: CALL_OW 110
16685: PUSH
16686: LD_INT 0
16688: EQUAL
16689: AND
16690: IFFALSE 16704
16692: PUSH
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 314
16702: NOT
16703: AND
16704: IFFALSE 16778
// begin if b then
16706: LD_VAR 0 3
16710: IFFALSE 16742
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_VAR 0 3
16721: PUSH
16722: LD_INT 1
16724: PPUSH
16725: LD_VAR 0 3
16729: PPUSH
16730: CALL_OW 12
16734: ARRAY
16735: PPUSH
16736: CALL_OW 130
16740: GO 16778
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16742: LD_VAR 0 1
16746: PPUSH
16747: LD_INT 94
16749: PPUSH
16750: LD_INT 165
16752: PPUSH
16753: CALL_OW 297
16757: PUSH
16758: LD_INT 8
16760: GREATER
16761: IFFALSE 16778
// ComMoveXY ( i , 94 , 165 ) ;
16763: LD_VAR 0 1
16767: PPUSH
16768: LD_INT 94
16770: PPUSH
16771: LD_INT 165
16773: PPUSH
16774: CALL_OW 111
// end ; end else
16778: GO 17055
// if GetWeapon ( i ) = ru_crane then
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 264
16789: PUSH
16790: LD_INT 52
16792: EQUAL
16793: IFFALSE 17055
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16795: LD_VAR 0 1
16799: PPUSH
16800: CALL_OW 256
16804: PUSH
16805: LD_INT 1000
16807: EQUAL
16808: IFFALSE 16825
16810: PUSH
16811: LD_VAR 0 1
16815: PPUSH
16816: CALL_OW 110
16820: PUSH
16821: LD_INT 1
16823: EQUAL
16824: AND
16825: IFFALSE 16851
// begin SetTag ( i , 0 ) ;
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_INT 0
16834: PPUSH
16835: CALL_OW 109
// SetFuel ( i , 100 ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: LD_INT 100
16846: PPUSH
16847: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16851: LD_VAR 0 1
16855: PPUSH
16856: CALL_OW 256
16860: PUSH
16861: LD_INT 500
16863: LESSEQUAL
16864: IFFALSE 16881
16866: PUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: CALL_OW 110
16876: PUSH
16877: LD_INT 0
16879: EQUAL
16880: AND
16881: IFFALSE 16924
// begin SetTag ( i , 1 ) ;
16883: LD_VAR 0 1
16887: PPUSH
16888: LD_INT 1
16890: PPUSH
16891: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16895: LD_VAR 0 1
16899: PPUSH
16900: LD_INT 83
16902: PPUSH
16903: LD_INT 135
16905: PPUSH
16906: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16910: LD_VAR 0 1
16914: PPUSH
16915: CALL_OW 310
16919: PPUSH
16920: CALL 70327 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16924: LD_VAR 0 1
16928: PPUSH
16929: CALL_OW 256
16933: PUSH
16934: LD_INT 500
16936: GREATER
16937: IFFALSE 16954
16939: PUSH
16940: LD_VAR 0 1
16944: PPUSH
16945: CALL_OW 110
16949: PUSH
16950: LD_INT 0
16952: EQUAL
16953: AND
16954: IFFALSE 16967
16956: PUSH
16957: LD_VAR 0 1
16961: PPUSH
16962: CALL_OW 311
16966: AND
16967: IFFALSE 16981
16969: PUSH
16970: LD_VAR 0 1
16974: PPUSH
16975: CALL_OW 314
16979: NOT
16980: AND
16981: IFFALSE 17055
// begin if b then
16983: LD_VAR 0 3
16987: IFFALSE 17019
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16989: LD_VAR 0 1
16993: PPUSH
16994: LD_VAR 0 3
16998: PUSH
16999: LD_INT 1
17001: PPUSH
17002: LD_VAR 0 3
17006: PPUSH
17007: CALL_OW 12
17011: ARRAY
17012: PPUSH
17013: CALL_OW 130
17017: GO 17055
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
17019: LD_VAR 0 1
17023: PPUSH
17024: LD_INT 94
17026: PPUSH
17027: LD_INT 165
17029: PPUSH
17030: CALL_OW 297
17034: PUSH
17035: LD_INT 8
17037: GREATER
17038: IFFALSE 17055
// ComMoveXY ( i , 94 , 165 ) ;
17040: LD_VAR 0 1
17044: PPUSH
17045: LD_INT 94
17047: PPUSH
17048: LD_INT 165
17050: PPUSH
17051: CALL_OW 111
// end ; end ; end ;
17055: GO 16531
17057: POP
17058: POP
// end ;
17059: PPOPN 6
17061: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 , empty ;
17062: LD_EXP 23
17066: NOT
17067: IFFALSE 17076
17069: PUSH
17070: LD_EXP 27
17074: NOT
17075: AND
17076: IFFALSE 18071
17078: GO 17080
17080: DISABLE
17081: LD_INT 0
17083: PPUSH
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
// begin enable ;
17089: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
17090: LD_INT 35
17092: PUSH
17093: LD_INT 45
17095: PUSH
17096: LD_INT 55
17098: PUSH
17099: LD_INT 60
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: PUSH
17108: LD_OWVAR 67
17112: ARRAY
17113: PPUSH
17114: CALL_OW 13
17118: IFFALSE 17134
// waveStrength := waveStrength + 1 ;
17120: LD_ADDR_EXP 62
17124: PUSH
17125: LD_EXP 62
17129: PUSH
17130: LD_INT 1
17132: PLUS
17133: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
17134: LD_EXP 62
17138: PUSH
17139: LD_INT 2
17141: PUSH
17142: LD_INT 3
17144: PUSH
17145: LD_INT 4
17147: PUSH
17148: LD_INT 4
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: PUSH
17157: LD_OWVAR 67
17161: ARRAY
17162: GREATER
17163: IFFALSE 17195
// begin waveStrength := waveStrength + 2 ;
17165: LD_ADDR_EXP 62
17169: PUSH
17170: LD_EXP 62
17174: PUSH
17175: LD_INT 2
17177: PLUS
17178: ST_TO_ADDR
// disableAttackOnHeike := true ;
17179: LD_ADDR_EXP 27
17183: PUSH
17184: LD_INT 1
17186: ST_TO_ADDR
// disable ;
17187: DISABLE
// wait ( 3 3$00 ) ;
17188: LD_INT 6300
17190: PPUSH
17191: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
17195: LD_ADDR_VAR 0 1
17199: PUSH
17200: DOUBLE
17201: LD_INT 1
17203: DEC
17204: ST_TO_ADDR
17205: LD_INT 2
17207: PUSH
17208: LD_INT 2
17210: PUSH
17211: LD_INT 3
17213: PUSH
17214: LD_INT 4
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: PUSH
17223: LD_OWVAR 67
17227: ARRAY
17228: PUSH
17229: FOR_TO
17230: IFFALSE 17391
// begin InitHc ;
17232: CALL_OW 19
// InitVc ;
17236: CALL_OW 20
// uc_side := 3 ;
17240: LD_ADDR_OWVAR 20
17244: PUSH
17245: LD_INT 3
17247: ST_TO_ADDR
// uc_nation := 3 ;
17248: LD_ADDR_OWVAR 21
17252: PUSH
17253: LD_INT 3
17255: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
17256: LD_INT 0
17258: PPUSH
17259: LD_INT 1
17261: PPUSH
17262: LD_OWVAR 67
17266: PUSH
17267: LD_INT 2
17269: PLUS
17270: PPUSH
17271: CALL_OW 380
// un := CreateHuman ;
17275: LD_ADDR_VAR 0 2
17279: PUSH
17280: CALL_OW 44
17284: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
17285: LD_VAR 0 2
17289: PPUSH
17290: LD_INT 160
17292: PPUSH
17293: LD_INT 3
17295: PPUSH
17296: LD_INT 2
17298: PPUSH
17299: LD_INT 0
17301: PPUSH
17302: CALL 70651 0 5
// SetClass ( un , class_bazooker ) ;
17306: LD_VAR 0 2
17310: PPUSH
17311: LD_INT 9
17313: PPUSH
17314: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17318: LD_ADDR_EXP 61
17322: PUSH
17323: LD_EXP 61
17327: PPUSH
17328: LD_EXP 61
17332: PUSH
17333: LD_INT 1
17335: PLUS
17336: PPUSH
17337: LD_VAR 0 2
17341: PPUSH
17342: CALL_OW 1
17346: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17347: LD_VAR 0 2
17351: PPUSH
17352: LD_INT 177
17354: PPUSH
17355: LD_INT 17
17357: PPUSH
17358: CALL_OW 111
// wait ( 0 0$2 ) ;
17362: LD_INT 70
17364: PPUSH
17365: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17369: LD_ADDR_VAR 0 5
17373: PUSH
17374: LD_VAR 0 5
17378: PPUSH
17379: LD_VAR 0 2
17383: PPUSH
17384: CALL 68491 0 2
17388: ST_TO_ADDR
// end ;
17389: GO 17229
17391: POP
17392: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17393: LD_VAR 0 5
17397: PPUSH
17398: LD_INT 196
17400: PPUSH
17401: LD_INT 53
17403: PPUSH
17404: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17408: LD_VAR 0 5
17412: PPUSH
17413: LD_INT 199
17415: PPUSH
17416: LD_INT 62
17418: PPUSH
17419: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17423: LD_VAR 0 5
17427: PPUSH
17428: LD_INT 205
17430: PPUSH
17431: LD_INT 75
17433: PPUSH
17434: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17438: LD_ADDR_VAR 0 1
17442: PUSH
17443: DOUBLE
17444: LD_INT 1
17446: DEC
17447: ST_TO_ADDR
17448: LD_INT 2
17450: PUSH
17451: LD_INT 3
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: LD_INT 4
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: PUSH
17466: LD_OWVAR 67
17470: ARRAY
17471: PUSH
17472: LD_EXP 62
17476: PLUS
17477: PUSH
17478: FOR_TO
17479: IFFALSE 17788
// begin InitHc ;
17481: CALL_OW 19
// InitVc ;
17485: CALL_OW 20
// uc_side := 3 ;
17489: LD_ADDR_OWVAR 20
17493: PUSH
17494: LD_INT 3
17496: ST_TO_ADDR
// uc_nation := 3 ;
17497: LD_ADDR_OWVAR 21
17501: PUSH
17502: LD_INT 3
17504: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17505: LD_INT 22
17507: PUSH
17508: LD_INT 23
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 1
17517: PPUSH
17518: LD_INT 2
17520: PPUSH
17521: CALL_OW 12
17525: ARRAY
17526: PPUSH
17527: LD_INT 1
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: LD_INT 44
17535: PUSH
17536: LD_INT 45
17538: PUSH
17539: LD_INT 43
17541: PUSH
17542: LD_INT 42
17544: PUSH
17545: LD_INT 44
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 1
17557: PPUSH
17558: LD_INT 5
17560: PPUSH
17561: CALL_OW 12
17565: ARRAY
17566: PPUSH
17567: LD_INT 99
17569: PPUSH
17570: CALL 35311 0 5
// veh := CreateVehicle ;
17574: LD_ADDR_VAR 0 3
17578: PUSH
17579: CALL_OW 45
17583: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17584: LD_VAR 0 3
17588: PPUSH
17589: LD_INT 160
17591: PPUSH
17592: LD_INT 3
17594: PPUSH
17595: LD_INT 2
17597: PPUSH
17598: LD_INT 0
17600: PPUSH
17601: CALL 70651 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17605: LD_ADDR_EXP 61
17609: PUSH
17610: LD_EXP 61
17614: PPUSH
17615: LD_EXP 61
17619: PUSH
17620: LD_INT 1
17622: PLUS
17623: PPUSH
17624: LD_VAR 0 3
17628: PPUSH
17629: CALL_OW 1
17633: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17634: LD_INT 0
17636: PPUSH
17637: LD_INT 3
17639: PPUSH
17640: LD_OWVAR 67
17644: PUSH
17645: LD_INT 2
17647: PLUS
17648: PPUSH
17649: CALL_OW 380
// un := CreateHuman ;
17653: LD_ADDR_VAR 0 2
17657: PUSH
17658: CALL_OW 44
17662: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17663: LD_VAR 0 2
17667: PPUSH
17668: LD_VAR 0 3
17672: PPUSH
17673: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17677: LD_ADDR_EXP 61
17681: PUSH
17682: LD_EXP 61
17686: PPUSH
17687: LD_EXP 61
17691: PUSH
17692: LD_INT 1
17694: PLUS
17695: PPUSH
17696: LD_VAR 0 2
17700: PPUSH
17701: CALL_OW 1
17705: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17706: LD_VAR 0 2
17710: PPUSH
17711: LD_INT 177
17713: PPUSH
17714: LD_INT 17
17716: PPUSH
17717: CALL_OW 111
// wait ( 0 0$2 ) ;
17721: LD_INT 70
17723: PPUSH
17724: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17728: LD_ADDR_VAR 0 4
17732: PUSH
17733: LD_VAR 0 4
17737: PPUSH
17738: LD_VAR 0 4
17742: PUSH
17743: LD_INT 1
17745: PLUS
17746: PPUSH
17747: LD_VAR 0 3
17751: PPUSH
17752: CALL_OW 1
17756: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17757: LD_ADDR_VAR 0 4
17761: PUSH
17762: LD_VAR 0 4
17766: PPUSH
17767: LD_VAR 0 4
17771: PUSH
17772: LD_INT 1
17774: PLUS
17775: PPUSH
17776: LD_VAR 0 2
17780: PPUSH
17781: CALL_OW 1
17785: ST_TO_ADDR
// end ;
17786: GO 17478
17788: POP
17789: POP
// for i in tmp do
17790: LD_ADDR_VAR 0 1
17794: PUSH
17795: LD_VAR 0 4
17799: PUSH
17800: FOR_IN
17801: IFFALSE 17882
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17803: LD_VAR 0 1
17807: PPUSH
17808: LD_INT 206
17810: PUSH
17811: LD_INT 37
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 239
17820: PUSH
17821: LD_INT 53
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 260
17830: PUSH
17831: LD_INT 67
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 263
17840: PUSH
17841: LD_INT 79
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 257
17850: PUSH
17851: LD_INT 105
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 227
17860: PUSH
17861: LD_INT 97
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: PPUSH
17876: CALL 71257 0 2
17880: GO 17800
17882: POP
17883: POP
// repeat wait ( 0 0$2 ) ;
17884: LD_INT 70
17886: PPUSH
17887: CALL_OW 67
// for i in tmp do
17891: LD_ADDR_VAR 0 1
17895: PUSH
17896: LD_VAR 0 4
17900: PUSH
17901: FOR_IN
17902: IFFALSE 18048
// begin empty := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] , [ f_dist , i , 8 ] ] ) ;
17904: LD_ADDR_VAR 0 6
17908: PUSH
17909: LD_INT 21
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 58
17921: PUSH
17922: EMPTY
17923: LIST
17924: PUSH
17925: LD_INT 91
17927: PUSH
17928: LD_VAR 0 1
17932: PUSH
17933: LD_INT 8
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: LIST
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: PPUSH
17946: CALL_OW 69
17950: ST_TO_ADDR
// if IsDead ( i ) then
17951: LD_VAR 0 1
17955: PPUSH
17956: CALL_OW 301
17960: IFFALSE 17980
// tmp := tmp diff i else
17962: LD_ADDR_VAR 0 4
17966: PUSH
17967: LD_VAR 0 4
17971: PUSH
17972: LD_VAR 0 1
17976: DIFF
17977: ST_TO_ADDR
17978: GO 18046
// if empty then
17980: LD_VAR 0 6
17984: IFFALSE 18012
// ComAttackUnit ( i , NearestUnitToUnit ( empty , i ) ) else
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_VAR 0 6
17995: PPUSH
17996: LD_VAR 0 1
18000: PPUSH
18001: CALL_OW 74
18005: PPUSH
18006: CALL_OW 115
18010: GO 18046
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18012: LD_VAR 0 1
18016: PPUSH
18017: LD_INT 81
18019: PUSH
18020: LD_INT 3
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PPUSH
18027: CALL_OW 69
18031: PPUSH
18032: LD_VAR 0 1
18036: PPUSH
18037: CALL_OW 74
18041: PPUSH
18042: CALL_OW 115
// end ;
18046: GO 17901
18048: POP
18049: POP
// until not tmp ;
18050: LD_VAR 0 4
18054: NOT
18055: IFFALSE 17884
// if firstAttack then
18057: LD_EXP 28
18061: IFFALSE 18071
// firstAttack := false ;
18063: LD_ADDR_EXP 28
18067: PUSH
18068: LD_INT 0
18070: ST_TO_ADDR
// end ;
18071: PPOPN 6
18073: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
18074: LD_EXP 23
18078: NOT
18079: IFFALSE 18088
18081: PUSH
18082: LD_EXP 32
18086: NOT
18087: AND
18088: IFFALSE 18096
18090: PUSH
18091: LD_EXP 3
18095: AND
18096: IFFALSE 18105
18098: PUSH
18099: LD_EXP 27
18103: NOT
18104: AND
18105: IFFALSE 19022
18107: GO 18109
18109: DISABLE
18110: LD_INT 0
18112: PPUSH
18113: PPUSH
18114: PPUSH
18115: PPUSH
// begin enable ;
18116: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
18117: LD_ADDR_VAR 0 1
18121: PUSH
18122: DOUBLE
18123: LD_INT 1
18125: DEC
18126: ST_TO_ADDR
18127: LD_INT 1
18129: PUSH
18130: LD_INT 2
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: LD_INT 3
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: PUSH
18145: LD_OWVAR 67
18149: ARRAY
18150: PUSH
18151: FOR_TO
18152: IFFALSE 18453
// begin InitHc ;
18154: CALL_OW 19
// InitVc ;
18158: CALL_OW 20
// uc_side := 3 ;
18162: LD_ADDR_OWVAR 20
18166: PUSH
18167: LD_INT 3
18169: ST_TO_ADDR
// uc_nation := 3 ;
18170: LD_ADDR_OWVAR 21
18174: PUSH
18175: LD_INT 3
18177: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18178: LD_INT 22
18180: PUSH
18181: LD_INT 23
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: PPUSH
18191: LD_INT 2
18193: PPUSH
18194: CALL_OW 12
18198: ARRAY
18199: PPUSH
18200: LD_INT 1
18202: PPUSH
18203: LD_INT 1
18205: PPUSH
18206: LD_INT 44
18208: PUSH
18209: LD_INT 43
18211: PUSH
18212: LD_INT 42
18214: PUSH
18215: LD_INT 44
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 1
18226: PPUSH
18227: LD_INT 4
18229: PPUSH
18230: CALL_OW 12
18234: ARRAY
18235: PPUSH
18236: LD_INT 99
18238: PPUSH
18239: CALL 35311 0 5
// veh := CreateVehicle ;
18243: LD_ADDR_VAR 0 3
18247: PUSH
18248: CALL_OW 45
18252: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
18253: LD_VAR 0 3
18257: PPUSH
18258: LD_INT 5
18260: PPUSH
18261: LD_INT 3
18263: PPUSH
18264: LD_INT 2
18266: PPUSH
18267: LD_INT 0
18269: PPUSH
18270: CALL 70651 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18274: LD_ADDR_EXP 61
18278: PUSH
18279: LD_EXP 61
18283: PPUSH
18284: LD_EXP 61
18288: PUSH
18289: LD_INT 1
18291: PLUS
18292: PPUSH
18293: LD_VAR 0 3
18297: PPUSH
18298: CALL_OW 1
18302: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
18303: LD_INT 0
18305: PPUSH
18306: LD_INT 3
18308: PPUSH
18309: LD_OWVAR 67
18313: PPUSH
18314: CALL_OW 380
// un := CreateHuman ;
18318: LD_ADDR_VAR 0 2
18322: PUSH
18323: CALL_OW 44
18327: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18328: LD_VAR 0 2
18332: PPUSH
18333: LD_VAR 0 3
18337: PPUSH
18338: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18342: LD_ADDR_EXP 61
18346: PUSH
18347: LD_EXP 61
18351: PPUSH
18352: LD_EXP 61
18356: PUSH
18357: LD_INT 1
18359: PLUS
18360: PPUSH
18361: LD_VAR 0 2
18365: PPUSH
18366: CALL_OW 1
18370: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
18371: LD_VAR 0 2
18375: PPUSH
18376: LD_INT 23
18378: PPUSH
18379: LD_INT 7
18381: PPUSH
18382: CALL_OW 111
// wait ( 0 0$2 ) ;
18386: LD_INT 70
18388: PPUSH
18389: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18393: LD_ADDR_VAR 0 4
18397: PUSH
18398: LD_VAR 0 4
18402: PPUSH
18403: LD_VAR 0 4
18407: PUSH
18408: LD_INT 1
18410: PLUS
18411: PPUSH
18412: LD_VAR 0 3
18416: PPUSH
18417: CALL_OW 1
18421: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18422: LD_ADDR_VAR 0 4
18426: PUSH
18427: LD_VAR 0 4
18431: PPUSH
18432: LD_VAR 0 4
18436: PUSH
18437: LD_INT 1
18439: PLUS
18440: PPUSH
18441: LD_VAR 0 2
18445: PPUSH
18446: CALL_OW 1
18450: ST_TO_ADDR
// end ;
18451: GO 18151
18453: POP
18454: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18455: LD_ADDR_VAR 0 1
18459: PUSH
18460: DOUBLE
18461: LD_INT 1
18463: DEC
18464: ST_TO_ADDR
18465: LD_INT 2
18467: PUSH
18468: LD_INT 3
18470: PUSH
18471: LD_INT 3
18473: PUSH
18474: LD_INT 4
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: PUSH
18483: LD_OWVAR 67
18487: ARRAY
18488: PUSH
18489: FOR_TO
18490: IFFALSE 18799
// begin InitHc ;
18492: CALL_OW 19
// InitVc ;
18496: CALL_OW 20
// uc_side := 3 ;
18500: LD_ADDR_OWVAR 20
18504: PUSH
18505: LD_INT 3
18507: ST_TO_ADDR
// uc_nation := 3 ;
18508: LD_ADDR_OWVAR 21
18512: PUSH
18513: LD_INT 3
18515: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18516: LD_INT 22
18518: PUSH
18519: LD_INT 23
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 1
18528: PPUSH
18529: LD_INT 2
18531: PPUSH
18532: CALL_OW 12
18536: ARRAY
18537: PPUSH
18538: LD_INT 1
18540: PPUSH
18541: LD_INT 1
18543: PPUSH
18544: LD_INT 44
18546: PUSH
18547: LD_INT 45
18549: PUSH
18550: LD_INT 43
18552: PUSH
18553: LD_INT 42
18555: PUSH
18556: LD_INT 44
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: PPUSH
18569: LD_INT 5
18571: PPUSH
18572: CALL_OW 12
18576: ARRAY
18577: PPUSH
18578: LD_INT 99
18580: PPUSH
18581: CALL 35311 0 5
// veh := CreateVehicle ;
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: CALL_OW 45
18594: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18595: LD_VAR 0 3
18599: PPUSH
18600: LD_INT 127
18602: PPUSH
18603: LD_INT 243
18605: PPUSH
18606: LD_INT 0
18608: PPUSH
18609: LD_INT 0
18611: PPUSH
18612: CALL 70651 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18616: LD_ADDR_EXP 61
18620: PUSH
18621: LD_EXP 61
18625: PPUSH
18626: LD_EXP 61
18630: PUSH
18631: LD_INT 1
18633: PLUS
18634: PPUSH
18635: LD_VAR 0 3
18639: PPUSH
18640: CALL_OW 1
18644: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18645: LD_INT 0
18647: PPUSH
18648: LD_INT 3
18650: PPUSH
18651: LD_OWVAR 67
18655: PUSH
18656: LD_INT 2
18658: PLUS
18659: PPUSH
18660: CALL_OW 380
// un := CreateHuman ;
18664: LD_ADDR_VAR 0 2
18668: PUSH
18669: CALL_OW 44
18673: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18674: LD_VAR 0 2
18678: PPUSH
18679: LD_VAR 0 3
18683: PPUSH
18684: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18688: LD_ADDR_EXP 61
18692: PUSH
18693: LD_EXP 61
18697: PPUSH
18698: LD_EXP 61
18702: PUSH
18703: LD_INT 1
18705: PLUS
18706: PPUSH
18707: LD_VAR 0 2
18711: PPUSH
18712: CALL_OW 1
18716: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18717: LD_VAR 0 2
18721: PPUSH
18722: LD_INT 130
18724: PPUSH
18725: LD_INT 233
18727: PPUSH
18728: CALL_OW 111
// wait ( 0 0$2 ) ;
18732: LD_INT 70
18734: PPUSH
18735: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18739: LD_ADDR_VAR 0 4
18743: PUSH
18744: LD_VAR 0 4
18748: PPUSH
18749: LD_VAR 0 4
18753: PUSH
18754: LD_INT 1
18756: PLUS
18757: PPUSH
18758: LD_VAR 0 3
18762: PPUSH
18763: CALL_OW 1
18767: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18768: LD_ADDR_VAR 0 4
18772: PUSH
18773: LD_VAR 0 4
18777: PPUSH
18778: LD_VAR 0 4
18782: PUSH
18783: LD_INT 1
18785: PLUS
18786: PPUSH
18787: LD_VAR 0 2
18791: PPUSH
18792: CALL_OW 1
18796: ST_TO_ADDR
// end ;
18797: GO 18489
18799: POP
18800: POP
// for i in tmp do
18801: LD_ADDR_VAR 0 1
18805: PUSH
18806: LD_VAR 0 4
18810: PUSH
18811: FOR_IN
18812: IFFALSE 18926
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18814: LD_VAR 0 1
18818: PPUSH
18819: LD_INT 130
18821: PUSH
18822: LD_INT 229
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 137
18831: PUSH
18832: LD_INT 216
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 142
18841: PUSH
18842: LD_INT 194
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 140
18851: PUSH
18852: LD_INT 169
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 146
18861: PUSH
18862: LD_INT 162
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 174
18871: PUSH
18872: LD_INT 161
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 158
18881: PUSH
18882: LD_INT 134
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 136
18891: PUSH
18892: LD_INT 107
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 115
18901: PUSH
18902: LD_INT 89
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL 71257 0 2
18924: GO 18811
18926: POP
18927: POP
// repeat wait ( 0 0$2 ) ;
18928: LD_INT 70
18930: PPUSH
18931: CALL_OW 67
// for i in tmp do
18935: LD_ADDR_VAR 0 1
18939: PUSH
18940: LD_VAR 0 4
18944: PUSH
18945: FOR_IN
18946: IFFALSE 19013
// if IsDead ( i ) then
18948: LD_VAR 0 1
18952: PPUSH
18953: CALL_OW 301
18957: IFFALSE 18977
// tmp := tmp diff i else
18959: LD_ADDR_VAR 0 4
18963: PUSH
18964: LD_VAR 0 4
18968: PUSH
18969: LD_VAR 0 1
18973: DIFF
18974: ST_TO_ADDR
18975: GO 19011
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18977: LD_VAR 0 1
18981: PPUSH
18982: LD_INT 81
18984: PUSH
18985: LD_INT 3
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PPUSH
18992: CALL_OW 69
18996: PPUSH
18997: LD_VAR 0 1
19001: PPUSH
19002: CALL_OW 74
19006: PPUSH
19007: CALL_OW 115
19011: GO 18945
19013: POP
19014: POP
// until not tmp ;
19015: LD_VAR 0 4
19019: NOT
19020: IFFALSE 18928
// end ;
19022: PPOPN 4
19024: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
19025: LD_EXP 6
19029: IFFALSE 19488
19031: GO 19033
19033: DISABLE
19034: LD_INT 0
19036: PPUSH
19037: PPUSH
19038: PPUSH
19039: PPUSH
// begin wait ( 3 3$00 ) ;
19040: LD_INT 6300
19042: PPUSH
19043: CALL_OW 67
// for i := 1 to 3 do
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: DOUBLE
19053: LD_INT 1
19055: DEC
19056: ST_TO_ADDR
19057: LD_INT 3
19059: PUSH
19060: FOR_TO
19061: IFFALSE 19360
// begin InitHc ;
19063: CALL_OW 19
// InitVc ;
19067: CALL_OW 20
// uc_side := 3 ;
19071: LD_ADDR_OWVAR 20
19075: PUSH
19076: LD_INT 3
19078: ST_TO_ADDR
// uc_nation := 3 ;
19079: LD_ADDR_OWVAR 21
19083: PUSH
19084: LD_INT 3
19086: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
19087: LD_INT 22
19089: PUSH
19090: LD_INT 23
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: PPUSH
19100: LD_INT 2
19102: PPUSH
19103: CALL_OW 12
19107: ARRAY
19108: PPUSH
19109: LD_INT 1
19111: PPUSH
19112: LD_INT 1
19114: PPUSH
19115: LD_INT 44
19117: PUSH
19118: LD_INT 43
19120: PUSH
19121: LD_INT 42
19123: PUSH
19124: LD_INT 44
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: PPUSH
19136: LD_INT 4
19138: PPUSH
19139: CALL_OW 12
19143: ARRAY
19144: PPUSH
19145: LD_INT 99
19147: PPUSH
19148: CALL 35311 0 5
// veh := CreateVehicle ;
19152: LD_ADDR_VAR 0 3
19156: PUSH
19157: CALL_OW 45
19161: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
19162: LD_VAR 0 3
19166: PPUSH
19167: LD_INT 293
19169: PPUSH
19170: LD_INT 246
19172: PPUSH
19173: LD_INT 5
19175: PPUSH
19176: LD_INT 0
19178: PPUSH
19179: CALL 70651 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
19183: LD_ADDR_EXP 61
19187: PUSH
19188: LD_EXP 61
19192: PPUSH
19193: LD_EXP 61
19197: PUSH
19198: LD_INT 1
19200: PLUS
19201: PPUSH
19202: LD_VAR 0 3
19206: PPUSH
19207: CALL_OW 1
19211: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
19212: LD_INT 0
19214: PPUSH
19215: LD_INT 3
19217: PPUSH
19218: LD_INT 3
19220: PPUSH
19221: CALL_OW 380
// un := CreateHuman ;
19225: LD_ADDR_VAR 0 2
19229: PUSH
19230: CALL_OW 44
19234: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
19235: LD_VAR 0 2
19239: PPUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
19249: LD_ADDR_EXP 61
19253: PUSH
19254: LD_EXP 61
19258: PPUSH
19259: LD_EXP 61
19263: PUSH
19264: LD_INT 1
19266: PLUS
19267: PPUSH
19268: LD_VAR 0 2
19272: PPUSH
19273: CALL_OW 1
19277: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
19278: LD_VAR 0 2
19282: PPUSH
19283: LD_INT 273
19285: PPUSH
19286: LD_INT 227
19288: PPUSH
19289: CALL_OW 111
// wait ( 0 0$2 ) ;
19293: LD_INT 70
19295: PPUSH
19296: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
19300: LD_ADDR_VAR 0 4
19304: PUSH
19305: LD_VAR 0 4
19309: PPUSH
19310: LD_VAR 0 4
19314: PUSH
19315: LD_INT 1
19317: PLUS
19318: PPUSH
19319: LD_VAR 0 3
19323: PPUSH
19324: CALL_OW 1
19328: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
19329: LD_ADDR_VAR 0 4
19333: PUSH
19334: LD_VAR 0 4
19338: PPUSH
19339: LD_VAR 0 4
19343: PUSH
19344: LD_INT 1
19346: PLUS
19347: PPUSH
19348: LD_VAR 0 2
19352: PPUSH
19353: CALL_OW 1
19357: ST_TO_ADDR
// end ;
19358: GO 19060
19360: POP
19361: POP
// for i in tmp do
19362: LD_ADDR_VAR 0 1
19366: PUSH
19367: LD_VAR 0 4
19371: PUSH
19372: FOR_IN
19373: IFFALSE 19392
// ComAgressiveMove ( i , 330 , 231 ) ;
19375: LD_VAR 0 1
19379: PPUSH
19380: LD_INT 330
19382: PPUSH
19383: LD_INT 231
19385: PPUSH
19386: CALL_OW 114
19390: GO 19372
19392: POP
19393: POP
// repeat wait ( 0 0$2 ) ;
19394: LD_INT 70
19396: PPUSH
19397: CALL_OW 67
// for i in tmp do
19401: LD_ADDR_VAR 0 1
19405: PUSH
19406: LD_VAR 0 4
19410: PUSH
19411: FOR_IN
19412: IFFALSE 19479
// if IsDead ( i ) then
19414: LD_VAR 0 1
19418: PPUSH
19419: CALL_OW 301
19423: IFFALSE 19443
// tmp := tmp diff i else
19425: LD_ADDR_VAR 0 4
19429: PUSH
19430: LD_VAR 0 4
19434: PUSH
19435: LD_VAR 0 1
19439: DIFF
19440: ST_TO_ADDR
19441: GO 19477
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19443: LD_VAR 0 1
19447: PPUSH
19448: LD_INT 81
19450: PUSH
19451: LD_INT 3
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PPUSH
19458: CALL_OW 69
19462: PPUSH
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL_OW 74
19472: PPUSH
19473: CALL_OW 115
19477: GO 19411
19479: POP
19480: POP
// until not tmp ;
19481: LD_VAR 0 4
19485: NOT
19486: IFFALSE 19394
// end ;
19488: PPOPN 4
19490: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19491: LD_INT 3
19493: PUSH
19494: LD_INT 22
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 32
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: IFFALSE 19610
19528: GO 19530
19530: DISABLE
19531: LD_INT 0
19533: PPUSH
// begin enable ;
19534: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19535: LD_ADDR_VAR 0 1
19539: PUSH
19540: LD_INT 3
19542: PUSH
19543: LD_INT 22
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 32
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PPUSH
19571: CALL_OW 69
19575: PUSH
19576: FOR_IN
19577: IFFALSE 19608
// if GetFuel ( i ) < 3 then
19579: LD_VAR 0 1
19583: PPUSH
19584: CALL_OW 261
19588: PUSH
19589: LD_INT 3
19591: LESS
19592: IFFALSE 19606
// SetFuel ( i , 3 ) ;
19594: LD_VAR 0 1
19598: PPUSH
19599: LD_INT 3
19601: PPUSH
19602: CALL_OW 240
19606: GO 19576
19608: POP
19609: POP
// end ; end_of_file
19610: PPOPN 1
19612: END
// export function Action ; begin
19613: LD_INT 0
19615: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19616: LD_INT 2
19618: PPUSH
19619: LD_INT 4
19621: PPUSH
19622: CALL_OW 332
// Video ( true ) ;
19626: LD_INT 1
19628: PPUSH
19629: CALL 68463 0 1
// music_nat := 3 ;
19633: LD_ADDR_OWVAR 71
19637: PUSH
19638: LD_INT 3
19640: ST_TO_ADDR
// music_class := music_recon ;
19641: LD_ADDR_OWVAR 72
19645: PUSH
19646: LD_INT 3
19648: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19649: LD_INT 213
19651: PPUSH
19652: LD_INT 89
19654: PPUSH
19655: CALL_OW 86
// if Kaia and Olaf then
19659: LD_EXP 39
19663: IFFALSE 19671
19665: PUSH
19666: LD_EXP 43
19670: AND
19671: IFFALSE 19677
// SceneKaiaWithOlaf ;
19673: CALL 19757 0 0
// if Givi and Kamil then
19677: LD_EXP 35
19681: IFFALSE 19689
19683: PUSH
19684: LD_EXP 38
19688: AND
19689: IFFALSE 19695
// SceneWithGiviAndKamil ;
19691: CALL 20328 0 0
// tick := 0 ;
19695: LD_ADDR_OWVAR 1
19699: PUSH
19700: LD_INT 0
19702: ST_TO_ADDR
// wait ( 3 ) ;
19703: LD_INT 3
19705: PPUSH
19706: CALL_OW 67
// Video ( false ) ;
19710: LD_INT 0
19712: PPUSH
19713: CALL 68463 0 1
// ChangeMissionObjectives ( M1 ) ;
19717: LD_STRING M1
19719: PPUSH
19720: CALL_OW 337
// music_nat := music_auto ;
19724: LD_ADDR_OWVAR 71
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
// music_class := music_auto ;
19732: LD_ADDR_OWVAR 72
19736: PUSH
19737: LD_INT 0
19739: ST_TO_ADDR
// SaveForQuickRestart ;
19740: CALL_OW 22
// gameActive := true ;
19744: LD_ADDR_EXP 31
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// end ;
19752: LD_VAR 0 1
19756: RET
// export function SceneKaiaWithOlaf ; begin
19757: LD_INT 0
19759: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19760: LD_INT 22
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 30
19772: PUSH
19773: LD_INT 3
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PPUSH
19784: CALL_OW 69
19788: PPUSH
19789: LD_INT 14
19791: PPUSH
19792: LD_INT 1
19794: PPUSH
19795: LD_INT 1
19797: PPUSH
19798: LD_INT 26
19800: PPUSH
19801: CALL_OW 125
// wait ( 0 0$1 ) ;
19805: LD_INT 35
19807: PPUSH
19808: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19812: LD_EXP 39
19816: PPUSH
19817: LD_STRING DK-Mem-1
19819: PPUSH
19820: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19824: LD_EXP 39
19828: PPUSH
19829: LD_STRING DK-Mem-2
19831: PPUSH
19832: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19836: LD_EXP 43
19840: PPUSH
19841: LD_STRING DO-Mem-3
19843: PPUSH
19844: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19848: LD_EXP 39
19852: PPUSH
19853: LD_STRING DK-Mem-4
19855: PPUSH
19856: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19860: LD_EXP 43
19864: PPUSH
19865: LD_STRING DO-Mem-5
19867: PPUSH
19868: CALL_OW 88
// wait ( 0 0$2 ) ;
19872: LD_INT 70
19874: PPUSH
19875: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19879: LD_INT 22
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 30
19891: PUSH
19892: LD_INT 3
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PPUSH
19903: CALL_OW 69
19907: PPUSH
19908: LD_INT 90
19910: PPUSH
19911: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19915: LD_EXP 43
19919: PPUSH
19920: LD_STRING DO-Mem-6
19922: PPUSH
19923: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19927: LD_EXP 39
19931: PPUSH
19932: LD_STRING DK-Mem-7
19934: PPUSH
19935: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19939: LD_EXP 34
19943: PPUSH
19944: LD_EXP 39
19948: PPUSH
19949: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19953: LD_EXP 34
19957: PPUSH
19958: LD_STRING DH-Mem-8
19960: PPUSH
19961: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19965: LD_EXP 39
19969: PUSH
19970: LD_EXP 43
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PPUSH
19979: LD_EXP 34
19983: PPUSH
19984: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19988: LD_EXP 43
19992: PPUSH
19993: LD_STRING DO-Mem-9
19995: PPUSH
19996: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
20000: LD_EXP 43
20004: PPUSH
20005: LD_STRING DO-Mem-10
20007: PPUSH
20008: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
20012: LD_EXP 43
20016: PPUSH
20017: LD_STRING DO-Mem-11
20019: PPUSH
20020: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
20024: LD_EXP 43
20028: PPUSH
20029: LD_STRING DO-Mem-12
20031: PPUSH
20032: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
20036: LD_EXP 39
20040: PPUSH
20041: LD_STRING DK-Mem-13
20043: PPUSH
20044: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
20048: LD_EXP 39
20052: PPUSH
20053: LD_STRING DK-Mem-14
20055: PPUSH
20056: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
20060: LD_EXP 39
20064: PPUSH
20065: LD_STRING DK-Mem-15
20067: PPUSH
20068: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
20072: LD_EXP 39
20076: PPUSH
20077: LD_STRING DK-Mem-16
20079: PPUSH
20080: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
20084: LD_EXP 39
20088: PPUSH
20089: LD_STRING DK-Mem-17
20091: PPUSH
20092: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
20096: LD_EXP 43
20100: PPUSH
20101: LD_EXP 39
20105: PPUSH
20106: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
20110: LD_EXP 43
20114: PPUSH
20115: LD_STRING DO-Mem-18
20117: PPUSH
20118: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
20122: LD_EXP 39
20126: PPUSH
20127: LD_EXP 43
20131: PPUSH
20132: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
20136: LD_EXP 39
20140: PPUSH
20141: LD_STRING DK-Mem-19
20143: PPUSH
20144: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
20148: LD_EXP 43
20152: PPUSH
20153: LD_INT 214
20155: PPUSH
20156: LD_INT 86
20158: PPUSH
20159: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
20163: LD_EXP 43
20167: PPUSH
20168: LD_EXP 39
20172: PPUSH
20173: CALL_OW 179
// if Givi then
20177: LD_EXP 35
20181: IFFALSE 20212
// begin ComMoveXY ( Givi , 217 , 86 ) ;
20183: LD_EXP 35
20187: PPUSH
20188: LD_INT 217
20190: PPUSH
20191: LD_INT 86
20193: PPUSH
20194: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
20198: LD_EXP 35
20202: PPUSH
20203: LD_EXP 34
20207: PPUSH
20208: CALL_OW 179
// end ; if Kamil then
20212: LD_EXP 38
20216: IFFALSE 20256
// begin ComExit ( Kamil ) ;
20218: LD_EXP 38
20222: PPUSH
20223: CALL 68889 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
20227: LD_EXP 38
20231: PPUSH
20232: LD_INT 212
20234: PPUSH
20235: LD_INT 86
20237: PPUSH
20238: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
20242: LD_EXP 38
20246: PPUSH
20247: LD_EXP 34
20251: PPUSH
20252: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
20256: LD_INT 70
20258: PPUSH
20259: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
20263: LD_EXP 34
20267: PPUSH
20268: LD_STRING DH-Mem-20
20270: PPUSH
20271: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
20275: LD_EXP 43
20279: PPUSH
20280: LD_INT 215
20282: PPUSH
20283: LD_INT 87
20285: PPUSH
20286: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
20290: LD_EXP 43
20294: PPUSH
20295: LD_EXP 39
20299: PPUSH
20300: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
20304: LD_EXP 39
20308: PPUSH
20309: LD_STRING DK-Mem-21
20311: PPUSH
20312: CALL_OW 88
// wait ( 0 0$2 ) ;
20316: LD_INT 70
20318: PPUSH
20319: CALL_OW 67
// end ;
20323: LD_VAR 0 1
20327: RET
// export function SceneWithGiviAndKamil ; var p ; begin
20328: LD_INT 0
20330: PPUSH
20331: PPUSH
// if Markov then
20332: LD_EXP 41
20336: IFFALSE 20456
// begin p := 0 ;
20338: LD_ADDR_VAR 0 2
20342: PUSH
20343: LD_INT 0
20345: ST_TO_ADDR
// if IsInUnit ( Markov ) then
20346: LD_EXP 41
20350: PPUSH
20351: CALL_OW 310
20355: IFFALSE 20366
// ComExit ( Markov ) ;
20357: LD_EXP 41
20361: PPUSH
20362: CALL 68889 0 1
// wait ( 0 0$1 ) ;
20366: LD_INT 35
20368: PPUSH
20369: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
20373: LD_EXP 41
20377: PPUSH
20378: LD_INT 212
20380: PPUSH
20381: LD_INT 88
20383: PPUSH
20384: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20388: LD_INT 35
20390: PPUSH
20391: CALL_OW 67
// p := Inc ( p ) ;
20395: LD_ADDR_VAR 0 2
20399: PUSH
20400: LD_VAR 0 2
20404: PPUSH
20405: CALL 69864 0 1
20409: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20410: LD_EXP 41
20414: PPUSH
20415: LD_EXP 34
20419: PPUSH
20420: CALL_OW 296
20424: PUSH
20425: LD_INT 6
20427: LESS
20428: IFTRUE 20440
20430: PUSH
20431: LD_VAR 0 2
20435: PUSH
20436: LD_INT 12
20438: GREATER
20439: OR
20440: IFFALSE 20388
// AddComTurnUnit ( Markov , Heike ) ;
20442: LD_EXP 41
20446: PPUSH
20447: LD_EXP 34
20451: PPUSH
20452: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20456: LD_EXP 35
20460: PPUSH
20461: LD_STRING DG-Obj-1
20463: PPUSH
20464: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20468: LD_EXP 38
20472: PPUSH
20473: LD_STRING DKam-Obj-2
20475: PPUSH
20476: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20480: LD_EXP 34
20484: PPUSH
20485: LD_EXP 38
20489: PPUSH
20490: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20494: LD_EXP 38
20498: PPUSH
20499: LD_STRING DKam-Obj-3
20501: PPUSH
20502: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20506: LD_EXP 41
20510: PPUSH
20511: LD_STRING DMar-Obj-4
20513: PPUSH
20514: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20518: LD_EXP 38
20522: PPUSH
20523: LD_STRING DKam-Obj-6
20525: PPUSH
20526: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20530: LD_EXP 38
20534: PPUSH
20535: LD_STRING DKam-Obj-7
20537: PPUSH
20538: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20542: LD_EXP 38
20546: PPUSH
20547: LD_STRING DKam-Obj-8
20549: PPUSH
20550: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20554: LD_EXP 34
20558: PPUSH
20559: LD_STRING DH-Obj-9
20561: PPUSH
20562: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20566: LD_EXP 38
20570: PPUSH
20571: LD_STRING DKam-Obj-10
20573: PPUSH
20574: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20578: LD_EXP 38
20582: PPUSH
20583: LD_STRING DKam-Obj-11
20585: PPUSH
20586: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20590: LD_EXP 41
20594: PPUSH
20595: LD_STRING DMar-Obj-12
20597: PPUSH
20598: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20602: LD_EXP 41
20606: PPUSH
20607: LD_STRING DMar-Obj-13
20609: PPUSH
20610: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20614: LD_EXP 41
20618: PPUSH
20619: LD_STRING DMar-Obj-14
20621: PPUSH
20622: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20626: LD_EXP 43
20630: PPUSH
20631: LD_STRING DO-Obj-15
20633: PPUSH
20634: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20638: LD_EXP 43
20642: PPUSH
20643: LD_STRING DO-Obj-16
20645: PPUSH
20646: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20650: LD_EXP 34
20654: PPUSH
20655: LD_STRING DH-Obj-17
20657: PPUSH
20658: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20662: LD_EXP 43
20666: PPUSH
20667: LD_STRING DO-Obj-18
20669: PPUSH
20670: CALL_OW 88
// end ;
20674: LD_VAR 0 1
20678: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20679: LD_INT 34
20681: PUSH
20682: LD_INT 92
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PPUSH
20689: CALL_OW 69
20693: IFFALSE 20888
20695: GO 20697
20697: DISABLE
20698: LD_INT 0
20700: PPUSH
// begin wait ( 0 0$2 ) ;
20701: LD_INT 70
20703: PPUSH
20704: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20708: LD_INT 34
20710: PUSH
20711: LD_INT 92
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PPUSH
20718: CALL_OW 69
20722: PPUSH
20723: CALL_OW 87
// DialogueOn ;
20727: CALL_OW 6
// if Markov then
20731: LD_EXP 41
20735: IFFALSE 20763
// begin Say ( Markov , DMar-Grn-1 ) ;
20737: LD_EXP 41
20741: PPUSH
20742: LD_STRING DMar-Grn-1
20744: PPUSH
20745: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20749: LD_EXP 34
20753: PPUSH
20754: LD_STRING DH-Grn-2
20756: PPUSH
20757: CALL_OW 88
// end else
20761: GO 20862
// if heikeSecondSquad then
20763: LD_EXP 49
20767: IFFALSE 20862
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20769: LD_ADDR_VAR 0 1
20773: PUSH
20774: LD_EXP 49
20778: PUSH
20779: LD_INT 1
20781: PPUSH
20782: LD_EXP 49
20786: PPUSH
20787: CALL_OW 12
20791: ARRAY
20792: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL_OW 258
20802: PUSH
20803: LD_INT 1
20805: DOUBLE
20806: EQUAL
20807: IFTRUE 20811
20809: GO 20826
20811: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20812: LD_VAR 0 1
20816: PPUSH
20817: LD_STRING DArm-Grn-1
20819: PPUSH
20820: CALL_OW 88
20824: GO 20850
20826: LD_INT 2
20828: DOUBLE
20829: EQUAL
20830: IFTRUE 20834
20832: GO 20849
20834: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20835: LD_VAR 0 1
20839: PPUSH
20840: LD_STRING DArf-Grn-1
20842: PPUSH
20843: CALL_OW 88
20847: GO 20850
20849: POP
// Say ( Heike , DH-Grn-2 ) ;
20850: LD_EXP 34
20854: PPUSH
20855: LD_STRING DH-Grn-2
20857: PPUSH
20858: CALL_OW 88
// end ; DialogueOff ;
20862: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20866: LD_STRING MortarConstructed
20868: PPUSH
20869: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20873: LD_STRING SelfPropelledMortar
20875: PPUSH
20876: CALL_OW 339
// mortarConstructed := true ;
20880: LD_ADDR_EXP 15
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// end ;
20888: PPOPN 1
20890: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20891: LD_INT 2
20893: PPUSH
20894: LD_INT 8
20896: PPUSH
20897: CALL_OW 294
20901: IFFALSE 21044
20903: GO 20905
20905: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20906: LD_INT 200
20908: PPUSH
20909: LD_INT 162
20911: PPUSH
20912: LD_INT 2
20914: PPUSH
20915: LD_INT 6
20917: NEG
20918: PPUSH
20919: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20923: LD_INT 200
20925: PPUSH
20926: LD_INT 162
20928: PPUSH
20929: LD_INT 2
20931: PPUSH
20932: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20936: LD_INT 200
20938: PPUSH
20939: LD_INT 162
20941: PPUSH
20942: CALL_OW 84
// if not IsOk ( Kurt ) then
20946: LD_EXP 45
20950: PPUSH
20951: CALL_OW 302
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 21044
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20960: LD_EXP 45
20964: PPUSH
20965: LD_STRING DKs-Otpst-2-1
20967: PPUSH
20968: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20972: LD_EXP 39
20976: PPUSH
20977: LD_STRING DK-Otpst-2-2
20979: PPUSH
20980: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20984: LD_EXP 45
20988: PPUSH
20989: LD_STRING DKs-Otpst-2-3
20991: PPUSH
20992: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20996: LD_EXP 45
21000: PPUSH
21001: LD_STRING DKs-Otpst-2-4
21003: PPUSH
21004: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
21008: LD_EXP 45
21012: PPUSH
21013: LD_STRING DKs-Otpst-2-5
21015: PPUSH
21016: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
21020: LD_EXP 38
21024: PPUSH
21025: LD_STRING DKam-Otpst-2-6
21027: PPUSH
21028: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
21032: LD_EXP 45
21036: PPUSH
21037: LD_STRING DKs-Otpst-2-7
21039: PPUSH
21040: CALL_OW 88
// end ;
21044: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
21045: LD_INT 8
21047: PPUSH
21048: LD_INT 22
21050: PUSH
21051: LD_INT 3
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 21
21060: PUSH
21061: LD_INT 3
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PPUSH
21072: CALL_OW 70
21076: NOT
21077: IFFALSE 21086
21079: PUSH
21080: LD_EXP 3
21084: NOT
21085: AND
21086: IFFALSE 21336
21088: GO 21090
21090: DISABLE
21091: LD_INT 0
21093: PPUSH
// begin outpostDestroyed := true ;
21094: LD_ADDR_EXP 4
21098: PUSH
21099: LD_INT 1
21101: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
21102: LD_INT 22
21104: PUSH
21105: LD_INT 2
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 34
21114: PUSH
21115: LD_INT 92
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 92
21124: PUSH
21125: LD_INT 195
21127: PUSH
21128: LD_INT 164
21130: PUSH
21131: LD_INT 12
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: LIST
21144: PPUSH
21145: CALL_OW 69
21149: NOT
21150: IFFALSE 21154
// exit ;
21152: GO 21336
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
21154: LD_EXP 35
21158: PPUSH
21159: CALL_OW 302
21163: NOT
21164: IFTRUE 21178
21166: PUSH
21167: LD_EXP 39
21171: PPUSH
21172: CALL_OW 302
21176: NOT
21177: OR
21178: IFFALSE 21182
// exit ;
21180: GO 21336
// Say ( Givi , DG-Otpst-1-1 ) ;
21182: LD_EXP 35
21186: PPUSH
21187: LD_STRING DG-Otpst-1-1
21189: PPUSH
21190: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
21194: LD_EXP 39
21198: PPUSH
21199: LD_STRING DK-Otpst-1-2
21201: PPUSH
21202: CALL_OW 88
// if IsOk ( Markov ) then
21206: LD_EXP 41
21210: PPUSH
21211: CALL_OW 302
21215: IFFALSE 21243
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
21217: LD_EXP 41
21221: PPUSH
21222: LD_STRING DMar-Otpst-1-3
21224: PPUSH
21225: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
21229: LD_EXP 41
21233: PPUSH
21234: LD_STRING DMar-Otpst-1-4
21236: PPUSH
21237: CALL_OW 88
// end else
21241: GO 21324
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
21243: LD_ADDR_VAR 0 1
21247: PUSH
21248: LD_EXP 49
21252: PUSH
21253: LD_INT 1
21255: PPUSH
21256: LD_EXP 49
21260: PPUSH
21261: CALL_OW 12
21265: ARRAY
21266: ST_TO_ADDR
// case GetSex ( random ) of 1 :
21267: LD_VAR 0 1
21271: PPUSH
21272: CALL_OW 258
21276: PUSH
21277: LD_INT 1
21279: DOUBLE
21280: EQUAL
21281: IFTRUE 21285
21283: GO 21300
21285: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
21286: LD_VAR 0 1
21290: PPUSH
21291: LD_STRING DArm-Otpst-1-a-3
21293: PPUSH
21294: CALL_OW 88
21298: GO 21324
21300: LD_INT 2
21302: DOUBLE
21303: EQUAL
21304: IFTRUE 21308
21306: GO 21323
21308: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
21309: LD_VAR 0 1
21313: PPUSH
21314: LD_STRING DArf-Otpst-1-a-3
21316: PPUSH
21317: CALL_OW 88
21321: GO 21324
21323: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
21324: LD_EXP 35
21328: PPUSH
21329: LD_STRING DG-Otpst-1-5
21331: PPUSH
21332: CALL_OW 88
// end ;
21336: PPOPN 1
21338: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
21339: LD_EXP 39
21343: PPUSH
21344: CALL_OW 256
21348: PUSH
21349: LD_INT 10
21351: LESS
21352: IFFALSE 21466
21354: GO 21356
21356: DISABLE
// begin DialogueOn ;
21357: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
21361: LD_EXP 39
21365: PPUSH
21366: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
21370: LD_EXP 39
21374: PPUSH
21375: LD_STRING DK-Dead-1
21377: PPUSH
21378: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
21382: LD_EXP 34
21386: PPUSH
21387: LD_STRING DH-Dead-2
21389: PPUSH
21390: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21394: LD_EXP 39
21398: PPUSH
21399: LD_STRING DK-Dead-3
21401: PPUSH
21402: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21406: LD_EXP 34
21410: PPUSH
21411: LD_STRING DH-Dead-4
21413: PPUSH
21414: CALL_OW 88
// if IsOk ( Mike ) then
21418: LD_EXP 36
21422: PPUSH
21423: CALL_OW 302
21427: IFFALSE 21453
// begin Say ( Mike , DM-Dead-5 ) ;
21429: LD_EXP 36
21433: PPUSH
21434: LD_STRING DM-Dead-5
21436: PPUSH
21437: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21441: LD_EXP 34
21445: PPUSH
21446: LD_STRING DH-Dead-6
21448: PPUSH
21449: CALL_OW 88
// end ; DialogueOff ;
21453: CALL_OW 7
// KillUnit ( Kaia ) ;
21457: LD_EXP 39
21461: PPUSH
21462: CALL_OW 66
// end ;
21466: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21467: LD_OWVAR 1
21471: PUSH
21472: LD_INT 31500
21474: GREATEREQUAL
21475: IFTRUE 21487
21477: PUSH
21478: LD_EXP 5
21482: PUSH
21483: LD_INT 5
21485: GREATER
21486: OR
21487: IFTRUE 21527
21489: PUSH
21490: LD_INT 22
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 92
21502: PUSH
21503: LD_INT 103
21505: PUSH
21506: LD_INT 81
21508: PUSH
21509: LD_INT 20
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PPUSH
21522: CALL_OW 69
21526: OR
21527: IFFALSE 21967
21529: GO 21531
21531: DISABLE
21532: LD_INT 0
21534: PPUSH
21535: PPUSH
21536: PPUSH
// begin PrepareRolfSquad ;
21537: CALL 3551 0 0
// dep := HexInfo ( 86 , 54 ) ;
21541: LD_ADDR_VAR 0 3
21545: PUSH
21546: LD_INT 86
21548: PPUSH
21549: LD_INT 54
21551: PPUSH
21552: CALL_OW 428
21556: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21557: LD_VAR 0 3
21561: PPUSH
21562: CALL_OW 274
21566: PPUSH
21567: LD_INT 1
21569: PPUSH
21570: LD_INT 300
21572: PPUSH
21573: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21577: LD_VAR 0 3
21581: PPUSH
21582: CALL_OW 274
21586: PPUSH
21587: LD_INT 2
21589: PPUSH
21590: LD_INT 300
21592: PPUSH
21593: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21597: LD_EXP 51
21601: PPUSH
21602: LD_INT 79
21604: PPUSH
21605: LD_INT 52
21607: PPUSH
21608: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21612: LD_INT 35
21614: PPUSH
21615: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21619: LD_EXP 51
21623: PPUSH
21624: LD_INT 3
21626: PUSH
21627: LD_INT 60
21629: PUSH
21630: EMPTY
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PPUSH
21637: CALL_OW 72
21641: PPUSH
21642: LD_INT 79
21644: PPUSH
21645: LD_INT 52
21647: PPUSH
21648: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21652: LD_INT 12
21654: PPUSH
21655: LD_INT 22
21657: PUSH
21658: LD_INT 3
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 21
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PPUSH
21679: CALL_OW 70
21683: NOT
21684: IFFALSE 21612
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21686: LD_ADDR_VAR 0 2
21690: PUSH
21691: LD_INT 12
21693: PPUSH
21694: LD_INT 21
21696: PUSH
21697: LD_INT 3
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PPUSH
21704: CALL_OW 70
21708: ST_TO_ADDR
// for i in tmp do
21709: LD_ADDR_VAR 0 1
21713: PUSH
21714: LD_VAR 0 2
21718: PUSH
21719: FOR_IN
21720: IFFALSE 21736
// SetSide ( i , 8 ) ;
21722: LD_VAR 0 1
21726: PPUSH
21727: LD_INT 8
21729: PPUSH
21730: CALL_OW 235
21734: GO 21719
21736: POP
21737: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21738: LD_INT 63
21740: PPUSH
21741: LD_INT 42
21743: PPUSH
21744: CALL_OW 428
21748: PPUSH
21749: LD_INT 320
21751: PPUSH
21752: CALL_OW 234
// wait ( 0 0$10 ) ;
21756: LD_INT 350
21758: PPUSH
21759: CALL_OW 67
// DialogueOn ;
21763: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21767: LD_INT 8
21769: PPUSH
21770: LD_INT 2
21772: PPUSH
21773: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21777: LD_INT 86
21779: PPUSH
21780: LD_INT 54
21782: PPUSH
21783: CALL_OW 428
21787: PPUSH
21788: LD_STRING antwerp
21790: PPUSH
21791: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21795: LD_EXP 47
21799: PPUSH
21800: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21804: LD_EXP 47
21808: PPUSH
21809: LD_STRING DRf-rast-1
21811: PPUSH
21812: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21816: LD_EXP 34
21820: PPUSH
21821: LD_STRING DH-rast-2
21823: PPUSH
21824: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21828: LD_EXP 47
21832: PPUSH
21833: LD_STRING DRf-rast-3
21835: PPUSH
21836: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21840: LD_EXP 47
21844: PPUSH
21845: LD_STRING DRf-rast-4
21847: PPUSH
21848: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21852: LD_EXP 47
21856: PPUSH
21857: LD_STRING DRf-rast-5
21859: PPUSH
21860: CALL_OW 94
// if IsOk ( Aviradze ) then
21864: LD_EXP 46
21868: PPUSH
21869: CALL_OW 302
21873: IFFALSE 21932
// begin CenterNowOnUnits ( Aviradze ) ;
21875: LD_EXP 46
21879: PPUSH
21880: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21884: LD_EXP 46
21888: PPUSH
21889: LD_STRING DA-rast-6
21891: PPUSH
21892: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21896: LD_EXP 34
21900: PPUSH
21901: LD_STRING DH-rast-7
21903: PPUSH
21904: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21908: LD_EXP 35
21912: PPUSH
21913: LD_STRING DG-rast-8
21915: PPUSH
21916: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21920: LD_EXP 35
21924: PPUSH
21925: LD_STRING DG-rast-9
21927: PPUSH
21928: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21932: LD_EXP 34
21936: PPUSH
21937: LD_STRING DH-rast-10
21939: PPUSH
21940: CALL_OW 88
// DialogueOff ;
21944: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21948: LD_STRING M2
21950: PPUSH
21951: CALL_OW 337
// bergkampfArrived := true ;
21955: LD_ADDR_EXP 3
21959: PUSH
21960: LD_INT 1
21962: ST_TO_ADDR
// PrepareRolfBase ;
21963: CALL 3882 0 0
// end ;
21967: PPOPN 3
21969: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21970: LD_INT 12
21972: PPUSH
21973: LD_INT 22
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PPUSH
21983: CALL_OW 70
21987: IFFALSE 22000
21989: PUSH
21990: LD_EXP 47
21994: PPUSH
21995: CALL_OW 302
21999: AND
22000: IFFALSE 22008
22002: PUSH
22003: LD_EXP 29
22007: AND
22008: IFFALSE 22572
22010: GO 22012
22012: DISABLE
22013: LD_INT 0
22015: PPUSH
// begin rolfScriptBase := false ;
22016: LD_ADDR_EXP 9
22020: PUSH
22021: LD_INT 0
22023: ST_TO_ADDR
// DialogueOn ;
22024: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
22028: LD_EXP 47
22032: PPUSH
22033: CALL_OW 87
// if rolfSquad >= 10 then
22037: LD_EXP 51
22041: PUSH
22042: LD_INT 10
22044: GREATEREQUAL
22045: IFFALSE 22224
// begin linkedWithRolf := 2 ;
22047: LD_ADDR_EXP 12
22051: PUSH
22052: LD_INT 2
22054: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
22055: LD_EXP 47
22059: PPUSH
22060: LD_STRING DRf-rast-11
22062: PPUSH
22063: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
22067: LD_EXP 34
22071: PPUSH
22072: LD_STRING DH-rast-12
22074: PPUSH
22075: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
22079: LD_EXP 47
22083: PPUSH
22084: LD_STRING DRf-rast-13
22086: PPUSH
22087: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
22091: LD_EXP 34
22095: PPUSH
22096: LD_STRING DH-rast-14
22098: PPUSH
22099: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
22103: LD_EXP 47
22107: PPUSH
22108: LD_STRING DRf-rast-15
22110: PPUSH
22111: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
22115: LD_EXP 34
22119: PPUSH
22120: LD_STRING DH-rast-16
22122: PPUSH
22123: CALL_OW 88
// if IsOk ( Mike ) then
22127: LD_EXP 36
22131: PPUSH
22132: CALL_OW 302
22136: IFFALSE 22210
// begin Say ( Mike , DM-rast-17 ) ;
22138: LD_EXP 36
22142: PPUSH
22143: LD_STRING DM-rast-17
22145: PPUSH
22146: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
22150: LD_EXP 34
22154: PPUSH
22155: LD_STRING DH-rast-18
22157: PPUSH
22158: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
22162: LD_EXP 36
22166: PPUSH
22167: LD_STRING DM-rast-19
22169: PPUSH
22170: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
22174: LD_EXP 34
22178: PPUSH
22179: LD_STRING DH-rast-20
22181: PPUSH
22182: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
22186: LD_EXP 36
22190: PPUSH
22191: LD_STRING DM-rast-21
22193: PPUSH
22194: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
22198: LD_EXP 34
22202: PPUSH
22203: LD_STRING DH-rast-22
22205: PPUSH
22206: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
22210: LD_EXP 34
22214: PPUSH
22215: LD_STRING DH-rast-23
22217: PPUSH
22218: CALL_OW 88
// end else
22222: GO 22374
// begin linkedWithRolf := 1 ;
22224: LD_ADDR_EXP 12
22228: PUSH
22229: LD_INT 1
22231: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
22232: LD_EXP 47
22236: PPUSH
22237: LD_STRING DRf-rast-a-11
22239: PPUSH
22240: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
22244: LD_EXP 34
22248: PPUSH
22249: LD_STRING DH-rast-a-12
22251: PPUSH
22252: CALL_OW 88
// if IsOk ( Kurt ) then
22256: LD_EXP 45
22260: PPUSH
22261: CALL_OW 302
22265: IFFALSE 22362
// begin Say ( Kurt , DKs-rast-a-13 ) ;
22267: LD_EXP 45
22271: PPUSH
22272: LD_STRING DKs-rast-a-13
22274: PPUSH
22275: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
22279: LD_EXP 47
22283: PPUSH
22284: LD_STRING DRf-rast-a-14
22286: PPUSH
22287: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
22291: LD_EXP 47
22295: PPUSH
22296: LD_STRING DRf-rast-a-15
22298: PPUSH
22299: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
22303: LD_EXP 45
22307: PPUSH
22308: LD_STRING DKs-rast-a-16
22310: PPUSH
22311: CALL_OW 88
// if IsOk ( Givi ) then
22315: LD_EXP 35
22319: PPUSH
22320: CALL_OW 302
22324: IFFALSE 22362
// begin Say ( Givi , DG-rast-a-17 ) ;
22326: LD_EXP 35
22330: PPUSH
22331: LD_STRING DG-rast-a-17
22333: PPUSH
22334: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
22338: LD_EXP 35
22342: PPUSH
22343: LD_STRING DG-rast-a-18
22345: PPUSH
22346: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
22350: LD_EXP 45
22354: PPUSH
22355: LD_STRING DKs-rast-a-19
22357: PPUSH
22358: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
22362: LD_EXP 34
22366: PPUSH
22367: LD_STRING DH-rast-a-20
22369: PPUSH
22370: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
22374: LD_EXP 47
22378: PPUSH
22379: LD_STRING DRf-rast-24
22381: PPUSH
22382: CALL_OW 88
// if IsOk ( Aviradze ) then
22386: LD_EXP 46
22390: PPUSH
22391: CALL_OW 302
22395: IFFALSE 22495
// begin Say ( Aviradze , DA-rast-25 ) ;
22397: LD_EXP 46
22401: PPUSH
22402: LD_STRING DA-rast-25
22404: PPUSH
22405: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22409: LD_EXP 34
22413: PPUSH
22414: LD_STRING DH-rast-26
22416: PPUSH
22417: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22421: LD_EXP 46
22425: PPUSH
22426: LD_STRING DA-rast-27
22428: PPUSH
22429: CALL_OW 88
// if IsOk ( Markov ) then
22433: LD_EXP 41
22437: PPUSH
22438: CALL_OW 302
22442: IFFALSE 22470
// begin Say ( Markov , DMar-rast-28 ) ;
22444: LD_EXP 41
22448: PPUSH
22449: LD_STRING DMar-rast-28
22451: PPUSH
22452: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22456: LD_EXP 41
22460: PPUSH
22461: LD_STRING DMar-rast-29
22463: PPUSH
22464: CALL_OW 88
// end else
22468: GO 22493
// if IsOk ( Sophia ) then
22470: LD_EXP 40
22474: PPUSH
22475: CALL_OW 302
22479: IFFALSE 22493
// begin Say ( Sophia , DS-rast-28 ) ;
22481: LD_EXP 40
22485: PPUSH
22486: LD_STRING DS-rast-28
22488: PPUSH
22489: CALL_OW 88
// end ; end else
22493: GO 22518
// if IsOk ( Sophia ) then
22495: LD_EXP 40
22499: PPUSH
22500: CALL_OW 302
22504: IFFALSE 22518
// Say ( Sophia , DS-rast-29 ) ;
22506: LD_EXP 40
22510: PPUSH
22511: LD_STRING DS-rast-29
22513: PPUSH
22514: CALL_OW 88
// DialogueOff ;
22518: CALL_OW 7
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22522: LD_ADDR_VAR 0 1
22526: PUSH
22527: LD_INT 22
22529: PUSH
22530: LD_INT 8
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PPUSH
22537: CALL_OW 69
22541: PUSH
22542: FOR_IN
22543: IFFALSE 22559
// SetSide ( i , 2 ) ;
22545: LD_VAR 0 1
22549: PPUSH
22550: LD_INT 2
22552: PPUSH
22553: CALL_OW 235
22557: GO 22542
22559: POP
22560: POP
// MarkRolfSquad ;
22561: CALL 11147 0 0
// ChangeMissionObjectives ( M3 ) ;
22565: LD_STRING M3
22567: PPUSH
22568: CALL_OW 337
// end ;
22572: PPOPN 1
22574: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22575: LD_EXP 23
22579: IFFALSE 22588
22581: PUSH
22582: LD_EXP 12
22586: NOT
22587: AND
22588: IFFALSE 22596
22590: PUSH
22591: LD_EXP 29
22595: AND
22596: IFFALSE 22687
22598: GO 22600
22600: DISABLE
22601: LD_INT 0
22603: PPUSH
// begin canRolfJoin := false ;
22604: LD_ADDR_EXP 29
22608: PUSH
22609: LD_INT 0
22611: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22612: LD_STRING M3
22614: PPUSH
22615: CALL_OW 337
// for i in rolfSquad do
22619: LD_ADDR_VAR 0 1
22623: PUSH
22624: LD_EXP 51
22628: PUSH
22629: FOR_IN
22630: IFFALSE 22685
// begin ComExit ( i ) ;
22632: LD_VAR 0 1
22636: PPUSH
22637: CALL 68889 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22641: LD_VAR 0 1
22645: PPUSH
22646: LD_INT 147
22648: PPUSH
22649: LD_INT 162
22651: PPUSH
22652: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22656: LD_VAR 0 1
22660: PPUSH
22661: LD_INT 1050
22663: PPUSH
22664: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22668: LD_VAR 0 1
22672: PPUSH
22673: LD_INT 103
22675: PPUSH
22676: LD_INT 162
22678: PPUSH
22679: CALL_OW 174
// end ;
22683: GO 22629
22685: POP
22686: POP
// end ;
22687: PPOPN 1
22689: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22690: LD_EXP 3
22694: IFFALSE 22711
22696: PUSH
22697: LD_EXP 47
22701: PPUSH
22702: CALL_OW 256
22706: PUSH
22707: LD_INT 400
22709: LESS
22710: AND
22711: IFFALSE 22720
22713: PUSH
22714: LD_EXP 12
22718: NOT
22719: AND
22720: IFFALSE 22728
22722: PUSH
22723: LD_EXP 29
22727: AND
22728: IFFALSE 23002
22730: GO 22732
22732: DISABLE
22733: LD_INT 0
22735: PPUSH
// begin DialogueOn ;
22736: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22740: LD_EXP 47
22744: PPUSH
22745: LD_STRING DRf-rast-f-11
22747: PPUSH
22748: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22752: LD_EXP 47
22756: PPUSH
22757: LD_STRING DRf-rast-f-12
22759: PPUSH
22760: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22764: LD_EXP 47
22768: PPUSH
22769: LD_STRING DRf-rast-f-13
22771: PPUSH
22772: CALL_OW 94
// DialogueOff ;
22776: CALL_OW 7
// KillUnit ( Rolf ) ;
22780: LD_EXP 47
22784: PPUSH
22785: CALL_OW 66
// wait ( 0 0$1 ) ;
22789: LD_INT 35
22791: PPUSH
22792: CALL_OW 67
// if not IsOk ( Givi ) then
22796: LD_EXP 35
22800: PPUSH
22801: CALL_OW 302
22805: NOT
22806: IFFALSE 22810
// exit ;
22808: GO 23002
// DialogueOn ;
22810: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22814: LD_EXP 35
22818: PPUSH
22819: LD_STRING DG-rast-f-14
22821: PPUSH
22822: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22826: LD_EXP 35
22830: PPUSH
22831: LD_STRING DG-rast-f-15
22833: PPUSH
22834: CALL_OW 88
// if IsOk ( Kaia ) then
22838: LD_EXP 39
22842: PPUSH
22843: CALL_OW 302
22847: IFFALSE 22863
// Say ( Kaia , DK-rast-f-16 ) else
22849: LD_EXP 39
22853: PPUSH
22854: LD_STRING DK-rast-f-16
22856: PPUSH
22857: CALL_OW 88
22861: GO 22950
// if heikeSecondSquad then
22863: LD_EXP 49
22867: IFFALSE 22950
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22869: LD_ADDR_VAR 0 1
22873: PUSH
22874: LD_EXP 49
22878: PUSH
22879: LD_INT 1
22881: PPUSH
22882: LD_EXP 49
22886: PPUSH
22887: CALL_OW 12
22891: ARRAY
22892: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22893: LD_VAR 0 1
22897: PPUSH
22898: CALL_OW 258
22902: PUSH
22903: LD_INT 1
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22911
22909: GO 22926
22911: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22912: LD_VAR 0 1
22916: PPUSH
22917: LD_STRING DArm-rast-f-a-16
22919: PPUSH
22920: CALL_OW 88
22924: GO 22950
22926: LD_INT 2
22928: DOUBLE
22929: EQUAL
22930: IFTRUE 22934
22932: GO 22949
22934: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22935: LD_VAR 0 1
22939: PPUSH
22940: LD_STRING DArf-rast-f-a-16
22942: PPUSH
22943: CALL_OW 88
22947: GO 22950
22949: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22950: LD_EXP 35
22954: PPUSH
22955: LD_STRING DG-rast-f-17
22957: PPUSH
22958: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22962: LD_EXP 35
22966: PPUSH
22967: LD_STRING DG-rast-f-18
22969: PPUSH
22970: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22974: LD_EXP 35
22978: PPUSH
22979: LD_STRING DG-rast-f-19
22981: PPUSH
22982: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22986: LD_EXP 35
22990: PPUSH
22991: LD_STRING DG-rast-f-20
22993: PPUSH
22994: CALL_OW 88
// DialogueOff ;
22998: CALL_OW 7
// end ;
23002: PPOPN 1
23004: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
23005: LD_EXP 31
23009: IFFALSE 23023
23011: PUSH
23012: LD_INT 2
23014: PPUSH
23015: LD_INT 10
23017: PPUSH
23018: CALL_OW 294
23022: AND
23023: IFFALSE 23096
23025: GO 23027
23027: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
23028: LD_EXP 35
23032: PPUSH
23033: LD_STRING DG-Len-1
23035: PPUSH
23036: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
23040: LD_EXP 45
23044: PPUSH
23045: LD_STRING DKs-Len-2
23047: PPUSH
23048: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
23052: LD_EXP 45
23056: PPUSH
23057: LD_STRING DKs-Len-3
23059: PPUSH
23060: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
23064: LD_EXP 34
23068: PPUSH
23069: LD_STRING DH-Len-4
23071: PPUSH
23072: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
23076: LD_EXP 39
23080: PPUSH
23081: LD_STRING DK-Len-5
23083: PPUSH
23084: CALL_OW 88
// leninSpotted := true ;
23088: LD_ADDR_EXP 14
23092: PUSH
23093: LD_INT 1
23095: ST_TO_ADDR
// end ;
23096: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
23097: LD_EXP 1
23101: IFTRUE 23142
23103: PUSH
23104: LD_EXP 3
23108: IFFALSE 23141
23110: PUSH
23111: LD_OWVAR 1
23115: PUSH
23116: LD_INT 67200
23118: PUSH
23119: LD_INT 63000
23121: PUSH
23122: LD_INT 58800
23124: PUSH
23125: LD_INT 54600
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: PUSH
23134: LD_OWVAR 67
23138: ARRAY
23139: GREATER
23140: AND
23141: OR
23142: IFFALSE 23934
23144: GO 23146
23146: DISABLE
23147: LD_INT 0
23149: PPUSH
23150: PPUSH
23151: PPUSH
23152: PPUSH
// begin if not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) then
23153: LD_INT 14
23155: PPUSH
23156: LD_INT 22
23158: PUSH
23159: LD_INT 3
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: LD_INT 21
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 59
23181: PUSH
23182: EMPTY
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PPUSH
23194: CALL_OW 70
23198: NOT
23199: IFFALSE 23208
// SetAchievement ( ACH_OMARPLACE ) ;
23201: LD_STRING ACH_OMARPLACE
23203: PPUSH
23204: CALL_OW 543
// PrepareOmarSquad ;
23208: CALL 5178 0 0
// repeat wait ( 0 0$1 ) ;
23212: LD_INT 35
23214: PPUSH
23215: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
23219: LD_INT 14
23221: PPUSH
23222: LD_INT 22
23224: PUSH
23225: LD_INT 3
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 2
23234: PUSH
23235: LD_INT 21
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 59
23247: PUSH
23248: EMPTY
23249: LIST
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PPUSH
23260: CALL_OW 70
23264: NOT
23265: IFFALSE 23212
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
23267: LD_ADDR_VAR 0 2
23271: PUSH
23272: LD_INT 14
23274: PPUSH
23275: LD_INT 22
23277: PUSH
23278: LD_INT 2
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PPUSH
23285: CALL_OW 70
23289: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
23290: LD_ADDR_VAR 0 3
23294: PUSH
23295: LD_VAR 0 2
23299: PUSH
23300: LD_INT 0
23302: GREATER
23303: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
23304: LD_ADDR_VAR 0 4
23308: PUSH
23309: LD_EXP 34
23313: PPUSH
23314: LD_INT 14
23316: PPUSH
23317: CALL_OW 308
23321: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
23322: LD_VAR 0 2
23326: PPUSH
23327: LD_INT 21
23329: PUSH
23330: LD_INT 3
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PPUSH
23337: CALL_OW 72
23341: IFFALSE 23446
// begin if heikeNearbyOmar then
23343: LD_VAR 0 4
23347: IFFALSE 23363
// Say ( Omar , DOm-Base-1b ) else
23349: LD_EXP 44
23353: PPUSH
23354: LD_STRING DOm-Base-1b
23356: PPUSH
23357: CALL_OW 88
23361: GO 23375
// SayRadio ( Omar , DOm-Base-1br ) ;
23363: LD_EXP 44
23367: PPUSH
23368: LD_STRING DOm-Base-1br
23370: PPUSH
23371: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
23375: LD_ADDR_VAR 0 1
23379: PUSH
23380: LD_VAR 0 2
23384: PPUSH
23385: LD_INT 21
23387: PUSH
23388: LD_INT 3
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PPUSH
23395: CALL_OW 72
23399: PUSH
23400: FOR_IN
23401: IFFALSE 23442
// begin if UnitsInside ( i ) then
23403: LD_VAR 0 1
23407: PPUSH
23408: CALL_OW 313
23412: IFFALSE 23428
// ComExitBuilding ( UnitsInside ( i ) ) ;
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 313
23423: PPUSH
23424: CALL_OW 122
// SetSide ( i , 5 ) ;
23428: LD_VAR 0 1
23432: PPUSH
23433: LD_INT 5
23435: PPUSH
23436: CALL_OW 235
// end ;
23440: GO 23400
23442: POP
23443: POP
// end else
23444: GO 23539
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
23446: LD_VAR 0 2
23450: PPUSH
23451: LD_INT 21
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PPUSH
23461: CALL_OW 72
23465: IFFALSE 23501
// begin if heikeNearbyOmar then
23467: LD_VAR 0 4
23471: IFFALSE 23487
// Say ( Omar , DOm-Base-1v ) else
23473: LD_EXP 44
23477: PPUSH
23478: LD_STRING DOm-Base-1v
23480: PPUSH
23481: CALL_OW 88
23485: GO 23499
// SayRadio ( Omar , DOm-Base-1vr ) end else
23487: LD_EXP 44
23491: PPUSH
23492: LD_STRING DOm-Base-1vr
23494: PPUSH
23495: CALL_OW 94
23499: GO 23539
// if inOmarBase then
23501: LD_VAR 0 3
23505: IFFALSE 23539
// begin if heikeNearbyOmar then
23507: LD_VAR 0 4
23511: IFFALSE 23527
// Say ( Omar , DOm-Base-1h ) else
23513: LD_EXP 44
23517: PPUSH
23518: LD_STRING DOm-Base-1h
23520: PPUSH
23521: CALL_OW 88
23525: GO 23539
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23527: LD_EXP 44
23531: PPUSH
23532: LD_STRING DOm-Base-1hr
23534: PPUSH
23535: CALL_OW 94
// for i in omarSquad do
23539: LD_ADDR_VAR 0 1
23543: PUSH
23544: LD_EXP 52
23548: PUSH
23549: FOR_IN
23550: IFFALSE 23581
// if GetLives ( i ) < 750 then
23552: LD_VAR 0 1
23556: PPUSH
23557: CALL_OW 256
23561: PUSH
23562: LD_INT 750
23564: LESS
23565: IFFALSE 23579
// SetLives ( i , 1000 ) ;
23567: LD_VAR 0 1
23571: PPUSH
23572: LD_INT 1000
23574: PPUSH
23575: CALL_OW 234
23579: GO 23549
23581: POP
23582: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23583: LD_ADDR_VAR 0 1
23587: PUSH
23588: LD_INT 14
23590: PPUSH
23591: LD_INT 21
23593: PUSH
23594: LD_INT 3
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PPUSH
23601: CALL_OW 70
23605: PUSH
23606: FOR_IN
23607: IFFALSE 23623
// SetSide ( i , 5 ) ;
23609: LD_VAR 0 1
23613: PPUSH
23614: LD_INT 5
23616: PPUSH
23617: CALL_OW 235
23621: GO 23606
23623: POP
23624: POP
// wait ( 0 0$3 ) ;
23625: LD_INT 105
23627: PPUSH
23628: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23632: LD_INT 5
23634: PPUSH
23635: LD_INT 2
23637: PPUSH
23638: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23642: LD_EXP 44
23646: PPUSH
23647: CALL_OW 87
// DialogueOn ;
23651: CALL_OW 6
// if heikeNearbyOmar then
23655: LD_VAR 0 4
23659: IFFALSE 23717
// begin Say ( Omar , DOm-Veh-1a ) ;
23661: LD_EXP 44
23665: PPUSH
23666: LD_STRING DOm-Veh-1a
23668: PPUSH
23669: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23673: LD_EXP 44
23677: PPUSH
23678: LD_STRING DOm-Veh-2a
23680: PPUSH
23681: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23685: LD_EXP 44
23689: PPUSH
23690: LD_STRING DOm-Veh-3a
23692: PPUSH
23693: CALL_OW 88
// if mortarConstructed then
23697: LD_EXP 15
23701: IFFALSE 23715
// Say ( Omar , DOm-Veh-4a ) ;
23703: LD_EXP 44
23707: PPUSH
23708: LD_STRING DOm-Veh-4a
23710: PPUSH
23711: CALL_OW 88
// end else
23715: GO 23771
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23717: LD_EXP 44
23721: PPUSH
23722: LD_STRING DOm-Veh-1
23724: PPUSH
23725: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23729: LD_EXP 44
23733: PPUSH
23734: LD_STRING DOm-Veh-2
23736: PPUSH
23737: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23741: LD_EXP 44
23745: PPUSH
23746: LD_STRING DOm-Veh-3
23748: PPUSH
23749: CALL_OW 94
// if mortarConstructed then
23753: LD_EXP 15
23757: IFFALSE 23771
// SayRadio ( Omar , DOm-Veh-4 ) ;
23759: LD_EXP 44
23763: PPUSH
23764: LD_STRING DOm-Veh-4
23766: PPUSH
23767: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23771: LD_EXP 34
23775: PPUSH
23776: LD_STRING DH-Veh-5
23778: PPUSH
23779: CALL_OW 88
// if IsOk ( Kurt ) then
23783: LD_EXP 45
23787: PPUSH
23788: CALL_OW 302
23792: IFFALSE 23842
// begin Say ( Kurt , DKs-Veh-6 ) ;
23794: LD_EXP 45
23798: PPUSH
23799: LD_STRING DKs-Veh-6
23801: PPUSH
23802: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23806: LD_EXP 45
23810: PPUSH
23811: LD_STRING DKs-Veh-7
23813: PPUSH
23814: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23818: LD_EXP 35
23822: PPUSH
23823: LD_STRING DG-Veh-8
23825: PPUSH
23826: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23830: LD_EXP 36
23834: PPUSH
23835: LD_STRING DM-Veh-9
23837: PPUSH
23838: CALL_OW 88
// end ; DialogueOff ;
23842: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23846: LD_STRING M4
23848: PPUSH
23849: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23853: LD_EXP 44
23857: PPUSH
23858: LD_INT 341
23860: PPUSH
23861: LD_INT 232
23863: PPUSH
23864: CALL_OW 428
23868: PPUSH
23869: CALL_OW 120
// omarArrived := true ;
23873: LD_ADDR_EXP 6
23877: PUSH
23878: LD_INT 1
23880: ST_TO_ADDR
// omarScriptBase := true ;
23881: LD_ADDR_EXP 10
23885: PUSH
23886: LD_INT 1
23888: ST_TO_ADDR
// omarWantVehicles := true ;
23889: LD_ADDR_EXP 18
23893: PUSH
23894: LD_INT 1
23896: ST_TO_ADDR
// if debug then
23897: LD_EXP 1
23901: IFFALSE 23934
// begin wait ( 0 0$25 ) ;
23903: LD_INT 875
23905: PPUSH
23906: CALL_OW 67
// omarScriptBase := false ;
23910: LD_ADDR_EXP 10
23914: PUSH
23915: LD_INT 0
23917: ST_TO_ADDR
// omarWantVehicles := false ;
23918: LD_ADDR_EXP 18
23922: PUSH
23923: LD_INT 0
23925: ST_TO_ADDR
// omarAttack := true ;
23926: LD_ADDR_EXP 23
23930: PUSH
23931: LD_INT 1
23933: ST_TO_ADDR
// end ; end ;
23934: PPOPN 4
23936: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23937: LD_INT 10
23939: PPUSH
23940: LD_INT 22
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PPUSH
23950: CALL_OW 70
23954: IFFALSE 23962
23956: PUSH
23957: LD_EXP 6
23961: AND
23962: IFFALSE 23975
23964: PUSH
23965: LD_EXP 44
23969: PPUSH
23970: CALL_OW 302
23974: AND
23975: IFFALSE 23984
23977: PUSH
23978: LD_EXP 23
23982: NOT
23983: AND
23984: IFFALSE 24001
23986: GO 23988
23988: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23989: LD_EXP 44
23993: PPUSH
23994: LD_STRING DOm-Lenin
23996: PPUSH
23997: CALL_OW 94
24001: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
24002: LD_EXP 47
24006: PPUSH
24007: CALL_OW 302
24011: IFFALSE 24019
24013: PUSH
24014: LD_EXP 12
24018: AND
24019: IFFALSE 24027
24021: PUSH
24022: LD_EXP 6
24026: AND
24027: IFFALSE 24131
24029: GO 24031
24031: DISABLE
// begin wait ( 1 1$00 ) ;
24032: LD_INT 2100
24034: PPUSH
24035: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
24039: LD_EXP 47
24043: PPUSH
24044: CALL_OW 87
// DialogueOn ;
24048: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
24052: LD_EXP 47
24056: PPUSH
24057: LD_STRING DRf-Veh-10
24059: PPUSH
24060: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
24064: LD_EXP 47
24068: PPUSH
24069: LD_STRING DRf-Veh-11
24071: PPUSH
24072: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
24076: LD_EXP 34
24080: PPUSH
24081: LD_STRING DH-Veh-12
24083: PPUSH
24084: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
24088: LD_EXP 34
24092: PPUSH
24093: LD_STRING DH-Veh-13
24095: PPUSH
24096: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
24100: LD_EXP 47
24104: PPUSH
24105: LD_STRING DRf-Veh-14
24107: PPUSH
24108: CALL_OW 88
// DialogueOff ;
24112: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
24116: LD_STRING M5
24118: PPUSH
24119: CALL_OW 337
// rolfWantVehicles := true ;
24123: LD_ADDR_EXP 17
24127: PUSH
24128: LD_INT 1
24130: ST_TO_ADDR
// end ;
24131: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
24132: LD_EXP 18
24136: IFFALSE 24899
24138: GO 24140
24140: DISABLE
24141: LD_INT 0
24143: PPUSH
24144: PPUSH
24145: PPUSH
24146: PPUSH
24147: PPUSH
24148: PPUSH
// begin wait ( 0 0$3 ) ;
24149: LD_INT 105
24151: PPUSH
24152: CALL_OW 67
// Hint ( OmarVehicles ) ;
24156: LD_STRING OmarVehicles
24158: PPUSH
24159: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
24163: LD_INT 16
24165: PPUSH
24166: LD_INT 1
24168: PPUSH
24169: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
24173: LD_INT 35
24175: PPUSH
24176: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
24180: LD_ADDR_EXP 20
24184: PUSH
24185: LD_EXP 20
24189: PUSH
24190: LD_INT 35
24192: MINUS
24193: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
24194: LD_EXP 20
24198: PUSH
24199: LD_INT 0
24201: LESSEQUAL
24202: IFFALSE 24302
// begin display_strings := [ ] ;
24204: LD_ADDR_OWVAR 47
24208: PUSH
24209: EMPTY
24210: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
24211: LD_STRING M4a
24213: PPUSH
24214: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
24218: LD_INT 16
24220: PPUSH
24221: LD_INT 0
24223: PPUSH
24224: CALL_OW 424
// DialogueOn ;
24228: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
24232: LD_EXP 44
24236: PPUSH
24237: LD_STRING DOm-Veh-b-15
24239: PPUSH
24240: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
24244: LD_EXP 34
24248: PPUSH
24249: LD_STRING DH-Veh-b-16
24251: PPUSH
24252: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
24256: LD_EXP 44
24260: PPUSH
24261: LD_STRING DOm-Veh-b-17
24263: PPUSH
24264: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
24268: LD_EXP 39
24272: PPUSH
24273: LD_STRING DK-Veh-b-18
24275: PPUSH
24276: CALL_OW 88
// DialogueOff ;
24280: CALL_OW 7
// omarAttack := true ;
24284: LD_ADDR_EXP 23
24288: PUSH
24289: LD_INT 1
24291: ST_TO_ADDR
// omarScriptBase := false ;
24292: LD_ADDR_EXP 10
24296: PUSH
24297: LD_INT 0
24299: ST_TO_ADDR
// exit ;
24300: GO 24899
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24302: LD_EXP 21
24306: PUSH
24307: LD_INT 16
24309: PPUSH
24310: LD_INT 22
24312: PUSH
24313: LD_INT 2
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 21
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 3
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: LD_INT 34
24338: PUSH
24339: LD_INT 32
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 34
24348: PUSH
24349: LD_INT 88
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 34
24358: PUSH
24359: LD_INT 31
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 33
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 58
24388: PUSH
24389: EMPTY
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 70
24403: LESSEQUAL
24404: IFFALSE 24173
// omarWaitingForVehiclesTimer := 0 0$00 ;
24406: LD_ADDR_EXP 20
24410: PUSH
24411: LD_INT 0
24413: ST_TO_ADDR
// display_strings := [ ] ;
24414: LD_ADDR_OWVAR 47
24418: PUSH
24419: EMPTY
24420: ST_TO_ADDR
// DialogueOn ;
24421: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
24425: LD_EXP 44
24429: PPUSH
24430: LD_STRING DOm-Veh-a-15
24432: PPUSH
24433: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
24437: LD_EXP 39
24441: PPUSH
24442: LD_STRING DK-Veh-a-16
24444: PPUSH
24445: CALL_OW 88
// DialogueOff ;
24449: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
24453: LD_STRING M4a
24455: PPUSH
24456: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
24460: LD_INT 16
24462: PPUSH
24463: LD_INT 0
24465: PPUSH
24466: CALL_OW 424
// omarHasVehicles := true ;
24470: LD_ADDR_EXP 22
24474: PUSH
24475: LD_INT 1
24477: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24478: LD_INT 35
24480: PPUSH
24481: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
24485: LD_EXP 19
24489: PUSH
24490: LD_INT 0
24492: EQUAL
24493: IFFALSE 24478
// wait ( 1 1$00 ) ;
24495: LD_INT 2100
24497: PPUSH
24498: CALL_OW 67
// omarAttack := true ;
24502: LD_ADDR_EXP 23
24506: PUSH
24507: LD_INT 1
24509: ST_TO_ADDR
// omarScriptBase := false ;
24510: LD_ADDR_EXP 10
24514: PUSH
24515: LD_INT 0
24517: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24518: LD_ADDR_VAR 0 2
24522: PUSH
24523: LD_INT 16
24525: PPUSH
24526: LD_INT 22
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 21
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 33
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 58
24558: PUSH
24559: EMPTY
24560: LIST
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: PPUSH
24568: CALL_OW 70
24572: ST_TO_ADDR
// for i in tmp do
24573: LD_ADDR_VAR 0 1
24577: PUSH
24578: LD_VAR 0 2
24582: PUSH
24583: FOR_IN
24584: IFFALSE 24612
// begin SetFuel ( i , 100 ) ;
24586: LD_VAR 0 1
24590: PPUSH
24591: LD_INT 100
24593: PPUSH
24594: CALL_OW 240
// SetSide ( i , 5 ) ;
24598: LD_VAR 0 1
24602: PPUSH
24603: LD_INT 5
24605: PPUSH
24606: CALL_OW 235
// end ;
24610: GO 24583
24612: POP
24613: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24614: LD_ADDR_VAR 0 3
24618: PUSH
24619: LD_EXP 52
24623: PPUSH
24624: LD_INT 25
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PPUSH
24634: CALL_OW 72
24638: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24639: LD_ADDR_VAR 0 4
24643: PUSH
24644: LD_EXP 52
24648: PPUSH
24649: LD_INT 3
24651: PUSH
24652: LD_INT 55
24654: PUSH
24655: EMPTY
24656: LIST
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 25
24664: PUSH
24665: LD_INT 3
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PPUSH
24676: CALL_OW 72
24680: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24681: LD_ADDR_VAR 0 5
24685: PUSH
24686: LD_INT 324
24688: PPUSH
24689: LD_INT 234
24691: PPUSH
24692: CALL_OW 428
24696: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24697: LD_ADDR_VAR 0 6
24701: PUSH
24702: LD_INT 334
24704: PPUSH
24705: LD_INT 241
24707: PPUSH
24708: CALL_OW 428
24712: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24713: LD_VAR 0 6
24717: PPUSH
24718: CALL_OW 313
24722: PPUSH
24723: CALL_OW 122
// if eng then
24727: LD_VAR 0 3
24731: IFFALSE 24839
// begin if eng + mech <= tmp then
24733: LD_VAR 0 3
24737: PUSH
24738: LD_VAR 0 4
24742: PLUS
24743: PUSH
24744: LD_VAR 0 2
24748: LESSEQUAL
24749: IFFALSE 24804
// begin ComEnterUnit ( eng , workshop ) ;
24751: LD_VAR 0 3
24755: PPUSH
24756: LD_VAR 0 5
24760: PPUSH
24761: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24765: LD_VAR 0 3
24769: PPUSH
24770: LD_INT 3
24772: PPUSH
24773: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24777: LD_VAR 0 3
24781: PPUSH
24782: CALL_OW 182
// mech := mech union eng ;
24786: LD_ADDR_VAR 0 4
24790: PUSH
24791: LD_VAR 0 4
24795: PUSH
24796: LD_VAR 0 3
24800: UNION
24801: ST_TO_ADDR
// end else
24802: GO 24839
// begin ComEnterUnit ( eng , armoury ) ;
24804: LD_VAR 0 3
24808: PPUSH
24809: LD_VAR 0 6
24813: PPUSH
24814: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24818: LD_VAR 0 3
24822: PPUSH
24823: LD_INT 1
24825: PPUSH
24826: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24830: LD_VAR 0 3
24834: PPUSH
24835: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24839: LD_ADDR_VAR 0 1
24843: PUSH
24844: DOUBLE
24845: LD_INT 1
24847: DEC
24848: ST_TO_ADDR
24849: LD_VAR 0 2
24853: PUSH
24854: FOR_TO
24855: IFFALSE 24897
// if i <= mech then
24857: LD_VAR 0 1
24861: PUSH
24862: LD_VAR 0 4
24866: LESSEQUAL
24867: IFFALSE 24895
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24869: LD_VAR 0 4
24873: PUSH
24874: LD_VAR 0 1
24878: ARRAY
24879: PPUSH
24880: LD_VAR 0 2
24884: PUSH
24885: LD_VAR 0 1
24889: ARRAY
24890: PPUSH
24891: CALL_OW 180
24895: GO 24854
24897: POP
24898: POP
// end ;
24899: PPOPN 6
24901: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24902: LD_EXP 47
24906: PPUSH
24907: CALL_OW 302
24911: IFFALSE 24919
24913: PUSH
24914: LD_EXP 17
24918: AND
24919: IFFALSE 25543
24921: GO 24923
24923: DISABLE
24924: LD_INT 0
24926: PPUSH
24927: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24928: LD_INT 35
24930: PPUSH
24931: CALL_OW 67
// hasBadWeapons := false ;
24935: LD_ADDR_VAR 0 2
24939: PUSH
24940: LD_INT 0
24942: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24943: LD_ADDR_EXP 19
24947: PUSH
24948: LD_EXP 19
24952: PUSH
24953: LD_INT 35
24955: MINUS
24956: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24957: LD_EXP 19
24961: PUSH
24962: LD_INT 0
24964: LESSEQUAL
24965: IFFALSE 25227
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24967: LD_ADDR_EXP 19
24971: PUSH
24972: LD_INT 0
24974: ST_TO_ADDR
// display_strings := [ ] ;
24975: LD_ADDR_OWVAR 47
24979: PUSH
24980: EMPTY
24981: ST_TO_ADDR
// DialogueOn ;
24982: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24986: LD_EXP 47
24990: PPUSH
24991: LD_STRING DRf-Veh-b-19
24993: PPUSH
24994: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24998: LD_EXP 47
25002: PPUSH
25003: LD_STRING DRf-Veh-b-20
25005: PPUSH
25006: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
25010: LD_EXP 34
25014: PPUSH
25015: LD_STRING DH-Veh-b-21
25017: PPUSH
25018: CALL_OW 88
// if IsOk ( Givi ) then
25022: LD_EXP 35
25026: PPUSH
25027: CALL_OW 302
25031: IFFALSE 25069
// begin Say ( Givi , DG-Veh-b-22 ) ;
25033: LD_EXP 35
25037: PPUSH
25038: LD_STRING DG-Veh-b-22
25040: PPUSH
25041: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
25045: LD_EXP 34
25049: PPUSH
25050: LD_STRING DH-Veh-b-23
25052: PPUSH
25053: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
25057: LD_EXP 35
25061: PPUSH
25062: LD_STRING DG-Veh-b-24
25064: PPUSH
25065: CALL_OW 88
// end ; DialogueOff ;
25069: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25073: LD_STRING M5a
25075: PPUSH
25076: CALL_OW 337
// for i in rolfSquad do
25080: LD_ADDR_VAR 0 1
25084: PUSH
25085: LD_EXP 51
25089: PUSH
25090: FOR_IN
25091: IFFALSE 25208
// begin SetSide ( i , 8 ) ;
25093: LD_VAR 0 1
25097: PPUSH
25098: LD_INT 8
25100: PPUSH
25101: CALL_OW 235
// if IsDriver ( i ) then
25105: LD_VAR 0 1
25109: PPUSH
25110: CALL 66071 0 1
25114: IFFALSE 25186
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
25116: LD_VAR 0 1
25120: PPUSH
25121: CALL_OW 310
25125: PPUSH
25126: CALL_OW 264
25130: PUSH
25131: LD_INT 51
25133: PUSH
25134: LD_INT 52
25136: PUSH
25137: LD_INT 32
25139: PUSH
25140: LD_INT 88
25142: PUSH
25143: LD_INT 31
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: IN
25153: NOT
25154: IFFALSE 25175
// SetSide ( IsInUnit ( i ) , 8 ) else
25156: LD_VAR 0 1
25160: PPUSH
25161: CALL_OW 310
25165: PPUSH
25166: LD_INT 8
25168: PPUSH
25169: CALL_OW 235
25173: GO 25184
// ComExitVehicle ( i ) ;
25175: LD_VAR 0 1
25179: PPUSH
25180: CALL_OW 121
// end else
25184: GO 25206
// if IsInUnit ( i ) then
25186: LD_VAR 0 1
25190: PPUSH
25191: CALL_OW 310
25195: IFFALSE 25206
// ComExitBuilding ( i ) ;
25197: LD_VAR 0 1
25201: PPUSH
25202: CALL_OW 122
// end ;
25206: GO 25090
25208: POP
25209: POP
// wait ( 0 0$10 ) ;
25210: LD_INT 350
25212: PPUSH
25213: CALL_OW 67
// rolfAttack := true ;
25217: LD_ADDR_EXP 32
25221: PUSH
25222: LD_INT 1
25224: ST_TO_ADDR
// exit ;
25225: GO 25543
// end ; if IsDead ( Rolf ) then
25227: LD_EXP 47
25231: PPUSH
25232: CALL_OW 301
25236: IFFALSE 25247
// begin ChangeMissionObjectives ( M5a ) ;
25238: LD_STRING M5a
25240: PPUSH
25241: CALL_OW 337
// exit ;
25245: GO 25543
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
25247: LD_EXP 51
25251: PPUSH
25252: LD_INT 55
25254: PUSH
25255: EMPTY
25256: LIST
25257: PPUSH
25258: CALL_OW 72
25262: PPUSH
25263: CALL 32515 0 1
25267: PUSH
25268: LD_EXP 51
25272: PPUSH
25273: CALL 32515 0 1
25277: EQUAL
25278: IFFALSE 25395
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
25280: LD_ADDR_VAR 0 1
25284: PUSH
25285: LD_EXP 51
25289: PPUSH
25290: LD_INT 55
25292: PUSH
25293: EMPTY
25294: LIST
25295: PPUSH
25296: CALL_OW 72
25300: PUSH
25301: FOR_IN
25302: IFFALSE 25362
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
25304: LD_VAR 0 1
25308: PPUSH
25309: CALL_OW 310
25313: PPUSH
25314: CALL_OW 264
25318: PUSH
25319: LD_INT 51
25321: PUSH
25322: LD_INT 52
25324: PUSH
25325: LD_INT 32
25327: PUSH
25328: LD_INT 88
25330: PUSH
25331: LD_INT 31
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: IN
25341: IFFALSE 25360
// begin hasBadWeapons := true ;
25343: LD_ADDR_VAR 0 2
25347: PUSH
25348: LD_INT 1
25350: ST_TO_ADDR
// Query ( QBadWeapon ) ;
25351: LD_STRING QBadWeapon
25353: PPUSH
25354: CALL_OW 97
// break ;
25358: GO 25362
// end ;
25360: GO 25301
25362: POP
25363: POP
// if not hasBadWeapons then
25364: LD_VAR 0 2
25368: NOT
25369: IFFALSE 25395
// if Query ( QRolf ) = 1 then
25371: LD_STRING QRolf
25373: PPUSH
25374: CALL_OW 97
25378: PUSH
25379: LD_INT 1
25381: EQUAL
25382: IFFALSE 25388
// break else
25384: GO 25399
25386: GO 25395
// wait ( 0 0$15 ) ;
25388: LD_INT 525
25390: PPUSH
25391: CALL_OW 67
// end ; until false ;
25395: LD_INT 0
25397: IFFALSE 24928
// rolfWaitingForVehiclesTimer := 0 0$00 ;
25399: LD_ADDR_EXP 19
25403: PUSH
25404: LD_INT 0
25406: ST_TO_ADDR
// display_strings := [ ] ;
25407: LD_ADDR_OWVAR 47
25411: PUSH
25412: EMPTY
25413: ST_TO_ADDR
// DialogueOn ;
25414: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
25418: LD_EXP 47
25422: PPUSH
25423: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
25427: LD_EXP 47
25431: PPUSH
25432: LD_STRING DRf-Veh-a-17
25434: PPUSH
25435: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
25439: LD_EXP 34
25443: PPUSH
25444: LD_STRING DH-08-Veh-a-18
25446: PPUSH
25447: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
25451: LD_EXP 47
25455: PPUSH
25456: LD_STRING DRf-Veh-a-19
25458: PPUSH
25459: CALL_OW 88
// DialogueOff ;
25463: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25467: LD_STRING M5a
25469: PPUSH
25470: CALL_OW 337
// rolfHasVehicles := true ;
25474: LD_ADDR_EXP 16
25478: PUSH
25479: LD_INT 1
25481: ST_TO_ADDR
// for i in rolfSquad do
25482: LD_ADDR_VAR 0 1
25486: PUSH
25487: LD_EXP 51
25491: PUSH
25492: FOR_IN
25493: IFFALSE 25526
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25495: LD_VAR 0 1
25499: PPUSH
25500: CALL_OW 310
25504: PPUSH
25505: LD_INT 8
25507: PPUSH
25508: CALL_OW 235
// SetSide ( i , 8 ) ;
25512: LD_VAR 0 1
25516: PPUSH
25517: LD_INT 8
25519: PPUSH
25520: CALL_OW 235
// end ;
25524: GO 25492
25526: POP
25527: POP
// wait ( 0 0$10 ) ;
25528: LD_INT 350
25530: PPUSH
25531: CALL_OW 67
// rolfAttack := true ;
25535: LD_ADDR_EXP 32
25539: PUSH
25540: LD_INT 1
25542: ST_TO_ADDR
// end ;
25543: PPOPN 2
25545: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25546: LD_EXP 32
25550: IFFALSE 25558
25552: PUSH
25553: LD_EXP 23
25557: AND
25558: IFFALSE 25570
25560: GO 25562
25562: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25563: LD_STRING M6a
25565: PPUSH
25566: CALL_OW 337
25570: END
// every 0 0$1 trigger leninSpotted do
25571: LD_EXP 14
25575: IFFALSE 25663
25577: GO 25579
25579: DISABLE
// begin wait ( 0 0$10 ) ;
25580: LD_INT 350
25582: PPUSH
25583: CALL_OW 67
// DialogueOn ;
25587: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25591: LD_EXP 46
25595: PPUSH
25596: LD_STRING DA-Transmission-1
25598: PPUSH
25599: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25603: LD_EXP 53
25607: PPUSH
25608: LD_STRING DMzw-Transmission-2
25610: PPUSH
25611: CALL_OW 94
// if gaidarKilled then
25615: LD_EXP 7
25619: IFFALSE 25635
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25621: LD_EXP 53
25625: PPUSH
25626: LD_STRING DMzw-Transmission-3
25628: PPUSH
25629: CALL_OW 94
25633: GO 25647
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25635: LD_EXP 53
25639: PPUSH
25640: LD_STRING DMzw-Transmission-a-3
25642: PPUSH
25643: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25647: LD_EXP 34
25651: PPUSH
25652: LD_STRING DH-Transmission-4
25654: PPUSH
25655: CALL_OW 88
// DialogueOff ;
25659: CALL_OW 7
// end ;
25663: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25664: LD_INT 22
25666: PUSH
25667: LD_INT 3
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 25
25676: PUSH
25677: LD_INT 9
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 101
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: PPUSH
25699: CALL_OW 69
25703: IFFALSE 25716
25705: PUSH
25706: LD_EXP 34
25710: PPUSH
25711: CALL_OW 302
25715: AND
25716: IFFALSE 25796
25718: GO 25720
25720: DISABLE
// begin wait ( 0 0$3 ) ;
25721: LD_INT 105
25723: PPUSH
25724: CALL_OW 67
// DialogueOn ;
25728: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25732: LD_INT 22
25734: PUSH
25735: LD_INT 3
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 25
25744: PUSH
25745: LD_INT 9
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 101
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: LIST
25766: PPUSH
25767: CALL_OW 69
25771: PUSH
25772: LD_INT 1
25774: ARRAY
25775: PPUSH
25776: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25780: LD_EXP 34
25784: PPUSH
25785: LD_STRING DH-Rubazooka-1
25787: PPUSH
25788: CALL_OW 88
// DialogueOff ;
25792: CALL_OW 7
// end ;
25796: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25797: LD_INT 19
25799: PPUSH
25800: LD_INT 22
25802: PUSH
25803: LD_INT 3
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PPUSH
25810: CALL_OW 70
25814: IFFALSE 25822
25816: PUSH
25817: LD_EXP 28
25821: AND
25822: IFFALSE 25881
25824: GO 25826
25826: DISABLE
// begin DialogueOn ;
25827: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25831: LD_INT 19
25833: PPUSH
25834: LD_INT 22
25836: PUSH
25837: LD_INT 3
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PPUSH
25844: CALL_OW 70
25848: PPUSH
25849: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25853: LD_EXP 34
25857: PPUSH
25858: LD_STRING DH-Ruattfirst-1
25860: PPUSH
25861: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25865: LD_EXP 34
25869: PPUSH
25870: LD_STRING DH-Ruattfirst-2
25872: PPUSH
25873: CALL_OW 88
// DialogueOff ;
25877: CALL_OW 7
// end ;
25881: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25882: LD_INT 19
25884: PPUSH
25885: LD_INT 22
25887: PUSH
25888: LD_INT 3
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PPUSH
25895: CALL_OW 70
25899: IFFALSE 25908
25901: PUSH
25902: LD_EXP 28
25906: NOT
25907: AND
25908: IFFALSE 25955
25910: GO 25912
25912: DISABLE
// begin DialogueOn ;
25913: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25917: LD_INT 19
25919: PPUSH
25920: LD_INT 22
25922: PUSH
25923: LD_INT 3
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PPUSH
25930: CALL_OW 70
25934: PPUSH
25935: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25939: LD_EXP 34
25943: PPUSH
25944: LD_STRING DH-Ruattnext-1
25946: PPUSH
25947: CALL_OW 88
// DialogueOff ;
25951: CALL_OW 7
// end ;
25955: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25956: LD_EXP 53
25960: PPUSH
25961: CALL_OW 301
25965: IFFALSE 25978
25967: PUSH
25968: LD_EXP 44
25972: PPUSH
25973: CALL_OW 302
25977: AND
25978: IFFALSE 25995
25980: GO 25982
25982: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25983: LD_EXP 44
25987: PPUSH
25988: LD_STRING DOm-Morozov
25990: PPUSH
25991: CALL_OW 94
25995: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25996: LD_EXP 31
26000: IFFALSE 26025
26002: PUSH
26003: LD_EXP 48
26007: PPUSH
26008: CALL_OW 274
26012: PPUSH
26013: LD_INT 2
26015: PPUSH
26016: CALL_OW 275
26020: PUSH
26021: LD_INT 30
26023: LESSEQUAL
26024: AND
26025: IFFALSE 26115
26027: GO 26029
26029: DISABLE
// begin wait ( 0 0$10 ) ;
26030: LD_INT 350
26032: PPUSH
26033: CALL_OW 67
// DialogueOn ;
26037: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
26041: LD_EXP 34
26045: PPUSH
26046: LD_STRING DH-Fuel-1
26048: PPUSH
26049: CALL_OW 88
// if IsOk ( Givi ) then
26053: LD_EXP 35
26057: PPUSH
26058: CALL_OW 302
26062: IFFALSE 26100
// begin Say ( Givi , DG-Fuel-2 ) ;
26064: LD_EXP 35
26068: PPUSH
26069: LD_STRING DG-Fuel-2
26071: PPUSH
26072: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
26076: LD_EXP 35
26080: PPUSH
26081: LD_STRING DG-Fuel-3
26083: PPUSH
26084: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
26088: LD_EXP 35
26092: PPUSH
26093: LD_STRING DG-Fuel-4
26095: PPUSH
26096: CALL_OW 88
// end ; DialogueOff ;
26100: CALL_OW 7
// Query ( QOil ) ;
26104: LD_STRING QOil
26106: PPUSH
26107: CALL_OW 97
// GoForOil ( ) ;
26111: CALL 8964 0 0
// end ;
26115: END
// every 0 0$1 trigger leninSpotted and omarAttack and rolfAttack do
26116: LD_EXP 14
26120: IFFALSE 26128
26122: PUSH
26123: LD_EXP 23
26127: AND
26128: IFFALSE 26136
26130: PUSH
26131: LD_EXP 32
26135: AND
26136: IFFALSE 26477
26138: GO 26140
26140: DISABLE
// begin if IsDead ( Morozov ) then
26141: LD_EXP 53
26145: PPUSH
26146: CALL_OW 301
26150: IFFALSE 26161
// wait ( 1 1$45 ) else
26152: LD_INT 3675
26154: PPUSH
26155: CALL_OW 67
26159: GO 26189
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
26161: LD_INT 19950
26163: PUSH
26164: LD_INT 16800
26166: PUSH
26167: LD_INT 16100
26169: PUSH
26170: LD_INT 13650
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: PUSH
26179: LD_OWVAR 67
26183: ARRAY
26184: PPUSH
26185: CALL_OW 67
// DialogueOn ;
26189: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
26193: LD_EXP 42
26197: PPUSH
26198: LD_STRING DShar-End-1
26200: PPUSH
26201: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
26205: LD_EXP 34
26209: PPUSH
26210: LD_STRING DH-End-2
26212: PPUSH
26213: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
26217: LD_EXP 42
26221: PPUSH
26222: LD_STRING DShar-End-3
26224: PPUSH
26225: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
26229: LD_EXP 34
26233: PPUSH
26234: LD_STRING DH-End-4
26236: PPUSH
26237: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
26241: LD_EXP 42
26245: PPUSH
26246: LD_STRING DShar-End-5
26248: PPUSH
26249: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
26253: LD_EXP 42
26257: PPUSH
26258: LD_STRING DShar-End-6
26260: PPUSH
26261: CALL_OW 94
// dwait ( 0 0$2 ) ;
26265: LD_INT 70
26267: PPUSH
26268: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
26272: LD_EXP 34
26276: PPUSH
26277: LD_STRING DH-End-7
26279: PPUSH
26280: CALL_OW 88
// DialogueOff ;
26284: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
26288: LD_STRING M6
26290: PPUSH
26291: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
26295: LD_INT 17
26297: PPUSH
26298: LD_INT 1
26300: PPUSH
26301: CALL_OW 424
// escapeAllowed := true ;
26305: LD_ADDR_EXP 24
26309: PUSH
26310: LD_INT 1
26312: ST_TO_ADDR
// wait ( 0 0$2 ) ;
26313: LD_INT 70
26315: PPUSH
26316: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
26320: LD_EXP 45
26324: PPUSH
26325: LD_STRING DKs-End-8
26327: PPUSH
26328: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
26332: LD_EXP 39
26336: PPUSH
26337: LD_STRING DK-End-10
26339: PPUSH
26340: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
26344: LD_EXP 45
26348: PPUSH
26349: LD_STRING DKs-End-9
26351: PPUSH
26352: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
26356: LD_EXP 41
26360: PPUSH
26361: LD_STRING DMar-End-11
26363: PPUSH
26364: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
26368: LD_STRING 05_DrugsTested
26370: PPUSH
26371: LD_EXP 1
26375: PPUSH
26376: CALL_OW 30
26380: IFFALSE 26394
// Say ( Mike , DM-End-12 ) ;
26382: LD_EXP 36
26386: PPUSH
26387: LD_STRING DM-End-12
26389: PPUSH
26390: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
26394: LD_EXP 43
26398: PPUSH
26399: LD_STRING DO-End-13
26401: PPUSH
26402: CALL_OW 88
// if IsOk ( Sophia ) then
26406: LD_EXP 40
26410: PPUSH
26411: CALL_OW 302
26415: IFFALSE 26441
// begin Say ( Sophia , DS-End-15 ) ;
26417: LD_EXP 40
26421: PPUSH
26422: LD_STRING DS-End-15
26424: PPUSH
26425: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
26429: LD_EXP 39
26433: PPUSH
26434: LD_STRING DK-End-16
26436: PPUSH
26437: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
26441: LD_EXP 35
26445: PPUSH
26446: LD_STRING DG-End-17
26448: PPUSH
26449: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
26453: LD_EXP 35
26457: PPUSH
26458: LD_STRING DG-End-18
26460: PPUSH
26461: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
26465: LD_EXP 35
26469: PPUSH
26470: LD_STRING DG-End-19
26472: PPUSH
26473: CALL_OW 88
// end ;
26477: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
26478: LD_EXP 24
26482: IFFALSE 26621
26484: GO 26486
26486: DISABLE
26487: LD_INT 0
26489: PPUSH
26490: PPUSH
// begin repeat wait ( 0 0$1 ) ;
26491: LD_INT 35
26493: PPUSH
26494: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
26498: LD_ADDR_OWVAR 47
26502: PUSH
26503: LD_STRING #X106-2
26505: PUSH
26506: LD_EXP 25
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26515: LD_ADDR_EXP 25
26519: PUSH
26520: LD_EXP 25
26524: PUSH
26525: LD_INT 35
26527: MINUS
26528: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26529: LD_ADDR_VAR 0 2
26533: PUSH
26534: LD_INT 17
26536: PPUSH
26537: LD_INT 22
26539: PUSH
26540: LD_INT 2
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 21
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 23
26559: PUSH
26560: LD_INT 2
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: PPUSH
26572: CALL_OW 71
26576: ST_TO_ADDR
// if not outsiders then
26577: LD_VAR 0 2
26581: NOT
26582: IFFALSE 26598
// begin escapeAllowed := false ;
26584: LD_ADDR_EXP 24
26588: PUSH
26589: LD_INT 0
26591: ST_TO_ADDR
// MissionWin ;
26592: CALL 26624 0 0
// exit ;
26596: GO 26621
// end ; if escapeTimer <= 0 0$00 then
26598: LD_EXP 25
26602: PUSH
26603: LD_INT 0
26605: LESSEQUAL
26606: IFFALSE 26617
// begin YouLost ( TimeOut ) ;
26608: LD_STRING TimeOut
26610: PPUSH
26611: CALL_OW 104
// exit ;
26615: GO 26621
// end ; until false ;
26617: LD_INT 0
26619: IFFALSE 26491
// end ;
26621: PPOPN 2
26623: END
// function MissionWin ; var i , tmp , tmp2 , cargo , m1 , m2 , m3 ; begin
26624: LD_INT 0
26626: PPUSH
26627: PPUSH
26628: PPUSH
26629: PPUSH
26630: PPUSH
26631: PPUSH
26632: PPUSH
26633: PPUSH
// m1 := false ;
26634: LD_ADDR_VAR 0 6
26638: PUSH
26639: LD_INT 0
26641: ST_TO_ADDR
// m2 := false ;
26642: LD_ADDR_VAR 0 7
26646: PUSH
26647: LD_INT 0
26649: ST_TO_ADDR
// m3 := false ;
26650: LD_ADDR_VAR 0 8
26654: PUSH
26655: LD_INT 0
26657: ST_TO_ADDR
// if tick <= 55 55$00 then
26658: LD_OWVAR 1
26662: PUSH
26663: LD_INT 115500
26665: LESSEQUAL
26666: IFFALSE 26675
// SetAchievement ( ACH_HSPEED_6 ) ;
26668: LD_STRING ACH_HSPEED_6
26670: PPUSH
26671: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26675: LD_EXP 34
26679: PPUSH
26680: LD_STRING DH-End-20
26682: PPUSH
26683: CALL_OW 88
// if rolfDied then
26687: LD_EXP 13
26691: IFFALSE 26706
// AddMedal ( med1 , - 1 ) else
26693: LD_STRING med1
26695: PPUSH
26696: LD_INT 1
26698: NEG
26699: PPUSH
26700: CALL_OW 101
26704: GO 26744
// if not canRolfJoin then
26706: LD_EXP 29
26710: NOT
26711: IFFALSE 26726
// AddMedal ( med1 , - 2 ) else
26713: LD_STRING med1
26715: PPUSH
26716: LD_INT 2
26718: NEG
26719: PPUSH
26720: CALL_OW 101
26724: GO 26744
// begin m1 := true ;
26726: LD_ADDR_VAR 0 6
26730: PUSH
26731: LD_INT 1
26733: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
26734: LD_STRING med1
26736: PPUSH
26737: LD_INT 1
26739: PPUSH
26740: CALL_OW 101
// end ; if omarHasVehicles and rolfHasVehicles then
26744: LD_EXP 22
26748: IFFALSE 26756
26750: PUSH
26751: LD_EXP 16
26755: AND
26756: IFFALSE 26778
// begin m2 := true ;
26758: LD_ADDR_VAR 0 7
26762: PUSH
26763: LD_INT 1
26765: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
26766: LD_STRING med2
26768: PPUSH
26769: LD_INT 1
26771: PPUSH
26772: CALL_OW 101
// end else
26776: GO 26827
// if omarHasVehicles then
26778: LD_EXP 22
26782: IFFALSE 26797
// AddMedal ( med2 , - 1 ) else
26784: LD_STRING med2
26786: PPUSH
26787: LD_INT 1
26789: NEG
26790: PPUSH
26791: CALL_OW 101
26795: GO 26827
// if rolfHasVehicles then
26797: LD_EXP 16
26801: IFFALSE 26816
// AddMedal ( med2 , - 2 ) else
26803: LD_STRING med2
26805: PPUSH
26806: LD_INT 2
26808: NEG
26809: PPUSH
26810: CALL_OW 101
26814: GO 26827
// AddMedal ( med2 , - 3 ) ;
26816: LD_STRING med2
26818: PPUSH
26819: LD_INT 3
26821: NEG
26822: PPUSH
26823: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26827: LD_EXP 5
26831: PUSH
26832: LD_INT 20
26834: PUSH
26835: LD_INT 30
26837: PUSH
26838: LD_INT 40
26840: PUSH
26841: LD_INT 50
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: PUSH
26850: LD_OWVAR 67
26854: ARRAY
26855: GREATEREQUAL
26856: IFFALSE 26868
26858: PUSH
26859: LD_EXP 26
26863: PUSH
26864: LD_INT 0
26866: EQUAL
26867: AND
26868: IFFALSE 26890
// begin m3 := true ;
26870: LD_ADDR_VAR 0 8
26874: PUSH
26875: LD_INT 1
26877: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
26878: LD_STRING med3
26880: PPUSH
26881: LD_INT 1
26883: PPUSH
26884: CALL_OW 101
// end else
26888: GO 26920
// if heikeLoseCounter then
26890: LD_EXP 26
26894: IFFALSE 26909
// AddMedal ( med3 , - 1 ) else
26896: LD_STRING med3
26898: PPUSH
26899: LD_INT 1
26901: NEG
26902: PPUSH
26903: CALL_OW 101
26907: GO 26920
// AddMedal ( med3 , - 2 ) ;
26909: LD_STRING med3
26911: PPUSH
26912: LD_INT 2
26914: NEG
26915: PPUSH
26916: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
26920: LD_VAR 0 6
26924: IFFALSE 26932
26926: PUSH
26927: LD_VAR 0 7
26931: AND
26932: IFFALSE 26940
26934: PUSH
26935: LD_VAR 0 8
26939: AND
26940: IFFALSE 26952
26942: PUSH
26943: LD_OWVAR 67
26947: PUSH
26948: LD_INT 3
26950: GREATEREQUAL
26951: AND
26952: IFFALSE 26964
// SetAchievementEX ( ACH_ARES , 6 ) ;
26954: LD_STRING ACH_ARES
26956: PPUSH
26957: LD_INT 6
26959: PPUSH
26960: CALL_OW 564
// GiveMedals ( MAIN ) ;
26964: LD_STRING MAIN
26966: PPUSH
26967: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26971: LD_INT 22
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 23
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 21
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: PPUSH
27006: CALL_OW 69
27010: PPUSH
27011: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
27015: LD_EXP 34
27019: PPUSH
27020: LD_STRING 06_Heike
27022: PPUSH
27023: CALL_OW 38
// if Aviradze then
27027: LD_EXP 46
27031: IFFALSE 27045
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
27033: LD_EXP 46
27037: PPUSH
27038: LD_STRING 06_Aviradze
27040: PPUSH
27041: CALL_OW 38
// if Ibrahim then
27045: LD_EXP 37
27049: IFFALSE 27063
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
27051: LD_EXP 37
27055: PPUSH
27056: LD_STRING 06_Ibrahim
27058: PPUSH
27059: CALL_OW 38
// if Kamil then
27063: LD_EXP 38
27067: IFFALSE 27081
// SaveCharacters ( Kamil , 06_Kamil ) ;
27069: LD_EXP 38
27073: PPUSH
27074: LD_STRING 06_Kamil
27076: PPUSH
27077: CALL_OW 38
// if Sophia then
27081: LD_EXP 40
27085: IFFALSE 27099
// SaveCharacters ( Sophia , 06_Sophia ) ;
27087: LD_EXP 40
27091: PPUSH
27092: LD_STRING 06_Sophia
27094: PPUSH
27095: CALL_OW 38
// if Kaia then
27099: LD_EXP 39
27103: IFFALSE 27117
// SaveCharacters ( Kaia , 06_Kaia ) ;
27105: LD_EXP 39
27109: PPUSH
27110: LD_STRING 06_Kaia
27112: PPUSH
27113: CALL_OW 38
// if Givi then
27117: LD_EXP 35
27121: IFFALSE 27135
// SaveCharacters ( Givi , 06_Givi ) ;
27123: LD_EXP 35
27127: PPUSH
27128: LD_STRING 06_Givi
27130: PPUSH
27131: CALL_OW 38
// if Olaf then
27135: LD_EXP 43
27139: IFFALSE 27153
// SaveCharacters ( Olaf , 06_Olaf ) ;
27141: LD_EXP 43
27145: PPUSH
27146: LD_STRING 06_Olaf
27148: PPUSH
27149: CALL_OW 38
// if Mike then
27153: LD_EXP 36
27157: IFFALSE 27171
// SaveCharacters ( Mike , 06_Mike ) ;
27159: LD_EXP 36
27163: PPUSH
27164: LD_STRING 06_Mike
27166: PPUSH
27167: CALL_OW 38
// if Markov then
27171: LD_EXP 41
27175: IFFALSE 27189
// SaveCharacters ( Markov , 06_Markov ) ;
27177: LD_EXP 41
27181: PPUSH
27182: LD_STRING 06_Markov
27184: PPUSH
27185: CALL_OW 38
// if Kurt then
27189: LD_EXP 45
27193: IFFALSE 27207
// SaveCharacters ( Kurt , 06_Kurt ) ;
27195: LD_EXP 45
27199: PPUSH
27200: LD_STRING 06_Kurt
27202: PPUSH
27203: CALL_OW 38
// if heikeSecondSquad then
27207: LD_EXP 49
27211: IFFALSE 27225
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
27213: LD_EXP 49
27217: PPUSH
27218: LD_STRING 06_others
27220: PPUSH
27221: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
27225: LD_ADDR_VAR 0 3
27229: PUSH
27230: LD_INT 22
27232: PUSH
27233: LD_INT 2
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 23
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PPUSH
27254: CALL_OW 69
27258: ST_TO_ADDR
// if tmp then
27259: LD_VAR 0 3
27263: IFFALSE 27277
// SaveCharacters ( tmp , 06_apes ) ;
27265: LD_VAR 0 3
27269: PPUSH
27270: LD_STRING 06_apes
27272: PPUSH
27273: CALL_OW 38
// if Rolf then
27277: LD_EXP 47
27281: IFFALSE 27332
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
27283: LD_EXP 47
27287: PPUSH
27288: LD_STRING 06_Rolf
27290: PPUSH
27291: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
27295: LD_STRING enableBioCharacter(BIO_ROLF)
27297: PPUSH
27298: CALL_OW 559
// if rolfSquad diff Rolf then
27302: LD_EXP 51
27306: PUSH
27307: LD_EXP 47
27311: DIFF
27312: IFFALSE 27332
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
27314: LD_EXP 51
27318: PUSH
27319: LD_EXP 47
27323: DIFF
27324: PPUSH
27325: LD_STRING 06_RolfSquad
27327: PPUSH
27328: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
27332: LD_ADDR_VAR 0 3
27336: PUSH
27337: LD_INT 17
27339: PPUSH
27340: LD_INT 21
27342: PUSH
27343: LD_INT 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PPUSH
27350: CALL_OW 70
27354: ST_TO_ADDR
// if tmp then
27355: LD_VAR 0 3
27359: IFFALSE 27653
// begin tmp2 := [ ] ;
27361: LD_ADDR_VAR 0 4
27365: PUSH
27366: EMPTY
27367: ST_TO_ADDR
// for i in tmp do
27368: LD_ADDR_VAR 0 2
27372: PUSH
27373: LD_VAR 0 3
27377: PUSH
27378: FOR_IN
27379: IFFALSE 27639
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
27381: LD_VAR 0 2
27385: PPUSH
27386: CALL_OW 264
27390: PUSH
27391: LD_INT 32
27393: PUSH
27394: LD_INT 12
27396: PUSH
27397: LD_INT 51
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: IN
27405: IFFALSE 27542
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
27407: LD_ADDR_VAR 0 5
27411: PUSH
27412: LD_VAR 0 2
27416: PPUSH
27417: LD_INT 1
27419: PPUSH
27420: CALL_OW 289
27424: PUSH
27425: LD_VAR 0 2
27429: PPUSH
27430: LD_INT 2
27432: PPUSH
27433: CALL_OW 289
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
27442: LD_ADDR_VAR 0 4
27446: PUSH
27447: LD_VAR 0 4
27451: PPUSH
27452: LD_VAR 0 4
27456: PUSH
27457: LD_INT 1
27459: PLUS
27460: PPUSH
27461: LD_VAR 0 2
27465: PPUSH
27466: CALL_OW 265
27470: PUSH
27471: LD_VAR 0 2
27475: PPUSH
27476: CALL_OW 262
27480: PUSH
27481: LD_VAR 0 2
27485: PPUSH
27486: CALL_OW 263
27490: PUSH
27491: LD_VAR 0 2
27495: PPUSH
27496: CALL_OW 264
27500: PUSH
27501: LD_VAR 0 2
27505: PPUSH
27506: CALL_OW 248
27510: PUSH
27511: LD_VAR 0 2
27515: PPUSH
27516: CALL_OW 256
27520: PUSH
27521: LD_VAR 0 5
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: PPUSH
27535: CALL_OW 1
27539: ST_TO_ADDR
// end else
27540: GO 27637
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
27542: LD_ADDR_VAR 0 4
27546: PUSH
27547: LD_VAR 0 4
27551: PPUSH
27552: LD_VAR 0 4
27556: PUSH
27557: LD_INT 1
27559: PLUS
27560: PPUSH
27561: LD_VAR 0 2
27565: PPUSH
27566: CALL_OW 265
27570: PUSH
27571: LD_VAR 0 2
27575: PPUSH
27576: CALL_OW 262
27580: PUSH
27581: LD_VAR 0 2
27585: PPUSH
27586: CALL_OW 263
27590: PUSH
27591: LD_VAR 0 2
27595: PPUSH
27596: CALL_OW 264
27600: PUSH
27601: LD_VAR 0 2
27605: PPUSH
27606: CALL_OW 248
27610: PUSH
27611: LD_VAR 0 2
27615: PPUSH
27616: CALL_OW 256
27620: PUSH
27621: EMPTY
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: PPUSH
27632: CALL_OW 1
27636: ST_TO_ADDR
27637: GO 27378
27639: POP
27640: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27641: LD_VAR 0 4
27645: PPUSH
27646: LD_STRING 06_Vehicles
27648: PPUSH
27649: CALL_OW 39
// end ; YouWin ;
27653: CALL_OW 103
// end ; end_of_file
27657: LD_VAR 0 1
27661: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27662: LD_INT 0
27664: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27665: LD_VAR 0 1
27669: PPUSH
27670: LD_VAR 0 2
27674: PPUSH
27675: CALL 90152 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27679: LD_VAR 0 1
27683: PPUSH
27684: CALL_OW 255
27688: PUSH
27689: LD_INT 2
27691: EQUAL
27692: IFFALSE 27700
27694: PUSH
27695: LD_OWVAR 52
27699: AND
27700: IFFALSE 27717
27702: PUSH
27703: LD_VAR 0 1
27707: PPUSH
27708: CALL_OW 263
27712: PUSH
27713: LD_INT 1
27715: EQUAL
27716: AND
27717: IFFALSE 27772
// begin driver := IsDrivenBy ( vehicle ) ;
27719: LD_ADDR_VAR 0 3
27723: PUSH
27724: LD_VAR 0 1
27728: PPUSH
27729: CALL_OW 311
27733: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27734: LD_VAR 0 1
27738: PPUSH
27739: LD_INT 211
27741: PPUSH
27742: LD_INT 101
27744: PPUSH
27745: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27749: LD_VAR 0 3
27753: PPUSH
27754: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27758: LD_VAR 0 3
27762: PPUSH
27763: LD_VAR 0 2
27767: PPUSH
27768: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27772: LD_VAR 0 1
27776: PPUSH
27777: CALL_OW 255
27781: PUSH
27782: LD_INT 3
27784: EQUAL
27785: IFFALSE 27816
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27787: LD_ADDR_EXP 60
27791: PUSH
27792: LD_EXP 60
27796: PPUSH
27797: LD_EXP 60
27801: PUSH
27802: LD_INT 1
27804: PLUS
27805: PPUSH
27806: LD_VAR 0 1
27810: PPUSH
27811: CALL_OW 1
27815: ST_TO_ADDR
// end ;
27816: PPOPN 3
27818: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27819: LD_VAR 0 1
27823: PPUSH
27824: CALL_OW 255
27828: PUSH
27829: LD_INT 8
27831: EQUAL
27832: IFFALSE 27849
27834: PUSH
27835: LD_VAR 0 1
27839: PPUSH
27840: CALL_OW 266
27844: PUSH
27845: LD_INT 4
27847: EQUAL
27848: AND
27849: IFFALSE 27860
// ComUpgrade ( b ) ;
27851: LD_VAR 0 1
27855: PPUSH
27856: CALL_OW 146
// end ;
27860: PPOPN 1
27862: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27863: LD_VAR 0 1
27867: PPUSH
27868: CALL 90094 0 1
// if un = Heike then
27872: LD_VAR 0 1
27876: PUSH
27877: LD_EXP 34
27881: EQUAL
27882: IFFALSE 27891
// YouLost ( Heike ) ;
27884: LD_STRING Heike
27886: PPUSH
27887: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
27891: LD_VAR 0 1
27895: PUSH
27896: LD_INT 22
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 21
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 23
27918: PUSH
27919: LD_INT 2
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: PPUSH
27931: CALL_OW 69
27935: IN
27936: IFFALSE 27952
// heikeLoseCounter := heikeLoseCounter + 1 ;
27938: LD_ADDR_EXP 26
27942: PUSH
27943: LD_EXP 26
27947: PUSH
27948: LD_INT 1
27950: PLUS
27951: ST_TO_ADDR
// if un = arDepot then
27952: LD_VAR 0 1
27956: PUSH
27957: LD_EXP 48
27961: EQUAL
27962: IFFALSE 27971
// YouLost ( Base ) ;
27964: LD_STRING Base
27966: PPUSH
27967: CALL_OW 104
// if un = Rolf then
27971: LD_VAR 0 1
27975: PUSH
27976: LD_EXP 47
27980: EQUAL
27981: IFFALSE 27991
// rolfDied := true ;
27983: LD_ADDR_EXP 13
27987: PUSH
27988: LD_INT 1
27990: ST_TO_ADDR
// if un in rolfSquad then
27991: LD_VAR 0 1
27995: PUSH
27996: LD_EXP 51
28000: IN
28001: IFFALSE 28019
// rolfSquad := rolfSquad diff un ;
28003: LD_ADDR_EXP 51
28007: PUSH
28008: LD_EXP 51
28012: PUSH
28013: LD_VAR 0 1
28017: DIFF
28018: ST_TO_ADDR
// if un in omarSquad then
28019: LD_VAR 0 1
28023: PUSH
28024: LD_EXP 52
28028: IN
28029: IFFALSE 28047
// omarSquad := omarSquad diff un ;
28031: LD_ADDR_EXP 52
28035: PUSH
28036: LD_EXP 52
28040: PUSH
28041: LD_VAR 0 1
28045: DIFF
28046: ST_TO_ADDR
// if GetSide ( un ) = 3 then
28047: LD_VAR 0 1
28051: PPUSH
28052: CALL_OW 255
28056: PUSH
28057: LD_INT 3
28059: EQUAL
28060: IFFALSE 28076
// ruLoseCounter := ruLoseCounter + 1 ;
28062: LD_ADDR_EXP 5
28066: PUSH
28067: LD_EXP 5
28071: PUSH
28072: LD_INT 1
28074: PLUS
28075: ST_TO_ADDR
// if un in ruAttackers then
28076: LD_VAR 0 1
28080: PUSH
28081: LD_EXP 61
28085: IN
28086: IFFALSE 28104
// ruAttackers := ruAttackers diff un ;
28088: LD_ADDR_EXP 61
28092: PUSH
28093: LD_EXP 61
28097: PUSH
28098: LD_VAR 0 1
28102: DIFF
28103: ST_TO_ADDR
// end ;
28104: PPOPN 1
28106: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
28107: LD_VAR 0 2
28111: PPUSH
28112: CALL_OW 255
28116: PUSH
28117: LD_INT 5
28119: PUSH
28120: LD_INT 8
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: IN
28127: IFFALSE 28144
28129: PUSH
28130: LD_VAR 0 2
28134: PPUSH
28135: CALL_OW 256
28139: PUSH
28140: LD_INT 1000
28142: LESS
28143: AND
28144: IFFALSE 28158
// SetLives ( unit , 1000 ) ;
28146: LD_VAR 0 2
28150: PPUSH
28151: LD_INT 1000
28153: PPUSH
28154: CALL_OW 234
// end ;
28158: PPOPN 2
28160: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
28161: LD_INT 0
28163: PPUSH
28164: PPUSH
28165: PPUSH
28166: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
28167: LD_VAR 0 2
28171: PPUSH
28172: CALL_OW 255
28176: PUSH
28177: LD_INT 8
28179: EQUAL
28180: IFFALSE 28188
28182: PUSH
28183: LD_EXP 32
28187: AND
28188: IFFALSE 28205
// ComMoveXY ( un , 221 , 161 ) ;
28190: LD_VAR 0 1
28194: PPUSH
28195: LD_INT 221
28197: PPUSH
28198: LD_INT 161
28200: PPUSH
28201: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
28205: LD_VAR 0 2
28209: PPUSH
28210: CALL_OW 255
28214: PUSH
28215: LD_INT 5
28217: EQUAL
28218: IFFALSE 28226
28220: PUSH
28221: LD_EXP 23
28225: AND
28226: IFFALSE 28337
// begin ComMoveXY ( un , 333 , 233 ) ;
28228: LD_VAR 0 1
28232: PPUSH
28233: LD_INT 333
28235: PPUSH
28236: LD_INT 233
28238: PPUSH
28239: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
28243: LD_INT 334
28245: PPUSH
28246: LD_INT 241
28248: PPUSH
28249: CALL_OW 428
28253: NOT
28254: IFTRUE 28278
28256: PUSH
28257: LD_INT 334
28259: PPUSH
28260: LD_INT 241
28262: PPUSH
28263: CALL_OW 428
28267: PPUSH
28268: CALL_OW 266
28272: PUSH
28273: LD_INT 4
28275: EQUAL
28276: NOT
28277: OR
28278: IFFALSE 28282
// exit ;
28280: GO 28966
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
28282: LD_VAR 0 1
28286: PPUSH
28287: LD_INT 334
28289: PPUSH
28290: LD_INT 241
28292: PPUSH
28293: CALL_OW 428
28297: PPUSH
28298: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
28302: LD_VAR 0 1
28306: PPUSH
28307: LD_INT 1
28309: PPUSH
28310: CALL_OW 183
// AddComExitBuilding ( un ) ;
28314: LD_VAR 0 1
28318: PPUSH
28319: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
28323: LD_VAR 0 1
28327: PPUSH
28328: LD_EXP 44
28332: PPUSH
28333: CALL_OW 172
// end ; if GetSide ( un ) = 3 then
28337: LD_VAR 0 1
28341: PPUSH
28342: CALL_OW 255
28346: PUSH
28347: LD_INT 3
28349: EQUAL
28350: IFFALSE 28966
// begin if not un in ruAttackers then
28352: LD_VAR 0 1
28356: PUSH
28357: LD_EXP 61
28361: IN
28362: NOT
28363: IFFALSE 28866
// begin if not IsInArea ( un , ruMainBase ) then
28365: LD_VAR 0 1
28369: PPUSH
28370: LD_INT 10
28372: PPUSH
28373: CALL_OW 308
28377: NOT
28378: IFFALSE 28395
// ComMoveXY ( un , 62 , 98 ) ;
28380: LD_VAR 0 1
28384: PPUSH
28385: LD_INT 62
28387: PPUSH
28388: LD_INT 98
28390: PPUSH
28391: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28395: LD_INT 35
28397: PPUSH
28398: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28402: LD_VAR 0 1
28406: PPUSH
28407: CALL_OW 302
28411: NOT
28412: IFTRUE 28428
28414: PUSH
28415: LD_VAR 0 1
28419: PPUSH
28420: LD_INT 10
28422: PPUSH
28423: CALL_OW 308
28427: OR
28428: IFFALSE 28395
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28430: LD_ADDR_EXP 59
28434: PUSH
28435: LD_EXP 59
28439: PPUSH
28440: LD_EXP 59
28444: PUSH
28445: LD_INT 1
28447: PLUS
28448: PPUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL_OW 1
28458: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
28459: LD_ADDR_VAR 0 8
28463: PUSH
28464: LD_INT 72
28466: PUSH
28467: LD_INT 12
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: ST_TO_ADDR
// if tmp then
28474: LD_VAR 0 8
28478: IFFALSE 28593
// for i in tmp do
28480: LD_ADDR_VAR 0 5
28484: PUSH
28485: LD_VAR 0 8
28489: PUSH
28490: FOR_IN
28491: IFFALSE 28591
// if UnitsInside ( i ) < 6 then
28493: LD_VAR 0 5
28497: PPUSH
28498: CALL_OW 313
28502: PUSH
28503: LD_INT 6
28505: LESS
28506: IFFALSE 28589
// begin AddComEnterUnit ( un , i ) ;
28508: LD_VAR 0 1
28512: PPUSH
28513: LD_VAR 0 5
28517: PPUSH
28518: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
28522: LD_VAR 0 8
28526: PPUSH
28527: LD_INT 22
28529: PUSH
28530: LD_INT 23
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 1
28539: PPUSH
28540: LD_INT 2
28542: PPUSH
28543: CALL_OW 12
28547: ARRAY
28548: PPUSH
28549: LD_INT 1
28551: PPUSH
28552: LD_INT 1
28554: PPUSH
28555: LD_INT 44
28557: PUSH
28558: LD_INT 46
28560: PUSH
28561: LD_INT 47
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 1
28571: PPUSH
28572: LD_INT 3
28574: PPUSH
28575: CALL_OW 12
28579: ARRAY
28580: PPUSH
28581: CALL_OW 185
// exit ;
28585: POP
28586: POP
28587: GO 28966
// end ;
28589: GO 28490
28591: POP
28592: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28593: LD_ADDR_VAR 0 8
28597: PUSH
28598: LD_INT 10
28600: PPUSH
28601: LD_INT 22
28603: PUSH
28604: LD_INT 3
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 50
28613: PUSH
28614: EMPTY
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: LD_INT 30
28622: PUSH
28623: LD_INT 4
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 30
28632: PUSH
28633: LD_INT 5
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 30
28642: PUSH
28643: LD_INT 32
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 30
28652: PUSH
28653: LD_INT 31
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: PPUSH
28672: CALL_OW 70
28676: ST_TO_ADDR
// if not tmp then
28677: LD_VAR 0 8
28681: NOT
28682: IFFALSE 28701
// begin ComMoveXY ( un , 83 , 133 ) ;
28684: LD_VAR 0 1
28688: PPUSH
28689: LD_INT 83
28691: PPUSH
28692: LD_INT 133
28694: PPUSH
28695: CALL_OW 111
// exit ;
28699: GO 28966
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28701: LD_ADDR_VAR 0 6
28705: PUSH
28706: LD_VAR 0 1
28710: PPUSH
28711: LD_VAR 0 8
28715: PPUSH
28716: LD_INT 1
28718: PPUSH
28719: LD_INT 1
28721: PPUSH
28722: CALL 35868 0 4
28726: PUSH
28727: FOR_IN
28728: IFFALSE 28862
// begin case GetBType ( b ) of b_armoury , b_barracks :
28730: LD_VAR 0 6
28734: PPUSH
28735: CALL_OW 266
28739: PUSH
28740: LD_INT 4
28742: DOUBLE
28743: EQUAL
28744: IFTRUE 28754
28746: LD_INT 5
28748: DOUBLE
28749: EQUAL
28750: IFTRUE 28754
28752: GO 28765
28754: POP
// p := 6 ; b_breastwork , b_bunker :
28755: LD_ADDR_VAR 0 7
28759: PUSH
28760: LD_INT 6
28762: ST_TO_ADDR
28763: GO 28791
28765: LD_INT 31
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28779
28771: LD_INT 32
28773: DOUBLE
28774: EQUAL
28775: IFTRUE 28779
28777: GO 28790
28779: POP
// p := 1 ; end ;
28780: LD_ADDR_VAR 0 7
28784: PUSH
28785: LD_INT 1
28787: ST_TO_ADDR
28788: GO 28791
28790: POP
// if UnitsInside ( b ) < p then
28791: LD_VAR 0 6
28795: PPUSH
28796: CALL_OW 313
28800: PUSH
28801: LD_VAR 0 7
28805: LESS
28806: IFFALSE 28860
// begin ComEnterUnit ( un , b ) ;
28808: LD_VAR 0 1
28812: PPUSH
28813: LD_VAR 0 6
28817: PPUSH
28818: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28822: LD_VAR 0 6
28826: PPUSH
28827: CALL_OW 266
28831: PUSH
28832: LD_INT 4
28834: PUSH
28835: LD_INT 5
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: IN
28842: IFFALSE 28856
// AddComChangeProfession ( un , class_soldier ) ;
28844: LD_VAR 0 1
28848: PPUSH
28849: LD_INT 1
28851: PPUSH
28852: CALL_OW 183
// exit ;
28856: POP
28857: POP
28858: GO 28966
// end ; end ;
28860: GO 28727
28862: POP
28863: POP
// end else
28864: GO 28966
// begin if GetDistUnitXY ( un , 160 , 2 ) < 40 then
28866: LD_VAR 0 1
28870: PPUSH
28871: LD_INT 160
28873: PPUSH
28874: LD_INT 2
28876: PPUSH
28877: CALL_OW 297
28881: PUSH
28882: LD_INT 40
28884: LESS
28885: IFFALSE 28966
// begin repeat ComMoveXY ( un , 160 , 2 ) ;
28887: LD_VAR 0 1
28891: PPUSH
28892: LD_INT 160
28894: PPUSH
28895: LD_INT 2
28897: PPUSH
28898: CALL_OW 111
// wait ( 0 0$1 ) ;
28902: LD_INT 35
28904: PPUSH
28905: CALL_OW 67
// until IsAt ( un , 160 , 2 ) or not IsOk ( un ) ;
28909: LD_VAR 0 1
28913: PPUSH
28914: LD_INT 160
28916: PPUSH
28917: LD_INT 2
28919: PPUSH
28920: CALL_OW 307
28924: IFTRUE 28938
28926: PUSH
28927: LD_VAR 0 1
28931: PPUSH
28932: CALL_OW 302
28936: NOT
28937: OR
28938: IFFALSE 28887
// if IsAt ( un , 160 , 2 ) then
28940: LD_VAR 0 1
28944: PPUSH
28945: LD_INT 160
28947: PPUSH
28948: LD_INT 2
28950: PPUSH
28951: CALL_OW 307
28955: IFFALSE 28966
// RemoveUnit ( un ) ;
28957: LD_VAR 0 1
28961: PPUSH
28962: CALL_OW 64
// end ; end ; end ; end ;
28966: PPOPN 8
28968: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28969: LD_INT 0
28971: PPUSH
28972: PPUSH
28973: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28974: LD_VAR 0 2
28978: PPUSH
28979: CALL_OW 255
28983: PUSH
28984: LD_INT 3
28986: EQUAL
28987: IFFALSE 29004
28989: PUSH
28990: LD_VAR 0 2
28994: PPUSH
28995: CALL_OW 257
28999: PUSH
29000: LD_INT 1
29002: EQUAL
29003: AND
29004: IFFALSE 29019
29006: PUSH
29007: LD_VAR 0 2
29011: PUSH
29012: LD_EXP 59
29016: IN
29017: NOT
29018: AND
29019: IFFALSE 29334
// begin ComMoveToArea ( un , ruMainBase ) ;
29021: LD_VAR 0 2
29025: PPUSH
29026: LD_INT 10
29028: PPUSH
29029: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
29033: LD_INT 35
29035: PPUSH
29036: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
29040: LD_VAR 0 2
29044: PPUSH
29045: CALL_OW 302
29049: NOT
29050: IFTRUE 29066
29052: PUSH
29053: LD_VAR 0 2
29057: PPUSH
29058: LD_INT 10
29060: PPUSH
29061: CALL_OW 308
29065: OR
29066: IFFALSE 29033
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
29068: LD_ADDR_EXP 59
29072: PUSH
29073: LD_EXP 59
29077: PPUSH
29078: LD_EXP 59
29082: PUSH
29083: LD_INT 1
29085: PLUS
29086: PPUSH
29087: LD_VAR 0 2
29091: PPUSH
29092: CALL_OW 1
29096: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
29097: LD_ADDR_VAR 0 4
29101: PUSH
29102: LD_INT 10
29104: PPUSH
29105: LD_INT 22
29107: PUSH
29108: LD_INT 3
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 50
29117: PUSH
29118: EMPTY
29119: LIST
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: LD_INT 30
29126: PUSH
29127: LD_INT 4
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 30
29136: PUSH
29137: LD_INT 5
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 30
29146: PUSH
29147: LD_INT 32
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 30
29156: PUSH
29157: LD_INT 31
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: PPUSH
29176: CALL_OW 70
29180: ST_TO_ADDR
// if not tmp then
29181: LD_VAR 0 4
29185: NOT
29186: IFFALSE 29205
// begin ComMoveXY ( un , 83 , 133 ) ;
29188: LD_VAR 0 2
29192: PPUSH
29193: LD_INT 83
29195: PPUSH
29196: LD_INT 133
29198: PPUSH
29199: CALL_OW 111
// exit ;
29203: GO 29585
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
29205: LD_ADDR_VAR 0 5
29209: PUSH
29210: LD_VAR 0 2
29214: PPUSH
29215: LD_VAR 0 4
29219: PPUSH
29220: LD_INT 1
29222: PPUSH
29223: LD_INT 1
29225: PPUSH
29226: CALL 35868 0 4
29230: PUSH
29231: FOR_IN
29232: IFFALSE 29332
// begin case GetBType ( b ) of b_armoury , b_barracks :
29234: LD_VAR 0 5
29238: PPUSH
29239: CALL_OW 266
29243: PUSH
29244: LD_INT 4
29246: DOUBLE
29247: EQUAL
29248: IFTRUE 29258
29250: LD_INT 5
29252: DOUBLE
29253: EQUAL
29254: IFTRUE 29258
29256: GO 29269
29258: POP
// p := 6 ; b_breastwork , b_bunker :
29259: LD_ADDR_VAR 0 3
29263: PUSH
29264: LD_INT 6
29266: ST_TO_ADDR
29267: GO 29295
29269: LD_INT 31
29271: DOUBLE
29272: EQUAL
29273: IFTRUE 29283
29275: LD_INT 32
29277: DOUBLE
29278: EQUAL
29279: IFTRUE 29283
29281: GO 29294
29283: POP
// p := 1 ; end ;
29284: LD_ADDR_VAR 0 3
29288: PUSH
29289: LD_INT 1
29291: ST_TO_ADDR
29292: GO 29295
29294: POP
// if UnitsInside ( b ) < p then
29295: LD_VAR 0 5
29299: PPUSH
29300: CALL_OW 313
29304: PUSH
29305: LD_VAR 0 3
29309: LESS
29310: IFFALSE 29330
// begin ComEnterUnit ( un , b ) ;
29312: LD_VAR 0 2
29316: PPUSH
29317: LD_VAR 0 5
29321: PPUSH
29322: CALL_OW 120
// exit ;
29326: POP
29327: POP
29328: GO 29585
// end ; end ;
29330: GO 29231
29332: POP
29333: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
29334: LD_VAR 0 2
29338: PUSH
29339: LD_EXP 59
29343: IN
29344: IFFALSE 29361
29346: PUSH
29347: LD_VAR 0 2
29351: PPUSH
29352: CALL_OW 257
29356: PUSH
29357: LD_INT 1
29359: EQUAL
29360: AND
29361: IFFALSE 29585
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
29363: LD_ADDR_VAR 0 4
29367: PUSH
29368: LD_INT 10
29370: PPUSH
29371: LD_INT 22
29373: PUSH
29374: LD_INT 3
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 50
29383: PUSH
29384: EMPTY
29385: LIST
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: LD_INT 30
29392: PUSH
29393: LD_INT 4
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 30
29402: PUSH
29403: LD_INT 5
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 30
29412: PUSH
29413: LD_INT 32
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 30
29422: PUSH
29423: LD_INT 31
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: PPUSH
29442: CALL_OW 70
29446: ST_TO_ADDR
// if not tmp then
29447: LD_VAR 0 4
29451: NOT
29452: IFFALSE 29456
// exit ;
29454: GO 29585
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
29456: LD_ADDR_VAR 0 5
29460: PUSH
29461: LD_VAR 0 2
29465: PPUSH
29466: LD_VAR 0 4
29470: PPUSH
29471: LD_INT 1
29473: PPUSH
29474: LD_INT 1
29476: PPUSH
29477: CALL 35868 0 4
29481: PUSH
29482: FOR_IN
29483: IFFALSE 29583
// begin case GetBType ( b ) of b_armoury , b_barracks :
29485: LD_VAR 0 5
29489: PPUSH
29490: CALL_OW 266
29494: PUSH
29495: LD_INT 4
29497: DOUBLE
29498: EQUAL
29499: IFTRUE 29509
29501: LD_INT 5
29503: DOUBLE
29504: EQUAL
29505: IFTRUE 29509
29507: GO 29520
29509: POP
// p := 6 ; b_breastwork , b_bunker :
29510: LD_ADDR_VAR 0 3
29514: PUSH
29515: LD_INT 6
29517: ST_TO_ADDR
29518: GO 29546
29520: LD_INT 31
29522: DOUBLE
29523: EQUAL
29524: IFTRUE 29534
29526: LD_INT 32
29528: DOUBLE
29529: EQUAL
29530: IFTRUE 29534
29532: GO 29545
29534: POP
// p := 1 ; end ;
29535: LD_ADDR_VAR 0 3
29539: PUSH
29540: LD_INT 1
29542: ST_TO_ADDR
29543: GO 29546
29545: POP
// if UnitsInside ( b ) < p then
29546: LD_VAR 0 5
29550: PPUSH
29551: CALL_OW 313
29555: PUSH
29556: LD_VAR 0 3
29560: LESS
29561: IFFALSE 29581
// begin ComEnterUnit ( un , b ) ;
29563: LD_VAR 0 2
29567: PPUSH
29568: LD_VAR 0 5
29572: PPUSH
29573: CALL_OW 120
// exit ;
29577: POP
29578: POP
29579: GO 29585
// end ; end ;
29581: GO 29482
29583: POP
29584: POP
// end ; end ;
29585: PPOPN 5
29587: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
29588: LD_VAR 0 1
29592: PUSH
29593: LD_INT 2
29595: EQUAL
29596: IFFALSE 29615
29598: PUSH
29599: LD_VAR 0 2
29603: PUSH
29604: LD_INT 5
29606: PUSH
29607: LD_INT 8
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: IN
29614: AND
29615: IFFALSE 29624
// YouLost ( FriendlyFire ) ;
29617: LD_STRING FriendlyFire
29619: PPUSH
29620: CALL_OW 104
// end ;
29624: PPOPN 2
29626: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
29627: LD_VAR 0 1
29631: PPUSH
29632: CALL_OW 255
29636: PUSH
29637: LD_INT 8
29639: EQUAL
29640: IFFALSE 29657
29642: PUSH
29643: LD_VAR 0 1
29647: PPUSH
29648: CALL_OW 266
29652: PUSH
29653: LD_INT 5
29655: EQUAL
29656: AND
29657: IFFALSE 29671
// SetClass ( unit , class_mortar ) ;
29659: LD_VAR 0 2
29663: PPUSH
29664: LD_INT 8
29666: PPUSH
29667: CALL_OW 336
// end ;
29671: PPOPN 2
29673: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
29674: LD_VAR 0 1
29678: PPUSH
29679: LD_VAR 0 2
29683: PPUSH
29684: LD_VAR 0 3
29688: PPUSH
29689: LD_VAR 0 4
29693: PPUSH
29694: LD_VAR 0 5
29698: PPUSH
29699: LD_VAR 0 6
29703: PPUSH
29704: CALL 74024 0 6
// end ;
29708: PPOPN 6
29710: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
29711: LD_INT 0
29713: PPUSH
// begin if not units then
29714: LD_VAR 0 1
29718: NOT
29719: IFFALSE 29723
// exit ;
29721: GO 29757
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
29723: LD_VAR 0 1
29727: PPUSH
29728: LD_VAR 0 2
29732: PPUSH
29733: LD_VAR 0 3
29737: PPUSH
29738: LD_VAR 0 4
29742: PPUSH
29743: LD_VAR 0 5
29747: PPUSH
29748: LD_VAR 0 6
29752: PPUSH
29753: CALL 96541 0 6
// end ;
29757: PPOPN 7
29759: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
29760: CALL 73904 0 0
// MarkRolfSquad ;
29764: CALL 11147 0 0
// end ; end_of_file
29768: PPOPN 1
29770: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
29771: LD_INT 6
29773: PPUSH
29774: LD_INT 1
29776: PPUSH
29777: CALL_OW 287
29781: PUSH
29782: LD_INT 20
29784: PUSH
29785: LD_INT 18
29787: PUSH
29788: LD_INT 16
29790: PUSH
29791: LD_INT 12
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: PUSH
29800: LD_OWVAR 67
29804: ARRAY
29805: LESS
29806: IFFALSE 29833
29808: GO 29810
29810: DISABLE
// begin enable ;
29811: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
29812: LD_INT 1
29814: PPUSH
29815: LD_INT 5
29817: PPUSH
29818: CALL_OW 12
29822: PPUSH
29823: LD_INT 6
29825: PPUSH
29826: LD_INT 1
29828: PPUSH
29829: CALL_OW 55
// end ;
29833: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
29834: LD_INT 50
29836: PPUSH
29837: CALL_OW 13
29841: IFFALSE 29874
29843: PUSH
29844: LD_OWVAR 1
29848: PUSH
29849: LD_INT 58800
29851: PUSH
29852: LD_INT 56700
29854: PUSH
29855: LD_INT 54600
29857: PUSH
29858: LD_INT 52500
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: PUSH
29867: LD_OWVAR 67
29871: ARRAY
29872: LESS
29873: AND
29874: IFFALSE 29892
29876: PUSH
29877: LD_INT 21
29879: PPUSH
29880: LD_INT 1
29882: PPUSH
29883: CALL_OW 287
29887: PUSH
29888: LD_INT 10
29890: LESS
29891: AND
29892: IFFALSE 29934
29894: GO 29896
29896: DISABLE
// begin enable ;
29897: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29898: LD_INT 35
29900: PPUSH
29901: LD_INT 350
29903: PPUSH
29904: CALL_OW 12
29908: PPUSH
29909: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29913: LD_INT 1
29915: PPUSH
29916: LD_INT 5
29918: PPUSH
29919: CALL_OW 12
29923: PPUSH
29924: LD_INT 21
29926: PPUSH
29927: LD_INT 1
29929: PPUSH
29930: CALL_OW 55
// end ; end_of_file
29934: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29935: LD_EXP 18
29939: IFFALSE 29947
29941: PUSH
29942: LD_EXP 20
29946: AND
29947: IFTRUE 29963
29949: PUSH
29950: LD_EXP 17
29954: IFFALSE 29962
29956: PUSH
29957: LD_EXP 19
29961: AND
29962: OR
29963: IFFALSE 30290
29965: GO 29967
29967: DISABLE
// begin enable ;
29968: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29969: LD_EXP 18
29973: IFFALSE 29981
29975: PUSH
29976: LD_EXP 20
29980: AND
29981: IFFALSE 29997
29983: PUSH
29984: LD_EXP 17
29988: IFFALSE 29996
29990: PUSH
29991: LD_EXP 19
29995: AND
29996: AND
29997: IFFALSE 30134
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29999: LD_ADDR_OWVAR 47
30003: PUSH
30004: LD_STRING #X106-1a
30006: PUSH
30007: LD_EXP 21
30011: PUSH
30012: LD_INT 16
30014: PPUSH
30015: LD_INT 22
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 21
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 33
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 58
30047: PUSH
30048: EMPTY
30049: LIST
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: PPUSH
30057: CALL_OW 70
30061: MINUS
30062: PPUSH
30063: CALL 70703 0 1
30067: PUSH
30068: LD_STRING #X106-3a
30070: PUSH
30071: LD_EXP 20
30075: PUSH
30076: LD_STRING #X106-1
30078: PUSH
30079: LD_EXP 51
30083: PUSH
30084: LD_INT 0
30086: PLUS
30087: PUSH
30088: LD_EXP 51
30092: PPUSH
30093: LD_INT 55
30095: PUSH
30096: EMPTY
30097: LIST
30098: PPUSH
30099: CALL_OW 72
30103: PUSH
30104: LD_INT 0
30106: PLUS
30107: MINUS
30108: PPUSH
30109: CALL 70703 0 1
30113: PUSH
30114: LD_STRING #X106-3
30116: PUSH
30117: LD_EXP 19
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: ST_TO_ADDR
// end else
30132: GO 30290
// if omarWantVehicles and omarWaitingForVehiclesTimer then
30134: LD_EXP 18
30138: IFFALSE 30146
30140: PUSH
30141: LD_EXP 20
30145: AND
30146: IFFALSE 30233
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
30148: LD_ADDR_OWVAR 47
30152: PUSH
30153: LD_STRING #X106-1a
30155: PUSH
30156: LD_EXP 21
30160: PUSH
30161: LD_INT 16
30163: PPUSH
30164: LD_INT 22
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 21
30176: PUSH
30177: LD_INT 2
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 33
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 58
30196: PUSH
30197: EMPTY
30198: LIST
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: PPUSH
30206: CALL_OW 70
30210: MINUS
30211: PPUSH
30212: CALL 70703 0 1
30216: PUSH
30217: LD_STRING #X106-3a
30219: PUSH
30220: LD_EXP 20
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
// end else
30231: GO 30290
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
30233: LD_ADDR_OWVAR 47
30237: PUSH
30238: LD_STRING #X106-1
30240: PUSH
30241: LD_EXP 51
30245: PUSH
30246: LD_INT 0
30248: PLUS
30249: PUSH
30250: LD_EXP 51
30254: PPUSH
30255: LD_INT 55
30257: PUSH
30258: EMPTY
30259: LIST
30260: PPUSH
30261: CALL_OW 72
30265: PUSH
30266: LD_INT 0
30268: PLUS
30269: MINUS
30270: PPUSH
30271: CALL 70703 0 1
30275: PUSH
30276: LD_STRING #X106-3
30278: PUSH
30279: LD_EXP 19
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: ST_TO_ADDR
// end ; end ; end_of_file
30290: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30291: LD_INT 0
30293: PPUSH
30294: PPUSH
// if exist_mode then
30295: LD_VAR 0 2
30299: IFFALSE 30345
// begin unit := CreateCharacter ( prefix & ident ) ;
30301: LD_ADDR_VAR 0 5
30305: PUSH
30306: LD_VAR 0 3
30310: PUSH
30311: LD_VAR 0 1
30315: STR
30316: PPUSH
30317: CALL_OW 34
30321: ST_TO_ADDR
// if unit then
30322: LD_VAR 0 5
30326: IFFALSE 30343
// DeleteCharacters ( prefix & ident ) ;
30328: LD_VAR 0 3
30332: PUSH
30333: LD_VAR 0 1
30337: STR
30338: PPUSH
30339: CALL_OW 40
// end else
30343: GO 30360
// unit := NewCharacter ( ident ) ;
30345: LD_ADDR_VAR 0 5
30349: PUSH
30350: LD_VAR 0 1
30354: PPUSH
30355: CALL_OW 25
30359: ST_TO_ADDR
// result := unit ;
30360: LD_ADDR_VAR 0 4
30364: PUSH
30365: LD_VAR 0 5
30369: ST_TO_ADDR
// end ;
30370: LD_VAR 0 4
30374: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30375: LD_INT 0
30377: PPUSH
30378: PPUSH
// if exist_mode then
30379: LD_VAR 0 2
30383: IFFALSE 30408
// unit := CreateCharacter ( prefix & ident ) else
30385: LD_ADDR_VAR 0 5
30389: PUSH
30390: LD_VAR 0 3
30394: PUSH
30395: LD_VAR 0 1
30399: STR
30400: PPUSH
30401: CALL_OW 34
30405: ST_TO_ADDR
30406: GO 30423
// unit := NewCharacter ( ident ) ;
30408: LD_ADDR_VAR 0 5
30412: PUSH
30413: LD_VAR 0 1
30417: PPUSH
30418: CALL_OW 25
30422: ST_TO_ADDR
// result := unit ;
30423: LD_ADDR_VAR 0 4
30427: PUSH
30428: LD_VAR 0 5
30432: ST_TO_ADDR
// end ;
30433: LD_VAR 0 4
30437: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30438: LD_INT 0
30440: PPUSH
30441: PPUSH
// if not side or not nation then
30442: LD_VAR 0 1
30446: NOT
30447: IFTRUE 30456
30449: PUSH
30450: LD_VAR 0 2
30454: NOT
30455: OR
30456: IFFALSE 30460
// exit ;
30458: GO 31254
// case nation of nation_american :
30460: LD_VAR 0 2
30464: PUSH
30465: LD_INT 1
30467: DOUBLE
30468: EQUAL
30469: IFTRUE 30473
30471: GO 30695
30473: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30474: LD_ADDR_VAR 0 4
30478: PUSH
30479: LD_INT 35
30481: PUSH
30482: LD_INT 45
30484: PUSH
30485: LD_INT 46
30487: PUSH
30488: LD_INT 47
30490: PUSH
30491: LD_INT 82
30493: PUSH
30494: LD_INT 83
30496: PUSH
30497: LD_INT 84
30499: PUSH
30500: LD_INT 85
30502: PUSH
30503: LD_INT 86
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 6
30514: PUSH
30515: LD_INT 15
30517: PUSH
30518: LD_INT 16
30520: PUSH
30521: LD_INT 7
30523: PUSH
30524: LD_INT 12
30526: PUSH
30527: LD_INT 13
30529: PUSH
30530: LD_INT 10
30532: PUSH
30533: LD_INT 14
30535: PUSH
30536: LD_INT 20
30538: PUSH
30539: LD_INT 21
30541: PUSH
30542: LD_INT 22
30544: PUSH
30545: LD_INT 25
30547: PUSH
30548: LD_INT 32
30550: PUSH
30551: LD_INT 27
30553: PUSH
30554: LD_INT 36
30556: PUSH
30557: LD_INT 69
30559: PUSH
30560: LD_INT 39
30562: PUSH
30563: LD_INT 34
30565: PUSH
30566: LD_INT 40
30568: PUSH
30569: LD_INT 48
30571: PUSH
30572: LD_INT 49
30574: PUSH
30575: LD_INT 50
30577: PUSH
30578: LD_INT 51
30580: PUSH
30581: LD_INT 52
30583: PUSH
30584: LD_INT 53
30586: PUSH
30587: LD_INT 54
30589: PUSH
30590: LD_INT 55
30592: PUSH
30593: LD_INT 56
30595: PUSH
30596: LD_INT 57
30598: PUSH
30599: LD_INT 58
30601: PUSH
30602: LD_INT 59
30604: PUSH
30605: LD_INT 60
30607: PUSH
30608: LD_INT 61
30610: PUSH
30611: LD_INT 62
30613: PUSH
30614: LD_INT 80
30616: PUSH
30617: LD_INT 82
30619: PUSH
30620: LD_INT 83
30622: PUSH
30623: LD_INT 84
30625: PUSH
30626: LD_INT 85
30628: PUSH
30629: LD_INT 86
30631: PUSH
30632: LD_INT 90
30634: PUSH
30635: LD_INT 93
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: ST_TO_ADDR
30693: GO 31176
30695: LD_INT 2
30697: DOUBLE
30698: EQUAL
30699: IFTRUE 30703
30701: GO 30937
30703: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30704: LD_ADDR_VAR 0 4
30708: PUSH
30709: LD_INT 35
30711: PUSH
30712: LD_INT 45
30714: PUSH
30715: LD_INT 46
30717: PUSH
30718: LD_INT 47
30720: PUSH
30721: LD_INT 82
30723: PUSH
30724: LD_INT 83
30726: PUSH
30727: LD_INT 84
30729: PUSH
30730: LD_INT 85
30732: PUSH
30733: LD_INT 87
30735: PUSH
30736: LD_INT 70
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 11
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: LD_INT 4
30750: PUSH
30751: LD_INT 5
30753: PUSH
30754: LD_INT 6
30756: PUSH
30757: LD_INT 15
30759: PUSH
30760: LD_INT 18
30762: PUSH
30763: LD_INT 7
30765: PUSH
30766: LD_INT 17
30768: PUSH
30769: LD_INT 8
30771: PUSH
30772: LD_INT 20
30774: PUSH
30775: LD_INT 21
30777: PUSH
30778: LD_INT 22
30780: PUSH
30781: LD_INT 72
30783: PUSH
30784: LD_INT 26
30786: PUSH
30787: LD_INT 69
30789: PUSH
30790: LD_INT 39
30792: PUSH
30793: LD_INT 40
30795: PUSH
30796: LD_INT 41
30798: PUSH
30799: LD_INT 42
30801: PUSH
30802: LD_INT 43
30804: PUSH
30805: LD_INT 48
30807: PUSH
30808: LD_INT 49
30810: PUSH
30811: LD_INT 50
30813: PUSH
30814: LD_INT 51
30816: PUSH
30817: LD_INT 52
30819: PUSH
30820: LD_INT 53
30822: PUSH
30823: LD_INT 54
30825: PUSH
30826: LD_INT 55
30828: PUSH
30829: LD_INT 56
30831: PUSH
30832: LD_INT 60
30834: PUSH
30835: LD_INT 61
30837: PUSH
30838: LD_INT 62
30840: PUSH
30841: LD_INT 66
30843: PUSH
30844: LD_INT 67
30846: PUSH
30847: LD_INT 68
30849: PUSH
30850: LD_INT 81
30852: PUSH
30853: LD_INT 82
30855: PUSH
30856: LD_INT 83
30858: PUSH
30859: LD_INT 84
30861: PUSH
30862: LD_INT 85
30864: PUSH
30865: LD_INT 87
30867: PUSH
30868: LD_INT 88
30870: PUSH
30871: LD_INT 92
30873: PUSH
30874: LD_INT 94
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: ST_TO_ADDR
30935: GO 31176
30937: LD_INT 3
30939: DOUBLE
30940: EQUAL
30941: IFTRUE 30945
30943: GO 31175
30945: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30946: LD_ADDR_VAR 0 4
30950: PUSH
30951: LD_INT 46
30953: PUSH
30954: LD_INT 47
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: LD_INT 82
30965: PUSH
30966: LD_INT 83
30968: PUSH
30969: LD_INT 84
30971: PUSH
30972: LD_INT 85
30974: PUSH
30975: LD_INT 86
30977: PUSH
30978: LD_INT 11
30980: PUSH
30981: LD_INT 9
30983: PUSH
30984: LD_INT 20
30986: PUSH
30987: LD_INT 19
30989: PUSH
30990: LD_INT 21
30992: PUSH
30993: LD_INT 24
30995: PUSH
30996: LD_INT 22
30998: PUSH
30999: LD_INT 25
31001: PUSH
31002: LD_INT 28
31004: PUSH
31005: LD_INT 29
31007: PUSH
31008: LD_INT 30
31010: PUSH
31011: LD_INT 31
31013: PUSH
31014: LD_INT 37
31016: PUSH
31017: LD_INT 38
31019: PUSH
31020: LD_INT 32
31022: PUSH
31023: LD_INT 27
31025: PUSH
31026: LD_INT 33
31028: PUSH
31029: LD_INT 69
31031: PUSH
31032: LD_INT 39
31034: PUSH
31035: LD_INT 34
31037: PUSH
31038: LD_INT 40
31040: PUSH
31041: LD_INT 71
31043: PUSH
31044: LD_INT 23
31046: PUSH
31047: LD_INT 44
31049: PUSH
31050: LD_INT 48
31052: PUSH
31053: LD_INT 49
31055: PUSH
31056: LD_INT 50
31058: PUSH
31059: LD_INT 51
31061: PUSH
31062: LD_INT 52
31064: PUSH
31065: LD_INT 53
31067: PUSH
31068: LD_INT 54
31070: PUSH
31071: LD_INT 55
31073: PUSH
31074: LD_INT 56
31076: PUSH
31077: LD_INT 57
31079: PUSH
31080: LD_INT 58
31082: PUSH
31083: LD_INT 59
31085: PUSH
31086: LD_INT 63
31088: PUSH
31089: LD_INT 64
31091: PUSH
31092: LD_INT 65
31094: PUSH
31095: LD_INT 82
31097: PUSH
31098: LD_INT 83
31100: PUSH
31101: LD_INT 84
31103: PUSH
31104: LD_INT 85
31106: PUSH
31107: LD_INT 86
31109: PUSH
31110: LD_INT 89
31112: PUSH
31113: LD_INT 91
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: ST_TO_ADDR
31173: GO 31176
31175: POP
// if state > - 1 and state < 3 then
31176: LD_VAR 0 3
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: GREATER
31185: IFFALSE 31197
31187: PUSH
31188: LD_VAR 0 3
31192: PUSH
31193: LD_INT 3
31195: LESS
31196: AND
31197: IFFALSE 31254
// for i in result do
31199: LD_ADDR_VAR 0 5
31203: PUSH
31204: LD_VAR 0 4
31208: PUSH
31209: FOR_IN
31210: IFFALSE 31252
// if GetTech ( i , side ) <> state then
31212: LD_VAR 0 5
31216: PPUSH
31217: LD_VAR 0 1
31221: PPUSH
31222: CALL_OW 321
31226: PUSH
31227: LD_VAR 0 3
31231: NONEQUAL
31232: IFFALSE 31250
// result := result diff i ;
31234: LD_ADDR_VAR 0 4
31238: PUSH
31239: LD_VAR 0 4
31243: PUSH
31244: LD_VAR 0 5
31248: DIFF
31249: ST_TO_ADDR
31250: GO 31209
31252: POP
31253: POP
// end ;
31254: LD_VAR 0 4
31258: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31259: LD_INT 0
31261: PPUSH
31262: PPUSH
31263: PPUSH
// result := true ;
31264: LD_ADDR_VAR 0 3
31268: PUSH
31269: LD_INT 1
31271: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31272: LD_ADDR_VAR 0 5
31276: PUSH
31277: LD_VAR 0 2
31281: PPUSH
31282: CALL_OW 480
31286: ST_TO_ADDR
// if not tmp then
31287: LD_VAR 0 5
31291: NOT
31292: IFFALSE 31296
// exit ;
31294: GO 31345
// for i in tmp do
31296: LD_ADDR_VAR 0 4
31300: PUSH
31301: LD_VAR 0 5
31305: PUSH
31306: FOR_IN
31307: IFFALSE 31343
// if GetTech ( i , side ) <> state_researched then
31309: LD_VAR 0 4
31313: PPUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL_OW 321
31323: PUSH
31324: LD_INT 2
31326: NONEQUAL
31327: IFFALSE 31341
// begin result := false ;
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_INT 0
31336: ST_TO_ADDR
// exit ;
31337: POP
31338: POP
31339: GO 31345
// end ;
31341: GO 31306
31343: POP
31344: POP
// end ;
31345: LD_VAR 0 3
31349: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31350: LD_INT 0
31352: PPUSH
31353: PPUSH
31354: PPUSH
31355: PPUSH
31356: PPUSH
31357: PPUSH
31358: PPUSH
31359: PPUSH
31360: PPUSH
31361: PPUSH
31362: PPUSH
31363: PPUSH
31364: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31365: LD_VAR 0 1
31369: NOT
31370: IFTRUE 31387
31372: PUSH
31373: LD_VAR 0 1
31377: PPUSH
31378: CALL_OW 257
31382: PUSH
31383: LD_INT 9
31385: NONEQUAL
31386: OR
31387: IFFALSE 31391
// exit ;
31389: GO 31970
// side := GetSide ( unit ) ;
31391: LD_ADDR_VAR 0 9
31395: PUSH
31396: LD_VAR 0 1
31400: PPUSH
31401: CALL_OW 255
31405: ST_TO_ADDR
// tech_space := tech_spacanom ;
31406: LD_ADDR_VAR 0 12
31410: PUSH
31411: LD_INT 29
31413: ST_TO_ADDR
// tech_time := tech_taurad ;
31414: LD_ADDR_VAR 0 13
31418: PUSH
31419: LD_INT 28
31421: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31422: LD_ADDR_VAR 0 11
31426: PUSH
31427: LD_VAR 0 1
31431: PPUSH
31432: CALL_OW 310
31436: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31437: LD_VAR 0 11
31441: PPUSH
31442: CALL_OW 247
31446: PUSH
31447: LD_INT 2
31449: EQUAL
31450: IFFALSE 31454
// exit ;
31452: GO 31970
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31454: LD_ADDR_VAR 0 8
31458: PUSH
31459: LD_INT 81
31461: PUSH
31462: LD_VAR 0 9
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 3
31473: PUSH
31474: LD_INT 21
31476: PUSH
31477: LD_INT 3
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PPUSH
31492: CALL_OW 69
31496: ST_TO_ADDR
// if not tmp then
31497: LD_VAR 0 8
31501: NOT
31502: IFFALSE 31506
// exit ;
31504: GO 31970
// if in_unit then
31506: LD_VAR 0 11
31510: IFFALSE 31534
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31512: LD_ADDR_VAR 0 10
31516: PUSH
31517: LD_VAR 0 8
31521: PPUSH
31522: LD_VAR 0 11
31526: PPUSH
31527: CALL_OW 74
31531: ST_TO_ADDR
31532: GO 31554
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31534: LD_ADDR_VAR 0 10
31538: PUSH
31539: LD_VAR 0 8
31543: PPUSH
31544: LD_VAR 0 1
31548: PPUSH
31549: CALL_OW 74
31553: ST_TO_ADDR
// if not enemy then
31554: LD_VAR 0 10
31558: NOT
31559: IFFALSE 31563
// exit ;
31561: GO 31970
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31563: LD_VAR 0 11
31567: IFFALSE 31589
31569: PUSH
31570: LD_VAR 0 11
31574: PPUSH
31575: LD_VAR 0 10
31579: PPUSH
31580: CALL_OW 296
31584: PUSH
31585: LD_INT 13
31587: GREATER
31588: AND
31589: IFTRUE 31611
31591: PUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: LD_VAR 0 10
31601: PPUSH
31602: CALL_OW 296
31606: PUSH
31607: LD_INT 12
31609: GREATER
31610: OR
31611: IFFALSE 31615
// exit ;
31613: GO 31970
// missile := [ 1 ] ;
31615: LD_ADDR_VAR 0 14
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31626: LD_VAR 0 9
31630: PPUSH
31631: LD_VAR 0 12
31635: PPUSH
31636: CALL_OW 325
31640: IFFALSE 31669
// missile := Replace ( missile , missile + 1 , 2 ) ;
31642: LD_ADDR_VAR 0 14
31646: PUSH
31647: LD_VAR 0 14
31651: PPUSH
31652: LD_VAR 0 14
31656: PUSH
31657: LD_INT 1
31659: PLUS
31660: PPUSH
31661: LD_INT 2
31663: PPUSH
31664: CALL_OW 1
31668: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31669: LD_VAR 0 9
31673: PPUSH
31674: LD_VAR 0 13
31678: PPUSH
31679: CALL_OW 325
31683: IFFALSE 31707
31685: PUSH
31686: LD_VAR 0 10
31690: PPUSH
31691: CALL_OW 255
31695: PPUSH
31696: LD_VAR 0 13
31700: PPUSH
31701: CALL_OW 325
31705: NOT
31706: AND
31707: IFFALSE 31736
// missile := Replace ( missile , missile + 1 , 3 ) ;
31709: LD_ADDR_VAR 0 14
31713: PUSH
31714: LD_VAR 0 14
31718: PPUSH
31719: LD_VAR 0 14
31723: PUSH
31724: LD_INT 1
31726: PLUS
31727: PPUSH
31728: LD_INT 3
31730: PPUSH
31731: CALL_OW 1
31735: ST_TO_ADDR
// if missile < 2 then
31736: LD_VAR 0 14
31740: PUSH
31741: LD_INT 2
31743: LESS
31744: IFFALSE 31748
// exit ;
31746: GO 31970
// x := GetX ( enemy ) ;
31748: LD_ADDR_VAR 0 4
31752: PUSH
31753: LD_VAR 0 10
31757: PPUSH
31758: CALL_OW 250
31762: ST_TO_ADDR
// y := GetY ( enemy ) ;
31763: LD_ADDR_VAR 0 5
31767: PUSH
31768: LD_VAR 0 10
31772: PPUSH
31773: CALL_OW 251
31777: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31778: LD_ADDR_VAR 0 6
31782: PUSH
31783: LD_VAR 0 4
31787: PUSH
31788: LD_INT 1
31790: NEG
31791: PPUSH
31792: LD_INT 1
31794: PPUSH
31795: CALL_OW 12
31799: PLUS
31800: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31801: LD_ADDR_VAR 0 7
31805: PUSH
31806: LD_VAR 0 5
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PPUSH
31815: LD_INT 1
31817: PPUSH
31818: CALL_OW 12
31822: PLUS
31823: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31824: LD_VAR 0 6
31828: PPUSH
31829: LD_VAR 0 7
31833: PPUSH
31834: CALL_OW 488
31838: NOT
31839: IFFALSE 31861
// begin _x := x ;
31841: LD_ADDR_VAR 0 6
31845: PUSH
31846: LD_VAR 0 4
31850: ST_TO_ADDR
// _y := y ;
31851: LD_ADDR_VAR 0 7
31855: PUSH
31856: LD_VAR 0 5
31860: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31861: LD_ADDR_VAR 0 3
31865: PUSH
31866: LD_INT 1
31868: PPUSH
31869: LD_VAR 0 14
31873: PPUSH
31874: CALL_OW 12
31878: ST_TO_ADDR
// case i of 1 :
31879: LD_VAR 0 3
31883: PUSH
31884: LD_INT 1
31886: DOUBLE
31887: EQUAL
31888: IFTRUE 31892
31890: GO 31909
31892: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31893: LD_VAR 0 1
31897: PPUSH
31898: LD_VAR 0 10
31902: PPUSH
31903: CALL_OW 115
31907: GO 31970
31909: LD_INT 2
31911: DOUBLE
31912: EQUAL
31913: IFTRUE 31917
31915: GO 31939
31917: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31918: LD_VAR 0 1
31922: PPUSH
31923: LD_VAR 0 6
31927: PPUSH
31928: LD_VAR 0 7
31932: PPUSH
31933: CALL_OW 153
31937: GO 31970
31939: LD_INT 3
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31969
31947: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31948: LD_VAR 0 1
31952: PPUSH
31953: LD_VAR 0 6
31957: PPUSH
31958: LD_VAR 0 7
31962: PPUSH
31963: CALL_OW 154
31967: GO 31970
31969: POP
// end ;
31970: LD_VAR 0 2
31974: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31975: LD_INT 0
31977: PPUSH
31978: PPUSH
31979: PPUSH
31980: PPUSH
31981: PPUSH
31982: PPUSH
// if not unit or not building then
31983: LD_VAR 0 1
31987: NOT
31988: IFTRUE 31997
31990: PUSH
31991: LD_VAR 0 2
31995: NOT
31996: OR
31997: IFFALSE 32001
// exit ;
31999: GO 32159
// x := GetX ( building ) ;
32001: LD_ADDR_VAR 0 5
32005: PUSH
32006: LD_VAR 0 2
32010: PPUSH
32011: CALL_OW 250
32015: ST_TO_ADDR
// y := GetY ( building ) ;
32016: LD_ADDR_VAR 0 6
32020: PUSH
32021: LD_VAR 0 2
32025: PPUSH
32026: CALL_OW 251
32030: ST_TO_ADDR
// for i := 0 to 5 do
32031: LD_ADDR_VAR 0 4
32035: PUSH
32036: DOUBLE
32037: LD_INT 0
32039: DEC
32040: ST_TO_ADDR
32041: LD_INT 5
32043: PUSH
32044: FOR_TO
32045: IFFALSE 32157
// begin _x := ShiftX ( x , i , 3 ) ;
32047: LD_ADDR_VAR 0 7
32051: PUSH
32052: LD_VAR 0 5
32056: PPUSH
32057: LD_VAR 0 4
32061: PPUSH
32062: LD_INT 3
32064: PPUSH
32065: CALL_OW 272
32069: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32070: LD_ADDR_VAR 0 8
32074: PUSH
32075: LD_VAR 0 6
32079: PPUSH
32080: LD_VAR 0 4
32084: PPUSH
32085: LD_INT 3
32087: PPUSH
32088: CALL_OW 273
32092: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32093: LD_VAR 0 7
32097: PPUSH
32098: LD_VAR 0 8
32102: PPUSH
32103: CALL_OW 488
32107: NOT
32108: IFFALSE 32112
// continue ;
32110: GO 32044
// if HexInfo ( _x , _y ) = 0 then
32112: LD_VAR 0 7
32116: PPUSH
32117: LD_VAR 0 8
32121: PPUSH
32122: CALL_OW 428
32126: PUSH
32127: LD_INT 0
32129: EQUAL
32130: IFFALSE 32155
// begin ComMoveXY ( unit , _x , _y ) ;
32132: LD_VAR 0 1
32136: PPUSH
32137: LD_VAR 0 7
32141: PPUSH
32142: LD_VAR 0 8
32146: PPUSH
32147: CALL_OW 111
// exit ;
32151: POP
32152: POP
32153: GO 32159
// end ; end ;
32155: GO 32044
32157: POP
32158: POP
// end ;
32159: LD_VAR 0 3
32163: RET
// export function ScanBase ( side , base_area ) ; begin
32164: LD_INT 0
32166: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32167: LD_ADDR_VAR 0 3
32171: PUSH
32172: LD_VAR 0 2
32176: PPUSH
32177: LD_INT 81
32179: PUSH
32180: LD_VAR 0 1
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PPUSH
32189: CALL_OW 70
32193: ST_TO_ADDR
// end ;
32194: LD_VAR 0 3
32198: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32199: LD_INT 0
32201: PPUSH
32202: PPUSH
32203: PPUSH
32204: PPUSH
// result := false ;
32205: LD_ADDR_VAR 0 2
32209: PUSH
32210: LD_INT 0
32212: ST_TO_ADDR
// side := GetSide ( unit ) ;
32213: LD_ADDR_VAR 0 3
32217: PUSH
32218: LD_VAR 0 1
32222: PPUSH
32223: CALL_OW 255
32227: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32228: LD_ADDR_VAR 0 4
32232: PUSH
32233: LD_VAR 0 1
32237: PPUSH
32238: CALL_OW 248
32242: ST_TO_ADDR
// case nat of 1 :
32243: LD_VAR 0 4
32247: PUSH
32248: LD_INT 1
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32256
32254: GO 32267
32256: POP
// tech := tech_lassight ; 2 :
32257: LD_ADDR_VAR 0 5
32261: PUSH
32262: LD_INT 12
32264: ST_TO_ADDR
32265: GO 32306
32267: LD_INT 2
32269: DOUBLE
32270: EQUAL
32271: IFTRUE 32275
32273: GO 32286
32275: POP
// tech := tech_mortar ; 3 :
32276: LD_ADDR_VAR 0 5
32280: PUSH
32281: LD_INT 41
32283: ST_TO_ADDR
32284: GO 32306
32286: LD_INT 3
32288: DOUBLE
32289: EQUAL
32290: IFTRUE 32294
32292: GO 32305
32294: POP
// tech := tech_bazooka ; end ;
32295: LD_ADDR_VAR 0 5
32299: PUSH
32300: LD_INT 44
32302: ST_TO_ADDR
32303: GO 32306
32305: POP
// if Researched ( side , tech ) then
32306: LD_VAR 0 3
32310: PPUSH
32311: LD_VAR 0 5
32315: PPUSH
32316: CALL_OW 325
32320: IFFALSE 32347
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32322: LD_ADDR_VAR 0 2
32326: PUSH
32327: LD_INT 5
32329: PUSH
32330: LD_INT 8
32332: PUSH
32333: LD_INT 9
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: PUSH
32341: LD_VAR 0 4
32345: ARRAY
32346: ST_TO_ADDR
// end ;
32347: LD_VAR 0 2
32351: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32352: LD_INT 0
32354: PPUSH
32355: PPUSH
32356: PPUSH
// if not mines then
32357: LD_VAR 0 2
32361: NOT
32362: IFFALSE 32366
// exit ;
32364: GO 32510
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32366: LD_ADDR_VAR 0 5
32370: PUSH
32371: LD_INT 81
32373: PUSH
32374: LD_VAR 0 1
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: LD_INT 21
32388: PUSH
32389: LD_INT 3
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PPUSH
32404: CALL_OW 69
32408: ST_TO_ADDR
// for i in mines do
32409: LD_ADDR_VAR 0 4
32413: PUSH
32414: LD_VAR 0 2
32418: PUSH
32419: FOR_IN
32420: IFFALSE 32508
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32422: LD_VAR 0 4
32426: PUSH
32427: LD_INT 1
32429: ARRAY
32430: PPUSH
32431: LD_VAR 0 4
32435: PUSH
32436: LD_INT 2
32438: ARRAY
32439: PPUSH
32440: CALL_OW 458
32444: NOT
32445: IFFALSE 32449
// continue ;
32447: GO 32419
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32449: LD_VAR 0 4
32453: PUSH
32454: LD_INT 1
32456: ARRAY
32457: PPUSH
32458: LD_VAR 0 4
32462: PUSH
32463: LD_INT 2
32465: ARRAY
32466: PPUSH
32467: CALL_OW 428
32471: PUSH
32472: LD_VAR 0 5
32476: IN
32477: IFFALSE 32506
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32479: LD_VAR 0 4
32483: PUSH
32484: LD_INT 1
32486: ARRAY
32487: PPUSH
32488: LD_VAR 0 4
32492: PUSH
32493: LD_INT 2
32495: ARRAY
32496: PPUSH
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL_OW 456
// end ;
32506: GO 32419
32508: POP
32509: POP
// end ;
32510: LD_VAR 0 3
32514: RET
// export function Count ( array ) ; begin
32515: LD_INT 0
32517: PPUSH
// result := array + 0 ;
32518: LD_ADDR_VAR 0 2
32522: PUSH
32523: LD_VAR 0 1
32527: PUSH
32528: LD_INT 0
32530: PLUS
32531: ST_TO_ADDR
// end ;
32532: LD_VAR 0 2
32536: RET
// export function IsEmpty ( building ) ; begin
32537: LD_INT 0
32539: PPUSH
// if not building then
32540: LD_VAR 0 1
32544: NOT
32545: IFFALSE 32549
// exit ;
32547: GO 32592
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32549: LD_ADDR_VAR 0 2
32553: PUSH
32554: LD_VAR 0 1
32558: PUSH
32559: LD_INT 22
32561: PUSH
32562: LD_VAR 0 1
32566: PPUSH
32567: CALL_OW 255
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 58
32578: PUSH
32579: EMPTY
32580: LIST
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PPUSH
32586: CALL_OW 69
32590: IN
32591: ST_TO_ADDR
// end ;
32592: LD_VAR 0 2
32596: RET
// export function IsNotFull ( building ) ; var places ; begin
32597: LD_INT 0
32599: PPUSH
32600: PPUSH
// if not building then
32601: LD_VAR 0 1
32605: NOT
32606: IFFALSE 32610
// exit ;
32608: GO 32638
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32610: LD_ADDR_VAR 0 2
32614: PUSH
32615: LD_VAR 0 1
32619: PPUSH
32620: LD_INT 3
32622: PUSH
32623: LD_INT 62
32625: PUSH
32626: EMPTY
32627: LIST
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PPUSH
32633: CALL_OW 72
32637: ST_TO_ADDR
// end ;
32638: LD_VAR 0 2
32642: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32643: LD_INT 0
32645: PPUSH
32646: PPUSH
32647: PPUSH
32648: PPUSH
// tmp := [ ] ;
32649: LD_ADDR_VAR 0 3
32653: PUSH
32654: EMPTY
32655: ST_TO_ADDR
// list := [ ] ;
32656: LD_ADDR_VAR 0 5
32660: PUSH
32661: EMPTY
32662: ST_TO_ADDR
// for i = 16 to 25 do
32663: LD_ADDR_VAR 0 4
32667: PUSH
32668: DOUBLE
32669: LD_INT 16
32671: DEC
32672: ST_TO_ADDR
32673: LD_INT 25
32675: PUSH
32676: FOR_TO
32677: IFFALSE 32750
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32679: LD_ADDR_VAR 0 3
32683: PUSH
32684: LD_VAR 0 3
32688: PUSH
32689: LD_INT 22
32691: PUSH
32692: LD_VAR 0 1
32696: PPUSH
32697: CALL_OW 255
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 91
32708: PUSH
32709: LD_VAR 0 1
32713: PUSH
32714: LD_INT 6
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 30
32724: PUSH
32725: LD_VAR 0 4
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: LIST
32738: PUSH
32739: EMPTY
32740: LIST
32741: PPUSH
32742: CALL_OW 69
32746: ADD
32747: ST_TO_ADDR
32748: GO 32676
32750: POP
32751: POP
// for i = 1 to tmp do
32752: LD_ADDR_VAR 0 4
32756: PUSH
32757: DOUBLE
32758: LD_INT 1
32760: DEC
32761: ST_TO_ADDR
32762: LD_VAR 0 3
32766: PUSH
32767: FOR_TO
32768: IFFALSE 32856
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32770: LD_ADDR_VAR 0 5
32774: PUSH
32775: LD_VAR 0 5
32779: PUSH
32780: LD_VAR 0 3
32784: PUSH
32785: LD_VAR 0 4
32789: ARRAY
32790: PPUSH
32791: CALL_OW 266
32795: PUSH
32796: LD_VAR 0 3
32800: PUSH
32801: LD_VAR 0 4
32805: ARRAY
32806: PPUSH
32807: CALL_OW 250
32811: PUSH
32812: LD_VAR 0 3
32816: PUSH
32817: LD_VAR 0 4
32821: ARRAY
32822: PPUSH
32823: CALL_OW 251
32827: PUSH
32828: LD_VAR 0 3
32832: PUSH
32833: LD_VAR 0 4
32837: ARRAY
32838: PPUSH
32839: CALL_OW 254
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: PUSH
32850: EMPTY
32851: LIST
32852: ADD
32853: ST_TO_ADDR
32854: GO 32767
32856: POP
32857: POP
// result := list ;
32858: LD_ADDR_VAR 0 2
32862: PUSH
32863: LD_VAR 0 5
32867: ST_TO_ADDR
// end ;
32868: LD_VAR 0 2
32872: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32873: LD_INT 0
32875: PPUSH
32876: PPUSH
32877: PPUSH
32878: PPUSH
32879: PPUSH
32880: PPUSH
32881: PPUSH
// if not factory then
32882: LD_VAR 0 1
32886: NOT
32887: IFFALSE 32891
// exit ;
32889: GO 33494
// if control = control_apeman then
32891: LD_VAR 0 4
32895: PUSH
32896: LD_INT 5
32898: EQUAL
32899: IFFALSE 33008
// begin tmp := UnitsInside ( factory ) ;
32901: LD_ADDR_VAR 0 8
32905: PUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 313
32915: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32916: LD_VAR 0 8
32920: PPUSH
32921: LD_INT 25
32923: PUSH
32924: LD_INT 12
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PPUSH
32931: CALL_OW 72
32935: NOT
32936: IFFALSE 32946
// control := control_manual ;
32938: LD_ADDR_VAR 0 4
32942: PUSH
32943: LD_INT 1
32945: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32946: LD_ADDR_VAR 0 8
32950: PUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL 32643 0 1
32960: ST_TO_ADDR
// if tmp then
32961: LD_VAR 0 8
32965: IFFALSE 33008
// begin for i in tmp do
32967: LD_ADDR_VAR 0 7
32971: PUSH
32972: LD_VAR 0 8
32976: PUSH
32977: FOR_IN
32978: IFFALSE 33006
// if i [ 1 ] = b_ext_radio then
32980: LD_VAR 0 7
32984: PUSH
32985: LD_INT 1
32987: ARRAY
32988: PUSH
32989: LD_INT 22
32991: EQUAL
32992: IFFALSE 33004
// begin control := control_remote ;
32994: LD_ADDR_VAR 0 4
32998: PUSH
32999: LD_INT 2
33001: ST_TO_ADDR
// break ;
33002: GO 33006
// end ;
33004: GO 32977
33006: POP
33007: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33008: LD_VAR 0 1
33012: PPUSH
33013: LD_VAR 0 2
33017: PPUSH
33018: LD_VAR 0 3
33022: PPUSH
33023: LD_VAR 0 4
33027: PPUSH
33028: LD_VAR 0 5
33032: PPUSH
33033: CALL_OW 448
33037: IFFALSE 33072
// begin result := [ chassis , engine , control , weapon ] ;
33039: LD_ADDR_VAR 0 6
33043: PUSH
33044: LD_VAR 0 2
33048: PUSH
33049: LD_VAR 0 3
33053: PUSH
33054: LD_VAR 0 4
33058: PUSH
33059: LD_VAR 0 5
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: ST_TO_ADDR
// exit ;
33070: GO 33494
// end ; _chassis := AvailableChassisList ( factory ) ;
33072: LD_ADDR_VAR 0 9
33076: PUSH
33077: LD_VAR 0 1
33081: PPUSH
33082: CALL_OW 475
33086: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33087: LD_ADDR_VAR 0 11
33091: PUSH
33092: LD_VAR 0 1
33096: PPUSH
33097: CALL_OW 476
33101: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33102: LD_ADDR_VAR 0 12
33106: PUSH
33107: LD_VAR 0 1
33111: PPUSH
33112: CALL_OW 477
33116: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33117: LD_ADDR_VAR 0 10
33121: PUSH
33122: LD_VAR 0 1
33126: PPUSH
33127: CALL_OW 478
33131: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33132: LD_VAR 0 9
33136: NOT
33137: IFTRUE 33146
33139: PUSH
33140: LD_VAR 0 11
33144: NOT
33145: OR
33146: IFTRUE 33155
33148: PUSH
33149: LD_VAR 0 12
33153: NOT
33154: OR
33155: IFTRUE 33164
33157: PUSH
33158: LD_VAR 0 10
33162: NOT
33163: OR
33164: IFFALSE 33199
// begin result := [ chassis , engine , control , weapon ] ;
33166: LD_ADDR_VAR 0 6
33170: PUSH
33171: LD_VAR 0 2
33175: PUSH
33176: LD_VAR 0 3
33180: PUSH
33181: LD_VAR 0 4
33185: PUSH
33186: LD_VAR 0 5
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: ST_TO_ADDR
// exit ;
33197: GO 33494
// end ; if not chassis in _chassis then
33199: LD_VAR 0 2
33203: PUSH
33204: LD_VAR 0 9
33208: IN
33209: NOT
33210: IFFALSE 33236
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33212: LD_ADDR_VAR 0 2
33216: PUSH
33217: LD_VAR 0 9
33221: PUSH
33222: LD_INT 1
33224: PPUSH
33225: LD_VAR 0 9
33229: PPUSH
33230: CALL_OW 12
33234: ARRAY
33235: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33236: LD_VAR 0 2
33240: PPUSH
33241: LD_VAR 0 3
33245: PPUSH
33246: CALL 33499 0 2
33250: NOT
33251: IFFALSE 33312
// repeat engine := _engine [ 1 ] ;
33253: LD_ADDR_VAR 0 3
33257: PUSH
33258: LD_VAR 0 11
33262: PUSH
33263: LD_INT 1
33265: ARRAY
33266: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33267: LD_ADDR_VAR 0 11
33271: PUSH
33272: LD_VAR 0 11
33276: PPUSH
33277: LD_INT 1
33279: PPUSH
33280: CALL_OW 3
33284: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33285: LD_VAR 0 2
33289: PPUSH
33290: LD_VAR 0 3
33294: PPUSH
33295: CALL 33499 0 2
33299: IFTRUE 33310
33301: PUSH
33302: LD_VAR 0 11
33306: PUSH
33307: EMPTY
33308: EQUAL
33309: OR
33310: IFFALSE 33253
// if not control in _control then
33312: LD_VAR 0 4
33316: PUSH
33317: LD_VAR 0 12
33321: IN
33322: NOT
33323: IFFALSE 33349
// control := _control [ rand ( 1 , _control ) ] ;
33325: LD_ADDR_VAR 0 4
33329: PUSH
33330: LD_VAR 0 12
33334: PUSH
33335: LD_INT 1
33337: PPUSH
33338: LD_VAR 0 12
33342: PPUSH
33343: CALL_OW 12
33347: ARRAY
33348: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33349: LD_VAR 0 2
33353: PPUSH
33354: LD_VAR 0 5
33358: PPUSH
33359: CALL 33721 0 2
33363: NOT
33364: IFFALSE 33425
// repeat weapon := _weapon [ 1 ] ;
33366: LD_ADDR_VAR 0 5
33370: PUSH
33371: LD_VAR 0 10
33375: PUSH
33376: LD_INT 1
33378: ARRAY
33379: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33380: LD_ADDR_VAR 0 10
33384: PUSH
33385: LD_VAR 0 10
33389: PPUSH
33390: LD_INT 1
33392: PPUSH
33393: CALL_OW 3
33397: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33398: LD_VAR 0 2
33402: PPUSH
33403: LD_VAR 0 5
33407: PPUSH
33408: CALL 33721 0 2
33412: IFTRUE 33423
33414: PUSH
33415: LD_VAR 0 10
33419: PUSH
33420: EMPTY
33421: EQUAL
33422: OR
33423: IFFALSE 33366
// result := [ ] ;
33425: LD_ADDR_VAR 0 6
33429: PUSH
33430: EMPTY
33431: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33432: LD_VAR 0 1
33436: PPUSH
33437: LD_VAR 0 2
33441: PPUSH
33442: LD_VAR 0 3
33446: PPUSH
33447: LD_VAR 0 4
33451: PPUSH
33452: LD_VAR 0 5
33456: PPUSH
33457: CALL_OW 448
33461: IFFALSE 33494
// result := [ chassis , engine , control , weapon ] ;
33463: LD_ADDR_VAR 0 6
33467: PUSH
33468: LD_VAR 0 2
33472: PUSH
33473: LD_VAR 0 3
33477: PUSH
33478: LD_VAR 0 4
33482: PUSH
33483: LD_VAR 0 5
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
// end ;
33494: LD_VAR 0 6
33498: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33499: LD_INT 0
33501: PPUSH
// if not chassis or not engine then
33502: LD_VAR 0 1
33506: NOT
33507: IFTRUE 33516
33509: PUSH
33510: LD_VAR 0 2
33514: NOT
33515: OR
33516: IFFALSE 33520
// exit ;
33518: GO 33716
// case engine of engine_solar :
33520: LD_VAR 0 2
33524: PUSH
33525: LD_INT 2
33527: DOUBLE
33528: EQUAL
33529: IFTRUE 33533
33531: GO 33571
33533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33534: LD_ADDR_VAR 0 3
33538: PUSH
33539: LD_INT 11
33541: PUSH
33542: LD_INT 12
33544: PUSH
33545: LD_INT 13
33547: PUSH
33548: LD_INT 14
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 3
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: ST_TO_ADDR
33569: GO 33700
33571: LD_INT 1
33573: DOUBLE
33574: EQUAL
33575: IFTRUE 33579
33577: GO 33641
33579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33580: LD_ADDR_VAR 0 3
33584: PUSH
33585: LD_INT 11
33587: PUSH
33588: LD_INT 12
33590: PUSH
33591: LD_INT 13
33593: PUSH
33594: LD_INT 14
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 4
33608: PUSH
33609: LD_INT 5
33611: PUSH
33612: LD_INT 21
33614: PUSH
33615: LD_INT 23
33617: PUSH
33618: LD_INT 22
33620: PUSH
33621: LD_INT 24
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: ST_TO_ADDR
33639: GO 33700
33641: LD_INT 3
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33649
33647: GO 33699
33649: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33650: LD_ADDR_VAR 0 3
33654: PUSH
33655: LD_INT 13
33657: PUSH
33658: LD_INT 14
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 3
33666: PUSH
33667: LD_INT 4
33669: PUSH
33670: LD_INT 5
33672: PUSH
33673: LD_INT 21
33675: PUSH
33676: LD_INT 22
33678: PUSH
33679: LD_INT 23
33681: PUSH
33682: LD_INT 24
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: ST_TO_ADDR
33697: GO 33700
33699: POP
// result := ( chassis in result ) ;
33700: LD_ADDR_VAR 0 3
33704: PUSH
33705: LD_VAR 0 1
33709: PUSH
33710: LD_VAR 0 3
33714: IN
33715: ST_TO_ADDR
// end ;
33716: LD_VAR 0 3
33720: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33721: LD_INT 0
33723: PPUSH
// if not chassis or not weapon then
33724: LD_VAR 0 1
33728: NOT
33729: IFTRUE 33738
33731: PUSH
33732: LD_VAR 0 2
33736: NOT
33737: OR
33738: IFFALSE 33742
// exit ;
33740: GO 34836
// case weapon of us_machine_gun :
33742: LD_VAR 0 2
33746: PUSH
33747: LD_INT 2
33749: DOUBLE
33750: EQUAL
33751: IFTRUE 33755
33753: GO 33785
33755: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33756: LD_ADDR_VAR 0 3
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: LD_INT 2
33766: PUSH
33767: LD_INT 3
33769: PUSH
33770: LD_INT 4
33772: PUSH
33773: LD_INT 5
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: ST_TO_ADDR
33783: GO 34820
33785: LD_INT 3
33787: DOUBLE
33788: EQUAL
33789: IFTRUE 33793
33791: GO 33823
33793: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33794: LD_ADDR_VAR 0 3
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: LD_INT 2
33804: PUSH
33805: LD_INT 3
33807: PUSH
33808: LD_INT 4
33810: PUSH
33811: LD_INT 5
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: ST_TO_ADDR
33821: GO 34820
33823: LD_INT 11
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 33861
33831: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33832: LD_ADDR_VAR 0 3
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 3
33845: PUSH
33846: LD_INT 4
33848: PUSH
33849: LD_INT 5
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: ST_TO_ADDR
33859: GO 34820
33861: LD_INT 4
33863: DOUBLE
33864: EQUAL
33865: IFTRUE 33869
33867: GO 33895
33869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33870: LD_ADDR_VAR 0 3
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: LD_INT 3
33880: PUSH
33881: LD_INT 4
33883: PUSH
33884: LD_INT 5
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: ST_TO_ADDR
33893: GO 34820
33895: LD_INT 5
33897: DOUBLE
33898: EQUAL
33899: IFTRUE 33903
33901: GO 33929
33903: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33904: LD_ADDR_VAR 0 3
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: LD_INT 3
33914: PUSH
33915: LD_INT 4
33917: PUSH
33918: LD_INT 5
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: ST_TO_ADDR
33927: GO 34820
33929: LD_INT 9
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33937
33935: GO 33963
33937: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33938: LD_ADDR_VAR 0 3
33942: PUSH
33943: LD_INT 2
33945: PUSH
33946: LD_INT 3
33948: PUSH
33949: LD_INT 4
33951: PUSH
33952: LD_INT 5
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
33961: GO 34820
33963: LD_INT 7
33965: DOUBLE
33966: EQUAL
33967: IFTRUE 33971
33969: GO 33997
33971: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33972: LD_ADDR_VAR 0 3
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: LD_INT 3
33982: PUSH
33983: LD_INT 4
33985: PUSH
33986: LD_INT 5
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: ST_TO_ADDR
33995: GO 34820
33997: LD_INT 12
33999: DOUBLE
34000: EQUAL
34001: IFTRUE 34005
34003: GO 34031
34005: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34006: LD_ADDR_VAR 0 3
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: LD_INT 3
34016: PUSH
34017: LD_INT 4
34019: PUSH
34020: LD_INT 5
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: ST_TO_ADDR
34029: GO 34820
34031: LD_INT 13
34033: DOUBLE
34034: EQUAL
34035: IFTRUE 34039
34037: GO 34065
34039: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34040: LD_ADDR_VAR 0 3
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: LD_INT 3
34050: PUSH
34051: LD_INT 4
34053: PUSH
34054: LD_INT 5
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: ST_TO_ADDR
34063: GO 34820
34065: LD_INT 14
34067: DOUBLE
34068: EQUAL
34069: IFTRUE 34073
34071: GO 34091
34073: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34074: LD_ADDR_VAR 0 3
34078: PUSH
34079: LD_INT 4
34081: PUSH
34082: LD_INT 5
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: ST_TO_ADDR
34089: GO 34820
34091: LD_INT 6
34093: DOUBLE
34094: EQUAL
34095: IFTRUE 34099
34097: GO 34117
34099: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34100: LD_ADDR_VAR 0 3
34104: PUSH
34105: LD_INT 4
34107: PUSH
34108: LD_INT 5
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: ST_TO_ADDR
34115: GO 34820
34117: LD_INT 10
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34125
34123: GO 34143
34125: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_INT 4
34133: PUSH
34134: LD_INT 5
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: ST_TO_ADDR
34141: GO 34820
34143: LD_INT 22
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34151
34149: GO 34177
34151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34152: LD_ADDR_VAR 0 3
34156: PUSH
34157: LD_INT 11
34159: PUSH
34160: LD_INT 12
34162: PUSH
34163: LD_INT 13
34165: PUSH
34166: LD_INT 14
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: ST_TO_ADDR
34175: GO 34820
34177: LD_INT 23
34179: DOUBLE
34180: EQUAL
34181: IFTRUE 34185
34183: GO 34211
34185: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34186: LD_ADDR_VAR 0 3
34190: PUSH
34191: LD_INT 11
34193: PUSH
34194: LD_INT 12
34196: PUSH
34197: LD_INT 13
34199: PUSH
34200: LD_INT 14
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: ST_TO_ADDR
34209: GO 34820
34211: LD_INT 24
34213: DOUBLE
34214: EQUAL
34215: IFTRUE 34219
34217: GO 34245
34219: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34220: LD_ADDR_VAR 0 3
34224: PUSH
34225: LD_INT 11
34227: PUSH
34228: LD_INT 12
34230: PUSH
34231: LD_INT 13
34233: PUSH
34234: LD_INT 14
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: ST_TO_ADDR
34243: GO 34820
34245: LD_INT 30
34247: DOUBLE
34248: EQUAL
34249: IFTRUE 34253
34251: GO 34279
34253: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_INT 11
34261: PUSH
34262: LD_INT 12
34264: PUSH
34265: LD_INT 13
34267: PUSH
34268: LD_INT 14
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: ST_TO_ADDR
34277: GO 34820
34279: LD_INT 25
34281: DOUBLE
34282: EQUAL
34283: IFTRUE 34287
34285: GO 34305
34287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34288: LD_ADDR_VAR 0 3
34292: PUSH
34293: LD_INT 13
34295: PUSH
34296: LD_INT 14
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: ST_TO_ADDR
34303: GO 34820
34305: LD_INT 27
34307: DOUBLE
34308: EQUAL
34309: IFTRUE 34313
34311: GO 34331
34313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34314: LD_ADDR_VAR 0 3
34318: PUSH
34319: LD_INT 13
34321: PUSH
34322: LD_INT 14
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: ST_TO_ADDR
34329: GO 34820
34331: LD_INT 92
34333: DOUBLE
34334: EQUAL
34335: IFTRUE 34339
34337: GO 34365
34339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34340: LD_ADDR_VAR 0 3
34344: PUSH
34345: LD_INT 11
34347: PUSH
34348: LD_INT 12
34350: PUSH
34351: LD_INT 13
34353: PUSH
34354: LD_INT 14
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: ST_TO_ADDR
34363: GO 34820
34365: LD_INT 28
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34373
34371: GO 34391
34373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34374: LD_ADDR_VAR 0 3
34378: PUSH
34379: LD_INT 13
34381: PUSH
34382: LD_INT 14
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: ST_TO_ADDR
34389: GO 34820
34391: LD_INT 29
34393: DOUBLE
34394: EQUAL
34395: IFTRUE 34399
34397: GO 34417
34399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: LD_INT 13
34407: PUSH
34408: LD_INT 14
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: ST_TO_ADDR
34415: GO 34820
34417: LD_INT 31
34419: DOUBLE
34420: EQUAL
34421: IFTRUE 34425
34423: GO 34443
34425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34426: LD_ADDR_VAR 0 3
34430: PUSH
34431: LD_INT 13
34433: PUSH
34434: LD_INT 14
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: ST_TO_ADDR
34441: GO 34820
34443: LD_INT 26
34445: DOUBLE
34446: EQUAL
34447: IFTRUE 34451
34449: GO 34469
34451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_INT 13
34459: PUSH
34460: LD_INT 14
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: ST_TO_ADDR
34467: GO 34820
34469: LD_INT 42
34471: DOUBLE
34472: EQUAL
34473: IFTRUE 34477
34475: GO 34503
34477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34478: LD_ADDR_VAR 0 3
34482: PUSH
34483: LD_INT 21
34485: PUSH
34486: LD_INT 22
34488: PUSH
34489: LD_INT 23
34491: PUSH
34492: LD_INT 24
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: ST_TO_ADDR
34501: GO 34820
34503: LD_INT 43
34505: DOUBLE
34506: EQUAL
34507: IFTRUE 34511
34509: GO 34537
34511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34512: LD_ADDR_VAR 0 3
34516: PUSH
34517: LD_INT 21
34519: PUSH
34520: LD_INT 22
34522: PUSH
34523: LD_INT 23
34525: PUSH
34526: LD_INT 24
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: ST_TO_ADDR
34535: GO 34820
34537: LD_INT 44
34539: DOUBLE
34540: EQUAL
34541: IFTRUE 34545
34543: GO 34571
34545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34546: LD_ADDR_VAR 0 3
34550: PUSH
34551: LD_INT 21
34553: PUSH
34554: LD_INT 22
34556: PUSH
34557: LD_INT 23
34559: PUSH
34560: LD_INT 24
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: ST_TO_ADDR
34569: GO 34820
34571: LD_INT 45
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34579
34577: GO 34605
34579: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34580: LD_ADDR_VAR 0 3
34584: PUSH
34585: LD_INT 21
34587: PUSH
34588: LD_INT 22
34590: PUSH
34591: LD_INT 23
34593: PUSH
34594: LD_INT 24
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: ST_TO_ADDR
34603: GO 34820
34605: LD_INT 49
34607: DOUBLE
34608: EQUAL
34609: IFTRUE 34613
34611: GO 34639
34613: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34614: LD_ADDR_VAR 0 3
34618: PUSH
34619: LD_INT 21
34621: PUSH
34622: LD_INT 22
34624: PUSH
34625: LD_INT 23
34627: PUSH
34628: LD_INT 24
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: ST_TO_ADDR
34637: GO 34820
34639: LD_INT 51
34641: DOUBLE
34642: EQUAL
34643: IFTRUE 34647
34645: GO 34673
34647: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34648: LD_ADDR_VAR 0 3
34652: PUSH
34653: LD_INT 21
34655: PUSH
34656: LD_INT 22
34658: PUSH
34659: LD_INT 23
34661: PUSH
34662: LD_INT 24
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: ST_TO_ADDR
34671: GO 34820
34673: LD_INT 52
34675: DOUBLE
34676: EQUAL
34677: IFTRUE 34681
34679: GO 34707
34681: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34682: LD_ADDR_VAR 0 3
34686: PUSH
34687: LD_INT 21
34689: PUSH
34690: LD_INT 22
34692: PUSH
34693: LD_INT 23
34695: PUSH
34696: LD_INT 24
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
34705: GO 34820
34707: LD_INT 53
34709: DOUBLE
34710: EQUAL
34711: IFTRUE 34715
34713: GO 34733
34715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34716: LD_ADDR_VAR 0 3
34720: PUSH
34721: LD_INT 23
34723: PUSH
34724: LD_INT 24
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: ST_TO_ADDR
34731: GO 34820
34733: LD_INT 46
34735: DOUBLE
34736: EQUAL
34737: IFTRUE 34741
34739: GO 34759
34741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34742: LD_ADDR_VAR 0 3
34746: PUSH
34747: LD_INT 23
34749: PUSH
34750: LD_INT 24
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: ST_TO_ADDR
34757: GO 34820
34759: LD_INT 47
34761: DOUBLE
34762: EQUAL
34763: IFTRUE 34767
34765: GO 34785
34767: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
34768: LD_ADDR_VAR 0 3
34772: PUSH
34773: LD_INT 23
34775: PUSH
34776: LD_INT 24
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: ST_TO_ADDR
34783: GO 34820
34785: LD_INT 98
34787: DOUBLE
34788: EQUAL
34789: IFTRUE 34793
34791: GO 34819
34793: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34794: LD_ADDR_VAR 0 3
34798: PUSH
34799: LD_INT 21
34801: PUSH
34802: LD_INT 22
34804: PUSH
34805: LD_INT 23
34807: PUSH
34808: LD_INT 24
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: ST_TO_ADDR
34817: GO 34820
34819: POP
// result := ( chassis in result ) ;
34820: LD_ADDR_VAR 0 3
34824: PUSH
34825: LD_VAR 0 1
34829: PUSH
34830: LD_VAR 0 3
34834: IN
34835: ST_TO_ADDR
// end ;
34836: LD_VAR 0 3
34840: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34841: LD_INT 0
34843: PPUSH
34844: PPUSH
34845: PPUSH
34846: PPUSH
34847: PPUSH
34848: PPUSH
34849: PPUSH
// result := array ;
34850: LD_ADDR_VAR 0 5
34854: PUSH
34855: LD_VAR 0 1
34859: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34860: LD_VAR 0 1
34864: NOT
34865: IFTRUE 34874
34867: PUSH
34868: LD_VAR 0 2
34872: NOT
34873: OR
34874: IFTRUE 34883
34876: PUSH
34877: LD_VAR 0 3
34881: NOT
34882: OR
34883: IFTRUE 34897
34885: PUSH
34886: LD_VAR 0 2
34890: PUSH
34891: LD_VAR 0 1
34895: GREATER
34896: OR
34897: IFTRUE 34911
34899: PUSH
34900: LD_VAR 0 3
34904: PUSH
34905: LD_VAR 0 1
34909: GREATER
34910: OR
34911: IFFALSE 34915
// exit ;
34913: GO 35211
// if direction then
34915: LD_VAR 0 4
34919: IFFALSE 34983
// begin d := 1 ;
34921: LD_ADDR_VAR 0 9
34925: PUSH
34926: LD_INT 1
34928: ST_TO_ADDR
// if i_from > i_to then
34929: LD_VAR 0 2
34933: PUSH
34934: LD_VAR 0 3
34938: GREATER
34939: IFFALSE 34965
// length := ( array - i_from ) + i_to else
34941: LD_ADDR_VAR 0 11
34945: PUSH
34946: LD_VAR 0 1
34950: PUSH
34951: LD_VAR 0 2
34955: MINUS
34956: PUSH
34957: LD_VAR 0 3
34961: PLUS
34962: ST_TO_ADDR
34963: GO 34981
// length := i_to - i_from ;
34965: LD_ADDR_VAR 0 11
34969: PUSH
34970: LD_VAR 0 3
34974: PUSH
34975: LD_VAR 0 2
34979: MINUS
34980: ST_TO_ADDR
// end else
34981: GO 35044
// begin d := - 1 ;
34983: LD_ADDR_VAR 0 9
34987: PUSH
34988: LD_INT 1
34990: NEG
34991: ST_TO_ADDR
// if i_from > i_to then
34992: LD_VAR 0 2
34996: PUSH
34997: LD_VAR 0 3
35001: GREATER
35002: IFFALSE 35022
// length := i_from - i_to else
35004: LD_ADDR_VAR 0 11
35008: PUSH
35009: LD_VAR 0 2
35013: PUSH
35014: LD_VAR 0 3
35018: MINUS
35019: ST_TO_ADDR
35020: GO 35044
// length := ( array - i_to ) + i_from ;
35022: LD_ADDR_VAR 0 11
35026: PUSH
35027: LD_VAR 0 1
35031: PUSH
35032: LD_VAR 0 3
35036: MINUS
35037: PUSH
35038: LD_VAR 0 2
35042: PLUS
35043: ST_TO_ADDR
// end ; if not length then
35044: LD_VAR 0 11
35048: NOT
35049: IFFALSE 35053
// exit ;
35051: GO 35211
// tmp := array ;
35053: LD_ADDR_VAR 0 10
35057: PUSH
35058: LD_VAR 0 1
35062: ST_TO_ADDR
// for i = 1 to length do
35063: LD_ADDR_VAR 0 6
35067: PUSH
35068: DOUBLE
35069: LD_INT 1
35071: DEC
35072: ST_TO_ADDR
35073: LD_VAR 0 11
35077: PUSH
35078: FOR_TO
35079: IFFALSE 35199
// begin for j = 1 to array do
35081: LD_ADDR_VAR 0 7
35085: PUSH
35086: DOUBLE
35087: LD_INT 1
35089: DEC
35090: ST_TO_ADDR
35091: LD_VAR 0 1
35095: PUSH
35096: FOR_TO
35097: IFFALSE 35185
// begin k := j + d ;
35099: LD_ADDR_VAR 0 8
35103: PUSH
35104: LD_VAR 0 7
35108: PUSH
35109: LD_VAR 0 9
35113: PLUS
35114: ST_TO_ADDR
// if k > array then
35115: LD_VAR 0 8
35119: PUSH
35120: LD_VAR 0 1
35124: GREATER
35125: IFFALSE 35135
// k := 1 ;
35127: LD_ADDR_VAR 0 8
35131: PUSH
35132: LD_INT 1
35134: ST_TO_ADDR
// if not k then
35135: LD_VAR 0 8
35139: NOT
35140: IFFALSE 35152
// k := array ;
35142: LD_ADDR_VAR 0 8
35146: PUSH
35147: LD_VAR 0 1
35151: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35152: LD_ADDR_VAR 0 10
35156: PUSH
35157: LD_VAR 0 10
35161: PPUSH
35162: LD_VAR 0 8
35166: PPUSH
35167: LD_VAR 0 1
35171: PUSH
35172: LD_VAR 0 7
35176: ARRAY
35177: PPUSH
35178: CALL_OW 1
35182: ST_TO_ADDR
// end ;
35183: GO 35096
35185: POP
35186: POP
// array := tmp ;
35187: LD_ADDR_VAR 0 1
35191: PUSH
35192: LD_VAR 0 10
35196: ST_TO_ADDR
// end ;
35197: GO 35078
35199: POP
35200: POP
// result := array ;
35201: LD_ADDR_VAR 0 5
35205: PUSH
35206: LD_VAR 0 1
35210: ST_TO_ADDR
// end ;
35211: LD_VAR 0 5
35215: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35216: LD_INT 0
35218: PPUSH
35219: PPUSH
// result := 0 ;
35220: LD_ADDR_VAR 0 3
35224: PUSH
35225: LD_INT 0
35227: ST_TO_ADDR
// if not array or not value in array then
35228: LD_VAR 0 1
35232: NOT
35233: IFTRUE 35248
35235: PUSH
35236: LD_VAR 0 2
35240: PUSH
35241: LD_VAR 0 1
35245: IN
35246: NOT
35247: OR
35248: IFFALSE 35252
// exit ;
35250: GO 35306
// for i = 1 to array do
35252: LD_ADDR_VAR 0 4
35256: PUSH
35257: DOUBLE
35258: LD_INT 1
35260: DEC
35261: ST_TO_ADDR
35262: LD_VAR 0 1
35266: PUSH
35267: FOR_TO
35268: IFFALSE 35304
// if value = array [ i ] then
35270: LD_VAR 0 2
35274: PUSH
35275: LD_VAR 0 1
35279: PUSH
35280: LD_VAR 0 4
35284: ARRAY
35285: EQUAL
35286: IFFALSE 35302
// begin result := i ;
35288: LD_ADDR_VAR 0 3
35292: PUSH
35293: LD_VAR 0 4
35297: ST_TO_ADDR
// exit ;
35298: POP
35299: POP
35300: GO 35306
// end ;
35302: GO 35267
35304: POP
35305: POP
// end ;
35306: LD_VAR 0 3
35310: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35311: LD_INT 0
35313: PPUSH
// vc_chassis := chassis ;
35314: LD_ADDR_OWVAR 37
35318: PUSH
35319: LD_VAR 0 1
35323: ST_TO_ADDR
// vc_engine := engine ;
35324: LD_ADDR_OWVAR 39
35328: PUSH
35329: LD_VAR 0 2
35333: ST_TO_ADDR
// vc_control := control ;
35334: LD_ADDR_OWVAR 38
35338: PUSH
35339: LD_VAR 0 3
35343: ST_TO_ADDR
// vc_weapon := weapon ;
35344: LD_ADDR_OWVAR 40
35348: PUSH
35349: LD_VAR 0 4
35353: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35354: LD_ADDR_OWVAR 41
35358: PUSH
35359: LD_VAR 0 5
35363: ST_TO_ADDR
// end ;
35364: LD_VAR 0 6
35368: RET
// export function WantPlant ( unit ) ; var task ; begin
35369: LD_INT 0
35371: PPUSH
35372: PPUSH
// result := false ;
35373: LD_ADDR_VAR 0 2
35377: PUSH
35378: LD_INT 0
35380: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35381: LD_ADDR_VAR 0 3
35385: PUSH
35386: LD_VAR 0 1
35390: PPUSH
35391: CALL_OW 437
35395: ST_TO_ADDR
// if task then
35396: LD_VAR 0 3
35400: IFFALSE 35428
// if task [ 1 ] [ 1 ] = p then
35402: LD_VAR 0 3
35406: PUSH
35407: LD_INT 1
35409: ARRAY
35410: PUSH
35411: LD_INT 1
35413: ARRAY
35414: PUSH
35415: LD_STRING p
35417: EQUAL
35418: IFFALSE 35428
// result := true ;
35420: LD_ADDR_VAR 0 2
35424: PUSH
35425: LD_INT 1
35427: ST_TO_ADDR
// end ;
35428: LD_VAR 0 2
35432: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35433: LD_INT 0
35435: PPUSH
35436: PPUSH
35437: PPUSH
35438: PPUSH
// if pos < 1 then
35439: LD_VAR 0 2
35443: PUSH
35444: LD_INT 1
35446: LESS
35447: IFFALSE 35451
// exit ;
35449: GO 35754
// if pos = 1 then
35451: LD_VAR 0 2
35455: PUSH
35456: LD_INT 1
35458: EQUAL
35459: IFFALSE 35492
// result := Replace ( arr , pos [ 1 ] , value ) else
35461: LD_ADDR_VAR 0 4
35465: PUSH
35466: LD_VAR 0 1
35470: PPUSH
35471: LD_VAR 0 2
35475: PUSH
35476: LD_INT 1
35478: ARRAY
35479: PPUSH
35480: LD_VAR 0 3
35484: PPUSH
35485: CALL_OW 1
35489: ST_TO_ADDR
35490: GO 35754
// begin tmp := arr ;
35492: LD_ADDR_VAR 0 6
35496: PUSH
35497: LD_VAR 0 1
35501: ST_TO_ADDR
// s_arr := [ tmp ] ;
35502: LD_ADDR_VAR 0 7
35506: PUSH
35507: LD_VAR 0 6
35511: PUSH
35512: EMPTY
35513: LIST
35514: ST_TO_ADDR
// for i = 1 to pos - 1 do
35515: LD_ADDR_VAR 0 5
35519: PUSH
35520: DOUBLE
35521: LD_INT 1
35523: DEC
35524: ST_TO_ADDR
35525: LD_VAR 0 2
35529: PUSH
35530: LD_INT 1
35532: MINUS
35533: PUSH
35534: FOR_TO
35535: IFFALSE 35580
// begin tmp := tmp [ pos [ i ] ] ;
35537: LD_ADDR_VAR 0 6
35541: PUSH
35542: LD_VAR 0 6
35546: PUSH
35547: LD_VAR 0 2
35551: PUSH
35552: LD_VAR 0 5
35556: ARRAY
35557: ARRAY
35558: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35559: LD_ADDR_VAR 0 7
35563: PUSH
35564: LD_VAR 0 7
35568: PUSH
35569: LD_VAR 0 6
35573: PUSH
35574: EMPTY
35575: LIST
35576: ADD
35577: ST_TO_ADDR
// end ;
35578: GO 35534
35580: POP
35581: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35582: LD_ADDR_VAR 0 6
35586: PUSH
35587: LD_VAR 0 6
35591: PPUSH
35592: LD_VAR 0 2
35596: PUSH
35597: LD_VAR 0 2
35601: ARRAY
35602: PPUSH
35603: LD_VAR 0 3
35607: PPUSH
35608: CALL_OW 1
35612: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35613: LD_ADDR_VAR 0 7
35617: PUSH
35618: LD_VAR 0 7
35622: PPUSH
35623: LD_VAR 0 7
35627: PPUSH
35628: LD_VAR 0 6
35632: PPUSH
35633: CALL_OW 1
35637: ST_TO_ADDR
// for i = s_arr downto 2 do
35638: LD_ADDR_VAR 0 5
35642: PUSH
35643: DOUBLE
35644: LD_VAR 0 7
35648: INC
35649: ST_TO_ADDR
35650: LD_INT 2
35652: PUSH
35653: FOR_DOWNTO
35654: IFFALSE 35738
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35656: LD_ADDR_VAR 0 6
35660: PUSH
35661: LD_VAR 0 7
35665: PUSH
35666: LD_VAR 0 5
35670: PUSH
35671: LD_INT 1
35673: MINUS
35674: ARRAY
35675: PPUSH
35676: LD_VAR 0 2
35680: PUSH
35681: LD_VAR 0 5
35685: PUSH
35686: LD_INT 1
35688: MINUS
35689: ARRAY
35690: PPUSH
35691: LD_VAR 0 7
35695: PUSH
35696: LD_VAR 0 5
35700: ARRAY
35701: PPUSH
35702: CALL_OW 1
35706: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35707: LD_ADDR_VAR 0 7
35711: PUSH
35712: LD_VAR 0 7
35716: PPUSH
35717: LD_VAR 0 5
35721: PUSH
35722: LD_INT 1
35724: MINUS
35725: PPUSH
35726: LD_VAR 0 6
35730: PPUSH
35731: CALL_OW 1
35735: ST_TO_ADDR
// end ;
35736: GO 35653
35738: POP
35739: POP
// result := s_arr [ 1 ] ;
35740: LD_ADDR_VAR 0 4
35744: PUSH
35745: LD_VAR 0 7
35749: PUSH
35750: LD_INT 1
35752: ARRAY
35753: ST_TO_ADDR
// end ; end ;
35754: LD_VAR 0 4
35758: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35759: LD_INT 0
35761: PPUSH
35762: PPUSH
// if not list then
35763: LD_VAR 0 1
35767: NOT
35768: IFFALSE 35772
// exit ;
35770: GO 35863
// i := list [ pos1 ] ;
35772: LD_ADDR_VAR 0 5
35776: PUSH
35777: LD_VAR 0 1
35781: PUSH
35782: LD_VAR 0 2
35786: ARRAY
35787: ST_TO_ADDR
// if not i then
35788: LD_VAR 0 5
35792: NOT
35793: IFFALSE 35797
// exit ;
35795: GO 35863
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35797: LD_ADDR_VAR 0 1
35801: PUSH
35802: LD_VAR 0 1
35806: PPUSH
35807: LD_VAR 0 2
35811: PPUSH
35812: LD_VAR 0 1
35816: PUSH
35817: LD_VAR 0 3
35821: ARRAY
35822: PPUSH
35823: CALL_OW 1
35827: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35828: LD_ADDR_VAR 0 1
35832: PUSH
35833: LD_VAR 0 1
35837: PPUSH
35838: LD_VAR 0 3
35842: PPUSH
35843: LD_VAR 0 5
35847: PPUSH
35848: CALL_OW 1
35852: ST_TO_ADDR
// result := list ;
35853: LD_ADDR_VAR 0 4
35857: PUSH
35858: LD_VAR 0 1
35862: ST_TO_ADDR
// end ;
35863: LD_VAR 0 4
35867: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35868: LD_INT 0
35870: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35871: LD_ADDR_VAR 0 5
35875: PUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: CALL_OW 250
35885: PPUSH
35886: LD_VAR 0 1
35890: PPUSH
35891: CALL_OW 251
35895: PPUSH
35896: LD_VAR 0 2
35900: PPUSH
35901: LD_VAR 0 3
35905: PPUSH
35906: LD_VAR 0 4
35910: PPUSH
35911: CALL 36293 0 5
35915: ST_TO_ADDR
// end ;
35916: LD_VAR 0 5
35920: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35921: LD_INT 0
35923: PPUSH
35924: PPUSH
35925: PPUSH
35926: PPUSH
// if not list or not unit then
35927: LD_VAR 0 2
35931: NOT
35932: IFTRUE 35941
35934: PUSH
35935: LD_VAR 0 1
35939: NOT
35940: OR
35941: IFFALSE 35945
// exit ;
35943: GO 36288
// result := [ ] ;
35945: LD_ADDR_VAR 0 5
35949: PUSH
35950: EMPTY
35951: ST_TO_ADDR
// for i in list do
35952: LD_ADDR_VAR 0 6
35956: PUSH
35957: LD_VAR 0 2
35961: PUSH
35962: FOR_IN
35963: IFFALSE 36181
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35965: LD_ADDR_VAR 0 8
35969: PUSH
35970: LD_VAR 0 1
35974: PPUSH
35975: LD_VAR 0 6
35979: PUSH
35980: LD_INT 1
35982: ARRAY
35983: PPUSH
35984: LD_VAR 0 6
35988: PUSH
35989: LD_INT 2
35991: ARRAY
35992: PPUSH
35993: CALL_OW 297
35997: ST_TO_ADDR
// if not Count ( result ) then
35998: LD_VAR 0 5
36002: PPUSH
36003: CALL 32515 0 1
36007: NOT
36008: IFFALSE 36041
// begin result := Join ( result , [ i , tmp ] ) ;
36010: LD_ADDR_VAR 0 5
36014: PUSH
36015: LD_VAR 0 5
36019: PPUSH
36020: LD_VAR 0 6
36024: PUSH
36025: LD_VAR 0 8
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PPUSH
36034: CALL 68491 0 2
36038: ST_TO_ADDR
// continue ;
36039: GO 35962
// end ; if result [ result ] [ 2 ] <= tmp then
36041: LD_VAR 0 5
36045: PUSH
36046: LD_VAR 0 5
36050: ARRAY
36051: PUSH
36052: LD_INT 2
36054: ARRAY
36055: PUSH
36056: LD_VAR 0 8
36060: LESSEQUAL
36061: IFFALSE 36094
// result := Join ( result , [ i , tmp ] ) else
36063: LD_ADDR_VAR 0 5
36067: PUSH
36068: LD_VAR 0 5
36072: PPUSH
36073: LD_VAR 0 6
36077: PUSH
36078: LD_VAR 0 8
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PPUSH
36087: CALL 68491 0 2
36091: ST_TO_ADDR
36092: GO 36179
// begin for j := 1 to Count ( result ) do
36094: LD_ADDR_VAR 0 7
36098: PUSH
36099: DOUBLE
36100: LD_INT 1
36102: DEC
36103: ST_TO_ADDR
36104: LD_VAR 0 5
36108: PPUSH
36109: CALL 32515 0 1
36113: PUSH
36114: FOR_TO
36115: IFFALSE 36177
// begin if tmp < result [ j ] [ 2 ] then
36117: LD_VAR 0 8
36121: PUSH
36122: LD_VAR 0 5
36126: PUSH
36127: LD_VAR 0 7
36131: ARRAY
36132: PUSH
36133: LD_INT 2
36135: ARRAY
36136: LESS
36137: IFFALSE 36175
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36139: LD_ADDR_VAR 0 5
36143: PUSH
36144: LD_VAR 0 5
36148: PPUSH
36149: LD_VAR 0 7
36153: PPUSH
36154: LD_VAR 0 6
36158: PUSH
36159: LD_VAR 0 8
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PPUSH
36168: CALL_OW 2
36172: ST_TO_ADDR
// break ;
36173: GO 36177
// end ; end ;
36175: GO 36114
36177: POP
36178: POP
// end ; end ;
36179: GO 35962
36181: POP
36182: POP
// if result and not asc then
36183: LD_VAR 0 5
36187: IFFALSE 36196
36189: PUSH
36190: LD_VAR 0 3
36194: NOT
36195: AND
36196: IFFALSE 36213
// result := ReverseArray ( result ) ;
36198: LD_ADDR_VAR 0 5
36202: PUSH
36203: LD_VAR 0 5
36207: PPUSH
36208: CALL 63571 0 1
36212: ST_TO_ADDR
// tmp := [ ] ;
36213: LD_ADDR_VAR 0 8
36217: PUSH
36218: EMPTY
36219: ST_TO_ADDR
// if mode then
36220: LD_VAR 0 4
36224: IFFALSE 36288
// begin for i := 1 to result do
36226: LD_ADDR_VAR 0 6
36230: PUSH
36231: DOUBLE
36232: LD_INT 1
36234: DEC
36235: ST_TO_ADDR
36236: LD_VAR 0 5
36240: PUSH
36241: FOR_TO
36242: IFFALSE 36276
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36244: LD_ADDR_VAR 0 8
36248: PUSH
36249: LD_VAR 0 8
36253: PPUSH
36254: LD_VAR 0 5
36258: PUSH
36259: LD_VAR 0 6
36263: ARRAY
36264: PUSH
36265: LD_INT 1
36267: ARRAY
36268: PPUSH
36269: CALL 68491 0 2
36273: ST_TO_ADDR
36274: GO 36241
36276: POP
36277: POP
// result := tmp ;
36278: LD_ADDR_VAR 0 5
36282: PUSH
36283: LD_VAR 0 8
36287: ST_TO_ADDR
// end ; end ;
36288: LD_VAR 0 5
36292: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36293: LD_INT 0
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
// if not list then
36299: LD_VAR 0 3
36303: NOT
36304: IFFALSE 36308
// exit ;
36306: GO 36698
// result := [ ] ;
36308: LD_ADDR_VAR 0 6
36312: PUSH
36313: EMPTY
36314: ST_TO_ADDR
// for i in list do
36315: LD_ADDR_VAR 0 7
36319: PUSH
36320: LD_VAR 0 3
36324: PUSH
36325: FOR_IN
36326: IFFALSE 36528
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36328: LD_ADDR_VAR 0 9
36332: PUSH
36333: LD_VAR 0 7
36337: PPUSH
36338: LD_VAR 0 1
36342: PPUSH
36343: LD_VAR 0 2
36347: PPUSH
36348: CALL_OW 297
36352: ST_TO_ADDR
// if not result then
36353: LD_VAR 0 6
36357: NOT
36358: IFFALSE 36384
// result := [ [ i , tmp ] ] else
36360: LD_ADDR_VAR 0 6
36364: PUSH
36365: LD_VAR 0 7
36369: PUSH
36370: LD_VAR 0 9
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: EMPTY
36380: LIST
36381: ST_TO_ADDR
36382: GO 36526
// begin if result [ result ] [ 2 ] <= tmp then
36384: LD_VAR 0 6
36388: PUSH
36389: LD_VAR 0 6
36393: ARRAY
36394: PUSH
36395: LD_INT 2
36397: ARRAY
36398: PUSH
36399: LD_VAR 0 9
36403: LESSEQUAL
36404: IFFALSE 36446
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36406: LD_ADDR_VAR 0 6
36410: PUSH
36411: LD_VAR 0 6
36415: PPUSH
36416: LD_VAR 0 6
36420: PUSH
36421: LD_INT 1
36423: PLUS
36424: PPUSH
36425: LD_VAR 0 7
36429: PUSH
36430: LD_VAR 0 9
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PPUSH
36439: CALL_OW 2
36443: ST_TO_ADDR
36444: GO 36526
// for j := 1 to result do
36446: LD_ADDR_VAR 0 8
36450: PUSH
36451: DOUBLE
36452: LD_INT 1
36454: DEC
36455: ST_TO_ADDR
36456: LD_VAR 0 6
36460: PUSH
36461: FOR_TO
36462: IFFALSE 36524
// begin if tmp < result [ j ] [ 2 ] then
36464: LD_VAR 0 9
36468: PUSH
36469: LD_VAR 0 6
36473: PUSH
36474: LD_VAR 0 8
36478: ARRAY
36479: PUSH
36480: LD_INT 2
36482: ARRAY
36483: LESS
36484: IFFALSE 36522
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36486: LD_ADDR_VAR 0 6
36490: PUSH
36491: LD_VAR 0 6
36495: PPUSH
36496: LD_VAR 0 8
36500: PPUSH
36501: LD_VAR 0 7
36505: PUSH
36506: LD_VAR 0 9
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PPUSH
36515: CALL_OW 2
36519: ST_TO_ADDR
// break ;
36520: GO 36524
// end ; end ;
36522: GO 36461
36524: POP
36525: POP
// end ; end ;
36526: GO 36325
36528: POP
36529: POP
// if result and not asc then
36530: LD_VAR 0 6
36534: IFFALSE 36543
36536: PUSH
36537: LD_VAR 0 4
36541: NOT
36542: AND
36543: IFFALSE 36618
// begin tmp := result ;
36545: LD_ADDR_VAR 0 9
36549: PUSH
36550: LD_VAR 0 6
36554: ST_TO_ADDR
// for i = tmp downto 1 do
36555: LD_ADDR_VAR 0 7
36559: PUSH
36560: DOUBLE
36561: LD_VAR 0 9
36565: INC
36566: ST_TO_ADDR
36567: LD_INT 1
36569: PUSH
36570: FOR_DOWNTO
36571: IFFALSE 36616
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36573: LD_ADDR_VAR 0 6
36577: PUSH
36578: LD_VAR 0 6
36582: PPUSH
36583: LD_VAR 0 9
36587: PUSH
36588: LD_VAR 0 7
36592: MINUS
36593: PUSH
36594: LD_INT 1
36596: PLUS
36597: PPUSH
36598: LD_VAR 0 9
36602: PUSH
36603: LD_VAR 0 7
36607: ARRAY
36608: PPUSH
36609: CALL_OW 1
36613: ST_TO_ADDR
36614: GO 36570
36616: POP
36617: POP
// end ; tmp := [ ] ;
36618: LD_ADDR_VAR 0 9
36622: PUSH
36623: EMPTY
36624: ST_TO_ADDR
// if mode then
36625: LD_VAR 0 5
36629: IFFALSE 36698
// begin for i = 1 to result do
36631: LD_ADDR_VAR 0 7
36635: PUSH
36636: DOUBLE
36637: LD_INT 1
36639: DEC
36640: ST_TO_ADDR
36641: LD_VAR 0 6
36645: PUSH
36646: FOR_TO
36647: IFFALSE 36686
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36649: LD_ADDR_VAR 0 9
36653: PUSH
36654: LD_VAR 0 9
36658: PPUSH
36659: LD_VAR 0 7
36663: PPUSH
36664: LD_VAR 0 6
36668: PUSH
36669: LD_VAR 0 7
36673: ARRAY
36674: PUSH
36675: LD_INT 1
36677: ARRAY
36678: PPUSH
36679: CALL_OW 1
36683: ST_TO_ADDR
36684: GO 36646
36686: POP
36687: POP
// result := tmp ;
36688: LD_ADDR_VAR 0 6
36692: PUSH
36693: LD_VAR 0 9
36697: ST_TO_ADDR
// end ; end ;
36698: LD_VAR 0 6
36702: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36703: LD_INT 0
36705: PPUSH
36706: PPUSH
36707: PPUSH
36708: PPUSH
36709: PPUSH
36710: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36711: LD_ADDR_VAR 0 5
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: EMPTY
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: ST_TO_ADDR
// if not x or not y then
36733: LD_VAR 0 2
36737: NOT
36738: IFTRUE 36747
36740: PUSH
36741: LD_VAR 0 3
36745: NOT
36746: OR
36747: IFFALSE 36751
// exit ;
36749: GO 38407
// if not range then
36751: LD_VAR 0 4
36755: NOT
36756: IFFALSE 36766
// range := 10 ;
36758: LD_ADDR_VAR 0 4
36762: PUSH
36763: LD_INT 10
36765: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36766: LD_ADDR_VAR 0 8
36770: PUSH
36771: LD_INT 81
36773: PUSH
36774: LD_VAR 0 1
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 92
36785: PUSH
36786: LD_VAR 0 2
36790: PUSH
36791: LD_VAR 0 3
36795: PUSH
36796: LD_VAR 0 4
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 3
36809: PUSH
36810: LD_INT 21
36812: PUSH
36813: LD_INT 3
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: PPUSH
36829: CALL_OW 69
36833: ST_TO_ADDR
// if not tmp then
36834: LD_VAR 0 8
36838: NOT
36839: IFFALSE 36843
// exit ;
36841: GO 38407
// for i in tmp do
36843: LD_ADDR_VAR 0 6
36847: PUSH
36848: LD_VAR 0 8
36852: PUSH
36853: FOR_IN
36854: IFFALSE 38382
// begin points := [ 0 , 0 , 0 ] ;
36856: LD_ADDR_VAR 0 9
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: ST_TO_ADDR
// bpoints := 1 ;
36875: LD_ADDR_VAR 0 10
36879: PUSH
36880: LD_INT 1
36882: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36883: LD_VAR 0 6
36887: PPUSH
36888: CALL_OW 247
36892: PUSH
36893: LD_INT 1
36895: DOUBLE
36896: EQUAL
36897: IFTRUE 36901
36899: GO 37483
36901: POP
// begin if GetClass ( i ) = 1 then
36902: LD_VAR 0 6
36906: PPUSH
36907: CALL_OW 257
36911: PUSH
36912: LD_INT 1
36914: EQUAL
36915: IFFALSE 36936
// points := [ 10 , 5 , 3 ] ;
36917: LD_ADDR_VAR 0 9
36921: PUSH
36922: LD_INT 10
36924: PUSH
36925: LD_INT 5
36927: PUSH
36928: LD_INT 3
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36936: LD_VAR 0 6
36940: PPUSH
36941: CALL_OW 257
36945: PUSH
36946: LD_INT 2
36948: PUSH
36949: LD_INT 3
36951: PUSH
36952: LD_INT 4
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: LIST
36959: IN
36960: IFFALSE 36981
// points := [ 3 , 2 , 1 ] ;
36962: LD_ADDR_VAR 0 9
36966: PUSH
36967: LD_INT 3
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36981: LD_VAR 0 6
36985: PPUSH
36986: CALL_OW 257
36990: PUSH
36991: LD_INT 5
36993: EQUAL
36994: IFFALSE 37015
// points := [ 130 , 5 , 2 ] ;
36996: LD_ADDR_VAR 0 9
37000: PUSH
37001: LD_INT 130
37003: PUSH
37004: LD_INT 5
37006: PUSH
37007: LD_INT 2
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37015: LD_VAR 0 6
37019: PPUSH
37020: CALL_OW 257
37024: PUSH
37025: LD_INT 8
37027: EQUAL
37028: IFFALSE 37049
// points := [ 35 , 35 , 30 ] ;
37030: LD_ADDR_VAR 0 9
37034: PUSH
37035: LD_INT 35
37037: PUSH
37038: LD_INT 35
37040: PUSH
37041: LD_INT 30
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37049: LD_VAR 0 6
37053: PPUSH
37054: CALL_OW 257
37058: PUSH
37059: LD_INT 9
37061: EQUAL
37062: IFFALSE 37083
// points := [ 20 , 55 , 40 ] ;
37064: LD_ADDR_VAR 0 9
37068: PUSH
37069: LD_INT 20
37071: PUSH
37072: LD_INT 55
37074: PUSH
37075: LD_INT 40
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37083: LD_VAR 0 6
37087: PPUSH
37088: CALL_OW 257
37092: PUSH
37093: LD_INT 12
37095: PUSH
37096: LD_INT 16
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: IN
37103: IFFALSE 37124
// points := [ 5 , 3 , 2 ] ;
37105: LD_ADDR_VAR 0 9
37109: PUSH
37110: LD_INT 5
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: LD_INT 2
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: LIST
37123: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37124: LD_VAR 0 6
37128: PPUSH
37129: CALL_OW 257
37133: PUSH
37134: LD_INT 17
37136: EQUAL
37137: IFFALSE 37158
// points := [ 100 , 50 , 75 ] ;
37139: LD_ADDR_VAR 0 9
37143: PUSH
37144: LD_INT 100
37146: PUSH
37147: LD_INT 50
37149: PUSH
37150: LD_INT 75
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: LIST
37157: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37158: LD_VAR 0 6
37162: PPUSH
37163: CALL_OW 257
37167: PUSH
37168: LD_INT 15
37170: EQUAL
37171: IFFALSE 37192
// points := [ 10 , 5 , 3 ] ;
37173: LD_ADDR_VAR 0 9
37177: PUSH
37178: LD_INT 10
37180: PUSH
37181: LD_INT 5
37183: PUSH
37184: LD_INT 3
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37192: LD_VAR 0 6
37196: PPUSH
37197: CALL_OW 257
37201: PUSH
37202: LD_INT 14
37204: EQUAL
37205: IFFALSE 37226
// points := [ 10 , 0 , 0 ] ;
37207: LD_ADDR_VAR 0 9
37211: PUSH
37212: LD_INT 10
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37226: LD_VAR 0 6
37230: PPUSH
37231: CALL_OW 257
37235: PUSH
37236: LD_INT 11
37238: EQUAL
37239: IFFALSE 37260
// points := [ 30 , 10 , 5 ] ;
37241: LD_ADDR_VAR 0 9
37245: PUSH
37246: LD_INT 30
37248: PUSH
37249: LD_INT 10
37251: PUSH
37252: LD_INT 5
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37260: LD_VAR 0 1
37264: PPUSH
37265: LD_INT 5
37267: PPUSH
37268: CALL_OW 321
37272: PUSH
37273: LD_INT 2
37275: EQUAL
37276: IFFALSE 37293
// bpoints := bpoints * 1.8 ;
37278: LD_ADDR_VAR 0 10
37282: PUSH
37283: LD_VAR 0 10
37287: PUSH
37288: LD_REAL  1.80000000000000E+0000
37291: MUL
37292: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37293: LD_VAR 0 6
37297: PPUSH
37298: CALL_OW 257
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: LD_INT 3
37311: PUSH
37312: LD_INT 4
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: IN
37321: IFFALSE 37341
37323: PUSH
37324: LD_VAR 0 1
37328: PPUSH
37329: LD_INT 51
37331: PPUSH
37332: CALL_OW 321
37336: PUSH
37337: LD_INT 2
37339: EQUAL
37340: AND
37341: IFFALSE 37358
// bpoints := bpoints * 1.2 ;
37343: LD_ADDR_VAR 0 10
37347: PUSH
37348: LD_VAR 0 10
37352: PUSH
37353: LD_REAL  1.20000000000000E+0000
37356: MUL
37357: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37358: LD_VAR 0 6
37362: PPUSH
37363: CALL_OW 257
37367: PUSH
37368: LD_INT 5
37370: PUSH
37371: LD_INT 7
37373: PUSH
37374: LD_INT 9
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: IN
37382: IFFALSE 37402
37384: PUSH
37385: LD_VAR 0 1
37389: PPUSH
37390: LD_INT 52
37392: PPUSH
37393: CALL_OW 321
37397: PUSH
37398: LD_INT 2
37400: EQUAL
37401: AND
37402: IFFALSE 37419
// bpoints := bpoints * 1.5 ;
37404: LD_ADDR_VAR 0 10
37408: PUSH
37409: LD_VAR 0 10
37413: PUSH
37414: LD_REAL  1.50000000000000E+0000
37417: MUL
37418: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37419: LD_VAR 0 1
37423: PPUSH
37424: LD_INT 66
37426: PPUSH
37427: CALL_OW 321
37431: PUSH
37432: LD_INT 2
37434: EQUAL
37435: IFFALSE 37452
// bpoints := bpoints * 1.1 ;
37437: LD_ADDR_VAR 0 10
37441: PUSH
37442: LD_VAR 0 10
37446: PUSH
37447: LD_REAL  1.10000000000000E+0000
37450: MUL
37451: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37452: LD_ADDR_VAR 0 10
37456: PUSH
37457: LD_VAR 0 10
37461: PUSH
37462: LD_VAR 0 6
37466: PPUSH
37467: LD_INT 1
37469: PPUSH
37470: CALL_OW 259
37474: PUSH
37475: LD_REAL  1.15000000000000E+0000
37478: MUL
37479: MUL
37480: ST_TO_ADDR
// end ; unit_vehicle :
37481: GO 38311
37483: LD_INT 2
37485: DOUBLE
37486: EQUAL
37487: IFTRUE 37491
37489: GO 38299
37491: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37492: LD_VAR 0 6
37496: PPUSH
37497: CALL_OW 264
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: LD_INT 42
37507: PUSH
37508: LD_INT 24
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: IN
37516: IFFALSE 37537
// points := [ 25 , 5 , 3 ] ;
37518: LD_ADDR_VAR 0 9
37522: PUSH
37523: LD_INT 25
37525: PUSH
37526: LD_INT 5
37528: PUSH
37529: LD_INT 3
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: LIST
37536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37537: LD_VAR 0 6
37541: PPUSH
37542: CALL_OW 264
37546: PUSH
37547: LD_INT 4
37549: PUSH
37550: LD_INT 43
37552: PUSH
37553: LD_INT 25
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: IN
37561: IFFALSE 37582
// points := [ 40 , 15 , 5 ] ;
37563: LD_ADDR_VAR 0 9
37567: PUSH
37568: LD_INT 40
37570: PUSH
37571: LD_INT 15
37573: PUSH
37574: LD_INT 5
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37582: LD_VAR 0 6
37586: PPUSH
37587: CALL_OW 264
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: LD_INT 23
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: IN
37602: IFFALSE 37623
// points := [ 7 , 25 , 8 ] ;
37604: LD_ADDR_VAR 0 9
37608: PUSH
37609: LD_INT 7
37611: PUSH
37612: LD_INT 25
37614: PUSH
37615: LD_INT 8
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37623: LD_VAR 0 6
37627: PPUSH
37628: CALL_OW 264
37632: PUSH
37633: LD_INT 5
37635: PUSH
37636: LD_INT 27
37638: PUSH
37639: LD_INT 44
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: IN
37647: IFFALSE 37668
// points := [ 14 , 50 , 16 ] ;
37649: LD_ADDR_VAR 0 9
37653: PUSH
37654: LD_INT 14
37656: PUSH
37657: LD_INT 50
37659: PUSH
37660: LD_INT 16
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37668: LD_VAR 0 6
37672: PPUSH
37673: CALL_OW 264
37677: PUSH
37678: LD_INT 6
37680: PUSH
37681: LD_INT 46
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: IN
37688: IFFALSE 37709
// points := [ 32 , 120 , 70 ] ;
37690: LD_ADDR_VAR 0 9
37694: PUSH
37695: LD_INT 32
37697: PUSH
37698: LD_INT 120
37700: PUSH
37701: LD_INT 70
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: LIST
37708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37709: LD_VAR 0 6
37713: PPUSH
37714: CALL_OW 264
37718: PUSH
37719: LD_INT 7
37721: PUSH
37722: LD_INT 28
37724: PUSH
37725: LD_INT 45
37727: PUSH
37728: LD_INT 92
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: IN
37737: IFFALSE 37758
// points := [ 35 , 20 , 45 ] ;
37739: LD_ADDR_VAR 0 9
37743: PUSH
37744: LD_INT 35
37746: PUSH
37747: LD_INT 20
37749: PUSH
37750: LD_INT 45
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37758: LD_VAR 0 6
37762: PPUSH
37763: CALL_OW 264
37767: PUSH
37768: LD_INT 47
37770: PUSH
37771: EMPTY
37772: LIST
37773: IN
37774: IFFALSE 37795
// points := [ 67 , 45 , 75 ] ;
37776: LD_ADDR_VAR 0 9
37780: PUSH
37781: LD_INT 67
37783: PUSH
37784: LD_INT 45
37786: PUSH
37787: LD_INT 75
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37795: LD_VAR 0 6
37799: PPUSH
37800: CALL_OW 264
37804: PUSH
37805: LD_INT 26
37807: PUSH
37808: EMPTY
37809: LIST
37810: IN
37811: IFFALSE 37832
// points := [ 120 , 30 , 80 ] ;
37813: LD_ADDR_VAR 0 9
37817: PUSH
37818: LD_INT 120
37820: PUSH
37821: LD_INT 30
37823: PUSH
37824: LD_INT 80
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37832: LD_VAR 0 6
37836: PPUSH
37837: CALL_OW 264
37841: PUSH
37842: LD_INT 22
37844: PUSH
37845: EMPTY
37846: LIST
37847: IN
37848: IFFALSE 37869
// points := [ 40 , 1 , 1 ] ;
37850: LD_ADDR_VAR 0 9
37854: PUSH
37855: LD_INT 40
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37869: LD_VAR 0 6
37873: PPUSH
37874: CALL_OW 264
37878: PUSH
37879: LD_INT 29
37881: PUSH
37882: EMPTY
37883: LIST
37884: IN
37885: IFFALSE 37906
// points := [ 70 , 200 , 400 ] ;
37887: LD_ADDR_VAR 0 9
37891: PUSH
37892: LD_INT 70
37894: PUSH
37895: LD_INT 200
37897: PUSH
37898: LD_INT 400
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37906: LD_VAR 0 6
37910: PPUSH
37911: CALL_OW 264
37915: PUSH
37916: LD_INT 14
37918: PUSH
37919: LD_INT 53
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: IN
37926: IFFALSE 37947
// points := [ 40 , 10 , 20 ] ;
37928: LD_ADDR_VAR 0 9
37932: PUSH
37933: LD_INT 40
37935: PUSH
37936: LD_INT 10
37938: PUSH
37939: LD_INT 20
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37947: LD_VAR 0 6
37951: PPUSH
37952: CALL_OW 264
37956: PUSH
37957: LD_INT 9
37959: PUSH
37960: EMPTY
37961: LIST
37962: IN
37963: IFFALSE 37984
// points := [ 5 , 70 , 20 ] ;
37965: LD_ADDR_VAR 0 9
37969: PUSH
37970: LD_INT 5
37972: PUSH
37973: LD_INT 70
37975: PUSH
37976: LD_INT 20
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37984: LD_VAR 0 6
37988: PPUSH
37989: CALL_OW 264
37993: PUSH
37994: LD_INT 10
37996: PUSH
37997: EMPTY
37998: LIST
37999: IN
38000: IFFALSE 38021
// points := [ 35 , 110 , 70 ] ;
38002: LD_ADDR_VAR 0 9
38006: PUSH
38007: LD_INT 35
38009: PUSH
38010: LD_INT 110
38012: PUSH
38013: LD_INT 70
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38021: LD_VAR 0 6
38025: PPUSH
38026: CALL_OW 265
38030: PUSH
38031: LD_INT 25
38033: EQUAL
38034: IFFALSE 38055
// points := [ 80 , 65 , 100 ] ;
38036: LD_ADDR_VAR 0 9
38040: PUSH
38041: LD_INT 80
38043: PUSH
38044: LD_INT 65
38046: PUSH
38047: LD_INT 100
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38055: LD_VAR 0 6
38059: PPUSH
38060: CALL_OW 263
38064: PUSH
38065: LD_INT 1
38067: EQUAL
38068: IFFALSE 38103
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38070: LD_ADDR_VAR 0 10
38074: PUSH
38075: LD_VAR 0 10
38079: PUSH
38080: LD_VAR 0 6
38084: PPUSH
38085: CALL_OW 311
38089: PPUSH
38090: LD_INT 3
38092: PPUSH
38093: CALL_OW 259
38097: PUSH
38098: LD_INT 4
38100: MUL
38101: MUL
38102: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38103: LD_VAR 0 6
38107: PPUSH
38108: CALL_OW 263
38112: PUSH
38113: LD_INT 2
38115: EQUAL
38116: IFFALSE 38167
// begin j := IsControledBy ( i ) ;
38118: LD_ADDR_VAR 0 7
38122: PUSH
38123: LD_VAR 0 6
38127: PPUSH
38128: CALL_OW 312
38132: ST_TO_ADDR
// if j then
38133: LD_VAR 0 7
38137: IFFALSE 38167
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38139: LD_ADDR_VAR 0 10
38143: PUSH
38144: LD_VAR 0 10
38148: PUSH
38149: LD_VAR 0 7
38153: PPUSH
38154: LD_INT 3
38156: PPUSH
38157: CALL_OW 259
38161: PUSH
38162: LD_INT 3
38164: MUL
38165: MUL
38166: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38167: LD_VAR 0 6
38171: PPUSH
38172: CALL_OW 264
38176: PUSH
38177: LD_INT 5
38179: PUSH
38180: LD_INT 6
38182: PUSH
38183: LD_INT 46
38185: PUSH
38186: LD_INT 44
38188: PUSH
38189: LD_INT 47
38191: PUSH
38192: LD_INT 45
38194: PUSH
38195: LD_INT 28
38197: PUSH
38198: LD_INT 7
38200: PUSH
38201: LD_INT 27
38203: PUSH
38204: LD_INT 29
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: IN
38219: IFFALSE 38239
38221: PUSH
38222: LD_VAR 0 1
38226: PPUSH
38227: LD_INT 52
38229: PPUSH
38230: CALL_OW 321
38234: PUSH
38235: LD_INT 2
38237: EQUAL
38238: AND
38239: IFFALSE 38256
// bpoints := bpoints * 1.2 ;
38241: LD_ADDR_VAR 0 10
38245: PUSH
38246: LD_VAR 0 10
38250: PUSH
38251: LD_REAL  1.20000000000000E+0000
38254: MUL
38255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38256: LD_VAR 0 6
38260: PPUSH
38261: CALL_OW 264
38265: PUSH
38266: LD_INT 6
38268: PUSH
38269: LD_INT 46
38271: PUSH
38272: LD_INT 47
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: IN
38280: IFFALSE 38297
// bpoints := bpoints * 1.2 ;
38282: LD_ADDR_VAR 0 10
38286: PUSH
38287: LD_VAR 0 10
38291: PUSH
38292: LD_REAL  1.20000000000000E+0000
38295: MUL
38296: ST_TO_ADDR
// end ; unit_building :
38297: GO 38311
38299: LD_INT 3
38301: DOUBLE
38302: EQUAL
38303: IFTRUE 38307
38305: GO 38310
38307: POP
// ; end ;
38308: GO 38311
38310: POP
// for j = 1 to 3 do
38311: LD_ADDR_VAR 0 7
38315: PUSH
38316: DOUBLE
38317: LD_INT 1
38319: DEC
38320: ST_TO_ADDR
38321: LD_INT 3
38323: PUSH
38324: FOR_TO
38325: IFFALSE 38378
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38327: LD_ADDR_VAR 0 5
38331: PUSH
38332: LD_VAR 0 5
38336: PPUSH
38337: LD_VAR 0 7
38341: PPUSH
38342: LD_VAR 0 5
38346: PUSH
38347: LD_VAR 0 7
38351: ARRAY
38352: PUSH
38353: LD_VAR 0 9
38357: PUSH
38358: LD_VAR 0 7
38362: ARRAY
38363: PUSH
38364: LD_VAR 0 10
38368: MUL
38369: PLUS
38370: PPUSH
38371: CALL_OW 1
38375: ST_TO_ADDR
38376: GO 38324
38378: POP
38379: POP
// end ;
38380: GO 36853
38382: POP
38383: POP
// result := Replace ( result , 4 , tmp ) ;
38384: LD_ADDR_VAR 0 5
38388: PUSH
38389: LD_VAR 0 5
38393: PPUSH
38394: LD_INT 4
38396: PPUSH
38397: LD_VAR 0 8
38401: PPUSH
38402: CALL_OW 1
38406: ST_TO_ADDR
// end ;
38407: LD_VAR 0 5
38411: RET
// export function DangerAtRange ( unit , range ) ; begin
38412: LD_INT 0
38414: PPUSH
// if not unit then
38415: LD_VAR 0 1
38419: NOT
38420: IFFALSE 38424
// exit ;
38422: GO 38469
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38424: LD_ADDR_VAR 0 3
38428: PUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 255
38438: PPUSH
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 250
38448: PPUSH
38449: LD_VAR 0 1
38453: PPUSH
38454: CALL_OW 251
38458: PPUSH
38459: LD_VAR 0 2
38463: PPUSH
38464: CALL 36703 0 4
38468: ST_TO_ADDR
// end ;
38469: LD_VAR 0 3
38473: RET
// export function DangerInArea ( side , area ) ; begin
38474: LD_INT 0
38476: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38477: LD_ADDR_VAR 0 3
38481: PUSH
38482: LD_VAR 0 2
38486: PPUSH
38487: LD_INT 81
38489: PUSH
38490: LD_VAR 0 1
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PPUSH
38499: CALL_OW 70
38503: ST_TO_ADDR
// end ;
38504: LD_VAR 0 3
38508: RET
// export function IsExtension ( b ) ; begin
38509: LD_INT 0
38511: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38512: LD_ADDR_VAR 0 2
38516: PUSH
38517: LD_VAR 0 1
38521: PUSH
38522: LD_INT 23
38524: PUSH
38525: LD_INT 20
38527: PUSH
38528: LD_INT 22
38530: PUSH
38531: LD_INT 17
38533: PUSH
38534: LD_INT 24
38536: PUSH
38537: LD_INT 21
38539: PUSH
38540: LD_INT 19
38542: PUSH
38543: LD_INT 16
38545: PUSH
38546: LD_INT 25
38548: PUSH
38549: LD_INT 18
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: IN
38564: ST_TO_ADDR
// end ;
38565: LD_VAR 0 2
38569: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38570: LD_INT 0
38572: PPUSH
38573: PPUSH
38574: PPUSH
// result := [ ] ;
38575: LD_ADDR_VAR 0 4
38579: PUSH
38580: EMPTY
38581: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38582: LD_ADDR_VAR 0 5
38586: PUSH
38587: LD_VAR 0 2
38591: PPUSH
38592: LD_INT 21
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PPUSH
38602: CALL_OW 70
38606: ST_TO_ADDR
// if not tmp then
38607: LD_VAR 0 5
38611: NOT
38612: IFFALSE 38616
// exit ;
38614: GO 38680
// if checkLink then
38616: LD_VAR 0 3
38620: IFFALSE 38670
// begin for i in tmp do
38622: LD_ADDR_VAR 0 6
38626: PUSH
38627: LD_VAR 0 5
38631: PUSH
38632: FOR_IN
38633: IFFALSE 38668
// if GetBase ( i ) <> base then
38635: LD_VAR 0 6
38639: PPUSH
38640: CALL_OW 274
38644: PUSH
38645: LD_VAR 0 1
38649: NONEQUAL
38650: IFFALSE 38666
// ComLinkToBase ( base , i ) ;
38652: LD_VAR 0 1
38656: PPUSH
38657: LD_VAR 0 6
38661: PPUSH
38662: CALL_OW 169
38666: GO 38632
38668: POP
38669: POP
// end ; result := tmp ;
38670: LD_ADDR_VAR 0 4
38674: PUSH
38675: LD_VAR 0 5
38679: ST_TO_ADDR
// end ;
38680: LD_VAR 0 4
38684: RET
// export function ComComplete ( units , b ) ; var i ; begin
38685: LD_INT 0
38687: PPUSH
38688: PPUSH
// if not units then
38689: LD_VAR 0 1
38693: NOT
38694: IFFALSE 38698
// exit ;
38696: GO 38788
// for i in units do
38698: LD_ADDR_VAR 0 4
38702: PUSH
38703: LD_VAR 0 1
38707: PUSH
38708: FOR_IN
38709: IFFALSE 38786
// if BuildingStatus ( b ) = bs_build then
38711: LD_VAR 0 2
38715: PPUSH
38716: CALL_OW 461
38720: PUSH
38721: LD_INT 1
38723: EQUAL
38724: IFFALSE 38784
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38726: LD_VAR 0 4
38730: PPUSH
38731: LD_STRING h
38733: PUSH
38734: LD_VAR 0 2
38738: PPUSH
38739: CALL_OW 250
38743: PUSH
38744: LD_VAR 0 2
38748: PPUSH
38749: CALL_OW 251
38753: PUSH
38754: LD_VAR 0 2
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: PPUSH
38780: CALL_OW 446
38784: GO 38708
38786: POP
38787: POP
// end ;
38788: LD_VAR 0 3
38792: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38793: LD_INT 0
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38801: LD_VAR 0 1
38805: NOT
38806: IFTRUE 38823
38808: PUSH
38809: LD_VAR 0 1
38813: PPUSH
38814: CALL_OW 263
38818: PUSH
38819: LD_INT 2
38821: NONEQUAL
38822: OR
38823: IFFALSE 38827
// exit ;
38825: GO 39143
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38827: LD_ADDR_VAR 0 6
38831: PUSH
38832: LD_INT 22
38834: PUSH
38835: LD_VAR 0 1
38839: PPUSH
38840: CALL_OW 255
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: LD_INT 30
38854: PUSH
38855: LD_INT 36
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 34
38864: PUSH
38865: LD_INT 31
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PPUSH
38881: CALL_OW 69
38885: ST_TO_ADDR
// if not tmp then
38886: LD_VAR 0 6
38890: NOT
38891: IFFALSE 38895
// exit ;
38893: GO 39143
// result := [ ] ;
38895: LD_ADDR_VAR 0 2
38899: PUSH
38900: EMPTY
38901: ST_TO_ADDR
// for i in tmp do
38902: LD_ADDR_VAR 0 3
38906: PUSH
38907: LD_VAR 0 6
38911: PUSH
38912: FOR_IN
38913: IFFALSE 38984
// begin t := UnitsInside ( i ) ;
38915: LD_ADDR_VAR 0 4
38919: PUSH
38920: LD_VAR 0 3
38924: PPUSH
38925: CALL_OW 313
38929: ST_TO_ADDR
// if t then
38930: LD_VAR 0 4
38934: IFFALSE 38982
// for j in t do
38936: LD_ADDR_VAR 0 7
38940: PUSH
38941: LD_VAR 0 4
38945: PUSH
38946: FOR_IN
38947: IFFALSE 38980
// result := Replace ( result , result + 1 , j ) ;
38949: LD_ADDR_VAR 0 2
38953: PUSH
38954: LD_VAR 0 2
38958: PPUSH
38959: LD_VAR 0 2
38963: PUSH
38964: LD_INT 1
38966: PLUS
38967: PPUSH
38968: LD_VAR 0 7
38972: PPUSH
38973: CALL_OW 1
38977: ST_TO_ADDR
38978: GO 38946
38980: POP
38981: POP
// end ;
38982: GO 38912
38984: POP
38985: POP
// if not result then
38986: LD_VAR 0 2
38990: NOT
38991: IFFALSE 38995
// exit ;
38993: GO 39143
// mech := result [ 1 ] ;
38995: LD_ADDR_VAR 0 5
38999: PUSH
39000: LD_VAR 0 2
39004: PUSH
39005: LD_INT 1
39007: ARRAY
39008: ST_TO_ADDR
// if result > 1 then
39009: LD_VAR 0 2
39013: PUSH
39014: LD_INT 1
39016: GREATER
39017: IFFALSE 39129
// begin for i = 2 to result do
39019: LD_ADDR_VAR 0 3
39023: PUSH
39024: DOUBLE
39025: LD_INT 2
39027: DEC
39028: ST_TO_ADDR
39029: LD_VAR 0 2
39033: PUSH
39034: FOR_TO
39035: IFFALSE 39127
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39037: LD_ADDR_VAR 0 4
39041: PUSH
39042: LD_VAR 0 2
39046: PUSH
39047: LD_VAR 0 3
39051: ARRAY
39052: PPUSH
39053: LD_INT 3
39055: PPUSH
39056: CALL_OW 259
39060: PUSH
39061: LD_VAR 0 2
39065: PUSH
39066: LD_VAR 0 3
39070: ARRAY
39071: PPUSH
39072: CALL_OW 432
39076: MINUS
39077: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39078: LD_VAR 0 4
39082: PUSH
39083: LD_VAR 0 5
39087: PPUSH
39088: LD_INT 3
39090: PPUSH
39091: CALL_OW 259
39095: PUSH
39096: LD_VAR 0 5
39100: PPUSH
39101: CALL_OW 432
39105: MINUS
39106: GREATEREQUAL
39107: IFFALSE 39125
// mech := result [ i ] ;
39109: LD_ADDR_VAR 0 5
39113: PUSH
39114: LD_VAR 0 2
39118: PUSH
39119: LD_VAR 0 3
39123: ARRAY
39124: ST_TO_ADDR
// end ;
39125: GO 39034
39127: POP
39128: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39129: LD_VAR 0 1
39133: PPUSH
39134: LD_VAR 0 5
39138: PPUSH
39139: CALL_OW 135
// end ;
39143: LD_VAR 0 2
39147: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39148: LD_INT 0
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
// result := [ ] ;
39163: LD_ADDR_VAR 0 7
39167: PUSH
39168: EMPTY
39169: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39170: LD_VAR 0 1
39174: PPUSH
39175: CALL_OW 266
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: IN
39190: NOT
39191: IFFALSE 39195
// exit ;
39193: GO 40835
// if name then
39195: LD_VAR 0 3
39199: IFFALSE 39215
// SetBName ( base_dep , name ) ;
39201: LD_VAR 0 1
39205: PPUSH
39206: LD_VAR 0 3
39210: PPUSH
39211: CALL_OW 500
// base := GetBase ( base_dep ) ;
39215: LD_ADDR_VAR 0 15
39219: PUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: CALL_OW 274
39229: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39230: LD_ADDR_VAR 0 16
39234: PUSH
39235: LD_VAR 0 1
39239: PPUSH
39240: CALL_OW 255
39244: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39245: LD_ADDR_VAR 0 17
39249: PUSH
39250: LD_VAR 0 1
39254: PPUSH
39255: CALL_OW 248
39259: ST_TO_ADDR
// if sources then
39260: LD_VAR 0 5
39264: IFFALSE 39311
// for i = 1 to 3 do
39266: LD_ADDR_VAR 0 8
39270: PUSH
39271: DOUBLE
39272: LD_INT 1
39274: DEC
39275: ST_TO_ADDR
39276: LD_INT 3
39278: PUSH
39279: FOR_TO
39280: IFFALSE 39309
// AddResourceType ( base , i , sources [ i ] ) ;
39282: LD_VAR 0 15
39286: PPUSH
39287: LD_VAR 0 8
39291: PPUSH
39292: LD_VAR 0 5
39296: PUSH
39297: LD_VAR 0 8
39301: ARRAY
39302: PPUSH
39303: CALL_OW 276
39307: GO 39279
39309: POP
39310: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39311: LD_ADDR_VAR 0 18
39315: PUSH
39316: LD_VAR 0 15
39320: PPUSH
39321: LD_VAR 0 2
39325: PPUSH
39326: LD_INT 1
39328: PPUSH
39329: CALL 38570 0 3
39333: ST_TO_ADDR
// InitHc ;
39334: CALL_OW 19
// InitUc ;
39338: CALL_OW 18
// uc_side := side ;
39342: LD_ADDR_OWVAR 20
39346: PUSH
39347: LD_VAR 0 16
39351: ST_TO_ADDR
// uc_nation := nation ;
39352: LD_ADDR_OWVAR 21
39356: PUSH
39357: LD_VAR 0 17
39361: ST_TO_ADDR
// if buildings then
39362: LD_VAR 0 18
39366: IFFALSE 40694
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39368: LD_ADDR_VAR 0 19
39372: PUSH
39373: LD_VAR 0 18
39377: PPUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 30
39383: PUSH
39384: LD_INT 29
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 30
39393: PUSH
39394: LD_INT 30
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: PPUSH
39406: CALL_OW 72
39410: ST_TO_ADDR
// if tmp then
39411: LD_VAR 0 19
39415: IFFALSE 39463
// for i in tmp do
39417: LD_ADDR_VAR 0 8
39421: PUSH
39422: LD_VAR 0 19
39426: PUSH
39427: FOR_IN
39428: IFFALSE 39461
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39430: LD_VAR 0 8
39434: PPUSH
39435: CALL_OW 250
39439: PPUSH
39440: LD_VAR 0 8
39444: PPUSH
39445: CALL_OW 251
39449: PPUSH
39450: LD_VAR 0 16
39454: PPUSH
39455: CALL_OW 441
39459: GO 39427
39461: POP
39462: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39463: LD_VAR 0 18
39467: PPUSH
39468: LD_INT 2
39470: PUSH
39471: LD_INT 30
39473: PUSH
39474: LD_INT 32
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 30
39483: PUSH
39484: LD_INT 33
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: PPUSH
39496: CALL_OW 72
39500: IFFALSE 39588
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39502: LD_ADDR_VAR 0 8
39506: PUSH
39507: LD_VAR 0 18
39511: PPUSH
39512: LD_INT 2
39514: PUSH
39515: LD_INT 30
39517: PUSH
39518: LD_INT 32
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 30
39527: PUSH
39528: LD_INT 33
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: PPUSH
39540: CALL_OW 72
39544: PUSH
39545: FOR_IN
39546: IFFALSE 39586
// begin if not GetBWeapon ( i ) then
39548: LD_VAR 0 8
39552: PPUSH
39553: CALL_OW 269
39557: NOT
39558: IFFALSE 39584
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39560: LD_VAR 0 8
39564: PPUSH
39565: LD_VAR 0 8
39569: PPUSH
39570: LD_VAR 0 2
39574: PPUSH
39575: CALL 40840 0 2
39579: PPUSH
39580: CALL_OW 431
// end ;
39584: GO 39545
39586: POP
39587: POP
// end ; for i = 1 to personel do
39588: LD_ADDR_VAR 0 8
39592: PUSH
39593: DOUBLE
39594: LD_INT 1
39596: DEC
39597: ST_TO_ADDR
39598: LD_VAR 0 6
39602: PUSH
39603: FOR_TO
39604: IFFALSE 40674
// begin if i > 4 then
39606: LD_VAR 0 8
39610: PUSH
39611: LD_INT 4
39613: GREATER
39614: IFFALSE 39618
// break ;
39616: GO 40674
// case i of 1 :
39618: LD_VAR 0 8
39622: PUSH
39623: LD_INT 1
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39631
39629: GO 39711
39631: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39632: LD_ADDR_VAR 0 12
39636: PUSH
39637: LD_VAR 0 18
39641: PPUSH
39642: LD_INT 22
39644: PUSH
39645: LD_VAR 0 16
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 58
39656: PUSH
39657: EMPTY
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: LD_INT 30
39665: PUSH
39666: LD_INT 32
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 30
39675: PUSH
39676: LD_INT 4
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 30
39685: PUSH
39686: LD_INT 5
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: PPUSH
39704: CALL_OW 72
39708: ST_TO_ADDR
39709: GO 39933
39711: LD_INT 2
39713: DOUBLE
39714: EQUAL
39715: IFTRUE 39719
39717: GO 39781
39719: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39720: LD_ADDR_VAR 0 12
39724: PUSH
39725: LD_VAR 0 18
39729: PPUSH
39730: LD_INT 22
39732: PUSH
39733: LD_VAR 0 16
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: LD_INT 30
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 30
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PPUSH
39774: CALL_OW 72
39778: ST_TO_ADDR
39779: GO 39933
39781: LD_INT 3
39783: DOUBLE
39784: EQUAL
39785: IFTRUE 39789
39787: GO 39851
39789: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39790: LD_ADDR_VAR 0 12
39794: PUSH
39795: LD_VAR 0 18
39799: PPUSH
39800: LD_INT 22
39802: PUSH
39803: LD_VAR 0 16
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: LD_INT 30
39817: PUSH
39818: LD_INT 2
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 30
39827: PUSH
39828: LD_INT 3
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PPUSH
39844: CALL_OW 72
39848: ST_TO_ADDR
39849: GO 39933
39851: LD_INT 4
39853: DOUBLE
39854: EQUAL
39855: IFTRUE 39859
39857: GO 39932
39859: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39860: LD_ADDR_VAR 0 12
39864: PUSH
39865: LD_VAR 0 18
39869: PPUSH
39870: LD_INT 22
39872: PUSH
39873: LD_VAR 0 16
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: LD_INT 30
39887: PUSH
39888: LD_INT 6
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 30
39897: PUSH
39898: LD_INT 7
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 30
39907: PUSH
39908: LD_INT 8
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PPUSH
39925: CALL_OW 72
39929: ST_TO_ADDR
39930: GO 39933
39932: POP
// if i = 1 then
39933: LD_VAR 0 8
39937: PUSH
39938: LD_INT 1
39940: EQUAL
39941: IFFALSE 40052
// begin tmp := [ ] ;
39943: LD_ADDR_VAR 0 19
39947: PUSH
39948: EMPTY
39949: ST_TO_ADDR
// for j in f do
39950: LD_ADDR_VAR 0 9
39954: PUSH
39955: LD_VAR 0 12
39959: PUSH
39960: FOR_IN
39961: IFFALSE 40034
// if GetBType ( j ) = b_bunker then
39963: LD_VAR 0 9
39967: PPUSH
39968: CALL_OW 266
39972: PUSH
39973: LD_INT 32
39975: EQUAL
39976: IFFALSE 40003
// tmp := Insert ( tmp , 1 , j ) else
39978: LD_ADDR_VAR 0 19
39982: PUSH
39983: LD_VAR 0 19
39987: PPUSH
39988: LD_INT 1
39990: PPUSH
39991: LD_VAR 0 9
39995: PPUSH
39996: CALL_OW 2
40000: ST_TO_ADDR
40001: GO 40032
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40003: LD_ADDR_VAR 0 19
40007: PUSH
40008: LD_VAR 0 19
40012: PPUSH
40013: LD_VAR 0 19
40017: PUSH
40018: LD_INT 1
40020: PLUS
40021: PPUSH
40022: LD_VAR 0 9
40026: PPUSH
40027: CALL_OW 2
40031: ST_TO_ADDR
40032: GO 39960
40034: POP
40035: POP
// if tmp then
40036: LD_VAR 0 19
40040: IFFALSE 40052
// f := tmp ;
40042: LD_ADDR_VAR 0 12
40046: PUSH
40047: LD_VAR 0 19
40051: ST_TO_ADDR
// end ; x := personel [ i ] ;
40052: LD_ADDR_VAR 0 13
40056: PUSH
40057: LD_VAR 0 6
40061: PUSH
40062: LD_VAR 0 8
40066: ARRAY
40067: ST_TO_ADDR
// if x = - 1 then
40068: LD_VAR 0 13
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: EQUAL
40077: IFFALSE 40288
// begin for j in f do
40079: LD_ADDR_VAR 0 9
40083: PUSH
40084: LD_VAR 0 12
40088: PUSH
40089: FOR_IN
40090: IFFALSE 40284
// repeat InitHc ;
40092: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40096: LD_VAR 0 9
40100: PPUSH
40101: CALL_OW 266
40105: PUSH
40106: LD_INT 5
40108: EQUAL
40109: IFFALSE 40179
// begin if UnitsInside ( j ) < 3 then
40111: LD_VAR 0 9
40115: PPUSH
40116: CALL_OW 313
40120: PUSH
40121: LD_INT 3
40123: LESS
40124: IFFALSE 40160
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40126: LD_INT 0
40128: PPUSH
40129: LD_INT 5
40131: PUSH
40132: LD_INT 8
40134: PUSH
40135: LD_INT 9
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: LIST
40142: PUSH
40143: LD_VAR 0 17
40147: ARRAY
40148: PPUSH
40149: LD_VAR 0 4
40153: PPUSH
40154: CALL_OW 380
40158: GO 40177
// PrepareHuman ( false , i , skill ) ;
40160: LD_INT 0
40162: PPUSH
40163: LD_VAR 0 8
40167: PPUSH
40168: LD_VAR 0 4
40172: PPUSH
40173: CALL_OW 380
// end else
40177: GO 40196
// PrepareHuman ( false , i , skill ) ;
40179: LD_INT 0
40181: PPUSH
40182: LD_VAR 0 8
40186: PPUSH
40187: LD_VAR 0 4
40191: PPUSH
40192: CALL_OW 380
// un := CreateHuman ;
40196: LD_ADDR_VAR 0 14
40200: PUSH
40201: CALL_OW 44
40205: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40206: LD_ADDR_VAR 0 7
40210: PUSH
40211: LD_VAR 0 7
40215: PPUSH
40216: LD_INT 1
40218: PPUSH
40219: LD_VAR 0 14
40223: PPUSH
40224: CALL_OW 2
40228: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40229: LD_VAR 0 14
40233: PPUSH
40234: LD_VAR 0 9
40238: PPUSH
40239: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40243: LD_VAR 0 9
40247: PPUSH
40248: CALL_OW 313
40252: PUSH
40253: LD_INT 6
40255: EQUAL
40256: IFTRUE 40280
40258: PUSH
40259: LD_VAR 0 9
40263: PPUSH
40264: CALL_OW 266
40268: PUSH
40269: LD_INT 32
40271: PUSH
40272: LD_INT 31
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: IN
40279: OR
40280: IFFALSE 40092
40282: GO 40089
40284: POP
40285: POP
// end else
40286: GO 40672
// for j = 1 to x do
40288: LD_ADDR_VAR 0 9
40292: PUSH
40293: DOUBLE
40294: LD_INT 1
40296: DEC
40297: ST_TO_ADDR
40298: LD_VAR 0 13
40302: PUSH
40303: FOR_TO
40304: IFFALSE 40670
// begin InitHc ;
40306: CALL_OW 19
// if not f then
40310: LD_VAR 0 12
40314: NOT
40315: IFFALSE 40404
// begin PrepareHuman ( false , i , skill ) ;
40317: LD_INT 0
40319: PPUSH
40320: LD_VAR 0 8
40324: PPUSH
40325: LD_VAR 0 4
40329: PPUSH
40330: CALL_OW 380
// un := CreateHuman ;
40334: LD_ADDR_VAR 0 14
40338: PUSH
40339: CALL_OW 44
40343: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40344: LD_ADDR_VAR 0 7
40348: PUSH
40349: LD_VAR 0 7
40353: PPUSH
40354: LD_INT 1
40356: PPUSH
40357: LD_VAR 0 14
40361: PPUSH
40362: CALL_OW 2
40366: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40367: LD_VAR 0 14
40371: PPUSH
40372: LD_VAR 0 1
40376: PPUSH
40377: CALL_OW 250
40381: PPUSH
40382: LD_VAR 0 1
40386: PPUSH
40387: CALL_OW 251
40391: PPUSH
40392: LD_INT 10
40394: PPUSH
40395: LD_INT 0
40397: PPUSH
40398: CALL_OW 50
// continue ;
40402: GO 40303
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40404: LD_VAR 0 12
40408: PUSH
40409: LD_INT 1
40411: ARRAY
40412: PPUSH
40413: CALL_OW 313
40417: IFFALSE 40445
40419: PUSH
40420: LD_VAR 0 12
40424: PUSH
40425: LD_INT 1
40427: ARRAY
40428: PPUSH
40429: CALL_OW 266
40433: PUSH
40434: LD_INT 32
40436: PUSH
40437: LD_INT 31
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: IN
40444: AND
40445: IFTRUE 40466
40447: PUSH
40448: LD_VAR 0 12
40452: PUSH
40453: LD_INT 1
40455: ARRAY
40456: PPUSH
40457: CALL_OW 313
40461: PUSH
40462: LD_INT 6
40464: EQUAL
40465: OR
40466: IFFALSE 40486
// f := Delete ( f , 1 ) ;
40468: LD_ADDR_VAR 0 12
40472: PUSH
40473: LD_VAR 0 12
40477: PPUSH
40478: LD_INT 1
40480: PPUSH
40481: CALL_OW 3
40485: ST_TO_ADDR
// if not f then
40486: LD_VAR 0 12
40490: NOT
40491: IFFALSE 40509
// begin x := x + 2 ;
40493: LD_ADDR_VAR 0 13
40497: PUSH
40498: LD_VAR 0 13
40502: PUSH
40503: LD_INT 2
40505: PLUS
40506: ST_TO_ADDR
// continue ;
40507: GO 40303
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40509: LD_VAR 0 12
40513: PUSH
40514: LD_INT 1
40516: ARRAY
40517: PPUSH
40518: CALL_OW 266
40522: PUSH
40523: LD_INT 5
40525: EQUAL
40526: IFFALSE 40600
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40528: LD_VAR 0 12
40532: PUSH
40533: LD_INT 1
40535: ARRAY
40536: PPUSH
40537: CALL_OW 313
40541: PUSH
40542: LD_INT 3
40544: LESS
40545: IFFALSE 40581
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40547: LD_INT 0
40549: PPUSH
40550: LD_INT 5
40552: PUSH
40553: LD_INT 8
40555: PUSH
40556: LD_INT 9
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: LIST
40563: PUSH
40564: LD_VAR 0 17
40568: ARRAY
40569: PPUSH
40570: LD_VAR 0 4
40574: PPUSH
40575: CALL_OW 380
40579: GO 40598
// PrepareHuman ( false , i , skill ) ;
40581: LD_INT 0
40583: PPUSH
40584: LD_VAR 0 8
40588: PPUSH
40589: LD_VAR 0 4
40593: PPUSH
40594: CALL_OW 380
// end else
40598: GO 40617
// PrepareHuman ( false , i , skill ) ;
40600: LD_INT 0
40602: PPUSH
40603: LD_VAR 0 8
40607: PPUSH
40608: LD_VAR 0 4
40612: PPUSH
40613: CALL_OW 380
// un := CreateHuman ;
40617: LD_ADDR_VAR 0 14
40621: PUSH
40622: CALL_OW 44
40626: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40627: LD_ADDR_VAR 0 7
40631: PUSH
40632: LD_VAR 0 7
40636: PPUSH
40637: LD_INT 1
40639: PPUSH
40640: LD_VAR 0 14
40644: PPUSH
40645: CALL_OW 2
40649: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40650: LD_VAR 0 14
40654: PPUSH
40655: LD_VAR 0 12
40659: PUSH
40660: LD_INT 1
40662: ARRAY
40663: PPUSH
40664: CALL_OW 52
// end ;
40668: GO 40303
40670: POP
40671: POP
// end ;
40672: GO 39603
40674: POP
40675: POP
// result := result ^ buildings ;
40676: LD_ADDR_VAR 0 7
40680: PUSH
40681: LD_VAR 0 7
40685: PUSH
40686: LD_VAR 0 18
40690: ADD
40691: ST_TO_ADDR
// end else
40692: GO 40835
// begin for i = 1 to personel do
40694: LD_ADDR_VAR 0 8
40698: PUSH
40699: DOUBLE
40700: LD_INT 1
40702: DEC
40703: ST_TO_ADDR
40704: LD_VAR 0 6
40708: PUSH
40709: FOR_TO
40710: IFFALSE 40833
// begin if i > 4 then
40712: LD_VAR 0 8
40716: PUSH
40717: LD_INT 4
40719: GREATER
40720: IFFALSE 40724
// break ;
40722: GO 40833
// x := personel [ i ] ;
40724: LD_ADDR_VAR 0 13
40728: PUSH
40729: LD_VAR 0 6
40733: PUSH
40734: LD_VAR 0 8
40738: ARRAY
40739: ST_TO_ADDR
// if x = - 1 then
40740: LD_VAR 0 13
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: EQUAL
40749: IFFALSE 40753
// continue ;
40751: GO 40709
// PrepareHuman ( false , i , skill ) ;
40753: LD_INT 0
40755: PPUSH
40756: LD_VAR 0 8
40760: PPUSH
40761: LD_VAR 0 4
40765: PPUSH
40766: CALL_OW 380
// un := CreateHuman ;
40770: LD_ADDR_VAR 0 14
40774: PUSH
40775: CALL_OW 44
40779: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40780: LD_VAR 0 14
40784: PPUSH
40785: LD_VAR 0 1
40789: PPUSH
40790: CALL_OW 250
40794: PPUSH
40795: LD_VAR 0 1
40799: PPUSH
40800: CALL_OW 251
40804: PPUSH
40805: LD_INT 10
40807: PPUSH
40808: LD_INT 0
40810: PPUSH
40811: CALL_OW 50
// result := result ^ un ;
40815: LD_ADDR_VAR 0 7
40819: PUSH
40820: LD_VAR 0 7
40824: PUSH
40825: LD_VAR 0 14
40829: ADD
40830: ST_TO_ADDR
// end ;
40831: GO 40709
40833: POP
40834: POP
// end ; end ;
40835: LD_VAR 0 7
40839: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40840: LD_INT 0
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
40846: PPUSH
40847: PPUSH
40848: PPUSH
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
40853: PPUSH
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
// result := false ;
40858: LD_ADDR_VAR 0 3
40862: PUSH
40863: LD_INT 0
40865: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40866: LD_VAR 0 1
40870: NOT
40871: IFTRUE 40896
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 266
40883: PUSH
40884: LD_INT 32
40886: PUSH
40887: LD_INT 33
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: IN
40894: NOT
40895: OR
40896: IFFALSE 40900
// exit ;
40898: GO 42035
// nat := GetNation ( tower ) ;
40900: LD_ADDR_VAR 0 12
40904: PUSH
40905: LD_VAR 0 1
40909: PPUSH
40910: CALL_OW 248
40914: ST_TO_ADDR
// side := GetSide ( tower ) ;
40915: LD_ADDR_VAR 0 16
40919: PUSH
40920: LD_VAR 0 1
40924: PPUSH
40925: CALL_OW 255
40929: ST_TO_ADDR
// x := GetX ( tower ) ;
40930: LD_ADDR_VAR 0 10
40934: PUSH
40935: LD_VAR 0 1
40939: PPUSH
40940: CALL_OW 250
40944: ST_TO_ADDR
// y := GetY ( tower ) ;
40945: LD_ADDR_VAR 0 11
40949: PUSH
40950: LD_VAR 0 1
40954: PPUSH
40955: CALL_OW 251
40959: ST_TO_ADDR
// if not x or not y then
40960: LD_VAR 0 10
40964: NOT
40965: IFTRUE 40974
40967: PUSH
40968: LD_VAR 0 11
40972: NOT
40973: OR
40974: IFFALSE 40978
// exit ;
40976: GO 42035
// weapon := 0 ;
40978: LD_ADDR_VAR 0 18
40982: PUSH
40983: LD_INT 0
40985: ST_TO_ADDR
// fac_list := [ ] ;
40986: LD_ADDR_VAR 0 17
40990: PUSH
40991: EMPTY
40992: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40993: LD_ADDR_VAR 0 6
40997: PUSH
40998: LD_VAR 0 1
41002: PPUSH
41003: CALL_OW 274
41007: PPUSH
41008: LD_VAR 0 2
41012: PPUSH
41013: LD_INT 0
41015: PPUSH
41016: CALL 38570 0 3
41020: PPUSH
41021: LD_INT 30
41023: PUSH
41024: LD_INT 3
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PPUSH
41031: CALL_OW 72
41035: ST_TO_ADDR
// if not factories then
41036: LD_VAR 0 6
41040: NOT
41041: IFFALSE 41045
// exit ;
41043: GO 42035
// for i in factories do
41045: LD_ADDR_VAR 0 8
41049: PUSH
41050: LD_VAR 0 6
41054: PUSH
41055: FOR_IN
41056: IFFALSE 41081
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41058: LD_ADDR_VAR 0 17
41062: PUSH
41063: LD_VAR 0 17
41067: PUSH
41068: LD_VAR 0 8
41072: PPUSH
41073: CALL_OW 478
41077: UNION
41078: ST_TO_ADDR
41079: GO 41055
41081: POP
41082: POP
// if not fac_list then
41083: LD_VAR 0 17
41087: NOT
41088: IFFALSE 41092
// exit ;
41090: GO 42035
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41092: LD_ADDR_VAR 0 5
41096: PUSH
41097: LD_INT 4
41099: PUSH
41100: LD_INT 5
41102: PUSH
41103: LD_INT 9
41105: PUSH
41106: LD_INT 10
41108: PUSH
41109: LD_INT 6
41111: PUSH
41112: LD_INT 7
41114: PUSH
41115: LD_INT 11
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 27
41129: PUSH
41130: LD_INT 28
41132: PUSH
41133: LD_INT 26
41135: PUSH
41136: LD_INT 30
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 43
41147: PUSH
41148: LD_INT 44
41150: PUSH
41151: LD_INT 46
41153: PUSH
41154: LD_INT 45
41156: PUSH
41157: LD_INT 47
41159: PUSH
41160: LD_INT 49
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: PUSH
41176: LD_VAR 0 12
41180: ARRAY
41181: ST_TO_ADDR
// list := list isect fac_list ;
41182: LD_ADDR_VAR 0 5
41186: PUSH
41187: LD_VAR 0 5
41191: PUSH
41192: LD_VAR 0 17
41196: ISECT
41197: ST_TO_ADDR
// if not list then
41198: LD_VAR 0 5
41202: NOT
41203: IFFALSE 41207
// exit ;
41205: GO 42035
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41207: LD_VAR 0 12
41211: PUSH
41212: LD_INT 3
41214: EQUAL
41215: IFFALSE 41227
41217: PUSH
41218: LD_INT 49
41220: PUSH
41221: LD_VAR 0 5
41225: IN
41226: AND
41227: IFFALSE 41247
41229: PUSH
41230: LD_INT 31
41232: PPUSH
41233: LD_VAR 0 16
41237: PPUSH
41238: CALL_OW 321
41242: PUSH
41243: LD_INT 2
41245: EQUAL
41246: AND
41247: IFFALSE 41307
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41249: LD_INT 22
41251: PUSH
41252: LD_VAR 0 16
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 35
41263: PUSH
41264: LD_INT 49
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 91
41273: PUSH
41274: LD_VAR 0 1
41278: PUSH
41279: LD_INT 10
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: LIST
41291: PPUSH
41292: CALL_OW 69
41296: NOT
41297: IFFALSE 41307
// weapon := ru_time_lapser ;
41299: LD_ADDR_VAR 0 18
41303: PUSH
41304: LD_INT 49
41306: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41307: LD_VAR 0 12
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: IN
41322: IFFALSE 41346
41324: PUSH
41325: LD_INT 11
41327: PUSH
41328: LD_VAR 0 5
41332: IN
41333: IFTRUE 41345
41335: PUSH
41336: LD_INT 30
41338: PUSH
41339: LD_VAR 0 5
41343: IN
41344: OR
41345: AND
41346: IFFALSE 41366
41348: PUSH
41349: LD_INT 6
41351: PPUSH
41352: LD_VAR 0 16
41356: PPUSH
41357: CALL_OW 321
41361: PUSH
41362: LD_INT 2
41364: EQUAL
41365: AND
41366: IFFALSE 41533
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41368: LD_INT 22
41370: PUSH
41371: LD_VAR 0 16
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: LD_INT 35
41385: PUSH
41386: LD_INT 11
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 35
41395: PUSH
41396: LD_INT 30
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 91
41410: PUSH
41411: LD_VAR 0 1
41415: PUSH
41416: LD_INT 18
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: LIST
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: LIST
41428: PPUSH
41429: CALL_OW 69
41433: NOT
41434: IFFALSE 41510
41436: PUSH
41437: LD_INT 22
41439: PUSH
41440: LD_VAR 0 16
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 30
41454: PUSH
41455: LD_INT 32
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 30
41464: PUSH
41465: LD_INT 33
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 91
41479: PUSH
41480: LD_VAR 0 1
41484: PUSH
41485: LD_INT 12
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: PPUSH
41501: CALL_OW 69
41505: PUSH
41506: LD_INT 2
41508: GREATER
41509: AND
41510: IFFALSE 41533
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41512: LD_ADDR_VAR 0 18
41516: PUSH
41517: LD_INT 11
41519: PUSH
41520: LD_INT 30
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_VAR 0 12
41531: ARRAY
41532: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41533: LD_VAR 0 18
41537: NOT
41538: IFFALSE 41558
41540: PUSH
41541: LD_INT 40
41543: PPUSH
41544: LD_VAR 0 16
41548: PPUSH
41549: CALL_OW 321
41553: PUSH
41554: LD_INT 2
41556: EQUAL
41557: AND
41558: IFFALSE 41594
41560: PUSH
41561: LD_INT 7
41563: PUSH
41564: LD_VAR 0 5
41568: IN
41569: IFTRUE 41581
41571: PUSH
41572: LD_INT 28
41574: PUSH
41575: LD_VAR 0 5
41579: IN
41580: OR
41581: IFTRUE 41593
41583: PUSH
41584: LD_INT 45
41586: PUSH
41587: LD_VAR 0 5
41591: IN
41592: OR
41593: AND
41594: IFFALSE 41848
// begin hex := GetHexInfo ( x , y ) ;
41596: LD_ADDR_VAR 0 4
41600: PUSH
41601: LD_VAR 0 10
41605: PPUSH
41606: LD_VAR 0 11
41610: PPUSH
41611: CALL_OW 546
41615: ST_TO_ADDR
// if hex [ 1 ] then
41616: LD_VAR 0 4
41620: PUSH
41621: LD_INT 1
41623: ARRAY
41624: IFFALSE 41628
// exit ;
41626: GO 42035
// height := hex [ 2 ] ;
41628: LD_ADDR_VAR 0 15
41632: PUSH
41633: LD_VAR 0 4
41637: PUSH
41638: LD_INT 2
41640: ARRAY
41641: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41642: LD_ADDR_VAR 0 14
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: LD_INT 3
41655: PUSH
41656: LD_INT 5
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: ST_TO_ADDR
// for i in tmp do
41665: LD_ADDR_VAR 0 8
41669: PUSH
41670: LD_VAR 0 14
41674: PUSH
41675: FOR_IN
41676: IFFALSE 41846
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41678: LD_ADDR_VAR 0 9
41682: PUSH
41683: LD_VAR 0 10
41687: PPUSH
41688: LD_VAR 0 8
41692: PPUSH
41693: LD_INT 5
41695: PPUSH
41696: CALL_OW 272
41700: PUSH
41701: LD_VAR 0 11
41705: PPUSH
41706: LD_VAR 0 8
41710: PPUSH
41711: LD_INT 5
41713: PPUSH
41714: CALL_OW 273
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41723: LD_VAR 0 9
41727: PUSH
41728: LD_INT 1
41730: ARRAY
41731: PPUSH
41732: LD_VAR 0 9
41736: PUSH
41737: LD_INT 2
41739: ARRAY
41740: PPUSH
41741: CALL_OW 488
41745: IFFALSE 41844
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41747: LD_ADDR_VAR 0 4
41751: PUSH
41752: LD_VAR 0 9
41756: PUSH
41757: LD_INT 1
41759: ARRAY
41760: PPUSH
41761: LD_VAR 0 9
41765: PUSH
41766: LD_INT 2
41768: ARRAY
41769: PPUSH
41770: CALL_OW 546
41774: ST_TO_ADDR
// if hex [ 1 ] then
41775: LD_VAR 0 4
41779: PUSH
41780: LD_INT 1
41782: ARRAY
41783: IFFALSE 41787
// continue ;
41785: GO 41675
// h := hex [ 2 ] ;
41787: LD_ADDR_VAR 0 13
41791: PUSH
41792: LD_VAR 0 4
41796: PUSH
41797: LD_INT 2
41799: ARRAY
41800: ST_TO_ADDR
// if h + 7 < height then
41801: LD_VAR 0 13
41805: PUSH
41806: LD_INT 7
41808: PLUS
41809: PUSH
41810: LD_VAR 0 15
41814: LESS
41815: IFFALSE 41844
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41817: LD_ADDR_VAR 0 18
41821: PUSH
41822: LD_INT 7
41824: PUSH
41825: LD_INT 28
41827: PUSH
41828: LD_INT 45
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: PUSH
41836: LD_VAR 0 12
41840: ARRAY
41841: ST_TO_ADDR
// break ;
41842: GO 41846
// end ; end ; end ;
41844: GO 41675
41846: POP
41847: POP
// end ; if not weapon then
41848: LD_VAR 0 18
41852: NOT
41853: IFFALSE 41913
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41855: LD_ADDR_VAR 0 5
41859: PUSH
41860: LD_VAR 0 5
41864: PUSH
41865: LD_INT 11
41867: PUSH
41868: LD_INT 30
41870: PUSH
41871: LD_INT 49
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: LIST
41878: DIFF
41879: ST_TO_ADDR
// if not list then
41880: LD_VAR 0 5
41884: NOT
41885: IFFALSE 41889
// exit ;
41887: GO 42035
// weapon := list [ rand ( 1 , list ) ] ;
41889: LD_ADDR_VAR 0 18
41893: PUSH
41894: LD_VAR 0 5
41898: PUSH
41899: LD_INT 1
41901: PPUSH
41902: LD_VAR 0 5
41906: PPUSH
41907: CALL_OW 12
41911: ARRAY
41912: ST_TO_ADDR
// end ; if weapon then
41913: LD_VAR 0 18
41917: IFFALSE 42035
// begin tmp := CostOfWeapon ( weapon ) ;
41919: LD_ADDR_VAR 0 14
41923: PUSH
41924: LD_VAR 0 18
41928: PPUSH
41929: CALL_OW 451
41933: ST_TO_ADDR
// j := GetBase ( tower ) ;
41934: LD_ADDR_VAR 0 9
41938: PUSH
41939: LD_VAR 0 1
41943: PPUSH
41944: CALL_OW 274
41948: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41949: LD_VAR 0 9
41953: PPUSH
41954: LD_INT 1
41956: PPUSH
41957: CALL_OW 275
41961: PUSH
41962: LD_VAR 0 14
41966: PUSH
41967: LD_INT 1
41969: ARRAY
41970: GREATEREQUAL
41971: IFFALSE 41997
41973: PUSH
41974: LD_VAR 0 9
41978: PPUSH
41979: LD_INT 2
41981: PPUSH
41982: CALL_OW 275
41986: PUSH
41987: LD_VAR 0 14
41991: PUSH
41992: LD_INT 2
41994: ARRAY
41995: GREATEREQUAL
41996: AND
41997: IFFALSE 42023
41999: PUSH
42000: LD_VAR 0 9
42004: PPUSH
42005: LD_INT 3
42007: PPUSH
42008: CALL_OW 275
42012: PUSH
42013: LD_VAR 0 14
42017: PUSH
42018: LD_INT 3
42020: ARRAY
42021: GREATEREQUAL
42022: AND
42023: IFFALSE 42035
// result := weapon ;
42025: LD_ADDR_VAR 0 3
42029: PUSH
42030: LD_VAR 0 18
42034: ST_TO_ADDR
// end ; end ;
42035: LD_VAR 0 3
42039: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42040: LD_INT 0
42042: PPUSH
42043: PPUSH
// result := true ;
42044: LD_ADDR_VAR 0 3
42048: PUSH
42049: LD_INT 1
42051: ST_TO_ADDR
// if array1 = array2 then
42052: LD_VAR 0 1
42056: PUSH
42057: LD_VAR 0 2
42061: EQUAL
42062: IFFALSE 42122
// begin for i = 1 to array1 do
42064: LD_ADDR_VAR 0 4
42068: PUSH
42069: DOUBLE
42070: LD_INT 1
42072: DEC
42073: ST_TO_ADDR
42074: LD_VAR 0 1
42078: PUSH
42079: FOR_TO
42080: IFFALSE 42118
// if array1 [ i ] <> array2 [ i ] then
42082: LD_VAR 0 1
42086: PUSH
42087: LD_VAR 0 4
42091: ARRAY
42092: PUSH
42093: LD_VAR 0 2
42097: PUSH
42098: LD_VAR 0 4
42102: ARRAY
42103: NONEQUAL
42104: IFFALSE 42116
// begin result := false ;
42106: LD_ADDR_VAR 0 3
42110: PUSH
42111: LD_INT 0
42113: ST_TO_ADDR
// break ;
42114: GO 42118
// end ;
42116: GO 42079
42118: POP
42119: POP
// end else
42120: GO 42130
// result := false ;
42122: LD_ADDR_VAR 0 3
42126: PUSH
42127: LD_INT 0
42129: ST_TO_ADDR
// end ;
42130: LD_VAR 0 3
42134: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42135: LD_INT 0
42137: PPUSH
42138: PPUSH
// if not array1 or not array2 then
42139: LD_VAR 0 1
42143: NOT
42144: IFTRUE 42153
42146: PUSH
42147: LD_VAR 0 2
42151: NOT
42152: OR
42153: IFFALSE 42157
// exit ;
42155: GO 42221
// result := true ;
42157: LD_ADDR_VAR 0 3
42161: PUSH
42162: LD_INT 1
42164: ST_TO_ADDR
// for i = 1 to array1 do
42165: LD_ADDR_VAR 0 4
42169: PUSH
42170: DOUBLE
42171: LD_INT 1
42173: DEC
42174: ST_TO_ADDR
42175: LD_VAR 0 1
42179: PUSH
42180: FOR_TO
42181: IFFALSE 42219
// if array1 [ i ] <> array2 [ i ] then
42183: LD_VAR 0 1
42187: PUSH
42188: LD_VAR 0 4
42192: ARRAY
42193: PUSH
42194: LD_VAR 0 2
42198: PUSH
42199: LD_VAR 0 4
42203: ARRAY
42204: NONEQUAL
42205: IFFALSE 42217
// begin result := false ;
42207: LD_ADDR_VAR 0 3
42211: PUSH
42212: LD_INT 0
42214: ST_TO_ADDR
// break ;
42215: GO 42219
// end ;
42217: GO 42180
42219: POP
42220: POP
// end ;
42221: LD_VAR 0 3
42225: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42226: LD_INT 0
42228: PPUSH
42229: PPUSH
42230: PPUSH
// pom := GetBase ( fac ) ;
42231: LD_ADDR_VAR 0 5
42235: PUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: CALL_OW 274
42245: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42246: LD_ADDR_VAR 0 4
42250: PUSH
42251: LD_VAR 0 2
42255: PUSH
42256: LD_INT 1
42258: ARRAY
42259: PPUSH
42260: LD_VAR 0 2
42264: PUSH
42265: LD_INT 2
42267: ARRAY
42268: PPUSH
42269: LD_VAR 0 2
42273: PUSH
42274: LD_INT 3
42276: ARRAY
42277: PPUSH
42278: LD_VAR 0 2
42282: PUSH
42283: LD_INT 4
42285: ARRAY
42286: PPUSH
42287: CALL_OW 449
42291: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42292: LD_ADDR_VAR 0 3
42296: PUSH
42297: LD_VAR 0 5
42301: PPUSH
42302: LD_INT 1
42304: PPUSH
42305: CALL_OW 275
42309: PUSH
42310: LD_VAR 0 4
42314: PUSH
42315: LD_INT 1
42317: ARRAY
42318: GREATEREQUAL
42319: IFFALSE 42345
42321: PUSH
42322: LD_VAR 0 5
42326: PPUSH
42327: LD_INT 2
42329: PPUSH
42330: CALL_OW 275
42334: PUSH
42335: LD_VAR 0 4
42339: PUSH
42340: LD_INT 2
42342: ARRAY
42343: GREATEREQUAL
42344: AND
42345: IFFALSE 42371
42347: PUSH
42348: LD_VAR 0 5
42352: PPUSH
42353: LD_INT 3
42355: PPUSH
42356: CALL_OW 275
42360: PUSH
42361: LD_VAR 0 4
42365: PUSH
42366: LD_INT 3
42368: ARRAY
42369: GREATEREQUAL
42370: AND
42371: ST_TO_ADDR
// end ;
42372: LD_VAR 0 3
42376: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42377: LD_INT 0
42379: PPUSH
42380: PPUSH
42381: PPUSH
42382: PPUSH
// pom := GetBase ( building ) ;
42383: LD_ADDR_VAR 0 3
42387: PUSH
42388: LD_VAR 0 1
42392: PPUSH
42393: CALL_OW 274
42397: ST_TO_ADDR
// if not pom then
42398: LD_VAR 0 3
42402: NOT
42403: IFFALSE 42407
// exit ;
42405: GO 42581
// btype := GetBType ( building ) ;
42407: LD_ADDR_VAR 0 5
42411: PUSH
42412: LD_VAR 0 1
42416: PPUSH
42417: CALL_OW 266
42421: ST_TO_ADDR
// if btype = b_armoury then
42422: LD_VAR 0 5
42426: PUSH
42427: LD_INT 4
42429: EQUAL
42430: IFFALSE 42440
// btype := b_barracks ;
42432: LD_ADDR_VAR 0 5
42436: PUSH
42437: LD_INT 5
42439: ST_TO_ADDR
// if btype = b_depot then
42440: LD_VAR 0 5
42444: PUSH
42445: LD_INT 0
42447: EQUAL
42448: IFFALSE 42458
// btype := b_warehouse ;
42450: LD_ADDR_VAR 0 5
42454: PUSH
42455: LD_INT 1
42457: ST_TO_ADDR
// if btype = b_workshop then
42458: LD_VAR 0 5
42462: PUSH
42463: LD_INT 2
42465: EQUAL
42466: IFFALSE 42476
// btype := b_factory ;
42468: LD_ADDR_VAR 0 5
42472: PUSH
42473: LD_INT 3
42475: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42476: LD_ADDR_VAR 0 4
42480: PUSH
42481: LD_VAR 0 5
42485: PPUSH
42486: LD_VAR 0 1
42490: PPUSH
42491: CALL_OW 248
42495: PPUSH
42496: CALL_OW 450
42500: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42501: LD_ADDR_VAR 0 2
42505: PUSH
42506: LD_VAR 0 3
42510: PPUSH
42511: LD_INT 1
42513: PPUSH
42514: CALL_OW 275
42518: PUSH
42519: LD_VAR 0 4
42523: PUSH
42524: LD_INT 1
42526: ARRAY
42527: GREATEREQUAL
42528: IFFALSE 42554
42530: PUSH
42531: LD_VAR 0 3
42535: PPUSH
42536: LD_INT 2
42538: PPUSH
42539: CALL_OW 275
42543: PUSH
42544: LD_VAR 0 4
42548: PUSH
42549: LD_INT 2
42551: ARRAY
42552: GREATEREQUAL
42553: AND
42554: IFFALSE 42580
42556: PUSH
42557: LD_VAR 0 3
42561: PPUSH
42562: LD_INT 3
42564: PPUSH
42565: CALL_OW 275
42569: PUSH
42570: LD_VAR 0 4
42574: PUSH
42575: LD_INT 3
42577: ARRAY
42578: GREATEREQUAL
42579: AND
42580: ST_TO_ADDR
// end ;
42581: LD_VAR 0 2
42585: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42586: LD_INT 0
42588: PPUSH
42589: PPUSH
42590: PPUSH
// pom := GetBase ( building ) ;
42591: LD_ADDR_VAR 0 4
42595: PUSH
42596: LD_VAR 0 1
42600: PPUSH
42601: CALL_OW 274
42605: ST_TO_ADDR
// if not pom then
42606: LD_VAR 0 4
42610: NOT
42611: IFFALSE 42615
// exit ;
42613: GO 42720
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42615: LD_ADDR_VAR 0 5
42619: PUSH
42620: LD_VAR 0 2
42624: PPUSH
42625: LD_VAR 0 1
42629: PPUSH
42630: CALL_OW 248
42634: PPUSH
42635: CALL_OW 450
42639: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42640: LD_ADDR_VAR 0 3
42644: PUSH
42645: LD_VAR 0 4
42649: PPUSH
42650: LD_INT 1
42652: PPUSH
42653: CALL_OW 275
42657: PUSH
42658: LD_VAR 0 5
42662: PUSH
42663: LD_INT 1
42665: ARRAY
42666: GREATEREQUAL
42667: IFFALSE 42693
42669: PUSH
42670: LD_VAR 0 4
42674: PPUSH
42675: LD_INT 2
42677: PPUSH
42678: CALL_OW 275
42682: PUSH
42683: LD_VAR 0 5
42687: PUSH
42688: LD_INT 2
42690: ARRAY
42691: GREATEREQUAL
42692: AND
42693: IFFALSE 42719
42695: PUSH
42696: LD_VAR 0 4
42700: PPUSH
42701: LD_INT 3
42703: PPUSH
42704: CALL_OW 275
42708: PUSH
42709: LD_VAR 0 5
42713: PUSH
42714: LD_INT 3
42716: ARRAY
42717: GREATEREQUAL
42718: AND
42719: ST_TO_ADDR
// end ;
42720: LD_VAR 0 3
42724: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42725: LD_INT 0
42727: PPUSH
42728: PPUSH
42729: PPUSH
42730: PPUSH
42731: PPUSH
42732: PPUSH
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
// result := false ;
42738: LD_ADDR_VAR 0 8
42742: PUSH
42743: LD_INT 0
42745: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42746: LD_VAR 0 5
42750: NOT
42751: IFTRUE 42760
42753: PUSH
42754: LD_VAR 0 1
42758: NOT
42759: OR
42760: IFTRUE 42769
42762: PUSH
42763: LD_VAR 0 2
42767: NOT
42768: OR
42769: IFTRUE 42778
42771: PUSH
42772: LD_VAR 0 3
42776: NOT
42777: OR
42778: IFFALSE 42782
// exit ;
42780: GO 43608
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42782: LD_ADDR_VAR 0 14
42786: PUSH
42787: LD_VAR 0 1
42791: PPUSH
42792: LD_VAR 0 2
42796: PPUSH
42797: LD_VAR 0 3
42801: PPUSH
42802: LD_VAR 0 4
42806: PPUSH
42807: LD_VAR 0 5
42811: PUSH
42812: LD_INT 1
42814: ARRAY
42815: PPUSH
42816: CALL_OW 248
42820: PPUSH
42821: LD_INT 0
42823: PPUSH
42824: CALL 44889 0 6
42828: ST_TO_ADDR
// if not hexes then
42829: LD_VAR 0 14
42833: NOT
42834: IFFALSE 42838
// exit ;
42836: GO 43608
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42838: LD_ADDR_VAR 0 17
42842: PUSH
42843: LD_VAR 0 5
42847: PPUSH
42848: LD_INT 22
42850: PUSH
42851: LD_VAR 0 13
42855: PPUSH
42856: CALL_OW 255
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 30
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 30
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PPUSH
42897: CALL_OW 72
42901: ST_TO_ADDR
// for i = 1 to hexes do
42902: LD_ADDR_VAR 0 9
42906: PUSH
42907: DOUBLE
42908: LD_INT 1
42910: DEC
42911: ST_TO_ADDR
42912: LD_VAR 0 14
42916: PUSH
42917: FOR_TO
42918: IFFALSE 43606
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42920: LD_ADDR_VAR 0 13
42924: PUSH
42925: LD_VAR 0 14
42929: PUSH
42930: LD_VAR 0 9
42934: ARRAY
42935: PUSH
42936: LD_INT 1
42938: ARRAY
42939: PPUSH
42940: LD_VAR 0 14
42944: PUSH
42945: LD_VAR 0 9
42949: ARRAY
42950: PUSH
42951: LD_INT 2
42953: ARRAY
42954: PPUSH
42955: CALL_OW 428
42959: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42960: LD_VAR 0 14
42964: PUSH
42965: LD_VAR 0 9
42969: ARRAY
42970: PUSH
42971: LD_INT 1
42973: ARRAY
42974: PPUSH
42975: LD_VAR 0 14
42979: PUSH
42980: LD_VAR 0 9
42984: ARRAY
42985: PUSH
42986: LD_INT 2
42988: ARRAY
42989: PPUSH
42990: CALL_OW 351
42994: IFTRUE 43033
42996: PUSH
42997: LD_VAR 0 14
43001: PUSH
43002: LD_VAR 0 9
43006: ARRAY
43007: PUSH
43008: LD_INT 1
43010: ARRAY
43011: PPUSH
43012: LD_VAR 0 14
43016: PUSH
43017: LD_VAR 0 9
43021: ARRAY
43022: PUSH
43023: LD_INT 2
43025: ARRAY
43026: PPUSH
43027: CALL_OW 488
43031: NOT
43032: OR
43033: IFTRUE 43050
43035: PUSH
43036: LD_VAR 0 13
43040: PPUSH
43041: CALL_OW 247
43045: PUSH
43046: LD_INT 3
43048: EQUAL
43049: OR
43050: IFFALSE 43056
// exit ;
43052: POP
43053: POP
43054: GO 43608
// if not tmp then
43056: LD_VAR 0 13
43060: NOT
43061: IFFALSE 43065
// continue ;
43063: GO 42917
// result := true ;
43065: LD_ADDR_VAR 0 8
43069: PUSH
43070: LD_INT 1
43072: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43073: LD_VAR 0 6
43077: IFFALSE 43094
43079: PUSH
43080: LD_VAR 0 13
43084: PPUSH
43085: CALL_OW 247
43089: PUSH
43090: LD_INT 2
43092: EQUAL
43093: AND
43094: IFFALSE 43111
43096: PUSH
43097: LD_VAR 0 13
43101: PPUSH
43102: CALL_OW 263
43106: PUSH
43107: LD_INT 1
43109: EQUAL
43110: AND
43111: IFFALSE 43275
// begin if IsDrivenBy ( tmp ) then
43113: LD_VAR 0 13
43117: PPUSH
43118: CALL_OW 311
43122: IFFALSE 43126
// continue ;
43124: GO 42917
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43126: LD_VAR 0 6
43130: PPUSH
43131: LD_INT 3
43133: PUSH
43134: LD_INT 60
43136: PUSH
43137: EMPTY
43138: LIST
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: LD_INT 55
43149: PUSH
43150: EMPTY
43151: LIST
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PPUSH
43161: CALL_OW 72
43165: IFFALSE 43273
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43167: LD_ADDR_VAR 0 18
43171: PUSH
43172: LD_VAR 0 6
43176: PPUSH
43177: LD_INT 3
43179: PUSH
43180: LD_INT 60
43182: PUSH
43183: EMPTY
43184: LIST
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: PUSH
43193: LD_INT 55
43195: PUSH
43196: EMPTY
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PPUSH
43207: CALL_OW 72
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: ST_TO_ADDR
// if IsInUnit ( driver ) then
43216: LD_VAR 0 18
43220: PPUSH
43221: CALL_OW 310
43225: IFFALSE 43236
// ComExit ( driver ) ;
43227: LD_VAR 0 18
43231: PPUSH
43232: CALL 68889 0 1
// AddComEnterUnit ( driver , tmp ) ;
43236: LD_VAR 0 18
43240: PPUSH
43241: LD_VAR 0 13
43245: PPUSH
43246: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43250: LD_VAR 0 18
43254: PPUSH
43255: LD_VAR 0 7
43259: PPUSH
43260: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43264: LD_VAR 0 18
43268: PPUSH
43269: CALL_OW 181
// end ; continue ;
43273: GO 42917
// end ; if not cleaners or not tmp in cleaners then
43275: LD_VAR 0 6
43279: NOT
43280: IFTRUE 43295
43282: PUSH
43283: LD_VAR 0 13
43287: PUSH
43288: LD_VAR 0 6
43292: IN
43293: NOT
43294: OR
43295: IFFALSE 43604
// begin if dep then
43297: LD_VAR 0 17
43301: IFFALSE 43437
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43303: LD_ADDR_VAR 0 16
43307: PUSH
43308: LD_VAR 0 17
43312: PUSH
43313: LD_INT 1
43315: ARRAY
43316: PPUSH
43317: CALL_OW 250
43321: PPUSH
43322: LD_VAR 0 17
43326: PUSH
43327: LD_INT 1
43329: ARRAY
43330: PPUSH
43331: CALL_OW 254
43335: PPUSH
43336: LD_INT 5
43338: PPUSH
43339: CALL_OW 272
43343: PUSH
43344: LD_VAR 0 17
43348: PUSH
43349: LD_INT 1
43351: ARRAY
43352: PPUSH
43353: CALL_OW 251
43357: PPUSH
43358: LD_VAR 0 17
43362: PUSH
43363: LD_INT 1
43365: ARRAY
43366: PPUSH
43367: CALL_OW 254
43371: PPUSH
43372: LD_INT 5
43374: PPUSH
43375: CALL_OW 273
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43384: LD_VAR 0 16
43388: PUSH
43389: LD_INT 1
43391: ARRAY
43392: PPUSH
43393: LD_VAR 0 16
43397: PUSH
43398: LD_INT 2
43400: ARRAY
43401: PPUSH
43402: CALL_OW 488
43406: IFFALSE 43437
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43408: LD_VAR 0 13
43412: PPUSH
43413: LD_VAR 0 16
43417: PUSH
43418: LD_INT 1
43420: ARRAY
43421: PPUSH
43422: LD_VAR 0 16
43426: PUSH
43427: LD_INT 2
43429: ARRAY
43430: PPUSH
43431: CALL_OW 111
// continue ;
43435: GO 42917
// end ; end ; r := GetDir ( tmp ) ;
43437: LD_ADDR_VAR 0 15
43441: PUSH
43442: LD_VAR 0 13
43446: PPUSH
43447: CALL_OW 254
43451: ST_TO_ADDR
// if r = 5 then
43452: LD_VAR 0 15
43456: PUSH
43457: LD_INT 5
43459: EQUAL
43460: IFFALSE 43470
// r := 0 ;
43462: LD_ADDR_VAR 0 15
43466: PUSH
43467: LD_INT 0
43469: ST_TO_ADDR
// for j = r to 5 do
43470: LD_ADDR_VAR 0 10
43474: PUSH
43475: DOUBLE
43476: LD_VAR 0 15
43480: DEC
43481: ST_TO_ADDR
43482: LD_INT 5
43484: PUSH
43485: FOR_TO
43486: IFFALSE 43602
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43488: LD_ADDR_VAR 0 11
43492: PUSH
43493: LD_VAR 0 13
43497: PPUSH
43498: CALL_OW 250
43502: PPUSH
43503: LD_VAR 0 10
43507: PPUSH
43508: LD_INT 2
43510: PPUSH
43511: CALL_OW 272
43515: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43516: LD_ADDR_VAR 0 12
43520: PUSH
43521: LD_VAR 0 13
43525: PPUSH
43526: CALL_OW 251
43530: PPUSH
43531: LD_VAR 0 10
43535: PPUSH
43536: LD_INT 2
43538: PPUSH
43539: CALL_OW 273
43543: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43544: LD_VAR 0 11
43548: PPUSH
43549: LD_VAR 0 12
43553: PPUSH
43554: CALL_OW 488
43558: IFFALSE 43577
43560: PUSH
43561: LD_VAR 0 11
43565: PPUSH
43566: LD_VAR 0 12
43570: PPUSH
43571: CALL_OW 428
43575: NOT
43576: AND
43577: IFFALSE 43600
// begin ComMoveXY ( tmp , _x , _y ) ;
43579: LD_VAR 0 13
43583: PPUSH
43584: LD_VAR 0 11
43588: PPUSH
43589: LD_VAR 0 12
43593: PPUSH
43594: CALL_OW 111
// break ;
43598: GO 43602
// end ; end ;
43600: GO 43485
43602: POP
43603: POP
// end ; end ;
43604: GO 42917
43606: POP
43607: POP
// end ;
43608: LD_VAR 0 8
43612: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43613: LD_INT 0
43615: PPUSH
// result := true ;
43616: LD_ADDR_VAR 0 3
43620: PUSH
43621: LD_INT 1
43623: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43624: LD_VAR 0 2
43628: PUSH
43629: LD_INT 24
43631: DOUBLE
43632: EQUAL
43633: IFTRUE 43643
43635: LD_INT 33
43637: DOUBLE
43638: EQUAL
43639: IFTRUE 43643
43641: GO 43668
43643: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43644: LD_ADDR_VAR 0 3
43648: PUSH
43649: LD_INT 32
43651: PPUSH
43652: LD_VAR 0 1
43656: PPUSH
43657: CALL_OW 321
43661: PUSH
43662: LD_INT 2
43664: EQUAL
43665: ST_TO_ADDR
43666: GO 43984
43668: LD_INT 20
43670: DOUBLE
43671: EQUAL
43672: IFTRUE 43676
43674: GO 43701
43676: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43677: LD_ADDR_VAR 0 3
43681: PUSH
43682: LD_INT 6
43684: PPUSH
43685: LD_VAR 0 1
43689: PPUSH
43690: CALL_OW 321
43694: PUSH
43695: LD_INT 2
43697: EQUAL
43698: ST_TO_ADDR
43699: GO 43984
43701: LD_INT 22
43703: DOUBLE
43704: EQUAL
43705: IFTRUE 43715
43707: LD_INT 36
43709: DOUBLE
43710: EQUAL
43711: IFTRUE 43715
43713: GO 43740
43715: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43716: LD_ADDR_VAR 0 3
43720: PUSH
43721: LD_INT 15
43723: PPUSH
43724: LD_VAR 0 1
43728: PPUSH
43729: CALL_OW 321
43733: PUSH
43734: LD_INT 2
43736: EQUAL
43737: ST_TO_ADDR
43738: GO 43984
43740: LD_INT 30
43742: DOUBLE
43743: EQUAL
43744: IFTRUE 43748
43746: GO 43773
43748: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43749: LD_ADDR_VAR 0 3
43753: PUSH
43754: LD_INT 20
43756: PPUSH
43757: LD_VAR 0 1
43761: PPUSH
43762: CALL_OW 321
43766: PUSH
43767: LD_INT 2
43769: EQUAL
43770: ST_TO_ADDR
43771: GO 43984
43773: LD_INT 28
43775: DOUBLE
43776: EQUAL
43777: IFTRUE 43787
43779: LD_INT 21
43781: DOUBLE
43782: EQUAL
43783: IFTRUE 43787
43785: GO 43812
43787: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43788: LD_ADDR_VAR 0 3
43792: PUSH
43793: LD_INT 21
43795: PPUSH
43796: LD_VAR 0 1
43800: PPUSH
43801: CALL_OW 321
43805: PUSH
43806: LD_INT 2
43808: EQUAL
43809: ST_TO_ADDR
43810: GO 43984
43812: LD_INT 16
43814: DOUBLE
43815: EQUAL
43816: IFTRUE 43820
43818: GO 43845
43820: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43821: LD_ADDR_VAR 0 3
43825: PUSH
43826: LD_INT 84
43828: PPUSH
43829: LD_VAR 0 1
43833: PPUSH
43834: CALL_OW 321
43838: PUSH
43839: LD_INT 2
43841: EQUAL
43842: ST_TO_ADDR
43843: GO 43984
43845: LD_INT 19
43847: DOUBLE
43848: EQUAL
43849: IFTRUE 43859
43851: LD_INT 23
43853: DOUBLE
43854: EQUAL
43855: IFTRUE 43859
43857: GO 43884
43859: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43860: LD_ADDR_VAR 0 3
43864: PUSH
43865: LD_INT 83
43867: PPUSH
43868: LD_VAR 0 1
43872: PPUSH
43873: CALL_OW 321
43877: PUSH
43878: LD_INT 2
43880: EQUAL
43881: ST_TO_ADDR
43882: GO 43984
43884: LD_INT 17
43886: DOUBLE
43887: EQUAL
43888: IFTRUE 43892
43890: GO 43917
43892: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43893: LD_ADDR_VAR 0 3
43897: PUSH
43898: LD_INT 39
43900: PPUSH
43901: LD_VAR 0 1
43905: PPUSH
43906: CALL_OW 321
43910: PUSH
43911: LD_INT 2
43913: EQUAL
43914: ST_TO_ADDR
43915: GO 43984
43917: LD_INT 18
43919: DOUBLE
43920: EQUAL
43921: IFTRUE 43925
43923: GO 43950
43925: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43926: LD_ADDR_VAR 0 3
43930: PUSH
43931: LD_INT 40
43933: PPUSH
43934: LD_VAR 0 1
43938: PPUSH
43939: CALL_OW 321
43943: PUSH
43944: LD_INT 2
43946: EQUAL
43947: ST_TO_ADDR
43948: GO 43984
43950: LD_INT 27
43952: DOUBLE
43953: EQUAL
43954: IFTRUE 43958
43956: GO 43983
43958: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43959: LD_ADDR_VAR 0 3
43963: PUSH
43964: LD_INT 35
43966: PPUSH
43967: LD_VAR 0 1
43971: PPUSH
43972: CALL_OW 321
43976: PUSH
43977: LD_INT 2
43979: EQUAL
43980: ST_TO_ADDR
43981: GO 43984
43983: POP
// end ;
43984: LD_VAR 0 3
43988: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43989: LD_INT 0
43991: PPUSH
43992: PPUSH
43993: PPUSH
43994: PPUSH
43995: PPUSH
43996: PPUSH
43997: PPUSH
43998: PPUSH
43999: PPUSH
44000: PPUSH
44001: PPUSH
// result := false ;
44002: LD_ADDR_VAR 0 6
44006: PUSH
44007: LD_INT 0
44009: ST_TO_ADDR
// if btype = b_depot then
44010: LD_VAR 0 2
44014: PUSH
44015: LD_INT 0
44017: EQUAL
44018: IFFALSE 44030
// begin result := true ;
44020: LD_ADDR_VAR 0 6
44024: PUSH
44025: LD_INT 1
44027: ST_TO_ADDR
// exit ;
44028: GO 44884
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44030: LD_VAR 0 1
44034: NOT
44035: IFTRUE 44060
44037: PUSH
44038: LD_VAR 0 1
44042: PPUSH
44043: CALL_OW 266
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: IN
44058: NOT
44059: OR
44060: IFTRUE 44069
44062: PUSH
44063: LD_VAR 0 2
44067: NOT
44068: OR
44069: IFTRUE 44105
44071: PUSH
44072: LD_VAR 0 5
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: LD_INT 4
44091: PUSH
44092: LD_INT 5
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: IN
44103: NOT
44104: OR
44105: IFTRUE 44124
44107: PUSH
44108: LD_VAR 0 3
44112: PPUSH
44113: LD_VAR 0 4
44117: PPUSH
44118: CALL_OW 488
44122: NOT
44123: OR
44124: IFFALSE 44128
// exit ;
44126: GO 44884
// side := GetSide ( depot ) ;
44128: LD_ADDR_VAR 0 9
44132: PUSH
44133: LD_VAR 0 1
44137: PPUSH
44138: CALL_OW 255
44142: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44143: LD_VAR 0 9
44147: PPUSH
44148: LD_VAR 0 2
44152: PPUSH
44153: CALL 43613 0 2
44157: NOT
44158: IFFALSE 44162
// exit ;
44160: GO 44884
// pom := GetBase ( depot ) ;
44162: LD_ADDR_VAR 0 10
44166: PUSH
44167: LD_VAR 0 1
44171: PPUSH
44172: CALL_OW 274
44176: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44177: LD_ADDR_VAR 0 11
44181: PUSH
44182: LD_VAR 0 2
44186: PPUSH
44187: LD_VAR 0 1
44191: PPUSH
44192: CALL_OW 248
44196: PPUSH
44197: CALL_OW 450
44201: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44202: LD_VAR 0 10
44206: PPUSH
44207: LD_INT 1
44209: PPUSH
44210: CALL_OW 275
44214: PUSH
44215: LD_VAR 0 11
44219: PUSH
44220: LD_INT 1
44222: ARRAY
44223: GREATEREQUAL
44224: IFFALSE 44250
44226: PUSH
44227: LD_VAR 0 10
44231: PPUSH
44232: LD_INT 2
44234: PPUSH
44235: CALL_OW 275
44239: PUSH
44240: LD_VAR 0 11
44244: PUSH
44245: LD_INT 2
44247: ARRAY
44248: GREATEREQUAL
44249: AND
44250: IFFALSE 44276
44252: PUSH
44253: LD_VAR 0 10
44257: PPUSH
44258: LD_INT 3
44260: PPUSH
44261: CALL_OW 275
44265: PUSH
44266: LD_VAR 0 11
44270: PUSH
44271: LD_INT 3
44273: ARRAY
44274: GREATEREQUAL
44275: AND
44276: NOT
44277: IFFALSE 44281
// exit ;
44279: GO 44884
// if GetBType ( depot ) = b_depot then
44281: LD_VAR 0 1
44285: PPUSH
44286: CALL_OW 266
44290: PUSH
44291: LD_INT 0
44293: EQUAL
44294: IFFALSE 44306
// dist := 28 else
44296: LD_ADDR_VAR 0 14
44300: PUSH
44301: LD_INT 28
44303: ST_TO_ADDR
44304: GO 44314
// dist := 36 ;
44306: LD_ADDR_VAR 0 14
44310: PUSH
44311: LD_INT 36
44313: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44314: LD_VAR 0 1
44318: PPUSH
44319: LD_VAR 0 3
44323: PPUSH
44324: LD_VAR 0 4
44328: PPUSH
44329: CALL_OW 297
44333: PUSH
44334: LD_VAR 0 14
44338: GREATER
44339: IFFALSE 44343
// exit ;
44341: GO 44884
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44343: LD_ADDR_VAR 0 12
44347: PUSH
44348: LD_VAR 0 2
44352: PPUSH
44353: LD_VAR 0 3
44357: PPUSH
44358: LD_VAR 0 4
44362: PPUSH
44363: LD_VAR 0 5
44367: PPUSH
44368: LD_VAR 0 1
44372: PPUSH
44373: CALL_OW 248
44377: PPUSH
44378: LD_INT 0
44380: PPUSH
44381: CALL 44889 0 6
44385: ST_TO_ADDR
// if not hexes then
44386: LD_VAR 0 12
44390: NOT
44391: IFFALSE 44395
// exit ;
44393: GO 44884
// hex := GetHexInfo ( x , y ) ;
44395: LD_ADDR_VAR 0 15
44399: PUSH
44400: LD_VAR 0 3
44404: PPUSH
44405: LD_VAR 0 4
44409: PPUSH
44410: CALL_OW 546
44414: ST_TO_ADDR
// if hex [ 1 ] then
44415: LD_VAR 0 15
44419: PUSH
44420: LD_INT 1
44422: ARRAY
44423: IFFALSE 44427
// exit ;
44425: GO 44884
// height := hex [ 2 ] ;
44427: LD_ADDR_VAR 0 13
44431: PUSH
44432: LD_VAR 0 15
44436: PUSH
44437: LD_INT 2
44439: ARRAY
44440: ST_TO_ADDR
// for i = 1 to hexes do
44441: LD_ADDR_VAR 0 7
44445: PUSH
44446: DOUBLE
44447: LD_INT 1
44449: DEC
44450: ST_TO_ADDR
44451: LD_VAR 0 12
44455: PUSH
44456: FOR_TO
44457: IFFALSE 44801
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44459: LD_VAR 0 12
44463: PUSH
44464: LD_VAR 0 7
44468: ARRAY
44469: PUSH
44470: LD_INT 1
44472: ARRAY
44473: PPUSH
44474: LD_VAR 0 12
44478: PUSH
44479: LD_VAR 0 7
44483: ARRAY
44484: PUSH
44485: LD_INT 2
44487: ARRAY
44488: PPUSH
44489: CALL_OW 488
44493: NOT
44494: IFTRUE 44536
44496: PUSH
44497: LD_VAR 0 12
44501: PUSH
44502: LD_VAR 0 7
44506: ARRAY
44507: PUSH
44508: LD_INT 1
44510: ARRAY
44511: PPUSH
44512: LD_VAR 0 12
44516: PUSH
44517: LD_VAR 0 7
44521: ARRAY
44522: PUSH
44523: LD_INT 2
44525: ARRAY
44526: PPUSH
44527: CALL_OW 428
44531: PUSH
44532: LD_INT 0
44534: GREATER
44535: OR
44536: IFTRUE 44574
44538: PUSH
44539: LD_VAR 0 12
44543: PUSH
44544: LD_VAR 0 7
44548: ARRAY
44549: PUSH
44550: LD_INT 1
44552: ARRAY
44553: PPUSH
44554: LD_VAR 0 12
44558: PUSH
44559: LD_VAR 0 7
44563: ARRAY
44564: PUSH
44565: LD_INT 2
44567: ARRAY
44568: PPUSH
44569: CALL_OW 351
44573: OR
44574: IFFALSE 44580
// exit ;
44576: POP
44577: POP
44578: GO 44884
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44580: LD_ADDR_VAR 0 8
44584: PUSH
44585: LD_VAR 0 12
44589: PUSH
44590: LD_VAR 0 7
44594: ARRAY
44595: PUSH
44596: LD_INT 1
44598: ARRAY
44599: PPUSH
44600: LD_VAR 0 12
44604: PUSH
44605: LD_VAR 0 7
44609: ARRAY
44610: PUSH
44611: LD_INT 2
44613: ARRAY
44614: PPUSH
44615: CALL_OW 546
44619: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44620: LD_VAR 0 8
44624: PUSH
44625: LD_INT 1
44627: ARRAY
44628: IFTRUE 44650
44630: PUSH
44631: LD_VAR 0 8
44635: PUSH
44636: LD_INT 2
44638: ARRAY
44639: PUSH
44640: LD_VAR 0 13
44644: PUSH
44645: LD_INT 2
44647: PLUS
44648: GREATER
44649: OR
44650: IFTRUE 44672
44652: PUSH
44653: LD_VAR 0 8
44657: PUSH
44658: LD_INT 2
44660: ARRAY
44661: PUSH
44662: LD_VAR 0 13
44666: PUSH
44667: LD_INT 2
44669: MINUS
44670: LESS
44671: OR
44672: IFTRUE 44740
44674: PUSH
44675: LD_VAR 0 8
44679: PUSH
44680: LD_INT 3
44682: ARRAY
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 8
44689: PUSH
44690: LD_INT 9
44692: PUSH
44693: LD_INT 10
44695: PUSH
44696: LD_INT 11
44698: PUSH
44699: LD_INT 12
44701: PUSH
44702: LD_INT 13
44704: PUSH
44705: LD_INT 16
44707: PUSH
44708: LD_INT 17
44710: PUSH
44711: LD_INT 18
44713: PUSH
44714: LD_INT 19
44716: PUSH
44717: LD_INT 20
44719: PUSH
44720: LD_INT 21
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: IN
44738: NOT
44739: OR
44740: IFTRUE 44753
44742: PUSH
44743: LD_VAR 0 8
44747: PUSH
44748: LD_INT 5
44750: ARRAY
44751: NOT
44752: OR
44753: IFTRUE 44793
44755: PUSH
44756: LD_VAR 0 8
44760: PUSH
44761: LD_INT 6
44763: ARRAY
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 7
44773: PUSH
44774: LD_INT 9
44776: PUSH
44777: LD_INT 10
44779: PUSH
44780: LD_INT 11
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: IN
44791: NOT
44792: OR
44793: IFFALSE 44799
// exit ;
44795: POP
44796: POP
44797: GO 44884
// end ;
44799: GO 44456
44801: POP
44802: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44803: LD_VAR 0 9
44807: PPUSH
44808: LD_VAR 0 3
44812: PPUSH
44813: LD_VAR 0 4
44817: PPUSH
44818: LD_INT 20
44820: PPUSH
44821: CALL 36703 0 4
44825: PUSH
44826: LD_INT 4
44828: ARRAY
44829: IFFALSE 44833
// exit ;
44831: GO 44884
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44833: LD_VAR 0 2
44837: PUSH
44838: LD_INT 29
44840: PUSH
44841: LD_INT 30
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: IN
44848: IFFALSE 44872
44850: PUSH
44851: LD_VAR 0 3
44855: PPUSH
44856: LD_VAR 0 4
44860: PPUSH
44861: LD_VAR 0 9
44865: PPUSH
44866: CALL_OW 440
44870: NOT
44871: AND
44872: IFFALSE 44876
// exit ;
44874: GO 44884
// result := true ;
44876: LD_ADDR_VAR 0 6
44880: PUSH
44881: LD_INT 1
44883: ST_TO_ADDR
// end ;
44884: LD_VAR 0 6
44888: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44889: LD_INT 0
44891: PPUSH
44892: PPUSH
44893: PPUSH
44894: PPUSH
44895: PPUSH
44896: PPUSH
44897: PPUSH
44898: PPUSH
44899: PPUSH
44900: PPUSH
44901: PPUSH
44902: PPUSH
44903: PPUSH
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
44908: PPUSH
44909: PPUSH
44910: PPUSH
44911: PPUSH
44912: PPUSH
44913: PPUSH
44914: PPUSH
44915: PPUSH
44916: PPUSH
44917: PPUSH
44918: PPUSH
44919: PPUSH
44920: PPUSH
44921: PPUSH
44922: PPUSH
44923: PPUSH
44924: PPUSH
44925: PPUSH
44926: PPUSH
44927: PPUSH
44928: PPUSH
44929: PPUSH
44930: PPUSH
44931: PPUSH
44932: PPUSH
44933: PPUSH
44934: PPUSH
44935: PPUSH
44936: PPUSH
44937: PPUSH
44938: PPUSH
44939: PPUSH
44940: PPUSH
44941: PPUSH
44942: PPUSH
44943: PPUSH
44944: PPUSH
44945: PPUSH
44946: PPUSH
44947: PPUSH
44948: PPUSH
// result = [ ] ;
44949: LD_ADDR_VAR 0 7
44953: PUSH
44954: EMPTY
44955: ST_TO_ADDR
// temp_list = [ ] ;
44956: LD_ADDR_VAR 0 9
44960: PUSH
44961: EMPTY
44962: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44963: LD_VAR 0 4
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 3
44979: PUSH
44980: LD_INT 4
44982: PUSH
44983: LD_INT 5
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: IN
44994: NOT
44995: IFTRUE 45038
44997: PUSH
44998: LD_VAR 0 1
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: IN
45013: IFFALSE 45037
45015: PUSH
45016: LD_VAR 0 5
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: LD_INT 3
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: IN
45035: NOT
45036: AND
45037: OR
45038: IFFALSE 45042
// exit ;
45040: GO 63441
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45042: LD_VAR 0 1
45046: PUSH
45047: LD_INT 6
45049: PUSH
45050: LD_INT 7
45052: PUSH
45053: LD_INT 8
45055: PUSH
45056: LD_INT 13
45058: PUSH
45059: LD_INT 12
45061: PUSH
45062: LD_INT 15
45064: PUSH
45065: LD_INT 11
45067: PUSH
45068: LD_INT 14
45070: PUSH
45071: LD_INT 10
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: IN
45085: IFFALSE 45095
// btype = b_lab ;
45087: LD_ADDR_VAR 0 1
45091: PUSH
45092: LD_INT 6
45094: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45095: LD_VAR 0 6
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: IN
45114: NOT
45115: IFTRUE 45183
45117: PUSH
45118: LD_VAR 0 1
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 3
45134: PUSH
45135: LD_INT 6
45137: PUSH
45138: LD_INT 36
45140: PUSH
45141: LD_INT 4
45143: PUSH
45144: LD_INT 5
45146: PUSH
45147: LD_INT 31
45149: PUSH
45150: LD_INT 32
45152: PUSH
45153: LD_INT 33
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: IN
45169: NOT
45170: IFFALSE 45182
45172: PUSH
45173: LD_VAR 0 6
45177: PUSH
45178: LD_INT 1
45180: EQUAL
45181: AND
45182: OR
45183: IFTRUE 45215
45185: PUSH
45186: LD_VAR 0 1
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 3
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: IN
45201: NOT
45202: IFFALSE 45214
45204: PUSH
45205: LD_VAR 0 6
45209: PUSH
45210: LD_INT 2
45212: EQUAL
45213: AND
45214: OR
45215: IFFALSE 45225
// mode = 0 ;
45217: LD_ADDR_VAR 0 6
45221: PUSH
45222: LD_INT 0
45224: ST_TO_ADDR
// case mode of 0 :
45225: LD_VAR 0 6
45229: PUSH
45230: LD_INT 0
45232: DOUBLE
45233: EQUAL
45234: IFTRUE 45238
45236: GO 56691
45238: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45239: LD_ADDR_VAR 0 11
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: LD_INT 3
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 3
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45432: LD_ADDR_VAR 0 12
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 3
45589: NEG
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 3
45600: NEG
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45628: LD_ADDR_VAR 0 13
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 3
45787: NEG
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 3
45799: NEG
45800: PUSH
45801: LD_INT 3
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45827: LD_ADDR_VAR 0 14
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 2
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 3
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: LD_INT 3
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46023: LD_ADDR_VAR 0 15
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 3
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46216: LD_ADDR_VAR 0 16
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46409: LD_ADDR_VAR 0 17
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46639: LD_ADDR_VAR 0 18
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46869: LD_ADDR_VAR 0 19
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47099: LD_ADDR_VAR 0 20
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47329: LD_ADDR_VAR 0 21
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47559: LD_ADDR_VAR 0 22
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47789: LD_ADDR_VAR 0 23
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 2
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 3
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 3
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48069: LD_ADDR_VAR 0 24
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 3
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 3
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48345: LD_ADDR_VAR 0 25
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 3
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 3
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 3
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 3
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48619: LD_ADDR_VAR 0 26
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: LD_INT 3
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 3
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48895: LD_ADDR_VAR 0 27
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 2
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: NEG
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 3
49140: NEG
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49175: LD_ADDR_VAR 0 28
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: LD_INT 3
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 3
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 3
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 3
49422: NEG
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49457: LD_ADDR_VAR 0 29
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 3
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 3
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49736: LD_ADDR_VAR 0 30
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 3
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 3
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50014: LD_ADDR_VAR 0 31
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 3
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: NEG
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50292: LD_ADDR_VAR 0 32
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 3
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: LD_INT 3
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 3
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50570: LD_ADDR_VAR 0 33
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 3
50814: NEG
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50849: LD_ADDR_VAR 0 34
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 3
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 3
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: LD_INT 3
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 3
51094: NEG
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51129: LD_ADDR_VAR 0 35
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51241: LD_ADDR_VAR 0 36
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51353: LD_ADDR_VAR 0 37
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51465: LD_ADDR_VAR 0 38
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51577: LD_ADDR_VAR 0 39
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51689: LD_ADDR_VAR 0 40
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51801: LD_ADDR_VAR 0 41
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 3
52044: PUSH
52045: LD_INT 3
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 3
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 3
52098: NEG
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52151: LD_ADDR_VAR 0 42
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 3
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 3
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 3
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: LD_INT 3
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: LD_INT 3
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52501: LD_ADDR_VAR 0 43
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 3
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 3
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 3
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 3
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 3
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 3
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52849: LD_ADDR_VAR 0 44
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: LD_INT 3
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: LD_INT 3
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53199: LD_ADDR_VAR 0 45
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 3
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 3
53508: NEG
53509: PUSH
53510: LD_INT 3
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53549: LD_ADDR_VAR 0 46
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 3
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 3
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53897: LD_ADDR_VAR 0 47
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54048: LD_ADDR_VAR 0 48
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54195: LD_ADDR_VAR 0 49
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54339: LD_ADDR_VAR 0 50
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54483: LD_ADDR_VAR 0 51
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54630: LD_ADDR_VAR 0 52
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54781: LD_ADDR_VAR 0 53
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55011: LD_ADDR_VAR 0 54
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55241: LD_ADDR_VAR 0 55
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55471: LD_ADDR_VAR 0 56
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55701: LD_ADDR_VAR 0 57
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55931: LD_ADDR_VAR 0 58
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56161: LD_ADDR_VAR 0 59
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56249: LD_ADDR_VAR 0 60
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56337: LD_ADDR_VAR 0 61
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56425: LD_ADDR_VAR 0 62
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56513: LD_ADDR_VAR 0 63
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56601: LD_ADDR_VAR 0 64
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: ST_TO_ADDR
// end ; 1 :
56689: GO 62586
56691: LD_INT 1
56693: DOUBLE
56694: EQUAL
56695: IFTRUE 56699
56697: GO 59322
56699: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56700: LD_ADDR_VAR 0 11
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: LD_INT 3
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: LIST
56743: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56744: LD_ADDR_VAR 0 12
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 3
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 3
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: LIST
56784: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56785: LD_ADDR_VAR 0 13
56789: PUSH
56790: LD_INT 3
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: LD_INT 3
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: LD_INT 3
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: LIST
56824: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56825: LD_ADDR_VAR 0 14
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 3
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56866: LD_ADDR_VAR 0 15
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 3
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56910: LD_ADDR_VAR 0 16
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 3
56941: NEG
56942: PUSH
56943: LD_INT 3
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56956: LD_ADDR_VAR 0 17
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: LIST
56999: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57000: LD_ADDR_VAR 0 18
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57041: LD_ADDR_VAR 0 19
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: LIST
57080: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57081: LD_ADDR_VAR 0 20
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57122: LD_ADDR_VAR 0 21
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57166: LD_ADDR_VAR 0 22
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57212: LD_ADDR_VAR 0 23
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 3
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 4
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57256: LD_ADDR_VAR 0 24
57260: PUSH
57261: LD_INT 3
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 4
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57297: LD_ADDR_VAR 0 25
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: LD_INT 3
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 4
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: LD_INT 4
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57337: LD_ADDR_VAR 0 26
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 4
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: LIST
57377: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57378: LD_ADDR_VAR 0 27
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 4
57407: NEG
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57422: LD_ADDR_VAR 0 28
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: LD_INT 3
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: NEG
57442: PUSH
57443: LD_INT 4
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 4
57453: NEG
57454: PUSH
57455: LD_INT 3
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57468: LD_ADDR_VAR 0 29
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 3
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: LD_INT 4
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 4
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 3
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 5
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 5
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 4
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 6
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 6
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 5
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57623: LD_ADDR_VAR 0 30
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 4
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 4
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 4
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 5
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 5
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 5
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 6
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 6
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57766: LD_ADDR_VAR 0 31
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 3
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: LD_INT 3
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 4
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 4
57813: PUSH
57814: LD_INT 4
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: LD_INT 4
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 5
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 5
57843: PUSH
57844: LD_INT 5
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 4
57853: PUSH
57854: LD_INT 5
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 6
57863: PUSH
57864: LD_INT 5
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 6
57873: PUSH
57874: LD_INT 6
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 5
57883: PUSH
57884: LD_INT 6
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57905: LD_ADDR_VAR 0 32
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 3
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: LD_INT 3
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: LD_INT 4
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 4
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: LD_INT 3
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 5
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 5
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 4
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: LD_INT 6
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 6
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: LD_INT 5
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58048: LD_ADDR_VAR 0 33
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: NEG
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 4
58100: NEG
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 4
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 4
58123: NEG
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 5
58134: NEG
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 5
58145: NEG
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 5
58157: NEG
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 6
58168: NEG
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 6
58179: NEG
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58203: LD_ADDR_VAR 0 34
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: LD_INT 3
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: LD_INT 2
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 3
58234: NEG
58235: PUSH
58236: LD_INT 3
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 3
58246: NEG
58247: PUSH
58248: LD_INT 4
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 4
58258: NEG
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 4
58270: NEG
58271: PUSH
58272: LD_INT 4
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 4
58282: NEG
58283: PUSH
58284: LD_INT 5
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 5
58294: NEG
58295: PUSH
58296: LD_INT 4
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 5
58306: NEG
58307: PUSH
58308: LD_INT 5
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 5
58318: NEG
58319: PUSH
58320: LD_INT 6
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 6
58330: NEG
58331: PUSH
58332: LD_INT 5
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 6
58342: NEG
58343: PUSH
58344: LD_INT 6
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58366: LD_ADDR_VAR 0 41
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58410: LD_ADDR_VAR 0 42
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58451: LD_ADDR_VAR 0 43
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 3
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 3
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: LIST
58490: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58491: LD_ADDR_VAR 0 44
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58532: LD_ADDR_VAR 0 45
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58576: LD_ADDR_VAR 0 46
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: LIST
58621: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58622: LD_ADDR_VAR 0 47
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: LD_INT 3
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58655: LD_ADDR_VAR 0 48
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58686: LD_ADDR_VAR 0 49
58690: PUSH
58691: LD_INT 3
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 3
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58715: LD_ADDR_VAR 0 50
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 3
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58744: LD_ADDR_VAR 0 51
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58775: LD_ADDR_VAR 0 52
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58808: LD_ADDR_VAR 0 53
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: LD_INT 3
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58852: LD_ADDR_VAR 0 54
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58893: LD_ADDR_VAR 0 55
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: LIST
58932: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58933: LD_ADDR_VAR 0 56
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58974: LD_ADDR_VAR 0 57
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: NEG
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 3
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: LIST
59017: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59018: LD_ADDR_VAR 0 58
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: NEG
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 3
59049: NEG
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: LIST
59063: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59064: LD_ADDR_VAR 0 59
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: LIST
59107: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59108: LD_ADDR_VAR 0 60
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59149: LD_ADDR_VAR 0 61
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: LIST
59188: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59189: LD_ADDR_VAR 0 62
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: LIST
59229: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59230: LD_ADDR_VAR 0 63
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 2
59259: NEG
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59274: LD_ADDR_VAR 0 64
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// end ; 2 :
59320: GO 62586
59322: LD_INT 2
59324: DOUBLE
59325: EQUAL
59326: IFTRUE 59330
59328: GO 62585
59330: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59331: LD_ADDR_VAR 0 29
59335: PUSH
59336: LD_INT 4
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 4
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 5
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 5
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 4
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 3
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 5
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 3
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 4
59451: PUSH
59452: LD_INT 3
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 4
59461: PUSH
59462: LD_INT 4
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 3
59471: PUSH
59472: LD_INT 4
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 4
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: LD_INT 4
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 4
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 4
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 5
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 5
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 4
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 3
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: PUSH
59594: LD_INT 5
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 3
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 3
59614: NEG
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 3
59659: NEG
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 4
59670: NEG
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 4
59681: NEG
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 4
59693: NEG
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 4
59716: NEG
59717: PUSH
59718: LD_INT 4
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 4
59728: NEG
59729: PUSH
59730: LD_INT 5
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: NEG
59741: PUSH
59742: LD_INT 4
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: LD_INT 3
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: NEG
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 5
59776: NEG
59777: PUSH
59778: LD_INT 4
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 5
59788: NEG
59789: PUSH
59790: LD_INT 5
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: LD_INT 5
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 5
59812: NEG
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59869: LD_ADDR_VAR 0 30
59873: PUSH
59874: LD_INT 4
59876: PUSH
59877: LD_INT 4
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 4
59886: PUSH
59887: LD_INT 3
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 5
59896: PUSH
59897: LD_INT 4
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 5
59906: PUSH
59907: LD_INT 5
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 4
59916: PUSH
59917: LD_INT 5
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 3
59926: PUSH
59927: LD_INT 4
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 3
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 5
59946: PUSH
59947: LD_INT 3
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 3
59956: PUSH
59957: LD_INT 5
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: LD_INT 3
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: LD_INT 4
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 4
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 2
60038: PUSH
60039: LD_INT 4
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: LD_INT 2
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 4
60059: NEG
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 4
60070: NEG
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 4
60104: NEG
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 5
60115: NEG
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 5
60126: NEG
60127: PUSH
60128: LD_INT 1
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 5
60138: NEG
60139: PUSH
60140: LD_INT 2
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: LD_INT 4
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: NEG
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 4
60221: NEG
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 4
60233: NEG
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: LD_INT 4
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 4
60257: NEG
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 4
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: LD_INT 5
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: LD_INT 4
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 4
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 5
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 5
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60416: LD_ADDR_VAR 0 31
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: LD_INT 4
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 3
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 4
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: LD_INT 5
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: LD_INT 5
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: LD_INT 4
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 5
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: LD_INT 3
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 3
60516: NEG
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: NEG
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 2
60539: NEG
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: NEG
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 3
60561: NEG
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 4
60572: NEG
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 4
60583: NEG
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 4
60595: NEG
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 4
60618: NEG
60619: PUSH
60620: LD_INT 4
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 4
60630: NEG
60631: PUSH
60632: LD_INT 5
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: LD_INT 4
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 4
60666: NEG
60667: PUSH
60668: LD_INT 3
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 5
60678: NEG
60679: PUSH
60680: LD_INT 4
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 5
60690: NEG
60691: PUSH
60692: LD_INT 5
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: LD_INT 5
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 5
60714: NEG
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 3
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: LD_INT 3
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: LD_INT 4
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: LD_INT 4
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 4
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 4
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 5
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 5
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 4
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 3
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 5
60911: PUSH
60912: LD_INT 2
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60966: LD_ADDR_VAR 0 32
60970: PUSH
60971: LD_INT 4
60973: NEG
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 4
60984: NEG
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: NEG
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 4
61018: NEG
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 5
61029: NEG
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 5
61040: NEG
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 5
61052: NEG
61053: PUSH
61054: LD_INT 2
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 3
61064: NEG
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: NEG
61076: PUSH
61077: LD_INT 3
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: LD_INT 4
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 3
61123: NEG
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 4
61135: NEG
61136: PUSH
61137: LD_INT 3
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 4
61147: NEG
61148: PUSH
61149: LD_INT 4
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: NEG
61160: PUSH
61161: LD_INT 4
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 4
61171: NEG
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 4
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 5
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: LD_INT 4
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 4
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: LD_INT 5
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: LD_INT 5
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 3
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 4
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 4
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 4
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 4
61378: PUSH
61379: LD_INT 4
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 4
61388: PUSH
61389: LD_INT 3
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 5
61398: PUSH
61399: LD_INT 4
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 5
61408: PUSH
61409: LD_INT 5
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 4
61418: PUSH
61419: LD_INT 5
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: LD_INT 4
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 3
61438: PUSH
61439: LD_INT 3
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 5
61448: PUSH
61449: LD_INT 3
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: LD_INT 5
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61513: LD_ADDR_VAR 0 33
61517: PUSH
61518: LD_INT 4
61520: NEG
61521: PUSH
61522: LD_INT 4
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 4
61532: NEG
61533: PUSH
61534: LD_INT 5
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 3
61544: NEG
61545: PUSH
61546: LD_INT 4
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: LD_INT 3
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 4
61568: NEG
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 5
61580: NEG
61581: PUSH
61582: LD_INT 4
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 5
61592: NEG
61593: PUSH
61594: LD_INT 5
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 3
61604: NEG
61605: PUSH
61606: LD_INT 5
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 5
61616: NEG
61617: PUSH
61618: LD_INT 3
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 3
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 4
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: LD_INT 3
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: LD_INT 2
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 2
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 3
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: LD_INT 4
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: LD_INT 4
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 4
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 4
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 5
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 5
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 4
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 3
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 3
61802: PUSH
61803: LD_INT 2
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 5
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 3
61823: PUSH
61824: LD_INT 3
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 3
61833: PUSH
61834: LD_INT 2
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 4
61843: PUSH
61844: LD_INT 3
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 4
61853: PUSH
61854: LD_INT 4
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 3
61863: PUSH
61864: LD_INT 4
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 2
61873: PUSH
61874: LD_INT 3
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 4
61893: PUSH
61894: LD_INT 2
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: LD_INT 4
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 4
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: LD_INT 4
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: LD_INT 5
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: LD_INT 5
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: LD_INT 4
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: LD_INT 3
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 2
61985: PUSH
61986: LD_INT 5
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 3
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62051: LD_ADDR_VAR 0 34
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 4
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 5
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 4
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: LD_INT 3
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 3
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: LD_INT 4
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: LD_INT 5
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: LD_INT 3
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: LD_INT 5
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 3
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 4
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 4
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 3
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: PUSH
62233: LD_INT 2
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 4
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 4
62253: PUSH
62254: LD_INT 4
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 4
62263: PUSH
62264: LD_INT 3
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 5
62273: PUSH
62274: LD_INT 4
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 5
62283: PUSH
62284: LD_INT 5
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 4
62293: PUSH
62294: LD_INT 5
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 3
62303: PUSH
62304: LD_INT 4
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 3
62313: PUSH
62314: LD_INT 3
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 5
62323: PUSH
62324: LD_INT 3
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 3
62333: PUSH
62334: LD_INT 5
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 3
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 2
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 3
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: LD_INT 4
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 4
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: LD_INT 3
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: LD_INT 4
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 4
62436: NEG
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 4
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 3
62459: NEG
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 4
62481: NEG
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 5
62492: NEG
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 5
62503: NEG
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 5
62515: NEG
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 3
62527: NEG
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: ST_TO_ADDR
// end ; end ;
62583: GO 62586
62585: POP
// case btype of b_depot , b_warehouse :
62586: LD_VAR 0 1
62590: PUSH
62591: LD_INT 0
62593: DOUBLE
62594: EQUAL
62595: IFTRUE 62605
62597: LD_INT 1
62599: DOUBLE
62600: EQUAL
62601: IFTRUE 62605
62603: GO 62806
62605: POP
// case nation of nation_american :
62606: LD_VAR 0 5
62610: PUSH
62611: LD_INT 1
62613: DOUBLE
62614: EQUAL
62615: IFTRUE 62619
62617: GO 62675
62619: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62620: LD_ADDR_VAR 0 9
62624: PUSH
62625: LD_VAR 0 11
62629: PUSH
62630: LD_VAR 0 12
62634: PUSH
62635: LD_VAR 0 13
62639: PUSH
62640: LD_VAR 0 14
62644: PUSH
62645: LD_VAR 0 15
62649: PUSH
62650: LD_VAR 0 16
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: PUSH
62663: LD_VAR 0 4
62667: PUSH
62668: LD_INT 1
62670: PLUS
62671: ARRAY
62672: ST_TO_ADDR
62673: GO 62804
62675: LD_INT 2
62677: DOUBLE
62678: EQUAL
62679: IFTRUE 62683
62681: GO 62739
62683: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62684: LD_ADDR_VAR 0 9
62688: PUSH
62689: LD_VAR 0 17
62693: PUSH
62694: LD_VAR 0 18
62698: PUSH
62699: LD_VAR 0 19
62703: PUSH
62704: LD_VAR 0 20
62708: PUSH
62709: LD_VAR 0 21
62713: PUSH
62714: LD_VAR 0 22
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: PUSH
62727: LD_VAR 0 4
62731: PUSH
62732: LD_INT 1
62734: PLUS
62735: ARRAY
62736: ST_TO_ADDR
62737: GO 62804
62739: LD_INT 3
62741: DOUBLE
62742: EQUAL
62743: IFTRUE 62747
62745: GO 62803
62747: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62748: LD_ADDR_VAR 0 9
62752: PUSH
62753: LD_VAR 0 23
62757: PUSH
62758: LD_VAR 0 24
62762: PUSH
62763: LD_VAR 0 25
62767: PUSH
62768: LD_VAR 0 26
62772: PUSH
62773: LD_VAR 0 27
62777: PUSH
62778: LD_VAR 0 28
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: PUSH
62791: LD_VAR 0 4
62795: PUSH
62796: LD_INT 1
62798: PLUS
62799: ARRAY
62800: ST_TO_ADDR
62801: GO 62804
62803: POP
62804: GO 63359
62806: LD_INT 2
62808: DOUBLE
62809: EQUAL
62810: IFTRUE 62820
62812: LD_INT 3
62814: DOUBLE
62815: EQUAL
62816: IFTRUE 62820
62818: GO 62876
62820: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62821: LD_ADDR_VAR 0 9
62825: PUSH
62826: LD_VAR 0 29
62830: PUSH
62831: LD_VAR 0 30
62835: PUSH
62836: LD_VAR 0 31
62840: PUSH
62841: LD_VAR 0 32
62845: PUSH
62846: LD_VAR 0 33
62850: PUSH
62851: LD_VAR 0 34
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: PUSH
62864: LD_VAR 0 4
62868: PUSH
62869: LD_INT 1
62871: PLUS
62872: ARRAY
62873: ST_TO_ADDR
62874: GO 63359
62876: LD_INT 16
62878: DOUBLE
62879: EQUAL
62880: IFTRUE 62938
62882: LD_INT 17
62884: DOUBLE
62885: EQUAL
62886: IFTRUE 62938
62888: LD_INT 18
62890: DOUBLE
62891: EQUAL
62892: IFTRUE 62938
62894: LD_INT 19
62896: DOUBLE
62897: EQUAL
62898: IFTRUE 62938
62900: LD_INT 22
62902: DOUBLE
62903: EQUAL
62904: IFTRUE 62938
62906: LD_INT 20
62908: DOUBLE
62909: EQUAL
62910: IFTRUE 62938
62912: LD_INT 21
62914: DOUBLE
62915: EQUAL
62916: IFTRUE 62938
62918: LD_INT 23
62920: DOUBLE
62921: EQUAL
62922: IFTRUE 62938
62924: LD_INT 24
62926: DOUBLE
62927: EQUAL
62928: IFTRUE 62938
62930: LD_INT 25
62932: DOUBLE
62933: EQUAL
62934: IFTRUE 62938
62936: GO 62994
62938: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62939: LD_ADDR_VAR 0 9
62943: PUSH
62944: LD_VAR 0 35
62948: PUSH
62949: LD_VAR 0 36
62953: PUSH
62954: LD_VAR 0 37
62958: PUSH
62959: LD_VAR 0 38
62963: PUSH
62964: LD_VAR 0 39
62968: PUSH
62969: LD_VAR 0 40
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: PUSH
62982: LD_VAR 0 4
62986: PUSH
62987: LD_INT 1
62989: PLUS
62990: ARRAY
62991: ST_TO_ADDR
62992: GO 63359
62994: LD_INT 6
62996: DOUBLE
62997: EQUAL
62998: IFTRUE 63050
63000: LD_INT 7
63002: DOUBLE
63003: EQUAL
63004: IFTRUE 63050
63006: LD_INT 8
63008: DOUBLE
63009: EQUAL
63010: IFTRUE 63050
63012: LD_INT 13
63014: DOUBLE
63015: EQUAL
63016: IFTRUE 63050
63018: LD_INT 12
63020: DOUBLE
63021: EQUAL
63022: IFTRUE 63050
63024: LD_INT 15
63026: DOUBLE
63027: EQUAL
63028: IFTRUE 63050
63030: LD_INT 11
63032: DOUBLE
63033: EQUAL
63034: IFTRUE 63050
63036: LD_INT 14
63038: DOUBLE
63039: EQUAL
63040: IFTRUE 63050
63042: LD_INT 10
63044: DOUBLE
63045: EQUAL
63046: IFTRUE 63050
63048: GO 63106
63050: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63051: LD_ADDR_VAR 0 9
63055: PUSH
63056: LD_VAR 0 41
63060: PUSH
63061: LD_VAR 0 42
63065: PUSH
63066: LD_VAR 0 43
63070: PUSH
63071: LD_VAR 0 44
63075: PUSH
63076: LD_VAR 0 45
63080: PUSH
63081: LD_VAR 0 46
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: PUSH
63094: LD_VAR 0 4
63098: PUSH
63099: LD_INT 1
63101: PLUS
63102: ARRAY
63103: ST_TO_ADDR
63104: GO 63359
63106: LD_INT 36
63108: DOUBLE
63109: EQUAL
63110: IFTRUE 63114
63112: GO 63170
63114: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63115: LD_ADDR_VAR 0 9
63119: PUSH
63120: LD_VAR 0 47
63124: PUSH
63125: LD_VAR 0 48
63129: PUSH
63130: LD_VAR 0 49
63134: PUSH
63135: LD_VAR 0 50
63139: PUSH
63140: LD_VAR 0 51
63144: PUSH
63145: LD_VAR 0 52
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: PUSH
63158: LD_VAR 0 4
63162: PUSH
63163: LD_INT 1
63165: PLUS
63166: ARRAY
63167: ST_TO_ADDR
63168: GO 63359
63170: LD_INT 4
63172: DOUBLE
63173: EQUAL
63174: IFTRUE 63196
63176: LD_INT 5
63178: DOUBLE
63179: EQUAL
63180: IFTRUE 63196
63182: LD_INT 34
63184: DOUBLE
63185: EQUAL
63186: IFTRUE 63196
63188: LD_INT 37
63190: DOUBLE
63191: EQUAL
63192: IFTRUE 63196
63194: GO 63252
63196: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63197: LD_ADDR_VAR 0 9
63201: PUSH
63202: LD_VAR 0 53
63206: PUSH
63207: LD_VAR 0 54
63211: PUSH
63212: LD_VAR 0 55
63216: PUSH
63217: LD_VAR 0 56
63221: PUSH
63222: LD_VAR 0 57
63226: PUSH
63227: LD_VAR 0 58
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: PUSH
63240: LD_VAR 0 4
63244: PUSH
63245: LD_INT 1
63247: PLUS
63248: ARRAY
63249: ST_TO_ADDR
63250: GO 63359
63252: LD_INT 31
63254: DOUBLE
63255: EQUAL
63256: IFTRUE 63302
63258: LD_INT 32
63260: DOUBLE
63261: EQUAL
63262: IFTRUE 63302
63264: LD_INT 33
63266: DOUBLE
63267: EQUAL
63268: IFTRUE 63302
63270: LD_INT 27
63272: DOUBLE
63273: EQUAL
63274: IFTRUE 63302
63276: LD_INT 26
63278: DOUBLE
63279: EQUAL
63280: IFTRUE 63302
63282: LD_INT 28
63284: DOUBLE
63285: EQUAL
63286: IFTRUE 63302
63288: LD_INT 29
63290: DOUBLE
63291: EQUAL
63292: IFTRUE 63302
63294: LD_INT 30
63296: DOUBLE
63297: EQUAL
63298: IFTRUE 63302
63300: GO 63358
63302: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63303: LD_ADDR_VAR 0 9
63307: PUSH
63308: LD_VAR 0 59
63312: PUSH
63313: LD_VAR 0 60
63317: PUSH
63318: LD_VAR 0 61
63322: PUSH
63323: LD_VAR 0 62
63327: PUSH
63328: LD_VAR 0 63
63332: PUSH
63333: LD_VAR 0 64
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: PUSH
63346: LD_VAR 0 4
63350: PUSH
63351: LD_INT 1
63353: PLUS
63354: ARRAY
63355: ST_TO_ADDR
63356: GO 63359
63358: POP
// temp_list2 = [ ] ;
63359: LD_ADDR_VAR 0 10
63363: PUSH
63364: EMPTY
63365: ST_TO_ADDR
// for i in temp_list do
63366: LD_ADDR_VAR 0 8
63370: PUSH
63371: LD_VAR 0 9
63375: PUSH
63376: FOR_IN
63377: IFFALSE 63429
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63379: LD_ADDR_VAR 0 10
63383: PUSH
63384: LD_VAR 0 10
63388: PUSH
63389: LD_VAR 0 8
63393: PUSH
63394: LD_INT 1
63396: ARRAY
63397: PUSH
63398: LD_VAR 0 2
63402: PLUS
63403: PUSH
63404: LD_VAR 0 8
63408: PUSH
63409: LD_INT 2
63411: ARRAY
63412: PUSH
63413: LD_VAR 0 3
63417: PLUS
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: EMPTY
63424: LIST
63425: ADD
63426: ST_TO_ADDR
63427: GO 63376
63429: POP
63430: POP
// result = temp_list2 ;
63431: LD_ADDR_VAR 0 7
63435: PUSH
63436: LD_VAR 0 10
63440: ST_TO_ADDR
// end ;
63441: LD_VAR 0 7
63445: RET
// export function EnemyInRange ( unit , dist ) ; begin
63446: LD_INT 0
63448: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63449: LD_ADDR_VAR 0 3
63453: PUSH
63454: LD_VAR 0 1
63458: PPUSH
63459: CALL_OW 255
63463: PPUSH
63464: LD_VAR 0 1
63468: PPUSH
63469: CALL_OW 250
63473: PPUSH
63474: LD_VAR 0 1
63478: PPUSH
63479: CALL_OW 251
63483: PPUSH
63484: LD_VAR 0 2
63488: PPUSH
63489: CALL 36703 0 4
63493: PUSH
63494: LD_INT 4
63496: ARRAY
63497: ST_TO_ADDR
// end ;
63498: LD_VAR 0 3
63502: RET
// export function PlayerSeeMe ( unit ) ; begin
63503: LD_INT 0
63505: PPUSH
// result := See ( your_side , unit ) ;
63506: LD_ADDR_VAR 0 2
63510: PUSH
63511: LD_OWVAR 2
63515: PPUSH
63516: LD_VAR 0 1
63520: PPUSH
63521: CALL_OW 292
63525: ST_TO_ADDR
// end ;
63526: LD_VAR 0 2
63530: RET
// export function ReverseDir ( unit ) ; begin
63531: LD_INT 0
63533: PPUSH
// if not unit then
63534: LD_VAR 0 1
63538: NOT
63539: IFFALSE 63543
// exit ;
63541: GO 63566
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63543: LD_ADDR_VAR 0 2
63547: PUSH
63548: LD_VAR 0 1
63552: PPUSH
63553: CALL_OW 254
63557: PUSH
63558: LD_INT 3
63560: PLUS
63561: PUSH
63562: LD_INT 6
63564: MOD
63565: ST_TO_ADDR
// end ;
63566: LD_VAR 0 2
63570: RET
// export function ReverseArray ( array ) ; var i ; begin
63571: LD_INT 0
63573: PPUSH
63574: PPUSH
// if not array then
63575: LD_VAR 0 1
63579: NOT
63580: IFFALSE 63584
// exit ;
63582: GO 63639
// result := [ ] ;
63584: LD_ADDR_VAR 0 2
63588: PUSH
63589: EMPTY
63590: ST_TO_ADDR
// for i := array downto 1 do
63591: LD_ADDR_VAR 0 3
63595: PUSH
63596: DOUBLE
63597: LD_VAR 0 1
63601: INC
63602: ST_TO_ADDR
63603: LD_INT 1
63605: PUSH
63606: FOR_DOWNTO
63607: IFFALSE 63637
// result := Join ( result , array [ i ] ) ;
63609: LD_ADDR_VAR 0 2
63613: PUSH
63614: LD_VAR 0 2
63618: PPUSH
63619: LD_VAR 0 1
63623: PUSH
63624: LD_VAR 0 3
63628: ARRAY
63629: PPUSH
63630: CALL 68491 0 2
63634: ST_TO_ADDR
63635: GO 63606
63637: POP
63638: POP
// end ;
63639: LD_VAR 0 2
63643: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63644: LD_INT 0
63646: PPUSH
63647: PPUSH
63648: PPUSH
63649: PPUSH
63650: PPUSH
63651: PPUSH
// if not unit or not hexes then
63652: LD_VAR 0 1
63656: NOT
63657: IFTRUE 63666
63659: PUSH
63660: LD_VAR 0 2
63664: NOT
63665: OR
63666: IFFALSE 63670
// exit ;
63668: GO 63793
// dist := 9999 ;
63670: LD_ADDR_VAR 0 5
63674: PUSH
63675: LD_INT 9999
63677: ST_TO_ADDR
// for i = 1 to hexes do
63678: LD_ADDR_VAR 0 4
63682: PUSH
63683: DOUBLE
63684: LD_INT 1
63686: DEC
63687: ST_TO_ADDR
63688: LD_VAR 0 2
63692: PUSH
63693: FOR_TO
63694: IFFALSE 63781
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63696: LD_ADDR_VAR 0 6
63700: PUSH
63701: LD_VAR 0 1
63705: PPUSH
63706: LD_VAR 0 2
63710: PUSH
63711: LD_VAR 0 4
63715: ARRAY
63716: PUSH
63717: LD_INT 1
63719: ARRAY
63720: PPUSH
63721: LD_VAR 0 2
63725: PUSH
63726: LD_VAR 0 4
63730: ARRAY
63731: PUSH
63732: LD_INT 2
63734: ARRAY
63735: PPUSH
63736: CALL_OW 297
63740: ST_TO_ADDR
// if tdist < dist then
63741: LD_VAR 0 6
63745: PUSH
63746: LD_VAR 0 5
63750: LESS
63751: IFFALSE 63779
// begin hex := hexes [ i ] ;
63753: LD_ADDR_VAR 0 8
63757: PUSH
63758: LD_VAR 0 2
63762: PUSH
63763: LD_VAR 0 4
63767: ARRAY
63768: ST_TO_ADDR
// dist := tdist ;
63769: LD_ADDR_VAR 0 5
63773: PUSH
63774: LD_VAR 0 6
63778: ST_TO_ADDR
// end ; end ;
63779: GO 63693
63781: POP
63782: POP
// result := hex ;
63783: LD_ADDR_VAR 0 3
63787: PUSH
63788: LD_VAR 0 8
63792: ST_TO_ADDR
// end ;
63793: LD_VAR 0 3
63797: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63798: LD_INT 0
63800: PPUSH
63801: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63802: LD_VAR 0 1
63806: NOT
63807: IFTRUE 63846
63809: PUSH
63810: LD_VAR 0 1
63814: PUSH
63815: LD_INT 21
63817: PUSH
63818: LD_INT 2
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 23
63827: PUSH
63828: LD_INT 2
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PPUSH
63839: CALL_OW 69
63843: IN
63844: NOT
63845: OR
63846: IFFALSE 63850
// exit ;
63848: GO 63897
// for i = 1 to 3 do
63850: LD_ADDR_VAR 0 3
63854: PUSH
63855: DOUBLE
63856: LD_INT 1
63858: DEC
63859: ST_TO_ADDR
63860: LD_INT 3
63862: PUSH
63863: FOR_TO
63864: IFFALSE 63895
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63866: LD_VAR 0 1
63870: PPUSH
63871: CALL_OW 250
63875: PPUSH
63876: LD_VAR 0 1
63880: PPUSH
63881: CALL_OW 251
63885: PPUSH
63886: LD_INT 1
63888: PPUSH
63889: CALL_OW 453
63893: GO 63863
63895: POP
63896: POP
// end ;
63897: LD_VAR 0 2
63901: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63902: LD_INT 0
63904: PPUSH
63905: PPUSH
63906: PPUSH
63907: PPUSH
63908: PPUSH
63909: PPUSH
// if not unit or not enemy_unit then
63910: LD_VAR 0 1
63914: NOT
63915: IFTRUE 63924
63917: PUSH
63918: LD_VAR 0 2
63922: NOT
63923: OR
63924: IFFALSE 63928
// exit ;
63926: GO 64409
// if GetLives ( i ) < 250 then
63928: LD_VAR 0 4
63932: PPUSH
63933: CALL_OW 256
63937: PUSH
63938: LD_INT 250
63940: LESS
63941: IFFALSE 63954
// begin ComAutodestruct ( i ) ;
63943: LD_VAR 0 4
63947: PPUSH
63948: CALL 63798 0 1
// exit ;
63952: GO 64409
// end ; x := GetX ( enemy_unit ) ;
63954: LD_ADDR_VAR 0 7
63958: PUSH
63959: LD_VAR 0 2
63963: PPUSH
63964: CALL_OW 250
63968: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63969: LD_ADDR_VAR 0 8
63973: PUSH
63974: LD_VAR 0 2
63978: PPUSH
63979: CALL_OW 251
63983: ST_TO_ADDR
// if not x or not y then
63984: LD_VAR 0 7
63988: NOT
63989: IFTRUE 63998
63991: PUSH
63992: LD_VAR 0 8
63996: NOT
63997: OR
63998: IFFALSE 64002
// exit ;
64000: GO 64409
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64002: LD_ADDR_VAR 0 6
64006: PUSH
64007: LD_VAR 0 7
64011: PPUSH
64012: LD_INT 0
64014: PPUSH
64015: LD_INT 4
64017: PPUSH
64018: CALL_OW 272
64022: PUSH
64023: LD_VAR 0 8
64027: PPUSH
64028: LD_INT 0
64030: PPUSH
64031: LD_INT 4
64033: PPUSH
64034: CALL_OW 273
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_VAR 0 7
64047: PPUSH
64048: LD_INT 1
64050: PPUSH
64051: LD_INT 4
64053: PPUSH
64054: CALL_OW 272
64058: PUSH
64059: LD_VAR 0 8
64063: PPUSH
64064: LD_INT 1
64066: PPUSH
64067: LD_INT 4
64069: PPUSH
64070: CALL_OW 273
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_VAR 0 7
64083: PPUSH
64084: LD_INT 2
64086: PPUSH
64087: LD_INT 4
64089: PPUSH
64090: CALL_OW 272
64094: PUSH
64095: LD_VAR 0 8
64099: PPUSH
64100: LD_INT 2
64102: PPUSH
64103: LD_INT 4
64105: PPUSH
64106: CALL_OW 273
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_VAR 0 7
64119: PPUSH
64120: LD_INT 3
64122: PPUSH
64123: LD_INT 4
64125: PPUSH
64126: CALL_OW 272
64130: PUSH
64131: LD_VAR 0 8
64135: PPUSH
64136: LD_INT 3
64138: PPUSH
64139: LD_INT 4
64141: PPUSH
64142: CALL_OW 273
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_VAR 0 7
64155: PPUSH
64156: LD_INT 4
64158: PPUSH
64159: LD_INT 4
64161: PPUSH
64162: CALL_OW 272
64166: PUSH
64167: LD_VAR 0 8
64171: PPUSH
64172: LD_INT 4
64174: PPUSH
64175: LD_INT 4
64177: PPUSH
64178: CALL_OW 273
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_VAR 0 7
64191: PPUSH
64192: LD_INT 5
64194: PPUSH
64195: LD_INT 4
64197: PPUSH
64198: CALL_OW 272
64202: PUSH
64203: LD_VAR 0 8
64207: PPUSH
64208: LD_INT 5
64210: PPUSH
64211: LD_INT 4
64213: PPUSH
64214: CALL_OW 273
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: ST_TO_ADDR
// for i = tmp downto 1 do
64231: LD_ADDR_VAR 0 4
64235: PUSH
64236: DOUBLE
64237: LD_VAR 0 6
64241: INC
64242: ST_TO_ADDR
64243: LD_INT 1
64245: PUSH
64246: FOR_DOWNTO
64247: IFFALSE 64350
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64249: LD_VAR 0 6
64253: PUSH
64254: LD_VAR 0 4
64258: ARRAY
64259: PUSH
64260: LD_INT 1
64262: ARRAY
64263: PPUSH
64264: LD_VAR 0 6
64268: PUSH
64269: LD_VAR 0 4
64273: ARRAY
64274: PUSH
64275: LD_INT 2
64277: ARRAY
64278: PPUSH
64279: CALL_OW 488
64283: NOT
64284: IFTRUE 64326
64286: PUSH
64287: LD_VAR 0 6
64291: PUSH
64292: LD_VAR 0 4
64296: ARRAY
64297: PUSH
64298: LD_INT 1
64300: ARRAY
64301: PPUSH
64302: LD_VAR 0 6
64306: PUSH
64307: LD_VAR 0 4
64311: ARRAY
64312: PUSH
64313: LD_INT 2
64315: ARRAY
64316: PPUSH
64317: CALL_OW 428
64321: PUSH
64322: LD_INT 0
64324: NONEQUAL
64325: OR
64326: IFFALSE 64348
// tmp := Delete ( tmp , i ) ;
64328: LD_ADDR_VAR 0 6
64332: PUSH
64333: LD_VAR 0 6
64337: PPUSH
64338: LD_VAR 0 4
64342: PPUSH
64343: CALL_OW 3
64347: ST_TO_ADDR
64348: GO 64246
64350: POP
64351: POP
// j := GetClosestHex ( unit , tmp ) ;
64352: LD_ADDR_VAR 0 5
64356: PUSH
64357: LD_VAR 0 1
64361: PPUSH
64362: LD_VAR 0 6
64366: PPUSH
64367: CALL 63644 0 2
64371: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64372: LD_VAR 0 1
64376: PPUSH
64377: LD_VAR 0 5
64381: PUSH
64382: LD_INT 1
64384: ARRAY
64385: PPUSH
64386: LD_VAR 0 5
64390: PUSH
64391: LD_INT 2
64393: ARRAY
64394: PPUSH
64395: CALL_OW 111
// result := j ;
64399: LD_ADDR_VAR 0 3
64403: PUSH
64404: LD_VAR 0 5
64408: ST_TO_ADDR
// end ;
64409: LD_VAR 0 3
64413: RET
// export function PrepareApemanSoldier ( ) ; begin
64414: LD_INT 0
64416: PPUSH
// uc_nation := 0 ;
64417: LD_ADDR_OWVAR 21
64421: PUSH
64422: LD_INT 0
64424: ST_TO_ADDR
// hc_sex := sex_male ;
64425: LD_ADDR_OWVAR 27
64429: PUSH
64430: LD_INT 1
64432: ST_TO_ADDR
// hc_name :=  ;
64433: LD_ADDR_OWVAR 26
64437: PUSH
64438: LD_STRING 
64440: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64441: LD_ADDR_OWVAR 28
64445: PUSH
64446: LD_INT 15
64448: ST_TO_ADDR
// hc_gallery :=  ;
64449: LD_ADDR_OWVAR 33
64453: PUSH
64454: LD_STRING 
64456: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64457: LD_ADDR_OWVAR 31
64461: PUSH
64462: LD_INT 0
64464: PPUSH
64465: LD_INT 3
64467: PPUSH
64468: CALL_OW 12
64472: PUSH
64473: LD_INT 0
64475: PPUSH
64476: LD_INT 3
64478: PPUSH
64479: CALL_OW 12
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64496: LD_ADDR_OWVAR 29
64500: PUSH
64501: LD_INT 10
64503: PUSH
64504: LD_INT 12
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: ST_TO_ADDR
// end ;
64511: LD_VAR 0 1
64515: RET
// export function PrepareApemanEngineer ( ) ; begin
64516: LD_INT 0
64518: PPUSH
// uc_nation := 0 ;
64519: LD_ADDR_OWVAR 21
64523: PUSH
64524: LD_INT 0
64526: ST_TO_ADDR
// hc_sex := sex_male ;
64527: LD_ADDR_OWVAR 27
64531: PUSH
64532: LD_INT 1
64534: ST_TO_ADDR
// hc_name :=  ;
64535: LD_ADDR_OWVAR 26
64539: PUSH
64540: LD_STRING 
64542: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64543: LD_ADDR_OWVAR 28
64547: PUSH
64548: LD_INT 16
64550: ST_TO_ADDR
// hc_gallery :=  ;
64551: LD_ADDR_OWVAR 33
64555: PUSH
64556: LD_STRING 
64558: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64559: LD_ADDR_OWVAR 31
64563: PUSH
64564: LD_INT 0
64566: PPUSH
64567: LD_INT 3
64569: PPUSH
64570: CALL_OW 12
64574: PUSH
64575: LD_INT 0
64577: PPUSH
64578: LD_INT 3
64580: PPUSH
64581: CALL_OW 12
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64598: LD_ADDR_OWVAR 29
64602: PUSH
64603: LD_INT 10
64605: PUSH
64606: LD_INT 12
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: ST_TO_ADDR
// end ;
64613: LD_VAR 0 1
64617: RET
// export function PrepareApeman ( agressivity ) ; begin
64618: LD_INT 0
64620: PPUSH
// uc_side := 0 ;
64621: LD_ADDR_OWVAR 20
64625: PUSH
64626: LD_INT 0
64628: ST_TO_ADDR
// uc_nation := 0 ;
64629: LD_ADDR_OWVAR 21
64633: PUSH
64634: LD_INT 0
64636: ST_TO_ADDR
// hc_sex := sex_male ;
64637: LD_ADDR_OWVAR 27
64641: PUSH
64642: LD_INT 1
64644: ST_TO_ADDR
// hc_class := class_apeman ;
64645: LD_ADDR_OWVAR 28
64649: PUSH
64650: LD_INT 12
64652: ST_TO_ADDR
// hc_gallery :=  ;
64653: LD_ADDR_OWVAR 33
64657: PUSH
64658: LD_STRING 
64660: ST_TO_ADDR
// hc_name :=  ;
64661: LD_ADDR_OWVAR 26
64665: PUSH
64666: LD_STRING 
64668: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64669: LD_ADDR_OWVAR 29
64673: PUSH
64674: LD_INT 10
64676: PUSH
64677: LD_INT 12
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: ST_TO_ADDR
// if agressivity = 0 then
64684: LD_VAR 0 1
64688: PUSH
64689: LD_INT 0
64691: EQUAL
64692: IFFALSE 64704
// hc_agressivity := 0 else
64694: LD_ADDR_OWVAR 35
64698: PUSH
64699: LD_INT 0
64701: ST_TO_ADDR
64702: GO 64725
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64704: LD_ADDR_OWVAR 35
64708: PUSH
64709: LD_VAR 0 1
64713: NEG
64714: PPUSH
64715: LD_VAR 0 1
64719: PPUSH
64720: CALL_OW 12
64724: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64725: LD_ADDR_OWVAR 31
64729: PUSH
64730: LD_INT 0
64732: PPUSH
64733: LD_INT 3
64735: PPUSH
64736: CALL_OW 12
64740: PUSH
64741: LD_INT 0
64743: PPUSH
64744: LD_INT 3
64746: PPUSH
64747: CALL_OW 12
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: ST_TO_ADDR
// end ;
64764: LD_VAR 0 2
64768: RET
// export function PrepareTiger ( agressivity ) ; begin
64769: LD_INT 0
64771: PPUSH
// uc_side := 0 ;
64772: LD_ADDR_OWVAR 20
64776: PUSH
64777: LD_INT 0
64779: ST_TO_ADDR
// uc_nation := 0 ;
64780: LD_ADDR_OWVAR 21
64784: PUSH
64785: LD_INT 0
64787: ST_TO_ADDR
// InitHc ;
64788: CALL_OW 19
// hc_class := class_tiger ;
64792: LD_ADDR_OWVAR 28
64796: PUSH
64797: LD_INT 14
64799: ST_TO_ADDR
// hc_gallery :=  ;
64800: LD_ADDR_OWVAR 33
64804: PUSH
64805: LD_STRING 
64807: ST_TO_ADDR
// hc_name :=  ;
64808: LD_ADDR_OWVAR 26
64812: PUSH
64813: LD_STRING 
64815: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64816: LD_ADDR_OWVAR 35
64820: PUSH
64821: LD_VAR 0 1
64825: NEG
64826: PPUSH
64827: LD_VAR 0 1
64831: PPUSH
64832: CALL_OW 12
64836: ST_TO_ADDR
// end ;
64837: LD_VAR 0 2
64841: RET
// export function PrepareEnchidna ( ) ; begin
64842: LD_INT 0
64844: PPUSH
// uc_side := 0 ;
64845: LD_ADDR_OWVAR 20
64849: PUSH
64850: LD_INT 0
64852: ST_TO_ADDR
// uc_nation := 0 ;
64853: LD_ADDR_OWVAR 21
64857: PUSH
64858: LD_INT 0
64860: ST_TO_ADDR
// InitHc ;
64861: CALL_OW 19
// hc_class := class_baggie ;
64865: LD_ADDR_OWVAR 28
64869: PUSH
64870: LD_INT 13
64872: ST_TO_ADDR
// hc_gallery :=  ;
64873: LD_ADDR_OWVAR 33
64877: PUSH
64878: LD_STRING 
64880: ST_TO_ADDR
// hc_name :=  ;
64881: LD_ADDR_OWVAR 26
64885: PUSH
64886: LD_STRING 
64888: ST_TO_ADDR
// end ;
64889: LD_VAR 0 1
64893: RET
// export function PrepareFrog ( ) ; begin
64894: LD_INT 0
64896: PPUSH
// uc_side := 0 ;
64897: LD_ADDR_OWVAR 20
64901: PUSH
64902: LD_INT 0
64904: ST_TO_ADDR
// uc_nation := 0 ;
64905: LD_ADDR_OWVAR 21
64909: PUSH
64910: LD_INT 0
64912: ST_TO_ADDR
// InitHc ;
64913: CALL_OW 19
// hc_class := class_frog ;
64917: LD_ADDR_OWVAR 28
64921: PUSH
64922: LD_INT 19
64924: ST_TO_ADDR
// hc_gallery :=  ;
64925: LD_ADDR_OWVAR 33
64929: PUSH
64930: LD_STRING 
64932: ST_TO_ADDR
// hc_name :=  ;
64933: LD_ADDR_OWVAR 26
64937: PUSH
64938: LD_STRING 
64940: ST_TO_ADDR
// end ;
64941: LD_VAR 0 1
64945: RET
// export function PrepareFish ( ) ; begin
64946: LD_INT 0
64948: PPUSH
// uc_side := 0 ;
64949: LD_ADDR_OWVAR 20
64953: PUSH
64954: LD_INT 0
64956: ST_TO_ADDR
// uc_nation := 0 ;
64957: LD_ADDR_OWVAR 21
64961: PUSH
64962: LD_INT 0
64964: ST_TO_ADDR
// InitHc ;
64965: CALL_OW 19
// hc_class := class_fish ;
64969: LD_ADDR_OWVAR 28
64973: PUSH
64974: LD_INT 20
64976: ST_TO_ADDR
// hc_gallery :=  ;
64977: LD_ADDR_OWVAR 33
64981: PUSH
64982: LD_STRING 
64984: ST_TO_ADDR
// hc_name :=  ;
64985: LD_ADDR_OWVAR 26
64989: PUSH
64990: LD_STRING 
64992: ST_TO_ADDR
// end ;
64993: LD_VAR 0 1
64997: RET
// export function PrepareBird ( ) ; begin
64998: LD_INT 0
65000: PPUSH
// uc_side := 0 ;
65001: LD_ADDR_OWVAR 20
65005: PUSH
65006: LD_INT 0
65008: ST_TO_ADDR
// uc_nation := 0 ;
65009: LD_ADDR_OWVAR 21
65013: PUSH
65014: LD_INT 0
65016: ST_TO_ADDR
// InitHc ;
65017: CALL_OW 19
// hc_class := class_phororhacos ;
65021: LD_ADDR_OWVAR 28
65025: PUSH
65026: LD_INT 18
65028: ST_TO_ADDR
// hc_gallery :=  ;
65029: LD_ADDR_OWVAR 33
65033: PUSH
65034: LD_STRING 
65036: ST_TO_ADDR
// hc_name :=  ;
65037: LD_ADDR_OWVAR 26
65041: PUSH
65042: LD_STRING 
65044: ST_TO_ADDR
// end ;
65045: LD_VAR 0 1
65049: RET
// export function PrepareHorse ( ) ; begin
65050: LD_INT 0
65052: PPUSH
// uc_side := 0 ;
65053: LD_ADDR_OWVAR 20
65057: PUSH
65058: LD_INT 0
65060: ST_TO_ADDR
// uc_nation := 0 ;
65061: LD_ADDR_OWVAR 21
65065: PUSH
65066: LD_INT 0
65068: ST_TO_ADDR
// InitHc ;
65069: CALL_OW 19
// hc_class := class_horse ;
65073: LD_ADDR_OWVAR 28
65077: PUSH
65078: LD_INT 21
65080: ST_TO_ADDR
// hc_gallery :=  ;
65081: LD_ADDR_OWVAR 33
65085: PUSH
65086: LD_STRING 
65088: ST_TO_ADDR
// hc_name :=  ;
65089: LD_ADDR_OWVAR 26
65093: PUSH
65094: LD_STRING 
65096: ST_TO_ADDR
// end ;
65097: LD_VAR 0 1
65101: RET
// export function PrepareMastodont ( ) ; begin
65102: LD_INT 0
65104: PPUSH
// uc_side := 0 ;
65105: LD_ADDR_OWVAR 20
65109: PUSH
65110: LD_INT 0
65112: ST_TO_ADDR
// uc_nation := 0 ;
65113: LD_ADDR_OWVAR 21
65117: PUSH
65118: LD_INT 0
65120: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65121: LD_ADDR_OWVAR 37
65125: PUSH
65126: LD_INT 31
65128: ST_TO_ADDR
// vc_control := control_rider ;
65129: LD_ADDR_OWVAR 38
65133: PUSH
65134: LD_INT 4
65136: ST_TO_ADDR
// end ;
65137: LD_VAR 0 1
65141: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65142: LD_INT 0
65144: PPUSH
65145: PPUSH
65146: PPUSH
// uc_side = 0 ;
65147: LD_ADDR_OWVAR 20
65151: PUSH
65152: LD_INT 0
65154: ST_TO_ADDR
// uc_nation = 0 ;
65155: LD_ADDR_OWVAR 21
65159: PUSH
65160: LD_INT 0
65162: ST_TO_ADDR
// InitHc_All ( ) ;
65163: CALL_OW 584
// InitVc ;
65167: CALL_OW 20
// if mastodonts then
65171: LD_VAR 0 6
65175: IFFALSE 65242
// for i = 1 to mastodonts do
65177: LD_ADDR_VAR 0 11
65181: PUSH
65182: DOUBLE
65183: LD_INT 1
65185: DEC
65186: ST_TO_ADDR
65187: LD_VAR 0 6
65191: PUSH
65192: FOR_TO
65193: IFFALSE 65240
// begin vc_chassis := 31 ;
65195: LD_ADDR_OWVAR 37
65199: PUSH
65200: LD_INT 31
65202: ST_TO_ADDR
// vc_control := control_rider ;
65203: LD_ADDR_OWVAR 38
65207: PUSH
65208: LD_INT 4
65210: ST_TO_ADDR
// animal := CreateVehicle ;
65211: LD_ADDR_VAR 0 12
65215: PUSH
65216: CALL_OW 45
65220: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65221: LD_VAR 0 12
65225: PPUSH
65226: LD_VAR 0 8
65230: PPUSH
65231: LD_INT 0
65233: PPUSH
65234: CALL 67384 0 3
// end ;
65238: GO 65192
65240: POP
65241: POP
// if horses then
65242: LD_VAR 0 5
65246: IFFALSE 65313
// for i = 1 to horses do
65248: LD_ADDR_VAR 0 11
65252: PUSH
65253: DOUBLE
65254: LD_INT 1
65256: DEC
65257: ST_TO_ADDR
65258: LD_VAR 0 5
65262: PUSH
65263: FOR_TO
65264: IFFALSE 65311
// begin hc_class := 21 ;
65266: LD_ADDR_OWVAR 28
65270: PUSH
65271: LD_INT 21
65273: ST_TO_ADDR
// hc_gallery :=  ;
65274: LD_ADDR_OWVAR 33
65278: PUSH
65279: LD_STRING 
65281: ST_TO_ADDR
// animal := CreateHuman ;
65282: LD_ADDR_VAR 0 12
65286: PUSH
65287: CALL_OW 44
65291: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65292: LD_VAR 0 12
65296: PPUSH
65297: LD_VAR 0 8
65301: PPUSH
65302: LD_INT 0
65304: PPUSH
65305: CALL 67384 0 3
// end ;
65309: GO 65263
65311: POP
65312: POP
// if birds then
65313: LD_VAR 0 1
65317: IFFALSE 65384
// for i = 1 to birds do
65319: LD_ADDR_VAR 0 11
65323: PUSH
65324: DOUBLE
65325: LD_INT 1
65327: DEC
65328: ST_TO_ADDR
65329: LD_VAR 0 1
65333: PUSH
65334: FOR_TO
65335: IFFALSE 65382
// begin hc_class := 18 ;
65337: LD_ADDR_OWVAR 28
65341: PUSH
65342: LD_INT 18
65344: ST_TO_ADDR
// hc_gallery =  ;
65345: LD_ADDR_OWVAR 33
65349: PUSH
65350: LD_STRING 
65352: ST_TO_ADDR
// animal := CreateHuman ;
65353: LD_ADDR_VAR 0 12
65357: PUSH
65358: CALL_OW 44
65362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65363: LD_VAR 0 12
65367: PPUSH
65368: LD_VAR 0 8
65372: PPUSH
65373: LD_INT 0
65375: PPUSH
65376: CALL 67384 0 3
// end ;
65380: GO 65334
65382: POP
65383: POP
// if tigers then
65384: LD_VAR 0 2
65388: IFFALSE 65472
// for i = 1 to tigers do
65390: LD_ADDR_VAR 0 11
65394: PUSH
65395: DOUBLE
65396: LD_INT 1
65398: DEC
65399: ST_TO_ADDR
65400: LD_VAR 0 2
65404: PUSH
65405: FOR_TO
65406: IFFALSE 65470
// begin hc_class = class_tiger ;
65408: LD_ADDR_OWVAR 28
65412: PUSH
65413: LD_INT 14
65415: ST_TO_ADDR
// hc_gallery =  ;
65416: LD_ADDR_OWVAR 33
65420: PUSH
65421: LD_STRING 
65423: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65424: LD_ADDR_OWVAR 35
65428: PUSH
65429: LD_INT 7
65431: NEG
65432: PPUSH
65433: LD_INT 7
65435: PPUSH
65436: CALL_OW 12
65440: ST_TO_ADDR
// animal := CreateHuman ;
65441: LD_ADDR_VAR 0 12
65445: PUSH
65446: CALL_OW 44
65450: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65451: LD_VAR 0 12
65455: PPUSH
65456: LD_VAR 0 8
65460: PPUSH
65461: LD_INT 0
65463: PPUSH
65464: CALL 67384 0 3
// end ;
65468: GO 65405
65470: POP
65471: POP
// if apemans then
65472: LD_VAR 0 3
65476: IFFALSE 65599
// for i = 1 to apemans do
65478: LD_ADDR_VAR 0 11
65482: PUSH
65483: DOUBLE
65484: LD_INT 1
65486: DEC
65487: ST_TO_ADDR
65488: LD_VAR 0 3
65492: PUSH
65493: FOR_TO
65494: IFFALSE 65597
// begin hc_class = class_apeman ;
65496: LD_ADDR_OWVAR 28
65500: PUSH
65501: LD_INT 12
65503: ST_TO_ADDR
// hc_gallery =  ;
65504: LD_ADDR_OWVAR 33
65508: PUSH
65509: LD_STRING 
65511: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65512: LD_ADDR_OWVAR 35
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PPUSH
65521: LD_INT 2
65523: PPUSH
65524: CALL_OW 12
65528: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65529: LD_ADDR_OWVAR 31
65533: PUSH
65534: LD_INT 1
65536: PPUSH
65537: LD_INT 3
65539: PPUSH
65540: CALL_OW 12
65544: PUSH
65545: LD_INT 1
65547: PPUSH
65548: LD_INT 3
65550: PPUSH
65551: CALL_OW 12
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: ST_TO_ADDR
// animal := CreateHuman ;
65568: LD_ADDR_VAR 0 12
65572: PUSH
65573: CALL_OW 44
65577: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65578: LD_VAR 0 12
65582: PPUSH
65583: LD_VAR 0 8
65587: PPUSH
65588: LD_INT 0
65590: PPUSH
65591: CALL 67384 0 3
// end ;
65595: GO 65493
65597: POP
65598: POP
// if enchidnas then
65599: LD_VAR 0 4
65603: IFFALSE 65670
// for i = 1 to enchidnas do
65605: LD_ADDR_VAR 0 11
65609: PUSH
65610: DOUBLE
65611: LD_INT 1
65613: DEC
65614: ST_TO_ADDR
65615: LD_VAR 0 4
65619: PUSH
65620: FOR_TO
65621: IFFALSE 65668
// begin hc_class = 13 ;
65623: LD_ADDR_OWVAR 28
65627: PUSH
65628: LD_INT 13
65630: ST_TO_ADDR
// hc_gallery =  ;
65631: LD_ADDR_OWVAR 33
65635: PUSH
65636: LD_STRING 
65638: ST_TO_ADDR
// animal := CreateHuman ;
65639: LD_ADDR_VAR 0 12
65643: PUSH
65644: CALL_OW 44
65648: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65649: LD_VAR 0 12
65653: PPUSH
65654: LD_VAR 0 8
65658: PPUSH
65659: LD_INT 0
65661: PPUSH
65662: CALL 67384 0 3
// end ;
65666: GO 65620
65668: POP
65669: POP
// if fishes then
65670: LD_VAR 0 7
65674: IFFALSE 65741
// for i = 1 to fishes do
65676: LD_ADDR_VAR 0 11
65680: PUSH
65681: DOUBLE
65682: LD_INT 1
65684: DEC
65685: ST_TO_ADDR
65686: LD_VAR 0 7
65690: PUSH
65691: FOR_TO
65692: IFFALSE 65739
// begin hc_class = 20 ;
65694: LD_ADDR_OWVAR 28
65698: PUSH
65699: LD_INT 20
65701: ST_TO_ADDR
// hc_gallery =  ;
65702: LD_ADDR_OWVAR 33
65706: PUSH
65707: LD_STRING 
65709: ST_TO_ADDR
// animal := CreateHuman ;
65710: LD_ADDR_VAR 0 12
65714: PUSH
65715: CALL_OW 44
65719: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65720: LD_VAR 0 12
65724: PPUSH
65725: LD_VAR 0 9
65729: PPUSH
65730: LD_INT 0
65732: PPUSH
65733: CALL 67384 0 3
// end ;
65737: GO 65691
65739: POP
65740: POP
// end ;
65741: LD_VAR 0 10
65745: RET
// export function WantHeal ( sci , unit ) ; begin
65746: LD_INT 0
65748: PPUSH
// if GetTaskList ( sci ) > 0 then
65749: LD_VAR 0 1
65753: PPUSH
65754: CALL_OW 437
65758: PUSH
65759: LD_INT 0
65761: GREATER
65762: IFFALSE 65834
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65764: LD_VAR 0 1
65768: PPUSH
65769: CALL_OW 437
65773: PUSH
65774: LD_INT 1
65776: ARRAY
65777: PUSH
65778: LD_INT 1
65780: ARRAY
65781: PUSH
65782: LD_STRING l
65784: EQUAL
65785: IFFALSE 65812
65787: PUSH
65788: LD_VAR 0 1
65792: PPUSH
65793: CALL_OW 437
65797: PUSH
65798: LD_INT 1
65800: ARRAY
65801: PUSH
65802: LD_INT 4
65804: ARRAY
65805: PUSH
65806: LD_VAR 0 2
65810: EQUAL
65811: AND
65812: IFFALSE 65824
// result := true else
65814: LD_ADDR_VAR 0 3
65818: PUSH
65819: LD_INT 1
65821: ST_TO_ADDR
65822: GO 65832
// result := false ;
65824: LD_ADDR_VAR 0 3
65828: PUSH
65829: LD_INT 0
65831: ST_TO_ADDR
// end else
65832: GO 65842
// result := false ;
65834: LD_ADDR_VAR 0 3
65838: PUSH
65839: LD_INT 0
65841: ST_TO_ADDR
// end ;
65842: LD_VAR 0 3
65846: RET
// export function HealTarget ( sci ) ; begin
65847: LD_INT 0
65849: PPUSH
// if not sci then
65850: LD_VAR 0 1
65854: NOT
65855: IFFALSE 65859
// exit ;
65857: GO 65924
// result := 0 ;
65859: LD_ADDR_VAR 0 2
65863: PUSH
65864: LD_INT 0
65866: ST_TO_ADDR
// if GetTaskList ( sci ) then
65867: LD_VAR 0 1
65871: PPUSH
65872: CALL_OW 437
65876: IFFALSE 65924
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65878: LD_VAR 0 1
65882: PPUSH
65883: CALL_OW 437
65887: PUSH
65888: LD_INT 1
65890: ARRAY
65891: PUSH
65892: LD_INT 1
65894: ARRAY
65895: PUSH
65896: LD_STRING l
65898: EQUAL
65899: IFFALSE 65924
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65901: LD_ADDR_VAR 0 2
65905: PUSH
65906: LD_VAR 0 1
65910: PPUSH
65911: CALL_OW 437
65915: PUSH
65916: LD_INT 1
65918: ARRAY
65919: PUSH
65920: LD_INT 4
65922: ARRAY
65923: ST_TO_ADDR
// end ;
65924: LD_VAR 0 2
65928: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65929: LD_INT 0
65931: PPUSH
65932: PPUSH
65933: PPUSH
65934: PPUSH
// if not base_units then
65935: LD_VAR 0 1
65939: NOT
65940: IFFALSE 65944
// exit ;
65942: GO 66031
// result := false ;
65944: LD_ADDR_VAR 0 2
65948: PUSH
65949: LD_INT 0
65951: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65952: LD_ADDR_VAR 0 5
65956: PUSH
65957: LD_VAR 0 1
65961: PPUSH
65962: LD_INT 21
65964: PUSH
65965: LD_INT 3
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PPUSH
65972: CALL_OW 72
65976: ST_TO_ADDR
// if not tmp then
65977: LD_VAR 0 5
65981: NOT
65982: IFFALSE 65986
// exit ;
65984: GO 66031
// for i in tmp do
65986: LD_ADDR_VAR 0 3
65990: PUSH
65991: LD_VAR 0 5
65995: PUSH
65996: FOR_IN
65997: IFFALSE 66029
// begin result := EnemyInRange ( i , 22 ) ;
65999: LD_ADDR_VAR 0 2
66003: PUSH
66004: LD_VAR 0 3
66008: PPUSH
66009: LD_INT 22
66011: PPUSH
66012: CALL 63446 0 2
66016: ST_TO_ADDR
// if result then
66017: LD_VAR 0 2
66021: IFFALSE 66027
// exit ;
66023: POP
66024: POP
66025: GO 66031
// end ;
66027: GO 65996
66029: POP
66030: POP
// end ;
66031: LD_VAR 0 2
66035: RET
// export function FilterByTag ( units , tag ) ; begin
66036: LD_INT 0
66038: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66039: LD_ADDR_VAR 0 3
66043: PUSH
66044: LD_VAR 0 1
66048: PPUSH
66049: LD_INT 120
66051: PUSH
66052: LD_VAR 0 2
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PPUSH
66061: CALL_OW 72
66065: ST_TO_ADDR
// end ;
66066: LD_VAR 0 3
66070: RET
// export function IsDriver ( un ) ; begin
66071: LD_INT 0
66073: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66074: LD_ADDR_VAR 0 2
66078: PUSH
66079: LD_VAR 0 1
66083: PUSH
66084: LD_INT 55
66086: PUSH
66087: EMPTY
66088: LIST
66089: PPUSH
66090: CALL_OW 69
66094: IN
66095: ST_TO_ADDR
// end ;
66096: LD_VAR 0 2
66100: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66101: LD_INT 0
66103: PPUSH
66104: PPUSH
// list := [ ] ;
66105: LD_ADDR_VAR 0 5
66109: PUSH
66110: EMPTY
66111: ST_TO_ADDR
// case d of 0 :
66112: LD_VAR 0 3
66116: PUSH
66117: LD_INT 0
66119: DOUBLE
66120: EQUAL
66121: IFTRUE 66125
66123: GO 66258
66125: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66126: LD_ADDR_VAR 0 5
66130: PUSH
66131: LD_VAR 0 1
66135: PUSH
66136: LD_INT 4
66138: MINUS
66139: PUSH
66140: LD_VAR 0 2
66144: PUSH
66145: LD_INT 4
66147: MINUS
66148: PUSH
66149: LD_INT 2
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: LIST
66156: PUSH
66157: LD_VAR 0 1
66161: PUSH
66162: LD_INT 3
66164: MINUS
66165: PUSH
66166: LD_VAR 0 2
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: LIST
66178: PUSH
66179: LD_VAR 0 1
66183: PUSH
66184: LD_INT 4
66186: PLUS
66187: PUSH
66188: LD_VAR 0 2
66192: PUSH
66193: LD_INT 4
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: PUSH
66201: LD_VAR 0 1
66205: PUSH
66206: LD_INT 3
66208: PLUS
66209: PUSH
66210: LD_VAR 0 2
66214: PUSH
66215: LD_INT 3
66217: PLUS
66218: PUSH
66219: LD_INT 5
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: PUSH
66227: LD_VAR 0 1
66231: PUSH
66232: LD_VAR 0 2
66236: PUSH
66237: LD_INT 4
66239: PLUS
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: ST_TO_ADDR
// end ; 1 :
66256: GO 66956
66258: LD_INT 1
66260: DOUBLE
66261: EQUAL
66262: IFTRUE 66266
66264: GO 66399
66266: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66267: LD_ADDR_VAR 0 5
66271: PUSH
66272: LD_VAR 0 1
66276: PUSH
66277: LD_VAR 0 2
66281: PUSH
66282: LD_INT 4
66284: MINUS
66285: PUSH
66286: LD_INT 3
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: LIST
66293: PUSH
66294: LD_VAR 0 1
66298: PUSH
66299: LD_INT 3
66301: MINUS
66302: PUSH
66303: LD_VAR 0 2
66307: PUSH
66308: LD_INT 3
66310: MINUS
66311: PUSH
66312: LD_INT 2
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: LIST
66319: PUSH
66320: LD_VAR 0 1
66324: PUSH
66325: LD_INT 4
66327: MINUS
66328: PUSH
66329: LD_VAR 0 2
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: LIST
66341: PUSH
66342: LD_VAR 0 1
66346: PUSH
66347: LD_VAR 0 2
66351: PUSH
66352: LD_INT 3
66354: PLUS
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: LIST
66363: PUSH
66364: LD_VAR 0 1
66368: PUSH
66369: LD_INT 4
66371: PLUS
66372: PUSH
66373: LD_VAR 0 2
66377: PUSH
66378: LD_INT 4
66380: PLUS
66381: PUSH
66382: LD_INT 5
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: ST_TO_ADDR
// end ; 2 :
66397: GO 66956
66399: LD_INT 2
66401: DOUBLE
66402: EQUAL
66403: IFTRUE 66407
66405: GO 66536
66407: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66408: LD_ADDR_VAR 0 5
66412: PUSH
66413: LD_VAR 0 1
66417: PUSH
66418: LD_VAR 0 2
66422: PUSH
66423: LD_INT 3
66425: MINUS
66426: PUSH
66427: LD_INT 3
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: PUSH
66435: LD_VAR 0 1
66439: PUSH
66440: LD_INT 4
66442: PLUS
66443: PUSH
66444: LD_VAR 0 2
66448: PUSH
66449: LD_INT 4
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: LIST
66456: PUSH
66457: LD_VAR 0 1
66461: PUSH
66462: LD_VAR 0 2
66466: PUSH
66467: LD_INT 4
66469: PLUS
66470: PUSH
66471: LD_INT 0
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: LIST
66478: PUSH
66479: LD_VAR 0 1
66483: PUSH
66484: LD_INT 3
66486: MINUS
66487: PUSH
66488: LD_VAR 0 2
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: LIST
66500: PUSH
66501: LD_VAR 0 1
66505: PUSH
66506: LD_INT 4
66508: MINUS
66509: PUSH
66510: LD_VAR 0 2
66514: PUSH
66515: LD_INT 4
66517: MINUS
66518: PUSH
66519: LD_INT 2
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: ST_TO_ADDR
// end ; 3 :
66534: GO 66956
66536: LD_INT 3
66538: DOUBLE
66539: EQUAL
66540: IFTRUE 66544
66542: GO 66677
66544: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66545: LD_ADDR_VAR 0 5
66549: PUSH
66550: LD_VAR 0 1
66554: PUSH
66555: LD_INT 3
66557: PLUS
66558: PUSH
66559: LD_VAR 0 2
66563: PUSH
66564: LD_INT 4
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: LIST
66571: PUSH
66572: LD_VAR 0 1
66576: PUSH
66577: LD_INT 4
66579: PLUS
66580: PUSH
66581: LD_VAR 0 2
66585: PUSH
66586: LD_INT 4
66588: PLUS
66589: PUSH
66590: LD_INT 5
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: LIST
66597: PUSH
66598: LD_VAR 0 1
66602: PUSH
66603: LD_INT 4
66605: MINUS
66606: PUSH
66607: LD_VAR 0 2
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: PUSH
66620: LD_VAR 0 1
66624: PUSH
66625: LD_VAR 0 2
66629: PUSH
66630: LD_INT 4
66632: MINUS
66633: PUSH
66634: LD_INT 3
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: LIST
66641: PUSH
66642: LD_VAR 0 1
66646: PUSH
66647: LD_INT 3
66649: MINUS
66650: PUSH
66651: LD_VAR 0 2
66655: PUSH
66656: LD_INT 3
66658: MINUS
66659: PUSH
66660: LD_INT 2
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: LIST
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: ST_TO_ADDR
// end ; 4 :
66675: GO 66956
66677: LD_INT 4
66679: DOUBLE
66680: EQUAL
66681: IFTRUE 66685
66683: GO 66818
66685: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66686: LD_ADDR_VAR 0 5
66690: PUSH
66691: LD_VAR 0 1
66695: PUSH
66696: LD_VAR 0 2
66700: PUSH
66701: LD_INT 4
66703: PLUS
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: LIST
66712: PUSH
66713: LD_VAR 0 1
66717: PUSH
66718: LD_INT 3
66720: PLUS
66721: PUSH
66722: LD_VAR 0 2
66726: PUSH
66727: LD_INT 3
66729: PLUS
66730: PUSH
66731: LD_INT 5
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: LIST
66738: PUSH
66739: LD_VAR 0 1
66743: PUSH
66744: LD_INT 4
66746: PLUS
66747: PUSH
66748: LD_VAR 0 2
66752: PUSH
66753: LD_INT 4
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: LIST
66760: PUSH
66761: LD_VAR 0 1
66765: PUSH
66766: LD_VAR 0 2
66770: PUSH
66771: LD_INT 3
66773: MINUS
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: LIST
66782: PUSH
66783: LD_VAR 0 1
66787: PUSH
66788: LD_INT 4
66790: MINUS
66791: PUSH
66792: LD_VAR 0 2
66796: PUSH
66797: LD_INT 4
66799: MINUS
66800: PUSH
66801: LD_INT 2
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: ST_TO_ADDR
// end ; 5 :
66816: GO 66956
66818: LD_INT 5
66820: DOUBLE
66821: EQUAL
66822: IFTRUE 66826
66824: GO 66955
66826: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66827: LD_ADDR_VAR 0 5
66831: PUSH
66832: LD_VAR 0 1
66836: PUSH
66837: LD_INT 4
66839: MINUS
66840: PUSH
66841: LD_VAR 0 2
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: LIST
66853: PUSH
66854: LD_VAR 0 1
66858: PUSH
66859: LD_VAR 0 2
66863: PUSH
66864: LD_INT 4
66866: MINUS
66867: PUSH
66868: LD_INT 3
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: PUSH
66876: LD_VAR 0 1
66880: PUSH
66881: LD_INT 4
66883: PLUS
66884: PUSH
66885: LD_VAR 0 2
66889: PUSH
66890: LD_INT 4
66892: PLUS
66893: PUSH
66894: LD_INT 5
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: LIST
66901: PUSH
66902: LD_VAR 0 1
66906: PUSH
66907: LD_INT 3
66909: PLUS
66910: PUSH
66911: LD_VAR 0 2
66915: PUSH
66916: LD_INT 4
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: PUSH
66924: LD_VAR 0 1
66928: PUSH
66929: LD_VAR 0 2
66933: PUSH
66934: LD_INT 3
66936: PLUS
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: LIST
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: ST_TO_ADDR
// end ; end ;
66953: GO 66956
66955: POP
// result := list ;
66956: LD_ADDR_VAR 0 4
66960: PUSH
66961: LD_VAR 0 5
66965: ST_TO_ADDR
// end ;
66966: LD_VAR 0 4
66970: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66971: LD_INT 0
66973: PPUSH
66974: PPUSH
66975: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66976: LD_VAR 0 1
66980: NOT
66981: IFTRUE 67009
66983: PUSH
66984: LD_VAR 0 2
66988: PUSH
66989: LD_INT 1
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: LD_INT 4
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: IN
67007: NOT
67008: OR
67009: IFFALSE 67013
// exit ;
67011: GO 67096
// tmp := [ ] ;
67013: LD_ADDR_VAR 0 5
67017: PUSH
67018: EMPTY
67019: ST_TO_ADDR
// for i in units do
67020: LD_ADDR_VAR 0 4
67024: PUSH
67025: LD_VAR 0 1
67029: PUSH
67030: FOR_IN
67031: IFFALSE 67065
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67033: LD_ADDR_VAR 0 5
67037: PUSH
67038: LD_VAR 0 5
67042: PPUSH
67043: LD_VAR 0 4
67047: PPUSH
67048: LD_VAR 0 2
67052: PPUSH
67053: CALL_OW 259
67057: PPUSH
67058: CALL 68491 0 2
67062: ST_TO_ADDR
67063: GO 67030
67065: POP
67066: POP
// if not tmp then
67067: LD_VAR 0 5
67071: NOT
67072: IFFALSE 67076
// exit ;
67074: GO 67096
// result := SortListByListDesc ( units , tmp ) ;
67076: LD_ADDR_VAR 0 3
67080: PUSH
67081: LD_VAR 0 1
67085: PPUSH
67086: LD_VAR 0 5
67090: PPUSH
67091: CALL_OW 77
67095: ST_TO_ADDR
// end ;
67096: LD_VAR 0 3
67100: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67101: LD_INT 0
67103: PPUSH
67104: PPUSH
67105: PPUSH
// result := false ;
67106: LD_ADDR_VAR 0 3
67110: PUSH
67111: LD_INT 0
67113: ST_TO_ADDR
// if not building then
67114: LD_VAR 0 2
67118: NOT
67119: IFFALSE 67123
// exit ;
67121: GO 67267
// x := GetX ( building ) ;
67123: LD_ADDR_VAR 0 4
67127: PUSH
67128: LD_VAR 0 2
67132: PPUSH
67133: CALL_OW 250
67137: ST_TO_ADDR
// y := GetY ( building ) ;
67138: LD_ADDR_VAR 0 5
67142: PUSH
67143: LD_VAR 0 2
67147: PPUSH
67148: CALL_OW 251
67152: ST_TO_ADDR
// if not x or not y then
67153: LD_VAR 0 4
67157: NOT
67158: IFTRUE 67167
67160: PUSH
67161: LD_VAR 0 5
67165: NOT
67166: OR
67167: IFFALSE 67171
// exit ;
67169: GO 67267
// if GetTaskList ( unit ) then
67171: LD_VAR 0 1
67175: PPUSH
67176: CALL_OW 437
67180: IFFALSE 67267
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67182: LD_STRING e
67184: PUSH
67185: LD_VAR 0 1
67189: PPUSH
67190: CALL_OW 437
67194: PUSH
67195: LD_INT 1
67197: ARRAY
67198: PUSH
67199: LD_INT 1
67201: ARRAY
67202: EQUAL
67203: IFFALSE 67230
67205: PUSH
67206: LD_VAR 0 4
67210: PUSH
67211: LD_VAR 0 1
67215: PPUSH
67216: CALL_OW 437
67220: PUSH
67221: LD_INT 1
67223: ARRAY
67224: PUSH
67225: LD_INT 2
67227: ARRAY
67228: EQUAL
67229: AND
67230: IFFALSE 67257
67232: PUSH
67233: LD_VAR 0 5
67237: PUSH
67238: LD_VAR 0 1
67242: PPUSH
67243: CALL_OW 437
67247: PUSH
67248: LD_INT 1
67250: ARRAY
67251: PUSH
67252: LD_INT 3
67254: ARRAY
67255: EQUAL
67256: AND
67257: IFFALSE 67267
// result := true end ;
67259: LD_ADDR_VAR 0 3
67263: PUSH
67264: LD_INT 1
67266: ST_TO_ADDR
// end ;
67267: LD_VAR 0 3
67271: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67272: LD_INT 0
67274: PPUSH
// result := false ;
67275: LD_ADDR_VAR 0 4
67279: PUSH
67280: LD_INT 0
67282: ST_TO_ADDR
// if GetTaskList ( unit ) then
67283: LD_VAR 0 1
67287: PPUSH
67288: CALL_OW 437
67292: IFFALSE 67379
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67294: LD_STRING M
67296: PUSH
67297: LD_VAR 0 1
67301: PPUSH
67302: CALL_OW 437
67306: PUSH
67307: LD_INT 1
67309: ARRAY
67310: PUSH
67311: LD_INT 1
67313: ARRAY
67314: EQUAL
67315: IFFALSE 67342
67317: PUSH
67318: LD_VAR 0 2
67322: PUSH
67323: LD_VAR 0 1
67327: PPUSH
67328: CALL_OW 437
67332: PUSH
67333: LD_INT 1
67335: ARRAY
67336: PUSH
67337: LD_INT 2
67339: ARRAY
67340: EQUAL
67341: AND
67342: IFFALSE 67369
67344: PUSH
67345: LD_VAR 0 3
67349: PUSH
67350: LD_VAR 0 1
67354: PPUSH
67355: CALL_OW 437
67359: PUSH
67360: LD_INT 1
67362: ARRAY
67363: PUSH
67364: LD_INT 3
67366: ARRAY
67367: EQUAL
67368: AND
67369: IFFALSE 67379
// result := true ;
67371: LD_ADDR_VAR 0 4
67375: PUSH
67376: LD_INT 1
67378: ST_TO_ADDR
// end ; end ;
67379: LD_VAR 0 4
67383: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67384: LD_INT 0
67386: PPUSH
67387: PPUSH
67388: PPUSH
67389: PPUSH
// if not unit or not area then
67390: LD_VAR 0 1
67394: NOT
67395: IFTRUE 67404
67397: PUSH
67398: LD_VAR 0 2
67402: NOT
67403: OR
67404: IFFALSE 67408
// exit ;
67406: GO 67584
// tmp := AreaToList ( area , i ) ;
67408: LD_ADDR_VAR 0 6
67412: PUSH
67413: LD_VAR 0 2
67417: PPUSH
67418: LD_VAR 0 5
67422: PPUSH
67423: CALL_OW 517
67427: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67428: LD_ADDR_VAR 0 5
67432: PUSH
67433: DOUBLE
67434: LD_INT 1
67436: DEC
67437: ST_TO_ADDR
67438: LD_VAR 0 6
67442: PUSH
67443: LD_INT 1
67445: ARRAY
67446: PUSH
67447: FOR_TO
67448: IFFALSE 67582
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67450: LD_ADDR_VAR 0 7
67454: PUSH
67455: LD_VAR 0 6
67459: PUSH
67460: LD_INT 1
67462: ARRAY
67463: PUSH
67464: LD_VAR 0 5
67468: ARRAY
67469: PUSH
67470: LD_VAR 0 6
67474: PUSH
67475: LD_INT 2
67477: ARRAY
67478: PUSH
67479: LD_VAR 0 5
67483: ARRAY
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67489: LD_INT 92
67491: PUSH
67492: LD_VAR 0 7
67496: PUSH
67497: LD_INT 1
67499: ARRAY
67500: PUSH
67501: LD_VAR 0 7
67505: PUSH
67506: LD_INT 2
67508: ARRAY
67509: PUSH
67510: LD_INT 2
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: PPUSH
67519: CALL_OW 69
67523: PUSH
67524: LD_INT 0
67526: EQUAL
67527: IFFALSE 67580
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67529: LD_VAR 0 1
67533: PPUSH
67534: LD_VAR 0 7
67538: PUSH
67539: LD_INT 1
67541: ARRAY
67542: PPUSH
67543: LD_VAR 0 7
67547: PUSH
67548: LD_INT 2
67550: ARRAY
67551: PPUSH
67552: LD_VAR 0 3
67556: PPUSH
67557: CALL_OW 48
// result := IsPlaced ( unit ) ;
67561: LD_ADDR_VAR 0 4
67565: PUSH
67566: LD_VAR 0 1
67570: PPUSH
67571: CALL_OW 305
67575: ST_TO_ADDR
// exit ;
67576: POP
67577: POP
67578: GO 67584
// end ; end ;
67580: GO 67447
67582: POP
67583: POP
// end ;
67584: LD_VAR 0 4
67588: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67589: LD_INT 0
67591: PPUSH
67592: PPUSH
67593: PPUSH
// if not side or side > 8 then
67594: LD_VAR 0 1
67598: NOT
67599: IFTRUE 67611
67601: PUSH
67602: LD_VAR 0 1
67606: PUSH
67607: LD_INT 8
67609: GREATER
67610: OR
67611: IFFALSE 67615
// exit ;
67613: GO 67802
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67615: LD_ADDR_VAR 0 4
67619: PUSH
67620: LD_INT 22
67622: PUSH
67623: LD_VAR 0 1
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 21
67634: PUSH
67635: LD_INT 3
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PPUSH
67646: CALL_OW 69
67650: ST_TO_ADDR
// if not tmp then
67651: LD_VAR 0 4
67655: NOT
67656: IFFALSE 67660
// exit ;
67658: GO 67802
// enable_addtolog := true ;
67660: LD_ADDR_OWVAR 81
67664: PUSH
67665: LD_INT 1
67667: ST_TO_ADDR
// AddToLog ( [ ) ;
67668: LD_STRING [
67670: PPUSH
67671: CALL_OW 561
// for i in tmp do
67675: LD_ADDR_VAR 0 3
67679: PUSH
67680: LD_VAR 0 4
67684: PUSH
67685: FOR_IN
67686: IFFALSE 67793
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67688: LD_STRING [
67690: PUSH
67691: LD_VAR 0 3
67695: PPUSH
67696: CALL_OW 266
67700: STR
67701: PUSH
67702: LD_STRING , 
67704: STR
67705: PUSH
67706: LD_VAR 0 3
67710: PPUSH
67711: CALL_OW 250
67715: STR
67716: PUSH
67717: LD_STRING , 
67719: STR
67720: PUSH
67721: LD_VAR 0 3
67725: PPUSH
67726: CALL_OW 251
67730: STR
67731: PUSH
67732: LD_STRING , 
67734: STR
67735: PUSH
67736: LD_VAR 0 3
67740: PPUSH
67741: CALL_OW 254
67745: STR
67746: PUSH
67747: LD_STRING , 
67749: STR
67750: PUSH
67751: LD_VAR 0 3
67755: PPUSH
67756: LD_INT 1
67758: PPUSH
67759: CALL_OW 268
67763: STR
67764: PUSH
67765: LD_STRING , 
67767: STR
67768: PUSH
67769: LD_VAR 0 3
67773: PPUSH
67774: LD_INT 2
67776: PPUSH
67777: CALL_OW 268
67781: STR
67782: PUSH
67783: LD_STRING ],
67785: STR
67786: PPUSH
67787: CALL_OW 561
// end ;
67791: GO 67685
67793: POP
67794: POP
// AddToLog ( ]; ) ;
67795: LD_STRING ];
67797: PPUSH
67798: CALL_OW 561
// end ;
67802: LD_VAR 0 2
67806: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67807: LD_INT 0
67809: PPUSH
67810: PPUSH
67811: PPUSH
67812: PPUSH
67813: PPUSH
// if not area or not rate or not max then
67814: LD_VAR 0 1
67818: NOT
67819: IFTRUE 67828
67821: PUSH
67822: LD_VAR 0 2
67826: NOT
67827: OR
67828: IFTRUE 67837
67830: PUSH
67831: LD_VAR 0 4
67835: NOT
67836: OR
67837: IFFALSE 67841
// exit ;
67839: GO 68030
// while 1 do
67841: LD_INT 1
67843: IFFALSE 68030
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67845: LD_ADDR_VAR 0 9
67849: PUSH
67850: LD_VAR 0 1
67854: PPUSH
67855: LD_INT 1
67857: PPUSH
67858: CALL_OW 287
67862: PUSH
67863: LD_INT 10
67865: MUL
67866: ST_TO_ADDR
// r := rate / 10 ;
67867: LD_ADDR_VAR 0 7
67871: PUSH
67872: LD_VAR 0 2
67876: PUSH
67877: LD_INT 10
67879: DIVREAL
67880: ST_TO_ADDR
// time := 1 1$00 ;
67881: LD_ADDR_VAR 0 8
67885: PUSH
67886: LD_INT 2100
67888: ST_TO_ADDR
// if amount < min then
67889: LD_VAR 0 9
67893: PUSH
67894: LD_VAR 0 3
67898: LESS
67899: IFFALSE 67917
// r := r * 2 else
67901: LD_ADDR_VAR 0 7
67905: PUSH
67906: LD_VAR 0 7
67910: PUSH
67911: LD_INT 2
67913: MUL
67914: ST_TO_ADDR
67915: GO 67943
// if amount > max then
67917: LD_VAR 0 9
67921: PUSH
67922: LD_VAR 0 4
67926: GREATER
67927: IFFALSE 67943
// r := r / 2 ;
67929: LD_ADDR_VAR 0 7
67933: PUSH
67934: LD_VAR 0 7
67938: PUSH
67939: LD_INT 2
67941: DIVREAL
67942: ST_TO_ADDR
// time := time / r ;
67943: LD_ADDR_VAR 0 8
67947: PUSH
67948: LD_VAR 0 8
67952: PUSH
67953: LD_VAR 0 7
67957: DIVREAL
67958: ST_TO_ADDR
// if time < 0 then
67959: LD_VAR 0 8
67963: PUSH
67964: LD_INT 0
67966: LESS
67967: IFFALSE 67984
// time := time * - 1 ;
67969: LD_ADDR_VAR 0 8
67973: PUSH
67974: LD_VAR 0 8
67978: PUSH
67979: LD_INT 1
67981: NEG
67982: MUL
67983: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67984: LD_VAR 0 8
67988: PUSH
67989: LD_INT 35
67991: PPUSH
67992: LD_INT 875
67994: PPUSH
67995: CALL_OW 12
67999: PLUS
68000: PPUSH
68001: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68005: LD_INT 1
68007: PPUSH
68008: LD_INT 5
68010: PPUSH
68011: CALL_OW 12
68015: PPUSH
68016: LD_VAR 0 1
68020: PPUSH
68021: LD_INT 1
68023: PPUSH
68024: CALL_OW 55
// end ;
68028: GO 67841
// end ;
68030: LD_VAR 0 5
68034: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68035: LD_INT 0
68037: PPUSH
68038: PPUSH
68039: PPUSH
68040: PPUSH
68041: PPUSH
68042: PPUSH
68043: PPUSH
68044: PPUSH
// if not turrets or not factories then
68045: LD_VAR 0 1
68049: NOT
68050: IFTRUE 68059
68052: PUSH
68053: LD_VAR 0 2
68057: NOT
68058: OR
68059: IFFALSE 68063
// exit ;
68061: GO 68370
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68063: LD_ADDR_VAR 0 10
68067: PUSH
68068: LD_INT 5
68070: PUSH
68071: LD_INT 6
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 2
68080: PUSH
68081: LD_INT 4
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 3
68090: PUSH
68091: LD_INT 5
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 24
68105: PUSH
68106: LD_INT 25
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 23
68115: PUSH
68116: LD_INT 27
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 42
68129: PUSH
68130: LD_INT 43
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 44
68139: PUSH
68140: LD_INT 46
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 45
68149: PUSH
68150: LD_INT 47
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: LIST
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: LIST
68166: ST_TO_ADDR
// result := [ ] ;
68167: LD_ADDR_VAR 0 3
68171: PUSH
68172: EMPTY
68173: ST_TO_ADDR
// for i in turrets do
68174: LD_ADDR_VAR 0 4
68178: PUSH
68179: LD_VAR 0 1
68183: PUSH
68184: FOR_IN
68185: IFFALSE 68368
// begin nat := GetNation ( i ) ;
68187: LD_ADDR_VAR 0 7
68191: PUSH
68192: LD_VAR 0 4
68196: PPUSH
68197: CALL_OW 248
68201: ST_TO_ADDR
// weapon := 0 ;
68202: LD_ADDR_VAR 0 8
68206: PUSH
68207: LD_INT 0
68209: ST_TO_ADDR
// if not nat then
68210: LD_VAR 0 7
68214: NOT
68215: IFFALSE 68219
// continue ;
68217: GO 68184
// for j in list [ nat ] do
68219: LD_ADDR_VAR 0 5
68223: PUSH
68224: LD_VAR 0 10
68228: PUSH
68229: LD_VAR 0 7
68233: ARRAY
68234: PUSH
68235: FOR_IN
68236: IFFALSE 68277
// if GetBWeapon ( i ) = j [ 1 ] then
68238: LD_VAR 0 4
68242: PPUSH
68243: CALL_OW 269
68247: PUSH
68248: LD_VAR 0 5
68252: PUSH
68253: LD_INT 1
68255: ARRAY
68256: EQUAL
68257: IFFALSE 68275
// begin weapon := j [ 2 ] ;
68259: LD_ADDR_VAR 0 8
68263: PUSH
68264: LD_VAR 0 5
68268: PUSH
68269: LD_INT 2
68271: ARRAY
68272: ST_TO_ADDR
// break ;
68273: GO 68277
// end ;
68275: GO 68235
68277: POP
68278: POP
// if not weapon then
68279: LD_VAR 0 8
68283: NOT
68284: IFFALSE 68288
// continue ;
68286: GO 68184
// for k in factories do
68288: LD_ADDR_VAR 0 6
68292: PUSH
68293: LD_VAR 0 2
68297: PUSH
68298: FOR_IN
68299: IFFALSE 68364
// begin weapons := AvailableWeaponList ( k ) ;
68301: LD_ADDR_VAR 0 9
68305: PUSH
68306: LD_VAR 0 6
68310: PPUSH
68311: CALL_OW 478
68315: ST_TO_ADDR
// if not weapons then
68316: LD_VAR 0 9
68320: NOT
68321: IFFALSE 68325
// continue ;
68323: GO 68298
// if weapon in weapons then
68325: LD_VAR 0 8
68329: PUSH
68330: LD_VAR 0 9
68334: IN
68335: IFFALSE 68362
// begin result := [ i , weapon ] ;
68337: LD_ADDR_VAR 0 3
68341: PUSH
68342: LD_VAR 0 4
68346: PUSH
68347: LD_VAR 0 8
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: ST_TO_ADDR
// exit ;
68356: POP
68357: POP
68358: POP
68359: POP
68360: GO 68370
// end ; end ;
68362: GO 68298
68364: POP
68365: POP
// end ;
68366: GO 68184
68368: POP
68369: POP
// end ;
68370: LD_VAR 0 3
68374: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68375: LD_INT 0
68377: PPUSH
// if not side or side > 8 then
68378: LD_VAR 0 3
68382: NOT
68383: IFTRUE 68395
68385: PUSH
68386: LD_VAR 0 3
68390: PUSH
68391: LD_INT 8
68393: GREATER
68394: OR
68395: IFFALSE 68399
// exit ;
68397: GO 68458
// if not range then
68399: LD_VAR 0 4
68403: NOT
68404: IFFALSE 68415
// range := - 12 ;
68406: LD_ADDR_VAR 0 4
68410: PUSH
68411: LD_INT 12
68413: NEG
68414: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68415: LD_VAR 0 1
68419: PPUSH
68420: LD_VAR 0 2
68424: PPUSH
68425: LD_VAR 0 3
68429: PPUSH
68430: LD_VAR 0 4
68434: PPUSH
68435: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68439: LD_VAR 0 1
68443: PPUSH
68444: LD_VAR 0 2
68448: PPUSH
68449: LD_VAR 0 3
68453: PPUSH
68454: CALL_OW 331
// end ;
68458: LD_VAR 0 5
68462: RET
// export function Video ( mode ) ; begin
68463: LD_INT 0
68465: PPUSH
// ingame_video = mode ;
68466: LD_ADDR_OWVAR 52
68470: PUSH
68471: LD_VAR 0 1
68475: ST_TO_ADDR
// interface_hidden = mode ;
68476: LD_ADDR_OWVAR 54
68480: PUSH
68481: LD_VAR 0 1
68485: ST_TO_ADDR
// end ;
68486: LD_VAR 0 2
68490: RET
// export function Join ( array , element ) ; begin
68491: LD_INT 0
68493: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68494: LD_ADDR_VAR 0 3
68498: PUSH
68499: LD_VAR 0 1
68503: PPUSH
68504: LD_VAR 0 1
68508: PUSH
68509: LD_INT 1
68511: PLUS
68512: PPUSH
68513: LD_VAR 0 2
68517: PPUSH
68518: CALL_OW 1
68522: ST_TO_ADDR
// end ;
68523: LD_VAR 0 3
68527: RET
// export function JoinUnion ( array , element ) ; begin
68528: LD_INT 0
68530: PPUSH
// result := array union element ;
68531: LD_ADDR_VAR 0 3
68535: PUSH
68536: LD_VAR 0 1
68540: PUSH
68541: LD_VAR 0 2
68545: UNION
68546: ST_TO_ADDR
// end ;
68547: LD_VAR 0 3
68551: RET
// export function GetBehemoths ( side ) ; begin
68552: LD_INT 0
68554: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68555: LD_ADDR_VAR 0 2
68559: PUSH
68560: LD_INT 22
68562: PUSH
68563: LD_VAR 0 1
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 31
68574: PUSH
68575: LD_INT 25
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PPUSH
68586: CALL_OW 69
68590: ST_TO_ADDR
// end ;
68591: LD_VAR 0 2
68595: RET
// export function Shuffle ( array ) ; var i , index ; begin
68596: LD_INT 0
68598: PPUSH
68599: PPUSH
68600: PPUSH
// result := [ ] ;
68601: LD_ADDR_VAR 0 2
68605: PUSH
68606: EMPTY
68607: ST_TO_ADDR
// if not array then
68608: LD_VAR 0 1
68612: NOT
68613: IFFALSE 68617
// exit ;
68615: GO 68716
// Randomize ;
68617: CALL_OW 10
// for i = array downto 1 do
68621: LD_ADDR_VAR 0 3
68625: PUSH
68626: DOUBLE
68627: LD_VAR 0 1
68631: INC
68632: ST_TO_ADDR
68633: LD_INT 1
68635: PUSH
68636: FOR_DOWNTO
68637: IFFALSE 68714
// begin index := rand ( 1 , array ) ;
68639: LD_ADDR_VAR 0 4
68643: PUSH
68644: LD_INT 1
68646: PPUSH
68647: LD_VAR 0 1
68651: PPUSH
68652: CALL_OW 12
68656: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68657: LD_ADDR_VAR 0 2
68661: PUSH
68662: LD_VAR 0 2
68666: PPUSH
68667: LD_VAR 0 2
68671: PUSH
68672: LD_INT 1
68674: PLUS
68675: PPUSH
68676: LD_VAR 0 1
68680: PUSH
68681: LD_VAR 0 4
68685: ARRAY
68686: PPUSH
68687: CALL_OW 2
68691: ST_TO_ADDR
// array := Delete ( array , index ) ;
68692: LD_ADDR_VAR 0 1
68696: PUSH
68697: LD_VAR 0 1
68701: PPUSH
68702: LD_VAR 0 4
68706: PPUSH
68707: CALL_OW 3
68711: ST_TO_ADDR
// end ;
68712: GO 68636
68714: POP
68715: POP
// end ;
68716: LD_VAR 0 2
68720: RET
// export function GetBaseMaterials ( base ) ; begin
68721: LD_INT 0
68723: PPUSH
// result := [ 0 , 0 , 0 ] ;
68724: LD_ADDR_VAR 0 2
68728: PUSH
68729: LD_INT 0
68731: PUSH
68732: LD_INT 0
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: LIST
68742: ST_TO_ADDR
// if not base then
68743: LD_VAR 0 1
68747: NOT
68748: IFFALSE 68752
// exit ;
68750: GO 68801
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68752: LD_ADDR_VAR 0 2
68756: PUSH
68757: LD_VAR 0 1
68761: PPUSH
68762: LD_INT 1
68764: PPUSH
68765: CALL_OW 275
68769: PUSH
68770: LD_VAR 0 1
68774: PPUSH
68775: LD_INT 2
68777: PPUSH
68778: CALL_OW 275
68782: PUSH
68783: LD_VAR 0 1
68787: PPUSH
68788: LD_INT 3
68790: PPUSH
68791: CALL_OW 275
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: LIST
68800: ST_TO_ADDR
// end ;
68801: LD_VAR 0 2
68805: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68806: LD_INT 0
68808: PPUSH
68809: PPUSH
// result := array ;
68810: LD_ADDR_VAR 0 3
68814: PUSH
68815: LD_VAR 0 1
68819: ST_TO_ADDR
// if size >= result then
68820: LD_VAR 0 2
68824: PUSH
68825: LD_VAR 0 3
68829: GREATEREQUAL
68830: IFFALSE 68834
// exit ;
68832: GO 68884
// if size then
68834: LD_VAR 0 2
68838: IFFALSE 68884
// for i := array downto size do
68840: LD_ADDR_VAR 0 4
68844: PUSH
68845: DOUBLE
68846: LD_VAR 0 1
68850: INC
68851: ST_TO_ADDR
68852: LD_VAR 0 2
68856: PUSH
68857: FOR_DOWNTO
68858: IFFALSE 68882
// result := Delete ( result , result ) ;
68860: LD_ADDR_VAR 0 3
68864: PUSH
68865: LD_VAR 0 3
68869: PPUSH
68870: LD_VAR 0 3
68874: PPUSH
68875: CALL_OW 3
68879: ST_TO_ADDR
68880: GO 68857
68882: POP
68883: POP
// end ;
68884: LD_VAR 0 3
68888: RET
// export function ComExit ( unit ) ; var tmp ; begin
68889: LD_INT 0
68891: PPUSH
68892: PPUSH
// if not IsInUnit ( unit ) then
68893: LD_VAR 0 1
68897: PPUSH
68898: CALL_OW 310
68902: NOT
68903: IFFALSE 68907
// exit ;
68905: GO 68967
// tmp := IsInUnit ( unit ) ;
68907: LD_ADDR_VAR 0 3
68911: PUSH
68912: LD_VAR 0 1
68916: PPUSH
68917: CALL_OW 310
68921: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68922: LD_VAR 0 3
68926: PPUSH
68927: CALL_OW 247
68931: PUSH
68932: LD_INT 2
68934: EQUAL
68935: IFFALSE 68948
// ComExitVehicle ( unit ) else
68937: LD_VAR 0 1
68941: PPUSH
68942: CALL_OW 121
68946: GO 68957
// ComExitBuilding ( unit ) ;
68948: LD_VAR 0 1
68952: PPUSH
68953: CALL_OW 122
// result := tmp ;
68957: LD_ADDR_VAR 0 2
68961: PUSH
68962: LD_VAR 0 3
68966: ST_TO_ADDR
// end ;
68967: LD_VAR 0 2
68971: RET
// export function ComExitAll ( units ) ; var i ; begin
68972: LD_INT 0
68974: PPUSH
68975: PPUSH
// if not units then
68976: LD_VAR 0 1
68980: NOT
68981: IFFALSE 68985
// exit ;
68983: GO 69011
// for i in units do
68985: LD_ADDR_VAR 0 3
68989: PUSH
68990: LD_VAR 0 1
68994: PUSH
68995: FOR_IN
68996: IFFALSE 69009
// ComExit ( i ) ;
68998: LD_VAR 0 3
69002: PPUSH
69003: CALL 68889 0 1
69007: GO 68995
69009: POP
69010: POP
// end ;
69011: LD_VAR 0 2
69015: RET
// export function ResetHc ; begin
69016: LD_INT 0
69018: PPUSH
// InitHc ;
69019: CALL_OW 19
// hc_importance := 0 ;
69023: LD_ADDR_OWVAR 32
69027: PUSH
69028: LD_INT 0
69030: ST_TO_ADDR
// end ;
69031: LD_VAR 0 1
69035: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69036: LD_INT 0
69038: PPUSH
69039: PPUSH
69040: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69041: LD_ADDR_VAR 0 6
69045: PUSH
69046: LD_VAR 0 1
69050: PUSH
69051: LD_VAR 0 3
69055: PLUS
69056: PUSH
69057: LD_INT 2
69059: DIV
69060: ST_TO_ADDR
// if _x < 0 then
69061: LD_VAR 0 6
69065: PUSH
69066: LD_INT 0
69068: LESS
69069: IFFALSE 69086
// _x := _x * - 1 ;
69071: LD_ADDR_VAR 0 6
69075: PUSH
69076: LD_VAR 0 6
69080: PUSH
69081: LD_INT 1
69083: NEG
69084: MUL
69085: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69086: LD_ADDR_VAR 0 7
69090: PUSH
69091: LD_VAR 0 2
69095: PUSH
69096: LD_VAR 0 4
69100: PLUS
69101: PUSH
69102: LD_INT 2
69104: DIV
69105: ST_TO_ADDR
// if _y < 0 then
69106: LD_VAR 0 7
69110: PUSH
69111: LD_INT 0
69113: LESS
69114: IFFALSE 69131
// _y := _y * - 1 ;
69116: LD_ADDR_VAR 0 7
69120: PUSH
69121: LD_VAR 0 7
69125: PUSH
69126: LD_INT 1
69128: NEG
69129: MUL
69130: ST_TO_ADDR
// result := [ _x , _y ] ;
69131: LD_ADDR_VAR 0 5
69135: PUSH
69136: LD_VAR 0 6
69140: PUSH
69141: LD_VAR 0 7
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: ST_TO_ADDR
// end ;
69150: LD_VAR 0 5
69154: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69155: LD_INT 0
69157: PPUSH
69158: PPUSH
69159: PPUSH
69160: PPUSH
// task := GetTaskList ( unit ) ;
69161: LD_ADDR_VAR 0 7
69165: PUSH
69166: LD_VAR 0 1
69170: PPUSH
69171: CALL_OW 437
69175: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69176: LD_VAR 0 7
69180: NOT
69181: IFFALSE 69200
69183: PUSH
69184: LD_VAR 0 1
69188: PPUSH
69189: LD_VAR 0 2
69193: PPUSH
69194: CALL_OW 308
69198: NOT
69199: AND
69200: IFFALSE 69204
// exit ;
69202: GO 69322
// if IsInArea ( unit , area ) then
69204: LD_VAR 0 1
69208: PPUSH
69209: LD_VAR 0 2
69213: PPUSH
69214: CALL_OW 308
69218: IFFALSE 69236
// begin ComMoveToArea ( unit , goAway ) ;
69220: LD_VAR 0 1
69224: PPUSH
69225: LD_VAR 0 3
69229: PPUSH
69230: CALL_OW 113
// exit ;
69234: GO 69322
// end ; if task [ 1 ] [ 1 ] <> M then
69236: LD_VAR 0 7
69240: PUSH
69241: LD_INT 1
69243: ARRAY
69244: PUSH
69245: LD_INT 1
69247: ARRAY
69248: PUSH
69249: LD_STRING M
69251: NONEQUAL
69252: IFFALSE 69256
// exit ;
69254: GO 69322
// x := task [ 1 ] [ 2 ] ;
69256: LD_ADDR_VAR 0 5
69260: PUSH
69261: LD_VAR 0 7
69265: PUSH
69266: LD_INT 1
69268: ARRAY
69269: PUSH
69270: LD_INT 2
69272: ARRAY
69273: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69274: LD_ADDR_VAR 0 6
69278: PUSH
69279: LD_VAR 0 7
69283: PUSH
69284: LD_INT 1
69286: ARRAY
69287: PUSH
69288: LD_INT 3
69290: ARRAY
69291: ST_TO_ADDR
// if InArea ( x , y , area ) then
69292: LD_VAR 0 5
69296: PPUSH
69297: LD_VAR 0 6
69301: PPUSH
69302: LD_VAR 0 2
69306: PPUSH
69307: CALL_OW 309
69311: IFFALSE 69322
// ComStop ( unit ) ;
69313: LD_VAR 0 1
69317: PPUSH
69318: CALL_OW 141
// end ;
69322: LD_VAR 0 4
69326: RET
// export function Abs ( value ) ; begin
69327: LD_INT 0
69329: PPUSH
// result := value ;
69330: LD_ADDR_VAR 0 2
69334: PUSH
69335: LD_VAR 0 1
69339: ST_TO_ADDR
// if value < 0 then
69340: LD_VAR 0 1
69344: PUSH
69345: LD_INT 0
69347: LESS
69348: IFFALSE 69365
// result := value * - 1 ;
69350: LD_ADDR_VAR 0 2
69354: PUSH
69355: LD_VAR 0 1
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: MUL
69364: ST_TO_ADDR
// end ;
69365: LD_VAR 0 2
69369: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69370: LD_INT 0
69372: PPUSH
69373: PPUSH
69374: PPUSH
69375: PPUSH
69376: PPUSH
69377: PPUSH
69378: PPUSH
69379: PPUSH
// if not unit or not building then
69380: LD_VAR 0 1
69384: NOT
69385: IFTRUE 69394
69387: PUSH
69388: LD_VAR 0 2
69392: NOT
69393: OR
69394: IFFALSE 69398
// exit ;
69396: GO 69626
// x := GetX ( building ) ;
69398: LD_ADDR_VAR 0 4
69402: PUSH
69403: LD_VAR 0 2
69407: PPUSH
69408: CALL_OW 250
69412: ST_TO_ADDR
// y := GetY ( building ) ;
69413: LD_ADDR_VAR 0 6
69417: PUSH
69418: LD_VAR 0 2
69422: PPUSH
69423: CALL_OW 251
69427: ST_TO_ADDR
// d := GetDir ( building ) ;
69428: LD_ADDR_VAR 0 8
69432: PUSH
69433: LD_VAR 0 2
69437: PPUSH
69438: CALL_OW 254
69442: ST_TO_ADDR
// r := 4 ;
69443: LD_ADDR_VAR 0 9
69447: PUSH
69448: LD_INT 4
69450: ST_TO_ADDR
// for i := 1 to 5 do
69451: LD_ADDR_VAR 0 10
69455: PUSH
69456: DOUBLE
69457: LD_INT 1
69459: DEC
69460: ST_TO_ADDR
69461: LD_INT 5
69463: PUSH
69464: FOR_TO
69465: IFFALSE 69624
// begin _x := ShiftX ( x , d , r + i ) ;
69467: LD_ADDR_VAR 0 5
69471: PUSH
69472: LD_VAR 0 4
69476: PPUSH
69477: LD_VAR 0 8
69481: PPUSH
69482: LD_VAR 0 9
69486: PUSH
69487: LD_VAR 0 10
69491: PLUS
69492: PPUSH
69493: CALL_OW 272
69497: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69498: LD_ADDR_VAR 0 7
69502: PUSH
69503: LD_VAR 0 6
69507: PPUSH
69508: LD_VAR 0 8
69512: PPUSH
69513: LD_VAR 0 9
69517: PUSH
69518: LD_VAR 0 10
69522: PLUS
69523: PPUSH
69524: CALL_OW 273
69528: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69529: LD_VAR 0 5
69533: PPUSH
69534: LD_VAR 0 7
69538: PPUSH
69539: CALL_OW 488
69543: IFFALSE 69578
69545: PUSH
69546: LD_VAR 0 5
69550: PPUSH
69551: LD_VAR 0 7
69555: PPUSH
69556: CALL_OW 428
69560: PPUSH
69561: CALL_OW 247
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: LD_INT 2
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: IN
69576: NOT
69577: AND
69578: IFFALSE 69622
// begin ComMoveXY ( unit , _x , _y ) ;
69580: LD_VAR 0 1
69584: PPUSH
69585: LD_VAR 0 5
69589: PPUSH
69590: LD_VAR 0 7
69594: PPUSH
69595: CALL_OW 111
// result := [ _x , _y ] ;
69599: LD_ADDR_VAR 0 3
69603: PUSH
69604: LD_VAR 0 5
69608: PUSH
69609: LD_VAR 0 7
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: ST_TO_ADDR
// exit ;
69618: POP
69619: POP
69620: GO 69626
// end ; end ;
69622: GO 69464
69624: POP
69625: POP
// end ;
69626: LD_VAR 0 3
69630: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69631: LD_INT 0
69633: PPUSH
69634: PPUSH
69635: PPUSH
// result := 0 ;
69636: LD_ADDR_VAR 0 3
69640: PUSH
69641: LD_INT 0
69643: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69644: LD_VAR 0 1
69648: PUSH
69649: LD_INT 0
69651: LESS
69652: IFTRUE 69664
69654: PUSH
69655: LD_VAR 0 1
69659: PUSH
69660: LD_INT 8
69662: GREATER
69663: OR
69664: IFTRUE 69676
69666: PUSH
69667: LD_VAR 0 2
69671: PUSH
69672: LD_INT 0
69674: LESS
69675: OR
69676: IFTRUE 69688
69678: PUSH
69679: LD_VAR 0 2
69683: PUSH
69684: LD_INT 8
69686: GREATER
69687: OR
69688: IFFALSE 69692
// exit ;
69690: GO 69767
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69692: LD_ADDR_VAR 0 4
69696: PUSH
69697: LD_INT 22
69699: PUSH
69700: LD_VAR 0 2
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PPUSH
69709: CALL_OW 69
69713: PUSH
69714: FOR_IN
69715: IFFALSE 69765
// begin un := UnitShoot ( i ) ;
69717: LD_ADDR_VAR 0 5
69721: PUSH
69722: LD_VAR 0 4
69726: PPUSH
69727: CALL_OW 504
69731: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69732: LD_VAR 0 5
69736: PPUSH
69737: CALL_OW 255
69741: PUSH
69742: LD_VAR 0 1
69746: EQUAL
69747: IFFALSE 69763
// begin result := un ;
69749: LD_ADDR_VAR 0 3
69753: PUSH
69754: LD_VAR 0 5
69758: ST_TO_ADDR
// exit ;
69759: POP
69760: POP
69761: GO 69767
// end ; end ;
69763: GO 69714
69765: POP
69766: POP
// end ;
69767: LD_VAR 0 3
69771: RET
// export function GetCargoBay ( units ) ; begin
69772: LD_INT 0
69774: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69775: LD_ADDR_VAR 0 2
69779: PUSH
69780: LD_VAR 0 1
69784: PPUSH
69785: LD_INT 2
69787: PUSH
69788: LD_INT 34
69790: PUSH
69791: LD_INT 12
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 34
69800: PUSH
69801: LD_INT 51
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 34
69810: PUSH
69811: LD_INT 32
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 34
69820: PUSH
69821: LD_INT 89
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: PPUSH
69835: CALL_OW 72
69839: ST_TO_ADDR
// end ;
69840: LD_VAR 0 2
69844: RET
// export function Negate ( value ) ; begin
69845: LD_INT 0
69847: PPUSH
// result := not value ;
69848: LD_ADDR_VAR 0 2
69852: PUSH
69853: LD_VAR 0 1
69857: NOT
69858: ST_TO_ADDR
// end ;
69859: LD_VAR 0 2
69863: RET
// export function Inc ( value ) ; begin
69864: LD_INT 0
69866: PPUSH
// result := value + 1 ;
69867: LD_ADDR_VAR 0 2
69871: PUSH
69872: LD_VAR 0 1
69876: PUSH
69877: LD_INT 1
69879: PLUS
69880: ST_TO_ADDR
// end ;
69881: LD_VAR 0 2
69885: RET
// export function Dec ( value ) ; begin
69886: LD_INT 0
69888: PPUSH
// result := value - 1 ;
69889: LD_ADDR_VAR 0 2
69893: PUSH
69894: LD_VAR 0 1
69898: PUSH
69899: LD_INT 1
69901: MINUS
69902: ST_TO_ADDR
// end ;
69903: LD_VAR 0 2
69907: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69908: LD_INT 0
69910: PPUSH
69911: PPUSH
69912: PPUSH
69913: PPUSH
69914: PPUSH
69915: PPUSH
69916: PPUSH
69917: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69918: LD_VAR 0 1
69922: PPUSH
69923: LD_VAR 0 2
69927: PPUSH
69928: CALL_OW 488
69932: NOT
69933: IFTRUE 69952
69935: PUSH
69936: LD_VAR 0 3
69940: PPUSH
69941: LD_VAR 0 4
69945: PPUSH
69946: CALL_OW 488
69950: NOT
69951: OR
69952: IFFALSE 69965
// begin result := - 1 ;
69954: LD_ADDR_VAR 0 5
69958: PUSH
69959: LD_INT 1
69961: NEG
69962: ST_TO_ADDR
// exit ;
69963: GO 70200
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69965: LD_ADDR_VAR 0 12
69969: PUSH
69970: LD_VAR 0 1
69974: PPUSH
69975: LD_VAR 0 2
69979: PPUSH
69980: LD_VAR 0 3
69984: PPUSH
69985: LD_VAR 0 4
69989: PPUSH
69990: CALL 69036 0 4
69994: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69995: LD_ADDR_VAR 0 11
69999: PUSH
70000: LD_VAR 0 1
70004: PPUSH
70005: LD_VAR 0 2
70009: PPUSH
70010: LD_VAR 0 12
70014: PUSH
70015: LD_INT 1
70017: ARRAY
70018: PPUSH
70019: LD_VAR 0 12
70023: PUSH
70024: LD_INT 2
70026: ARRAY
70027: PPUSH
70028: CALL_OW 298
70032: ST_TO_ADDR
// distance := 9999 ;
70033: LD_ADDR_VAR 0 10
70037: PUSH
70038: LD_INT 9999
70040: ST_TO_ADDR
// for i := 0 to 5 do
70041: LD_ADDR_VAR 0 6
70045: PUSH
70046: DOUBLE
70047: LD_INT 0
70049: DEC
70050: ST_TO_ADDR
70051: LD_INT 5
70053: PUSH
70054: FOR_TO
70055: IFFALSE 70198
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70057: LD_ADDR_VAR 0 7
70061: PUSH
70062: LD_VAR 0 1
70066: PPUSH
70067: LD_VAR 0 6
70071: PPUSH
70072: LD_VAR 0 11
70076: PPUSH
70077: CALL_OW 272
70081: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70082: LD_ADDR_VAR 0 8
70086: PUSH
70087: LD_VAR 0 2
70091: PPUSH
70092: LD_VAR 0 6
70096: PPUSH
70097: LD_VAR 0 11
70101: PPUSH
70102: CALL_OW 273
70106: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70107: LD_VAR 0 7
70111: PPUSH
70112: LD_VAR 0 8
70116: PPUSH
70117: CALL_OW 488
70121: NOT
70122: IFFALSE 70126
// continue ;
70124: GO 70054
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70126: LD_ADDR_VAR 0 9
70130: PUSH
70131: LD_VAR 0 12
70135: PUSH
70136: LD_INT 1
70138: ARRAY
70139: PPUSH
70140: LD_VAR 0 12
70144: PUSH
70145: LD_INT 2
70147: ARRAY
70148: PPUSH
70149: LD_VAR 0 7
70153: PPUSH
70154: LD_VAR 0 8
70158: PPUSH
70159: CALL_OW 298
70163: ST_TO_ADDR
// if tmp < distance then
70164: LD_VAR 0 9
70168: PUSH
70169: LD_VAR 0 10
70173: LESS
70174: IFFALSE 70196
// begin result := i ;
70176: LD_ADDR_VAR 0 5
70180: PUSH
70181: LD_VAR 0 6
70185: ST_TO_ADDR
// distance := tmp ;
70186: LD_ADDR_VAR 0 10
70190: PUSH
70191: LD_VAR 0 9
70195: ST_TO_ADDR
// end ; end ;
70196: GO 70054
70198: POP
70199: POP
// end ;
70200: LD_VAR 0 5
70204: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70205: LD_INT 0
70207: PPUSH
70208: PPUSH
// if not driver or not IsInUnit ( driver ) then
70209: LD_VAR 0 1
70213: NOT
70214: IFTRUE 70228
70216: PUSH
70217: LD_VAR 0 1
70221: PPUSH
70222: CALL_OW 310
70226: NOT
70227: OR
70228: IFFALSE 70232
// exit ;
70230: GO 70322
// vehicle := IsInUnit ( driver ) ;
70232: LD_ADDR_VAR 0 3
70236: PUSH
70237: LD_VAR 0 1
70241: PPUSH
70242: CALL_OW 310
70246: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70247: LD_VAR 0 1
70251: PPUSH
70252: LD_STRING \
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: LD_INT 0
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: LD_INT 0
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: LD_INT 0
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: PUSH
70282: LD_STRING E
70284: PUSH
70285: LD_INT 0
70287: PUSH
70288: LD_INT 0
70290: PUSH
70291: LD_VAR 0 3
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: LD_INT 0
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PPUSH
70318: CALL_OW 446
// end ;
70322: LD_VAR 0 2
70326: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70327: LD_INT 0
70329: PPUSH
70330: PPUSH
// if not driver or not IsInUnit ( driver ) then
70331: LD_VAR 0 1
70335: NOT
70336: IFTRUE 70350
70338: PUSH
70339: LD_VAR 0 1
70343: PPUSH
70344: CALL_OW 310
70348: NOT
70349: OR
70350: IFFALSE 70354
// exit ;
70352: GO 70444
// vehicle := IsInUnit ( driver ) ;
70354: LD_ADDR_VAR 0 3
70358: PUSH
70359: LD_VAR 0 1
70363: PPUSH
70364: CALL_OW 310
70368: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70369: LD_VAR 0 1
70373: PPUSH
70374: LD_STRING \
70376: PUSH
70377: LD_INT 0
70379: PUSH
70380: LD_INT 0
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: LD_INT 0
70391: PUSH
70392: LD_INT 0
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: PUSH
70404: LD_STRING E
70406: PUSH
70407: LD_INT 0
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_VAR 0 3
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: LD_INT 0
70423: PUSH
70424: LD_INT 0
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PPUSH
70440: CALL_OW 447
// end ;
70444: LD_VAR 0 2
70448: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70449: LD_INT 0
70451: PPUSH
70452: PPUSH
70453: PPUSH
// tmp := [ ] ;
70454: LD_ADDR_VAR 0 5
70458: PUSH
70459: EMPTY
70460: ST_TO_ADDR
// for i in units do
70461: LD_ADDR_VAR 0 4
70465: PUSH
70466: LD_VAR 0 1
70470: PUSH
70471: FOR_IN
70472: IFFALSE 70510
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70474: LD_ADDR_VAR 0 5
70478: PUSH
70479: LD_VAR 0 5
70483: PPUSH
70484: LD_VAR 0 5
70488: PUSH
70489: LD_INT 1
70491: PLUS
70492: PPUSH
70493: LD_VAR 0 4
70497: PPUSH
70498: CALL_OW 256
70502: PPUSH
70503: CALL_OW 2
70507: ST_TO_ADDR
70508: GO 70471
70510: POP
70511: POP
// if not tmp then
70512: LD_VAR 0 5
70516: NOT
70517: IFFALSE 70521
// exit ;
70519: GO 70569
// if asc then
70521: LD_VAR 0 2
70525: IFFALSE 70549
// result := SortListByListAsc ( units , tmp ) else
70527: LD_ADDR_VAR 0 3
70531: PUSH
70532: LD_VAR 0 1
70536: PPUSH
70537: LD_VAR 0 5
70541: PPUSH
70542: CALL_OW 76
70546: ST_TO_ADDR
70547: GO 70569
// result := SortListByListDesc ( units , tmp ) ;
70549: LD_ADDR_VAR 0 3
70553: PUSH
70554: LD_VAR 0 1
70558: PPUSH
70559: LD_VAR 0 5
70563: PPUSH
70564: CALL_OW 77
70568: ST_TO_ADDR
// end ;
70569: LD_VAR 0 3
70573: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70574: LD_INT 0
70576: PPUSH
70577: PPUSH
// task := GetTaskList ( mech ) ;
70578: LD_ADDR_VAR 0 4
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: CALL_OW 437
70592: ST_TO_ADDR
// if not task then
70593: LD_VAR 0 4
70597: NOT
70598: IFFALSE 70602
// exit ;
70600: GO 70646
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70602: LD_ADDR_VAR 0 3
70606: PUSH
70607: LD_VAR 0 4
70611: PUSH
70612: LD_INT 1
70614: ARRAY
70615: PUSH
70616: LD_INT 1
70618: ARRAY
70619: PUSH
70620: LD_STRING r
70622: EQUAL
70623: IFFALSE 70645
70625: PUSH
70626: LD_VAR 0 4
70630: PUSH
70631: LD_INT 1
70633: ARRAY
70634: PUSH
70635: LD_INT 4
70637: ARRAY
70638: PUSH
70639: LD_VAR 0 2
70643: EQUAL
70644: AND
70645: ST_TO_ADDR
// end ;
70646: LD_VAR 0 3
70650: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70651: LD_INT 0
70653: PPUSH
// SetDir ( unit , d ) ;
70654: LD_VAR 0 1
70658: PPUSH
70659: LD_VAR 0 4
70663: PPUSH
70664: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70668: LD_ADDR_VAR 0 6
70672: PUSH
70673: LD_VAR 0 1
70677: PPUSH
70678: LD_VAR 0 2
70682: PPUSH
70683: LD_VAR 0 3
70687: PPUSH
70688: LD_VAR 0 5
70692: PPUSH
70693: CALL_OW 48
70697: ST_TO_ADDR
// end ;
70698: LD_VAR 0 6
70702: RET
// export function ToNaturalNumber ( number ) ; begin
70703: LD_INT 0
70705: PPUSH
// result := number div 1 ;
70706: LD_ADDR_VAR 0 2
70710: PUSH
70711: LD_VAR 0 1
70715: PUSH
70716: LD_INT 1
70718: DIV
70719: ST_TO_ADDR
// if number < 0 then
70720: LD_VAR 0 1
70724: PUSH
70725: LD_INT 0
70727: LESS
70728: IFFALSE 70738
// result := 0 ;
70730: LD_ADDR_VAR 0 2
70734: PUSH
70735: LD_INT 0
70737: ST_TO_ADDR
// end ;
70738: LD_VAR 0 2
70742: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70743: LD_INT 0
70745: PPUSH
70746: PPUSH
70747: PPUSH
// if not buildings then
70748: LD_VAR 0 1
70752: NOT
70753: IFFALSE 70757
// exit ;
70755: GO 70872
// tmp := [ ] ;
70757: LD_ADDR_VAR 0 5
70761: PUSH
70762: EMPTY
70763: ST_TO_ADDR
// for b in buildings do
70764: LD_ADDR_VAR 0 4
70768: PUSH
70769: LD_VAR 0 1
70773: PUSH
70774: FOR_IN
70775: IFFALSE 70813
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70777: LD_ADDR_VAR 0 5
70781: PUSH
70782: LD_VAR 0 5
70786: PPUSH
70787: LD_VAR 0 5
70791: PUSH
70792: LD_INT 1
70794: PLUS
70795: PPUSH
70796: LD_VAR 0 4
70800: PPUSH
70801: CALL_OW 266
70805: PPUSH
70806: CALL_OW 1
70810: ST_TO_ADDR
70811: GO 70774
70813: POP
70814: POP
// if not tmp then
70815: LD_VAR 0 5
70819: NOT
70820: IFFALSE 70824
// exit ;
70822: GO 70872
// if asc then
70824: LD_VAR 0 2
70828: IFFALSE 70852
// result := SortListByListAsc ( buildings , tmp ) else
70830: LD_ADDR_VAR 0 3
70834: PUSH
70835: LD_VAR 0 1
70839: PPUSH
70840: LD_VAR 0 5
70844: PPUSH
70845: CALL_OW 76
70849: ST_TO_ADDR
70850: GO 70872
// result := SortListByListDesc ( buildings , tmp ) ;
70852: LD_ADDR_VAR 0 3
70856: PUSH
70857: LD_VAR 0 1
70861: PPUSH
70862: LD_VAR 0 5
70866: PPUSH
70867: CALL_OW 77
70871: ST_TO_ADDR
// end ;
70872: LD_VAR 0 3
70876: RET
// export function SortByClass ( units , class ) ; var un ; begin
70877: LD_INT 0
70879: PPUSH
70880: PPUSH
// if not units or not class then
70881: LD_VAR 0 1
70885: NOT
70886: IFTRUE 70895
70888: PUSH
70889: LD_VAR 0 2
70893: NOT
70894: OR
70895: IFFALSE 70899
// exit ;
70897: GO 70994
// result := [ ] ;
70899: LD_ADDR_VAR 0 3
70903: PUSH
70904: EMPTY
70905: ST_TO_ADDR
// for un in units do
70906: LD_ADDR_VAR 0 4
70910: PUSH
70911: LD_VAR 0 1
70915: PUSH
70916: FOR_IN
70917: IFFALSE 70992
// if GetClass ( un ) = class then
70919: LD_VAR 0 4
70923: PPUSH
70924: CALL_OW 257
70928: PUSH
70929: LD_VAR 0 2
70933: EQUAL
70934: IFFALSE 70961
// result := Insert ( result , 1 , un ) else
70936: LD_ADDR_VAR 0 3
70940: PUSH
70941: LD_VAR 0 3
70945: PPUSH
70946: LD_INT 1
70948: PPUSH
70949: LD_VAR 0 4
70953: PPUSH
70954: CALL_OW 2
70958: ST_TO_ADDR
70959: GO 70990
// result := Replace ( result , result + 1 , un ) ;
70961: LD_ADDR_VAR 0 3
70965: PUSH
70966: LD_VAR 0 3
70970: PPUSH
70971: LD_VAR 0 3
70975: PUSH
70976: LD_INT 1
70978: PLUS
70979: PPUSH
70980: LD_VAR 0 4
70984: PPUSH
70985: CALL_OW 1
70989: ST_TO_ADDR
70990: GO 70916
70992: POP
70993: POP
// end ;
70994: LD_VAR 0 3
70998: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70999: LD_INT 0
71001: PPUSH
71002: PPUSH
71003: PPUSH
71004: PPUSH
71005: PPUSH
71006: PPUSH
71007: PPUSH
// result := [ ] ;
71008: LD_ADDR_VAR 0 4
71012: PUSH
71013: EMPTY
71014: ST_TO_ADDR
// if x - r < 0 then
71015: LD_VAR 0 1
71019: PUSH
71020: LD_VAR 0 3
71024: MINUS
71025: PUSH
71026: LD_INT 0
71028: LESS
71029: IFFALSE 71041
// min_x := 0 else
71031: LD_ADDR_VAR 0 8
71035: PUSH
71036: LD_INT 0
71038: ST_TO_ADDR
71039: GO 71057
// min_x := x - r ;
71041: LD_ADDR_VAR 0 8
71045: PUSH
71046: LD_VAR 0 1
71050: PUSH
71051: LD_VAR 0 3
71055: MINUS
71056: ST_TO_ADDR
// if y - r < 0 then
71057: LD_VAR 0 2
71061: PUSH
71062: LD_VAR 0 3
71066: MINUS
71067: PUSH
71068: LD_INT 0
71070: LESS
71071: IFFALSE 71083
// min_y := 0 else
71073: LD_ADDR_VAR 0 7
71077: PUSH
71078: LD_INT 0
71080: ST_TO_ADDR
71081: GO 71099
// min_y := y - r ;
71083: LD_ADDR_VAR 0 7
71087: PUSH
71088: LD_VAR 0 2
71092: PUSH
71093: LD_VAR 0 3
71097: MINUS
71098: ST_TO_ADDR
// max_x := x + r ;
71099: LD_ADDR_VAR 0 9
71103: PUSH
71104: LD_VAR 0 1
71108: PUSH
71109: LD_VAR 0 3
71113: PLUS
71114: ST_TO_ADDR
// max_y := y + r ;
71115: LD_ADDR_VAR 0 10
71119: PUSH
71120: LD_VAR 0 2
71124: PUSH
71125: LD_VAR 0 3
71129: PLUS
71130: ST_TO_ADDR
// for _x = min_x to max_x do
71131: LD_ADDR_VAR 0 5
71135: PUSH
71136: DOUBLE
71137: LD_VAR 0 8
71141: DEC
71142: ST_TO_ADDR
71143: LD_VAR 0 9
71147: PUSH
71148: FOR_TO
71149: IFFALSE 71250
// for _y = min_y to max_y do
71151: LD_ADDR_VAR 0 6
71155: PUSH
71156: DOUBLE
71157: LD_VAR 0 7
71161: DEC
71162: ST_TO_ADDR
71163: LD_VAR 0 10
71167: PUSH
71168: FOR_TO
71169: IFFALSE 71246
// begin if not ValidHex ( _x , _y ) then
71171: LD_VAR 0 5
71175: PPUSH
71176: LD_VAR 0 6
71180: PPUSH
71181: CALL_OW 488
71185: NOT
71186: IFFALSE 71190
// continue ;
71188: GO 71168
// if GetResourceTypeXY ( _x , _y ) then
71190: LD_VAR 0 5
71194: PPUSH
71195: LD_VAR 0 6
71199: PPUSH
71200: CALL_OW 283
71204: IFFALSE 71244
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71206: LD_ADDR_VAR 0 4
71210: PUSH
71211: LD_VAR 0 4
71215: PPUSH
71216: LD_VAR 0 4
71220: PUSH
71221: LD_INT 1
71223: PLUS
71224: PPUSH
71225: LD_VAR 0 5
71229: PUSH
71230: LD_VAR 0 6
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PPUSH
71239: CALL_OW 1
71243: ST_TO_ADDR
// end ;
71244: GO 71168
71246: POP
71247: POP
71248: GO 71148
71250: POP
71251: POP
// end ;
71252: LD_VAR 0 4
71256: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71257: LD_INT 0
71259: PPUSH
71260: PPUSH
71261: PPUSH
71262: PPUSH
71263: PPUSH
71264: PPUSH
71265: PPUSH
71266: PPUSH
// if not units then
71267: LD_VAR 0 1
71271: NOT
71272: IFFALSE 71276
// exit ;
71274: GO 71808
// result := UnitFilter ( units , [ f_ok ] ) ;
71276: LD_ADDR_VAR 0 3
71280: PUSH
71281: LD_VAR 0 1
71285: PPUSH
71286: LD_INT 50
71288: PUSH
71289: EMPTY
71290: LIST
71291: PPUSH
71292: CALL_OW 72
71296: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71297: LD_ADDR_VAR 0 8
71301: PUSH
71302: LD_VAR 0 1
71306: PUSH
71307: LD_INT 1
71309: ARRAY
71310: PPUSH
71311: CALL_OW 255
71315: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71316: LD_ADDR_VAR 0 10
71320: PUSH
71321: LD_INT 29
71323: PUSH
71324: LD_INT 91
71326: PUSH
71327: LD_INT 49
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: LIST
71334: ST_TO_ADDR
// if not result then
71335: LD_VAR 0 3
71339: NOT
71340: IFFALSE 71344
// exit ;
71342: GO 71808
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71344: LD_ADDR_VAR 0 5
71348: PUSH
71349: LD_INT 81
71351: PUSH
71352: LD_VAR 0 8
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PPUSH
71361: CALL_OW 69
71365: ST_TO_ADDR
// for i in result do
71366: LD_ADDR_VAR 0 4
71370: PUSH
71371: LD_VAR 0 3
71375: PUSH
71376: FOR_IN
71377: IFFALSE 71806
// begin tag := GetTag ( i ) + 1 ;
71379: LD_ADDR_VAR 0 9
71383: PUSH
71384: LD_VAR 0 4
71388: PPUSH
71389: CALL_OW 110
71393: PUSH
71394: LD_INT 1
71396: PLUS
71397: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71398: LD_ADDR_VAR 0 7
71402: PUSH
71403: LD_VAR 0 4
71407: PPUSH
71408: CALL_OW 250
71412: PPUSH
71413: LD_VAR 0 4
71417: PPUSH
71418: CALL_OW 251
71422: PPUSH
71423: LD_INT 4
71425: PPUSH
71426: CALL 70999 0 3
71430: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71431: LD_VAR 0 4
71435: PPUSH
71436: CALL_OW 247
71440: PUSH
71441: LD_INT 2
71443: EQUAL
71444: IFFALSE 71456
71446: PUSH
71447: LD_VAR 0 7
71451: PUSH
71452: LD_INT 2
71454: GREATER
71455: AND
71456: IFFALSE 71476
71458: PUSH
71459: LD_VAR 0 4
71463: PPUSH
71464: CALL_OW 264
71468: PUSH
71469: LD_VAR 0 10
71473: IN
71474: NOT
71475: AND
71476: IFFALSE 71515
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71478: LD_VAR 0 4
71482: PPUSH
71483: LD_VAR 0 7
71487: PUSH
71488: LD_INT 1
71490: ARRAY
71491: PUSH
71492: LD_INT 1
71494: ARRAY
71495: PPUSH
71496: LD_VAR 0 7
71500: PUSH
71501: LD_INT 1
71503: ARRAY
71504: PUSH
71505: LD_INT 2
71507: ARRAY
71508: PPUSH
71509: CALL_OW 116
71513: GO 71804
// if path > tag then
71515: LD_VAR 0 2
71519: PUSH
71520: LD_VAR 0 9
71524: GREATER
71525: IFFALSE 71733
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71527: LD_ADDR_VAR 0 6
71531: PUSH
71532: LD_VAR 0 5
71536: PPUSH
71537: LD_INT 91
71539: PUSH
71540: LD_VAR 0 4
71544: PUSH
71545: LD_INT 8
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: LIST
71552: PPUSH
71553: CALL_OW 72
71557: ST_TO_ADDR
// if nearEnemy then
71558: LD_VAR 0 6
71562: IFFALSE 71631
// begin if GetWeapon ( i ) = ru_time_lapser then
71564: LD_VAR 0 4
71568: PPUSH
71569: CALL_OW 264
71573: PUSH
71574: LD_INT 49
71576: EQUAL
71577: IFFALSE 71605
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71579: LD_VAR 0 4
71583: PPUSH
71584: LD_VAR 0 6
71588: PPUSH
71589: LD_VAR 0 4
71593: PPUSH
71594: CALL_OW 74
71598: PPUSH
71599: CALL_OW 112
71603: GO 71629
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71605: LD_VAR 0 4
71609: PPUSH
71610: LD_VAR 0 6
71614: PPUSH
71615: LD_VAR 0 4
71619: PPUSH
71620: CALL_OW 74
71624: PPUSH
71625: CALL 72889 0 2
// end else
71629: GO 71731
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71631: LD_VAR 0 4
71635: PPUSH
71636: LD_VAR 0 2
71640: PUSH
71641: LD_VAR 0 9
71645: ARRAY
71646: PUSH
71647: LD_INT 1
71649: ARRAY
71650: PPUSH
71651: LD_VAR 0 2
71655: PUSH
71656: LD_VAR 0 9
71660: ARRAY
71661: PUSH
71662: LD_INT 2
71664: ARRAY
71665: PPUSH
71666: CALL_OW 297
71670: PUSH
71671: LD_INT 6
71673: GREATER
71674: IFFALSE 71717
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71676: LD_VAR 0 4
71680: PPUSH
71681: LD_VAR 0 2
71685: PUSH
71686: LD_VAR 0 9
71690: ARRAY
71691: PUSH
71692: LD_INT 1
71694: ARRAY
71695: PPUSH
71696: LD_VAR 0 2
71700: PUSH
71701: LD_VAR 0 9
71705: ARRAY
71706: PUSH
71707: LD_INT 2
71709: ARRAY
71710: PPUSH
71711: CALL_OW 114
71715: GO 71731
// SetTag ( i , tag ) ;
71717: LD_VAR 0 4
71721: PPUSH
71722: LD_VAR 0 9
71726: PPUSH
71727: CALL_OW 109
// end else
71731: GO 71804
// if enemy then
71733: LD_VAR 0 5
71737: IFFALSE 71804
// begin if GetWeapon ( i ) = ru_time_lapser then
71739: LD_VAR 0 4
71743: PPUSH
71744: CALL_OW 264
71748: PUSH
71749: LD_INT 49
71751: EQUAL
71752: IFFALSE 71780
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71754: LD_VAR 0 4
71758: PPUSH
71759: LD_VAR 0 5
71763: PPUSH
71764: LD_VAR 0 4
71768: PPUSH
71769: CALL_OW 74
71773: PPUSH
71774: CALL_OW 112
71778: GO 71804
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71780: LD_VAR 0 4
71784: PPUSH
71785: LD_VAR 0 5
71789: PPUSH
71790: LD_VAR 0 4
71794: PPUSH
71795: CALL_OW 74
71799: PPUSH
71800: CALL 72889 0 2
// end ; end ;
71804: GO 71376
71806: POP
71807: POP
// end ;
71808: LD_VAR 0 3
71812: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71813: LD_INT 0
71815: PPUSH
71816: PPUSH
71817: PPUSH
// if not unit or IsInUnit ( unit ) then
71818: LD_VAR 0 1
71822: NOT
71823: IFTRUE 71836
71825: PUSH
71826: LD_VAR 0 1
71830: PPUSH
71831: CALL_OW 310
71835: OR
71836: IFFALSE 71840
// exit ;
71838: GO 71931
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71840: LD_ADDR_VAR 0 4
71844: PUSH
71845: LD_VAR 0 1
71849: PPUSH
71850: CALL_OW 250
71854: PPUSH
71855: LD_VAR 0 2
71859: PPUSH
71860: LD_INT 1
71862: PPUSH
71863: CALL_OW 272
71867: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71868: LD_ADDR_VAR 0 5
71872: PUSH
71873: LD_VAR 0 1
71877: PPUSH
71878: CALL_OW 251
71882: PPUSH
71883: LD_VAR 0 2
71887: PPUSH
71888: LD_INT 1
71890: PPUSH
71891: CALL_OW 273
71895: ST_TO_ADDR
// if ValidHex ( x , y ) then
71896: LD_VAR 0 4
71900: PPUSH
71901: LD_VAR 0 5
71905: PPUSH
71906: CALL_OW 488
71910: IFFALSE 71931
// ComTurnXY ( unit , x , y ) ;
71912: LD_VAR 0 1
71916: PPUSH
71917: LD_VAR 0 4
71921: PPUSH
71922: LD_VAR 0 5
71926: PPUSH
71927: CALL_OW 118
// end ;
71931: LD_VAR 0 3
71935: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71936: LD_INT 0
71938: PPUSH
71939: PPUSH
// result := false ;
71940: LD_ADDR_VAR 0 3
71944: PUSH
71945: LD_INT 0
71947: ST_TO_ADDR
// if not units then
71948: LD_VAR 0 2
71952: NOT
71953: IFFALSE 71957
// exit ;
71955: GO 72002
// for i in units do
71957: LD_ADDR_VAR 0 4
71961: PUSH
71962: LD_VAR 0 2
71966: PUSH
71967: FOR_IN
71968: IFFALSE 72000
// if See ( side , i ) then
71970: LD_VAR 0 1
71974: PPUSH
71975: LD_VAR 0 4
71979: PPUSH
71980: CALL_OW 292
71984: IFFALSE 71998
// begin result := true ;
71986: LD_ADDR_VAR 0 3
71990: PUSH
71991: LD_INT 1
71993: ST_TO_ADDR
// exit ;
71994: POP
71995: POP
71996: GO 72002
// end ;
71998: GO 71967
72000: POP
72001: POP
// end ;
72002: LD_VAR 0 3
72006: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72007: LD_INT 0
72009: PPUSH
72010: PPUSH
72011: PPUSH
72012: PPUSH
// if not unit or not points then
72013: LD_VAR 0 1
72017: NOT
72018: IFTRUE 72027
72020: PUSH
72021: LD_VAR 0 2
72025: NOT
72026: OR
72027: IFFALSE 72031
// exit ;
72029: GO 72121
// dist := 99999 ;
72031: LD_ADDR_VAR 0 5
72035: PUSH
72036: LD_INT 99999
72038: ST_TO_ADDR
// for i in points do
72039: LD_ADDR_VAR 0 4
72043: PUSH
72044: LD_VAR 0 2
72048: PUSH
72049: FOR_IN
72050: IFFALSE 72119
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72052: LD_ADDR_VAR 0 6
72056: PUSH
72057: LD_VAR 0 1
72061: PPUSH
72062: LD_VAR 0 4
72066: PUSH
72067: LD_INT 1
72069: ARRAY
72070: PPUSH
72071: LD_VAR 0 4
72075: PUSH
72076: LD_INT 2
72078: ARRAY
72079: PPUSH
72080: CALL_OW 297
72084: ST_TO_ADDR
// if tmpDist < dist then
72085: LD_VAR 0 6
72089: PUSH
72090: LD_VAR 0 5
72094: LESS
72095: IFFALSE 72117
// begin result := i ;
72097: LD_ADDR_VAR 0 3
72101: PUSH
72102: LD_VAR 0 4
72106: ST_TO_ADDR
// dist := tmpDist ;
72107: LD_ADDR_VAR 0 5
72111: PUSH
72112: LD_VAR 0 6
72116: ST_TO_ADDR
// end ; end ;
72117: GO 72049
72119: POP
72120: POP
// end ;
72121: LD_VAR 0 3
72125: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72126: LD_INT 0
72128: PPUSH
// uc_side := side ;
72129: LD_ADDR_OWVAR 20
72133: PUSH
72134: LD_VAR 0 1
72138: ST_TO_ADDR
// uc_nation := 3 ;
72139: LD_ADDR_OWVAR 21
72143: PUSH
72144: LD_INT 3
72146: ST_TO_ADDR
// vc_chassis := 25 ;
72147: LD_ADDR_OWVAR 37
72151: PUSH
72152: LD_INT 25
72154: ST_TO_ADDR
// vc_engine := engine_siberite ;
72155: LD_ADDR_OWVAR 39
72159: PUSH
72160: LD_INT 3
72162: ST_TO_ADDR
// vc_control := control_computer ;
72163: LD_ADDR_OWVAR 38
72167: PUSH
72168: LD_INT 3
72170: ST_TO_ADDR
// vc_weapon := 59 ;
72171: LD_ADDR_OWVAR 40
72175: PUSH
72176: LD_INT 59
72178: ST_TO_ADDR
// result := CreateVehicle ;
72179: LD_ADDR_VAR 0 5
72183: PUSH
72184: CALL_OW 45
72188: ST_TO_ADDR
// SetDir ( result , d ) ;
72189: LD_VAR 0 5
72193: PPUSH
72194: LD_VAR 0 4
72198: PPUSH
72199: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72203: LD_VAR 0 5
72207: PPUSH
72208: LD_VAR 0 2
72212: PPUSH
72213: LD_VAR 0 3
72217: PPUSH
72218: LD_INT 0
72220: PPUSH
72221: CALL_OW 48
// end ;
72225: LD_VAR 0 5
72229: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72230: LD_INT 0
72232: PPUSH
72233: PPUSH
72234: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72235: LD_ADDR_VAR 0 2
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_INT 0
72245: PUSH
72246: LD_INT 0
72248: PUSH
72249: LD_INT 0
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72258: LD_VAR 0 1
72262: NOT
72263: IFTRUE 72296
72265: PUSH
72266: LD_VAR 0 1
72270: PPUSH
72271: CALL_OW 264
72275: PUSH
72276: LD_INT 12
72278: PUSH
72279: LD_INT 51
72281: PUSH
72282: LD_INT 32
72284: PUSH
72285: LD_INT 89
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: IN
72294: NOT
72295: OR
72296: IFFALSE 72300
// exit ;
72298: GO 72398
// for i := 1 to 3 do
72300: LD_ADDR_VAR 0 3
72304: PUSH
72305: DOUBLE
72306: LD_INT 1
72308: DEC
72309: ST_TO_ADDR
72310: LD_INT 3
72312: PUSH
72313: FOR_TO
72314: IFFALSE 72396
// begin tmp := GetCargo ( cargo , i ) ;
72316: LD_ADDR_VAR 0 4
72320: PUSH
72321: LD_VAR 0 1
72325: PPUSH
72326: LD_VAR 0 3
72330: PPUSH
72331: CALL_OW 289
72335: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72336: LD_ADDR_VAR 0 2
72340: PUSH
72341: LD_VAR 0 2
72345: PPUSH
72346: LD_VAR 0 3
72350: PPUSH
72351: LD_VAR 0 4
72355: PPUSH
72356: CALL_OW 1
72360: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72361: LD_ADDR_VAR 0 2
72365: PUSH
72366: LD_VAR 0 2
72370: PPUSH
72371: LD_INT 4
72373: PPUSH
72374: LD_VAR 0 2
72378: PUSH
72379: LD_INT 4
72381: ARRAY
72382: PUSH
72383: LD_VAR 0 4
72387: PLUS
72388: PPUSH
72389: CALL_OW 1
72393: ST_TO_ADDR
// end ;
72394: GO 72313
72396: POP
72397: POP
// end ;
72398: LD_VAR 0 2
72402: RET
// export function Length ( array ) ; begin
72403: LD_INT 0
72405: PPUSH
// result := array + 0 ;
72406: LD_ADDR_VAR 0 2
72410: PUSH
72411: LD_VAR 0 1
72415: PUSH
72416: LD_INT 0
72418: PLUS
72419: ST_TO_ADDR
// end ;
72420: LD_VAR 0 2
72424: RET
// export function PrepareArray ( array ) ; begin
72425: LD_INT 0
72427: PPUSH
// result := array diff 0 ;
72428: LD_ADDR_VAR 0 2
72432: PUSH
72433: LD_VAR 0 1
72437: PUSH
72438: LD_INT 0
72440: DIFF
72441: ST_TO_ADDR
// if not result [ 1 ] then
72442: LD_VAR 0 2
72446: PUSH
72447: LD_INT 1
72449: ARRAY
72450: NOT
72451: IFFALSE 72471
// result := Delete ( result , 1 ) ;
72453: LD_ADDR_VAR 0 2
72457: PUSH
72458: LD_VAR 0 2
72462: PPUSH
72463: LD_INT 1
72465: PPUSH
72466: CALL_OW 3
72470: ST_TO_ADDR
// end ;
72471: LD_VAR 0 2
72475: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72476: LD_INT 0
72478: PPUSH
72479: PPUSH
72480: PPUSH
72481: PPUSH
// sibRocketRange := 25 ;
72482: LD_ADDR_VAR 0 6
72486: PUSH
72487: LD_INT 25
72489: ST_TO_ADDR
// result := false ;
72490: LD_ADDR_VAR 0 4
72494: PUSH
72495: LD_INT 0
72497: ST_TO_ADDR
// for i := 0 to 5 do
72498: LD_ADDR_VAR 0 5
72502: PUSH
72503: DOUBLE
72504: LD_INT 0
72506: DEC
72507: ST_TO_ADDR
72508: LD_INT 5
72510: PUSH
72511: FOR_TO
72512: IFFALSE 72579
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72514: LD_VAR 0 1
72518: PPUSH
72519: LD_VAR 0 5
72523: PPUSH
72524: LD_VAR 0 6
72528: PPUSH
72529: CALL_OW 272
72533: PPUSH
72534: LD_VAR 0 2
72538: PPUSH
72539: LD_VAR 0 5
72543: PPUSH
72544: LD_VAR 0 6
72548: PPUSH
72549: CALL_OW 273
72553: PPUSH
72554: LD_VAR 0 3
72558: PPUSH
72559: CALL_OW 309
72563: IFFALSE 72577
// begin result := true ;
72565: LD_ADDR_VAR 0 4
72569: PUSH
72570: LD_INT 1
72572: ST_TO_ADDR
// exit ;
72573: POP
72574: POP
72575: GO 72581
// end ;
72577: GO 72511
72579: POP
72580: POP
// end ;
72581: LD_VAR 0 4
72585: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72586: LD_INT 0
72588: PPUSH
72589: PPUSH
72590: PPUSH
// if btype = b_depot then
72591: LD_VAR 0 2
72595: PUSH
72596: LD_INT 0
72598: EQUAL
72599: IFFALSE 72611
// begin result := true ;
72601: LD_ADDR_VAR 0 3
72605: PUSH
72606: LD_INT 1
72608: ST_TO_ADDR
// exit ;
72609: GO 72731
// end ; pom := GetBase ( depot ) ;
72611: LD_ADDR_VAR 0 4
72615: PUSH
72616: LD_VAR 0 1
72620: PPUSH
72621: CALL_OW 274
72625: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72626: LD_ADDR_VAR 0 5
72630: PUSH
72631: LD_VAR 0 2
72635: PPUSH
72636: LD_VAR 0 1
72640: PPUSH
72641: CALL_OW 248
72645: PPUSH
72646: CALL_OW 450
72650: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72651: LD_ADDR_VAR 0 3
72655: PUSH
72656: LD_VAR 0 4
72660: PPUSH
72661: LD_INT 1
72663: PPUSH
72664: CALL_OW 275
72668: PUSH
72669: LD_VAR 0 5
72673: PUSH
72674: LD_INT 1
72676: ARRAY
72677: GREATEREQUAL
72678: IFFALSE 72704
72680: PUSH
72681: LD_VAR 0 4
72685: PPUSH
72686: LD_INT 2
72688: PPUSH
72689: CALL_OW 275
72693: PUSH
72694: LD_VAR 0 5
72698: PUSH
72699: LD_INT 2
72701: ARRAY
72702: GREATEREQUAL
72703: AND
72704: IFFALSE 72730
72706: PUSH
72707: LD_VAR 0 4
72711: PPUSH
72712: LD_INT 3
72714: PPUSH
72715: CALL_OW 275
72719: PUSH
72720: LD_VAR 0 5
72724: PUSH
72725: LD_INT 3
72727: ARRAY
72728: GREATEREQUAL
72729: AND
72730: ST_TO_ADDR
// end ;
72731: LD_VAR 0 3
72735: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72736: LD_INT 0
72738: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72739: LD_VAR 0 1
72743: PPUSH
72744: LD_VAR 0 2
72748: PPUSH
72749: LD_INT 0
72751: PPUSH
72752: LD_INT 0
72754: PPUSH
72755: LD_INT 1
72757: PPUSH
72758: LD_INT 0
72760: PPUSH
72761: CALL_OW 587
// end ;
72765: LD_VAR 0 3
72769: RET
// export function CenterOnNow ( unit ) ; begin
72770: LD_INT 0
72772: PPUSH
// result := IsInUnit ( unit ) ;
72773: LD_ADDR_VAR 0 2
72777: PUSH
72778: LD_VAR 0 1
72782: PPUSH
72783: CALL_OW 310
72787: ST_TO_ADDR
// if not result then
72788: LD_VAR 0 2
72792: NOT
72793: IFFALSE 72805
// result := unit ;
72795: LD_ADDR_VAR 0 2
72799: PUSH
72800: LD_VAR 0 1
72804: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72805: LD_VAR 0 1
72809: PPUSH
72810: CALL_OW 87
// end ;
72814: LD_VAR 0 2
72818: RET
// export function ComMoveHex ( unit , hex ) ; begin
72819: LD_INT 0
72821: PPUSH
// if not hex then
72822: LD_VAR 0 2
72826: NOT
72827: IFFALSE 72831
// exit ;
72829: GO 72884
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72831: LD_VAR 0 2
72835: PUSH
72836: LD_INT 1
72838: ARRAY
72839: PPUSH
72840: LD_VAR 0 2
72844: PUSH
72845: LD_INT 2
72847: ARRAY
72848: PPUSH
72849: CALL_OW 428
72853: IFFALSE 72857
// exit ;
72855: GO 72884
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72857: LD_VAR 0 1
72861: PPUSH
72862: LD_VAR 0 2
72866: PUSH
72867: LD_INT 1
72869: ARRAY
72870: PPUSH
72871: LD_VAR 0 2
72875: PUSH
72876: LD_INT 2
72878: ARRAY
72879: PPUSH
72880: CALL_OW 111
// end ;
72884: LD_VAR 0 3
72888: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72889: LD_INT 0
72891: PPUSH
72892: PPUSH
72893: PPUSH
// if not unit or not enemy then
72894: LD_VAR 0 1
72898: NOT
72899: IFTRUE 72908
72901: PUSH
72902: LD_VAR 0 2
72906: NOT
72907: OR
72908: IFFALSE 72912
// exit ;
72910: GO 73038
// x := GetX ( enemy ) ;
72912: LD_ADDR_VAR 0 4
72916: PUSH
72917: LD_VAR 0 2
72921: PPUSH
72922: CALL_OW 250
72926: ST_TO_ADDR
// y := GetY ( enemy ) ;
72927: LD_ADDR_VAR 0 5
72931: PUSH
72932: LD_VAR 0 2
72936: PPUSH
72937: CALL_OW 251
72941: ST_TO_ADDR
// if ValidHex ( x , y ) then
72942: LD_VAR 0 4
72946: PPUSH
72947: LD_VAR 0 5
72951: PPUSH
72952: CALL_OW 488
72956: IFFALSE 73038
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72958: LD_VAR 0 2
72962: PPUSH
72963: CALL_OW 247
72967: PUSH
72968: LD_INT 3
72970: PUSH
72971: LD_INT 2
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: IN
72978: IFTRUE 73001
72980: PUSH
72981: LD_VAR 0 1
72985: PPUSH
72986: CALL_OW 255
72990: PPUSH
72991: LD_VAR 0 2
72995: PPUSH
72996: CALL_OW 292
73000: OR
73001: IFFALSE 73019
// ComAttackUnit ( unit , enemy ) else
73003: LD_VAR 0 1
73007: PPUSH
73008: LD_VAR 0 2
73012: PPUSH
73013: CALL_OW 115
73017: GO 73038
// ComAgressiveMove ( unit , x , y ) ;
73019: LD_VAR 0 1
73023: PPUSH
73024: LD_VAR 0 4
73028: PPUSH
73029: LD_VAR 0 5
73033: PPUSH
73034: CALL_OW 114
// end ;
73038: LD_VAR 0 3
73042: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73043: LD_INT 0
73045: PPUSH
73046: PPUSH
73047: PPUSH
// list := AreaToList ( area , 0 ) ;
73048: LD_ADDR_VAR 0 5
73052: PUSH
73053: LD_VAR 0 1
73057: PPUSH
73058: LD_INT 0
73060: PPUSH
73061: CALL_OW 517
73065: ST_TO_ADDR
// if not list then
73066: LD_VAR 0 5
73070: NOT
73071: IFFALSE 73075
// exit ;
73073: GO 73205
// if all then
73075: LD_VAR 0 2
73079: IFFALSE 73167
// begin for i := 1 to list [ 1 ] do
73081: LD_ADDR_VAR 0 4
73085: PUSH
73086: DOUBLE
73087: LD_INT 1
73089: DEC
73090: ST_TO_ADDR
73091: LD_VAR 0 5
73095: PUSH
73096: LD_INT 1
73098: ARRAY
73099: PUSH
73100: FOR_TO
73101: IFFALSE 73163
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73103: LD_ADDR_VAR 0 3
73107: PUSH
73108: LD_VAR 0 3
73112: PPUSH
73113: LD_VAR 0 3
73117: PUSH
73118: LD_INT 1
73120: PLUS
73121: PPUSH
73122: LD_VAR 0 5
73126: PUSH
73127: LD_INT 1
73129: ARRAY
73130: PUSH
73131: LD_VAR 0 4
73135: ARRAY
73136: PUSH
73137: LD_VAR 0 5
73141: PUSH
73142: LD_INT 2
73144: ARRAY
73145: PUSH
73146: LD_VAR 0 4
73150: ARRAY
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: PPUSH
73156: CALL_OW 1
73160: ST_TO_ADDR
73161: GO 73100
73163: POP
73164: POP
// exit ;
73165: GO 73205
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73167: LD_ADDR_VAR 0 3
73171: PUSH
73172: LD_VAR 0 5
73176: PUSH
73177: LD_INT 1
73179: ARRAY
73180: PUSH
73181: LD_INT 1
73183: ARRAY
73184: PUSH
73185: LD_VAR 0 5
73189: PUSH
73190: LD_INT 2
73192: ARRAY
73193: PUSH
73194: LD_INT 1
73196: ARRAY
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: EMPTY
73203: LIST
73204: ST_TO_ADDR
// end ;
73205: LD_VAR 0 3
73209: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73210: LD_INT 0
73212: PPUSH
73213: PPUSH
// list := AreaToList ( area , 0 ) ;
73214: LD_ADDR_VAR 0 4
73218: PUSH
73219: LD_VAR 0 1
73223: PPUSH
73224: LD_INT 0
73226: PPUSH
73227: CALL_OW 517
73231: ST_TO_ADDR
// if not list then
73232: LD_VAR 0 4
73236: NOT
73237: IFFALSE 73241
// exit ;
73239: GO 73282
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73241: LD_ADDR_VAR 0 3
73245: PUSH
73246: LD_VAR 0 4
73250: PUSH
73251: LD_INT 1
73253: ARRAY
73254: PUSH
73255: LD_INT 1
73257: ARRAY
73258: PUSH
73259: LD_VAR 0 4
73263: PUSH
73264: LD_INT 2
73266: ARRAY
73267: PUSH
73268: LD_INT 1
73270: ARRAY
73271: PUSH
73272: LD_VAR 0 2
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: LIST
73281: ST_TO_ADDR
// end ;
73282: LD_VAR 0 3
73286: RET
// export function First ( array ) ; begin
73287: LD_INT 0
73289: PPUSH
// if not array then
73290: LD_VAR 0 1
73294: NOT
73295: IFFALSE 73299
// exit ;
73297: GO 73313
// result := array [ 1 ] ;
73299: LD_ADDR_VAR 0 2
73303: PUSH
73304: LD_VAR 0 1
73308: PUSH
73309: LD_INT 1
73311: ARRAY
73312: ST_TO_ADDR
// end ;
73313: LD_VAR 0 2
73317: RET
// export function Last ( array ) ; begin
73318: LD_INT 0
73320: PPUSH
// if not array then
73321: LD_VAR 0 1
73325: NOT
73326: IFFALSE 73330
// exit ;
73328: GO 73346
// result := array [ array ] ;
73330: LD_ADDR_VAR 0 2
73334: PUSH
73335: LD_VAR 0 1
73339: PUSH
73340: LD_VAR 0 1
73344: ARRAY
73345: ST_TO_ADDR
// end ;
73346: LD_VAR 0 2
73350: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73351: LD_INT 0
73353: PPUSH
73354: PPUSH
// result := [ ] ;
73355: LD_ADDR_VAR 0 5
73359: PUSH
73360: EMPTY
73361: ST_TO_ADDR
// if not array then
73362: LD_VAR 0 1
73366: NOT
73367: IFFALSE 73371
// exit ;
73369: GO 73483
// for i := 1 to array do
73371: LD_ADDR_VAR 0 6
73375: PUSH
73376: DOUBLE
73377: LD_INT 1
73379: DEC
73380: ST_TO_ADDR
73381: LD_VAR 0 1
73385: PUSH
73386: FOR_TO
73387: IFFALSE 73481
// if array [ i ] [ index ] = value then
73389: LD_VAR 0 1
73393: PUSH
73394: LD_VAR 0 6
73398: ARRAY
73399: PUSH
73400: LD_VAR 0 2
73404: ARRAY
73405: PUSH
73406: LD_VAR 0 3
73410: EQUAL
73411: IFFALSE 73479
// begin if indexColumn then
73413: LD_VAR 0 4
73417: IFFALSE 73453
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73419: LD_ADDR_VAR 0 5
73423: PUSH
73424: LD_VAR 0 5
73428: PPUSH
73429: LD_VAR 0 1
73433: PUSH
73434: LD_VAR 0 6
73438: ARRAY
73439: PUSH
73440: LD_VAR 0 4
73444: ARRAY
73445: PPUSH
73446: CALL 68491 0 2
73450: ST_TO_ADDR
73451: GO 73479
// result := Join ( result , array [ i ] ) ;
73453: LD_ADDR_VAR 0 5
73457: PUSH
73458: LD_VAR 0 5
73462: PPUSH
73463: LD_VAR 0 1
73467: PUSH
73468: LD_VAR 0 6
73472: ARRAY
73473: PPUSH
73474: CALL 68491 0 2
73478: ST_TO_ADDR
// end ;
73479: GO 73386
73481: POP
73482: POP
// end ;
73483: LD_VAR 0 5
73487: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73488: LD_INT 0
73490: PPUSH
// if not vehicles or not parkingPoint then
73491: LD_VAR 0 1
73495: NOT
73496: IFTRUE 73505
73498: PUSH
73499: LD_VAR 0 2
73503: NOT
73504: OR
73505: IFFALSE 73509
// exit ;
73507: GO 73607
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73509: LD_ADDR_VAR 0 1
73513: PUSH
73514: LD_VAR 0 1
73518: PPUSH
73519: LD_INT 50
73521: PUSH
73522: EMPTY
73523: LIST
73524: PUSH
73525: LD_INT 3
73527: PUSH
73528: LD_INT 92
73530: PUSH
73531: LD_VAR 0 2
73535: PUSH
73536: LD_INT 1
73538: ARRAY
73539: PUSH
73540: LD_VAR 0 2
73544: PUSH
73545: LD_INT 2
73547: ARRAY
73548: PUSH
73549: LD_INT 8
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PPUSH
73566: CALL_OW 72
73570: ST_TO_ADDR
// if not vehicles then
73571: LD_VAR 0 1
73575: NOT
73576: IFFALSE 73580
// exit ;
73578: GO 73607
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73580: LD_VAR 0 1
73584: PPUSH
73585: LD_VAR 0 2
73589: PUSH
73590: LD_INT 1
73592: ARRAY
73593: PPUSH
73594: LD_VAR 0 2
73598: PUSH
73599: LD_INT 2
73601: ARRAY
73602: PPUSH
73603: CALL_OW 111
// end ;
73607: LD_VAR 0 3
73611: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73612: LD_INT 0
73614: PPUSH
73615: PPUSH
73616: PPUSH
// if not side or not area then
73617: LD_VAR 0 1
73621: NOT
73622: IFTRUE 73631
73624: PUSH
73625: LD_VAR 0 2
73629: NOT
73630: OR
73631: IFFALSE 73635
// exit ;
73633: GO 73754
// tmp := AreaToList ( area , 0 ) ;
73635: LD_ADDR_VAR 0 5
73639: PUSH
73640: LD_VAR 0 2
73644: PPUSH
73645: LD_INT 0
73647: PPUSH
73648: CALL_OW 517
73652: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73653: LD_ADDR_VAR 0 4
73657: PUSH
73658: DOUBLE
73659: LD_INT 1
73661: DEC
73662: ST_TO_ADDR
73663: LD_VAR 0 5
73667: PUSH
73668: LD_INT 1
73670: ARRAY
73671: PUSH
73672: FOR_TO
73673: IFFALSE 73752
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73675: LD_VAR 0 5
73679: PUSH
73680: LD_INT 1
73682: ARRAY
73683: PUSH
73684: LD_VAR 0 4
73688: ARRAY
73689: PPUSH
73690: LD_VAR 0 5
73694: PUSH
73695: LD_INT 2
73697: ARRAY
73698: PUSH
73699: LD_VAR 0 4
73703: ARRAY
73704: PPUSH
73705: CALL_OW 351
73709: IFFALSE 73750
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73711: LD_VAR 0 5
73715: PUSH
73716: LD_INT 1
73718: ARRAY
73719: PUSH
73720: LD_VAR 0 4
73724: ARRAY
73725: PPUSH
73726: LD_VAR 0 5
73730: PUSH
73731: LD_INT 2
73733: ARRAY
73734: PUSH
73735: LD_VAR 0 4
73739: ARRAY
73740: PPUSH
73741: LD_VAR 0 1
73745: PPUSH
73746: CALL_OW 244
// end ;
73750: GO 73672
73752: POP
73753: POP
// end ;
73754: LD_VAR 0 3
73758: RET
// export function UniqueArray ( array ) ; var i ; begin
73759: LD_INT 0
73761: PPUSH
73762: PPUSH
// result := [ ] ;
73763: LD_ADDR_VAR 0 2
73767: PUSH
73768: EMPTY
73769: ST_TO_ADDR
// if not array then
73770: LD_VAR 0 1
73774: NOT
73775: IFFALSE 73779
// exit ;
73777: GO 73840
// for i := 1 to array do
73779: LD_ADDR_VAR 0 3
73783: PUSH
73784: DOUBLE
73785: LD_INT 1
73787: DEC
73788: ST_TO_ADDR
73789: LD_VAR 0 1
73793: PUSH
73794: FOR_TO
73795: IFFALSE 73838
// if not array [ i ] in result then
73797: LD_VAR 0 1
73801: PUSH
73802: LD_VAR 0 3
73806: ARRAY
73807: PUSH
73808: LD_VAR 0 2
73812: IN
73813: NOT
73814: IFFALSE 73836
// result := Join ( result , i ) ;
73816: LD_ADDR_VAR 0 2
73820: PUSH
73821: LD_VAR 0 2
73825: PPUSH
73826: LD_VAR 0 3
73830: PPUSH
73831: CALL 68491 0 2
73835: ST_TO_ADDR
73836: GO 73794
73838: POP
73839: POP
// end ; end_of_file end_of_file
73840: LD_VAR 0 2
73844: RET
// export globalGameSaveCounter ; every 0 0$1 do
73845: GO 73847
73847: DISABLE
// begin enable ;
73848: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
73849: LD_STRING updateTimer(
73851: PUSH
73852: LD_OWVAR 1
73856: STR
73857: PUSH
73858: LD_STRING );
73860: STR
73861: PPUSH
73862: CALL_OW 559
// end ;
73866: END
// every 0 0$1 do
73867: GO 73869
73869: DISABLE
// begin globalGameSaveCounter := 0 ;
73870: LD_ADDR_EXP 63
73874: PUSH
73875: LD_INT 0
73877: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
73878: LD_STRING setGameSaveCounter(0)
73880: PPUSH
73881: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
73885: LD_STRING initStreamRollete();
73887: PPUSH
73888: CALL_OW 559
// InitStreamMode ;
73892: CALL 75244 0 0
// DefineStreamItems ( false ) ;
73896: LD_INT 0
73898: PPUSH
73899: CALL 75708 0 1
// end ;
73903: END
// export function SOS_MapStart ( ) ; begin
73904: LD_INT 0
73906: PPUSH
// if streamModeActive then
73907: LD_EXP 64
73911: IFFALSE 73920
// DefineStreamItems ( true ) ;
73913: LD_INT 1
73915: PPUSH
73916: CALL 75708 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
73920: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
73922: PPUSH
73923: CALL_OW 559
// UpdateLuaVariables ( ) ;
73927: CALL 73944 0 0
// UpdateFactoryWaypoints ( ) ;
73931: CALL 88830 0 0
// UpdateWarehouseGatheringPoints ( ) ;
73935: CALL 89082 0 0
// end ;
73939: LD_VAR 0 1
73943: RET
// function UpdateLuaVariables ( ) ; begin
73944: LD_INT 0
73946: PPUSH
// if globalGameSaveCounter then
73947: LD_EXP 63
73951: IFFALSE 73985
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
73953: LD_ADDR_EXP 63
73957: PUSH
73958: LD_EXP 63
73962: PPUSH
73963: CALL 69864 0 1
73967: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73968: LD_STRING setGameSaveCounter(
73970: PUSH
73971: LD_EXP 63
73975: STR
73976: PUSH
73977: LD_STRING )
73979: STR
73980: PPUSH
73981: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
73985: LD_STRING setGameDifficulty(
73987: PUSH
73988: LD_OWVAR 67
73992: STR
73993: PUSH
73994: LD_STRING )
73996: STR
73997: PPUSH
73998: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
74002: LD_STRING displayDifficulty(
74004: PUSH
74005: LD_OWVAR 67
74009: STR
74010: PUSH
74011: LD_STRING )
74013: STR
74014: PPUSH
74015: CALL_OW 559
// end ;
74019: LD_VAR 0 1
74023: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74024: LD_INT 0
74026: PPUSH
// if p2 = stream_mode then
74027: LD_VAR 0 2
74031: PUSH
74032: LD_INT 100
74034: EQUAL
74035: IFFALSE 75038
// begin if not StreamModeActive then
74037: LD_EXP 64
74041: NOT
74042: IFFALSE 74052
// StreamModeActive := true ;
74044: LD_ADDR_EXP 64
74048: PUSH
74049: LD_INT 1
74051: ST_TO_ADDR
// if p3 = 0 then
74052: LD_VAR 0 3
74056: PUSH
74057: LD_INT 0
74059: EQUAL
74060: IFFALSE 74066
// InitStreamMode ;
74062: CALL 75244 0 0
// if p3 = 1 then
74066: LD_VAR 0 3
74070: PUSH
74071: LD_INT 1
74073: EQUAL
74074: IFFALSE 74084
// sRocket := true ;
74076: LD_ADDR_EXP 69
74080: PUSH
74081: LD_INT 1
74083: ST_TO_ADDR
// if p3 = 2 then
74084: LD_VAR 0 3
74088: PUSH
74089: LD_INT 2
74091: EQUAL
74092: IFFALSE 74102
// sSpeed := true ;
74094: LD_ADDR_EXP 68
74098: PUSH
74099: LD_INT 1
74101: ST_TO_ADDR
// if p3 = 3 then
74102: LD_VAR 0 3
74106: PUSH
74107: LD_INT 3
74109: EQUAL
74110: IFFALSE 74120
// sEngine := true ;
74112: LD_ADDR_EXP 70
74116: PUSH
74117: LD_INT 1
74119: ST_TO_ADDR
// if p3 = 4 then
74120: LD_VAR 0 3
74124: PUSH
74125: LD_INT 4
74127: EQUAL
74128: IFFALSE 74138
// sSpec := true ;
74130: LD_ADDR_EXP 67
74134: PUSH
74135: LD_INT 1
74137: ST_TO_ADDR
// if p3 = 5 then
74138: LD_VAR 0 3
74142: PUSH
74143: LD_INT 5
74145: EQUAL
74146: IFFALSE 74156
// sLevel := true ;
74148: LD_ADDR_EXP 71
74152: PUSH
74153: LD_INT 1
74155: ST_TO_ADDR
// if p3 = 6 then
74156: LD_VAR 0 3
74160: PUSH
74161: LD_INT 6
74163: EQUAL
74164: IFFALSE 74174
// sArmoury := true ;
74166: LD_ADDR_EXP 72
74170: PUSH
74171: LD_INT 1
74173: ST_TO_ADDR
// if p3 = 7 then
74174: LD_VAR 0 3
74178: PUSH
74179: LD_INT 7
74181: EQUAL
74182: IFFALSE 74192
// sRadar := true ;
74184: LD_ADDR_EXP 73
74188: PUSH
74189: LD_INT 1
74191: ST_TO_ADDR
// if p3 = 8 then
74192: LD_VAR 0 3
74196: PUSH
74197: LD_INT 8
74199: EQUAL
74200: IFFALSE 74210
// sBunker := true ;
74202: LD_ADDR_EXP 74
74206: PUSH
74207: LD_INT 1
74209: ST_TO_ADDR
// if p3 = 9 then
74210: LD_VAR 0 3
74214: PUSH
74215: LD_INT 9
74217: EQUAL
74218: IFFALSE 74228
// sHack := true ;
74220: LD_ADDR_EXP 75
74224: PUSH
74225: LD_INT 1
74227: ST_TO_ADDR
// if p3 = 10 then
74228: LD_VAR 0 3
74232: PUSH
74233: LD_INT 10
74235: EQUAL
74236: IFFALSE 74246
// sFire := true ;
74238: LD_ADDR_EXP 76
74242: PUSH
74243: LD_INT 1
74245: ST_TO_ADDR
// if p3 = 11 then
74246: LD_VAR 0 3
74250: PUSH
74251: LD_INT 11
74253: EQUAL
74254: IFFALSE 74264
// sRefresh := true ;
74256: LD_ADDR_EXP 77
74260: PUSH
74261: LD_INT 1
74263: ST_TO_ADDR
// if p3 = 12 then
74264: LD_VAR 0 3
74268: PUSH
74269: LD_INT 12
74271: EQUAL
74272: IFFALSE 74282
// sExp := true ;
74274: LD_ADDR_EXP 78
74278: PUSH
74279: LD_INT 1
74281: ST_TO_ADDR
// if p3 = 13 then
74282: LD_VAR 0 3
74286: PUSH
74287: LD_INT 13
74289: EQUAL
74290: IFFALSE 74300
// sDepot := true ;
74292: LD_ADDR_EXP 79
74296: PUSH
74297: LD_INT 1
74299: ST_TO_ADDR
// if p3 = 14 then
74300: LD_VAR 0 3
74304: PUSH
74305: LD_INT 14
74307: EQUAL
74308: IFFALSE 74318
// sFlag := true ;
74310: LD_ADDR_EXP 80
74314: PUSH
74315: LD_INT 1
74317: ST_TO_ADDR
// if p3 = 15 then
74318: LD_VAR 0 3
74322: PUSH
74323: LD_INT 15
74325: EQUAL
74326: IFFALSE 74336
// sKamikadze := true ;
74328: LD_ADDR_EXP 88
74332: PUSH
74333: LD_INT 1
74335: ST_TO_ADDR
// if p3 = 16 then
74336: LD_VAR 0 3
74340: PUSH
74341: LD_INT 16
74343: EQUAL
74344: IFFALSE 74354
// sTroll := true ;
74346: LD_ADDR_EXP 89
74350: PUSH
74351: LD_INT 1
74353: ST_TO_ADDR
// if p3 = 17 then
74354: LD_VAR 0 3
74358: PUSH
74359: LD_INT 17
74361: EQUAL
74362: IFFALSE 74372
// sSlow := true ;
74364: LD_ADDR_EXP 90
74368: PUSH
74369: LD_INT 1
74371: ST_TO_ADDR
// if p3 = 18 then
74372: LD_VAR 0 3
74376: PUSH
74377: LD_INT 18
74379: EQUAL
74380: IFFALSE 74390
// sLack := true ;
74382: LD_ADDR_EXP 91
74386: PUSH
74387: LD_INT 1
74389: ST_TO_ADDR
// if p3 = 19 then
74390: LD_VAR 0 3
74394: PUSH
74395: LD_INT 19
74397: EQUAL
74398: IFFALSE 74408
// sTank := true ;
74400: LD_ADDR_EXP 93
74404: PUSH
74405: LD_INT 1
74407: ST_TO_ADDR
// if p3 = 20 then
74408: LD_VAR 0 3
74412: PUSH
74413: LD_INT 20
74415: EQUAL
74416: IFFALSE 74426
// sRemote := true ;
74418: LD_ADDR_EXP 94
74422: PUSH
74423: LD_INT 1
74425: ST_TO_ADDR
// if p3 = 21 then
74426: LD_VAR 0 3
74430: PUSH
74431: LD_INT 21
74433: EQUAL
74434: IFFALSE 74444
// sPowell := true ;
74436: LD_ADDR_EXP 95
74440: PUSH
74441: LD_INT 1
74443: ST_TO_ADDR
// if p3 = 22 then
74444: LD_VAR 0 3
74448: PUSH
74449: LD_INT 22
74451: EQUAL
74452: IFFALSE 74462
// sTeleport := true ;
74454: LD_ADDR_EXP 98
74458: PUSH
74459: LD_INT 1
74461: ST_TO_ADDR
// if p3 = 23 then
74462: LD_VAR 0 3
74466: PUSH
74467: LD_INT 23
74469: EQUAL
74470: IFFALSE 74480
// sOilTower := true ;
74472: LD_ADDR_EXP 100
74476: PUSH
74477: LD_INT 1
74479: ST_TO_ADDR
// if p3 = 24 then
74480: LD_VAR 0 3
74484: PUSH
74485: LD_INT 24
74487: EQUAL
74488: IFFALSE 74498
// sShovel := true ;
74490: LD_ADDR_EXP 101
74494: PUSH
74495: LD_INT 1
74497: ST_TO_ADDR
// if p3 = 25 then
74498: LD_VAR 0 3
74502: PUSH
74503: LD_INT 25
74505: EQUAL
74506: IFFALSE 74516
// sSheik := true ;
74508: LD_ADDR_EXP 102
74512: PUSH
74513: LD_INT 1
74515: ST_TO_ADDR
// if p3 = 26 then
74516: LD_VAR 0 3
74520: PUSH
74521: LD_INT 26
74523: EQUAL
74524: IFFALSE 74534
// sEarthquake := true ;
74526: LD_ADDR_EXP 104
74530: PUSH
74531: LD_INT 1
74533: ST_TO_ADDR
// if p3 = 27 then
74534: LD_VAR 0 3
74538: PUSH
74539: LD_INT 27
74541: EQUAL
74542: IFFALSE 74552
// sAI := true ;
74544: LD_ADDR_EXP 105
74548: PUSH
74549: LD_INT 1
74551: ST_TO_ADDR
// if p3 = 28 then
74552: LD_VAR 0 3
74556: PUSH
74557: LD_INT 28
74559: EQUAL
74560: IFFALSE 74570
// sCargo := true ;
74562: LD_ADDR_EXP 108
74566: PUSH
74567: LD_INT 1
74569: ST_TO_ADDR
// if p3 = 29 then
74570: LD_VAR 0 3
74574: PUSH
74575: LD_INT 29
74577: EQUAL
74578: IFFALSE 74588
// sDLaser := true ;
74580: LD_ADDR_EXP 109
74584: PUSH
74585: LD_INT 1
74587: ST_TO_ADDR
// if p3 = 30 then
74588: LD_VAR 0 3
74592: PUSH
74593: LD_INT 30
74595: EQUAL
74596: IFFALSE 74606
// sExchange := true ;
74598: LD_ADDR_EXP 110
74602: PUSH
74603: LD_INT 1
74605: ST_TO_ADDR
// if p3 = 31 then
74606: LD_VAR 0 3
74610: PUSH
74611: LD_INT 31
74613: EQUAL
74614: IFFALSE 74624
// sFac := true ;
74616: LD_ADDR_EXP 111
74620: PUSH
74621: LD_INT 1
74623: ST_TO_ADDR
// if p3 = 32 then
74624: LD_VAR 0 3
74628: PUSH
74629: LD_INT 32
74631: EQUAL
74632: IFFALSE 74642
// sPower := true ;
74634: LD_ADDR_EXP 112
74638: PUSH
74639: LD_INT 1
74641: ST_TO_ADDR
// if p3 = 33 then
74642: LD_VAR 0 3
74646: PUSH
74647: LD_INT 33
74649: EQUAL
74650: IFFALSE 74660
// sRandom := true ;
74652: LD_ADDR_EXP 113
74656: PUSH
74657: LD_INT 1
74659: ST_TO_ADDR
// if p3 = 34 then
74660: LD_VAR 0 3
74664: PUSH
74665: LD_INT 34
74667: EQUAL
74668: IFFALSE 74678
// sShield := true ;
74670: LD_ADDR_EXP 114
74674: PUSH
74675: LD_INT 1
74677: ST_TO_ADDR
// if p3 = 35 then
74678: LD_VAR 0 3
74682: PUSH
74683: LD_INT 35
74685: EQUAL
74686: IFFALSE 74696
// sTime := true ;
74688: LD_ADDR_EXP 115
74692: PUSH
74693: LD_INT 1
74695: ST_TO_ADDR
// if p3 = 36 then
74696: LD_VAR 0 3
74700: PUSH
74701: LD_INT 36
74703: EQUAL
74704: IFFALSE 74714
// sTools := true ;
74706: LD_ADDR_EXP 116
74710: PUSH
74711: LD_INT 1
74713: ST_TO_ADDR
// if p3 = 101 then
74714: LD_VAR 0 3
74718: PUSH
74719: LD_INT 101
74721: EQUAL
74722: IFFALSE 74732
// sSold := true ;
74724: LD_ADDR_EXP 81
74728: PUSH
74729: LD_INT 1
74731: ST_TO_ADDR
// if p3 = 102 then
74732: LD_VAR 0 3
74736: PUSH
74737: LD_INT 102
74739: EQUAL
74740: IFFALSE 74750
// sDiff := true ;
74742: LD_ADDR_EXP 82
74746: PUSH
74747: LD_INT 1
74749: ST_TO_ADDR
// if p3 = 103 then
74750: LD_VAR 0 3
74754: PUSH
74755: LD_INT 103
74757: EQUAL
74758: IFFALSE 74768
// sFog := true ;
74760: LD_ADDR_EXP 85
74764: PUSH
74765: LD_INT 1
74767: ST_TO_ADDR
// if p3 = 104 then
74768: LD_VAR 0 3
74772: PUSH
74773: LD_INT 104
74775: EQUAL
74776: IFFALSE 74786
// sReset := true ;
74778: LD_ADDR_EXP 86
74782: PUSH
74783: LD_INT 1
74785: ST_TO_ADDR
// if p3 = 105 then
74786: LD_VAR 0 3
74790: PUSH
74791: LD_INT 105
74793: EQUAL
74794: IFFALSE 74804
// sSun := true ;
74796: LD_ADDR_EXP 87
74800: PUSH
74801: LD_INT 1
74803: ST_TO_ADDR
// if p3 = 106 then
74804: LD_VAR 0 3
74808: PUSH
74809: LD_INT 106
74811: EQUAL
74812: IFFALSE 74822
// sTiger := true ;
74814: LD_ADDR_EXP 83
74818: PUSH
74819: LD_INT 1
74821: ST_TO_ADDR
// if p3 = 107 then
74822: LD_VAR 0 3
74826: PUSH
74827: LD_INT 107
74829: EQUAL
74830: IFFALSE 74840
// sBomb := true ;
74832: LD_ADDR_EXP 84
74836: PUSH
74837: LD_INT 1
74839: ST_TO_ADDR
// if p3 = 108 then
74840: LD_VAR 0 3
74844: PUSH
74845: LD_INT 108
74847: EQUAL
74848: IFFALSE 74858
// sWound := true ;
74850: LD_ADDR_EXP 92
74854: PUSH
74855: LD_INT 1
74857: ST_TO_ADDR
// if p3 = 109 then
74858: LD_VAR 0 3
74862: PUSH
74863: LD_INT 109
74865: EQUAL
74866: IFFALSE 74876
// sBetray := true ;
74868: LD_ADDR_EXP 96
74872: PUSH
74873: LD_INT 1
74875: ST_TO_ADDR
// if p3 = 110 then
74876: LD_VAR 0 3
74880: PUSH
74881: LD_INT 110
74883: EQUAL
74884: IFFALSE 74894
// sContamin := true ;
74886: LD_ADDR_EXP 97
74890: PUSH
74891: LD_INT 1
74893: ST_TO_ADDR
// if p3 = 111 then
74894: LD_VAR 0 3
74898: PUSH
74899: LD_INT 111
74901: EQUAL
74902: IFFALSE 74912
// sOil := true ;
74904: LD_ADDR_EXP 99
74908: PUSH
74909: LD_INT 1
74911: ST_TO_ADDR
// if p3 = 112 then
74912: LD_VAR 0 3
74916: PUSH
74917: LD_INT 112
74919: EQUAL
74920: IFFALSE 74930
// sStu := true ;
74922: LD_ADDR_EXP 103
74926: PUSH
74927: LD_INT 1
74929: ST_TO_ADDR
// if p3 = 113 then
74930: LD_VAR 0 3
74934: PUSH
74935: LD_INT 113
74937: EQUAL
74938: IFFALSE 74948
// sBazooka := true ;
74940: LD_ADDR_EXP 106
74944: PUSH
74945: LD_INT 1
74947: ST_TO_ADDR
// if p3 = 114 then
74948: LD_VAR 0 3
74952: PUSH
74953: LD_INT 114
74955: EQUAL
74956: IFFALSE 74966
// sMortar := true ;
74958: LD_ADDR_EXP 107
74962: PUSH
74963: LD_INT 1
74965: ST_TO_ADDR
// if p3 = 115 then
74966: LD_VAR 0 3
74970: PUSH
74971: LD_INT 115
74973: EQUAL
74974: IFFALSE 74984
// sRanger := true ;
74976: LD_ADDR_EXP 117
74980: PUSH
74981: LD_INT 1
74983: ST_TO_ADDR
// if p3 = 116 then
74984: LD_VAR 0 3
74988: PUSH
74989: LD_INT 116
74991: EQUAL
74992: IFFALSE 75002
// sComputer := true ;
74994: LD_ADDR_EXP 118
74998: PUSH
74999: LD_INT 1
75001: ST_TO_ADDR
// if p3 = 117 then
75002: LD_VAR 0 3
75006: PUSH
75007: LD_INT 117
75009: EQUAL
75010: IFFALSE 75020
// s30 := true ;
75012: LD_ADDR_EXP 119
75016: PUSH
75017: LD_INT 1
75019: ST_TO_ADDR
// if p3 = 118 then
75020: LD_VAR 0 3
75024: PUSH
75025: LD_INT 118
75027: EQUAL
75028: IFFALSE 75038
// s60 := true ;
75030: LD_ADDR_EXP 120
75034: PUSH
75035: LD_INT 1
75037: ST_TO_ADDR
// end ; if p2 = hack_mode then
75038: LD_VAR 0 2
75042: PUSH
75043: LD_INT 101
75045: EQUAL
75046: IFFALSE 75174
// begin case p3 of 1 :
75048: LD_VAR 0 3
75052: PUSH
75053: LD_INT 1
75055: DOUBLE
75056: EQUAL
75057: IFTRUE 75061
75059: GO 75068
75061: POP
// hHackUnlimitedResources ; 2 :
75062: CALL 87437 0 0
75066: GO 75174
75068: LD_INT 2
75070: DOUBLE
75071: EQUAL
75072: IFTRUE 75076
75074: GO 75083
75076: POP
// hHackSetLevel10 ; 3 :
75077: CALL 87570 0 0
75081: GO 75174
75083: LD_INT 3
75085: DOUBLE
75086: EQUAL
75087: IFTRUE 75091
75089: GO 75098
75091: POP
// hHackSetLevel10YourUnits ; 4 :
75092: CALL 87655 0 0
75096: GO 75174
75098: LD_INT 4
75100: DOUBLE
75101: EQUAL
75102: IFTRUE 75106
75104: GO 75113
75106: POP
// hHackInvincible ; 5 :
75107: CALL 88103 0 0
75111: GO 75174
75113: LD_INT 5
75115: DOUBLE
75116: EQUAL
75117: IFTRUE 75121
75119: GO 75128
75121: POP
// hHackInvisible ; 6 :
75122: CALL 88214 0 0
75126: GO 75174
75128: LD_INT 6
75130: DOUBLE
75131: EQUAL
75132: IFTRUE 75136
75134: GO 75143
75136: POP
// hHackChangeYourSide ; 7 :
75137: CALL 88271 0 0
75141: GO 75174
75143: LD_INT 7
75145: DOUBLE
75146: EQUAL
75147: IFTRUE 75151
75149: GO 75158
75151: POP
// hHackChangeUnitSide ; 8 :
75152: CALL 88313 0 0
75156: GO 75174
75158: LD_INT 8
75160: DOUBLE
75161: EQUAL
75162: IFTRUE 75166
75164: GO 75173
75166: POP
// hHackFog ; end ;
75167: CALL 88414 0 0
75171: GO 75174
75173: POP
// end ; if p2 = game_save_mode then
75174: LD_VAR 0 2
75178: PUSH
75179: LD_INT 102
75181: EQUAL
75182: IFFALSE 75239
// begin if p3 = 1 then
75184: LD_VAR 0 3
75188: PUSH
75189: LD_INT 1
75191: EQUAL
75192: IFFALSE 75204
// globalGameSaveCounter := p4 ;
75194: LD_ADDR_EXP 63
75198: PUSH
75199: LD_VAR 0 4
75203: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
75204: LD_VAR 0 3
75208: PUSH
75209: LD_INT 2
75211: EQUAL
75212: IFFALSE 75220
75214: PUSH
75215: LD_EXP 63
75219: AND
75220: IFFALSE 75239
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
75222: LD_STRING setGameSaveCounter(
75224: PUSH
75225: LD_EXP 63
75229: STR
75230: PUSH
75231: LD_STRING )
75233: STR
75234: PPUSH
75235: CALL_OW 559
// end ; end ;
75239: LD_VAR 0 7
75243: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
75244: LD_INT 0
75246: PPUSH
// streamModeActive := false ;
75247: LD_ADDR_EXP 64
75251: PUSH
75252: LD_INT 0
75254: ST_TO_ADDR
// normalCounter := 36 ;
75255: LD_ADDR_EXP 65
75259: PUSH
75260: LD_INT 36
75262: ST_TO_ADDR
// hardcoreCounter := 18 ;
75263: LD_ADDR_EXP 66
75267: PUSH
75268: LD_INT 18
75270: ST_TO_ADDR
// sRocket := false ;
75271: LD_ADDR_EXP 69
75275: PUSH
75276: LD_INT 0
75278: ST_TO_ADDR
// sSpeed := false ;
75279: LD_ADDR_EXP 68
75283: PUSH
75284: LD_INT 0
75286: ST_TO_ADDR
// sEngine := false ;
75287: LD_ADDR_EXP 70
75291: PUSH
75292: LD_INT 0
75294: ST_TO_ADDR
// sSpec := false ;
75295: LD_ADDR_EXP 67
75299: PUSH
75300: LD_INT 0
75302: ST_TO_ADDR
// sLevel := false ;
75303: LD_ADDR_EXP 71
75307: PUSH
75308: LD_INT 0
75310: ST_TO_ADDR
// sArmoury := false ;
75311: LD_ADDR_EXP 72
75315: PUSH
75316: LD_INT 0
75318: ST_TO_ADDR
// sRadar := false ;
75319: LD_ADDR_EXP 73
75323: PUSH
75324: LD_INT 0
75326: ST_TO_ADDR
// sBunker := false ;
75327: LD_ADDR_EXP 74
75331: PUSH
75332: LD_INT 0
75334: ST_TO_ADDR
// sHack := false ;
75335: LD_ADDR_EXP 75
75339: PUSH
75340: LD_INT 0
75342: ST_TO_ADDR
// sFire := false ;
75343: LD_ADDR_EXP 76
75347: PUSH
75348: LD_INT 0
75350: ST_TO_ADDR
// sRefresh := false ;
75351: LD_ADDR_EXP 77
75355: PUSH
75356: LD_INT 0
75358: ST_TO_ADDR
// sExp := false ;
75359: LD_ADDR_EXP 78
75363: PUSH
75364: LD_INT 0
75366: ST_TO_ADDR
// sDepot := false ;
75367: LD_ADDR_EXP 79
75371: PUSH
75372: LD_INT 0
75374: ST_TO_ADDR
// sFlag := false ;
75375: LD_ADDR_EXP 80
75379: PUSH
75380: LD_INT 0
75382: ST_TO_ADDR
// sKamikadze := false ;
75383: LD_ADDR_EXP 88
75387: PUSH
75388: LD_INT 0
75390: ST_TO_ADDR
// sTroll := false ;
75391: LD_ADDR_EXP 89
75395: PUSH
75396: LD_INT 0
75398: ST_TO_ADDR
// sSlow := false ;
75399: LD_ADDR_EXP 90
75403: PUSH
75404: LD_INT 0
75406: ST_TO_ADDR
// sLack := false ;
75407: LD_ADDR_EXP 91
75411: PUSH
75412: LD_INT 0
75414: ST_TO_ADDR
// sTank := false ;
75415: LD_ADDR_EXP 93
75419: PUSH
75420: LD_INT 0
75422: ST_TO_ADDR
// sRemote := false ;
75423: LD_ADDR_EXP 94
75427: PUSH
75428: LD_INT 0
75430: ST_TO_ADDR
// sPowell := false ;
75431: LD_ADDR_EXP 95
75435: PUSH
75436: LD_INT 0
75438: ST_TO_ADDR
// sTeleport := false ;
75439: LD_ADDR_EXP 98
75443: PUSH
75444: LD_INT 0
75446: ST_TO_ADDR
// sOilTower := false ;
75447: LD_ADDR_EXP 100
75451: PUSH
75452: LD_INT 0
75454: ST_TO_ADDR
// sShovel := false ;
75455: LD_ADDR_EXP 101
75459: PUSH
75460: LD_INT 0
75462: ST_TO_ADDR
// sSheik := false ;
75463: LD_ADDR_EXP 102
75467: PUSH
75468: LD_INT 0
75470: ST_TO_ADDR
// sEarthquake := false ;
75471: LD_ADDR_EXP 104
75475: PUSH
75476: LD_INT 0
75478: ST_TO_ADDR
// sAI := false ;
75479: LD_ADDR_EXP 105
75483: PUSH
75484: LD_INT 0
75486: ST_TO_ADDR
// sCargo := false ;
75487: LD_ADDR_EXP 108
75491: PUSH
75492: LD_INT 0
75494: ST_TO_ADDR
// sDLaser := false ;
75495: LD_ADDR_EXP 109
75499: PUSH
75500: LD_INT 0
75502: ST_TO_ADDR
// sExchange := false ;
75503: LD_ADDR_EXP 110
75507: PUSH
75508: LD_INT 0
75510: ST_TO_ADDR
// sFac := false ;
75511: LD_ADDR_EXP 111
75515: PUSH
75516: LD_INT 0
75518: ST_TO_ADDR
// sPower := false ;
75519: LD_ADDR_EXP 112
75523: PUSH
75524: LD_INT 0
75526: ST_TO_ADDR
// sRandom := false ;
75527: LD_ADDR_EXP 113
75531: PUSH
75532: LD_INT 0
75534: ST_TO_ADDR
// sShield := false ;
75535: LD_ADDR_EXP 114
75539: PUSH
75540: LD_INT 0
75542: ST_TO_ADDR
// sTime := false ;
75543: LD_ADDR_EXP 115
75547: PUSH
75548: LD_INT 0
75550: ST_TO_ADDR
// sTools := false ;
75551: LD_ADDR_EXP 116
75555: PUSH
75556: LD_INT 0
75558: ST_TO_ADDR
// sSold := false ;
75559: LD_ADDR_EXP 81
75563: PUSH
75564: LD_INT 0
75566: ST_TO_ADDR
// sDiff := false ;
75567: LD_ADDR_EXP 82
75571: PUSH
75572: LD_INT 0
75574: ST_TO_ADDR
// sFog := false ;
75575: LD_ADDR_EXP 85
75579: PUSH
75580: LD_INT 0
75582: ST_TO_ADDR
// sReset := false ;
75583: LD_ADDR_EXP 86
75587: PUSH
75588: LD_INT 0
75590: ST_TO_ADDR
// sSun := false ;
75591: LD_ADDR_EXP 87
75595: PUSH
75596: LD_INT 0
75598: ST_TO_ADDR
// sTiger := false ;
75599: LD_ADDR_EXP 83
75603: PUSH
75604: LD_INT 0
75606: ST_TO_ADDR
// sBomb := false ;
75607: LD_ADDR_EXP 84
75611: PUSH
75612: LD_INT 0
75614: ST_TO_ADDR
// sWound := false ;
75615: LD_ADDR_EXP 92
75619: PUSH
75620: LD_INT 0
75622: ST_TO_ADDR
// sBetray := false ;
75623: LD_ADDR_EXP 96
75627: PUSH
75628: LD_INT 0
75630: ST_TO_ADDR
// sContamin := false ;
75631: LD_ADDR_EXP 97
75635: PUSH
75636: LD_INT 0
75638: ST_TO_ADDR
// sOil := false ;
75639: LD_ADDR_EXP 99
75643: PUSH
75644: LD_INT 0
75646: ST_TO_ADDR
// sStu := false ;
75647: LD_ADDR_EXP 103
75651: PUSH
75652: LD_INT 0
75654: ST_TO_ADDR
// sBazooka := false ;
75655: LD_ADDR_EXP 106
75659: PUSH
75660: LD_INT 0
75662: ST_TO_ADDR
// sMortar := false ;
75663: LD_ADDR_EXP 107
75667: PUSH
75668: LD_INT 0
75670: ST_TO_ADDR
// sRanger := false ;
75671: LD_ADDR_EXP 117
75675: PUSH
75676: LD_INT 0
75678: ST_TO_ADDR
// sComputer := false ;
75679: LD_ADDR_EXP 118
75683: PUSH
75684: LD_INT 0
75686: ST_TO_ADDR
// s30 := false ;
75687: LD_ADDR_EXP 119
75691: PUSH
75692: LD_INT 0
75694: ST_TO_ADDR
// s60 := false ;
75695: LD_ADDR_EXP 120
75699: PUSH
75700: LD_INT 0
75702: ST_TO_ADDR
// end ;
75703: LD_VAR 0 1
75707: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
75708: LD_INT 0
75710: PPUSH
75711: PPUSH
75712: PPUSH
75713: PPUSH
75714: PPUSH
75715: PPUSH
75716: PPUSH
// result := [ ] ;
75717: LD_ADDR_VAR 0 2
75721: PUSH
75722: EMPTY
75723: ST_TO_ADDR
// if campaign_id = 1 then
75724: LD_OWVAR 69
75728: PUSH
75729: LD_INT 1
75731: EQUAL
75732: IFFALSE 78898
// begin case mission_number of 1 :
75734: LD_OWVAR 70
75738: PUSH
75739: LD_INT 1
75741: DOUBLE
75742: EQUAL
75743: IFTRUE 75747
75745: GO 75823
75747: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
75748: LD_ADDR_VAR 0 2
75752: PUSH
75753: LD_INT 2
75755: PUSH
75756: LD_INT 4
75758: PUSH
75759: LD_INT 11
75761: PUSH
75762: LD_INT 12
75764: PUSH
75765: LD_INT 15
75767: PUSH
75768: LD_INT 16
75770: PUSH
75771: LD_INT 22
75773: PUSH
75774: LD_INT 23
75776: PUSH
75777: LD_INT 26
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: LIST
75790: PUSH
75791: LD_INT 101
75793: PUSH
75794: LD_INT 102
75796: PUSH
75797: LD_INT 106
75799: PUSH
75800: LD_INT 116
75802: PUSH
75803: LD_INT 117
75805: PUSH
75806: LD_INT 118
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: PUSH
75817: EMPTY
75818: LIST
75819: LIST
75820: ST_TO_ADDR
75821: GO 78896
75823: LD_INT 2
75825: DOUBLE
75826: EQUAL
75827: IFTRUE 75831
75829: GO 75915
75831: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
75832: LD_ADDR_VAR 0 2
75836: PUSH
75837: LD_INT 2
75839: PUSH
75840: LD_INT 4
75842: PUSH
75843: LD_INT 11
75845: PUSH
75846: LD_INT 12
75848: PUSH
75849: LD_INT 15
75851: PUSH
75852: LD_INT 16
75854: PUSH
75855: LD_INT 22
75857: PUSH
75858: LD_INT 23
75860: PUSH
75861: LD_INT 26
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: PUSH
75875: LD_INT 101
75877: PUSH
75878: LD_INT 102
75880: PUSH
75881: LD_INT 105
75883: PUSH
75884: LD_INT 106
75886: PUSH
75887: LD_INT 108
75889: PUSH
75890: LD_INT 116
75892: PUSH
75893: LD_INT 117
75895: PUSH
75896: LD_INT 118
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: ST_TO_ADDR
75913: GO 78896
75915: LD_INT 3
75917: DOUBLE
75918: EQUAL
75919: IFTRUE 75923
75921: GO 76011
75923: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
75924: LD_ADDR_VAR 0 2
75928: PUSH
75929: LD_INT 2
75931: PUSH
75932: LD_INT 4
75934: PUSH
75935: LD_INT 5
75937: PUSH
75938: LD_INT 11
75940: PUSH
75941: LD_INT 12
75943: PUSH
75944: LD_INT 15
75946: PUSH
75947: LD_INT 16
75949: PUSH
75950: LD_INT 22
75952: PUSH
75953: LD_INT 26
75955: PUSH
75956: LD_INT 36
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: PUSH
75971: LD_INT 101
75973: PUSH
75974: LD_INT 102
75976: PUSH
75977: LD_INT 105
75979: PUSH
75980: LD_INT 106
75982: PUSH
75983: LD_INT 108
75985: PUSH
75986: LD_INT 116
75988: PUSH
75989: LD_INT 117
75991: PUSH
75992: LD_INT 118
75994: PUSH
75995: EMPTY
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: ST_TO_ADDR
76009: GO 78896
76011: LD_INT 4
76013: DOUBLE
76014: EQUAL
76015: IFTRUE 76019
76017: GO 76115
76019: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
76020: LD_ADDR_VAR 0 2
76024: PUSH
76025: LD_INT 2
76027: PUSH
76028: LD_INT 4
76030: PUSH
76031: LD_INT 5
76033: PUSH
76034: LD_INT 8
76036: PUSH
76037: LD_INT 11
76039: PUSH
76040: LD_INT 12
76042: PUSH
76043: LD_INT 15
76045: PUSH
76046: LD_INT 16
76048: PUSH
76049: LD_INT 22
76051: PUSH
76052: LD_INT 23
76054: PUSH
76055: LD_INT 26
76057: PUSH
76058: LD_INT 36
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: PUSH
76075: LD_INT 101
76077: PUSH
76078: LD_INT 102
76080: PUSH
76081: LD_INT 105
76083: PUSH
76084: LD_INT 106
76086: PUSH
76087: LD_INT 108
76089: PUSH
76090: LD_INT 116
76092: PUSH
76093: LD_INT 117
76095: PUSH
76096: LD_INT 118
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: ST_TO_ADDR
76113: GO 78896
76115: LD_INT 5
76117: DOUBLE
76118: EQUAL
76119: IFTRUE 76123
76121: GO 76235
76123: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
76124: LD_ADDR_VAR 0 2
76128: PUSH
76129: LD_INT 2
76131: PUSH
76132: LD_INT 4
76134: PUSH
76135: LD_INT 5
76137: PUSH
76138: LD_INT 6
76140: PUSH
76141: LD_INT 8
76143: PUSH
76144: LD_INT 11
76146: PUSH
76147: LD_INT 12
76149: PUSH
76150: LD_INT 15
76152: PUSH
76153: LD_INT 16
76155: PUSH
76156: LD_INT 22
76158: PUSH
76159: LD_INT 23
76161: PUSH
76162: LD_INT 25
76164: PUSH
76165: LD_INT 26
76167: PUSH
76168: LD_INT 36
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: LIST
76177: LIST
76178: LIST
76179: LIST
76180: LIST
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: PUSH
76187: LD_INT 101
76189: PUSH
76190: LD_INT 102
76192: PUSH
76193: LD_INT 105
76195: PUSH
76196: LD_INT 106
76198: PUSH
76199: LD_INT 108
76201: PUSH
76202: LD_INT 109
76204: PUSH
76205: LD_INT 112
76207: PUSH
76208: LD_INT 116
76210: PUSH
76211: LD_INT 117
76213: PUSH
76214: LD_INT 118
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: ST_TO_ADDR
76233: GO 78896
76235: LD_INT 6
76237: DOUBLE
76238: EQUAL
76239: IFTRUE 76243
76241: GO 76375
76243: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
76244: LD_ADDR_VAR 0 2
76248: PUSH
76249: LD_INT 2
76251: PUSH
76252: LD_INT 4
76254: PUSH
76255: LD_INT 5
76257: PUSH
76258: LD_INT 6
76260: PUSH
76261: LD_INT 8
76263: PUSH
76264: LD_INT 11
76266: PUSH
76267: LD_INT 12
76269: PUSH
76270: LD_INT 15
76272: PUSH
76273: LD_INT 16
76275: PUSH
76276: LD_INT 20
76278: PUSH
76279: LD_INT 21
76281: PUSH
76282: LD_INT 22
76284: PUSH
76285: LD_INT 23
76287: PUSH
76288: LD_INT 25
76290: PUSH
76291: LD_INT 26
76293: PUSH
76294: LD_INT 30
76296: PUSH
76297: LD_INT 31
76299: PUSH
76300: LD_INT 32
76302: PUSH
76303: LD_INT 36
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: LIST
76310: LIST
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: LIST
76318: LIST
76319: LIST
76320: LIST
76321: LIST
76322: LIST
76323: LIST
76324: LIST
76325: LIST
76326: PUSH
76327: LD_INT 101
76329: PUSH
76330: LD_INT 102
76332: PUSH
76333: LD_INT 105
76335: PUSH
76336: LD_INT 106
76338: PUSH
76339: LD_INT 108
76341: PUSH
76342: LD_INT 109
76344: PUSH
76345: LD_INT 112
76347: PUSH
76348: LD_INT 116
76350: PUSH
76351: LD_INT 117
76353: PUSH
76354: LD_INT 118
76356: PUSH
76357: EMPTY
76358: LIST
76359: LIST
76360: LIST
76361: LIST
76362: LIST
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: ST_TO_ADDR
76373: GO 78896
76375: LD_INT 7
76377: DOUBLE
76378: EQUAL
76379: IFTRUE 76383
76381: GO 76495
76383: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
76384: LD_ADDR_VAR 0 2
76388: PUSH
76389: LD_INT 2
76391: PUSH
76392: LD_INT 4
76394: PUSH
76395: LD_INT 5
76397: PUSH
76398: LD_INT 7
76400: PUSH
76401: LD_INT 11
76403: PUSH
76404: LD_INT 12
76406: PUSH
76407: LD_INT 15
76409: PUSH
76410: LD_INT 16
76412: PUSH
76413: LD_INT 20
76415: PUSH
76416: LD_INT 21
76418: PUSH
76419: LD_INT 22
76421: PUSH
76422: LD_INT 23
76424: PUSH
76425: LD_INT 25
76427: PUSH
76428: LD_INT 26
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: LIST
76435: LIST
76436: LIST
76437: LIST
76438: LIST
76439: LIST
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: PUSH
76447: LD_INT 101
76449: PUSH
76450: LD_INT 102
76452: PUSH
76453: LD_INT 103
76455: PUSH
76456: LD_INT 105
76458: PUSH
76459: LD_INT 106
76461: PUSH
76462: LD_INT 108
76464: PUSH
76465: LD_INT 112
76467: PUSH
76468: LD_INT 116
76470: PUSH
76471: LD_INT 117
76473: PUSH
76474: LD_INT 118
76476: PUSH
76477: EMPTY
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: ST_TO_ADDR
76493: GO 78896
76495: LD_INT 8
76497: DOUBLE
76498: EQUAL
76499: IFTRUE 76503
76501: GO 76643
76503: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
76504: LD_ADDR_VAR 0 2
76508: PUSH
76509: LD_INT 2
76511: PUSH
76512: LD_INT 4
76514: PUSH
76515: LD_INT 5
76517: PUSH
76518: LD_INT 6
76520: PUSH
76521: LD_INT 7
76523: PUSH
76524: LD_INT 8
76526: PUSH
76527: LD_INT 11
76529: PUSH
76530: LD_INT 12
76532: PUSH
76533: LD_INT 15
76535: PUSH
76536: LD_INT 16
76538: PUSH
76539: LD_INT 20
76541: PUSH
76542: LD_INT 21
76544: PUSH
76545: LD_INT 22
76547: PUSH
76548: LD_INT 23
76550: PUSH
76551: LD_INT 25
76553: PUSH
76554: LD_INT 26
76556: PUSH
76557: LD_INT 30
76559: PUSH
76560: LD_INT 31
76562: PUSH
76563: LD_INT 32
76565: PUSH
76566: LD_INT 36
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: LIST
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: LIST
76583: LIST
76584: LIST
76585: LIST
76586: LIST
76587: LIST
76588: LIST
76589: LIST
76590: PUSH
76591: LD_INT 101
76593: PUSH
76594: LD_INT 102
76596: PUSH
76597: LD_INT 103
76599: PUSH
76600: LD_INT 105
76602: PUSH
76603: LD_INT 106
76605: PUSH
76606: LD_INT 108
76608: PUSH
76609: LD_INT 109
76611: PUSH
76612: LD_INT 112
76614: PUSH
76615: LD_INT 116
76617: PUSH
76618: LD_INT 117
76620: PUSH
76621: LD_INT 118
76623: PUSH
76624: EMPTY
76625: LIST
76626: LIST
76627: LIST
76628: LIST
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: LIST
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: ST_TO_ADDR
76641: GO 78896
76643: LD_INT 9
76645: DOUBLE
76646: EQUAL
76647: IFTRUE 76651
76649: GO 76799
76651: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
76652: LD_ADDR_VAR 0 2
76656: PUSH
76657: LD_INT 2
76659: PUSH
76660: LD_INT 4
76662: PUSH
76663: LD_INT 5
76665: PUSH
76666: LD_INT 6
76668: PUSH
76669: LD_INT 7
76671: PUSH
76672: LD_INT 8
76674: PUSH
76675: LD_INT 11
76677: PUSH
76678: LD_INT 12
76680: PUSH
76681: LD_INT 15
76683: PUSH
76684: LD_INT 16
76686: PUSH
76687: LD_INT 20
76689: PUSH
76690: LD_INT 21
76692: PUSH
76693: LD_INT 22
76695: PUSH
76696: LD_INT 23
76698: PUSH
76699: LD_INT 25
76701: PUSH
76702: LD_INT 26
76704: PUSH
76705: LD_INT 28
76707: PUSH
76708: LD_INT 30
76710: PUSH
76711: LD_INT 31
76713: PUSH
76714: LD_INT 32
76716: PUSH
76717: LD_INT 36
76719: PUSH
76720: EMPTY
76721: LIST
76722: LIST
76723: LIST
76724: LIST
76725: LIST
76726: LIST
76727: LIST
76728: LIST
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: LIST
76736: LIST
76737: LIST
76738: LIST
76739: LIST
76740: LIST
76741: LIST
76742: PUSH
76743: LD_INT 101
76745: PUSH
76746: LD_INT 102
76748: PUSH
76749: LD_INT 103
76751: PUSH
76752: LD_INT 105
76754: PUSH
76755: LD_INT 106
76757: PUSH
76758: LD_INT 108
76760: PUSH
76761: LD_INT 109
76763: PUSH
76764: LD_INT 112
76766: PUSH
76767: LD_INT 114
76769: PUSH
76770: LD_INT 116
76772: PUSH
76773: LD_INT 117
76775: PUSH
76776: LD_INT 118
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: LIST
76787: LIST
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: ST_TO_ADDR
76797: GO 78896
76799: LD_INT 10
76801: DOUBLE
76802: EQUAL
76803: IFTRUE 76807
76805: GO 77003
76807: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
76808: LD_ADDR_VAR 0 2
76812: PUSH
76813: LD_INT 2
76815: PUSH
76816: LD_INT 4
76818: PUSH
76819: LD_INT 5
76821: PUSH
76822: LD_INT 6
76824: PUSH
76825: LD_INT 7
76827: PUSH
76828: LD_INT 8
76830: PUSH
76831: LD_INT 9
76833: PUSH
76834: LD_INT 10
76836: PUSH
76837: LD_INT 11
76839: PUSH
76840: LD_INT 12
76842: PUSH
76843: LD_INT 13
76845: PUSH
76846: LD_INT 14
76848: PUSH
76849: LD_INT 15
76851: PUSH
76852: LD_INT 16
76854: PUSH
76855: LD_INT 17
76857: PUSH
76858: LD_INT 18
76860: PUSH
76861: LD_INT 19
76863: PUSH
76864: LD_INT 20
76866: PUSH
76867: LD_INT 21
76869: PUSH
76870: LD_INT 22
76872: PUSH
76873: LD_INT 23
76875: PUSH
76876: LD_INT 24
76878: PUSH
76879: LD_INT 25
76881: PUSH
76882: LD_INT 26
76884: PUSH
76885: LD_INT 28
76887: PUSH
76888: LD_INT 30
76890: PUSH
76891: LD_INT 31
76893: PUSH
76894: LD_INT 32
76896: PUSH
76897: LD_INT 36
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: LIST
76904: LIST
76905: LIST
76906: LIST
76907: LIST
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: LIST
76929: LIST
76930: PUSH
76931: LD_INT 101
76933: PUSH
76934: LD_INT 102
76936: PUSH
76937: LD_INT 103
76939: PUSH
76940: LD_INT 104
76942: PUSH
76943: LD_INT 105
76945: PUSH
76946: LD_INT 106
76948: PUSH
76949: LD_INT 107
76951: PUSH
76952: LD_INT 108
76954: PUSH
76955: LD_INT 109
76957: PUSH
76958: LD_INT 110
76960: PUSH
76961: LD_INT 111
76963: PUSH
76964: LD_INT 112
76966: PUSH
76967: LD_INT 114
76969: PUSH
76970: LD_INT 116
76972: PUSH
76973: LD_INT 117
76975: PUSH
76976: LD_INT 118
76978: PUSH
76979: EMPTY
76980: LIST
76981: LIST
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: ST_TO_ADDR
77001: GO 78896
77003: LD_INT 11
77005: DOUBLE
77006: EQUAL
77007: IFTRUE 77011
77009: GO 77215
77011: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
77012: LD_ADDR_VAR 0 2
77016: PUSH
77017: LD_INT 2
77019: PUSH
77020: LD_INT 3
77022: PUSH
77023: LD_INT 4
77025: PUSH
77026: LD_INT 5
77028: PUSH
77029: LD_INT 6
77031: PUSH
77032: LD_INT 7
77034: PUSH
77035: LD_INT 8
77037: PUSH
77038: LD_INT 9
77040: PUSH
77041: LD_INT 10
77043: PUSH
77044: LD_INT 11
77046: PUSH
77047: LD_INT 12
77049: PUSH
77050: LD_INT 13
77052: PUSH
77053: LD_INT 14
77055: PUSH
77056: LD_INT 15
77058: PUSH
77059: LD_INT 16
77061: PUSH
77062: LD_INT 17
77064: PUSH
77065: LD_INT 18
77067: PUSH
77068: LD_INT 19
77070: PUSH
77071: LD_INT 20
77073: PUSH
77074: LD_INT 21
77076: PUSH
77077: LD_INT 22
77079: PUSH
77080: LD_INT 23
77082: PUSH
77083: LD_INT 24
77085: PUSH
77086: LD_INT 25
77088: PUSH
77089: LD_INT 26
77091: PUSH
77092: LD_INT 28
77094: PUSH
77095: LD_INT 30
77097: PUSH
77098: LD_INT 31
77100: PUSH
77101: LD_INT 32
77103: PUSH
77104: LD_INT 34
77106: PUSH
77107: LD_INT 36
77109: PUSH
77110: EMPTY
77111: LIST
77112: LIST
77113: LIST
77114: LIST
77115: LIST
77116: LIST
77117: LIST
77118: LIST
77119: LIST
77120: LIST
77121: LIST
77122: LIST
77123: LIST
77124: LIST
77125: LIST
77126: LIST
77127: LIST
77128: LIST
77129: LIST
77130: LIST
77131: LIST
77132: LIST
77133: LIST
77134: LIST
77135: LIST
77136: LIST
77137: LIST
77138: LIST
77139: LIST
77140: LIST
77141: LIST
77142: PUSH
77143: LD_INT 101
77145: PUSH
77146: LD_INT 102
77148: PUSH
77149: LD_INT 103
77151: PUSH
77152: LD_INT 104
77154: PUSH
77155: LD_INT 105
77157: PUSH
77158: LD_INT 106
77160: PUSH
77161: LD_INT 107
77163: PUSH
77164: LD_INT 108
77166: PUSH
77167: LD_INT 109
77169: PUSH
77170: LD_INT 110
77172: PUSH
77173: LD_INT 111
77175: PUSH
77176: LD_INT 112
77178: PUSH
77179: LD_INT 114
77181: PUSH
77182: LD_INT 116
77184: PUSH
77185: LD_INT 117
77187: PUSH
77188: LD_INT 118
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: ST_TO_ADDR
77213: GO 78896
77215: LD_INT 12
77217: DOUBLE
77218: EQUAL
77219: IFTRUE 77223
77221: GO 77443
77223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
77224: LD_ADDR_VAR 0 2
77228: PUSH
77229: LD_INT 1
77231: PUSH
77232: LD_INT 2
77234: PUSH
77235: LD_INT 3
77237: PUSH
77238: LD_INT 4
77240: PUSH
77241: LD_INT 5
77243: PUSH
77244: LD_INT 6
77246: PUSH
77247: LD_INT 7
77249: PUSH
77250: LD_INT 8
77252: PUSH
77253: LD_INT 9
77255: PUSH
77256: LD_INT 10
77258: PUSH
77259: LD_INT 11
77261: PUSH
77262: LD_INT 12
77264: PUSH
77265: LD_INT 13
77267: PUSH
77268: LD_INT 14
77270: PUSH
77271: LD_INT 15
77273: PUSH
77274: LD_INT 16
77276: PUSH
77277: LD_INT 17
77279: PUSH
77280: LD_INT 18
77282: PUSH
77283: LD_INT 19
77285: PUSH
77286: LD_INT 20
77288: PUSH
77289: LD_INT 21
77291: PUSH
77292: LD_INT 22
77294: PUSH
77295: LD_INT 23
77297: PUSH
77298: LD_INT 24
77300: PUSH
77301: LD_INT 25
77303: PUSH
77304: LD_INT 26
77306: PUSH
77307: LD_INT 27
77309: PUSH
77310: LD_INT 28
77312: PUSH
77313: LD_INT 30
77315: PUSH
77316: LD_INT 31
77318: PUSH
77319: LD_INT 32
77321: PUSH
77322: LD_INT 33
77324: PUSH
77325: LD_INT 34
77327: PUSH
77328: LD_INT 36
77330: PUSH
77331: EMPTY
77332: LIST
77333: LIST
77334: LIST
77335: LIST
77336: LIST
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: LIST
77345: LIST
77346: LIST
77347: LIST
77348: LIST
77349: LIST
77350: LIST
77351: LIST
77352: LIST
77353: LIST
77354: LIST
77355: LIST
77356: LIST
77357: LIST
77358: LIST
77359: LIST
77360: LIST
77361: LIST
77362: LIST
77363: LIST
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 101
77369: PUSH
77370: LD_INT 102
77372: PUSH
77373: LD_INT 103
77375: PUSH
77376: LD_INT 104
77378: PUSH
77379: LD_INT 105
77381: PUSH
77382: LD_INT 106
77384: PUSH
77385: LD_INT 107
77387: PUSH
77388: LD_INT 108
77390: PUSH
77391: LD_INT 109
77393: PUSH
77394: LD_INT 110
77396: PUSH
77397: LD_INT 111
77399: PUSH
77400: LD_INT 112
77402: PUSH
77403: LD_INT 113
77405: PUSH
77406: LD_INT 114
77408: PUSH
77409: LD_INT 116
77411: PUSH
77412: LD_INT 117
77414: PUSH
77415: LD_INT 118
77417: PUSH
77418: EMPTY
77419: LIST
77420: LIST
77421: LIST
77422: LIST
77423: LIST
77424: LIST
77425: LIST
77426: LIST
77427: LIST
77428: LIST
77429: LIST
77430: LIST
77431: LIST
77432: LIST
77433: LIST
77434: LIST
77435: LIST
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: ST_TO_ADDR
77441: GO 78896
77443: LD_INT 13
77445: DOUBLE
77446: EQUAL
77447: IFTRUE 77451
77449: GO 77659
77451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
77452: LD_ADDR_VAR 0 2
77456: PUSH
77457: LD_INT 1
77459: PUSH
77460: LD_INT 2
77462: PUSH
77463: LD_INT 3
77465: PUSH
77466: LD_INT 4
77468: PUSH
77469: LD_INT 5
77471: PUSH
77472: LD_INT 8
77474: PUSH
77475: LD_INT 9
77477: PUSH
77478: LD_INT 10
77480: PUSH
77481: LD_INT 11
77483: PUSH
77484: LD_INT 12
77486: PUSH
77487: LD_INT 14
77489: PUSH
77490: LD_INT 15
77492: PUSH
77493: LD_INT 16
77495: PUSH
77496: LD_INT 17
77498: PUSH
77499: LD_INT 18
77501: PUSH
77502: LD_INT 19
77504: PUSH
77505: LD_INT 20
77507: PUSH
77508: LD_INT 21
77510: PUSH
77511: LD_INT 22
77513: PUSH
77514: LD_INT 23
77516: PUSH
77517: LD_INT 24
77519: PUSH
77520: LD_INT 25
77522: PUSH
77523: LD_INT 26
77525: PUSH
77526: LD_INT 27
77528: PUSH
77529: LD_INT 28
77531: PUSH
77532: LD_INT 30
77534: PUSH
77535: LD_INT 31
77537: PUSH
77538: LD_INT 32
77540: PUSH
77541: LD_INT 33
77543: PUSH
77544: LD_INT 34
77546: PUSH
77547: LD_INT 36
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: LIST
77559: LIST
77560: LIST
77561: LIST
77562: LIST
77563: LIST
77564: LIST
77565: LIST
77566: LIST
77567: LIST
77568: LIST
77569: LIST
77570: LIST
77571: LIST
77572: LIST
77573: LIST
77574: LIST
77575: LIST
77576: LIST
77577: LIST
77578: LIST
77579: LIST
77580: LIST
77581: LIST
77582: PUSH
77583: LD_INT 101
77585: PUSH
77586: LD_INT 102
77588: PUSH
77589: LD_INT 103
77591: PUSH
77592: LD_INT 104
77594: PUSH
77595: LD_INT 105
77597: PUSH
77598: LD_INT 106
77600: PUSH
77601: LD_INT 107
77603: PUSH
77604: LD_INT 108
77606: PUSH
77607: LD_INT 109
77609: PUSH
77610: LD_INT 110
77612: PUSH
77613: LD_INT 111
77615: PUSH
77616: LD_INT 112
77618: PUSH
77619: LD_INT 113
77621: PUSH
77622: LD_INT 114
77624: PUSH
77625: LD_INT 116
77627: PUSH
77628: LD_INT 117
77630: PUSH
77631: LD_INT 118
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: LIST
77638: LIST
77639: LIST
77640: LIST
77641: LIST
77642: LIST
77643: LIST
77644: LIST
77645: LIST
77646: LIST
77647: LIST
77648: LIST
77649: LIST
77650: LIST
77651: LIST
77652: PUSH
77653: EMPTY
77654: LIST
77655: LIST
77656: ST_TO_ADDR
77657: GO 78896
77659: LD_INT 14
77661: DOUBLE
77662: EQUAL
77663: IFTRUE 77667
77665: GO 77891
77667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
77668: LD_ADDR_VAR 0 2
77672: PUSH
77673: LD_INT 1
77675: PUSH
77676: LD_INT 2
77678: PUSH
77679: LD_INT 3
77681: PUSH
77682: LD_INT 4
77684: PUSH
77685: LD_INT 5
77687: PUSH
77688: LD_INT 6
77690: PUSH
77691: LD_INT 7
77693: PUSH
77694: LD_INT 8
77696: PUSH
77697: LD_INT 9
77699: PUSH
77700: LD_INT 10
77702: PUSH
77703: LD_INT 11
77705: PUSH
77706: LD_INT 12
77708: PUSH
77709: LD_INT 13
77711: PUSH
77712: LD_INT 14
77714: PUSH
77715: LD_INT 15
77717: PUSH
77718: LD_INT 16
77720: PUSH
77721: LD_INT 17
77723: PUSH
77724: LD_INT 18
77726: PUSH
77727: LD_INT 19
77729: PUSH
77730: LD_INT 20
77732: PUSH
77733: LD_INT 21
77735: PUSH
77736: LD_INT 22
77738: PUSH
77739: LD_INT 23
77741: PUSH
77742: LD_INT 24
77744: PUSH
77745: LD_INT 25
77747: PUSH
77748: LD_INT 26
77750: PUSH
77751: LD_INT 27
77753: PUSH
77754: LD_INT 28
77756: PUSH
77757: LD_INT 29
77759: PUSH
77760: LD_INT 30
77762: PUSH
77763: LD_INT 31
77765: PUSH
77766: LD_INT 32
77768: PUSH
77769: LD_INT 33
77771: PUSH
77772: LD_INT 34
77774: PUSH
77775: LD_INT 36
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: LIST
77782: LIST
77783: LIST
77784: LIST
77785: LIST
77786: LIST
77787: LIST
77788: LIST
77789: LIST
77790: LIST
77791: LIST
77792: LIST
77793: LIST
77794: LIST
77795: LIST
77796: LIST
77797: LIST
77798: LIST
77799: LIST
77800: LIST
77801: LIST
77802: LIST
77803: LIST
77804: LIST
77805: LIST
77806: LIST
77807: LIST
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: LIST
77813: LIST
77814: PUSH
77815: LD_INT 101
77817: PUSH
77818: LD_INT 102
77820: PUSH
77821: LD_INT 103
77823: PUSH
77824: LD_INT 104
77826: PUSH
77827: LD_INT 105
77829: PUSH
77830: LD_INT 106
77832: PUSH
77833: LD_INT 107
77835: PUSH
77836: LD_INT 108
77838: PUSH
77839: LD_INT 109
77841: PUSH
77842: LD_INT 110
77844: PUSH
77845: LD_INT 111
77847: PUSH
77848: LD_INT 112
77850: PUSH
77851: LD_INT 113
77853: PUSH
77854: LD_INT 114
77856: PUSH
77857: LD_INT 116
77859: PUSH
77860: LD_INT 117
77862: PUSH
77863: LD_INT 118
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: LIST
77870: LIST
77871: LIST
77872: LIST
77873: LIST
77874: LIST
77875: LIST
77876: LIST
77877: LIST
77878: LIST
77879: LIST
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: PUSH
77885: EMPTY
77886: LIST
77887: LIST
77888: ST_TO_ADDR
77889: GO 78896
77891: LD_INT 15
77893: DOUBLE
77894: EQUAL
77895: IFTRUE 77899
77897: GO 78123
77899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
77900: LD_ADDR_VAR 0 2
77904: PUSH
77905: LD_INT 1
77907: PUSH
77908: LD_INT 2
77910: PUSH
77911: LD_INT 3
77913: PUSH
77914: LD_INT 4
77916: PUSH
77917: LD_INT 5
77919: PUSH
77920: LD_INT 6
77922: PUSH
77923: LD_INT 7
77925: PUSH
77926: LD_INT 8
77928: PUSH
77929: LD_INT 9
77931: PUSH
77932: LD_INT 10
77934: PUSH
77935: LD_INT 11
77937: PUSH
77938: LD_INT 12
77940: PUSH
77941: LD_INT 13
77943: PUSH
77944: LD_INT 14
77946: PUSH
77947: LD_INT 15
77949: PUSH
77950: LD_INT 16
77952: PUSH
77953: LD_INT 17
77955: PUSH
77956: LD_INT 18
77958: PUSH
77959: LD_INT 19
77961: PUSH
77962: LD_INT 20
77964: PUSH
77965: LD_INT 21
77967: PUSH
77968: LD_INT 22
77970: PUSH
77971: LD_INT 23
77973: PUSH
77974: LD_INT 24
77976: PUSH
77977: LD_INT 25
77979: PUSH
77980: LD_INT 26
77982: PUSH
77983: LD_INT 27
77985: PUSH
77986: LD_INT 28
77988: PUSH
77989: LD_INT 29
77991: PUSH
77992: LD_INT 30
77994: PUSH
77995: LD_INT 31
77997: PUSH
77998: LD_INT 32
78000: PUSH
78001: LD_INT 33
78003: PUSH
78004: LD_INT 34
78006: PUSH
78007: LD_INT 36
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: LIST
78014: LIST
78015: LIST
78016: LIST
78017: LIST
78018: LIST
78019: LIST
78020: LIST
78021: LIST
78022: LIST
78023: LIST
78024: LIST
78025: LIST
78026: LIST
78027: LIST
78028: LIST
78029: LIST
78030: LIST
78031: LIST
78032: LIST
78033: LIST
78034: LIST
78035: LIST
78036: LIST
78037: LIST
78038: LIST
78039: LIST
78040: LIST
78041: LIST
78042: LIST
78043: LIST
78044: LIST
78045: LIST
78046: PUSH
78047: LD_INT 101
78049: PUSH
78050: LD_INT 102
78052: PUSH
78053: LD_INT 103
78055: PUSH
78056: LD_INT 104
78058: PUSH
78059: LD_INT 105
78061: PUSH
78062: LD_INT 106
78064: PUSH
78065: LD_INT 107
78067: PUSH
78068: LD_INT 108
78070: PUSH
78071: LD_INT 109
78073: PUSH
78074: LD_INT 110
78076: PUSH
78077: LD_INT 111
78079: PUSH
78080: LD_INT 112
78082: PUSH
78083: LD_INT 113
78085: PUSH
78086: LD_INT 114
78088: PUSH
78089: LD_INT 116
78091: PUSH
78092: LD_INT 117
78094: PUSH
78095: LD_INT 118
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: LIST
78109: LIST
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: LIST
78115: LIST
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: ST_TO_ADDR
78121: GO 78896
78123: LD_INT 16
78125: DOUBLE
78126: EQUAL
78127: IFTRUE 78131
78129: GO 78267
78131: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
78132: LD_ADDR_VAR 0 2
78136: PUSH
78137: LD_INT 2
78139: PUSH
78140: LD_INT 4
78142: PUSH
78143: LD_INT 5
78145: PUSH
78146: LD_INT 7
78148: PUSH
78149: LD_INT 11
78151: PUSH
78152: LD_INT 12
78154: PUSH
78155: LD_INT 15
78157: PUSH
78158: LD_INT 16
78160: PUSH
78161: LD_INT 20
78163: PUSH
78164: LD_INT 21
78166: PUSH
78167: LD_INT 22
78169: PUSH
78170: LD_INT 23
78172: PUSH
78173: LD_INT 25
78175: PUSH
78176: LD_INT 26
78178: PUSH
78179: LD_INT 30
78181: PUSH
78182: LD_INT 31
78184: PUSH
78185: LD_INT 32
78187: PUSH
78188: LD_INT 33
78190: PUSH
78191: LD_INT 34
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: LIST
78198: LIST
78199: LIST
78200: LIST
78201: LIST
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: LIST
78209: LIST
78210: LIST
78211: LIST
78212: LIST
78213: LIST
78214: PUSH
78215: LD_INT 101
78217: PUSH
78218: LD_INT 102
78220: PUSH
78221: LD_INT 103
78223: PUSH
78224: LD_INT 106
78226: PUSH
78227: LD_INT 108
78229: PUSH
78230: LD_INT 112
78232: PUSH
78233: LD_INT 113
78235: PUSH
78236: LD_INT 114
78238: PUSH
78239: LD_INT 116
78241: PUSH
78242: LD_INT 117
78244: PUSH
78245: LD_INT 118
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: LIST
78252: LIST
78253: LIST
78254: LIST
78255: LIST
78256: LIST
78257: LIST
78258: LIST
78259: LIST
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: ST_TO_ADDR
78265: GO 78896
78267: LD_INT 17
78269: DOUBLE
78270: EQUAL
78271: IFTRUE 78275
78273: GO 78499
78275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
78276: LD_ADDR_VAR 0 2
78280: PUSH
78281: LD_INT 1
78283: PUSH
78284: LD_INT 2
78286: PUSH
78287: LD_INT 3
78289: PUSH
78290: LD_INT 4
78292: PUSH
78293: LD_INT 5
78295: PUSH
78296: LD_INT 6
78298: PUSH
78299: LD_INT 7
78301: PUSH
78302: LD_INT 8
78304: PUSH
78305: LD_INT 9
78307: PUSH
78308: LD_INT 10
78310: PUSH
78311: LD_INT 11
78313: PUSH
78314: LD_INT 12
78316: PUSH
78317: LD_INT 13
78319: PUSH
78320: LD_INT 14
78322: PUSH
78323: LD_INT 15
78325: PUSH
78326: LD_INT 16
78328: PUSH
78329: LD_INT 17
78331: PUSH
78332: LD_INT 18
78334: PUSH
78335: LD_INT 19
78337: PUSH
78338: LD_INT 20
78340: PUSH
78341: LD_INT 21
78343: PUSH
78344: LD_INT 22
78346: PUSH
78347: LD_INT 23
78349: PUSH
78350: LD_INT 24
78352: PUSH
78353: LD_INT 25
78355: PUSH
78356: LD_INT 26
78358: PUSH
78359: LD_INT 27
78361: PUSH
78362: LD_INT 28
78364: PUSH
78365: LD_INT 29
78367: PUSH
78368: LD_INT 30
78370: PUSH
78371: LD_INT 31
78373: PUSH
78374: LD_INT 32
78376: PUSH
78377: LD_INT 33
78379: PUSH
78380: LD_INT 34
78382: PUSH
78383: LD_INT 36
78385: PUSH
78386: EMPTY
78387: LIST
78388: LIST
78389: LIST
78390: LIST
78391: LIST
78392: LIST
78393: LIST
78394: LIST
78395: LIST
78396: LIST
78397: LIST
78398: LIST
78399: LIST
78400: LIST
78401: LIST
78402: LIST
78403: LIST
78404: LIST
78405: LIST
78406: LIST
78407: LIST
78408: LIST
78409: LIST
78410: LIST
78411: LIST
78412: LIST
78413: LIST
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: LIST
78419: LIST
78420: LIST
78421: LIST
78422: PUSH
78423: LD_INT 101
78425: PUSH
78426: LD_INT 102
78428: PUSH
78429: LD_INT 103
78431: PUSH
78432: LD_INT 104
78434: PUSH
78435: LD_INT 105
78437: PUSH
78438: LD_INT 106
78440: PUSH
78441: LD_INT 107
78443: PUSH
78444: LD_INT 108
78446: PUSH
78447: LD_INT 109
78449: PUSH
78450: LD_INT 110
78452: PUSH
78453: LD_INT 111
78455: PUSH
78456: LD_INT 112
78458: PUSH
78459: LD_INT 113
78461: PUSH
78462: LD_INT 114
78464: PUSH
78465: LD_INT 116
78467: PUSH
78468: LD_INT 117
78470: PUSH
78471: LD_INT 118
78473: PUSH
78474: EMPTY
78475: LIST
78476: LIST
78477: LIST
78478: LIST
78479: LIST
78480: LIST
78481: LIST
78482: LIST
78483: LIST
78484: LIST
78485: LIST
78486: LIST
78487: LIST
78488: LIST
78489: LIST
78490: LIST
78491: LIST
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: ST_TO_ADDR
78497: GO 78896
78499: LD_INT 18
78501: DOUBLE
78502: EQUAL
78503: IFTRUE 78507
78505: GO 78655
78507: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
78508: LD_ADDR_VAR 0 2
78512: PUSH
78513: LD_INT 2
78515: PUSH
78516: LD_INT 4
78518: PUSH
78519: LD_INT 5
78521: PUSH
78522: LD_INT 7
78524: PUSH
78525: LD_INT 11
78527: PUSH
78528: LD_INT 12
78530: PUSH
78531: LD_INT 15
78533: PUSH
78534: LD_INT 16
78536: PUSH
78537: LD_INT 20
78539: PUSH
78540: LD_INT 21
78542: PUSH
78543: LD_INT 22
78545: PUSH
78546: LD_INT 23
78548: PUSH
78549: LD_INT 25
78551: PUSH
78552: LD_INT 26
78554: PUSH
78555: LD_INT 30
78557: PUSH
78558: LD_INT 31
78560: PUSH
78561: LD_INT 32
78563: PUSH
78564: LD_INT 33
78566: PUSH
78567: LD_INT 34
78569: PUSH
78570: LD_INT 35
78572: PUSH
78573: LD_INT 36
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: LIST
78580: LIST
78581: LIST
78582: LIST
78583: LIST
78584: LIST
78585: LIST
78586: LIST
78587: LIST
78588: LIST
78589: LIST
78590: LIST
78591: LIST
78592: LIST
78593: LIST
78594: LIST
78595: LIST
78596: LIST
78597: LIST
78598: PUSH
78599: LD_INT 101
78601: PUSH
78602: LD_INT 102
78604: PUSH
78605: LD_INT 103
78607: PUSH
78608: LD_INT 106
78610: PUSH
78611: LD_INT 108
78613: PUSH
78614: LD_INT 112
78616: PUSH
78617: LD_INT 113
78619: PUSH
78620: LD_INT 114
78622: PUSH
78623: LD_INT 115
78625: PUSH
78626: LD_INT 116
78628: PUSH
78629: LD_INT 117
78631: PUSH
78632: LD_INT 118
78634: PUSH
78635: EMPTY
78636: LIST
78637: LIST
78638: LIST
78639: LIST
78640: LIST
78641: LIST
78642: LIST
78643: LIST
78644: LIST
78645: LIST
78646: LIST
78647: LIST
78648: PUSH
78649: EMPTY
78650: LIST
78651: LIST
78652: ST_TO_ADDR
78653: GO 78896
78655: LD_INT 19
78657: DOUBLE
78658: EQUAL
78659: IFTRUE 78663
78661: GO 78895
78663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
78664: LD_ADDR_VAR 0 2
78668: PUSH
78669: LD_INT 1
78671: PUSH
78672: LD_INT 2
78674: PUSH
78675: LD_INT 3
78677: PUSH
78678: LD_INT 4
78680: PUSH
78681: LD_INT 5
78683: PUSH
78684: LD_INT 6
78686: PUSH
78687: LD_INT 7
78689: PUSH
78690: LD_INT 8
78692: PUSH
78693: LD_INT 9
78695: PUSH
78696: LD_INT 10
78698: PUSH
78699: LD_INT 11
78701: PUSH
78702: LD_INT 12
78704: PUSH
78705: LD_INT 13
78707: PUSH
78708: LD_INT 14
78710: PUSH
78711: LD_INT 15
78713: PUSH
78714: LD_INT 16
78716: PUSH
78717: LD_INT 17
78719: PUSH
78720: LD_INT 18
78722: PUSH
78723: LD_INT 19
78725: PUSH
78726: LD_INT 20
78728: PUSH
78729: LD_INT 21
78731: PUSH
78732: LD_INT 22
78734: PUSH
78735: LD_INT 23
78737: PUSH
78738: LD_INT 24
78740: PUSH
78741: LD_INT 25
78743: PUSH
78744: LD_INT 26
78746: PUSH
78747: LD_INT 27
78749: PUSH
78750: LD_INT 28
78752: PUSH
78753: LD_INT 29
78755: PUSH
78756: LD_INT 30
78758: PUSH
78759: LD_INT 31
78761: PUSH
78762: LD_INT 32
78764: PUSH
78765: LD_INT 33
78767: PUSH
78768: LD_INT 34
78770: PUSH
78771: LD_INT 35
78773: PUSH
78774: LD_INT 36
78776: PUSH
78777: EMPTY
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: LIST
78787: LIST
78788: LIST
78789: LIST
78790: LIST
78791: LIST
78792: LIST
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: LIST
78800: LIST
78801: LIST
78802: LIST
78803: LIST
78804: LIST
78805: LIST
78806: LIST
78807: LIST
78808: LIST
78809: LIST
78810: LIST
78811: LIST
78812: LIST
78813: LIST
78814: PUSH
78815: LD_INT 101
78817: PUSH
78818: LD_INT 102
78820: PUSH
78821: LD_INT 103
78823: PUSH
78824: LD_INT 104
78826: PUSH
78827: LD_INT 105
78829: PUSH
78830: LD_INT 106
78832: PUSH
78833: LD_INT 107
78835: PUSH
78836: LD_INT 108
78838: PUSH
78839: LD_INT 109
78841: PUSH
78842: LD_INT 110
78844: PUSH
78845: LD_INT 111
78847: PUSH
78848: LD_INT 112
78850: PUSH
78851: LD_INT 113
78853: PUSH
78854: LD_INT 114
78856: PUSH
78857: LD_INT 115
78859: PUSH
78860: LD_INT 116
78862: PUSH
78863: LD_INT 117
78865: PUSH
78866: LD_INT 118
78868: PUSH
78869: EMPTY
78870: LIST
78871: LIST
78872: LIST
78873: LIST
78874: LIST
78875: LIST
78876: LIST
78877: LIST
78878: LIST
78879: LIST
78880: LIST
78881: LIST
78882: LIST
78883: LIST
78884: LIST
78885: LIST
78886: LIST
78887: LIST
78888: PUSH
78889: EMPTY
78890: LIST
78891: LIST
78892: ST_TO_ADDR
78893: GO 78896
78895: POP
// end else
78896: GO 79127
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
78898: LD_ADDR_VAR 0 2
78902: PUSH
78903: LD_INT 1
78905: PUSH
78906: LD_INT 2
78908: PUSH
78909: LD_INT 3
78911: PUSH
78912: LD_INT 4
78914: PUSH
78915: LD_INT 5
78917: PUSH
78918: LD_INT 6
78920: PUSH
78921: LD_INT 7
78923: PUSH
78924: LD_INT 8
78926: PUSH
78927: LD_INT 9
78929: PUSH
78930: LD_INT 10
78932: PUSH
78933: LD_INT 11
78935: PUSH
78936: LD_INT 12
78938: PUSH
78939: LD_INT 13
78941: PUSH
78942: LD_INT 14
78944: PUSH
78945: LD_INT 15
78947: PUSH
78948: LD_INT 16
78950: PUSH
78951: LD_INT 17
78953: PUSH
78954: LD_INT 18
78956: PUSH
78957: LD_INT 19
78959: PUSH
78960: LD_INT 20
78962: PUSH
78963: LD_INT 21
78965: PUSH
78966: LD_INT 22
78968: PUSH
78969: LD_INT 23
78971: PUSH
78972: LD_INT 24
78974: PUSH
78975: LD_INT 25
78977: PUSH
78978: LD_INT 26
78980: PUSH
78981: LD_INT 27
78983: PUSH
78984: LD_INT 28
78986: PUSH
78987: LD_INT 29
78989: PUSH
78990: LD_INT 30
78992: PUSH
78993: LD_INT 31
78995: PUSH
78996: LD_INT 32
78998: PUSH
78999: LD_INT 33
79001: PUSH
79002: LD_INT 34
79004: PUSH
79005: LD_INT 35
79007: PUSH
79008: LD_INT 36
79010: PUSH
79011: EMPTY
79012: LIST
79013: LIST
79014: LIST
79015: LIST
79016: LIST
79017: LIST
79018: LIST
79019: LIST
79020: LIST
79021: LIST
79022: LIST
79023: LIST
79024: LIST
79025: LIST
79026: LIST
79027: LIST
79028: LIST
79029: LIST
79030: LIST
79031: LIST
79032: LIST
79033: LIST
79034: LIST
79035: LIST
79036: LIST
79037: LIST
79038: LIST
79039: LIST
79040: LIST
79041: LIST
79042: LIST
79043: LIST
79044: LIST
79045: LIST
79046: LIST
79047: LIST
79048: PUSH
79049: LD_INT 101
79051: PUSH
79052: LD_INT 102
79054: PUSH
79055: LD_INT 103
79057: PUSH
79058: LD_INT 104
79060: PUSH
79061: LD_INT 105
79063: PUSH
79064: LD_INT 106
79066: PUSH
79067: LD_INT 107
79069: PUSH
79070: LD_INT 108
79072: PUSH
79073: LD_INT 109
79075: PUSH
79076: LD_INT 110
79078: PUSH
79079: LD_INT 111
79081: PUSH
79082: LD_INT 112
79084: PUSH
79085: LD_INT 113
79087: PUSH
79088: LD_INT 114
79090: PUSH
79091: LD_INT 115
79093: PUSH
79094: LD_INT 116
79096: PUSH
79097: LD_INT 117
79099: PUSH
79100: LD_INT 118
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: LIST
79107: LIST
79108: LIST
79109: LIST
79110: LIST
79111: LIST
79112: LIST
79113: LIST
79114: LIST
79115: LIST
79116: LIST
79117: LIST
79118: LIST
79119: LIST
79120: LIST
79121: LIST
79122: PUSH
79123: EMPTY
79124: LIST
79125: LIST
79126: ST_TO_ADDR
// if result then
79127: LD_VAR 0 2
79131: IFFALSE 79917
// begin normal :=  ;
79133: LD_ADDR_VAR 0 5
79137: PUSH
79138: LD_STRING 
79140: ST_TO_ADDR
// hardcore :=  ;
79141: LD_ADDR_VAR 0 6
79145: PUSH
79146: LD_STRING 
79148: ST_TO_ADDR
// active :=  ;
79149: LD_ADDR_VAR 0 7
79153: PUSH
79154: LD_STRING 
79156: ST_TO_ADDR
// for i = 1 to normalCounter do
79157: LD_ADDR_VAR 0 8
79161: PUSH
79162: DOUBLE
79163: LD_INT 1
79165: DEC
79166: ST_TO_ADDR
79167: LD_EXP 65
79171: PUSH
79172: FOR_TO
79173: IFFALSE 79274
// begin tmp := 0 ;
79175: LD_ADDR_VAR 0 3
79179: PUSH
79180: LD_STRING 0
79182: ST_TO_ADDR
// if result [ 1 ] then
79183: LD_VAR 0 2
79187: PUSH
79188: LD_INT 1
79190: ARRAY
79191: IFFALSE 79256
// if result [ 1 ] [ 1 ] = i then
79193: LD_VAR 0 2
79197: PUSH
79198: LD_INT 1
79200: ARRAY
79201: PUSH
79202: LD_INT 1
79204: ARRAY
79205: PUSH
79206: LD_VAR 0 8
79210: EQUAL
79211: IFFALSE 79256
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
79213: LD_ADDR_VAR 0 2
79217: PUSH
79218: LD_VAR 0 2
79222: PPUSH
79223: LD_INT 1
79225: PPUSH
79226: LD_VAR 0 2
79230: PUSH
79231: LD_INT 1
79233: ARRAY
79234: PPUSH
79235: LD_INT 1
79237: PPUSH
79238: CALL_OW 3
79242: PPUSH
79243: CALL_OW 1
79247: ST_TO_ADDR
// tmp := 1 ;
79248: LD_ADDR_VAR 0 3
79252: PUSH
79253: LD_STRING 1
79255: ST_TO_ADDR
// end ; normal := normal & tmp ;
79256: LD_ADDR_VAR 0 5
79260: PUSH
79261: LD_VAR 0 5
79265: PUSH
79266: LD_VAR 0 3
79270: STR
79271: ST_TO_ADDR
// end ;
79272: GO 79172
79274: POP
79275: POP
// for i = 1 to hardcoreCounter do
79276: LD_ADDR_VAR 0 8
79280: PUSH
79281: DOUBLE
79282: LD_INT 1
79284: DEC
79285: ST_TO_ADDR
79286: LD_EXP 66
79290: PUSH
79291: FOR_TO
79292: IFFALSE 79397
// begin tmp := 0 ;
79294: LD_ADDR_VAR 0 3
79298: PUSH
79299: LD_STRING 0
79301: ST_TO_ADDR
// if result [ 2 ] then
79302: LD_VAR 0 2
79306: PUSH
79307: LD_INT 2
79309: ARRAY
79310: IFFALSE 79379
// if result [ 2 ] [ 1 ] = 100 + i then
79312: LD_VAR 0 2
79316: PUSH
79317: LD_INT 2
79319: ARRAY
79320: PUSH
79321: LD_INT 1
79323: ARRAY
79324: PUSH
79325: LD_INT 100
79327: PUSH
79328: LD_VAR 0 8
79332: PLUS
79333: EQUAL
79334: IFFALSE 79379
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
79336: LD_ADDR_VAR 0 2
79340: PUSH
79341: LD_VAR 0 2
79345: PPUSH
79346: LD_INT 2
79348: PPUSH
79349: LD_VAR 0 2
79353: PUSH
79354: LD_INT 2
79356: ARRAY
79357: PPUSH
79358: LD_INT 1
79360: PPUSH
79361: CALL_OW 3
79365: PPUSH
79366: CALL_OW 1
79370: ST_TO_ADDR
// tmp := 1 ;
79371: LD_ADDR_VAR 0 3
79375: PUSH
79376: LD_STRING 1
79378: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
79379: LD_ADDR_VAR 0 6
79383: PUSH
79384: LD_VAR 0 6
79388: PUSH
79389: LD_VAR 0 3
79393: STR
79394: ST_TO_ADDR
// end ;
79395: GO 79291
79397: POP
79398: POP
// if isGameLoad then
79399: LD_VAR 0 1
79403: IFFALSE 79878
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
79405: LD_ADDR_VAR 0 4
79409: PUSH
79410: LD_EXP 69
79414: PUSH
79415: LD_EXP 68
79419: PUSH
79420: LD_EXP 70
79424: PUSH
79425: LD_EXP 67
79429: PUSH
79430: LD_EXP 71
79434: PUSH
79435: LD_EXP 72
79439: PUSH
79440: LD_EXP 73
79444: PUSH
79445: LD_EXP 74
79449: PUSH
79450: LD_EXP 75
79454: PUSH
79455: LD_EXP 76
79459: PUSH
79460: LD_EXP 77
79464: PUSH
79465: LD_EXP 78
79469: PUSH
79470: LD_EXP 79
79474: PUSH
79475: LD_EXP 80
79479: PUSH
79480: LD_EXP 88
79484: PUSH
79485: LD_EXP 89
79489: PUSH
79490: LD_EXP 90
79494: PUSH
79495: LD_EXP 91
79499: PUSH
79500: LD_EXP 93
79504: PUSH
79505: LD_EXP 94
79509: PUSH
79510: LD_EXP 95
79514: PUSH
79515: LD_EXP 98
79519: PUSH
79520: LD_EXP 100
79524: PUSH
79525: LD_EXP 101
79529: PUSH
79530: LD_EXP 102
79534: PUSH
79535: LD_EXP 104
79539: PUSH
79540: LD_EXP 105
79544: PUSH
79545: LD_EXP 108
79549: PUSH
79550: LD_EXP 109
79554: PUSH
79555: LD_EXP 110
79559: PUSH
79560: LD_EXP 111
79564: PUSH
79565: LD_EXP 112
79569: PUSH
79570: LD_EXP 113
79574: PUSH
79575: LD_EXP 114
79579: PUSH
79580: LD_EXP 115
79584: PUSH
79585: LD_EXP 116
79589: PUSH
79590: LD_EXP 81
79594: PUSH
79595: LD_EXP 82
79599: PUSH
79600: LD_EXP 85
79604: PUSH
79605: LD_EXP 86
79609: PUSH
79610: LD_EXP 87
79614: PUSH
79615: LD_EXP 83
79619: PUSH
79620: LD_EXP 84
79624: PUSH
79625: LD_EXP 92
79629: PUSH
79630: LD_EXP 96
79634: PUSH
79635: LD_EXP 97
79639: PUSH
79640: LD_EXP 99
79644: PUSH
79645: LD_EXP 103
79649: PUSH
79650: LD_EXP 106
79654: PUSH
79655: LD_EXP 107
79659: PUSH
79660: LD_EXP 117
79664: PUSH
79665: LD_EXP 118
79669: PUSH
79670: LD_EXP 119
79674: PUSH
79675: LD_EXP 120
79679: PUSH
79680: EMPTY
79681: LIST
79682: LIST
79683: LIST
79684: LIST
79685: LIST
79686: LIST
79687: LIST
79688: LIST
79689: LIST
79690: LIST
79691: LIST
79692: LIST
79693: LIST
79694: LIST
79695: LIST
79696: LIST
79697: LIST
79698: LIST
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: LIST
79704: LIST
79705: LIST
79706: LIST
79707: LIST
79708: LIST
79709: LIST
79710: LIST
79711: LIST
79712: LIST
79713: LIST
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: LIST
79721: LIST
79722: LIST
79723: LIST
79724: LIST
79725: LIST
79726: LIST
79727: LIST
79728: LIST
79729: LIST
79730: LIST
79731: LIST
79732: LIST
79733: LIST
79734: LIST
79735: ST_TO_ADDR
// tmp :=  ;
79736: LD_ADDR_VAR 0 3
79740: PUSH
79741: LD_STRING 
79743: ST_TO_ADDR
// for i = 1 to normalCounter do
79744: LD_ADDR_VAR 0 8
79748: PUSH
79749: DOUBLE
79750: LD_INT 1
79752: DEC
79753: ST_TO_ADDR
79754: LD_EXP 65
79758: PUSH
79759: FOR_TO
79760: IFFALSE 79796
// begin if flags [ i ] then
79762: LD_VAR 0 4
79766: PUSH
79767: LD_VAR 0 8
79771: ARRAY
79772: IFFALSE 79794
// tmp := tmp & i & ; ;
79774: LD_ADDR_VAR 0 3
79778: PUSH
79779: LD_VAR 0 3
79783: PUSH
79784: LD_VAR 0 8
79788: STR
79789: PUSH
79790: LD_STRING ;
79792: STR
79793: ST_TO_ADDR
// end ;
79794: GO 79759
79796: POP
79797: POP
// for i = 1 to hardcoreCounter do
79798: LD_ADDR_VAR 0 8
79802: PUSH
79803: DOUBLE
79804: LD_INT 1
79806: DEC
79807: ST_TO_ADDR
79808: LD_EXP 66
79812: PUSH
79813: FOR_TO
79814: IFFALSE 79860
// begin if flags [ normalCounter + i ] then
79816: LD_VAR 0 4
79820: PUSH
79821: LD_EXP 65
79825: PUSH
79826: LD_VAR 0 8
79830: PLUS
79831: ARRAY
79832: IFFALSE 79858
// tmp := tmp & ( 100 + i ) & ; ;
79834: LD_ADDR_VAR 0 3
79838: PUSH
79839: LD_VAR 0 3
79843: PUSH
79844: LD_INT 100
79846: PUSH
79847: LD_VAR 0 8
79851: PLUS
79852: STR
79853: PUSH
79854: LD_STRING ;
79856: STR
79857: ST_TO_ADDR
// end ;
79858: GO 79813
79860: POP
79861: POP
// if tmp then
79862: LD_VAR 0 3
79866: IFFALSE 79878
// active := tmp ;
79868: LD_ADDR_VAR 0 7
79872: PUSH
79873: LD_VAR 0 3
79877: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
79878: LD_STRING getStreamItemsFromMission("
79880: PUSH
79881: LD_VAR 0 5
79885: STR
79886: PUSH
79887: LD_STRING ","
79889: STR
79890: PUSH
79891: LD_VAR 0 6
79895: STR
79896: PUSH
79897: LD_STRING ","
79899: STR
79900: PUSH
79901: LD_VAR 0 7
79905: STR
79906: PUSH
79907: LD_STRING ")
79909: STR
79910: PPUSH
79911: CALL_OW 559
// end else
79915: GO 79924
// ToLua ( getStreamItemsFromMission("","","") ) ;
79917: LD_STRING getStreamItemsFromMission("","","")
79919: PPUSH
79920: CALL_OW 559
// end ;
79924: LD_VAR 0 2
79928: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
79929: LD_EXP 64
79933: IFFALSE 79941
79935: PUSH
79936: LD_EXP 69
79940: AND
79941: IFFALSE 80065
79943: GO 79945
79945: DISABLE
79946: LD_INT 0
79948: PPUSH
79949: PPUSH
// begin enable ;
79950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
79951: LD_ADDR_VAR 0 2
79955: PUSH
79956: LD_INT 22
79958: PUSH
79959: LD_OWVAR 2
79963: PUSH
79964: EMPTY
79965: LIST
79966: LIST
79967: PUSH
79968: LD_INT 2
79970: PUSH
79971: LD_INT 34
79973: PUSH
79974: LD_INT 7
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: PUSH
79981: LD_INT 34
79983: PUSH
79984: LD_INT 45
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: PUSH
79991: LD_INT 34
79993: PUSH
79994: LD_INT 28
79996: PUSH
79997: EMPTY
79998: LIST
79999: LIST
80000: PUSH
80001: LD_INT 34
80003: PUSH
80004: LD_INT 47
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PUSH
80011: EMPTY
80012: LIST
80013: LIST
80014: LIST
80015: LIST
80016: LIST
80017: PUSH
80018: EMPTY
80019: LIST
80020: LIST
80021: PPUSH
80022: CALL_OW 69
80026: ST_TO_ADDR
// if not tmp then
80027: LD_VAR 0 2
80031: NOT
80032: IFFALSE 80036
// exit ;
80034: GO 80065
// for i in tmp do
80036: LD_ADDR_VAR 0 1
80040: PUSH
80041: LD_VAR 0 2
80045: PUSH
80046: FOR_IN
80047: IFFALSE 80063
// begin SetLives ( i , 0 ) ;
80049: LD_VAR 0 1
80053: PPUSH
80054: LD_INT 0
80056: PPUSH
80057: CALL_OW 234
// end ;
80061: GO 80046
80063: POP
80064: POP
// end ;
80065: PPOPN 2
80067: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
80068: LD_EXP 64
80072: IFFALSE 80080
80074: PUSH
80075: LD_EXP 70
80079: AND
80080: IFFALSE 80164
80082: GO 80084
80084: DISABLE
80085: LD_INT 0
80087: PPUSH
80088: PPUSH
// begin enable ;
80089: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
80090: LD_ADDR_VAR 0 2
80094: PUSH
80095: LD_INT 22
80097: PUSH
80098: LD_OWVAR 2
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PUSH
80107: LD_INT 32
80109: PUSH
80110: LD_INT 3
80112: PUSH
80113: EMPTY
80114: LIST
80115: LIST
80116: PUSH
80117: EMPTY
80118: LIST
80119: LIST
80120: PPUSH
80121: CALL_OW 69
80125: ST_TO_ADDR
// if not tmp then
80126: LD_VAR 0 2
80130: NOT
80131: IFFALSE 80135
// exit ;
80133: GO 80164
// for i in tmp do
80135: LD_ADDR_VAR 0 1
80139: PUSH
80140: LD_VAR 0 2
80144: PUSH
80145: FOR_IN
80146: IFFALSE 80162
// begin SetLives ( i , 0 ) ;
80148: LD_VAR 0 1
80152: PPUSH
80153: LD_INT 0
80155: PPUSH
80156: CALL_OW 234
// end ;
80160: GO 80145
80162: POP
80163: POP
// end ;
80164: PPOPN 2
80166: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
80167: LD_EXP 64
80171: IFFALSE 80179
80173: PUSH
80174: LD_EXP 67
80178: AND
80179: IFFALSE 80272
80181: GO 80183
80183: DISABLE
80184: LD_INT 0
80186: PPUSH
// begin enable ;
80187: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
80188: LD_ADDR_VAR 0 1
80192: PUSH
80193: LD_INT 22
80195: PUSH
80196: LD_OWVAR 2
80200: PUSH
80201: EMPTY
80202: LIST
80203: LIST
80204: PUSH
80205: LD_INT 2
80207: PUSH
80208: LD_INT 25
80210: PUSH
80211: LD_INT 5
80213: PUSH
80214: EMPTY
80215: LIST
80216: LIST
80217: PUSH
80218: LD_INT 25
80220: PUSH
80221: LD_INT 9
80223: PUSH
80224: EMPTY
80225: LIST
80226: LIST
80227: PUSH
80228: LD_INT 25
80230: PUSH
80231: LD_INT 8
80233: PUSH
80234: EMPTY
80235: LIST
80236: LIST
80237: PUSH
80238: EMPTY
80239: LIST
80240: LIST
80241: LIST
80242: LIST
80243: PUSH
80244: EMPTY
80245: LIST
80246: LIST
80247: PPUSH
80248: CALL_OW 69
80252: PUSH
80253: FOR_IN
80254: IFFALSE 80270
// begin SetClass ( i , 1 ) ;
80256: LD_VAR 0 1
80260: PPUSH
80261: LD_INT 1
80263: PPUSH
80264: CALL_OW 336
// end ;
80268: GO 80253
80270: POP
80271: POP
// end ;
80272: PPOPN 1
80274: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
80275: LD_EXP 64
80279: IFFALSE 80287
80281: PUSH
80282: LD_EXP 68
80286: AND
80287: IFFALSE 80299
80289: PUSH
80290: LD_OWVAR 65
80294: PUSH
80295: LD_INT 7
80297: LESS
80298: AND
80299: IFFALSE 80313
80301: GO 80303
80303: DISABLE
// begin enable ;
80304: ENABLE
// game_speed := 7 ;
80305: LD_ADDR_OWVAR 65
80309: PUSH
80310: LD_INT 7
80312: ST_TO_ADDR
// end ;
80313: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
80314: LD_EXP 64
80318: IFFALSE 80326
80320: PUSH
80321: LD_EXP 71
80325: AND
80326: IFFALSE 80528
80328: GO 80330
80330: DISABLE
80331: LD_INT 0
80333: PPUSH
80334: PPUSH
80335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80336: LD_ADDR_VAR 0 3
80340: PUSH
80341: LD_INT 81
80343: PUSH
80344: LD_OWVAR 2
80348: PUSH
80349: EMPTY
80350: LIST
80351: LIST
80352: PUSH
80353: LD_INT 21
80355: PUSH
80356: LD_INT 1
80358: PUSH
80359: EMPTY
80360: LIST
80361: LIST
80362: PUSH
80363: EMPTY
80364: LIST
80365: LIST
80366: PPUSH
80367: CALL_OW 69
80371: ST_TO_ADDR
// if not tmp then
80372: LD_VAR 0 3
80376: NOT
80377: IFFALSE 80381
// exit ;
80379: GO 80528
// if tmp > 5 then
80381: LD_VAR 0 3
80385: PUSH
80386: LD_INT 5
80388: GREATER
80389: IFFALSE 80401
// k := 5 else
80391: LD_ADDR_VAR 0 2
80395: PUSH
80396: LD_INT 5
80398: ST_TO_ADDR
80399: GO 80411
// k := tmp ;
80401: LD_ADDR_VAR 0 2
80405: PUSH
80406: LD_VAR 0 3
80410: ST_TO_ADDR
// for i := 1 to k do
80411: LD_ADDR_VAR 0 1
80415: PUSH
80416: DOUBLE
80417: LD_INT 1
80419: DEC
80420: ST_TO_ADDR
80421: LD_VAR 0 2
80425: PUSH
80426: FOR_TO
80427: IFFALSE 80526
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
80429: LD_VAR 0 3
80433: PUSH
80434: LD_VAR 0 1
80438: ARRAY
80439: PPUSH
80440: LD_VAR 0 1
80444: PUSH
80445: LD_INT 4
80447: MOD
80448: PUSH
80449: LD_INT 1
80451: PLUS
80452: PPUSH
80453: CALL_OW 259
80457: PUSH
80458: LD_INT 10
80460: LESS
80461: IFFALSE 80524
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
80463: LD_VAR 0 3
80467: PUSH
80468: LD_VAR 0 1
80472: ARRAY
80473: PPUSH
80474: LD_VAR 0 1
80478: PUSH
80479: LD_INT 4
80481: MOD
80482: PUSH
80483: LD_INT 1
80485: PLUS
80486: PPUSH
80487: LD_VAR 0 3
80491: PUSH
80492: LD_VAR 0 1
80496: ARRAY
80497: PPUSH
80498: LD_VAR 0 1
80502: PUSH
80503: LD_INT 4
80505: MOD
80506: PUSH
80507: LD_INT 1
80509: PLUS
80510: PPUSH
80511: CALL_OW 259
80515: PUSH
80516: LD_INT 1
80518: PLUS
80519: PPUSH
80520: CALL_OW 237
80524: GO 80426
80526: POP
80527: POP
// end ;
80528: PPOPN 3
80530: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
80531: LD_EXP 64
80535: IFFALSE 80543
80537: PUSH
80538: LD_EXP 72
80542: AND
80543: IFFALSE 80563
80545: GO 80547
80547: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
80548: LD_INT 4
80550: PPUSH
80551: LD_OWVAR 2
80555: PPUSH
80556: LD_INT 0
80558: PPUSH
80559: CALL_OW 324
80563: END
// every 0 0$1 trigger StreamModeActive and sShovel do
80564: LD_EXP 64
80568: IFFALSE 80576
80570: PUSH
80571: LD_EXP 101
80575: AND
80576: IFFALSE 80596
80578: GO 80580
80580: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
80581: LD_INT 19
80583: PPUSH
80584: LD_OWVAR 2
80588: PPUSH
80589: LD_INT 0
80591: PPUSH
80592: CALL_OW 324
80596: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
80597: LD_EXP 64
80601: IFFALSE 80609
80603: PUSH
80604: LD_EXP 73
80608: AND
80609: IFFALSE 80711
80611: GO 80613
80613: DISABLE
80614: LD_INT 0
80616: PPUSH
80617: PPUSH
// begin enable ;
80618: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
80619: LD_ADDR_VAR 0 2
80623: PUSH
80624: LD_INT 22
80626: PUSH
80627: LD_OWVAR 2
80631: PUSH
80632: EMPTY
80633: LIST
80634: LIST
80635: PUSH
80636: LD_INT 2
80638: PUSH
80639: LD_INT 34
80641: PUSH
80642: LD_INT 11
80644: PUSH
80645: EMPTY
80646: LIST
80647: LIST
80648: PUSH
80649: LD_INT 34
80651: PUSH
80652: LD_INT 30
80654: PUSH
80655: EMPTY
80656: LIST
80657: LIST
80658: PUSH
80659: EMPTY
80660: LIST
80661: LIST
80662: LIST
80663: PUSH
80664: EMPTY
80665: LIST
80666: LIST
80667: PPUSH
80668: CALL_OW 69
80672: ST_TO_ADDR
// if not tmp then
80673: LD_VAR 0 2
80677: NOT
80678: IFFALSE 80682
// exit ;
80680: GO 80711
// for i in tmp do
80682: LD_ADDR_VAR 0 1
80686: PUSH
80687: LD_VAR 0 2
80691: PUSH
80692: FOR_IN
80693: IFFALSE 80709
// begin SetLives ( i , 0 ) ;
80695: LD_VAR 0 1
80699: PPUSH
80700: LD_INT 0
80702: PPUSH
80703: CALL_OW 234
// end ;
80707: GO 80692
80709: POP
80710: POP
// end ;
80711: PPOPN 2
80713: END
// every 0 0$1 trigger StreamModeActive and sBunker do
80714: LD_EXP 64
80718: IFFALSE 80726
80720: PUSH
80721: LD_EXP 74
80725: AND
80726: IFFALSE 80746
80728: GO 80730
80730: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
80731: LD_INT 32
80733: PPUSH
80734: LD_OWVAR 2
80738: PPUSH
80739: LD_INT 0
80741: PPUSH
80742: CALL_OW 324
80746: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
80747: LD_EXP 64
80751: IFFALSE 80759
80753: PUSH
80754: LD_EXP 75
80758: AND
80759: IFFALSE 80942
80761: GO 80763
80763: DISABLE
80764: LD_INT 0
80766: PPUSH
80767: PPUSH
80768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
80769: LD_ADDR_VAR 0 2
80773: PUSH
80774: LD_INT 22
80776: PUSH
80777: LD_OWVAR 2
80781: PUSH
80782: EMPTY
80783: LIST
80784: LIST
80785: PUSH
80786: LD_INT 33
80788: PUSH
80789: LD_INT 3
80791: PUSH
80792: EMPTY
80793: LIST
80794: LIST
80795: PUSH
80796: EMPTY
80797: LIST
80798: LIST
80799: PPUSH
80800: CALL_OW 69
80804: ST_TO_ADDR
// if not tmp then
80805: LD_VAR 0 2
80809: NOT
80810: IFFALSE 80814
// exit ;
80812: GO 80942
// side := 0 ;
80814: LD_ADDR_VAR 0 3
80818: PUSH
80819: LD_INT 0
80821: ST_TO_ADDR
// for i := 1 to 8 do
80822: LD_ADDR_VAR 0 1
80826: PUSH
80827: DOUBLE
80828: LD_INT 1
80830: DEC
80831: ST_TO_ADDR
80832: LD_INT 8
80834: PUSH
80835: FOR_TO
80836: IFFALSE 80886
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
80838: LD_OWVAR 2
80842: PUSH
80843: LD_VAR 0 1
80847: NONEQUAL
80848: IFFALSE 80870
80850: PUSH
80851: LD_OWVAR 2
80855: PPUSH
80856: LD_VAR 0 1
80860: PPUSH
80861: CALL_OW 81
80865: PUSH
80866: LD_INT 2
80868: EQUAL
80869: AND
80870: IFFALSE 80884
// begin side := i ;
80872: LD_ADDR_VAR 0 3
80876: PUSH
80877: LD_VAR 0 1
80881: ST_TO_ADDR
// break ;
80882: GO 80886
// end ;
80884: GO 80835
80886: POP
80887: POP
// if not side then
80888: LD_VAR 0 3
80892: NOT
80893: IFFALSE 80897
// exit ;
80895: GO 80942
// for i := 1 to tmp do
80897: LD_ADDR_VAR 0 1
80901: PUSH
80902: DOUBLE
80903: LD_INT 1
80905: DEC
80906: ST_TO_ADDR
80907: LD_VAR 0 2
80911: PUSH
80912: FOR_TO
80913: IFFALSE 80940
// if Prob ( 60 ) then
80915: LD_INT 60
80917: PPUSH
80918: CALL_OW 13
80922: IFFALSE 80938
// SetSide ( i , side ) ;
80924: LD_VAR 0 1
80928: PPUSH
80929: LD_VAR 0 3
80933: PPUSH
80934: CALL_OW 235
80938: GO 80912
80940: POP
80941: POP
// end ;
80942: PPOPN 3
80944: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
80945: LD_EXP 64
80949: IFFALSE 80957
80951: PUSH
80952: LD_EXP 77
80956: AND
80957: IFFALSE 81076
80959: GO 80961
80961: DISABLE
80962: LD_INT 0
80964: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
80965: LD_ADDR_VAR 0 1
80969: PUSH
80970: LD_INT 22
80972: PUSH
80973: LD_OWVAR 2
80977: PUSH
80978: EMPTY
80979: LIST
80980: LIST
80981: PUSH
80982: LD_INT 21
80984: PUSH
80985: LD_INT 1
80987: PUSH
80988: EMPTY
80989: LIST
80990: LIST
80991: PUSH
80992: LD_INT 3
80994: PUSH
80995: LD_INT 23
80997: PUSH
80998: LD_INT 0
81000: PUSH
81001: EMPTY
81002: LIST
81003: LIST
81004: PUSH
81005: EMPTY
81006: LIST
81007: LIST
81008: PUSH
81009: EMPTY
81010: LIST
81011: LIST
81012: LIST
81013: PPUSH
81014: CALL_OW 69
81018: PUSH
81019: FOR_IN
81020: IFFALSE 81074
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
81022: LD_VAR 0 1
81026: PPUSH
81027: CALL_OW 257
81031: PUSH
81032: LD_INT 1
81034: PUSH
81035: LD_INT 2
81037: PUSH
81038: LD_INT 3
81040: PUSH
81041: LD_INT 4
81043: PUSH
81044: EMPTY
81045: LIST
81046: LIST
81047: LIST
81048: LIST
81049: IN
81050: IFFALSE 81072
// SetClass ( un , rand ( 1 , 4 ) ) ;
81052: LD_VAR 0 1
81056: PPUSH
81057: LD_INT 1
81059: PPUSH
81060: LD_INT 4
81062: PPUSH
81063: CALL_OW 12
81067: PPUSH
81068: CALL_OW 336
81072: GO 81019
81074: POP
81075: POP
// end ;
81076: PPOPN 1
81078: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
81079: LD_EXP 64
81083: IFFALSE 81091
81085: PUSH
81086: LD_EXP 76
81090: AND
81091: IFFALSE 81170
81093: GO 81095
81095: DISABLE
81096: LD_INT 0
81098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
81099: LD_ADDR_VAR 0 1
81103: PUSH
81104: LD_INT 22
81106: PUSH
81107: LD_OWVAR 2
81111: PUSH
81112: EMPTY
81113: LIST
81114: LIST
81115: PUSH
81116: LD_INT 21
81118: PUSH
81119: LD_INT 3
81121: PUSH
81122: EMPTY
81123: LIST
81124: LIST
81125: PUSH
81126: EMPTY
81127: LIST
81128: LIST
81129: PPUSH
81130: CALL_OW 69
81134: ST_TO_ADDR
// if not tmp then
81135: LD_VAR 0 1
81139: NOT
81140: IFFALSE 81144
// exit ;
81142: GO 81170
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
81144: LD_VAR 0 1
81148: PUSH
81149: LD_INT 1
81151: PPUSH
81152: LD_VAR 0 1
81156: PPUSH
81157: CALL_OW 12
81161: ARRAY
81162: PPUSH
81163: LD_INT 100
81165: PPUSH
81166: CALL_OW 234
// end ;
81170: PPOPN 1
81172: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
81173: LD_EXP 64
81177: IFFALSE 81185
81179: PUSH
81180: LD_EXP 78
81184: AND
81185: IFFALSE 81283
81187: GO 81189
81189: DISABLE
81190: LD_INT 0
81192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81193: LD_ADDR_VAR 0 1
81197: PUSH
81198: LD_INT 22
81200: PUSH
81201: LD_OWVAR 2
81205: PUSH
81206: EMPTY
81207: LIST
81208: LIST
81209: PUSH
81210: LD_INT 21
81212: PUSH
81213: LD_INT 1
81215: PUSH
81216: EMPTY
81217: LIST
81218: LIST
81219: PUSH
81220: EMPTY
81221: LIST
81222: LIST
81223: PPUSH
81224: CALL_OW 69
81228: ST_TO_ADDR
// if not tmp then
81229: LD_VAR 0 1
81233: NOT
81234: IFFALSE 81238
// exit ;
81236: GO 81283
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
81238: LD_VAR 0 1
81242: PUSH
81243: LD_INT 1
81245: PPUSH
81246: LD_VAR 0 1
81250: PPUSH
81251: CALL_OW 12
81255: ARRAY
81256: PPUSH
81257: LD_INT 1
81259: PPUSH
81260: LD_INT 4
81262: PPUSH
81263: CALL_OW 12
81267: PPUSH
81268: LD_INT 3000
81270: PPUSH
81271: LD_INT 9000
81273: PPUSH
81274: CALL_OW 12
81278: PPUSH
81279: CALL_OW 492
// end ;
81283: PPOPN 1
81285: END
// every 0 0$1 trigger StreamModeActive and sDepot do
81286: LD_EXP 64
81290: IFFALSE 81298
81292: PUSH
81293: LD_EXP 79
81297: AND
81298: IFFALSE 81318
81300: GO 81302
81302: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
81303: LD_INT 1
81305: PPUSH
81306: LD_OWVAR 2
81310: PPUSH
81311: LD_INT 0
81313: PPUSH
81314: CALL_OW 324
81318: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
81319: LD_EXP 64
81323: IFFALSE 81331
81325: PUSH
81326: LD_EXP 80
81330: AND
81331: IFFALSE 81414
81333: GO 81335
81335: DISABLE
81336: LD_INT 0
81338: PPUSH
81339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
81340: LD_ADDR_VAR 0 2
81344: PUSH
81345: LD_INT 22
81347: PUSH
81348: LD_OWVAR 2
81352: PUSH
81353: EMPTY
81354: LIST
81355: LIST
81356: PUSH
81357: LD_INT 21
81359: PUSH
81360: LD_INT 3
81362: PUSH
81363: EMPTY
81364: LIST
81365: LIST
81366: PUSH
81367: EMPTY
81368: LIST
81369: LIST
81370: PPUSH
81371: CALL_OW 69
81375: ST_TO_ADDR
// if not tmp then
81376: LD_VAR 0 2
81380: NOT
81381: IFFALSE 81385
// exit ;
81383: GO 81414
// for i in tmp do
81385: LD_ADDR_VAR 0 1
81389: PUSH
81390: LD_VAR 0 2
81394: PUSH
81395: FOR_IN
81396: IFFALSE 81412
// SetBLevel ( i , 10 ) ;
81398: LD_VAR 0 1
81402: PPUSH
81403: LD_INT 10
81405: PPUSH
81406: CALL_OW 241
81410: GO 81395
81412: POP
81413: POP
// end ;
81414: PPOPN 2
81416: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
81417: LD_EXP 64
81421: IFFALSE 81429
81423: PUSH
81424: LD_EXP 81
81428: AND
81429: IFFALSE 81540
81431: GO 81433
81433: DISABLE
81434: LD_INT 0
81436: PPUSH
81437: PPUSH
81438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81439: LD_ADDR_VAR 0 3
81443: PUSH
81444: LD_INT 22
81446: PUSH
81447: LD_OWVAR 2
81451: PUSH
81452: EMPTY
81453: LIST
81454: LIST
81455: PUSH
81456: LD_INT 25
81458: PUSH
81459: LD_INT 1
81461: PUSH
81462: EMPTY
81463: LIST
81464: LIST
81465: PUSH
81466: EMPTY
81467: LIST
81468: LIST
81469: PPUSH
81470: CALL_OW 69
81474: ST_TO_ADDR
// if not tmp then
81475: LD_VAR 0 3
81479: NOT
81480: IFFALSE 81484
// exit ;
81482: GO 81540
// un := tmp [ rand ( 1 , tmp ) ] ;
81484: LD_ADDR_VAR 0 2
81488: PUSH
81489: LD_VAR 0 3
81493: PUSH
81494: LD_INT 1
81496: PPUSH
81497: LD_VAR 0 3
81501: PPUSH
81502: CALL_OW 12
81506: ARRAY
81507: ST_TO_ADDR
// if Crawls ( un ) then
81508: LD_VAR 0 2
81512: PPUSH
81513: CALL_OW 318
81517: IFFALSE 81528
// ComWalk ( un ) ;
81519: LD_VAR 0 2
81523: PPUSH
81524: CALL_OW 138
// SetClass ( un , class_sniper ) ;
81528: LD_VAR 0 2
81532: PPUSH
81533: LD_INT 5
81535: PPUSH
81536: CALL_OW 336
// end ;
81540: PPOPN 3
81542: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
81543: LD_EXP 64
81547: IFFALSE 81555
81549: PUSH
81550: LD_EXP 82
81554: AND
81555: IFFALSE 81567
81557: PUSH
81558: LD_OWVAR 67
81562: PUSH
81563: LD_INT 4
81565: LESS
81566: AND
81567: IFFALSE 81586
81569: GO 81571
81571: DISABLE
// begin Difficulty := Difficulty + 1 ;
81572: LD_ADDR_OWVAR 67
81576: PUSH
81577: LD_OWVAR 67
81581: PUSH
81582: LD_INT 1
81584: PLUS
81585: ST_TO_ADDR
// end ;
81586: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
81587: LD_EXP 64
81591: IFFALSE 81599
81593: PUSH
81594: LD_EXP 83
81598: AND
81599: IFFALSE 81702
81601: GO 81603
81603: DISABLE
81604: LD_INT 0
81606: PPUSH
// begin for i := 1 to 5 do
81607: LD_ADDR_VAR 0 1
81611: PUSH
81612: DOUBLE
81613: LD_INT 1
81615: DEC
81616: ST_TO_ADDR
81617: LD_INT 5
81619: PUSH
81620: FOR_TO
81621: IFFALSE 81700
// begin uc_nation := nation_nature ;
81623: LD_ADDR_OWVAR 21
81627: PUSH
81628: LD_INT 0
81630: ST_TO_ADDR
// uc_side := 0 ;
81631: LD_ADDR_OWVAR 20
81635: PUSH
81636: LD_INT 0
81638: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
81639: LD_ADDR_OWVAR 29
81643: PUSH
81644: LD_INT 12
81646: PUSH
81647: LD_INT 12
81649: PUSH
81650: EMPTY
81651: LIST
81652: LIST
81653: ST_TO_ADDR
// hc_agressivity := 20 ;
81654: LD_ADDR_OWVAR 35
81658: PUSH
81659: LD_INT 20
81661: ST_TO_ADDR
// hc_class := class_tiger ;
81662: LD_ADDR_OWVAR 28
81666: PUSH
81667: LD_INT 14
81669: ST_TO_ADDR
// hc_gallery :=  ;
81670: LD_ADDR_OWVAR 33
81674: PUSH
81675: LD_STRING 
81677: ST_TO_ADDR
// hc_name :=  ;
81678: LD_ADDR_OWVAR 26
81682: PUSH
81683: LD_STRING 
81685: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
81686: CALL_OW 44
81690: PPUSH
81691: LD_INT 0
81693: PPUSH
81694: CALL_OW 51
// end ;
81698: GO 81620
81700: POP
81701: POP
// end ;
81702: PPOPN 1
81704: END
// every 0 0$1 trigger StreamModeActive and sBomb do
81705: LD_EXP 64
81709: IFFALSE 81717
81711: PUSH
81712: LD_EXP 84
81716: AND
81717: IFFALSE 81726
81719: GO 81721
81721: DISABLE
// StreamSibBomb ;
81722: CALL 81727 0 0
81726: END
// export function StreamSibBomb ; var i , x , y ; begin
81727: LD_INT 0
81729: PPUSH
81730: PPUSH
81731: PPUSH
81732: PPUSH
// result := false ;
81733: LD_ADDR_VAR 0 1
81737: PUSH
81738: LD_INT 0
81740: ST_TO_ADDR
// for i := 1 to 16 do
81741: LD_ADDR_VAR 0 2
81745: PUSH
81746: DOUBLE
81747: LD_INT 1
81749: DEC
81750: ST_TO_ADDR
81751: LD_INT 16
81753: PUSH
81754: FOR_TO
81755: IFFALSE 81954
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81757: LD_ADDR_VAR 0 3
81761: PUSH
81762: LD_INT 10
81764: PUSH
81765: LD_INT 20
81767: PUSH
81768: LD_INT 30
81770: PUSH
81771: LD_INT 40
81773: PUSH
81774: LD_INT 50
81776: PUSH
81777: LD_INT 60
81779: PUSH
81780: LD_INT 70
81782: PUSH
81783: LD_INT 80
81785: PUSH
81786: LD_INT 90
81788: PUSH
81789: LD_INT 100
81791: PUSH
81792: LD_INT 110
81794: PUSH
81795: LD_INT 120
81797: PUSH
81798: LD_INT 130
81800: PUSH
81801: LD_INT 140
81803: PUSH
81804: LD_INT 150
81806: PUSH
81807: EMPTY
81808: LIST
81809: LIST
81810: LIST
81811: LIST
81812: LIST
81813: LIST
81814: LIST
81815: LIST
81816: LIST
81817: LIST
81818: LIST
81819: LIST
81820: LIST
81821: LIST
81822: LIST
81823: PUSH
81824: LD_INT 1
81826: PPUSH
81827: LD_INT 15
81829: PPUSH
81830: CALL_OW 12
81834: ARRAY
81835: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81836: LD_ADDR_VAR 0 4
81840: PUSH
81841: LD_INT 10
81843: PUSH
81844: LD_INT 20
81846: PUSH
81847: LD_INT 30
81849: PUSH
81850: LD_INT 40
81852: PUSH
81853: LD_INT 50
81855: PUSH
81856: LD_INT 60
81858: PUSH
81859: LD_INT 70
81861: PUSH
81862: LD_INT 80
81864: PUSH
81865: LD_INT 90
81867: PUSH
81868: LD_INT 100
81870: PUSH
81871: LD_INT 110
81873: PUSH
81874: LD_INT 120
81876: PUSH
81877: LD_INT 130
81879: PUSH
81880: LD_INT 140
81882: PUSH
81883: LD_INT 150
81885: PUSH
81886: EMPTY
81887: LIST
81888: LIST
81889: LIST
81890: LIST
81891: LIST
81892: LIST
81893: LIST
81894: LIST
81895: LIST
81896: LIST
81897: LIST
81898: LIST
81899: LIST
81900: LIST
81901: LIST
81902: PUSH
81903: LD_INT 1
81905: PPUSH
81906: LD_INT 15
81908: PPUSH
81909: CALL_OW 12
81913: ARRAY
81914: ST_TO_ADDR
// if ValidHex ( x , y ) then
81915: LD_VAR 0 3
81919: PPUSH
81920: LD_VAR 0 4
81924: PPUSH
81925: CALL_OW 488
81929: IFFALSE 81952
// begin result := [ x , y ] ;
81931: LD_ADDR_VAR 0 1
81935: PUSH
81936: LD_VAR 0 3
81940: PUSH
81941: LD_VAR 0 4
81945: PUSH
81946: EMPTY
81947: LIST
81948: LIST
81949: ST_TO_ADDR
// break ;
81950: GO 81954
// end ; end ;
81952: GO 81754
81954: POP
81955: POP
// if result then
81956: LD_VAR 0 1
81960: IFFALSE 82020
// begin ToLua ( playSibBomb() ) ;
81962: LD_STRING playSibBomb()
81964: PPUSH
81965: CALL_OW 559
// wait ( 0 0$14 ) ;
81969: LD_INT 490
81971: PPUSH
81972: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
81976: LD_VAR 0 1
81980: PUSH
81981: LD_INT 1
81983: ARRAY
81984: PPUSH
81985: LD_VAR 0 1
81989: PUSH
81990: LD_INT 2
81992: ARRAY
81993: PPUSH
81994: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
81998: LD_VAR 0 1
82002: PUSH
82003: LD_INT 1
82005: ARRAY
82006: PPUSH
82007: LD_VAR 0 1
82011: PUSH
82012: LD_INT 2
82014: ARRAY
82015: PPUSH
82016: CALL_OW 429
// end ; end ;
82020: LD_VAR 0 1
82024: RET
// every 0 0$1 trigger StreamModeActive and sReset do
82025: LD_EXP 64
82029: IFFALSE 82037
82031: PUSH
82032: LD_EXP 86
82036: AND
82037: IFFALSE 82049
82039: GO 82041
82041: DISABLE
// YouLost (  ) ;
82042: LD_STRING 
82044: PPUSH
82045: CALL_OW 104
82049: END
// every 0 0$1 trigger StreamModeActive and sFog do
82050: LD_EXP 64
82054: IFFALSE 82062
82056: PUSH
82057: LD_EXP 85
82061: AND
82062: IFFALSE 82076
82064: GO 82066
82066: DISABLE
// FogOff ( your_side ) ;
82067: LD_OWVAR 2
82071: PPUSH
82072: CALL_OW 344
82076: END
// every 0 0$1 trigger StreamModeActive and sSun do
82077: LD_EXP 64
82081: IFFALSE 82089
82083: PUSH
82084: LD_EXP 87
82088: AND
82089: IFFALSE 82117
82091: GO 82093
82093: DISABLE
// begin solar_recharge_percent := 0 ;
82094: LD_ADDR_OWVAR 79
82098: PUSH
82099: LD_INT 0
82101: ST_TO_ADDR
// wait ( 5 5$00 ) ;
82102: LD_INT 10500
82104: PPUSH
82105: CALL_OW 67
// solar_recharge_percent := 100 ;
82109: LD_ADDR_OWVAR 79
82113: PUSH
82114: LD_INT 100
82116: ST_TO_ADDR
// end ;
82117: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
82118: LD_EXP 64
82122: IFFALSE 82130
82124: PUSH
82125: LD_EXP 88
82129: AND
82130: IFFALSE 82369
82132: GO 82134
82134: DISABLE
82135: LD_INT 0
82137: PPUSH
82138: PPUSH
82139: PPUSH
// begin tmp := [ ] ;
82140: LD_ADDR_VAR 0 3
82144: PUSH
82145: EMPTY
82146: ST_TO_ADDR
// for i := 1 to 6 do
82147: LD_ADDR_VAR 0 1
82151: PUSH
82152: DOUBLE
82153: LD_INT 1
82155: DEC
82156: ST_TO_ADDR
82157: LD_INT 6
82159: PUSH
82160: FOR_TO
82161: IFFALSE 82266
// begin uc_nation := nation_nature ;
82163: LD_ADDR_OWVAR 21
82167: PUSH
82168: LD_INT 0
82170: ST_TO_ADDR
// uc_side := 0 ;
82171: LD_ADDR_OWVAR 20
82175: PUSH
82176: LD_INT 0
82178: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
82179: LD_ADDR_OWVAR 29
82183: PUSH
82184: LD_INT 12
82186: PUSH
82187: LD_INT 12
82189: PUSH
82190: EMPTY
82191: LIST
82192: LIST
82193: ST_TO_ADDR
// hc_agressivity := 20 ;
82194: LD_ADDR_OWVAR 35
82198: PUSH
82199: LD_INT 20
82201: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
82202: LD_ADDR_OWVAR 28
82206: PUSH
82207: LD_INT 17
82209: ST_TO_ADDR
// hc_gallery :=  ;
82210: LD_ADDR_OWVAR 33
82214: PUSH
82215: LD_STRING 
82217: ST_TO_ADDR
// hc_name :=  ;
82218: LD_ADDR_OWVAR 26
82222: PUSH
82223: LD_STRING 
82225: ST_TO_ADDR
// un := CreateHuman ;
82226: LD_ADDR_VAR 0 2
82230: PUSH
82231: CALL_OW 44
82235: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
82236: LD_VAR 0 2
82240: PPUSH
82241: LD_INT 1
82243: PPUSH
82244: CALL_OW 51
// tmp := tmp ^ un ;
82248: LD_ADDR_VAR 0 3
82252: PUSH
82253: LD_VAR 0 3
82257: PUSH
82258: LD_VAR 0 2
82262: ADD
82263: ST_TO_ADDR
// end ;
82264: GO 82160
82266: POP
82267: POP
// repeat wait ( 0 0$1 ) ;
82268: LD_INT 35
82270: PPUSH
82271: CALL_OW 67
// for un in tmp do
82275: LD_ADDR_VAR 0 2
82279: PUSH
82280: LD_VAR 0 3
82284: PUSH
82285: FOR_IN
82286: IFFALSE 82360
// begin if IsDead ( un ) then
82288: LD_VAR 0 2
82292: PPUSH
82293: CALL_OW 301
82297: IFFALSE 82317
// begin tmp := tmp diff un ;
82299: LD_ADDR_VAR 0 3
82303: PUSH
82304: LD_VAR 0 3
82308: PUSH
82309: LD_VAR 0 2
82313: DIFF
82314: ST_TO_ADDR
// continue ;
82315: GO 82285
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
82317: LD_VAR 0 2
82321: PPUSH
82322: LD_INT 3
82324: PUSH
82325: LD_INT 22
82327: PUSH
82328: LD_INT 0
82330: PUSH
82331: EMPTY
82332: LIST
82333: LIST
82334: PUSH
82335: EMPTY
82336: LIST
82337: LIST
82338: PPUSH
82339: CALL_OW 69
82343: PPUSH
82344: LD_VAR 0 2
82348: PPUSH
82349: CALL_OW 74
82353: PPUSH
82354: CALL_OW 115
// end ;
82358: GO 82285
82360: POP
82361: POP
// until not tmp ;
82362: LD_VAR 0 3
82366: NOT
82367: IFFALSE 82268
// end ;
82369: PPOPN 3
82371: END
// every 0 0$1 trigger StreamModeActive and sTroll do
82372: LD_EXP 64
82376: IFFALSE 82384
82378: PUSH
82379: LD_EXP 89
82383: AND
82384: IFFALSE 82438
82386: GO 82388
82388: DISABLE
// begin ToLua ( displayTroll(); ) ;
82389: LD_STRING displayTroll();
82391: PPUSH
82392: CALL_OW 559
// wait ( 3 3$00 ) ;
82396: LD_INT 6300
82398: PPUSH
82399: CALL_OW 67
// ToLua ( hideTroll(); ) ;
82403: LD_STRING hideTroll();
82405: PPUSH
82406: CALL_OW 559
// wait ( 1 1$00 ) ;
82410: LD_INT 2100
82412: PPUSH
82413: CALL_OW 67
// ToLua ( displayTroll(); ) ;
82417: LD_STRING displayTroll();
82419: PPUSH
82420: CALL_OW 559
// wait ( 1 1$00 ) ;
82424: LD_INT 2100
82426: PPUSH
82427: CALL_OW 67
// ToLua ( hideTroll(); ) ;
82431: LD_STRING hideTroll();
82433: PPUSH
82434: CALL_OW 559
// end ;
82438: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
82439: LD_EXP 64
82443: IFFALSE 82451
82445: PUSH
82446: LD_EXP 90
82450: AND
82451: IFFALSE 82514
82453: GO 82455
82455: DISABLE
82456: LD_INT 0
82458: PPUSH
// begin p := 0 ;
82459: LD_ADDR_VAR 0 1
82463: PUSH
82464: LD_INT 0
82466: ST_TO_ADDR
// repeat game_speed := 1 ;
82467: LD_ADDR_OWVAR 65
82471: PUSH
82472: LD_INT 1
82474: ST_TO_ADDR
// wait ( 0 0$1 ) ;
82475: LD_INT 35
82477: PPUSH
82478: CALL_OW 67
// p := p + 1 ;
82482: LD_ADDR_VAR 0 1
82486: PUSH
82487: LD_VAR 0 1
82491: PUSH
82492: LD_INT 1
82494: PLUS
82495: ST_TO_ADDR
// until p >= 60 ;
82496: LD_VAR 0 1
82500: PUSH
82501: LD_INT 60
82503: GREATEREQUAL
82504: IFFALSE 82467
// game_speed := 4 ;
82506: LD_ADDR_OWVAR 65
82510: PUSH
82511: LD_INT 4
82513: ST_TO_ADDR
// end ;
82514: PPOPN 1
82516: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
82517: LD_EXP 64
82521: IFFALSE 82529
82523: PUSH
82524: LD_EXP 91
82528: AND
82529: IFFALSE 82675
82531: GO 82533
82533: DISABLE
82534: LD_INT 0
82536: PPUSH
82537: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82538: LD_ADDR_VAR 0 1
82542: PUSH
82543: LD_INT 22
82545: PUSH
82546: LD_OWVAR 2
82550: PUSH
82551: EMPTY
82552: LIST
82553: LIST
82554: PUSH
82555: LD_INT 2
82557: PUSH
82558: LD_INT 30
82560: PUSH
82561: LD_INT 0
82563: PUSH
82564: EMPTY
82565: LIST
82566: LIST
82567: PUSH
82568: LD_INT 30
82570: PUSH
82571: LD_INT 1
82573: PUSH
82574: EMPTY
82575: LIST
82576: LIST
82577: PUSH
82578: EMPTY
82579: LIST
82580: LIST
82581: LIST
82582: PUSH
82583: EMPTY
82584: LIST
82585: LIST
82586: PPUSH
82587: CALL_OW 69
82591: ST_TO_ADDR
// if not depot then
82592: LD_VAR 0 1
82596: NOT
82597: IFFALSE 82601
// exit ;
82599: GO 82675
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
82601: LD_ADDR_VAR 0 2
82605: PUSH
82606: LD_VAR 0 1
82610: PUSH
82611: LD_INT 1
82613: PPUSH
82614: LD_VAR 0 1
82618: PPUSH
82619: CALL_OW 12
82623: ARRAY
82624: PPUSH
82625: CALL_OW 274
82629: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
82630: LD_VAR 0 2
82634: PPUSH
82635: LD_INT 1
82637: PPUSH
82638: LD_INT 0
82640: PPUSH
82641: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
82645: LD_VAR 0 2
82649: PPUSH
82650: LD_INT 2
82652: PPUSH
82653: LD_INT 0
82655: PPUSH
82656: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
82660: LD_VAR 0 2
82664: PPUSH
82665: LD_INT 3
82667: PPUSH
82668: LD_INT 0
82670: PPUSH
82671: CALL_OW 277
// end ;
82675: PPOPN 2
82677: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
82678: LD_EXP 64
82682: IFFALSE 82690
82684: PUSH
82685: LD_EXP 92
82689: AND
82690: IFFALSE 82787
82692: GO 82694
82694: DISABLE
82695: LD_INT 0
82697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82698: LD_ADDR_VAR 0 1
82702: PUSH
82703: LD_INT 22
82705: PUSH
82706: LD_OWVAR 2
82710: PUSH
82711: EMPTY
82712: LIST
82713: LIST
82714: PUSH
82715: LD_INT 21
82717: PUSH
82718: LD_INT 1
82720: PUSH
82721: EMPTY
82722: LIST
82723: LIST
82724: PUSH
82725: LD_INT 3
82727: PUSH
82728: LD_INT 23
82730: PUSH
82731: LD_INT 0
82733: PUSH
82734: EMPTY
82735: LIST
82736: LIST
82737: PUSH
82738: EMPTY
82739: LIST
82740: LIST
82741: PUSH
82742: EMPTY
82743: LIST
82744: LIST
82745: LIST
82746: PPUSH
82747: CALL_OW 69
82751: ST_TO_ADDR
// if not tmp then
82752: LD_VAR 0 1
82756: NOT
82757: IFFALSE 82761
// exit ;
82759: GO 82787
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
82761: LD_VAR 0 1
82765: PUSH
82766: LD_INT 1
82768: PPUSH
82769: LD_VAR 0 1
82773: PPUSH
82774: CALL_OW 12
82778: ARRAY
82779: PPUSH
82780: LD_INT 200
82782: PPUSH
82783: CALL_OW 234
// end ;
82787: PPOPN 1
82789: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
82790: LD_EXP 64
82794: IFFALSE 82802
82796: PUSH
82797: LD_EXP 93
82801: AND
82802: IFFALSE 82881
82804: GO 82806
82806: DISABLE
82807: LD_INT 0
82809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
82810: LD_ADDR_VAR 0 1
82814: PUSH
82815: LD_INT 22
82817: PUSH
82818: LD_OWVAR 2
82822: PUSH
82823: EMPTY
82824: LIST
82825: LIST
82826: PUSH
82827: LD_INT 21
82829: PUSH
82830: LD_INT 2
82832: PUSH
82833: EMPTY
82834: LIST
82835: LIST
82836: PUSH
82837: EMPTY
82838: LIST
82839: LIST
82840: PPUSH
82841: CALL_OW 69
82845: ST_TO_ADDR
// if not tmp then
82846: LD_VAR 0 1
82850: NOT
82851: IFFALSE 82855
// exit ;
82853: GO 82881
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
82855: LD_VAR 0 1
82859: PUSH
82860: LD_INT 1
82862: PPUSH
82863: LD_VAR 0 1
82867: PPUSH
82868: CALL_OW 12
82872: ARRAY
82873: PPUSH
82874: LD_INT 60
82876: PPUSH
82877: CALL_OW 234
// end ;
82881: PPOPN 1
82883: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
82884: LD_EXP 64
82888: IFFALSE 82896
82890: PUSH
82891: LD_EXP 94
82895: AND
82896: IFFALSE 82995
82898: GO 82900
82900: DISABLE
82901: LD_INT 0
82903: PPUSH
82904: PPUSH
// begin enable ;
82905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
82906: LD_ADDR_VAR 0 1
82910: PUSH
82911: LD_INT 22
82913: PUSH
82914: LD_OWVAR 2
82918: PUSH
82919: EMPTY
82920: LIST
82921: LIST
82922: PUSH
82923: LD_INT 61
82925: PUSH
82926: EMPTY
82927: LIST
82928: PUSH
82929: LD_INT 33
82931: PUSH
82932: LD_INT 2
82934: PUSH
82935: EMPTY
82936: LIST
82937: LIST
82938: PUSH
82939: EMPTY
82940: LIST
82941: LIST
82942: LIST
82943: PPUSH
82944: CALL_OW 69
82948: ST_TO_ADDR
// if not tmp then
82949: LD_VAR 0 1
82953: NOT
82954: IFFALSE 82958
// exit ;
82956: GO 82995
// for i in tmp do
82958: LD_ADDR_VAR 0 2
82962: PUSH
82963: LD_VAR 0 1
82967: PUSH
82968: FOR_IN
82969: IFFALSE 82993
// if IsControledBy ( i ) then
82971: LD_VAR 0 2
82975: PPUSH
82976: CALL_OW 312
82980: IFFALSE 82991
// ComUnlink ( i ) ;
82982: LD_VAR 0 2
82986: PPUSH
82987: CALL_OW 136
82991: GO 82968
82993: POP
82994: POP
// end ;
82995: PPOPN 2
82997: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
82998: LD_EXP 64
83002: IFFALSE 83010
83004: PUSH
83005: LD_EXP 95
83009: AND
83010: IFFALSE 83150
83012: GO 83014
83014: DISABLE
83015: LD_INT 0
83017: PPUSH
83018: PPUSH
// begin ToLua ( displayPowell(); ) ;
83019: LD_STRING displayPowell();
83021: PPUSH
83022: CALL_OW 559
// uc_side := 0 ;
83026: LD_ADDR_OWVAR 20
83030: PUSH
83031: LD_INT 0
83033: ST_TO_ADDR
// uc_nation := 2 ;
83034: LD_ADDR_OWVAR 21
83038: PUSH
83039: LD_INT 2
83041: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
83042: LD_ADDR_OWVAR 37
83046: PUSH
83047: LD_INT 14
83049: ST_TO_ADDR
// vc_engine := engine_siberite ;
83050: LD_ADDR_OWVAR 39
83054: PUSH
83055: LD_INT 3
83057: ST_TO_ADDR
// vc_control := control_apeman ;
83058: LD_ADDR_OWVAR 38
83062: PUSH
83063: LD_INT 5
83065: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
83066: LD_ADDR_OWVAR 40
83070: PUSH
83071: LD_INT 29
83073: ST_TO_ADDR
// un := CreateVehicle ;
83074: LD_ADDR_VAR 0 2
83078: PUSH
83079: CALL_OW 45
83083: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83084: LD_VAR 0 2
83088: PPUSH
83089: LD_INT 1
83091: PPUSH
83092: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
83096: LD_INT 35
83098: PPUSH
83099: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
83103: LD_VAR 0 2
83107: PPUSH
83108: LD_INT 22
83110: PUSH
83111: LD_OWVAR 2
83115: PUSH
83116: EMPTY
83117: LIST
83118: LIST
83119: PPUSH
83120: CALL_OW 69
83124: PPUSH
83125: LD_VAR 0 2
83129: PPUSH
83130: CALL_OW 74
83134: PPUSH
83135: CALL_OW 115
// until IsDead ( un ) ;
83139: LD_VAR 0 2
83143: PPUSH
83144: CALL_OW 301
83148: IFFALSE 83096
// end ;
83150: PPOPN 2
83152: END
// every 0 0$1 trigger StreamModeActive and sStu do
83153: LD_EXP 64
83157: IFFALSE 83165
83159: PUSH
83160: LD_EXP 103
83164: AND
83165: IFFALSE 83181
83167: GO 83169
83169: DISABLE
// begin ToLua ( displayStucuk(); ) ;
83170: LD_STRING displayStucuk();
83172: PPUSH
83173: CALL_OW 559
// ResetFog ;
83177: CALL_OW 335
// end ;
83181: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
83182: LD_EXP 64
83186: IFFALSE 83194
83188: PUSH
83189: LD_EXP 96
83193: AND
83194: IFFALSE 83335
83196: GO 83198
83198: DISABLE
83199: LD_INT 0
83201: PPUSH
83202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
83203: LD_ADDR_VAR 0 2
83207: PUSH
83208: LD_INT 22
83210: PUSH
83211: LD_OWVAR 2
83215: PUSH
83216: EMPTY
83217: LIST
83218: LIST
83219: PUSH
83220: LD_INT 21
83222: PUSH
83223: LD_INT 1
83225: PUSH
83226: EMPTY
83227: LIST
83228: LIST
83229: PUSH
83230: EMPTY
83231: LIST
83232: LIST
83233: PPUSH
83234: CALL_OW 69
83238: ST_TO_ADDR
// if not tmp then
83239: LD_VAR 0 2
83243: NOT
83244: IFFALSE 83248
// exit ;
83246: GO 83335
// un := tmp [ rand ( 1 , tmp ) ] ;
83248: LD_ADDR_VAR 0 1
83252: PUSH
83253: LD_VAR 0 2
83257: PUSH
83258: LD_INT 1
83260: PPUSH
83261: LD_VAR 0 2
83265: PPUSH
83266: CALL_OW 12
83270: ARRAY
83271: ST_TO_ADDR
// SetSide ( un , 0 ) ;
83272: LD_VAR 0 1
83276: PPUSH
83277: LD_INT 0
83279: PPUSH
83280: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
83284: LD_VAR 0 1
83288: PPUSH
83289: LD_OWVAR 3
83293: PUSH
83294: LD_VAR 0 1
83298: DIFF
83299: PPUSH
83300: LD_VAR 0 1
83304: PPUSH
83305: CALL_OW 74
83309: PPUSH
83310: CALL_OW 115
// wait ( 0 0$20 ) ;
83314: LD_INT 700
83316: PPUSH
83317: CALL_OW 67
// SetSide ( un , your_side ) ;
83321: LD_VAR 0 1
83325: PPUSH
83326: LD_OWVAR 2
83330: PPUSH
83331: CALL_OW 235
// end ;
83335: PPOPN 2
83337: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
83338: LD_EXP 64
83342: IFFALSE 83350
83344: PUSH
83345: LD_EXP 97
83349: AND
83350: IFFALSE 83456
83352: GO 83354
83354: DISABLE
83355: LD_INT 0
83357: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83358: LD_ADDR_VAR 0 1
83362: PUSH
83363: LD_INT 22
83365: PUSH
83366: LD_OWVAR 2
83370: PUSH
83371: EMPTY
83372: LIST
83373: LIST
83374: PUSH
83375: LD_INT 2
83377: PUSH
83378: LD_INT 30
83380: PUSH
83381: LD_INT 0
83383: PUSH
83384: EMPTY
83385: LIST
83386: LIST
83387: PUSH
83388: LD_INT 30
83390: PUSH
83391: LD_INT 1
83393: PUSH
83394: EMPTY
83395: LIST
83396: LIST
83397: PUSH
83398: EMPTY
83399: LIST
83400: LIST
83401: LIST
83402: PUSH
83403: EMPTY
83404: LIST
83405: LIST
83406: PPUSH
83407: CALL_OW 69
83411: ST_TO_ADDR
// if not depot then
83412: LD_VAR 0 1
83416: NOT
83417: IFFALSE 83421
// exit ;
83419: GO 83456
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
83421: LD_VAR 0 1
83425: PUSH
83426: LD_INT 1
83428: ARRAY
83429: PPUSH
83430: CALL_OW 250
83434: PPUSH
83435: LD_VAR 0 1
83439: PUSH
83440: LD_INT 1
83442: ARRAY
83443: PPUSH
83444: CALL_OW 251
83448: PPUSH
83449: LD_INT 70
83451: PPUSH
83452: CALL_OW 495
// end ;
83456: PPOPN 1
83458: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
83459: LD_EXP 64
83463: IFFALSE 83471
83465: PUSH
83466: LD_EXP 98
83470: AND
83471: IFFALSE 83682
83473: GO 83475
83475: DISABLE
83476: LD_INT 0
83478: PPUSH
83479: PPUSH
83480: PPUSH
83481: PPUSH
83482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
83483: LD_ADDR_VAR 0 5
83487: PUSH
83488: LD_INT 22
83490: PUSH
83491: LD_OWVAR 2
83495: PUSH
83496: EMPTY
83497: LIST
83498: LIST
83499: PUSH
83500: LD_INT 21
83502: PUSH
83503: LD_INT 1
83505: PUSH
83506: EMPTY
83507: LIST
83508: LIST
83509: PUSH
83510: EMPTY
83511: LIST
83512: LIST
83513: PPUSH
83514: CALL_OW 69
83518: ST_TO_ADDR
// if not tmp then
83519: LD_VAR 0 5
83523: NOT
83524: IFFALSE 83528
// exit ;
83526: GO 83682
// for i in tmp do
83528: LD_ADDR_VAR 0 1
83532: PUSH
83533: LD_VAR 0 5
83537: PUSH
83538: FOR_IN
83539: IFFALSE 83680
// begin d := rand ( 0 , 5 ) ;
83541: LD_ADDR_VAR 0 4
83545: PUSH
83546: LD_INT 0
83548: PPUSH
83549: LD_INT 5
83551: PPUSH
83552: CALL_OW 12
83556: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
83557: LD_ADDR_VAR 0 2
83561: PUSH
83562: LD_VAR 0 1
83566: PPUSH
83567: CALL_OW 250
83571: PPUSH
83572: LD_VAR 0 4
83576: PPUSH
83577: LD_INT 3
83579: PPUSH
83580: LD_INT 12
83582: PPUSH
83583: CALL_OW 12
83587: PPUSH
83588: CALL_OW 272
83592: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
83593: LD_ADDR_VAR 0 3
83597: PUSH
83598: LD_VAR 0 1
83602: PPUSH
83603: CALL_OW 251
83607: PPUSH
83608: LD_VAR 0 4
83612: PPUSH
83613: LD_INT 3
83615: PPUSH
83616: LD_INT 12
83618: PPUSH
83619: CALL_OW 12
83623: PPUSH
83624: CALL_OW 273
83628: ST_TO_ADDR
// if ValidHex ( x , y ) then
83629: LD_VAR 0 2
83633: PPUSH
83634: LD_VAR 0 3
83638: PPUSH
83639: CALL_OW 488
83643: IFFALSE 83678
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
83645: LD_VAR 0 1
83649: PPUSH
83650: LD_VAR 0 2
83654: PPUSH
83655: LD_VAR 0 3
83659: PPUSH
83660: LD_INT 3
83662: PPUSH
83663: LD_INT 6
83665: PPUSH
83666: CALL_OW 12
83670: PPUSH
83671: LD_INT 1
83673: PPUSH
83674: CALL_OW 483
// end ;
83678: GO 83538
83680: POP
83681: POP
// end ;
83682: PPOPN 5
83684: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
83685: LD_EXP 64
83689: IFFALSE 83697
83691: PUSH
83692: LD_EXP 99
83696: AND
83697: IFFALSE 83791
83699: GO 83701
83701: DISABLE
83702: LD_INT 0
83704: PPUSH
83705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
83706: LD_ADDR_VAR 0 2
83710: PUSH
83711: LD_INT 22
83713: PUSH
83714: LD_OWVAR 2
83718: PUSH
83719: EMPTY
83720: LIST
83721: LIST
83722: PUSH
83723: LD_INT 32
83725: PUSH
83726: LD_INT 1
83728: PUSH
83729: EMPTY
83730: LIST
83731: LIST
83732: PUSH
83733: LD_INT 21
83735: PUSH
83736: LD_INT 2
83738: PUSH
83739: EMPTY
83740: LIST
83741: LIST
83742: PUSH
83743: EMPTY
83744: LIST
83745: LIST
83746: LIST
83747: PPUSH
83748: CALL_OW 69
83752: ST_TO_ADDR
// if not tmp then
83753: LD_VAR 0 2
83757: NOT
83758: IFFALSE 83762
// exit ;
83760: GO 83791
// for i in tmp do
83762: LD_ADDR_VAR 0 1
83766: PUSH
83767: LD_VAR 0 2
83771: PUSH
83772: FOR_IN
83773: IFFALSE 83789
// SetFuel ( i , 0 ) ;
83775: LD_VAR 0 1
83779: PPUSH
83780: LD_INT 0
83782: PPUSH
83783: CALL_OW 240
83787: GO 83772
83789: POP
83790: POP
// end ;
83791: PPOPN 2
83793: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
83794: LD_EXP 64
83798: IFFALSE 83806
83800: PUSH
83801: LD_EXP 100
83805: AND
83806: IFFALSE 83872
83808: GO 83810
83810: DISABLE
83811: LD_INT 0
83813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83814: LD_ADDR_VAR 0 1
83818: PUSH
83819: LD_INT 22
83821: PUSH
83822: LD_OWVAR 2
83826: PUSH
83827: EMPTY
83828: LIST
83829: LIST
83830: PUSH
83831: LD_INT 30
83833: PUSH
83834: LD_INT 29
83836: PUSH
83837: EMPTY
83838: LIST
83839: LIST
83840: PUSH
83841: EMPTY
83842: LIST
83843: LIST
83844: PPUSH
83845: CALL_OW 69
83849: ST_TO_ADDR
// if not tmp then
83850: LD_VAR 0 1
83854: NOT
83855: IFFALSE 83859
// exit ;
83857: GO 83872
// DestroyUnit ( tmp [ 1 ] ) ;
83859: LD_VAR 0 1
83863: PUSH
83864: LD_INT 1
83866: ARRAY
83867: PPUSH
83868: CALL_OW 65
// end ;
83872: PPOPN 1
83874: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
83875: LD_EXP 64
83879: IFFALSE 83887
83881: PUSH
83882: LD_EXP 102
83886: AND
83887: IFFALSE 84016
83889: GO 83891
83891: DISABLE
83892: LD_INT 0
83894: PPUSH
// begin uc_side := 0 ;
83895: LD_ADDR_OWVAR 20
83899: PUSH
83900: LD_INT 0
83902: ST_TO_ADDR
// uc_nation := nation_arabian ;
83903: LD_ADDR_OWVAR 21
83907: PUSH
83908: LD_INT 2
83910: ST_TO_ADDR
// hc_gallery :=  ;
83911: LD_ADDR_OWVAR 33
83915: PUSH
83916: LD_STRING 
83918: ST_TO_ADDR
// hc_name :=  ;
83919: LD_ADDR_OWVAR 26
83923: PUSH
83924: LD_STRING 
83926: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
83927: LD_INT 1
83929: PPUSH
83930: LD_INT 11
83932: PPUSH
83933: LD_INT 10
83935: PPUSH
83936: CALL_OW 380
// un := CreateHuman ;
83940: LD_ADDR_VAR 0 1
83944: PUSH
83945: CALL_OW 44
83949: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83950: LD_VAR 0 1
83954: PPUSH
83955: LD_INT 1
83957: PPUSH
83958: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
83962: LD_INT 35
83964: PPUSH
83965: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
83969: LD_VAR 0 1
83973: PPUSH
83974: LD_INT 22
83976: PUSH
83977: LD_OWVAR 2
83981: PUSH
83982: EMPTY
83983: LIST
83984: LIST
83985: PPUSH
83986: CALL_OW 69
83990: PPUSH
83991: LD_VAR 0 1
83995: PPUSH
83996: CALL_OW 74
84000: PPUSH
84001: CALL_OW 115
// until IsDead ( un ) ;
84005: LD_VAR 0 1
84009: PPUSH
84010: CALL_OW 301
84014: IFFALSE 83962
// end ;
84016: PPOPN 1
84018: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
84019: LD_EXP 64
84023: IFFALSE 84031
84025: PUSH
84026: LD_EXP 104
84030: AND
84031: IFFALSE 84043
84033: GO 84035
84035: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
84036: LD_STRING earthquake(getX(game), 0, 32)
84038: PPUSH
84039: CALL_OW 559
84043: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
84044: LD_EXP 64
84048: IFFALSE 84056
84050: PUSH
84051: LD_EXP 105
84055: AND
84056: IFFALSE 84147
84058: GO 84060
84060: DISABLE
84061: LD_INT 0
84063: PPUSH
// begin enable ;
84064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
84065: LD_ADDR_VAR 0 1
84069: PUSH
84070: LD_INT 22
84072: PUSH
84073: LD_OWVAR 2
84077: PUSH
84078: EMPTY
84079: LIST
84080: LIST
84081: PUSH
84082: LD_INT 21
84084: PUSH
84085: LD_INT 2
84087: PUSH
84088: EMPTY
84089: LIST
84090: LIST
84091: PUSH
84092: LD_INT 33
84094: PUSH
84095: LD_INT 3
84097: PUSH
84098: EMPTY
84099: LIST
84100: LIST
84101: PUSH
84102: EMPTY
84103: LIST
84104: LIST
84105: LIST
84106: PPUSH
84107: CALL_OW 69
84111: ST_TO_ADDR
// if not tmp then
84112: LD_VAR 0 1
84116: NOT
84117: IFFALSE 84121
// exit ;
84119: GO 84147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
84121: LD_VAR 0 1
84125: PUSH
84126: LD_INT 1
84128: PPUSH
84129: LD_VAR 0 1
84133: PPUSH
84134: CALL_OW 12
84138: ARRAY
84139: PPUSH
84140: LD_INT 1
84142: PPUSH
84143: CALL_OW 234
// end ;
84147: PPOPN 1
84149: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
84150: LD_EXP 64
84154: IFFALSE 84162
84156: PUSH
84157: LD_EXP 106
84161: AND
84162: IFFALSE 84303
84164: GO 84166
84166: DISABLE
84167: LD_INT 0
84169: PPUSH
84170: PPUSH
84171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
84172: LD_ADDR_VAR 0 3
84176: PUSH
84177: LD_INT 22
84179: PUSH
84180: LD_OWVAR 2
84184: PUSH
84185: EMPTY
84186: LIST
84187: LIST
84188: PUSH
84189: LD_INT 25
84191: PUSH
84192: LD_INT 1
84194: PUSH
84195: EMPTY
84196: LIST
84197: LIST
84198: PUSH
84199: EMPTY
84200: LIST
84201: LIST
84202: PPUSH
84203: CALL_OW 69
84207: ST_TO_ADDR
// if not tmp then
84208: LD_VAR 0 3
84212: NOT
84213: IFFALSE 84217
// exit ;
84215: GO 84303
// un := tmp [ rand ( 1 , tmp ) ] ;
84217: LD_ADDR_VAR 0 2
84221: PUSH
84222: LD_VAR 0 3
84226: PUSH
84227: LD_INT 1
84229: PPUSH
84230: LD_VAR 0 3
84234: PPUSH
84235: CALL_OW 12
84239: ARRAY
84240: ST_TO_ADDR
// if Crawls ( un ) then
84241: LD_VAR 0 2
84245: PPUSH
84246: CALL_OW 318
84250: IFFALSE 84261
// ComWalk ( un ) ;
84252: LD_VAR 0 2
84256: PPUSH
84257: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
84261: LD_VAR 0 2
84265: PPUSH
84266: LD_INT 9
84268: PPUSH
84269: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
84273: LD_INT 28
84275: PPUSH
84276: LD_OWVAR 2
84280: PPUSH
84281: LD_INT 2
84283: PPUSH
84284: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
84288: LD_INT 29
84290: PPUSH
84291: LD_OWVAR 2
84295: PPUSH
84296: LD_INT 2
84298: PPUSH
84299: CALL_OW 322
// end ;
84303: PPOPN 3
84305: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
84306: LD_EXP 64
84310: IFFALSE 84318
84312: PUSH
84313: LD_EXP 107
84317: AND
84318: IFFALSE 84429
84320: GO 84322
84322: DISABLE
84323: LD_INT 0
84325: PPUSH
84326: PPUSH
84327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
84328: LD_ADDR_VAR 0 3
84332: PUSH
84333: LD_INT 22
84335: PUSH
84336: LD_OWVAR 2
84340: PUSH
84341: EMPTY
84342: LIST
84343: LIST
84344: PUSH
84345: LD_INT 25
84347: PUSH
84348: LD_INT 1
84350: PUSH
84351: EMPTY
84352: LIST
84353: LIST
84354: PUSH
84355: EMPTY
84356: LIST
84357: LIST
84358: PPUSH
84359: CALL_OW 69
84363: ST_TO_ADDR
// if not tmp then
84364: LD_VAR 0 3
84368: NOT
84369: IFFALSE 84373
// exit ;
84371: GO 84429
// un := tmp [ rand ( 1 , tmp ) ] ;
84373: LD_ADDR_VAR 0 2
84377: PUSH
84378: LD_VAR 0 3
84382: PUSH
84383: LD_INT 1
84385: PPUSH
84386: LD_VAR 0 3
84390: PPUSH
84391: CALL_OW 12
84395: ARRAY
84396: ST_TO_ADDR
// if Crawls ( un ) then
84397: LD_VAR 0 2
84401: PPUSH
84402: CALL_OW 318
84406: IFFALSE 84417
// ComWalk ( un ) ;
84408: LD_VAR 0 2
84412: PPUSH
84413: CALL_OW 138
// SetClass ( un , class_mortar ) ;
84417: LD_VAR 0 2
84421: PPUSH
84422: LD_INT 8
84424: PPUSH
84425: CALL_OW 336
// end ;
84429: PPOPN 3
84431: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
84432: LD_EXP 64
84436: IFFALSE 84444
84438: PUSH
84439: LD_EXP 108
84443: AND
84444: IFFALSE 84588
84446: GO 84448
84448: DISABLE
84449: LD_INT 0
84451: PPUSH
84452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
84453: LD_ADDR_VAR 0 2
84457: PUSH
84458: LD_INT 22
84460: PUSH
84461: LD_OWVAR 2
84465: PUSH
84466: EMPTY
84467: LIST
84468: LIST
84469: PUSH
84470: LD_INT 21
84472: PUSH
84473: LD_INT 2
84475: PUSH
84476: EMPTY
84477: LIST
84478: LIST
84479: PUSH
84480: LD_INT 2
84482: PUSH
84483: LD_INT 34
84485: PUSH
84486: LD_INT 12
84488: PUSH
84489: EMPTY
84490: LIST
84491: LIST
84492: PUSH
84493: LD_INT 34
84495: PUSH
84496: LD_INT 51
84498: PUSH
84499: EMPTY
84500: LIST
84501: LIST
84502: PUSH
84503: LD_INT 34
84505: PUSH
84506: LD_INT 32
84508: PUSH
84509: EMPTY
84510: LIST
84511: LIST
84512: PUSH
84513: EMPTY
84514: LIST
84515: LIST
84516: LIST
84517: LIST
84518: PUSH
84519: EMPTY
84520: LIST
84521: LIST
84522: LIST
84523: PPUSH
84524: CALL_OW 69
84528: ST_TO_ADDR
// if not tmp then
84529: LD_VAR 0 2
84533: NOT
84534: IFFALSE 84538
// exit ;
84536: GO 84588
// for i in tmp do
84538: LD_ADDR_VAR 0 1
84542: PUSH
84543: LD_VAR 0 2
84547: PUSH
84548: FOR_IN
84549: IFFALSE 84586
// if GetCargo ( i , mat_artifact ) = 0 then
84551: LD_VAR 0 1
84555: PPUSH
84556: LD_INT 4
84558: PPUSH
84559: CALL_OW 289
84563: PUSH
84564: LD_INT 0
84566: EQUAL
84567: IFFALSE 84584
// SetCargo ( i , mat_siberit , 100 ) ;
84569: LD_VAR 0 1
84573: PPUSH
84574: LD_INT 3
84576: PPUSH
84577: LD_INT 100
84579: PPUSH
84580: CALL_OW 290
84584: GO 84548
84586: POP
84587: POP
// end ;
84588: PPOPN 2
84590: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
84591: LD_EXP 64
84595: IFFALSE 84603
84597: PUSH
84598: LD_EXP 109
84602: AND
84603: IFFALSE 84786
84605: GO 84607
84607: DISABLE
84608: LD_INT 0
84610: PPUSH
84611: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84612: LD_ADDR_VAR 0 2
84616: PUSH
84617: LD_INT 22
84619: PUSH
84620: LD_OWVAR 2
84624: PUSH
84625: EMPTY
84626: LIST
84627: LIST
84628: PPUSH
84629: CALL_OW 69
84633: ST_TO_ADDR
// if not tmp then
84634: LD_VAR 0 2
84638: NOT
84639: IFFALSE 84643
// exit ;
84641: GO 84786
// for i := 1 to 2 do
84643: LD_ADDR_VAR 0 1
84647: PUSH
84648: DOUBLE
84649: LD_INT 1
84651: DEC
84652: ST_TO_ADDR
84653: LD_INT 2
84655: PUSH
84656: FOR_TO
84657: IFFALSE 84784
// begin uc_side := your_side ;
84659: LD_ADDR_OWVAR 20
84663: PUSH
84664: LD_OWVAR 2
84668: ST_TO_ADDR
// uc_nation := nation_american ;
84669: LD_ADDR_OWVAR 21
84673: PUSH
84674: LD_INT 1
84676: ST_TO_ADDR
// vc_chassis := us_morphling ;
84677: LD_ADDR_OWVAR 37
84681: PUSH
84682: LD_INT 5
84684: ST_TO_ADDR
// vc_engine := engine_siberite ;
84685: LD_ADDR_OWVAR 39
84689: PUSH
84690: LD_INT 3
84692: ST_TO_ADDR
// vc_control := control_computer ;
84693: LD_ADDR_OWVAR 38
84697: PUSH
84698: LD_INT 3
84700: ST_TO_ADDR
// vc_weapon := us_double_laser ;
84701: LD_ADDR_OWVAR 40
84705: PUSH
84706: LD_INT 10
84708: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
84709: LD_VAR 0 2
84713: PUSH
84714: LD_INT 1
84716: ARRAY
84717: PPUSH
84718: CALL_OW 310
84722: NOT
84723: IFFALSE 84770
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
84725: CALL_OW 45
84729: PPUSH
84730: LD_VAR 0 2
84734: PUSH
84735: LD_INT 1
84737: ARRAY
84738: PPUSH
84739: CALL_OW 250
84743: PPUSH
84744: LD_VAR 0 2
84748: PUSH
84749: LD_INT 1
84751: ARRAY
84752: PPUSH
84753: CALL_OW 251
84757: PPUSH
84758: LD_INT 12
84760: PPUSH
84761: LD_INT 1
84763: PPUSH
84764: CALL_OW 50
84768: GO 84782
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
84770: CALL_OW 45
84774: PPUSH
84775: LD_INT 1
84777: PPUSH
84778: CALL_OW 51
// end ;
84782: GO 84656
84784: POP
84785: POP
// end ;
84786: PPOPN 2
84788: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
84789: LD_EXP 64
84793: IFFALSE 84801
84795: PUSH
84796: LD_EXP 110
84800: AND
84801: IFFALSE 85023
84803: GO 84805
84805: DISABLE
84806: LD_INT 0
84808: PPUSH
84809: PPUSH
84810: PPUSH
84811: PPUSH
84812: PPUSH
84813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84814: LD_ADDR_VAR 0 6
84818: PUSH
84819: LD_INT 22
84821: PUSH
84822: LD_OWVAR 2
84826: PUSH
84827: EMPTY
84828: LIST
84829: LIST
84830: PUSH
84831: LD_INT 21
84833: PUSH
84834: LD_INT 1
84836: PUSH
84837: EMPTY
84838: LIST
84839: LIST
84840: PUSH
84841: LD_INT 3
84843: PUSH
84844: LD_INT 23
84846: PUSH
84847: LD_INT 0
84849: PUSH
84850: EMPTY
84851: LIST
84852: LIST
84853: PUSH
84854: EMPTY
84855: LIST
84856: LIST
84857: PUSH
84858: EMPTY
84859: LIST
84860: LIST
84861: LIST
84862: PPUSH
84863: CALL_OW 69
84867: ST_TO_ADDR
// if not tmp then
84868: LD_VAR 0 6
84872: NOT
84873: IFFALSE 84877
// exit ;
84875: GO 85023
// s1 := rand ( 1 , 4 ) ;
84877: LD_ADDR_VAR 0 2
84881: PUSH
84882: LD_INT 1
84884: PPUSH
84885: LD_INT 4
84887: PPUSH
84888: CALL_OW 12
84892: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
84893: LD_ADDR_VAR 0 4
84897: PUSH
84898: LD_VAR 0 6
84902: PUSH
84903: LD_INT 1
84905: ARRAY
84906: PPUSH
84907: LD_VAR 0 2
84911: PPUSH
84912: CALL_OW 259
84916: ST_TO_ADDR
// if s1 = 1 then
84917: LD_VAR 0 2
84921: PUSH
84922: LD_INT 1
84924: EQUAL
84925: IFFALSE 84945
// s2 := rand ( 2 , 4 ) else
84927: LD_ADDR_VAR 0 3
84931: PUSH
84932: LD_INT 2
84934: PPUSH
84935: LD_INT 4
84937: PPUSH
84938: CALL_OW 12
84942: ST_TO_ADDR
84943: GO 84953
// s2 := 1 ;
84945: LD_ADDR_VAR 0 3
84949: PUSH
84950: LD_INT 1
84952: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
84953: LD_ADDR_VAR 0 5
84957: PUSH
84958: LD_VAR 0 6
84962: PUSH
84963: LD_INT 1
84965: ARRAY
84966: PPUSH
84967: LD_VAR 0 3
84971: PPUSH
84972: CALL_OW 259
84976: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
84977: LD_VAR 0 6
84981: PUSH
84982: LD_INT 1
84984: ARRAY
84985: PPUSH
84986: LD_VAR 0 2
84990: PPUSH
84991: LD_VAR 0 5
84995: PPUSH
84996: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
85000: LD_VAR 0 6
85004: PUSH
85005: LD_INT 1
85007: ARRAY
85008: PPUSH
85009: LD_VAR 0 3
85013: PPUSH
85014: LD_VAR 0 4
85018: PPUSH
85019: CALL_OW 237
// end ;
85023: PPOPN 6
85025: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
85026: LD_EXP 64
85030: IFFALSE 85038
85032: PUSH
85033: LD_EXP 111
85037: AND
85038: IFFALSE 85117
85040: GO 85042
85042: DISABLE
85043: LD_INT 0
85045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
85046: LD_ADDR_VAR 0 1
85050: PUSH
85051: LD_INT 22
85053: PUSH
85054: LD_OWVAR 2
85058: PUSH
85059: EMPTY
85060: LIST
85061: LIST
85062: PUSH
85063: LD_INT 30
85065: PUSH
85066: LD_INT 3
85068: PUSH
85069: EMPTY
85070: LIST
85071: LIST
85072: PUSH
85073: EMPTY
85074: LIST
85075: LIST
85076: PPUSH
85077: CALL_OW 69
85081: ST_TO_ADDR
// if not tmp then
85082: LD_VAR 0 1
85086: NOT
85087: IFFALSE 85091
// exit ;
85089: GO 85117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
85091: LD_VAR 0 1
85095: PUSH
85096: LD_INT 1
85098: PPUSH
85099: LD_VAR 0 1
85103: PPUSH
85104: CALL_OW 12
85108: ARRAY
85109: PPUSH
85110: LD_INT 1
85112: PPUSH
85113: CALL_OW 234
// end ;
85117: PPOPN 1
85119: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
85120: LD_EXP 64
85124: IFFALSE 85132
85126: PUSH
85127: LD_EXP 112
85131: AND
85132: IFFALSE 85244
85134: GO 85136
85136: DISABLE
85137: LD_INT 0
85139: PPUSH
85140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
85141: LD_ADDR_VAR 0 2
85145: PUSH
85146: LD_INT 22
85148: PUSH
85149: LD_OWVAR 2
85153: PUSH
85154: EMPTY
85155: LIST
85156: LIST
85157: PUSH
85158: LD_INT 2
85160: PUSH
85161: LD_INT 30
85163: PUSH
85164: LD_INT 27
85166: PUSH
85167: EMPTY
85168: LIST
85169: LIST
85170: PUSH
85171: LD_INT 30
85173: PUSH
85174: LD_INT 26
85176: PUSH
85177: EMPTY
85178: LIST
85179: LIST
85180: PUSH
85181: LD_INT 30
85183: PUSH
85184: LD_INT 28
85186: PUSH
85187: EMPTY
85188: LIST
85189: LIST
85190: PUSH
85191: EMPTY
85192: LIST
85193: LIST
85194: LIST
85195: LIST
85196: PUSH
85197: EMPTY
85198: LIST
85199: LIST
85200: PPUSH
85201: CALL_OW 69
85205: ST_TO_ADDR
// if not tmp then
85206: LD_VAR 0 2
85210: NOT
85211: IFFALSE 85215
// exit ;
85213: GO 85244
// for i in tmp do
85215: LD_ADDR_VAR 0 1
85219: PUSH
85220: LD_VAR 0 2
85224: PUSH
85225: FOR_IN
85226: IFFALSE 85242
// SetLives ( i , 1 ) ;
85228: LD_VAR 0 1
85232: PPUSH
85233: LD_INT 1
85235: PPUSH
85236: CALL_OW 234
85240: GO 85225
85242: POP
85243: POP
// end ;
85244: PPOPN 2
85246: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
85247: LD_EXP 64
85251: IFFALSE 85259
85253: PUSH
85254: LD_EXP 113
85258: AND
85259: IFFALSE 85546
85261: GO 85263
85263: DISABLE
85264: LD_INT 0
85266: PPUSH
85267: PPUSH
85268: PPUSH
// begin i := rand ( 1 , 7 ) ;
85269: LD_ADDR_VAR 0 1
85273: PUSH
85274: LD_INT 1
85276: PPUSH
85277: LD_INT 7
85279: PPUSH
85280: CALL_OW 12
85284: ST_TO_ADDR
// case i of 1 :
85285: LD_VAR 0 1
85289: PUSH
85290: LD_INT 1
85292: DOUBLE
85293: EQUAL
85294: IFTRUE 85298
85296: GO 85308
85298: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
85299: LD_STRING earthquake(getX(game), 0, 32)
85301: PPUSH
85302: CALL_OW 559
85306: GO 85546
85308: LD_INT 2
85310: DOUBLE
85311: EQUAL
85312: IFTRUE 85316
85314: GO 85330
85316: POP
// begin ToLua ( displayStucuk(); ) ;
85317: LD_STRING displayStucuk();
85319: PPUSH
85320: CALL_OW 559
// ResetFog ;
85324: CALL_OW 335
// end ; 3 :
85328: GO 85546
85330: LD_INT 3
85332: DOUBLE
85333: EQUAL
85334: IFTRUE 85338
85336: GO 85442
85338: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
85339: LD_ADDR_VAR 0 2
85343: PUSH
85344: LD_INT 22
85346: PUSH
85347: LD_OWVAR 2
85351: PUSH
85352: EMPTY
85353: LIST
85354: LIST
85355: PUSH
85356: LD_INT 25
85358: PUSH
85359: LD_INT 1
85361: PUSH
85362: EMPTY
85363: LIST
85364: LIST
85365: PUSH
85366: EMPTY
85367: LIST
85368: LIST
85369: PPUSH
85370: CALL_OW 69
85374: ST_TO_ADDR
// if not tmp then
85375: LD_VAR 0 2
85379: NOT
85380: IFFALSE 85384
// exit ;
85382: GO 85546
// un := tmp [ rand ( 1 , tmp ) ] ;
85384: LD_ADDR_VAR 0 3
85388: PUSH
85389: LD_VAR 0 2
85393: PUSH
85394: LD_INT 1
85396: PPUSH
85397: LD_VAR 0 2
85401: PPUSH
85402: CALL_OW 12
85406: ARRAY
85407: ST_TO_ADDR
// if Crawls ( un ) then
85408: LD_VAR 0 3
85412: PPUSH
85413: CALL_OW 318
85417: IFFALSE 85428
// ComWalk ( un ) ;
85419: LD_VAR 0 3
85423: PPUSH
85424: CALL_OW 138
// SetClass ( un , class_mortar ) ;
85428: LD_VAR 0 3
85432: PPUSH
85433: LD_INT 8
85435: PPUSH
85436: CALL_OW 336
// end ; 4 :
85440: GO 85546
85442: LD_INT 4
85444: DOUBLE
85445: EQUAL
85446: IFTRUE 85450
85448: GO 85524
85450: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
85451: LD_ADDR_VAR 0 2
85455: PUSH
85456: LD_INT 22
85458: PUSH
85459: LD_OWVAR 2
85463: PUSH
85464: EMPTY
85465: LIST
85466: LIST
85467: PUSH
85468: LD_INT 30
85470: PUSH
85471: LD_INT 29
85473: PUSH
85474: EMPTY
85475: LIST
85476: LIST
85477: PUSH
85478: EMPTY
85479: LIST
85480: LIST
85481: PPUSH
85482: CALL_OW 69
85486: ST_TO_ADDR
// if not tmp then
85487: LD_VAR 0 2
85491: NOT
85492: IFFALSE 85496
// exit ;
85494: GO 85546
// CenterNowOnUnits ( tmp [ 1 ] ) ;
85496: LD_VAR 0 2
85500: PUSH
85501: LD_INT 1
85503: ARRAY
85504: PPUSH
85505: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
85509: LD_VAR 0 2
85513: PUSH
85514: LD_INT 1
85516: ARRAY
85517: PPUSH
85518: CALL_OW 65
// end ; 5 .. 7 :
85522: GO 85546
85524: LD_INT 5
85526: DOUBLE
85527: GREATEREQUAL
85528: IFFALSE 85536
85530: LD_INT 7
85532: DOUBLE
85533: LESSEQUAL
85534: IFTRUE 85538
85536: GO 85545
85538: POP
// StreamSibBomb ; end ;
85539: CALL 81727 0 0
85543: GO 85546
85545: POP
// end ;
85546: PPOPN 3
85548: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
85549: LD_EXP 64
85553: IFFALSE 85561
85555: PUSH
85556: LD_EXP 114
85560: AND
85561: IFFALSE 85717
85563: GO 85565
85565: DISABLE
85566: LD_INT 0
85568: PPUSH
85569: PPUSH
85570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
85571: LD_ADDR_VAR 0 2
85575: PUSH
85576: LD_INT 81
85578: PUSH
85579: LD_OWVAR 2
85583: PUSH
85584: EMPTY
85585: LIST
85586: LIST
85587: PUSH
85588: LD_INT 2
85590: PUSH
85591: LD_INT 21
85593: PUSH
85594: LD_INT 1
85596: PUSH
85597: EMPTY
85598: LIST
85599: LIST
85600: PUSH
85601: LD_INT 21
85603: PUSH
85604: LD_INT 2
85606: PUSH
85607: EMPTY
85608: LIST
85609: LIST
85610: PUSH
85611: EMPTY
85612: LIST
85613: LIST
85614: LIST
85615: PUSH
85616: EMPTY
85617: LIST
85618: LIST
85619: PPUSH
85620: CALL_OW 69
85624: ST_TO_ADDR
// if not tmp then
85625: LD_VAR 0 2
85629: NOT
85630: IFFALSE 85634
// exit ;
85632: GO 85717
// p := 0 ;
85634: LD_ADDR_VAR 0 3
85638: PUSH
85639: LD_INT 0
85641: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
85642: LD_INT 35
85644: PPUSH
85645: CALL_OW 67
// p := p + 1 ;
85649: LD_ADDR_VAR 0 3
85653: PUSH
85654: LD_VAR 0 3
85658: PUSH
85659: LD_INT 1
85661: PLUS
85662: ST_TO_ADDR
// for i in tmp do
85663: LD_ADDR_VAR 0 1
85667: PUSH
85668: LD_VAR 0 2
85672: PUSH
85673: FOR_IN
85674: IFFALSE 85705
// if GetLives ( i ) < 1000 then
85676: LD_VAR 0 1
85680: PPUSH
85681: CALL_OW 256
85685: PUSH
85686: LD_INT 1000
85688: LESS
85689: IFFALSE 85703
// SetLives ( i , 1000 ) ;
85691: LD_VAR 0 1
85695: PPUSH
85696: LD_INT 1000
85698: PPUSH
85699: CALL_OW 234
85703: GO 85673
85705: POP
85706: POP
// until p > 20 ;
85707: LD_VAR 0 3
85711: PUSH
85712: LD_INT 20
85714: GREATER
85715: IFFALSE 85642
// end ;
85717: PPOPN 3
85719: END
// every 0 0$1 trigger StreamModeActive and sTime do
85720: LD_EXP 64
85724: IFFALSE 85732
85726: PUSH
85727: LD_EXP 115
85731: AND
85732: IFFALSE 85767
85734: GO 85736
85736: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
85737: LD_INT 28
85739: PPUSH
85740: LD_OWVAR 2
85744: PPUSH
85745: LD_INT 2
85747: PPUSH
85748: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
85752: LD_INT 30
85754: PPUSH
85755: LD_OWVAR 2
85759: PPUSH
85760: LD_INT 2
85762: PPUSH
85763: CALL_OW 322
// end ;
85767: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
85768: LD_EXP 64
85772: IFFALSE 85780
85774: PUSH
85775: LD_EXP 116
85779: AND
85780: IFFALSE 85901
85782: GO 85784
85784: DISABLE
85785: LD_INT 0
85787: PPUSH
85788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
85789: LD_ADDR_VAR 0 2
85793: PUSH
85794: LD_INT 22
85796: PUSH
85797: LD_OWVAR 2
85801: PUSH
85802: EMPTY
85803: LIST
85804: LIST
85805: PUSH
85806: LD_INT 21
85808: PUSH
85809: LD_INT 1
85811: PUSH
85812: EMPTY
85813: LIST
85814: LIST
85815: PUSH
85816: LD_INT 3
85818: PUSH
85819: LD_INT 23
85821: PUSH
85822: LD_INT 0
85824: PUSH
85825: EMPTY
85826: LIST
85827: LIST
85828: PUSH
85829: EMPTY
85830: LIST
85831: LIST
85832: PUSH
85833: EMPTY
85834: LIST
85835: LIST
85836: LIST
85837: PPUSH
85838: CALL_OW 69
85842: ST_TO_ADDR
// if not tmp then
85843: LD_VAR 0 2
85847: NOT
85848: IFFALSE 85852
// exit ;
85850: GO 85901
// for i in tmp do
85852: LD_ADDR_VAR 0 1
85856: PUSH
85857: LD_VAR 0 2
85861: PUSH
85862: FOR_IN
85863: IFFALSE 85899
// begin if Crawls ( i ) then
85865: LD_VAR 0 1
85869: PPUSH
85870: CALL_OW 318
85874: IFFALSE 85885
// ComWalk ( i ) ;
85876: LD_VAR 0 1
85880: PPUSH
85881: CALL_OW 138
// SetClass ( i , 2 ) ;
85885: LD_VAR 0 1
85889: PPUSH
85890: LD_INT 2
85892: PPUSH
85893: CALL_OW 336
// end ;
85897: GO 85862
85899: POP
85900: POP
// end ;
85901: PPOPN 2
85903: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
85904: LD_EXP 64
85908: IFFALSE 85916
85910: PUSH
85911: LD_EXP 117
85915: AND
85916: IFFALSE 86206
85918: GO 85920
85920: DISABLE
85921: LD_INT 0
85923: PPUSH
85924: PPUSH
85925: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
85926: LD_OWVAR 2
85930: PPUSH
85931: LD_INT 9
85933: PPUSH
85934: LD_INT 1
85936: PPUSH
85937: LD_INT 1
85939: PPUSH
85940: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
85944: LD_INT 9
85946: PPUSH
85947: LD_OWVAR 2
85951: PPUSH
85952: CALL_OW 343
// uc_side := 9 ;
85956: LD_ADDR_OWVAR 20
85960: PUSH
85961: LD_INT 9
85963: ST_TO_ADDR
// uc_nation := 2 ;
85964: LD_ADDR_OWVAR 21
85968: PUSH
85969: LD_INT 2
85971: ST_TO_ADDR
// hc_name := Dark Warrior ;
85972: LD_ADDR_OWVAR 26
85976: PUSH
85977: LD_STRING Dark Warrior
85979: ST_TO_ADDR
// hc_gallery :=  ;
85980: LD_ADDR_OWVAR 33
85984: PUSH
85985: LD_STRING 
85987: ST_TO_ADDR
// hc_noskilllimit := true ;
85988: LD_ADDR_OWVAR 76
85992: PUSH
85993: LD_INT 1
85995: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
85996: LD_ADDR_OWVAR 31
86000: PUSH
86001: LD_INT 30
86003: PUSH
86004: LD_INT 30
86006: PUSH
86007: LD_INT 30
86009: PUSH
86010: LD_INT 30
86012: PUSH
86013: EMPTY
86014: LIST
86015: LIST
86016: LIST
86017: LIST
86018: ST_TO_ADDR
// un := CreateHuman ;
86019: LD_ADDR_VAR 0 3
86023: PUSH
86024: CALL_OW 44
86028: ST_TO_ADDR
// hc_noskilllimit := false ;
86029: LD_ADDR_OWVAR 76
86033: PUSH
86034: LD_INT 0
86036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
86037: LD_VAR 0 3
86041: PPUSH
86042: LD_INT 1
86044: PPUSH
86045: CALL_OW 51
// ToLua ( playRanger() ) ;
86049: LD_STRING playRanger()
86051: PPUSH
86052: CALL_OW 559
// p := 0 ;
86056: LD_ADDR_VAR 0 2
86060: PUSH
86061: LD_INT 0
86063: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
86064: LD_INT 35
86066: PPUSH
86067: CALL_OW 67
// p := p + 1 ;
86071: LD_ADDR_VAR 0 2
86075: PUSH
86076: LD_VAR 0 2
86080: PUSH
86081: LD_INT 1
86083: PLUS
86084: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
86085: LD_VAR 0 3
86089: PPUSH
86090: CALL_OW 256
86094: PUSH
86095: LD_INT 1000
86097: LESS
86098: IFFALSE 86112
// SetLives ( un , 1000 ) ;
86100: LD_VAR 0 3
86104: PPUSH
86105: LD_INT 1000
86107: PPUSH
86108: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
86112: LD_VAR 0 3
86116: PPUSH
86117: LD_INT 81
86119: PUSH
86120: LD_OWVAR 2
86124: PUSH
86125: EMPTY
86126: LIST
86127: LIST
86128: PUSH
86129: LD_INT 91
86131: PUSH
86132: LD_VAR 0 3
86136: PUSH
86137: LD_INT 30
86139: PUSH
86140: EMPTY
86141: LIST
86142: LIST
86143: LIST
86144: PUSH
86145: EMPTY
86146: LIST
86147: LIST
86148: PPUSH
86149: CALL_OW 69
86153: PPUSH
86154: LD_VAR 0 3
86158: PPUSH
86159: CALL_OW 74
86163: PPUSH
86164: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
86168: LD_VAR 0 2
86172: PUSH
86173: LD_INT 80
86175: GREATER
86176: IFTRUE 86189
86178: PUSH
86179: LD_VAR 0 3
86183: PPUSH
86184: CALL_OW 301
86188: OR
86189: IFFALSE 86064
// if un then
86191: LD_VAR 0 3
86195: IFFALSE 86206
// RemoveUnit ( un ) ;
86197: LD_VAR 0 3
86201: PPUSH
86202: CALL_OW 64
// end ;
86206: PPOPN 3
86208: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
86209: LD_EXP 118
86213: IFFALSE 86329
86215: GO 86217
86217: DISABLE
86218: LD_INT 0
86220: PPUSH
86221: PPUSH
86222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
86223: LD_ADDR_VAR 0 2
86227: PUSH
86228: LD_INT 81
86230: PUSH
86231: LD_OWVAR 2
86235: PUSH
86236: EMPTY
86237: LIST
86238: LIST
86239: PUSH
86240: LD_INT 21
86242: PUSH
86243: LD_INT 1
86245: PUSH
86246: EMPTY
86247: LIST
86248: LIST
86249: PUSH
86250: EMPTY
86251: LIST
86252: LIST
86253: PPUSH
86254: CALL_OW 69
86258: ST_TO_ADDR
// ToLua ( playComputer() ) ;
86259: LD_STRING playComputer()
86261: PPUSH
86262: CALL_OW 559
// if not tmp then
86266: LD_VAR 0 2
86270: NOT
86271: IFFALSE 86275
// exit ;
86273: GO 86329
// for i in tmp do
86275: LD_ADDR_VAR 0 1
86279: PUSH
86280: LD_VAR 0 2
86284: PUSH
86285: FOR_IN
86286: IFFALSE 86327
// for j := 1 to 4 do
86288: LD_ADDR_VAR 0 3
86292: PUSH
86293: DOUBLE
86294: LD_INT 1
86296: DEC
86297: ST_TO_ADDR
86298: LD_INT 4
86300: PUSH
86301: FOR_TO
86302: IFFALSE 86323
// SetSkill ( i , j , 10 ) ;
86304: LD_VAR 0 1
86308: PPUSH
86309: LD_VAR 0 3
86313: PPUSH
86314: LD_INT 10
86316: PPUSH
86317: CALL_OW 237
86321: GO 86301
86323: POP
86324: POP
86325: GO 86285
86327: POP
86328: POP
// end ;
86329: PPOPN 3
86331: END
// every 0 0$1 trigger s30 do var i , tmp ;
86332: LD_EXP 119
86336: IFFALSE 86405
86338: GO 86340
86340: DISABLE
86341: LD_INT 0
86343: PPUSH
86344: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86345: LD_ADDR_VAR 0 2
86349: PUSH
86350: LD_INT 22
86352: PUSH
86353: LD_OWVAR 2
86357: PUSH
86358: EMPTY
86359: LIST
86360: LIST
86361: PPUSH
86362: CALL_OW 69
86366: ST_TO_ADDR
// if not tmp then
86367: LD_VAR 0 2
86371: NOT
86372: IFFALSE 86376
// exit ;
86374: GO 86405
// for i in tmp do
86376: LD_ADDR_VAR 0 1
86380: PUSH
86381: LD_VAR 0 2
86385: PUSH
86386: FOR_IN
86387: IFFALSE 86403
// SetLives ( i , 300 ) ;
86389: LD_VAR 0 1
86393: PPUSH
86394: LD_INT 300
86396: PPUSH
86397: CALL_OW 234
86401: GO 86386
86403: POP
86404: POP
// end ;
86405: PPOPN 2
86407: END
// every 0 0$1 trigger s60 do var i , tmp ;
86408: LD_EXP 120
86412: IFFALSE 86481
86414: GO 86416
86416: DISABLE
86417: LD_INT 0
86419: PPUSH
86420: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86421: LD_ADDR_VAR 0 2
86425: PUSH
86426: LD_INT 22
86428: PUSH
86429: LD_OWVAR 2
86433: PUSH
86434: EMPTY
86435: LIST
86436: LIST
86437: PPUSH
86438: CALL_OW 69
86442: ST_TO_ADDR
// if not tmp then
86443: LD_VAR 0 2
86447: NOT
86448: IFFALSE 86452
// exit ;
86450: GO 86481
// for i in tmp do
86452: LD_ADDR_VAR 0 1
86456: PUSH
86457: LD_VAR 0 2
86461: PUSH
86462: FOR_IN
86463: IFFALSE 86479
// SetLives ( i , 600 ) ;
86465: LD_VAR 0 1
86469: PPUSH
86470: LD_INT 600
86472: PPUSH
86473: CALL_OW 234
86477: GO 86462
86479: POP
86480: POP
// end ;
86481: PPOPN 2
86483: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
86484: LD_INT 0
86486: PPUSH
// case cmd of 301 :
86487: LD_VAR 0 1
86491: PUSH
86492: LD_INT 301
86494: DOUBLE
86495: EQUAL
86496: IFTRUE 86500
86498: GO 86532
86500: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
86501: LD_VAR 0 6
86505: PPUSH
86506: LD_VAR 0 7
86510: PPUSH
86511: LD_VAR 0 8
86515: PPUSH
86516: LD_VAR 0 4
86520: PPUSH
86521: LD_VAR 0 5
86525: PPUSH
86526: CALL 87745 0 5
86530: GO 86653
86532: LD_INT 302
86534: DOUBLE
86535: EQUAL
86536: IFTRUE 86540
86538: GO 86577
86540: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
86541: LD_VAR 0 6
86545: PPUSH
86546: LD_VAR 0 7
86550: PPUSH
86551: LD_VAR 0 8
86555: PPUSH
86556: LD_VAR 0 9
86560: PPUSH
86561: LD_VAR 0 4
86565: PPUSH
86566: LD_VAR 0 5
86570: PPUSH
86571: CALL 87836 0 6
86575: GO 86653
86577: LD_INT 303
86579: DOUBLE
86580: EQUAL
86581: IFTRUE 86585
86583: GO 86622
86585: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
86586: LD_VAR 0 6
86590: PPUSH
86591: LD_VAR 0 7
86595: PPUSH
86596: LD_VAR 0 8
86600: PPUSH
86601: LD_VAR 0 9
86605: PPUSH
86606: LD_VAR 0 4
86610: PPUSH
86611: LD_VAR 0 5
86615: PPUSH
86616: CALL 86658 0 6
86620: GO 86653
86622: LD_INT 304
86624: DOUBLE
86625: EQUAL
86626: IFTRUE 86630
86628: GO 86652
86630: POP
// hHackTeleport ( unit , x , y ) ; end ;
86631: LD_VAR 0 2
86635: PPUSH
86636: LD_VAR 0 4
86640: PPUSH
86641: LD_VAR 0 5
86645: PPUSH
86646: CALL 88429 0 3
86650: GO 86653
86652: POP
// end ;
86653: LD_VAR 0 12
86657: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
86658: LD_INT 0
86660: PPUSH
86661: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
86662: LD_VAR 0 1
86666: PUSH
86667: LD_INT 1
86669: LESS
86670: IFTRUE 86682
86672: PUSH
86673: LD_VAR 0 1
86677: PUSH
86678: LD_INT 3
86680: GREATER
86681: OR
86682: IFTRUE 86700
86684: PUSH
86685: LD_VAR 0 5
86689: PPUSH
86690: LD_VAR 0 6
86694: PPUSH
86695: CALL_OW 428
86699: OR
86700: IFFALSE 86704
// exit ;
86702: GO 87432
// uc_side := your_side ;
86704: LD_ADDR_OWVAR 20
86708: PUSH
86709: LD_OWVAR 2
86713: ST_TO_ADDR
// uc_nation := nation ;
86714: LD_ADDR_OWVAR 21
86718: PUSH
86719: LD_VAR 0 1
86723: ST_TO_ADDR
// bc_level = 1 ;
86724: LD_ADDR_OWVAR 43
86728: PUSH
86729: LD_INT 1
86731: ST_TO_ADDR
// case btype of 1 :
86732: LD_VAR 0 2
86736: PUSH
86737: LD_INT 1
86739: DOUBLE
86740: EQUAL
86741: IFTRUE 86745
86743: GO 86756
86745: POP
// bc_type := b_depot ; 2 :
86746: LD_ADDR_OWVAR 42
86750: PUSH
86751: LD_INT 0
86753: ST_TO_ADDR
86754: GO 87376
86756: LD_INT 2
86758: DOUBLE
86759: EQUAL
86760: IFTRUE 86764
86762: GO 86775
86764: POP
// bc_type := b_warehouse ; 3 :
86765: LD_ADDR_OWVAR 42
86769: PUSH
86770: LD_INT 1
86772: ST_TO_ADDR
86773: GO 87376
86775: LD_INT 3
86777: DOUBLE
86778: EQUAL
86779: IFTRUE 86783
86781: GO 86794
86783: POP
// bc_type := b_lab ; 4 .. 9 :
86784: LD_ADDR_OWVAR 42
86788: PUSH
86789: LD_INT 6
86791: ST_TO_ADDR
86792: GO 87376
86794: LD_INT 4
86796: DOUBLE
86797: GREATEREQUAL
86798: IFFALSE 86806
86800: LD_INT 9
86802: DOUBLE
86803: LESSEQUAL
86804: IFTRUE 86808
86806: GO 86868
86808: POP
// begin bc_type := b_lab_half ;
86809: LD_ADDR_OWVAR 42
86813: PUSH
86814: LD_INT 7
86816: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
86817: LD_ADDR_OWVAR 44
86821: PUSH
86822: LD_INT 10
86824: PUSH
86825: LD_INT 11
86827: PUSH
86828: LD_INT 12
86830: PUSH
86831: LD_INT 15
86833: PUSH
86834: LD_INT 14
86836: PUSH
86837: LD_INT 13
86839: PUSH
86840: EMPTY
86841: LIST
86842: LIST
86843: LIST
86844: LIST
86845: LIST
86846: LIST
86847: PUSH
86848: LD_VAR 0 2
86852: PUSH
86853: LD_INT 3
86855: MINUS
86856: ARRAY
86857: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
86858: LD_ADDR_OWVAR 45
86862: PUSH
86863: LD_INT 9
86865: ST_TO_ADDR
// end ; 10 .. 13 :
86866: GO 87376
86868: LD_INT 10
86870: DOUBLE
86871: GREATEREQUAL
86872: IFFALSE 86880
86874: LD_INT 13
86876: DOUBLE
86877: LESSEQUAL
86878: IFTRUE 86882
86880: GO 86959
86882: POP
// begin bc_type := b_lab_full ;
86883: LD_ADDR_OWVAR 42
86887: PUSH
86888: LD_INT 8
86890: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
86891: LD_ADDR_OWVAR 44
86895: PUSH
86896: LD_INT 10
86898: PUSH
86899: LD_INT 12
86901: PUSH
86902: LD_INT 14
86904: PUSH
86905: LD_INT 13
86907: PUSH
86908: EMPTY
86909: LIST
86910: LIST
86911: LIST
86912: LIST
86913: PUSH
86914: LD_VAR 0 2
86918: PUSH
86919: LD_INT 9
86921: MINUS
86922: ARRAY
86923: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
86924: LD_ADDR_OWVAR 45
86928: PUSH
86929: LD_INT 11
86931: PUSH
86932: LD_INT 15
86934: PUSH
86935: LD_INT 12
86937: PUSH
86938: LD_INT 15
86940: PUSH
86941: EMPTY
86942: LIST
86943: LIST
86944: LIST
86945: LIST
86946: PUSH
86947: LD_VAR 0 2
86951: PUSH
86952: LD_INT 9
86954: MINUS
86955: ARRAY
86956: ST_TO_ADDR
// end ; 14 :
86957: GO 87376
86959: LD_INT 14
86961: DOUBLE
86962: EQUAL
86963: IFTRUE 86967
86965: GO 86978
86967: POP
// bc_type := b_workshop ; 15 :
86968: LD_ADDR_OWVAR 42
86972: PUSH
86973: LD_INT 2
86975: ST_TO_ADDR
86976: GO 87376
86978: LD_INT 15
86980: DOUBLE
86981: EQUAL
86982: IFTRUE 86986
86984: GO 86997
86986: POP
// bc_type := b_factory ; 16 :
86987: LD_ADDR_OWVAR 42
86991: PUSH
86992: LD_INT 3
86994: ST_TO_ADDR
86995: GO 87376
86997: LD_INT 16
86999: DOUBLE
87000: EQUAL
87001: IFTRUE 87005
87003: GO 87016
87005: POP
// bc_type := b_ext_gun ; 17 :
87006: LD_ADDR_OWVAR 42
87010: PUSH
87011: LD_INT 17
87013: ST_TO_ADDR
87014: GO 87376
87016: LD_INT 17
87018: DOUBLE
87019: EQUAL
87020: IFTRUE 87024
87022: GO 87052
87024: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
87025: LD_ADDR_OWVAR 42
87029: PUSH
87030: LD_INT 19
87032: PUSH
87033: LD_INT 23
87035: PUSH
87036: LD_INT 19
87038: PUSH
87039: EMPTY
87040: LIST
87041: LIST
87042: LIST
87043: PUSH
87044: LD_VAR 0 1
87048: ARRAY
87049: ST_TO_ADDR
87050: GO 87376
87052: LD_INT 18
87054: DOUBLE
87055: EQUAL
87056: IFTRUE 87060
87058: GO 87071
87060: POP
// bc_type := b_ext_radar ; 19 :
87061: LD_ADDR_OWVAR 42
87065: PUSH
87066: LD_INT 20
87068: ST_TO_ADDR
87069: GO 87376
87071: LD_INT 19
87073: DOUBLE
87074: EQUAL
87075: IFTRUE 87079
87077: GO 87090
87079: POP
// bc_type := b_ext_radio ; 20 :
87080: LD_ADDR_OWVAR 42
87084: PUSH
87085: LD_INT 22
87087: ST_TO_ADDR
87088: GO 87376
87090: LD_INT 20
87092: DOUBLE
87093: EQUAL
87094: IFTRUE 87098
87096: GO 87109
87098: POP
// bc_type := b_ext_siberium ; 21 :
87099: LD_ADDR_OWVAR 42
87103: PUSH
87104: LD_INT 21
87106: ST_TO_ADDR
87107: GO 87376
87109: LD_INT 21
87111: DOUBLE
87112: EQUAL
87113: IFTRUE 87117
87115: GO 87128
87117: POP
// bc_type := b_ext_computer ; 22 :
87118: LD_ADDR_OWVAR 42
87122: PUSH
87123: LD_INT 24
87125: ST_TO_ADDR
87126: GO 87376
87128: LD_INT 22
87130: DOUBLE
87131: EQUAL
87132: IFTRUE 87136
87134: GO 87147
87136: POP
// bc_type := b_ext_track ; 23 :
87137: LD_ADDR_OWVAR 42
87141: PUSH
87142: LD_INT 16
87144: ST_TO_ADDR
87145: GO 87376
87147: LD_INT 23
87149: DOUBLE
87150: EQUAL
87151: IFTRUE 87155
87153: GO 87166
87155: POP
// bc_type := b_ext_laser ; 24 :
87156: LD_ADDR_OWVAR 42
87160: PUSH
87161: LD_INT 25
87163: ST_TO_ADDR
87164: GO 87376
87166: LD_INT 24
87168: DOUBLE
87169: EQUAL
87170: IFTRUE 87174
87172: GO 87185
87174: POP
// bc_type := b_control_tower ; 25 :
87175: LD_ADDR_OWVAR 42
87179: PUSH
87180: LD_INT 36
87182: ST_TO_ADDR
87183: GO 87376
87185: LD_INT 25
87187: DOUBLE
87188: EQUAL
87189: IFTRUE 87193
87191: GO 87204
87193: POP
// bc_type := b_breastwork ; 26 :
87194: LD_ADDR_OWVAR 42
87198: PUSH
87199: LD_INT 31
87201: ST_TO_ADDR
87202: GO 87376
87204: LD_INT 26
87206: DOUBLE
87207: EQUAL
87208: IFTRUE 87212
87210: GO 87223
87212: POP
// bc_type := b_bunker ; 27 :
87213: LD_ADDR_OWVAR 42
87217: PUSH
87218: LD_INT 32
87220: ST_TO_ADDR
87221: GO 87376
87223: LD_INT 27
87225: DOUBLE
87226: EQUAL
87227: IFTRUE 87231
87229: GO 87242
87231: POP
// bc_type := b_turret ; 28 :
87232: LD_ADDR_OWVAR 42
87236: PUSH
87237: LD_INT 33
87239: ST_TO_ADDR
87240: GO 87376
87242: LD_INT 28
87244: DOUBLE
87245: EQUAL
87246: IFTRUE 87250
87248: GO 87261
87250: POP
// bc_type := b_armoury ; 29 :
87251: LD_ADDR_OWVAR 42
87255: PUSH
87256: LD_INT 4
87258: ST_TO_ADDR
87259: GO 87376
87261: LD_INT 29
87263: DOUBLE
87264: EQUAL
87265: IFTRUE 87269
87267: GO 87280
87269: POP
// bc_type := b_barracks ; 30 :
87270: LD_ADDR_OWVAR 42
87274: PUSH
87275: LD_INT 5
87277: ST_TO_ADDR
87278: GO 87376
87280: LD_INT 30
87282: DOUBLE
87283: EQUAL
87284: IFTRUE 87288
87286: GO 87299
87288: POP
// bc_type := b_solar_power ; 31 :
87289: LD_ADDR_OWVAR 42
87293: PUSH
87294: LD_INT 27
87296: ST_TO_ADDR
87297: GO 87376
87299: LD_INT 31
87301: DOUBLE
87302: EQUAL
87303: IFTRUE 87307
87305: GO 87318
87307: POP
// bc_type := b_oil_power ; 32 :
87308: LD_ADDR_OWVAR 42
87312: PUSH
87313: LD_INT 26
87315: ST_TO_ADDR
87316: GO 87376
87318: LD_INT 32
87320: DOUBLE
87321: EQUAL
87322: IFTRUE 87326
87324: GO 87337
87326: POP
// bc_type := b_siberite_power ; 33 :
87327: LD_ADDR_OWVAR 42
87331: PUSH
87332: LD_INT 28
87334: ST_TO_ADDR
87335: GO 87376
87337: LD_INT 33
87339: DOUBLE
87340: EQUAL
87341: IFTRUE 87345
87343: GO 87356
87345: POP
// bc_type := b_oil_mine ; 34 :
87346: LD_ADDR_OWVAR 42
87350: PUSH
87351: LD_INT 29
87353: ST_TO_ADDR
87354: GO 87376
87356: LD_INT 34
87358: DOUBLE
87359: EQUAL
87360: IFTRUE 87364
87362: GO 87375
87364: POP
// bc_type := b_siberite_mine ; end ;
87365: LD_ADDR_OWVAR 42
87369: PUSH
87370: LD_INT 30
87372: ST_TO_ADDR
87373: GO 87376
87375: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
87376: LD_ADDR_VAR 0 8
87380: PUSH
87381: LD_VAR 0 5
87385: PPUSH
87386: LD_VAR 0 6
87390: PPUSH
87391: LD_VAR 0 3
87395: PPUSH
87396: CALL_OW 47
87400: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
87401: LD_OWVAR 42
87405: PUSH
87406: LD_INT 32
87408: PUSH
87409: LD_INT 33
87411: PUSH
87412: EMPTY
87413: LIST
87414: LIST
87415: IN
87416: IFFALSE 87432
// PlaceWeaponTurret ( b , weapon ) ;
87418: LD_VAR 0 8
87422: PPUSH
87423: LD_VAR 0 4
87427: PPUSH
87428: CALL_OW 431
// end ;
87432: LD_VAR 0 7
87436: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
87437: LD_INT 0
87439: PPUSH
87440: PPUSH
87441: PPUSH
87442: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87443: LD_ADDR_VAR 0 4
87447: PUSH
87448: LD_INT 22
87450: PUSH
87451: LD_OWVAR 2
87455: PUSH
87456: EMPTY
87457: LIST
87458: LIST
87459: PUSH
87460: LD_INT 2
87462: PUSH
87463: LD_INT 30
87465: PUSH
87466: LD_INT 0
87468: PUSH
87469: EMPTY
87470: LIST
87471: LIST
87472: PUSH
87473: LD_INT 30
87475: PUSH
87476: LD_INT 1
87478: PUSH
87479: EMPTY
87480: LIST
87481: LIST
87482: PUSH
87483: EMPTY
87484: LIST
87485: LIST
87486: LIST
87487: PUSH
87488: EMPTY
87489: LIST
87490: LIST
87491: PPUSH
87492: CALL_OW 69
87496: ST_TO_ADDR
// if not tmp then
87497: LD_VAR 0 4
87501: NOT
87502: IFFALSE 87506
// exit ;
87504: GO 87565
// for i in tmp do
87506: LD_ADDR_VAR 0 2
87510: PUSH
87511: LD_VAR 0 4
87515: PUSH
87516: FOR_IN
87517: IFFALSE 87563
// for j = 1 to 3 do
87519: LD_ADDR_VAR 0 3
87523: PUSH
87524: DOUBLE
87525: LD_INT 1
87527: DEC
87528: ST_TO_ADDR
87529: LD_INT 3
87531: PUSH
87532: FOR_TO
87533: IFFALSE 87559
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
87535: LD_VAR 0 2
87539: PPUSH
87540: CALL_OW 274
87544: PPUSH
87545: LD_VAR 0 3
87549: PPUSH
87550: LD_INT 99999
87552: PPUSH
87553: CALL_OW 277
87557: GO 87532
87559: POP
87560: POP
87561: GO 87516
87563: POP
87564: POP
// end ;
87565: LD_VAR 0 1
87569: RET
// export function hHackSetLevel10 ; var i , j ; begin
87570: LD_INT 0
87572: PPUSH
87573: PPUSH
87574: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
87575: LD_ADDR_VAR 0 2
87579: PUSH
87580: LD_INT 21
87582: PUSH
87583: LD_INT 1
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: PPUSH
87590: CALL_OW 69
87594: PUSH
87595: FOR_IN
87596: IFFALSE 87648
// if IsSelected ( i ) then
87598: LD_VAR 0 2
87602: PPUSH
87603: CALL_OW 306
87607: IFFALSE 87646
// begin for j := 1 to 4 do
87609: LD_ADDR_VAR 0 3
87613: PUSH
87614: DOUBLE
87615: LD_INT 1
87617: DEC
87618: ST_TO_ADDR
87619: LD_INT 4
87621: PUSH
87622: FOR_TO
87623: IFFALSE 87644
// SetSkill ( i , j , 10 ) ;
87625: LD_VAR 0 2
87629: PPUSH
87630: LD_VAR 0 3
87634: PPUSH
87635: LD_INT 10
87637: PPUSH
87638: CALL_OW 237
87642: GO 87622
87644: POP
87645: POP
// end ;
87646: GO 87595
87648: POP
87649: POP
// end ;
87650: LD_VAR 0 1
87654: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
87655: LD_INT 0
87657: PPUSH
87658: PPUSH
87659: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
87660: LD_ADDR_VAR 0 2
87664: PUSH
87665: LD_INT 22
87667: PUSH
87668: LD_OWVAR 2
87672: PUSH
87673: EMPTY
87674: LIST
87675: LIST
87676: PUSH
87677: LD_INT 21
87679: PUSH
87680: LD_INT 1
87682: PUSH
87683: EMPTY
87684: LIST
87685: LIST
87686: PUSH
87687: EMPTY
87688: LIST
87689: LIST
87690: PPUSH
87691: CALL_OW 69
87695: PUSH
87696: FOR_IN
87697: IFFALSE 87738
// begin for j := 1 to 4 do
87699: LD_ADDR_VAR 0 3
87703: PUSH
87704: DOUBLE
87705: LD_INT 1
87707: DEC
87708: ST_TO_ADDR
87709: LD_INT 4
87711: PUSH
87712: FOR_TO
87713: IFFALSE 87734
// SetSkill ( i , j , 10 ) ;
87715: LD_VAR 0 2
87719: PPUSH
87720: LD_VAR 0 3
87724: PPUSH
87725: LD_INT 10
87727: PPUSH
87728: CALL_OW 237
87732: GO 87712
87734: POP
87735: POP
// end ;
87736: GO 87696
87738: POP
87739: POP
// end ;
87740: LD_VAR 0 1
87744: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
87745: LD_INT 0
87747: PPUSH
// uc_side := your_side ;
87748: LD_ADDR_OWVAR 20
87752: PUSH
87753: LD_OWVAR 2
87757: ST_TO_ADDR
// uc_nation := nation ;
87758: LD_ADDR_OWVAR 21
87762: PUSH
87763: LD_VAR 0 1
87767: ST_TO_ADDR
// InitHc ;
87768: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
87772: LD_INT 0
87774: PPUSH
87775: LD_VAR 0 2
87779: PPUSH
87780: LD_VAR 0 3
87784: PPUSH
87785: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
87789: LD_VAR 0 4
87793: PPUSH
87794: LD_VAR 0 5
87798: PPUSH
87799: CALL_OW 428
87803: PUSH
87804: LD_INT 0
87806: EQUAL
87807: IFFALSE 87831
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
87809: CALL_OW 44
87813: PPUSH
87814: LD_VAR 0 4
87818: PPUSH
87819: LD_VAR 0 5
87823: PPUSH
87824: LD_INT 1
87826: PPUSH
87827: CALL_OW 48
// end ;
87831: LD_VAR 0 6
87835: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
87836: LD_INT 0
87838: PPUSH
87839: PPUSH
// uc_side := your_side ;
87840: LD_ADDR_OWVAR 20
87844: PUSH
87845: LD_OWVAR 2
87849: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
87850: LD_VAR 0 1
87854: PUSH
87855: LD_INT 1
87857: PUSH
87858: LD_INT 2
87860: PUSH
87861: LD_INT 3
87863: PUSH
87864: LD_INT 4
87866: PUSH
87867: LD_INT 5
87869: PUSH
87870: EMPTY
87871: LIST
87872: LIST
87873: LIST
87874: LIST
87875: LIST
87876: IN
87877: IFFALSE 87889
// uc_nation := nation_american else
87879: LD_ADDR_OWVAR 21
87883: PUSH
87884: LD_INT 1
87886: ST_TO_ADDR
87887: GO 87932
// if chassis in [ 11 , 12 , 13 , 14 ] then
87889: LD_VAR 0 1
87893: PUSH
87894: LD_INT 11
87896: PUSH
87897: LD_INT 12
87899: PUSH
87900: LD_INT 13
87902: PUSH
87903: LD_INT 14
87905: PUSH
87906: EMPTY
87907: LIST
87908: LIST
87909: LIST
87910: LIST
87911: IN
87912: IFFALSE 87924
// uc_nation := nation_arabian else
87914: LD_ADDR_OWVAR 21
87918: PUSH
87919: LD_INT 2
87921: ST_TO_ADDR
87922: GO 87932
// uc_nation := nation_russian ;
87924: LD_ADDR_OWVAR 21
87928: PUSH
87929: LD_INT 3
87931: ST_TO_ADDR
// vc_chassis := chassis ;
87932: LD_ADDR_OWVAR 37
87936: PUSH
87937: LD_VAR 0 1
87941: ST_TO_ADDR
// vc_engine := engine ;
87942: LD_ADDR_OWVAR 39
87946: PUSH
87947: LD_VAR 0 2
87951: ST_TO_ADDR
// vc_control := control ;
87952: LD_ADDR_OWVAR 38
87956: PUSH
87957: LD_VAR 0 3
87961: ST_TO_ADDR
// vc_weapon := weapon ;
87962: LD_ADDR_OWVAR 40
87966: PUSH
87967: LD_VAR 0 4
87971: ST_TO_ADDR
// un := CreateVehicle ;
87972: LD_ADDR_VAR 0 8
87976: PUSH
87977: CALL_OW 45
87981: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
87982: LD_VAR 0 8
87986: PPUSH
87987: LD_INT 0
87989: PPUSH
87990: LD_INT 5
87992: PPUSH
87993: CALL_OW 12
87997: PPUSH
87998: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
88002: LD_VAR 0 8
88006: PPUSH
88007: LD_VAR 0 5
88011: PPUSH
88012: LD_VAR 0 6
88016: PPUSH
88017: LD_INT 1
88019: PPUSH
88020: CALL_OW 48
// end ;
88024: LD_VAR 0 7
88028: RET
// export hInvincible ; every 1 do
88029: GO 88031
88031: DISABLE
// hInvincible := [ ] ;
88032: LD_ADDR_EXP 121
88036: PUSH
88037: EMPTY
88038: ST_TO_ADDR
88039: END
// every 10 do var i ;
88040: GO 88042
88042: DISABLE
88043: LD_INT 0
88045: PPUSH
// begin enable ;
88046: ENABLE
// if not hInvincible then
88047: LD_EXP 121
88051: NOT
88052: IFFALSE 88056
// exit ;
88054: GO 88100
// for i in hInvincible do
88056: LD_ADDR_VAR 0 1
88060: PUSH
88061: LD_EXP 121
88065: PUSH
88066: FOR_IN
88067: IFFALSE 88098
// if GetLives ( i ) < 1000 then
88069: LD_VAR 0 1
88073: PPUSH
88074: CALL_OW 256
88078: PUSH
88079: LD_INT 1000
88081: LESS
88082: IFFALSE 88096
// SetLives ( i , 1000 ) ;
88084: LD_VAR 0 1
88088: PPUSH
88089: LD_INT 1000
88091: PPUSH
88092: CALL_OW 234
88096: GO 88066
88098: POP
88099: POP
// end ;
88100: PPOPN 1
88102: END
// export function hHackInvincible ; var i ; begin
88103: LD_INT 0
88105: PPUSH
88106: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
88107: LD_ADDR_VAR 0 2
88111: PUSH
88112: LD_INT 2
88114: PUSH
88115: LD_INT 21
88117: PUSH
88118: LD_INT 1
88120: PUSH
88121: EMPTY
88122: LIST
88123: LIST
88124: PUSH
88125: LD_INT 21
88127: PUSH
88128: LD_INT 2
88130: PUSH
88131: EMPTY
88132: LIST
88133: LIST
88134: PUSH
88135: EMPTY
88136: LIST
88137: LIST
88138: LIST
88139: PPUSH
88140: CALL_OW 69
88144: PUSH
88145: FOR_IN
88146: IFFALSE 88207
// if IsSelected ( i ) then
88148: LD_VAR 0 2
88152: PPUSH
88153: CALL_OW 306
88157: IFFALSE 88205
// begin if i in hInvincible then
88159: LD_VAR 0 2
88163: PUSH
88164: LD_EXP 121
88168: IN
88169: IFFALSE 88189
// hInvincible := hInvincible diff i else
88171: LD_ADDR_EXP 121
88175: PUSH
88176: LD_EXP 121
88180: PUSH
88181: LD_VAR 0 2
88185: DIFF
88186: ST_TO_ADDR
88187: GO 88205
// hInvincible := hInvincible union i ;
88189: LD_ADDR_EXP 121
88193: PUSH
88194: LD_EXP 121
88198: PUSH
88199: LD_VAR 0 2
88203: UNION
88204: ST_TO_ADDR
// end ;
88205: GO 88145
88207: POP
88208: POP
// end ;
88209: LD_VAR 0 1
88213: RET
// export function hHackInvisible ; var i , j ; begin
88214: LD_INT 0
88216: PPUSH
88217: PPUSH
88218: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
88219: LD_ADDR_VAR 0 2
88223: PUSH
88224: LD_INT 21
88226: PUSH
88227: LD_INT 1
88229: PUSH
88230: EMPTY
88231: LIST
88232: LIST
88233: PPUSH
88234: CALL_OW 69
88238: PUSH
88239: FOR_IN
88240: IFFALSE 88264
// if IsSelected ( i ) then
88242: LD_VAR 0 2
88246: PPUSH
88247: CALL_OW 306
88251: IFFALSE 88262
// ComForceInvisible ( i ) ;
88253: LD_VAR 0 2
88257: PPUSH
88258: CALL_OW 496
88262: GO 88239
88264: POP
88265: POP
// end ;
88266: LD_VAR 0 1
88270: RET
// export function hHackChangeYourSide ; begin
88271: LD_INT 0
88273: PPUSH
// if your_side = 8 then
88274: LD_OWVAR 2
88278: PUSH
88279: LD_INT 8
88281: EQUAL
88282: IFFALSE 88294
// your_side := 0 else
88284: LD_ADDR_OWVAR 2
88288: PUSH
88289: LD_INT 0
88291: ST_TO_ADDR
88292: GO 88308
// your_side := your_side + 1 ;
88294: LD_ADDR_OWVAR 2
88298: PUSH
88299: LD_OWVAR 2
88303: PUSH
88304: LD_INT 1
88306: PLUS
88307: ST_TO_ADDR
// end ;
88308: LD_VAR 0 1
88312: RET
// export function hHackChangeUnitSide ; var i , j ; begin
88313: LD_INT 0
88315: PPUSH
88316: PPUSH
88317: PPUSH
// for i in all_units do
88318: LD_ADDR_VAR 0 2
88322: PUSH
88323: LD_OWVAR 3
88327: PUSH
88328: FOR_IN
88329: IFFALSE 88407
// if IsSelected ( i ) then
88331: LD_VAR 0 2
88335: PPUSH
88336: CALL_OW 306
88340: IFFALSE 88405
// begin j := GetSide ( i ) ;
88342: LD_ADDR_VAR 0 3
88346: PUSH
88347: LD_VAR 0 2
88351: PPUSH
88352: CALL_OW 255
88356: ST_TO_ADDR
// if j = 8 then
88357: LD_VAR 0 3
88361: PUSH
88362: LD_INT 8
88364: EQUAL
88365: IFFALSE 88377
// j := 0 else
88367: LD_ADDR_VAR 0 3
88371: PUSH
88372: LD_INT 0
88374: ST_TO_ADDR
88375: GO 88391
// j := j + 1 ;
88377: LD_ADDR_VAR 0 3
88381: PUSH
88382: LD_VAR 0 3
88386: PUSH
88387: LD_INT 1
88389: PLUS
88390: ST_TO_ADDR
// SetSide ( i , j ) ;
88391: LD_VAR 0 2
88395: PPUSH
88396: LD_VAR 0 3
88400: PPUSH
88401: CALL_OW 235
// end ;
88405: GO 88328
88407: POP
88408: POP
// end ;
88409: LD_VAR 0 1
88413: RET
// export function hHackFog ; begin
88414: LD_INT 0
88416: PPUSH
// FogOff ( true ) ;
88417: LD_INT 1
88419: PPUSH
88420: CALL_OW 344
// end ;
88424: LD_VAR 0 1
88428: RET
// export function hHackTeleport ( unit , x , y ) ; begin
88429: LD_INT 0
88431: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
88432: LD_VAR 0 1
88436: PPUSH
88437: LD_VAR 0 2
88441: PPUSH
88442: LD_VAR 0 3
88446: PPUSH
88447: LD_INT 1
88449: PPUSH
88450: LD_INT 1
88452: PPUSH
88453: CALL_OW 483
// CenterOnXY ( x , y ) ;
88457: LD_VAR 0 2
88461: PPUSH
88462: LD_VAR 0 3
88466: PPUSH
88467: CALL_OW 84
// end ;
88471: LD_VAR 0 4
88475: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
88476: LD_INT 0
88478: PPUSH
88479: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
88480: LD_VAR 0 1
88484: NOT
88485: IFTRUE 88504
88487: PUSH
88488: LD_VAR 0 2
88492: PPUSH
88493: LD_VAR 0 3
88497: PPUSH
88498: CALL_OW 488
88502: NOT
88503: OR
88504: IFTRUE 88539
88506: PUSH
88507: LD_VAR 0 1
88511: PPUSH
88512: CALL_OW 266
88516: PUSH
88517: LD_INT 3
88519: NONEQUAL
88520: IFFALSE 88538
88522: PUSH
88523: LD_VAR 0 1
88527: PPUSH
88528: CALL_OW 247
88532: PUSH
88533: LD_INT 1
88535: EQUAL
88536: NOT
88537: AND
88538: OR
88539: IFFALSE 88543
// exit ;
88541: GO 88825
// if GetType ( factory ) = unit_human then
88543: LD_VAR 0 1
88547: PPUSH
88548: CALL_OW 247
88552: PUSH
88553: LD_INT 1
88555: EQUAL
88556: IFFALSE 88573
// factory := IsInUnit ( factory ) ;
88558: LD_ADDR_VAR 0 1
88562: PUSH
88563: LD_VAR 0 1
88567: PPUSH
88568: CALL_OW 310
88572: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
88573: LD_VAR 0 1
88577: PPUSH
88578: CALL_OW 266
88582: PUSH
88583: LD_INT 3
88585: NONEQUAL
88586: IFFALSE 88590
// exit ;
88588: GO 88825
// for i := 1 to Count ( factoryWaypoints ) do
88590: LD_ADDR_VAR 0 5
88594: PUSH
88595: DOUBLE
88596: LD_INT 1
88598: DEC
88599: ST_TO_ADDR
88600: LD_EXP 122
88604: PPUSH
88605: CALL 32515 0 1
88609: PUSH
88610: FOR_TO
88611: IFFALSE 88773
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
88613: LD_VAR 0 2
88617: PPUSH
88618: LD_VAR 0 3
88622: PPUSH
88623: CALL_OW 428
88627: PUSH
88628: LD_EXP 122
88632: PUSH
88633: LD_VAR 0 5
88637: ARRAY
88638: PUSH
88639: LD_INT 2
88641: ARRAY
88642: EQUAL
88643: IFFALSE 88675
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88645: LD_ADDR_EXP 122
88649: PUSH
88650: LD_EXP 122
88654: PPUSH
88655: LD_VAR 0 5
88659: PPUSH
88660: CALL_OW 3
88664: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88665: CALL 88830 0 0
// exit ;
88669: POP
88670: POP
88671: GO 88825
// end else
88673: GO 88771
// if factory = factoryWaypoints [ i ] [ 2 ] then
88675: LD_VAR 0 1
88679: PUSH
88680: LD_EXP 122
88684: PUSH
88685: LD_VAR 0 5
88689: ARRAY
88690: PUSH
88691: LD_INT 2
88693: ARRAY
88694: EQUAL
88695: IFFALSE 88771
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88697: LD_ADDR_EXP 122
88701: PUSH
88702: LD_EXP 122
88706: PPUSH
88707: LD_VAR 0 5
88711: PPUSH
88712: CALL_OW 3
88716: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88717: LD_ADDR_EXP 122
88721: PUSH
88722: LD_EXP 122
88726: PPUSH
88727: LD_VAR 0 1
88731: PPUSH
88732: CALL_OW 255
88736: PUSH
88737: LD_VAR 0 1
88741: PUSH
88742: LD_VAR 0 2
88746: PUSH
88747: LD_VAR 0 3
88751: PUSH
88752: EMPTY
88753: LIST
88754: LIST
88755: LIST
88756: LIST
88757: PPUSH
88758: CALL 68491 0 2
88762: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88763: CALL 88830 0 0
// exit ;
88767: POP
88768: POP
88769: GO 88825
// end ; end ;
88771: GO 88610
88773: POP
88774: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88775: LD_ADDR_EXP 122
88779: PUSH
88780: LD_EXP 122
88784: PPUSH
88785: LD_VAR 0 1
88789: PPUSH
88790: CALL_OW 255
88794: PUSH
88795: LD_VAR 0 1
88799: PUSH
88800: LD_VAR 0 2
88804: PUSH
88805: LD_VAR 0 3
88809: PUSH
88810: EMPTY
88811: LIST
88812: LIST
88813: LIST
88814: LIST
88815: PPUSH
88816: CALL 68491 0 2
88820: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88821: CALL 88830 0 0
// end ;
88825: LD_VAR 0 4
88829: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
88830: LD_INT 0
88832: PPUSH
88833: PPUSH
88834: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
88835: LD_STRING resetFactoryWaypoint();
88837: PPUSH
88838: CALL_OW 559
// if factoryWaypoints then
88842: LD_EXP 122
88846: IFFALSE 88967
// begin list := factoryWaypoints ;
88848: LD_ADDR_VAR 0 3
88852: PUSH
88853: LD_EXP 122
88857: ST_TO_ADDR
// for i := 1 to list do
88858: LD_ADDR_VAR 0 2
88862: PUSH
88863: DOUBLE
88864: LD_INT 1
88866: DEC
88867: ST_TO_ADDR
88868: LD_VAR 0 3
88872: PUSH
88873: FOR_TO
88874: IFFALSE 88965
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
88876: LD_STRING setFactoryWaypointXY(
88878: PUSH
88879: LD_VAR 0 3
88883: PUSH
88884: LD_VAR 0 2
88888: ARRAY
88889: PUSH
88890: LD_INT 1
88892: ARRAY
88893: STR
88894: PUSH
88895: LD_STRING ,
88897: STR
88898: PUSH
88899: LD_VAR 0 3
88903: PUSH
88904: LD_VAR 0 2
88908: ARRAY
88909: PUSH
88910: LD_INT 2
88912: ARRAY
88913: STR
88914: PUSH
88915: LD_STRING ,
88917: STR
88918: PUSH
88919: LD_VAR 0 3
88923: PUSH
88924: LD_VAR 0 2
88928: ARRAY
88929: PUSH
88930: LD_INT 3
88932: ARRAY
88933: STR
88934: PUSH
88935: LD_STRING ,
88937: STR
88938: PUSH
88939: LD_VAR 0 3
88943: PUSH
88944: LD_VAR 0 2
88948: ARRAY
88949: PUSH
88950: LD_INT 4
88952: ARRAY
88953: STR
88954: PUSH
88955: LD_STRING )
88957: STR
88958: PPUSH
88959: CALL_OW 559
88963: GO 88873
88965: POP
88966: POP
// end ; end ;
88967: LD_VAR 0 1
88971: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
88972: LD_INT 0
88974: PPUSH
// if HexInfo ( x , y ) = warehouse then
88975: LD_VAR 0 2
88979: PPUSH
88980: LD_VAR 0 3
88984: PPUSH
88985: CALL_OW 428
88989: PUSH
88990: LD_VAR 0 1
88994: EQUAL
88995: IFFALSE 89022
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
88997: LD_ADDR_EXP 124
89001: PUSH
89002: LD_EXP 124
89006: PPUSH
89007: LD_VAR 0 1
89011: PPUSH
89012: LD_INT 0
89014: PPUSH
89015: CALL_OW 1
89019: ST_TO_ADDR
89020: GO 89073
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
89022: LD_ADDR_EXP 124
89026: PUSH
89027: LD_EXP 124
89031: PPUSH
89032: LD_VAR 0 1
89036: PPUSH
89037: LD_VAR 0 1
89041: PPUSH
89042: CALL_OW 255
89046: PUSH
89047: LD_VAR 0 1
89051: PUSH
89052: LD_VAR 0 2
89056: PUSH
89057: LD_VAR 0 3
89061: PUSH
89062: EMPTY
89063: LIST
89064: LIST
89065: LIST
89066: LIST
89067: PPUSH
89068: CALL_OW 1
89072: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
89073: CALL 89082 0 0
// end ;
89077: LD_VAR 0 4
89081: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
89082: LD_INT 0
89084: PPUSH
89085: PPUSH
89086: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
89087: LD_STRING resetWarehouseGatheringPoints();
89089: PPUSH
89090: CALL_OW 559
// if warehouseGatheringPoints then
89094: LD_EXP 124
89098: IFFALSE 89224
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
89100: LD_ADDR_VAR 0 3
89104: PUSH
89105: LD_EXP 124
89109: PPUSH
89110: CALL 72425 0 1
89114: ST_TO_ADDR
// for i := 1 to list do
89115: LD_ADDR_VAR 0 2
89119: PUSH
89120: DOUBLE
89121: LD_INT 1
89123: DEC
89124: ST_TO_ADDR
89125: LD_VAR 0 3
89129: PUSH
89130: FOR_TO
89131: IFFALSE 89222
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
89133: LD_STRING setWarehouseGatheringPointXY(
89135: PUSH
89136: LD_VAR 0 3
89140: PUSH
89141: LD_VAR 0 2
89145: ARRAY
89146: PUSH
89147: LD_INT 1
89149: ARRAY
89150: STR
89151: PUSH
89152: LD_STRING ,
89154: STR
89155: PUSH
89156: LD_VAR 0 3
89160: PUSH
89161: LD_VAR 0 2
89165: ARRAY
89166: PUSH
89167: LD_INT 2
89169: ARRAY
89170: STR
89171: PUSH
89172: LD_STRING ,
89174: STR
89175: PUSH
89176: LD_VAR 0 3
89180: PUSH
89181: LD_VAR 0 2
89185: ARRAY
89186: PUSH
89187: LD_INT 3
89189: ARRAY
89190: STR
89191: PUSH
89192: LD_STRING ,
89194: STR
89195: PUSH
89196: LD_VAR 0 3
89200: PUSH
89201: LD_VAR 0 2
89205: ARRAY
89206: PUSH
89207: LD_INT 4
89209: ARRAY
89210: STR
89211: PUSH
89212: LD_STRING )
89214: STR
89215: PPUSH
89216: CALL_OW 559
89220: GO 89130
89222: POP
89223: POP
// end ; end ;
89224: LD_VAR 0 1
89228: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
89229: LD_EXP 124
89233: IFFALSE 89928
89235: GO 89237
89237: DISABLE
89238: LD_INT 0
89240: PPUSH
89241: PPUSH
89242: PPUSH
89243: PPUSH
89244: PPUSH
89245: PPUSH
89246: PPUSH
89247: PPUSH
89248: PPUSH
// begin enable ;
89249: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
89250: LD_ADDR_VAR 0 3
89254: PUSH
89255: LD_EXP 124
89259: PPUSH
89260: CALL 72425 0 1
89264: ST_TO_ADDR
// if not list then
89265: LD_VAR 0 3
89269: NOT
89270: IFFALSE 89274
// exit ;
89272: GO 89928
// for i := 1 to list do
89274: LD_ADDR_VAR 0 1
89278: PUSH
89279: DOUBLE
89280: LD_INT 1
89282: DEC
89283: ST_TO_ADDR
89284: LD_VAR 0 3
89288: PUSH
89289: FOR_TO
89290: IFFALSE 89926
// begin depot := list [ i ] [ 2 ] ;
89292: LD_ADDR_VAR 0 8
89296: PUSH
89297: LD_VAR 0 3
89301: PUSH
89302: LD_VAR 0 1
89306: ARRAY
89307: PUSH
89308: LD_INT 2
89310: ARRAY
89311: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
89312: LD_ADDR_VAR 0 5
89316: PUSH
89317: LD_VAR 0 3
89321: PUSH
89322: LD_VAR 0 1
89326: ARRAY
89327: PUSH
89328: LD_INT 1
89330: ARRAY
89331: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
89332: LD_VAR 0 8
89336: PPUSH
89337: CALL_OW 301
89341: IFTRUE 89360
89343: PUSH
89344: LD_VAR 0 5
89348: PUSH
89349: LD_VAR 0 8
89353: PPUSH
89354: CALL_OW 255
89358: NONEQUAL
89359: OR
89360: IFFALSE 89389
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
89362: LD_ADDR_EXP 124
89366: PUSH
89367: LD_EXP 124
89371: PPUSH
89372: LD_VAR 0 8
89376: PPUSH
89377: LD_INT 0
89379: PPUSH
89380: CALL_OW 1
89384: ST_TO_ADDR
// exit ;
89385: POP
89386: POP
89387: GO 89928
// end ; x := list [ i ] [ 3 ] ;
89389: LD_ADDR_VAR 0 6
89393: PUSH
89394: LD_VAR 0 3
89398: PUSH
89399: LD_VAR 0 1
89403: ARRAY
89404: PUSH
89405: LD_INT 3
89407: ARRAY
89408: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
89409: LD_ADDR_VAR 0 7
89413: PUSH
89414: LD_VAR 0 3
89418: PUSH
89419: LD_VAR 0 1
89423: ARRAY
89424: PUSH
89425: LD_INT 4
89427: ARRAY
89428: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
89429: LD_ADDR_VAR 0 9
89433: PUSH
89434: LD_VAR 0 6
89438: PPUSH
89439: LD_VAR 0 7
89443: PPUSH
89444: LD_INT 16
89446: PPUSH
89447: CALL 70999 0 3
89451: ST_TO_ADDR
// if not cratesNearbyPoint then
89452: LD_VAR 0 9
89456: NOT
89457: IFFALSE 89463
// exit ;
89459: POP
89460: POP
89461: GO 89928
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
89463: LD_ADDR_VAR 0 4
89467: PUSH
89468: LD_INT 22
89470: PUSH
89471: LD_VAR 0 5
89475: PUSH
89476: EMPTY
89477: LIST
89478: LIST
89479: PUSH
89480: LD_INT 3
89482: PUSH
89483: LD_INT 60
89485: PUSH
89486: EMPTY
89487: LIST
89488: PUSH
89489: EMPTY
89490: LIST
89491: LIST
89492: PUSH
89493: LD_INT 91
89495: PUSH
89496: LD_VAR 0 8
89500: PUSH
89501: LD_INT 6
89503: PUSH
89504: EMPTY
89505: LIST
89506: LIST
89507: LIST
89508: PUSH
89509: LD_INT 2
89511: PUSH
89512: LD_INT 25
89514: PUSH
89515: LD_INT 2
89517: PUSH
89518: EMPTY
89519: LIST
89520: LIST
89521: PUSH
89522: LD_INT 25
89524: PUSH
89525: LD_INT 16
89527: PUSH
89528: EMPTY
89529: LIST
89530: LIST
89531: PUSH
89532: EMPTY
89533: LIST
89534: LIST
89535: LIST
89536: PUSH
89537: EMPTY
89538: LIST
89539: LIST
89540: LIST
89541: LIST
89542: PPUSH
89543: CALL_OW 69
89547: PUSH
89548: LD_VAR 0 8
89552: PPUSH
89553: CALL_OW 313
89557: PPUSH
89558: LD_INT 3
89560: PUSH
89561: LD_INT 60
89563: PUSH
89564: EMPTY
89565: LIST
89566: PUSH
89567: EMPTY
89568: LIST
89569: LIST
89570: PUSH
89571: LD_INT 2
89573: PUSH
89574: LD_INT 25
89576: PUSH
89577: LD_INT 2
89579: PUSH
89580: EMPTY
89581: LIST
89582: LIST
89583: PUSH
89584: LD_INT 25
89586: PUSH
89587: LD_INT 16
89589: PUSH
89590: EMPTY
89591: LIST
89592: LIST
89593: PUSH
89594: EMPTY
89595: LIST
89596: LIST
89597: LIST
89598: PUSH
89599: EMPTY
89600: LIST
89601: LIST
89602: PPUSH
89603: CALL_OW 72
89607: UNION
89608: ST_TO_ADDR
// if tmp then
89609: LD_VAR 0 4
89613: IFFALSE 89693
// begin tmp := ShrinkArray ( tmp , 3 ) ;
89615: LD_ADDR_VAR 0 4
89619: PUSH
89620: LD_VAR 0 4
89624: PPUSH
89625: LD_INT 3
89627: PPUSH
89628: CALL 68806 0 2
89632: ST_TO_ADDR
// for j in tmp do
89633: LD_ADDR_VAR 0 2
89637: PUSH
89638: LD_VAR 0 4
89642: PUSH
89643: FOR_IN
89644: IFFALSE 89687
// begin if IsInUnit ( j ) then
89646: LD_VAR 0 2
89650: PPUSH
89651: CALL_OW 310
89655: IFFALSE 89666
// ComExit ( j ) ;
89657: LD_VAR 0 2
89661: PPUSH
89662: CALL 68889 0 1
// AddComCollect ( j , x , y ) ;
89666: LD_VAR 0 2
89670: PPUSH
89671: LD_VAR 0 6
89675: PPUSH
89676: LD_VAR 0 7
89680: PPUSH
89681: CALL_OW 177
// end ;
89685: GO 89643
89687: POP
89688: POP
// exit ;
89689: POP
89690: POP
89691: GO 89928
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
89693: LD_ADDR_VAR 0 4
89697: PUSH
89698: LD_INT 22
89700: PUSH
89701: LD_VAR 0 5
89705: PUSH
89706: EMPTY
89707: LIST
89708: LIST
89709: PUSH
89710: LD_INT 91
89712: PUSH
89713: LD_VAR 0 8
89717: PUSH
89718: LD_INT 8
89720: PUSH
89721: EMPTY
89722: LIST
89723: LIST
89724: LIST
89725: PUSH
89726: LD_INT 2
89728: PUSH
89729: LD_INT 34
89731: PUSH
89732: LD_INT 12
89734: PUSH
89735: EMPTY
89736: LIST
89737: LIST
89738: PUSH
89739: LD_INT 34
89741: PUSH
89742: LD_INT 51
89744: PUSH
89745: EMPTY
89746: LIST
89747: LIST
89748: PUSH
89749: LD_INT 34
89751: PUSH
89752: LD_INT 32
89754: PUSH
89755: EMPTY
89756: LIST
89757: LIST
89758: PUSH
89759: LD_INT 34
89761: PUSH
89762: LD_INT 89
89764: PUSH
89765: EMPTY
89766: LIST
89767: LIST
89768: PUSH
89769: EMPTY
89770: LIST
89771: LIST
89772: LIST
89773: LIST
89774: LIST
89775: PUSH
89776: EMPTY
89777: LIST
89778: LIST
89779: LIST
89780: PPUSH
89781: CALL_OW 69
89785: ST_TO_ADDR
// if tmp then
89786: LD_VAR 0 4
89790: IFFALSE 89924
// begin for j in tmp do
89792: LD_ADDR_VAR 0 2
89796: PUSH
89797: LD_VAR 0 4
89801: PUSH
89802: FOR_IN
89803: IFFALSE 89922
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
89805: LD_VAR 0 2
89809: PPUSH
89810: CALL_OW 262
89814: PUSH
89815: LD_INT 3
89817: EQUAL
89818: IFTRUE 89835
89820: PUSH
89821: LD_VAR 0 2
89825: PPUSH
89826: CALL_OW 261
89830: PUSH
89831: LD_INT 20
89833: GREATER
89834: OR
89835: IFFALSE 89849
89837: PUSH
89838: LD_VAR 0 2
89842: PPUSH
89843: CALL_OW 314
89847: NOT
89848: AND
89849: IFFALSE 89879
89851: PUSH
89852: LD_VAR 0 2
89856: PPUSH
89857: CALL_OW 263
89861: PUSH
89862: LD_INT 1
89864: NONEQUAL
89865: IFTRUE 89878
89867: PUSH
89868: LD_VAR 0 2
89872: PPUSH
89873: CALL_OW 311
89877: OR
89878: AND
89879: IFFALSE 89920
// begin ComCollect ( j , x , y ) ;
89881: LD_VAR 0 2
89885: PPUSH
89886: LD_VAR 0 6
89890: PPUSH
89891: LD_VAR 0 7
89895: PPUSH
89896: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
89900: LD_VAR 0 2
89904: PPUSH
89905: LD_VAR 0 8
89909: PPUSH
89910: CALL_OW 172
// exit ;
89914: POP
89915: POP
89916: POP
89917: POP
89918: GO 89928
// end ;
89920: GO 89802
89922: POP
89923: POP
// end ; end ;
89924: GO 89289
89926: POP
89927: POP
// end ; end_of_file
89928: PPOPN 9
89930: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
89931: LD_VAR 0 1
89935: PUSH
89936: LD_INT 200
89938: DOUBLE
89939: GREATEREQUAL
89940: IFFALSE 89948
89942: LD_INT 299
89944: DOUBLE
89945: LESSEQUAL
89946: IFTRUE 89950
89948: GO 89982
89950: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
89951: LD_VAR 0 1
89955: PPUSH
89956: LD_VAR 0 2
89960: PPUSH
89961: LD_VAR 0 3
89965: PPUSH
89966: LD_VAR 0 4
89970: PPUSH
89971: LD_VAR 0 5
89975: PPUSH
89976: CALL 90844 0 5
89980: GO 90059
89982: LD_INT 300
89984: DOUBLE
89985: GREATEREQUAL
89986: IFFALSE 89994
89988: LD_INT 399
89990: DOUBLE
89991: LESSEQUAL
89992: IFTRUE 89996
89994: GO 90058
89996: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89997: LD_VAR 0 1
90001: PPUSH
90002: LD_VAR 0 2
90006: PPUSH
90007: LD_VAR 0 3
90011: PPUSH
90012: LD_VAR 0 4
90016: PPUSH
90017: LD_VAR 0 5
90021: PPUSH
90022: LD_VAR 0 6
90026: PPUSH
90027: LD_VAR 0 7
90031: PPUSH
90032: LD_VAR 0 8
90036: PPUSH
90037: LD_VAR 0 9
90041: PPUSH
90042: LD_VAR 0 10
90046: PPUSH
90047: LD_VAR 0 11
90051: PPUSH
90052: CALL 86484 0 11
90056: GO 90059
90058: POP
// end ;
90059: PPOPN 11
90061: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
90062: LD_VAR 0 1
90066: PPUSH
90067: LD_VAR 0 2
90071: PPUSH
90072: LD_VAR 0 3
90076: PPUSH
90077: LD_VAR 0 4
90081: PPUSH
90082: LD_VAR 0 5
90086: PPUSH
90087: CALL 90144 0 5
// end ; end_of_file
90091: PPOPN 5
90093: END
// export function SOS_UnitDestroyed ( un ) ; begin
90094: LD_INT 0
90096: PPUSH
// ComRadiation ( un ) ;
90097: LD_VAR 0 1
90101: PPUSH
90102: CALL 91264 0 1
// end ;
90106: LD_VAR 0 2
90110: RET
// export function SOS_UnitKamikazed ( un ) ; begin
90111: LD_INT 0
90113: PPUSH
// ComRadiation ( un ) ;
90114: LD_VAR 0 1
90118: PPUSH
90119: CALL 91264 0 1
// end ;
90123: LD_VAR 0 2
90127: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
90128: LD_INT 0
90130: PPUSH
// end ;
90131: LD_VAR 0 4
90135: RET
// export function SOS_Command ( cmd ) ; begin
90136: LD_INT 0
90138: PPUSH
// end ;
90139: LD_VAR 0 2
90143: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
90144: LD_INT 0
90146: PPUSH
// end ;
90147: LD_VAR 0 6
90151: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
90152: LD_INT 0
90154: PPUSH
90155: PPUSH
90156: PPUSH
90157: PPUSH
90158: PPUSH
// if not vehicle or not factory then
90159: LD_VAR 0 1
90163: NOT
90164: IFTRUE 90173
90166: PUSH
90167: LD_VAR 0 2
90171: NOT
90172: OR
90173: IFFALSE 90177
// exit ;
90175: GO 90839
// weapon := GetWeapon ( vehicle ) ;
90177: LD_ADDR_VAR 0 7
90181: PUSH
90182: LD_VAR 0 1
90186: PPUSH
90187: CALL_OW 264
90191: ST_TO_ADDR
// if weapon = ar_miner then
90192: LD_VAR 0 7
90196: PUSH
90197: LD_INT 81
90199: EQUAL
90200: IFFALSE 90257
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
90202: LD_ADDR_EXP 133
90206: PUSH
90207: LD_EXP 133
90211: PPUSH
90212: LD_EXP 133
90216: PUSH
90217: LD_INT 1
90219: PLUS
90220: PPUSH
90221: LD_VAR 0 1
90225: PPUSH
90226: CALL_OW 1
90230: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
90231: LD_ADDR_EXP 134
90235: PUSH
90236: LD_EXP 134
90240: PPUSH
90241: LD_EXP 134
90245: PUSH
90246: LD_INT 1
90248: PLUS
90249: PPUSH
90250: EMPTY
90251: PPUSH
90252: CALL_OW 1
90256: ST_TO_ADDR
// end ; if not factoryWaypoints then
90257: LD_EXP 122
90261: NOT
90262: IFFALSE 90266
// exit ;
90264: GO 90839
// for i := 1 to Count ( factoryWaypoints ) do
90266: LD_ADDR_VAR 0 4
90270: PUSH
90271: DOUBLE
90272: LD_INT 1
90274: DEC
90275: ST_TO_ADDR
90276: LD_EXP 122
90280: PPUSH
90281: CALL 32515 0 1
90285: PUSH
90286: FOR_TO
90287: IFFALSE 90837
// if factoryWaypoints [ i ] [ 2 ] = factory then
90289: LD_EXP 122
90293: PUSH
90294: LD_VAR 0 4
90298: ARRAY
90299: PUSH
90300: LD_INT 2
90302: ARRAY
90303: PUSH
90304: LD_VAR 0 2
90308: EQUAL
90309: IFFALSE 90835
// begin if GetControl ( vehicle ) = control_manual then
90311: LD_VAR 0 1
90315: PPUSH
90316: CALL_OW 263
90320: PUSH
90321: LD_INT 1
90323: EQUAL
90324: IFFALSE 90688
// begin driver := IsDrivenBy ( vehicle ) ;
90326: LD_ADDR_VAR 0 5
90330: PUSH
90331: LD_VAR 0 1
90335: PPUSH
90336: CALL_OW 311
90340: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
90341: LD_VAR 0 5
90345: PUSH
90346: LD_EXP 123
90350: IN
90351: IFTRUE 90365
90353: PUSH
90354: LD_VAR 0 1
90358: PUSH
90359: LD_EXP 123
90363: IN
90364: OR
90365: IFFALSE 90371
// exit ;
90367: POP
90368: POP
90369: GO 90839
// if not HasTask ( driver ) then
90371: LD_VAR 0 5
90375: PPUSH
90376: CALL_OW 314
90380: NOT
90381: IFFALSE 90686
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
90383: LD_ADDR_EXP 123
90387: PUSH
90388: LD_EXP 123
90392: PPUSH
90393: LD_VAR 0 5
90397: PPUSH
90398: CALL 68491 0 2
90402: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
90403: LD_ADDR_EXP 123
90407: PUSH
90408: LD_EXP 123
90412: PPUSH
90413: LD_VAR 0 1
90417: PPUSH
90418: CALL 68491 0 2
90422: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90423: LD_ADDR_VAR 0 6
90427: PUSH
90428: LD_EXP 122
90432: PUSH
90433: LD_VAR 0 4
90437: ARRAY
90438: PUSH
90439: LD_INT 3
90441: ARRAY
90442: PPUSH
90443: LD_EXP 122
90447: PUSH
90448: LD_VAR 0 4
90452: ARRAY
90453: PUSH
90454: LD_INT 4
90456: ARRAY
90457: PPUSH
90458: CALL_OW 428
90462: ST_TO_ADDR
// if hex then
90463: LD_VAR 0 6
90467: IFFALSE 90485
// ComMoveUnit ( driver , hex ) else
90469: LD_VAR 0 5
90473: PPUSH
90474: LD_VAR 0 6
90478: PPUSH
90479: CALL_OW 112
90483: GO 90569
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
90485: LD_VAR 0 1
90489: PPUSH
90490: LD_EXP 122
90494: PUSH
90495: LD_VAR 0 4
90499: ARRAY
90500: PUSH
90501: LD_INT 3
90503: ARRAY
90504: PPUSH
90505: LD_EXP 122
90509: PUSH
90510: LD_VAR 0 4
90514: ARRAY
90515: PUSH
90516: LD_INT 4
90518: ARRAY
90519: PPUSH
90520: CALL_OW 297
90524: PUSH
90525: LD_INT 0
90527: GREATER
90528: IFFALSE 90569
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90530: LD_VAR 0 5
90534: PPUSH
90535: LD_EXP 122
90539: PUSH
90540: LD_VAR 0 4
90544: ARRAY
90545: PUSH
90546: LD_INT 3
90548: ARRAY
90549: PPUSH
90550: LD_EXP 122
90554: PUSH
90555: LD_VAR 0 4
90559: ARRAY
90560: PUSH
90561: LD_INT 4
90563: ARRAY
90564: PPUSH
90565: CALL_OW 111
// AddComExitVehicle ( driver ) ;
90569: LD_VAR 0 5
90573: PPUSH
90574: CALL_OW 181
// if Multiplayer then
90578: LD_OWVAR 4
90582: IFFALSE 90631
// begin repeat wait ( 10 ) ;
90584: LD_INT 10
90586: PPUSH
90587: CALL_OW 67
// until not IsInUnit ( driver ) ;
90591: LD_VAR 0 5
90595: PPUSH
90596: CALL_OW 310
90600: NOT
90601: IFFALSE 90584
// if not HasTask ( driver ) then
90603: LD_VAR 0 5
90607: PPUSH
90608: CALL_OW 314
90612: NOT
90613: IFFALSE 90629
// ComEnterUnit ( driver , factory ) ;
90615: LD_VAR 0 5
90619: PPUSH
90620: LD_VAR 0 2
90624: PPUSH
90625: CALL_OW 120
// end else
90629: GO 90645
// AddComEnterUnit ( driver , factory ) ;
90631: LD_VAR 0 5
90635: PPUSH
90636: LD_VAR 0 2
90640: PPUSH
90641: CALL_OW 180
// wait ( 0 0$1 ) ;
90645: LD_INT 35
90647: PPUSH
90648: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
90652: LD_ADDR_EXP 123
90656: PUSH
90657: LD_EXP 123
90661: PUSH
90662: LD_VAR 0 5
90666: DIFF
90667: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
90668: LD_ADDR_EXP 123
90672: PUSH
90673: LD_EXP 123
90677: PUSH
90678: LD_VAR 0 1
90682: DIFF
90683: ST_TO_ADDR
// break ;
90684: GO 90837
// end ; end else
90686: GO 90835
// if GetControl ( vehicle ) = control_remote then
90688: LD_VAR 0 1
90692: PPUSH
90693: CALL_OW 263
90697: PUSH
90698: LD_INT 2
90700: EQUAL
90701: IFFALSE 90787
// begin wait ( 0 0$2 ) ;
90703: LD_INT 70
90705: PPUSH
90706: CALL_OW 67
// repeat wait ( 10 ) ;
90710: LD_INT 10
90712: PPUSH
90713: CALL_OW 67
// Connect ( vehicle ) ;
90717: LD_VAR 0 1
90721: PPUSH
90722: CALL 38793 0 1
// until IsControledBy ( vehicle ) ;
90726: LD_VAR 0 1
90730: PPUSH
90731: CALL_OW 312
90735: IFFALSE 90710
// wait ( 10 ) ;
90737: LD_INT 10
90739: PPUSH
90740: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90744: LD_VAR 0 1
90748: PPUSH
90749: LD_EXP 122
90753: PUSH
90754: LD_VAR 0 4
90758: ARRAY
90759: PUSH
90760: LD_INT 3
90762: ARRAY
90763: PPUSH
90764: LD_EXP 122
90768: PUSH
90769: LD_VAR 0 4
90773: ARRAY
90774: PUSH
90775: LD_INT 4
90777: ARRAY
90778: PPUSH
90779: CALL_OW 111
// break ;
90783: GO 90837
// end else
90785: GO 90835
// begin wait ( 0 0$3 ) ;
90787: LD_INT 105
90789: PPUSH
90790: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90794: LD_VAR 0 1
90798: PPUSH
90799: LD_EXP 122
90803: PUSH
90804: LD_VAR 0 4
90808: ARRAY
90809: PUSH
90810: LD_INT 3
90812: ARRAY
90813: PPUSH
90814: LD_EXP 122
90818: PUSH
90819: LD_VAR 0 4
90823: ARRAY
90824: PUSH
90825: LD_INT 4
90827: ARRAY
90828: PPUSH
90829: CALL_OW 111
// break ;
90833: GO 90837
// end ; end ;
90835: GO 90286
90837: POP
90838: POP
// end ;
90839: LD_VAR 0 3
90843: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
90844: LD_INT 0
90846: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
90847: LD_VAR 0 1
90851: PUSH
90852: LD_INT 250
90854: EQUAL
90855: IFFALSE 90872
90857: PUSH
90858: LD_VAR 0 2
90862: PPUSH
90863: CALL_OW 264
90867: PUSH
90868: LD_INT 81
90870: EQUAL
90871: AND
90872: IFFALSE 90893
// MinerPlaceMine ( unit , x , y ) ;
90874: LD_VAR 0 2
90878: PPUSH
90879: LD_VAR 0 4
90883: PPUSH
90884: LD_VAR 0 5
90888: PPUSH
90889: CALL 94239 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
90893: LD_VAR 0 1
90897: PUSH
90898: LD_INT 251
90900: EQUAL
90901: IFFALSE 90918
90903: PUSH
90904: LD_VAR 0 2
90908: PPUSH
90909: CALL_OW 264
90913: PUSH
90914: LD_INT 81
90916: EQUAL
90917: AND
90918: IFFALSE 90939
// MinerDetonateMine ( unit , x , y ) ;
90920: LD_VAR 0 2
90924: PPUSH
90925: LD_VAR 0 4
90929: PPUSH
90930: LD_VAR 0 5
90934: PPUSH
90935: CALL 94646 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
90939: LD_VAR 0 1
90943: PUSH
90944: LD_INT 252
90946: EQUAL
90947: IFFALSE 90964
90949: PUSH
90950: LD_VAR 0 2
90954: PPUSH
90955: CALL_OW 264
90959: PUSH
90960: LD_INT 81
90962: EQUAL
90963: AND
90964: IFFALSE 90985
// MinerCreateMinefield ( unit , x , y ) ;
90966: LD_VAR 0 2
90970: PPUSH
90971: LD_VAR 0 4
90975: PPUSH
90976: LD_VAR 0 5
90980: PPUSH
90981: CALL 94878 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
90985: LD_VAR 0 1
90989: PUSH
90990: LD_INT 253
90992: EQUAL
90993: IFFALSE 91010
90995: PUSH
90996: LD_VAR 0 2
91000: PPUSH
91001: CALL_OW 257
91005: PUSH
91006: LD_INT 5
91008: EQUAL
91009: AND
91010: IFFALSE 91031
// ComBinocular ( unit , x , y ) ;
91012: LD_VAR 0 2
91016: PPUSH
91017: LD_VAR 0 4
91021: PPUSH
91022: LD_VAR 0 5
91026: PPUSH
91027: CALL 95253 0 3
// if selectedUnit then
91031: LD_VAR 0 3
91035: IFFALSE 91095
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
91037: LD_VAR 0 1
91041: PUSH
91042: LD_INT 254
91044: EQUAL
91045: IFFALSE 91062
91047: PUSH
91048: LD_VAR 0 2
91052: PPUSH
91053: CALL_OW 264
91057: PUSH
91058: LD_INT 99
91060: EQUAL
91061: AND
91062: IFFALSE 91079
91064: PUSH
91065: LD_VAR 0 3
91069: PPUSH
91070: CALL_OW 263
91074: PUSH
91075: LD_INT 3
91077: EQUAL
91078: AND
91079: IFFALSE 91095
// HackDestroyVehicle ( unit , selectedUnit ) ;
91081: LD_VAR 0 2
91085: PPUSH
91086: LD_VAR 0 3
91090: PPUSH
91091: CALL 93429 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
91095: LD_VAR 0 1
91099: PUSH
91100: LD_INT 255
91102: EQUAL
91103: IFFALSE 91127
91105: PUSH
91106: LD_VAR 0 2
91110: PPUSH
91111: CALL_OW 264
91115: PUSH
91116: LD_INT 14
91118: PUSH
91119: LD_INT 53
91121: PUSH
91122: EMPTY
91123: LIST
91124: LIST
91125: IN
91126: AND
91127: IFFALSE 91145
91129: PUSH
91130: LD_VAR 0 4
91134: PPUSH
91135: LD_VAR 0 5
91139: PPUSH
91140: CALL_OW 488
91144: AND
91145: IFFALSE 91169
// CutTreeXYR ( unit , x , y , 12 ) ;
91147: LD_VAR 0 2
91151: PPUSH
91152: LD_VAR 0 4
91156: PPUSH
91157: LD_VAR 0 5
91161: PPUSH
91162: LD_INT 12
91164: PPUSH
91165: CALL 91360 0 4
// if cmd = 256 then
91169: LD_VAR 0 1
91173: PUSH
91174: LD_INT 256
91176: EQUAL
91177: IFFALSE 91198
// SetFactoryWaypoint ( unit , x , y ) ;
91179: LD_VAR 0 2
91183: PPUSH
91184: LD_VAR 0 4
91188: PPUSH
91189: LD_VAR 0 5
91193: PPUSH
91194: CALL 88476 0 3
// if cmd = 257 then
91198: LD_VAR 0 1
91202: PUSH
91203: LD_INT 257
91205: EQUAL
91206: IFFALSE 91227
// SetWarehouseGatheringPoint ( unit , x , y ) ;
91208: LD_VAR 0 2
91212: PPUSH
91213: LD_VAR 0 4
91217: PPUSH
91218: LD_VAR 0 5
91222: PPUSH
91223: CALL 88972 0 3
// if cmd = 258 then
91227: LD_VAR 0 1
91231: PUSH
91232: LD_INT 258
91234: EQUAL
91235: IFFALSE 91259
// BurnTreeXYR ( unit , x , y , 8 ) ;
91237: LD_VAR 0 2
91241: PPUSH
91242: LD_VAR 0 4
91246: PPUSH
91247: LD_VAR 0 5
91251: PPUSH
91252: LD_INT 8
91254: PPUSH
91255: CALL 91782 0 4
// end ;
91259: LD_VAR 0 6
91263: RET
// export function ComRadiation ( un ) ; var eff ; begin
91264: LD_INT 0
91266: PPUSH
91267: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
91268: LD_VAR 0 1
91272: PPUSH
91273: CALL_OW 264
91277: PUSH
91278: LD_INT 91
91280: NONEQUAL
91281: IFFALSE 91285
// exit ;
91283: GO 91355
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
91285: LD_INT 68
91287: PPUSH
91288: LD_VAR 0 1
91292: PPUSH
91293: CALL_OW 255
91297: PPUSH
91298: CALL_OW 321
91302: PUSH
91303: LD_INT 2
91305: EQUAL
91306: IFFALSE 91318
// eff := 50 else
91308: LD_ADDR_VAR 0 3
91312: PUSH
91313: LD_INT 50
91315: ST_TO_ADDR
91316: GO 91326
// eff := 25 ;
91318: LD_ADDR_VAR 0 3
91322: PUSH
91323: LD_INT 25
91325: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91326: LD_VAR 0 1
91330: PPUSH
91331: CALL_OW 250
91335: PPUSH
91336: LD_VAR 0 1
91340: PPUSH
91341: CALL_OW 251
91345: PPUSH
91346: LD_VAR 0 3
91350: PPUSH
91351: CALL_OW 495
// end ;
91355: LD_VAR 0 2
91359: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91360: LD_INT 0
91362: PPUSH
91363: PPUSH
91364: PPUSH
91365: PPUSH
91366: PPUSH
91367: PPUSH
91368: PPUSH
91369: PPUSH
91370: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
91371: LD_VAR 0 1
91375: PPUSH
91376: CALL_OW 302
91380: NOT
91381: IFTRUE 91400
91383: PUSH
91384: LD_VAR 0 2
91388: PPUSH
91389: LD_VAR 0 3
91393: PPUSH
91394: CALL_OW 488
91398: NOT
91399: OR
91400: IFTRUE 91409
91402: PUSH
91403: LD_VAR 0 4
91407: NOT
91408: OR
91409: IFFALSE 91413
// exit ;
91411: GO 91777
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
91413: LD_VAR 0 1
91417: PPUSH
91418: CALL_OW 437
91422: PPUSH
91423: CALL 32515 0 1
91427: PUSH
91428: LD_INT 10
91430: GREATER
91431: IFFALSE 91435
// exit ;
91433: GO 91777
// list := [ ] ;
91435: LD_ADDR_VAR 0 13
91439: PUSH
91440: EMPTY
91441: ST_TO_ADDR
// if x - r < 0 then
91442: LD_VAR 0 2
91446: PUSH
91447: LD_VAR 0 4
91451: MINUS
91452: PUSH
91453: LD_INT 0
91455: LESS
91456: IFFALSE 91468
// min_x := 0 else
91458: LD_ADDR_VAR 0 7
91462: PUSH
91463: LD_INT 0
91465: ST_TO_ADDR
91466: GO 91484
// min_x := x - r ;
91468: LD_ADDR_VAR 0 7
91472: PUSH
91473: LD_VAR 0 2
91477: PUSH
91478: LD_VAR 0 4
91482: MINUS
91483: ST_TO_ADDR
// if y - r < 0 then
91484: LD_VAR 0 3
91488: PUSH
91489: LD_VAR 0 4
91493: MINUS
91494: PUSH
91495: LD_INT 0
91497: LESS
91498: IFFALSE 91510
// min_y := 0 else
91500: LD_ADDR_VAR 0 8
91504: PUSH
91505: LD_INT 0
91507: ST_TO_ADDR
91508: GO 91526
// min_y := y - r ;
91510: LD_ADDR_VAR 0 8
91514: PUSH
91515: LD_VAR 0 3
91519: PUSH
91520: LD_VAR 0 4
91524: MINUS
91525: ST_TO_ADDR
// max_x := x + r ;
91526: LD_ADDR_VAR 0 9
91530: PUSH
91531: LD_VAR 0 2
91535: PUSH
91536: LD_VAR 0 4
91540: PLUS
91541: ST_TO_ADDR
// max_y := y + r ;
91542: LD_ADDR_VAR 0 10
91546: PUSH
91547: LD_VAR 0 3
91551: PUSH
91552: LD_VAR 0 4
91556: PLUS
91557: ST_TO_ADDR
// for _x = min_x to max_x do
91558: LD_ADDR_VAR 0 11
91562: PUSH
91563: DOUBLE
91564: LD_VAR 0 7
91568: DEC
91569: ST_TO_ADDR
91570: LD_VAR 0 9
91574: PUSH
91575: FOR_TO
91576: IFFALSE 91695
// for _y = min_y to max_y do
91578: LD_ADDR_VAR 0 12
91582: PUSH
91583: DOUBLE
91584: LD_VAR 0 8
91588: DEC
91589: ST_TO_ADDR
91590: LD_VAR 0 10
91594: PUSH
91595: FOR_TO
91596: IFFALSE 91691
// begin if not ValidHex ( _x , _y ) then
91598: LD_VAR 0 11
91602: PPUSH
91603: LD_VAR 0 12
91607: PPUSH
91608: CALL_OW 488
91612: NOT
91613: IFFALSE 91617
// continue ;
91615: GO 91595
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91617: LD_VAR 0 11
91621: PPUSH
91622: LD_VAR 0 12
91626: PPUSH
91627: CALL_OW 351
91631: IFFALSE 91649
91633: PUSH
91634: LD_VAR 0 11
91638: PPUSH
91639: LD_VAR 0 12
91643: PPUSH
91644: CALL_OW 554
91648: AND
91649: IFFALSE 91689
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91651: LD_ADDR_VAR 0 13
91655: PUSH
91656: LD_VAR 0 13
91660: PPUSH
91661: LD_VAR 0 13
91665: PUSH
91666: LD_INT 1
91668: PLUS
91669: PPUSH
91670: LD_VAR 0 11
91674: PUSH
91675: LD_VAR 0 12
91679: PUSH
91680: EMPTY
91681: LIST
91682: LIST
91683: PPUSH
91684: CALL_OW 2
91688: ST_TO_ADDR
// end ;
91689: GO 91595
91691: POP
91692: POP
91693: GO 91575
91695: POP
91696: POP
// if not list then
91697: LD_VAR 0 13
91701: NOT
91702: IFFALSE 91706
// exit ;
91704: GO 91777
// for i in list do
91706: LD_ADDR_VAR 0 6
91710: PUSH
91711: LD_VAR 0 13
91715: PUSH
91716: FOR_IN
91717: IFFALSE 91775
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91719: LD_VAR 0 1
91723: PPUSH
91724: LD_STRING M
91726: PUSH
91727: LD_VAR 0 6
91731: PUSH
91732: LD_INT 1
91734: ARRAY
91735: PUSH
91736: LD_VAR 0 6
91740: PUSH
91741: LD_INT 2
91743: ARRAY
91744: PUSH
91745: LD_INT 0
91747: PUSH
91748: LD_INT 0
91750: PUSH
91751: LD_INT 0
91753: PUSH
91754: LD_INT 0
91756: PUSH
91757: EMPTY
91758: LIST
91759: LIST
91760: LIST
91761: LIST
91762: LIST
91763: LIST
91764: LIST
91765: PUSH
91766: EMPTY
91767: LIST
91768: PPUSH
91769: CALL_OW 447
91773: GO 91716
91775: POP
91776: POP
// end ;
91777: LD_VAR 0 5
91781: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
91782: LD_INT 0
91784: PPUSH
91785: PPUSH
91786: PPUSH
91787: PPUSH
91788: PPUSH
91789: PPUSH
91790: PPUSH
91791: PPUSH
91792: PPUSH
91793: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
91794: LD_VAR 0 1
91798: PPUSH
91799: CALL_OW 302
91803: NOT
91804: IFTRUE 91823
91806: PUSH
91807: LD_VAR 0 2
91811: PPUSH
91812: LD_VAR 0 3
91816: PPUSH
91817: CALL_OW 488
91821: NOT
91822: OR
91823: IFTRUE 91832
91825: PUSH
91826: LD_VAR 0 4
91830: NOT
91831: OR
91832: IFFALSE 91836
// exit ;
91834: GO 92375
// if Count ( GetTaskList ( flame ) ) > 10 then
91836: LD_VAR 0 1
91840: PPUSH
91841: CALL_OW 437
91845: PPUSH
91846: CALL 32515 0 1
91850: PUSH
91851: LD_INT 10
91853: GREATER
91854: IFFALSE 91858
// exit ;
91856: GO 92375
// list := [ ] ;
91858: LD_ADDR_VAR 0 13
91862: PUSH
91863: EMPTY
91864: ST_TO_ADDR
// if x - r < 0 then
91865: LD_VAR 0 2
91869: PUSH
91870: LD_VAR 0 4
91874: MINUS
91875: PUSH
91876: LD_INT 0
91878: LESS
91879: IFFALSE 91891
// min_x := 0 else
91881: LD_ADDR_VAR 0 7
91885: PUSH
91886: LD_INT 0
91888: ST_TO_ADDR
91889: GO 91907
// min_x := x - r ;
91891: LD_ADDR_VAR 0 7
91895: PUSH
91896: LD_VAR 0 2
91900: PUSH
91901: LD_VAR 0 4
91905: MINUS
91906: ST_TO_ADDR
// if y - r < 0 then
91907: LD_VAR 0 3
91911: PUSH
91912: LD_VAR 0 4
91916: MINUS
91917: PUSH
91918: LD_INT 0
91920: LESS
91921: IFFALSE 91933
// min_y := 0 else
91923: LD_ADDR_VAR 0 8
91927: PUSH
91928: LD_INT 0
91930: ST_TO_ADDR
91931: GO 91949
// min_y := y - r ;
91933: LD_ADDR_VAR 0 8
91937: PUSH
91938: LD_VAR 0 3
91942: PUSH
91943: LD_VAR 0 4
91947: MINUS
91948: ST_TO_ADDR
// max_x := x + r ;
91949: LD_ADDR_VAR 0 9
91953: PUSH
91954: LD_VAR 0 2
91958: PUSH
91959: LD_VAR 0 4
91963: PLUS
91964: ST_TO_ADDR
// max_y := y + r ;
91965: LD_ADDR_VAR 0 10
91969: PUSH
91970: LD_VAR 0 3
91974: PUSH
91975: LD_VAR 0 4
91979: PLUS
91980: ST_TO_ADDR
// for _x = min_x to max_x do
91981: LD_ADDR_VAR 0 11
91985: PUSH
91986: DOUBLE
91987: LD_VAR 0 7
91991: DEC
91992: ST_TO_ADDR
91993: LD_VAR 0 9
91997: PUSH
91998: FOR_TO
91999: IFFALSE 92118
// for _y = min_y to max_y do
92001: LD_ADDR_VAR 0 12
92005: PUSH
92006: DOUBLE
92007: LD_VAR 0 8
92011: DEC
92012: ST_TO_ADDR
92013: LD_VAR 0 10
92017: PUSH
92018: FOR_TO
92019: IFFALSE 92114
// begin if not ValidHex ( _x , _y ) then
92021: LD_VAR 0 11
92025: PPUSH
92026: LD_VAR 0 12
92030: PPUSH
92031: CALL_OW 488
92035: NOT
92036: IFFALSE 92040
// continue ;
92038: GO 92018
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
92040: LD_VAR 0 11
92044: PPUSH
92045: LD_VAR 0 12
92049: PPUSH
92050: CALL_OW 351
92054: IFFALSE 92072
92056: PUSH
92057: LD_VAR 0 11
92061: PPUSH
92062: LD_VAR 0 12
92066: PPUSH
92067: CALL_OW 554
92071: AND
92072: IFFALSE 92112
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
92074: LD_ADDR_VAR 0 13
92078: PUSH
92079: LD_VAR 0 13
92083: PPUSH
92084: LD_VAR 0 13
92088: PUSH
92089: LD_INT 1
92091: PLUS
92092: PPUSH
92093: LD_VAR 0 11
92097: PUSH
92098: LD_VAR 0 12
92102: PUSH
92103: EMPTY
92104: LIST
92105: LIST
92106: PPUSH
92107: CALL_OW 2
92111: ST_TO_ADDR
// end ;
92112: GO 92018
92114: POP
92115: POP
92116: GO 91998
92118: POP
92119: POP
// if not list then
92120: LD_VAR 0 13
92124: NOT
92125: IFFALSE 92129
// exit ;
92127: GO 92375
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
92129: LD_ADDR_VAR 0 13
92133: PUSH
92134: LD_VAR 0 1
92138: PPUSH
92139: LD_VAR 0 13
92143: PPUSH
92144: LD_INT 1
92146: PPUSH
92147: LD_INT 1
92149: PPUSH
92150: CALL 35921 0 4
92154: ST_TO_ADDR
// ComStop ( flame ) ;
92155: LD_VAR 0 1
92159: PPUSH
92160: CALL_OW 141
// for i in list do
92164: LD_ADDR_VAR 0 6
92168: PUSH
92169: LD_VAR 0 13
92173: PUSH
92174: FOR_IN
92175: IFFALSE 92206
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
92177: LD_VAR 0 1
92181: PPUSH
92182: LD_VAR 0 6
92186: PUSH
92187: LD_INT 1
92189: ARRAY
92190: PPUSH
92191: LD_VAR 0 6
92195: PUSH
92196: LD_INT 2
92198: ARRAY
92199: PPUSH
92200: CALL_OW 176
92204: GO 92174
92206: POP
92207: POP
// repeat wait ( 0 0$1 ) ;
92208: LD_INT 35
92210: PPUSH
92211: CALL_OW 67
// task := GetTaskList ( flame ) ;
92215: LD_ADDR_VAR 0 14
92219: PUSH
92220: LD_VAR 0 1
92224: PPUSH
92225: CALL_OW 437
92229: ST_TO_ADDR
// if not task then
92230: LD_VAR 0 14
92234: NOT
92235: IFFALSE 92239
// exit ;
92237: GO 92375
// if task [ 1 ] [ 1 ] <> | then
92239: LD_VAR 0 14
92243: PUSH
92244: LD_INT 1
92246: ARRAY
92247: PUSH
92248: LD_INT 1
92250: ARRAY
92251: PUSH
92252: LD_STRING |
92254: NONEQUAL
92255: IFFALSE 92259
// exit ;
92257: GO 92375
// _x := task [ 1 ] [ 2 ] ;
92259: LD_ADDR_VAR 0 11
92263: PUSH
92264: LD_VAR 0 14
92268: PUSH
92269: LD_INT 1
92271: ARRAY
92272: PUSH
92273: LD_INT 2
92275: ARRAY
92276: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
92277: LD_ADDR_VAR 0 12
92281: PUSH
92282: LD_VAR 0 14
92286: PUSH
92287: LD_INT 1
92289: ARRAY
92290: PUSH
92291: LD_INT 3
92293: ARRAY
92294: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
92295: LD_VAR 0 11
92299: PPUSH
92300: LD_VAR 0 12
92304: PPUSH
92305: CALL_OW 351
92309: NOT
92310: IFTRUE 92329
92312: PUSH
92313: LD_VAR 0 11
92317: PPUSH
92318: LD_VAR 0 12
92322: PPUSH
92323: CALL_OW 554
92327: NOT
92328: OR
92329: IFFALSE 92363
// begin task := Delete ( task , 1 ) ;
92331: LD_ADDR_VAR 0 14
92335: PUSH
92336: LD_VAR 0 14
92340: PPUSH
92341: LD_INT 1
92343: PPUSH
92344: CALL_OW 3
92348: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
92349: LD_VAR 0 1
92353: PPUSH
92354: LD_VAR 0 14
92358: PPUSH
92359: CALL_OW 446
// end ; until not HasTask ( flame ) ;
92363: LD_VAR 0 1
92367: PPUSH
92368: CALL_OW 314
92372: NOT
92373: IFFALSE 92208
// end ;
92375: LD_VAR 0 5
92379: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
92380: LD_EXP 126
92384: NOT
92385: IFFALSE 92435
92387: GO 92389
92389: DISABLE
// begin initHack := true ;
92390: LD_ADDR_EXP 126
92394: PUSH
92395: LD_INT 1
92397: ST_TO_ADDR
// hackTanks := [ ] ;
92398: LD_ADDR_EXP 127
92402: PUSH
92403: EMPTY
92404: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
92405: LD_ADDR_EXP 128
92409: PUSH
92410: EMPTY
92411: ST_TO_ADDR
// hackLimit := 3 ;
92412: LD_ADDR_EXP 129
92416: PUSH
92417: LD_INT 3
92419: ST_TO_ADDR
// hackDist := 12 ;
92420: LD_ADDR_EXP 130
92424: PUSH
92425: LD_INT 12
92427: ST_TO_ADDR
// hackCounter := [ ] ;
92428: LD_ADDR_EXP 131
92432: PUSH
92433: EMPTY
92434: ST_TO_ADDR
// end ;
92435: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
92436: LD_EXP 126
92440: IFFALSE 92458
92442: PUSH
92443: LD_INT 34
92445: PUSH
92446: LD_INT 99
92448: PUSH
92449: EMPTY
92450: LIST
92451: LIST
92452: PPUSH
92453: CALL_OW 69
92457: AND
92458: IFFALSE 92711
92460: GO 92462
92462: DISABLE
92463: LD_INT 0
92465: PPUSH
92466: PPUSH
// begin enable ;
92467: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
92468: LD_ADDR_VAR 0 1
92472: PUSH
92473: LD_INT 34
92475: PUSH
92476: LD_INT 99
92478: PUSH
92479: EMPTY
92480: LIST
92481: LIST
92482: PPUSH
92483: CALL_OW 69
92487: PUSH
92488: FOR_IN
92489: IFFALSE 92709
// begin if not i in hackTanks then
92491: LD_VAR 0 1
92495: PUSH
92496: LD_EXP 127
92500: IN
92501: NOT
92502: IFFALSE 92585
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
92504: LD_ADDR_EXP 127
92508: PUSH
92509: LD_EXP 127
92513: PPUSH
92514: LD_EXP 127
92518: PUSH
92519: LD_INT 1
92521: PLUS
92522: PPUSH
92523: LD_VAR 0 1
92527: PPUSH
92528: CALL_OW 1
92532: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
92533: LD_ADDR_EXP 128
92537: PUSH
92538: LD_EXP 128
92542: PPUSH
92543: LD_EXP 128
92547: PUSH
92548: LD_INT 1
92550: PLUS
92551: PPUSH
92552: EMPTY
92553: PPUSH
92554: CALL_OW 1
92558: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
92559: LD_ADDR_EXP 131
92563: PUSH
92564: LD_EXP 131
92568: PPUSH
92569: LD_EXP 131
92573: PUSH
92574: LD_INT 1
92576: PLUS
92577: PPUSH
92578: EMPTY
92579: PPUSH
92580: CALL_OW 1
92584: ST_TO_ADDR
// end ; if not IsOk ( i ) then
92585: LD_VAR 0 1
92589: PPUSH
92590: CALL_OW 302
92594: NOT
92595: IFFALSE 92608
// begin HackUnlinkAll ( i ) ;
92597: LD_VAR 0 1
92601: PPUSH
92602: CALL 92714 0 1
// continue ;
92606: GO 92488
// end ; HackCheckCapturedStatus ( i ) ;
92608: LD_VAR 0 1
92612: PPUSH
92613: CALL 93159 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
92617: LD_ADDR_VAR 0 2
92621: PUSH
92622: LD_INT 81
92624: PUSH
92625: LD_VAR 0 1
92629: PPUSH
92630: CALL_OW 255
92634: PUSH
92635: EMPTY
92636: LIST
92637: LIST
92638: PUSH
92639: LD_INT 33
92641: PUSH
92642: LD_INT 3
92644: PUSH
92645: EMPTY
92646: LIST
92647: LIST
92648: PUSH
92649: LD_INT 91
92651: PUSH
92652: LD_VAR 0 1
92656: PUSH
92657: LD_EXP 130
92661: PUSH
92662: EMPTY
92663: LIST
92664: LIST
92665: LIST
92666: PUSH
92667: LD_INT 50
92669: PUSH
92670: EMPTY
92671: LIST
92672: PUSH
92673: EMPTY
92674: LIST
92675: LIST
92676: LIST
92677: LIST
92678: PPUSH
92679: CALL_OW 69
92683: ST_TO_ADDR
// if not tmp then
92684: LD_VAR 0 2
92688: NOT
92689: IFFALSE 92693
// continue ;
92691: GO 92488
// HackLink ( i , tmp ) ;
92693: LD_VAR 0 1
92697: PPUSH
92698: LD_VAR 0 2
92702: PPUSH
92703: CALL 92850 0 2
// end ;
92707: GO 92488
92709: POP
92710: POP
// end ;
92711: PPOPN 2
92713: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
92714: LD_INT 0
92716: PPUSH
92717: PPUSH
92718: PPUSH
// if not hack in hackTanks then
92719: LD_VAR 0 1
92723: PUSH
92724: LD_EXP 127
92728: IN
92729: NOT
92730: IFFALSE 92734
// exit ;
92732: GO 92845
// index := GetElementIndex ( hackTanks , hack ) ;
92734: LD_ADDR_VAR 0 4
92738: PUSH
92739: LD_EXP 127
92743: PPUSH
92744: LD_VAR 0 1
92748: PPUSH
92749: CALL 35216 0 2
92753: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
92754: LD_EXP 128
92758: PUSH
92759: LD_VAR 0 4
92763: ARRAY
92764: IFFALSE 92845
// begin for i in hackTanksCaptured [ index ] do
92766: LD_ADDR_VAR 0 3
92770: PUSH
92771: LD_EXP 128
92775: PUSH
92776: LD_VAR 0 4
92780: ARRAY
92781: PUSH
92782: FOR_IN
92783: IFFALSE 92809
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
92785: LD_VAR 0 3
92789: PUSH
92790: LD_INT 1
92792: ARRAY
92793: PPUSH
92794: LD_VAR 0 3
92798: PUSH
92799: LD_INT 2
92801: ARRAY
92802: PPUSH
92803: CALL_OW 235
92807: GO 92782
92809: POP
92810: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
92811: LD_ADDR_EXP 128
92815: PUSH
92816: LD_EXP 128
92820: PPUSH
92821: LD_VAR 0 4
92825: PPUSH
92826: EMPTY
92827: PPUSH
92828: CALL_OW 1
92832: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
92833: LD_VAR 0 1
92837: PPUSH
92838: LD_INT 0
92840: PPUSH
92841: CALL_OW 505
// end ; end ;
92845: LD_VAR 0 2
92849: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
92850: LD_INT 0
92852: PPUSH
92853: PPUSH
92854: PPUSH
// if not hack in hackTanks or not vehicles then
92855: LD_VAR 0 1
92859: PUSH
92860: LD_EXP 127
92864: IN
92865: NOT
92866: IFTRUE 92875
92868: PUSH
92869: LD_VAR 0 2
92873: NOT
92874: OR
92875: IFFALSE 92879
// exit ;
92877: GO 93154
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
92879: LD_ADDR_VAR 0 2
92883: PUSH
92884: LD_VAR 0 1
92888: PPUSH
92889: LD_VAR 0 2
92893: PPUSH
92894: LD_INT 1
92896: PPUSH
92897: LD_INT 1
92899: PPUSH
92900: CALL 35868 0 4
92904: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
92905: LD_ADDR_VAR 0 5
92909: PUSH
92910: LD_EXP 127
92914: PPUSH
92915: LD_VAR 0 1
92919: PPUSH
92920: CALL 35216 0 2
92924: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
92925: LD_EXP 128
92929: PUSH
92930: LD_VAR 0 5
92934: ARRAY
92935: PUSH
92936: LD_EXP 129
92940: LESS
92941: IFFALSE 93130
// begin for i := 1 to vehicles do
92943: LD_ADDR_VAR 0 4
92947: PUSH
92948: DOUBLE
92949: LD_INT 1
92951: DEC
92952: ST_TO_ADDR
92953: LD_VAR 0 2
92957: PUSH
92958: FOR_TO
92959: IFFALSE 93128
// begin if hackTanksCaptured [ index ] = hackLimit then
92961: LD_EXP 128
92965: PUSH
92966: LD_VAR 0 5
92970: ARRAY
92971: PUSH
92972: LD_EXP 129
92976: EQUAL
92977: IFFALSE 92981
// break ;
92979: GO 93128
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
92981: LD_ADDR_EXP 131
92985: PUSH
92986: LD_EXP 131
92990: PPUSH
92991: LD_VAR 0 5
92995: PPUSH
92996: LD_EXP 131
93000: PUSH
93001: LD_VAR 0 5
93005: ARRAY
93006: PUSH
93007: LD_INT 1
93009: PLUS
93010: PPUSH
93011: CALL_OW 1
93015: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
93016: LD_ADDR_EXP 128
93020: PUSH
93021: LD_EXP 128
93025: PPUSH
93026: LD_VAR 0 5
93030: PUSH
93031: LD_EXP 128
93035: PUSH
93036: LD_VAR 0 5
93040: ARRAY
93041: PUSH
93042: LD_INT 1
93044: PLUS
93045: PUSH
93046: EMPTY
93047: LIST
93048: LIST
93049: PPUSH
93050: LD_VAR 0 2
93054: PUSH
93055: LD_VAR 0 4
93059: ARRAY
93060: PUSH
93061: LD_VAR 0 2
93065: PUSH
93066: LD_VAR 0 4
93070: ARRAY
93071: PPUSH
93072: CALL_OW 255
93076: PUSH
93077: EMPTY
93078: LIST
93079: LIST
93080: PPUSH
93081: CALL 35433 0 3
93085: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
93086: LD_VAR 0 2
93090: PUSH
93091: LD_VAR 0 4
93095: ARRAY
93096: PPUSH
93097: LD_VAR 0 1
93101: PPUSH
93102: CALL_OW 255
93106: PPUSH
93107: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
93111: LD_VAR 0 2
93115: PUSH
93116: LD_VAR 0 4
93120: ARRAY
93121: PPUSH
93122: CALL_OW 141
// end ;
93126: GO 92958
93128: POP
93129: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
93130: LD_VAR 0 1
93134: PPUSH
93135: LD_EXP 128
93139: PUSH
93140: LD_VAR 0 5
93144: ARRAY
93145: PUSH
93146: LD_INT 0
93148: PLUS
93149: PPUSH
93150: CALL_OW 505
// end ;
93154: LD_VAR 0 3
93158: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
93159: LD_INT 0
93161: PPUSH
93162: PPUSH
93163: PPUSH
93164: PPUSH
// if not hack in hackTanks then
93165: LD_VAR 0 1
93169: PUSH
93170: LD_EXP 127
93174: IN
93175: NOT
93176: IFFALSE 93180
// exit ;
93178: GO 93424
// index := GetElementIndex ( hackTanks , hack ) ;
93180: LD_ADDR_VAR 0 4
93184: PUSH
93185: LD_EXP 127
93189: PPUSH
93190: LD_VAR 0 1
93194: PPUSH
93195: CALL 35216 0 2
93199: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
93200: LD_ADDR_VAR 0 3
93204: PUSH
93205: DOUBLE
93206: LD_EXP 128
93210: PUSH
93211: LD_VAR 0 4
93215: ARRAY
93216: INC
93217: ST_TO_ADDR
93218: LD_INT 1
93220: PUSH
93221: FOR_DOWNTO
93222: IFFALSE 93398
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
93224: LD_ADDR_VAR 0 5
93228: PUSH
93229: LD_EXP 128
93233: PUSH
93234: LD_VAR 0 4
93238: ARRAY
93239: PUSH
93240: LD_VAR 0 3
93244: ARRAY
93245: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
93246: LD_VAR 0 5
93250: PUSH
93251: LD_INT 1
93253: ARRAY
93254: PPUSH
93255: CALL_OW 302
93259: NOT
93260: IFTRUE 93288
93262: PUSH
93263: LD_VAR 0 5
93267: PUSH
93268: LD_INT 1
93270: ARRAY
93271: PPUSH
93272: CALL_OW 255
93276: PUSH
93277: LD_VAR 0 1
93281: PPUSH
93282: CALL_OW 255
93286: NONEQUAL
93287: OR
93288: IFFALSE 93396
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
93290: LD_VAR 0 5
93294: PUSH
93295: LD_INT 1
93297: ARRAY
93298: PPUSH
93299: CALL_OW 305
93303: IFFALSE 93331
93305: PUSH
93306: LD_VAR 0 5
93310: PUSH
93311: LD_INT 1
93313: ARRAY
93314: PPUSH
93315: CALL_OW 255
93319: PUSH
93320: LD_VAR 0 1
93324: PPUSH
93325: CALL_OW 255
93329: EQUAL
93330: AND
93331: IFFALSE 93355
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
93333: LD_VAR 0 5
93337: PUSH
93338: LD_INT 1
93340: ARRAY
93341: PPUSH
93342: LD_VAR 0 5
93346: PUSH
93347: LD_INT 2
93349: ARRAY
93350: PPUSH
93351: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
93355: LD_ADDR_EXP 128
93359: PUSH
93360: LD_EXP 128
93364: PPUSH
93365: LD_VAR 0 4
93369: PPUSH
93370: LD_EXP 128
93374: PUSH
93375: LD_VAR 0 4
93379: ARRAY
93380: PPUSH
93381: LD_VAR 0 3
93385: PPUSH
93386: CALL_OW 3
93390: PPUSH
93391: CALL_OW 1
93395: ST_TO_ADDR
// end ; end ;
93396: GO 93221
93398: POP
93399: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
93400: LD_VAR 0 1
93404: PPUSH
93405: LD_EXP 128
93409: PUSH
93410: LD_VAR 0 4
93414: ARRAY
93415: PUSH
93416: LD_INT 0
93418: PLUS
93419: PPUSH
93420: CALL_OW 505
// end ;
93424: LD_VAR 0 2
93428: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
93429: LD_INT 0
93431: PPUSH
93432: PPUSH
93433: PPUSH
93434: PPUSH
// if not hack in hackTanks then
93435: LD_VAR 0 1
93439: PUSH
93440: LD_EXP 127
93444: IN
93445: NOT
93446: IFFALSE 93450
// exit ;
93448: GO 93535
// index := GetElementIndex ( hackTanks , hack ) ;
93450: LD_ADDR_VAR 0 5
93454: PUSH
93455: LD_EXP 127
93459: PPUSH
93460: LD_VAR 0 1
93464: PPUSH
93465: CALL 35216 0 2
93469: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
93470: LD_ADDR_VAR 0 4
93474: PUSH
93475: DOUBLE
93476: LD_INT 1
93478: DEC
93479: ST_TO_ADDR
93480: LD_EXP 128
93484: PUSH
93485: LD_VAR 0 5
93489: ARRAY
93490: PUSH
93491: FOR_TO
93492: IFFALSE 93533
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
93494: LD_EXP 128
93498: PUSH
93499: LD_VAR 0 5
93503: ARRAY
93504: PUSH
93505: LD_VAR 0 4
93509: ARRAY
93510: PUSH
93511: LD_INT 1
93513: ARRAY
93514: PUSH
93515: LD_VAR 0 2
93519: EQUAL
93520: IFFALSE 93531
// KillUnit ( vehicle ) ;
93522: LD_VAR 0 2
93526: PPUSH
93527: CALL_OW 66
93531: GO 93491
93533: POP
93534: POP
// end ;
93535: LD_VAR 0 3
93539: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
93540: LD_EXP 132
93544: NOT
93545: IFFALSE 93678
93547: GO 93549
93549: DISABLE
93550: LD_INT 0
93552: PPUSH
// begin initMiner := true ;
93553: LD_ADDR_EXP 132
93557: PUSH
93558: LD_INT 1
93560: ST_TO_ADDR
// minersList := [ ] ;
93561: LD_ADDR_EXP 133
93565: PUSH
93566: EMPTY
93567: ST_TO_ADDR
// minerMinesList := [ ] ;
93568: LD_ADDR_EXP 134
93572: PUSH
93573: EMPTY
93574: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
93575: LD_ADDR_EXP 135
93579: PUSH
93580: LD_INT 10
93582: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
93583: LD_ADDR_VAR 0 1
93587: PUSH
93588: LD_INT 34
93590: PUSH
93591: LD_INT 81
93593: PUSH
93594: EMPTY
93595: LIST
93596: LIST
93597: PPUSH
93598: CALL_OW 69
93602: PUSH
93603: FOR_IN
93604: IFFALSE 93676
// begin if not i in minersList then
93606: LD_VAR 0 1
93610: PUSH
93611: LD_EXP 133
93615: IN
93616: NOT
93617: IFFALSE 93674
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
93619: LD_ADDR_EXP 133
93623: PUSH
93624: LD_EXP 133
93628: PPUSH
93629: LD_EXP 133
93633: PUSH
93634: LD_INT 1
93636: PLUS
93637: PPUSH
93638: LD_VAR 0 1
93642: PPUSH
93643: CALL_OW 1
93647: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
93648: LD_ADDR_EXP 134
93652: PUSH
93653: LD_EXP 134
93657: PPUSH
93658: LD_EXP 134
93662: PUSH
93663: LD_INT 1
93665: PLUS
93666: PPUSH
93667: EMPTY
93668: PPUSH
93669: CALL_OW 1
93673: ST_TO_ADDR
// end end ;
93674: GO 93603
93676: POP
93677: POP
// end ;
93678: PPOPN 1
93680: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
93681: LD_EXP 132
93685: IFFALSE 93716
93687: PUSH
93688: LD_EXP 134
93692: PPUSH
93693: CALL 32515 0 1
93697: IFTRUE 93715
93699: PUSH
93700: LD_INT 34
93702: PUSH
93703: LD_INT 81
93705: PUSH
93706: EMPTY
93707: LIST
93708: LIST
93709: PPUSH
93710: CALL_OW 69
93714: OR
93715: AND
93716: IFFALSE 94236
93718: GO 93720
93720: DISABLE
93721: LD_INT 0
93723: PPUSH
93724: PPUSH
93725: PPUSH
93726: PPUSH
// begin enable ;
93727: ENABLE
// for i := minerMinesList downto 1 do
93728: LD_ADDR_VAR 0 1
93732: PUSH
93733: DOUBLE
93734: LD_EXP 134
93738: INC
93739: ST_TO_ADDR
93740: LD_INT 1
93742: PUSH
93743: FOR_DOWNTO
93744: IFFALSE 94234
// begin side := GetSide ( minersList [ i ] ) ;
93746: LD_ADDR_VAR 0 3
93750: PUSH
93751: LD_EXP 133
93755: PUSH
93756: LD_VAR 0 1
93760: ARRAY
93761: PPUSH
93762: CALL_OW 255
93766: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
93767: LD_EXP 133
93771: PUSH
93772: LD_VAR 0 1
93776: ARRAY
93777: PPUSH
93778: CALL_OW 300
93782: IFFALSE 93803
93784: PUSH
93785: LD_VAR 0 3
93789: PUSH
93790: LD_OWVAR 2
93794: PUSH
93795: LD_INT 9
93797: PUSH
93798: EMPTY
93799: LIST
93800: LIST
93801: IN
93802: AND
93803: IFFALSE 93836
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
93805: LD_EXP 133
93809: PUSH
93810: LD_VAR 0 1
93814: ARRAY
93815: PPUSH
93816: LD_EXP 134
93820: PUSH
93821: LD_VAR 0 1
93825: ARRAY
93826: PPUSH
93827: CALL 32515 0 1
93831: PPUSH
93832: CALL_OW 505
// if not minerMinesList [ i ] then
93836: LD_EXP 134
93840: PUSH
93841: LD_VAR 0 1
93845: ARRAY
93846: NOT
93847: IFFALSE 93851
// continue ;
93849: GO 93743
// for j := minerMinesList [ i ] downto 1 do
93851: LD_ADDR_VAR 0 2
93855: PUSH
93856: DOUBLE
93857: LD_EXP 134
93861: PUSH
93862: LD_VAR 0 1
93866: ARRAY
93867: INC
93868: ST_TO_ADDR
93869: LD_INT 1
93871: PUSH
93872: FOR_DOWNTO
93873: IFFALSE 94230
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
93875: LD_EXP 133
93879: PUSH
93880: LD_VAR 0 1
93884: ARRAY
93885: PPUSH
93886: CALL_OW 301
93890: IFTRUE 93910
93892: PUSH
93893: LD_EXP 133
93897: PUSH
93898: LD_VAR 0 1
93902: ARRAY
93903: PPUSH
93904: CALL_OW 305
93908: NOT
93909: OR
93910: IFFALSE 94001
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
93912: LD_EXP 134
93916: PUSH
93917: LD_VAR 0 1
93921: ARRAY
93922: PUSH
93923: LD_VAR 0 2
93927: ARRAY
93928: PUSH
93929: LD_INT 1
93931: ARRAY
93932: PPUSH
93933: LD_EXP 134
93937: PUSH
93938: LD_VAR 0 1
93942: ARRAY
93943: PUSH
93944: LD_VAR 0 2
93948: ARRAY
93949: PUSH
93950: LD_INT 2
93952: ARRAY
93953: PPUSH
93954: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
93958: LD_ADDR_EXP 134
93962: PUSH
93963: LD_EXP 134
93967: PPUSH
93968: LD_VAR 0 1
93972: PPUSH
93973: LD_EXP 134
93977: PUSH
93978: LD_VAR 0 1
93982: ARRAY
93983: PPUSH
93984: LD_VAR 0 2
93988: PPUSH
93989: CALL_OW 3
93993: PPUSH
93994: CALL_OW 1
93998: ST_TO_ADDR
// continue ;
93999: GO 93872
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
94001: LD_ADDR_VAR 0 4
94005: PUSH
94006: LD_EXP 134
94010: PUSH
94011: LD_VAR 0 1
94015: ARRAY
94016: PUSH
94017: LD_VAR 0 2
94021: ARRAY
94022: PUSH
94023: LD_INT 1
94025: ARRAY
94026: PPUSH
94027: LD_EXP 134
94031: PUSH
94032: LD_VAR 0 1
94036: ARRAY
94037: PUSH
94038: LD_VAR 0 2
94042: ARRAY
94043: PUSH
94044: LD_INT 2
94046: ARRAY
94047: PPUSH
94048: CALL_OW 428
94052: ST_TO_ADDR
// if not tmp then
94053: LD_VAR 0 4
94057: NOT
94058: IFFALSE 94062
// continue ;
94060: GO 93872
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
94062: LD_VAR 0 4
94066: PUSH
94067: LD_INT 81
94069: PUSH
94070: LD_VAR 0 3
94074: PUSH
94075: EMPTY
94076: LIST
94077: LIST
94078: PPUSH
94079: CALL_OW 69
94083: IN
94084: IFFALSE 94134
94086: PUSH
94087: LD_EXP 134
94091: PUSH
94092: LD_VAR 0 1
94096: ARRAY
94097: PUSH
94098: LD_VAR 0 2
94102: ARRAY
94103: PUSH
94104: LD_INT 1
94106: ARRAY
94107: PPUSH
94108: LD_EXP 134
94112: PUSH
94113: LD_VAR 0 1
94117: ARRAY
94118: PUSH
94119: LD_VAR 0 2
94123: ARRAY
94124: PUSH
94125: LD_INT 2
94127: ARRAY
94128: PPUSH
94129: CALL_OW 458
94133: AND
94134: IFFALSE 94228
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
94136: LD_EXP 134
94140: PUSH
94141: LD_VAR 0 1
94145: ARRAY
94146: PUSH
94147: LD_VAR 0 2
94151: ARRAY
94152: PUSH
94153: LD_INT 1
94155: ARRAY
94156: PPUSH
94157: LD_EXP 134
94161: PUSH
94162: LD_VAR 0 1
94166: ARRAY
94167: PUSH
94168: LD_VAR 0 2
94172: ARRAY
94173: PUSH
94174: LD_INT 2
94176: ARRAY
94177: PPUSH
94178: LD_VAR 0 3
94182: PPUSH
94183: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
94187: LD_ADDR_EXP 134
94191: PUSH
94192: LD_EXP 134
94196: PPUSH
94197: LD_VAR 0 1
94201: PPUSH
94202: LD_EXP 134
94206: PUSH
94207: LD_VAR 0 1
94211: ARRAY
94212: PPUSH
94213: LD_VAR 0 2
94217: PPUSH
94218: CALL_OW 3
94222: PPUSH
94223: CALL_OW 1
94227: ST_TO_ADDR
// end ; end ;
94228: GO 93872
94230: POP
94231: POP
// end ;
94232: GO 93743
94234: POP
94235: POP
// end ;
94236: PPOPN 4
94238: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
94239: LD_INT 0
94241: PPUSH
94242: PPUSH
94243: PPUSH
94244: PPUSH
// result := false ;
94245: LD_ADDR_VAR 0 4
94249: PUSH
94250: LD_INT 0
94252: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
94253: LD_VAR 0 1
94257: PPUSH
94258: CALL_OW 264
94262: PUSH
94263: LD_INT 81
94265: EQUAL
94266: NOT
94267: IFFALSE 94271
// exit ;
94269: GO 94641
// side := GetSide ( unit ) ;
94271: LD_ADDR_VAR 0 6
94275: PUSH
94276: LD_VAR 0 1
94280: PPUSH
94281: CALL_OW 255
94285: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
94286: LD_ADDR_VAR 0 5
94290: PUSH
94291: LD_EXP 133
94295: PPUSH
94296: LD_VAR 0 1
94300: PPUSH
94301: CALL 35216 0 2
94305: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
94306: LD_EXP 134
94310: PUSH
94311: LD_VAR 0 5
94315: ARRAY
94316: PUSH
94317: LD_EXP 135
94321: GREATEREQUAL
94322: IFFALSE 94326
// exit ;
94324: GO 94641
// ComMoveXY ( unit , x , y ) ;
94326: LD_VAR 0 1
94330: PPUSH
94331: LD_VAR 0 2
94335: PPUSH
94336: LD_VAR 0 3
94340: PPUSH
94341: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
94345: LD_INT 35
94347: PPUSH
94348: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
94352: LD_VAR 0 1
94356: PPUSH
94357: LD_VAR 0 2
94361: PPUSH
94362: LD_VAR 0 3
94366: PPUSH
94367: CALL 67272 0 3
94371: NOT
94372: IFFALSE 94385
94374: PUSH
94375: LD_VAR 0 1
94379: PPUSH
94380: CALL_OW 314
94384: AND
94385: IFFALSE 94389
// exit ;
94387: GO 94641
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
94389: LD_VAR 0 2
94393: PPUSH
94394: LD_VAR 0 3
94398: PPUSH
94399: CALL_OW 428
94403: PUSH
94404: LD_VAR 0 1
94408: EQUAL
94409: IFFALSE 94423
94411: PUSH
94412: LD_VAR 0 1
94416: PPUSH
94417: CALL_OW 314
94421: NOT
94422: AND
94423: IFFALSE 94345
// if MineAtPos ( x , y ) then
94425: LD_VAR 0 2
94429: PPUSH
94430: LD_VAR 0 3
94434: PPUSH
94435: CALL_OW 458
94439: IFFALSE 94443
// exit ;
94441: GO 94641
// if your_side = side then
94443: LD_OWVAR 2
94447: PUSH
94448: LD_VAR 0 6
94452: EQUAL
94453: IFFALSE 94472
// PlaySoundXY ( x , y , PlantMine ) ;
94455: LD_VAR 0 2
94459: PPUSH
94460: LD_VAR 0 3
94464: PPUSH
94465: LD_STRING PlantMine
94467: PPUSH
94468: CALL_OW 366
// repeat wait ( 1 ) ;
94472: LD_INT 1
94474: PPUSH
94475: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
94479: LD_VAR 0 2
94483: PPUSH
94484: LD_VAR 0 3
94488: PPUSH
94489: LD_VAR 0 6
94493: PPUSH
94494: LD_INT 0
94496: PPUSH
94497: CALL_OW 454
94501: IFFALSE 94472
// if MineAtPos ( x , y ) then
94503: LD_VAR 0 2
94507: PPUSH
94508: LD_VAR 0 3
94512: PPUSH
94513: CALL_OW 458
94517: IFFALSE 94633
// begin for i in minerMinesList [ index ] do
94519: LD_ADDR_VAR 0 7
94523: PUSH
94524: LD_EXP 134
94528: PUSH
94529: LD_VAR 0 5
94533: ARRAY
94534: PUSH
94535: FOR_IN
94536: IFFALSE 94578
// if i [ 1 ] = x and i [ 2 ] = y then
94538: LD_VAR 0 7
94542: PUSH
94543: LD_INT 1
94545: ARRAY
94546: PUSH
94547: LD_VAR 0 2
94551: EQUAL
94552: IFFALSE 94570
94554: PUSH
94555: LD_VAR 0 7
94559: PUSH
94560: LD_INT 2
94562: ARRAY
94563: PUSH
94564: LD_VAR 0 3
94568: EQUAL
94569: AND
94570: IFFALSE 94576
// exit ;
94572: POP
94573: POP
94574: GO 94641
94576: GO 94535
94578: POP
94579: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
94580: LD_ADDR_EXP 134
94584: PUSH
94585: LD_EXP 134
94589: PPUSH
94590: LD_VAR 0 5
94594: PUSH
94595: LD_EXP 134
94599: PUSH
94600: LD_VAR 0 5
94604: ARRAY
94605: PUSH
94606: LD_INT 1
94608: PLUS
94609: PUSH
94610: EMPTY
94611: LIST
94612: LIST
94613: PPUSH
94614: LD_VAR 0 2
94618: PUSH
94619: LD_VAR 0 3
94623: PUSH
94624: EMPTY
94625: LIST
94626: LIST
94627: PPUSH
94628: CALL 35433 0 3
94632: ST_TO_ADDR
// end ; result := true ;
94633: LD_ADDR_VAR 0 4
94637: PUSH
94638: LD_INT 1
94640: ST_TO_ADDR
// end ;
94641: LD_VAR 0 4
94645: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
94646: LD_INT 0
94648: PPUSH
94649: PPUSH
94650: PPUSH
// if not unit in minersList then
94651: LD_VAR 0 1
94655: PUSH
94656: LD_EXP 133
94660: IN
94661: NOT
94662: IFFALSE 94666
// exit ;
94664: GO 94873
// index := GetElementIndex ( minersList , unit ) ;
94666: LD_ADDR_VAR 0 6
94670: PUSH
94671: LD_EXP 133
94675: PPUSH
94676: LD_VAR 0 1
94680: PPUSH
94681: CALL 35216 0 2
94685: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
94686: LD_ADDR_VAR 0 5
94690: PUSH
94691: DOUBLE
94692: LD_EXP 134
94696: PUSH
94697: LD_VAR 0 6
94701: ARRAY
94702: INC
94703: ST_TO_ADDR
94704: LD_INT 1
94706: PUSH
94707: FOR_DOWNTO
94708: IFFALSE 94871
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
94710: LD_EXP 134
94714: PUSH
94715: LD_VAR 0 6
94719: ARRAY
94720: PUSH
94721: LD_VAR 0 5
94725: ARRAY
94726: PUSH
94727: LD_INT 1
94729: ARRAY
94730: PPUSH
94731: LD_EXP 134
94735: PUSH
94736: LD_VAR 0 6
94740: ARRAY
94741: PUSH
94742: LD_VAR 0 5
94746: ARRAY
94747: PUSH
94748: LD_INT 2
94750: ARRAY
94751: PPUSH
94752: LD_VAR 0 2
94756: PPUSH
94757: LD_VAR 0 3
94761: PPUSH
94762: CALL_OW 298
94766: PUSH
94767: LD_INT 6
94769: LESS
94770: IFFALSE 94869
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
94772: LD_EXP 134
94776: PUSH
94777: LD_VAR 0 6
94781: ARRAY
94782: PUSH
94783: LD_VAR 0 5
94787: ARRAY
94788: PUSH
94789: LD_INT 1
94791: ARRAY
94792: PPUSH
94793: LD_EXP 134
94797: PUSH
94798: LD_VAR 0 6
94802: ARRAY
94803: PUSH
94804: LD_VAR 0 5
94808: ARRAY
94809: PUSH
94810: LD_INT 2
94812: ARRAY
94813: PPUSH
94814: LD_VAR 0 1
94818: PPUSH
94819: CALL_OW 255
94823: PPUSH
94824: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
94828: LD_ADDR_EXP 134
94832: PUSH
94833: LD_EXP 134
94837: PPUSH
94838: LD_VAR 0 6
94842: PPUSH
94843: LD_EXP 134
94847: PUSH
94848: LD_VAR 0 6
94852: ARRAY
94853: PPUSH
94854: LD_VAR 0 5
94858: PPUSH
94859: CALL_OW 3
94863: PPUSH
94864: CALL_OW 1
94868: ST_TO_ADDR
// end ; end ;
94869: GO 94707
94871: POP
94872: POP
// end ;
94873: LD_VAR 0 4
94877: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
94878: LD_INT 0
94880: PPUSH
94881: PPUSH
94882: PPUSH
94883: PPUSH
94884: PPUSH
94885: PPUSH
94886: PPUSH
94887: PPUSH
94888: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
94889: LD_VAR 0 1
94893: PPUSH
94894: CALL_OW 264
94898: PUSH
94899: LD_INT 81
94901: EQUAL
94902: NOT
94903: IFTRUE 94918
94905: PUSH
94906: LD_VAR 0 1
94910: PUSH
94911: LD_EXP 133
94915: IN
94916: NOT
94917: OR
94918: IFFALSE 94922
// exit ;
94920: GO 95248
// index := GetElementIndex ( minersList , unit ) ;
94922: LD_ADDR_VAR 0 6
94926: PUSH
94927: LD_EXP 133
94931: PPUSH
94932: LD_VAR 0 1
94936: PPUSH
94937: CALL 35216 0 2
94941: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
94942: LD_ADDR_VAR 0 8
94946: PUSH
94947: LD_EXP 135
94951: PUSH
94952: LD_EXP 134
94956: PUSH
94957: LD_VAR 0 6
94961: ARRAY
94962: MINUS
94963: ST_TO_ADDR
// if not minesFreeAmount then
94964: LD_VAR 0 8
94968: NOT
94969: IFFALSE 94973
// exit ;
94971: GO 95248
// tmp := [ ] ;
94973: LD_ADDR_VAR 0 7
94977: PUSH
94978: EMPTY
94979: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
94980: LD_ADDR_VAR 0 5
94984: PUSH
94985: DOUBLE
94986: LD_INT 1
94988: DEC
94989: ST_TO_ADDR
94990: LD_VAR 0 8
94994: PUSH
94995: FOR_TO
94996: IFFALSE 95195
// begin _d := rand ( 0 , 5 ) ;
94998: LD_ADDR_VAR 0 11
95002: PUSH
95003: LD_INT 0
95005: PPUSH
95006: LD_INT 5
95008: PPUSH
95009: CALL_OW 12
95013: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
95014: LD_ADDR_VAR 0 12
95018: PUSH
95019: LD_INT 2
95021: PPUSH
95022: LD_INT 6
95024: PPUSH
95025: CALL_OW 12
95029: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
95030: LD_ADDR_VAR 0 9
95034: PUSH
95035: LD_VAR 0 2
95039: PPUSH
95040: LD_VAR 0 11
95044: PPUSH
95045: LD_VAR 0 12
95049: PPUSH
95050: CALL_OW 272
95054: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
95055: LD_ADDR_VAR 0 10
95059: PUSH
95060: LD_VAR 0 3
95064: PPUSH
95065: LD_VAR 0 11
95069: PPUSH
95070: LD_VAR 0 12
95074: PPUSH
95075: CALL_OW 273
95079: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
95080: LD_VAR 0 9
95084: PPUSH
95085: LD_VAR 0 10
95089: PPUSH
95090: CALL_OW 488
95094: IFFALSE 95118
95096: PUSH
95097: LD_VAR 0 9
95101: PUSH
95102: LD_VAR 0 10
95106: PUSH
95107: EMPTY
95108: LIST
95109: LIST
95110: PUSH
95111: LD_VAR 0 7
95115: IN
95116: NOT
95117: AND
95118: IFFALSE 95137
95120: PUSH
95121: LD_VAR 0 9
95125: PPUSH
95126: LD_VAR 0 10
95130: PPUSH
95131: CALL_OW 458
95135: NOT
95136: AND
95137: IFFALSE 95179
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
95139: LD_ADDR_VAR 0 7
95143: PUSH
95144: LD_VAR 0 7
95148: PPUSH
95149: LD_VAR 0 7
95153: PUSH
95154: LD_INT 1
95156: PLUS
95157: PPUSH
95158: LD_VAR 0 9
95162: PUSH
95163: LD_VAR 0 10
95167: PUSH
95168: EMPTY
95169: LIST
95170: LIST
95171: PPUSH
95172: CALL_OW 1
95176: ST_TO_ADDR
95177: GO 95193
// i := i - 1 ;
95179: LD_ADDR_VAR 0 5
95183: PUSH
95184: LD_VAR 0 5
95188: PUSH
95189: LD_INT 1
95191: MINUS
95192: ST_TO_ADDR
// end ;
95193: GO 94995
95195: POP
95196: POP
// for i in tmp do
95197: LD_ADDR_VAR 0 5
95201: PUSH
95202: LD_VAR 0 7
95206: PUSH
95207: FOR_IN
95208: IFFALSE 95246
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
95210: LD_VAR 0 1
95214: PPUSH
95215: LD_VAR 0 5
95219: PUSH
95220: LD_INT 1
95222: ARRAY
95223: PPUSH
95224: LD_VAR 0 5
95228: PUSH
95229: LD_INT 2
95231: ARRAY
95232: PPUSH
95233: CALL 94239 0 3
95237: NOT
95238: IFFALSE 95244
// exit ;
95240: POP
95241: POP
95242: GO 95248
95244: GO 95207
95246: POP
95247: POP
// end ;
95248: LD_VAR 0 4
95252: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
95253: LD_INT 0
95255: PPUSH
95256: PPUSH
95257: PPUSH
95258: PPUSH
95259: PPUSH
95260: PPUSH
95261: PPUSH
95262: PPUSH
95263: PPUSH
// if GetClass ( unit ) <> class_sniper then
95264: LD_VAR 0 1
95268: PPUSH
95269: CALL_OW 257
95273: PUSH
95274: LD_INT 5
95276: NONEQUAL
95277: IFFALSE 95281
// exit ;
95279: GO 95751
// dist := 8 ;
95281: LD_ADDR_VAR 0 5
95285: PUSH
95286: LD_INT 8
95288: ST_TO_ADDR
// viewRange := 12 ;
95289: LD_ADDR_VAR 0 8
95293: PUSH
95294: LD_INT 12
95296: ST_TO_ADDR
// side := GetSide ( unit ) ;
95297: LD_ADDR_VAR 0 6
95301: PUSH
95302: LD_VAR 0 1
95306: PPUSH
95307: CALL_OW 255
95311: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
95312: LD_INT 61
95314: PPUSH
95315: LD_VAR 0 6
95319: PPUSH
95320: CALL_OW 321
95324: PUSH
95325: LD_INT 2
95327: EQUAL
95328: IFFALSE 95338
// viewRange := 16 ;
95330: LD_ADDR_VAR 0 8
95334: PUSH
95335: LD_INT 16
95337: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
95338: LD_VAR 0 1
95342: PPUSH
95343: LD_VAR 0 2
95347: PPUSH
95348: LD_VAR 0 3
95352: PPUSH
95353: CALL_OW 297
95357: PUSH
95358: LD_VAR 0 5
95362: GREATER
95363: IFFALSE 95442
// begin ComMoveXY ( unit , x , y ) ;
95365: LD_VAR 0 1
95369: PPUSH
95370: LD_VAR 0 2
95374: PPUSH
95375: LD_VAR 0 3
95379: PPUSH
95380: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
95384: LD_INT 35
95386: PPUSH
95387: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
95391: LD_VAR 0 1
95395: PPUSH
95396: LD_VAR 0 2
95400: PPUSH
95401: LD_VAR 0 3
95405: PPUSH
95406: CALL 67272 0 3
95410: NOT
95411: IFFALSE 95415
// exit ;
95413: GO 95751
// until GetDistUnitXY ( unit , x , y ) < dist ;
95415: LD_VAR 0 1
95419: PPUSH
95420: LD_VAR 0 2
95424: PPUSH
95425: LD_VAR 0 3
95429: PPUSH
95430: CALL_OW 297
95434: PUSH
95435: LD_VAR 0 5
95439: LESS
95440: IFFALSE 95384
// end ; ComTurnXY ( unit , x , y ) ;
95442: LD_VAR 0 1
95446: PPUSH
95447: LD_VAR 0 2
95451: PPUSH
95452: LD_VAR 0 3
95456: PPUSH
95457: CALL_OW 118
// repeat if Multiplayer then
95461: LD_OWVAR 4
95465: IFFALSE 95476
// wait ( 35 ) else
95467: LD_INT 35
95469: PPUSH
95470: CALL_OW 67
95474: GO 95483
// wait ( 5 ) ;
95476: LD_INT 5
95478: PPUSH
95479: CALL_OW 67
// _d := GetDir ( unit ) ;
95483: LD_ADDR_VAR 0 11
95487: PUSH
95488: LD_VAR 0 1
95492: PPUSH
95493: CALL_OW 254
95497: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
95498: LD_ADDR_VAR 0 7
95502: PUSH
95503: LD_VAR 0 1
95507: PPUSH
95508: CALL_OW 250
95512: PPUSH
95513: LD_VAR 0 1
95517: PPUSH
95518: CALL_OW 251
95522: PPUSH
95523: LD_VAR 0 2
95527: PPUSH
95528: LD_VAR 0 3
95532: PPUSH
95533: CALL 69908 0 4
95537: ST_TO_ADDR
// until dir = _d ;
95538: LD_VAR 0 7
95542: PUSH
95543: LD_VAR 0 11
95547: EQUAL
95548: IFFALSE 95461
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
95550: LD_ADDR_VAR 0 9
95554: PUSH
95555: LD_VAR 0 1
95559: PPUSH
95560: CALL_OW 250
95564: PPUSH
95565: LD_VAR 0 7
95569: PPUSH
95570: LD_VAR 0 5
95574: PPUSH
95575: CALL_OW 272
95579: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
95580: LD_ADDR_VAR 0 10
95584: PUSH
95585: LD_VAR 0 1
95589: PPUSH
95590: CALL_OW 251
95594: PPUSH
95595: LD_VAR 0 7
95599: PPUSH
95600: LD_VAR 0 5
95604: PPUSH
95605: CALL_OW 273
95609: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
95610: LD_VAR 0 9
95614: PPUSH
95615: LD_VAR 0 10
95619: PPUSH
95620: CALL_OW 488
95624: NOT
95625: IFFALSE 95629
// exit ;
95627: GO 95751
// ComAnimCustom ( unit , 1 ) ;
95629: LD_VAR 0 1
95633: PPUSH
95634: LD_INT 1
95636: PPUSH
95637: CALL_OW 592
// p := 0 ;
95641: LD_ADDR_VAR 0 12
95645: PUSH
95646: LD_INT 0
95648: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
95649: LD_VAR 0 9
95653: PPUSH
95654: LD_VAR 0 10
95658: PPUSH
95659: LD_VAR 0 6
95663: PPUSH
95664: LD_VAR 0 8
95668: PPUSH
95669: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
95673: LD_INT 35
95675: PPUSH
95676: CALL_OW 67
// p := Inc ( p ) ;
95680: LD_ADDR_VAR 0 12
95684: PUSH
95685: LD_VAR 0 12
95689: PPUSH
95690: CALL 69864 0 1
95694: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
95695: LD_VAR 0 12
95699: PUSH
95700: LD_INT 3
95702: EQUAL
95703: IFTRUE 95717
95705: PUSH
95706: LD_VAR 0 1
95710: PPUSH
95711: CALL_OW 302
95715: NOT
95716: OR
95717: IFTRUE 95730
95719: PUSH
95720: LD_VAR 0 1
95724: PPUSH
95725: CALL_OW 301
95729: OR
95730: IFFALSE 95673
// RemoveSeeing ( _x , _y , side ) ;
95732: LD_VAR 0 9
95736: PPUSH
95737: LD_VAR 0 10
95741: PPUSH
95742: LD_VAR 0 6
95746: PPUSH
95747: CALL_OW 331
// end ;
95751: LD_VAR 0 4
95755: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
95756: LD_INT 0
95758: PPUSH
95759: PPUSH
95760: PPUSH
95761: PPUSH
95762: PPUSH
95763: PPUSH
95764: PPUSH
95765: PPUSH
95766: PPUSH
95767: PPUSH
95768: PPUSH
// if not unit then
95769: LD_VAR 0 1
95773: NOT
95774: IFFALSE 95778
// exit ;
95776: GO 96049
// side := GetSide ( unit ) ;
95778: LD_ADDR_VAR 0 3
95782: PUSH
95783: LD_VAR 0 1
95787: PPUSH
95788: CALL_OW 255
95792: ST_TO_ADDR
// x := GetX ( unit ) ;
95793: LD_ADDR_VAR 0 5
95797: PUSH
95798: LD_VAR 0 1
95802: PPUSH
95803: CALL_OW 250
95807: ST_TO_ADDR
// y := GetY ( unit ) ;
95808: LD_ADDR_VAR 0 6
95812: PUSH
95813: LD_VAR 0 1
95817: PPUSH
95818: CALL_OW 251
95822: ST_TO_ADDR
// r := 8 ;
95823: LD_ADDR_VAR 0 4
95827: PUSH
95828: LD_INT 8
95830: ST_TO_ADDR
// if x - r < 0 then
95831: LD_VAR 0 5
95835: PUSH
95836: LD_VAR 0 4
95840: MINUS
95841: PUSH
95842: LD_INT 0
95844: LESS
95845: IFFALSE 95857
// min_x := 0 else
95847: LD_ADDR_VAR 0 7
95851: PUSH
95852: LD_INT 0
95854: ST_TO_ADDR
95855: GO 95873
// min_x := x - r ;
95857: LD_ADDR_VAR 0 7
95861: PUSH
95862: LD_VAR 0 5
95866: PUSH
95867: LD_VAR 0 4
95871: MINUS
95872: ST_TO_ADDR
// if y - r < 0 then
95873: LD_VAR 0 6
95877: PUSH
95878: LD_VAR 0 4
95882: MINUS
95883: PUSH
95884: LD_INT 0
95886: LESS
95887: IFFALSE 95899
// min_y := 0 else
95889: LD_ADDR_VAR 0 8
95893: PUSH
95894: LD_INT 0
95896: ST_TO_ADDR
95897: GO 95915
// min_y := y - r ;
95899: LD_ADDR_VAR 0 8
95903: PUSH
95904: LD_VAR 0 6
95908: PUSH
95909: LD_VAR 0 4
95913: MINUS
95914: ST_TO_ADDR
// max_x := x + r ;
95915: LD_ADDR_VAR 0 9
95919: PUSH
95920: LD_VAR 0 5
95924: PUSH
95925: LD_VAR 0 4
95929: PLUS
95930: ST_TO_ADDR
// max_y := y + r ;
95931: LD_ADDR_VAR 0 10
95935: PUSH
95936: LD_VAR 0 6
95940: PUSH
95941: LD_VAR 0 4
95945: PLUS
95946: ST_TO_ADDR
// for _x = min_x to max_x do
95947: LD_ADDR_VAR 0 11
95951: PUSH
95952: DOUBLE
95953: LD_VAR 0 7
95957: DEC
95958: ST_TO_ADDR
95959: LD_VAR 0 9
95963: PUSH
95964: FOR_TO
95965: IFFALSE 96047
// for _y = min_y to max_y do
95967: LD_ADDR_VAR 0 12
95971: PUSH
95972: DOUBLE
95973: LD_VAR 0 8
95977: DEC
95978: ST_TO_ADDR
95979: LD_VAR 0 10
95983: PUSH
95984: FOR_TO
95985: IFFALSE 96043
// begin if not ValidHex ( _x , _y ) then
95987: LD_VAR 0 11
95991: PPUSH
95992: LD_VAR 0 12
95996: PPUSH
95997: CALL_OW 488
96001: NOT
96002: IFFALSE 96006
// continue ;
96004: GO 95984
// if MineAtPos ( _x , _y ) then
96006: LD_VAR 0 11
96010: PPUSH
96011: LD_VAR 0 12
96015: PPUSH
96016: CALL_OW 458
96020: IFFALSE 96041
// ViewMineAtPos ( _x , _y , side ) ;
96022: LD_VAR 0 11
96026: PPUSH
96027: LD_VAR 0 12
96031: PPUSH
96032: LD_VAR 0 3
96036: PPUSH
96037: CALL_OW 457
// end ;
96041: GO 95984
96043: POP
96044: POP
96045: GO 95964
96047: POP
96048: POP
// end ;
96049: LD_VAR 0 2
96053: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
96054: LD_INT 0
96056: PPUSH
96057: PPUSH
96058: PPUSH
96059: PPUSH
96060: PPUSH
96061: PPUSH
96062: PPUSH
// if not units then
96063: LD_VAR 0 1
96067: NOT
96068: IFFALSE 96072
// exit ;
96070: GO 96536
// scaners := [ ] ;
96072: LD_ADDR_VAR 0 6
96076: PUSH
96077: EMPTY
96078: ST_TO_ADDR
// for i in units do
96079: LD_ADDR_VAR 0 3
96083: PUSH
96084: LD_VAR 0 1
96088: PUSH
96089: FOR_IN
96090: IFFALSE 96247
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
96092: LD_VAR 0 3
96096: PPUSH
96097: CALL_OW 264
96101: PUSH
96102: LD_INT 11
96104: NONEQUAL
96105: IFTRUE 96119
96107: PUSH
96108: LD_VAR 0 3
96112: PPUSH
96113: CALL_OW 302
96117: NOT
96118: OR
96119: IFTRUE 96136
96121: PUSH
96122: LD_VAR 0 3
96126: PPUSH
96127: CALL_OW 110
96131: PUSH
96132: LD_INT 502
96134: EQUAL
96135: OR
96136: IFFALSE 96140
// continue ;
96138: GO 96089
// ComStop ( i ) ;
96140: LD_VAR 0 3
96144: PPUSH
96145: CALL_OW 141
// x := GetX ( i ) ;
96149: LD_ADDR_VAR 0 4
96153: PUSH
96154: LD_VAR 0 3
96158: PPUSH
96159: CALL_OW 250
96163: ST_TO_ADDR
// y := GetY ( i ) ;
96164: LD_ADDR_VAR 0 5
96168: PUSH
96169: LD_VAR 0 3
96173: PPUSH
96174: CALL_OW 251
96178: ST_TO_ADDR
// if GetSide ( i ) = your_side then
96179: LD_VAR 0 3
96183: PPUSH
96184: CALL_OW 255
96188: PUSH
96189: LD_OWVAR 2
96193: EQUAL
96194: IFFALSE 96213
// PlaySoundXY ( x , y , mineDetector ) ;
96196: LD_VAR 0 4
96200: PPUSH
96201: LD_VAR 0 5
96205: PPUSH
96206: LD_STRING mineDetector
96208: PPUSH
96209: CALL_OW 366
// scaners := Join ( scaners , i ) ;
96213: LD_ADDR_VAR 0 6
96217: PUSH
96218: LD_VAR 0 6
96222: PPUSH
96223: LD_VAR 0 3
96227: PPUSH
96228: CALL 68491 0 2
96232: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
96233: LD_VAR 0 3
96237: PPUSH
96238: LD_INT 502
96240: PPUSH
96241: CALL_OW 109
// end ;
96245: GO 96089
96247: POP
96248: POP
// if not scaners then
96249: LD_VAR 0 6
96253: NOT
96254: IFFALSE 96258
// exit ;
96256: GO 96536
// wait ( 3 ) ;
96258: LD_INT 3
96260: PPUSH
96261: CALL_OW 67
// timer := 6 ;
96265: LD_ADDR_VAR 0 7
96269: PUSH
96270: LD_INT 6
96272: ST_TO_ADDR
// repeat for i in scaners do
96273: LD_ADDR_VAR 0 3
96277: PUSH
96278: LD_VAR 0 6
96282: PUSH
96283: FOR_IN
96284: IFFALSE 96434
// begin side := GetSide ( i ) ;
96286: LD_ADDR_VAR 0 8
96290: PUSH
96291: LD_VAR 0 3
96295: PPUSH
96296: CALL_OW 255
96300: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
96301: LD_VAR 0 3
96305: PPUSH
96306: CALL_OW 302
96310: NOT
96311: IFTRUE 96324
96313: PUSH
96314: LD_VAR 0 3
96318: PPUSH
96319: CALL_OW 314
96323: OR
96324: IFTRUE 96355
96326: PUSH
96327: LD_VAR 0 3
96331: PPUSH
96332: CALL_OW 263
96336: PUSH
96337: LD_INT 1
96339: EQUAL
96340: IFFALSE 96354
96342: PUSH
96343: LD_VAR 0 3
96347: PPUSH
96348: CALL_OW 311
96352: NOT
96353: AND
96354: OR
96355: IFFALSE 96399
// begin SetUnitDisplayNumber ( i , 0 ) ;
96357: LD_VAR 0 3
96361: PPUSH
96362: LD_INT 0
96364: PPUSH
96365: CALL_OW 505
// SetTag ( i , 0 ) ;
96369: LD_VAR 0 3
96373: PPUSH
96374: LD_INT 0
96376: PPUSH
96377: CALL_OW 109
// scaners := scaners diff i ;
96381: LD_ADDR_VAR 0 6
96385: PUSH
96386: LD_VAR 0 6
96390: PUSH
96391: LD_VAR 0 3
96395: DIFF
96396: ST_TO_ADDR
// continue ;
96397: GO 96283
// end ; if side in [ your_side , 9 ] then
96399: LD_VAR 0 8
96403: PUSH
96404: LD_OWVAR 2
96408: PUSH
96409: LD_INT 9
96411: PUSH
96412: EMPTY
96413: LIST
96414: LIST
96415: IN
96416: IFFALSE 96432
// SetUnitDisplayNumber ( i , timer ) ;
96418: LD_VAR 0 3
96422: PPUSH
96423: LD_VAR 0 7
96427: PPUSH
96428: CALL_OW 505
// end ;
96432: GO 96283
96434: POP
96435: POP
// if not scaners then
96436: LD_VAR 0 6
96440: NOT
96441: IFFALSE 96445
// exit ;
96443: GO 96536
// timer := Dec ( timer ) ;
96445: LD_ADDR_VAR 0 7
96449: PUSH
96450: LD_VAR 0 7
96454: PPUSH
96455: CALL 69886 0 1
96459: ST_TO_ADDR
// wait ( 0 0$1 ) ;
96460: LD_INT 35
96462: PPUSH
96463: CALL_OW 67
// until timer = 0 ;
96467: LD_VAR 0 7
96471: PUSH
96472: LD_INT 0
96474: EQUAL
96475: IFFALSE 96273
// if not scaners then
96477: LD_VAR 0 6
96481: NOT
96482: IFFALSE 96486
// exit ;
96484: GO 96536
// for i in scaners do
96486: LD_ADDR_VAR 0 3
96490: PUSH
96491: LD_VAR 0 6
96495: PUSH
96496: FOR_IN
96497: IFFALSE 96534
// begin SetUnitDisplayNumber ( i , 0 ) ;
96499: LD_VAR 0 3
96503: PPUSH
96504: LD_INT 0
96506: PPUSH
96507: CALL_OW 505
// SetTag ( i , 0 ) ;
96511: LD_VAR 0 3
96515: PPUSH
96516: LD_INT 0
96518: PPUSH
96519: CALL_OW 109
// RevealDetectorMine ( i ) ;
96523: LD_VAR 0 3
96527: PPUSH
96528: CALL 95756 0 1
// end ;
96532: GO 96496
96534: POP
96535: POP
// end ;
96536: LD_VAR 0 2
96540: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
96541: LD_INT 0
96543: PPUSH
// if p1 = mine_detector_mode then
96544: LD_VAR 0 2
96548: PUSH
96549: LD_INT 103
96551: EQUAL
96552: IFFALSE 96563
// DetectMine ( units ) ;
96554: LD_VAR 0 1
96558: PPUSH
96559: CALL 96054 0 1
// end ;
96563: LD_VAR 0 7
96567: RET
