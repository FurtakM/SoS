// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10352 0 2
// PrepareArabian ;
  32: CALL 505 0 0
// PrepareRussian ;
  36: CALL 11147 0 0
// Action ;
  40: CALL 19395 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: IFFALSE 442
 431: PUSH
 432: LD_EXP 47
 436: PPUSH
 437: CALL_OW 302
 441: AND
 442: IFFALSE 451
 444: PUSH
 445: LD_EXP 6
 449: NOT
 450: AND
 451: IFFALSE 463
 453: GO 455
 455: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 456: LD_STRING ACH_ROLF
 458: PPUSH
 459: CALL_OW 543
 463: END
// every 0 0$2 trigger collectedOil >= 300 do
 464: LD_EXP 33
 468: PUSH
 469: LD_INT 300
 471: GREATEREQUAL
 472: IFFALSE 484
 474: GO 476
 476: DISABLE
// SetAchievement ( ACH_OIL ) ;
 477: LD_STRING ACH_OIL
 479: PPUSH
 480: CALL_OW 543
 484: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 485: LD_INT 52
 487: PPUSH
 488: CALL_OW 301
 492: IFFALSE 504
 494: GO 496
 496: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 497: LD_STRING ACH_LENIN
 499: PPUSH
 500: CALL_OW 543
 504: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
// uc_nation := 2 ;
 521: LD_ADDR_OWVAR 21
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// uc_side := 5 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 5
 536: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 537: LD_ADDR_EXP 42
 541: PUSH
 542: LD_STRING Abdul
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: LD_STRING 
 550: PPUSH
 551: CALL 29722 0 3
 555: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 556: LD_ADDR_EXP 44
 560: PUSH
 561: LD_STRING Omar
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: LD_STRING 
 569: PPUSH
 570: CALL 29722 0 3
 574: ST_TO_ADDR
// uc_side := 2 ;
 575: LD_ADDR_OWVAR 20
 579: PUSH
 580: LD_INT 2
 582: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 583: LD_ADDR_EXP 34
 587: PUSH
 588: LD_STRING Heike
 590: PPUSH
 591: LD_EXP 1
 595: NOT
 596: PPUSH
 597: LD_EXP 2
 601: PPUSH
 602: CALL 29722 0 3
 606: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 607: LD_ADDR_EXP 37
 611: PUSH
 612: LD_STRING Ibrahim
 614: PPUSH
 615: LD_EXP 1
 619: NOT
 620: PPUSH
 621: LD_EXP 2
 625: PPUSH
 626: CALL 29722 0 3
 630: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 631: LD_ADDR_EXP 35
 635: PUSH
 636: LD_STRING Givi
 638: PPUSH
 639: LD_EXP 1
 643: NOT
 644: PPUSH
 645: LD_EXP 2
 649: PPUSH
 650: CALL 29722 0 3
 654: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 655: LD_ADDR_EXP 38
 659: PUSH
 660: LD_STRING Kamil
 662: PPUSH
 663: LD_EXP 1
 667: NOT
 668: PPUSH
 669: LD_EXP 2
 673: PPUSH
 674: CALL 29722 0 3
 678: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 679: LD_ADDR_EXP 39
 683: PUSH
 684: LD_STRING Kaia
 686: PPUSH
 687: LD_EXP 1
 691: NOT
 692: PPUSH
 693: LD_EXP 2
 697: PPUSH
 698: CALL 29722 0 3
 702: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 703: LD_ADDR_EXP 40
 707: PUSH
 708: LD_STRING Sophia
 710: PPUSH
 711: LD_EXP 1
 715: NOT
 716: PPUSH
 717: LD_EXP 2
 721: PPUSH
 722: CALL 29722 0 3
 726: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 727: LD_ADDR_EXP 41
 731: PUSH
 732: LD_STRING Markov
 734: PPUSH
 735: LD_EXP 1
 739: NOT
 740: PPUSH
 741: LD_EXP 2
 745: PPUSH
 746: CALL 29722 0 3
 750: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 751: LD_ADDR_EXP 46
 755: PUSH
 756: LD_STRING Aviradze
 758: PPUSH
 759: LD_EXP 1
 763: NOT
 764: PPUSH
 765: LD_EXP 2
 769: PPUSH
 770: CALL 29722 0 3
 774: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 775: LD_ADDR_EXP 45
 779: PUSH
 780: LD_STRING Kurt
 782: PPUSH
 783: LD_EXP 1
 787: NOT
 788: PPUSH
 789: LD_EXP 2
 793: PPUSH
 794: CALL 29722 0 3
 798: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 799: LD_ADDR_EXP 36
 803: PUSH
 804: LD_STRING Mike
 806: PPUSH
 807: LD_EXP 1
 811: NOT
 812: PPUSH
 813: LD_EXP 2
 817: PPUSH
 818: CALL 29722 0 3
 822: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 823: LD_ADDR_EXP 43
 827: PUSH
 828: LD_STRING Olaf
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: LD_STRING 
 836: PPUSH
 837: CALL 29722 0 3
 841: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 842: LD_ADDR_EXP 49
 846: PUSH
 847: LD_STRING 05_others
 849: PPUSH
 850: CALL_OW 31
 854: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 855: LD_ADDR_EXP 50
 859: PUSH
 860: LD_STRING 05_apes
 862: PPUSH
 863: CALL_OW 31
 867: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 868: LD_ADDR_VAR 0 5
 872: PUSH
 873: LD_STRING 05_Radar
 875: PPUSH
 876: LD_EXP 1
 880: PPUSH
 881: CALL_OW 30
 885: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 886: LD_ADDR_VAR 0 6
 890: PUSH
 891: LD_STRING 05_RemoteControl
 893: PPUSH
 894: LD_EXP 1
 898: PPUSH
 899: CALL_OW 30
 903: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 904: LD_ADDR_VAR 0 7
 908: PUSH
 909: LD_STRING 05_DrugsTested
 911: PPUSH
 912: LD_EXP 1
 916: PPUSH
 917: CALL_OW 30
 921: ST_TO_ADDR
// if hasDrugs then
 922: LD_VAR 0 7
 926: IFFALSE 941
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_INT 2
 933: PPUSH
 934: LD_INT 2
 936: PPUSH
 937: CALL_OW 322
// if hasRadar then
 941: LD_VAR 0 5
 945: IFFALSE 960
// SetTech ( tech_radar , 2 , state_researched ) ;
 947: LD_INT 6
 949: PPUSH
 950: LD_INT 2
 952: PPUSH
 953: LD_INT 2
 955: PPUSH
 956: CALL_OW 322
// if hasRemote then
 960: LD_VAR 0 6
 964: IFFALSE 979
// SetTech ( tech_remCont , 2 , state_researched ) ;
 966: LD_INT 15
 968: PPUSH
 969: LD_INT 2
 971: PPUSH
 972: LD_INT 2
 974: PPUSH
 975: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 979: LD_ADDR_VAR 0 13
 983: PUSH
 984: LD_INT 5
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 517
 994: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: DOUBLE
1001: LD_INT 1
1003: DEC
1004: ST_TO_ADDR
1005: LD_VAR 0 13
1009: PUSH
1010: LD_INT 1
1012: ARRAY
1013: PUSH
1014: FOR_TO
1015: IFFALSE 1092
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1017: LD_VAR 0 13
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PUSH
1026: LD_VAR 0 2
1030: ARRAY
1031: PPUSH
1032: LD_VAR 0 13
1036: PUSH
1037: LD_INT 2
1039: ARRAY
1040: PUSH
1041: LD_VAR 0 2
1045: ARRAY
1046: PPUSH
1047: CALL_OW 351
1051: IFFALSE 1090
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1053: LD_VAR 0 13
1057: PUSH
1058: LD_INT 1
1060: ARRAY
1061: PUSH
1062: LD_VAR 0 2
1066: ARRAY
1067: PPUSH
1068: LD_VAR 0 13
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PUSH
1077: LD_VAR 0 2
1081: ARRAY
1082: PPUSH
1083: LD_INT 2
1085: PPUSH
1086: CALL_OW 244
1090: GO 1014
1092: POP
1093: POP
// base := [ ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: EMPTY
1100: ST_TO_ADDR
// if debug then
1101: LD_EXP 1
1105: IFFALSE 1155
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1107: LD_ADDR_VAR 0 4
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: LD_INT 51
1117: PUSH
1118: LD_INT 77
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 3
1126: PUSH
1127: LD_INT 3
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: EMPTY
1151: LIST
1152: ST_TO_ADDR
// end else
1153: GO 1171
// if buildingsFromPrev then
1155: LD_EXP 30
1159: IFFALSE 1171
// base := buildingsFromPrev ;
1161: LD_ADDR_VAR 0 4
1165: PUSH
1166: LD_EXP 30
1170: ST_TO_ADDR
// if base then
1171: LD_VAR 0 4
1175: IFFALSE 1373
// for i := 1 to base do
1177: LD_ADDR_VAR 0 2
1181: PUSH
1182: DOUBLE
1183: LD_INT 1
1185: DEC
1186: ST_TO_ADDR
1187: LD_VAR 0 4
1191: PUSH
1192: FOR_TO
1193: IFFALSE 1371
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1195: LD_ADDR_VAR 0 4
1199: PUSH
1200: LD_VAR 0 4
1204: PPUSH
1205: LD_VAR 0 2
1209: PPUSH
1210: LD_VAR 0 4
1214: PUSH
1215: LD_VAR 0 2
1219: ARRAY
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PUSH
1225: LD_VAR 0 4
1229: PUSH
1230: LD_VAR 0 2
1234: ARRAY
1235: PUSH
1236: LD_INT 2
1238: ARRAY
1239: PUSH
1240: LD_INT 155
1242: PLUS
1243: PUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_VAR 0 2
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: ARRAY
1258: PUSH
1259: LD_INT 3
1261: PLUS
1262: PUSH
1263: LD_VAR 0 4
1267: PUSH
1268: LD_VAR 0 2
1272: ARRAY
1273: PUSH
1274: LD_INT 4
1276: ARRAY
1277: PUSH
1278: LD_VAR 0 4
1282: PUSH
1283: LD_VAR 0 2
1287: ARRAY
1288: PUSH
1289: LD_INT 5
1291: ARRAY
1292: PUSH
1293: LD_VAR 0 4
1297: PUSH
1298: LD_VAR 0 2
1302: ARRAY
1303: PUSH
1304: LD_INT 6
1306: ARRAY
1307: PUSH
1308: LD_VAR 0 4
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: PUSH
1319: LD_INT 7
1321: ARRAY
1322: PUSH
1323: LD_VAR 0 4
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 8
1336: ARRAY
1337: PUSH
1338: LD_VAR 0 4
1342: PUSH
1343: LD_VAR 0 2
1347: ARRAY
1348: PUSH
1349: LD_INT 9
1351: ARRAY
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: PPUSH
1364: CALL_OW 1
1368: ST_TO_ADDR
1369: GO 1192
1371: POP
1372: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1373: LD_ADDR_VAR 0 4
1377: PUSH
1378: LD_VAR 0 4
1382: PUSH
1383: LD_INT 0
1385: PUSH
1386: LD_INT 206
1388: PUSH
1389: LD_INT 80
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 2
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: LD_INT 0
1403: PUSH
1404: LD_INT 0
1406: PUSH
1407: LD_INT 0
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_INT 32
1423: PUSH
1424: LD_INT 221
1426: PUSH
1427: LD_INT 95
1429: PUSH
1430: LD_INT 5
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 23
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 32
1461: PUSH
1462: LD_INT 223
1464: PUSH
1465: LD_INT 88
1467: PUSH
1468: LD_INT 5
1470: PUSH
1471: LD_INT 2
1473: PUSH
1474: LD_INT 3
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 0
1482: PUSH
1483: LD_INT 24
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_INT 32
1499: PUSH
1500: LD_INT 202
1502: PUSH
1503: LD_INT 64
1505: PUSH
1506: LD_INT 2
1508: PUSH
1509: LD_INT 2
1511: PUSH
1512: LD_INT 3
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: LD_INT 0
1520: PUSH
1521: LD_INT 25
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 3
1537: PUSH
1538: LD_INT 203
1540: PUSH
1541: LD_INT 91
1543: PUSH
1544: LD_INT 1
1546: PUSH
1547: LD_INT 2
1549: PUSH
1550: LD_INT 3
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 0
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 8
1575: PUSH
1576: LD_INT 217
1578: PUSH
1579: LD_INT 78
1581: PUSH
1582: LD_INT 4
1584: PUSH
1585: LD_INT 2
1587: PUSH
1588: LD_INT 3
1590: PUSH
1591: LD_INT 10
1593: PUSH
1594: LD_INT 0
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 27
1613: PUSH
1614: LD_INT 220
1616: PUSH
1617: LD_INT 99
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 3
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 27
1651: PUSH
1652: LD_INT 220
1654: PUSH
1655: LD_INT 103
1657: PUSH
1658: LD_INT 1
1660: PUSH
1661: LD_INT 2
1663: PUSH
1664: LD_INT 3
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 0
1672: PUSH
1673: LD_INT 0
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 27
1689: PUSH
1690: LD_INT 216
1692: PUSH
1693: LD_INT 102
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: LD_INT 3
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 17
1727: PUSH
1728: LD_INT 203
1730: PUSH
1731: LD_INT 94
1733: PUSH
1734: LD_INT 0
1736: PUSH
1737: LD_INT 2
1739: PUSH
1740: LD_INT 3
1742: PUSH
1743: LD_INT 0
1745: PUSH
1746: LD_INT 0
1748: PUSH
1749: LD_INT 0
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 23
1765: PUSH
1766: LD_INT 200
1768: PUSH
1769: LD_INT 88
1771: PUSH
1772: LD_INT 2
1774: PUSH
1775: LD_INT 2
1777: PUSH
1778: LD_INT 3
1780: PUSH
1781: LD_INT 0
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 16
1803: PUSH
1804: LD_INT 199
1806: PUSH
1807: LD_INT 91
1809: PUSH
1810: LD_INT 1
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: LD_INT 0
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 26
1841: PUSH
1842: LD_INT 197
1844: PUSH
1845: LD_INT 81
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: LD_INT 2
1853: PUSH
1854: LD_INT 3
1856: PUSH
1857: LD_INT 0
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: LD_INT 0
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 26
1879: PUSH
1880: LD_INT 197
1882: PUSH
1883: LD_INT 78
1885: PUSH
1886: LD_INT 3
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 3
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: LD_INT 0
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: ADD
1931: ST_TO_ADDR
// if hasRadar then
1932: LD_VAR 0 5
1936: IFFALSE 2000
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1938: LD_ADDR_VAR 0 4
1942: PUSH
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_VAR 0 4
1952: PUSH
1953: LD_INT 1
1955: PLUS
1956: PPUSH
1957: LD_INT 20
1959: PUSH
1960: LD_INT 203
1962: PUSH
1963: LD_INT 87
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: LD_INT 2
1971: PUSH
1972: LD_INT 3
1974: PUSH
1975: LD_INT 0
1977: PUSH
1978: LD_INT 0
1980: PUSH
1981: LD_INT 0
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 1
1999: ST_TO_ADDR
// if hasRemote then
2000: LD_VAR 0 6
2004: IFFALSE 2068
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2006: LD_ADDR_VAR 0 4
2010: PUSH
2011: LD_VAR 0 4
2015: PPUSH
2016: LD_VAR 0 4
2020: PUSH
2021: LD_INT 1
2023: PLUS
2024: PPUSH
2025: LD_INT 22
2027: PUSH
2028: LD_INT 207
2030: PUSH
2031: LD_INT 95
2033: PUSH
2034: LD_INT 5
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: LD_INT 3
2042: PUSH
2043: LD_INT 0
2045: PUSH
2046: LD_INT 0
2048: PUSH
2049: LD_INT 0
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: PPUSH
2063: CALL_OW 1
2067: ST_TO_ADDR
// for i in base do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_VAR 0 4
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2443
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2081: LD_VAR 0 2
2085: PUSH
2086: LD_INT 2
2088: ARRAY
2089: PPUSH
2090: LD_VAR 0 2
2094: PUSH
2095: LD_INT 3
2097: ARRAY
2098: PPUSH
2099: CALL_OW 428
2103: IFFALSE 2107
// continue ;
2105: GO 2078
// uc_nation := i [ 5 ] ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_VAR 0 2
2116: PUSH
2117: LD_INT 5
2119: ARRAY
2120: ST_TO_ADDR
// InitBc ;
2121: CALL_OW 21
// bc_type := i [ 1 ] ;
2125: LD_ADDR_OWVAR 42
2129: PUSH
2130: LD_VAR 0 2
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2139: LD_ADDR_OWVAR 43
2143: PUSH
2144: LD_VAR 0 2
2148: PUSH
2149: LD_INT 6
2151: ARRAY
2152: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2153: LD_ADDR_OWVAR 44
2157: PUSH
2158: LD_INT 9
2160: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2161: LD_ADDR_OWVAR 45
2165: PUSH
2166: LD_INT 9
2168: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2169: LD_VAR 0 2
2173: PUSH
2174: LD_INT 1
2176: ARRAY
2177: PUSH
2178: LD_INT 8
2180: EQUAL
2181: IFFALSE 2197
2183: PUSH
2184: LD_VAR 0 2
2188: PUSH
2189: LD_INT 5
2191: ARRAY
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: AND
2197: IFFALSE 2210
2199: PUSH
2200: LD_VAR 0 2
2204: PUSH
2205: LD_INT 8
2207: ARRAY
2208: NOT
2209: AND
2210: IFFALSE 2246
// begin bc_kind1 := b_lab_weapon ;
2212: LD_ADDR_OWVAR 44
2216: PUSH
2217: LD_INT 10
2219: ST_TO_ADDR
// if hasRadar then
2220: LD_VAR 0 5
2224: IFFALSE 2236
// bc_kind2 := b_lab_opto else
2226: LD_ADDR_OWVAR 45
2230: PUSH
2231: LD_INT 15
2233: ST_TO_ADDR
2234: GO 2244
// bc_kind2 := b_lab_basic ;
2236: LD_ADDR_OWVAR 45
2240: PUSH
2241: LD_INT 9
2243: ST_TO_ADDR
// end else
2244: GO 2333
// begin if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2246: LD_VAR 0 2
2250: PUSH
2251: LD_INT 1
2253: ARRAY
2254: PUSH
2255: LD_INT 7
2257: PUSH
2258: LD_INT 8
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: IN
2265: IFFALSE 2277
2267: PUSH
2268: LD_VAR 0 2
2272: PUSH
2273: LD_INT 7
2275: ARRAY
2276: AND
2277: IFFALSE 2333
// begin bc_kind1 := i [ 7 ] ;
2279: LD_ADDR_OWVAR 44
2283: PUSH
2284: LD_VAR 0 2
2288: PUSH
2289: LD_INT 7
2291: ARRAY
2292: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2293: LD_VAR 0 2
2297: PUSH
2298: LD_INT 1
2300: ARRAY
2301: PUSH
2302: LD_INT 8
2304: EQUAL
2305: IFFALSE 2317
2307: PUSH
2308: LD_VAR 0 2
2312: PUSH
2313: LD_INT 8
2315: ARRAY
2316: AND
2317: IFFALSE 2333
// bc_kind2 := i [ 8 ] ;
2319: LD_ADDR_OWVAR 45
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 8
2331: ARRAY
2332: ST_TO_ADDR
// end ; end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2333: LD_ADDR_VAR 0 3
2337: PUSH
2338: LD_VAR 0 2
2342: PUSH
2343: LD_INT 2
2345: ARRAY
2346: PPUSH
2347: LD_VAR 0 2
2351: PUSH
2352: LD_INT 3
2354: ARRAY
2355: PPUSH
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 4
2363: ARRAY
2364: PPUSH
2365: CALL_OW 47
2369: ST_TO_ADDR
// if i [ 9 ] then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_INT 9
2377: ARRAY
2378: IFFALSE 2398
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2380: LD_VAR 0 3
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_INT 9
2392: ARRAY
2393: PPUSH
2394: CALL_OW 431
// if i [ 1 ] = b_bunker then
2398: LD_VAR 0 2
2402: PUSH
2403: LD_INT 1
2405: ARRAY
2406: PUSH
2407: LD_INT 32
2409: EQUAL
2410: IFFALSE 2441
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2412: LD_ADDR_VAR 0 11
2416: PUSH
2417: LD_VAR 0 11
2421: PPUSH
2422: LD_VAR 0 11
2426: PUSH
2427: LD_INT 1
2429: PLUS
2430: PPUSH
2431: LD_VAR 0 3
2435: PPUSH
2436: CALL_OW 1
2440: ST_TO_ADDR
// end ;
2441: GO 2078
2443: POP
2444: POP
// depot := HexInfo ( 206 , 80 ) ;
2445: LD_ADDR_VAR 0 9
2449: PUSH
2450: LD_INT 206
2452: PPUSH
2453: LD_INT 80
2455: PPUSH
2456: CALL_OW 428
2460: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2461: LD_ADDR_VAR 0 8
2465: PUSH
2466: LD_INT 22
2468: PUSH
2469: LD_INT 2
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 30
2478: PUSH
2479: LD_INT 3
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: PPUSH
2490: CALL_OW 69
2494: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2495: LD_ADDR_VAR 0 10
2499: PUSH
2500: LD_INT 22
2502: PUSH
2503: LD_INT 2
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: LD_INT 30
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 30
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 30
2535: PUSH
2536: LD_INT 8
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PPUSH
2553: CALL_OW 69
2557: ST_TO_ADDR
// arDepot := depot ;
2558: LD_ADDR_EXP 48
2562: PUSH
2563: LD_VAR 0 9
2567: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2568: LD_VAR 0 9
2572: PPUSH
2573: CALL_OW 274
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: LD_INT 360
2583: PUSH
2584: LD_INT 260
2586: PUSH
2587: LD_INT 190
2589: PUSH
2590: LD_INT 150
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: PUSH
2599: LD_OWVAR 67
2603: ARRAY
2604: PPUSH
2605: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2609: LD_VAR 0 9
2613: PPUSH
2614: CALL_OW 274
2618: PPUSH
2619: LD_INT 2
2621: PPUSH
2622: LD_INT 200
2624: PUSH
2625: LD_INT 170
2627: PUSH
2628: LD_INT 150
2630: PUSH
2631: LD_INT 120
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: LIST
2638: LIST
2639: PUSH
2640: LD_OWVAR 67
2644: ARRAY
2645: PPUSH
2646: CALL_OW 277
// uc_nation := 2 ;
2650: LD_ADDR_OWVAR 21
2654: PUSH
2655: LD_INT 2
2657: ST_TO_ADDR
// uc_side := 2 ;
2658: LD_ADDR_OWVAR 20
2662: PUSH
2663: LD_INT 2
2665: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2666: LD_INT 13
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 1
2674: PPUSH
2675: LD_INT 27
2677: PPUSH
2678: LD_INT 33
2680: PPUSH
2681: CALL 34708 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2685: CALL_OW 45
2689: PPUSH
2690: LD_INT 190
2692: PPUSH
2693: LD_INT 64
2695: PPUSH
2696: LD_INT 5
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL 70038 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2706: LD_INT 13
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 1
2714: PPUSH
2715: LD_INT 25
2717: PPUSH
2718: LD_INT 22
2720: PPUSH
2721: CALL 34708 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2725: CALL_OW 45
2729: PPUSH
2730: LD_INT 188
2732: PPUSH
2733: LD_INT 67
2735: PPUSH
2736: LD_INT 5
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL 70038 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2746: LD_EXP 34
2750: PPUSH
2751: LD_INT 213
2753: PPUSH
2754: LD_INT 87
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2764: LD_EXP 34
2768: PPUSH
2769: LD_INT 214
2771: PPUSH
2772: LD_INT 87
2774: PPUSH
2775: CALL_OW 118
// if Kaia then
2779: LD_EXP 39
2783: IFFALSE 2818
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2785: LD_EXP 39
2789: PPUSH
2790: LD_INT 213
2792: PPUSH
2793: LD_INT 85
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2803: LD_EXP 39
2807: PPUSH
2808: LD_INT 215
2810: PPUSH
2811: LD_INT 87
2813: PPUSH
2814: CALL_OW 118
// end ; if Olaf and Kaia then
2818: LD_EXP 43
2822: IFFALSE 2830
2824: PUSH
2825: LD_EXP 39
2829: AND
2830: IFFALSE 2867
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2832: LD_EXP 43
2836: PPUSH
2837: LD_INT 215
2839: PPUSH
2840: LD_INT 87
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2850: LD_EXP 43
2854: PPUSH
2855: LD_INT 213
2857: PPUSH
2858: LD_INT 85
2860: PPUSH
2861: CALL_OW 118
// end else
2865: GO 2887
// if Olaf then
2867: LD_EXP 43
2871: IFFALSE 2887
// PlaceHumanInUnit ( Olaf , factory ) ;
2873: LD_EXP 43
2877: PPUSH
2878: LD_VAR 0 8
2882: PPUSH
2883: CALL_OW 52
// if Givi then
2887: LD_EXP 35
2891: IFFALSE 2974
// begin if Kaia and Olaf then
2893: LD_EXP 39
2897: IFFALSE 2905
2899: PUSH
2900: LD_EXP 43
2904: AND
2905: IFFALSE 2942
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 247
2914: PPUSH
2915: LD_INT 117
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2925: LD_EXP 35
2929: PPUSH
2930: LD_INT 248
2932: PPUSH
2933: LD_INT 118
2935: PPUSH
2936: CALL_OW 118
// end else
2940: GO 2974
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_INT 216
2949: PPUSH
2950: LD_INT 88
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2960: LD_EXP 35
2964: PPUSH
2965: LD_EXP 34
2969: PPUSH
2970: CALL_OW 119
// end ; end ; if Kurt then
2974: LD_EXP 45
2978: IFFALSE 2998
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2980: LD_EXP 45
2984: PPUSH
2985: LD_VAR 0 11
2989: PUSH
2990: LD_INT 2
2992: ARRAY
2993: PPUSH
2994: CALL_OW 52
// if Mike then
2998: LD_EXP 36
3002: IFFALSE 3022
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
3004: LD_EXP 36
3008: PPUSH
3009: LD_VAR 0 11
3013: PUSH
3014: LD_INT 3
3016: ARRAY
3017: PPUSH
3018: CALL_OW 52
// if Kamil then
3022: LD_EXP 38
3026: IFFALSE 3090
// begin if Kaia and Olaf then
3028: LD_EXP 39
3032: IFFALSE 3040
3034: PUSH
3035: LD_EXP 43
3039: AND
3040: IFFALSE 3058
// PlaceHumanInUnit ( Kamil , depot ) else
3042: LD_EXP 38
3046: PPUSH
3047: LD_VAR 0 9
3051: PPUSH
3052: CALL_OW 52
3056: GO 3090
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3058: LD_EXP 38
3062: PPUSH
3063: LD_INT 213
3065: PPUSH
3066: LD_INT 87
3068: PPUSH
3069: LD_INT 0
3071: PPUSH
3072: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3076: LD_EXP 38
3080: PPUSH
3081: LD_EXP 34
3085: PPUSH
3086: CALL_OW 119
// end ; end ; if Sophia then
3090: LD_EXP 40
3094: IFFALSE 3110
// PlaceHumanInUnit ( Sophia , depot ) ;
3096: LD_EXP 40
3100: PPUSH
3101: LD_VAR 0 9
3105: PPUSH
3106: CALL_OW 52
// if Aviradze then
3110: LD_EXP 46
3114: IFFALSE 3163
// if lab then
3116: LD_VAR 0 10
3120: IFFALSE 3142
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3122: LD_EXP 46
3126: PPUSH
3127: LD_VAR 0 10
3131: PUSH
3132: LD_INT 1
3134: ARRAY
3135: PPUSH
3136: CALL_OW 52
3140: GO 3163
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3142: LD_EXP 46
3146: PPUSH
3147: LD_INT 210
3149: PPUSH
3150: LD_INT 87
3152: PPUSH
3153: LD_INT 3
3155: PPUSH
3156: LD_INT 0
3158: PPUSH
3159: CALL_OW 50
// if Ibrahim then
3163: LD_EXP 37
3167: IFFALSE 3216
// if lab then
3169: LD_VAR 0 10
3173: IFFALSE 3195
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3175: LD_EXP 37
3179: PPUSH
3180: LD_VAR 0 10
3184: PUSH
3185: LD_INT 1
3187: ARRAY
3188: PPUSH
3189: CALL_OW 52
3193: GO 3216
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3195: LD_EXP 37
3199: PPUSH
3200: LD_INT 210
3202: PPUSH
3203: LD_INT 87
3205: PPUSH
3206: LD_INT 3
3208: PPUSH
3209: LD_INT 0
3211: PPUSH
3212: CALL_OW 50
// if Markov then
3216: LD_EXP 41
3220: IFFALSE 3269
// if factory then
3222: LD_VAR 0 8
3226: IFFALSE 3248
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3228: LD_EXP 41
3232: PPUSH
3233: LD_VAR 0 8
3237: PUSH
3238: LD_INT 1
3240: ARRAY
3241: PPUSH
3242: CALL_OW 52
3246: GO 3269
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3248: LD_EXP 41
3252: PPUSH
3253: LD_INT 210
3255: PPUSH
3256: LD_INT 87
3258: PPUSH
3259: LD_INT 3
3261: PPUSH
3262: LD_INT 0
3264: PPUSH
3265: CALL_OW 50
// if heikeSecondSquad then
3269: LD_EXP 49
3273: IFFALSE 3313
// for i in heikeSecondSquad do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: LD_EXP 49
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3311
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3288: LD_VAR 0 2
3292: PPUSH
3293: LD_INT 190
3295: PPUSH
3296: LD_INT 65
3298: PPUSH
3299: LD_INT 5
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 50
3309: GO 3285
3311: POP
3312: POP
// if heikeApes then
3313: LD_EXP 50
3317: IFFALSE 3357
// for i in heikeApes do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: LD_EXP 50
3328: PUSH
3329: FOR_IN
3330: IFFALSE 3355
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3332: LD_VAR 0 2
3336: PPUSH
3337: LD_INT 190
3339: PPUSH
3340: LD_INT 70
3342: PPUSH
3343: LD_INT 5
3345: PPUSH
3346: LD_INT 0
3348: PPUSH
3349: CALL_OW 50
3353: GO 3329
3355: POP
3356: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3357: LD_ADDR_VAR 0 13
3361: PUSH
3362: LD_STRING 05_Vehicles
3364: PPUSH
3365: EMPTY
3366: PPUSH
3367: CALL_OW 30
3371: ST_TO_ADDR
// if tmp then
3372: LD_VAR 0 13
3376: IFFALSE 3546
// begin limiter := 10 ;
3378: LD_ADDR_VAR 0 14
3382: PUSH
3383: LD_INT 10
3385: ST_TO_ADDR
// for i in tmp do
3386: LD_ADDR_VAR 0 2
3390: PUSH
3391: LD_VAR 0 13
3395: PUSH
3396: FOR_IN
3397: IFFALSE 3544
// begin limiter := Dec ( limiter ) ;
3399: LD_ADDR_VAR 0 14
3403: PUSH
3404: LD_VAR 0 14
3408: PPUSH
3409: CALL 69273 0 1
3413: ST_TO_ADDR
// if limiter = 0 then
3414: LD_VAR 0 14
3418: PUSH
3419: LD_INT 0
3421: EQUAL
3422: IFFALSE 3426
// break ;
3424: GO 3544
// uc_side := 2 ;
3426: LD_ADDR_OWVAR 20
3430: PUSH
3431: LD_INT 2
3433: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3434: LD_ADDR_OWVAR 21
3438: PUSH
3439: LD_VAR 0 2
3443: PUSH
3444: LD_INT 5
3446: ARRAY
3447: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3448: LD_VAR 0 2
3452: PUSH
3453: LD_INT 1
3455: ARRAY
3456: PPUSH
3457: LD_VAR 0 2
3461: PUSH
3462: LD_INT 2
3464: ARRAY
3465: PPUSH
3466: LD_VAR 0 2
3470: PUSH
3471: LD_INT 3
3473: ARRAY
3474: PPUSH
3475: LD_VAR 0 2
3479: PUSH
3480: LD_INT 4
3482: ARRAY
3483: PPUSH
3484: LD_INT 20
3486: PPUSH
3487: CALL 34708 0 5
// veh := CreateVehicle ;
3491: LD_ADDR_VAR 0 12
3495: PUSH
3496: CALL_OW 45
3500: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: LD_INT 5
3511: PPUSH
3512: CALL_OW 12
3516: PPUSH
3517: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3521: LD_VAR 0 12
3525: PPUSH
3526: LD_INT 252
3528: PPUSH
3529: LD_INT 111
3531: PPUSH
3532: LD_INT 8
3534: PPUSH
3535: LD_INT 0
3537: PPUSH
3538: CALL_OW 50
// end ;
3542: GO 3396
3544: POP
3545: POP
// end ; end ;
3546: LD_VAR 0 1
3550: RET
// export function PrepareRolfSquad ; var i , j ; begin
3551: LD_INT 0
3553: PPUSH
3554: PPUSH
3555: PPUSH
// uc_side := 8 ;
3556: LD_ADDR_OWVAR 20
3560: PUSH
3561: LD_INT 8
3563: ST_TO_ADDR
// uc_nation := 2 ;
3564: LD_ADDR_OWVAR 21
3568: PUSH
3569: LD_INT 2
3571: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3572: LD_ADDR_EXP 47
3576: PUSH
3577: LD_STRING Bergkamp
3579: PPUSH
3580: CALL_OW 25
3584: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3585: LD_ADDR_EXP 51
3589: PUSH
3590: LD_EXP 47
3594: PUSH
3595: EMPTY
3596: LIST
3597: ST_TO_ADDR
// for i := 1 to 4 do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_INT 4
3610: PUSH
3611: FOR_TO
3612: IFFALSE 3692
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3614: LD_ADDR_VAR 0 3
3618: PUSH
3619: DOUBLE
3620: LD_INT 1
3622: DEC
3623: ST_TO_ADDR
3624: LD_INT 5
3626: PUSH
3627: LD_INT 2
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: LD_INT 1
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: PUSH
3642: LD_VAR 0 2
3646: ARRAY
3647: PUSH
3648: FOR_TO
3649: IFFALSE 3688
// begin PrepareHuman ( false , i , 5 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_INT 5
3661: PPUSH
3662: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3666: LD_ADDR_EXP 51
3670: PUSH
3671: LD_EXP 51
3675: PPUSH
3676: CALL_OW 44
3680: PPUSH
3681: CALL 67878 0 2
3685: ST_TO_ADDR
// end ;
3686: GO 3648
3688: POP
3689: POP
// end ;
3690: GO 3611
3692: POP
3693: POP
// if HexInfo ( 5 , 3 ) then
3694: LD_INT 5
3696: PPUSH
3697: LD_INT 3
3699: PPUSH
3700: CALL_OW 428
3704: IFFALSE 3721
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3706: LD_INT 5
3708: PPUSH
3709: LD_INT 3
3711: PPUSH
3712: CALL_OW 428
3716: PPUSH
3717: CALL_OW 64
// for i in rolfSquad do
3721: LD_ADDR_VAR 0 2
3725: PUSH
3726: LD_EXP 51
3730: PUSH
3731: FOR_IN
3732: IFFALSE 3868
// begin uc_direction := 2 ;
3734: LD_ADDR_OWVAR 24
3738: PUSH
3739: LD_INT 2
3741: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3742: LD_VAR 0 2
3746: PPUSH
3747: CALL_OW 257
3751: PUSH
3752: LD_INT 3
3754: EQUAL
3755: IFFALSE 3829
// begin uc_side := 8 ;
3757: LD_ADDR_OWVAR 20
3761: PUSH
3762: LD_INT 8
3764: ST_TO_ADDR
// uc_nation := 2 ;
3765: LD_ADDR_OWVAR 21
3769: PUSH
3770: LD_INT 2
3772: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3773: LD_INT 13
3775: PPUSH
3776: LD_INT 1
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 27
3784: PPUSH
3785: LD_INT 88
3787: PPUSH
3788: CALL 34708 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3792: CALL_OW 45
3796: PPUSH
3797: LD_INT 11
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3807: LD_VAR 0 2
3811: PPUSH
3812: LD_INT 5
3814: PPUSH
3815: LD_INT 3
3817: PPUSH
3818: CALL_OW 428
3822: PPUSH
3823: CALL_OW 52
// end else
3827: GO 3844
// PlaceUnitArea ( i , northSpawn , false ) ;
3829: LD_VAR 0 2
3833: PPUSH
3834: LD_INT 11
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3844: LD_VAR 0 2
3848: PPUSH
3849: LD_INT 29
3851: PPUSH
3852: LD_INT 10
3854: PPUSH
3855: CALL_OW 111
// wait ( 0 0$2 ) ;
3859: LD_INT 70
3861: PPUSH
3862: CALL_OW 67
// end ;
3866: GO 3731
3868: POP
3869: POP
// wait ( 0 0$5 ) ;
3870: LD_INT 175
3872: PPUSH
3873: CALL_OW 67
// end ;
3877: LD_VAR 0 1
3881: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3882: LD_INT 0
3884: PPUSH
3885: PPUSH
3886: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3887: LD_EXP 47
3891: PPUSH
3892: LD_INT 94
3894: PPUSH
3895: LD_INT 63
3897: PPUSH
3898: CALL_OW 428
3902: PPUSH
3903: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3907: LD_ADDR_VAR 0 3
3911: PUSH
3912: LD_INT 4
3914: PUSH
3915: LD_INT 82
3917: PUSH
3918: LD_INT 64
3920: PUSH
3921: LD_INT 1
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 31
3932: PUSH
3933: LD_INT 73
3935: PUSH
3936: LD_INT 58
3938: PUSH
3939: LD_INT 0
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: ST_TO_ADDR
// for i in tmp do
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_VAR 0 3
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4027
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3965: LD_EXP 51
3969: PPUSH
3970: LD_INT 25
3972: PUSH
3973: LD_INT 2
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PPUSH
3980: CALL_OW 72
3984: PPUSH
3985: LD_VAR 0 2
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_VAR 0 2
3998: PUSH
3999: LD_INT 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 2
4007: PUSH
4008: LD_INT 3
4010: ARRAY
4011: PPUSH
4012: LD_VAR 0 2
4016: PUSH
4017: LD_INT 4
4019: ARRAY
4020: PPUSH
4021: CALL_OW 205
4025: GO 3962
4027: POP
4028: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4029: LD_EXP 51
4033: PUSH
4034: LD_INT 2
4036: ARRAY
4037: PPUSH
4038: LD_INT 63
4040: PPUSH
4041: LD_INT 42
4043: PPUSH
4044: CALL_OW 428
4048: PPUSH
4049: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4053: LD_EXP 51
4057: PUSH
4058: LD_INT 3
4060: ARRAY
4061: PPUSH
4062: LD_INT 94
4064: PPUSH
4065: LD_INT 63
4067: PPUSH
4068: CALL_OW 428
4072: PPUSH
4073: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4077: LD_INT 35
4079: PPUSH
4080: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4084: LD_EXP 51
4088: PPUSH
4089: LD_INT 25
4091: PUSH
4092: LD_INT 2
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 3
4101: PUSH
4102: LD_INT 60
4104: PUSH
4105: EMPTY
4106: LIST
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 72
4120: IFFALSE 4077
// rolfScriptBase := true ;
4122: LD_ADDR_EXP 9
4126: PUSH
4127: LD_INT 1
4129: ST_TO_ADDR
// end ;
4130: LD_VAR 0 1
4134: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4135: LD_EXP 9
4139: IFFALSE 4156
4141: PUSH
4142: LD_EXP 47
4146: PPUSH
4147: CALL_OW 255
4151: PUSH
4152: LD_INT 8
4154: EQUAL
4155: AND
4156: IFFALSE 5175
4158: GO 4160
4160: DISABLE
4161: LD_INT 0
4163: PPUSH
4164: PPUSH
4165: PPUSH
4166: PPUSH
4167: PPUSH
4168: PPUSH
4169: PPUSH
4170: PPUSH
4171: PPUSH
4172: PPUSH
// begin enable ;
4173: ENABLE
// if not rolfSquad then
4174: LD_EXP 51
4178: NOT
4179: IFFALSE 4183
// exit ;
4181: GO 5175
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4183: LD_ADDR_VAR 0 9
4187: PUSH
4188: LD_INT 12
4190: PPUSH
4191: LD_INT 81
4193: PUSH
4194: LD_INT 8
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PPUSH
4201: CALL_OW 70
4205: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4206: LD_ADDR_VAR 0 5
4210: PUSH
4211: LD_EXP 51
4215: PPUSH
4216: LD_INT 25
4218: PUSH
4219: LD_INT 1
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PPUSH
4226: CALL_OW 72
4230: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4231: LD_ADDR_VAR 0 6
4235: PUSH
4236: LD_EXP 51
4240: PPUSH
4241: LD_INT 25
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 72
4255: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4256: LD_ADDR_VAR 0 8
4260: PUSH
4261: LD_EXP 51
4265: PPUSH
4266: LD_INT 25
4268: PUSH
4269: LD_INT 3
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PPUSH
4276: CALL_OW 72
4280: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4281: LD_ADDR_VAR 0 7
4285: PUSH
4286: LD_EXP 51
4290: PPUSH
4291: LD_INT 25
4293: PUSH
4294: LD_INT 4
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 72
4305: ST_TO_ADDR
// if sol then
4306: LD_VAR 0 5
4310: IFFALSE 4612
// for i in sol union Rolf do
4312: LD_ADDR_VAR 0 1
4316: PUSH
4317: LD_VAR 0 5
4321: PUSH
4322: LD_EXP 47
4326: UNION
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4610
// if not IsInUnit ( i ) and not HasTask ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 310
4340: NOT
4341: IFFALSE 4355
4343: PUSH
4344: LD_VAR 0 1
4348: PPUSH
4349: CALL_OW 314
4353: NOT
4354: AND
4355: IFFALSE 4608
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4357: LD_VAR 0 1
4361: PPUSH
4362: CALL_OW 256
4366: PUSH
4367: LD_INT 500
4369: LESS
4370: IFFALSE 4393
4372: PUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: LD_INT 80
4380: PPUSH
4381: LD_INT 49
4383: PPUSH
4384: CALL_OW 297
4388: PUSH
4389: LD_INT 6
4391: GREATER
4392: AND
4393: IFFALSE 4412
// begin ComMoveXY ( i , 80 , 49 ) ;
4395: LD_VAR 0 1
4399: PPUSH
4400: LD_INT 80
4402: PPUSH
4403: LD_INT 49
4405: PPUSH
4406: CALL_OW 111
// continue ;
4410: GO 4328
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4412: LD_ADDR_VAR 0 4
4416: PUSH
4417: LD_INT 22
4419: PUSH
4420: LD_INT 8
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 50
4429: PUSH
4430: EMPTY
4431: LIST
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: LD_INT 30
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 30
4448: PUSH
4449: LD_INT 5
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 30
4458: PUSH
4459: LD_INT 32
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 30
4468: PUSH
4469: LD_INT 31
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: ST_TO_ADDR
// if tmp then
4493: LD_VAR 0 4
4497: IFFALSE 4608
// begin for b in tmp do
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: LD_VAR 0 4
4508: PUSH
4509: FOR_IN
4510: IFFALSE 4606
// begin case GetBType ( b ) of b_armoury , b_barracks :
4512: LD_VAR 0 2
4516: PPUSH
4517: CALL_OW 266
4521: PUSH
4522: LD_INT 4
4524: DOUBLE
4525: EQUAL
4526: IFTRUE 4536
4528: LD_INT 5
4530: DOUBLE
4531: EQUAL
4532: IFTRUE 4536
4534: GO 4547
4536: POP
// p := 6 ; b_breastwork , b_bunker :
4537: LD_ADDR_VAR 0 3
4541: PUSH
4542: LD_INT 6
4544: ST_TO_ADDR
4545: GO 4573
4547: LD_INT 31
4549: DOUBLE
4550: EQUAL
4551: IFTRUE 4561
4553: LD_INT 32
4555: DOUBLE
4556: EQUAL
4557: IFTRUE 4561
4559: GO 4572
4561: POP
// p := 1 ; end ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_INT 1
4569: ST_TO_ADDR
4570: GO 4573
4572: POP
// if UnitsInside ( b ) < p then
4573: LD_VAR 0 2
4577: PPUSH
4578: CALL_OW 313
4582: PUSH
4583: LD_VAR 0 3
4587: LESS
4588: IFFALSE 4604
// ComEnterUnit ( i , b ) ;
4590: LD_VAR 0 1
4594: PPUSH
4595: LD_VAR 0 2
4599: PPUSH
4600: CALL_OW 120
// end ;
4604: GO 4509
4606: POP
4607: POP
// end ; end ;
4608: GO 4328
4610: POP
4611: POP
// if sci then
4612: LD_VAR 0 7
4616: IFFALSE 4671
// for i in sci do
4618: LD_ADDR_VAR 0 1
4622: PUSH
4623: LD_VAR 0 7
4627: PUSH
4628: FOR_IN
4629: IFFALSE 4669
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4631: LD_VAR 0 1
4635: PPUSH
4636: LD_INT 80
4638: PPUSH
4639: LD_INT 49
4641: PPUSH
4642: CALL_OW 297
4646: PUSH
4647: LD_INT 9
4649: GREATER
4650: IFFALSE 4667
// ComMoveXY ( i , 80 , 49 ) ;
4652: LD_VAR 0 1
4656: PPUSH
4657: LD_INT 80
4659: PPUSH
4660: LD_INT 49
4662: PPUSH
4663: CALL_OW 111
// end ;
4667: GO 4628
4669: POP
4670: POP
// if mech then
4671: LD_VAR 0 8
4675: IFFALSE 4893
// for i in mech do
4677: LD_ADDR_VAR 0 1
4681: PUSH
4682: LD_VAR 0 8
4686: PUSH
4687: FOR_IN
4688: IFFALSE 4891
// begin hasVehicle := IsInUnit ( i ) ;
4690: LD_ADDR_VAR 0 10
4694: PUSH
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 310
4704: ST_TO_ADDR
// if enemyInBase then
4705: LD_VAR 0 9
4709: IFFALSE 4807
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4711: LD_VAR 0 10
4715: IFFALSE 4732
4717: PUSH
4718: LD_VAR 0 10
4722: PPUSH
4723: CALL_OW 256
4727: PUSH
4728: LD_INT 500
4730: GREATER
4731: AND
4732: IFFALSE 4760
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4734: LD_VAR 0 10
4738: PPUSH
4739: LD_VAR 0 9
4743: PPUSH
4744: LD_VAR 0 10
4748: PPUSH
4749: CALL_OW 74
4753: PPUSH
4754: CALL_OW 115
4758: GO 4805
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4760: LD_VAR 0 10
4764: PPUSH
4765: LD_INT 86
4767: PPUSH
4768: LD_INT 49
4770: PPUSH
4771: CALL_OW 297
4775: PUSH
4776: LD_INT 8
4778: GREATER
4779: IFFALSE 4805
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4781: LD_VAR 0 10
4785: PPUSH
4786: LD_INT 86
4788: PPUSH
4789: LD_INT 49
4791: PPUSH
4792: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: CALL 69714 0 1
// end end else
4805: GO 4889
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4807: LD_VAR 0 1
4811: PPUSH
4812: LD_INT 86
4814: PPUSH
4815: LD_INT 49
4817: PPUSH
4818: CALL_OW 297
4822: PUSH
4823: LD_INT 8
4825: GREATER
4826: IFFALSE 4845
// ComMoveXY ( i , 86 , 49 ) else
4828: LD_VAR 0 1
4832: PPUSH
4833: LD_INT 86
4835: PPUSH
4836: LD_INT 49
4838: PPUSH
4839: CALL_OW 111
4843: GO 4889
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4845: LD_VAR 0 10
4849: IFFALSE 4866
4851: PUSH
4852: LD_VAR 0 10
4856: PPUSH
4857: CALL_OW 256
4861: PUSH
4862: LD_INT 1000
4864: LESS
4865: AND
4866: IFFALSE 4889
// begin SetFuel ( hasVehicle , 100 ) ;
4868: LD_VAR 0 10
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4880: LD_VAR 0 1
4884: PPUSH
4885: CALL 69592 0 1
// end ; end ; end ;
4889: GO 4687
4891: POP
4892: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4893: LD_ADDR_VAR 0 4
4897: PUSH
4898: LD_INT 12
4900: PPUSH
4901: LD_INT 3
4903: PUSH
4904: LD_INT 24
4906: PUSH
4907: LD_INT 1000
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 21
4920: PUSH
4921: LD_INT 3
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PPUSH
4932: CALL_OW 70
4936: ST_TO_ADDR
// if tmp and eng then
4937: LD_VAR 0 4
4941: IFFALSE 4949
4943: PUSH
4944: LD_VAR 0 6
4948: AND
4949: IFFALSE 5055
// begin for i in eng do
4951: LD_ADDR_VAR 0 1
4955: PUSH
4956: LD_VAR 0 6
4960: PUSH
4961: FOR_IN
4962: IFFALSE 5053
// if IsInUnit ( i ) then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 310
4973: IFFALSE 4986
// ComExitBuilding ( i ) else
4975: LD_VAR 0 1
4979: PPUSH
4980: CALL_OW 122
4984: GO 5051
// if GetLives ( i ) = 1000 then
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 256
4995: PUSH
4996: LD_INT 1000
4998: EQUAL
4999: IFFALSE 5021
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5001: LD_VAR 0 1
5005: PPUSH
5006: LD_VAR 0 4
5010: PUSH
5011: LD_INT 1
5013: ARRAY
5014: PPUSH
5015: CALL_OW 130
5019: GO 5051
// if GetLives ( i ) < 700 then
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 256
5030: PUSH
5031: LD_INT 700
5033: LESS
5034: IFFALSE 5051
// ComMoveXY ( i , 80 , 49 ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_INT 80
5043: PPUSH
5044: LD_INT 49
5046: PPUSH
5047: CALL_OW 111
5051: GO 4961
5053: POP
5054: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5055: LD_VAR 0 4
5059: NOT
5060: IFFALSE 5086
5062: PUSH
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_INT 3
5070: PUSH
5071: LD_INT 54
5073: PUSH
5074: EMPTY
5075: LIST
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PPUSH
5081: CALL_OW 72
5085: AND
5086: IFFALSE 5175
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5088: LD_ADDR_VAR 0 1
5092: PUSH
5093: LD_VAR 0 6
5097: PPUSH
5098: LD_INT 3
5100: PUSH
5101: LD_INT 54
5103: PUSH
5104: EMPTY
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PPUSH
5111: CALL_OW 72
5115: PUSH
5116: FOR_IN
5117: IFFALSE 5173
// if GetLives ( i ) < 1000 then
5119: LD_VAR 0 1
5123: PPUSH
5124: CALL_OW 256
5128: PUSH
5129: LD_INT 1000
5131: LESS
5132: IFFALSE 5151
// ComMoveXY ( i , 80 , 49 ) else
5134: LD_VAR 0 1
5138: PPUSH
5139: LD_INT 80
5141: PPUSH
5142: LD_INT 49
5144: PPUSH
5145: CALL_OW 111
5149: GO 5171
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5151: LD_VAR 0 1
5155: PPUSH
5156: LD_INT 86
5158: PPUSH
5159: LD_INT 54
5161: PPUSH
5162: CALL_OW 428
5166: PPUSH
5167: CALL_OW 120
5171: GO 5116
5173: POP
5174: POP
// end ;
5175: PPOPN 10
5177: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5178: LD_INT 0
5180: PPUSH
5181: PPUSH
5182: PPUSH
5183: PPUSH
// uc_side := 5 ;
5184: LD_ADDR_OWVAR 20
5188: PUSH
5189: LD_INT 5
5191: ST_TO_ADDR
// uc_nation := 2 ;
5192: LD_ADDR_OWVAR 21
5196: PUSH
5197: LD_INT 2
5199: ST_TO_ADDR
// omarSquad := [ ] ;
5200: LD_ADDR_EXP 52
5204: PUSH
5205: EMPTY
5206: ST_TO_ADDR
// for i := 1 to 4 do
5207: LD_ADDR_VAR 0 2
5211: PUSH
5212: DOUBLE
5213: LD_INT 1
5215: DEC
5216: ST_TO_ADDR
5217: LD_INT 4
5219: PUSH
5220: FOR_TO
5221: IFFALSE 5346
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5223: LD_ADDR_VAR 0 3
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 6
5235: PUSH
5236: LD_INT 2
5238: PUSH
5239: LD_INT 2
5241: PUSH
5242: LD_EXP 21
5246: PLUS
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: LD_VAR 0 2
5261: ARRAY
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5342
// begin PrepareHuman ( false , i , 5 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_VAR 0 2
5273: PPUSH
5274: LD_INT 5
5276: PPUSH
5277: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5281: LD_ADDR_EXP 52
5285: PUSH
5286: LD_EXP 52
5290: PPUSH
5291: CALL_OW 44
5295: PPUSH
5296: CALL 67878 0 2
5300: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5301: LD_VAR 0 2
5305: PUSH
5306: LD_INT 1
5308: EQUAL
5309: IFFALSE 5320
5311: PUSH
5312: LD_INT 50
5314: PPUSH
5315: CALL_OW 13
5319: AND
5320: IFFALSE 5340
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5322: LD_EXP 52
5326: PUSH
5327: LD_EXP 52
5331: ARRAY
5332: PPUSH
5333: LD_INT 8
5335: PPUSH
5336: CALL_OW 336
// end ;
5340: GO 5263
5342: POP
5343: POP
// end ;
5344: GO 5220
5346: POP
5347: POP
// if HexInfo ( 340 , 205 ) then
5348: LD_INT 340
5350: PPUSH
5351: LD_INT 205
5353: PPUSH
5354: CALL_OW 428
5358: IFFALSE 5375
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5360: LD_INT 340
5362: PPUSH
5363: LD_INT 205
5365: PPUSH
5366: CALL_OW 428
5370: PPUSH
5371: CALL_OW 64
// p := 0 ;
5375: LD_ADDR_VAR 0 4
5379: PUSH
5380: LD_INT 0
5382: ST_TO_ADDR
// for i in omarSquad do
5383: LD_ADDR_VAR 0 2
5387: PUSH
5388: LD_EXP 52
5392: PUSH
5393: FOR_IN
5394: IFFALSE 5597
// begin uc_direction := 4 ;
5396: LD_ADDR_OWVAR 24
5400: PUSH
5401: LD_INT 4
5403: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5404: LD_VAR 0 2
5408: PPUSH
5409: CALL_OW 257
5413: PUSH
5414: LD_INT 3
5416: EQUAL
5417: IFFALSE 5429
5419: PUSH
5420: LD_VAR 0 4
5424: PUSH
5425: LD_INT 2
5427: LESS
5428: AND
5429: IFFALSE 5558
// begin p := p + 1 ;
5431: LD_ADDR_VAR 0 4
5435: PUSH
5436: LD_VAR 0 4
5440: PUSH
5441: LD_INT 1
5443: PLUS
5444: ST_TO_ADDR
// uc_side := 5 ;
5445: LD_ADDR_OWVAR 20
5449: PUSH
5450: LD_INT 5
5452: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5453: LD_INT 0
5455: PPUSH
5456: LD_INT 1
5458: PPUSH
5459: CALL_OW 12
5463: IFFALSE 5494
// begin uc_nation := 2 ;
5465: LD_ADDR_OWVAR 21
5469: PUSH
5470: LD_INT 2
5472: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5473: LD_INT 13
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: LD_INT 1
5481: PPUSH
5482: LD_INT 27
5484: PPUSH
5485: LD_INT 88
5487: PPUSH
5488: CALL 34708 0 5
// end else
5492: GO 5521
// begin uc_nation := 3 ;
5494: LD_ADDR_OWVAR 21
5498: PUSH
5499: LD_INT 3
5501: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5502: LD_INT 22
5504: PPUSH
5505: LD_INT 1
5507: PPUSH
5508: LD_INT 1
5510: PPUSH
5511: LD_INT 45
5513: PPUSH
5514: LD_INT 88
5516: PPUSH
5517: CALL 34708 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5521: CALL_OW 45
5525: PPUSH
5526: LD_INT 13
5528: PPUSH
5529: LD_INT 0
5531: PPUSH
5532: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5536: LD_VAR 0 2
5540: PPUSH
5541: LD_INT 340
5543: PPUSH
5544: LD_INT 205
5546: PPUSH
5547: CALL_OW 428
5551: PPUSH
5552: CALL_OW 52
// end else
5556: GO 5573
// PlaceUnitArea ( i , southSpawn , false ) ;
5558: LD_VAR 0 2
5562: PPUSH
5563: LD_INT 13
5565: PPUSH
5566: LD_INT 0
5568: PPUSH
5569: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5573: LD_VAR 0 2
5577: PPUSH
5578: LD_INT 333
5580: PPUSH
5581: LD_INT 210
5583: PPUSH
5584: CALL_OW 111
// wait ( 0 0$2 ) ;
5588: LD_INT 70
5590: PPUSH
5591: CALL_OW 67
// end ;
5595: GO 5393
5597: POP
5598: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5599: LD_EXP 44
5603: PPUSH
5604: LD_INT 340
5606: PPUSH
5607: LD_INT 205
5609: PPUSH
5610: LD_INT 0
5612: PPUSH
5613: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5617: LD_EXP 44
5621: PPUSH
5622: LD_INT 333
5624: PPUSH
5625: LD_INT 206
5627: PPUSH
5628: CALL_OW 111
// wait ( 0 0$2 ) ;
5632: LD_INT 70
5634: PPUSH
5635: CALL_OW 67
// ComHold ( omarSquad ) ;
5639: LD_EXP 52
5643: PPUSH
5644: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5648: LD_EXP 44
5652: PUSH
5653: LD_EXP 52
5657: PPUSH
5658: LD_INT 2
5660: PUSH
5661: LD_INT 25
5663: PUSH
5664: LD_INT 1
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 25
5673: PUSH
5674: LD_INT 8
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PPUSH
5686: CALL_OW 72
5690: UNION
5691: PUSH
5692: LD_INT 22
5694: PUSH
5695: LD_INT 5
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 21
5704: PUSH
5705: LD_INT 2
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: UNION
5721: PPUSH
5722: LD_INT 315
5724: PPUSH
5725: LD_INT 214
5727: PPUSH
5728: CALL_OW 114
// wait ( 0 0$22 ) ;
5732: LD_INT 770
5734: PPUSH
5735: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5739: LD_EXP 52
5743: PUSH
5744: LD_EXP 44
5748: UNION
5749: PPUSH
5750: LD_INT 329
5752: PPUSH
5753: LD_INT 231
5755: PPUSH
5756: CALL_OW 114
// end ;
5760: LD_VAR 0 1
5764: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5765: LD_EXP 10
5769: IFFALSE 6866
5771: GO 5773
5773: DISABLE
5774: LD_INT 0
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
5785: PPUSH
5786: PPUSH
// begin enable ;
5787: ENABLE
// if not omarSquad then
5788: LD_EXP 52
5792: NOT
5793: IFFALSE 5797
// exit ;
5795: GO 6866
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5797: LD_ADDR_VAR 0 10
5801: PUSH
5802: LD_INT 14
5804: PPUSH
5805: LD_INT 81
5807: PUSH
5808: LD_INT 5
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PPUSH
5815: CALL_OW 70
5819: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5820: LD_ADDR_VAR 0 6
5824: PUSH
5825: LD_EXP 52
5829: PPUSH
5830: LD_INT 2
5832: PUSH
5833: LD_INT 25
5835: PUSH
5836: LD_INT 1
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: PUSH
5843: LD_INT 25
5845: PUSH
5846: LD_INT 8
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 72
5862: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5863: LD_ADDR_VAR 0 7
5867: PUSH
5868: LD_EXP 52
5872: PPUSH
5873: LD_INT 25
5875: PUSH
5876: LD_INT 2
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PPUSH
5883: CALL_OW 72
5887: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5888: LD_ADDR_VAR 0 9
5892: PUSH
5893: LD_EXP 52
5897: PPUSH
5898: LD_INT 25
5900: PUSH
5901: LD_INT 3
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: CALL_OW 72
5912: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5913: LD_ADDR_VAR 0 8
5917: PUSH
5918: LD_EXP 52
5922: PPUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 4
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PPUSH
5933: CALL_OW 72
5937: ST_TO_ADDR
// if sol then
5938: LD_VAR 0 6
5942: IFFALSE 6312
// for i in sol do
5944: LD_ADDR_VAR 0 1
5948: PUSH
5949: LD_VAR 0 6
5953: PUSH
5954: FOR_IN
5955: IFFALSE 6310
// if not HasTask ( i ) then
5957: LD_VAR 0 1
5961: PPUSH
5962: CALL_OW 314
5966: NOT
5967: IFFALSE 6308
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5969: LD_VAR 0 1
5973: PPUSH
5974: CALL_OW 310
5978: NOT
5979: IFFALSE 5996
5981: PUSH
5982: LD_VAR 0 1
5986: PPUSH
5987: CALL_OW 256
5991: PUSH
5992: LD_INT 500
5994: LESS
5995: AND
5996: IFFALSE 6019
5998: PUSH
5999: LD_VAR 0 1
6003: PPUSH
6004: LD_INT 333
6006: PPUSH
6007: LD_INT 234
6009: PPUSH
6010: CALL_OW 297
6014: PUSH
6015: LD_INT 6
6017: GREATER
6018: AND
6019: IFFALSE 6038
// begin ComMoveXY ( i , 333 , 234 ) ;
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 333
6028: PPUSH
6029: LD_INT 234
6031: PPUSH
6032: CALL_OW 111
// continue ;
6036: GO 5954
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
6038: LD_ADDR_VAR 0 5
6042: PUSH
6043: LD_INT 22
6045: PUSH
6046: LD_INT 5
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 58
6055: PUSH
6056: EMPTY
6057: LIST
6058: PUSH
6059: LD_INT 50
6061: PUSH
6062: EMPTY
6063: LIST
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: LD_INT 30
6070: PUSH
6071: LD_INT 32
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 30
6080: PUSH
6081: LD_INT 31
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PPUSH
6099: CALL_OW 69
6103: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6104: LD_VAR 0 5
6108: IFFALSE 6130
6110: PUSH
6111: LD_VAR 0 1
6115: PPUSH
6116: CALL_OW 310
6120: PPUSH
6121: CALL_OW 266
6125: PUSH
6126: LD_INT 31
6128: NONEQUAL
6129: AND
6130: IFFALSE 6212
// begin for j in tmp do
6132: LD_ADDR_VAR 0 2
6136: PUSH
6137: LD_VAR 0 5
6141: PUSH
6142: FOR_IN
6143: IFFALSE 6208
// if GetTag ( j ) <> 1 then
6145: LD_VAR 0 2
6149: PPUSH
6150: CALL_OW 110
6154: PUSH
6155: LD_INT 1
6157: NONEQUAL
6158: IFFALSE 6206
// begin SetTag ( j , 1 ) ;
6160: LD_VAR 0 2
6164: PPUSH
6165: LD_INT 1
6167: PPUSH
6168: CALL_OW 109
// if IsInUnit ( i ) then
6172: LD_VAR 0 1
6176: PPUSH
6177: CALL_OW 310
6181: IFFALSE 6192
// ComExit ( i ) ;
6183: LD_VAR 0 1
6187: PPUSH
6188: CALL 68276 0 1
// AddComEnterUnit ( i , j ) ;
6192: LD_VAR 0 1
6196: PPUSH
6197: LD_VAR 0 2
6201: PPUSH
6202: CALL_OW 180
// end ;
6206: GO 6142
6208: POP
6209: POP
// end else
6210: GO 6308
// if not IsInUnit ( i ) then
6212: LD_VAR 0 1
6216: PPUSH
6217: CALL_OW 310
6221: NOT
6222: IFFALSE 6308
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6224: LD_ADDR_VAR 0 5
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_INT 5
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 50
6241: PUSH
6242: EMPTY
6243: LIST
6244: PUSH
6245: LD_INT 30
6247: PUSH
6248: LD_INT 4
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 69
6264: ST_TO_ADDR
// if tmp then
6265: LD_VAR 0 5
6269: IFFALSE 6308
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6271: LD_VAR 0 5
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PPUSH
6280: CALL_OW 313
6284: PUSH
6285: LD_INT 6
6287: LESS
6288: IFFALSE 6308
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6290: LD_VAR 0 1
6294: PPUSH
6295: LD_VAR 0 5
6299: PUSH
6300: LD_INT 1
6302: ARRAY
6303: PPUSH
6304: CALL_OW 120
// end ; end ;
6308: GO 5954
6310: POP
6311: POP
// if sci then
6312: LD_VAR 0 8
6316: IFFALSE 6371
// for i in sci do
6318: LD_ADDR_VAR 0 1
6322: PUSH
6323: LD_VAR 0 8
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6369
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 333
6338: PPUSH
6339: LD_INT 234
6341: PPUSH
6342: CALL_OW 297
6346: PUSH
6347: LD_INT 9
6349: GREATER
6350: IFFALSE 6367
// ComMoveXY ( i , 333 , 234 ) ;
6352: LD_VAR 0 1
6356: PPUSH
6357: LD_INT 333
6359: PPUSH
6360: LD_INT 234
6362: PPUSH
6363: CALL_OW 111
// end ;
6367: GO 6328
6369: POP
6370: POP
// if mech then
6371: LD_VAR 0 9
6375: IFFALSE 6584
// for i in mech do
6377: LD_ADDR_VAR 0 1
6381: PUSH
6382: LD_VAR 0 9
6386: PUSH
6387: FOR_IN
6388: IFFALSE 6582
// begin hasVehicle := IsInUnit ( i ) ;
6390: LD_ADDR_VAR 0 11
6394: PUSH
6395: LD_VAR 0 1
6399: PPUSH
6400: CALL_OW 310
6404: ST_TO_ADDR
// if enemyInBase then
6405: LD_VAR 0 10
6409: IFFALSE 6498
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6411: LD_VAR 0 11
6415: IFFALSE 6432
6417: PUSH
6418: LD_VAR 0 11
6422: PPUSH
6423: CALL_OW 256
6427: PUSH
6428: LD_INT 500
6430: GREATER
6431: AND
6432: IFFALSE 6460
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6434: LD_VAR 0 11
6438: PPUSH
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 11
6448: PPUSH
6449: CALL_OW 74
6453: PPUSH
6454: CALL_OW 115
6458: GO 6496
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6460: LD_VAR 0 11
6464: PPUSH
6465: LD_INT 333
6467: PPUSH
6468: LD_INT 234
6470: PPUSH
6471: CALL_OW 297
6475: PUSH
6476: LD_INT 6
6478: GREATER
6479: IFFALSE 6496
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6481: LD_VAR 0 11
6485: PPUSH
6486: LD_INT 333
6488: PPUSH
6489: LD_INT 234
6491: PPUSH
6492: CALL_OW 111
// end else
6496: GO 6580
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_INT 333
6505: PPUSH
6506: LD_INT 234
6508: PPUSH
6509: CALL_OW 297
6513: PUSH
6514: LD_INT 6
6516: GREATER
6517: IFFALSE 6536
// ComMoveXY ( i , 333 , 234 ) else
6519: LD_VAR 0 1
6523: PPUSH
6524: LD_INT 333
6526: PPUSH
6527: LD_INT 234
6529: PPUSH
6530: CALL_OW 111
6534: GO 6580
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6536: LD_VAR 0 11
6540: IFFALSE 6557
6542: PUSH
6543: LD_VAR 0 11
6547: PPUSH
6548: CALL_OW 256
6552: PUSH
6553: LD_INT 1000
6555: LESS
6556: AND
6557: IFFALSE 6580
// begin SetFuel ( hasVehicle , 100 ) ;
6559: LD_VAR 0 11
6563: PPUSH
6564: LD_INT 100
6566: PPUSH
6567: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6571: LD_VAR 0 1
6575: PPUSH
6576: CALL 69592 0 1
// end ; end ; end ;
6580: GO 6387
6582: POP
6583: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_INT 14
6591: PPUSH
6592: LD_INT 3
6594: PUSH
6595: LD_INT 24
6597: PUSH
6598: LD_INT 1000
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 21
6611: PUSH
6612: LD_INT 3
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PPUSH
6623: CALL_OW 70
6627: ST_TO_ADDR
// if tmp and eng then
6628: LD_VAR 0 5
6632: IFFALSE 6640
6634: PUSH
6635: LD_VAR 0 7
6639: AND
6640: IFFALSE 6746
// begin for i in eng do
6642: LD_ADDR_VAR 0 1
6646: PUSH
6647: LD_VAR 0 7
6651: PUSH
6652: FOR_IN
6653: IFFALSE 6744
// if IsInUnit ( i ) then
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 310
6664: IFFALSE 6677
// ComExitBuilding ( i ) else
6666: LD_VAR 0 1
6670: PPUSH
6671: CALL_OW 122
6675: GO 6742
// if GetLives ( i ) = 1000 then
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 256
6686: PUSH
6687: LD_INT 1000
6689: EQUAL
6690: IFFALSE 6712
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6692: LD_VAR 0 1
6696: PPUSH
6697: LD_VAR 0 5
6701: PUSH
6702: LD_INT 1
6704: ARRAY
6705: PPUSH
6706: CALL_OW 130
6710: GO 6742
// if GetLives ( i ) < 700 then
6712: LD_VAR 0 1
6716: PPUSH
6717: CALL_OW 256
6721: PUSH
6722: LD_INT 700
6724: LESS
6725: IFFALSE 6742
// ComMoveXY ( i , 333 , 234 ) ;
6727: LD_VAR 0 1
6731: PPUSH
6732: LD_INT 333
6734: PPUSH
6735: LD_INT 234
6737: PPUSH
6738: CALL_OW 111
6742: GO 6652
6744: POP
6745: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6746: LD_VAR 0 5
6750: NOT
6751: IFFALSE 6777
6753: PUSH
6754: LD_VAR 0 7
6758: PPUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 54
6764: PUSH
6765: EMPTY
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PPUSH
6772: CALL_OW 72
6776: AND
6777: IFFALSE 6866
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6779: LD_ADDR_VAR 0 1
6783: PUSH
6784: LD_VAR 0 7
6788: PPUSH
6789: LD_INT 3
6791: PUSH
6792: LD_INT 54
6794: PUSH
6795: EMPTY
6796: LIST
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PPUSH
6802: CALL_OW 72
6806: PUSH
6807: FOR_IN
6808: IFFALSE 6864
// if GetLives ( i ) < 1000 then
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 256
6819: PUSH
6820: LD_INT 1000
6822: LESS
6823: IFFALSE 6842
// ComMoveXY ( i , 333 , 234 ) else
6825: LD_VAR 0 1
6829: PPUSH
6830: LD_INT 333
6832: PPUSH
6833: LD_INT 234
6835: PPUSH
6836: CALL_OW 111
6840: GO 6862
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6842: LD_VAR 0 1
6846: PPUSH
6847: LD_INT 341
6849: PPUSH
6850: LD_INT 232
6852: PPUSH
6853: CALL_OW 428
6857: PPUSH
6858: CALL_OW 120
6862: GO 6807
6864: POP
6865: POP
// end ;
6866: PPOPN 11
6868: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6869: LD_EXP 44
6873: PPUSH
6874: CALL_OW 256
6878: PUSH
6879: LD_INT 1000
6881: LESS
6882: IFFALSE 6900
6884: GO 6886
6886: DISABLE
// begin enable ;
6887: ENABLE
// SetLives ( Omar , 1000 ) ;
6888: LD_EXP 44
6892: PPUSH
6893: LD_INT 1000
6895: PPUSH
6896: CALL_OW 234
// end ;
6900: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6901: LD_EXP 47
6905: PPUSH
6906: CALL_OW 256
6910: PUSH
6911: LD_INT 1000
6913: LESS
6914: IFFALSE 6922
6916: PUSH
6917: LD_EXP 32
6921: AND
6922: IFFALSE 6940
6924: GO 6926
6926: DISABLE
// begin enable ;
6927: ENABLE
// SetLives ( Rolf , 1000 ) ;
6928: LD_EXP 47
6932: PPUSH
6933: LD_INT 1000
6935: PPUSH
6936: CALL_OW 234
// end ;
6940: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6941: LD_EXP 32
6945: IFFALSE 7635
6947: GO 6949
6949: DISABLE
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: LD_INT 215
6965: PUSH
6966: LD_INT 162
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 195
6975: PUSH
6976: LD_INT 163
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 174
6985: PUSH
6986: LD_INT 162
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 145
6995: PUSH
6996: LD_INT 163
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 127
7005: PUSH
7006: LD_INT 163
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
7020: LD_ADDR_VAR 0 6
7024: PUSH
7025: LD_INT 221
7027: PUSH
7028: LD_INT 161
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
7035: LD_ADDR_VAR 0 2
7039: PUSH
7040: LD_EXP 47
7044: PUSH
7045: LD_EXP 51
7049: UNION
7050: ST_TO_ADDR
// if not tmp then
7051: LD_VAR 0 2
7055: NOT
7056: IFFALSE 7060
// exit ;
7058: GO 7635
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7060: LD_VAR 0 2
7064: PPUSH
7065: LD_VAR 0 6
7069: PUSH
7070: LD_INT 1
7072: ARRAY
7073: PPUSH
7074: LD_VAR 0 6
7078: PUSH
7079: LD_INT 2
7081: ARRAY
7082: PPUSH
7083: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7087: LD_INT 35
7089: PPUSH
7090: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7094: LD_ADDR_VAR 0 2
7098: PUSH
7099: LD_EXP 51
7103: PPUSH
7104: LD_INT 3
7106: PUSH
7107: LD_INT 55
7109: PUSH
7110: EMPTY
7111: LIST
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 25
7122: PUSH
7123: LD_INT 1
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 25
7132: PUSH
7133: LD_INT 8
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PPUSH
7149: CALL_OW 72
7153: ST_TO_ADDR
// if tmp then
7154: LD_VAR 0 2
7158: IFFALSE 7313
// begin for i in tmp do
7160: LD_ADDR_VAR 0 1
7164: PUSH
7165: LD_VAR 0 2
7169: PUSH
7170: FOR_IN
7171: IFFALSE 7311
// begin tag := GetTag ( i ) ;
7173: LD_ADDR_VAR 0 5
7177: PUSH
7178: LD_VAR 0 1
7182: PPUSH
7183: CALL_OW 110
7187: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL_OW 256
7197: PUSH
7198: LD_INT 800
7200: LESS
7201: IFFALSE 7213
7203: PUSH
7204: LD_VAR 0 5
7208: PUSH
7209: LD_INT 101
7211: LESS
7212: AND
7213: IFFALSE 7256
// begin SetTag ( i , 101 ) ;
7215: LD_VAR 0 1
7219: PPUSH
7220: LD_INT 101
7222: PPUSH
7223: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7227: LD_VAR 0 1
7231: PPUSH
7232: LD_VAR 0 6
7236: PUSH
7237: LD_INT 1
7239: ARRAY
7240: PPUSH
7241: LD_VAR 0 6
7245: PUSH
7246: LD_INT 2
7248: ARRAY
7249: PPUSH
7250: CALL_OW 111
// end else
7254: GO 7309
// if tag = 101 then
7256: LD_VAR 0 5
7260: PUSH
7261: LD_INT 101
7263: EQUAL
7264: IFFALSE 7295
// begin if GetLives ( i ) = 1000 then
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 256
7275: PUSH
7276: LD_INT 1000
7278: EQUAL
7279: IFFALSE 7293
// SetTag ( i , 0 ) ;
7281: LD_VAR 0 1
7285: PPUSH
7286: LD_INT 0
7288: PPUSH
7289: CALL_OW 109
// end else
7293: GO 7309
// AgressiveMove ( i , path ) ;
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_VAR 0 4
7304: PPUSH
7305: CALL 70644 0 2
// end ;
7309: GO 7170
7311: POP
7312: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_INT 22
7320: PUSH
7321: LD_INT 8
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 21
7330: PUSH
7331: LD_INT 2
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 3
7340: PUSH
7341: LD_INT 34
7343: PUSH
7344: LD_INT 32
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: PPUSH
7360: CALL_OW 69
7364: ST_TO_ADDR
// if not tmp then
7365: LD_VAR 0 2
7369: NOT
7370: IFFALSE 7374
// continue ;
7372: GO 7087
// for i in tmp do
7374: LD_ADDR_VAR 0 1
7378: PUSH
7379: LD_VAR 0 2
7383: PUSH
7384: FOR_IN
7385: IFFALSE 7626
// begin mech := IsDrivenBy ( i ) ;
7387: LD_ADDR_VAR 0 3
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 311
7401: ST_TO_ADDR
// if not mech then
7402: LD_VAR 0 3
7406: NOT
7407: IFFALSE 7411
// continue ;
7409: GO 7384
// tag := GetTag ( i ) ;
7411: LD_ADDR_VAR 0 5
7415: PUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 110
7425: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 256
7435: PUSH
7436: LD_INT 600
7438: GREATEREQUAL
7439: IFFALSE 7451
7441: PUSH
7442: LD_VAR 0 5
7446: PUSH
7447: LD_INT 101
7449: LESS
7450: AND
7451: IFFALSE 7467
// AgressiveMove ( i , path ) ;
7453: LD_VAR 0 1
7457: PPUSH
7458: LD_VAR 0 4
7462: PPUSH
7463: CALL 70644 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7467: LD_VAR 0 1
7471: PPUSH
7472: CALL_OW 256
7476: PUSH
7477: LD_INT 600
7479: LESS
7480: IFFALSE 7492
7482: PUSH
7483: LD_VAR 0 5
7487: PUSH
7488: LD_INT 101
7490: LESS
7491: AND
7492: IFFALSE 7533
// begin SetTag ( i , 101 ) ;
7494: LD_VAR 0 1
7498: PPUSH
7499: LD_INT 101
7501: PPUSH
7502: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_VAR 0 6
7515: PUSH
7516: LD_INT 1
7518: ARRAY
7519: PPUSH
7520: LD_VAR 0 6
7524: PUSH
7525: LD_INT 2
7527: ARRAY
7528: PPUSH
7529: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7533: LD_VAR 0 5
7537: PUSH
7538: LD_INT 101
7540: EQUAL
7541: IFFALSE 7576
7543: PUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: LD_VAR 0 6
7553: PUSH
7554: LD_INT 1
7556: ARRAY
7557: PPUSH
7558: LD_VAR 0 6
7562: PUSH
7563: LD_INT 2
7565: ARRAY
7566: PPUSH
7567: CALL_OW 297
7571: PUSH
7572: LD_INT 9
7574: LESS
7575: AND
7576: IFFALSE 7584
7578: PUSH
7579: LD_VAR 0 3
7583: AND
7584: IFFALSE 7624
// begin if GetLives ( i ) < 1000 then
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL_OW 256
7595: PUSH
7596: LD_INT 1000
7598: LESS
7599: IFFALSE 7612
// AddComRepairVehicleAndReturn ( mech ) else
7601: LD_VAR 0 3
7605: PPUSH
7606: CALL 69714 0 1
7610: GO 7624
// SetTag ( i , 0 ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_INT 0
7619: PPUSH
7620: CALL_OW 109
// end ; end ;
7624: GO 7384
7626: POP
7627: POP
// until not tmp ;
7628: LD_VAR 0 2
7632: NOT
7633: IFFALSE 7087
// end ;
7635: PPOPN 6
7637: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7638: LD_EXP 23
7642: IFFALSE 8961
7644: GO 7646
7646: DISABLE
7647: LD_INT 0
7649: PPUSH
7650: PPUSH
7651: PPUSH
7652: PPUSH
7653: PPUSH
7654: PPUSH
7655: PPUSH
7656: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7657: LD_ADDR_VAR 0 7
7661: PUSH
7662: LD_INT 209
7664: PUSH
7665: LD_INT 221
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 190
7674: PUSH
7675: LD_INT 220
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 177
7684: PUSH
7685: LD_INT 220
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 168
7694: PUSH
7695: LD_INT 223
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 150
7704: PUSH
7705: LD_INT 206
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7719: LD_ADDR_VAR 0 8
7723: PUSH
7724: LD_INT 219
7726: PUSH
7727: LD_INT 225
7729: PUSH
7730: LD_INT 0
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: ST_TO_ADDR
// for i := 1 to 2 do
7738: LD_ADDR_VAR 0 1
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_INT 2
7750: PUSH
7751: FOR_TO
7752: IFFALSE 7901
// begin uc_side := 5 ;
7754: LD_ADDR_OWVAR 20
7758: PUSH
7759: LD_INT 5
7761: ST_TO_ADDR
// uc_nation := 2 ;
7762: LD_ADDR_OWVAR 21
7766: PUSH
7767: LD_INT 2
7769: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7770: LD_INT 14
7772: PPUSH
7773: LD_INT 1
7775: PPUSH
7776: LD_INT 1
7778: PPUSH
7779: LD_INT 32
7781: PPUSH
7782: LD_INT 80
7784: PPUSH
7785: CALL 34708 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7789: LD_ADDR_VAR 0 2
7793: PUSH
7794: LD_VAR 0 2
7798: PPUSH
7799: CALL_OW 45
7803: PPUSH
7804: CALL 67878 0 2
7808: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7809: LD_VAR 0 2
7813: PUSH
7814: LD_VAR 0 1
7818: ARRAY
7819: PPUSH
7820: LD_INT 4
7822: PPUSH
7823: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7827: LD_VAR 0 2
7831: PUSH
7832: LD_VAR 0 1
7836: ARRAY
7837: PPUSH
7838: LD_INT 16
7840: PPUSH
7841: LD_INT 0
7843: PPUSH
7844: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7848: LD_INT 0
7850: PPUSH
7851: LD_INT 4
7853: PPUSH
7854: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7858: CALL_OW 44
7862: PPUSH
7863: LD_VAR 0 2
7867: PUSH
7868: LD_VAR 0 1
7872: ARRAY
7873: PPUSH
7874: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7878: LD_VAR 0 2
7882: PUSH
7883: LD_VAR 0 1
7887: ARRAY
7888: PPUSH
7889: LD_INT 337
7891: PPUSH
7892: LD_INT 232
7894: PPUSH
7895: CALL_OW 111
// end ;
7899: GO 7751
7901: POP
7902: POP
// wait ( 0 0$25 ) ;
7903: LD_INT 875
7905: PPUSH
7906: CALL_OW 67
// for i := 1 to 2 do
7910: LD_ADDR_VAR 0 1
7914: PUSH
7915: DOUBLE
7916: LD_INT 1
7918: DEC
7919: ST_TO_ADDR
7920: LD_INT 2
7922: PUSH
7923: FOR_TO
7924: IFFALSE 7949
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7926: LD_VAR 0 2
7930: PUSH
7931: LD_VAR 0 1
7935: ARRAY
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: LD_INT 100
7942: PPUSH
7943: CALL_OW 290
7947: GO 7923
7949: POP
7950: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7951: LD_EXP 52
7955: PPUSH
7956: LD_INT 2
7958: PUSH
7959: LD_INT 25
7961: PUSH
7962: LD_INT 1
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: LD_INT 25
7971: PUSH
7972: LD_INT 8
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 72
7988: PPUSH
7989: CALL_OW 122
// wait ( 0 0$3 ) ;
7993: LD_INT 105
7995: PPUSH
7996: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8000: LD_EXP 52
8004: PUSH
8005: LD_EXP 44
8009: UNION
8010: PPUSH
8011: LD_VAR 0 8
8015: PUSH
8016: LD_INT 1
8018: ARRAY
8019: PPUSH
8020: LD_VAR 0 8
8024: PUSH
8025: LD_INT 2
8027: ARRAY
8028: PPUSH
8029: CALL_OW 174
// wait ( 0 0$3 ) ;
8033: LD_INT 105
8035: PPUSH
8036: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
8040: LD_VAR 0 2
8044: PPUSH
8045: LD_INT 218
8047: PPUSH
8048: LD_INT 217
8050: PPUSH
8051: CALL_OW 171
// wait ( 1 1$00 ) ;
8055: LD_INT 2100
8057: PPUSH
8058: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8062: LD_INT 35
8064: PPUSH
8065: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8069: LD_VAR 0 8
8073: PUSH
8074: LD_INT 3
8076: ARRAY
8077: PUSH
8078: LD_INT 0
8080: EQUAL
8081: IFFALSE 8186
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8083: LD_INT 22
8085: PUSH
8086: LD_INT 3
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 92
8095: PUSH
8096: LD_INT 168
8098: PUSH
8099: LD_INT 229
8101: PUSH
8102: LD_INT 12
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: PPUSH
8115: CALL_OW 69
8119: PUSH
8120: LD_INT 0
8122: EQUAL
8123: IFFALSE 8186
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8125: LD_ADDR_VAR 0 8
8129: PUSH
8130: LD_INT 167
8132: PUSH
8133: LD_INT 222
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8144: LD_EXP 44
8148: PUSH
8149: LD_VAR 0 2
8153: ADD
8154: PUSH
8155: LD_EXP 52
8159: PPUSH
8160: LD_INT 25
8162: PUSH
8163: LD_INT 4
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 72
8174: ADD
8175: PPUSH
8176: LD_INT 167
8178: PPUSH
8179: LD_INT 222
8181: PPUSH
8182: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8186: LD_ADDR_VAR 0 3
8190: PUSH
8191: LD_EXP 52
8195: PPUSH
8196: LD_INT 3
8198: PUSH
8199: LD_INT 55
8201: PUSH
8202: EMPTY
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: LD_INT 25
8214: PUSH
8215: LD_INT 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 8
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 72
8245: ST_TO_ADDR
// if tmp then
8246: LD_VAR 0 3
8250: IFFALSE 8465
// begin for i in tmp do
8252: LD_ADDR_VAR 0 1
8256: PUSH
8257: LD_VAR 0 3
8261: PUSH
8262: FOR_IN
8263: IFFALSE 8463
// begin tag := GetTag ( i ) ;
8265: LD_ADDR_VAR 0 4
8269: PUSH
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 110
8279: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8280: LD_VAR 0 1
8284: PPUSH
8285: CALL_OW 256
8289: PUSH
8290: LD_INT 800
8292: LESS
8293: IFFALSE 8305
8295: PUSH
8296: LD_VAR 0 4
8300: PUSH
8301: LD_INT 101
8303: LESS
8304: AND
8305: IFFALSE 8348
// begin SetTag ( i , 101 ) ;
8307: LD_VAR 0 1
8311: PPUSH
8312: LD_INT 101
8314: PPUSH
8315: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8319: LD_VAR 0 1
8323: PPUSH
8324: LD_VAR 0 8
8328: PUSH
8329: LD_INT 1
8331: ARRAY
8332: PPUSH
8333: LD_VAR 0 8
8337: PUSH
8338: LD_INT 2
8340: ARRAY
8341: PPUSH
8342: CALL_OW 111
// end else
8346: GO 8461
// if tag = 101 then
8348: LD_VAR 0 4
8352: PUSH
8353: LD_INT 101
8355: EQUAL
8356: IFFALSE 8447
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8358: LD_VAR 0 1
8362: PPUSH
8363: LD_VAR 0 8
8367: PUSH
8368: LD_INT 1
8370: ARRAY
8371: PPUSH
8372: LD_VAR 0 8
8376: PUSH
8377: LD_INT 2
8379: ARRAY
8380: PPUSH
8381: CALL_OW 297
8385: PUSH
8386: LD_INT 10
8388: GREATER
8389: IFFALSE 8418
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 8
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PPUSH
8405: LD_VAR 0 8
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 111
// if GetLives ( i ) = 1000 then
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL_OW 256
8427: PUSH
8428: LD_INT 1000
8430: EQUAL
8431: IFFALSE 8445
// SetTag ( i , 0 ) ;
8433: LD_VAR 0 1
8437: PPUSH
8438: LD_INT 0
8440: PPUSH
8441: CALL_OW 109
// end else
8445: GO 8461
// AgressiveMove ( i , path ) ;
8447: LD_VAR 0 1
8451: PPUSH
8452: LD_VAR 0 7
8456: PPUSH
8457: CALL 70644 0 2
// end ;
8461: GO 8262
8463: POP
8464: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8465: LD_ADDR_VAR 0 3
8469: PUSH
8470: LD_INT 22
8472: PUSH
8473: LD_INT 5
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 21
8482: PUSH
8483: LD_INT 2
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 3
8492: PUSH
8493: LD_INT 34
8495: PUSH
8496: LD_INT 32
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: PPUSH
8512: CALL_OW 69
8516: ST_TO_ADDR
// if not tmp then
8517: LD_VAR 0 3
8521: NOT
8522: IFFALSE 8526
// continue ;
8524: GO 8062
// for i in tmp do
8526: LD_ADDR_VAR 0 1
8530: PUSH
8531: LD_VAR 0 3
8535: PUSH
8536: FOR_IN
8537: IFFALSE 8952
// begin mech := IsDrivenBy ( i ) ;
8539: LD_ADDR_VAR 0 5
8543: PUSH
8544: LD_VAR 0 1
8548: PPUSH
8549: CALL_OW 311
8553: ST_TO_ADDR
// if not mech then
8554: LD_VAR 0 5
8558: NOT
8559: IFFALSE 8563
// continue ;
8561: GO 8536
// tag := GetTag ( i ) ;
8563: LD_ADDR_VAR 0 4
8567: PUSH
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL_OW 110
8577: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8578: LD_VAR 0 1
8582: PPUSH
8583: CALL_OW 261
8587: PUSH
8588: LD_INT 90
8590: GREATER
8591: IFFALSE 8603
8593: PUSH
8594: LD_VAR 0 4
8598: PUSH
8599: LD_INT 102
8601: EQUAL
8602: AND
8603: IFFALSE 8619
// SetTag ( i , 0 ) else
8605: LD_VAR 0 1
8609: PPUSH
8610: LD_INT 0
8612: PPUSH
8613: CALL_OW 109
8617: GO 8715
// if GetTag ( i ) = 102 then
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 110
8628: PUSH
8629: LD_INT 102
8631: EQUAL
8632: IFFALSE 8715
// begin x := rand ( 1 , 2 ) ;
8634: LD_ADDR_VAR 0 6
8638: PUSH
8639: LD_INT 1
8641: PPUSH
8642: LD_INT 2
8644: PPUSH
8645: CALL_OW 12
8649: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8650: LD_VAR 0 1
8654: PPUSH
8655: LD_VAR 0 2
8659: PUSH
8660: LD_VAR 0 6
8664: ARRAY
8665: PPUSH
8666: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8670: LD_VAR 0 2
8674: PUSH
8675: LD_VAR 0 6
8679: ARRAY
8680: PPUSH
8681: LD_INT 2
8683: PPUSH
8684: CALL_OW 289
8688: PUSH
8689: LD_INT 20
8691: LESS
8692: IFFALSE 8715
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8694: LD_VAR 0 2
8698: PUSH
8699: LD_VAR 0 6
8703: ARRAY
8704: PPUSH
8705: LD_INT 2
8707: PPUSH
8708: LD_INT 100
8710: PPUSH
8711: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8715: LD_VAR 0 1
8719: PPUSH
8720: CALL_OW 256
8724: PUSH
8725: LD_INT 600
8727: GREATEREQUAL
8728: IFFALSE 8740
8730: PUSH
8731: LD_VAR 0 4
8735: PUSH
8736: LD_INT 101
8738: LESS
8739: AND
8740: IFFALSE 8756
// AgressiveMove ( i , path ) ;
8742: LD_VAR 0 1
8746: PPUSH
8747: LD_VAR 0 7
8751: PPUSH
8752: CALL 70644 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8756: LD_VAR 0 1
8760: PPUSH
8761: CALL_OW 256
8765: PUSH
8766: LD_INT 600
8768: LESS
8769: IFFALSE 8781
8771: PUSH
8772: LD_VAR 0 4
8776: PUSH
8777: LD_INT 101
8779: LESS
8780: AND
8781: IFFALSE 8822
// begin SetTag ( i , 101 ) ;
8783: LD_VAR 0 1
8787: PPUSH
8788: LD_INT 101
8790: PPUSH
8791: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_VAR 0 8
8804: PUSH
8805: LD_INT 1
8807: ARRAY
8808: PPUSH
8809: LD_VAR 0 8
8813: PUSH
8814: LD_INT 2
8816: ARRAY
8817: PPUSH
8818: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8822: LD_VAR 0 4
8826: PUSH
8827: LD_INT 101
8829: EQUAL
8830: IFFALSE 8865
8832: PUSH
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_VAR 0 8
8842: PUSH
8843: LD_INT 1
8845: ARRAY
8846: PPUSH
8847: LD_VAR 0 8
8851: PUSH
8852: LD_INT 2
8854: ARRAY
8855: PPUSH
8856: CALL_OW 297
8860: PUSH
8861: LD_INT 9
8863: LESS
8864: AND
8865: IFFALSE 8873
8867: PUSH
8868: LD_VAR 0 5
8872: AND
8873: IFFALSE 8950
// begin if GetLives ( i ) < 1000 then
8875: LD_VAR 0 1
8879: PPUSH
8880: CALL_OW 256
8884: PUSH
8885: LD_INT 1000
8887: LESS
8888: IFFALSE 8901
// AddComRepairVehicleAndReturn ( mech ) else
8890: LD_VAR 0 5
8894: PPUSH
8895: CALL 69714 0 1
8899: GO 8950
// if GetFuel ( i ) <= 50 and cargo then
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 261
8910: PUSH
8911: LD_INT 50
8913: LESSEQUAL
8914: IFFALSE 8922
8916: PUSH
8917: LD_VAR 0 2
8921: AND
8922: IFFALSE 8938
// SetTag ( i , 102 ) else
8924: LD_VAR 0 1
8928: PPUSH
8929: LD_INT 102
8931: PPUSH
8932: CALL_OW 109
8936: GO 8950
// SetTag ( i , 0 ) ;
8938: LD_VAR 0 1
8942: PPUSH
8943: LD_INT 0
8945: PPUSH
8946: CALL_OW 109
// end ; end ;
8950: GO 8536
8952: POP
8953: POP
// until not tmp ;
8954: LD_VAR 0 3
8958: NOT
8959: IFFALSE 8062
// end ;
8961: PPOPN 8
8963: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
8969: PPUSH
8970: PPUSH
8971: PPUSH
8972: PPUSH
8973: PPUSH
8974: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8975: LD_INT 20
8977: PPUSH
8978: LD_INT 1
8980: PPUSH
8981: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8985: LD_INT 175
8987: PPUSH
8988: CALL_OW 67
// heikeInConvoy := false ;
8992: LD_ADDR_VAR 0 8
8996: PUSH
8997: LD_INT 0
8999: ST_TO_ADDR
// needOil := false ;
9000: LD_ADDR_VAR 0 7
9004: PUSH
9005: LD_INT 0
9007: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
9008: LD_ADDR_VAR 0 3
9012: PUSH
9013: LD_INT 20
9015: PPUSH
9016: LD_INT 22
9018: PUSH
9019: LD_INT 2
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 3
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: LD_INT 34
9034: PUSH
9035: LD_INT 88
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 34
9044: PUSH
9045: LD_INT 31
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 33
9063: PUSH
9064: LD_INT 1
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: PPUSH
9076: CALL_OW 70
9080: ST_TO_ADDR
// for i in tmp do
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_VAR 0 3
9090: PUSH
9091: FOR_IN
9092: IFFALSE 9179
// begin if IsDrivenBy ( i ) = Heike then
9094: LD_VAR 0 2
9098: PPUSH
9099: CALL_OW 311
9103: PUSH
9104: LD_EXP 34
9108: EQUAL
9109: IFFALSE 9128
// begin heikeInConvoy := true ;
9111: LD_ADDR_VAR 0 8
9115: PUSH
9116: LD_INT 1
9118: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9119: LD_STRING QHeikeConvoy
9121: PPUSH
9122: CALL_OW 97
// break ;
9126: GO 9179
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9128: LD_VAR 0 2
9132: PPUSH
9133: CALL_OW 262
9137: PUSH
9138: LD_INT 1
9140: EQUAL
9141: IFFALSE 9158
9143: PUSH
9144: LD_VAR 0 2
9148: PPUSH
9149: CALL_OW 261
9153: PUSH
9154: LD_INT 10
9156: LESS
9157: AND
9158: IFFALSE 9177
// begin needOil := true ;
9160: LD_ADDR_VAR 0 7
9164: PUSH
9165: LD_INT 1
9167: ST_TO_ADDR
// Query ( QNeedOil ) ;
9168: LD_STRING QNeedOil
9170: PPUSH
9171: CALL_OW 97
// break ;
9175: GO 9179
// end ; end ;
9177: GO 9091
9179: POP
9180: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9181: LD_VAR 0 7
9185: NOT
9186: IFFALSE 9195
9188: PUSH
9189: LD_VAR 0 8
9193: NOT
9194: AND
9195: IFFALSE 9236
9197: PUSH
9198: LD_VAR 0 3
9202: PPUSH
9203: LD_INT 2
9205: PUSH
9206: LD_INT 34
9208: PUSH
9209: LD_INT 32
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 34
9218: PUSH
9219: LD_INT 51
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 72
9235: AND
9236: IFFALSE 9253
// if Query ( QConvoy ) = 1 then
9238: LD_STRING QConvoy
9240: PPUSH
9241: CALL_OW 97
9245: PUSH
9246: LD_INT 1
9248: EQUAL
9249: IFFALSE 9253
// break ;
9251: GO 9257
// until false ;
9253: LD_INT 0
9255: IFFALSE 8985
// SetAreaMapShow ( oilArea , 0 ) ;
9257: LD_INT 20
9259: PPUSH
9260: LD_INT 0
9262: PPUSH
9263: CALL_OW 424
// data := [ ] ;
9267: LD_ADDR_VAR 0 4
9271: PUSH
9272: EMPTY
9273: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9274: LD_ADDR_VAR 0 5
9278: PUSH
9279: LD_INT 60
9281: PUSH
9282: LD_INT 50
9284: PUSH
9285: LD_INT 40
9287: PUSH
9288: LD_INT 30
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: PUSH
9297: LD_OWVAR 67
9301: ARRAY
9302: ST_TO_ADDR
// for i in tmp do
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: LD_VAR 0 3
9312: PUSH
9313: FOR_IN
9314: IFFALSE 9411
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9316: LD_ADDR_VAR 0 4
9320: PUSH
9321: LD_VAR 0 4
9325: PPUSH
9326: LD_VAR 0 2
9330: PUSH
9331: LD_VAR 0 2
9335: PPUSH
9336: CALL_OW 311
9340: PUSH
9341: LD_VAR 0 2
9345: PPUSH
9346: CALL_OW 256
9350: PUSH
9351: LD_VAR 0 2
9355: PPUSH
9356: CALL_OW 261
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL 67878 0 2
9371: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9372: LD_VAR 0 2
9376: PPUSH
9377: CALL_OW 311
9381: PPUSH
9382: CALL_OW 64
// RemoveUnit ( i ) ;
9386: LD_VAR 0 2
9390: PPUSH
9391: CALL_OW 64
// chance := chance + 20 ;
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_VAR 0 5
9404: PUSH
9405: LD_INT 20
9407: PLUS
9408: ST_TO_ADDR
// end ;
9409: GO 9313
9411: POP
9412: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9413: LD_INT 1575
9415: PPUSH
9416: LD_INT 5250
9418: PPUSH
9419: CALL_OW 12
9423: PPUSH
9424: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9428: LD_INT 35
9430: PPUSH
9431: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9435: LD_INT 22
9437: PUSH
9438: LD_INT 3
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 92
9447: PUSH
9448: LD_INT 261
9450: PUSH
9451: LD_INT 71
9453: PUSH
9454: LD_INT 12
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PPUSH
9467: CALL_OW 69
9471: NOT
9472: IFFALSE 9487
9474: PUSH
9475: LD_INT 277
9477: PPUSH
9478: LD_INT 80
9480: PPUSH
9481: CALL_OW 428
9485: NOT
9486: AND
9487: IFFALSE 9428
// for i in data do
9489: LD_ADDR_VAR 0 2
9493: PUSH
9494: LD_VAR 0 4
9498: PUSH
9499: FOR_IN
9500: IFFALSE 9919
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9502: LD_ADDR_OWVAR 21
9506: PUSH
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 248
9520: ST_TO_ADDR
// uc_side := 2 ;
9521: LD_ADDR_OWVAR 20
9525: PUSH
9526: LD_INT 2
9528: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9529: LD_VAR 0 2
9533: PUSH
9534: LD_INT 1
9536: ARRAY
9537: PPUSH
9538: CALL_OW 265
9542: PPUSH
9543: LD_VAR 0 2
9547: PUSH
9548: LD_INT 1
9550: ARRAY
9551: PPUSH
9552: CALL_OW 262
9556: PPUSH
9557: LD_VAR 0 2
9561: PUSH
9562: LD_INT 1
9564: ARRAY
9565: PPUSH
9566: CALL_OW 263
9570: PPUSH
9571: LD_VAR 0 2
9575: PUSH
9576: LD_INT 1
9578: ARRAY
9579: PPUSH
9580: CALL_OW 264
9584: PPUSH
9585: LD_INT 66
9587: PPUSH
9588: CALL 34708 0 5
// vehicle := CreateVehicle ;
9592: LD_ADDR_VAR 0 6
9596: PUSH
9597: CALL_OW 45
9601: ST_TO_ADDR
// SetDir ( vehicle , 4 ) ;
9602: LD_VAR 0 6
9606: PPUSH
9607: LD_INT 4
9609: PPUSH
9610: CALL_OW 233
// repeat wait ( 10 ) ;
9614: LD_INT 10
9616: PPUSH
9617: CALL_OW 67
// until PlaceUnitXY ( vehicle , 277 , 80 , false ) ;
9621: LD_VAR 0 6
9625: PPUSH
9626: LD_INT 277
9628: PPUSH
9629: LD_INT 80
9631: PPUSH
9632: LD_INT 0
9634: PPUSH
9635: CALL_OW 48
9639: IFFALSE 9614
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9641: LD_VAR 0 2
9645: PUSH
9646: LD_INT 2
9648: ARRAY
9649: PPUSH
9650: LD_VAR 0 6
9654: PPUSH
9655: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9659: LD_VAR 0 6
9663: PPUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_INT 3
9671: ARRAY
9672: PPUSH
9673: CALL_OW 234
// success := Prob ( chance ) ;
9677: LD_ADDR_VAR 0 9
9681: PUSH
9682: LD_VAR 0 5
9686: PPUSH
9687: CALL_OW 13
9691: ST_TO_ADDR
// if success then
9692: LD_VAR 0 9
9696: IFFALSE 9778
// begin if GetEngine ( vehicle ) = engine_combustion then
9698: LD_VAR 0 6
9702: PPUSH
9703: CALL_OW 262
9707: PUSH
9708: LD_INT 1
9710: EQUAL
9711: IFFALSE 9725
// SetFuel ( vehicle , 90 ) ;
9713: LD_VAR 0 6
9717: PPUSH
9718: LD_INT 90
9720: PPUSH
9721: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9725: LD_VAR 0 6
9729: PPUSH
9730: CALL_OW 264
9734: PUSH
9735: LD_INT 32
9737: PUSH
9738: LD_INT 51
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: IN
9745: IFFALSE 9776
// begin collectedOil := collectedOil + 100 ;
9747: LD_ADDR_EXP 33
9751: PUSH
9752: LD_EXP 33
9756: PUSH
9757: LD_INT 100
9759: PLUS
9760: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_INT 2
9768: PPUSH
9769: LD_INT 100
9771: PPUSH
9772: CALL_OW 290
// end ; end else
9776: GO 9850
// begin if i [ 3 ] > 333 then
9778: LD_VAR 0 2
9782: PUSH
9783: LD_INT 3
9785: ARRAY
9786: PUSH
9787: LD_INT 333
9789: GREATER
9790: IFFALSE 9804
// SetLives ( vehicle , 333 ) ;
9792: LD_VAR 0 6
9796: PPUSH
9797: LD_INT 333
9799: PPUSH
9800: CALL_OW 234
// if i [ 4 ] > 20 then
9804: LD_VAR 0 2
9808: PUSH
9809: LD_INT 4
9811: ARRAY
9812: PUSH
9813: LD_INT 20
9815: GREATER
9816: IFFALSE 9832
// SetFuel ( vehicle , 20 ) else
9818: LD_VAR 0 6
9822: PPUSH
9823: LD_INT 20
9825: PPUSH
9826: CALL_OW 240
9830: GO 9850
// SetFuel ( vehicle , i [ 4 ] ) ;
9832: LD_VAR 0 6
9836: PPUSH
9837: LD_VAR 0 2
9841: PUSH
9842: LD_INT 4
9844: ARRAY
9845: PPUSH
9846: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9850: LD_VAR 0 6
9854: PPUSH
9855: LD_INT 250
9857: PPUSH
9858: LD_INT 119
9860: PPUSH
9861: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9865: LD_VAR 0 6
9869: PPUSH
9870: LD_INT 211
9872: PPUSH
9873: LD_INT 80
9875: PPUSH
9876: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9880: LD_INT 175
9882: PPUSH
9883: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9887: LD_INT 20
9889: PPUSH
9890: LD_INT 22
9892: PUSH
9893: LD_INT 2
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 52
9902: PUSH
9903: EMPTY
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PPUSH
9910: CALL_OW 70
9914: NOT
9915: IFFALSE 9880
// end ;
9917: GO 9499
9919: POP
9920: POP
// wait ( 0 0$10 ) ;
9921: LD_INT 350
9923: PPUSH
9924: CALL_OW 67
// GoForOil ;
9928: CALL 8964 0 0
// end ;
9932: LD_VAR 0 1
9936: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9937: LD_INT 22
9939: PPUSH
9940: LD_INT 21
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 22
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 58
9962: PUSH
9963: EMPTY
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 70
9975: IFFALSE 10044
9977: GO 9979
9979: DISABLE
9980: LD_INT 0
9982: PPUSH
// begin enable ;
9983: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9984: LD_ADDR_VAR 0 1
9988: PUSH
9989: LD_INT 22
9991: PPUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 2
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_INT 5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 58
10014: PUSH
10015: EMPTY
10016: LIST
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 70
10027: PUSH
10028: FOR_IN
10029: IFFALSE 10042
// KillUnit ( i ) ;
10031: LD_VAR 0 1
10035: PPUSH
10036: CALL_OW 66
10040: GO 10028
10042: POP
10043: POP
// end ; end_of_file
10044: PPOPN 1
10046: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
10047: LD_INT 0
10049: PPUSH
// uc_side := side ;
10050: LD_ADDR_OWVAR 20
10054: PUSH
10055: LD_VAR 0 1
10059: ST_TO_ADDR
// uc_nation := nation ;
10060: LD_ADDR_OWVAR 21
10064: PUSH
10065: LD_VAR 0 2
10069: ST_TO_ADDR
// vc_chassis := chassis ;
10070: LD_ADDR_OWVAR 37
10074: PUSH
10075: LD_VAR 0 3
10079: ST_TO_ADDR
// vc_engine := engine ;
10080: LD_ADDR_OWVAR 39
10084: PUSH
10085: LD_VAR 0 4
10089: ST_TO_ADDR
// vc_control := control ;
10090: LD_ADDR_OWVAR 38
10094: PUSH
10095: LD_VAR 0 5
10099: ST_TO_ADDR
// vc_weapon := weapon ;
10100: LD_ADDR_OWVAR 40
10104: PUSH
10105: LD_VAR 0 6
10109: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10110: LD_ADDR_OWVAR 41
10114: PUSH
10115: LD_VAR 0 7
10119: ST_TO_ADDR
// result := CreateVehicle ;
10120: LD_ADDR_VAR 0 8
10124: PUSH
10125: CALL_OW 45
10129: ST_TO_ADDR
// end ;
10130: LD_VAR 0 8
10134: RET
// export function SayX ( units , ident ) ; var i ; begin
10135: LD_INT 0
10137: PPUSH
10138: PPUSH
// result := false ;
10139: LD_ADDR_VAR 0 3
10143: PUSH
10144: LD_INT 0
10146: ST_TO_ADDR
// if not units then
10147: LD_VAR 0 1
10151: NOT
10152: IFFALSE 10156
// exit ;
10154: GO 10210
// for i in units do
10156: LD_ADDR_VAR 0 4
10160: PUSH
10161: LD_VAR 0 1
10165: PUSH
10166: FOR_IN
10167: IFFALSE 10208
// if IsOk ( i ) then
10169: LD_VAR 0 4
10173: PPUSH
10174: CALL_OW 302
10178: IFFALSE 10206
// begin Say ( i , ident ) ;
10180: LD_VAR 0 4
10184: PPUSH
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 88
// result := i ;
10194: LD_ADDR_VAR 0 3
10198: PUSH
10199: LD_VAR 0 4
10203: ST_TO_ADDR
// break ;
10204: GO 10208
// end ;
10206: GO 10166
10208: POP
10209: POP
// end ;
10210: LD_VAR 0 3
10214: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// InitUc ;
10219: CALL_OW 18
// InitHc ;
10223: CALL_OW 19
// uc_side := 0 ;
10227: LD_ADDR_OWVAR 20
10231: PUSH
10232: LD_INT 0
10234: ST_TO_ADDR
// uc_nation := 0 ;
10235: LD_ADDR_OWVAR 21
10239: PUSH
10240: LD_INT 0
10242: ST_TO_ADDR
// for i = 1 to amount do
10243: LD_ADDR_VAR 0 4
10247: PUSH
10248: DOUBLE
10249: LD_INT 1
10251: DEC
10252: ST_TO_ADDR
10253: LD_VAR 0 2
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10341
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10261: LD_ADDR_OWVAR 29
10265: PUSH
10266: LD_INT 9
10268: PPUSH
10269: LD_INT 12
10271: PPUSH
10272: CALL_OW 12
10276: PUSH
10277: LD_INT 9
10279: PPUSH
10280: LD_INT 12
10282: PPUSH
10283: CALL_OW 12
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10292: LD_ADDR_OWVAR 35
10296: PUSH
10297: LD_INT 1
10299: NEG
10300: PPUSH
10301: LD_INT 1
10303: PPUSH
10304: CALL_OW 12
10308: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_INT 12
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10322: CALL_OW 44
10326: PPUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: LD_INT 0
10334: PPUSH
10335: CALL_OW 49
// end ;
10339: GO 10258
10341: POP
10342: POP
// InitHc ;
10343: CALL_OW 19
// end ;
10347: LD_VAR 0 3
10351: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10352: LD_INT 0
10354: PPUSH
10355: PPUSH
// uc_side := 0 ;
10356: LD_ADDR_OWVAR 20
10360: PUSH
10361: LD_INT 0
10363: ST_TO_ADDR
// uc_nation := 0 ;
10364: LD_ADDR_OWVAR 21
10368: PUSH
10369: LD_INT 0
10371: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10372: LD_INT 7
10374: PPUSH
10375: LD_INT 6
10377: PUSH
10378: LD_INT 5
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: LD_INT 3
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: PUSH
10393: LD_OWVAR 67
10397: ARRAY
10398: PPUSH
10399: CALL 10215 0 2
// for i = 1 to 2 do
10403: LD_ADDR_VAR 0 4
10407: PUSH
10408: DOUBLE
10409: LD_INT 1
10411: DEC
10412: ST_TO_ADDR
10413: LD_INT 2
10415: PUSH
10416: FOR_TO
10417: IFFALSE 10454
// begin vc_chassis := class_mastodont ;
10419: LD_ADDR_OWVAR 37
10423: PUSH
10424: LD_INT 31
10426: ST_TO_ADDR
// vc_control := control_rider ;
10427: LD_ADDR_OWVAR 38
10431: PUSH
10432: LD_INT 4
10434: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10435: CALL_OW 45
10439: PPUSH
10440: LD_VAR 0 1
10444: PPUSH
10445: LD_INT 0
10447: PPUSH
10448: CALL 66771 0 3
// end ;
10452: GO 10416
10454: POP
10455: POP
// InitHc ;
10456: CALL_OW 19
// for i := 1 to 3 do
10460: LD_ADDR_VAR 0 4
10464: PUSH
10465: DOUBLE
10466: LD_INT 1
10468: DEC
10469: ST_TO_ADDR
10470: LD_INT 3
10472: PUSH
10473: FOR_TO
10474: IFFALSE 10511
// begin hc_class := class_horse ;
10476: LD_ADDR_OWVAR 28
10480: PUSH
10481: LD_INT 21
10483: ST_TO_ADDR
// hc_gallery :=  ;
10484: LD_ADDR_OWVAR 33
10488: PUSH
10489: LD_STRING 
10491: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10492: CALL_OW 44
10496: PPUSH
10497: LD_VAR 0 1
10501: PPUSH
10502: LD_INT 0
10504: PPUSH
10505: CALL_OW 49
// end ;
10509: GO 10473
10511: POP
10512: POP
// InitHc ;
10513: CALL_OW 19
// for i = 1 to 3 do
10517: LD_ADDR_VAR 0 4
10521: PUSH
10522: DOUBLE
10523: LD_INT 1
10525: DEC
10526: ST_TO_ADDR
10527: LD_INT 3
10529: PUSH
10530: FOR_TO
10531: IFFALSE 10585
// begin hc_class = class_tiger ;
10533: LD_ADDR_OWVAR 28
10537: PUSH
10538: LD_INT 14
10540: ST_TO_ADDR
// hc_gallery =  ;
10541: LD_ADDR_OWVAR 33
10545: PUSH
10546: LD_STRING 
10548: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10549: LD_ADDR_OWVAR 35
10553: PUSH
10554: LD_INT 7
10556: NEG
10557: PPUSH
10558: LD_INT 7
10560: PPUSH
10561: CALL_OW 12
10565: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10566: CALL_OW 44
10570: PPUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: LD_INT 0
10578: PPUSH
10579: CALL 66771 0 3
// end ;
10583: GO 10530
10585: POP
10586: POP
// InitHc ;
10587: CALL_OW 19
// for i := 1 to 4 do
10591: LD_ADDR_VAR 0 4
10595: PUSH
10596: DOUBLE
10597: LD_INT 1
10599: DEC
10600: ST_TO_ADDR
10601: LD_INT 4
10603: PUSH
10604: FOR_TO
10605: IFFALSE 10642
// begin hc_class := class_phororhacos ;
10607: LD_ADDR_OWVAR 28
10611: PUSH
10612: LD_INT 18
10614: ST_TO_ADDR
// hc_gallery :=  ;
10615: LD_ADDR_OWVAR 33
10619: PUSH
10620: LD_STRING 
10622: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10623: CALL_OW 44
10627: PPUSH
10628: LD_VAR 0 1
10632: PPUSH
10633: LD_INT 0
10635: PPUSH
10636: CALL_OW 49
// end ;
10640: GO 10604
10642: POP
10643: POP
// InitHc ;
10644: CALL_OW 19
// for i := 1 to 4 do
10648: LD_ADDR_VAR 0 4
10652: PUSH
10653: DOUBLE
10654: LD_INT 1
10656: DEC
10657: ST_TO_ADDR
10658: LD_INT 4
10660: PUSH
10661: FOR_TO
10662: IFFALSE 10699
// begin hc_class := class_baggie ;
10664: LD_ADDR_OWVAR 28
10668: PUSH
10669: LD_INT 13
10671: ST_TO_ADDR
// hc_gallery :=  ;
10672: LD_ADDR_OWVAR 33
10676: PUSH
10677: LD_STRING 
10679: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10680: CALL_OW 44
10684: PPUSH
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_INT 0
10692: PPUSH
10693: CALL_OW 49
// end ;
10697: GO 10661
10699: POP
10700: POP
// InitHc ;
10701: CALL_OW 19
// for i := 1 to 7 do
10705: LD_ADDR_VAR 0 4
10709: PUSH
10710: DOUBLE
10711: LD_INT 1
10713: DEC
10714: ST_TO_ADDR
10715: LD_INT 7
10717: PUSH
10718: FOR_TO
10719: IFFALSE 10756
// begin hc_class := class_frog ;
10721: LD_ADDR_OWVAR 28
10725: PUSH
10726: LD_INT 19
10728: ST_TO_ADDR
// hc_gallery :=  ;
10729: LD_ADDR_OWVAR 33
10733: PUSH
10734: LD_STRING 
10736: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10737: CALL_OW 44
10741: PPUSH
10742: LD_VAR 0 2
10746: PPUSH
10747: LD_INT 0
10749: PPUSH
10750: CALL_OW 49
// end ;
10754: GO 10718
10756: POP
10757: POP
// end ;
10758: LD_VAR 0 3
10762: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
// if not observer or not unit then
10768: LD_VAR 0 1
10772: NOT
10773: IFTRUE 10782
10775: PUSH
10776: LD_VAR 0 2
10780: NOT
10781: OR
10782: IFFALSE 10786
// exit ;
10784: GO 10834
// if not See ( GetSide ( observer ) , unit ) then
10786: LD_VAR 0 1
10790: PPUSH
10791: CALL_OW 255
10795: PPUSH
10796: LD_VAR 0 2
10800: PPUSH
10801: CALL_OW 292
10805: NOT
10806: IFFALSE 10810
// exit ;
10808: GO 10834
// result := GetDistUnits ( observer , unit ) < 12 ;
10810: LD_ADDR_VAR 0 3
10814: PUSH
10815: LD_VAR 0 1
10819: PPUSH
10820: LD_VAR 0 2
10824: PPUSH
10825: CALL_OW 296
10829: PUSH
10830: LD_INT 12
10832: LESS
10833: ST_TO_ADDR
// end ;
10834: LD_VAR 0 3
10838: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10839: LD_INT 0
10841: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10842: LD_VAR 0 2
10846: PUSH
10847: LD_INT 1
10849: ARRAY
10850: PPUSH
10851: LD_VAR 0 2
10855: PUSH
10856: LD_INT 2
10858: ARRAY
10859: PPUSH
10860: CALL_OW 488
10864: IFFALSE 10894
10866: PUSH
10867: LD_VAR 0 2
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: PPUSH
10876: LD_VAR 0 2
10880: PUSH
10881: LD_INT 2
10883: ARRAY
10884: PPUSH
10885: CALL_OW 428
10889: PUSH
10890: LD_INT 0
10892: EQUAL
10893: AND
10894: IFFALSE 10928
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_VAR 0 2
10905: PUSH
10906: LD_INT 1
10908: ARRAY
10909: PPUSH
10910: LD_VAR 0 2
10914: PUSH
10915: LD_INT 2
10917: ARRAY
10918: PPUSH
10919: LD_VAR 0 3
10923: PPUSH
10924: CALL_OW 48
// end ;
10928: LD_VAR 0 4
10932: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10933: LD_INT 0
10935: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10936: LD_VAR 0 1
10940: PPUSH
10941: LD_VAR 0 2
10945: PPUSH
10946: LD_VAR 0 3
10950: PPUSH
10951: LD_VAR 0 4
10955: PPUSH
10956: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10960: LD_VAR 0 1
10964: PPUSH
10965: LD_VAR 0 2
10969: PPUSH
10970: LD_VAR 0 3
10974: PPUSH
10975: CALL_OW 331
// end ;
10979: LD_VAR 0 5
10983: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10984: LD_INT 0
10986: PPUSH
// if not units then
10987: LD_VAR 0 1
10991: NOT
10992: IFFALSE 10996
// exit ;
10994: GO 11079
// result := true ;
10996: LD_ADDR_VAR 0 4
11000: PUSH
11001: LD_INT 1
11003: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
11004: LD_VAR 0 1
11008: PPUSH
11009: LD_INT 26
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PPUSH
11019: CALL_OW 72
11023: PUSH
11024: LD_INT 1
11026: ARRAY
11027: PPUSH
11028: LD_VAR 0 2
11032: PPUSH
11033: CALL_OW 88
11037: NOT
11038: IFFALSE 11079
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
11040: LD_ADDR_VAR 0 4
11044: PUSH
11045: LD_VAR 0 1
11049: PPUSH
11050: LD_INT 26
11052: PUSH
11053: LD_INT 2
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PPUSH
11060: CALL_OW 72
11064: PUSH
11065: LD_INT 1
11067: ARRAY
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: CALL_OW 88
11078: ST_TO_ADDR
// end ;
11079: LD_VAR 0 4
11083: RET
// export function SeeGroup ( side , group ) ; var i ; begin
11084: LD_INT 0
11086: PPUSH
11087: PPUSH
// if not group then
11088: LD_VAR 0 2
11092: NOT
11093: IFFALSE 11097
// exit ;
11095: GO 11142
// for i in group do
11097: LD_ADDR_VAR 0 4
11101: PUSH
11102: LD_VAR 0 2
11106: PUSH
11107: FOR_IN
11108: IFFALSE 11140
// if See ( side , i ) then
11110: LD_VAR 0 1
11114: PPUSH
11115: LD_VAR 0 4
11119: PPUSH
11120: CALL_OW 292
11124: IFFALSE 11138
// begin result := true ;
11126: LD_ADDR_VAR 0 3
11130: PUSH
11131: LD_INT 1
11133: ST_TO_ADDR
// exit ;
11134: POP
11135: POP
11136: GO 11142
// end ;
11138: GO 11107
11140: POP
11141: POP
// end ; end_of_file
11142: LD_VAR 0 3
11146: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11147: LD_INT 0
11149: PPUSH
11150: PPUSH
11151: PPUSH
11152: PPUSH
11153: PPUSH
11154: PPUSH
11155: PPUSH
// uc_side := 3 ;
11156: LD_ADDR_OWVAR 20
11160: PUSH
11161: LD_INT 3
11163: ST_TO_ADDR
// uc_nation := 3 ;
11164: LD_ADDR_OWVAR 21
11168: PUSH
11169: LD_INT 3
11171: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11172: LD_ADDR_EXP 53
11176: PUSH
11177: LD_STRING Morozov
11179: PPUSH
11180: CALL_OW 25
11184: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11185: LD_EXP 53
11189: PPUSH
11190: LD_INT 52
11192: PPUSH
11193: CALL_OW 52
// if not gaidarKilled then
11197: LD_EXP 7
11201: NOT
11202: IFFALSE 11235
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11204: LD_ADDR_EXP 54
11208: PUSH
11209: LD_STRING Gaydar
11211: PPUSH
11212: LD_INT 0
11214: PPUSH
11215: LD_STRING 
11217: PPUSH
11218: CALL 29722 0 3
11222: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11223: LD_EXP 54
11227: PPUSH
11228: LD_INT 52
11230: PPUSH
11231: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11235: LD_INT 52
11237: PPUSH
11238: LD_STRING lenin
11240: PPUSH
11241: CALL_OW 500
// ruOutsiders := [ ] ;
11245: LD_ADDR_EXP 56
11249: PUSH
11250: EMPTY
11251: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11252: LD_ADDR_EXP 58
11256: PUSH
11257: EMPTY
11258: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11259: LD_ADDR_EXP 59
11263: PUSH
11264: EMPTY
11265: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11266: LD_ADDR_EXP 60
11270: PUSH
11271: EMPTY
11272: ST_TO_ADDR
// ruAttackers := [ ] ;
11273: LD_ADDR_EXP 61
11277: PUSH
11278: EMPTY
11279: ST_TO_ADDR
// waveStrength := 0 ;
11280: LD_ADDR_EXP 62
11284: PUSH
11285: LD_INT 0
11287: ST_TO_ADDR
// if not gaidarKilled then
11288: LD_EXP 7
11292: NOT
11293: IFFALSE 11303
// waveStrength := 2 ;
11295: LD_ADDR_EXP 62
11299: PUSH
11300: LD_INT 2
11302: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11303: LD_ADDR_VAR 0 7
11307: PUSH
11308: LD_INT 22
11310: PUSH
11311: LD_INT 3
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 3
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PPUSH
11332: CALL_OW 69
11336: ST_TO_ADDR
// for i in tmp do
11337: LD_ADDR_VAR 0 2
11341: PUSH
11342: LD_VAR 0 7
11346: PUSH
11347: FOR_IN
11348: IFFALSE 11385
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11350: LD_VAR 0 2
11354: PPUSH
11355: LD_INT 5
11357: PUSH
11358: LD_INT 6
11360: PUSH
11361: LD_INT 7
11363: PUSH
11364: LD_INT 8
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: PUSH
11373: LD_OWVAR 67
11377: ARRAY
11378: PPUSH
11379: CALL_OW 241
11383: GO 11347
11385: POP
11386: POP
// for i := 1 to 3 do
11387: LD_ADDR_VAR 0 2
11391: PUSH
11392: DOUBLE
11393: LD_INT 1
11395: DEC
11396: ST_TO_ADDR
11397: LD_INT 3
11399: PUSH
11400: FOR_TO
11401: IFFALSE 11439
// begin PrepareHuman ( false , 1 , 0 ) ;
11403: LD_INT 0
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: LD_INT 0
11411: PPUSH
11412: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11416: CALL_OW 44
11420: PPUSH
11421: LD_INT 75
11423: PPUSH
11424: LD_INT 49
11426: PPUSH
11427: LD_INT 3
11429: PPUSH
11430: LD_INT 0
11432: PPUSH
11433: CALL_OW 50
// end ;
11437: GO 11400
11439: POP
11440: POP
// for i := 1 to 4 do
11441: LD_ADDR_VAR 0 2
11445: PUSH
11446: DOUBLE
11447: LD_INT 1
11449: DEC
11450: ST_TO_ADDR
11451: LD_INT 4
11453: PUSH
11454: FOR_TO
11455: IFFALSE 11501
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11457: LD_INT 0
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 12
11470: PPUSH
11471: LD_INT 0
11473: PPUSH
11474: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11478: CALL_OW 44
11482: PPUSH
11483: LD_INT 330
11485: PPUSH
11486: LD_INT 231
11488: PPUSH
11489: LD_INT 5
11491: PPUSH
11492: LD_INT 0
11494: PPUSH
11495: CALL_OW 50
// end ;
11499: GO 11454
11501: POP
11502: POP
// hc_class := 1 ;
11503: LD_ADDR_OWVAR 28
11507: PUSH
11508: LD_INT 1
11510: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11511: CALL_OW 44
11515: PPUSH
11516: LD_INT 324
11518: PPUSH
11519: LD_INT 219
11521: PPUSH
11522: CALL_OW 428
11526: PPUSH
11527: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11531: CALL_OW 44
11535: PPUSH
11536: LD_INT 316
11538: PPUSH
11539: LD_INT 223
11541: PPUSH
11542: CALL_OW 428
11546: PPUSH
11547: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11551: LD_ADDR_VAR 0 7
11555: PUSH
11556: LD_INT 172
11558: PPUSH
11559: LD_INT 198
11561: PPUSH
11562: CALL_OW 428
11566: PPUSH
11567: CALL_OW 274
11571: PUSH
11572: LD_INT 189
11574: PPUSH
11575: LD_INT 156
11577: PPUSH
11578: CALL_OW 428
11582: PPUSH
11583: CALL_OW 274
11587: PUSH
11588: LD_INT 341
11590: PPUSH
11591: LD_INT 232
11593: PPUSH
11594: CALL_OW 428
11598: PPUSH
11599: CALL_OW 274
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: ST_TO_ADDR
// for i in tmp do
11609: LD_ADDR_VAR 0 2
11613: PUSH
11614: LD_VAR 0 7
11618: PUSH
11619: FOR_IN
11620: IFFALSE 11654
// begin SetResourceType ( i , mat_cans , 200 ) ;
11622: LD_VAR 0 2
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: LD_INT 200
11632: PPUSH
11633: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11637: LD_VAR 0 2
11641: PPUSH
11642: LD_INT 2
11644: PPUSH
11645: LD_INT 300
11647: PPUSH
11648: CALL_OW 277
// end ;
11652: GO 11619
11654: POP
11655: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11656: LD_ADDR_VAR 0 7
11660: PUSH
11661: LD_INT 177
11663: PUSH
11664: LD_INT 114
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 138
11673: PUSH
11674: LD_INT 96
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: ST_TO_ADDR
// for i := 1 to tmp do
11685: LD_ADDR_VAR 0 2
11689: PUSH
11690: DOUBLE
11691: LD_INT 1
11693: DEC
11694: ST_TO_ADDR
11695: LD_VAR 0 7
11699: PUSH
11700: FOR_TO
11701: IFFALSE 11784
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11703: LD_INT 0
11705: PPUSH
11706: LD_INT 9
11708: PPUSH
11709: LD_INT 6
11711: PPUSH
11712: CALL_OW 380
// un := CreateHuman ;
11716: LD_ADDR_VAR 0 5
11720: PUSH
11721: CALL_OW 44
11725: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11726: LD_VAR 0 5
11730: PPUSH
11731: LD_INT 2
11733: PPUSH
11734: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11738: LD_VAR 0 5
11742: PPUSH
11743: LD_VAR 0 7
11747: PUSH
11748: LD_VAR 0 2
11752: ARRAY
11753: PUSH
11754: LD_INT 1
11756: ARRAY
11757: PPUSH
11758: LD_VAR 0 7
11762: PUSH
11763: LD_VAR 0 2
11767: ARRAY
11768: PUSH
11769: LD_INT 2
11771: ARRAY
11772: PPUSH
11773: CALL_OW 428
11777: PPUSH
11778: CALL_OW 52
// end ;
11782: GO 11700
11784: POP
11785: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11786: LD_ADDR_VAR 0 7
11790: PUSH
11791: LD_INT 198
11793: PUSH
11794: LD_INT 158
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 203
11803: PUSH
11804: LD_INT 166
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 181
11813: PUSH
11814: LD_INT 209
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 178
11823: PUSH
11824: LD_INT 196
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 181
11833: PUSH
11834: LD_INT 212
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: ST_TO_ADDR
// for i := 1 to tmp do
11848: LD_ADDR_VAR 0 2
11852: PUSH
11853: DOUBLE
11854: LD_INT 1
11856: DEC
11857: ST_TO_ADDR
11858: LD_VAR 0 7
11862: PUSH
11863: FOR_TO
11864: IFFALSE 11985
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11866: LD_INT 0
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: LD_INT 4
11874: PUSH
11875: LD_INT 5
11877: PUSH
11878: LD_INT 6
11880: PUSH
11881: LD_INT 7
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: PUSH
11890: LD_OWVAR 67
11894: ARRAY
11895: PPUSH
11896: CALL_OW 380
// un := CreateHuman ;
11900: LD_ADDR_VAR 0 5
11904: PUSH
11905: CALL_OW 44
11909: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11910: LD_ADDR_VAR 0 4
11914: PUSH
11915: LD_VAR 0 7
11919: PUSH
11920: LD_VAR 0 2
11924: ARRAY
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_VAR 0 7
11934: PUSH
11935: LD_VAR 0 2
11939: ARRAY
11940: PUSH
11941: LD_INT 2
11943: ARRAY
11944: PPUSH
11945: CALL_OW 428
11949: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11950: LD_VAR 0 5
11954: PPUSH
11955: LD_VAR 0 4
11959: PPUSH
11960: CALL 62928 0 1
11964: PPUSH
11965: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11969: LD_VAR 0 5
11973: PPUSH
11974: LD_VAR 0 4
11978: PPUSH
11979: CALL_OW 52
// end ;
11983: GO 11863
11985: POP
11986: POP
// for i := 1 to 3 do
11987: LD_ADDR_VAR 0 2
11991: PUSH
11992: DOUBLE
11993: LD_INT 1
11995: DEC
11996: ST_TO_ADDR
11997: LD_INT 3
11999: PUSH
12000: FOR_TO
12001: IFFALSE 12056
// begin InitHc ;
12003: CALL_OW 19
// uc_nation := 0 ;
12007: LD_ADDR_OWVAR 21
12011: PUSH
12012: LD_INT 0
12014: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
12015: LD_ADDR_OWVAR 28
12019: PUSH
12020: LD_INT 16
12022: ST_TO_ADDR
// un := CreateHuman ;
12023: LD_ADDR_VAR 0 5
12027: PUSH
12028: CALL_OW 44
12032: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
12033: LD_VAR 0 5
12037: PPUSH
12038: LD_INT 194
12040: PPUSH
12041: LD_INT 164
12043: PPUSH
12044: LD_INT 6
12046: PPUSH
12047: LD_INT 0
12049: PPUSH
12050: CALL_OW 50
// end ;
12054: GO 12000
12056: POP
12057: POP
// uc_nation := 3 ;
12058: LD_ADDR_OWVAR 21
12062: PUSH
12063: LD_INT 3
12065: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
12066: LD_INT 24
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: LD_INT 1
12074: PPUSH
12075: LD_INT 44
12077: PPUSH
12078: LD_INT 10
12080: PPUSH
12081: CALL 34708 0 5
// un := CreateVehicle ;
12085: LD_ADDR_VAR 0 5
12089: PUSH
12090: CALL_OW 45
12094: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
12095: LD_VAR 0 5
12099: PPUSH
12100: LD_INT 199
12102: PPUSH
12103: LD_INT 166
12105: PPUSH
12106: LD_INT 1
12108: PPUSH
12109: LD_INT 0
12111: PPUSH
12112: CALL 70038 0 5
// ComHold ( un ) ;
12116: LD_VAR 0 5
12120: PPUSH
12121: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12125: LD_INT 0
12127: PPUSH
12128: LD_INT 3
12130: PPUSH
12131: LD_INT 4
12133: PPUSH
12134: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12138: CALL_OW 44
12142: PPUSH
12143: LD_VAR 0 5
12147: PPUSH
12148: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12152: LD_INT 24
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: LD_INT 45
12163: PPUSH
12164: LD_INT 10
12166: PPUSH
12167: CALL 34708 0 5
// un := CreateVehicle ;
12171: LD_ADDR_VAR 0 5
12175: PUSH
12176: CALL_OW 45
12180: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12181: LD_VAR 0 5
12185: PPUSH
12186: LD_INT 129
12188: PPUSH
12189: LD_INT 93
12191: PPUSH
12192: LD_INT 1
12194: PPUSH
12195: LD_INT 0
12197: PPUSH
12198: CALL 70038 0 5
// ComHold ( un ) ;
12202: LD_VAR 0 5
12206: PPUSH
12207: CALL_OW 140
// if Difficulty > 1 then
12211: LD_OWVAR 67
12215: PUSH
12216: LD_INT 1
12218: GREATER
12219: IFFALSE 12307
// begin PrepareHuman ( false , 3 , 4 ) ;
12221: LD_INT 0
12223: PPUSH
12224: LD_INT 3
12226: PPUSH
12227: LD_INT 4
12229: PPUSH
12230: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12234: CALL_OW 44
12238: PPUSH
12239: LD_VAR 0 5
12243: PPUSH
12244: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12248: LD_INT 24
12250: PPUSH
12251: LD_INT 1
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: LD_INT 45
12259: PPUSH
12260: LD_INT 10
12262: PPUSH
12263: CALL 34708 0 5
// un := CreateVehicle ;
12267: LD_ADDR_VAR 0 5
12271: PUSH
12272: CALL_OW 45
12276: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12277: LD_VAR 0 5
12281: PPUSH
12282: LD_INT 200
12284: PPUSH
12285: LD_INT 173
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: LD_INT 0
12293: PPUSH
12294: CALL 70038 0 5
// ComHold ( un ) ;
12298: LD_VAR 0 5
12302: PPUSH
12303: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12307: LD_INT 0
12309: PPUSH
12310: LD_INT 3
12312: PPUSH
12313: LD_INT 4
12315: PPUSH
12316: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12320: CALL_OW 44
12324: PPUSH
12325: LD_VAR 0 5
12329: PPUSH
12330: CALL_OW 52
// bc_type := b_armoury ;
12334: LD_ADDR_OWVAR 42
12338: PUSH
12339: LD_INT 4
12341: ST_TO_ADDR
// if Difficulty > 1 then
12342: LD_OWVAR 67
12346: PUSH
12347: LD_INT 1
12349: GREATER
12350: IFFALSE 12360
// bc_type := b_barracks ;
12352: LD_ADDR_OWVAR 42
12356: PUSH
12357: LD_INT 5
12359: ST_TO_ADDR
// bc_level := 6 ;
12360: LD_ADDR_OWVAR 43
12364: PUSH
12365: LD_INT 6
12367: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12368: LD_INT 120
12370: PPUSH
12371: LD_INT 100
12373: PPUSH
12374: LD_INT 5
12376: PPUSH
12377: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12381: LD_ADDR_VAR 0 2
12385: PUSH
12386: DOUBLE
12387: LD_INT 1
12389: DEC
12390: ST_TO_ADDR
12391: LD_INT 3
12393: PUSH
12394: LD_INT 3
12396: PUSH
12397: LD_INT 4
12399: PUSH
12400: LD_INT 4
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: PUSH
12409: LD_OWVAR 67
12413: ARRAY
12414: PUSH
12415: FOR_TO
12416: IFFALSE 12474
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12418: LD_INT 0
12420: PPUSH
12421: LD_INT 1
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: LD_INT 9
12429: PUSH
12430: LD_INT 9
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: LD_OWVAR 67
12443: ARRAY
12444: PPUSH
12445: LD_INT 5
12447: PPUSH
12448: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12452: CALL_OW 44
12456: PPUSH
12457: LD_INT 120
12459: PPUSH
12460: LD_INT 100
12462: PPUSH
12463: CALL_OW 428
12467: PPUSH
12468: CALL_OW 52
// end ;
12472: GO 12415
12474: POP
12475: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12476: LD_ADDR_VAR 0 7
12480: PUSH
12481: LD_INT 135
12483: PUSH
12484: LD_INT 100
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 137
12493: PUSH
12494: LD_INT 92
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: ST_TO_ADDR
// for i := 1 to tmp do
12505: LD_ADDR_VAR 0 2
12509: PUSH
12510: DOUBLE
12511: LD_INT 1
12513: DEC
12514: ST_TO_ADDR
12515: LD_VAR 0 7
12519: PUSH
12520: FOR_TO
12521: IFFALSE 12691
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12523: LD_INT 22
12525: PUSH
12526: LD_INT 22
12528: PUSH
12529: LD_INT 24
12531: PUSH
12532: LD_INT 24
12534: PUSH
12535: LD_INT 24
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: PUSH
12545: LD_OWVAR 67
12549: PUSH
12550: LD_INT 0
12552: PPUSH
12553: LD_INT 1
12555: PPUSH
12556: CALL_OW 12
12560: PLUS
12561: ARRAY
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: LD_INT 44
12571: PPUSH
12572: LD_INT 25
12574: PPUSH
12575: CALL 34708 0 5
// veh := CreateVehicle ;
12579: LD_ADDR_VAR 0 6
12583: PUSH
12584: CALL_OW 45
12588: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12589: LD_VAR 0 6
12593: PPUSH
12594: LD_INT 2
12596: PPUSH
12597: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12601: LD_VAR 0 6
12605: PPUSH
12606: LD_VAR 0 7
12610: PUSH
12611: LD_VAR 0 2
12615: ARRAY
12616: PUSH
12617: LD_INT 1
12619: ARRAY
12620: PPUSH
12621: LD_VAR 0 7
12625: PUSH
12626: LD_VAR 0 2
12630: ARRAY
12631: PUSH
12632: LD_INT 2
12634: ARRAY
12635: PPUSH
12636: LD_INT 0
12638: PPUSH
12639: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12643: LD_INT 0
12645: PPUSH
12646: LD_INT 3
12648: PPUSH
12649: LD_INT 6
12651: PPUSH
12652: CALL_OW 380
// un := CreateHuman ;
12656: LD_ADDR_VAR 0 5
12660: PUSH
12661: CALL_OW 44
12665: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12666: LD_VAR 0 5
12670: PPUSH
12671: LD_VAR 0 6
12675: PPUSH
12676: CALL_OW 52
// ComHold ( veh ) ;
12680: LD_VAR 0 6
12684: PPUSH
12685: CALL_OW 140
// end ;
12689: GO 12520
12691: POP
12692: POP
// tmp := [ 191 , 122 ] ;
12693: LD_ADDR_VAR 0 7
12697: PUSH
12698: LD_INT 191
12700: PUSH
12701: LD_INT 122
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12708: LD_INT 24
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: LD_INT 44
12719: PPUSH
12720: LD_INT 30
12722: PPUSH
12723: CALL 34708 0 5
// ruBlockadeTank := CreateVehicle ;
12727: LD_ADDR_EXP 55
12731: PUSH
12732: CALL_OW 45
12736: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12737: LD_EXP 55
12741: PPUSH
12742: LD_INT 2
12744: PPUSH
12745: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12749: LD_EXP 55
12753: PPUSH
12754: LD_INT 191
12756: PPUSH
12757: LD_INT 122
12759: PPUSH
12760: LD_INT 0
12762: PPUSH
12763: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12767: LD_INT 1
12769: PPUSH
12770: LD_INT 5
12772: PUSH
12773: LD_INT 6
12775: PUSH
12776: LD_INT 7
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: LD_OWVAR 67
12788: PUSH
12789: LD_INT 1
12791: MINUS
12792: ARRAY
12793: PPUSH
12794: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12798: CALL_OW 44
12802: PPUSH
12803: LD_EXP 55
12807: PPUSH
12808: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12812: LD_EXP 55
12816: PPUSH
12817: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12821: LD_ADDR_EXP 57
12825: PUSH
12826: EMPTY
12827: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12828: LD_ADDR_VAR 0 2
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_INT 2
12840: PUSH
12841: LD_INT 2
12843: PUSH
12844: LD_INT 3
12846: PUSH
12847: LD_INT 3
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: LD_OWVAR 67
12860: ARRAY
12861: PUSH
12862: FOR_TO
12863: IFFALSE 12979
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12865: LD_INT 0
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: LD_INT 4
12873: PUSH
12874: LD_INT 5
12876: PUSH
12877: LD_INT 6
12879: PUSH
12880: LD_INT 7
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: PUSH
12889: LD_OWVAR 67
12893: ARRAY
12894: PPUSH
12895: CALL_OW 380
// un := CreateHuman ;
12899: LD_ADDR_VAR 0 5
12903: PUSH
12904: CALL_OW 44
12908: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12909: LD_VAR 0 5
12913: PPUSH
12914: LD_INT 9
12916: PPUSH
12917: LD_INT 0
12919: PPUSH
12920: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12924: LD_VAR 0 5
12928: PPUSH
12929: LD_INT 198
12931: PPUSH
12932: LD_INT 129
12934: PPUSH
12935: CALL_OW 118
// AddComCrawl ( un ) ;
12939: LD_VAR 0 5
12943: PPUSH
12944: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12948: LD_ADDR_EXP 57
12952: PUSH
12953: LD_EXP 57
12957: PPUSH
12958: LD_EXP 57
12962: PUSH
12963: LD_INT 1
12965: PLUS
12966: PPUSH
12967: LD_VAR 0 5
12971: PPUSH
12972: CALL_OW 1
12976: ST_TO_ADDR
// end ;
12977: GO 12862
12979: POP
12980: POP
// PrepareHuman ( false , 4 , 5 ) ;
12981: LD_INT 0
12983: PPUSH
12984: LD_INT 4
12986: PPUSH
12987: LD_INT 5
12989: PPUSH
12990: CALL_OW 380
// un := CreateHuman ;
12994: LD_ADDR_VAR 0 5
12998: PUSH
12999: CALL_OW 44
13003: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
13004: LD_VAR 0 5
13008: PPUSH
13009: LD_INT 179
13011: PPUSH
13012: LD_INT 113
13014: PPUSH
13015: LD_INT 0
13017: PPUSH
13018: CALL_OW 48
// ComHold ( un ) ;
13022: LD_VAR 0 5
13026: PPUSH
13027: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
13031: LD_ADDR_EXP 57
13035: PUSH
13036: LD_EXP 57
13040: PPUSH
13041: LD_EXP 57
13045: PUSH
13046: LD_INT 1
13048: PLUS
13049: PPUSH
13050: LD_VAR 0 5
13054: PPUSH
13055: CALL_OW 1
13059: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
13060: LD_ADDR_VAR 0 7
13064: PUSH
13065: LD_INT 167
13067: PPUSH
13068: LD_INT 243
13070: PPUSH
13071: CALL_OW 428
13075: PPUSH
13076: CALL_OW 274
13080: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
13081: LD_VAR 0 7
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: LD_INT 1000
13091: PPUSH
13092: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
13096: LD_VAR 0 7
13100: PPUSH
13101: LD_INT 2
13103: PPUSH
13104: LD_INT 400
13106: PPUSH
13107: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13111: LD_ADDR_VAR 0 7
13115: PUSH
13116: LD_INT 169
13118: PPUSH
13119: LD_INT 229
13121: PPUSH
13122: CALL_OW 428
13126: ST_TO_ADDR
// for i := 1 to 3 do
13127: LD_ADDR_VAR 0 2
13131: PUSH
13132: DOUBLE
13133: LD_INT 1
13135: DEC
13136: ST_TO_ADDR
13137: LD_INT 3
13139: PUSH
13140: FOR_TO
13141: IFFALSE 13232
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13143: LD_INT 0
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: LD_INT 4
13151: PUSH
13152: LD_INT 5
13154: PUSH
13155: LD_INT 5
13157: PUSH
13158: LD_INT 6
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: PUSH
13167: LD_OWVAR 67
13171: ARRAY
13172: PPUSH
13173: CALL_OW 380
// un := CreateHuman ;
13177: LD_ADDR_VAR 0 5
13181: PUSH
13182: CALL_OW 44
13186: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13187: LD_VAR 0 5
13191: PPUSH
13192: LD_VAR 0 7
13196: PPUSH
13197: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13201: LD_ADDR_EXP 58
13205: PUSH
13206: LD_EXP 58
13210: PPUSH
13211: LD_EXP 58
13215: PUSH
13216: LD_INT 1
13218: PLUS
13219: PPUSH
13220: LD_VAR 0 5
13224: PPUSH
13225: CALL_OW 1
13229: ST_TO_ADDR
// end ;
13230: GO 13140
13232: POP
13233: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13234: LD_ADDR_VAR 0 7
13238: PUSH
13239: LD_INT 165
13241: PUSH
13242: LD_INT 227
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 173
13251: PUSH
13252: LD_INT 231
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: ST_TO_ADDR
// for i := 1 to tmp do
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: DOUBLE
13269: LD_INT 1
13271: DEC
13272: ST_TO_ADDR
13273: LD_VAR 0 7
13277: PUSH
13278: FOR_TO
13279: IFFALSE 13400
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13281: LD_INT 0
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: LD_INT 4
13289: PUSH
13290: LD_INT 5
13292: PUSH
13293: LD_INT 5
13295: PUSH
13296: LD_INT 6
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: PUSH
13305: LD_OWVAR 67
13309: ARRAY
13310: PPUSH
13311: CALL_OW 380
// un := CreateHuman ;
13315: LD_ADDR_VAR 0 5
13319: PUSH
13320: CALL_OW 44
13324: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13325: LD_VAR 0 5
13329: PPUSH
13330: LD_VAR 0 7
13334: PUSH
13335: LD_VAR 0 2
13339: ARRAY
13340: PUSH
13341: LD_INT 1
13343: ARRAY
13344: PPUSH
13345: LD_VAR 0 7
13349: PUSH
13350: LD_VAR 0 2
13354: ARRAY
13355: PUSH
13356: LD_INT 2
13358: ARRAY
13359: PPUSH
13360: CALL_OW 428
13364: PPUSH
13365: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13369: LD_ADDR_EXP 58
13373: PUSH
13374: LD_EXP 58
13378: PPUSH
13379: LD_EXP 58
13383: PUSH
13384: LD_INT 1
13386: PLUS
13387: PPUSH
13388: LD_VAR 0 5
13392: PPUSH
13393: CALL_OW 1
13397: ST_TO_ADDR
// end ;
13398: GO 13278
13400: POP
13401: POP
// for i := 1 to 2 do
13402: LD_ADDR_VAR 0 2
13406: PUSH
13407: DOUBLE
13408: LD_INT 1
13410: DEC
13411: ST_TO_ADDR
13412: LD_INT 2
13414: PUSH
13415: FOR_TO
13416: IFFALSE 13471
// begin InitHc ;
13418: CALL_OW 19
// uc_nation := 0 ;
13422: LD_ADDR_OWVAR 21
13426: PUSH
13427: LD_INT 0
13429: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13430: LD_ADDR_OWVAR 28
13434: PUSH
13435: LD_INT 16
13437: ST_TO_ADDR
// un := CreateHuman ;
13438: LD_ADDR_VAR 0 5
13442: PUSH
13443: CALL_OW 44
13447: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13448: LD_VAR 0 5
13452: PPUSH
13453: LD_INT 166
13455: PPUSH
13456: LD_INT 233
13458: PPUSH
13459: LD_INT 2
13461: PPUSH
13462: LD_INT 0
13464: PPUSH
13465: CALL_OW 50
// end ;
13469: GO 13415
13471: POP
13472: POP
// uc_nation := 3 ;
13473: LD_ADDR_OWVAR 21
13477: PUSH
13478: LD_INT 3
13480: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13481: LD_ADDR_VAR 0 7
13485: PUSH
13486: LD_INT 71
13488: PUSH
13489: LD_INT 52
13491: PUSH
13492: LD_INT 11
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: ST_TO_ADDR
// for i in tmp do
13500: LD_ADDR_VAR 0 2
13504: PUSH
13505: LD_VAR 0 7
13509: PUSH
13510: FOR_IN
13511: IFFALSE 13555
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13513: LD_VAR 0 2
13517: PPUSH
13518: CALL_OW 274
13522: PPUSH
13523: LD_INT 1
13525: PPUSH
13526: LD_INT 3000
13528: PPUSH
13529: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13533: LD_VAR 0 2
13537: PPUSH
13538: CALL_OW 274
13542: PPUSH
13543: LD_INT 2
13545: PPUSH
13546: LD_INT 600
13548: PPUSH
13549: CALL_OW 277
// end ;
13553: GO 13510
13555: POP
13556: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13557: LD_ADDR_VAR 0 7
13561: PUSH
13562: LD_INT 41
13564: PUSH
13565: LD_INT 57
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 38
13574: PUSH
13575: LD_INT 55
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 50
13584: PUSH
13585: LD_INT 73
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 51
13594: PUSH
13595: LD_INT 65
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 82
13604: PUSH
13605: LD_INT 93
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 87
13614: PUSH
13615: LD_INT 100
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 91
13624: PUSH
13625: LD_INT 109
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 84
13634: PUSH
13635: LD_INT 120
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 113
13644: PUSH
13645: LD_INT 153
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 123
13654: PUSH
13655: LD_INT 171
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 125
13664: PUSH
13665: LD_INT 178
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 125
13674: PUSH
13675: LD_INT 188
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 125
13684: PUSH
13685: LD_INT 201
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 33
13694: PUSH
13695: LD_INT 60
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 76
13704: PUSH
13705: LD_INT 95
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 84
13714: PUSH
13715: LD_INT 111
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 112
13724: PUSH
13725: LD_INT 165
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: ST_TO_ADDR
// for i := 1 to tmp do
13751: LD_ADDR_VAR 0 2
13755: PUSH
13756: DOUBLE
13757: LD_INT 1
13759: DEC
13760: ST_TO_ADDR
13761: LD_VAR 0 7
13765: PUSH
13766: FOR_TO
13767: IFFALSE 14014
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13769: LD_ADDR_VAR 0 4
13773: PUSH
13774: LD_VAR 0 7
13778: PUSH
13779: LD_VAR 0 2
13783: ARRAY
13784: PUSH
13785: LD_INT 1
13787: ARRAY
13788: PPUSH
13789: LD_VAR 0 7
13793: PUSH
13794: LD_VAR 0 2
13798: ARRAY
13799: PUSH
13800: LD_INT 2
13802: ARRAY
13803: PPUSH
13804: CALL_OW 428
13808: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13809: LD_VAR 0 4
13813: PPUSH
13814: CALL_OW 266
13818: PUSH
13819: LD_INT 4
13821: PUSH
13822: LD_INT 5
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: IN
13829: IFFALSE 13925
// begin for j := 1 to Difficulty do
13831: LD_ADDR_VAR 0 3
13835: PUSH
13836: DOUBLE
13837: LD_INT 1
13839: DEC
13840: ST_TO_ADDR
13841: LD_OWVAR 67
13845: PUSH
13846: FOR_TO
13847: IFFALSE 13921
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13849: LD_INT 0
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: LD_INT 4
13857: PUSH
13858: LD_INT 5
13860: PUSH
13861: LD_INT 5
13863: PUSH
13864: LD_INT 6
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_OWVAR 67
13877: ARRAY
13878: PPUSH
13879: CALL_OW 380
// un := CreateHuman ;
13883: LD_ADDR_VAR 0 5
13887: PUSH
13888: CALL_OW 44
13892: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13893: LD_VAR 0 5
13897: PPUSH
13898: LD_VAR 0 4
13902: PPUSH
13903: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13907: LD_VAR 0 5
13911: PPUSH
13912: LD_INT 9
13914: PPUSH
13915: CALL_OW 336
// end ;
13919: GO 13846
13921: POP
13922: POP
// end else
13923: GO 13983
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13925: LD_INT 0
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: LD_INT 4
13933: PUSH
13934: LD_INT 5
13936: PUSH
13937: LD_INT 5
13939: PUSH
13940: LD_INT 6
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: PUSH
13949: LD_OWVAR 67
13953: ARRAY
13954: PPUSH
13955: CALL_OW 380
// un := CreateHuman ;
13959: LD_ADDR_VAR 0 5
13963: PUSH
13964: CALL_OW 44
13968: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13969: LD_VAR 0 5
13973: PPUSH
13974: LD_VAR 0 4
13978: PPUSH
13979: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13983: LD_ADDR_EXP 59
13987: PUSH
13988: LD_EXP 59
13992: PPUSH
13993: LD_EXP 59
13997: PUSH
13998: LD_INT 1
14000: PLUS
14001: PPUSH
14002: LD_VAR 0 5
14006: PPUSH
14007: CALL_OW 1
14011: ST_TO_ADDR
// end ;
14012: GO 13766
14014: POP
14015: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
14016: LD_ADDR_VAR 0 4
14020: PUSH
14021: LD_INT 10
14023: PPUSH
14024: LD_INT 22
14026: PUSH
14027: LD_INT 3
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 30
14036: PUSH
14037: LD_INT 32
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 58
14046: PUSH
14047: EMPTY
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: PPUSH
14055: CALL_OW 70
14059: PUSH
14060: FOR_IN
14061: IFFALSE 14195
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
14063: LD_INT 40
14065: PUSH
14066: LD_INT 50
14068: PUSH
14069: LD_INT 75
14071: PUSH
14072: LD_INT 80
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: PUSH
14081: LD_OWVAR 67
14085: ARRAY
14086: PUSH
14087: LD_EXP 7
14091: PUSH
14092: LD_INT 10
14094: MUL
14095: MINUS
14096: PPUSH
14097: CALL_OW 13
14101: NOT
14102: IFFALSE 14106
// continue ;
14104: GO 14060
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14106: LD_INT 0
14108: PPUSH
14109: LD_INT 1
14111: PPUSH
14112: LD_INT 4
14114: PUSH
14115: LD_INT 5
14117: PUSH
14118: LD_INT 5
14120: PUSH
14121: LD_INT 6
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: PUSH
14130: LD_OWVAR 67
14134: ARRAY
14135: PPUSH
14136: CALL_OW 380
// un := CreateHuman ;
14140: LD_ADDR_VAR 0 5
14144: PUSH
14145: CALL_OW 44
14149: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14150: LD_VAR 0 5
14154: PPUSH
14155: LD_VAR 0 4
14159: PPUSH
14160: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14164: LD_ADDR_EXP 59
14168: PUSH
14169: LD_EXP 59
14173: PPUSH
14174: LD_EXP 59
14178: PUSH
14179: LD_INT 1
14181: PLUS
14182: PPUSH
14183: LD_VAR 0 5
14187: PPUSH
14188: CALL_OW 1
14192: ST_TO_ADDR
// end ;
14193: GO 14060
14195: POP
14196: POP
// for i := 1 to 5 do
14197: LD_ADDR_VAR 0 2
14201: PUSH
14202: DOUBLE
14203: LD_INT 1
14205: DEC
14206: ST_TO_ADDR
14207: LD_INT 5
14209: PUSH
14210: FOR_TO
14211: IFFALSE 14309
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14213: LD_INT 0
14215: PPUSH
14216: LD_INT 2
14218: PPUSH
14219: LD_INT 4
14221: PUSH
14222: LD_INT 5
14224: PUSH
14225: LD_INT 5
14227: PUSH
14228: LD_INT 6
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: PUSH
14237: LD_OWVAR 67
14241: ARRAY
14242: PPUSH
14243: CALL_OW 380
// un := CreateHuman ;
14247: LD_ADDR_VAR 0 5
14251: PUSH
14252: CALL_OW 44
14256: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14257: LD_VAR 0 5
14261: PPUSH
14262: LD_INT 66
14264: PPUSH
14265: LD_INT 101
14267: PPUSH
14268: LD_INT 3
14270: PPUSH
14271: LD_INT 0
14273: PPUSH
14274: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14278: LD_ADDR_EXP 59
14282: PUSH
14283: LD_EXP 59
14287: PPUSH
14288: LD_EXP 59
14292: PUSH
14293: LD_INT 1
14295: PLUS
14296: PPUSH
14297: LD_VAR 0 5
14301: PPUSH
14302: CALL_OW 1
14306: ST_TO_ADDR
// end ;
14307: GO 14210
14309: POP
14310: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14311: LD_ADDR_VAR 0 7
14315: PUSH
14316: LD_INT 72
14318: PUSH
14319: LD_INT 12
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: ST_TO_ADDR
// for i := 1 to tmp do
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: DOUBLE
14332: LD_INT 1
14334: DEC
14335: ST_TO_ADDR
14336: LD_VAR 0 7
14340: PUSH
14341: FOR_TO
14342: IFFALSE 14459
// for j := 1 to 6 do
14344: LD_ADDR_VAR 0 3
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_INT 6
14356: PUSH
14357: FOR_TO
14358: IFFALSE 14455
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14360: LD_INT 0
14362: PPUSH
14363: LD_INT 3
14365: PPUSH
14366: LD_INT 4
14368: PUSH
14369: LD_INT 5
14371: PUSH
14372: LD_INT 5
14374: PUSH
14375: LD_INT 6
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: PUSH
14384: LD_OWVAR 67
14388: ARRAY
14389: PPUSH
14390: CALL_OW 380
// un := CreateHuman ;
14394: LD_ADDR_VAR 0 5
14398: PUSH
14399: CALL_OW 44
14403: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14404: LD_VAR 0 5
14408: PPUSH
14409: LD_VAR 0 7
14413: PUSH
14414: LD_VAR 0 2
14418: ARRAY
14419: PPUSH
14420: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14424: LD_ADDR_EXP 59
14428: PUSH
14429: LD_EXP 59
14433: PPUSH
14434: LD_EXP 59
14438: PUSH
14439: LD_INT 1
14441: PLUS
14442: PPUSH
14443: LD_VAR 0 5
14447: PPUSH
14448: CALL_OW 1
14452: ST_TO_ADDR
// end ;
14453: GO 14357
14455: POP
14456: POP
14457: GO 14341
14459: POP
14460: POP
// for i := 1 to 3 do
14461: LD_ADDR_VAR 0 2
14465: PUSH
14466: DOUBLE
14467: LD_INT 1
14469: DEC
14470: ST_TO_ADDR
14471: LD_INT 3
14473: PUSH
14474: FOR_TO
14475: IFFALSE 14564
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14477: LD_INT 0
14479: PPUSH
14480: LD_INT 4
14482: PPUSH
14483: LD_INT 4
14485: PUSH
14486: LD_INT 5
14488: PUSH
14489: LD_INT 5
14491: PUSH
14492: LD_INT 6
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: PUSH
14501: LD_OWVAR 67
14505: ARRAY
14506: PPUSH
14507: CALL_OW 380
// un := CreateHuman ;
14511: LD_ADDR_VAR 0 5
14515: PUSH
14516: CALL_OW 44
14520: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14521: LD_VAR 0 5
14525: PPUSH
14526: LD_INT 17
14528: PPUSH
14529: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14533: LD_ADDR_EXP 59
14537: PUSH
14538: LD_EXP 59
14542: PPUSH
14543: LD_EXP 59
14547: PUSH
14548: LD_INT 1
14550: PLUS
14551: PPUSH
14552: LD_VAR 0 5
14556: PPUSH
14557: CALL_OW 1
14561: ST_TO_ADDR
// end ;
14562: GO 14474
14564: POP
14565: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14566: LD_ADDR_VAR 0 2
14570: PUSH
14571: DOUBLE
14572: LD_INT 1
14574: DEC
14575: ST_TO_ADDR
14576: LD_INT 2
14578: PUSH
14579: LD_INT 3
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: LD_OWVAR 67
14598: ARRAY
14599: PUSH
14600: FOR_TO
14601: IFFALSE 14721
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14603: LD_INT 22
14605: PPUSH
14606: LD_INT 1
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: LD_INT 52
14614: PPUSH
14615: LD_INT 100
14617: PPUSH
14618: CALL 34708 0 5
// veh := CreateVehicle ;
14622: LD_ADDR_VAR 0 6
14626: PUSH
14627: CALL_OW 45
14631: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14632: LD_INT 0
14634: PPUSH
14635: LD_INT 3
14637: PPUSH
14638: LD_INT 4
14640: PPUSH
14641: CALL_OW 380
// un := CreateHuman ;
14645: LD_ADDR_VAR 0 5
14649: PUSH
14650: CALL_OW 44
14654: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14655: LD_VAR 0 6
14659: PPUSH
14660: LD_INT 107
14662: PPUSH
14663: LD_INT 182
14665: PPUSH
14666: LD_INT 4
14668: PPUSH
14669: LD_INT 0
14671: PPUSH
14672: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14676: LD_VAR 0 5
14680: PPUSH
14681: LD_VAR 0 6
14685: PPUSH
14686: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14690: LD_ADDR_EXP 59
14694: PUSH
14695: LD_EXP 59
14699: PPUSH
14700: LD_EXP 59
14704: PUSH
14705: LD_INT 1
14707: PLUS
14708: PPUSH
14709: LD_VAR 0 5
14713: PPUSH
14714: CALL_OW 1
14718: ST_TO_ADDR
// end ;
14719: GO 14600
14721: POP
14722: POP
// InitHc ;
14723: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14727: LD_ADDR_VAR 0 2
14731: PUSH
14732: DOUBLE
14733: LD_INT 1
14735: DEC
14736: ST_TO_ADDR
14737: LD_INT 3
14739: PUSH
14740: LD_INT 5
14742: PUSH
14743: LD_INT 6
14745: PUSH
14746: LD_INT 8
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: PUSH
14755: LD_OWVAR 67
14759: ARRAY
14760: PUSH
14761: FOR_TO
14762: IFFALSE 14857
// begin uc_nation := 0 ;
14764: LD_ADDR_OWVAR 21
14768: PUSH
14769: LD_INT 0
14771: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14772: LD_ADDR_OWVAR 28
14776: PUSH
14777: LD_INT 15
14779: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14780: LD_ADDR_OWVAR 31
14784: PUSH
14785: LD_INT 3
14787: PUSH
14788: LD_INT 0
14790: PUSH
14791: LD_INT 0
14793: PUSH
14794: LD_INT 0
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: ST_TO_ADDR
// un := CreateHuman ;
14803: LD_ADDR_VAR 0 5
14807: PUSH
14808: CALL_OW 44
14812: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14813: LD_VAR 0 5
14817: PPUSH
14818: LD_INT 269
14820: PUSH
14821: LD_INT 300
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: LD_VAR 0 2
14832: PUSH
14833: LD_INT 2
14835: MOD
14836: PUSH
14837: LD_INT 1
14839: PLUS
14840: ARRAY
14841: PPUSH
14842: LD_INT 182
14844: PPUSH
14845: LD_INT 4
14847: PPUSH
14848: LD_INT 0
14850: PPUSH
14851: CALL_OW 50
// end ;
14855: GO 14761
14857: POP
14858: POP
// uc_nation := 3 ;
14859: LD_ADDR_OWVAR 21
14863: PUSH
14864: LD_INT 3
14866: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14867: LD_EXP 8
14871: PUSH
14872: LD_INT 10
14874: PUSH
14875: LD_INT 8
14877: PUSH
14878: LD_INT 6
14880: PUSH
14881: LD_INT 5
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: PUSH
14890: LD_OWVAR 67
14894: ARRAY
14895: LESS
14896: IFFALSE 14975
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14898: LD_INT 21
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: LD_INT 1
14906: PPUSH
14907: LD_INT 51
14909: PPUSH
14910: LD_INT 12
14912: PPUSH
14913: CALL 34708 0 5
// veh := CreateVehicle ;
14917: LD_ADDR_VAR 0 6
14921: PUSH
14922: CALL_OW 45
14926: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14927: LD_VAR 0 6
14931: PPUSH
14932: LD_INT 269
14934: PPUSH
14935: LD_INT 66
14937: PPUSH
14938: LD_INT 4
14940: PPUSH
14941: LD_INT 0
14943: PPUSH
14944: CALL 70038 0 5
// SetLives ( veh , 333 ) ;
14948: LD_VAR 0 6
14952: PPUSH
14953: LD_INT 333
14955: PPUSH
14956: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14960: LD_VAR 0 6
14964: PPUSH
14965: LD_INT 2
14967: PPUSH
14968: LD_INT 100
14970: PPUSH
14971: CALL_OW 290
// end ; end ;
14975: LD_VAR 0 1
14979: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14980: LD_EXP 55
14984: IFFALSE 15001
14986: PUSH
14987: LD_EXP 55
14991: PPUSH
14992: CALL_OW 255
14996: PUSH
14997: LD_INT 3
14999: EQUAL
15000: AND
15001: IFFALSE 15166
15003: GO 15005
15005: DISABLE
15006: LD_INT 0
15008: PPUSH
// begin enable ;
15009: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
15010: LD_INT 81
15012: PUSH
15013: LD_INT 3
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 91
15022: PUSH
15023: LD_EXP 55
15027: PUSH
15028: LD_INT 15
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 69
15044: IFFALSE 15124
// begin if not IsDrivenBy ( ruBlockadeTank ) then
15046: LD_EXP 55
15050: PPUSH
15051: CALL_OW 311
15055: NOT
15056: IFFALSE 15122
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
15058: LD_ADDR_VAR 0 1
15062: PUSH
15063: LD_INT 22
15065: PUSH
15066: LD_INT 3
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 21
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PPUSH
15087: CALL_OW 69
15091: PPUSH
15092: LD_EXP 55
15096: PPUSH
15097: CALL_OW 74
15101: ST_TO_ADDR
// if driver then
15102: LD_VAR 0 1
15106: IFFALSE 15122
// ComEnterUnit ( driver , ruBlockadeTank ) ;
15108: LD_VAR 0 1
15112: PPUSH
15113: LD_EXP 55
15117: PPUSH
15118: CALL_OW 120
// end ; exit ;
15122: GO 15166
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15124: LD_EXP 55
15128: PPUSH
15129: CALL_OW 256
15133: PUSH
15134: LD_INT 1000
15136: LESS
15137: IFFALSE 15150
15139: PUSH
15140: LD_EXP 55
15144: PPUSH
15145: CALL_OW 311
15149: AND
15150: IFFALSE 15166
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15152: LD_EXP 55
15156: PPUSH
15157: CALL_OW 311
15161: PPUSH
15162: CALL 69592 0 1
// end ;
15166: PPOPN 1
15168: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15169: LD_EXP 57
15173: PPUSH
15174: LD_INT 3
15176: PUSH
15177: LD_INT 24
15179: PUSH
15180: LD_INT 1000
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PPUSH
15191: CALL_OW 72
15195: IFFALSE 15228
15197: PUSH
15198: LD_EXP 57
15202: PPUSH
15203: LD_INT 25
15205: PUSH
15206: LD_INT 4
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 50
15215: PUSH
15216: EMPTY
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 72
15227: AND
15228: IFFALSE 15416
15230: GO 15232
15232: DISABLE
15233: LD_INT 0
15235: PPUSH
15236: PPUSH
15237: PPUSH
// begin enable ;
15238: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15239: LD_ADDR_VAR 0 3
15243: PUSH
15244: LD_EXP 57
15248: PPUSH
15249: LD_INT 3
15251: PUSH
15252: LD_INT 24
15254: PUSH
15255: LD_INT 1000
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 72
15270: PPUSH
15271: LD_INT 1
15273: PPUSH
15274: CALL 69836 0 2
15278: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15279: LD_ADDR_VAR 0 2
15283: PUSH
15284: LD_EXP 57
15288: PPUSH
15289: LD_INT 25
15291: PUSH
15292: LD_INT 4
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 50
15301: PUSH
15302: EMPTY
15303: LIST
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PPUSH
15309: CALL_OW 72
15313: PUSH
15314: LD_INT 1
15316: ARRAY
15317: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15318: LD_VAR 0 2
15322: PPUSH
15323: LD_VAR 0 3
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: CALL 65133 0 2
15336: NOT
15337: IFFALSE 15416
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15339: LD_VAR 0 3
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PPUSH
15348: LD_INT 9
15350: PPUSH
15351: CALL_OW 308
15355: NOT
15356: IFFALSE 15374
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15358: LD_VAR 0 3
15362: PUSH
15363: LD_INT 1
15365: ARRAY
15366: PPUSH
15367: LD_INT 9
15369: PPUSH
15370: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15374: LD_VAR 0 2
15378: PPUSH
15379: LD_VAR 0 3
15383: PUSH
15384: LD_INT 1
15386: ARRAY
15387: PPUSH
15388: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15392: LD_VAR 0 2
15396: PPUSH
15397: LD_INT 179
15399: PPUSH
15400: LD_INT 113
15402: PPUSH
15403: CALL_OW 171
// AddComHold ( sci ) ;
15407: LD_VAR 0 2
15411: PPUSH
15412: CALL_OW 200
// end ; end ;
15416: PPOPN 3
15418: END
// every 0 0$1 trigger not IsOk ( Morozov ) do var i , tmp ;
15419: LD_EXP 53
15423: PPUSH
15424: CALL_OW 302
15428: NOT
15429: IFFALSE 15545
15431: GO 15433
15433: DISABLE
15434: LD_INT 0
15436: PPUSH
15437: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15438: LD_ADDR_VAR 0 2
15442: PUSH
15443: LD_EXP 59
15447: PPUSH
15448: LD_INT 25
15450: PUSH
15451: LD_INT 1
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 50
15460: PUSH
15461: EMPTY
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PPUSH
15468: CALL_OW 72
15472: ST_TO_ADDR
// if not tmp then
15473: LD_VAR 0 2
15477: NOT
15478: IFFALSE 15482
// exit ;
15480: GO 15545
// for i in tmp do
15482: LD_ADDR_VAR 0 1
15486: PUSH
15487: LD_VAR 0 2
15491: PUSH
15492: FOR_IN
15493: IFFALSE 15543
// begin if Prob ( 50 ) then
15495: LD_INT 50
15497: PPUSH
15498: CALL_OW 13
15502: IFFALSE 15506
// continue ;
15504: GO 15492
// if IsInUnit ( i ) then
15506: LD_VAR 0 1
15510: PPUSH
15511: CALL_OW 310
15515: IFFALSE 15526
// ComExitBuilding ( i ) ;
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15526: LD_VAR 0 1
15530: PPUSH
15531: LD_INT 84
15533: PPUSH
15534: LD_INT 133
15536: PPUSH
15537: CALL_OW 174
// end ;
15541: GO 15492
15543: POP
15544: POP
// end ;
15545: PPOPN 2
15547: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15548: LD_EXP 14
15552: IFFALSE 15733
15554: GO 15556
15556: DISABLE
15557: LD_INT 0
15559: PPUSH
15560: PPUSH
15561: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15562: LD_ADDR_VAR 0 2
15566: PUSH
15567: LD_INT 72
15569: PUSH
15570: LD_INT 12
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15577: LD_ADDR_VAR 0 3
15581: PUSH
15582: LD_INT 44
15584: PUSH
15585: LD_INT 43
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 45
15594: PUSH
15595: LD_INT 44
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 45
15604: PUSH
15605: LD_INT 46
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 45
15614: PUSH
15615: LD_INT 46
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: PUSH
15628: LD_OWVAR 67
15632: ARRAY
15633: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15634: LD_ADDR_VAR 0 1
15638: PUSH
15639: DOUBLE
15640: LD_INT 1
15642: DEC
15643: ST_TO_ADDR
15644: LD_INT 1
15646: PUSH
15647: LD_INT 2
15649: PUSH
15650: LD_INT 2
15652: PUSH
15653: LD_INT 3
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: PUSH
15662: LD_OWVAR 67
15666: ARRAY
15667: PUSH
15668: FOR_TO
15669: IFFALSE 15731
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15671: LD_VAR 0 2
15675: PPUSH
15676: LD_INT 22
15678: PUSH
15679: LD_INT 23
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_VAR 0 1
15690: PUSH
15691: LD_INT 2
15693: MOD
15694: PUSH
15695: LD_INT 1
15697: PLUS
15698: ARRAY
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: LD_INT 1
15705: PPUSH
15706: LD_VAR 0 3
15710: PUSH
15711: LD_VAR 0 1
15715: PUSH
15716: LD_INT 2
15718: MOD
15719: PUSH
15720: LD_INT 1
15722: PLUS
15723: ARRAY
15724: PPUSH
15725: CALL_OW 185
15729: GO 15668
15731: POP
15732: POP
// end ;
15733: PPOPN 3
15735: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15736: LD_EXP 11
15740: IFFALSE 16921
15742: GO 15744
15744: DISABLE
15745: LD_INT 0
15747: PPUSH
15748: PPUSH
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
// begin enable ;
15753: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15754: LD_ADDR_VAR 0 6
15758: PUSH
15759: LD_INT 10
15761: PPUSH
15762: LD_INT 81
15764: PUSH
15765: LD_INT 3
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PPUSH
15772: CALL_OW 70
15776: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15777: LD_EXP 60
15781: IFFALSE 16059
// begin for i in ruSpecialVehicleGroup do
15783: LD_ADDR_VAR 0 1
15787: PUSH
15788: LD_EXP 60
15792: PUSH
15793: FOR_IN
15794: IFFALSE 16057
// begin if enemyInBase then
15796: LD_VAR 0 6
15800: IFFALSE 16055
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15802: LD_VAR 0 1
15806: PPUSH
15807: CALL_OW 256
15811: PUSH
15812: LD_INT 500
15814: GREATER
15815: IFFALSE 15832
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 110
15827: PUSH
15828: LD_INT 0
15830: EQUAL
15831: AND
15832: IFFALSE 15858
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15834: LD_VAR 0 1
15838: PPUSH
15839: LD_VAR 0 6
15843: PPUSH
15844: LD_VAR 0 1
15848: PPUSH
15849: CALL_OW 74
15853: PPUSH
15854: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15858: LD_VAR 0 1
15862: PPUSH
15863: CALL_OW 256
15867: PUSH
15868: LD_INT 500
15870: LESSEQUAL
15871: IFFALSE 15888
15873: PUSH
15874: LD_VAR 0 1
15878: PPUSH
15879: CALL_OW 110
15883: PUSH
15884: LD_INT 0
15886: EQUAL
15887: AND
15888: IFFALSE 15917
// begin SetTag ( i , 1 ) ;
15890: LD_VAR 0 1
15894: PPUSH
15895: LD_INT 1
15897: PPUSH
15898: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15902: LD_VAR 0 1
15906: PPUSH
15907: LD_INT 83
15909: PPUSH
15910: LD_INT 134
15912: PPUSH
15913: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15917: LD_VAR 0 1
15921: PPUSH
15922: CALL_OW 256
15926: PUSH
15927: LD_INT 1000
15929: LESS
15930: IFFALSE 15947
15932: PUSH
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL_OW 110
15942: PUSH
15943: LD_INT 1
15945: EQUAL
15946: AND
15947: IFFALSE 15970
15949: PUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: LD_INT 83
15957: PPUSH
15958: LD_INT 134
15960: PPUSH
15961: CALL_OW 297
15965: PUSH
15966: LD_INT 6
15968: LESS
15969: AND
15970: IFFALSE 15998
// begin SetFuel ( i , 100 ) ;
15972: LD_VAR 0 1
15976: PPUSH
15977: LD_INT 100
15979: PPUSH
15980: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15984: LD_VAR 0 1
15988: PPUSH
15989: CALL_OW 310
15993: PPUSH
15994: CALL 69714 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15998: LD_VAR 0 1
16002: PPUSH
16003: CALL_OW 256
16007: PUSH
16008: LD_INT 1000
16010: EQUAL
16011: IFFALSE 16028
16013: PUSH
16014: LD_VAR 0 1
16018: PPUSH
16019: CALL_OW 110
16023: PUSH
16024: LD_INT 1
16026: EQUAL
16027: AND
16028: IFFALSE 16041
16030: PUSH
16031: LD_VAR 0 1
16035: PPUSH
16036: CALL_OW 311
16040: AND
16041: IFFALSE 16055
// SetTag ( i , 0 ) ;
16043: LD_VAR 0 1
16047: PPUSH
16048: LD_INT 0
16050: PPUSH
16051: CALL_OW 109
// end ; end ;
16055: GO 15793
16057: POP
16058: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
16059: LD_ADDR_VAR 0 5
16063: PUSH
16064: LD_EXP 59
16068: PPUSH
16069: LD_INT 25
16071: PUSH
16072: LD_INT 4
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PPUSH
16079: CALL_OW 72
16083: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16084: LD_ADDR_VAR 0 4
16088: PUSH
16089: LD_EXP 59
16093: PPUSH
16094: LD_INT 92
16096: PUSH
16097: LD_INT 92
16099: PUSH
16100: LD_INT 155
16102: PUSH
16103: LD_INT 12
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 3
16114: PUSH
16115: LD_INT 24
16117: PUSH
16118: LD_INT 1000
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PPUSH
16133: CALL_OW 72
16137: ST_TO_ADDR
// if sci then
16138: LD_VAR 0 5
16142: IFFALSE 16275
// begin if hurt then
16144: LD_VAR 0 4
16148: IFFALSE 16221
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16150: LD_VAR 0 5
16154: PPUSH
16155: LD_INT 3
16157: PUSH
16158: LD_INT 54
16160: PUSH
16161: EMPTY
16162: LIST
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PPUSH
16168: CALL_OW 72
16172: IFFALSE 16201
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16174: LD_VAR 0 5
16178: PPUSH
16179: LD_INT 3
16181: PUSH
16182: LD_INT 54
16184: PUSH
16185: EMPTY
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 72
16196: PPUSH
16197: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16201: LD_VAR 0 5
16205: PPUSH
16206: LD_VAR 0 4
16210: PUSH
16211: LD_INT 1
16213: ARRAY
16214: PPUSH
16215: CALL_OW 188
// end else
16219: GO 16275
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16221: LD_VAR 0 5
16225: PPUSH
16226: LD_INT 3
16228: PUSH
16229: LD_INT 54
16231: PUSH
16232: EMPTY
16233: LIST
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PPUSH
16239: CALL_OW 72
16243: IFFALSE 16275
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16245: LD_VAR 0 5
16249: PPUSH
16250: LD_INT 3
16252: PUSH
16253: LD_INT 54
16255: PUSH
16256: EMPTY
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PPUSH
16263: CALL_OW 72
16267: PPUSH
16268: LD_INT 17
16270: PPUSH
16271: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16275: LD_ADDR_VAR 0 3
16279: PUSH
16280: LD_INT 10
16282: PPUSH
16283: LD_INT 21
16285: PUSH
16286: LD_INT 3
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: LD_INT 24
16298: PUSH
16299: LD_INT 1000
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PPUSH
16314: CALL_OW 70
16318: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16319: LD_ADDR_VAR 0 2
16323: PUSH
16324: LD_EXP 59
16328: PPUSH
16329: LD_INT 25
16331: PUSH
16332: LD_INT 2
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 72
16343: PUSH
16344: LD_INT 22
16346: PUSH
16347: LD_INT 3
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 34
16356: PUSH
16357: LD_INT 52
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PPUSH
16368: CALL_OW 69
16372: UNION
16373: ST_TO_ADDR
// if not tmp then
16374: LD_VAR 0 2
16378: NOT
16379: IFFALSE 16383
// exit ;
16381: GO 16921
// for i in tmp do
16383: LD_ADDR_VAR 0 1
16387: PUSH
16388: LD_VAR 0 2
16392: PUSH
16393: FOR_IN
16394: IFFALSE 16919
// begin if GetClass ( i ) = 2 then
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 257
16405: PUSH
16406: LD_INT 2
16408: EQUAL
16409: IFFALSE 16642
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16411: LD_VAR 0 1
16415: PPUSH
16416: CALL_OW 256
16420: PUSH
16421: LD_INT 1000
16423: EQUAL
16424: IFFALSE 16441
16426: PUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 110
16436: PUSH
16437: LD_INT 1
16439: EQUAL
16440: AND
16441: IFFALSE 16455
// SetTag ( i , 0 ) ;
16443: LD_VAR 0 1
16447: PPUSH
16448: LD_INT 0
16450: PPUSH
16451: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 256
16464: PUSH
16465: LD_INT 500
16467: LESSEQUAL
16468: IFFALSE 16485
16470: PUSH
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 110
16480: PUSH
16481: LD_INT 0
16483: EQUAL
16484: AND
16485: IFFALSE 16514
// begin SetTag ( i , 1 ) ;
16487: LD_VAR 0 1
16491: PPUSH
16492: LD_INT 1
16494: PPUSH
16495: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16499: LD_VAR 0 1
16503: PPUSH
16504: LD_INT 92
16506: PPUSH
16507: LD_INT 155
16509: PPUSH
16510: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16514: LD_VAR 0 3
16518: IFFALSE 16535
16520: PUSH
16521: LD_VAR 0 1
16525: PPUSH
16526: CALL_OW 256
16530: PUSH
16531: LD_INT 500
16533: GREATER
16534: AND
16535: IFFALSE 16552
16537: PUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 110
16547: PUSH
16548: LD_INT 0
16550: EQUAL
16551: AND
16552: IFFALSE 16566
16554: PUSH
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 314
16564: NOT
16565: AND
16566: IFFALSE 16640
// begin if b then
16568: LD_VAR 0 3
16572: IFFALSE 16604
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16574: LD_VAR 0 1
16578: PPUSH
16579: LD_VAR 0 3
16583: PUSH
16584: LD_INT 1
16586: PPUSH
16587: LD_VAR 0 3
16591: PPUSH
16592: CALL_OW 12
16596: ARRAY
16597: PPUSH
16598: CALL_OW 130
16602: GO 16640
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16604: LD_VAR 0 1
16608: PPUSH
16609: LD_INT 94
16611: PPUSH
16612: LD_INT 165
16614: PPUSH
16615: CALL_OW 297
16619: PUSH
16620: LD_INT 8
16622: GREATER
16623: IFFALSE 16640
// ComMoveXY ( i , 94 , 165 ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: LD_INT 94
16632: PPUSH
16633: LD_INT 165
16635: PPUSH
16636: CALL_OW 111
// end ; end else
16640: GO 16917
// if GetWeapon ( i ) = ru_crane then
16642: LD_VAR 0 1
16646: PPUSH
16647: CALL_OW 264
16651: PUSH
16652: LD_INT 52
16654: EQUAL
16655: IFFALSE 16917
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 256
16666: PUSH
16667: LD_INT 1000
16669: EQUAL
16670: IFFALSE 16687
16672: PUSH
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 110
16682: PUSH
16683: LD_INT 1
16685: EQUAL
16686: AND
16687: IFFALSE 16713
// begin SetTag ( i , 0 ) ;
16689: LD_VAR 0 1
16693: PPUSH
16694: LD_INT 0
16696: PPUSH
16697: CALL_OW 109
// SetFuel ( i , 100 ) ;
16701: LD_VAR 0 1
16705: PPUSH
16706: LD_INT 100
16708: PPUSH
16709: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 256
16722: PUSH
16723: LD_INT 500
16725: LESSEQUAL
16726: IFFALSE 16743
16728: PUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL_OW 110
16738: PUSH
16739: LD_INT 0
16741: EQUAL
16742: AND
16743: IFFALSE 16786
// begin SetTag ( i , 1 ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 1
16752: PPUSH
16753: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16757: LD_VAR 0 1
16761: PPUSH
16762: LD_INT 83
16764: PPUSH
16765: LD_INT 135
16767: PPUSH
16768: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16772: LD_VAR 0 1
16776: PPUSH
16777: CALL_OW 310
16781: PPUSH
16782: CALL 69714 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 256
16795: PUSH
16796: LD_INT 500
16798: GREATER
16799: IFFALSE 16816
16801: PUSH
16802: LD_VAR 0 1
16806: PPUSH
16807: CALL_OW 110
16811: PUSH
16812: LD_INT 0
16814: EQUAL
16815: AND
16816: IFFALSE 16829
16818: PUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 311
16828: AND
16829: IFFALSE 16843
16831: PUSH
16832: LD_VAR 0 1
16836: PPUSH
16837: CALL_OW 314
16841: NOT
16842: AND
16843: IFFALSE 16917
// begin if b then
16845: LD_VAR 0 3
16849: IFFALSE 16881
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16851: LD_VAR 0 1
16855: PPUSH
16856: LD_VAR 0 3
16860: PUSH
16861: LD_INT 1
16863: PPUSH
16864: LD_VAR 0 3
16868: PPUSH
16869: CALL_OW 12
16873: ARRAY
16874: PPUSH
16875: CALL_OW 130
16879: GO 16917
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16881: LD_VAR 0 1
16885: PPUSH
16886: LD_INT 94
16888: PPUSH
16889: LD_INT 165
16891: PPUSH
16892: CALL_OW 297
16896: PUSH
16897: LD_INT 8
16899: GREATER
16900: IFFALSE 16917
// ComMoveXY ( i , 94 , 165 ) ;
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 94
16909: PPUSH
16910: LD_INT 165
16912: PPUSH
16913: CALL_OW 111
// end ; end ; end ;
16917: GO 16393
16919: POP
16920: POP
// end ;
16921: PPOPN 6
16923: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16924: LD_EXP 23
16928: NOT
16929: IFFALSE 16938
16931: PUSH
16932: LD_EXP 27
16936: NOT
16937: AND
16938: IFFALSE 17853
16940: GO 16942
16942: DISABLE
16943: LD_INT 0
16945: PPUSH
16946: PPUSH
16947: PPUSH
16948: PPUSH
16949: PPUSH
// begin enable ;
16950: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16951: LD_INT 35
16953: PUSH
16954: LD_INT 45
16956: PUSH
16957: LD_INT 55
16959: PUSH
16960: LD_INT 60
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: LD_OWVAR 67
16973: ARRAY
16974: PPUSH
16975: CALL_OW 13
16979: IFFALSE 16995
// waveStrength := waveStrength + 1 ;
16981: LD_ADDR_EXP 62
16985: PUSH
16986: LD_EXP 62
16990: PUSH
16991: LD_INT 1
16993: PLUS
16994: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16995: LD_EXP 62
16999: PUSH
17000: LD_INT 2
17002: PUSH
17003: LD_INT 3
17005: PUSH
17006: LD_INT 4
17008: PUSH
17009: LD_INT 4
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: PUSH
17018: LD_OWVAR 67
17022: ARRAY
17023: GREATER
17024: IFFALSE 17056
// begin waveStrength := waveStrength + 2 ;
17026: LD_ADDR_EXP 62
17030: PUSH
17031: LD_EXP 62
17035: PUSH
17036: LD_INT 2
17038: PLUS
17039: ST_TO_ADDR
// disableAttackOnHeike := true ;
17040: LD_ADDR_EXP 27
17044: PUSH
17045: LD_INT 1
17047: ST_TO_ADDR
// disable ;
17048: DISABLE
// wait ( 3 3$00 ) ;
17049: LD_INT 6300
17051: PPUSH
17052: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
17056: LD_ADDR_VAR 0 1
17060: PUSH
17061: DOUBLE
17062: LD_INT 1
17064: DEC
17065: ST_TO_ADDR
17066: LD_INT 2
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: LD_INT 3
17074: PUSH
17075: LD_INT 4
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: PUSH
17084: LD_OWVAR 67
17088: ARRAY
17089: PUSH
17090: FOR_TO
17091: IFFALSE 17252
// begin InitHc ;
17093: CALL_OW 19
// InitVc ;
17097: CALL_OW 20
// uc_side := 3 ;
17101: LD_ADDR_OWVAR 20
17105: PUSH
17106: LD_INT 3
17108: ST_TO_ADDR
// uc_nation := 3 ;
17109: LD_ADDR_OWVAR 21
17113: PUSH
17114: LD_INT 3
17116: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
17117: LD_INT 0
17119: PPUSH
17120: LD_INT 1
17122: PPUSH
17123: LD_OWVAR 67
17127: PUSH
17128: LD_INT 2
17130: PLUS
17131: PPUSH
17132: CALL_OW 380
// un := CreateHuman ;
17136: LD_ADDR_VAR 0 2
17140: PUSH
17141: CALL_OW 44
17145: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
17146: LD_VAR 0 2
17150: PPUSH
17151: LD_INT 160
17153: PPUSH
17154: LD_INT 3
17156: PPUSH
17157: LD_INT 2
17159: PPUSH
17160: LD_INT 0
17162: PPUSH
17163: CALL 70038 0 5
// SetClass ( un , class_bazooker ) ;
17167: LD_VAR 0 2
17171: PPUSH
17172: LD_INT 9
17174: PPUSH
17175: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17179: LD_ADDR_EXP 61
17183: PUSH
17184: LD_EXP 61
17188: PPUSH
17189: LD_EXP 61
17193: PUSH
17194: LD_INT 1
17196: PLUS
17197: PPUSH
17198: LD_VAR 0 2
17202: PPUSH
17203: CALL_OW 1
17207: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17208: LD_VAR 0 2
17212: PPUSH
17213: LD_INT 177
17215: PPUSH
17216: LD_INT 17
17218: PPUSH
17219: CALL_OW 111
// wait ( 0 0$2 ) ;
17223: LD_INT 70
17225: PPUSH
17226: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17230: LD_ADDR_VAR 0 5
17234: PUSH
17235: LD_VAR 0 5
17239: PPUSH
17240: LD_VAR 0 2
17244: PPUSH
17245: CALL 67878 0 2
17249: ST_TO_ADDR
// end ;
17250: GO 17090
17252: POP
17253: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17254: LD_VAR 0 5
17258: PPUSH
17259: LD_INT 196
17261: PPUSH
17262: LD_INT 53
17264: PPUSH
17265: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17269: LD_VAR 0 5
17273: PPUSH
17274: LD_INT 199
17276: PPUSH
17277: LD_INT 62
17279: PPUSH
17280: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17284: LD_VAR 0 5
17288: PPUSH
17289: LD_INT 205
17291: PPUSH
17292: LD_INT 75
17294: PPUSH
17295: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17299: LD_ADDR_VAR 0 1
17303: PUSH
17304: DOUBLE
17305: LD_INT 1
17307: DEC
17308: ST_TO_ADDR
17309: LD_INT 2
17311: PUSH
17312: LD_INT 3
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: LD_INT 4
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: PUSH
17327: LD_OWVAR 67
17331: ARRAY
17332: PUSH
17333: LD_EXP 62
17337: PLUS
17338: PUSH
17339: FOR_TO
17340: IFFALSE 17649
// begin InitHc ;
17342: CALL_OW 19
// InitVc ;
17346: CALL_OW 20
// uc_side := 3 ;
17350: LD_ADDR_OWVAR 20
17354: PUSH
17355: LD_INT 3
17357: ST_TO_ADDR
// uc_nation := 3 ;
17358: LD_ADDR_OWVAR 21
17362: PUSH
17363: LD_INT 3
17365: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17366: LD_INT 22
17368: PUSH
17369: LD_INT 23
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 1
17378: PPUSH
17379: LD_INT 2
17381: PPUSH
17382: CALL_OW 12
17386: ARRAY
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: LD_INT 1
17393: PPUSH
17394: LD_INT 44
17396: PUSH
17397: LD_INT 45
17399: PUSH
17400: LD_INT 43
17402: PUSH
17403: LD_INT 42
17405: PUSH
17406: LD_INT 44
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 1
17418: PPUSH
17419: LD_INT 5
17421: PPUSH
17422: CALL_OW 12
17426: ARRAY
17427: PPUSH
17428: LD_INT 99
17430: PPUSH
17431: CALL 34708 0 5
// veh := CreateVehicle ;
17435: LD_ADDR_VAR 0 3
17439: PUSH
17440: CALL_OW 45
17444: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17445: LD_VAR 0 3
17449: PPUSH
17450: LD_INT 160
17452: PPUSH
17453: LD_INT 3
17455: PPUSH
17456: LD_INT 2
17458: PPUSH
17459: LD_INT 0
17461: PPUSH
17462: CALL 70038 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17466: LD_ADDR_EXP 61
17470: PUSH
17471: LD_EXP 61
17475: PPUSH
17476: LD_EXP 61
17480: PUSH
17481: LD_INT 1
17483: PLUS
17484: PPUSH
17485: LD_VAR 0 3
17489: PPUSH
17490: CALL_OW 1
17494: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17495: LD_INT 0
17497: PPUSH
17498: LD_INT 3
17500: PPUSH
17501: LD_OWVAR 67
17505: PUSH
17506: LD_INT 2
17508: PLUS
17509: PPUSH
17510: CALL_OW 380
// un := CreateHuman ;
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: CALL_OW 44
17523: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17524: LD_VAR 0 2
17528: PPUSH
17529: LD_VAR 0 3
17533: PPUSH
17534: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17538: LD_ADDR_EXP 61
17542: PUSH
17543: LD_EXP 61
17547: PPUSH
17548: LD_EXP 61
17552: PUSH
17553: LD_INT 1
17555: PLUS
17556: PPUSH
17557: LD_VAR 0 2
17561: PPUSH
17562: CALL_OW 1
17566: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17567: LD_VAR 0 2
17571: PPUSH
17572: LD_INT 177
17574: PPUSH
17575: LD_INT 17
17577: PPUSH
17578: CALL_OW 111
// wait ( 0 0$2 ) ;
17582: LD_INT 70
17584: PPUSH
17585: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17589: LD_ADDR_VAR 0 4
17593: PUSH
17594: LD_VAR 0 4
17598: PPUSH
17599: LD_VAR 0 4
17603: PUSH
17604: LD_INT 1
17606: PLUS
17607: PPUSH
17608: LD_VAR 0 3
17612: PPUSH
17613: CALL_OW 1
17617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17618: LD_ADDR_VAR 0 4
17622: PUSH
17623: LD_VAR 0 4
17627: PPUSH
17628: LD_VAR 0 4
17632: PUSH
17633: LD_INT 1
17635: PLUS
17636: PPUSH
17637: LD_VAR 0 2
17641: PPUSH
17642: CALL_OW 1
17646: ST_TO_ADDR
// end ;
17647: GO 17339
17649: POP
17650: POP
// for i in tmp do
17651: LD_ADDR_VAR 0 1
17655: PUSH
17656: LD_VAR 0 4
17660: PUSH
17661: FOR_IN
17662: IFFALSE 17743
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17664: LD_VAR 0 1
17668: PPUSH
17669: LD_INT 206
17671: PUSH
17672: LD_INT 37
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 239
17681: PUSH
17682: LD_INT 53
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 260
17691: PUSH
17692: LD_INT 67
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 263
17701: PUSH
17702: LD_INT 79
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 257
17711: PUSH
17712: LD_INT 105
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 227
17721: PUSH
17722: LD_INT 97
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL 70644 0 2
17741: GO 17661
17743: POP
17744: POP
// repeat wait ( 0 0$2 ) ;
17745: LD_INT 70
17747: PPUSH
17748: CALL_OW 67
// for i in tmp do
17752: LD_ADDR_VAR 0 1
17756: PUSH
17757: LD_VAR 0 4
17761: PUSH
17762: FOR_IN
17763: IFFALSE 17830
// if IsDead ( i ) then
17765: LD_VAR 0 1
17769: PPUSH
17770: CALL_OW 301
17774: IFFALSE 17794
// tmp := tmp diff i else
17776: LD_ADDR_VAR 0 4
17780: PUSH
17781: LD_VAR 0 4
17785: PUSH
17786: LD_VAR 0 1
17790: DIFF
17791: ST_TO_ADDR
17792: GO 17828
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 81
17801: PUSH
17802: LD_INT 3
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PPUSH
17809: CALL_OW 69
17813: PPUSH
17814: LD_VAR 0 1
17818: PPUSH
17819: CALL_OW 74
17823: PPUSH
17824: CALL_OW 115
17828: GO 17762
17830: POP
17831: POP
// until not tmp ;
17832: LD_VAR 0 4
17836: NOT
17837: IFFALSE 17745
// if firstAttack then
17839: LD_EXP 28
17843: IFFALSE 17853
// firstAttack := false ;
17845: LD_ADDR_EXP 28
17849: PUSH
17850: LD_INT 0
17852: ST_TO_ADDR
// end ;
17853: PPOPN 5
17855: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17856: LD_EXP 23
17860: NOT
17861: IFFALSE 17870
17863: PUSH
17864: LD_EXP 32
17868: NOT
17869: AND
17870: IFFALSE 17878
17872: PUSH
17873: LD_EXP 3
17877: AND
17878: IFFALSE 17887
17880: PUSH
17881: LD_EXP 27
17885: NOT
17886: AND
17887: IFFALSE 18804
17889: GO 17891
17891: DISABLE
17892: LD_INT 0
17894: PPUSH
17895: PPUSH
17896: PPUSH
17897: PPUSH
// begin enable ;
17898: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17899: LD_ADDR_VAR 0 1
17903: PUSH
17904: DOUBLE
17905: LD_INT 1
17907: DEC
17908: ST_TO_ADDR
17909: LD_INT 1
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: LD_INT 2
17917: PUSH
17918: LD_INT 3
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: PUSH
17927: LD_OWVAR 67
17931: ARRAY
17932: PUSH
17933: FOR_TO
17934: IFFALSE 18235
// begin InitHc ;
17936: CALL_OW 19
// InitVc ;
17940: CALL_OW 20
// uc_side := 3 ;
17944: LD_ADDR_OWVAR 20
17948: PUSH
17949: LD_INT 3
17951: ST_TO_ADDR
// uc_nation := 3 ;
17952: LD_ADDR_OWVAR 21
17956: PUSH
17957: LD_INT 3
17959: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17960: LD_INT 22
17962: PUSH
17963: LD_INT 23
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 1
17972: PPUSH
17973: LD_INT 2
17975: PPUSH
17976: CALL_OW 12
17980: ARRAY
17981: PPUSH
17982: LD_INT 1
17984: PPUSH
17985: LD_INT 1
17987: PPUSH
17988: LD_INT 44
17990: PUSH
17991: LD_INT 43
17993: PUSH
17994: LD_INT 42
17996: PUSH
17997: LD_INT 44
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 1
18008: PPUSH
18009: LD_INT 4
18011: PPUSH
18012: CALL_OW 12
18016: ARRAY
18017: PPUSH
18018: LD_INT 99
18020: PPUSH
18021: CALL 34708 0 5
// veh := CreateVehicle ;
18025: LD_ADDR_VAR 0 3
18029: PUSH
18030: CALL_OW 45
18034: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
18035: LD_VAR 0 3
18039: PPUSH
18040: LD_INT 5
18042: PPUSH
18043: LD_INT 3
18045: PPUSH
18046: LD_INT 2
18048: PPUSH
18049: LD_INT 0
18051: PPUSH
18052: CALL 70038 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18056: LD_ADDR_EXP 61
18060: PUSH
18061: LD_EXP 61
18065: PPUSH
18066: LD_EXP 61
18070: PUSH
18071: LD_INT 1
18073: PLUS
18074: PPUSH
18075: LD_VAR 0 3
18079: PPUSH
18080: CALL_OW 1
18084: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
18085: LD_INT 0
18087: PPUSH
18088: LD_INT 3
18090: PPUSH
18091: LD_OWVAR 67
18095: PPUSH
18096: CALL_OW 380
// un := CreateHuman ;
18100: LD_ADDR_VAR 0 2
18104: PUSH
18105: CALL_OW 44
18109: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18110: LD_VAR 0 2
18114: PPUSH
18115: LD_VAR 0 3
18119: PPUSH
18120: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18124: LD_ADDR_EXP 61
18128: PUSH
18129: LD_EXP 61
18133: PPUSH
18134: LD_EXP 61
18138: PUSH
18139: LD_INT 1
18141: PLUS
18142: PPUSH
18143: LD_VAR 0 2
18147: PPUSH
18148: CALL_OW 1
18152: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
18153: LD_VAR 0 2
18157: PPUSH
18158: LD_INT 23
18160: PPUSH
18161: LD_INT 7
18163: PPUSH
18164: CALL_OW 111
// wait ( 0 0$2 ) ;
18168: LD_INT 70
18170: PPUSH
18171: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18175: LD_ADDR_VAR 0 4
18179: PUSH
18180: LD_VAR 0 4
18184: PPUSH
18185: LD_VAR 0 4
18189: PUSH
18190: LD_INT 1
18192: PLUS
18193: PPUSH
18194: LD_VAR 0 3
18198: PPUSH
18199: CALL_OW 1
18203: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18204: LD_ADDR_VAR 0 4
18208: PUSH
18209: LD_VAR 0 4
18213: PPUSH
18214: LD_VAR 0 4
18218: PUSH
18219: LD_INT 1
18221: PLUS
18222: PPUSH
18223: LD_VAR 0 2
18227: PPUSH
18228: CALL_OW 1
18232: ST_TO_ADDR
// end ;
18233: GO 17933
18235: POP
18236: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18237: LD_ADDR_VAR 0 1
18241: PUSH
18242: DOUBLE
18243: LD_INT 1
18245: DEC
18246: ST_TO_ADDR
18247: LD_INT 2
18249: PUSH
18250: LD_INT 3
18252: PUSH
18253: LD_INT 3
18255: PUSH
18256: LD_INT 4
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: PUSH
18265: LD_OWVAR 67
18269: ARRAY
18270: PUSH
18271: FOR_TO
18272: IFFALSE 18581
// begin InitHc ;
18274: CALL_OW 19
// InitVc ;
18278: CALL_OW 20
// uc_side := 3 ;
18282: LD_ADDR_OWVAR 20
18286: PUSH
18287: LD_INT 3
18289: ST_TO_ADDR
// uc_nation := 3 ;
18290: LD_ADDR_OWVAR 21
18294: PUSH
18295: LD_INT 3
18297: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18298: LD_INT 22
18300: PUSH
18301: LD_INT 23
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 1
18310: PPUSH
18311: LD_INT 2
18313: PPUSH
18314: CALL_OW 12
18318: ARRAY
18319: PPUSH
18320: LD_INT 1
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: LD_INT 44
18328: PUSH
18329: LD_INT 45
18331: PUSH
18332: LD_INT 43
18334: PUSH
18335: LD_INT 42
18337: PUSH
18338: LD_INT 44
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PPUSH
18351: LD_INT 5
18353: PPUSH
18354: CALL_OW 12
18358: ARRAY
18359: PPUSH
18360: LD_INT 99
18362: PPUSH
18363: CALL 34708 0 5
// veh := CreateVehicle ;
18367: LD_ADDR_VAR 0 3
18371: PUSH
18372: CALL_OW 45
18376: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18377: LD_VAR 0 3
18381: PPUSH
18382: LD_INT 127
18384: PPUSH
18385: LD_INT 243
18387: PPUSH
18388: LD_INT 0
18390: PPUSH
18391: LD_INT 0
18393: PPUSH
18394: CALL 70038 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18398: LD_ADDR_EXP 61
18402: PUSH
18403: LD_EXP 61
18407: PPUSH
18408: LD_EXP 61
18412: PUSH
18413: LD_INT 1
18415: PLUS
18416: PPUSH
18417: LD_VAR 0 3
18421: PPUSH
18422: CALL_OW 1
18426: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18427: LD_INT 0
18429: PPUSH
18430: LD_INT 3
18432: PPUSH
18433: LD_OWVAR 67
18437: PUSH
18438: LD_INT 2
18440: PLUS
18441: PPUSH
18442: CALL_OW 380
// un := CreateHuman ;
18446: LD_ADDR_VAR 0 2
18450: PUSH
18451: CALL_OW 44
18455: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18456: LD_VAR 0 2
18460: PPUSH
18461: LD_VAR 0 3
18465: PPUSH
18466: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18470: LD_ADDR_EXP 61
18474: PUSH
18475: LD_EXP 61
18479: PPUSH
18480: LD_EXP 61
18484: PUSH
18485: LD_INT 1
18487: PLUS
18488: PPUSH
18489: LD_VAR 0 2
18493: PPUSH
18494: CALL_OW 1
18498: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18499: LD_VAR 0 2
18503: PPUSH
18504: LD_INT 130
18506: PPUSH
18507: LD_INT 233
18509: PPUSH
18510: CALL_OW 111
// wait ( 0 0$2 ) ;
18514: LD_INT 70
18516: PPUSH
18517: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18521: LD_ADDR_VAR 0 4
18525: PUSH
18526: LD_VAR 0 4
18530: PPUSH
18531: LD_VAR 0 4
18535: PUSH
18536: LD_INT 1
18538: PLUS
18539: PPUSH
18540: LD_VAR 0 3
18544: PPUSH
18545: CALL_OW 1
18549: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18550: LD_ADDR_VAR 0 4
18554: PUSH
18555: LD_VAR 0 4
18559: PPUSH
18560: LD_VAR 0 4
18564: PUSH
18565: LD_INT 1
18567: PLUS
18568: PPUSH
18569: LD_VAR 0 2
18573: PPUSH
18574: CALL_OW 1
18578: ST_TO_ADDR
// end ;
18579: GO 18271
18581: POP
18582: POP
// for i in tmp do
18583: LD_ADDR_VAR 0 1
18587: PUSH
18588: LD_VAR 0 4
18592: PUSH
18593: FOR_IN
18594: IFFALSE 18708
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_INT 130
18603: PUSH
18604: LD_INT 229
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 137
18613: PUSH
18614: LD_INT 216
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 142
18623: PUSH
18624: LD_INT 194
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 140
18633: PUSH
18634: LD_INT 169
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 146
18643: PUSH
18644: LD_INT 162
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 174
18653: PUSH
18654: LD_INT 161
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 158
18663: PUSH
18664: LD_INT 134
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 136
18673: PUSH
18674: LD_INT 107
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 115
18683: PUSH
18684: LD_INT 89
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: PPUSH
18702: CALL 70644 0 2
18706: GO 18593
18708: POP
18709: POP
// repeat wait ( 0 0$2 ) ;
18710: LD_INT 70
18712: PPUSH
18713: CALL_OW 67
// for i in tmp do
18717: LD_ADDR_VAR 0 1
18721: PUSH
18722: LD_VAR 0 4
18726: PUSH
18727: FOR_IN
18728: IFFALSE 18795
// if IsDead ( i ) then
18730: LD_VAR 0 1
18734: PPUSH
18735: CALL_OW 301
18739: IFFALSE 18759
// tmp := tmp diff i else
18741: LD_ADDR_VAR 0 4
18745: PUSH
18746: LD_VAR 0 4
18750: PUSH
18751: LD_VAR 0 1
18755: DIFF
18756: ST_TO_ADDR
18757: GO 18793
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_INT 81
18766: PUSH
18767: LD_INT 3
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PPUSH
18774: CALL_OW 69
18778: PPUSH
18779: LD_VAR 0 1
18783: PPUSH
18784: CALL_OW 74
18788: PPUSH
18789: CALL_OW 115
18793: GO 18727
18795: POP
18796: POP
// until not tmp ;
18797: LD_VAR 0 4
18801: NOT
18802: IFFALSE 18710
// end ;
18804: PPOPN 4
18806: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18807: LD_EXP 6
18811: IFFALSE 19270
18813: GO 18815
18815: DISABLE
18816: LD_INT 0
18818: PPUSH
18819: PPUSH
18820: PPUSH
18821: PPUSH
// begin wait ( 3 3$00 ) ;
18822: LD_INT 6300
18824: PPUSH
18825: CALL_OW 67
// for i := 1 to 3 do
18829: LD_ADDR_VAR 0 1
18833: PUSH
18834: DOUBLE
18835: LD_INT 1
18837: DEC
18838: ST_TO_ADDR
18839: LD_INT 3
18841: PUSH
18842: FOR_TO
18843: IFFALSE 19142
// begin InitHc ;
18845: CALL_OW 19
// InitVc ;
18849: CALL_OW 20
// uc_side := 3 ;
18853: LD_ADDR_OWVAR 20
18857: PUSH
18858: LD_INT 3
18860: ST_TO_ADDR
// uc_nation := 3 ;
18861: LD_ADDR_OWVAR 21
18865: PUSH
18866: LD_INT 3
18868: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18869: LD_INT 22
18871: PUSH
18872: LD_INT 23
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: PPUSH
18882: LD_INT 2
18884: PPUSH
18885: CALL_OW 12
18889: ARRAY
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: LD_INT 1
18896: PPUSH
18897: LD_INT 44
18899: PUSH
18900: LD_INT 43
18902: PUSH
18903: LD_INT 42
18905: PUSH
18906: LD_INT 44
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 1
18917: PPUSH
18918: LD_INT 4
18920: PPUSH
18921: CALL_OW 12
18925: ARRAY
18926: PPUSH
18927: LD_INT 99
18929: PPUSH
18930: CALL 34708 0 5
// veh := CreateVehicle ;
18934: LD_ADDR_VAR 0 3
18938: PUSH
18939: CALL_OW 45
18943: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18944: LD_VAR 0 3
18948: PPUSH
18949: LD_INT 293
18951: PPUSH
18952: LD_INT 246
18954: PPUSH
18955: LD_INT 5
18957: PPUSH
18958: LD_INT 0
18960: PPUSH
18961: CALL 70038 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18965: LD_ADDR_EXP 61
18969: PUSH
18970: LD_EXP 61
18974: PPUSH
18975: LD_EXP 61
18979: PUSH
18980: LD_INT 1
18982: PLUS
18983: PPUSH
18984: LD_VAR 0 3
18988: PPUSH
18989: CALL_OW 1
18993: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18994: LD_INT 0
18996: PPUSH
18997: LD_INT 3
18999: PPUSH
19000: LD_INT 3
19002: PPUSH
19003: CALL_OW 380
// un := CreateHuman ;
19007: LD_ADDR_VAR 0 2
19011: PUSH
19012: CALL_OW 44
19016: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
19017: LD_VAR 0 2
19021: PPUSH
19022: LD_VAR 0 3
19026: PPUSH
19027: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
19031: LD_ADDR_EXP 61
19035: PUSH
19036: LD_EXP 61
19040: PPUSH
19041: LD_EXP 61
19045: PUSH
19046: LD_INT 1
19048: PLUS
19049: PPUSH
19050: LD_VAR 0 2
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
19060: LD_VAR 0 2
19064: PPUSH
19065: LD_INT 273
19067: PPUSH
19068: LD_INT 227
19070: PPUSH
19071: CALL_OW 111
// wait ( 0 0$2 ) ;
19075: LD_INT 70
19077: PPUSH
19078: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
19082: LD_ADDR_VAR 0 4
19086: PUSH
19087: LD_VAR 0 4
19091: PPUSH
19092: LD_VAR 0 4
19096: PUSH
19097: LD_INT 1
19099: PLUS
19100: PPUSH
19101: LD_VAR 0 3
19105: PPUSH
19106: CALL_OW 1
19110: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
19111: LD_ADDR_VAR 0 4
19115: PUSH
19116: LD_VAR 0 4
19120: PPUSH
19121: LD_VAR 0 4
19125: PUSH
19126: LD_INT 1
19128: PLUS
19129: PPUSH
19130: LD_VAR 0 2
19134: PPUSH
19135: CALL_OW 1
19139: ST_TO_ADDR
// end ;
19140: GO 18842
19142: POP
19143: POP
// for i in tmp do
19144: LD_ADDR_VAR 0 1
19148: PUSH
19149: LD_VAR 0 4
19153: PUSH
19154: FOR_IN
19155: IFFALSE 19174
// ComAgressiveMove ( i , 330 , 231 ) ;
19157: LD_VAR 0 1
19161: PPUSH
19162: LD_INT 330
19164: PPUSH
19165: LD_INT 231
19167: PPUSH
19168: CALL_OW 114
19172: GO 19154
19174: POP
19175: POP
// repeat wait ( 0 0$2 ) ;
19176: LD_INT 70
19178: PPUSH
19179: CALL_OW 67
// for i in tmp do
19183: LD_ADDR_VAR 0 1
19187: PUSH
19188: LD_VAR 0 4
19192: PUSH
19193: FOR_IN
19194: IFFALSE 19261
// if IsDead ( i ) then
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 301
19205: IFFALSE 19225
// tmp := tmp diff i else
19207: LD_ADDR_VAR 0 4
19211: PUSH
19212: LD_VAR 0 4
19216: PUSH
19217: LD_VAR 0 1
19221: DIFF
19222: ST_TO_ADDR
19223: GO 19259
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19225: LD_VAR 0 1
19229: PPUSH
19230: LD_INT 81
19232: PUSH
19233: LD_INT 3
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PPUSH
19240: CALL_OW 69
19244: PPUSH
19245: LD_VAR 0 1
19249: PPUSH
19250: CALL_OW 74
19254: PPUSH
19255: CALL_OW 115
19259: GO 19193
19261: POP
19262: POP
// until not tmp ;
19263: LD_VAR 0 4
19267: NOT
19268: IFFALSE 19176
// end ;
19270: PPOPN 4
19272: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19273: LD_INT 3
19275: PUSH
19276: LD_INT 22
19278: PUSH
19279: LD_INT 2
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 32
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PPUSH
19304: CALL_OW 69
19308: IFFALSE 19392
19310: GO 19312
19312: DISABLE
19313: LD_INT 0
19315: PPUSH
// begin enable ;
19316: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19317: LD_ADDR_VAR 0 1
19321: PUSH
19322: LD_INT 3
19324: PUSH
19325: LD_INT 22
19327: PUSH
19328: LD_INT 2
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 32
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PPUSH
19353: CALL_OW 69
19357: PUSH
19358: FOR_IN
19359: IFFALSE 19390
// if GetFuel ( i ) < 3 then
19361: LD_VAR 0 1
19365: PPUSH
19366: CALL_OW 261
19370: PUSH
19371: LD_INT 3
19373: LESS
19374: IFFALSE 19388
// SetFuel ( i , 3 ) ;
19376: LD_VAR 0 1
19380: PPUSH
19381: LD_INT 3
19383: PPUSH
19384: CALL_OW 240
19388: GO 19358
19390: POP
19391: POP
// end ; end_of_file
19392: PPOPN 1
19394: END
// export function Action ; begin
19395: LD_INT 0
19397: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19398: LD_INT 2
19400: PPUSH
19401: LD_INT 4
19403: PPUSH
19404: CALL_OW 332
// Video ( true ) ;
19408: LD_INT 1
19410: PPUSH
19411: CALL 67850 0 1
// music_nat := 3 ;
19415: LD_ADDR_OWVAR 71
19419: PUSH
19420: LD_INT 3
19422: ST_TO_ADDR
// music_class := music_recon ;
19423: LD_ADDR_OWVAR 72
19427: PUSH
19428: LD_INT 3
19430: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19431: LD_INT 213
19433: PPUSH
19434: LD_INT 89
19436: PPUSH
19437: CALL_OW 86
// if Kaia and Olaf then
19441: LD_EXP 39
19445: IFFALSE 19453
19447: PUSH
19448: LD_EXP 43
19452: AND
19453: IFFALSE 19459
// SceneKaiaWithOlaf ;
19455: CALL 19539 0 0
// if Givi and Kamil then
19459: LD_EXP 35
19463: IFFALSE 19471
19465: PUSH
19466: LD_EXP 38
19470: AND
19471: IFFALSE 19477
// SceneWithGiviAndKamil ;
19473: CALL 20110 0 0
// tick := 0 ;
19477: LD_ADDR_OWVAR 1
19481: PUSH
19482: LD_INT 0
19484: ST_TO_ADDR
// wait ( 3 ) ;
19485: LD_INT 3
19487: PPUSH
19488: CALL_OW 67
// Video ( false ) ;
19492: LD_INT 0
19494: PPUSH
19495: CALL 67850 0 1
// ChangeMissionObjectives ( M1 ) ;
19499: LD_STRING M1
19501: PPUSH
19502: CALL_OW 337
// music_nat := music_auto ;
19506: LD_ADDR_OWVAR 71
19510: PUSH
19511: LD_INT 0
19513: ST_TO_ADDR
// music_class := music_auto ;
19514: LD_ADDR_OWVAR 72
19518: PUSH
19519: LD_INT 0
19521: ST_TO_ADDR
// SaveForQuickRestart ;
19522: CALL_OW 22
// gameActive := true ;
19526: LD_ADDR_EXP 31
19530: PUSH
19531: LD_INT 1
19533: ST_TO_ADDR
// end ;
19534: LD_VAR 0 1
19538: RET
// export function SceneKaiaWithOlaf ; begin
19539: LD_INT 0
19541: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19542: LD_INT 22
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 30
19554: PUSH
19555: LD_INT 3
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 69
19570: PPUSH
19571: LD_INT 14
19573: PPUSH
19574: LD_INT 1
19576: PPUSH
19577: LD_INT 1
19579: PPUSH
19580: LD_INT 26
19582: PPUSH
19583: CALL_OW 125
// wait ( 0 0$1 ) ;
19587: LD_INT 35
19589: PPUSH
19590: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19594: LD_EXP 39
19598: PPUSH
19599: LD_STRING DK-Mem-1
19601: PPUSH
19602: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19606: LD_EXP 39
19610: PPUSH
19611: LD_STRING DK-Mem-2
19613: PPUSH
19614: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19618: LD_EXP 43
19622: PPUSH
19623: LD_STRING DO-Mem-3
19625: PPUSH
19626: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19630: LD_EXP 39
19634: PPUSH
19635: LD_STRING DK-Mem-4
19637: PPUSH
19638: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19642: LD_EXP 43
19646: PPUSH
19647: LD_STRING DO-Mem-5
19649: PPUSH
19650: CALL_OW 88
// wait ( 0 0$2 ) ;
19654: LD_INT 70
19656: PPUSH
19657: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19661: LD_INT 22
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 30
19673: PUSH
19674: LD_INT 3
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PPUSH
19685: CALL_OW 69
19689: PPUSH
19690: LD_INT 90
19692: PPUSH
19693: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19697: LD_EXP 43
19701: PPUSH
19702: LD_STRING DO-Mem-6
19704: PPUSH
19705: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19709: LD_EXP 39
19713: PPUSH
19714: LD_STRING DK-Mem-7
19716: PPUSH
19717: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19721: LD_EXP 34
19725: PPUSH
19726: LD_EXP 39
19730: PPUSH
19731: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19735: LD_EXP 34
19739: PPUSH
19740: LD_STRING DH-Mem-8
19742: PPUSH
19743: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19747: LD_EXP 39
19751: PUSH
19752: LD_EXP 43
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PPUSH
19761: LD_EXP 34
19765: PPUSH
19766: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19770: LD_EXP 43
19774: PPUSH
19775: LD_STRING DO-Mem-9
19777: PPUSH
19778: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19782: LD_EXP 43
19786: PPUSH
19787: LD_STRING DO-Mem-10
19789: PPUSH
19790: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19794: LD_EXP 43
19798: PPUSH
19799: LD_STRING DO-Mem-11
19801: PPUSH
19802: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19806: LD_EXP 43
19810: PPUSH
19811: LD_STRING DO-Mem-12
19813: PPUSH
19814: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19818: LD_EXP 39
19822: PPUSH
19823: LD_STRING DK-Mem-13
19825: PPUSH
19826: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19830: LD_EXP 39
19834: PPUSH
19835: LD_STRING DK-Mem-14
19837: PPUSH
19838: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19842: LD_EXP 39
19846: PPUSH
19847: LD_STRING DK-Mem-15
19849: PPUSH
19850: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19854: LD_EXP 39
19858: PPUSH
19859: LD_STRING DK-Mem-16
19861: PPUSH
19862: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19866: LD_EXP 39
19870: PPUSH
19871: LD_STRING DK-Mem-17
19873: PPUSH
19874: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19878: LD_EXP 43
19882: PPUSH
19883: LD_EXP 39
19887: PPUSH
19888: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19892: LD_EXP 43
19896: PPUSH
19897: LD_STRING DO-Mem-18
19899: PPUSH
19900: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19904: LD_EXP 39
19908: PPUSH
19909: LD_EXP 43
19913: PPUSH
19914: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19918: LD_EXP 39
19922: PPUSH
19923: LD_STRING DK-Mem-19
19925: PPUSH
19926: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19930: LD_EXP 43
19934: PPUSH
19935: LD_INT 214
19937: PPUSH
19938: LD_INT 86
19940: PPUSH
19941: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19945: LD_EXP 43
19949: PPUSH
19950: LD_EXP 39
19954: PPUSH
19955: CALL_OW 179
// if Givi then
19959: LD_EXP 35
19963: IFFALSE 19994
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19965: LD_EXP 35
19969: PPUSH
19970: LD_INT 217
19972: PPUSH
19973: LD_INT 86
19975: PPUSH
19976: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19980: LD_EXP 35
19984: PPUSH
19985: LD_EXP 34
19989: PPUSH
19990: CALL_OW 179
// end ; if Kamil then
19994: LD_EXP 38
19998: IFFALSE 20038
// begin ComExit ( Kamil ) ;
20000: LD_EXP 38
20004: PPUSH
20005: CALL 68276 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
20009: LD_EXP 38
20013: PPUSH
20014: LD_INT 212
20016: PPUSH
20017: LD_INT 86
20019: PPUSH
20020: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
20024: LD_EXP 38
20028: PPUSH
20029: LD_EXP 34
20033: PPUSH
20034: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
20038: LD_INT 70
20040: PPUSH
20041: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
20045: LD_EXP 34
20049: PPUSH
20050: LD_STRING DH-Mem-20
20052: PPUSH
20053: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
20057: LD_EXP 43
20061: PPUSH
20062: LD_INT 215
20064: PPUSH
20065: LD_INT 87
20067: PPUSH
20068: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
20072: LD_EXP 43
20076: PPUSH
20077: LD_EXP 39
20081: PPUSH
20082: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
20086: LD_EXP 39
20090: PPUSH
20091: LD_STRING DK-Mem-21
20093: PPUSH
20094: CALL_OW 88
// wait ( 0 0$2 ) ;
20098: LD_INT 70
20100: PPUSH
20101: CALL_OW 67
// end ;
20105: LD_VAR 0 1
20109: RET
// export function SceneWithGiviAndKamil ; var p ; begin
20110: LD_INT 0
20112: PPUSH
20113: PPUSH
// if Markov then
20114: LD_EXP 41
20118: IFFALSE 20238
// begin p := 0 ;
20120: LD_ADDR_VAR 0 2
20124: PUSH
20125: LD_INT 0
20127: ST_TO_ADDR
// if IsInUnit ( Markov ) then
20128: LD_EXP 41
20132: PPUSH
20133: CALL_OW 310
20137: IFFALSE 20148
// ComExit ( Markov ) ;
20139: LD_EXP 41
20143: PPUSH
20144: CALL 68276 0 1
// wait ( 0 0$1 ) ;
20148: LD_INT 35
20150: PPUSH
20151: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
20155: LD_EXP 41
20159: PPUSH
20160: LD_INT 212
20162: PPUSH
20163: LD_INT 88
20165: PPUSH
20166: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20170: LD_INT 35
20172: PPUSH
20173: CALL_OW 67
// p := Inc ( p ) ;
20177: LD_ADDR_VAR 0 2
20181: PUSH
20182: LD_VAR 0 2
20186: PPUSH
20187: CALL 69251 0 1
20191: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20192: LD_EXP 41
20196: PPUSH
20197: LD_EXP 34
20201: PPUSH
20202: CALL_OW 296
20206: PUSH
20207: LD_INT 6
20209: LESS
20210: IFTRUE 20222
20212: PUSH
20213: LD_VAR 0 2
20217: PUSH
20218: LD_INT 12
20220: GREATER
20221: OR
20222: IFFALSE 20170
// AddComTurnUnit ( Markov , Heike ) ;
20224: LD_EXP 41
20228: PPUSH
20229: LD_EXP 34
20233: PPUSH
20234: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20238: LD_EXP 35
20242: PPUSH
20243: LD_STRING DG-Obj-1
20245: PPUSH
20246: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20250: LD_EXP 38
20254: PPUSH
20255: LD_STRING DKam-Obj-2
20257: PPUSH
20258: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20262: LD_EXP 34
20266: PPUSH
20267: LD_EXP 38
20271: PPUSH
20272: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20276: LD_EXP 38
20280: PPUSH
20281: LD_STRING DKam-Obj-3
20283: PPUSH
20284: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20288: LD_EXP 41
20292: PPUSH
20293: LD_STRING DMar-Obj-4
20295: PPUSH
20296: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20300: LD_EXP 38
20304: PPUSH
20305: LD_STRING DKam-Obj-6
20307: PPUSH
20308: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20312: LD_EXP 38
20316: PPUSH
20317: LD_STRING DKam-Obj-7
20319: PPUSH
20320: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20324: LD_EXP 38
20328: PPUSH
20329: LD_STRING DKam-Obj-8
20331: PPUSH
20332: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20336: LD_EXP 34
20340: PPUSH
20341: LD_STRING DH-Obj-9
20343: PPUSH
20344: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20348: LD_EXP 38
20352: PPUSH
20353: LD_STRING DKam-Obj-10
20355: PPUSH
20356: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20360: LD_EXP 38
20364: PPUSH
20365: LD_STRING DKam-Obj-11
20367: PPUSH
20368: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20372: LD_EXP 41
20376: PPUSH
20377: LD_STRING DMar-Obj-12
20379: PPUSH
20380: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20384: LD_EXP 41
20388: PPUSH
20389: LD_STRING DMar-Obj-13
20391: PPUSH
20392: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20396: LD_EXP 41
20400: PPUSH
20401: LD_STRING DMar-Obj-14
20403: PPUSH
20404: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20408: LD_EXP 43
20412: PPUSH
20413: LD_STRING DO-Obj-15
20415: PPUSH
20416: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20420: LD_EXP 43
20424: PPUSH
20425: LD_STRING DO-Obj-16
20427: PPUSH
20428: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20432: LD_EXP 34
20436: PPUSH
20437: LD_STRING DH-Obj-17
20439: PPUSH
20440: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20444: LD_EXP 43
20448: PPUSH
20449: LD_STRING DO-Obj-18
20451: PPUSH
20452: CALL_OW 88
// end ;
20456: LD_VAR 0 1
20460: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20461: LD_INT 34
20463: PUSH
20464: LD_INT 92
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: IFFALSE 20670
20477: GO 20479
20479: DISABLE
20480: LD_INT 0
20482: PPUSH
// begin wait ( 0 0$2 ) ;
20483: LD_INT 70
20485: PPUSH
20486: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20490: LD_INT 34
20492: PUSH
20493: LD_INT 92
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PPUSH
20500: CALL_OW 69
20504: PPUSH
20505: CALL_OW 87
// DialogueOn ;
20509: CALL_OW 6
// if Markov then
20513: LD_EXP 41
20517: IFFALSE 20545
// begin Say ( Markov , DMar-Grn-1 ) ;
20519: LD_EXP 41
20523: PPUSH
20524: LD_STRING DMar-Grn-1
20526: PPUSH
20527: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20531: LD_EXP 34
20535: PPUSH
20536: LD_STRING DH-Grn-2
20538: PPUSH
20539: CALL_OW 88
// end else
20543: GO 20644
// if heikeSecondSquad then
20545: LD_EXP 49
20549: IFFALSE 20644
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20551: LD_ADDR_VAR 0 1
20555: PUSH
20556: LD_EXP 49
20560: PUSH
20561: LD_INT 1
20563: PPUSH
20564: LD_EXP 49
20568: PPUSH
20569: CALL_OW 12
20573: ARRAY
20574: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20575: LD_VAR 0 1
20579: PPUSH
20580: CALL_OW 258
20584: PUSH
20585: LD_INT 1
20587: DOUBLE
20588: EQUAL
20589: IFTRUE 20593
20591: GO 20608
20593: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20594: LD_VAR 0 1
20598: PPUSH
20599: LD_STRING DArm-Grn-1
20601: PPUSH
20602: CALL_OW 88
20606: GO 20632
20608: LD_INT 2
20610: DOUBLE
20611: EQUAL
20612: IFTRUE 20616
20614: GO 20631
20616: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20617: LD_VAR 0 1
20621: PPUSH
20622: LD_STRING DArf-Grn-1
20624: PPUSH
20625: CALL_OW 88
20629: GO 20632
20631: POP
// Say ( Heike , DH-Grn-2 ) ;
20632: LD_EXP 34
20636: PPUSH
20637: LD_STRING DH-Grn-2
20639: PPUSH
20640: CALL_OW 88
// end ; DialogueOff ;
20644: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20648: LD_STRING MortarConstructed
20650: PPUSH
20651: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20655: LD_STRING SelfPropelledMortar
20657: PPUSH
20658: CALL_OW 339
// mortarConstructed := true ;
20662: LD_ADDR_EXP 15
20666: PUSH
20667: LD_INT 1
20669: ST_TO_ADDR
// end ;
20670: PPOPN 1
20672: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20673: LD_INT 2
20675: PPUSH
20676: LD_INT 8
20678: PPUSH
20679: CALL_OW 294
20683: IFFALSE 20826
20685: GO 20687
20687: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20688: LD_INT 200
20690: PPUSH
20691: LD_INT 162
20693: PPUSH
20694: LD_INT 2
20696: PPUSH
20697: LD_INT 6
20699: NEG
20700: PPUSH
20701: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20705: LD_INT 200
20707: PPUSH
20708: LD_INT 162
20710: PPUSH
20711: LD_INT 2
20713: PPUSH
20714: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20718: LD_INT 200
20720: PPUSH
20721: LD_INT 162
20723: PPUSH
20724: CALL_OW 84
// if not IsOk ( Kurt ) then
20728: LD_EXP 45
20732: PPUSH
20733: CALL_OW 302
20737: NOT
20738: IFFALSE 20742
// exit ;
20740: GO 20826
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20742: LD_EXP 45
20746: PPUSH
20747: LD_STRING DKs-Otpst-2-1
20749: PPUSH
20750: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20754: LD_EXP 39
20758: PPUSH
20759: LD_STRING DK-Otpst-2-2
20761: PPUSH
20762: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20766: LD_EXP 45
20770: PPUSH
20771: LD_STRING DKs-Otpst-2-3
20773: PPUSH
20774: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20778: LD_EXP 45
20782: PPUSH
20783: LD_STRING DKs-Otpst-2-4
20785: PPUSH
20786: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20790: LD_EXP 45
20794: PPUSH
20795: LD_STRING DKs-Otpst-2-5
20797: PPUSH
20798: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20802: LD_EXP 38
20806: PPUSH
20807: LD_STRING DKam-Otpst-2-6
20809: PPUSH
20810: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20814: LD_EXP 45
20818: PPUSH
20819: LD_STRING DKs-Otpst-2-7
20821: PPUSH
20822: CALL_OW 88
// end ;
20826: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20827: LD_INT 8
20829: PPUSH
20830: LD_INT 22
20832: PUSH
20833: LD_INT 3
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 70
20858: NOT
20859: IFFALSE 20868
20861: PUSH
20862: LD_EXP 3
20866: NOT
20867: AND
20868: IFFALSE 21118
20870: GO 20872
20872: DISABLE
20873: LD_INT 0
20875: PPUSH
// begin outpostDestroyed := true ;
20876: LD_ADDR_EXP 4
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20884: LD_INT 22
20886: PUSH
20887: LD_INT 2
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 34
20896: PUSH
20897: LD_INT 92
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 92
20906: PUSH
20907: LD_INT 195
20909: PUSH
20910: LD_INT 164
20912: PUSH
20913: LD_INT 12
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: PPUSH
20927: CALL_OW 69
20931: NOT
20932: IFFALSE 20936
// exit ;
20934: GO 21118
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20936: LD_EXP 35
20940: PPUSH
20941: CALL_OW 302
20945: NOT
20946: IFTRUE 20960
20948: PUSH
20949: LD_EXP 39
20953: PPUSH
20954: CALL_OW 302
20958: NOT
20959: OR
20960: IFFALSE 20964
// exit ;
20962: GO 21118
// Say ( Givi , DG-Otpst-1-1 ) ;
20964: LD_EXP 35
20968: PPUSH
20969: LD_STRING DG-Otpst-1-1
20971: PPUSH
20972: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20976: LD_EXP 39
20980: PPUSH
20981: LD_STRING DK-Otpst-1-2
20983: PPUSH
20984: CALL_OW 88
// if IsOk ( Markov ) then
20988: LD_EXP 41
20992: PPUSH
20993: CALL_OW 302
20997: IFFALSE 21025
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20999: LD_EXP 41
21003: PPUSH
21004: LD_STRING DMar-Otpst-1-3
21006: PPUSH
21007: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
21011: LD_EXP 41
21015: PPUSH
21016: LD_STRING DMar-Otpst-1-4
21018: PPUSH
21019: CALL_OW 88
// end else
21023: GO 21106
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
21025: LD_ADDR_VAR 0 1
21029: PUSH
21030: LD_EXP 49
21034: PUSH
21035: LD_INT 1
21037: PPUSH
21038: LD_EXP 49
21042: PPUSH
21043: CALL_OW 12
21047: ARRAY
21048: ST_TO_ADDR
// case GetSex ( random ) of 1 :
21049: LD_VAR 0 1
21053: PPUSH
21054: CALL_OW 258
21058: PUSH
21059: LD_INT 1
21061: DOUBLE
21062: EQUAL
21063: IFTRUE 21067
21065: GO 21082
21067: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
21068: LD_VAR 0 1
21072: PPUSH
21073: LD_STRING DArm-Otpst-1-a-3
21075: PPUSH
21076: CALL_OW 88
21080: GO 21106
21082: LD_INT 2
21084: DOUBLE
21085: EQUAL
21086: IFTRUE 21090
21088: GO 21105
21090: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
21091: LD_VAR 0 1
21095: PPUSH
21096: LD_STRING DArf-Otpst-1-a-3
21098: PPUSH
21099: CALL_OW 88
21103: GO 21106
21105: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
21106: LD_EXP 35
21110: PPUSH
21111: LD_STRING DG-Otpst-1-5
21113: PPUSH
21114: CALL_OW 88
// end ;
21118: PPOPN 1
21120: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
21121: LD_EXP 39
21125: PPUSH
21126: CALL_OW 256
21130: PUSH
21131: LD_INT 10
21133: LESS
21134: IFFALSE 21248
21136: GO 21138
21138: DISABLE
// begin DialogueOn ;
21139: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
21143: LD_EXP 39
21147: PPUSH
21148: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
21152: LD_EXP 39
21156: PPUSH
21157: LD_STRING DK-Dead-1
21159: PPUSH
21160: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
21164: LD_EXP 34
21168: PPUSH
21169: LD_STRING DH-Dead-2
21171: PPUSH
21172: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21176: LD_EXP 39
21180: PPUSH
21181: LD_STRING DK-Dead-3
21183: PPUSH
21184: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21188: LD_EXP 34
21192: PPUSH
21193: LD_STRING DH-Dead-4
21195: PPUSH
21196: CALL_OW 88
// if IsOk ( Mike ) then
21200: LD_EXP 36
21204: PPUSH
21205: CALL_OW 302
21209: IFFALSE 21235
// begin Say ( Mike , DM-Dead-5 ) ;
21211: LD_EXP 36
21215: PPUSH
21216: LD_STRING DM-Dead-5
21218: PPUSH
21219: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21223: LD_EXP 34
21227: PPUSH
21228: LD_STRING DH-Dead-6
21230: PPUSH
21231: CALL_OW 88
// end ; DialogueOff ;
21235: CALL_OW 7
// KillUnit ( Kaia ) ;
21239: LD_EXP 39
21243: PPUSH
21244: CALL_OW 66
// end ;
21248: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21249: LD_OWVAR 1
21253: PUSH
21254: LD_INT 31500
21256: GREATEREQUAL
21257: IFTRUE 21269
21259: PUSH
21260: LD_EXP 5
21264: PUSH
21265: LD_INT 5
21267: GREATER
21268: OR
21269: IFTRUE 21309
21271: PUSH
21272: LD_INT 22
21274: PUSH
21275: LD_INT 2
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 92
21284: PUSH
21285: LD_INT 103
21287: PUSH
21288: LD_INT 81
21290: PUSH
21291: LD_INT 20
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PPUSH
21304: CALL_OW 69
21308: OR
21309: IFFALSE 21749
21311: GO 21313
21313: DISABLE
21314: LD_INT 0
21316: PPUSH
21317: PPUSH
21318: PPUSH
// begin PrepareRolfSquad ;
21319: CALL 3551 0 0
// dep := HexInfo ( 86 , 54 ) ;
21323: LD_ADDR_VAR 0 3
21327: PUSH
21328: LD_INT 86
21330: PPUSH
21331: LD_INT 54
21333: PPUSH
21334: CALL_OW 428
21338: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21339: LD_VAR 0 3
21343: PPUSH
21344: CALL_OW 274
21348: PPUSH
21349: LD_INT 1
21351: PPUSH
21352: LD_INT 300
21354: PPUSH
21355: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21359: LD_VAR 0 3
21363: PPUSH
21364: CALL_OW 274
21368: PPUSH
21369: LD_INT 2
21371: PPUSH
21372: LD_INT 300
21374: PPUSH
21375: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21379: LD_EXP 51
21383: PPUSH
21384: LD_INT 79
21386: PPUSH
21387: LD_INT 52
21389: PPUSH
21390: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21394: LD_INT 35
21396: PPUSH
21397: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21401: LD_EXP 51
21405: PPUSH
21406: LD_INT 3
21408: PUSH
21409: LD_INT 60
21411: PUSH
21412: EMPTY
21413: LIST
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PPUSH
21419: CALL_OW 72
21423: PPUSH
21424: LD_INT 79
21426: PPUSH
21427: LD_INT 52
21429: PPUSH
21430: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21434: LD_INT 12
21436: PPUSH
21437: LD_INT 22
21439: PUSH
21440: LD_INT 3
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 21
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PPUSH
21461: CALL_OW 70
21465: NOT
21466: IFFALSE 21394
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21468: LD_ADDR_VAR 0 2
21472: PUSH
21473: LD_INT 12
21475: PPUSH
21476: LD_INT 21
21478: PUSH
21479: LD_INT 3
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PPUSH
21486: CALL_OW 70
21490: ST_TO_ADDR
// for i in tmp do
21491: LD_ADDR_VAR 0 1
21495: PUSH
21496: LD_VAR 0 2
21500: PUSH
21501: FOR_IN
21502: IFFALSE 21518
// SetSide ( i , 8 ) ;
21504: LD_VAR 0 1
21508: PPUSH
21509: LD_INT 8
21511: PPUSH
21512: CALL_OW 235
21516: GO 21501
21518: POP
21519: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21520: LD_INT 63
21522: PPUSH
21523: LD_INT 42
21525: PPUSH
21526: CALL_OW 428
21530: PPUSH
21531: LD_INT 320
21533: PPUSH
21534: CALL_OW 234
// wait ( 0 0$10 ) ;
21538: LD_INT 350
21540: PPUSH
21541: CALL_OW 67
// DialogueOn ;
21545: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21549: LD_INT 8
21551: PPUSH
21552: LD_INT 2
21554: PPUSH
21555: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21559: LD_INT 86
21561: PPUSH
21562: LD_INT 54
21564: PPUSH
21565: CALL_OW 428
21569: PPUSH
21570: LD_STRING antwerp
21572: PPUSH
21573: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21577: LD_EXP 47
21581: PPUSH
21582: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21586: LD_EXP 47
21590: PPUSH
21591: LD_STRING DRf-rast-1
21593: PPUSH
21594: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21598: LD_EXP 34
21602: PPUSH
21603: LD_STRING DH-rast-2
21605: PPUSH
21606: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21610: LD_EXP 47
21614: PPUSH
21615: LD_STRING DRf-rast-3
21617: PPUSH
21618: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21622: LD_EXP 47
21626: PPUSH
21627: LD_STRING DRf-rast-4
21629: PPUSH
21630: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21634: LD_EXP 47
21638: PPUSH
21639: LD_STRING DRf-rast-5
21641: PPUSH
21642: CALL_OW 94
// if IsOk ( Aviradze ) then
21646: LD_EXP 46
21650: PPUSH
21651: CALL_OW 302
21655: IFFALSE 21714
// begin CenterNowOnUnits ( Aviradze ) ;
21657: LD_EXP 46
21661: PPUSH
21662: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21666: LD_EXP 46
21670: PPUSH
21671: LD_STRING DA-rast-6
21673: PPUSH
21674: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21678: LD_EXP 34
21682: PPUSH
21683: LD_STRING DH-rast-7
21685: PPUSH
21686: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21690: LD_EXP 35
21694: PPUSH
21695: LD_STRING DG-rast-8
21697: PPUSH
21698: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21702: LD_EXP 35
21706: PPUSH
21707: LD_STRING DG-rast-9
21709: PPUSH
21710: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21714: LD_EXP 34
21718: PPUSH
21719: LD_STRING DH-rast-10
21721: PPUSH
21722: CALL_OW 88
// DialogueOff ;
21726: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21730: LD_STRING M2
21732: PPUSH
21733: CALL_OW 337
// bergkampfArrived := true ;
21737: LD_ADDR_EXP 3
21741: PUSH
21742: LD_INT 1
21744: ST_TO_ADDR
// PrepareRolfBase ;
21745: CALL 3882 0 0
// end ;
21749: PPOPN 3
21751: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21752: LD_INT 12
21754: PPUSH
21755: LD_INT 22
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PPUSH
21765: CALL_OW 70
21769: IFFALSE 21782
21771: PUSH
21772: LD_EXP 47
21776: PPUSH
21777: CALL_OW 302
21781: AND
21782: IFFALSE 21790
21784: PUSH
21785: LD_EXP 29
21789: AND
21790: IFFALSE 22350
21792: GO 21794
21794: DISABLE
21795: LD_INT 0
21797: PPUSH
// begin rolfScriptBase := false ;
21798: LD_ADDR_EXP 9
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// DialogueOn ;
21806: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21810: LD_EXP 47
21814: PPUSH
21815: CALL_OW 87
// if rolfSquad >= 10 then
21819: LD_EXP 51
21823: PUSH
21824: LD_INT 10
21826: GREATEREQUAL
21827: IFFALSE 22006
// begin linkedWithRolf := 2 ;
21829: LD_ADDR_EXP 12
21833: PUSH
21834: LD_INT 2
21836: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21837: LD_EXP 47
21841: PPUSH
21842: LD_STRING DRf-rast-11
21844: PPUSH
21845: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21849: LD_EXP 34
21853: PPUSH
21854: LD_STRING DH-rast-12
21856: PPUSH
21857: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21861: LD_EXP 47
21865: PPUSH
21866: LD_STRING DRf-rast-13
21868: PPUSH
21869: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21873: LD_EXP 34
21877: PPUSH
21878: LD_STRING DH-rast-14
21880: PPUSH
21881: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21885: LD_EXP 47
21889: PPUSH
21890: LD_STRING DRf-rast-15
21892: PPUSH
21893: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21897: LD_EXP 34
21901: PPUSH
21902: LD_STRING DH-rast-16
21904: PPUSH
21905: CALL_OW 88
// if IsOk ( Mike ) then
21909: LD_EXP 36
21913: PPUSH
21914: CALL_OW 302
21918: IFFALSE 21992
// begin Say ( Mike , DM-rast-17 ) ;
21920: LD_EXP 36
21924: PPUSH
21925: LD_STRING DM-rast-17
21927: PPUSH
21928: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21932: LD_EXP 34
21936: PPUSH
21937: LD_STRING DH-rast-18
21939: PPUSH
21940: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21944: LD_EXP 36
21948: PPUSH
21949: LD_STRING DM-rast-19
21951: PPUSH
21952: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21956: LD_EXP 34
21960: PPUSH
21961: LD_STRING DH-rast-20
21963: PPUSH
21964: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21968: LD_EXP 36
21972: PPUSH
21973: LD_STRING DM-rast-21
21975: PPUSH
21976: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21980: LD_EXP 34
21984: PPUSH
21985: LD_STRING DH-rast-22
21987: PPUSH
21988: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21992: LD_EXP 34
21996: PPUSH
21997: LD_STRING DH-rast-23
21999: PPUSH
22000: CALL_OW 88
// end else
22004: GO 22156
// begin linkedWithRolf := 1 ;
22006: LD_ADDR_EXP 12
22010: PUSH
22011: LD_INT 1
22013: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
22014: LD_EXP 47
22018: PPUSH
22019: LD_STRING DRf-rast-a-11
22021: PPUSH
22022: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
22026: LD_EXP 34
22030: PPUSH
22031: LD_STRING DH-rast-a-12
22033: PPUSH
22034: CALL_OW 88
// if IsOk ( Kurt ) then
22038: LD_EXP 45
22042: PPUSH
22043: CALL_OW 302
22047: IFFALSE 22144
// begin Say ( Kurt , DKs-rast-a-13 ) ;
22049: LD_EXP 45
22053: PPUSH
22054: LD_STRING DKs-rast-a-13
22056: PPUSH
22057: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
22061: LD_EXP 47
22065: PPUSH
22066: LD_STRING DRf-rast-a-14
22068: PPUSH
22069: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
22073: LD_EXP 47
22077: PPUSH
22078: LD_STRING DRf-rast-a-15
22080: PPUSH
22081: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
22085: LD_EXP 45
22089: PPUSH
22090: LD_STRING DKs-rast-a-16
22092: PPUSH
22093: CALL_OW 88
// if IsOk ( Givi ) then
22097: LD_EXP 35
22101: PPUSH
22102: CALL_OW 302
22106: IFFALSE 22144
// begin Say ( Givi , DG-rast-a-17 ) ;
22108: LD_EXP 35
22112: PPUSH
22113: LD_STRING DG-rast-a-17
22115: PPUSH
22116: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
22120: LD_EXP 35
22124: PPUSH
22125: LD_STRING DG-rast-a-18
22127: PPUSH
22128: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
22132: LD_EXP 45
22136: PPUSH
22137: LD_STRING DKs-rast-a-19
22139: PPUSH
22140: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
22144: LD_EXP 34
22148: PPUSH
22149: LD_STRING DH-rast-a-20
22151: PPUSH
22152: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
22156: LD_EXP 47
22160: PPUSH
22161: LD_STRING DRf-rast-24
22163: PPUSH
22164: CALL_OW 88
// if IsOk ( Aviradze ) then
22168: LD_EXP 46
22172: PPUSH
22173: CALL_OW 302
22177: IFFALSE 22277
// begin Say ( Aviradze , DA-rast-25 ) ;
22179: LD_EXP 46
22183: PPUSH
22184: LD_STRING DA-rast-25
22186: PPUSH
22187: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22191: LD_EXP 34
22195: PPUSH
22196: LD_STRING DH-rast-26
22198: PPUSH
22199: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22203: LD_EXP 46
22207: PPUSH
22208: LD_STRING DA-rast-27
22210: PPUSH
22211: CALL_OW 88
// if IsOk ( Markov ) then
22215: LD_EXP 41
22219: PPUSH
22220: CALL_OW 302
22224: IFFALSE 22252
// begin Say ( Markov , DMar-rast-28 ) ;
22226: LD_EXP 41
22230: PPUSH
22231: LD_STRING DMar-rast-28
22233: PPUSH
22234: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22238: LD_EXP 41
22242: PPUSH
22243: LD_STRING DMar-rast-29
22245: PPUSH
22246: CALL_OW 88
// end else
22250: GO 22275
// if IsOk ( Sophia ) then
22252: LD_EXP 40
22256: PPUSH
22257: CALL_OW 302
22261: IFFALSE 22275
// begin Say ( Sophia , DS-rast-28 ) ;
22263: LD_EXP 40
22267: PPUSH
22268: LD_STRING DS-rast-28
22270: PPUSH
22271: CALL_OW 88
// end ; end else
22275: GO 22300
// if IsOk ( Sophia ) then
22277: LD_EXP 40
22281: PPUSH
22282: CALL_OW 302
22286: IFFALSE 22300
// Say ( Sophia , DS-rast-29 ) ;
22288: LD_EXP 40
22292: PPUSH
22293: LD_STRING DS-rast-29
22295: PPUSH
22296: CALL_OW 88
// DialogueOff ;
22300: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22304: LD_STRING M3
22306: PPUSH
22307: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22311: LD_ADDR_VAR 0 1
22315: PUSH
22316: LD_INT 22
22318: PUSH
22319: LD_INT 8
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PPUSH
22326: CALL_OW 69
22330: PUSH
22331: FOR_IN
22332: IFFALSE 22348
// SetSide ( i , 2 ) ;
22334: LD_VAR 0 1
22338: PPUSH
22339: LD_INT 2
22341: PPUSH
22342: CALL_OW 235
22346: GO 22331
22348: POP
22349: POP
// end ;
22350: PPOPN 1
22352: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22353: LD_EXP 23
22357: IFFALSE 22366
22359: PUSH
22360: LD_EXP 12
22364: NOT
22365: AND
22366: IFFALSE 22374
22368: PUSH
22369: LD_EXP 29
22373: AND
22374: IFFALSE 22465
22376: GO 22378
22378: DISABLE
22379: LD_INT 0
22381: PPUSH
// begin canRolfJoin := false ;
22382: LD_ADDR_EXP 29
22386: PUSH
22387: LD_INT 0
22389: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22390: LD_STRING M3
22392: PPUSH
22393: CALL_OW 337
// for i in rolfSquad do
22397: LD_ADDR_VAR 0 1
22401: PUSH
22402: LD_EXP 51
22406: PUSH
22407: FOR_IN
22408: IFFALSE 22463
// begin ComExit ( i ) ;
22410: LD_VAR 0 1
22414: PPUSH
22415: CALL 68276 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22419: LD_VAR 0 1
22423: PPUSH
22424: LD_INT 147
22426: PPUSH
22427: LD_INT 162
22429: PPUSH
22430: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22434: LD_VAR 0 1
22438: PPUSH
22439: LD_INT 1050
22441: PPUSH
22442: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22446: LD_VAR 0 1
22450: PPUSH
22451: LD_INT 103
22453: PPUSH
22454: LD_INT 162
22456: PPUSH
22457: CALL_OW 174
// end ;
22461: GO 22407
22463: POP
22464: POP
// end ;
22465: PPOPN 1
22467: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22468: LD_EXP 3
22472: IFFALSE 22489
22474: PUSH
22475: LD_EXP 47
22479: PPUSH
22480: CALL_OW 256
22484: PUSH
22485: LD_INT 400
22487: LESS
22488: AND
22489: IFFALSE 22498
22491: PUSH
22492: LD_EXP 12
22496: NOT
22497: AND
22498: IFFALSE 22506
22500: PUSH
22501: LD_EXP 29
22505: AND
22506: IFFALSE 22780
22508: GO 22510
22510: DISABLE
22511: LD_INT 0
22513: PPUSH
// begin DialogueOn ;
22514: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22518: LD_EXP 47
22522: PPUSH
22523: LD_STRING DRf-rast-f-11
22525: PPUSH
22526: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22530: LD_EXP 47
22534: PPUSH
22535: LD_STRING DRf-rast-f-12
22537: PPUSH
22538: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22542: LD_EXP 47
22546: PPUSH
22547: LD_STRING DRf-rast-f-13
22549: PPUSH
22550: CALL_OW 94
// DialogueOff ;
22554: CALL_OW 7
// KillUnit ( Rolf ) ;
22558: LD_EXP 47
22562: PPUSH
22563: CALL_OW 66
// wait ( 0 0$1 ) ;
22567: LD_INT 35
22569: PPUSH
22570: CALL_OW 67
// if not IsOk ( Givi ) then
22574: LD_EXP 35
22578: PPUSH
22579: CALL_OW 302
22583: NOT
22584: IFFALSE 22588
// exit ;
22586: GO 22780
// DialogueOn ;
22588: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22592: LD_EXP 35
22596: PPUSH
22597: LD_STRING DG-rast-f-14
22599: PPUSH
22600: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22604: LD_EXP 35
22608: PPUSH
22609: LD_STRING DG-rast-f-15
22611: PPUSH
22612: CALL_OW 88
// if IsOk ( Kaia ) then
22616: LD_EXP 39
22620: PPUSH
22621: CALL_OW 302
22625: IFFALSE 22641
// Say ( Kaia , DK-rast-f-16 ) else
22627: LD_EXP 39
22631: PPUSH
22632: LD_STRING DK-rast-f-16
22634: PPUSH
22635: CALL_OW 88
22639: GO 22728
// if heikeSecondSquad then
22641: LD_EXP 49
22645: IFFALSE 22728
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22647: LD_ADDR_VAR 0 1
22651: PUSH
22652: LD_EXP 49
22656: PUSH
22657: LD_INT 1
22659: PPUSH
22660: LD_EXP 49
22664: PPUSH
22665: CALL_OW 12
22669: ARRAY
22670: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22671: LD_VAR 0 1
22675: PPUSH
22676: CALL_OW 258
22680: PUSH
22681: LD_INT 1
22683: DOUBLE
22684: EQUAL
22685: IFTRUE 22689
22687: GO 22704
22689: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22690: LD_VAR 0 1
22694: PPUSH
22695: LD_STRING DArm-rast-f-a-16
22697: PPUSH
22698: CALL_OW 88
22702: GO 22728
22704: LD_INT 2
22706: DOUBLE
22707: EQUAL
22708: IFTRUE 22712
22710: GO 22727
22712: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22713: LD_VAR 0 1
22717: PPUSH
22718: LD_STRING DArf-rast-f-a-16
22720: PPUSH
22721: CALL_OW 88
22725: GO 22728
22727: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22728: LD_EXP 35
22732: PPUSH
22733: LD_STRING DG-rast-f-17
22735: PPUSH
22736: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22740: LD_EXP 35
22744: PPUSH
22745: LD_STRING DG-rast-f-18
22747: PPUSH
22748: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22752: LD_EXP 35
22756: PPUSH
22757: LD_STRING DG-rast-f-19
22759: PPUSH
22760: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22764: LD_EXP 35
22768: PPUSH
22769: LD_STRING DG-rast-f-20
22771: PPUSH
22772: CALL_OW 88
// DialogueOff ;
22776: CALL_OW 7
// end ;
22780: PPOPN 1
22782: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22783: LD_EXP 31
22787: IFFALSE 22801
22789: PUSH
22790: LD_INT 2
22792: PPUSH
22793: LD_INT 10
22795: PPUSH
22796: CALL_OW 294
22800: AND
22801: IFFALSE 22874
22803: GO 22805
22805: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22806: LD_EXP 35
22810: PPUSH
22811: LD_STRING DG-Len-1
22813: PPUSH
22814: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22818: LD_EXP 45
22822: PPUSH
22823: LD_STRING DKs-Len-2
22825: PPUSH
22826: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22830: LD_EXP 45
22834: PPUSH
22835: LD_STRING DKs-Len-3
22837: PPUSH
22838: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22842: LD_EXP 34
22846: PPUSH
22847: LD_STRING DH-Len-4
22849: PPUSH
22850: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22854: LD_EXP 39
22858: PPUSH
22859: LD_STRING DK-Len-5
22861: PPUSH
22862: CALL_OW 88
// leninSpotted := true ;
22866: LD_ADDR_EXP 14
22870: PUSH
22871: LD_INT 1
22873: ST_TO_ADDR
// end ;
22874: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22875: LD_EXP 1
22879: IFTRUE 22920
22881: PUSH
22882: LD_EXP 3
22886: IFFALSE 22919
22888: PUSH
22889: LD_OWVAR 1
22893: PUSH
22894: LD_INT 67200
22896: PUSH
22897: LD_INT 63000
22899: PUSH
22900: LD_INT 58800
22902: PUSH
22903: LD_INT 54600
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: PUSH
22912: LD_OWVAR 67
22916: ARRAY
22917: GREATER
22918: AND
22919: OR
22920: IFFALSE 23657
22922: GO 22924
22924: DISABLE
22925: LD_INT 0
22927: PPUSH
22928: PPUSH
22929: PPUSH
22930: PPUSH
// begin PrepareOmarSquad ;
22931: CALL 5178 0 0
// repeat wait ( 0 0$1 ) ;
22935: LD_INT 35
22937: PPUSH
22938: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22942: LD_INT 14
22944: PPUSH
22945: LD_INT 22
22947: PUSH
22948: LD_INT 3
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: LD_INT 21
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 59
22970: PUSH
22971: EMPTY
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PPUSH
22983: CALL_OW 70
22987: NOT
22988: IFFALSE 22935
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22990: LD_ADDR_VAR 0 2
22994: PUSH
22995: LD_INT 14
22997: PPUSH
22998: LD_INT 22
23000: PUSH
23001: LD_INT 2
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PPUSH
23008: CALL_OW 70
23012: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
23013: LD_ADDR_VAR 0 3
23017: PUSH
23018: LD_VAR 0 2
23022: PUSH
23023: LD_INT 0
23025: GREATER
23026: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
23027: LD_ADDR_VAR 0 4
23031: PUSH
23032: LD_EXP 34
23036: PPUSH
23037: LD_INT 14
23039: PPUSH
23040: CALL_OW 308
23044: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
23045: LD_VAR 0 2
23049: PPUSH
23050: LD_INT 21
23052: PUSH
23053: LD_INT 3
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PPUSH
23060: CALL_OW 72
23064: IFFALSE 23169
// begin if heikeNearbyOmar then
23066: LD_VAR 0 4
23070: IFFALSE 23086
// Say ( Omar , DOm-Base-1b ) else
23072: LD_EXP 44
23076: PPUSH
23077: LD_STRING DOm-Base-1b
23079: PPUSH
23080: CALL_OW 88
23084: GO 23098
// SayRadio ( Omar , DOm-Base-1br ) ;
23086: LD_EXP 44
23090: PPUSH
23091: LD_STRING DOm-Base-1br
23093: PPUSH
23094: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
23098: LD_ADDR_VAR 0 1
23102: PUSH
23103: LD_VAR 0 2
23107: PPUSH
23108: LD_INT 21
23110: PUSH
23111: LD_INT 3
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PPUSH
23118: CALL_OW 72
23122: PUSH
23123: FOR_IN
23124: IFFALSE 23165
// begin if UnitsInside ( i ) then
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 313
23135: IFFALSE 23151
// ComExitBuilding ( UnitsInside ( i ) ) ;
23137: LD_VAR 0 1
23141: PPUSH
23142: CALL_OW 313
23146: PPUSH
23147: CALL_OW 122
// SetSide ( i , 5 ) ;
23151: LD_VAR 0 1
23155: PPUSH
23156: LD_INT 5
23158: PPUSH
23159: CALL_OW 235
// end ;
23163: GO 23123
23165: POP
23166: POP
// end else
23167: GO 23262
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
23169: LD_VAR 0 2
23173: PPUSH
23174: LD_INT 21
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PPUSH
23184: CALL_OW 72
23188: IFFALSE 23224
// begin if heikeNearbyOmar then
23190: LD_VAR 0 4
23194: IFFALSE 23210
// Say ( Omar , DOm-Base-1v ) else
23196: LD_EXP 44
23200: PPUSH
23201: LD_STRING DOm-Base-1v
23203: PPUSH
23204: CALL_OW 88
23208: GO 23222
// SayRadio ( Omar , DOm-Base-1vr ) end else
23210: LD_EXP 44
23214: PPUSH
23215: LD_STRING DOm-Base-1vr
23217: PPUSH
23218: CALL_OW 94
23222: GO 23262
// if inOmarBase then
23224: LD_VAR 0 3
23228: IFFALSE 23262
// begin if heikeNearbyOmar then
23230: LD_VAR 0 4
23234: IFFALSE 23250
// Say ( Omar , DOm-Base-1h ) else
23236: LD_EXP 44
23240: PPUSH
23241: LD_STRING DOm-Base-1h
23243: PPUSH
23244: CALL_OW 88
23248: GO 23262
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23250: LD_EXP 44
23254: PPUSH
23255: LD_STRING DOm-Base-1hr
23257: PPUSH
23258: CALL_OW 94
// for i in omarSquad do
23262: LD_ADDR_VAR 0 1
23266: PUSH
23267: LD_EXP 52
23271: PUSH
23272: FOR_IN
23273: IFFALSE 23304
// if GetLives ( i ) < 750 then
23275: LD_VAR 0 1
23279: PPUSH
23280: CALL_OW 256
23284: PUSH
23285: LD_INT 750
23287: LESS
23288: IFFALSE 23302
// SetLives ( i , 1000 ) ;
23290: LD_VAR 0 1
23294: PPUSH
23295: LD_INT 1000
23297: PPUSH
23298: CALL_OW 234
23302: GO 23272
23304: POP
23305: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23306: LD_ADDR_VAR 0 1
23310: PUSH
23311: LD_INT 14
23313: PPUSH
23314: LD_INT 21
23316: PUSH
23317: LD_INT 3
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PPUSH
23324: CALL_OW 70
23328: PUSH
23329: FOR_IN
23330: IFFALSE 23346
// SetSide ( i , 5 ) ;
23332: LD_VAR 0 1
23336: PPUSH
23337: LD_INT 5
23339: PPUSH
23340: CALL_OW 235
23344: GO 23329
23346: POP
23347: POP
// wait ( 0 0$3 ) ;
23348: LD_INT 105
23350: PPUSH
23351: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23355: LD_INT 5
23357: PPUSH
23358: LD_INT 2
23360: PPUSH
23361: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23365: LD_EXP 44
23369: PPUSH
23370: CALL_OW 87
// DialogueOn ;
23374: CALL_OW 6
// if heikeNearbyOmar then
23378: LD_VAR 0 4
23382: IFFALSE 23440
// begin Say ( Omar , DOm-Veh-1a ) ;
23384: LD_EXP 44
23388: PPUSH
23389: LD_STRING DOm-Veh-1a
23391: PPUSH
23392: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23396: LD_EXP 44
23400: PPUSH
23401: LD_STRING DOm-Veh-2a
23403: PPUSH
23404: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23408: LD_EXP 44
23412: PPUSH
23413: LD_STRING DOm-Veh-3a
23415: PPUSH
23416: CALL_OW 88
// if mortarConstructed then
23420: LD_EXP 15
23424: IFFALSE 23438
// Say ( Omar , DOm-Veh-4a ) ;
23426: LD_EXP 44
23430: PPUSH
23431: LD_STRING DOm-Veh-4a
23433: PPUSH
23434: CALL_OW 88
// end else
23438: GO 23494
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23440: LD_EXP 44
23444: PPUSH
23445: LD_STRING DOm-Veh-1
23447: PPUSH
23448: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23452: LD_EXP 44
23456: PPUSH
23457: LD_STRING DOm-Veh-2
23459: PPUSH
23460: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23464: LD_EXP 44
23468: PPUSH
23469: LD_STRING DOm-Veh-3
23471: PPUSH
23472: CALL_OW 94
// if mortarConstructed then
23476: LD_EXP 15
23480: IFFALSE 23494
// SayRadio ( Omar , DOm-Veh-4 ) ;
23482: LD_EXP 44
23486: PPUSH
23487: LD_STRING DOm-Veh-4
23489: PPUSH
23490: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23494: LD_EXP 34
23498: PPUSH
23499: LD_STRING DH-Veh-5
23501: PPUSH
23502: CALL_OW 88
// if IsOk ( Kurt ) then
23506: LD_EXP 45
23510: PPUSH
23511: CALL_OW 302
23515: IFFALSE 23565
// begin Say ( Kurt , DKs-Veh-6 ) ;
23517: LD_EXP 45
23521: PPUSH
23522: LD_STRING DKs-Veh-6
23524: PPUSH
23525: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23529: LD_EXP 45
23533: PPUSH
23534: LD_STRING DKs-Veh-7
23536: PPUSH
23537: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23541: LD_EXP 35
23545: PPUSH
23546: LD_STRING DG-Veh-8
23548: PPUSH
23549: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23553: LD_EXP 36
23557: PPUSH
23558: LD_STRING DM-Veh-9
23560: PPUSH
23561: CALL_OW 88
// end ; DialogueOff ;
23565: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23569: LD_STRING M4
23571: PPUSH
23572: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23576: LD_EXP 44
23580: PPUSH
23581: LD_INT 341
23583: PPUSH
23584: LD_INT 232
23586: PPUSH
23587: CALL_OW 428
23591: PPUSH
23592: CALL_OW 120
// omarArrived := true ;
23596: LD_ADDR_EXP 6
23600: PUSH
23601: LD_INT 1
23603: ST_TO_ADDR
// omarScriptBase := true ;
23604: LD_ADDR_EXP 10
23608: PUSH
23609: LD_INT 1
23611: ST_TO_ADDR
// omarWantVehicles := true ;
23612: LD_ADDR_EXP 18
23616: PUSH
23617: LD_INT 1
23619: ST_TO_ADDR
// if debug then
23620: LD_EXP 1
23624: IFFALSE 23657
// begin wait ( 0 0$25 ) ;
23626: LD_INT 875
23628: PPUSH
23629: CALL_OW 67
// omarScriptBase := false ;
23633: LD_ADDR_EXP 10
23637: PUSH
23638: LD_INT 0
23640: ST_TO_ADDR
// omarWantVehicles := false ;
23641: LD_ADDR_EXP 18
23645: PUSH
23646: LD_INT 0
23648: ST_TO_ADDR
// omarAttack := true ;
23649: LD_ADDR_EXP 23
23653: PUSH
23654: LD_INT 1
23656: ST_TO_ADDR
// end ; end ;
23657: PPOPN 4
23659: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23660: LD_INT 10
23662: PPUSH
23663: LD_INT 22
23665: PUSH
23666: LD_INT 2
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PPUSH
23673: CALL_OW 70
23677: IFFALSE 23685
23679: PUSH
23680: LD_EXP 6
23684: AND
23685: IFFALSE 23698
23687: PUSH
23688: LD_EXP 44
23692: PPUSH
23693: CALL_OW 302
23697: AND
23698: IFFALSE 23707
23700: PUSH
23701: LD_EXP 23
23705: NOT
23706: AND
23707: IFFALSE 23724
23709: GO 23711
23711: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23712: LD_EXP 44
23716: PPUSH
23717: LD_STRING DOm-Lenin
23719: PPUSH
23720: CALL_OW 94
23724: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23725: LD_EXP 47
23729: PPUSH
23730: CALL_OW 302
23734: IFFALSE 23742
23736: PUSH
23737: LD_EXP 12
23741: AND
23742: IFFALSE 23750
23744: PUSH
23745: LD_EXP 6
23749: AND
23750: IFFALSE 23854
23752: GO 23754
23754: DISABLE
// begin wait ( 1 1$00 ) ;
23755: LD_INT 2100
23757: PPUSH
23758: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23762: LD_EXP 47
23766: PPUSH
23767: CALL_OW 87
// DialogueOn ;
23771: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23775: LD_EXP 47
23779: PPUSH
23780: LD_STRING DRf-Veh-10
23782: PPUSH
23783: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23787: LD_EXP 47
23791: PPUSH
23792: LD_STRING DRf-Veh-11
23794: PPUSH
23795: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23799: LD_EXP 34
23803: PPUSH
23804: LD_STRING DH-Veh-12
23806: PPUSH
23807: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23811: LD_EXP 34
23815: PPUSH
23816: LD_STRING DH-Veh-13
23818: PPUSH
23819: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23823: LD_EXP 47
23827: PPUSH
23828: LD_STRING DRf-Veh-14
23830: PPUSH
23831: CALL_OW 88
// DialogueOff ;
23835: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23839: LD_STRING M5
23841: PPUSH
23842: CALL_OW 337
// rolfWantVehicles := true ;
23846: LD_ADDR_EXP 17
23850: PUSH
23851: LD_INT 1
23853: ST_TO_ADDR
// end ;
23854: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23855: LD_EXP 18
23859: IFFALSE 24622
23861: GO 23863
23863: DISABLE
23864: LD_INT 0
23866: PPUSH
23867: PPUSH
23868: PPUSH
23869: PPUSH
23870: PPUSH
23871: PPUSH
// begin wait ( 0 0$3 ) ;
23872: LD_INT 105
23874: PPUSH
23875: CALL_OW 67
// Hint ( OmarVehicles ) ;
23879: LD_STRING OmarVehicles
23881: PPUSH
23882: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23886: LD_INT 16
23888: PPUSH
23889: LD_INT 1
23891: PPUSH
23892: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23896: LD_INT 35
23898: PPUSH
23899: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23903: LD_ADDR_EXP 20
23907: PUSH
23908: LD_EXP 20
23912: PUSH
23913: LD_INT 35
23915: MINUS
23916: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23917: LD_EXP 20
23921: PUSH
23922: LD_INT 0
23924: LESSEQUAL
23925: IFFALSE 24025
// begin display_strings := [ ] ;
23927: LD_ADDR_OWVAR 47
23931: PUSH
23932: EMPTY
23933: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23934: LD_STRING M4a
23936: PPUSH
23937: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23941: LD_INT 16
23943: PPUSH
23944: LD_INT 0
23946: PPUSH
23947: CALL_OW 424
// DialogueOn ;
23951: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23955: LD_EXP 44
23959: PPUSH
23960: LD_STRING DOm-Veh-b-15
23962: PPUSH
23963: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23967: LD_EXP 34
23971: PPUSH
23972: LD_STRING DH-Veh-b-16
23974: PPUSH
23975: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23979: LD_EXP 44
23983: PPUSH
23984: LD_STRING DOm-Veh-b-17
23986: PPUSH
23987: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23991: LD_EXP 39
23995: PPUSH
23996: LD_STRING DK-Veh-b-18
23998: PPUSH
23999: CALL_OW 88
// DialogueOff ;
24003: CALL_OW 7
// omarAttack := true ;
24007: LD_ADDR_EXP 23
24011: PUSH
24012: LD_INT 1
24014: ST_TO_ADDR
// omarScriptBase := false ;
24015: LD_ADDR_EXP 10
24019: PUSH
24020: LD_INT 0
24022: ST_TO_ADDR
// exit ;
24023: GO 24622
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24025: LD_EXP 21
24029: PUSH
24030: LD_INT 16
24032: PPUSH
24033: LD_INT 22
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 21
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 3
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: LD_INT 34
24061: PUSH
24062: LD_INT 32
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 34
24071: PUSH
24072: LD_INT 88
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 34
24081: PUSH
24082: LD_INT 31
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 33
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 58
24111: PUSH
24112: EMPTY
24113: LIST
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: PPUSH
24122: CALL_OW 70
24126: LESSEQUAL
24127: IFFALSE 23896
// omarWaitingForVehiclesTimer := 0 0$00 ;
24129: LD_ADDR_EXP 20
24133: PUSH
24134: LD_INT 0
24136: ST_TO_ADDR
// display_strings := [ ] ;
24137: LD_ADDR_OWVAR 47
24141: PUSH
24142: EMPTY
24143: ST_TO_ADDR
// DialogueOn ;
24144: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
24148: LD_EXP 44
24152: PPUSH
24153: LD_STRING DOm-Veh-a-15
24155: PPUSH
24156: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
24160: LD_EXP 39
24164: PPUSH
24165: LD_STRING DK-Veh-a-16
24167: PPUSH
24168: CALL_OW 88
// DialogueOff ;
24172: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
24176: LD_STRING M4a
24178: PPUSH
24179: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
24183: LD_INT 16
24185: PPUSH
24186: LD_INT 0
24188: PPUSH
24189: CALL_OW 424
// omarHasVehicles := true ;
24193: LD_ADDR_EXP 22
24197: PUSH
24198: LD_INT 1
24200: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24201: LD_INT 35
24203: PPUSH
24204: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
24208: LD_EXP 19
24212: PUSH
24213: LD_INT 0
24215: EQUAL
24216: IFFALSE 24201
// wait ( 1 1$00 ) ;
24218: LD_INT 2100
24220: PPUSH
24221: CALL_OW 67
// omarAttack := true ;
24225: LD_ADDR_EXP 23
24229: PUSH
24230: LD_INT 1
24232: ST_TO_ADDR
// omarScriptBase := false ;
24233: LD_ADDR_EXP 10
24237: PUSH
24238: LD_INT 0
24240: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24241: LD_ADDR_VAR 0 2
24245: PUSH
24246: LD_INT 16
24248: PPUSH
24249: LD_INT 22
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 21
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 33
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 58
24281: PUSH
24282: EMPTY
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: PPUSH
24291: CALL_OW 70
24295: ST_TO_ADDR
// for i in tmp do
24296: LD_ADDR_VAR 0 1
24300: PUSH
24301: LD_VAR 0 2
24305: PUSH
24306: FOR_IN
24307: IFFALSE 24335
// begin SetFuel ( i , 100 ) ;
24309: LD_VAR 0 1
24313: PPUSH
24314: LD_INT 100
24316: PPUSH
24317: CALL_OW 240
// SetSide ( i , 5 ) ;
24321: LD_VAR 0 1
24325: PPUSH
24326: LD_INT 5
24328: PPUSH
24329: CALL_OW 235
// end ;
24333: GO 24306
24335: POP
24336: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24337: LD_ADDR_VAR 0 3
24341: PUSH
24342: LD_EXP 52
24346: PPUSH
24347: LD_INT 25
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PPUSH
24357: CALL_OW 72
24361: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24362: LD_ADDR_VAR 0 4
24366: PUSH
24367: LD_EXP 52
24371: PPUSH
24372: LD_INT 3
24374: PUSH
24375: LD_INT 55
24377: PUSH
24378: EMPTY
24379: LIST
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 25
24387: PUSH
24388: LD_INT 3
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 72
24403: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24404: LD_ADDR_VAR 0 5
24408: PUSH
24409: LD_INT 324
24411: PPUSH
24412: LD_INT 234
24414: PPUSH
24415: CALL_OW 428
24419: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24420: LD_ADDR_VAR 0 6
24424: PUSH
24425: LD_INT 334
24427: PPUSH
24428: LD_INT 241
24430: PPUSH
24431: CALL_OW 428
24435: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24436: LD_VAR 0 6
24440: PPUSH
24441: CALL_OW 313
24445: PPUSH
24446: CALL_OW 122
// if eng then
24450: LD_VAR 0 3
24454: IFFALSE 24562
// begin if eng + mech <= tmp then
24456: LD_VAR 0 3
24460: PUSH
24461: LD_VAR 0 4
24465: PLUS
24466: PUSH
24467: LD_VAR 0 2
24471: LESSEQUAL
24472: IFFALSE 24527
// begin ComEnterUnit ( eng , workshop ) ;
24474: LD_VAR 0 3
24478: PPUSH
24479: LD_VAR 0 5
24483: PPUSH
24484: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24488: LD_VAR 0 3
24492: PPUSH
24493: LD_INT 3
24495: PPUSH
24496: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24500: LD_VAR 0 3
24504: PPUSH
24505: CALL_OW 182
// mech := mech union eng ;
24509: LD_ADDR_VAR 0 4
24513: PUSH
24514: LD_VAR 0 4
24518: PUSH
24519: LD_VAR 0 3
24523: UNION
24524: ST_TO_ADDR
// end else
24525: GO 24562
// begin ComEnterUnit ( eng , armoury ) ;
24527: LD_VAR 0 3
24531: PPUSH
24532: LD_VAR 0 6
24536: PPUSH
24537: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24541: LD_VAR 0 3
24545: PPUSH
24546: LD_INT 1
24548: PPUSH
24549: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24553: LD_VAR 0 3
24557: PPUSH
24558: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24562: LD_ADDR_VAR 0 1
24566: PUSH
24567: DOUBLE
24568: LD_INT 1
24570: DEC
24571: ST_TO_ADDR
24572: LD_VAR 0 2
24576: PUSH
24577: FOR_TO
24578: IFFALSE 24620
// if i <= mech then
24580: LD_VAR 0 1
24584: PUSH
24585: LD_VAR 0 4
24589: LESSEQUAL
24590: IFFALSE 24618
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24592: LD_VAR 0 4
24596: PUSH
24597: LD_VAR 0 1
24601: ARRAY
24602: PPUSH
24603: LD_VAR 0 2
24607: PUSH
24608: LD_VAR 0 1
24612: ARRAY
24613: PPUSH
24614: CALL_OW 180
24618: GO 24577
24620: POP
24621: POP
// end ;
24622: PPOPN 6
24624: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24625: LD_EXP 47
24629: PPUSH
24630: CALL_OW 302
24634: IFFALSE 24642
24636: PUSH
24637: LD_EXP 17
24641: AND
24642: IFFALSE 25266
24644: GO 24646
24646: DISABLE
24647: LD_INT 0
24649: PPUSH
24650: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24651: LD_INT 35
24653: PPUSH
24654: CALL_OW 67
// hasBadWeapons := false ;
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_INT 0
24665: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24666: LD_ADDR_EXP 19
24670: PUSH
24671: LD_EXP 19
24675: PUSH
24676: LD_INT 35
24678: MINUS
24679: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24680: LD_EXP 19
24684: PUSH
24685: LD_INT 0
24687: LESSEQUAL
24688: IFFALSE 24950
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24690: LD_ADDR_EXP 19
24694: PUSH
24695: LD_INT 0
24697: ST_TO_ADDR
// display_strings := [ ] ;
24698: LD_ADDR_OWVAR 47
24702: PUSH
24703: EMPTY
24704: ST_TO_ADDR
// DialogueOn ;
24705: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24709: LD_EXP 47
24713: PPUSH
24714: LD_STRING DRf-Veh-b-19
24716: PPUSH
24717: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24721: LD_EXP 47
24725: PPUSH
24726: LD_STRING DRf-Veh-b-20
24728: PPUSH
24729: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24733: LD_EXP 34
24737: PPUSH
24738: LD_STRING DH-Veh-b-21
24740: PPUSH
24741: CALL_OW 88
// if IsOk ( Givi ) then
24745: LD_EXP 35
24749: PPUSH
24750: CALL_OW 302
24754: IFFALSE 24792
// begin Say ( Givi , DG-Veh-b-22 ) ;
24756: LD_EXP 35
24760: PPUSH
24761: LD_STRING DG-Veh-b-22
24763: PPUSH
24764: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24768: LD_EXP 34
24772: PPUSH
24773: LD_STRING DH-Veh-b-23
24775: PPUSH
24776: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24780: LD_EXP 35
24784: PPUSH
24785: LD_STRING DG-Veh-b-24
24787: PPUSH
24788: CALL_OW 88
// end ; DialogueOff ;
24792: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24796: LD_STRING M5a
24798: PPUSH
24799: CALL_OW 337
// for i in rolfSquad do
24803: LD_ADDR_VAR 0 1
24807: PUSH
24808: LD_EXP 51
24812: PUSH
24813: FOR_IN
24814: IFFALSE 24931
// begin SetSide ( i , 8 ) ;
24816: LD_VAR 0 1
24820: PPUSH
24821: LD_INT 8
24823: PPUSH
24824: CALL_OW 235
// if IsDriver ( i ) then
24828: LD_VAR 0 1
24832: PPUSH
24833: CALL 65458 0 1
24837: IFFALSE 24909
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24839: LD_VAR 0 1
24843: PPUSH
24844: CALL_OW 310
24848: PPUSH
24849: CALL_OW 264
24853: PUSH
24854: LD_INT 51
24856: PUSH
24857: LD_INT 52
24859: PUSH
24860: LD_INT 32
24862: PUSH
24863: LD_INT 88
24865: PUSH
24866: LD_INT 31
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: IN
24876: NOT
24877: IFFALSE 24898
// SetSide ( IsInUnit ( i ) , 8 ) else
24879: LD_VAR 0 1
24883: PPUSH
24884: CALL_OW 310
24888: PPUSH
24889: LD_INT 8
24891: PPUSH
24892: CALL_OW 235
24896: GO 24907
// ComExitVehicle ( i ) ;
24898: LD_VAR 0 1
24902: PPUSH
24903: CALL_OW 121
// end else
24907: GO 24929
// if IsInUnit ( i ) then
24909: LD_VAR 0 1
24913: PPUSH
24914: CALL_OW 310
24918: IFFALSE 24929
// ComExitBuilding ( i ) ;
24920: LD_VAR 0 1
24924: PPUSH
24925: CALL_OW 122
// end ;
24929: GO 24813
24931: POP
24932: POP
// wait ( 0 0$10 ) ;
24933: LD_INT 350
24935: PPUSH
24936: CALL_OW 67
// rolfAttack := true ;
24940: LD_ADDR_EXP 32
24944: PUSH
24945: LD_INT 1
24947: ST_TO_ADDR
// exit ;
24948: GO 25266
// end ; if IsDead ( Rolf ) then
24950: LD_EXP 47
24954: PPUSH
24955: CALL_OW 301
24959: IFFALSE 24970
// begin ChangeMissionObjectives ( M5a ) ;
24961: LD_STRING M5a
24963: PPUSH
24964: CALL_OW 337
// exit ;
24968: GO 25266
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24970: LD_EXP 51
24974: PPUSH
24975: LD_INT 55
24977: PUSH
24978: EMPTY
24979: LIST
24980: PPUSH
24981: CALL_OW 72
24985: PPUSH
24986: CALL 31946 0 1
24990: PUSH
24991: LD_EXP 51
24995: PPUSH
24996: CALL 31946 0 1
25000: EQUAL
25001: IFFALSE 25118
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
25003: LD_ADDR_VAR 0 1
25007: PUSH
25008: LD_EXP 51
25012: PPUSH
25013: LD_INT 55
25015: PUSH
25016: EMPTY
25017: LIST
25018: PPUSH
25019: CALL_OW 72
25023: PUSH
25024: FOR_IN
25025: IFFALSE 25085
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
25027: LD_VAR 0 1
25031: PPUSH
25032: CALL_OW 310
25036: PPUSH
25037: CALL_OW 264
25041: PUSH
25042: LD_INT 51
25044: PUSH
25045: LD_INT 52
25047: PUSH
25048: LD_INT 32
25050: PUSH
25051: LD_INT 88
25053: PUSH
25054: LD_INT 31
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: IN
25064: IFFALSE 25083
// begin hasBadWeapons := true ;
25066: LD_ADDR_VAR 0 2
25070: PUSH
25071: LD_INT 1
25073: ST_TO_ADDR
// Query ( QBadWeapon ) ;
25074: LD_STRING QBadWeapon
25076: PPUSH
25077: CALL_OW 97
// break ;
25081: GO 25085
// end ;
25083: GO 25024
25085: POP
25086: POP
// if not hasBadWeapons then
25087: LD_VAR 0 2
25091: NOT
25092: IFFALSE 25118
// if Query ( QRolf ) = 1 then
25094: LD_STRING QRolf
25096: PPUSH
25097: CALL_OW 97
25101: PUSH
25102: LD_INT 1
25104: EQUAL
25105: IFFALSE 25111
// break else
25107: GO 25122
25109: GO 25118
// wait ( 0 0$15 ) ;
25111: LD_INT 525
25113: PPUSH
25114: CALL_OW 67
// end ; until false ;
25118: LD_INT 0
25120: IFFALSE 24651
// rolfWaitingForVehiclesTimer := 0 0$00 ;
25122: LD_ADDR_EXP 19
25126: PUSH
25127: LD_INT 0
25129: ST_TO_ADDR
// display_strings := [ ] ;
25130: LD_ADDR_OWVAR 47
25134: PUSH
25135: EMPTY
25136: ST_TO_ADDR
// DialogueOn ;
25137: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
25141: LD_EXP 47
25145: PPUSH
25146: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
25150: LD_EXP 47
25154: PPUSH
25155: LD_STRING DRf-Veh-a-17
25157: PPUSH
25158: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
25162: LD_EXP 34
25166: PPUSH
25167: LD_STRING DH-08-Veh-a-18
25169: PPUSH
25170: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
25174: LD_EXP 47
25178: PPUSH
25179: LD_STRING DRf-Veh-a-19
25181: PPUSH
25182: CALL_OW 88
// DialogueOff ;
25186: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25190: LD_STRING M5a
25192: PPUSH
25193: CALL_OW 337
// rolfHasVehicles := true ;
25197: LD_ADDR_EXP 16
25201: PUSH
25202: LD_INT 1
25204: ST_TO_ADDR
// for i in rolfSquad do
25205: LD_ADDR_VAR 0 1
25209: PUSH
25210: LD_EXP 51
25214: PUSH
25215: FOR_IN
25216: IFFALSE 25249
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25218: LD_VAR 0 1
25222: PPUSH
25223: CALL_OW 310
25227: PPUSH
25228: LD_INT 8
25230: PPUSH
25231: CALL_OW 235
// SetSide ( i , 8 ) ;
25235: LD_VAR 0 1
25239: PPUSH
25240: LD_INT 8
25242: PPUSH
25243: CALL_OW 235
// end ;
25247: GO 25215
25249: POP
25250: POP
// wait ( 0 0$10 ) ;
25251: LD_INT 350
25253: PPUSH
25254: CALL_OW 67
// rolfAttack := true ;
25258: LD_ADDR_EXP 32
25262: PUSH
25263: LD_INT 1
25265: ST_TO_ADDR
// end ;
25266: PPOPN 2
25268: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25269: LD_EXP 32
25273: IFFALSE 25281
25275: PUSH
25276: LD_EXP 23
25280: AND
25281: IFFALSE 25293
25283: GO 25285
25285: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25286: LD_STRING M6a
25288: PPUSH
25289: CALL_OW 337
25293: END
// every 0 0$1 trigger leninSpotted do
25294: LD_EXP 14
25298: IFFALSE 25386
25300: GO 25302
25302: DISABLE
// begin wait ( 0 0$10 ) ;
25303: LD_INT 350
25305: PPUSH
25306: CALL_OW 67
// DialogueOn ;
25310: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25314: LD_EXP 46
25318: PPUSH
25319: LD_STRING DA-Transmission-1
25321: PPUSH
25322: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25326: LD_EXP 53
25330: PPUSH
25331: LD_STRING DMzw-Transmission-2
25333: PPUSH
25334: CALL_OW 94
// if gaidarKilled then
25338: LD_EXP 7
25342: IFFALSE 25358
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25344: LD_EXP 53
25348: PPUSH
25349: LD_STRING DMzw-Transmission-3
25351: PPUSH
25352: CALL_OW 94
25356: GO 25370
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25358: LD_EXP 53
25362: PPUSH
25363: LD_STRING DMzw-Transmission-a-3
25365: PPUSH
25366: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25370: LD_EXP 34
25374: PPUSH
25375: LD_STRING DH-Transmission-4
25377: PPUSH
25378: CALL_OW 88
// DialogueOff ;
25382: CALL_OW 7
// end ;
25386: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25387: LD_INT 22
25389: PUSH
25390: LD_INT 3
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 25
25399: PUSH
25400: LD_INT 9
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 101
25409: PUSH
25410: LD_INT 2
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: PPUSH
25422: CALL_OW 69
25426: IFFALSE 25439
25428: PUSH
25429: LD_EXP 34
25433: PPUSH
25434: CALL_OW 302
25438: AND
25439: IFFALSE 25519
25441: GO 25443
25443: DISABLE
// begin wait ( 0 0$3 ) ;
25444: LD_INT 105
25446: PPUSH
25447: CALL_OW 67
// DialogueOn ;
25451: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25455: LD_INT 22
25457: PUSH
25458: LD_INT 3
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 25
25467: PUSH
25468: LD_INT 9
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 101
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 69
25494: PUSH
25495: LD_INT 1
25497: ARRAY
25498: PPUSH
25499: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25503: LD_EXP 34
25507: PPUSH
25508: LD_STRING DH-Rubazooka-1
25510: PPUSH
25511: CALL_OW 88
// DialogueOff ;
25515: CALL_OW 7
// end ;
25519: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25520: LD_INT 19
25522: PPUSH
25523: LD_INT 22
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PPUSH
25533: CALL_OW 70
25537: IFFALSE 25545
25539: PUSH
25540: LD_EXP 28
25544: AND
25545: IFFALSE 25604
25547: GO 25549
25549: DISABLE
// begin DialogueOn ;
25550: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25554: LD_INT 19
25556: PPUSH
25557: LD_INT 22
25559: PUSH
25560: LD_INT 3
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PPUSH
25567: CALL_OW 70
25571: PPUSH
25572: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25576: LD_EXP 34
25580: PPUSH
25581: LD_STRING DH-Ruattfirst-1
25583: PPUSH
25584: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25588: LD_EXP 34
25592: PPUSH
25593: LD_STRING DH-Ruattfirst-2
25595: PPUSH
25596: CALL_OW 88
// DialogueOff ;
25600: CALL_OW 7
// end ;
25604: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25605: LD_INT 19
25607: PPUSH
25608: LD_INT 22
25610: PUSH
25611: LD_INT 3
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PPUSH
25618: CALL_OW 70
25622: IFFALSE 25631
25624: PUSH
25625: LD_EXP 28
25629: NOT
25630: AND
25631: IFFALSE 25678
25633: GO 25635
25635: DISABLE
// begin DialogueOn ;
25636: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25640: LD_INT 19
25642: PPUSH
25643: LD_INT 22
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PPUSH
25653: CALL_OW 70
25657: PPUSH
25658: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25662: LD_EXP 34
25666: PPUSH
25667: LD_STRING DH-Ruattnext-1
25669: PPUSH
25670: CALL_OW 88
// DialogueOff ;
25674: CALL_OW 7
// end ;
25678: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25679: LD_EXP 53
25683: PPUSH
25684: CALL_OW 301
25688: IFFALSE 25701
25690: PUSH
25691: LD_EXP 44
25695: PPUSH
25696: CALL_OW 302
25700: AND
25701: IFFALSE 25718
25703: GO 25705
25705: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25706: LD_EXP 44
25710: PPUSH
25711: LD_STRING DOm-Morozov
25713: PPUSH
25714: CALL_OW 94
25718: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25719: LD_EXP 31
25723: IFFALSE 25748
25725: PUSH
25726: LD_EXP 48
25730: PPUSH
25731: CALL_OW 274
25735: PPUSH
25736: LD_INT 2
25738: PPUSH
25739: CALL_OW 275
25743: PUSH
25744: LD_INT 30
25746: LESSEQUAL
25747: AND
25748: IFFALSE 25838
25750: GO 25752
25752: DISABLE
// begin wait ( 0 0$10 ) ;
25753: LD_INT 350
25755: PPUSH
25756: CALL_OW 67
// DialogueOn ;
25760: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25764: LD_EXP 34
25768: PPUSH
25769: LD_STRING DH-Fuel-1
25771: PPUSH
25772: CALL_OW 88
// if IsOk ( Givi ) then
25776: LD_EXP 35
25780: PPUSH
25781: CALL_OW 302
25785: IFFALSE 25823
// begin Say ( Givi , DG-Fuel-2 ) ;
25787: LD_EXP 35
25791: PPUSH
25792: LD_STRING DG-Fuel-2
25794: PPUSH
25795: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25799: LD_EXP 35
25803: PPUSH
25804: LD_STRING DG-Fuel-3
25806: PPUSH
25807: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25811: LD_EXP 35
25815: PPUSH
25816: LD_STRING DG-Fuel-4
25818: PPUSH
25819: CALL_OW 88
// end ; DialogueOff ;
25823: CALL_OW 7
// Query ( QOil ) ;
25827: LD_STRING QOil
25829: PPUSH
25830: CALL_OW 97
// GoForOil ( ) ;
25834: CALL 8964 0 0
// end ;
25838: END
// every 0 0$1 trigger leninSpotted and omarAttack and rolfAttack do
25839: LD_EXP 14
25843: IFFALSE 25851
25845: PUSH
25846: LD_EXP 23
25850: AND
25851: IFFALSE 25859
25853: PUSH
25854: LD_EXP 32
25858: AND
25859: IFFALSE 26200
25861: GO 25863
25863: DISABLE
// begin if IsDead ( Morozov ) then
25864: LD_EXP 53
25868: PPUSH
25869: CALL_OW 301
25873: IFFALSE 25884
// wait ( 1 1$45 ) else
25875: LD_INT 3675
25877: PPUSH
25878: CALL_OW 67
25882: GO 25912
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25884: LD_INT 19950
25886: PUSH
25887: LD_INT 16800
25889: PUSH
25890: LD_INT 16100
25892: PUSH
25893: LD_INT 13650
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: PUSH
25902: LD_OWVAR 67
25906: ARRAY
25907: PPUSH
25908: CALL_OW 67
// DialogueOn ;
25912: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25916: LD_EXP 42
25920: PPUSH
25921: LD_STRING DShar-End-1
25923: PPUSH
25924: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25928: LD_EXP 34
25932: PPUSH
25933: LD_STRING DH-End-2
25935: PPUSH
25936: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25940: LD_EXP 42
25944: PPUSH
25945: LD_STRING DShar-End-3
25947: PPUSH
25948: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25952: LD_EXP 34
25956: PPUSH
25957: LD_STRING DH-End-4
25959: PPUSH
25960: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25964: LD_EXP 42
25968: PPUSH
25969: LD_STRING DShar-End-5
25971: PPUSH
25972: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25976: LD_EXP 42
25980: PPUSH
25981: LD_STRING DShar-End-6
25983: PPUSH
25984: CALL_OW 94
// dwait ( 0 0$2 ) ;
25988: LD_INT 70
25990: PPUSH
25991: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25995: LD_EXP 34
25999: PPUSH
26000: LD_STRING DH-End-7
26002: PPUSH
26003: CALL_OW 88
// DialogueOff ;
26007: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
26011: LD_STRING M6
26013: PPUSH
26014: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
26018: LD_INT 17
26020: PPUSH
26021: LD_INT 1
26023: PPUSH
26024: CALL_OW 424
// escapeAllowed := true ;
26028: LD_ADDR_EXP 24
26032: PUSH
26033: LD_INT 1
26035: ST_TO_ADDR
// wait ( 0 0$2 ) ;
26036: LD_INT 70
26038: PPUSH
26039: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
26043: LD_EXP 45
26047: PPUSH
26048: LD_STRING DKs-End-8
26050: PPUSH
26051: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
26055: LD_EXP 39
26059: PPUSH
26060: LD_STRING DK-End-10
26062: PPUSH
26063: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
26067: LD_EXP 45
26071: PPUSH
26072: LD_STRING DKs-End-9
26074: PPUSH
26075: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
26079: LD_EXP 41
26083: PPUSH
26084: LD_STRING DMar-End-11
26086: PPUSH
26087: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
26091: LD_STRING 05_DrugsTested
26093: PPUSH
26094: LD_EXP 1
26098: PPUSH
26099: CALL_OW 30
26103: IFFALSE 26117
// Say ( Mike , DM-End-12 ) ;
26105: LD_EXP 36
26109: PPUSH
26110: LD_STRING DM-End-12
26112: PPUSH
26113: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
26117: LD_EXP 43
26121: PPUSH
26122: LD_STRING DO-End-13
26124: PPUSH
26125: CALL_OW 88
// if IsOk ( Sophia ) then
26129: LD_EXP 40
26133: PPUSH
26134: CALL_OW 302
26138: IFFALSE 26164
// begin Say ( Sophia , DS-End-15 ) ;
26140: LD_EXP 40
26144: PPUSH
26145: LD_STRING DS-End-15
26147: PPUSH
26148: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
26152: LD_EXP 39
26156: PPUSH
26157: LD_STRING DK-End-16
26159: PPUSH
26160: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
26164: LD_EXP 35
26168: PPUSH
26169: LD_STRING DG-End-17
26171: PPUSH
26172: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
26176: LD_EXP 35
26180: PPUSH
26181: LD_STRING DG-End-18
26183: PPUSH
26184: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
26188: LD_EXP 35
26192: PPUSH
26193: LD_STRING DG-End-19
26195: PPUSH
26196: CALL_OW 88
// end ;
26200: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
26201: LD_EXP 24
26205: IFFALSE 26344
26207: GO 26209
26209: DISABLE
26210: LD_INT 0
26212: PPUSH
26213: PPUSH
// begin repeat wait ( 0 0$1 ) ;
26214: LD_INT 35
26216: PPUSH
26217: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
26221: LD_ADDR_OWVAR 47
26225: PUSH
26226: LD_STRING #X106-2
26228: PUSH
26229: LD_EXP 25
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26238: LD_ADDR_EXP 25
26242: PUSH
26243: LD_EXP 25
26247: PUSH
26248: LD_INT 35
26250: MINUS
26251: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26252: LD_ADDR_VAR 0 2
26256: PUSH
26257: LD_INT 17
26259: PPUSH
26260: LD_INT 22
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 21
26272: PUSH
26273: LD_INT 1
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 23
26282: PUSH
26283: LD_INT 2
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 71
26299: ST_TO_ADDR
// if not outsiders then
26300: LD_VAR 0 2
26304: NOT
26305: IFFALSE 26321
// begin escapeAllowed := false ;
26307: LD_ADDR_EXP 24
26311: PUSH
26312: LD_INT 0
26314: ST_TO_ADDR
// MissionWin ;
26315: CALL 26347 0 0
// exit ;
26319: GO 26344
// end ; if escapeTimer <= 0 0$00 then
26321: LD_EXP 25
26325: PUSH
26326: LD_INT 0
26328: LESSEQUAL
26329: IFFALSE 26340
// begin YouLost ( TimeOut ) ;
26331: LD_STRING TimeOut
26333: PPUSH
26334: CALL_OW 104
// exit ;
26338: GO 26344
// end ; until false ;
26340: LD_INT 0
26342: IFFALSE 26214
// end ;
26344: PPOPN 2
26346: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26347: LD_INT 0
26349: PPUSH
26350: PPUSH
26351: PPUSH
26352: PPUSH
26353: PPUSH
// if tick <= 55 55$00 then
26354: LD_OWVAR 1
26358: PUSH
26359: LD_INT 115500
26361: LESSEQUAL
26362: IFFALSE 26371
// SetAchievement ( ACH_HSPEED_6 ) ;
26364: LD_STRING ACH_HSPEED_6
26366: PPUSH
26367: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26371: LD_EXP 34
26375: PPUSH
26376: LD_STRING DH-End-20
26378: PPUSH
26379: CALL_OW 88
// if rolfDied then
26383: LD_EXP 13
26387: IFFALSE 26402
// AddMedal ( med1 , - 1 ) else
26389: LD_STRING med1
26391: PPUSH
26392: LD_INT 1
26394: NEG
26395: PPUSH
26396: CALL_OW 101
26400: GO 26432
// if not canRolfJoin then
26402: LD_EXP 29
26406: NOT
26407: IFFALSE 26422
// AddMedal ( med1 , - 2 ) else
26409: LD_STRING med1
26411: PPUSH
26412: LD_INT 2
26414: NEG
26415: PPUSH
26416: CALL_OW 101
26420: GO 26432
// AddMedal ( med1 , 1 ) ;
26422: LD_STRING med1
26424: PPUSH
26425: LD_INT 1
26427: PPUSH
26428: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26432: LD_EXP 22
26436: IFFALSE 26444
26438: PUSH
26439: LD_EXP 16
26443: AND
26444: IFFALSE 26458
// AddMedal ( med2 , 1 ) else
26446: LD_STRING med2
26448: PPUSH
26449: LD_INT 1
26451: PPUSH
26452: CALL_OW 101
26456: GO 26507
// if omarHasVehicles then
26458: LD_EXP 22
26462: IFFALSE 26477
// AddMedal ( med2 , - 1 ) else
26464: LD_STRING med2
26466: PPUSH
26467: LD_INT 1
26469: NEG
26470: PPUSH
26471: CALL_OW 101
26475: GO 26507
// if rolfHasVehicles then
26477: LD_EXP 16
26481: IFFALSE 26496
// AddMedal ( med2 , - 2 ) else
26483: LD_STRING med2
26485: PPUSH
26486: LD_INT 2
26488: NEG
26489: PPUSH
26490: CALL_OW 101
26494: GO 26507
// AddMedal ( med2 , - 3 ) ;
26496: LD_STRING med2
26498: PPUSH
26499: LD_INT 3
26501: NEG
26502: PPUSH
26503: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26507: LD_EXP 5
26511: PUSH
26512: LD_INT 20
26514: PUSH
26515: LD_INT 30
26517: PUSH
26518: LD_INT 40
26520: PUSH
26521: LD_INT 50
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: PUSH
26530: LD_OWVAR 67
26534: ARRAY
26535: GREATEREQUAL
26536: IFFALSE 26548
26538: PUSH
26539: LD_EXP 26
26543: PUSH
26544: LD_INT 0
26546: EQUAL
26547: AND
26548: IFFALSE 26562
// AddMedal ( med3 , 1 ) else
26550: LD_STRING med3
26552: PPUSH
26553: LD_INT 1
26555: PPUSH
26556: CALL_OW 101
26560: GO 26592
// if heikeLoseCounter then
26562: LD_EXP 26
26566: IFFALSE 26581
// AddMedal ( med3 , - 1 ) else
26568: LD_STRING med3
26570: PPUSH
26571: LD_INT 1
26573: NEG
26574: PPUSH
26575: CALL_OW 101
26579: GO 26592
// AddMedal ( med3 , - 2 ) ;
26581: LD_STRING med3
26583: PPUSH
26584: LD_INT 2
26586: NEG
26587: PPUSH
26588: CALL_OW 101
// GiveMedals ( MAIN ) ;
26592: LD_STRING MAIN
26594: PPUSH
26595: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26599: LD_INT 22
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 23
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 21
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: LIST
26633: PPUSH
26634: CALL_OW 69
26638: PPUSH
26639: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26643: LD_EXP 34
26647: PPUSH
26648: LD_STRING 06_Heike
26650: PPUSH
26651: CALL_OW 38
// if Aviradze then
26655: LD_EXP 46
26659: IFFALSE 26673
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26661: LD_EXP 46
26665: PPUSH
26666: LD_STRING 06_Aviradze
26668: PPUSH
26669: CALL_OW 38
// if Ibrahim then
26673: LD_EXP 37
26677: IFFALSE 26691
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26679: LD_EXP 37
26683: PPUSH
26684: LD_STRING 06_Ibrahim
26686: PPUSH
26687: CALL_OW 38
// if Kamil then
26691: LD_EXP 38
26695: IFFALSE 26709
// SaveCharacters ( Kamil , 06_Kamil ) ;
26697: LD_EXP 38
26701: PPUSH
26702: LD_STRING 06_Kamil
26704: PPUSH
26705: CALL_OW 38
// if Sophia then
26709: LD_EXP 40
26713: IFFALSE 26727
// SaveCharacters ( Sophia , 06_Sophia ) ;
26715: LD_EXP 40
26719: PPUSH
26720: LD_STRING 06_Sophia
26722: PPUSH
26723: CALL_OW 38
// if Kaia then
26727: LD_EXP 39
26731: IFFALSE 26745
// SaveCharacters ( Kaia , 06_Kaia ) ;
26733: LD_EXP 39
26737: PPUSH
26738: LD_STRING 06_Kaia
26740: PPUSH
26741: CALL_OW 38
// if Givi then
26745: LD_EXP 35
26749: IFFALSE 26763
// SaveCharacters ( Givi , 06_Givi ) ;
26751: LD_EXP 35
26755: PPUSH
26756: LD_STRING 06_Givi
26758: PPUSH
26759: CALL_OW 38
// if Olaf then
26763: LD_EXP 43
26767: IFFALSE 26781
// SaveCharacters ( Olaf , 06_Olaf ) ;
26769: LD_EXP 43
26773: PPUSH
26774: LD_STRING 06_Olaf
26776: PPUSH
26777: CALL_OW 38
// if Mike then
26781: LD_EXP 36
26785: IFFALSE 26799
// SaveCharacters ( Mike , 06_Mike ) ;
26787: LD_EXP 36
26791: PPUSH
26792: LD_STRING 06_Mike
26794: PPUSH
26795: CALL_OW 38
// if Markov then
26799: LD_EXP 41
26803: IFFALSE 26817
// SaveCharacters ( Markov , 06_Markov ) ;
26805: LD_EXP 41
26809: PPUSH
26810: LD_STRING 06_Markov
26812: PPUSH
26813: CALL_OW 38
// if Kurt then
26817: LD_EXP 45
26821: IFFALSE 26835
// SaveCharacters ( Kurt , 06_Kurt ) ;
26823: LD_EXP 45
26827: PPUSH
26828: LD_STRING 06_Kurt
26830: PPUSH
26831: CALL_OW 38
// if heikeSecondSquad then
26835: LD_EXP 49
26839: IFFALSE 26853
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26841: LD_EXP 49
26845: PPUSH
26846: LD_STRING 06_others
26848: PPUSH
26849: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26853: LD_ADDR_VAR 0 3
26857: PUSH
26858: LD_INT 22
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 23
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PPUSH
26882: CALL_OW 69
26886: ST_TO_ADDR
// if tmp then
26887: LD_VAR 0 3
26891: IFFALSE 26905
// SaveCharacters ( tmp , 06_apes ) ;
26893: LD_VAR 0 3
26897: PPUSH
26898: LD_STRING 06_apes
26900: PPUSH
26901: CALL_OW 38
// if Rolf then
26905: LD_EXP 47
26909: IFFALSE 26960
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26911: LD_EXP 47
26915: PPUSH
26916: LD_STRING 06_Rolf
26918: PPUSH
26919: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26923: LD_STRING enableBioCharacter(BIO_ROLF)
26925: PPUSH
26926: CALL_OW 559
// if rolfSquad diff Rolf then
26930: LD_EXP 51
26934: PUSH
26935: LD_EXP 47
26939: DIFF
26940: IFFALSE 26960
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26942: LD_EXP 51
26946: PUSH
26947: LD_EXP 47
26951: DIFF
26952: PPUSH
26953: LD_STRING 06_RolfSquad
26955: PPUSH
26956: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26960: LD_ADDR_VAR 0 3
26964: PUSH
26965: LD_INT 17
26967: PPUSH
26968: LD_INT 21
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PPUSH
26978: CALL_OW 70
26982: ST_TO_ADDR
// if tmp then
26983: LD_VAR 0 3
26987: IFFALSE 27281
// begin tmp2 := [ ] ;
26989: LD_ADDR_VAR 0 4
26993: PUSH
26994: EMPTY
26995: ST_TO_ADDR
// for i in tmp do
26996: LD_ADDR_VAR 0 2
27000: PUSH
27001: LD_VAR 0 3
27005: PUSH
27006: FOR_IN
27007: IFFALSE 27267
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
27009: LD_VAR 0 2
27013: PPUSH
27014: CALL_OW 264
27018: PUSH
27019: LD_INT 32
27021: PUSH
27022: LD_INT 12
27024: PUSH
27025: LD_INT 51
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: IN
27033: IFFALSE 27170
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
27035: LD_ADDR_VAR 0 5
27039: PUSH
27040: LD_VAR 0 2
27044: PPUSH
27045: LD_INT 1
27047: PPUSH
27048: CALL_OW 289
27052: PUSH
27053: LD_VAR 0 2
27057: PPUSH
27058: LD_INT 2
27060: PPUSH
27061: CALL_OW 289
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
27070: LD_ADDR_VAR 0 4
27074: PUSH
27075: LD_VAR 0 4
27079: PPUSH
27080: LD_VAR 0 4
27084: PUSH
27085: LD_INT 1
27087: PLUS
27088: PPUSH
27089: LD_VAR 0 2
27093: PPUSH
27094: CALL_OW 265
27098: PUSH
27099: LD_VAR 0 2
27103: PPUSH
27104: CALL_OW 262
27108: PUSH
27109: LD_VAR 0 2
27113: PPUSH
27114: CALL_OW 263
27118: PUSH
27119: LD_VAR 0 2
27123: PPUSH
27124: CALL_OW 264
27128: PUSH
27129: LD_VAR 0 2
27133: PPUSH
27134: CALL_OW 248
27138: PUSH
27139: LD_VAR 0 2
27143: PPUSH
27144: CALL_OW 256
27148: PUSH
27149: LD_VAR 0 5
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: PPUSH
27163: CALL_OW 1
27167: ST_TO_ADDR
// end else
27168: GO 27265
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
27170: LD_ADDR_VAR 0 4
27174: PUSH
27175: LD_VAR 0 4
27179: PPUSH
27180: LD_VAR 0 4
27184: PUSH
27185: LD_INT 1
27187: PLUS
27188: PPUSH
27189: LD_VAR 0 2
27193: PPUSH
27194: CALL_OW 265
27198: PUSH
27199: LD_VAR 0 2
27203: PPUSH
27204: CALL_OW 262
27208: PUSH
27209: LD_VAR 0 2
27213: PPUSH
27214: CALL_OW 263
27218: PUSH
27219: LD_VAR 0 2
27223: PPUSH
27224: CALL_OW 264
27228: PUSH
27229: LD_VAR 0 2
27233: PPUSH
27234: CALL_OW 248
27238: PUSH
27239: LD_VAR 0 2
27243: PPUSH
27244: CALL_OW 256
27248: PUSH
27249: EMPTY
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL_OW 1
27264: ST_TO_ADDR
27265: GO 27006
27267: POP
27268: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27269: LD_VAR 0 4
27273: PPUSH
27274: LD_STRING 06_Vehicles
27276: PPUSH
27277: CALL_OW 39
// end ; YouWin ;
27281: CALL_OW 103
// end ; end_of_file
27285: LD_VAR 0 1
27289: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27290: LD_INT 0
27292: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_VAR 0 2
27302: PPUSH
27303: CALL 89532 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27307: LD_VAR 0 1
27311: PPUSH
27312: CALL_OW 255
27316: PUSH
27317: LD_INT 2
27319: EQUAL
27320: IFFALSE 27328
27322: PUSH
27323: LD_OWVAR 52
27327: AND
27328: IFFALSE 27345
27330: PUSH
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 263
27340: PUSH
27341: LD_INT 1
27343: EQUAL
27344: AND
27345: IFFALSE 27400
// begin driver := IsDrivenBy ( vehicle ) ;
27347: LD_ADDR_VAR 0 3
27351: PUSH
27352: LD_VAR 0 1
27356: PPUSH
27357: CALL_OW 311
27361: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27362: LD_VAR 0 1
27366: PPUSH
27367: LD_INT 211
27369: PPUSH
27370: LD_INT 101
27372: PPUSH
27373: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27377: LD_VAR 0 3
27381: PPUSH
27382: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27386: LD_VAR 0 3
27390: PPUSH
27391: LD_VAR 0 2
27395: PPUSH
27396: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27400: LD_VAR 0 1
27404: PPUSH
27405: CALL_OW 255
27409: PUSH
27410: LD_INT 3
27412: EQUAL
27413: IFFALSE 27444
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27415: LD_ADDR_EXP 60
27419: PUSH
27420: LD_EXP 60
27424: PPUSH
27425: LD_EXP 60
27429: PUSH
27430: LD_INT 1
27432: PLUS
27433: PPUSH
27434: LD_VAR 0 1
27438: PPUSH
27439: CALL_OW 1
27443: ST_TO_ADDR
// end ;
27444: PPOPN 3
27446: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27447: LD_VAR 0 1
27451: PPUSH
27452: CALL_OW 255
27456: PUSH
27457: LD_INT 8
27459: EQUAL
27460: IFFALSE 27477
27462: PUSH
27463: LD_VAR 0 1
27467: PPUSH
27468: CALL_OW 266
27472: PUSH
27473: LD_INT 4
27475: EQUAL
27476: AND
27477: IFFALSE 27488
// ComUpgrade ( b ) ;
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 146
// end ;
27488: PPOPN 1
27490: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27491: LD_VAR 0 1
27495: PPUSH
27496: CALL 89474 0 1
// if un = Heike then
27500: LD_VAR 0 1
27504: PUSH
27505: LD_EXP 34
27509: EQUAL
27510: IFFALSE 27519
// YouLost ( Heike ) ;
27512: LD_STRING Heike
27514: PPUSH
27515: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
27519: LD_VAR 0 1
27523: PUSH
27524: LD_INT 22
27526: PUSH
27527: LD_INT 2
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 21
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 23
27546: PUSH
27547: LD_INT 2
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: LIST
27558: PPUSH
27559: CALL_OW 69
27563: IN
27564: IFFALSE 27580
// heikeLoseCounter := heikeLoseCounter + 1 ;
27566: LD_ADDR_EXP 26
27570: PUSH
27571: LD_EXP 26
27575: PUSH
27576: LD_INT 1
27578: PLUS
27579: ST_TO_ADDR
// if un = arDepot then
27580: LD_VAR 0 1
27584: PUSH
27585: LD_EXP 48
27589: EQUAL
27590: IFFALSE 27599
// YouLost ( Base ) ;
27592: LD_STRING Base
27594: PPUSH
27595: CALL_OW 104
// if un = Rolf then
27599: LD_VAR 0 1
27603: PUSH
27604: LD_EXP 47
27608: EQUAL
27609: IFFALSE 27619
// rolfDied := true ;
27611: LD_ADDR_EXP 13
27615: PUSH
27616: LD_INT 1
27618: ST_TO_ADDR
// if un in rolfSquad then
27619: LD_VAR 0 1
27623: PUSH
27624: LD_EXP 51
27628: IN
27629: IFFALSE 27647
// rolfSquad := rolfSquad diff un ;
27631: LD_ADDR_EXP 51
27635: PUSH
27636: LD_EXP 51
27640: PUSH
27641: LD_VAR 0 1
27645: DIFF
27646: ST_TO_ADDR
// if un in omarSquad then
27647: LD_VAR 0 1
27651: PUSH
27652: LD_EXP 52
27656: IN
27657: IFFALSE 27675
// omarSquad := omarSquad diff un ;
27659: LD_ADDR_EXP 52
27663: PUSH
27664: LD_EXP 52
27668: PUSH
27669: LD_VAR 0 1
27673: DIFF
27674: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 255
27684: PUSH
27685: LD_INT 3
27687: EQUAL
27688: IFFALSE 27704
// ruLoseCounter := ruLoseCounter + 1 ;
27690: LD_ADDR_EXP 5
27694: PUSH
27695: LD_EXP 5
27699: PUSH
27700: LD_INT 1
27702: PLUS
27703: ST_TO_ADDR
// if un in ruAttackers then
27704: LD_VAR 0 1
27708: PUSH
27709: LD_EXP 61
27713: IN
27714: IFFALSE 27732
// ruAttackers := ruAttackers diff un ;
27716: LD_ADDR_EXP 61
27720: PUSH
27721: LD_EXP 61
27725: PUSH
27726: LD_VAR 0 1
27730: DIFF
27731: ST_TO_ADDR
// end ;
27732: PPOPN 1
27734: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27735: LD_VAR 0 2
27739: PPUSH
27740: CALL_OW 255
27744: PUSH
27745: LD_INT 5
27747: PUSH
27748: LD_INT 8
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: IN
27755: IFFALSE 27772
27757: PUSH
27758: LD_VAR 0 2
27762: PPUSH
27763: CALL_OW 256
27767: PUSH
27768: LD_INT 1000
27770: LESS
27771: AND
27772: IFFALSE 27786
// SetLives ( unit , 1000 ) ;
27774: LD_VAR 0 2
27778: PPUSH
27779: LD_INT 1000
27781: PPUSH
27782: CALL_OW 234
// end ;
27786: PPOPN 2
27788: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27789: LD_INT 0
27791: PPUSH
27792: PPUSH
27793: PPUSH
27794: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 255
27804: PUSH
27805: LD_INT 8
27807: EQUAL
27808: IFFALSE 27816
27810: PUSH
27811: LD_EXP 32
27815: AND
27816: IFFALSE 27833
// ComMoveXY ( un , 221 , 161 ) ;
27818: LD_VAR 0 1
27822: PPUSH
27823: LD_INT 221
27825: PPUSH
27826: LD_INT 161
27828: PPUSH
27829: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27833: LD_VAR 0 2
27837: PPUSH
27838: CALL_OW 255
27842: PUSH
27843: LD_INT 5
27845: EQUAL
27846: IFFALSE 27854
27848: PUSH
27849: LD_EXP 23
27853: AND
27854: IFFALSE 27965
// begin ComMoveXY ( un , 333 , 233 ) ;
27856: LD_VAR 0 1
27860: PPUSH
27861: LD_INT 333
27863: PPUSH
27864: LD_INT 233
27866: PPUSH
27867: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27871: LD_INT 334
27873: PPUSH
27874: LD_INT 241
27876: PPUSH
27877: CALL_OW 428
27881: NOT
27882: IFTRUE 27906
27884: PUSH
27885: LD_INT 334
27887: PPUSH
27888: LD_INT 241
27890: PPUSH
27891: CALL_OW 428
27895: PPUSH
27896: CALL_OW 266
27900: PUSH
27901: LD_INT 4
27903: EQUAL
27904: NOT
27905: OR
27906: IFFALSE 27910
// exit ;
27908: GO 28494
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27910: LD_VAR 0 1
27914: PPUSH
27915: LD_INT 334
27917: PPUSH
27918: LD_INT 241
27920: PPUSH
27921: CALL_OW 428
27925: PPUSH
27926: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27930: LD_VAR 0 1
27934: PPUSH
27935: LD_INT 1
27937: PPUSH
27938: CALL_OW 183
// AddComExitBuilding ( un ) ;
27942: LD_VAR 0 1
27946: PPUSH
27947: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27951: LD_VAR 0 1
27955: PPUSH
27956: LD_EXP 44
27960: PPUSH
27961: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27965: LD_VAR 0 1
27969: PPUSH
27970: CALL_OW 255
27974: PUSH
27975: LD_INT 3
27977: EQUAL
27978: IFFALSE 27993
27980: PUSH
27981: LD_VAR 0 1
27985: PUSH
27986: LD_EXP 61
27990: IN
27991: NOT
27992: AND
27993: IFFALSE 28494
// begin if not IsInArea ( un , ruMainBase ) then
27995: LD_VAR 0 1
27999: PPUSH
28000: LD_INT 10
28002: PPUSH
28003: CALL_OW 308
28007: NOT
28008: IFFALSE 28025
// ComMoveXY ( un , 62 , 98 ) ;
28010: LD_VAR 0 1
28014: PPUSH
28015: LD_INT 62
28017: PPUSH
28018: LD_INT 98
28020: PPUSH
28021: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28025: LD_INT 35
28027: PPUSH
28028: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 302
28041: NOT
28042: IFTRUE 28058
28044: PUSH
28045: LD_VAR 0 1
28049: PPUSH
28050: LD_INT 10
28052: PPUSH
28053: CALL_OW 308
28057: OR
28058: IFFALSE 28025
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28060: LD_ADDR_EXP 59
28064: PUSH
28065: LD_EXP 59
28069: PPUSH
28070: LD_EXP 59
28074: PUSH
28075: LD_INT 1
28077: PLUS
28078: PPUSH
28079: LD_VAR 0 1
28083: PPUSH
28084: CALL_OW 1
28088: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
28089: LD_ADDR_VAR 0 8
28093: PUSH
28094: LD_INT 72
28096: PUSH
28097: LD_INT 12
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: ST_TO_ADDR
// if tmp then
28104: LD_VAR 0 8
28108: IFFALSE 28223
// for i in tmp do
28110: LD_ADDR_VAR 0 5
28114: PUSH
28115: LD_VAR 0 8
28119: PUSH
28120: FOR_IN
28121: IFFALSE 28221
// if UnitsInside ( i ) < 6 then
28123: LD_VAR 0 5
28127: PPUSH
28128: CALL_OW 313
28132: PUSH
28133: LD_INT 6
28135: LESS
28136: IFFALSE 28219
// begin AddComEnterUnit ( un , i ) ;
28138: LD_VAR 0 1
28142: PPUSH
28143: LD_VAR 0 5
28147: PPUSH
28148: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
28152: LD_VAR 0 8
28156: PPUSH
28157: LD_INT 22
28159: PUSH
28160: LD_INT 23
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PPUSH
28170: LD_INT 2
28172: PPUSH
28173: CALL_OW 12
28177: ARRAY
28178: PPUSH
28179: LD_INT 1
28181: PPUSH
28182: LD_INT 1
28184: PPUSH
28185: LD_INT 44
28187: PUSH
28188: LD_INT 46
28190: PUSH
28191: LD_INT 47
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: PPUSH
28202: LD_INT 3
28204: PPUSH
28205: CALL_OW 12
28209: ARRAY
28210: PPUSH
28211: CALL_OW 185
// exit ;
28215: POP
28216: POP
28217: GO 28494
// end ;
28219: GO 28120
28221: POP
28222: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28223: LD_ADDR_VAR 0 8
28227: PUSH
28228: LD_INT 10
28230: PPUSH
28231: LD_INT 22
28233: PUSH
28234: LD_INT 3
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 50
28243: PUSH
28244: EMPTY
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 30
28252: PUSH
28253: LD_INT 4
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 30
28262: PUSH
28263: LD_INT 5
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 30
28272: PUSH
28273: LD_INT 32
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 30
28282: PUSH
28283: LD_INT 31
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 70
28306: ST_TO_ADDR
// if not tmp then
28307: LD_VAR 0 8
28311: NOT
28312: IFFALSE 28331
// begin ComMoveXY ( un , 83 , 133 ) ;
28314: LD_VAR 0 1
28318: PPUSH
28319: LD_INT 83
28321: PPUSH
28322: LD_INT 133
28324: PPUSH
28325: CALL_OW 111
// exit ;
28329: GO 28494
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28331: LD_ADDR_VAR 0 6
28335: PUSH
28336: LD_VAR 0 1
28340: PPUSH
28341: LD_VAR 0 8
28345: PPUSH
28346: LD_INT 1
28348: PPUSH
28349: LD_INT 1
28351: PPUSH
28352: CALL 35265 0 4
28356: PUSH
28357: FOR_IN
28358: IFFALSE 28492
// begin case GetBType ( b ) of b_armoury , b_barracks :
28360: LD_VAR 0 6
28364: PPUSH
28365: CALL_OW 266
28369: PUSH
28370: LD_INT 4
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28384
28376: LD_INT 5
28378: DOUBLE
28379: EQUAL
28380: IFTRUE 28384
28382: GO 28395
28384: POP
// p := 6 ; b_breastwork , b_bunker :
28385: LD_ADDR_VAR 0 7
28389: PUSH
28390: LD_INT 6
28392: ST_TO_ADDR
28393: GO 28421
28395: LD_INT 31
28397: DOUBLE
28398: EQUAL
28399: IFTRUE 28409
28401: LD_INT 32
28403: DOUBLE
28404: EQUAL
28405: IFTRUE 28409
28407: GO 28420
28409: POP
// p := 1 ; end ;
28410: LD_ADDR_VAR 0 7
28414: PUSH
28415: LD_INT 1
28417: ST_TO_ADDR
28418: GO 28421
28420: POP
// if UnitsInside ( b ) < p then
28421: LD_VAR 0 6
28425: PPUSH
28426: CALL_OW 313
28430: PUSH
28431: LD_VAR 0 7
28435: LESS
28436: IFFALSE 28490
// begin ComEnterUnit ( un , b ) ;
28438: LD_VAR 0 1
28442: PPUSH
28443: LD_VAR 0 6
28447: PPUSH
28448: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28452: LD_VAR 0 6
28456: PPUSH
28457: CALL_OW 266
28461: PUSH
28462: LD_INT 4
28464: PUSH
28465: LD_INT 5
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: IN
28472: IFFALSE 28486
// AddComChangeProfession ( un , class_soldier ) ;
28474: LD_VAR 0 1
28478: PPUSH
28479: LD_INT 1
28481: PPUSH
28482: CALL_OW 183
// exit ;
28486: POP
28487: POP
28488: GO 28494
// end ; end ;
28490: GO 28357
28492: POP
28493: POP
// end ; end ;
28494: PPOPN 8
28496: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28497: LD_INT 0
28499: PPUSH
28500: PPUSH
28501: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28502: LD_VAR 0 2
28506: PPUSH
28507: CALL_OW 255
28511: PUSH
28512: LD_INT 3
28514: EQUAL
28515: IFFALSE 28532
28517: PUSH
28518: LD_VAR 0 2
28522: PPUSH
28523: CALL_OW 257
28527: PUSH
28528: LD_INT 1
28530: EQUAL
28531: AND
28532: IFFALSE 28547
28534: PUSH
28535: LD_VAR 0 2
28539: PUSH
28540: LD_EXP 59
28544: IN
28545: NOT
28546: AND
28547: IFFALSE 28862
// begin ComMoveToArea ( un , ruMainBase ) ;
28549: LD_VAR 0 2
28553: PPUSH
28554: LD_INT 10
28556: PPUSH
28557: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28561: LD_INT 35
28563: PPUSH
28564: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28568: LD_VAR 0 2
28572: PPUSH
28573: CALL_OW 302
28577: NOT
28578: IFTRUE 28594
28580: PUSH
28581: LD_VAR 0 2
28585: PPUSH
28586: LD_INT 10
28588: PPUSH
28589: CALL_OW 308
28593: OR
28594: IFFALSE 28561
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28596: LD_ADDR_EXP 59
28600: PUSH
28601: LD_EXP 59
28605: PPUSH
28606: LD_EXP 59
28610: PUSH
28611: LD_INT 1
28613: PLUS
28614: PPUSH
28615: LD_VAR 0 2
28619: PPUSH
28620: CALL_OW 1
28624: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28625: LD_ADDR_VAR 0 4
28629: PUSH
28630: LD_INT 10
28632: PPUSH
28633: LD_INT 22
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 50
28645: PUSH
28646: EMPTY
28647: LIST
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: LD_INT 30
28654: PUSH
28655: LD_INT 4
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 30
28664: PUSH
28665: LD_INT 5
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 30
28674: PUSH
28675: LD_INT 32
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 30
28684: PUSH
28685: LD_INT 31
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: PPUSH
28704: CALL_OW 70
28708: ST_TO_ADDR
// if not tmp then
28709: LD_VAR 0 4
28713: NOT
28714: IFFALSE 28733
// begin ComMoveXY ( un , 83 , 133 ) ;
28716: LD_VAR 0 2
28720: PPUSH
28721: LD_INT 83
28723: PPUSH
28724: LD_INT 133
28726: PPUSH
28727: CALL_OW 111
// exit ;
28731: GO 29113
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28733: LD_ADDR_VAR 0 5
28737: PUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: LD_VAR 0 4
28747: PPUSH
28748: LD_INT 1
28750: PPUSH
28751: LD_INT 1
28753: PPUSH
28754: CALL 35265 0 4
28758: PUSH
28759: FOR_IN
28760: IFFALSE 28860
// begin case GetBType ( b ) of b_armoury , b_barracks :
28762: LD_VAR 0 5
28766: PPUSH
28767: CALL_OW 266
28771: PUSH
28772: LD_INT 4
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28786
28778: LD_INT 5
28780: DOUBLE
28781: EQUAL
28782: IFTRUE 28786
28784: GO 28797
28786: POP
// p := 6 ; b_breastwork , b_bunker :
28787: LD_ADDR_VAR 0 3
28791: PUSH
28792: LD_INT 6
28794: ST_TO_ADDR
28795: GO 28823
28797: LD_INT 31
28799: DOUBLE
28800: EQUAL
28801: IFTRUE 28811
28803: LD_INT 32
28805: DOUBLE
28806: EQUAL
28807: IFTRUE 28811
28809: GO 28822
28811: POP
// p := 1 ; end ;
28812: LD_ADDR_VAR 0 3
28816: PUSH
28817: LD_INT 1
28819: ST_TO_ADDR
28820: GO 28823
28822: POP
// if UnitsInside ( b ) < p then
28823: LD_VAR 0 5
28827: PPUSH
28828: CALL_OW 313
28832: PUSH
28833: LD_VAR 0 3
28837: LESS
28838: IFFALSE 28858
// begin ComEnterUnit ( un , b ) ;
28840: LD_VAR 0 2
28844: PPUSH
28845: LD_VAR 0 5
28849: PPUSH
28850: CALL_OW 120
// exit ;
28854: POP
28855: POP
28856: GO 29113
// end ; end ;
28858: GO 28759
28860: POP
28861: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28862: LD_VAR 0 2
28866: PUSH
28867: LD_EXP 59
28871: IN
28872: IFFALSE 28889
28874: PUSH
28875: LD_VAR 0 2
28879: PPUSH
28880: CALL_OW 257
28884: PUSH
28885: LD_INT 1
28887: EQUAL
28888: AND
28889: IFFALSE 29113
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28891: LD_ADDR_VAR 0 4
28895: PUSH
28896: LD_INT 10
28898: PPUSH
28899: LD_INT 22
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 50
28911: PUSH
28912: EMPTY
28913: LIST
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: LD_INT 30
28920: PUSH
28921: LD_INT 4
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 30
28930: PUSH
28931: LD_INT 5
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 30
28940: PUSH
28941: LD_INT 32
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 30
28950: PUSH
28951: LD_INT 31
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: LIST
28969: PPUSH
28970: CALL_OW 70
28974: ST_TO_ADDR
// if not tmp then
28975: LD_VAR 0 4
28979: NOT
28980: IFFALSE 28984
// exit ;
28982: GO 29113
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28984: LD_ADDR_VAR 0 5
28988: PUSH
28989: LD_VAR 0 2
28993: PPUSH
28994: LD_VAR 0 4
28998: PPUSH
28999: LD_INT 1
29001: PPUSH
29002: LD_INT 1
29004: PPUSH
29005: CALL 35265 0 4
29009: PUSH
29010: FOR_IN
29011: IFFALSE 29111
// begin case GetBType ( b ) of b_armoury , b_barracks :
29013: LD_VAR 0 5
29017: PPUSH
29018: CALL_OW 266
29022: PUSH
29023: LD_INT 4
29025: DOUBLE
29026: EQUAL
29027: IFTRUE 29037
29029: LD_INT 5
29031: DOUBLE
29032: EQUAL
29033: IFTRUE 29037
29035: GO 29048
29037: POP
// p := 6 ; b_breastwork , b_bunker :
29038: LD_ADDR_VAR 0 3
29042: PUSH
29043: LD_INT 6
29045: ST_TO_ADDR
29046: GO 29074
29048: LD_INT 31
29050: DOUBLE
29051: EQUAL
29052: IFTRUE 29062
29054: LD_INT 32
29056: DOUBLE
29057: EQUAL
29058: IFTRUE 29062
29060: GO 29073
29062: POP
// p := 1 ; end ;
29063: LD_ADDR_VAR 0 3
29067: PUSH
29068: LD_INT 1
29070: ST_TO_ADDR
29071: GO 29074
29073: POP
// if UnitsInside ( b ) < p then
29074: LD_VAR 0 5
29078: PPUSH
29079: CALL_OW 313
29083: PUSH
29084: LD_VAR 0 3
29088: LESS
29089: IFFALSE 29109
// begin ComEnterUnit ( un , b ) ;
29091: LD_VAR 0 2
29095: PPUSH
29096: LD_VAR 0 5
29100: PPUSH
29101: CALL_OW 120
// exit ;
29105: POP
29106: POP
29107: GO 29113
// end ; end ;
29109: GO 29010
29111: POP
29112: POP
// end ; end ;
29113: PPOPN 5
29115: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
29116: LD_VAR 0 1
29120: PUSH
29121: LD_INT 2
29123: EQUAL
29124: IFFALSE 29143
29126: PUSH
29127: LD_VAR 0 2
29131: PUSH
29132: LD_INT 5
29134: PUSH
29135: LD_INT 8
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: IN
29142: AND
29143: IFFALSE 29152
// YouLost ( FriendlyFire ) ;
29145: LD_STRING FriendlyFire
29147: PPUSH
29148: CALL_OW 104
// end ;
29152: PPOPN 2
29154: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
29155: LD_VAR 0 1
29159: PPUSH
29160: CALL_OW 255
29164: PUSH
29165: LD_INT 8
29167: EQUAL
29168: IFFALSE 29185
29170: PUSH
29171: LD_VAR 0 1
29175: PPUSH
29176: CALL_OW 266
29180: PUSH
29181: LD_INT 5
29183: EQUAL
29184: AND
29185: IFFALSE 29199
// SetClass ( unit , class_mortar ) ;
29187: LD_VAR 0 2
29191: PPUSH
29192: LD_INT 8
29194: PPUSH
29195: CALL_OW 336
// end ; end_of_file
29199: PPOPN 2
29201: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
29202: LD_INT 6
29204: PPUSH
29205: LD_INT 1
29207: PPUSH
29208: CALL_OW 287
29212: PUSH
29213: LD_INT 20
29215: PUSH
29216: LD_INT 18
29218: PUSH
29219: LD_INT 16
29221: PUSH
29222: LD_INT 12
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: PUSH
29231: LD_OWVAR 67
29235: ARRAY
29236: LESS
29237: IFFALSE 29264
29239: GO 29241
29241: DISABLE
// begin enable ;
29242: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
29243: LD_INT 1
29245: PPUSH
29246: LD_INT 5
29248: PPUSH
29249: CALL_OW 12
29253: PPUSH
29254: LD_INT 6
29256: PPUSH
29257: LD_INT 1
29259: PPUSH
29260: CALL_OW 55
// end ;
29264: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
29265: LD_INT 50
29267: PPUSH
29268: CALL_OW 13
29272: IFFALSE 29305
29274: PUSH
29275: LD_OWVAR 1
29279: PUSH
29280: LD_INT 58800
29282: PUSH
29283: LD_INT 56700
29285: PUSH
29286: LD_INT 54600
29288: PUSH
29289: LD_INT 52500
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: PUSH
29298: LD_OWVAR 67
29302: ARRAY
29303: LESS
29304: AND
29305: IFFALSE 29323
29307: PUSH
29308: LD_INT 21
29310: PPUSH
29311: LD_INT 1
29313: PPUSH
29314: CALL_OW 287
29318: PUSH
29319: LD_INT 10
29321: LESS
29322: AND
29323: IFFALSE 29365
29325: GO 29327
29327: DISABLE
// begin enable ;
29328: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29329: LD_INT 35
29331: PPUSH
29332: LD_INT 350
29334: PPUSH
29335: CALL_OW 12
29339: PPUSH
29340: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29344: LD_INT 1
29346: PPUSH
29347: LD_INT 5
29349: PPUSH
29350: CALL_OW 12
29354: PPUSH
29355: LD_INT 21
29357: PPUSH
29358: LD_INT 1
29360: PPUSH
29361: CALL_OW 55
// end ; end_of_file
29365: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29366: LD_EXP 18
29370: IFFALSE 29378
29372: PUSH
29373: LD_EXP 20
29377: AND
29378: IFTRUE 29394
29380: PUSH
29381: LD_EXP 17
29385: IFFALSE 29393
29387: PUSH
29388: LD_EXP 19
29392: AND
29393: OR
29394: IFFALSE 29721
29396: GO 29398
29398: DISABLE
// begin enable ;
29399: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29400: LD_EXP 18
29404: IFFALSE 29412
29406: PUSH
29407: LD_EXP 20
29411: AND
29412: IFFALSE 29428
29414: PUSH
29415: LD_EXP 17
29419: IFFALSE 29427
29421: PUSH
29422: LD_EXP 19
29426: AND
29427: AND
29428: IFFALSE 29565
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29430: LD_ADDR_OWVAR 47
29434: PUSH
29435: LD_STRING #X106-1a
29437: PUSH
29438: LD_EXP 21
29442: PUSH
29443: LD_INT 16
29445: PPUSH
29446: LD_INT 22
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 21
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 33
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 58
29478: PUSH
29479: EMPTY
29480: LIST
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: PPUSH
29488: CALL_OW 70
29492: MINUS
29493: PPUSH
29494: CALL 70090 0 1
29498: PUSH
29499: LD_STRING #X106-3a
29501: PUSH
29502: LD_EXP 20
29506: PUSH
29507: LD_STRING #X106-1
29509: PUSH
29510: LD_EXP 51
29514: PUSH
29515: LD_INT 0
29517: PLUS
29518: PUSH
29519: LD_EXP 51
29523: PPUSH
29524: LD_INT 55
29526: PUSH
29527: EMPTY
29528: LIST
29529: PPUSH
29530: CALL_OW 72
29534: PUSH
29535: LD_INT 0
29537: PLUS
29538: MINUS
29539: PPUSH
29540: CALL 70090 0 1
29544: PUSH
29545: LD_STRING #X106-3
29547: PUSH
29548: LD_EXP 19
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: ST_TO_ADDR
// end else
29563: GO 29721
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29565: LD_EXP 18
29569: IFFALSE 29577
29571: PUSH
29572: LD_EXP 20
29576: AND
29577: IFFALSE 29664
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29579: LD_ADDR_OWVAR 47
29583: PUSH
29584: LD_STRING #X106-1a
29586: PUSH
29587: LD_EXP 21
29591: PUSH
29592: LD_INT 16
29594: PPUSH
29595: LD_INT 22
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 21
29607: PUSH
29608: LD_INT 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 33
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 58
29627: PUSH
29628: EMPTY
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: PPUSH
29637: CALL_OW 70
29641: MINUS
29642: PPUSH
29643: CALL 70090 0 1
29647: PUSH
29648: LD_STRING #X106-3a
29650: PUSH
29651: LD_EXP 20
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: ST_TO_ADDR
// end else
29662: GO 29721
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29664: LD_ADDR_OWVAR 47
29668: PUSH
29669: LD_STRING #X106-1
29671: PUSH
29672: LD_EXP 51
29676: PUSH
29677: LD_INT 0
29679: PLUS
29680: PUSH
29681: LD_EXP 51
29685: PPUSH
29686: LD_INT 55
29688: PUSH
29689: EMPTY
29690: LIST
29691: PPUSH
29692: CALL_OW 72
29696: PUSH
29697: LD_INT 0
29699: PLUS
29700: MINUS
29701: PPUSH
29702: CALL 70090 0 1
29706: PUSH
29707: LD_STRING #X106-3
29709: PUSH
29710: LD_EXP 19
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// end ; end ; end_of_file
29721: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29722: LD_INT 0
29724: PPUSH
29725: PPUSH
// if exist_mode then
29726: LD_VAR 0 2
29730: IFFALSE 29776
// begin unit := CreateCharacter ( prefix & ident ) ;
29732: LD_ADDR_VAR 0 5
29736: PUSH
29737: LD_VAR 0 3
29741: PUSH
29742: LD_VAR 0 1
29746: STR
29747: PPUSH
29748: CALL_OW 34
29752: ST_TO_ADDR
// if unit then
29753: LD_VAR 0 5
29757: IFFALSE 29774
// DeleteCharacters ( prefix & ident ) ;
29759: LD_VAR 0 3
29763: PUSH
29764: LD_VAR 0 1
29768: STR
29769: PPUSH
29770: CALL_OW 40
// end else
29774: GO 29791
// unit := NewCharacter ( ident ) ;
29776: LD_ADDR_VAR 0 5
29780: PUSH
29781: LD_VAR 0 1
29785: PPUSH
29786: CALL_OW 25
29790: ST_TO_ADDR
// result := unit ;
29791: LD_ADDR_VAR 0 4
29795: PUSH
29796: LD_VAR 0 5
29800: ST_TO_ADDR
// end ;
29801: LD_VAR 0 4
29805: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
29806: LD_INT 0
29808: PPUSH
29809: PPUSH
// if exist_mode then
29810: LD_VAR 0 2
29814: IFFALSE 29839
// unit := CreateCharacter ( prefix & ident ) else
29816: LD_ADDR_VAR 0 5
29820: PUSH
29821: LD_VAR 0 3
29825: PUSH
29826: LD_VAR 0 1
29830: STR
29831: PPUSH
29832: CALL_OW 34
29836: ST_TO_ADDR
29837: GO 29854
// unit := NewCharacter ( ident ) ;
29839: LD_ADDR_VAR 0 5
29843: PUSH
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 25
29853: ST_TO_ADDR
// result := unit ;
29854: LD_ADDR_VAR 0 4
29858: PUSH
29859: LD_VAR 0 5
29863: ST_TO_ADDR
// end ;
29864: LD_VAR 0 4
29868: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29869: LD_INT 0
29871: PPUSH
29872: PPUSH
// if not side or not nation then
29873: LD_VAR 0 1
29877: NOT
29878: IFTRUE 29887
29880: PUSH
29881: LD_VAR 0 2
29885: NOT
29886: OR
29887: IFFALSE 29891
// exit ;
29889: GO 30685
// case nation of nation_american :
29891: LD_VAR 0 2
29895: PUSH
29896: LD_INT 1
29898: DOUBLE
29899: EQUAL
29900: IFTRUE 29904
29902: GO 30126
29904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
29905: LD_ADDR_VAR 0 4
29909: PUSH
29910: LD_INT 35
29912: PUSH
29913: LD_INT 45
29915: PUSH
29916: LD_INT 46
29918: PUSH
29919: LD_INT 47
29921: PUSH
29922: LD_INT 82
29924: PUSH
29925: LD_INT 83
29927: PUSH
29928: LD_INT 84
29930: PUSH
29931: LD_INT 85
29933: PUSH
29934: LD_INT 86
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: LD_INT 6
29945: PUSH
29946: LD_INT 15
29948: PUSH
29949: LD_INT 16
29951: PUSH
29952: LD_INT 7
29954: PUSH
29955: LD_INT 12
29957: PUSH
29958: LD_INT 13
29960: PUSH
29961: LD_INT 10
29963: PUSH
29964: LD_INT 14
29966: PUSH
29967: LD_INT 20
29969: PUSH
29970: LD_INT 21
29972: PUSH
29973: LD_INT 22
29975: PUSH
29976: LD_INT 25
29978: PUSH
29979: LD_INT 32
29981: PUSH
29982: LD_INT 27
29984: PUSH
29985: LD_INT 36
29987: PUSH
29988: LD_INT 69
29990: PUSH
29991: LD_INT 39
29993: PUSH
29994: LD_INT 34
29996: PUSH
29997: LD_INT 40
29999: PUSH
30000: LD_INT 48
30002: PUSH
30003: LD_INT 49
30005: PUSH
30006: LD_INT 50
30008: PUSH
30009: LD_INT 51
30011: PUSH
30012: LD_INT 52
30014: PUSH
30015: LD_INT 53
30017: PUSH
30018: LD_INT 54
30020: PUSH
30021: LD_INT 55
30023: PUSH
30024: LD_INT 56
30026: PUSH
30027: LD_INT 57
30029: PUSH
30030: LD_INT 58
30032: PUSH
30033: LD_INT 59
30035: PUSH
30036: LD_INT 60
30038: PUSH
30039: LD_INT 61
30041: PUSH
30042: LD_INT 62
30044: PUSH
30045: LD_INT 80
30047: PUSH
30048: LD_INT 82
30050: PUSH
30051: LD_INT 83
30053: PUSH
30054: LD_INT 84
30056: PUSH
30057: LD_INT 85
30059: PUSH
30060: LD_INT 86
30062: PUSH
30063: LD_INT 90
30065: PUSH
30066: LD_INT 93
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: ST_TO_ADDR
30124: GO 30607
30126: LD_INT 2
30128: DOUBLE
30129: EQUAL
30130: IFTRUE 30134
30132: GO 30368
30134: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30135: LD_ADDR_VAR 0 4
30139: PUSH
30140: LD_INT 35
30142: PUSH
30143: LD_INT 45
30145: PUSH
30146: LD_INT 46
30148: PUSH
30149: LD_INT 47
30151: PUSH
30152: LD_INT 82
30154: PUSH
30155: LD_INT 83
30157: PUSH
30158: LD_INT 84
30160: PUSH
30161: LD_INT 85
30163: PUSH
30164: LD_INT 87
30166: PUSH
30167: LD_INT 70
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: LD_INT 11
30175: PUSH
30176: LD_INT 3
30178: PUSH
30179: LD_INT 4
30181: PUSH
30182: LD_INT 5
30184: PUSH
30185: LD_INT 6
30187: PUSH
30188: LD_INT 15
30190: PUSH
30191: LD_INT 18
30193: PUSH
30194: LD_INT 7
30196: PUSH
30197: LD_INT 17
30199: PUSH
30200: LD_INT 8
30202: PUSH
30203: LD_INT 20
30205: PUSH
30206: LD_INT 21
30208: PUSH
30209: LD_INT 22
30211: PUSH
30212: LD_INT 72
30214: PUSH
30215: LD_INT 26
30217: PUSH
30218: LD_INT 69
30220: PUSH
30221: LD_INT 39
30223: PUSH
30224: LD_INT 40
30226: PUSH
30227: LD_INT 41
30229: PUSH
30230: LD_INT 42
30232: PUSH
30233: LD_INT 43
30235: PUSH
30236: LD_INT 48
30238: PUSH
30239: LD_INT 49
30241: PUSH
30242: LD_INT 50
30244: PUSH
30245: LD_INT 51
30247: PUSH
30248: LD_INT 52
30250: PUSH
30251: LD_INT 53
30253: PUSH
30254: LD_INT 54
30256: PUSH
30257: LD_INT 55
30259: PUSH
30260: LD_INT 56
30262: PUSH
30263: LD_INT 60
30265: PUSH
30266: LD_INT 61
30268: PUSH
30269: LD_INT 62
30271: PUSH
30272: LD_INT 66
30274: PUSH
30275: LD_INT 67
30277: PUSH
30278: LD_INT 68
30280: PUSH
30281: LD_INT 81
30283: PUSH
30284: LD_INT 82
30286: PUSH
30287: LD_INT 83
30289: PUSH
30290: LD_INT 84
30292: PUSH
30293: LD_INT 85
30295: PUSH
30296: LD_INT 87
30298: PUSH
30299: LD_INT 88
30301: PUSH
30302: LD_INT 92
30304: PUSH
30305: LD_INT 94
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: ST_TO_ADDR
30366: GO 30607
30368: LD_INT 3
30370: DOUBLE
30371: EQUAL
30372: IFTRUE 30376
30374: GO 30606
30376: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30377: LD_ADDR_VAR 0 4
30381: PUSH
30382: LD_INT 46
30384: PUSH
30385: LD_INT 47
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 82
30396: PUSH
30397: LD_INT 83
30399: PUSH
30400: LD_INT 84
30402: PUSH
30403: LD_INT 85
30405: PUSH
30406: LD_INT 86
30408: PUSH
30409: LD_INT 11
30411: PUSH
30412: LD_INT 9
30414: PUSH
30415: LD_INT 20
30417: PUSH
30418: LD_INT 19
30420: PUSH
30421: LD_INT 21
30423: PUSH
30424: LD_INT 24
30426: PUSH
30427: LD_INT 22
30429: PUSH
30430: LD_INT 25
30432: PUSH
30433: LD_INT 28
30435: PUSH
30436: LD_INT 29
30438: PUSH
30439: LD_INT 30
30441: PUSH
30442: LD_INT 31
30444: PUSH
30445: LD_INT 37
30447: PUSH
30448: LD_INT 38
30450: PUSH
30451: LD_INT 32
30453: PUSH
30454: LD_INT 27
30456: PUSH
30457: LD_INT 33
30459: PUSH
30460: LD_INT 69
30462: PUSH
30463: LD_INT 39
30465: PUSH
30466: LD_INT 34
30468: PUSH
30469: LD_INT 40
30471: PUSH
30472: LD_INT 71
30474: PUSH
30475: LD_INT 23
30477: PUSH
30478: LD_INT 44
30480: PUSH
30481: LD_INT 48
30483: PUSH
30484: LD_INT 49
30486: PUSH
30487: LD_INT 50
30489: PUSH
30490: LD_INT 51
30492: PUSH
30493: LD_INT 52
30495: PUSH
30496: LD_INT 53
30498: PUSH
30499: LD_INT 54
30501: PUSH
30502: LD_INT 55
30504: PUSH
30505: LD_INT 56
30507: PUSH
30508: LD_INT 57
30510: PUSH
30511: LD_INT 58
30513: PUSH
30514: LD_INT 59
30516: PUSH
30517: LD_INT 63
30519: PUSH
30520: LD_INT 64
30522: PUSH
30523: LD_INT 65
30525: PUSH
30526: LD_INT 82
30528: PUSH
30529: LD_INT 83
30531: PUSH
30532: LD_INT 84
30534: PUSH
30535: LD_INT 85
30537: PUSH
30538: LD_INT 86
30540: PUSH
30541: LD_INT 89
30543: PUSH
30544: LD_INT 91
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: ST_TO_ADDR
30604: GO 30607
30606: POP
// if state > - 1 and state < 3 then
30607: LD_VAR 0 3
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: GREATER
30616: IFFALSE 30628
30618: PUSH
30619: LD_VAR 0 3
30623: PUSH
30624: LD_INT 3
30626: LESS
30627: AND
30628: IFFALSE 30685
// for i in result do
30630: LD_ADDR_VAR 0 5
30634: PUSH
30635: LD_VAR 0 4
30639: PUSH
30640: FOR_IN
30641: IFFALSE 30683
// if GetTech ( i , side ) <> state then
30643: LD_VAR 0 5
30647: PPUSH
30648: LD_VAR 0 1
30652: PPUSH
30653: CALL_OW 321
30657: PUSH
30658: LD_VAR 0 3
30662: NONEQUAL
30663: IFFALSE 30681
// result := result diff i ;
30665: LD_ADDR_VAR 0 4
30669: PUSH
30670: LD_VAR 0 4
30674: PUSH
30675: LD_VAR 0 5
30679: DIFF
30680: ST_TO_ADDR
30681: GO 30640
30683: POP
30684: POP
// end ;
30685: LD_VAR 0 4
30689: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30690: LD_INT 0
30692: PPUSH
30693: PPUSH
30694: PPUSH
// result := true ;
30695: LD_ADDR_VAR 0 3
30699: PUSH
30700: LD_INT 1
30702: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30703: LD_ADDR_VAR 0 5
30707: PUSH
30708: LD_VAR 0 2
30712: PPUSH
30713: CALL_OW 480
30717: ST_TO_ADDR
// if not tmp then
30718: LD_VAR 0 5
30722: NOT
30723: IFFALSE 30727
// exit ;
30725: GO 30776
// for i in tmp do
30727: LD_ADDR_VAR 0 4
30731: PUSH
30732: LD_VAR 0 5
30736: PUSH
30737: FOR_IN
30738: IFFALSE 30774
// if GetTech ( i , side ) <> state_researched then
30740: LD_VAR 0 4
30744: PPUSH
30745: LD_VAR 0 1
30749: PPUSH
30750: CALL_OW 321
30754: PUSH
30755: LD_INT 2
30757: NONEQUAL
30758: IFFALSE 30772
// begin result := false ;
30760: LD_ADDR_VAR 0 3
30764: PUSH
30765: LD_INT 0
30767: ST_TO_ADDR
// exit ;
30768: POP
30769: POP
30770: GO 30776
// end ;
30772: GO 30737
30774: POP
30775: POP
// end ;
30776: LD_VAR 0 3
30780: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30781: LD_INT 0
30783: PPUSH
30784: PPUSH
30785: PPUSH
30786: PPUSH
30787: PPUSH
30788: PPUSH
30789: PPUSH
30790: PPUSH
30791: PPUSH
30792: PPUSH
30793: PPUSH
30794: PPUSH
30795: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30796: LD_VAR 0 1
30800: NOT
30801: IFTRUE 30818
30803: PUSH
30804: LD_VAR 0 1
30808: PPUSH
30809: CALL_OW 257
30813: PUSH
30814: LD_INT 9
30816: NONEQUAL
30817: OR
30818: IFFALSE 30822
// exit ;
30820: GO 31401
// side := GetSide ( unit ) ;
30822: LD_ADDR_VAR 0 9
30826: PUSH
30827: LD_VAR 0 1
30831: PPUSH
30832: CALL_OW 255
30836: ST_TO_ADDR
// tech_space := tech_spacanom ;
30837: LD_ADDR_VAR 0 12
30841: PUSH
30842: LD_INT 29
30844: ST_TO_ADDR
// tech_time := tech_taurad ;
30845: LD_ADDR_VAR 0 13
30849: PUSH
30850: LD_INT 28
30852: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30853: LD_ADDR_VAR 0 11
30857: PUSH
30858: LD_VAR 0 1
30862: PPUSH
30863: CALL_OW 310
30867: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30868: LD_VAR 0 11
30872: PPUSH
30873: CALL_OW 247
30877: PUSH
30878: LD_INT 2
30880: EQUAL
30881: IFFALSE 30885
// exit ;
30883: GO 31401
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30885: LD_ADDR_VAR 0 8
30889: PUSH
30890: LD_INT 81
30892: PUSH
30893: LD_VAR 0 9
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 3
30904: PUSH
30905: LD_INT 21
30907: PUSH
30908: LD_INT 3
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PPUSH
30923: CALL_OW 69
30927: ST_TO_ADDR
// if not tmp then
30928: LD_VAR 0 8
30932: NOT
30933: IFFALSE 30937
// exit ;
30935: GO 31401
// if in_unit then
30937: LD_VAR 0 11
30941: IFFALSE 30965
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30943: LD_ADDR_VAR 0 10
30947: PUSH
30948: LD_VAR 0 8
30952: PPUSH
30953: LD_VAR 0 11
30957: PPUSH
30958: CALL_OW 74
30962: ST_TO_ADDR
30963: GO 30985
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30965: LD_ADDR_VAR 0 10
30969: PUSH
30970: LD_VAR 0 8
30974: PPUSH
30975: LD_VAR 0 1
30979: PPUSH
30980: CALL_OW 74
30984: ST_TO_ADDR
// if not enemy then
30985: LD_VAR 0 10
30989: NOT
30990: IFFALSE 30994
// exit ;
30992: GO 31401
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30994: LD_VAR 0 11
30998: IFFALSE 31020
31000: PUSH
31001: LD_VAR 0 11
31005: PPUSH
31006: LD_VAR 0 10
31010: PPUSH
31011: CALL_OW 296
31015: PUSH
31016: LD_INT 13
31018: GREATER
31019: AND
31020: IFTRUE 31042
31022: PUSH
31023: LD_VAR 0 1
31027: PPUSH
31028: LD_VAR 0 10
31032: PPUSH
31033: CALL_OW 296
31037: PUSH
31038: LD_INT 12
31040: GREATER
31041: OR
31042: IFFALSE 31046
// exit ;
31044: GO 31401
// missile := [ 1 ] ;
31046: LD_ADDR_VAR 0 14
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: EMPTY
31055: LIST
31056: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31057: LD_VAR 0 9
31061: PPUSH
31062: LD_VAR 0 12
31066: PPUSH
31067: CALL_OW 325
31071: IFFALSE 31100
// missile := Replace ( missile , missile + 1 , 2 ) ;
31073: LD_ADDR_VAR 0 14
31077: PUSH
31078: LD_VAR 0 14
31082: PPUSH
31083: LD_VAR 0 14
31087: PUSH
31088: LD_INT 1
31090: PLUS
31091: PPUSH
31092: LD_INT 2
31094: PPUSH
31095: CALL_OW 1
31099: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31100: LD_VAR 0 9
31104: PPUSH
31105: LD_VAR 0 13
31109: PPUSH
31110: CALL_OW 325
31114: IFFALSE 31138
31116: PUSH
31117: LD_VAR 0 10
31121: PPUSH
31122: CALL_OW 255
31126: PPUSH
31127: LD_VAR 0 13
31131: PPUSH
31132: CALL_OW 325
31136: NOT
31137: AND
31138: IFFALSE 31167
// missile := Replace ( missile , missile + 1 , 3 ) ;
31140: LD_ADDR_VAR 0 14
31144: PUSH
31145: LD_VAR 0 14
31149: PPUSH
31150: LD_VAR 0 14
31154: PUSH
31155: LD_INT 1
31157: PLUS
31158: PPUSH
31159: LD_INT 3
31161: PPUSH
31162: CALL_OW 1
31166: ST_TO_ADDR
// if missile < 2 then
31167: LD_VAR 0 14
31171: PUSH
31172: LD_INT 2
31174: LESS
31175: IFFALSE 31179
// exit ;
31177: GO 31401
// x := GetX ( enemy ) ;
31179: LD_ADDR_VAR 0 4
31183: PUSH
31184: LD_VAR 0 10
31188: PPUSH
31189: CALL_OW 250
31193: ST_TO_ADDR
// y := GetY ( enemy ) ;
31194: LD_ADDR_VAR 0 5
31198: PUSH
31199: LD_VAR 0 10
31203: PPUSH
31204: CALL_OW 251
31208: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31209: LD_ADDR_VAR 0 6
31213: PUSH
31214: LD_VAR 0 4
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PPUSH
31223: LD_INT 1
31225: PPUSH
31226: CALL_OW 12
31230: PLUS
31231: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31232: LD_ADDR_VAR 0 7
31236: PUSH
31237: LD_VAR 0 5
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PPUSH
31246: LD_INT 1
31248: PPUSH
31249: CALL_OW 12
31253: PLUS
31254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31255: LD_VAR 0 6
31259: PPUSH
31260: LD_VAR 0 7
31264: PPUSH
31265: CALL_OW 488
31269: NOT
31270: IFFALSE 31292
// begin _x := x ;
31272: LD_ADDR_VAR 0 6
31276: PUSH
31277: LD_VAR 0 4
31281: ST_TO_ADDR
// _y := y ;
31282: LD_ADDR_VAR 0 7
31286: PUSH
31287: LD_VAR 0 5
31291: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31292: LD_ADDR_VAR 0 3
31296: PUSH
31297: LD_INT 1
31299: PPUSH
31300: LD_VAR 0 14
31304: PPUSH
31305: CALL_OW 12
31309: ST_TO_ADDR
// case i of 1 :
31310: LD_VAR 0 3
31314: PUSH
31315: LD_INT 1
31317: DOUBLE
31318: EQUAL
31319: IFTRUE 31323
31321: GO 31340
31323: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31324: LD_VAR 0 1
31328: PPUSH
31329: LD_VAR 0 10
31333: PPUSH
31334: CALL_OW 115
31338: GO 31401
31340: LD_INT 2
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31370
31348: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31349: LD_VAR 0 1
31353: PPUSH
31354: LD_VAR 0 6
31358: PPUSH
31359: LD_VAR 0 7
31363: PPUSH
31364: CALL_OW 153
31368: GO 31401
31370: LD_INT 3
31372: DOUBLE
31373: EQUAL
31374: IFTRUE 31378
31376: GO 31400
31378: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31379: LD_VAR 0 1
31383: PPUSH
31384: LD_VAR 0 6
31388: PPUSH
31389: LD_VAR 0 7
31393: PPUSH
31394: CALL_OW 154
31398: GO 31401
31400: POP
// end ;
31401: LD_VAR 0 2
31405: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31406: LD_INT 0
31408: PPUSH
31409: PPUSH
31410: PPUSH
31411: PPUSH
31412: PPUSH
31413: PPUSH
// if not unit or not building then
31414: LD_VAR 0 1
31418: NOT
31419: IFTRUE 31428
31421: PUSH
31422: LD_VAR 0 2
31426: NOT
31427: OR
31428: IFFALSE 31432
// exit ;
31430: GO 31590
// x := GetX ( building ) ;
31432: LD_ADDR_VAR 0 5
31436: PUSH
31437: LD_VAR 0 2
31441: PPUSH
31442: CALL_OW 250
31446: ST_TO_ADDR
// y := GetY ( building ) ;
31447: LD_ADDR_VAR 0 6
31451: PUSH
31452: LD_VAR 0 2
31456: PPUSH
31457: CALL_OW 251
31461: ST_TO_ADDR
// for i := 0 to 5 do
31462: LD_ADDR_VAR 0 4
31466: PUSH
31467: DOUBLE
31468: LD_INT 0
31470: DEC
31471: ST_TO_ADDR
31472: LD_INT 5
31474: PUSH
31475: FOR_TO
31476: IFFALSE 31588
// begin _x := ShiftX ( x , i , 3 ) ;
31478: LD_ADDR_VAR 0 7
31482: PUSH
31483: LD_VAR 0 5
31487: PPUSH
31488: LD_VAR 0 4
31492: PPUSH
31493: LD_INT 3
31495: PPUSH
31496: CALL_OW 272
31500: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31501: LD_ADDR_VAR 0 8
31505: PUSH
31506: LD_VAR 0 6
31510: PPUSH
31511: LD_VAR 0 4
31515: PPUSH
31516: LD_INT 3
31518: PPUSH
31519: CALL_OW 273
31523: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31524: LD_VAR 0 7
31528: PPUSH
31529: LD_VAR 0 8
31533: PPUSH
31534: CALL_OW 488
31538: NOT
31539: IFFALSE 31543
// continue ;
31541: GO 31475
// if HexInfo ( _x , _y ) = 0 then
31543: LD_VAR 0 7
31547: PPUSH
31548: LD_VAR 0 8
31552: PPUSH
31553: CALL_OW 428
31557: PUSH
31558: LD_INT 0
31560: EQUAL
31561: IFFALSE 31586
// begin ComMoveXY ( unit , _x , _y ) ;
31563: LD_VAR 0 1
31567: PPUSH
31568: LD_VAR 0 7
31572: PPUSH
31573: LD_VAR 0 8
31577: PPUSH
31578: CALL_OW 111
// exit ;
31582: POP
31583: POP
31584: GO 31590
// end ; end ;
31586: GO 31475
31588: POP
31589: POP
// end ;
31590: LD_VAR 0 3
31594: RET
// export function ScanBase ( side , base_area ) ; begin
31595: LD_INT 0
31597: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31598: LD_ADDR_VAR 0 3
31602: PUSH
31603: LD_VAR 0 2
31607: PPUSH
31608: LD_INT 81
31610: PUSH
31611: LD_VAR 0 1
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PPUSH
31620: CALL_OW 70
31624: ST_TO_ADDR
// end ;
31625: LD_VAR 0 3
31629: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31630: LD_INT 0
31632: PPUSH
31633: PPUSH
31634: PPUSH
31635: PPUSH
// result := false ;
31636: LD_ADDR_VAR 0 2
31640: PUSH
31641: LD_INT 0
31643: ST_TO_ADDR
// side := GetSide ( unit ) ;
31644: LD_ADDR_VAR 0 3
31648: PUSH
31649: LD_VAR 0 1
31653: PPUSH
31654: CALL_OW 255
31658: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31659: LD_ADDR_VAR 0 4
31663: PUSH
31664: LD_VAR 0 1
31668: PPUSH
31669: CALL_OW 248
31673: ST_TO_ADDR
// case nat of 1 :
31674: LD_VAR 0 4
31678: PUSH
31679: LD_INT 1
31681: DOUBLE
31682: EQUAL
31683: IFTRUE 31687
31685: GO 31698
31687: POP
// tech := tech_lassight ; 2 :
31688: LD_ADDR_VAR 0 5
31692: PUSH
31693: LD_INT 12
31695: ST_TO_ADDR
31696: GO 31737
31698: LD_INT 2
31700: DOUBLE
31701: EQUAL
31702: IFTRUE 31706
31704: GO 31717
31706: POP
// tech := tech_mortar ; 3 :
31707: LD_ADDR_VAR 0 5
31711: PUSH
31712: LD_INT 41
31714: ST_TO_ADDR
31715: GO 31737
31717: LD_INT 3
31719: DOUBLE
31720: EQUAL
31721: IFTRUE 31725
31723: GO 31736
31725: POP
// tech := tech_bazooka ; end ;
31726: LD_ADDR_VAR 0 5
31730: PUSH
31731: LD_INT 44
31733: ST_TO_ADDR
31734: GO 31737
31736: POP
// if Researched ( side , tech ) then
31737: LD_VAR 0 3
31741: PPUSH
31742: LD_VAR 0 5
31746: PPUSH
31747: CALL_OW 325
31751: IFFALSE 31778
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31753: LD_ADDR_VAR 0 2
31757: PUSH
31758: LD_INT 5
31760: PUSH
31761: LD_INT 8
31763: PUSH
31764: LD_INT 9
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: LIST
31771: PUSH
31772: LD_VAR 0 4
31776: ARRAY
31777: ST_TO_ADDR
// end ;
31778: LD_VAR 0 2
31782: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31783: LD_INT 0
31785: PPUSH
31786: PPUSH
31787: PPUSH
// if not mines then
31788: LD_VAR 0 2
31792: NOT
31793: IFFALSE 31797
// exit ;
31795: GO 31941
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31797: LD_ADDR_VAR 0 5
31801: PUSH
31802: LD_INT 81
31804: PUSH
31805: LD_VAR 0 1
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 3
31816: PUSH
31817: LD_INT 21
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PPUSH
31835: CALL_OW 69
31839: ST_TO_ADDR
// for i in mines do
31840: LD_ADDR_VAR 0 4
31844: PUSH
31845: LD_VAR 0 2
31849: PUSH
31850: FOR_IN
31851: IFFALSE 31939
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31853: LD_VAR 0 4
31857: PUSH
31858: LD_INT 1
31860: ARRAY
31861: PPUSH
31862: LD_VAR 0 4
31866: PUSH
31867: LD_INT 2
31869: ARRAY
31870: PPUSH
31871: CALL_OW 458
31875: NOT
31876: IFFALSE 31880
// continue ;
31878: GO 31850
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31880: LD_VAR 0 4
31884: PUSH
31885: LD_INT 1
31887: ARRAY
31888: PPUSH
31889: LD_VAR 0 4
31893: PUSH
31894: LD_INT 2
31896: ARRAY
31897: PPUSH
31898: CALL_OW 428
31902: PUSH
31903: LD_VAR 0 5
31907: IN
31908: IFFALSE 31937
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31910: LD_VAR 0 4
31914: PUSH
31915: LD_INT 1
31917: ARRAY
31918: PPUSH
31919: LD_VAR 0 4
31923: PUSH
31924: LD_INT 2
31926: ARRAY
31927: PPUSH
31928: LD_VAR 0 1
31932: PPUSH
31933: CALL_OW 456
// end ;
31937: GO 31850
31939: POP
31940: POP
// end ;
31941: LD_VAR 0 3
31945: RET
// export function Count ( array ) ; begin
31946: LD_INT 0
31948: PPUSH
// result := array + 0 ;
31949: LD_ADDR_VAR 0 2
31953: PUSH
31954: LD_VAR 0 1
31958: PUSH
31959: LD_INT 0
31961: PLUS
31962: ST_TO_ADDR
// end ;
31963: LD_VAR 0 2
31967: RET
// export function IsEmpty ( building ) ; begin
31968: LD_INT 0
31970: PPUSH
// if not building then
31971: LD_VAR 0 1
31975: NOT
31976: IFFALSE 31980
// exit ;
31978: GO 32023
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31980: LD_ADDR_VAR 0 2
31984: PUSH
31985: LD_VAR 0 1
31989: PUSH
31990: LD_INT 22
31992: PUSH
31993: LD_VAR 0 1
31997: PPUSH
31998: CALL_OW 255
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 58
32009: PUSH
32010: EMPTY
32011: LIST
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PPUSH
32017: CALL_OW 69
32021: IN
32022: ST_TO_ADDR
// end ;
32023: LD_VAR 0 2
32027: RET
// export function IsNotFull ( building ) ; var places ; begin
32028: LD_INT 0
32030: PPUSH
32031: PPUSH
// if not building then
32032: LD_VAR 0 1
32036: NOT
32037: IFFALSE 32041
// exit ;
32039: GO 32069
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32041: LD_ADDR_VAR 0 2
32045: PUSH
32046: LD_VAR 0 1
32050: PPUSH
32051: LD_INT 3
32053: PUSH
32054: LD_INT 62
32056: PUSH
32057: EMPTY
32058: LIST
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PPUSH
32064: CALL_OW 72
32068: ST_TO_ADDR
// end ;
32069: LD_VAR 0 2
32073: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32074: LD_INT 0
32076: PPUSH
32077: PPUSH
32078: PPUSH
32079: PPUSH
// tmp := [ ] ;
32080: LD_ADDR_VAR 0 3
32084: PUSH
32085: EMPTY
32086: ST_TO_ADDR
// list := [ ] ;
32087: LD_ADDR_VAR 0 5
32091: PUSH
32092: EMPTY
32093: ST_TO_ADDR
// for i = 16 to 25 do
32094: LD_ADDR_VAR 0 4
32098: PUSH
32099: DOUBLE
32100: LD_INT 16
32102: DEC
32103: ST_TO_ADDR
32104: LD_INT 25
32106: PUSH
32107: FOR_TO
32108: IFFALSE 32181
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32110: LD_ADDR_VAR 0 3
32114: PUSH
32115: LD_VAR 0 3
32119: PUSH
32120: LD_INT 22
32122: PUSH
32123: LD_VAR 0 1
32127: PPUSH
32128: CALL_OW 255
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 91
32139: PUSH
32140: LD_VAR 0 1
32144: PUSH
32145: LD_INT 6
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 30
32155: PUSH
32156: LD_VAR 0 4
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: LIST
32169: PUSH
32170: EMPTY
32171: LIST
32172: PPUSH
32173: CALL_OW 69
32177: ADD
32178: ST_TO_ADDR
32179: GO 32107
32181: POP
32182: POP
// for i = 1 to tmp do
32183: LD_ADDR_VAR 0 4
32187: PUSH
32188: DOUBLE
32189: LD_INT 1
32191: DEC
32192: ST_TO_ADDR
32193: LD_VAR 0 3
32197: PUSH
32198: FOR_TO
32199: IFFALSE 32287
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32201: LD_ADDR_VAR 0 5
32205: PUSH
32206: LD_VAR 0 5
32210: PUSH
32211: LD_VAR 0 3
32215: PUSH
32216: LD_VAR 0 4
32220: ARRAY
32221: PPUSH
32222: CALL_OW 266
32226: PUSH
32227: LD_VAR 0 3
32231: PUSH
32232: LD_VAR 0 4
32236: ARRAY
32237: PPUSH
32238: CALL_OW 250
32242: PUSH
32243: LD_VAR 0 3
32247: PUSH
32248: LD_VAR 0 4
32252: ARRAY
32253: PPUSH
32254: CALL_OW 251
32258: PUSH
32259: LD_VAR 0 3
32263: PUSH
32264: LD_VAR 0 4
32268: ARRAY
32269: PPUSH
32270: CALL_OW 254
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: PUSH
32281: EMPTY
32282: LIST
32283: ADD
32284: ST_TO_ADDR
32285: GO 32198
32287: POP
32288: POP
// result := list ;
32289: LD_ADDR_VAR 0 2
32293: PUSH
32294: LD_VAR 0 5
32298: ST_TO_ADDR
// end ;
32299: LD_VAR 0 2
32303: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32304: LD_INT 0
32306: PPUSH
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
32311: PPUSH
32312: PPUSH
// if not factory then
32313: LD_VAR 0 1
32317: NOT
32318: IFFALSE 32322
// exit ;
32320: GO 32925
// if control = control_apeman then
32322: LD_VAR 0 4
32326: PUSH
32327: LD_INT 5
32329: EQUAL
32330: IFFALSE 32439
// begin tmp := UnitsInside ( factory ) ;
32332: LD_ADDR_VAR 0 8
32336: PUSH
32337: LD_VAR 0 1
32341: PPUSH
32342: CALL_OW 313
32346: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32347: LD_VAR 0 8
32351: PPUSH
32352: LD_INT 25
32354: PUSH
32355: LD_INT 12
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PPUSH
32362: CALL_OW 72
32366: NOT
32367: IFFALSE 32377
// control := control_manual ;
32369: LD_ADDR_VAR 0 4
32373: PUSH
32374: LD_INT 1
32376: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32377: LD_ADDR_VAR 0 8
32381: PUSH
32382: LD_VAR 0 1
32386: PPUSH
32387: CALL 32074 0 1
32391: ST_TO_ADDR
// if tmp then
32392: LD_VAR 0 8
32396: IFFALSE 32439
// begin for i in tmp do
32398: LD_ADDR_VAR 0 7
32402: PUSH
32403: LD_VAR 0 8
32407: PUSH
32408: FOR_IN
32409: IFFALSE 32437
// if i [ 1 ] = b_ext_radio then
32411: LD_VAR 0 7
32415: PUSH
32416: LD_INT 1
32418: ARRAY
32419: PUSH
32420: LD_INT 22
32422: EQUAL
32423: IFFALSE 32435
// begin control := control_remote ;
32425: LD_ADDR_VAR 0 4
32429: PUSH
32430: LD_INT 2
32432: ST_TO_ADDR
// break ;
32433: GO 32437
// end ;
32435: GO 32408
32437: POP
32438: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32439: LD_VAR 0 1
32443: PPUSH
32444: LD_VAR 0 2
32448: PPUSH
32449: LD_VAR 0 3
32453: PPUSH
32454: LD_VAR 0 4
32458: PPUSH
32459: LD_VAR 0 5
32463: PPUSH
32464: CALL_OW 448
32468: IFFALSE 32503
// begin result := [ chassis , engine , control , weapon ] ;
32470: LD_ADDR_VAR 0 6
32474: PUSH
32475: LD_VAR 0 2
32479: PUSH
32480: LD_VAR 0 3
32484: PUSH
32485: LD_VAR 0 4
32489: PUSH
32490: LD_VAR 0 5
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: ST_TO_ADDR
// exit ;
32501: GO 32925
// end ; _chassis := AvailableChassisList ( factory ) ;
32503: LD_ADDR_VAR 0 9
32507: PUSH
32508: LD_VAR 0 1
32512: PPUSH
32513: CALL_OW 475
32517: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32518: LD_ADDR_VAR 0 11
32522: PUSH
32523: LD_VAR 0 1
32527: PPUSH
32528: CALL_OW 476
32532: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32533: LD_ADDR_VAR 0 12
32537: PUSH
32538: LD_VAR 0 1
32542: PPUSH
32543: CALL_OW 477
32547: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32548: LD_ADDR_VAR 0 10
32552: PUSH
32553: LD_VAR 0 1
32557: PPUSH
32558: CALL_OW 478
32562: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32563: LD_VAR 0 9
32567: NOT
32568: IFTRUE 32577
32570: PUSH
32571: LD_VAR 0 11
32575: NOT
32576: OR
32577: IFTRUE 32586
32579: PUSH
32580: LD_VAR 0 12
32584: NOT
32585: OR
32586: IFTRUE 32595
32588: PUSH
32589: LD_VAR 0 10
32593: NOT
32594: OR
32595: IFFALSE 32630
// begin result := [ chassis , engine , control , weapon ] ;
32597: LD_ADDR_VAR 0 6
32601: PUSH
32602: LD_VAR 0 2
32606: PUSH
32607: LD_VAR 0 3
32611: PUSH
32612: LD_VAR 0 4
32616: PUSH
32617: LD_VAR 0 5
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: ST_TO_ADDR
// exit ;
32628: GO 32925
// end ; if not chassis in _chassis then
32630: LD_VAR 0 2
32634: PUSH
32635: LD_VAR 0 9
32639: IN
32640: NOT
32641: IFFALSE 32667
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32643: LD_ADDR_VAR 0 2
32647: PUSH
32648: LD_VAR 0 9
32652: PUSH
32653: LD_INT 1
32655: PPUSH
32656: LD_VAR 0 9
32660: PPUSH
32661: CALL_OW 12
32665: ARRAY
32666: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32667: LD_VAR 0 2
32671: PPUSH
32672: LD_VAR 0 3
32676: PPUSH
32677: CALL 32930 0 2
32681: NOT
32682: IFFALSE 32743
// repeat engine := _engine [ 1 ] ;
32684: LD_ADDR_VAR 0 3
32688: PUSH
32689: LD_VAR 0 11
32693: PUSH
32694: LD_INT 1
32696: ARRAY
32697: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32698: LD_ADDR_VAR 0 11
32702: PUSH
32703: LD_VAR 0 11
32707: PPUSH
32708: LD_INT 1
32710: PPUSH
32711: CALL_OW 3
32715: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32716: LD_VAR 0 2
32720: PPUSH
32721: LD_VAR 0 3
32725: PPUSH
32726: CALL 32930 0 2
32730: IFTRUE 32741
32732: PUSH
32733: LD_VAR 0 11
32737: PUSH
32738: EMPTY
32739: EQUAL
32740: OR
32741: IFFALSE 32684
// if not control in _control then
32743: LD_VAR 0 4
32747: PUSH
32748: LD_VAR 0 12
32752: IN
32753: NOT
32754: IFFALSE 32780
// control := _control [ rand ( 1 , _control ) ] ;
32756: LD_ADDR_VAR 0 4
32760: PUSH
32761: LD_VAR 0 12
32765: PUSH
32766: LD_INT 1
32768: PPUSH
32769: LD_VAR 0 12
32773: PPUSH
32774: CALL_OW 12
32778: ARRAY
32779: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32780: LD_VAR 0 2
32784: PPUSH
32785: LD_VAR 0 5
32789: PPUSH
32790: CALL 33152 0 2
32794: NOT
32795: IFFALSE 32856
// repeat weapon := _weapon [ 1 ] ;
32797: LD_ADDR_VAR 0 5
32801: PUSH
32802: LD_VAR 0 10
32806: PUSH
32807: LD_INT 1
32809: ARRAY
32810: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32811: LD_ADDR_VAR 0 10
32815: PUSH
32816: LD_VAR 0 10
32820: PPUSH
32821: LD_INT 1
32823: PPUSH
32824: CALL_OW 3
32828: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32829: LD_VAR 0 2
32833: PPUSH
32834: LD_VAR 0 5
32838: PPUSH
32839: CALL 33152 0 2
32843: IFTRUE 32854
32845: PUSH
32846: LD_VAR 0 10
32850: PUSH
32851: EMPTY
32852: EQUAL
32853: OR
32854: IFFALSE 32797
// result := [ ] ;
32856: LD_ADDR_VAR 0 6
32860: PUSH
32861: EMPTY
32862: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32863: LD_VAR 0 1
32867: PPUSH
32868: LD_VAR 0 2
32872: PPUSH
32873: LD_VAR 0 3
32877: PPUSH
32878: LD_VAR 0 4
32882: PPUSH
32883: LD_VAR 0 5
32887: PPUSH
32888: CALL_OW 448
32892: IFFALSE 32925
// result := [ chassis , engine , control , weapon ] ;
32894: LD_ADDR_VAR 0 6
32898: PUSH
32899: LD_VAR 0 2
32903: PUSH
32904: LD_VAR 0 3
32908: PUSH
32909: LD_VAR 0 4
32913: PUSH
32914: LD_VAR 0 5
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: ST_TO_ADDR
// end ;
32925: LD_VAR 0 6
32929: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32930: LD_INT 0
32932: PPUSH
// if not chassis or not engine then
32933: LD_VAR 0 1
32937: NOT
32938: IFTRUE 32947
32940: PUSH
32941: LD_VAR 0 2
32945: NOT
32946: OR
32947: IFFALSE 32951
// exit ;
32949: GO 33147
// case engine of engine_solar :
32951: LD_VAR 0 2
32955: PUSH
32956: LD_INT 2
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 33002
32964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: LD_INT 11
32972: PUSH
32973: LD_INT 12
32975: PUSH
32976: LD_INT 13
32978: PUSH
32979: LD_INT 14
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: LD_INT 3
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: ST_TO_ADDR
33000: GO 33131
33002: LD_INT 1
33004: DOUBLE
33005: EQUAL
33006: IFTRUE 33010
33008: GO 33072
33010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33011: LD_ADDR_VAR 0 3
33015: PUSH
33016: LD_INT 11
33018: PUSH
33019: LD_INT 12
33021: PUSH
33022: LD_INT 13
33024: PUSH
33025: LD_INT 14
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: LD_INT 3
33036: PUSH
33037: LD_INT 4
33039: PUSH
33040: LD_INT 5
33042: PUSH
33043: LD_INT 21
33045: PUSH
33046: LD_INT 23
33048: PUSH
33049: LD_INT 22
33051: PUSH
33052: LD_INT 24
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: ST_TO_ADDR
33070: GO 33131
33072: LD_INT 3
33074: DOUBLE
33075: EQUAL
33076: IFTRUE 33080
33078: GO 33130
33080: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33081: LD_ADDR_VAR 0 3
33085: PUSH
33086: LD_INT 13
33088: PUSH
33089: LD_INT 14
33091: PUSH
33092: LD_INT 2
33094: PUSH
33095: LD_INT 3
33097: PUSH
33098: LD_INT 4
33100: PUSH
33101: LD_INT 5
33103: PUSH
33104: LD_INT 21
33106: PUSH
33107: LD_INT 22
33109: PUSH
33110: LD_INT 23
33112: PUSH
33113: LD_INT 24
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
33128: GO 33131
33130: POP
// result := ( chassis in result ) ;
33131: LD_ADDR_VAR 0 3
33135: PUSH
33136: LD_VAR 0 1
33140: PUSH
33141: LD_VAR 0 3
33145: IN
33146: ST_TO_ADDR
// end ;
33147: LD_VAR 0 3
33151: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33152: LD_INT 0
33154: PPUSH
// if not chassis or not weapon then
33155: LD_VAR 0 1
33159: NOT
33160: IFTRUE 33169
33162: PUSH
33163: LD_VAR 0 2
33167: NOT
33168: OR
33169: IFFALSE 33173
// exit ;
33171: GO 34233
// case weapon of us_machine_gun :
33173: LD_VAR 0 2
33177: PUSH
33178: LD_INT 2
33180: DOUBLE
33181: EQUAL
33182: IFTRUE 33186
33184: GO 33216
33186: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33187: LD_ADDR_VAR 0 3
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: LD_INT 4
33203: PUSH
33204: LD_INT 5
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: ST_TO_ADDR
33214: GO 34217
33216: LD_INT 3
33218: DOUBLE
33219: EQUAL
33220: IFTRUE 33224
33222: GO 33254
33224: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33225: LD_ADDR_VAR 0 3
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: LD_INT 3
33238: PUSH
33239: LD_INT 4
33241: PUSH
33242: LD_INT 5
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: ST_TO_ADDR
33252: GO 34217
33254: LD_INT 11
33256: DOUBLE
33257: EQUAL
33258: IFTRUE 33262
33260: GO 33292
33262: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33263: LD_ADDR_VAR 0 3
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: LD_INT 2
33273: PUSH
33274: LD_INT 3
33276: PUSH
33277: LD_INT 4
33279: PUSH
33280: LD_INT 5
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: ST_TO_ADDR
33290: GO 34217
33292: LD_INT 4
33294: DOUBLE
33295: EQUAL
33296: IFTRUE 33300
33298: GO 33326
33300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33301: LD_ADDR_VAR 0 3
33305: PUSH
33306: LD_INT 2
33308: PUSH
33309: LD_INT 3
33311: PUSH
33312: LD_INT 4
33314: PUSH
33315: LD_INT 5
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: ST_TO_ADDR
33324: GO 34217
33326: LD_INT 5
33328: DOUBLE
33329: EQUAL
33330: IFTRUE 33334
33332: GO 33360
33334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33335: LD_ADDR_VAR 0 3
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: LD_INT 3
33345: PUSH
33346: LD_INT 4
33348: PUSH
33349: LD_INT 5
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: ST_TO_ADDR
33358: GO 34217
33360: LD_INT 9
33362: DOUBLE
33363: EQUAL
33364: IFTRUE 33368
33366: GO 33394
33368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33369: LD_ADDR_VAR 0 3
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: LD_INT 4
33382: PUSH
33383: LD_INT 5
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: ST_TO_ADDR
33392: GO 34217
33394: LD_INT 7
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33402
33400: GO 33428
33402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33403: LD_ADDR_VAR 0 3
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: LD_INT 4
33416: PUSH
33417: LD_INT 5
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: ST_TO_ADDR
33426: GO 34217
33428: LD_INT 12
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33462
33436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33437: LD_ADDR_VAR 0 3
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: ST_TO_ADDR
33460: GO 34217
33462: LD_INT 13
33464: DOUBLE
33465: EQUAL
33466: IFTRUE 33470
33468: GO 33496
33470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33471: LD_ADDR_VAR 0 3
33475: PUSH
33476: LD_INT 2
33478: PUSH
33479: LD_INT 3
33481: PUSH
33482: LD_INT 4
33484: PUSH
33485: LD_INT 5
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
33494: GO 34217
33496: LD_INT 14
33498: DOUBLE
33499: EQUAL
33500: IFTRUE 33504
33502: GO 33522
33504: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33505: LD_ADDR_VAR 0 3
33509: PUSH
33510: LD_INT 4
33512: PUSH
33513: LD_INT 5
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: ST_TO_ADDR
33520: GO 34217
33522: LD_INT 6
33524: DOUBLE
33525: EQUAL
33526: IFTRUE 33530
33528: GO 33548
33530: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33531: LD_ADDR_VAR 0 3
33535: PUSH
33536: LD_INT 4
33538: PUSH
33539: LD_INT 5
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: ST_TO_ADDR
33546: GO 34217
33548: LD_INT 10
33550: DOUBLE
33551: EQUAL
33552: IFTRUE 33556
33554: GO 33574
33556: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33557: LD_ADDR_VAR 0 3
33561: PUSH
33562: LD_INT 4
33564: PUSH
33565: LD_INT 5
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: ST_TO_ADDR
33572: GO 34217
33574: LD_INT 22
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33582
33580: GO 33608
33582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33583: LD_ADDR_VAR 0 3
33587: PUSH
33588: LD_INT 11
33590: PUSH
33591: LD_INT 12
33593: PUSH
33594: LD_INT 13
33596: PUSH
33597: LD_INT 14
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
33606: GO 34217
33608: LD_INT 23
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33642
33616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33617: LD_ADDR_VAR 0 3
33621: PUSH
33622: LD_INT 11
33624: PUSH
33625: LD_INT 12
33627: PUSH
33628: LD_INT 13
33630: PUSH
33631: LD_INT 14
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: ST_TO_ADDR
33640: GO 34217
33642: LD_INT 24
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33676
33650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33651: LD_ADDR_VAR 0 3
33655: PUSH
33656: LD_INT 11
33658: PUSH
33659: LD_INT 12
33661: PUSH
33662: LD_INT 13
33664: PUSH
33665: LD_INT 14
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: ST_TO_ADDR
33674: GO 34217
33676: LD_INT 30
33678: DOUBLE
33679: EQUAL
33680: IFTRUE 33684
33682: GO 33710
33684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33685: LD_ADDR_VAR 0 3
33689: PUSH
33690: LD_INT 11
33692: PUSH
33693: LD_INT 12
33695: PUSH
33696: LD_INT 13
33698: PUSH
33699: LD_INT 14
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: ST_TO_ADDR
33708: GO 34217
33710: LD_INT 25
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33736
33718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_INT 13
33726: PUSH
33727: LD_INT 14
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: ST_TO_ADDR
33734: GO 34217
33736: LD_INT 27
33738: DOUBLE
33739: EQUAL
33740: IFTRUE 33744
33742: GO 33762
33744: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33745: LD_ADDR_VAR 0 3
33749: PUSH
33750: LD_INT 13
33752: PUSH
33753: LD_INT 14
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: ST_TO_ADDR
33760: GO 34217
33762: LD_INT 92
33764: DOUBLE
33765: EQUAL
33766: IFTRUE 33770
33768: GO 33796
33770: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33771: LD_ADDR_VAR 0 3
33775: PUSH
33776: LD_INT 11
33778: PUSH
33779: LD_INT 12
33781: PUSH
33782: LD_INT 13
33784: PUSH
33785: LD_INT 14
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: ST_TO_ADDR
33794: GO 34217
33796: LD_INT 28
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33804
33802: GO 33822
33804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33805: LD_ADDR_VAR 0 3
33809: PUSH
33810: LD_INT 13
33812: PUSH
33813: LD_INT 14
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: ST_TO_ADDR
33820: GO 34217
33822: LD_INT 29
33824: DOUBLE
33825: EQUAL
33826: IFTRUE 33830
33828: GO 33848
33830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33831: LD_ADDR_VAR 0 3
33835: PUSH
33836: LD_INT 13
33838: PUSH
33839: LD_INT 14
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: ST_TO_ADDR
33846: GO 34217
33848: LD_INT 31
33850: DOUBLE
33851: EQUAL
33852: IFTRUE 33856
33854: GO 33874
33856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33857: LD_ADDR_VAR 0 3
33861: PUSH
33862: LD_INT 13
33864: PUSH
33865: LD_INT 14
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: ST_TO_ADDR
33872: GO 34217
33874: LD_INT 26
33876: DOUBLE
33877: EQUAL
33878: IFTRUE 33882
33880: GO 33900
33882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33883: LD_ADDR_VAR 0 3
33887: PUSH
33888: LD_INT 13
33890: PUSH
33891: LD_INT 14
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: ST_TO_ADDR
33898: GO 34217
33900: LD_INT 42
33902: DOUBLE
33903: EQUAL
33904: IFTRUE 33908
33906: GO 33934
33908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33909: LD_ADDR_VAR 0 3
33913: PUSH
33914: LD_INT 21
33916: PUSH
33917: LD_INT 22
33919: PUSH
33920: LD_INT 23
33922: PUSH
33923: LD_INT 24
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: ST_TO_ADDR
33932: GO 34217
33934: LD_INT 43
33936: DOUBLE
33937: EQUAL
33938: IFTRUE 33942
33940: GO 33968
33942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33943: LD_ADDR_VAR 0 3
33947: PUSH
33948: LD_INT 21
33950: PUSH
33951: LD_INT 22
33953: PUSH
33954: LD_INT 23
33956: PUSH
33957: LD_INT 24
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: ST_TO_ADDR
33966: GO 34217
33968: LD_INT 44
33970: DOUBLE
33971: EQUAL
33972: IFTRUE 33976
33974: GO 34002
33976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33977: LD_ADDR_VAR 0 3
33981: PUSH
33982: LD_INT 21
33984: PUSH
33985: LD_INT 22
33987: PUSH
33988: LD_INT 23
33990: PUSH
33991: LD_INT 24
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: ST_TO_ADDR
34000: GO 34217
34002: LD_INT 45
34004: DOUBLE
34005: EQUAL
34006: IFTRUE 34010
34008: GO 34036
34010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34011: LD_ADDR_VAR 0 3
34015: PUSH
34016: LD_INT 21
34018: PUSH
34019: LD_INT 22
34021: PUSH
34022: LD_INT 23
34024: PUSH
34025: LD_INT 24
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
34034: GO 34217
34036: LD_INT 49
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34044
34042: GO 34070
34044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34045: LD_ADDR_VAR 0 3
34049: PUSH
34050: LD_INT 21
34052: PUSH
34053: LD_INT 22
34055: PUSH
34056: LD_INT 23
34058: PUSH
34059: LD_INT 24
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: ST_TO_ADDR
34068: GO 34217
34070: LD_INT 51
34072: DOUBLE
34073: EQUAL
34074: IFTRUE 34078
34076: GO 34104
34078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34079: LD_ADDR_VAR 0 3
34083: PUSH
34084: LD_INT 21
34086: PUSH
34087: LD_INT 22
34089: PUSH
34090: LD_INT 23
34092: PUSH
34093: LD_INT 24
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
34102: GO 34217
34104: LD_INT 52
34106: DOUBLE
34107: EQUAL
34108: IFTRUE 34112
34110: GO 34138
34112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34113: LD_ADDR_VAR 0 3
34117: PUSH
34118: LD_INT 21
34120: PUSH
34121: LD_INT 22
34123: PUSH
34124: LD_INT 23
34126: PUSH
34127: LD_INT 24
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: ST_TO_ADDR
34136: GO 34217
34138: LD_INT 53
34140: DOUBLE
34141: EQUAL
34142: IFTRUE 34146
34144: GO 34164
34146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34147: LD_ADDR_VAR 0 3
34151: PUSH
34152: LD_INT 23
34154: PUSH
34155: LD_INT 24
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: ST_TO_ADDR
34162: GO 34217
34164: LD_INT 46
34166: DOUBLE
34167: EQUAL
34168: IFTRUE 34172
34170: GO 34190
34172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34173: LD_ADDR_VAR 0 3
34177: PUSH
34178: LD_INT 23
34180: PUSH
34181: LD_INT 24
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: ST_TO_ADDR
34188: GO 34217
34190: LD_INT 47
34192: DOUBLE
34193: EQUAL
34194: IFTRUE 34198
34196: GO 34216
34198: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34199: LD_ADDR_VAR 0 3
34203: PUSH
34204: LD_INT 23
34206: PUSH
34207: LD_INT 24
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: ST_TO_ADDR
34214: GO 34217
34216: POP
// result := ( chassis in result ) ;
34217: LD_ADDR_VAR 0 3
34221: PUSH
34222: LD_VAR 0 1
34226: PUSH
34227: LD_VAR 0 3
34231: IN
34232: ST_TO_ADDR
// end ;
34233: LD_VAR 0 3
34237: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34238: LD_INT 0
34240: PPUSH
34241: PPUSH
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
// result := array ;
34247: LD_ADDR_VAR 0 5
34251: PUSH
34252: LD_VAR 0 1
34256: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34257: LD_VAR 0 1
34261: NOT
34262: IFTRUE 34271
34264: PUSH
34265: LD_VAR 0 2
34269: NOT
34270: OR
34271: IFTRUE 34280
34273: PUSH
34274: LD_VAR 0 3
34278: NOT
34279: OR
34280: IFTRUE 34294
34282: PUSH
34283: LD_VAR 0 2
34287: PUSH
34288: LD_VAR 0 1
34292: GREATER
34293: OR
34294: IFTRUE 34308
34296: PUSH
34297: LD_VAR 0 3
34301: PUSH
34302: LD_VAR 0 1
34306: GREATER
34307: OR
34308: IFFALSE 34312
// exit ;
34310: GO 34608
// if direction then
34312: LD_VAR 0 4
34316: IFFALSE 34380
// begin d := 1 ;
34318: LD_ADDR_VAR 0 9
34322: PUSH
34323: LD_INT 1
34325: ST_TO_ADDR
// if i_from > i_to then
34326: LD_VAR 0 2
34330: PUSH
34331: LD_VAR 0 3
34335: GREATER
34336: IFFALSE 34362
// length := ( array - i_from ) + i_to else
34338: LD_ADDR_VAR 0 11
34342: PUSH
34343: LD_VAR 0 1
34347: PUSH
34348: LD_VAR 0 2
34352: MINUS
34353: PUSH
34354: LD_VAR 0 3
34358: PLUS
34359: ST_TO_ADDR
34360: GO 34378
// length := i_to - i_from ;
34362: LD_ADDR_VAR 0 11
34366: PUSH
34367: LD_VAR 0 3
34371: PUSH
34372: LD_VAR 0 2
34376: MINUS
34377: ST_TO_ADDR
// end else
34378: GO 34441
// begin d := - 1 ;
34380: LD_ADDR_VAR 0 9
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: ST_TO_ADDR
// if i_from > i_to then
34389: LD_VAR 0 2
34393: PUSH
34394: LD_VAR 0 3
34398: GREATER
34399: IFFALSE 34419
// length := i_from - i_to else
34401: LD_ADDR_VAR 0 11
34405: PUSH
34406: LD_VAR 0 2
34410: PUSH
34411: LD_VAR 0 3
34415: MINUS
34416: ST_TO_ADDR
34417: GO 34441
// length := ( array - i_to ) + i_from ;
34419: LD_ADDR_VAR 0 11
34423: PUSH
34424: LD_VAR 0 1
34428: PUSH
34429: LD_VAR 0 3
34433: MINUS
34434: PUSH
34435: LD_VAR 0 2
34439: PLUS
34440: ST_TO_ADDR
// end ; if not length then
34441: LD_VAR 0 11
34445: NOT
34446: IFFALSE 34450
// exit ;
34448: GO 34608
// tmp := array ;
34450: LD_ADDR_VAR 0 10
34454: PUSH
34455: LD_VAR 0 1
34459: ST_TO_ADDR
// for i = 1 to length do
34460: LD_ADDR_VAR 0 6
34464: PUSH
34465: DOUBLE
34466: LD_INT 1
34468: DEC
34469: ST_TO_ADDR
34470: LD_VAR 0 11
34474: PUSH
34475: FOR_TO
34476: IFFALSE 34596
// begin for j = 1 to array do
34478: LD_ADDR_VAR 0 7
34482: PUSH
34483: DOUBLE
34484: LD_INT 1
34486: DEC
34487: ST_TO_ADDR
34488: LD_VAR 0 1
34492: PUSH
34493: FOR_TO
34494: IFFALSE 34582
// begin k := j + d ;
34496: LD_ADDR_VAR 0 8
34500: PUSH
34501: LD_VAR 0 7
34505: PUSH
34506: LD_VAR 0 9
34510: PLUS
34511: ST_TO_ADDR
// if k > array then
34512: LD_VAR 0 8
34516: PUSH
34517: LD_VAR 0 1
34521: GREATER
34522: IFFALSE 34532
// k := 1 ;
34524: LD_ADDR_VAR 0 8
34528: PUSH
34529: LD_INT 1
34531: ST_TO_ADDR
// if not k then
34532: LD_VAR 0 8
34536: NOT
34537: IFFALSE 34549
// k := array ;
34539: LD_ADDR_VAR 0 8
34543: PUSH
34544: LD_VAR 0 1
34548: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34549: LD_ADDR_VAR 0 10
34553: PUSH
34554: LD_VAR 0 10
34558: PPUSH
34559: LD_VAR 0 8
34563: PPUSH
34564: LD_VAR 0 1
34568: PUSH
34569: LD_VAR 0 7
34573: ARRAY
34574: PPUSH
34575: CALL_OW 1
34579: ST_TO_ADDR
// end ;
34580: GO 34493
34582: POP
34583: POP
// array := tmp ;
34584: LD_ADDR_VAR 0 1
34588: PUSH
34589: LD_VAR 0 10
34593: ST_TO_ADDR
// end ;
34594: GO 34475
34596: POP
34597: POP
// result := array ;
34598: LD_ADDR_VAR 0 5
34602: PUSH
34603: LD_VAR 0 1
34607: ST_TO_ADDR
// end ;
34608: LD_VAR 0 5
34612: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34613: LD_INT 0
34615: PPUSH
34616: PPUSH
// result := 0 ;
34617: LD_ADDR_VAR 0 3
34621: PUSH
34622: LD_INT 0
34624: ST_TO_ADDR
// if not array or not value in array then
34625: LD_VAR 0 1
34629: NOT
34630: IFTRUE 34645
34632: PUSH
34633: LD_VAR 0 2
34637: PUSH
34638: LD_VAR 0 1
34642: IN
34643: NOT
34644: OR
34645: IFFALSE 34649
// exit ;
34647: GO 34703
// for i = 1 to array do
34649: LD_ADDR_VAR 0 4
34653: PUSH
34654: DOUBLE
34655: LD_INT 1
34657: DEC
34658: ST_TO_ADDR
34659: LD_VAR 0 1
34663: PUSH
34664: FOR_TO
34665: IFFALSE 34701
// if value = array [ i ] then
34667: LD_VAR 0 2
34671: PUSH
34672: LD_VAR 0 1
34676: PUSH
34677: LD_VAR 0 4
34681: ARRAY
34682: EQUAL
34683: IFFALSE 34699
// begin result := i ;
34685: LD_ADDR_VAR 0 3
34689: PUSH
34690: LD_VAR 0 4
34694: ST_TO_ADDR
// exit ;
34695: POP
34696: POP
34697: GO 34703
// end ;
34699: GO 34664
34701: POP
34702: POP
// end ;
34703: LD_VAR 0 3
34707: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34708: LD_INT 0
34710: PPUSH
// vc_chassis := chassis ;
34711: LD_ADDR_OWVAR 37
34715: PUSH
34716: LD_VAR 0 1
34720: ST_TO_ADDR
// vc_engine := engine ;
34721: LD_ADDR_OWVAR 39
34725: PUSH
34726: LD_VAR 0 2
34730: ST_TO_ADDR
// vc_control := control ;
34731: LD_ADDR_OWVAR 38
34735: PUSH
34736: LD_VAR 0 3
34740: ST_TO_ADDR
// vc_weapon := weapon ;
34741: LD_ADDR_OWVAR 40
34745: PUSH
34746: LD_VAR 0 4
34750: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34751: LD_ADDR_OWVAR 41
34755: PUSH
34756: LD_VAR 0 5
34760: ST_TO_ADDR
// end ;
34761: LD_VAR 0 6
34765: RET
// export function WantPlant ( unit ) ; var task ; begin
34766: LD_INT 0
34768: PPUSH
34769: PPUSH
// result := false ;
34770: LD_ADDR_VAR 0 2
34774: PUSH
34775: LD_INT 0
34777: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34778: LD_ADDR_VAR 0 3
34782: PUSH
34783: LD_VAR 0 1
34787: PPUSH
34788: CALL_OW 437
34792: ST_TO_ADDR
// if task then
34793: LD_VAR 0 3
34797: IFFALSE 34825
// if task [ 1 ] [ 1 ] = p then
34799: LD_VAR 0 3
34803: PUSH
34804: LD_INT 1
34806: ARRAY
34807: PUSH
34808: LD_INT 1
34810: ARRAY
34811: PUSH
34812: LD_STRING p
34814: EQUAL
34815: IFFALSE 34825
// result := true ;
34817: LD_ADDR_VAR 0 2
34821: PUSH
34822: LD_INT 1
34824: ST_TO_ADDR
// end ;
34825: LD_VAR 0 2
34829: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
34834: PPUSH
34835: PPUSH
// if pos < 1 then
34836: LD_VAR 0 2
34840: PUSH
34841: LD_INT 1
34843: LESS
34844: IFFALSE 34848
// exit ;
34846: GO 35151
// if pos = 1 then
34848: LD_VAR 0 2
34852: PUSH
34853: LD_INT 1
34855: EQUAL
34856: IFFALSE 34889
// result := Replace ( arr , pos [ 1 ] , value ) else
34858: LD_ADDR_VAR 0 4
34862: PUSH
34863: LD_VAR 0 1
34867: PPUSH
34868: LD_VAR 0 2
34872: PUSH
34873: LD_INT 1
34875: ARRAY
34876: PPUSH
34877: LD_VAR 0 3
34881: PPUSH
34882: CALL_OW 1
34886: ST_TO_ADDR
34887: GO 35151
// begin tmp := arr ;
34889: LD_ADDR_VAR 0 6
34893: PUSH
34894: LD_VAR 0 1
34898: ST_TO_ADDR
// s_arr := [ tmp ] ;
34899: LD_ADDR_VAR 0 7
34903: PUSH
34904: LD_VAR 0 6
34908: PUSH
34909: EMPTY
34910: LIST
34911: ST_TO_ADDR
// for i = 1 to pos - 1 do
34912: LD_ADDR_VAR 0 5
34916: PUSH
34917: DOUBLE
34918: LD_INT 1
34920: DEC
34921: ST_TO_ADDR
34922: LD_VAR 0 2
34926: PUSH
34927: LD_INT 1
34929: MINUS
34930: PUSH
34931: FOR_TO
34932: IFFALSE 34977
// begin tmp := tmp [ pos [ i ] ] ;
34934: LD_ADDR_VAR 0 6
34938: PUSH
34939: LD_VAR 0 6
34943: PUSH
34944: LD_VAR 0 2
34948: PUSH
34949: LD_VAR 0 5
34953: ARRAY
34954: ARRAY
34955: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34956: LD_ADDR_VAR 0 7
34960: PUSH
34961: LD_VAR 0 7
34965: PUSH
34966: LD_VAR 0 6
34970: PUSH
34971: EMPTY
34972: LIST
34973: ADD
34974: ST_TO_ADDR
// end ;
34975: GO 34931
34977: POP
34978: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34979: LD_ADDR_VAR 0 6
34983: PUSH
34984: LD_VAR 0 6
34988: PPUSH
34989: LD_VAR 0 2
34993: PUSH
34994: LD_VAR 0 2
34998: ARRAY
34999: PPUSH
35000: LD_VAR 0 3
35004: PPUSH
35005: CALL_OW 1
35009: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35010: LD_ADDR_VAR 0 7
35014: PUSH
35015: LD_VAR 0 7
35019: PPUSH
35020: LD_VAR 0 7
35024: PPUSH
35025: LD_VAR 0 6
35029: PPUSH
35030: CALL_OW 1
35034: ST_TO_ADDR
// for i = s_arr downto 2 do
35035: LD_ADDR_VAR 0 5
35039: PUSH
35040: DOUBLE
35041: LD_VAR 0 7
35045: INC
35046: ST_TO_ADDR
35047: LD_INT 2
35049: PUSH
35050: FOR_DOWNTO
35051: IFFALSE 35135
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35053: LD_ADDR_VAR 0 6
35057: PUSH
35058: LD_VAR 0 7
35062: PUSH
35063: LD_VAR 0 5
35067: PUSH
35068: LD_INT 1
35070: MINUS
35071: ARRAY
35072: PPUSH
35073: LD_VAR 0 2
35077: PUSH
35078: LD_VAR 0 5
35082: PUSH
35083: LD_INT 1
35085: MINUS
35086: ARRAY
35087: PPUSH
35088: LD_VAR 0 7
35092: PUSH
35093: LD_VAR 0 5
35097: ARRAY
35098: PPUSH
35099: CALL_OW 1
35103: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35104: LD_ADDR_VAR 0 7
35108: PUSH
35109: LD_VAR 0 7
35113: PPUSH
35114: LD_VAR 0 5
35118: PUSH
35119: LD_INT 1
35121: MINUS
35122: PPUSH
35123: LD_VAR 0 6
35127: PPUSH
35128: CALL_OW 1
35132: ST_TO_ADDR
// end ;
35133: GO 35050
35135: POP
35136: POP
// result := s_arr [ 1 ] ;
35137: LD_ADDR_VAR 0 4
35141: PUSH
35142: LD_VAR 0 7
35146: PUSH
35147: LD_INT 1
35149: ARRAY
35150: ST_TO_ADDR
// end ; end ;
35151: LD_VAR 0 4
35155: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35156: LD_INT 0
35158: PPUSH
35159: PPUSH
// if not list then
35160: LD_VAR 0 1
35164: NOT
35165: IFFALSE 35169
// exit ;
35167: GO 35260
// i := list [ pos1 ] ;
35169: LD_ADDR_VAR 0 5
35173: PUSH
35174: LD_VAR 0 1
35178: PUSH
35179: LD_VAR 0 2
35183: ARRAY
35184: ST_TO_ADDR
// if not i then
35185: LD_VAR 0 5
35189: NOT
35190: IFFALSE 35194
// exit ;
35192: GO 35260
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35194: LD_ADDR_VAR 0 1
35198: PUSH
35199: LD_VAR 0 1
35203: PPUSH
35204: LD_VAR 0 2
35208: PPUSH
35209: LD_VAR 0 1
35213: PUSH
35214: LD_VAR 0 3
35218: ARRAY
35219: PPUSH
35220: CALL_OW 1
35224: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35225: LD_ADDR_VAR 0 1
35229: PUSH
35230: LD_VAR 0 1
35234: PPUSH
35235: LD_VAR 0 3
35239: PPUSH
35240: LD_VAR 0 5
35244: PPUSH
35245: CALL_OW 1
35249: ST_TO_ADDR
// result := list ;
35250: LD_ADDR_VAR 0 4
35254: PUSH
35255: LD_VAR 0 1
35259: ST_TO_ADDR
// end ;
35260: LD_VAR 0 4
35264: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35265: LD_INT 0
35267: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35268: LD_ADDR_VAR 0 5
35272: PUSH
35273: LD_VAR 0 1
35277: PPUSH
35278: CALL_OW 250
35282: PPUSH
35283: LD_VAR 0 1
35287: PPUSH
35288: CALL_OW 251
35292: PPUSH
35293: LD_VAR 0 2
35297: PPUSH
35298: LD_VAR 0 3
35302: PPUSH
35303: LD_VAR 0 4
35307: PPUSH
35308: CALL 35690 0 5
35312: ST_TO_ADDR
// end ;
35313: LD_VAR 0 5
35317: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35318: LD_INT 0
35320: PPUSH
35321: PPUSH
35322: PPUSH
35323: PPUSH
// if not list or not unit then
35324: LD_VAR 0 2
35328: NOT
35329: IFTRUE 35338
35331: PUSH
35332: LD_VAR 0 1
35336: NOT
35337: OR
35338: IFFALSE 35342
// exit ;
35340: GO 35685
// result := [ ] ;
35342: LD_ADDR_VAR 0 5
35346: PUSH
35347: EMPTY
35348: ST_TO_ADDR
// for i in list do
35349: LD_ADDR_VAR 0 6
35353: PUSH
35354: LD_VAR 0 2
35358: PUSH
35359: FOR_IN
35360: IFFALSE 35578
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35362: LD_ADDR_VAR 0 8
35366: PUSH
35367: LD_VAR 0 1
35371: PPUSH
35372: LD_VAR 0 6
35376: PUSH
35377: LD_INT 1
35379: ARRAY
35380: PPUSH
35381: LD_VAR 0 6
35385: PUSH
35386: LD_INT 2
35388: ARRAY
35389: PPUSH
35390: CALL_OW 297
35394: ST_TO_ADDR
// if not Count ( result ) then
35395: LD_VAR 0 5
35399: PPUSH
35400: CALL 31946 0 1
35404: NOT
35405: IFFALSE 35438
// begin result := Join ( result , [ i , tmp ] ) ;
35407: LD_ADDR_VAR 0 5
35411: PUSH
35412: LD_VAR 0 5
35416: PPUSH
35417: LD_VAR 0 6
35421: PUSH
35422: LD_VAR 0 8
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PPUSH
35431: CALL 67878 0 2
35435: ST_TO_ADDR
// continue ;
35436: GO 35359
// end ; if result [ result ] [ 2 ] <= tmp then
35438: LD_VAR 0 5
35442: PUSH
35443: LD_VAR 0 5
35447: ARRAY
35448: PUSH
35449: LD_INT 2
35451: ARRAY
35452: PUSH
35453: LD_VAR 0 8
35457: LESSEQUAL
35458: IFFALSE 35491
// result := Join ( result , [ i , tmp ] ) else
35460: LD_ADDR_VAR 0 5
35464: PUSH
35465: LD_VAR 0 5
35469: PPUSH
35470: LD_VAR 0 6
35474: PUSH
35475: LD_VAR 0 8
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PPUSH
35484: CALL 67878 0 2
35488: ST_TO_ADDR
35489: GO 35576
// begin for j := 1 to Count ( result ) do
35491: LD_ADDR_VAR 0 7
35495: PUSH
35496: DOUBLE
35497: LD_INT 1
35499: DEC
35500: ST_TO_ADDR
35501: LD_VAR 0 5
35505: PPUSH
35506: CALL 31946 0 1
35510: PUSH
35511: FOR_TO
35512: IFFALSE 35574
// begin if tmp < result [ j ] [ 2 ] then
35514: LD_VAR 0 8
35518: PUSH
35519: LD_VAR 0 5
35523: PUSH
35524: LD_VAR 0 7
35528: ARRAY
35529: PUSH
35530: LD_INT 2
35532: ARRAY
35533: LESS
35534: IFFALSE 35572
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35536: LD_ADDR_VAR 0 5
35540: PUSH
35541: LD_VAR 0 5
35545: PPUSH
35546: LD_VAR 0 7
35550: PPUSH
35551: LD_VAR 0 6
35555: PUSH
35556: LD_VAR 0 8
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PPUSH
35565: CALL_OW 2
35569: ST_TO_ADDR
// break ;
35570: GO 35574
// end ; end ;
35572: GO 35511
35574: POP
35575: POP
// end ; end ;
35576: GO 35359
35578: POP
35579: POP
// if result and not asc then
35580: LD_VAR 0 5
35584: IFFALSE 35593
35586: PUSH
35587: LD_VAR 0 3
35591: NOT
35592: AND
35593: IFFALSE 35610
// result := ReverseArray ( result ) ;
35595: LD_ADDR_VAR 0 5
35599: PUSH
35600: LD_VAR 0 5
35604: PPUSH
35605: CALL 62968 0 1
35609: ST_TO_ADDR
// tmp := [ ] ;
35610: LD_ADDR_VAR 0 8
35614: PUSH
35615: EMPTY
35616: ST_TO_ADDR
// if mode then
35617: LD_VAR 0 4
35621: IFFALSE 35685
// begin for i := 1 to result do
35623: LD_ADDR_VAR 0 6
35627: PUSH
35628: DOUBLE
35629: LD_INT 1
35631: DEC
35632: ST_TO_ADDR
35633: LD_VAR 0 5
35637: PUSH
35638: FOR_TO
35639: IFFALSE 35673
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35641: LD_ADDR_VAR 0 8
35645: PUSH
35646: LD_VAR 0 8
35650: PPUSH
35651: LD_VAR 0 5
35655: PUSH
35656: LD_VAR 0 6
35660: ARRAY
35661: PUSH
35662: LD_INT 1
35664: ARRAY
35665: PPUSH
35666: CALL 67878 0 2
35670: ST_TO_ADDR
35671: GO 35638
35673: POP
35674: POP
// result := tmp ;
35675: LD_ADDR_VAR 0 5
35679: PUSH
35680: LD_VAR 0 8
35684: ST_TO_ADDR
// end ; end ;
35685: LD_VAR 0 5
35689: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35690: LD_INT 0
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
// if not list then
35696: LD_VAR 0 3
35700: NOT
35701: IFFALSE 35705
// exit ;
35703: GO 36095
// result := [ ] ;
35705: LD_ADDR_VAR 0 6
35709: PUSH
35710: EMPTY
35711: ST_TO_ADDR
// for i in list do
35712: LD_ADDR_VAR 0 7
35716: PUSH
35717: LD_VAR 0 3
35721: PUSH
35722: FOR_IN
35723: IFFALSE 35925
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35725: LD_ADDR_VAR 0 9
35729: PUSH
35730: LD_VAR 0 7
35734: PPUSH
35735: LD_VAR 0 1
35739: PPUSH
35740: LD_VAR 0 2
35744: PPUSH
35745: CALL_OW 297
35749: ST_TO_ADDR
// if not result then
35750: LD_VAR 0 6
35754: NOT
35755: IFFALSE 35781
// result := [ [ i , tmp ] ] else
35757: LD_ADDR_VAR 0 6
35761: PUSH
35762: LD_VAR 0 7
35766: PUSH
35767: LD_VAR 0 9
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: EMPTY
35777: LIST
35778: ST_TO_ADDR
35779: GO 35923
// begin if result [ result ] [ 2 ] <= tmp then
35781: LD_VAR 0 6
35785: PUSH
35786: LD_VAR 0 6
35790: ARRAY
35791: PUSH
35792: LD_INT 2
35794: ARRAY
35795: PUSH
35796: LD_VAR 0 9
35800: LESSEQUAL
35801: IFFALSE 35843
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35803: LD_ADDR_VAR 0 6
35807: PUSH
35808: LD_VAR 0 6
35812: PPUSH
35813: LD_VAR 0 6
35817: PUSH
35818: LD_INT 1
35820: PLUS
35821: PPUSH
35822: LD_VAR 0 7
35826: PUSH
35827: LD_VAR 0 9
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PPUSH
35836: CALL_OW 2
35840: ST_TO_ADDR
35841: GO 35923
// for j := 1 to result do
35843: LD_ADDR_VAR 0 8
35847: PUSH
35848: DOUBLE
35849: LD_INT 1
35851: DEC
35852: ST_TO_ADDR
35853: LD_VAR 0 6
35857: PUSH
35858: FOR_TO
35859: IFFALSE 35921
// begin if tmp < result [ j ] [ 2 ] then
35861: LD_VAR 0 9
35865: PUSH
35866: LD_VAR 0 6
35870: PUSH
35871: LD_VAR 0 8
35875: ARRAY
35876: PUSH
35877: LD_INT 2
35879: ARRAY
35880: LESS
35881: IFFALSE 35919
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35883: LD_ADDR_VAR 0 6
35887: PUSH
35888: LD_VAR 0 6
35892: PPUSH
35893: LD_VAR 0 8
35897: PPUSH
35898: LD_VAR 0 7
35902: PUSH
35903: LD_VAR 0 9
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PPUSH
35912: CALL_OW 2
35916: ST_TO_ADDR
// break ;
35917: GO 35921
// end ; end ;
35919: GO 35858
35921: POP
35922: POP
// end ; end ;
35923: GO 35722
35925: POP
35926: POP
// if result and not asc then
35927: LD_VAR 0 6
35931: IFFALSE 35940
35933: PUSH
35934: LD_VAR 0 4
35938: NOT
35939: AND
35940: IFFALSE 36015
// begin tmp := result ;
35942: LD_ADDR_VAR 0 9
35946: PUSH
35947: LD_VAR 0 6
35951: ST_TO_ADDR
// for i = tmp downto 1 do
35952: LD_ADDR_VAR 0 7
35956: PUSH
35957: DOUBLE
35958: LD_VAR 0 9
35962: INC
35963: ST_TO_ADDR
35964: LD_INT 1
35966: PUSH
35967: FOR_DOWNTO
35968: IFFALSE 36013
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35970: LD_ADDR_VAR 0 6
35974: PUSH
35975: LD_VAR 0 6
35979: PPUSH
35980: LD_VAR 0 9
35984: PUSH
35985: LD_VAR 0 7
35989: MINUS
35990: PUSH
35991: LD_INT 1
35993: PLUS
35994: PPUSH
35995: LD_VAR 0 9
35999: PUSH
36000: LD_VAR 0 7
36004: ARRAY
36005: PPUSH
36006: CALL_OW 1
36010: ST_TO_ADDR
36011: GO 35967
36013: POP
36014: POP
// end ; tmp := [ ] ;
36015: LD_ADDR_VAR 0 9
36019: PUSH
36020: EMPTY
36021: ST_TO_ADDR
// if mode then
36022: LD_VAR 0 5
36026: IFFALSE 36095
// begin for i = 1 to result do
36028: LD_ADDR_VAR 0 7
36032: PUSH
36033: DOUBLE
36034: LD_INT 1
36036: DEC
36037: ST_TO_ADDR
36038: LD_VAR 0 6
36042: PUSH
36043: FOR_TO
36044: IFFALSE 36083
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36046: LD_ADDR_VAR 0 9
36050: PUSH
36051: LD_VAR 0 9
36055: PPUSH
36056: LD_VAR 0 7
36060: PPUSH
36061: LD_VAR 0 6
36065: PUSH
36066: LD_VAR 0 7
36070: ARRAY
36071: PUSH
36072: LD_INT 1
36074: ARRAY
36075: PPUSH
36076: CALL_OW 1
36080: ST_TO_ADDR
36081: GO 36043
36083: POP
36084: POP
// result := tmp ;
36085: LD_ADDR_VAR 0 6
36089: PUSH
36090: LD_VAR 0 9
36094: ST_TO_ADDR
// end ; end ;
36095: LD_VAR 0 6
36099: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36100: LD_INT 0
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
36106: PPUSH
36107: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36108: LD_ADDR_VAR 0 5
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: EMPTY
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: ST_TO_ADDR
// if not x or not y then
36130: LD_VAR 0 2
36134: NOT
36135: IFTRUE 36144
36137: PUSH
36138: LD_VAR 0 3
36142: NOT
36143: OR
36144: IFFALSE 36148
// exit ;
36146: GO 37804
// if not range then
36148: LD_VAR 0 4
36152: NOT
36153: IFFALSE 36163
// range := 10 ;
36155: LD_ADDR_VAR 0 4
36159: PUSH
36160: LD_INT 10
36162: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36163: LD_ADDR_VAR 0 8
36167: PUSH
36168: LD_INT 81
36170: PUSH
36171: LD_VAR 0 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 92
36182: PUSH
36183: LD_VAR 0 2
36187: PUSH
36188: LD_VAR 0 3
36192: PUSH
36193: LD_VAR 0 4
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 3
36206: PUSH
36207: LD_INT 21
36209: PUSH
36210: LD_INT 3
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: PPUSH
36226: CALL_OW 69
36230: ST_TO_ADDR
// if not tmp then
36231: LD_VAR 0 8
36235: NOT
36236: IFFALSE 36240
// exit ;
36238: GO 37804
// for i in tmp do
36240: LD_ADDR_VAR 0 6
36244: PUSH
36245: LD_VAR 0 8
36249: PUSH
36250: FOR_IN
36251: IFFALSE 37779
// begin points := [ 0 , 0 , 0 ] ;
36253: LD_ADDR_VAR 0 9
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: ST_TO_ADDR
// bpoints := 1 ;
36272: LD_ADDR_VAR 0 10
36276: PUSH
36277: LD_INT 1
36279: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36280: LD_VAR 0 6
36284: PPUSH
36285: CALL_OW 247
36289: PUSH
36290: LD_INT 1
36292: DOUBLE
36293: EQUAL
36294: IFTRUE 36298
36296: GO 36880
36298: POP
// begin if GetClass ( i ) = 1 then
36299: LD_VAR 0 6
36303: PPUSH
36304: CALL_OW 257
36308: PUSH
36309: LD_INT 1
36311: EQUAL
36312: IFFALSE 36333
// points := [ 10 , 5 , 3 ] ;
36314: LD_ADDR_VAR 0 9
36318: PUSH
36319: LD_INT 10
36321: PUSH
36322: LD_INT 5
36324: PUSH
36325: LD_INT 3
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36333: LD_VAR 0 6
36337: PPUSH
36338: CALL_OW 257
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: LD_INT 3
36348: PUSH
36349: LD_INT 4
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: IN
36357: IFFALSE 36378
// points := [ 3 , 2 , 1 ] ;
36359: LD_ADDR_VAR 0 9
36363: PUSH
36364: LD_INT 3
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36378: LD_VAR 0 6
36382: PPUSH
36383: CALL_OW 257
36387: PUSH
36388: LD_INT 5
36390: EQUAL
36391: IFFALSE 36412
// points := [ 130 , 5 , 2 ] ;
36393: LD_ADDR_VAR 0 9
36397: PUSH
36398: LD_INT 130
36400: PUSH
36401: LD_INT 5
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: LIST
36411: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36412: LD_VAR 0 6
36416: PPUSH
36417: CALL_OW 257
36421: PUSH
36422: LD_INT 8
36424: EQUAL
36425: IFFALSE 36446
// points := [ 35 , 35 , 30 ] ;
36427: LD_ADDR_VAR 0 9
36431: PUSH
36432: LD_INT 35
36434: PUSH
36435: LD_INT 35
36437: PUSH
36438: LD_INT 30
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36446: LD_VAR 0 6
36450: PPUSH
36451: CALL_OW 257
36455: PUSH
36456: LD_INT 9
36458: EQUAL
36459: IFFALSE 36480
// points := [ 20 , 55 , 40 ] ;
36461: LD_ADDR_VAR 0 9
36465: PUSH
36466: LD_INT 20
36468: PUSH
36469: LD_INT 55
36471: PUSH
36472: LD_INT 40
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36480: LD_VAR 0 6
36484: PPUSH
36485: CALL_OW 257
36489: PUSH
36490: LD_INT 12
36492: PUSH
36493: LD_INT 16
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: IN
36500: IFFALSE 36521
// points := [ 5 , 3 , 2 ] ;
36502: LD_ADDR_VAR 0 9
36506: PUSH
36507: LD_INT 5
36509: PUSH
36510: LD_INT 3
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36521: LD_VAR 0 6
36525: PPUSH
36526: CALL_OW 257
36530: PUSH
36531: LD_INT 17
36533: EQUAL
36534: IFFALSE 36555
// points := [ 100 , 50 , 75 ] ;
36536: LD_ADDR_VAR 0 9
36540: PUSH
36541: LD_INT 100
36543: PUSH
36544: LD_INT 50
36546: PUSH
36547: LD_INT 75
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36555: LD_VAR 0 6
36559: PPUSH
36560: CALL_OW 257
36564: PUSH
36565: LD_INT 15
36567: EQUAL
36568: IFFALSE 36589
// points := [ 10 , 5 , 3 ] ;
36570: LD_ADDR_VAR 0 9
36574: PUSH
36575: LD_INT 10
36577: PUSH
36578: LD_INT 5
36580: PUSH
36581: LD_INT 3
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36589: LD_VAR 0 6
36593: PPUSH
36594: CALL_OW 257
36598: PUSH
36599: LD_INT 14
36601: EQUAL
36602: IFFALSE 36623
// points := [ 10 , 0 , 0 ] ;
36604: LD_ADDR_VAR 0 9
36608: PUSH
36609: LD_INT 10
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36623: LD_VAR 0 6
36627: PPUSH
36628: CALL_OW 257
36632: PUSH
36633: LD_INT 11
36635: EQUAL
36636: IFFALSE 36657
// points := [ 30 , 10 , 5 ] ;
36638: LD_ADDR_VAR 0 9
36642: PUSH
36643: LD_INT 30
36645: PUSH
36646: LD_INT 10
36648: PUSH
36649: LD_INT 5
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36657: LD_VAR 0 1
36661: PPUSH
36662: LD_INT 5
36664: PPUSH
36665: CALL_OW 321
36669: PUSH
36670: LD_INT 2
36672: EQUAL
36673: IFFALSE 36690
// bpoints := bpoints * 1.8 ;
36675: LD_ADDR_VAR 0 10
36679: PUSH
36680: LD_VAR 0 10
36684: PUSH
36685: LD_REAL  1.80000000000000E+0000
36688: MUL
36689: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36690: LD_VAR 0 6
36694: PPUSH
36695: CALL_OW 257
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: LD_INT 3
36708: PUSH
36709: LD_INT 4
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: IN
36718: IFFALSE 36738
36720: PUSH
36721: LD_VAR 0 1
36725: PPUSH
36726: LD_INT 51
36728: PPUSH
36729: CALL_OW 321
36733: PUSH
36734: LD_INT 2
36736: EQUAL
36737: AND
36738: IFFALSE 36755
// bpoints := bpoints * 1.2 ;
36740: LD_ADDR_VAR 0 10
36744: PUSH
36745: LD_VAR 0 10
36749: PUSH
36750: LD_REAL  1.20000000000000E+0000
36753: MUL
36754: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36755: LD_VAR 0 6
36759: PPUSH
36760: CALL_OW 257
36764: PUSH
36765: LD_INT 5
36767: PUSH
36768: LD_INT 7
36770: PUSH
36771: LD_INT 9
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: LIST
36778: IN
36779: IFFALSE 36799
36781: PUSH
36782: LD_VAR 0 1
36786: PPUSH
36787: LD_INT 52
36789: PPUSH
36790: CALL_OW 321
36794: PUSH
36795: LD_INT 2
36797: EQUAL
36798: AND
36799: IFFALSE 36816
// bpoints := bpoints * 1.5 ;
36801: LD_ADDR_VAR 0 10
36805: PUSH
36806: LD_VAR 0 10
36810: PUSH
36811: LD_REAL  1.50000000000000E+0000
36814: MUL
36815: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36816: LD_VAR 0 1
36820: PPUSH
36821: LD_INT 66
36823: PPUSH
36824: CALL_OW 321
36828: PUSH
36829: LD_INT 2
36831: EQUAL
36832: IFFALSE 36849
// bpoints := bpoints * 1.1 ;
36834: LD_ADDR_VAR 0 10
36838: PUSH
36839: LD_VAR 0 10
36843: PUSH
36844: LD_REAL  1.10000000000000E+0000
36847: MUL
36848: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36849: LD_ADDR_VAR 0 10
36853: PUSH
36854: LD_VAR 0 10
36858: PUSH
36859: LD_VAR 0 6
36863: PPUSH
36864: LD_INT 1
36866: PPUSH
36867: CALL_OW 259
36871: PUSH
36872: LD_REAL  1.15000000000000E+0000
36875: MUL
36876: MUL
36877: ST_TO_ADDR
// end ; unit_vehicle :
36878: GO 37708
36880: LD_INT 2
36882: DOUBLE
36883: EQUAL
36884: IFTRUE 36888
36886: GO 37696
36888: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36889: LD_VAR 0 6
36893: PPUSH
36894: CALL_OW 264
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: LD_INT 42
36904: PUSH
36905: LD_INT 24
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: IN
36913: IFFALSE 36934
// points := [ 25 , 5 , 3 ] ;
36915: LD_ADDR_VAR 0 9
36919: PUSH
36920: LD_INT 25
36922: PUSH
36923: LD_INT 5
36925: PUSH
36926: LD_INT 3
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36934: LD_VAR 0 6
36938: PPUSH
36939: CALL_OW 264
36943: PUSH
36944: LD_INT 4
36946: PUSH
36947: LD_INT 43
36949: PUSH
36950: LD_INT 25
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: IN
36958: IFFALSE 36979
// points := [ 40 , 15 , 5 ] ;
36960: LD_ADDR_VAR 0 9
36964: PUSH
36965: LD_INT 40
36967: PUSH
36968: LD_INT 15
36970: PUSH
36971: LD_INT 5
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36979: LD_VAR 0 6
36983: PPUSH
36984: CALL_OW 264
36988: PUSH
36989: LD_INT 3
36991: PUSH
36992: LD_INT 23
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: IN
36999: IFFALSE 37020
// points := [ 7 , 25 , 8 ] ;
37001: LD_ADDR_VAR 0 9
37005: PUSH
37006: LD_INT 7
37008: PUSH
37009: LD_INT 25
37011: PUSH
37012: LD_INT 8
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37020: LD_VAR 0 6
37024: PPUSH
37025: CALL_OW 264
37029: PUSH
37030: LD_INT 5
37032: PUSH
37033: LD_INT 27
37035: PUSH
37036: LD_INT 44
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: IN
37044: IFFALSE 37065
// points := [ 14 , 50 , 16 ] ;
37046: LD_ADDR_VAR 0 9
37050: PUSH
37051: LD_INT 14
37053: PUSH
37054: LD_INT 50
37056: PUSH
37057: LD_INT 16
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: LIST
37064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37065: LD_VAR 0 6
37069: PPUSH
37070: CALL_OW 264
37074: PUSH
37075: LD_INT 6
37077: PUSH
37078: LD_INT 46
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: IN
37085: IFFALSE 37106
// points := [ 32 , 120 , 70 ] ;
37087: LD_ADDR_VAR 0 9
37091: PUSH
37092: LD_INT 32
37094: PUSH
37095: LD_INT 120
37097: PUSH
37098: LD_INT 70
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37106: LD_VAR 0 6
37110: PPUSH
37111: CALL_OW 264
37115: PUSH
37116: LD_INT 7
37118: PUSH
37119: LD_INT 28
37121: PUSH
37122: LD_INT 45
37124: PUSH
37125: LD_INT 92
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: IN
37134: IFFALSE 37155
// points := [ 35 , 20 , 45 ] ;
37136: LD_ADDR_VAR 0 9
37140: PUSH
37141: LD_INT 35
37143: PUSH
37144: LD_INT 20
37146: PUSH
37147: LD_INT 45
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37155: LD_VAR 0 6
37159: PPUSH
37160: CALL_OW 264
37164: PUSH
37165: LD_INT 47
37167: PUSH
37168: EMPTY
37169: LIST
37170: IN
37171: IFFALSE 37192
// points := [ 67 , 45 , 75 ] ;
37173: LD_ADDR_VAR 0 9
37177: PUSH
37178: LD_INT 67
37180: PUSH
37181: LD_INT 45
37183: PUSH
37184: LD_INT 75
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37192: LD_VAR 0 6
37196: PPUSH
37197: CALL_OW 264
37201: PUSH
37202: LD_INT 26
37204: PUSH
37205: EMPTY
37206: LIST
37207: IN
37208: IFFALSE 37229
// points := [ 120 , 30 , 80 ] ;
37210: LD_ADDR_VAR 0 9
37214: PUSH
37215: LD_INT 120
37217: PUSH
37218: LD_INT 30
37220: PUSH
37221: LD_INT 80
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37229: LD_VAR 0 6
37233: PPUSH
37234: CALL_OW 264
37238: PUSH
37239: LD_INT 22
37241: PUSH
37242: EMPTY
37243: LIST
37244: IN
37245: IFFALSE 37266
// points := [ 40 , 1 , 1 ] ;
37247: LD_ADDR_VAR 0 9
37251: PUSH
37252: LD_INT 40
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37266: LD_VAR 0 6
37270: PPUSH
37271: CALL_OW 264
37275: PUSH
37276: LD_INT 29
37278: PUSH
37279: EMPTY
37280: LIST
37281: IN
37282: IFFALSE 37303
// points := [ 70 , 200 , 400 ] ;
37284: LD_ADDR_VAR 0 9
37288: PUSH
37289: LD_INT 70
37291: PUSH
37292: LD_INT 200
37294: PUSH
37295: LD_INT 400
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37303: LD_VAR 0 6
37307: PPUSH
37308: CALL_OW 264
37312: PUSH
37313: LD_INT 14
37315: PUSH
37316: LD_INT 53
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: IN
37323: IFFALSE 37344
// points := [ 40 , 10 , 20 ] ;
37325: LD_ADDR_VAR 0 9
37329: PUSH
37330: LD_INT 40
37332: PUSH
37333: LD_INT 10
37335: PUSH
37336: LD_INT 20
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37344: LD_VAR 0 6
37348: PPUSH
37349: CALL_OW 264
37353: PUSH
37354: LD_INT 9
37356: PUSH
37357: EMPTY
37358: LIST
37359: IN
37360: IFFALSE 37381
// points := [ 5 , 70 , 20 ] ;
37362: LD_ADDR_VAR 0 9
37366: PUSH
37367: LD_INT 5
37369: PUSH
37370: LD_INT 70
37372: PUSH
37373: LD_INT 20
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37381: LD_VAR 0 6
37385: PPUSH
37386: CALL_OW 264
37390: PUSH
37391: LD_INT 10
37393: PUSH
37394: EMPTY
37395: LIST
37396: IN
37397: IFFALSE 37418
// points := [ 35 , 110 , 70 ] ;
37399: LD_ADDR_VAR 0 9
37403: PUSH
37404: LD_INT 35
37406: PUSH
37407: LD_INT 110
37409: PUSH
37410: LD_INT 70
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: LIST
37417: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37418: LD_VAR 0 6
37422: PPUSH
37423: CALL_OW 265
37427: PUSH
37428: LD_INT 25
37430: EQUAL
37431: IFFALSE 37452
// points := [ 80 , 65 , 100 ] ;
37433: LD_ADDR_VAR 0 9
37437: PUSH
37438: LD_INT 80
37440: PUSH
37441: LD_INT 65
37443: PUSH
37444: LD_INT 100
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37452: LD_VAR 0 6
37456: PPUSH
37457: CALL_OW 263
37461: PUSH
37462: LD_INT 1
37464: EQUAL
37465: IFFALSE 37500
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37467: LD_ADDR_VAR 0 10
37471: PUSH
37472: LD_VAR 0 10
37476: PUSH
37477: LD_VAR 0 6
37481: PPUSH
37482: CALL_OW 311
37486: PPUSH
37487: LD_INT 3
37489: PPUSH
37490: CALL_OW 259
37494: PUSH
37495: LD_INT 4
37497: MUL
37498: MUL
37499: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37500: LD_VAR 0 6
37504: PPUSH
37505: CALL_OW 263
37509: PUSH
37510: LD_INT 2
37512: EQUAL
37513: IFFALSE 37564
// begin j := IsControledBy ( i ) ;
37515: LD_ADDR_VAR 0 7
37519: PUSH
37520: LD_VAR 0 6
37524: PPUSH
37525: CALL_OW 312
37529: ST_TO_ADDR
// if j then
37530: LD_VAR 0 7
37534: IFFALSE 37564
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37536: LD_ADDR_VAR 0 10
37540: PUSH
37541: LD_VAR 0 10
37545: PUSH
37546: LD_VAR 0 7
37550: PPUSH
37551: LD_INT 3
37553: PPUSH
37554: CALL_OW 259
37558: PUSH
37559: LD_INT 3
37561: MUL
37562: MUL
37563: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37564: LD_VAR 0 6
37568: PPUSH
37569: CALL_OW 264
37573: PUSH
37574: LD_INT 5
37576: PUSH
37577: LD_INT 6
37579: PUSH
37580: LD_INT 46
37582: PUSH
37583: LD_INT 44
37585: PUSH
37586: LD_INT 47
37588: PUSH
37589: LD_INT 45
37591: PUSH
37592: LD_INT 28
37594: PUSH
37595: LD_INT 7
37597: PUSH
37598: LD_INT 27
37600: PUSH
37601: LD_INT 29
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: IN
37616: IFFALSE 37636
37618: PUSH
37619: LD_VAR 0 1
37623: PPUSH
37624: LD_INT 52
37626: PPUSH
37627: CALL_OW 321
37631: PUSH
37632: LD_INT 2
37634: EQUAL
37635: AND
37636: IFFALSE 37653
// bpoints := bpoints * 1.2 ;
37638: LD_ADDR_VAR 0 10
37642: PUSH
37643: LD_VAR 0 10
37647: PUSH
37648: LD_REAL  1.20000000000000E+0000
37651: MUL
37652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37653: LD_VAR 0 6
37657: PPUSH
37658: CALL_OW 264
37662: PUSH
37663: LD_INT 6
37665: PUSH
37666: LD_INT 46
37668: PUSH
37669: LD_INT 47
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: LIST
37676: IN
37677: IFFALSE 37694
// bpoints := bpoints * 1.2 ;
37679: LD_ADDR_VAR 0 10
37683: PUSH
37684: LD_VAR 0 10
37688: PUSH
37689: LD_REAL  1.20000000000000E+0000
37692: MUL
37693: ST_TO_ADDR
// end ; unit_building :
37694: GO 37708
37696: LD_INT 3
37698: DOUBLE
37699: EQUAL
37700: IFTRUE 37704
37702: GO 37707
37704: POP
// ; end ;
37705: GO 37708
37707: POP
// for j = 1 to 3 do
37708: LD_ADDR_VAR 0 7
37712: PUSH
37713: DOUBLE
37714: LD_INT 1
37716: DEC
37717: ST_TO_ADDR
37718: LD_INT 3
37720: PUSH
37721: FOR_TO
37722: IFFALSE 37775
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37724: LD_ADDR_VAR 0 5
37728: PUSH
37729: LD_VAR 0 5
37733: PPUSH
37734: LD_VAR 0 7
37738: PPUSH
37739: LD_VAR 0 5
37743: PUSH
37744: LD_VAR 0 7
37748: ARRAY
37749: PUSH
37750: LD_VAR 0 9
37754: PUSH
37755: LD_VAR 0 7
37759: ARRAY
37760: PUSH
37761: LD_VAR 0 10
37765: MUL
37766: PLUS
37767: PPUSH
37768: CALL_OW 1
37772: ST_TO_ADDR
37773: GO 37721
37775: POP
37776: POP
// end ;
37777: GO 36250
37779: POP
37780: POP
// result := Replace ( result , 4 , tmp ) ;
37781: LD_ADDR_VAR 0 5
37785: PUSH
37786: LD_VAR 0 5
37790: PPUSH
37791: LD_INT 4
37793: PPUSH
37794: LD_VAR 0 8
37798: PPUSH
37799: CALL_OW 1
37803: ST_TO_ADDR
// end ;
37804: LD_VAR 0 5
37808: RET
// export function DangerAtRange ( unit , range ) ; begin
37809: LD_INT 0
37811: PPUSH
// if not unit then
37812: LD_VAR 0 1
37816: NOT
37817: IFFALSE 37821
// exit ;
37819: GO 37866
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37821: LD_ADDR_VAR 0 3
37825: PUSH
37826: LD_VAR 0 1
37830: PPUSH
37831: CALL_OW 255
37835: PPUSH
37836: LD_VAR 0 1
37840: PPUSH
37841: CALL_OW 250
37845: PPUSH
37846: LD_VAR 0 1
37850: PPUSH
37851: CALL_OW 251
37855: PPUSH
37856: LD_VAR 0 2
37860: PPUSH
37861: CALL 36100 0 4
37865: ST_TO_ADDR
// end ;
37866: LD_VAR 0 3
37870: RET
// export function DangerInArea ( side , area ) ; begin
37871: LD_INT 0
37873: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37874: LD_ADDR_VAR 0 3
37878: PUSH
37879: LD_VAR 0 2
37883: PPUSH
37884: LD_INT 81
37886: PUSH
37887: LD_VAR 0 1
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PPUSH
37896: CALL_OW 70
37900: ST_TO_ADDR
// end ;
37901: LD_VAR 0 3
37905: RET
// export function IsExtension ( b ) ; begin
37906: LD_INT 0
37908: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37909: LD_ADDR_VAR 0 2
37913: PUSH
37914: LD_VAR 0 1
37918: PUSH
37919: LD_INT 23
37921: PUSH
37922: LD_INT 20
37924: PUSH
37925: LD_INT 22
37927: PUSH
37928: LD_INT 17
37930: PUSH
37931: LD_INT 24
37933: PUSH
37934: LD_INT 21
37936: PUSH
37937: LD_INT 19
37939: PUSH
37940: LD_INT 16
37942: PUSH
37943: LD_INT 25
37945: PUSH
37946: LD_INT 18
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: IN
37961: ST_TO_ADDR
// end ;
37962: LD_VAR 0 2
37966: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37967: LD_INT 0
37969: PPUSH
37970: PPUSH
37971: PPUSH
// result := [ ] ;
37972: LD_ADDR_VAR 0 4
37976: PUSH
37977: EMPTY
37978: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37979: LD_ADDR_VAR 0 5
37983: PUSH
37984: LD_VAR 0 2
37988: PPUSH
37989: LD_INT 21
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PPUSH
37999: CALL_OW 70
38003: ST_TO_ADDR
// if not tmp then
38004: LD_VAR 0 5
38008: NOT
38009: IFFALSE 38013
// exit ;
38011: GO 38077
// if checkLink then
38013: LD_VAR 0 3
38017: IFFALSE 38067
// begin for i in tmp do
38019: LD_ADDR_VAR 0 6
38023: PUSH
38024: LD_VAR 0 5
38028: PUSH
38029: FOR_IN
38030: IFFALSE 38065
// if GetBase ( i ) <> base then
38032: LD_VAR 0 6
38036: PPUSH
38037: CALL_OW 274
38041: PUSH
38042: LD_VAR 0 1
38046: NONEQUAL
38047: IFFALSE 38063
// ComLinkToBase ( base , i ) ;
38049: LD_VAR 0 1
38053: PPUSH
38054: LD_VAR 0 6
38058: PPUSH
38059: CALL_OW 169
38063: GO 38029
38065: POP
38066: POP
// end ; result := tmp ;
38067: LD_ADDR_VAR 0 4
38071: PUSH
38072: LD_VAR 0 5
38076: ST_TO_ADDR
// end ;
38077: LD_VAR 0 4
38081: RET
// export function ComComplete ( units , b ) ; var i ; begin
38082: LD_INT 0
38084: PPUSH
38085: PPUSH
// if not units then
38086: LD_VAR 0 1
38090: NOT
38091: IFFALSE 38095
// exit ;
38093: GO 38185
// for i in units do
38095: LD_ADDR_VAR 0 4
38099: PUSH
38100: LD_VAR 0 1
38104: PUSH
38105: FOR_IN
38106: IFFALSE 38183
// if BuildingStatus ( b ) = bs_build then
38108: LD_VAR 0 2
38112: PPUSH
38113: CALL_OW 461
38117: PUSH
38118: LD_INT 1
38120: EQUAL
38121: IFFALSE 38181
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38123: LD_VAR 0 4
38127: PPUSH
38128: LD_STRING h
38130: PUSH
38131: LD_VAR 0 2
38135: PPUSH
38136: CALL_OW 250
38140: PUSH
38141: LD_VAR 0 2
38145: PPUSH
38146: CALL_OW 251
38150: PUSH
38151: LD_VAR 0 2
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: PPUSH
38177: CALL_OW 446
38181: GO 38105
38183: POP
38184: POP
// end ;
38185: LD_VAR 0 3
38189: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38190: LD_INT 0
38192: PPUSH
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
38197: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38198: LD_VAR 0 1
38202: NOT
38203: IFTRUE 38220
38205: PUSH
38206: LD_VAR 0 1
38210: PPUSH
38211: CALL_OW 263
38215: PUSH
38216: LD_INT 2
38218: NONEQUAL
38219: OR
38220: IFFALSE 38224
// exit ;
38222: GO 38540
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38224: LD_ADDR_VAR 0 6
38228: PUSH
38229: LD_INT 22
38231: PUSH
38232: LD_VAR 0 1
38236: PPUSH
38237: CALL_OW 255
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: LD_INT 30
38251: PUSH
38252: LD_INT 36
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 34
38261: PUSH
38262: LD_INT 31
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PPUSH
38278: CALL_OW 69
38282: ST_TO_ADDR
// if not tmp then
38283: LD_VAR 0 6
38287: NOT
38288: IFFALSE 38292
// exit ;
38290: GO 38540
// result := [ ] ;
38292: LD_ADDR_VAR 0 2
38296: PUSH
38297: EMPTY
38298: ST_TO_ADDR
// for i in tmp do
38299: LD_ADDR_VAR 0 3
38303: PUSH
38304: LD_VAR 0 6
38308: PUSH
38309: FOR_IN
38310: IFFALSE 38381
// begin t := UnitsInside ( i ) ;
38312: LD_ADDR_VAR 0 4
38316: PUSH
38317: LD_VAR 0 3
38321: PPUSH
38322: CALL_OW 313
38326: ST_TO_ADDR
// if t then
38327: LD_VAR 0 4
38331: IFFALSE 38379
// for j in t do
38333: LD_ADDR_VAR 0 7
38337: PUSH
38338: LD_VAR 0 4
38342: PUSH
38343: FOR_IN
38344: IFFALSE 38377
// result := Replace ( result , result + 1 , j ) ;
38346: LD_ADDR_VAR 0 2
38350: PUSH
38351: LD_VAR 0 2
38355: PPUSH
38356: LD_VAR 0 2
38360: PUSH
38361: LD_INT 1
38363: PLUS
38364: PPUSH
38365: LD_VAR 0 7
38369: PPUSH
38370: CALL_OW 1
38374: ST_TO_ADDR
38375: GO 38343
38377: POP
38378: POP
// end ;
38379: GO 38309
38381: POP
38382: POP
// if not result then
38383: LD_VAR 0 2
38387: NOT
38388: IFFALSE 38392
// exit ;
38390: GO 38540
// mech := result [ 1 ] ;
38392: LD_ADDR_VAR 0 5
38396: PUSH
38397: LD_VAR 0 2
38401: PUSH
38402: LD_INT 1
38404: ARRAY
38405: ST_TO_ADDR
// if result > 1 then
38406: LD_VAR 0 2
38410: PUSH
38411: LD_INT 1
38413: GREATER
38414: IFFALSE 38526
// begin for i = 2 to result do
38416: LD_ADDR_VAR 0 3
38420: PUSH
38421: DOUBLE
38422: LD_INT 2
38424: DEC
38425: ST_TO_ADDR
38426: LD_VAR 0 2
38430: PUSH
38431: FOR_TO
38432: IFFALSE 38524
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38434: LD_ADDR_VAR 0 4
38438: PUSH
38439: LD_VAR 0 2
38443: PUSH
38444: LD_VAR 0 3
38448: ARRAY
38449: PPUSH
38450: LD_INT 3
38452: PPUSH
38453: CALL_OW 259
38457: PUSH
38458: LD_VAR 0 2
38462: PUSH
38463: LD_VAR 0 3
38467: ARRAY
38468: PPUSH
38469: CALL_OW 432
38473: MINUS
38474: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38475: LD_VAR 0 4
38479: PUSH
38480: LD_VAR 0 5
38484: PPUSH
38485: LD_INT 3
38487: PPUSH
38488: CALL_OW 259
38492: PUSH
38493: LD_VAR 0 5
38497: PPUSH
38498: CALL_OW 432
38502: MINUS
38503: GREATEREQUAL
38504: IFFALSE 38522
// mech := result [ i ] ;
38506: LD_ADDR_VAR 0 5
38510: PUSH
38511: LD_VAR 0 2
38515: PUSH
38516: LD_VAR 0 3
38520: ARRAY
38521: ST_TO_ADDR
// end ;
38522: GO 38431
38524: POP
38525: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38526: LD_VAR 0 1
38530: PPUSH
38531: LD_VAR 0 5
38535: PPUSH
38536: CALL_OW 135
// end ;
38540: LD_VAR 0 2
38544: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38545: LD_INT 0
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
38551: PPUSH
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
// result := [ ] ;
38560: LD_ADDR_VAR 0 7
38564: PUSH
38565: EMPTY
38566: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38567: LD_VAR 0 1
38571: PPUSH
38572: CALL_OW 266
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: IN
38587: NOT
38588: IFFALSE 38592
// exit ;
38590: GO 40232
// if name then
38592: LD_VAR 0 3
38596: IFFALSE 38612
// SetBName ( base_dep , name ) ;
38598: LD_VAR 0 1
38602: PPUSH
38603: LD_VAR 0 3
38607: PPUSH
38608: CALL_OW 500
// base := GetBase ( base_dep ) ;
38612: LD_ADDR_VAR 0 15
38616: PUSH
38617: LD_VAR 0 1
38621: PPUSH
38622: CALL_OW 274
38626: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38627: LD_ADDR_VAR 0 16
38631: PUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 255
38641: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38642: LD_ADDR_VAR 0 17
38646: PUSH
38647: LD_VAR 0 1
38651: PPUSH
38652: CALL_OW 248
38656: ST_TO_ADDR
// if sources then
38657: LD_VAR 0 5
38661: IFFALSE 38708
// for i = 1 to 3 do
38663: LD_ADDR_VAR 0 8
38667: PUSH
38668: DOUBLE
38669: LD_INT 1
38671: DEC
38672: ST_TO_ADDR
38673: LD_INT 3
38675: PUSH
38676: FOR_TO
38677: IFFALSE 38706
// AddResourceType ( base , i , sources [ i ] ) ;
38679: LD_VAR 0 15
38683: PPUSH
38684: LD_VAR 0 8
38688: PPUSH
38689: LD_VAR 0 5
38693: PUSH
38694: LD_VAR 0 8
38698: ARRAY
38699: PPUSH
38700: CALL_OW 276
38704: GO 38676
38706: POP
38707: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38708: LD_ADDR_VAR 0 18
38712: PUSH
38713: LD_VAR 0 15
38717: PPUSH
38718: LD_VAR 0 2
38722: PPUSH
38723: LD_INT 1
38725: PPUSH
38726: CALL 37967 0 3
38730: ST_TO_ADDR
// InitHc ;
38731: CALL_OW 19
// InitUc ;
38735: CALL_OW 18
// uc_side := side ;
38739: LD_ADDR_OWVAR 20
38743: PUSH
38744: LD_VAR 0 16
38748: ST_TO_ADDR
// uc_nation := nation ;
38749: LD_ADDR_OWVAR 21
38753: PUSH
38754: LD_VAR 0 17
38758: ST_TO_ADDR
// if buildings then
38759: LD_VAR 0 18
38763: IFFALSE 40091
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38765: LD_ADDR_VAR 0 19
38769: PUSH
38770: LD_VAR 0 18
38774: PPUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 30
38780: PUSH
38781: LD_INT 29
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 30
38790: PUSH
38791: LD_INT 30
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: PPUSH
38803: CALL_OW 72
38807: ST_TO_ADDR
// if tmp then
38808: LD_VAR 0 19
38812: IFFALSE 38860
// for i in tmp do
38814: LD_ADDR_VAR 0 8
38818: PUSH
38819: LD_VAR 0 19
38823: PUSH
38824: FOR_IN
38825: IFFALSE 38858
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38827: LD_VAR 0 8
38831: PPUSH
38832: CALL_OW 250
38836: PPUSH
38837: LD_VAR 0 8
38841: PPUSH
38842: CALL_OW 251
38846: PPUSH
38847: LD_VAR 0 16
38851: PPUSH
38852: CALL_OW 441
38856: GO 38824
38858: POP
38859: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38860: LD_VAR 0 18
38864: PPUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 30
38870: PUSH
38871: LD_INT 32
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 30
38880: PUSH
38881: LD_INT 33
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: PPUSH
38893: CALL_OW 72
38897: IFFALSE 38985
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38899: LD_ADDR_VAR 0 8
38903: PUSH
38904: LD_VAR 0 18
38908: PPUSH
38909: LD_INT 2
38911: PUSH
38912: LD_INT 30
38914: PUSH
38915: LD_INT 32
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 30
38924: PUSH
38925: LD_INT 33
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: PPUSH
38937: CALL_OW 72
38941: PUSH
38942: FOR_IN
38943: IFFALSE 38983
// begin if not GetBWeapon ( i ) then
38945: LD_VAR 0 8
38949: PPUSH
38950: CALL_OW 269
38954: NOT
38955: IFFALSE 38981
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38957: LD_VAR 0 8
38961: PPUSH
38962: LD_VAR 0 8
38966: PPUSH
38967: LD_VAR 0 2
38971: PPUSH
38972: CALL 40237 0 2
38976: PPUSH
38977: CALL_OW 431
// end ;
38981: GO 38942
38983: POP
38984: POP
// end ; for i = 1 to personel do
38985: LD_ADDR_VAR 0 8
38989: PUSH
38990: DOUBLE
38991: LD_INT 1
38993: DEC
38994: ST_TO_ADDR
38995: LD_VAR 0 6
38999: PUSH
39000: FOR_TO
39001: IFFALSE 40071
// begin if i > 4 then
39003: LD_VAR 0 8
39007: PUSH
39008: LD_INT 4
39010: GREATER
39011: IFFALSE 39015
// break ;
39013: GO 40071
// case i of 1 :
39015: LD_VAR 0 8
39019: PUSH
39020: LD_INT 1
39022: DOUBLE
39023: EQUAL
39024: IFTRUE 39028
39026: GO 39108
39028: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39029: LD_ADDR_VAR 0 12
39033: PUSH
39034: LD_VAR 0 18
39038: PPUSH
39039: LD_INT 22
39041: PUSH
39042: LD_VAR 0 16
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 58
39053: PUSH
39054: EMPTY
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 30
39062: PUSH
39063: LD_INT 32
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 30
39072: PUSH
39073: LD_INT 4
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 30
39082: PUSH
39083: LD_INT 5
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: PPUSH
39101: CALL_OW 72
39105: ST_TO_ADDR
39106: GO 39330
39108: LD_INT 2
39110: DOUBLE
39111: EQUAL
39112: IFTRUE 39116
39114: GO 39178
39116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39117: LD_ADDR_VAR 0 12
39121: PUSH
39122: LD_VAR 0 18
39126: PPUSH
39127: LD_INT 22
39129: PUSH
39130: LD_VAR 0 16
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: LD_INT 30
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 30
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PPUSH
39171: CALL_OW 72
39175: ST_TO_ADDR
39176: GO 39330
39178: LD_INT 3
39180: DOUBLE
39181: EQUAL
39182: IFTRUE 39186
39184: GO 39248
39186: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39187: LD_ADDR_VAR 0 12
39191: PUSH
39192: LD_VAR 0 18
39196: PPUSH
39197: LD_INT 22
39199: PUSH
39200: LD_VAR 0 16
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: LD_INT 30
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 30
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PPUSH
39241: CALL_OW 72
39245: ST_TO_ADDR
39246: GO 39330
39248: LD_INT 4
39250: DOUBLE
39251: EQUAL
39252: IFTRUE 39256
39254: GO 39329
39256: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39257: LD_ADDR_VAR 0 12
39261: PUSH
39262: LD_VAR 0 18
39266: PPUSH
39267: LD_INT 22
39269: PUSH
39270: LD_VAR 0 16
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: LD_INT 30
39284: PUSH
39285: LD_INT 6
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 30
39294: PUSH
39295: LD_INT 7
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 30
39304: PUSH
39305: LD_INT 8
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PPUSH
39322: CALL_OW 72
39326: ST_TO_ADDR
39327: GO 39330
39329: POP
// if i = 1 then
39330: LD_VAR 0 8
39334: PUSH
39335: LD_INT 1
39337: EQUAL
39338: IFFALSE 39449
// begin tmp := [ ] ;
39340: LD_ADDR_VAR 0 19
39344: PUSH
39345: EMPTY
39346: ST_TO_ADDR
// for j in f do
39347: LD_ADDR_VAR 0 9
39351: PUSH
39352: LD_VAR 0 12
39356: PUSH
39357: FOR_IN
39358: IFFALSE 39431
// if GetBType ( j ) = b_bunker then
39360: LD_VAR 0 9
39364: PPUSH
39365: CALL_OW 266
39369: PUSH
39370: LD_INT 32
39372: EQUAL
39373: IFFALSE 39400
// tmp := Insert ( tmp , 1 , j ) else
39375: LD_ADDR_VAR 0 19
39379: PUSH
39380: LD_VAR 0 19
39384: PPUSH
39385: LD_INT 1
39387: PPUSH
39388: LD_VAR 0 9
39392: PPUSH
39393: CALL_OW 2
39397: ST_TO_ADDR
39398: GO 39429
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39400: LD_ADDR_VAR 0 19
39404: PUSH
39405: LD_VAR 0 19
39409: PPUSH
39410: LD_VAR 0 19
39414: PUSH
39415: LD_INT 1
39417: PLUS
39418: PPUSH
39419: LD_VAR 0 9
39423: PPUSH
39424: CALL_OW 2
39428: ST_TO_ADDR
39429: GO 39357
39431: POP
39432: POP
// if tmp then
39433: LD_VAR 0 19
39437: IFFALSE 39449
// f := tmp ;
39439: LD_ADDR_VAR 0 12
39443: PUSH
39444: LD_VAR 0 19
39448: ST_TO_ADDR
// end ; x := personel [ i ] ;
39449: LD_ADDR_VAR 0 13
39453: PUSH
39454: LD_VAR 0 6
39458: PUSH
39459: LD_VAR 0 8
39463: ARRAY
39464: ST_TO_ADDR
// if x = - 1 then
39465: LD_VAR 0 13
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: EQUAL
39474: IFFALSE 39685
// begin for j in f do
39476: LD_ADDR_VAR 0 9
39480: PUSH
39481: LD_VAR 0 12
39485: PUSH
39486: FOR_IN
39487: IFFALSE 39681
// repeat InitHc ;
39489: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39493: LD_VAR 0 9
39497: PPUSH
39498: CALL_OW 266
39502: PUSH
39503: LD_INT 5
39505: EQUAL
39506: IFFALSE 39576
// begin if UnitsInside ( j ) < 3 then
39508: LD_VAR 0 9
39512: PPUSH
39513: CALL_OW 313
39517: PUSH
39518: LD_INT 3
39520: LESS
39521: IFFALSE 39557
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39523: LD_INT 0
39525: PPUSH
39526: LD_INT 5
39528: PUSH
39529: LD_INT 8
39531: PUSH
39532: LD_INT 9
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: PUSH
39540: LD_VAR 0 17
39544: ARRAY
39545: PPUSH
39546: LD_VAR 0 4
39550: PPUSH
39551: CALL_OW 380
39555: GO 39574
// PrepareHuman ( false , i , skill ) ;
39557: LD_INT 0
39559: PPUSH
39560: LD_VAR 0 8
39564: PPUSH
39565: LD_VAR 0 4
39569: PPUSH
39570: CALL_OW 380
// end else
39574: GO 39593
// PrepareHuman ( false , i , skill ) ;
39576: LD_INT 0
39578: PPUSH
39579: LD_VAR 0 8
39583: PPUSH
39584: LD_VAR 0 4
39588: PPUSH
39589: CALL_OW 380
// un := CreateHuman ;
39593: LD_ADDR_VAR 0 14
39597: PUSH
39598: CALL_OW 44
39602: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39603: LD_ADDR_VAR 0 7
39607: PUSH
39608: LD_VAR 0 7
39612: PPUSH
39613: LD_INT 1
39615: PPUSH
39616: LD_VAR 0 14
39620: PPUSH
39621: CALL_OW 2
39625: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39626: LD_VAR 0 14
39630: PPUSH
39631: LD_VAR 0 9
39635: PPUSH
39636: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39640: LD_VAR 0 9
39644: PPUSH
39645: CALL_OW 313
39649: PUSH
39650: LD_INT 6
39652: EQUAL
39653: IFTRUE 39677
39655: PUSH
39656: LD_VAR 0 9
39660: PPUSH
39661: CALL_OW 266
39665: PUSH
39666: LD_INT 32
39668: PUSH
39669: LD_INT 31
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: IN
39676: OR
39677: IFFALSE 39489
39679: GO 39486
39681: POP
39682: POP
// end else
39683: GO 40069
// for j = 1 to x do
39685: LD_ADDR_VAR 0 9
39689: PUSH
39690: DOUBLE
39691: LD_INT 1
39693: DEC
39694: ST_TO_ADDR
39695: LD_VAR 0 13
39699: PUSH
39700: FOR_TO
39701: IFFALSE 40067
// begin InitHc ;
39703: CALL_OW 19
// if not f then
39707: LD_VAR 0 12
39711: NOT
39712: IFFALSE 39801
// begin PrepareHuman ( false , i , skill ) ;
39714: LD_INT 0
39716: PPUSH
39717: LD_VAR 0 8
39721: PPUSH
39722: LD_VAR 0 4
39726: PPUSH
39727: CALL_OW 380
// un := CreateHuman ;
39731: LD_ADDR_VAR 0 14
39735: PUSH
39736: CALL_OW 44
39740: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39741: LD_ADDR_VAR 0 7
39745: PUSH
39746: LD_VAR 0 7
39750: PPUSH
39751: LD_INT 1
39753: PPUSH
39754: LD_VAR 0 14
39758: PPUSH
39759: CALL_OW 2
39763: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39764: LD_VAR 0 14
39768: PPUSH
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 250
39778: PPUSH
39779: LD_VAR 0 1
39783: PPUSH
39784: CALL_OW 251
39788: PPUSH
39789: LD_INT 10
39791: PPUSH
39792: LD_INT 0
39794: PPUSH
39795: CALL_OW 50
// continue ;
39799: GO 39700
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39801: LD_VAR 0 12
39805: PUSH
39806: LD_INT 1
39808: ARRAY
39809: PPUSH
39810: CALL_OW 313
39814: IFFALSE 39842
39816: PUSH
39817: LD_VAR 0 12
39821: PUSH
39822: LD_INT 1
39824: ARRAY
39825: PPUSH
39826: CALL_OW 266
39830: PUSH
39831: LD_INT 32
39833: PUSH
39834: LD_INT 31
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: IN
39841: AND
39842: IFTRUE 39863
39844: PUSH
39845: LD_VAR 0 12
39849: PUSH
39850: LD_INT 1
39852: ARRAY
39853: PPUSH
39854: CALL_OW 313
39858: PUSH
39859: LD_INT 6
39861: EQUAL
39862: OR
39863: IFFALSE 39883
// f := Delete ( f , 1 ) ;
39865: LD_ADDR_VAR 0 12
39869: PUSH
39870: LD_VAR 0 12
39874: PPUSH
39875: LD_INT 1
39877: PPUSH
39878: CALL_OW 3
39882: ST_TO_ADDR
// if not f then
39883: LD_VAR 0 12
39887: NOT
39888: IFFALSE 39906
// begin x := x + 2 ;
39890: LD_ADDR_VAR 0 13
39894: PUSH
39895: LD_VAR 0 13
39899: PUSH
39900: LD_INT 2
39902: PLUS
39903: ST_TO_ADDR
// continue ;
39904: GO 39700
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39906: LD_VAR 0 12
39910: PUSH
39911: LD_INT 1
39913: ARRAY
39914: PPUSH
39915: CALL_OW 266
39919: PUSH
39920: LD_INT 5
39922: EQUAL
39923: IFFALSE 39997
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39925: LD_VAR 0 12
39929: PUSH
39930: LD_INT 1
39932: ARRAY
39933: PPUSH
39934: CALL_OW 313
39938: PUSH
39939: LD_INT 3
39941: LESS
39942: IFFALSE 39978
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39944: LD_INT 0
39946: PPUSH
39947: LD_INT 5
39949: PUSH
39950: LD_INT 8
39952: PUSH
39953: LD_INT 9
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: LIST
39960: PUSH
39961: LD_VAR 0 17
39965: ARRAY
39966: PPUSH
39967: LD_VAR 0 4
39971: PPUSH
39972: CALL_OW 380
39976: GO 39995
// PrepareHuman ( false , i , skill ) ;
39978: LD_INT 0
39980: PPUSH
39981: LD_VAR 0 8
39985: PPUSH
39986: LD_VAR 0 4
39990: PPUSH
39991: CALL_OW 380
// end else
39995: GO 40014
// PrepareHuman ( false , i , skill ) ;
39997: LD_INT 0
39999: PPUSH
40000: LD_VAR 0 8
40004: PPUSH
40005: LD_VAR 0 4
40009: PPUSH
40010: CALL_OW 380
// un := CreateHuman ;
40014: LD_ADDR_VAR 0 14
40018: PUSH
40019: CALL_OW 44
40023: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40024: LD_ADDR_VAR 0 7
40028: PUSH
40029: LD_VAR 0 7
40033: PPUSH
40034: LD_INT 1
40036: PPUSH
40037: LD_VAR 0 14
40041: PPUSH
40042: CALL_OW 2
40046: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40047: LD_VAR 0 14
40051: PPUSH
40052: LD_VAR 0 12
40056: PUSH
40057: LD_INT 1
40059: ARRAY
40060: PPUSH
40061: CALL_OW 52
// end ;
40065: GO 39700
40067: POP
40068: POP
// end ;
40069: GO 39000
40071: POP
40072: POP
// result := result ^ buildings ;
40073: LD_ADDR_VAR 0 7
40077: PUSH
40078: LD_VAR 0 7
40082: PUSH
40083: LD_VAR 0 18
40087: ADD
40088: ST_TO_ADDR
// end else
40089: GO 40232
// begin for i = 1 to personel do
40091: LD_ADDR_VAR 0 8
40095: PUSH
40096: DOUBLE
40097: LD_INT 1
40099: DEC
40100: ST_TO_ADDR
40101: LD_VAR 0 6
40105: PUSH
40106: FOR_TO
40107: IFFALSE 40230
// begin if i > 4 then
40109: LD_VAR 0 8
40113: PUSH
40114: LD_INT 4
40116: GREATER
40117: IFFALSE 40121
// break ;
40119: GO 40230
// x := personel [ i ] ;
40121: LD_ADDR_VAR 0 13
40125: PUSH
40126: LD_VAR 0 6
40130: PUSH
40131: LD_VAR 0 8
40135: ARRAY
40136: ST_TO_ADDR
// if x = - 1 then
40137: LD_VAR 0 13
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: EQUAL
40146: IFFALSE 40150
// continue ;
40148: GO 40106
// PrepareHuman ( false , i , skill ) ;
40150: LD_INT 0
40152: PPUSH
40153: LD_VAR 0 8
40157: PPUSH
40158: LD_VAR 0 4
40162: PPUSH
40163: CALL_OW 380
// un := CreateHuman ;
40167: LD_ADDR_VAR 0 14
40171: PUSH
40172: CALL_OW 44
40176: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40177: LD_VAR 0 14
40181: PPUSH
40182: LD_VAR 0 1
40186: PPUSH
40187: CALL_OW 250
40191: PPUSH
40192: LD_VAR 0 1
40196: PPUSH
40197: CALL_OW 251
40201: PPUSH
40202: LD_INT 10
40204: PPUSH
40205: LD_INT 0
40207: PPUSH
40208: CALL_OW 50
// result := result ^ un ;
40212: LD_ADDR_VAR 0 7
40216: PUSH
40217: LD_VAR 0 7
40221: PUSH
40222: LD_VAR 0 14
40226: ADD
40227: ST_TO_ADDR
// end ;
40228: GO 40106
40230: POP
40231: POP
// end ; end ;
40232: LD_VAR 0 7
40236: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40237: LD_INT 0
40239: PPUSH
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
40249: PPUSH
40250: PPUSH
40251: PPUSH
40252: PPUSH
40253: PPUSH
40254: PPUSH
// result := false ;
40255: LD_ADDR_VAR 0 3
40259: PUSH
40260: LD_INT 0
40262: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40263: LD_VAR 0 1
40267: NOT
40268: IFTRUE 40293
40270: PUSH
40271: LD_VAR 0 1
40275: PPUSH
40276: CALL_OW 266
40280: PUSH
40281: LD_INT 32
40283: PUSH
40284: LD_INT 33
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: IN
40291: NOT
40292: OR
40293: IFFALSE 40297
// exit ;
40295: GO 41432
// nat := GetNation ( tower ) ;
40297: LD_ADDR_VAR 0 12
40301: PUSH
40302: LD_VAR 0 1
40306: PPUSH
40307: CALL_OW 248
40311: ST_TO_ADDR
// side := GetSide ( tower ) ;
40312: LD_ADDR_VAR 0 16
40316: PUSH
40317: LD_VAR 0 1
40321: PPUSH
40322: CALL_OW 255
40326: ST_TO_ADDR
// x := GetX ( tower ) ;
40327: LD_ADDR_VAR 0 10
40331: PUSH
40332: LD_VAR 0 1
40336: PPUSH
40337: CALL_OW 250
40341: ST_TO_ADDR
// y := GetY ( tower ) ;
40342: LD_ADDR_VAR 0 11
40346: PUSH
40347: LD_VAR 0 1
40351: PPUSH
40352: CALL_OW 251
40356: ST_TO_ADDR
// if not x or not y then
40357: LD_VAR 0 10
40361: NOT
40362: IFTRUE 40371
40364: PUSH
40365: LD_VAR 0 11
40369: NOT
40370: OR
40371: IFFALSE 40375
// exit ;
40373: GO 41432
// weapon := 0 ;
40375: LD_ADDR_VAR 0 18
40379: PUSH
40380: LD_INT 0
40382: ST_TO_ADDR
// fac_list := [ ] ;
40383: LD_ADDR_VAR 0 17
40387: PUSH
40388: EMPTY
40389: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40390: LD_ADDR_VAR 0 6
40394: PUSH
40395: LD_VAR 0 1
40399: PPUSH
40400: CALL_OW 274
40404: PPUSH
40405: LD_VAR 0 2
40409: PPUSH
40410: LD_INT 0
40412: PPUSH
40413: CALL 37967 0 3
40417: PPUSH
40418: LD_INT 30
40420: PUSH
40421: LD_INT 3
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PPUSH
40428: CALL_OW 72
40432: ST_TO_ADDR
// if not factories then
40433: LD_VAR 0 6
40437: NOT
40438: IFFALSE 40442
// exit ;
40440: GO 41432
// for i in factories do
40442: LD_ADDR_VAR 0 8
40446: PUSH
40447: LD_VAR 0 6
40451: PUSH
40452: FOR_IN
40453: IFFALSE 40478
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40455: LD_ADDR_VAR 0 17
40459: PUSH
40460: LD_VAR 0 17
40464: PUSH
40465: LD_VAR 0 8
40469: PPUSH
40470: CALL_OW 478
40474: UNION
40475: ST_TO_ADDR
40476: GO 40452
40478: POP
40479: POP
// if not fac_list then
40480: LD_VAR 0 17
40484: NOT
40485: IFFALSE 40489
// exit ;
40487: GO 41432
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40489: LD_ADDR_VAR 0 5
40493: PUSH
40494: LD_INT 4
40496: PUSH
40497: LD_INT 5
40499: PUSH
40500: LD_INT 9
40502: PUSH
40503: LD_INT 10
40505: PUSH
40506: LD_INT 6
40508: PUSH
40509: LD_INT 7
40511: PUSH
40512: LD_INT 11
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 27
40526: PUSH
40527: LD_INT 28
40529: PUSH
40530: LD_INT 26
40532: PUSH
40533: LD_INT 30
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 43
40544: PUSH
40545: LD_INT 44
40547: PUSH
40548: LD_INT 46
40550: PUSH
40551: LD_INT 45
40553: PUSH
40554: LD_INT 47
40556: PUSH
40557: LD_INT 49
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: PUSH
40573: LD_VAR 0 12
40577: ARRAY
40578: ST_TO_ADDR
// list := list isect fac_list ;
40579: LD_ADDR_VAR 0 5
40583: PUSH
40584: LD_VAR 0 5
40588: PUSH
40589: LD_VAR 0 17
40593: ISECT
40594: ST_TO_ADDR
// if not list then
40595: LD_VAR 0 5
40599: NOT
40600: IFFALSE 40604
// exit ;
40602: GO 41432
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40604: LD_VAR 0 12
40608: PUSH
40609: LD_INT 3
40611: EQUAL
40612: IFFALSE 40624
40614: PUSH
40615: LD_INT 49
40617: PUSH
40618: LD_VAR 0 5
40622: IN
40623: AND
40624: IFFALSE 40644
40626: PUSH
40627: LD_INT 31
40629: PPUSH
40630: LD_VAR 0 16
40634: PPUSH
40635: CALL_OW 321
40639: PUSH
40640: LD_INT 2
40642: EQUAL
40643: AND
40644: IFFALSE 40704
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40646: LD_INT 22
40648: PUSH
40649: LD_VAR 0 16
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 35
40660: PUSH
40661: LD_INT 49
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 91
40670: PUSH
40671: LD_VAR 0 1
40675: PUSH
40676: LD_INT 10
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: PPUSH
40689: CALL_OW 69
40693: NOT
40694: IFFALSE 40704
// weapon := ru_time_lapser ;
40696: LD_ADDR_VAR 0 18
40700: PUSH
40701: LD_INT 49
40703: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40704: LD_VAR 0 12
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: IN
40719: IFFALSE 40743
40721: PUSH
40722: LD_INT 11
40724: PUSH
40725: LD_VAR 0 5
40729: IN
40730: IFTRUE 40742
40732: PUSH
40733: LD_INT 30
40735: PUSH
40736: LD_VAR 0 5
40740: IN
40741: OR
40742: AND
40743: IFFALSE 40763
40745: PUSH
40746: LD_INT 6
40748: PPUSH
40749: LD_VAR 0 16
40753: PPUSH
40754: CALL_OW 321
40758: PUSH
40759: LD_INT 2
40761: EQUAL
40762: AND
40763: IFFALSE 40930
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40765: LD_INT 22
40767: PUSH
40768: LD_VAR 0 16
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 35
40782: PUSH
40783: LD_INT 11
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 35
40792: PUSH
40793: LD_INT 30
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 91
40807: PUSH
40808: LD_VAR 0 1
40812: PUSH
40813: LD_INT 18
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: LIST
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: PPUSH
40826: CALL_OW 69
40830: NOT
40831: IFFALSE 40907
40833: PUSH
40834: LD_INT 22
40836: PUSH
40837: LD_VAR 0 16
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 30
40851: PUSH
40852: LD_INT 32
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 30
40861: PUSH
40862: LD_INT 33
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 91
40876: PUSH
40877: LD_VAR 0 1
40881: PUSH
40882: LD_INT 12
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: LIST
40894: PUSH
40895: EMPTY
40896: LIST
40897: PPUSH
40898: CALL_OW 69
40902: PUSH
40903: LD_INT 2
40905: GREATER
40906: AND
40907: IFFALSE 40930
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40909: LD_ADDR_VAR 0 18
40913: PUSH
40914: LD_INT 11
40916: PUSH
40917: LD_INT 30
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_VAR 0 12
40928: ARRAY
40929: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40930: LD_VAR 0 18
40934: NOT
40935: IFFALSE 40955
40937: PUSH
40938: LD_INT 40
40940: PPUSH
40941: LD_VAR 0 16
40945: PPUSH
40946: CALL_OW 321
40950: PUSH
40951: LD_INT 2
40953: EQUAL
40954: AND
40955: IFFALSE 40991
40957: PUSH
40958: LD_INT 7
40960: PUSH
40961: LD_VAR 0 5
40965: IN
40966: IFTRUE 40978
40968: PUSH
40969: LD_INT 28
40971: PUSH
40972: LD_VAR 0 5
40976: IN
40977: OR
40978: IFTRUE 40990
40980: PUSH
40981: LD_INT 45
40983: PUSH
40984: LD_VAR 0 5
40988: IN
40989: OR
40990: AND
40991: IFFALSE 41245
// begin hex := GetHexInfo ( x , y ) ;
40993: LD_ADDR_VAR 0 4
40997: PUSH
40998: LD_VAR 0 10
41002: PPUSH
41003: LD_VAR 0 11
41007: PPUSH
41008: CALL_OW 546
41012: ST_TO_ADDR
// if hex [ 1 ] then
41013: LD_VAR 0 4
41017: PUSH
41018: LD_INT 1
41020: ARRAY
41021: IFFALSE 41025
// exit ;
41023: GO 41432
// height := hex [ 2 ] ;
41025: LD_ADDR_VAR 0 15
41029: PUSH
41030: LD_VAR 0 4
41034: PUSH
41035: LD_INT 2
41037: ARRAY
41038: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41039: LD_ADDR_VAR 0 14
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 3
41052: PUSH
41053: LD_INT 5
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: ST_TO_ADDR
// for i in tmp do
41062: LD_ADDR_VAR 0 8
41066: PUSH
41067: LD_VAR 0 14
41071: PUSH
41072: FOR_IN
41073: IFFALSE 41243
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41075: LD_ADDR_VAR 0 9
41079: PUSH
41080: LD_VAR 0 10
41084: PPUSH
41085: LD_VAR 0 8
41089: PPUSH
41090: LD_INT 5
41092: PPUSH
41093: CALL_OW 272
41097: PUSH
41098: LD_VAR 0 11
41102: PPUSH
41103: LD_VAR 0 8
41107: PPUSH
41108: LD_INT 5
41110: PPUSH
41111: CALL_OW 273
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41120: LD_VAR 0 9
41124: PUSH
41125: LD_INT 1
41127: ARRAY
41128: PPUSH
41129: LD_VAR 0 9
41133: PUSH
41134: LD_INT 2
41136: ARRAY
41137: PPUSH
41138: CALL_OW 488
41142: IFFALSE 41241
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41144: LD_ADDR_VAR 0 4
41148: PUSH
41149: LD_VAR 0 9
41153: PUSH
41154: LD_INT 1
41156: ARRAY
41157: PPUSH
41158: LD_VAR 0 9
41162: PUSH
41163: LD_INT 2
41165: ARRAY
41166: PPUSH
41167: CALL_OW 546
41171: ST_TO_ADDR
// if hex [ 1 ] then
41172: LD_VAR 0 4
41176: PUSH
41177: LD_INT 1
41179: ARRAY
41180: IFFALSE 41184
// continue ;
41182: GO 41072
// h := hex [ 2 ] ;
41184: LD_ADDR_VAR 0 13
41188: PUSH
41189: LD_VAR 0 4
41193: PUSH
41194: LD_INT 2
41196: ARRAY
41197: ST_TO_ADDR
// if h + 7 < height then
41198: LD_VAR 0 13
41202: PUSH
41203: LD_INT 7
41205: PLUS
41206: PUSH
41207: LD_VAR 0 15
41211: LESS
41212: IFFALSE 41241
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41214: LD_ADDR_VAR 0 18
41218: PUSH
41219: LD_INT 7
41221: PUSH
41222: LD_INT 28
41224: PUSH
41225: LD_INT 45
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: PUSH
41233: LD_VAR 0 12
41237: ARRAY
41238: ST_TO_ADDR
// break ;
41239: GO 41243
// end ; end ; end ;
41241: GO 41072
41243: POP
41244: POP
// end ; if not weapon then
41245: LD_VAR 0 18
41249: NOT
41250: IFFALSE 41310
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41252: LD_ADDR_VAR 0 5
41256: PUSH
41257: LD_VAR 0 5
41261: PUSH
41262: LD_INT 11
41264: PUSH
41265: LD_INT 30
41267: PUSH
41268: LD_INT 49
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: DIFF
41276: ST_TO_ADDR
// if not list then
41277: LD_VAR 0 5
41281: NOT
41282: IFFALSE 41286
// exit ;
41284: GO 41432
// weapon := list [ rand ( 1 , list ) ] ;
41286: LD_ADDR_VAR 0 18
41290: PUSH
41291: LD_VAR 0 5
41295: PUSH
41296: LD_INT 1
41298: PPUSH
41299: LD_VAR 0 5
41303: PPUSH
41304: CALL_OW 12
41308: ARRAY
41309: ST_TO_ADDR
// end ; if weapon then
41310: LD_VAR 0 18
41314: IFFALSE 41432
// begin tmp := CostOfWeapon ( weapon ) ;
41316: LD_ADDR_VAR 0 14
41320: PUSH
41321: LD_VAR 0 18
41325: PPUSH
41326: CALL_OW 451
41330: ST_TO_ADDR
// j := GetBase ( tower ) ;
41331: LD_ADDR_VAR 0 9
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 274
41345: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41346: LD_VAR 0 9
41350: PPUSH
41351: LD_INT 1
41353: PPUSH
41354: CALL_OW 275
41358: PUSH
41359: LD_VAR 0 14
41363: PUSH
41364: LD_INT 1
41366: ARRAY
41367: GREATEREQUAL
41368: IFFALSE 41394
41370: PUSH
41371: LD_VAR 0 9
41375: PPUSH
41376: LD_INT 2
41378: PPUSH
41379: CALL_OW 275
41383: PUSH
41384: LD_VAR 0 14
41388: PUSH
41389: LD_INT 2
41391: ARRAY
41392: GREATEREQUAL
41393: AND
41394: IFFALSE 41420
41396: PUSH
41397: LD_VAR 0 9
41401: PPUSH
41402: LD_INT 3
41404: PPUSH
41405: CALL_OW 275
41409: PUSH
41410: LD_VAR 0 14
41414: PUSH
41415: LD_INT 3
41417: ARRAY
41418: GREATEREQUAL
41419: AND
41420: IFFALSE 41432
// result := weapon ;
41422: LD_ADDR_VAR 0 3
41426: PUSH
41427: LD_VAR 0 18
41431: ST_TO_ADDR
// end ; end ;
41432: LD_VAR 0 3
41436: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41437: LD_INT 0
41439: PPUSH
41440: PPUSH
// result := true ;
41441: LD_ADDR_VAR 0 3
41445: PUSH
41446: LD_INT 1
41448: ST_TO_ADDR
// if array1 = array2 then
41449: LD_VAR 0 1
41453: PUSH
41454: LD_VAR 0 2
41458: EQUAL
41459: IFFALSE 41519
// begin for i = 1 to array1 do
41461: LD_ADDR_VAR 0 4
41465: PUSH
41466: DOUBLE
41467: LD_INT 1
41469: DEC
41470: ST_TO_ADDR
41471: LD_VAR 0 1
41475: PUSH
41476: FOR_TO
41477: IFFALSE 41515
// if array1 [ i ] <> array2 [ i ] then
41479: LD_VAR 0 1
41483: PUSH
41484: LD_VAR 0 4
41488: ARRAY
41489: PUSH
41490: LD_VAR 0 2
41494: PUSH
41495: LD_VAR 0 4
41499: ARRAY
41500: NONEQUAL
41501: IFFALSE 41513
// begin result := false ;
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_INT 0
41510: ST_TO_ADDR
// break ;
41511: GO 41515
// end ;
41513: GO 41476
41515: POP
41516: POP
// end else
41517: GO 41527
// result := false ;
41519: LD_ADDR_VAR 0 3
41523: PUSH
41524: LD_INT 0
41526: ST_TO_ADDR
// end ;
41527: LD_VAR 0 3
41531: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41532: LD_INT 0
41534: PPUSH
41535: PPUSH
// if not array1 or not array2 then
41536: LD_VAR 0 1
41540: NOT
41541: IFTRUE 41550
41543: PUSH
41544: LD_VAR 0 2
41548: NOT
41549: OR
41550: IFFALSE 41554
// exit ;
41552: GO 41618
// result := true ;
41554: LD_ADDR_VAR 0 3
41558: PUSH
41559: LD_INT 1
41561: ST_TO_ADDR
// for i = 1 to array1 do
41562: LD_ADDR_VAR 0 4
41566: PUSH
41567: DOUBLE
41568: LD_INT 1
41570: DEC
41571: ST_TO_ADDR
41572: LD_VAR 0 1
41576: PUSH
41577: FOR_TO
41578: IFFALSE 41616
// if array1 [ i ] <> array2 [ i ] then
41580: LD_VAR 0 1
41584: PUSH
41585: LD_VAR 0 4
41589: ARRAY
41590: PUSH
41591: LD_VAR 0 2
41595: PUSH
41596: LD_VAR 0 4
41600: ARRAY
41601: NONEQUAL
41602: IFFALSE 41614
// begin result := false ;
41604: LD_ADDR_VAR 0 3
41608: PUSH
41609: LD_INT 0
41611: ST_TO_ADDR
// break ;
41612: GO 41616
// end ;
41614: GO 41577
41616: POP
41617: POP
// end ;
41618: LD_VAR 0 3
41622: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41623: LD_INT 0
41625: PPUSH
41626: PPUSH
41627: PPUSH
// pom := GetBase ( fac ) ;
41628: LD_ADDR_VAR 0 5
41632: PUSH
41633: LD_VAR 0 1
41637: PPUSH
41638: CALL_OW 274
41642: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41643: LD_ADDR_VAR 0 4
41647: PUSH
41648: LD_VAR 0 2
41652: PUSH
41653: LD_INT 1
41655: ARRAY
41656: PPUSH
41657: LD_VAR 0 2
41661: PUSH
41662: LD_INT 2
41664: ARRAY
41665: PPUSH
41666: LD_VAR 0 2
41670: PUSH
41671: LD_INT 3
41673: ARRAY
41674: PPUSH
41675: LD_VAR 0 2
41679: PUSH
41680: LD_INT 4
41682: ARRAY
41683: PPUSH
41684: CALL_OW 449
41688: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41689: LD_ADDR_VAR 0 3
41693: PUSH
41694: LD_VAR 0 5
41698: PPUSH
41699: LD_INT 1
41701: PPUSH
41702: CALL_OW 275
41706: PUSH
41707: LD_VAR 0 4
41711: PUSH
41712: LD_INT 1
41714: ARRAY
41715: GREATEREQUAL
41716: IFFALSE 41742
41718: PUSH
41719: LD_VAR 0 5
41723: PPUSH
41724: LD_INT 2
41726: PPUSH
41727: CALL_OW 275
41731: PUSH
41732: LD_VAR 0 4
41736: PUSH
41737: LD_INT 2
41739: ARRAY
41740: GREATEREQUAL
41741: AND
41742: IFFALSE 41768
41744: PUSH
41745: LD_VAR 0 5
41749: PPUSH
41750: LD_INT 3
41752: PPUSH
41753: CALL_OW 275
41757: PUSH
41758: LD_VAR 0 4
41762: PUSH
41763: LD_INT 3
41765: ARRAY
41766: GREATEREQUAL
41767: AND
41768: ST_TO_ADDR
// end ;
41769: LD_VAR 0 3
41773: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41774: LD_INT 0
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
// pom := GetBase ( building ) ;
41780: LD_ADDR_VAR 0 3
41784: PUSH
41785: LD_VAR 0 1
41789: PPUSH
41790: CALL_OW 274
41794: ST_TO_ADDR
// if not pom then
41795: LD_VAR 0 3
41799: NOT
41800: IFFALSE 41804
// exit ;
41802: GO 41978
// btype := GetBType ( building ) ;
41804: LD_ADDR_VAR 0 5
41808: PUSH
41809: LD_VAR 0 1
41813: PPUSH
41814: CALL_OW 266
41818: ST_TO_ADDR
// if btype = b_armoury then
41819: LD_VAR 0 5
41823: PUSH
41824: LD_INT 4
41826: EQUAL
41827: IFFALSE 41837
// btype := b_barracks ;
41829: LD_ADDR_VAR 0 5
41833: PUSH
41834: LD_INT 5
41836: ST_TO_ADDR
// if btype = b_depot then
41837: LD_VAR 0 5
41841: PUSH
41842: LD_INT 0
41844: EQUAL
41845: IFFALSE 41855
// btype := b_warehouse ;
41847: LD_ADDR_VAR 0 5
41851: PUSH
41852: LD_INT 1
41854: ST_TO_ADDR
// if btype = b_workshop then
41855: LD_VAR 0 5
41859: PUSH
41860: LD_INT 2
41862: EQUAL
41863: IFFALSE 41873
// btype := b_factory ;
41865: LD_ADDR_VAR 0 5
41869: PUSH
41870: LD_INT 3
41872: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41873: LD_ADDR_VAR 0 4
41877: PUSH
41878: LD_VAR 0 5
41882: PPUSH
41883: LD_VAR 0 1
41887: PPUSH
41888: CALL_OW 248
41892: PPUSH
41893: CALL_OW 450
41897: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41898: LD_ADDR_VAR 0 2
41902: PUSH
41903: LD_VAR 0 3
41907: PPUSH
41908: LD_INT 1
41910: PPUSH
41911: CALL_OW 275
41915: PUSH
41916: LD_VAR 0 4
41920: PUSH
41921: LD_INT 1
41923: ARRAY
41924: GREATEREQUAL
41925: IFFALSE 41951
41927: PUSH
41928: LD_VAR 0 3
41932: PPUSH
41933: LD_INT 2
41935: PPUSH
41936: CALL_OW 275
41940: PUSH
41941: LD_VAR 0 4
41945: PUSH
41946: LD_INT 2
41948: ARRAY
41949: GREATEREQUAL
41950: AND
41951: IFFALSE 41977
41953: PUSH
41954: LD_VAR 0 3
41958: PPUSH
41959: LD_INT 3
41961: PPUSH
41962: CALL_OW 275
41966: PUSH
41967: LD_VAR 0 4
41971: PUSH
41972: LD_INT 3
41974: ARRAY
41975: GREATEREQUAL
41976: AND
41977: ST_TO_ADDR
// end ;
41978: LD_VAR 0 2
41982: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41983: LD_INT 0
41985: PPUSH
41986: PPUSH
41987: PPUSH
// pom := GetBase ( building ) ;
41988: LD_ADDR_VAR 0 4
41992: PUSH
41993: LD_VAR 0 1
41997: PPUSH
41998: CALL_OW 274
42002: ST_TO_ADDR
// if not pom then
42003: LD_VAR 0 4
42007: NOT
42008: IFFALSE 42012
// exit ;
42010: GO 42117
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42012: LD_ADDR_VAR 0 5
42016: PUSH
42017: LD_VAR 0 2
42021: PPUSH
42022: LD_VAR 0 1
42026: PPUSH
42027: CALL_OW 248
42031: PPUSH
42032: CALL_OW 450
42036: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42037: LD_ADDR_VAR 0 3
42041: PUSH
42042: LD_VAR 0 4
42046: PPUSH
42047: LD_INT 1
42049: PPUSH
42050: CALL_OW 275
42054: PUSH
42055: LD_VAR 0 5
42059: PUSH
42060: LD_INT 1
42062: ARRAY
42063: GREATEREQUAL
42064: IFFALSE 42090
42066: PUSH
42067: LD_VAR 0 4
42071: PPUSH
42072: LD_INT 2
42074: PPUSH
42075: CALL_OW 275
42079: PUSH
42080: LD_VAR 0 5
42084: PUSH
42085: LD_INT 2
42087: ARRAY
42088: GREATEREQUAL
42089: AND
42090: IFFALSE 42116
42092: PUSH
42093: LD_VAR 0 4
42097: PPUSH
42098: LD_INT 3
42100: PPUSH
42101: CALL_OW 275
42105: PUSH
42106: LD_VAR 0 5
42110: PUSH
42111: LD_INT 3
42113: ARRAY
42114: GREATEREQUAL
42115: AND
42116: ST_TO_ADDR
// end ;
42117: LD_VAR 0 3
42121: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42122: LD_INT 0
42124: PPUSH
42125: PPUSH
42126: PPUSH
42127: PPUSH
42128: PPUSH
42129: PPUSH
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
// result := false ;
42135: LD_ADDR_VAR 0 8
42139: PUSH
42140: LD_INT 0
42142: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42143: LD_VAR 0 5
42147: NOT
42148: IFTRUE 42157
42150: PUSH
42151: LD_VAR 0 1
42155: NOT
42156: OR
42157: IFTRUE 42166
42159: PUSH
42160: LD_VAR 0 2
42164: NOT
42165: OR
42166: IFTRUE 42175
42168: PUSH
42169: LD_VAR 0 3
42173: NOT
42174: OR
42175: IFFALSE 42179
// exit ;
42177: GO 43005
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42179: LD_ADDR_VAR 0 14
42183: PUSH
42184: LD_VAR 0 1
42188: PPUSH
42189: LD_VAR 0 2
42193: PPUSH
42194: LD_VAR 0 3
42198: PPUSH
42199: LD_VAR 0 4
42203: PPUSH
42204: LD_VAR 0 5
42208: PUSH
42209: LD_INT 1
42211: ARRAY
42212: PPUSH
42213: CALL_OW 248
42217: PPUSH
42218: LD_INT 0
42220: PPUSH
42221: CALL 44286 0 6
42225: ST_TO_ADDR
// if not hexes then
42226: LD_VAR 0 14
42230: NOT
42231: IFFALSE 42235
// exit ;
42233: GO 43005
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42235: LD_ADDR_VAR 0 17
42239: PUSH
42240: LD_VAR 0 5
42244: PPUSH
42245: LD_INT 22
42247: PUSH
42248: LD_VAR 0 13
42252: PPUSH
42253: CALL_OW 255
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: LD_INT 30
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 30
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: LIST
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PPUSH
42294: CALL_OW 72
42298: ST_TO_ADDR
// for i = 1 to hexes do
42299: LD_ADDR_VAR 0 9
42303: PUSH
42304: DOUBLE
42305: LD_INT 1
42307: DEC
42308: ST_TO_ADDR
42309: LD_VAR 0 14
42313: PUSH
42314: FOR_TO
42315: IFFALSE 43003
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42317: LD_ADDR_VAR 0 13
42321: PUSH
42322: LD_VAR 0 14
42326: PUSH
42327: LD_VAR 0 9
42331: ARRAY
42332: PUSH
42333: LD_INT 1
42335: ARRAY
42336: PPUSH
42337: LD_VAR 0 14
42341: PUSH
42342: LD_VAR 0 9
42346: ARRAY
42347: PUSH
42348: LD_INT 2
42350: ARRAY
42351: PPUSH
42352: CALL_OW 428
42356: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42357: LD_VAR 0 14
42361: PUSH
42362: LD_VAR 0 9
42366: ARRAY
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: PPUSH
42372: LD_VAR 0 14
42376: PUSH
42377: LD_VAR 0 9
42381: ARRAY
42382: PUSH
42383: LD_INT 2
42385: ARRAY
42386: PPUSH
42387: CALL_OW 351
42391: IFTRUE 42430
42393: PUSH
42394: LD_VAR 0 14
42398: PUSH
42399: LD_VAR 0 9
42403: ARRAY
42404: PUSH
42405: LD_INT 1
42407: ARRAY
42408: PPUSH
42409: LD_VAR 0 14
42413: PUSH
42414: LD_VAR 0 9
42418: ARRAY
42419: PUSH
42420: LD_INT 2
42422: ARRAY
42423: PPUSH
42424: CALL_OW 488
42428: NOT
42429: OR
42430: IFTRUE 42447
42432: PUSH
42433: LD_VAR 0 13
42437: PPUSH
42438: CALL_OW 247
42442: PUSH
42443: LD_INT 3
42445: EQUAL
42446: OR
42447: IFFALSE 42453
// exit ;
42449: POP
42450: POP
42451: GO 43005
// if not tmp then
42453: LD_VAR 0 13
42457: NOT
42458: IFFALSE 42462
// continue ;
42460: GO 42314
// result := true ;
42462: LD_ADDR_VAR 0 8
42466: PUSH
42467: LD_INT 1
42469: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42470: LD_VAR 0 6
42474: IFFALSE 42491
42476: PUSH
42477: LD_VAR 0 13
42481: PPUSH
42482: CALL_OW 247
42486: PUSH
42487: LD_INT 2
42489: EQUAL
42490: AND
42491: IFFALSE 42508
42493: PUSH
42494: LD_VAR 0 13
42498: PPUSH
42499: CALL_OW 263
42503: PUSH
42504: LD_INT 1
42506: EQUAL
42507: AND
42508: IFFALSE 42672
// begin if IsDrivenBy ( tmp ) then
42510: LD_VAR 0 13
42514: PPUSH
42515: CALL_OW 311
42519: IFFALSE 42523
// continue ;
42521: GO 42314
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42523: LD_VAR 0 6
42527: PPUSH
42528: LD_INT 3
42530: PUSH
42531: LD_INT 60
42533: PUSH
42534: EMPTY
42535: LIST
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 3
42543: PUSH
42544: LD_INT 55
42546: PUSH
42547: EMPTY
42548: LIST
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PPUSH
42558: CALL_OW 72
42562: IFFALSE 42670
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42564: LD_ADDR_VAR 0 18
42568: PUSH
42569: LD_VAR 0 6
42573: PPUSH
42574: LD_INT 3
42576: PUSH
42577: LD_INT 60
42579: PUSH
42580: EMPTY
42581: LIST
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 3
42589: PUSH
42590: LD_INT 55
42592: PUSH
42593: EMPTY
42594: LIST
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PPUSH
42604: CALL_OW 72
42608: PUSH
42609: LD_INT 1
42611: ARRAY
42612: ST_TO_ADDR
// if IsInUnit ( driver ) then
42613: LD_VAR 0 18
42617: PPUSH
42618: CALL_OW 310
42622: IFFALSE 42633
// ComExit ( driver ) ;
42624: LD_VAR 0 18
42628: PPUSH
42629: CALL 68276 0 1
// AddComEnterUnit ( driver , tmp ) ;
42633: LD_VAR 0 18
42637: PPUSH
42638: LD_VAR 0 13
42642: PPUSH
42643: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42647: LD_VAR 0 18
42651: PPUSH
42652: LD_VAR 0 7
42656: PPUSH
42657: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42661: LD_VAR 0 18
42665: PPUSH
42666: CALL_OW 181
// end ; continue ;
42670: GO 42314
// end ; if not cleaners or not tmp in cleaners then
42672: LD_VAR 0 6
42676: NOT
42677: IFTRUE 42692
42679: PUSH
42680: LD_VAR 0 13
42684: PUSH
42685: LD_VAR 0 6
42689: IN
42690: NOT
42691: OR
42692: IFFALSE 43001
// begin if dep then
42694: LD_VAR 0 17
42698: IFFALSE 42834
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42700: LD_ADDR_VAR 0 16
42704: PUSH
42705: LD_VAR 0 17
42709: PUSH
42710: LD_INT 1
42712: ARRAY
42713: PPUSH
42714: CALL_OW 250
42718: PPUSH
42719: LD_VAR 0 17
42723: PUSH
42724: LD_INT 1
42726: ARRAY
42727: PPUSH
42728: CALL_OW 254
42732: PPUSH
42733: LD_INT 5
42735: PPUSH
42736: CALL_OW 272
42740: PUSH
42741: LD_VAR 0 17
42745: PUSH
42746: LD_INT 1
42748: ARRAY
42749: PPUSH
42750: CALL_OW 251
42754: PPUSH
42755: LD_VAR 0 17
42759: PUSH
42760: LD_INT 1
42762: ARRAY
42763: PPUSH
42764: CALL_OW 254
42768: PPUSH
42769: LD_INT 5
42771: PPUSH
42772: CALL_OW 273
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42781: LD_VAR 0 16
42785: PUSH
42786: LD_INT 1
42788: ARRAY
42789: PPUSH
42790: LD_VAR 0 16
42794: PUSH
42795: LD_INT 2
42797: ARRAY
42798: PPUSH
42799: CALL_OW 488
42803: IFFALSE 42834
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42805: LD_VAR 0 13
42809: PPUSH
42810: LD_VAR 0 16
42814: PUSH
42815: LD_INT 1
42817: ARRAY
42818: PPUSH
42819: LD_VAR 0 16
42823: PUSH
42824: LD_INT 2
42826: ARRAY
42827: PPUSH
42828: CALL_OW 111
// continue ;
42832: GO 42314
// end ; end ; r := GetDir ( tmp ) ;
42834: LD_ADDR_VAR 0 15
42838: PUSH
42839: LD_VAR 0 13
42843: PPUSH
42844: CALL_OW 254
42848: ST_TO_ADDR
// if r = 5 then
42849: LD_VAR 0 15
42853: PUSH
42854: LD_INT 5
42856: EQUAL
42857: IFFALSE 42867
// r := 0 ;
42859: LD_ADDR_VAR 0 15
42863: PUSH
42864: LD_INT 0
42866: ST_TO_ADDR
// for j = r to 5 do
42867: LD_ADDR_VAR 0 10
42871: PUSH
42872: DOUBLE
42873: LD_VAR 0 15
42877: DEC
42878: ST_TO_ADDR
42879: LD_INT 5
42881: PUSH
42882: FOR_TO
42883: IFFALSE 42999
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42885: LD_ADDR_VAR 0 11
42889: PUSH
42890: LD_VAR 0 13
42894: PPUSH
42895: CALL_OW 250
42899: PPUSH
42900: LD_VAR 0 10
42904: PPUSH
42905: LD_INT 2
42907: PPUSH
42908: CALL_OW 272
42912: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42913: LD_ADDR_VAR 0 12
42917: PUSH
42918: LD_VAR 0 13
42922: PPUSH
42923: CALL_OW 251
42927: PPUSH
42928: LD_VAR 0 10
42932: PPUSH
42933: LD_INT 2
42935: PPUSH
42936: CALL_OW 273
42940: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42941: LD_VAR 0 11
42945: PPUSH
42946: LD_VAR 0 12
42950: PPUSH
42951: CALL_OW 488
42955: IFFALSE 42974
42957: PUSH
42958: LD_VAR 0 11
42962: PPUSH
42963: LD_VAR 0 12
42967: PPUSH
42968: CALL_OW 428
42972: NOT
42973: AND
42974: IFFALSE 42997
// begin ComMoveXY ( tmp , _x , _y ) ;
42976: LD_VAR 0 13
42980: PPUSH
42981: LD_VAR 0 11
42985: PPUSH
42986: LD_VAR 0 12
42990: PPUSH
42991: CALL_OW 111
// break ;
42995: GO 42999
// end ; end ;
42997: GO 42882
42999: POP
43000: POP
// end ; end ;
43001: GO 42314
43003: POP
43004: POP
// end ;
43005: LD_VAR 0 8
43009: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43010: LD_INT 0
43012: PPUSH
// result := true ;
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_INT 1
43020: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43021: LD_VAR 0 2
43025: PUSH
43026: LD_INT 24
43028: DOUBLE
43029: EQUAL
43030: IFTRUE 43040
43032: LD_INT 33
43034: DOUBLE
43035: EQUAL
43036: IFTRUE 43040
43038: GO 43065
43040: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43041: LD_ADDR_VAR 0 3
43045: PUSH
43046: LD_INT 32
43048: PPUSH
43049: LD_VAR 0 1
43053: PPUSH
43054: CALL_OW 321
43058: PUSH
43059: LD_INT 2
43061: EQUAL
43062: ST_TO_ADDR
43063: GO 43381
43065: LD_INT 20
43067: DOUBLE
43068: EQUAL
43069: IFTRUE 43073
43071: GO 43098
43073: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43074: LD_ADDR_VAR 0 3
43078: PUSH
43079: LD_INT 6
43081: PPUSH
43082: LD_VAR 0 1
43086: PPUSH
43087: CALL_OW 321
43091: PUSH
43092: LD_INT 2
43094: EQUAL
43095: ST_TO_ADDR
43096: GO 43381
43098: LD_INT 22
43100: DOUBLE
43101: EQUAL
43102: IFTRUE 43112
43104: LD_INT 36
43106: DOUBLE
43107: EQUAL
43108: IFTRUE 43112
43110: GO 43137
43112: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43113: LD_ADDR_VAR 0 3
43117: PUSH
43118: LD_INT 15
43120: PPUSH
43121: LD_VAR 0 1
43125: PPUSH
43126: CALL_OW 321
43130: PUSH
43131: LD_INT 2
43133: EQUAL
43134: ST_TO_ADDR
43135: GO 43381
43137: LD_INT 30
43139: DOUBLE
43140: EQUAL
43141: IFTRUE 43145
43143: GO 43170
43145: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43146: LD_ADDR_VAR 0 3
43150: PUSH
43151: LD_INT 20
43153: PPUSH
43154: LD_VAR 0 1
43158: PPUSH
43159: CALL_OW 321
43163: PUSH
43164: LD_INT 2
43166: EQUAL
43167: ST_TO_ADDR
43168: GO 43381
43170: LD_INT 28
43172: DOUBLE
43173: EQUAL
43174: IFTRUE 43184
43176: LD_INT 21
43178: DOUBLE
43179: EQUAL
43180: IFTRUE 43184
43182: GO 43209
43184: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43185: LD_ADDR_VAR 0 3
43189: PUSH
43190: LD_INT 21
43192: PPUSH
43193: LD_VAR 0 1
43197: PPUSH
43198: CALL_OW 321
43202: PUSH
43203: LD_INT 2
43205: EQUAL
43206: ST_TO_ADDR
43207: GO 43381
43209: LD_INT 16
43211: DOUBLE
43212: EQUAL
43213: IFTRUE 43217
43215: GO 43242
43217: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43218: LD_ADDR_VAR 0 3
43222: PUSH
43223: LD_INT 84
43225: PPUSH
43226: LD_VAR 0 1
43230: PPUSH
43231: CALL_OW 321
43235: PUSH
43236: LD_INT 2
43238: EQUAL
43239: ST_TO_ADDR
43240: GO 43381
43242: LD_INT 19
43244: DOUBLE
43245: EQUAL
43246: IFTRUE 43256
43248: LD_INT 23
43250: DOUBLE
43251: EQUAL
43252: IFTRUE 43256
43254: GO 43281
43256: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43257: LD_ADDR_VAR 0 3
43261: PUSH
43262: LD_INT 83
43264: PPUSH
43265: LD_VAR 0 1
43269: PPUSH
43270: CALL_OW 321
43274: PUSH
43275: LD_INT 2
43277: EQUAL
43278: ST_TO_ADDR
43279: GO 43381
43281: LD_INT 17
43283: DOUBLE
43284: EQUAL
43285: IFTRUE 43289
43287: GO 43314
43289: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43290: LD_ADDR_VAR 0 3
43294: PUSH
43295: LD_INT 39
43297: PPUSH
43298: LD_VAR 0 1
43302: PPUSH
43303: CALL_OW 321
43307: PUSH
43308: LD_INT 2
43310: EQUAL
43311: ST_TO_ADDR
43312: GO 43381
43314: LD_INT 18
43316: DOUBLE
43317: EQUAL
43318: IFTRUE 43322
43320: GO 43347
43322: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43323: LD_ADDR_VAR 0 3
43327: PUSH
43328: LD_INT 40
43330: PPUSH
43331: LD_VAR 0 1
43335: PPUSH
43336: CALL_OW 321
43340: PUSH
43341: LD_INT 2
43343: EQUAL
43344: ST_TO_ADDR
43345: GO 43381
43347: LD_INT 27
43349: DOUBLE
43350: EQUAL
43351: IFTRUE 43355
43353: GO 43380
43355: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43356: LD_ADDR_VAR 0 3
43360: PUSH
43361: LD_INT 35
43363: PPUSH
43364: LD_VAR 0 1
43368: PPUSH
43369: CALL_OW 321
43373: PUSH
43374: LD_INT 2
43376: EQUAL
43377: ST_TO_ADDR
43378: GO 43381
43380: POP
// end ;
43381: LD_VAR 0 3
43385: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43386: LD_INT 0
43388: PPUSH
43389: PPUSH
43390: PPUSH
43391: PPUSH
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
43396: PPUSH
43397: PPUSH
43398: PPUSH
// result := false ;
43399: LD_ADDR_VAR 0 6
43403: PUSH
43404: LD_INT 0
43406: ST_TO_ADDR
// if btype = b_depot then
43407: LD_VAR 0 2
43411: PUSH
43412: LD_INT 0
43414: EQUAL
43415: IFFALSE 43427
// begin result := true ;
43417: LD_ADDR_VAR 0 6
43421: PUSH
43422: LD_INT 1
43424: ST_TO_ADDR
// exit ;
43425: GO 44281
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43427: LD_VAR 0 1
43431: NOT
43432: IFTRUE 43457
43434: PUSH
43435: LD_VAR 0 1
43439: PPUSH
43440: CALL_OW 266
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: IN
43455: NOT
43456: OR
43457: IFTRUE 43466
43459: PUSH
43460: LD_VAR 0 2
43464: NOT
43465: OR
43466: IFTRUE 43502
43468: PUSH
43469: LD_VAR 0 5
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: LD_INT 4
43488: PUSH
43489: LD_INT 5
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: IN
43500: NOT
43501: OR
43502: IFTRUE 43521
43504: PUSH
43505: LD_VAR 0 3
43509: PPUSH
43510: LD_VAR 0 4
43514: PPUSH
43515: CALL_OW 488
43519: NOT
43520: OR
43521: IFFALSE 43525
// exit ;
43523: GO 44281
// side := GetSide ( depot ) ;
43525: LD_ADDR_VAR 0 9
43529: PUSH
43530: LD_VAR 0 1
43534: PPUSH
43535: CALL_OW 255
43539: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43540: LD_VAR 0 9
43544: PPUSH
43545: LD_VAR 0 2
43549: PPUSH
43550: CALL 43010 0 2
43554: NOT
43555: IFFALSE 43559
// exit ;
43557: GO 44281
// pom := GetBase ( depot ) ;
43559: LD_ADDR_VAR 0 10
43563: PUSH
43564: LD_VAR 0 1
43568: PPUSH
43569: CALL_OW 274
43573: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43574: LD_ADDR_VAR 0 11
43578: PUSH
43579: LD_VAR 0 2
43583: PPUSH
43584: LD_VAR 0 1
43588: PPUSH
43589: CALL_OW 248
43593: PPUSH
43594: CALL_OW 450
43598: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43599: LD_VAR 0 10
43603: PPUSH
43604: LD_INT 1
43606: PPUSH
43607: CALL_OW 275
43611: PUSH
43612: LD_VAR 0 11
43616: PUSH
43617: LD_INT 1
43619: ARRAY
43620: GREATEREQUAL
43621: IFFALSE 43647
43623: PUSH
43624: LD_VAR 0 10
43628: PPUSH
43629: LD_INT 2
43631: PPUSH
43632: CALL_OW 275
43636: PUSH
43637: LD_VAR 0 11
43641: PUSH
43642: LD_INT 2
43644: ARRAY
43645: GREATEREQUAL
43646: AND
43647: IFFALSE 43673
43649: PUSH
43650: LD_VAR 0 10
43654: PPUSH
43655: LD_INT 3
43657: PPUSH
43658: CALL_OW 275
43662: PUSH
43663: LD_VAR 0 11
43667: PUSH
43668: LD_INT 3
43670: ARRAY
43671: GREATEREQUAL
43672: AND
43673: NOT
43674: IFFALSE 43678
// exit ;
43676: GO 44281
// if GetBType ( depot ) = b_depot then
43678: LD_VAR 0 1
43682: PPUSH
43683: CALL_OW 266
43687: PUSH
43688: LD_INT 0
43690: EQUAL
43691: IFFALSE 43703
// dist := 28 else
43693: LD_ADDR_VAR 0 14
43697: PUSH
43698: LD_INT 28
43700: ST_TO_ADDR
43701: GO 43711
// dist := 36 ;
43703: LD_ADDR_VAR 0 14
43707: PUSH
43708: LD_INT 36
43710: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43711: LD_VAR 0 1
43715: PPUSH
43716: LD_VAR 0 3
43720: PPUSH
43721: LD_VAR 0 4
43725: PPUSH
43726: CALL_OW 297
43730: PUSH
43731: LD_VAR 0 14
43735: GREATER
43736: IFFALSE 43740
// exit ;
43738: GO 44281
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43740: LD_ADDR_VAR 0 12
43744: PUSH
43745: LD_VAR 0 2
43749: PPUSH
43750: LD_VAR 0 3
43754: PPUSH
43755: LD_VAR 0 4
43759: PPUSH
43760: LD_VAR 0 5
43764: PPUSH
43765: LD_VAR 0 1
43769: PPUSH
43770: CALL_OW 248
43774: PPUSH
43775: LD_INT 0
43777: PPUSH
43778: CALL 44286 0 6
43782: ST_TO_ADDR
// if not hexes then
43783: LD_VAR 0 12
43787: NOT
43788: IFFALSE 43792
// exit ;
43790: GO 44281
// hex := GetHexInfo ( x , y ) ;
43792: LD_ADDR_VAR 0 15
43796: PUSH
43797: LD_VAR 0 3
43801: PPUSH
43802: LD_VAR 0 4
43806: PPUSH
43807: CALL_OW 546
43811: ST_TO_ADDR
// if hex [ 1 ] then
43812: LD_VAR 0 15
43816: PUSH
43817: LD_INT 1
43819: ARRAY
43820: IFFALSE 43824
// exit ;
43822: GO 44281
// height := hex [ 2 ] ;
43824: LD_ADDR_VAR 0 13
43828: PUSH
43829: LD_VAR 0 15
43833: PUSH
43834: LD_INT 2
43836: ARRAY
43837: ST_TO_ADDR
// for i = 1 to hexes do
43838: LD_ADDR_VAR 0 7
43842: PUSH
43843: DOUBLE
43844: LD_INT 1
43846: DEC
43847: ST_TO_ADDR
43848: LD_VAR 0 12
43852: PUSH
43853: FOR_TO
43854: IFFALSE 44198
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43856: LD_VAR 0 12
43860: PUSH
43861: LD_VAR 0 7
43865: ARRAY
43866: PUSH
43867: LD_INT 1
43869: ARRAY
43870: PPUSH
43871: LD_VAR 0 12
43875: PUSH
43876: LD_VAR 0 7
43880: ARRAY
43881: PUSH
43882: LD_INT 2
43884: ARRAY
43885: PPUSH
43886: CALL_OW 488
43890: NOT
43891: IFTRUE 43933
43893: PUSH
43894: LD_VAR 0 12
43898: PUSH
43899: LD_VAR 0 7
43903: ARRAY
43904: PUSH
43905: LD_INT 1
43907: ARRAY
43908: PPUSH
43909: LD_VAR 0 12
43913: PUSH
43914: LD_VAR 0 7
43918: ARRAY
43919: PUSH
43920: LD_INT 2
43922: ARRAY
43923: PPUSH
43924: CALL_OW 428
43928: PUSH
43929: LD_INT 0
43931: GREATER
43932: OR
43933: IFTRUE 43971
43935: PUSH
43936: LD_VAR 0 12
43940: PUSH
43941: LD_VAR 0 7
43945: ARRAY
43946: PUSH
43947: LD_INT 1
43949: ARRAY
43950: PPUSH
43951: LD_VAR 0 12
43955: PUSH
43956: LD_VAR 0 7
43960: ARRAY
43961: PUSH
43962: LD_INT 2
43964: ARRAY
43965: PPUSH
43966: CALL_OW 351
43970: OR
43971: IFFALSE 43977
// exit ;
43973: POP
43974: POP
43975: GO 44281
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43977: LD_ADDR_VAR 0 8
43981: PUSH
43982: LD_VAR 0 12
43986: PUSH
43987: LD_VAR 0 7
43991: ARRAY
43992: PUSH
43993: LD_INT 1
43995: ARRAY
43996: PPUSH
43997: LD_VAR 0 12
44001: PUSH
44002: LD_VAR 0 7
44006: ARRAY
44007: PUSH
44008: LD_INT 2
44010: ARRAY
44011: PPUSH
44012: CALL_OW 546
44016: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44017: LD_VAR 0 8
44021: PUSH
44022: LD_INT 1
44024: ARRAY
44025: IFTRUE 44047
44027: PUSH
44028: LD_VAR 0 8
44032: PUSH
44033: LD_INT 2
44035: ARRAY
44036: PUSH
44037: LD_VAR 0 13
44041: PUSH
44042: LD_INT 2
44044: PLUS
44045: GREATER
44046: OR
44047: IFTRUE 44069
44049: PUSH
44050: LD_VAR 0 8
44054: PUSH
44055: LD_INT 2
44057: ARRAY
44058: PUSH
44059: LD_VAR 0 13
44063: PUSH
44064: LD_INT 2
44066: MINUS
44067: LESS
44068: OR
44069: IFTRUE 44137
44071: PUSH
44072: LD_VAR 0 8
44076: PUSH
44077: LD_INT 3
44079: ARRAY
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 8
44086: PUSH
44087: LD_INT 9
44089: PUSH
44090: LD_INT 10
44092: PUSH
44093: LD_INT 11
44095: PUSH
44096: LD_INT 12
44098: PUSH
44099: LD_INT 13
44101: PUSH
44102: LD_INT 16
44104: PUSH
44105: LD_INT 17
44107: PUSH
44108: LD_INT 18
44110: PUSH
44111: LD_INT 19
44113: PUSH
44114: LD_INT 20
44116: PUSH
44117: LD_INT 21
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: IN
44135: NOT
44136: OR
44137: IFTRUE 44150
44139: PUSH
44140: LD_VAR 0 8
44144: PUSH
44145: LD_INT 5
44147: ARRAY
44148: NOT
44149: OR
44150: IFTRUE 44190
44152: PUSH
44153: LD_VAR 0 8
44157: PUSH
44158: LD_INT 6
44160: ARRAY
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: LD_INT 7
44170: PUSH
44171: LD_INT 9
44173: PUSH
44174: LD_INT 10
44176: PUSH
44177: LD_INT 11
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: IN
44188: NOT
44189: OR
44190: IFFALSE 44196
// exit ;
44192: POP
44193: POP
44194: GO 44281
// end ;
44196: GO 43853
44198: POP
44199: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44200: LD_VAR 0 9
44204: PPUSH
44205: LD_VAR 0 3
44209: PPUSH
44210: LD_VAR 0 4
44214: PPUSH
44215: LD_INT 20
44217: PPUSH
44218: CALL 36100 0 4
44222: PUSH
44223: LD_INT 4
44225: ARRAY
44226: IFFALSE 44230
// exit ;
44228: GO 44281
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44230: LD_VAR 0 2
44234: PUSH
44235: LD_INT 29
44237: PUSH
44238: LD_INT 30
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: IN
44245: IFFALSE 44269
44247: PUSH
44248: LD_VAR 0 3
44252: PPUSH
44253: LD_VAR 0 4
44257: PPUSH
44258: LD_VAR 0 9
44262: PPUSH
44263: CALL_OW 440
44267: NOT
44268: AND
44269: IFFALSE 44273
// exit ;
44271: GO 44281
// result := true ;
44273: LD_ADDR_VAR 0 6
44277: PUSH
44278: LD_INT 1
44280: ST_TO_ADDR
// end ;
44281: LD_VAR 0 6
44285: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44286: LD_INT 0
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
44292: PPUSH
44293: PPUSH
44294: PPUSH
44295: PPUSH
44296: PPUSH
44297: PPUSH
44298: PPUSH
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
44303: PPUSH
44304: PPUSH
44305: PPUSH
44306: PPUSH
44307: PPUSH
44308: PPUSH
44309: PPUSH
44310: PPUSH
44311: PPUSH
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
44319: PPUSH
44320: PPUSH
44321: PPUSH
44322: PPUSH
44323: PPUSH
44324: PPUSH
44325: PPUSH
44326: PPUSH
44327: PPUSH
44328: PPUSH
44329: PPUSH
44330: PPUSH
44331: PPUSH
44332: PPUSH
44333: PPUSH
44334: PPUSH
44335: PPUSH
44336: PPUSH
44337: PPUSH
44338: PPUSH
44339: PPUSH
44340: PPUSH
44341: PPUSH
44342: PPUSH
44343: PPUSH
44344: PPUSH
44345: PPUSH
// result = [ ] ;
44346: LD_ADDR_VAR 0 7
44350: PUSH
44351: EMPTY
44352: ST_TO_ADDR
// temp_list = [ ] ;
44353: LD_ADDR_VAR 0 9
44357: PUSH
44358: EMPTY
44359: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44360: LD_VAR 0 4
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: LD_INT 4
44379: PUSH
44380: LD_INT 5
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: IN
44391: NOT
44392: IFTRUE 44435
44394: PUSH
44395: LD_VAR 0 1
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: IN
44410: IFFALSE 44434
44412: PUSH
44413: LD_VAR 0 5
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: LD_INT 3
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: IN
44432: NOT
44433: AND
44434: OR
44435: IFFALSE 44439
// exit ;
44437: GO 62838
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44439: LD_VAR 0 1
44443: PUSH
44444: LD_INT 6
44446: PUSH
44447: LD_INT 7
44449: PUSH
44450: LD_INT 8
44452: PUSH
44453: LD_INT 13
44455: PUSH
44456: LD_INT 12
44458: PUSH
44459: LD_INT 15
44461: PUSH
44462: LD_INT 11
44464: PUSH
44465: LD_INT 14
44467: PUSH
44468: LD_INT 10
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: IN
44482: IFFALSE 44492
// btype = b_lab ;
44484: LD_ADDR_VAR 0 1
44488: PUSH
44489: LD_INT 6
44491: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44492: LD_VAR 0 6
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: LIST
44510: IN
44511: NOT
44512: IFTRUE 44580
44514: PUSH
44515: LD_VAR 0 1
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: LD_INT 6
44534: PUSH
44535: LD_INT 36
44537: PUSH
44538: LD_INT 4
44540: PUSH
44541: LD_INT 5
44543: PUSH
44544: LD_INT 31
44546: PUSH
44547: LD_INT 32
44549: PUSH
44550: LD_INT 33
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: IN
44566: NOT
44567: IFFALSE 44579
44569: PUSH
44570: LD_VAR 0 6
44574: PUSH
44575: LD_INT 1
44577: EQUAL
44578: AND
44579: OR
44580: IFTRUE 44612
44582: PUSH
44583: LD_VAR 0 1
44587: PUSH
44588: LD_INT 2
44590: PUSH
44591: LD_INT 3
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: IN
44598: NOT
44599: IFFALSE 44611
44601: PUSH
44602: LD_VAR 0 6
44606: PUSH
44607: LD_INT 2
44609: EQUAL
44610: AND
44611: OR
44612: IFFALSE 44622
// mode = 0 ;
44614: LD_ADDR_VAR 0 6
44618: PUSH
44619: LD_INT 0
44621: ST_TO_ADDR
// case mode of 0 :
44622: LD_VAR 0 6
44626: PUSH
44627: LD_INT 0
44629: DOUBLE
44630: EQUAL
44631: IFTRUE 44635
44633: GO 56088
44635: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44636: LD_ADDR_VAR 0 11
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 3
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 3
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44829: LD_ADDR_VAR 0 12
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 3
44986: NEG
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 3
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45025: LD_ADDR_VAR 0 13
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 3
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 3
45184: NEG
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 3
45196: NEG
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45224: LD_ADDR_VAR 0 14
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: LD_INT 3
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 3
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45420: LD_ADDR_VAR 0 15
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 3
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45613: LD_ADDR_VAR 0 16
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 3
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: PUSH
45781: LD_INT 3
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45806: LD_ADDR_VAR 0 17
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 2
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46036: LD_ADDR_VAR 0 18
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46266: LD_ADDR_VAR 0 19
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46496: LD_ADDR_VAR 0 20
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46726: LD_ADDR_VAR 0 21
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46956: LD_ADDR_VAR 0 22
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47186: LD_ADDR_VAR 0 23
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: LD_INT 3
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47466: LD_ADDR_VAR 0 24
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 2
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47742: LD_ADDR_VAR 0 25
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 3
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 3
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48016: LD_ADDR_VAR 0 26
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 3
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 3
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48292: LD_ADDR_VAR 0 27
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 3
48537: NEG
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48572: LD_ADDR_VAR 0 28
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 3
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 3
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 3
48819: NEG
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48854: LD_ADDR_VAR 0 29
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 3
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 3
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 3
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 3
49098: NEG
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49133: LD_ADDR_VAR 0 30
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: NEG
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 3
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 3
49376: NEG
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49411: LD_ADDR_VAR 0 31
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: LD_INT 3
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 3
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: NEG
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49689: LD_ADDR_VAR 0 32
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 2
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 3
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 3
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 3
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 3
49932: NEG
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49967: LD_ADDR_VAR 0 33
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: LD_INT 3
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 3
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 3
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: NEG
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50246: LD_ADDR_VAR 0 34
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 3
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 3
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50526: LD_ADDR_VAR 0 35
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50638: LD_ADDR_VAR 0 36
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50750: LD_ADDR_VAR 0 37
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50862: LD_ADDR_VAR 0 38
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50974: LD_ADDR_VAR 0 39
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51086: LD_ADDR_VAR 0 40
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51198: LD_ADDR_VAR 0 41
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 3
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: PUSH
51432: LD_INT 2
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 3
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 3
51472: NEG
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: NEG
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 3
51495: NEG
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51548: LD_ADDR_VAR 0 42
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: LD_INT 3
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 3
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 3
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 3
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: LD_INT 3
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 3
51857: NEG
51858: PUSH
51859: LD_INT 3
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51898: LD_ADDR_VAR 0 43
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 3
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 3
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 3
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 3
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 3
52194: NEG
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52246: LD_ADDR_VAR 0 44
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 3
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 3
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 3
52489: PUSH
52490: LD_INT 3
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 3
52531: NEG
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 3
52543: NEG
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 3
52555: NEG
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52596: LD_ADDR_VAR 0 45
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 3
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 3
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: PUSH
52843: LD_INT 3
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 3
52893: NEG
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 3
52905: NEG
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52946: LD_ADDR_VAR 0 46
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 3
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 3
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 3
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 3
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53294: LD_ADDR_VAR 0 47
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53445: LD_ADDR_VAR 0 48
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: LD_INT 2
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53592: LD_ADDR_VAR 0 49
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53736: LD_ADDR_VAR 0 50
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53880: LD_ADDR_VAR 0 51
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54027: LD_ADDR_VAR 0 52
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: LD_INT 2
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54178: LD_ADDR_VAR 0 53
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54408: LD_ADDR_VAR 0 54
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54638: LD_ADDR_VAR 0 55
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54868: LD_ADDR_VAR 0 56
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55098: LD_ADDR_VAR 0 57
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55328: LD_ADDR_VAR 0 58
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55558: LD_ADDR_VAR 0 59
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55646: LD_ADDR_VAR 0 60
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55734: LD_ADDR_VAR 0 61
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55822: LD_ADDR_VAR 0 62
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55910: LD_ADDR_VAR 0 63
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55998: LD_ADDR_VAR 0 64
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: ST_TO_ADDR
// end ; 1 :
56086: GO 61983
56088: LD_INT 1
56090: DOUBLE
56091: EQUAL
56092: IFTRUE 56096
56094: GO 58719
56096: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56097: LD_ADDR_VAR 0 11
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 3
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56141: LD_ADDR_VAR 0 12
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 3
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 3
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: LIST
56181: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56182: LD_ADDR_VAR 0 13
56186: PUSH
56187: LD_INT 3
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 3
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56222: LD_ADDR_VAR 0 14
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 3
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: LIST
56262: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56263: LD_ADDR_VAR 0 15
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 3
56281: NEG
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: NEG
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56307: LD_ADDR_VAR 0 16
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 3
56326: NEG
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 3
56338: NEG
56339: PUSH
56340: LD_INT 3
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56353: LD_ADDR_VAR 0 17
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 3
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 3
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56397: LD_ADDR_VAR 0 18
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: LIST
56437: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56438: LD_ADDR_VAR 0 19
56442: PUSH
56443: LD_INT 3
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 3
56455: PUSH
56456: LD_INT 3
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: LD_INT 3
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56478: LD_ADDR_VAR 0 20
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: LIST
56518: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56519: LD_ADDR_VAR 0 21
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 3
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56563: LD_ADDR_VAR 0 22
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: NEG
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: LD_INT 3
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56609: LD_ADDR_VAR 0 23
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 4
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56653: LD_ADDR_VAR 0 24
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56694: LD_ADDR_VAR 0 25
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 4
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: LD_INT 4
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56734: LD_ADDR_VAR 0 26
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 3
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 4
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56775: LD_ADDR_VAR 0 27
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 4
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56819: LD_ADDR_VAR 0 28
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: NEG
56839: PUSH
56840: LD_INT 4
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 4
56850: NEG
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: LIST
56864: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56865: LD_ADDR_VAR 0 29
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 3
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 2
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 4
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 4
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 5
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 5
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 4
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 6
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 6
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 5
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57020: LD_ADDR_VAR 0 30
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 4
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 4
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 4
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 5
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 5
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 5
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 6
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 6
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57163: LD_ADDR_VAR 0 31
57167: PUSH
57168: LD_INT 3
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 4
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 4
57210: PUSH
57211: LD_INT 4
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 3
57220: PUSH
57221: LD_INT 4
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 5
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 5
57240: PUSH
57241: LD_INT 5
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 4
57250: PUSH
57251: LD_INT 5
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 6
57260: PUSH
57261: LD_INT 5
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 6
57270: PUSH
57271: LD_INT 6
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 5
57280: PUSH
57281: LD_INT 6
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57302: LD_ADDR_VAR 0 32
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 4
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 4
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 5
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 5
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: LD_INT 4
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 6
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 6
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: LD_INT 5
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57445: LD_ADDR_VAR 0 33
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 4
57497: NEG
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 4
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 4
57520: NEG
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 5
57531: NEG
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 5
57542: NEG
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 5
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 6
57565: NEG
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 6
57576: NEG
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57600: LD_ADDR_VAR 0 34
57604: PUSH
57605: LD_INT 2
57607: NEG
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: NEG
57632: PUSH
57633: LD_INT 3
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: LD_INT 4
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 4
57655: NEG
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 4
57667: NEG
57668: PUSH
57669: LD_INT 4
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 4
57679: NEG
57680: PUSH
57681: LD_INT 5
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 5
57691: NEG
57692: PUSH
57693: LD_INT 4
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 5
57703: NEG
57704: PUSH
57705: LD_INT 5
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 5
57715: NEG
57716: PUSH
57717: LD_INT 6
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 6
57727: NEG
57728: PUSH
57729: LD_INT 5
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 6
57739: NEG
57740: PUSH
57741: LD_INT 6
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57763: LD_ADDR_VAR 0 41
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57807: LD_ADDR_VAR 0 42
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 3
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: LIST
57847: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57848: LD_ADDR_VAR 0 43
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: LIST
57887: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57888: LD_ADDR_VAR 0 44
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: LIST
57928: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57929: LD_ADDR_VAR 0 45
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: LIST
57972: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57973: LD_ADDR_VAR 0 46
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: LD_INT 3
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 3
58004: NEG
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58019: LD_ADDR_VAR 0 47
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58052: LD_ADDR_VAR 0 48
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58083: LD_ADDR_VAR 0 49
58087: PUSH
58088: LD_INT 3
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58112: LD_ADDR_VAR 0 50
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58141: LD_ADDR_VAR 0 51
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58172: LD_ADDR_VAR 0 52
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 3
58191: NEG
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58205: LD_ADDR_VAR 0 53
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 3
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 3
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58249: LD_ADDR_VAR 0 54
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58290: LD_ADDR_VAR 0 55
58294: PUSH
58295: LD_INT 3
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: LD_INT 3
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 2
58317: PUSH
58318: LD_INT 3
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: LIST
58329: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58330: LD_ADDR_VAR 0 56
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 3
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 3
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: LIST
58370: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58371: LD_ADDR_VAR 0 57
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 3
58389: NEG
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58415: LD_ADDR_VAR 0 58
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: LD_INT 3
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: LD_INT 3
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: LIST
58460: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58461: LD_ADDR_VAR 0 59
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58505: LD_ADDR_VAR 0 60
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58546: LD_ADDR_VAR 0 61
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58586: LD_ADDR_VAR 0 62
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: LIST
58626: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58627: LD_ADDR_VAR 0 63
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58671: LD_ADDR_VAR 0 64
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
// end ; 2 :
58717: GO 61983
58719: LD_INT 2
58721: DOUBLE
58722: EQUAL
58723: IFTRUE 58727
58725: GO 61982
58727: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58728: LD_ADDR_VAR 0 29
58732: PUSH
58733: LD_INT 4
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 5
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 5
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 4
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 3
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 5
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: LD_INT 3
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 4
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 4
58858: PUSH
58859: LD_INT 4
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: LD_INT 4
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 4
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 2
58908: PUSH
58909: LD_INT 4
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 4
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: LD_INT 4
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: LD_INT 5
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 5
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: LD_INT 4
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 5
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 3
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 3
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 3
59056: NEG
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 4
59067: NEG
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 4
59078: NEG
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 4
59090: NEG
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 4
59113: NEG
59114: PUSH
59115: LD_INT 4
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 4
59125: NEG
59126: PUSH
59127: LD_INT 5
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: NEG
59138: PUSH
59139: LD_INT 4
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: NEG
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 4
59161: NEG
59162: PUSH
59163: LD_INT 3
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 5
59173: NEG
59174: PUSH
59175: LD_INT 4
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 5
59185: NEG
59186: PUSH
59187: LD_INT 5
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: LD_INT 5
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 5
59209: NEG
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59266: LD_ADDR_VAR 0 30
59270: PUSH
59271: LD_INT 4
59273: PUSH
59274: LD_INT 4
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 4
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 5
59293: PUSH
59294: LD_INT 4
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 5
59303: PUSH
59304: LD_INT 5
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 4
59313: PUSH
59314: LD_INT 5
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 3
59323: PUSH
59324: LD_INT 4
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: LD_INT 3
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 5
59343: PUSH
59344: LD_INT 3
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 3
59353: PUSH
59354: LD_INT 5
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 3
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 4
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 4
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 3
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: LD_INT 4
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 4
59456: NEG
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 4
59467: NEG
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 3
59490: NEG
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 4
59501: NEG
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 5
59512: NEG
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 5
59523: NEG
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 5
59535: NEG
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: NEG
59559: PUSH
59560: LD_INT 3
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 3
59570: NEG
59571: PUSH
59572: LD_INT 4
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: LD_INT 3
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 4
59618: NEG
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 4
59630: NEG
59631: PUSH
59632: LD_INT 4
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: LD_INT 4
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 4
59654: NEG
59655: PUSH
59656: LD_INT 2
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: LD_INT 4
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: LD_INT 5
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 4
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 3
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 4
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: LD_INT 5
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: LD_INT 5
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59813: LD_ADDR_VAR 0 31
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 4
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: LD_INT 4
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 5
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 5
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 4
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: LD_INT 3
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: LD_INT 5
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: LD_INT 3
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 3
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 3
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 3
59958: NEG
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 4
59969: NEG
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 4
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 4
59992: NEG
59993: PUSH
59994: LD_INT 2
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 4
60015: NEG
60016: PUSH
60017: LD_INT 4
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 4
60027: NEG
60028: PUSH
60029: LD_INT 5
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 3
60039: NEG
60040: PUSH
60041: LD_INT 4
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: NEG
60052: PUSH
60053: LD_INT 3
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 4
60063: NEG
60064: PUSH
60065: LD_INT 3
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 5
60075: NEG
60076: PUSH
60077: LD_INT 4
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 5
60087: NEG
60088: PUSH
60089: LD_INT 5
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: LD_INT 5
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 5
60111: NEG
60112: PUSH
60113: LD_INT 3
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 3
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 4
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 3
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 4
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: LD_INT 4
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 4
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 4
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 5
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 5
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 4
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 3
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 3
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 5
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60363: LD_ADDR_VAR 0 32
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 4
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 3
60393: NEG
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 3
60404: NEG
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 4
60415: NEG
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 5
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 5
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 5
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 3
60472: NEG
60473: PUSH
60474: LD_INT 3
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 3
60484: NEG
60485: PUSH
60486: LD_INT 4
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: LD_INT 3
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 4
60532: NEG
60533: PUSH
60534: LD_INT 3
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 4
60544: NEG
60545: PUSH
60546: LD_INT 4
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: LD_INT 4
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 4
60568: NEG
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 4
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 5
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: LD_INT 4
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 3
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 4
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 5
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: LD_INT 5
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 3
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 4
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 4
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 2
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 4
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 4
60775: PUSH
60776: LD_INT 4
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 4
60785: PUSH
60786: LD_INT 3
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 5
60795: PUSH
60796: LD_INT 4
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 5
60805: PUSH
60806: LD_INT 5
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 4
60815: PUSH
60816: LD_INT 5
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: LD_INT 4
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 5
60845: PUSH
60846: LD_INT 3
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: LD_INT 5
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60910: LD_ADDR_VAR 0 33
60914: PUSH
60915: LD_INT 4
60917: NEG
60918: PUSH
60919: LD_INT 4
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 4
60929: NEG
60930: PUSH
60931: LD_INT 5
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 3
60941: NEG
60942: PUSH
60943: LD_INT 4
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: LD_INT 3
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 4
60965: NEG
60966: PUSH
60967: LD_INT 3
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 5
60977: NEG
60978: PUSH
60979: LD_INT 4
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 5
60989: NEG
60990: PUSH
60991: LD_INT 5
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: LD_INT 5
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 5
61013: NEG
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 3
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 4
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 2
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: LD_INT 3
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: LD_INT 4
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: LD_INT 2
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: LD_INT 4
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 4
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 5
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 5
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 4
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 3
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 3
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 3
61199: PUSH
61200: LD_INT 2
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 5
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 3
61220: PUSH
61221: LD_INT 3
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 4
61240: PUSH
61241: LD_INT 3
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 4
61250: PUSH
61251: LD_INT 4
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 3
61260: PUSH
61261: LD_INT 4
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: LD_INT 2
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: LD_INT 4
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 4
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: LD_INT 4
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: LD_INT 5
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: LD_INT 5
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: LD_INT 4
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: LD_INT 5
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: NEG
61393: PUSH
61394: LD_INT 3
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61448: LD_ADDR_VAR 0 34
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 4
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: LD_INT 5
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: LD_INT 4
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 3
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 3
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: LD_INT 4
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 5
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: LD_INT 3
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: LD_INT 5
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 3
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 3
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 4
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 4
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 2
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 4
61640: PUSH
61641: LD_INT 2
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 4
61650: PUSH
61651: LD_INT 4
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 4
61660: PUSH
61661: LD_INT 3
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 5
61670: PUSH
61671: LD_INT 4
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 5
61680: PUSH
61681: LD_INT 5
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 4
61690: PUSH
61691: LD_INT 5
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: PUSH
61701: LD_INT 4
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: LD_INT 3
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 5
61720: PUSH
61721: LD_INT 3
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: LD_INT 5
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: LD_INT 2
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 4
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 4
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: LD_INT 3
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: LD_INT 2
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: LD_INT 4
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: NEG
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 4
61833: NEG
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 4
61844: NEG
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 3
61856: NEG
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 3
61867: NEG
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 4
61878: NEG
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 5
61889: NEG
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 5
61900: NEG
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 5
61912: NEG
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 3
61924: NEG
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: ST_TO_ADDR
// end ; end ;
61980: GO 61983
61982: POP
// case btype of b_depot , b_warehouse :
61983: LD_VAR 0 1
61987: PUSH
61988: LD_INT 0
61990: DOUBLE
61991: EQUAL
61992: IFTRUE 62002
61994: LD_INT 1
61996: DOUBLE
61997: EQUAL
61998: IFTRUE 62002
62000: GO 62203
62002: POP
// case nation of nation_american :
62003: LD_VAR 0 5
62007: PUSH
62008: LD_INT 1
62010: DOUBLE
62011: EQUAL
62012: IFTRUE 62016
62014: GO 62072
62016: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62017: LD_ADDR_VAR 0 9
62021: PUSH
62022: LD_VAR 0 11
62026: PUSH
62027: LD_VAR 0 12
62031: PUSH
62032: LD_VAR 0 13
62036: PUSH
62037: LD_VAR 0 14
62041: PUSH
62042: LD_VAR 0 15
62046: PUSH
62047: LD_VAR 0 16
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: PUSH
62060: LD_VAR 0 4
62064: PUSH
62065: LD_INT 1
62067: PLUS
62068: ARRAY
62069: ST_TO_ADDR
62070: GO 62201
62072: LD_INT 2
62074: DOUBLE
62075: EQUAL
62076: IFTRUE 62080
62078: GO 62136
62080: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62081: LD_ADDR_VAR 0 9
62085: PUSH
62086: LD_VAR 0 17
62090: PUSH
62091: LD_VAR 0 18
62095: PUSH
62096: LD_VAR 0 19
62100: PUSH
62101: LD_VAR 0 20
62105: PUSH
62106: LD_VAR 0 21
62110: PUSH
62111: LD_VAR 0 22
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: PUSH
62124: LD_VAR 0 4
62128: PUSH
62129: LD_INT 1
62131: PLUS
62132: ARRAY
62133: ST_TO_ADDR
62134: GO 62201
62136: LD_INT 3
62138: DOUBLE
62139: EQUAL
62140: IFTRUE 62144
62142: GO 62200
62144: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62145: LD_ADDR_VAR 0 9
62149: PUSH
62150: LD_VAR 0 23
62154: PUSH
62155: LD_VAR 0 24
62159: PUSH
62160: LD_VAR 0 25
62164: PUSH
62165: LD_VAR 0 26
62169: PUSH
62170: LD_VAR 0 27
62174: PUSH
62175: LD_VAR 0 28
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: PUSH
62188: LD_VAR 0 4
62192: PUSH
62193: LD_INT 1
62195: PLUS
62196: ARRAY
62197: ST_TO_ADDR
62198: GO 62201
62200: POP
62201: GO 62756
62203: LD_INT 2
62205: DOUBLE
62206: EQUAL
62207: IFTRUE 62217
62209: LD_INT 3
62211: DOUBLE
62212: EQUAL
62213: IFTRUE 62217
62215: GO 62273
62217: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62218: LD_ADDR_VAR 0 9
62222: PUSH
62223: LD_VAR 0 29
62227: PUSH
62228: LD_VAR 0 30
62232: PUSH
62233: LD_VAR 0 31
62237: PUSH
62238: LD_VAR 0 32
62242: PUSH
62243: LD_VAR 0 33
62247: PUSH
62248: LD_VAR 0 34
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: PUSH
62261: LD_VAR 0 4
62265: PUSH
62266: LD_INT 1
62268: PLUS
62269: ARRAY
62270: ST_TO_ADDR
62271: GO 62756
62273: LD_INT 16
62275: DOUBLE
62276: EQUAL
62277: IFTRUE 62335
62279: LD_INT 17
62281: DOUBLE
62282: EQUAL
62283: IFTRUE 62335
62285: LD_INT 18
62287: DOUBLE
62288: EQUAL
62289: IFTRUE 62335
62291: LD_INT 19
62293: DOUBLE
62294: EQUAL
62295: IFTRUE 62335
62297: LD_INT 22
62299: DOUBLE
62300: EQUAL
62301: IFTRUE 62335
62303: LD_INT 20
62305: DOUBLE
62306: EQUAL
62307: IFTRUE 62335
62309: LD_INT 21
62311: DOUBLE
62312: EQUAL
62313: IFTRUE 62335
62315: LD_INT 23
62317: DOUBLE
62318: EQUAL
62319: IFTRUE 62335
62321: LD_INT 24
62323: DOUBLE
62324: EQUAL
62325: IFTRUE 62335
62327: LD_INT 25
62329: DOUBLE
62330: EQUAL
62331: IFTRUE 62335
62333: GO 62391
62335: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62336: LD_ADDR_VAR 0 9
62340: PUSH
62341: LD_VAR 0 35
62345: PUSH
62346: LD_VAR 0 36
62350: PUSH
62351: LD_VAR 0 37
62355: PUSH
62356: LD_VAR 0 38
62360: PUSH
62361: LD_VAR 0 39
62365: PUSH
62366: LD_VAR 0 40
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: PUSH
62379: LD_VAR 0 4
62383: PUSH
62384: LD_INT 1
62386: PLUS
62387: ARRAY
62388: ST_TO_ADDR
62389: GO 62756
62391: LD_INT 6
62393: DOUBLE
62394: EQUAL
62395: IFTRUE 62447
62397: LD_INT 7
62399: DOUBLE
62400: EQUAL
62401: IFTRUE 62447
62403: LD_INT 8
62405: DOUBLE
62406: EQUAL
62407: IFTRUE 62447
62409: LD_INT 13
62411: DOUBLE
62412: EQUAL
62413: IFTRUE 62447
62415: LD_INT 12
62417: DOUBLE
62418: EQUAL
62419: IFTRUE 62447
62421: LD_INT 15
62423: DOUBLE
62424: EQUAL
62425: IFTRUE 62447
62427: LD_INT 11
62429: DOUBLE
62430: EQUAL
62431: IFTRUE 62447
62433: LD_INT 14
62435: DOUBLE
62436: EQUAL
62437: IFTRUE 62447
62439: LD_INT 10
62441: DOUBLE
62442: EQUAL
62443: IFTRUE 62447
62445: GO 62503
62447: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62448: LD_ADDR_VAR 0 9
62452: PUSH
62453: LD_VAR 0 41
62457: PUSH
62458: LD_VAR 0 42
62462: PUSH
62463: LD_VAR 0 43
62467: PUSH
62468: LD_VAR 0 44
62472: PUSH
62473: LD_VAR 0 45
62477: PUSH
62478: LD_VAR 0 46
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: PUSH
62491: LD_VAR 0 4
62495: PUSH
62496: LD_INT 1
62498: PLUS
62499: ARRAY
62500: ST_TO_ADDR
62501: GO 62756
62503: LD_INT 36
62505: DOUBLE
62506: EQUAL
62507: IFTRUE 62511
62509: GO 62567
62511: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62512: LD_ADDR_VAR 0 9
62516: PUSH
62517: LD_VAR 0 47
62521: PUSH
62522: LD_VAR 0 48
62526: PUSH
62527: LD_VAR 0 49
62531: PUSH
62532: LD_VAR 0 50
62536: PUSH
62537: LD_VAR 0 51
62541: PUSH
62542: LD_VAR 0 52
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: PUSH
62555: LD_VAR 0 4
62559: PUSH
62560: LD_INT 1
62562: PLUS
62563: ARRAY
62564: ST_TO_ADDR
62565: GO 62756
62567: LD_INT 4
62569: DOUBLE
62570: EQUAL
62571: IFTRUE 62593
62573: LD_INT 5
62575: DOUBLE
62576: EQUAL
62577: IFTRUE 62593
62579: LD_INT 34
62581: DOUBLE
62582: EQUAL
62583: IFTRUE 62593
62585: LD_INT 37
62587: DOUBLE
62588: EQUAL
62589: IFTRUE 62593
62591: GO 62649
62593: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62594: LD_ADDR_VAR 0 9
62598: PUSH
62599: LD_VAR 0 53
62603: PUSH
62604: LD_VAR 0 54
62608: PUSH
62609: LD_VAR 0 55
62613: PUSH
62614: LD_VAR 0 56
62618: PUSH
62619: LD_VAR 0 57
62623: PUSH
62624: LD_VAR 0 58
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: PUSH
62637: LD_VAR 0 4
62641: PUSH
62642: LD_INT 1
62644: PLUS
62645: ARRAY
62646: ST_TO_ADDR
62647: GO 62756
62649: LD_INT 31
62651: DOUBLE
62652: EQUAL
62653: IFTRUE 62699
62655: LD_INT 32
62657: DOUBLE
62658: EQUAL
62659: IFTRUE 62699
62661: LD_INT 33
62663: DOUBLE
62664: EQUAL
62665: IFTRUE 62699
62667: LD_INT 27
62669: DOUBLE
62670: EQUAL
62671: IFTRUE 62699
62673: LD_INT 26
62675: DOUBLE
62676: EQUAL
62677: IFTRUE 62699
62679: LD_INT 28
62681: DOUBLE
62682: EQUAL
62683: IFTRUE 62699
62685: LD_INT 29
62687: DOUBLE
62688: EQUAL
62689: IFTRUE 62699
62691: LD_INT 30
62693: DOUBLE
62694: EQUAL
62695: IFTRUE 62699
62697: GO 62755
62699: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62700: LD_ADDR_VAR 0 9
62704: PUSH
62705: LD_VAR 0 59
62709: PUSH
62710: LD_VAR 0 60
62714: PUSH
62715: LD_VAR 0 61
62719: PUSH
62720: LD_VAR 0 62
62724: PUSH
62725: LD_VAR 0 63
62729: PUSH
62730: LD_VAR 0 64
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: PUSH
62743: LD_VAR 0 4
62747: PUSH
62748: LD_INT 1
62750: PLUS
62751: ARRAY
62752: ST_TO_ADDR
62753: GO 62756
62755: POP
// temp_list2 = [ ] ;
62756: LD_ADDR_VAR 0 10
62760: PUSH
62761: EMPTY
62762: ST_TO_ADDR
// for i in temp_list do
62763: LD_ADDR_VAR 0 8
62767: PUSH
62768: LD_VAR 0 9
62772: PUSH
62773: FOR_IN
62774: IFFALSE 62826
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62776: LD_ADDR_VAR 0 10
62780: PUSH
62781: LD_VAR 0 10
62785: PUSH
62786: LD_VAR 0 8
62790: PUSH
62791: LD_INT 1
62793: ARRAY
62794: PUSH
62795: LD_VAR 0 2
62799: PLUS
62800: PUSH
62801: LD_VAR 0 8
62805: PUSH
62806: LD_INT 2
62808: ARRAY
62809: PUSH
62810: LD_VAR 0 3
62814: PLUS
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: EMPTY
62821: LIST
62822: ADD
62823: ST_TO_ADDR
62824: GO 62773
62826: POP
62827: POP
// result = temp_list2 ;
62828: LD_ADDR_VAR 0 7
62832: PUSH
62833: LD_VAR 0 10
62837: ST_TO_ADDR
// end ;
62838: LD_VAR 0 7
62842: RET
// export function EnemyInRange ( unit , dist ) ; begin
62843: LD_INT 0
62845: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62846: LD_ADDR_VAR 0 3
62850: PUSH
62851: LD_VAR 0 1
62855: PPUSH
62856: CALL_OW 255
62860: PPUSH
62861: LD_VAR 0 1
62865: PPUSH
62866: CALL_OW 250
62870: PPUSH
62871: LD_VAR 0 1
62875: PPUSH
62876: CALL_OW 251
62880: PPUSH
62881: LD_VAR 0 2
62885: PPUSH
62886: CALL 36100 0 4
62890: PUSH
62891: LD_INT 4
62893: ARRAY
62894: ST_TO_ADDR
// end ;
62895: LD_VAR 0 3
62899: RET
// export function PlayerSeeMe ( unit ) ; begin
62900: LD_INT 0
62902: PPUSH
// result := See ( your_side , unit ) ;
62903: LD_ADDR_VAR 0 2
62907: PUSH
62908: LD_OWVAR 2
62912: PPUSH
62913: LD_VAR 0 1
62917: PPUSH
62918: CALL_OW 292
62922: ST_TO_ADDR
// end ;
62923: LD_VAR 0 2
62927: RET
// export function ReverseDir ( unit ) ; begin
62928: LD_INT 0
62930: PPUSH
// if not unit then
62931: LD_VAR 0 1
62935: NOT
62936: IFFALSE 62940
// exit ;
62938: GO 62963
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62940: LD_ADDR_VAR 0 2
62944: PUSH
62945: LD_VAR 0 1
62949: PPUSH
62950: CALL_OW 254
62954: PUSH
62955: LD_INT 3
62957: PLUS
62958: PUSH
62959: LD_INT 6
62961: MOD
62962: ST_TO_ADDR
// end ;
62963: LD_VAR 0 2
62967: RET
// export function ReverseArray ( array ) ; var i ; begin
62968: LD_INT 0
62970: PPUSH
62971: PPUSH
// if not array then
62972: LD_VAR 0 1
62976: NOT
62977: IFFALSE 62981
// exit ;
62979: GO 63036
// result := [ ] ;
62981: LD_ADDR_VAR 0 2
62985: PUSH
62986: EMPTY
62987: ST_TO_ADDR
// for i := array downto 1 do
62988: LD_ADDR_VAR 0 3
62992: PUSH
62993: DOUBLE
62994: LD_VAR 0 1
62998: INC
62999: ST_TO_ADDR
63000: LD_INT 1
63002: PUSH
63003: FOR_DOWNTO
63004: IFFALSE 63034
// result := Join ( result , array [ i ] ) ;
63006: LD_ADDR_VAR 0 2
63010: PUSH
63011: LD_VAR 0 2
63015: PPUSH
63016: LD_VAR 0 1
63020: PUSH
63021: LD_VAR 0 3
63025: ARRAY
63026: PPUSH
63027: CALL 67878 0 2
63031: ST_TO_ADDR
63032: GO 63003
63034: POP
63035: POP
// end ;
63036: LD_VAR 0 2
63040: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63041: LD_INT 0
63043: PPUSH
63044: PPUSH
63045: PPUSH
63046: PPUSH
63047: PPUSH
63048: PPUSH
// if not unit or not hexes then
63049: LD_VAR 0 1
63053: NOT
63054: IFTRUE 63063
63056: PUSH
63057: LD_VAR 0 2
63061: NOT
63062: OR
63063: IFFALSE 63067
// exit ;
63065: GO 63190
// dist := 9999 ;
63067: LD_ADDR_VAR 0 5
63071: PUSH
63072: LD_INT 9999
63074: ST_TO_ADDR
// for i = 1 to hexes do
63075: LD_ADDR_VAR 0 4
63079: PUSH
63080: DOUBLE
63081: LD_INT 1
63083: DEC
63084: ST_TO_ADDR
63085: LD_VAR 0 2
63089: PUSH
63090: FOR_TO
63091: IFFALSE 63178
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63093: LD_ADDR_VAR 0 6
63097: PUSH
63098: LD_VAR 0 1
63102: PPUSH
63103: LD_VAR 0 2
63107: PUSH
63108: LD_VAR 0 4
63112: ARRAY
63113: PUSH
63114: LD_INT 1
63116: ARRAY
63117: PPUSH
63118: LD_VAR 0 2
63122: PUSH
63123: LD_VAR 0 4
63127: ARRAY
63128: PUSH
63129: LD_INT 2
63131: ARRAY
63132: PPUSH
63133: CALL_OW 297
63137: ST_TO_ADDR
// if tdist < dist then
63138: LD_VAR 0 6
63142: PUSH
63143: LD_VAR 0 5
63147: LESS
63148: IFFALSE 63176
// begin hex := hexes [ i ] ;
63150: LD_ADDR_VAR 0 8
63154: PUSH
63155: LD_VAR 0 2
63159: PUSH
63160: LD_VAR 0 4
63164: ARRAY
63165: ST_TO_ADDR
// dist := tdist ;
63166: LD_ADDR_VAR 0 5
63170: PUSH
63171: LD_VAR 0 6
63175: ST_TO_ADDR
// end ; end ;
63176: GO 63090
63178: POP
63179: POP
// result := hex ;
63180: LD_ADDR_VAR 0 3
63184: PUSH
63185: LD_VAR 0 8
63189: ST_TO_ADDR
// end ;
63190: LD_VAR 0 3
63194: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63195: LD_INT 0
63197: PPUSH
63198: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63199: LD_VAR 0 1
63203: NOT
63204: IFTRUE 63243
63206: PUSH
63207: LD_VAR 0 1
63211: PUSH
63212: LD_INT 21
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 23
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PPUSH
63236: CALL_OW 69
63240: IN
63241: NOT
63242: OR
63243: IFFALSE 63247
// exit ;
63245: GO 63294
// for i = 1 to 3 do
63247: LD_ADDR_VAR 0 3
63251: PUSH
63252: DOUBLE
63253: LD_INT 1
63255: DEC
63256: ST_TO_ADDR
63257: LD_INT 3
63259: PUSH
63260: FOR_TO
63261: IFFALSE 63292
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63263: LD_VAR 0 1
63267: PPUSH
63268: CALL_OW 250
63272: PPUSH
63273: LD_VAR 0 1
63277: PPUSH
63278: CALL_OW 251
63282: PPUSH
63283: LD_INT 1
63285: PPUSH
63286: CALL_OW 453
63290: GO 63260
63292: POP
63293: POP
// end ;
63294: LD_VAR 0 2
63298: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63299: LD_INT 0
63301: PPUSH
63302: PPUSH
63303: PPUSH
63304: PPUSH
63305: PPUSH
63306: PPUSH
// if not unit or not enemy_unit then
63307: LD_VAR 0 1
63311: NOT
63312: IFTRUE 63321
63314: PUSH
63315: LD_VAR 0 2
63319: NOT
63320: OR
63321: IFFALSE 63325
// exit ;
63323: GO 63796
// if GetLives ( i ) < 250 then
63325: LD_VAR 0 4
63329: PPUSH
63330: CALL_OW 256
63334: PUSH
63335: LD_INT 250
63337: LESS
63338: IFFALSE 63351
// begin ComAutodestruct ( i ) ;
63340: LD_VAR 0 4
63344: PPUSH
63345: CALL 63195 0 1
// exit ;
63349: GO 63796
// end ; x := GetX ( enemy_unit ) ;
63351: LD_ADDR_VAR 0 7
63355: PUSH
63356: LD_VAR 0 2
63360: PPUSH
63361: CALL_OW 250
63365: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63366: LD_ADDR_VAR 0 8
63370: PUSH
63371: LD_VAR 0 2
63375: PPUSH
63376: CALL_OW 251
63380: ST_TO_ADDR
// if not x or not y then
63381: LD_VAR 0 7
63385: NOT
63386: IFTRUE 63395
63388: PUSH
63389: LD_VAR 0 8
63393: NOT
63394: OR
63395: IFFALSE 63399
// exit ;
63397: GO 63796
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63399: LD_ADDR_VAR 0 6
63403: PUSH
63404: LD_VAR 0 7
63408: PPUSH
63409: LD_INT 0
63411: PPUSH
63412: LD_INT 4
63414: PPUSH
63415: CALL_OW 272
63419: PUSH
63420: LD_VAR 0 8
63424: PPUSH
63425: LD_INT 0
63427: PPUSH
63428: LD_INT 4
63430: PPUSH
63431: CALL_OW 273
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_VAR 0 7
63444: PPUSH
63445: LD_INT 1
63447: PPUSH
63448: LD_INT 4
63450: PPUSH
63451: CALL_OW 272
63455: PUSH
63456: LD_VAR 0 8
63460: PPUSH
63461: LD_INT 1
63463: PPUSH
63464: LD_INT 4
63466: PPUSH
63467: CALL_OW 273
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_VAR 0 7
63480: PPUSH
63481: LD_INT 2
63483: PPUSH
63484: LD_INT 4
63486: PPUSH
63487: CALL_OW 272
63491: PUSH
63492: LD_VAR 0 8
63496: PPUSH
63497: LD_INT 2
63499: PPUSH
63500: LD_INT 4
63502: PPUSH
63503: CALL_OW 273
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_VAR 0 7
63516: PPUSH
63517: LD_INT 3
63519: PPUSH
63520: LD_INT 4
63522: PPUSH
63523: CALL_OW 272
63527: PUSH
63528: LD_VAR 0 8
63532: PPUSH
63533: LD_INT 3
63535: PPUSH
63536: LD_INT 4
63538: PPUSH
63539: CALL_OW 273
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_VAR 0 7
63552: PPUSH
63553: LD_INT 4
63555: PPUSH
63556: LD_INT 4
63558: PPUSH
63559: CALL_OW 272
63563: PUSH
63564: LD_VAR 0 8
63568: PPUSH
63569: LD_INT 4
63571: PPUSH
63572: LD_INT 4
63574: PPUSH
63575: CALL_OW 273
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_VAR 0 7
63588: PPUSH
63589: LD_INT 5
63591: PPUSH
63592: LD_INT 4
63594: PPUSH
63595: CALL_OW 272
63599: PUSH
63600: LD_VAR 0 8
63604: PPUSH
63605: LD_INT 5
63607: PPUSH
63608: LD_INT 4
63610: PPUSH
63611: CALL_OW 273
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: ST_TO_ADDR
// for i = tmp downto 1 do
63628: LD_ADDR_VAR 0 4
63632: PUSH
63633: DOUBLE
63634: LD_VAR 0 6
63638: INC
63639: ST_TO_ADDR
63640: LD_INT 1
63642: PUSH
63643: FOR_DOWNTO
63644: IFFALSE 63747
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63646: LD_VAR 0 6
63650: PUSH
63651: LD_VAR 0 4
63655: ARRAY
63656: PUSH
63657: LD_INT 1
63659: ARRAY
63660: PPUSH
63661: LD_VAR 0 6
63665: PUSH
63666: LD_VAR 0 4
63670: ARRAY
63671: PUSH
63672: LD_INT 2
63674: ARRAY
63675: PPUSH
63676: CALL_OW 488
63680: NOT
63681: IFTRUE 63723
63683: PUSH
63684: LD_VAR 0 6
63688: PUSH
63689: LD_VAR 0 4
63693: ARRAY
63694: PUSH
63695: LD_INT 1
63697: ARRAY
63698: PPUSH
63699: LD_VAR 0 6
63703: PUSH
63704: LD_VAR 0 4
63708: ARRAY
63709: PUSH
63710: LD_INT 2
63712: ARRAY
63713: PPUSH
63714: CALL_OW 428
63718: PUSH
63719: LD_INT 0
63721: NONEQUAL
63722: OR
63723: IFFALSE 63745
// tmp := Delete ( tmp , i ) ;
63725: LD_ADDR_VAR 0 6
63729: PUSH
63730: LD_VAR 0 6
63734: PPUSH
63735: LD_VAR 0 4
63739: PPUSH
63740: CALL_OW 3
63744: ST_TO_ADDR
63745: GO 63643
63747: POP
63748: POP
// j := GetClosestHex ( unit , tmp ) ;
63749: LD_ADDR_VAR 0 5
63753: PUSH
63754: LD_VAR 0 1
63758: PPUSH
63759: LD_VAR 0 6
63763: PPUSH
63764: CALL 63041 0 2
63768: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63769: LD_VAR 0 1
63773: PPUSH
63774: LD_VAR 0 5
63778: PUSH
63779: LD_INT 1
63781: ARRAY
63782: PPUSH
63783: LD_VAR 0 5
63787: PUSH
63788: LD_INT 2
63790: ARRAY
63791: PPUSH
63792: CALL_OW 111
// end ;
63796: LD_VAR 0 3
63800: RET
// export function PrepareApemanSoldier ( ) ; begin
63801: LD_INT 0
63803: PPUSH
// uc_nation := 0 ;
63804: LD_ADDR_OWVAR 21
63808: PUSH
63809: LD_INT 0
63811: ST_TO_ADDR
// hc_sex := sex_male ;
63812: LD_ADDR_OWVAR 27
63816: PUSH
63817: LD_INT 1
63819: ST_TO_ADDR
// hc_name :=  ;
63820: LD_ADDR_OWVAR 26
63824: PUSH
63825: LD_STRING 
63827: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63828: LD_ADDR_OWVAR 28
63832: PUSH
63833: LD_INT 15
63835: ST_TO_ADDR
// hc_gallery :=  ;
63836: LD_ADDR_OWVAR 33
63840: PUSH
63841: LD_STRING 
63843: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63844: LD_ADDR_OWVAR 31
63848: PUSH
63849: LD_INT 0
63851: PPUSH
63852: LD_INT 3
63854: PPUSH
63855: CALL_OW 12
63859: PUSH
63860: LD_INT 0
63862: PPUSH
63863: LD_INT 3
63865: PPUSH
63866: CALL_OW 12
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63883: LD_ADDR_OWVAR 29
63887: PUSH
63888: LD_INT 12
63890: PUSH
63891: LD_INT 12
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: ST_TO_ADDR
// end ;
63898: LD_VAR 0 1
63902: RET
// export function PrepareApemanEngineer ( ) ; begin
63903: LD_INT 0
63905: PPUSH
// uc_nation := 0 ;
63906: LD_ADDR_OWVAR 21
63910: PUSH
63911: LD_INT 0
63913: ST_TO_ADDR
// hc_sex := sex_male ;
63914: LD_ADDR_OWVAR 27
63918: PUSH
63919: LD_INT 1
63921: ST_TO_ADDR
// hc_name :=  ;
63922: LD_ADDR_OWVAR 26
63926: PUSH
63927: LD_STRING 
63929: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63930: LD_ADDR_OWVAR 28
63934: PUSH
63935: LD_INT 16
63937: ST_TO_ADDR
// hc_gallery :=  ;
63938: LD_ADDR_OWVAR 33
63942: PUSH
63943: LD_STRING 
63945: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63946: LD_ADDR_OWVAR 31
63950: PUSH
63951: LD_INT 0
63953: PPUSH
63954: LD_INT 3
63956: PPUSH
63957: CALL_OW 12
63961: PUSH
63962: LD_INT 0
63964: PPUSH
63965: LD_INT 3
63967: PPUSH
63968: CALL_OW 12
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63985: LD_ADDR_OWVAR 29
63989: PUSH
63990: LD_INT 12
63992: PUSH
63993: LD_INT 12
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: ST_TO_ADDR
// end ;
64000: LD_VAR 0 1
64004: RET
// export function PrepareApeman ( agressivity ) ; begin
64005: LD_INT 0
64007: PPUSH
// uc_side := 0 ;
64008: LD_ADDR_OWVAR 20
64012: PUSH
64013: LD_INT 0
64015: ST_TO_ADDR
// uc_nation := 0 ;
64016: LD_ADDR_OWVAR 21
64020: PUSH
64021: LD_INT 0
64023: ST_TO_ADDR
// hc_sex := sex_male ;
64024: LD_ADDR_OWVAR 27
64028: PUSH
64029: LD_INT 1
64031: ST_TO_ADDR
// hc_class := class_apeman ;
64032: LD_ADDR_OWVAR 28
64036: PUSH
64037: LD_INT 12
64039: ST_TO_ADDR
// hc_gallery :=  ;
64040: LD_ADDR_OWVAR 33
64044: PUSH
64045: LD_STRING 
64047: ST_TO_ADDR
// hc_name :=  ;
64048: LD_ADDR_OWVAR 26
64052: PUSH
64053: LD_STRING 
64055: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64056: LD_ADDR_OWVAR 29
64060: PUSH
64061: LD_INT 12
64063: PUSH
64064: LD_INT 12
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: ST_TO_ADDR
// if agressivity = 0 then
64071: LD_VAR 0 1
64075: PUSH
64076: LD_INT 0
64078: EQUAL
64079: IFFALSE 64091
// hc_agressivity := 0 else
64081: LD_ADDR_OWVAR 35
64085: PUSH
64086: LD_INT 0
64088: ST_TO_ADDR
64089: GO 64112
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64091: LD_ADDR_OWVAR 35
64095: PUSH
64096: LD_VAR 0 1
64100: NEG
64101: PPUSH
64102: LD_VAR 0 1
64106: PPUSH
64107: CALL_OW 12
64111: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64112: LD_ADDR_OWVAR 31
64116: PUSH
64117: LD_INT 0
64119: PPUSH
64120: LD_INT 3
64122: PPUSH
64123: CALL_OW 12
64127: PUSH
64128: LD_INT 0
64130: PPUSH
64131: LD_INT 3
64133: PPUSH
64134: CALL_OW 12
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: ST_TO_ADDR
// end ;
64151: LD_VAR 0 2
64155: RET
// export function PrepareTiger ( agressivity ) ; begin
64156: LD_INT 0
64158: PPUSH
// uc_side := 0 ;
64159: LD_ADDR_OWVAR 20
64163: PUSH
64164: LD_INT 0
64166: ST_TO_ADDR
// uc_nation := 0 ;
64167: LD_ADDR_OWVAR 21
64171: PUSH
64172: LD_INT 0
64174: ST_TO_ADDR
// InitHc ;
64175: CALL_OW 19
// hc_class := class_tiger ;
64179: LD_ADDR_OWVAR 28
64183: PUSH
64184: LD_INT 14
64186: ST_TO_ADDR
// hc_gallery :=  ;
64187: LD_ADDR_OWVAR 33
64191: PUSH
64192: LD_STRING 
64194: ST_TO_ADDR
// hc_name :=  ;
64195: LD_ADDR_OWVAR 26
64199: PUSH
64200: LD_STRING 
64202: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64203: LD_ADDR_OWVAR 35
64207: PUSH
64208: LD_VAR 0 1
64212: NEG
64213: PPUSH
64214: LD_VAR 0 1
64218: PPUSH
64219: CALL_OW 12
64223: ST_TO_ADDR
// end ;
64224: LD_VAR 0 2
64228: RET
// export function PrepareEnchidna ( ) ; begin
64229: LD_INT 0
64231: PPUSH
// uc_side := 0 ;
64232: LD_ADDR_OWVAR 20
64236: PUSH
64237: LD_INT 0
64239: ST_TO_ADDR
// uc_nation := 0 ;
64240: LD_ADDR_OWVAR 21
64244: PUSH
64245: LD_INT 0
64247: ST_TO_ADDR
// InitHc ;
64248: CALL_OW 19
// hc_class := class_baggie ;
64252: LD_ADDR_OWVAR 28
64256: PUSH
64257: LD_INT 13
64259: ST_TO_ADDR
// hc_gallery :=  ;
64260: LD_ADDR_OWVAR 33
64264: PUSH
64265: LD_STRING 
64267: ST_TO_ADDR
// hc_name :=  ;
64268: LD_ADDR_OWVAR 26
64272: PUSH
64273: LD_STRING 
64275: ST_TO_ADDR
// end ;
64276: LD_VAR 0 1
64280: RET
// export function PrepareFrog ( ) ; begin
64281: LD_INT 0
64283: PPUSH
// uc_side := 0 ;
64284: LD_ADDR_OWVAR 20
64288: PUSH
64289: LD_INT 0
64291: ST_TO_ADDR
// uc_nation := 0 ;
64292: LD_ADDR_OWVAR 21
64296: PUSH
64297: LD_INT 0
64299: ST_TO_ADDR
// InitHc ;
64300: CALL_OW 19
// hc_class := class_frog ;
64304: LD_ADDR_OWVAR 28
64308: PUSH
64309: LD_INT 19
64311: ST_TO_ADDR
// hc_gallery :=  ;
64312: LD_ADDR_OWVAR 33
64316: PUSH
64317: LD_STRING 
64319: ST_TO_ADDR
// hc_name :=  ;
64320: LD_ADDR_OWVAR 26
64324: PUSH
64325: LD_STRING 
64327: ST_TO_ADDR
// end ;
64328: LD_VAR 0 1
64332: RET
// export function PrepareFish ( ) ; begin
64333: LD_INT 0
64335: PPUSH
// uc_side := 0 ;
64336: LD_ADDR_OWVAR 20
64340: PUSH
64341: LD_INT 0
64343: ST_TO_ADDR
// uc_nation := 0 ;
64344: LD_ADDR_OWVAR 21
64348: PUSH
64349: LD_INT 0
64351: ST_TO_ADDR
// InitHc ;
64352: CALL_OW 19
// hc_class := class_fish ;
64356: LD_ADDR_OWVAR 28
64360: PUSH
64361: LD_INT 20
64363: ST_TO_ADDR
// hc_gallery :=  ;
64364: LD_ADDR_OWVAR 33
64368: PUSH
64369: LD_STRING 
64371: ST_TO_ADDR
// hc_name :=  ;
64372: LD_ADDR_OWVAR 26
64376: PUSH
64377: LD_STRING 
64379: ST_TO_ADDR
// end ;
64380: LD_VAR 0 1
64384: RET
// export function PrepareBird ( ) ; begin
64385: LD_INT 0
64387: PPUSH
// uc_side := 0 ;
64388: LD_ADDR_OWVAR 20
64392: PUSH
64393: LD_INT 0
64395: ST_TO_ADDR
// uc_nation := 0 ;
64396: LD_ADDR_OWVAR 21
64400: PUSH
64401: LD_INT 0
64403: ST_TO_ADDR
// InitHc ;
64404: CALL_OW 19
// hc_class := class_phororhacos ;
64408: LD_ADDR_OWVAR 28
64412: PUSH
64413: LD_INT 18
64415: ST_TO_ADDR
// hc_gallery :=  ;
64416: LD_ADDR_OWVAR 33
64420: PUSH
64421: LD_STRING 
64423: ST_TO_ADDR
// hc_name :=  ;
64424: LD_ADDR_OWVAR 26
64428: PUSH
64429: LD_STRING 
64431: ST_TO_ADDR
// end ;
64432: LD_VAR 0 1
64436: RET
// export function PrepareHorse ( ) ; begin
64437: LD_INT 0
64439: PPUSH
// uc_side := 0 ;
64440: LD_ADDR_OWVAR 20
64444: PUSH
64445: LD_INT 0
64447: ST_TO_ADDR
// uc_nation := 0 ;
64448: LD_ADDR_OWVAR 21
64452: PUSH
64453: LD_INT 0
64455: ST_TO_ADDR
// InitHc ;
64456: CALL_OW 19
// hc_class := class_horse ;
64460: LD_ADDR_OWVAR 28
64464: PUSH
64465: LD_INT 21
64467: ST_TO_ADDR
// hc_gallery :=  ;
64468: LD_ADDR_OWVAR 33
64472: PUSH
64473: LD_STRING 
64475: ST_TO_ADDR
// hc_name :=  ;
64476: LD_ADDR_OWVAR 26
64480: PUSH
64481: LD_STRING 
64483: ST_TO_ADDR
// end ;
64484: LD_VAR 0 1
64488: RET
// export function PrepareMastodont ( ) ; begin
64489: LD_INT 0
64491: PPUSH
// uc_side := 0 ;
64492: LD_ADDR_OWVAR 20
64496: PUSH
64497: LD_INT 0
64499: ST_TO_ADDR
// uc_nation := 0 ;
64500: LD_ADDR_OWVAR 21
64504: PUSH
64505: LD_INT 0
64507: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64508: LD_ADDR_OWVAR 37
64512: PUSH
64513: LD_INT 31
64515: ST_TO_ADDR
// vc_control := control_rider ;
64516: LD_ADDR_OWVAR 38
64520: PUSH
64521: LD_INT 4
64523: ST_TO_ADDR
// end ;
64524: LD_VAR 0 1
64528: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64529: LD_INT 0
64531: PPUSH
64532: PPUSH
64533: PPUSH
// uc_side = 0 ;
64534: LD_ADDR_OWVAR 20
64538: PUSH
64539: LD_INT 0
64541: ST_TO_ADDR
// uc_nation = 0 ;
64542: LD_ADDR_OWVAR 21
64546: PUSH
64547: LD_INT 0
64549: ST_TO_ADDR
// InitHc_All ( ) ;
64550: CALL_OW 584
// InitVc ;
64554: CALL_OW 20
// if mastodonts then
64558: LD_VAR 0 6
64562: IFFALSE 64629
// for i = 1 to mastodonts do
64564: LD_ADDR_VAR 0 11
64568: PUSH
64569: DOUBLE
64570: LD_INT 1
64572: DEC
64573: ST_TO_ADDR
64574: LD_VAR 0 6
64578: PUSH
64579: FOR_TO
64580: IFFALSE 64627
// begin vc_chassis := 31 ;
64582: LD_ADDR_OWVAR 37
64586: PUSH
64587: LD_INT 31
64589: ST_TO_ADDR
// vc_control := control_rider ;
64590: LD_ADDR_OWVAR 38
64594: PUSH
64595: LD_INT 4
64597: ST_TO_ADDR
// animal := CreateVehicle ;
64598: LD_ADDR_VAR 0 12
64602: PUSH
64603: CALL_OW 45
64607: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64608: LD_VAR 0 12
64612: PPUSH
64613: LD_VAR 0 8
64617: PPUSH
64618: LD_INT 0
64620: PPUSH
64621: CALL 66771 0 3
// end ;
64625: GO 64579
64627: POP
64628: POP
// if horses then
64629: LD_VAR 0 5
64633: IFFALSE 64700
// for i = 1 to horses do
64635: LD_ADDR_VAR 0 11
64639: PUSH
64640: DOUBLE
64641: LD_INT 1
64643: DEC
64644: ST_TO_ADDR
64645: LD_VAR 0 5
64649: PUSH
64650: FOR_TO
64651: IFFALSE 64698
// begin hc_class := 21 ;
64653: LD_ADDR_OWVAR 28
64657: PUSH
64658: LD_INT 21
64660: ST_TO_ADDR
// hc_gallery :=  ;
64661: LD_ADDR_OWVAR 33
64665: PUSH
64666: LD_STRING 
64668: ST_TO_ADDR
// animal := CreateHuman ;
64669: LD_ADDR_VAR 0 12
64673: PUSH
64674: CALL_OW 44
64678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64679: LD_VAR 0 12
64683: PPUSH
64684: LD_VAR 0 8
64688: PPUSH
64689: LD_INT 0
64691: PPUSH
64692: CALL 66771 0 3
// end ;
64696: GO 64650
64698: POP
64699: POP
// if birds then
64700: LD_VAR 0 1
64704: IFFALSE 64771
// for i = 1 to birds do
64706: LD_ADDR_VAR 0 11
64710: PUSH
64711: DOUBLE
64712: LD_INT 1
64714: DEC
64715: ST_TO_ADDR
64716: LD_VAR 0 1
64720: PUSH
64721: FOR_TO
64722: IFFALSE 64769
// begin hc_class := 18 ;
64724: LD_ADDR_OWVAR 28
64728: PUSH
64729: LD_INT 18
64731: ST_TO_ADDR
// hc_gallery =  ;
64732: LD_ADDR_OWVAR 33
64736: PUSH
64737: LD_STRING 
64739: ST_TO_ADDR
// animal := CreateHuman ;
64740: LD_ADDR_VAR 0 12
64744: PUSH
64745: CALL_OW 44
64749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64750: LD_VAR 0 12
64754: PPUSH
64755: LD_VAR 0 8
64759: PPUSH
64760: LD_INT 0
64762: PPUSH
64763: CALL 66771 0 3
// end ;
64767: GO 64721
64769: POP
64770: POP
// if tigers then
64771: LD_VAR 0 2
64775: IFFALSE 64859
// for i = 1 to tigers do
64777: LD_ADDR_VAR 0 11
64781: PUSH
64782: DOUBLE
64783: LD_INT 1
64785: DEC
64786: ST_TO_ADDR
64787: LD_VAR 0 2
64791: PUSH
64792: FOR_TO
64793: IFFALSE 64857
// begin hc_class = class_tiger ;
64795: LD_ADDR_OWVAR 28
64799: PUSH
64800: LD_INT 14
64802: ST_TO_ADDR
// hc_gallery =  ;
64803: LD_ADDR_OWVAR 33
64807: PUSH
64808: LD_STRING 
64810: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64811: LD_ADDR_OWVAR 35
64815: PUSH
64816: LD_INT 7
64818: NEG
64819: PPUSH
64820: LD_INT 7
64822: PPUSH
64823: CALL_OW 12
64827: ST_TO_ADDR
// animal := CreateHuman ;
64828: LD_ADDR_VAR 0 12
64832: PUSH
64833: CALL_OW 44
64837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64838: LD_VAR 0 12
64842: PPUSH
64843: LD_VAR 0 8
64847: PPUSH
64848: LD_INT 0
64850: PPUSH
64851: CALL 66771 0 3
// end ;
64855: GO 64792
64857: POP
64858: POP
// if apemans then
64859: LD_VAR 0 3
64863: IFFALSE 64986
// for i = 1 to apemans do
64865: LD_ADDR_VAR 0 11
64869: PUSH
64870: DOUBLE
64871: LD_INT 1
64873: DEC
64874: ST_TO_ADDR
64875: LD_VAR 0 3
64879: PUSH
64880: FOR_TO
64881: IFFALSE 64984
// begin hc_class = class_apeman ;
64883: LD_ADDR_OWVAR 28
64887: PUSH
64888: LD_INT 12
64890: ST_TO_ADDR
// hc_gallery =  ;
64891: LD_ADDR_OWVAR 33
64895: PUSH
64896: LD_STRING 
64898: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64899: LD_ADDR_OWVAR 35
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PPUSH
64908: LD_INT 2
64910: PPUSH
64911: CALL_OW 12
64915: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64916: LD_ADDR_OWVAR 31
64920: PUSH
64921: LD_INT 1
64923: PPUSH
64924: LD_INT 3
64926: PPUSH
64927: CALL_OW 12
64931: PUSH
64932: LD_INT 1
64934: PPUSH
64935: LD_INT 3
64937: PPUSH
64938: CALL_OW 12
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: ST_TO_ADDR
// animal := CreateHuman ;
64955: LD_ADDR_VAR 0 12
64959: PUSH
64960: CALL_OW 44
64964: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64965: LD_VAR 0 12
64969: PPUSH
64970: LD_VAR 0 8
64974: PPUSH
64975: LD_INT 0
64977: PPUSH
64978: CALL 66771 0 3
// end ;
64982: GO 64880
64984: POP
64985: POP
// if enchidnas then
64986: LD_VAR 0 4
64990: IFFALSE 65057
// for i = 1 to enchidnas do
64992: LD_ADDR_VAR 0 11
64996: PUSH
64997: DOUBLE
64998: LD_INT 1
65000: DEC
65001: ST_TO_ADDR
65002: LD_VAR 0 4
65006: PUSH
65007: FOR_TO
65008: IFFALSE 65055
// begin hc_class = 13 ;
65010: LD_ADDR_OWVAR 28
65014: PUSH
65015: LD_INT 13
65017: ST_TO_ADDR
// hc_gallery =  ;
65018: LD_ADDR_OWVAR 33
65022: PUSH
65023: LD_STRING 
65025: ST_TO_ADDR
// animal := CreateHuman ;
65026: LD_ADDR_VAR 0 12
65030: PUSH
65031: CALL_OW 44
65035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65036: LD_VAR 0 12
65040: PPUSH
65041: LD_VAR 0 8
65045: PPUSH
65046: LD_INT 0
65048: PPUSH
65049: CALL 66771 0 3
// end ;
65053: GO 65007
65055: POP
65056: POP
// if fishes then
65057: LD_VAR 0 7
65061: IFFALSE 65128
// for i = 1 to fishes do
65063: LD_ADDR_VAR 0 11
65067: PUSH
65068: DOUBLE
65069: LD_INT 1
65071: DEC
65072: ST_TO_ADDR
65073: LD_VAR 0 7
65077: PUSH
65078: FOR_TO
65079: IFFALSE 65126
// begin hc_class = 20 ;
65081: LD_ADDR_OWVAR 28
65085: PUSH
65086: LD_INT 20
65088: ST_TO_ADDR
// hc_gallery =  ;
65089: LD_ADDR_OWVAR 33
65093: PUSH
65094: LD_STRING 
65096: ST_TO_ADDR
// animal := CreateHuman ;
65097: LD_ADDR_VAR 0 12
65101: PUSH
65102: CALL_OW 44
65106: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65107: LD_VAR 0 12
65111: PPUSH
65112: LD_VAR 0 9
65116: PPUSH
65117: LD_INT 0
65119: PPUSH
65120: CALL 66771 0 3
// end ;
65124: GO 65078
65126: POP
65127: POP
// end ;
65128: LD_VAR 0 10
65132: RET
// export function WantHeal ( sci , unit ) ; begin
65133: LD_INT 0
65135: PPUSH
// if GetTaskList ( sci ) > 0 then
65136: LD_VAR 0 1
65140: PPUSH
65141: CALL_OW 437
65145: PUSH
65146: LD_INT 0
65148: GREATER
65149: IFFALSE 65221
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65151: LD_VAR 0 1
65155: PPUSH
65156: CALL_OW 437
65160: PUSH
65161: LD_INT 1
65163: ARRAY
65164: PUSH
65165: LD_INT 1
65167: ARRAY
65168: PUSH
65169: LD_STRING l
65171: EQUAL
65172: IFFALSE 65199
65174: PUSH
65175: LD_VAR 0 1
65179: PPUSH
65180: CALL_OW 437
65184: PUSH
65185: LD_INT 1
65187: ARRAY
65188: PUSH
65189: LD_INT 4
65191: ARRAY
65192: PUSH
65193: LD_VAR 0 2
65197: EQUAL
65198: AND
65199: IFFALSE 65211
// result := true else
65201: LD_ADDR_VAR 0 3
65205: PUSH
65206: LD_INT 1
65208: ST_TO_ADDR
65209: GO 65219
// result := false ;
65211: LD_ADDR_VAR 0 3
65215: PUSH
65216: LD_INT 0
65218: ST_TO_ADDR
// end else
65219: GO 65229
// result := false ;
65221: LD_ADDR_VAR 0 3
65225: PUSH
65226: LD_INT 0
65228: ST_TO_ADDR
// end ;
65229: LD_VAR 0 3
65233: RET
// export function HealTarget ( sci ) ; begin
65234: LD_INT 0
65236: PPUSH
// if not sci then
65237: LD_VAR 0 1
65241: NOT
65242: IFFALSE 65246
// exit ;
65244: GO 65311
// result := 0 ;
65246: LD_ADDR_VAR 0 2
65250: PUSH
65251: LD_INT 0
65253: ST_TO_ADDR
// if GetTaskList ( sci ) then
65254: LD_VAR 0 1
65258: PPUSH
65259: CALL_OW 437
65263: IFFALSE 65311
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65265: LD_VAR 0 1
65269: PPUSH
65270: CALL_OW 437
65274: PUSH
65275: LD_INT 1
65277: ARRAY
65278: PUSH
65279: LD_INT 1
65281: ARRAY
65282: PUSH
65283: LD_STRING l
65285: EQUAL
65286: IFFALSE 65311
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65288: LD_ADDR_VAR 0 2
65292: PUSH
65293: LD_VAR 0 1
65297: PPUSH
65298: CALL_OW 437
65302: PUSH
65303: LD_INT 1
65305: ARRAY
65306: PUSH
65307: LD_INT 4
65309: ARRAY
65310: ST_TO_ADDR
// end ;
65311: LD_VAR 0 2
65315: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65316: LD_INT 0
65318: PPUSH
65319: PPUSH
65320: PPUSH
65321: PPUSH
// if not base_units then
65322: LD_VAR 0 1
65326: NOT
65327: IFFALSE 65331
// exit ;
65329: GO 65418
// result := false ;
65331: LD_ADDR_VAR 0 2
65335: PUSH
65336: LD_INT 0
65338: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65339: LD_ADDR_VAR 0 5
65343: PUSH
65344: LD_VAR 0 1
65348: PPUSH
65349: LD_INT 21
65351: PUSH
65352: LD_INT 3
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PPUSH
65359: CALL_OW 72
65363: ST_TO_ADDR
// if not tmp then
65364: LD_VAR 0 5
65368: NOT
65369: IFFALSE 65373
// exit ;
65371: GO 65418
// for i in tmp do
65373: LD_ADDR_VAR 0 3
65377: PUSH
65378: LD_VAR 0 5
65382: PUSH
65383: FOR_IN
65384: IFFALSE 65416
// begin result := EnemyInRange ( i , 22 ) ;
65386: LD_ADDR_VAR 0 2
65390: PUSH
65391: LD_VAR 0 3
65395: PPUSH
65396: LD_INT 22
65398: PPUSH
65399: CALL 62843 0 2
65403: ST_TO_ADDR
// if result then
65404: LD_VAR 0 2
65408: IFFALSE 65414
// exit ;
65410: POP
65411: POP
65412: GO 65418
// end ;
65414: GO 65383
65416: POP
65417: POP
// end ;
65418: LD_VAR 0 2
65422: RET
// export function FilterByTag ( units , tag ) ; begin
65423: LD_INT 0
65425: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65426: LD_ADDR_VAR 0 3
65430: PUSH
65431: LD_VAR 0 1
65435: PPUSH
65436: LD_INT 120
65438: PUSH
65439: LD_VAR 0 2
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PPUSH
65448: CALL_OW 72
65452: ST_TO_ADDR
// end ;
65453: LD_VAR 0 3
65457: RET
// export function IsDriver ( un ) ; begin
65458: LD_INT 0
65460: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65461: LD_ADDR_VAR 0 2
65465: PUSH
65466: LD_VAR 0 1
65470: PUSH
65471: LD_INT 55
65473: PUSH
65474: EMPTY
65475: LIST
65476: PPUSH
65477: CALL_OW 69
65481: IN
65482: ST_TO_ADDR
// end ;
65483: LD_VAR 0 2
65487: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65488: LD_INT 0
65490: PPUSH
65491: PPUSH
// list := [ ] ;
65492: LD_ADDR_VAR 0 5
65496: PUSH
65497: EMPTY
65498: ST_TO_ADDR
// case d of 0 :
65499: LD_VAR 0 3
65503: PUSH
65504: LD_INT 0
65506: DOUBLE
65507: EQUAL
65508: IFTRUE 65512
65510: GO 65645
65512: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65513: LD_ADDR_VAR 0 5
65517: PUSH
65518: LD_VAR 0 1
65522: PUSH
65523: LD_INT 4
65525: MINUS
65526: PUSH
65527: LD_VAR 0 2
65531: PUSH
65532: LD_INT 4
65534: MINUS
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: LIST
65543: PUSH
65544: LD_VAR 0 1
65548: PUSH
65549: LD_INT 3
65551: MINUS
65552: PUSH
65553: LD_VAR 0 2
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: PUSH
65566: LD_VAR 0 1
65570: PUSH
65571: LD_INT 4
65573: PLUS
65574: PUSH
65575: LD_VAR 0 2
65579: PUSH
65580: LD_INT 4
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: LIST
65587: PUSH
65588: LD_VAR 0 1
65592: PUSH
65593: LD_INT 3
65595: PLUS
65596: PUSH
65597: LD_VAR 0 2
65601: PUSH
65602: LD_INT 3
65604: PLUS
65605: PUSH
65606: LD_INT 5
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: LIST
65613: PUSH
65614: LD_VAR 0 1
65618: PUSH
65619: LD_VAR 0 2
65623: PUSH
65624: LD_INT 4
65626: PLUS
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: LIST
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: ST_TO_ADDR
// end ; 1 :
65643: GO 66343
65645: LD_INT 1
65647: DOUBLE
65648: EQUAL
65649: IFTRUE 65653
65651: GO 65786
65653: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65654: LD_ADDR_VAR 0 5
65658: PUSH
65659: LD_VAR 0 1
65663: PUSH
65664: LD_VAR 0 2
65668: PUSH
65669: LD_INT 4
65671: MINUS
65672: PUSH
65673: LD_INT 3
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: PUSH
65681: LD_VAR 0 1
65685: PUSH
65686: LD_INT 3
65688: MINUS
65689: PUSH
65690: LD_VAR 0 2
65694: PUSH
65695: LD_INT 3
65697: MINUS
65698: PUSH
65699: LD_INT 2
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: LIST
65706: PUSH
65707: LD_VAR 0 1
65711: PUSH
65712: LD_INT 4
65714: MINUS
65715: PUSH
65716: LD_VAR 0 2
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: LIST
65728: PUSH
65729: LD_VAR 0 1
65733: PUSH
65734: LD_VAR 0 2
65738: PUSH
65739: LD_INT 3
65741: PLUS
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: LIST
65750: PUSH
65751: LD_VAR 0 1
65755: PUSH
65756: LD_INT 4
65758: PLUS
65759: PUSH
65760: LD_VAR 0 2
65764: PUSH
65765: LD_INT 4
65767: PLUS
65768: PUSH
65769: LD_INT 5
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: LIST
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: ST_TO_ADDR
// end ; 2 :
65784: GO 66343
65786: LD_INT 2
65788: DOUBLE
65789: EQUAL
65790: IFTRUE 65794
65792: GO 65923
65794: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65795: LD_ADDR_VAR 0 5
65799: PUSH
65800: LD_VAR 0 1
65804: PUSH
65805: LD_VAR 0 2
65809: PUSH
65810: LD_INT 3
65812: MINUS
65813: PUSH
65814: LD_INT 3
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: LIST
65821: PUSH
65822: LD_VAR 0 1
65826: PUSH
65827: LD_INT 4
65829: PLUS
65830: PUSH
65831: LD_VAR 0 2
65835: PUSH
65836: LD_INT 4
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: LIST
65843: PUSH
65844: LD_VAR 0 1
65848: PUSH
65849: LD_VAR 0 2
65853: PUSH
65854: LD_INT 4
65856: PLUS
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: LIST
65865: PUSH
65866: LD_VAR 0 1
65870: PUSH
65871: LD_INT 3
65873: MINUS
65874: PUSH
65875: LD_VAR 0 2
65879: PUSH
65880: LD_INT 1
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: PUSH
65888: LD_VAR 0 1
65892: PUSH
65893: LD_INT 4
65895: MINUS
65896: PUSH
65897: LD_VAR 0 2
65901: PUSH
65902: LD_INT 4
65904: MINUS
65905: PUSH
65906: LD_INT 2
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: LIST
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: ST_TO_ADDR
// end ; 3 :
65921: GO 66343
65923: LD_INT 3
65925: DOUBLE
65926: EQUAL
65927: IFTRUE 65931
65929: GO 66064
65931: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65932: LD_ADDR_VAR 0 5
65936: PUSH
65937: LD_VAR 0 1
65941: PUSH
65942: LD_INT 3
65944: PLUS
65945: PUSH
65946: LD_VAR 0 2
65950: PUSH
65951: LD_INT 4
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: LIST
65958: PUSH
65959: LD_VAR 0 1
65963: PUSH
65964: LD_INT 4
65966: PLUS
65967: PUSH
65968: LD_VAR 0 2
65972: PUSH
65973: LD_INT 4
65975: PLUS
65976: PUSH
65977: LD_INT 5
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: LIST
65984: PUSH
65985: LD_VAR 0 1
65989: PUSH
65990: LD_INT 4
65992: MINUS
65993: PUSH
65994: LD_VAR 0 2
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: LIST
66006: PUSH
66007: LD_VAR 0 1
66011: PUSH
66012: LD_VAR 0 2
66016: PUSH
66017: LD_INT 4
66019: MINUS
66020: PUSH
66021: LD_INT 3
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: LIST
66028: PUSH
66029: LD_VAR 0 1
66033: PUSH
66034: LD_INT 3
66036: MINUS
66037: PUSH
66038: LD_VAR 0 2
66042: PUSH
66043: LD_INT 3
66045: MINUS
66046: PUSH
66047: LD_INT 2
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: LIST
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: ST_TO_ADDR
// end ; 4 :
66062: GO 66343
66064: LD_INT 4
66066: DOUBLE
66067: EQUAL
66068: IFTRUE 66072
66070: GO 66205
66072: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66073: LD_ADDR_VAR 0 5
66077: PUSH
66078: LD_VAR 0 1
66082: PUSH
66083: LD_VAR 0 2
66087: PUSH
66088: LD_INT 4
66090: PLUS
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: LIST
66099: PUSH
66100: LD_VAR 0 1
66104: PUSH
66105: LD_INT 3
66107: PLUS
66108: PUSH
66109: LD_VAR 0 2
66113: PUSH
66114: LD_INT 3
66116: PLUS
66117: PUSH
66118: LD_INT 5
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: LIST
66125: PUSH
66126: LD_VAR 0 1
66130: PUSH
66131: LD_INT 4
66133: PLUS
66134: PUSH
66135: LD_VAR 0 2
66139: PUSH
66140: LD_INT 4
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: LIST
66147: PUSH
66148: LD_VAR 0 1
66152: PUSH
66153: LD_VAR 0 2
66157: PUSH
66158: LD_INT 3
66160: MINUS
66161: PUSH
66162: LD_INT 3
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: LIST
66169: PUSH
66170: LD_VAR 0 1
66174: PUSH
66175: LD_INT 4
66177: MINUS
66178: PUSH
66179: LD_VAR 0 2
66183: PUSH
66184: LD_INT 4
66186: MINUS
66187: PUSH
66188: LD_INT 2
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: LIST
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: ST_TO_ADDR
// end ; 5 :
66203: GO 66343
66205: LD_INT 5
66207: DOUBLE
66208: EQUAL
66209: IFTRUE 66213
66211: GO 66342
66213: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66214: LD_ADDR_VAR 0 5
66218: PUSH
66219: LD_VAR 0 1
66223: PUSH
66224: LD_INT 4
66226: MINUS
66227: PUSH
66228: LD_VAR 0 2
66232: PUSH
66233: LD_INT 1
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: LIST
66240: PUSH
66241: LD_VAR 0 1
66245: PUSH
66246: LD_VAR 0 2
66250: PUSH
66251: LD_INT 4
66253: MINUS
66254: PUSH
66255: LD_INT 3
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: LIST
66262: PUSH
66263: LD_VAR 0 1
66267: PUSH
66268: LD_INT 4
66270: PLUS
66271: PUSH
66272: LD_VAR 0 2
66276: PUSH
66277: LD_INT 4
66279: PLUS
66280: PUSH
66281: LD_INT 5
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: LIST
66288: PUSH
66289: LD_VAR 0 1
66293: PUSH
66294: LD_INT 3
66296: PLUS
66297: PUSH
66298: LD_VAR 0 2
66302: PUSH
66303: LD_INT 4
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: PUSH
66311: LD_VAR 0 1
66315: PUSH
66316: LD_VAR 0 2
66320: PUSH
66321: LD_INT 3
66323: PLUS
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: LIST
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: ST_TO_ADDR
// end ; end ;
66340: GO 66343
66342: POP
// result := list ;
66343: LD_ADDR_VAR 0 4
66347: PUSH
66348: LD_VAR 0 5
66352: ST_TO_ADDR
// end ;
66353: LD_VAR 0 4
66357: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66358: LD_INT 0
66360: PPUSH
66361: PPUSH
66362: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66363: LD_VAR 0 1
66367: NOT
66368: IFTRUE 66396
66370: PUSH
66371: LD_VAR 0 2
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: LD_INT 3
66384: PUSH
66385: LD_INT 4
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: IN
66394: NOT
66395: OR
66396: IFFALSE 66400
// exit ;
66398: GO 66483
// tmp := [ ] ;
66400: LD_ADDR_VAR 0 5
66404: PUSH
66405: EMPTY
66406: ST_TO_ADDR
// for i in units do
66407: LD_ADDR_VAR 0 4
66411: PUSH
66412: LD_VAR 0 1
66416: PUSH
66417: FOR_IN
66418: IFFALSE 66452
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66420: LD_ADDR_VAR 0 5
66424: PUSH
66425: LD_VAR 0 5
66429: PPUSH
66430: LD_VAR 0 4
66434: PPUSH
66435: LD_VAR 0 2
66439: PPUSH
66440: CALL_OW 259
66444: PPUSH
66445: CALL 67878 0 2
66449: ST_TO_ADDR
66450: GO 66417
66452: POP
66453: POP
// if not tmp then
66454: LD_VAR 0 5
66458: NOT
66459: IFFALSE 66463
// exit ;
66461: GO 66483
// result := SortListByListDesc ( units , tmp ) ;
66463: LD_ADDR_VAR 0 3
66467: PUSH
66468: LD_VAR 0 1
66472: PPUSH
66473: LD_VAR 0 5
66477: PPUSH
66478: CALL_OW 77
66482: ST_TO_ADDR
// end ;
66483: LD_VAR 0 3
66487: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66488: LD_INT 0
66490: PPUSH
66491: PPUSH
66492: PPUSH
// result := false ;
66493: LD_ADDR_VAR 0 3
66497: PUSH
66498: LD_INT 0
66500: ST_TO_ADDR
// if not building then
66501: LD_VAR 0 2
66505: NOT
66506: IFFALSE 66510
// exit ;
66508: GO 66654
// x := GetX ( building ) ;
66510: LD_ADDR_VAR 0 4
66514: PUSH
66515: LD_VAR 0 2
66519: PPUSH
66520: CALL_OW 250
66524: ST_TO_ADDR
// y := GetY ( building ) ;
66525: LD_ADDR_VAR 0 5
66529: PUSH
66530: LD_VAR 0 2
66534: PPUSH
66535: CALL_OW 251
66539: ST_TO_ADDR
// if not x or not y then
66540: LD_VAR 0 4
66544: NOT
66545: IFTRUE 66554
66547: PUSH
66548: LD_VAR 0 5
66552: NOT
66553: OR
66554: IFFALSE 66558
// exit ;
66556: GO 66654
// if GetTaskList ( unit ) then
66558: LD_VAR 0 1
66562: PPUSH
66563: CALL_OW 437
66567: IFFALSE 66654
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66569: LD_STRING e
66571: PUSH
66572: LD_VAR 0 1
66576: PPUSH
66577: CALL_OW 437
66581: PUSH
66582: LD_INT 1
66584: ARRAY
66585: PUSH
66586: LD_INT 1
66588: ARRAY
66589: EQUAL
66590: IFFALSE 66617
66592: PUSH
66593: LD_VAR 0 4
66597: PUSH
66598: LD_VAR 0 1
66602: PPUSH
66603: CALL_OW 437
66607: PUSH
66608: LD_INT 1
66610: ARRAY
66611: PUSH
66612: LD_INT 2
66614: ARRAY
66615: EQUAL
66616: AND
66617: IFFALSE 66644
66619: PUSH
66620: LD_VAR 0 5
66624: PUSH
66625: LD_VAR 0 1
66629: PPUSH
66630: CALL_OW 437
66634: PUSH
66635: LD_INT 1
66637: ARRAY
66638: PUSH
66639: LD_INT 3
66641: ARRAY
66642: EQUAL
66643: AND
66644: IFFALSE 66654
// result := true end ;
66646: LD_ADDR_VAR 0 3
66650: PUSH
66651: LD_INT 1
66653: ST_TO_ADDR
// end ;
66654: LD_VAR 0 3
66658: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66659: LD_INT 0
66661: PPUSH
// result := false ;
66662: LD_ADDR_VAR 0 4
66666: PUSH
66667: LD_INT 0
66669: ST_TO_ADDR
// if GetTaskList ( unit ) then
66670: LD_VAR 0 1
66674: PPUSH
66675: CALL_OW 437
66679: IFFALSE 66766
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66681: LD_STRING M
66683: PUSH
66684: LD_VAR 0 1
66688: PPUSH
66689: CALL_OW 437
66693: PUSH
66694: LD_INT 1
66696: ARRAY
66697: PUSH
66698: LD_INT 1
66700: ARRAY
66701: EQUAL
66702: IFFALSE 66729
66704: PUSH
66705: LD_VAR 0 2
66709: PUSH
66710: LD_VAR 0 1
66714: PPUSH
66715: CALL_OW 437
66719: PUSH
66720: LD_INT 1
66722: ARRAY
66723: PUSH
66724: LD_INT 2
66726: ARRAY
66727: EQUAL
66728: AND
66729: IFFALSE 66756
66731: PUSH
66732: LD_VAR 0 3
66736: PUSH
66737: LD_VAR 0 1
66741: PPUSH
66742: CALL_OW 437
66746: PUSH
66747: LD_INT 1
66749: ARRAY
66750: PUSH
66751: LD_INT 3
66753: ARRAY
66754: EQUAL
66755: AND
66756: IFFALSE 66766
// result := true ;
66758: LD_ADDR_VAR 0 4
66762: PUSH
66763: LD_INT 1
66765: ST_TO_ADDR
// end ; end ;
66766: LD_VAR 0 4
66770: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66771: LD_INT 0
66773: PPUSH
66774: PPUSH
66775: PPUSH
66776: PPUSH
// if not unit or not area then
66777: LD_VAR 0 1
66781: NOT
66782: IFTRUE 66791
66784: PUSH
66785: LD_VAR 0 2
66789: NOT
66790: OR
66791: IFFALSE 66795
// exit ;
66793: GO 66971
// tmp := AreaToList ( area , i ) ;
66795: LD_ADDR_VAR 0 6
66799: PUSH
66800: LD_VAR 0 2
66804: PPUSH
66805: LD_VAR 0 5
66809: PPUSH
66810: CALL_OW 517
66814: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66815: LD_ADDR_VAR 0 5
66819: PUSH
66820: DOUBLE
66821: LD_INT 1
66823: DEC
66824: ST_TO_ADDR
66825: LD_VAR 0 6
66829: PUSH
66830: LD_INT 1
66832: ARRAY
66833: PUSH
66834: FOR_TO
66835: IFFALSE 66969
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66837: LD_ADDR_VAR 0 7
66841: PUSH
66842: LD_VAR 0 6
66846: PUSH
66847: LD_INT 1
66849: ARRAY
66850: PUSH
66851: LD_VAR 0 5
66855: ARRAY
66856: PUSH
66857: LD_VAR 0 6
66861: PUSH
66862: LD_INT 2
66864: ARRAY
66865: PUSH
66866: LD_VAR 0 5
66870: ARRAY
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66876: LD_INT 92
66878: PUSH
66879: LD_VAR 0 7
66883: PUSH
66884: LD_INT 1
66886: ARRAY
66887: PUSH
66888: LD_VAR 0 7
66892: PUSH
66893: LD_INT 2
66895: ARRAY
66896: PUSH
66897: LD_INT 2
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: PPUSH
66906: CALL_OW 69
66910: PUSH
66911: LD_INT 0
66913: EQUAL
66914: IFFALSE 66967
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66916: LD_VAR 0 1
66920: PPUSH
66921: LD_VAR 0 7
66925: PUSH
66926: LD_INT 1
66928: ARRAY
66929: PPUSH
66930: LD_VAR 0 7
66934: PUSH
66935: LD_INT 2
66937: ARRAY
66938: PPUSH
66939: LD_VAR 0 3
66943: PPUSH
66944: CALL_OW 48
// result := IsPlaced ( unit ) ;
66948: LD_ADDR_VAR 0 4
66952: PUSH
66953: LD_VAR 0 1
66957: PPUSH
66958: CALL_OW 305
66962: ST_TO_ADDR
// exit ;
66963: POP
66964: POP
66965: GO 66971
// end ; end ;
66967: GO 66834
66969: POP
66970: POP
// end ;
66971: LD_VAR 0 4
66975: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66976: LD_INT 0
66978: PPUSH
66979: PPUSH
66980: PPUSH
// if not side or side > 8 then
66981: LD_VAR 0 1
66985: NOT
66986: IFTRUE 66998
66988: PUSH
66989: LD_VAR 0 1
66993: PUSH
66994: LD_INT 8
66996: GREATER
66997: OR
66998: IFFALSE 67002
// exit ;
67000: GO 67189
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67002: LD_ADDR_VAR 0 4
67006: PUSH
67007: LD_INT 22
67009: PUSH
67010: LD_VAR 0 1
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 21
67021: PUSH
67022: LD_INT 3
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PPUSH
67033: CALL_OW 69
67037: ST_TO_ADDR
// if not tmp then
67038: LD_VAR 0 4
67042: NOT
67043: IFFALSE 67047
// exit ;
67045: GO 67189
// enable_addtolog := true ;
67047: LD_ADDR_OWVAR 81
67051: PUSH
67052: LD_INT 1
67054: ST_TO_ADDR
// AddToLog ( [ ) ;
67055: LD_STRING [
67057: PPUSH
67058: CALL_OW 561
// for i in tmp do
67062: LD_ADDR_VAR 0 3
67066: PUSH
67067: LD_VAR 0 4
67071: PUSH
67072: FOR_IN
67073: IFFALSE 67180
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67075: LD_STRING [
67077: PUSH
67078: LD_VAR 0 3
67082: PPUSH
67083: CALL_OW 266
67087: STR
67088: PUSH
67089: LD_STRING , 
67091: STR
67092: PUSH
67093: LD_VAR 0 3
67097: PPUSH
67098: CALL_OW 250
67102: STR
67103: PUSH
67104: LD_STRING , 
67106: STR
67107: PUSH
67108: LD_VAR 0 3
67112: PPUSH
67113: CALL_OW 251
67117: STR
67118: PUSH
67119: LD_STRING , 
67121: STR
67122: PUSH
67123: LD_VAR 0 3
67127: PPUSH
67128: CALL_OW 254
67132: STR
67133: PUSH
67134: LD_STRING , 
67136: STR
67137: PUSH
67138: LD_VAR 0 3
67142: PPUSH
67143: LD_INT 1
67145: PPUSH
67146: CALL_OW 268
67150: STR
67151: PUSH
67152: LD_STRING , 
67154: STR
67155: PUSH
67156: LD_VAR 0 3
67160: PPUSH
67161: LD_INT 2
67163: PPUSH
67164: CALL_OW 268
67168: STR
67169: PUSH
67170: LD_STRING ],
67172: STR
67173: PPUSH
67174: CALL_OW 561
// end ;
67178: GO 67072
67180: POP
67181: POP
// AddToLog ( ]; ) ;
67182: LD_STRING ];
67184: PPUSH
67185: CALL_OW 561
// end ;
67189: LD_VAR 0 2
67193: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67194: LD_INT 0
67196: PPUSH
67197: PPUSH
67198: PPUSH
67199: PPUSH
67200: PPUSH
// if not area or not rate or not max then
67201: LD_VAR 0 1
67205: NOT
67206: IFTRUE 67215
67208: PUSH
67209: LD_VAR 0 2
67213: NOT
67214: OR
67215: IFTRUE 67224
67217: PUSH
67218: LD_VAR 0 4
67222: NOT
67223: OR
67224: IFFALSE 67228
// exit ;
67226: GO 67417
// while 1 do
67228: LD_INT 1
67230: IFFALSE 67417
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67232: LD_ADDR_VAR 0 9
67236: PUSH
67237: LD_VAR 0 1
67241: PPUSH
67242: LD_INT 1
67244: PPUSH
67245: CALL_OW 287
67249: PUSH
67250: LD_INT 10
67252: MUL
67253: ST_TO_ADDR
// r := rate / 10 ;
67254: LD_ADDR_VAR 0 7
67258: PUSH
67259: LD_VAR 0 2
67263: PUSH
67264: LD_INT 10
67266: DIVREAL
67267: ST_TO_ADDR
// time := 1 1$00 ;
67268: LD_ADDR_VAR 0 8
67272: PUSH
67273: LD_INT 2100
67275: ST_TO_ADDR
// if amount < min then
67276: LD_VAR 0 9
67280: PUSH
67281: LD_VAR 0 3
67285: LESS
67286: IFFALSE 67304
// r := r * 2 else
67288: LD_ADDR_VAR 0 7
67292: PUSH
67293: LD_VAR 0 7
67297: PUSH
67298: LD_INT 2
67300: MUL
67301: ST_TO_ADDR
67302: GO 67330
// if amount > max then
67304: LD_VAR 0 9
67308: PUSH
67309: LD_VAR 0 4
67313: GREATER
67314: IFFALSE 67330
// r := r / 2 ;
67316: LD_ADDR_VAR 0 7
67320: PUSH
67321: LD_VAR 0 7
67325: PUSH
67326: LD_INT 2
67328: DIVREAL
67329: ST_TO_ADDR
// time := time / r ;
67330: LD_ADDR_VAR 0 8
67334: PUSH
67335: LD_VAR 0 8
67339: PUSH
67340: LD_VAR 0 7
67344: DIVREAL
67345: ST_TO_ADDR
// if time < 0 then
67346: LD_VAR 0 8
67350: PUSH
67351: LD_INT 0
67353: LESS
67354: IFFALSE 67371
// time := time * - 1 ;
67356: LD_ADDR_VAR 0 8
67360: PUSH
67361: LD_VAR 0 8
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: MUL
67370: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67371: LD_VAR 0 8
67375: PUSH
67376: LD_INT 35
67378: PPUSH
67379: LD_INT 875
67381: PPUSH
67382: CALL_OW 12
67386: PLUS
67387: PPUSH
67388: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67392: LD_INT 1
67394: PPUSH
67395: LD_INT 5
67397: PPUSH
67398: CALL_OW 12
67402: PPUSH
67403: LD_VAR 0 1
67407: PPUSH
67408: LD_INT 1
67410: PPUSH
67411: CALL_OW 55
// end ;
67415: GO 67228
// end ;
67417: LD_VAR 0 5
67421: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67422: LD_INT 0
67424: PPUSH
67425: PPUSH
67426: PPUSH
67427: PPUSH
67428: PPUSH
67429: PPUSH
67430: PPUSH
67431: PPUSH
// if not turrets or not factories then
67432: LD_VAR 0 1
67436: NOT
67437: IFTRUE 67446
67439: PUSH
67440: LD_VAR 0 2
67444: NOT
67445: OR
67446: IFFALSE 67450
// exit ;
67448: GO 67757
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67450: LD_ADDR_VAR 0 10
67454: PUSH
67455: LD_INT 5
67457: PUSH
67458: LD_INT 6
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: LD_INT 4
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 3
67477: PUSH
67478: LD_INT 5
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 24
67492: PUSH
67493: LD_INT 25
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 23
67502: PUSH
67503: LD_INT 27
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 42
67516: PUSH
67517: LD_INT 43
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 44
67526: PUSH
67527: LD_INT 46
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 45
67536: PUSH
67537: LD_INT 47
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: LIST
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: LIST
67553: ST_TO_ADDR
// result := [ ] ;
67554: LD_ADDR_VAR 0 3
67558: PUSH
67559: EMPTY
67560: ST_TO_ADDR
// for i in turrets do
67561: LD_ADDR_VAR 0 4
67565: PUSH
67566: LD_VAR 0 1
67570: PUSH
67571: FOR_IN
67572: IFFALSE 67755
// begin nat := GetNation ( i ) ;
67574: LD_ADDR_VAR 0 7
67578: PUSH
67579: LD_VAR 0 4
67583: PPUSH
67584: CALL_OW 248
67588: ST_TO_ADDR
// weapon := 0 ;
67589: LD_ADDR_VAR 0 8
67593: PUSH
67594: LD_INT 0
67596: ST_TO_ADDR
// if not nat then
67597: LD_VAR 0 7
67601: NOT
67602: IFFALSE 67606
// continue ;
67604: GO 67571
// for j in list [ nat ] do
67606: LD_ADDR_VAR 0 5
67610: PUSH
67611: LD_VAR 0 10
67615: PUSH
67616: LD_VAR 0 7
67620: ARRAY
67621: PUSH
67622: FOR_IN
67623: IFFALSE 67664
// if GetBWeapon ( i ) = j [ 1 ] then
67625: LD_VAR 0 4
67629: PPUSH
67630: CALL_OW 269
67634: PUSH
67635: LD_VAR 0 5
67639: PUSH
67640: LD_INT 1
67642: ARRAY
67643: EQUAL
67644: IFFALSE 67662
// begin weapon := j [ 2 ] ;
67646: LD_ADDR_VAR 0 8
67650: PUSH
67651: LD_VAR 0 5
67655: PUSH
67656: LD_INT 2
67658: ARRAY
67659: ST_TO_ADDR
// break ;
67660: GO 67664
// end ;
67662: GO 67622
67664: POP
67665: POP
// if not weapon then
67666: LD_VAR 0 8
67670: NOT
67671: IFFALSE 67675
// continue ;
67673: GO 67571
// for k in factories do
67675: LD_ADDR_VAR 0 6
67679: PUSH
67680: LD_VAR 0 2
67684: PUSH
67685: FOR_IN
67686: IFFALSE 67751
// begin weapons := AvailableWeaponList ( k ) ;
67688: LD_ADDR_VAR 0 9
67692: PUSH
67693: LD_VAR 0 6
67697: PPUSH
67698: CALL_OW 478
67702: ST_TO_ADDR
// if not weapons then
67703: LD_VAR 0 9
67707: NOT
67708: IFFALSE 67712
// continue ;
67710: GO 67685
// if weapon in weapons then
67712: LD_VAR 0 8
67716: PUSH
67717: LD_VAR 0 9
67721: IN
67722: IFFALSE 67749
// begin result := [ i , weapon ] ;
67724: LD_ADDR_VAR 0 3
67728: PUSH
67729: LD_VAR 0 4
67733: PUSH
67734: LD_VAR 0 8
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: ST_TO_ADDR
// exit ;
67743: POP
67744: POP
67745: POP
67746: POP
67747: GO 67757
// end ; end ;
67749: GO 67685
67751: POP
67752: POP
// end ;
67753: GO 67571
67755: POP
67756: POP
// end ;
67757: LD_VAR 0 3
67761: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67762: LD_INT 0
67764: PPUSH
// if not side or side > 8 then
67765: LD_VAR 0 3
67769: NOT
67770: IFTRUE 67782
67772: PUSH
67773: LD_VAR 0 3
67777: PUSH
67778: LD_INT 8
67780: GREATER
67781: OR
67782: IFFALSE 67786
// exit ;
67784: GO 67845
// if not range then
67786: LD_VAR 0 4
67790: NOT
67791: IFFALSE 67802
// range := - 12 ;
67793: LD_ADDR_VAR 0 4
67797: PUSH
67798: LD_INT 12
67800: NEG
67801: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67802: LD_VAR 0 1
67806: PPUSH
67807: LD_VAR 0 2
67811: PPUSH
67812: LD_VAR 0 3
67816: PPUSH
67817: LD_VAR 0 4
67821: PPUSH
67822: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67826: LD_VAR 0 1
67830: PPUSH
67831: LD_VAR 0 2
67835: PPUSH
67836: LD_VAR 0 3
67840: PPUSH
67841: CALL_OW 331
// end ;
67845: LD_VAR 0 5
67849: RET
// export function Video ( mode ) ; begin
67850: LD_INT 0
67852: PPUSH
// ingame_video = mode ;
67853: LD_ADDR_OWVAR 52
67857: PUSH
67858: LD_VAR 0 1
67862: ST_TO_ADDR
// interface_hidden = mode ;
67863: LD_ADDR_OWVAR 54
67867: PUSH
67868: LD_VAR 0 1
67872: ST_TO_ADDR
// end ;
67873: LD_VAR 0 2
67877: RET
// export function Join ( array , element ) ; begin
67878: LD_INT 0
67880: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67881: LD_ADDR_VAR 0 3
67885: PUSH
67886: LD_VAR 0 1
67890: PPUSH
67891: LD_VAR 0 1
67895: PUSH
67896: LD_INT 1
67898: PLUS
67899: PPUSH
67900: LD_VAR 0 2
67904: PPUSH
67905: CALL_OW 1
67909: ST_TO_ADDR
// end ;
67910: LD_VAR 0 3
67914: RET
// export function JoinUnion ( array , element ) ; begin
67915: LD_INT 0
67917: PPUSH
// result := array union element ;
67918: LD_ADDR_VAR 0 3
67922: PUSH
67923: LD_VAR 0 1
67927: PUSH
67928: LD_VAR 0 2
67932: UNION
67933: ST_TO_ADDR
// end ;
67934: LD_VAR 0 3
67938: RET
// export function GetBehemoths ( side ) ; begin
67939: LD_INT 0
67941: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67942: LD_ADDR_VAR 0 2
67946: PUSH
67947: LD_INT 22
67949: PUSH
67950: LD_VAR 0 1
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 31
67961: PUSH
67962: LD_INT 25
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PPUSH
67973: CALL_OW 69
67977: ST_TO_ADDR
// end ;
67978: LD_VAR 0 2
67982: RET
// export function Shuffle ( array ) ; var i , index ; begin
67983: LD_INT 0
67985: PPUSH
67986: PPUSH
67987: PPUSH
// result := [ ] ;
67988: LD_ADDR_VAR 0 2
67992: PUSH
67993: EMPTY
67994: ST_TO_ADDR
// if not array then
67995: LD_VAR 0 1
67999: NOT
68000: IFFALSE 68004
// exit ;
68002: GO 68103
// Randomize ;
68004: CALL_OW 10
// for i = array downto 1 do
68008: LD_ADDR_VAR 0 3
68012: PUSH
68013: DOUBLE
68014: LD_VAR 0 1
68018: INC
68019: ST_TO_ADDR
68020: LD_INT 1
68022: PUSH
68023: FOR_DOWNTO
68024: IFFALSE 68101
// begin index := rand ( 1 , array ) ;
68026: LD_ADDR_VAR 0 4
68030: PUSH
68031: LD_INT 1
68033: PPUSH
68034: LD_VAR 0 1
68038: PPUSH
68039: CALL_OW 12
68043: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68044: LD_ADDR_VAR 0 2
68048: PUSH
68049: LD_VAR 0 2
68053: PPUSH
68054: LD_VAR 0 2
68058: PUSH
68059: LD_INT 1
68061: PLUS
68062: PPUSH
68063: LD_VAR 0 1
68067: PUSH
68068: LD_VAR 0 4
68072: ARRAY
68073: PPUSH
68074: CALL_OW 2
68078: ST_TO_ADDR
// array := Delete ( array , index ) ;
68079: LD_ADDR_VAR 0 1
68083: PUSH
68084: LD_VAR 0 1
68088: PPUSH
68089: LD_VAR 0 4
68093: PPUSH
68094: CALL_OW 3
68098: ST_TO_ADDR
// end ;
68099: GO 68023
68101: POP
68102: POP
// end ;
68103: LD_VAR 0 2
68107: RET
// export function GetBaseMaterials ( base ) ; begin
68108: LD_INT 0
68110: PPUSH
// result := [ 0 , 0 , 0 ] ;
68111: LD_ADDR_VAR 0 2
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: LD_INT 0
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: LIST
68129: ST_TO_ADDR
// if not base then
68130: LD_VAR 0 1
68134: NOT
68135: IFFALSE 68139
// exit ;
68137: GO 68188
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68139: LD_ADDR_VAR 0 2
68143: PUSH
68144: LD_VAR 0 1
68148: PPUSH
68149: LD_INT 1
68151: PPUSH
68152: CALL_OW 275
68156: PUSH
68157: LD_VAR 0 1
68161: PPUSH
68162: LD_INT 2
68164: PPUSH
68165: CALL_OW 275
68169: PUSH
68170: LD_VAR 0 1
68174: PPUSH
68175: LD_INT 3
68177: PPUSH
68178: CALL_OW 275
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: LIST
68187: ST_TO_ADDR
// end ;
68188: LD_VAR 0 2
68192: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68193: LD_INT 0
68195: PPUSH
68196: PPUSH
// result := array ;
68197: LD_ADDR_VAR 0 3
68201: PUSH
68202: LD_VAR 0 1
68206: ST_TO_ADDR
// if size >= result then
68207: LD_VAR 0 2
68211: PUSH
68212: LD_VAR 0 3
68216: GREATEREQUAL
68217: IFFALSE 68221
// exit ;
68219: GO 68271
// if size then
68221: LD_VAR 0 2
68225: IFFALSE 68271
// for i := array downto size do
68227: LD_ADDR_VAR 0 4
68231: PUSH
68232: DOUBLE
68233: LD_VAR 0 1
68237: INC
68238: ST_TO_ADDR
68239: LD_VAR 0 2
68243: PUSH
68244: FOR_DOWNTO
68245: IFFALSE 68269
// result := Delete ( result , result ) ;
68247: LD_ADDR_VAR 0 3
68251: PUSH
68252: LD_VAR 0 3
68256: PPUSH
68257: LD_VAR 0 3
68261: PPUSH
68262: CALL_OW 3
68266: ST_TO_ADDR
68267: GO 68244
68269: POP
68270: POP
// end ;
68271: LD_VAR 0 3
68275: RET
// export function ComExit ( unit ) ; var tmp ; begin
68276: LD_INT 0
68278: PPUSH
68279: PPUSH
// if not IsInUnit ( unit ) then
68280: LD_VAR 0 1
68284: PPUSH
68285: CALL_OW 310
68289: NOT
68290: IFFALSE 68294
// exit ;
68292: GO 68354
// tmp := IsInUnit ( unit ) ;
68294: LD_ADDR_VAR 0 3
68298: PUSH
68299: LD_VAR 0 1
68303: PPUSH
68304: CALL_OW 310
68308: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68309: LD_VAR 0 3
68313: PPUSH
68314: CALL_OW 247
68318: PUSH
68319: LD_INT 2
68321: EQUAL
68322: IFFALSE 68335
// ComExitVehicle ( unit ) else
68324: LD_VAR 0 1
68328: PPUSH
68329: CALL_OW 121
68333: GO 68344
// ComExitBuilding ( unit ) ;
68335: LD_VAR 0 1
68339: PPUSH
68340: CALL_OW 122
// result := tmp ;
68344: LD_ADDR_VAR 0 2
68348: PUSH
68349: LD_VAR 0 3
68353: ST_TO_ADDR
// end ;
68354: LD_VAR 0 2
68358: RET
// export function ComExitAll ( units ) ; var i ; begin
68359: LD_INT 0
68361: PPUSH
68362: PPUSH
// if not units then
68363: LD_VAR 0 1
68367: NOT
68368: IFFALSE 68372
// exit ;
68370: GO 68398
// for i in units do
68372: LD_ADDR_VAR 0 3
68376: PUSH
68377: LD_VAR 0 1
68381: PUSH
68382: FOR_IN
68383: IFFALSE 68396
// ComExit ( i ) ;
68385: LD_VAR 0 3
68389: PPUSH
68390: CALL 68276 0 1
68394: GO 68382
68396: POP
68397: POP
// end ;
68398: LD_VAR 0 2
68402: RET
// export function ResetHc ; begin
68403: LD_INT 0
68405: PPUSH
// InitHc ;
68406: CALL_OW 19
// hc_importance := 0 ;
68410: LD_ADDR_OWVAR 32
68414: PUSH
68415: LD_INT 0
68417: ST_TO_ADDR
// end ;
68418: LD_VAR 0 1
68422: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68423: LD_INT 0
68425: PPUSH
68426: PPUSH
68427: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68428: LD_ADDR_VAR 0 6
68432: PUSH
68433: LD_VAR 0 1
68437: PUSH
68438: LD_VAR 0 3
68442: PLUS
68443: PUSH
68444: LD_INT 2
68446: DIV
68447: ST_TO_ADDR
// if _x < 0 then
68448: LD_VAR 0 6
68452: PUSH
68453: LD_INT 0
68455: LESS
68456: IFFALSE 68473
// _x := _x * - 1 ;
68458: LD_ADDR_VAR 0 6
68462: PUSH
68463: LD_VAR 0 6
68467: PUSH
68468: LD_INT 1
68470: NEG
68471: MUL
68472: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68473: LD_ADDR_VAR 0 7
68477: PUSH
68478: LD_VAR 0 2
68482: PUSH
68483: LD_VAR 0 4
68487: PLUS
68488: PUSH
68489: LD_INT 2
68491: DIV
68492: ST_TO_ADDR
// if _y < 0 then
68493: LD_VAR 0 7
68497: PUSH
68498: LD_INT 0
68500: LESS
68501: IFFALSE 68518
// _y := _y * - 1 ;
68503: LD_ADDR_VAR 0 7
68507: PUSH
68508: LD_VAR 0 7
68512: PUSH
68513: LD_INT 1
68515: NEG
68516: MUL
68517: ST_TO_ADDR
// result := [ _x , _y ] ;
68518: LD_ADDR_VAR 0 5
68522: PUSH
68523: LD_VAR 0 6
68527: PUSH
68528: LD_VAR 0 7
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: ST_TO_ADDR
// end ;
68537: LD_VAR 0 5
68541: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68542: LD_INT 0
68544: PPUSH
68545: PPUSH
68546: PPUSH
68547: PPUSH
// task := GetTaskList ( unit ) ;
68548: LD_ADDR_VAR 0 7
68552: PUSH
68553: LD_VAR 0 1
68557: PPUSH
68558: CALL_OW 437
68562: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68563: LD_VAR 0 7
68567: NOT
68568: IFFALSE 68587
68570: PUSH
68571: LD_VAR 0 1
68575: PPUSH
68576: LD_VAR 0 2
68580: PPUSH
68581: CALL_OW 308
68585: NOT
68586: AND
68587: IFFALSE 68591
// exit ;
68589: GO 68709
// if IsInArea ( unit , area ) then
68591: LD_VAR 0 1
68595: PPUSH
68596: LD_VAR 0 2
68600: PPUSH
68601: CALL_OW 308
68605: IFFALSE 68623
// begin ComMoveToArea ( unit , goAway ) ;
68607: LD_VAR 0 1
68611: PPUSH
68612: LD_VAR 0 3
68616: PPUSH
68617: CALL_OW 113
// exit ;
68621: GO 68709
// end ; if task [ 1 ] [ 1 ] <> M then
68623: LD_VAR 0 7
68627: PUSH
68628: LD_INT 1
68630: ARRAY
68631: PUSH
68632: LD_INT 1
68634: ARRAY
68635: PUSH
68636: LD_STRING M
68638: NONEQUAL
68639: IFFALSE 68643
// exit ;
68641: GO 68709
// x := task [ 1 ] [ 2 ] ;
68643: LD_ADDR_VAR 0 5
68647: PUSH
68648: LD_VAR 0 7
68652: PUSH
68653: LD_INT 1
68655: ARRAY
68656: PUSH
68657: LD_INT 2
68659: ARRAY
68660: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68661: LD_ADDR_VAR 0 6
68665: PUSH
68666: LD_VAR 0 7
68670: PUSH
68671: LD_INT 1
68673: ARRAY
68674: PUSH
68675: LD_INT 3
68677: ARRAY
68678: ST_TO_ADDR
// if InArea ( x , y , area ) then
68679: LD_VAR 0 5
68683: PPUSH
68684: LD_VAR 0 6
68688: PPUSH
68689: LD_VAR 0 2
68693: PPUSH
68694: CALL_OW 309
68698: IFFALSE 68709
// ComStop ( unit ) ;
68700: LD_VAR 0 1
68704: PPUSH
68705: CALL_OW 141
// end ;
68709: LD_VAR 0 4
68713: RET
// export function Abs ( value ) ; begin
68714: LD_INT 0
68716: PPUSH
// result := value ;
68717: LD_ADDR_VAR 0 2
68721: PUSH
68722: LD_VAR 0 1
68726: ST_TO_ADDR
// if value < 0 then
68727: LD_VAR 0 1
68731: PUSH
68732: LD_INT 0
68734: LESS
68735: IFFALSE 68752
// result := value * - 1 ;
68737: LD_ADDR_VAR 0 2
68741: PUSH
68742: LD_VAR 0 1
68746: PUSH
68747: LD_INT 1
68749: NEG
68750: MUL
68751: ST_TO_ADDR
// end ;
68752: LD_VAR 0 2
68756: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68757: LD_INT 0
68759: PPUSH
68760: PPUSH
68761: PPUSH
68762: PPUSH
68763: PPUSH
68764: PPUSH
68765: PPUSH
68766: PPUSH
// if not unit or not building then
68767: LD_VAR 0 1
68771: NOT
68772: IFTRUE 68781
68774: PUSH
68775: LD_VAR 0 2
68779: NOT
68780: OR
68781: IFFALSE 68785
// exit ;
68783: GO 69013
// x := GetX ( building ) ;
68785: LD_ADDR_VAR 0 4
68789: PUSH
68790: LD_VAR 0 2
68794: PPUSH
68795: CALL_OW 250
68799: ST_TO_ADDR
// y := GetY ( building ) ;
68800: LD_ADDR_VAR 0 6
68804: PUSH
68805: LD_VAR 0 2
68809: PPUSH
68810: CALL_OW 251
68814: ST_TO_ADDR
// d := GetDir ( building ) ;
68815: LD_ADDR_VAR 0 8
68819: PUSH
68820: LD_VAR 0 2
68824: PPUSH
68825: CALL_OW 254
68829: ST_TO_ADDR
// r := 4 ;
68830: LD_ADDR_VAR 0 9
68834: PUSH
68835: LD_INT 4
68837: ST_TO_ADDR
// for i := 1 to 5 do
68838: LD_ADDR_VAR 0 10
68842: PUSH
68843: DOUBLE
68844: LD_INT 1
68846: DEC
68847: ST_TO_ADDR
68848: LD_INT 5
68850: PUSH
68851: FOR_TO
68852: IFFALSE 69011
// begin _x := ShiftX ( x , d , r + i ) ;
68854: LD_ADDR_VAR 0 5
68858: PUSH
68859: LD_VAR 0 4
68863: PPUSH
68864: LD_VAR 0 8
68868: PPUSH
68869: LD_VAR 0 9
68873: PUSH
68874: LD_VAR 0 10
68878: PLUS
68879: PPUSH
68880: CALL_OW 272
68884: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68885: LD_ADDR_VAR 0 7
68889: PUSH
68890: LD_VAR 0 6
68894: PPUSH
68895: LD_VAR 0 8
68899: PPUSH
68900: LD_VAR 0 9
68904: PUSH
68905: LD_VAR 0 10
68909: PLUS
68910: PPUSH
68911: CALL_OW 273
68915: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68916: LD_VAR 0 5
68920: PPUSH
68921: LD_VAR 0 7
68925: PPUSH
68926: CALL_OW 488
68930: IFFALSE 68965
68932: PUSH
68933: LD_VAR 0 5
68937: PPUSH
68938: LD_VAR 0 7
68942: PPUSH
68943: CALL_OW 428
68947: PPUSH
68948: CALL_OW 247
68952: PUSH
68953: LD_INT 3
68955: PUSH
68956: LD_INT 2
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: IN
68963: NOT
68964: AND
68965: IFFALSE 69009
// begin ComMoveXY ( unit , _x , _y ) ;
68967: LD_VAR 0 1
68971: PPUSH
68972: LD_VAR 0 5
68976: PPUSH
68977: LD_VAR 0 7
68981: PPUSH
68982: CALL_OW 111
// result := [ _x , _y ] ;
68986: LD_ADDR_VAR 0 3
68990: PUSH
68991: LD_VAR 0 5
68995: PUSH
68996: LD_VAR 0 7
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: ST_TO_ADDR
// exit ;
69005: POP
69006: POP
69007: GO 69013
// end ; end ;
69009: GO 68851
69011: POP
69012: POP
// end ;
69013: LD_VAR 0 3
69017: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69018: LD_INT 0
69020: PPUSH
69021: PPUSH
69022: PPUSH
// result := 0 ;
69023: LD_ADDR_VAR 0 3
69027: PUSH
69028: LD_INT 0
69030: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69031: LD_VAR 0 1
69035: PUSH
69036: LD_INT 0
69038: LESS
69039: IFTRUE 69051
69041: PUSH
69042: LD_VAR 0 1
69046: PUSH
69047: LD_INT 8
69049: GREATER
69050: OR
69051: IFTRUE 69063
69053: PUSH
69054: LD_VAR 0 2
69058: PUSH
69059: LD_INT 0
69061: LESS
69062: OR
69063: IFTRUE 69075
69065: PUSH
69066: LD_VAR 0 2
69070: PUSH
69071: LD_INT 8
69073: GREATER
69074: OR
69075: IFFALSE 69079
// exit ;
69077: GO 69154
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69079: LD_ADDR_VAR 0 4
69083: PUSH
69084: LD_INT 22
69086: PUSH
69087: LD_VAR 0 2
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PPUSH
69096: CALL_OW 69
69100: PUSH
69101: FOR_IN
69102: IFFALSE 69152
// begin un := UnitShoot ( i ) ;
69104: LD_ADDR_VAR 0 5
69108: PUSH
69109: LD_VAR 0 4
69113: PPUSH
69114: CALL_OW 504
69118: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69119: LD_VAR 0 5
69123: PPUSH
69124: CALL_OW 255
69128: PUSH
69129: LD_VAR 0 1
69133: EQUAL
69134: IFFALSE 69150
// begin result := un ;
69136: LD_ADDR_VAR 0 3
69140: PUSH
69141: LD_VAR 0 5
69145: ST_TO_ADDR
// exit ;
69146: POP
69147: POP
69148: GO 69154
// end ; end ;
69150: GO 69101
69152: POP
69153: POP
// end ;
69154: LD_VAR 0 3
69158: RET
// export function GetCargoBay ( units ) ; begin
69159: LD_INT 0
69161: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69162: LD_ADDR_VAR 0 2
69166: PUSH
69167: LD_VAR 0 1
69171: PPUSH
69172: LD_INT 2
69174: PUSH
69175: LD_INT 34
69177: PUSH
69178: LD_INT 12
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 34
69187: PUSH
69188: LD_INT 51
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 34
69197: PUSH
69198: LD_INT 32
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 34
69207: PUSH
69208: LD_INT 89
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: PPUSH
69222: CALL_OW 72
69226: ST_TO_ADDR
// end ;
69227: LD_VAR 0 2
69231: RET
// export function Negate ( value ) ; begin
69232: LD_INT 0
69234: PPUSH
// result := not value ;
69235: LD_ADDR_VAR 0 2
69239: PUSH
69240: LD_VAR 0 1
69244: NOT
69245: ST_TO_ADDR
// end ;
69246: LD_VAR 0 2
69250: RET
// export function Inc ( value ) ; begin
69251: LD_INT 0
69253: PPUSH
// result := value + 1 ;
69254: LD_ADDR_VAR 0 2
69258: PUSH
69259: LD_VAR 0 1
69263: PUSH
69264: LD_INT 1
69266: PLUS
69267: ST_TO_ADDR
// end ;
69268: LD_VAR 0 2
69272: RET
// export function Dec ( value ) ; begin
69273: LD_INT 0
69275: PPUSH
// result := value - 1 ;
69276: LD_ADDR_VAR 0 2
69280: PUSH
69281: LD_VAR 0 1
69285: PUSH
69286: LD_INT 1
69288: MINUS
69289: ST_TO_ADDR
// end ;
69290: LD_VAR 0 2
69294: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69295: LD_INT 0
69297: PPUSH
69298: PPUSH
69299: PPUSH
69300: PPUSH
69301: PPUSH
69302: PPUSH
69303: PPUSH
69304: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69305: LD_VAR 0 1
69309: PPUSH
69310: LD_VAR 0 2
69314: PPUSH
69315: CALL_OW 488
69319: NOT
69320: IFTRUE 69339
69322: PUSH
69323: LD_VAR 0 3
69327: PPUSH
69328: LD_VAR 0 4
69332: PPUSH
69333: CALL_OW 488
69337: NOT
69338: OR
69339: IFFALSE 69352
// begin result := - 1 ;
69341: LD_ADDR_VAR 0 5
69345: PUSH
69346: LD_INT 1
69348: NEG
69349: ST_TO_ADDR
// exit ;
69350: GO 69587
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69352: LD_ADDR_VAR 0 12
69356: PUSH
69357: LD_VAR 0 1
69361: PPUSH
69362: LD_VAR 0 2
69366: PPUSH
69367: LD_VAR 0 3
69371: PPUSH
69372: LD_VAR 0 4
69376: PPUSH
69377: CALL 68423 0 4
69381: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69382: LD_ADDR_VAR 0 11
69386: PUSH
69387: LD_VAR 0 1
69391: PPUSH
69392: LD_VAR 0 2
69396: PPUSH
69397: LD_VAR 0 12
69401: PUSH
69402: LD_INT 1
69404: ARRAY
69405: PPUSH
69406: LD_VAR 0 12
69410: PUSH
69411: LD_INT 2
69413: ARRAY
69414: PPUSH
69415: CALL_OW 298
69419: ST_TO_ADDR
// distance := 9999 ;
69420: LD_ADDR_VAR 0 10
69424: PUSH
69425: LD_INT 9999
69427: ST_TO_ADDR
// for i := 0 to 5 do
69428: LD_ADDR_VAR 0 6
69432: PUSH
69433: DOUBLE
69434: LD_INT 0
69436: DEC
69437: ST_TO_ADDR
69438: LD_INT 5
69440: PUSH
69441: FOR_TO
69442: IFFALSE 69585
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69444: LD_ADDR_VAR 0 7
69448: PUSH
69449: LD_VAR 0 1
69453: PPUSH
69454: LD_VAR 0 6
69458: PPUSH
69459: LD_VAR 0 11
69463: PPUSH
69464: CALL_OW 272
69468: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69469: LD_ADDR_VAR 0 8
69473: PUSH
69474: LD_VAR 0 2
69478: PPUSH
69479: LD_VAR 0 6
69483: PPUSH
69484: LD_VAR 0 11
69488: PPUSH
69489: CALL_OW 273
69493: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69494: LD_VAR 0 7
69498: PPUSH
69499: LD_VAR 0 8
69503: PPUSH
69504: CALL_OW 488
69508: NOT
69509: IFFALSE 69513
// continue ;
69511: GO 69441
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69513: LD_ADDR_VAR 0 9
69517: PUSH
69518: LD_VAR 0 12
69522: PUSH
69523: LD_INT 1
69525: ARRAY
69526: PPUSH
69527: LD_VAR 0 12
69531: PUSH
69532: LD_INT 2
69534: ARRAY
69535: PPUSH
69536: LD_VAR 0 7
69540: PPUSH
69541: LD_VAR 0 8
69545: PPUSH
69546: CALL_OW 298
69550: ST_TO_ADDR
// if tmp < distance then
69551: LD_VAR 0 9
69555: PUSH
69556: LD_VAR 0 10
69560: LESS
69561: IFFALSE 69583
// begin result := i ;
69563: LD_ADDR_VAR 0 5
69567: PUSH
69568: LD_VAR 0 6
69572: ST_TO_ADDR
// distance := tmp ;
69573: LD_ADDR_VAR 0 10
69577: PUSH
69578: LD_VAR 0 9
69582: ST_TO_ADDR
// end ; end ;
69583: GO 69441
69585: POP
69586: POP
// end ;
69587: LD_VAR 0 5
69591: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69592: LD_INT 0
69594: PPUSH
69595: PPUSH
// if not driver or not IsInUnit ( driver ) then
69596: LD_VAR 0 1
69600: NOT
69601: IFTRUE 69615
69603: PUSH
69604: LD_VAR 0 1
69608: PPUSH
69609: CALL_OW 310
69613: NOT
69614: OR
69615: IFFALSE 69619
// exit ;
69617: GO 69709
// vehicle := IsInUnit ( driver ) ;
69619: LD_ADDR_VAR 0 3
69623: PUSH
69624: LD_VAR 0 1
69628: PPUSH
69629: CALL_OW 310
69633: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69634: LD_VAR 0 1
69638: PPUSH
69639: LD_STRING \
69641: PUSH
69642: LD_INT 0
69644: PUSH
69645: LD_INT 0
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: LD_INT 0
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: PUSH
69669: LD_STRING E
69671: PUSH
69672: LD_INT 0
69674: PUSH
69675: LD_INT 0
69677: PUSH
69678: LD_VAR 0 3
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PPUSH
69705: CALL_OW 446
// end ;
69709: LD_VAR 0 2
69713: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69714: LD_INT 0
69716: PPUSH
69717: PPUSH
// if not driver or not IsInUnit ( driver ) then
69718: LD_VAR 0 1
69722: NOT
69723: IFTRUE 69737
69725: PUSH
69726: LD_VAR 0 1
69730: PPUSH
69731: CALL_OW 310
69735: NOT
69736: OR
69737: IFFALSE 69741
// exit ;
69739: GO 69831
// vehicle := IsInUnit ( driver ) ;
69741: LD_ADDR_VAR 0 3
69745: PUSH
69746: LD_VAR 0 1
69750: PPUSH
69751: CALL_OW 310
69755: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69756: LD_VAR 0 1
69760: PPUSH
69761: LD_STRING \
69763: PUSH
69764: LD_INT 0
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: LD_INT 0
69778: PUSH
69779: LD_INT 0
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: PUSH
69791: LD_STRING E
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: LD_INT 0
69799: PUSH
69800: LD_VAR 0 3
69804: PUSH
69805: LD_INT 0
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: LD_INT 0
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PPUSH
69827: CALL_OW 447
// end ;
69831: LD_VAR 0 2
69835: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69836: LD_INT 0
69838: PPUSH
69839: PPUSH
69840: PPUSH
// tmp := [ ] ;
69841: LD_ADDR_VAR 0 5
69845: PUSH
69846: EMPTY
69847: ST_TO_ADDR
// for i in units do
69848: LD_ADDR_VAR 0 4
69852: PUSH
69853: LD_VAR 0 1
69857: PUSH
69858: FOR_IN
69859: IFFALSE 69897
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69861: LD_ADDR_VAR 0 5
69865: PUSH
69866: LD_VAR 0 5
69870: PPUSH
69871: LD_VAR 0 5
69875: PUSH
69876: LD_INT 1
69878: PLUS
69879: PPUSH
69880: LD_VAR 0 4
69884: PPUSH
69885: CALL_OW 256
69889: PPUSH
69890: CALL_OW 2
69894: ST_TO_ADDR
69895: GO 69858
69897: POP
69898: POP
// if not tmp then
69899: LD_VAR 0 5
69903: NOT
69904: IFFALSE 69908
// exit ;
69906: GO 69956
// if asc then
69908: LD_VAR 0 2
69912: IFFALSE 69936
// result := SortListByListAsc ( units , tmp ) else
69914: LD_ADDR_VAR 0 3
69918: PUSH
69919: LD_VAR 0 1
69923: PPUSH
69924: LD_VAR 0 5
69928: PPUSH
69929: CALL_OW 76
69933: ST_TO_ADDR
69934: GO 69956
// result := SortListByListDesc ( units , tmp ) ;
69936: LD_ADDR_VAR 0 3
69940: PUSH
69941: LD_VAR 0 1
69945: PPUSH
69946: LD_VAR 0 5
69950: PPUSH
69951: CALL_OW 77
69955: ST_TO_ADDR
// end ;
69956: LD_VAR 0 3
69960: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69961: LD_INT 0
69963: PPUSH
69964: PPUSH
// task := GetTaskList ( mech ) ;
69965: LD_ADDR_VAR 0 4
69969: PUSH
69970: LD_VAR 0 1
69974: PPUSH
69975: CALL_OW 437
69979: ST_TO_ADDR
// if not task then
69980: LD_VAR 0 4
69984: NOT
69985: IFFALSE 69989
// exit ;
69987: GO 70033
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69989: LD_ADDR_VAR 0 3
69993: PUSH
69994: LD_VAR 0 4
69998: PUSH
69999: LD_INT 1
70001: ARRAY
70002: PUSH
70003: LD_INT 1
70005: ARRAY
70006: PUSH
70007: LD_STRING r
70009: EQUAL
70010: IFFALSE 70032
70012: PUSH
70013: LD_VAR 0 4
70017: PUSH
70018: LD_INT 1
70020: ARRAY
70021: PUSH
70022: LD_INT 4
70024: ARRAY
70025: PUSH
70026: LD_VAR 0 2
70030: EQUAL
70031: AND
70032: ST_TO_ADDR
// end ;
70033: LD_VAR 0 3
70037: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70038: LD_INT 0
70040: PPUSH
// SetDir ( unit , d ) ;
70041: LD_VAR 0 1
70045: PPUSH
70046: LD_VAR 0 4
70050: PPUSH
70051: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70055: LD_ADDR_VAR 0 6
70059: PUSH
70060: LD_VAR 0 1
70064: PPUSH
70065: LD_VAR 0 2
70069: PPUSH
70070: LD_VAR 0 3
70074: PPUSH
70075: LD_VAR 0 5
70079: PPUSH
70080: CALL_OW 48
70084: ST_TO_ADDR
// end ;
70085: LD_VAR 0 6
70089: RET
// export function ToNaturalNumber ( number ) ; begin
70090: LD_INT 0
70092: PPUSH
// result := number div 1 ;
70093: LD_ADDR_VAR 0 2
70097: PUSH
70098: LD_VAR 0 1
70102: PUSH
70103: LD_INT 1
70105: DIV
70106: ST_TO_ADDR
// if number < 0 then
70107: LD_VAR 0 1
70111: PUSH
70112: LD_INT 0
70114: LESS
70115: IFFALSE 70125
// result := 0 ;
70117: LD_ADDR_VAR 0 2
70121: PUSH
70122: LD_INT 0
70124: ST_TO_ADDR
// end ;
70125: LD_VAR 0 2
70129: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70130: LD_INT 0
70132: PPUSH
70133: PPUSH
70134: PPUSH
// if not buildings then
70135: LD_VAR 0 1
70139: NOT
70140: IFFALSE 70144
// exit ;
70142: GO 70259
// tmp := [ ] ;
70144: LD_ADDR_VAR 0 5
70148: PUSH
70149: EMPTY
70150: ST_TO_ADDR
// for b in buildings do
70151: LD_ADDR_VAR 0 4
70155: PUSH
70156: LD_VAR 0 1
70160: PUSH
70161: FOR_IN
70162: IFFALSE 70200
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70164: LD_ADDR_VAR 0 5
70168: PUSH
70169: LD_VAR 0 5
70173: PPUSH
70174: LD_VAR 0 5
70178: PUSH
70179: LD_INT 1
70181: PLUS
70182: PPUSH
70183: LD_VAR 0 4
70187: PPUSH
70188: CALL_OW 266
70192: PPUSH
70193: CALL_OW 1
70197: ST_TO_ADDR
70198: GO 70161
70200: POP
70201: POP
// if not tmp then
70202: LD_VAR 0 5
70206: NOT
70207: IFFALSE 70211
// exit ;
70209: GO 70259
// if asc then
70211: LD_VAR 0 2
70215: IFFALSE 70239
// result := SortListByListAsc ( buildings , tmp ) else
70217: LD_ADDR_VAR 0 3
70221: PUSH
70222: LD_VAR 0 1
70226: PPUSH
70227: LD_VAR 0 5
70231: PPUSH
70232: CALL_OW 76
70236: ST_TO_ADDR
70237: GO 70259
// result := SortListByListDesc ( buildings , tmp ) ;
70239: LD_ADDR_VAR 0 3
70243: PUSH
70244: LD_VAR 0 1
70248: PPUSH
70249: LD_VAR 0 5
70253: PPUSH
70254: CALL_OW 77
70258: ST_TO_ADDR
// end ;
70259: LD_VAR 0 3
70263: RET
// export function SortByClass ( units , class ) ; var un ; begin
70264: LD_INT 0
70266: PPUSH
70267: PPUSH
// if not units or not class then
70268: LD_VAR 0 1
70272: NOT
70273: IFTRUE 70282
70275: PUSH
70276: LD_VAR 0 2
70280: NOT
70281: OR
70282: IFFALSE 70286
// exit ;
70284: GO 70381
// result := [ ] ;
70286: LD_ADDR_VAR 0 3
70290: PUSH
70291: EMPTY
70292: ST_TO_ADDR
// for un in units do
70293: LD_ADDR_VAR 0 4
70297: PUSH
70298: LD_VAR 0 1
70302: PUSH
70303: FOR_IN
70304: IFFALSE 70379
// if GetClass ( un ) = class then
70306: LD_VAR 0 4
70310: PPUSH
70311: CALL_OW 257
70315: PUSH
70316: LD_VAR 0 2
70320: EQUAL
70321: IFFALSE 70348
// result := Insert ( result , 1 , un ) else
70323: LD_ADDR_VAR 0 3
70327: PUSH
70328: LD_VAR 0 3
70332: PPUSH
70333: LD_INT 1
70335: PPUSH
70336: LD_VAR 0 4
70340: PPUSH
70341: CALL_OW 2
70345: ST_TO_ADDR
70346: GO 70377
// result := Replace ( result , result + 1 , un ) ;
70348: LD_ADDR_VAR 0 3
70352: PUSH
70353: LD_VAR 0 3
70357: PPUSH
70358: LD_VAR 0 3
70362: PUSH
70363: LD_INT 1
70365: PLUS
70366: PPUSH
70367: LD_VAR 0 4
70371: PPUSH
70372: CALL_OW 1
70376: ST_TO_ADDR
70377: GO 70303
70379: POP
70380: POP
// end ;
70381: LD_VAR 0 3
70385: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70386: LD_INT 0
70388: PPUSH
70389: PPUSH
70390: PPUSH
70391: PPUSH
70392: PPUSH
70393: PPUSH
70394: PPUSH
// result := [ ] ;
70395: LD_ADDR_VAR 0 4
70399: PUSH
70400: EMPTY
70401: ST_TO_ADDR
// if x - r < 0 then
70402: LD_VAR 0 1
70406: PUSH
70407: LD_VAR 0 3
70411: MINUS
70412: PUSH
70413: LD_INT 0
70415: LESS
70416: IFFALSE 70428
// min_x := 0 else
70418: LD_ADDR_VAR 0 8
70422: PUSH
70423: LD_INT 0
70425: ST_TO_ADDR
70426: GO 70444
// min_x := x - r ;
70428: LD_ADDR_VAR 0 8
70432: PUSH
70433: LD_VAR 0 1
70437: PUSH
70438: LD_VAR 0 3
70442: MINUS
70443: ST_TO_ADDR
// if y - r < 0 then
70444: LD_VAR 0 2
70448: PUSH
70449: LD_VAR 0 3
70453: MINUS
70454: PUSH
70455: LD_INT 0
70457: LESS
70458: IFFALSE 70470
// min_y := 0 else
70460: LD_ADDR_VAR 0 7
70464: PUSH
70465: LD_INT 0
70467: ST_TO_ADDR
70468: GO 70486
// min_y := y - r ;
70470: LD_ADDR_VAR 0 7
70474: PUSH
70475: LD_VAR 0 2
70479: PUSH
70480: LD_VAR 0 3
70484: MINUS
70485: ST_TO_ADDR
// max_x := x + r ;
70486: LD_ADDR_VAR 0 9
70490: PUSH
70491: LD_VAR 0 1
70495: PUSH
70496: LD_VAR 0 3
70500: PLUS
70501: ST_TO_ADDR
// max_y := y + r ;
70502: LD_ADDR_VAR 0 10
70506: PUSH
70507: LD_VAR 0 2
70511: PUSH
70512: LD_VAR 0 3
70516: PLUS
70517: ST_TO_ADDR
// for _x = min_x to max_x do
70518: LD_ADDR_VAR 0 5
70522: PUSH
70523: DOUBLE
70524: LD_VAR 0 8
70528: DEC
70529: ST_TO_ADDR
70530: LD_VAR 0 9
70534: PUSH
70535: FOR_TO
70536: IFFALSE 70637
// for _y = min_y to max_y do
70538: LD_ADDR_VAR 0 6
70542: PUSH
70543: DOUBLE
70544: LD_VAR 0 7
70548: DEC
70549: ST_TO_ADDR
70550: LD_VAR 0 10
70554: PUSH
70555: FOR_TO
70556: IFFALSE 70633
// begin if not ValidHex ( _x , _y ) then
70558: LD_VAR 0 5
70562: PPUSH
70563: LD_VAR 0 6
70567: PPUSH
70568: CALL_OW 488
70572: NOT
70573: IFFALSE 70577
// continue ;
70575: GO 70555
// if GetResourceTypeXY ( _x , _y ) then
70577: LD_VAR 0 5
70581: PPUSH
70582: LD_VAR 0 6
70586: PPUSH
70587: CALL_OW 283
70591: IFFALSE 70631
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70593: LD_ADDR_VAR 0 4
70597: PUSH
70598: LD_VAR 0 4
70602: PPUSH
70603: LD_VAR 0 4
70607: PUSH
70608: LD_INT 1
70610: PLUS
70611: PPUSH
70612: LD_VAR 0 5
70616: PUSH
70617: LD_VAR 0 6
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PPUSH
70626: CALL_OW 1
70630: ST_TO_ADDR
// end ;
70631: GO 70555
70633: POP
70634: POP
70635: GO 70535
70637: POP
70638: POP
// end ;
70639: LD_VAR 0 4
70643: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70644: LD_INT 0
70646: PPUSH
70647: PPUSH
70648: PPUSH
70649: PPUSH
70650: PPUSH
70651: PPUSH
70652: PPUSH
70653: PPUSH
// if not units then
70654: LD_VAR 0 1
70658: NOT
70659: IFFALSE 70663
// exit ;
70661: GO 71195
// result := UnitFilter ( units , [ f_ok ] ) ;
70663: LD_ADDR_VAR 0 3
70667: PUSH
70668: LD_VAR 0 1
70672: PPUSH
70673: LD_INT 50
70675: PUSH
70676: EMPTY
70677: LIST
70678: PPUSH
70679: CALL_OW 72
70683: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70684: LD_ADDR_VAR 0 8
70688: PUSH
70689: LD_VAR 0 1
70693: PUSH
70694: LD_INT 1
70696: ARRAY
70697: PPUSH
70698: CALL_OW 255
70702: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70703: LD_ADDR_VAR 0 10
70707: PUSH
70708: LD_INT 29
70710: PUSH
70711: LD_INT 91
70713: PUSH
70714: LD_INT 49
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: LIST
70721: ST_TO_ADDR
// if not result then
70722: LD_VAR 0 3
70726: NOT
70727: IFFALSE 70731
// exit ;
70729: GO 71195
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70731: LD_ADDR_VAR 0 5
70735: PUSH
70736: LD_INT 81
70738: PUSH
70739: LD_VAR 0 8
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PPUSH
70748: CALL_OW 69
70752: ST_TO_ADDR
// for i in result do
70753: LD_ADDR_VAR 0 4
70757: PUSH
70758: LD_VAR 0 3
70762: PUSH
70763: FOR_IN
70764: IFFALSE 71193
// begin tag := GetTag ( i ) + 1 ;
70766: LD_ADDR_VAR 0 9
70770: PUSH
70771: LD_VAR 0 4
70775: PPUSH
70776: CALL_OW 110
70780: PUSH
70781: LD_INT 1
70783: PLUS
70784: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
70785: LD_ADDR_VAR 0 7
70789: PUSH
70790: LD_VAR 0 4
70794: PPUSH
70795: CALL_OW 250
70799: PPUSH
70800: LD_VAR 0 4
70804: PPUSH
70805: CALL_OW 251
70809: PPUSH
70810: LD_INT 4
70812: PPUSH
70813: CALL 70386 0 3
70817: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
70818: LD_VAR 0 4
70822: PPUSH
70823: CALL_OW 247
70827: PUSH
70828: LD_INT 2
70830: EQUAL
70831: IFFALSE 70843
70833: PUSH
70834: LD_VAR 0 7
70838: PUSH
70839: LD_INT 2
70841: GREATER
70842: AND
70843: IFFALSE 70863
70845: PUSH
70846: LD_VAR 0 4
70850: PPUSH
70851: CALL_OW 264
70855: PUSH
70856: LD_VAR 0 10
70860: IN
70861: NOT
70862: AND
70863: IFFALSE 70902
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70865: LD_VAR 0 4
70869: PPUSH
70870: LD_VAR 0 7
70874: PUSH
70875: LD_INT 1
70877: ARRAY
70878: PUSH
70879: LD_INT 1
70881: ARRAY
70882: PPUSH
70883: LD_VAR 0 7
70887: PUSH
70888: LD_INT 1
70890: ARRAY
70891: PUSH
70892: LD_INT 2
70894: ARRAY
70895: PPUSH
70896: CALL_OW 116
70900: GO 71191
// if path > tag then
70902: LD_VAR 0 2
70906: PUSH
70907: LD_VAR 0 9
70911: GREATER
70912: IFFALSE 71120
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70914: LD_ADDR_VAR 0 6
70918: PUSH
70919: LD_VAR 0 5
70923: PPUSH
70924: LD_INT 91
70926: PUSH
70927: LD_VAR 0 4
70931: PUSH
70932: LD_INT 8
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: LIST
70939: PPUSH
70940: CALL_OW 72
70944: ST_TO_ADDR
// if nearEnemy then
70945: LD_VAR 0 6
70949: IFFALSE 71018
// begin if GetWeapon ( i ) = ru_time_lapser then
70951: LD_VAR 0 4
70955: PPUSH
70956: CALL_OW 264
70960: PUSH
70961: LD_INT 49
70963: EQUAL
70964: IFFALSE 70992
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70966: LD_VAR 0 4
70970: PPUSH
70971: LD_VAR 0 6
70975: PPUSH
70976: LD_VAR 0 4
70980: PPUSH
70981: CALL_OW 74
70985: PPUSH
70986: CALL_OW 112
70990: GO 71016
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70992: LD_VAR 0 4
70996: PPUSH
70997: LD_VAR 0 6
71001: PPUSH
71002: LD_VAR 0 4
71006: PPUSH
71007: CALL_OW 74
71011: PPUSH
71012: CALL 72276 0 2
// end else
71016: GO 71118
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71018: LD_VAR 0 4
71022: PPUSH
71023: LD_VAR 0 2
71027: PUSH
71028: LD_VAR 0 9
71032: ARRAY
71033: PUSH
71034: LD_INT 1
71036: ARRAY
71037: PPUSH
71038: LD_VAR 0 2
71042: PUSH
71043: LD_VAR 0 9
71047: ARRAY
71048: PUSH
71049: LD_INT 2
71051: ARRAY
71052: PPUSH
71053: CALL_OW 297
71057: PUSH
71058: LD_INT 6
71060: GREATER
71061: IFFALSE 71104
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71063: LD_VAR 0 4
71067: PPUSH
71068: LD_VAR 0 2
71072: PUSH
71073: LD_VAR 0 9
71077: ARRAY
71078: PUSH
71079: LD_INT 1
71081: ARRAY
71082: PPUSH
71083: LD_VAR 0 2
71087: PUSH
71088: LD_VAR 0 9
71092: ARRAY
71093: PUSH
71094: LD_INT 2
71096: ARRAY
71097: PPUSH
71098: CALL_OW 114
71102: GO 71118
// SetTag ( i , tag ) ;
71104: LD_VAR 0 4
71108: PPUSH
71109: LD_VAR 0 9
71113: PPUSH
71114: CALL_OW 109
// end else
71118: GO 71191
// if enemy then
71120: LD_VAR 0 5
71124: IFFALSE 71191
// begin if GetWeapon ( i ) = ru_time_lapser then
71126: LD_VAR 0 4
71130: PPUSH
71131: CALL_OW 264
71135: PUSH
71136: LD_INT 49
71138: EQUAL
71139: IFFALSE 71167
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71141: LD_VAR 0 4
71145: PPUSH
71146: LD_VAR 0 5
71150: PPUSH
71151: LD_VAR 0 4
71155: PPUSH
71156: CALL_OW 74
71160: PPUSH
71161: CALL_OW 112
71165: GO 71191
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71167: LD_VAR 0 4
71171: PPUSH
71172: LD_VAR 0 5
71176: PPUSH
71177: LD_VAR 0 4
71181: PPUSH
71182: CALL_OW 74
71186: PPUSH
71187: CALL 72276 0 2
// end ; end ;
71191: GO 70763
71193: POP
71194: POP
// end ;
71195: LD_VAR 0 3
71199: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71200: LD_INT 0
71202: PPUSH
71203: PPUSH
71204: PPUSH
// if not unit or IsInUnit ( unit ) then
71205: LD_VAR 0 1
71209: NOT
71210: IFTRUE 71223
71212: PUSH
71213: LD_VAR 0 1
71217: PPUSH
71218: CALL_OW 310
71222: OR
71223: IFFALSE 71227
// exit ;
71225: GO 71318
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71227: LD_ADDR_VAR 0 4
71231: PUSH
71232: LD_VAR 0 1
71236: PPUSH
71237: CALL_OW 250
71241: PPUSH
71242: LD_VAR 0 2
71246: PPUSH
71247: LD_INT 1
71249: PPUSH
71250: CALL_OW 272
71254: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71255: LD_ADDR_VAR 0 5
71259: PUSH
71260: LD_VAR 0 1
71264: PPUSH
71265: CALL_OW 251
71269: PPUSH
71270: LD_VAR 0 2
71274: PPUSH
71275: LD_INT 1
71277: PPUSH
71278: CALL_OW 273
71282: ST_TO_ADDR
// if ValidHex ( x , y ) then
71283: LD_VAR 0 4
71287: PPUSH
71288: LD_VAR 0 5
71292: PPUSH
71293: CALL_OW 488
71297: IFFALSE 71318
// ComTurnXY ( unit , x , y ) ;
71299: LD_VAR 0 1
71303: PPUSH
71304: LD_VAR 0 4
71308: PPUSH
71309: LD_VAR 0 5
71313: PPUSH
71314: CALL_OW 118
// end ;
71318: LD_VAR 0 3
71322: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71323: LD_INT 0
71325: PPUSH
71326: PPUSH
// result := false ;
71327: LD_ADDR_VAR 0 3
71331: PUSH
71332: LD_INT 0
71334: ST_TO_ADDR
// if not units then
71335: LD_VAR 0 2
71339: NOT
71340: IFFALSE 71344
// exit ;
71342: GO 71389
// for i in units do
71344: LD_ADDR_VAR 0 4
71348: PUSH
71349: LD_VAR 0 2
71353: PUSH
71354: FOR_IN
71355: IFFALSE 71387
// if See ( side , i ) then
71357: LD_VAR 0 1
71361: PPUSH
71362: LD_VAR 0 4
71366: PPUSH
71367: CALL_OW 292
71371: IFFALSE 71385
// begin result := true ;
71373: LD_ADDR_VAR 0 3
71377: PUSH
71378: LD_INT 1
71380: ST_TO_ADDR
// exit ;
71381: POP
71382: POP
71383: GO 71389
// end ;
71385: GO 71354
71387: POP
71388: POP
// end ;
71389: LD_VAR 0 3
71393: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71394: LD_INT 0
71396: PPUSH
71397: PPUSH
71398: PPUSH
71399: PPUSH
// if not unit or not points then
71400: LD_VAR 0 1
71404: NOT
71405: IFTRUE 71414
71407: PUSH
71408: LD_VAR 0 2
71412: NOT
71413: OR
71414: IFFALSE 71418
// exit ;
71416: GO 71508
// dist := 99999 ;
71418: LD_ADDR_VAR 0 5
71422: PUSH
71423: LD_INT 99999
71425: ST_TO_ADDR
// for i in points do
71426: LD_ADDR_VAR 0 4
71430: PUSH
71431: LD_VAR 0 2
71435: PUSH
71436: FOR_IN
71437: IFFALSE 71506
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71439: LD_ADDR_VAR 0 6
71443: PUSH
71444: LD_VAR 0 1
71448: PPUSH
71449: LD_VAR 0 4
71453: PUSH
71454: LD_INT 1
71456: ARRAY
71457: PPUSH
71458: LD_VAR 0 4
71462: PUSH
71463: LD_INT 2
71465: ARRAY
71466: PPUSH
71467: CALL_OW 297
71471: ST_TO_ADDR
// if tmpDist < dist then
71472: LD_VAR 0 6
71476: PUSH
71477: LD_VAR 0 5
71481: LESS
71482: IFFALSE 71504
// begin result := i ;
71484: LD_ADDR_VAR 0 3
71488: PUSH
71489: LD_VAR 0 4
71493: ST_TO_ADDR
// dist := tmpDist ;
71494: LD_ADDR_VAR 0 5
71498: PUSH
71499: LD_VAR 0 6
71503: ST_TO_ADDR
// end ; end ;
71504: GO 71436
71506: POP
71507: POP
// end ;
71508: LD_VAR 0 3
71512: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71513: LD_INT 0
71515: PPUSH
// uc_side := side ;
71516: LD_ADDR_OWVAR 20
71520: PUSH
71521: LD_VAR 0 1
71525: ST_TO_ADDR
// uc_nation := 3 ;
71526: LD_ADDR_OWVAR 21
71530: PUSH
71531: LD_INT 3
71533: ST_TO_ADDR
// vc_chassis := 25 ;
71534: LD_ADDR_OWVAR 37
71538: PUSH
71539: LD_INT 25
71541: ST_TO_ADDR
// vc_engine := engine_siberite ;
71542: LD_ADDR_OWVAR 39
71546: PUSH
71547: LD_INT 3
71549: ST_TO_ADDR
// vc_control := control_computer ;
71550: LD_ADDR_OWVAR 38
71554: PUSH
71555: LD_INT 3
71557: ST_TO_ADDR
// vc_weapon := 59 ;
71558: LD_ADDR_OWVAR 40
71562: PUSH
71563: LD_INT 59
71565: ST_TO_ADDR
// result := CreateVehicle ;
71566: LD_ADDR_VAR 0 5
71570: PUSH
71571: CALL_OW 45
71575: ST_TO_ADDR
// SetDir ( result , d ) ;
71576: LD_VAR 0 5
71580: PPUSH
71581: LD_VAR 0 4
71585: PPUSH
71586: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71590: LD_VAR 0 5
71594: PPUSH
71595: LD_VAR 0 2
71599: PPUSH
71600: LD_VAR 0 3
71604: PPUSH
71605: LD_INT 0
71607: PPUSH
71608: CALL_OW 48
// end ;
71612: LD_VAR 0 5
71616: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71617: LD_INT 0
71619: PPUSH
71620: PPUSH
71621: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71622: LD_ADDR_VAR 0 2
71626: PUSH
71627: LD_INT 0
71629: PUSH
71630: LD_INT 0
71632: PUSH
71633: LD_INT 0
71635: PUSH
71636: LD_INT 0
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71645: LD_VAR 0 1
71649: NOT
71650: IFTRUE 71683
71652: PUSH
71653: LD_VAR 0 1
71657: PPUSH
71658: CALL_OW 264
71662: PUSH
71663: LD_INT 12
71665: PUSH
71666: LD_INT 51
71668: PUSH
71669: LD_INT 32
71671: PUSH
71672: LD_INT 89
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: IN
71681: NOT
71682: OR
71683: IFFALSE 71687
// exit ;
71685: GO 71785
// for i := 1 to 3 do
71687: LD_ADDR_VAR 0 3
71691: PUSH
71692: DOUBLE
71693: LD_INT 1
71695: DEC
71696: ST_TO_ADDR
71697: LD_INT 3
71699: PUSH
71700: FOR_TO
71701: IFFALSE 71783
// begin tmp := GetCargo ( cargo , i ) ;
71703: LD_ADDR_VAR 0 4
71707: PUSH
71708: LD_VAR 0 1
71712: PPUSH
71713: LD_VAR 0 3
71717: PPUSH
71718: CALL_OW 289
71722: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71723: LD_ADDR_VAR 0 2
71727: PUSH
71728: LD_VAR 0 2
71732: PPUSH
71733: LD_VAR 0 3
71737: PPUSH
71738: LD_VAR 0 4
71742: PPUSH
71743: CALL_OW 1
71747: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71748: LD_ADDR_VAR 0 2
71752: PUSH
71753: LD_VAR 0 2
71757: PPUSH
71758: LD_INT 4
71760: PPUSH
71761: LD_VAR 0 2
71765: PUSH
71766: LD_INT 4
71768: ARRAY
71769: PUSH
71770: LD_VAR 0 4
71774: PLUS
71775: PPUSH
71776: CALL_OW 1
71780: ST_TO_ADDR
// end ;
71781: GO 71700
71783: POP
71784: POP
// end ;
71785: LD_VAR 0 2
71789: RET
// export function Length ( array ) ; begin
71790: LD_INT 0
71792: PPUSH
// result := array + 0 ;
71793: LD_ADDR_VAR 0 2
71797: PUSH
71798: LD_VAR 0 1
71802: PUSH
71803: LD_INT 0
71805: PLUS
71806: ST_TO_ADDR
// end ;
71807: LD_VAR 0 2
71811: RET
// export function PrepareArray ( array ) ; begin
71812: LD_INT 0
71814: PPUSH
// result := array diff 0 ;
71815: LD_ADDR_VAR 0 2
71819: PUSH
71820: LD_VAR 0 1
71824: PUSH
71825: LD_INT 0
71827: DIFF
71828: ST_TO_ADDR
// if not result [ 1 ] then
71829: LD_VAR 0 2
71833: PUSH
71834: LD_INT 1
71836: ARRAY
71837: NOT
71838: IFFALSE 71858
// result := Delete ( result , 1 ) ;
71840: LD_ADDR_VAR 0 2
71844: PUSH
71845: LD_VAR 0 2
71849: PPUSH
71850: LD_INT 1
71852: PPUSH
71853: CALL_OW 3
71857: ST_TO_ADDR
// end ;
71858: LD_VAR 0 2
71862: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71863: LD_INT 0
71865: PPUSH
71866: PPUSH
71867: PPUSH
71868: PPUSH
// sibRocketRange := 25 ;
71869: LD_ADDR_VAR 0 6
71873: PUSH
71874: LD_INT 25
71876: ST_TO_ADDR
// result := false ;
71877: LD_ADDR_VAR 0 4
71881: PUSH
71882: LD_INT 0
71884: ST_TO_ADDR
// for i := 0 to 5 do
71885: LD_ADDR_VAR 0 5
71889: PUSH
71890: DOUBLE
71891: LD_INT 0
71893: DEC
71894: ST_TO_ADDR
71895: LD_INT 5
71897: PUSH
71898: FOR_TO
71899: IFFALSE 71966
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71901: LD_VAR 0 1
71905: PPUSH
71906: LD_VAR 0 5
71910: PPUSH
71911: LD_VAR 0 6
71915: PPUSH
71916: CALL_OW 272
71920: PPUSH
71921: LD_VAR 0 2
71925: PPUSH
71926: LD_VAR 0 5
71930: PPUSH
71931: LD_VAR 0 6
71935: PPUSH
71936: CALL_OW 273
71940: PPUSH
71941: LD_VAR 0 3
71945: PPUSH
71946: CALL_OW 309
71950: IFFALSE 71964
// begin result := true ;
71952: LD_ADDR_VAR 0 4
71956: PUSH
71957: LD_INT 1
71959: ST_TO_ADDR
// exit ;
71960: POP
71961: POP
71962: GO 71968
// end ;
71964: GO 71898
71966: POP
71967: POP
// end ;
71968: LD_VAR 0 4
71972: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71973: LD_INT 0
71975: PPUSH
71976: PPUSH
71977: PPUSH
// if btype = b_depot then
71978: LD_VAR 0 2
71982: PUSH
71983: LD_INT 0
71985: EQUAL
71986: IFFALSE 71998
// begin result := true ;
71988: LD_ADDR_VAR 0 3
71992: PUSH
71993: LD_INT 1
71995: ST_TO_ADDR
// exit ;
71996: GO 72118
// end ; pom := GetBase ( depot ) ;
71998: LD_ADDR_VAR 0 4
72002: PUSH
72003: LD_VAR 0 1
72007: PPUSH
72008: CALL_OW 274
72012: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72013: LD_ADDR_VAR 0 5
72017: PUSH
72018: LD_VAR 0 2
72022: PPUSH
72023: LD_VAR 0 1
72027: PPUSH
72028: CALL_OW 248
72032: PPUSH
72033: CALL_OW 450
72037: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72038: LD_ADDR_VAR 0 3
72042: PUSH
72043: LD_VAR 0 4
72047: PPUSH
72048: LD_INT 1
72050: PPUSH
72051: CALL_OW 275
72055: PUSH
72056: LD_VAR 0 5
72060: PUSH
72061: LD_INT 1
72063: ARRAY
72064: GREATEREQUAL
72065: IFFALSE 72091
72067: PUSH
72068: LD_VAR 0 4
72072: PPUSH
72073: LD_INT 2
72075: PPUSH
72076: CALL_OW 275
72080: PUSH
72081: LD_VAR 0 5
72085: PUSH
72086: LD_INT 2
72088: ARRAY
72089: GREATEREQUAL
72090: AND
72091: IFFALSE 72117
72093: PUSH
72094: LD_VAR 0 4
72098: PPUSH
72099: LD_INT 3
72101: PPUSH
72102: CALL_OW 275
72106: PUSH
72107: LD_VAR 0 5
72111: PUSH
72112: LD_INT 3
72114: ARRAY
72115: GREATEREQUAL
72116: AND
72117: ST_TO_ADDR
// end ;
72118: LD_VAR 0 3
72122: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72123: LD_INT 0
72125: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72126: LD_VAR 0 1
72130: PPUSH
72131: LD_VAR 0 2
72135: PPUSH
72136: LD_INT 0
72138: PPUSH
72139: LD_INT 0
72141: PPUSH
72142: LD_INT 1
72144: PPUSH
72145: LD_INT 0
72147: PPUSH
72148: CALL_OW 587
// end ;
72152: LD_VAR 0 3
72156: RET
// export function CenterOnNow ( unit ) ; begin
72157: LD_INT 0
72159: PPUSH
// result := IsInUnit ( unit ) ;
72160: LD_ADDR_VAR 0 2
72164: PUSH
72165: LD_VAR 0 1
72169: PPUSH
72170: CALL_OW 310
72174: ST_TO_ADDR
// if not result then
72175: LD_VAR 0 2
72179: NOT
72180: IFFALSE 72192
// result := unit ;
72182: LD_ADDR_VAR 0 2
72186: PUSH
72187: LD_VAR 0 1
72191: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72192: LD_VAR 0 1
72196: PPUSH
72197: CALL_OW 87
// end ;
72201: LD_VAR 0 2
72205: RET
// export function ComMoveHex ( unit , hex ) ; begin
72206: LD_INT 0
72208: PPUSH
// if not hex then
72209: LD_VAR 0 2
72213: NOT
72214: IFFALSE 72218
// exit ;
72216: GO 72271
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72218: LD_VAR 0 2
72222: PUSH
72223: LD_INT 1
72225: ARRAY
72226: PPUSH
72227: LD_VAR 0 2
72231: PUSH
72232: LD_INT 2
72234: ARRAY
72235: PPUSH
72236: CALL_OW 428
72240: IFFALSE 72244
// exit ;
72242: GO 72271
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72244: LD_VAR 0 1
72248: PPUSH
72249: LD_VAR 0 2
72253: PUSH
72254: LD_INT 1
72256: ARRAY
72257: PPUSH
72258: LD_VAR 0 2
72262: PUSH
72263: LD_INT 2
72265: ARRAY
72266: PPUSH
72267: CALL_OW 111
// end ;
72271: LD_VAR 0 3
72275: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72276: LD_INT 0
72278: PPUSH
72279: PPUSH
72280: PPUSH
// if not unit or not enemy then
72281: LD_VAR 0 1
72285: NOT
72286: IFTRUE 72295
72288: PUSH
72289: LD_VAR 0 2
72293: NOT
72294: OR
72295: IFFALSE 72299
// exit ;
72297: GO 72425
// x := GetX ( enemy ) ;
72299: LD_ADDR_VAR 0 4
72303: PUSH
72304: LD_VAR 0 2
72308: PPUSH
72309: CALL_OW 250
72313: ST_TO_ADDR
// y := GetY ( enemy ) ;
72314: LD_ADDR_VAR 0 5
72318: PUSH
72319: LD_VAR 0 2
72323: PPUSH
72324: CALL_OW 251
72328: ST_TO_ADDR
// if ValidHex ( x , y ) then
72329: LD_VAR 0 4
72333: PPUSH
72334: LD_VAR 0 5
72338: PPUSH
72339: CALL_OW 488
72343: IFFALSE 72425
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72345: LD_VAR 0 2
72349: PPUSH
72350: CALL_OW 247
72354: PUSH
72355: LD_INT 3
72357: PUSH
72358: LD_INT 2
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: IN
72365: IFTRUE 72388
72367: PUSH
72368: LD_VAR 0 1
72372: PPUSH
72373: CALL_OW 255
72377: PPUSH
72378: LD_VAR 0 2
72382: PPUSH
72383: CALL_OW 292
72387: OR
72388: IFFALSE 72406
// ComAttackUnit ( unit , enemy ) else
72390: LD_VAR 0 1
72394: PPUSH
72395: LD_VAR 0 2
72399: PPUSH
72400: CALL_OW 115
72404: GO 72425
// ComAgressiveMove ( unit , x , y ) ;
72406: LD_VAR 0 1
72410: PPUSH
72411: LD_VAR 0 4
72415: PPUSH
72416: LD_VAR 0 5
72420: PPUSH
72421: CALL_OW 114
// end ;
72425: LD_VAR 0 3
72429: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72430: LD_INT 0
72432: PPUSH
72433: PPUSH
72434: PPUSH
// list := AreaToList ( area , 0 ) ;
72435: LD_ADDR_VAR 0 5
72439: PUSH
72440: LD_VAR 0 1
72444: PPUSH
72445: LD_INT 0
72447: PPUSH
72448: CALL_OW 517
72452: ST_TO_ADDR
// if not list then
72453: LD_VAR 0 5
72457: NOT
72458: IFFALSE 72462
// exit ;
72460: GO 72592
// if all then
72462: LD_VAR 0 2
72466: IFFALSE 72554
// begin for i := 1 to list [ 1 ] do
72468: LD_ADDR_VAR 0 4
72472: PUSH
72473: DOUBLE
72474: LD_INT 1
72476: DEC
72477: ST_TO_ADDR
72478: LD_VAR 0 5
72482: PUSH
72483: LD_INT 1
72485: ARRAY
72486: PUSH
72487: FOR_TO
72488: IFFALSE 72550
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72490: LD_ADDR_VAR 0 3
72494: PUSH
72495: LD_VAR 0 3
72499: PPUSH
72500: LD_VAR 0 3
72504: PUSH
72505: LD_INT 1
72507: PLUS
72508: PPUSH
72509: LD_VAR 0 5
72513: PUSH
72514: LD_INT 1
72516: ARRAY
72517: PUSH
72518: LD_VAR 0 4
72522: ARRAY
72523: PUSH
72524: LD_VAR 0 5
72528: PUSH
72529: LD_INT 2
72531: ARRAY
72532: PUSH
72533: LD_VAR 0 4
72537: ARRAY
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PPUSH
72543: CALL_OW 1
72547: ST_TO_ADDR
72548: GO 72487
72550: POP
72551: POP
// exit ;
72552: GO 72592
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72554: LD_ADDR_VAR 0 3
72558: PUSH
72559: LD_VAR 0 5
72563: PUSH
72564: LD_INT 1
72566: ARRAY
72567: PUSH
72568: LD_INT 1
72570: ARRAY
72571: PUSH
72572: LD_VAR 0 5
72576: PUSH
72577: LD_INT 2
72579: ARRAY
72580: PUSH
72581: LD_INT 1
72583: ARRAY
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: EMPTY
72590: LIST
72591: ST_TO_ADDR
// end ;
72592: LD_VAR 0 3
72596: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72597: LD_INT 0
72599: PPUSH
72600: PPUSH
// list := AreaToList ( area , 0 ) ;
72601: LD_ADDR_VAR 0 4
72605: PUSH
72606: LD_VAR 0 1
72610: PPUSH
72611: LD_INT 0
72613: PPUSH
72614: CALL_OW 517
72618: ST_TO_ADDR
// if not list then
72619: LD_VAR 0 4
72623: NOT
72624: IFFALSE 72628
// exit ;
72626: GO 72669
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72628: LD_ADDR_VAR 0 3
72632: PUSH
72633: LD_VAR 0 4
72637: PUSH
72638: LD_INT 1
72640: ARRAY
72641: PUSH
72642: LD_INT 1
72644: ARRAY
72645: PUSH
72646: LD_VAR 0 4
72650: PUSH
72651: LD_INT 2
72653: ARRAY
72654: PUSH
72655: LD_INT 1
72657: ARRAY
72658: PUSH
72659: LD_VAR 0 2
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: LIST
72668: ST_TO_ADDR
// end ;
72669: LD_VAR 0 3
72673: RET
// export function First ( array ) ; begin
72674: LD_INT 0
72676: PPUSH
// if not array then
72677: LD_VAR 0 1
72681: NOT
72682: IFFALSE 72686
// exit ;
72684: GO 72700
// result := array [ 1 ] ;
72686: LD_ADDR_VAR 0 2
72690: PUSH
72691: LD_VAR 0 1
72695: PUSH
72696: LD_INT 1
72698: ARRAY
72699: ST_TO_ADDR
// end ;
72700: LD_VAR 0 2
72704: RET
// export function Last ( array ) ; begin
72705: LD_INT 0
72707: PPUSH
// if not array then
72708: LD_VAR 0 1
72712: NOT
72713: IFFALSE 72717
// exit ;
72715: GO 72733
// result := array [ array ] ;
72717: LD_ADDR_VAR 0 2
72721: PUSH
72722: LD_VAR 0 1
72726: PUSH
72727: LD_VAR 0 1
72731: ARRAY
72732: ST_TO_ADDR
// end ;
72733: LD_VAR 0 2
72737: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
72738: LD_INT 0
72740: PPUSH
72741: PPUSH
// result := [ ] ;
72742: LD_ADDR_VAR 0 5
72746: PUSH
72747: EMPTY
72748: ST_TO_ADDR
// if not array then
72749: LD_VAR 0 1
72753: NOT
72754: IFFALSE 72758
// exit ;
72756: GO 72870
// for i := 1 to array do
72758: LD_ADDR_VAR 0 6
72762: PUSH
72763: DOUBLE
72764: LD_INT 1
72766: DEC
72767: ST_TO_ADDR
72768: LD_VAR 0 1
72772: PUSH
72773: FOR_TO
72774: IFFALSE 72868
// if array [ i ] [ index ] = value then
72776: LD_VAR 0 1
72780: PUSH
72781: LD_VAR 0 6
72785: ARRAY
72786: PUSH
72787: LD_VAR 0 2
72791: ARRAY
72792: PUSH
72793: LD_VAR 0 3
72797: EQUAL
72798: IFFALSE 72866
// begin if indexColumn then
72800: LD_VAR 0 4
72804: IFFALSE 72840
// result := Join ( result , array [ i ] [ indexColumn ] ) else
72806: LD_ADDR_VAR 0 5
72810: PUSH
72811: LD_VAR 0 5
72815: PPUSH
72816: LD_VAR 0 1
72820: PUSH
72821: LD_VAR 0 6
72825: ARRAY
72826: PUSH
72827: LD_VAR 0 4
72831: ARRAY
72832: PPUSH
72833: CALL 67878 0 2
72837: ST_TO_ADDR
72838: GO 72866
// result := Join ( result , array [ i ] ) ;
72840: LD_ADDR_VAR 0 5
72844: PUSH
72845: LD_VAR 0 5
72849: PPUSH
72850: LD_VAR 0 1
72854: PUSH
72855: LD_VAR 0 6
72859: ARRAY
72860: PPUSH
72861: CALL 67878 0 2
72865: ST_TO_ADDR
// end ;
72866: GO 72773
72868: POP
72869: POP
// end ;
72870: LD_VAR 0 5
72874: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72875: LD_INT 0
72877: PPUSH
// if not vehicles or not parkingPoint then
72878: LD_VAR 0 1
72882: NOT
72883: IFTRUE 72892
72885: PUSH
72886: LD_VAR 0 2
72890: NOT
72891: OR
72892: IFFALSE 72896
// exit ;
72894: GO 72994
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72896: LD_ADDR_VAR 0 1
72900: PUSH
72901: LD_VAR 0 1
72905: PPUSH
72906: LD_INT 50
72908: PUSH
72909: EMPTY
72910: LIST
72911: PUSH
72912: LD_INT 3
72914: PUSH
72915: LD_INT 92
72917: PUSH
72918: LD_VAR 0 2
72922: PUSH
72923: LD_INT 1
72925: ARRAY
72926: PUSH
72927: LD_VAR 0 2
72931: PUSH
72932: LD_INT 2
72934: ARRAY
72935: PUSH
72936: LD_INT 8
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: PPUSH
72953: CALL_OW 72
72957: ST_TO_ADDR
// if not vehicles then
72958: LD_VAR 0 1
72962: NOT
72963: IFFALSE 72967
// exit ;
72965: GO 72994
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72967: LD_VAR 0 1
72971: PPUSH
72972: LD_VAR 0 2
72976: PUSH
72977: LD_INT 1
72979: ARRAY
72980: PPUSH
72981: LD_VAR 0 2
72985: PUSH
72986: LD_INT 2
72988: ARRAY
72989: PPUSH
72990: CALL_OW 111
// end ;
72994: LD_VAR 0 3
72998: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72999: LD_INT 0
73001: PPUSH
73002: PPUSH
73003: PPUSH
// if not side or not area then
73004: LD_VAR 0 1
73008: NOT
73009: IFTRUE 73018
73011: PUSH
73012: LD_VAR 0 2
73016: NOT
73017: OR
73018: IFFALSE 73022
// exit ;
73020: GO 73141
// tmp := AreaToList ( area , 0 ) ;
73022: LD_ADDR_VAR 0 5
73026: PUSH
73027: LD_VAR 0 2
73031: PPUSH
73032: LD_INT 0
73034: PPUSH
73035: CALL_OW 517
73039: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73040: LD_ADDR_VAR 0 4
73044: PUSH
73045: DOUBLE
73046: LD_INT 1
73048: DEC
73049: ST_TO_ADDR
73050: LD_VAR 0 5
73054: PUSH
73055: LD_INT 1
73057: ARRAY
73058: PUSH
73059: FOR_TO
73060: IFFALSE 73139
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73062: LD_VAR 0 5
73066: PUSH
73067: LD_INT 1
73069: ARRAY
73070: PUSH
73071: LD_VAR 0 4
73075: ARRAY
73076: PPUSH
73077: LD_VAR 0 5
73081: PUSH
73082: LD_INT 2
73084: ARRAY
73085: PUSH
73086: LD_VAR 0 4
73090: ARRAY
73091: PPUSH
73092: CALL_OW 351
73096: IFFALSE 73137
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73098: LD_VAR 0 5
73102: PUSH
73103: LD_INT 1
73105: ARRAY
73106: PUSH
73107: LD_VAR 0 4
73111: ARRAY
73112: PPUSH
73113: LD_VAR 0 5
73117: PUSH
73118: LD_INT 2
73120: ARRAY
73121: PUSH
73122: LD_VAR 0 4
73126: ARRAY
73127: PPUSH
73128: LD_VAR 0 1
73132: PPUSH
73133: CALL_OW 244
// end ;
73137: GO 73059
73139: POP
73140: POP
// end ;
73141: LD_VAR 0 3
73145: RET
// export function UniqueArray ( array ) ; var i ; begin
73146: LD_INT 0
73148: PPUSH
73149: PPUSH
// result := [ ] ;
73150: LD_ADDR_VAR 0 2
73154: PUSH
73155: EMPTY
73156: ST_TO_ADDR
// if not array then
73157: LD_VAR 0 1
73161: NOT
73162: IFFALSE 73166
// exit ;
73164: GO 73227
// for i := 1 to array do
73166: LD_ADDR_VAR 0 3
73170: PUSH
73171: DOUBLE
73172: LD_INT 1
73174: DEC
73175: ST_TO_ADDR
73176: LD_VAR 0 1
73180: PUSH
73181: FOR_TO
73182: IFFALSE 73225
// if not array [ i ] in result then
73184: LD_VAR 0 1
73188: PUSH
73189: LD_VAR 0 3
73193: ARRAY
73194: PUSH
73195: LD_VAR 0 2
73199: IN
73200: NOT
73201: IFFALSE 73223
// result := Join ( result , i ) ;
73203: LD_ADDR_VAR 0 2
73207: PUSH
73208: LD_VAR 0 2
73212: PPUSH
73213: LD_VAR 0 3
73217: PPUSH
73218: CALL 67878 0 2
73222: ST_TO_ADDR
73223: GO 73181
73225: POP
73226: POP
// end ; end_of_file end_of_file
73227: LD_VAR 0 2
73231: RET
// export globalGameSaveCounter ; every 0 0$1 do
73232: GO 73234
73234: DISABLE
// begin enable ;
73235: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
73236: LD_STRING updateTimer(
73238: PUSH
73239: LD_OWVAR 1
73243: STR
73244: PUSH
73245: LD_STRING );
73247: STR
73248: PPUSH
73249: CALL_OW 559
// end ;
73253: END
// every 0 0$1 do
73254: GO 73256
73256: DISABLE
// begin globalGameSaveCounter := 0 ;
73257: LD_ADDR_EXP 63
73261: PUSH
73262: LD_INT 0
73264: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
73265: LD_STRING setGameSaveCounter(0)
73267: PPUSH
73268: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
73272: LD_STRING initStreamRollete();
73274: PPUSH
73275: CALL_OW 559
// InitStreamMode ;
73279: CALL 74624 0 0
// DefineStreamItems ( false ) ;
73283: LD_INT 0
73285: PPUSH
73286: CALL 75088 0 1
// end ;
73290: END
// export function SOS_MapStart ( ) ; begin
73291: LD_INT 0
73293: PPUSH
// if streamModeActive then
73294: LD_EXP 64
73298: IFFALSE 73307
// DefineStreamItems ( true ) ;
73300: LD_INT 1
73302: PPUSH
73303: CALL 75088 0 1
// UpdateLuaVariables ( ) ;
73307: CALL 73324 0 0
// UpdateFactoryWaypoints ( ) ;
73311: CALL 88210 0 0
// UpdateWarehouseGatheringPoints ( ) ;
73315: CALL 88462 0 0
// end ;
73319: LD_VAR 0 1
73323: RET
// function UpdateLuaVariables ( ) ; begin
73324: LD_INT 0
73326: PPUSH
// if globalGameSaveCounter then
73327: LD_EXP 63
73331: IFFALSE 73365
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
73333: LD_ADDR_EXP 63
73337: PUSH
73338: LD_EXP 63
73342: PPUSH
73343: CALL 69251 0 1
73347: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73348: LD_STRING setGameSaveCounter(
73350: PUSH
73351: LD_EXP 63
73355: STR
73356: PUSH
73357: LD_STRING )
73359: STR
73360: PPUSH
73361: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
73365: LD_STRING setGameDifficulty(
73367: PUSH
73368: LD_OWVAR 67
73372: STR
73373: PUSH
73374: LD_STRING )
73376: STR
73377: PPUSH
73378: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
73382: LD_STRING displayDifficulty(
73384: PUSH
73385: LD_OWVAR 67
73389: STR
73390: PUSH
73391: LD_STRING )
73393: STR
73394: PPUSH
73395: CALL_OW 559
// end ;
73399: LD_VAR 0 1
73403: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73404: LD_INT 0
73406: PPUSH
// if p2 = stream_mode then
73407: LD_VAR 0 2
73411: PUSH
73412: LD_INT 100
73414: EQUAL
73415: IFFALSE 74418
// begin if not StreamModeActive then
73417: LD_EXP 64
73421: NOT
73422: IFFALSE 73432
// StreamModeActive := true ;
73424: LD_ADDR_EXP 64
73428: PUSH
73429: LD_INT 1
73431: ST_TO_ADDR
// if p3 = 0 then
73432: LD_VAR 0 3
73436: PUSH
73437: LD_INT 0
73439: EQUAL
73440: IFFALSE 73446
// InitStreamMode ;
73442: CALL 74624 0 0
// if p3 = 1 then
73446: LD_VAR 0 3
73450: PUSH
73451: LD_INT 1
73453: EQUAL
73454: IFFALSE 73464
// sRocket := true ;
73456: LD_ADDR_EXP 69
73460: PUSH
73461: LD_INT 1
73463: ST_TO_ADDR
// if p3 = 2 then
73464: LD_VAR 0 3
73468: PUSH
73469: LD_INT 2
73471: EQUAL
73472: IFFALSE 73482
// sSpeed := true ;
73474: LD_ADDR_EXP 68
73478: PUSH
73479: LD_INT 1
73481: ST_TO_ADDR
// if p3 = 3 then
73482: LD_VAR 0 3
73486: PUSH
73487: LD_INT 3
73489: EQUAL
73490: IFFALSE 73500
// sEngine := true ;
73492: LD_ADDR_EXP 70
73496: PUSH
73497: LD_INT 1
73499: ST_TO_ADDR
// if p3 = 4 then
73500: LD_VAR 0 3
73504: PUSH
73505: LD_INT 4
73507: EQUAL
73508: IFFALSE 73518
// sSpec := true ;
73510: LD_ADDR_EXP 67
73514: PUSH
73515: LD_INT 1
73517: ST_TO_ADDR
// if p3 = 5 then
73518: LD_VAR 0 3
73522: PUSH
73523: LD_INT 5
73525: EQUAL
73526: IFFALSE 73536
// sLevel := true ;
73528: LD_ADDR_EXP 71
73532: PUSH
73533: LD_INT 1
73535: ST_TO_ADDR
// if p3 = 6 then
73536: LD_VAR 0 3
73540: PUSH
73541: LD_INT 6
73543: EQUAL
73544: IFFALSE 73554
// sArmoury := true ;
73546: LD_ADDR_EXP 72
73550: PUSH
73551: LD_INT 1
73553: ST_TO_ADDR
// if p3 = 7 then
73554: LD_VAR 0 3
73558: PUSH
73559: LD_INT 7
73561: EQUAL
73562: IFFALSE 73572
// sRadar := true ;
73564: LD_ADDR_EXP 73
73568: PUSH
73569: LD_INT 1
73571: ST_TO_ADDR
// if p3 = 8 then
73572: LD_VAR 0 3
73576: PUSH
73577: LD_INT 8
73579: EQUAL
73580: IFFALSE 73590
// sBunker := true ;
73582: LD_ADDR_EXP 74
73586: PUSH
73587: LD_INT 1
73589: ST_TO_ADDR
// if p3 = 9 then
73590: LD_VAR 0 3
73594: PUSH
73595: LD_INT 9
73597: EQUAL
73598: IFFALSE 73608
// sHack := true ;
73600: LD_ADDR_EXP 75
73604: PUSH
73605: LD_INT 1
73607: ST_TO_ADDR
// if p3 = 10 then
73608: LD_VAR 0 3
73612: PUSH
73613: LD_INT 10
73615: EQUAL
73616: IFFALSE 73626
// sFire := true ;
73618: LD_ADDR_EXP 76
73622: PUSH
73623: LD_INT 1
73625: ST_TO_ADDR
// if p3 = 11 then
73626: LD_VAR 0 3
73630: PUSH
73631: LD_INT 11
73633: EQUAL
73634: IFFALSE 73644
// sRefresh := true ;
73636: LD_ADDR_EXP 77
73640: PUSH
73641: LD_INT 1
73643: ST_TO_ADDR
// if p3 = 12 then
73644: LD_VAR 0 3
73648: PUSH
73649: LD_INT 12
73651: EQUAL
73652: IFFALSE 73662
// sExp := true ;
73654: LD_ADDR_EXP 78
73658: PUSH
73659: LD_INT 1
73661: ST_TO_ADDR
// if p3 = 13 then
73662: LD_VAR 0 3
73666: PUSH
73667: LD_INT 13
73669: EQUAL
73670: IFFALSE 73680
// sDepot := true ;
73672: LD_ADDR_EXP 79
73676: PUSH
73677: LD_INT 1
73679: ST_TO_ADDR
// if p3 = 14 then
73680: LD_VAR 0 3
73684: PUSH
73685: LD_INT 14
73687: EQUAL
73688: IFFALSE 73698
// sFlag := true ;
73690: LD_ADDR_EXP 80
73694: PUSH
73695: LD_INT 1
73697: ST_TO_ADDR
// if p3 = 15 then
73698: LD_VAR 0 3
73702: PUSH
73703: LD_INT 15
73705: EQUAL
73706: IFFALSE 73716
// sKamikadze := true ;
73708: LD_ADDR_EXP 88
73712: PUSH
73713: LD_INT 1
73715: ST_TO_ADDR
// if p3 = 16 then
73716: LD_VAR 0 3
73720: PUSH
73721: LD_INT 16
73723: EQUAL
73724: IFFALSE 73734
// sTroll := true ;
73726: LD_ADDR_EXP 89
73730: PUSH
73731: LD_INT 1
73733: ST_TO_ADDR
// if p3 = 17 then
73734: LD_VAR 0 3
73738: PUSH
73739: LD_INT 17
73741: EQUAL
73742: IFFALSE 73752
// sSlow := true ;
73744: LD_ADDR_EXP 90
73748: PUSH
73749: LD_INT 1
73751: ST_TO_ADDR
// if p3 = 18 then
73752: LD_VAR 0 3
73756: PUSH
73757: LD_INT 18
73759: EQUAL
73760: IFFALSE 73770
// sLack := true ;
73762: LD_ADDR_EXP 91
73766: PUSH
73767: LD_INT 1
73769: ST_TO_ADDR
// if p3 = 19 then
73770: LD_VAR 0 3
73774: PUSH
73775: LD_INT 19
73777: EQUAL
73778: IFFALSE 73788
// sTank := true ;
73780: LD_ADDR_EXP 93
73784: PUSH
73785: LD_INT 1
73787: ST_TO_ADDR
// if p3 = 20 then
73788: LD_VAR 0 3
73792: PUSH
73793: LD_INT 20
73795: EQUAL
73796: IFFALSE 73806
// sRemote := true ;
73798: LD_ADDR_EXP 94
73802: PUSH
73803: LD_INT 1
73805: ST_TO_ADDR
// if p3 = 21 then
73806: LD_VAR 0 3
73810: PUSH
73811: LD_INT 21
73813: EQUAL
73814: IFFALSE 73824
// sPowell := true ;
73816: LD_ADDR_EXP 95
73820: PUSH
73821: LD_INT 1
73823: ST_TO_ADDR
// if p3 = 22 then
73824: LD_VAR 0 3
73828: PUSH
73829: LD_INT 22
73831: EQUAL
73832: IFFALSE 73842
// sTeleport := true ;
73834: LD_ADDR_EXP 98
73838: PUSH
73839: LD_INT 1
73841: ST_TO_ADDR
// if p3 = 23 then
73842: LD_VAR 0 3
73846: PUSH
73847: LD_INT 23
73849: EQUAL
73850: IFFALSE 73860
// sOilTower := true ;
73852: LD_ADDR_EXP 100
73856: PUSH
73857: LD_INT 1
73859: ST_TO_ADDR
// if p3 = 24 then
73860: LD_VAR 0 3
73864: PUSH
73865: LD_INT 24
73867: EQUAL
73868: IFFALSE 73878
// sShovel := true ;
73870: LD_ADDR_EXP 101
73874: PUSH
73875: LD_INT 1
73877: ST_TO_ADDR
// if p3 = 25 then
73878: LD_VAR 0 3
73882: PUSH
73883: LD_INT 25
73885: EQUAL
73886: IFFALSE 73896
// sSheik := true ;
73888: LD_ADDR_EXP 102
73892: PUSH
73893: LD_INT 1
73895: ST_TO_ADDR
// if p3 = 26 then
73896: LD_VAR 0 3
73900: PUSH
73901: LD_INT 26
73903: EQUAL
73904: IFFALSE 73914
// sEarthquake := true ;
73906: LD_ADDR_EXP 104
73910: PUSH
73911: LD_INT 1
73913: ST_TO_ADDR
// if p3 = 27 then
73914: LD_VAR 0 3
73918: PUSH
73919: LD_INT 27
73921: EQUAL
73922: IFFALSE 73932
// sAI := true ;
73924: LD_ADDR_EXP 105
73928: PUSH
73929: LD_INT 1
73931: ST_TO_ADDR
// if p3 = 28 then
73932: LD_VAR 0 3
73936: PUSH
73937: LD_INT 28
73939: EQUAL
73940: IFFALSE 73950
// sCargo := true ;
73942: LD_ADDR_EXP 108
73946: PUSH
73947: LD_INT 1
73949: ST_TO_ADDR
// if p3 = 29 then
73950: LD_VAR 0 3
73954: PUSH
73955: LD_INT 29
73957: EQUAL
73958: IFFALSE 73968
// sDLaser := true ;
73960: LD_ADDR_EXP 109
73964: PUSH
73965: LD_INT 1
73967: ST_TO_ADDR
// if p3 = 30 then
73968: LD_VAR 0 3
73972: PUSH
73973: LD_INT 30
73975: EQUAL
73976: IFFALSE 73986
// sExchange := true ;
73978: LD_ADDR_EXP 110
73982: PUSH
73983: LD_INT 1
73985: ST_TO_ADDR
// if p3 = 31 then
73986: LD_VAR 0 3
73990: PUSH
73991: LD_INT 31
73993: EQUAL
73994: IFFALSE 74004
// sFac := true ;
73996: LD_ADDR_EXP 111
74000: PUSH
74001: LD_INT 1
74003: ST_TO_ADDR
// if p3 = 32 then
74004: LD_VAR 0 3
74008: PUSH
74009: LD_INT 32
74011: EQUAL
74012: IFFALSE 74022
// sPower := true ;
74014: LD_ADDR_EXP 112
74018: PUSH
74019: LD_INT 1
74021: ST_TO_ADDR
// if p3 = 33 then
74022: LD_VAR 0 3
74026: PUSH
74027: LD_INT 33
74029: EQUAL
74030: IFFALSE 74040
// sRandom := true ;
74032: LD_ADDR_EXP 113
74036: PUSH
74037: LD_INT 1
74039: ST_TO_ADDR
// if p3 = 34 then
74040: LD_VAR 0 3
74044: PUSH
74045: LD_INT 34
74047: EQUAL
74048: IFFALSE 74058
// sShield := true ;
74050: LD_ADDR_EXP 114
74054: PUSH
74055: LD_INT 1
74057: ST_TO_ADDR
// if p3 = 35 then
74058: LD_VAR 0 3
74062: PUSH
74063: LD_INT 35
74065: EQUAL
74066: IFFALSE 74076
// sTime := true ;
74068: LD_ADDR_EXP 115
74072: PUSH
74073: LD_INT 1
74075: ST_TO_ADDR
// if p3 = 36 then
74076: LD_VAR 0 3
74080: PUSH
74081: LD_INT 36
74083: EQUAL
74084: IFFALSE 74094
// sTools := true ;
74086: LD_ADDR_EXP 116
74090: PUSH
74091: LD_INT 1
74093: ST_TO_ADDR
// if p3 = 101 then
74094: LD_VAR 0 3
74098: PUSH
74099: LD_INT 101
74101: EQUAL
74102: IFFALSE 74112
// sSold := true ;
74104: LD_ADDR_EXP 81
74108: PUSH
74109: LD_INT 1
74111: ST_TO_ADDR
// if p3 = 102 then
74112: LD_VAR 0 3
74116: PUSH
74117: LD_INT 102
74119: EQUAL
74120: IFFALSE 74130
// sDiff := true ;
74122: LD_ADDR_EXP 82
74126: PUSH
74127: LD_INT 1
74129: ST_TO_ADDR
// if p3 = 103 then
74130: LD_VAR 0 3
74134: PUSH
74135: LD_INT 103
74137: EQUAL
74138: IFFALSE 74148
// sFog := true ;
74140: LD_ADDR_EXP 85
74144: PUSH
74145: LD_INT 1
74147: ST_TO_ADDR
// if p3 = 104 then
74148: LD_VAR 0 3
74152: PUSH
74153: LD_INT 104
74155: EQUAL
74156: IFFALSE 74166
// sReset := true ;
74158: LD_ADDR_EXP 86
74162: PUSH
74163: LD_INT 1
74165: ST_TO_ADDR
// if p3 = 105 then
74166: LD_VAR 0 3
74170: PUSH
74171: LD_INT 105
74173: EQUAL
74174: IFFALSE 74184
// sSun := true ;
74176: LD_ADDR_EXP 87
74180: PUSH
74181: LD_INT 1
74183: ST_TO_ADDR
// if p3 = 106 then
74184: LD_VAR 0 3
74188: PUSH
74189: LD_INT 106
74191: EQUAL
74192: IFFALSE 74202
// sTiger := true ;
74194: LD_ADDR_EXP 83
74198: PUSH
74199: LD_INT 1
74201: ST_TO_ADDR
// if p3 = 107 then
74202: LD_VAR 0 3
74206: PUSH
74207: LD_INT 107
74209: EQUAL
74210: IFFALSE 74220
// sBomb := true ;
74212: LD_ADDR_EXP 84
74216: PUSH
74217: LD_INT 1
74219: ST_TO_ADDR
// if p3 = 108 then
74220: LD_VAR 0 3
74224: PUSH
74225: LD_INT 108
74227: EQUAL
74228: IFFALSE 74238
// sWound := true ;
74230: LD_ADDR_EXP 92
74234: PUSH
74235: LD_INT 1
74237: ST_TO_ADDR
// if p3 = 109 then
74238: LD_VAR 0 3
74242: PUSH
74243: LD_INT 109
74245: EQUAL
74246: IFFALSE 74256
// sBetray := true ;
74248: LD_ADDR_EXP 96
74252: PUSH
74253: LD_INT 1
74255: ST_TO_ADDR
// if p3 = 110 then
74256: LD_VAR 0 3
74260: PUSH
74261: LD_INT 110
74263: EQUAL
74264: IFFALSE 74274
// sContamin := true ;
74266: LD_ADDR_EXP 97
74270: PUSH
74271: LD_INT 1
74273: ST_TO_ADDR
// if p3 = 111 then
74274: LD_VAR 0 3
74278: PUSH
74279: LD_INT 111
74281: EQUAL
74282: IFFALSE 74292
// sOil := true ;
74284: LD_ADDR_EXP 99
74288: PUSH
74289: LD_INT 1
74291: ST_TO_ADDR
// if p3 = 112 then
74292: LD_VAR 0 3
74296: PUSH
74297: LD_INT 112
74299: EQUAL
74300: IFFALSE 74310
// sStu := true ;
74302: LD_ADDR_EXP 103
74306: PUSH
74307: LD_INT 1
74309: ST_TO_ADDR
// if p3 = 113 then
74310: LD_VAR 0 3
74314: PUSH
74315: LD_INT 113
74317: EQUAL
74318: IFFALSE 74328
// sBazooka := true ;
74320: LD_ADDR_EXP 106
74324: PUSH
74325: LD_INT 1
74327: ST_TO_ADDR
// if p3 = 114 then
74328: LD_VAR 0 3
74332: PUSH
74333: LD_INT 114
74335: EQUAL
74336: IFFALSE 74346
// sMortar := true ;
74338: LD_ADDR_EXP 107
74342: PUSH
74343: LD_INT 1
74345: ST_TO_ADDR
// if p3 = 115 then
74346: LD_VAR 0 3
74350: PUSH
74351: LD_INT 115
74353: EQUAL
74354: IFFALSE 74364
// sRanger := true ;
74356: LD_ADDR_EXP 117
74360: PUSH
74361: LD_INT 1
74363: ST_TO_ADDR
// if p3 = 116 then
74364: LD_VAR 0 3
74368: PUSH
74369: LD_INT 116
74371: EQUAL
74372: IFFALSE 74382
// sComputer := true ;
74374: LD_ADDR_EXP 118
74378: PUSH
74379: LD_INT 1
74381: ST_TO_ADDR
// if p3 = 117 then
74382: LD_VAR 0 3
74386: PUSH
74387: LD_INT 117
74389: EQUAL
74390: IFFALSE 74400
// s30 := true ;
74392: LD_ADDR_EXP 119
74396: PUSH
74397: LD_INT 1
74399: ST_TO_ADDR
// if p3 = 118 then
74400: LD_VAR 0 3
74404: PUSH
74405: LD_INT 118
74407: EQUAL
74408: IFFALSE 74418
// s60 := true ;
74410: LD_ADDR_EXP 120
74414: PUSH
74415: LD_INT 1
74417: ST_TO_ADDR
// end ; if p2 = hack_mode then
74418: LD_VAR 0 2
74422: PUSH
74423: LD_INT 101
74425: EQUAL
74426: IFFALSE 74554
// begin case p3 of 1 :
74428: LD_VAR 0 3
74432: PUSH
74433: LD_INT 1
74435: DOUBLE
74436: EQUAL
74437: IFTRUE 74441
74439: GO 74448
74441: POP
// hHackUnlimitedResources ; 2 :
74442: CALL 86817 0 0
74446: GO 74554
74448: LD_INT 2
74450: DOUBLE
74451: EQUAL
74452: IFTRUE 74456
74454: GO 74463
74456: POP
// hHackSetLevel10 ; 3 :
74457: CALL 86950 0 0
74461: GO 74554
74463: LD_INT 3
74465: DOUBLE
74466: EQUAL
74467: IFTRUE 74471
74469: GO 74478
74471: POP
// hHackSetLevel10YourUnits ; 4 :
74472: CALL 87035 0 0
74476: GO 74554
74478: LD_INT 4
74480: DOUBLE
74481: EQUAL
74482: IFTRUE 74486
74484: GO 74493
74486: POP
// hHackInvincible ; 5 :
74487: CALL 87483 0 0
74491: GO 74554
74493: LD_INT 5
74495: DOUBLE
74496: EQUAL
74497: IFTRUE 74501
74499: GO 74508
74501: POP
// hHackInvisible ; 6 :
74502: CALL 87594 0 0
74506: GO 74554
74508: LD_INT 6
74510: DOUBLE
74511: EQUAL
74512: IFTRUE 74516
74514: GO 74523
74516: POP
// hHackChangeYourSide ; 7 :
74517: CALL 87651 0 0
74521: GO 74554
74523: LD_INT 7
74525: DOUBLE
74526: EQUAL
74527: IFTRUE 74531
74529: GO 74538
74531: POP
// hHackChangeUnitSide ; 8 :
74532: CALL 87693 0 0
74536: GO 74554
74538: LD_INT 8
74540: DOUBLE
74541: EQUAL
74542: IFTRUE 74546
74544: GO 74553
74546: POP
// hHackFog ; end ;
74547: CALL 87794 0 0
74551: GO 74554
74553: POP
// end ; if p2 = game_save_mode then
74554: LD_VAR 0 2
74558: PUSH
74559: LD_INT 102
74561: EQUAL
74562: IFFALSE 74619
// begin if p3 = 1 then
74564: LD_VAR 0 3
74568: PUSH
74569: LD_INT 1
74571: EQUAL
74572: IFFALSE 74584
// globalGameSaveCounter := p4 ;
74574: LD_ADDR_EXP 63
74578: PUSH
74579: LD_VAR 0 4
74583: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
74584: LD_VAR 0 3
74588: PUSH
74589: LD_INT 2
74591: EQUAL
74592: IFFALSE 74600
74594: PUSH
74595: LD_EXP 63
74599: AND
74600: IFFALSE 74619
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
74602: LD_STRING setGameSaveCounter(
74604: PUSH
74605: LD_EXP 63
74609: STR
74610: PUSH
74611: LD_STRING )
74613: STR
74614: PPUSH
74615: CALL_OW 559
// end ; end ;
74619: LD_VAR 0 7
74623: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
74624: LD_INT 0
74626: PPUSH
// streamModeActive := false ;
74627: LD_ADDR_EXP 64
74631: PUSH
74632: LD_INT 0
74634: ST_TO_ADDR
// normalCounter := 36 ;
74635: LD_ADDR_EXP 65
74639: PUSH
74640: LD_INT 36
74642: ST_TO_ADDR
// hardcoreCounter := 18 ;
74643: LD_ADDR_EXP 66
74647: PUSH
74648: LD_INT 18
74650: ST_TO_ADDR
// sRocket := false ;
74651: LD_ADDR_EXP 69
74655: PUSH
74656: LD_INT 0
74658: ST_TO_ADDR
// sSpeed := false ;
74659: LD_ADDR_EXP 68
74663: PUSH
74664: LD_INT 0
74666: ST_TO_ADDR
// sEngine := false ;
74667: LD_ADDR_EXP 70
74671: PUSH
74672: LD_INT 0
74674: ST_TO_ADDR
// sSpec := false ;
74675: LD_ADDR_EXP 67
74679: PUSH
74680: LD_INT 0
74682: ST_TO_ADDR
// sLevel := false ;
74683: LD_ADDR_EXP 71
74687: PUSH
74688: LD_INT 0
74690: ST_TO_ADDR
// sArmoury := false ;
74691: LD_ADDR_EXP 72
74695: PUSH
74696: LD_INT 0
74698: ST_TO_ADDR
// sRadar := false ;
74699: LD_ADDR_EXP 73
74703: PUSH
74704: LD_INT 0
74706: ST_TO_ADDR
// sBunker := false ;
74707: LD_ADDR_EXP 74
74711: PUSH
74712: LD_INT 0
74714: ST_TO_ADDR
// sHack := false ;
74715: LD_ADDR_EXP 75
74719: PUSH
74720: LD_INT 0
74722: ST_TO_ADDR
// sFire := false ;
74723: LD_ADDR_EXP 76
74727: PUSH
74728: LD_INT 0
74730: ST_TO_ADDR
// sRefresh := false ;
74731: LD_ADDR_EXP 77
74735: PUSH
74736: LD_INT 0
74738: ST_TO_ADDR
// sExp := false ;
74739: LD_ADDR_EXP 78
74743: PUSH
74744: LD_INT 0
74746: ST_TO_ADDR
// sDepot := false ;
74747: LD_ADDR_EXP 79
74751: PUSH
74752: LD_INT 0
74754: ST_TO_ADDR
// sFlag := false ;
74755: LD_ADDR_EXP 80
74759: PUSH
74760: LD_INT 0
74762: ST_TO_ADDR
// sKamikadze := false ;
74763: LD_ADDR_EXP 88
74767: PUSH
74768: LD_INT 0
74770: ST_TO_ADDR
// sTroll := false ;
74771: LD_ADDR_EXP 89
74775: PUSH
74776: LD_INT 0
74778: ST_TO_ADDR
// sSlow := false ;
74779: LD_ADDR_EXP 90
74783: PUSH
74784: LD_INT 0
74786: ST_TO_ADDR
// sLack := false ;
74787: LD_ADDR_EXP 91
74791: PUSH
74792: LD_INT 0
74794: ST_TO_ADDR
// sTank := false ;
74795: LD_ADDR_EXP 93
74799: PUSH
74800: LD_INT 0
74802: ST_TO_ADDR
// sRemote := false ;
74803: LD_ADDR_EXP 94
74807: PUSH
74808: LD_INT 0
74810: ST_TO_ADDR
// sPowell := false ;
74811: LD_ADDR_EXP 95
74815: PUSH
74816: LD_INT 0
74818: ST_TO_ADDR
// sTeleport := false ;
74819: LD_ADDR_EXP 98
74823: PUSH
74824: LD_INT 0
74826: ST_TO_ADDR
// sOilTower := false ;
74827: LD_ADDR_EXP 100
74831: PUSH
74832: LD_INT 0
74834: ST_TO_ADDR
// sShovel := false ;
74835: LD_ADDR_EXP 101
74839: PUSH
74840: LD_INT 0
74842: ST_TO_ADDR
// sSheik := false ;
74843: LD_ADDR_EXP 102
74847: PUSH
74848: LD_INT 0
74850: ST_TO_ADDR
// sEarthquake := false ;
74851: LD_ADDR_EXP 104
74855: PUSH
74856: LD_INT 0
74858: ST_TO_ADDR
// sAI := false ;
74859: LD_ADDR_EXP 105
74863: PUSH
74864: LD_INT 0
74866: ST_TO_ADDR
// sCargo := false ;
74867: LD_ADDR_EXP 108
74871: PUSH
74872: LD_INT 0
74874: ST_TO_ADDR
// sDLaser := false ;
74875: LD_ADDR_EXP 109
74879: PUSH
74880: LD_INT 0
74882: ST_TO_ADDR
// sExchange := false ;
74883: LD_ADDR_EXP 110
74887: PUSH
74888: LD_INT 0
74890: ST_TO_ADDR
// sFac := false ;
74891: LD_ADDR_EXP 111
74895: PUSH
74896: LD_INT 0
74898: ST_TO_ADDR
// sPower := false ;
74899: LD_ADDR_EXP 112
74903: PUSH
74904: LD_INT 0
74906: ST_TO_ADDR
// sRandom := false ;
74907: LD_ADDR_EXP 113
74911: PUSH
74912: LD_INT 0
74914: ST_TO_ADDR
// sShield := false ;
74915: LD_ADDR_EXP 114
74919: PUSH
74920: LD_INT 0
74922: ST_TO_ADDR
// sTime := false ;
74923: LD_ADDR_EXP 115
74927: PUSH
74928: LD_INT 0
74930: ST_TO_ADDR
// sTools := false ;
74931: LD_ADDR_EXP 116
74935: PUSH
74936: LD_INT 0
74938: ST_TO_ADDR
// sSold := false ;
74939: LD_ADDR_EXP 81
74943: PUSH
74944: LD_INT 0
74946: ST_TO_ADDR
// sDiff := false ;
74947: LD_ADDR_EXP 82
74951: PUSH
74952: LD_INT 0
74954: ST_TO_ADDR
// sFog := false ;
74955: LD_ADDR_EXP 85
74959: PUSH
74960: LD_INT 0
74962: ST_TO_ADDR
// sReset := false ;
74963: LD_ADDR_EXP 86
74967: PUSH
74968: LD_INT 0
74970: ST_TO_ADDR
// sSun := false ;
74971: LD_ADDR_EXP 87
74975: PUSH
74976: LD_INT 0
74978: ST_TO_ADDR
// sTiger := false ;
74979: LD_ADDR_EXP 83
74983: PUSH
74984: LD_INT 0
74986: ST_TO_ADDR
// sBomb := false ;
74987: LD_ADDR_EXP 84
74991: PUSH
74992: LD_INT 0
74994: ST_TO_ADDR
// sWound := false ;
74995: LD_ADDR_EXP 92
74999: PUSH
75000: LD_INT 0
75002: ST_TO_ADDR
// sBetray := false ;
75003: LD_ADDR_EXP 96
75007: PUSH
75008: LD_INT 0
75010: ST_TO_ADDR
// sContamin := false ;
75011: LD_ADDR_EXP 97
75015: PUSH
75016: LD_INT 0
75018: ST_TO_ADDR
// sOil := false ;
75019: LD_ADDR_EXP 99
75023: PUSH
75024: LD_INT 0
75026: ST_TO_ADDR
// sStu := false ;
75027: LD_ADDR_EXP 103
75031: PUSH
75032: LD_INT 0
75034: ST_TO_ADDR
// sBazooka := false ;
75035: LD_ADDR_EXP 106
75039: PUSH
75040: LD_INT 0
75042: ST_TO_ADDR
// sMortar := false ;
75043: LD_ADDR_EXP 107
75047: PUSH
75048: LD_INT 0
75050: ST_TO_ADDR
// sRanger := false ;
75051: LD_ADDR_EXP 117
75055: PUSH
75056: LD_INT 0
75058: ST_TO_ADDR
// sComputer := false ;
75059: LD_ADDR_EXP 118
75063: PUSH
75064: LD_INT 0
75066: ST_TO_ADDR
// s30 := false ;
75067: LD_ADDR_EXP 119
75071: PUSH
75072: LD_INT 0
75074: ST_TO_ADDR
// s60 := false ;
75075: LD_ADDR_EXP 120
75079: PUSH
75080: LD_INT 0
75082: ST_TO_ADDR
// end ;
75083: LD_VAR 0 1
75087: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
75088: LD_INT 0
75090: PPUSH
75091: PPUSH
75092: PPUSH
75093: PPUSH
75094: PPUSH
75095: PPUSH
75096: PPUSH
// result := [ ] ;
75097: LD_ADDR_VAR 0 2
75101: PUSH
75102: EMPTY
75103: ST_TO_ADDR
// if campaign_id = 1 then
75104: LD_OWVAR 69
75108: PUSH
75109: LD_INT 1
75111: EQUAL
75112: IFFALSE 78278
// begin case mission_number of 1 :
75114: LD_OWVAR 70
75118: PUSH
75119: LD_INT 1
75121: DOUBLE
75122: EQUAL
75123: IFTRUE 75127
75125: GO 75203
75127: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
75128: LD_ADDR_VAR 0 2
75132: PUSH
75133: LD_INT 2
75135: PUSH
75136: LD_INT 4
75138: PUSH
75139: LD_INT 11
75141: PUSH
75142: LD_INT 12
75144: PUSH
75145: LD_INT 15
75147: PUSH
75148: LD_INT 16
75150: PUSH
75151: LD_INT 22
75153: PUSH
75154: LD_INT 23
75156: PUSH
75157: LD_INT 26
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 101
75173: PUSH
75174: LD_INT 102
75176: PUSH
75177: LD_INT 106
75179: PUSH
75180: LD_INT 116
75182: PUSH
75183: LD_INT 117
75185: PUSH
75186: LD_INT 118
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: LIST
75195: LIST
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: ST_TO_ADDR
75201: GO 78276
75203: LD_INT 2
75205: DOUBLE
75206: EQUAL
75207: IFTRUE 75211
75209: GO 75295
75211: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
75212: LD_ADDR_VAR 0 2
75216: PUSH
75217: LD_INT 2
75219: PUSH
75220: LD_INT 4
75222: PUSH
75223: LD_INT 11
75225: PUSH
75226: LD_INT 12
75228: PUSH
75229: LD_INT 15
75231: PUSH
75232: LD_INT 16
75234: PUSH
75235: LD_INT 22
75237: PUSH
75238: LD_INT 23
75240: PUSH
75241: LD_INT 26
75243: PUSH
75244: EMPTY
75245: LIST
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: LIST
75251: LIST
75252: LIST
75253: LIST
75254: PUSH
75255: LD_INT 101
75257: PUSH
75258: LD_INT 102
75260: PUSH
75261: LD_INT 105
75263: PUSH
75264: LD_INT 106
75266: PUSH
75267: LD_INT 108
75269: PUSH
75270: LD_INT 116
75272: PUSH
75273: LD_INT 117
75275: PUSH
75276: LD_INT 118
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: LIST
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: ST_TO_ADDR
75293: GO 78276
75295: LD_INT 3
75297: DOUBLE
75298: EQUAL
75299: IFTRUE 75303
75301: GO 75391
75303: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
75304: LD_ADDR_VAR 0 2
75308: PUSH
75309: LD_INT 2
75311: PUSH
75312: LD_INT 4
75314: PUSH
75315: LD_INT 5
75317: PUSH
75318: LD_INT 11
75320: PUSH
75321: LD_INT 12
75323: PUSH
75324: LD_INT 15
75326: PUSH
75327: LD_INT 16
75329: PUSH
75330: LD_INT 22
75332: PUSH
75333: LD_INT 26
75335: PUSH
75336: LD_INT 36
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: PUSH
75351: LD_INT 101
75353: PUSH
75354: LD_INT 102
75356: PUSH
75357: LD_INT 105
75359: PUSH
75360: LD_INT 106
75362: PUSH
75363: LD_INT 108
75365: PUSH
75366: LD_INT 116
75368: PUSH
75369: LD_INT 117
75371: PUSH
75372: LD_INT 118
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: ST_TO_ADDR
75389: GO 78276
75391: LD_INT 4
75393: DOUBLE
75394: EQUAL
75395: IFTRUE 75399
75397: GO 75495
75399: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
75400: LD_ADDR_VAR 0 2
75404: PUSH
75405: LD_INT 2
75407: PUSH
75408: LD_INT 4
75410: PUSH
75411: LD_INT 5
75413: PUSH
75414: LD_INT 8
75416: PUSH
75417: LD_INT 11
75419: PUSH
75420: LD_INT 12
75422: PUSH
75423: LD_INT 15
75425: PUSH
75426: LD_INT 16
75428: PUSH
75429: LD_INT 22
75431: PUSH
75432: LD_INT 23
75434: PUSH
75435: LD_INT 26
75437: PUSH
75438: LD_INT 36
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: PUSH
75455: LD_INT 101
75457: PUSH
75458: LD_INT 102
75460: PUSH
75461: LD_INT 105
75463: PUSH
75464: LD_INT 106
75466: PUSH
75467: LD_INT 108
75469: PUSH
75470: LD_INT 116
75472: PUSH
75473: LD_INT 117
75475: PUSH
75476: LD_INT 118
75478: PUSH
75479: EMPTY
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: ST_TO_ADDR
75493: GO 78276
75495: LD_INT 5
75497: DOUBLE
75498: EQUAL
75499: IFTRUE 75503
75501: GO 75615
75503: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
75504: LD_ADDR_VAR 0 2
75508: PUSH
75509: LD_INT 2
75511: PUSH
75512: LD_INT 4
75514: PUSH
75515: LD_INT 5
75517: PUSH
75518: LD_INT 6
75520: PUSH
75521: LD_INT 8
75523: PUSH
75524: LD_INT 11
75526: PUSH
75527: LD_INT 12
75529: PUSH
75530: LD_INT 15
75532: PUSH
75533: LD_INT 16
75535: PUSH
75536: LD_INT 22
75538: PUSH
75539: LD_INT 23
75541: PUSH
75542: LD_INT 25
75544: PUSH
75545: LD_INT 26
75547: PUSH
75548: LD_INT 36
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 101
75569: PUSH
75570: LD_INT 102
75572: PUSH
75573: LD_INT 105
75575: PUSH
75576: LD_INT 106
75578: PUSH
75579: LD_INT 108
75581: PUSH
75582: LD_INT 109
75584: PUSH
75585: LD_INT 112
75587: PUSH
75588: LD_INT 116
75590: PUSH
75591: LD_INT 117
75593: PUSH
75594: LD_INT 118
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: LIST
75608: PUSH
75609: EMPTY
75610: LIST
75611: LIST
75612: ST_TO_ADDR
75613: GO 78276
75615: LD_INT 6
75617: DOUBLE
75618: EQUAL
75619: IFTRUE 75623
75621: GO 75755
75623: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
75624: LD_ADDR_VAR 0 2
75628: PUSH
75629: LD_INT 2
75631: PUSH
75632: LD_INT 4
75634: PUSH
75635: LD_INT 5
75637: PUSH
75638: LD_INT 6
75640: PUSH
75641: LD_INT 8
75643: PUSH
75644: LD_INT 11
75646: PUSH
75647: LD_INT 12
75649: PUSH
75650: LD_INT 15
75652: PUSH
75653: LD_INT 16
75655: PUSH
75656: LD_INT 20
75658: PUSH
75659: LD_INT 21
75661: PUSH
75662: LD_INT 22
75664: PUSH
75665: LD_INT 23
75667: PUSH
75668: LD_INT 25
75670: PUSH
75671: LD_INT 26
75673: PUSH
75674: LD_INT 30
75676: PUSH
75677: LD_INT 31
75679: PUSH
75680: LD_INT 32
75682: PUSH
75683: LD_INT 36
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: LIST
75694: LIST
75695: LIST
75696: LIST
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: PUSH
75707: LD_INT 101
75709: PUSH
75710: LD_INT 102
75712: PUSH
75713: LD_INT 105
75715: PUSH
75716: LD_INT 106
75718: PUSH
75719: LD_INT 108
75721: PUSH
75722: LD_INT 109
75724: PUSH
75725: LD_INT 112
75727: PUSH
75728: LD_INT 116
75730: PUSH
75731: LD_INT 117
75733: PUSH
75734: LD_INT 118
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: ST_TO_ADDR
75753: GO 78276
75755: LD_INT 7
75757: DOUBLE
75758: EQUAL
75759: IFTRUE 75763
75761: GO 75875
75763: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
75764: LD_ADDR_VAR 0 2
75768: PUSH
75769: LD_INT 2
75771: PUSH
75772: LD_INT 4
75774: PUSH
75775: LD_INT 5
75777: PUSH
75778: LD_INT 7
75780: PUSH
75781: LD_INT 11
75783: PUSH
75784: LD_INT 12
75786: PUSH
75787: LD_INT 15
75789: PUSH
75790: LD_INT 16
75792: PUSH
75793: LD_INT 20
75795: PUSH
75796: LD_INT 21
75798: PUSH
75799: LD_INT 22
75801: PUSH
75802: LD_INT 23
75804: PUSH
75805: LD_INT 25
75807: PUSH
75808: LD_INT 26
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: PUSH
75827: LD_INT 101
75829: PUSH
75830: LD_INT 102
75832: PUSH
75833: LD_INT 103
75835: PUSH
75836: LD_INT 105
75838: PUSH
75839: LD_INT 106
75841: PUSH
75842: LD_INT 108
75844: PUSH
75845: LD_INT 112
75847: PUSH
75848: LD_INT 116
75850: PUSH
75851: LD_INT 117
75853: PUSH
75854: LD_INT 118
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: ST_TO_ADDR
75873: GO 78276
75875: LD_INT 8
75877: DOUBLE
75878: EQUAL
75879: IFTRUE 75883
75881: GO 76023
75883: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
75884: LD_ADDR_VAR 0 2
75888: PUSH
75889: LD_INT 2
75891: PUSH
75892: LD_INT 4
75894: PUSH
75895: LD_INT 5
75897: PUSH
75898: LD_INT 6
75900: PUSH
75901: LD_INT 7
75903: PUSH
75904: LD_INT 8
75906: PUSH
75907: LD_INT 11
75909: PUSH
75910: LD_INT 12
75912: PUSH
75913: LD_INT 15
75915: PUSH
75916: LD_INT 16
75918: PUSH
75919: LD_INT 20
75921: PUSH
75922: LD_INT 21
75924: PUSH
75925: LD_INT 22
75927: PUSH
75928: LD_INT 23
75930: PUSH
75931: LD_INT 25
75933: PUSH
75934: LD_INT 26
75936: PUSH
75937: LD_INT 30
75939: PUSH
75940: LD_INT 31
75942: PUSH
75943: LD_INT 32
75945: PUSH
75946: LD_INT 36
75948: PUSH
75949: EMPTY
75950: LIST
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: LIST
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: PUSH
75971: LD_INT 101
75973: PUSH
75974: LD_INT 102
75976: PUSH
75977: LD_INT 103
75979: PUSH
75980: LD_INT 105
75982: PUSH
75983: LD_INT 106
75985: PUSH
75986: LD_INT 108
75988: PUSH
75989: LD_INT 109
75991: PUSH
75992: LD_INT 112
75994: PUSH
75995: LD_INT 116
75997: PUSH
75998: LD_INT 117
76000: PUSH
76001: LD_INT 118
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: ST_TO_ADDR
76021: GO 78276
76023: LD_INT 9
76025: DOUBLE
76026: EQUAL
76027: IFTRUE 76031
76029: GO 76179
76031: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
76032: LD_ADDR_VAR 0 2
76036: PUSH
76037: LD_INT 2
76039: PUSH
76040: LD_INT 4
76042: PUSH
76043: LD_INT 5
76045: PUSH
76046: LD_INT 6
76048: PUSH
76049: LD_INT 7
76051: PUSH
76052: LD_INT 8
76054: PUSH
76055: LD_INT 11
76057: PUSH
76058: LD_INT 12
76060: PUSH
76061: LD_INT 15
76063: PUSH
76064: LD_INT 16
76066: PUSH
76067: LD_INT 20
76069: PUSH
76070: LD_INT 21
76072: PUSH
76073: LD_INT 22
76075: PUSH
76076: LD_INT 23
76078: PUSH
76079: LD_INT 25
76081: PUSH
76082: LD_INT 26
76084: PUSH
76085: LD_INT 28
76087: PUSH
76088: LD_INT 30
76090: PUSH
76091: LD_INT 31
76093: PUSH
76094: LD_INT 32
76096: PUSH
76097: LD_INT 36
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: LIST
76109: LIST
76110: LIST
76111: LIST
76112: LIST
76113: LIST
76114: LIST
76115: LIST
76116: LIST
76117: LIST
76118: LIST
76119: LIST
76120: LIST
76121: LIST
76122: PUSH
76123: LD_INT 101
76125: PUSH
76126: LD_INT 102
76128: PUSH
76129: LD_INT 103
76131: PUSH
76132: LD_INT 105
76134: PUSH
76135: LD_INT 106
76137: PUSH
76138: LD_INT 108
76140: PUSH
76141: LD_INT 109
76143: PUSH
76144: LD_INT 112
76146: PUSH
76147: LD_INT 114
76149: PUSH
76150: LD_INT 116
76152: PUSH
76153: LD_INT 117
76155: PUSH
76156: LD_INT 118
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: LIST
76167: LIST
76168: LIST
76169: LIST
76170: LIST
76171: LIST
76172: PUSH
76173: EMPTY
76174: LIST
76175: LIST
76176: ST_TO_ADDR
76177: GO 78276
76179: LD_INT 10
76181: DOUBLE
76182: EQUAL
76183: IFTRUE 76187
76185: GO 76383
76187: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
76188: LD_ADDR_VAR 0 2
76192: PUSH
76193: LD_INT 2
76195: PUSH
76196: LD_INT 4
76198: PUSH
76199: LD_INT 5
76201: PUSH
76202: LD_INT 6
76204: PUSH
76205: LD_INT 7
76207: PUSH
76208: LD_INT 8
76210: PUSH
76211: LD_INT 9
76213: PUSH
76214: LD_INT 10
76216: PUSH
76217: LD_INT 11
76219: PUSH
76220: LD_INT 12
76222: PUSH
76223: LD_INT 13
76225: PUSH
76226: LD_INT 14
76228: PUSH
76229: LD_INT 15
76231: PUSH
76232: LD_INT 16
76234: PUSH
76235: LD_INT 17
76237: PUSH
76238: LD_INT 18
76240: PUSH
76241: LD_INT 19
76243: PUSH
76244: LD_INT 20
76246: PUSH
76247: LD_INT 21
76249: PUSH
76250: LD_INT 22
76252: PUSH
76253: LD_INT 23
76255: PUSH
76256: LD_INT 24
76258: PUSH
76259: LD_INT 25
76261: PUSH
76262: LD_INT 26
76264: PUSH
76265: LD_INT 28
76267: PUSH
76268: LD_INT 30
76270: PUSH
76271: LD_INT 31
76273: PUSH
76274: LD_INT 32
76276: PUSH
76277: LD_INT 36
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: LIST
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: LIST
76308: LIST
76309: LIST
76310: PUSH
76311: LD_INT 101
76313: PUSH
76314: LD_INT 102
76316: PUSH
76317: LD_INT 103
76319: PUSH
76320: LD_INT 104
76322: PUSH
76323: LD_INT 105
76325: PUSH
76326: LD_INT 106
76328: PUSH
76329: LD_INT 107
76331: PUSH
76332: LD_INT 108
76334: PUSH
76335: LD_INT 109
76337: PUSH
76338: LD_INT 110
76340: PUSH
76341: LD_INT 111
76343: PUSH
76344: LD_INT 112
76346: PUSH
76347: LD_INT 114
76349: PUSH
76350: LD_INT 116
76352: PUSH
76353: LD_INT 117
76355: PUSH
76356: LD_INT 118
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: LIST
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: LIST
76369: LIST
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: ST_TO_ADDR
76381: GO 78276
76383: LD_INT 11
76385: DOUBLE
76386: EQUAL
76387: IFTRUE 76391
76389: GO 76595
76391: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
76392: LD_ADDR_VAR 0 2
76396: PUSH
76397: LD_INT 2
76399: PUSH
76400: LD_INT 3
76402: PUSH
76403: LD_INT 4
76405: PUSH
76406: LD_INT 5
76408: PUSH
76409: LD_INT 6
76411: PUSH
76412: LD_INT 7
76414: PUSH
76415: LD_INT 8
76417: PUSH
76418: LD_INT 9
76420: PUSH
76421: LD_INT 10
76423: PUSH
76424: LD_INT 11
76426: PUSH
76427: LD_INT 12
76429: PUSH
76430: LD_INT 13
76432: PUSH
76433: LD_INT 14
76435: PUSH
76436: LD_INT 15
76438: PUSH
76439: LD_INT 16
76441: PUSH
76442: LD_INT 17
76444: PUSH
76445: LD_INT 18
76447: PUSH
76448: LD_INT 19
76450: PUSH
76451: LD_INT 20
76453: PUSH
76454: LD_INT 21
76456: PUSH
76457: LD_INT 22
76459: PUSH
76460: LD_INT 23
76462: PUSH
76463: LD_INT 24
76465: PUSH
76466: LD_INT 25
76468: PUSH
76469: LD_INT 26
76471: PUSH
76472: LD_INT 28
76474: PUSH
76475: LD_INT 30
76477: PUSH
76478: LD_INT 31
76480: PUSH
76481: LD_INT 32
76483: PUSH
76484: LD_INT 34
76486: PUSH
76487: LD_INT 36
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: PUSH
76523: LD_INT 101
76525: PUSH
76526: LD_INT 102
76528: PUSH
76529: LD_INT 103
76531: PUSH
76532: LD_INT 104
76534: PUSH
76535: LD_INT 105
76537: PUSH
76538: LD_INT 106
76540: PUSH
76541: LD_INT 107
76543: PUSH
76544: LD_INT 108
76546: PUSH
76547: LD_INT 109
76549: PUSH
76550: LD_INT 110
76552: PUSH
76553: LD_INT 111
76555: PUSH
76556: LD_INT 112
76558: PUSH
76559: LD_INT 114
76561: PUSH
76562: LD_INT 116
76564: PUSH
76565: LD_INT 117
76567: PUSH
76568: LD_INT 118
76570: PUSH
76571: EMPTY
76572: LIST
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: LIST
76583: LIST
76584: LIST
76585: LIST
76586: LIST
76587: LIST
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: ST_TO_ADDR
76593: GO 78276
76595: LD_INT 12
76597: DOUBLE
76598: EQUAL
76599: IFTRUE 76603
76601: GO 76823
76603: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
76604: LD_ADDR_VAR 0 2
76608: PUSH
76609: LD_INT 1
76611: PUSH
76612: LD_INT 2
76614: PUSH
76615: LD_INT 3
76617: PUSH
76618: LD_INT 4
76620: PUSH
76621: LD_INT 5
76623: PUSH
76624: LD_INT 6
76626: PUSH
76627: LD_INT 7
76629: PUSH
76630: LD_INT 8
76632: PUSH
76633: LD_INT 9
76635: PUSH
76636: LD_INT 10
76638: PUSH
76639: LD_INT 11
76641: PUSH
76642: LD_INT 12
76644: PUSH
76645: LD_INT 13
76647: PUSH
76648: LD_INT 14
76650: PUSH
76651: LD_INT 15
76653: PUSH
76654: LD_INT 16
76656: PUSH
76657: LD_INT 17
76659: PUSH
76660: LD_INT 18
76662: PUSH
76663: LD_INT 19
76665: PUSH
76666: LD_INT 20
76668: PUSH
76669: LD_INT 21
76671: PUSH
76672: LD_INT 22
76674: PUSH
76675: LD_INT 23
76677: PUSH
76678: LD_INT 24
76680: PUSH
76681: LD_INT 25
76683: PUSH
76684: LD_INT 26
76686: PUSH
76687: LD_INT 27
76689: PUSH
76690: LD_INT 28
76692: PUSH
76693: LD_INT 30
76695: PUSH
76696: LD_INT 31
76698: PUSH
76699: LD_INT 32
76701: PUSH
76702: LD_INT 33
76704: PUSH
76705: LD_INT 34
76707: PUSH
76708: LD_INT 36
76710: PUSH
76711: EMPTY
76712: LIST
76713: LIST
76714: LIST
76715: LIST
76716: LIST
76717: LIST
76718: LIST
76719: LIST
76720: LIST
76721: LIST
76722: LIST
76723: LIST
76724: LIST
76725: LIST
76726: LIST
76727: LIST
76728: LIST
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: LIST
76736: LIST
76737: LIST
76738: LIST
76739: LIST
76740: LIST
76741: LIST
76742: LIST
76743: LIST
76744: LIST
76745: LIST
76746: PUSH
76747: LD_INT 101
76749: PUSH
76750: LD_INT 102
76752: PUSH
76753: LD_INT 103
76755: PUSH
76756: LD_INT 104
76758: PUSH
76759: LD_INT 105
76761: PUSH
76762: LD_INT 106
76764: PUSH
76765: LD_INT 107
76767: PUSH
76768: LD_INT 108
76770: PUSH
76771: LD_INT 109
76773: PUSH
76774: LD_INT 110
76776: PUSH
76777: LD_INT 111
76779: PUSH
76780: LD_INT 112
76782: PUSH
76783: LD_INT 113
76785: PUSH
76786: LD_INT 114
76788: PUSH
76789: LD_INT 116
76791: PUSH
76792: LD_INT 117
76794: PUSH
76795: LD_INT 118
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: LIST
76802: LIST
76803: LIST
76804: LIST
76805: LIST
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: LIST
76811: LIST
76812: LIST
76813: LIST
76814: LIST
76815: LIST
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: ST_TO_ADDR
76821: GO 78276
76823: LD_INT 13
76825: DOUBLE
76826: EQUAL
76827: IFTRUE 76831
76829: GO 77039
76831: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
76832: LD_ADDR_VAR 0 2
76836: PUSH
76837: LD_INT 1
76839: PUSH
76840: LD_INT 2
76842: PUSH
76843: LD_INT 3
76845: PUSH
76846: LD_INT 4
76848: PUSH
76849: LD_INT 5
76851: PUSH
76852: LD_INT 8
76854: PUSH
76855: LD_INT 9
76857: PUSH
76858: LD_INT 10
76860: PUSH
76861: LD_INT 11
76863: PUSH
76864: LD_INT 12
76866: PUSH
76867: LD_INT 14
76869: PUSH
76870: LD_INT 15
76872: PUSH
76873: LD_INT 16
76875: PUSH
76876: LD_INT 17
76878: PUSH
76879: LD_INT 18
76881: PUSH
76882: LD_INT 19
76884: PUSH
76885: LD_INT 20
76887: PUSH
76888: LD_INT 21
76890: PUSH
76891: LD_INT 22
76893: PUSH
76894: LD_INT 23
76896: PUSH
76897: LD_INT 24
76899: PUSH
76900: LD_INT 25
76902: PUSH
76903: LD_INT 26
76905: PUSH
76906: LD_INT 27
76908: PUSH
76909: LD_INT 28
76911: PUSH
76912: LD_INT 30
76914: PUSH
76915: LD_INT 31
76917: PUSH
76918: LD_INT 32
76920: PUSH
76921: LD_INT 33
76923: PUSH
76924: LD_INT 34
76926: PUSH
76927: LD_INT 36
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: LIST
76948: LIST
76949: LIST
76950: LIST
76951: LIST
76952: LIST
76953: LIST
76954: LIST
76955: LIST
76956: LIST
76957: LIST
76958: LIST
76959: LIST
76960: LIST
76961: LIST
76962: PUSH
76963: LD_INT 101
76965: PUSH
76966: LD_INT 102
76968: PUSH
76969: LD_INT 103
76971: PUSH
76972: LD_INT 104
76974: PUSH
76975: LD_INT 105
76977: PUSH
76978: LD_INT 106
76980: PUSH
76981: LD_INT 107
76983: PUSH
76984: LD_INT 108
76986: PUSH
76987: LD_INT 109
76989: PUSH
76990: LD_INT 110
76992: PUSH
76993: LD_INT 111
76995: PUSH
76996: LD_INT 112
76998: PUSH
76999: LD_INT 113
77001: PUSH
77002: LD_INT 114
77004: PUSH
77005: LD_INT 116
77007: PUSH
77008: LD_INT 117
77010: PUSH
77011: LD_INT 118
77013: PUSH
77014: EMPTY
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: LIST
77028: LIST
77029: LIST
77030: LIST
77031: LIST
77032: PUSH
77033: EMPTY
77034: LIST
77035: LIST
77036: ST_TO_ADDR
77037: GO 78276
77039: LD_INT 14
77041: DOUBLE
77042: EQUAL
77043: IFTRUE 77047
77045: GO 77271
77047: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
77048: LD_ADDR_VAR 0 2
77052: PUSH
77053: LD_INT 1
77055: PUSH
77056: LD_INT 2
77058: PUSH
77059: LD_INT 3
77061: PUSH
77062: LD_INT 4
77064: PUSH
77065: LD_INT 5
77067: PUSH
77068: LD_INT 6
77070: PUSH
77071: LD_INT 7
77073: PUSH
77074: LD_INT 8
77076: PUSH
77077: LD_INT 9
77079: PUSH
77080: LD_INT 10
77082: PUSH
77083: LD_INT 11
77085: PUSH
77086: LD_INT 12
77088: PUSH
77089: LD_INT 13
77091: PUSH
77092: LD_INT 14
77094: PUSH
77095: LD_INT 15
77097: PUSH
77098: LD_INT 16
77100: PUSH
77101: LD_INT 17
77103: PUSH
77104: LD_INT 18
77106: PUSH
77107: LD_INT 19
77109: PUSH
77110: LD_INT 20
77112: PUSH
77113: LD_INT 21
77115: PUSH
77116: LD_INT 22
77118: PUSH
77119: LD_INT 23
77121: PUSH
77122: LD_INT 24
77124: PUSH
77125: LD_INT 25
77127: PUSH
77128: LD_INT 26
77130: PUSH
77131: LD_INT 27
77133: PUSH
77134: LD_INT 28
77136: PUSH
77137: LD_INT 29
77139: PUSH
77140: LD_INT 30
77142: PUSH
77143: LD_INT 31
77145: PUSH
77146: LD_INT 32
77148: PUSH
77149: LD_INT 33
77151: PUSH
77152: LD_INT 34
77154: PUSH
77155: LD_INT 36
77157: PUSH
77158: EMPTY
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: LIST
77164: LIST
77165: LIST
77166: LIST
77167: LIST
77168: LIST
77169: LIST
77170: LIST
77171: LIST
77172: LIST
77173: LIST
77174: LIST
77175: LIST
77176: LIST
77177: LIST
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 101
77197: PUSH
77198: LD_INT 102
77200: PUSH
77201: LD_INT 103
77203: PUSH
77204: LD_INT 104
77206: PUSH
77207: LD_INT 105
77209: PUSH
77210: LD_INT 106
77212: PUSH
77213: LD_INT 107
77215: PUSH
77216: LD_INT 108
77218: PUSH
77219: LD_INT 109
77221: PUSH
77222: LD_INT 110
77224: PUSH
77225: LD_INT 111
77227: PUSH
77228: LD_INT 112
77230: PUSH
77231: LD_INT 113
77233: PUSH
77234: LD_INT 114
77236: PUSH
77237: LD_INT 116
77239: PUSH
77240: LD_INT 117
77242: PUSH
77243: LD_INT 118
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: LIST
77250: LIST
77251: LIST
77252: LIST
77253: LIST
77254: LIST
77255: LIST
77256: LIST
77257: LIST
77258: LIST
77259: LIST
77260: LIST
77261: LIST
77262: LIST
77263: LIST
77264: PUSH
77265: EMPTY
77266: LIST
77267: LIST
77268: ST_TO_ADDR
77269: GO 78276
77271: LD_INT 15
77273: DOUBLE
77274: EQUAL
77275: IFTRUE 77279
77277: GO 77503
77279: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
77280: LD_ADDR_VAR 0 2
77284: PUSH
77285: LD_INT 1
77287: PUSH
77288: LD_INT 2
77290: PUSH
77291: LD_INT 3
77293: PUSH
77294: LD_INT 4
77296: PUSH
77297: LD_INT 5
77299: PUSH
77300: LD_INT 6
77302: PUSH
77303: LD_INT 7
77305: PUSH
77306: LD_INT 8
77308: PUSH
77309: LD_INT 9
77311: PUSH
77312: LD_INT 10
77314: PUSH
77315: LD_INT 11
77317: PUSH
77318: LD_INT 12
77320: PUSH
77321: LD_INT 13
77323: PUSH
77324: LD_INT 14
77326: PUSH
77327: LD_INT 15
77329: PUSH
77330: LD_INT 16
77332: PUSH
77333: LD_INT 17
77335: PUSH
77336: LD_INT 18
77338: PUSH
77339: LD_INT 19
77341: PUSH
77342: LD_INT 20
77344: PUSH
77345: LD_INT 21
77347: PUSH
77348: LD_INT 22
77350: PUSH
77351: LD_INT 23
77353: PUSH
77354: LD_INT 24
77356: PUSH
77357: LD_INT 25
77359: PUSH
77360: LD_INT 26
77362: PUSH
77363: LD_INT 27
77365: PUSH
77366: LD_INT 28
77368: PUSH
77369: LD_INT 29
77371: PUSH
77372: LD_INT 30
77374: PUSH
77375: LD_INT 31
77377: PUSH
77378: LD_INT 32
77380: PUSH
77381: LD_INT 33
77383: PUSH
77384: LD_INT 34
77386: PUSH
77387: LD_INT 36
77389: PUSH
77390: EMPTY
77391: LIST
77392: LIST
77393: LIST
77394: LIST
77395: LIST
77396: LIST
77397: LIST
77398: LIST
77399: LIST
77400: LIST
77401: LIST
77402: LIST
77403: LIST
77404: LIST
77405: LIST
77406: LIST
77407: LIST
77408: LIST
77409: LIST
77410: LIST
77411: LIST
77412: LIST
77413: LIST
77414: LIST
77415: LIST
77416: LIST
77417: LIST
77418: LIST
77419: LIST
77420: LIST
77421: LIST
77422: LIST
77423: LIST
77424: LIST
77425: LIST
77426: PUSH
77427: LD_INT 101
77429: PUSH
77430: LD_INT 102
77432: PUSH
77433: LD_INT 103
77435: PUSH
77436: LD_INT 104
77438: PUSH
77439: LD_INT 105
77441: PUSH
77442: LD_INT 106
77444: PUSH
77445: LD_INT 107
77447: PUSH
77448: LD_INT 108
77450: PUSH
77451: LD_INT 109
77453: PUSH
77454: LD_INT 110
77456: PUSH
77457: LD_INT 111
77459: PUSH
77460: LD_INT 112
77462: PUSH
77463: LD_INT 113
77465: PUSH
77466: LD_INT 114
77468: PUSH
77469: LD_INT 116
77471: PUSH
77472: LD_INT 117
77474: PUSH
77475: LD_INT 118
77477: PUSH
77478: EMPTY
77479: LIST
77480: LIST
77481: LIST
77482: LIST
77483: LIST
77484: LIST
77485: LIST
77486: LIST
77487: LIST
77488: LIST
77489: LIST
77490: LIST
77491: LIST
77492: LIST
77493: LIST
77494: LIST
77495: LIST
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: ST_TO_ADDR
77501: GO 78276
77503: LD_INT 16
77505: DOUBLE
77506: EQUAL
77507: IFTRUE 77511
77509: GO 77647
77511: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
77512: LD_ADDR_VAR 0 2
77516: PUSH
77517: LD_INT 2
77519: PUSH
77520: LD_INT 4
77522: PUSH
77523: LD_INT 5
77525: PUSH
77526: LD_INT 7
77528: PUSH
77529: LD_INT 11
77531: PUSH
77532: LD_INT 12
77534: PUSH
77535: LD_INT 15
77537: PUSH
77538: LD_INT 16
77540: PUSH
77541: LD_INT 20
77543: PUSH
77544: LD_INT 21
77546: PUSH
77547: LD_INT 22
77549: PUSH
77550: LD_INT 23
77552: PUSH
77553: LD_INT 25
77555: PUSH
77556: LD_INT 26
77558: PUSH
77559: LD_INT 30
77561: PUSH
77562: LD_INT 31
77564: PUSH
77565: LD_INT 32
77567: PUSH
77568: LD_INT 33
77570: PUSH
77571: LD_INT 34
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: LIST
77578: LIST
77579: LIST
77580: LIST
77581: LIST
77582: LIST
77583: LIST
77584: LIST
77585: LIST
77586: LIST
77587: LIST
77588: LIST
77589: LIST
77590: LIST
77591: LIST
77592: LIST
77593: LIST
77594: PUSH
77595: LD_INT 101
77597: PUSH
77598: LD_INT 102
77600: PUSH
77601: LD_INT 103
77603: PUSH
77604: LD_INT 106
77606: PUSH
77607: LD_INT 108
77609: PUSH
77610: LD_INT 112
77612: PUSH
77613: LD_INT 113
77615: PUSH
77616: LD_INT 114
77618: PUSH
77619: LD_INT 116
77621: PUSH
77622: LD_INT 117
77624: PUSH
77625: LD_INT 118
77627: PUSH
77628: EMPTY
77629: LIST
77630: LIST
77631: LIST
77632: LIST
77633: LIST
77634: LIST
77635: LIST
77636: LIST
77637: LIST
77638: LIST
77639: LIST
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: ST_TO_ADDR
77645: GO 78276
77647: LD_INT 17
77649: DOUBLE
77650: EQUAL
77651: IFTRUE 77655
77653: GO 77879
77655: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
77656: LD_ADDR_VAR 0 2
77660: PUSH
77661: LD_INT 1
77663: PUSH
77664: LD_INT 2
77666: PUSH
77667: LD_INT 3
77669: PUSH
77670: LD_INT 4
77672: PUSH
77673: LD_INT 5
77675: PUSH
77676: LD_INT 6
77678: PUSH
77679: LD_INT 7
77681: PUSH
77682: LD_INT 8
77684: PUSH
77685: LD_INT 9
77687: PUSH
77688: LD_INT 10
77690: PUSH
77691: LD_INT 11
77693: PUSH
77694: LD_INT 12
77696: PUSH
77697: LD_INT 13
77699: PUSH
77700: LD_INT 14
77702: PUSH
77703: LD_INT 15
77705: PUSH
77706: LD_INT 16
77708: PUSH
77709: LD_INT 17
77711: PUSH
77712: LD_INT 18
77714: PUSH
77715: LD_INT 19
77717: PUSH
77718: LD_INT 20
77720: PUSH
77721: LD_INT 21
77723: PUSH
77724: LD_INT 22
77726: PUSH
77727: LD_INT 23
77729: PUSH
77730: LD_INT 24
77732: PUSH
77733: LD_INT 25
77735: PUSH
77736: LD_INT 26
77738: PUSH
77739: LD_INT 27
77741: PUSH
77742: LD_INT 28
77744: PUSH
77745: LD_INT 29
77747: PUSH
77748: LD_INT 30
77750: PUSH
77751: LD_INT 31
77753: PUSH
77754: LD_INT 32
77756: PUSH
77757: LD_INT 33
77759: PUSH
77760: LD_INT 34
77762: PUSH
77763: LD_INT 36
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: LIST
77770: LIST
77771: LIST
77772: LIST
77773: LIST
77774: LIST
77775: LIST
77776: LIST
77777: LIST
77778: LIST
77779: LIST
77780: LIST
77781: LIST
77782: LIST
77783: LIST
77784: LIST
77785: LIST
77786: LIST
77787: LIST
77788: LIST
77789: LIST
77790: LIST
77791: LIST
77792: LIST
77793: LIST
77794: LIST
77795: LIST
77796: LIST
77797: LIST
77798: LIST
77799: LIST
77800: LIST
77801: LIST
77802: PUSH
77803: LD_INT 101
77805: PUSH
77806: LD_INT 102
77808: PUSH
77809: LD_INT 103
77811: PUSH
77812: LD_INT 104
77814: PUSH
77815: LD_INT 105
77817: PUSH
77818: LD_INT 106
77820: PUSH
77821: LD_INT 107
77823: PUSH
77824: LD_INT 108
77826: PUSH
77827: LD_INT 109
77829: PUSH
77830: LD_INT 110
77832: PUSH
77833: LD_INT 111
77835: PUSH
77836: LD_INT 112
77838: PUSH
77839: LD_INT 113
77841: PUSH
77842: LD_INT 114
77844: PUSH
77845: LD_INT 116
77847: PUSH
77848: LD_INT 117
77850: PUSH
77851: LD_INT 118
77853: PUSH
77854: EMPTY
77855: LIST
77856: LIST
77857: LIST
77858: LIST
77859: LIST
77860: LIST
77861: LIST
77862: LIST
77863: LIST
77864: LIST
77865: LIST
77866: LIST
77867: LIST
77868: LIST
77869: LIST
77870: LIST
77871: LIST
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: ST_TO_ADDR
77877: GO 78276
77879: LD_INT 18
77881: DOUBLE
77882: EQUAL
77883: IFTRUE 77887
77885: GO 78035
77887: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
77888: LD_ADDR_VAR 0 2
77892: PUSH
77893: LD_INT 2
77895: PUSH
77896: LD_INT 4
77898: PUSH
77899: LD_INT 5
77901: PUSH
77902: LD_INT 7
77904: PUSH
77905: LD_INT 11
77907: PUSH
77908: LD_INT 12
77910: PUSH
77911: LD_INT 15
77913: PUSH
77914: LD_INT 16
77916: PUSH
77917: LD_INT 20
77919: PUSH
77920: LD_INT 21
77922: PUSH
77923: LD_INT 22
77925: PUSH
77926: LD_INT 23
77928: PUSH
77929: LD_INT 25
77931: PUSH
77932: LD_INT 26
77934: PUSH
77935: LD_INT 30
77937: PUSH
77938: LD_INT 31
77940: PUSH
77941: LD_INT 32
77943: PUSH
77944: LD_INT 33
77946: PUSH
77947: LD_INT 34
77949: PUSH
77950: LD_INT 35
77952: PUSH
77953: LD_INT 36
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: LIST
77960: LIST
77961: LIST
77962: LIST
77963: LIST
77964: LIST
77965: LIST
77966: LIST
77967: LIST
77968: LIST
77969: LIST
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: LIST
77976: LIST
77977: LIST
77978: PUSH
77979: LD_INT 101
77981: PUSH
77982: LD_INT 102
77984: PUSH
77985: LD_INT 103
77987: PUSH
77988: LD_INT 106
77990: PUSH
77991: LD_INT 108
77993: PUSH
77994: LD_INT 112
77996: PUSH
77997: LD_INT 113
77999: PUSH
78000: LD_INT 114
78002: PUSH
78003: LD_INT 115
78005: PUSH
78006: LD_INT 116
78008: PUSH
78009: LD_INT 117
78011: PUSH
78012: LD_INT 118
78014: PUSH
78015: EMPTY
78016: LIST
78017: LIST
78018: LIST
78019: LIST
78020: LIST
78021: LIST
78022: LIST
78023: LIST
78024: LIST
78025: LIST
78026: LIST
78027: LIST
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: ST_TO_ADDR
78033: GO 78276
78035: LD_INT 19
78037: DOUBLE
78038: EQUAL
78039: IFTRUE 78043
78041: GO 78275
78043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
78044: LD_ADDR_VAR 0 2
78048: PUSH
78049: LD_INT 1
78051: PUSH
78052: LD_INT 2
78054: PUSH
78055: LD_INT 3
78057: PUSH
78058: LD_INT 4
78060: PUSH
78061: LD_INT 5
78063: PUSH
78064: LD_INT 6
78066: PUSH
78067: LD_INT 7
78069: PUSH
78070: LD_INT 8
78072: PUSH
78073: LD_INT 9
78075: PUSH
78076: LD_INT 10
78078: PUSH
78079: LD_INT 11
78081: PUSH
78082: LD_INT 12
78084: PUSH
78085: LD_INT 13
78087: PUSH
78088: LD_INT 14
78090: PUSH
78091: LD_INT 15
78093: PUSH
78094: LD_INT 16
78096: PUSH
78097: LD_INT 17
78099: PUSH
78100: LD_INT 18
78102: PUSH
78103: LD_INT 19
78105: PUSH
78106: LD_INT 20
78108: PUSH
78109: LD_INT 21
78111: PUSH
78112: LD_INT 22
78114: PUSH
78115: LD_INT 23
78117: PUSH
78118: LD_INT 24
78120: PUSH
78121: LD_INT 25
78123: PUSH
78124: LD_INT 26
78126: PUSH
78127: LD_INT 27
78129: PUSH
78130: LD_INT 28
78132: PUSH
78133: LD_INT 29
78135: PUSH
78136: LD_INT 30
78138: PUSH
78139: LD_INT 31
78141: PUSH
78142: LD_INT 32
78144: PUSH
78145: LD_INT 33
78147: PUSH
78148: LD_INT 34
78150: PUSH
78151: LD_INT 35
78153: PUSH
78154: LD_INT 36
78156: PUSH
78157: EMPTY
78158: LIST
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: LIST
78170: LIST
78171: LIST
78172: LIST
78173: LIST
78174: LIST
78175: LIST
78176: LIST
78177: LIST
78178: LIST
78179: LIST
78180: LIST
78181: LIST
78182: LIST
78183: LIST
78184: LIST
78185: LIST
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: PUSH
78195: LD_INT 101
78197: PUSH
78198: LD_INT 102
78200: PUSH
78201: LD_INT 103
78203: PUSH
78204: LD_INT 104
78206: PUSH
78207: LD_INT 105
78209: PUSH
78210: LD_INT 106
78212: PUSH
78213: LD_INT 107
78215: PUSH
78216: LD_INT 108
78218: PUSH
78219: LD_INT 109
78221: PUSH
78222: LD_INT 110
78224: PUSH
78225: LD_INT 111
78227: PUSH
78228: LD_INT 112
78230: PUSH
78231: LD_INT 113
78233: PUSH
78234: LD_INT 114
78236: PUSH
78237: LD_INT 115
78239: PUSH
78240: LD_INT 116
78242: PUSH
78243: LD_INT 117
78245: PUSH
78246: LD_INT 118
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: LIST
78253: LIST
78254: LIST
78255: LIST
78256: LIST
78257: LIST
78258: LIST
78259: LIST
78260: LIST
78261: LIST
78262: LIST
78263: LIST
78264: LIST
78265: LIST
78266: LIST
78267: LIST
78268: PUSH
78269: EMPTY
78270: LIST
78271: LIST
78272: ST_TO_ADDR
78273: GO 78276
78275: POP
// end else
78276: GO 78507
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
78278: LD_ADDR_VAR 0 2
78282: PUSH
78283: LD_INT 1
78285: PUSH
78286: LD_INT 2
78288: PUSH
78289: LD_INT 3
78291: PUSH
78292: LD_INT 4
78294: PUSH
78295: LD_INT 5
78297: PUSH
78298: LD_INT 6
78300: PUSH
78301: LD_INT 7
78303: PUSH
78304: LD_INT 8
78306: PUSH
78307: LD_INT 9
78309: PUSH
78310: LD_INT 10
78312: PUSH
78313: LD_INT 11
78315: PUSH
78316: LD_INT 12
78318: PUSH
78319: LD_INT 13
78321: PUSH
78322: LD_INT 14
78324: PUSH
78325: LD_INT 15
78327: PUSH
78328: LD_INT 16
78330: PUSH
78331: LD_INT 17
78333: PUSH
78334: LD_INT 18
78336: PUSH
78337: LD_INT 19
78339: PUSH
78340: LD_INT 20
78342: PUSH
78343: LD_INT 21
78345: PUSH
78346: LD_INT 22
78348: PUSH
78349: LD_INT 23
78351: PUSH
78352: LD_INT 24
78354: PUSH
78355: LD_INT 25
78357: PUSH
78358: LD_INT 26
78360: PUSH
78361: LD_INT 27
78363: PUSH
78364: LD_INT 28
78366: PUSH
78367: LD_INT 29
78369: PUSH
78370: LD_INT 30
78372: PUSH
78373: LD_INT 31
78375: PUSH
78376: LD_INT 32
78378: PUSH
78379: LD_INT 33
78381: PUSH
78382: LD_INT 34
78384: PUSH
78385: LD_INT 35
78387: PUSH
78388: LD_INT 36
78390: PUSH
78391: EMPTY
78392: LIST
78393: LIST
78394: LIST
78395: LIST
78396: LIST
78397: LIST
78398: LIST
78399: LIST
78400: LIST
78401: LIST
78402: LIST
78403: LIST
78404: LIST
78405: LIST
78406: LIST
78407: LIST
78408: LIST
78409: LIST
78410: LIST
78411: LIST
78412: LIST
78413: LIST
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: LIST
78419: LIST
78420: LIST
78421: LIST
78422: LIST
78423: LIST
78424: LIST
78425: LIST
78426: LIST
78427: LIST
78428: PUSH
78429: LD_INT 101
78431: PUSH
78432: LD_INT 102
78434: PUSH
78435: LD_INT 103
78437: PUSH
78438: LD_INT 104
78440: PUSH
78441: LD_INT 105
78443: PUSH
78444: LD_INT 106
78446: PUSH
78447: LD_INT 107
78449: PUSH
78450: LD_INT 108
78452: PUSH
78453: LD_INT 109
78455: PUSH
78456: LD_INT 110
78458: PUSH
78459: LD_INT 111
78461: PUSH
78462: LD_INT 112
78464: PUSH
78465: LD_INT 113
78467: PUSH
78468: LD_INT 114
78470: PUSH
78471: LD_INT 115
78473: PUSH
78474: LD_INT 116
78476: PUSH
78477: LD_INT 117
78479: PUSH
78480: LD_INT 118
78482: PUSH
78483: EMPTY
78484: LIST
78485: LIST
78486: LIST
78487: LIST
78488: LIST
78489: LIST
78490: LIST
78491: LIST
78492: LIST
78493: LIST
78494: LIST
78495: LIST
78496: LIST
78497: LIST
78498: LIST
78499: LIST
78500: LIST
78501: LIST
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: ST_TO_ADDR
// if result then
78507: LD_VAR 0 2
78511: IFFALSE 79297
// begin normal :=  ;
78513: LD_ADDR_VAR 0 5
78517: PUSH
78518: LD_STRING 
78520: ST_TO_ADDR
// hardcore :=  ;
78521: LD_ADDR_VAR 0 6
78525: PUSH
78526: LD_STRING 
78528: ST_TO_ADDR
// active :=  ;
78529: LD_ADDR_VAR 0 7
78533: PUSH
78534: LD_STRING 
78536: ST_TO_ADDR
// for i = 1 to normalCounter do
78537: LD_ADDR_VAR 0 8
78541: PUSH
78542: DOUBLE
78543: LD_INT 1
78545: DEC
78546: ST_TO_ADDR
78547: LD_EXP 65
78551: PUSH
78552: FOR_TO
78553: IFFALSE 78654
// begin tmp := 0 ;
78555: LD_ADDR_VAR 0 3
78559: PUSH
78560: LD_STRING 0
78562: ST_TO_ADDR
// if result [ 1 ] then
78563: LD_VAR 0 2
78567: PUSH
78568: LD_INT 1
78570: ARRAY
78571: IFFALSE 78636
// if result [ 1 ] [ 1 ] = i then
78573: LD_VAR 0 2
78577: PUSH
78578: LD_INT 1
78580: ARRAY
78581: PUSH
78582: LD_INT 1
78584: ARRAY
78585: PUSH
78586: LD_VAR 0 8
78590: EQUAL
78591: IFFALSE 78636
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
78593: LD_ADDR_VAR 0 2
78597: PUSH
78598: LD_VAR 0 2
78602: PPUSH
78603: LD_INT 1
78605: PPUSH
78606: LD_VAR 0 2
78610: PUSH
78611: LD_INT 1
78613: ARRAY
78614: PPUSH
78615: LD_INT 1
78617: PPUSH
78618: CALL_OW 3
78622: PPUSH
78623: CALL_OW 1
78627: ST_TO_ADDR
// tmp := 1 ;
78628: LD_ADDR_VAR 0 3
78632: PUSH
78633: LD_STRING 1
78635: ST_TO_ADDR
// end ; normal := normal & tmp ;
78636: LD_ADDR_VAR 0 5
78640: PUSH
78641: LD_VAR 0 5
78645: PUSH
78646: LD_VAR 0 3
78650: STR
78651: ST_TO_ADDR
// end ;
78652: GO 78552
78654: POP
78655: POP
// for i = 1 to hardcoreCounter do
78656: LD_ADDR_VAR 0 8
78660: PUSH
78661: DOUBLE
78662: LD_INT 1
78664: DEC
78665: ST_TO_ADDR
78666: LD_EXP 66
78670: PUSH
78671: FOR_TO
78672: IFFALSE 78777
// begin tmp := 0 ;
78674: LD_ADDR_VAR 0 3
78678: PUSH
78679: LD_STRING 0
78681: ST_TO_ADDR
// if result [ 2 ] then
78682: LD_VAR 0 2
78686: PUSH
78687: LD_INT 2
78689: ARRAY
78690: IFFALSE 78759
// if result [ 2 ] [ 1 ] = 100 + i then
78692: LD_VAR 0 2
78696: PUSH
78697: LD_INT 2
78699: ARRAY
78700: PUSH
78701: LD_INT 1
78703: ARRAY
78704: PUSH
78705: LD_INT 100
78707: PUSH
78708: LD_VAR 0 8
78712: PLUS
78713: EQUAL
78714: IFFALSE 78759
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
78716: LD_ADDR_VAR 0 2
78720: PUSH
78721: LD_VAR 0 2
78725: PPUSH
78726: LD_INT 2
78728: PPUSH
78729: LD_VAR 0 2
78733: PUSH
78734: LD_INT 2
78736: ARRAY
78737: PPUSH
78738: LD_INT 1
78740: PPUSH
78741: CALL_OW 3
78745: PPUSH
78746: CALL_OW 1
78750: ST_TO_ADDR
// tmp := 1 ;
78751: LD_ADDR_VAR 0 3
78755: PUSH
78756: LD_STRING 1
78758: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
78759: LD_ADDR_VAR 0 6
78763: PUSH
78764: LD_VAR 0 6
78768: PUSH
78769: LD_VAR 0 3
78773: STR
78774: ST_TO_ADDR
// end ;
78775: GO 78671
78777: POP
78778: POP
// if isGameLoad then
78779: LD_VAR 0 1
78783: IFFALSE 79258
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
78785: LD_ADDR_VAR 0 4
78789: PUSH
78790: LD_EXP 69
78794: PUSH
78795: LD_EXP 68
78799: PUSH
78800: LD_EXP 70
78804: PUSH
78805: LD_EXP 67
78809: PUSH
78810: LD_EXP 71
78814: PUSH
78815: LD_EXP 72
78819: PUSH
78820: LD_EXP 73
78824: PUSH
78825: LD_EXP 74
78829: PUSH
78830: LD_EXP 75
78834: PUSH
78835: LD_EXP 76
78839: PUSH
78840: LD_EXP 77
78844: PUSH
78845: LD_EXP 78
78849: PUSH
78850: LD_EXP 79
78854: PUSH
78855: LD_EXP 80
78859: PUSH
78860: LD_EXP 88
78864: PUSH
78865: LD_EXP 89
78869: PUSH
78870: LD_EXP 90
78874: PUSH
78875: LD_EXP 91
78879: PUSH
78880: LD_EXP 93
78884: PUSH
78885: LD_EXP 94
78889: PUSH
78890: LD_EXP 95
78894: PUSH
78895: LD_EXP 98
78899: PUSH
78900: LD_EXP 100
78904: PUSH
78905: LD_EXP 101
78909: PUSH
78910: LD_EXP 102
78914: PUSH
78915: LD_EXP 104
78919: PUSH
78920: LD_EXP 105
78924: PUSH
78925: LD_EXP 108
78929: PUSH
78930: LD_EXP 109
78934: PUSH
78935: LD_EXP 110
78939: PUSH
78940: LD_EXP 111
78944: PUSH
78945: LD_EXP 112
78949: PUSH
78950: LD_EXP 113
78954: PUSH
78955: LD_EXP 114
78959: PUSH
78960: LD_EXP 115
78964: PUSH
78965: LD_EXP 116
78969: PUSH
78970: LD_EXP 81
78974: PUSH
78975: LD_EXP 82
78979: PUSH
78980: LD_EXP 85
78984: PUSH
78985: LD_EXP 86
78989: PUSH
78990: LD_EXP 87
78994: PUSH
78995: LD_EXP 83
78999: PUSH
79000: LD_EXP 84
79004: PUSH
79005: LD_EXP 92
79009: PUSH
79010: LD_EXP 96
79014: PUSH
79015: LD_EXP 97
79019: PUSH
79020: LD_EXP 99
79024: PUSH
79025: LD_EXP 103
79029: PUSH
79030: LD_EXP 106
79034: PUSH
79035: LD_EXP 107
79039: PUSH
79040: LD_EXP 117
79044: PUSH
79045: LD_EXP 118
79049: PUSH
79050: LD_EXP 119
79054: PUSH
79055: LD_EXP 120
79059: PUSH
79060: EMPTY
79061: LIST
79062: LIST
79063: LIST
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: LIST
79077: LIST
79078: LIST
79079: LIST
79080: LIST
79081: LIST
79082: LIST
79083: LIST
79084: LIST
79085: LIST
79086: LIST
79087: LIST
79088: LIST
79089: LIST
79090: LIST
79091: LIST
79092: LIST
79093: LIST
79094: LIST
79095: LIST
79096: LIST
79097: LIST
79098: LIST
79099: LIST
79100: LIST
79101: LIST
79102: LIST
79103: LIST
79104: LIST
79105: LIST
79106: LIST
79107: LIST
79108: LIST
79109: LIST
79110: LIST
79111: LIST
79112: LIST
79113: LIST
79114: LIST
79115: ST_TO_ADDR
// tmp :=  ;
79116: LD_ADDR_VAR 0 3
79120: PUSH
79121: LD_STRING 
79123: ST_TO_ADDR
// for i = 1 to normalCounter do
79124: LD_ADDR_VAR 0 8
79128: PUSH
79129: DOUBLE
79130: LD_INT 1
79132: DEC
79133: ST_TO_ADDR
79134: LD_EXP 65
79138: PUSH
79139: FOR_TO
79140: IFFALSE 79176
// begin if flags [ i ] then
79142: LD_VAR 0 4
79146: PUSH
79147: LD_VAR 0 8
79151: ARRAY
79152: IFFALSE 79174
// tmp := tmp & i & ; ;
79154: LD_ADDR_VAR 0 3
79158: PUSH
79159: LD_VAR 0 3
79163: PUSH
79164: LD_VAR 0 8
79168: STR
79169: PUSH
79170: LD_STRING ;
79172: STR
79173: ST_TO_ADDR
// end ;
79174: GO 79139
79176: POP
79177: POP
// for i = 1 to hardcoreCounter do
79178: LD_ADDR_VAR 0 8
79182: PUSH
79183: DOUBLE
79184: LD_INT 1
79186: DEC
79187: ST_TO_ADDR
79188: LD_EXP 66
79192: PUSH
79193: FOR_TO
79194: IFFALSE 79240
// begin if flags [ normalCounter + i ] then
79196: LD_VAR 0 4
79200: PUSH
79201: LD_EXP 65
79205: PUSH
79206: LD_VAR 0 8
79210: PLUS
79211: ARRAY
79212: IFFALSE 79238
// tmp := tmp & ( 100 + i ) & ; ;
79214: LD_ADDR_VAR 0 3
79218: PUSH
79219: LD_VAR 0 3
79223: PUSH
79224: LD_INT 100
79226: PUSH
79227: LD_VAR 0 8
79231: PLUS
79232: STR
79233: PUSH
79234: LD_STRING ;
79236: STR
79237: ST_TO_ADDR
// end ;
79238: GO 79193
79240: POP
79241: POP
// if tmp then
79242: LD_VAR 0 3
79246: IFFALSE 79258
// active := tmp ;
79248: LD_ADDR_VAR 0 7
79252: PUSH
79253: LD_VAR 0 3
79257: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
79258: LD_STRING getStreamItemsFromMission("
79260: PUSH
79261: LD_VAR 0 5
79265: STR
79266: PUSH
79267: LD_STRING ","
79269: STR
79270: PUSH
79271: LD_VAR 0 6
79275: STR
79276: PUSH
79277: LD_STRING ","
79279: STR
79280: PUSH
79281: LD_VAR 0 7
79285: STR
79286: PUSH
79287: LD_STRING ")
79289: STR
79290: PPUSH
79291: CALL_OW 559
// end else
79295: GO 79304
// ToLua ( getStreamItemsFromMission("","","") ) ;
79297: LD_STRING getStreamItemsFromMission("","","")
79299: PPUSH
79300: CALL_OW 559
// end ;
79304: LD_VAR 0 2
79308: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
79309: LD_EXP 64
79313: IFFALSE 79321
79315: PUSH
79316: LD_EXP 69
79320: AND
79321: IFFALSE 79445
79323: GO 79325
79325: DISABLE
79326: LD_INT 0
79328: PPUSH
79329: PPUSH
// begin enable ;
79330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
79331: LD_ADDR_VAR 0 2
79335: PUSH
79336: LD_INT 22
79338: PUSH
79339: LD_OWVAR 2
79343: PUSH
79344: EMPTY
79345: LIST
79346: LIST
79347: PUSH
79348: LD_INT 2
79350: PUSH
79351: LD_INT 34
79353: PUSH
79354: LD_INT 7
79356: PUSH
79357: EMPTY
79358: LIST
79359: LIST
79360: PUSH
79361: LD_INT 34
79363: PUSH
79364: LD_INT 45
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: PUSH
79371: LD_INT 34
79373: PUSH
79374: LD_INT 28
79376: PUSH
79377: EMPTY
79378: LIST
79379: LIST
79380: PUSH
79381: LD_INT 34
79383: PUSH
79384: LD_INT 47
79386: PUSH
79387: EMPTY
79388: LIST
79389: LIST
79390: PUSH
79391: EMPTY
79392: LIST
79393: LIST
79394: LIST
79395: LIST
79396: LIST
79397: PUSH
79398: EMPTY
79399: LIST
79400: LIST
79401: PPUSH
79402: CALL_OW 69
79406: ST_TO_ADDR
// if not tmp then
79407: LD_VAR 0 2
79411: NOT
79412: IFFALSE 79416
// exit ;
79414: GO 79445
// for i in tmp do
79416: LD_ADDR_VAR 0 1
79420: PUSH
79421: LD_VAR 0 2
79425: PUSH
79426: FOR_IN
79427: IFFALSE 79443
// begin SetLives ( i , 0 ) ;
79429: LD_VAR 0 1
79433: PPUSH
79434: LD_INT 0
79436: PPUSH
79437: CALL_OW 234
// end ;
79441: GO 79426
79443: POP
79444: POP
// end ;
79445: PPOPN 2
79447: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
79448: LD_EXP 64
79452: IFFALSE 79460
79454: PUSH
79455: LD_EXP 70
79459: AND
79460: IFFALSE 79544
79462: GO 79464
79464: DISABLE
79465: LD_INT 0
79467: PPUSH
79468: PPUSH
// begin enable ;
79469: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
79470: LD_ADDR_VAR 0 2
79474: PUSH
79475: LD_INT 22
79477: PUSH
79478: LD_OWVAR 2
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: PUSH
79487: LD_INT 32
79489: PUSH
79490: LD_INT 3
79492: PUSH
79493: EMPTY
79494: LIST
79495: LIST
79496: PUSH
79497: EMPTY
79498: LIST
79499: LIST
79500: PPUSH
79501: CALL_OW 69
79505: ST_TO_ADDR
// if not tmp then
79506: LD_VAR 0 2
79510: NOT
79511: IFFALSE 79515
// exit ;
79513: GO 79544
// for i in tmp do
79515: LD_ADDR_VAR 0 1
79519: PUSH
79520: LD_VAR 0 2
79524: PUSH
79525: FOR_IN
79526: IFFALSE 79542
// begin SetLives ( i , 0 ) ;
79528: LD_VAR 0 1
79532: PPUSH
79533: LD_INT 0
79535: PPUSH
79536: CALL_OW 234
// end ;
79540: GO 79525
79542: POP
79543: POP
// end ;
79544: PPOPN 2
79546: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
79547: LD_EXP 64
79551: IFFALSE 79559
79553: PUSH
79554: LD_EXP 67
79558: AND
79559: IFFALSE 79652
79561: GO 79563
79563: DISABLE
79564: LD_INT 0
79566: PPUSH
// begin enable ;
79567: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
79568: LD_ADDR_VAR 0 1
79572: PUSH
79573: LD_INT 22
79575: PUSH
79576: LD_OWVAR 2
79580: PUSH
79581: EMPTY
79582: LIST
79583: LIST
79584: PUSH
79585: LD_INT 2
79587: PUSH
79588: LD_INT 25
79590: PUSH
79591: LD_INT 5
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: PUSH
79598: LD_INT 25
79600: PUSH
79601: LD_INT 9
79603: PUSH
79604: EMPTY
79605: LIST
79606: LIST
79607: PUSH
79608: LD_INT 25
79610: PUSH
79611: LD_INT 8
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: PUSH
79618: EMPTY
79619: LIST
79620: LIST
79621: LIST
79622: LIST
79623: PUSH
79624: EMPTY
79625: LIST
79626: LIST
79627: PPUSH
79628: CALL_OW 69
79632: PUSH
79633: FOR_IN
79634: IFFALSE 79650
// begin SetClass ( i , 1 ) ;
79636: LD_VAR 0 1
79640: PPUSH
79641: LD_INT 1
79643: PPUSH
79644: CALL_OW 336
// end ;
79648: GO 79633
79650: POP
79651: POP
// end ;
79652: PPOPN 1
79654: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
79655: LD_EXP 64
79659: IFFALSE 79667
79661: PUSH
79662: LD_EXP 68
79666: AND
79667: IFFALSE 79679
79669: PUSH
79670: LD_OWVAR 65
79674: PUSH
79675: LD_INT 7
79677: LESS
79678: AND
79679: IFFALSE 79693
79681: GO 79683
79683: DISABLE
// begin enable ;
79684: ENABLE
// game_speed := 7 ;
79685: LD_ADDR_OWVAR 65
79689: PUSH
79690: LD_INT 7
79692: ST_TO_ADDR
// end ;
79693: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
79694: LD_EXP 64
79698: IFFALSE 79706
79700: PUSH
79701: LD_EXP 71
79705: AND
79706: IFFALSE 79908
79708: GO 79710
79710: DISABLE
79711: LD_INT 0
79713: PPUSH
79714: PPUSH
79715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
79716: LD_ADDR_VAR 0 3
79720: PUSH
79721: LD_INT 81
79723: PUSH
79724: LD_OWVAR 2
79728: PUSH
79729: EMPTY
79730: LIST
79731: LIST
79732: PUSH
79733: LD_INT 21
79735: PUSH
79736: LD_INT 1
79738: PUSH
79739: EMPTY
79740: LIST
79741: LIST
79742: PUSH
79743: EMPTY
79744: LIST
79745: LIST
79746: PPUSH
79747: CALL_OW 69
79751: ST_TO_ADDR
// if not tmp then
79752: LD_VAR 0 3
79756: NOT
79757: IFFALSE 79761
// exit ;
79759: GO 79908
// if tmp > 5 then
79761: LD_VAR 0 3
79765: PUSH
79766: LD_INT 5
79768: GREATER
79769: IFFALSE 79781
// k := 5 else
79771: LD_ADDR_VAR 0 2
79775: PUSH
79776: LD_INT 5
79778: ST_TO_ADDR
79779: GO 79791
// k := tmp ;
79781: LD_ADDR_VAR 0 2
79785: PUSH
79786: LD_VAR 0 3
79790: ST_TO_ADDR
// for i := 1 to k do
79791: LD_ADDR_VAR 0 1
79795: PUSH
79796: DOUBLE
79797: LD_INT 1
79799: DEC
79800: ST_TO_ADDR
79801: LD_VAR 0 2
79805: PUSH
79806: FOR_TO
79807: IFFALSE 79906
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
79809: LD_VAR 0 3
79813: PUSH
79814: LD_VAR 0 1
79818: ARRAY
79819: PPUSH
79820: LD_VAR 0 1
79824: PUSH
79825: LD_INT 4
79827: MOD
79828: PUSH
79829: LD_INT 1
79831: PLUS
79832: PPUSH
79833: CALL_OW 259
79837: PUSH
79838: LD_INT 10
79840: LESS
79841: IFFALSE 79904
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
79843: LD_VAR 0 3
79847: PUSH
79848: LD_VAR 0 1
79852: ARRAY
79853: PPUSH
79854: LD_VAR 0 1
79858: PUSH
79859: LD_INT 4
79861: MOD
79862: PUSH
79863: LD_INT 1
79865: PLUS
79866: PPUSH
79867: LD_VAR 0 3
79871: PUSH
79872: LD_VAR 0 1
79876: ARRAY
79877: PPUSH
79878: LD_VAR 0 1
79882: PUSH
79883: LD_INT 4
79885: MOD
79886: PUSH
79887: LD_INT 1
79889: PLUS
79890: PPUSH
79891: CALL_OW 259
79895: PUSH
79896: LD_INT 1
79898: PLUS
79899: PPUSH
79900: CALL_OW 237
79904: GO 79806
79906: POP
79907: POP
// end ;
79908: PPOPN 3
79910: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
79911: LD_EXP 64
79915: IFFALSE 79923
79917: PUSH
79918: LD_EXP 72
79922: AND
79923: IFFALSE 79943
79925: GO 79927
79927: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
79928: LD_INT 4
79930: PPUSH
79931: LD_OWVAR 2
79935: PPUSH
79936: LD_INT 0
79938: PPUSH
79939: CALL_OW 324
79943: END
// every 0 0$1 trigger StreamModeActive and sShovel do
79944: LD_EXP 64
79948: IFFALSE 79956
79950: PUSH
79951: LD_EXP 101
79955: AND
79956: IFFALSE 79976
79958: GO 79960
79960: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
79961: LD_INT 19
79963: PPUSH
79964: LD_OWVAR 2
79968: PPUSH
79969: LD_INT 0
79971: PPUSH
79972: CALL_OW 324
79976: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
79977: LD_EXP 64
79981: IFFALSE 79989
79983: PUSH
79984: LD_EXP 73
79988: AND
79989: IFFALSE 80091
79991: GO 79993
79993: DISABLE
79994: LD_INT 0
79996: PPUSH
79997: PPUSH
// begin enable ;
79998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
79999: LD_ADDR_VAR 0 2
80003: PUSH
80004: LD_INT 22
80006: PUSH
80007: LD_OWVAR 2
80011: PUSH
80012: EMPTY
80013: LIST
80014: LIST
80015: PUSH
80016: LD_INT 2
80018: PUSH
80019: LD_INT 34
80021: PUSH
80022: LD_INT 11
80024: PUSH
80025: EMPTY
80026: LIST
80027: LIST
80028: PUSH
80029: LD_INT 34
80031: PUSH
80032: LD_INT 30
80034: PUSH
80035: EMPTY
80036: LIST
80037: LIST
80038: PUSH
80039: EMPTY
80040: LIST
80041: LIST
80042: LIST
80043: PUSH
80044: EMPTY
80045: LIST
80046: LIST
80047: PPUSH
80048: CALL_OW 69
80052: ST_TO_ADDR
// if not tmp then
80053: LD_VAR 0 2
80057: NOT
80058: IFFALSE 80062
// exit ;
80060: GO 80091
// for i in tmp do
80062: LD_ADDR_VAR 0 1
80066: PUSH
80067: LD_VAR 0 2
80071: PUSH
80072: FOR_IN
80073: IFFALSE 80089
// begin SetLives ( i , 0 ) ;
80075: LD_VAR 0 1
80079: PPUSH
80080: LD_INT 0
80082: PPUSH
80083: CALL_OW 234
// end ;
80087: GO 80072
80089: POP
80090: POP
// end ;
80091: PPOPN 2
80093: END
// every 0 0$1 trigger StreamModeActive and sBunker do
80094: LD_EXP 64
80098: IFFALSE 80106
80100: PUSH
80101: LD_EXP 74
80105: AND
80106: IFFALSE 80126
80108: GO 80110
80110: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
80111: LD_INT 32
80113: PPUSH
80114: LD_OWVAR 2
80118: PPUSH
80119: LD_INT 0
80121: PPUSH
80122: CALL_OW 324
80126: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
80127: LD_EXP 64
80131: IFFALSE 80139
80133: PUSH
80134: LD_EXP 75
80138: AND
80139: IFFALSE 80322
80141: GO 80143
80143: DISABLE
80144: LD_INT 0
80146: PPUSH
80147: PPUSH
80148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
80149: LD_ADDR_VAR 0 2
80153: PUSH
80154: LD_INT 22
80156: PUSH
80157: LD_OWVAR 2
80161: PUSH
80162: EMPTY
80163: LIST
80164: LIST
80165: PUSH
80166: LD_INT 33
80168: PUSH
80169: LD_INT 3
80171: PUSH
80172: EMPTY
80173: LIST
80174: LIST
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: PPUSH
80180: CALL_OW 69
80184: ST_TO_ADDR
// if not tmp then
80185: LD_VAR 0 2
80189: NOT
80190: IFFALSE 80194
// exit ;
80192: GO 80322
// side := 0 ;
80194: LD_ADDR_VAR 0 3
80198: PUSH
80199: LD_INT 0
80201: ST_TO_ADDR
// for i := 1 to 8 do
80202: LD_ADDR_VAR 0 1
80206: PUSH
80207: DOUBLE
80208: LD_INT 1
80210: DEC
80211: ST_TO_ADDR
80212: LD_INT 8
80214: PUSH
80215: FOR_TO
80216: IFFALSE 80266
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
80218: LD_OWVAR 2
80222: PUSH
80223: LD_VAR 0 1
80227: NONEQUAL
80228: IFFALSE 80250
80230: PUSH
80231: LD_OWVAR 2
80235: PPUSH
80236: LD_VAR 0 1
80240: PPUSH
80241: CALL_OW 81
80245: PUSH
80246: LD_INT 2
80248: EQUAL
80249: AND
80250: IFFALSE 80264
// begin side := i ;
80252: LD_ADDR_VAR 0 3
80256: PUSH
80257: LD_VAR 0 1
80261: ST_TO_ADDR
// break ;
80262: GO 80266
// end ;
80264: GO 80215
80266: POP
80267: POP
// if not side then
80268: LD_VAR 0 3
80272: NOT
80273: IFFALSE 80277
// exit ;
80275: GO 80322
// for i := 1 to tmp do
80277: LD_ADDR_VAR 0 1
80281: PUSH
80282: DOUBLE
80283: LD_INT 1
80285: DEC
80286: ST_TO_ADDR
80287: LD_VAR 0 2
80291: PUSH
80292: FOR_TO
80293: IFFALSE 80320
// if Prob ( 60 ) then
80295: LD_INT 60
80297: PPUSH
80298: CALL_OW 13
80302: IFFALSE 80318
// SetSide ( i , side ) ;
80304: LD_VAR 0 1
80308: PPUSH
80309: LD_VAR 0 3
80313: PPUSH
80314: CALL_OW 235
80318: GO 80292
80320: POP
80321: POP
// end ;
80322: PPOPN 3
80324: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
80325: LD_EXP 64
80329: IFFALSE 80337
80331: PUSH
80332: LD_EXP 77
80336: AND
80337: IFFALSE 80456
80339: GO 80341
80341: DISABLE
80342: LD_INT 0
80344: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
80345: LD_ADDR_VAR 0 1
80349: PUSH
80350: LD_INT 22
80352: PUSH
80353: LD_OWVAR 2
80357: PUSH
80358: EMPTY
80359: LIST
80360: LIST
80361: PUSH
80362: LD_INT 21
80364: PUSH
80365: LD_INT 1
80367: PUSH
80368: EMPTY
80369: LIST
80370: LIST
80371: PUSH
80372: LD_INT 3
80374: PUSH
80375: LD_INT 23
80377: PUSH
80378: LD_INT 0
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: EMPTY
80386: LIST
80387: LIST
80388: PUSH
80389: EMPTY
80390: LIST
80391: LIST
80392: LIST
80393: PPUSH
80394: CALL_OW 69
80398: PUSH
80399: FOR_IN
80400: IFFALSE 80454
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
80402: LD_VAR 0 1
80406: PPUSH
80407: CALL_OW 257
80411: PUSH
80412: LD_INT 1
80414: PUSH
80415: LD_INT 2
80417: PUSH
80418: LD_INT 3
80420: PUSH
80421: LD_INT 4
80423: PUSH
80424: EMPTY
80425: LIST
80426: LIST
80427: LIST
80428: LIST
80429: IN
80430: IFFALSE 80452
// SetClass ( un , rand ( 1 , 4 ) ) ;
80432: LD_VAR 0 1
80436: PPUSH
80437: LD_INT 1
80439: PPUSH
80440: LD_INT 4
80442: PPUSH
80443: CALL_OW 12
80447: PPUSH
80448: CALL_OW 336
80452: GO 80399
80454: POP
80455: POP
// end ;
80456: PPOPN 1
80458: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
80459: LD_EXP 64
80463: IFFALSE 80471
80465: PUSH
80466: LD_EXP 76
80470: AND
80471: IFFALSE 80550
80473: GO 80475
80475: DISABLE
80476: LD_INT 0
80478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
80479: LD_ADDR_VAR 0 1
80483: PUSH
80484: LD_INT 22
80486: PUSH
80487: LD_OWVAR 2
80491: PUSH
80492: EMPTY
80493: LIST
80494: LIST
80495: PUSH
80496: LD_INT 21
80498: PUSH
80499: LD_INT 3
80501: PUSH
80502: EMPTY
80503: LIST
80504: LIST
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: PPUSH
80510: CALL_OW 69
80514: ST_TO_ADDR
// if not tmp then
80515: LD_VAR 0 1
80519: NOT
80520: IFFALSE 80524
// exit ;
80522: GO 80550
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
80524: LD_VAR 0 1
80528: PUSH
80529: LD_INT 1
80531: PPUSH
80532: LD_VAR 0 1
80536: PPUSH
80537: CALL_OW 12
80541: ARRAY
80542: PPUSH
80543: LD_INT 100
80545: PPUSH
80546: CALL_OW 234
// end ;
80550: PPOPN 1
80552: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
80553: LD_EXP 64
80557: IFFALSE 80565
80559: PUSH
80560: LD_EXP 78
80564: AND
80565: IFFALSE 80663
80567: GO 80569
80569: DISABLE
80570: LD_INT 0
80572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80573: LD_ADDR_VAR 0 1
80577: PUSH
80578: LD_INT 22
80580: PUSH
80581: LD_OWVAR 2
80585: PUSH
80586: EMPTY
80587: LIST
80588: LIST
80589: PUSH
80590: LD_INT 21
80592: PUSH
80593: LD_INT 1
80595: PUSH
80596: EMPTY
80597: LIST
80598: LIST
80599: PUSH
80600: EMPTY
80601: LIST
80602: LIST
80603: PPUSH
80604: CALL_OW 69
80608: ST_TO_ADDR
// if not tmp then
80609: LD_VAR 0 1
80613: NOT
80614: IFFALSE 80618
// exit ;
80616: GO 80663
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
80618: LD_VAR 0 1
80622: PUSH
80623: LD_INT 1
80625: PPUSH
80626: LD_VAR 0 1
80630: PPUSH
80631: CALL_OW 12
80635: ARRAY
80636: PPUSH
80637: LD_INT 1
80639: PPUSH
80640: LD_INT 4
80642: PPUSH
80643: CALL_OW 12
80647: PPUSH
80648: LD_INT 3000
80650: PPUSH
80651: LD_INT 9000
80653: PPUSH
80654: CALL_OW 12
80658: PPUSH
80659: CALL_OW 492
// end ;
80663: PPOPN 1
80665: END
// every 0 0$1 trigger StreamModeActive and sDepot do
80666: LD_EXP 64
80670: IFFALSE 80678
80672: PUSH
80673: LD_EXP 79
80677: AND
80678: IFFALSE 80698
80680: GO 80682
80682: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
80683: LD_INT 1
80685: PPUSH
80686: LD_OWVAR 2
80690: PPUSH
80691: LD_INT 0
80693: PPUSH
80694: CALL_OW 324
80698: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
80699: LD_EXP 64
80703: IFFALSE 80711
80705: PUSH
80706: LD_EXP 80
80710: AND
80711: IFFALSE 80794
80713: GO 80715
80715: DISABLE
80716: LD_INT 0
80718: PPUSH
80719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
80720: LD_ADDR_VAR 0 2
80724: PUSH
80725: LD_INT 22
80727: PUSH
80728: LD_OWVAR 2
80732: PUSH
80733: EMPTY
80734: LIST
80735: LIST
80736: PUSH
80737: LD_INT 21
80739: PUSH
80740: LD_INT 3
80742: PUSH
80743: EMPTY
80744: LIST
80745: LIST
80746: PUSH
80747: EMPTY
80748: LIST
80749: LIST
80750: PPUSH
80751: CALL_OW 69
80755: ST_TO_ADDR
// if not tmp then
80756: LD_VAR 0 2
80760: NOT
80761: IFFALSE 80765
// exit ;
80763: GO 80794
// for i in tmp do
80765: LD_ADDR_VAR 0 1
80769: PUSH
80770: LD_VAR 0 2
80774: PUSH
80775: FOR_IN
80776: IFFALSE 80792
// SetBLevel ( i , 10 ) ;
80778: LD_VAR 0 1
80782: PPUSH
80783: LD_INT 10
80785: PPUSH
80786: CALL_OW 241
80790: GO 80775
80792: POP
80793: POP
// end ;
80794: PPOPN 2
80796: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
80797: LD_EXP 64
80801: IFFALSE 80809
80803: PUSH
80804: LD_EXP 81
80808: AND
80809: IFFALSE 80920
80811: GO 80813
80813: DISABLE
80814: LD_INT 0
80816: PPUSH
80817: PPUSH
80818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80819: LD_ADDR_VAR 0 3
80823: PUSH
80824: LD_INT 22
80826: PUSH
80827: LD_OWVAR 2
80831: PUSH
80832: EMPTY
80833: LIST
80834: LIST
80835: PUSH
80836: LD_INT 25
80838: PUSH
80839: LD_INT 1
80841: PUSH
80842: EMPTY
80843: LIST
80844: LIST
80845: PUSH
80846: EMPTY
80847: LIST
80848: LIST
80849: PPUSH
80850: CALL_OW 69
80854: ST_TO_ADDR
// if not tmp then
80855: LD_VAR 0 3
80859: NOT
80860: IFFALSE 80864
// exit ;
80862: GO 80920
// un := tmp [ rand ( 1 , tmp ) ] ;
80864: LD_ADDR_VAR 0 2
80868: PUSH
80869: LD_VAR 0 3
80873: PUSH
80874: LD_INT 1
80876: PPUSH
80877: LD_VAR 0 3
80881: PPUSH
80882: CALL_OW 12
80886: ARRAY
80887: ST_TO_ADDR
// if Crawls ( un ) then
80888: LD_VAR 0 2
80892: PPUSH
80893: CALL_OW 318
80897: IFFALSE 80908
// ComWalk ( un ) ;
80899: LD_VAR 0 2
80903: PPUSH
80904: CALL_OW 138
// SetClass ( un , class_sniper ) ;
80908: LD_VAR 0 2
80912: PPUSH
80913: LD_INT 5
80915: PPUSH
80916: CALL_OW 336
// end ;
80920: PPOPN 3
80922: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
80923: LD_EXP 64
80927: IFFALSE 80935
80929: PUSH
80930: LD_EXP 82
80934: AND
80935: IFFALSE 80947
80937: PUSH
80938: LD_OWVAR 67
80942: PUSH
80943: LD_INT 4
80945: LESS
80946: AND
80947: IFFALSE 80966
80949: GO 80951
80951: DISABLE
// begin Difficulty := Difficulty + 1 ;
80952: LD_ADDR_OWVAR 67
80956: PUSH
80957: LD_OWVAR 67
80961: PUSH
80962: LD_INT 1
80964: PLUS
80965: ST_TO_ADDR
// end ;
80966: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
80967: LD_EXP 64
80971: IFFALSE 80979
80973: PUSH
80974: LD_EXP 83
80978: AND
80979: IFFALSE 81082
80981: GO 80983
80983: DISABLE
80984: LD_INT 0
80986: PPUSH
// begin for i := 1 to 5 do
80987: LD_ADDR_VAR 0 1
80991: PUSH
80992: DOUBLE
80993: LD_INT 1
80995: DEC
80996: ST_TO_ADDR
80997: LD_INT 5
80999: PUSH
81000: FOR_TO
81001: IFFALSE 81080
// begin uc_nation := nation_nature ;
81003: LD_ADDR_OWVAR 21
81007: PUSH
81008: LD_INT 0
81010: ST_TO_ADDR
// uc_side := 0 ;
81011: LD_ADDR_OWVAR 20
81015: PUSH
81016: LD_INT 0
81018: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
81019: LD_ADDR_OWVAR 29
81023: PUSH
81024: LD_INT 12
81026: PUSH
81027: LD_INT 12
81029: PUSH
81030: EMPTY
81031: LIST
81032: LIST
81033: ST_TO_ADDR
// hc_agressivity := 20 ;
81034: LD_ADDR_OWVAR 35
81038: PUSH
81039: LD_INT 20
81041: ST_TO_ADDR
// hc_class := class_tiger ;
81042: LD_ADDR_OWVAR 28
81046: PUSH
81047: LD_INT 14
81049: ST_TO_ADDR
// hc_gallery :=  ;
81050: LD_ADDR_OWVAR 33
81054: PUSH
81055: LD_STRING 
81057: ST_TO_ADDR
// hc_name :=  ;
81058: LD_ADDR_OWVAR 26
81062: PUSH
81063: LD_STRING 
81065: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
81066: CALL_OW 44
81070: PPUSH
81071: LD_INT 0
81073: PPUSH
81074: CALL_OW 51
// end ;
81078: GO 81000
81080: POP
81081: POP
// end ;
81082: PPOPN 1
81084: END
// every 0 0$1 trigger StreamModeActive and sBomb do
81085: LD_EXP 64
81089: IFFALSE 81097
81091: PUSH
81092: LD_EXP 84
81096: AND
81097: IFFALSE 81106
81099: GO 81101
81101: DISABLE
// StreamSibBomb ;
81102: CALL 81107 0 0
81106: END
// export function StreamSibBomb ; var i , x , y ; begin
81107: LD_INT 0
81109: PPUSH
81110: PPUSH
81111: PPUSH
81112: PPUSH
// result := false ;
81113: LD_ADDR_VAR 0 1
81117: PUSH
81118: LD_INT 0
81120: ST_TO_ADDR
// for i := 1 to 16 do
81121: LD_ADDR_VAR 0 2
81125: PUSH
81126: DOUBLE
81127: LD_INT 1
81129: DEC
81130: ST_TO_ADDR
81131: LD_INT 16
81133: PUSH
81134: FOR_TO
81135: IFFALSE 81334
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81137: LD_ADDR_VAR 0 3
81141: PUSH
81142: LD_INT 10
81144: PUSH
81145: LD_INT 20
81147: PUSH
81148: LD_INT 30
81150: PUSH
81151: LD_INT 40
81153: PUSH
81154: LD_INT 50
81156: PUSH
81157: LD_INT 60
81159: PUSH
81160: LD_INT 70
81162: PUSH
81163: LD_INT 80
81165: PUSH
81166: LD_INT 90
81168: PUSH
81169: LD_INT 100
81171: PUSH
81172: LD_INT 110
81174: PUSH
81175: LD_INT 120
81177: PUSH
81178: LD_INT 130
81180: PUSH
81181: LD_INT 140
81183: PUSH
81184: LD_INT 150
81186: PUSH
81187: EMPTY
81188: LIST
81189: LIST
81190: LIST
81191: LIST
81192: LIST
81193: LIST
81194: LIST
81195: LIST
81196: LIST
81197: LIST
81198: LIST
81199: LIST
81200: LIST
81201: LIST
81202: LIST
81203: PUSH
81204: LD_INT 1
81206: PPUSH
81207: LD_INT 15
81209: PPUSH
81210: CALL_OW 12
81214: ARRAY
81215: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81216: LD_ADDR_VAR 0 4
81220: PUSH
81221: LD_INT 10
81223: PUSH
81224: LD_INT 20
81226: PUSH
81227: LD_INT 30
81229: PUSH
81230: LD_INT 40
81232: PUSH
81233: LD_INT 50
81235: PUSH
81236: LD_INT 60
81238: PUSH
81239: LD_INT 70
81241: PUSH
81242: LD_INT 80
81244: PUSH
81245: LD_INT 90
81247: PUSH
81248: LD_INT 100
81250: PUSH
81251: LD_INT 110
81253: PUSH
81254: LD_INT 120
81256: PUSH
81257: LD_INT 130
81259: PUSH
81260: LD_INT 140
81262: PUSH
81263: LD_INT 150
81265: PUSH
81266: EMPTY
81267: LIST
81268: LIST
81269: LIST
81270: LIST
81271: LIST
81272: LIST
81273: LIST
81274: LIST
81275: LIST
81276: LIST
81277: LIST
81278: LIST
81279: LIST
81280: LIST
81281: LIST
81282: PUSH
81283: LD_INT 1
81285: PPUSH
81286: LD_INT 15
81288: PPUSH
81289: CALL_OW 12
81293: ARRAY
81294: ST_TO_ADDR
// if ValidHex ( x , y ) then
81295: LD_VAR 0 3
81299: PPUSH
81300: LD_VAR 0 4
81304: PPUSH
81305: CALL_OW 488
81309: IFFALSE 81332
// begin result := [ x , y ] ;
81311: LD_ADDR_VAR 0 1
81315: PUSH
81316: LD_VAR 0 3
81320: PUSH
81321: LD_VAR 0 4
81325: PUSH
81326: EMPTY
81327: LIST
81328: LIST
81329: ST_TO_ADDR
// break ;
81330: GO 81334
// end ; end ;
81332: GO 81134
81334: POP
81335: POP
// if result then
81336: LD_VAR 0 1
81340: IFFALSE 81400
// begin ToLua ( playSibBomb() ) ;
81342: LD_STRING playSibBomb()
81344: PPUSH
81345: CALL_OW 559
// wait ( 0 0$14 ) ;
81349: LD_INT 490
81351: PPUSH
81352: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
81356: LD_VAR 0 1
81360: PUSH
81361: LD_INT 1
81363: ARRAY
81364: PPUSH
81365: LD_VAR 0 1
81369: PUSH
81370: LD_INT 2
81372: ARRAY
81373: PPUSH
81374: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
81378: LD_VAR 0 1
81382: PUSH
81383: LD_INT 1
81385: ARRAY
81386: PPUSH
81387: LD_VAR 0 1
81391: PUSH
81392: LD_INT 2
81394: ARRAY
81395: PPUSH
81396: CALL_OW 429
// end ; end ;
81400: LD_VAR 0 1
81404: RET
// every 0 0$1 trigger StreamModeActive and sReset do
81405: LD_EXP 64
81409: IFFALSE 81417
81411: PUSH
81412: LD_EXP 86
81416: AND
81417: IFFALSE 81429
81419: GO 81421
81421: DISABLE
// YouLost (  ) ;
81422: LD_STRING 
81424: PPUSH
81425: CALL_OW 104
81429: END
// every 0 0$1 trigger StreamModeActive and sFog do
81430: LD_EXP 64
81434: IFFALSE 81442
81436: PUSH
81437: LD_EXP 85
81441: AND
81442: IFFALSE 81456
81444: GO 81446
81446: DISABLE
// FogOff ( your_side ) ;
81447: LD_OWVAR 2
81451: PPUSH
81452: CALL_OW 344
81456: END
// every 0 0$1 trigger StreamModeActive and sSun do
81457: LD_EXP 64
81461: IFFALSE 81469
81463: PUSH
81464: LD_EXP 87
81468: AND
81469: IFFALSE 81497
81471: GO 81473
81473: DISABLE
// begin solar_recharge_percent := 0 ;
81474: LD_ADDR_OWVAR 79
81478: PUSH
81479: LD_INT 0
81481: ST_TO_ADDR
// wait ( 5 5$00 ) ;
81482: LD_INT 10500
81484: PPUSH
81485: CALL_OW 67
// solar_recharge_percent := 100 ;
81489: LD_ADDR_OWVAR 79
81493: PUSH
81494: LD_INT 100
81496: ST_TO_ADDR
// end ;
81497: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
81498: LD_EXP 64
81502: IFFALSE 81510
81504: PUSH
81505: LD_EXP 88
81509: AND
81510: IFFALSE 81749
81512: GO 81514
81514: DISABLE
81515: LD_INT 0
81517: PPUSH
81518: PPUSH
81519: PPUSH
// begin tmp := [ ] ;
81520: LD_ADDR_VAR 0 3
81524: PUSH
81525: EMPTY
81526: ST_TO_ADDR
// for i := 1 to 6 do
81527: LD_ADDR_VAR 0 1
81531: PUSH
81532: DOUBLE
81533: LD_INT 1
81535: DEC
81536: ST_TO_ADDR
81537: LD_INT 6
81539: PUSH
81540: FOR_TO
81541: IFFALSE 81646
// begin uc_nation := nation_nature ;
81543: LD_ADDR_OWVAR 21
81547: PUSH
81548: LD_INT 0
81550: ST_TO_ADDR
// uc_side := 0 ;
81551: LD_ADDR_OWVAR 20
81555: PUSH
81556: LD_INT 0
81558: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
81559: LD_ADDR_OWVAR 29
81563: PUSH
81564: LD_INT 12
81566: PUSH
81567: LD_INT 12
81569: PUSH
81570: EMPTY
81571: LIST
81572: LIST
81573: ST_TO_ADDR
// hc_agressivity := 20 ;
81574: LD_ADDR_OWVAR 35
81578: PUSH
81579: LD_INT 20
81581: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
81582: LD_ADDR_OWVAR 28
81586: PUSH
81587: LD_INT 17
81589: ST_TO_ADDR
// hc_gallery :=  ;
81590: LD_ADDR_OWVAR 33
81594: PUSH
81595: LD_STRING 
81597: ST_TO_ADDR
// hc_name :=  ;
81598: LD_ADDR_OWVAR 26
81602: PUSH
81603: LD_STRING 
81605: ST_TO_ADDR
// un := CreateHuman ;
81606: LD_ADDR_VAR 0 2
81610: PUSH
81611: CALL_OW 44
81615: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
81616: LD_VAR 0 2
81620: PPUSH
81621: LD_INT 1
81623: PPUSH
81624: CALL_OW 51
// tmp := tmp ^ un ;
81628: LD_ADDR_VAR 0 3
81632: PUSH
81633: LD_VAR 0 3
81637: PUSH
81638: LD_VAR 0 2
81642: ADD
81643: ST_TO_ADDR
// end ;
81644: GO 81540
81646: POP
81647: POP
// repeat wait ( 0 0$1 ) ;
81648: LD_INT 35
81650: PPUSH
81651: CALL_OW 67
// for un in tmp do
81655: LD_ADDR_VAR 0 2
81659: PUSH
81660: LD_VAR 0 3
81664: PUSH
81665: FOR_IN
81666: IFFALSE 81740
// begin if IsDead ( un ) then
81668: LD_VAR 0 2
81672: PPUSH
81673: CALL_OW 301
81677: IFFALSE 81697
// begin tmp := tmp diff un ;
81679: LD_ADDR_VAR 0 3
81683: PUSH
81684: LD_VAR 0 3
81688: PUSH
81689: LD_VAR 0 2
81693: DIFF
81694: ST_TO_ADDR
// continue ;
81695: GO 81665
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
81697: LD_VAR 0 2
81701: PPUSH
81702: LD_INT 3
81704: PUSH
81705: LD_INT 22
81707: PUSH
81708: LD_INT 0
81710: PUSH
81711: EMPTY
81712: LIST
81713: LIST
81714: PUSH
81715: EMPTY
81716: LIST
81717: LIST
81718: PPUSH
81719: CALL_OW 69
81723: PPUSH
81724: LD_VAR 0 2
81728: PPUSH
81729: CALL_OW 74
81733: PPUSH
81734: CALL_OW 115
// end ;
81738: GO 81665
81740: POP
81741: POP
// until not tmp ;
81742: LD_VAR 0 3
81746: NOT
81747: IFFALSE 81648
// end ;
81749: PPOPN 3
81751: END
// every 0 0$1 trigger StreamModeActive and sTroll do
81752: LD_EXP 64
81756: IFFALSE 81764
81758: PUSH
81759: LD_EXP 89
81763: AND
81764: IFFALSE 81818
81766: GO 81768
81768: DISABLE
// begin ToLua ( displayTroll(); ) ;
81769: LD_STRING displayTroll();
81771: PPUSH
81772: CALL_OW 559
// wait ( 3 3$00 ) ;
81776: LD_INT 6300
81778: PPUSH
81779: CALL_OW 67
// ToLua ( hideTroll(); ) ;
81783: LD_STRING hideTroll();
81785: PPUSH
81786: CALL_OW 559
// wait ( 1 1$00 ) ;
81790: LD_INT 2100
81792: PPUSH
81793: CALL_OW 67
// ToLua ( displayTroll(); ) ;
81797: LD_STRING displayTroll();
81799: PPUSH
81800: CALL_OW 559
// wait ( 1 1$00 ) ;
81804: LD_INT 2100
81806: PPUSH
81807: CALL_OW 67
// ToLua ( hideTroll(); ) ;
81811: LD_STRING hideTroll();
81813: PPUSH
81814: CALL_OW 559
// end ;
81818: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
81819: LD_EXP 64
81823: IFFALSE 81831
81825: PUSH
81826: LD_EXP 90
81830: AND
81831: IFFALSE 81894
81833: GO 81835
81835: DISABLE
81836: LD_INT 0
81838: PPUSH
// begin p := 0 ;
81839: LD_ADDR_VAR 0 1
81843: PUSH
81844: LD_INT 0
81846: ST_TO_ADDR
// repeat game_speed := 1 ;
81847: LD_ADDR_OWVAR 65
81851: PUSH
81852: LD_INT 1
81854: ST_TO_ADDR
// wait ( 0 0$1 ) ;
81855: LD_INT 35
81857: PPUSH
81858: CALL_OW 67
// p := p + 1 ;
81862: LD_ADDR_VAR 0 1
81866: PUSH
81867: LD_VAR 0 1
81871: PUSH
81872: LD_INT 1
81874: PLUS
81875: ST_TO_ADDR
// until p >= 60 ;
81876: LD_VAR 0 1
81880: PUSH
81881: LD_INT 60
81883: GREATEREQUAL
81884: IFFALSE 81847
// game_speed := 4 ;
81886: LD_ADDR_OWVAR 65
81890: PUSH
81891: LD_INT 4
81893: ST_TO_ADDR
// end ;
81894: PPOPN 1
81896: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
81897: LD_EXP 64
81901: IFFALSE 81909
81903: PUSH
81904: LD_EXP 91
81908: AND
81909: IFFALSE 82055
81911: GO 81913
81913: DISABLE
81914: LD_INT 0
81916: PPUSH
81917: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81918: LD_ADDR_VAR 0 1
81922: PUSH
81923: LD_INT 22
81925: PUSH
81926: LD_OWVAR 2
81930: PUSH
81931: EMPTY
81932: LIST
81933: LIST
81934: PUSH
81935: LD_INT 2
81937: PUSH
81938: LD_INT 30
81940: PUSH
81941: LD_INT 0
81943: PUSH
81944: EMPTY
81945: LIST
81946: LIST
81947: PUSH
81948: LD_INT 30
81950: PUSH
81951: LD_INT 1
81953: PUSH
81954: EMPTY
81955: LIST
81956: LIST
81957: PUSH
81958: EMPTY
81959: LIST
81960: LIST
81961: LIST
81962: PUSH
81963: EMPTY
81964: LIST
81965: LIST
81966: PPUSH
81967: CALL_OW 69
81971: ST_TO_ADDR
// if not depot then
81972: LD_VAR 0 1
81976: NOT
81977: IFFALSE 81981
// exit ;
81979: GO 82055
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
81981: LD_ADDR_VAR 0 2
81985: PUSH
81986: LD_VAR 0 1
81990: PUSH
81991: LD_INT 1
81993: PPUSH
81994: LD_VAR 0 1
81998: PPUSH
81999: CALL_OW 12
82003: ARRAY
82004: PPUSH
82005: CALL_OW 274
82009: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
82010: LD_VAR 0 2
82014: PPUSH
82015: LD_INT 1
82017: PPUSH
82018: LD_INT 0
82020: PPUSH
82021: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
82025: LD_VAR 0 2
82029: PPUSH
82030: LD_INT 2
82032: PPUSH
82033: LD_INT 0
82035: PPUSH
82036: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
82040: LD_VAR 0 2
82044: PPUSH
82045: LD_INT 3
82047: PPUSH
82048: LD_INT 0
82050: PPUSH
82051: CALL_OW 277
// end ;
82055: PPOPN 2
82057: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
82058: LD_EXP 64
82062: IFFALSE 82070
82064: PUSH
82065: LD_EXP 92
82069: AND
82070: IFFALSE 82167
82072: GO 82074
82074: DISABLE
82075: LD_INT 0
82077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82078: LD_ADDR_VAR 0 1
82082: PUSH
82083: LD_INT 22
82085: PUSH
82086: LD_OWVAR 2
82090: PUSH
82091: EMPTY
82092: LIST
82093: LIST
82094: PUSH
82095: LD_INT 21
82097: PUSH
82098: LD_INT 1
82100: PUSH
82101: EMPTY
82102: LIST
82103: LIST
82104: PUSH
82105: LD_INT 3
82107: PUSH
82108: LD_INT 23
82110: PUSH
82111: LD_INT 0
82113: PUSH
82114: EMPTY
82115: LIST
82116: LIST
82117: PUSH
82118: EMPTY
82119: LIST
82120: LIST
82121: PUSH
82122: EMPTY
82123: LIST
82124: LIST
82125: LIST
82126: PPUSH
82127: CALL_OW 69
82131: ST_TO_ADDR
// if not tmp then
82132: LD_VAR 0 1
82136: NOT
82137: IFFALSE 82141
// exit ;
82139: GO 82167
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
82141: LD_VAR 0 1
82145: PUSH
82146: LD_INT 1
82148: PPUSH
82149: LD_VAR 0 1
82153: PPUSH
82154: CALL_OW 12
82158: ARRAY
82159: PPUSH
82160: LD_INT 200
82162: PPUSH
82163: CALL_OW 234
// end ;
82167: PPOPN 1
82169: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
82170: LD_EXP 64
82174: IFFALSE 82182
82176: PUSH
82177: LD_EXP 93
82181: AND
82182: IFFALSE 82261
82184: GO 82186
82186: DISABLE
82187: LD_INT 0
82189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
82190: LD_ADDR_VAR 0 1
82194: PUSH
82195: LD_INT 22
82197: PUSH
82198: LD_OWVAR 2
82202: PUSH
82203: EMPTY
82204: LIST
82205: LIST
82206: PUSH
82207: LD_INT 21
82209: PUSH
82210: LD_INT 2
82212: PUSH
82213: EMPTY
82214: LIST
82215: LIST
82216: PUSH
82217: EMPTY
82218: LIST
82219: LIST
82220: PPUSH
82221: CALL_OW 69
82225: ST_TO_ADDR
// if not tmp then
82226: LD_VAR 0 1
82230: NOT
82231: IFFALSE 82235
// exit ;
82233: GO 82261
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
82235: LD_VAR 0 1
82239: PUSH
82240: LD_INT 1
82242: PPUSH
82243: LD_VAR 0 1
82247: PPUSH
82248: CALL_OW 12
82252: ARRAY
82253: PPUSH
82254: LD_INT 60
82256: PPUSH
82257: CALL_OW 234
// end ;
82261: PPOPN 1
82263: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
82264: LD_EXP 64
82268: IFFALSE 82276
82270: PUSH
82271: LD_EXP 94
82275: AND
82276: IFFALSE 82375
82278: GO 82280
82280: DISABLE
82281: LD_INT 0
82283: PPUSH
82284: PPUSH
// begin enable ;
82285: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
82286: LD_ADDR_VAR 0 1
82290: PUSH
82291: LD_INT 22
82293: PUSH
82294: LD_OWVAR 2
82298: PUSH
82299: EMPTY
82300: LIST
82301: LIST
82302: PUSH
82303: LD_INT 61
82305: PUSH
82306: EMPTY
82307: LIST
82308: PUSH
82309: LD_INT 33
82311: PUSH
82312: LD_INT 2
82314: PUSH
82315: EMPTY
82316: LIST
82317: LIST
82318: PUSH
82319: EMPTY
82320: LIST
82321: LIST
82322: LIST
82323: PPUSH
82324: CALL_OW 69
82328: ST_TO_ADDR
// if not tmp then
82329: LD_VAR 0 1
82333: NOT
82334: IFFALSE 82338
// exit ;
82336: GO 82375
// for i in tmp do
82338: LD_ADDR_VAR 0 2
82342: PUSH
82343: LD_VAR 0 1
82347: PUSH
82348: FOR_IN
82349: IFFALSE 82373
// if IsControledBy ( i ) then
82351: LD_VAR 0 2
82355: PPUSH
82356: CALL_OW 312
82360: IFFALSE 82371
// ComUnlink ( i ) ;
82362: LD_VAR 0 2
82366: PPUSH
82367: CALL_OW 136
82371: GO 82348
82373: POP
82374: POP
// end ;
82375: PPOPN 2
82377: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
82378: LD_EXP 64
82382: IFFALSE 82390
82384: PUSH
82385: LD_EXP 95
82389: AND
82390: IFFALSE 82530
82392: GO 82394
82394: DISABLE
82395: LD_INT 0
82397: PPUSH
82398: PPUSH
// begin ToLua ( displayPowell(); ) ;
82399: LD_STRING displayPowell();
82401: PPUSH
82402: CALL_OW 559
// uc_side := 0 ;
82406: LD_ADDR_OWVAR 20
82410: PUSH
82411: LD_INT 0
82413: ST_TO_ADDR
// uc_nation := 2 ;
82414: LD_ADDR_OWVAR 21
82418: PUSH
82419: LD_INT 2
82421: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
82422: LD_ADDR_OWVAR 37
82426: PUSH
82427: LD_INT 14
82429: ST_TO_ADDR
// vc_engine := engine_siberite ;
82430: LD_ADDR_OWVAR 39
82434: PUSH
82435: LD_INT 3
82437: ST_TO_ADDR
// vc_control := control_apeman ;
82438: LD_ADDR_OWVAR 38
82442: PUSH
82443: LD_INT 5
82445: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
82446: LD_ADDR_OWVAR 40
82450: PUSH
82451: LD_INT 29
82453: ST_TO_ADDR
// un := CreateVehicle ;
82454: LD_ADDR_VAR 0 2
82458: PUSH
82459: CALL_OW 45
82463: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82464: LD_VAR 0 2
82468: PPUSH
82469: LD_INT 1
82471: PPUSH
82472: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82476: LD_INT 35
82478: PPUSH
82479: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82483: LD_VAR 0 2
82487: PPUSH
82488: LD_INT 22
82490: PUSH
82491: LD_OWVAR 2
82495: PUSH
82496: EMPTY
82497: LIST
82498: LIST
82499: PPUSH
82500: CALL_OW 69
82504: PPUSH
82505: LD_VAR 0 2
82509: PPUSH
82510: CALL_OW 74
82514: PPUSH
82515: CALL_OW 115
// until IsDead ( un ) ;
82519: LD_VAR 0 2
82523: PPUSH
82524: CALL_OW 301
82528: IFFALSE 82476
// end ;
82530: PPOPN 2
82532: END
// every 0 0$1 trigger StreamModeActive and sStu do
82533: LD_EXP 64
82537: IFFALSE 82545
82539: PUSH
82540: LD_EXP 103
82544: AND
82545: IFFALSE 82561
82547: GO 82549
82549: DISABLE
// begin ToLua ( displayStucuk(); ) ;
82550: LD_STRING displayStucuk();
82552: PPUSH
82553: CALL_OW 559
// ResetFog ;
82557: CALL_OW 335
// end ;
82561: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
82562: LD_EXP 64
82566: IFFALSE 82574
82568: PUSH
82569: LD_EXP 96
82573: AND
82574: IFFALSE 82715
82576: GO 82578
82578: DISABLE
82579: LD_INT 0
82581: PPUSH
82582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
82583: LD_ADDR_VAR 0 2
82587: PUSH
82588: LD_INT 22
82590: PUSH
82591: LD_OWVAR 2
82595: PUSH
82596: EMPTY
82597: LIST
82598: LIST
82599: PUSH
82600: LD_INT 21
82602: PUSH
82603: LD_INT 1
82605: PUSH
82606: EMPTY
82607: LIST
82608: LIST
82609: PUSH
82610: EMPTY
82611: LIST
82612: LIST
82613: PPUSH
82614: CALL_OW 69
82618: ST_TO_ADDR
// if not tmp then
82619: LD_VAR 0 2
82623: NOT
82624: IFFALSE 82628
// exit ;
82626: GO 82715
// un := tmp [ rand ( 1 , tmp ) ] ;
82628: LD_ADDR_VAR 0 1
82632: PUSH
82633: LD_VAR 0 2
82637: PUSH
82638: LD_INT 1
82640: PPUSH
82641: LD_VAR 0 2
82645: PPUSH
82646: CALL_OW 12
82650: ARRAY
82651: ST_TO_ADDR
// SetSide ( un , 0 ) ;
82652: LD_VAR 0 1
82656: PPUSH
82657: LD_INT 0
82659: PPUSH
82660: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
82664: LD_VAR 0 1
82668: PPUSH
82669: LD_OWVAR 3
82673: PUSH
82674: LD_VAR 0 1
82678: DIFF
82679: PPUSH
82680: LD_VAR 0 1
82684: PPUSH
82685: CALL_OW 74
82689: PPUSH
82690: CALL_OW 115
// wait ( 0 0$20 ) ;
82694: LD_INT 700
82696: PPUSH
82697: CALL_OW 67
// SetSide ( un , your_side ) ;
82701: LD_VAR 0 1
82705: PPUSH
82706: LD_OWVAR 2
82710: PPUSH
82711: CALL_OW 235
// end ;
82715: PPOPN 2
82717: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
82718: LD_EXP 64
82722: IFFALSE 82730
82724: PUSH
82725: LD_EXP 97
82729: AND
82730: IFFALSE 82836
82732: GO 82734
82734: DISABLE
82735: LD_INT 0
82737: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82738: LD_ADDR_VAR 0 1
82742: PUSH
82743: LD_INT 22
82745: PUSH
82746: LD_OWVAR 2
82750: PUSH
82751: EMPTY
82752: LIST
82753: LIST
82754: PUSH
82755: LD_INT 2
82757: PUSH
82758: LD_INT 30
82760: PUSH
82761: LD_INT 0
82763: PUSH
82764: EMPTY
82765: LIST
82766: LIST
82767: PUSH
82768: LD_INT 30
82770: PUSH
82771: LD_INT 1
82773: PUSH
82774: EMPTY
82775: LIST
82776: LIST
82777: PUSH
82778: EMPTY
82779: LIST
82780: LIST
82781: LIST
82782: PUSH
82783: EMPTY
82784: LIST
82785: LIST
82786: PPUSH
82787: CALL_OW 69
82791: ST_TO_ADDR
// if not depot then
82792: LD_VAR 0 1
82796: NOT
82797: IFFALSE 82801
// exit ;
82799: GO 82836
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
82801: LD_VAR 0 1
82805: PUSH
82806: LD_INT 1
82808: ARRAY
82809: PPUSH
82810: CALL_OW 250
82814: PPUSH
82815: LD_VAR 0 1
82819: PUSH
82820: LD_INT 1
82822: ARRAY
82823: PPUSH
82824: CALL_OW 251
82828: PPUSH
82829: LD_INT 70
82831: PPUSH
82832: CALL_OW 495
// end ;
82836: PPOPN 1
82838: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
82839: LD_EXP 64
82843: IFFALSE 82851
82845: PUSH
82846: LD_EXP 98
82850: AND
82851: IFFALSE 83062
82853: GO 82855
82855: DISABLE
82856: LD_INT 0
82858: PPUSH
82859: PPUSH
82860: PPUSH
82861: PPUSH
82862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
82863: LD_ADDR_VAR 0 5
82867: PUSH
82868: LD_INT 22
82870: PUSH
82871: LD_OWVAR 2
82875: PUSH
82876: EMPTY
82877: LIST
82878: LIST
82879: PUSH
82880: LD_INT 21
82882: PUSH
82883: LD_INT 1
82885: PUSH
82886: EMPTY
82887: LIST
82888: LIST
82889: PUSH
82890: EMPTY
82891: LIST
82892: LIST
82893: PPUSH
82894: CALL_OW 69
82898: ST_TO_ADDR
// if not tmp then
82899: LD_VAR 0 5
82903: NOT
82904: IFFALSE 82908
// exit ;
82906: GO 83062
// for i in tmp do
82908: LD_ADDR_VAR 0 1
82912: PUSH
82913: LD_VAR 0 5
82917: PUSH
82918: FOR_IN
82919: IFFALSE 83060
// begin d := rand ( 0 , 5 ) ;
82921: LD_ADDR_VAR 0 4
82925: PUSH
82926: LD_INT 0
82928: PPUSH
82929: LD_INT 5
82931: PPUSH
82932: CALL_OW 12
82936: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
82937: LD_ADDR_VAR 0 2
82941: PUSH
82942: LD_VAR 0 1
82946: PPUSH
82947: CALL_OW 250
82951: PPUSH
82952: LD_VAR 0 4
82956: PPUSH
82957: LD_INT 3
82959: PPUSH
82960: LD_INT 12
82962: PPUSH
82963: CALL_OW 12
82967: PPUSH
82968: CALL_OW 272
82972: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
82973: LD_ADDR_VAR 0 3
82977: PUSH
82978: LD_VAR 0 1
82982: PPUSH
82983: CALL_OW 251
82987: PPUSH
82988: LD_VAR 0 4
82992: PPUSH
82993: LD_INT 3
82995: PPUSH
82996: LD_INT 12
82998: PPUSH
82999: CALL_OW 12
83003: PPUSH
83004: CALL_OW 273
83008: ST_TO_ADDR
// if ValidHex ( x , y ) then
83009: LD_VAR 0 2
83013: PPUSH
83014: LD_VAR 0 3
83018: PPUSH
83019: CALL_OW 488
83023: IFFALSE 83058
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
83025: LD_VAR 0 1
83029: PPUSH
83030: LD_VAR 0 2
83034: PPUSH
83035: LD_VAR 0 3
83039: PPUSH
83040: LD_INT 3
83042: PPUSH
83043: LD_INT 6
83045: PPUSH
83046: CALL_OW 12
83050: PPUSH
83051: LD_INT 1
83053: PPUSH
83054: CALL_OW 483
// end ;
83058: GO 82918
83060: POP
83061: POP
// end ;
83062: PPOPN 5
83064: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
83065: LD_EXP 64
83069: IFFALSE 83077
83071: PUSH
83072: LD_EXP 99
83076: AND
83077: IFFALSE 83171
83079: GO 83081
83081: DISABLE
83082: LD_INT 0
83084: PPUSH
83085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
83086: LD_ADDR_VAR 0 2
83090: PUSH
83091: LD_INT 22
83093: PUSH
83094: LD_OWVAR 2
83098: PUSH
83099: EMPTY
83100: LIST
83101: LIST
83102: PUSH
83103: LD_INT 32
83105: PUSH
83106: LD_INT 1
83108: PUSH
83109: EMPTY
83110: LIST
83111: LIST
83112: PUSH
83113: LD_INT 21
83115: PUSH
83116: LD_INT 2
83118: PUSH
83119: EMPTY
83120: LIST
83121: LIST
83122: PUSH
83123: EMPTY
83124: LIST
83125: LIST
83126: LIST
83127: PPUSH
83128: CALL_OW 69
83132: ST_TO_ADDR
// if not tmp then
83133: LD_VAR 0 2
83137: NOT
83138: IFFALSE 83142
// exit ;
83140: GO 83171
// for i in tmp do
83142: LD_ADDR_VAR 0 1
83146: PUSH
83147: LD_VAR 0 2
83151: PUSH
83152: FOR_IN
83153: IFFALSE 83169
// SetFuel ( i , 0 ) ;
83155: LD_VAR 0 1
83159: PPUSH
83160: LD_INT 0
83162: PPUSH
83163: CALL_OW 240
83167: GO 83152
83169: POP
83170: POP
// end ;
83171: PPOPN 2
83173: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
83174: LD_EXP 64
83178: IFFALSE 83186
83180: PUSH
83181: LD_EXP 100
83185: AND
83186: IFFALSE 83252
83188: GO 83190
83190: DISABLE
83191: LD_INT 0
83193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83194: LD_ADDR_VAR 0 1
83198: PUSH
83199: LD_INT 22
83201: PUSH
83202: LD_OWVAR 2
83206: PUSH
83207: EMPTY
83208: LIST
83209: LIST
83210: PUSH
83211: LD_INT 30
83213: PUSH
83214: LD_INT 29
83216: PUSH
83217: EMPTY
83218: LIST
83219: LIST
83220: PUSH
83221: EMPTY
83222: LIST
83223: LIST
83224: PPUSH
83225: CALL_OW 69
83229: ST_TO_ADDR
// if not tmp then
83230: LD_VAR 0 1
83234: NOT
83235: IFFALSE 83239
// exit ;
83237: GO 83252
// DestroyUnit ( tmp [ 1 ] ) ;
83239: LD_VAR 0 1
83243: PUSH
83244: LD_INT 1
83246: ARRAY
83247: PPUSH
83248: CALL_OW 65
// end ;
83252: PPOPN 1
83254: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
83255: LD_EXP 64
83259: IFFALSE 83267
83261: PUSH
83262: LD_EXP 102
83266: AND
83267: IFFALSE 83396
83269: GO 83271
83271: DISABLE
83272: LD_INT 0
83274: PPUSH
// begin uc_side := 0 ;
83275: LD_ADDR_OWVAR 20
83279: PUSH
83280: LD_INT 0
83282: ST_TO_ADDR
// uc_nation := nation_arabian ;
83283: LD_ADDR_OWVAR 21
83287: PUSH
83288: LD_INT 2
83290: ST_TO_ADDR
// hc_gallery :=  ;
83291: LD_ADDR_OWVAR 33
83295: PUSH
83296: LD_STRING 
83298: ST_TO_ADDR
// hc_name :=  ;
83299: LD_ADDR_OWVAR 26
83303: PUSH
83304: LD_STRING 
83306: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
83307: LD_INT 1
83309: PPUSH
83310: LD_INT 11
83312: PPUSH
83313: LD_INT 10
83315: PPUSH
83316: CALL_OW 380
// un := CreateHuman ;
83320: LD_ADDR_VAR 0 1
83324: PUSH
83325: CALL_OW 44
83329: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83330: LD_VAR 0 1
83334: PPUSH
83335: LD_INT 1
83337: PPUSH
83338: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
83342: LD_INT 35
83344: PPUSH
83345: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
83349: LD_VAR 0 1
83353: PPUSH
83354: LD_INT 22
83356: PUSH
83357: LD_OWVAR 2
83361: PUSH
83362: EMPTY
83363: LIST
83364: LIST
83365: PPUSH
83366: CALL_OW 69
83370: PPUSH
83371: LD_VAR 0 1
83375: PPUSH
83376: CALL_OW 74
83380: PPUSH
83381: CALL_OW 115
// until IsDead ( un ) ;
83385: LD_VAR 0 1
83389: PPUSH
83390: CALL_OW 301
83394: IFFALSE 83342
// end ;
83396: PPOPN 1
83398: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
83399: LD_EXP 64
83403: IFFALSE 83411
83405: PUSH
83406: LD_EXP 104
83410: AND
83411: IFFALSE 83423
83413: GO 83415
83415: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
83416: LD_STRING earthquake(getX(game), 0, 32)
83418: PPUSH
83419: CALL_OW 559
83423: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
83424: LD_EXP 64
83428: IFFALSE 83436
83430: PUSH
83431: LD_EXP 105
83435: AND
83436: IFFALSE 83527
83438: GO 83440
83440: DISABLE
83441: LD_INT 0
83443: PPUSH
// begin enable ;
83444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
83445: LD_ADDR_VAR 0 1
83449: PUSH
83450: LD_INT 22
83452: PUSH
83453: LD_OWVAR 2
83457: PUSH
83458: EMPTY
83459: LIST
83460: LIST
83461: PUSH
83462: LD_INT 21
83464: PUSH
83465: LD_INT 2
83467: PUSH
83468: EMPTY
83469: LIST
83470: LIST
83471: PUSH
83472: LD_INT 33
83474: PUSH
83475: LD_INT 3
83477: PUSH
83478: EMPTY
83479: LIST
83480: LIST
83481: PUSH
83482: EMPTY
83483: LIST
83484: LIST
83485: LIST
83486: PPUSH
83487: CALL_OW 69
83491: ST_TO_ADDR
// if not tmp then
83492: LD_VAR 0 1
83496: NOT
83497: IFFALSE 83501
// exit ;
83499: GO 83527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83501: LD_VAR 0 1
83505: PUSH
83506: LD_INT 1
83508: PPUSH
83509: LD_VAR 0 1
83513: PPUSH
83514: CALL_OW 12
83518: ARRAY
83519: PPUSH
83520: LD_INT 1
83522: PPUSH
83523: CALL_OW 234
// end ;
83527: PPOPN 1
83529: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
83530: LD_EXP 64
83534: IFFALSE 83542
83536: PUSH
83537: LD_EXP 106
83541: AND
83542: IFFALSE 83683
83544: GO 83546
83546: DISABLE
83547: LD_INT 0
83549: PPUSH
83550: PPUSH
83551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83552: LD_ADDR_VAR 0 3
83556: PUSH
83557: LD_INT 22
83559: PUSH
83560: LD_OWVAR 2
83564: PUSH
83565: EMPTY
83566: LIST
83567: LIST
83568: PUSH
83569: LD_INT 25
83571: PUSH
83572: LD_INT 1
83574: PUSH
83575: EMPTY
83576: LIST
83577: LIST
83578: PUSH
83579: EMPTY
83580: LIST
83581: LIST
83582: PPUSH
83583: CALL_OW 69
83587: ST_TO_ADDR
// if not tmp then
83588: LD_VAR 0 3
83592: NOT
83593: IFFALSE 83597
// exit ;
83595: GO 83683
// un := tmp [ rand ( 1 , tmp ) ] ;
83597: LD_ADDR_VAR 0 2
83601: PUSH
83602: LD_VAR 0 3
83606: PUSH
83607: LD_INT 1
83609: PPUSH
83610: LD_VAR 0 3
83614: PPUSH
83615: CALL_OW 12
83619: ARRAY
83620: ST_TO_ADDR
// if Crawls ( un ) then
83621: LD_VAR 0 2
83625: PPUSH
83626: CALL_OW 318
83630: IFFALSE 83641
// ComWalk ( un ) ;
83632: LD_VAR 0 2
83636: PPUSH
83637: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
83641: LD_VAR 0 2
83645: PPUSH
83646: LD_INT 9
83648: PPUSH
83649: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
83653: LD_INT 28
83655: PPUSH
83656: LD_OWVAR 2
83660: PPUSH
83661: LD_INT 2
83663: PPUSH
83664: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
83668: LD_INT 29
83670: PPUSH
83671: LD_OWVAR 2
83675: PPUSH
83676: LD_INT 2
83678: PPUSH
83679: CALL_OW 322
// end ;
83683: PPOPN 3
83685: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
83686: LD_EXP 64
83690: IFFALSE 83698
83692: PUSH
83693: LD_EXP 107
83697: AND
83698: IFFALSE 83809
83700: GO 83702
83702: DISABLE
83703: LD_INT 0
83705: PPUSH
83706: PPUSH
83707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83708: LD_ADDR_VAR 0 3
83712: PUSH
83713: LD_INT 22
83715: PUSH
83716: LD_OWVAR 2
83720: PUSH
83721: EMPTY
83722: LIST
83723: LIST
83724: PUSH
83725: LD_INT 25
83727: PUSH
83728: LD_INT 1
83730: PUSH
83731: EMPTY
83732: LIST
83733: LIST
83734: PUSH
83735: EMPTY
83736: LIST
83737: LIST
83738: PPUSH
83739: CALL_OW 69
83743: ST_TO_ADDR
// if not tmp then
83744: LD_VAR 0 3
83748: NOT
83749: IFFALSE 83753
// exit ;
83751: GO 83809
// un := tmp [ rand ( 1 , tmp ) ] ;
83753: LD_ADDR_VAR 0 2
83757: PUSH
83758: LD_VAR 0 3
83762: PUSH
83763: LD_INT 1
83765: PPUSH
83766: LD_VAR 0 3
83770: PPUSH
83771: CALL_OW 12
83775: ARRAY
83776: ST_TO_ADDR
// if Crawls ( un ) then
83777: LD_VAR 0 2
83781: PPUSH
83782: CALL_OW 318
83786: IFFALSE 83797
// ComWalk ( un ) ;
83788: LD_VAR 0 2
83792: PPUSH
83793: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83797: LD_VAR 0 2
83801: PPUSH
83802: LD_INT 8
83804: PPUSH
83805: CALL_OW 336
// end ;
83809: PPOPN 3
83811: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
83812: LD_EXP 64
83816: IFFALSE 83824
83818: PUSH
83819: LD_EXP 108
83823: AND
83824: IFFALSE 83968
83826: GO 83828
83828: DISABLE
83829: LD_INT 0
83831: PPUSH
83832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
83833: LD_ADDR_VAR 0 2
83837: PUSH
83838: LD_INT 22
83840: PUSH
83841: LD_OWVAR 2
83845: PUSH
83846: EMPTY
83847: LIST
83848: LIST
83849: PUSH
83850: LD_INT 21
83852: PUSH
83853: LD_INT 2
83855: PUSH
83856: EMPTY
83857: LIST
83858: LIST
83859: PUSH
83860: LD_INT 2
83862: PUSH
83863: LD_INT 34
83865: PUSH
83866: LD_INT 12
83868: PUSH
83869: EMPTY
83870: LIST
83871: LIST
83872: PUSH
83873: LD_INT 34
83875: PUSH
83876: LD_INT 51
83878: PUSH
83879: EMPTY
83880: LIST
83881: LIST
83882: PUSH
83883: LD_INT 34
83885: PUSH
83886: LD_INT 32
83888: PUSH
83889: EMPTY
83890: LIST
83891: LIST
83892: PUSH
83893: EMPTY
83894: LIST
83895: LIST
83896: LIST
83897: LIST
83898: PUSH
83899: EMPTY
83900: LIST
83901: LIST
83902: LIST
83903: PPUSH
83904: CALL_OW 69
83908: ST_TO_ADDR
// if not tmp then
83909: LD_VAR 0 2
83913: NOT
83914: IFFALSE 83918
// exit ;
83916: GO 83968
// for i in tmp do
83918: LD_ADDR_VAR 0 1
83922: PUSH
83923: LD_VAR 0 2
83927: PUSH
83928: FOR_IN
83929: IFFALSE 83966
// if GetCargo ( i , mat_artifact ) = 0 then
83931: LD_VAR 0 1
83935: PPUSH
83936: LD_INT 4
83938: PPUSH
83939: CALL_OW 289
83943: PUSH
83944: LD_INT 0
83946: EQUAL
83947: IFFALSE 83964
// SetCargo ( i , mat_siberit , 100 ) ;
83949: LD_VAR 0 1
83953: PPUSH
83954: LD_INT 3
83956: PPUSH
83957: LD_INT 100
83959: PPUSH
83960: CALL_OW 290
83964: GO 83928
83966: POP
83967: POP
// end ;
83968: PPOPN 2
83970: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
83971: LD_EXP 64
83975: IFFALSE 83983
83977: PUSH
83978: LD_EXP 109
83982: AND
83983: IFFALSE 84166
83985: GO 83987
83987: DISABLE
83988: LD_INT 0
83990: PPUSH
83991: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83992: LD_ADDR_VAR 0 2
83996: PUSH
83997: LD_INT 22
83999: PUSH
84000: LD_OWVAR 2
84004: PUSH
84005: EMPTY
84006: LIST
84007: LIST
84008: PPUSH
84009: CALL_OW 69
84013: ST_TO_ADDR
// if not tmp then
84014: LD_VAR 0 2
84018: NOT
84019: IFFALSE 84023
// exit ;
84021: GO 84166
// for i := 1 to 2 do
84023: LD_ADDR_VAR 0 1
84027: PUSH
84028: DOUBLE
84029: LD_INT 1
84031: DEC
84032: ST_TO_ADDR
84033: LD_INT 2
84035: PUSH
84036: FOR_TO
84037: IFFALSE 84164
// begin uc_side := your_side ;
84039: LD_ADDR_OWVAR 20
84043: PUSH
84044: LD_OWVAR 2
84048: ST_TO_ADDR
// uc_nation := nation_american ;
84049: LD_ADDR_OWVAR 21
84053: PUSH
84054: LD_INT 1
84056: ST_TO_ADDR
// vc_chassis := us_morphling ;
84057: LD_ADDR_OWVAR 37
84061: PUSH
84062: LD_INT 5
84064: ST_TO_ADDR
// vc_engine := engine_siberite ;
84065: LD_ADDR_OWVAR 39
84069: PUSH
84070: LD_INT 3
84072: ST_TO_ADDR
// vc_control := control_computer ;
84073: LD_ADDR_OWVAR 38
84077: PUSH
84078: LD_INT 3
84080: ST_TO_ADDR
// vc_weapon := us_double_laser ;
84081: LD_ADDR_OWVAR 40
84085: PUSH
84086: LD_INT 10
84088: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
84089: LD_VAR 0 2
84093: PUSH
84094: LD_INT 1
84096: ARRAY
84097: PPUSH
84098: CALL_OW 310
84102: NOT
84103: IFFALSE 84150
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
84105: CALL_OW 45
84109: PPUSH
84110: LD_VAR 0 2
84114: PUSH
84115: LD_INT 1
84117: ARRAY
84118: PPUSH
84119: CALL_OW 250
84123: PPUSH
84124: LD_VAR 0 2
84128: PUSH
84129: LD_INT 1
84131: ARRAY
84132: PPUSH
84133: CALL_OW 251
84137: PPUSH
84138: LD_INT 12
84140: PPUSH
84141: LD_INT 1
84143: PPUSH
84144: CALL_OW 50
84148: GO 84162
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
84150: CALL_OW 45
84154: PPUSH
84155: LD_INT 1
84157: PPUSH
84158: CALL_OW 51
// end ;
84162: GO 84036
84164: POP
84165: POP
// end ;
84166: PPOPN 2
84168: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
84169: LD_EXP 64
84173: IFFALSE 84181
84175: PUSH
84176: LD_EXP 110
84180: AND
84181: IFFALSE 84403
84183: GO 84185
84185: DISABLE
84186: LD_INT 0
84188: PPUSH
84189: PPUSH
84190: PPUSH
84191: PPUSH
84192: PPUSH
84193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84194: LD_ADDR_VAR 0 6
84198: PUSH
84199: LD_INT 22
84201: PUSH
84202: LD_OWVAR 2
84206: PUSH
84207: EMPTY
84208: LIST
84209: LIST
84210: PUSH
84211: LD_INT 21
84213: PUSH
84214: LD_INT 1
84216: PUSH
84217: EMPTY
84218: LIST
84219: LIST
84220: PUSH
84221: LD_INT 3
84223: PUSH
84224: LD_INT 23
84226: PUSH
84227: LD_INT 0
84229: PUSH
84230: EMPTY
84231: LIST
84232: LIST
84233: PUSH
84234: EMPTY
84235: LIST
84236: LIST
84237: PUSH
84238: EMPTY
84239: LIST
84240: LIST
84241: LIST
84242: PPUSH
84243: CALL_OW 69
84247: ST_TO_ADDR
// if not tmp then
84248: LD_VAR 0 6
84252: NOT
84253: IFFALSE 84257
// exit ;
84255: GO 84403
// s1 := rand ( 1 , 4 ) ;
84257: LD_ADDR_VAR 0 2
84261: PUSH
84262: LD_INT 1
84264: PPUSH
84265: LD_INT 4
84267: PPUSH
84268: CALL_OW 12
84272: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
84273: LD_ADDR_VAR 0 4
84277: PUSH
84278: LD_VAR 0 6
84282: PUSH
84283: LD_INT 1
84285: ARRAY
84286: PPUSH
84287: LD_VAR 0 2
84291: PPUSH
84292: CALL_OW 259
84296: ST_TO_ADDR
// if s1 = 1 then
84297: LD_VAR 0 2
84301: PUSH
84302: LD_INT 1
84304: EQUAL
84305: IFFALSE 84325
// s2 := rand ( 2 , 4 ) else
84307: LD_ADDR_VAR 0 3
84311: PUSH
84312: LD_INT 2
84314: PPUSH
84315: LD_INT 4
84317: PPUSH
84318: CALL_OW 12
84322: ST_TO_ADDR
84323: GO 84333
// s2 := 1 ;
84325: LD_ADDR_VAR 0 3
84329: PUSH
84330: LD_INT 1
84332: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
84333: LD_ADDR_VAR 0 5
84337: PUSH
84338: LD_VAR 0 6
84342: PUSH
84343: LD_INT 1
84345: ARRAY
84346: PPUSH
84347: LD_VAR 0 3
84351: PPUSH
84352: CALL_OW 259
84356: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
84357: LD_VAR 0 6
84361: PUSH
84362: LD_INT 1
84364: ARRAY
84365: PPUSH
84366: LD_VAR 0 2
84370: PPUSH
84371: LD_VAR 0 5
84375: PPUSH
84376: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
84380: LD_VAR 0 6
84384: PUSH
84385: LD_INT 1
84387: ARRAY
84388: PPUSH
84389: LD_VAR 0 3
84393: PPUSH
84394: LD_VAR 0 4
84398: PPUSH
84399: CALL_OW 237
// end ;
84403: PPOPN 6
84405: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
84406: LD_EXP 64
84410: IFFALSE 84418
84412: PUSH
84413: LD_EXP 111
84417: AND
84418: IFFALSE 84497
84420: GO 84422
84422: DISABLE
84423: LD_INT 0
84425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
84426: LD_ADDR_VAR 0 1
84430: PUSH
84431: LD_INT 22
84433: PUSH
84434: LD_OWVAR 2
84438: PUSH
84439: EMPTY
84440: LIST
84441: LIST
84442: PUSH
84443: LD_INT 30
84445: PUSH
84446: LD_INT 3
84448: PUSH
84449: EMPTY
84450: LIST
84451: LIST
84452: PUSH
84453: EMPTY
84454: LIST
84455: LIST
84456: PPUSH
84457: CALL_OW 69
84461: ST_TO_ADDR
// if not tmp then
84462: LD_VAR 0 1
84466: NOT
84467: IFFALSE 84471
// exit ;
84469: GO 84497
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
84471: LD_VAR 0 1
84475: PUSH
84476: LD_INT 1
84478: PPUSH
84479: LD_VAR 0 1
84483: PPUSH
84484: CALL_OW 12
84488: ARRAY
84489: PPUSH
84490: LD_INT 1
84492: PPUSH
84493: CALL_OW 234
// end ;
84497: PPOPN 1
84499: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
84500: LD_EXP 64
84504: IFFALSE 84512
84506: PUSH
84507: LD_EXP 112
84511: AND
84512: IFFALSE 84624
84514: GO 84516
84516: DISABLE
84517: LD_INT 0
84519: PPUSH
84520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
84521: LD_ADDR_VAR 0 2
84525: PUSH
84526: LD_INT 22
84528: PUSH
84529: LD_OWVAR 2
84533: PUSH
84534: EMPTY
84535: LIST
84536: LIST
84537: PUSH
84538: LD_INT 2
84540: PUSH
84541: LD_INT 30
84543: PUSH
84544: LD_INT 27
84546: PUSH
84547: EMPTY
84548: LIST
84549: LIST
84550: PUSH
84551: LD_INT 30
84553: PUSH
84554: LD_INT 26
84556: PUSH
84557: EMPTY
84558: LIST
84559: LIST
84560: PUSH
84561: LD_INT 30
84563: PUSH
84564: LD_INT 28
84566: PUSH
84567: EMPTY
84568: LIST
84569: LIST
84570: PUSH
84571: EMPTY
84572: LIST
84573: LIST
84574: LIST
84575: LIST
84576: PUSH
84577: EMPTY
84578: LIST
84579: LIST
84580: PPUSH
84581: CALL_OW 69
84585: ST_TO_ADDR
// if not tmp then
84586: LD_VAR 0 2
84590: NOT
84591: IFFALSE 84595
// exit ;
84593: GO 84624
// for i in tmp do
84595: LD_ADDR_VAR 0 1
84599: PUSH
84600: LD_VAR 0 2
84604: PUSH
84605: FOR_IN
84606: IFFALSE 84622
// SetLives ( i , 1 ) ;
84608: LD_VAR 0 1
84612: PPUSH
84613: LD_INT 1
84615: PPUSH
84616: CALL_OW 234
84620: GO 84605
84622: POP
84623: POP
// end ;
84624: PPOPN 2
84626: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
84627: LD_EXP 64
84631: IFFALSE 84639
84633: PUSH
84634: LD_EXP 113
84638: AND
84639: IFFALSE 84926
84641: GO 84643
84643: DISABLE
84644: LD_INT 0
84646: PPUSH
84647: PPUSH
84648: PPUSH
// begin i := rand ( 1 , 7 ) ;
84649: LD_ADDR_VAR 0 1
84653: PUSH
84654: LD_INT 1
84656: PPUSH
84657: LD_INT 7
84659: PPUSH
84660: CALL_OW 12
84664: ST_TO_ADDR
// case i of 1 :
84665: LD_VAR 0 1
84669: PUSH
84670: LD_INT 1
84672: DOUBLE
84673: EQUAL
84674: IFTRUE 84678
84676: GO 84688
84678: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
84679: LD_STRING earthquake(getX(game), 0, 32)
84681: PPUSH
84682: CALL_OW 559
84686: GO 84926
84688: LD_INT 2
84690: DOUBLE
84691: EQUAL
84692: IFTRUE 84696
84694: GO 84710
84696: POP
// begin ToLua ( displayStucuk(); ) ;
84697: LD_STRING displayStucuk();
84699: PPUSH
84700: CALL_OW 559
// ResetFog ;
84704: CALL_OW 335
// end ; 3 :
84708: GO 84926
84710: LD_INT 3
84712: DOUBLE
84713: EQUAL
84714: IFTRUE 84718
84716: GO 84822
84718: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
84719: LD_ADDR_VAR 0 2
84723: PUSH
84724: LD_INT 22
84726: PUSH
84727: LD_OWVAR 2
84731: PUSH
84732: EMPTY
84733: LIST
84734: LIST
84735: PUSH
84736: LD_INT 25
84738: PUSH
84739: LD_INT 1
84741: PUSH
84742: EMPTY
84743: LIST
84744: LIST
84745: PUSH
84746: EMPTY
84747: LIST
84748: LIST
84749: PPUSH
84750: CALL_OW 69
84754: ST_TO_ADDR
// if not tmp then
84755: LD_VAR 0 2
84759: NOT
84760: IFFALSE 84764
// exit ;
84762: GO 84926
// un := tmp [ rand ( 1 , tmp ) ] ;
84764: LD_ADDR_VAR 0 3
84768: PUSH
84769: LD_VAR 0 2
84773: PUSH
84774: LD_INT 1
84776: PPUSH
84777: LD_VAR 0 2
84781: PPUSH
84782: CALL_OW 12
84786: ARRAY
84787: ST_TO_ADDR
// if Crawls ( un ) then
84788: LD_VAR 0 3
84792: PPUSH
84793: CALL_OW 318
84797: IFFALSE 84808
// ComWalk ( un ) ;
84799: LD_VAR 0 3
84803: PPUSH
84804: CALL_OW 138
// SetClass ( un , class_mortar ) ;
84808: LD_VAR 0 3
84812: PPUSH
84813: LD_INT 8
84815: PPUSH
84816: CALL_OW 336
// end ; 4 :
84820: GO 84926
84822: LD_INT 4
84824: DOUBLE
84825: EQUAL
84826: IFTRUE 84830
84828: GO 84904
84830: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
84831: LD_ADDR_VAR 0 2
84835: PUSH
84836: LD_INT 22
84838: PUSH
84839: LD_OWVAR 2
84843: PUSH
84844: EMPTY
84845: LIST
84846: LIST
84847: PUSH
84848: LD_INT 30
84850: PUSH
84851: LD_INT 29
84853: PUSH
84854: EMPTY
84855: LIST
84856: LIST
84857: PUSH
84858: EMPTY
84859: LIST
84860: LIST
84861: PPUSH
84862: CALL_OW 69
84866: ST_TO_ADDR
// if not tmp then
84867: LD_VAR 0 2
84871: NOT
84872: IFFALSE 84876
// exit ;
84874: GO 84926
// CenterNowOnUnits ( tmp [ 1 ] ) ;
84876: LD_VAR 0 2
84880: PUSH
84881: LD_INT 1
84883: ARRAY
84884: PPUSH
84885: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
84889: LD_VAR 0 2
84893: PUSH
84894: LD_INT 1
84896: ARRAY
84897: PPUSH
84898: CALL_OW 65
// end ; 5 .. 7 :
84902: GO 84926
84904: LD_INT 5
84906: DOUBLE
84907: GREATEREQUAL
84908: IFFALSE 84916
84910: LD_INT 7
84912: DOUBLE
84913: LESSEQUAL
84914: IFTRUE 84918
84916: GO 84925
84918: POP
// StreamSibBomb ; end ;
84919: CALL 81107 0 0
84923: GO 84926
84925: POP
// end ;
84926: PPOPN 3
84928: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
84929: LD_EXP 64
84933: IFFALSE 84941
84935: PUSH
84936: LD_EXP 114
84940: AND
84941: IFFALSE 85097
84943: GO 84945
84945: DISABLE
84946: LD_INT 0
84948: PPUSH
84949: PPUSH
84950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
84951: LD_ADDR_VAR 0 2
84955: PUSH
84956: LD_INT 81
84958: PUSH
84959: LD_OWVAR 2
84963: PUSH
84964: EMPTY
84965: LIST
84966: LIST
84967: PUSH
84968: LD_INT 2
84970: PUSH
84971: LD_INT 21
84973: PUSH
84974: LD_INT 1
84976: PUSH
84977: EMPTY
84978: LIST
84979: LIST
84980: PUSH
84981: LD_INT 21
84983: PUSH
84984: LD_INT 2
84986: PUSH
84987: EMPTY
84988: LIST
84989: LIST
84990: PUSH
84991: EMPTY
84992: LIST
84993: LIST
84994: LIST
84995: PUSH
84996: EMPTY
84997: LIST
84998: LIST
84999: PPUSH
85000: CALL_OW 69
85004: ST_TO_ADDR
// if not tmp then
85005: LD_VAR 0 2
85009: NOT
85010: IFFALSE 85014
// exit ;
85012: GO 85097
// p := 0 ;
85014: LD_ADDR_VAR 0 3
85018: PUSH
85019: LD_INT 0
85021: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
85022: LD_INT 35
85024: PPUSH
85025: CALL_OW 67
// p := p + 1 ;
85029: LD_ADDR_VAR 0 3
85033: PUSH
85034: LD_VAR 0 3
85038: PUSH
85039: LD_INT 1
85041: PLUS
85042: ST_TO_ADDR
// for i in tmp do
85043: LD_ADDR_VAR 0 1
85047: PUSH
85048: LD_VAR 0 2
85052: PUSH
85053: FOR_IN
85054: IFFALSE 85085
// if GetLives ( i ) < 1000 then
85056: LD_VAR 0 1
85060: PPUSH
85061: CALL_OW 256
85065: PUSH
85066: LD_INT 1000
85068: LESS
85069: IFFALSE 85083
// SetLives ( i , 1000 ) ;
85071: LD_VAR 0 1
85075: PPUSH
85076: LD_INT 1000
85078: PPUSH
85079: CALL_OW 234
85083: GO 85053
85085: POP
85086: POP
// until p > 20 ;
85087: LD_VAR 0 3
85091: PUSH
85092: LD_INT 20
85094: GREATER
85095: IFFALSE 85022
// end ;
85097: PPOPN 3
85099: END
// every 0 0$1 trigger StreamModeActive and sTime do
85100: LD_EXP 64
85104: IFFALSE 85112
85106: PUSH
85107: LD_EXP 115
85111: AND
85112: IFFALSE 85147
85114: GO 85116
85116: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
85117: LD_INT 28
85119: PPUSH
85120: LD_OWVAR 2
85124: PPUSH
85125: LD_INT 2
85127: PPUSH
85128: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
85132: LD_INT 30
85134: PPUSH
85135: LD_OWVAR 2
85139: PPUSH
85140: LD_INT 2
85142: PPUSH
85143: CALL_OW 322
// end ;
85147: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
85148: LD_EXP 64
85152: IFFALSE 85160
85154: PUSH
85155: LD_EXP 116
85159: AND
85160: IFFALSE 85281
85162: GO 85164
85164: DISABLE
85165: LD_INT 0
85167: PPUSH
85168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
85169: LD_ADDR_VAR 0 2
85173: PUSH
85174: LD_INT 22
85176: PUSH
85177: LD_OWVAR 2
85181: PUSH
85182: EMPTY
85183: LIST
85184: LIST
85185: PUSH
85186: LD_INT 21
85188: PUSH
85189: LD_INT 1
85191: PUSH
85192: EMPTY
85193: LIST
85194: LIST
85195: PUSH
85196: LD_INT 3
85198: PUSH
85199: LD_INT 23
85201: PUSH
85202: LD_INT 0
85204: PUSH
85205: EMPTY
85206: LIST
85207: LIST
85208: PUSH
85209: EMPTY
85210: LIST
85211: LIST
85212: PUSH
85213: EMPTY
85214: LIST
85215: LIST
85216: LIST
85217: PPUSH
85218: CALL_OW 69
85222: ST_TO_ADDR
// if not tmp then
85223: LD_VAR 0 2
85227: NOT
85228: IFFALSE 85232
// exit ;
85230: GO 85281
// for i in tmp do
85232: LD_ADDR_VAR 0 1
85236: PUSH
85237: LD_VAR 0 2
85241: PUSH
85242: FOR_IN
85243: IFFALSE 85279
// begin if Crawls ( i ) then
85245: LD_VAR 0 1
85249: PPUSH
85250: CALL_OW 318
85254: IFFALSE 85265
// ComWalk ( i ) ;
85256: LD_VAR 0 1
85260: PPUSH
85261: CALL_OW 138
// SetClass ( i , 2 ) ;
85265: LD_VAR 0 1
85269: PPUSH
85270: LD_INT 2
85272: PPUSH
85273: CALL_OW 336
// end ;
85277: GO 85242
85279: POP
85280: POP
// end ;
85281: PPOPN 2
85283: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
85284: LD_EXP 64
85288: IFFALSE 85296
85290: PUSH
85291: LD_EXP 117
85295: AND
85296: IFFALSE 85586
85298: GO 85300
85300: DISABLE
85301: LD_INT 0
85303: PPUSH
85304: PPUSH
85305: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
85306: LD_OWVAR 2
85310: PPUSH
85311: LD_INT 9
85313: PPUSH
85314: LD_INT 1
85316: PPUSH
85317: LD_INT 1
85319: PPUSH
85320: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
85324: LD_INT 9
85326: PPUSH
85327: LD_OWVAR 2
85331: PPUSH
85332: CALL_OW 343
// uc_side := 9 ;
85336: LD_ADDR_OWVAR 20
85340: PUSH
85341: LD_INT 9
85343: ST_TO_ADDR
// uc_nation := 2 ;
85344: LD_ADDR_OWVAR 21
85348: PUSH
85349: LD_INT 2
85351: ST_TO_ADDR
// hc_name := Dark Warrior ;
85352: LD_ADDR_OWVAR 26
85356: PUSH
85357: LD_STRING Dark Warrior
85359: ST_TO_ADDR
// hc_gallery :=  ;
85360: LD_ADDR_OWVAR 33
85364: PUSH
85365: LD_STRING 
85367: ST_TO_ADDR
// hc_noskilllimit := true ;
85368: LD_ADDR_OWVAR 76
85372: PUSH
85373: LD_INT 1
85375: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
85376: LD_ADDR_OWVAR 31
85380: PUSH
85381: LD_INT 30
85383: PUSH
85384: LD_INT 30
85386: PUSH
85387: LD_INT 30
85389: PUSH
85390: LD_INT 30
85392: PUSH
85393: EMPTY
85394: LIST
85395: LIST
85396: LIST
85397: LIST
85398: ST_TO_ADDR
// un := CreateHuman ;
85399: LD_ADDR_VAR 0 3
85403: PUSH
85404: CALL_OW 44
85408: ST_TO_ADDR
// hc_noskilllimit := false ;
85409: LD_ADDR_OWVAR 76
85413: PUSH
85414: LD_INT 0
85416: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
85417: LD_VAR 0 3
85421: PPUSH
85422: LD_INT 1
85424: PPUSH
85425: CALL_OW 51
// ToLua ( playRanger() ) ;
85429: LD_STRING playRanger()
85431: PPUSH
85432: CALL_OW 559
// p := 0 ;
85436: LD_ADDR_VAR 0 2
85440: PUSH
85441: LD_INT 0
85443: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
85444: LD_INT 35
85446: PPUSH
85447: CALL_OW 67
// p := p + 1 ;
85451: LD_ADDR_VAR 0 2
85455: PUSH
85456: LD_VAR 0 2
85460: PUSH
85461: LD_INT 1
85463: PLUS
85464: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
85465: LD_VAR 0 3
85469: PPUSH
85470: CALL_OW 256
85474: PUSH
85475: LD_INT 1000
85477: LESS
85478: IFFALSE 85492
// SetLives ( un , 1000 ) ;
85480: LD_VAR 0 3
85484: PPUSH
85485: LD_INT 1000
85487: PPUSH
85488: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
85492: LD_VAR 0 3
85496: PPUSH
85497: LD_INT 81
85499: PUSH
85500: LD_OWVAR 2
85504: PUSH
85505: EMPTY
85506: LIST
85507: LIST
85508: PUSH
85509: LD_INT 91
85511: PUSH
85512: LD_VAR 0 3
85516: PUSH
85517: LD_INT 30
85519: PUSH
85520: EMPTY
85521: LIST
85522: LIST
85523: LIST
85524: PUSH
85525: EMPTY
85526: LIST
85527: LIST
85528: PPUSH
85529: CALL_OW 69
85533: PPUSH
85534: LD_VAR 0 3
85538: PPUSH
85539: CALL_OW 74
85543: PPUSH
85544: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
85548: LD_VAR 0 2
85552: PUSH
85553: LD_INT 80
85555: GREATER
85556: IFTRUE 85569
85558: PUSH
85559: LD_VAR 0 3
85563: PPUSH
85564: CALL_OW 301
85568: OR
85569: IFFALSE 85444
// if un then
85571: LD_VAR 0 3
85575: IFFALSE 85586
// RemoveUnit ( un ) ;
85577: LD_VAR 0 3
85581: PPUSH
85582: CALL_OW 64
// end ;
85586: PPOPN 3
85588: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
85589: LD_EXP 118
85593: IFFALSE 85709
85595: GO 85597
85597: DISABLE
85598: LD_INT 0
85600: PPUSH
85601: PPUSH
85602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
85603: LD_ADDR_VAR 0 2
85607: PUSH
85608: LD_INT 81
85610: PUSH
85611: LD_OWVAR 2
85615: PUSH
85616: EMPTY
85617: LIST
85618: LIST
85619: PUSH
85620: LD_INT 21
85622: PUSH
85623: LD_INT 1
85625: PUSH
85626: EMPTY
85627: LIST
85628: LIST
85629: PUSH
85630: EMPTY
85631: LIST
85632: LIST
85633: PPUSH
85634: CALL_OW 69
85638: ST_TO_ADDR
// ToLua ( playComputer() ) ;
85639: LD_STRING playComputer()
85641: PPUSH
85642: CALL_OW 559
// if not tmp then
85646: LD_VAR 0 2
85650: NOT
85651: IFFALSE 85655
// exit ;
85653: GO 85709
// for i in tmp do
85655: LD_ADDR_VAR 0 1
85659: PUSH
85660: LD_VAR 0 2
85664: PUSH
85665: FOR_IN
85666: IFFALSE 85707
// for j := 1 to 4 do
85668: LD_ADDR_VAR 0 3
85672: PUSH
85673: DOUBLE
85674: LD_INT 1
85676: DEC
85677: ST_TO_ADDR
85678: LD_INT 4
85680: PUSH
85681: FOR_TO
85682: IFFALSE 85703
// SetSkill ( i , j , 10 ) ;
85684: LD_VAR 0 1
85688: PPUSH
85689: LD_VAR 0 3
85693: PPUSH
85694: LD_INT 10
85696: PPUSH
85697: CALL_OW 237
85701: GO 85681
85703: POP
85704: POP
85705: GO 85665
85707: POP
85708: POP
// end ;
85709: PPOPN 3
85711: END
// every 0 0$1 trigger s30 do var i , tmp ;
85712: LD_EXP 119
85716: IFFALSE 85785
85718: GO 85720
85720: DISABLE
85721: LD_INT 0
85723: PPUSH
85724: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
85725: LD_ADDR_VAR 0 2
85729: PUSH
85730: LD_INT 22
85732: PUSH
85733: LD_OWVAR 2
85737: PUSH
85738: EMPTY
85739: LIST
85740: LIST
85741: PPUSH
85742: CALL_OW 69
85746: ST_TO_ADDR
// if not tmp then
85747: LD_VAR 0 2
85751: NOT
85752: IFFALSE 85756
// exit ;
85754: GO 85785
// for i in tmp do
85756: LD_ADDR_VAR 0 1
85760: PUSH
85761: LD_VAR 0 2
85765: PUSH
85766: FOR_IN
85767: IFFALSE 85783
// SetLives ( i , 300 ) ;
85769: LD_VAR 0 1
85773: PPUSH
85774: LD_INT 300
85776: PPUSH
85777: CALL_OW 234
85781: GO 85766
85783: POP
85784: POP
// end ;
85785: PPOPN 2
85787: END
// every 0 0$1 trigger s60 do var i , tmp ;
85788: LD_EXP 120
85792: IFFALSE 85861
85794: GO 85796
85796: DISABLE
85797: LD_INT 0
85799: PPUSH
85800: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
85801: LD_ADDR_VAR 0 2
85805: PUSH
85806: LD_INT 22
85808: PUSH
85809: LD_OWVAR 2
85813: PUSH
85814: EMPTY
85815: LIST
85816: LIST
85817: PPUSH
85818: CALL_OW 69
85822: ST_TO_ADDR
// if not tmp then
85823: LD_VAR 0 2
85827: NOT
85828: IFFALSE 85832
// exit ;
85830: GO 85861
// for i in tmp do
85832: LD_ADDR_VAR 0 1
85836: PUSH
85837: LD_VAR 0 2
85841: PUSH
85842: FOR_IN
85843: IFFALSE 85859
// SetLives ( i , 600 ) ;
85845: LD_VAR 0 1
85849: PPUSH
85850: LD_INT 600
85852: PPUSH
85853: CALL_OW 234
85857: GO 85842
85859: POP
85860: POP
// end ;
85861: PPOPN 2
85863: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
85864: LD_INT 0
85866: PPUSH
// case cmd of 301 :
85867: LD_VAR 0 1
85871: PUSH
85872: LD_INT 301
85874: DOUBLE
85875: EQUAL
85876: IFTRUE 85880
85878: GO 85912
85880: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
85881: LD_VAR 0 6
85885: PPUSH
85886: LD_VAR 0 7
85890: PPUSH
85891: LD_VAR 0 8
85895: PPUSH
85896: LD_VAR 0 4
85900: PPUSH
85901: LD_VAR 0 5
85905: PPUSH
85906: CALL 87125 0 5
85910: GO 86033
85912: LD_INT 302
85914: DOUBLE
85915: EQUAL
85916: IFTRUE 85920
85918: GO 85957
85920: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
85921: LD_VAR 0 6
85925: PPUSH
85926: LD_VAR 0 7
85930: PPUSH
85931: LD_VAR 0 8
85935: PPUSH
85936: LD_VAR 0 9
85940: PPUSH
85941: LD_VAR 0 4
85945: PPUSH
85946: LD_VAR 0 5
85950: PPUSH
85951: CALL 87216 0 6
85955: GO 86033
85957: LD_INT 303
85959: DOUBLE
85960: EQUAL
85961: IFTRUE 85965
85963: GO 86002
85965: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
85966: LD_VAR 0 6
85970: PPUSH
85971: LD_VAR 0 7
85975: PPUSH
85976: LD_VAR 0 8
85980: PPUSH
85981: LD_VAR 0 9
85985: PPUSH
85986: LD_VAR 0 4
85990: PPUSH
85991: LD_VAR 0 5
85995: PPUSH
85996: CALL 86038 0 6
86000: GO 86033
86002: LD_INT 304
86004: DOUBLE
86005: EQUAL
86006: IFTRUE 86010
86008: GO 86032
86010: POP
// hHackTeleport ( unit , x , y ) ; end ;
86011: LD_VAR 0 2
86015: PPUSH
86016: LD_VAR 0 4
86020: PPUSH
86021: LD_VAR 0 5
86025: PPUSH
86026: CALL 87809 0 3
86030: GO 86033
86032: POP
// end ;
86033: LD_VAR 0 12
86037: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
86038: LD_INT 0
86040: PPUSH
86041: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
86042: LD_VAR 0 1
86046: PUSH
86047: LD_INT 1
86049: LESS
86050: IFTRUE 86062
86052: PUSH
86053: LD_VAR 0 1
86057: PUSH
86058: LD_INT 3
86060: GREATER
86061: OR
86062: IFTRUE 86080
86064: PUSH
86065: LD_VAR 0 5
86069: PPUSH
86070: LD_VAR 0 6
86074: PPUSH
86075: CALL_OW 428
86079: OR
86080: IFFALSE 86084
// exit ;
86082: GO 86812
// uc_side := your_side ;
86084: LD_ADDR_OWVAR 20
86088: PUSH
86089: LD_OWVAR 2
86093: ST_TO_ADDR
// uc_nation := nation ;
86094: LD_ADDR_OWVAR 21
86098: PUSH
86099: LD_VAR 0 1
86103: ST_TO_ADDR
// bc_level = 1 ;
86104: LD_ADDR_OWVAR 43
86108: PUSH
86109: LD_INT 1
86111: ST_TO_ADDR
// case btype of 1 :
86112: LD_VAR 0 2
86116: PUSH
86117: LD_INT 1
86119: DOUBLE
86120: EQUAL
86121: IFTRUE 86125
86123: GO 86136
86125: POP
// bc_type := b_depot ; 2 :
86126: LD_ADDR_OWVAR 42
86130: PUSH
86131: LD_INT 0
86133: ST_TO_ADDR
86134: GO 86756
86136: LD_INT 2
86138: DOUBLE
86139: EQUAL
86140: IFTRUE 86144
86142: GO 86155
86144: POP
// bc_type := b_warehouse ; 3 :
86145: LD_ADDR_OWVAR 42
86149: PUSH
86150: LD_INT 1
86152: ST_TO_ADDR
86153: GO 86756
86155: LD_INT 3
86157: DOUBLE
86158: EQUAL
86159: IFTRUE 86163
86161: GO 86174
86163: POP
// bc_type := b_lab ; 4 .. 9 :
86164: LD_ADDR_OWVAR 42
86168: PUSH
86169: LD_INT 6
86171: ST_TO_ADDR
86172: GO 86756
86174: LD_INT 4
86176: DOUBLE
86177: GREATEREQUAL
86178: IFFALSE 86186
86180: LD_INT 9
86182: DOUBLE
86183: LESSEQUAL
86184: IFTRUE 86188
86186: GO 86248
86188: POP
// begin bc_type := b_lab_half ;
86189: LD_ADDR_OWVAR 42
86193: PUSH
86194: LD_INT 7
86196: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
86197: LD_ADDR_OWVAR 44
86201: PUSH
86202: LD_INT 10
86204: PUSH
86205: LD_INT 11
86207: PUSH
86208: LD_INT 12
86210: PUSH
86211: LD_INT 15
86213: PUSH
86214: LD_INT 14
86216: PUSH
86217: LD_INT 13
86219: PUSH
86220: EMPTY
86221: LIST
86222: LIST
86223: LIST
86224: LIST
86225: LIST
86226: LIST
86227: PUSH
86228: LD_VAR 0 2
86232: PUSH
86233: LD_INT 3
86235: MINUS
86236: ARRAY
86237: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
86238: LD_ADDR_OWVAR 45
86242: PUSH
86243: LD_INT 9
86245: ST_TO_ADDR
// end ; 10 .. 13 :
86246: GO 86756
86248: LD_INT 10
86250: DOUBLE
86251: GREATEREQUAL
86252: IFFALSE 86260
86254: LD_INT 13
86256: DOUBLE
86257: LESSEQUAL
86258: IFTRUE 86262
86260: GO 86339
86262: POP
// begin bc_type := b_lab_full ;
86263: LD_ADDR_OWVAR 42
86267: PUSH
86268: LD_INT 8
86270: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
86271: LD_ADDR_OWVAR 44
86275: PUSH
86276: LD_INT 10
86278: PUSH
86279: LD_INT 12
86281: PUSH
86282: LD_INT 14
86284: PUSH
86285: LD_INT 13
86287: PUSH
86288: EMPTY
86289: LIST
86290: LIST
86291: LIST
86292: LIST
86293: PUSH
86294: LD_VAR 0 2
86298: PUSH
86299: LD_INT 9
86301: MINUS
86302: ARRAY
86303: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
86304: LD_ADDR_OWVAR 45
86308: PUSH
86309: LD_INT 11
86311: PUSH
86312: LD_INT 15
86314: PUSH
86315: LD_INT 12
86317: PUSH
86318: LD_INT 15
86320: PUSH
86321: EMPTY
86322: LIST
86323: LIST
86324: LIST
86325: LIST
86326: PUSH
86327: LD_VAR 0 2
86331: PUSH
86332: LD_INT 9
86334: MINUS
86335: ARRAY
86336: ST_TO_ADDR
// end ; 14 :
86337: GO 86756
86339: LD_INT 14
86341: DOUBLE
86342: EQUAL
86343: IFTRUE 86347
86345: GO 86358
86347: POP
// bc_type := b_workshop ; 15 :
86348: LD_ADDR_OWVAR 42
86352: PUSH
86353: LD_INT 2
86355: ST_TO_ADDR
86356: GO 86756
86358: LD_INT 15
86360: DOUBLE
86361: EQUAL
86362: IFTRUE 86366
86364: GO 86377
86366: POP
// bc_type := b_factory ; 16 :
86367: LD_ADDR_OWVAR 42
86371: PUSH
86372: LD_INT 3
86374: ST_TO_ADDR
86375: GO 86756
86377: LD_INT 16
86379: DOUBLE
86380: EQUAL
86381: IFTRUE 86385
86383: GO 86396
86385: POP
// bc_type := b_ext_gun ; 17 :
86386: LD_ADDR_OWVAR 42
86390: PUSH
86391: LD_INT 17
86393: ST_TO_ADDR
86394: GO 86756
86396: LD_INT 17
86398: DOUBLE
86399: EQUAL
86400: IFTRUE 86404
86402: GO 86432
86404: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
86405: LD_ADDR_OWVAR 42
86409: PUSH
86410: LD_INT 19
86412: PUSH
86413: LD_INT 23
86415: PUSH
86416: LD_INT 19
86418: PUSH
86419: EMPTY
86420: LIST
86421: LIST
86422: LIST
86423: PUSH
86424: LD_VAR 0 1
86428: ARRAY
86429: ST_TO_ADDR
86430: GO 86756
86432: LD_INT 18
86434: DOUBLE
86435: EQUAL
86436: IFTRUE 86440
86438: GO 86451
86440: POP
// bc_type := b_ext_radar ; 19 :
86441: LD_ADDR_OWVAR 42
86445: PUSH
86446: LD_INT 20
86448: ST_TO_ADDR
86449: GO 86756
86451: LD_INT 19
86453: DOUBLE
86454: EQUAL
86455: IFTRUE 86459
86457: GO 86470
86459: POP
// bc_type := b_ext_radio ; 20 :
86460: LD_ADDR_OWVAR 42
86464: PUSH
86465: LD_INT 22
86467: ST_TO_ADDR
86468: GO 86756
86470: LD_INT 20
86472: DOUBLE
86473: EQUAL
86474: IFTRUE 86478
86476: GO 86489
86478: POP
// bc_type := b_ext_siberium ; 21 :
86479: LD_ADDR_OWVAR 42
86483: PUSH
86484: LD_INT 21
86486: ST_TO_ADDR
86487: GO 86756
86489: LD_INT 21
86491: DOUBLE
86492: EQUAL
86493: IFTRUE 86497
86495: GO 86508
86497: POP
// bc_type := b_ext_computer ; 22 :
86498: LD_ADDR_OWVAR 42
86502: PUSH
86503: LD_INT 24
86505: ST_TO_ADDR
86506: GO 86756
86508: LD_INT 22
86510: DOUBLE
86511: EQUAL
86512: IFTRUE 86516
86514: GO 86527
86516: POP
// bc_type := b_ext_track ; 23 :
86517: LD_ADDR_OWVAR 42
86521: PUSH
86522: LD_INT 16
86524: ST_TO_ADDR
86525: GO 86756
86527: LD_INT 23
86529: DOUBLE
86530: EQUAL
86531: IFTRUE 86535
86533: GO 86546
86535: POP
// bc_type := b_ext_laser ; 24 :
86536: LD_ADDR_OWVAR 42
86540: PUSH
86541: LD_INT 25
86543: ST_TO_ADDR
86544: GO 86756
86546: LD_INT 24
86548: DOUBLE
86549: EQUAL
86550: IFTRUE 86554
86552: GO 86565
86554: POP
// bc_type := b_control_tower ; 25 :
86555: LD_ADDR_OWVAR 42
86559: PUSH
86560: LD_INT 36
86562: ST_TO_ADDR
86563: GO 86756
86565: LD_INT 25
86567: DOUBLE
86568: EQUAL
86569: IFTRUE 86573
86571: GO 86584
86573: POP
// bc_type := b_breastwork ; 26 :
86574: LD_ADDR_OWVAR 42
86578: PUSH
86579: LD_INT 31
86581: ST_TO_ADDR
86582: GO 86756
86584: LD_INT 26
86586: DOUBLE
86587: EQUAL
86588: IFTRUE 86592
86590: GO 86603
86592: POP
// bc_type := b_bunker ; 27 :
86593: LD_ADDR_OWVAR 42
86597: PUSH
86598: LD_INT 32
86600: ST_TO_ADDR
86601: GO 86756
86603: LD_INT 27
86605: DOUBLE
86606: EQUAL
86607: IFTRUE 86611
86609: GO 86622
86611: POP
// bc_type := b_turret ; 28 :
86612: LD_ADDR_OWVAR 42
86616: PUSH
86617: LD_INT 33
86619: ST_TO_ADDR
86620: GO 86756
86622: LD_INT 28
86624: DOUBLE
86625: EQUAL
86626: IFTRUE 86630
86628: GO 86641
86630: POP
// bc_type := b_armoury ; 29 :
86631: LD_ADDR_OWVAR 42
86635: PUSH
86636: LD_INT 4
86638: ST_TO_ADDR
86639: GO 86756
86641: LD_INT 29
86643: DOUBLE
86644: EQUAL
86645: IFTRUE 86649
86647: GO 86660
86649: POP
// bc_type := b_barracks ; 30 :
86650: LD_ADDR_OWVAR 42
86654: PUSH
86655: LD_INT 5
86657: ST_TO_ADDR
86658: GO 86756
86660: LD_INT 30
86662: DOUBLE
86663: EQUAL
86664: IFTRUE 86668
86666: GO 86679
86668: POP
// bc_type := b_solar_power ; 31 :
86669: LD_ADDR_OWVAR 42
86673: PUSH
86674: LD_INT 27
86676: ST_TO_ADDR
86677: GO 86756
86679: LD_INT 31
86681: DOUBLE
86682: EQUAL
86683: IFTRUE 86687
86685: GO 86698
86687: POP
// bc_type := b_oil_power ; 32 :
86688: LD_ADDR_OWVAR 42
86692: PUSH
86693: LD_INT 26
86695: ST_TO_ADDR
86696: GO 86756
86698: LD_INT 32
86700: DOUBLE
86701: EQUAL
86702: IFTRUE 86706
86704: GO 86717
86706: POP
// bc_type := b_siberite_power ; 33 :
86707: LD_ADDR_OWVAR 42
86711: PUSH
86712: LD_INT 28
86714: ST_TO_ADDR
86715: GO 86756
86717: LD_INT 33
86719: DOUBLE
86720: EQUAL
86721: IFTRUE 86725
86723: GO 86736
86725: POP
// bc_type := b_oil_mine ; 34 :
86726: LD_ADDR_OWVAR 42
86730: PUSH
86731: LD_INT 29
86733: ST_TO_ADDR
86734: GO 86756
86736: LD_INT 34
86738: DOUBLE
86739: EQUAL
86740: IFTRUE 86744
86742: GO 86755
86744: POP
// bc_type := b_siberite_mine ; end ;
86745: LD_ADDR_OWVAR 42
86749: PUSH
86750: LD_INT 30
86752: ST_TO_ADDR
86753: GO 86756
86755: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
86756: LD_ADDR_VAR 0 8
86760: PUSH
86761: LD_VAR 0 5
86765: PPUSH
86766: LD_VAR 0 6
86770: PPUSH
86771: LD_VAR 0 3
86775: PPUSH
86776: CALL_OW 47
86780: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
86781: LD_OWVAR 42
86785: PUSH
86786: LD_INT 32
86788: PUSH
86789: LD_INT 33
86791: PUSH
86792: EMPTY
86793: LIST
86794: LIST
86795: IN
86796: IFFALSE 86812
// PlaceWeaponTurret ( b , weapon ) ;
86798: LD_VAR 0 8
86802: PPUSH
86803: LD_VAR 0 4
86807: PPUSH
86808: CALL_OW 431
// end ;
86812: LD_VAR 0 7
86816: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
86817: LD_INT 0
86819: PPUSH
86820: PPUSH
86821: PPUSH
86822: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
86823: LD_ADDR_VAR 0 4
86827: PUSH
86828: LD_INT 22
86830: PUSH
86831: LD_OWVAR 2
86835: PUSH
86836: EMPTY
86837: LIST
86838: LIST
86839: PUSH
86840: LD_INT 2
86842: PUSH
86843: LD_INT 30
86845: PUSH
86846: LD_INT 0
86848: PUSH
86849: EMPTY
86850: LIST
86851: LIST
86852: PUSH
86853: LD_INT 30
86855: PUSH
86856: LD_INT 1
86858: PUSH
86859: EMPTY
86860: LIST
86861: LIST
86862: PUSH
86863: EMPTY
86864: LIST
86865: LIST
86866: LIST
86867: PUSH
86868: EMPTY
86869: LIST
86870: LIST
86871: PPUSH
86872: CALL_OW 69
86876: ST_TO_ADDR
// if not tmp then
86877: LD_VAR 0 4
86881: NOT
86882: IFFALSE 86886
// exit ;
86884: GO 86945
// for i in tmp do
86886: LD_ADDR_VAR 0 2
86890: PUSH
86891: LD_VAR 0 4
86895: PUSH
86896: FOR_IN
86897: IFFALSE 86943
// for j = 1 to 3 do
86899: LD_ADDR_VAR 0 3
86903: PUSH
86904: DOUBLE
86905: LD_INT 1
86907: DEC
86908: ST_TO_ADDR
86909: LD_INT 3
86911: PUSH
86912: FOR_TO
86913: IFFALSE 86939
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
86915: LD_VAR 0 2
86919: PPUSH
86920: CALL_OW 274
86924: PPUSH
86925: LD_VAR 0 3
86929: PPUSH
86930: LD_INT 99999
86932: PPUSH
86933: CALL_OW 277
86937: GO 86912
86939: POP
86940: POP
86941: GO 86896
86943: POP
86944: POP
// end ;
86945: LD_VAR 0 1
86949: RET
// export function hHackSetLevel10 ; var i , j ; begin
86950: LD_INT 0
86952: PPUSH
86953: PPUSH
86954: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
86955: LD_ADDR_VAR 0 2
86959: PUSH
86960: LD_INT 21
86962: PUSH
86963: LD_INT 1
86965: PUSH
86966: EMPTY
86967: LIST
86968: LIST
86969: PPUSH
86970: CALL_OW 69
86974: PUSH
86975: FOR_IN
86976: IFFALSE 87028
// if IsSelected ( i ) then
86978: LD_VAR 0 2
86982: PPUSH
86983: CALL_OW 306
86987: IFFALSE 87026
// begin for j := 1 to 4 do
86989: LD_ADDR_VAR 0 3
86993: PUSH
86994: DOUBLE
86995: LD_INT 1
86997: DEC
86998: ST_TO_ADDR
86999: LD_INT 4
87001: PUSH
87002: FOR_TO
87003: IFFALSE 87024
// SetSkill ( i , j , 10 ) ;
87005: LD_VAR 0 2
87009: PPUSH
87010: LD_VAR 0 3
87014: PPUSH
87015: LD_INT 10
87017: PPUSH
87018: CALL_OW 237
87022: GO 87002
87024: POP
87025: POP
// end ;
87026: GO 86975
87028: POP
87029: POP
// end ;
87030: LD_VAR 0 1
87034: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
87035: LD_INT 0
87037: PPUSH
87038: PPUSH
87039: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
87040: LD_ADDR_VAR 0 2
87044: PUSH
87045: LD_INT 22
87047: PUSH
87048: LD_OWVAR 2
87052: PUSH
87053: EMPTY
87054: LIST
87055: LIST
87056: PUSH
87057: LD_INT 21
87059: PUSH
87060: LD_INT 1
87062: PUSH
87063: EMPTY
87064: LIST
87065: LIST
87066: PUSH
87067: EMPTY
87068: LIST
87069: LIST
87070: PPUSH
87071: CALL_OW 69
87075: PUSH
87076: FOR_IN
87077: IFFALSE 87118
// begin for j := 1 to 4 do
87079: LD_ADDR_VAR 0 3
87083: PUSH
87084: DOUBLE
87085: LD_INT 1
87087: DEC
87088: ST_TO_ADDR
87089: LD_INT 4
87091: PUSH
87092: FOR_TO
87093: IFFALSE 87114
// SetSkill ( i , j , 10 ) ;
87095: LD_VAR 0 2
87099: PPUSH
87100: LD_VAR 0 3
87104: PPUSH
87105: LD_INT 10
87107: PPUSH
87108: CALL_OW 237
87112: GO 87092
87114: POP
87115: POP
// end ;
87116: GO 87076
87118: POP
87119: POP
// end ;
87120: LD_VAR 0 1
87124: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
87125: LD_INT 0
87127: PPUSH
// uc_side := your_side ;
87128: LD_ADDR_OWVAR 20
87132: PUSH
87133: LD_OWVAR 2
87137: ST_TO_ADDR
// uc_nation := nation ;
87138: LD_ADDR_OWVAR 21
87142: PUSH
87143: LD_VAR 0 1
87147: ST_TO_ADDR
// InitHc ;
87148: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
87152: LD_INT 0
87154: PPUSH
87155: LD_VAR 0 2
87159: PPUSH
87160: LD_VAR 0 3
87164: PPUSH
87165: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
87169: LD_VAR 0 4
87173: PPUSH
87174: LD_VAR 0 5
87178: PPUSH
87179: CALL_OW 428
87183: PUSH
87184: LD_INT 0
87186: EQUAL
87187: IFFALSE 87211
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
87189: CALL_OW 44
87193: PPUSH
87194: LD_VAR 0 4
87198: PPUSH
87199: LD_VAR 0 5
87203: PPUSH
87204: LD_INT 1
87206: PPUSH
87207: CALL_OW 48
// end ;
87211: LD_VAR 0 6
87215: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
87216: LD_INT 0
87218: PPUSH
87219: PPUSH
// uc_side := your_side ;
87220: LD_ADDR_OWVAR 20
87224: PUSH
87225: LD_OWVAR 2
87229: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
87230: LD_VAR 0 1
87234: PUSH
87235: LD_INT 1
87237: PUSH
87238: LD_INT 2
87240: PUSH
87241: LD_INT 3
87243: PUSH
87244: LD_INT 4
87246: PUSH
87247: LD_INT 5
87249: PUSH
87250: EMPTY
87251: LIST
87252: LIST
87253: LIST
87254: LIST
87255: LIST
87256: IN
87257: IFFALSE 87269
// uc_nation := nation_american else
87259: LD_ADDR_OWVAR 21
87263: PUSH
87264: LD_INT 1
87266: ST_TO_ADDR
87267: GO 87312
// if chassis in [ 11 , 12 , 13 , 14 ] then
87269: LD_VAR 0 1
87273: PUSH
87274: LD_INT 11
87276: PUSH
87277: LD_INT 12
87279: PUSH
87280: LD_INT 13
87282: PUSH
87283: LD_INT 14
87285: PUSH
87286: EMPTY
87287: LIST
87288: LIST
87289: LIST
87290: LIST
87291: IN
87292: IFFALSE 87304
// uc_nation := nation_arabian else
87294: LD_ADDR_OWVAR 21
87298: PUSH
87299: LD_INT 2
87301: ST_TO_ADDR
87302: GO 87312
// uc_nation := nation_russian ;
87304: LD_ADDR_OWVAR 21
87308: PUSH
87309: LD_INT 3
87311: ST_TO_ADDR
// vc_chassis := chassis ;
87312: LD_ADDR_OWVAR 37
87316: PUSH
87317: LD_VAR 0 1
87321: ST_TO_ADDR
// vc_engine := engine ;
87322: LD_ADDR_OWVAR 39
87326: PUSH
87327: LD_VAR 0 2
87331: ST_TO_ADDR
// vc_control := control ;
87332: LD_ADDR_OWVAR 38
87336: PUSH
87337: LD_VAR 0 3
87341: ST_TO_ADDR
// vc_weapon := weapon ;
87342: LD_ADDR_OWVAR 40
87346: PUSH
87347: LD_VAR 0 4
87351: ST_TO_ADDR
// un := CreateVehicle ;
87352: LD_ADDR_VAR 0 8
87356: PUSH
87357: CALL_OW 45
87361: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
87362: LD_VAR 0 8
87366: PPUSH
87367: LD_INT 0
87369: PPUSH
87370: LD_INT 5
87372: PPUSH
87373: CALL_OW 12
87377: PPUSH
87378: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
87382: LD_VAR 0 8
87386: PPUSH
87387: LD_VAR 0 5
87391: PPUSH
87392: LD_VAR 0 6
87396: PPUSH
87397: LD_INT 1
87399: PPUSH
87400: CALL_OW 48
// end ;
87404: LD_VAR 0 7
87408: RET
// export hInvincible ; every 1 do
87409: GO 87411
87411: DISABLE
// hInvincible := [ ] ;
87412: LD_ADDR_EXP 121
87416: PUSH
87417: EMPTY
87418: ST_TO_ADDR
87419: END
// every 10 do var i ;
87420: GO 87422
87422: DISABLE
87423: LD_INT 0
87425: PPUSH
// begin enable ;
87426: ENABLE
// if not hInvincible then
87427: LD_EXP 121
87431: NOT
87432: IFFALSE 87436
// exit ;
87434: GO 87480
// for i in hInvincible do
87436: LD_ADDR_VAR 0 1
87440: PUSH
87441: LD_EXP 121
87445: PUSH
87446: FOR_IN
87447: IFFALSE 87478
// if GetLives ( i ) < 1000 then
87449: LD_VAR 0 1
87453: PPUSH
87454: CALL_OW 256
87458: PUSH
87459: LD_INT 1000
87461: LESS
87462: IFFALSE 87476
// SetLives ( i , 1000 ) ;
87464: LD_VAR 0 1
87468: PPUSH
87469: LD_INT 1000
87471: PPUSH
87472: CALL_OW 234
87476: GO 87446
87478: POP
87479: POP
// end ;
87480: PPOPN 1
87482: END
// export function hHackInvincible ; var i ; begin
87483: LD_INT 0
87485: PPUSH
87486: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
87487: LD_ADDR_VAR 0 2
87491: PUSH
87492: LD_INT 2
87494: PUSH
87495: LD_INT 21
87497: PUSH
87498: LD_INT 1
87500: PUSH
87501: EMPTY
87502: LIST
87503: LIST
87504: PUSH
87505: LD_INT 21
87507: PUSH
87508: LD_INT 2
87510: PUSH
87511: EMPTY
87512: LIST
87513: LIST
87514: PUSH
87515: EMPTY
87516: LIST
87517: LIST
87518: LIST
87519: PPUSH
87520: CALL_OW 69
87524: PUSH
87525: FOR_IN
87526: IFFALSE 87587
// if IsSelected ( i ) then
87528: LD_VAR 0 2
87532: PPUSH
87533: CALL_OW 306
87537: IFFALSE 87585
// begin if i in hInvincible then
87539: LD_VAR 0 2
87543: PUSH
87544: LD_EXP 121
87548: IN
87549: IFFALSE 87569
// hInvincible := hInvincible diff i else
87551: LD_ADDR_EXP 121
87555: PUSH
87556: LD_EXP 121
87560: PUSH
87561: LD_VAR 0 2
87565: DIFF
87566: ST_TO_ADDR
87567: GO 87585
// hInvincible := hInvincible union i ;
87569: LD_ADDR_EXP 121
87573: PUSH
87574: LD_EXP 121
87578: PUSH
87579: LD_VAR 0 2
87583: UNION
87584: ST_TO_ADDR
// end ;
87585: GO 87525
87587: POP
87588: POP
// end ;
87589: LD_VAR 0 1
87593: RET
// export function hHackInvisible ; var i , j ; begin
87594: LD_INT 0
87596: PPUSH
87597: PPUSH
87598: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
87599: LD_ADDR_VAR 0 2
87603: PUSH
87604: LD_INT 21
87606: PUSH
87607: LD_INT 1
87609: PUSH
87610: EMPTY
87611: LIST
87612: LIST
87613: PPUSH
87614: CALL_OW 69
87618: PUSH
87619: FOR_IN
87620: IFFALSE 87644
// if IsSelected ( i ) then
87622: LD_VAR 0 2
87626: PPUSH
87627: CALL_OW 306
87631: IFFALSE 87642
// ComForceInvisible ( i ) ;
87633: LD_VAR 0 2
87637: PPUSH
87638: CALL_OW 496
87642: GO 87619
87644: POP
87645: POP
// end ;
87646: LD_VAR 0 1
87650: RET
// export function hHackChangeYourSide ; begin
87651: LD_INT 0
87653: PPUSH
// if your_side = 8 then
87654: LD_OWVAR 2
87658: PUSH
87659: LD_INT 8
87661: EQUAL
87662: IFFALSE 87674
// your_side := 0 else
87664: LD_ADDR_OWVAR 2
87668: PUSH
87669: LD_INT 0
87671: ST_TO_ADDR
87672: GO 87688
// your_side := your_side + 1 ;
87674: LD_ADDR_OWVAR 2
87678: PUSH
87679: LD_OWVAR 2
87683: PUSH
87684: LD_INT 1
87686: PLUS
87687: ST_TO_ADDR
// end ;
87688: LD_VAR 0 1
87692: RET
// export function hHackChangeUnitSide ; var i , j ; begin
87693: LD_INT 0
87695: PPUSH
87696: PPUSH
87697: PPUSH
// for i in all_units do
87698: LD_ADDR_VAR 0 2
87702: PUSH
87703: LD_OWVAR 3
87707: PUSH
87708: FOR_IN
87709: IFFALSE 87787
// if IsSelected ( i ) then
87711: LD_VAR 0 2
87715: PPUSH
87716: CALL_OW 306
87720: IFFALSE 87785
// begin j := GetSide ( i ) ;
87722: LD_ADDR_VAR 0 3
87726: PUSH
87727: LD_VAR 0 2
87731: PPUSH
87732: CALL_OW 255
87736: ST_TO_ADDR
// if j = 8 then
87737: LD_VAR 0 3
87741: PUSH
87742: LD_INT 8
87744: EQUAL
87745: IFFALSE 87757
// j := 0 else
87747: LD_ADDR_VAR 0 3
87751: PUSH
87752: LD_INT 0
87754: ST_TO_ADDR
87755: GO 87771
// j := j + 1 ;
87757: LD_ADDR_VAR 0 3
87761: PUSH
87762: LD_VAR 0 3
87766: PUSH
87767: LD_INT 1
87769: PLUS
87770: ST_TO_ADDR
// SetSide ( i , j ) ;
87771: LD_VAR 0 2
87775: PPUSH
87776: LD_VAR 0 3
87780: PPUSH
87781: CALL_OW 235
// end ;
87785: GO 87708
87787: POP
87788: POP
// end ;
87789: LD_VAR 0 1
87793: RET
// export function hHackFog ; begin
87794: LD_INT 0
87796: PPUSH
// FogOff ( true ) ;
87797: LD_INT 1
87799: PPUSH
87800: CALL_OW 344
// end ;
87804: LD_VAR 0 1
87808: RET
// export function hHackTeleport ( unit , x , y ) ; begin
87809: LD_INT 0
87811: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
87812: LD_VAR 0 1
87816: PPUSH
87817: LD_VAR 0 2
87821: PPUSH
87822: LD_VAR 0 3
87826: PPUSH
87827: LD_INT 1
87829: PPUSH
87830: LD_INT 1
87832: PPUSH
87833: CALL_OW 483
// CenterOnXY ( x , y ) ;
87837: LD_VAR 0 2
87841: PPUSH
87842: LD_VAR 0 3
87846: PPUSH
87847: CALL_OW 84
// end ;
87851: LD_VAR 0 4
87855: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
87856: LD_INT 0
87858: PPUSH
87859: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
87860: LD_VAR 0 1
87864: NOT
87865: IFTRUE 87884
87867: PUSH
87868: LD_VAR 0 2
87872: PPUSH
87873: LD_VAR 0 3
87877: PPUSH
87878: CALL_OW 488
87882: NOT
87883: OR
87884: IFTRUE 87919
87886: PUSH
87887: LD_VAR 0 1
87891: PPUSH
87892: CALL_OW 266
87896: PUSH
87897: LD_INT 3
87899: NONEQUAL
87900: IFFALSE 87918
87902: PUSH
87903: LD_VAR 0 1
87907: PPUSH
87908: CALL_OW 247
87912: PUSH
87913: LD_INT 1
87915: EQUAL
87916: NOT
87917: AND
87918: OR
87919: IFFALSE 87923
// exit ;
87921: GO 88205
// if GetType ( factory ) = unit_human then
87923: LD_VAR 0 1
87927: PPUSH
87928: CALL_OW 247
87932: PUSH
87933: LD_INT 1
87935: EQUAL
87936: IFFALSE 87953
// factory := IsInUnit ( factory ) ;
87938: LD_ADDR_VAR 0 1
87942: PUSH
87943: LD_VAR 0 1
87947: PPUSH
87948: CALL_OW 310
87952: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
87953: LD_VAR 0 1
87957: PPUSH
87958: CALL_OW 266
87962: PUSH
87963: LD_INT 3
87965: NONEQUAL
87966: IFFALSE 87970
// exit ;
87968: GO 88205
// for i := 1 to Count ( factoryWaypoints ) do
87970: LD_ADDR_VAR 0 5
87974: PUSH
87975: DOUBLE
87976: LD_INT 1
87978: DEC
87979: ST_TO_ADDR
87980: LD_EXP 122
87984: PPUSH
87985: CALL 31946 0 1
87989: PUSH
87990: FOR_TO
87991: IFFALSE 88153
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
87993: LD_VAR 0 2
87997: PPUSH
87998: LD_VAR 0 3
88002: PPUSH
88003: CALL_OW 428
88007: PUSH
88008: LD_EXP 122
88012: PUSH
88013: LD_VAR 0 5
88017: ARRAY
88018: PUSH
88019: LD_INT 2
88021: ARRAY
88022: EQUAL
88023: IFFALSE 88055
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88025: LD_ADDR_EXP 122
88029: PUSH
88030: LD_EXP 122
88034: PPUSH
88035: LD_VAR 0 5
88039: PPUSH
88040: CALL_OW 3
88044: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88045: CALL 88210 0 0
// exit ;
88049: POP
88050: POP
88051: GO 88205
// end else
88053: GO 88151
// if factory = factoryWaypoints [ i ] [ 2 ] then
88055: LD_VAR 0 1
88059: PUSH
88060: LD_EXP 122
88064: PUSH
88065: LD_VAR 0 5
88069: ARRAY
88070: PUSH
88071: LD_INT 2
88073: ARRAY
88074: EQUAL
88075: IFFALSE 88151
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88077: LD_ADDR_EXP 122
88081: PUSH
88082: LD_EXP 122
88086: PPUSH
88087: LD_VAR 0 5
88091: PPUSH
88092: CALL_OW 3
88096: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88097: LD_ADDR_EXP 122
88101: PUSH
88102: LD_EXP 122
88106: PPUSH
88107: LD_VAR 0 1
88111: PPUSH
88112: CALL_OW 255
88116: PUSH
88117: LD_VAR 0 1
88121: PUSH
88122: LD_VAR 0 2
88126: PUSH
88127: LD_VAR 0 3
88131: PUSH
88132: EMPTY
88133: LIST
88134: LIST
88135: LIST
88136: LIST
88137: PPUSH
88138: CALL 67878 0 2
88142: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88143: CALL 88210 0 0
// exit ;
88147: POP
88148: POP
88149: GO 88205
// end ; end ;
88151: GO 87990
88153: POP
88154: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88155: LD_ADDR_EXP 122
88159: PUSH
88160: LD_EXP 122
88164: PPUSH
88165: LD_VAR 0 1
88169: PPUSH
88170: CALL_OW 255
88174: PUSH
88175: LD_VAR 0 1
88179: PUSH
88180: LD_VAR 0 2
88184: PUSH
88185: LD_VAR 0 3
88189: PUSH
88190: EMPTY
88191: LIST
88192: LIST
88193: LIST
88194: LIST
88195: PPUSH
88196: CALL 67878 0 2
88200: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88201: CALL 88210 0 0
// end ;
88205: LD_VAR 0 4
88209: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
88210: LD_INT 0
88212: PPUSH
88213: PPUSH
88214: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
88215: LD_STRING resetFactoryWaypoint();
88217: PPUSH
88218: CALL_OW 559
// if factoryWaypoints then
88222: LD_EXP 122
88226: IFFALSE 88347
// begin list := factoryWaypoints ;
88228: LD_ADDR_VAR 0 3
88232: PUSH
88233: LD_EXP 122
88237: ST_TO_ADDR
// for i := 1 to list do
88238: LD_ADDR_VAR 0 2
88242: PUSH
88243: DOUBLE
88244: LD_INT 1
88246: DEC
88247: ST_TO_ADDR
88248: LD_VAR 0 3
88252: PUSH
88253: FOR_TO
88254: IFFALSE 88345
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
88256: LD_STRING setFactoryWaypointXY(
88258: PUSH
88259: LD_VAR 0 3
88263: PUSH
88264: LD_VAR 0 2
88268: ARRAY
88269: PUSH
88270: LD_INT 1
88272: ARRAY
88273: STR
88274: PUSH
88275: LD_STRING ,
88277: STR
88278: PUSH
88279: LD_VAR 0 3
88283: PUSH
88284: LD_VAR 0 2
88288: ARRAY
88289: PUSH
88290: LD_INT 2
88292: ARRAY
88293: STR
88294: PUSH
88295: LD_STRING ,
88297: STR
88298: PUSH
88299: LD_VAR 0 3
88303: PUSH
88304: LD_VAR 0 2
88308: ARRAY
88309: PUSH
88310: LD_INT 3
88312: ARRAY
88313: STR
88314: PUSH
88315: LD_STRING ,
88317: STR
88318: PUSH
88319: LD_VAR 0 3
88323: PUSH
88324: LD_VAR 0 2
88328: ARRAY
88329: PUSH
88330: LD_INT 4
88332: ARRAY
88333: STR
88334: PUSH
88335: LD_STRING )
88337: STR
88338: PPUSH
88339: CALL_OW 559
88343: GO 88253
88345: POP
88346: POP
// end ; end ;
88347: LD_VAR 0 1
88351: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
88352: LD_INT 0
88354: PPUSH
// if HexInfo ( x , y ) = warehouse then
88355: LD_VAR 0 2
88359: PPUSH
88360: LD_VAR 0 3
88364: PPUSH
88365: CALL_OW 428
88369: PUSH
88370: LD_VAR 0 1
88374: EQUAL
88375: IFFALSE 88402
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
88377: LD_ADDR_EXP 124
88381: PUSH
88382: LD_EXP 124
88386: PPUSH
88387: LD_VAR 0 1
88391: PPUSH
88392: LD_INT 0
88394: PPUSH
88395: CALL_OW 1
88399: ST_TO_ADDR
88400: GO 88453
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
88402: LD_ADDR_EXP 124
88406: PUSH
88407: LD_EXP 124
88411: PPUSH
88412: LD_VAR 0 1
88416: PPUSH
88417: LD_VAR 0 1
88421: PPUSH
88422: CALL_OW 255
88426: PUSH
88427: LD_VAR 0 1
88431: PUSH
88432: LD_VAR 0 2
88436: PUSH
88437: LD_VAR 0 3
88441: PUSH
88442: EMPTY
88443: LIST
88444: LIST
88445: LIST
88446: LIST
88447: PPUSH
88448: CALL_OW 1
88452: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
88453: CALL 88462 0 0
// end ;
88457: LD_VAR 0 4
88461: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
88462: LD_INT 0
88464: PPUSH
88465: PPUSH
88466: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
88467: LD_STRING resetWarehouseGatheringPoints();
88469: PPUSH
88470: CALL_OW 559
// if warehouseGatheringPoints then
88474: LD_EXP 124
88478: IFFALSE 88604
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
88480: LD_ADDR_VAR 0 3
88484: PUSH
88485: LD_EXP 124
88489: PPUSH
88490: CALL 71812 0 1
88494: ST_TO_ADDR
// for i := 1 to list do
88495: LD_ADDR_VAR 0 2
88499: PUSH
88500: DOUBLE
88501: LD_INT 1
88503: DEC
88504: ST_TO_ADDR
88505: LD_VAR 0 3
88509: PUSH
88510: FOR_TO
88511: IFFALSE 88602
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
88513: LD_STRING setWarehouseGatheringPointXY(
88515: PUSH
88516: LD_VAR 0 3
88520: PUSH
88521: LD_VAR 0 2
88525: ARRAY
88526: PUSH
88527: LD_INT 1
88529: ARRAY
88530: STR
88531: PUSH
88532: LD_STRING ,
88534: STR
88535: PUSH
88536: LD_VAR 0 3
88540: PUSH
88541: LD_VAR 0 2
88545: ARRAY
88546: PUSH
88547: LD_INT 2
88549: ARRAY
88550: STR
88551: PUSH
88552: LD_STRING ,
88554: STR
88555: PUSH
88556: LD_VAR 0 3
88560: PUSH
88561: LD_VAR 0 2
88565: ARRAY
88566: PUSH
88567: LD_INT 3
88569: ARRAY
88570: STR
88571: PUSH
88572: LD_STRING ,
88574: STR
88575: PUSH
88576: LD_VAR 0 3
88580: PUSH
88581: LD_VAR 0 2
88585: ARRAY
88586: PUSH
88587: LD_INT 4
88589: ARRAY
88590: STR
88591: PUSH
88592: LD_STRING )
88594: STR
88595: PPUSH
88596: CALL_OW 559
88600: GO 88510
88602: POP
88603: POP
// end ; end ;
88604: LD_VAR 0 1
88608: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
88609: LD_EXP 124
88613: IFFALSE 89308
88615: GO 88617
88617: DISABLE
88618: LD_INT 0
88620: PPUSH
88621: PPUSH
88622: PPUSH
88623: PPUSH
88624: PPUSH
88625: PPUSH
88626: PPUSH
88627: PPUSH
88628: PPUSH
// begin enable ;
88629: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
88630: LD_ADDR_VAR 0 3
88634: PUSH
88635: LD_EXP 124
88639: PPUSH
88640: CALL 71812 0 1
88644: ST_TO_ADDR
// if not list then
88645: LD_VAR 0 3
88649: NOT
88650: IFFALSE 88654
// exit ;
88652: GO 89308
// for i := 1 to list do
88654: LD_ADDR_VAR 0 1
88658: PUSH
88659: DOUBLE
88660: LD_INT 1
88662: DEC
88663: ST_TO_ADDR
88664: LD_VAR 0 3
88668: PUSH
88669: FOR_TO
88670: IFFALSE 89306
// begin depot := list [ i ] [ 2 ] ;
88672: LD_ADDR_VAR 0 8
88676: PUSH
88677: LD_VAR 0 3
88681: PUSH
88682: LD_VAR 0 1
88686: ARRAY
88687: PUSH
88688: LD_INT 2
88690: ARRAY
88691: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
88692: LD_ADDR_VAR 0 5
88696: PUSH
88697: LD_VAR 0 3
88701: PUSH
88702: LD_VAR 0 1
88706: ARRAY
88707: PUSH
88708: LD_INT 1
88710: ARRAY
88711: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
88712: LD_VAR 0 8
88716: PPUSH
88717: CALL_OW 301
88721: IFTRUE 88740
88723: PUSH
88724: LD_VAR 0 5
88728: PUSH
88729: LD_VAR 0 8
88733: PPUSH
88734: CALL_OW 255
88738: NONEQUAL
88739: OR
88740: IFFALSE 88769
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
88742: LD_ADDR_EXP 124
88746: PUSH
88747: LD_EXP 124
88751: PPUSH
88752: LD_VAR 0 8
88756: PPUSH
88757: LD_INT 0
88759: PPUSH
88760: CALL_OW 1
88764: ST_TO_ADDR
// exit ;
88765: POP
88766: POP
88767: GO 89308
// end ; x := list [ i ] [ 3 ] ;
88769: LD_ADDR_VAR 0 6
88773: PUSH
88774: LD_VAR 0 3
88778: PUSH
88779: LD_VAR 0 1
88783: ARRAY
88784: PUSH
88785: LD_INT 3
88787: ARRAY
88788: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
88789: LD_ADDR_VAR 0 7
88793: PUSH
88794: LD_VAR 0 3
88798: PUSH
88799: LD_VAR 0 1
88803: ARRAY
88804: PUSH
88805: LD_INT 4
88807: ARRAY
88808: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
88809: LD_ADDR_VAR 0 9
88813: PUSH
88814: LD_VAR 0 6
88818: PPUSH
88819: LD_VAR 0 7
88823: PPUSH
88824: LD_INT 16
88826: PPUSH
88827: CALL 70386 0 3
88831: ST_TO_ADDR
// if not cratesNearbyPoint then
88832: LD_VAR 0 9
88836: NOT
88837: IFFALSE 88843
// exit ;
88839: POP
88840: POP
88841: GO 89308
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
88843: LD_ADDR_VAR 0 4
88847: PUSH
88848: LD_INT 22
88850: PUSH
88851: LD_VAR 0 5
88855: PUSH
88856: EMPTY
88857: LIST
88858: LIST
88859: PUSH
88860: LD_INT 3
88862: PUSH
88863: LD_INT 60
88865: PUSH
88866: EMPTY
88867: LIST
88868: PUSH
88869: EMPTY
88870: LIST
88871: LIST
88872: PUSH
88873: LD_INT 91
88875: PUSH
88876: LD_VAR 0 8
88880: PUSH
88881: LD_INT 6
88883: PUSH
88884: EMPTY
88885: LIST
88886: LIST
88887: LIST
88888: PUSH
88889: LD_INT 2
88891: PUSH
88892: LD_INT 25
88894: PUSH
88895: LD_INT 2
88897: PUSH
88898: EMPTY
88899: LIST
88900: LIST
88901: PUSH
88902: LD_INT 25
88904: PUSH
88905: LD_INT 16
88907: PUSH
88908: EMPTY
88909: LIST
88910: LIST
88911: PUSH
88912: EMPTY
88913: LIST
88914: LIST
88915: LIST
88916: PUSH
88917: EMPTY
88918: LIST
88919: LIST
88920: LIST
88921: LIST
88922: PPUSH
88923: CALL_OW 69
88927: PUSH
88928: LD_VAR 0 8
88932: PPUSH
88933: CALL_OW 313
88937: PPUSH
88938: LD_INT 3
88940: PUSH
88941: LD_INT 60
88943: PUSH
88944: EMPTY
88945: LIST
88946: PUSH
88947: EMPTY
88948: LIST
88949: LIST
88950: PUSH
88951: LD_INT 2
88953: PUSH
88954: LD_INT 25
88956: PUSH
88957: LD_INT 2
88959: PUSH
88960: EMPTY
88961: LIST
88962: LIST
88963: PUSH
88964: LD_INT 25
88966: PUSH
88967: LD_INT 16
88969: PUSH
88970: EMPTY
88971: LIST
88972: LIST
88973: PUSH
88974: EMPTY
88975: LIST
88976: LIST
88977: LIST
88978: PUSH
88979: EMPTY
88980: LIST
88981: LIST
88982: PPUSH
88983: CALL_OW 72
88987: UNION
88988: ST_TO_ADDR
// if tmp then
88989: LD_VAR 0 4
88993: IFFALSE 89073
// begin tmp := ShrinkArray ( tmp , 3 ) ;
88995: LD_ADDR_VAR 0 4
88999: PUSH
89000: LD_VAR 0 4
89004: PPUSH
89005: LD_INT 3
89007: PPUSH
89008: CALL 68193 0 2
89012: ST_TO_ADDR
// for j in tmp do
89013: LD_ADDR_VAR 0 2
89017: PUSH
89018: LD_VAR 0 4
89022: PUSH
89023: FOR_IN
89024: IFFALSE 89067
// begin if IsInUnit ( j ) then
89026: LD_VAR 0 2
89030: PPUSH
89031: CALL_OW 310
89035: IFFALSE 89046
// ComExit ( j ) ;
89037: LD_VAR 0 2
89041: PPUSH
89042: CALL 68276 0 1
// AddComCollect ( j , x , y ) ;
89046: LD_VAR 0 2
89050: PPUSH
89051: LD_VAR 0 6
89055: PPUSH
89056: LD_VAR 0 7
89060: PPUSH
89061: CALL_OW 177
// end ;
89065: GO 89023
89067: POP
89068: POP
// exit ;
89069: POP
89070: POP
89071: GO 89308
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
89073: LD_ADDR_VAR 0 4
89077: PUSH
89078: LD_INT 22
89080: PUSH
89081: LD_VAR 0 5
89085: PUSH
89086: EMPTY
89087: LIST
89088: LIST
89089: PUSH
89090: LD_INT 91
89092: PUSH
89093: LD_VAR 0 8
89097: PUSH
89098: LD_INT 8
89100: PUSH
89101: EMPTY
89102: LIST
89103: LIST
89104: LIST
89105: PUSH
89106: LD_INT 2
89108: PUSH
89109: LD_INT 34
89111: PUSH
89112: LD_INT 12
89114: PUSH
89115: EMPTY
89116: LIST
89117: LIST
89118: PUSH
89119: LD_INT 34
89121: PUSH
89122: LD_INT 51
89124: PUSH
89125: EMPTY
89126: LIST
89127: LIST
89128: PUSH
89129: LD_INT 34
89131: PUSH
89132: LD_INT 32
89134: PUSH
89135: EMPTY
89136: LIST
89137: LIST
89138: PUSH
89139: LD_INT 34
89141: PUSH
89142: LD_INT 89
89144: PUSH
89145: EMPTY
89146: LIST
89147: LIST
89148: PUSH
89149: EMPTY
89150: LIST
89151: LIST
89152: LIST
89153: LIST
89154: LIST
89155: PUSH
89156: EMPTY
89157: LIST
89158: LIST
89159: LIST
89160: PPUSH
89161: CALL_OW 69
89165: ST_TO_ADDR
// if tmp then
89166: LD_VAR 0 4
89170: IFFALSE 89304
// begin for j in tmp do
89172: LD_ADDR_VAR 0 2
89176: PUSH
89177: LD_VAR 0 4
89181: PUSH
89182: FOR_IN
89183: IFFALSE 89302
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
89185: LD_VAR 0 2
89189: PPUSH
89190: CALL_OW 262
89194: PUSH
89195: LD_INT 3
89197: EQUAL
89198: IFTRUE 89215
89200: PUSH
89201: LD_VAR 0 2
89205: PPUSH
89206: CALL_OW 261
89210: PUSH
89211: LD_INT 20
89213: GREATER
89214: OR
89215: IFFALSE 89229
89217: PUSH
89218: LD_VAR 0 2
89222: PPUSH
89223: CALL_OW 314
89227: NOT
89228: AND
89229: IFFALSE 89259
89231: PUSH
89232: LD_VAR 0 2
89236: PPUSH
89237: CALL_OW 263
89241: PUSH
89242: LD_INT 1
89244: NONEQUAL
89245: IFTRUE 89258
89247: PUSH
89248: LD_VAR 0 2
89252: PPUSH
89253: CALL_OW 311
89257: OR
89258: AND
89259: IFFALSE 89300
// begin ComCollect ( j , x , y ) ;
89261: LD_VAR 0 2
89265: PPUSH
89266: LD_VAR 0 6
89270: PPUSH
89271: LD_VAR 0 7
89275: PPUSH
89276: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
89280: LD_VAR 0 2
89284: PPUSH
89285: LD_VAR 0 8
89289: PPUSH
89290: CALL_OW 172
// exit ;
89294: POP
89295: POP
89296: POP
89297: POP
89298: GO 89308
// end ;
89300: GO 89182
89302: POP
89303: POP
// end ; end ;
89304: GO 88669
89306: POP
89307: POP
// end ; end_of_file
89308: PPOPN 9
89310: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
89311: LD_VAR 0 1
89315: PUSH
89316: LD_INT 200
89318: DOUBLE
89319: GREATEREQUAL
89320: IFFALSE 89328
89322: LD_INT 299
89324: DOUBLE
89325: LESSEQUAL
89326: IFTRUE 89330
89328: GO 89362
89330: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
89331: LD_VAR 0 1
89335: PPUSH
89336: LD_VAR 0 2
89340: PPUSH
89341: LD_VAR 0 3
89345: PPUSH
89346: LD_VAR 0 4
89350: PPUSH
89351: LD_VAR 0 5
89355: PPUSH
89356: CALL 90143 0 5
89360: GO 89439
89362: LD_INT 300
89364: DOUBLE
89365: GREATEREQUAL
89366: IFFALSE 89374
89368: LD_INT 399
89370: DOUBLE
89371: LESSEQUAL
89372: IFTRUE 89376
89374: GO 89438
89376: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89377: LD_VAR 0 1
89381: PPUSH
89382: LD_VAR 0 2
89386: PPUSH
89387: LD_VAR 0 3
89391: PPUSH
89392: LD_VAR 0 4
89396: PPUSH
89397: LD_VAR 0 5
89401: PPUSH
89402: LD_VAR 0 6
89406: PPUSH
89407: LD_VAR 0 7
89411: PPUSH
89412: LD_VAR 0 8
89416: PPUSH
89417: LD_VAR 0 9
89421: PPUSH
89422: LD_VAR 0 10
89426: PPUSH
89427: LD_VAR 0 11
89431: PPUSH
89432: CALL 85864 0 11
89436: GO 89439
89438: POP
// end ;
89439: PPOPN 11
89441: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89442: LD_VAR 0 1
89446: PPUSH
89447: LD_VAR 0 2
89451: PPUSH
89452: LD_VAR 0 3
89456: PPUSH
89457: LD_VAR 0 4
89461: PPUSH
89462: LD_VAR 0 5
89466: PPUSH
89467: CALL 89524 0 5
// end ; end_of_file
89471: PPOPN 5
89473: END
// export function SOS_UnitDestroyed ( un ) ; begin
89474: LD_INT 0
89476: PPUSH
// ComRadiation ( un ) ;
89477: LD_VAR 0 1
89481: PPUSH
89482: CALL 90563 0 1
// end ;
89486: LD_VAR 0 2
89490: RET
// export function SOS_UnitKamikazed ( un ) ; begin
89491: LD_INT 0
89493: PPUSH
// ComRadiation ( un ) ;
89494: LD_VAR 0 1
89498: PPUSH
89499: CALL 90563 0 1
// end ;
89503: LD_VAR 0 2
89507: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
89508: LD_INT 0
89510: PPUSH
// end ;
89511: LD_VAR 0 4
89515: RET
// export function SOS_Command ( cmd ) ; begin
89516: LD_INT 0
89518: PPUSH
// end ;
89519: LD_VAR 0 2
89523: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
89524: LD_INT 0
89526: PPUSH
// end ;
89527: LD_VAR 0 6
89531: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
89532: LD_INT 0
89534: PPUSH
89535: PPUSH
89536: PPUSH
89537: PPUSH
// if not vehicle or not factory then
89538: LD_VAR 0 1
89542: NOT
89543: IFTRUE 89552
89545: PUSH
89546: LD_VAR 0 2
89550: NOT
89551: OR
89552: IFFALSE 89556
// exit ;
89554: GO 90138
// if not factoryWaypoints then
89556: LD_EXP 122
89560: NOT
89561: IFFALSE 89565
// exit ;
89563: GO 90138
// for i := 1 to Count ( factoryWaypoints ) do
89565: LD_ADDR_VAR 0 4
89569: PUSH
89570: DOUBLE
89571: LD_INT 1
89573: DEC
89574: ST_TO_ADDR
89575: LD_EXP 122
89579: PPUSH
89580: CALL 31946 0 1
89584: PUSH
89585: FOR_TO
89586: IFFALSE 90136
// if factoryWaypoints [ i ] [ 2 ] = factory then
89588: LD_EXP 122
89592: PUSH
89593: LD_VAR 0 4
89597: ARRAY
89598: PUSH
89599: LD_INT 2
89601: ARRAY
89602: PUSH
89603: LD_VAR 0 2
89607: EQUAL
89608: IFFALSE 90134
// begin if GetControl ( vehicle ) = control_manual then
89610: LD_VAR 0 1
89614: PPUSH
89615: CALL_OW 263
89619: PUSH
89620: LD_INT 1
89622: EQUAL
89623: IFFALSE 89987
// begin driver := IsDrivenBy ( vehicle ) ;
89625: LD_ADDR_VAR 0 5
89629: PUSH
89630: LD_VAR 0 1
89634: PPUSH
89635: CALL_OW 311
89639: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
89640: LD_VAR 0 5
89644: PUSH
89645: LD_EXP 123
89649: IN
89650: IFTRUE 89664
89652: PUSH
89653: LD_VAR 0 1
89657: PUSH
89658: LD_EXP 123
89662: IN
89663: OR
89664: IFFALSE 89670
// exit ;
89666: POP
89667: POP
89668: GO 90138
// if not HasTask ( driver ) then
89670: LD_VAR 0 5
89674: PPUSH
89675: CALL_OW 314
89679: NOT
89680: IFFALSE 89985
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
89682: LD_ADDR_EXP 123
89686: PUSH
89687: LD_EXP 123
89691: PPUSH
89692: LD_VAR 0 5
89696: PPUSH
89697: CALL 67878 0 2
89701: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
89702: LD_ADDR_EXP 123
89706: PUSH
89707: LD_EXP 123
89711: PPUSH
89712: LD_VAR 0 1
89716: PPUSH
89717: CALL 67878 0 2
89721: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
89722: LD_ADDR_VAR 0 6
89726: PUSH
89727: LD_EXP 122
89731: PUSH
89732: LD_VAR 0 4
89736: ARRAY
89737: PUSH
89738: LD_INT 3
89740: ARRAY
89741: PPUSH
89742: LD_EXP 122
89746: PUSH
89747: LD_VAR 0 4
89751: ARRAY
89752: PUSH
89753: LD_INT 4
89755: ARRAY
89756: PPUSH
89757: CALL_OW 428
89761: ST_TO_ADDR
// if hex then
89762: LD_VAR 0 6
89766: IFFALSE 89784
// ComMoveUnit ( driver , hex ) else
89768: LD_VAR 0 5
89772: PPUSH
89773: LD_VAR 0 6
89777: PPUSH
89778: CALL_OW 112
89782: GO 89868
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
89784: LD_VAR 0 1
89788: PPUSH
89789: LD_EXP 122
89793: PUSH
89794: LD_VAR 0 4
89798: ARRAY
89799: PUSH
89800: LD_INT 3
89802: ARRAY
89803: PPUSH
89804: LD_EXP 122
89808: PUSH
89809: LD_VAR 0 4
89813: ARRAY
89814: PUSH
89815: LD_INT 4
89817: ARRAY
89818: PPUSH
89819: CALL_OW 297
89823: PUSH
89824: LD_INT 0
89826: GREATER
89827: IFFALSE 89868
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
89829: LD_VAR 0 5
89833: PPUSH
89834: LD_EXP 122
89838: PUSH
89839: LD_VAR 0 4
89843: ARRAY
89844: PUSH
89845: LD_INT 3
89847: ARRAY
89848: PPUSH
89849: LD_EXP 122
89853: PUSH
89854: LD_VAR 0 4
89858: ARRAY
89859: PUSH
89860: LD_INT 4
89862: ARRAY
89863: PPUSH
89864: CALL_OW 111
// AddComExitVehicle ( driver ) ;
89868: LD_VAR 0 5
89872: PPUSH
89873: CALL_OW 181
// if Multiplayer then
89877: LD_OWVAR 4
89881: IFFALSE 89930
// begin repeat wait ( 10 ) ;
89883: LD_INT 10
89885: PPUSH
89886: CALL_OW 67
// until not IsInUnit ( driver ) ;
89890: LD_VAR 0 5
89894: PPUSH
89895: CALL_OW 310
89899: NOT
89900: IFFALSE 89883
// if not HasTask ( driver ) then
89902: LD_VAR 0 5
89906: PPUSH
89907: CALL_OW 314
89911: NOT
89912: IFFALSE 89928
// ComEnterUnit ( driver , factory ) ;
89914: LD_VAR 0 5
89918: PPUSH
89919: LD_VAR 0 2
89923: PPUSH
89924: CALL_OW 120
// end else
89928: GO 89944
// AddComEnterUnit ( driver , factory ) ;
89930: LD_VAR 0 5
89934: PPUSH
89935: LD_VAR 0 2
89939: PPUSH
89940: CALL_OW 180
// wait ( 0 0$1 ) ;
89944: LD_INT 35
89946: PPUSH
89947: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
89951: LD_ADDR_EXP 123
89955: PUSH
89956: LD_EXP 123
89960: PUSH
89961: LD_VAR 0 5
89965: DIFF
89966: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
89967: LD_ADDR_EXP 123
89971: PUSH
89972: LD_EXP 123
89976: PUSH
89977: LD_VAR 0 1
89981: DIFF
89982: ST_TO_ADDR
// break ;
89983: GO 90136
// end ; end else
89985: GO 90134
// if GetControl ( vehicle ) = control_remote then
89987: LD_VAR 0 1
89991: PPUSH
89992: CALL_OW 263
89996: PUSH
89997: LD_INT 2
89999: EQUAL
90000: IFFALSE 90086
// begin wait ( 0 0$2 ) ;
90002: LD_INT 70
90004: PPUSH
90005: CALL_OW 67
// repeat wait ( 10 ) ;
90009: LD_INT 10
90011: PPUSH
90012: CALL_OW 67
// Connect ( vehicle ) ;
90016: LD_VAR 0 1
90020: PPUSH
90021: CALL 38190 0 1
// until IsControledBy ( vehicle ) ;
90025: LD_VAR 0 1
90029: PPUSH
90030: CALL_OW 312
90034: IFFALSE 90009
// wait ( 10 ) ;
90036: LD_INT 10
90038: PPUSH
90039: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90043: LD_VAR 0 1
90047: PPUSH
90048: LD_EXP 122
90052: PUSH
90053: LD_VAR 0 4
90057: ARRAY
90058: PUSH
90059: LD_INT 3
90061: ARRAY
90062: PPUSH
90063: LD_EXP 122
90067: PUSH
90068: LD_VAR 0 4
90072: ARRAY
90073: PUSH
90074: LD_INT 4
90076: ARRAY
90077: PPUSH
90078: CALL_OW 111
// break ;
90082: GO 90136
// end else
90084: GO 90134
// begin wait ( 0 0$3 ) ;
90086: LD_INT 105
90088: PPUSH
90089: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90093: LD_VAR 0 1
90097: PPUSH
90098: LD_EXP 122
90102: PUSH
90103: LD_VAR 0 4
90107: ARRAY
90108: PUSH
90109: LD_INT 3
90111: ARRAY
90112: PPUSH
90113: LD_EXP 122
90117: PUSH
90118: LD_VAR 0 4
90122: ARRAY
90123: PUSH
90124: LD_INT 4
90126: ARRAY
90127: PPUSH
90128: CALL_OW 111
// break ;
90132: GO 90136
// end ; end ;
90134: GO 89585
90136: POP
90137: POP
// end ;
90138: LD_VAR 0 3
90142: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
90143: LD_INT 0
90145: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
90146: LD_VAR 0 1
90150: PUSH
90151: LD_INT 250
90153: EQUAL
90154: IFFALSE 90171
90156: PUSH
90157: LD_VAR 0 2
90161: PPUSH
90162: CALL_OW 264
90166: PUSH
90167: LD_INT 81
90169: EQUAL
90170: AND
90171: IFFALSE 90192
// MinerPlaceMine ( unit , x , y ) ;
90173: LD_VAR 0 2
90177: PPUSH
90178: LD_VAR 0 4
90182: PPUSH
90183: LD_VAR 0 5
90187: PPUSH
90188: CALL 93324 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
90192: LD_VAR 0 1
90196: PUSH
90197: LD_INT 251
90199: EQUAL
90200: IFFALSE 90217
90202: PUSH
90203: LD_VAR 0 2
90207: PPUSH
90208: CALL_OW 264
90212: PUSH
90213: LD_INT 81
90215: EQUAL
90216: AND
90217: IFFALSE 90238
// MinerDetonateMine ( unit , x , y ) ;
90219: LD_VAR 0 2
90223: PPUSH
90224: LD_VAR 0 4
90228: PPUSH
90229: LD_VAR 0 5
90233: PPUSH
90234: CALL 93603 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
90238: LD_VAR 0 1
90242: PUSH
90243: LD_INT 252
90245: EQUAL
90246: IFFALSE 90263
90248: PUSH
90249: LD_VAR 0 2
90253: PPUSH
90254: CALL_OW 264
90258: PUSH
90259: LD_INT 81
90261: EQUAL
90262: AND
90263: IFFALSE 90284
// MinerCreateMinefield ( unit , x , y ) ;
90265: LD_VAR 0 2
90269: PPUSH
90270: LD_VAR 0 4
90274: PPUSH
90275: LD_VAR 0 5
90279: PPUSH
90280: CALL 94022 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
90284: LD_VAR 0 1
90288: PUSH
90289: LD_INT 253
90291: EQUAL
90292: IFFALSE 90309
90294: PUSH
90295: LD_VAR 0 2
90299: PPUSH
90300: CALL_OW 257
90304: PUSH
90305: LD_INT 5
90307: EQUAL
90308: AND
90309: IFFALSE 90330
// ComBinocular ( unit , x , y ) ;
90311: LD_VAR 0 2
90315: PPUSH
90316: LD_VAR 0 4
90320: PPUSH
90321: LD_VAR 0 5
90325: PPUSH
90326: CALL 94397 0 3
// if selectedUnit then
90330: LD_VAR 0 3
90334: IFFALSE 90394
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
90336: LD_VAR 0 1
90340: PUSH
90341: LD_INT 254
90343: EQUAL
90344: IFFALSE 90361
90346: PUSH
90347: LD_VAR 0 2
90351: PPUSH
90352: CALL_OW 264
90356: PUSH
90357: LD_INT 99
90359: EQUAL
90360: AND
90361: IFFALSE 90378
90363: PUSH
90364: LD_VAR 0 3
90368: PPUSH
90369: CALL_OW 263
90373: PUSH
90374: LD_INT 3
90376: EQUAL
90377: AND
90378: IFFALSE 90394
// HackDestroyVehicle ( unit , selectedUnit ) ;
90380: LD_VAR 0 2
90384: PPUSH
90385: LD_VAR 0 3
90389: PPUSH
90390: CALL 92684 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
90394: LD_VAR 0 1
90398: PUSH
90399: LD_INT 255
90401: EQUAL
90402: IFFALSE 90426
90404: PUSH
90405: LD_VAR 0 2
90409: PPUSH
90410: CALL_OW 264
90414: PUSH
90415: LD_INT 14
90417: PUSH
90418: LD_INT 53
90420: PUSH
90421: EMPTY
90422: LIST
90423: LIST
90424: IN
90425: AND
90426: IFFALSE 90444
90428: PUSH
90429: LD_VAR 0 4
90433: PPUSH
90434: LD_VAR 0 5
90438: PPUSH
90439: CALL_OW 488
90443: AND
90444: IFFALSE 90468
// CutTreeXYR ( unit , x , y , 12 ) ;
90446: LD_VAR 0 2
90450: PPUSH
90451: LD_VAR 0 4
90455: PPUSH
90456: LD_VAR 0 5
90460: PPUSH
90461: LD_INT 12
90463: PPUSH
90464: CALL 90659 0 4
// if cmd = 256 then
90468: LD_VAR 0 1
90472: PUSH
90473: LD_INT 256
90475: EQUAL
90476: IFFALSE 90497
// SetFactoryWaypoint ( unit , x , y ) ;
90478: LD_VAR 0 2
90482: PPUSH
90483: LD_VAR 0 4
90487: PPUSH
90488: LD_VAR 0 5
90492: PPUSH
90493: CALL 87856 0 3
// if cmd = 257 then
90497: LD_VAR 0 1
90501: PUSH
90502: LD_INT 257
90504: EQUAL
90505: IFFALSE 90526
// SetWarehouseGatheringPoint ( unit , x , y ) ;
90507: LD_VAR 0 2
90511: PPUSH
90512: LD_VAR 0 4
90516: PPUSH
90517: LD_VAR 0 5
90521: PPUSH
90522: CALL 88352 0 3
// if cmd = 258 then
90526: LD_VAR 0 1
90530: PUSH
90531: LD_INT 258
90533: EQUAL
90534: IFFALSE 90558
// BurnTreeXYR ( unit , x , y , 8 ) ;
90536: LD_VAR 0 2
90540: PPUSH
90541: LD_VAR 0 4
90545: PPUSH
90546: LD_VAR 0 5
90550: PPUSH
90551: LD_INT 8
90553: PPUSH
90554: CALL 91059 0 4
// end ;
90558: LD_VAR 0 6
90562: RET
// export function ComRadiation ( un ) ; var eff ; begin
90563: LD_INT 0
90565: PPUSH
90566: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
90567: LD_VAR 0 1
90571: PPUSH
90572: CALL_OW 264
90576: PUSH
90577: LD_INT 91
90579: NONEQUAL
90580: IFFALSE 90584
// exit ;
90582: GO 90654
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
90584: LD_INT 68
90586: PPUSH
90587: LD_VAR 0 1
90591: PPUSH
90592: CALL_OW 255
90596: PPUSH
90597: CALL_OW 321
90601: PUSH
90602: LD_INT 2
90604: EQUAL
90605: IFFALSE 90617
// eff := 50 else
90607: LD_ADDR_VAR 0 3
90611: PUSH
90612: LD_INT 50
90614: ST_TO_ADDR
90615: GO 90625
// eff := 25 ;
90617: LD_ADDR_VAR 0 3
90621: PUSH
90622: LD_INT 25
90624: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
90625: LD_VAR 0 1
90629: PPUSH
90630: CALL_OW 250
90634: PPUSH
90635: LD_VAR 0 1
90639: PPUSH
90640: CALL_OW 251
90644: PPUSH
90645: LD_VAR 0 3
90649: PPUSH
90650: CALL_OW 495
// end ;
90654: LD_VAR 0 2
90658: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
90659: LD_INT 0
90661: PPUSH
90662: PPUSH
90663: PPUSH
90664: PPUSH
90665: PPUSH
90666: PPUSH
90667: PPUSH
90668: PPUSH
90669: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
90670: LD_VAR 0 1
90674: PPUSH
90675: CALL_OW 302
90679: NOT
90680: IFTRUE 90699
90682: PUSH
90683: LD_VAR 0 2
90687: PPUSH
90688: LD_VAR 0 3
90692: PPUSH
90693: CALL_OW 488
90697: NOT
90698: OR
90699: IFTRUE 90708
90701: PUSH
90702: LD_VAR 0 4
90706: NOT
90707: OR
90708: IFFALSE 90712
// exit ;
90710: GO 91054
// list := [ ] ;
90712: LD_ADDR_VAR 0 13
90716: PUSH
90717: EMPTY
90718: ST_TO_ADDR
// if x - r < 0 then
90719: LD_VAR 0 2
90723: PUSH
90724: LD_VAR 0 4
90728: MINUS
90729: PUSH
90730: LD_INT 0
90732: LESS
90733: IFFALSE 90745
// min_x := 0 else
90735: LD_ADDR_VAR 0 7
90739: PUSH
90740: LD_INT 0
90742: ST_TO_ADDR
90743: GO 90761
// min_x := x - r ;
90745: LD_ADDR_VAR 0 7
90749: PUSH
90750: LD_VAR 0 2
90754: PUSH
90755: LD_VAR 0 4
90759: MINUS
90760: ST_TO_ADDR
// if y - r < 0 then
90761: LD_VAR 0 3
90765: PUSH
90766: LD_VAR 0 4
90770: MINUS
90771: PUSH
90772: LD_INT 0
90774: LESS
90775: IFFALSE 90787
// min_y := 0 else
90777: LD_ADDR_VAR 0 8
90781: PUSH
90782: LD_INT 0
90784: ST_TO_ADDR
90785: GO 90803
// min_y := y - r ;
90787: LD_ADDR_VAR 0 8
90791: PUSH
90792: LD_VAR 0 3
90796: PUSH
90797: LD_VAR 0 4
90801: MINUS
90802: ST_TO_ADDR
// max_x := x + r ;
90803: LD_ADDR_VAR 0 9
90807: PUSH
90808: LD_VAR 0 2
90812: PUSH
90813: LD_VAR 0 4
90817: PLUS
90818: ST_TO_ADDR
// max_y := y + r ;
90819: LD_ADDR_VAR 0 10
90823: PUSH
90824: LD_VAR 0 3
90828: PUSH
90829: LD_VAR 0 4
90833: PLUS
90834: ST_TO_ADDR
// for _x = min_x to max_x do
90835: LD_ADDR_VAR 0 11
90839: PUSH
90840: DOUBLE
90841: LD_VAR 0 7
90845: DEC
90846: ST_TO_ADDR
90847: LD_VAR 0 9
90851: PUSH
90852: FOR_TO
90853: IFFALSE 90972
// for _y = min_y to max_y do
90855: LD_ADDR_VAR 0 12
90859: PUSH
90860: DOUBLE
90861: LD_VAR 0 8
90865: DEC
90866: ST_TO_ADDR
90867: LD_VAR 0 10
90871: PUSH
90872: FOR_TO
90873: IFFALSE 90968
// begin if not ValidHex ( _x , _y ) then
90875: LD_VAR 0 11
90879: PPUSH
90880: LD_VAR 0 12
90884: PPUSH
90885: CALL_OW 488
90889: NOT
90890: IFFALSE 90894
// continue ;
90892: GO 90872
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90894: LD_VAR 0 11
90898: PPUSH
90899: LD_VAR 0 12
90903: PPUSH
90904: CALL_OW 351
90908: IFFALSE 90926
90910: PUSH
90911: LD_VAR 0 11
90915: PPUSH
90916: LD_VAR 0 12
90920: PPUSH
90921: CALL_OW 554
90925: AND
90926: IFFALSE 90966
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90928: LD_ADDR_VAR 0 13
90932: PUSH
90933: LD_VAR 0 13
90937: PPUSH
90938: LD_VAR 0 13
90942: PUSH
90943: LD_INT 1
90945: PLUS
90946: PPUSH
90947: LD_VAR 0 11
90951: PUSH
90952: LD_VAR 0 12
90956: PUSH
90957: EMPTY
90958: LIST
90959: LIST
90960: PPUSH
90961: CALL_OW 2
90965: ST_TO_ADDR
// end ;
90966: GO 90872
90968: POP
90969: POP
90970: GO 90852
90972: POP
90973: POP
// if not list then
90974: LD_VAR 0 13
90978: NOT
90979: IFFALSE 90983
// exit ;
90981: GO 91054
// for i in list do
90983: LD_ADDR_VAR 0 6
90987: PUSH
90988: LD_VAR 0 13
90992: PUSH
90993: FOR_IN
90994: IFFALSE 91052
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
90996: LD_VAR 0 1
91000: PPUSH
91001: LD_STRING M
91003: PUSH
91004: LD_VAR 0 6
91008: PUSH
91009: LD_INT 1
91011: ARRAY
91012: PUSH
91013: LD_VAR 0 6
91017: PUSH
91018: LD_INT 2
91020: ARRAY
91021: PUSH
91022: LD_INT 0
91024: PUSH
91025: LD_INT 0
91027: PUSH
91028: LD_INT 0
91030: PUSH
91031: LD_INT 0
91033: PUSH
91034: EMPTY
91035: LIST
91036: LIST
91037: LIST
91038: LIST
91039: LIST
91040: LIST
91041: LIST
91042: PUSH
91043: EMPTY
91044: LIST
91045: PPUSH
91046: CALL_OW 447
91050: GO 90993
91052: POP
91053: POP
// end ;
91054: LD_VAR 0 5
91058: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
91059: LD_INT 0
91061: PPUSH
91062: PPUSH
91063: PPUSH
91064: PPUSH
91065: PPUSH
91066: PPUSH
91067: PPUSH
91068: PPUSH
91069: PPUSH
91070: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
91071: LD_VAR 0 1
91075: PPUSH
91076: CALL_OW 302
91080: NOT
91081: IFTRUE 91100
91083: PUSH
91084: LD_VAR 0 2
91088: PPUSH
91089: LD_VAR 0 3
91093: PPUSH
91094: CALL_OW 488
91098: NOT
91099: OR
91100: IFTRUE 91109
91102: PUSH
91103: LD_VAR 0 4
91107: NOT
91108: OR
91109: IFFALSE 91113
// exit ;
91111: GO 91630
// list := [ ] ;
91113: LD_ADDR_VAR 0 13
91117: PUSH
91118: EMPTY
91119: ST_TO_ADDR
// if x - r < 0 then
91120: LD_VAR 0 2
91124: PUSH
91125: LD_VAR 0 4
91129: MINUS
91130: PUSH
91131: LD_INT 0
91133: LESS
91134: IFFALSE 91146
// min_x := 0 else
91136: LD_ADDR_VAR 0 7
91140: PUSH
91141: LD_INT 0
91143: ST_TO_ADDR
91144: GO 91162
// min_x := x - r ;
91146: LD_ADDR_VAR 0 7
91150: PUSH
91151: LD_VAR 0 2
91155: PUSH
91156: LD_VAR 0 4
91160: MINUS
91161: ST_TO_ADDR
// if y - r < 0 then
91162: LD_VAR 0 3
91166: PUSH
91167: LD_VAR 0 4
91171: MINUS
91172: PUSH
91173: LD_INT 0
91175: LESS
91176: IFFALSE 91188
// min_y := 0 else
91178: LD_ADDR_VAR 0 8
91182: PUSH
91183: LD_INT 0
91185: ST_TO_ADDR
91186: GO 91204
// min_y := y - r ;
91188: LD_ADDR_VAR 0 8
91192: PUSH
91193: LD_VAR 0 3
91197: PUSH
91198: LD_VAR 0 4
91202: MINUS
91203: ST_TO_ADDR
// max_x := x + r ;
91204: LD_ADDR_VAR 0 9
91208: PUSH
91209: LD_VAR 0 2
91213: PUSH
91214: LD_VAR 0 4
91218: PLUS
91219: ST_TO_ADDR
// max_y := y + r ;
91220: LD_ADDR_VAR 0 10
91224: PUSH
91225: LD_VAR 0 3
91229: PUSH
91230: LD_VAR 0 4
91234: PLUS
91235: ST_TO_ADDR
// for _x = min_x to max_x do
91236: LD_ADDR_VAR 0 11
91240: PUSH
91241: DOUBLE
91242: LD_VAR 0 7
91246: DEC
91247: ST_TO_ADDR
91248: LD_VAR 0 9
91252: PUSH
91253: FOR_TO
91254: IFFALSE 91373
// for _y = min_y to max_y do
91256: LD_ADDR_VAR 0 12
91260: PUSH
91261: DOUBLE
91262: LD_VAR 0 8
91266: DEC
91267: ST_TO_ADDR
91268: LD_VAR 0 10
91272: PUSH
91273: FOR_TO
91274: IFFALSE 91369
// begin if not ValidHex ( _x , _y ) then
91276: LD_VAR 0 11
91280: PPUSH
91281: LD_VAR 0 12
91285: PPUSH
91286: CALL_OW 488
91290: NOT
91291: IFFALSE 91295
// continue ;
91293: GO 91273
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91295: LD_VAR 0 11
91299: PPUSH
91300: LD_VAR 0 12
91304: PPUSH
91305: CALL_OW 351
91309: IFFALSE 91327
91311: PUSH
91312: LD_VAR 0 11
91316: PPUSH
91317: LD_VAR 0 12
91321: PPUSH
91322: CALL_OW 554
91326: AND
91327: IFFALSE 91367
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91329: LD_ADDR_VAR 0 13
91333: PUSH
91334: LD_VAR 0 13
91338: PPUSH
91339: LD_VAR 0 13
91343: PUSH
91344: LD_INT 1
91346: PLUS
91347: PPUSH
91348: LD_VAR 0 11
91352: PUSH
91353: LD_VAR 0 12
91357: PUSH
91358: EMPTY
91359: LIST
91360: LIST
91361: PPUSH
91362: CALL_OW 2
91366: ST_TO_ADDR
// end ;
91367: GO 91273
91369: POP
91370: POP
91371: GO 91253
91373: POP
91374: POP
// if not list then
91375: LD_VAR 0 13
91379: NOT
91380: IFFALSE 91384
// exit ;
91382: GO 91630
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
91384: LD_ADDR_VAR 0 13
91388: PUSH
91389: LD_VAR 0 1
91393: PPUSH
91394: LD_VAR 0 13
91398: PPUSH
91399: LD_INT 1
91401: PPUSH
91402: LD_INT 1
91404: PPUSH
91405: CALL 35318 0 4
91409: ST_TO_ADDR
// ComStop ( flame ) ;
91410: LD_VAR 0 1
91414: PPUSH
91415: CALL_OW 141
// for i in list do
91419: LD_ADDR_VAR 0 6
91423: PUSH
91424: LD_VAR 0 13
91428: PUSH
91429: FOR_IN
91430: IFFALSE 91461
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
91432: LD_VAR 0 1
91436: PPUSH
91437: LD_VAR 0 6
91441: PUSH
91442: LD_INT 1
91444: ARRAY
91445: PPUSH
91446: LD_VAR 0 6
91450: PUSH
91451: LD_INT 2
91453: ARRAY
91454: PPUSH
91455: CALL_OW 176
91459: GO 91429
91461: POP
91462: POP
// repeat wait ( 0 0$1 ) ;
91463: LD_INT 35
91465: PPUSH
91466: CALL_OW 67
// task := GetTaskList ( flame ) ;
91470: LD_ADDR_VAR 0 14
91474: PUSH
91475: LD_VAR 0 1
91479: PPUSH
91480: CALL_OW 437
91484: ST_TO_ADDR
// if not task then
91485: LD_VAR 0 14
91489: NOT
91490: IFFALSE 91494
// exit ;
91492: GO 91630
// if task [ 1 ] [ 1 ] <> | then
91494: LD_VAR 0 14
91498: PUSH
91499: LD_INT 1
91501: ARRAY
91502: PUSH
91503: LD_INT 1
91505: ARRAY
91506: PUSH
91507: LD_STRING |
91509: NONEQUAL
91510: IFFALSE 91514
// exit ;
91512: GO 91630
// _x := task [ 1 ] [ 2 ] ;
91514: LD_ADDR_VAR 0 11
91518: PUSH
91519: LD_VAR 0 14
91523: PUSH
91524: LD_INT 1
91526: ARRAY
91527: PUSH
91528: LD_INT 2
91530: ARRAY
91531: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
91532: LD_ADDR_VAR 0 12
91536: PUSH
91537: LD_VAR 0 14
91541: PUSH
91542: LD_INT 1
91544: ARRAY
91545: PUSH
91546: LD_INT 3
91548: ARRAY
91549: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
91550: LD_VAR 0 11
91554: PPUSH
91555: LD_VAR 0 12
91559: PPUSH
91560: CALL_OW 351
91564: NOT
91565: IFTRUE 91584
91567: PUSH
91568: LD_VAR 0 11
91572: PPUSH
91573: LD_VAR 0 12
91577: PPUSH
91578: CALL_OW 554
91582: NOT
91583: OR
91584: IFFALSE 91618
// begin task := Delete ( task , 1 ) ;
91586: LD_ADDR_VAR 0 14
91590: PUSH
91591: LD_VAR 0 14
91595: PPUSH
91596: LD_INT 1
91598: PPUSH
91599: CALL_OW 3
91603: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
91604: LD_VAR 0 1
91608: PPUSH
91609: LD_VAR 0 14
91613: PPUSH
91614: CALL_OW 446
// end ; until not HasTask ( flame ) ;
91618: LD_VAR 0 1
91622: PPUSH
91623: CALL_OW 314
91627: NOT
91628: IFFALSE 91463
// end ;
91630: LD_VAR 0 5
91634: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
91635: LD_EXP 126
91639: NOT
91640: IFFALSE 91690
91642: GO 91644
91644: DISABLE
// begin initHack := true ;
91645: LD_ADDR_EXP 126
91649: PUSH
91650: LD_INT 1
91652: ST_TO_ADDR
// hackTanks := [ ] ;
91653: LD_ADDR_EXP 127
91657: PUSH
91658: EMPTY
91659: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
91660: LD_ADDR_EXP 128
91664: PUSH
91665: EMPTY
91666: ST_TO_ADDR
// hackLimit := 3 ;
91667: LD_ADDR_EXP 129
91671: PUSH
91672: LD_INT 3
91674: ST_TO_ADDR
// hackDist := 12 ;
91675: LD_ADDR_EXP 130
91679: PUSH
91680: LD_INT 12
91682: ST_TO_ADDR
// hackCounter := [ ] ;
91683: LD_ADDR_EXP 131
91687: PUSH
91688: EMPTY
91689: ST_TO_ADDR
// end ;
91690: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
91691: LD_EXP 126
91695: IFFALSE 91713
91697: PUSH
91698: LD_INT 34
91700: PUSH
91701: LD_INT 99
91703: PUSH
91704: EMPTY
91705: LIST
91706: LIST
91707: PPUSH
91708: CALL_OW 69
91712: AND
91713: IFFALSE 91966
91715: GO 91717
91717: DISABLE
91718: LD_INT 0
91720: PPUSH
91721: PPUSH
// begin enable ;
91722: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
91723: LD_ADDR_VAR 0 1
91727: PUSH
91728: LD_INT 34
91730: PUSH
91731: LD_INT 99
91733: PUSH
91734: EMPTY
91735: LIST
91736: LIST
91737: PPUSH
91738: CALL_OW 69
91742: PUSH
91743: FOR_IN
91744: IFFALSE 91964
// begin if not i in hackTanks then
91746: LD_VAR 0 1
91750: PUSH
91751: LD_EXP 127
91755: IN
91756: NOT
91757: IFFALSE 91840
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
91759: LD_ADDR_EXP 127
91763: PUSH
91764: LD_EXP 127
91768: PPUSH
91769: LD_EXP 127
91773: PUSH
91774: LD_INT 1
91776: PLUS
91777: PPUSH
91778: LD_VAR 0 1
91782: PPUSH
91783: CALL_OW 1
91787: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
91788: LD_ADDR_EXP 128
91792: PUSH
91793: LD_EXP 128
91797: PPUSH
91798: LD_EXP 128
91802: PUSH
91803: LD_INT 1
91805: PLUS
91806: PPUSH
91807: EMPTY
91808: PPUSH
91809: CALL_OW 1
91813: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
91814: LD_ADDR_EXP 131
91818: PUSH
91819: LD_EXP 131
91823: PPUSH
91824: LD_EXP 131
91828: PUSH
91829: LD_INT 1
91831: PLUS
91832: PPUSH
91833: EMPTY
91834: PPUSH
91835: CALL_OW 1
91839: ST_TO_ADDR
// end ; if not IsOk ( i ) then
91840: LD_VAR 0 1
91844: PPUSH
91845: CALL_OW 302
91849: NOT
91850: IFFALSE 91863
// begin HackUnlinkAll ( i ) ;
91852: LD_VAR 0 1
91856: PPUSH
91857: CALL 91969 0 1
// continue ;
91861: GO 91743
// end ; HackCheckCapturedStatus ( i ) ;
91863: LD_VAR 0 1
91867: PPUSH
91868: CALL 92414 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
91872: LD_ADDR_VAR 0 2
91876: PUSH
91877: LD_INT 81
91879: PUSH
91880: LD_VAR 0 1
91884: PPUSH
91885: CALL_OW 255
91889: PUSH
91890: EMPTY
91891: LIST
91892: LIST
91893: PUSH
91894: LD_INT 33
91896: PUSH
91897: LD_INT 3
91899: PUSH
91900: EMPTY
91901: LIST
91902: LIST
91903: PUSH
91904: LD_INT 91
91906: PUSH
91907: LD_VAR 0 1
91911: PUSH
91912: LD_EXP 130
91916: PUSH
91917: EMPTY
91918: LIST
91919: LIST
91920: LIST
91921: PUSH
91922: LD_INT 50
91924: PUSH
91925: EMPTY
91926: LIST
91927: PUSH
91928: EMPTY
91929: LIST
91930: LIST
91931: LIST
91932: LIST
91933: PPUSH
91934: CALL_OW 69
91938: ST_TO_ADDR
// if not tmp then
91939: LD_VAR 0 2
91943: NOT
91944: IFFALSE 91948
// continue ;
91946: GO 91743
// HackLink ( i , tmp ) ;
91948: LD_VAR 0 1
91952: PPUSH
91953: LD_VAR 0 2
91957: PPUSH
91958: CALL 92105 0 2
// end ;
91962: GO 91743
91964: POP
91965: POP
// end ;
91966: PPOPN 2
91968: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
91969: LD_INT 0
91971: PPUSH
91972: PPUSH
91973: PPUSH
// if not hack in hackTanks then
91974: LD_VAR 0 1
91978: PUSH
91979: LD_EXP 127
91983: IN
91984: NOT
91985: IFFALSE 91989
// exit ;
91987: GO 92100
// index := GetElementIndex ( hackTanks , hack ) ;
91989: LD_ADDR_VAR 0 4
91993: PUSH
91994: LD_EXP 127
91998: PPUSH
91999: LD_VAR 0 1
92003: PPUSH
92004: CALL 34613 0 2
92008: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
92009: LD_EXP 128
92013: PUSH
92014: LD_VAR 0 4
92018: ARRAY
92019: IFFALSE 92100
// begin for i in hackTanksCaptured [ index ] do
92021: LD_ADDR_VAR 0 3
92025: PUSH
92026: LD_EXP 128
92030: PUSH
92031: LD_VAR 0 4
92035: ARRAY
92036: PUSH
92037: FOR_IN
92038: IFFALSE 92064
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
92040: LD_VAR 0 3
92044: PUSH
92045: LD_INT 1
92047: ARRAY
92048: PPUSH
92049: LD_VAR 0 3
92053: PUSH
92054: LD_INT 2
92056: ARRAY
92057: PPUSH
92058: CALL_OW 235
92062: GO 92037
92064: POP
92065: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
92066: LD_ADDR_EXP 128
92070: PUSH
92071: LD_EXP 128
92075: PPUSH
92076: LD_VAR 0 4
92080: PPUSH
92081: EMPTY
92082: PPUSH
92083: CALL_OW 1
92087: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
92088: LD_VAR 0 1
92092: PPUSH
92093: LD_INT 0
92095: PPUSH
92096: CALL_OW 505
// end ; end ;
92100: LD_VAR 0 2
92104: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
92105: LD_INT 0
92107: PPUSH
92108: PPUSH
92109: PPUSH
// if not hack in hackTanks or not vehicles then
92110: LD_VAR 0 1
92114: PUSH
92115: LD_EXP 127
92119: IN
92120: NOT
92121: IFTRUE 92130
92123: PUSH
92124: LD_VAR 0 2
92128: NOT
92129: OR
92130: IFFALSE 92134
// exit ;
92132: GO 92409
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
92134: LD_ADDR_VAR 0 2
92138: PUSH
92139: LD_VAR 0 1
92143: PPUSH
92144: LD_VAR 0 2
92148: PPUSH
92149: LD_INT 1
92151: PPUSH
92152: LD_INT 1
92154: PPUSH
92155: CALL 35265 0 4
92159: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
92160: LD_ADDR_VAR 0 5
92164: PUSH
92165: LD_EXP 127
92169: PPUSH
92170: LD_VAR 0 1
92174: PPUSH
92175: CALL 34613 0 2
92179: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
92180: LD_EXP 128
92184: PUSH
92185: LD_VAR 0 5
92189: ARRAY
92190: PUSH
92191: LD_EXP 129
92195: LESS
92196: IFFALSE 92385
// begin for i := 1 to vehicles do
92198: LD_ADDR_VAR 0 4
92202: PUSH
92203: DOUBLE
92204: LD_INT 1
92206: DEC
92207: ST_TO_ADDR
92208: LD_VAR 0 2
92212: PUSH
92213: FOR_TO
92214: IFFALSE 92383
// begin if hackTanksCaptured [ index ] = hackLimit then
92216: LD_EXP 128
92220: PUSH
92221: LD_VAR 0 5
92225: ARRAY
92226: PUSH
92227: LD_EXP 129
92231: EQUAL
92232: IFFALSE 92236
// break ;
92234: GO 92383
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
92236: LD_ADDR_EXP 131
92240: PUSH
92241: LD_EXP 131
92245: PPUSH
92246: LD_VAR 0 5
92250: PPUSH
92251: LD_EXP 131
92255: PUSH
92256: LD_VAR 0 5
92260: ARRAY
92261: PUSH
92262: LD_INT 1
92264: PLUS
92265: PPUSH
92266: CALL_OW 1
92270: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
92271: LD_ADDR_EXP 128
92275: PUSH
92276: LD_EXP 128
92280: PPUSH
92281: LD_VAR 0 5
92285: PUSH
92286: LD_EXP 128
92290: PUSH
92291: LD_VAR 0 5
92295: ARRAY
92296: PUSH
92297: LD_INT 1
92299: PLUS
92300: PUSH
92301: EMPTY
92302: LIST
92303: LIST
92304: PPUSH
92305: LD_VAR 0 2
92309: PUSH
92310: LD_VAR 0 4
92314: ARRAY
92315: PUSH
92316: LD_VAR 0 2
92320: PUSH
92321: LD_VAR 0 4
92325: ARRAY
92326: PPUSH
92327: CALL_OW 255
92331: PUSH
92332: EMPTY
92333: LIST
92334: LIST
92335: PPUSH
92336: CALL 34830 0 3
92340: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
92341: LD_VAR 0 2
92345: PUSH
92346: LD_VAR 0 4
92350: ARRAY
92351: PPUSH
92352: LD_VAR 0 1
92356: PPUSH
92357: CALL_OW 255
92361: PPUSH
92362: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
92366: LD_VAR 0 2
92370: PUSH
92371: LD_VAR 0 4
92375: ARRAY
92376: PPUSH
92377: CALL_OW 141
// end ;
92381: GO 92213
92383: POP
92384: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92385: LD_VAR 0 1
92389: PPUSH
92390: LD_EXP 128
92394: PUSH
92395: LD_VAR 0 5
92399: ARRAY
92400: PUSH
92401: LD_INT 0
92403: PLUS
92404: PPUSH
92405: CALL_OW 505
// end ;
92409: LD_VAR 0 3
92413: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
92414: LD_INT 0
92416: PPUSH
92417: PPUSH
92418: PPUSH
92419: PPUSH
// if not hack in hackTanks then
92420: LD_VAR 0 1
92424: PUSH
92425: LD_EXP 127
92429: IN
92430: NOT
92431: IFFALSE 92435
// exit ;
92433: GO 92679
// index := GetElementIndex ( hackTanks , hack ) ;
92435: LD_ADDR_VAR 0 4
92439: PUSH
92440: LD_EXP 127
92444: PPUSH
92445: LD_VAR 0 1
92449: PPUSH
92450: CALL 34613 0 2
92454: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
92455: LD_ADDR_VAR 0 3
92459: PUSH
92460: DOUBLE
92461: LD_EXP 128
92465: PUSH
92466: LD_VAR 0 4
92470: ARRAY
92471: INC
92472: ST_TO_ADDR
92473: LD_INT 1
92475: PUSH
92476: FOR_DOWNTO
92477: IFFALSE 92653
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
92479: LD_ADDR_VAR 0 5
92483: PUSH
92484: LD_EXP 128
92488: PUSH
92489: LD_VAR 0 4
92493: ARRAY
92494: PUSH
92495: LD_VAR 0 3
92499: ARRAY
92500: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
92501: LD_VAR 0 5
92505: PUSH
92506: LD_INT 1
92508: ARRAY
92509: PPUSH
92510: CALL_OW 302
92514: NOT
92515: IFTRUE 92543
92517: PUSH
92518: LD_VAR 0 5
92522: PUSH
92523: LD_INT 1
92525: ARRAY
92526: PPUSH
92527: CALL_OW 255
92531: PUSH
92532: LD_VAR 0 1
92536: PPUSH
92537: CALL_OW 255
92541: NONEQUAL
92542: OR
92543: IFFALSE 92651
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
92545: LD_VAR 0 5
92549: PUSH
92550: LD_INT 1
92552: ARRAY
92553: PPUSH
92554: CALL_OW 305
92558: IFFALSE 92586
92560: PUSH
92561: LD_VAR 0 5
92565: PUSH
92566: LD_INT 1
92568: ARRAY
92569: PPUSH
92570: CALL_OW 255
92574: PUSH
92575: LD_VAR 0 1
92579: PPUSH
92580: CALL_OW 255
92584: EQUAL
92585: AND
92586: IFFALSE 92610
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
92588: LD_VAR 0 5
92592: PUSH
92593: LD_INT 1
92595: ARRAY
92596: PPUSH
92597: LD_VAR 0 5
92601: PUSH
92602: LD_INT 2
92604: ARRAY
92605: PPUSH
92606: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
92610: LD_ADDR_EXP 128
92614: PUSH
92615: LD_EXP 128
92619: PPUSH
92620: LD_VAR 0 4
92624: PPUSH
92625: LD_EXP 128
92629: PUSH
92630: LD_VAR 0 4
92634: ARRAY
92635: PPUSH
92636: LD_VAR 0 3
92640: PPUSH
92641: CALL_OW 3
92645: PPUSH
92646: CALL_OW 1
92650: ST_TO_ADDR
// end ; end ;
92651: GO 92476
92653: POP
92654: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92655: LD_VAR 0 1
92659: PPUSH
92660: LD_EXP 128
92664: PUSH
92665: LD_VAR 0 4
92669: ARRAY
92670: PUSH
92671: LD_INT 0
92673: PLUS
92674: PPUSH
92675: CALL_OW 505
// end ;
92679: LD_VAR 0 2
92683: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
92684: LD_INT 0
92686: PPUSH
92687: PPUSH
92688: PPUSH
92689: PPUSH
// if not hack in hackTanks then
92690: LD_VAR 0 1
92694: PUSH
92695: LD_EXP 127
92699: IN
92700: NOT
92701: IFFALSE 92705
// exit ;
92703: GO 92790
// index := GetElementIndex ( hackTanks , hack ) ;
92705: LD_ADDR_VAR 0 5
92709: PUSH
92710: LD_EXP 127
92714: PPUSH
92715: LD_VAR 0 1
92719: PPUSH
92720: CALL 34613 0 2
92724: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
92725: LD_ADDR_VAR 0 4
92729: PUSH
92730: DOUBLE
92731: LD_INT 1
92733: DEC
92734: ST_TO_ADDR
92735: LD_EXP 128
92739: PUSH
92740: LD_VAR 0 5
92744: ARRAY
92745: PUSH
92746: FOR_TO
92747: IFFALSE 92788
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
92749: LD_EXP 128
92753: PUSH
92754: LD_VAR 0 5
92758: ARRAY
92759: PUSH
92760: LD_VAR 0 4
92764: ARRAY
92765: PUSH
92766: LD_INT 1
92768: ARRAY
92769: PUSH
92770: LD_VAR 0 2
92774: EQUAL
92775: IFFALSE 92786
// KillUnit ( vehicle ) ;
92777: LD_VAR 0 2
92781: PPUSH
92782: CALL_OW 66
92786: GO 92746
92788: POP
92789: POP
// end ;
92790: LD_VAR 0 3
92794: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
92795: LD_EXP 132
92799: NOT
92800: IFFALSE 92835
92802: GO 92804
92804: DISABLE
// begin initMiner := true ;
92805: LD_ADDR_EXP 132
92809: PUSH
92810: LD_INT 1
92812: ST_TO_ADDR
// minersList := [ ] ;
92813: LD_ADDR_EXP 133
92817: PUSH
92818: EMPTY
92819: ST_TO_ADDR
// minerMinesList := [ ] ;
92820: LD_ADDR_EXP 134
92824: PUSH
92825: EMPTY
92826: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
92827: LD_ADDR_EXP 135
92831: PUSH
92832: LD_INT 5
92834: ST_TO_ADDR
// end ;
92835: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
92836: LD_EXP 132
92840: IFFALSE 92858
92842: PUSH
92843: LD_INT 34
92845: PUSH
92846: LD_INT 81
92848: PUSH
92849: EMPTY
92850: LIST
92851: LIST
92852: PPUSH
92853: CALL_OW 69
92857: AND
92858: IFFALSE 93321
92860: GO 92862
92862: DISABLE
92863: LD_INT 0
92865: PPUSH
92866: PPUSH
92867: PPUSH
92868: PPUSH
// begin enable ;
92869: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
92870: LD_ADDR_VAR 0 1
92874: PUSH
92875: LD_INT 34
92877: PUSH
92878: LD_INT 81
92880: PUSH
92881: EMPTY
92882: LIST
92883: LIST
92884: PPUSH
92885: CALL_OW 69
92889: PUSH
92890: FOR_IN
92891: IFFALSE 92963
// begin if not i in minersList then
92893: LD_VAR 0 1
92897: PUSH
92898: LD_EXP 133
92902: IN
92903: NOT
92904: IFFALSE 92961
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
92906: LD_ADDR_EXP 133
92910: PUSH
92911: LD_EXP 133
92915: PPUSH
92916: LD_EXP 133
92920: PUSH
92921: LD_INT 1
92923: PLUS
92924: PPUSH
92925: LD_VAR 0 1
92929: PPUSH
92930: CALL_OW 1
92934: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
92935: LD_ADDR_EXP 134
92939: PUSH
92940: LD_EXP 134
92944: PPUSH
92945: LD_EXP 134
92949: PUSH
92950: LD_INT 1
92952: PLUS
92953: PPUSH
92954: EMPTY
92955: PPUSH
92956: CALL_OW 1
92960: ST_TO_ADDR
// end end ;
92961: GO 92890
92963: POP
92964: POP
// for i := minerMinesList downto 1 do
92965: LD_ADDR_VAR 0 1
92969: PUSH
92970: DOUBLE
92971: LD_EXP 134
92975: INC
92976: ST_TO_ADDR
92977: LD_INT 1
92979: PUSH
92980: FOR_DOWNTO
92981: IFFALSE 93319
// begin if IsLive ( minersList [ i ] ) then
92983: LD_EXP 133
92987: PUSH
92988: LD_VAR 0 1
92992: ARRAY
92993: PPUSH
92994: CALL_OW 300
92998: IFFALSE 93026
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
93000: LD_EXP 133
93004: PUSH
93005: LD_VAR 0 1
93009: ARRAY
93010: PPUSH
93011: LD_EXP 134
93015: PUSH
93016: LD_VAR 0 1
93020: ARRAY
93021: PPUSH
93022: CALL_OW 505
// if not minerMinesList [ i ] then
93026: LD_EXP 134
93030: PUSH
93031: LD_VAR 0 1
93035: ARRAY
93036: NOT
93037: IFFALSE 93041
// continue ;
93039: GO 92980
// for j := minerMinesList [ i ] downto 1 do
93041: LD_ADDR_VAR 0 2
93045: PUSH
93046: DOUBLE
93047: LD_EXP 134
93051: PUSH
93052: LD_VAR 0 1
93056: ARRAY
93057: INC
93058: ST_TO_ADDR
93059: LD_INT 1
93061: PUSH
93062: FOR_DOWNTO
93063: IFFALSE 93315
// begin side := GetSide ( minersList [ i ] ) ;
93065: LD_ADDR_VAR 0 3
93069: PUSH
93070: LD_EXP 133
93074: PUSH
93075: LD_VAR 0 1
93079: ARRAY
93080: PPUSH
93081: CALL_OW 255
93085: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
93086: LD_ADDR_VAR 0 4
93090: PUSH
93091: LD_EXP 134
93095: PUSH
93096: LD_VAR 0 1
93100: ARRAY
93101: PUSH
93102: LD_VAR 0 2
93106: ARRAY
93107: PUSH
93108: LD_INT 1
93110: ARRAY
93111: PPUSH
93112: LD_EXP 134
93116: PUSH
93117: LD_VAR 0 1
93121: ARRAY
93122: PUSH
93123: LD_VAR 0 2
93127: ARRAY
93128: PUSH
93129: LD_INT 2
93131: ARRAY
93132: PPUSH
93133: CALL_OW 428
93137: ST_TO_ADDR
// if not tmp then
93138: LD_VAR 0 4
93142: NOT
93143: IFFALSE 93147
// continue ;
93145: GO 93062
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
93147: LD_VAR 0 4
93151: PUSH
93152: LD_INT 81
93154: PUSH
93155: LD_VAR 0 3
93159: PUSH
93160: EMPTY
93161: LIST
93162: LIST
93163: PPUSH
93164: CALL_OW 69
93168: IN
93169: IFFALSE 93219
93171: PUSH
93172: LD_EXP 134
93176: PUSH
93177: LD_VAR 0 1
93181: ARRAY
93182: PUSH
93183: LD_VAR 0 2
93187: ARRAY
93188: PUSH
93189: LD_INT 1
93191: ARRAY
93192: PPUSH
93193: LD_EXP 134
93197: PUSH
93198: LD_VAR 0 1
93202: ARRAY
93203: PUSH
93204: LD_VAR 0 2
93208: ARRAY
93209: PUSH
93210: LD_INT 2
93212: ARRAY
93213: PPUSH
93214: CALL_OW 458
93218: AND
93219: IFFALSE 93313
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
93221: LD_EXP 134
93225: PUSH
93226: LD_VAR 0 1
93230: ARRAY
93231: PUSH
93232: LD_VAR 0 2
93236: ARRAY
93237: PUSH
93238: LD_INT 1
93240: ARRAY
93241: PPUSH
93242: LD_EXP 134
93246: PUSH
93247: LD_VAR 0 1
93251: ARRAY
93252: PUSH
93253: LD_VAR 0 2
93257: ARRAY
93258: PUSH
93259: LD_INT 2
93261: ARRAY
93262: PPUSH
93263: LD_VAR 0 3
93267: PPUSH
93268: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
93272: LD_ADDR_EXP 134
93276: PUSH
93277: LD_EXP 134
93281: PPUSH
93282: LD_VAR 0 1
93286: PPUSH
93287: LD_EXP 134
93291: PUSH
93292: LD_VAR 0 1
93296: ARRAY
93297: PPUSH
93298: LD_VAR 0 2
93302: PPUSH
93303: CALL_OW 3
93307: PPUSH
93308: CALL_OW 1
93312: ST_TO_ADDR
// end ; end ;
93313: GO 93062
93315: POP
93316: POP
// end ;
93317: GO 92980
93319: POP
93320: POP
// end ;
93321: PPOPN 4
93323: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
93324: LD_INT 0
93326: PPUSH
93327: PPUSH
// result := false ;
93328: LD_ADDR_VAR 0 4
93332: PUSH
93333: LD_INT 0
93335: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
93336: LD_VAR 0 1
93340: PPUSH
93341: CALL_OW 264
93345: PUSH
93346: LD_INT 81
93348: EQUAL
93349: NOT
93350: IFFALSE 93354
// exit ;
93352: GO 93598
// index := GetElementIndex ( minersList , unit ) ;
93354: LD_ADDR_VAR 0 5
93358: PUSH
93359: LD_EXP 133
93363: PPUSH
93364: LD_VAR 0 1
93368: PPUSH
93369: CALL 34613 0 2
93373: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
93374: LD_EXP 134
93378: PUSH
93379: LD_VAR 0 5
93383: ARRAY
93384: PUSH
93385: LD_EXP 135
93389: GREATEREQUAL
93390: IFFALSE 93394
// exit ;
93392: GO 93598
// ComMoveXY ( unit , x , y ) ;
93394: LD_VAR 0 1
93398: PPUSH
93399: LD_VAR 0 2
93403: PPUSH
93404: LD_VAR 0 3
93408: PPUSH
93409: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
93413: LD_INT 35
93415: PPUSH
93416: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
93420: LD_VAR 0 1
93424: PPUSH
93425: LD_VAR 0 2
93429: PPUSH
93430: LD_VAR 0 3
93434: PPUSH
93435: CALL 66659 0 3
93439: NOT
93440: IFFALSE 93453
93442: PUSH
93443: LD_VAR 0 1
93447: PPUSH
93448: CALL_OW 314
93452: AND
93453: IFFALSE 93457
// exit ;
93455: GO 93598
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
93457: LD_VAR 0 2
93461: PPUSH
93462: LD_VAR 0 3
93466: PPUSH
93467: CALL_OW 428
93471: PUSH
93472: LD_VAR 0 1
93476: EQUAL
93477: IFFALSE 93491
93479: PUSH
93480: LD_VAR 0 1
93484: PPUSH
93485: CALL_OW 314
93489: NOT
93490: AND
93491: IFFALSE 93413
// PlaySoundXY ( x , y , PlantMine ) ;
93493: LD_VAR 0 2
93497: PPUSH
93498: LD_VAR 0 3
93502: PPUSH
93503: LD_STRING PlantMine
93505: PPUSH
93506: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
93510: LD_VAR 0 2
93514: PPUSH
93515: LD_VAR 0 3
93519: PPUSH
93520: LD_VAR 0 1
93524: PPUSH
93525: CALL_OW 255
93529: PPUSH
93530: LD_INT 0
93532: PPUSH
93533: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
93537: LD_ADDR_EXP 134
93541: PUSH
93542: LD_EXP 134
93546: PPUSH
93547: LD_VAR 0 5
93551: PUSH
93552: LD_EXP 134
93556: PUSH
93557: LD_VAR 0 5
93561: ARRAY
93562: PUSH
93563: LD_INT 1
93565: PLUS
93566: PUSH
93567: EMPTY
93568: LIST
93569: LIST
93570: PPUSH
93571: LD_VAR 0 2
93575: PUSH
93576: LD_VAR 0 3
93580: PUSH
93581: EMPTY
93582: LIST
93583: LIST
93584: PPUSH
93585: CALL 34830 0 3
93589: ST_TO_ADDR
// result := true ;
93590: LD_ADDR_VAR 0 4
93594: PUSH
93595: LD_INT 1
93597: ST_TO_ADDR
// end ;
93598: LD_VAR 0 4
93602: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
93603: LD_INT 0
93605: PPUSH
93606: PPUSH
93607: PPUSH
// if not unit in minersList then
93608: LD_VAR 0 1
93612: PUSH
93613: LD_EXP 133
93617: IN
93618: NOT
93619: IFFALSE 93623
// exit ;
93621: GO 94017
// index := GetElementIndex ( minersList , unit ) ;
93623: LD_ADDR_VAR 0 6
93627: PUSH
93628: LD_EXP 133
93632: PPUSH
93633: LD_VAR 0 1
93637: PPUSH
93638: CALL 34613 0 2
93642: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
93643: LD_ADDR_VAR 0 5
93647: PUSH
93648: DOUBLE
93649: LD_EXP 134
93653: PUSH
93654: LD_VAR 0 6
93658: ARRAY
93659: INC
93660: ST_TO_ADDR
93661: LD_INT 1
93663: PUSH
93664: FOR_DOWNTO
93665: IFFALSE 93828
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
93667: LD_EXP 134
93671: PUSH
93672: LD_VAR 0 6
93676: ARRAY
93677: PUSH
93678: LD_VAR 0 5
93682: ARRAY
93683: PUSH
93684: LD_INT 1
93686: ARRAY
93687: PUSH
93688: LD_VAR 0 2
93692: EQUAL
93693: IFFALSE 93723
93695: PUSH
93696: LD_EXP 134
93700: PUSH
93701: LD_VAR 0 6
93705: ARRAY
93706: PUSH
93707: LD_VAR 0 5
93711: ARRAY
93712: PUSH
93713: LD_INT 2
93715: ARRAY
93716: PUSH
93717: LD_VAR 0 3
93721: EQUAL
93722: AND
93723: IFFALSE 93826
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
93725: LD_EXP 134
93729: PUSH
93730: LD_VAR 0 6
93734: ARRAY
93735: PUSH
93736: LD_VAR 0 5
93740: ARRAY
93741: PUSH
93742: LD_INT 1
93744: ARRAY
93745: PPUSH
93746: LD_EXP 134
93750: PUSH
93751: LD_VAR 0 6
93755: ARRAY
93756: PUSH
93757: LD_VAR 0 5
93761: ARRAY
93762: PUSH
93763: LD_INT 2
93765: ARRAY
93766: PPUSH
93767: LD_VAR 0 1
93771: PPUSH
93772: CALL_OW 255
93776: PPUSH
93777: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
93781: LD_ADDR_EXP 134
93785: PUSH
93786: LD_EXP 134
93790: PPUSH
93791: LD_VAR 0 6
93795: PPUSH
93796: LD_EXP 134
93800: PUSH
93801: LD_VAR 0 6
93805: ARRAY
93806: PPUSH
93807: LD_VAR 0 5
93811: PPUSH
93812: CALL_OW 3
93816: PPUSH
93817: CALL_OW 1
93821: ST_TO_ADDR
// exit ;
93822: POP
93823: POP
93824: GO 94017
// end ; end ;
93826: GO 93664
93828: POP
93829: POP
// for i := minerMinesList [ index ] downto 1 do
93830: LD_ADDR_VAR 0 5
93834: PUSH
93835: DOUBLE
93836: LD_EXP 134
93840: PUSH
93841: LD_VAR 0 6
93845: ARRAY
93846: INC
93847: ST_TO_ADDR
93848: LD_INT 1
93850: PUSH
93851: FOR_DOWNTO
93852: IFFALSE 94015
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
93854: LD_EXP 134
93858: PUSH
93859: LD_VAR 0 6
93863: ARRAY
93864: PUSH
93865: LD_VAR 0 5
93869: ARRAY
93870: PUSH
93871: LD_INT 1
93873: ARRAY
93874: PPUSH
93875: LD_EXP 134
93879: PUSH
93880: LD_VAR 0 6
93884: ARRAY
93885: PUSH
93886: LD_VAR 0 5
93890: ARRAY
93891: PUSH
93892: LD_INT 2
93894: ARRAY
93895: PPUSH
93896: LD_VAR 0 2
93900: PPUSH
93901: LD_VAR 0 3
93905: PPUSH
93906: CALL_OW 298
93910: PUSH
93911: LD_INT 6
93913: LESS
93914: IFFALSE 94013
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
93916: LD_EXP 134
93920: PUSH
93921: LD_VAR 0 6
93925: ARRAY
93926: PUSH
93927: LD_VAR 0 5
93931: ARRAY
93932: PUSH
93933: LD_INT 1
93935: ARRAY
93936: PPUSH
93937: LD_EXP 134
93941: PUSH
93942: LD_VAR 0 6
93946: ARRAY
93947: PUSH
93948: LD_VAR 0 5
93952: ARRAY
93953: PUSH
93954: LD_INT 2
93956: ARRAY
93957: PPUSH
93958: LD_VAR 0 1
93962: PPUSH
93963: CALL_OW 255
93967: PPUSH
93968: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
93972: LD_ADDR_EXP 134
93976: PUSH
93977: LD_EXP 134
93981: PPUSH
93982: LD_VAR 0 6
93986: PPUSH
93987: LD_EXP 134
93991: PUSH
93992: LD_VAR 0 6
93996: ARRAY
93997: PPUSH
93998: LD_VAR 0 5
94002: PPUSH
94003: CALL_OW 3
94007: PPUSH
94008: CALL_OW 1
94012: ST_TO_ADDR
// end ; end ;
94013: GO 93851
94015: POP
94016: POP
// end ;
94017: LD_VAR 0 4
94021: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
94022: LD_INT 0
94024: PPUSH
94025: PPUSH
94026: PPUSH
94027: PPUSH
94028: PPUSH
94029: PPUSH
94030: PPUSH
94031: PPUSH
94032: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
94033: LD_VAR 0 1
94037: PPUSH
94038: CALL_OW 264
94042: PUSH
94043: LD_INT 81
94045: EQUAL
94046: NOT
94047: IFTRUE 94062
94049: PUSH
94050: LD_VAR 0 1
94054: PUSH
94055: LD_EXP 133
94059: IN
94060: NOT
94061: OR
94062: IFFALSE 94066
// exit ;
94064: GO 94392
// index := GetElementIndex ( minersList , unit ) ;
94066: LD_ADDR_VAR 0 6
94070: PUSH
94071: LD_EXP 133
94075: PPUSH
94076: LD_VAR 0 1
94080: PPUSH
94081: CALL 34613 0 2
94085: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
94086: LD_ADDR_VAR 0 8
94090: PUSH
94091: LD_EXP 135
94095: PUSH
94096: LD_EXP 134
94100: PUSH
94101: LD_VAR 0 6
94105: ARRAY
94106: MINUS
94107: ST_TO_ADDR
// if not minesFreeAmount then
94108: LD_VAR 0 8
94112: NOT
94113: IFFALSE 94117
// exit ;
94115: GO 94392
// tmp := [ ] ;
94117: LD_ADDR_VAR 0 7
94121: PUSH
94122: EMPTY
94123: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
94124: LD_ADDR_VAR 0 5
94128: PUSH
94129: DOUBLE
94130: LD_INT 1
94132: DEC
94133: ST_TO_ADDR
94134: LD_VAR 0 8
94138: PUSH
94139: FOR_TO
94140: IFFALSE 94339
// begin _d := rand ( 0 , 5 ) ;
94142: LD_ADDR_VAR 0 11
94146: PUSH
94147: LD_INT 0
94149: PPUSH
94150: LD_INT 5
94152: PPUSH
94153: CALL_OW 12
94157: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
94158: LD_ADDR_VAR 0 12
94162: PUSH
94163: LD_INT 2
94165: PPUSH
94166: LD_INT 6
94168: PPUSH
94169: CALL_OW 12
94173: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
94174: LD_ADDR_VAR 0 9
94178: PUSH
94179: LD_VAR 0 2
94183: PPUSH
94184: LD_VAR 0 11
94188: PPUSH
94189: LD_VAR 0 12
94193: PPUSH
94194: CALL_OW 272
94198: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
94199: LD_ADDR_VAR 0 10
94203: PUSH
94204: LD_VAR 0 3
94208: PPUSH
94209: LD_VAR 0 11
94213: PPUSH
94214: LD_VAR 0 12
94218: PPUSH
94219: CALL_OW 273
94223: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
94224: LD_VAR 0 9
94228: PPUSH
94229: LD_VAR 0 10
94233: PPUSH
94234: CALL_OW 488
94238: IFFALSE 94262
94240: PUSH
94241: LD_VAR 0 9
94245: PUSH
94246: LD_VAR 0 10
94250: PUSH
94251: EMPTY
94252: LIST
94253: LIST
94254: PUSH
94255: LD_VAR 0 7
94259: IN
94260: NOT
94261: AND
94262: IFFALSE 94281
94264: PUSH
94265: LD_VAR 0 9
94269: PPUSH
94270: LD_VAR 0 10
94274: PPUSH
94275: CALL_OW 458
94279: NOT
94280: AND
94281: IFFALSE 94323
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
94283: LD_ADDR_VAR 0 7
94287: PUSH
94288: LD_VAR 0 7
94292: PPUSH
94293: LD_VAR 0 7
94297: PUSH
94298: LD_INT 1
94300: PLUS
94301: PPUSH
94302: LD_VAR 0 9
94306: PUSH
94307: LD_VAR 0 10
94311: PUSH
94312: EMPTY
94313: LIST
94314: LIST
94315: PPUSH
94316: CALL_OW 1
94320: ST_TO_ADDR
94321: GO 94337
// i := i - 1 ;
94323: LD_ADDR_VAR 0 5
94327: PUSH
94328: LD_VAR 0 5
94332: PUSH
94333: LD_INT 1
94335: MINUS
94336: ST_TO_ADDR
// end ;
94337: GO 94139
94339: POP
94340: POP
// for i in tmp do
94341: LD_ADDR_VAR 0 5
94345: PUSH
94346: LD_VAR 0 7
94350: PUSH
94351: FOR_IN
94352: IFFALSE 94390
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
94354: LD_VAR 0 1
94358: PPUSH
94359: LD_VAR 0 5
94363: PUSH
94364: LD_INT 1
94366: ARRAY
94367: PPUSH
94368: LD_VAR 0 5
94372: PUSH
94373: LD_INT 2
94375: ARRAY
94376: PPUSH
94377: CALL 93324 0 3
94381: NOT
94382: IFFALSE 94388
// exit ;
94384: POP
94385: POP
94386: GO 94392
94388: GO 94351
94390: POP
94391: POP
// end ;
94392: LD_VAR 0 4
94396: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
94397: LD_INT 0
94399: PPUSH
94400: PPUSH
94401: PPUSH
94402: PPUSH
94403: PPUSH
94404: PPUSH
94405: PPUSH
94406: PPUSH
94407: PPUSH
// if GetClass ( unit ) <> class_sniper then
94408: LD_VAR 0 1
94412: PPUSH
94413: CALL_OW 257
94417: PUSH
94418: LD_INT 5
94420: NONEQUAL
94421: IFFALSE 94425
// exit ;
94423: GO 94895
// dist := 8 ;
94425: LD_ADDR_VAR 0 5
94429: PUSH
94430: LD_INT 8
94432: ST_TO_ADDR
// viewRange := 12 ;
94433: LD_ADDR_VAR 0 8
94437: PUSH
94438: LD_INT 12
94440: ST_TO_ADDR
// side := GetSide ( unit ) ;
94441: LD_ADDR_VAR 0 6
94445: PUSH
94446: LD_VAR 0 1
94450: PPUSH
94451: CALL_OW 255
94455: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
94456: LD_INT 61
94458: PPUSH
94459: LD_VAR 0 6
94463: PPUSH
94464: CALL_OW 321
94468: PUSH
94469: LD_INT 2
94471: EQUAL
94472: IFFALSE 94482
// viewRange := 16 ;
94474: LD_ADDR_VAR 0 8
94478: PUSH
94479: LD_INT 16
94481: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
94482: LD_VAR 0 1
94486: PPUSH
94487: LD_VAR 0 2
94491: PPUSH
94492: LD_VAR 0 3
94496: PPUSH
94497: CALL_OW 297
94501: PUSH
94502: LD_VAR 0 5
94506: GREATER
94507: IFFALSE 94586
// begin ComMoveXY ( unit , x , y ) ;
94509: LD_VAR 0 1
94513: PPUSH
94514: LD_VAR 0 2
94518: PPUSH
94519: LD_VAR 0 3
94523: PPUSH
94524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
94528: LD_INT 35
94530: PPUSH
94531: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
94535: LD_VAR 0 1
94539: PPUSH
94540: LD_VAR 0 2
94544: PPUSH
94545: LD_VAR 0 3
94549: PPUSH
94550: CALL 66659 0 3
94554: NOT
94555: IFFALSE 94559
// exit ;
94557: GO 94895
// until GetDistUnitXY ( unit , x , y ) < dist ;
94559: LD_VAR 0 1
94563: PPUSH
94564: LD_VAR 0 2
94568: PPUSH
94569: LD_VAR 0 3
94573: PPUSH
94574: CALL_OW 297
94578: PUSH
94579: LD_VAR 0 5
94583: LESS
94584: IFFALSE 94528
// end ; ComTurnXY ( unit , x , y ) ;
94586: LD_VAR 0 1
94590: PPUSH
94591: LD_VAR 0 2
94595: PPUSH
94596: LD_VAR 0 3
94600: PPUSH
94601: CALL_OW 118
// repeat if Multiplayer then
94605: LD_OWVAR 4
94609: IFFALSE 94620
// wait ( 35 ) else
94611: LD_INT 35
94613: PPUSH
94614: CALL_OW 67
94618: GO 94627
// wait ( 5 ) ;
94620: LD_INT 5
94622: PPUSH
94623: CALL_OW 67
// _d := GetDir ( unit ) ;
94627: LD_ADDR_VAR 0 11
94631: PUSH
94632: LD_VAR 0 1
94636: PPUSH
94637: CALL_OW 254
94641: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
94642: LD_ADDR_VAR 0 7
94646: PUSH
94647: LD_VAR 0 1
94651: PPUSH
94652: CALL_OW 250
94656: PPUSH
94657: LD_VAR 0 1
94661: PPUSH
94662: CALL_OW 251
94666: PPUSH
94667: LD_VAR 0 2
94671: PPUSH
94672: LD_VAR 0 3
94676: PPUSH
94677: CALL 69295 0 4
94681: ST_TO_ADDR
// until dir = _d ;
94682: LD_VAR 0 7
94686: PUSH
94687: LD_VAR 0 11
94691: EQUAL
94692: IFFALSE 94605
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
94694: LD_ADDR_VAR 0 9
94698: PUSH
94699: LD_VAR 0 1
94703: PPUSH
94704: CALL_OW 250
94708: PPUSH
94709: LD_VAR 0 7
94713: PPUSH
94714: LD_VAR 0 5
94718: PPUSH
94719: CALL_OW 272
94723: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
94724: LD_ADDR_VAR 0 10
94728: PUSH
94729: LD_VAR 0 1
94733: PPUSH
94734: CALL_OW 251
94738: PPUSH
94739: LD_VAR 0 7
94743: PPUSH
94744: LD_VAR 0 5
94748: PPUSH
94749: CALL_OW 273
94753: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
94754: LD_VAR 0 9
94758: PPUSH
94759: LD_VAR 0 10
94763: PPUSH
94764: CALL_OW 488
94768: NOT
94769: IFFALSE 94773
// exit ;
94771: GO 94895
// ComAnimCustom ( unit , 1 ) ;
94773: LD_VAR 0 1
94777: PPUSH
94778: LD_INT 1
94780: PPUSH
94781: CALL_OW 592
// p := 0 ;
94785: LD_ADDR_VAR 0 12
94789: PUSH
94790: LD_INT 0
94792: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
94793: LD_VAR 0 9
94797: PPUSH
94798: LD_VAR 0 10
94802: PPUSH
94803: LD_VAR 0 6
94807: PPUSH
94808: LD_VAR 0 8
94812: PPUSH
94813: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
94817: LD_INT 35
94819: PPUSH
94820: CALL_OW 67
// p := Inc ( p ) ;
94824: LD_ADDR_VAR 0 12
94828: PUSH
94829: LD_VAR 0 12
94833: PPUSH
94834: CALL 69251 0 1
94838: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
94839: LD_VAR 0 12
94843: PUSH
94844: LD_INT 3
94846: EQUAL
94847: IFTRUE 94861
94849: PUSH
94850: LD_VAR 0 1
94854: PPUSH
94855: CALL_OW 302
94859: NOT
94860: OR
94861: IFTRUE 94874
94863: PUSH
94864: LD_VAR 0 1
94868: PPUSH
94869: CALL_OW 301
94873: OR
94874: IFFALSE 94817
// RemoveSeeing ( _x , _y , side ) ;
94876: LD_VAR 0 9
94880: PPUSH
94881: LD_VAR 0 10
94885: PPUSH
94886: LD_VAR 0 6
94890: PPUSH
94891: CALL_OW 331
// end ;
94895: LD_VAR 0 4
94899: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
94900: LD_INT 0
94902: PPUSH
94903: PPUSH
94904: PPUSH
94905: PPUSH
94906: PPUSH
94907: PPUSH
94908: PPUSH
94909: PPUSH
94910: PPUSH
94911: PPUSH
94912: PPUSH
// if not unit then
94913: LD_VAR 0 1
94917: NOT
94918: IFFALSE 94922
// exit ;
94920: GO 95193
// side := GetSide ( unit ) ;
94922: LD_ADDR_VAR 0 3
94926: PUSH
94927: LD_VAR 0 1
94931: PPUSH
94932: CALL_OW 255
94936: ST_TO_ADDR
// x := GetX ( unit ) ;
94937: LD_ADDR_VAR 0 5
94941: PUSH
94942: LD_VAR 0 1
94946: PPUSH
94947: CALL_OW 250
94951: ST_TO_ADDR
// y := GetY ( unit ) ;
94952: LD_ADDR_VAR 0 6
94956: PUSH
94957: LD_VAR 0 1
94961: PPUSH
94962: CALL_OW 251
94966: ST_TO_ADDR
// r := 8 ;
94967: LD_ADDR_VAR 0 4
94971: PUSH
94972: LD_INT 8
94974: ST_TO_ADDR
// if x - r < 0 then
94975: LD_VAR 0 5
94979: PUSH
94980: LD_VAR 0 4
94984: MINUS
94985: PUSH
94986: LD_INT 0
94988: LESS
94989: IFFALSE 95001
// min_x := 0 else
94991: LD_ADDR_VAR 0 7
94995: PUSH
94996: LD_INT 0
94998: ST_TO_ADDR
94999: GO 95017
// min_x := x - r ;
95001: LD_ADDR_VAR 0 7
95005: PUSH
95006: LD_VAR 0 5
95010: PUSH
95011: LD_VAR 0 4
95015: MINUS
95016: ST_TO_ADDR
// if y - r < 0 then
95017: LD_VAR 0 6
95021: PUSH
95022: LD_VAR 0 4
95026: MINUS
95027: PUSH
95028: LD_INT 0
95030: LESS
95031: IFFALSE 95043
// min_y := 0 else
95033: LD_ADDR_VAR 0 8
95037: PUSH
95038: LD_INT 0
95040: ST_TO_ADDR
95041: GO 95059
// min_y := y - r ;
95043: LD_ADDR_VAR 0 8
95047: PUSH
95048: LD_VAR 0 6
95052: PUSH
95053: LD_VAR 0 4
95057: MINUS
95058: ST_TO_ADDR
// max_x := x + r ;
95059: LD_ADDR_VAR 0 9
95063: PUSH
95064: LD_VAR 0 5
95068: PUSH
95069: LD_VAR 0 4
95073: PLUS
95074: ST_TO_ADDR
// max_y := y + r ;
95075: LD_ADDR_VAR 0 10
95079: PUSH
95080: LD_VAR 0 6
95084: PUSH
95085: LD_VAR 0 4
95089: PLUS
95090: ST_TO_ADDR
// for _x = min_x to max_x do
95091: LD_ADDR_VAR 0 11
95095: PUSH
95096: DOUBLE
95097: LD_VAR 0 7
95101: DEC
95102: ST_TO_ADDR
95103: LD_VAR 0 9
95107: PUSH
95108: FOR_TO
95109: IFFALSE 95191
// for _y = min_y to max_y do
95111: LD_ADDR_VAR 0 12
95115: PUSH
95116: DOUBLE
95117: LD_VAR 0 8
95121: DEC
95122: ST_TO_ADDR
95123: LD_VAR 0 10
95127: PUSH
95128: FOR_TO
95129: IFFALSE 95187
// begin if not ValidHex ( _x , _y ) then
95131: LD_VAR 0 11
95135: PPUSH
95136: LD_VAR 0 12
95140: PPUSH
95141: CALL_OW 488
95145: NOT
95146: IFFALSE 95150
// continue ;
95148: GO 95128
// if MineAtPos ( _x , _y ) then
95150: LD_VAR 0 11
95154: PPUSH
95155: LD_VAR 0 12
95159: PPUSH
95160: CALL_OW 458
95164: IFFALSE 95185
// ViewMineAtPos ( _x , _y , side ) ;
95166: LD_VAR 0 11
95170: PPUSH
95171: LD_VAR 0 12
95175: PPUSH
95176: LD_VAR 0 3
95180: PPUSH
95181: CALL_OW 457
// end ;
95185: GO 95128
95187: POP
95188: POP
95189: GO 95108
95191: POP
95192: POP
// end ;
95193: LD_VAR 0 2
95197: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
95198: LD_INT 0
95200: PPUSH
95201: PPUSH
95202: PPUSH
95203: PPUSH
95204: PPUSH
95205: PPUSH
// if not units then
95206: LD_VAR 0 1
95210: NOT
95211: IFFALSE 95215
// exit ;
95213: GO 95645
// scaners := [ ] ;
95215: LD_ADDR_VAR 0 6
95219: PUSH
95220: EMPTY
95221: ST_TO_ADDR
// for i in units do
95222: LD_ADDR_VAR 0 3
95226: PUSH
95227: LD_VAR 0 1
95231: PUSH
95232: FOR_IN
95233: IFFALSE 95390
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
95235: LD_VAR 0 3
95239: PPUSH
95240: CALL_OW 264
95244: PUSH
95245: LD_INT 11
95247: NONEQUAL
95248: IFTRUE 95262
95250: PUSH
95251: LD_VAR 0 3
95255: PPUSH
95256: CALL_OW 302
95260: NOT
95261: OR
95262: IFTRUE 95279
95264: PUSH
95265: LD_VAR 0 3
95269: PPUSH
95270: CALL_OW 110
95274: PUSH
95275: LD_INT 502
95277: EQUAL
95278: OR
95279: IFFALSE 95283
// continue ;
95281: GO 95232
// ComStop ( i ) ;
95283: LD_VAR 0 3
95287: PPUSH
95288: CALL_OW 141
// x := GetX ( i ) ;
95292: LD_ADDR_VAR 0 4
95296: PUSH
95297: LD_VAR 0 3
95301: PPUSH
95302: CALL_OW 250
95306: ST_TO_ADDR
// y := GetY ( i ) ;
95307: LD_ADDR_VAR 0 5
95311: PUSH
95312: LD_VAR 0 3
95316: PPUSH
95317: CALL_OW 251
95321: ST_TO_ADDR
// if GetSide ( i ) = your_side then
95322: LD_VAR 0 3
95326: PPUSH
95327: CALL_OW 255
95331: PUSH
95332: LD_OWVAR 2
95336: EQUAL
95337: IFFALSE 95356
// PlaySoundXY ( x , y , mineDetector ) ;
95339: LD_VAR 0 4
95343: PPUSH
95344: LD_VAR 0 5
95348: PPUSH
95349: LD_STRING mineDetector
95351: PPUSH
95352: CALL_OW 366
// scaners := Join ( scaners , i ) ;
95356: LD_ADDR_VAR 0 6
95360: PUSH
95361: LD_VAR 0 6
95365: PPUSH
95366: LD_VAR 0 3
95370: PPUSH
95371: CALL 67878 0 2
95375: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
95376: LD_VAR 0 3
95380: PPUSH
95381: LD_INT 502
95383: PPUSH
95384: CALL_OW 109
// end ;
95388: GO 95232
95390: POP
95391: POP
// if not scaners then
95392: LD_VAR 0 6
95396: NOT
95397: IFFALSE 95401
// exit ;
95399: GO 95645
// wait ( 3 ) ;
95401: LD_INT 3
95403: PPUSH
95404: CALL_OW 67
// timer := 6 ;
95408: LD_ADDR_VAR 0 7
95412: PUSH
95413: LD_INT 6
95415: ST_TO_ADDR
// repeat for i in scaners do
95416: LD_ADDR_VAR 0 3
95420: PUSH
95421: LD_VAR 0 6
95425: PUSH
95426: FOR_IN
95427: IFFALSE 95543
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
95429: LD_VAR 0 3
95433: PPUSH
95434: CALL_OW 302
95438: NOT
95439: IFTRUE 95452
95441: PUSH
95442: LD_VAR 0 3
95446: PPUSH
95447: CALL_OW 314
95451: OR
95452: IFTRUE 95483
95454: PUSH
95455: LD_VAR 0 3
95459: PPUSH
95460: CALL_OW 263
95464: PUSH
95465: LD_INT 1
95467: EQUAL
95468: IFFALSE 95482
95470: PUSH
95471: LD_VAR 0 3
95475: PPUSH
95476: CALL_OW 311
95480: NOT
95481: AND
95482: OR
95483: IFFALSE 95527
// begin SetUnitDisplayNumber ( i , 0 ) ;
95485: LD_VAR 0 3
95489: PPUSH
95490: LD_INT 0
95492: PPUSH
95493: CALL_OW 505
// SetTag ( i , 0 ) ;
95497: LD_VAR 0 3
95501: PPUSH
95502: LD_INT 0
95504: PPUSH
95505: CALL_OW 109
// scaners := scaners diff i ;
95509: LD_ADDR_VAR 0 6
95513: PUSH
95514: LD_VAR 0 6
95518: PUSH
95519: LD_VAR 0 3
95523: DIFF
95524: ST_TO_ADDR
// continue ;
95525: GO 95426
// end ; SetUnitDisplayNumber ( i , timer ) ;
95527: LD_VAR 0 3
95531: PPUSH
95532: LD_VAR 0 7
95536: PPUSH
95537: CALL_OW 505
// end ;
95541: GO 95426
95543: POP
95544: POP
// if not scaners then
95545: LD_VAR 0 6
95549: NOT
95550: IFFALSE 95554
// exit ;
95552: GO 95645
// timer := Dec ( timer ) ;
95554: LD_ADDR_VAR 0 7
95558: PUSH
95559: LD_VAR 0 7
95563: PPUSH
95564: CALL 69273 0 1
95568: ST_TO_ADDR
// wait ( 0 0$1 ) ;
95569: LD_INT 35
95571: PPUSH
95572: CALL_OW 67
// until timer = 0 ;
95576: LD_VAR 0 7
95580: PUSH
95581: LD_INT 0
95583: EQUAL
95584: IFFALSE 95416
// if not scaners then
95586: LD_VAR 0 6
95590: NOT
95591: IFFALSE 95595
// exit ;
95593: GO 95645
// for i in scaners do
95595: LD_ADDR_VAR 0 3
95599: PUSH
95600: LD_VAR 0 6
95604: PUSH
95605: FOR_IN
95606: IFFALSE 95643
// begin SetUnitDisplayNumber ( i , 0 ) ;
95608: LD_VAR 0 3
95612: PPUSH
95613: LD_INT 0
95615: PPUSH
95616: CALL_OW 505
// SetTag ( i , 0 ) ;
95620: LD_VAR 0 3
95624: PPUSH
95625: LD_INT 0
95627: PPUSH
95628: CALL_OW 109
// RevealDetectorMine ( i ) ;
95632: LD_VAR 0 3
95636: PPUSH
95637: CALL 94900 0 1
// end ;
95641: GO 95605
95643: POP
95644: POP
// end ;
95645: LD_VAR 0 2
95649: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
95650: LD_INT 0
95652: PPUSH
// if p1 = mine_detector_mode then
95653: LD_VAR 0 2
95657: PUSH
95658: LD_INT 103
95660: EQUAL
95661: IFFALSE 95672
// DetectMine ( units ) ;
95663: LD_VAR 0 1
95667: PPUSH
95668: CALL 95198 0 1
// end ; end_of_file
95672: LD_VAR 0 7
95676: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
95677: LD_VAR 0 1
95681: PPUSH
95682: LD_VAR 0 2
95686: PPUSH
95687: LD_VAR 0 3
95691: PPUSH
95692: LD_VAR 0 4
95696: PPUSH
95697: LD_VAR 0 5
95701: PPUSH
95702: LD_VAR 0 6
95706: PPUSH
95707: CALL 73404 0 6
// end ;
95711: PPOPN 6
95713: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
95714: LD_INT 0
95716: PPUSH
// begin if not units then
95717: LD_VAR 0 1
95721: NOT
95722: IFFALSE 95726
// exit ;
95724: GO 95760
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
95726: LD_VAR 0 1
95730: PPUSH
95731: LD_VAR 0 2
95735: PPUSH
95736: LD_VAR 0 3
95740: PPUSH
95741: LD_VAR 0 4
95745: PPUSH
95746: LD_VAR 0 5
95750: PPUSH
95751: LD_VAR 0 6
95755: PPUSH
95756: CALL 95650 0 6
// end ;
95760: PPOPN 7
95762: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
95763: CALL 73291 0 0
// end ;
95767: PPOPN 1
95769: END
