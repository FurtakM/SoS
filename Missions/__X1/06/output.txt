// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 64818 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 4 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 4
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6882 0 2
// PrepareArabian ;
  36: CALL 381 0 0
// PrepareRussian ;
  40: CALL 7733 0 0
// Action ;
  44: CALL 15884 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$30 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 11550
 262: PUSH
 263: LD_INT 10500
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: PUSH
 272: LD_OWVAR 67
 276: ARRAY
 277: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ;
 278: LD_ADDR_EXP 20
 282: PUSH
 283: LD_INT 21000
 285: PUSH
 286: LD_INT 18900
 288: PUSH
 289: LD_INT 16800
 291: PUSH
 292: LD_INT 14700
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_OWVAR 67
 305: ARRAY
 306: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 307: LD_ADDR_EXP 21
 311: PUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 6
 320: PUSH
 321: LD_INT 6
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: LD_OWVAR 67
 334: ARRAY
 335: ST_TO_ADDR
// omarAttack := false ;
 336: LD_ADDR_EXP 23
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// disableAttackOnHeike := false ;
 344: LD_ADDR_EXP 27
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 352: LD_ADDR_EXP 25
 356: PUSH
 357: LD_INT 8400
 359: ST_TO_ADDR
// firstAttack := true ;
 360: LD_ADDR_EXP 28
 364: PUSH
 365: LD_INT 1
 367: ST_TO_ADDR
// canRolfJoin := true ;
 368: LD_ADDR_EXP 29
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// end ; end_of_file
 376: LD_VAR 0 1
 380: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 381: LD_INT 0
 383: PPUSH
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_nation := 2 ;
 395: LD_ADDR_OWVAR 21
 399: PUSH
 400: LD_INT 2
 402: ST_TO_ADDR
// uc_side := 5 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 5
 410: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 411: LD_ADDR_EXP 38
 415: PUSH
 416: LD_STRING Abdul
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: LD_STRING 
 424: PPUSH
 425: CALL 25263 0 3
 429: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 430: LD_ADDR_EXP 40
 434: PUSH
 435: LD_STRING Omar
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: LD_STRING 
 443: PPUSH
 444: CALL 25263 0 3
 448: ST_TO_ADDR
// uc_side := 2 ;
 449: LD_ADDR_OWVAR 20
 453: PUSH
 454: LD_INT 2
 456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 457: LD_ADDR_EXP 30
 461: PUSH
 462: LD_STRING Heike
 464: PPUSH
 465: LD_EXP 1
 469: NOT
 470: PPUSH
 471: LD_EXP 2
 475: PPUSH
 476: CALL 25263 0 3
 480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 481: LD_ADDR_EXP 33
 485: PUSH
 486: LD_STRING Ibrahim
 488: PPUSH
 489: LD_EXP 1
 493: NOT
 494: PPUSH
 495: LD_EXP 2
 499: PPUSH
 500: CALL 25263 0 3
 504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 505: LD_ADDR_EXP 31
 509: PUSH
 510: LD_STRING Givi
 512: PPUSH
 513: LD_EXP 1
 517: NOT
 518: PPUSH
 519: LD_EXP 2
 523: PPUSH
 524: CALL 25263 0 3
 528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 529: LD_ADDR_EXP 34
 533: PUSH
 534: LD_STRING Kamil
 536: PPUSH
 537: LD_EXP 1
 541: NOT
 542: PPUSH
 543: LD_EXP 2
 547: PPUSH
 548: CALL 25263 0 3
 552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 553: LD_ADDR_EXP 35
 557: PUSH
 558: LD_STRING Kaia
 560: PPUSH
 561: LD_EXP 1
 565: NOT
 566: PPUSH
 567: LD_EXP 2
 571: PPUSH
 572: CALL 25263 0 3
 576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 577: LD_ADDR_EXP 36
 581: PUSH
 582: LD_STRING Sophia
 584: PPUSH
 585: LD_EXP 1
 589: NOT
 590: PPUSH
 591: LD_EXP 2
 595: PPUSH
 596: CALL 25263 0 3
 600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 601: LD_ADDR_EXP 37
 605: PUSH
 606: LD_STRING Markov
 608: PPUSH
 609: LD_EXP 1
 613: NOT
 614: PPUSH
 615: LD_EXP 2
 619: PPUSH
 620: CALL 25263 0 3
 624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 625: LD_ADDR_EXP 42
 629: PUSH
 630: LD_STRING Aviradze
 632: PPUSH
 633: LD_EXP 1
 637: NOT
 638: PPUSH
 639: LD_EXP 2
 643: PPUSH
 644: CALL 25263 0 3
 648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 649: LD_ADDR_EXP 41
 653: PUSH
 654: LD_STRING Kurt
 656: PPUSH
 657: LD_EXP 1
 661: NOT
 662: PPUSH
 663: LD_EXP 2
 667: PPUSH
 668: CALL 25263 0 3
 672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 673: LD_ADDR_EXP 32
 677: PUSH
 678: LD_STRING Mike
 680: PPUSH
 681: LD_EXP 1
 685: NOT
 686: PPUSH
 687: LD_EXP 2
 691: PPUSH
 692: CALL 25263 0 3
 696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 697: LD_ADDR_EXP 39
 701: PUSH
 702: LD_STRING Olaf
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: LD_STRING 
 710: PPUSH
 711: CALL 25263 0 3
 715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 716: LD_ADDR_EXP 45
 720: PUSH
 721: LD_STRING 05_others
 723: PPUSH
 724: CALL_OW 31
 728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 729: LD_ADDR_EXP 46
 733: PUSH
 734: LD_STRING 05_apes
 736: PPUSH
 737: CALL_OW 31
 741: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 742: LD_ADDR_VAR 0 5
 746: PUSH
 747: LD_STRING 05_Radar
 749: PPUSH
 750: LD_EXP 1
 754: PPUSH
 755: CALL_OW 30
 759: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 760: LD_ADDR_VAR 0 6
 764: PUSH
 765: LD_STRING 05_RemoteControl
 767: PPUSH
 768: LD_EXP 1
 772: PPUSH
 773: CALL_OW 30
 777: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 778: LD_ADDR_VAR 0 7
 782: PUSH
 783: LD_STRING 05_DrugsTested
 785: PPUSH
 786: LD_EXP 1
 790: PPUSH
 791: CALL_OW 30
 795: ST_TO_ADDR
// if hasDrugs then
 796: LD_VAR 0 7
 800: IFFALSE 815
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 802: LD_INT 5
 804: PPUSH
 805: LD_INT 2
 807: PPUSH
 808: LD_INT 2
 810: PPUSH
 811: CALL_OW 322
// if hasRadar then
 815: LD_VAR 0 5
 819: IFFALSE 834
// SetTech ( tech_radar , 2 , state_researched ) ;
 821: LD_INT 6
 823: PPUSH
 824: LD_INT 2
 826: PPUSH
 827: LD_INT 2
 829: PPUSH
 830: CALL_OW 322
// if hasRemote then
 834: LD_VAR 0 6
 838: IFFALSE 853
// SetTech ( tech_remCont , 2 , state_researched ) ;
 840: LD_INT 15
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 2
 848: PPUSH
 849: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 853: LD_ADDR_VAR 0 12
 857: PUSH
 858: LD_INT 5
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 517
 868: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_VAR 0 12
 883: PUSH
 884: LD_INT 1
 886: ARRAY
 887: PUSH
 888: FOR_TO
 889: IFFALSE 966
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 891: LD_VAR 0 12
 895: PUSH
 896: LD_INT 1
 898: ARRAY
 899: PUSH
 900: LD_VAR 0 2
 904: ARRAY
 905: PPUSH
 906: LD_VAR 0 12
 910: PUSH
 911: LD_INT 2
 913: ARRAY
 914: PUSH
 915: LD_VAR 0 2
 919: ARRAY
 920: PPUSH
 921: CALL_OW 351
 925: IFFALSE 964
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 927: LD_VAR 0 12
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PUSH
 936: LD_VAR 0 2
 940: ARRAY
 941: PPUSH
 942: LD_VAR 0 12
 946: PUSH
 947: LD_INT 2
 949: ARRAY
 950: PUSH
 951: LD_VAR 0 2
 955: ARRAY
 956: PPUSH
 957: LD_INT 2
 959: PPUSH
 960: CALL_OW 244
 964: GO 888
 966: POP
 967: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 0
 975: PUSH
 976: LD_INT 206
 978: PUSH
 979: LD_INT 80
 981: PUSH
 982: LD_INT 1
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 32
 993: PUSH
 994: LD_INT 221
 996: PUSH
 997: LD_INT 95
 999: PUSH
1000: LD_INT 5
1002: PUSH
1003: LD_INT 23
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_INT 32
1015: PUSH
1016: LD_INT 223
1018: PUSH
1019: LD_INT 88
1021: PUSH
1022: LD_INT 5
1024: PUSH
1025: LD_INT 24
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 32
1037: PUSH
1038: LD_INT 202
1040: PUSH
1041: LD_INT 64
1043: PUSH
1044: LD_INT 2
1046: PUSH
1047: LD_INT 25
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 3
1059: PUSH
1060: LD_INT 203
1062: PUSH
1063: LD_INT 91
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 8
1077: PUSH
1078: LD_INT 217
1080: PUSH
1081: LD_INT 78
1083: PUSH
1084: LD_INT 4
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 27
1095: PUSH
1096: LD_INT 220
1098: PUSH
1099: LD_INT 99
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 27
1113: PUSH
1114: LD_INT 220
1116: PUSH
1117: LD_INT 103
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 27
1131: PUSH
1132: LD_INT 216
1134: PUSH
1135: LD_INT 102
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: PUSH
1147: LD_INT 17
1149: PUSH
1150: LD_INT 203
1152: PUSH
1153: LD_INT 94
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 23
1167: PUSH
1168: LD_INT 200
1170: PUSH
1171: LD_INT 88
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 16
1185: PUSH
1186: LD_INT 199
1188: PUSH
1189: LD_INT 91
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 26
1203: PUSH
1204: LD_INT 197
1206: PUSH
1207: LD_INT 81
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 26
1221: PUSH
1222: LD_INT 197
1224: PUSH
1225: LD_INT 78
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: ST_TO_ADDR
// if hasRadar then
1253: LD_VAR 0 5
1257: IFFALSE 1301
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_VAR 0 4
1268: PPUSH
1269: LD_VAR 0 4
1273: PUSH
1274: LD_INT 1
1276: PLUS
1277: PPUSH
1278: LD_INT 20
1280: PUSH
1281: LD_INT 203
1283: PUSH
1284: LD_INT 87
1286: PUSH
1287: LD_INT 3
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PPUSH
1296: CALL_OW 1
1300: ST_TO_ADDR
// if hasRemote then
1301: LD_VAR 0 6
1305: IFFALSE 1349
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1307: LD_ADDR_VAR 0 4
1311: PUSH
1312: LD_VAR 0 4
1316: PPUSH
1317: LD_VAR 0 4
1321: PUSH
1322: LD_INT 1
1324: PLUS
1325: PPUSH
1326: LD_INT 22
1328: PUSH
1329: LD_INT 207
1331: PUSH
1332: LD_INT 95
1334: PUSH
1335: LD_INT 5
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PPUSH
1344: CALL_OW 1
1348: ST_TO_ADDR
// for i in base do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: LD_VAR 0 4
1358: PUSH
1359: FOR_IN
1360: IFFALSE 1541
// begin bc_type := i [ 1 ] ;
1362: LD_ADDR_OWVAR 42
1366: PUSH
1367: LD_VAR 0 2
1371: PUSH
1372: LD_INT 1
1374: ARRAY
1375: ST_TO_ADDR
// bc_level := 3 ;
1376: LD_ADDR_OWVAR 43
1380: PUSH
1381: LD_INT 3
1383: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1384: LD_VAR 0 2
1388: PUSH
1389: LD_INT 1
1391: ARRAY
1392: PUSH
1393: LD_INT 8
1395: EQUAL
1396: IFFALSE 1431
// begin bc_kind1 := b_lab_weapon ;
1398: LD_ADDR_OWVAR 44
1402: PUSH
1403: LD_INT 10
1405: ST_TO_ADDR
// if hasRadar then
1406: LD_VAR 0 5
1410: IFFALSE 1422
// bc_kind2 := b_lab_opto else
1412: LD_ADDR_OWVAR 45
1416: PUSH
1417: LD_INT 15
1419: ST_TO_ADDR
1420: GO 1431
// bc_kind2 := - 1 ;
1422: LD_ADDR_OWVAR 45
1426: PUSH
1427: LD_INT 1
1429: NEG
1430: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: PPUSH
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 3
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 2
1458: PUSH
1459: LD_INT 4
1461: ARRAY
1462: PPUSH
1463: CALL_OW 47
1467: ST_TO_ADDR
// if i > 4 then
1468: LD_VAR 0 2
1472: PUSH
1473: LD_INT 4
1475: GREATER
1476: IFFALSE 1496
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1478: LD_VAR 0 3
1482: PPUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 5
1490: ARRAY
1491: PPUSH
1492: CALL_OW 431
// if i [ 1 ] = b_bunker then
1496: LD_VAR 0 2
1500: PUSH
1501: LD_INT 1
1503: ARRAY
1504: PUSH
1505: LD_INT 32
1507: EQUAL
1508: IFFALSE 1539
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1510: LD_ADDR_VAR 0 11
1514: PUSH
1515: LD_VAR 0 11
1519: PPUSH
1520: LD_VAR 0 11
1524: PUSH
1525: LD_INT 1
1527: PLUS
1528: PPUSH
1529: LD_VAR 0 3
1533: PPUSH
1534: CALL_OW 1
1538: ST_TO_ADDR
// end ;
1539: GO 1359
1541: POP
1542: POP
// depot := HexInfo ( 206 , 80 ) ;
1543: LD_ADDR_VAR 0 9
1547: PUSH
1548: LD_INT 206
1550: PPUSH
1551: LD_INT 80
1553: PPUSH
1554: CALL_OW 428
1558: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1559: LD_ADDR_VAR 0 8
1563: PUSH
1564: LD_INT 203
1566: PPUSH
1567: LD_INT 91
1569: PPUSH
1570: CALL_OW 428
1574: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1575: LD_ADDR_VAR 0 10
1579: PUSH
1580: LD_INT 217
1582: PPUSH
1583: LD_INT 78
1585: PPUSH
1586: CALL_OW 428
1590: ST_TO_ADDR
// arDepot := depot ;
1591: LD_ADDR_EXP 44
1595: PUSH
1596: LD_VAR 0 9
1600: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 , 120 ] [ Difficulty ] ) ;
1601: LD_VAR 0 9
1605: PPUSH
1606: CALL_OW 274
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 360
1616: PUSH
1617: LD_INT 260
1619: PUSH
1620: LD_INT 160
1622: PUSH
1623: LD_INT 120
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 , 100 ] [ Difficulty ] ) ;
1642: LD_VAR 0 9
1646: PPUSH
1647: CALL_OW 274
1651: PPUSH
1652: LD_INT 2
1654: PPUSH
1655: LD_INT 200
1657: PUSH
1658: LD_INT 170
1660: PUSH
1661: LD_INT 130
1663: PUSH
1664: LD_INT 100
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_OWVAR 67
1677: ARRAY
1678: PPUSH
1679: CALL_OW 277
// uc_nation := 2 ;
1683: LD_ADDR_OWVAR 21
1687: PUSH
1688: LD_INT 2
1690: ST_TO_ADDR
// uc_side := 2 ;
1691: LD_ADDR_OWVAR 20
1695: PUSH
1696: LD_INT 2
1698: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1699: LD_INT 13
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: LD_INT 1
1707: PPUSH
1708: LD_INT 27
1710: PPUSH
1711: LD_INT 33
1713: PPUSH
1714: CALL 30127 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1718: CALL_OW 45
1722: PPUSH
1723: LD_INT 190
1725: PPUSH
1726: LD_INT 64
1728: PPUSH
1729: LD_INT 5
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL 63931 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 22
1753: PPUSH
1754: CALL 30127 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1758: CALL_OW 45
1762: PPUSH
1763: LD_INT 188
1765: PPUSH
1766: LD_INT 67
1768: PPUSH
1769: LD_INT 5
1771: PPUSH
1772: LD_INT 0
1774: PPUSH
1775: CALL 63931 0 5
// if hasRemote then
1779: LD_VAR 0 6
1783: IFFALSE 1865
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1785: LD_INT 13
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 31
1796: PPUSH
1797: LD_INT 35
1799: PPUSH
1800: CALL 30127 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1804: CALL_OW 45
1808: PPUSH
1809: LD_INT 191
1811: PPUSH
1812: LD_INT 71
1814: PPUSH
1815: LD_INT 5
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL 63931 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1825: LD_INT 14
1827: PPUSH
1828: LD_INT 1
1830: PPUSH
1831: LD_INT 2
1833: PPUSH
1834: LD_INT 27
1836: PPUSH
1837: LD_INT 55
1839: PPUSH
1840: CALL 30127 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1844: CALL_OW 45
1848: PPUSH
1849: LD_INT 199
1851: PPUSH
1852: LD_INT 67
1854: PPUSH
1855: LD_INT 0
1857: PPUSH
1858: LD_INT 0
1860: PPUSH
1861: CALL 63931 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1865: LD_EXP 30
1869: PPUSH
1870: LD_INT 213
1872: PPUSH
1873: LD_INT 87
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1883: LD_EXP 30
1887: PPUSH
1888: LD_INT 214
1890: PPUSH
1891: LD_INT 87
1893: PPUSH
1894: CALL_OW 118
// if Kaia then
1898: LD_EXP 35
1902: IFFALSE 1937
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1904: LD_EXP 35
1908: PPUSH
1909: LD_INT 213
1911: PPUSH
1912: LD_INT 85
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1922: LD_EXP 35
1926: PPUSH
1927: LD_INT 215
1929: PPUSH
1930: LD_INT 87
1932: PPUSH
1933: CALL_OW 118
// end ; if Olaf and Kaia then
1937: LD_EXP 39
1941: PUSH
1942: LD_EXP 35
1946: AND
1947: IFFALSE 1984
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1949: LD_EXP 39
1953: PPUSH
1954: LD_INT 215
1956: PPUSH
1957: LD_INT 87
1959: PPUSH
1960: LD_INT 0
1962: PPUSH
1963: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1967: LD_EXP 39
1971: PPUSH
1972: LD_INT 213
1974: PPUSH
1975: LD_INT 85
1977: PPUSH
1978: CALL_OW 118
// end else
1982: GO 2004
// if Olaf then
1984: LD_EXP 39
1988: IFFALSE 2004
// PlaceHumanInUnit ( Olaf , factory ) ;
1990: LD_EXP 39
1994: PPUSH
1995: LD_VAR 0 8
1999: PPUSH
2000: CALL_OW 52
// if Givi then
2004: LD_EXP 31
2008: IFFALSE 2089
// begin if Kaia and Olaf then
2010: LD_EXP 35
2014: PUSH
2015: LD_EXP 39
2019: AND
2020: IFFALSE 2057
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2022: LD_EXP 31
2026: PPUSH
2027: LD_INT 247
2029: PPUSH
2030: LD_INT 117
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2040: LD_EXP 31
2044: PPUSH
2045: LD_INT 248
2047: PPUSH
2048: LD_INT 118
2050: PPUSH
2051: CALL_OW 118
// end else
2055: GO 2089
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2057: LD_EXP 31
2061: PPUSH
2062: LD_INT 216
2064: PPUSH
2065: LD_INT 88
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2075: LD_EXP 31
2079: PPUSH
2080: LD_EXP 30
2084: PPUSH
2085: CALL_OW 119
// end ; end ; if Kurt then
2089: LD_EXP 41
2093: IFFALSE 2113
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2095: LD_EXP 41
2099: PPUSH
2100: LD_VAR 0 11
2104: PUSH
2105: LD_INT 2
2107: ARRAY
2108: PPUSH
2109: CALL_OW 52
// if Mike then
2113: LD_EXP 32
2117: IFFALSE 2137
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2119: LD_EXP 32
2123: PPUSH
2124: LD_VAR 0 11
2128: PUSH
2129: LD_INT 3
2131: ARRAY
2132: PPUSH
2133: CALL_OW 52
// if Kamil then
2137: LD_EXP 34
2141: IFFALSE 2203
// begin if Kaia and Olaf then
2143: LD_EXP 35
2147: PUSH
2148: LD_EXP 39
2152: AND
2153: IFFALSE 2171
// PlaceHumanInUnit ( Kamil , depot ) else
2155: LD_EXP 34
2159: PPUSH
2160: LD_VAR 0 9
2164: PPUSH
2165: CALL_OW 52
2169: GO 2203
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2171: LD_EXP 34
2175: PPUSH
2176: LD_INT 213
2178: PPUSH
2179: LD_INT 87
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2189: LD_EXP 34
2193: PPUSH
2194: LD_EXP 30
2198: PPUSH
2199: CALL_OW 119
// end ; end ; if Sophia then
2203: LD_EXP 36
2207: IFFALSE 2223
// PlaceHumanInUnit ( Sophia , depot ) ;
2209: LD_EXP 36
2213: PPUSH
2214: LD_VAR 0 9
2218: PPUSH
2219: CALL_OW 52
// if Aviradze then
2223: LD_EXP 42
2227: IFFALSE 2243
// PlaceHumanInUnit ( Aviradze , lab ) ;
2229: LD_EXP 42
2233: PPUSH
2234: LD_VAR 0 10
2238: PPUSH
2239: CALL_OW 52
// if Ibrahim then
2243: LD_EXP 33
2247: IFFALSE 2263
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2249: LD_EXP 33
2253: PPUSH
2254: LD_VAR 0 10
2258: PPUSH
2259: CALL_OW 52
// if Markov then
2263: LD_EXP 37
2267: IFFALSE 2283
// PlaceHumanInUnit ( Markov , factory ) ;
2269: LD_EXP 37
2273: PPUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: CALL_OW 52
// if heikeSecondSquad then
2283: LD_EXP 45
2287: IFFALSE 2327
// for i in heikeSecondSquad do
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 45
2298: PUSH
2299: FOR_IN
2300: IFFALSE 2325
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2302: LD_VAR 0 2
2306: PPUSH
2307: LD_INT 190
2309: PPUSH
2310: LD_INT 65
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: LD_INT 0
2318: PPUSH
2319: CALL_OW 50
2323: GO 2299
2325: POP
2326: POP
// if heikeApes then
2327: LD_EXP 46
2331: IFFALSE 2371
// for i in heikeApes do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: LD_EXP 46
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2369
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_INT 190
2353: PPUSH
2354: LD_INT 70
2356: PPUSH
2357: LD_INT 5
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 50
2367: GO 2343
2369: POP
2370: POP
// end ;
2371: LD_VAR 0 1
2375: RET
// export function PrepareRolfSquad ; var i , j ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
// uc_side := 8 ;
2381: LD_ADDR_OWVAR 20
2385: PUSH
2386: LD_INT 8
2388: ST_TO_ADDR
// uc_nation := 2 ;
2389: LD_ADDR_OWVAR 21
2393: PUSH
2394: LD_INT 2
2396: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2397: LD_ADDR_EXP 43
2401: PUSH
2402: LD_STRING Bergkamp
2404: PPUSH
2405: CALL_OW 25
2409: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2410: LD_ADDR_EXP 47
2414: PUSH
2415: LD_EXP 43
2419: PUSH
2420: EMPTY
2421: LIST
2422: ST_TO_ADDR
// for i := 1 to 4 do
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: DOUBLE
2429: LD_INT 1
2431: DEC
2432: ST_TO_ADDR
2433: LD_INT 4
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2517
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2439: LD_ADDR_VAR 0 3
2443: PUSH
2444: DOUBLE
2445: LD_INT 1
2447: DEC
2448: ST_TO_ADDR
2449: LD_INT 5
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 3
2457: PUSH
2458: LD_INT 1
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: PUSH
2467: LD_VAR 0 2
2471: ARRAY
2472: PUSH
2473: FOR_TO
2474: IFFALSE 2513
// begin PrepareHuman ( false , i , 5 ) ;
2476: LD_INT 0
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: LD_INT 5
2486: PPUSH
2487: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2491: LD_ADDR_EXP 47
2495: PUSH
2496: LD_EXP 47
2500: PPUSH
2501: CALL_OW 44
2505: PPUSH
2506: CALL 62000 0 2
2510: ST_TO_ADDR
// end ;
2511: GO 2473
2513: POP
2514: POP
// end ;
2515: GO 2436
2517: POP
2518: POP
// if HexInfo ( 5 , 3 ) then
2519: LD_INT 5
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: CALL_OW 428
2529: IFFALSE 2546
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2531: LD_INT 5
2533: PPUSH
2534: LD_INT 3
2536: PPUSH
2537: CALL_OW 428
2541: PPUSH
2542: CALL_OW 64
// for i in rolfSquad do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: LD_EXP 47
2555: PUSH
2556: FOR_IN
2557: IFFALSE 2693
// begin uc_direction := 2 ;
2559: LD_ADDR_OWVAR 24
2563: PUSH
2564: LD_INT 2
2566: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2567: LD_VAR 0 2
2571: PPUSH
2572: CALL_OW 257
2576: PUSH
2577: LD_INT 3
2579: EQUAL
2580: IFFALSE 2654
// begin uc_side := 8 ;
2582: LD_ADDR_OWVAR 20
2586: PUSH
2587: LD_INT 8
2589: ST_TO_ADDR
// uc_nation := 2 ;
2590: LD_ADDR_OWVAR 21
2594: PUSH
2595: LD_INT 2
2597: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2598: LD_INT 13
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_INT 27
2609: PPUSH
2610: LD_INT 88
2612: PPUSH
2613: CALL 30127 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2617: CALL_OW 45
2621: PPUSH
2622: LD_INT 11
2624: PPUSH
2625: LD_INT 0
2627: PPUSH
2628: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2632: LD_VAR 0 2
2636: PPUSH
2637: LD_INT 5
2639: PPUSH
2640: LD_INT 3
2642: PPUSH
2643: CALL_OW 428
2647: PPUSH
2648: CALL_OW 52
// end else
2652: GO 2669
// PlaceUnitArea ( i , northSpawn , false ) ;
2654: LD_VAR 0 2
2658: PPUSH
2659: LD_INT 11
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2669: LD_VAR 0 2
2673: PPUSH
2674: LD_INT 29
2676: PPUSH
2677: LD_INT 10
2679: PPUSH
2680: CALL_OW 111
// wait ( 0 0$2 ) ;
2684: LD_INT 70
2686: PPUSH
2687: CALL_OW 67
// end ;
2691: GO 2556
2693: POP
2694: POP
// wait ( 0 0$5 ) ;
2695: LD_INT 175
2697: PPUSH
2698: CALL_OW 67
// end ;
2702: LD_VAR 0 1
2706: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2712: LD_EXP 43
2716: PPUSH
2717: LD_INT 94
2719: PPUSH
2720: LD_INT 63
2722: PPUSH
2723: CALL_OW 428
2727: PPUSH
2728: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_INT 4
2739: PUSH
2740: LD_INT 82
2742: PUSH
2743: LD_INT 64
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 31
2757: PUSH
2758: LD_INT 73
2760: PUSH
2761: LD_INT 58
2763: PUSH
2764: LD_INT 0
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// for i in tmp do
2777: LD_ADDR_VAR 0 2
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: FOR_IN
2788: IFFALSE 2852
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2790: LD_EXP 47
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 2
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: PPUSH
2810: LD_VAR 0 2
2814: PUSH
2815: LD_INT 1
2817: ARRAY
2818: PPUSH
2819: LD_VAR 0 2
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: LD_VAR 0 2
2832: PUSH
2833: LD_INT 3
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 2
2841: PUSH
2842: LD_INT 4
2844: ARRAY
2845: PPUSH
2846: CALL_OW 205
2850: GO 2787
2852: POP
2853: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2854: LD_EXP 47
2858: PUSH
2859: LD_INT 2
2861: ARRAY
2862: PPUSH
2863: LD_INT 63
2865: PPUSH
2866: LD_INT 42
2868: PPUSH
2869: CALL_OW 428
2873: PPUSH
2874: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2878: LD_EXP 47
2882: PUSH
2883: LD_INT 3
2885: ARRAY
2886: PPUSH
2887: LD_INT 94
2889: PPUSH
2890: LD_INT 63
2892: PPUSH
2893: CALL_OW 428
2897: PPUSH
2898: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2902: LD_INT 35
2904: PPUSH
2905: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2909: LD_EXP 47
2913: PPUSH
2914: LD_INT 25
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: LD_INT 3
2926: PUSH
2927: LD_INT 60
2929: PUSH
2930: EMPTY
2931: LIST
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 72
2945: IFFALSE 2902
// rolfScriptBase := true ;
2947: LD_ADDR_EXP 9
2951: PUSH
2952: LD_INT 1
2954: ST_TO_ADDR
// end ;
2955: LD_VAR 0 1
2959: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2960: LD_EXP 9
2964: PUSH
2965: LD_EXP 43
2969: PPUSH
2970: CALL_OW 255
2974: PUSH
2975: LD_INT 8
2977: EQUAL
2978: AND
2979: IFFALSE 3986
2981: GO 2983
2983: DISABLE
2984: LD_INT 0
2986: PPUSH
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
2992: PPUSH
2993: PPUSH
2994: PPUSH
2995: PPUSH
// begin enable ;
2996: ENABLE
// if not rolfSquad then
2997: LD_EXP 47
3001: NOT
3002: IFFALSE 3006
// exit ;
3004: GO 3986
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3006: LD_ADDR_VAR 0 9
3010: PUSH
3011: LD_INT 12
3013: PPUSH
3014: LD_INT 81
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 70
3028: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3029: LD_ADDR_VAR 0 5
3033: PUSH
3034: LD_EXP 47
3038: PPUSH
3039: LD_INT 25
3041: PUSH
3042: LD_INT 1
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 72
3053: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3054: LD_ADDR_VAR 0 6
3058: PUSH
3059: LD_EXP 47
3063: PPUSH
3064: LD_INT 25
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PPUSH
3074: CALL_OW 72
3078: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3079: LD_ADDR_VAR 0 8
3083: PUSH
3084: LD_EXP 47
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 3
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3104: LD_ADDR_VAR 0 7
3108: PUSH
3109: LD_EXP 47
3113: PPUSH
3114: LD_INT 25
3116: PUSH
3117: LD_INT 4
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 72
3128: ST_TO_ADDR
// if sol then
3129: LD_VAR 0 5
3133: IFFALSE 3431
// for i in sol union Rolf do
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_VAR 0 5
3144: PUSH
3145: LD_EXP 43
3149: UNION
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3429
// if not IsInUnit ( i ) and not HasTask ( i ) then
3154: LD_VAR 0 1
3158: PPUSH
3159: CALL_OW 310
3163: NOT
3164: PUSH
3165: LD_VAR 0 1
3169: PPUSH
3170: CALL_OW 314
3174: NOT
3175: AND
3176: IFFALSE 3427
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3178: LD_VAR 0 1
3182: PPUSH
3183: CALL_OW 256
3187: PUSH
3188: LD_INT 500
3190: LESS
3191: PUSH
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 80
3199: PPUSH
3200: LD_INT 49
3202: PPUSH
3203: CALL_OW 297
3207: PUSH
3208: LD_INT 6
3210: GREATER
3211: AND
3212: IFFALSE 3231
// begin ComMoveXY ( i , 80 , 49 ) ;
3214: LD_VAR 0 1
3218: PPUSH
3219: LD_INT 80
3221: PPUSH
3222: LD_INT 49
3224: PPUSH
3225: CALL_OW 111
// continue ;
3229: GO 3151
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3231: LD_ADDR_VAR 0 4
3235: PUSH
3236: LD_INT 22
3238: PUSH
3239: LD_INT 8
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: LD_INT 50
3248: PUSH
3249: EMPTY
3250: LIST
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 30
3267: PUSH
3268: LD_INT 5
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 32
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 30
3287: PUSH
3288: LD_INT 31
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: PPUSH
3307: CALL_OW 69
3311: ST_TO_ADDR
// if tmp then
3312: LD_VAR 0 4
3316: IFFALSE 3427
// begin for b in tmp do
3318: LD_ADDR_VAR 0 2
3322: PUSH
3323: LD_VAR 0 4
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3425
// begin case GetBType ( b ) of b_armoury , b_barracks :
3331: LD_VAR 0 2
3335: PPUSH
3336: CALL_OW 266
3340: PUSH
3341: LD_INT 4
3343: DOUBLE
3344: EQUAL
3345: IFTRUE 3355
3347: LD_INT 5
3349: DOUBLE
3350: EQUAL
3351: IFTRUE 3355
3353: GO 3366
3355: POP
// p := 6 ; b_breastwork , b_bunker :
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: LD_INT 6
3363: ST_TO_ADDR
3364: GO 3392
3366: LD_INT 31
3368: DOUBLE
3369: EQUAL
3370: IFTRUE 3380
3372: LD_INT 32
3374: DOUBLE
3375: EQUAL
3376: IFTRUE 3380
3378: GO 3391
3380: POP
// p := 1 ; end ;
3381: LD_ADDR_VAR 0 3
3385: PUSH
3386: LD_INT 1
3388: ST_TO_ADDR
3389: GO 3392
3391: POP
// if UnitsInside ( b ) < p then
3392: LD_VAR 0 2
3396: PPUSH
3397: CALL_OW 313
3401: PUSH
3402: LD_VAR 0 3
3406: LESS
3407: IFFALSE 3423
// ComEnterUnit ( i , b ) ;
3409: LD_VAR 0 1
3413: PPUSH
3414: LD_VAR 0 2
3418: PPUSH
3419: CALL_OW 120
// end ;
3423: GO 3328
3425: POP
3426: POP
// end ; end ;
3427: GO 3151
3429: POP
3430: POP
// if sci then
3431: LD_VAR 0 7
3435: IFFALSE 3490
// for i in sci do
3437: LD_ADDR_VAR 0 1
3441: PUSH
3442: LD_VAR 0 7
3446: PUSH
3447: FOR_IN
3448: IFFALSE 3488
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3450: LD_VAR 0 1
3454: PPUSH
3455: LD_INT 80
3457: PPUSH
3458: LD_INT 49
3460: PPUSH
3461: CALL_OW 297
3465: PUSH
3466: LD_INT 9
3468: GREATER
3469: IFFALSE 3486
// ComMoveXY ( i , 80 , 49 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 80
3478: PPUSH
3479: LD_INT 49
3481: PPUSH
3482: CALL_OW 111
// end ;
3486: GO 3447
3488: POP
3489: POP
// if mech then
3490: LD_VAR 0 8
3494: IFFALSE 3708
// for i in mech do
3496: LD_ADDR_VAR 0 1
3500: PUSH
3501: LD_VAR 0 8
3505: PUSH
3506: FOR_IN
3507: IFFALSE 3706
// begin hasVehicle := IsInUnit ( i ) ;
3509: LD_ADDR_VAR 0 10
3513: PUSH
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: ST_TO_ADDR
// if enemyInBase then
3524: LD_VAR 0 9
3528: IFFALSE 3624
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3530: LD_VAR 0 10
3534: PUSH
3535: LD_VAR 0 10
3539: PPUSH
3540: CALL_OW 256
3544: PUSH
3545: LD_INT 500
3547: GREATER
3548: AND
3549: IFFALSE 3577
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3551: LD_VAR 0 10
3555: PPUSH
3556: LD_VAR 0 9
3560: PPUSH
3561: LD_VAR 0 10
3565: PPUSH
3566: CALL_OW 74
3570: PPUSH
3571: CALL_OW 115
3575: GO 3622
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3577: LD_VAR 0 10
3581: PPUSH
3582: LD_INT 86
3584: PPUSH
3585: LD_INT 49
3587: PPUSH
3588: CALL_OW 297
3592: PUSH
3593: LD_INT 8
3595: GREATER
3596: IFFALSE 3622
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3598: LD_VAR 0 10
3602: PPUSH
3603: LD_INT 86
3605: PPUSH
3606: LD_INT 49
3608: PPUSH
3609: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: CALL 63611 0 1
// end end else
3622: GO 3704
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3624: LD_VAR 0 1
3628: PPUSH
3629: LD_INT 86
3631: PPUSH
3632: LD_INT 49
3634: PPUSH
3635: CALL_OW 297
3639: PUSH
3640: LD_INT 8
3642: GREATER
3643: IFFALSE 3662
// ComMoveXY ( i , 86 , 49 ) else
3645: LD_VAR 0 1
3649: PPUSH
3650: LD_INT 86
3652: PPUSH
3653: LD_INT 49
3655: PPUSH
3656: CALL_OW 111
3660: GO 3704
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3662: LD_VAR 0 10
3666: PUSH
3667: LD_VAR 0 10
3671: PPUSH
3672: CALL_OW 256
3676: PUSH
3677: LD_INT 1000
3679: LESS
3680: AND
3681: IFFALSE 3704
// begin SetFuel ( hasVehicle , 100 ) ;
3683: LD_VAR 0 10
3687: PPUSH
3688: LD_INT 100
3690: PPUSH
3691: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: CALL 63491 0 1
// end ; end ; end ;
3704: GO 3506
3706: POP
3707: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_INT 12
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 24
3721: PUSH
3722: LD_INT 1000
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 21
3735: PUSH
3736: LD_INT 3
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PPUSH
3747: CALL_OW 70
3751: ST_TO_ADDR
// if tmp and eng then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_VAR 0 6
3761: AND
3762: IFFALSE 3868
// begin for i in eng do
3764: LD_ADDR_VAR 0 1
3768: PUSH
3769: LD_VAR 0 6
3773: PUSH
3774: FOR_IN
3775: IFFALSE 3866
// if IsInUnit ( i ) then
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 310
3786: IFFALSE 3799
// ComExitBuilding ( i ) else
3788: LD_VAR 0 1
3792: PPUSH
3793: CALL_OW 122
3797: GO 3864
// if GetLives ( i ) = 1000 then
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 256
3808: PUSH
3809: LD_INT 1000
3811: EQUAL
3812: IFFALSE 3834
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3814: LD_VAR 0 1
3818: PPUSH
3819: LD_VAR 0 4
3823: PUSH
3824: LD_INT 1
3826: ARRAY
3827: PPUSH
3828: CALL_OW 130
3832: GO 3864
// if GetLives ( i ) < 700 then
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 256
3843: PUSH
3844: LD_INT 700
3846: LESS
3847: IFFALSE 3864
// ComMoveXY ( i , 80 , 49 ) ;
3849: LD_VAR 0 1
3853: PPUSH
3854: LD_INT 80
3856: PPUSH
3857: LD_INT 49
3859: PPUSH
3860: CALL_OW 111
3864: GO 3774
3866: POP
3867: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3868: LD_VAR 0 4
3872: NOT
3873: PUSH
3874: LD_VAR 0 6
3878: PPUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 54
3884: PUSH
3885: EMPTY
3886: LIST
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: CALL_OW 72
3896: AND
3897: IFFALSE 3986
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3899: LD_ADDR_VAR 0 1
3903: PUSH
3904: LD_VAR 0 6
3908: PPUSH
3909: LD_INT 3
3911: PUSH
3912: LD_INT 54
3914: PUSH
3915: EMPTY
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PPUSH
3922: CALL_OW 72
3926: PUSH
3927: FOR_IN
3928: IFFALSE 3984
// if GetLives ( i ) < 1000 then
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 256
3939: PUSH
3940: LD_INT 1000
3942: LESS
3943: IFFALSE 3962
// ComMoveXY ( i , 80 , 49 ) else
3945: LD_VAR 0 1
3949: PPUSH
3950: LD_INT 80
3952: PPUSH
3953: LD_INT 49
3955: PPUSH
3956: CALL_OW 111
3960: GO 3982
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 86
3969: PPUSH
3970: LD_INT 54
3972: PPUSH
3973: CALL_OW 428
3977: PPUSH
3978: CALL_OW 120
3982: GO 3927
3984: POP
3985: POP
// end ;
3986: PPOPN 10
3988: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
// uc_side := 5 ;
3995: LD_ADDR_OWVAR 20
3999: PUSH
4000: LD_INT 5
4002: ST_TO_ADDR
// uc_nation := 2 ;
4003: LD_ADDR_OWVAR 21
4007: PUSH
4008: LD_INT 2
4010: ST_TO_ADDR
// omarSquad := [ ] ;
4011: LD_ADDR_EXP 48
4015: PUSH
4016: EMPTY
4017: ST_TO_ADDR
// for i := 1 to 4 do
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: DOUBLE
4024: LD_INT 1
4026: DEC
4027: ST_TO_ADDR
4028: LD_INT 4
4030: PUSH
4031: FOR_TO
4032: IFFALSE 4155
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4034: LD_ADDR_VAR 0 3
4038: PUSH
4039: DOUBLE
4040: LD_INT 1
4042: DEC
4043: ST_TO_ADDR
4044: LD_INT 6
4046: PUSH
4047: LD_INT 2
4049: PUSH
4050: LD_INT 2
4052: PUSH
4053: LD_EXP 21
4057: PLUS
4058: PUSH
4059: LD_INT 2
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: LD_VAR 0 2
4072: ARRAY
4073: PUSH
4074: FOR_TO
4075: IFFALSE 4151
// begin PrepareHuman ( false , i , 5 ) ;
4077: LD_INT 0
4079: PPUSH
4080: LD_VAR 0 2
4084: PPUSH
4085: LD_INT 5
4087: PPUSH
4088: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4092: LD_ADDR_EXP 48
4096: PUSH
4097: LD_EXP 48
4101: PPUSH
4102: CALL_OW 44
4106: PPUSH
4107: CALL 62000 0 2
4111: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4112: LD_VAR 0 2
4116: PUSH
4117: LD_INT 1
4119: EQUAL
4120: PUSH
4121: LD_INT 50
4123: PPUSH
4124: CALL_OW 13
4128: AND
4129: IFFALSE 4149
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4131: LD_EXP 48
4135: PUSH
4136: LD_EXP 48
4140: ARRAY
4141: PPUSH
4142: LD_INT 8
4144: PPUSH
4145: CALL_OW 336
// end ;
4149: GO 4074
4151: POP
4152: POP
// end ;
4153: GO 4031
4155: POP
4156: POP
// if HexInfo ( 340 , 205 ) then
4157: LD_INT 340
4159: PPUSH
4160: LD_INT 205
4162: PPUSH
4163: CALL_OW 428
4167: IFFALSE 4184
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4169: LD_INT 340
4171: PPUSH
4172: LD_INT 205
4174: PPUSH
4175: CALL_OW 428
4179: PPUSH
4180: CALL_OW 64
// p := 0 ;
4184: LD_ADDR_VAR 0 4
4188: PUSH
4189: LD_INT 0
4191: ST_TO_ADDR
// for i in omarSquad do
4192: LD_ADDR_VAR 0 2
4196: PUSH
4197: LD_EXP 48
4201: PUSH
4202: FOR_IN
4203: IFFALSE 4404
// begin uc_direction := 4 ;
4205: LD_ADDR_OWVAR 24
4209: PUSH
4210: LD_INT 4
4212: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4213: LD_VAR 0 2
4217: PPUSH
4218: CALL_OW 257
4222: PUSH
4223: LD_INT 3
4225: EQUAL
4226: PUSH
4227: LD_VAR 0 4
4231: PUSH
4232: LD_INT 2
4234: LESS
4235: AND
4236: IFFALSE 4365
// begin p := p + 1 ;
4238: LD_ADDR_VAR 0 4
4242: PUSH
4243: LD_VAR 0 4
4247: PUSH
4248: LD_INT 1
4250: PLUS
4251: ST_TO_ADDR
// uc_side := 5 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 5
4259: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4260: LD_INT 0
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: CALL_OW 12
4270: IFFALSE 4301
// begin uc_nation := 2 ;
4272: LD_ADDR_OWVAR 21
4276: PUSH
4277: LD_INT 2
4279: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4280: LD_INT 13
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: LD_INT 27
4291: PPUSH
4292: LD_INT 88
4294: PPUSH
4295: CALL 30127 0 5
// end else
4299: GO 4328
// begin uc_nation := 3 ;
4301: LD_ADDR_OWVAR 21
4305: PUSH
4306: LD_INT 3
4308: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4309: LD_INT 22
4311: PPUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: LD_INT 45
4320: PPUSH
4321: LD_INT 88
4323: PPUSH
4324: CALL 30127 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4328: CALL_OW 45
4332: PPUSH
4333: LD_INT 13
4335: PPUSH
4336: LD_INT 0
4338: PPUSH
4339: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4343: LD_VAR 0 2
4347: PPUSH
4348: LD_INT 340
4350: PPUSH
4351: LD_INT 205
4353: PPUSH
4354: CALL_OW 428
4358: PPUSH
4359: CALL_OW 52
// end else
4363: GO 4380
// PlaceUnitArea ( i , southSpawn , false ) ;
4365: LD_VAR 0 2
4369: PPUSH
4370: LD_INT 13
4372: PPUSH
4373: LD_INT 0
4375: PPUSH
4376: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4380: LD_VAR 0 2
4384: PPUSH
4385: LD_INT 333
4387: PPUSH
4388: LD_INT 210
4390: PPUSH
4391: CALL_OW 111
// wait ( 0 0$2 ) ;
4395: LD_INT 70
4397: PPUSH
4398: CALL_OW 67
// end ;
4402: GO 4202
4404: POP
4405: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4406: LD_EXP 40
4410: PPUSH
4411: LD_INT 340
4413: PPUSH
4414: LD_INT 205
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4424: LD_EXP 40
4428: PPUSH
4429: LD_INT 333
4431: PPUSH
4432: LD_INT 206
4434: PPUSH
4435: CALL_OW 111
// wait ( 0 0$2 ) ;
4439: LD_INT 70
4441: PPUSH
4442: CALL_OW 67
// ComHold ( omarSquad ) ;
4446: LD_EXP 48
4450: PPUSH
4451: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4455: LD_EXP 40
4459: PUSH
4460: LD_EXP 48
4464: PPUSH
4465: LD_INT 2
4467: PUSH
4468: LD_INT 25
4470: PUSH
4471: LD_INT 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 25
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: PPUSH
4493: CALL_OW 72
4497: UNION
4498: PUSH
4499: LD_INT 22
4501: PUSH
4502: LD_INT 5
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 21
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: UNION
4528: PPUSH
4529: LD_INT 315
4531: PPUSH
4532: LD_INT 214
4534: PPUSH
4535: CALL_OW 114
// wait ( 0 0$22 ) ;
4539: LD_INT 770
4541: PPUSH
4542: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4546: LD_EXP 48
4550: PUSH
4551: LD_EXP 40
4555: UNION
4556: PPUSH
4557: LD_INT 329
4559: PPUSH
4560: LD_INT 231
4562: PPUSH
4563: CALL_OW 114
// end ;
4567: LD_VAR 0 1
4571: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4572: LD_EXP 10
4576: IFFALSE 5659
4578: GO 4580
4580: DISABLE
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
// begin enable ;
4594: ENABLE
// if not omarSquad then
4595: LD_EXP 48
4599: NOT
4600: IFFALSE 4604
// exit ;
4602: GO 5659
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4604: LD_ADDR_VAR 0 10
4608: PUSH
4609: LD_INT 14
4611: PPUSH
4612: LD_INT 81
4614: PUSH
4615: LD_INT 5
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PPUSH
4622: CALL_OW 70
4626: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4627: LD_ADDR_VAR 0 6
4631: PUSH
4632: LD_EXP 48
4636: PPUSH
4637: LD_INT 2
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 1
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 25
4652: PUSH
4653: LD_INT 8
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 72
4669: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4670: LD_ADDR_VAR 0 7
4674: PUSH
4675: LD_EXP 48
4679: PPUSH
4680: LD_INT 25
4682: PUSH
4683: LD_INT 2
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PPUSH
4690: CALL_OW 72
4694: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4695: LD_ADDR_VAR 0 9
4699: PUSH
4700: LD_EXP 48
4704: PPUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PPUSH
4715: CALL_OW 72
4719: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4720: LD_ADDR_VAR 0 8
4724: PUSH
4725: LD_EXP 48
4729: PPUSH
4730: LD_INT 25
4732: PUSH
4733: LD_INT 4
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 72
4744: ST_TO_ADDR
// if sol then
4745: LD_VAR 0 6
4749: IFFALSE 5113
// for i in sol do
4751: LD_ADDR_VAR 0 1
4755: PUSH
4756: LD_VAR 0 6
4760: PUSH
4761: FOR_IN
4762: IFFALSE 5111
// if not HasTask ( i ) then
4764: LD_VAR 0 1
4768: PPUSH
4769: CALL_OW 314
4773: NOT
4774: IFFALSE 5109
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 310
4785: NOT
4786: PUSH
4787: LD_VAR 0 1
4791: PPUSH
4792: CALL_OW 256
4796: PUSH
4797: LD_INT 500
4799: LESS
4800: AND
4801: PUSH
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 333
4809: PPUSH
4810: LD_INT 234
4812: PPUSH
4813: CALL_OW 297
4817: PUSH
4818: LD_INT 6
4820: GREATER
4821: AND
4822: IFFALSE 4841
// begin ComMoveXY ( i , 333 , 234 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 333
4831: PPUSH
4832: LD_INT 234
4834: PPUSH
4835: CALL_OW 111
// continue ;
4839: GO 4761
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4841: LD_ADDR_VAR 0 5
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 5
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 58
4858: PUSH
4859: EMPTY
4860: LIST
4861: PUSH
4862: LD_INT 50
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 30
4873: PUSH
4874: LD_INT 32
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 30
4883: PUSH
4884: LD_INT 31
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 69
4906: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4907: LD_VAR 0 5
4911: PUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 310
4921: PPUSH
4922: CALL_OW 266
4926: PUSH
4927: LD_INT 31
4929: NONEQUAL
4930: AND
4931: IFFALSE 5013
// begin for j in tmp do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: LD_VAR 0 5
4942: PUSH
4943: FOR_IN
4944: IFFALSE 5009
// if GetTag ( j ) <> 1 then
4946: LD_VAR 0 2
4950: PPUSH
4951: CALL_OW 110
4955: PUSH
4956: LD_INT 1
4958: NONEQUAL
4959: IFFALSE 5007
// begin SetTag ( j , 1 ) ;
4961: LD_VAR 0 2
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: CALL_OW 109
// if IsInUnit ( i ) then
4973: LD_VAR 0 1
4977: PPUSH
4978: CALL_OW 310
4982: IFFALSE 4993
// ComExit ( i ) ;
4984: LD_VAR 0 1
4988: PPUSH
4989: CALL 62388 0 1
// AddComEnterUnit ( i , j ) ;
4993: LD_VAR 0 1
4997: PPUSH
4998: LD_VAR 0 2
5002: PPUSH
5003: CALL_OW 180
// end ;
5007: GO 4943
5009: POP
5010: POP
// end else
5011: GO 5109
// if not IsInUnit ( i ) then
5013: LD_VAR 0 1
5017: PPUSH
5018: CALL_OW 310
5022: NOT
5023: IFFALSE 5109
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5025: LD_ADDR_VAR 0 5
5029: PUSH
5030: LD_INT 22
5032: PUSH
5033: LD_INT 5
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 50
5042: PUSH
5043: EMPTY
5044: LIST
5045: PUSH
5046: LD_INT 30
5048: PUSH
5049: LD_INT 4
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: PPUSH
5061: CALL_OW 69
5065: ST_TO_ADDR
// if tmp then
5066: LD_VAR 0 5
5070: IFFALSE 5109
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5072: LD_VAR 0 5
5076: PUSH
5077: LD_INT 1
5079: ARRAY
5080: PPUSH
5081: CALL_OW 313
5085: PUSH
5086: LD_INT 6
5088: LESS
5089: IFFALSE 5109
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5091: LD_VAR 0 1
5095: PPUSH
5096: LD_VAR 0 5
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PPUSH
5105: CALL_OW 120
// end ; end ;
5109: GO 4761
5111: POP
5112: POP
// if sci then
5113: LD_VAR 0 8
5117: IFFALSE 5172
// for i in sci do
5119: LD_ADDR_VAR 0 1
5123: PUSH
5124: LD_VAR 0 8
5128: PUSH
5129: FOR_IN
5130: IFFALSE 5170
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_INT 333
5139: PPUSH
5140: LD_INT 234
5142: PPUSH
5143: CALL_OW 297
5147: PUSH
5148: LD_INT 9
5150: GREATER
5151: IFFALSE 5168
// ComMoveXY ( i , 333 , 234 ) ;
5153: LD_VAR 0 1
5157: PPUSH
5158: LD_INT 333
5160: PPUSH
5161: LD_INT 234
5163: PPUSH
5164: CALL_OW 111
// end ;
5168: GO 5129
5170: POP
5171: POP
// if mech then
5172: LD_VAR 0 9
5176: IFFALSE 5381
// for i in mech do
5178: LD_ADDR_VAR 0 1
5182: PUSH
5183: LD_VAR 0 9
5187: PUSH
5188: FOR_IN
5189: IFFALSE 5379
// begin hasVehicle := IsInUnit ( i ) ;
5191: LD_ADDR_VAR 0 11
5195: PUSH
5196: LD_VAR 0 1
5200: PPUSH
5201: CALL_OW 310
5205: ST_TO_ADDR
// if enemyInBase then
5206: LD_VAR 0 10
5210: IFFALSE 5297
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5212: LD_VAR 0 11
5216: PUSH
5217: LD_VAR 0 11
5221: PPUSH
5222: CALL_OW 256
5226: PUSH
5227: LD_INT 500
5229: GREATER
5230: AND
5231: IFFALSE 5259
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5233: LD_VAR 0 11
5237: PPUSH
5238: LD_VAR 0 10
5242: PPUSH
5243: LD_VAR 0 11
5247: PPUSH
5248: CALL_OW 74
5252: PPUSH
5253: CALL_OW 115
5257: GO 5295
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5259: LD_VAR 0 11
5263: PPUSH
5264: LD_INT 333
5266: PPUSH
5267: LD_INT 234
5269: PPUSH
5270: CALL_OW 297
5274: PUSH
5275: LD_INT 6
5277: GREATER
5278: IFFALSE 5295
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5280: LD_VAR 0 11
5284: PPUSH
5285: LD_INT 333
5287: PPUSH
5288: LD_INT 234
5290: PPUSH
5291: CALL_OW 111
// end else
5295: GO 5377
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 333
5304: PPUSH
5305: LD_INT 234
5307: PPUSH
5308: CALL_OW 297
5312: PUSH
5313: LD_INT 6
5315: GREATER
5316: IFFALSE 5335
// ComMoveXY ( i , 333 , 234 ) else
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 333
5325: PPUSH
5326: LD_INT 234
5328: PPUSH
5329: CALL_OW 111
5333: GO 5377
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5335: LD_VAR 0 11
5339: PUSH
5340: LD_VAR 0 11
5344: PPUSH
5345: CALL_OW 256
5349: PUSH
5350: LD_INT 1000
5352: LESS
5353: AND
5354: IFFALSE 5377
// begin SetFuel ( hasVehicle , 100 ) ;
5356: LD_VAR 0 11
5360: PPUSH
5361: LD_INT 100
5363: PPUSH
5364: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5368: LD_VAR 0 1
5372: PPUSH
5373: CALL 63491 0 1
// end ; end ; end ;
5377: GO 5188
5379: POP
5380: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 14
5388: PPUSH
5389: LD_INT 3
5391: PUSH
5392: LD_INT 24
5394: PUSH
5395: LD_INT 1000
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 21
5408: PUSH
5409: LD_INT 3
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 70
5424: ST_TO_ADDR
// if tmp and eng then
5425: LD_VAR 0 5
5429: PUSH
5430: LD_VAR 0 7
5434: AND
5435: IFFALSE 5541
// begin for i in eng do
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_VAR 0 7
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5539
// if IsInUnit ( i ) then
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 310
5459: IFFALSE 5472
// ComExitBuilding ( i ) else
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 122
5470: GO 5537
// if GetLives ( i ) = 1000 then
5472: LD_VAR 0 1
5476: PPUSH
5477: CALL_OW 256
5481: PUSH
5482: LD_INT 1000
5484: EQUAL
5485: IFFALSE 5507
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5487: LD_VAR 0 1
5491: PPUSH
5492: LD_VAR 0 5
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: CALL_OW 130
5505: GO 5537
// if GetLives ( i ) < 700 then
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 256
5516: PUSH
5517: LD_INT 700
5519: LESS
5520: IFFALSE 5537
// ComMoveXY ( i , 333 , 234 ) ;
5522: LD_VAR 0 1
5526: PPUSH
5527: LD_INT 333
5529: PPUSH
5530: LD_INT 234
5532: PPUSH
5533: CALL_OW 111
5537: GO 5447
5539: POP
5540: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5541: LD_VAR 0 5
5545: NOT
5546: PUSH
5547: LD_VAR 0 7
5551: PPUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 54
5557: PUSH
5558: EMPTY
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 72
5569: AND
5570: IFFALSE 5659
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_VAR 0 7
5581: PPUSH
5582: LD_INT 3
5584: PUSH
5585: LD_INT 54
5587: PUSH
5588: EMPTY
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 72
5599: PUSH
5600: FOR_IN
5601: IFFALSE 5657
// if GetLives ( i ) < 1000 then
5603: LD_VAR 0 1
5607: PPUSH
5608: CALL_OW 256
5612: PUSH
5613: LD_INT 1000
5615: LESS
5616: IFFALSE 5635
// ComMoveXY ( i , 333 , 234 ) else
5618: LD_VAR 0 1
5622: PPUSH
5623: LD_INT 333
5625: PPUSH
5626: LD_INT 234
5628: PPUSH
5629: CALL_OW 111
5633: GO 5655
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_INT 341
5642: PPUSH
5643: LD_INT 232
5645: PPUSH
5646: CALL_OW 428
5650: PPUSH
5651: CALL_OW 120
5655: GO 5600
5657: POP
5658: POP
// end ;
5659: PPOPN 11
5661: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5662: LD_EXP 40
5666: PPUSH
5667: CALL_OW 256
5671: PUSH
5672: LD_INT 1000
5674: LESS
5675: IFFALSE 5693
5677: GO 5679
5679: DISABLE
// begin enable ;
5680: ENABLE
// SetLives ( Omar , 1000 ) ;
5681: LD_EXP 40
5685: PPUSH
5686: LD_INT 1000
5688: PPUSH
5689: CALL_OW 234
// end ;
5693: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5694: LD_EXP 23
5698: IFFALSE 6574
5700: GO 5702
5702: DISABLE
5703: LD_INT 0
5705: PPUSH
5706: PPUSH
// begin wait ( 0 0$25 ) ;
5707: LD_INT 875
5709: PPUSH
5710: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5714: LD_EXP 48
5718: PPUSH
5719: LD_INT 2
5721: PUSH
5722: LD_INT 25
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: PUSH
5732: LD_INT 25
5734: PUSH
5735: LD_INT 8
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 72
5751: PPUSH
5752: CALL_OW 122
// wait ( 0 0$3 ) ;
5756: LD_INT 105
5758: PPUSH
5759: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5763: LD_EXP 48
5767: PUSH
5768: LD_EXP 40
5772: UNION
5773: PPUSH
5774: LD_INT 225
5776: PPUSH
5777: LD_INT 223
5779: PPUSH
5780: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5784: LD_INT 22
5786: PUSH
5787: LD_INT 5
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: LD_INT 2
5796: PUSH
5797: LD_INT 25
5799: PUSH
5800: LD_INT 1
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 25
5809: PUSH
5810: LD_INT 8
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 2
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PPUSH
5842: LD_INT 167
5844: PPUSH
5845: LD_INT 231
5847: PPUSH
5848: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5852: LD_EXP 48
5856: PPUSH
5857: LD_INT 25
5859: PUSH
5860: LD_INT 4
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PPUSH
5867: CALL_OW 72
5871: PPUSH
5872: LD_INT 222
5874: PPUSH
5875: LD_INT 229
5877: PPUSH
5878: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_EXP 48
5898: PUSH
5899: LD_INT 22
5901: PUSH
5902: LD_INT 5
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 21
5911: PUSH
5912: LD_INT 2
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PPUSH
5923: CALL_OW 69
5927: UNION
5928: PUSH
5929: FOR_IN
5930: IFFALSE 6565
// begin if IsDead ( i ) then
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 301
5941: IFFALSE 5961
// begin omarSquad := omarSquad diff i ;
5943: LD_ADDR_EXP 48
5947: PUSH
5948: LD_EXP 48
5952: PUSH
5953: LD_VAR 0 1
5957: DIFF
5958: ST_TO_ADDR
// continue ;
5959: GO 5929
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5961: LD_VAR 0 1
5965: PPUSH
5966: CALL_OW 257
5970: PUSH
5971: LD_INT 1
5973: PUSH
5974: LD_INT 8
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: IN
5981: IFFALSE 6175
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5983: LD_VAR 0 1
5987: PPUSH
5988: CALL_OW 256
5992: PUSH
5993: LD_INT 700
5995: LESS
5996: PUSH
5997: LD_VAR 0 1
6001: PPUSH
6002: CALL_OW 110
6006: PUSH
6007: LD_INT 0
6009: EQUAL
6010: AND
6011: IFFALSE 6040
// begin SetTag ( i , 1 ) ;
6013: LD_VAR 0 1
6017: PPUSH
6018: LD_INT 1
6020: PPUSH
6021: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6025: LD_VAR 0 1
6029: PPUSH
6030: LD_INT 222
6032: PPUSH
6033: LD_INT 229
6035: PPUSH
6036: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6040: LD_VAR 0 1
6044: PPUSH
6045: CALL_OW 256
6049: PUSH
6050: LD_INT 1000
6052: EQUAL
6053: PUSH
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 110
6063: PUSH
6064: LD_INT 1
6066: EQUAL
6067: AND
6068: IFFALSE 6082
// SetTag ( i , 0 ) ;
6070: LD_VAR 0 1
6074: PPUSH
6075: LD_INT 0
6077: PPUSH
6078: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 110
6091: PUSH
6092: LD_INT 0
6094: EQUAL
6095: PUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 256
6105: PUSH
6106: LD_INT 700
6108: GREATEREQUAL
6109: AND
6110: PUSH
6111: LD_VAR 0 1
6115: PPUSH
6116: CALL_OW 314
6120: NOT
6121: AND
6122: IFFALSE 6175
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6124: LD_INT 18
6126: PPUSH
6127: LD_INT 22
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 70
6141: IFFALSE 6160
// ComAgressiveMove ( i , 167 , 231 ) else
6143: LD_VAR 0 1
6147: PPUSH
6148: LD_INT 167
6150: PPUSH
6151: LD_INT 231
6153: PPUSH
6154: CALL_OW 114
6158: GO 6175
// ComAgressiveMove ( i , 106 , 153 ) ;
6160: LD_VAR 0 1
6164: PPUSH
6165: LD_INT 106
6167: PPUSH
6168: LD_INT 153
6170: PPUSH
6171: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6175: LD_VAR 0 1
6179: PPUSH
6180: CALL_OW 247
6184: PUSH
6185: LD_INT 2
6187: EQUAL
6188: IFFALSE 6563
// begin nearestPoint := [ 219 , 219 ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_INT 219
6197: PUSH
6198: LD_INT 219
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6205: LD_VAR 0 1
6209: PPUSH
6210: LD_INT 156
6212: PPUSH
6213: LD_INT 202
6215: PPUSH
6216: CALL_OW 297
6220: PUSH
6221: LD_VAR 0 1
6225: PPUSH
6226: LD_INT 219
6228: PPUSH
6229: LD_INT 219
6231: PPUSH
6232: CALL_OW 297
6236: LESS
6237: IFFALSE 6254
// nearestPoint := [ 156 , 202 ] ;
6239: LD_ADDR_VAR 0 2
6243: PUSH
6244: LD_INT 156
6246: PUSH
6247: LD_INT 202
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 256
6263: PUSH
6264: LD_INT 700
6266: LESS
6267: PUSH
6268: LD_VAR 0 1
6272: PPUSH
6273: CALL_OW 110
6277: PUSH
6278: LD_INT 0
6280: EQUAL
6281: AND
6282: IFFALSE 6323
// begin SetTag ( i , 1 ) ;
6284: LD_VAR 0 1
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6296: LD_VAR 0 1
6300: PPUSH
6301: LD_VAR 0 2
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 2
6314: PUSH
6315: LD_INT 2
6317: ARRAY
6318: PPUSH
6319: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6323: LD_VAR 0 1
6327: PPUSH
6328: CALL_OW 256
6332: PUSH
6333: LD_INT 700
6335: LESS
6336: PUSH
6337: LD_VAR 0 1
6341: PPUSH
6342: CALL_OW 110
6346: PUSH
6347: LD_INT 1
6349: EQUAL
6350: AND
6351: PUSH
6352: LD_VAR 0 1
6356: PPUSH
6357: CALL_OW 311
6361: AND
6362: PUSH
6363: LD_VAR 0 1
6367: PPUSH
6368: LD_VAR 0 2
6372: PUSH
6373: LD_INT 1
6375: ARRAY
6376: PPUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 2
6384: ARRAY
6385: PPUSH
6386: CALL_OW 297
6390: PUSH
6391: LD_INT 10
6393: LESS
6394: AND
6395: IFFALSE 6406
// ComRepairVehicleAndReturn ( i ) ;
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL 63491 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6406: LD_VAR 0 1
6410: PPUSH
6411: CALL_OW 256
6415: PUSH
6416: LD_INT 1000
6418: EQUAL
6419: PUSH
6420: LD_VAR 0 1
6424: PPUSH
6425: CALL_OW 110
6429: PUSH
6430: LD_INT 1
6432: EQUAL
6433: AND
6434: PUSH
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 311
6444: AND
6445: IFFALSE 6459
// SetTag ( i , 0 ) ;
6447: LD_VAR 0 1
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6459: LD_VAR 0 1
6463: PPUSH
6464: CALL_OW 110
6468: PUSH
6469: LD_INT 0
6471: EQUAL
6472: PUSH
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 256
6482: PUSH
6483: LD_INT 700
6485: GREATEREQUAL
6486: AND
6487: PUSH
6488: LD_VAR 0 1
6492: PPUSH
6493: CALL_OW 311
6497: AND
6498: PUSH
6499: LD_VAR 0 1
6503: PPUSH
6504: CALL_OW 314
6508: NOT
6509: AND
6510: IFFALSE 6563
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6512: LD_INT 18
6514: PPUSH
6515: LD_INT 22
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 70
6529: IFFALSE 6548
// ComAgressiveMove ( i , 167 , 231 ) else
6531: LD_VAR 0 1
6535: PPUSH
6536: LD_INT 167
6538: PPUSH
6539: LD_INT 231
6541: PPUSH
6542: CALL_OW 114
6546: GO 6563
// ComAgressiveMove ( i , 106 , 153 ) ;
6548: LD_VAR 0 1
6552: PPUSH
6553: LD_INT 106
6555: PPUSH
6556: LD_INT 153
6558: PPUSH
6559: CALL_OW 114
// end ; end ;
6563: GO 5929
6565: POP
6566: POP
// until not omarSquad ;
6567: LD_EXP 48
6571: NOT
6572: IFFALSE 5882
// end ; end_of_file
6574: PPOPN 2
6576: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6577: LD_INT 0
6579: PPUSH
// uc_side := side ;
6580: LD_ADDR_OWVAR 20
6584: PUSH
6585: LD_VAR 0 1
6589: ST_TO_ADDR
// uc_nation := nation ;
6590: LD_ADDR_OWVAR 21
6594: PUSH
6595: LD_VAR 0 2
6599: ST_TO_ADDR
// vc_chassis := chassis ;
6600: LD_ADDR_OWVAR 37
6604: PUSH
6605: LD_VAR 0 3
6609: ST_TO_ADDR
// vc_engine := engine ;
6610: LD_ADDR_OWVAR 39
6614: PUSH
6615: LD_VAR 0 4
6619: ST_TO_ADDR
// vc_control := control ;
6620: LD_ADDR_OWVAR 38
6624: PUSH
6625: LD_VAR 0 5
6629: ST_TO_ADDR
// vc_weapon := weapon ;
6630: LD_ADDR_OWVAR 40
6634: PUSH
6635: LD_VAR 0 6
6639: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6640: LD_ADDR_OWVAR 41
6644: PUSH
6645: LD_VAR 0 7
6649: ST_TO_ADDR
// result := CreateVehicle ;
6650: LD_ADDR_VAR 0 8
6654: PUSH
6655: CALL_OW 45
6659: ST_TO_ADDR
// end ;
6660: LD_VAR 0 8
6664: RET
// export function SayX ( units , ident ) ; var i ; begin
6665: LD_INT 0
6667: PPUSH
6668: PPUSH
// result := false ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: LD_INT 0
6676: ST_TO_ADDR
// if not units then
6677: LD_VAR 0 1
6681: NOT
6682: IFFALSE 6686
// exit ;
6684: GO 6740
// for i in units do
6686: LD_ADDR_VAR 0 4
6690: PUSH
6691: LD_VAR 0 1
6695: PUSH
6696: FOR_IN
6697: IFFALSE 6738
// if IsOk ( i ) then
6699: LD_VAR 0 4
6703: PPUSH
6704: CALL_OW 302
6708: IFFALSE 6736
// begin Say ( i , ident ) ;
6710: LD_VAR 0 4
6714: PPUSH
6715: LD_VAR 0 2
6719: PPUSH
6720: CALL_OW 88
// result := i ;
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: LD_VAR 0 4
6733: ST_TO_ADDR
// break ;
6734: GO 6738
// end ;
6736: GO 6696
6738: POP
6739: POP
// end ;
6740: LD_VAR 0 3
6744: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6745: LD_INT 0
6747: PPUSH
6748: PPUSH
// InitUc ;
6749: CALL_OW 18
// InitHc ;
6753: CALL_OW 19
// uc_side := 0 ;
6757: LD_ADDR_OWVAR 20
6761: PUSH
6762: LD_INT 0
6764: ST_TO_ADDR
// uc_nation := 0 ;
6765: LD_ADDR_OWVAR 21
6769: PUSH
6770: LD_INT 0
6772: ST_TO_ADDR
// for i = 1 to amount do
6773: LD_ADDR_VAR 0 4
6777: PUSH
6778: DOUBLE
6779: LD_INT 1
6781: DEC
6782: ST_TO_ADDR
6783: LD_VAR 0 2
6787: PUSH
6788: FOR_TO
6789: IFFALSE 6871
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6791: LD_ADDR_OWVAR 29
6795: PUSH
6796: LD_INT 9
6798: PPUSH
6799: LD_INT 12
6801: PPUSH
6802: CALL_OW 12
6806: PUSH
6807: LD_INT 9
6809: PPUSH
6810: LD_INT 12
6812: PPUSH
6813: CALL_OW 12
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6822: LD_ADDR_OWVAR 35
6826: PUSH
6827: LD_INT 1
6829: NEG
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: CALL_OW 12
6838: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6839: LD_INT 0
6841: PPUSH
6842: LD_INT 12
6844: PPUSH
6845: LD_INT 1
6847: PPUSH
6848: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6852: CALL_OW 44
6856: PPUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 0
6864: PPUSH
6865: CALL_OW 49
// end ;
6869: GO 6788
6871: POP
6872: POP
// InitHc ;
6873: CALL_OW 19
// end ;
6877: LD_VAR 0 3
6881: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6882: LD_INT 0
6884: PPUSH
6885: PPUSH
// uc_side := 0 ;
6886: LD_ADDR_OWVAR 20
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// uc_nation := 0 ;
6894: LD_ADDR_OWVAR 21
6898: PUSH
6899: LD_INT 0
6901: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
6902: LD_INT 7
6904: PPUSH
6905: LD_INT 6
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 4
6913: PUSH
6914: LD_INT 3
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: PUSH
6923: LD_OWVAR 67
6927: ARRAY
6928: PPUSH
6929: CALL 6745 0 2
// for i = 1 to 2 do
6933: LD_ADDR_VAR 0 4
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 6986
// begin vc_chassis := class_mastodont ;
6949: LD_ADDR_OWVAR 37
6953: PUSH
6954: LD_EXP 76
6958: ST_TO_ADDR
// vc_control := control_rider ;
6959: LD_ADDR_OWVAR 38
6963: PUSH
6964: LD_INT 4
6966: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6967: CALL_OW 45
6971: PPUSH
6972: LD_VAR 0 1
6976: PPUSH
6977: LD_INT 0
6979: PPUSH
6980: CALL 60914 0 3
// end ;
6984: GO 6946
6986: POP
6987: POP
// for i := 1 to 4 do
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: DOUBLE
6994: LD_INT 1
6996: DEC
6997: ST_TO_ADDR
6998: LD_INT 4
7000: PUSH
7001: FOR_TO
7002: IFFALSE 7041
// begin hc_class := class_horse ;
7004: LD_ADDR_OWVAR 28
7008: PUSH
7009: LD_EXP 77
7013: ST_TO_ADDR
// hc_gallery :=  ;
7014: LD_ADDR_OWVAR 33
7018: PUSH
7019: LD_STRING 
7021: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7022: CALL_OW 44
7026: PPUSH
7027: LD_VAR 0 1
7031: PPUSH
7032: LD_INT 0
7034: PPUSH
7035: CALL_OW 49
// end ;
7039: GO 7001
7041: POP
7042: POP
// for i = 1 to 5 do
7043: LD_ADDR_VAR 0 4
7047: PUSH
7048: DOUBLE
7049: LD_INT 1
7051: DEC
7052: ST_TO_ADDR
7053: LD_INT 5
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7111
// begin hc_class = class_tiger ;
7059: LD_ADDR_OWVAR 28
7063: PUSH
7064: LD_INT 14
7066: ST_TO_ADDR
// hc_gallery =  ;
7067: LD_ADDR_OWVAR 33
7071: PUSH
7072: LD_STRING 
7074: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7075: LD_ADDR_OWVAR 35
7079: PUSH
7080: LD_INT 7
7082: NEG
7083: PPUSH
7084: LD_INT 7
7086: PPUSH
7087: CALL_OW 12
7091: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7092: CALL_OW 44
7096: PPUSH
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_INT 0
7104: PPUSH
7105: CALL 60914 0 3
// end ;
7109: GO 7056
7111: POP
7112: POP
// for i := 1 to 4 do
7113: LD_ADDR_VAR 0 4
7117: PUSH
7118: DOUBLE
7119: LD_INT 1
7121: DEC
7122: ST_TO_ADDR
7123: LD_INT 4
7125: PUSH
7126: FOR_TO
7127: IFFALSE 7164
// begin hc_class := class_phororhacos ;
7129: LD_ADDR_OWVAR 28
7133: PUSH
7134: LD_INT 18
7136: ST_TO_ADDR
// hc_gallery :=  ;
7137: LD_ADDR_OWVAR 33
7141: PUSH
7142: LD_STRING 
7144: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7145: CALL_OW 44
7149: PPUSH
7150: LD_VAR 0 1
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
// end ;
7162: GO 7126
7164: POP
7165: POP
// for i := 1 to 4 do
7166: LD_ADDR_VAR 0 4
7170: PUSH
7171: DOUBLE
7172: LD_INT 1
7174: DEC
7175: ST_TO_ADDR
7176: LD_INT 4
7178: PUSH
7179: FOR_TO
7180: IFFALSE 7217
// begin hc_class := class_baggie ;
7182: LD_ADDR_OWVAR 28
7186: PUSH
7187: LD_INT 13
7189: ST_TO_ADDR
// hc_gallery :=  ;
7190: LD_ADDR_OWVAR 33
7194: PUSH
7195: LD_STRING 
7197: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7198: CALL_OW 44
7202: PPUSH
7203: LD_VAR 0 1
7207: PPUSH
7208: LD_INT 0
7210: PPUSH
7211: CALL_OW 49
// end ;
7215: GO 7179
7217: POP
7218: POP
// for i := 1 to 7 do
7219: LD_ADDR_VAR 0 4
7223: PUSH
7224: DOUBLE
7225: LD_INT 1
7227: DEC
7228: ST_TO_ADDR
7229: LD_INT 7
7231: PUSH
7232: FOR_TO
7233: IFFALSE 7270
// begin hc_class := class_frog ;
7235: LD_ADDR_OWVAR 28
7239: PUSH
7240: LD_INT 19
7242: ST_TO_ADDR
// hc_gallery :=  ;
7243: LD_ADDR_OWVAR 33
7247: PUSH
7248: LD_STRING 
7250: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7251: CALL_OW 44
7255: PPUSH
7256: LD_VAR 0 2
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// end ;
7268: GO 7232
7270: POP
7271: POP
// end ;
7272: LD_VAR 0 3
7276: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7277: LD_INT 0
7279: PPUSH
7280: PPUSH
7281: PPUSH
// if not observer or not unit then
7282: LD_VAR 0 1
7286: NOT
7287: PUSH
7288: LD_VAR 0 2
7292: NOT
7293: OR
7294: IFFALSE 7298
// exit ;
7296: GO 7346
// if not See ( GetSide ( observer ) , unit ) then
7298: LD_VAR 0 1
7302: PPUSH
7303: CALL_OW 255
7307: PPUSH
7308: LD_VAR 0 2
7312: PPUSH
7313: CALL_OW 292
7317: NOT
7318: IFFALSE 7322
// exit ;
7320: GO 7346
// result := GetDistUnits ( observer , unit ) < 12 ;
7322: LD_ADDR_VAR 0 3
7326: PUSH
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: CALL_OW 296
7341: PUSH
7342: LD_INT 12
7344: LESS
7345: ST_TO_ADDR
// end ;
7346: LD_VAR 0 3
7350: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7351: LD_INT 0
7353: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 1
7361: ARRAY
7362: PPUSH
7363: LD_VAR 0 2
7367: PUSH
7368: LD_INT 2
7370: ARRAY
7371: PPUSH
7372: CALL_OW 488
7376: PUSH
7377: LD_VAR 0 2
7381: PUSH
7382: LD_INT 1
7384: ARRAY
7385: PPUSH
7386: LD_VAR 0 2
7390: PUSH
7391: LD_INT 2
7393: ARRAY
7394: PPUSH
7395: CALL_OW 428
7399: PUSH
7400: LD_INT 0
7402: EQUAL
7403: AND
7404: IFFALSE 7438
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7406: LD_VAR 0 1
7410: PPUSH
7411: LD_VAR 0 2
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: LD_VAR 0 2
7424: PUSH
7425: LD_INT 2
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: CALL_OW 48
// end ;
7438: LD_VAR 0 4
7442: RET
// export function ReverseArray ( array ) ; var i ; begin
7443: LD_INT 0
7445: PPUSH
7446: PPUSH
// if not array then
7447: LD_VAR 0 1
7451: NOT
7452: IFFALSE 7456
// exit ;
7454: GO 7514
// result := [ ] ;
7456: LD_ADDR_VAR 0 2
7460: PUSH
7461: EMPTY
7462: ST_TO_ADDR
// for i := 1 to array do
7463: LD_ADDR_VAR 0 3
7467: PUSH
7468: DOUBLE
7469: LD_INT 1
7471: DEC
7472: ST_TO_ADDR
7473: LD_VAR 0 1
7477: PUSH
7478: FOR_TO
7479: IFFALSE 7512
// result := Insert ( result , 1 , array [ i ] ) ;
7481: LD_ADDR_VAR 0 2
7485: PUSH
7486: LD_VAR 0 2
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: LD_VAR 0 1
7498: PUSH
7499: LD_VAR 0 3
7503: ARRAY
7504: PPUSH
7505: CALL_OW 2
7509: ST_TO_ADDR
7510: GO 7478
7512: POP
7513: POP
// end ;
7514: LD_VAR 0 2
7518: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7519: LD_INT 0
7521: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_VAR 0 2
7531: PPUSH
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_VAR 0 4
7541: PPUSH
7542: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_VAR 0 2
7555: PPUSH
7556: LD_VAR 0 3
7560: PPUSH
7561: CALL_OW 331
// end ;
7565: LD_VAR 0 5
7569: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7570: LD_INT 0
7572: PPUSH
// if not units then
7573: LD_VAR 0 1
7577: NOT
7578: IFFALSE 7582
// exit ;
7580: GO 7665
// result := true ;
7582: LD_ADDR_VAR 0 4
7586: PUSH
7587: LD_INT 1
7589: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 26
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 72
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PPUSH
7614: LD_VAR 0 2
7618: PPUSH
7619: CALL_OW 88
7623: NOT
7624: IFFALSE 7665
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7626: LD_ADDR_VAR 0 4
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 2
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_INT 1
7653: ARRAY
7654: PPUSH
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 88
7664: ST_TO_ADDR
// end ;
7665: LD_VAR 0 4
7669: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7670: LD_INT 0
7672: PPUSH
7673: PPUSH
// if not group then
7674: LD_VAR 0 2
7678: NOT
7679: IFFALSE 7683
// exit ;
7681: GO 7728
// for i in group do
7683: LD_ADDR_VAR 0 4
7687: PUSH
7688: LD_VAR 0 2
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7726
// if See ( side , i ) then
7696: LD_VAR 0 1
7700: PPUSH
7701: LD_VAR 0 4
7705: PPUSH
7706: CALL_OW 292
7710: IFFALSE 7724
// begin result := true ;
7712: LD_ADDR_VAR 0 3
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// exit ;
7720: POP
7721: POP
7722: GO 7728
// end ;
7724: GO 7693
7726: POP
7727: POP
// end ; end_of_file
7728: LD_VAR 0 3
7732: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
// uc_side := 3 ;
7742: LD_ADDR_OWVAR 20
7746: PUSH
7747: LD_INT 3
7749: ST_TO_ADDR
// uc_nation := 3 ;
7750: LD_ADDR_OWVAR 21
7754: PUSH
7755: LD_INT 3
7757: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7758: LD_ADDR_EXP 49
7762: PUSH
7763: LD_STRING Morozov
7765: PPUSH
7766: CALL_OW 25
7770: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7771: LD_EXP 49
7775: PPUSH
7776: LD_INT 52
7778: PPUSH
7779: CALL_OW 52
// if not gaidarKilled then
7783: LD_EXP 7
7787: NOT
7788: IFFALSE 7821
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7790: LD_ADDR_EXP 50
7794: PUSH
7795: LD_STRING Gaydar
7797: PPUSH
7798: LD_INT 0
7800: PPUSH
7801: LD_STRING 
7803: PPUSH
7804: CALL 25263 0 3
7808: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7809: LD_EXP 50
7813: PPUSH
7814: LD_INT 52
7816: PPUSH
7817: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7821: LD_INT 52
7823: PPUSH
7824: LD_STRING lenin
7826: PPUSH
7827: CALL_OW 500
// ruOutsiders := [ ] ;
7831: LD_ADDR_EXP 52
7835: PUSH
7836: EMPTY
7837: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7838: LD_ADDR_EXP 54
7842: PUSH
7843: EMPTY
7844: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7845: LD_ADDR_EXP 55
7849: PUSH
7850: EMPTY
7851: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7852: LD_ADDR_EXP 56
7856: PUSH
7857: EMPTY
7858: ST_TO_ADDR
// ruAttackers := [ ] ;
7859: LD_ADDR_EXP 57
7863: PUSH
7864: EMPTY
7865: ST_TO_ADDR
// waveStrength := 0 ;
7866: LD_ADDR_EXP 58
7870: PUSH
7871: LD_INT 0
7873: ST_TO_ADDR
// if not gaidarKilled then
7874: LD_EXP 7
7878: NOT
7879: IFFALSE 7889
// waveStrength := 2 ;
7881: LD_ADDR_EXP 58
7885: PUSH
7886: LD_INT 2
7888: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7889: LD_ADDR_VAR 0 7
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 21
7906: PUSH
7907: LD_INT 3
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 69
7922: ST_TO_ADDR
// for i in tmp do
7923: LD_ADDR_VAR 0 2
7927: PUSH
7928: LD_VAR 0 7
7932: PUSH
7933: FOR_IN
7934: IFFALSE 7971
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
7936: LD_VAR 0 2
7940: PPUSH
7941: LD_INT 5
7943: PUSH
7944: LD_INT 6
7946: PUSH
7947: LD_INT 7
7949: PUSH
7950: LD_INT 8
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: LD_OWVAR 67
7963: ARRAY
7964: PPUSH
7965: CALL_OW 241
7969: GO 7933
7971: POP
7972: POP
// for i := 1 to 3 do
7973: LD_ADDR_VAR 0 2
7977: PUSH
7978: DOUBLE
7979: LD_INT 1
7981: DEC
7982: ST_TO_ADDR
7983: LD_INT 3
7985: PUSH
7986: FOR_TO
7987: IFFALSE 8025
// begin PrepareHuman ( false , 1 , 0 ) ;
7989: LD_INT 0
7991: PPUSH
7992: LD_INT 1
7994: PPUSH
7995: LD_INT 0
7997: PPUSH
7998: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
8002: CALL_OW 44
8006: PPUSH
8007: LD_INT 75
8009: PPUSH
8010: LD_INT 49
8012: PPUSH
8013: LD_INT 3
8015: PPUSH
8016: LD_INT 0
8018: PPUSH
8019: CALL_OW 50
// end ;
8023: GO 7986
8025: POP
8026: POP
// for i := 1 to 4 do
8027: LD_ADDR_VAR 0 2
8031: PUSH
8032: DOUBLE
8033: LD_INT 1
8035: DEC
8036: ST_TO_ADDR
8037: LD_INT 4
8039: PUSH
8040: FOR_TO
8041: IFFALSE 8087
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8043: LD_INT 0
8045: PPUSH
8046: LD_INT 1
8048: PPUSH
8049: LD_INT 2
8051: PPUSH
8052: CALL_OW 12
8056: PPUSH
8057: LD_INT 0
8059: PPUSH
8060: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8064: CALL_OW 44
8068: PPUSH
8069: LD_INT 330
8071: PPUSH
8072: LD_INT 231
8074: PPUSH
8075: LD_INT 5
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL_OW 50
// end ;
8085: GO 8040
8087: POP
8088: POP
// hc_class := 1 ;
8089: LD_ADDR_OWVAR 28
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8097: CALL_OW 44
8101: PPUSH
8102: LD_INT 324
8104: PPUSH
8105: LD_INT 219
8107: PPUSH
8108: CALL_OW 428
8112: PPUSH
8113: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8117: CALL_OW 44
8121: PPUSH
8122: LD_INT 316
8124: PPUSH
8125: LD_INT 223
8127: PPUSH
8128: CALL_OW 428
8132: PPUSH
8133: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8137: LD_ADDR_VAR 0 7
8141: PUSH
8142: LD_INT 172
8144: PPUSH
8145: LD_INT 198
8147: PPUSH
8148: CALL_OW 428
8152: PPUSH
8153: CALL_OW 274
8157: PUSH
8158: LD_INT 189
8160: PPUSH
8161: LD_INT 156
8163: PPUSH
8164: CALL_OW 428
8168: PPUSH
8169: CALL_OW 274
8173: PUSH
8174: LD_INT 341
8176: PPUSH
8177: LD_INT 232
8179: PPUSH
8180: CALL_OW 428
8184: PPUSH
8185: CALL_OW 274
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: ST_TO_ADDR
// for i in tmp do
8195: LD_ADDR_VAR 0 2
8199: PUSH
8200: LD_VAR 0 7
8204: PUSH
8205: FOR_IN
8206: IFFALSE 8240
// begin SetResourceType ( i , mat_cans , 200 ) ;
8208: LD_VAR 0 2
8212: PPUSH
8213: LD_INT 1
8215: PPUSH
8216: LD_INT 200
8218: PPUSH
8219: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 2
8230: PPUSH
8231: LD_INT 200
8233: PPUSH
8234: CALL_OW 277
// end ;
8238: GO 8205
8240: POP
8241: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
8242: LD_ADDR_VAR 0 7
8246: PUSH
8247: LD_INT 177
8249: PUSH
8250: LD_INT 114
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PUSH
8257: LD_INT 138
8259: PUSH
8260: LD_INT 96
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: ST_TO_ADDR
// for i := 1 to tmp do
8271: LD_ADDR_VAR 0 2
8275: PUSH
8276: DOUBLE
8277: LD_INT 1
8279: DEC
8280: ST_TO_ADDR
8281: LD_VAR 0 7
8285: PUSH
8286: FOR_TO
8287: IFFALSE 8370
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
8289: LD_INT 0
8291: PPUSH
8292: LD_INT 9
8294: PPUSH
8295: LD_INT 6
8297: PPUSH
8298: CALL_OW 380
// un := CreateHuman ;
8302: LD_ADDR_VAR 0 5
8306: PUSH
8307: CALL_OW 44
8311: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8312: LD_VAR 0 5
8316: PPUSH
8317: LD_INT 2
8319: PPUSH
8320: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
8324: LD_VAR 0 5
8328: PPUSH
8329: LD_VAR 0 7
8333: PUSH
8334: LD_VAR 0 2
8338: ARRAY
8339: PUSH
8340: LD_INT 1
8342: ARRAY
8343: PPUSH
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 2
8353: ARRAY
8354: PUSH
8355: LD_INT 2
8357: ARRAY
8358: PPUSH
8359: CALL_OW 428
8363: PPUSH
8364: CALL_OW 52
// end ;
8368: GO 8286
8370: POP
8371: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8372: LD_ADDR_VAR 0 7
8376: PUSH
8377: LD_INT 198
8379: PUSH
8380: LD_INT 158
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 203
8389: PUSH
8390: LD_INT 166
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 181
8399: PUSH
8400: LD_INT 209
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 178
8409: PUSH
8410: LD_INT 196
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 181
8419: PUSH
8420: LD_INT 212
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: ST_TO_ADDR
// for i := 1 to tmp do
8434: LD_ADDR_VAR 0 2
8438: PUSH
8439: DOUBLE
8440: LD_INT 1
8442: DEC
8443: ST_TO_ADDR
8444: LD_VAR 0 7
8448: PUSH
8449: FOR_TO
8450: IFFALSE 8571
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
8452: LD_INT 0
8454: PPUSH
8455: LD_INT 1
8457: PPUSH
8458: LD_INT 4
8460: PUSH
8461: LD_INT 5
8463: PUSH
8464: LD_INT 6
8466: PUSH
8467: LD_INT 7
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: LD_OWVAR 67
8480: ARRAY
8481: PPUSH
8482: CALL_OW 380
// un := CreateHuman ;
8486: LD_ADDR_VAR 0 5
8490: PUSH
8491: CALL_OW 44
8495: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8496: LD_ADDR_VAR 0 4
8500: PUSH
8501: LD_VAR 0 7
8505: PUSH
8506: LD_VAR 0 2
8510: ARRAY
8511: PUSH
8512: LD_INT 1
8514: ARRAY
8515: PPUSH
8516: LD_VAR 0 7
8520: PUSH
8521: LD_VAR 0 2
8525: ARRAY
8526: PUSH
8527: LD_INT 2
8529: ARRAY
8530: PPUSH
8531: CALL_OW 428
8535: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8536: LD_VAR 0 5
8540: PPUSH
8541: LD_VAR 0 4
8545: PPUSH
8546: CALL 57834 0 1
8550: PPUSH
8551: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8555: LD_VAR 0 5
8559: PPUSH
8560: LD_VAR 0 4
8564: PPUSH
8565: CALL_OW 52
// end ;
8569: GO 8449
8571: POP
8572: POP
// for i := 1 to 3 do
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: DOUBLE
8579: LD_INT 1
8581: DEC
8582: ST_TO_ADDR
8583: LD_INT 3
8585: PUSH
8586: FOR_TO
8587: IFFALSE 8642
// begin InitHc ;
8589: CALL_OW 19
// uc_nation := 0 ;
8593: LD_ADDR_OWVAR 21
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8601: LD_ADDR_OWVAR 28
8605: PUSH
8606: LD_INT 16
8608: ST_TO_ADDR
// un := CreateHuman ;
8609: LD_ADDR_VAR 0 5
8613: PUSH
8614: CALL_OW 44
8618: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8619: LD_VAR 0 5
8623: PPUSH
8624: LD_INT 194
8626: PPUSH
8627: LD_INT 164
8629: PPUSH
8630: LD_INT 6
8632: PPUSH
8633: LD_INT 0
8635: PPUSH
8636: CALL_OW 50
// end ;
8640: GO 8586
8642: POP
8643: POP
// uc_nation := 3 ;
8644: LD_ADDR_OWVAR 21
8648: PUSH
8649: LD_INT 3
8651: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8652: LD_INT 24
8654: PPUSH
8655: LD_INT 1
8657: PPUSH
8658: LD_INT 1
8660: PPUSH
8661: LD_INT 44
8663: PPUSH
8664: LD_INT 10
8666: PPUSH
8667: CALL 30127 0 5
// un := CreateVehicle ;
8671: LD_ADDR_VAR 0 5
8675: PUSH
8676: CALL_OW 45
8680: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8681: LD_VAR 0 5
8685: PPUSH
8686: LD_INT 199
8688: PPUSH
8689: LD_INT 162
8691: PPUSH
8692: LD_INT 1
8694: PPUSH
8695: LD_INT 0
8697: PPUSH
8698: CALL 63931 0 5
// ComHold ( un ) ;
8702: LD_VAR 0 5
8706: PPUSH
8707: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8711: LD_INT 0
8713: PPUSH
8714: LD_INT 3
8716: PPUSH
8717: LD_INT 4
8719: PPUSH
8720: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8724: CALL_OW 44
8728: PPUSH
8729: LD_VAR 0 5
8733: PPUSH
8734: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8738: LD_INT 24
8740: PPUSH
8741: LD_INT 1
8743: PPUSH
8744: LD_INT 1
8746: PPUSH
8747: LD_INT 45
8749: PPUSH
8750: LD_INT 10
8752: PPUSH
8753: CALL 30127 0 5
// un := CreateVehicle ;
8757: LD_ADDR_VAR 0 5
8761: PUSH
8762: CALL_OW 45
8766: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8767: LD_VAR 0 5
8771: PPUSH
8772: LD_INT 129
8774: PPUSH
8775: LD_INT 93
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: LD_INT 0
8783: PPUSH
8784: CALL 63931 0 5
// ComHold ( un ) ;
8788: LD_VAR 0 5
8792: PPUSH
8793: CALL_OW 140
// if Difficulty > 1 then
8797: LD_OWVAR 67
8801: PUSH
8802: LD_INT 1
8804: GREATER
8805: IFFALSE 8979
// begin PrepareHuman ( false , 3 , 4 ) ;
8807: LD_INT 0
8809: PPUSH
8810: LD_INT 3
8812: PPUSH
8813: LD_INT 4
8815: PPUSH
8816: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8820: CALL_OW 44
8824: PPUSH
8825: LD_VAR 0 5
8829: PPUSH
8830: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8834: LD_INT 24
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 45
8845: PPUSH
8846: LD_INT 10
8848: PPUSH
8849: CALL 30127 0 5
// un := CreateVehicle ;
8853: LD_ADDR_VAR 0 5
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
8863: LD_VAR 0 5
8867: PPUSH
8868: LD_INT 134
8870: PPUSH
8871: LD_INT 92
8873: PPUSH
8874: LD_INT 2
8876: PPUSH
8877: LD_INT 0
8879: PPUSH
8880: CALL 63931 0 5
// ComHold ( un ) ;
8884: LD_VAR 0 5
8888: PPUSH
8889: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8893: LD_INT 0
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: LD_INT 4
8901: PPUSH
8902: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8906: CALL_OW 44
8910: PPUSH
8911: LD_VAR 0 5
8915: PPUSH
8916: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8920: LD_INT 24
8922: PPUSH
8923: LD_INT 1
8925: PPUSH
8926: LD_INT 1
8928: PPUSH
8929: LD_INT 45
8931: PPUSH
8932: LD_INT 10
8934: PPUSH
8935: CALL 30127 0 5
// un := CreateVehicle ;
8939: LD_ADDR_VAR 0 5
8943: PUSH
8944: CALL_OW 45
8948: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
8949: LD_VAR 0 5
8953: PPUSH
8954: LD_INT 200
8956: PPUSH
8957: LD_INT 173
8959: PPUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 0
8965: PPUSH
8966: CALL 63931 0 5
// ComHold ( un ) ;
8970: LD_VAR 0 5
8974: PPUSH
8975: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
8979: LD_INT 0
8981: PPUSH
8982: LD_INT 3
8984: PPUSH
8985: LD_INT 4
8987: PPUSH
8988: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8992: CALL_OW 44
8996: PPUSH
8997: LD_VAR 0 5
9001: PPUSH
9002: CALL_OW 52
// bc_type := b_armoury ;
9006: LD_ADDR_OWVAR 42
9010: PUSH
9011: LD_INT 4
9013: ST_TO_ADDR
// if Difficulty > 1 then
9014: LD_OWVAR 67
9018: PUSH
9019: LD_INT 1
9021: GREATER
9022: IFFALSE 9032
// bc_type := b_barracks ;
9024: LD_ADDR_OWVAR 42
9028: PUSH
9029: LD_INT 5
9031: ST_TO_ADDR
// bc_level := 6 ;
9032: LD_ADDR_OWVAR 43
9036: PUSH
9037: LD_INT 6
9039: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
9040: LD_INT 120
9042: PPUSH
9043: LD_INT 100
9045: PPUSH
9046: LD_INT 5
9048: PPUSH
9049: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9053: LD_ADDR_VAR 0 2
9057: PUSH
9058: DOUBLE
9059: LD_INT 1
9061: DEC
9062: ST_TO_ADDR
9063: LD_INT 3
9065: PUSH
9066: LD_INT 3
9068: PUSH
9069: LD_INT 4
9071: PUSH
9072: LD_INT 4
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: PUSH
9087: FOR_TO
9088: IFFALSE 9146
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
9090: LD_INT 0
9092: PPUSH
9093: LD_INT 1
9095: PUSH
9096: LD_INT 1
9098: PUSH
9099: LD_INT 9
9101: PUSH
9102: LD_INT 9
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: PUSH
9111: LD_OWVAR 67
9115: ARRAY
9116: PPUSH
9117: LD_INT 5
9119: PPUSH
9120: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
9124: CALL_OW 44
9128: PPUSH
9129: LD_INT 120
9131: PPUSH
9132: LD_INT 100
9134: PPUSH
9135: CALL_OW 428
9139: PPUSH
9140: CALL_OW 52
// end ;
9144: GO 9087
9146: POP
9147: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
9148: LD_ADDR_VAR 0 7
9152: PUSH
9153: LD_INT 135
9155: PUSH
9156: LD_INT 100
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 137
9165: PUSH
9166: LD_INT 92
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: ST_TO_ADDR
// for i := 1 to tmp do
9177: LD_ADDR_VAR 0 2
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 7
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9363
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
9195: LD_INT 22
9197: PUSH
9198: LD_INT 22
9200: PUSH
9201: LD_INT 24
9203: PUSH
9204: LD_INT 24
9206: PUSH
9207: LD_INT 24
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: PUSH
9217: LD_OWVAR 67
9221: PUSH
9222: LD_INT 0
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: CALL_OW 12
9232: PLUS
9233: ARRAY
9234: PPUSH
9235: LD_INT 1
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: LD_INT 44
9243: PPUSH
9244: LD_INT 25
9246: PPUSH
9247: CALL 30127 0 5
// veh := CreateVehicle ;
9251: LD_ADDR_VAR 0 6
9255: PUSH
9256: CALL_OW 45
9260: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 2
9268: PPUSH
9269: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
9273: LD_VAR 0 6
9277: PPUSH
9278: LD_VAR 0 7
9282: PUSH
9283: LD_VAR 0 2
9287: ARRAY
9288: PUSH
9289: LD_INT 1
9291: ARRAY
9292: PPUSH
9293: LD_VAR 0 7
9297: PUSH
9298: LD_VAR 0 2
9302: ARRAY
9303: PUSH
9304: LD_INT 2
9306: ARRAY
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
9315: LD_INT 0
9317: PPUSH
9318: LD_INT 3
9320: PPUSH
9321: LD_INT 6
9323: PPUSH
9324: CALL_OW 380
// un := CreateHuman ;
9328: LD_ADDR_VAR 0 5
9332: PUSH
9333: CALL_OW 44
9337: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9338: LD_VAR 0 5
9342: PPUSH
9343: LD_VAR 0 6
9347: PPUSH
9348: CALL_OW 52
// ComHold ( veh ) ;
9352: LD_VAR 0 6
9356: PPUSH
9357: CALL_OW 140
// end ;
9361: GO 9192
9363: POP
9364: POP
// tmp := [ 191 , 122 ] ;
9365: LD_ADDR_VAR 0 7
9369: PUSH
9370: LD_INT 191
9372: PUSH
9373: LD_INT 122
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
9380: LD_INT 24
9382: PPUSH
9383: LD_INT 1
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: LD_INT 44
9391: PPUSH
9392: LD_INT 30
9394: PPUSH
9395: CALL 30127 0 5
// ruBlockadeTank := CreateVehicle ;
9399: LD_ADDR_EXP 51
9403: PUSH
9404: CALL_OW 45
9408: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9409: LD_EXP 51
9413: PPUSH
9414: LD_INT 2
9416: PPUSH
9417: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9421: LD_EXP 51
9425: PPUSH
9426: LD_INT 191
9428: PPUSH
9429: LD_INT 122
9431: PPUSH
9432: LD_INT 0
9434: PPUSH
9435: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
9439: LD_INT 1
9441: PPUSH
9442: LD_INT 5
9444: PUSH
9445: LD_INT 6
9447: PUSH
9448: LD_INT 7
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: PUSH
9456: LD_OWVAR 67
9460: PUSH
9461: LD_INT 1
9463: MINUS
9464: ARRAY
9465: PPUSH
9466: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9470: CALL_OW 44
9474: PPUSH
9475: LD_EXP 51
9479: PPUSH
9480: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9484: LD_EXP 51
9488: PPUSH
9489: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9493: LD_ADDR_EXP 53
9497: PUSH
9498: EMPTY
9499: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
9500: LD_ADDR_VAR 0 2
9504: PUSH
9505: DOUBLE
9506: LD_INT 1
9508: DEC
9509: ST_TO_ADDR
9510: LD_INT 3
9512: PUSH
9513: LD_INT 4
9515: PUSH
9516: LD_INT 6
9518: PUSH
9519: LD_INT 6
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: LD_OWVAR 67
9532: ARRAY
9533: PUSH
9534: FOR_TO
9535: IFFALSE 9651
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
9537: LD_INT 0
9539: PPUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 4
9545: PUSH
9546: LD_INT 5
9548: PUSH
9549: LD_INT 6
9551: PUSH
9552: LD_INT 7
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: PUSH
9561: LD_OWVAR 67
9565: ARRAY
9566: PPUSH
9567: CALL_OW 380
// un := CreateHuman ;
9571: LD_ADDR_VAR 0 5
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9581: LD_VAR 0 5
9585: PPUSH
9586: LD_INT 9
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9596: LD_VAR 0 5
9600: PPUSH
9601: LD_INT 198
9603: PPUSH
9604: LD_INT 129
9606: PPUSH
9607: CALL_OW 118
// AddComCrawl ( un ) ;
9611: LD_VAR 0 5
9615: PPUSH
9616: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9620: LD_ADDR_EXP 53
9624: PUSH
9625: LD_EXP 53
9629: PPUSH
9630: LD_EXP 53
9634: PUSH
9635: LD_INT 1
9637: PLUS
9638: PPUSH
9639: LD_VAR 0 5
9643: PPUSH
9644: CALL_OW 1
9648: ST_TO_ADDR
// end ;
9649: GO 9534
9651: POP
9652: POP
// PrepareHuman ( false , 4 , 5 ) ;
9653: LD_INT 0
9655: PPUSH
9656: LD_INT 4
9658: PPUSH
9659: LD_INT 5
9661: PPUSH
9662: CALL_OW 380
// un := CreateHuman ;
9666: LD_ADDR_VAR 0 5
9670: PUSH
9671: CALL_OW 44
9675: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9676: LD_VAR 0 5
9680: PPUSH
9681: LD_INT 179
9683: PPUSH
9684: LD_INT 113
9686: PPUSH
9687: LD_INT 0
9689: PPUSH
9690: CALL_OW 48
// ComHold ( un ) ;
9694: LD_VAR 0 5
9698: PPUSH
9699: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9703: LD_ADDR_EXP 53
9707: PUSH
9708: LD_EXP 53
9712: PPUSH
9713: LD_EXP 53
9717: PUSH
9718: LD_INT 1
9720: PLUS
9721: PPUSH
9722: LD_VAR 0 5
9726: PPUSH
9727: CALL_OW 1
9731: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9732: LD_ADDR_VAR 0 7
9736: PUSH
9737: LD_INT 167
9739: PPUSH
9740: LD_INT 243
9742: PPUSH
9743: CALL_OW 428
9747: PPUSH
9748: CALL_OW 274
9752: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9753: LD_VAR 0 7
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: LD_INT 1000
9763: PPUSH
9764: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9768: LD_VAR 0 7
9772: PPUSH
9773: LD_INT 2
9775: PPUSH
9776: LD_INT 400
9778: PPUSH
9779: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9783: LD_ADDR_VAR 0 7
9787: PUSH
9788: LD_INT 169
9790: PPUSH
9791: LD_INT 229
9793: PPUSH
9794: CALL_OW 428
9798: ST_TO_ADDR
// for i := 1 to 3 do
9799: LD_ADDR_VAR 0 2
9803: PUSH
9804: DOUBLE
9805: LD_INT 1
9807: DEC
9808: ST_TO_ADDR
9809: LD_INT 3
9811: PUSH
9812: FOR_TO
9813: IFFALSE 9904
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9815: LD_INT 0
9817: PPUSH
9818: LD_INT 1
9820: PPUSH
9821: LD_INT 4
9823: PUSH
9824: LD_INT 5
9826: PUSH
9827: LD_INT 5
9829: PUSH
9830: LD_INT 6
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: PUSH
9839: LD_OWVAR 67
9843: ARRAY
9844: PPUSH
9845: CALL_OW 380
// un := CreateHuman ;
9849: LD_ADDR_VAR 0 5
9853: PUSH
9854: CALL_OW 44
9858: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9859: LD_VAR 0 5
9863: PPUSH
9864: LD_VAR 0 7
9868: PPUSH
9869: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9873: LD_ADDR_EXP 54
9877: PUSH
9878: LD_EXP 54
9882: PPUSH
9883: LD_EXP 54
9887: PUSH
9888: LD_INT 1
9890: PLUS
9891: PPUSH
9892: LD_VAR 0 5
9896: PPUSH
9897: CALL_OW 1
9901: ST_TO_ADDR
// end ;
9902: GO 9812
9904: POP
9905: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9906: LD_ADDR_VAR 0 7
9910: PUSH
9911: LD_INT 165
9913: PUSH
9914: LD_INT 227
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: LD_INT 173
9923: PUSH
9924: LD_INT 231
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: ST_TO_ADDR
// for i := 1 to tmp do
9935: LD_ADDR_VAR 0 2
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 7
9949: PUSH
9950: FOR_TO
9951: IFFALSE 10072
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9953: LD_INT 0
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: LD_INT 4
9961: PUSH
9962: LD_INT 5
9964: PUSH
9965: LD_INT 5
9967: PUSH
9968: LD_INT 6
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: LD_OWVAR 67
9981: ARRAY
9982: PPUSH
9983: CALL_OW 380
// un := CreateHuman ;
9987: LD_ADDR_VAR 0 5
9991: PUSH
9992: CALL_OW 44
9996: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9997: LD_VAR 0 5
10001: PPUSH
10002: LD_VAR 0 7
10006: PUSH
10007: LD_VAR 0 2
10011: ARRAY
10012: PUSH
10013: LD_INT 1
10015: ARRAY
10016: PPUSH
10017: LD_VAR 0 7
10021: PUSH
10022: LD_VAR 0 2
10026: ARRAY
10027: PUSH
10028: LD_INT 2
10030: ARRAY
10031: PPUSH
10032: CALL_OW 428
10036: PPUSH
10037: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
10041: LD_ADDR_EXP 54
10045: PUSH
10046: LD_EXP 54
10050: PPUSH
10051: LD_EXP 54
10055: PUSH
10056: LD_INT 1
10058: PLUS
10059: PPUSH
10060: LD_VAR 0 5
10064: PPUSH
10065: CALL_OW 1
10069: ST_TO_ADDR
// end ;
10070: GO 9950
10072: POP
10073: POP
// for i := 1 to 2 do
10074: LD_ADDR_VAR 0 2
10078: PUSH
10079: DOUBLE
10080: LD_INT 1
10082: DEC
10083: ST_TO_ADDR
10084: LD_INT 2
10086: PUSH
10087: FOR_TO
10088: IFFALSE 10143
// begin InitHc ;
10090: CALL_OW 19
// uc_nation := 0 ;
10094: LD_ADDR_OWVAR 21
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10102: LD_ADDR_OWVAR 28
10106: PUSH
10107: LD_INT 16
10109: ST_TO_ADDR
// un := CreateHuman ;
10110: LD_ADDR_VAR 0 5
10114: PUSH
10115: CALL_OW 44
10119: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
10120: LD_VAR 0 5
10124: PPUSH
10125: LD_INT 166
10127: PPUSH
10128: LD_INT 233
10130: PPUSH
10131: LD_INT 2
10133: PPUSH
10134: LD_INT 0
10136: PPUSH
10137: CALL_OW 50
// end ;
10141: GO 10087
10143: POP
10144: POP
// uc_nation := 3 ;
10145: LD_ADDR_OWVAR 21
10149: PUSH
10150: LD_INT 3
10152: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
10153: LD_ADDR_VAR 0 7
10157: PUSH
10158: LD_INT 71
10160: PUSH
10161: LD_INT 52
10163: PUSH
10164: LD_INT 11
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: ST_TO_ADDR
// for i in tmp do
10172: LD_ADDR_VAR 0 2
10176: PUSH
10177: LD_VAR 0 7
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10227
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 274
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: LD_INT 3000
10200: PPUSH
10201: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
10205: LD_VAR 0 2
10209: PPUSH
10210: CALL_OW 274
10214: PPUSH
10215: LD_INT 2
10217: PPUSH
10218: LD_INT 600
10220: PPUSH
10221: CALL_OW 277
// end ;
10225: GO 10182
10227: POP
10228: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
10229: LD_ADDR_VAR 0 7
10233: PUSH
10234: LD_INT 41
10236: PUSH
10237: LD_INT 57
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 38
10246: PUSH
10247: LD_INT 55
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 50
10256: PUSH
10257: LD_INT 73
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 51
10266: PUSH
10267: LD_INT 65
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: LD_INT 82
10276: PUSH
10277: LD_INT 93
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 87
10286: PUSH
10287: LD_INT 100
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 91
10296: PUSH
10297: LD_INT 109
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 84
10306: PUSH
10307: LD_INT 120
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 113
10316: PUSH
10317: LD_INT 153
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 123
10326: PUSH
10327: LD_INT 171
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 125
10336: PUSH
10337: LD_INT 178
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 125
10346: PUSH
10347: LD_INT 188
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 125
10356: PUSH
10357: LD_INT 201
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 33
10366: PUSH
10367: LD_INT 60
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 76
10376: PUSH
10377: LD_INT 95
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 84
10386: PUSH
10387: LD_INT 111
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 112
10396: PUSH
10397: LD_INT 165
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: ST_TO_ADDR
// for i := 1 to tmp do
10423: LD_ADDR_VAR 0 2
10427: PUSH
10428: DOUBLE
10429: LD_INT 1
10431: DEC
10432: ST_TO_ADDR
10433: LD_VAR 0 7
10437: PUSH
10438: FOR_TO
10439: IFFALSE 10686
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10441: LD_ADDR_VAR 0 4
10445: PUSH
10446: LD_VAR 0 7
10450: PUSH
10451: LD_VAR 0 2
10455: ARRAY
10456: PUSH
10457: LD_INT 1
10459: ARRAY
10460: PPUSH
10461: LD_VAR 0 7
10465: PUSH
10466: LD_VAR 0 2
10470: ARRAY
10471: PUSH
10472: LD_INT 2
10474: ARRAY
10475: PPUSH
10476: CALL_OW 428
10480: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10481: LD_VAR 0 4
10485: PPUSH
10486: CALL_OW 266
10490: PUSH
10491: LD_INT 4
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: IN
10501: IFFALSE 10585
// begin for j := 1 to Difficulty do
10503: LD_ADDR_VAR 0 3
10507: PUSH
10508: DOUBLE
10509: LD_INT 1
10511: DEC
10512: ST_TO_ADDR
10513: LD_OWVAR 67
10517: PUSH
10518: FOR_TO
10519: IFFALSE 10581
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10521: LD_INT 0
10523: PPUSH
10524: LD_INT 1
10526: PPUSH
10527: LD_INT 4
10529: PUSH
10530: LD_INT 5
10532: PUSH
10533: LD_INT 5
10535: PUSH
10536: LD_INT 6
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: LD_OWVAR 67
10549: ARRAY
10550: PPUSH
10551: CALL_OW 380
// un := CreateHuman ;
10555: LD_ADDR_VAR 0 5
10559: PUSH
10560: CALL_OW 44
10564: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10565: LD_VAR 0 5
10569: PPUSH
10570: LD_VAR 0 4
10574: PPUSH
10575: CALL_OW 52
// end ;
10579: GO 10518
10581: POP
10582: POP
// end else
10583: GO 10655
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10585: LD_INT 0
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: LD_INT 4
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: LD_INT 5
10599: PUSH
10600: LD_INT 6
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_OWVAR 67
10613: ARRAY
10614: PPUSH
10615: CALL_OW 380
// un := CreateHuman ;
10619: LD_ADDR_VAR 0 5
10623: PUSH
10624: CALL_OW 44
10628: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10629: LD_VAR 0 5
10633: PPUSH
10634: LD_VAR 0 4
10638: PPUSH
10639: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10643: LD_VAR 0 5
10647: PPUSH
10648: LD_INT 9
10650: PPUSH
10651: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10655: LD_ADDR_EXP 55
10659: PUSH
10660: LD_EXP 55
10664: PPUSH
10665: LD_EXP 55
10669: PUSH
10670: LD_INT 1
10672: PLUS
10673: PPUSH
10674: LD_VAR 0 5
10678: PPUSH
10679: CALL_OW 1
10683: ST_TO_ADDR
// end ;
10684: GO 10438
10686: POP
10687: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10688: LD_ADDR_VAR 0 4
10692: PUSH
10693: LD_INT 10
10695: PPUSH
10696: LD_INT 22
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 30
10708: PUSH
10709: LD_INT 32
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 58
10718: PUSH
10719: EMPTY
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: LIST
10726: PPUSH
10727: CALL_OW 70
10731: PUSH
10732: FOR_IN
10733: IFFALSE 10867
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10735: LD_INT 40
10737: PUSH
10738: LD_INT 50
10740: PUSH
10741: LD_INT 75
10743: PUSH
10744: LD_INT 80
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: LD_OWVAR 67
10757: ARRAY
10758: PUSH
10759: LD_EXP 7
10763: PUSH
10764: LD_INT 10
10766: MUL
10767: MINUS
10768: PPUSH
10769: CALL_OW 13
10773: NOT
10774: IFFALSE 10778
// continue ;
10776: GO 10732
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10778: LD_INT 0
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: LD_INT 4
10786: PUSH
10787: LD_INT 5
10789: PUSH
10790: LD_INT 5
10792: PUSH
10793: LD_INT 6
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: PUSH
10802: LD_OWVAR 67
10806: ARRAY
10807: PPUSH
10808: CALL_OW 380
// un := CreateHuman ;
10812: LD_ADDR_VAR 0 5
10816: PUSH
10817: CALL_OW 44
10821: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10822: LD_VAR 0 5
10826: PPUSH
10827: LD_VAR 0 4
10831: PPUSH
10832: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10836: LD_ADDR_EXP 55
10840: PUSH
10841: LD_EXP 55
10845: PPUSH
10846: LD_EXP 55
10850: PUSH
10851: LD_INT 1
10853: PLUS
10854: PPUSH
10855: LD_VAR 0 5
10859: PPUSH
10860: CALL_OW 1
10864: ST_TO_ADDR
// end ;
10865: GO 10732
10867: POP
10868: POP
// for i := 1 to 5 do
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: DOUBLE
10875: LD_INT 1
10877: DEC
10878: ST_TO_ADDR
10879: LD_INT 5
10881: PUSH
10882: FOR_TO
10883: IFFALSE 10981
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10885: LD_INT 0
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: LD_INT 4
10893: PUSH
10894: LD_INT 5
10896: PUSH
10897: LD_INT 5
10899: PUSH
10900: LD_INT 6
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_OWVAR 67
10913: ARRAY
10914: PPUSH
10915: CALL_OW 380
// un := CreateHuman ;
10919: LD_ADDR_VAR 0 5
10923: PUSH
10924: CALL_OW 44
10928: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10929: LD_VAR 0 5
10933: PPUSH
10934: LD_INT 66
10936: PPUSH
10937: LD_INT 101
10939: PPUSH
10940: LD_INT 3
10942: PPUSH
10943: LD_INT 0
10945: PPUSH
10946: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10950: LD_ADDR_EXP 55
10954: PUSH
10955: LD_EXP 55
10959: PPUSH
10960: LD_EXP 55
10964: PUSH
10965: LD_INT 1
10967: PLUS
10968: PPUSH
10969: LD_VAR 0 5
10973: PPUSH
10974: CALL_OW 1
10978: ST_TO_ADDR
// end ;
10979: GO 10882
10981: POP
10982: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10983: LD_ADDR_VAR 0 7
10987: PUSH
10988: LD_INT 72
10990: PUSH
10991: LD_INT 12
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: ST_TO_ADDR
// for i := 1 to tmp do
10998: LD_ADDR_VAR 0 2
11002: PUSH
11003: DOUBLE
11004: LD_INT 1
11006: DEC
11007: ST_TO_ADDR
11008: LD_VAR 0 7
11012: PUSH
11013: FOR_TO
11014: IFFALSE 11131
// for j := 1 to 6 do
11016: LD_ADDR_VAR 0 3
11020: PUSH
11021: DOUBLE
11022: LD_INT 1
11024: DEC
11025: ST_TO_ADDR
11026: LD_INT 6
11028: PUSH
11029: FOR_TO
11030: IFFALSE 11127
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11032: LD_INT 0
11034: PPUSH
11035: LD_INT 3
11037: PPUSH
11038: LD_INT 4
11040: PUSH
11041: LD_INT 5
11043: PUSH
11044: LD_INT 5
11046: PUSH
11047: LD_INT 6
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: LD_OWVAR 67
11060: ARRAY
11061: PPUSH
11062: CALL_OW 380
// un := CreateHuman ;
11066: LD_ADDR_VAR 0 5
11070: PUSH
11071: CALL_OW 44
11075: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
11076: LD_VAR 0 5
11080: PPUSH
11081: LD_VAR 0 7
11085: PUSH
11086: LD_VAR 0 2
11090: ARRAY
11091: PPUSH
11092: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11096: LD_ADDR_EXP 55
11100: PUSH
11101: LD_EXP 55
11105: PPUSH
11106: LD_EXP 55
11110: PUSH
11111: LD_INT 1
11113: PLUS
11114: PPUSH
11115: LD_VAR 0 5
11119: PPUSH
11120: CALL_OW 1
11124: ST_TO_ADDR
// end ;
11125: GO 11029
11127: POP
11128: POP
11129: GO 11013
11131: POP
11132: POP
// for i := 1 to 3 do
11133: LD_ADDR_VAR 0 2
11137: PUSH
11138: DOUBLE
11139: LD_INT 1
11141: DEC
11142: ST_TO_ADDR
11143: LD_INT 3
11145: PUSH
11146: FOR_TO
11147: IFFALSE 11236
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11149: LD_INT 0
11151: PPUSH
11152: LD_INT 4
11154: PPUSH
11155: LD_INT 4
11157: PUSH
11158: LD_INT 5
11160: PUSH
11161: LD_INT 5
11163: PUSH
11164: LD_INT 6
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: LD_OWVAR 67
11177: ARRAY
11178: PPUSH
11179: CALL_OW 380
// un := CreateHuman ;
11183: LD_ADDR_VAR 0 5
11187: PUSH
11188: CALL_OW 44
11192: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
11193: LD_VAR 0 5
11197: PPUSH
11198: LD_INT 17
11200: PPUSH
11201: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11205: LD_ADDR_EXP 55
11209: PUSH
11210: LD_EXP 55
11214: PPUSH
11215: LD_EXP 55
11219: PUSH
11220: LD_INT 1
11222: PLUS
11223: PPUSH
11224: LD_VAR 0 5
11228: PPUSH
11229: CALL_OW 1
11233: ST_TO_ADDR
// end ;
11234: GO 11146
11236: POP
11237: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
11238: LD_ADDR_VAR 0 2
11242: PUSH
11243: DOUBLE
11244: LD_INT 1
11246: DEC
11247: ST_TO_ADDR
11248: LD_INT 2
11250: PUSH
11251: LD_INT 3
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: PUSH
11266: LD_OWVAR 67
11270: ARRAY
11271: PUSH
11272: FOR_TO
11273: IFFALSE 11393
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
11275: LD_INT 22
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: LD_INT 52
11286: PPUSH
11287: LD_INT 100
11289: PPUSH
11290: CALL 30127 0 5
// veh := CreateVehicle ;
11294: LD_ADDR_VAR 0 6
11298: PUSH
11299: CALL_OW 45
11303: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
11304: LD_INT 0
11306: PPUSH
11307: LD_INT 3
11309: PPUSH
11310: LD_INT 4
11312: PPUSH
11313: CALL_OW 380
// un := CreateHuman ;
11317: LD_ADDR_VAR 0 5
11321: PUSH
11322: CALL_OW 44
11326: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
11327: LD_VAR 0 6
11331: PPUSH
11332: LD_INT 107
11334: PPUSH
11335: LD_INT 182
11337: PPUSH
11338: LD_INT 4
11340: PPUSH
11341: LD_INT 0
11343: PPUSH
11344: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11348: LD_VAR 0 5
11352: PPUSH
11353: LD_VAR 0 6
11357: PPUSH
11358: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11362: LD_ADDR_EXP 55
11366: PUSH
11367: LD_EXP 55
11371: PPUSH
11372: LD_EXP 55
11376: PUSH
11377: LD_INT 1
11379: PLUS
11380: PPUSH
11381: LD_VAR 0 5
11385: PPUSH
11386: CALL_OW 1
11390: ST_TO_ADDR
// end ;
11391: GO 11272
11393: POP
11394: POP
// InitHc ;
11395: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 , 12 ] [ Difficulty ] do
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: DOUBLE
11405: LD_INT 1
11407: DEC
11408: ST_TO_ADDR
11409: LD_INT 6
11411: PUSH
11412: LD_INT 8
11414: PUSH
11415: LD_INT 10
11417: PUSH
11418: LD_INT 12
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: PUSH
11427: LD_OWVAR 67
11431: ARRAY
11432: PUSH
11433: FOR_TO
11434: IFFALSE 11506
// begin uc_nation := 0 ;
11436: LD_ADDR_OWVAR 21
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11444: LD_ADDR_OWVAR 28
11448: PUSH
11449: LD_INT 15
11451: ST_TO_ADDR
// un := CreateHuman ;
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: CALL_OW 44
11461: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11462: LD_VAR 0 5
11466: PPUSH
11467: LD_INT 269
11469: PUSH
11470: LD_INT 300
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_VAR 0 2
11481: PUSH
11482: LD_INT 2
11484: MOD
11485: PUSH
11486: LD_INT 1
11488: PLUS
11489: ARRAY
11490: PPUSH
11491: LD_INT 182
11493: PPUSH
11494: LD_INT 4
11496: PPUSH
11497: LD_INT 0
11499: PPUSH
11500: CALL_OW 50
// end ;
11504: GO 11433
11506: POP
11507: POP
// uc_nation := 3 ;
11508: LD_ADDR_OWVAR 21
11512: PUSH
11513: LD_INT 3
11515: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
11516: LD_EXP 8
11520: PUSH
11521: LD_INT 10
11523: PUSH
11524: LD_INT 8
11526: PUSH
11527: LD_INT 6
11529: PUSH
11530: LD_INT 5
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: PUSH
11539: LD_OWVAR 67
11543: ARRAY
11544: LESS
11545: IFFALSE 11624
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11547: LD_INT 21
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: LD_INT 51
11558: PPUSH
11559: LD_INT 12
11561: PPUSH
11562: CALL 30127 0 5
// veh := CreateVehicle ;
11566: LD_ADDR_VAR 0 6
11570: PUSH
11571: CALL_OW 45
11575: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11576: LD_VAR 0 6
11580: PPUSH
11581: LD_INT 269
11583: PPUSH
11584: LD_INT 66
11586: PPUSH
11587: LD_INT 4
11589: PPUSH
11590: LD_INT 0
11592: PPUSH
11593: CALL 63931 0 5
// SetLives ( veh , 333 ) ;
11597: LD_VAR 0 6
11601: PPUSH
11602: LD_INT 333
11604: PPUSH
11605: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11609: LD_VAR 0 6
11613: PPUSH
11614: LD_INT 2
11616: PPUSH
11617: LD_INT 100
11619: PPUSH
11620: CALL_OW 290
// end ; end ;
11624: LD_VAR 0 1
11628: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11629: LD_EXP 51
11633: PUSH
11634: LD_EXP 51
11638: PPUSH
11639: CALL_OW 255
11643: PUSH
11644: LD_INT 3
11646: EQUAL
11647: AND
11648: IFFALSE 11811
11650: GO 11652
11652: DISABLE
11653: LD_INT 0
11655: PPUSH
// begin enable ;
11656: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11657: LD_INT 81
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 91
11669: PUSH
11670: LD_EXP 51
11674: PUSH
11675: LD_INT 15
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 69
11691: IFFALSE 11771
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11693: LD_EXP 51
11697: PPUSH
11698: CALL_OW 311
11702: NOT
11703: IFFALSE 11769
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11705: LD_ADDR_VAR 0 1
11709: PUSH
11710: LD_INT 22
11712: PUSH
11713: LD_INT 3
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 21
11722: PUSH
11723: LD_INT 1
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PPUSH
11739: LD_EXP 51
11743: PPUSH
11744: CALL_OW 74
11748: ST_TO_ADDR
// if driver then
11749: LD_VAR 0 1
11753: IFFALSE 11769
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11755: LD_VAR 0 1
11759: PPUSH
11760: LD_EXP 51
11764: PPUSH
11765: CALL_OW 120
// end ; exit ;
11769: GO 11811
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11771: LD_EXP 51
11775: PPUSH
11776: CALL_OW 256
11780: PUSH
11781: LD_INT 1000
11783: LESS
11784: PUSH
11785: LD_EXP 51
11789: PPUSH
11790: CALL_OW 311
11794: AND
11795: IFFALSE 11811
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11797: LD_EXP 51
11801: PPUSH
11802: CALL_OW 311
11806: PPUSH
11807: CALL 63491 0 1
// end ;
11811: PPOPN 1
11813: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11814: LD_EXP 53
11818: PPUSH
11819: LD_INT 3
11821: PUSH
11822: LD_INT 24
11824: PUSH
11825: LD_INT 1000
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 72
11840: PUSH
11841: LD_EXP 53
11845: PPUSH
11846: LD_INT 25
11848: PUSH
11849: LD_INT 4
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 50
11858: PUSH
11859: EMPTY
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 72
11870: AND
11871: IFFALSE 12059
11873: GO 11875
11875: DISABLE
11876: LD_INT 0
11878: PPUSH
11879: PPUSH
11880: PPUSH
// begin enable ;
11881: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11882: LD_ADDR_VAR 0 3
11886: PUSH
11887: LD_EXP 53
11891: PPUSH
11892: LD_INT 3
11894: PUSH
11895: LD_INT 24
11897: PUSH
11898: LD_INT 1000
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PPUSH
11909: CALL_OW 72
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL 63731 0 2
11921: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11922: LD_ADDR_VAR 0 2
11926: PUSH
11927: LD_EXP 53
11931: PPUSH
11932: LD_INT 25
11934: PUSH
11935: LD_INT 4
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 50
11944: PUSH
11945: EMPTY
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 72
11956: PUSH
11957: LD_INT 1
11959: ARRAY
11960: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11961: LD_VAR 0 2
11965: PPUSH
11966: LD_VAR 0 3
11970: PUSH
11971: LD_INT 1
11973: ARRAY
11974: PPUSH
11975: CALL 59230 0 2
11979: NOT
11980: IFFALSE 12059
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: PPUSH
11991: LD_INT 9
11993: PPUSH
11994: CALL_OW 308
11998: NOT
11999: IFFALSE 12017
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
12001: LD_VAR 0 3
12005: PUSH
12006: LD_INT 1
12008: ARRAY
12009: PPUSH
12010: LD_INT 9
12012: PPUSH
12013: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
12017: LD_VAR 0 2
12021: PPUSH
12022: LD_VAR 0 3
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PPUSH
12031: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
12035: LD_VAR 0 2
12039: PPUSH
12040: LD_INT 179
12042: PPUSH
12043: LD_INT 113
12045: PPUSH
12046: CALL_OW 171
// AddComHold ( sci ) ;
12050: LD_VAR 0 2
12054: PPUSH
12055: CALL_OW 200
// end ; end ;
12059: PPOPN 3
12061: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
12062: LD_INT 2
12064: PPUSH
12065: LD_INT 52
12067: PPUSH
12068: CALL_OW 292
12072: IFFALSE 12177
12074: GO 12076
12076: DISABLE
12077: LD_INT 0
12079: PPUSH
12080: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
12081: LD_ADDR_VAR 0 2
12085: PUSH
12086: LD_EXP 55
12090: PPUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 50
12103: PUSH
12104: EMPTY
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 72
12115: ST_TO_ADDR
// if not tmp then
12116: LD_VAR 0 2
12120: NOT
12121: IFFALSE 12125
// exit ;
12123: GO 12177
// for i in tmp do
12125: LD_ADDR_VAR 0 1
12129: PUSH
12130: LD_VAR 0 2
12134: PUSH
12135: FOR_IN
12136: IFFALSE 12175
// begin if IsInUnit ( i ) then
12138: LD_VAR 0 1
12142: PPUSH
12143: CALL_OW 310
12147: IFFALSE 12158
// ComExitBuilding ( i ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
12158: LD_VAR 0 1
12162: PPUSH
12163: LD_INT 84
12165: PPUSH
12166: LD_INT 133
12168: PPUSH
12169: CALL_OW 174
// end ;
12173: GO 12135
12175: POP
12176: POP
// end ;
12177: PPOPN 2
12179: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
12180: LD_EXP 14
12184: IFFALSE 12333
12186: GO 12188
12188: DISABLE
12189: LD_INT 0
12191: PPUSH
12192: PPUSH
12193: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
12194: LD_ADDR_VAR 0 2
12198: PUSH
12199: LD_INT 72
12201: PUSH
12202: LD_INT 12
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket , ru_gun ] , [ ru_rocket , ru_heavy_gun ] ] [ Difficulty ] ;
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_INT 44
12216: PUSH
12217: LD_INT 43
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 47
12226: PUSH
12227: LD_INT 44
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 47
12236: PUSH
12237: LD_INT 46
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: PUSH
12249: LD_OWVAR 67
12253: ARRAY
12254: ST_TO_ADDR
// for i := 1 to 6 do
12255: LD_ADDR_VAR 0 1
12259: PUSH
12260: DOUBLE
12261: LD_INT 1
12263: DEC
12264: ST_TO_ADDR
12265: LD_INT 6
12267: PUSH
12268: FOR_TO
12269: IFFALSE 12331
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
12271: LD_VAR 0 2
12275: PPUSH
12276: LD_INT 22
12278: PUSH
12279: LD_INT 23
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: LD_VAR 0 1
12290: PUSH
12291: LD_INT 2
12293: MOD
12294: PUSH
12295: LD_INT 1
12297: PLUS
12298: ARRAY
12299: PPUSH
12300: LD_INT 1
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: LD_VAR 0 3
12310: PUSH
12311: LD_VAR 0 1
12315: PUSH
12316: LD_INT 2
12318: MOD
12319: PUSH
12320: LD_INT 1
12322: PLUS
12323: ARRAY
12324: PPUSH
12325: CALL_OW 185
12329: GO 12268
12331: POP
12332: POP
// end ;
12333: PPOPN 3
12335: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
12336: LD_EXP 11
12340: IFFALSE 13489
12342: GO 12344
12344: DISABLE
12345: LD_INT 0
12347: PPUSH
12348: PPUSH
12349: PPUSH
12350: PPUSH
12351: PPUSH
12352: PPUSH
// begin enable ;
12353: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
12354: LD_ADDR_VAR 0 6
12358: PUSH
12359: LD_INT 10
12361: PPUSH
12362: LD_INT 81
12364: PUSH
12365: LD_INT 3
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 70
12376: ST_TO_ADDR
// if ruSpecialVehicleGroup then
12377: LD_EXP 56
12381: IFFALSE 12647
// begin for i in ruSpecialVehicleGroup do
12383: LD_ADDR_VAR 0 1
12387: PUSH
12388: LD_EXP 56
12392: PUSH
12393: FOR_IN
12394: IFFALSE 12645
// begin if enemyInBase then
12396: LD_VAR 0 6
12400: IFFALSE 12643
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 256
12411: PUSH
12412: LD_INT 500
12414: GREATER
12415: PUSH
12416: LD_VAR 0 1
12420: PPUSH
12421: CALL_OW 110
12425: PUSH
12426: LD_INT 0
12428: EQUAL
12429: AND
12430: IFFALSE 12456
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_VAR 0 6
12441: PPUSH
12442: LD_VAR 0 1
12446: PPUSH
12447: CALL_OW 74
12451: PPUSH
12452: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12456: LD_VAR 0 1
12460: PPUSH
12461: CALL_OW 256
12465: PUSH
12466: LD_INT 500
12468: LESSEQUAL
12469: PUSH
12470: LD_VAR 0 1
12474: PPUSH
12475: CALL_OW 110
12479: PUSH
12480: LD_INT 0
12482: EQUAL
12483: AND
12484: IFFALSE 12513
// begin SetTag ( i , 1 ) ;
12486: LD_VAR 0 1
12490: PPUSH
12491: LD_INT 1
12493: PPUSH
12494: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12498: LD_VAR 0 1
12502: PPUSH
12503: LD_INT 83
12505: PPUSH
12506: LD_INT 134
12508: PPUSH
12509: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12513: LD_VAR 0 1
12517: PPUSH
12518: CALL_OW 256
12522: PUSH
12523: LD_INT 1000
12525: LESS
12526: PUSH
12527: LD_VAR 0 1
12531: PPUSH
12532: CALL_OW 110
12536: PUSH
12537: LD_INT 1
12539: EQUAL
12540: AND
12541: PUSH
12542: LD_VAR 0 1
12546: PPUSH
12547: LD_INT 83
12549: PPUSH
12550: LD_INT 134
12552: PPUSH
12553: CALL_OW 297
12557: PUSH
12558: LD_INT 6
12560: LESS
12561: AND
12562: IFFALSE 12590
// begin SetFuel ( i , 100 ) ;
12564: LD_VAR 0 1
12568: PPUSH
12569: LD_INT 100
12571: PPUSH
12572: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12576: LD_VAR 0 1
12580: PPUSH
12581: CALL_OW 310
12585: PPUSH
12586: CALL 63611 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12590: LD_VAR 0 1
12594: PPUSH
12595: CALL_OW 256
12599: PUSH
12600: LD_INT 1000
12602: EQUAL
12603: PUSH
12604: LD_VAR 0 1
12608: PPUSH
12609: CALL_OW 110
12613: PUSH
12614: LD_INT 1
12616: EQUAL
12617: AND
12618: PUSH
12619: LD_VAR 0 1
12623: PPUSH
12624: CALL_OW 311
12628: AND
12629: IFFALSE 12643
// SetTag ( i , 0 ) ;
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_INT 0
12638: PPUSH
12639: CALL_OW 109
// end ; end ;
12643: GO 12393
12645: POP
12646: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12647: LD_ADDR_VAR 0 5
12651: PUSH
12652: LD_EXP 55
12656: PPUSH
12657: LD_INT 25
12659: PUSH
12660: LD_INT 4
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PPUSH
12667: CALL_OW 72
12671: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12672: LD_ADDR_VAR 0 4
12676: PUSH
12677: LD_EXP 55
12681: PPUSH
12682: LD_INT 92
12684: PUSH
12685: LD_INT 92
12687: PUSH
12688: LD_INT 155
12690: PUSH
12691: LD_INT 12
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 3
12702: PUSH
12703: LD_INT 24
12705: PUSH
12706: LD_INT 1000
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PPUSH
12721: CALL_OW 72
12725: ST_TO_ADDR
// if sci then
12726: LD_VAR 0 5
12730: IFFALSE 12863
// begin if hurt then
12732: LD_VAR 0 4
12736: IFFALSE 12809
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12738: LD_VAR 0 5
12742: PPUSH
12743: LD_INT 3
12745: PUSH
12746: LD_INT 54
12748: PUSH
12749: EMPTY
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PPUSH
12756: CALL_OW 72
12760: IFFALSE 12789
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12762: LD_VAR 0 5
12766: PPUSH
12767: LD_INT 3
12769: PUSH
12770: LD_INT 54
12772: PUSH
12773: EMPTY
12774: LIST
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PPUSH
12780: CALL_OW 72
12784: PPUSH
12785: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12789: LD_VAR 0 5
12793: PPUSH
12794: LD_VAR 0 4
12798: PUSH
12799: LD_INT 1
12801: ARRAY
12802: PPUSH
12803: CALL_OW 188
// end else
12807: GO 12863
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12809: LD_VAR 0 5
12813: PPUSH
12814: LD_INT 3
12816: PUSH
12817: LD_INT 54
12819: PUSH
12820: EMPTY
12821: LIST
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PPUSH
12827: CALL_OW 72
12831: IFFALSE 12863
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12833: LD_VAR 0 5
12837: PPUSH
12838: LD_INT 3
12840: PUSH
12841: LD_INT 54
12843: PUSH
12844: EMPTY
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PPUSH
12851: CALL_OW 72
12855: PPUSH
12856: LD_INT 17
12858: PPUSH
12859: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12863: LD_ADDR_VAR 0 3
12867: PUSH
12868: LD_INT 10
12870: PPUSH
12871: LD_INT 21
12873: PUSH
12874: LD_INT 3
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: LD_INT 24
12886: PUSH
12887: LD_INT 1000
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PPUSH
12902: CALL_OW 70
12906: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12907: LD_ADDR_VAR 0 2
12911: PUSH
12912: LD_EXP 55
12916: PPUSH
12917: LD_INT 25
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 72
12931: PUSH
12932: LD_INT 22
12934: PUSH
12935: LD_INT 3
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 34
12944: PUSH
12945: LD_INT 52
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PPUSH
12956: CALL_OW 69
12960: UNION
12961: ST_TO_ADDR
// if not tmp then
12962: LD_VAR 0 2
12966: NOT
12967: IFFALSE 12971
// exit ;
12969: GO 13489
// for i in tmp do
12971: LD_ADDR_VAR 0 1
12975: PUSH
12976: LD_VAR 0 2
12980: PUSH
12981: FOR_IN
12982: IFFALSE 13487
// begin if GetClass ( i ) = 2 then
12984: LD_VAR 0 1
12988: PPUSH
12989: CALL_OW 257
12993: PUSH
12994: LD_INT 2
12996: EQUAL
12997: IFFALSE 13220
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12999: LD_VAR 0 1
13003: PPUSH
13004: CALL_OW 256
13008: PUSH
13009: LD_INT 1000
13011: EQUAL
13012: PUSH
13013: LD_VAR 0 1
13017: PPUSH
13018: CALL_OW 110
13022: PUSH
13023: LD_INT 1
13025: EQUAL
13026: AND
13027: IFFALSE 13041
// SetTag ( i , 0 ) ;
13029: LD_VAR 0 1
13033: PPUSH
13034: LD_INT 0
13036: PPUSH
13037: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13041: LD_VAR 0 1
13045: PPUSH
13046: CALL_OW 256
13050: PUSH
13051: LD_INT 500
13053: LESSEQUAL
13054: PUSH
13055: LD_VAR 0 1
13059: PPUSH
13060: CALL_OW 110
13064: PUSH
13065: LD_INT 0
13067: EQUAL
13068: AND
13069: IFFALSE 13098
// begin SetTag ( i , 1 ) ;
13071: LD_VAR 0 1
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
13083: LD_VAR 0 1
13087: PPUSH
13088: LD_INT 92
13090: PPUSH
13091: LD_INT 155
13093: PPUSH
13094: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
13098: LD_VAR 0 3
13102: PUSH
13103: LD_VAR 0 1
13107: PPUSH
13108: CALL_OW 256
13112: PUSH
13113: LD_INT 500
13115: GREATER
13116: AND
13117: PUSH
13118: LD_VAR 0 1
13122: PPUSH
13123: CALL_OW 110
13127: PUSH
13128: LD_INT 0
13130: EQUAL
13131: AND
13132: PUSH
13133: LD_VAR 0 1
13137: PPUSH
13138: CALL_OW 314
13142: NOT
13143: AND
13144: IFFALSE 13218
// begin if b then
13146: LD_VAR 0 3
13150: IFFALSE 13182
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13152: LD_VAR 0 1
13156: PPUSH
13157: LD_VAR 0 3
13161: PUSH
13162: LD_INT 1
13164: PPUSH
13165: LD_VAR 0 3
13169: PPUSH
13170: CALL_OW 12
13174: ARRAY
13175: PPUSH
13176: CALL_OW 130
13180: GO 13218
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13182: LD_VAR 0 1
13186: PPUSH
13187: LD_INT 94
13189: PPUSH
13190: LD_INT 165
13192: PPUSH
13193: CALL_OW 297
13197: PUSH
13198: LD_INT 8
13200: GREATER
13201: IFFALSE 13218
// ComMoveXY ( i , 94 , 165 ) ;
13203: LD_VAR 0 1
13207: PPUSH
13208: LD_INT 94
13210: PPUSH
13211: LD_INT 165
13213: PPUSH
13214: CALL_OW 111
// end ; end else
13218: GO 13485
// if GetWeapon ( i ) = ru_crane then
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 264
13229: PUSH
13230: LD_INT 52
13232: EQUAL
13233: IFFALSE 13485
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13235: LD_VAR 0 1
13239: PPUSH
13240: CALL_OW 256
13244: PUSH
13245: LD_INT 1000
13247: EQUAL
13248: PUSH
13249: LD_VAR 0 1
13253: PPUSH
13254: CALL_OW 110
13258: PUSH
13259: LD_INT 1
13261: EQUAL
13262: AND
13263: IFFALSE 13289
// begin SetTag ( i , 0 ) ;
13265: LD_VAR 0 1
13269: PPUSH
13270: LD_INT 0
13272: PPUSH
13273: CALL_OW 109
// SetFuel ( i , 100 ) ;
13277: LD_VAR 0 1
13281: PPUSH
13282: LD_INT 100
13284: PPUSH
13285: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13289: LD_VAR 0 1
13293: PPUSH
13294: CALL_OW 256
13298: PUSH
13299: LD_INT 500
13301: LESSEQUAL
13302: PUSH
13303: LD_VAR 0 1
13307: PPUSH
13308: CALL_OW 110
13312: PUSH
13313: LD_INT 0
13315: EQUAL
13316: AND
13317: IFFALSE 13360
// begin SetTag ( i , 1 ) ;
13319: LD_VAR 0 1
13323: PPUSH
13324: LD_INT 1
13326: PPUSH
13327: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
13331: LD_VAR 0 1
13335: PPUSH
13336: LD_INT 83
13338: PPUSH
13339: LD_INT 135
13341: PPUSH
13342: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL_OW 310
13355: PPUSH
13356: CALL 63611 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
13360: LD_VAR 0 1
13364: PPUSH
13365: CALL_OW 256
13369: PUSH
13370: LD_INT 500
13372: GREATER
13373: PUSH
13374: LD_VAR 0 1
13378: PPUSH
13379: CALL_OW 110
13383: PUSH
13384: LD_INT 0
13386: EQUAL
13387: AND
13388: PUSH
13389: LD_VAR 0 1
13393: PPUSH
13394: CALL_OW 311
13398: AND
13399: PUSH
13400: LD_VAR 0 1
13404: PPUSH
13405: CALL_OW 314
13409: NOT
13410: AND
13411: IFFALSE 13485
// begin if b then
13413: LD_VAR 0 3
13417: IFFALSE 13449
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13419: LD_VAR 0 1
13423: PPUSH
13424: LD_VAR 0 3
13428: PUSH
13429: LD_INT 1
13431: PPUSH
13432: LD_VAR 0 3
13436: PPUSH
13437: CALL_OW 12
13441: ARRAY
13442: PPUSH
13443: CALL_OW 130
13447: GO 13485
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13449: LD_VAR 0 1
13453: PPUSH
13454: LD_INT 94
13456: PPUSH
13457: LD_INT 165
13459: PPUSH
13460: CALL_OW 297
13464: PUSH
13465: LD_INT 8
13467: GREATER
13468: IFFALSE 13485
// ComMoveXY ( i , 94 , 165 ) ;
13470: LD_VAR 0 1
13474: PPUSH
13475: LD_INT 94
13477: PPUSH
13478: LD_INT 165
13480: PPUSH
13481: CALL_OW 111
// end ; end ; end ;
13485: GO 12981
13487: POP
13488: POP
// end ;
13489: PPOPN 6
13491: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13492: LD_EXP 23
13496: NOT
13497: PUSH
13498: LD_EXP 27
13502: NOT
13503: AND
13504: IFFALSE 14420
13506: GO 13508
13508: DISABLE
13509: LD_INT 0
13511: PPUSH
13512: PPUSH
13513: PPUSH
13514: PPUSH
// begin enable ;
13515: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
13516: LD_INT 35
13518: PUSH
13519: LD_INT 45
13521: PUSH
13522: LD_INT 55
13524: PUSH
13525: LD_INT 60
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_OWVAR 67
13538: ARRAY
13539: PPUSH
13540: CALL_OW 13
13544: IFFALSE 13560
// waveStrength := waveStrength + 1 ;
13546: LD_ADDR_EXP 58
13550: PUSH
13551: LD_EXP 58
13555: PUSH
13556: LD_INT 1
13558: PLUS
13559: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
13560: LD_EXP 58
13564: PUSH
13565: LD_INT 4
13567: PUSH
13568: LD_INT 5
13570: PUSH
13571: LD_INT 6
13573: PUSH
13574: LD_INT 7
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: LD_OWVAR 67
13587: ARRAY
13588: GREATER
13589: IFFALSE 13622
// begin waveStrength := waveStrength + Difficulty ;
13591: LD_ADDR_EXP 58
13595: PUSH
13596: LD_EXP 58
13600: PUSH
13601: LD_OWVAR 67
13605: PLUS
13606: ST_TO_ADDR
// disableAttackOnHeike := true ;
13607: LD_ADDR_EXP 27
13611: PUSH
13612: LD_INT 1
13614: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13615: LD_INT 6300
13617: PPUSH
13618: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13622: LD_EXP 27
13626: PUSH
13627: LD_OWVAR 67
13631: PUSH
13632: LD_INT 1
13634: GREATER
13635: AND
13636: IFFALSE 13845
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
13638: LD_ADDR_VAR 0 1
13642: PUSH
13643: DOUBLE
13644: LD_INT 1
13646: DEC
13647: ST_TO_ADDR
13648: LD_INT 3
13650: PUSH
13651: LD_INT 3
13653: PUSH
13654: LD_INT 4
13656: PUSH
13657: LD_INT 4
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: PUSH
13666: LD_OWVAR 67
13670: ARRAY
13671: PUSH
13672: FOR_TO
13673: IFFALSE 13843
// begin InitHc ;
13675: CALL_OW 19
// InitVc ;
13679: CALL_OW 20
// uc_side := 3 ;
13683: LD_ADDR_OWVAR 20
13687: PUSH
13688: LD_INT 3
13690: ST_TO_ADDR
// uc_nation := 3 ;
13691: LD_ADDR_OWVAR 21
13695: PUSH
13696: LD_INT 3
13698: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13699: LD_INT 0
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: LD_OWVAR 67
13709: PUSH
13710: LD_INT 2
13712: PLUS
13713: PPUSH
13714: CALL_OW 380
// un := CreateHuman ;
13718: LD_ADDR_VAR 0 2
13722: PUSH
13723: CALL_OW 44
13727: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13728: LD_VAR 0 2
13732: PPUSH
13733: LD_INT 160
13735: PPUSH
13736: LD_INT 3
13738: PPUSH
13739: LD_INT 2
13741: PPUSH
13742: LD_INT 0
13744: PPUSH
13745: CALL 63931 0 5
// SetClass ( un , class_bazooker ) ;
13749: LD_VAR 0 2
13753: PPUSH
13754: LD_INT 9
13756: PPUSH
13757: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13761: LD_ADDR_EXP 57
13765: PUSH
13766: LD_EXP 57
13770: PPUSH
13771: LD_EXP 57
13775: PUSH
13776: LD_INT 1
13778: PLUS
13779: PPUSH
13780: LD_VAR 0 2
13784: PPUSH
13785: CALL_OW 1
13789: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_INT 177
13797: PPUSH
13798: LD_INT 17
13800: PPUSH
13801: CALL_OW 111
// wait ( 0 0$2 ) ;
13805: LD_INT 70
13807: PPUSH
13808: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13812: LD_ADDR_VAR 0 4
13816: PUSH
13817: LD_VAR 0 4
13821: PPUSH
13822: LD_VAR 0 4
13826: PUSH
13827: LD_INT 1
13829: PLUS
13830: PPUSH
13831: LD_VAR 0 2
13835: PPUSH
13836: CALL_OW 1
13840: ST_TO_ADDR
// end ;
13841: GO 13672
13843: POP
13844: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
13845: LD_ADDR_VAR 0 1
13849: PUSH
13850: DOUBLE
13851: LD_INT 1
13853: DEC
13854: ST_TO_ADDR
13855: LD_INT 2
13857: PUSH
13858: LD_INT 3
13860: PUSH
13861: LD_INT 4
13863: PUSH
13864: LD_INT 5
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_OWVAR 67
13877: ARRAY
13878: PUSH
13879: LD_EXP 58
13883: PLUS
13884: PUSH
13885: FOR_TO
13886: IFFALSE 14195
// begin InitHc ;
13888: CALL_OW 19
// InitVc ;
13892: CALL_OW 20
// uc_side := 3 ;
13896: LD_ADDR_OWVAR 20
13900: PUSH
13901: LD_INT 3
13903: ST_TO_ADDR
// uc_nation := 3 ;
13904: LD_ADDR_OWVAR 21
13908: PUSH
13909: LD_INT 3
13911: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13912: LD_INT 22
13914: PUSH
13915: LD_INT 23
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 1
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: CALL_OW 12
13932: ARRAY
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: LD_INT 1
13939: PPUSH
13940: LD_INT 44
13942: PUSH
13943: LD_INT 45
13945: PUSH
13946: LD_INT 43
13948: PUSH
13949: LD_INT 42
13951: PUSH
13952: LD_INT 44
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 1
13964: PPUSH
13965: LD_INT 5
13967: PPUSH
13968: CALL_OW 12
13972: ARRAY
13973: PPUSH
13974: LD_INT 99
13976: PPUSH
13977: CALL 30127 0 5
// veh := CreateVehicle ;
13981: LD_ADDR_VAR 0 3
13985: PUSH
13986: CALL_OW 45
13990: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13991: LD_VAR 0 3
13995: PPUSH
13996: LD_INT 160
13998: PPUSH
13999: LD_INT 3
14001: PPUSH
14002: LD_INT 2
14004: PPUSH
14005: LD_INT 0
14007: PPUSH
14008: CALL 63931 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14012: LD_ADDR_EXP 57
14016: PUSH
14017: LD_EXP 57
14021: PPUSH
14022: LD_EXP 57
14026: PUSH
14027: LD_INT 1
14029: PLUS
14030: PPUSH
14031: LD_VAR 0 3
14035: PPUSH
14036: CALL_OW 1
14040: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14041: LD_INT 0
14043: PPUSH
14044: LD_INT 3
14046: PPUSH
14047: LD_OWVAR 67
14051: PUSH
14052: LD_INT 2
14054: PLUS
14055: PPUSH
14056: CALL_OW 380
// un := CreateHuman ;
14060: LD_ADDR_VAR 0 2
14064: PUSH
14065: CALL_OW 44
14069: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_VAR 0 3
14079: PPUSH
14080: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14084: LD_ADDR_EXP 57
14088: PUSH
14089: LD_EXP 57
14093: PPUSH
14094: LD_EXP 57
14098: PUSH
14099: LD_INT 1
14101: PLUS
14102: PPUSH
14103: LD_VAR 0 2
14107: PPUSH
14108: CALL_OW 1
14112: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
14113: LD_VAR 0 2
14117: PPUSH
14118: LD_INT 177
14120: PPUSH
14121: LD_INT 17
14123: PPUSH
14124: CALL_OW 111
// wait ( 0 0$2 ) ;
14128: LD_INT 70
14130: PPUSH
14131: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14135: LD_ADDR_VAR 0 4
14139: PUSH
14140: LD_VAR 0 4
14144: PPUSH
14145: LD_VAR 0 4
14149: PUSH
14150: LD_INT 1
14152: PLUS
14153: PPUSH
14154: LD_VAR 0 3
14158: PPUSH
14159: CALL_OW 1
14163: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14164: LD_ADDR_VAR 0 4
14168: PUSH
14169: LD_VAR 0 4
14173: PPUSH
14174: LD_VAR 0 4
14178: PUSH
14179: LD_INT 1
14181: PLUS
14182: PPUSH
14183: LD_VAR 0 2
14187: PPUSH
14188: CALL_OW 1
14192: ST_TO_ADDR
// end ;
14193: GO 13885
14195: POP
14196: POP
// for i in tmp do
14197: LD_ADDR_VAR 0 1
14201: PUSH
14202: LD_VAR 0 4
14206: PUSH
14207: FOR_IN
14208: IFFALSE 14298
// begin if Prob ( 50 ) then
14210: LD_INT 50
14212: PPUSH
14213: CALL_OW 13
14217: IFFALSE 14236
// ComAgressiveMove ( i , 206 , 73 ) else
14219: LD_VAR 0 1
14223: PPUSH
14224: LD_INT 206
14226: PPUSH
14227: LD_INT 73
14229: PPUSH
14230: CALL_OW 114
14234: GO 14296
// begin ComAgressiveMove ( i , 206 , 73 ) ;
14236: LD_VAR 0 1
14240: PPUSH
14241: LD_INT 206
14243: PPUSH
14244: LD_INT 73
14246: PPUSH
14247: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
14251: LD_VAR 0 1
14255: PPUSH
14256: LD_INT 257
14258: PPUSH
14259: LD_INT 105
14261: PPUSH
14262: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
14266: LD_VAR 0 1
14270: PPUSH
14271: LD_INT 227
14273: PPUSH
14274: LD_INT 97
14276: PPUSH
14277: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
14281: LD_VAR 0 1
14285: PPUSH
14286: LD_INT 206
14288: PPUSH
14289: LD_INT 73
14291: PPUSH
14292: CALL_OW 174
// end ; end ;
14296: GO 14207
14298: POP
14299: POP
// repeat wait ( 0 0$1 ) ;
14300: LD_INT 35
14302: PPUSH
14303: CALL_OW 67
// for i in tmp do
14307: LD_ADDR_VAR 0 1
14311: PUSH
14312: LD_VAR 0 4
14316: PUSH
14317: FOR_IN
14318: IFFALSE 14397
// if IsDead ( i ) then
14320: LD_VAR 0 1
14324: PPUSH
14325: CALL_OW 301
14329: IFFALSE 14349
// tmp := tmp diff i else
14331: LD_ADDR_VAR 0 4
14335: PUSH
14336: LD_VAR 0 4
14340: PUSH
14341: LD_VAR 0 1
14345: DIFF
14346: ST_TO_ADDR
14347: GO 14395
// if not HasTask ( i ) then
14349: LD_VAR 0 1
14353: PPUSH
14354: CALL_OW 314
14358: NOT
14359: IFFALSE 14395
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14361: LD_VAR 0 1
14365: PPUSH
14366: LD_INT 81
14368: PUSH
14369: LD_INT 3
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PPUSH
14376: CALL_OW 69
14380: PPUSH
14381: LD_VAR 0 1
14385: PPUSH
14386: CALL_OW 74
14390: PPUSH
14391: CALL_OW 115
14395: GO 14317
14397: POP
14398: POP
// until not tmp ;
14399: LD_VAR 0 4
14403: NOT
14404: IFFALSE 14300
// if firstAttack then
14406: LD_EXP 28
14410: IFFALSE 14420
// firstAttack := false ;
14412: LD_ADDR_EXP 28
14416: PUSH
14417: LD_INT 0
14419: ST_TO_ADDR
// end ;
14420: PPOPN 4
14422: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
14423: LD_EXP 23
14427: NOT
14428: PUSH
14429: LD_EXP 3
14433: AND
14434: PUSH
14435: LD_EXP 16
14439: NOT
14440: AND
14441: IFFALSE 15281
14443: GO 14445
14445: DISABLE
14446: LD_INT 0
14448: PPUSH
14449: PPUSH
14450: PPUSH
14451: PPUSH
// begin enable ;
14452: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
14453: LD_ADDR_VAR 0 1
14457: PUSH
14458: DOUBLE
14459: LD_INT 1
14461: DEC
14462: ST_TO_ADDR
14463: LD_INT 1
14465: PUSH
14466: LD_INT 2
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: LD_INT 3
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: PUSH
14481: LD_OWVAR 67
14485: ARRAY
14486: PUSH
14487: FOR_TO
14488: IFFALSE 14789
// begin InitHc ;
14490: CALL_OW 19
// InitVc ;
14494: CALL_OW 20
// uc_side := 3 ;
14498: LD_ADDR_OWVAR 20
14502: PUSH
14503: LD_INT 3
14505: ST_TO_ADDR
// uc_nation := 3 ;
14506: LD_ADDR_OWVAR 21
14510: PUSH
14511: LD_INT 3
14513: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14514: LD_INT 22
14516: PUSH
14517: LD_INT 23
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 1
14526: PPUSH
14527: LD_INT 2
14529: PPUSH
14530: CALL_OW 12
14534: ARRAY
14535: PPUSH
14536: LD_INT 1
14538: PPUSH
14539: LD_INT 1
14541: PPUSH
14542: LD_INT 44
14544: PUSH
14545: LD_INT 43
14547: PUSH
14548: LD_INT 42
14550: PUSH
14551: LD_INT 44
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 1
14562: PPUSH
14563: LD_INT 4
14565: PPUSH
14566: CALL_OW 12
14570: ARRAY
14571: PPUSH
14572: LD_INT 99
14574: PPUSH
14575: CALL 30127 0 5
// veh := CreateVehicle ;
14579: LD_ADDR_VAR 0 3
14583: PUSH
14584: CALL_OW 45
14588: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14589: LD_VAR 0 3
14593: PPUSH
14594: LD_INT 5
14596: PPUSH
14597: LD_INT 3
14599: PPUSH
14600: LD_INT 2
14602: PPUSH
14603: LD_INT 0
14605: PPUSH
14606: CALL 63931 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14610: LD_ADDR_EXP 57
14614: PUSH
14615: LD_EXP 57
14619: PPUSH
14620: LD_EXP 57
14624: PUSH
14625: LD_INT 1
14627: PLUS
14628: PPUSH
14629: LD_VAR 0 3
14633: PPUSH
14634: CALL_OW 1
14638: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14639: LD_INT 0
14641: PPUSH
14642: LD_INT 3
14644: PPUSH
14645: LD_OWVAR 67
14649: PPUSH
14650: CALL_OW 380
// un := CreateHuman ;
14654: LD_ADDR_VAR 0 2
14658: PUSH
14659: CALL_OW 44
14663: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14664: LD_VAR 0 2
14668: PPUSH
14669: LD_VAR 0 3
14673: PPUSH
14674: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14678: LD_ADDR_EXP 57
14682: PUSH
14683: LD_EXP 57
14687: PPUSH
14688: LD_EXP 57
14692: PUSH
14693: LD_INT 1
14695: PLUS
14696: PPUSH
14697: LD_VAR 0 2
14701: PPUSH
14702: CALL_OW 1
14706: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14707: LD_VAR 0 2
14711: PPUSH
14712: LD_INT 23
14714: PPUSH
14715: LD_INT 7
14717: PPUSH
14718: CALL_OW 111
// wait ( 0 0$2 ) ;
14722: LD_INT 70
14724: PPUSH
14725: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14729: LD_ADDR_VAR 0 4
14733: PUSH
14734: LD_VAR 0 4
14738: PPUSH
14739: LD_VAR 0 4
14743: PUSH
14744: LD_INT 1
14746: PLUS
14747: PPUSH
14748: LD_VAR 0 3
14752: PPUSH
14753: CALL_OW 1
14757: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14758: LD_ADDR_VAR 0 4
14762: PUSH
14763: LD_VAR 0 4
14767: PPUSH
14768: LD_VAR 0 4
14772: PUSH
14773: LD_INT 1
14775: PLUS
14776: PPUSH
14777: LD_VAR 0 2
14781: PPUSH
14782: CALL_OW 1
14786: ST_TO_ADDR
// end ;
14787: GO 14487
14789: POP
14790: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
14791: LD_ADDR_VAR 0 1
14795: PUSH
14796: DOUBLE
14797: LD_INT 1
14799: DEC
14800: ST_TO_ADDR
14801: LD_INT 3
14803: PUSH
14804: LD_INT 4
14806: PUSH
14807: LD_INT 4
14809: PUSH
14810: LD_INT 5
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: PUSH
14819: LD_OWVAR 67
14823: ARRAY
14824: PUSH
14825: LD_EXP 58
14829: PLUS
14830: PUSH
14831: FOR_TO
14832: IFFALSE 15141
// begin InitHc ;
14834: CALL_OW 19
// InitVc ;
14838: CALL_OW 20
// uc_side := 3 ;
14842: LD_ADDR_OWVAR 20
14846: PUSH
14847: LD_INT 3
14849: ST_TO_ADDR
// uc_nation := 3 ;
14850: LD_ADDR_OWVAR 21
14854: PUSH
14855: LD_INT 3
14857: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14858: LD_INT 22
14860: PUSH
14861: LD_INT 23
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 1
14870: PPUSH
14871: LD_INT 2
14873: PPUSH
14874: CALL_OW 12
14878: ARRAY
14879: PPUSH
14880: LD_INT 1
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: LD_INT 44
14888: PUSH
14889: LD_INT 45
14891: PUSH
14892: LD_INT 43
14894: PUSH
14895: LD_INT 42
14897: PUSH
14898: LD_INT 44
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: PUSH
14908: LD_INT 1
14910: PPUSH
14911: LD_INT 5
14913: PPUSH
14914: CALL_OW 12
14918: ARRAY
14919: PPUSH
14920: LD_INT 99
14922: PPUSH
14923: CALL 30127 0 5
// veh := CreateVehicle ;
14927: LD_ADDR_VAR 0 3
14931: PUSH
14932: CALL_OW 45
14936: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14937: LD_VAR 0 3
14941: PPUSH
14942: LD_INT 127
14944: PPUSH
14945: LD_INT 243
14947: PPUSH
14948: LD_INT 0
14950: PPUSH
14951: LD_INT 0
14953: PPUSH
14954: CALL 63931 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14958: LD_ADDR_EXP 57
14962: PUSH
14963: LD_EXP 57
14967: PPUSH
14968: LD_EXP 57
14972: PUSH
14973: LD_INT 1
14975: PLUS
14976: PPUSH
14977: LD_VAR 0 3
14981: PPUSH
14982: CALL_OW 1
14986: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14987: LD_INT 0
14989: PPUSH
14990: LD_INT 3
14992: PPUSH
14993: LD_OWVAR 67
14997: PUSH
14998: LD_INT 2
15000: PLUS
15001: PPUSH
15002: CALL_OW 380
// un := CreateHuman ;
15006: LD_ADDR_VAR 0 2
15010: PUSH
15011: CALL_OW 44
15015: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15016: LD_VAR 0 2
15020: PPUSH
15021: LD_VAR 0 3
15025: PPUSH
15026: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15030: LD_ADDR_EXP 57
15034: PUSH
15035: LD_EXP 57
15039: PPUSH
15040: LD_EXP 57
15044: PUSH
15045: LD_INT 1
15047: PLUS
15048: PPUSH
15049: LD_VAR 0 2
15053: PPUSH
15054: CALL_OW 1
15058: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
15059: LD_VAR 0 2
15063: PPUSH
15064: LD_INT 130
15066: PPUSH
15067: LD_INT 233
15069: PPUSH
15070: CALL_OW 111
// wait ( 0 0$2 ) ;
15074: LD_INT 70
15076: PPUSH
15077: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15081: LD_ADDR_VAR 0 4
15085: PUSH
15086: LD_VAR 0 4
15090: PPUSH
15091: LD_VAR 0 4
15095: PUSH
15096: LD_INT 1
15098: PLUS
15099: PPUSH
15100: LD_VAR 0 3
15104: PPUSH
15105: CALL_OW 1
15109: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15110: LD_ADDR_VAR 0 4
15114: PUSH
15115: LD_VAR 0 4
15119: PPUSH
15120: LD_VAR 0 4
15124: PUSH
15125: LD_INT 1
15127: PLUS
15128: PPUSH
15129: LD_VAR 0 2
15133: PPUSH
15134: CALL_OW 1
15138: ST_TO_ADDR
// end ;
15139: GO 14831
15141: POP
15142: POP
// for i in tmp do
15143: LD_ADDR_VAR 0 1
15147: PUSH
15148: LD_VAR 0 4
15152: PUSH
15153: FOR_IN
15154: IFFALSE 15173
// ComAgressiveMove ( i , 76 , 49 ) ;
15156: LD_VAR 0 1
15160: PPUSH
15161: LD_INT 76
15163: PPUSH
15164: LD_INT 49
15166: PPUSH
15167: CALL_OW 114
15171: GO 15153
15173: POP
15174: POP
// repeat wait ( 0 0$1 ) ;
15175: LD_INT 35
15177: PPUSH
15178: CALL_OW 67
// for i in tmp do
15182: LD_ADDR_VAR 0 1
15186: PUSH
15187: LD_VAR 0 4
15191: PUSH
15192: FOR_IN
15193: IFFALSE 15272
// if IsDead ( i ) then
15195: LD_VAR 0 1
15199: PPUSH
15200: CALL_OW 301
15204: IFFALSE 15224
// tmp := tmp diff i else
15206: LD_ADDR_VAR 0 4
15210: PUSH
15211: LD_VAR 0 4
15215: PUSH
15216: LD_VAR 0 1
15220: DIFF
15221: ST_TO_ADDR
15222: GO 15270
// if not HasTask ( i ) then
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL_OW 314
15233: NOT
15234: IFFALSE 15270
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15236: LD_VAR 0 1
15240: PPUSH
15241: LD_INT 81
15243: PUSH
15244: LD_INT 3
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PPUSH
15251: CALL_OW 69
15255: PPUSH
15256: LD_VAR 0 1
15260: PPUSH
15261: CALL_OW 74
15265: PPUSH
15266: CALL_OW 115
15270: GO 15192
15272: POP
15273: POP
// until not tmp ;
15274: LD_VAR 0 4
15278: NOT
15279: IFFALSE 15175
// end ;
15281: PPOPN 4
15283: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
15284: LD_EXP 6
15288: IFFALSE 15759
15290: GO 15292
15292: DISABLE
15293: LD_INT 0
15295: PPUSH
15296: PPUSH
15297: PPUSH
15298: PPUSH
// begin wait ( 3 3$00 ) ;
15299: LD_INT 6300
15301: PPUSH
15302: CALL_OW 67
// for i := 1 to 3 do
15306: LD_ADDR_VAR 0 1
15310: PUSH
15311: DOUBLE
15312: LD_INT 1
15314: DEC
15315: ST_TO_ADDR
15316: LD_INT 3
15318: PUSH
15319: FOR_TO
15320: IFFALSE 15619
// begin InitHc ;
15322: CALL_OW 19
// InitVc ;
15326: CALL_OW 20
// uc_side := 3 ;
15330: LD_ADDR_OWVAR 20
15334: PUSH
15335: LD_INT 3
15337: ST_TO_ADDR
// uc_nation := 3 ;
15338: LD_ADDR_OWVAR 21
15342: PUSH
15343: LD_INT 3
15345: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
15346: LD_INT 22
15348: PUSH
15349: LD_INT 23
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 1
15358: PPUSH
15359: LD_INT 2
15361: PPUSH
15362: CALL_OW 12
15366: ARRAY
15367: PPUSH
15368: LD_INT 1
15370: PPUSH
15371: LD_INT 1
15373: PPUSH
15374: LD_INT 44
15376: PUSH
15377: LD_INT 43
15379: PUSH
15380: LD_INT 42
15382: PUSH
15383: LD_INT 44
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 1
15394: PPUSH
15395: LD_INT 4
15397: PPUSH
15398: CALL_OW 12
15402: ARRAY
15403: PPUSH
15404: LD_INT 99
15406: PPUSH
15407: CALL 30127 0 5
// veh := CreateVehicle ;
15411: LD_ADDR_VAR 0 3
15415: PUSH
15416: CALL_OW 45
15420: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
15421: LD_VAR 0 3
15425: PPUSH
15426: LD_INT 293
15428: PPUSH
15429: LD_INT 246
15431: PPUSH
15432: LD_INT 5
15434: PPUSH
15435: LD_INT 0
15437: PPUSH
15438: CALL 63931 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15442: LD_ADDR_EXP 57
15446: PUSH
15447: LD_EXP 57
15451: PPUSH
15452: LD_EXP 57
15456: PUSH
15457: LD_INT 1
15459: PLUS
15460: PPUSH
15461: LD_VAR 0 3
15465: PPUSH
15466: CALL_OW 1
15470: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15471: LD_INT 0
15473: PPUSH
15474: LD_INT 3
15476: PPUSH
15477: LD_INT 3
15479: PPUSH
15480: CALL_OW 380
// un := CreateHuman ;
15484: LD_ADDR_VAR 0 2
15488: PUSH
15489: CALL_OW 44
15493: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15494: LD_VAR 0 2
15498: PPUSH
15499: LD_VAR 0 3
15503: PPUSH
15504: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15508: LD_ADDR_EXP 57
15512: PUSH
15513: LD_EXP 57
15517: PPUSH
15518: LD_EXP 57
15522: PUSH
15523: LD_INT 1
15525: PLUS
15526: PPUSH
15527: LD_VAR 0 2
15531: PPUSH
15532: CALL_OW 1
15536: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15537: LD_VAR 0 2
15541: PPUSH
15542: LD_INT 273
15544: PPUSH
15545: LD_INT 227
15547: PPUSH
15548: CALL_OW 111
// wait ( 0 0$2 ) ;
15552: LD_INT 70
15554: PPUSH
15555: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15559: LD_ADDR_VAR 0 4
15563: PUSH
15564: LD_VAR 0 4
15568: PPUSH
15569: LD_VAR 0 4
15573: PUSH
15574: LD_INT 1
15576: PLUS
15577: PPUSH
15578: LD_VAR 0 3
15582: PPUSH
15583: CALL_OW 1
15587: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15588: LD_ADDR_VAR 0 4
15592: PUSH
15593: LD_VAR 0 4
15597: PPUSH
15598: LD_VAR 0 4
15602: PUSH
15603: LD_INT 1
15605: PLUS
15606: PPUSH
15607: LD_VAR 0 2
15611: PPUSH
15612: CALL_OW 1
15616: ST_TO_ADDR
// end ;
15617: GO 15319
15619: POP
15620: POP
// for i in tmp do
15621: LD_ADDR_VAR 0 1
15625: PUSH
15626: LD_VAR 0 4
15630: PUSH
15631: FOR_IN
15632: IFFALSE 15651
// ComAgressiveMove ( i , 330 , 231 ) ;
15634: LD_VAR 0 1
15638: PPUSH
15639: LD_INT 330
15641: PPUSH
15642: LD_INT 231
15644: PPUSH
15645: CALL_OW 114
15649: GO 15631
15651: POP
15652: POP
// repeat wait ( 0 0$1 ) ;
15653: LD_INT 35
15655: PPUSH
15656: CALL_OW 67
// for i in tmp do
15660: LD_ADDR_VAR 0 1
15664: PUSH
15665: LD_VAR 0 4
15669: PUSH
15670: FOR_IN
15671: IFFALSE 15750
// if IsDead ( i ) then
15673: LD_VAR 0 1
15677: PPUSH
15678: CALL_OW 301
15682: IFFALSE 15702
// tmp := tmp diff i else
15684: LD_ADDR_VAR 0 4
15688: PUSH
15689: LD_VAR 0 4
15693: PUSH
15694: LD_VAR 0 1
15698: DIFF
15699: ST_TO_ADDR
15700: GO 15748
// if not HasTask ( i ) then
15702: LD_VAR 0 1
15706: PPUSH
15707: CALL_OW 314
15711: NOT
15712: IFFALSE 15748
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15714: LD_VAR 0 1
15718: PPUSH
15719: LD_INT 81
15721: PUSH
15722: LD_INT 3
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PPUSH
15729: CALL_OW 69
15733: PPUSH
15734: LD_VAR 0 1
15738: PPUSH
15739: CALL_OW 74
15743: PPUSH
15744: CALL_OW 115
15748: GO 15670
15750: POP
15751: POP
// until not tmp ;
15752: LD_VAR 0 4
15756: NOT
15757: IFFALSE 15653
// end ;
15759: PPOPN 4
15761: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15762: LD_INT 3
15764: PUSH
15765: LD_INT 22
15767: PUSH
15768: LD_INT 2
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 32
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: IFFALSE 15881
15799: GO 15801
15801: DISABLE
15802: LD_INT 0
15804: PPUSH
// begin enable ;
15805: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15806: LD_ADDR_VAR 0 1
15810: PUSH
15811: LD_INT 3
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_INT 2
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 32
15830: PUSH
15831: LD_INT 1
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: PUSH
15847: FOR_IN
15848: IFFALSE 15879
// if GetFuel ( i ) < 3 then
15850: LD_VAR 0 1
15854: PPUSH
15855: CALL_OW 261
15859: PUSH
15860: LD_INT 3
15862: LESS
15863: IFFALSE 15877
// SetFuel ( i , 3 ) ;
15865: LD_VAR 0 1
15869: PPUSH
15870: LD_INT 3
15872: PPUSH
15873: CALL_OW 240
15877: GO 15847
15879: POP
15880: POP
// end ; end_of_file
15881: PPOPN 1
15883: END
// export function Action ; begin
15884: LD_INT 0
15886: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15887: LD_INT 2
15889: PPUSH
15890: LD_INT 4
15892: PPUSH
15893: CALL_OW 332
// Video ( true ) ;
15897: LD_INT 1
15899: PPUSH
15900: CALL 61972 0 1
// music_nat := 3 ;
15904: LD_ADDR_OWVAR 71
15908: PUSH
15909: LD_INT 3
15911: ST_TO_ADDR
// music_class := music_recon ;
15912: LD_ADDR_OWVAR 72
15916: PUSH
15917: LD_INT 3
15919: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15920: LD_INT 213
15922: PPUSH
15923: LD_INT 89
15925: PPUSH
15926: CALL_OW 86
// if not debug then
15930: LD_EXP 1
15934: NOT
15935: IFFALSE 15969
// begin if Kaia and Olaf then
15937: LD_EXP 35
15941: PUSH
15942: LD_EXP 39
15946: AND
15947: IFFALSE 15953
// SceneKaiaWithOlaf ;
15949: CALL 16008 0 0
// if Givi and Kamil then
15953: LD_EXP 31
15957: PUSH
15958: LD_EXP 34
15962: AND
15963: IFFALSE 15969
// SceneWithGiviAndKamil ;
15965: CALL 16579 0 0
// end ; Video ( false ) ;
15969: LD_INT 0
15971: PPUSH
15972: CALL 61972 0 1
// ChangeMissionObjectives ( M1 ) ;
15976: LD_STRING M1
15978: PPUSH
15979: CALL_OW 337
// music_nat := music_auto ;
15983: LD_ADDR_OWVAR 71
15987: PUSH
15988: LD_INT 0
15990: ST_TO_ADDR
// music_class := music_auto ;
15991: LD_ADDR_OWVAR 72
15995: PUSH
15996: LD_INT 0
15998: ST_TO_ADDR
// SaveForQuickRestart ;
15999: CALL_OW 22
// end ;
16003: LD_VAR 0 1
16007: RET
// export function SceneKaiaWithOlaf ; begin
16008: LD_INT 0
16010: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
16011: LD_INT 22
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 3
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: PPUSH
16040: LD_INT 14
16042: PPUSH
16043: LD_INT 1
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: LD_INT 26
16051: PPUSH
16052: CALL_OW 125
// wait ( 0 0$1 ) ;
16056: LD_INT 35
16058: PPUSH
16059: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
16063: LD_EXP 35
16067: PPUSH
16068: LD_STRING DK-Mem-1
16070: PPUSH
16071: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
16075: LD_EXP 35
16079: PPUSH
16080: LD_STRING DK-Mem-2
16082: PPUSH
16083: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
16087: LD_EXP 39
16091: PPUSH
16092: LD_STRING DO-Mem-3
16094: PPUSH
16095: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
16099: LD_EXP 35
16103: PPUSH
16104: LD_STRING DK-Mem-4
16106: PPUSH
16107: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
16111: LD_EXP 39
16115: PPUSH
16116: LD_STRING DO-Mem-5
16118: PPUSH
16119: CALL_OW 88
// wait ( 0 0$2 ) ;
16123: LD_INT 70
16125: PPUSH
16126: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
16130: LD_INT 22
16132: PUSH
16133: LD_INT 2
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 30
16142: PUSH
16143: LD_INT 3
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PPUSH
16154: CALL_OW 69
16158: PPUSH
16159: LD_INT 90
16161: PPUSH
16162: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
16166: LD_EXP 39
16170: PPUSH
16171: LD_STRING DO-Mem-6
16173: PPUSH
16174: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
16178: LD_EXP 35
16182: PPUSH
16183: LD_STRING DK-Mem-7
16185: PPUSH
16186: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
16190: LD_EXP 30
16194: PPUSH
16195: LD_EXP 35
16199: PPUSH
16200: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
16204: LD_EXP 30
16208: PPUSH
16209: LD_STRING DH-Mem-8
16211: PPUSH
16212: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
16216: LD_EXP 35
16220: PUSH
16221: LD_EXP 39
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PPUSH
16230: LD_EXP 30
16234: PPUSH
16235: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
16239: LD_EXP 39
16243: PPUSH
16244: LD_STRING DO-Mem-9
16246: PPUSH
16247: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
16251: LD_EXP 39
16255: PPUSH
16256: LD_STRING DO-Mem-10
16258: PPUSH
16259: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
16263: LD_EXP 39
16267: PPUSH
16268: LD_STRING DO-Mem-11
16270: PPUSH
16271: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
16275: LD_EXP 39
16279: PPUSH
16280: LD_STRING DO-Mem-12
16282: PPUSH
16283: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
16287: LD_EXP 35
16291: PPUSH
16292: LD_STRING DK-Mem-13
16294: PPUSH
16295: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
16299: LD_EXP 35
16303: PPUSH
16304: LD_STRING DK-Mem-14
16306: PPUSH
16307: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
16311: LD_EXP 35
16315: PPUSH
16316: LD_STRING DK-Mem-15
16318: PPUSH
16319: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
16323: LD_EXP 35
16327: PPUSH
16328: LD_STRING DK-Mem-16
16330: PPUSH
16331: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
16335: LD_EXP 35
16339: PPUSH
16340: LD_STRING DK-Mem-17
16342: PPUSH
16343: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
16347: LD_EXP 39
16351: PPUSH
16352: LD_EXP 35
16356: PPUSH
16357: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
16361: LD_EXP 39
16365: PPUSH
16366: LD_STRING DO-Mem-18
16368: PPUSH
16369: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
16373: LD_EXP 35
16377: PPUSH
16378: LD_EXP 39
16382: PPUSH
16383: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
16387: LD_EXP 35
16391: PPUSH
16392: LD_STRING DK-Mem-19
16394: PPUSH
16395: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
16399: LD_EXP 39
16403: PPUSH
16404: LD_INT 214
16406: PPUSH
16407: LD_INT 86
16409: PPUSH
16410: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16414: LD_EXP 39
16418: PPUSH
16419: LD_EXP 35
16423: PPUSH
16424: CALL_OW 179
// if Givi then
16428: LD_EXP 31
16432: IFFALSE 16463
// begin ComMoveXY ( Givi , 217 , 86 ) ;
16434: LD_EXP 31
16438: PPUSH
16439: LD_INT 217
16441: PPUSH
16442: LD_INT 86
16444: PPUSH
16445: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
16449: LD_EXP 31
16453: PPUSH
16454: LD_EXP 30
16458: PPUSH
16459: CALL_OW 179
// end ; if Kamil then
16463: LD_EXP 34
16467: IFFALSE 16507
// begin ComExit ( Kamil ) ;
16469: LD_EXP 34
16473: PPUSH
16474: CALL 62388 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16478: LD_EXP 34
16482: PPUSH
16483: LD_INT 212
16485: PPUSH
16486: LD_INT 86
16488: PPUSH
16489: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16493: LD_EXP 34
16497: PPUSH
16498: LD_EXP 30
16502: PPUSH
16503: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16507: LD_INT 70
16509: PPUSH
16510: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16514: LD_EXP 30
16518: PPUSH
16519: LD_STRING DH-Mem-20
16521: PPUSH
16522: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16526: LD_EXP 39
16530: PPUSH
16531: LD_INT 215
16533: PPUSH
16534: LD_INT 87
16536: PPUSH
16537: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16541: LD_EXP 39
16545: PPUSH
16546: LD_EXP 35
16550: PPUSH
16551: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16555: LD_EXP 35
16559: PPUSH
16560: LD_STRING DK-Mem-21
16562: PPUSH
16563: CALL_OW 88
// wait ( 0 0$2 ) ;
16567: LD_INT 70
16569: PPUSH
16570: CALL_OW 67
// end ;
16574: LD_VAR 0 1
16578: RET
// export function SceneWithGiviAndKamil ; begin
16579: LD_INT 0
16581: PPUSH
// if Markov then
16582: LD_EXP 37
16586: IFFALSE 16637
// begin if IsInUnit ( Markov ) then
16588: LD_EXP 37
16592: PPUSH
16593: CALL_OW 310
16597: IFFALSE 16608
// ComExit ( Markov ) ;
16599: LD_EXP 37
16603: PPUSH
16604: CALL 62388 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16608: LD_EXP 37
16612: PPUSH
16613: LD_INT 212
16615: PPUSH
16616: LD_INT 88
16618: PPUSH
16619: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16623: LD_EXP 37
16627: PPUSH
16628: LD_EXP 30
16632: PPUSH
16633: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16637: LD_EXP 31
16641: PPUSH
16642: LD_STRING DG-Obj-1
16644: PPUSH
16645: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16649: LD_EXP 34
16653: PPUSH
16654: LD_STRING DKam-Obj-2
16656: PPUSH
16657: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16661: LD_EXP 30
16665: PPUSH
16666: LD_EXP 34
16670: PPUSH
16671: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16675: LD_EXP 34
16679: PPUSH
16680: LD_STRING DKam-Obj-3
16682: PPUSH
16683: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16687: LD_EXP 37
16691: PPUSH
16692: LD_STRING DMar-Obj-4
16694: PPUSH
16695: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16699: LD_EXP 34
16703: PPUSH
16704: LD_STRING DKam-Obj-6
16706: PPUSH
16707: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16711: LD_EXP 34
16715: PPUSH
16716: LD_STRING DKam-Obj-7
16718: PPUSH
16719: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16723: LD_EXP 34
16727: PPUSH
16728: LD_STRING DKam-Obj-8
16730: PPUSH
16731: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16735: LD_EXP 30
16739: PPUSH
16740: LD_STRING DH-Obj-9
16742: PPUSH
16743: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16747: LD_EXP 34
16751: PPUSH
16752: LD_STRING DKam-Obj-10
16754: PPUSH
16755: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16759: LD_EXP 34
16763: PPUSH
16764: LD_STRING DKam-Obj-11
16766: PPUSH
16767: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16771: LD_EXP 37
16775: PPUSH
16776: LD_STRING DMar-Obj-12
16778: PPUSH
16779: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16783: LD_EXP 37
16787: PPUSH
16788: LD_STRING DMar-Obj-13
16790: PPUSH
16791: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16795: LD_EXP 37
16799: PPUSH
16800: LD_STRING DMar-Obj-14
16802: PPUSH
16803: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16807: LD_EXP 39
16811: PPUSH
16812: LD_STRING DO-Obj-15
16814: PPUSH
16815: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16819: LD_EXP 39
16823: PPUSH
16824: LD_STRING DO-Obj-16
16826: PPUSH
16827: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16831: LD_EXP 30
16835: PPUSH
16836: LD_STRING DH-Obj-17
16838: PPUSH
16839: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16843: LD_EXP 39
16847: PPUSH
16848: LD_STRING DO-Obj-18
16850: PPUSH
16851: CALL_OW 88
// end ;
16855: LD_VAR 0 1
16859: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16860: LD_INT 34
16862: PUSH
16863: LD_EXP 64
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PPUSH
16872: CALL_OW 69
16876: IFFALSE 17073
16878: GO 16880
16880: DISABLE
16881: LD_INT 0
16883: PPUSH
// begin wait ( 0 0$2 ) ;
16884: LD_INT 70
16886: PPUSH
16887: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16891: LD_INT 34
16893: PUSH
16894: LD_EXP 64
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PPUSH
16903: CALL_OW 69
16907: PPUSH
16908: CALL_OW 87
// DialogueOn ;
16912: CALL_OW 6
// if Markov then
16916: LD_EXP 37
16920: IFFALSE 16948
// begin Say ( Markov , DMar-Grn-1 ) ;
16922: LD_EXP 37
16926: PPUSH
16927: LD_STRING DMar-Grn-1
16929: PPUSH
16930: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16934: LD_EXP 30
16938: PPUSH
16939: LD_STRING DH-Grn-2
16941: PPUSH
16942: CALL_OW 88
// end else
16946: GO 17047
// if heikeSecondSquad then
16948: LD_EXP 45
16952: IFFALSE 17047
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16954: LD_ADDR_VAR 0 1
16958: PUSH
16959: LD_EXP 45
16963: PUSH
16964: LD_INT 1
16966: PPUSH
16967: LD_EXP 45
16971: PPUSH
16972: CALL_OW 12
16976: ARRAY
16977: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16978: LD_VAR 0 1
16982: PPUSH
16983: CALL_OW 258
16987: PUSH
16988: LD_INT 1
16990: DOUBLE
16991: EQUAL
16992: IFTRUE 16996
16994: GO 17011
16996: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_STRING DArm-Grn-1
17004: PPUSH
17005: CALL_OW 88
17009: GO 17035
17011: LD_INT 2
17013: DOUBLE
17014: EQUAL
17015: IFTRUE 17019
17017: GO 17034
17019: POP
// Say ( random , DArf-Grn-1 ) ; end ;
17020: LD_VAR 0 1
17024: PPUSH
17025: LD_STRING DArf-Grn-1
17027: PPUSH
17028: CALL_OW 88
17032: GO 17035
17034: POP
// Say ( Heike , DH-Grn-2 ) ;
17035: LD_EXP 30
17039: PPUSH
17040: LD_STRING DH-Grn-2
17042: PPUSH
17043: CALL_OW 88
// end ; DialogueOff ;
17047: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
17051: LD_STRING MortarConstructed
17053: PPUSH
17054: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
17058: LD_STRING SelfPropelledMortar
17060: PPUSH
17061: CALL_OW 339
// mortarConstructed := true ;
17065: LD_ADDR_EXP 15
17069: PUSH
17070: LD_INT 1
17072: ST_TO_ADDR
// end ;
17073: PPOPN 1
17075: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
17076: LD_INT 2
17078: PPUSH
17079: LD_INT 8
17081: PPUSH
17082: CALL_OW 294
17086: IFFALSE 17229
17088: GO 17090
17090: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
17091: LD_INT 200
17093: PPUSH
17094: LD_INT 162
17096: PPUSH
17097: LD_INT 2
17099: PPUSH
17100: LD_INT 6
17102: NEG
17103: PPUSH
17104: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
17108: LD_INT 200
17110: PPUSH
17111: LD_INT 162
17113: PPUSH
17114: LD_INT 2
17116: PPUSH
17117: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
17121: LD_INT 200
17123: PPUSH
17124: LD_INT 162
17126: PPUSH
17127: CALL_OW 84
// if not IsOk ( Kurt ) then
17131: LD_EXP 41
17135: PPUSH
17136: CALL_OW 302
17140: NOT
17141: IFFALSE 17145
// exit ;
17143: GO 17229
// Say ( Kurt , DKs-Otpst-2-1 ) ;
17145: LD_EXP 41
17149: PPUSH
17150: LD_STRING DKs-Otpst-2-1
17152: PPUSH
17153: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
17157: LD_EXP 35
17161: PPUSH
17162: LD_STRING DK-Otpst-2-2
17164: PPUSH
17165: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
17169: LD_EXP 41
17173: PPUSH
17174: LD_STRING DKs-Otpst-2-3
17176: PPUSH
17177: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
17181: LD_EXP 41
17185: PPUSH
17186: LD_STRING DKs-Otpst-2-4
17188: PPUSH
17189: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
17193: LD_EXP 41
17197: PPUSH
17198: LD_STRING DKs-Otpst-2-5
17200: PPUSH
17201: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
17205: LD_EXP 34
17209: PPUSH
17210: LD_STRING DKam-Otpst-2-6
17212: PPUSH
17213: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
17217: LD_EXP 41
17221: PPUSH
17222: LD_STRING DKs-Otpst-2-7
17224: PPUSH
17225: CALL_OW 88
// end ;
17229: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
17230: LD_INT 8
17232: PPUSH
17233: LD_INT 22
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 21
17245: PUSH
17246: LD_INT 3
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 70
17261: NOT
17262: PUSH
17263: LD_EXP 3
17267: NOT
17268: AND
17269: IFFALSE 17519
17271: GO 17273
17273: DISABLE
17274: LD_INT 0
17276: PPUSH
// begin outpostDestroyed := true ;
17277: LD_ADDR_EXP 4
17281: PUSH
17282: LD_INT 1
17284: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
17285: LD_INT 22
17287: PUSH
17288: LD_INT 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 34
17297: PUSH
17298: LD_EXP 64
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 92
17309: PUSH
17310: LD_INT 195
17312: PUSH
17313: LD_INT 164
17315: PUSH
17316: LD_INT 12
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: PPUSH
17330: CALL_OW 69
17334: NOT
17335: IFFALSE 17339
// exit ;
17337: GO 17519
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
17339: LD_EXP 31
17343: PPUSH
17344: CALL_OW 302
17348: NOT
17349: PUSH
17350: LD_EXP 35
17354: PPUSH
17355: CALL_OW 302
17359: NOT
17360: OR
17361: IFFALSE 17365
// exit ;
17363: GO 17519
// Say ( Givi , DG-Otpst-1-1 ) ;
17365: LD_EXP 31
17369: PPUSH
17370: LD_STRING DG-Otpst-1-1
17372: PPUSH
17373: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
17377: LD_EXP 35
17381: PPUSH
17382: LD_STRING DK-Otpst-1-2
17384: PPUSH
17385: CALL_OW 88
// if IsOk ( Markov ) then
17389: LD_EXP 37
17393: PPUSH
17394: CALL_OW 302
17398: IFFALSE 17426
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
17400: LD_EXP 37
17404: PPUSH
17405: LD_STRING DMar-Otpst-1-3
17407: PPUSH
17408: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
17412: LD_EXP 37
17416: PPUSH
17417: LD_STRING DMar-Otpst-1-4
17419: PPUSH
17420: CALL_OW 88
// end else
17424: GO 17507
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
17426: LD_ADDR_VAR 0 1
17430: PUSH
17431: LD_EXP 45
17435: PUSH
17436: LD_INT 1
17438: PPUSH
17439: LD_EXP 45
17443: PPUSH
17444: CALL_OW 12
17448: ARRAY
17449: ST_TO_ADDR
// case GetSex ( random ) of 1 :
17450: LD_VAR 0 1
17454: PPUSH
17455: CALL_OW 258
17459: PUSH
17460: LD_INT 1
17462: DOUBLE
17463: EQUAL
17464: IFTRUE 17468
17466: GO 17483
17468: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
17469: LD_VAR 0 1
17473: PPUSH
17474: LD_STRING DArm-Otpst-1-a-3
17476: PPUSH
17477: CALL_OW 88
17481: GO 17507
17483: LD_INT 2
17485: DOUBLE
17486: EQUAL
17487: IFTRUE 17491
17489: GO 17506
17491: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17492: LD_VAR 0 1
17496: PPUSH
17497: LD_STRING DArf-Otpst-1-a-3
17499: PPUSH
17500: CALL_OW 88
17504: GO 17507
17506: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17507: LD_EXP 31
17511: PPUSH
17512: LD_STRING DG-Otpst-1-5
17514: PPUSH
17515: CALL_OW 88
// end ;
17519: PPOPN 1
17521: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17522: LD_EXP 35
17526: PPUSH
17527: CALL_OW 256
17531: PUSH
17532: LD_INT 10
17534: LESS
17535: IFFALSE 17649
17537: GO 17539
17539: DISABLE
// begin DialogueOn ;
17540: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17544: LD_EXP 35
17548: PPUSH
17549: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17553: LD_EXP 35
17557: PPUSH
17558: LD_STRING DK-Dead-1
17560: PPUSH
17561: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17565: LD_EXP 30
17569: PPUSH
17570: LD_STRING DH-Dead-2
17572: PPUSH
17573: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17577: LD_EXP 35
17581: PPUSH
17582: LD_STRING DK-Dead-3
17584: PPUSH
17585: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17589: LD_EXP 30
17593: PPUSH
17594: LD_STRING DH-Dead-4
17596: PPUSH
17597: CALL_OW 88
// if IsOk ( Mike ) then
17601: LD_EXP 32
17605: PPUSH
17606: CALL_OW 302
17610: IFFALSE 17636
// begin Say ( Mike , DM-Dead-5 ) ;
17612: LD_EXP 32
17616: PPUSH
17617: LD_STRING DM-Dead-5
17619: PPUSH
17620: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17624: LD_EXP 30
17628: PPUSH
17629: LD_STRING DH-Dead-6
17631: PPUSH
17632: CALL_OW 88
// end ; DialogueOff ;
17636: CALL_OW 7
// KillUnit ( Kaia ) ;
17640: LD_EXP 35
17644: PPUSH
17645: CALL_OW 66
// end ;
17649: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17650: LD_OWVAR 1
17654: PUSH
17655: LD_INT 21700
17657: GREATEREQUAL
17658: PUSH
17659: LD_EXP 5
17663: PUSH
17664: LD_INT 5
17666: GREATER
17667: OR
17668: PUSH
17669: LD_INT 22
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 92
17681: PUSH
17682: LD_INT 103
17684: PUSH
17685: LD_INT 81
17687: PUSH
17688: LD_INT 20
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PPUSH
17701: CALL_OW 69
17705: OR
17706: IFFALSE 18113
17708: GO 17710
17710: DISABLE
17711: LD_INT 0
17713: PPUSH
17714: PPUSH
17715: PPUSH
// begin PrepareRolfSquad ;
17716: CALL 2376 0 0
// dep := HexInfo ( 86 , 54 ) ;
17720: LD_ADDR_VAR 0 3
17724: PUSH
17725: LD_INT 86
17727: PPUSH
17728: LD_INT 54
17730: PPUSH
17731: CALL_OW 428
17735: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17736: LD_VAR 0 3
17740: PPUSH
17741: CALL_OW 274
17745: PPUSH
17746: LD_INT 1
17748: PPUSH
17749: LD_INT 300
17751: PPUSH
17752: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17756: LD_VAR 0 3
17760: PPUSH
17761: CALL_OW 274
17765: PPUSH
17766: LD_INT 2
17768: PPUSH
17769: LD_INT 300
17771: PPUSH
17772: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17776: LD_EXP 47
17780: PPUSH
17781: LD_INT 79
17783: PPUSH
17784: LD_INT 52
17786: PPUSH
17787: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17791: LD_INT 35
17793: PPUSH
17794: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17798: LD_INT 12
17800: PPUSH
17801: LD_INT 22
17803: PUSH
17804: LD_INT 3
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 21
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 70
17829: NOT
17830: IFFALSE 17791
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17832: LD_ADDR_VAR 0 2
17836: PUSH
17837: LD_INT 12
17839: PPUSH
17840: LD_INT 21
17842: PUSH
17843: LD_INT 3
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PPUSH
17850: CALL_OW 70
17854: ST_TO_ADDR
// for i in tmp do
17855: LD_ADDR_VAR 0 1
17859: PUSH
17860: LD_VAR 0 2
17864: PUSH
17865: FOR_IN
17866: IFFALSE 17882
// SetSide ( i , 8 ) ;
17868: LD_VAR 0 1
17872: PPUSH
17873: LD_INT 8
17875: PPUSH
17876: CALL_OW 235
17880: GO 17865
17882: POP
17883: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17884: LD_INT 63
17886: PPUSH
17887: LD_INT 42
17889: PPUSH
17890: CALL_OW 428
17894: PPUSH
17895: LD_INT 320
17897: PPUSH
17898: CALL_OW 234
// wait ( 0 0$10 ) ;
17902: LD_INT 350
17904: PPUSH
17905: CALL_OW 67
// DialogueOn ;
17909: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17913: LD_INT 8
17915: PPUSH
17916: LD_INT 2
17918: PPUSH
17919: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17923: LD_INT 86
17925: PPUSH
17926: LD_INT 54
17928: PPUSH
17929: CALL_OW 428
17933: PPUSH
17934: LD_STRING antwerp
17936: PPUSH
17937: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17941: LD_EXP 43
17945: PPUSH
17946: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17950: LD_EXP 43
17954: PPUSH
17955: LD_STRING DRf-rast-1
17957: PPUSH
17958: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17962: LD_EXP 30
17966: PPUSH
17967: LD_STRING DH-rast-2
17969: PPUSH
17970: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17974: LD_EXP 43
17978: PPUSH
17979: LD_STRING DRf-rast-3
17981: PPUSH
17982: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17986: LD_EXP 43
17990: PPUSH
17991: LD_STRING DRf-rast-4
17993: PPUSH
17994: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
17998: LD_EXP 43
18002: PPUSH
18003: LD_STRING DRf-rast-5
18005: PPUSH
18006: CALL_OW 94
// if IsOk ( Aviradze ) then
18010: LD_EXP 42
18014: PPUSH
18015: CALL_OW 302
18019: IFFALSE 18078
// begin CenterNowOnUnits ( Aviradze ) ;
18021: LD_EXP 42
18025: PPUSH
18026: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
18030: LD_EXP 42
18034: PPUSH
18035: LD_STRING DA-rast-6
18037: PPUSH
18038: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
18042: LD_EXP 30
18046: PPUSH
18047: LD_STRING DH-rast-7
18049: PPUSH
18050: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
18054: LD_EXP 31
18058: PPUSH
18059: LD_STRING DG-rast-8
18061: PPUSH
18062: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
18066: LD_EXP 31
18070: PPUSH
18071: LD_STRING DG-rast-9
18073: PPUSH
18074: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
18078: LD_EXP 30
18082: PPUSH
18083: LD_STRING DH-rast-10
18085: PPUSH
18086: CALL_OW 88
// DialogueOff ;
18090: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18094: LD_STRING M2
18096: PPUSH
18097: CALL_OW 337
// bergkampfArrived := true ;
18101: LD_ADDR_EXP 3
18105: PUSH
18106: LD_INT 1
18108: ST_TO_ADDR
// PrepareRolfBase ;
18109: CALL 2707 0 0
// end ;
18113: PPOPN 3
18115: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
18116: LD_INT 12
18118: PPUSH
18119: LD_INT 22
18121: PUSH
18122: LD_INT 2
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PPUSH
18129: CALL_OW 70
18133: PUSH
18134: LD_EXP 43
18138: PPUSH
18139: CALL_OW 302
18143: AND
18144: PUSH
18145: LD_EXP 29
18149: AND
18150: IFFALSE 18710
18152: GO 18154
18154: DISABLE
18155: LD_INT 0
18157: PPUSH
// begin rolfScriptBase := false ;
18158: LD_ADDR_EXP 9
18162: PUSH
18163: LD_INT 0
18165: ST_TO_ADDR
// DialogueOn ;
18166: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
18170: LD_EXP 43
18174: PPUSH
18175: CALL_OW 87
// if rolfSquad >= 10 then
18179: LD_EXP 47
18183: PUSH
18184: LD_INT 10
18186: GREATEREQUAL
18187: IFFALSE 18366
// begin linkedWithRolf := 2 ;
18189: LD_ADDR_EXP 12
18193: PUSH
18194: LD_INT 2
18196: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
18197: LD_EXP 43
18201: PPUSH
18202: LD_STRING DRf-rast-11
18204: PPUSH
18205: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
18209: LD_EXP 30
18213: PPUSH
18214: LD_STRING DH-rast-12
18216: PPUSH
18217: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
18221: LD_EXP 43
18225: PPUSH
18226: LD_STRING DRf-rast-13
18228: PPUSH
18229: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
18233: LD_EXP 30
18237: PPUSH
18238: LD_STRING DH-rast-14
18240: PPUSH
18241: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
18245: LD_EXP 43
18249: PPUSH
18250: LD_STRING DRf-rast-15
18252: PPUSH
18253: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
18257: LD_EXP 30
18261: PPUSH
18262: LD_STRING DH-rast-16
18264: PPUSH
18265: CALL_OW 88
// if IsOk ( Mike ) then
18269: LD_EXP 32
18273: PPUSH
18274: CALL_OW 302
18278: IFFALSE 18352
// begin Say ( Mike , DM-rast-17 ) ;
18280: LD_EXP 32
18284: PPUSH
18285: LD_STRING DM-rast-17
18287: PPUSH
18288: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
18292: LD_EXP 30
18296: PPUSH
18297: LD_STRING DH-rast-18
18299: PPUSH
18300: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
18304: LD_EXP 32
18308: PPUSH
18309: LD_STRING DM-rast-19
18311: PPUSH
18312: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
18316: LD_EXP 30
18320: PPUSH
18321: LD_STRING DH-rast-20
18323: PPUSH
18324: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
18328: LD_EXP 32
18332: PPUSH
18333: LD_STRING DM-rast-21
18335: PPUSH
18336: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
18340: LD_EXP 30
18344: PPUSH
18345: LD_STRING DH-rast-22
18347: PPUSH
18348: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
18352: LD_EXP 30
18356: PPUSH
18357: LD_STRING DH-rast-23
18359: PPUSH
18360: CALL_OW 88
// end else
18364: GO 18516
// begin linkedWithRolf := 1 ;
18366: LD_ADDR_EXP 12
18370: PUSH
18371: LD_INT 1
18373: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
18374: LD_EXP 43
18378: PPUSH
18379: LD_STRING DRf-rast-a-11
18381: PPUSH
18382: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
18386: LD_EXP 30
18390: PPUSH
18391: LD_STRING DH-rast-a-12
18393: PPUSH
18394: CALL_OW 88
// if IsOk ( Kurt ) then
18398: LD_EXP 41
18402: PPUSH
18403: CALL_OW 302
18407: IFFALSE 18504
// begin Say ( Kurt , DKs-rast-a-13 ) ;
18409: LD_EXP 41
18413: PPUSH
18414: LD_STRING DKs-rast-a-13
18416: PPUSH
18417: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
18421: LD_EXP 43
18425: PPUSH
18426: LD_STRING DRf-rast-a-14
18428: PPUSH
18429: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
18433: LD_EXP 43
18437: PPUSH
18438: LD_STRING DRf-rast-a-15
18440: PPUSH
18441: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
18445: LD_EXP 41
18449: PPUSH
18450: LD_STRING DKs-rast-a-16
18452: PPUSH
18453: CALL_OW 88
// if IsOk ( Givi ) then
18457: LD_EXP 31
18461: PPUSH
18462: CALL_OW 302
18466: IFFALSE 18504
// begin Say ( Givi , DG-rast-a-17 ) ;
18468: LD_EXP 31
18472: PPUSH
18473: LD_STRING DG-rast-a-17
18475: PPUSH
18476: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
18480: LD_EXP 31
18484: PPUSH
18485: LD_STRING DG-rast-a-18
18487: PPUSH
18488: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18492: LD_EXP 41
18496: PPUSH
18497: LD_STRING DKs-rast-a-19
18499: PPUSH
18500: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18504: LD_EXP 30
18508: PPUSH
18509: LD_STRING DH-rast-a-20
18511: PPUSH
18512: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18516: LD_EXP 43
18520: PPUSH
18521: LD_STRING DRf-rast-24
18523: PPUSH
18524: CALL_OW 88
// if IsOk ( Aviradze ) then
18528: LD_EXP 42
18532: PPUSH
18533: CALL_OW 302
18537: IFFALSE 18637
// begin Say ( Aviradze , DA-rast-25 ) ;
18539: LD_EXP 42
18543: PPUSH
18544: LD_STRING DA-rast-25
18546: PPUSH
18547: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18551: LD_EXP 30
18555: PPUSH
18556: LD_STRING DH-rast-26
18558: PPUSH
18559: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18563: LD_EXP 42
18567: PPUSH
18568: LD_STRING DA-rast-27
18570: PPUSH
18571: CALL_OW 88
// if IsOk ( Markov ) then
18575: LD_EXP 37
18579: PPUSH
18580: CALL_OW 302
18584: IFFALSE 18612
// begin Say ( Markov , DMar-rast-28 ) ;
18586: LD_EXP 37
18590: PPUSH
18591: LD_STRING DMar-rast-28
18593: PPUSH
18594: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18598: LD_EXP 37
18602: PPUSH
18603: LD_STRING DMar-rast-29
18605: PPUSH
18606: CALL_OW 88
// end else
18610: GO 18635
// if IsOk ( Sophia ) then
18612: LD_EXP 36
18616: PPUSH
18617: CALL_OW 302
18621: IFFALSE 18635
// begin Say ( Sophia , DS-rast-28 ) ;
18623: LD_EXP 36
18627: PPUSH
18628: LD_STRING DS-rast-28
18630: PPUSH
18631: CALL_OW 88
// end ; end else
18635: GO 18660
// if IsOk ( Sophia ) then
18637: LD_EXP 36
18641: PPUSH
18642: CALL_OW 302
18646: IFFALSE 18660
// Say ( Sophia , DS-rast-29 ) ;
18648: LD_EXP 36
18652: PPUSH
18653: LD_STRING DS-rast-29
18655: PPUSH
18656: CALL_OW 88
// DialogueOff ;
18660: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18664: LD_STRING M3
18666: PPUSH
18667: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18671: LD_ADDR_VAR 0 1
18675: PUSH
18676: LD_INT 22
18678: PUSH
18679: LD_INT 8
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PPUSH
18686: CALL_OW 69
18690: PUSH
18691: FOR_IN
18692: IFFALSE 18708
// SetSide ( i , 2 ) ;
18694: LD_VAR 0 1
18698: PPUSH
18699: LD_INT 2
18701: PPUSH
18702: CALL_OW 235
18706: GO 18691
18708: POP
18709: POP
// end ;
18710: PPOPN 1
18712: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
18713: LD_EXP 23
18717: PUSH
18718: LD_EXP 12
18722: NOT
18723: AND
18724: PUSH
18725: LD_EXP 29
18729: AND
18730: IFFALSE 18821
18732: GO 18734
18734: DISABLE
18735: LD_INT 0
18737: PPUSH
// begin canRolfJoin := false ;
18738: LD_ADDR_EXP 29
18742: PUSH
18743: LD_INT 0
18745: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
18746: LD_STRING M3
18748: PPUSH
18749: CALL_OW 337
// for i in rolfSquad do
18753: LD_ADDR_VAR 0 1
18757: PUSH
18758: LD_EXP 47
18762: PUSH
18763: FOR_IN
18764: IFFALSE 18819
// begin ComExit ( i ) ;
18766: LD_VAR 0 1
18770: PPUSH
18771: CALL 62388 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
18775: LD_VAR 0 1
18779: PPUSH
18780: LD_INT 147
18782: PPUSH
18783: LD_INT 162
18785: PPUSH
18786: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
18790: LD_VAR 0 1
18794: PPUSH
18795: LD_INT 1050
18797: PPUSH
18798: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
18802: LD_VAR 0 1
18806: PPUSH
18807: LD_INT 103
18809: PPUSH
18810: LD_INT 162
18812: PPUSH
18813: CALL_OW 174
// end ;
18817: GO 18763
18819: POP
18820: POP
// end ;
18821: PPOPN 1
18823: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
18824: LD_EXP 3
18828: PUSH
18829: LD_EXP 43
18833: PPUSH
18834: CALL_OW 256
18838: PUSH
18839: LD_INT 400
18841: LESS
18842: AND
18843: PUSH
18844: LD_EXP 12
18848: NOT
18849: AND
18850: PUSH
18851: LD_EXP 29
18855: AND
18856: IFFALSE 19130
18858: GO 18860
18860: DISABLE
18861: LD_INT 0
18863: PPUSH
// begin DialogueOn ;
18864: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18868: LD_EXP 43
18872: PPUSH
18873: LD_STRING DRf-rast-f-11
18875: PPUSH
18876: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18880: LD_EXP 43
18884: PPUSH
18885: LD_STRING DRf-rast-f-12
18887: PPUSH
18888: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18892: LD_EXP 43
18896: PPUSH
18897: LD_STRING DRf-rast-f-13
18899: PPUSH
18900: CALL_OW 94
// DialogueOff ;
18904: CALL_OW 7
// KillUnit ( Rolf ) ;
18908: LD_EXP 43
18912: PPUSH
18913: CALL_OW 66
// wait ( 0 0$1 ) ;
18917: LD_INT 35
18919: PPUSH
18920: CALL_OW 67
// if not IsOk ( Givi ) then
18924: LD_EXP 31
18928: PPUSH
18929: CALL_OW 302
18933: NOT
18934: IFFALSE 18938
// exit ;
18936: GO 19130
// DialogueOn ;
18938: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18942: LD_EXP 31
18946: PPUSH
18947: LD_STRING DG-rast-f-14
18949: PPUSH
18950: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18954: LD_EXP 31
18958: PPUSH
18959: LD_STRING DG-rast-f-15
18961: PPUSH
18962: CALL_OW 88
// if IsOk ( Kaia ) then
18966: LD_EXP 35
18970: PPUSH
18971: CALL_OW 302
18975: IFFALSE 18991
// Say ( Kaia , DK-rast-f-16 ) else
18977: LD_EXP 35
18981: PPUSH
18982: LD_STRING DK-rast-f-16
18984: PPUSH
18985: CALL_OW 88
18989: GO 19078
// if heikeSecondSquad then
18991: LD_EXP 45
18995: IFFALSE 19078
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18997: LD_ADDR_VAR 0 1
19001: PUSH
19002: LD_EXP 45
19006: PUSH
19007: LD_INT 1
19009: PPUSH
19010: LD_EXP 45
19014: PPUSH
19015: CALL_OW 12
19019: ARRAY
19020: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 258
19030: PUSH
19031: LD_INT 1
19033: DOUBLE
19034: EQUAL
19035: IFTRUE 19039
19037: GO 19054
19039: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
19040: LD_VAR 0 1
19044: PPUSH
19045: LD_STRING DArm-rast-f-a-16
19047: PPUSH
19048: CALL_OW 88
19052: GO 19078
19054: LD_INT 2
19056: DOUBLE
19057: EQUAL
19058: IFTRUE 19062
19060: GO 19077
19062: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
19063: LD_VAR 0 1
19067: PPUSH
19068: LD_STRING DArf-rast-f-a-16
19070: PPUSH
19071: CALL_OW 88
19075: GO 19078
19077: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
19078: LD_EXP 31
19082: PPUSH
19083: LD_STRING DG-rast-f-17
19085: PPUSH
19086: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
19090: LD_EXP 31
19094: PPUSH
19095: LD_STRING DG-rast-f-18
19097: PPUSH
19098: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
19102: LD_EXP 31
19106: PPUSH
19107: LD_STRING DG-rast-f-19
19109: PPUSH
19110: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
19114: LD_EXP 31
19118: PPUSH
19119: LD_STRING DG-rast-f-20
19121: PPUSH
19122: CALL_OW 88
// DialogueOff ;
19126: CALL_OW 7
// end ;
19130: PPOPN 1
19132: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
19133: LD_INT 2
19135: PPUSH
19136: LD_INT 10
19138: PPUSH
19139: CALL_OW 294
19143: IFFALSE 19216
19145: GO 19147
19147: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
19148: LD_EXP 31
19152: PPUSH
19153: LD_STRING DG-Len-1
19155: PPUSH
19156: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
19160: LD_EXP 41
19164: PPUSH
19165: LD_STRING DKs-Len-2
19167: PPUSH
19168: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
19172: LD_EXP 41
19176: PPUSH
19177: LD_STRING DKs-Len-3
19179: PPUSH
19180: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
19184: LD_EXP 30
19188: PPUSH
19189: LD_STRING DH-Len-4
19191: PPUSH
19192: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
19196: LD_EXP 35
19200: PPUSH
19201: LD_STRING DK-Len-5
19203: PPUSH
19204: CALL_OW 88
// leninSpotted := true ;
19208: LD_ADDR_EXP 14
19212: PUSH
19213: LD_INT 1
19215: ST_TO_ADDR
// end ;
19216: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 17 17$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
19217: LD_EXP 3
19221: PUSH
19222: LD_OWVAR 1
19226: PUSH
19227: LD_INT 35700
19229: GREATER
19230: AND
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 2
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 92
19244: PUSH
19245: LD_INT 322
19247: PUSH
19248: LD_INT 215
19250: PUSH
19251: LD_INT 20
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 69
19268: OR
19269: IFFALSE 19632
19271: GO 19273
19273: DISABLE
19274: LD_INT 0
19276: PPUSH
// begin PrepareOmarSquad ;
19277: CALL 3989 0 0
// repeat wait ( 0 0$1 ) ;
19281: LD_INT 35
19283: PPUSH
19284: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
19288: LD_INT 14
19290: PPUSH
19291: LD_INT 22
19293: PUSH
19294: LD_INT 3
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: LD_INT 21
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 59
19316: PUSH
19317: EMPTY
19318: LIST
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PPUSH
19329: CALL_OW 70
19333: NOT
19334: IFFALSE 19281
// for i in omarSquad do
19336: LD_ADDR_VAR 0 1
19340: PUSH
19341: LD_EXP 48
19345: PUSH
19346: FOR_IN
19347: IFFALSE 19378
// if GetLives ( i ) < 750 then
19349: LD_VAR 0 1
19353: PPUSH
19354: CALL_OW 256
19358: PUSH
19359: LD_INT 750
19361: LESS
19362: IFFALSE 19376
// SetLives ( i , 1000 ) ;
19364: LD_VAR 0 1
19368: PPUSH
19369: LD_INT 1000
19371: PPUSH
19372: CALL_OW 234
19376: GO 19346
19378: POP
19379: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
19380: LD_ADDR_VAR 0 1
19384: PUSH
19385: LD_INT 14
19387: PPUSH
19388: LD_INT 21
19390: PUSH
19391: LD_INT 3
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PPUSH
19398: CALL_OW 70
19402: PUSH
19403: FOR_IN
19404: IFFALSE 19420
// SetSide ( i , 5 ) ;
19406: LD_VAR 0 1
19410: PPUSH
19411: LD_INT 5
19413: PPUSH
19414: CALL_OW 235
19418: GO 19403
19420: POP
19421: POP
// wait ( 0 0$3 ) ;
19422: LD_INT 105
19424: PPUSH
19425: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
19429: LD_INT 5
19431: PPUSH
19432: LD_INT 2
19434: PPUSH
19435: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
19439: LD_EXP 40
19443: PPUSH
19444: CALL_OW 87
// DialogueOn ;
19448: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
19452: LD_EXP 40
19456: PPUSH
19457: LD_STRING DOm-Veh-1
19459: PPUSH
19460: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
19464: LD_EXP 40
19468: PPUSH
19469: LD_STRING DOm-Veh-2
19471: PPUSH
19472: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
19476: LD_EXP 40
19480: PPUSH
19481: LD_STRING DOm-Veh-3
19483: PPUSH
19484: CALL_OW 94
// if mortarConstructed then
19488: LD_EXP 15
19492: IFFALSE 19506
// SayRadio ( Omar , DOm-Veh-4 ) ;
19494: LD_EXP 40
19498: PPUSH
19499: LD_STRING DOm-Veh-4
19501: PPUSH
19502: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
19506: LD_EXP 30
19510: PPUSH
19511: LD_STRING DH-Veh-5
19513: PPUSH
19514: CALL_OW 88
// if IsOk ( Kurt ) then
19518: LD_EXP 41
19522: PPUSH
19523: CALL_OW 302
19527: IFFALSE 19577
// begin Say ( Kurt , DKs-Veh-6 ) ;
19529: LD_EXP 41
19533: PPUSH
19534: LD_STRING DKs-Veh-6
19536: PPUSH
19537: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
19541: LD_EXP 41
19545: PPUSH
19546: LD_STRING DKs-Veh-7
19548: PPUSH
19549: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
19553: LD_EXP 31
19557: PPUSH
19558: LD_STRING DG-Veh-8
19560: PPUSH
19561: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
19565: LD_EXP 32
19569: PPUSH
19570: LD_STRING DM-Veh-9
19572: PPUSH
19573: CALL_OW 88
// end ; DialogueOff ;
19577: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
19581: LD_STRING M4
19583: PPUSH
19584: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
19588: LD_EXP 40
19592: PPUSH
19593: LD_INT 341
19595: PPUSH
19596: LD_INT 232
19598: PPUSH
19599: CALL_OW 428
19603: PPUSH
19604: CALL_OW 120
// omarArrived := true ;
19608: LD_ADDR_EXP 6
19612: PUSH
19613: LD_INT 1
19615: ST_TO_ADDR
// omarScriptBase := true ;
19616: LD_ADDR_EXP 10
19620: PUSH
19621: LD_INT 1
19623: ST_TO_ADDR
// omarWantVehicles := true ;
19624: LD_ADDR_EXP 18
19628: PUSH
19629: LD_INT 1
19631: ST_TO_ADDR
// end ;
19632: PPOPN 1
19634: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19635: LD_EXP 43
19639: PPUSH
19640: CALL_OW 302
19644: PUSH
19645: LD_EXP 12
19649: AND
19650: PUSH
19651: LD_EXP 6
19655: AND
19656: IFFALSE 19760
19658: GO 19660
19660: DISABLE
// begin wait ( 0 0$20 ) ;
19661: LD_INT 700
19663: PPUSH
19664: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
19668: LD_EXP 43
19672: PPUSH
19673: CALL_OW 87
// DialogueOn ;
19677: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19681: LD_EXP 43
19685: PPUSH
19686: LD_STRING DRf-Veh-10
19688: PPUSH
19689: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19693: LD_EXP 43
19697: PPUSH
19698: LD_STRING DRf-Veh-11
19700: PPUSH
19701: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19705: LD_EXP 30
19709: PPUSH
19710: LD_STRING DH-Veh-12
19712: PPUSH
19713: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19717: LD_EXP 30
19721: PPUSH
19722: LD_STRING DH-Veh-13
19724: PPUSH
19725: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19729: LD_EXP 43
19733: PPUSH
19734: LD_STRING DRf-Veh-14
19736: PPUSH
19737: CALL_OW 88
// DialogueOff ;
19741: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19745: LD_STRING M5
19747: PPUSH
19748: CALL_OW 337
// rolfWantVehicles := true ;
19752: LD_ADDR_EXP 17
19756: PUSH
19757: LD_INT 1
19759: ST_TO_ADDR
// end ;
19760: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19761: LD_EXP 18
19765: IFFALSE 20464
19767: GO 19769
19769: DISABLE
19770: LD_INT 0
19772: PPUSH
19773: PPUSH
19774: PPUSH
19775: PPUSH
19776: PPUSH
19777: PPUSH
// begin wait ( 0 0$3 ) ;
19778: LD_INT 105
19780: PPUSH
19781: CALL_OW 67
// Hint ( OmarVehicles ) ;
19785: LD_STRING OmarVehicles
19787: PPUSH
19788: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19792: LD_INT 16
19794: PPUSH
19795: LD_INT 1
19797: PPUSH
19798: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19802: LD_INT 35
19804: PPUSH
19805: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19809: LD_ADDR_EXP 20
19813: PUSH
19814: LD_EXP 20
19818: PUSH
19819: LD_INT 35
19821: MINUS
19822: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19823: LD_EXP 20
19827: PUSH
19828: LD_INT 0
19830: LESSEQUAL
19831: IFFALSE 19931
// begin display_strings := [ ] ;
19833: LD_ADDR_OWVAR 47
19837: PUSH
19838: EMPTY
19839: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19840: LD_STRING M4a
19842: PPUSH
19843: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19847: LD_INT 16
19849: PPUSH
19850: LD_INT 0
19852: PPUSH
19853: CALL_OW 424
// DialogueOn ;
19857: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19861: LD_EXP 40
19865: PPUSH
19866: LD_STRING DOm-Veh-b-15
19868: PPUSH
19869: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19873: LD_EXP 30
19877: PPUSH
19878: LD_STRING DH-Veh-b-16
19880: PPUSH
19881: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19885: LD_EXP 40
19889: PPUSH
19890: LD_STRING DOm-Veh-b-17
19892: PPUSH
19893: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19897: LD_EXP 35
19901: PPUSH
19902: LD_STRING DK-Veh-b-18
19904: PPUSH
19905: CALL_OW 88
// DialogueOff ;
19909: CALL_OW 7
// omarAttack := true ;
19913: LD_ADDR_EXP 23
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// omarScriptBase := false ;
19921: LD_ADDR_EXP 10
19925: PUSH
19926: LD_INT 0
19928: ST_TO_ADDR
// exit ;
19929: GO 20464
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19931: LD_EXP 21
19935: PUSH
19936: LD_INT 16
19938: PPUSH
19939: LD_INT 22
19941: PUSH
19942: LD_INT 2
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 21
19951: PUSH
19952: LD_INT 2
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 33
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 58
19971: PUSH
19972: EMPTY
19973: LIST
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: PPUSH
19981: CALL_OW 70
19985: LESSEQUAL
19986: IFFALSE 19802
// omarWaitingForVehiclesTimer := 0 0$00 ;
19988: LD_ADDR_EXP 20
19992: PUSH
19993: LD_INT 0
19995: ST_TO_ADDR
// display_strings := [ ] ;
19996: LD_ADDR_OWVAR 47
20000: PUSH
20001: EMPTY
20002: ST_TO_ADDR
// DialogueOn ;
20003: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
20007: LD_EXP 40
20011: PPUSH
20012: LD_STRING DOm-Veh-a-15
20014: PPUSH
20015: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
20019: LD_EXP 35
20023: PPUSH
20024: LD_STRING DK-Veh-a-16
20026: PPUSH
20027: CALL_OW 88
// DialogueOff ;
20031: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
20035: LD_STRING M4a
20037: PPUSH
20038: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
20042: LD_INT 16
20044: PPUSH
20045: LD_INT 0
20047: PPUSH
20048: CALL_OW 424
// omarHasVehicles := true ;
20052: LD_ADDR_EXP 22
20056: PUSH
20057: LD_INT 1
20059: ST_TO_ADDR
// wait ( 1 1$00 ) ;
20060: LD_INT 2100
20062: PPUSH
20063: CALL_OW 67
// omarAttack := true ;
20067: LD_ADDR_EXP 23
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// omarScriptBase := false ;
20075: LD_ADDR_EXP 10
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
20083: LD_ADDR_VAR 0 2
20087: PUSH
20088: LD_INT 16
20090: PPUSH
20091: LD_INT 22
20093: PUSH
20094: LD_INT 2
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 21
20103: PUSH
20104: LD_INT 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 33
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 58
20123: PUSH
20124: EMPTY
20125: LIST
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: PPUSH
20133: CALL_OW 70
20137: ST_TO_ADDR
// for i in tmp do
20138: LD_ADDR_VAR 0 1
20142: PUSH
20143: LD_VAR 0 2
20147: PUSH
20148: FOR_IN
20149: IFFALSE 20177
// begin SetFuel ( i , 100 ) ;
20151: LD_VAR 0 1
20155: PPUSH
20156: LD_INT 100
20158: PPUSH
20159: CALL_OW 240
// SetSide ( i , 5 ) ;
20163: LD_VAR 0 1
20167: PPUSH
20168: LD_INT 5
20170: PPUSH
20171: CALL_OW 235
// end ;
20175: GO 20148
20177: POP
20178: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
20179: LD_ADDR_VAR 0 3
20183: PUSH
20184: LD_EXP 48
20188: PPUSH
20189: LD_INT 25
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PPUSH
20199: CALL_OW 72
20203: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
20204: LD_ADDR_VAR 0 4
20208: PUSH
20209: LD_EXP 48
20213: PPUSH
20214: LD_INT 3
20216: PUSH
20217: LD_INT 55
20219: PUSH
20220: EMPTY
20221: LIST
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 25
20229: PUSH
20230: LD_INT 3
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PPUSH
20241: CALL_OW 72
20245: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
20246: LD_ADDR_VAR 0 5
20250: PUSH
20251: LD_INT 324
20253: PPUSH
20254: LD_INT 234
20256: PPUSH
20257: CALL_OW 428
20261: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
20262: LD_ADDR_VAR 0 6
20266: PUSH
20267: LD_INT 334
20269: PPUSH
20270: LD_INT 241
20272: PPUSH
20273: CALL_OW 428
20277: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
20278: LD_VAR 0 6
20282: PPUSH
20283: CALL_OW 313
20287: PPUSH
20288: CALL_OW 122
// if eng then
20292: LD_VAR 0 3
20296: IFFALSE 20404
// begin if eng + mech <= tmp then
20298: LD_VAR 0 3
20302: PUSH
20303: LD_VAR 0 4
20307: PLUS
20308: PUSH
20309: LD_VAR 0 2
20313: LESSEQUAL
20314: IFFALSE 20369
// begin ComEnterUnit ( eng , workshop ) ;
20316: LD_VAR 0 3
20320: PPUSH
20321: LD_VAR 0 5
20325: PPUSH
20326: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
20330: LD_VAR 0 3
20334: PPUSH
20335: LD_INT 3
20337: PPUSH
20338: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20342: LD_VAR 0 3
20346: PPUSH
20347: CALL_OW 182
// mech := mech union eng ;
20351: LD_ADDR_VAR 0 4
20355: PUSH
20356: LD_VAR 0 4
20360: PUSH
20361: LD_VAR 0 3
20365: UNION
20366: ST_TO_ADDR
// end else
20367: GO 20404
// begin ComEnterUnit ( eng , armoury ) ;
20369: LD_VAR 0 3
20373: PPUSH
20374: LD_VAR 0 6
20378: PPUSH
20379: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
20383: LD_VAR 0 3
20387: PPUSH
20388: LD_INT 1
20390: PPUSH
20391: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20395: LD_VAR 0 3
20399: PPUSH
20400: CALL_OW 182
// end ; end ; for i := 1 to tmp do
20404: LD_ADDR_VAR 0 1
20408: PUSH
20409: DOUBLE
20410: LD_INT 1
20412: DEC
20413: ST_TO_ADDR
20414: LD_VAR 0 2
20418: PUSH
20419: FOR_TO
20420: IFFALSE 20462
// if i <= mech then
20422: LD_VAR 0 1
20426: PUSH
20427: LD_VAR 0 4
20431: LESSEQUAL
20432: IFFALSE 20460
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
20434: LD_VAR 0 4
20438: PUSH
20439: LD_VAR 0 1
20443: ARRAY
20444: PPUSH
20445: LD_VAR 0 2
20449: PUSH
20450: LD_VAR 0 1
20454: ARRAY
20455: PPUSH
20456: CALL_OW 180
20460: GO 20419
20462: POP
20463: POP
// end ;
20464: PPOPN 6
20466: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
20467: LD_EXP 43
20471: PPUSH
20472: CALL_OW 302
20476: PUSH
20477: LD_EXP 17
20481: AND
20482: IFFALSE 20938
20484: GO 20486
20486: DISABLE
20487: LD_INT 0
20489: PPUSH
// begin repeat wait ( 0 0$1 ) ;
20490: LD_INT 35
20492: PPUSH
20493: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
20497: LD_ADDR_EXP 19
20501: PUSH
20502: LD_EXP 19
20506: PUSH
20507: LD_INT 35
20509: MINUS
20510: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
20511: LD_EXP 19
20515: PUSH
20516: LD_INT 0
20518: LESSEQUAL
20519: PUSH
20520: LD_EXP 23
20524: OR
20525: IFFALSE 20743
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
20527: LD_ADDR_EXP 19
20531: PUSH
20532: LD_INT 0
20534: ST_TO_ADDR
// display_strings := [ ] ;
20535: LD_ADDR_OWVAR 47
20539: PUSH
20540: EMPTY
20541: ST_TO_ADDR
// DialogueOn ;
20542: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
20546: LD_EXP 43
20550: PPUSH
20551: LD_STRING DRf-Veh-b-19
20553: PPUSH
20554: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
20558: LD_EXP 43
20562: PPUSH
20563: LD_STRING DRf-Veh-b-20
20565: PPUSH
20566: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
20570: LD_EXP 30
20574: PPUSH
20575: LD_STRING DH-Veh-b-21
20577: PPUSH
20578: CALL_OW 88
// if IsOk ( Givi ) then
20582: LD_EXP 31
20586: PPUSH
20587: CALL_OW 302
20591: IFFALSE 20629
// begin Say ( Givi , DG-Veh-b-22 ) ;
20593: LD_EXP 31
20597: PPUSH
20598: LD_STRING DG-Veh-b-22
20600: PPUSH
20601: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
20605: LD_EXP 30
20609: PPUSH
20610: LD_STRING DH-Veh-b-23
20612: PPUSH
20613: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20617: LD_EXP 31
20621: PPUSH
20622: LD_STRING DG-Veh-b-24
20624: PPUSH
20625: CALL_OW 88
// end ; DialogueOff ;
20629: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20633: LD_STRING M5a
20635: PPUSH
20636: CALL_OW 337
// for i in rolfSquad do
20640: LD_ADDR_VAR 0 1
20644: PUSH
20645: LD_EXP 47
20649: PUSH
20650: FOR_IN
20651: IFFALSE 20717
// begin SetSide ( i , 8 ) ;
20653: LD_VAR 0 1
20657: PPUSH
20658: LD_INT 8
20660: PPUSH
20661: CALL_OW 235
// if IsDriver ( i ) then
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL 59606 0 1
20674: IFFALSE 20695
// SetSide ( IsInUnit ( i ) , 8 ) else
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL_OW 310
20685: PPUSH
20686: LD_INT 8
20688: PPUSH
20689: CALL_OW 235
20693: GO 20715
// if IsInUnit ( i ) then
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL_OW 310
20704: IFFALSE 20715
// ComExitBuilding ( i ) ;
20706: LD_VAR 0 1
20710: PPUSH
20711: CALL_OW 122
// end ;
20715: GO 20650
20717: POP
20718: POP
// wait ( 0 0$1 ) ;
20719: LD_INT 35
20721: PPUSH
20722: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20726: LD_EXP 47
20730: PPUSH
20731: LD_INT 229
20733: PPUSH
20734: LD_INT 154
20736: PPUSH
20737: CALL_OW 114
// exit ;
20741: GO 20938
// end ; if IsDead ( Rolf ) then
20743: LD_EXP 43
20747: PPUSH
20748: CALL_OW 301
20752: IFFALSE 20763
// begin ChangeMissionObjectives ( M5a ) ;
20754: LD_STRING M5a
20756: PPUSH
20757: CALL_OW 337
// exit ;
20761: GO 20938
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20763: LD_EXP 47
20767: PPUSH
20768: LD_INT 55
20770: PUSH
20771: EMPTY
20772: LIST
20773: PPUSH
20774: CALL_OW 72
20778: PUSH
20779: LD_INT 0
20781: PLUS
20782: PUSH
20783: LD_EXP 47
20787: PUSH
20788: LD_INT 0
20790: PLUS
20791: EQUAL
20792: IFFALSE 20490
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20794: LD_ADDR_EXP 19
20798: PUSH
20799: LD_INT 0
20801: ST_TO_ADDR
// display_strings := [ ] ;
20802: LD_ADDR_OWVAR 47
20806: PUSH
20807: EMPTY
20808: ST_TO_ADDR
// DialogueOn ;
20809: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20813: LD_EXP 43
20817: PPUSH
20818: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20822: LD_EXP 43
20826: PPUSH
20827: LD_STRING DRf-Veh-a-17
20829: PPUSH
20830: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20834: LD_EXP 30
20838: PPUSH
20839: LD_STRING DH-08-Veh-a-18
20841: PPUSH
20842: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20846: LD_EXP 43
20850: PPUSH
20851: LD_STRING DRf-Veh-a-19
20853: PPUSH
20854: CALL_OW 88
// DialogueOff ;
20858: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20862: LD_STRING M5a
20864: PPUSH
20865: CALL_OW 337
// rolfHasVehicles := true ;
20869: LD_ADDR_EXP 16
20873: PUSH
20874: LD_INT 1
20876: ST_TO_ADDR
// for i in rolfSquad do
20877: LD_ADDR_VAR 0 1
20881: PUSH
20882: LD_EXP 47
20886: PUSH
20887: FOR_IN
20888: IFFALSE 20921
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20890: LD_VAR 0 1
20894: PPUSH
20895: CALL_OW 310
20899: PPUSH
20900: LD_INT 8
20902: PPUSH
20903: CALL_OW 235
// SetSide ( i , 8 ) ;
20907: LD_VAR 0 1
20911: PPUSH
20912: LD_INT 8
20914: PPUSH
20915: CALL_OW 235
// end ;
20919: GO 20887
20921: POP
20922: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20923: LD_EXP 47
20927: PPUSH
20928: LD_INT 229
20930: PPUSH
20931: LD_INT 154
20933: PPUSH
20934: CALL_OW 114
// end ;
20938: PPOPN 1
20940: END
// every 0 0$1 trigger leninSpotted do
20941: LD_EXP 14
20945: IFFALSE 21033
20947: GO 20949
20949: DISABLE
// begin wait ( 0 0$10 ) ;
20950: LD_INT 350
20952: PPUSH
20953: CALL_OW 67
// DialogueOn ;
20957: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20961: LD_EXP 42
20965: PPUSH
20966: LD_STRING DA-Transmission-1
20968: PPUSH
20969: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20973: LD_EXP 49
20977: PPUSH
20978: LD_STRING DMzw-Transmission-2
20980: PPUSH
20981: CALL_OW 94
// if gaidarKilled then
20985: LD_EXP 7
20989: IFFALSE 21005
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
20991: LD_EXP 49
20995: PPUSH
20996: LD_STRING DMzw-Transmission-3
20998: PPUSH
20999: CALL_OW 94
21003: GO 21017
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
21005: LD_EXP 49
21009: PPUSH
21010: LD_STRING DMzw-Transmission-a-3
21012: PPUSH
21013: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
21017: LD_EXP 30
21021: PPUSH
21022: LD_STRING DH-Transmission-4
21024: PPUSH
21025: CALL_OW 88
// DialogueOff ;
21029: CALL_OW 7
// end ;
21033: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
21034: LD_INT 22
21036: PUSH
21037: LD_INT 3
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 25
21046: PUSH
21047: LD_INT 9
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 101
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: PPUSH
21069: CALL_OW 69
21073: PUSH
21074: LD_EXP 30
21078: PPUSH
21079: CALL_OW 302
21083: AND
21084: IFFALSE 21149
21086: GO 21088
21088: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
21089: LD_INT 22
21091: PUSH
21092: LD_INT 3
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 25
21101: PUSH
21102: LD_INT 9
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 101
21111: PUSH
21112: LD_INT 2
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: LIST
21123: PPUSH
21124: CALL_OW 69
21128: PUSH
21129: LD_INT 1
21131: ARRAY
21132: PPUSH
21133: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
21137: LD_EXP 30
21141: PPUSH
21142: LD_STRING DH-Rubazooka-1
21144: PPUSH
21145: CALL_OW 88
// end ;
21149: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
21150: LD_INT 19
21152: PPUSH
21153: LD_INT 22
21155: PUSH
21156: LD_INT 3
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PPUSH
21163: CALL_OW 70
21167: PUSH
21168: LD_EXP 28
21172: AND
21173: IFFALSE 21224
21175: GO 21177
21177: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21178: LD_INT 19
21180: PPUSH
21181: LD_INT 22
21183: PUSH
21184: LD_INT 3
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PPUSH
21191: CALL_OW 70
21195: PPUSH
21196: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
21200: LD_EXP 30
21204: PPUSH
21205: LD_STRING DH-Ruattfirst-1
21207: PPUSH
21208: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
21212: LD_EXP 30
21216: PPUSH
21217: LD_STRING DH-Ruattfirst-2
21219: PPUSH
21220: CALL_OW 88
// end ;
21224: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
21225: LD_INT 19
21227: PPUSH
21228: LD_INT 22
21230: PUSH
21231: LD_INT 3
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PPUSH
21238: CALL_OW 70
21242: PUSH
21243: LD_EXP 28
21247: NOT
21248: AND
21249: IFFALSE 21288
21251: GO 21253
21253: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21254: LD_INT 19
21256: PPUSH
21257: LD_INT 22
21259: PUSH
21260: LD_INT 3
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 70
21271: PPUSH
21272: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
21276: LD_EXP 30
21280: PPUSH
21281: LD_STRING DH-Ruattnext-1
21283: PPUSH
21284: CALL_OW 88
// end ;
21288: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
21289: LD_EXP 44
21293: PPUSH
21294: CALL_OW 274
21298: PPUSH
21299: LD_INT 2
21301: PPUSH
21302: CALL_OW 275
21306: PUSH
21307: LD_INT 31
21309: LESS
21310: PUSH
21311: LD_EXP 31
21315: PPUSH
21316: CALL_OW 302
21320: AND
21321: IFFALSE 21876
21323: GO 21325
21325: DISABLE
21326: LD_INT 0
21328: PPUSH
21329: PPUSH
21330: PPUSH
// begin DialogueOn ;
21331: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
21335: LD_EXP 30
21339: PPUSH
21340: LD_STRING DH-Fuel-1
21342: PPUSH
21343: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
21347: LD_EXP 31
21351: PPUSH
21352: LD_STRING DG-Fuel-2
21354: PPUSH
21355: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
21359: LD_EXP 31
21363: PPUSH
21364: LD_STRING DG-Fuel-3
21366: PPUSH
21367: CALL_OW 88
// DialogueOff ;
21371: CALL_OW 7
// Query ( Oil ) ;
21375: LD_STRING Oil
21377: PPUSH
21378: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
21382: LD_INT 20
21384: PPUSH
21385: LD_INT 1
21387: PPUSH
21388: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
21392: LD_INT 35
21394: PPUSH
21395: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
21399: LD_INT 20
21401: PPUSH
21402: LD_INT 22
21404: PUSH
21405: LD_INT 2
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 33
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 2
21424: PUSH
21425: LD_INT 34
21427: PUSH
21428: LD_INT 32
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 34
21437: PUSH
21438: LD_INT 51
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: LIST
21454: PPUSH
21455: CALL_OW 70
21459: IFFALSE 21392
// SetAreaMapShow ( oilArea , 0 ) ;
21461: LD_INT 20
21463: PPUSH
21464: LD_INT 0
21466: PPUSH
21467: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
21471: LD_ADDR_VAR 0 1
21475: PUSH
21476: LD_INT 20
21478: PPUSH
21479: LD_INT 22
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 33
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: LD_INT 34
21504: PUSH
21505: LD_INT 32
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 34
21514: PUSH
21515: LD_INT 51
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: PPUSH
21532: CALL_OW 70
21536: PUSH
21537: LD_INT 1
21539: ARRAY
21540: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
21541: LD_ADDR_VAR 0 2
21545: PUSH
21546: LD_VAR 0 1
21550: PPUSH
21551: CALL_OW 311
21555: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
21556: LD_ADDR_VAR 0 3
21560: PUSH
21561: LD_VAR 0 1
21565: PPUSH
21566: CALL_OW 256
21570: ST_TO_ADDR
// RemoveUnit ( driver ) ;
21571: LD_VAR 0 2
21575: PPUSH
21576: CALL_OW 64
// RemoveUnit ( vehicle ) ;
21580: LD_VAR 0 1
21584: PPUSH
21585: CALL_OW 64
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
21589: LD_INT 9450
21591: PPUSH
21592: LD_INT 11550
21594: PPUSH
21595: CALL_OW 12
21599: PPUSH
21600: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21604: LD_INT 35
21606: PPUSH
21607: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
21611: LD_INT 22
21613: PUSH
21614: LD_INT 3
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 92
21623: PUSH
21624: LD_INT 261
21626: PUSH
21627: LD_INT 71
21629: PUSH
21630: LD_INT 12
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PPUSH
21643: CALL_OW 69
21647: NOT
21648: PUSH
21649: LD_INT 277
21651: PPUSH
21652: LD_INT 80
21654: PPUSH
21655: CALL_OW 428
21659: NOT
21660: AND
21661: IFFALSE 21604
// uc_nation := GetNation ( vehicle ) ;
21663: LD_ADDR_OWVAR 21
21667: PUSH
21668: LD_VAR 0 1
21672: PPUSH
21673: CALL_OW 248
21677: ST_TO_ADDR
// uc_side := 2 ;
21678: LD_ADDR_OWVAR 20
21682: PUSH
21683: LD_INT 2
21685: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21686: LD_VAR 0 1
21690: PPUSH
21691: CALL_OW 265
21695: PPUSH
21696: LD_VAR 0 1
21700: PPUSH
21701: CALL_OW 262
21705: PPUSH
21706: LD_VAR 0 1
21710: PPUSH
21711: CALL_OW 263
21715: PPUSH
21716: LD_VAR 0 1
21720: PPUSH
21721: CALL_OW 264
21725: PPUSH
21726: LD_INT 66
21728: PPUSH
21729: CALL 30127 0 5
// vehicle := CreateVehicle ;
21733: LD_ADDR_VAR 0 1
21737: PUSH
21738: CALL_OW 45
21742: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21743: LD_VAR 0 1
21747: PPUSH
21748: LD_INT 277
21750: PPUSH
21751: LD_INT 80
21753: PPUSH
21754: LD_INT 4
21756: PPUSH
21757: LD_INT 0
21759: PPUSH
21760: CALL 63931 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21764: LD_VAR 0 2
21768: PPUSH
21769: LD_VAR 0 1
21773: PPUSH
21774: CALL_OW 52
// SetLives ( vehicle , live ) ;
21778: LD_VAR 0 1
21782: PPUSH
21783: LD_VAR 0 3
21787: PPUSH
21788: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 , 40 ] [ Difficulty ] ) then
21792: LD_INT 70
21794: PUSH
21795: LD_INT 60
21797: PUSH
21798: LD_INT 50
21800: PUSH
21801: LD_INT 40
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: LD_OWVAR 67
21814: ARRAY
21815: PPUSH
21816: CALL_OW 13
21820: IFFALSE 21839
// SetCargo ( vehicle , mat_oil , 100 ) else
21822: LD_VAR 0 1
21826: PPUSH
21827: LD_INT 2
21829: PPUSH
21830: LD_INT 100
21832: PPUSH
21833: CALL_OW 290
21837: GO 21861
// if live > 333 then
21839: LD_VAR 0 3
21843: PUSH
21844: LD_INT 333
21846: GREATER
21847: IFFALSE 21861
// SetLives ( vehicle , 333 ) ;
21849: LD_VAR 0 1
21853: PPUSH
21854: LD_INT 333
21856: PPUSH
21857: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21861: LD_VAR 0 1
21865: PPUSH
21866: LD_INT 250
21868: PPUSH
21869: LD_INT 119
21871: PPUSH
21872: CALL_OW 111
// end ;
21876: PPOPN 3
21878: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21879: LD_EXP 14
21883: PUSH
21884: LD_EXP 23
21888: AND
21889: IFFALSE 22189
21891: GO 21893
21893: DISABLE
// begin wait ( 0 0$45 ) ;
21894: LD_INT 1575
21896: PPUSH
21897: CALL_OW 67
// DialogueOn ;
21901: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21905: LD_EXP 38
21909: PPUSH
21910: LD_STRING DShar-End-1
21912: PPUSH
21913: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21917: LD_EXP 30
21921: PPUSH
21922: LD_STRING DH-End-2
21924: PPUSH
21925: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21929: LD_EXP 38
21933: PPUSH
21934: LD_STRING DShar-End-3
21936: PPUSH
21937: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21941: LD_EXP 30
21945: PPUSH
21946: LD_STRING DH-End-4
21948: PPUSH
21949: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21953: LD_EXP 38
21957: PPUSH
21958: LD_STRING DShar-End-5
21960: PPUSH
21961: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21965: LD_EXP 38
21969: PPUSH
21970: LD_STRING DShar-End-6
21972: PPUSH
21973: CALL_OW 94
// dwait ( 0 0$2 ) ;
21977: LD_INT 70
21979: PPUSH
21980: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21984: LD_EXP 30
21988: PPUSH
21989: LD_STRING DH-End-7
21991: PPUSH
21992: CALL_OW 88
// DialogueOff ;
21996: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
22000: LD_STRING M6
22002: PPUSH
22003: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
22007: LD_INT 17
22009: PPUSH
22010: LD_INT 1
22012: PPUSH
22013: CALL_OW 424
// escapeAllowed := true ;
22017: LD_ADDR_EXP 24
22021: PUSH
22022: LD_INT 1
22024: ST_TO_ADDR
// wait ( 0 0$2 ) ;
22025: LD_INT 70
22027: PPUSH
22028: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
22032: LD_EXP 41
22036: PPUSH
22037: LD_STRING DKs-End-8
22039: PPUSH
22040: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
22044: LD_EXP 35
22048: PPUSH
22049: LD_STRING DK-End-10
22051: PPUSH
22052: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
22056: LD_EXP 41
22060: PPUSH
22061: LD_STRING DKs-End-9
22063: PPUSH
22064: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
22068: LD_EXP 37
22072: PPUSH
22073: LD_STRING DMar-End-11
22075: PPUSH
22076: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
22080: LD_STRING 05_DrugsTested
22082: PPUSH
22083: LD_EXP 1
22087: PPUSH
22088: CALL_OW 30
22092: IFFALSE 22106
// Say ( Mike , DM-End-12 ) ;
22094: LD_EXP 32
22098: PPUSH
22099: LD_STRING DM-End-12
22101: PPUSH
22102: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
22106: LD_EXP 39
22110: PPUSH
22111: LD_STRING DO-End-13
22113: PPUSH
22114: CALL_OW 88
// if IsOk ( Sophia ) then
22118: LD_EXP 36
22122: PPUSH
22123: CALL_OW 302
22127: IFFALSE 22153
// begin Say ( Sophia , DS-End-15 ) ;
22129: LD_EXP 36
22133: PPUSH
22134: LD_STRING DS-End-15
22136: PPUSH
22137: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
22141: LD_EXP 35
22145: PPUSH
22146: LD_STRING DK-End-16
22148: PPUSH
22149: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
22153: LD_EXP 31
22157: PPUSH
22158: LD_STRING DG-End-17
22160: PPUSH
22161: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
22165: LD_EXP 31
22169: PPUSH
22170: LD_STRING DG-End-18
22172: PPUSH
22173: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
22177: LD_EXP 31
22181: PPUSH
22182: LD_STRING DG-End-19
22184: PPUSH
22185: CALL_OW 88
// end ;
22189: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
22190: LD_EXP 24
22194: IFFALSE 22322
22196: GO 22198
22198: DISABLE
22199: LD_INT 0
22201: PPUSH
22202: PPUSH
// begin enable ;
22203: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
22204: LD_ADDR_OWVAR 47
22208: PUSH
22209: LD_STRING #X106-2
22211: PUSH
22212: LD_EXP 25
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
22221: LD_ADDR_EXP 25
22225: PUSH
22226: LD_EXP 25
22230: PUSH
22231: LD_INT 35
22233: MINUS
22234: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
22235: LD_ADDR_VAR 0 2
22239: PUSH
22240: LD_INT 17
22242: PPUSH
22243: LD_INT 22
22245: PUSH
22246: LD_INT 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 21
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 23
22265: PUSH
22266: LD_INT 2
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: LIST
22277: PPUSH
22278: CALL_OW 71
22282: ST_TO_ADDR
// if not outsiders then
22283: LD_VAR 0 2
22287: NOT
22288: IFFALSE 22305
// begin escapeAllowed := false ;
22290: LD_ADDR_EXP 24
22294: PUSH
22295: LD_INT 0
22297: ST_TO_ADDR
// disable ;
22298: DISABLE
// MissionWin ;
22299: CALL 22325 0 0
// exit ;
22303: GO 22322
// end ; if escapeTimer <= 0 0$00 then
22305: LD_EXP 25
22309: PUSH
22310: LD_INT 0
22312: LESSEQUAL
22313: IFFALSE 22322
// YouLost ( TimeOut ) ;
22315: LD_STRING TimeOut
22317: PPUSH
22318: CALL_OW 104
// end ;
22322: PPOPN 2
22324: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
22325: LD_INT 0
22327: PPUSH
22328: PPUSH
22329: PPUSH
22330: PPUSH
22331: PPUSH
// Say ( Heike , DH-End-20 ) ;
22332: LD_EXP 30
22336: PPUSH
22337: LD_STRING DH-End-20
22339: PPUSH
22340: CALL_OW 88
// if rolfDied then
22344: LD_EXP 13
22348: IFFALSE 22363
// AddMedal ( med1 , - 1 ) else
22350: LD_STRING med1
22352: PPUSH
22353: LD_INT 1
22355: NEG
22356: PPUSH
22357: CALL_OW 101
22361: GO 22393
// if not canRolfJoin then
22363: LD_EXP 29
22367: NOT
22368: IFFALSE 22383
// AddMedal ( med1 , - 2 ) else
22370: LD_STRING med1
22372: PPUSH
22373: LD_INT 2
22375: NEG
22376: PPUSH
22377: CALL_OW 101
22381: GO 22393
// AddMedal ( med1 , 1 ) ;
22383: LD_STRING med1
22385: PPUSH
22386: LD_INT 1
22388: PPUSH
22389: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
22393: LD_EXP 22
22397: PUSH
22398: LD_EXP 16
22402: AND
22403: IFFALSE 22417
// AddMedal ( med2 , 1 ) else
22405: LD_STRING med2
22407: PPUSH
22408: LD_INT 1
22410: PPUSH
22411: CALL_OW 101
22415: GO 22466
// if omarHasVehicles then
22417: LD_EXP 22
22421: IFFALSE 22436
// AddMedal ( med2 , - 1 ) else
22423: LD_STRING med2
22425: PPUSH
22426: LD_INT 1
22428: NEG
22429: PPUSH
22430: CALL_OW 101
22434: GO 22466
// if rolfHasVehicles then
22436: LD_EXP 16
22440: IFFALSE 22455
// AddMedal ( med2 , - 2 ) else
22442: LD_STRING med2
22444: PPUSH
22445: LD_INT 2
22447: NEG
22448: PPUSH
22449: CALL_OW 101
22453: GO 22466
// AddMedal ( med2 , - 3 ) ;
22455: LD_STRING med2
22457: PPUSH
22458: LD_INT 3
22460: NEG
22461: PPUSH
22462: CALL_OW 101
// if ruLoseCounter >= [ 40 , 55 , 70 , 82 ] [ Difficulty ] and heikeLoseCounter = 0 then
22466: LD_EXP 5
22470: PUSH
22471: LD_INT 40
22473: PUSH
22474: LD_INT 55
22476: PUSH
22477: LD_INT 70
22479: PUSH
22480: LD_INT 82
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: PUSH
22489: LD_OWVAR 67
22493: ARRAY
22494: GREATEREQUAL
22495: PUSH
22496: LD_EXP 26
22500: PUSH
22501: LD_INT 0
22503: EQUAL
22504: AND
22505: IFFALSE 22519
// AddMedal ( med3 , 1 ) else
22507: LD_STRING med3
22509: PPUSH
22510: LD_INT 1
22512: PPUSH
22513: CALL_OW 101
22517: GO 22549
// if heikeLoseCounter then
22519: LD_EXP 26
22523: IFFALSE 22538
// AddMedal ( med3 , - 2 ) else
22525: LD_STRING med3
22527: PPUSH
22528: LD_INT 2
22530: NEG
22531: PPUSH
22532: CALL_OW 101
22536: GO 22549
// AddMedal ( med3 , - 1 ) ;
22538: LD_STRING med3
22540: PPUSH
22541: LD_INT 1
22543: NEG
22544: PPUSH
22545: CALL_OW 101
// GiveMedals ( MAIN ) ;
22549: LD_STRING MAIN
22551: PPUSH
22552: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
22556: LD_INT 22
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 23
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 21
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: PPUSH
22591: CALL_OW 69
22595: PPUSH
22596: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
22600: LD_EXP 30
22604: PPUSH
22605: LD_STRING 06_Heike
22607: PPUSH
22608: CALL_OW 38
// if Aviradze then
22612: LD_EXP 42
22616: IFFALSE 22630
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
22618: LD_EXP 42
22622: PPUSH
22623: LD_STRING 06_Aviradze
22625: PPUSH
22626: CALL_OW 38
// if Ibrahim then
22630: LD_EXP 33
22634: IFFALSE 22648
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
22636: LD_EXP 33
22640: PPUSH
22641: LD_STRING 06_Ibrahim
22643: PPUSH
22644: CALL_OW 38
// if Kamil then
22648: LD_EXP 34
22652: IFFALSE 22666
// SaveCharacters ( Kamil , 06_Kamil ) ;
22654: LD_EXP 34
22658: PPUSH
22659: LD_STRING 06_Kamil
22661: PPUSH
22662: CALL_OW 38
// if Sophia then
22666: LD_EXP 36
22670: IFFALSE 22684
// SaveCharacters ( Sophia , 06_Sophia ) ;
22672: LD_EXP 36
22676: PPUSH
22677: LD_STRING 06_Sophia
22679: PPUSH
22680: CALL_OW 38
// if Kaia then
22684: LD_EXP 35
22688: IFFALSE 22702
// SaveCharacters ( Kaia , 06_Kaia ) ;
22690: LD_EXP 35
22694: PPUSH
22695: LD_STRING 06_Kaia
22697: PPUSH
22698: CALL_OW 38
// if Givi then
22702: LD_EXP 31
22706: IFFALSE 22720
// SaveCharacters ( Givi , 06_Givi ) ;
22708: LD_EXP 31
22712: PPUSH
22713: LD_STRING 06_Givi
22715: PPUSH
22716: CALL_OW 38
// if Mike then
22720: LD_EXP 32
22724: IFFALSE 22738
// SaveCharacters ( Mike , 06_Mike ) ;
22726: LD_EXP 32
22730: PPUSH
22731: LD_STRING 06_Mike
22733: PPUSH
22734: CALL_OW 38
// if Markov then
22738: LD_EXP 37
22742: IFFALSE 22756
// SaveCharacters ( Markov , 06_Markov ) ;
22744: LD_EXP 37
22748: PPUSH
22749: LD_STRING 06_Markov
22751: PPUSH
22752: CALL_OW 38
// if Kurt then
22756: LD_EXP 41
22760: IFFALSE 22774
// SaveCharacters ( Kurt , 06_Kurt ) ;
22762: LD_EXP 41
22766: PPUSH
22767: LD_STRING 06_Kurt
22769: PPUSH
22770: CALL_OW 38
// if heikeSecondSquad then
22774: LD_EXP 45
22778: IFFALSE 22792
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22780: LD_EXP 45
22784: PPUSH
22785: LD_STRING 06_others
22787: PPUSH
22788: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22792: LD_ADDR_VAR 0 3
22796: PUSH
22797: LD_INT 22
22799: PUSH
22800: LD_INT 2
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 23
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PPUSH
22821: CALL_OW 69
22825: ST_TO_ADDR
// if tmp then
22826: LD_VAR 0 3
22830: IFFALSE 22844
// SaveCharacters ( tmp , 06_apes ) ;
22832: LD_VAR 0 3
22836: PPUSH
22837: LD_STRING 06_apes
22839: PPUSH
22840: CALL_OW 38
// if Rolf then
22844: LD_EXP 43
22848: IFFALSE 22899
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22850: LD_EXP 43
22854: PPUSH
22855: LD_STRING 06_Rolf
22857: PPUSH
22858: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22862: LD_STRING enableBioCharacter(BIO_ROLF)
22864: PPUSH
22865: CALL_OW 559
// if rolfSquad diff Rolf then
22869: LD_EXP 47
22873: PUSH
22874: LD_EXP 43
22878: DIFF
22879: IFFALSE 22899
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22881: LD_EXP 47
22885: PUSH
22886: LD_EXP 43
22890: DIFF
22891: PPUSH
22892: LD_STRING 06_RolfSquad
22894: PPUSH
22895: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22899: LD_ADDR_VAR 0 3
22903: PUSH
22904: LD_INT 17
22906: PPUSH
22907: LD_INT 21
22909: PUSH
22910: LD_INT 2
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PPUSH
22917: CALL_OW 70
22921: ST_TO_ADDR
// if tmp then
22922: LD_VAR 0 3
22926: IFFALSE 23220
// begin tmp2 := [ ] ;
22928: LD_ADDR_VAR 0 4
22932: PUSH
22933: EMPTY
22934: ST_TO_ADDR
// for i in tmp do
22935: LD_ADDR_VAR 0 2
22939: PUSH
22940: LD_VAR 0 3
22944: PUSH
22945: FOR_IN
22946: IFFALSE 23206
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22948: LD_VAR 0 2
22952: PPUSH
22953: CALL_OW 264
22957: PUSH
22958: LD_INT 32
22960: PUSH
22961: LD_INT 12
22963: PUSH
22964: LD_INT 51
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: IN
22972: IFFALSE 23109
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22974: LD_ADDR_VAR 0 5
22978: PUSH
22979: LD_VAR 0 2
22983: PPUSH
22984: LD_INT 1
22986: PPUSH
22987: CALL_OW 289
22991: PUSH
22992: LD_VAR 0 2
22996: PPUSH
22997: LD_INT 2
22999: PPUSH
23000: CALL_OW 289
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
23009: LD_ADDR_VAR 0 4
23013: PUSH
23014: LD_VAR 0 4
23018: PPUSH
23019: LD_VAR 0 4
23023: PUSH
23024: LD_INT 1
23026: PLUS
23027: PPUSH
23028: LD_VAR 0 2
23032: PPUSH
23033: CALL_OW 265
23037: PUSH
23038: LD_VAR 0 2
23042: PPUSH
23043: CALL_OW 262
23047: PUSH
23048: LD_VAR 0 2
23052: PPUSH
23053: CALL_OW 263
23057: PUSH
23058: LD_VAR 0 2
23062: PPUSH
23063: CALL_OW 264
23067: PUSH
23068: LD_VAR 0 2
23072: PPUSH
23073: CALL_OW 248
23077: PUSH
23078: LD_VAR 0 2
23082: PPUSH
23083: CALL_OW 256
23087: PUSH
23088: LD_VAR 0 5
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: PPUSH
23102: CALL_OW 1
23106: ST_TO_ADDR
// end else
23107: GO 23204
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
23109: LD_ADDR_VAR 0 4
23113: PUSH
23114: LD_VAR 0 4
23118: PPUSH
23119: LD_VAR 0 4
23123: PUSH
23124: LD_INT 1
23126: PLUS
23127: PPUSH
23128: LD_VAR 0 2
23132: PPUSH
23133: CALL_OW 265
23137: PUSH
23138: LD_VAR 0 2
23142: PPUSH
23143: CALL_OW 262
23147: PUSH
23148: LD_VAR 0 2
23152: PPUSH
23153: CALL_OW 263
23157: PUSH
23158: LD_VAR 0 2
23162: PPUSH
23163: CALL_OW 264
23167: PUSH
23168: LD_VAR 0 2
23172: PPUSH
23173: CALL_OW 248
23177: PUSH
23178: LD_VAR 0 2
23182: PPUSH
23183: CALL_OW 256
23187: PUSH
23188: EMPTY
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: PPUSH
23199: CALL_OW 1
23203: ST_TO_ADDR
23204: GO 22945
23206: POP
23207: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
23208: LD_VAR 0 4
23212: PPUSH
23213: LD_STRING 06_Vehicles
23215: PPUSH
23216: CALL_OW 39
// end ; YouWin ;
23220: CALL_OW 103
// end ; end_of_file
23224: LD_VAR 0 1
23228: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
23229: LD_INT 0
23231: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
23232: LD_VAR 0 1
23236: PPUSH
23237: CALL_OW 255
23241: PUSH
23242: LD_INT 2
23244: EQUAL
23245: PUSH
23246: LD_OWVAR 52
23250: AND
23251: PUSH
23252: LD_VAR 0 1
23256: PPUSH
23257: CALL_OW 263
23261: PUSH
23262: LD_INT 1
23264: EQUAL
23265: AND
23266: IFFALSE 23321
// begin driver := IsDrivenBy ( vehicle ) ;
23268: LD_ADDR_VAR 0 3
23272: PUSH
23273: LD_VAR 0 1
23277: PPUSH
23278: CALL_OW 311
23282: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
23283: LD_VAR 0 1
23287: PPUSH
23288: LD_INT 211
23290: PPUSH
23291: LD_INT 101
23293: PPUSH
23294: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23298: LD_VAR 0 3
23302: PPUSH
23303: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23307: LD_VAR 0 3
23311: PPUSH
23312: LD_VAR 0 2
23316: PPUSH
23317: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
23321: LD_VAR 0 1
23325: PPUSH
23326: CALL_OW 255
23330: PUSH
23331: LD_INT 3
23333: EQUAL
23334: IFFALSE 23365
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
23336: LD_ADDR_EXP 56
23340: PUSH
23341: LD_EXP 56
23345: PPUSH
23346: LD_EXP 56
23350: PUSH
23351: LD_INT 1
23353: PLUS
23354: PPUSH
23355: LD_VAR 0 1
23359: PPUSH
23360: CALL_OW 1
23364: ST_TO_ADDR
// end ;
23365: PPOPN 3
23367: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
23368: LD_VAR 0 1
23372: PPUSH
23373: CALL_OW 255
23377: PUSH
23378: LD_INT 8
23380: EQUAL
23381: PUSH
23382: LD_VAR 0 1
23386: PPUSH
23387: CALL_OW 266
23391: PUSH
23392: LD_INT 4
23394: EQUAL
23395: AND
23396: IFFALSE 23407
// ComUpgrade ( b ) ;
23398: LD_VAR 0 1
23402: PPUSH
23403: CALL_OW 146
// end ;
23407: PPOPN 1
23409: END
// on UnitDestroyed ( un ) do begin if un = Heike then
23410: LD_VAR 0 1
23414: PUSH
23415: LD_EXP 30
23419: EQUAL
23420: IFFALSE 23429
// YouLost ( Heike ) ;
23422: LD_STRING Heike
23424: PPUSH
23425: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
23429: LD_VAR 0 1
23433: PUSH
23434: LD_INT 22
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 23
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PPUSH
23458: CALL_OW 69
23462: IN
23463: IFFALSE 23479
// heikeLoseCounter := heikeLoseCounter + 1 ;
23465: LD_ADDR_EXP 26
23469: PUSH
23470: LD_EXP 26
23474: PUSH
23475: LD_INT 1
23477: PLUS
23478: ST_TO_ADDR
// if un = arDepot then
23479: LD_VAR 0 1
23483: PUSH
23484: LD_EXP 44
23488: EQUAL
23489: IFFALSE 23498
// YouLost ( Base ) ;
23491: LD_STRING Base
23493: PPUSH
23494: CALL_OW 104
// if un = Rolf then
23498: LD_VAR 0 1
23502: PUSH
23503: LD_EXP 43
23507: EQUAL
23508: IFFALSE 23518
// rolfDied := true ;
23510: LD_ADDR_EXP 13
23514: PUSH
23515: LD_INT 1
23517: ST_TO_ADDR
// if un in rolfSquad then
23518: LD_VAR 0 1
23522: PUSH
23523: LD_EXP 47
23527: IN
23528: IFFALSE 23546
// rolfSquad := rolfSquad diff un ;
23530: LD_ADDR_EXP 47
23534: PUSH
23535: LD_EXP 47
23539: PUSH
23540: LD_VAR 0 1
23544: DIFF
23545: ST_TO_ADDR
// if un in omarSquad then
23546: LD_VAR 0 1
23550: PUSH
23551: LD_EXP 48
23555: IN
23556: IFFALSE 23574
// omarSquad := omarSquad diff un ;
23558: LD_ADDR_EXP 48
23562: PUSH
23563: LD_EXP 48
23567: PUSH
23568: LD_VAR 0 1
23572: DIFF
23573: ST_TO_ADDR
// if GetSide ( un ) = 3 then
23574: LD_VAR 0 1
23578: PPUSH
23579: CALL_OW 255
23583: PUSH
23584: LD_INT 3
23586: EQUAL
23587: IFFALSE 23603
// ruLoseCounter := ruLoseCounter + 1 ;
23589: LD_ADDR_EXP 5
23593: PUSH
23594: LD_EXP 5
23598: PUSH
23599: LD_INT 1
23601: PLUS
23602: ST_TO_ADDR
// if un in ruAttackers then
23603: LD_VAR 0 1
23607: PUSH
23608: LD_EXP 57
23612: IN
23613: IFFALSE 23631
// ruAttackers := ruAttackers diff un ;
23615: LD_ADDR_EXP 57
23619: PUSH
23620: LD_EXP 57
23624: PUSH
23625: LD_VAR 0 1
23629: DIFF
23630: ST_TO_ADDR
// end ;
23631: PPOPN 1
23633: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
23634: LD_INT 0
23636: PPUSH
23637: PPUSH
23638: PPUSH
23639: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23640: LD_VAR 0 1
23644: PPUSH
23645: CALL_OW 255
23649: PUSH
23650: LD_INT 3
23652: EQUAL
23653: PUSH
23654: LD_VAR 0 1
23658: PUSH
23659: LD_EXP 57
23663: IN
23664: NOT
23665: AND
23666: IFFALSE 24162
// begin if not IsInArea ( un , ruMainBase ) then
23668: LD_VAR 0 1
23672: PPUSH
23673: LD_INT 10
23675: PPUSH
23676: CALL_OW 308
23680: NOT
23681: IFFALSE 23695
// ComMoveToArea ( un , ruMainBase ) ;
23683: LD_VAR 0 1
23687: PPUSH
23688: LD_INT 10
23690: PPUSH
23691: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23695: LD_INT 35
23697: PPUSH
23698: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 302
23711: NOT
23712: PUSH
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_INT 10
23720: PPUSH
23721: CALL_OW 308
23725: OR
23726: IFFALSE 23695
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23728: LD_ADDR_EXP 55
23732: PUSH
23733: LD_EXP 55
23737: PPUSH
23738: LD_EXP 55
23742: PUSH
23743: LD_INT 1
23745: PLUS
23746: PPUSH
23747: LD_VAR 0 1
23751: PPUSH
23752: CALL_OW 1
23756: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23757: LD_ADDR_VAR 0 8
23761: PUSH
23762: LD_INT 72
23764: PUSH
23765: LD_INT 12
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: ST_TO_ADDR
// if tmp then
23772: LD_VAR 0 8
23776: IFFALSE 23891
// for i in tmp do
23778: LD_ADDR_VAR 0 5
23782: PUSH
23783: LD_VAR 0 8
23787: PUSH
23788: FOR_IN
23789: IFFALSE 23889
// if UnitsInside ( i ) < 6 then
23791: LD_VAR 0 5
23795: PPUSH
23796: CALL_OW 313
23800: PUSH
23801: LD_INT 6
23803: LESS
23804: IFFALSE 23887
// begin AddComEnterUnit ( un , i ) ;
23806: LD_VAR 0 1
23810: PPUSH
23811: LD_VAR 0 5
23815: PPUSH
23816: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23820: LD_VAR 0 8
23824: PPUSH
23825: LD_INT 22
23827: PUSH
23828: LD_INT 23
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: PPUSH
23838: LD_INT 2
23840: PPUSH
23841: CALL_OW 12
23845: ARRAY
23846: PPUSH
23847: LD_INT 1
23849: PPUSH
23850: LD_INT 1
23852: PPUSH
23853: LD_INT 44
23855: PUSH
23856: LD_INT 46
23858: PUSH
23859: LD_INT 47
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 1
23869: PPUSH
23870: LD_INT 3
23872: PPUSH
23873: CALL_OW 12
23877: ARRAY
23878: PPUSH
23879: CALL_OW 185
// exit ;
23883: POP
23884: POP
23885: GO 24162
// end ;
23887: GO 23788
23889: POP
23890: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23891: LD_ADDR_VAR 0 8
23895: PUSH
23896: LD_INT 10
23898: PPUSH
23899: LD_INT 22
23901: PUSH
23902: LD_INT 3
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 50
23911: PUSH
23912: EMPTY
23913: LIST
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: LD_INT 30
23920: PUSH
23921: LD_INT 4
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 30
23930: PUSH
23931: LD_INT 5
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 30
23940: PUSH
23941: LD_INT 32
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 30
23950: PUSH
23951: LD_INT 31
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: PPUSH
23970: CALL_OW 70
23974: ST_TO_ADDR
// if not tmp then
23975: LD_VAR 0 8
23979: NOT
23980: IFFALSE 23999
// begin ComMoveXY ( un , 83 , 133 ) ;
23982: LD_VAR 0 1
23986: PPUSH
23987: LD_INT 83
23989: PPUSH
23990: LD_INT 133
23992: PPUSH
23993: CALL_OW 111
// exit ;
23997: GO 24162
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23999: LD_ADDR_VAR 0 6
24003: PUSH
24004: LD_VAR 0 1
24008: PPUSH
24009: LD_VAR 0 8
24013: PPUSH
24014: LD_INT 1
24016: PPUSH
24017: LD_INT 1
24019: PPUSH
24020: CALL 30684 0 4
24024: PUSH
24025: FOR_IN
24026: IFFALSE 24160
// begin case GetBType ( b ) of b_armoury , b_barracks :
24028: LD_VAR 0 6
24032: PPUSH
24033: CALL_OW 266
24037: PUSH
24038: LD_INT 4
24040: DOUBLE
24041: EQUAL
24042: IFTRUE 24052
24044: LD_INT 5
24046: DOUBLE
24047: EQUAL
24048: IFTRUE 24052
24050: GO 24063
24052: POP
// p := 6 ; b_breastwork , b_bunker :
24053: LD_ADDR_VAR 0 7
24057: PUSH
24058: LD_INT 6
24060: ST_TO_ADDR
24061: GO 24089
24063: LD_INT 31
24065: DOUBLE
24066: EQUAL
24067: IFTRUE 24077
24069: LD_INT 32
24071: DOUBLE
24072: EQUAL
24073: IFTRUE 24077
24075: GO 24088
24077: POP
// p := 1 ; end ;
24078: LD_ADDR_VAR 0 7
24082: PUSH
24083: LD_INT 1
24085: ST_TO_ADDR
24086: GO 24089
24088: POP
// if UnitsInside ( b ) < p then
24089: LD_VAR 0 6
24093: PPUSH
24094: CALL_OW 313
24098: PUSH
24099: LD_VAR 0 7
24103: LESS
24104: IFFALSE 24158
// begin ComEnterUnit ( un , b ) ;
24106: LD_VAR 0 1
24110: PPUSH
24111: LD_VAR 0 6
24115: PPUSH
24116: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
24120: LD_VAR 0 6
24124: PPUSH
24125: CALL_OW 266
24129: PUSH
24130: LD_INT 4
24132: PUSH
24133: LD_INT 5
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: IN
24140: IFFALSE 24154
// AddComChangeProfession ( un , class_soldier ) ;
24142: LD_VAR 0 1
24146: PPUSH
24147: LD_INT 1
24149: PPUSH
24150: CALL_OW 183
// exit ;
24154: POP
24155: POP
24156: GO 24162
// end ; end ;
24158: GO 24025
24160: POP
24161: POP
// end ; end ;
24162: PPOPN 8
24164: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
24165: LD_INT 0
24167: PPUSH
24168: PPUSH
24169: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
24170: LD_VAR 0 2
24174: PPUSH
24175: CALL_OW 255
24179: PUSH
24180: LD_INT 3
24182: EQUAL
24183: PUSH
24184: LD_VAR 0 2
24188: PPUSH
24189: CALL_OW 257
24193: PUSH
24194: LD_INT 1
24196: EQUAL
24197: AND
24198: PUSH
24199: LD_VAR 0 2
24203: PUSH
24204: LD_EXP 55
24208: IN
24209: NOT
24210: AND
24211: IFFALSE 24524
// begin ComMoveToArea ( un , ruMainBase ) ;
24213: LD_VAR 0 2
24217: PPUSH
24218: LD_INT 10
24220: PPUSH
24221: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
24225: LD_INT 35
24227: PPUSH
24228: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
24232: LD_VAR 0 2
24236: PPUSH
24237: CALL_OW 302
24241: NOT
24242: PUSH
24243: LD_VAR 0 2
24247: PPUSH
24248: LD_INT 10
24250: PPUSH
24251: CALL_OW 308
24255: OR
24256: IFFALSE 24225
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
24258: LD_ADDR_EXP 55
24262: PUSH
24263: LD_EXP 55
24267: PPUSH
24268: LD_EXP 55
24272: PUSH
24273: LD_INT 1
24275: PLUS
24276: PPUSH
24277: LD_VAR 0 2
24281: PPUSH
24282: CALL_OW 1
24286: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24287: LD_ADDR_VAR 0 4
24291: PUSH
24292: LD_INT 10
24294: PPUSH
24295: LD_INT 22
24297: PUSH
24298: LD_INT 3
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 50
24307: PUSH
24308: EMPTY
24309: LIST
24310: PUSH
24311: LD_INT 2
24313: PUSH
24314: LD_INT 30
24316: PUSH
24317: LD_INT 4
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 30
24326: PUSH
24327: LD_INT 5
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 30
24336: PUSH
24337: LD_INT 32
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 31
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: PPUSH
24366: CALL_OW 70
24370: ST_TO_ADDR
// if not tmp then
24371: LD_VAR 0 4
24375: NOT
24376: IFFALSE 24395
// begin ComMoveXY ( un , 83 , 133 ) ;
24378: LD_VAR 0 2
24382: PPUSH
24383: LD_INT 83
24385: PPUSH
24386: LD_INT 133
24388: PPUSH
24389: CALL_OW 111
// exit ;
24393: GO 24773
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24395: LD_ADDR_VAR 0 5
24399: PUSH
24400: LD_VAR 0 2
24404: PPUSH
24405: LD_VAR 0 4
24409: PPUSH
24410: LD_INT 1
24412: PPUSH
24413: LD_INT 1
24415: PPUSH
24416: CALL 30684 0 4
24420: PUSH
24421: FOR_IN
24422: IFFALSE 24522
// begin case GetBType ( b ) of b_armoury , b_barracks :
24424: LD_VAR 0 5
24428: PPUSH
24429: CALL_OW 266
24433: PUSH
24434: LD_INT 4
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24448
24440: LD_INT 5
24442: DOUBLE
24443: EQUAL
24444: IFTRUE 24448
24446: GO 24459
24448: POP
// p := 6 ; b_breastwork , b_bunker :
24449: LD_ADDR_VAR 0 3
24453: PUSH
24454: LD_INT 6
24456: ST_TO_ADDR
24457: GO 24485
24459: LD_INT 31
24461: DOUBLE
24462: EQUAL
24463: IFTRUE 24473
24465: LD_INT 32
24467: DOUBLE
24468: EQUAL
24469: IFTRUE 24473
24471: GO 24484
24473: POP
// p := 1 ; end ;
24474: LD_ADDR_VAR 0 3
24478: PUSH
24479: LD_INT 1
24481: ST_TO_ADDR
24482: GO 24485
24484: POP
// if UnitsInside ( b ) < p then
24485: LD_VAR 0 5
24489: PPUSH
24490: CALL_OW 313
24494: PUSH
24495: LD_VAR 0 3
24499: LESS
24500: IFFALSE 24520
// begin ComEnterUnit ( un , b ) ;
24502: LD_VAR 0 2
24506: PPUSH
24507: LD_VAR 0 5
24511: PPUSH
24512: CALL_OW 120
// exit ;
24516: POP
24517: POP
24518: GO 24773
// end ; end ;
24520: GO 24421
24522: POP
24523: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
24524: LD_VAR 0 2
24528: PUSH
24529: LD_EXP 55
24533: IN
24534: PUSH
24535: LD_VAR 0 2
24539: PPUSH
24540: CALL_OW 257
24544: PUSH
24545: LD_INT 1
24547: EQUAL
24548: AND
24549: IFFALSE 24773
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24551: LD_ADDR_VAR 0 4
24555: PUSH
24556: LD_INT 10
24558: PPUSH
24559: LD_INT 22
24561: PUSH
24562: LD_INT 3
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 50
24571: PUSH
24572: EMPTY
24573: LIST
24574: PUSH
24575: LD_INT 2
24577: PUSH
24578: LD_INT 30
24580: PUSH
24581: LD_INT 4
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 30
24590: PUSH
24591: LD_INT 5
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 30
24600: PUSH
24601: LD_INT 32
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 30
24610: PUSH
24611: LD_INT 31
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: LIST
24629: PPUSH
24630: CALL_OW 70
24634: ST_TO_ADDR
// if not tmp then
24635: LD_VAR 0 4
24639: NOT
24640: IFFALSE 24644
// exit ;
24642: GO 24773
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24644: LD_ADDR_VAR 0 5
24648: PUSH
24649: LD_VAR 0 2
24653: PPUSH
24654: LD_VAR 0 4
24658: PPUSH
24659: LD_INT 1
24661: PPUSH
24662: LD_INT 1
24664: PPUSH
24665: CALL 30684 0 4
24669: PUSH
24670: FOR_IN
24671: IFFALSE 24771
// begin case GetBType ( b ) of b_armoury , b_barracks :
24673: LD_VAR 0 5
24677: PPUSH
24678: CALL_OW 266
24682: PUSH
24683: LD_INT 4
24685: DOUBLE
24686: EQUAL
24687: IFTRUE 24697
24689: LD_INT 5
24691: DOUBLE
24692: EQUAL
24693: IFTRUE 24697
24695: GO 24708
24697: POP
// p := 6 ; b_breastwork , b_bunker :
24698: LD_ADDR_VAR 0 3
24702: PUSH
24703: LD_INT 6
24705: ST_TO_ADDR
24706: GO 24734
24708: LD_INT 31
24710: DOUBLE
24711: EQUAL
24712: IFTRUE 24722
24714: LD_INT 32
24716: DOUBLE
24717: EQUAL
24718: IFTRUE 24722
24720: GO 24733
24722: POP
// p := 1 ; end ;
24723: LD_ADDR_VAR 0 3
24727: PUSH
24728: LD_INT 1
24730: ST_TO_ADDR
24731: GO 24734
24733: POP
// if UnitsInside ( b ) < p then
24734: LD_VAR 0 5
24738: PPUSH
24739: CALL_OW 313
24743: PUSH
24744: LD_VAR 0 3
24748: LESS
24749: IFFALSE 24769
// begin ComEnterUnit ( un , b ) ;
24751: LD_VAR 0 2
24755: PPUSH
24756: LD_VAR 0 5
24760: PPUSH
24761: CALL_OW 120
// exit ;
24765: POP
24766: POP
24767: GO 24773
// end ; end ;
24769: GO 24670
24771: POP
24772: POP
// end ; end ;
24773: PPOPN 5
24775: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24776: LD_VAR 0 1
24780: PUSH
24781: LD_INT 2
24783: EQUAL
24784: PUSH
24785: LD_VAR 0 2
24789: PUSH
24790: LD_INT 5
24792: PUSH
24793: LD_INT 8
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: IN
24800: AND
24801: IFFALSE 24810
// YouLost ( FriendlyFire ) ;
24803: LD_STRING FriendlyFire
24805: PPUSH
24806: CALL_OW 104
// end ;
24810: PPOPN 2
24812: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24813: LD_VAR 0 1
24817: PPUSH
24818: CALL_OW 255
24822: PUSH
24823: LD_INT 8
24825: EQUAL
24826: PUSH
24827: LD_VAR 0 1
24831: PPUSH
24832: CALL_OW 266
24836: PUSH
24837: LD_INT 5
24839: EQUAL
24840: AND
24841: IFFALSE 24855
// SetClass ( unit , class_mortar ) ;
24843: LD_VAR 0 2
24847: PPUSH
24848: LD_INT 8
24850: PPUSH
24851: CALL_OW 336
// end ; end_of_file
24855: PPOPN 2
24857: END
// every 0 0$50 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 , 150 ] [ Difficulty ] do
24858: LD_INT 6
24860: PPUSH
24861: LD_INT 1
24863: PPUSH
24864: CALL_OW 287
24868: PUSH
24869: LD_INT 300
24871: PUSH
24872: LD_INT 250
24874: PUSH
24875: LD_INT 200
24877: PUSH
24878: LD_INT 150
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: PUSH
24887: LD_OWVAR 67
24891: ARRAY
24892: LESS
24893: IFFALSE 24920
24895: GO 24897
24897: DISABLE
// begin enable ;
24898: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24899: LD_INT 1
24901: PPUSH
24902: LD_INT 5
24904: PPUSH
24905: CALL_OW 12
24909: PPUSH
24910: LD_INT 6
24912: PPUSH
24913: LD_INT 1
24915: PPUSH
24916: CALL_OW 55
// end ; end_of_file
24920: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24921: LD_EXP 18
24925: PUSH
24926: LD_EXP 20
24930: AND
24931: PUSH
24932: LD_EXP 17
24936: PUSH
24937: LD_EXP 19
24941: AND
24942: OR
24943: IFFALSE 25262
24945: GO 24947
24947: DISABLE
// begin enable ;
24948: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24949: LD_EXP 18
24953: PUSH
24954: LD_EXP 20
24958: AND
24959: PUSH
24960: LD_EXP 17
24964: PUSH
24965: LD_EXP 19
24969: AND
24970: AND
24971: IFFALSE 25108
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24973: LD_ADDR_OWVAR 47
24977: PUSH
24978: LD_STRING #X106-1a
24980: PUSH
24981: LD_EXP 21
24985: PUSH
24986: LD_INT 16
24988: PPUSH
24989: LD_INT 22
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 21
25001: PUSH
25002: LD_INT 2
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 33
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 58
25021: PUSH
25022: EMPTY
25023: LIST
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: PPUSH
25031: CALL_OW 70
25035: MINUS
25036: PPUSH
25037: CALL 63977 0 1
25041: PUSH
25042: LD_STRING #X106-3a
25044: PUSH
25045: LD_EXP 20
25049: PUSH
25050: LD_STRING #X106-1
25052: PUSH
25053: LD_EXP 47
25057: PUSH
25058: LD_INT 0
25060: PLUS
25061: PUSH
25062: LD_EXP 47
25066: PPUSH
25067: LD_INT 55
25069: PUSH
25070: EMPTY
25071: LIST
25072: PPUSH
25073: CALL_OW 72
25077: PUSH
25078: LD_INT 0
25080: PLUS
25081: MINUS
25082: PPUSH
25083: CALL 63977 0 1
25087: PUSH
25088: LD_STRING #X106-3
25090: PUSH
25091: LD_EXP 19
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: ST_TO_ADDR
// end else
25106: GO 25262
// if omarWantVehicles and omarWaitingForVehiclesTimer then
25108: LD_EXP 18
25112: PUSH
25113: LD_EXP 20
25117: AND
25118: IFFALSE 25205
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
25120: LD_ADDR_OWVAR 47
25124: PUSH
25125: LD_STRING #X106-1a
25127: PUSH
25128: LD_EXP 21
25132: PUSH
25133: LD_INT 16
25135: PPUSH
25136: LD_INT 22
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 21
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 33
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 58
25168: PUSH
25169: EMPTY
25170: LIST
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: PPUSH
25178: CALL_OW 70
25182: MINUS
25183: PPUSH
25184: CALL 63977 0 1
25188: PUSH
25189: LD_STRING #X106-3a
25191: PUSH
25192: LD_EXP 20
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: ST_TO_ADDR
// end else
25203: GO 25262
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25205: LD_ADDR_OWVAR 47
25209: PUSH
25210: LD_STRING #X106-1
25212: PUSH
25213: LD_EXP 47
25217: PUSH
25218: LD_INT 0
25220: PLUS
25221: PUSH
25222: LD_EXP 47
25226: PPUSH
25227: LD_INT 55
25229: PUSH
25230: EMPTY
25231: LIST
25232: PPUSH
25233: CALL_OW 72
25237: PUSH
25238: LD_INT 0
25240: PLUS
25241: MINUS
25242: PPUSH
25243: CALL 63977 0 1
25247: PUSH
25248: LD_STRING #X106-3
25250: PUSH
25251: LD_EXP 19
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: ST_TO_ADDR
// end ; end ; end_of_file
25262: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25263: LD_INT 0
25265: PPUSH
25266: PPUSH
// if exist_mode then
25267: LD_VAR 0 2
25271: IFFALSE 25296
// unit := CreateCharacter ( prefix & ident ) else
25273: LD_ADDR_VAR 0 5
25277: PUSH
25278: LD_VAR 0 3
25282: PUSH
25283: LD_VAR 0 1
25287: STR
25288: PPUSH
25289: CALL_OW 34
25293: ST_TO_ADDR
25294: GO 25311
// unit := NewCharacter ( ident ) ;
25296: LD_ADDR_VAR 0 5
25300: PUSH
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 25
25310: ST_TO_ADDR
// result := unit ;
25311: LD_ADDR_VAR 0 4
25315: PUSH
25316: LD_VAR 0 5
25320: ST_TO_ADDR
// end ;
25321: LD_VAR 0 4
25325: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25326: LD_INT 0
25328: PPUSH
25329: PPUSH
// if not side or not nation then
25330: LD_VAR 0 1
25334: NOT
25335: PUSH
25336: LD_VAR 0 2
25340: NOT
25341: OR
25342: IFFALSE 25346
// exit ;
25344: GO 26114
// case nation of nation_american :
25346: LD_VAR 0 2
25350: PUSH
25351: LD_INT 1
25353: DOUBLE
25354: EQUAL
25355: IFTRUE 25359
25357: GO 25573
25359: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25360: LD_ADDR_VAR 0 4
25364: PUSH
25365: LD_INT 35
25367: PUSH
25368: LD_INT 45
25370: PUSH
25371: LD_INT 46
25373: PUSH
25374: LD_INT 47
25376: PUSH
25377: LD_INT 82
25379: PUSH
25380: LD_INT 83
25382: PUSH
25383: LD_INT 84
25385: PUSH
25386: LD_INT 85
25388: PUSH
25389: LD_INT 86
25391: PUSH
25392: LD_INT 1
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: LD_INT 6
25400: PUSH
25401: LD_INT 15
25403: PUSH
25404: LD_INT 16
25406: PUSH
25407: LD_INT 7
25409: PUSH
25410: LD_INT 12
25412: PUSH
25413: LD_INT 13
25415: PUSH
25416: LD_INT 10
25418: PUSH
25419: LD_INT 14
25421: PUSH
25422: LD_INT 20
25424: PUSH
25425: LD_INT 21
25427: PUSH
25428: LD_INT 22
25430: PUSH
25431: LD_INT 25
25433: PUSH
25434: LD_INT 32
25436: PUSH
25437: LD_INT 27
25439: PUSH
25440: LD_INT 36
25442: PUSH
25443: LD_INT 69
25445: PUSH
25446: LD_INT 39
25448: PUSH
25449: LD_INT 34
25451: PUSH
25452: LD_INT 40
25454: PUSH
25455: LD_INT 48
25457: PUSH
25458: LD_INT 49
25460: PUSH
25461: LD_INT 50
25463: PUSH
25464: LD_INT 51
25466: PUSH
25467: LD_INT 52
25469: PUSH
25470: LD_INT 53
25472: PUSH
25473: LD_INT 54
25475: PUSH
25476: LD_INT 55
25478: PUSH
25479: LD_INT 56
25481: PUSH
25482: LD_INT 57
25484: PUSH
25485: LD_INT 58
25487: PUSH
25488: LD_INT 59
25490: PUSH
25491: LD_INT 60
25493: PUSH
25494: LD_INT 61
25496: PUSH
25497: LD_INT 62
25499: PUSH
25500: LD_INT 80
25502: PUSH
25503: LD_INT 82
25505: PUSH
25506: LD_INT 83
25508: PUSH
25509: LD_INT 84
25511: PUSH
25512: LD_INT 85
25514: PUSH
25515: LD_INT 86
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: ST_TO_ADDR
25571: GO 26038
25573: LD_INT 2
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25581
25579: GO 25807
25581: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25582: LD_ADDR_VAR 0 4
25586: PUSH
25587: LD_INT 35
25589: PUSH
25590: LD_INT 45
25592: PUSH
25593: LD_INT 46
25595: PUSH
25596: LD_INT 47
25598: PUSH
25599: LD_INT 82
25601: PUSH
25602: LD_INT 83
25604: PUSH
25605: LD_INT 84
25607: PUSH
25608: LD_INT 85
25610: PUSH
25611: LD_INT 87
25613: PUSH
25614: LD_INT 70
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: LD_INT 11
25622: PUSH
25623: LD_INT 3
25625: PUSH
25626: LD_INT 4
25628: PUSH
25629: LD_INT 5
25631: PUSH
25632: LD_INT 6
25634: PUSH
25635: LD_INT 15
25637: PUSH
25638: LD_INT 18
25640: PUSH
25641: LD_INT 7
25643: PUSH
25644: LD_INT 17
25646: PUSH
25647: LD_INT 8
25649: PUSH
25650: LD_INT 20
25652: PUSH
25653: LD_INT 21
25655: PUSH
25656: LD_INT 22
25658: PUSH
25659: LD_INT 72
25661: PUSH
25662: LD_INT 26
25664: PUSH
25665: LD_INT 69
25667: PUSH
25668: LD_INT 39
25670: PUSH
25671: LD_INT 40
25673: PUSH
25674: LD_INT 41
25676: PUSH
25677: LD_INT 42
25679: PUSH
25680: LD_INT 43
25682: PUSH
25683: LD_INT 48
25685: PUSH
25686: LD_INT 49
25688: PUSH
25689: LD_INT 50
25691: PUSH
25692: LD_INT 51
25694: PUSH
25695: LD_INT 52
25697: PUSH
25698: LD_INT 53
25700: PUSH
25701: LD_INT 54
25703: PUSH
25704: LD_INT 55
25706: PUSH
25707: LD_INT 56
25709: PUSH
25710: LD_INT 60
25712: PUSH
25713: LD_INT 61
25715: PUSH
25716: LD_INT 62
25718: PUSH
25719: LD_INT 66
25721: PUSH
25722: LD_INT 67
25724: PUSH
25725: LD_INT 68
25727: PUSH
25728: LD_INT 81
25730: PUSH
25731: LD_INT 82
25733: PUSH
25734: LD_INT 83
25736: PUSH
25737: LD_INT 84
25739: PUSH
25740: LD_INT 85
25742: PUSH
25743: LD_INT 87
25745: PUSH
25746: LD_INT 88
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: ST_TO_ADDR
25805: GO 26038
25807: LD_INT 3
25809: DOUBLE
25810: EQUAL
25811: IFTRUE 25815
25813: GO 26037
25815: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25816: LD_ADDR_VAR 0 4
25820: PUSH
25821: LD_INT 46
25823: PUSH
25824: LD_INT 47
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: LD_INT 82
25835: PUSH
25836: LD_INT 83
25838: PUSH
25839: LD_INT 84
25841: PUSH
25842: LD_INT 85
25844: PUSH
25845: LD_INT 86
25847: PUSH
25848: LD_INT 11
25850: PUSH
25851: LD_INT 9
25853: PUSH
25854: LD_INT 20
25856: PUSH
25857: LD_INT 19
25859: PUSH
25860: LD_INT 21
25862: PUSH
25863: LD_INT 24
25865: PUSH
25866: LD_INT 22
25868: PUSH
25869: LD_INT 25
25871: PUSH
25872: LD_INT 28
25874: PUSH
25875: LD_INT 29
25877: PUSH
25878: LD_INT 30
25880: PUSH
25881: LD_INT 31
25883: PUSH
25884: LD_INT 37
25886: PUSH
25887: LD_INT 38
25889: PUSH
25890: LD_INT 32
25892: PUSH
25893: LD_INT 27
25895: PUSH
25896: LD_INT 33
25898: PUSH
25899: LD_INT 69
25901: PUSH
25902: LD_INT 39
25904: PUSH
25905: LD_INT 34
25907: PUSH
25908: LD_INT 40
25910: PUSH
25911: LD_INT 71
25913: PUSH
25914: LD_INT 23
25916: PUSH
25917: LD_INT 44
25919: PUSH
25920: LD_INT 48
25922: PUSH
25923: LD_INT 49
25925: PUSH
25926: LD_INT 50
25928: PUSH
25929: LD_INT 51
25931: PUSH
25932: LD_INT 52
25934: PUSH
25935: LD_INT 53
25937: PUSH
25938: LD_INT 54
25940: PUSH
25941: LD_INT 55
25943: PUSH
25944: LD_INT 56
25946: PUSH
25947: LD_INT 57
25949: PUSH
25950: LD_INT 58
25952: PUSH
25953: LD_INT 59
25955: PUSH
25956: LD_INT 63
25958: PUSH
25959: LD_INT 64
25961: PUSH
25962: LD_INT 65
25964: PUSH
25965: LD_INT 82
25967: PUSH
25968: LD_INT 83
25970: PUSH
25971: LD_INT 84
25973: PUSH
25974: LD_INT 85
25976: PUSH
25977: LD_INT 86
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: ST_TO_ADDR
26035: GO 26038
26037: POP
// if state > - 1 and state < 3 then
26038: LD_VAR 0 3
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: GREATER
26047: PUSH
26048: LD_VAR 0 3
26052: PUSH
26053: LD_INT 3
26055: LESS
26056: AND
26057: IFFALSE 26114
// for i in result do
26059: LD_ADDR_VAR 0 5
26063: PUSH
26064: LD_VAR 0 4
26068: PUSH
26069: FOR_IN
26070: IFFALSE 26112
// if GetTech ( i , side ) <> state then
26072: LD_VAR 0 5
26076: PPUSH
26077: LD_VAR 0 1
26081: PPUSH
26082: CALL_OW 321
26086: PUSH
26087: LD_VAR 0 3
26091: NONEQUAL
26092: IFFALSE 26110
// result := result diff i ;
26094: LD_ADDR_VAR 0 4
26098: PUSH
26099: LD_VAR 0 4
26103: PUSH
26104: LD_VAR 0 5
26108: DIFF
26109: ST_TO_ADDR
26110: GO 26069
26112: POP
26113: POP
// end ;
26114: LD_VAR 0 4
26118: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26119: LD_INT 0
26121: PPUSH
26122: PPUSH
26123: PPUSH
// result := true ;
26124: LD_ADDR_VAR 0 3
26128: PUSH
26129: LD_INT 1
26131: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26132: LD_ADDR_VAR 0 5
26136: PUSH
26137: LD_VAR 0 2
26141: PPUSH
26142: CALL_OW 480
26146: ST_TO_ADDR
// if not tmp then
26147: LD_VAR 0 5
26151: NOT
26152: IFFALSE 26156
// exit ;
26154: GO 26205
// for i in tmp do
26156: LD_ADDR_VAR 0 4
26160: PUSH
26161: LD_VAR 0 5
26165: PUSH
26166: FOR_IN
26167: IFFALSE 26203
// if GetTech ( i , side ) <> state_researched then
26169: LD_VAR 0 4
26173: PPUSH
26174: LD_VAR 0 1
26178: PPUSH
26179: CALL_OW 321
26183: PUSH
26184: LD_INT 2
26186: NONEQUAL
26187: IFFALSE 26201
// begin result := false ;
26189: LD_ADDR_VAR 0 3
26193: PUSH
26194: LD_INT 0
26196: ST_TO_ADDR
// exit ;
26197: POP
26198: POP
26199: GO 26205
// end ;
26201: GO 26166
26203: POP
26204: POP
// end ;
26205: LD_VAR 0 3
26209: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26210: LD_INT 0
26212: PPUSH
26213: PPUSH
26214: PPUSH
26215: PPUSH
26216: PPUSH
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
26224: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26225: LD_VAR 0 1
26229: NOT
26230: PUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL_OW 257
26240: PUSH
26241: LD_INT 9
26243: NONEQUAL
26244: OR
26245: IFFALSE 26249
// exit ;
26247: GO 26822
// side := GetSide ( unit ) ;
26249: LD_ADDR_VAR 0 9
26253: PUSH
26254: LD_VAR 0 1
26258: PPUSH
26259: CALL_OW 255
26263: ST_TO_ADDR
// tech_space := tech_spacanom ;
26264: LD_ADDR_VAR 0 12
26268: PUSH
26269: LD_INT 29
26271: ST_TO_ADDR
// tech_time := tech_taurad ;
26272: LD_ADDR_VAR 0 13
26276: PUSH
26277: LD_INT 28
26279: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26280: LD_ADDR_VAR 0 11
26284: PUSH
26285: LD_VAR 0 1
26289: PPUSH
26290: CALL_OW 310
26294: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26295: LD_VAR 0 11
26299: PPUSH
26300: CALL_OW 247
26304: PUSH
26305: LD_INT 2
26307: EQUAL
26308: IFFALSE 26312
// exit ;
26310: GO 26822
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26312: LD_ADDR_VAR 0 8
26316: PUSH
26317: LD_INT 81
26319: PUSH
26320: LD_VAR 0 9
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 3
26331: PUSH
26332: LD_INT 21
26334: PUSH
26335: LD_INT 3
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PPUSH
26350: CALL_OW 69
26354: ST_TO_ADDR
// if not tmp then
26355: LD_VAR 0 8
26359: NOT
26360: IFFALSE 26364
// exit ;
26362: GO 26822
// if in_unit then
26364: LD_VAR 0 11
26368: IFFALSE 26392
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26370: LD_ADDR_VAR 0 10
26374: PUSH
26375: LD_VAR 0 8
26379: PPUSH
26380: LD_VAR 0 11
26384: PPUSH
26385: CALL_OW 74
26389: ST_TO_ADDR
26390: GO 26412
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26392: LD_ADDR_VAR 0 10
26396: PUSH
26397: LD_VAR 0 8
26401: PPUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 74
26411: ST_TO_ADDR
// if not enemy then
26412: LD_VAR 0 10
26416: NOT
26417: IFFALSE 26421
// exit ;
26419: GO 26822
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26421: LD_VAR 0 11
26425: PUSH
26426: LD_VAR 0 11
26430: PPUSH
26431: LD_VAR 0 10
26435: PPUSH
26436: CALL_OW 296
26440: PUSH
26441: LD_INT 13
26443: GREATER
26444: AND
26445: PUSH
26446: LD_VAR 0 1
26450: PPUSH
26451: LD_VAR 0 10
26455: PPUSH
26456: CALL_OW 296
26460: PUSH
26461: LD_INT 12
26463: GREATER
26464: OR
26465: IFFALSE 26469
// exit ;
26467: GO 26822
// missile := [ 1 ] ;
26469: LD_ADDR_VAR 0 14
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: EMPTY
26478: LIST
26479: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26480: LD_VAR 0 9
26484: PPUSH
26485: LD_VAR 0 12
26489: PPUSH
26490: CALL_OW 325
26494: IFFALSE 26523
// missile := Insert ( missile , missile + 1 , 2 ) ;
26496: LD_ADDR_VAR 0 14
26500: PUSH
26501: LD_VAR 0 14
26505: PPUSH
26506: LD_VAR 0 14
26510: PUSH
26511: LD_INT 1
26513: PLUS
26514: PPUSH
26515: LD_INT 2
26517: PPUSH
26518: CALL_OW 2
26522: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26523: LD_VAR 0 9
26527: PPUSH
26528: LD_VAR 0 13
26532: PPUSH
26533: CALL_OW 325
26537: PUSH
26538: LD_VAR 0 10
26542: PPUSH
26543: CALL_OW 255
26547: PPUSH
26548: LD_VAR 0 13
26552: PPUSH
26553: CALL_OW 325
26557: NOT
26558: AND
26559: IFFALSE 26588
// missile := Insert ( missile , missile + 1 , 3 ) ;
26561: LD_ADDR_VAR 0 14
26565: PUSH
26566: LD_VAR 0 14
26570: PPUSH
26571: LD_VAR 0 14
26575: PUSH
26576: LD_INT 1
26578: PLUS
26579: PPUSH
26580: LD_INT 3
26582: PPUSH
26583: CALL_OW 2
26587: ST_TO_ADDR
// if missile < 2 then
26588: LD_VAR 0 14
26592: PUSH
26593: LD_INT 2
26595: LESS
26596: IFFALSE 26600
// exit ;
26598: GO 26822
// x := GetX ( enemy ) ;
26600: LD_ADDR_VAR 0 4
26604: PUSH
26605: LD_VAR 0 10
26609: PPUSH
26610: CALL_OW 250
26614: ST_TO_ADDR
// y := GetY ( enemy ) ;
26615: LD_ADDR_VAR 0 5
26619: PUSH
26620: LD_VAR 0 10
26624: PPUSH
26625: CALL_OW 251
26629: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26630: LD_ADDR_VAR 0 6
26634: PUSH
26635: LD_VAR 0 4
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PPUSH
26644: LD_INT 1
26646: PPUSH
26647: CALL_OW 12
26651: PLUS
26652: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26653: LD_ADDR_VAR 0 7
26657: PUSH
26658: LD_VAR 0 5
26662: PUSH
26663: LD_INT 1
26665: NEG
26666: PPUSH
26667: LD_INT 1
26669: PPUSH
26670: CALL_OW 12
26674: PLUS
26675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26676: LD_VAR 0 6
26680: PPUSH
26681: LD_VAR 0 7
26685: PPUSH
26686: CALL_OW 488
26690: NOT
26691: IFFALSE 26713
// begin _x := x ;
26693: LD_ADDR_VAR 0 6
26697: PUSH
26698: LD_VAR 0 4
26702: ST_TO_ADDR
// _y := y ;
26703: LD_ADDR_VAR 0 7
26707: PUSH
26708: LD_VAR 0 5
26712: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26713: LD_ADDR_VAR 0 3
26717: PUSH
26718: LD_INT 1
26720: PPUSH
26721: LD_VAR 0 14
26725: PPUSH
26726: CALL_OW 12
26730: ST_TO_ADDR
// case i of 1 :
26731: LD_VAR 0 3
26735: PUSH
26736: LD_INT 1
26738: DOUBLE
26739: EQUAL
26740: IFTRUE 26744
26742: GO 26761
26744: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26745: LD_VAR 0 1
26749: PPUSH
26750: LD_VAR 0 10
26754: PPUSH
26755: CALL_OW 115
26759: GO 26822
26761: LD_INT 2
26763: DOUBLE
26764: EQUAL
26765: IFTRUE 26769
26767: GO 26791
26769: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26770: LD_VAR 0 1
26774: PPUSH
26775: LD_VAR 0 6
26779: PPUSH
26780: LD_VAR 0 7
26784: PPUSH
26785: CALL_OW 153
26789: GO 26822
26791: LD_INT 3
26793: DOUBLE
26794: EQUAL
26795: IFTRUE 26799
26797: GO 26821
26799: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26800: LD_VAR 0 1
26804: PPUSH
26805: LD_VAR 0 6
26809: PPUSH
26810: LD_VAR 0 7
26814: PPUSH
26815: CALL_OW 154
26819: GO 26822
26821: POP
// end ;
26822: LD_VAR 0 2
26826: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26827: LD_INT 0
26829: PPUSH
26830: PPUSH
26831: PPUSH
26832: PPUSH
26833: PPUSH
26834: PPUSH
// if not unit or not building then
26835: LD_VAR 0 1
26839: NOT
26840: PUSH
26841: LD_VAR 0 2
26845: NOT
26846: OR
26847: IFFALSE 26851
// exit ;
26849: GO 27009
// x := GetX ( building ) ;
26851: LD_ADDR_VAR 0 5
26855: PUSH
26856: LD_VAR 0 2
26860: PPUSH
26861: CALL_OW 250
26865: ST_TO_ADDR
// y := GetY ( building ) ;
26866: LD_ADDR_VAR 0 6
26870: PUSH
26871: LD_VAR 0 2
26875: PPUSH
26876: CALL_OW 251
26880: ST_TO_ADDR
// for i = 0 to 5 do
26881: LD_ADDR_VAR 0 4
26885: PUSH
26886: DOUBLE
26887: LD_INT 0
26889: DEC
26890: ST_TO_ADDR
26891: LD_INT 5
26893: PUSH
26894: FOR_TO
26895: IFFALSE 27007
// begin _x := ShiftX ( x , i , 3 ) ;
26897: LD_ADDR_VAR 0 7
26901: PUSH
26902: LD_VAR 0 5
26906: PPUSH
26907: LD_VAR 0 4
26911: PPUSH
26912: LD_INT 3
26914: PPUSH
26915: CALL_OW 272
26919: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26920: LD_ADDR_VAR 0 8
26924: PUSH
26925: LD_VAR 0 6
26929: PPUSH
26930: LD_VAR 0 4
26934: PPUSH
26935: LD_INT 3
26937: PPUSH
26938: CALL_OW 273
26942: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26943: LD_VAR 0 7
26947: PPUSH
26948: LD_VAR 0 8
26952: PPUSH
26953: CALL_OW 488
26957: NOT
26958: IFFALSE 26962
// continue ;
26960: GO 26894
// if HexInfo ( _x , _y ) = 0 then
26962: LD_VAR 0 7
26966: PPUSH
26967: LD_VAR 0 8
26971: PPUSH
26972: CALL_OW 428
26976: PUSH
26977: LD_INT 0
26979: EQUAL
26980: IFFALSE 27005
// begin ComMoveXY ( unit , _x , _y ) ;
26982: LD_VAR 0 1
26986: PPUSH
26987: LD_VAR 0 7
26991: PPUSH
26992: LD_VAR 0 8
26996: PPUSH
26997: CALL_OW 111
// exit ;
27001: POP
27002: POP
27003: GO 27009
// end ; end ;
27005: GO 26894
27007: POP
27008: POP
// end ;
27009: LD_VAR 0 3
27013: RET
// export function ScanBase ( side , base_area ) ; begin
27014: LD_INT 0
27016: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27017: LD_ADDR_VAR 0 3
27021: PUSH
27022: LD_VAR 0 2
27026: PPUSH
27027: LD_INT 81
27029: PUSH
27030: LD_VAR 0 1
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PPUSH
27039: CALL_OW 70
27043: ST_TO_ADDR
// end ;
27044: LD_VAR 0 3
27048: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27049: LD_INT 0
27051: PPUSH
27052: PPUSH
27053: PPUSH
27054: PPUSH
// result := false ;
27055: LD_ADDR_VAR 0 2
27059: PUSH
27060: LD_INT 0
27062: ST_TO_ADDR
// side := GetSide ( unit ) ;
27063: LD_ADDR_VAR 0 3
27067: PUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: CALL_OW 255
27077: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27078: LD_ADDR_VAR 0 4
27082: PUSH
27083: LD_VAR 0 1
27087: PPUSH
27088: CALL_OW 248
27092: ST_TO_ADDR
// case nat of 1 :
27093: LD_VAR 0 4
27097: PUSH
27098: LD_INT 1
27100: DOUBLE
27101: EQUAL
27102: IFTRUE 27106
27104: GO 27117
27106: POP
// tech := tech_lassight ; 2 :
27107: LD_ADDR_VAR 0 5
27111: PUSH
27112: LD_INT 12
27114: ST_TO_ADDR
27115: GO 27156
27117: LD_INT 2
27119: DOUBLE
27120: EQUAL
27121: IFTRUE 27125
27123: GO 27136
27125: POP
// tech := tech_mortar ; 3 :
27126: LD_ADDR_VAR 0 5
27130: PUSH
27131: LD_INT 41
27133: ST_TO_ADDR
27134: GO 27156
27136: LD_INT 3
27138: DOUBLE
27139: EQUAL
27140: IFTRUE 27144
27142: GO 27155
27144: POP
// tech := tech_bazooka ; end ;
27145: LD_ADDR_VAR 0 5
27149: PUSH
27150: LD_INT 44
27152: ST_TO_ADDR
27153: GO 27156
27155: POP
// if Researched ( side , tech ) then
27156: LD_VAR 0 3
27160: PPUSH
27161: LD_VAR 0 5
27165: PPUSH
27166: CALL_OW 325
27170: IFFALSE 27197
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27172: LD_ADDR_VAR 0 2
27176: PUSH
27177: LD_INT 5
27179: PUSH
27180: LD_INT 8
27182: PUSH
27183: LD_INT 9
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: PUSH
27191: LD_VAR 0 4
27195: ARRAY
27196: ST_TO_ADDR
// end ;
27197: LD_VAR 0 2
27201: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27202: LD_INT 0
27204: PPUSH
27205: PPUSH
27206: PPUSH
// if not mines then
27207: LD_VAR 0 2
27211: NOT
27212: IFFALSE 27216
// exit ;
27214: GO 27360
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27216: LD_ADDR_VAR 0 5
27220: PUSH
27221: LD_INT 81
27223: PUSH
27224: LD_VAR 0 1
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 3
27235: PUSH
27236: LD_INT 21
27238: PUSH
27239: LD_INT 3
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PPUSH
27254: CALL_OW 69
27258: ST_TO_ADDR
// for i in mines do
27259: LD_ADDR_VAR 0 4
27263: PUSH
27264: LD_VAR 0 2
27268: PUSH
27269: FOR_IN
27270: IFFALSE 27358
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27272: LD_VAR 0 4
27276: PUSH
27277: LD_INT 1
27279: ARRAY
27280: PPUSH
27281: LD_VAR 0 4
27285: PUSH
27286: LD_INT 2
27288: ARRAY
27289: PPUSH
27290: CALL_OW 458
27294: NOT
27295: IFFALSE 27299
// continue ;
27297: GO 27269
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27299: LD_VAR 0 4
27303: PUSH
27304: LD_INT 1
27306: ARRAY
27307: PPUSH
27308: LD_VAR 0 4
27312: PUSH
27313: LD_INT 2
27315: ARRAY
27316: PPUSH
27317: CALL_OW 428
27321: PUSH
27322: LD_VAR 0 5
27326: IN
27327: IFFALSE 27356
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27329: LD_VAR 0 4
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: PPUSH
27338: LD_VAR 0 4
27342: PUSH
27343: LD_INT 2
27345: ARRAY
27346: PPUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 456
// end ;
27356: GO 27269
27358: POP
27359: POP
// end ;
27360: LD_VAR 0 3
27364: RET
// export function Count ( array ) ; var i ; begin
27365: LD_INT 0
27367: PPUSH
27368: PPUSH
// result := 0 ;
27369: LD_ADDR_VAR 0 2
27373: PUSH
27374: LD_INT 0
27376: ST_TO_ADDR
// for i in array do
27377: LD_ADDR_VAR 0 3
27381: PUSH
27382: LD_VAR 0 1
27386: PUSH
27387: FOR_IN
27388: IFFALSE 27412
// if i then
27390: LD_VAR 0 3
27394: IFFALSE 27410
// result := result + 1 ;
27396: LD_ADDR_VAR 0 2
27400: PUSH
27401: LD_VAR 0 2
27405: PUSH
27406: LD_INT 1
27408: PLUS
27409: ST_TO_ADDR
27410: GO 27387
27412: POP
27413: POP
// end ;
27414: LD_VAR 0 2
27418: RET
// export function IsEmpty ( building ) ; begin
27419: LD_INT 0
27421: PPUSH
// if not building then
27422: LD_VAR 0 1
27426: NOT
27427: IFFALSE 27431
// exit ;
27429: GO 27474
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27431: LD_ADDR_VAR 0 2
27435: PUSH
27436: LD_VAR 0 1
27440: PUSH
27441: LD_INT 22
27443: PUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: CALL_OW 255
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 58
27460: PUSH
27461: EMPTY
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PPUSH
27468: CALL_OW 69
27472: IN
27473: ST_TO_ADDR
// end ;
27474: LD_VAR 0 2
27478: RET
// export function IsNotFull ( building ) ; begin
27479: LD_INT 0
27481: PPUSH
// if not building then
27482: LD_VAR 0 1
27486: NOT
27487: IFFALSE 27491
// exit ;
27489: GO 27510
// result := UnitsInside ( building ) < 6 ;
27491: LD_ADDR_VAR 0 2
27495: PUSH
27496: LD_VAR 0 1
27500: PPUSH
27501: CALL_OW 313
27505: PUSH
27506: LD_INT 6
27508: LESS
27509: ST_TO_ADDR
// end ;
27510: LD_VAR 0 2
27514: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27515: LD_INT 0
27517: PPUSH
27518: PPUSH
27519: PPUSH
27520: PPUSH
// tmp := [ ] ;
27521: LD_ADDR_VAR 0 3
27525: PUSH
27526: EMPTY
27527: ST_TO_ADDR
// list := [ ] ;
27528: LD_ADDR_VAR 0 5
27532: PUSH
27533: EMPTY
27534: ST_TO_ADDR
// for i = 16 to 25 do
27535: LD_ADDR_VAR 0 4
27539: PUSH
27540: DOUBLE
27541: LD_INT 16
27543: DEC
27544: ST_TO_ADDR
27545: LD_INT 25
27547: PUSH
27548: FOR_TO
27549: IFFALSE 27622
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27551: LD_ADDR_VAR 0 3
27555: PUSH
27556: LD_VAR 0 3
27560: PUSH
27561: LD_INT 22
27563: PUSH
27564: LD_VAR 0 1
27568: PPUSH
27569: CALL_OW 255
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 91
27580: PUSH
27581: LD_VAR 0 1
27585: PUSH
27586: LD_INT 6
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 30
27596: PUSH
27597: LD_VAR 0 4
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: PPUSH
27614: CALL_OW 69
27618: ADD
27619: ST_TO_ADDR
27620: GO 27548
27622: POP
27623: POP
// for i = 1 to tmp do
27624: LD_ADDR_VAR 0 4
27628: PUSH
27629: DOUBLE
27630: LD_INT 1
27632: DEC
27633: ST_TO_ADDR
27634: LD_VAR 0 3
27638: PUSH
27639: FOR_TO
27640: IFFALSE 27728
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27642: LD_ADDR_VAR 0 5
27646: PUSH
27647: LD_VAR 0 5
27651: PUSH
27652: LD_VAR 0 3
27656: PUSH
27657: LD_VAR 0 4
27661: ARRAY
27662: PPUSH
27663: CALL_OW 266
27667: PUSH
27668: LD_VAR 0 3
27672: PUSH
27673: LD_VAR 0 4
27677: ARRAY
27678: PPUSH
27679: CALL_OW 250
27683: PUSH
27684: LD_VAR 0 3
27688: PUSH
27689: LD_VAR 0 4
27693: ARRAY
27694: PPUSH
27695: CALL_OW 251
27699: PUSH
27700: LD_VAR 0 3
27704: PUSH
27705: LD_VAR 0 4
27709: ARRAY
27710: PPUSH
27711: CALL_OW 254
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: PUSH
27722: EMPTY
27723: LIST
27724: ADD
27725: ST_TO_ADDR
27726: GO 27639
27728: POP
27729: POP
// result := list ;
27730: LD_ADDR_VAR 0 2
27734: PUSH
27735: LD_VAR 0 5
27739: ST_TO_ADDR
// end ;
27740: LD_VAR 0 2
27744: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27745: LD_INT 0
27747: PPUSH
27748: PPUSH
27749: PPUSH
27750: PPUSH
27751: PPUSH
27752: PPUSH
27753: PPUSH
// if not factory then
27754: LD_VAR 0 1
27758: NOT
27759: IFFALSE 27763
// exit ;
27761: GO 28356
// if control = control_apeman then
27763: LD_VAR 0 4
27767: PUSH
27768: LD_INT 5
27770: EQUAL
27771: IFFALSE 27880
// begin tmp := UnitsInside ( factory ) ;
27773: LD_ADDR_VAR 0 8
27777: PUSH
27778: LD_VAR 0 1
27782: PPUSH
27783: CALL_OW 313
27787: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27788: LD_VAR 0 8
27792: PPUSH
27793: LD_INT 25
27795: PUSH
27796: LD_INT 12
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PPUSH
27803: CALL_OW 72
27807: NOT
27808: IFFALSE 27818
// control := control_manual ;
27810: LD_ADDR_VAR 0 4
27814: PUSH
27815: LD_INT 1
27817: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27818: LD_ADDR_VAR 0 8
27822: PUSH
27823: LD_VAR 0 1
27827: PPUSH
27828: CALL 27515 0 1
27832: ST_TO_ADDR
// if tmp then
27833: LD_VAR 0 8
27837: IFFALSE 27880
// begin for i in tmp do
27839: LD_ADDR_VAR 0 7
27843: PUSH
27844: LD_VAR 0 8
27848: PUSH
27849: FOR_IN
27850: IFFALSE 27878
// if i [ 1 ] = b_ext_radio then
27852: LD_VAR 0 7
27856: PUSH
27857: LD_INT 1
27859: ARRAY
27860: PUSH
27861: LD_INT 22
27863: EQUAL
27864: IFFALSE 27876
// begin control := control_remote ;
27866: LD_ADDR_VAR 0 4
27870: PUSH
27871: LD_INT 2
27873: ST_TO_ADDR
// break ;
27874: GO 27878
// end ;
27876: GO 27849
27878: POP
27879: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27880: LD_VAR 0 1
27884: PPUSH
27885: LD_VAR 0 2
27889: PPUSH
27890: LD_VAR 0 3
27894: PPUSH
27895: LD_VAR 0 4
27899: PPUSH
27900: LD_VAR 0 5
27904: PPUSH
27905: CALL_OW 448
27909: IFFALSE 27944
// begin result := [ chassis , engine , control , weapon ] ;
27911: LD_ADDR_VAR 0 6
27915: PUSH
27916: LD_VAR 0 2
27920: PUSH
27921: LD_VAR 0 3
27925: PUSH
27926: LD_VAR 0 4
27930: PUSH
27931: LD_VAR 0 5
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: ST_TO_ADDR
// exit ;
27942: GO 28356
// end ; _chassis := AvailableChassisList ( factory ) ;
27944: LD_ADDR_VAR 0 9
27948: PUSH
27949: LD_VAR 0 1
27953: PPUSH
27954: CALL_OW 475
27958: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27959: LD_ADDR_VAR 0 11
27963: PUSH
27964: LD_VAR 0 1
27968: PPUSH
27969: CALL_OW 476
27973: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27974: LD_ADDR_VAR 0 12
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL_OW 477
27988: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27989: LD_ADDR_VAR 0 10
27993: PUSH
27994: LD_VAR 0 1
27998: PPUSH
27999: CALL_OW 478
28003: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28004: LD_VAR 0 9
28008: NOT
28009: PUSH
28010: LD_VAR 0 11
28014: NOT
28015: OR
28016: PUSH
28017: LD_VAR 0 12
28021: NOT
28022: OR
28023: PUSH
28024: LD_VAR 0 10
28028: NOT
28029: OR
28030: IFFALSE 28065
// begin result := [ chassis , engine , control , weapon ] ;
28032: LD_ADDR_VAR 0 6
28036: PUSH
28037: LD_VAR 0 2
28041: PUSH
28042: LD_VAR 0 3
28046: PUSH
28047: LD_VAR 0 4
28051: PUSH
28052: LD_VAR 0 5
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: ST_TO_ADDR
// exit ;
28063: GO 28356
// end ; if not chassis in _chassis then
28065: LD_VAR 0 2
28069: PUSH
28070: LD_VAR 0 9
28074: IN
28075: NOT
28076: IFFALSE 28102
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28078: LD_ADDR_VAR 0 2
28082: PUSH
28083: LD_VAR 0 9
28087: PUSH
28088: LD_INT 1
28090: PPUSH
28091: LD_VAR 0 9
28095: PPUSH
28096: CALL_OW 12
28100: ARRAY
28101: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28102: LD_VAR 0 2
28106: PPUSH
28107: LD_VAR 0 3
28111: PPUSH
28112: CALL 28361 0 2
28116: NOT
28117: IFFALSE 28176
// repeat engine := _engine [ 1 ] ;
28119: LD_ADDR_VAR 0 3
28123: PUSH
28124: LD_VAR 0 11
28128: PUSH
28129: LD_INT 1
28131: ARRAY
28132: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28133: LD_ADDR_VAR 0 11
28137: PUSH
28138: LD_VAR 0 11
28142: PPUSH
28143: LD_INT 1
28145: PPUSH
28146: CALL_OW 3
28150: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28151: LD_VAR 0 2
28155: PPUSH
28156: LD_VAR 0 3
28160: PPUSH
28161: CALL 28361 0 2
28165: PUSH
28166: LD_VAR 0 11
28170: PUSH
28171: EMPTY
28172: EQUAL
28173: OR
28174: IFFALSE 28119
// if not control in _control then
28176: LD_VAR 0 4
28180: PUSH
28181: LD_VAR 0 12
28185: IN
28186: NOT
28187: IFFALSE 28213
// control := _control [ rand ( 1 , _control ) ] ;
28189: LD_ADDR_VAR 0 4
28193: PUSH
28194: LD_VAR 0 12
28198: PUSH
28199: LD_INT 1
28201: PPUSH
28202: LD_VAR 0 12
28206: PPUSH
28207: CALL_OW 12
28211: ARRAY
28212: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28213: LD_VAR 0 2
28217: PPUSH
28218: LD_VAR 0 5
28222: PPUSH
28223: CALL 28581 0 2
28227: NOT
28228: IFFALSE 28287
// repeat weapon := _weapon [ 1 ] ;
28230: LD_ADDR_VAR 0 5
28234: PUSH
28235: LD_VAR 0 10
28239: PUSH
28240: LD_INT 1
28242: ARRAY
28243: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28244: LD_ADDR_VAR 0 10
28248: PUSH
28249: LD_VAR 0 10
28253: PPUSH
28254: LD_INT 1
28256: PPUSH
28257: CALL_OW 3
28261: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28262: LD_VAR 0 2
28266: PPUSH
28267: LD_VAR 0 5
28271: PPUSH
28272: CALL 28581 0 2
28276: PUSH
28277: LD_VAR 0 10
28281: PUSH
28282: EMPTY
28283: EQUAL
28284: OR
28285: IFFALSE 28230
// result := [ ] ;
28287: LD_ADDR_VAR 0 6
28291: PUSH
28292: EMPTY
28293: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28294: LD_VAR 0 1
28298: PPUSH
28299: LD_VAR 0 2
28303: PPUSH
28304: LD_VAR 0 3
28308: PPUSH
28309: LD_VAR 0 4
28313: PPUSH
28314: LD_VAR 0 5
28318: PPUSH
28319: CALL_OW 448
28323: IFFALSE 28356
// result := [ chassis , engine , control , weapon ] ;
28325: LD_ADDR_VAR 0 6
28329: PUSH
28330: LD_VAR 0 2
28334: PUSH
28335: LD_VAR 0 3
28339: PUSH
28340: LD_VAR 0 4
28344: PUSH
28345: LD_VAR 0 5
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: ST_TO_ADDR
// end ;
28356: LD_VAR 0 6
28360: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28361: LD_INT 0
28363: PPUSH
// if not chassis or not engine then
28364: LD_VAR 0 1
28368: NOT
28369: PUSH
28370: LD_VAR 0 2
28374: NOT
28375: OR
28376: IFFALSE 28380
// exit ;
28378: GO 28576
// case engine of engine_solar :
28380: LD_VAR 0 2
28384: PUSH
28385: LD_INT 2
28387: DOUBLE
28388: EQUAL
28389: IFTRUE 28393
28391: GO 28431
28393: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28394: LD_ADDR_VAR 0 3
28398: PUSH
28399: LD_INT 11
28401: PUSH
28402: LD_INT 12
28404: PUSH
28405: LD_INT 13
28407: PUSH
28408: LD_INT 14
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 3
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: ST_TO_ADDR
28429: GO 28560
28431: LD_INT 1
28433: DOUBLE
28434: EQUAL
28435: IFTRUE 28439
28437: GO 28501
28439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28440: LD_ADDR_VAR 0 3
28444: PUSH
28445: LD_INT 11
28447: PUSH
28448: LD_INT 12
28450: PUSH
28451: LD_INT 13
28453: PUSH
28454: LD_INT 14
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: LD_INT 3
28465: PUSH
28466: LD_INT 4
28468: PUSH
28469: LD_INT 5
28471: PUSH
28472: LD_INT 21
28474: PUSH
28475: LD_INT 23
28477: PUSH
28478: LD_INT 22
28480: PUSH
28481: LD_INT 24
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: ST_TO_ADDR
28499: GO 28560
28501: LD_INT 3
28503: DOUBLE
28504: EQUAL
28505: IFTRUE 28509
28507: GO 28559
28509: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28510: LD_ADDR_VAR 0 3
28514: PUSH
28515: LD_INT 13
28517: PUSH
28518: LD_INT 14
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: LD_INT 3
28526: PUSH
28527: LD_INT 4
28529: PUSH
28530: LD_INT 5
28532: PUSH
28533: LD_INT 21
28535: PUSH
28536: LD_INT 22
28538: PUSH
28539: LD_INT 23
28541: PUSH
28542: LD_INT 24
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: ST_TO_ADDR
28557: GO 28560
28559: POP
// result := ( chassis in result ) ;
28560: LD_ADDR_VAR 0 3
28564: PUSH
28565: LD_VAR 0 1
28569: PUSH
28570: LD_VAR 0 3
28574: IN
28575: ST_TO_ADDR
// end ;
28576: LD_VAR 0 3
28580: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28581: LD_INT 0
28583: PPUSH
// if not chassis or not weapon then
28584: LD_VAR 0 1
28588: NOT
28589: PUSH
28590: LD_VAR 0 2
28594: NOT
28595: OR
28596: IFFALSE 28600
// exit ;
28598: GO 29662
// case weapon of us_machine_gun :
28600: LD_VAR 0 2
28604: PUSH
28605: LD_INT 2
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28643
28613: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: LD_INT 2
28624: PUSH
28625: LD_INT 3
28627: PUSH
28628: LD_INT 4
28630: PUSH
28631: LD_INT 5
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: ST_TO_ADDR
28641: GO 29646
28643: LD_INT 3
28645: DOUBLE
28646: EQUAL
28647: IFTRUE 28651
28649: GO 28681
28651: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28652: LD_ADDR_VAR 0 3
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: LD_INT 3
28665: PUSH
28666: LD_INT 4
28668: PUSH
28669: LD_INT 5
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: ST_TO_ADDR
28679: GO 29646
28681: LD_INT 11
28683: DOUBLE
28684: EQUAL
28685: IFTRUE 28689
28687: GO 28719
28689: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28690: LD_ADDR_VAR 0 3
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: LD_INT 3
28703: PUSH
28704: LD_INT 4
28706: PUSH
28707: LD_INT 5
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: ST_TO_ADDR
28717: GO 29646
28719: LD_INT 4
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28753
28727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: LD_INT 3
28738: PUSH
28739: LD_INT 4
28741: PUSH
28742: LD_INT 5
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
28751: GO 29646
28753: LD_INT 5
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28787
28761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28762: LD_ADDR_VAR 0 3
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: LD_INT 3
28772: PUSH
28773: LD_INT 4
28775: PUSH
28776: LD_INT 5
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
28785: GO 29646
28787: LD_INT 9
28789: DOUBLE
28790: EQUAL
28791: IFTRUE 28795
28793: GO 28821
28795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: LD_INT 3
28806: PUSH
28807: LD_INT 4
28809: PUSH
28810: LD_INT 5
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: ST_TO_ADDR
28819: GO 29646
28821: LD_INT 7
28823: DOUBLE
28824: EQUAL
28825: IFTRUE 28829
28827: GO 28855
28829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: LD_INT 2
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: LD_INT 4
28843: PUSH
28844: LD_INT 5
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
28853: GO 29646
28855: LD_INT 12
28857: DOUBLE
28858: EQUAL
28859: IFTRUE 28863
28861: GO 28889
28863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28864: LD_ADDR_VAR 0 3
28868: PUSH
28869: LD_INT 2
28871: PUSH
28872: LD_INT 3
28874: PUSH
28875: LD_INT 4
28877: PUSH
28878: LD_INT 5
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: ST_TO_ADDR
28887: GO 29646
28889: LD_INT 13
28891: DOUBLE
28892: EQUAL
28893: IFTRUE 28897
28895: GO 28923
28897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28898: LD_ADDR_VAR 0 3
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: LD_INT 3
28908: PUSH
28909: LD_INT 4
28911: PUSH
28912: LD_INT 5
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: ST_TO_ADDR
28921: GO 29646
28923: LD_INT 14
28925: DOUBLE
28926: EQUAL
28927: IFTRUE 28931
28929: GO 28949
28931: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28932: LD_ADDR_VAR 0 3
28936: PUSH
28937: LD_INT 4
28939: PUSH
28940: LD_INT 5
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: ST_TO_ADDR
28947: GO 29646
28949: LD_INT 6
28951: DOUBLE
28952: EQUAL
28953: IFTRUE 28957
28955: GO 28975
28957: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28958: LD_ADDR_VAR 0 3
28962: PUSH
28963: LD_INT 4
28965: PUSH
28966: LD_INT 5
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: ST_TO_ADDR
28973: GO 29646
28975: LD_INT 10
28977: DOUBLE
28978: EQUAL
28979: IFTRUE 28983
28981: GO 29001
28983: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28984: LD_ADDR_VAR 0 3
28988: PUSH
28989: LD_INT 4
28991: PUSH
28992: LD_INT 5
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: ST_TO_ADDR
28999: GO 29646
29001: LD_INT 22
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 29035
29009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29010: LD_ADDR_VAR 0 3
29014: PUSH
29015: LD_INT 11
29017: PUSH
29018: LD_INT 12
29020: PUSH
29021: LD_INT 13
29023: PUSH
29024: LD_INT 14
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
29033: GO 29646
29035: LD_INT 23
29037: DOUBLE
29038: EQUAL
29039: IFTRUE 29043
29041: GO 29069
29043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29044: LD_ADDR_VAR 0 3
29048: PUSH
29049: LD_INT 11
29051: PUSH
29052: LD_INT 12
29054: PUSH
29055: LD_INT 13
29057: PUSH
29058: LD_INT 14
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: ST_TO_ADDR
29067: GO 29646
29069: LD_INT 24
29071: DOUBLE
29072: EQUAL
29073: IFTRUE 29077
29075: GO 29103
29077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29078: LD_ADDR_VAR 0 3
29082: PUSH
29083: LD_INT 11
29085: PUSH
29086: LD_INT 12
29088: PUSH
29089: LD_INT 13
29091: PUSH
29092: LD_INT 14
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: ST_TO_ADDR
29101: GO 29646
29103: LD_INT 30
29105: DOUBLE
29106: EQUAL
29107: IFTRUE 29111
29109: GO 29137
29111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29112: LD_ADDR_VAR 0 3
29116: PUSH
29117: LD_INT 11
29119: PUSH
29120: LD_INT 12
29122: PUSH
29123: LD_INT 13
29125: PUSH
29126: LD_INT 14
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: ST_TO_ADDR
29135: GO 29646
29137: LD_INT 25
29139: DOUBLE
29140: EQUAL
29141: IFTRUE 29145
29143: GO 29163
29145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29146: LD_ADDR_VAR 0 3
29150: PUSH
29151: LD_INT 13
29153: PUSH
29154: LD_INT 14
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: ST_TO_ADDR
29161: GO 29646
29163: LD_INT 27
29165: DOUBLE
29166: EQUAL
29167: IFTRUE 29171
29169: GO 29189
29171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29172: LD_ADDR_VAR 0 3
29176: PUSH
29177: LD_INT 13
29179: PUSH
29180: LD_INT 14
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: ST_TO_ADDR
29187: GO 29646
29189: LD_EXP 64
29193: DOUBLE
29194: EQUAL
29195: IFTRUE 29199
29197: GO 29225
29199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29200: LD_ADDR_VAR 0 3
29204: PUSH
29205: LD_INT 11
29207: PUSH
29208: LD_INT 12
29210: PUSH
29211: LD_INT 13
29213: PUSH
29214: LD_INT 14
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: ST_TO_ADDR
29223: GO 29646
29225: LD_INT 28
29227: DOUBLE
29228: EQUAL
29229: IFTRUE 29233
29231: GO 29251
29233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29234: LD_ADDR_VAR 0 3
29238: PUSH
29239: LD_INT 13
29241: PUSH
29242: LD_INT 14
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: ST_TO_ADDR
29249: GO 29646
29251: LD_INT 29
29253: DOUBLE
29254: EQUAL
29255: IFTRUE 29259
29257: GO 29277
29259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29260: LD_ADDR_VAR 0 3
29264: PUSH
29265: LD_INT 13
29267: PUSH
29268: LD_INT 14
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: ST_TO_ADDR
29275: GO 29646
29277: LD_INT 31
29279: DOUBLE
29280: EQUAL
29281: IFTRUE 29285
29283: GO 29303
29285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29286: LD_ADDR_VAR 0 3
29290: PUSH
29291: LD_INT 13
29293: PUSH
29294: LD_INT 14
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: ST_TO_ADDR
29301: GO 29646
29303: LD_INT 26
29305: DOUBLE
29306: EQUAL
29307: IFTRUE 29311
29309: GO 29329
29311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29312: LD_ADDR_VAR 0 3
29316: PUSH
29317: LD_INT 13
29319: PUSH
29320: LD_INT 14
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: ST_TO_ADDR
29327: GO 29646
29329: LD_INT 42
29331: DOUBLE
29332: EQUAL
29333: IFTRUE 29337
29335: GO 29363
29337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29338: LD_ADDR_VAR 0 3
29342: PUSH
29343: LD_INT 21
29345: PUSH
29346: LD_INT 22
29348: PUSH
29349: LD_INT 23
29351: PUSH
29352: LD_INT 24
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
29361: GO 29646
29363: LD_INT 43
29365: DOUBLE
29366: EQUAL
29367: IFTRUE 29371
29369: GO 29397
29371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29372: LD_ADDR_VAR 0 3
29376: PUSH
29377: LD_INT 21
29379: PUSH
29380: LD_INT 22
29382: PUSH
29383: LD_INT 23
29385: PUSH
29386: LD_INT 24
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
29395: GO 29646
29397: LD_INT 44
29399: DOUBLE
29400: EQUAL
29401: IFTRUE 29405
29403: GO 29431
29405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29406: LD_ADDR_VAR 0 3
29410: PUSH
29411: LD_INT 21
29413: PUSH
29414: LD_INT 22
29416: PUSH
29417: LD_INT 23
29419: PUSH
29420: LD_INT 24
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: ST_TO_ADDR
29429: GO 29646
29431: LD_INT 45
29433: DOUBLE
29434: EQUAL
29435: IFTRUE 29439
29437: GO 29465
29439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_INT 21
29447: PUSH
29448: LD_INT 22
29450: PUSH
29451: LD_INT 23
29453: PUSH
29454: LD_INT 24
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: ST_TO_ADDR
29463: GO 29646
29465: LD_INT 49
29467: DOUBLE
29468: EQUAL
29469: IFTRUE 29473
29471: GO 29499
29473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 21
29481: PUSH
29482: LD_INT 22
29484: PUSH
29485: LD_INT 23
29487: PUSH
29488: LD_INT 24
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: ST_TO_ADDR
29497: GO 29646
29499: LD_INT 51
29501: DOUBLE
29502: EQUAL
29503: IFTRUE 29507
29505: GO 29533
29507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_INT 21
29515: PUSH
29516: LD_INT 22
29518: PUSH
29519: LD_INT 23
29521: PUSH
29522: LD_INT 24
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: ST_TO_ADDR
29531: GO 29646
29533: LD_INT 52
29535: DOUBLE
29536: EQUAL
29537: IFTRUE 29541
29539: GO 29567
29541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29542: LD_ADDR_VAR 0 3
29546: PUSH
29547: LD_INT 21
29549: PUSH
29550: LD_INT 22
29552: PUSH
29553: LD_INT 23
29555: PUSH
29556: LD_INT 24
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: ST_TO_ADDR
29565: GO 29646
29567: LD_INT 53
29569: DOUBLE
29570: EQUAL
29571: IFTRUE 29575
29573: GO 29593
29575: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29576: LD_ADDR_VAR 0 3
29580: PUSH
29581: LD_INT 23
29583: PUSH
29584: LD_INT 24
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: ST_TO_ADDR
29591: GO 29646
29593: LD_INT 46
29595: DOUBLE
29596: EQUAL
29597: IFTRUE 29601
29599: GO 29619
29601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29602: LD_ADDR_VAR 0 3
29606: PUSH
29607: LD_INT 23
29609: PUSH
29610: LD_INT 24
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: ST_TO_ADDR
29617: GO 29646
29619: LD_INT 47
29621: DOUBLE
29622: EQUAL
29623: IFTRUE 29627
29625: GO 29645
29627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29628: LD_ADDR_VAR 0 3
29632: PUSH
29633: LD_INT 23
29635: PUSH
29636: LD_INT 24
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: ST_TO_ADDR
29643: GO 29646
29645: POP
// result := ( chassis in result ) ;
29646: LD_ADDR_VAR 0 3
29650: PUSH
29651: LD_VAR 0 1
29655: PUSH
29656: LD_VAR 0 3
29660: IN
29661: ST_TO_ADDR
// end ;
29662: LD_VAR 0 3
29666: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29667: LD_INT 0
29669: PPUSH
29670: PPUSH
29671: PPUSH
29672: PPUSH
29673: PPUSH
29674: PPUSH
29675: PPUSH
// result := array ;
29676: LD_ADDR_VAR 0 5
29680: PUSH
29681: LD_VAR 0 1
29685: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29686: LD_VAR 0 1
29690: NOT
29691: PUSH
29692: LD_VAR 0 2
29696: NOT
29697: OR
29698: PUSH
29699: LD_VAR 0 3
29703: NOT
29704: OR
29705: PUSH
29706: LD_VAR 0 2
29710: PUSH
29711: LD_VAR 0 1
29715: GREATER
29716: OR
29717: PUSH
29718: LD_VAR 0 3
29722: PUSH
29723: LD_VAR 0 1
29727: GREATER
29728: OR
29729: IFFALSE 29733
// exit ;
29731: GO 30029
// if direction then
29733: LD_VAR 0 4
29737: IFFALSE 29801
// begin d := 1 ;
29739: LD_ADDR_VAR 0 9
29743: PUSH
29744: LD_INT 1
29746: ST_TO_ADDR
// if i_from > i_to then
29747: LD_VAR 0 2
29751: PUSH
29752: LD_VAR 0 3
29756: GREATER
29757: IFFALSE 29783
// length := ( array - i_from ) + i_to else
29759: LD_ADDR_VAR 0 11
29763: PUSH
29764: LD_VAR 0 1
29768: PUSH
29769: LD_VAR 0 2
29773: MINUS
29774: PUSH
29775: LD_VAR 0 3
29779: PLUS
29780: ST_TO_ADDR
29781: GO 29799
// length := i_to - i_from ;
29783: LD_ADDR_VAR 0 11
29787: PUSH
29788: LD_VAR 0 3
29792: PUSH
29793: LD_VAR 0 2
29797: MINUS
29798: ST_TO_ADDR
// end else
29799: GO 29862
// begin d := - 1 ;
29801: LD_ADDR_VAR 0 9
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: ST_TO_ADDR
// if i_from > i_to then
29810: LD_VAR 0 2
29814: PUSH
29815: LD_VAR 0 3
29819: GREATER
29820: IFFALSE 29840
// length := i_from - i_to else
29822: LD_ADDR_VAR 0 11
29826: PUSH
29827: LD_VAR 0 2
29831: PUSH
29832: LD_VAR 0 3
29836: MINUS
29837: ST_TO_ADDR
29838: GO 29862
// length := ( array - i_to ) + i_from ;
29840: LD_ADDR_VAR 0 11
29844: PUSH
29845: LD_VAR 0 1
29849: PUSH
29850: LD_VAR 0 3
29854: MINUS
29855: PUSH
29856: LD_VAR 0 2
29860: PLUS
29861: ST_TO_ADDR
// end ; if not length then
29862: LD_VAR 0 11
29866: NOT
29867: IFFALSE 29871
// exit ;
29869: GO 30029
// tmp := array ;
29871: LD_ADDR_VAR 0 10
29875: PUSH
29876: LD_VAR 0 1
29880: ST_TO_ADDR
// for i = 1 to length do
29881: LD_ADDR_VAR 0 6
29885: PUSH
29886: DOUBLE
29887: LD_INT 1
29889: DEC
29890: ST_TO_ADDR
29891: LD_VAR 0 11
29895: PUSH
29896: FOR_TO
29897: IFFALSE 30017
// begin for j = 1 to array do
29899: LD_ADDR_VAR 0 7
29903: PUSH
29904: DOUBLE
29905: LD_INT 1
29907: DEC
29908: ST_TO_ADDR
29909: LD_VAR 0 1
29913: PUSH
29914: FOR_TO
29915: IFFALSE 30003
// begin k := j + d ;
29917: LD_ADDR_VAR 0 8
29921: PUSH
29922: LD_VAR 0 7
29926: PUSH
29927: LD_VAR 0 9
29931: PLUS
29932: ST_TO_ADDR
// if k > array then
29933: LD_VAR 0 8
29937: PUSH
29938: LD_VAR 0 1
29942: GREATER
29943: IFFALSE 29953
// k := 1 ;
29945: LD_ADDR_VAR 0 8
29949: PUSH
29950: LD_INT 1
29952: ST_TO_ADDR
// if not k then
29953: LD_VAR 0 8
29957: NOT
29958: IFFALSE 29970
// k := array ;
29960: LD_ADDR_VAR 0 8
29964: PUSH
29965: LD_VAR 0 1
29969: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29970: LD_ADDR_VAR 0 10
29974: PUSH
29975: LD_VAR 0 10
29979: PPUSH
29980: LD_VAR 0 8
29984: PPUSH
29985: LD_VAR 0 1
29989: PUSH
29990: LD_VAR 0 7
29994: ARRAY
29995: PPUSH
29996: CALL_OW 1
30000: ST_TO_ADDR
// end ;
30001: GO 29914
30003: POP
30004: POP
// array := tmp ;
30005: LD_ADDR_VAR 0 1
30009: PUSH
30010: LD_VAR 0 10
30014: ST_TO_ADDR
// end ;
30015: GO 29896
30017: POP
30018: POP
// result := array ;
30019: LD_ADDR_VAR 0 5
30023: PUSH
30024: LD_VAR 0 1
30028: ST_TO_ADDR
// end ;
30029: LD_VAR 0 5
30033: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30034: LD_INT 0
30036: PPUSH
30037: PPUSH
// result := 0 ;
30038: LD_ADDR_VAR 0 3
30042: PUSH
30043: LD_INT 0
30045: ST_TO_ADDR
// if not array or not value in array then
30046: LD_VAR 0 1
30050: NOT
30051: PUSH
30052: LD_VAR 0 2
30056: PUSH
30057: LD_VAR 0 1
30061: IN
30062: NOT
30063: OR
30064: IFFALSE 30068
// exit ;
30066: GO 30122
// for i = 1 to array do
30068: LD_ADDR_VAR 0 4
30072: PUSH
30073: DOUBLE
30074: LD_INT 1
30076: DEC
30077: ST_TO_ADDR
30078: LD_VAR 0 1
30082: PUSH
30083: FOR_TO
30084: IFFALSE 30120
// if value = array [ i ] then
30086: LD_VAR 0 2
30090: PUSH
30091: LD_VAR 0 1
30095: PUSH
30096: LD_VAR 0 4
30100: ARRAY
30101: EQUAL
30102: IFFALSE 30118
// begin result := i ;
30104: LD_ADDR_VAR 0 3
30108: PUSH
30109: LD_VAR 0 4
30113: ST_TO_ADDR
// exit ;
30114: POP
30115: POP
30116: GO 30122
// end ;
30118: GO 30083
30120: POP
30121: POP
// end ;
30122: LD_VAR 0 3
30126: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30127: LD_INT 0
30129: PPUSH
// vc_chassis := chassis ;
30130: LD_ADDR_OWVAR 37
30134: PUSH
30135: LD_VAR 0 1
30139: ST_TO_ADDR
// vc_engine := engine ;
30140: LD_ADDR_OWVAR 39
30144: PUSH
30145: LD_VAR 0 2
30149: ST_TO_ADDR
// vc_control := control ;
30150: LD_ADDR_OWVAR 38
30154: PUSH
30155: LD_VAR 0 3
30159: ST_TO_ADDR
// vc_weapon := weapon ;
30160: LD_ADDR_OWVAR 40
30164: PUSH
30165: LD_VAR 0 4
30169: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30170: LD_ADDR_OWVAR 41
30174: PUSH
30175: LD_VAR 0 5
30179: ST_TO_ADDR
// end ;
30180: LD_VAR 0 6
30184: RET
// export function WantPlant ( unit ) ; var task ; begin
30185: LD_INT 0
30187: PPUSH
30188: PPUSH
// result := false ;
30189: LD_ADDR_VAR 0 2
30193: PUSH
30194: LD_INT 0
30196: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30197: LD_ADDR_VAR 0 3
30201: PUSH
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 437
30211: ST_TO_ADDR
// if task then
30212: LD_VAR 0 3
30216: IFFALSE 30244
// if task [ 1 ] [ 1 ] = p then
30218: LD_VAR 0 3
30222: PUSH
30223: LD_INT 1
30225: ARRAY
30226: PUSH
30227: LD_INT 1
30229: ARRAY
30230: PUSH
30231: LD_STRING p
30233: EQUAL
30234: IFFALSE 30244
// result := true ;
30236: LD_ADDR_VAR 0 2
30240: PUSH
30241: LD_INT 1
30243: ST_TO_ADDR
// end ;
30244: LD_VAR 0 2
30248: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30249: LD_INT 0
30251: PPUSH
30252: PPUSH
30253: PPUSH
30254: PPUSH
// if pos < 1 then
30255: LD_VAR 0 2
30259: PUSH
30260: LD_INT 1
30262: LESS
30263: IFFALSE 30267
// exit ;
30265: GO 30570
// if pos = 1 then
30267: LD_VAR 0 2
30271: PUSH
30272: LD_INT 1
30274: EQUAL
30275: IFFALSE 30308
// result := Replace ( arr , pos [ 1 ] , value ) else
30277: LD_ADDR_VAR 0 4
30281: PUSH
30282: LD_VAR 0 1
30286: PPUSH
30287: LD_VAR 0 2
30291: PUSH
30292: LD_INT 1
30294: ARRAY
30295: PPUSH
30296: LD_VAR 0 3
30300: PPUSH
30301: CALL_OW 1
30305: ST_TO_ADDR
30306: GO 30570
// begin tmp := arr ;
30308: LD_ADDR_VAR 0 6
30312: PUSH
30313: LD_VAR 0 1
30317: ST_TO_ADDR
// s_arr := [ tmp ] ;
30318: LD_ADDR_VAR 0 7
30322: PUSH
30323: LD_VAR 0 6
30327: PUSH
30328: EMPTY
30329: LIST
30330: ST_TO_ADDR
// for i = 1 to pos - 1 do
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: DOUBLE
30337: LD_INT 1
30339: DEC
30340: ST_TO_ADDR
30341: LD_VAR 0 2
30345: PUSH
30346: LD_INT 1
30348: MINUS
30349: PUSH
30350: FOR_TO
30351: IFFALSE 30396
// begin tmp := tmp [ pos [ i ] ] ;
30353: LD_ADDR_VAR 0 6
30357: PUSH
30358: LD_VAR 0 6
30362: PUSH
30363: LD_VAR 0 2
30367: PUSH
30368: LD_VAR 0 5
30372: ARRAY
30373: ARRAY
30374: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30375: LD_ADDR_VAR 0 7
30379: PUSH
30380: LD_VAR 0 7
30384: PUSH
30385: LD_VAR 0 6
30389: PUSH
30390: EMPTY
30391: LIST
30392: ADD
30393: ST_TO_ADDR
// end ;
30394: GO 30350
30396: POP
30397: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30398: LD_ADDR_VAR 0 6
30402: PUSH
30403: LD_VAR 0 6
30407: PPUSH
30408: LD_VAR 0 2
30412: PUSH
30413: LD_VAR 0 2
30417: ARRAY
30418: PPUSH
30419: LD_VAR 0 3
30423: PPUSH
30424: CALL_OW 1
30428: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30429: LD_ADDR_VAR 0 7
30433: PUSH
30434: LD_VAR 0 7
30438: PPUSH
30439: LD_VAR 0 7
30443: PPUSH
30444: LD_VAR 0 6
30448: PPUSH
30449: CALL_OW 1
30453: ST_TO_ADDR
// for i = s_arr downto 2 do
30454: LD_ADDR_VAR 0 5
30458: PUSH
30459: DOUBLE
30460: LD_VAR 0 7
30464: INC
30465: ST_TO_ADDR
30466: LD_INT 2
30468: PUSH
30469: FOR_DOWNTO
30470: IFFALSE 30554
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30472: LD_ADDR_VAR 0 6
30476: PUSH
30477: LD_VAR 0 7
30481: PUSH
30482: LD_VAR 0 5
30486: PUSH
30487: LD_INT 1
30489: MINUS
30490: ARRAY
30491: PPUSH
30492: LD_VAR 0 2
30496: PUSH
30497: LD_VAR 0 5
30501: PUSH
30502: LD_INT 1
30504: MINUS
30505: ARRAY
30506: PPUSH
30507: LD_VAR 0 7
30511: PUSH
30512: LD_VAR 0 5
30516: ARRAY
30517: PPUSH
30518: CALL_OW 1
30522: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30523: LD_ADDR_VAR 0 7
30527: PUSH
30528: LD_VAR 0 7
30532: PPUSH
30533: LD_VAR 0 5
30537: PUSH
30538: LD_INT 1
30540: MINUS
30541: PPUSH
30542: LD_VAR 0 6
30546: PPUSH
30547: CALL_OW 1
30551: ST_TO_ADDR
// end ;
30552: GO 30469
30554: POP
30555: POP
// result := s_arr [ 1 ] ;
30556: LD_ADDR_VAR 0 4
30560: PUSH
30561: LD_VAR 0 7
30565: PUSH
30566: LD_INT 1
30568: ARRAY
30569: ST_TO_ADDR
// end ; end ;
30570: LD_VAR 0 4
30574: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30575: LD_INT 0
30577: PPUSH
30578: PPUSH
// if not list then
30579: LD_VAR 0 1
30583: NOT
30584: IFFALSE 30588
// exit ;
30586: GO 30679
// i := list [ pos1 ] ;
30588: LD_ADDR_VAR 0 5
30592: PUSH
30593: LD_VAR 0 1
30597: PUSH
30598: LD_VAR 0 2
30602: ARRAY
30603: ST_TO_ADDR
// if not i then
30604: LD_VAR 0 5
30608: NOT
30609: IFFALSE 30613
// exit ;
30611: GO 30679
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30613: LD_ADDR_VAR 0 1
30617: PUSH
30618: LD_VAR 0 1
30622: PPUSH
30623: LD_VAR 0 2
30627: PPUSH
30628: LD_VAR 0 1
30632: PUSH
30633: LD_VAR 0 3
30637: ARRAY
30638: PPUSH
30639: CALL_OW 1
30643: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30644: LD_ADDR_VAR 0 1
30648: PUSH
30649: LD_VAR 0 1
30653: PPUSH
30654: LD_VAR 0 3
30658: PPUSH
30659: LD_VAR 0 5
30663: PPUSH
30664: CALL_OW 1
30668: ST_TO_ADDR
// result := list ;
30669: LD_ADDR_VAR 0 4
30673: PUSH
30674: LD_VAR 0 1
30678: ST_TO_ADDR
// end ;
30679: LD_VAR 0 4
30683: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30684: LD_INT 0
30686: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30687: LD_ADDR_VAR 0 5
30691: PUSH
30692: LD_VAR 0 1
30696: PPUSH
30697: CALL_OW 250
30701: PPUSH
30702: LD_VAR 0 1
30706: PPUSH
30707: CALL_OW 251
30711: PPUSH
30712: LD_VAR 0 2
30716: PPUSH
30717: LD_VAR 0 3
30721: PPUSH
30722: LD_VAR 0 4
30726: PPUSH
30727: CALL 30737 0 5
30731: ST_TO_ADDR
// end ;
30732: LD_VAR 0 5
30736: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30737: LD_INT 0
30739: PPUSH
30740: PPUSH
30741: PPUSH
30742: PPUSH
// if not list then
30743: LD_VAR 0 3
30747: NOT
30748: IFFALSE 30752
// exit ;
30750: GO 31140
// result := [ ] ;
30752: LD_ADDR_VAR 0 6
30756: PUSH
30757: EMPTY
30758: ST_TO_ADDR
// for i in list do
30759: LD_ADDR_VAR 0 7
30763: PUSH
30764: LD_VAR 0 3
30768: PUSH
30769: FOR_IN
30770: IFFALSE 30972
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30772: LD_ADDR_VAR 0 9
30776: PUSH
30777: LD_VAR 0 7
30781: PPUSH
30782: LD_VAR 0 1
30786: PPUSH
30787: LD_VAR 0 2
30791: PPUSH
30792: CALL_OW 297
30796: ST_TO_ADDR
// if not result then
30797: LD_VAR 0 6
30801: NOT
30802: IFFALSE 30828
// result := [ [ i , tmp ] ] else
30804: LD_ADDR_VAR 0 6
30808: PUSH
30809: LD_VAR 0 7
30813: PUSH
30814: LD_VAR 0 9
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: EMPTY
30824: LIST
30825: ST_TO_ADDR
30826: GO 30970
// begin if result [ result ] [ 2 ] < tmp then
30828: LD_VAR 0 6
30832: PUSH
30833: LD_VAR 0 6
30837: ARRAY
30838: PUSH
30839: LD_INT 2
30841: ARRAY
30842: PUSH
30843: LD_VAR 0 9
30847: LESS
30848: IFFALSE 30890
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30850: LD_ADDR_VAR 0 6
30854: PUSH
30855: LD_VAR 0 6
30859: PPUSH
30860: LD_VAR 0 6
30864: PUSH
30865: LD_INT 1
30867: PLUS
30868: PPUSH
30869: LD_VAR 0 7
30873: PUSH
30874: LD_VAR 0 9
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PPUSH
30883: CALL_OW 2
30887: ST_TO_ADDR
30888: GO 30970
// for j = 1 to result do
30890: LD_ADDR_VAR 0 8
30894: PUSH
30895: DOUBLE
30896: LD_INT 1
30898: DEC
30899: ST_TO_ADDR
30900: LD_VAR 0 6
30904: PUSH
30905: FOR_TO
30906: IFFALSE 30968
// begin if tmp < result [ j ] [ 2 ] then
30908: LD_VAR 0 9
30912: PUSH
30913: LD_VAR 0 6
30917: PUSH
30918: LD_VAR 0 8
30922: ARRAY
30923: PUSH
30924: LD_INT 2
30926: ARRAY
30927: LESS
30928: IFFALSE 30966
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30930: LD_ADDR_VAR 0 6
30934: PUSH
30935: LD_VAR 0 6
30939: PPUSH
30940: LD_VAR 0 8
30944: PPUSH
30945: LD_VAR 0 7
30949: PUSH
30950: LD_VAR 0 9
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PPUSH
30959: CALL_OW 2
30963: ST_TO_ADDR
// break ;
30964: GO 30968
// end ; end ;
30966: GO 30905
30968: POP
30969: POP
// end ; end ;
30970: GO 30769
30972: POP
30973: POP
// if result and not asc then
30974: LD_VAR 0 6
30978: PUSH
30979: LD_VAR 0 4
30983: NOT
30984: AND
30985: IFFALSE 31060
// begin tmp := result ;
30987: LD_ADDR_VAR 0 9
30991: PUSH
30992: LD_VAR 0 6
30996: ST_TO_ADDR
// for i = tmp downto 1 do
30997: LD_ADDR_VAR 0 7
31001: PUSH
31002: DOUBLE
31003: LD_VAR 0 9
31007: INC
31008: ST_TO_ADDR
31009: LD_INT 1
31011: PUSH
31012: FOR_DOWNTO
31013: IFFALSE 31058
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31015: LD_ADDR_VAR 0 6
31019: PUSH
31020: LD_VAR 0 6
31024: PPUSH
31025: LD_VAR 0 9
31029: PUSH
31030: LD_VAR 0 7
31034: MINUS
31035: PUSH
31036: LD_INT 1
31038: PLUS
31039: PPUSH
31040: LD_VAR 0 9
31044: PUSH
31045: LD_VAR 0 7
31049: ARRAY
31050: PPUSH
31051: CALL_OW 1
31055: ST_TO_ADDR
31056: GO 31012
31058: POP
31059: POP
// end ; tmp := [ ] ;
31060: LD_ADDR_VAR 0 9
31064: PUSH
31065: EMPTY
31066: ST_TO_ADDR
// if mode then
31067: LD_VAR 0 5
31071: IFFALSE 31140
// begin for i = 1 to result do
31073: LD_ADDR_VAR 0 7
31077: PUSH
31078: DOUBLE
31079: LD_INT 1
31081: DEC
31082: ST_TO_ADDR
31083: LD_VAR 0 6
31087: PUSH
31088: FOR_TO
31089: IFFALSE 31128
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31091: LD_ADDR_VAR 0 9
31095: PUSH
31096: LD_VAR 0 9
31100: PPUSH
31101: LD_VAR 0 7
31105: PPUSH
31106: LD_VAR 0 6
31110: PUSH
31111: LD_VAR 0 7
31115: ARRAY
31116: PUSH
31117: LD_INT 1
31119: ARRAY
31120: PPUSH
31121: CALL_OW 1
31125: ST_TO_ADDR
31126: GO 31088
31128: POP
31129: POP
// result := tmp ;
31130: LD_ADDR_VAR 0 6
31134: PUSH
31135: LD_VAR 0 9
31139: ST_TO_ADDR
// end ; end ;
31140: LD_VAR 0 6
31144: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31145: LD_INT 0
31147: PPUSH
31148: PPUSH
31149: PPUSH
31150: PPUSH
31151: PPUSH
31152: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31153: LD_ADDR_VAR 0 5
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: EMPTY
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: ST_TO_ADDR
// if not x or not y then
31175: LD_VAR 0 2
31179: NOT
31180: PUSH
31181: LD_VAR 0 3
31185: NOT
31186: OR
31187: IFFALSE 31191
// exit ;
31189: GO 32843
// if not range then
31191: LD_VAR 0 4
31195: NOT
31196: IFFALSE 31206
// range := 10 ;
31198: LD_ADDR_VAR 0 4
31202: PUSH
31203: LD_INT 10
31205: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31206: LD_ADDR_VAR 0 8
31210: PUSH
31211: LD_INT 81
31213: PUSH
31214: LD_VAR 0 1
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 92
31225: PUSH
31226: LD_VAR 0 2
31230: PUSH
31231: LD_VAR 0 3
31235: PUSH
31236: LD_VAR 0 4
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: LD_INT 21
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: PPUSH
31269: CALL_OW 69
31273: ST_TO_ADDR
// if not tmp then
31274: LD_VAR 0 8
31278: NOT
31279: IFFALSE 31283
// exit ;
31281: GO 32843
// for i in tmp do
31283: LD_ADDR_VAR 0 6
31287: PUSH
31288: LD_VAR 0 8
31292: PUSH
31293: FOR_IN
31294: IFFALSE 32818
// begin points := [ 0 , 0 , 0 ] ;
31296: LD_ADDR_VAR 0 9
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: ST_TO_ADDR
// bpoints := 1 ;
31315: LD_ADDR_VAR 0 10
31319: PUSH
31320: LD_INT 1
31322: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31323: LD_VAR 0 6
31327: PPUSH
31328: CALL_OW 247
31332: PUSH
31333: LD_INT 1
31335: DOUBLE
31336: EQUAL
31337: IFTRUE 31341
31339: GO 31919
31341: POP
// begin if GetClass ( i ) = 1 then
31342: LD_VAR 0 6
31346: PPUSH
31347: CALL_OW 257
31351: PUSH
31352: LD_INT 1
31354: EQUAL
31355: IFFALSE 31376
// points := [ 10 , 5 , 3 ] ;
31357: LD_ADDR_VAR 0 9
31361: PUSH
31362: LD_INT 10
31364: PUSH
31365: LD_INT 5
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31376: LD_VAR 0 6
31380: PPUSH
31381: CALL_OW 257
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: LD_INT 4
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: IN
31400: IFFALSE 31421
// points := [ 3 , 2 , 1 ] ;
31402: LD_ADDR_VAR 0 9
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31421: LD_VAR 0 6
31425: PPUSH
31426: CALL_OW 257
31430: PUSH
31431: LD_INT 5
31433: EQUAL
31434: IFFALSE 31455
// points := [ 130 , 5 , 2 ] ;
31436: LD_ADDR_VAR 0 9
31440: PUSH
31441: LD_INT 130
31443: PUSH
31444: LD_INT 5
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: LIST
31454: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31455: LD_VAR 0 6
31459: PPUSH
31460: CALL_OW 257
31464: PUSH
31465: LD_INT 8
31467: EQUAL
31468: IFFALSE 31489
// points := [ 35 , 35 , 30 ] ;
31470: LD_ADDR_VAR 0 9
31474: PUSH
31475: LD_INT 35
31477: PUSH
31478: LD_INT 35
31480: PUSH
31481: LD_INT 30
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31489: LD_VAR 0 6
31493: PPUSH
31494: CALL_OW 257
31498: PUSH
31499: LD_INT 9
31501: EQUAL
31502: IFFALSE 31523
// points := [ 20 , 55 , 40 ] ;
31504: LD_ADDR_VAR 0 9
31508: PUSH
31509: LD_INT 20
31511: PUSH
31512: LD_INT 55
31514: PUSH
31515: LD_INT 40
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: LIST
31522: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31523: LD_VAR 0 6
31527: PPUSH
31528: CALL_OW 257
31532: PUSH
31533: LD_INT 12
31535: PUSH
31536: LD_INT 16
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: IN
31543: IFFALSE 31564
// points := [ 5 , 3 , 2 ] ;
31545: LD_ADDR_VAR 0 9
31549: PUSH
31550: LD_INT 5
31552: PUSH
31553: LD_INT 3
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: LIST
31563: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31564: LD_VAR 0 6
31568: PPUSH
31569: CALL_OW 257
31573: PUSH
31574: LD_INT 17
31576: EQUAL
31577: IFFALSE 31598
// points := [ 100 , 50 , 75 ] ;
31579: LD_ADDR_VAR 0 9
31583: PUSH
31584: LD_INT 100
31586: PUSH
31587: LD_INT 50
31589: PUSH
31590: LD_INT 75
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31598: LD_VAR 0 6
31602: PPUSH
31603: CALL_OW 257
31607: PUSH
31608: LD_INT 15
31610: EQUAL
31611: IFFALSE 31632
// points := [ 10 , 5 , 3 ] ;
31613: LD_ADDR_VAR 0 9
31617: PUSH
31618: LD_INT 10
31620: PUSH
31621: LD_INT 5
31623: PUSH
31624: LD_INT 3
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31632: LD_VAR 0 6
31636: PPUSH
31637: CALL_OW 257
31641: PUSH
31642: LD_INT 14
31644: EQUAL
31645: IFFALSE 31666
// points := [ 10 , 0 , 0 ] ;
31647: LD_ADDR_VAR 0 9
31651: PUSH
31652: LD_INT 10
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31666: LD_VAR 0 6
31670: PPUSH
31671: CALL_OW 257
31675: PUSH
31676: LD_INT 11
31678: EQUAL
31679: IFFALSE 31700
// points := [ 30 , 10 , 5 ] ;
31681: LD_ADDR_VAR 0 9
31685: PUSH
31686: LD_INT 30
31688: PUSH
31689: LD_INT 10
31691: PUSH
31692: LD_INT 5
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31700: LD_VAR 0 1
31704: PPUSH
31705: LD_INT 5
31707: PPUSH
31708: CALL_OW 321
31712: PUSH
31713: LD_INT 2
31715: EQUAL
31716: IFFALSE 31733
// bpoints := bpoints * 1.8 ;
31718: LD_ADDR_VAR 0 10
31722: PUSH
31723: LD_VAR 0 10
31727: PUSH
31728: LD_REAL  1.80000000000000E+0000
31731: MUL
31732: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31733: LD_VAR 0 6
31737: PPUSH
31738: CALL_OW 257
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: LD_INT 3
31751: PUSH
31752: LD_INT 4
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: IN
31761: PUSH
31762: LD_VAR 0 1
31766: PPUSH
31767: LD_INT 51
31769: PPUSH
31770: CALL_OW 321
31774: PUSH
31775: LD_INT 2
31777: EQUAL
31778: AND
31779: IFFALSE 31796
// bpoints := bpoints * 1.2 ;
31781: LD_ADDR_VAR 0 10
31785: PUSH
31786: LD_VAR 0 10
31790: PUSH
31791: LD_REAL  1.20000000000000E+0000
31794: MUL
31795: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31796: LD_VAR 0 6
31800: PPUSH
31801: CALL_OW 257
31805: PUSH
31806: LD_INT 5
31808: PUSH
31809: LD_INT 7
31811: PUSH
31812: LD_INT 9
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: IN
31820: PUSH
31821: LD_VAR 0 1
31825: PPUSH
31826: LD_INT 52
31828: PPUSH
31829: CALL_OW 321
31833: PUSH
31834: LD_INT 2
31836: EQUAL
31837: AND
31838: IFFALSE 31855
// bpoints := bpoints * 1.5 ;
31840: LD_ADDR_VAR 0 10
31844: PUSH
31845: LD_VAR 0 10
31849: PUSH
31850: LD_REAL  1.50000000000000E+0000
31853: MUL
31854: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31855: LD_VAR 0 1
31859: PPUSH
31860: LD_INT 66
31862: PPUSH
31863: CALL_OW 321
31867: PUSH
31868: LD_INT 2
31870: EQUAL
31871: IFFALSE 31888
// bpoints := bpoints * 1.1 ;
31873: LD_ADDR_VAR 0 10
31877: PUSH
31878: LD_VAR 0 10
31882: PUSH
31883: LD_REAL  1.10000000000000E+0000
31886: MUL
31887: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31888: LD_ADDR_VAR 0 10
31892: PUSH
31893: LD_VAR 0 10
31897: PUSH
31898: LD_VAR 0 6
31902: PPUSH
31903: LD_INT 1
31905: PPUSH
31906: CALL_OW 259
31910: PUSH
31911: LD_REAL  1.15000000000000E+0000
31914: MUL
31915: MUL
31916: ST_TO_ADDR
// end ; unit_vehicle :
31917: GO 32747
31919: LD_INT 2
31921: DOUBLE
31922: EQUAL
31923: IFTRUE 31927
31925: GO 32735
31927: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31928: LD_VAR 0 6
31932: PPUSH
31933: CALL_OW 264
31937: PUSH
31938: LD_INT 2
31940: PUSH
31941: LD_INT 42
31943: PUSH
31944: LD_INT 24
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: IN
31952: IFFALSE 31973
// points := [ 25 , 5 , 3 ] ;
31954: LD_ADDR_VAR 0 9
31958: PUSH
31959: LD_INT 25
31961: PUSH
31962: LD_INT 5
31964: PUSH
31965: LD_INT 3
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31973: LD_VAR 0 6
31977: PPUSH
31978: CALL_OW 264
31982: PUSH
31983: LD_INT 4
31985: PUSH
31986: LD_INT 43
31988: PUSH
31989: LD_INT 25
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: IN
31997: IFFALSE 32018
// points := [ 40 , 15 , 5 ] ;
31999: LD_ADDR_VAR 0 9
32003: PUSH
32004: LD_INT 40
32006: PUSH
32007: LD_INT 15
32009: PUSH
32010: LD_INT 5
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32018: LD_VAR 0 6
32022: PPUSH
32023: CALL_OW 264
32027: PUSH
32028: LD_INT 3
32030: PUSH
32031: LD_INT 23
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: IN
32038: IFFALSE 32059
// points := [ 7 , 25 , 8 ] ;
32040: LD_ADDR_VAR 0 9
32044: PUSH
32045: LD_INT 7
32047: PUSH
32048: LD_INT 25
32050: PUSH
32051: LD_INT 8
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: LIST
32058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32059: LD_VAR 0 6
32063: PPUSH
32064: CALL_OW 264
32068: PUSH
32069: LD_INT 5
32071: PUSH
32072: LD_INT 27
32074: PUSH
32075: LD_INT 44
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: IN
32083: IFFALSE 32104
// points := [ 14 , 50 , 16 ] ;
32085: LD_ADDR_VAR 0 9
32089: PUSH
32090: LD_INT 14
32092: PUSH
32093: LD_INT 50
32095: PUSH
32096: LD_INT 16
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32104: LD_VAR 0 6
32108: PPUSH
32109: CALL_OW 264
32113: PUSH
32114: LD_INT 6
32116: PUSH
32117: LD_INT 46
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: IN
32124: IFFALSE 32145
// points := [ 32 , 120 , 70 ] ;
32126: LD_ADDR_VAR 0 9
32130: PUSH
32131: LD_INT 32
32133: PUSH
32134: LD_INT 120
32136: PUSH
32137: LD_INT 70
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32145: LD_VAR 0 6
32149: PPUSH
32150: CALL_OW 264
32154: PUSH
32155: LD_INT 7
32157: PUSH
32158: LD_INT 28
32160: PUSH
32161: LD_INT 45
32163: PUSH
32164: LD_EXP 64
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: IN
32175: IFFALSE 32196
// points := [ 35 , 20 , 45 ] ;
32177: LD_ADDR_VAR 0 9
32181: PUSH
32182: LD_INT 35
32184: PUSH
32185: LD_INT 20
32187: PUSH
32188: LD_INT 45
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32196: LD_VAR 0 6
32200: PPUSH
32201: CALL_OW 264
32205: PUSH
32206: LD_INT 47
32208: PUSH
32209: EMPTY
32210: LIST
32211: IN
32212: IFFALSE 32233
// points := [ 67 , 45 , 75 ] ;
32214: LD_ADDR_VAR 0 9
32218: PUSH
32219: LD_INT 67
32221: PUSH
32222: LD_INT 45
32224: PUSH
32225: LD_INT 75
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32233: LD_VAR 0 6
32237: PPUSH
32238: CALL_OW 264
32242: PUSH
32243: LD_INT 26
32245: PUSH
32246: EMPTY
32247: LIST
32248: IN
32249: IFFALSE 32270
// points := [ 120 , 30 , 80 ] ;
32251: LD_ADDR_VAR 0 9
32255: PUSH
32256: LD_INT 120
32258: PUSH
32259: LD_INT 30
32261: PUSH
32262: LD_INT 80
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32270: LD_VAR 0 6
32274: PPUSH
32275: CALL_OW 264
32279: PUSH
32280: LD_INT 22
32282: PUSH
32283: EMPTY
32284: LIST
32285: IN
32286: IFFALSE 32307
// points := [ 40 , 1 , 1 ] ;
32288: LD_ADDR_VAR 0 9
32292: PUSH
32293: LD_INT 40
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: LIST
32306: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32307: LD_VAR 0 6
32311: PPUSH
32312: CALL_OW 264
32316: PUSH
32317: LD_INT 29
32319: PUSH
32320: EMPTY
32321: LIST
32322: IN
32323: IFFALSE 32344
// points := [ 70 , 200 , 400 ] ;
32325: LD_ADDR_VAR 0 9
32329: PUSH
32330: LD_INT 70
32332: PUSH
32333: LD_INT 200
32335: PUSH
32336: LD_INT 400
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32344: LD_VAR 0 6
32348: PPUSH
32349: CALL_OW 264
32353: PUSH
32354: LD_INT 14
32356: PUSH
32357: LD_INT 53
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: IN
32364: IFFALSE 32385
// points := [ 40 , 10 , 20 ] ;
32366: LD_ADDR_VAR 0 9
32370: PUSH
32371: LD_INT 40
32373: PUSH
32374: LD_INT 10
32376: PUSH
32377: LD_INT 20
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: LIST
32384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32385: LD_VAR 0 6
32389: PPUSH
32390: CALL_OW 264
32394: PUSH
32395: LD_INT 9
32397: PUSH
32398: EMPTY
32399: LIST
32400: IN
32401: IFFALSE 32422
// points := [ 5 , 70 , 20 ] ;
32403: LD_ADDR_VAR 0 9
32407: PUSH
32408: LD_INT 5
32410: PUSH
32411: LD_INT 70
32413: PUSH
32414: LD_INT 20
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32422: LD_VAR 0 6
32426: PPUSH
32427: CALL_OW 264
32431: PUSH
32432: LD_INT 10
32434: PUSH
32435: EMPTY
32436: LIST
32437: IN
32438: IFFALSE 32459
// points := [ 35 , 110 , 70 ] ;
32440: LD_ADDR_VAR 0 9
32444: PUSH
32445: LD_INT 35
32447: PUSH
32448: LD_INT 110
32450: PUSH
32451: LD_INT 70
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32459: LD_VAR 0 6
32463: PPUSH
32464: CALL_OW 265
32468: PUSH
32469: LD_INT 25
32471: EQUAL
32472: IFFALSE 32493
// points := [ 80 , 65 , 100 ] ;
32474: LD_ADDR_VAR 0 9
32478: PUSH
32479: LD_INT 80
32481: PUSH
32482: LD_INT 65
32484: PUSH
32485: LD_INT 100
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: LIST
32492: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32493: LD_VAR 0 6
32497: PPUSH
32498: CALL_OW 263
32502: PUSH
32503: LD_INT 1
32505: EQUAL
32506: IFFALSE 32541
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32508: LD_ADDR_VAR 0 10
32512: PUSH
32513: LD_VAR 0 10
32517: PUSH
32518: LD_VAR 0 6
32522: PPUSH
32523: CALL_OW 311
32527: PPUSH
32528: LD_INT 3
32530: PPUSH
32531: CALL_OW 259
32535: PUSH
32536: LD_INT 4
32538: MUL
32539: MUL
32540: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32541: LD_VAR 0 6
32545: PPUSH
32546: CALL_OW 263
32550: PUSH
32551: LD_INT 2
32553: EQUAL
32554: IFFALSE 32605
// begin j := IsControledBy ( i ) ;
32556: LD_ADDR_VAR 0 7
32560: PUSH
32561: LD_VAR 0 6
32565: PPUSH
32566: CALL_OW 312
32570: ST_TO_ADDR
// if j then
32571: LD_VAR 0 7
32575: IFFALSE 32605
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32577: LD_ADDR_VAR 0 10
32581: PUSH
32582: LD_VAR 0 10
32586: PUSH
32587: LD_VAR 0 7
32591: PPUSH
32592: LD_INT 3
32594: PPUSH
32595: CALL_OW 259
32599: PUSH
32600: LD_INT 3
32602: MUL
32603: MUL
32604: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32605: LD_VAR 0 6
32609: PPUSH
32610: CALL_OW 264
32614: PUSH
32615: LD_INT 5
32617: PUSH
32618: LD_INT 6
32620: PUSH
32621: LD_INT 46
32623: PUSH
32624: LD_INT 44
32626: PUSH
32627: LD_INT 47
32629: PUSH
32630: LD_INT 45
32632: PUSH
32633: LD_INT 28
32635: PUSH
32636: LD_INT 7
32638: PUSH
32639: LD_INT 27
32641: PUSH
32642: LD_INT 29
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: IN
32657: PUSH
32658: LD_VAR 0 1
32662: PPUSH
32663: LD_INT 52
32665: PPUSH
32666: CALL_OW 321
32670: PUSH
32671: LD_INT 2
32673: EQUAL
32674: AND
32675: IFFALSE 32692
// bpoints := bpoints * 1.2 ;
32677: LD_ADDR_VAR 0 10
32681: PUSH
32682: LD_VAR 0 10
32686: PUSH
32687: LD_REAL  1.20000000000000E+0000
32690: MUL
32691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32692: LD_VAR 0 6
32696: PPUSH
32697: CALL_OW 264
32701: PUSH
32702: LD_INT 6
32704: PUSH
32705: LD_INT 46
32707: PUSH
32708: LD_INT 47
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: LIST
32715: IN
32716: IFFALSE 32733
// bpoints := bpoints * 1.2 ;
32718: LD_ADDR_VAR 0 10
32722: PUSH
32723: LD_VAR 0 10
32727: PUSH
32728: LD_REAL  1.20000000000000E+0000
32731: MUL
32732: ST_TO_ADDR
// end ; unit_building :
32733: GO 32747
32735: LD_INT 3
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32743
32741: GO 32746
32743: POP
// ; end ;
32744: GO 32747
32746: POP
// for j = 1 to 3 do
32747: LD_ADDR_VAR 0 7
32751: PUSH
32752: DOUBLE
32753: LD_INT 1
32755: DEC
32756: ST_TO_ADDR
32757: LD_INT 3
32759: PUSH
32760: FOR_TO
32761: IFFALSE 32814
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32763: LD_ADDR_VAR 0 5
32767: PUSH
32768: LD_VAR 0 5
32772: PPUSH
32773: LD_VAR 0 7
32777: PPUSH
32778: LD_VAR 0 5
32782: PUSH
32783: LD_VAR 0 7
32787: ARRAY
32788: PUSH
32789: LD_VAR 0 9
32793: PUSH
32794: LD_VAR 0 7
32798: ARRAY
32799: PUSH
32800: LD_VAR 0 10
32804: MUL
32805: PLUS
32806: PPUSH
32807: CALL_OW 1
32811: ST_TO_ADDR
32812: GO 32760
32814: POP
32815: POP
// end ;
32816: GO 31293
32818: POP
32819: POP
// result := Replace ( result , 4 , tmp ) ;
32820: LD_ADDR_VAR 0 5
32824: PUSH
32825: LD_VAR 0 5
32829: PPUSH
32830: LD_INT 4
32832: PPUSH
32833: LD_VAR 0 8
32837: PPUSH
32838: CALL_OW 1
32842: ST_TO_ADDR
// end ;
32843: LD_VAR 0 5
32847: RET
// export function DangerAtRange ( unit , range ) ; begin
32848: LD_INT 0
32850: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32851: LD_ADDR_VAR 0 3
32855: PUSH
32856: LD_VAR 0 1
32860: PPUSH
32861: CALL_OW 255
32865: PPUSH
32866: LD_VAR 0 1
32870: PPUSH
32871: CALL_OW 250
32875: PPUSH
32876: LD_VAR 0 1
32880: PPUSH
32881: CALL_OW 251
32885: PPUSH
32886: LD_VAR 0 2
32890: PPUSH
32891: CALL 31145 0 4
32895: ST_TO_ADDR
// end ;
32896: LD_VAR 0 3
32900: RET
// export function DangerInArea ( side , area ) ; begin
32901: LD_INT 0
32903: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32904: LD_ADDR_VAR 0 3
32908: PUSH
32909: LD_VAR 0 2
32913: PPUSH
32914: LD_INT 81
32916: PUSH
32917: LD_VAR 0 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PPUSH
32926: CALL_OW 70
32930: ST_TO_ADDR
// end ;
32931: LD_VAR 0 3
32935: RET
// export function IsExtension ( b ) ; begin
32936: LD_INT 0
32938: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32939: LD_ADDR_VAR 0 2
32943: PUSH
32944: LD_VAR 0 1
32948: PUSH
32949: LD_INT 23
32951: PUSH
32952: LD_INT 20
32954: PUSH
32955: LD_INT 22
32957: PUSH
32958: LD_INT 17
32960: PUSH
32961: LD_INT 24
32963: PUSH
32964: LD_INT 21
32966: PUSH
32967: LD_INT 19
32969: PUSH
32970: LD_INT 16
32972: PUSH
32973: LD_INT 25
32975: PUSH
32976: LD_INT 18
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: IN
32991: ST_TO_ADDR
// end ;
32992: LD_VAR 0 2
32996: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32997: LD_INT 0
32999: PPUSH
33000: PPUSH
33001: PPUSH
// result := [ ] ;
33002: LD_ADDR_VAR 0 4
33006: PUSH
33007: EMPTY
33008: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33009: LD_ADDR_VAR 0 5
33013: PUSH
33014: LD_VAR 0 2
33018: PPUSH
33019: LD_INT 21
33021: PUSH
33022: LD_INT 3
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PPUSH
33029: CALL_OW 70
33033: ST_TO_ADDR
// if not tmp then
33034: LD_VAR 0 5
33038: NOT
33039: IFFALSE 33043
// exit ;
33041: GO 33107
// if checkLink then
33043: LD_VAR 0 3
33047: IFFALSE 33097
// begin for i in tmp do
33049: LD_ADDR_VAR 0 6
33053: PUSH
33054: LD_VAR 0 5
33058: PUSH
33059: FOR_IN
33060: IFFALSE 33095
// if GetBase ( i ) <> base then
33062: LD_VAR 0 6
33066: PPUSH
33067: CALL_OW 274
33071: PUSH
33072: LD_VAR 0 1
33076: NONEQUAL
33077: IFFALSE 33093
// ComLinkToBase ( base , i ) ;
33079: LD_VAR 0 1
33083: PPUSH
33084: LD_VAR 0 6
33088: PPUSH
33089: CALL_OW 169
33093: GO 33059
33095: POP
33096: POP
// end ; result := tmp ;
33097: LD_ADDR_VAR 0 4
33101: PUSH
33102: LD_VAR 0 5
33106: ST_TO_ADDR
// end ;
33107: LD_VAR 0 4
33111: RET
// export function ComComplete ( units , b ) ; var i ; begin
33112: LD_INT 0
33114: PPUSH
33115: PPUSH
// if not units then
33116: LD_VAR 0 1
33120: NOT
33121: IFFALSE 33125
// exit ;
33123: GO 33215
// for i in units do
33125: LD_ADDR_VAR 0 4
33129: PUSH
33130: LD_VAR 0 1
33134: PUSH
33135: FOR_IN
33136: IFFALSE 33213
// if BuildingStatus ( b ) = bs_build then
33138: LD_VAR 0 2
33142: PPUSH
33143: CALL_OW 461
33147: PUSH
33148: LD_INT 1
33150: EQUAL
33151: IFFALSE 33211
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33153: LD_VAR 0 4
33157: PPUSH
33158: LD_STRING h
33160: PUSH
33161: LD_VAR 0 2
33165: PPUSH
33166: CALL_OW 250
33170: PUSH
33171: LD_VAR 0 2
33175: PPUSH
33176: CALL_OW 251
33180: PUSH
33181: LD_VAR 0 2
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: PUSH
33204: EMPTY
33205: LIST
33206: PPUSH
33207: CALL_OW 446
33211: GO 33135
33213: POP
33214: POP
// end ;
33215: LD_VAR 0 3
33219: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33220: LD_INT 0
33222: PPUSH
33223: PPUSH
33224: PPUSH
33225: PPUSH
33226: PPUSH
33227: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33228: LD_VAR 0 1
33232: NOT
33233: PUSH
33234: LD_VAR 0 1
33238: PPUSH
33239: CALL_OW 263
33243: PUSH
33244: LD_INT 2
33246: NONEQUAL
33247: OR
33248: IFFALSE 33252
// exit ;
33250: GO 33568
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33252: LD_ADDR_VAR 0 6
33256: PUSH
33257: LD_INT 22
33259: PUSH
33260: LD_VAR 0 1
33264: PPUSH
33265: CALL_OW 255
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 2
33276: PUSH
33277: LD_INT 30
33279: PUSH
33280: LD_INT 36
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 34
33289: PUSH
33290: LD_INT 31
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PPUSH
33306: CALL_OW 69
33310: ST_TO_ADDR
// if not tmp then
33311: LD_VAR 0 6
33315: NOT
33316: IFFALSE 33320
// exit ;
33318: GO 33568
// result := [ ] ;
33320: LD_ADDR_VAR 0 2
33324: PUSH
33325: EMPTY
33326: ST_TO_ADDR
// for i in tmp do
33327: LD_ADDR_VAR 0 3
33331: PUSH
33332: LD_VAR 0 6
33336: PUSH
33337: FOR_IN
33338: IFFALSE 33409
// begin t := UnitsInside ( i ) ;
33340: LD_ADDR_VAR 0 4
33344: PUSH
33345: LD_VAR 0 3
33349: PPUSH
33350: CALL_OW 313
33354: ST_TO_ADDR
// if t then
33355: LD_VAR 0 4
33359: IFFALSE 33407
// for j in t do
33361: LD_ADDR_VAR 0 7
33365: PUSH
33366: LD_VAR 0 4
33370: PUSH
33371: FOR_IN
33372: IFFALSE 33405
// result := Replace ( result , result + 1 , j ) ;
33374: LD_ADDR_VAR 0 2
33378: PUSH
33379: LD_VAR 0 2
33383: PPUSH
33384: LD_VAR 0 2
33388: PUSH
33389: LD_INT 1
33391: PLUS
33392: PPUSH
33393: LD_VAR 0 7
33397: PPUSH
33398: CALL_OW 1
33402: ST_TO_ADDR
33403: GO 33371
33405: POP
33406: POP
// end ;
33407: GO 33337
33409: POP
33410: POP
// if not result then
33411: LD_VAR 0 2
33415: NOT
33416: IFFALSE 33420
// exit ;
33418: GO 33568
// mech := result [ 1 ] ;
33420: LD_ADDR_VAR 0 5
33424: PUSH
33425: LD_VAR 0 2
33429: PUSH
33430: LD_INT 1
33432: ARRAY
33433: ST_TO_ADDR
// if result > 1 then
33434: LD_VAR 0 2
33438: PUSH
33439: LD_INT 1
33441: GREATER
33442: IFFALSE 33554
// begin for i = 2 to result do
33444: LD_ADDR_VAR 0 3
33448: PUSH
33449: DOUBLE
33450: LD_INT 2
33452: DEC
33453: ST_TO_ADDR
33454: LD_VAR 0 2
33458: PUSH
33459: FOR_TO
33460: IFFALSE 33552
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33462: LD_ADDR_VAR 0 4
33466: PUSH
33467: LD_VAR 0 2
33471: PUSH
33472: LD_VAR 0 3
33476: ARRAY
33477: PPUSH
33478: LD_INT 3
33480: PPUSH
33481: CALL_OW 259
33485: PUSH
33486: LD_VAR 0 2
33490: PUSH
33491: LD_VAR 0 3
33495: ARRAY
33496: PPUSH
33497: CALL_OW 432
33501: MINUS
33502: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33503: LD_VAR 0 4
33507: PUSH
33508: LD_VAR 0 5
33512: PPUSH
33513: LD_INT 3
33515: PPUSH
33516: CALL_OW 259
33520: PUSH
33521: LD_VAR 0 5
33525: PPUSH
33526: CALL_OW 432
33530: MINUS
33531: GREATEREQUAL
33532: IFFALSE 33550
// mech := result [ i ] ;
33534: LD_ADDR_VAR 0 5
33538: PUSH
33539: LD_VAR 0 2
33543: PUSH
33544: LD_VAR 0 3
33548: ARRAY
33549: ST_TO_ADDR
// end ;
33550: GO 33459
33552: POP
33553: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33554: LD_VAR 0 1
33558: PPUSH
33559: LD_VAR 0 5
33563: PPUSH
33564: CALL_OW 135
// end ;
33568: LD_VAR 0 2
33572: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33573: LD_INT 0
33575: PPUSH
33576: PPUSH
33577: PPUSH
33578: PPUSH
33579: PPUSH
33580: PPUSH
33581: PPUSH
33582: PPUSH
33583: PPUSH
33584: PPUSH
33585: PPUSH
33586: PPUSH
33587: PPUSH
// result := [ ] ;
33588: LD_ADDR_VAR 0 7
33592: PUSH
33593: EMPTY
33594: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33595: LD_VAR 0 1
33599: PPUSH
33600: CALL_OW 266
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: IN
33615: NOT
33616: IFFALSE 33620
// exit ;
33618: GO 35254
// if name then
33620: LD_VAR 0 3
33624: IFFALSE 33640
// SetBName ( base_dep , name ) ;
33626: LD_VAR 0 1
33630: PPUSH
33631: LD_VAR 0 3
33635: PPUSH
33636: CALL_OW 500
// base := GetBase ( base_dep ) ;
33640: LD_ADDR_VAR 0 15
33644: PUSH
33645: LD_VAR 0 1
33649: PPUSH
33650: CALL_OW 274
33654: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33655: LD_ADDR_VAR 0 16
33659: PUSH
33660: LD_VAR 0 1
33664: PPUSH
33665: CALL_OW 255
33669: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33670: LD_ADDR_VAR 0 17
33674: PUSH
33675: LD_VAR 0 1
33679: PPUSH
33680: CALL_OW 248
33684: ST_TO_ADDR
// if sources then
33685: LD_VAR 0 5
33689: IFFALSE 33736
// for i = 1 to 3 do
33691: LD_ADDR_VAR 0 8
33695: PUSH
33696: DOUBLE
33697: LD_INT 1
33699: DEC
33700: ST_TO_ADDR
33701: LD_INT 3
33703: PUSH
33704: FOR_TO
33705: IFFALSE 33734
// AddResourceType ( base , i , sources [ i ] ) ;
33707: LD_VAR 0 15
33711: PPUSH
33712: LD_VAR 0 8
33716: PPUSH
33717: LD_VAR 0 5
33721: PUSH
33722: LD_VAR 0 8
33726: ARRAY
33727: PPUSH
33728: CALL_OW 276
33732: GO 33704
33734: POP
33735: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33736: LD_ADDR_VAR 0 18
33740: PUSH
33741: LD_VAR 0 15
33745: PPUSH
33746: LD_VAR 0 2
33750: PPUSH
33751: LD_INT 1
33753: PPUSH
33754: CALL 32997 0 3
33758: ST_TO_ADDR
// InitHc ;
33759: CALL_OW 19
// InitUc ;
33763: CALL_OW 18
// uc_side := side ;
33767: LD_ADDR_OWVAR 20
33771: PUSH
33772: LD_VAR 0 16
33776: ST_TO_ADDR
// uc_nation := nation ;
33777: LD_ADDR_OWVAR 21
33781: PUSH
33782: LD_VAR 0 17
33786: ST_TO_ADDR
// if buildings then
33787: LD_VAR 0 18
33791: IFFALSE 35113
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33793: LD_ADDR_VAR 0 19
33797: PUSH
33798: LD_VAR 0 18
33802: PPUSH
33803: LD_INT 2
33805: PUSH
33806: LD_INT 30
33808: PUSH
33809: LD_INT 29
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 30
33818: PUSH
33819: LD_INT 30
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: PPUSH
33831: CALL_OW 72
33835: ST_TO_ADDR
// if tmp then
33836: LD_VAR 0 19
33840: IFFALSE 33888
// for i in tmp do
33842: LD_ADDR_VAR 0 8
33846: PUSH
33847: LD_VAR 0 19
33851: PUSH
33852: FOR_IN
33853: IFFALSE 33886
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33855: LD_VAR 0 8
33859: PPUSH
33860: CALL_OW 250
33864: PPUSH
33865: LD_VAR 0 8
33869: PPUSH
33870: CALL_OW 251
33874: PPUSH
33875: LD_VAR 0 16
33879: PPUSH
33880: CALL_OW 441
33884: GO 33852
33886: POP
33887: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33888: LD_VAR 0 18
33892: PPUSH
33893: LD_INT 2
33895: PUSH
33896: LD_INT 30
33898: PUSH
33899: LD_INT 32
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 30
33908: PUSH
33909: LD_INT 33
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: LIST
33920: PPUSH
33921: CALL_OW 72
33925: IFFALSE 34013
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33927: LD_ADDR_VAR 0 8
33931: PUSH
33932: LD_VAR 0 18
33936: PPUSH
33937: LD_INT 2
33939: PUSH
33940: LD_INT 30
33942: PUSH
33943: LD_INT 32
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 30
33952: PUSH
33953: LD_INT 33
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: LIST
33964: PPUSH
33965: CALL_OW 72
33969: PUSH
33970: FOR_IN
33971: IFFALSE 34011
// begin if not GetBWeapon ( i ) then
33973: LD_VAR 0 8
33977: PPUSH
33978: CALL_OW 269
33982: NOT
33983: IFFALSE 34009
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33985: LD_VAR 0 8
33989: PPUSH
33990: LD_VAR 0 8
33994: PPUSH
33995: LD_VAR 0 2
33999: PPUSH
34000: CALL 35259 0 2
34004: PPUSH
34005: CALL_OW 431
// end ;
34009: GO 33970
34011: POP
34012: POP
// end ; for i = 1 to personel do
34013: LD_ADDR_VAR 0 8
34017: PUSH
34018: DOUBLE
34019: LD_INT 1
34021: DEC
34022: ST_TO_ADDR
34023: LD_VAR 0 6
34027: PUSH
34028: FOR_TO
34029: IFFALSE 35093
// begin if i > 4 then
34031: LD_VAR 0 8
34035: PUSH
34036: LD_INT 4
34038: GREATER
34039: IFFALSE 34043
// break ;
34041: GO 35093
// case i of 1 :
34043: LD_VAR 0 8
34047: PUSH
34048: LD_INT 1
34050: DOUBLE
34051: EQUAL
34052: IFTRUE 34056
34054: GO 34136
34056: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34057: LD_ADDR_VAR 0 12
34061: PUSH
34062: LD_VAR 0 18
34066: PPUSH
34067: LD_INT 22
34069: PUSH
34070: LD_VAR 0 16
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 58
34081: PUSH
34082: EMPTY
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: LD_INT 30
34090: PUSH
34091: LD_INT 32
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 30
34100: PUSH
34101: LD_INT 4
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 30
34110: PUSH
34111: LD_INT 5
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: LIST
34128: PPUSH
34129: CALL_OW 72
34133: ST_TO_ADDR
34134: GO 34358
34136: LD_INT 2
34138: DOUBLE
34139: EQUAL
34140: IFTRUE 34144
34142: GO 34206
34144: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34145: LD_ADDR_VAR 0 12
34149: PUSH
34150: LD_VAR 0 18
34154: PPUSH
34155: LD_INT 22
34157: PUSH
34158: LD_VAR 0 16
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 30
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 30
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: LIST
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PPUSH
34199: CALL_OW 72
34203: ST_TO_ADDR
34204: GO 34358
34206: LD_INT 3
34208: DOUBLE
34209: EQUAL
34210: IFTRUE 34214
34212: GO 34276
34214: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34215: LD_ADDR_VAR 0 12
34219: PUSH
34220: LD_VAR 0 18
34224: PPUSH
34225: LD_INT 22
34227: PUSH
34228: LD_VAR 0 16
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 2
34239: PUSH
34240: LD_INT 30
34242: PUSH
34243: LD_INT 2
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 30
34252: PUSH
34253: LD_INT 3
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PPUSH
34269: CALL_OW 72
34273: ST_TO_ADDR
34274: GO 34358
34276: LD_INT 4
34278: DOUBLE
34279: EQUAL
34280: IFTRUE 34284
34282: GO 34357
34284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34285: LD_ADDR_VAR 0 12
34289: PUSH
34290: LD_VAR 0 18
34294: PPUSH
34295: LD_INT 22
34297: PUSH
34298: LD_VAR 0 16
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 2
34309: PUSH
34310: LD_INT 30
34312: PUSH
34313: LD_INT 6
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 30
34322: PUSH
34323: LD_INT 7
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 30
34332: PUSH
34333: LD_INT 8
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PPUSH
34350: CALL_OW 72
34354: ST_TO_ADDR
34355: GO 34358
34357: POP
// if i = 1 then
34358: LD_VAR 0 8
34362: PUSH
34363: LD_INT 1
34365: EQUAL
34366: IFFALSE 34477
// begin tmp := [ ] ;
34368: LD_ADDR_VAR 0 19
34372: PUSH
34373: EMPTY
34374: ST_TO_ADDR
// for j in f do
34375: LD_ADDR_VAR 0 9
34379: PUSH
34380: LD_VAR 0 12
34384: PUSH
34385: FOR_IN
34386: IFFALSE 34459
// if GetBType ( j ) = b_bunker then
34388: LD_VAR 0 9
34392: PPUSH
34393: CALL_OW 266
34397: PUSH
34398: LD_INT 32
34400: EQUAL
34401: IFFALSE 34428
// tmp := Insert ( tmp , 1 , j ) else
34403: LD_ADDR_VAR 0 19
34407: PUSH
34408: LD_VAR 0 19
34412: PPUSH
34413: LD_INT 1
34415: PPUSH
34416: LD_VAR 0 9
34420: PPUSH
34421: CALL_OW 2
34425: ST_TO_ADDR
34426: GO 34457
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34428: LD_ADDR_VAR 0 19
34432: PUSH
34433: LD_VAR 0 19
34437: PPUSH
34438: LD_VAR 0 19
34442: PUSH
34443: LD_INT 1
34445: PLUS
34446: PPUSH
34447: LD_VAR 0 9
34451: PPUSH
34452: CALL_OW 2
34456: ST_TO_ADDR
34457: GO 34385
34459: POP
34460: POP
// if tmp then
34461: LD_VAR 0 19
34465: IFFALSE 34477
// f := tmp ;
34467: LD_ADDR_VAR 0 12
34471: PUSH
34472: LD_VAR 0 19
34476: ST_TO_ADDR
// end ; x := personel [ i ] ;
34477: LD_ADDR_VAR 0 13
34481: PUSH
34482: LD_VAR 0 6
34486: PUSH
34487: LD_VAR 0 8
34491: ARRAY
34492: ST_TO_ADDR
// if x = - 1 then
34493: LD_VAR 0 13
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: EQUAL
34502: IFFALSE 34711
// begin for j in f do
34504: LD_ADDR_VAR 0 9
34508: PUSH
34509: LD_VAR 0 12
34513: PUSH
34514: FOR_IN
34515: IFFALSE 34707
// repeat InitHc ;
34517: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34521: LD_VAR 0 9
34525: PPUSH
34526: CALL_OW 266
34530: PUSH
34531: LD_INT 5
34533: EQUAL
34534: IFFALSE 34604
// begin if UnitsInside ( j ) < 3 then
34536: LD_VAR 0 9
34540: PPUSH
34541: CALL_OW 313
34545: PUSH
34546: LD_INT 3
34548: LESS
34549: IFFALSE 34585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34551: LD_INT 0
34553: PPUSH
34554: LD_INT 5
34556: PUSH
34557: LD_INT 8
34559: PUSH
34560: LD_INT 9
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: LIST
34567: PUSH
34568: LD_VAR 0 17
34572: ARRAY
34573: PPUSH
34574: LD_VAR 0 4
34578: PPUSH
34579: CALL_OW 380
34583: GO 34602
// PrepareHuman ( false , i , skill ) ;
34585: LD_INT 0
34587: PPUSH
34588: LD_VAR 0 8
34592: PPUSH
34593: LD_VAR 0 4
34597: PPUSH
34598: CALL_OW 380
// end else
34602: GO 34621
// PrepareHuman ( false , i , skill ) ;
34604: LD_INT 0
34606: PPUSH
34607: LD_VAR 0 8
34611: PPUSH
34612: LD_VAR 0 4
34616: PPUSH
34617: CALL_OW 380
// un := CreateHuman ;
34621: LD_ADDR_VAR 0 14
34625: PUSH
34626: CALL_OW 44
34630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34631: LD_ADDR_VAR 0 7
34635: PUSH
34636: LD_VAR 0 7
34640: PPUSH
34641: LD_INT 1
34643: PPUSH
34644: LD_VAR 0 14
34648: PPUSH
34649: CALL_OW 2
34653: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34654: LD_VAR 0 14
34658: PPUSH
34659: LD_VAR 0 9
34663: PPUSH
34664: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34668: LD_VAR 0 9
34672: PPUSH
34673: CALL_OW 313
34677: PUSH
34678: LD_INT 6
34680: EQUAL
34681: PUSH
34682: LD_VAR 0 9
34686: PPUSH
34687: CALL_OW 266
34691: PUSH
34692: LD_INT 32
34694: PUSH
34695: LD_INT 31
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: IN
34702: OR
34703: IFFALSE 34517
34705: GO 34514
34707: POP
34708: POP
// end else
34709: GO 35091
// for j = 1 to x do
34711: LD_ADDR_VAR 0 9
34715: PUSH
34716: DOUBLE
34717: LD_INT 1
34719: DEC
34720: ST_TO_ADDR
34721: LD_VAR 0 13
34725: PUSH
34726: FOR_TO
34727: IFFALSE 35089
// begin InitHc ;
34729: CALL_OW 19
// if not f then
34733: LD_VAR 0 12
34737: NOT
34738: IFFALSE 34827
// begin PrepareHuman ( false , i , skill ) ;
34740: LD_INT 0
34742: PPUSH
34743: LD_VAR 0 8
34747: PPUSH
34748: LD_VAR 0 4
34752: PPUSH
34753: CALL_OW 380
// un := CreateHuman ;
34757: LD_ADDR_VAR 0 14
34761: PUSH
34762: CALL_OW 44
34766: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34767: LD_ADDR_VAR 0 7
34771: PUSH
34772: LD_VAR 0 7
34776: PPUSH
34777: LD_INT 1
34779: PPUSH
34780: LD_VAR 0 14
34784: PPUSH
34785: CALL_OW 2
34789: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34790: LD_VAR 0 14
34794: PPUSH
34795: LD_VAR 0 1
34799: PPUSH
34800: CALL_OW 250
34804: PPUSH
34805: LD_VAR 0 1
34809: PPUSH
34810: CALL_OW 251
34814: PPUSH
34815: LD_INT 10
34817: PPUSH
34818: LD_INT 0
34820: PPUSH
34821: CALL_OW 50
// continue ;
34825: GO 34726
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34827: LD_VAR 0 12
34831: PUSH
34832: LD_INT 1
34834: ARRAY
34835: PPUSH
34836: CALL_OW 313
34840: PUSH
34841: LD_VAR 0 12
34845: PUSH
34846: LD_INT 1
34848: ARRAY
34849: PPUSH
34850: CALL_OW 266
34854: PUSH
34855: LD_INT 32
34857: PUSH
34858: LD_INT 31
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: IN
34865: AND
34866: PUSH
34867: LD_VAR 0 12
34871: PUSH
34872: LD_INT 1
34874: ARRAY
34875: PPUSH
34876: CALL_OW 313
34880: PUSH
34881: LD_INT 6
34883: EQUAL
34884: OR
34885: IFFALSE 34905
// f := Delete ( f , 1 ) ;
34887: LD_ADDR_VAR 0 12
34891: PUSH
34892: LD_VAR 0 12
34896: PPUSH
34897: LD_INT 1
34899: PPUSH
34900: CALL_OW 3
34904: ST_TO_ADDR
// if not f then
34905: LD_VAR 0 12
34909: NOT
34910: IFFALSE 34928
// begin x := x + 2 ;
34912: LD_ADDR_VAR 0 13
34916: PUSH
34917: LD_VAR 0 13
34921: PUSH
34922: LD_INT 2
34924: PLUS
34925: ST_TO_ADDR
// continue ;
34926: GO 34726
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34928: LD_VAR 0 12
34932: PUSH
34933: LD_INT 1
34935: ARRAY
34936: PPUSH
34937: CALL_OW 266
34941: PUSH
34942: LD_INT 5
34944: EQUAL
34945: IFFALSE 35019
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34947: LD_VAR 0 12
34951: PUSH
34952: LD_INT 1
34954: ARRAY
34955: PPUSH
34956: CALL_OW 313
34960: PUSH
34961: LD_INT 3
34963: LESS
34964: IFFALSE 35000
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34966: LD_INT 0
34968: PPUSH
34969: LD_INT 5
34971: PUSH
34972: LD_INT 8
34974: PUSH
34975: LD_INT 9
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: LIST
34982: PUSH
34983: LD_VAR 0 17
34987: ARRAY
34988: PPUSH
34989: LD_VAR 0 4
34993: PPUSH
34994: CALL_OW 380
34998: GO 35017
// PrepareHuman ( false , i , skill ) ;
35000: LD_INT 0
35002: PPUSH
35003: LD_VAR 0 8
35007: PPUSH
35008: LD_VAR 0 4
35012: PPUSH
35013: CALL_OW 380
// end else
35017: GO 35036
// PrepareHuman ( false , i , skill ) ;
35019: LD_INT 0
35021: PPUSH
35022: LD_VAR 0 8
35026: PPUSH
35027: LD_VAR 0 4
35031: PPUSH
35032: CALL_OW 380
// un := CreateHuman ;
35036: LD_ADDR_VAR 0 14
35040: PUSH
35041: CALL_OW 44
35045: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35046: LD_ADDR_VAR 0 7
35050: PUSH
35051: LD_VAR 0 7
35055: PPUSH
35056: LD_INT 1
35058: PPUSH
35059: LD_VAR 0 14
35063: PPUSH
35064: CALL_OW 2
35068: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35069: LD_VAR 0 14
35073: PPUSH
35074: LD_VAR 0 12
35078: PUSH
35079: LD_INT 1
35081: ARRAY
35082: PPUSH
35083: CALL_OW 52
// end ;
35087: GO 34726
35089: POP
35090: POP
// end ;
35091: GO 34028
35093: POP
35094: POP
// result := result ^ buildings ;
35095: LD_ADDR_VAR 0 7
35099: PUSH
35100: LD_VAR 0 7
35104: PUSH
35105: LD_VAR 0 18
35109: ADD
35110: ST_TO_ADDR
// end else
35111: GO 35254
// begin for i = 1 to personel do
35113: LD_ADDR_VAR 0 8
35117: PUSH
35118: DOUBLE
35119: LD_INT 1
35121: DEC
35122: ST_TO_ADDR
35123: LD_VAR 0 6
35127: PUSH
35128: FOR_TO
35129: IFFALSE 35252
// begin if i > 4 then
35131: LD_VAR 0 8
35135: PUSH
35136: LD_INT 4
35138: GREATER
35139: IFFALSE 35143
// break ;
35141: GO 35252
// x := personel [ i ] ;
35143: LD_ADDR_VAR 0 13
35147: PUSH
35148: LD_VAR 0 6
35152: PUSH
35153: LD_VAR 0 8
35157: ARRAY
35158: ST_TO_ADDR
// if x = - 1 then
35159: LD_VAR 0 13
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: EQUAL
35168: IFFALSE 35172
// continue ;
35170: GO 35128
// PrepareHuman ( false , i , skill ) ;
35172: LD_INT 0
35174: PPUSH
35175: LD_VAR 0 8
35179: PPUSH
35180: LD_VAR 0 4
35184: PPUSH
35185: CALL_OW 380
// un := CreateHuman ;
35189: LD_ADDR_VAR 0 14
35193: PUSH
35194: CALL_OW 44
35198: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35199: LD_VAR 0 14
35203: PPUSH
35204: LD_VAR 0 1
35208: PPUSH
35209: CALL_OW 250
35213: PPUSH
35214: LD_VAR 0 1
35218: PPUSH
35219: CALL_OW 251
35223: PPUSH
35224: LD_INT 10
35226: PPUSH
35227: LD_INT 0
35229: PPUSH
35230: CALL_OW 50
// result := result ^ un ;
35234: LD_ADDR_VAR 0 7
35238: PUSH
35239: LD_VAR 0 7
35243: PUSH
35244: LD_VAR 0 14
35248: ADD
35249: ST_TO_ADDR
// end ;
35250: GO 35128
35252: POP
35253: POP
// end ; end ;
35254: LD_VAR 0 7
35258: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35259: LD_INT 0
35261: PPUSH
35262: PPUSH
35263: PPUSH
35264: PPUSH
35265: PPUSH
35266: PPUSH
35267: PPUSH
35268: PPUSH
35269: PPUSH
35270: PPUSH
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
// result := false ;
35277: LD_ADDR_VAR 0 3
35281: PUSH
35282: LD_INT 0
35284: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35285: LD_VAR 0 1
35289: NOT
35290: PUSH
35291: LD_VAR 0 1
35295: PPUSH
35296: CALL_OW 266
35300: PUSH
35301: LD_INT 32
35303: PUSH
35304: LD_INT 33
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: IN
35311: NOT
35312: OR
35313: IFFALSE 35317
// exit ;
35315: GO 36426
// nat := GetNation ( tower ) ;
35317: LD_ADDR_VAR 0 12
35321: PUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: CALL_OW 248
35331: ST_TO_ADDR
// side := GetSide ( tower ) ;
35332: LD_ADDR_VAR 0 16
35336: PUSH
35337: LD_VAR 0 1
35341: PPUSH
35342: CALL_OW 255
35346: ST_TO_ADDR
// x := GetX ( tower ) ;
35347: LD_ADDR_VAR 0 10
35351: PUSH
35352: LD_VAR 0 1
35356: PPUSH
35357: CALL_OW 250
35361: ST_TO_ADDR
// y := GetY ( tower ) ;
35362: LD_ADDR_VAR 0 11
35366: PUSH
35367: LD_VAR 0 1
35371: PPUSH
35372: CALL_OW 251
35376: ST_TO_ADDR
// if not x or not y then
35377: LD_VAR 0 10
35381: NOT
35382: PUSH
35383: LD_VAR 0 11
35387: NOT
35388: OR
35389: IFFALSE 35393
// exit ;
35391: GO 36426
// weapon := 0 ;
35393: LD_ADDR_VAR 0 18
35397: PUSH
35398: LD_INT 0
35400: ST_TO_ADDR
// fac_list := [ ] ;
35401: LD_ADDR_VAR 0 17
35405: PUSH
35406: EMPTY
35407: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35408: LD_ADDR_VAR 0 6
35412: PUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 274
35422: PPUSH
35423: LD_VAR 0 2
35427: PPUSH
35428: LD_INT 0
35430: PPUSH
35431: CALL 32997 0 3
35435: PPUSH
35436: LD_INT 30
35438: PUSH
35439: LD_INT 3
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PPUSH
35446: CALL_OW 72
35450: ST_TO_ADDR
// if not factories then
35451: LD_VAR 0 6
35455: NOT
35456: IFFALSE 35460
// exit ;
35458: GO 36426
// for i in factories do
35460: LD_ADDR_VAR 0 8
35464: PUSH
35465: LD_VAR 0 6
35469: PUSH
35470: FOR_IN
35471: IFFALSE 35496
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35473: LD_ADDR_VAR 0 17
35477: PUSH
35478: LD_VAR 0 17
35482: PUSH
35483: LD_VAR 0 8
35487: PPUSH
35488: CALL_OW 478
35492: UNION
35493: ST_TO_ADDR
35494: GO 35470
35496: POP
35497: POP
// if not fac_list then
35498: LD_VAR 0 17
35502: NOT
35503: IFFALSE 35507
// exit ;
35505: GO 36426
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35507: LD_ADDR_VAR 0 5
35511: PUSH
35512: LD_INT 4
35514: PUSH
35515: LD_INT 5
35517: PUSH
35518: LD_INT 9
35520: PUSH
35521: LD_INT 10
35523: PUSH
35524: LD_INT 6
35526: PUSH
35527: LD_INT 7
35529: PUSH
35530: LD_INT 11
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 27
35544: PUSH
35545: LD_INT 28
35547: PUSH
35548: LD_INT 26
35550: PUSH
35551: LD_INT 30
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 43
35562: PUSH
35563: LD_INT 44
35565: PUSH
35566: LD_INT 46
35568: PUSH
35569: LD_INT 45
35571: PUSH
35572: LD_INT 47
35574: PUSH
35575: LD_INT 49
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: LIST
35590: PUSH
35591: LD_VAR 0 12
35595: ARRAY
35596: ST_TO_ADDR
// list := list isect fac_list ;
35597: LD_ADDR_VAR 0 5
35601: PUSH
35602: LD_VAR 0 5
35606: PUSH
35607: LD_VAR 0 17
35611: ISECT
35612: ST_TO_ADDR
// if not list then
35613: LD_VAR 0 5
35617: NOT
35618: IFFALSE 35622
// exit ;
35620: GO 36426
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35622: LD_VAR 0 12
35626: PUSH
35627: LD_INT 3
35629: EQUAL
35630: PUSH
35631: LD_INT 49
35633: PUSH
35634: LD_VAR 0 5
35638: IN
35639: AND
35640: PUSH
35641: LD_INT 31
35643: PPUSH
35644: LD_VAR 0 16
35648: PPUSH
35649: CALL_OW 321
35653: PUSH
35654: LD_INT 2
35656: EQUAL
35657: AND
35658: IFFALSE 35718
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35660: LD_INT 22
35662: PUSH
35663: LD_VAR 0 16
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 35
35674: PUSH
35675: LD_INT 49
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 91
35684: PUSH
35685: LD_VAR 0 1
35689: PUSH
35690: LD_INT 10
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: PPUSH
35703: CALL_OW 69
35707: NOT
35708: IFFALSE 35718
// weapon := ru_time_lapser ;
35710: LD_ADDR_VAR 0 18
35714: PUSH
35715: LD_INT 49
35717: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35718: LD_VAR 0 12
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: LD_INT 2
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: IN
35733: PUSH
35734: LD_INT 11
35736: PUSH
35737: LD_VAR 0 5
35741: IN
35742: PUSH
35743: LD_INT 30
35745: PUSH
35746: LD_VAR 0 5
35750: IN
35751: OR
35752: AND
35753: PUSH
35754: LD_INT 6
35756: PPUSH
35757: LD_VAR 0 16
35761: PPUSH
35762: CALL_OW 321
35766: PUSH
35767: LD_INT 2
35769: EQUAL
35770: AND
35771: IFFALSE 35936
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35773: LD_INT 22
35775: PUSH
35776: LD_VAR 0 16
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 35
35790: PUSH
35791: LD_INT 11
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 35
35800: PUSH
35801: LD_INT 30
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 91
35815: PUSH
35816: LD_VAR 0 1
35820: PUSH
35821: LD_INT 18
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: PPUSH
35834: CALL_OW 69
35838: NOT
35839: PUSH
35840: LD_INT 22
35842: PUSH
35843: LD_VAR 0 16
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: LD_INT 30
35857: PUSH
35858: LD_INT 32
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 30
35867: PUSH
35868: LD_INT 33
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 91
35882: PUSH
35883: LD_VAR 0 1
35887: PUSH
35888: LD_INT 12
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: PUSH
35901: EMPTY
35902: LIST
35903: PPUSH
35904: CALL_OW 69
35908: PUSH
35909: LD_INT 2
35911: GREATER
35912: AND
35913: IFFALSE 35936
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35915: LD_ADDR_VAR 0 18
35919: PUSH
35920: LD_INT 11
35922: PUSH
35923: LD_INT 30
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_VAR 0 12
35934: ARRAY
35935: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35936: LD_VAR 0 18
35940: NOT
35941: PUSH
35942: LD_INT 40
35944: PPUSH
35945: LD_VAR 0 16
35949: PPUSH
35950: CALL_OW 321
35954: PUSH
35955: LD_INT 2
35957: EQUAL
35958: AND
35959: PUSH
35960: LD_INT 7
35962: PUSH
35963: LD_VAR 0 5
35967: IN
35968: PUSH
35969: LD_INT 28
35971: PUSH
35972: LD_VAR 0 5
35976: IN
35977: OR
35978: PUSH
35979: LD_INT 45
35981: PUSH
35982: LD_VAR 0 5
35986: IN
35987: OR
35988: AND
35989: IFFALSE 36243
// begin hex := GetHexInfo ( x , y ) ;
35991: LD_ADDR_VAR 0 4
35995: PUSH
35996: LD_VAR 0 10
36000: PPUSH
36001: LD_VAR 0 11
36005: PPUSH
36006: CALL_OW 546
36010: ST_TO_ADDR
// if hex [ 1 ] then
36011: LD_VAR 0 4
36015: PUSH
36016: LD_INT 1
36018: ARRAY
36019: IFFALSE 36023
// exit ;
36021: GO 36426
// height := hex [ 2 ] ;
36023: LD_ADDR_VAR 0 15
36027: PUSH
36028: LD_VAR 0 4
36032: PUSH
36033: LD_INT 2
36035: ARRAY
36036: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36037: LD_ADDR_VAR 0 14
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: LD_INT 3
36050: PUSH
36051: LD_INT 5
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: ST_TO_ADDR
// for i in tmp do
36060: LD_ADDR_VAR 0 8
36064: PUSH
36065: LD_VAR 0 14
36069: PUSH
36070: FOR_IN
36071: IFFALSE 36241
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36073: LD_ADDR_VAR 0 9
36077: PUSH
36078: LD_VAR 0 10
36082: PPUSH
36083: LD_VAR 0 8
36087: PPUSH
36088: LD_INT 5
36090: PPUSH
36091: CALL_OW 272
36095: PUSH
36096: LD_VAR 0 11
36100: PPUSH
36101: LD_VAR 0 8
36105: PPUSH
36106: LD_INT 5
36108: PPUSH
36109: CALL_OW 273
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36118: LD_VAR 0 9
36122: PUSH
36123: LD_INT 1
36125: ARRAY
36126: PPUSH
36127: LD_VAR 0 9
36131: PUSH
36132: LD_INT 2
36134: ARRAY
36135: PPUSH
36136: CALL_OW 488
36140: IFFALSE 36239
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36142: LD_ADDR_VAR 0 4
36146: PUSH
36147: LD_VAR 0 9
36151: PUSH
36152: LD_INT 1
36154: ARRAY
36155: PPUSH
36156: LD_VAR 0 9
36160: PUSH
36161: LD_INT 2
36163: ARRAY
36164: PPUSH
36165: CALL_OW 546
36169: ST_TO_ADDR
// if hex [ 1 ] then
36170: LD_VAR 0 4
36174: PUSH
36175: LD_INT 1
36177: ARRAY
36178: IFFALSE 36182
// continue ;
36180: GO 36070
// h := hex [ 2 ] ;
36182: LD_ADDR_VAR 0 13
36186: PUSH
36187: LD_VAR 0 4
36191: PUSH
36192: LD_INT 2
36194: ARRAY
36195: ST_TO_ADDR
// if h + 7 < height then
36196: LD_VAR 0 13
36200: PUSH
36201: LD_INT 7
36203: PLUS
36204: PUSH
36205: LD_VAR 0 15
36209: LESS
36210: IFFALSE 36239
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36212: LD_ADDR_VAR 0 18
36216: PUSH
36217: LD_INT 7
36219: PUSH
36220: LD_INT 28
36222: PUSH
36223: LD_INT 45
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: PUSH
36231: LD_VAR 0 12
36235: ARRAY
36236: ST_TO_ADDR
// break ;
36237: GO 36241
// end ; end ; end ;
36239: GO 36070
36241: POP
36242: POP
// end ; if not weapon then
36243: LD_VAR 0 18
36247: NOT
36248: IFFALSE 36308
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36250: LD_ADDR_VAR 0 5
36254: PUSH
36255: LD_VAR 0 5
36259: PUSH
36260: LD_INT 11
36262: PUSH
36263: LD_INT 30
36265: PUSH
36266: LD_INT 49
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: DIFF
36274: ST_TO_ADDR
// if not list then
36275: LD_VAR 0 5
36279: NOT
36280: IFFALSE 36284
// exit ;
36282: GO 36426
// weapon := list [ rand ( 1 , list ) ] ;
36284: LD_ADDR_VAR 0 18
36288: PUSH
36289: LD_VAR 0 5
36293: PUSH
36294: LD_INT 1
36296: PPUSH
36297: LD_VAR 0 5
36301: PPUSH
36302: CALL_OW 12
36306: ARRAY
36307: ST_TO_ADDR
// end ; if weapon then
36308: LD_VAR 0 18
36312: IFFALSE 36426
// begin tmp := CostOfWeapon ( weapon ) ;
36314: LD_ADDR_VAR 0 14
36318: PUSH
36319: LD_VAR 0 18
36323: PPUSH
36324: CALL_OW 451
36328: ST_TO_ADDR
// j := GetBase ( tower ) ;
36329: LD_ADDR_VAR 0 9
36333: PUSH
36334: LD_VAR 0 1
36338: PPUSH
36339: CALL_OW 274
36343: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36344: LD_VAR 0 9
36348: PPUSH
36349: LD_INT 1
36351: PPUSH
36352: CALL_OW 275
36356: PUSH
36357: LD_VAR 0 14
36361: PUSH
36362: LD_INT 1
36364: ARRAY
36365: GREATEREQUAL
36366: PUSH
36367: LD_VAR 0 9
36371: PPUSH
36372: LD_INT 2
36374: PPUSH
36375: CALL_OW 275
36379: PUSH
36380: LD_VAR 0 14
36384: PUSH
36385: LD_INT 2
36387: ARRAY
36388: GREATEREQUAL
36389: AND
36390: PUSH
36391: LD_VAR 0 9
36395: PPUSH
36396: LD_INT 3
36398: PPUSH
36399: CALL_OW 275
36403: PUSH
36404: LD_VAR 0 14
36408: PUSH
36409: LD_INT 3
36411: ARRAY
36412: GREATEREQUAL
36413: AND
36414: IFFALSE 36426
// result := weapon ;
36416: LD_ADDR_VAR 0 3
36420: PUSH
36421: LD_VAR 0 18
36425: ST_TO_ADDR
// end ; end ;
36426: LD_VAR 0 3
36430: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36431: LD_INT 0
36433: PPUSH
36434: PPUSH
// result := true ;
36435: LD_ADDR_VAR 0 3
36439: PUSH
36440: LD_INT 1
36442: ST_TO_ADDR
// if array1 = array2 then
36443: LD_VAR 0 1
36447: PUSH
36448: LD_VAR 0 2
36452: EQUAL
36453: IFFALSE 36513
// begin for i = 1 to array1 do
36455: LD_ADDR_VAR 0 4
36459: PUSH
36460: DOUBLE
36461: LD_INT 1
36463: DEC
36464: ST_TO_ADDR
36465: LD_VAR 0 1
36469: PUSH
36470: FOR_TO
36471: IFFALSE 36509
// if array1 [ i ] <> array2 [ i ] then
36473: LD_VAR 0 1
36477: PUSH
36478: LD_VAR 0 4
36482: ARRAY
36483: PUSH
36484: LD_VAR 0 2
36488: PUSH
36489: LD_VAR 0 4
36493: ARRAY
36494: NONEQUAL
36495: IFFALSE 36507
// begin result := false ;
36497: LD_ADDR_VAR 0 3
36501: PUSH
36502: LD_INT 0
36504: ST_TO_ADDR
// break ;
36505: GO 36509
// end ;
36507: GO 36470
36509: POP
36510: POP
// end else
36511: GO 36521
// result := false ;
36513: LD_ADDR_VAR 0 3
36517: PUSH
36518: LD_INT 0
36520: ST_TO_ADDR
// end ;
36521: LD_VAR 0 3
36525: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36526: LD_INT 0
36528: PPUSH
36529: PPUSH
// if not array1 or not array2 then
36530: LD_VAR 0 1
36534: NOT
36535: PUSH
36536: LD_VAR 0 2
36540: NOT
36541: OR
36542: IFFALSE 36546
// exit ;
36544: GO 36610
// result := true ;
36546: LD_ADDR_VAR 0 3
36550: PUSH
36551: LD_INT 1
36553: ST_TO_ADDR
// for i = 1 to array1 do
36554: LD_ADDR_VAR 0 4
36558: PUSH
36559: DOUBLE
36560: LD_INT 1
36562: DEC
36563: ST_TO_ADDR
36564: LD_VAR 0 1
36568: PUSH
36569: FOR_TO
36570: IFFALSE 36608
// if array1 [ i ] <> array2 [ i ] then
36572: LD_VAR 0 1
36576: PUSH
36577: LD_VAR 0 4
36581: ARRAY
36582: PUSH
36583: LD_VAR 0 2
36587: PUSH
36588: LD_VAR 0 4
36592: ARRAY
36593: NONEQUAL
36594: IFFALSE 36606
// begin result := false ;
36596: LD_ADDR_VAR 0 3
36600: PUSH
36601: LD_INT 0
36603: ST_TO_ADDR
// break ;
36604: GO 36608
// end ;
36606: GO 36569
36608: POP
36609: POP
// end ;
36610: LD_VAR 0 3
36614: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36615: LD_INT 0
36617: PPUSH
36618: PPUSH
36619: PPUSH
// pom := GetBase ( fac ) ;
36620: LD_ADDR_VAR 0 5
36624: PUSH
36625: LD_VAR 0 1
36629: PPUSH
36630: CALL_OW 274
36634: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36635: LD_ADDR_VAR 0 4
36639: PUSH
36640: LD_VAR 0 2
36644: PUSH
36645: LD_INT 1
36647: ARRAY
36648: PPUSH
36649: LD_VAR 0 2
36653: PUSH
36654: LD_INT 2
36656: ARRAY
36657: PPUSH
36658: LD_VAR 0 2
36662: PUSH
36663: LD_INT 3
36665: ARRAY
36666: PPUSH
36667: LD_VAR 0 2
36671: PUSH
36672: LD_INT 4
36674: ARRAY
36675: PPUSH
36676: CALL_OW 449
36680: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36681: LD_ADDR_VAR 0 3
36685: PUSH
36686: LD_VAR 0 5
36690: PPUSH
36691: LD_INT 1
36693: PPUSH
36694: CALL_OW 275
36698: PUSH
36699: LD_VAR 0 4
36703: PUSH
36704: LD_INT 1
36706: ARRAY
36707: GREATEREQUAL
36708: PUSH
36709: LD_VAR 0 5
36713: PPUSH
36714: LD_INT 2
36716: PPUSH
36717: CALL_OW 275
36721: PUSH
36722: LD_VAR 0 4
36726: PUSH
36727: LD_INT 2
36729: ARRAY
36730: GREATEREQUAL
36731: AND
36732: PUSH
36733: LD_VAR 0 5
36737: PPUSH
36738: LD_INT 3
36740: PPUSH
36741: CALL_OW 275
36745: PUSH
36746: LD_VAR 0 4
36750: PUSH
36751: LD_INT 3
36753: ARRAY
36754: GREATEREQUAL
36755: AND
36756: ST_TO_ADDR
// end ;
36757: LD_VAR 0 3
36761: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36762: LD_INT 0
36764: PPUSH
36765: PPUSH
36766: PPUSH
36767: PPUSH
// pom := GetBase ( building ) ;
36768: LD_ADDR_VAR 0 3
36772: PUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: CALL_OW 274
36782: ST_TO_ADDR
// if not pom then
36783: LD_VAR 0 3
36787: NOT
36788: IFFALSE 36792
// exit ;
36790: GO 36962
// btype := GetBType ( building ) ;
36792: LD_ADDR_VAR 0 5
36796: PUSH
36797: LD_VAR 0 1
36801: PPUSH
36802: CALL_OW 266
36806: ST_TO_ADDR
// if btype = b_armoury then
36807: LD_VAR 0 5
36811: PUSH
36812: LD_INT 4
36814: EQUAL
36815: IFFALSE 36825
// btype := b_barracks ;
36817: LD_ADDR_VAR 0 5
36821: PUSH
36822: LD_INT 5
36824: ST_TO_ADDR
// if btype = b_depot then
36825: LD_VAR 0 5
36829: PUSH
36830: LD_INT 0
36832: EQUAL
36833: IFFALSE 36843
// btype := b_warehouse ;
36835: LD_ADDR_VAR 0 5
36839: PUSH
36840: LD_INT 1
36842: ST_TO_ADDR
// if btype = b_workshop then
36843: LD_VAR 0 5
36847: PUSH
36848: LD_INT 2
36850: EQUAL
36851: IFFALSE 36861
// btype := b_factory ;
36853: LD_ADDR_VAR 0 5
36857: PUSH
36858: LD_INT 3
36860: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36861: LD_ADDR_VAR 0 4
36865: PUSH
36866: LD_VAR 0 5
36870: PPUSH
36871: LD_VAR 0 1
36875: PPUSH
36876: CALL_OW 248
36880: PPUSH
36881: CALL_OW 450
36885: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36886: LD_ADDR_VAR 0 2
36890: PUSH
36891: LD_VAR 0 3
36895: PPUSH
36896: LD_INT 1
36898: PPUSH
36899: CALL_OW 275
36903: PUSH
36904: LD_VAR 0 4
36908: PUSH
36909: LD_INT 1
36911: ARRAY
36912: GREATEREQUAL
36913: PUSH
36914: LD_VAR 0 3
36918: PPUSH
36919: LD_INT 2
36921: PPUSH
36922: CALL_OW 275
36926: PUSH
36927: LD_VAR 0 4
36931: PUSH
36932: LD_INT 2
36934: ARRAY
36935: GREATEREQUAL
36936: AND
36937: PUSH
36938: LD_VAR 0 3
36942: PPUSH
36943: LD_INT 3
36945: PPUSH
36946: CALL_OW 275
36950: PUSH
36951: LD_VAR 0 4
36955: PUSH
36956: LD_INT 3
36958: ARRAY
36959: GREATEREQUAL
36960: AND
36961: ST_TO_ADDR
// end ;
36962: LD_VAR 0 2
36966: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36967: LD_INT 0
36969: PPUSH
36970: PPUSH
36971: PPUSH
// pom := GetBase ( building ) ;
36972: LD_ADDR_VAR 0 4
36976: PUSH
36977: LD_VAR 0 1
36981: PPUSH
36982: CALL_OW 274
36986: ST_TO_ADDR
// if not pom then
36987: LD_VAR 0 4
36991: NOT
36992: IFFALSE 36996
// exit ;
36994: GO 37097
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36996: LD_ADDR_VAR 0 5
37000: PUSH
37001: LD_VAR 0 2
37005: PPUSH
37006: LD_VAR 0 1
37010: PPUSH
37011: CALL_OW 248
37015: PPUSH
37016: CALL_OW 450
37020: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37021: LD_ADDR_VAR 0 3
37025: PUSH
37026: LD_VAR 0 4
37030: PPUSH
37031: LD_INT 1
37033: PPUSH
37034: CALL_OW 275
37038: PUSH
37039: LD_VAR 0 5
37043: PUSH
37044: LD_INT 1
37046: ARRAY
37047: GREATEREQUAL
37048: PUSH
37049: LD_VAR 0 4
37053: PPUSH
37054: LD_INT 2
37056: PPUSH
37057: CALL_OW 275
37061: PUSH
37062: LD_VAR 0 5
37066: PUSH
37067: LD_INT 2
37069: ARRAY
37070: GREATEREQUAL
37071: AND
37072: PUSH
37073: LD_VAR 0 4
37077: PPUSH
37078: LD_INT 3
37080: PPUSH
37081: CALL_OW 275
37085: PUSH
37086: LD_VAR 0 5
37090: PUSH
37091: LD_INT 3
37093: ARRAY
37094: GREATEREQUAL
37095: AND
37096: ST_TO_ADDR
// end ;
37097: LD_VAR 0 3
37101: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37102: LD_INT 0
37104: PPUSH
37105: PPUSH
37106: PPUSH
37107: PPUSH
37108: PPUSH
37109: PPUSH
37110: PPUSH
37111: PPUSH
37112: PPUSH
37113: PPUSH
37114: PPUSH
// result := false ;
37115: LD_ADDR_VAR 0 8
37119: PUSH
37120: LD_INT 0
37122: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37123: LD_VAR 0 5
37127: NOT
37128: PUSH
37129: LD_VAR 0 1
37133: NOT
37134: OR
37135: PUSH
37136: LD_VAR 0 2
37140: NOT
37141: OR
37142: PUSH
37143: LD_VAR 0 3
37147: NOT
37148: OR
37149: IFFALSE 37153
// exit ;
37151: GO 37967
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37153: LD_ADDR_VAR 0 14
37157: PUSH
37158: LD_VAR 0 1
37162: PPUSH
37163: LD_VAR 0 2
37167: PPUSH
37168: LD_VAR 0 3
37172: PPUSH
37173: LD_VAR 0 4
37177: PPUSH
37178: LD_VAR 0 5
37182: PUSH
37183: LD_INT 1
37185: ARRAY
37186: PPUSH
37187: CALL_OW 248
37191: PPUSH
37192: LD_INT 0
37194: PPUSH
37195: CALL 39204 0 6
37199: ST_TO_ADDR
// if not hexes then
37200: LD_VAR 0 14
37204: NOT
37205: IFFALSE 37209
// exit ;
37207: GO 37967
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37209: LD_ADDR_VAR 0 17
37213: PUSH
37214: LD_VAR 0 5
37218: PPUSH
37219: LD_INT 22
37221: PUSH
37222: LD_VAR 0 13
37226: PPUSH
37227: CALL_OW 255
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: LD_INT 30
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 30
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PPUSH
37268: CALL_OW 72
37272: ST_TO_ADDR
// for i = 1 to hexes do
37273: LD_ADDR_VAR 0 9
37277: PUSH
37278: DOUBLE
37279: LD_INT 1
37281: DEC
37282: ST_TO_ADDR
37283: LD_VAR 0 14
37287: PUSH
37288: FOR_TO
37289: IFFALSE 37965
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37291: LD_ADDR_VAR 0 13
37295: PUSH
37296: LD_VAR 0 14
37300: PUSH
37301: LD_VAR 0 9
37305: ARRAY
37306: PUSH
37307: LD_INT 1
37309: ARRAY
37310: PPUSH
37311: LD_VAR 0 14
37315: PUSH
37316: LD_VAR 0 9
37320: ARRAY
37321: PUSH
37322: LD_INT 2
37324: ARRAY
37325: PPUSH
37326: CALL_OW 428
37330: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37331: LD_VAR 0 14
37335: PUSH
37336: LD_VAR 0 9
37340: ARRAY
37341: PUSH
37342: LD_INT 1
37344: ARRAY
37345: PPUSH
37346: LD_VAR 0 14
37350: PUSH
37351: LD_VAR 0 9
37355: ARRAY
37356: PUSH
37357: LD_INT 2
37359: ARRAY
37360: PPUSH
37361: CALL_OW 351
37365: PUSH
37366: LD_VAR 0 14
37370: PUSH
37371: LD_VAR 0 9
37375: ARRAY
37376: PUSH
37377: LD_INT 1
37379: ARRAY
37380: PPUSH
37381: LD_VAR 0 14
37385: PUSH
37386: LD_VAR 0 9
37390: ARRAY
37391: PUSH
37392: LD_INT 2
37394: ARRAY
37395: PPUSH
37396: CALL_OW 488
37400: NOT
37401: OR
37402: PUSH
37403: LD_VAR 0 13
37407: PPUSH
37408: CALL_OW 247
37412: PUSH
37413: LD_INT 3
37415: EQUAL
37416: OR
37417: IFFALSE 37423
// exit ;
37419: POP
37420: POP
37421: GO 37967
// if not tmp then
37423: LD_VAR 0 13
37427: NOT
37428: IFFALSE 37432
// continue ;
37430: GO 37288
// result := true ;
37432: LD_ADDR_VAR 0 8
37436: PUSH
37437: LD_INT 1
37439: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37440: LD_VAR 0 6
37444: PUSH
37445: LD_VAR 0 13
37449: PPUSH
37450: CALL_OW 247
37454: PUSH
37455: LD_INT 2
37457: EQUAL
37458: AND
37459: PUSH
37460: LD_VAR 0 13
37464: PPUSH
37465: CALL_OW 263
37469: PUSH
37470: LD_INT 1
37472: EQUAL
37473: AND
37474: IFFALSE 37638
// begin if IsDrivenBy ( tmp ) then
37476: LD_VAR 0 13
37480: PPUSH
37481: CALL_OW 311
37485: IFFALSE 37489
// continue ;
37487: GO 37288
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37489: LD_VAR 0 6
37493: PPUSH
37494: LD_INT 3
37496: PUSH
37497: LD_INT 60
37499: PUSH
37500: EMPTY
37501: LIST
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 3
37509: PUSH
37510: LD_INT 55
37512: PUSH
37513: EMPTY
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PPUSH
37524: CALL_OW 72
37528: IFFALSE 37636
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37530: LD_ADDR_VAR 0 18
37534: PUSH
37535: LD_VAR 0 6
37539: PPUSH
37540: LD_INT 3
37542: PUSH
37543: LD_INT 60
37545: PUSH
37546: EMPTY
37547: LIST
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 3
37555: PUSH
37556: LD_INT 55
37558: PUSH
37559: EMPTY
37560: LIST
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PPUSH
37570: CALL_OW 72
37574: PUSH
37575: LD_INT 1
37577: ARRAY
37578: ST_TO_ADDR
// if IsInUnit ( driver ) then
37579: LD_VAR 0 18
37583: PPUSH
37584: CALL_OW 310
37588: IFFALSE 37599
// ComExit ( driver ) ;
37590: LD_VAR 0 18
37594: PPUSH
37595: CALL 62388 0 1
// AddComEnterUnit ( driver , tmp ) ;
37599: LD_VAR 0 18
37603: PPUSH
37604: LD_VAR 0 13
37608: PPUSH
37609: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37613: LD_VAR 0 18
37617: PPUSH
37618: LD_VAR 0 7
37622: PPUSH
37623: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37627: LD_VAR 0 18
37631: PPUSH
37632: CALL_OW 181
// end ; continue ;
37636: GO 37288
// end ; if not cleaners or not tmp in cleaners then
37638: LD_VAR 0 6
37642: NOT
37643: PUSH
37644: LD_VAR 0 13
37648: PUSH
37649: LD_VAR 0 6
37653: IN
37654: NOT
37655: OR
37656: IFFALSE 37963
// begin if dep then
37658: LD_VAR 0 17
37662: IFFALSE 37798
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37664: LD_ADDR_VAR 0 16
37668: PUSH
37669: LD_VAR 0 17
37673: PUSH
37674: LD_INT 1
37676: ARRAY
37677: PPUSH
37678: CALL_OW 250
37682: PPUSH
37683: LD_VAR 0 17
37687: PUSH
37688: LD_INT 1
37690: ARRAY
37691: PPUSH
37692: CALL_OW 254
37696: PPUSH
37697: LD_INT 5
37699: PPUSH
37700: CALL_OW 272
37704: PUSH
37705: LD_VAR 0 17
37709: PUSH
37710: LD_INT 1
37712: ARRAY
37713: PPUSH
37714: CALL_OW 251
37718: PPUSH
37719: LD_VAR 0 17
37723: PUSH
37724: LD_INT 1
37726: ARRAY
37727: PPUSH
37728: CALL_OW 254
37732: PPUSH
37733: LD_INT 5
37735: PPUSH
37736: CALL_OW 273
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37745: LD_VAR 0 16
37749: PUSH
37750: LD_INT 1
37752: ARRAY
37753: PPUSH
37754: LD_VAR 0 16
37758: PUSH
37759: LD_INT 2
37761: ARRAY
37762: PPUSH
37763: CALL_OW 488
37767: IFFALSE 37798
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37769: LD_VAR 0 13
37773: PPUSH
37774: LD_VAR 0 16
37778: PUSH
37779: LD_INT 1
37781: ARRAY
37782: PPUSH
37783: LD_VAR 0 16
37787: PUSH
37788: LD_INT 2
37790: ARRAY
37791: PPUSH
37792: CALL_OW 111
// continue ;
37796: GO 37288
// end ; end ; r := GetDir ( tmp ) ;
37798: LD_ADDR_VAR 0 15
37802: PUSH
37803: LD_VAR 0 13
37807: PPUSH
37808: CALL_OW 254
37812: ST_TO_ADDR
// if r = 5 then
37813: LD_VAR 0 15
37817: PUSH
37818: LD_INT 5
37820: EQUAL
37821: IFFALSE 37831
// r := 0 ;
37823: LD_ADDR_VAR 0 15
37827: PUSH
37828: LD_INT 0
37830: ST_TO_ADDR
// for j = r to 5 do
37831: LD_ADDR_VAR 0 10
37835: PUSH
37836: DOUBLE
37837: LD_VAR 0 15
37841: DEC
37842: ST_TO_ADDR
37843: LD_INT 5
37845: PUSH
37846: FOR_TO
37847: IFFALSE 37961
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37849: LD_ADDR_VAR 0 11
37853: PUSH
37854: LD_VAR 0 13
37858: PPUSH
37859: CALL_OW 250
37863: PPUSH
37864: LD_VAR 0 10
37868: PPUSH
37869: LD_INT 2
37871: PPUSH
37872: CALL_OW 272
37876: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37877: LD_ADDR_VAR 0 12
37881: PUSH
37882: LD_VAR 0 13
37886: PPUSH
37887: CALL_OW 251
37891: PPUSH
37892: LD_VAR 0 10
37896: PPUSH
37897: LD_INT 2
37899: PPUSH
37900: CALL_OW 273
37904: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37905: LD_VAR 0 11
37909: PPUSH
37910: LD_VAR 0 12
37914: PPUSH
37915: CALL_OW 488
37919: PUSH
37920: LD_VAR 0 11
37924: PPUSH
37925: LD_VAR 0 12
37929: PPUSH
37930: CALL_OW 428
37934: NOT
37935: AND
37936: IFFALSE 37959
// begin ComMoveXY ( tmp , _x , _y ) ;
37938: LD_VAR 0 13
37942: PPUSH
37943: LD_VAR 0 11
37947: PPUSH
37948: LD_VAR 0 12
37952: PPUSH
37953: CALL_OW 111
// break ;
37957: GO 37961
// end ; end ;
37959: GO 37846
37961: POP
37962: POP
// end ; end ;
37963: GO 37288
37965: POP
37966: POP
// end ;
37967: LD_VAR 0 8
37971: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37972: LD_INT 0
37974: PPUSH
// result := true ;
37975: LD_ADDR_VAR 0 3
37979: PUSH
37980: LD_INT 1
37982: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37983: LD_VAR 0 2
37987: PUSH
37988: LD_INT 24
37990: DOUBLE
37991: EQUAL
37992: IFTRUE 38002
37994: LD_INT 33
37996: DOUBLE
37997: EQUAL
37998: IFTRUE 38002
38000: GO 38027
38002: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38003: LD_ADDR_VAR 0 3
38007: PUSH
38008: LD_INT 32
38010: PPUSH
38011: LD_VAR 0 1
38015: PPUSH
38016: CALL_OW 321
38020: PUSH
38021: LD_INT 2
38023: EQUAL
38024: ST_TO_ADDR
38025: GO 38347
38027: LD_INT 20
38029: DOUBLE
38030: EQUAL
38031: IFTRUE 38035
38033: GO 38060
38035: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38036: LD_ADDR_VAR 0 3
38040: PUSH
38041: LD_INT 6
38043: PPUSH
38044: LD_VAR 0 1
38048: PPUSH
38049: CALL_OW 321
38053: PUSH
38054: LD_INT 2
38056: EQUAL
38057: ST_TO_ADDR
38058: GO 38347
38060: LD_INT 22
38062: DOUBLE
38063: EQUAL
38064: IFTRUE 38074
38066: LD_INT 36
38068: DOUBLE
38069: EQUAL
38070: IFTRUE 38074
38072: GO 38099
38074: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38075: LD_ADDR_VAR 0 3
38079: PUSH
38080: LD_INT 15
38082: PPUSH
38083: LD_VAR 0 1
38087: PPUSH
38088: CALL_OW 321
38092: PUSH
38093: LD_INT 2
38095: EQUAL
38096: ST_TO_ADDR
38097: GO 38347
38099: LD_INT 30
38101: DOUBLE
38102: EQUAL
38103: IFTRUE 38107
38105: GO 38132
38107: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38108: LD_ADDR_VAR 0 3
38112: PUSH
38113: LD_INT 20
38115: PPUSH
38116: LD_VAR 0 1
38120: PPUSH
38121: CALL_OW 321
38125: PUSH
38126: LD_INT 2
38128: EQUAL
38129: ST_TO_ADDR
38130: GO 38347
38132: LD_INT 28
38134: DOUBLE
38135: EQUAL
38136: IFTRUE 38146
38138: LD_INT 21
38140: DOUBLE
38141: EQUAL
38142: IFTRUE 38146
38144: GO 38171
38146: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38147: LD_ADDR_VAR 0 3
38151: PUSH
38152: LD_INT 21
38154: PPUSH
38155: LD_VAR 0 1
38159: PPUSH
38160: CALL_OW 321
38164: PUSH
38165: LD_INT 2
38167: EQUAL
38168: ST_TO_ADDR
38169: GO 38347
38171: LD_INT 16
38173: DOUBLE
38174: EQUAL
38175: IFTRUE 38179
38177: GO 38206
38179: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38180: LD_ADDR_VAR 0 3
38184: PUSH
38185: LD_EXP 71
38189: PPUSH
38190: LD_VAR 0 1
38194: PPUSH
38195: CALL_OW 321
38199: PUSH
38200: LD_INT 2
38202: EQUAL
38203: ST_TO_ADDR
38204: GO 38347
38206: LD_INT 19
38208: DOUBLE
38209: EQUAL
38210: IFTRUE 38220
38212: LD_INT 23
38214: DOUBLE
38215: EQUAL
38216: IFTRUE 38220
38218: GO 38247
38220: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38221: LD_ADDR_VAR 0 3
38225: PUSH
38226: LD_EXP 70
38230: PPUSH
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL_OW 321
38240: PUSH
38241: LD_INT 2
38243: EQUAL
38244: ST_TO_ADDR
38245: GO 38347
38247: LD_INT 17
38249: DOUBLE
38250: EQUAL
38251: IFTRUE 38255
38253: GO 38280
38255: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38256: LD_ADDR_VAR 0 3
38260: PUSH
38261: LD_INT 39
38263: PPUSH
38264: LD_VAR 0 1
38268: PPUSH
38269: CALL_OW 321
38273: PUSH
38274: LD_INT 2
38276: EQUAL
38277: ST_TO_ADDR
38278: GO 38347
38280: LD_INT 18
38282: DOUBLE
38283: EQUAL
38284: IFTRUE 38288
38286: GO 38313
38288: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38289: LD_ADDR_VAR 0 3
38293: PUSH
38294: LD_INT 40
38296: PPUSH
38297: LD_VAR 0 1
38301: PPUSH
38302: CALL_OW 321
38306: PUSH
38307: LD_INT 2
38309: EQUAL
38310: ST_TO_ADDR
38311: GO 38347
38313: LD_INT 27
38315: DOUBLE
38316: EQUAL
38317: IFTRUE 38321
38319: GO 38346
38321: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38322: LD_ADDR_VAR 0 3
38326: PUSH
38327: LD_INT 35
38329: PPUSH
38330: LD_VAR 0 1
38334: PPUSH
38335: CALL_OW 321
38339: PUSH
38340: LD_INT 2
38342: EQUAL
38343: ST_TO_ADDR
38344: GO 38347
38346: POP
// end ;
38347: LD_VAR 0 3
38351: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38352: LD_INT 0
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
38360: PPUSH
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
// result := false ;
38365: LD_ADDR_VAR 0 6
38369: PUSH
38370: LD_INT 0
38372: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38373: LD_VAR 0 1
38377: NOT
38378: PUSH
38379: LD_VAR 0 1
38383: PPUSH
38384: CALL_OW 266
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: IN
38399: NOT
38400: OR
38401: PUSH
38402: LD_VAR 0 2
38406: NOT
38407: OR
38408: PUSH
38409: LD_VAR 0 5
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: LD_INT 4
38428: PUSH
38429: LD_INT 5
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: IN
38440: NOT
38441: OR
38442: PUSH
38443: LD_VAR 0 3
38447: PPUSH
38448: LD_VAR 0 4
38452: PPUSH
38453: CALL_OW 488
38457: NOT
38458: OR
38459: IFFALSE 38463
// exit ;
38461: GO 39199
// side := GetSide ( depot ) ;
38463: LD_ADDR_VAR 0 9
38467: PUSH
38468: LD_VAR 0 1
38472: PPUSH
38473: CALL_OW 255
38477: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38478: LD_VAR 0 9
38482: PPUSH
38483: LD_VAR 0 2
38487: PPUSH
38488: CALL 37972 0 2
38492: NOT
38493: IFFALSE 38497
// exit ;
38495: GO 39199
// pom := GetBase ( depot ) ;
38497: LD_ADDR_VAR 0 10
38501: PUSH
38502: LD_VAR 0 1
38506: PPUSH
38507: CALL_OW 274
38511: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38512: LD_ADDR_VAR 0 11
38516: PUSH
38517: LD_VAR 0 2
38521: PPUSH
38522: LD_VAR 0 1
38526: PPUSH
38527: CALL_OW 248
38531: PPUSH
38532: CALL_OW 450
38536: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38537: LD_VAR 0 10
38541: PPUSH
38542: LD_INT 1
38544: PPUSH
38545: CALL_OW 275
38549: PUSH
38550: LD_VAR 0 11
38554: PUSH
38555: LD_INT 1
38557: ARRAY
38558: GREATEREQUAL
38559: PUSH
38560: LD_VAR 0 10
38564: PPUSH
38565: LD_INT 2
38567: PPUSH
38568: CALL_OW 275
38572: PUSH
38573: LD_VAR 0 11
38577: PUSH
38578: LD_INT 2
38580: ARRAY
38581: GREATEREQUAL
38582: AND
38583: PUSH
38584: LD_VAR 0 10
38588: PPUSH
38589: LD_INT 3
38591: PPUSH
38592: CALL_OW 275
38596: PUSH
38597: LD_VAR 0 11
38601: PUSH
38602: LD_INT 3
38604: ARRAY
38605: GREATEREQUAL
38606: AND
38607: NOT
38608: IFFALSE 38612
// exit ;
38610: GO 39199
// if GetBType ( depot ) = b_depot then
38612: LD_VAR 0 1
38616: PPUSH
38617: CALL_OW 266
38621: PUSH
38622: LD_INT 0
38624: EQUAL
38625: IFFALSE 38637
// dist := 28 else
38627: LD_ADDR_VAR 0 14
38631: PUSH
38632: LD_INT 28
38634: ST_TO_ADDR
38635: GO 38645
// dist := 36 ;
38637: LD_ADDR_VAR 0 14
38641: PUSH
38642: LD_INT 36
38644: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38645: LD_VAR 0 1
38649: PPUSH
38650: LD_VAR 0 3
38654: PPUSH
38655: LD_VAR 0 4
38659: PPUSH
38660: CALL_OW 297
38664: PUSH
38665: LD_VAR 0 14
38669: GREATER
38670: IFFALSE 38674
// exit ;
38672: GO 39199
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38674: LD_ADDR_VAR 0 12
38678: PUSH
38679: LD_VAR 0 2
38683: PPUSH
38684: LD_VAR 0 3
38688: PPUSH
38689: LD_VAR 0 4
38693: PPUSH
38694: LD_VAR 0 5
38698: PPUSH
38699: LD_VAR 0 1
38703: PPUSH
38704: CALL_OW 248
38708: PPUSH
38709: LD_INT 0
38711: PPUSH
38712: CALL 39204 0 6
38716: ST_TO_ADDR
// if not hexes then
38717: LD_VAR 0 12
38721: NOT
38722: IFFALSE 38726
// exit ;
38724: GO 39199
// hex := GetHexInfo ( x , y ) ;
38726: LD_ADDR_VAR 0 15
38730: PUSH
38731: LD_VAR 0 3
38735: PPUSH
38736: LD_VAR 0 4
38740: PPUSH
38741: CALL_OW 546
38745: ST_TO_ADDR
// if hex [ 1 ] then
38746: LD_VAR 0 15
38750: PUSH
38751: LD_INT 1
38753: ARRAY
38754: IFFALSE 38758
// exit ;
38756: GO 39199
// height := hex [ 2 ] ;
38758: LD_ADDR_VAR 0 13
38762: PUSH
38763: LD_VAR 0 15
38767: PUSH
38768: LD_INT 2
38770: ARRAY
38771: ST_TO_ADDR
// for i = 1 to hexes do
38772: LD_ADDR_VAR 0 7
38776: PUSH
38777: DOUBLE
38778: LD_INT 1
38780: DEC
38781: ST_TO_ADDR
38782: LD_VAR 0 12
38786: PUSH
38787: FOR_TO
38788: IFFALSE 39118
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38790: LD_VAR 0 12
38794: PUSH
38795: LD_VAR 0 7
38799: ARRAY
38800: PUSH
38801: LD_INT 1
38803: ARRAY
38804: PPUSH
38805: LD_VAR 0 12
38809: PUSH
38810: LD_VAR 0 7
38814: ARRAY
38815: PUSH
38816: LD_INT 2
38818: ARRAY
38819: PPUSH
38820: CALL_OW 488
38824: NOT
38825: PUSH
38826: LD_VAR 0 12
38830: PUSH
38831: LD_VAR 0 7
38835: ARRAY
38836: PUSH
38837: LD_INT 1
38839: ARRAY
38840: PPUSH
38841: LD_VAR 0 12
38845: PUSH
38846: LD_VAR 0 7
38850: ARRAY
38851: PUSH
38852: LD_INT 2
38854: ARRAY
38855: PPUSH
38856: CALL_OW 428
38860: PUSH
38861: LD_INT 0
38863: GREATER
38864: OR
38865: PUSH
38866: LD_VAR 0 12
38870: PUSH
38871: LD_VAR 0 7
38875: ARRAY
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: PPUSH
38881: LD_VAR 0 12
38885: PUSH
38886: LD_VAR 0 7
38890: ARRAY
38891: PUSH
38892: LD_INT 2
38894: ARRAY
38895: PPUSH
38896: CALL_OW 351
38900: OR
38901: IFFALSE 38907
// exit ;
38903: POP
38904: POP
38905: GO 39199
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38907: LD_ADDR_VAR 0 8
38911: PUSH
38912: LD_VAR 0 12
38916: PUSH
38917: LD_VAR 0 7
38921: ARRAY
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PPUSH
38927: LD_VAR 0 12
38931: PUSH
38932: LD_VAR 0 7
38936: ARRAY
38937: PUSH
38938: LD_INT 2
38940: ARRAY
38941: PPUSH
38942: CALL_OW 546
38946: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38947: LD_VAR 0 8
38951: PUSH
38952: LD_INT 1
38954: ARRAY
38955: PUSH
38956: LD_VAR 0 8
38960: PUSH
38961: LD_INT 2
38963: ARRAY
38964: PUSH
38965: LD_VAR 0 13
38969: PUSH
38970: LD_INT 2
38972: PLUS
38973: GREATER
38974: OR
38975: PUSH
38976: LD_VAR 0 8
38980: PUSH
38981: LD_INT 2
38983: ARRAY
38984: PUSH
38985: LD_VAR 0 13
38989: PUSH
38990: LD_INT 2
38992: MINUS
38993: LESS
38994: OR
38995: PUSH
38996: LD_VAR 0 8
39000: PUSH
39001: LD_INT 3
39003: ARRAY
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 8
39010: PUSH
39011: LD_INT 9
39013: PUSH
39014: LD_INT 10
39016: PUSH
39017: LD_INT 11
39019: PUSH
39020: LD_INT 12
39022: PUSH
39023: LD_INT 13
39025: PUSH
39026: LD_INT 16
39028: PUSH
39029: LD_INT 17
39031: PUSH
39032: LD_INT 18
39034: PUSH
39035: LD_INT 19
39037: PUSH
39038: LD_INT 20
39040: PUSH
39041: LD_INT 21
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: IN
39059: NOT
39060: OR
39061: PUSH
39062: LD_VAR 0 8
39066: PUSH
39067: LD_INT 5
39069: ARRAY
39070: NOT
39071: OR
39072: PUSH
39073: LD_VAR 0 8
39077: PUSH
39078: LD_INT 6
39080: ARRAY
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: LD_INT 7
39090: PUSH
39091: LD_INT 9
39093: PUSH
39094: LD_INT 10
39096: PUSH
39097: LD_INT 11
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: IN
39108: NOT
39109: OR
39110: IFFALSE 39116
// exit ;
39112: POP
39113: POP
39114: GO 39199
// end ;
39116: GO 38787
39118: POP
39119: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39120: LD_VAR 0 9
39124: PPUSH
39125: LD_VAR 0 3
39129: PPUSH
39130: LD_VAR 0 4
39134: PPUSH
39135: LD_INT 20
39137: PPUSH
39138: CALL 31145 0 4
39142: PUSH
39143: LD_INT 4
39145: ARRAY
39146: IFFALSE 39150
// exit ;
39148: GO 39199
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39150: LD_VAR 0 2
39154: PUSH
39155: LD_INT 29
39157: PUSH
39158: LD_INT 30
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: IN
39165: PUSH
39166: LD_VAR 0 3
39170: PPUSH
39171: LD_VAR 0 4
39175: PPUSH
39176: LD_VAR 0 9
39180: PPUSH
39181: CALL_OW 440
39185: NOT
39186: AND
39187: IFFALSE 39191
// exit ;
39189: GO 39199
// result := true ;
39191: LD_ADDR_VAR 0 6
39195: PUSH
39196: LD_INT 1
39198: ST_TO_ADDR
// end ;
39199: LD_VAR 0 6
39203: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39204: LD_INT 0
39206: PPUSH
39207: PPUSH
39208: PPUSH
39209: PPUSH
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
39216: PPUSH
39217: PPUSH
39218: PPUSH
39219: PPUSH
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
39228: PPUSH
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
39233: PPUSH
39234: PPUSH
39235: PPUSH
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
39240: PPUSH
39241: PPUSH
39242: PPUSH
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
39247: PPUSH
39248: PPUSH
39249: PPUSH
39250: PPUSH
39251: PPUSH
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
39256: PPUSH
39257: PPUSH
39258: PPUSH
39259: PPUSH
39260: PPUSH
39261: PPUSH
39262: PPUSH
39263: PPUSH
// result = [ ] ;
39264: LD_ADDR_VAR 0 7
39268: PUSH
39269: EMPTY
39270: ST_TO_ADDR
// temp_list = [ ] ;
39271: LD_ADDR_VAR 0 9
39275: PUSH
39276: EMPTY
39277: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39278: LD_VAR 0 4
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: LD_INT 4
39297: PUSH
39298: LD_INT 5
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: IN
39309: NOT
39310: PUSH
39311: LD_VAR 0 1
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: IN
39326: PUSH
39327: LD_VAR 0 5
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: LD_INT 3
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: IN
39346: NOT
39347: AND
39348: OR
39349: IFFALSE 39353
// exit ;
39351: GO 57744
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39353: LD_VAR 0 1
39357: PUSH
39358: LD_INT 6
39360: PUSH
39361: LD_INT 7
39363: PUSH
39364: LD_INT 8
39366: PUSH
39367: LD_INT 13
39369: PUSH
39370: LD_INT 12
39372: PUSH
39373: LD_INT 15
39375: PUSH
39376: LD_INT 11
39378: PUSH
39379: LD_INT 14
39381: PUSH
39382: LD_INT 10
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: IN
39396: IFFALSE 39406
// btype = b_lab ;
39398: LD_ADDR_VAR 0 1
39402: PUSH
39403: LD_INT 6
39405: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39406: LD_VAR 0 6
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: LIST
39424: IN
39425: NOT
39426: PUSH
39427: LD_VAR 0 1
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: LD_INT 6
39446: PUSH
39447: LD_INT 36
39449: PUSH
39450: LD_INT 4
39452: PUSH
39453: LD_INT 5
39455: PUSH
39456: LD_INT 31
39458: PUSH
39459: LD_INT 32
39461: PUSH
39462: LD_INT 33
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: IN
39478: NOT
39479: PUSH
39480: LD_VAR 0 6
39484: PUSH
39485: LD_INT 1
39487: EQUAL
39488: AND
39489: OR
39490: PUSH
39491: LD_VAR 0 1
39495: PUSH
39496: LD_INT 2
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: IN
39506: NOT
39507: PUSH
39508: LD_VAR 0 6
39512: PUSH
39513: LD_INT 2
39515: EQUAL
39516: AND
39517: OR
39518: IFFALSE 39528
// mode = 0 ;
39520: LD_ADDR_VAR 0 6
39524: PUSH
39525: LD_INT 0
39527: ST_TO_ADDR
// case mode of 0 :
39528: LD_VAR 0 6
39532: PUSH
39533: LD_INT 0
39535: DOUBLE
39536: EQUAL
39537: IFTRUE 39541
39539: GO 50994
39541: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39542: LD_ADDR_VAR 0 11
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 2
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 3
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39735: LD_ADDR_VAR 0 12
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 0
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 2
39881: NEG
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 3
39892: NEG
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 3
39903: NEG
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39931: LD_ADDR_VAR 0 13
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: LD_INT 2
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: LD_INT 3
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 3
40090: NEG
40091: PUSH
40092: LD_INT 2
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 3
40102: NEG
40103: PUSH
40104: LD_INT 3
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40130: LD_ADDR_VAR 0 14
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 3
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: LD_INT 3
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40326: LD_ADDR_VAR 0 15
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40519: LD_ADDR_VAR 0 16
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 3
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 3
40676: PUSH
40677: LD_INT 3
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40712: LD_ADDR_VAR 0 17
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 2
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: LD_INT 2
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 2
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: NEG
40912: PUSH
40913: LD_INT 2
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40942: LD_ADDR_VAR 0 18
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: LD_INT 2
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41172: LD_ADDR_VAR 0 19
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: LD_INT 2
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 2
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41402: LD_ADDR_VAR 0 20
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 2
41601: NEG
41602: PUSH
41603: LD_INT 2
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41632: LD_ADDR_VAR 0 21
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41862: LD_ADDR_VAR 0 22
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: NEG
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42092: LD_ADDR_VAR 0 23
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 2
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 3
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 3
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42372: LD_ADDR_VAR 0 24
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 3
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 3
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42648: LD_ADDR_VAR 0 25
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: LD_INT 2
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: NEG
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 3
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 3
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42922: LD_ADDR_VAR 0 26
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43198: LD_ADDR_VAR 0 27
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 3
43431: NEG
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 3
43443: NEG
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43478: LD_ADDR_VAR 0 28
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 2
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: NEG
43678: PUSH
43679: LD_INT 2
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: LD_INT 3
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 3
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 3
43713: NEG
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 3
43725: NEG
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43760: LD_ADDR_VAR 0 29
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 2
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: LD_INT 3
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 3
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 3
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 3
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44039: LD_ADDR_VAR 0 30
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: NEG
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: LD_INT 3
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 3
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: LD_INT 3
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 3
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44317: LD_ADDR_VAR 0 31
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 2
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 3
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 3
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 3
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 3
44560: NEG
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44595: LD_ADDR_VAR 0 32
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 3
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 3
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 3
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44873: LD_ADDR_VAR 0 33
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 3
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 3
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 3
45117: NEG
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45152: LD_ADDR_VAR 0 34
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: LD_INT 3
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 3
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 3
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45432: LD_ADDR_VAR 0 35
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45544: LD_ADDR_VAR 0 36
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45656: LD_ADDR_VAR 0 37
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45768: LD_ADDR_VAR 0 38
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45880: LD_ADDR_VAR 0 39
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45992: LD_ADDR_VAR 0 40
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46104: LD_ADDR_VAR 0 41
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: NEG
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: NEG
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: LD_INT 3
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 3
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 3
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: LD_INT 3
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: NEG
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 3
46378: NEG
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 3
46389: NEG
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 3
46401: NEG
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46454: LD_ADDR_VAR 0 42
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: LD_INT 3
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 3
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 3
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: LD_INT 3
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 3
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 3
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 3
46763: NEG
46764: PUSH
46765: LD_INT 3
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46804: LD_ADDR_VAR 0 43
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 3
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 3
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 3
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 3
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 3
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47152: LD_ADDR_VAR 0 44
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 3
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 3
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 3
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 3
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 3
47395: PUSH
47396: LD_INT 3
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: LD_INT 3
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: NEG
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: NEG
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: NEG
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 3
47461: NEG
47462: PUSH
47463: LD_INT 3
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47502: LD_ADDR_VAR 0 45
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 3
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 3
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 3
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 3
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 3
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 3
47811: NEG
47812: PUSH
47813: LD_INT 3
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47852: LD_ADDR_VAR 0 46
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 3
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 3
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 3
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 3
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 3
48148: NEG
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 3
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48200: LD_ADDR_VAR 0 47
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48351: LD_ADDR_VAR 0 48
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48498: LD_ADDR_VAR 0 49
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48642: LD_ADDR_VAR 0 50
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48786: LD_ADDR_VAR 0 51
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48933: LD_ADDR_VAR 0 52
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: LD_INT 2
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49084: LD_ADDR_VAR 0 53
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: LD_INT 2
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49314: LD_ADDR_VAR 0 54
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 2
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49544: LD_ADDR_VAR 0 55
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49774: LD_ADDR_VAR 0 56
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50004: LD_ADDR_VAR 0 57
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50234: LD_ADDR_VAR 0 58
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50464: LD_ADDR_VAR 0 59
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50552: LD_ADDR_VAR 0 60
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50640: LD_ADDR_VAR 0 61
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50728: LD_ADDR_VAR 0 62
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50816: LD_ADDR_VAR 0 63
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50904: LD_ADDR_VAR 0 64
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: ST_TO_ADDR
// end ; 1 :
50992: GO 56889
50994: LD_INT 1
50996: DOUBLE
50997: EQUAL
50998: IFTRUE 51002
51000: GO 53625
51002: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51003: LD_ADDR_VAR 0 11
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: LD_INT 3
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 3
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51047: LD_ADDR_VAR 0 12
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 3
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51088: LD_ADDR_VAR 0 13
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: LD_INT 3
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51128: LD_ADDR_VAR 0 14
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 3
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51169: LD_ADDR_VAR 0 15
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51213: LD_ADDR_VAR 0 16
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: LD_INT 3
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: LD_INT 3
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: LIST
51258: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51259: LD_ADDR_VAR 0 17
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 3
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 3
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51303: LD_ADDR_VAR 0 18
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 3
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51344: LD_ADDR_VAR 0 19
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 3
51361: PUSH
51362: LD_INT 3
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51384: LD_ADDR_VAR 0 20
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 3
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51425: LD_ADDR_VAR 0 21
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: NEG
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 3
51454: NEG
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: LIST
51468: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51469: LD_ADDR_VAR 0 22
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51515: LD_ADDR_VAR 0 23
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 3
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: LD_INT 4
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 3
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51559: LD_ADDR_VAR 0 24
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 4
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: LIST
51599: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51600: LD_ADDR_VAR 0 25
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: LD_INT 3
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 4
51617: PUSH
51618: LD_INT 3
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: LD_INT 4
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: LIST
51639: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51640: LD_ADDR_VAR 0 26
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 3
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 4
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51681: LD_ADDR_VAR 0 27
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 4
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51725: LD_ADDR_VAR 0 28
51729: PUSH
51730: LD_INT 3
51732: NEG
51733: PUSH
51734: LD_INT 3
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 3
51744: NEG
51745: PUSH
51746: LD_INT 4
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 4
51756: NEG
51757: PUSH
51758: LD_INT 3
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51771: LD_ADDR_VAR 0 29
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 4
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 4
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 3
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 5
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 5
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 4
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 6
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 6
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 5
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51926: LD_ADDR_VAR 0 30
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 4
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 4
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 4
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 5
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 5
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 5
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 6
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 6
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52069: LD_ADDR_VAR 0 31
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 3
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 3
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 4
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 4
52116: PUSH
52117: LD_INT 4
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: LD_INT 4
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 5
52136: PUSH
52137: LD_INT 4
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 5
52146: PUSH
52147: LD_INT 5
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 4
52156: PUSH
52157: LD_INT 5
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 6
52166: PUSH
52167: LD_INT 5
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 6
52176: PUSH
52177: LD_INT 6
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 5
52186: PUSH
52187: LD_INT 6
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52208: LD_ADDR_VAR 0 32
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 4
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 4
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 3
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 5
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 5
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 4
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 6
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 6
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 5
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52351: LD_ADDR_VAR 0 33
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 4
52403: NEG
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 4
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 4
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 5
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 5
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 5
52460: NEG
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 6
52471: NEG
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 6
52482: NEG
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52506: LD_ADDR_VAR 0 34
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: LD_INT 3
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 3
52525: NEG
52526: PUSH
52527: LD_INT 2
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 3
52537: NEG
52538: PUSH
52539: LD_INT 3
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: NEG
52550: PUSH
52551: LD_INT 4
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 4
52561: NEG
52562: PUSH
52563: LD_INT 3
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 4
52573: NEG
52574: PUSH
52575: LD_INT 4
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 4
52585: NEG
52586: PUSH
52587: LD_INT 5
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 5
52597: NEG
52598: PUSH
52599: LD_INT 4
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 5
52609: NEG
52610: PUSH
52611: LD_INT 5
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 5
52621: NEG
52622: PUSH
52623: LD_INT 6
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 6
52633: NEG
52634: PUSH
52635: LD_INT 5
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 6
52645: NEG
52646: PUSH
52647: LD_INT 6
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52669: LD_ADDR_VAR 0 41
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 3
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52713: LD_ADDR_VAR 0 42
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 3
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52754: LD_ADDR_VAR 0 43
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 3
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 3
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: LIST
52793: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52794: LD_ADDR_VAR 0 44
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: LIST
52834: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52835: LD_ADDR_VAR 0 45
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: LIST
52878: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52879: LD_ADDR_VAR 0 46
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: LD_INT 3
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 3
52910: NEG
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52925: LD_ADDR_VAR 0 47
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: LD_INT 3
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52958: LD_ADDR_VAR 0 48
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52989: LD_ADDR_VAR 0 49
52993: PUSH
52994: LD_INT 3
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 3
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53018: LD_ADDR_VAR 0 50
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: LD_INT 3
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 3
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53047: LD_ADDR_VAR 0 51
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53078: LD_ADDR_VAR 0 52
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53111: LD_ADDR_VAR 0 53
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: LD_INT 3
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 3
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: LIST
53154: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53155: LD_ADDR_VAR 0 54
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 3
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: LIST
53195: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53196: LD_ADDR_VAR 0 55
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: LIST
53235: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53236: LD_ADDR_VAR 0 56
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 3
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53277: LD_ADDR_VAR 0 57
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53321: LD_ADDR_VAR 0 58
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: LD_INT 3
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: NEG
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: LIST
53366: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53367: LD_ADDR_VAR 0 59
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: LIST
53410: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53411: LD_ADDR_VAR 0 60
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 2
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: LIST
53451: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53452: LD_ADDR_VAR 0 61
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53492: LD_ADDR_VAR 0 62
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53533: LD_ADDR_VAR 0 63
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: LIST
53576: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53577: LD_ADDR_VAR 0 64
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: LIST
53622: ST_TO_ADDR
// end ; 2 :
53623: GO 56889
53625: LD_INT 2
53627: DOUBLE
53628: EQUAL
53629: IFTRUE 53633
53631: GO 56888
53633: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53634: LD_ADDR_VAR 0 29
53638: PUSH
53639: LD_INT 4
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 4
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 5
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 5
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 4
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 5
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 4
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 4
53764: PUSH
53765: LD_INT 4
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 3
53774: PUSH
53775: LD_INT 4
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 4
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: LD_INT 4
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 4
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 4
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 5
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 5
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: LD_INT 4
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 3
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 5
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: LD_INT 3
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: NEG
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 4
53973: NEG
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 4
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 4
53996: NEG
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 4
54019: NEG
54020: PUSH
54021: LD_INT 4
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 4
54031: NEG
54032: PUSH
54033: LD_INT 5
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 3
54043: NEG
54044: PUSH
54045: LD_INT 4
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 4
54067: NEG
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 5
54079: NEG
54080: PUSH
54081: LD_INT 4
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 5
54091: NEG
54092: PUSH
54093: LD_INT 5
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 3
54103: NEG
54104: PUSH
54105: LD_INT 5
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 5
54115: NEG
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54172: LD_ADDR_VAR 0 30
54176: PUSH
54177: LD_INT 4
54179: PUSH
54180: LD_INT 4
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 4
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 5
54199: PUSH
54200: LD_INT 4
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 5
54209: PUSH
54210: LD_INT 5
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 4
54219: PUSH
54220: LD_INT 5
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 3
54229: PUSH
54230: LD_INT 4
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 3
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 5
54249: PUSH
54250: LD_INT 3
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 3
54259: PUSH
54260: LD_INT 5
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: LD_INT 3
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 4
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 4
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: LD_INT 4
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 4
54362: NEG
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 4
54373: NEG
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 4
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 5
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 5
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 5
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 3
54453: NEG
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: LD_INT 3
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: LD_INT 4
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: LD_INT 3
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: NEG
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 4
54524: NEG
54525: PUSH
54526: LD_INT 3
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 4
54536: NEG
54537: PUSH
54538: LD_INT 4
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: LD_INT 4
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 4
54560: NEG
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 4
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 5
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 4
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 3
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 5
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: LD_INT 5
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54719: LD_ADDR_VAR 0 31
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 4
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 4
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 5
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 5
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 4
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 5
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 3
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 3
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 4
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 4
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 4
54898: NEG
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 4
54921: NEG
54922: PUSH
54923: LD_INT 4
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 4
54933: NEG
54934: PUSH
54935: LD_INT 5
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: LD_INT 4
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 4
54969: NEG
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 5
54981: NEG
54982: PUSH
54983: LD_INT 4
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 5
54993: NEG
54994: PUSH
54995: LD_INT 5
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: NEG
55006: PUSH
55007: LD_INT 5
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 5
55017: NEG
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 3
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 4
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: LD_INT 3
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 4
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 4
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 4
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 4
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 5
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 5
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 4
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 5
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55269: LD_ADDR_VAR 0 32
55273: PUSH
55274: LD_INT 4
55276: NEG
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: NEG
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 4
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 5
55332: NEG
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 5
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 5
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 3
55367: NEG
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: NEG
55379: PUSH
55380: LD_INT 3
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: NEG
55391: PUSH
55392: LD_INT 4
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: LD_INT 3
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 4
55438: NEG
55439: PUSH
55440: LD_INT 3
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 4
55450: NEG
55451: PUSH
55452: LD_INT 4
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: LD_INT 4
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 4
55474: NEG
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 4
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 5
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: LD_INT 4
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 3
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 3
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 4
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 5
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 3
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 5
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 4
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 4
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 4
55681: PUSH
55682: LD_INT 4
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 4
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 5
55701: PUSH
55702: LD_INT 4
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 5
55711: PUSH
55712: LD_INT 5
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 4
55721: PUSH
55722: LD_INT 5
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: LD_INT 4
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 3
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 5
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: LD_INT 5
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55816: LD_ADDR_VAR 0 33
55820: PUSH
55821: LD_INT 4
55823: NEG
55824: PUSH
55825: LD_INT 4
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 4
55835: NEG
55836: PUSH
55837: LD_INT 5
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: LD_INT 4
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 3
55859: NEG
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 4
55871: NEG
55872: PUSH
55873: LD_INT 3
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 5
55883: NEG
55884: PUSH
55885: LD_INT 4
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 5
55895: NEG
55896: PUSH
55897: LD_INT 5
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 3
55907: NEG
55908: PUSH
55909: LD_INT 5
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 5
55919: NEG
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 4
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 3
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: LD_INT 4
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: LD_INT 4
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 4
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 4
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 5
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 5
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 4
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 3
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 5
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 3
56126: PUSH
56127: LD_INT 3
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 3
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 4
56146: PUSH
56147: LD_INT 3
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 4
56156: PUSH
56157: LD_INT 4
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: LD_INT 4
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: LD_INT 3
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 4
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 4
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 4
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 5
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 5
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 4
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 3
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: LD_INT 5
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56354: LD_ADDR_VAR 0 34
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 4
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 5
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 4
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 4
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 5
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: LD_INT 5
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 3
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 3
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 4
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 4
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 4
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 4
56556: PUSH
56557: LD_INT 4
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 4
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 5
56576: PUSH
56577: LD_INT 4
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 5
56586: PUSH
56587: LD_INT 5
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 4
56596: PUSH
56597: LD_INT 5
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: LD_INT 4
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 3
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 5
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 3
56636: PUSH
56637: LD_INT 5
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 3
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 3
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 4
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 4
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 4
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 4
56739: NEG
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 4
56750: NEG
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 3
56762: NEG
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 3
56773: NEG
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 4
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 5
56795: NEG
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 5
56806: NEG
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 5
56818: NEG
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// end ; end ;
56886: GO 56889
56888: POP
// case btype of b_depot , b_warehouse :
56889: LD_VAR 0 1
56893: PUSH
56894: LD_INT 0
56896: DOUBLE
56897: EQUAL
56898: IFTRUE 56908
56900: LD_INT 1
56902: DOUBLE
56903: EQUAL
56904: IFTRUE 56908
56906: GO 57109
56908: POP
// case nation of nation_american :
56909: LD_VAR 0 5
56913: PUSH
56914: LD_INT 1
56916: DOUBLE
56917: EQUAL
56918: IFTRUE 56922
56920: GO 56978
56922: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56923: LD_ADDR_VAR 0 9
56927: PUSH
56928: LD_VAR 0 11
56932: PUSH
56933: LD_VAR 0 12
56937: PUSH
56938: LD_VAR 0 13
56942: PUSH
56943: LD_VAR 0 14
56947: PUSH
56948: LD_VAR 0 15
56952: PUSH
56953: LD_VAR 0 16
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: PUSH
56966: LD_VAR 0 4
56970: PUSH
56971: LD_INT 1
56973: PLUS
56974: ARRAY
56975: ST_TO_ADDR
56976: GO 57107
56978: LD_INT 2
56980: DOUBLE
56981: EQUAL
56982: IFTRUE 56986
56984: GO 57042
56986: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56987: LD_ADDR_VAR 0 9
56991: PUSH
56992: LD_VAR 0 17
56996: PUSH
56997: LD_VAR 0 18
57001: PUSH
57002: LD_VAR 0 19
57006: PUSH
57007: LD_VAR 0 20
57011: PUSH
57012: LD_VAR 0 21
57016: PUSH
57017: LD_VAR 0 22
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: PUSH
57030: LD_VAR 0 4
57034: PUSH
57035: LD_INT 1
57037: PLUS
57038: ARRAY
57039: ST_TO_ADDR
57040: GO 57107
57042: LD_INT 3
57044: DOUBLE
57045: EQUAL
57046: IFTRUE 57050
57048: GO 57106
57050: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57051: LD_ADDR_VAR 0 9
57055: PUSH
57056: LD_VAR 0 23
57060: PUSH
57061: LD_VAR 0 24
57065: PUSH
57066: LD_VAR 0 25
57070: PUSH
57071: LD_VAR 0 26
57075: PUSH
57076: LD_VAR 0 27
57080: PUSH
57081: LD_VAR 0 28
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: PUSH
57094: LD_VAR 0 4
57098: PUSH
57099: LD_INT 1
57101: PLUS
57102: ARRAY
57103: ST_TO_ADDR
57104: GO 57107
57106: POP
57107: GO 57662
57109: LD_INT 2
57111: DOUBLE
57112: EQUAL
57113: IFTRUE 57123
57115: LD_INT 3
57117: DOUBLE
57118: EQUAL
57119: IFTRUE 57123
57121: GO 57179
57123: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57124: LD_ADDR_VAR 0 9
57128: PUSH
57129: LD_VAR 0 29
57133: PUSH
57134: LD_VAR 0 30
57138: PUSH
57139: LD_VAR 0 31
57143: PUSH
57144: LD_VAR 0 32
57148: PUSH
57149: LD_VAR 0 33
57153: PUSH
57154: LD_VAR 0 34
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: PUSH
57167: LD_VAR 0 4
57171: PUSH
57172: LD_INT 1
57174: PLUS
57175: ARRAY
57176: ST_TO_ADDR
57177: GO 57662
57179: LD_INT 16
57181: DOUBLE
57182: EQUAL
57183: IFTRUE 57241
57185: LD_INT 17
57187: DOUBLE
57188: EQUAL
57189: IFTRUE 57241
57191: LD_INT 18
57193: DOUBLE
57194: EQUAL
57195: IFTRUE 57241
57197: LD_INT 19
57199: DOUBLE
57200: EQUAL
57201: IFTRUE 57241
57203: LD_INT 22
57205: DOUBLE
57206: EQUAL
57207: IFTRUE 57241
57209: LD_INT 20
57211: DOUBLE
57212: EQUAL
57213: IFTRUE 57241
57215: LD_INT 21
57217: DOUBLE
57218: EQUAL
57219: IFTRUE 57241
57221: LD_INT 23
57223: DOUBLE
57224: EQUAL
57225: IFTRUE 57241
57227: LD_INT 24
57229: DOUBLE
57230: EQUAL
57231: IFTRUE 57241
57233: LD_INT 25
57235: DOUBLE
57236: EQUAL
57237: IFTRUE 57241
57239: GO 57297
57241: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57242: LD_ADDR_VAR 0 9
57246: PUSH
57247: LD_VAR 0 35
57251: PUSH
57252: LD_VAR 0 36
57256: PUSH
57257: LD_VAR 0 37
57261: PUSH
57262: LD_VAR 0 38
57266: PUSH
57267: LD_VAR 0 39
57271: PUSH
57272: LD_VAR 0 40
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: PUSH
57285: LD_VAR 0 4
57289: PUSH
57290: LD_INT 1
57292: PLUS
57293: ARRAY
57294: ST_TO_ADDR
57295: GO 57662
57297: LD_INT 6
57299: DOUBLE
57300: EQUAL
57301: IFTRUE 57353
57303: LD_INT 7
57305: DOUBLE
57306: EQUAL
57307: IFTRUE 57353
57309: LD_INT 8
57311: DOUBLE
57312: EQUAL
57313: IFTRUE 57353
57315: LD_INT 13
57317: DOUBLE
57318: EQUAL
57319: IFTRUE 57353
57321: LD_INT 12
57323: DOUBLE
57324: EQUAL
57325: IFTRUE 57353
57327: LD_INT 15
57329: DOUBLE
57330: EQUAL
57331: IFTRUE 57353
57333: LD_INT 11
57335: DOUBLE
57336: EQUAL
57337: IFTRUE 57353
57339: LD_INT 14
57341: DOUBLE
57342: EQUAL
57343: IFTRUE 57353
57345: LD_INT 10
57347: DOUBLE
57348: EQUAL
57349: IFTRUE 57353
57351: GO 57409
57353: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57354: LD_ADDR_VAR 0 9
57358: PUSH
57359: LD_VAR 0 41
57363: PUSH
57364: LD_VAR 0 42
57368: PUSH
57369: LD_VAR 0 43
57373: PUSH
57374: LD_VAR 0 44
57378: PUSH
57379: LD_VAR 0 45
57383: PUSH
57384: LD_VAR 0 46
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: PUSH
57397: LD_VAR 0 4
57401: PUSH
57402: LD_INT 1
57404: PLUS
57405: ARRAY
57406: ST_TO_ADDR
57407: GO 57662
57409: LD_INT 36
57411: DOUBLE
57412: EQUAL
57413: IFTRUE 57417
57415: GO 57473
57417: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57418: LD_ADDR_VAR 0 9
57422: PUSH
57423: LD_VAR 0 47
57427: PUSH
57428: LD_VAR 0 48
57432: PUSH
57433: LD_VAR 0 49
57437: PUSH
57438: LD_VAR 0 50
57442: PUSH
57443: LD_VAR 0 51
57447: PUSH
57448: LD_VAR 0 52
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: PUSH
57461: LD_VAR 0 4
57465: PUSH
57466: LD_INT 1
57468: PLUS
57469: ARRAY
57470: ST_TO_ADDR
57471: GO 57662
57473: LD_INT 4
57475: DOUBLE
57476: EQUAL
57477: IFTRUE 57499
57479: LD_INT 5
57481: DOUBLE
57482: EQUAL
57483: IFTRUE 57499
57485: LD_INT 34
57487: DOUBLE
57488: EQUAL
57489: IFTRUE 57499
57491: LD_INT 37
57493: DOUBLE
57494: EQUAL
57495: IFTRUE 57499
57497: GO 57555
57499: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57500: LD_ADDR_VAR 0 9
57504: PUSH
57505: LD_VAR 0 53
57509: PUSH
57510: LD_VAR 0 54
57514: PUSH
57515: LD_VAR 0 55
57519: PUSH
57520: LD_VAR 0 56
57524: PUSH
57525: LD_VAR 0 57
57529: PUSH
57530: LD_VAR 0 58
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: PUSH
57543: LD_VAR 0 4
57547: PUSH
57548: LD_INT 1
57550: PLUS
57551: ARRAY
57552: ST_TO_ADDR
57553: GO 57662
57555: LD_INT 31
57557: DOUBLE
57558: EQUAL
57559: IFTRUE 57605
57561: LD_INT 32
57563: DOUBLE
57564: EQUAL
57565: IFTRUE 57605
57567: LD_INT 33
57569: DOUBLE
57570: EQUAL
57571: IFTRUE 57605
57573: LD_INT 27
57575: DOUBLE
57576: EQUAL
57577: IFTRUE 57605
57579: LD_INT 26
57581: DOUBLE
57582: EQUAL
57583: IFTRUE 57605
57585: LD_INT 28
57587: DOUBLE
57588: EQUAL
57589: IFTRUE 57605
57591: LD_INT 29
57593: DOUBLE
57594: EQUAL
57595: IFTRUE 57605
57597: LD_INT 30
57599: DOUBLE
57600: EQUAL
57601: IFTRUE 57605
57603: GO 57661
57605: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57606: LD_ADDR_VAR 0 9
57610: PUSH
57611: LD_VAR 0 59
57615: PUSH
57616: LD_VAR 0 60
57620: PUSH
57621: LD_VAR 0 61
57625: PUSH
57626: LD_VAR 0 62
57630: PUSH
57631: LD_VAR 0 63
57635: PUSH
57636: LD_VAR 0 64
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: PUSH
57649: LD_VAR 0 4
57653: PUSH
57654: LD_INT 1
57656: PLUS
57657: ARRAY
57658: ST_TO_ADDR
57659: GO 57662
57661: POP
// temp_list2 = [ ] ;
57662: LD_ADDR_VAR 0 10
57666: PUSH
57667: EMPTY
57668: ST_TO_ADDR
// for i in temp_list do
57669: LD_ADDR_VAR 0 8
57673: PUSH
57674: LD_VAR 0 9
57678: PUSH
57679: FOR_IN
57680: IFFALSE 57732
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57682: LD_ADDR_VAR 0 10
57686: PUSH
57687: LD_VAR 0 10
57691: PUSH
57692: LD_VAR 0 8
57696: PUSH
57697: LD_INT 1
57699: ARRAY
57700: PUSH
57701: LD_VAR 0 2
57705: PLUS
57706: PUSH
57707: LD_VAR 0 8
57711: PUSH
57712: LD_INT 2
57714: ARRAY
57715: PUSH
57716: LD_VAR 0 3
57720: PLUS
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: ADD
57729: ST_TO_ADDR
57730: GO 57679
57732: POP
57733: POP
// result = temp_list2 ;
57734: LD_ADDR_VAR 0 7
57738: PUSH
57739: LD_VAR 0 10
57743: ST_TO_ADDR
// end ;
57744: LD_VAR 0 7
57748: RET
// export function EnemyInRange ( unit , dist ) ; begin
57749: LD_INT 0
57751: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57752: LD_ADDR_VAR 0 3
57756: PUSH
57757: LD_VAR 0 1
57761: PPUSH
57762: CALL_OW 255
57766: PPUSH
57767: LD_VAR 0 1
57771: PPUSH
57772: CALL_OW 250
57776: PPUSH
57777: LD_VAR 0 1
57781: PPUSH
57782: CALL_OW 251
57786: PPUSH
57787: LD_VAR 0 2
57791: PPUSH
57792: CALL 31145 0 4
57796: PUSH
57797: LD_INT 4
57799: ARRAY
57800: ST_TO_ADDR
// end ;
57801: LD_VAR 0 3
57805: RET
// export function PlayerSeeMe ( unit ) ; begin
57806: LD_INT 0
57808: PPUSH
// result := See ( your_side , unit ) ;
57809: LD_ADDR_VAR 0 2
57813: PUSH
57814: LD_OWVAR 2
57818: PPUSH
57819: LD_VAR 0 1
57823: PPUSH
57824: CALL_OW 292
57828: ST_TO_ADDR
// end ;
57829: LD_VAR 0 2
57833: RET
// export function ReverseDir ( unit ) ; begin
57834: LD_INT 0
57836: PPUSH
// if not unit then
57837: LD_VAR 0 1
57841: NOT
57842: IFFALSE 57846
// exit ;
57844: GO 57869
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57846: LD_ADDR_VAR 0 2
57850: PUSH
57851: LD_VAR 0 1
57855: PPUSH
57856: CALL_OW 254
57860: PUSH
57861: LD_INT 3
57863: PLUS
57864: PUSH
57865: LD_INT 6
57867: MOD
57868: ST_TO_ADDR
// end ;
57869: LD_VAR 0 2
57873: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57874: LD_INT 0
57876: PPUSH
57877: PPUSH
57878: PPUSH
57879: PPUSH
57880: PPUSH
// if not hexes then
57881: LD_VAR 0 2
57885: NOT
57886: IFFALSE 57890
// exit ;
57888: GO 58038
// dist := 9999 ;
57890: LD_ADDR_VAR 0 5
57894: PUSH
57895: LD_INT 9999
57897: ST_TO_ADDR
// for i = 1 to hexes do
57898: LD_ADDR_VAR 0 4
57902: PUSH
57903: DOUBLE
57904: LD_INT 1
57906: DEC
57907: ST_TO_ADDR
57908: LD_VAR 0 2
57912: PUSH
57913: FOR_TO
57914: IFFALSE 58026
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57916: LD_VAR 0 1
57920: PPUSH
57921: LD_VAR 0 2
57925: PUSH
57926: LD_VAR 0 4
57930: ARRAY
57931: PUSH
57932: LD_INT 1
57934: ARRAY
57935: PPUSH
57936: LD_VAR 0 2
57940: PUSH
57941: LD_VAR 0 4
57945: ARRAY
57946: PUSH
57947: LD_INT 2
57949: ARRAY
57950: PPUSH
57951: CALL_OW 297
57955: PUSH
57956: LD_VAR 0 5
57960: LESS
57961: IFFALSE 58024
// begin hex := hexes [ i ] ;
57963: LD_ADDR_VAR 0 7
57967: PUSH
57968: LD_VAR 0 2
57972: PUSH
57973: LD_VAR 0 4
57977: ARRAY
57978: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57979: LD_ADDR_VAR 0 5
57983: PUSH
57984: LD_VAR 0 1
57988: PPUSH
57989: LD_VAR 0 2
57993: PUSH
57994: LD_VAR 0 4
57998: ARRAY
57999: PUSH
58000: LD_INT 1
58002: ARRAY
58003: PPUSH
58004: LD_VAR 0 2
58008: PUSH
58009: LD_VAR 0 4
58013: ARRAY
58014: PUSH
58015: LD_INT 2
58017: ARRAY
58018: PPUSH
58019: CALL_OW 297
58023: ST_TO_ADDR
// end ; end ;
58024: GO 57913
58026: POP
58027: POP
// result := hex ;
58028: LD_ADDR_VAR 0 3
58032: PUSH
58033: LD_VAR 0 7
58037: ST_TO_ADDR
// end ;
58038: LD_VAR 0 3
58042: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58043: LD_INT 0
58045: PPUSH
58046: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58047: LD_VAR 0 1
58051: NOT
58052: PUSH
58053: LD_VAR 0 1
58057: PUSH
58058: LD_INT 21
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 23
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PPUSH
58082: CALL_OW 69
58086: IN
58087: NOT
58088: OR
58089: IFFALSE 58093
// exit ;
58091: GO 58140
// for i = 1 to 3 do
58093: LD_ADDR_VAR 0 3
58097: PUSH
58098: DOUBLE
58099: LD_INT 1
58101: DEC
58102: ST_TO_ADDR
58103: LD_INT 3
58105: PUSH
58106: FOR_TO
58107: IFFALSE 58138
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58109: LD_VAR 0 1
58113: PPUSH
58114: CALL_OW 250
58118: PPUSH
58119: LD_VAR 0 1
58123: PPUSH
58124: CALL_OW 251
58128: PPUSH
58129: LD_INT 1
58131: PPUSH
58132: CALL_OW 453
58136: GO 58106
58138: POP
58139: POP
// end ;
58140: LD_VAR 0 2
58144: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58145: LD_INT 0
58147: PPUSH
58148: PPUSH
58149: PPUSH
58150: PPUSH
58151: PPUSH
58152: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58153: LD_VAR 0 1
58157: NOT
58158: PUSH
58159: LD_VAR 0 2
58163: NOT
58164: OR
58165: PUSH
58166: LD_VAR 0 1
58170: PPUSH
58171: CALL_OW 314
58175: OR
58176: IFFALSE 58180
// exit ;
58178: GO 58621
// x := GetX ( enemy_unit ) ;
58180: LD_ADDR_VAR 0 7
58184: PUSH
58185: LD_VAR 0 2
58189: PPUSH
58190: CALL_OW 250
58194: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58195: LD_ADDR_VAR 0 8
58199: PUSH
58200: LD_VAR 0 2
58204: PPUSH
58205: CALL_OW 251
58209: ST_TO_ADDR
// if not x or not y then
58210: LD_VAR 0 7
58214: NOT
58215: PUSH
58216: LD_VAR 0 8
58220: NOT
58221: OR
58222: IFFALSE 58226
// exit ;
58224: GO 58621
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58226: LD_ADDR_VAR 0 6
58230: PUSH
58231: LD_VAR 0 7
58235: PPUSH
58236: LD_INT 0
58238: PPUSH
58239: LD_INT 4
58241: PPUSH
58242: CALL_OW 272
58246: PUSH
58247: LD_VAR 0 8
58251: PPUSH
58252: LD_INT 0
58254: PPUSH
58255: LD_INT 4
58257: PPUSH
58258: CALL_OW 273
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_VAR 0 7
58271: PPUSH
58272: LD_INT 1
58274: PPUSH
58275: LD_INT 4
58277: PPUSH
58278: CALL_OW 272
58282: PUSH
58283: LD_VAR 0 8
58287: PPUSH
58288: LD_INT 1
58290: PPUSH
58291: LD_INT 4
58293: PPUSH
58294: CALL_OW 273
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_VAR 0 7
58307: PPUSH
58308: LD_INT 2
58310: PPUSH
58311: LD_INT 4
58313: PPUSH
58314: CALL_OW 272
58318: PUSH
58319: LD_VAR 0 8
58323: PPUSH
58324: LD_INT 2
58326: PPUSH
58327: LD_INT 4
58329: PPUSH
58330: CALL_OW 273
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_VAR 0 7
58343: PPUSH
58344: LD_INT 3
58346: PPUSH
58347: LD_INT 4
58349: PPUSH
58350: CALL_OW 272
58354: PUSH
58355: LD_VAR 0 8
58359: PPUSH
58360: LD_INT 3
58362: PPUSH
58363: LD_INT 4
58365: PPUSH
58366: CALL_OW 273
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_VAR 0 7
58379: PPUSH
58380: LD_INT 4
58382: PPUSH
58383: LD_INT 4
58385: PPUSH
58386: CALL_OW 272
58390: PUSH
58391: LD_VAR 0 8
58395: PPUSH
58396: LD_INT 4
58398: PPUSH
58399: LD_INT 4
58401: PPUSH
58402: CALL_OW 273
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_VAR 0 7
58415: PPUSH
58416: LD_INT 5
58418: PPUSH
58419: LD_INT 4
58421: PPUSH
58422: CALL_OW 272
58426: PUSH
58427: LD_VAR 0 8
58431: PPUSH
58432: LD_INT 5
58434: PPUSH
58435: LD_INT 4
58437: PPUSH
58438: CALL_OW 273
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: ST_TO_ADDR
// for i = tmp downto 1 do
58455: LD_ADDR_VAR 0 4
58459: PUSH
58460: DOUBLE
58461: LD_VAR 0 6
58465: INC
58466: ST_TO_ADDR
58467: LD_INT 1
58469: PUSH
58470: FOR_DOWNTO
58471: IFFALSE 58572
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58473: LD_VAR 0 6
58477: PUSH
58478: LD_VAR 0 4
58482: ARRAY
58483: PUSH
58484: LD_INT 1
58486: ARRAY
58487: PPUSH
58488: LD_VAR 0 6
58492: PUSH
58493: LD_VAR 0 4
58497: ARRAY
58498: PUSH
58499: LD_INT 2
58501: ARRAY
58502: PPUSH
58503: CALL_OW 488
58507: NOT
58508: PUSH
58509: LD_VAR 0 6
58513: PUSH
58514: LD_VAR 0 4
58518: ARRAY
58519: PUSH
58520: LD_INT 1
58522: ARRAY
58523: PPUSH
58524: LD_VAR 0 6
58528: PUSH
58529: LD_VAR 0 4
58533: ARRAY
58534: PUSH
58535: LD_INT 2
58537: ARRAY
58538: PPUSH
58539: CALL_OW 428
58543: PUSH
58544: LD_INT 0
58546: NONEQUAL
58547: OR
58548: IFFALSE 58570
// tmp := Delete ( tmp , i ) ;
58550: LD_ADDR_VAR 0 6
58554: PUSH
58555: LD_VAR 0 6
58559: PPUSH
58560: LD_VAR 0 4
58564: PPUSH
58565: CALL_OW 3
58569: ST_TO_ADDR
58570: GO 58470
58572: POP
58573: POP
// j := GetClosestHex ( unit , tmp ) ;
58574: LD_ADDR_VAR 0 5
58578: PUSH
58579: LD_VAR 0 1
58583: PPUSH
58584: LD_VAR 0 6
58588: PPUSH
58589: CALL 57874 0 2
58593: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58594: LD_VAR 0 1
58598: PPUSH
58599: LD_VAR 0 5
58603: PUSH
58604: LD_INT 1
58606: ARRAY
58607: PPUSH
58608: LD_VAR 0 5
58612: PUSH
58613: LD_INT 2
58615: ARRAY
58616: PPUSH
58617: CALL_OW 111
// end ;
58621: LD_VAR 0 3
58625: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58626: LD_INT 0
58628: PPUSH
58629: PPUSH
58630: PPUSH
// uc_side = 0 ;
58631: LD_ADDR_OWVAR 20
58635: PUSH
58636: LD_INT 0
58638: ST_TO_ADDR
// uc_nation = 0 ;
58639: LD_ADDR_OWVAR 21
58643: PUSH
58644: LD_INT 0
58646: ST_TO_ADDR
// InitHc_All ( ) ;
58647: CALL_OW 584
// InitVc ;
58651: CALL_OW 20
// if mastodonts then
58655: LD_VAR 0 6
58659: IFFALSE 58726
// for i = 1 to mastodonts do
58661: LD_ADDR_VAR 0 11
58665: PUSH
58666: DOUBLE
58667: LD_INT 1
58669: DEC
58670: ST_TO_ADDR
58671: LD_VAR 0 6
58675: PUSH
58676: FOR_TO
58677: IFFALSE 58724
// begin vc_chassis := 31 ;
58679: LD_ADDR_OWVAR 37
58683: PUSH
58684: LD_INT 31
58686: ST_TO_ADDR
// vc_control := control_rider ;
58687: LD_ADDR_OWVAR 38
58691: PUSH
58692: LD_INT 4
58694: ST_TO_ADDR
// animal := CreateVehicle ;
58695: LD_ADDR_VAR 0 12
58699: PUSH
58700: CALL_OW 45
58704: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58705: LD_VAR 0 12
58709: PPUSH
58710: LD_VAR 0 8
58714: PPUSH
58715: LD_INT 0
58717: PPUSH
58718: CALL 60914 0 3
// end ;
58722: GO 58676
58724: POP
58725: POP
// if horses then
58726: LD_VAR 0 5
58730: IFFALSE 58797
// for i = 1 to horses do
58732: LD_ADDR_VAR 0 11
58736: PUSH
58737: DOUBLE
58738: LD_INT 1
58740: DEC
58741: ST_TO_ADDR
58742: LD_VAR 0 5
58746: PUSH
58747: FOR_TO
58748: IFFALSE 58795
// begin hc_class := 21 ;
58750: LD_ADDR_OWVAR 28
58754: PUSH
58755: LD_INT 21
58757: ST_TO_ADDR
// hc_gallery :=  ;
58758: LD_ADDR_OWVAR 33
58762: PUSH
58763: LD_STRING 
58765: ST_TO_ADDR
// animal := CreateHuman ;
58766: LD_ADDR_VAR 0 12
58770: PUSH
58771: CALL_OW 44
58775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58776: LD_VAR 0 12
58780: PPUSH
58781: LD_VAR 0 8
58785: PPUSH
58786: LD_INT 0
58788: PPUSH
58789: CALL 60914 0 3
// end ;
58793: GO 58747
58795: POP
58796: POP
// if birds then
58797: LD_VAR 0 1
58801: IFFALSE 58868
// for i = 1 to birds do
58803: LD_ADDR_VAR 0 11
58807: PUSH
58808: DOUBLE
58809: LD_INT 1
58811: DEC
58812: ST_TO_ADDR
58813: LD_VAR 0 1
58817: PUSH
58818: FOR_TO
58819: IFFALSE 58866
// begin hc_class = 18 ;
58821: LD_ADDR_OWVAR 28
58825: PUSH
58826: LD_INT 18
58828: ST_TO_ADDR
// hc_gallery =  ;
58829: LD_ADDR_OWVAR 33
58833: PUSH
58834: LD_STRING 
58836: ST_TO_ADDR
// animal := CreateHuman ;
58837: LD_ADDR_VAR 0 12
58841: PUSH
58842: CALL_OW 44
58846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58847: LD_VAR 0 12
58851: PPUSH
58852: LD_VAR 0 8
58856: PPUSH
58857: LD_INT 0
58859: PPUSH
58860: CALL 60914 0 3
// end ;
58864: GO 58818
58866: POP
58867: POP
// if tigers then
58868: LD_VAR 0 2
58872: IFFALSE 58956
// for i = 1 to tigers do
58874: LD_ADDR_VAR 0 11
58878: PUSH
58879: DOUBLE
58880: LD_INT 1
58882: DEC
58883: ST_TO_ADDR
58884: LD_VAR 0 2
58888: PUSH
58889: FOR_TO
58890: IFFALSE 58954
// begin hc_class = class_tiger ;
58892: LD_ADDR_OWVAR 28
58896: PUSH
58897: LD_INT 14
58899: ST_TO_ADDR
// hc_gallery =  ;
58900: LD_ADDR_OWVAR 33
58904: PUSH
58905: LD_STRING 
58907: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58908: LD_ADDR_OWVAR 35
58912: PUSH
58913: LD_INT 7
58915: NEG
58916: PPUSH
58917: LD_INT 7
58919: PPUSH
58920: CALL_OW 12
58924: ST_TO_ADDR
// animal := CreateHuman ;
58925: LD_ADDR_VAR 0 12
58929: PUSH
58930: CALL_OW 44
58934: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58935: LD_VAR 0 12
58939: PPUSH
58940: LD_VAR 0 8
58944: PPUSH
58945: LD_INT 0
58947: PPUSH
58948: CALL 60914 0 3
// end ;
58952: GO 58889
58954: POP
58955: POP
// if apemans then
58956: LD_VAR 0 3
58960: IFFALSE 59083
// for i = 1 to apemans do
58962: LD_ADDR_VAR 0 11
58966: PUSH
58967: DOUBLE
58968: LD_INT 1
58970: DEC
58971: ST_TO_ADDR
58972: LD_VAR 0 3
58976: PUSH
58977: FOR_TO
58978: IFFALSE 59081
// begin hc_class = class_apeman ;
58980: LD_ADDR_OWVAR 28
58984: PUSH
58985: LD_INT 12
58987: ST_TO_ADDR
// hc_gallery =  ;
58988: LD_ADDR_OWVAR 33
58992: PUSH
58993: LD_STRING 
58995: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58996: LD_ADDR_OWVAR 35
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PPUSH
59005: LD_INT 2
59007: PPUSH
59008: CALL_OW 12
59012: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59013: LD_ADDR_OWVAR 31
59017: PUSH
59018: LD_INT 1
59020: PPUSH
59021: LD_INT 3
59023: PPUSH
59024: CALL_OW 12
59028: PUSH
59029: LD_INT 1
59031: PPUSH
59032: LD_INT 3
59034: PPUSH
59035: CALL_OW 12
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: ST_TO_ADDR
// animal := CreateHuman ;
59052: LD_ADDR_VAR 0 12
59056: PUSH
59057: CALL_OW 44
59061: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59062: LD_VAR 0 12
59066: PPUSH
59067: LD_VAR 0 8
59071: PPUSH
59072: LD_INT 0
59074: PPUSH
59075: CALL 60914 0 3
// end ;
59079: GO 58977
59081: POP
59082: POP
// if enchidnas then
59083: LD_VAR 0 4
59087: IFFALSE 59154
// for i = 1 to enchidnas do
59089: LD_ADDR_VAR 0 11
59093: PUSH
59094: DOUBLE
59095: LD_INT 1
59097: DEC
59098: ST_TO_ADDR
59099: LD_VAR 0 4
59103: PUSH
59104: FOR_TO
59105: IFFALSE 59152
// begin hc_class = 13 ;
59107: LD_ADDR_OWVAR 28
59111: PUSH
59112: LD_INT 13
59114: ST_TO_ADDR
// hc_gallery =  ;
59115: LD_ADDR_OWVAR 33
59119: PUSH
59120: LD_STRING 
59122: ST_TO_ADDR
// animal := CreateHuman ;
59123: LD_ADDR_VAR 0 12
59127: PUSH
59128: CALL_OW 44
59132: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59133: LD_VAR 0 12
59137: PPUSH
59138: LD_VAR 0 8
59142: PPUSH
59143: LD_INT 0
59145: PPUSH
59146: CALL 60914 0 3
// end ;
59150: GO 59104
59152: POP
59153: POP
// if fishes then
59154: LD_VAR 0 7
59158: IFFALSE 59225
// for i = 1 to fishes do
59160: LD_ADDR_VAR 0 11
59164: PUSH
59165: DOUBLE
59166: LD_INT 1
59168: DEC
59169: ST_TO_ADDR
59170: LD_VAR 0 7
59174: PUSH
59175: FOR_TO
59176: IFFALSE 59223
// begin hc_class = 20 ;
59178: LD_ADDR_OWVAR 28
59182: PUSH
59183: LD_INT 20
59185: ST_TO_ADDR
// hc_gallery =  ;
59186: LD_ADDR_OWVAR 33
59190: PUSH
59191: LD_STRING 
59193: ST_TO_ADDR
// animal := CreateHuman ;
59194: LD_ADDR_VAR 0 12
59198: PUSH
59199: CALL_OW 44
59203: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59204: LD_VAR 0 12
59208: PPUSH
59209: LD_VAR 0 9
59213: PPUSH
59214: LD_INT 0
59216: PPUSH
59217: CALL 60914 0 3
// end ;
59221: GO 59175
59223: POP
59224: POP
// end ;
59225: LD_VAR 0 10
59229: RET
// export function WantHeal ( sci , unit ) ; begin
59230: LD_INT 0
59232: PPUSH
// if GetTaskList ( sci ) > 0 then
59233: LD_VAR 0 1
59237: PPUSH
59238: CALL_OW 437
59242: PUSH
59243: LD_INT 0
59245: GREATER
59246: IFFALSE 59316
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59248: LD_VAR 0 1
59252: PPUSH
59253: CALL_OW 437
59257: PUSH
59258: LD_INT 1
59260: ARRAY
59261: PUSH
59262: LD_INT 1
59264: ARRAY
59265: PUSH
59266: LD_STRING l
59268: EQUAL
59269: PUSH
59270: LD_VAR 0 1
59274: PPUSH
59275: CALL_OW 437
59279: PUSH
59280: LD_INT 1
59282: ARRAY
59283: PUSH
59284: LD_INT 4
59286: ARRAY
59287: PUSH
59288: LD_VAR 0 2
59292: EQUAL
59293: AND
59294: IFFALSE 59306
// result := true else
59296: LD_ADDR_VAR 0 3
59300: PUSH
59301: LD_INT 1
59303: ST_TO_ADDR
59304: GO 59314
// result := false ;
59306: LD_ADDR_VAR 0 3
59310: PUSH
59311: LD_INT 0
59313: ST_TO_ADDR
// end else
59314: GO 59324
// result := false ;
59316: LD_ADDR_VAR 0 3
59320: PUSH
59321: LD_INT 0
59323: ST_TO_ADDR
// end ;
59324: LD_VAR 0 3
59328: RET
// export function HealTarget ( sci ) ; begin
59329: LD_INT 0
59331: PPUSH
// if not sci then
59332: LD_VAR 0 1
59336: NOT
59337: IFFALSE 59341
// exit ;
59339: GO 59406
// result := 0 ;
59341: LD_ADDR_VAR 0 2
59345: PUSH
59346: LD_INT 0
59348: ST_TO_ADDR
// if GetTaskList ( sci ) then
59349: LD_VAR 0 1
59353: PPUSH
59354: CALL_OW 437
59358: IFFALSE 59406
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59360: LD_VAR 0 1
59364: PPUSH
59365: CALL_OW 437
59369: PUSH
59370: LD_INT 1
59372: ARRAY
59373: PUSH
59374: LD_INT 1
59376: ARRAY
59377: PUSH
59378: LD_STRING l
59380: EQUAL
59381: IFFALSE 59406
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59383: LD_ADDR_VAR 0 2
59387: PUSH
59388: LD_VAR 0 1
59392: PPUSH
59393: CALL_OW 437
59397: PUSH
59398: LD_INT 1
59400: ARRAY
59401: PUSH
59402: LD_INT 4
59404: ARRAY
59405: ST_TO_ADDR
// end ;
59406: LD_VAR 0 2
59410: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59411: LD_INT 0
59413: PPUSH
59414: PPUSH
59415: PPUSH
59416: PPUSH
// if not base_units then
59417: LD_VAR 0 1
59421: NOT
59422: IFFALSE 59426
// exit ;
59424: GO 59513
// result := false ;
59426: LD_ADDR_VAR 0 2
59430: PUSH
59431: LD_INT 0
59433: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59434: LD_ADDR_VAR 0 5
59438: PUSH
59439: LD_VAR 0 1
59443: PPUSH
59444: LD_INT 21
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PPUSH
59454: CALL_OW 72
59458: ST_TO_ADDR
// if not tmp then
59459: LD_VAR 0 5
59463: NOT
59464: IFFALSE 59468
// exit ;
59466: GO 59513
// for i in tmp do
59468: LD_ADDR_VAR 0 3
59472: PUSH
59473: LD_VAR 0 5
59477: PUSH
59478: FOR_IN
59479: IFFALSE 59511
// begin result := EnemyInRange ( i , 22 ) ;
59481: LD_ADDR_VAR 0 2
59485: PUSH
59486: LD_VAR 0 3
59490: PPUSH
59491: LD_INT 22
59493: PPUSH
59494: CALL 57749 0 2
59498: ST_TO_ADDR
// if result then
59499: LD_VAR 0 2
59503: IFFALSE 59509
// exit ;
59505: POP
59506: POP
59507: GO 59513
// end ;
59509: GO 59478
59511: POP
59512: POP
// end ;
59513: LD_VAR 0 2
59517: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59518: LD_INT 0
59520: PPUSH
59521: PPUSH
// if not units then
59522: LD_VAR 0 1
59526: NOT
59527: IFFALSE 59531
// exit ;
59529: GO 59601
// result := [ ] ;
59531: LD_ADDR_VAR 0 3
59535: PUSH
59536: EMPTY
59537: ST_TO_ADDR
// for i in units do
59538: LD_ADDR_VAR 0 4
59542: PUSH
59543: LD_VAR 0 1
59547: PUSH
59548: FOR_IN
59549: IFFALSE 59599
// if GetTag ( i ) = tag then
59551: LD_VAR 0 4
59555: PPUSH
59556: CALL_OW 110
59560: PUSH
59561: LD_VAR 0 2
59565: EQUAL
59566: IFFALSE 59597
// result := Replace ( result , result + 1 , i ) ;
59568: LD_ADDR_VAR 0 3
59572: PUSH
59573: LD_VAR 0 3
59577: PPUSH
59578: LD_VAR 0 3
59582: PUSH
59583: LD_INT 1
59585: PLUS
59586: PPUSH
59587: LD_VAR 0 4
59591: PPUSH
59592: CALL_OW 1
59596: ST_TO_ADDR
59597: GO 59548
59599: POP
59600: POP
// end ;
59601: LD_VAR 0 3
59605: RET
// export function IsDriver ( un ) ; begin
59606: LD_INT 0
59608: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59609: LD_ADDR_VAR 0 2
59613: PUSH
59614: LD_VAR 0 1
59618: PUSH
59619: LD_INT 55
59621: PUSH
59622: EMPTY
59623: LIST
59624: PPUSH
59625: CALL_OW 69
59629: IN
59630: ST_TO_ADDR
// end ;
59631: LD_VAR 0 2
59635: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59636: LD_INT 0
59638: PPUSH
59639: PPUSH
// list := [ ] ;
59640: LD_ADDR_VAR 0 5
59644: PUSH
59645: EMPTY
59646: ST_TO_ADDR
// case d of 0 :
59647: LD_VAR 0 3
59651: PUSH
59652: LD_INT 0
59654: DOUBLE
59655: EQUAL
59656: IFTRUE 59660
59658: GO 59793
59660: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59661: LD_ADDR_VAR 0 5
59665: PUSH
59666: LD_VAR 0 1
59670: PUSH
59671: LD_INT 4
59673: MINUS
59674: PUSH
59675: LD_VAR 0 2
59679: PUSH
59680: LD_INT 4
59682: MINUS
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: PUSH
59692: LD_VAR 0 1
59696: PUSH
59697: LD_INT 3
59699: MINUS
59700: PUSH
59701: LD_VAR 0 2
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: LIST
59713: PUSH
59714: LD_VAR 0 1
59718: PUSH
59719: LD_INT 4
59721: PLUS
59722: PUSH
59723: LD_VAR 0 2
59727: PUSH
59728: LD_INT 4
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: LIST
59735: PUSH
59736: LD_VAR 0 1
59740: PUSH
59741: LD_INT 3
59743: PLUS
59744: PUSH
59745: LD_VAR 0 2
59749: PUSH
59750: LD_INT 3
59752: PLUS
59753: PUSH
59754: LD_INT 5
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: LIST
59761: PUSH
59762: LD_VAR 0 1
59766: PUSH
59767: LD_VAR 0 2
59771: PUSH
59772: LD_INT 4
59774: PLUS
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: LIST
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: ST_TO_ADDR
// end ; 1 :
59791: GO 60491
59793: LD_INT 1
59795: DOUBLE
59796: EQUAL
59797: IFTRUE 59801
59799: GO 59934
59801: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59802: LD_ADDR_VAR 0 5
59806: PUSH
59807: LD_VAR 0 1
59811: PUSH
59812: LD_VAR 0 2
59816: PUSH
59817: LD_INT 4
59819: MINUS
59820: PUSH
59821: LD_INT 3
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: PUSH
59829: LD_VAR 0 1
59833: PUSH
59834: LD_INT 3
59836: MINUS
59837: PUSH
59838: LD_VAR 0 2
59842: PUSH
59843: LD_INT 3
59845: MINUS
59846: PUSH
59847: LD_INT 2
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: PUSH
59855: LD_VAR 0 1
59859: PUSH
59860: LD_INT 4
59862: MINUS
59863: PUSH
59864: LD_VAR 0 2
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: LIST
59876: PUSH
59877: LD_VAR 0 1
59881: PUSH
59882: LD_VAR 0 2
59886: PUSH
59887: LD_INT 3
59889: PLUS
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: PUSH
59899: LD_VAR 0 1
59903: PUSH
59904: LD_INT 4
59906: PLUS
59907: PUSH
59908: LD_VAR 0 2
59912: PUSH
59913: LD_INT 4
59915: PLUS
59916: PUSH
59917: LD_INT 5
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: ST_TO_ADDR
// end ; 2 :
59932: GO 60491
59934: LD_INT 2
59936: DOUBLE
59937: EQUAL
59938: IFTRUE 59942
59940: GO 60071
59942: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59943: LD_ADDR_VAR 0 5
59947: PUSH
59948: LD_VAR 0 1
59952: PUSH
59953: LD_VAR 0 2
59957: PUSH
59958: LD_INT 3
59960: MINUS
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: PUSH
59970: LD_VAR 0 1
59974: PUSH
59975: LD_INT 4
59977: PLUS
59978: PUSH
59979: LD_VAR 0 2
59983: PUSH
59984: LD_INT 4
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: LIST
59991: PUSH
59992: LD_VAR 0 1
59996: PUSH
59997: LD_VAR 0 2
60001: PUSH
60002: LD_INT 4
60004: PLUS
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: LIST
60013: PUSH
60014: LD_VAR 0 1
60018: PUSH
60019: LD_INT 3
60021: MINUS
60022: PUSH
60023: LD_VAR 0 2
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: LIST
60035: PUSH
60036: LD_VAR 0 1
60040: PUSH
60041: LD_INT 4
60043: MINUS
60044: PUSH
60045: LD_VAR 0 2
60049: PUSH
60050: LD_INT 4
60052: MINUS
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: ST_TO_ADDR
// end ; 3 :
60069: GO 60491
60071: LD_INT 3
60073: DOUBLE
60074: EQUAL
60075: IFTRUE 60079
60077: GO 60212
60079: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60080: LD_ADDR_VAR 0 5
60084: PUSH
60085: LD_VAR 0 1
60089: PUSH
60090: LD_INT 3
60092: PLUS
60093: PUSH
60094: LD_VAR 0 2
60098: PUSH
60099: LD_INT 4
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: LIST
60106: PUSH
60107: LD_VAR 0 1
60111: PUSH
60112: LD_INT 4
60114: PLUS
60115: PUSH
60116: LD_VAR 0 2
60120: PUSH
60121: LD_INT 4
60123: PLUS
60124: PUSH
60125: LD_INT 5
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: PUSH
60133: LD_VAR 0 1
60137: PUSH
60138: LD_INT 4
60140: MINUS
60141: PUSH
60142: LD_VAR 0 2
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: LIST
60154: PUSH
60155: LD_VAR 0 1
60159: PUSH
60160: LD_VAR 0 2
60164: PUSH
60165: LD_INT 4
60167: MINUS
60168: PUSH
60169: LD_INT 3
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: LIST
60176: PUSH
60177: LD_VAR 0 1
60181: PUSH
60182: LD_INT 3
60184: MINUS
60185: PUSH
60186: LD_VAR 0 2
60190: PUSH
60191: LD_INT 3
60193: MINUS
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: ST_TO_ADDR
// end ; 4 :
60210: GO 60491
60212: LD_INT 4
60214: DOUBLE
60215: EQUAL
60216: IFTRUE 60220
60218: GO 60353
60220: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60221: LD_ADDR_VAR 0 5
60225: PUSH
60226: LD_VAR 0 1
60230: PUSH
60231: LD_VAR 0 2
60235: PUSH
60236: LD_INT 4
60238: PLUS
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: PUSH
60248: LD_VAR 0 1
60252: PUSH
60253: LD_INT 3
60255: PLUS
60256: PUSH
60257: LD_VAR 0 2
60261: PUSH
60262: LD_INT 3
60264: PLUS
60265: PUSH
60266: LD_INT 5
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: PUSH
60274: LD_VAR 0 1
60278: PUSH
60279: LD_INT 4
60281: PLUS
60282: PUSH
60283: LD_VAR 0 2
60287: PUSH
60288: LD_INT 4
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: LIST
60295: PUSH
60296: LD_VAR 0 1
60300: PUSH
60301: LD_VAR 0 2
60305: PUSH
60306: LD_INT 3
60308: MINUS
60309: PUSH
60310: LD_INT 3
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: PUSH
60318: LD_VAR 0 1
60322: PUSH
60323: LD_INT 4
60325: MINUS
60326: PUSH
60327: LD_VAR 0 2
60331: PUSH
60332: LD_INT 4
60334: MINUS
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: ST_TO_ADDR
// end ; 5 :
60351: GO 60491
60353: LD_INT 5
60355: DOUBLE
60356: EQUAL
60357: IFTRUE 60361
60359: GO 60490
60361: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60362: LD_ADDR_VAR 0 5
60366: PUSH
60367: LD_VAR 0 1
60371: PUSH
60372: LD_INT 4
60374: MINUS
60375: PUSH
60376: LD_VAR 0 2
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: LD_VAR 0 1
60393: PUSH
60394: LD_VAR 0 2
60398: PUSH
60399: LD_INT 4
60401: MINUS
60402: PUSH
60403: LD_INT 3
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: PUSH
60411: LD_VAR 0 1
60415: PUSH
60416: LD_INT 4
60418: PLUS
60419: PUSH
60420: LD_VAR 0 2
60424: PUSH
60425: LD_INT 4
60427: PLUS
60428: PUSH
60429: LD_INT 5
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: LIST
60436: PUSH
60437: LD_VAR 0 1
60441: PUSH
60442: LD_INT 3
60444: PLUS
60445: PUSH
60446: LD_VAR 0 2
60450: PUSH
60451: LD_INT 4
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: PUSH
60459: LD_VAR 0 1
60463: PUSH
60464: LD_VAR 0 2
60468: PUSH
60469: LD_INT 3
60471: PLUS
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: ST_TO_ADDR
// end ; end ;
60488: GO 60491
60490: POP
// result := list ;
60491: LD_ADDR_VAR 0 4
60495: PUSH
60496: LD_VAR 0 5
60500: ST_TO_ADDR
// end ;
60501: LD_VAR 0 4
60505: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60506: LD_INT 0
60508: PPUSH
60509: PPUSH
60510: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60511: LD_VAR 0 1
60515: NOT
60516: PUSH
60517: LD_VAR 0 2
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: LD_INT 4
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: IN
60540: NOT
60541: OR
60542: IFFALSE 60546
// exit ;
60544: GO 60638
// tmp := [ ] ;
60546: LD_ADDR_VAR 0 5
60550: PUSH
60551: EMPTY
60552: ST_TO_ADDR
// for i in units do
60553: LD_ADDR_VAR 0 4
60557: PUSH
60558: LD_VAR 0 1
60562: PUSH
60563: FOR_IN
60564: IFFALSE 60607
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60566: LD_ADDR_VAR 0 5
60570: PUSH
60571: LD_VAR 0 5
60575: PPUSH
60576: LD_VAR 0 5
60580: PUSH
60581: LD_INT 1
60583: PLUS
60584: PPUSH
60585: LD_VAR 0 4
60589: PPUSH
60590: LD_VAR 0 2
60594: PPUSH
60595: CALL_OW 259
60599: PPUSH
60600: CALL_OW 2
60604: ST_TO_ADDR
60605: GO 60563
60607: POP
60608: POP
// if not tmp then
60609: LD_VAR 0 5
60613: NOT
60614: IFFALSE 60618
// exit ;
60616: GO 60638
// result := SortListByListDesc ( units , tmp ) ;
60618: LD_ADDR_VAR 0 3
60622: PUSH
60623: LD_VAR 0 1
60627: PPUSH
60628: LD_VAR 0 5
60632: PPUSH
60633: CALL_OW 77
60637: ST_TO_ADDR
// end ;
60638: LD_VAR 0 3
60642: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60643: LD_INT 0
60645: PPUSH
60646: PPUSH
60647: PPUSH
// result := false ;
60648: LD_ADDR_VAR 0 3
60652: PUSH
60653: LD_INT 0
60655: ST_TO_ADDR
// x := GetX ( building ) ;
60656: LD_ADDR_VAR 0 4
60660: PUSH
60661: LD_VAR 0 2
60665: PPUSH
60666: CALL_OW 250
60670: ST_TO_ADDR
// y := GetY ( building ) ;
60671: LD_ADDR_VAR 0 5
60675: PUSH
60676: LD_VAR 0 2
60680: PPUSH
60681: CALL_OW 251
60685: ST_TO_ADDR
// if not building or not x or not y then
60686: LD_VAR 0 2
60690: NOT
60691: PUSH
60692: LD_VAR 0 4
60696: NOT
60697: OR
60698: PUSH
60699: LD_VAR 0 5
60703: NOT
60704: OR
60705: IFFALSE 60709
// exit ;
60707: GO 60801
// if GetTaskList ( unit ) then
60709: LD_VAR 0 1
60713: PPUSH
60714: CALL_OW 437
60718: IFFALSE 60801
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60720: LD_STRING e
60722: PUSH
60723: LD_VAR 0 1
60727: PPUSH
60728: CALL_OW 437
60732: PUSH
60733: LD_INT 1
60735: ARRAY
60736: PUSH
60737: LD_INT 1
60739: ARRAY
60740: EQUAL
60741: PUSH
60742: LD_VAR 0 4
60746: PUSH
60747: LD_VAR 0 1
60751: PPUSH
60752: CALL_OW 437
60756: PUSH
60757: LD_INT 1
60759: ARRAY
60760: PUSH
60761: LD_INT 2
60763: ARRAY
60764: EQUAL
60765: AND
60766: PUSH
60767: LD_VAR 0 5
60771: PUSH
60772: LD_VAR 0 1
60776: PPUSH
60777: CALL_OW 437
60781: PUSH
60782: LD_INT 1
60784: ARRAY
60785: PUSH
60786: LD_INT 3
60788: ARRAY
60789: EQUAL
60790: AND
60791: IFFALSE 60801
// result := true end ;
60793: LD_ADDR_VAR 0 3
60797: PUSH
60798: LD_INT 1
60800: ST_TO_ADDR
// end ;
60801: LD_VAR 0 3
60805: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60806: LD_INT 0
60808: PPUSH
// result := false ;
60809: LD_ADDR_VAR 0 4
60813: PUSH
60814: LD_INT 0
60816: ST_TO_ADDR
// if GetTaskList ( unit ) then
60817: LD_VAR 0 1
60821: PPUSH
60822: CALL_OW 437
60826: IFFALSE 60909
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60828: LD_STRING M
60830: PUSH
60831: LD_VAR 0 1
60835: PPUSH
60836: CALL_OW 437
60840: PUSH
60841: LD_INT 1
60843: ARRAY
60844: PUSH
60845: LD_INT 1
60847: ARRAY
60848: EQUAL
60849: PUSH
60850: LD_VAR 0 2
60854: PUSH
60855: LD_VAR 0 1
60859: PPUSH
60860: CALL_OW 437
60864: PUSH
60865: LD_INT 1
60867: ARRAY
60868: PUSH
60869: LD_INT 2
60871: ARRAY
60872: EQUAL
60873: AND
60874: PUSH
60875: LD_VAR 0 3
60879: PUSH
60880: LD_VAR 0 1
60884: PPUSH
60885: CALL_OW 437
60889: PUSH
60890: LD_INT 1
60892: ARRAY
60893: PUSH
60894: LD_INT 3
60896: ARRAY
60897: EQUAL
60898: AND
60899: IFFALSE 60909
// result := true ;
60901: LD_ADDR_VAR 0 4
60905: PUSH
60906: LD_INT 1
60908: ST_TO_ADDR
// end ; end ;
60909: LD_VAR 0 4
60913: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60914: LD_INT 0
60916: PPUSH
60917: PPUSH
60918: PPUSH
60919: PPUSH
// if not unit or not area then
60920: LD_VAR 0 1
60924: NOT
60925: PUSH
60926: LD_VAR 0 2
60930: NOT
60931: OR
60932: IFFALSE 60936
// exit ;
60934: GO 61100
// tmp := AreaToList ( area , i ) ;
60936: LD_ADDR_VAR 0 6
60940: PUSH
60941: LD_VAR 0 2
60945: PPUSH
60946: LD_VAR 0 5
60950: PPUSH
60951: CALL_OW 517
60955: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60956: LD_ADDR_VAR 0 5
60960: PUSH
60961: DOUBLE
60962: LD_INT 1
60964: DEC
60965: ST_TO_ADDR
60966: LD_VAR 0 6
60970: PUSH
60971: LD_INT 1
60973: ARRAY
60974: PUSH
60975: FOR_TO
60976: IFFALSE 61098
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60978: LD_ADDR_VAR 0 7
60982: PUSH
60983: LD_VAR 0 6
60987: PUSH
60988: LD_INT 1
60990: ARRAY
60991: PUSH
60992: LD_VAR 0 5
60996: ARRAY
60997: PUSH
60998: LD_VAR 0 6
61002: PUSH
61003: LD_INT 2
61005: ARRAY
61006: PUSH
61007: LD_VAR 0 5
61011: ARRAY
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61017: LD_VAR 0 7
61021: PUSH
61022: LD_INT 1
61024: ARRAY
61025: PPUSH
61026: LD_VAR 0 7
61030: PUSH
61031: LD_INT 2
61033: ARRAY
61034: PPUSH
61035: CALL_OW 428
61039: PUSH
61040: LD_INT 0
61042: EQUAL
61043: IFFALSE 61096
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61045: LD_VAR 0 1
61049: PPUSH
61050: LD_VAR 0 7
61054: PUSH
61055: LD_INT 1
61057: ARRAY
61058: PPUSH
61059: LD_VAR 0 7
61063: PUSH
61064: LD_INT 2
61066: ARRAY
61067: PPUSH
61068: LD_VAR 0 3
61072: PPUSH
61073: CALL_OW 48
// result := IsPlaced ( unit ) ;
61077: LD_ADDR_VAR 0 4
61081: PUSH
61082: LD_VAR 0 1
61086: PPUSH
61087: CALL_OW 305
61091: ST_TO_ADDR
// exit ;
61092: POP
61093: POP
61094: GO 61100
// end ; end ;
61096: GO 60975
61098: POP
61099: POP
// end ;
61100: LD_VAR 0 4
61104: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61105: LD_INT 0
61107: PPUSH
61108: PPUSH
61109: PPUSH
// if not side or side > 8 then
61110: LD_VAR 0 1
61114: NOT
61115: PUSH
61116: LD_VAR 0 1
61120: PUSH
61121: LD_INT 8
61123: GREATER
61124: OR
61125: IFFALSE 61129
// exit ;
61127: GO 61316
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61129: LD_ADDR_VAR 0 4
61133: PUSH
61134: LD_INT 22
61136: PUSH
61137: LD_VAR 0 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 21
61148: PUSH
61149: LD_INT 3
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PPUSH
61160: CALL_OW 69
61164: ST_TO_ADDR
// if not tmp then
61165: LD_VAR 0 4
61169: NOT
61170: IFFALSE 61174
// exit ;
61172: GO 61316
// enable_addtolog := true ;
61174: LD_ADDR_OWVAR 81
61178: PUSH
61179: LD_INT 1
61181: ST_TO_ADDR
// AddToLog ( [ ) ;
61182: LD_STRING [
61184: PPUSH
61185: CALL_OW 561
// for i in tmp do
61189: LD_ADDR_VAR 0 3
61193: PUSH
61194: LD_VAR 0 4
61198: PUSH
61199: FOR_IN
61200: IFFALSE 61307
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61202: LD_STRING [
61204: PUSH
61205: LD_VAR 0 3
61209: PPUSH
61210: CALL_OW 266
61214: STR
61215: PUSH
61216: LD_STRING , 
61218: STR
61219: PUSH
61220: LD_VAR 0 3
61224: PPUSH
61225: CALL_OW 250
61229: STR
61230: PUSH
61231: LD_STRING , 
61233: STR
61234: PUSH
61235: LD_VAR 0 3
61239: PPUSH
61240: CALL_OW 251
61244: STR
61245: PUSH
61246: LD_STRING , 
61248: STR
61249: PUSH
61250: LD_VAR 0 3
61254: PPUSH
61255: CALL_OW 254
61259: STR
61260: PUSH
61261: LD_STRING , 
61263: STR
61264: PUSH
61265: LD_VAR 0 3
61269: PPUSH
61270: LD_INT 1
61272: PPUSH
61273: CALL_OW 268
61277: STR
61278: PUSH
61279: LD_STRING , 
61281: STR
61282: PUSH
61283: LD_VAR 0 3
61287: PPUSH
61288: LD_INT 2
61290: PPUSH
61291: CALL_OW 268
61295: STR
61296: PUSH
61297: LD_STRING ],
61299: STR
61300: PPUSH
61301: CALL_OW 561
// end ;
61305: GO 61199
61307: POP
61308: POP
// AddToLog ( ]; ) ;
61309: LD_STRING ];
61311: PPUSH
61312: CALL_OW 561
// end ;
61316: LD_VAR 0 2
61320: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61321: LD_INT 0
61323: PPUSH
61324: PPUSH
61325: PPUSH
61326: PPUSH
61327: PPUSH
// if not area or not rate or not max then
61328: LD_VAR 0 1
61332: NOT
61333: PUSH
61334: LD_VAR 0 2
61338: NOT
61339: OR
61340: PUSH
61341: LD_VAR 0 4
61345: NOT
61346: OR
61347: IFFALSE 61351
// exit ;
61349: GO 61543
// while 1 do
61351: LD_INT 1
61353: IFFALSE 61543
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61355: LD_ADDR_VAR 0 9
61359: PUSH
61360: LD_VAR 0 1
61364: PPUSH
61365: LD_INT 1
61367: PPUSH
61368: CALL_OW 287
61372: PUSH
61373: LD_INT 10
61375: MUL
61376: ST_TO_ADDR
// r := rate / 10 ;
61377: LD_ADDR_VAR 0 7
61381: PUSH
61382: LD_VAR 0 2
61386: PUSH
61387: LD_INT 10
61389: DIVREAL
61390: ST_TO_ADDR
// time := 1 1$00 ;
61391: LD_ADDR_VAR 0 8
61395: PUSH
61396: LD_INT 2100
61398: ST_TO_ADDR
// if amount < min then
61399: LD_VAR 0 9
61403: PUSH
61404: LD_VAR 0 3
61408: LESS
61409: IFFALSE 61427
// r := r * 2 else
61411: LD_ADDR_VAR 0 7
61415: PUSH
61416: LD_VAR 0 7
61420: PUSH
61421: LD_INT 2
61423: MUL
61424: ST_TO_ADDR
61425: GO 61453
// if amount > max then
61427: LD_VAR 0 9
61431: PUSH
61432: LD_VAR 0 4
61436: GREATER
61437: IFFALSE 61453
// r := r / 2 ;
61439: LD_ADDR_VAR 0 7
61443: PUSH
61444: LD_VAR 0 7
61448: PUSH
61449: LD_INT 2
61451: DIVREAL
61452: ST_TO_ADDR
// time := time / r ;
61453: LD_ADDR_VAR 0 8
61457: PUSH
61458: LD_VAR 0 8
61462: PUSH
61463: LD_VAR 0 7
61467: DIVREAL
61468: ST_TO_ADDR
// if time < 0 then
61469: LD_VAR 0 8
61473: PUSH
61474: LD_INT 0
61476: LESS
61477: IFFALSE 61494
// time := time * - 1 ;
61479: LD_ADDR_VAR 0 8
61483: PUSH
61484: LD_VAR 0 8
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: MUL
61493: ST_TO_ADDR
// wait ( time ) ;
61494: LD_VAR 0 8
61498: PPUSH
61499: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61503: LD_INT 35
61505: PPUSH
61506: LD_INT 875
61508: PPUSH
61509: CALL_OW 12
61513: PPUSH
61514: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61518: LD_INT 1
61520: PPUSH
61521: LD_INT 5
61523: PPUSH
61524: CALL_OW 12
61528: PPUSH
61529: LD_VAR 0 1
61533: PPUSH
61534: LD_INT 1
61536: PPUSH
61537: CALL_OW 55
// end ;
61541: GO 61351
// end ;
61543: LD_VAR 0 5
61547: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61548: LD_INT 0
61550: PPUSH
61551: PPUSH
61552: PPUSH
61553: PPUSH
61554: PPUSH
61555: PPUSH
61556: PPUSH
61557: PPUSH
// if not turrets or not factories then
61558: LD_VAR 0 1
61562: NOT
61563: PUSH
61564: LD_VAR 0 2
61568: NOT
61569: OR
61570: IFFALSE 61574
// exit ;
61572: GO 61881
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61574: LD_ADDR_VAR 0 10
61578: PUSH
61579: LD_INT 5
61581: PUSH
61582: LD_INT 6
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: LD_INT 4
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: LD_INT 5
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 24
61616: PUSH
61617: LD_INT 25
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 23
61626: PUSH
61627: LD_INT 27
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 42
61640: PUSH
61641: LD_INT 43
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 44
61650: PUSH
61651: LD_INT 46
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 45
61660: PUSH
61661: LD_INT 47
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: LIST
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: LIST
61677: ST_TO_ADDR
// result := [ ] ;
61678: LD_ADDR_VAR 0 3
61682: PUSH
61683: EMPTY
61684: ST_TO_ADDR
// for i in turrets do
61685: LD_ADDR_VAR 0 4
61689: PUSH
61690: LD_VAR 0 1
61694: PUSH
61695: FOR_IN
61696: IFFALSE 61879
// begin nat := GetNation ( i ) ;
61698: LD_ADDR_VAR 0 7
61702: PUSH
61703: LD_VAR 0 4
61707: PPUSH
61708: CALL_OW 248
61712: ST_TO_ADDR
// weapon := 0 ;
61713: LD_ADDR_VAR 0 8
61717: PUSH
61718: LD_INT 0
61720: ST_TO_ADDR
// if not nat then
61721: LD_VAR 0 7
61725: NOT
61726: IFFALSE 61730
// continue ;
61728: GO 61695
// for j in list [ nat ] do
61730: LD_ADDR_VAR 0 5
61734: PUSH
61735: LD_VAR 0 10
61739: PUSH
61740: LD_VAR 0 7
61744: ARRAY
61745: PUSH
61746: FOR_IN
61747: IFFALSE 61788
// if GetBWeapon ( i ) = j [ 1 ] then
61749: LD_VAR 0 4
61753: PPUSH
61754: CALL_OW 269
61758: PUSH
61759: LD_VAR 0 5
61763: PUSH
61764: LD_INT 1
61766: ARRAY
61767: EQUAL
61768: IFFALSE 61786
// begin weapon := j [ 2 ] ;
61770: LD_ADDR_VAR 0 8
61774: PUSH
61775: LD_VAR 0 5
61779: PUSH
61780: LD_INT 2
61782: ARRAY
61783: ST_TO_ADDR
// break ;
61784: GO 61788
// end ;
61786: GO 61746
61788: POP
61789: POP
// if not weapon then
61790: LD_VAR 0 8
61794: NOT
61795: IFFALSE 61799
// continue ;
61797: GO 61695
// for k in factories do
61799: LD_ADDR_VAR 0 6
61803: PUSH
61804: LD_VAR 0 2
61808: PUSH
61809: FOR_IN
61810: IFFALSE 61875
// begin weapons := AvailableWeaponList ( k ) ;
61812: LD_ADDR_VAR 0 9
61816: PUSH
61817: LD_VAR 0 6
61821: PPUSH
61822: CALL_OW 478
61826: ST_TO_ADDR
// if not weapons then
61827: LD_VAR 0 9
61831: NOT
61832: IFFALSE 61836
// continue ;
61834: GO 61809
// if weapon in weapons then
61836: LD_VAR 0 8
61840: PUSH
61841: LD_VAR 0 9
61845: IN
61846: IFFALSE 61873
// begin result := [ i , weapon ] ;
61848: LD_ADDR_VAR 0 3
61852: PUSH
61853: LD_VAR 0 4
61857: PUSH
61858: LD_VAR 0 8
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: ST_TO_ADDR
// exit ;
61867: POP
61868: POP
61869: POP
61870: POP
61871: GO 61881
// end ; end ;
61873: GO 61809
61875: POP
61876: POP
// end ;
61877: GO 61695
61879: POP
61880: POP
// end ;
61881: LD_VAR 0 3
61885: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61886: LD_INT 0
61888: PPUSH
// if not side or side > 8 then
61889: LD_VAR 0 3
61893: NOT
61894: PUSH
61895: LD_VAR 0 3
61899: PUSH
61900: LD_INT 8
61902: GREATER
61903: OR
61904: IFFALSE 61908
// exit ;
61906: GO 61967
// if not range then
61908: LD_VAR 0 4
61912: NOT
61913: IFFALSE 61924
// range := - 12 ;
61915: LD_ADDR_VAR 0 4
61919: PUSH
61920: LD_INT 12
61922: NEG
61923: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61924: LD_VAR 0 1
61928: PPUSH
61929: LD_VAR 0 2
61933: PPUSH
61934: LD_VAR 0 3
61938: PPUSH
61939: LD_VAR 0 4
61943: PPUSH
61944: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61948: LD_VAR 0 1
61952: PPUSH
61953: LD_VAR 0 2
61957: PPUSH
61958: LD_VAR 0 3
61962: PPUSH
61963: CALL_OW 331
// end ;
61967: LD_VAR 0 5
61971: RET
// export function Video ( mode ) ; begin
61972: LD_INT 0
61974: PPUSH
// ingame_video = mode ;
61975: LD_ADDR_OWVAR 52
61979: PUSH
61980: LD_VAR 0 1
61984: ST_TO_ADDR
// interface_hidden = mode ;
61985: LD_ADDR_OWVAR 54
61989: PUSH
61990: LD_VAR 0 1
61994: ST_TO_ADDR
// end ;
61995: LD_VAR 0 2
61999: RET
// export function Join ( array , element ) ; begin
62000: LD_INT 0
62002: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62003: LD_ADDR_VAR 0 3
62007: PUSH
62008: LD_VAR 0 1
62012: PPUSH
62013: LD_VAR 0 1
62017: PUSH
62018: LD_INT 1
62020: PLUS
62021: PPUSH
62022: LD_VAR 0 2
62026: PPUSH
62027: CALL_OW 1
62031: ST_TO_ADDR
// end ;
62032: LD_VAR 0 3
62036: RET
// export function JoinUnion ( array , element ) ; begin
62037: LD_INT 0
62039: PPUSH
// result := array union element ;
62040: LD_ADDR_VAR 0 3
62044: PUSH
62045: LD_VAR 0 1
62049: PUSH
62050: LD_VAR 0 2
62054: UNION
62055: ST_TO_ADDR
// end ;
62056: LD_VAR 0 3
62060: RET
// export function GetBehemoths ( side ) ; begin
62061: LD_INT 0
62063: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62064: LD_ADDR_VAR 0 2
62068: PUSH
62069: LD_INT 22
62071: PUSH
62072: LD_VAR 0 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 31
62083: PUSH
62084: LD_INT 25
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PPUSH
62095: CALL_OW 69
62099: ST_TO_ADDR
// end ;
62100: LD_VAR 0 2
62104: RET
// export function Shuffle ( array ) ; var i , index ; begin
62105: LD_INT 0
62107: PPUSH
62108: PPUSH
62109: PPUSH
// result := [ ] ;
62110: LD_ADDR_VAR 0 2
62114: PUSH
62115: EMPTY
62116: ST_TO_ADDR
// if not array then
62117: LD_VAR 0 1
62121: NOT
62122: IFFALSE 62126
// exit ;
62124: GO 62225
// Randomize ;
62126: CALL_OW 10
// for i = array downto 1 do
62130: LD_ADDR_VAR 0 3
62134: PUSH
62135: DOUBLE
62136: LD_VAR 0 1
62140: INC
62141: ST_TO_ADDR
62142: LD_INT 1
62144: PUSH
62145: FOR_DOWNTO
62146: IFFALSE 62223
// begin index := rand ( 1 , array ) ;
62148: LD_ADDR_VAR 0 4
62152: PUSH
62153: LD_INT 1
62155: PPUSH
62156: LD_VAR 0 1
62160: PPUSH
62161: CALL_OW 12
62165: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62166: LD_ADDR_VAR 0 2
62170: PUSH
62171: LD_VAR 0 2
62175: PPUSH
62176: LD_VAR 0 2
62180: PUSH
62181: LD_INT 1
62183: PLUS
62184: PPUSH
62185: LD_VAR 0 1
62189: PUSH
62190: LD_VAR 0 4
62194: ARRAY
62195: PPUSH
62196: CALL_OW 2
62200: ST_TO_ADDR
// array := Delete ( array , index ) ;
62201: LD_ADDR_VAR 0 1
62205: PUSH
62206: LD_VAR 0 1
62210: PPUSH
62211: LD_VAR 0 4
62215: PPUSH
62216: CALL_OW 3
62220: ST_TO_ADDR
// end ;
62221: GO 62145
62223: POP
62224: POP
// end ;
62225: LD_VAR 0 2
62229: RET
// export function GetBaseMaterials ( base ) ; begin
62230: LD_INT 0
62232: PPUSH
// result := [ 0 , 0 , 0 ] ;
62233: LD_ADDR_VAR 0 2
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// if not base then
62252: LD_VAR 0 1
62256: NOT
62257: IFFALSE 62261
// exit ;
62259: GO 62310
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62261: LD_ADDR_VAR 0 2
62265: PUSH
62266: LD_VAR 0 1
62270: PPUSH
62271: LD_INT 1
62273: PPUSH
62274: CALL_OW 275
62278: PUSH
62279: LD_VAR 0 1
62283: PPUSH
62284: LD_INT 2
62286: PPUSH
62287: CALL_OW 275
62291: PUSH
62292: LD_VAR 0 1
62296: PPUSH
62297: LD_INT 3
62299: PPUSH
62300: CALL_OW 275
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: LIST
62309: ST_TO_ADDR
// end ;
62310: LD_VAR 0 2
62314: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62315: LD_INT 0
62317: PPUSH
62318: PPUSH
// result := array ;
62319: LD_ADDR_VAR 0 3
62323: PUSH
62324: LD_VAR 0 1
62328: ST_TO_ADDR
// if size > 0 then
62329: LD_VAR 0 2
62333: PUSH
62334: LD_INT 0
62336: GREATER
62337: IFFALSE 62383
// for i := array downto size do
62339: LD_ADDR_VAR 0 4
62343: PUSH
62344: DOUBLE
62345: LD_VAR 0 1
62349: INC
62350: ST_TO_ADDR
62351: LD_VAR 0 2
62355: PUSH
62356: FOR_DOWNTO
62357: IFFALSE 62381
// result := Delete ( result , result ) ;
62359: LD_ADDR_VAR 0 3
62363: PUSH
62364: LD_VAR 0 3
62368: PPUSH
62369: LD_VAR 0 3
62373: PPUSH
62374: CALL_OW 3
62378: ST_TO_ADDR
62379: GO 62356
62381: POP
62382: POP
// end ;
62383: LD_VAR 0 3
62387: RET
// export function ComExit ( unit ) ; var tmp ; begin
62388: LD_INT 0
62390: PPUSH
62391: PPUSH
// if not IsInUnit ( unit ) then
62392: LD_VAR 0 1
62396: PPUSH
62397: CALL_OW 310
62401: NOT
62402: IFFALSE 62406
// exit ;
62404: GO 62466
// tmp := IsInUnit ( unit ) ;
62406: LD_ADDR_VAR 0 3
62410: PUSH
62411: LD_VAR 0 1
62415: PPUSH
62416: CALL_OW 310
62420: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62421: LD_VAR 0 3
62425: PPUSH
62426: CALL_OW 247
62430: PUSH
62431: LD_INT 2
62433: EQUAL
62434: IFFALSE 62447
// ComExitVehicle ( unit ) else
62436: LD_VAR 0 1
62440: PPUSH
62441: CALL_OW 121
62445: GO 62456
// ComExitBuilding ( unit ) ;
62447: LD_VAR 0 1
62451: PPUSH
62452: CALL_OW 122
// result := tmp ;
62456: LD_ADDR_VAR 0 2
62460: PUSH
62461: LD_VAR 0 3
62465: ST_TO_ADDR
// end ;
62466: LD_VAR 0 2
62470: RET
// export function ComExitAll ( units ) ; var i ; begin
62471: LD_INT 0
62473: PPUSH
62474: PPUSH
// if not units then
62475: LD_VAR 0 1
62479: NOT
62480: IFFALSE 62484
// exit ;
62482: GO 62510
// for i in units do
62484: LD_ADDR_VAR 0 3
62488: PUSH
62489: LD_VAR 0 1
62493: PUSH
62494: FOR_IN
62495: IFFALSE 62508
// ComExit ( i ) ;
62497: LD_VAR 0 3
62501: PPUSH
62502: CALL 62388 0 1
62506: GO 62494
62508: POP
62509: POP
// end ;
62510: LD_VAR 0 2
62514: RET
// export function ResetHc ; begin
62515: LD_INT 0
62517: PPUSH
// InitHc ;
62518: CALL_OW 19
// hc_importance := 0 ;
62522: LD_ADDR_OWVAR 32
62526: PUSH
62527: LD_INT 0
62529: ST_TO_ADDR
// end ;
62530: LD_VAR 0 1
62534: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62535: LD_INT 0
62537: PPUSH
62538: PPUSH
62539: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62540: LD_ADDR_VAR 0 6
62544: PUSH
62545: LD_VAR 0 1
62549: PUSH
62550: LD_VAR 0 3
62554: PLUS
62555: PUSH
62556: LD_INT 2
62558: DIV
62559: ST_TO_ADDR
// if _x < 0 then
62560: LD_VAR 0 6
62564: PUSH
62565: LD_INT 0
62567: LESS
62568: IFFALSE 62585
// _x := _x * - 1 ;
62570: LD_ADDR_VAR 0 6
62574: PUSH
62575: LD_VAR 0 6
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: MUL
62584: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62585: LD_ADDR_VAR 0 7
62589: PUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_VAR 0 4
62599: PLUS
62600: PUSH
62601: LD_INT 2
62603: DIV
62604: ST_TO_ADDR
// if _y < 0 then
62605: LD_VAR 0 7
62609: PUSH
62610: LD_INT 0
62612: LESS
62613: IFFALSE 62630
// _y := _y * - 1 ;
62615: LD_ADDR_VAR 0 7
62619: PUSH
62620: LD_VAR 0 7
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: MUL
62629: ST_TO_ADDR
// result := [ _x , _y ] ;
62630: LD_ADDR_VAR 0 5
62634: PUSH
62635: LD_VAR 0 6
62639: PUSH
62640: LD_VAR 0 7
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// end ;
62649: LD_VAR 0 5
62653: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62654: LD_INT 0
62656: PPUSH
62657: PPUSH
62658: PPUSH
62659: PPUSH
// task := GetTaskList ( unit ) ;
62660: LD_ADDR_VAR 0 7
62664: PUSH
62665: LD_VAR 0 1
62669: PPUSH
62670: CALL_OW 437
62674: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62675: LD_VAR 0 7
62679: NOT
62680: PUSH
62681: LD_VAR 0 1
62685: PPUSH
62686: LD_VAR 0 2
62690: PPUSH
62691: CALL_OW 308
62695: NOT
62696: AND
62697: IFFALSE 62701
// exit ;
62699: GO 62819
// if IsInArea ( unit , area ) then
62701: LD_VAR 0 1
62705: PPUSH
62706: LD_VAR 0 2
62710: PPUSH
62711: CALL_OW 308
62715: IFFALSE 62733
// begin ComMoveToArea ( unit , goAway ) ;
62717: LD_VAR 0 1
62721: PPUSH
62722: LD_VAR 0 3
62726: PPUSH
62727: CALL_OW 113
// exit ;
62731: GO 62819
// end ; if task [ 1 ] [ 1 ] <> M then
62733: LD_VAR 0 7
62737: PUSH
62738: LD_INT 1
62740: ARRAY
62741: PUSH
62742: LD_INT 1
62744: ARRAY
62745: PUSH
62746: LD_STRING M
62748: NONEQUAL
62749: IFFALSE 62753
// exit ;
62751: GO 62819
// x := task [ 1 ] [ 2 ] ;
62753: LD_ADDR_VAR 0 5
62757: PUSH
62758: LD_VAR 0 7
62762: PUSH
62763: LD_INT 1
62765: ARRAY
62766: PUSH
62767: LD_INT 2
62769: ARRAY
62770: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62771: LD_ADDR_VAR 0 6
62775: PUSH
62776: LD_VAR 0 7
62780: PUSH
62781: LD_INT 1
62783: ARRAY
62784: PUSH
62785: LD_INT 3
62787: ARRAY
62788: ST_TO_ADDR
// if InArea ( x , y , area ) then
62789: LD_VAR 0 5
62793: PPUSH
62794: LD_VAR 0 6
62798: PPUSH
62799: LD_VAR 0 2
62803: PPUSH
62804: CALL_OW 309
62808: IFFALSE 62819
// ComStop ( unit ) ;
62810: LD_VAR 0 1
62814: PPUSH
62815: CALL_OW 141
// end ;
62819: LD_VAR 0 4
62823: RET
// export function Abs ( value ) ; begin
62824: LD_INT 0
62826: PPUSH
// result := value ;
62827: LD_ADDR_VAR 0 2
62831: PUSH
62832: LD_VAR 0 1
62836: ST_TO_ADDR
// if value < 0 then
62837: LD_VAR 0 1
62841: PUSH
62842: LD_INT 0
62844: LESS
62845: IFFALSE 62862
// result := value * - 1 ;
62847: LD_ADDR_VAR 0 2
62851: PUSH
62852: LD_VAR 0 1
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: MUL
62861: ST_TO_ADDR
// end ;
62862: LD_VAR 0 2
62866: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62867: LD_INT 0
62869: PPUSH
62870: PPUSH
62871: PPUSH
62872: PPUSH
62873: PPUSH
62874: PPUSH
62875: PPUSH
62876: PPUSH
// if not unit or not building then
62877: LD_VAR 0 1
62881: NOT
62882: PUSH
62883: LD_VAR 0 2
62887: NOT
62888: OR
62889: IFFALSE 62893
// exit ;
62891: GO 63119
// x := GetX ( building ) ;
62893: LD_ADDR_VAR 0 4
62897: PUSH
62898: LD_VAR 0 2
62902: PPUSH
62903: CALL_OW 250
62907: ST_TO_ADDR
// y := GetY ( building ) ;
62908: LD_ADDR_VAR 0 6
62912: PUSH
62913: LD_VAR 0 2
62917: PPUSH
62918: CALL_OW 251
62922: ST_TO_ADDR
// d := GetDir ( building ) ;
62923: LD_ADDR_VAR 0 8
62927: PUSH
62928: LD_VAR 0 2
62932: PPUSH
62933: CALL_OW 254
62937: ST_TO_ADDR
// r := 4 ;
62938: LD_ADDR_VAR 0 9
62942: PUSH
62943: LD_INT 4
62945: ST_TO_ADDR
// for i := 1 to 5 do
62946: LD_ADDR_VAR 0 10
62950: PUSH
62951: DOUBLE
62952: LD_INT 1
62954: DEC
62955: ST_TO_ADDR
62956: LD_INT 5
62958: PUSH
62959: FOR_TO
62960: IFFALSE 63117
// begin _x := ShiftX ( x , d , r + i ) ;
62962: LD_ADDR_VAR 0 5
62966: PUSH
62967: LD_VAR 0 4
62971: PPUSH
62972: LD_VAR 0 8
62976: PPUSH
62977: LD_VAR 0 9
62981: PUSH
62982: LD_VAR 0 10
62986: PLUS
62987: PPUSH
62988: CALL_OW 272
62992: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62993: LD_ADDR_VAR 0 7
62997: PUSH
62998: LD_VAR 0 6
63002: PPUSH
63003: LD_VAR 0 8
63007: PPUSH
63008: LD_VAR 0 9
63012: PUSH
63013: LD_VAR 0 10
63017: PLUS
63018: PPUSH
63019: CALL_OW 273
63023: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63024: LD_VAR 0 5
63028: PPUSH
63029: LD_VAR 0 7
63033: PPUSH
63034: CALL_OW 488
63038: PUSH
63039: LD_VAR 0 5
63043: PPUSH
63044: LD_VAR 0 7
63048: PPUSH
63049: CALL_OW 428
63053: PPUSH
63054: CALL_OW 247
63058: PUSH
63059: LD_INT 3
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: IN
63069: NOT
63070: AND
63071: IFFALSE 63115
// begin ComMoveXY ( unit , _x , _y ) ;
63073: LD_VAR 0 1
63077: PPUSH
63078: LD_VAR 0 5
63082: PPUSH
63083: LD_VAR 0 7
63087: PPUSH
63088: CALL_OW 111
// result := [ _x , _y ] ;
63092: LD_ADDR_VAR 0 3
63096: PUSH
63097: LD_VAR 0 5
63101: PUSH
63102: LD_VAR 0 7
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: ST_TO_ADDR
// exit ;
63111: POP
63112: POP
63113: GO 63119
// end ; end ;
63115: GO 62959
63117: POP
63118: POP
// end ;
63119: LD_VAR 0 3
63123: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63124: LD_INT 0
63126: PPUSH
63127: PPUSH
63128: PPUSH
// result := 0 ;
63129: LD_ADDR_VAR 0 3
63133: PUSH
63134: LD_INT 0
63136: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63137: LD_VAR 0 1
63141: PUSH
63142: LD_INT 0
63144: LESS
63145: PUSH
63146: LD_VAR 0 1
63150: PUSH
63151: LD_INT 8
63153: GREATER
63154: OR
63155: PUSH
63156: LD_VAR 0 2
63160: PUSH
63161: LD_INT 0
63163: LESS
63164: OR
63165: PUSH
63166: LD_VAR 0 2
63170: PUSH
63171: LD_INT 8
63173: GREATER
63174: OR
63175: IFFALSE 63179
// exit ;
63177: GO 63254
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63179: LD_ADDR_VAR 0 4
63183: PUSH
63184: LD_INT 22
63186: PUSH
63187: LD_VAR 0 2
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PPUSH
63196: CALL_OW 69
63200: PUSH
63201: FOR_IN
63202: IFFALSE 63252
// begin un := UnitShoot ( i ) ;
63204: LD_ADDR_VAR 0 5
63208: PUSH
63209: LD_VAR 0 4
63213: PPUSH
63214: CALL_OW 504
63218: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63219: LD_VAR 0 5
63223: PPUSH
63224: CALL_OW 255
63228: PUSH
63229: LD_VAR 0 1
63233: EQUAL
63234: IFFALSE 63250
// begin result := un ;
63236: LD_ADDR_VAR 0 3
63240: PUSH
63241: LD_VAR 0 5
63245: ST_TO_ADDR
// exit ;
63246: POP
63247: POP
63248: GO 63254
// end ; end ;
63250: GO 63201
63252: POP
63253: POP
// end ;
63254: LD_VAR 0 3
63258: RET
// export function GetCargoBay ( units ) ; begin
63259: LD_INT 0
63261: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63262: LD_ADDR_VAR 0 2
63266: PUSH
63267: LD_VAR 0 1
63271: PPUSH
63272: LD_INT 2
63274: PUSH
63275: LD_INT 34
63277: PUSH
63278: LD_INT 12
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 34
63287: PUSH
63288: LD_INT 51
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 34
63297: PUSH
63298: LD_INT 32
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 34
63307: PUSH
63308: LD_EXP 60
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: PPUSH
63324: CALL_OW 72
63328: ST_TO_ADDR
// end ;
63329: LD_VAR 0 2
63333: RET
// export function Negate ( value ) ; begin
63334: LD_INT 0
63336: PPUSH
// result := not value ;
63337: LD_ADDR_VAR 0 2
63341: PUSH
63342: LD_VAR 0 1
63346: NOT
63347: ST_TO_ADDR
// end ;
63348: LD_VAR 0 2
63352: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
63353: LD_INT 0
63355: PPUSH
// if x1 = x2 then
63356: LD_VAR 0 1
63360: PUSH
63361: LD_VAR 0 3
63365: EQUAL
63366: IFFALSE 63400
// begin if y1 > y2 then
63368: LD_VAR 0 2
63372: PUSH
63373: LD_VAR 0 4
63377: GREATER
63378: IFFALSE 63390
// result := 0 else
63380: LD_ADDR_VAR 0 5
63384: PUSH
63385: LD_INT 0
63387: ST_TO_ADDR
63388: GO 63398
// result := 3 ;
63390: LD_ADDR_VAR 0 5
63394: PUSH
63395: LD_INT 3
63397: ST_TO_ADDR
// exit ;
63398: GO 63486
// end ; if y1 = y2 then
63400: LD_VAR 0 2
63404: PUSH
63405: LD_VAR 0 4
63409: EQUAL
63410: IFFALSE 63444
// begin if x1 > x2 then
63412: LD_VAR 0 1
63416: PUSH
63417: LD_VAR 0 3
63421: GREATER
63422: IFFALSE 63434
// result := 1 else
63424: LD_ADDR_VAR 0 5
63428: PUSH
63429: LD_INT 1
63431: ST_TO_ADDR
63432: GO 63442
// result := 4 ;
63434: LD_ADDR_VAR 0 5
63438: PUSH
63439: LD_INT 4
63441: ST_TO_ADDR
// exit ;
63442: GO 63486
// end ; if x1 > x2 and y1 > y2 then
63444: LD_VAR 0 1
63448: PUSH
63449: LD_VAR 0 3
63453: GREATER
63454: PUSH
63455: LD_VAR 0 2
63459: PUSH
63460: LD_VAR 0 4
63464: GREATER
63465: AND
63466: IFFALSE 63478
// result := 2 else
63468: LD_ADDR_VAR 0 5
63472: PUSH
63473: LD_INT 2
63475: ST_TO_ADDR
63476: GO 63486
// result := 5 ;
63478: LD_ADDR_VAR 0 5
63482: PUSH
63483: LD_INT 5
63485: ST_TO_ADDR
// end ;
63486: LD_VAR 0 5
63490: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63491: LD_INT 0
63493: PPUSH
63494: PPUSH
// if not driver or not IsInUnit ( driver ) then
63495: LD_VAR 0 1
63499: NOT
63500: PUSH
63501: LD_VAR 0 1
63505: PPUSH
63506: CALL_OW 310
63510: NOT
63511: OR
63512: IFFALSE 63516
// exit ;
63514: GO 63606
// vehicle := IsInUnit ( driver ) ;
63516: LD_ADDR_VAR 0 3
63520: PUSH
63521: LD_VAR 0 1
63525: PPUSH
63526: CALL_OW 310
63530: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63531: LD_VAR 0 1
63535: PPUSH
63536: LD_STRING \
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: PUSH
63566: LD_STRING E
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: LD_VAR 0 3
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: LD_INT 0
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PPUSH
63602: CALL_OW 446
// end ;
63606: LD_VAR 0 2
63610: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63611: LD_INT 0
63613: PPUSH
63614: PPUSH
// if not driver or not IsInUnit ( driver ) then
63615: LD_VAR 0 1
63619: NOT
63620: PUSH
63621: LD_VAR 0 1
63625: PPUSH
63626: CALL_OW 310
63630: NOT
63631: OR
63632: IFFALSE 63636
// exit ;
63634: GO 63726
// vehicle := IsInUnit ( driver ) ;
63636: LD_ADDR_VAR 0 3
63640: PUSH
63641: LD_VAR 0 1
63645: PPUSH
63646: CALL_OW 310
63650: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63651: LD_VAR 0 1
63655: PPUSH
63656: LD_STRING \
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: PUSH
63686: LD_STRING E
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_VAR 0 3
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PPUSH
63722: CALL_OW 447
// end ;
63726: LD_VAR 0 2
63730: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63731: LD_INT 0
63733: PPUSH
63734: PPUSH
63735: PPUSH
// tmp := [ ] ;
63736: LD_ADDR_VAR 0 5
63740: PUSH
63741: EMPTY
63742: ST_TO_ADDR
// for i in units do
63743: LD_ADDR_VAR 0 4
63747: PUSH
63748: LD_VAR 0 1
63752: PUSH
63753: FOR_IN
63754: IFFALSE 63792
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63756: LD_ADDR_VAR 0 5
63760: PUSH
63761: LD_VAR 0 5
63765: PPUSH
63766: LD_VAR 0 5
63770: PUSH
63771: LD_INT 1
63773: PLUS
63774: PPUSH
63775: LD_VAR 0 4
63779: PPUSH
63780: CALL_OW 256
63784: PPUSH
63785: CALL_OW 2
63789: ST_TO_ADDR
63790: GO 63753
63792: POP
63793: POP
// if not tmp then
63794: LD_VAR 0 5
63798: NOT
63799: IFFALSE 63803
// exit ;
63801: GO 63851
// if asc then
63803: LD_VAR 0 2
63807: IFFALSE 63831
// result := SortListByListAsc ( units , tmp ) else
63809: LD_ADDR_VAR 0 3
63813: PUSH
63814: LD_VAR 0 1
63818: PPUSH
63819: LD_VAR 0 5
63823: PPUSH
63824: CALL_OW 76
63828: ST_TO_ADDR
63829: GO 63851
// result := SortListByListDesc ( units , tmp ) ;
63831: LD_ADDR_VAR 0 3
63835: PUSH
63836: LD_VAR 0 1
63840: PPUSH
63841: LD_VAR 0 5
63845: PPUSH
63846: CALL_OW 77
63850: ST_TO_ADDR
// end ;
63851: LD_VAR 0 3
63855: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63856: LD_INT 0
63858: PPUSH
63859: PPUSH
// task := GetTaskList ( mech ) ;
63860: LD_ADDR_VAR 0 4
63864: PUSH
63865: LD_VAR 0 1
63869: PPUSH
63870: CALL_OW 437
63874: ST_TO_ADDR
// if not task then
63875: LD_VAR 0 4
63879: NOT
63880: IFFALSE 63884
// exit ;
63882: GO 63926
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63884: LD_ADDR_VAR 0 3
63888: PUSH
63889: LD_VAR 0 4
63893: PUSH
63894: LD_INT 1
63896: ARRAY
63897: PUSH
63898: LD_INT 1
63900: ARRAY
63901: PUSH
63902: LD_STRING r
63904: EQUAL
63905: PUSH
63906: LD_VAR 0 4
63910: PUSH
63911: LD_INT 1
63913: ARRAY
63914: PUSH
63915: LD_INT 4
63917: ARRAY
63918: PUSH
63919: LD_VAR 0 2
63923: EQUAL
63924: AND
63925: ST_TO_ADDR
// end ;
63926: LD_VAR 0 3
63930: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63931: LD_INT 0
63933: PPUSH
// SetDir ( unit , d ) ;
63934: LD_VAR 0 1
63938: PPUSH
63939: LD_VAR 0 4
63943: PPUSH
63944: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63948: LD_VAR 0 1
63952: PPUSH
63953: LD_VAR 0 2
63957: PPUSH
63958: LD_VAR 0 3
63962: PPUSH
63963: LD_VAR 0 5
63967: PPUSH
63968: CALL_OW 48
// end ;
63972: LD_VAR 0 6
63976: RET
// export function ToNaturalNumber ( number ) ; begin
63977: LD_INT 0
63979: PPUSH
// result := number div 1 ;
63980: LD_ADDR_VAR 0 2
63984: PUSH
63985: LD_VAR 0 1
63989: PUSH
63990: LD_INT 1
63992: DIV
63993: ST_TO_ADDR
// if number < 0 then
63994: LD_VAR 0 1
63998: PUSH
63999: LD_INT 0
64001: LESS
64002: IFFALSE 64012
// result := 0 ;
64004: LD_ADDR_VAR 0 2
64008: PUSH
64009: LD_INT 0
64011: ST_TO_ADDR
// end ;
64012: LD_VAR 0 2
64016: RET
// export function SortByClass ( units , class ) ; var un ; begin
64017: LD_INT 0
64019: PPUSH
64020: PPUSH
// if not units or not class then
64021: LD_VAR 0 1
64025: NOT
64026: PUSH
64027: LD_VAR 0 2
64031: NOT
64032: OR
64033: IFFALSE 64037
// exit ;
64035: GO 64132
// result := [ ] ;
64037: LD_ADDR_VAR 0 3
64041: PUSH
64042: EMPTY
64043: ST_TO_ADDR
// for un in units do
64044: LD_ADDR_VAR 0 4
64048: PUSH
64049: LD_VAR 0 1
64053: PUSH
64054: FOR_IN
64055: IFFALSE 64130
// if GetClass ( un ) = class then
64057: LD_VAR 0 4
64061: PPUSH
64062: CALL_OW 257
64066: PUSH
64067: LD_VAR 0 2
64071: EQUAL
64072: IFFALSE 64099
// result := Insert ( result , 1 , un ) else
64074: LD_ADDR_VAR 0 3
64078: PUSH
64079: LD_VAR 0 3
64083: PPUSH
64084: LD_INT 1
64086: PPUSH
64087: LD_VAR 0 4
64091: PPUSH
64092: CALL_OW 2
64096: ST_TO_ADDR
64097: GO 64128
// result := Replace ( result , result + 1 , un ) ;
64099: LD_ADDR_VAR 0 3
64103: PUSH
64104: LD_VAR 0 3
64108: PPUSH
64109: LD_VAR 0 3
64113: PUSH
64114: LD_INT 1
64116: PLUS
64117: PPUSH
64118: LD_VAR 0 4
64122: PPUSH
64123: CALL_OW 1
64127: ST_TO_ADDR
64128: GO 64054
64130: POP
64131: POP
// end ;
64132: LD_VAR 0 3
64136: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64137: LD_INT 0
64139: PPUSH
64140: PPUSH
64141: PPUSH
64142: PPUSH
64143: PPUSH
64144: PPUSH
64145: PPUSH
// result := [ ] ;
64146: LD_ADDR_VAR 0 4
64150: PUSH
64151: EMPTY
64152: ST_TO_ADDR
// if x - r < 0 then
64153: LD_VAR 0 1
64157: PUSH
64158: LD_VAR 0 3
64162: MINUS
64163: PUSH
64164: LD_INT 0
64166: LESS
64167: IFFALSE 64179
// min_x := 0 else
64169: LD_ADDR_VAR 0 8
64173: PUSH
64174: LD_INT 0
64176: ST_TO_ADDR
64177: GO 64195
// min_x := x - r ;
64179: LD_ADDR_VAR 0 8
64183: PUSH
64184: LD_VAR 0 1
64188: PUSH
64189: LD_VAR 0 3
64193: MINUS
64194: ST_TO_ADDR
// if y - r < 0 then
64195: LD_VAR 0 2
64199: PUSH
64200: LD_VAR 0 3
64204: MINUS
64205: PUSH
64206: LD_INT 0
64208: LESS
64209: IFFALSE 64221
// min_y := 0 else
64211: LD_ADDR_VAR 0 7
64215: PUSH
64216: LD_INT 0
64218: ST_TO_ADDR
64219: GO 64237
// min_y := y - r ;
64221: LD_ADDR_VAR 0 7
64225: PUSH
64226: LD_VAR 0 2
64230: PUSH
64231: LD_VAR 0 3
64235: MINUS
64236: ST_TO_ADDR
// max_x := x + r ;
64237: LD_ADDR_VAR 0 9
64241: PUSH
64242: LD_VAR 0 1
64246: PUSH
64247: LD_VAR 0 3
64251: PLUS
64252: ST_TO_ADDR
// max_y := y + r ;
64253: LD_ADDR_VAR 0 10
64257: PUSH
64258: LD_VAR 0 2
64262: PUSH
64263: LD_VAR 0 3
64267: PLUS
64268: ST_TO_ADDR
// for _x = min_x to max_x do
64269: LD_ADDR_VAR 0 5
64273: PUSH
64274: DOUBLE
64275: LD_VAR 0 8
64279: DEC
64280: ST_TO_ADDR
64281: LD_VAR 0 9
64285: PUSH
64286: FOR_TO
64287: IFFALSE 64388
// for _y = min_y to max_y do
64289: LD_ADDR_VAR 0 6
64293: PUSH
64294: DOUBLE
64295: LD_VAR 0 7
64299: DEC
64300: ST_TO_ADDR
64301: LD_VAR 0 10
64305: PUSH
64306: FOR_TO
64307: IFFALSE 64384
// begin if not ValidHex ( _x , _y ) then
64309: LD_VAR 0 5
64313: PPUSH
64314: LD_VAR 0 6
64318: PPUSH
64319: CALL_OW 488
64323: NOT
64324: IFFALSE 64328
// continue ;
64326: GO 64306
// if GetResourceTypeXY ( _x , _y ) then
64328: LD_VAR 0 5
64332: PPUSH
64333: LD_VAR 0 6
64337: PPUSH
64338: CALL_OW 283
64342: IFFALSE 64382
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64344: LD_ADDR_VAR 0 4
64348: PUSH
64349: LD_VAR 0 4
64353: PPUSH
64354: LD_VAR 0 4
64358: PUSH
64359: LD_INT 1
64361: PLUS
64362: PPUSH
64363: LD_VAR 0 5
64367: PUSH
64368: LD_VAR 0 6
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PPUSH
64377: CALL_OW 1
64381: ST_TO_ADDR
// end ;
64382: GO 64306
64384: POP
64385: POP
64386: GO 64286
64388: POP
64389: POP
// end ;
64390: LD_VAR 0 4
64394: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
64395: LD_INT 0
64397: PPUSH
64398: PPUSH
64399: PPUSH
64400: PPUSH
64401: PPUSH
64402: PPUSH
// if not units then
64403: LD_VAR 0 1
64407: NOT
64408: IFFALSE 64412
// exit ;
64410: GO 64813
// result := UnitFilter ( units , [ f_ok ] ) ;
64412: LD_ADDR_VAR 0 3
64416: PUSH
64417: LD_VAR 0 1
64421: PPUSH
64422: LD_INT 50
64424: PUSH
64425: EMPTY
64426: LIST
64427: PPUSH
64428: CALL_OW 72
64432: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64433: LD_ADDR_VAR 0 7
64437: PUSH
64438: LD_VAR 0 1
64442: PUSH
64443: LD_INT 1
64445: ARRAY
64446: PPUSH
64447: CALL_OW 255
64451: ST_TO_ADDR
// if not result then
64452: LD_VAR 0 3
64456: NOT
64457: IFFALSE 64461
// exit ;
64459: GO 64813
// for i in result do
64461: LD_ADDR_VAR 0 4
64465: PUSH
64466: LD_VAR 0 3
64470: PUSH
64471: FOR_IN
64472: IFFALSE 64811
// begin tag := GetTag ( i ) + 1 ;
64474: LD_ADDR_VAR 0 8
64478: PUSH
64479: LD_VAR 0 4
64483: PPUSH
64484: CALL_OW 110
64488: PUSH
64489: LD_INT 1
64491: PLUS
64492: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64493: LD_ADDR_VAR 0 6
64497: PUSH
64498: LD_VAR 0 4
64502: PPUSH
64503: CALL_OW 250
64507: PPUSH
64508: LD_VAR 0 4
64512: PPUSH
64513: CALL_OW 251
64517: PPUSH
64518: LD_INT 6
64520: PPUSH
64521: CALL 64137 0 3
64525: ST_TO_ADDR
// if cr then
64526: LD_VAR 0 6
64530: IFFALSE 64569
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64532: LD_VAR 0 4
64536: PPUSH
64537: LD_VAR 0 6
64541: PUSH
64542: LD_INT 1
64544: ARRAY
64545: PUSH
64546: LD_INT 1
64548: ARRAY
64549: PPUSH
64550: LD_VAR 0 6
64554: PUSH
64555: LD_INT 1
64557: ARRAY
64558: PUSH
64559: LD_INT 2
64561: ARRAY
64562: PPUSH
64563: CALL_OW 116
64567: GO 64809
// if path > tag then
64569: LD_VAR 0 2
64573: PUSH
64574: LD_VAR 0 8
64578: GREATER
64579: IFFALSE 64757
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
64581: LD_ADDR_VAR 0 5
64585: PUSH
64586: LD_INT 81
64588: PUSH
64589: LD_VAR 0 7
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 91
64600: PUSH
64601: LD_VAR 0 4
64605: PUSH
64606: LD_INT 12
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PPUSH
64618: CALL_OW 69
64622: ST_TO_ADDR
// if enemy then
64623: LD_VAR 0 5
64627: IFFALSE 64655
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64629: LD_VAR 0 4
64633: PPUSH
64634: LD_VAR 0 5
64638: PPUSH
64639: LD_VAR 0 4
64643: PPUSH
64644: CALL_OW 74
64648: PPUSH
64649: CALL_OW 115
64653: GO 64755
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64655: LD_VAR 0 4
64659: PPUSH
64660: LD_VAR 0 2
64664: PUSH
64665: LD_VAR 0 8
64669: ARRAY
64670: PUSH
64671: LD_INT 1
64673: ARRAY
64674: PPUSH
64675: LD_VAR 0 2
64679: PUSH
64680: LD_VAR 0 8
64684: ARRAY
64685: PUSH
64686: LD_INT 2
64688: ARRAY
64689: PPUSH
64690: CALL_OW 297
64694: PUSH
64695: LD_INT 6
64697: GREATER
64698: IFFALSE 64741
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64700: LD_VAR 0 4
64704: PPUSH
64705: LD_VAR 0 2
64709: PUSH
64710: LD_VAR 0 8
64714: ARRAY
64715: PUSH
64716: LD_INT 1
64718: ARRAY
64719: PPUSH
64720: LD_VAR 0 2
64724: PUSH
64725: LD_VAR 0 8
64729: ARRAY
64730: PUSH
64731: LD_INT 2
64733: ARRAY
64734: PPUSH
64735: CALL_OW 114
64739: GO 64755
// SetTag ( i , tag ) ;
64741: LD_VAR 0 4
64745: PPUSH
64746: LD_VAR 0 8
64750: PPUSH
64751: CALL_OW 109
// end else
64755: GO 64809
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64757: LD_ADDR_VAR 0 5
64761: PUSH
64762: LD_INT 81
64764: PUSH
64765: LD_VAR 0 7
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PPUSH
64774: CALL_OW 69
64778: ST_TO_ADDR
// if enemy then
64779: LD_VAR 0 5
64783: IFFALSE 64809
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64785: LD_VAR 0 4
64789: PPUSH
64790: LD_VAR 0 5
64794: PPUSH
64795: LD_VAR 0 4
64799: PPUSH
64800: CALL_OW 74
64804: PPUSH
64805: CALL_OW 115
// end ; end ;
64809: GO 64471
64811: POP
64812: POP
// end ; end_of_file
64813: LD_VAR 0 3
64817: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
64818: LD_INT 0
64820: PPUSH
// ar_miner := 81 ;
64821: LD_ADDR_EXP 66
64825: PUSH
64826: LD_INT 81
64828: ST_TO_ADDR
// ar_crane := 88 ;
64829: LD_ADDR_EXP 65
64833: PUSH
64834: LD_INT 88
64836: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
64837: LD_ADDR_EXP 60
64841: PUSH
64842: LD_INT 89
64844: ST_TO_ADDR
// us_hack := 99 ;
64845: LD_ADDR_EXP 61
64849: PUSH
64850: LD_INT 99
64852: ST_TO_ADDR
// us_artillery := 97 ;
64853: LD_ADDR_EXP 62
64857: PUSH
64858: LD_INT 97
64860: ST_TO_ADDR
// ar_bio_bomb := 91 ;
64861: LD_ADDR_EXP 63
64865: PUSH
64866: LD_INT 91
64868: ST_TO_ADDR
// ar_mortar := 92 ;
64869: LD_ADDR_EXP 64
64873: PUSH
64874: LD_INT 92
64876: ST_TO_ADDR
// ru_radar := 98 ;
64877: LD_ADDR_EXP 59
64881: PUSH
64882: LD_INT 98
64884: ST_TO_ADDR
// tech_Artillery := 80 ;
64885: LD_ADDR_EXP 67
64889: PUSH
64890: LD_INT 80
64892: ST_TO_ADDR
// tech_RadMat := 81 ;
64893: LD_ADDR_EXP 68
64897: PUSH
64898: LD_INT 81
64900: ST_TO_ADDR
// tech_BasicTools := 82 ;
64901: LD_ADDR_EXP 69
64905: PUSH
64906: LD_INT 82
64908: ST_TO_ADDR
// tech_Cargo := 83 ;
64909: LD_ADDR_EXP 70
64913: PUSH
64914: LD_INT 83
64916: ST_TO_ADDR
// tech_Track := 84 ;
64917: LD_ADDR_EXP 71
64921: PUSH
64922: LD_INT 84
64924: ST_TO_ADDR
// tech_Crane := 85 ;
64925: LD_ADDR_EXP 72
64929: PUSH
64930: LD_INT 85
64932: ST_TO_ADDR
// tech_Bulldozer := 86 ;
64933: LD_ADDR_EXP 73
64937: PUSH
64938: LD_INT 86
64940: ST_TO_ADDR
// tech_Hovercraft := 87 ;
64941: LD_ADDR_EXP 74
64945: PUSH
64946: LD_INT 87
64948: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
64949: LD_ADDR_EXP 75
64953: PUSH
64954: LD_INT 88
64956: ST_TO_ADDR
// class_mastodont := 31 ;
64957: LD_ADDR_EXP 76
64961: PUSH
64962: LD_INT 31
64964: ST_TO_ADDR
// class_horse := 21 ;
64965: LD_ADDR_EXP 77
64969: PUSH
64970: LD_INT 21
64972: ST_TO_ADDR
// end ;
64973: LD_VAR 0 1
64977: RET
// every 1 do
64978: GO 64980
64980: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
64981: CALL 64818 0 0
64985: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64986: LD_INT 0
64988: PPUSH
// if p2 = 100 then
64989: LD_VAR 0 2
64993: PUSH
64994: LD_INT 100
64996: EQUAL
64997: IFFALSE 65946
// begin if not StreamModeActive then
64999: LD_EXP 78
65003: NOT
65004: IFFALSE 65014
// StreamModeActive := true ;
65006: LD_ADDR_EXP 78
65010: PUSH
65011: LD_INT 1
65013: ST_TO_ADDR
// if p3 = 0 then
65014: LD_VAR 0 3
65018: PUSH
65019: LD_INT 0
65021: EQUAL
65022: IFFALSE 65028
// InitStreamMode ;
65024: CALL 66106 0 0
// if p3 = 1 then
65028: LD_VAR 0 3
65032: PUSH
65033: LD_INT 1
65035: EQUAL
65036: IFFALSE 65046
// sRocket := true ;
65038: LD_ADDR_EXP 83
65042: PUSH
65043: LD_INT 1
65045: ST_TO_ADDR
// if p3 = 2 then
65046: LD_VAR 0 3
65050: PUSH
65051: LD_INT 2
65053: EQUAL
65054: IFFALSE 65064
// sSpeed := true ;
65056: LD_ADDR_EXP 82
65060: PUSH
65061: LD_INT 1
65063: ST_TO_ADDR
// if p3 = 3 then
65064: LD_VAR 0 3
65068: PUSH
65069: LD_INT 3
65071: EQUAL
65072: IFFALSE 65082
// sEngine := true ;
65074: LD_ADDR_EXP 84
65078: PUSH
65079: LD_INT 1
65081: ST_TO_ADDR
// if p3 = 4 then
65082: LD_VAR 0 3
65086: PUSH
65087: LD_INT 4
65089: EQUAL
65090: IFFALSE 65100
// sSpec := true ;
65092: LD_ADDR_EXP 81
65096: PUSH
65097: LD_INT 1
65099: ST_TO_ADDR
// if p3 = 5 then
65100: LD_VAR 0 3
65104: PUSH
65105: LD_INT 5
65107: EQUAL
65108: IFFALSE 65118
// sLevel := true ;
65110: LD_ADDR_EXP 85
65114: PUSH
65115: LD_INT 1
65117: ST_TO_ADDR
// if p3 = 6 then
65118: LD_VAR 0 3
65122: PUSH
65123: LD_INT 6
65125: EQUAL
65126: IFFALSE 65136
// sArmoury := true ;
65128: LD_ADDR_EXP 86
65132: PUSH
65133: LD_INT 1
65135: ST_TO_ADDR
// if p3 = 7 then
65136: LD_VAR 0 3
65140: PUSH
65141: LD_INT 7
65143: EQUAL
65144: IFFALSE 65154
// sRadar := true ;
65146: LD_ADDR_EXP 87
65150: PUSH
65151: LD_INT 1
65153: ST_TO_ADDR
// if p3 = 8 then
65154: LD_VAR 0 3
65158: PUSH
65159: LD_INT 8
65161: EQUAL
65162: IFFALSE 65172
// sBunker := true ;
65164: LD_ADDR_EXP 88
65168: PUSH
65169: LD_INT 1
65171: ST_TO_ADDR
// if p3 = 9 then
65172: LD_VAR 0 3
65176: PUSH
65177: LD_INT 9
65179: EQUAL
65180: IFFALSE 65190
// sHack := true ;
65182: LD_ADDR_EXP 89
65186: PUSH
65187: LD_INT 1
65189: ST_TO_ADDR
// if p3 = 10 then
65190: LD_VAR 0 3
65194: PUSH
65195: LD_INT 10
65197: EQUAL
65198: IFFALSE 65208
// sFire := true ;
65200: LD_ADDR_EXP 90
65204: PUSH
65205: LD_INT 1
65207: ST_TO_ADDR
// if p3 = 11 then
65208: LD_VAR 0 3
65212: PUSH
65213: LD_INT 11
65215: EQUAL
65216: IFFALSE 65226
// sRefresh := true ;
65218: LD_ADDR_EXP 91
65222: PUSH
65223: LD_INT 1
65225: ST_TO_ADDR
// if p3 = 12 then
65226: LD_VAR 0 3
65230: PUSH
65231: LD_INT 12
65233: EQUAL
65234: IFFALSE 65244
// sExp := true ;
65236: LD_ADDR_EXP 92
65240: PUSH
65241: LD_INT 1
65243: ST_TO_ADDR
// if p3 = 13 then
65244: LD_VAR 0 3
65248: PUSH
65249: LD_INT 13
65251: EQUAL
65252: IFFALSE 65262
// sDepot := true ;
65254: LD_ADDR_EXP 93
65258: PUSH
65259: LD_INT 1
65261: ST_TO_ADDR
// if p3 = 14 then
65262: LD_VAR 0 3
65266: PUSH
65267: LD_INT 14
65269: EQUAL
65270: IFFALSE 65280
// sFlag := true ;
65272: LD_ADDR_EXP 94
65276: PUSH
65277: LD_INT 1
65279: ST_TO_ADDR
// if p3 = 15 then
65280: LD_VAR 0 3
65284: PUSH
65285: LD_INT 15
65287: EQUAL
65288: IFFALSE 65298
// sKamikadze := true ;
65290: LD_ADDR_EXP 102
65294: PUSH
65295: LD_INT 1
65297: ST_TO_ADDR
// if p3 = 16 then
65298: LD_VAR 0 3
65302: PUSH
65303: LD_INT 16
65305: EQUAL
65306: IFFALSE 65316
// sTroll := true ;
65308: LD_ADDR_EXP 103
65312: PUSH
65313: LD_INT 1
65315: ST_TO_ADDR
// if p3 = 17 then
65316: LD_VAR 0 3
65320: PUSH
65321: LD_INT 17
65323: EQUAL
65324: IFFALSE 65334
// sSlow := true ;
65326: LD_ADDR_EXP 104
65330: PUSH
65331: LD_INT 1
65333: ST_TO_ADDR
// if p3 = 18 then
65334: LD_VAR 0 3
65338: PUSH
65339: LD_INT 18
65341: EQUAL
65342: IFFALSE 65352
// sLack := true ;
65344: LD_ADDR_EXP 105
65348: PUSH
65349: LD_INT 1
65351: ST_TO_ADDR
// if p3 = 19 then
65352: LD_VAR 0 3
65356: PUSH
65357: LD_INT 19
65359: EQUAL
65360: IFFALSE 65370
// sTank := true ;
65362: LD_ADDR_EXP 107
65366: PUSH
65367: LD_INT 1
65369: ST_TO_ADDR
// if p3 = 20 then
65370: LD_VAR 0 3
65374: PUSH
65375: LD_INT 20
65377: EQUAL
65378: IFFALSE 65388
// sRemote := true ;
65380: LD_ADDR_EXP 108
65384: PUSH
65385: LD_INT 1
65387: ST_TO_ADDR
// if p3 = 21 then
65388: LD_VAR 0 3
65392: PUSH
65393: LD_INT 21
65395: EQUAL
65396: IFFALSE 65406
// sPowell := true ;
65398: LD_ADDR_EXP 109
65402: PUSH
65403: LD_INT 1
65405: ST_TO_ADDR
// if p3 = 22 then
65406: LD_VAR 0 3
65410: PUSH
65411: LD_INT 22
65413: EQUAL
65414: IFFALSE 65424
// sTeleport := true ;
65416: LD_ADDR_EXP 112
65420: PUSH
65421: LD_INT 1
65423: ST_TO_ADDR
// if p3 = 23 then
65424: LD_VAR 0 3
65428: PUSH
65429: LD_INT 23
65431: EQUAL
65432: IFFALSE 65442
// sOilTower := true ;
65434: LD_ADDR_EXP 114
65438: PUSH
65439: LD_INT 1
65441: ST_TO_ADDR
// if p3 = 24 then
65442: LD_VAR 0 3
65446: PUSH
65447: LD_INT 24
65449: EQUAL
65450: IFFALSE 65460
// sShovel := true ;
65452: LD_ADDR_EXP 115
65456: PUSH
65457: LD_INT 1
65459: ST_TO_ADDR
// if p3 = 25 then
65460: LD_VAR 0 3
65464: PUSH
65465: LD_INT 25
65467: EQUAL
65468: IFFALSE 65478
// sSheik := true ;
65470: LD_ADDR_EXP 116
65474: PUSH
65475: LD_INT 1
65477: ST_TO_ADDR
// if p3 = 26 then
65478: LD_VAR 0 3
65482: PUSH
65483: LD_INT 26
65485: EQUAL
65486: IFFALSE 65496
// sEarthquake := true ;
65488: LD_ADDR_EXP 118
65492: PUSH
65493: LD_INT 1
65495: ST_TO_ADDR
// if p3 = 27 then
65496: LD_VAR 0 3
65500: PUSH
65501: LD_INT 27
65503: EQUAL
65504: IFFALSE 65514
// sAI := true ;
65506: LD_ADDR_EXP 119
65510: PUSH
65511: LD_INT 1
65513: ST_TO_ADDR
// if p3 = 28 then
65514: LD_VAR 0 3
65518: PUSH
65519: LD_INT 28
65521: EQUAL
65522: IFFALSE 65532
// sCargo := true ;
65524: LD_ADDR_EXP 122
65528: PUSH
65529: LD_INT 1
65531: ST_TO_ADDR
// if p3 = 29 then
65532: LD_VAR 0 3
65536: PUSH
65537: LD_INT 29
65539: EQUAL
65540: IFFALSE 65550
// sDLaser := true ;
65542: LD_ADDR_EXP 123
65546: PUSH
65547: LD_INT 1
65549: ST_TO_ADDR
// if p3 = 30 then
65550: LD_VAR 0 3
65554: PUSH
65555: LD_INT 30
65557: EQUAL
65558: IFFALSE 65568
// sExchange := true ;
65560: LD_ADDR_EXP 124
65564: PUSH
65565: LD_INT 1
65567: ST_TO_ADDR
// if p3 = 31 then
65568: LD_VAR 0 3
65572: PUSH
65573: LD_INT 31
65575: EQUAL
65576: IFFALSE 65586
// sFac := true ;
65578: LD_ADDR_EXP 125
65582: PUSH
65583: LD_INT 1
65585: ST_TO_ADDR
// if p3 = 32 then
65586: LD_VAR 0 3
65590: PUSH
65591: LD_INT 32
65593: EQUAL
65594: IFFALSE 65604
// sPower := true ;
65596: LD_ADDR_EXP 126
65600: PUSH
65601: LD_INT 1
65603: ST_TO_ADDR
// if p3 = 33 then
65604: LD_VAR 0 3
65608: PUSH
65609: LD_INT 33
65611: EQUAL
65612: IFFALSE 65622
// sRandom := true ;
65614: LD_ADDR_EXP 127
65618: PUSH
65619: LD_INT 1
65621: ST_TO_ADDR
// if p3 = 34 then
65622: LD_VAR 0 3
65626: PUSH
65627: LD_INT 34
65629: EQUAL
65630: IFFALSE 65640
// sShield := true ;
65632: LD_ADDR_EXP 128
65636: PUSH
65637: LD_INT 1
65639: ST_TO_ADDR
// if p3 = 35 then
65640: LD_VAR 0 3
65644: PUSH
65645: LD_INT 35
65647: EQUAL
65648: IFFALSE 65658
// sTime := true ;
65650: LD_ADDR_EXP 129
65654: PUSH
65655: LD_INT 1
65657: ST_TO_ADDR
// if p3 = 36 then
65658: LD_VAR 0 3
65662: PUSH
65663: LD_INT 36
65665: EQUAL
65666: IFFALSE 65676
// sTools := true ;
65668: LD_ADDR_EXP 130
65672: PUSH
65673: LD_INT 1
65675: ST_TO_ADDR
// if p3 = 101 then
65676: LD_VAR 0 3
65680: PUSH
65681: LD_INT 101
65683: EQUAL
65684: IFFALSE 65694
// sSold := true ;
65686: LD_ADDR_EXP 95
65690: PUSH
65691: LD_INT 1
65693: ST_TO_ADDR
// if p3 = 102 then
65694: LD_VAR 0 3
65698: PUSH
65699: LD_INT 102
65701: EQUAL
65702: IFFALSE 65712
// sDiff := true ;
65704: LD_ADDR_EXP 96
65708: PUSH
65709: LD_INT 1
65711: ST_TO_ADDR
// if p3 = 103 then
65712: LD_VAR 0 3
65716: PUSH
65717: LD_INT 103
65719: EQUAL
65720: IFFALSE 65730
// sFog := true ;
65722: LD_ADDR_EXP 99
65726: PUSH
65727: LD_INT 1
65729: ST_TO_ADDR
// if p3 = 104 then
65730: LD_VAR 0 3
65734: PUSH
65735: LD_INT 104
65737: EQUAL
65738: IFFALSE 65748
// sReset := true ;
65740: LD_ADDR_EXP 100
65744: PUSH
65745: LD_INT 1
65747: ST_TO_ADDR
// if p3 = 105 then
65748: LD_VAR 0 3
65752: PUSH
65753: LD_INT 105
65755: EQUAL
65756: IFFALSE 65766
// sSun := true ;
65758: LD_ADDR_EXP 101
65762: PUSH
65763: LD_INT 1
65765: ST_TO_ADDR
// if p3 = 106 then
65766: LD_VAR 0 3
65770: PUSH
65771: LD_INT 106
65773: EQUAL
65774: IFFALSE 65784
// sTiger := true ;
65776: LD_ADDR_EXP 97
65780: PUSH
65781: LD_INT 1
65783: ST_TO_ADDR
// if p3 = 107 then
65784: LD_VAR 0 3
65788: PUSH
65789: LD_INT 107
65791: EQUAL
65792: IFFALSE 65802
// sBomb := true ;
65794: LD_ADDR_EXP 98
65798: PUSH
65799: LD_INT 1
65801: ST_TO_ADDR
// if p3 = 108 then
65802: LD_VAR 0 3
65806: PUSH
65807: LD_INT 108
65809: EQUAL
65810: IFFALSE 65820
// sWound := true ;
65812: LD_ADDR_EXP 106
65816: PUSH
65817: LD_INT 1
65819: ST_TO_ADDR
// if p3 = 109 then
65820: LD_VAR 0 3
65824: PUSH
65825: LD_INT 109
65827: EQUAL
65828: IFFALSE 65838
// sBetray := true ;
65830: LD_ADDR_EXP 110
65834: PUSH
65835: LD_INT 1
65837: ST_TO_ADDR
// if p3 = 110 then
65838: LD_VAR 0 3
65842: PUSH
65843: LD_INT 110
65845: EQUAL
65846: IFFALSE 65856
// sContamin := true ;
65848: LD_ADDR_EXP 111
65852: PUSH
65853: LD_INT 1
65855: ST_TO_ADDR
// if p3 = 111 then
65856: LD_VAR 0 3
65860: PUSH
65861: LD_INT 111
65863: EQUAL
65864: IFFALSE 65874
// sOil := true ;
65866: LD_ADDR_EXP 113
65870: PUSH
65871: LD_INT 1
65873: ST_TO_ADDR
// if p3 = 112 then
65874: LD_VAR 0 3
65878: PUSH
65879: LD_INT 112
65881: EQUAL
65882: IFFALSE 65892
// sStu := true ;
65884: LD_ADDR_EXP 117
65888: PUSH
65889: LD_INT 1
65891: ST_TO_ADDR
// if p3 = 113 then
65892: LD_VAR 0 3
65896: PUSH
65897: LD_INT 113
65899: EQUAL
65900: IFFALSE 65910
// sBazooka := true ;
65902: LD_ADDR_EXP 120
65906: PUSH
65907: LD_INT 1
65909: ST_TO_ADDR
// if p3 = 114 then
65910: LD_VAR 0 3
65914: PUSH
65915: LD_INT 114
65917: EQUAL
65918: IFFALSE 65928
// sMortar := true ;
65920: LD_ADDR_EXP 121
65924: PUSH
65925: LD_INT 1
65927: ST_TO_ADDR
// if p3 = 115 then
65928: LD_VAR 0 3
65932: PUSH
65933: LD_INT 115
65935: EQUAL
65936: IFFALSE 65946
// sRanger := true ;
65938: LD_ADDR_EXP 131
65942: PUSH
65943: LD_INT 1
65945: ST_TO_ADDR
// end ; if p2 = 101 then
65946: LD_VAR 0 2
65950: PUSH
65951: LD_INT 101
65953: EQUAL
65954: IFFALSE 66082
// begin case p3 of 1 :
65956: LD_VAR 0 3
65960: PUSH
65961: LD_INT 1
65963: DOUBLE
65964: EQUAL
65965: IFTRUE 65969
65967: GO 65976
65969: POP
// hHackUnlimitedResources ; 2 :
65970: CALL 77119 0 0
65974: GO 66082
65976: LD_INT 2
65978: DOUBLE
65979: EQUAL
65980: IFTRUE 65984
65982: GO 65991
65984: POP
// hHackSetLevel10 ; 3 :
65985: CALL 77252 0 0
65989: GO 66082
65991: LD_INT 3
65993: DOUBLE
65994: EQUAL
65995: IFTRUE 65999
65997: GO 66006
65999: POP
// hHackSetLevel10YourUnits ; 4 :
66000: CALL 77337 0 0
66004: GO 66082
66006: LD_INT 4
66008: DOUBLE
66009: EQUAL
66010: IFTRUE 66014
66012: GO 66021
66014: POP
// hHackInvincible ; 5 :
66015: CALL 77785 0 0
66019: GO 66082
66021: LD_INT 5
66023: DOUBLE
66024: EQUAL
66025: IFTRUE 66029
66027: GO 66036
66029: POP
// hHackInvisible ; 6 :
66030: CALL 77896 0 0
66034: GO 66082
66036: LD_INT 6
66038: DOUBLE
66039: EQUAL
66040: IFTRUE 66044
66042: GO 66051
66044: POP
// hHackChangeYourSide ; 7 :
66045: CALL 77953 0 0
66049: GO 66082
66051: LD_INT 7
66053: DOUBLE
66054: EQUAL
66055: IFTRUE 66059
66057: GO 66066
66059: POP
// hHackChangeUnitSide ; 8 :
66060: CALL 77995 0 0
66064: GO 66082
66066: LD_INT 8
66068: DOUBLE
66069: EQUAL
66070: IFTRUE 66074
66072: GO 66081
66074: POP
// hHackFog ; end ;
66075: CALL 78096 0 0
66079: GO 66082
66081: POP
// end ; end ;
66082: LD_VAR 0 7
66086: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
66087: GO 66089
66089: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
66090: LD_STRING initStreamRollete();
66092: PPUSH
66093: CALL_OW 559
// InitStreamMode ;
66097: CALL 66106 0 0
// DefineStreamItems ( ) ;
66101: CALL 66546 0 0
// end ;
66105: END
// function InitStreamMode ; begin
66106: LD_INT 0
66108: PPUSH
// streamModeActive := false ;
66109: LD_ADDR_EXP 78
66113: PUSH
66114: LD_INT 0
66116: ST_TO_ADDR
// normalCounter := 36 ;
66117: LD_ADDR_EXP 79
66121: PUSH
66122: LD_INT 36
66124: ST_TO_ADDR
// hardcoreCounter := 16 ;
66125: LD_ADDR_EXP 80
66129: PUSH
66130: LD_INT 16
66132: ST_TO_ADDR
// sRocket := false ;
66133: LD_ADDR_EXP 83
66137: PUSH
66138: LD_INT 0
66140: ST_TO_ADDR
// sSpeed := false ;
66141: LD_ADDR_EXP 82
66145: PUSH
66146: LD_INT 0
66148: ST_TO_ADDR
// sEngine := false ;
66149: LD_ADDR_EXP 84
66153: PUSH
66154: LD_INT 0
66156: ST_TO_ADDR
// sSpec := false ;
66157: LD_ADDR_EXP 81
66161: PUSH
66162: LD_INT 0
66164: ST_TO_ADDR
// sLevel := false ;
66165: LD_ADDR_EXP 85
66169: PUSH
66170: LD_INT 0
66172: ST_TO_ADDR
// sArmoury := false ;
66173: LD_ADDR_EXP 86
66177: PUSH
66178: LD_INT 0
66180: ST_TO_ADDR
// sRadar := false ;
66181: LD_ADDR_EXP 87
66185: PUSH
66186: LD_INT 0
66188: ST_TO_ADDR
// sBunker := false ;
66189: LD_ADDR_EXP 88
66193: PUSH
66194: LD_INT 0
66196: ST_TO_ADDR
// sHack := false ;
66197: LD_ADDR_EXP 89
66201: PUSH
66202: LD_INT 0
66204: ST_TO_ADDR
// sFire := false ;
66205: LD_ADDR_EXP 90
66209: PUSH
66210: LD_INT 0
66212: ST_TO_ADDR
// sRefresh := false ;
66213: LD_ADDR_EXP 91
66217: PUSH
66218: LD_INT 0
66220: ST_TO_ADDR
// sExp := false ;
66221: LD_ADDR_EXP 92
66225: PUSH
66226: LD_INT 0
66228: ST_TO_ADDR
// sDepot := false ;
66229: LD_ADDR_EXP 93
66233: PUSH
66234: LD_INT 0
66236: ST_TO_ADDR
// sFlag := false ;
66237: LD_ADDR_EXP 94
66241: PUSH
66242: LD_INT 0
66244: ST_TO_ADDR
// sKamikadze := false ;
66245: LD_ADDR_EXP 102
66249: PUSH
66250: LD_INT 0
66252: ST_TO_ADDR
// sTroll := false ;
66253: LD_ADDR_EXP 103
66257: PUSH
66258: LD_INT 0
66260: ST_TO_ADDR
// sSlow := false ;
66261: LD_ADDR_EXP 104
66265: PUSH
66266: LD_INT 0
66268: ST_TO_ADDR
// sLack := false ;
66269: LD_ADDR_EXP 105
66273: PUSH
66274: LD_INT 0
66276: ST_TO_ADDR
// sTank := false ;
66277: LD_ADDR_EXP 107
66281: PUSH
66282: LD_INT 0
66284: ST_TO_ADDR
// sRemote := false ;
66285: LD_ADDR_EXP 108
66289: PUSH
66290: LD_INT 0
66292: ST_TO_ADDR
// sPowell := false ;
66293: LD_ADDR_EXP 109
66297: PUSH
66298: LD_INT 0
66300: ST_TO_ADDR
// sTeleport := false ;
66301: LD_ADDR_EXP 112
66305: PUSH
66306: LD_INT 0
66308: ST_TO_ADDR
// sOilTower := false ;
66309: LD_ADDR_EXP 114
66313: PUSH
66314: LD_INT 0
66316: ST_TO_ADDR
// sShovel := false ;
66317: LD_ADDR_EXP 115
66321: PUSH
66322: LD_INT 0
66324: ST_TO_ADDR
// sSheik := false ;
66325: LD_ADDR_EXP 116
66329: PUSH
66330: LD_INT 0
66332: ST_TO_ADDR
// sEarthquake := false ;
66333: LD_ADDR_EXP 118
66337: PUSH
66338: LD_INT 0
66340: ST_TO_ADDR
// sAI := false ;
66341: LD_ADDR_EXP 119
66345: PUSH
66346: LD_INT 0
66348: ST_TO_ADDR
// sCargo := false ;
66349: LD_ADDR_EXP 122
66353: PUSH
66354: LD_INT 0
66356: ST_TO_ADDR
// sDLaser := false ;
66357: LD_ADDR_EXP 123
66361: PUSH
66362: LD_INT 0
66364: ST_TO_ADDR
// sExchange := false ;
66365: LD_ADDR_EXP 124
66369: PUSH
66370: LD_INT 0
66372: ST_TO_ADDR
// sFac := false ;
66373: LD_ADDR_EXP 125
66377: PUSH
66378: LD_INT 0
66380: ST_TO_ADDR
// sPower := false ;
66381: LD_ADDR_EXP 126
66385: PUSH
66386: LD_INT 0
66388: ST_TO_ADDR
// sRandom := false ;
66389: LD_ADDR_EXP 127
66393: PUSH
66394: LD_INT 0
66396: ST_TO_ADDR
// sShield := false ;
66397: LD_ADDR_EXP 128
66401: PUSH
66402: LD_INT 0
66404: ST_TO_ADDR
// sTime := false ;
66405: LD_ADDR_EXP 129
66409: PUSH
66410: LD_INT 0
66412: ST_TO_ADDR
// sTools := false ;
66413: LD_ADDR_EXP 130
66417: PUSH
66418: LD_INT 0
66420: ST_TO_ADDR
// sSold := false ;
66421: LD_ADDR_EXP 95
66425: PUSH
66426: LD_INT 0
66428: ST_TO_ADDR
// sDiff := false ;
66429: LD_ADDR_EXP 96
66433: PUSH
66434: LD_INT 0
66436: ST_TO_ADDR
// sFog := false ;
66437: LD_ADDR_EXP 99
66441: PUSH
66442: LD_INT 0
66444: ST_TO_ADDR
// sReset := false ;
66445: LD_ADDR_EXP 100
66449: PUSH
66450: LD_INT 0
66452: ST_TO_ADDR
// sSun := false ;
66453: LD_ADDR_EXP 101
66457: PUSH
66458: LD_INT 0
66460: ST_TO_ADDR
// sTiger := false ;
66461: LD_ADDR_EXP 97
66465: PUSH
66466: LD_INT 0
66468: ST_TO_ADDR
// sBomb := false ;
66469: LD_ADDR_EXP 98
66473: PUSH
66474: LD_INT 0
66476: ST_TO_ADDR
// sWound := false ;
66477: LD_ADDR_EXP 106
66481: PUSH
66482: LD_INT 0
66484: ST_TO_ADDR
// sBetray := false ;
66485: LD_ADDR_EXP 110
66489: PUSH
66490: LD_INT 0
66492: ST_TO_ADDR
// sContamin := false ;
66493: LD_ADDR_EXP 111
66497: PUSH
66498: LD_INT 0
66500: ST_TO_ADDR
// sOil := false ;
66501: LD_ADDR_EXP 113
66505: PUSH
66506: LD_INT 0
66508: ST_TO_ADDR
// sStu := false ;
66509: LD_ADDR_EXP 117
66513: PUSH
66514: LD_INT 0
66516: ST_TO_ADDR
// sBazooka := false ;
66517: LD_ADDR_EXP 120
66521: PUSH
66522: LD_INT 0
66524: ST_TO_ADDR
// sMortar := false ;
66525: LD_ADDR_EXP 121
66529: PUSH
66530: LD_INT 0
66532: ST_TO_ADDR
// sRanger := false ;
66533: LD_ADDR_EXP 131
66537: PUSH
66538: LD_INT 0
66540: ST_TO_ADDR
// end ;
66541: LD_VAR 0 1
66545: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
66546: LD_INT 0
66548: PPUSH
66549: PPUSH
66550: PPUSH
66551: PPUSH
66552: PPUSH
// result := [ ] ;
66553: LD_ADDR_VAR 0 1
66557: PUSH
66558: EMPTY
66559: ST_TO_ADDR
// if campaign_id = 1 then
66560: LD_OWVAR 69
66564: PUSH
66565: LD_INT 1
66567: EQUAL
66568: IFFALSE 69506
// begin case mission_number of 1 :
66570: LD_OWVAR 70
66574: PUSH
66575: LD_INT 1
66577: DOUBLE
66578: EQUAL
66579: IFTRUE 66583
66581: GO 66647
66583: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
66584: LD_ADDR_VAR 0 1
66588: PUSH
66589: LD_INT 2
66591: PUSH
66592: LD_INT 4
66594: PUSH
66595: LD_INT 11
66597: PUSH
66598: LD_INT 12
66600: PUSH
66601: LD_INT 15
66603: PUSH
66604: LD_INT 16
66606: PUSH
66607: LD_INT 22
66609: PUSH
66610: LD_INT 23
66612: PUSH
66613: LD_INT 26
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 101
66629: PUSH
66630: LD_INT 102
66632: PUSH
66633: LD_INT 106
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: LIST
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: ST_TO_ADDR
66645: GO 69504
66647: LD_INT 2
66649: DOUBLE
66650: EQUAL
66651: IFTRUE 66655
66653: GO 66727
66655: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
66656: LD_ADDR_VAR 0 1
66660: PUSH
66661: LD_INT 2
66663: PUSH
66664: LD_INT 4
66666: PUSH
66667: LD_INT 11
66669: PUSH
66670: LD_INT 12
66672: PUSH
66673: LD_INT 15
66675: PUSH
66676: LD_INT 16
66678: PUSH
66679: LD_INT 22
66681: PUSH
66682: LD_INT 23
66684: PUSH
66685: LD_INT 26
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 101
66701: PUSH
66702: LD_INT 102
66704: PUSH
66705: LD_INT 105
66707: PUSH
66708: LD_INT 106
66710: PUSH
66711: LD_INT 108
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: ST_TO_ADDR
66725: GO 69504
66727: LD_INT 3
66729: DOUBLE
66730: EQUAL
66731: IFTRUE 66735
66733: GO 66811
66735: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
66736: LD_ADDR_VAR 0 1
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: LD_INT 4
66746: PUSH
66747: LD_INT 5
66749: PUSH
66750: LD_INT 11
66752: PUSH
66753: LD_INT 12
66755: PUSH
66756: LD_INT 15
66758: PUSH
66759: LD_INT 16
66761: PUSH
66762: LD_INT 22
66764: PUSH
66765: LD_INT 26
66767: PUSH
66768: LD_INT 36
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 101
66785: PUSH
66786: LD_INT 102
66788: PUSH
66789: LD_INT 105
66791: PUSH
66792: LD_INT 106
66794: PUSH
66795: LD_INT 108
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: ST_TO_ADDR
66809: GO 69504
66811: LD_INT 4
66813: DOUBLE
66814: EQUAL
66815: IFTRUE 66819
66817: GO 66903
66819: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
66820: LD_ADDR_VAR 0 1
66824: PUSH
66825: LD_INT 2
66827: PUSH
66828: LD_INT 4
66830: PUSH
66831: LD_INT 5
66833: PUSH
66834: LD_INT 8
66836: PUSH
66837: LD_INT 11
66839: PUSH
66840: LD_INT 12
66842: PUSH
66843: LD_INT 15
66845: PUSH
66846: LD_INT 16
66848: PUSH
66849: LD_INT 22
66851: PUSH
66852: LD_INT 23
66854: PUSH
66855: LD_INT 26
66857: PUSH
66858: LD_INT 36
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 101
66877: PUSH
66878: LD_INT 102
66880: PUSH
66881: LD_INT 105
66883: PUSH
66884: LD_INT 106
66886: PUSH
66887: LD_INT 108
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: ST_TO_ADDR
66901: GO 69504
66903: LD_INT 5
66905: DOUBLE
66906: EQUAL
66907: IFTRUE 66911
66909: GO 67011
66911: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
66912: LD_ADDR_VAR 0 1
66916: PUSH
66917: LD_INT 2
66919: PUSH
66920: LD_INT 4
66922: PUSH
66923: LD_INT 5
66925: PUSH
66926: LD_INT 6
66928: PUSH
66929: LD_INT 8
66931: PUSH
66932: LD_INT 11
66934: PUSH
66935: LD_INT 12
66937: PUSH
66938: LD_INT 15
66940: PUSH
66941: LD_INT 16
66943: PUSH
66944: LD_INT 22
66946: PUSH
66947: LD_INT 23
66949: PUSH
66950: LD_INT 25
66952: PUSH
66953: LD_INT 26
66955: PUSH
66956: LD_INT 36
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 101
66977: PUSH
66978: LD_INT 102
66980: PUSH
66981: LD_INT 105
66983: PUSH
66984: LD_INT 106
66986: PUSH
66987: LD_INT 108
66989: PUSH
66990: LD_INT 109
66992: PUSH
66993: LD_INT 112
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: ST_TO_ADDR
67009: GO 69504
67011: LD_INT 6
67013: DOUBLE
67014: EQUAL
67015: IFTRUE 67019
67017: GO 67139
67019: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
67020: LD_ADDR_VAR 0 1
67024: PUSH
67025: LD_INT 2
67027: PUSH
67028: LD_INT 4
67030: PUSH
67031: LD_INT 5
67033: PUSH
67034: LD_INT 6
67036: PUSH
67037: LD_INT 8
67039: PUSH
67040: LD_INT 11
67042: PUSH
67043: LD_INT 12
67045: PUSH
67046: LD_INT 15
67048: PUSH
67049: LD_INT 16
67051: PUSH
67052: LD_INT 20
67054: PUSH
67055: LD_INT 21
67057: PUSH
67058: LD_INT 22
67060: PUSH
67061: LD_INT 23
67063: PUSH
67064: LD_INT 25
67066: PUSH
67067: LD_INT 26
67069: PUSH
67070: LD_INT 30
67072: PUSH
67073: LD_INT 31
67075: PUSH
67076: LD_INT 32
67078: PUSH
67079: LD_INT 36
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 101
67105: PUSH
67106: LD_INT 102
67108: PUSH
67109: LD_INT 105
67111: PUSH
67112: LD_INT 106
67114: PUSH
67115: LD_INT 108
67117: PUSH
67118: LD_INT 109
67120: PUSH
67121: LD_INT 112
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: ST_TO_ADDR
67137: GO 69504
67139: LD_INT 7
67141: DOUBLE
67142: EQUAL
67143: IFTRUE 67147
67145: GO 67247
67147: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
67148: LD_ADDR_VAR 0 1
67152: PUSH
67153: LD_INT 2
67155: PUSH
67156: LD_INT 4
67158: PUSH
67159: LD_INT 5
67161: PUSH
67162: LD_INT 7
67164: PUSH
67165: LD_INT 11
67167: PUSH
67168: LD_INT 12
67170: PUSH
67171: LD_INT 15
67173: PUSH
67174: LD_INT 16
67176: PUSH
67177: LD_INT 20
67179: PUSH
67180: LD_INT 21
67182: PUSH
67183: LD_INT 22
67185: PUSH
67186: LD_INT 23
67188: PUSH
67189: LD_INT 25
67191: PUSH
67192: LD_INT 26
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 101
67213: PUSH
67214: LD_INT 102
67216: PUSH
67217: LD_INT 103
67219: PUSH
67220: LD_INT 105
67222: PUSH
67223: LD_INT 106
67225: PUSH
67226: LD_INT 108
67228: PUSH
67229: LD_INT 112
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: ST_TO_ADDR
67245: GO 69504
67247: LD_INT 8
67249: DOUBLE
67250: EQUAL
67251: IFTRUE 67255
67253: GO 67383
67255: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
67256: LD_ADDR_VAR 0 1
67260: PUSH
67261: LD_INT 2
67263: PUSH
67264: LD_INT 4
67266: PUSH
67267: LD_INT 5
67269: PUSH
67270: LD_INT 6
67272: PUSH
67273: LD_INT 7
67275: PUSH
67276: LD_INT 8
67278: PUSH
67279: LD_INT 11
67281: PUSH
67282: LD_INT 12
67284: PUSH
67285: LD_INT 15
67287: PUSH
67288: LD_INT 16
67290: PUSH
67291: LD_INT 20
67293: PUSH
67294: LD_INT 21
67296: PUSH
67297: LD_INT 22
67299: PUSH
67300: LD_INT 23
67302: PUSH
67303: LD_INT 25
67305: PUSH
67306: LD_INT 26
67308: PUSH
67309: LD_INT 30
67311: PUSH
67312: LD_INT 31
67314: PUSH
67315: LD_INT 32
67317: PUSH
67318: LD_INT 36
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 101
67345: PUSH
67346: LD_INT 102
67348: PUSH
67349: LD_INT 103
67351: PUSH
67352: LD_INT 105
67354: PUSH
67355: LD_INT 106
67357: PUSH
67358: LD_INT 108
67360: PUSH
67361: LD_INT 109
67363: PUSH
67364: LD_INT 112
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: ST_TO_ADDR
67381: GO 69504
67383: LD_INT 9
67385: DOUBLE
67386: EQUAL
67387: IFTRUE 67391
67389: GO 67527
67391: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
67392: LD_ADDR_VAR 0 1
67396: PUSH
67397: LD_INT 2
67399: PUSH
67400: LD_INT 4
67402: PUSH
67403: LD_INT 5
67405: PUSH
67406: LD_INT 6
67408: PUSH
67409: LD_INT 7
67411: PUSH
67412: LD_INT 8
67414: PUSH
67415: LD_INT 11
67417: PUSH
67418: LD_INT 12
67420: PUSH
67421: LD_INT 15
67423: PUSH
67424: LD_INT 16
67426: PUSH
67427: LD_INT 20
67429: PUSH
67430: LD_INT 21
67432: PUSH
67433: LD_INT 22
67435: PUSH
67436: LD_INT 23
67438: PUSH
67439: LD_INT 25
67441: PUSH
67442: LD_INT 26
67444: PUSH
67445: LD_INT 28
67447: PUSH
67448: LD_INT 30
67450: PUSH
67451: LD_INT 31
67453: PUSH
67454: LD_INT 32
67456: PUSH
67457: LD_INT 36
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 101
67485: PUSH
67486: LD_INT 102
67488: PUSH
67489: LD_INT 103
67491: PUSH
67492: LD_INT 105
67494: PUSH
67495: LD_INT 106
67497: PUSH
67498: LD_INT 108
67500: PUSH
67501: LD_INT 109
67503: PUSH
67504: LD_INT 112
67506: PUSH
67507: LD_INT 114
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: ST_TO_ADDR
67525: GO 69504
67527: LD_INT 10
67529: DOUBLE
67530: EQUAL
67531: IFTRUE 67535
67533: GO 67719
67535: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
67536: LD_ADDR_VAR 0 1
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: LD_INT 4
67546: PUSH
67547: LD_INT 5
67549: PUSH
67550: LD_INT 6
67552: PUSH
67553: LD_INT 7
67555: PUSH
67556: LD_INT 8
67558: PUSH
67559: LD_INT 9
67561: PUSH
67562: LD_INT 10
67564: PUSH
67565: LD_INT 11
67567: PUSH
67568: LD_INT 12
67570: PUSH
67571: LD_INT 13
67573: PUSH
67574: LD_INT 14
67576: PUSH
67577: LD_INT 15
67579: PUSH
67580: LD_INT 16
67582: PUSH
67583: LD_INT 17
67585: PUSH
67586: LD_INT 18
67588: PUSH
67589: LD_INT 19
67591: PUSH
67592: LD_INT 20
67594: PUSH
67595: LD_INT 21
67597: PUSH
67598: LD_INT 22
67600: PUSH
67601: LD_INT 23
67603: PUSH
67604: LD_INT 24
67606: PUSH
67607: LD_INT 25
67609: PUSH
67610: LD_INT 26
67612: PUSH
67613: LD_INT 28
67615: PUSH
67616: LD_INT 30
67618: PUSH
67619: LD_INT 31
67621: PUSH
67622: LD_INT 32
67624: PUSH
67625: LD_INT 36
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 101
67661: PUSH
67662: LD_INT 102
67664: PUSH
67665: LD_INT 103
67667: PUSH
67668: LD_INT 104
67670: PUSH
67671: LD_INT 105
67673: PUSH
67674: LD_INT 106
67676: PUSH
67677: LD_INT 107
67679: PUSH
67680: LD_INT 108
67682: PUSH
67683: LD_INT 109
67685: PUSH
67686: LD_INT 110
67688: PUSH
67689: LD_INT 111
67691: PUSH
67692: LD_INT 112
67694: PUSH
67695: LD_INT 114
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: ST_TO_ADDR
67717: GO 69504
67719: LD_INT 11
67721: DOUBLE
67722: EQUAL
67723: IFTRUE 67727
67725: GO 67919
67727: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
67728: LD_ADDR_VAR 0 1
67732: PUSH
67733: LD_INT 2
67735: PUSH
67736: LD_INT 3
67738: PUSH
67739: LD_INT 4
67741: PUSH
67742: LD_INT 5
67744: PUSH
67745: LD_INT 6
67747: PUSH
67748: LD_INT 7
67750: PUSH
67751: LD_INT 8
67753: PUSH
67754: LD_INT 9
67756: PUSH
67757: LD_INT 10
67759: PUSH
67760: LD_INT 11
67762: PUSH
67763: LD_INT 12
67765: PUSH
67766: LD_INT 13
67768: PUSH
67769: LD_INT 14
67771: PUSH
67772: LD_INT 15
67774: PUSH
67775: LD_INT 16
67777: PUSH
67778: LD_INT 17
67780: PUSH
67781: LD_INT 18
67783: PUSH
67784: LD_INT 19
67786: PUSH
67787: LD_INT 20
67789: PUSH
67790: LD_INT 21
67792: PUSH
67793: LD_INT 22
67795: PUSH
67796: LD_INT 23
67798: PUSH
67799: LD_INT 24
67801: PUSH
67802: LD_INT 25
67804: PUSH
67805: LD_INT 26
67807: PUSH
67808: LD_INT 28
67810: PUSH
67811: LD_INT 30
67813: PUSH
67814: LD_INT 31
67816: PUSH
67817: LD_INT 32
67819: PUSH
67820: LD_INT 34
67822: PUSH
67823: LD_INT 36
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 101
67861: PUSH
67862: LD_INT 102
67864: PUSH
67865: LD_INT 103
67867: PUSH
67868: LD_INT 104
67870: PUSH
67871: LD_INT 105
67873: PUSH
67874: LD_INT 106
67876: PUSH
67877: LD_INT 107
67879: PUSH
67880: LD_INT 108
67882: PUSH
67883: LD_INT 109
67885: PUSH
67886: LD_INT 110
67888: PUSH
67889: LD_INT 111
67891: PUSH
67892: LD_INT 112
67894: PUSH
67895: LD_INT 114
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: ST_TO_ADDR
67917: GO 69504
67919: LD_INT 12
67921: DOUBLE
67922: EQUAL
67923: IFTRUE 67927
67925: GO 68135
67927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
67928: LD_ADDR_VAR 0 1
67932: PUSH
67933: LD_INT 1
67935: PUSH
67936: LD_INT 2
67938: PUSH
67939: LD_INT 3
67941: PUSH
67942: LD_INT 4
67944: PUSH
67945: LD_INT 5
67947: PUSH
67948: LD_INT 6
67950: PUSH
67951: LD_INT 7
67953: PUSH
67954: LD_INT 8
67956: PUSH
67957: LD_INT 9
67959: PUSH
67960: LD_INT 10
67962: PUSH
67963: LD_INT 11
67965: PUSH
67966: LD_INT 12
67968: PUSH
67969: LD_INT 13
67971: PUSH
67972: LD_INT 14
67974: PUSH
67975: LD_INT 15
67977: PUSH
67978: LD_INT 16
67980: PUSH
67981: LD_INT 17
67983: PUSH
67984: LD_INT 18
67986: PUSH
67987: LD_INT 19
67989: PUSH
67990: LD_INT 20
67992: PUSH
67993: LD_INT 21
67995: PUSH
67996: LD_INT 22
67998: PUSH
67999: LD_INT 23
68001: PUSH
68002: LD_INT 24
68004: PUSH
68005: LD_INT 25
68007: PUSH
68008: LD_INT 26
68010: PUSH
68011: LD_INT 27
68013: PUSH
68014: LD_INT 28
68016: PUSH
68017: LD_INT 30
68019: PUSH
68020: LD_INT 31
68022: PUSH
68023: LD_INT 32
68025: PUSH
68026: LD_INT 33
68028: PUSH
68029: LD_INT 34
68031: PUSH
68032: LD_INT 36
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 101
68073: PUSH
68074: LD_INT 102
68076: PUSH
68077: LD_INT 103
68079: PUSH
68080: LD_INT 104
68082: PUSH
68083: LD_INT 105
68085: PUSH
68086: LD_INT 106
68088: PUSH
68089: LD_INT 107
68091: PUSH
68092: LD_INT 108
68094: PUSH
68095: LD_INT 109
68097: PUSH
68098: LD_INT 110
68100: PUSH
68101: LD_INT 111
68103: PUSH
68104: LD_INT 112
68106: PUSH
68107: LD_INT 113
68109: PUSH
68110: LD_INT 114
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: ST_TO_ADDR
68133: GO 69504
68135: LD_INT 13
68137: DOUBLE
68138: EQUAL
68139: IFTRUE 68143
68141: GO 68339
68143: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
68144: LD_ADDR_VAR 0 1
68148: PUSH
68149: LD_INT 1
68151: PUSH
68152: LD_INT 2
68154: PUSH
68155: LD_INT 3
68157: PUSH
68158: LD_INT 4
68160: PUSH
68161: LD_INT 5
68163: PUSH
68164: LD_INT 8
68166: PUSH
68167: LD_INT 9
68169: PUSH
68170: LD_INT 10
68172: PUSH
68173: LD_INT 11
68175: PUSH
68176: LD_INT 12
68178: PUSH
68179: LD_INT 14
68181: PUSH
68182: LD_INT 15
68184: PUSH
68185: LD_INT 16
68187: PUSH
68188: LD_INT 17
68190: PUSH
68191: LD_INT 18
68193: PUSH
68194: LD_INT 19
68196: PUSH
68197: LD_INT 20
68199: PUSH
68200: LD_INT 21
68202: PUSH
68203: LD_INT 22
68205: PUSH
68206: LD_INT 23
68208: PUSH
68209: LD_INT 24
68211: PUSH
68212: LD_INT 25
68214: PUSH
68215: LD_INT 26
68217: PUSH
68218: LD_INT 27
68220: PUSH
68221: LD_INT 28
68223: PUSH
68224: LD_INT 30
68226: PUSH
68227: LD_INT 31
68229: PUSH
68230: LD_INT 32
68232: PUSH
68233: LD_INT 33
68235: PUSH
68236: LD_INT 34
68238: PUSH
68239: LD_INT 36
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 101
68277: PUSH
68278: LD_INT 102
68280: PUSH
68281: LD_INT 103
68283: PUSH
68284: LD_INT 104
68286: PUSH
68287: LD_INT 105
68289: PUSH
68290: LD_INT 106
68292: PUSH
68293: LD_INT 107
68295: PUSH
68296: LD_INT 108
68298: PUSH
68299: LD_INT 109
68301: PUSH
68302: LD_INT 110
68304: PUSH
68305: LD_INT 111
68307: PUSH
68308: LD_INT 112
68310: PUSH
68311: LD_INT 113
68313: PUSH
68314: LD_INT 114
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: ST_TO_ADDR
68337: GO 69504
68339: LD_INT 14
68341: DOUBLE
68342: EQUAL
68343: IFTRUE 68347
68345: GO 68559
68347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
68348: LD_ADDR_VAR 0 1
68352: PUSH
68353: LD_INT 1
68355: PUSH
68356: LD_INT 2
68358: PUSH
68359: LD_INT 3
68361: PUSH
68362: LD_INT 4
68364: PUSH
68365: LD_INT 5
68367: PUSH
68368: LD_INT 6
68370: PUSH
68371: LD_INT 7
68373: PUSH
68374: LD_INT 8
68376: PUSH
68377: LD_INT 9
68379: PUSH
68380: LD_INT 10
68382: PUSH
68383: LD_INT 11
68385: PUSH
68386: LD_INT 12
68388: PUSH
68389: LD_INT 13
68391: PUSH
68392: LD_INT 14
68394: PUSH
68395: LD_INT 15
68397: PUSH
68398: LD_INT 16
68400: PUSH
68401: LD_INT 17
68403: PUSH
68404: LD_INT 18
68406: PUSH
68407: LD_INT 19
68409: PUSH
68410: LD_INT 20
68412: PUSH
68413: LD_INT 21
68415: PUSH
68416: LD_INT 22
68418: PUSH
68419: LD_INT 23
68421: PUSH
68422: LD_INT 24
68424: PUSH
68425: LD_INT 25
68427: PUSH
68428: LD_INT 26
68430: PUSH
68431: LD_INT 27
68433: PUSH
68434: LD_INT 28
68436: PUSH
68437: LD_INT 29
68439: PUSH
68440: LD_INT 30
68442: PUSH
68443: LD_INT 31
68445: PUSH
68446: LD_INT 32
68448: PUSH
68449: LD_INT 33
68451: PUSH
68452: LD_INT 34
68454: PUSH
68455: LD_INT 36
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 101
68497: PUSH
68498: LD_INT 102
68500: PUSH
68501: LD_INT 103
68503: PUSH
68504: LD_INT 104
68506: PUSH
68507: LD_INT 105
68509: PUSH
68510: LD_INT 106
68512: PUSH
68513: LD_INT 107
68515: PUSH
68516: LD_INT 108
68518: PUSH
68519: LD_INT 109
68521: PUSH
68522: LD_INT 110
68524: PUSH
68525: LD_INT 111
68527: PUSH
68528: LD_INT 112
68530: PUSH
68531: LD_INT 113
68533: PUSH
68534: LD_INT 114
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: ST_TO_ADDR
68557: GO 69504
68559: LD_INT 15
68561: DOUBLE
68562: EQUAL
68563: IFTRUE 68567
68565: GO 68779
68567: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
68568: LD_ADDR_VAR 0 1
68572: PUSH
68573: LD_INT 1
68575: PUSH
68576: LD_INT 2
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: LD_INT 4
68584: PUSH
68585: LD_INT 5
68587: PUSH
68588: LD_INT 6
68590: PUSH
68591: LD_INT 7
68593: PUSH
68594: LD_INT 8
68596: PUSH
68597: LD_INT 9
68599: PUSH
68600: LD_INT 10
68602: PUSH
68603: LD_INT 11
68605: PUSH
68606: LD_INT 12
68608: PUSH
68609: LD_INT 13
68611: PUSH
68612: LD_INT 14
68614: PUSH
68615: LD_INT 15
68617: PUSH
68618: LD_INT 16
68620: PUSH
68621: LD_INT 17
68623: PUSH
68624: LD_INT 18
68626: PUSH
68627: LD_INT 19
68629: PUSH
68630: LD_INT 20
68632: PUSH
68633: LD_INT 21
68635: PUSH
68636: LD_INT 22
68638: PUSH
68639: LD_INT 23
68641: PUSH
68642: LD_INT 24
68644: PUSH
68645: LD_INT 25
68647: PUSH
68648: LD_INT 26
68650: PUSH
68651: LD_INT 27
68653: PUSH
68654: LD_INT 28
68656: PUSH
68657: LD_INT 29
68659: PUSH
68660: LD_INT 30
68662: PUSH
68663: LD_INT 31
68665: PUSH
68666: LD_INT 32
68668: PUSH
68669: LD_INT 33
68671: PUSH
68672: LD_INT 34
68674: PUSH
68675: LD_INT 36
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 101
68717: PUSH
68718: LD_INT 102
68720: PUSH
68721: LD_INT 103
68723: PUSH
68724: LD_INT 104
68726: PUSH
68727: LD_INT 105
68729: PUSH
68730: LD_INT 106
68732: PUSH
68733: LD_INT 107
68735: PUSH
68736: LD_INT 108
68738: PUSH
68739: LD_INT 109
68741: PUSH
68742: LD_INT 110
68744: PUSH
68745: LD_INT 111
68747: PUSH
68748: LD_INT 112
68750: PUSH
68751: LD_INT 113
68753: PUSH
68754: LD_INT 114
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: ST_TO_ADDR
68777: GO 69504
68779: LD_INT 16
68781: DOUBLE
68782: EQUAL
68783: IFTRUE 68787
68785: GO 68911
68787: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
68788: LD_ADDR_VAR 0 1
68792: PUSH
68793: LD_INT 2
68795: PUSH
68796: LD_INT 4
68798: PUSH
68799: LD_INT 5
68801: PUSH
68802: LD_INT 7
68804: PUSH
68805: LD_INT 11
68807: PUSH
68808: LD_INT 12
68810: PUSH
68811: LD_INT 15
68813: PUSH
68814: LD_INT 16
68816: PUSH
68817: LD_INT 20
68819: PUSH
68820: LD_INT 21
68822: PUSH
68823: LD_INT 22
68825: PUSH
68826: LD_INT 23
68828: PUSH
68829: LD_INT 25
68831: PUSH
68832: LD_INT 26
68834: PUSH
68835: LD_INT 30
68837: PUSH
68838: LD_INT 31
68840: PUSH
68841: LD_INT 32
68843: PUSH
68844: LD_INT 33
68846: PUSH
68847: LD_INT 34
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 101
68873: PUSH
68874: LD_INT 102
68876: PUSH
68877: LD_INT 103
68879: PUSH
68880: LD_INT 106
68882: PUSH
68883: LD_INT 108
68885: PUSH
68886: LD_INT 112
68888: PUSH
68889: LD_INT 113
68891: PUSH
68892: LD_INT 114
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: ST_TO_ADDR
68909: GO 69504
68911: LD_INT 17
68913: DOUBLE
68914: EQUAL
68915: IFTRUE 68919
68917: GO 69131
68919: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
68920: LD_ADDR_VAR 0 1
68924: PUSH
68925: LD_INT 1
68927: PUSH
68928: LD_INT 2
68930: PUSH
68931: LD_INT 3
68933: PUSH
68934: LD_INT 4
68936: PUSH
68937: LD_INT 5
68939: PUSH
68940: LD_INT 6
68942: PUSH
68943: LD_INT 7
68945: PUSH
68946: LD_INT 8
68948: PUSH
68949: LD_INT 9
68951: PUSH
68952: LD_INT 10
68954: PUSH
68955: LD_INT 11
68957: PUSH
68958: LD_INT 12
68960: PUSH
68961: LD_INT 13
68963: PUSH
68964: LD_INT 14
68966: PUSH
68967: LD_INT 15
68969: PUSH
68970: LD_INT 16
68972: PUSH
68973: LD_INT 17
68975: PUSH
68976: LD_INT 18
68978: PUSH
68979: LD_INT 19
68981: PUSH
68982: LD_INT 20
68984: PUSH
68985: LD_INT 21
68987: PUSH
68988: LD_INT 22
68990: PUSH
68991: LD_INT 23
68993: PUSH
68994: LD_INT 24
68996: PUSH
68997: LD_INT 25
68999: PUSH
69000: LD_INT 26
69002: PUSH
69003: LD_INT 27
69005: PUSH
69006: LD_INT 28
69008: PUSH
69009: LD_INT 29
69011: PUSH
69012: LD_INT 30
69014: PUSH
69015: LD_INT 31
69017: PUSH
69018: LD_INT 32
69020: PUSH
69021: LD_INT 33
69023: PUSH
69024: LD_INT 34
69026: PUSH
69027: LD_INT 36
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 101
69069: PUSH
69070: LD_INT 102
69072: PUSH
69073: LD_INT 103
69075: PUSH
69076: LD_INT 104
69078: PUSH
69079: LD_INT 105
69081: PUSH
69082: LD_INT 106
69084: PUSH
69085: LD_INT 107
69087: PUSH
69088: LD_INT 108
69090: PUSH
69091: LD_INT 109
69093: PUSH
69094: LD_INT 110
69096: PUSH
69097: LD_INT 111
69099: PUSH
69100: LD_INT 112
69102: PUSH
69103: LD_INT 113
69105: PUSH
69106: LD_INT 114
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: ST_TO_ADDR
69129: GO 69504
69131: LD_INT 18
69133: DOUBLE
69134: EQUAL
69135: IFTRUE 69139
69137: GO 69275
69139: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
69140: LD_ADDR_VAR 0 1
69144: PUSH
69145: LD_INT 2
69147: PUSH
69148: LD_INT 4
69150: PUSH
69151: LD_INT 5
69153: PUSH
69154: LD_INT 7
69156: PUSH
69157: LD_INT 11
69159: PUSH
69160: LD_INT 12
69162: PUSH
69163: LD_INT 15
69165: PUSH
69166: LD_INT 16
69168: PUSH
69169: LD_INT 20
69171: PUSH
69172: LD_INT 21
69174: PUSH
69175: LD_INT 22
69177: PUSH
69178: LD_INT 23
69180: PUSH
69181: LD_INT 25
69183: PUSH
69184: LD_INT 26
69186: PUSH
69187: LD_INT 30
69189: PUSH
69190: LD_INT 31
69192: PUSH
69193: LD_INT 32
69195: PUSH
69196: LD_INT 33
69198: PUSH
69199: LD_INT 34
69201: PUSH
69202: LD_INT 35
69204: PUSH
69205: LD_INT 36
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 101
69233: PUSH
69234: LD_INT 102
69236: PUSH
69237: LD_INT 103
69239: PUSH
69240: LD_INT 106
69242: PUSH
69243: LD_INT 108
69245: PUSH
69246: LD_INT 112
69248: PUSH
69249: LD_INT 113
69251: PUSH
69252: LD_INT 114
69254: PUSH
69255: LD_INT 115
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: ST_TO_ADDR
69273: GO 69504
69275: LD_INT 19
69277: DOUBLE
69278: EQUAL
69279: IFTRUE 69283
69281: GO 69503
69283: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
69284: LD_ADDR_VAR 0 1
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: LD_INT 2
69294: PUSH
69295: LD_INT 3
69297: PUSH
69298: LD_INT 4
69300: PUSH
69301: LD_INT 5
69303: PUSH
69304: LD_INT 6
69306: PUSH
69307: LD_INT 7
69309: PUSH
69310: LD_INT 8
69312: PUSH
69313: LD_INT 9
69315: PUSH
69316: LD_INT 10
69318: PUSH
69319: LD_INT 11
69321: PUSH
69322: LD_INT 12
69324: PUSH
69325: LD_INT 13
69327: PUSH
69328: LD_INT 14
69330: PUSH
69331: LD_INT 15
69333: PUSH
69334: LD_INT 16
69336: PUSH
69337: LD_INT 17
69339: PUSH
69340: LD_INT 18
69342: PUSH
69343: LD_INT 19
69345: PUSH
69346: LD_INT 20
69348: PUSH
69349: LD_INT 21
69351: PUSH
69352: LD_INT 22
69354: PUSH
69355: LD_INT 23
69357: PUSH
69358: LD_INT 24
69360: PUSH
69361: LD_INT 25
69363: PUSH
69364: LD_INT 26
69366: PUSH
69367: LD_INT 27
69369: PUSH
69370: LD_INT 28
69372: PUSH
69373: LD_INT 29
69375: PUSH
69376: LD_INT 30
69378: PUSH
69379: LD_INT 31
69381: PUSH
69382: LD_INT 32
69384: PUSH
69385: LD_INT 33
69387: PUSH
69388: LD_INT 34
69390: PUSH
69391: LD_INT 35
69393: PUSH
69394: LD_INT 36
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 101
69437: PUSH
69438: LD_INT 102
69440: PUSH
69441: LD_INT 103
69443: PUSH
69444: LD_INT 104
69446: PUSH
69447: LD_INT 105
69449: PUSH
69450: LD_INT 106
69452: PUSH
69453: LD_INT 107
69455: PUSH
69456: LD_INT 108
69458: PUSH
69459: LD_INT 109
69461: PUSH
69462: LD_INT 110
69464: PUSH
69465: LD_INT 111
69467: PUSH
69468: LD_INT 112
69470: PUSH
69471: LD_INT 113
69473: PUSH
69474: LD_INT 114
69476: PUSH
69477: LD_INT 115
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: ST_TO_ADDR
69501: GO 69504
69503: POP
// end else
69504: GO 69723
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
69506: LD_ADDR_VAR 0 1
69510: PUSH
69511: LD_INT 1
69513: PUSH
69514: LD_INT 2
69516: PUSH
69517: LD_INT 3
69519: PUSH
69520: LD_INT 4
69522: PUSH
69523: LD_INT 5
69525: PUSH
69526: LD_INT 6
69528: PUSH
69529: LD_INT 7
69531: PUSH
69532: LD_INT 8
69534: PUSH
69535: LD_INT 9
69537: PUSH
69538: LD_INT 10
69540: PUSH
69541: LD_INT 11
69543: PUSH
69544: LD_INT 12
69546: PUSH
69547: LD_INT 13
69549: PUSH
69550: LD_INT 14
69552: PUSH
69553: LD_INT 15
69555: PUSH
69556: LD_INT 16
69558: PUSH
69559: LD_INT 17
69561: PUSH
69562: LD_INT 18
69564: PUSH
69565: LD_INT 19
69567: PUSH
69568: LD_INT 20
69570: PUSH
69571: LD_INT 21
69573: PUSH
69574: LD_INT 22
69576: PUSH
69577: LD_INT 23
69579: PUSH
69580: LD_INT 24
69582: PUSH
69583: LD_INT 25
69585: PUSH
69586: LD_INT 26
69588: PUSH
69589: LD_INT 27
69591: PUSH
69592: LD_INT 28
69594: PUSH
69595: LD_INT 29
69597: PUSH
69598: LD_INT 30
69600: PUSH
69601: LD_INT 31
69603: PUSH
69604: LD_INT 32
69606: PUSH
69607: LD_INT 33
69609: PUSH
69610: LD_INT 34
69612: PUSH
69613: LD_INT 35
69615: PUSH
69616: LD_INT 36
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 101
69659: PUSH
69660: LD_INT 102
69662: PUSH
69663: LD_INT 103
69665: PUSH
69666: LD_INT 104
69668: PUSH
69669: LD_INT 105
69671: PUSH
69672: LD_INT 106
69674: PUSH
69675: LD_INT 107
69677: PUSH
69678: LD_INT 108
69680: PUSH
69681: LD_INT 109
69683: PUSH
69684: LD_INT 110
69686: PUSH
69687: LD_INT 111
69689: PUSH
69690: LD_INT 112
69692: PUSH
69693: LD_INT 113
69695: PUSH
69696: LD_INT 114
69698: PUSH
69699: LD_INT 115
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: ST_TO_ADDR
// if result then
69723: LD_VAR 0 1
69727: IFFALSE 70016
// begin normal :=  ;
69729: LD_ADDR_VAR 0 3
69733: PUSH
69734: LD_STRING 
69736: ST_TO_ADDR
// hardcore :=  ;
69737: LD_ADDR_VAR 0 4
69741: PUSH
69742: LD_STRING 
69744: ST_TO_ADDR
// for i = 1 to normalCounter do
69745: LD_ADDR_VAR 0 5
69749: PUSH
69750: DOUBLE
69751: LD_INT 1
69753: DEC
69754: ST_TO_ADDR
69755: LD_EXP 79
69759: PUSH
69760: FOR_TO
69761: IFFALSE 69862
// begin tmp := 0 ;
69763: LD_ADDR_VAR 0 2
69767: PUSH
69768: LD_STRING 0
69770: ST_TO_ADDR
// if result [ 1 ] then
69771: LD_VAR 0 1
69775: PUSH
69776: LD_INT 1
69778: ARRAY
69779: IFFALSE 69844
// if result [ 1 ] [ 1 ] = i then
69781: LD_VAR 0 1
69785: PUSH
69786: LD_INT 1
69788: ARRAY
69789: PUSH
69790: LD_INT 1
69792: ARRAY
69793: PUSH
69794: LD_VAR 0 5
69798: EQUAL
69799: IFFALSE 69844
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69801: LD_ADDR_VAR 0 1
69805: PUSH
69806: LD_VAR 0 1
69810: PPUSH
69811: LD_INT 1
69813: PPUSH
69814: LD_VAR 0 1
69818: PUSH
69819: LD_INT 1
69821: ARRAY
69822: PPUSH
69823: LD_INT 1
69825: PPUSH
69826: CALL_OW 3
69830: PPUSH
69831: CALL_OW 1
69835: ST_TO_ADDR
// tmp := 1 ;
69836: LD_ADDR_VAR 0 2
69840: PUSH
69841: LD_STRING 1
69843: ST_TO_ADDR
// end ; normal := normal & tmp ;
69844: LD_ADDR_VAR 0 3
69848: PUSH
69849: LD_VAR 0 3
69853: PUSH
69854: LD_VAR 0 2
69858: STR
69859: ST_TO_ADDR
// end ;
69860: GO 69760
69862: POP
69863: POP
// for i = 1 to hardcoreCounter do
69864: LD_ADDR_VAR 0 5
69868: PUSH
69869: DOUBLE
69870: LD_INT 1
69872: DEC
69873: ST_TO_ADDR
69874: LD_EXP 80
69878: PUSH
69879: FOR_TO
69880: IFFALSE 69985
// begin tmp := 0 ;
69882: LD_ADDR_VAR 0 2
69886: PUSH
69887: LD_STRING 0
69889: ST_TO_ADDR
// if result [ 2 ] then
69890: LD_VAR 0 1
69894: PUSH
69895: LD_INT 2
69897: ARRAY
69898: IFFALSE 69967
// if result [ 2 ] [ 1 ] = 100 + i then
69900: LD_VAR 0 1
69904: PUSH
69905: LD_INT 2
69907: ARRAY
69908: PUSH
69909: LD_INT 1
69911: ARRAY
69912: PUSH
69913: LD_INT 100
69915: PUSH
69916: LD_VAR 0 5
69920: PLUS
69921: EQUAL
69922: IFFALSE 69967
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69924: LD_ADDR_VAR 0 1
69928: PUSH
69929: LD_VAR 0 1
69933: PPUSH
69934: LD_INT 2
69936: PPUSH
69937: LD_VAR 0 1
69941: PUSH
69942: LD_INT 2
69944: ARRAY
69945: PPUSH
69946: LD_INT 1
69948: PPUSH
69949: CALL_OW 3
69953: PPUSH
69954: CALL_OW 1
69958: ST_TO_ADDR
// tmp := 1 ;
69959: LD_ADDR_VAR 0 2
69963: PUSH
69964: LD_STRING 1
69966: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69967: LD_ADDR_VAR 0 4
69971: PUSH
69972: LD_VAR 0 4
69976: PUSH
69977: LD_VAR 0 2
69981: STR
69982: ST_TO_ADDR
// end ;
69983: GO 69879
69985: POP
69986: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
69987: LD_STRING getStreamItemsFromMission("
69989: PUSH
69990: LD_VAR 0 3
69994: STR
69995: PUSH
69996: LD_STRING ","
69998: STR
69999: PUSH
70000: LD_VAR 0 4
70004: STR
70005: PUSH
70006: LD_STRING ")
70008: STR
70009: PPUSH
70010: CALL_OW 559
// end else
70014: GO 70023
// ToLua ( getStreamItemsFromMission("","") ) ;
70016: LD_STRING getStreamItemsFromMission("","")
70018: PPUSH
70019: CALL_OW 559
// end ;
70023: LD_VAR 0 1
70027: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70028: LD_EXP 78
70032: PUSH
70033: LD_EXP 83
70037: AND
70038: IFFALSE 70162
70040: GO 70042
70042: DISABLE
70043: LD_INT 0
70045: PPUSH
70046: PPUSH
// begin enable ;
70047: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70048: LD_ADDR_VAR 0 2
70052: PUSH
70053: LD_INT 22
70055: PUSH
70056: LD_OWVAR 2
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 2
70067: PUSH
70068: LD_INT 34
70070: PUSH
70071: LD_INT 7
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 34
70080: PUSH
70081: LD_INT 45
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 34
70090: PUSH
70091: LD_INT 28
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 34
70100: PUSH
70101: LD_INT 47
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PPUSH
70119: CALL_OW 69
70123: ST_TO_ADDR
// if not tmp then
70124: LD_VAR 0 2
70128: NOT
70129: IFFALSE 70133
// exit ;
70131: GO 70162
// for i in tmp do
70133: LD_ADDR_VAR 0 1
70137: PUSH
70138: LD_VAR 0 2
70142: PUSH
70143: FOR_IN
70144: IFFALSE 70160
// begin SetLives ( i , 0 ) ;
70146: LD_VAR 0 1
70150: PPUSH
70151: LD_INT 0
70153: PPUSH
70154: CALL_OW 234
// end ;
70158: GO 70143
70160: POP
70161: POP
// end ;
70162: PPOPN 2
70164: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
70165: LD_EXP 78
70169: PUSH
70170: LD_EXP 84
70174: AND
70175: IFFALSE 70259
70177: GO 70179
70179: DISABLE
70180: LD_INT 0
70182: PPUSH
70183: PPUSH
// begin enable ;
70184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
70185: LD_ADDR_VAR 0 2
70189: PUSH
70190: LD_INT 22
70192: PUSH
70193: LD_OWVAR 2
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 32
70204: PUSH
70205: LD_INT 3
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PPUSH
70216: CALL_OW 69
70220: ST_TO_ADDR
// if not tmp then
70221: LD_VAR 0 2
70225: NOT
70226: IFFALSE 70230
// exit ;
70228: GO 70259
// for i in tmp do
70230: LD_ADDR_VAR 0 1
70234: PUSH
70235: LD_VAR 0 2
70239: PUSH
70240: FOR_IN
70241: IFFALSE 70257
// begin SetLives ( i , 0 ) ;
70243: LD_VAR 0 1
70247: PPUSH
70248: LD_INT 0
70250: PPUSH
70251: CALL_OW 234
// end ;
70255: GO 70240
70257: POP
70258: POP
// end ;
70259: PPOPN 2
70261: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
70262: LD_EXP 78
70266: PUSH
70267: LD_EXP 81
70271: AND
70272: IFFALSE 70365
70274: GO 70276
70276: DISABLE
70277: LD_INT 0
70279: PPUSH
// begin enable ;
70280: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
70281: LD_ADDR_VAR 0 1
70285: PUSH
70286: LD_INT 22
70288: PUSH
70289: LD_OWVAR 2
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 2
70300: PUSH
70301: LD_INT 25
70303: PUSH
70304: LD_INT 5
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 25
70313: PUSH
70314: LD_INT 9
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 25
70323: PUSH
70324: LD_INT 8
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PPUSH
70341: CALL_OW 69
70345: PUSH
70346: FOR_IN
70347: IFFALSE 70363
// begin SetClass ( i , 1 ) ;
70349: LD_VAR 0 1
70353: PPUSH
70354: LD_INT 1
70356: PPUSH
70357: CALL_OW 336
// end ;
70361: GO 70346
70363: POP
70364: POP
// end ;
70365: PPOPN 1
70367: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70368: LD_EXP 78
70372: PUSH
70373: LD_EXP 82
70377: AND
70378: PUSH
70379: LD_OWVAR 65
70383: PUSH
70384: LD_INT 7
70386: LESS
70387: AND
70388: IFFALSE 70402
70390: GO 70392
70392: DISABLE
// begin enable ;
70393: ENABLE
// game_speed := 7 ;
70394: LD_ADDR_OWVAR 65
70398: PUSH
70399: LD_INT 7
70401: ST_TO_ADDR
// end ;
70402: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70403: LD_EXP 78
70407: PUSH
70408: LD_EXP 85
70412: AND
70413: IFFALSE 70615
70415: GO 70417
70417: DISABLE
70418: LD_INT 0
70420: PPUSH
70421: PPUSH
70422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70423: LD_ADDR_VAR 0 3
70427: PUSH
70428: LD_INT 81
70430: PUSH
70431: LD_OWVAR 2
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 21
70442: PUSH
70443: LD_INT 1
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PPUSH
70454: CALL_OW 69
70458: ST_TO_ADDR
// if not tmp then
70459: LD_VAR 0 3
70463: NOT
70464: IFFALSE 70468
// exit ;
70466: GO 70615
// if tmp > 5 then
70468: LD_VAR 0 3
70472: PUSH
70473: LD_INT 5
70475: GREATER
70476: IFFALSE 70488
// k := 5 else
70478: LD_ADDR_VAR 0 2
70482: PUSH
70483: LD_INT 5
70485: ST_TO_ADDR
70486: GO 70498
// k := tmp ;
70488: LD_ADDR_VAR 0 2
70492: PUSH
70493: LD_VAR 0 3
70497: ST_TO_ADDR
// for i := 1 to k do
70498: LD_ADDR_VAR 0 1
70502: PUSH
70503: DOUBLE
70504: LD_INT 1
70506: DEC
70507: ST_TO_ADDR
70508: LD_VAR 0 2
70512: PUSH
70513: FOR_TO
70514: IFFALSE 70613
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70516: LD_VAR 0 3
70520: PUSH
70521: LD_VAR 0 1
70525: ARRAY
70526: PPUSH
70527: LD_VAR 0 1
70531: PUSH
70532: LD_INT 4
70534: MOD
70535: PUSH
70536: LD_INT 1
70538: PLUS
70539: PPUSH
70540: CALL_OW 259
70544: PUSH
70545: LD_INT 10
70547: LESS
70548: IFFALSE 70611
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70550: LD_VAR 0 3
70554: PUSH
70555: LD_VAR 0 1
70559: ARRAY
70560: PPUSH
70561: LD_VAR 0 1
70565: PUSH
70566: LD_INT 4
70568: MOD
70569: PUSH
70570: LD_INT 1
70572: PLUS
70573: PPUSH
70574: LD_VAR 0 3
70578: PUSH
70579: LD_VAR 0 1
70583: ARRAY
70584: PPUSH
70585: LD_VAR 0 1
70589: PUSH
70590: LD_INT 4
70592: MOD
70593: PUSH
70594: LD_INT 1
70596: PLUS
70597: PPUSH
70598: CALL_OW 259
70602: PUSH
70603: LD_INT 1
70605: PLUS
70606: PPUSH
70607: CALL_OW 237
70611: GO 70513
70613: POP
70614: POP
// end ;
70615: PPOPN 3
70617: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70618: LD_EXP 78
70622: PUSH
70623: LD_EXP 86
70627: AND
70628: IFFALSE 70648
70630: GO 70632
70632: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70633: LD_INT 4
70635: PPUSH
70636: LD_OWVAR 2
70640: PPUSH
70641: LD_INT 0
70643: PPUSH
70644: CALL_OW 324
70648: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70649: LD_EXP 78
70653: PUSH
70654: LD_EXP 115
70658: AND
70659: IFFALSE 70679
70661: GO 70663
70663: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70664: LD_INT 19
70666: PPUSH
70667: LD_OWVAR 2
70671: PPUSH
70672: LD_INT 0
70674: PPUSH
70675: CALL_OW 324
70679: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70680: LD_EXP 78
70684: PUSH
70685: LD_EXP 87
70689: AND
70690: IFFALSE 70792
70692: GO 70694
70694: DISABLE
70695: LD_INT 0
70697: PPUSH
70698: PPUSH
// begin enable ;
70699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70700: LD_ADDR_VAR 0 2
70704: PUSH
70705: LD_INT 22
70707: PUSH
70708: LD_OWVAR 2
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 2
70719: PUSH
70720: LD_INT 34
70722: PUSH
70723: LD_INT 11
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 34
70732: PUSH
70733: LD_INT 30
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: LIST
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PPUSH
70749: CALL_OW 69
70753: ST_TO_ADDR
// if not tmp then
70754: LD_VAR 0 2
70758: NOT
70759: IFFALSE 70763
// exit ;
70761: GO 70792
// for i in tmp do
70763: LD_ADDR_VAR 0 1
70767: PUSH
70768: LD_VAR 0 2
70772: PUSH
70773: FOR_IN
70774: IFFALSE 70790
// begin SetLives ( i , 0 ) ;
70776: LD_VAR 0 1
70780: PPUSH
70781: LD_INT 0
70783: PPUSH
70784: CALL_OW 234
// end ;
70788: GO 70773
70790: POP
70791: POP
// end ;
70792: PPOPN 2
70794: END
// every 0 0$1 trigger StreamModeActive and sBunker do
70795: LD_EXP 78
70799: PUSH
70800: LD_EXP 88
70804: AND
70805: IFFALSE 70825
70807: GO 70809
70809: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
70810: LD_INT 32
70812: PPUSH
70813: LD_OWVAR 2
70817: PPUSH
70818: LD_INT 0
70820: PPUSH
70821: CALL_OW 324
70825: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
70826: LD_EXP 78
70830: PUSH
70831: LD_EXP 89
70835: AND
70836: IFFALSE 71017
70838: GO 70840
70840: DISABLE
70841: LD_INT 0
70843: PPUSH
70844: PPUSH
70845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
70846: LD_ADDR_VAR 0 2
70850: PUSH
70851: LD_INT 22
70853: PUSH
70854: LD_OWVAR 2
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 33
70865: PUSH
70866: LD_INT 3
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PPUSH
70877: CALL_OW 69
70881: ST_TO_ADDR
// if not tmp then
70882: LD_VAR 0 2
70886: NOT
70887: IFFALSE 70891
// exit ;
70889: GO 71017
// side := 0 ;
70891: LD_ADDR_VAR 0 3
70895: PUSH
70896: LD_INT 0
70898: ST_TO_ADDR
// for i := 1 to 8 do
70899: LD_ADDR_VAR 0 1
70903: PUSH
70904: DOUBLE
70905: LD_INT 1
70907: DEC
70908: ST_TO_ADDR
70909: LD_INT 8
70911: PUSH
70912: FOR_TO
70913: IFFALSE 70961
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
70915: LD_OWVAR 2
70919: PUSH
70920: LD_VAR 0 1
70924: NONEQUAL
70925: PUSH
70926: LD_OWVAR 2
70930: PPUSH
70931: LD_VAR 0 1
70935: PPUSH
70936: CALL_OW 81
70940: PUSH
70941: LD_INT 2
70943: EQUAL
70944: AND
70945: IFFALSE 70959
// begin side := i ;
70947: LD_ADDR_VAR 0 3
70951: PUSH
70952: LD_VAR 0 1
70956: ST_TO_ADDR
// break ;
70957: GO 70961
// end ;
70959: GO 70912
70961: POP
70962: POP
// if not side then
70963: LD_VAR 0 3
70967: NOT
70968: IFFALSE 70972
// exit ;
70970: GO 71017
// for i := 1 to tmp do
70972: LD_ADDR_VAR 0 1
70976: PUSH
70977: DOUBLE
70978: LD_INT 1
70980: DEC
70981: ST_TO_ADDR
70982: LD_VAR 0 2
70986: PUSH
70987: FOR_TO
70988: IFFALSE 71015
// if Prob ( 60 ) then
70990: LD_INT 60
70992: PPUSH
70993: CALL_OW 13
70997: IFFALSE 71013
// SetSide ( i , side ) ;
70999: LD_VAR 0 1
71003: PPUSH
71004: LD_VAR 0 3
71008: PPUSH
71009: CALL_OW 235
71013: GO 70987
71015: POP
71016: POP
// end ;
71017: PPOPN 3
71019: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71020: LD_EXP 78
71024: PUSH
71025: LD_EXP 91
71029: AND
71030: IFFALSE 71149
71032: GO 71034
71034: DISABLE
71035: LD_INT 0
71037: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71038: LD_ADDR_VAR 0 1
71042: PUSH
71043: LD_INT 22
71045: PUSH
71046: LD_OWVAR 2
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 21
71057: PUSH
71058: LD_INT 1
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 3
71067: PUSH
71068: LD_INT 23
71070: PUSH
71071: LD_INT 0
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: LIST
71086: PPUSH
71087: CALL_OW 69
71091: PUSH
71092: FOR_IN
71093: IFFALSE 71147
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
71095: LD_VAR 0 1
71099: PPUSH
71100: CALL_OW 257
71104: PUSH
71105: LD_INT 1
71107: PUSH
71108: LD_INT 2
71110: PUSH
71111: LD_INT 3
71113: PUSH
71114: LD_INT 4
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: IN
71123: IFFALSE 71145
// SetClass ( un , rand ( 1 , 4 ) ) ;
71125: LD_VAR 0 1
71129: PPUSH
71130: LD_INT 1
71132: PPUSH
71133: LD_INT 4
71135: PPUSH
71136: CALL_OW 12
71140: PPUSH
71141: CALL_OW 336
71145: GO 71092
71147: POP
71148: POP
// end ;
71149: PPOPN 1
71151: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
71152: LD_EXP 78
71156: PUSH
71157: LD_EXP 90
71161: AND
71162: IFFALSE 71241
71164: GO 71166
71166: DISABLE
71167: LD_INT 0
71169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71170: LD_ADDR_VAR 0 1
71174: PUSH
71175: LD_INT 22
71177: PUSH
71178: LD_OWVAR 2
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 21
71189: PUSH
71190: LD_INT 3
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PPUSH
71201: CALL_OW 69
71205: ST_TO_ADDR
// if not tmp then
71206: LD_VAR 0 1
71210: NOT
71211: IFFALSE 71215
// exit ;
71213: GO 71241
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
71215: LD_VAR 0 1
71219: PUSH
71220: LD_INT 1
71222: PPUSH
71223: LD_VAR 0 1
71227: PPUSH
71228: CALL_OW 12
71232: ARRAY
71233: PPUSH
71234: LD_INT 100
71236: PPUSH
71237: CALL_OW 234
// end ;
71241: PPOPN 1
71243: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
71244: LD_EXP 78
71248: PUSH
71249: LD_EXP 92
71253: AND
71254: IFFALSE 71352
71256: GO 71258
71258: DISABLE
71259: LD_INT 0
71261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71262: LD_ADDR_VAR 0 1
71266: PUSH
71267: LD_INT 22
71269: PUSH
71270: LD_OWVAR 2
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 21
71281: PUSH
71282: LD_INT 1
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PPUSH
71293: CALL_OW 69
71297: ST_TO_ADDR
// if not tmp then
71298: LD_VAR 0 1
71302: NOT
71303: IFFALSE 71307
// exit ;
71305: GO 71352
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
71307: LD_VAR 0 1
71311: PUSH
71312: LD_INT 1
71314: PPUSH
71315: LD_VAR 0 1
71319: PPUSH
71320: CALL_OW 12
71324: ARRAY
71325: PPUSH
71326: LD_INT 1
71328: PPUSH
71329: LD_INT 4
71331: PPUSH
71332: CALL_OW 12
71336: PPUSH
71337: LD_INT 3000
71339: PPUSH
71340: LD_INT 9000
71342: PPUSH
71343: CALL_OW 12
71347: PPUSH
71348: CALL_OW 492
// end ;
71352: PPOPN 1
71354: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71355: LD_EXP 78
71359: PUSH
71360: LD_EXP 93
71364: AND
71365: IFFALSE 71385
71367: GO 71369
71369: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71370: LD_INT 1
71372: PPUSH
71373: LD_OWVAR 2
71377: PPUSH
71378: LD_INT 0
71380: PPUSH
71381: CALL_OW 324
71385: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71386: LD_EXP 78
71390: PUSH
71391: LD_EXP 94
71395: AND
71396: IFFALSE 71479
71398: GO 71400
71400: DISABLE
71401: LD_INT 0
71403: PPUSH
71404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71405: LD_ADDR_VAR 0 2
71409: PUSH
71410: LD_INT 22
71412: PUSH
71413: LD_OWVAR 2
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 21
71424: PUSH
71425: LD_INT 3
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PPUSH
71436: CALL_OW 69
71440: ST_TO_ADDR
// if not tmp then
71441: LD_VAR 0 2
71445: NOT
71446: IFFALSE 71450
// exit ;
71448: GO 71479
// for i in tmp do
71450: LD_ADDR_VAR 0 1
71454: PUSH
71455: LD_VAR 0 2
71459: PUSH
71460: FOR_IN
71461: IFFALSE 71477
// SetBLevel ( i , 10 ) ;
71463: LD_VAR 0 1
71467: PPUSH
71468: LD_INT 10
71470: PPUSH
71471: CALL_OW 241
71475: GO 71460
71477: POP
71478: POP
// end ;
71479: PPOPN 2
71481: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71482: LD_EXP 78
71486: PUSH
71487: LD_EXP 95
71491: AND
71492: IFFALSE 71603
71494: GO 71496
71496: DISABLE
71497: LD_INT 0
71499: PPUSH
71500: PPUSH
71501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71502: LD_ADDR_VAR 0 3
71506: PUSH
71507: LD_INT 22
71509: PUSH
71510: LD_OWVAR 2
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 25
71521: PUSH
71522: LD_INT 1
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PPUSH
71533: CALL_OW 69
71537: ST_TO_ADDR
// if not tmp then
71538: LD_VAR 0 3
71542: NOT
71543: IFFALSE 71547
// exit ;
71545: GO 71603
// un := tmp [ rand ( 1 , tmp ) ] ;
71547: LD_ADDR_VAR 0 2
71551: PUSH
71552: LD_VAR 0 3
71556: PUSH
71557: LD_INT 1
71559: PPUSH
71560: LD_VAR 0 3
71564: PPUSH
71565: CALL_OW 12
71569: ARRAY
71570: ST_TO_ADDR
// if Crawls ( un ) then
71571: LD_VAR 0 2
71575: PPUSH
71576: CALL_OW 318
71580: IFFALSE 71591
// ComWalk ( un ) ;
71582: LD_VAR 0 2
71586: PPUSH
71587: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71591: LD_VAR 0 2
71595: PPUSH
71596: LD_INT 5
71598: PPUSH
71599: CALL_OW 336
// end ;
71603: PPOPN 3
71605: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
71606: LD_EXP 78
71610: PUSH
71611: LD_EXP 96
71615: AND
71616: PUSH
71617: LD_OWVAR 67
71621: PUSH
71622: LD_INT 3
71624: LESS
71625: AND
71626: IFFALSE 71645
71628: GO 71630
71630: DISABLE
// Difficulty := Difficulty + 1 ;
71631: LD_ADDR_OWVAR 67
71635: PUSH
71636: LD_OWVAR 67
71640: PUSH
71641: LD_INT 1
71643: PLUS
71644: ST_TO_ADDR
71645: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71646: LD_EXP 78
71650: PUSH
71651: LD_EXP 97
71655: AND
71656: IFFALSE 71759
71658: GO 71660
71660: DISABLE
71661: LD_INT 0
71663: PPUSH
// begin for i := 1 to 5 do
71664: LD_ADDR_VAR 0 1
71668: PUSH
71669: DOUBLE
71670: LD_INT 1
71672: DEC
71673: ST_TO_ADDR
71674: LD_INT 5
71676: PUSH
71677: FOR_TO
71678: IFFALSE 71757
// begin uc_nation := nation_nature ;
71680: LD_ADDR_OWVAR 21
71684: PUSH
71685: LD_INT 0
71687: ST_TO_ADDR
// uc_side := 0 ;
71688: LD_ADDR_OWVAR 20
71692: PUSH
71693: LD_INT 0
71695: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71696: LD_ADDR_OWVAR 29
71700: PUSH
71701: LD_INT 12
71703: PUSH
71704: LD_INT 12
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: ST_TO_ADDR
// hc_agressivity := 20 ;
71711: LD_ADDR_OWVAR 35
71715: PUSH
71716: LD_INT 20
71718: ST_TO_ADDR
// hc_class := class_tiger ;
71719: LD_ADDR_OWVAR 28
71723: PUSH
71724: LD_INT 14
71726: ST_TO_ADDR
// hc_gallery :=  ;
71727: LD_ADDR_OWVAR 33
71731: PUSH
71732: LD_STRING 
71734: ST_TO_ADDR
// hc_name :=  ;
71735: LD_ADDR_OWVAR 26
71739: PUSH
71740: LD_STRING 
71742: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71743: CALL_OW 44
71747: PPUSH
71748: LD_INT 0
71750: PPUSH
71751: CALL_OW 51
// end ;
71755: GO 71677
71757: POP
71758: POP
// end ;
71759: PPOPN 1
71761: END
// every 0 0$1 trigger StreamModeActive and sBomb do
71762: LD_EXP 78
71766: PUSH
71767: LD_EXP 98
71771: AND
71772: IFFALSE 71781
71774: GO 71776
71776: DISABLE
// StreamSibBomb ;
71777: CALL 71782 0 0
71781: END
// export function StreamSibBomb ; var i , x , y ; begin
71782: LD_INT 0
71784: PPUSH
71785: PPUSH
71786: PPUSH
71787: PPUSH
// result := false ;
71788: LD_ADDR_VAR 0 1
71792: PUSH
71793: LD_INT 0
71795: ST_TO_ADDR
// for i := 1 to 16 do
71796: LD_ADDR_VAR 0 2
71800: PUSH
71801: DOUBLE
71802: LD_INT 1
71804: DEC
71805: ST_TO_ADDR
71806: LD_INT 16
71808: PUSH
71809: FOR_TO
71810: IFFALSE 72009
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71812: LD_ADDR_VAR 0 3
71816: PUSH
71817: LD_INT 10
71819: PUSH
71820: LD_INT 20
71822: PUSH
71823: LD_INT 30
71825: PUSH
71826: LD_INT 40
71828: PUSH
71829: LD_INT 50
71831: PUSH
71832: LD_INT 60
71834: PUSH
71835: LD_INT 70
71837: PUSH
71838: LD_INT 80
71840: PUSH
71841: LD_INT 90
71843: PUSH
71844: LD_INT 100
71846: PUSH
71847: LD_INT 110
71849: PUSH
71850: LD_INT 120
71852: PUSH
71853: LD_INT 130
71855: PUSH
71856: LD_INT 140
71858: PUSH
71859: LD_INT 150
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 1
71881: PPUSH
71882: LD_INT 15
71884: PPUSH
71885: CALL_OW 12
71889: ARRAY
71890: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71891: LD_ADDR_VAR 0 4
71895: PUSH
71896: LD_INT 10
71898: PUSH
71899: LD_INT 20
71901: PUSH
71902: LD_INT 30
71904: PUSH
71905: LD_INT 40
71907: PUSH
71908: LD_INT 50
71910: PUSH
71911: LD_INT 60
71913: PUSH
71914: LD_INT 70
71916: PUSH
71917: LD_INT 80
71919: PUSH
71920: LD_INT 90
71922: PUSH
71923: LD_INT 100
71925: PUSH
71926: LD_INT 110
71928: PUSH
71929: LD_INT 120
71931: PUSH
71932: LD_INT 130
71934: PUSH
71935: LD_INT 140
71937: PUSH
71938: LD_INT 150
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: PUSH
71958: LD_INT 1
71960: PPUSH
71961: LD_INT 15
71963: PPUSH
71964: CALL_OW 12
71968: ARRAY
71969: ST_TO_ADDR
// if ValidHex ( x , y ) then
71970: LD_VAR 0 3
71974: PPUSH
71975: LD_VAR 0 4
71979: PPUSH
71980: CALL_OW 488
71984: IFFALSE 72007
// begin result := [ x , y ] ;
71986: LD_ADDR_VAR 0 1
71990: PUSH
71991: LD_VAR 0 3
71995: PUSH
71996: LD_VAR 0 4
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: ST_TO_ADDR
// break ;
72005: GO 72009
// end ; end ;
72007: GO 71809
72009: POP
72010: POP
// if result then
72011: LD_VAR 0 1
72015: IFFALSE 72075
// begin ToLua ( playSibBomb() ) ;
72017: LD_STRING playSibBomb()
72019: PPUSH
72020: CALL_OW 559
// wait ( 0 0$14 ) ;
72024: LD_INT 490
72026: PPUSH
72027: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
72031: LD_VAR 0 1
72035: PUSH
72036: LD_INT 1
72038: ARRAY
72039: PPUSH
72040: LD_VAR 0 1
72044: PUSH
72045: LD_INT 2
72047: ARRAY
72048: PPUSH
72049: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
72053: LD_VAR 0 1
72057: PUSH
72058: LD_INT 1
72060: ARRAY
72061: PPUSH
72062: LD_VAR 0 1
72066: PUSH
72067: LD_INT 2
72069: ARRAY
72070: PPUSH
72071: CALL_OW 429
// end ; end ;
72075: LD_VAR 0 1
72079: RET
// every 0 0$1 trigger StreamModeActive and sReset do
72080: LD_EXP 78
72084: PUSH
72085: LD_EXP 100
72089: AND
72090: IFFALSE 72102
72092: GO 72094
72094: DISABLE
// YouLost (  ) ;
72095: LD_STRING 
72097: PPUSH
72098: CALL_OW 104
72102: END
// every 0 0$1 trigger StreamModeActive and sFog do
72103: LD_EXP 78
72107: PUSH
72108: LD_EXP 99
72112: AND
72113: IFFALSE 72127
72115: GO 72117
72117: DISABLE
// FogOff ( your_side ) ;
72118: LD_OWVAR 2
72122: PPUSH
72123: CALL_OW 344
72127: END
// every 0 0$1 trigger StreamModeActive and sSun do
72128: LD_EXP 78
72132: PUSH
72133: LD_EXP 101
72137: AND
72138: IFFALSE 72166
72140: GO 72142
72142: DISABLE
// begin solar_recharge_percent := 0 ;
72143: LD_ADDR_OWVAR 79
72147: PUSH
72148: LD_INT 0
72150: ST_TO_ADDR
// wait ( 5 5$00 ) ;
72151: LD_INT 10500
72153: PPUSH
72154: CALL_OW 67
// solar_recharge_percent := 100 ;
72158: LD_ADDR_OWVAR 79
72162: PUSH
72163: LD_INT 100
72165: ST_TO_ADDR
// end ;
72166: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
72167: LD_EXP 78
72171: PUSH
72172: LD_EXP 102
72176: AND
72177: IFFALSE 72416
72179: GO 72181
72181: DISABLE
72182: LD_INT 0
72184: PPUSH
72185: PPUSH
72186: PPUSH
// begin tmp := [ ] ;
72187: LD_ADDR_VAR 0 3
72191: PUSH
72192: EMPTY
72193: ST_TO_ADDR
// for i := 1 to 6 do
72194: LD_ADDR_VAR 0 1
72198: PUSH
72199: DOUBLE
72200: LD_INT 1
72202: DEC
72203: ST_TO_ADDR
72204: LD_INT 6
72206: PUSH
72207: FOR_TO
72208: IFFALSE 72313
// begin uc_nation := nation_nature ;
72210: LD_ADDR_OWVAR 21
72214: PUSH
72215: LD_INT 0
72217: ST_TO_ADDR
// uc_side := 0 ;
72218: LD_ADDR_OWVAR 20
72222: PUSH
72223: LD_INT 0
72225: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72226: LD_ADDR_OWVAR 29
72230: PUSH
72231: LD_INT 12
72233: PUSH
72234: LD_INT 12
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: ST_TO_ADDR
// hc_agressivity := 20 ;
72241: LD_ADDR_OWVAR 35
72245: PUSH
72246: LD_INT 20
72248: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
72249: LD_ADDR_OWVAR 28
72253: PUSH
72254: LD_INT 17
72256: ST_TO_ADDR
// hc_gallery :=  ;
72257: LD_ADDR_OWVAR 33
72261: PUSH
72262: LD_STRING 
72264: ST_TO_ADDR
// hc_name :=  ;
72265: LD_ADDR_OWVAR 26
72269: PUSH
72270: LD_STRING 
72272: ST_TO_ADDR
// un := CreateHuman ;
72273: LD_ADDR_VAR 0 2
72277: PUSH
72278: CALL_OW 44
72282: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
72283: LD_VAR 0 2
72287: PPUSH
72288: LD_INT 1
72290: PPUSH
72291: CALL_OW 51
// tmp := tmp ^ un ;
72295: LD_ADDR_VAR 0 3
72299: PUSH
72300: LD_VAR 0 3
72304: PUSH
72305: LD_VAR 0 2
72309: ADD
72310: ST_TO_ADDR
// end ;
72311: GO 72207
72313: POP
72314: POP
// repeat wait ( 0 0$1 ) ;
72315: LD_INT 35
72317: PPUSH
72318: CALL_OW 67
// for un in tmp do
72322: LD_ADDR_VAR 0 2
72326: PUSH
72327: LD_VAR 0 3
72331: PUSH
72332: FOR_IN
72333: IFFALSE 72407
// begin if IsDead ( un ) then
72335: LD_VAR 0 2
72339: PPUSH
72340: CALL_OW 301
72344: IFFALSE 72364
// begin tmp := tmp diff un ;
72346: LD_ADDR_VAR 0 3
72350: PUSH
72351: LD_VAR 0 3
72355: PUSH
72356: LD_VAR 0 2
72360: DIFF
72361: ST_TO_ADDR
// continue ;
72362: GO 72332
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72364: LD_VAR 0 2
72368: PPUSH
72369: LD_INT 3
72371: PUSH
72372: LD_INT 22
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PPUSH
72386: CALL_OW 69
72390: PPUSH
72391: LD_VAR 0 2
72395: PPUSH
72396: CALL_OW 74
72400: PPUSH
72401: CALL_OW 115
// end ;
72405: GO 72332
72407: POP
72408: POP
// until not tmp ;
72409: LD_VAR 0 3
72413: NOT
72414: IFFALSE 72315
// end ;
72416: PPOPN 3
72418: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72419: LD_EXP 78
72423: PUSH
72424: LD_EXP 103
72428: AND
72429: IFFALSE 72483
72431: GO 72433
72433: DISABLE
// begin ToLua ( displayTroll(); ) ;
72434: LD_STRING displayTroll();
72436: PPUSH
72437: CALL_OW 559
// wait ( 3 3$00 ) ;
72441: LD_INT 6300
72443: PPUSH
72444: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72448: LD_STRING hideTroll();
72450: PPUSH
72451: CALL_OW 559
// wait ( 1 1$00 ) ;
72455: LD_INT 2100
72457: PPUSH
72458: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72462: LD_STRING displayTroll();
72464: PPUSH
72465: CALL_OW 559
// wait ( 1 1$00 ) ;
72469: LD_INT 2100
72471: PPUSH
72472: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72476: LD_STRING hideTroll();
72478: PPUSH
72479: CALL_OW 559
// end ;
72483: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72484: LD_EXP 78
72488: PUSH
72489: LD_EXP 104
72493: AND
72494: IFFALSE 72557
72496: GO 72498
72498: DISABLE
72499: LD_INT 0
72501: PPUSH
// begin p := 0 ;
72502: LD_ADDR_VAR 0 1
72506: PUSH
72507: LD_INT 0
72509: ST_TO_ADDR
// repeat game_speed := 1 ;
72510: LD_ADDR_OWVAR 65
72514: PUSH
72515: LD_INT 1
72517: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72518: LD_INT 35
72520: PPUSH
72521: CALL_OW 67
// p := p + 1 ;
72525: LD_ADDR_VAR 0 1
72529: PUSH
72530: LD_VAR 0 1
72534: PUSH
72535: LD_INT 1
72537: PLUS
72538: ST_TO_ADDR
// until p >= 60 ;
72539: LD_VAR 0 1
72543: PUSH
72544: LD_INT 60
72546: GREATEREQUAL
72547: IFFALSE 72510
// game_speed := 4 ;
72549: LD_ADDR_OWVAR 65
72553: PUSH
72554: LD_INT 4
72556: ST_TO_ADDR
// end ;
72557: PPOPN 1
72559: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72560: LD_EXP 78
72564: PUSH
72565: LD_EXP 105
72569: AND
72570: IFFALSE 72716
72572: GO 72574
72574: DISABLE
72575: LD_INT 0
72577: PPUSH
72578: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72579: LD_ADDR_VAR 0 1
72583: PUSH
72584: LD_INT 22
72586: PUSH
72587: LD_OWVAR 2
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: LD_INT 2
72598: PUSH
72599: LD_INT 30
72601: PUSH
72602: LD_INT 0
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 30
72611: PUSH
72612: LD_INT 1
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: LIST
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PPUSH
72628: CALL_OW 69
72632: ST_TO_ADDR
// if not depot then
72633: LD_VAR 0 1
72637: NOT
72638: IFFALSE 72642
// exit ;
72640: GO 72716
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72642: LD_ADDR_VAR 0 2
72646: PUSH
72647: LD_VAR 0 1
72651: PUSH
72652: LD_INT 1
72654: PPUSH
72655: LD_VAR 0 1
72659: PPUSH
72660: CALL_OW 12
72664: ARRAY
72665: PPUSH
72666: CALL_OW 274
72670: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72671: LD_VAR 0 2
72675: PPUSH
72676: LD_INT 1
72678: PPUSH
72679: LD_INT 0
72681: PPUSH
72682: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72686: LD_VAR 0 2
72690: PPUSH
72691: LD_INT 2
72693: PPUSH
72694: LD_INT 0
72696: PPUSH
72697: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72701: LD_VAR 0 2
72705: PPUSH
72706: LD_INT 3
72708: PPUSH
72709: LD_INT 0
72711: PPUSH
72712: CALL_OW 277
// end ;
72716: PPOPN 2
72718: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72719: LD_EXP 78
72723: PUSH
72724: LD_EXP 106
72728: AND
72729: IFFALSE 72826
72731: GO 72733
72733: DISABLE
72734: LD_INT 0
72736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72737: LD_ADDR_VAR 0 1
72741: PUSH
72742: LD_INT 22
72744: PUSH
72745: LD_OWVAR 2
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 21
72756: PUSH
72757: LD_INT 1
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 3
72766: PUSH
72767: LD_INT 23
72769: PUSH
72770: LD_INT 0
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: LIST
72785: PPUSH
72786: CALL_OW 69
72790: ST_TO_ADDR
// if not tmp then
72791: LD_VAR 0 1
72795: NOT
72796: IFFALSE 72800
// exit ;
72798: GO 72826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
72800: LD_VAR 0 1
72804: PUSH
72805: LD_INT 1
72807: PPUSH
72808: LD_VAR 0 1
72812: PPUSH
72813: CALL_OW 12
72817: ARRAY
72818: PPUSH
72819: LD_INT 200
72821: PPUSH
72822: CALL_OW 234
// end ;
72826: PPOPN 1
72828: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
72829: LD_EXP 78
72833: PUSH
72834: LD_EXP 107
72838: AND
72839: IFFALSE 72918
72841: GO 72843
72843: DISABLE
72844: LD_INT 0
72846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
72847: LD_ADDR_VAR 0 1
72851: PUSH
72852: LD_INT 22
72854: PUSH
72855: LD_OWVAR 2
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 21
72866: PUSH
72867: LD_INT 2
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PPUSH
72878: CALL_OW 69
72882: ST_TO_ADDR
// if not tmp then
72883: LD_VAR 0 1
72887: NOT
72888: IFFALSE 72892
// exit ;
72890: GO 72918
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
72892: LD_VAR 0 1
72896: PUSH
72897: LD_INT 1
72899: PPUSH
72900: LD_VAR 0 1
72904: PPUSH
72905: CALL_OW 12
72909: ARRAY
72910: PPUSH
72911: LD_INT 60
72913: PPUSH
72914: CALL_OW 234
// end ;
72918: PPOPN 1
72920: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
72921: LD_EXP 78
72925: PUSH
72926: LD_EXP 108
72930: AND
72931: IFFALSE 73030
72933: GO 72935
72935: DISABLE
72936: LD_INT 0
72938: PPUSH
72939: PPUSH
// begin enable ;
72940: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
72941: LD_ADDR_VAR 0 1
72945: PUSH
72946: LD_INT 22
72948: PUSH
72949: LD_OWVAR 2
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 61
72960: PUSH
72961: EMPTY
72962: LIST
72963: PUSH
72964: LD_INT 33
72966: PUSH
72967: LD_INT 2
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: LIST
72978: PPUSH
72979: CALL_OW 69
72983: ST_TO_ADDR
// if not tmp then
72984: LD_VAR 0 1
72988: NOT
72989: IFFALSE 72993
// exit ;
72991: GO 73030
// for i in tmp do
72993: LD_ADDR_VAR 0 2
72997: PUSH
72998: LD_VAR 0 1
73002: PUSH
73003: FOR_IN
73004: IFFALSE 73028
// if IsControledBy ( i ) then
73006: LD_VAR 0 2
73010: PPUSH
73011: CALL_OW 312
73015: IFFALSE 73026
// ComUnlink ( i ) ;
73017: LD_VAR 0 2
73021: PPUSH
73022: CALL_OW 136
73026: GO 73003
73028: POP
73029: POP
// end ;
73030: PPOPN 2
73032: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
73033: LD_EXP 78
73037: PUSH
73038: LD_EXP 109
73042: AND
73043: IFFALSE 73183
73045: GO 73047
73047: DISABLE
73048: LD_INT 0
73050: PPUSH
73051: PPUSH
// begin ToLua ( displayPowell(); ) ;
73052: LD_STRING displayPowell();
73054: PPUSH
73055: CALL_OW 559
// uc_side := 0 ;
73059: LD_ADDR_OWVAR 20
73063: PUSH
73064: LD_INT 0
73066: ST_TO_ADDR
// uc_nation := 2 ;
73067: LD_ADDR_OWVAR 21
73071: PUSH
73072: LD_INT 2
73074: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
73075: LD_ADDR_OWVAR 37
73079: PUSH
73080: LD_INT 14
73082: ST_TO_ADDR
// vc_engine := engine_siberite ;
73083: LD_ADDR_OWVAR 39
73087: PUSH
73088: LD_INT 3
73090: ST_TO_ADDR
// vc_control := control_apeman ;
73091: LD_ADDR_OWVAR 38
73095: PUSH
73096: LD_INT 5
73098: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
73099: LD_ADDR_OWVAR 40
73103: PUSH
73104: LD_INT 29
73106: ST_TO_ADDR
// un := CreateVehicle ;
73107: LD_ADDR_VAR 0 2
73111: PUSH
73112: CALL_OW 45
73116: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73117: LD_VAR 0 2
73121: PPUSH
73122: LD_INT 1
73124: PPUSH
73125: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73129: LD_INT 35
73131: PPUSH
73132: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73136: LD_VAR 0 2
73140: PPUSH
73141: LD_INT 22
73143: PUSH
73144: LD_OWVAR 2
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PPUSH
73153: CALL_OW 69
73157: PPUSH
73158: LD_VAR 0 2
73162: PPUSH
73163: CALL_OW 74
73167: PPUSH
73168: CALL_OW 115
// until IsDead ( un ) ;
73172: LD_VAR 0 2
73176: PPUSH
73177: CALL_OW 301
73181: IFFALSE 73129
// end ;
73183: PPOPN 2
73185: END
// every 0 0$1 trigger StreamModeActive and sStu do
73186: LD_EXP 78
73190: PUSH
73191: LD_EXP 117
73195: AND
73196: IFFALSE 73212
73198: GO 73200
73200: DISABLE
// begin ToLua ( displayStucuk(); ) ;
73201: LD_STRING displayStucuk();
73203: PPUSH
73204: CALL_OW 559
// ResetFog ;
73208: CALL_OW 335
// end ;
73212: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
73213: LD_EXP 78
73217: PUSH
73218: LD_EXP 110
73222: AND
73223: IFFALSE 73364
73225: GO 73227
73227: DISABLE
73228: LD_INT 0
73230: PPUSH
73231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73232: LD_ADDR_VAR 0 2
73236: PUSH
73237: LD_INT 22
73239: PUSH
73240: LD_OWVAR 2
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 21
73251: PUSH
73252: LD_INT 1
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PPUSH
73263: CALL_OW 69
73267: ST_TO_ADDR
// if not tmp then
73268: LD_VAR 0 2
73272: NOT
73273: IFFALSE 73277
// exit ;
73275: GO 73364
// un := tmp [ rand ( 1 , tmp ) ] ;
73277: LD_ADDR_VAR 0 1
73281: PUSH
73282: LD_VAR 0 2
73286: PUSH
73287: LD_INT 1
73289: PPUSH
73290: LD_VAR 0 2
73294: PPUSH
73295: CALL_OW 12
73299: ARRAY
73300: ST_TO_ADDR
// SetSide ( un , 0 ) ;
73301: LD_VAR 0 1
73305: PPUSH
73306: LD_INT 0
73308: PPUSH
73309: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
73313: LD_VAR 0 1
73317: PPUSH
73318: LD_OWVAR 3
73322: PUSH
73323: LD_VAR 0 1
73327: DIFF
73328: PPUSH
73329: LD_VAR 0 1
73333: PPUSH
73334: CALL_OW 74
73338: PPUSH
73339: CALL_OW 115
// wait ( 0 0$20 ) ;
73343: LD_INT 700
73345: PPUSH
73346: CALL_OW 67
// SetSide ( un , your_side ) ;
73350: LD_VAR 0 1
73354: PPUSH
73355: LD_OWVAR 2
73359: PPUSH
73360: CALL_OW 235
// end ;
73364: PPOPN 2
73366: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73367: LD_EXP 78
73371: PUSH
73372: LD_EXP 111
73376: AND
73377: IFFALSE 73483
73379: GO 73381
73381: DISABLE
73382: LD_INT 0
73384: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73385: LD_ADDR_VAR 0 1
73389: PUSH
73390: LD_INT 22
73392: PUSH
73393: LD_OWVAR 2
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 2
73404: PUSH
73405: LD_INT 30
73407: PUSH
73408: LD_INT 0
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: PUSH
73415: LD_INT 30
73417: PUSH
73418: LD_INT 1
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: LIST
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PPUSH
73434: CALL_OW 69
73438: ST_TO_ADDR
// if not depot then
73439: LD_VAR 0 1
73443: NOT
73444: IFFALSE 73448
// exit ;
73446: GO 73483
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73448: LD_VAR 0 1
73452: PUSH
73453: LD_INT 1
73455: ARRAY
73456: PPUSH
73457: CALL_OW 250
73461: PPUSH
73462: LD_VAR 0 1
73466: PUSH
73467: LD_INT 1
73469: ARRAY
73470: PPUSH
73471: CALL_OW 251
73475: PPUSH
73476: LD_INT 70
73478: PPUSH
73479: CALL_OW 495
// end ;
73483: PPOPN 1
73485: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73486: LD_EXP 78
73490: PUSH
73491: LD_EXP 112
73495: AND
73496: IFFALSE 73707
73498: GO 73500
73500: DISABLE
73501: LD_INT 0
73503: PPUSH
73504: PPUSH
73505: PPUSH
73506: PPUSH
73507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73508: LD_ADDR_VAR 0 5
73512: PUSH
73513: LD_INT 22
73515: PUSH
73516: LD_OWVAR 2
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: LD_INT 21
73527: PUSH
73528: LD_INT 1
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PPUSH
73539: CALL_OW 69
73543: ST_TO_ADDR
// if not tmp then
73544: LD_VAR 0 5
73548: NOT
73549: IFFALSE 73553
// exit ;
73551: GO 73707
// for i in tmp do
73553: LD_ADDR_VAR 0 1
73557: PUSH
73558: LD_VAR 0 5
73562: PUSH
73563: FOR_IN
73564: IFFALSE 73705
// begin d := rand ( 0 , 5 ) ;
73566: LD_ADDR_VAR 0 4
73570: PUSH
73571: LD_INT 0
73573: PPUSH
73574: LD_INT 5
73576: PPUSH
73577: CALL_OW 12
73581: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73582: LD_ADDR_VAR 0 2
73586: PUSH
73587: LD_VAR 0 1
73591: PPUSH
73592: CALL_OW 250
73596: PPUSH
73597: LD_VAR 0 4
73601: PPUSH
73602: LD_INT 3
73604: PPUSH
73605: LD_INT 12
73607: PPUSH
73608: CALL_OW 12
73612: PPUSH
73613: CALL_OW 272
73617: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73618: LD_ADDR_VAR 0 3
73622: PUSH
73623: LD_VAR 0 1
73627: PPUSH
73628: CALL_OW 251
73632: PPUSH
73633: LD_VAR 0 4
73637: PPUSH
73638: LD_INT 3
73640: PPUSH
73641: LD_INT 12
73643: PPUSH
73644: CALL_OW 12
73648: PPUSH
73649: CALL_OW 273
73653: ST_TO_ADDR
// if ValidHex ( x , y ) then
73654: LD_VAR 0 2
73658: PPUSH
73659: LD_VAR 0 3
73663: PPUSH
73664: CALL_OW 488
73668: IFFALSE 73703
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73670: LD_VAR 0 1
73674: PPUSH
73675: LD_VAR 0 2
73679: PPUSH
73680: LD_VAR 0 3
73684: PPUSH
73685: LD_INT 3
73687: PPUSH
73688: LD_INT 6
73690: PPUSH
73691: CALL_OW 12
73695: PPUSH
73696: LD_INT 1
73698: PPUSH
73699: CALL_OW 483
// end ;
73703: GO 73563
73705: POP
73706: POP
// end ;
73707: PPOPN 5
73709: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73710: LD_EXP 78
73714: PUSH
73715: LD_EXP 113
73719: AND
73720: IFFALSE 73814
73722: GO 73724
73724: DISABLE
73725: LD_INT 0
73727: PPUSH
73728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73729: LD_ADDR_VAR 0 2
73733: PUSH
73734: LD_INT 22
73736: PUSH
73737: LD_OWVAR 2
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 32
73748: PUSH
73749: LD_INT 1
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 21
73758: PUSH
73759: LD_INT 2
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: LIST
73770: PPUSH
73771: CALL_OW 69
73775: ST_TO_ADDR
// if not tmp then
73776: LD_VAR 0 2
73780: NOT
73781: IFFALSE 73785
// exit ;
73783: GO 73814
// for i in tmp do
73785: LD_ADDR_VAR 0 1
73789: PUSH
73790: LD_VAR 0 2
73794: PUSH
73795: FOR_IN
73796: IFFALSE 73812
// SetFuel ( i , 0 ) ;
73798: LD_VAR 0 1
73802: PPUSH
73803: LD_INT 0
73805: PPUSH
73806: CALL_OW 240
73810: GO 73795
73812: POP
73813: POP
// end ;
73814: PPOPN 2
73816: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
73817: LD_EXP 78
73821: PUSH
73822: LD_EXP 114
73826: AND
73827: IFFALSE 73893
73829: GO 73831
73831: DISABLE
73832: LD_INT 0
73834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73835: LD_ADDR_VAR 0 1
73839: PUSH
73840: LD_INT 22
73842: PUSH
73843: LD_OWVAR 2
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: PUSH
73852: LD_INT 30
73854: PUSH
73855: LD_INT 29
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PPUSH
73866: CALL_OW 69
73870: ST_TO_ADDR
// if not tmp then
73871: LD_VAR 0 1
73875: NOT
73876: IFFALSE 73880
// exit ;
73878: GO 73893
// DestroyUnit ( tmp [ 1 ] ) ;
73880: LD_VAR 0 1
73884: PUSH
73885: LD_INT 1
73887: ARRAY
73888: PPUSH
73889: CALL_OW 65
// end ;
73893: PPOPN 1
73895: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
73896: LD_EXP 78
73900: PUSH
73901: LD_EXP 116
73905: AND
73906: IFFALSE 74035
73908: GO 73910
73910: DISABLE
73911: LD_INT 0
73913: PPUSH
// begin uc_side := 0 ;
73914: LD_ADDR_OWVAR 20
73918: PUSH
73919: LD_INT 0
73921: ST_TO_ADDR
// uc_nation := nation_arabian ;
73922: LD_ADDR_OWVAR 21
73926: PUSH
73927: LD_INT 2
73929: ST_TO_ADDR
// hc_gallery :=  ;
73930: LD_ADDR_OWVAR 33
73934: PUSH
73935: LD_STRING 
73937: ST_TO_ADDR
// hc_name :=  ;
73938: LD_ADDR_OWVAR 26
73942: PUSH
73943: LD_STRING 
73945: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
73946: LD_INT 1
73948: PPUSH
73949: LD_INT 11
73951: PPUSH
73952: LD_INT 10
73954: PPUSH
73955: CALL_OW 380
// un := CreateHuman ;
73959: LD_ADDR_VAR 0 1
73963: PUSH
73964: CALL_OW 44
73968: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73969: LD_VAR 0 1
73973: PPUSH
73974: LD_INT 1
73976: PPUSH
73977: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73981: LD_INT 35
73983: PPUSH
73984: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73988: LD_VAR 0 1
73992: PPUSH
73993: LD_INT 22
73995: PUSH
73996: LD_OWVAR 2
74000: PUSH
74001: EMPTY
74002: LIST
74003: LIST
74004: PPUSH
74005: CALL_OW 69
74009: PPUSH
74010: LD_VAR 0 1
74014: PPUSH
74015: CALL_OW 74
74019: PPUSH
74020: CALL_OW 115
// until IsDead ( un ) ;
74024: LD_VAR 0 1
74028: PPUSH
74029: CALL_OW 301
74033: IFFALSE 73981
// end ;
74035: PPOPN 1
74037: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
74038: LD_EXP 78
74042: PUSH
74043: LD_EXP 118
74047: AND
74048: IFFALSE 74060
74050: GO 74052
74052: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
74053: LD_STRING earthquake(getX(game), 0, 32)
74055: PPUSH
74056: CALL_OW 559
74060: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
74061: LD_EXP 78
74065: PUSH
74066: LD_EXP 119
74070: AND
74071: IFFALSE 74162
74073: GO 74075
74075: DISABLE
74076: LD_INT 0
74078: PPUSH
// begin enable ;
74079: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
74080: LD_ADDR_VAR 0 1
74084: PUSH
74085: LD_INT 22
74087: PUSH
74088: LD_OWVAR 2
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: LD_INT 21
74099: PUSH
74100: LD_INT 2
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 33
74109: PUSH
74110: LD_INT 3
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: EMPTY
74118: LIST
74119: LIST
74120: LIST
74121: PPUSH
74122: CALL_OW 69
74126: ST_TO_ADDR
// if not tmp then
74127: LD_VAR 0 1
74131: NOT
74132: IFFALSE 74136
// exit ;
74134: GO 74162
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74136: LD_VAR 0 1
74140: PUSH
74141: LD_INT 1
74143: PPUSH
74144: LD_VAR 0 1
74148: PPUSH
74149: CALL_OW 12
74153: ARRAY
74154: PPUSH
74155: LD_INT 1
74157: PPUSH
74158: CALL_OW 234
// end ;
74162: PPOPN 1
74164: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
74165: LD_EXP 78
74169: PUSH
74170: LD_EXP 120
74174: AND
74175: IFFALSE 74316
74177: GO 74179
74179: DISABLE
74180: LD_INT 0
74182: PPUSH
74183: PPUSH
74184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74185: LD_ADDR_VAR 0 3
74189: PUSH
74190: LD_INT 22
74192: PUSH
74193: LD_OWVAR 2
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 25
74204: PUSH
74205: LD_INT 1
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PPUSH
74216: CALL_OW 69
74220: ST_TO_ADDR
// if not tmp then
74221: LD_VAR 0 3
74225: NOT
74226: IFFALSE 74230
// exit ;
74228: GO 74316
// un := tmp [ rand ( 1 , tmp ) ] ;
74230: LD_ADDR_VAR 0 2
74234: PUSH
74235: LD_VAR 0 3
74239: PUSH
74240: LD_INT 1
74242: PPUSH
74243: LD_VAR 0 3
74247: PPUSH
74248: CALL_OW 12
74252: ARRAY
74253: ST_TO_ADDR
// if Crawls ( un ) then
74254: LD_VAR 0 2
74258: PPUSH
74259: CALL_OW 318
74263: IFFALSE 74274
// ComWalk ( un ) ;
74265: LD_VAR 0 2
74269: PPUSH
74270: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
74274: LD_VAR 0 2
74278: PPUSH
74279: LD_INT 9
74281: PPUSH
74282: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
74286: LD_INT 28
74288: PPUSH
74289: LD_OWVAR 2
74293: PPUSH
74294: LD_INT 2
74296: PPUSH
74297: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
74301: LD_INT 29
74303: PPUSH
74304: LD_OWVAR 2
74308: PPUSH
74309: LD_INT 2
74311: PPUSH
74312: CALL_OW 322
// end ;
74316: PPOPN 3
74318: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
74319: LD_EXP 78
74323: PUSH
74324: LD_EXP 121
74328: AND
74329: IFFALSE 74440
74331: GO 74333
74333: DISABLE
74334: LD_INT 0
74336: PPUSH
74337: PPUSH
74338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74339: LD_ADDR_VAR 0 3
74343: PUSH
74344: LD_INT 22
74346: PUSH
74347: LD_OWVAR 2
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: PUSH
74356: LD_INT 25
74358: PUSH
74359: LD_INT 1
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PPUSH
74370: CALL_OW 69
74374: ST_TO_ADDR
// if not tmp then
74375: LD_VAR 0 3
74379: NOT
74380: IFFALSE 74384
// exit ;
74382: GO 74440
// un := tmp [ rand ( 1 , tmp ) ] ;
74384: LD_ADDR_VAR 0 2
74388: PUSH
74389: LD_VAR 0 3
74393: PUSH
74394: LD_INT 1
74396: PPUSH
74397: LD_VAR 0 3
74401: PPUSH
74402: CALL_OW 12
74406: ARRAY
74407: ST_TO_ADDR
// if Crawls ( un ) then
74408: LD_VAR 0 2
74412: PPUSH
74413: CALL_OW 318
74417: IFFALSE 74428
// ComWalk ( un ) ;
74419: LD_VAR 0 2
74423: PPUSH
74424: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74428: LD_VAR 0 2
74432: PPUSH
74433: LD_INT 8
74435: PPUSH
74436: CALL_OW 336
// end ;
74440: PPOPN 3
74442: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74443: LD_EXP 78
74447: PUSH
74448: LD_EXP 122
74452: AND
74453: IFFALSE 74597
74455: GO 74457
74457: DISABLE
74458: LD_INT 0
74460: PPUSH
74461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74462: LD_ADDR_VAR 0 2
74466: PUSH
74467: LD_INT 22
74469: PUSH
74470: LD_OWVAR 2
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 21
74481: PUSH
74482: LD_INT 2
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_INT 2
74491: PUSH
74492: LD_INT 34
74494: PUSH
74495: LD_INT 12
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PUSH
74502: LD_INT 34
74504: PUSH
74505: LD_INT 51
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 34
74514: PUSH
74515: LD_INT 32
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: LIST
74532: PPUSH
74533: CALL_OW 69
74537: ST_TO_ADDR
// if not tmp then
74538: LD_VAR 0 2
74542: NOT
74543: IFFALSE 74547
// exit ;
74545: GO 74597
// for i in tmp do
74547: LD_ADDR_VAR 0 1
74551: PUSH
74552: LD_VAR 0 2
74556: PUSH
74557: FOR_IN
74558: IFFALSE 74595
// if GetCargo ( i , mat_artifact ) = 0 then
74560: LD_VAR 0 1
74564: PPUSH
74565: LD_INT 4
74567: PPUSH
74568: CALL_OW 289
74572: PUSH
74573: LD_INT 0
74575: EQUAL
74576: IFFALSE 74593
// SetCargo ( i , mat_siberit , 100 ) ;
74578: LD_VAR 0 1
74582: PPUSH
74583: LD_INT 3
74585: PPUSH
74586: LD_INT 100
74588: PPUSH
74589: CALL_OW 290
74593: GO 74557
74595: POP
74596: POP
// end ;
74597: PPOPN 2
74599: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74600: LD_EXP 78
74604: PUSH
74605: LD_EXP 123
74609: AND
74610: IFFALSE 74793
74612: GO 74614
74614: DISABLE
74615: LD_INT 0
74617: PPUSH
74618: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74619: LD_ADDR_VAR 0 2
74623: PUSH
74624: LD_INT 22
74626: PUSH
74627: LD_OWVAR 2
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PPUSH
74636: CALL_OW 69
74640: ST_TO_ADDR
// if not tmp then
74641: LD_VAR 0 2
74645: NOT
74646: IFFALSE 74650
// exit ;
74648: GO 74793
// for i := 1 to 2 do
74650: LD_ADDR_VAR 0 1
74654: PUSH
74655: DOUBLE
74656: LD_INT 1
74658: DEC
74659: ST_TO_ADDR
74660: LD_INT 2
74662: PUSH
74663: FOR_TO
74664: IFFALSE 74791
// begin uc_side := your_side ;
74666: LD_ADDR_OWVAR 20
74670: PUSH
74671: LD_OWVAR 2
74675: ST_TO_ADDR
// uc_nation := nation_american ;
74676: LD_ADDR_OWVAR 21
74680: PUSH
74681: LD_INT 1
74683: ST_TO_ADDR
// vc_chassis := us_morphling ;
74684: LD_ADDR_OWVAR 37
74688: PUSH
74689: LD_INT 5
74691: ST_TO_ADDR
// vc_engine := engine_siberite ;
74692: LD_ADDR_OWVAR 39
74696: PUSH
74697: LD_INT 3
74699: ST_TO_ADDR
// vc_control := control_computer ;
74700: LD_ADDR_OWVAR 38
74704: PUSH
74705: LD_INT 3
74707: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74708: LD_ADDR_OWVAR 40
74712: PUSH
74713: LD_INT 10
74715: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74716: LD_VAR 0 2
74720: PUSH
74721: LD_INT 1
74723: ARRAY
74724: PPUSH
74725: CALL_OW 310
74729: NOT
74730: IFFALSE 74777
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74732: CALL_OW 45
74736: PPUSH
74737: LD_VAR 0 2
74741: PUSH
74742: LD_INT 1
74744: ARRAY
74745: PPUSH
74746: CALL_OW 250
74750: PPUSH
74751: LD_VAR 0 2
74755: PUSH
74756: LD_INT 1
74758: ARRAY
74759: PPUSH
74760: CALL_OW 251
74764: PPUSH
74765: LD_INT 12
74767: PPUSH
74768: LD_INT 1
74770: PPUSH
74771: CALL_OW 50
74775: GO 74789
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
74777: CALL_OW 45
74781: PPUSH
74782: LD_INT 1
74784: PPUSH
74785: CALL_OW 51
// end ;
74789: GO 74663
74791: POP
74792: POP
// end ;
74793: PPOPN 2
74795: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
74796: LD_EXP 78
74800: PUSH
74801: LD_EXP 124
74805: AND
74806: IFFALSE 75028
74808: GO 74810
74810: DISABLE
74811: LD_INT 0
74813: PPUSH
74814: PPUSH
74815: PPUSH
74816: PPUSH
74817: PPUSH
74818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74819: LD_ADDR_VAR 0 6
74823: PUSH
74824: LD_INT 22
74826: PUSH
74827: LD_OWVAR 2
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: PUSH
74836: LD_INT 21
74838: PUSH
74839: LD_INT 1
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: PUSH
74846: LD_INT 3
74848: PUSH
74849: LD_INT 23
74851: PUSH
74852: LD_INT 0
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: LIST
74867: PPUSH
74868: CALL_OW 69
74872: ST_TO_ADDR
// if not tmp then
74873: LD_VAR 0 6
74877: NOT
74878: IFFALSE 74882
// exit ;
74880: GO 75028
// s1 := rand ( 1 , 4 ) ;
74882: LD_ADDR_VAR 0 2
74886: PUSH
74887: LD_INT 1
74889: PPUSH
74890: LD_INT 4
74892: PPUSH
74893: CALL_OW 12
74897: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
74898: LD_ADDR_VAR 0 4
74902: PUSH
74903: LD_VAR 0 6
74907: PUSH
74908: LD_INT 1
74910: ARRAY
74911: PPUSH
74912: LD_VAR 0 2
74916: PPUSH
74917: CALL_OW 259
74921: ST_TO_ADDR
// if s1 = 1 then
74922: LD_VAR 0 2
74926: PUSH
74927: LD_INT 1
74929: EQUAL
74930: IFFALSE 74950
// s2 := rand ( 2 , 4 ) else
74932: LD_ADDR_VAR 0 3
74936: PUSH
74937: LD_INT 2
74939: PPUSH
74940: LD_INT 4
74942: PPUSH
74943: CALL_OW 12
74947: ST_TO_ADDR
74948: GO 74958
// s2 := 1 ;
74950: LD_ADDR_VAR 0 3
74954: PUSH
74955: LD_INT 1
74957: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
74958: LD_ADDR_VAR 0 5
74962: PUSH
74963: LD_VAR 0 6
74967: PUSH
74968: LD_INT 1
74970: ARRAY
74971: PPUSH
74972: LD_VAR 0 3
74976: PPUSH
74977: CALL_OW 259
74981: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
74982: LD_VAR 0 6
74986: PUSH
74987: LD_INT 1
74989: ARRAY
74990: PPUSH
74991: LD_VAR 0 2
74995: PPUSH
74996: LD_VAR 0 5
75000: PPUSH
75001: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
75005: LD_VAR 0 6
75009: PUSH
75010: LD_INT 1
75012: ARRAY
75013: PPUSH
75014: LD_VAR 0 3
75018: PPUSH
75019: LD_VAR 0 4
75023: PPUSH
75024: CALL_OW 237
// end ;
75028: PPOPN 6
75030: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
75031: LD_EXP 78
75035: PUSH
75036: LD_EXP 125
75040: AND
75041: IFFALSE 75120
75043: GO 75045
75045: DISABLE
75046: LD_INT 0
75048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
75049: LD_ADDR_VAR 0 1
75053: PUSH
75054: LD_INT 22
75056: PUSH
75057: LD_OWVAR 2
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PUSH
75066: LD_INT 30
75068: PUSH
75069: LD_INT 3
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: PPUSH
75080: CALL_OW 69
75084: ST_TO_ADDR
// if not tmp then
75085: LD_VAR 0 1
75089: NOT
75090: IFFALSE 75094
// exit ;
75092: GO 75120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75094: LD_VAR 0 1
75098: PUSH
75099: LD_INT 1
75101: PPUSH
75102: LD_VAR 0 1
75106: PPUSH
75107: CALL_OW 12
75111: ARRAY
75112: PPUSH
75113: LD_INT 1
75115: PPUSH
75116: CALL_OW 234
// end ;
75120: PPOPN 1
75122: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
75123: LD_EXP 78
75127: PUSH
75128: LD_EXP 126
75132: AND
75133: IFFALSE 75245
75135: GO 75137
75137: DISABLE
75138: LD_INT 0
75140: PPUSH
75141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
75142: LD_ADDR_VAR 0 2
75146: PUSH
75147: LD_INT 22
75149: PUSH
75150: LD_OWVAR 2
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 2
75161: PUSH
75162: LD_INT 30
75164: PUSH
75165: LD_INT 27
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: PUSH
75172: LD_INT 30
75174: PUSH
75175: LD_INT 26
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: PUSH
75182: LD_INT 30
75184: PUSH
75185: LD_INT 28
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: LIST
75196: LIST
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PPUSH
75202: CALL_OW 69
75206: ST_TO_ADDR
// if not tmp then
75207: LD_VAR 0 2
75211: NOT
75212: IFFALSE 75216
// exit ;
75214: GO 75245
// for i in tmp do
75216: LD_ADDR_VAR 0 1
75220: PUSH
75221: LD_VAR 0 2
75225: PUSH
75226: FOR_IN
75227: IFFALSE 75243
// SetLives ( i , 1 ) ;
75229: LD_VAR 0 1
75233: PPUSH
75234: LD_INT 1
75236: PPUSH
75237: CALL_OW 234
75241: GO 75226
75243: POP
75244: POP
// end ;
75245: PPOPN 2
75247: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
75248: LD_EXP 78
75252: PUSH
75253: LD_EXP 127
75257: AND
75258: IFFALSE 75532
75260: GO 75262
75262: DISABLE
75263: LD_INT 0
75265: PPUSH
75266: PPUSH
75267: PPUSH
// begin i := rand ( 1 , 7 ) ;
75268: LD_ADDR_VAR 0 1
75272: PUSH
75273: LD_INT 1
75275: PPUSH
75276: LD_INT 7
75278: PPUSH
75279: CALL_OW 12
75283: ST_TO_ADDR
// case i of 1 :
75284: LD_VAR 0 1
75288: PUSH
75289: LD_INT 1
75291: DOUBLE
75292: EQUAL
75293: IFTRUE 75297
75295: GO 75307
75297: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
75298: LD_STRING earthquake(getX(game), 0, 32)
75300: PPUSH
75301: CALL_OW 559
75305: GO 75532
75307: LD_INT 2
75309: DOUBLE
75310: EQUAL
75311: IFTRUE 75315
75313: GO 75329
75315: POP
// begin ToLua ( displayStucuk(); ) ;
75316: LD_STRING displayStucuk();
75318: PPUSH
75319: CALL_OW 559
// ResetFog ;
75323: CALL_OW 335
// end ; 3 :
75327: GO 75532
75329: LD_INT 3
75331: DOUBLE
75332: EQUAL
75333: IFTRUE 75337
75335: GO 75441
75337: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75338: LD_ADDR_VAR 0 2
75342: PUSH
75343: LD_INT 22
75345: PUSH
75346: LD_OWVAR 2
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: PUSH
75355: LD_INT 25
75357: PUSH
75358: LD_INT 1
75360: PUSH
75361: EMPTY
75362: LIST
75363: LIST
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PPUSH
75369: CALL_OW 69
75373: ST_TO_ADDR
// if not tmp then
75374: LD_VAR 0 2
75378: NOT
75379: IFFALSE 75383
// exit ;
75381: GO 75532
// un := tmp [ rand ( 1 , tmp ) ] ;
75383: LD_ADDR_VAR 0 3
75387: PUSH
75388: LD_VAR 0 2
75392: PUSH
75393: LD_INT 1
75395: PPUSH
75396: LD_VAR 0 2
75400: PPUSH
75401: CALL_OW 12
75405: ARRAY
75406: ST_TO_ADDR
// if Crawls ( un ) then
75407: LD_VAR 0 3
75411: PPUSH
75412: CALL_OW 318
75416: IFFALSE 75427
// ComWalk ( un ) ;
75418: LD_VAR 0 3
75422: PPUSH
75423: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75427: LD_VAR 0 3
75431: PPUSH
75432: LD_INT 8
75434: PPUSH
75435: CALL_OW 336
// end ; 4 :
75439: GO 75532
75441: LD_INT 4
75443: DOUBLE
75444: EQUAL
75445: IFTRUE 75449
75447: GO 75510
75449: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75450: LD_ADDR_VAR 0 2
75454: PUSH
75455: LD_INT 22
75457: PUSH
75458: LD_OWVAR 2
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: PUSH
75467: LD_INT 30
75469: PUSH
75470: LD_INT 29
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: PPUSH
75481: CALL_OW 69
75485: ST_TO_ADDR
// if not tmp then
75486: LD_VAR 0 2
75490: NOT
75491: IFFALSE 75495
// exit ;
75493: GO 75532
// DestroyUnit ( tmp [ 1 ] ) ;
75495: LD_VAR 0 2
75499: PUSH
75500: LD_INT 1
75502: ARRAY
75503: PPUSH
75504: CALL_OW 65
// end ; 5 .. 7 :
75508: GO 75532
75510: LD_INT 5
75512: DOUBLE
75513: GREATEREQUAL
75514: IFFALSE 75522
75516: LD_INT 7
75518: DOUBLE
75519: LESSEQUAL
75520: IFTRUE 75524
75522: GO 75531
75524: POP
// StreamSibBomb ; end ;
75525: CALL 71782 0 0
75529: GO 75532
75531: POP
// end ;
75532: PPOPN 3
75534: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75535: LD_EXP 78
75539: PUSH
75540: LD_EXP 128
75544: AND
75545: IFFALSE 75701
75547: GO 75549
75549: DISABLE
75550: LD_INT 0
75552: PPUSH
75553: PPUSH
75554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75555: LD_ADDR_VAR 0 2
75559: PUSH
75560: LD_INT 81
75562: PUSH
75563: LD_OWVAR 2
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: PUSH
75572: LD_INT 2
75574: PUSH
75575: LD_INT 21
75577: PUSH
75578: LD_INT 1
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 21
75587: PUSH
75588: LD_INT 2
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: LIST
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: PPUSH
75604: CALL_OW 69
75608: ST_TO_ADDR
// if not tmp then
75609: LD_VAR 0 2
75613: NOT
75614: IFFALSE 75618
// exit ;
75616: GO 75701
// p := 0 ;
75618: LD_ADDR_VAR 0 3
75622: PUSH
75623: LD_INT 0
75625: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75626: LD_INT 35
75628: PPUSH
75629: CALL_OW 67
// p := p + 1 ;
75633: LD_ADDR_VAR 0 3
75637: PUSH
75638: LD_VAR 0 3
75642: PUSH
75643: LD_INT 1
75645: PLUS
75646: ST_TO_ADDR
// for i in tmp do
75647: LD_ADDR_VAR 0 1
75651: PUSH
75652: LD_VAR 0 2
75656: PUSH
75657: FOR_IN
75658: IFFALSE 75689
// if GetLives ( i ) < 1000 then
75660: LD_VAR 0 1
75664: PPUSH
75665: CALL_OW 256
75669: PUSH
75670: LD_INT 1000
75672: LESS
75673: IFFALSE 75687
// SetLives ( i , 1000 ) ;
75675: LD_VAR 0 1
75679: PPUSH
75680: LD_INT 1000
75682: PPUSH
75683: CALL_OW 234
75687: GO 75657
75689: POP
75690: POP
// until p > 20 ;
75691: LD_VAR 0 3
75695: PUSH
75696: LD_INT 20
75698: GREATER
75699: IFFALSE 75626
// end ;
75701: PPOPN 3
75703: END
// every 0 0$1 trigger StreamModeActive and sTime do
75704: LD_EXP 78
75708: PUSH
75709: LD_EXP 129
75713: AND
75714: IFFALSE 75749
75716: GO 75718
75718: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75719: LD_INT 28
75721: PPUSH
75722: LD_OWVAR 2
75726: PPUSH
75727: LD_INT 2
75729: PPUSH
75730: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
75734: LD_INT 30
75736: PPUSH
75737: LD_OWVAR 2
75741: PPUSH
75742: LD_INT 2
75744: PPUSH
75745: CALL_OW 322
// end ;
75749: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
75750: LD_EXP 78
75754: PUSH
75755: LD_EXP 130
75759: AND
75760: IFFALSE 75881
75762: GO 75764
75764: DISABLE
75765: LD_INT 0
75767: PPUSH
75768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75769: LD_ADDR_VAR 0 2
75773: PUSH
75774: LD_INT 22
75776: PUSH
75777: LD_OWVAR 2
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: PUSH
75786: LD_INT 21
75788: PUSH
75789: LD_INT 1
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PUSH
75796: LD_INT 3
75798: PUSH
75799: LD_INT 23
75801: PUSH
75802: LD_INT 0
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: LIST
75817: PPUSH
75818: CALL_OW 69
75822: ST_TO_ADDR
// if not tmp then
75823: LD_VAR 0 2
75827: NOT
75828: IFFALSE 75832
// exit ;
75830: GO 75881
// for i in tmp do
75832: LD_ADDR_VAR 0 1
75836: PUSH
75837: LD_VAR 0 2
75841: PUSH
75842: FOR_IN
75843: IFFALSE 75879
// begin if Crawls ( i ) then
75845: LD_VAR 0 1
75849: PPUSH
75850: CALL_OW 318
75854: IFFALSE 75865
// ComWalk ( i ) ;
75856: LD_VAR 0 1
75860: PPUSH
75861: CALL_OW 138
// SetClass ( i , 2 ) ;
75865: LD_VAR 0 1
75869: PPUSH
75870: LD_INT 2
75872: PPUSH
75873: CALL_OW 336
// end ;
75877: GO 75842
75879: POP
75880: POP
// end ;
75881: PPOPN 2
75883: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
75884: LD_EXP 78
75888: PUSH
75889: LD_EXP 131
75893: AND
75894: IFFALSE 76175
75896: GO 75898
75898: DISABLE
75899: LD_INT 0
75901: PPUSH
75902: PPUSH
75903: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
75904: LD_OWVAR 2
75908: PPUSH
75909: LD_INT 9
75911: PPUSH
75912: LD_INT 1
75914: PPUSH
75915: LD_INT 1
75917: PPUSH
75918: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
75922: LD_INT 9
75924: PPUSH
75925: LD_OWVAR 2
75929: PPUSH
75930: CALL_OW 343
// uc_side := 9 ;
75934: LD_ADDR_OWVAR 20
75938: PUSH
75939: LD_INT 9
75941: ST_TO_ADDR
// uc_nation := 2 ;
75942: LD_ADDR_OWVAR 21
75946: PUSH
75947: LD_INT 2
75949: ST_TO_ADDR
// hc_name := Dark Warrior ;
75950: LD_ADDR_OWVAR 26
75954: PUSH
75955: LD_STRING Dark Warrior
75957: ST_TO_ADDR
// hc_gallery :=  ;
75958: LD_ADDR_OWVAR 33
75962: PUSH
75963: LD_STRING 
75965: ST_TO_ADDR
// hc_noskilllimit := true ;
75966: LD_ADDR_OWVAR 76
75970: PUSH
75971: LD_INT 1
75973: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
75974: LD_ADDR_OWVAR 31
75978: PUSH
75979: LD_INT 30
75981: PUSH
75982: LD_INT 30
75984: PUSH
75985: LD_INT 30
75987: PUSH
75988: LD_INT 30
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: LIST
75995: LIST
75996: ST_TO_ADDR
// un := CreateHuman ;
75997: LD_ADDR_VAR 0 3
76001: PUSH
76002: CALL_OW 44
76006: ST_TO_ADDR
// hc_noskilllimit := false ;
76007: LD_ADDR_OWVAR 76
76011: PUSH
76012: LD_INT 0
76014: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76015: LD_VAR 0 3
76019: PPUSH
76020: LD_INT 1
76022: PPUSH
76023: CALL_OW 51
// p := 0 ;
76027: LD_ADDR_VAR 0 2
76031: PUSH
76032: LD_INT 0
76034: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76035: LD_INT 35
76037: PPUSH
76038: CALL_OW 67
// p := p + 1 ;
76042: LD_ADDR_VAR 0 2
76046: PUSH
76047: LD_VAR 0 2
76051: PUSH
76052: LD_INT 1
76054: PLUS
76055: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
76056: LD_VAR 0 3
76060: PPUSH
76061: CALL_OW 256
76065: PUSH
76066: LD_INT 1000
76068: LESS
76069: IFFALSE 76083
// SetLives ( un , 1000 ) ;
76071: LD_VAR 0 3
76075: PPUSH
76076: LD_INT 1000
76078: PPUSH
76079: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
76083: LD_VAR 0 3
76087: PPUSH
76088: LD_INT 81
76090: PUSH
76091: LD_OWVAR 2
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: PUSH
76100: LD_INT 91
76102: PUSH
76103: LD_VAR 0 3
76107: PUSH
76108: LD_INT 30
76110: PUSH
76111: EMPTY
76112: LIST
76113: LIST
76114: LIST
76115: PUSH
76116: EMPTY
76117: LIST
76118: LIST
76119: PPUSH
76120: CALL_OW 69
76124: PPUSH
76125: LD_VAR 0 3
76129: PPUSH
76130: CALL_OW 74
76134: PPUSH
76135: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
76139: LD_VAR 0 2
76143: PUSH
76144: LD_INT 60
76146: GREATER
76147: PUSH
76148: LD_VAR 0 3
76152: PPUSH
76153: CALL_OW 301
76157: OR
76158: IFFALSE 76035
// if un then
76160: LD_VAR 0 3
76164: IFFALSE 76175
// RemoveUnit ( un ) ;
76166: LD_VAR 0 3
76170: PPUSH
76171: CALL_OW 64
// end ;
76175: PPOPN 3
76177: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76178: LD_INT 0
76180: PPUSH
// case cmd of 301 :
76181: LD_VAR 0 1
76185: PUSH
76186: LD_INT 301
76188: DOUBLE
76189: EQUAL
76190: IFTRUE 76194
76192: GO 76226
76194: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76195: LD_VAR 0 6
76199: PPUSH
76200: LD_VAR 0 7
76204: PPUSH
76205: LD_VAR 0 8
76209: PPUSH
76210: LD_VAR 0 4
76214: PPUSH
76215: LD_VAR 0 5
76219: PPUSH
76220: CALL 77427 0 5
76224: GO 76347
76226: LD_INT 302
76228: DOUBLE
76229: EQUAL
76230: IFTRUE 76234
76232: GO 76271
76234: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76235: LD_VAR 0 6
76239: PPUSH
76240: LD_VAR 0 7
76244: PPUSH
76245: LD_VAR 0 8
76249: PPUSH
76250: LD_VAR 0 9
76254: PPUSH
76255: LD_VAR 0 4
76259: PPUSH
76260: LD_VAR 0 5
76264: PPUSH
76265: CALL 77518 0 6
76269: GO 76347
76271: LD_INT 303
76273: DOUBLE
76274: EQUAL
76275: IFTRUE 76279
76277: GO 76316
76279: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76280: LD_VAR 0 6
76284: PPUSH
76285: LD_VAR 0 7
76289: PPUSH
76290: LD_VAR 0 8
76294: PPUSH
76295: LD_VAR 0 9
76299: PPUSH
76300: LD_VAR 0 4
76304: PPUSH
76305: LD_VAR 0 5
76309: PPUSH
76310: CALL 76352 0 6
76314: GO 76347
76316: LD_INT 304
76318: DOUBLE
76319: EQUAL
76320: IFTRUE 76324
76322: GO 76346
76324: POP
// hHackTeleport ( unit , x , y ) ; end ;
76325: LD_VAR 0 2
76329: PPUSH
76330: LD_VAR 0 4
76334: PPUSH
76335: LD_VAR 0 5
76339: PPUSH
76340: CALL 78111 0 3
76344: GO 76347
76346: POP
// end ;
76347: LD_VAR 0 12
76351: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
76352: LD_INT 0
76354: PPUSH
76355: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
76356: LD_VAR 0 1
76360: PUSH
76361: LD_INT 1
76363: LESS
76364: PUSH
76365: LD_VAR 0 1
76369: PUSH
76370: LD_INT 3
76372: GREATER
76373: OR
76374: PUSH
76375: LD_VAR 0 5
76379: PPUSH
76380: LD_VAR 0 6
76384: PPUSH
76385: CALL_OW 428
76389: OR
76390: IFFALSE 76394
// exit ;
76392: GO 77114
// uc_side := your_side ;
76394: LD_ADDR_OWVAR 20
76398: PUSH
76399: LD_OWVAR 2
76403: ST_TO_ADDR
// uc_nation := nation ;
76404: LD_ADDR_OWVAR 21
76408: PUSH
76409: LD_VAR 0 1
76413: ST_TO_ADDR
// bc_level = 1 ;
76414: LD_ADDR_OWVAR 43
76418: PUSH
76419: LD_INT 1
76421: ST_TO_ADDR
// case btype of 1 :
76422: LD_VAR 0 2
76426: PUSH
76427: LD_INT 1
76429: DOUBLE
76430: EQUAL
76431: IFTRUE 76435
76433: GO 76446
76435: POP
// bc_type := b_depot ; 2 :
76436: LD_ADDR_OWVAR 42
76440: PUSH
76441: LD_INT 0
76443: ST_TO_ADDR
76444: GO 77058
76446: LD_INT 2
76448: DOUBLE
76449: EQUAL
76450: IFTRUE 76454
76452: GO 76465
76454: POP
// bc_type := b_warehouse ; 3 :
76455: LD_ADDR_OWVAR 42
76459: PUSH
76460: LD_INT 1
76462: ST_TO_ADDR
76463: GO 77058
76465: LD_INT 3
76467: DOUBLE
76468: EQUAL
76469: IFTRUE 76473
76471: GO 76484
76473: POP
// bc_type := b_lab ; 4 .. 9 :
76474: LD_ADDR_OWVAR 42
76478: PUSH
76479: LD_INT 6
76481: ST_TO_ADDR
76482: GO 77058
76484: LD_INT 4
76486: DOUBLE
76487: GREATEREQUAL
76488: IFFALSE 76496
76490: LD_INT 9
76492: DOUBLE
76493: LESSEQUAL
76494: IFTRUE 76498
76496: GO 76550
76498: POP
// begin bc_type := b_lab_half ;
76499: LD_ADDR_OWVAR 42
76503: PUSH
76504: LD_INT 7
76506: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
76507: LD_ADDR_OWVAR 44
76511: PUSH
76512: LD_INT 10
76514: PUSH
76515: LD_INT 11
76517: PUSH
76518: LD_INT 12
76520: PUSH
76521: LD_INT 15
76523: PUSH
76524: LD_INT 14
76526: PUSH
76527: LD_INT 13
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: PUSH
76538: LD_VAR 0 2
76542: PUSH
76543: LD_INT 3
76545: MINUS
76546: ARRAY
76547: ST_TO_ADDR
// end ; 10 .. 13 :
76548: GO 77058
76550: LD_INT 10
76552: DOUBLE
76553: GREATEREQUAL
76554: IFFALSE 76562
76556: LD_INT 13
76558: DOUBLE
76559: LESSEQUAL
76560: IFTRUE 76564
76562: GO 76641
76564: POP
// begin bc_type := b_lab_full ;
76565: LD_ADDR_OWVAR 42
76569: PUSH
76570: LD_INT 8
76572: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
76573: LD_ADDR_OWVAR 44
76577: PUSH
76578: LD_INT 10
76580: PUSH
76581: LD_INT 12
76583: PUSH
76584: LD_INT 14
76586: PUSH
76587: LD_INT 13
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: PUSH
76596: LD_VAR 0 2
76600: PUSH
76601: LD_INT 9
76603: MINUS
76604: ARRAY
76605: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
76606: LD_ADDR_OWVAR 45
76610: PUSH
76611: LD_INT 11
76613: PUSH
76614: LD_INT 15
76616: PUSH
76617: LD_INT 12
76619: PUSH
76620: LD_INT 15
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: LIST
76627: LIST
76628: PUSH
76629: LD_VAR 0 2
76633: PUSH
76634: LD_INT 9
76636: MINUS
76637: ARRAY
76638: ST_TO_ADDR
// end ; 14 :
76639: GO 77058
76641: LD_INT 14
76643: DOUBLE
76644: EQUAL
76645: IFTRUE 76649
76647: GO 76660
76649: POP
// bc_type := b_workshop ; 15 :
76650: LD_ADDR_OWVAR 42
76654: PUSH
76655: LD_INT 2
76657: ST_TO_ADDR
76658: GO 77058
76660: LD_INT 15
76662: DOUBLE
76663: EQUAL
76664: IFTRUE 76668
76666: GO 76679
76668: POP
// bc_type := b_factory ; 16 :
76669: LD_ADDR_OWVAR 42
76673: PUSH
76674: LD_INT 3
76676: ST_TO_ADDR
76677: GO 77058
76679: LD_INT 16
76681: DOUBLE
76682: EQUAL
76683: IFTRUE 76687
76685: GO 76698
76687: POP
// bc_type := b_ext_gun ; 17 :
76688: LD_ADDR_OWVAR 42
76692: PUSH
76693: LD_INT 17
76695: ST_TO_ADDR
76696: GO 77058
76698: LD_INT 17
76700: DOUBLE
76701: EQUAL
76702: IFTRUE 76706
76704: GO 76734
76706: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
76707: LD_ADDR_OWVAR 42
76711: PUSH
76712: LD_INT 19
76714: PUSH
76715: LD_INT 23
76717: PUSH
76718: LD_INT 19
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: LIST
76725: PUSH
76726: LD_VAR 0 1
76730: ARRAY
76731: ST_TO_ADDR
76732: GO 77058
76734: LD_INT 18
76736: DOUBLE
76737: EQUAL
76738: IFTRUE 76742
76740: GO 76753
76742: POP
// bc_type := b_ext_radar ; 19 :
76743: LD_ADDR_OWVAR 42
76747: PUSH
76748: LD_INT 20
76750: ST_TO_ADDR
76751: GO 77058
76753: LD_INT 19
76755: DOUBLE
76756: EQUAL
76757: IFTRUE 76761
76759: GO 76772
76761: POP
// bc_type := b_ext_radio ; 20 :
76762: LD_ADDR_OWVAR 42
76766: PUSH
76767: LD_INT 22
76769: ST_TO_ADDR
76770: GO 77058
76772: LD_INT 20
76774: DOUBLE
76775: EQUAL
76776: IFTRUE 76780
76778: GO 76791
76780: POP
// bc_type := b_ext_siberium ; 21 :
76781: LD_ADDR_OWVAR 42
76785: PUSH
76786: LD_INT 21
76788: ST_TO_ADDR
76789: GO 77058
76791: LD_INT 21
76793: DOUBLE
76794: EQUAL
76795: IFTRUE 76799
76797: GO 76810
76799: POP
// bc_type := b_ext_computer ; 22 :
76800: LD_ADDR_OWVAR 42
76804: PUSH
76805: LD_INT 24
76807: ST_TO_ADDR
76808: GO 77058
76810: LD_INT 22
76812: DOUBLE
76813: EQUAL
76814: IFTRUE 76818
76816: GO 76829
76818: POP
// bc_type := b_ext_track ; 23 :
76819: LD_ADDR_OWVAR 42
76823: PUSH
76824: LD_INT 16
76826: ST_TO_ADDR
76827: GO 77058
76829: LD_INT 23
76831: DOUBLE
76832: EQUAL
76833: IFTRUE 76837
76835: GO 76848
76837: POP
// bc_type := b_ext_laser ; 24 :
76838: LD_ADDR_OWVAR 42
76842: PUSH
76843: LD_INT 25
76845: ST_TO_ADDR
76846: GO 77058
76848: LD_INT 24
76850: DOUBLE
76851: EQUAL
76852: IFTRUE 76856
76854: GO 76867
76856: POP
// bc_type := b_control_tower ; 25 :
76857: LD_ADDR_OWVAR 42
76861: PUSH
76862: LD_INT 36
76864: ST_TO_ADDR
76865: GO 77058
76867: LD_INT 25
76869: DOUBLE
76870: EQUAL
76871: IFTRUE 76875
76873: GO 76886
76875: POP
// bc_type := b_breastwork ; 26 :
76876: LD_ADDR_OWVAR 42
76880: PUSH
76881: LD_INT 31
76883: ST_TO_ADDR
76884: GO 77058
76886: LD_INT 26
76888: DOUBLE
76889: EQUAL
76890: IFTRUE 76894
76892: GO 76905
76894: POP
// bc_type := b_bunker ; 27 :
76895: LD_ADDR_OWVAR 42
76899: PUSH
76900: LD_INT 32
76902: ST_TO_ADDR
76903: GO 77058
76905: LD_INT 27
76907: DOUBLE
76908: EQUAL
76909: IFTRUE 76913
76911: GO 76924
76913: POP
// bc_type := b_turret ; 28 :
76914: LD_ADDR_OWVAR 42
76918: PUSH
76919: LD_INT 33
76921: ST_TO_ADDR
76922: GO 77058
76924: LD_INT 28
76926: DOUBLE
76927: EQUAL
76928: IFTRUE 76932
76930: GO 76943
76932: POP
// bc_type := b_armoury ; 29 :
76933: LD_ADDR_OWVAR 42
76937: PUSH
76938: LD_INT 4
76940: ST_TO_ADDR
76941: GO 77058
76943: LD_INT 29
76945: DOUBLE
76946: EQUAL
76947: IFTRUE 76951
76949: GO 76962
76951: POP
// bc_type := b_barracks ; 30 :
76952: LD_ADDR_OWVAR 42
76956: PUSH
76957: LD_INT 5
76959: ST_TO_ADDR
76960: GO 77058
76962: LD_INT 30
76964: DOUBLE
76965: EQUAL
76966: IFTRUE 76970
76968: GO 76981
76970: POP
// bc_type := b_solar_power ; 31 :
76971: LD_ADDR_OWVAR 42
76975: PUSH
76976: LD_INT 27
76978: ST_TO_ADDR
76979: GO 77058
76981: LD_INT 31
76983: DOUBLE
76984: EQUAL
76985: IFTRUE 76989
76987: GO 77000
76989: POP
// bc_type := b_oil_power ; 32 :
76990: LD_ADDR_OWVAR 42
76994: PUSH
76995: LD_INT 26
76997: ST_TO_ADDR
76998: GO 77058
77000: LD_INT 32
77002: DOUBLE
77003: EQUAL
77004: IFTRUE 77008
77006: GO 77019
77008: POP
// bc_type := b_siberite_power ; 33 :
77009: LD_ADDR_OWVAR 42
77013: PUSH
77014: LD_INT 28
77016: ST_TO_ADDR
77017: GO 77058
77019: LD_INT 33
77021: DOUBLE
77022: EQUAL
77023: IFTRUE 77027
77025: GO 77038
77027: POP
// bc_type := b_oil_mine ; 34 :
77028: LD_ADDR_OWVAR 42
77032: PUSH
77033: LD_INT 29
77035: ST_TO_ADDR
77036: GO 77058
77038: LD_INT 34
77040: DOUBLE
77041: EQUAL
77042: IFTRUE 77046
77044: GO 77057
77046: POP
// bc_type := b_siberite_mine ; end ;
77047: LD_ADDR_OWVAR 42
77051: PUSH
77052: LD_INT 30
77054: ST_TO_ADDR
77055: GO 77058
77057: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
77058: LD_ADDR_VAR 0 8
77062: PUSH
77063: LD_VAR 0 5
77067: PPUSH
77068: LD_VAR 0 6
77072: PPUSH
77073: LD_VAR 0 3
77077: PPUSH
77078: CALL_OW 47
77082: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
77083: LD_OWVAR 42
77087: PUSH
77088: LD_INT 32
77090: PUSH
77091: LD_INT 33
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: IN
77098: IFFALSE 77114
// PlaceWeaponTurret ( b , weapon ) ;
77100: LD_VAR 0 8
77104: PPUSH
77105: LD_VAR 0 4
77109: PPUSH
77110: CALL_OW 431
// end ;
77114: LD_VAR 0 7
77118: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
77119: LD_INT 0
77121: PPUSH
77122: PPUSH
77123: PPUSH
77124: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77125: LD_ADDR_VAR 0 4
77129: PUSH
77130: LD_INT 22
77132: PUSH
77133: LD_OWVAR 2
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PUSH
77142: LD_INT 2
77144: PUSH
77145: LD_INT 30
77147: PUSH
77148: LD_INT 0
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 30
77157: PUSH
77158: LD_INT 1
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: LIST
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PPUSH
77174: CALL_OW 69
77178: ST_TO_ADDR
// if not tmp then
77179: LD_VAR 0 4
77183: NOT
77184: IFFALSE 77188
// exit ;
77186: GO 77247
// for i in tmp do
77188: LD_ADDR_VAR 0 2
77192: PUSH
77193: LD_VAR 0 4
77197: PUSH
77198: FOR_IN
77199: IFFALSE 77245
// for j = 1 to 3 do
77201: LD_ADDR_VAR 0 3
77205: PUSH
77206: DOUBLE
77207: LD_INT 1
77209: DEC
77210: ST_TO_ADDR
77211: LD_INT 3
77213: PUSH
77214: FOR_TO
77215: IFFALSE 77241
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77217: LD_VAR 0 2
77221: PPUSH
77222: CALL_OW 274
77226: PPUSH
77227: LD_VAR 0 3
77231: PPUSH
77232: LD_INT 99999
77234: PPUSH
77235: CALL_OW 277
77239: GO 77214
77241: POP
77242: POP
77243: GO 77198
77245: POP
77246: POP
// end ;
77247: LD_VAR 0 1
77251: RET
// export function hHackSetLevel10 ; var i , j ; begin
77252: LD_INT 0
77254: PPUSH
77255: PPUSH
77256: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77257: LD_ADDR_VAR 0 2
77261: PUSH
77262: LD_INT 21
77264: PUSH
77265: LD_INT 1
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PPUSH
77272: CALL_OW 69
77276: PUSH
77277: FOR_IN
77278: IFFALSE 77330
// if IsSelected ( i ) then
77280: LD_VAR 0 2
77284: PPUSH
77285: CALL_OW 306
77289: IFFALSE 77328
// begin for j := 1 to 4 do
77291: LD_ADDR_VAR 0 3
77295: PUSH
77296: DOUBLE
77297: LD_INT 1
77299: DEC
77300: ST_TO_ADDR
77301: LD_INT 4
77303: PUSH
77304: FOR_TO
77305: IFFALSE 77326
// SetSkill ( i , j , 10 ) ;
77307: LD_VAR 0 2
77311: PPUSH
77312: LD_VAR 0 3
77316: PPUSH
77317: LD_INT 10
77319: PPUSH
77320: CALL_OW 237
77324: GO 77304
77326: POP
77327: POP
// end ;
77328: GO 77277
77330: POP
77331: POP
// end ;
77332: LD_VAR 0 1
77336: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77337: LD_INT 0
77339: PPUSH
77340: PPUSH
77341: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
77342: LD_ADDR_VAR 0 2
77346: PUSH
77347: LD_INT 22
77349: PUSH
77350: LD_OWVAR 2
77354: PUSH
77355: EMPTY
77356: LIST
77357: LIST
77358: PUSH
77359: LD_INT 21
77361: PUSH
77362: LD_INT 1
77364: PUSH
77365: EMPTY
77366: LIST
77367: LIST
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: PPUSH
77373: CALL_OW 69
77377: PUSH
77378: FOR_IN
77379: IFFALSE 77420
// begin for j := 1 to 4 do
77381: LD_ADDR_VAR 0 3
77385: PUSH
77386: DOUBLE
77387: LD_INT 1
77389: DEC
77390: ST_TO_ADDR
77391: LD_INT 4
77393: PUSH
77394: FOR_TO
77395: IFFALSE 77416
// SetSkill ( i , j , 10 ) ;
77397: LD_VAR 0 2
77401: PPUSH
77402: LD_VAR 0 3
77406: PPUSH
77407: LD_INT 10
77409: PPUSH
77410: CALL_OW 237
77414: GO 77394
77416: POP
77417: POP
// end ;
77418: GO 77378
77420: POP
77421: POP
// end ;
77422: LD_VAR 0 1
77426: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
77427: LD_INT 0
77429: PPUSH
// uc_side := your_side ;
77430: LD_ADDR_OWVAR 20
77434: PUSH
77435: LD_OWVAR 2
77439: ST_TO_ADDR
// uc_nation := nation ;
77440: LD_ADDR_OWVAR 21
77444: PUSH
77445: LD_VAR 0 1
77449: ST_TO_ADDR
// InitHc ;
77450: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
77454: LD_INT 0
77456: PPUSH
77457: LD_VAR 0 2
77461: PPUSH
77462: LD_VAR 0 3
77466: PPUSH
77467: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
77471: LD_VAR 0 4
77475: PPUSH
77476: LD_VAR 0 5
77480: PPUSH
77481: CALL_OW 428
77485: PUSH
77486: LD_INT 0
77488: EQUAL
77489: IFFALSE 77513
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
77491: CALL_OW 44
77495: PPUSH
77496: LD_VAR 0 4
77500: PPUSH
77501: LD_VAR 0 5
77505: PPUSH
77506: LD_INT 1
77508: PPUSH
77509: CALL_OW 48
// end ;
77513: LD_VAR 0 6
77517: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
77518: LD_INT 0
77520: PPUSH
77521: PPUSH
// uc_side := your_side ;
77522: LD_ADDR_OWVAR 20
77526: PUSH
77527: LD_OWVAR 2
77531: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
77532: LD_VAR 0 1
77536: PUSH
77537: LD_INT 1
77539: PUSH
77540: LD_INT 2
77542: PUSH
77543: LD_INT 3
77545: PUSH
77546: LD_INT 4
77548: PUSH
77549: LD_INT 5
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: IN
77559: IFFALSE 77571
// uc_nation := nation_american else
77561: LD_ADDR_OWVAR 21
77565: PUSH
77566: LD_INT 1
77568: ST_TO_ADDR
77569: GO 77614
// if chassis in [ 11 , 12 , 13 , 14 ] then
77571: LD_VAR 0 1
77575: PUSH
77576: LD_INT 11
77578: PUSH
77579: LD_INT 12
77581: PUSH
77582: LD_INT 13
77584: PUSH
77585: LD_INT 14
77587: PUSH
77588: EMPTY
77589: LIST
77590: LIST
77591: LIST
77592: LIST
77593: IN
77594: IFFALSE 77606
// uc_nation := nation_arabian else
77596: LD_ADDR_OWVAR 21
77600: PUSH
77601: LD_INT 2
77603: ST_TO_ADDR
77604: GO 77614
// uc_nation := nation_russian ;
77606: LD_ADDR_OWVAR 21
77610: PUSH
77611: LD_INT 3
77613: ST_TO_ADDR
// vc_chassis := chassis ;
77614: LD_ADDR_OWVAR 37
77618: PUSH
77619: LD_VAR 0 1
77623: ST_TO_ADDR
// vc_engine := engine ;
77624: LD_ADDR_OWVAR 39
77628: PUSH
77629: LD_VAR 0 2
77633: ST_TO_ADDR
// vc_control := control ;
77634: LD_ADDR_OWVAR 38
77638: PUSH
77639: LD_VAR 0 3
77643: ST_TO_ADDR
// vc_weapon := weapon ;
77644: LD_ADDR_OWVAR 40
77648: PUSH
77649: LD_VAR 0 4
77653: ST_TO_ADDR
// un := CreateVehicle ;
77654: LD_ADDR_VAR 0 8
77658: PUSH
77659: CALL_OW 45
77663: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
77664: LD_VAR 0 8
77668: PPUSH
77669: LD_INT 0
77671: PPUSH
77672: LD_INT 5
77674: PPUSH
77675: CALL_OW 12
77679: PPUSH
77680: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
77684: LD_VAR 0 8
77688: PPUSH
77689: LD_VAR 0 5
77693: PPUSH
77694: LD_VAR 0 6
77698: PPUSH
77699: LD_INT 1
77701: PPUSH
77702: CALL_OW 48
// end ;
77706: LD_VAR 0 7
77710: RET
// export hInvincible ; every 1 do
77711: GO 77713
77713: DISABLE
// hInvincible := [ ] ;
77714: LD_ADDR_EXP 132
77718: PUSH
77719: EMPTY
77720: ST_TO_ADDR
77721: END
// every 10 do var i ;
77722: GO 77724
77724: DISABLE
77725: LD_INT 0
77727: PPUSH
// begin enable ;
77728: ENABLE
// if not hInvincible then
77729: LD_EXP 132
77733: NOT
77734: IFFALSE 77738
// exit ;
77736: GO 77782
// for i in hInvincible do
77738: LD_ADDR_VAR 0 1
77742: PUSH
77743: LD_EXP 132
77747: PUSH
77748: FOR_IN
77749: IFFALSE 77780
// if GetLives ( i ) < 1000 then
77751: LD_VAR 0 1
77755: PPUSH
77756: CALL_OW 256
77760: PUSH
77761: LD_INT 1000
77763: LESS
77764: IFFALSE 77778
// SetLives ( i , 1000 ) ;
77766: LD_VAR 0 1
77770: PPUSH
77771: LD_INT 1000
77773: PPUSH
77774: CALL_OW 234
77778: GO 77748
77780: POP
77781: POP
// end ;
77782: PPOPN 1
77784: END
// export function hHackInvincible ; var i ; begin
77785: LD_INT 0
77787: PPUSH
77788: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
77789: LD_ADDR_VAR 0 2
77793: PUSH
77794: LD_INT 2
77796: PUSH
77797: LD_INT 21
77799: PUSH
77800: LD_INT 1
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: PUSH
77807: LD_INT 21
77809: PUSH
77810: LD_INT 2
77812: PUSH
77813: EMPTY
77814: LIST
77815: LIST
77816: PUSH
77817: EMPTY
77818: LIST
77819: LIST
77820: LIST
77821: PPUSH
77822: CALL_OW 69
77826: PUSH
77827: FOR_IN
77828: IFFALSE 77889
// if IsSelected ( i ) then
77830: LD_VAR 0 2
77834: PPUSH
77835: CALL_OW 306
77839: IFFALSE 77887
// begin if i in hInvincible then
77841: LD_VAR 0 2
77845: PUSH
77846: LD_EXP 132
77850: IN
77851: IFFALSE 77871
// hInvincible := hInvincible diff i else
77853: LD_ADDR_EXP 132
77857: PUSH
77858: LD_EXP 132
77862: PUSH
77863: LD_VAR 0 2
77867: DIFF
77868: ST_TO_ADDR
77869: GO 77887
// hInvincible := hInvincible union i ;
77871: LD_ADDR_EXP 132
77875: PUSH
77876: LD_EXP 132
77880: PUSH
77881: LD_VAR 0 2
77885: UNION
77886: ST_TO_ADDR
// end ;
77887: GO 77827
77889: POP
77890: POP
// end ;
77891: LD_VAR 0 1
77895: RET
// export function hHackInvisible ; var i , j ; begin
77896: LD_INT 0
77898: PPUSH
77899: PPUSH
77900: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77901: LD_ADDR_VAR 0 2
77905: PUSH
77906: LD_INT 21
77908: PUSH
77909: LD_INT 1
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: PPUSH
77916: CALL_OW 69
77920: PUSH
77921: FOR_IN
77922: IFFALSE 77946
// if IsSelected ( i ) then
77924: LD_VAR 0 2
77928: PPUSH
77929: CALL_OW 306
77933: IFFALSE 77944
// ComForceInvisible ( i ) ;
77935: LD_VAR 0 2
77939: PPUSH
77940: CALL_OW 496
77944: GO 77921
77946: POP
77947: POP
// end ;
77948: LD_VAR 0 1
77952: RET
// export function hHackChangeYourSide ; begin
77953: LD_INT 0
77955: PPUSH
// if your_side = 8 then
77956: LD_OWVAR 2
77960: PUSH
77961: LD_INT 8
77963: EQUAL
77964: IFFALSE 77976
// your_side := 0 else
77966: LD_ADDR_OWVAR 2
77970: PUSH
77971: LD_INT 0
77973: ST_TO_ADDR
77974: GO 77990
// your_side := your_side + 1 ;
77976: LD_ADDR_OWVAR 2
77980: PUSH
77981: LD_OWVAR 2
77985: PUSH
77986: LD_INT 1
77988: PLUS
77989: ST_TO_ADDR
// end ;
77990: LD_VAR 0 1
77994: RET
// export function hHackChangeUnitSide ; var i , j ; begin
77995: LD_INT 0
77997: PPUSH
77998: PPUSH
77999: PPUSH
// for i in all_units do
78000: LD_ADDR_VAR 0 2
78004: PUSH
78005: LD_OWVAR 3
78009: PUSH
78010: FOR_IN
78011: IFFALSE 78089
// if IsSelected ( i ) then
78013: LD_VAR 0 2
78017: PPUSH
78018: CALL_OW 306
78022: IFFALSE 78087
// begin j := GetSide ( i ) ;
78024: LD_ADDR_VAR 0 3
78028: PUSH
78029: LD_VAR 0 2
78033: PPUSH
78034: CALL_OW 255
78038: ST_TO_ADDR
// if j = 8 then
78039: LD_VAR 0 3
78043: PUSH
78044: LD_INT 8
78046: EQUAL
78047: IFFALSE 78059
// j := 0 else
78049: LD_ADDR_VAR 0 3
78053: PUSH
78054: LD_INT 0
78056: ST_TO_ADDR
78057: GO 78073
// j := j + 1 ;
78059: LD_ADDR_VAR 0 3
78063: PUSH
78064: LD_VAR 0 3
78068: PUSH
78069: LD_INT 1
78071: PLUS
78072: ST_TO_ADDR
// SetSide ( i , j ) ;
78073: LD_VAR 0 2
78077: PPUSH
78078: LD_VAR 0 3
78082: PPUSH
78083: CALL_OW 235
// end ;
78087: GO 78010
78089: POP
78090: POP
// end ;
78091: LD_VAR 0 1
78095: RET
// export function hHackFog ; begin
78096: LD_INT 0
78098: PPUSH
// FogOff ( true ) ;
78099: LD_INT 1
78101: PPUSH
78102: CALL_OW 344
// end ;
78106: LD_VAR 0 1
78110: RET
// export function hHackTeleport ( unit , x , y ) ; begin
78111: LD_INT 0
78113: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
78114: LD_VAR 0 1
78118: PPUSH
78119: LD_VAR 0 2
78123: PPUSH
78124: LD_VAR 0 3
78128: PPUSH
78129: LD_INT 1
78131: PPUSH
78132: LD_INT 1
78134: PPUSH
78135: CALL_OW 483
// CenterOnXY ( x , y ) ;
78139: LD_VAR 0 2
78143: PPUSH
78144: LD_VAR 0 3
78148: PPUSH
78149: CALL_OW 84
// end ; end_of_file
78153: LD_VAR 0 4
78157: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78158: LD_VAR 0 1
78162: PUSH
78163: LD_INT 200
78165: DOUBLE
78166: GREATEREQUAL
78167: IFFALSE 78175
78169: LD_INT 299
78171: DOUBLE
78172: LESSEQUAL
78173: IFTRUE 78177
78175: GO 78209
78177: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78178: LD_VAR 0 1
78182: PPUSH
78183: LD_VAR 0 2
78187: PPUSH
78188: LD_VAR 0 3
78192: PPUSH
78193: LD_VAR 0 4
78197: PPUSH
78198: LD_VAR 0 5
78202: PPUSH
78203: CALL 78453 0 5
78207: GO 78286
78209: LD_INT 300
78211: DOUBLE
78212: GREATEREQUAL
78213: IFFALSE 78221
78215: LD_INT 399
78217: DOUBLE
78218: LESSEQUAL
78219: IFTRUE 78223
78221: GO 78285
78223: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78224: LD_VAR 0 1
78228: PPUSH
78229: LD_VAR 0 2
78233: PPUSH
78234: LD_VAR 0 3
78238: PPUSH
78239: LD_VAR 0 4
78243: PPUSH
78244: LD_VAR 0 5
78248: PPUSH
78249: LD_VAR 0 6
78253: PPUSH
78254: LD_VAR 0 7
78258: PPUSH
78259: LD_VAR 0 8
78263: PPUSH
78264: LD_VAR 0 9
78268: PPUSH
78269: LD_VAR 0 10
78273: PPUSH
78274: LD_VAR 0 11
78278: PPUSH
78279: CALL 76178 0 11
78283: GO 78286
78285: POP
// end ;
78286: PPOPN 11
78288: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78289: LD_VAR 0 1
78293: PPUSH
78294: LD_VAR 0 2
78298: PPUSH
78299: LD_VAR 0 3
78303: PPUSH
78304: LD_VAR 0 4
78308: PPUSH
78309: LD_VAR 0 5
78313: PPUSH
78314: CALL 78435 0 5
// end ; end_of_file
78318: PPOPN 5
78320: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
78321: LD_INT 0
78323: PPUSH
78324: PPUSH
78325: PPUSH
78326: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
78327: LD_VAR 0 1
78331: PPUSH
78332: CALL_OW 264
78336: PUSH
78337: LD_EXP 63
78341: EQUAL
78342: IFFALSE 78414
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78344: LD_INT 68
78346: PPUSH
78347: LD_VAR 0 1
78351: PPUSH
78352: CALL_OW 255
78356: PPUSH
78357: CALL_OW 321
78361: PUSH
78362: LD_INT 2
78364: EQUAL
78365: IFFALSE 78377
// eff := 70 else
78367: LD_ADDR_VAR 0 4
78371: PUSH
78372: LD_INT 70
78374: ST_TO_ADDR
78375: GO 78385
// eff := 30 ;
78377: LD_ADDR_VAR 0 4
78381: PUSH
78382: LD_INT 30
78384: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78385: LD_VAR 0 1
78389: PPUSH
78390: CALL_OW 250
78394: PPUSH
78395: LD_VAR 0 1
78399: PPUSH
78400: CALL_OW 251
78404: PPUSH
78405: LD_VAR 0 4
78409: PPUSH
78410: CALL_OW 495
// end ; end ;
78414: LD_VAR 0 2
78418: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
78419: LD_INT 0
78421: PPUSH
// end ;
78422: LD_VAR 0 4
78426: RET
// export function SOS_Command ( cmd ) ; begin
78427: LD_INT 0
78429: PPUSH
// end ;
78430: LD_VAR 0 2
78434: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
78435: LD_INT 0
78437: PPUSH
// if cmd = 121 then
78438: LD_VAR 0 1
78442: PUSH
78443: LD_INT 121
78445: EQUAL
78446: IFFALSE 78448
// end ;
78448: LD_VAR 0 6
78452: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
78453: LD_INT 0
78455: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78456: LD_VAR 0 1
78460: PUSH
78461: LD_INT 250
78463: EQUAL
78464: PUSH
78465: LD_VAR 0 2
78469: PPUSH
78470: CALL_OW 264
78474: PUSH
78475: LD_EXP 66
78479: EQUAL
78480: AND
78481: IFFALSE 78502
// MinerPlaceMine ( unit , x , y ) ;
78483: LD_VAR 0 2
78487: PPUSH
78488: LD_VAR 0 4
78492: PPUSH
78493: LD_VAR 0 5
78497: PPUSH
78498: CALL 80851 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
78502: LD_VAR 0 1
78506: PUSH
78507: LD_INT 251
78509: EQUAL
78510: PUSH
78511: LD_VAR 0 2
78515: PPUSH
78516: CALL_OW 264
78520: PUSH
78521: LD_EXP 66
78525: EQUAL
78526: AND
78527: IFFALSE 78548
// MinerDetonateMine ( unit , x , y ) ;
78529: LD_VAR 0 2
78533: PPUSH
78534: LD_VAR 0 4
78538: PPUSH
78539: LD_VAR 0 5
78543: PPUSH
78544: CALL 81128 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78548: LD_VAR 0 1
78552: PUSH
78553: LD_INT 252
78555: EQUAL
78556: PUSH
78557: LD_VAR 0 2
78561: PPUSH
78562: CALL_OW 264
78566: PUSH
78567: LD_EXP 66
78571: EQUAL
78572: AND
78573: IFFALSE 78594
// MinerCreateMinefield ( unit , x , y ) ;
78575: LD_VAR 0 2
78579: PPUSH
78580: LD_VAR 0 4
78584: PPUSH
78585: LD_VAR 0 5
78589: PPUSH
78590: CALL 81545 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78594: LD_VAR 0 1
78598: PUSH
78599: LD_INT 253
78601: EQUAL
78602: PUSH
78603: LD_VAR 0 2
78607: PPUSH
78608: CALL_OW 257
78612: PUSH
78613: LD_INT 5
78615: EQUAL
78616: AND
78617: IFFALSE 78638
// ComBinocular ( unit , x , y ) ;
78619: LD_VAR 0 2
78623: PPUSH
78624: LD_VAR 0 4
78628: PPUSH
78629: LD_VAR 0 5
78633: PPUSH
78634: CALL 81916 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78638: LD_VAR 0 1
78642: PUSH
78643: LD_INT 254
78645: EQUAL
78646: PUSH
78647: LD_VAR 0 2
78651: PPUSH
78652: CALL_OW 264
78656: PUSH
78657: LD_EXP 61
78661: EQUAL
78662: AND
78663: PUSH
78664: LD_VAR 0 3
78668: PPUSH
78669: CALL_OW 263
78673: PUSH
78674: LD_INT 3
78676: EQUAL
78677: AND
78678: IFFALSE 78694
// HackDestroyVehicle ( unit , selectedUnit ) ;
78680: LD_VAR 0 2
78684: PPUSH
78685: LD_VAR 0 3
78689: PPUSH
78690: CALL 80211 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78694: LD_VAR 0 1
78698: PUSH
78699: LD_INT 255
78701: EQUAL
78702: PUSH
78703: LD_VAR 0 2
78707: PPUSH
78708: CALL_OW 264
78712: PUSH
78713: LD_INT 14
78715: PUSH
78716: LD_INT 53
78718: PUSH
78719: EMPTY
78720: LIST
78721: LIST
78722: IN
78723: AND
78724: PUSH
78725: LD_VAR 0 4
78729: PPUSH
78730: LD_VAR 0 5
78734: PPUSH
78735: CALL_OW 488
78739: AND
78740: IFFALSE 78764
// CutTreeXYR ( unit , x , y , 12 ) ;
78742: LD_VAR 0 2
78746: PPUSH
78747: LD_VAR 0 4
78751: PPUSH
78752: LD_VAR 0 5
78756: PPUSH
78757: LD_INT 12
78759: PPUSH
78760: CALL 78777 0 4
// end ;
78764: LD_VAR 0 6
78768: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
78769: LD_INT 0
78771: PPUSH
// end ;
78772: LD_VAR 0 4
78776: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78777: LD_INT 0
78779: PPUSH
78780: PPUSH
78781: PPUSH
78782: PPUSH
78783: PPUSH
78784: PPUSH
78785: PPUSH
78786: PPUSH
78787: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
78788: LD_VAR 0 1
78792: NOT
78793: PUSH
78794: LD_VAR 0 2
78798: PPUSH
78799: LD_VAR 0 3
78803: PPUSH
78804: CALL_OW 488
78808: NOT
78809: OR
78810: PUSH
78811: LD_VAR 0 4
78815: NOT
78816: OR
78817: IFFALSE 78821
// exit ;
78819: GO 79161
// list := [ ] ;
78821: LD_ADDR_VAR 0 13
78825: PUSH
78826: EMPTY
78827: ST_TO_ADDR
// if x - r < 0 then
78828: LD_VAR 0 2
78832: PUSH
78833: LD_VAR 0 4
78837: MINUS
78838: PUSH
78839: LD_INT 0
78841: LESS
78842: IFFALSE 78854
// min_x := 0 else
78844: LD_ADDR_VAR 0 7
78848: PUSH
78849: LD_INT 0
78851: ST_TO_ADDR
78852: GO 78870
// min_x := x - r ;
78854: LD_ADDR_VAR 0 7
78858: PUSH
78859: LD_VAR 0 2
78863: PUSH
78864: LD_VAR 0 4
78868: MINUS
78869: ST_TO_ADDR
// if y - r < 0 then
78870: LD_VAR 0 3
78874: PUSH
78875: LD_VAR 0 4
78879: MINUS
78880: PUSH
78881: LD_INT 0
78883: LESS
78884: IFFALSE 78896
// min_y := 0 else
78886: LD_ADDR_VAR 0 8
78890: PUSH
78891: LD_INT 0
78893: ST_TO_ADDR
78894: GO 78912
// min_y := y - r ;
78896: LD_ADDR_VAR 0 8
78900: PUSH
78901: LD_VAR 0 3
78905: PUSH
78906: LD_VAR 0 4
78910: MINUS
78911: ST_TO_ADDR
// max_x := x + r ;
78912: LD_ADDR_VAR 0 9
78916: PUSH
78917: LD_VAR 0 2
78921: PUSH
78922: LD_VAR 0 4
78926: PLUS
78927: ST_TO_ADDR
// max_y := y + r ;
78928: LD_ADDR_VAR 0 10
78932: PUSH
78933: LD_VAR 0 3
78937: PUSH
78938: LD_VAR 0 4
78942: PLUS
78943: ST_TO_ADDR
// for _x = min_x to max_x do
78944: LD_ADDR_VAR 0 11
78948: PUSH
78949: DOUBLE
78950: LD_VAR 0 7
78954: DEC
78955: ST_TO_ADDR
78956: LD_VAR 0 9
78960: PUSH
78961: FOR_TO
78962: IFFALSE 79079
// for _y = min_y to max_y do
78964: LD_ADDR_VAR 0 12
78968: PUSH
78969: DOUBLE
78970: LD_VAR 0 8
78974: DEC
78975: ST_TO_ADDR
78976: LD_VAR 0 10
78980: PUSH
78981: FOR_TO
78982: IFFALSE 79075
// begin if not ValidHex ( _x , _y ) then
78984: LD_VAR 0 11
78988: PPUSH
78989: LD_VAR 0 12
78993: PPUSH
78994: CALL_OW 488
78998: NOT
78999: IFFALSE 79003
// continue ;
79001: GO 78981
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79003: LD_VAR 0 11
79007: PPUSH
79008: LD_VAR 0 12
79012: PPUSH
79013: CALL_OW 351
79017: PUSH
79018: LD_VAR 0 11
79022: PPUSH
79023: LD_VAR 0 12
79027: PPUSH
79028: CALL_OW 554
79032: AND
79033: IFFALSE 79073
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79035: LD_ADDR_VAR 0 13
79039: PUSH
79040: LD_VAR 0 13
79044: PPUSH
79045: LD_VAR 0 13
79049: PUSH
79050: LD_INT 1
79052: PLUS
79053: PPUSH
79054: LD_VAR 0 11
79058: PUSH
79059: LD_VAR 0 12
79063: PUSH
79064: EMPTY
79065: LIST
79066: LIST
79067: PPUSH
79068: CALL_OW 2
79072: ST_TO_ADDR
// end ;
79073: GO 78981
79075: POP
79076: POP
79077: GO 78961
79079: POP
79080: POP
// if not list then
79081: LD_VAR 0 13
79085: NOT
79086: IFFALSE 79090
// exit ;
79088: GO 79161
// for i in list do
79090: LD_ADDR_VAR 0 6
79094: PUSH
79095: LD_VAR 0 13
79099: PUSH
79100: FOR_IN
79101: IFFALSE 79159
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79103: LD_VAR 0 1
79107: PPUSH
79108: LD_STRING M
79110: PUSH
79111: LD_VAR 0 6
79115: PUSH
79116: LD_INT 1
79118: ARRAY
79119: PUSH
79120: LD_VAR 0 6
79124: PUSH
79125: LD_INT 2
79127: ARRAY
79128: PUSH
79129: LD_INT 0
79131: PUSH
79132: LD_INT 0
79134: PUSH
79135: LD_INT 0
79137: PUSH
79138: LD_INT 0
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: LIST
79145: LIST
79146: LIST
79147: LIST
79148: LIST
79149: PUSH
79150: EMPTY
79151: LIST
79152: PPUSH
79153: CALL_OW 447
79157: GO 79100
79159: POP
79160: POP
// end ;
79161: LD_VAR 0 5
79165: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79166: LD_EXP 135
79170: NOT
79171: IFFALSE 79221
79173: GO 79175
79175: DISABLE
// begin initHack := true ;
79176: LD_ADDR_EXP 135
79180: PUSH
79181: LD_INT 1
79183: ST_TO_ADDR
// hackTanks := [ ] ;
79184: LD_ADDR_EXP 136
79188: PUSH
79189: EMPTY
79190: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79191: LD_ADDR_EXP 137
79195: PUSH
79196: EMPTY
79197: ST_TO_ADDR
// hackLimit := 3 ;
79198: LD_ADDR_EXP 138
79202: PUSH
79203: LD_INT 3
79205: ST_TO_ADDR
// hackDist := 12 ;
79206: LD_ADDR_EXP 139
79210: PUSH
79211: LD_INT 12
79213: ST_TO_ADDR
// hackCounter := [ ] ;
79214: LD_ADDR_EXP 140
79218: PUSH
79219: EMPTY
79220: ST_TO_ADDR
// end ;
79221: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79222: LD_EXP 135
79226: PUSH
79227: LD_INT 34
79229: PUSH
79230: LD_EXP 61
79234: PUSH
79235: EMPTY
79236: LIST
79237: LIST
79238: PPUSH
79239: CALL_OW 69
79243: AND
79244: IFFALSE 79499
79246: GO 79248
79248: DISABLE
79249: LD_INT 0
79251: PPUSH
79252: PPUSH
// begin enable ;
79253: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79254: LD_ADDR_VAR 0 1
79258: PUSH
79259: LD_INT 34
79261: PUSH
79262: LD_EXP 61
79266: PUSH
79267: EMPTY
79268: LIST
79269: LIST
79270: PPUSH
79271: CALL_OW 69
79275: PUSH
79276: FOR_IN
79277: IFFALSE 79497
// begin if not i in hackTanks then
79279: LD_VAR 0 1
79283: PUSH
79284: LD_EXP 136
79288: IN
79289: NOT
79290: IFFALSE 79373
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79292: LD_ADDR_EXP 136
79296: PUSH
79297: LD_EXP 136
79301: PPUSH
79302: LD_EXP 136
79306: PUSH
79307: LD_INT 1
79309: PLUS
79310: PPUSH
79311: LD_VAR 0 1
79315: PPUSH
79316: CALL_OW 1
79320: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79321: LD_ADDR_EXP 137
79325: PUSH
79326: LD_EXP 137
79330: PPUSH
79331: LD_EXP 137
79335: PUSH
79336: LD_INT 1
79338: PLUS
79339: PPUSH
79340: EMPTY
79341: PPUSH
79342: CALL_OW 1
79346: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
79347: LD_ADDR_EXP 140
79351: PUSH
79352: LD_EXP 140
79356: PPUSH
79357: LD_EXP 140
79361: PUSH
79362: LD_INT 1
79364: PLUS
79365: PPUSH
79366: EMPTY
79367: PPUSH
79368: CALL_OW 1
79372: ST_TO_ADDR
// end ; if not IsOk ( i ) then
79373: LD_VAR 0 1
79377: PPUSH
79378: CALL_OW 302
79382: NOT
79383: IFFALSE 79396
// begin HackUnlinkAll ( i ) ;
79385: LD_VAR 0 1
79389: PPUSH
79390: CALL 79502 0 1
// continue ;
79394: GO 79276
// end ; HackCheckCapturedStatus ( i ) ;
79396: LD_VAR 0 1
79400: PPUSH
79401: CALL 79945 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
79405: LD_ADDR_VAR 0 2
79409: PUSH
79410: LD_INT 81
79412: PUSH
79413: LD_VAR 0 1
79417: PPUSH
79418: CALL_OW 255
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: PUSH
79427: LD_INT 33
79429: PUSH
79430: LD_INT 3
79432: PUSH
79433: EMPTY
79434: LIST
79435: LIST
79436: PUSH
79437: LD_INT 91
79439: PUSH
79440: LD_VAR 0 1
79444: PUSH
79445: LD_EXP 139
79449: PUSH
79450: EMPTY
79451: LIST
79452: LIST
79453: LIST
79454: PUSH
79455: LD_INT 50
79457: PUSH
79458: EMPTY
79459: LIST
79460: PUSH
79461: EMPTY
79462: LIST
79463: LIST
79464: LIST
79465: LIST
79466: PPUSH
79467: CALL_OW 69
79471: ST_TO_ADDR
// if not tmp then
79472: LD_VAR 0 2
79476: NOT
79477: IFFALSE 79481
// continue ;
79479: GO 79276
// HackLink ( i , tmp ) ;
79481: LD_VAR 0 1
79485: PPUSH
79486: LD_VAR 0 2
79490: PPUSH
79491: CALL 79638 0 2
// end ;
79495: GO 79276
79497: POP
79498: POP
// end ;
79499: PPOPN 2
79501: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
79502: LD_INT 0
79504: PPUSH
79505: PPUSH
79506: PPUSH
// if not hack in hackTanks then
79507: LD_VAR 0 1
79511: PUSH
79512: LD_EXP 136
79516: IN
79517: NOT
79518: IFFALSE 79522
// exit ;
79520: GO 79633
// index := GetElementIndex ( hackTanks , hack ) ;
79522: LD_ADDR_VAR 0 4
79526: PUSH
79527: LD_EXP 136
79531: PPUSH
79532: LD_VAR 0 1
79536: PPUSH
79537: CALL 30034 0 2
79541: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
79542: LD_EXP 137
79546: PUSH
79547: LD_VAR 0 4
79551: ARRAY
79552: IFFALSE 79633
// begin for i in hackTanksCaptured [ index ] do
79554: LD_ADDR_VAR 0 3
79558: PUSH
79559: LD_EXP 137
79563: PUSH
79564: LD_VAR 0 4
79568: ARRAY
79569: PUSH
79570: FOR_IN
79571: IFFALSE 79597
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
79573: LD_VAR 0 3
79577: PUSH
79578: LD_INT 1
79580: ARRAY
79581: PPUSH
79582: LD_VAR 0 3
79586: PUSH
79587: LD_INT 2
79589: ARRAY
79590: PPUSH
79591: CALL_OW 235
79595: GO 79570
79597: POP
79598: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
79599: LD_ADDR_EXP 137
79603: PUSH
79604: LD_EXP 137
79608: PPUSH
79609: LD_VAR 0 4
79613: PPUSH
79614: EMPTY
79615: PPUSH
79616: CALL_OW 1
79620: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
79621: LD_VAR 0 1
79625: PPUSH
79626: LD_INT 0
79628: PPUSH
79629: CALL_OW 505
// end ; end ;
79633: LD_VAR 0 2
79637: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
79638: LD_INT 0
79640: PPUSH
79641: PPUSH
79642: PPUSH
// if not hack in hackTanks or not vehicles then
79643: LD_VAR 0 1
79647: PUSH
79648: LD_EXP 136
79652: IN
79653: NOT
79654: PUSH
79655: LD_VAR 0 2
79659: NOT
79660: OR
79661: IFFALSE 79665
// exit ;
79663: GO 79940
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
79665: LD_ADDR_VAR 0 2
79669: PUSH
79670: LD_VAR 0 1
79674: PPUSH
79675: LD_VAR 0 2
79679: PPUSH
79680: LD_INT 1
79682: PPUSH
79683: LD_INT 1
79685: PPUSH
79686: CALL 30684 0 4
79690: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
79691: LD_ADDR_VAR 0 5
79695: PUSH
79696: LD_EXP 136
79700: PPUSH
79701: LD_VAR 0 1
79705: PPUSH
79706: CALL 30034 0 2
79710: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
79711: LD_EXP 137
79715: PUSH
79716: LD_VAR 0 5
79720: ARRAY
79721: PUSH
79722: LD_EXP 138
79726: LESS
79727: IFFALSE 79916
// begin for i := 1 to vehicles do
79729: LD_ADDR_VAR 0 4
79733: PUSH
79734: DOUBLE
79735: LD_INT 1
79737: DEC
79738: ST_TO_ADDR
79739: LD_VAR 0 2
79743: PUSH
79744: FOR_TO
79745: IFFALSE 79914
// begin if hackTanksCaptured [ index ] = hackLimit then
79747: LD_EXP 137
79751: PUSH
79752: LD_VAR 0 5
79756: ARRAY
79757: PUSH
79758: LD_EXP 138
79762: EQUAL
79763: IFFALSE 79767
// break ;
79765: GO 79914
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
79767: LD_ADDR_EXP 140
79771: PUSH
79772: LD_EXP 140
79776: PPUSH
79777: LD_VAR 0 5
79781: PPUSH
79782: LD_EXP 140
79786: PUSH
79787: LD_VAR 0 5
79791: ARRAY
79792: PUSH
79793: LD_INT 1
79795: PLUS
79796: PPUSH
79797: CALL_OW 1
79801: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
79802: LD_ADDR_EXP 137
79806: PUSH
79807: LD_EXP 137
79811: PPUSH
79812: LD_VAR 0 5
79816: PUSH
79817: LD_EXP 137
79821: PUSH
79822: LD_VAR 0 5
79826: ARRAY
79827: PUSH
79828: LD_INT 1
79830: PLUS
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: PPUSH
79836: LD_VAR 0 2
79840: PUSH
79841: LD_VAR 0 4
79845: ARRAY
79846: PUSH
79847: LD_VAR 0 2
79851: PUSH
79852: LD_VAR 0 4
79856: ARRAY
79857: PPUSH
79858: CALL_OW 255
79862: PUSH
79863: EMPTY
79864: LIST
79865: LIST
79866: PPUSH
79867: CALL 30249 0 3
79871: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
79872: LD_VAR 0 2
79876: PUSH
79877: LD_VAR 0 4
79881: ARRAY
79882: PPUSH
79883: LD_VAR 0 1
79887: PPUSH
79888: CALL_OW 255
79892: PPUSH
79893: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
79897: LD_VAR 0 2
79901: PUSH
79902: LD_VAR 0 4
79906: ARRAY
79907: PPUSH
79908: CALL_OW 141
// end ;
79912: GO 79744
79914: POP
79915: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79916: LD_VAR 0 1
79920: PPUSH
79921: LD_EXP 137
79925: PUSH
79926: LD_VAR 0 5
79930: ARRAY
79931: PUSH
79932: LD_INT 0
79934: PLUS
79935: PPUSH
79936: CALL_OW 505
// end ;
79940: LD_VAR 0 3
79944: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
79945: LD_INT 0
79947: PPUSH
79948: PPUSH
79949: PPUSH
79950: PPUSH
// if not hack in hackTanks then
79951: LD_VAR 0 1
79955: PUSH
79956: LD_EXP 136
79960: IN
79961: NOT
79962: IFFALSE 79966
// exit ;
79964: GO 80206
// index := GetElementIndex ( hackTanks , hack ) ;
79966: LD_ADDR_VAR 0 4
79970: PUSH
79971: LD_EXP 136
79975: PPUSH
79976: LD_VAR 0 1
79980: PPUSH
79981: CALL 30034 0 2
79985: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
79986: LD_ADDR_VAR 0 3
79990: PUSH
79991: DOUBLE
79992: LD_EXP 137
79996: PUSH
79997: LD_VAR 0 4
80001: ARRAY
80002: INC
80003: ST_TO_ADDR
80004: LD_INT 1
80006: PUSH
80007: FOR_DOWNTO
80008: IFFALSE 80180
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80010: LD_ADDR_VAR 0 5
80014: PUSH
80015: LD_EXP 137
80019: PUSH
80020: LD_VAR 0 4
80024: ARRAY
80025: PUSH
80026: LD_VAR 0 3
80030: ARRAY
80031: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80032: LD_VAR 0 5
80036: PUSH
80037: LD_INT 1
80039: ARRAY
80040: PPUSH
80041: CALL_OW 302
80045: NOT
80046: PUSH
80047: LD_VAR 0 5
80051: PUSH
80052: LD_INT 1
80054: ARRAY
80055: PPUSH
80056: CALL_OW 255
80060: PUSH
80061: LD_VAR 0 1
80065: PPUSH
80066: CALL_OW 255
80070: NONEQUAL
80071: OR
80072: IFFALSE 80178
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80074: LD_VAR 0 5
80078: PUSH
80079: LD_INT 1
80081: ARRAY
80082: PPUSH
80083: CALL_OW 305
80087: PUSH
80088: LD_VAR 0 5
80092: PUSH
80093: LD_INT 1
80095: ARRAY
80096: PPUSH
80097: CALL_OW 255
80101: PUSH
80102: LD_VAR 0 1
80106: PPUSH
80107: CALL_OW 255
80111: EQUAL
80112: AND
80113: IFFALSE 80137
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80115: LD_VAR 0 5
80119: PUSH
80120: LD_INT 1
80122: ARRAY
80123: PPUSH
80124: LD_VAR 0 5
80128: PUSH
80129: LD_INT 2
80131: ARRAY
80132: PPUSH
80133: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80137: LD_ADDR_EXP 137
80141: PUSH
80142: LD_EXP 137
80146: PPUSH
80147: LD_VAR 0 4
80151: PPUSH
80152: LD_EXP 137
80156: PUSH
80157: LD_VAR 0 4
80161: ARRAY
80162: PPUSH
80163: LD_VAR 0 3
80167: PPUSH
80168: CALL_OW 3
80172: PPUSH
80173: CALL_OW 1
80177: ST_TO_ADDR
// end ; end ;
80178: GO 80007
80180: POP
80181: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80182: LD_VAR 0 1
80186: PPUSH
80187: LD_EXP 137
80191: PUSH
80192: LD_VAR 0 4
80196: ARRAY
80197: PUSH
80198: LD_INT 0
80200: PLUS
80201: PPUSH
80202: CALL_OW 505
// end ;
80206: LD_VAR 0 2
80210: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80211: LD_INT 0
80213: PPUSH
80214: PPUSH
80215: PPUSH
80216: PPUSH
// if not hack in hackTanks then
80217: LD_VAR 0 1
80221: PUSH
80222: LD_EXP 136
80226: IN
80227: NOT
80228: IFFALSE 80232
// exit ;
80230: GO 80317
// index := GetElementIndex ( hackTanks , hack ) ;
80232: LD_ADDR_VAR 0 5
80236: PUSH
80237: LD_EXP 136
80241: PPUSH
80242: LD_VAR 0 1
80246: PPUSH
80247: CALL 30034 0 2
80251: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80252: LD_ADDR_VAR 0 4
80256: PUSH
80257: DOUBLE
80258: LD_INT 1
80260: DEC
80261: ST_TO_ADDR
80262: LD_EXP 137
80266: PUSH
80267: LD_VAR 0 5
80271: ARRAY
80272: PUSH
80273: FOR_TO
80274: IFFALSE 80315
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80276: LD_EXP 137
80280: PUSH
80281: LD_VAR 0 5
80285: ARRAY
80286: PUSH
80287: LD_VAR 0 4
80291: ARRAY
80292: PUSH
80293: LD_INT 1
80295: ARRAY
80296: PUSH
80297: LD_VAR 0 2
80301: EQUAL
80302: IFFALSE 80313
// KillUnit ( vehicle ) ;
80304: LD_VAR 0 2
80308: PPUSH
80309: CALL_OW 66
80313: GO 80273
80315: POP
80316: POP
// end ;
80317: LD_VAR 0 3
80321: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
80322: LD_EXP 141
80326: NOT
80327: IFFALSE 80362
80329: GO 80331
80331: DISABLE
// begin initMiner := true ;
80332: LD_ADDR_EXP 141
80336: PUSH
80337: LD_INT 1
80339: ST_TO_ADDR
// minersList := [ ] ;
80340: LD_ADDR_EXP 142
80344: PUSH
80345: EMPTY
80346: ST_TO_ADDR
// minerMinesList := [ ] ;
80347: LD_ADDR_EXP 143
80351: PUSH
80352: EMPTY
80353: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
80354: LD_ADDR_EXP 144
80358: PUSH
80359: LD_INT 5
80361: ST_TO_ADDR
// end ;
80362: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
80363: LD_EXP 141
80367: PUSH
80368: LD_INT 34
80370: PUSH
80371: LD_EXP 66
80375: PUSH
80376: EMPTY
80377: LIST
80378: LIST
80379: PPUSH
80380: CALL_OW 69
80384: AND
80385: IFFALSE 80848
80387: GO 80389
80389: DISABLE
80390: LD_INT 0
80392: PPUSH
80393: PPUSH
80394: PPUSH
80395: PPUSH
// begin enable ;
80396: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
80397: LD_ADDR_VAR 0 1
80401: PUSH
80402: LD_INT 34
80404: PUSH
80405: LD_EXP 66
80409: PUSH
80410: EMPTY
80411: LIST
80412: LIST
80413: PPUSH
80414: CALL_OW 69
80418: PUSH
80419: FOR_IN
80420: IFFALSE 80492
// begin if not i in minersList then
80422: LD_VAR 0 1
80426: PUSH
80427: LD_EXP 142
80431: IN
80432: NOT
80433: IFFALSE 80490
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
80435: LD_ADDR_EXP 142
80439: PUSH
80440: LD_EXP 142
80444: PPUSH
80445: LD_EXP 142
80449: PUSH
80450: LD_INT 1
80452: PLUS
80453: PPUSH
80454: LD_VAR 0 1
80458: PPUSH
80459: CALL_OW 1
80463: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
80464: LD_ADDR_EXP 143
80468: PUSH
80469: LD_EXP 143
80473: PPUSH
80474: LD_EXP 143
80478: PUSH
80479: LD_INT 1
80481: PLUS
80482: PPUSH
80483: EMPTY
80484: PPUSH
80485: CALL_OW 1
80489: ST_TO_ADDR
// end end ;
80490: GO 80419
80492: POP
80493: POP
// for i := minerMinesList downto 1 do
80494: LD_ADDR_VAR 0 1
80498: PUSH
80499: DOUBLE
80500: LD_EXP 143
80504: INC
80505: ST_TO_ADDR
80506: LD_INT 1
80508: PUSH
80509: FOR_DOWNTO
80510: IFFALSE 80846
// begin if IsLive ( minersList [ i ] ) then
80512: LD_EXP 142
80516: PUSH
80517: LD_VAR 0 1
80521: ARRAY
80522: PPUSH
80523: CALL_OW 300
80527: IFFALSE 80555
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
80529: LD_EXP 142
80533: PUSH
80534: LD_VAR 0 1
80538: ARRAY
80539: PPUSH
80540: LD_EXP 143
80544: PUSH
80545: LD_VAR 0 1
80549: ARRAY
80550: PPUSH
80551: CALL_OW 505
// if not minerMinesList [ i ] then
80555: LD_EXP 143
80559: PUSH
80560: LD_VAR 0 1
80564: ARRAY
80565: NOT
80566: IFFALSE 80570
// continue ;
80568: GO 80509
// for j := minerMinesList [ i ] downto 1 do
80570: LD_ADDR_VAR 0 2
80574: PUSH
80575: DOUBLE
80576: LD_EXP 143
80580: PUSH
80581: LD_VAR 0 1
80585: ARRAY
80586: INC
80587: ST_TO_ADDR
80588: LD_INT 1
80590: PUSH
80591: FOR_DOWNTO
80592: IFFALSE 80842
// begin side := GetSide ( minersList [ i ] ) ;
80594: LD_ADDR_VAR 0 3
80598: PUSH
80599: LD_EXP 142
80603: PUSH
80604: LD_VAR 0 1
80608: ARRAY
80609: PPUSH
80610: CALL_OW 255
80614: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
80615: LD_ADDR_VAR 0 4
80619: PUSH
80620: LD_EXP 143
80624: PUSH
80625: LD_VAR 0 1
80629: ARRAY
80630: PUSH
80631: LD_VAR 0 2
80635: ARRAY
80636: PUSH
80637: LD_INT 1
80639: ARRAY
80640: PPUSH
80641: LD_EXP 143
80645: PUSH
80646: LD_VAR 0 1
80650: ARRAY
80651: PUSH
80652: LD_VAR 0 2
80656: ARRAY
80657: PUSH
80658: LD_INT 2
80660: ARRAY
80661: PPUSH
80662: CALL_OW 428
80666: ST_TO_ADDR
// if not tmp then
80667: LD_VAR 0 4
80671: NOT
80672: IFFALSE 80676
// continue ;
80674: GO 80591
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
80676: LD_VAR 0 4
80680: PUSH
80681: LD_INT 81
80683: PUSH
80684: LD_VAR 0 3
80688: PUSH
80689: EMPTY
80690: LIST
80691: LIST
80692: PPUSH
80693: CALL_OW 69
80697: IN
80698: PUSH
80699: LD_EXP 143
80703: PUSH
80704: LD_VAR 0 1
80708: ARRAY
80709: PUSH
80710: LD_VAR 0 2
80714: ARRAY
80715: PUSH
80716: LD_INT 1
80718: ARRAY
80719: PPUSH
80720: LD_EXP 143
80724: PUSH
80725: LD_VAR 0 1
80729: ARRAY
80730: PUSH
80731: LD_VAR 0 2
80735: ARRAY
80736: PUSH
80737: LD_INT 2
80739: ARRAY
80740: PPUSH
80741: CALL_OW 458
80745: AND
80746: IFFALSE 80840
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
80748: LD_EXP 143
80752: PUSH
80753: LD_VAR 0 1
80757: ARRAY
80758: PUSH
80759: LD_VAR 0 2
80763: ARRAY
80764: PUSH
80765: LD_INT 1
80767: ARRAY
80768: PPUSH
80769: LD_EXP 143
80773: PUSH
80774: LD_VAR 0 1
80778: ARRAY
80779: PUSH
80780: LD_VAR 0 2
80784: ARRAY
80785: PUSH
80786: LD_INT 2
80788: ARRAY
80789: PPUSH
80790: LD_VAR 0 3
80794: PPUSH
80795: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
80799: LD_ADDR_EXP 143
80803: PUSH
80804: LD_EXP 143
80808: PPUSH
80809: LD_VAR 0 1
80813: PPUSH
80814: LD_EXP 143
80818: PUSH
80819: LD_VAR 0 1
80823: ARRAY
80824: PPUSH
80825: LD_VAR 0 2
80829: PPUSH
80830: CALL_OW 3
80834: PPUSH
80835: CALL_OW 1
80839: ST_TO_ADDR
// end ; end ;
80840: GO 80591
80842: POP
80843: POP
// end ;
80844: GO 80509
80846: POP
80847: POP
// end ;
80848: PPOPN 4
80850: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
80851: LD_INT 0
80853: PPUSH
80854: PPUSH
// result := false ;
80855: LD_ADDR_VAR 0 4
80859: PUSH
80860: LD_INT 0
80862: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
80863: LD_VAR 0 1
80867: PPUSH
80868: CALL_OW 264
80872: PUSH
80873: LD_EXP 66
80877: EQUAL
80878: NOT
80879: IFFALSE 80883
// exit ;
80881: GO 81123
// index := GetElementIndex ( minersList , unit ) ;
80883: LD_ADDR_VAR 0 5
80887: PUSH
80888: LD_EXP 142
80892: PPUSH
80893: LD_VAR 0 1
80897: PPUSH
80898: CALL 30034 0 2
80902: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
80903: LD_EXP 143
80907: PUSH
80908: LD_VAR 0 5
80912: ARRAY
80913: PUSH
80914: LD_EXP 144
80918: GREATEREQUAL
80919: IFFALSE 80923
// exit ;
80921: GO 81123
// ComMoveXY ( unit , x , y ) ;
80923: LD_VAR 0 1
80927: PPUSH
80928: LD_VAR 0 2
80932: PPUSH
80933: LD_VAR 0 3
80937: PPUSH
80938: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80942: LD_INT 35
80944: PPUSH
80945: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
80949: LD_VAR 0 1
80953: PPUSH
80954: LD_VAR 0 2
80958: PPUSH
80959: LD_VAR 0 3
80963: PPUSH
80964: CALL 60806 0 3
80968: NOT
80969: PUSH
80970: LD_VAR 0 1
80974: PPUSH
80975: CALL_OW 314
80979: AND
80980: IFFALSE 80984
// exit ;
80982: GO 81123
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
80984: LD_VAR 0 2
80988: PPUSH
80989: LD_VAR 0 3
80993: PPUSH
80994: CALL_OW 428
80998: PUSH
80999: LD_VAR 0 1
81003: EQUAL
81004: PUSH
81005: LD_VAR 0 1
81009: PPUSH
81010: CALL_OW 314
81014: NOT
81015: AND
81016: IFFALSE 80942
// PlaySoundXY ( x , y , PlantMine ) ;
81018: LD_VAR 0 2
81022: PPUSH
81023: LD_VAR 0 3
81027: PPUSH
81028: LD_STRING PlantMine
81030: PPUSH
81031: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
81035: LD_VAR 0 2
81039: PPUSH
81040: LD_VAR 0 3
81044: PPUSH
81045: LD_VAR 0 1
81049: PPUSH
81050: CALL_OW 255
81054: PPUSH
81055: LD_INT 0
81057: PPUSH
81058: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
81062: LD_ADDR_EXP 143
81066: PUSH
81067: LD_EXP 143
81071: PPUSH
81072: LD_VAR 0 5
81076: PUSH
81077: LD_EXP 143
81081: PUSH
81082: LD_VAR 0 5
81086: ARRAY
81087: PUSH
81088: LD_INT 1
81090: PLUS
81091: PUSH
81092: EMPTY
81093: LIST
81094: LIST
81095: PPUSH
81096: LD_VAR 0 2
81100: PUSH
81101: LD_VAR 0 3
81105: PUSH
81106: EMPTY
81107: LIST
81108: LIST
81109: PPUSH
81110: CALL 30249 0 3
81114: ST_TO_ADDR
// result := true ;
81115: LD_ADDR_VAR 0 4
81119: PUSH
81120: LD_INT 1
81122: ST_TO_ADDR
// end ;
81123: LD_VAR 0 4
81127: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
81128: LD_INT 0
81130: PPUSH
81131: PPUSH
81132: PPUSH
// if not unit in minersList then
81133: LD_VAR 0 1
81137: PUSH
81138: LD_EXP 142
81142: IN
81143: NOT
81144: IFFALSE 81148
// exit ;
81146: GO 81540
// index := GetElementIndex ( minersList , unit ) ;
81148: LD_ADDR_VAR 0 6
81152: PUSH
81153: LD_EXP 142
81157: PPUSH
81158: LD_VAR 0 1
81162: PPUSH
81163: CALL 30034 0 2
81167: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
81168: LD_ADDR_VAR 0 5
81172: PUSH
81173: DOUBLE
81174: LD_EXP 143
81178: PUSH
81179: LD_VAR 0 6
81183: ARRAY
81184: INC
81185: ST_TO_ADDR
81186: LD_INT 1
81188: PUSH
81189: FOR_DOWNTO
81190: IFFALSE 81351
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
81192: LD_EXP 143
81196: PUSH
81197: LD_VAR 0 6
81201: ARRAY
81202: PUSH
81203: LD_VAR 0 5
81207: ARRAY
81208: PUSH
81209: LD_INT 1
81211: ARRAY
81212: PUSH
81213: LD_VAR 0 2
81217: EQUAL
81218: PUSH
81219: LD_EXP 143
81223: PUSH
81224: LD_VAR 0 6
81228: ARRAY
81229: PUSH
81230: LD_VAR 0 5
81234: ARRAY
81235: PUSH
81236: LD_INT 2
81238: ARRAY
81239: PUSH
81240: LD_VAR 0 3
81244: EQUAL
81245: AND
81246: IFFALSE 81349
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81248: LD_EXP 143
81252: PUSH
81253: LD_VAR 0 6
81257: ARRAY
81258: PUSH
81259: LD_VAR 0 5
81263: ARRAY
81264: PUSH
81265: LD_INT 1
81267: ARRAY
81268: PPUSH
81269: LD_EXP 143
81273: PUSH
81274: LD_VAR 0 6
81278: ARRAY
81279: PUSH
81280: LD_VAR 0 5
81284: ARRAY
81285: PUSH
81286: LD_INT 2
81288: ARRAY
81289: PPUSH
81290: LD_VAR 0 1
81294: PPUSH
81295: CALL_OW 255
81299: PPUSH
81300: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81304: LD_ADDR_EXP 143
81308: PUSH
81309: LD_EXP 143
81313: PPUSH
81314: LD_VAR 0 6
81318: PPUSH
81319: LD_EXP 143
81323: PUSH
81324: LD_VAR 0 6
81328: ARRAY
81329: PPUSH
81330: LD_VAR 0 5
81334: PPUSH
81335: CALL_OW 3
81339: PPUSH
81340: CALL_OW 1
81344: ST_TO_ADDR
// exit ;
81345: POP
81346: POP
81347: GO 81540
// end ; end ;
81349: GO 81189
81351: POP
81352: POP
// for i := minerMinesList [ index ] downto 1 do
81353: LD_ADDR_VAR 0 5
81357: PUSH
81358: DOUBLE
81359: LD_EXP 143
81363: PUSH
81364: LD_VAR 0 6
81368: ARRAY
81369: INC
81370: ST_TO_ADDR
81371: LD_INT 1
81373: PUSH
81374: FOR_DOWNTO
81375: IFFALSE 81538
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
81377: LD_EXP 143
81381: PUSH
81382: LD_VAR 0 6
81386: ARRAY
81387: PUSH
81388: LD_VAR 0 5
81392: ARRAY
81393: PUSH
81394: LD_INT 1
81396: ARRAY
81397: PPUSH
81398: LD_EXP 143
81402: PUSH
81403: LD_VAR 0 6
81407: ARRAY
81408: PUSH
81409: LD_VAR 0 5
81413: ARRAY
81414: PUSH
81415: LD_INT 2
81417: ARRAY
81418: PPUSH
81419: LD_VAR 0 2
81423: PPUSH
81424: LD_VAR 0 3
81428: PPUSH
81429: CALL_OW 298
81433: PUSH
81434: LD_INT 6
81436: LESS
81437: IFFALSE 81536
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81439: LD_EXP 143
81443: PUSH
81444: LD_VAR 0 6
81448: ARRAY
81449: PUSH
81450: LD_VAR 0 5
81454: ARRAY
81455: PUSH
81456: LD_INT 1
81458: ARRAY
81459: PPUSH
81460: LD_EXP 143
81464: PUSH
81465: LD_VAR 0 6
81469: ARRAY
81470: PUSH
81471: LD_VAR 0 5
81475: ARRAY
81476: PUSH
81477: LD_INT 2
81479: ARRAY
81480: PPUSH
81481: LD_VAR 0 1
81485: PPUSH
81486: CALL_OW 255
81490: PPUSH
81491: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81495: LD_ADDR_EXP 143
81499: PUSH
81500: LD_EXP 143
81504: PPUSH
81505: LD_VAR 0 6
81509: PPUSH
81510: LD_EXP 143
81514: PUSH
81515: LD_VAR 0 6
81519: ARRAY
81520: PPUSH
81521: LD_VAR 0 5
81525: PPUSH
81526: CALL_OW 3
81530: PPUSH
81531: CALL_OW 1
81535: ST_TO_ADDR
// end ; end ;
81536: GO 81374
81538: POP
81539: POP
// end ;
81540: LD_VAR 0 4
81544: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
81545: LD_INT 0
81547: PPUSH
81548: PPUSH
81549: PPUSH
81550: PPUSH
81551: PPUSH
81552: PPUSH
81553: PPUSH
81554: PPUSH
81555: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
81556: LD_VAR 0 1
81560: PPUSH
81561: CALL_OW 264
81565: PUSH
81566: LD_EXP 66
81570: EQUAL
81571: NOT
81572: PUSH
81573: LD_VAR 0 1
81577: PUSH
81578: LD_EXP 142
81582: IN
81583: NOT
81584: OR
81585: IFFALSE 81589
// exit ;
81587: GO 81911
// index := GetElementIndex ( minersList , unit ) ;
81589: LD_ADDR_VAR 0 6
81593: PUSH
81594: LD_EXP 142
81598: PPUSH
81599: LD_VAR 0 1
81603: PPUSH
81604: CALL 30034 0 2
81608: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
81609: LD_ADDR_VAR 0 8
81613: PUSH
81614: LD_EXP 144
81618: PUSH
81619: LD_EXP 143
81623: PUSH
81624: LD_VAR 0 6
81628: ARRAY
81629: MINUS
81630: ST_TO_ADDR
// if not minesFreeAmount then
81631: LD_VAR 0 8
81635: NOT
81636: IFFALSE 81640
// exit ;
81638: GO 81911
// tmp := [ ] ;
81640: LD_ADDR_VAR 0 7
81644: PUSH
81645: EMPTY
81646: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
81647: LD_ADDR_VAR 0 5
81651: PUSH
81652: DOUBLE
81653: LD_INT 1
81655: DEC
81656: ST_TO_ADDR
81657: LD_VAR 0 8
81661: PUSH
81662: FOR_TO
81663: IFFALSE 81858
// begin _d := rand ( 0 , 5 ) ;
81665: LD_ADDR_VAR 0 11
81669: PUSH
81670: LD_INT 0
81672: PPUSH
81673: LD_INT 5
81675: PPUSH
81676: CALL_OW 12
81680: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
81681: LD_ADDR_VAR 0 12
81685: PUSH
81686: LD_INT 2
81688: PPUSH
81689: LD_INT 6
81691: PPUSH
81692: CALL_OW 12
81696: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
81697: LD_ADDR_VAR 0 9
81701: PUSH
81702: LD_VAR 0 2
81706: PPUSH
81707: LD_VAR 0 11
81711: PPUSH
81712: LD_VAR 0 12
81716: PPUSH
81717: CALL_OW 272
81721: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
81722: LD_ADDR_VAR 0 10
81726: PUSH
81727: LD_VAR 0 3
81731: PPUSH
81732: LD_VAR 0 11
81736: PPUSH
81737: LD_VAR 0 12
81741: PPUSH
81742: CALL_OW 273
81746: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
81747: LD_VAR 0 9
81751: PPUSH
81752: LD_VAR 0 10
81756: PPUSH
81757: CALL_OW 488
81761: PUSH
81762: LD_VAR 0 9
81766: PUSH
81767: LD_VAR 0 10
81771: PUSH
81772: EMPTY
81773: LIST
81774: LIST
81775: PUSH
81776: LD_VAR 0 7
81780: IN
81781: NOT
81782: AND
81783: PUSH
81784: LD_VAR 0 9
81788: PPUSH
81789: LD_VAR 0 10
81793: PPUSH
81794: CALL_OW 458
81798: NOT
81799: AND
81800: IFFALSE 81842
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
81802: LD_ADDR_VAR 0 7
81806: PUSH
81807: LD_VAR 0 7
81811: PPUSH
81812: LD_VAR 0 7
81816: PUSH
81817: LD_INT 1
81819: PLUS
81820: PPUSH
81821: LD_VAR 0 9
81825: PUSH
81826: LD_VAR 0 10
81830: PUSH
81831: EMPTY
81832: LIST
81833: LIST
81834: PPUSH
81835: CALL_OW 1
81839: ST_TO_ADDR
81840: GO 81856
// i := i - 1 ;
81842: LD_ADDR_VAR 0 5
81846: PUSH
81847: LD_VAR 0 5
81851: PUSH
81852: LD_INT 1
81854: MINUS
81855: ST_TO_ADDR
// end ;
81856: GO 81662
81858: POP
81859: POP
// for i in tmp do
81860: LD_ADDR_VAR 0 5
81864: PUSH
81865: LD_VAR 0 7
81869: PUSH
81870: FOR_IN
81871: IFFALSE 81909
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
81873: LD_VAR 0 1
81877: PPUSH
81878: LD_VAR 0 5
81882: PUSH
81883: LD_INT 1
81885: ARRAY
81886: PPUSH
81887: LD_VAR 0 5
81891: PUSH
81892: LD_INT 2
81894: ARRAY
81895: PPUSH
81896: CALL 80851 0 3
81900: NOT
81901: IFFALSE 81907
// exit ;
81903: POP
81904: POP
81905: GO 81911
81907: GO 81870
81909: POP
81910: POP
// end ;
81911: LD_VAR 0 4
81915: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
81916: LD_INT 0
81918: PPUSH
81919: PPUSH
81920: PPUSH
81921: PPUSH
81922: PPUSH
81923: PPUSH
81924: PPUSH
// if not GetClass ( unit ) = class_sniper then
81925: LD_VAR 0 1
81929: PPUSH
81930: CALL_OW 257
81934: PUSH
81935: LD_INT 5
81937: EQUAL
81938: NOT
81939: IFFALSE 81943
// exit ;
81941: GO 82331
// dist := 8 ;
81943: LD_ADDR_VAR 0 5
81947: PUSH
81948: LD_INT 8
81950: ST_TO_ADDR
// viewRange := 12 ;
81951: LD_ADDR_VAR 0 7
81955: PUSH
81956: LD_INT 12
81958: ST_TO_ADDR
// side := GetSide ( unit ) ;
81959: LD_ADDR_VAR 0 6
81963: PUSH
81964: LD_VAR 0 1
81968: PPUSH
81969: CALL_OW 255
81973: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
81974: LD_INT 61
81976: PPUSH
81977: LD_VAR 0 6
81981: PPUSH
81982: CALL_OW 321
81986: PUSH
81987: LD_INT 2
81989: EQUAL
81990: IFFALSE 82000
// viewRange := 16 ;
81992: LD_ADDR_VAR 0 7
81996: PUSH
81997: LD_INT 16
81999: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82000: LD_VAR 0 1
82004: PPUSH
82005: LD_VAR 0 2
82009: PPUSH
82010: LD_VAR 0 3
82014: PPUSH
82015: CALL_OW 297
82019: PUSH
82020: LD_VAR 0 5
82024: GREATER
82025: IFFALSE 82104
// begin ComMoveXY ( unit , x , y ) ;
82027: LD_VAR 0 1
82031: PPUSH
82032: LD_VAR 0 2
82036: PPUSH
82037: LD_VAR 0 3
82041: PPUSH
82042: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82046: LD_INT 35
82048: PPUSH
82049: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
82053: LD_VAR 0 1
82057: PPUSH
82058: LD_VAR 0 2
82062: PPUSH
82063: LD_VAR 0 3
82067: PPUSH
82068: CALL 60806 0 3
82072: NOT
82073: IFFALSE 82077
// exit ;
82075: GO 82331
// until GetDistUnitXY ( unit , x , y ) < dist ;
82077: LD_VAR 0 1
82081: PPUSH
82082: LD_VAR 0 2
82086: PPUSH
82087: LD_VAR 0 3
82091: PPUSH
82092: CALL_OW 297
82096: PUSH
82097: LD_VAR 0 5
82101: LESS
82102: IFFALSE 82046
// end ; ComTurnXY ( unit , x , y ) ;
82104: LD_VAR 0 1
82108: PPUSH
82109: LD_VAR 0 2
82113: PPUSH
82114: LD_VAR 0 3
82118: PPUSH
82119: CALL_OW 118
// wait ( 5 ) ;
82123: LD_INT 5
82125: PPUSH
82126: CALL_OW 67
// _d := GetDir ( unit ) ;
82130: LD_ADDR_VAR 0 10
82134: PUSH
82135: LD_VAR 0 1
82139: PPUSH
82140: CALL_OW 254
82144: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
82145: LD_ADDR_VAR 0 8
82149: PUSH
82150: LD_VAR 0 1
82154: PPUSH
82155: CALL_OW 250
82159: PPUSH
82160: LD_VAR 0 10
82164: PPUSH
82165: LD_VAR 0 5
82169: PPUSH
82170: CALL_OW 272
82174: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
82175: LD_ADDR_VAR 0 9
82179: PUSH
82180: LD_VAR 0 1
82184: PPUSH
82185: CALL_OW 251
82189: PPUSH
82190: LD_VAR 0 10
82194: PPUSH
82195: LD_VAR 0 5
82199: PPUSH
82200: CALL_OW 273
82204: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82205: LD_VAR 0 8
82209: PPUSH
82210: LD_VAR 0 9
82214: PPUSH
82215: CALL_OW 488
82219: NOT
82220: IFFALSE 82224
// exit ;
82222: GO 82331
// ComAnimCustom ( unit , 1 ) ;
82224: LD_VAR 0 1
82228: PPUSH
82229: LD_INT 1
82231: PPUSH
82232: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
82236: LD_VAR 0 8
82240: PPUSH
82241: LD_VAR 0 9
82245: PPUSH
82246: LD_VAR 0 6
82250: PPUSH
82251: LD_VAR 0 7
82255: PPUSH
82256: CALL_OW 330
// repeat wait ( 1 ) ;
82260: LD_INT 1
82262: PPUSH
82263: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
82267: LD_VAR 0 1
82271: PPUSH
82272: CALL_OW 316
82276: PUSH
82277: LD_VAR 0 1
82281: PPUSH
82282: CALL_OW 314
82286: OR
82287: PUSH
82288: LD_VAR 0 1
82292: PPUSH
82293: CALL_OW 302
82297: NOT
82298: OR
82299: PUSH
82300: LD_VAR 0 1
82304: PPUSH
82305: CALL_OW 301
82309: OR
82310: IFFALSE 82260
// RemoveSeeing ( _x , _y , side ) ;
82312: LD_VAR 0 8
82316: PPUSH
82317: LD_VAR 0 9
82321: PPUSH
82322: LD_VAR 0 6
82326: PPUSH
82327: CALL_OW 331
// end ; end_of_file
82331: LD_VAR 0 4
82335: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82336: LD_VAR 0 1
82340: PPUSH
82341: LD_VAR 0 2
82345: PPUSH
82346: LD_VAR 0 3
82350: PPUSH
82351: LD_VAR 0 4
82355: PPUSH
82356: LD_VAR 0 5
82360: PPUSH
82361: LD_VAR 0 6
82365: PPUSH
82366: CALL 64986 0 6
// end ;
82370: PPOPN 6
82372: END
