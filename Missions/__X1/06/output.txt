// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10266 0 2
// PrepareArabian ;
  32: CALL 501 0 0
// PrepareRussian ;
  36: CALL 11057 0 0
// Action ;
  40: CALL 19259 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: PUSH
 430: LD_EXP 47
 434: PPUSH
 435: CALL_OW 302
 439: AND
 440: PUSH
 441: LD_EXP 6
 445: NOT
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 452: LD_STRING ACH_ROLF
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$2 trigger collectedOil >= 300 do
 460: LD_EXP 33
 464: PUSH
 465: LD_INT 300
 467: GREATEREQUAL
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_OIL ) ;
 473: LD_STRING ACH_OIL
 475: PPUSH
 476: CALL_OW 543
 480: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 481: LD_INT 52
 483: PPUSH
 484: CALL_OW 301
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 493: LD_STRING ACH_LENIN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
// uc_nation := 2 ;
 517: LD_ADDR_OWVAR 21
 521: PUSH
 522: LD_INT 2
 524: ST_TO_ADDR
// uc_side := 5 ;
 525: LD_ADDR_OWVAR 20
 529: PUSH
 530: LD_INT 5
 532: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 533: LD_ADDR_EXP 42
 537: PUSH
 538: LD_STRING Abdul
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: LD_STRING 
 546: PPUSH
 547: CALL 29472 0 3
 551: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 552: LD_ADDR_EXP 44
 556: PUSH
 557: LD_STRING Omar
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 29472 0 3
 570: ST_TO_ADDR
// uc_side := 2 ;
 571: LD_ADDR_OWVAR 20
 575: PUSH
 576: LD_INT 2
 578: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 579: LD_ADDR_EXP 34
 583: PUSH
 584: LD_STRING Heike
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_EXP 2
 597: PPUSH
 598: CALL 29472 0 3
 602: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 603: LD_ADDR_EXP 37
 607: PUSH
 608: LD_STRING Ibrahim
 610: PPUSH
 611: LD_EXP 1
 615: NOT
 616: PPUSH
 617: LD_EXP 2
 621: PPUSH
 622: CALL 29472 0 3
 626: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 627: LD_ADDR_EXP 35
 631: PUSH
 632: LD_STRING Givi
 634: PPUSH
 635: LD_EXP 1
 639: NOT
 640: PPUSH
 641: LD_EXP 2
 645: PPUSH
 646: CALL 29472 0 3
 650: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 651: LD_ADDR_EXP 38
 655: PUSH
 656: LD_STRING Kamil
 658: PPUSH
 659: LD_EXP 1
 663: NOT
 664: PPUSH
 665: LD_EXP 2
 669: PPUSH
 670: CALL 29472 0 3
 674: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 675: LD_ADDR_EXP 39
 679: PUSH
 680: LD_STRING Kaia
 682: PPUSH
 683: LD_EXP 1
 687: NOT
 688: PPUSH
 689: LD_EXP 2
 693: PPUSH
 694: CALL 29472 0 3
 698: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 699: LD_ADDR_EXP 40
 703: PUSH
 704: LD_STRING Sophia
 706: PPUSH
 707: LD_EXP 1
 711: NOT
 712: PPUSH
 713: LD_EXP 2
 717: PPUSH
 718: CALL 29472 0 3
 722: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 723: LD_ADDR_EXP 41
 727: PUSH
 728: LD_STRING Markov
 730: PPUSH
 731: LD_EXP 1
 735: NOT
 736: PPUSH
 737: LD_EXP 2
 741: PPUSH
 742: CALL 29472 0 3
 746: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 747: LD_ADDR_EXP 46
 751: PUSH
 752: LD_STRING Aviradze
 754: PPUSH
 755: LD_EXP 1
 759: NOT
 760: PPUSH
 761: LD_EXP 2
 765: PPUSH
 766: CALL 29472 0 3
 770: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 771: LD_ADDR_EXP 45
 775: PUSH
 776: LD_STRING Kurt
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL 29472 0 3
 794: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 795: LD_ADDR_EXP 36
 799: PUSH
 800: LD_STRING Mike
 802: PPUSH
 803: LD_EXP 1
 807: NOT
 808: PPUSH
 809: LD_EXP 2
 813: PPUSH
 814: CALL 29472 0 3
 818: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 819: LD_ADDR_EXP 43
 823: PUSH
 824: LD_STRING Olaf
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_STRING 
 832: PPUSH
 833: CALL 29472 0 3
 837: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING 05_others
 845: PPUSH
 846: CALL_OW 31
 850: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 851: LD_ADDR_EXP 50
 855: PUSH
 856: LD_STRING 05_apes
 858: PPUSH
 859: CALL_OW 31
 863: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_STRING 05_Radar
 871: PPUSH
 872: LD_EXP 1
 876: PPUSH
 877: CALL_OW 30
 881: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 882: LD_ADDR_VAR 0 6
 886: PUSH
 887: LD_STRING 05_RemoteControl
 889: PPUSH
 890: LD_EXP 1
 894: PPUSH
 895: CALL_OW 30
 899: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 900: LD_ADDR_VAR 0 7
 904: PUSH
 905: LD_STRING 05_DrugsTested
 907: PPUSH
 908: LD_EXP 1
 912: PPUSH
 913: CALL_OW 30
 917: ST_TO_ADDR
// if hasDrugs then
 918: LD_VAR 0 7
 922: IFFALSE 937
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 924: LD_INT 5
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 322
// if hasRadar then
 937: LD_VAR 0 5
 941: IFFALSE 956
// SetTech ( tech_radar , 2 , state_researched ) ;
 943: LD_INT 6
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: LD_INT 2
 951: PPUSH
 952: CALL_OW 322
// if hasRemote then
 956: LD_VAR 0 6
 960: IFFALSE 975
// SetTech ( tech_remCont , 2 , state_researched ) ;
 962: LD_INT 15
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: LD_INT 2
 970: PPUSH
 971: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 975: LD_ADDR_VAR 0 13
 979: PUSH
 980: LD_INT 5
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 517
 990: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 13
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PUSH
1010: FOR_TO
1011: IFFALSE 1088
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1013: LD_VAR 0 13
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PUSH
1022: LD_VAR 0 2
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 13
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: CALL_OW 351
1047: IFFALSE 1086
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1049: LD_VAR 0 13
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 13
1068: PUSH
1069: LD_INT 2
1071: ARRAY
1072: PUSH
1073: LD_VAR 0 2
1077: ARRAY
1078: PPUSH
1079: LD_INT 2
1081: PPUSH
1082: CALL_OW 244
1086: GO 1010
1088: POP
1089: POP
// base := [ ] ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// if debug then
1097: LD_EXP 1
1101: IFFALSE 1151
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1103: LD_ADDR_VAR 0 4
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 51
1113: PUSH
1114: LD_INT 77
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 3
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: ST_TO_ADDR
// end else
1149: GO 1167
// if buildingsFromPrev then
1151: LD_EXP 30
1155: IFFALSE 1167
// base := buildingsFromPrev ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_EXP 30
1166: ST_TO_ADDR
// if base then
1167: LD_VAR 0 4
1171: IFFALSE 1369
// for i := 1 to base do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_VAR 0 4
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1367
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_VAR 0 2
1205: PPUSH
1206: LD_VAR 0 4
1210: PUSH
1211: LD_VAR 0 2
1215: ARRAY
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_VAR 0 2
1230: ARRAY
1231: PUSH
1232: LD_INT 2
1234: ARRAY
1235: PUSH
1236: LD_INT 155
1238: PLUS
1239: PUSH
1240: LD_VAR 0 4
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 3
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: PLUS
1258: PUSH
1259: LD_VAR 0 4
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: PUSH
1270: LD_INT 4
1272: ARRAY
1273: PUSH
1274: LD_VAR 0 4
1278: PUSH
1279: LD_VAR 0 2
1283: ARRAY
1284: PUSH
1285: LD_INT 5
1287: ARRAY
1288: PUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 6
1302: ARRAY
1303: PUSH
1304: LD_VAR 0 4
1308: PUSH
1309: LD_VAR 0 2
1313: ARRAY
1314: PUSH
1315: LD_INT 7
1317: ARRAY
1318: PUSH
1319: LD_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: ARRAY
1329: PUSH
1330: LD_INT 8
1332: ARRAY
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: LD_VAR 0 2
1343: ARRAY
1344: PUSH
1345: LD_INT 9
1347: ARRAY
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 1
1364: ST_TO_ADDR
1365: GO 1188
1367: POP
1368: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1369: LD_ADDR_VAR 0 4
1373: PUSH
1374: LD_VAR 0 4
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: LD_INT 206
1384: PUSH
1385: LD_INT 80
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 2
1393: PUSH
1394: LD_INT 3
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 32
1419: PUSH
1420: LD_INT 221
1422: PUSH
1423: LD_INT 95
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 23
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 32
1457: PUSH
1458: LD_INT 223
1460: PUSH
1461: LD_INT 88
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 2
1469: PUSH
1470: LD_INT 3
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 24
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 32
1495: PUSH
1496: LD_INT 202
1498: PUSH
1499: LD_INT 64
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: LD_INT 25
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: LD_INT 203
1536: PUSH
1537: LD_INT 91
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 8
1571: PUSH
1572: LD_INT 217
1574: PUSH
1575: LD_INT 78
1577: PUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: LD_INT 10
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 220
1612: PUSH
1613: LD_INT 99
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 220
1650: PUSH
1651: LD_INT 103
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: LD_INT 0
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 216
1688: PUSH
1689: LD_INT 102
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 0
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 17
1723: PUSH
1724: LD_INT 203
1726: PUSH
1727: LD_INT 94
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 200
1764: PUSH
1765: LD_INT 88
1767: PUSH
1768: LD_INT 2
1770: PUSH
1771: LD_INT 2
1773: PUSH
1774: LD_INT 3
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 16
1799: PUSH
1800: LD_INT 199
1802: PUSH
1803: LD_INT 91
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 3
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 197
1840: PUSH
1841: LD_INT 81
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 26
1875: PUSH
1876: LD_INT 197
1878: PUSH
1879: LD_INT 78
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ADD
1927: ST_TO_ADDR
// if hasRadar then
1928: LD_VAR 0 5
1932: IFFALSE 1996
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1934: LD_ADDR_VAR 0 4
1938: PUSH
1939: LD_VAR 0 4
1943: PPUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_INT 1
1951: PLUS
1952: PPUSH
1953: LD_INT 20
1955: PUSH
1956: LD_INT 203
1958: PUSH
1959: LD_INT 87
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 3
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 1
1995: ST_TO_ADDR
// if hasRemote then
1996: LD_VAR 0 6
2000: IFFALSE 2064
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2002: LD_ADDR_VAR 0 4
2006: PUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_VAR 0 4
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 207
2026: PUSH
2027: LD_INT 95
2029: PUSH
2030: LD_INT 5
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: LD_INT 0
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 1
2063: ST_TO_ADDR
// for i in base do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_VAR 0 4
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2429
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2077: LD_VAR 0 2
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 2
2090: PUSH
2091: LD_INT 3
2093: ARRAY
2094: PPUSH
2095: CALL_OW 428
2099: IFFALSE 2103
// continue ;
2101: GO 2074
// uc_nation := i [ 5 ] ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: ARRAY
2116: ST_TO_ADDR
// InitBc ;
2117: CALL_OW 21
// bc_type := i [ 1 ] ;
2121: LD_ADDR_OWVAR 42
2125: PUSH
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2135: LD_ADDR_OWVAR 43
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 6
2147: ARRAY
2148: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2149: LD_ADDR_OWVAR 44
2153: PUSH
2154: LD_INT 9
2156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2157: LD_ADDR_OWVAR 45
2161: PUSH
2162: LD_INT 9
2164: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_INT 8
2176: EQUAL
2177: PUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_INT 5
2185: ARRAY
2186: PUSH
2187: LD_INT 2
2189: EQUAL
2190: AND
2191: PUSH
2192: LD_VAR 0 2
2196: PUSH
2197: LD_INT 8
2199: ARRAY
2200: NOT
2201: AND
2202: IFFALSE 2236
// begin bc_kind1 := b_lab_weapon ;
2204: LD_ADDR_OWVAR 44
2208: PUSH
2209: LD_INT 10
2211: ST_TO_ADDR
// if hasRadar then
2212: LD_VAR 0 5
2216: IFFALSE 2228
// bc_kind2 := b_lab_opto else
2218: LD_ADDR_OWVAR 45
2222: PUSH
2223: LD_INT 15
2225: ST_TO_ADDR
2226: GO 2236
// bc_kind2 := b_lab_basic ;
2228: LD_ADDR_OWVAR 45
2232: PUSH
2233: LD_INT 9
2235: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2236: LD_VAR 0 2
2240: PUSH
2241: LD_INT 1
2243: ARRAY
2244: PUSH
2245: LD_INT 7
2247: PUSH
2248: LD_INT 8
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: IN
2255: PUSH
2256: LD_VAR 0 2
2260: PUSH
2261: LD_INT 7
2263: ARRAY
2264: AND
2265: IFFALSE 2281
// bc_kind1 := i [ 7 ] ;
2267: LD_ADDR_OWVAR 44
2271: PUSH
2272: LD_VAR 0 2
2276: PUSH
2277: LD_INT 7
2279: ARRAY
2280: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2281: LD_VAR 0 2
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PUSH
2290: LD_INT 8
2292: EQUAL
2293: PUSH
2294: LD_VAR 0 2
2298: PUSH
2299: LD_INT 8
2301: ARRAY
2302: AND
2303: IFFALSE 2319
// bc_kind1 := i [ 8 ] ;
2305: LD_ADDR_OWVAR 44
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_INT 8
2317: ARRAY
2318: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 2
2331: ARRAY
2332: PPUSH
2333: LD_VAR 0 2
2337: PUSH
2338: LD_INT 3
2340: ARRAY
2341: PPUSH
2342: LD_VAR 0 2
2346: PUSH
2347: LD_INT 4
2349: ARRAY
2350: PPUSH
2351: CALL_OW 47
2355: ST_TO_ADDR
// if i [ 9 ] then
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 9
2363: ARRAY
2364: IFFALSE 2384
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2366: LD_VAR 0 3
2370: PPUSH
2371: LD_VAR 0 2
2375: PUSH
2376: LD_INT 9
2378: ARRAY
2379: PPUSH
2380: CALL_OW 431
// if i [ 1 ] = b_bunker then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PUSH
2393: LD_INT 32
2395: EQUAL
2396: IFFALSE 2427
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2398: LD_ADDR_VAR 0 11
2402: PUSH
2403: LD_VAR 0 11
2407: PPUSH
2408: LD_VAR 0 11
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: PPUSH
2417: LD_VAR 0 3
2421: PPUSH
2422: CALL_OW 1
2426: ST_TO_ADDR
// end ;
2427: GO 2074
2429: POP
2430: POP
// depot := HexInfo ( 206 , 80 ) ;
2431: LD_ADDR_VAR 0 9
2435: PUSH
2436: LD_INT 206
2438: PPUSH
2439: LD_INT 80
2441: PPUSH
2442: CALL_OW 428
2446: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2447: LD_ADDR_VAR 0 8
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 30
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 69
2480: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_INT 22
2488: PUSH
2489: LD_INT 2
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 30
2501: PUSH
2502: LD_INT 6
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 30
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 30
2521: PUSH
2522: LD_INT 8
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PPUSH
2539: CALL_OW 69
2543: ST_TO_ADDR
// arDepot := depot ;
2544: LD_ADDR_EXP 48
2548: PUSH
2549: LD_VAR 0 9
2553: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2554: LD_VAR 0 9
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 360
2569: PUSH
2570: LD_INT 260
2572: PUSH
2573: LD_INT 190
2575: PUSH
2576: LD_INT 150
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: CALL_OW 274
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: LD_INT 200
2610: PUSH
2611: LD_INT 170
2613: PUSH
2614: LD_INT 150
2616: PUSH
2617: LD_INT 120
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PPUSH
2632: CALL_OW 277
// uc_nation := 2 ;
2636: LD_ADDR_OWVAR 21
2640: PUSH
2641: LD_INT 2
2643: ST_TO_ADDR
// uc_side := 2 ;
2644: LD_ADDR_OWVAR 20
2648: PUSH
2649: LD_INT 2
2651: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2652: LD_INT 13
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 27
2663: PPUSH
2664: LD_INT 33
2666: PPUSH
2667: CALL 34396 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2671: CALL_OW 45
2675: PPUSH
2676: LD_INT 190
2678: PPUSH
2679: LD_INT 64
2681: PPUSH
2682: LD_INT 5
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL 69407 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2692: LD_INT 13
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 1
2700: PPUSH
2701: LD_INT 25
2703: PPUSH
2704: LD_INT 22
2706: PPUSH
2707: CALL 34396 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2711: CALL_OW 45
2715: PPUSH
2716: LD_INT 188
2718: PPUSH
2719: LD_INT 67
2721: PPUSH
2722: LD_INT 5
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL 69407 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2732: LD_EXP 34
2736: PPUSH
2737: LD_INT 213
2739: PPUSH
2740: LD_INT 87
2742: PPUSH
2743: LD_INT 0
2745: PPUSH
2746: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2750: LD_EXP 34
2754: PPUSH
2755: LD_INT 214
2757: PPUSH
2758: LD_INT 87
2760: PPUSH
2761: CALL_OW 118
// if Kaia then
2765: LD_EXP 39
2769: IFFALSE 2804
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2771: LD_EXP 39
2775: PPUSH
2776: LD_INT 213
2778: PPUSH
2779: LD_INT 85
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2789: LD_EXP 39
2793: PPUSH
2794: LD_INT 215
2796: PPUSH
2797: LD_INT 87
2799: PPUSH
2800: CALL_OW 118
// end ; if Olaf and Kaia then
2804: LD_EXP 43
2808: PUSH
2809: LD_EXP 39
2813: AND
2814: IFFALSE 2851
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2816: LD_EXP 43
2820: PPUSH
2821: LD_INT 215
2823: PPUSH
2824: LD_INT 87
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2834: LD_EXP 43
2838: PPUSH
2839: LD_INT 213
2841: PPUSH
2842: LD_INT 85
2844: PPUSH
2845: CALL_OW 118
// end else
2849: GO 2871
// if Olaf then
2851: LD_EXP 43
2855: IFFALSE 2871
// PlaceHumanInUnit ( Olaf , factory ) ;
2857: LD_EXP 43
2861: PPUSH
2862: LD_VAR 0 8
2866: PPUSH
2867: CALL_OW 52
// if Givi then
2871: LD_EXP 35
2875: IFFALSE 2956
// begin if Kaia and Olaf then
2877: LD_EXP 39
2881: PUSH
2882: LD_EXP 43
2886: AND
2887: IFFALSE 2924
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2889: LD_EXP 35
2893: PPUSH
2894: LD_INT 247
2896: PPUSH
2897: LD_INT 117
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 248
2914: PPUSH
2915: LD_INT 118
2917: PPUSH
2918: CALL_OW 118
// end else
2922: GO 2956
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2924: LD_EXP 35
2928: PPUSH
2929: LD_INT 216
2931: PPUSH
2932: LD_INT 88
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_EXP 34
2951: PPUSH
2952: CALL_OW 119
// end ; end ; if Kurt then
2956: LD_EXP 45
2960: IFFALSE 2980
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2962: LD_EXP 45
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Mike then
2980: LD_EXP 36
2984: IFFALSE 3004
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2986: LD_EXP 36
2990: PPUSH
2991: LD_VAR 0 11
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 52
// if Kamil then
3004: LD_EXP 38
3008: IFFALSE 3070
// begin if Kaia and Olaf then
3010: LD_EXP 39
3014: PUSH
3015: LD_EXP 43
3019: AND
3020: IFFALSE 3038
// PlaceHumanInUnit ( Kamil , depot ) else
3022: LD_EXP 38
3026: PPUSH
3027: LD_VAR 0 9
3031: PPUSH
3032: CALL_OW 52
3036: GO 3070
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3038: LD_EXP 38
3042: PPUSH
3043: LD_INT 213
3045: PPUSH
3046: LD_INT 87
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3056: LD_EXP 38
3060: PPUSH
3061: LD_EXP 34
3065: PPUSH
3066: CALL_OW 119
// end ; end ; if Sophia then
3070: LD_EXP 40
3074: IFFALSE 3090
// PlaceHumanInUnit ( Sophia , depot ) ;
3076: LD_EXP 40
3080: PPUSH
3081: LD_VAR 0 9
3085: PPUSH
3086: CALL_OW 52
// if Aviradze then
3090: LD_EXP 46
3094: IFFALSE 3143
// if lab then
3096: LD_VAR 0 10
3100: IFFALSE 3122
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3102: LD_EXP 46
3106: PPUSH
3107: LD_VAR 0 10
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: CALL_OW 52
3120: GO 3143
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3122: LD_EXP 46
3126: PPUSH
3127: LD_INT 210
3129: PPUSH
3130: LD_INT 87
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 50
// if Ibrahim then
3143: LD_EXP 37
3147: IFFALSE 3196
// if lab then
3149: LD_VAR 0 10
3153: IFFALSE 3175
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3155: LD_EXP 37
3159: PPUSH
3160: LD_VAR 0 10
3164: PUSH
3165: LD_INT 1
3167: ARRAY
3168: PPUSH
3169: CALL_OW 52
3173: GO 3196
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3175: LD_EXP 37
3179: PPUSH
3180: LD_INT 210
3182: PPUSH
3183: LD_INT 87
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 0
3191: PPUSH
3192: CALL_OW 50
// if Markov then
3196: LD_EXP 41
3200: IFFALSE 3249
// if factory then
3202: LD_VAR 0 8
3206: IFFALSE 3228
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3208: LD_EXP 41
3212: PPUSH
3213: LD_VAR 0 8
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: CALL_OW 52
3226: GO 3249
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3228: LD_EXP 41
3232: PPUSH
3233: LD_INT 210
3235: PPUSH
3236: LD_INT 87
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 0
3244: PPUSH
3245: CALL_OW 50
// if heikeSecondSquad then
3249: LD_EXP 49
3253: IFFALSE 3293
// for i in heikeSecondSquad do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 49
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3291
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3268: LD_VAR 0 2
3272: PPUSH
3273: LD_INT 190
3275: PPUSH
3276: LD_INT 65
3278: PPUSH
3279: LD_INT 5
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 50
3289: GO 3265
3291: POP
3292: POP
// if heikeApes then
3293: LD_EXP 50
3297: IFFALSE 3337
// for i in heikeApes do
3299: LD_ADDR_VAR 0 2
3303: PUSH
3304: LD_EXP 50
3308: PUSH
3309: FOR_IN
3310: IFFALSE 3335
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_INT 190
3319: PPUSH
3320: LD_INT 70
3322: PPUSH
3323: LD_INT 5
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 50
3333: GO 3309
3335: POP
3336: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3337: LD_ADDR_VAR 0 13
3341: PUSH
3342: LD_STRING 05_Vehicles
3344: PPUSH
3345: EMPTY
3346: PPUSH
3347: CALL_OW 30
3351: ST_TO_ADDR
// if tmp then
3352: LD_VAR 0 13
3356: IFFALSE 3526
// begin limiter := 10 ;
3358: LD_ADDR_VAR 0 14
3362: PUSH
3363: LD_INT 10
3365: ST_TO_ADDR
// for i in tmp do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: LD_VAR 0 13
3375: PUSH
3376: FOR_IN
3377: IFFALSE 3524
// begin limiter := Dec ( limiter ) ;
3379: LD_ADDR_VAR 0 14
3383: PUSH
3384: LD_VAR 0 14
3388: PPUSH
3389: CALL 68650 0 1
3393: ST_TO_ADDR
// if limiter = 0 then
3394: LD_VAR 0 14
3398: PUSH
3399: LD_INT 0
3401: EQUAL
3402: IFFALSE 3406
// break ;
3404: GO 3524
// uc_side := 2 ;
3406: LD_ADDR_OWVAR 20
3410: PUSH
3411: LD_INT 2
3413: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3414: LD_ADDR_OWVAR 21
3418: PUSH
3419: LD_VAR 0 2
3423: PUSH
3424: LD_INT 5
3426: ARRAY
3427: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3428: LD_VAR 0 2
3432: PUSH
3433: LD_INT 1
3435: ARRAY
3436: PPUSH
3437: LD_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: ARRAY
3445: PPUSH
3446: LD_VAR 0 2
3450: PUSH
3451: LD_INT 3
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 2
3459: PUSH
3460: LD_INT 4
3462: ARRAY
3463: PPUSH
3464: LD_INT 20
3466: PPUSH
3467: CALL 34396 0 5
// veh := CreateVehicle ;
3471: LD_ADDR_VAR 0 12
3475: PUSH
3476: CALL_OW 45
3480: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3481: LD_VAR 0 12
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: LD_INT 5
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 252
3508: PPUSH
3509: LD_INT 111
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 50
// end ;
3522: GO 3376
3524: POP
3525: POP
// end ; end ;
3526: LD_VAR 0 1
3530: RET
// export function PrepareRolfSquad ; var i , j ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
3535: PPUSH
// uc_side := 8 ;
3536: LD_ADDR_OWVAR 20
3540: PUSH
3541: LD_INT 8
3543: ST_TO_ADDR
// uc_nation := 2 ;
3544: LD_ADDR_OWVAR 21
3548: PUSH
3549: LD_INT 2
3551: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3552: LD_ADDR_EXP 47
3556: PUSH
3557: LD_STRING Bergkamp
3559: PPUSH
3560: CALL_OW 25
3564: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3565: LD_ADDR_EXP 51
3569: PUSH
3570: LD_EXP 47
3574: PUSH
3575: EMPTY
3576: LIST
3577: ST_TO_ADDR
// for i := 1 to 4 do
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: DOUBLE
3584: LD_INT 1
3586: DEC
3587: ST_TO_ADDR
3588: LD_INT 4
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3672
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 5
3606: PUSH
3607: LD_INT 2
3609: PUSH
3610: LD_INT 3
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: FOR_TO
3629: IFFALSE 3668
// begin PrepareHuman ( false , i , 5 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3646: LD_ADDR_EXP 51
3650: PUSH
3651: LD_EXP 51
3655: PPUSH
3656: CALL_OW 44
3660: PPUSH
3661: CALL 67267 0 2
3665: ST_TO_ADDR
// end ;
3666: GO 3628
3668: POP
3669: POP
// end ;
3670: GO 3591
3672: POP
3673: POP
// if HexInfo ( 5 , 3 ) then
3674: LD_INT 5
3676: PPUSH
3677: LD_INT 3
3679: PPUSH
3680: CALL_OW 428
3684: IFFALSE 3701
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3686: LD_INT 5
3688: PPUSH
3689: LD_INT 3
3691: PPUSH
3692: CALL_OW 428
3696: PPUSH
3697: CALL_OW 64
// for i in rolfSquad do
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: LD_EXP 51
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3848
// begin uc_direction := 2 ;
3714: LD_ADDR_OWVAR 24
3718: PUSH
3719: LD_INT 2
3721: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3722: LD_VAR 0 2
3726: PPUSH
3727: CALL_OW 257
3731: PUSH
3732: LD_INT 3
3734: EQUAL
3735: IFFALSE 3809
// begin uc_side := 8 ;
3737: LD_ADDR_OWVAR 20
3741: PUSH
3742: LD_INT 8
3744: ST_TO_ADDR
// uc_nation := 2 ;
3745: LD_ADDR_OWVAR 21
3749: PUSH
3750: LD_INT 2
3752: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3753: LD_INT 13
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 27
3764: PPUSH
3765: LD_INT 88
3767: PPUSH
3768: CALL 34396 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3772: CALL_OW 45
3776: PPUSH
3777: LD_INT 11
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_INT 5
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 428
3802: PPUSH
3803: CALL_OW 52
// end else
3807: GO 3824
// PlaceUnitArea ( i , northSpawn , false ) ;
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_INT 11
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3824: LD_VAR 0 2
3828: PPUSH
3829: LD_INT 29
3831: PPUSH
3832: LD_INT 10
3834: PPUSH
3835: CALL_OW 111
// wait ( 0 0$2 ) ;
3839: LD_INT 70
3841: PPUSH
3842: CALL_OW 67
// end ;
3846: GO 3711
3848: POP
3849: POP
// wait ( 0 0$5 ) ;
3850: LD_INT 175
3852: PPUSH
3853: CALL_OW 67
// end ;
3857: LD_VAR 0 1
3861: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3862: LD_INT 0
3864: PPUSH
3865: PPUSH
3866: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3867: LD_EXP 47
3871: PPUSH
3872: LD_INT 94
3874: PPUSH
3875: LD_INT 63
3877: PPUSH
3878: CALL_OW 428
3882: PPUSH
3883: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 4
3894: PUSH
3895: LD_INT 82
3897: PUSH
3898: LD_INT 64
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 31
3912: PUSH
3913: LD_INT 73
3915: PUSH
3916: LD_INT 58
3918: PUSH
3919: LD_INT 0
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: ST_TO_ADDR
// for i in tmp do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: LD_VAR 0 3
3941: PUSH
3942: FOR_IN
3943: IFFALSE 4007
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3945: LD_EXP 51
3949: PPUSH
3950: LD_INT 25
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PPUSH
3960: CALL_OW 72
3964: PPUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 2
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 3
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 2
3996: PUSH
3997: LD_INT 4
3999: ARRAY
4000: PPUSH
4001: CALL_OW 205
4005: GO 3942
4007: POP
4008: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4009: LD_EXP 51
4013: PUSH
4014: LD_INT 2
4016: ARRAY
4017: PPUSH
4018: LD_INT 63
4020: PPUSH
4021: LD_INT 42
4023: PPUSH
4024: CALL_OW 428
4028: PPUSH
4029: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4033: LD_EXP 51
4037: PUSH
4038: LD_INT 3
4040: ARRAY
4041: PPUSH
4042: LD_INT 94
4044: PPUSH
4045: LD_INT 63
4047: PPUSH
4048: CALL_OW 428
4052: PPUSH
4053: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4057: LD_INT 35
4059: PPUSH
4060: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4064: LD_EXP 51
4068: PPUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: LD_INT 60
4084: PUSH
4085: EMPTY
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 72
4100: IFFALSE 4057
// rolfScriptBase := true ;
4102: LD_ADDR_EXP 9
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// end ;
4110: LD_VAR 0 1
4114: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4115: LD_EXP 9
4119: PUSH
4120: LD_EXP 47
4124: PPUSH
4125: CALL_OW 255
4129: PUSH
4130: LD_INT 8
4132: EQUAL
4133: AND
4134: IFFALSE 5141
4136: GO 4138
4138: DISABLE
4139: LD_INT 0
4141: PPUSH
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
4146: PPUSH
4147: PPUSH
4148: PPUSH
4149: PPUSH
4150: PPUSH
// begin enable ;
4151: ENABLE
// if not rolfSquad then
4152: LD_EXP 51
4156: NOT
4157: IFFALSE 4161
// exit ;
4159: GO 5141
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_INT 12
4168: PPUSH
4169: LD_INT 81
4171: PUSH
4172: LD_INT 8
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4184: LD_ADDR_VAR 0 5
4188: PUSH
4189: LD_EXP 51
4193: PPUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 72
4208: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4209: LD_ADDR_VAR 0 6
4213: PUSH
4214: LD_EXP 51
4218: PPUSH
4219: LD_INT 25
4221: PUSH
4222: LD_INT 2
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 72
4233: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4234: LD_ADDR_VAR 0 8
4238: PUSH
4239: LD_EXP 51
4243: PPUSH
4244: LD_INT 25
4246: PUSH
4247: LD_INT 3
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4259: LD_ADDR_VAR 0 7
4263: PUSH
4264: LD_EXP 51
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: ST_TO_ADDR
// if sol then
4284: LD_VAR 0 5
4288: IFFALSE 4586
// for i in sol union Rolf do
4290: LD_ADDR_VAR 0 1
4294: PUSH
4295: LD_VAR 0 5
4299: PUSH
4300: LD_EXP 47
4304: UNION
4305: PUSH
4306: FOR_IN
4307: IFFALSE 4584
// if not IsInUnit ( i ) and not HasTask ( i ) then
4309: LD_VAR 0 1
4313: PPUSH
4314: CALL_OW 310
4318: NOT
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL_OW 314
4329: NOT
4330: AND
4331: IFFALSE 4582
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4333: LD_VAR 0 1
4337: PPUSH
4338: CALL_OW 256
4342: PUSH
4343: LD_INT 500
4345: LESS
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: LD_INT 80
4354: PPUSH
4355: LD_INT 49
4357: PPUSH
4358: CALL_OW 297
4362: PUSH
4363: LD_INT 6
4365: GREATER
4366: AND
4367: IFFALSE 4386
// begin ComMoveXY ( i , 80 , 49 ) ;
4369: LD_VAR 0 1
4373: PPUSH
4374: LD_INT 80
4376: PPUSH
4377: LD_INT 49
4379: PPUSH
4380: CALL_OW 111
// continue ;
4384: GO 4306
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4386: LD_ADDR_VAR 0 4
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 8
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 50
4403: PUSH
4404: EMPTY
4405: LIST
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: LD_INT 30
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 30
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 30
4432: PUSH
4433: LD_INT 32
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 31
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: ST_TO_ADDR
// if tmp then
4467: LD_VAR 0 4
4471: IFFALSE 4582
// begin for b in tmp do
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: LD_VAR 0 4
4482: PUSH
4483: FOR_IN
4484: IFFALSE 4580
// begin case GetBType ( b ) of b_armoury , b_barracks :
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 266
4495: PUSH
4496: LD_INT 4
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4510
4502: LD_INT 5
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4521
4510: POP
// p := 6 ; b_breastwork , b_bunker :
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 6
4518: ST_TO_ADDR
4519: GO 4547
4521: LD_INT 31
4523: DOUBLE
4524: EQUAL
4525: IFTRUE 4535
4527: LD_INT 32
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4546
4535: POP
// p := 1 ; end ;
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
4544: GO 4547
4546: POP
// if UnitsInside ( b ) < p then
4547: LD_VAR 0 2
4551: PPUSH
4552: CALL_OW 313
4556: PUSH
4557: LD_VAR 0 3
4561: LESS
4562: IFFALSE 4578
// ComEnterUnit ( i , b ) ;
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_VAR 0 2
4573: PPUSH
4574: CALL_OW 120
// end ;
4578: GO 4483
4580: POP
4581: POP
// end ; end ;
4582: GO 4306
4584: POP
4585: POP
// if sci then
4586: LD_VAR 0 7
4590: IFFALSE 4645
// for i in sci do
4592: LD_ADDR_VAR 0 1
4596: PUSH
4597: LD_VAR 0 7
4601: PUSH
4602: FOR_IN
4603: IFFALSE 4643
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4605: LD_VAR 0 1
4609: PPUSH
4610: LD_INT 80
4612: PPUSH
4613: LD_INT 49
4615: PPUSH
4616: CALL_OW 297
4620: PUSH
4621: LD_INT 9
4623: GREATER
4624: IFFALSE 4641
// ComMoveXY ( i , 80 , 49 ) ;
4626: LD_VAR 0 1
4630: PPUSH
4631: LD_INT 80
4633: PPUSH
4634: LD_INT 49
4636: PPUSH
4637: CALL_OW 111
// end ;
4641: GO 4602
4643: POP
4644: POP
// if mech then
4645: LD_VAR 0 8
4649: IFFALSE 4863
// for i in mech do
4651: LD_ADDR_VAR 0 1
4655: PUSH
4656: LD_VAR 0 8
4660: PUSH
4661: FOR_IN
4662: IFFALSE 4861
// begin hasVehicle := IsInUnit ( i ) ;
4664: LD_ADDR_VAR 0 10
4668: PUSH
4669: LD_VAR 0 1
4673: PPUSH
4674: CALL_OW 310
4678: ST_TO_ADDR
// if enemyInBase then
4679: LD_VAR 0 9
4683: IFFALSE 4779
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4685: LD_VAR 0 10
4689: PUSH
4690: LD_VAR 0 10
4694: PPUSH
4695: CALL_OW 256
4699: PUSH
4700: LD_INT 500
4702: GREATER
4703: AND
4704: IFFALSE 4732
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4706: LD_VAR 0 10
4710: PPUSH
4711: LD_VAR 0 9
4715: PPUSH
4716: LD_VAR 0 10
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 115
4730: GO 4777
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4732: LD_VAR 0 10
4736: PPUSH
4737: LD_INT 86
4739: PPUSH
4740: LD_INT 49
4742: PPUSH
4743: CALL_OW 297
4747: PUSH
4748: LD_INT 8
4750: GREATER
4751: IFFALSE 4777
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4753: LD_VAR 0 10
4757: PPUSH
4758: LD_INT 86
4760: PPUSH
4761: LD_INT 49
4763: PPUSH
4764: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL 69087 0 1
// end end else
4777: GO 4859
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4779: LD_VAR 0 1
4783: PPUSH
4784: LD_INT 86
4786: PPUSH
4787: LD_INT 49
4789: PPUSH
4790: CALL_OW 297
4794: PUSH
4795: LD_INT 8
4797: GREATER
4798: IFFALSE 4817
// ComMoveXY ( i , 86 , 49 ) else
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 86
4807: PPUSH
4808: LD_INT 49
4810: PPUSH
4811: CALL_OW 111
4815: GO 4859
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4817: LD_VAR 0 10
4821: PUSH
4822: LD_VAR 0 10
4826: PPUSH
4827: CALL_OW 256
4831: PUSH
4832: LD_INT 1000
4834: LESS
4835: AND
4836: IFFALSE 4859
// begin SetFuel ( hasVehicle , 100 ) ;
4838: LD_VAR 0 10
4842: PPUSH
4843: LD_INT 100
4845: PPUSH
4846: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: CALL 68967 0 1
// end ; end ; end ;
4859: GO 4661
4861: POP
4862: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4863: LD_ADDR_VAR 0 4
4867: PUSH
4868: LD_INT 12
4870: PPUSH
4871: LD_INT 3
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: LD_INT 1000
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 70
4906: ST_TO_ADDR
// if tmp and eng then
4907: LD_VAR 0 4
4911: PUSH
4912: LD_VAR 0 6
4916: AND
4917: IFFALSE 5023
// begin for i in eng do
4919: LD_ADDR_VAR 0 1
4923: PUSH
4924: LD_VAR 0 6
4928: PUSH
4929: FOR_IN
4930: IFFALSE 5021
// if IsInUnit ( i ) then
4932: LD_VAR 0 1
4936: PPUSH
4937: CALL_OW 310
4941: IFFALSE 4954
// ComExitBuilding ( i ) else
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 122
4952: GO 5019
// if GetLives ( i ) = 1000 then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 256
4963: PUSH
4964: LD_INT 1000
4966: EQUAL
4967: IFFALSE 4989
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_VAR 0 4
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 130
4987: GO 5019
// if GetLives ( i ) < 700 then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 256
4998: PUSH
4999: LD_INT 700
5001: LESS
5002: IFFALSE 5019
// ComMoveXY ( i , 80 , 49 ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_INT 80
5011: PPUSH
5012: LD_INT 49
5014: PPUSH
5015: CALL_OW 111
5019: GO 4929
5021: POP
5022: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5023: LD_VAR 0 4
5027: NOT
5028: PUSH
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 3
5036: PUSH
5037: LD_INT 54
5039: PUSH
5040: EMPTY
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 72
5051: AND
5052: IFFALSE 5141
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5054: LD_ADDR_VAR 0 1
5058: PUSH
5059: LD_VAR 0 6
5063: PPUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 54
5069: PUSH
5070: EMPTY
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PPUSH
5077: CALL_OW 72
5081: PUSH
5082: FOR_IN
5083: IFFALSE 5139
// if GetLives ( i ) < 1000 then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 256
5094: PUSH
5095: LD_INT 1000
5097: LESS
5098: IFFALSE 5117
// ComMoveXY ( i , 80 , 49 ) else
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 80
5107: PPUSH
5108: LD_INT 49
5110: PPUSH
5111: CALL_OW 111
5115: GO 5137
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5117: LD_VAR 0 1
5121: PPUSH
5122: LD_INT 86
5124: PPUSH
5125: LD_INT 54
5127: PPUSH
5128: CALL_OW 428
5132: PPUSH
5133: CALL_OW 120
5137: GO 5082
5139: POP
5140: POP
// end ;
5141: PPOPN 10
5143: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
5149: PPUSH
// uc_side := 5 ;
5150: LD_ADDR_OWVAR 20
5154: PUSH
5155: LD_INT 5
5157: ST_TO_ADDR
// uc_nation := 2 ;
5158: LD_ADDR_OWVAR 21
5162: PUSH
5163: LD_INT 2
5165: ST_TO_ADDR
// omarSquad := [ ] ;
5166: LD_ADDR_EXP 52
5170: PUSH
5171: EMPTY
5172: ST_TO_ADDR
// for i := 1 to 4 do
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: DOUBLE
5179: LD_INT 1
5181: DEC
5182: ST_TO_ADDR
5183: LD_INT 4
5185: PUSH
5186: FOR_TO
5187: IFFALSE 5310
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 6
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_EXP 21
5212: PLUS
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: PUSH
5229: FOR_TO
5230: IFFALSE 5306
// begin PrepareHuman ( false , i , 5 ) ;
5232: LD_INT 0
5234: PPUSH
5235: LD_VAR 0 2
5239: PPUSH
5240: LD_INT 5
5242: PPUSH
5243: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5247: LD_ADDR_EXP 52
5251: PUSH
5252: LD_EXP 52
5256: PPUSH
5257: CALL_OW 44
5261: PPUSH
5262: CALL 67267 0 2
5266: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 1
5274: EQUAL
5275: PUSH
5276: LD_INT 50
5278: PPUSH
5279: CALL_OW 13
5283: AND
5284: IFFALSE 5304
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5286: LD_EXP 52
5290: PUSH
5291: LD_EXP 52
5295: ARRAY
5296: PPUSH
5297: LD_INT 8
5299: PPUSH
5300: CALL_OW 336
// end ;
5304: GO 5229
5306: POP
5307: POP
// end ;
5308: GO 5186
5310: POP
5311: POP
// if HexInfo ( 340 , 205 ) then
5312: LD_INT 340
5314: PPUSH
5315: LD_INT 205
5317: PPUSH
5318: CALL_OW 428
5322: IFFALSE 5339
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5324: LD_INT 340
5326: PPUSH
5327: LD_INT 205
5329: PPUSH
5330: CALL_OW 428
5334: PPUSH
5335: CALL_OW 64
// p := 0 ;
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_INT 0
5346: ST_TO_ADDR
// for i in omarSquad do
5347: LD_ADDR_VAR 0 2
5351: PUSH
5352: LD_EXP 52
5356: PUSH
5357: FOR_IN
5358: IFFALSE 5559
// begin uc_direction := 4 ;
5360: LD_ADDR_OWVAR 24
5364: PUSH
5365: LD_INT 4
5367: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5368: LD_VAR 0 2
5372: PPUSH
5373: CALL_OW 257
5377: PUSH
5378: LD_INT 3
5380: EQUAL
5381: PUSH
5382: LD_VAR 0 4
5386: PUSH
5387: LD_INT 2
5389: LESS
5390: AND
5391: IFFALSE 5520
// begin p := p + 1 ;
5393: LD_ADDR_VAR 0 4
5397: PUSH
5398: LD_VAR 0 4
5402: PUSH
5403: LD_INT 1
5405: PLUS
5406: ST_TO_ADDR
// uc_side := 5 ;
5407: LD_ADDR_OWVAR 20
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5415: LD_INT 0
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 12
5425: IFFALSE 5456
// begin uc_nation := 2 ;
5427: LD_ADDR_OWVAR 21
5431: PUSH
5432: LD_INT 2
5434: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5435: LD_INT 13
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: LD_INT 27
5446: PPUSH
5447: LD_INT 88
5449: PPUSH
5450: CALL 34396 0 5
// end else
5454: GO 5483
// begin uc_nation := 3 ;
5456: LD_ADDR_OWVAR 21
5460: PUSH
5461: LD_INT 3
5463: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5464: LD_INT 22
5466: PPUSH
5467: LD_INT 1
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 45
5475: PPUSH
5476: LD_INT 88
5478: PPUSH
5479: CALL 34396 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5483: CALL_OW 45
5487: PPUSH
5488: LD_INT 13
5490: PPUSH
5491: LD_INT 0
5493: PPUSH
5494: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5498: LD_VAR 0 2
5502: PPUSH
5503: LD_INT 340
5505: PPUSH
5506: LD_INT 205
5508: PPUSH
5509: CALL_OW 428
5513: PPUSH
5514: CALL_OW 52
// end else
5518: GO 5535
// PlaceUnitArea ( i , southSpawn , false ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 13
5527: PPUSH
5528: LD_INT 0
5530: PPUSH
5531: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5535: LD_VAR 0 2
5539: PPUSH
5540: LD_INT 333
5542: PPUSH
5543: LD_INT 210
5545: PPUSH
5546: CALL_OW 111
// wait ( 0 0$2 ) ;
5550: LD_INT 70
5552: PPUSH
5553: CALL_OW 67
// end ;
5557: GO 5357
5559: POP
5560: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_INT 340
5568: PPUSH
5569: LD_INT 205
5571: PPUSH
5572: LD_INT 0
5574: PPUSH
5575: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5579: LD_EXP 44
5583: PPUSH
5584: LD_INT 333
5586: PPUSH
5587: LD_INT 206
5589: PPUSH
5590: CALL_OW 111
// wait ( 0 0$2 ) ;
5594: LD_INT 70
5596: PPUSH
5597: CALL_OW 67
// ComHold ( omarSquad ) ;
5601: LD_EXP 52
5605: PPUSH
5606: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5610: LD_EXP 44
5614: PUSH
5615: LD_EXP 52
5619: PPUSH
5620: LD_INT 2
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: PPUSH
5648: CALL_OW 72
5652: UNION
5653: PUSH
5654: LD_INT 22
5656: PUSH
5657: LD_INT 5
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 21
5666: PUSH
5667: LD_INT 2
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 69
5682: UNION
5683: PPUSH
5684: LD_INT 315
5686: PPUSH
5687: LD_INT 214
5689: PPUSH
5690: CALL_OW 114
// wait ( 0 0$22 ) ;
5694: LD_INT 770
5696: PPUSH
5697: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5701: LD_EXP 52
5705: PUSH
5706: LD_EXP 44
5710: UNION
5711: PPUSH
5712: LD_INT 329
5714: PPUSH
5715: LD_INT 231
5717: PPUSH
5718: CALL_OW 114
// end ;
5722: LD_VAR 0 1
5726: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5727: LD_EXP 10
5731: IFFALSE 6814
5733: GO 5735
5735: DISABLE
5736: LD_INT 0
5738: PPUSH
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
// begin enable ;
5749: ENABLE
// if not omarSquad then
5750: LD_EXP 52
5754: NOT
5755: IFFALSE 5759
// exit ;
5757: GO 6814
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5759: LD_ADDR_VAR 0 10
5763: PUSH
5764: LD_INT 14
5766: PPUSH
5767: LD_INT 81
5769: PUSH
5770: LD_INT 5
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5782: LD_ADDR_VAR 0 6
5786: PUSH
5787: LD_EXP 52
5791: PPUSH
5792: LD_INT 2
5794: PUSH
5795: LD_INT 25
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 8
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 72
5824: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5825: LD_ADDR_VAR 0 7
5829: PUSH
5830: LD_EXP 52
5834: PPUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 72
5849: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5850: LD_ADDR_VAR 0 9
5854: PUSH
5855: LD_EXP 52
5859: PPUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 3
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_EXP 52
5884: PPUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 4
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 72
5899: ST_TO_ADDR
// if sol then
5900: LD_VAR 0 6
5904: IFFALSE 6268
// for i in sol do
5906: LD_ADDR_VAR 0 1
5910: PUSH
5911: LD_VAR 0 6
5915: PUSH
5916: FOR_IN
5917: IFFALSE 6266
// if not HasTask ( i ) then
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 314
5928: NOT
5929: IFFALSE 6264
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 310
5940: NOT
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 256
5951: PUSH
5952: LD_INT 500
5954: LESS
5955: AND
5956: PUSH
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 333
5964: PPUSH
5965: LD_INT 234
5967: PPUSH
5968: CALL_OW 297
5972: PUSH
5973: LD_INT 6
5975: GREATER
5976: AND
5977: IFFALSE 5996
// begin ComMoveXY ( i , 333 , 234 ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: LD_INT 333
5986: PPUSH
5987: LD_INT 234
5989: PPUSH
5990: CALL_OW 111
// continue ;
5994: GO 5916
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 5
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 58
6013: PUSH
6014: EMPTY
6015: LIST
6016: PUSH
6017: LD_INT 50
6019: PUSH
6020: EMPTY
6021: LIST
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 30
6028: PUSH
6029: LD_INT 32
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 30
6038: PUSH
6039: LD_INT 31
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6062: LD_VAR 0 5
6066: PUSH
6067: LD_VAR 0 1
6071: PPUSH
6072: CALL_OW 310
6076: PPUSH
6077: CALL_OW 266
6081: PUSH
6082: LD_INT 31
6084: NONEQUAL
6085: AND
6086: IFFALSE 6168
// begin for j in tmp do
6088: LD_ADDR_VAR 0 2
6092: PUSH
6093: LD_VAR 0 5
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6164
// if GetTag ( j ) <> 1 then
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 110
6110: PUSH
6111: LD_INT 1
6113: NONEQUAL
6114: IFFALSE 6162
// begin SetTag ( j , 1 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 109
// if IsInUnit ( i ) then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 310
6137: IFFALSE 6148
// ComExit ( i ) ;
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 67665 0 1
// AddComEnterUnit ( i , j ) ;
6148: LD_VAR 0 1
6152: PPUSH
6153: LD_VAR 0 2
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 6098
6164: POP
6165: POP
// end else
6166: GO 6264
// if not IsInUnit ( i ) then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 310
6177: NOT
6178: IFFALSE 6264
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6180: LD_ADDR_VAR 0 5
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 50
6197: PUSH
6198: EMPTY
6199: LIST
6200: PUSH
6201: LD_INT 30
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: ST_TO_ADDR
// if tmp then
6221: LD_VAR 0 5
6225: IFFALSE 6264
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6227: LD_VAR 0 5
6231: PUSH
6232: LD_INT 1
6234: ARRAY
6235: PPUSH
6236: CALL_OW 313
6240: PUSH
6241: LD_INT 6
6243: LESS
6244: IFFALSE 6264
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_VAR 0 5
6255: PUSH
6256: LD_INT 1
6258: ARRAY
6259: PPUSH
6260: CALL_OW 120
// end ; end ;
6264: GO 5916
6266: POP
6267: POP
// if sci then
6268: LD_VAR 0 8
6272: IFFALSE 6327
// for i in sci do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 8
6283: PUSH
6284: FOR_IN
6285: IFFALSE 6325
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 333
6294: PPUSH
6295: LD_INT 234
6297: PPUSH
6298: CALL_OW 297
6302: PUSH
6303: LD_INT 9
6305: GREATER
6306: IFFALSE 6323
// ComMoveXY ( i , 333 , 234 ) ;
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_INT 333
6315: PPUSH
6316: LD_INT 234
6318: PPUSH
6319: CALL_OW 111
// end ;
6323: GO 6284
6325: POP
6326: POP
// if mech then
6327: LD_VAR 0 9
6331: IFFALSE 6536
// for i in mech do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 9
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6534
// begin hasVehicle := IsInUnit ( i ) ;
6346: LD_ADDR_VAR 0 11
6350: PUSH
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 310
6360: ST_TO_ADDR
// if enemyInBase then
6361: LD_VAR 0 10
6365: IFFALSE 6452
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6367: LD_VAR 0 11
6371: PUSH
6372: LD_VAR 0 11
6376: PPUSH
6377: CALL_OW 256
6381: PUSH
6382: LD_INT 500
6384: GREATER
6385: AND
6386: IFFALSE 6414
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6388: LD_VAR 0 11
6392: PPUSH
6393: LD_VAR 0 10
6397: PPUSH
6398: LD_VAR 0 11
6402: PPUSH
6403: CALL_OW 74
6407: PPUSH
6408: CALL_OW 115
6412: GO 6450
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6414: LD_VAR 0 11
6418: PPUSH
6419: LD_INT 333
6421: PPUSH
6422: LD_INT 234
6424: PPUSH
6425: CALL_OW 297
6429: PUSH
6430: LD_INT 6
6432: GREATER
6433: IFFALSE 6450
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6435: LD_VAR 0 11
6439: PPUSH
6440: LD_INT 333
6442: PPUSH
6443: LD_INT 234
6445: PPUSH
6446: CALL_OW 111
// end else
6450: GO 6532
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_INT 333
6459: PPUSH
6460: LD_INT 234
6462: PPUSH
6463: CALL_OW 297
6467: PUSH
6468: LD_INT 6
6470: GREATER
6471: IFFALSE 6490
// ComMoveXY ( i , 333 , 234 ) else
6473: LD_VAR 0 1
6477: PPUSH
6478: LD_INT 333
6480: PPUSH
6481: LD_INT 234
6483: PPUSH
6484: CALL_OW 111
6488: GO 6532
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6490: LD_VAR 0 11
6494: PUSH
6495: LD_VAR 0 11
6499: PPUSH
6500: CALL_OW 256
6504: PUSH
6505: LD_INT 1000
6507: LESS
6508: AND
6509: IFFALSE 6532
// begin SetFuel ( hasVehicle , 100 ) ;
6511: LD_VAR 0 11
6515: PPUSH
6516: LD_INT 100
6518: PPUSH
6519: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL 68967 0 1
// end ; end ; end ;
6532: GO 6343
6534: POP
6535: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_INT 14
6543: PPUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 24
6549: PUSH
6550: LD_INT 1000
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 21
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 70
6579: ST_TO_ADDR
// if tmp and eng then
6580: LD_VAR 0 5
6584: PUSH
6585: LD_VAR 0 7
6589: AND
6590: IFFALSE 6696
// begin for i in eng do
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_VAR 0 7
6601: PUSH
6602: FOR_IN
6603: IFFALSE 6694
// if IsInUnit ( i ) then
6605: LD_VAR 0 1
6609: PPUSH
6610: CALL_OW 310
6614: IFFALSE 6627
// ComExitBuilding ( i ) else
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 122
6625: GO 6692
// if GetLives ( i ) = 1000 then
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 256
6636: PUSH
6637: LD_INT 1000
6639: EQUAL
6640: IFFALSE 6662
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6642: LD_VAR 0 1
6646: PPUSH
6647: LD_VAR 0 5
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: CALL_OW 130
6660: GO 6692
// if GetLives ( i ) < 700 then
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 256
6671: PUSH
6672: LD_INT 700
6674: LESS
6675: IFFALSE 6692
// ComMoveXY ( i , 333 , 234 ) ;
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_INT 333
6684: PPUSH
6685: LD_INT 234
6687: PPUSH
6688: CALL_OW 111
6692: GO 6602
6694: POP
6695: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6696: LD_VAR 0 5
6700: NOT
6701: PUSH
6702: LD_VAR 0 7
6706: PPUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 54
6712: PUSH
6713: EMPTY
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 72
6724: AND
6725: IFFALSE 6814
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6727: LD_ADDR_VAR 0 1
6731: PUSH
6732: LD_VAR 0 7
6736: PPUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 54
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PPUSH
6750: CALL_OW 72
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6812
// if GetLives ( i ) < 1000 then
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 256
6767: PUSH
6768: LD_INT 1000
6770: LESS
6771: IFFALSE 6790
// ComMoveXY ( i , 333 , 234 ) else
6773: LD_VAR 0 1
6777: PPUSH
6778: LD_INT 333
6780: PPUSH
6781: LD_INT 234
6783: PPUSH
6784: CALL_OW 111
6788: GO 6810
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6790: LD_VAR 0 1
6794: PPUSH
6795: LD_INT 341
6797: PPUSH
6798: LD_INT 232
6800: PPUSH
6801: CALL_OW 428
6805: PPUSH
6806: CALL_OW 120
6810: GO 6755
6812: POP
6813: POP
// end ;
6814: PPOPN 11
6816: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6817: LD_EXP 44
6821: PPUSH
6822: CALL_OW 256
6826: PUSH
6827: LD_INT 1000
6829: LESS
6830: IFFALSE 6848
6832: GO 6834
6834: DISABLE
// begin enable ;
6835: ENABLE
// SetLives ( Omar , 1000 ) ;
6836: LD_EXP 44
6840: PPUSH
6841: LD_INT 1000
6843: PPUSH
6844: CALL_OW 234
// end ;
6848: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6849: LD_EXP 47
6853: PPUSH
6854: CALL_OW 256
6858: PUSH
6859: LD_INT 1000
6861: LESS
6862: PUSH
6863: LD_EXP 32
6867: AND
6868: IFFALSE 6886
6870: GO 6872
6872: DISABLE
// begin enable ;
6873: ENABLE
// SetLives ( Rolf , 1000 ) ;
6874: LD_EXP 47
6878: PPUSH
6879: LD_INT 1000
6881: PPUSH
6882: CALL_OW 234
// end ;
6886: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6887: LD_EXP 32
6891: IFFALSE 7571
6893: GO 6895
6895: DISABLE
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6904: LD_ADDR_VAR 0 4
6908: PUSH
6909: LD_INT 215
6911: PUSH
6912: LD_INT 162
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 195
6921: PUSH
6922: LD_INT 163
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 174
6931: PUSH
6932: LD_INT 162
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 145
6941: PUSH
6942: LD_INT 163
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 127
6951: PUSH
6952: LD_INT 163
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6966: LD_ADDR_VAR 0 6
6970: PUSH
6971: LD_INT 221
6973: PUSH
6974: LD_INT 161
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_EXP 47
6990: PUSH
6991: LD_EXP 51
6995: UNION
6996: ST_TO_ADDR
// if not tmp then
6997: LD_VAR 0 2
7001: NOT
7002: IFFALSE 7006
// exit ;
7004: GO 7571
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_VAR 0 6
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 2
7027: ARRAY
7028: PPUSH
7029: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_EXP 51
7049: PPUSH
7050: LD_INT 3
7052: PUSH
7053: LD_INT 55
7055: PUSH
7056: EMPTY
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 8
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 72
7099: ST_TO_ADDR
// if tmp then
7100: LD_VAR 0 2
7104: IFFALSE 7257
// begin for i in tmp do
7106: LD_ADDR_VAR 0 1
7110: PUSH
7111: LD_VAR 0 2
7115: PUSH
7116: FOR_IN
7117: IFFALSE 7255
// begin tag := GetTag ( i ) ;
7119: LD_ADDR_VAR 0 5
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 110
7133: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 256
7143: PUSH
7144: LD_INT 800
7146: LESS
7147: PUSH
7148: LD_VAR 0 5
7152: PUSH
7153: LD_INT 101
7155: LESS
7156: AND
7157: IFFALSE 7200
// begin SetTag ( i , 101 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 101
7166: PPUSH
7167: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_VAR 0 6
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 6
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: PPUSH
7194: CALL_OW 111
// end else
7198: GO 7253
// if tag = 101 then
7200: LD_VAR 0 5
7204: PUSH
7205: LD_INT 101
7207: EQUAL
7208: IFFALSE 7239
// begin if GetLives ( i ) = 1000 then
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 256
7219: PUSH
7220: LD_INT 1000
7222: EQUAL
7223: IFFALSE 7237
// SetTag ( i , 0 ) ;
7225: LD_VAR 0 1
7229: PPUSH
7230: LD_INT 0
7232: PPUSH
7233: CALL_OW 109
// end else
7237: GO 7253
// AgressiveMove ( i , path ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_VAR 0 4
7248: PPUSH
7249: CALL 69877 0 2
// end ;
7253: GO 7116
7255: POP
7256: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 8
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 34
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PPUSH
7304: CALL_OW 69
7308: ST_TO_ADDR
// if not tmp then
7309: LD_VAR 0 2
7313: NOT
7314: IFFALSE 7318
// continue ;
7316: GO 7033
// for i in tmp do
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: LD_VAR 0 2
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7562
// begin mech := IsDrivenBy ( i ) ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 311
7345: ST_TO_ADDR
// if not mech then
7346: LD_VAR 0 3
7350: NOT
7351: IFFALSE 7355
// continue ;
7353: GO 7328
// tag := GetTag ( i ) ;
7355: LD_ADDR_VAR 0 5
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 110
7369: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 256
7379: PUSH
7380: LD_INT 600
7382: GREATEREQUAL
7383: PUSH
7384: LD_VAR 0 5
7388: PUSH
7389: LD_INT 101
7391: LESS
7392: AND
7393: IFFALSE 7409
// AgressiveMove ( i , path ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: CALL 69877 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 256
7418: PUSH
7419: LD_INT 600
7421: LESS
7422: PUSH
7423: LD_VAR 0 5
7427: PUSH
7428: LD_INT 101
7430: LESS
7431: AND
7432: IFFALSE 7473
// begin SetTag ( i , 101 ) ;
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_INT 101
7441: PPUSH
7442: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 6
7464: PUSH
7465: LD_INT 2
7467: ARRAY
7468: PPUSH
7469: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7473: LD_VAR 0 5
7477: PUSH
7478: LD_INT 101
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_VAR 0 6
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PPUSH
7505: CALL_OW 297
7509: PUSH
7510: LD_INT 9
7512: LESS
7513: AND
7514: PUSH
7515: LD_VAR 0 3
7519: AND
7520: IFFALSE 7560
// begin if GetLives ( i ) < 1000 then
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 256
7531: PUSH
7532: LD_INT 1000
7534: LESS
7535: IFFALSE 7548
// AddComRepairVehicleAndReturn ( mech ) else
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL 69087 0 1
7546: GO 7560
// SetTag ( i , 0 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 0
7555: PPUSH
7556: CALL_OW 109
// end ; end ;
7560: GO 7328
7562: POP
7563: POP
// until not tmp ;
7564: LD_VAR 0 2
7568: NOT
7569: IFFALSE 7033
// end ;
7571: PPOPN 6
7573: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7574: LD_EXP 23
7578: IFFALSE 8883
7580: GO 7582
7582: DISABLE
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7593: LD_ADDR_VAR 0 7
7597: PUSH
7598: LD_INT 209
7600: PUSH
7601: LD_INT 221
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 190
7610: PUSH
7611: LD_INT 220
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 177
7620: PUSH
7621: LD_INT 220
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 168
7630: PUSH
7631: LD_INT 223
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 150
7640: PUSH
7641: LD_INT 206
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7655: LD_ADDR_VAR 0 8
7659: PUSH
7660: LD_INT 219
7662: PUSH
7663: LD_INT 225
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// for i := 1 to 2 do
7674: LD_ADDR_VAR 0 1
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_INT 2
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7837
// begin uc_side := 5 ;
7690: LD_ADDR_OWVAR 20
7694: PUSH
7695: LD_INT 5
7697: ST_TO_ADDR
// uc_nation := 2 ;
7698: LD_ADDR_OWVAR 21
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7706: LD_INT 14
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: LD_INT 1
7714: PPUSH
7715: LD_INT 32
7717: PPUSH
7718: LD_INT 80
7720: PPUSH
7721: CALL 34396 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7725: LD_ADDR_VAR 0 2
7729: PUSH
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL_OW 45
7739: PPUSH
7740: CALL 67267 0 2
7744: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7745: LD_VAR 0 2
7749: PUSH
7750: LD_VAR 0 1
7754: ARRAY
7755: PPUSH
7756: LD_INT 4
7758: PPUSH
7759: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: ARRAY
7773: PPUSH
7774: LD_INT 16
7776: PPUSH
7777: LD_INT 0
7779: PPUSH
7780: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7784: LD_INT 0
7786: PPUSH
7787: LD_INT 4
7789: PPUSH
7790: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7794: CALL_OW 44
7798: PPUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PPUSH
7810: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7814: LD_VAR 0 2
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 337
7827: PPUSH
7828: LD_INT 232
7830: PPUSH
7831: CALL_OW 111
// end ;
7835: GO 7687
7837: POP
7838: POP
// wait ( 0 0$25 ) ;
7839: LD_INT 875
7841: PPUSH
7842: CALL_OW 67
// for i := 1 to 2 do
7846: LD_ADDR_VAR 0 1
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_INT 2
7858: PUSH
7859: FOR_TO
7860: IFFALSE 7885
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7862: LD_VAR 0 2
7866: PUSH
7867: LD_VAR 0 1
7871: ARRAY
7872: PPUSH
7873: LD_INT 2
7875: PPUSH
7876: LD_INT 100
7878: PPUSH
7879: CALL_OW 290
7883: GO 7859
7885: POP
7886: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7887: LD_EXP 52
7891: PPUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 8
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 72
7924: PPUSH
7925: CALL_OW 122
// wait ( 0 0$3 ) ;
7929: LD_INT 105
7931: PPUSH
7932: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7936: LD_EXP 52
7940: PUSH
7941: LD_EXP 44
7945: UNION
7946: PPUSH
7947: LD_VAR 0 8
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 8
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 174
// wait ( 0 0$3 ) ;
7969: LD_INT 105
7971: PPUSH
7972: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_INT 218
7983: PPUSH
7984: LD_INT 217
7986: PPUSH
7987: CALL_OW 171
// wait ( 1 1$00 ) ;
7991: LD_INT 2100
7993: PPUSH
7994: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8005: LD_VAR 0 8
8009: PUSH
8010: LD_INT 3
8012: ARRAY
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: IFFALSE 8122
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8019: LD_INT 22
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 92
8031: PUSH
8032: LD_INT 168
8034: PUSH
8035: LD_INT 229
8037: PUSH
8038: LD_INT 12
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PPUSH
8051: CALL_OW 69
8055: PUSH
8056: LD_INT 0
8058: EQUAL
8059: IFFALSE 8122
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8061: LD_ADDR_VAR 0 8
8065: PUSH
8066: LD_INT 167
8068: PUSH
8069: LD_INT 222
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8080: LD_EXP 44
8084: PUSH
8085: LD_VAR 0 2
8089: ADD
8090: PUSH
8091: LD_EXP 52
8095: PPUSH
8096: LD_INT 25
8098: PUSH
8099: LD_INT 4
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 72
8110: ADD
8111: PPUSH
8112: LD_INT 167
8114: PPUSH
8115: LD_INT 222
8117: PPUSH
8118: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8122: LD_ADDR_VAR 0 3
8126: PUSH
8127: LD_EXP 52
8131: PPUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 55
8137: PUSH
8138: EMPTY
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 25
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 72
8181: ST_TO_ADDR
// if tmp then
8182: LD_VAR 0 3
8186: IFFALSE 8399
// begin for i in tmp do
8188: LD_ADDR_VAR 0 1
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: FOR_IN
8199: IFFALSE 8397
// begin tag := GetTag ( i ) ;
8201: LD_ADDR_VAR 0 4
8205: PUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 110
8215: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 256
8225: PUSH
8226: LD_INT 800
8228: LESS
8229: PUSH
8230: LD_VAR 0 4
8234: PUSH
8235: LD_INT 101
8237: LESS
8238: AND
8239: IFFALSE 8282
// begin SetTag ( i , 101 ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 101
8248: PPUSH
8249: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 8
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 8
8271: PUSH
8272: LD_INT 2
8274: ARRAY
8275: PPUSH
8276: CALL_OW 111
// end else
8280: GO 8395
// if tag = 101 then
8282: LD_VAR 0 4
8286: PUSH
8287: LD_INT 101
8289: EQUAL
8290: IFFALSE 8381
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8292: LD_VAR 0 1
8296: PPUSH
8297: LD_VAR 0 8
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 8
8310: PUSH
8311: LD_INT 2
8313: ARRAY
8314: PPUSH
8315: CALL_OW 297
8319: PUSH
8320: LD_INT 10
8322: GREATER
8323: IFFALSE 8352
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 8
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: LD_VAR 0 8
8343: PUSH
8344: LD_INT 2
8346: ARRAY
8347: PPUSH
8348: CALL_OW 111
// if GetLives ( i ) = 1000 then
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 256
8361: PUSH
8362: LD_INT 1000
8364: EQUAL
8365: IFFALSE 8379
// SetTag ( i , 0 ) ;
8367: LD_VAR 0 1
8371: PPUSH
8372: LD_INT 0
8374: PPUSH
8375: CALL_OW 109
// end else
8379: GO 8395
// AgressiveMove ( i , path ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_VAR 0 7
8390: PPUSH
8391: CALL 69877 0 2
// end ;
8395: GO 8198
8397: POP
8398: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8399: LD_ADDR_VAR 0 3
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: LD_INT 34
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: ST_TO_ADDR
// if not tmp then
8451: LD_VAR 0 3
8455: NOT
8456: IFFALSE 8460
// continue ;
8458: GO 7998
// for i in tmp do
8460: LD_ADDR_VAR 0 1
8464: PUSH
8465: LD_VAR 0 3
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8874
// begin mech := IsDrivenBy ( i ) ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 311
8487: ST_TO_ADDR
// if not mech then
8488: LD_VAR 0 5
8492: NOT
8493: IFFALSE 8497
// continue ;
8495: GO 8470
// tag := GetTag ( i ) ;
8497: LD_ADDR_VAR 0 4
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 110
8511: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 261
8521: PUSH
8522: LD_INT 90
8524: GREATER
8525: PUSH
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 102
8533: EQUAL
8534: AND
8535: IFFALSE 8551
// SetTag ( i , 0 ) else
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_INT 0
8544: PPUSH
8545: CALL_OW 109
8549: GO 8647
// if GetTag ( i ) = 102 then
8551: LD_VAR 0 1
8555: PPUSH
8556: CALL_OW 110
8560: PUSH
8561: LD_INT 102
8563: EQUAL
8564: IFFALSE 8647
// begin x := rand ( 1 , 2 ) ;
8566: LD_ADDR_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 2
8576: PPUSH
8577: CALL_OW 12
8581: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PPUSH
8598: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8602: LD_VAR 0 2
8606: PUSH
8607: LD_VAR 0 6
8611: ARRAY
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: CALL_OW 289
8620: PUSH
8621: LD_INT 20
8623: LESS
8624: IFFALSE 8647
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8626: LD_VAR 0 2
8630: PUSH
8631: LD_VAR 0 6
8635: ARRAY
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: LD_INT 100
8642: PPUSH
8643: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 256
8656: PUSH
8657: LD_INT 600
8659: GREATEREQUAL
8660: PUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 101
8668: LESS
8669: AND
8670: IFFALSE 8686
// AgressiveMove ( i , path ) ;
8672: LD_VAR 0 1
8676: PPUSH
8677: LD_VAR 0 7
8681: PPUSH
8682: CALL 69877 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 256
8695: PUSH
8696: LD_INT 600
8698: LESS
8699: PUSH
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 101
8707: LESS
8708: AND
8709: IFFALSE 8750
// begin SetTag ( i , 101 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 101
8718: PPUSH
8719: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_VAR 0 8
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_VAR 0 8
8741: PUSH
8742: LD_INT 2
8744: ARRAY
8745: PPUSH
8746: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8750: LD_VAR 0 4
8754: PUSH
8755: LD_INT 101
8757: EQUAL
8758: PUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: LD_VAR 0 8
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_VAR 0 8
8777: PUSH
8778: LD_INT 2
8780: ARRAY
8781: PPUSH
8782: CALL_OW 297
8786: PUSH
8787: LD_INT 9
8789: LESS
8790: AND
8791: PUSH
8792: LD_VAR 0 5
8796: AND
8797: IFFALSE 8872
// begin if GetLives ( i ) < 1000 then
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 256
8808: PUSH
8809: LD_INT 1000
8811: LESS
8812: IFFALSE 8825
// AddComRepairVehicleAndReturn ( mech ) else
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL 69087 0 1
8823: GO 8872
// if GetFuel ( i ) <= 50 and cargo then
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 261
8834: PUSH
8835: LD_INT 50
8837: LESSEQUAL
8838: PUSH
8839: LD_VAR 0 2
8843: AND
8844: IFFALSE 8860
// SetTag ( i , 102 ) else
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_INT 102
8853: PPUSH
8854: CALL_OW 109
8858: GO 8872
// SetTag ( i , 0 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 0
8867: PPUSH
8868: CALL_OW 109
// end ; end ;
8872: GO 8470
8874: POP
8875: POP
// until not tmp ;
8876: LD_VAR 0 3
8880: NOT
8881: IFFALSE 7998
// end ;
8883: PPOPN 8
8885: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8897: LD_INT 20
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8907: LD_INT 175
8909: PPUSH
8910: CALL_OW 67
// heikeInConvoy := false ;
8914: LD_ADDR_VAR 0 8
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// needOil := false ;
8922: LD_ADDR_VAR 0 7
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_INT 20
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 34
8956: PUSH
8957: LD_INT 88
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 34
8966: PUSH
8967: LD_INT 31
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 33
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: ST_TO_ADDR
// for i in tmp do
9003: LD_ADDR_VAR 0 2
9007: PUSH
9008: LD_VAR 0 3
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9099
// begin if IsDrivenBy ( i ) = Heike then
9016: LD_VAR 0 2
9020: PPUSH
9021: CALL_OW 311
9025: PUSH
9026: LD_EXP 34
9030: EQUAL
9031: IFFALSE 9050
// begin heikeInConvoy := true ;
9033: LD_ADDR_VAR 0 8
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9041: LD_STRING QHeikeConvoy
9043: PPUSH
9044: CALL_OW 97
// break ;
9048: GO 9099
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL_OW 262
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: PUSH
9064: LD_VAR 0 2
9068: PPUSH
9069: CALL_OW 261
9073: PUSH
9074: LD_INT 10
9076: LESS
9077: AND
9078: IFFALSE 9097
// begin needOil := true ;
9080: LD_ADDR_VAR 0 7
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// Query ( QNeedOil ) ;
9088: LD_STRING QNeedOil
9090: PPUSH
9091: CALL_OW 97
// break ;
9095: GO 9099
// end ; end ;
9097: GO 9013
9099: POP
9100: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9101: LD_VAR 0 7
9105: NOT
9106: PUSH
9107: LD_VAR 0 8
9111: NOT
9112: AND
9113: PUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 34
9124: PUSH
9125: LD_INT 32
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 34
9134: PUSH
9135: LD_INT 51
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 72
9151: AND
9152: IFFALSE 9169
// if Query ( QConvoy ) = 1 then
9154: LD_STRING QConvoy
9156: PPUSH
9157: CALL_OW 97
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9169
// break ;
9167: GO 9173
// until false ;
9169: LD_INT 0
9171: IFFALSE 8907
// SetAreaMapShow ( oilArea , 0 ) ;
9173: LD_INT 20
9175: PPUSH
9176: LD_INT 0
9178: PPUSH
9179: CALL_OW 424
// data := [ ] ;
9183: LD_ADDR_VAR 0 4
9187: PUSH
9188: EMPTY
9189: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: LD_INT 60
9197: PUSH
9198: LD_INT 50
9200: PUSH
9201: LD_INT 40
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_OWVAR 67
9217: ARRAY
9218: ST_TO_ADDR
// for i in tmp do
9219: LD_ADDR_VAR 0 2
9223: PUSH
9224: LD_VAR 0 3
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9327
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_VAR 0 4
9241: PPUSH
9242: LD_VAR 0 2
9246: PUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: CALL_OW 311
9256: PUSH
9257: LD_VAR 0 2
9261: PPUSH
9262: CALL_OW 256
9266: PUSH
9267: LD_VAR 0 2
9271: PPUSH
9272: CALL_OW 261
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PPUSH
9283: CALL 67267 0 2
9287: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9288: LD_VAR 0 2
9292: PPUSH
9293: CALL_OW 311
9297: PPUSH
9298: CALL_OW 64
// RemoveUnit ( i ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: CALL_OW 64
// chance := chance + 20 ;
9311: LD_ADDR_VAR 0 5
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: LD_INT 20
9323: PLUS
9324: ST_TO_ADDR
// end ;
9325: GO 9229
9327: POP
9328: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9329: LD_INT 1575
9331: PPUSH
9332: LD_INT 5250
9334: PPUSH
9335: CALL_OW 12
9339: PPUSH
9340: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9344: LD_INT 35
9346: PPUSH
9347: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9351: LD_INT 22
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 92
9363: PUSH
9364: LD_INT 261
9366: PUSH
9367: LD_INT 71
9369: PUSH
9370: LD_INT 12
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: NOT
9388: PUSH
9389: LD_INT 277
9391: PPUSH
9392: LD_INT 80
9394: PPUSH
9395: CALL_OW 428
9399: NOT
9400: AND
9401: IFFALSE 9344
// for i in data do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: LD_VAR 0 4
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9833
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9416: LD_ADDR_OWVAR 21
9420: PUSH
9421: LD_VAR 0 2
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 248
9434: ST_TO_ADDR
// uc_side := 2 ;
9435: LD_ADDR_OWVAR 20
9439: PUSH
9440: LD_INT 2
9442: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: CALL_OW 265
9456: PPUSH
9457: LD_VAR 0 2
9461: PUSH
9462: LD_INT 1
9464: ARRAY
9465: PPUSH
9466: CALL_OW 262
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: CALL_OW 263
9484: PPUSH
9485: LD_VAR 0 2
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PPUSH
9494: CALL_OW 264
9498: PPUSH
9499: LD_INT 66
9501: PPUSH
9502: CALL 34396 0 5
// vehicle := CreateVehicle ;
9506: LD_ADDR_VAR 0 6
9510: PUSH
9511: CALL_OW 45
9515: ST_TO_ADDR
// SetDir ( vehicle , 4 ) ;
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_INT 4
9523: PPUSH
9524: CALL_OW 233
// repeat wait ( 10 ) ;
9528: LD_INT 10
9530: PPUSH
9531: CALL_OW 67
// until PlaceUnitXY ( vehicle , 277 , 80 , false ) ;
9535: LD_VAR 0 6
9539: PPUSH
9540: LD_INT 277
9542: PPUSH
9543: LD_INT 80
9545: PPUSH
9546: LD_INT 0
9548: PPUSH
9549: CALL_OW 48
9553: IFFALSE 9528
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9555: LD_VAR 0 2
9559: PUSH
9560: LD_INT 2
9562: ARRAY
9563: PPUSH
9564: LD_VAR 0 6
9568: PPUSH
9569: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9573: LD_VAR 0 6
9577: PPUSH
9578: LD_VAR 0 2
9582: PUSH
9583: LD_INT 3
9585: ARRAY
9586: PPUSH
9587: CALL_OW 234
// success := Prob ( chance ) ;
9591: LD_ADDR_VAR 0 9
9595: PUSH
9596: LD_VAR 0 5
9600: PPUSH
9601: CALL_OW 13
9605: ST_TO_ADDR
// if success then
9606: LD_VAR 0 9
9610: IFFALSE 9692
// begin if GetEngine ( vehicle ) = engine_combustion then
9612: LD_VAR 0 6
9616: PPUSH
9617: CALL_OW 262
9621: PUSH
9622: LD_INT 1
9624: EQUAL
9625: IFFALSE 9639
// SetFuel ( vehicle , 90 ) ;
9627: LD_VAR 0 6
9631: PPUSH
9632: LD_INT 90
9634: PPUSH
9635: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9639: LD_VAR 0 6
9643: PPUSH
9644: CALL_OW 264
9648: PUSH
9649: LD_INT 32
9651: PUSH
9652: LD_INT 51
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: IN
9659: IFFALSE 9690
// begin collectedOil := collectedOil + 100 ;
9661: LD_ADDR_EXP 33
9665: PUSH
9666: LD_EXP 33
9670: PUSH
9671: LD_INT 100
9673: PLUS
9674: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9675: LD_VAR 0 6
9679: PPUSH
9680: LD_INT 2
9682: PPUSH
9683: LD_INT 100
9685: PPUSH
9686: CALL_OW 290
// end ; end else
9690: GO 9764
// begin if i [ 3 ] > 333 then
9692: LD_VAR 0 2
9696: PUSH
9697: LD_INT 3
9699: ARRAY
9700: PUSH
9701: LD_INT 333
9703: GREATER
9704: IFFALSE 9718
// SetLives ( vehicle , 333 ) ;
9706: LD_VAR 0 6
9710: PPUSH
9711: LD_INT 333
9713: PPUSH
9714: CALL_OW 234
// if i [ 4 ] > 20 then
9718: LD_VAR 0 2
9722: PUSH
9723: LD_INT 4
9725: ARRAY
9726: PUSH
9727: LD_INT 20
9729: GREATER
9730: IFFALSE 9746
// SetFuel ( vehicle , 20 ) else
9732: LD_VAR 0 6
9736: PPUSH
9737: LD_INT 20
9739: PPUSH
9740: CALL_OW 240
9744: GO 9764
// SetFuel ( vehicle , i [ 4 ] ) ;
9746: LD_VAR 0 6
9750: PPUSH
9751: LD_VAR 0 2
9755: PUSH
9756: LD_INT 4
9758: ARRAY
9759: PPUSH
9760: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9764: LD_VAR 0 6
9768: PPUSH
9769: LD_INT 250
9771: PPUSH
9772: LD_INT 119
9774: PPUSH
9775: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9779: LD_VAR 0 6
9783: PPUSH
9784: LD_INT 211
9786: PPUSH
9787: LD_INT 80
9789: PPUSH
9790: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9794: LD_INT 175
9796: PPUSH
9797: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9801: LD_INT 20
9803: PPUSH
9804: LD_INT 22
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: LD_INT 52
9816: PUSH
9817: EMPTY
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PPUSH
9824: CALL_OW 70
9828: NOT
9829: IFFALSE 9794
// end ;
9831: GO 9413
9833: POP
9834: POP
// wait ( 0 0$10 ) ;
9835: LD_INT 350
9837: PPUSH
9838: CALL_OW 67
// GoForOil ;
9842: CALL 8886 0 0
// end ;
9846: LD_VAR 0 1
9850: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9851: LD_INT 22
9853: PPUSH
9854: LD_INT 21
9856: PUSH
9857: LD_INT 2
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 22
9866: PUSH
9867: LD_INT 5
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 58
9876: PUSH
9877: EMPTY
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 70
9889: IFFALSE 9958
9891: GO 9893
9893: DISABLE
9894: LD_INT 0
9896: PPUSH
// begin enable ;
9897: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9898: LD_ADDR_VAR 0 1
9902: PUSH
9903: LD_INT 22
9905: PPUSH
9906: LD_INT 21
9908: PUSH
9909: LD_INT 2
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 22
9918: PUSH
9919: LD_INT 5
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 58
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 70
9941: PUSH
9942: FOR_IN
9943: IFFALSE 9956
// KillUnit ( i ) ;
9945: LD_VAR 0 1
9949: PPUSH
9950: CALL_OW 66
9954: GO 9942
9956: POP
9957: POP
// end ; end_of_file
9958: PPOPN 1
9960: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9961: LD_INT 0
9963: PPUSH
// uc_side := side ;
9964: LD_ADDR_OWVAR 20
9968: PUSH
9969: LD_VAR 0 1
9973: ST_TO_ADDR
// uc_nation := nation ;
9974: LD_ADDR_OWVAR 21
9978: PUSH
9979: LD_VAR 0 2
9983: ST_TO_ADDR
// vc_chassis := chassis ;
9984: LD_ADDR_OWVAR 37
9988: PUSH
9989: LD_VAR 0 3
9993: ST_TO_ADDR
// vc_engine := engine ;
9994: LD_ADDR_OWVAR 39
9998: PUSH
9999: LD_VAR 0 4
10003: ST_TO_ADDR
// vc_control := control ;
10004: LD_ADDR_OWVAR 38
10008: PUSH
10009: LD_VAR 0 5
10013: ST_TO_ADDR
// vc_weapon := weapon ;
10014: LD_ADDR_OWVAR 40
10018: PUSH
10019: LD_VAR 0 6
10023: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10024: LD_ADDR_OWVAR 41
10028: PUSH
10029: LD_VAR 0 7
10033: ST_TO_ADDR
// result := CreateVehicle ;
10034: LD_ADDR_VAR 0 8
10038: PUSH
10039: CALL_OW 45
10043: ST_TO_ADDR
// end ;
10044: LD_VAR 0 8
10048: RET
// export function SayX ( units , ident ) ; var i ; begin
10049: LD_INT 0
10051: PPUSH
10052: PPUSH
// result := false ;
10053: LD_ADDR_VAR 0 3
10057: PUSH
10058: LD_INT 0
10060: ST_TO_ADDR
// if not units then
10061: LD_VAR 0 1
10065: NOT
10066: IFFALSE 10070
// exit ;
10068: GO 10124
// for i in units do
10070: LD_ADDR_VAR 0 4
10074: PUSH
10075: LD_VAR 0 1
10079: PUSH
10080: FOR_IN
10081: IFFALSE 10122
// if IsOk ( i ) then
10083: LD_VAR 0 4
10087: PPUSH
10088: CALL_OW 302
10092: IFFALSE 10120
// begin Say ( i , ident ) ;
10094: LD_VAR 0 4
10098: PPUSH
10099: LD_VAR 0 2
10103: PPUSH
10104: CALL_OW 88
// result := i ;
10108: LD_ADDR_VAR 0 3
10112: PUSH
10113: LD_VAR 0 4
10117: ST_TO_ADDR
// break ;
10118: GO 10122
// end ;
10120: GO 10080
10122: POP
10123: POP
// end ;
10124: LD_VAR 0 3
10128: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10129: LD_INT 0
10131: PPUSH
10132: PPUSH
// InitUc ;
10133: CALL_OW 18
// InitHc ;
10137: CALL_OW 19
// uc_side := 0 ;
10141: LD_ADDR_OWVAR 20
10145: PUSH
10146: LD_INT 0
10148: ST_TO_ADDR
// uc_nation := 0 ;
10149: LD_ADDR_OWVAR 21
10153: PUSH
10154: LD_INT 0
10156: ST_TO_ADDR
// for i = 1 to amount do
10157: LD_ADDR_VAR 0 4
10161: PUSH
10162: DOUBLE
10163: LD_INT 1
10165: DEC
10166: ST_TO_ADDR
10167: LD_VAR 0 2
10171: PUSH
10172: FOR_TO
10173: IFFALSE 10255
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10175: LD_ADDR_OWVAR 29
10179: PUSH
10180: LD_INT 9
10182: PPUSH
10183: LD_INT 12
10185: PPUSH
10186: CALL_OW 12
10190: PUSH
10191: LD_INT 9
10193: PPUSH
10194: LD_INT 12
10196: PPUSH
10197: CALL_OW 12
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10206: LD_ADDR_OWVAR 35
10210: PUSH
10211: LD_INT 1
10213: NEG
10214: PPUSH
10215: LD_INT 1
10217: PPUSH
10218: CALL_OW 12
10222: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10223: LD_INT 0
10225: PPUSH
10226: LD_INT 12
10228: PPUSH
10229: LD_INT 1
10231: PPUSH
10232: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10236: CALL_OW 44
10240: PPUSH
10241: LD_VAR 0 1
10245: PPUSH
10246: LD_INT 0
10248: PPUSH
10249: CALL_OW 49
// end ;
10253: GO 10172
10255: POP
10256: POP
// InitHc ;
10257: CALL_OW 19
// end ;
10261: LD_VAR 0 3
10265: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10266: LD_INT 0
10268: PPUSH
10269: PPUSH
// uc_side := 0 ;
10270: LD_ADDR_OWVAR 20
10274: PUSH
10275: LD_INT 0
10277: ST_TO_ADDR
// uc_nation := 0 ;
10278: LD_ADDR_OWVAR 21
10282: PUSH
10283: LD_INT 0
10285: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10286: LD_INT 7
10288: PPUSH
10289: LD_INT 6
10291: PUSH
10292: LD_INT 5
10294: PUSH
10295: LD_INT 4
10297: PUSH
10298: LD_INT 3
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: PUSH
10307: LD_OWVAR 67
10311: ARRAY
10312: PPUSH
10313: CALL 10129 0 2
// for i = 1 to 2 do
10317: LD_ADDR_VAR 0 4
10321: PUSH
10322: DOUBLE
10323: LD_INT 1
10325: DEC
10326: ST_TO_ADDR
10327: LD_INT 2
10329: PUSH
10330: FOR_TO
10331: IFFALSE 10368
// begin vc_chassis := class_mastodont ;
10333: LD_ADDR_OWVAR 37
10337: PUSH
10338: LD_INT 31
10340: ST_TO_ADDR
// vc_control := control_rider ;
10341: LD_ADDR_OWVAR 38
10345: PUSH
10346: LD_INT 4
10348: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10349: CALL_OW 45
10353: PPUSH
10354: LD_VAR 0 1
10358: PPUSH
10359: LD_INT 0
10361: PPUSH
10362: CALL 66172 0 3
// end ;
10366: GO 10330
10368: POP
10369: POP
// InitHc ;
10370: CALL_OW 19
// for i := 1 to 3 do
10374: LD_ADDR_VAR 0 4
10378: PUSH
10379: DOUBLE
10380: LD_INT 1
10382: DEC
10383: ST_TO_ADDR
10384: LD_INT 3
10386: PUSH
10387: FOR_TO
10388: IFFALSE 10425
// begin hc_class := class_horse ;
10390: LD_ADDR_OWVAR 28
10394: PUSH
10395: LD_INT 21
10397: ST_TO_ADDR
// hc_gallery :=  ;
10398: LD_ADDR_OWVAR 33
10402: PUSH
10403: LD_STRING 
10405: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10406: CALL_OW 44
10410: PPUSH
10411: LD_VAR 0 1
10415: PPUSH
10416: LD_INT 0
10418: PPUSH
10419: CALL_OW 49
// end ;
10423: GO 10387
10425: POP
10426: POP
// InitHc ;
10427: CALL_OW 19
// for i = 1 to 3 do
10431: LD_ADDR_VAR 0 4
10435: PUSH
10436: DOUBLE
10437: LD_INT 1
10439: DEC
10440: ST_TO_ADDR
10441: LD_INT 3
10443: PUSH
10444: FOR_TO
10445: IFFALSE 10499
// begin hc_class = class_tiger ;
10447: LD_ADDR_OWVAR 28
10451: PUSH
10452: LD_INT 14
10454: ST_TO_ADDR
// hc_gallery =  ;
10455: LD_ADDR_OWVAR 33
10459: PUSH
10460: LD_STRING 
10462: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10463: LD_ADDR_OWVAR 35
10467: PUSH
10468: LD_INT 7
10470: NEG
10471: PPUSH
10472: LD_INT 7
10474: PPUSH
10475: CALL_OW 12
10479: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10480: CALL_OW 44
10484: PPUSH
10485: LD_VAR 0 1
10489: PPUSH
10490: LD_INT 0
10492: PPUSH
10493: CALL 66172 0 3
// end ;
10497: GO 10444
10499: POP
10500: POP
// InitHc ;
10501: CALL_OW 19
// for i := 1 to 4 do
10505: LD_ADDR_VAR 0 4
10509: PUSH
10510: DOUBLE
10511: LD_INT 1
10513: DEC
10514: ST_TO_ADDR
10515: LD_INT 4
10517: PUSH
10518: FOR_TO
10519: IFFALSE 10556
// begin hc_class := class_phororhacos ;
10521: LD_ADDR_OWVAR 28
10525: PUSH
10526: LD_INT 18
10528: ST_TO_ADDR
// hc_gallery :=  ;
10529: LD_ADDR_OWVAR 33
10533: PUSH
10534: LD_STRING 
10536: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10537: CALL_OW 44
10541: PPUSH
10542: LD_VAR 0 1
10546: PPUSH
10547: LD_INT 0
10549: PPUSH
10550: CALL_OW 49
// end ;
10554: GO 10518
10556: POP
10557: POP
// InitHc ;
10558: CALL_OW 19
// for i := 1 to 4 do
10562: LD_ADDR_VAR 0 4
10566: PUSH
10567: DOUBLE
10568: LD_INT 1
10570: DEC
10571: ST_TO_ADDR
10572: LD_INT 4
10574: PUSH
10575: FOR_TO
10576: IFFALSE 10613
// begin hc_class := class_baggie ;
10578: LD_ADDR_OWVAR 28
10582: PUSH
10583: LD_INT 13
10585: ST_TO_ADDR
// hc_gallery :=  ;
10586: LD_ADDR_OWVAR 33
10590: PUSH
10591: LD_STRING 
10593: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10594: CALL_OW 44
10598: PPUSH
10599: LD_VAR 0 1
10603: PPUSH
10604: LD_INT 0
10606: PPUSH
10607: CALL_OW 49
// end ;
10611: GO 10575
10613: POP
10614: POP
// InitHc ;
10615: CALL_OW 19
// for i := 1 to 7 do
10619: LD_ADDR_VAR 0 4
10623: PUSH
10624: DOUBLE
10625: LD_INT 1
10627: DEC
10628: ST_TO_ADDR
10629: LD_INT 7
10631: PUSH
10632: FOR_TO
10633: IFFALSE 10670
// begin hc_class := class_frog ;
10635: LD_ADDR_OWVAR 28
10639: PUSH
10640: LD_INT 19
10642: ST_TO_ADDR
// hc_gallery :=  ;
10643: LD_ADDR_OWVAR 33
10647: PUSH
10648: LD_STRING 
10650: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10651: CALL_OW 44
10655: PPUSH
10656: LD_VAR 0 2
10660: PPUSH
10661: LD_INT 0
10663: PPUSH
10664: CALL_OW 49
// end ;
10668: GO 10632
10670: POP
10671: POP
// end ;
10672: LD_VAR 0 3
10676: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
10681: PPUSH
// if not observer or not unit then
10682: LD_VAR 0 1
10686: NOT
10687: PUSH
10688: LD_VAR 0 2
10692: NOT
10693: OR
10694: IFFALSE 10698
// exit ;
10696: GO 10746
// if not See ( GetSide ( observer ) , unit ) then
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL_OW 255
10707: PPUSH
10708: LD_VAR 0 2
10712: PPUSH
10713: CALL_OW 292
10717: NOT
10718: IFFALSE 10722
// exit ;
10720: GO 10746
// result := GetDistUnits ( observer , unit ) < 12 ;
10722: LD_ADDR_VAR 0 3
10726: PUSH
10727: LD_VAR 0 1
10731: PPUSH
10732: LD_VAR 0 2
10736: PPUSH
10737: CALL_OW 296
10741: PUSH
10742: LD_INT 12
10744: LESS
10745: ST_TO_ADDR
// end ;
10746: LD_VAR 0 3
10750: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10751: LD_INT 0
10753: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 1
10761: ARRAY
10762: PPUSH
10763: LD_VAR 0 2
10767: PUSH
10768: LD_INT 2
10770: ARRAY
10771: PPUSH
10772: CALL_OW 488
10776: PUSH
10777: LD_VAR 0 2
10781: PUSH
10782: LD_INT 1
10784: ARRAY
10785: PPUSH
10786: LD_VAR 0 2
10790: PUSH
10791: LD_INT 2
10793: ARRAY
10794: PPUSH
10795: CALL_OW 428
10799: PUSH
10800: LD_INT 0
10802: EQUAL
10803: AND
10804: IFFALSE 10838
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10806: LD_VAR 0 1
10810: PPUSH
10811: LD_VAR 0 2
10815: PUSH
10816: LD_INT 1
10818: ARRAY
10819: PPUSH
10820: LD_VAR 0 2
10824: PUSH
10825: LD_INT 2
10827: ARRAY
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: CALL_OW 48
// end ;
10838: LD_VAR 0 4
10842: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10843: LD_INT 0
10845: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10846: LD_VAR 0 1
10850: PPUSH
10851: LD_VAR 0 2
10855: PPUSH
10856: LD_VAR 0 3
10860: PPUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10870: LD_VAR 0 1
10874: PPUSH
10875: LD_VAR 0 2
10879: PPUSH
10880: LD_VAR 0 3
10884: PPUSH
10885: CALL_OW 331
// end ;
10889: LD_VAR 0 5
10893: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10894: LD_INT 0
10896: PPUSH
// if not units then
10897: LD_VAR 0 1
10901: NOT
10902: IFFALSE 10906
// exit ;
10904: GO 10989
// result := true ;
10906: LD_ADDR_VAR 0 4
10910: PUSH
10911: LD_INT 1
10913: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10914: LD_VAR 0 1
10918: PPUSH
10919: LD_INT 26
10921: PUSH
10922: LD_INT 1
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 72
10933: PUSH
10934: LD_INT 1
10936: ARRAY
10937: PPUSH
10938: LD_VAR 0 2
10942: PPUSH
10943: CALL_OW 88
10947: NOT
10948: IFFALSE 10989
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10950: LD_ADDR_VAR 0 4
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: LD_INT 26
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PPUSH
10970: CALL_OW 72
10974: PUSH
10975: LD_INT 1
10977: ARRAY
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: CALL_OW 88
10988: ST_TO_ADDR
// end ;
10989: LD_VAR 0 4
10993: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10994: LD_INT 0
10996: PPUSH
10997: PPUSH
// if not group then
10998: LD_VAR 0 2
11002: NOT
11003: IFFALSE 11007
// exit ;
11005: GO 11052
// for i in group do
11007: LD_ADDR_VAR 0 4
11011: PUSH
11012: LD_VAR 0 2
11016: PUSH
11017: FOR_IN
11018: IFFALSE 11050
// if See ( side , i ) then
11020: LD_VAR 0 1
11024: PPUSH
11025: LD_VAR 0 4
11029: PPUSH
11030: CALL_OW 292
11034: IFFALSE 11048
// begin result := true ;
11036: LD_ADDR_VAR 0 3
11040: PUSH
11041: LD_INT 1
11043: ST_TO_ADDR
// exit ;
11044: POP
11045: POP
11046: GO 11052
// end ;
11048: GO 11017
11050: POP
11051: POP
// end ; end_of_file
11052: LD_VAR 0 3
11056: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11057: LD_INT 0
11059: PPUSH
11060: PPUSH
11061: PPUSH
11062: PPUSH
11063: PPUSH
11064: PPUSH
11065: PPUSH
// uc_side := 3 ;
11066: LD_ADDR_OWVAR 20
11070: PUSH
11071: LD_INT 3
11073: ST_TO_ADDR
// uc_nation := 3 ;
11074: LD_ADDR_OWVAR 21
11078: PUSH
11079: LD_INT 3
11081: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11082: LD_ADDR_EXP 53
11086: PUSH
11087: LD_STRING Morozov
11089: PPUSH
11090: CALL_OW 25
11094: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11095: LD_EXP 53
11099: PPUSH
11100: LD_INT 52
11102: PPUSH
11103: CALL_OW 52
// if not gaidarKilled then
11107: LD_EXP 7
11111: NOT
11112: IFFALSE 11145
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11114: LD_ADDR_EXP 54
11118: PUSH
11119: LD_STRING Gaydar
11121: PPUSH
11122: LD_INT 0
11124: PPUSH
11125: LD_STRING 
11127: PPUSH
11128: CALL 29472 0 3
11132: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11133: LD_EXP 54
11137: PPUSH
11138: LD_INT 52
11140: PPUSH
11141: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11145: LD_INT 52
11147: PPUSH
11148: LD_STRING lenin
11150: PPUSH
11151: CALL_OW 500
// ruOutsiders := [ ] ;
11155: LD_ADDR_EXP 56
11159: PUSH
11160: EMPTY
11161: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11162: LD_ADDR_EXP 58
11166: PUSH
11167: EMPTY
11168: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11169: LD_ADDR_EXP 59
11173: PUSH
11174: EMPTY
11175: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11176: LD_ADDR_EXP 60
11180: PUSH
11181: EMPTY
11182: ST_TO_ADDR
// ruAttackers := [ ] ;
11183: LD_ADDR_EXP 61
11187: PUSH
11188: EMPTY
11189: ST_TO_ADDR
// waveStrength := 0 ;
11190: LD_ADDR_EXP 62
11194: PUSH
11195: LD_INT 0
11197: ST_TO_ADDR
// if not gaidarKilled then
11198: LD_EXP 7
11202: NOT
11203: IFFALSE 11213
// waveStrength := 2 ;
11205: LD_ADDR_EXP 62
11209: PUSH
11210: LD_INT 2
11212: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11213: LD_ADDR_VAR 0 7
11217: PUSH
11218: LD_INT 22
11220: PUSH
11221: LD_INT 3
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 21
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PPUSH
11242: CALL_OW 69
11246: ST_TO_ADDR
// for i in tmp do
11247: LD_ADDR_VAR 0 2
11251: PUSH
11252: LD_VAR 0 7
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11295
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11260: LD_VAR 0 2
11264: PPUSH
11265: LD_INT 5
11267: PUSH
11268: LD_INT 6
11270: PUSH
11271: LD_INT 7
11273: PUSH
11274: LD_INT 8
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: PUSH
11283: LD_OWVAR 67
11287: ARRAY
11288: PPUSH
11289: CALL_OW 241
11293: GO 11257
11295: POP
11296: POP
// for i := 1 to 3 do
11297: LD_ADDR_VAR 0 2
11301: PUSH
11302: DOUBLE
11303: LD_INT 1
11305: DEC
11306: ST_TO_ADDR
11307: LD_INT 3
11309: PUSH
11310: FOR_TO
11311: IFFALSE 11349
// begin PrepareHuman ( false , 1 , 0 ) ;
11313: LD_INT 0
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: LD_INT 0
11321: PPUSH
11322: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11326: CALL_OW 44
11330: PPUSH
11331: LD_INT 75
11333: PPUSH
11334: LD_INT 49
11336: PPUSH
11337: LD_INT 3
11339: PPUSH
11340: LD_INT 0
11342: PPUSH
11343: CALL_OW 50
// end ;
11347: GO 11310
11349: POP
11350: POP
// for i := 1 to 4 do
11351: LD_ADDR_VAR 0 2
11355: PUSH
11356: DOUBLE
11357: LD_INT 1
11359: DEC
11360: ST_TO_ADDR
11361: LD_INT 4
11363: PUSH
11364: FOR_TO
11365: IFFALSE 11411
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11367: LD_INT 0
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 2
11375: PPUSH
11376: CALL_OW 12
11380: PPUSH
11381: LD_INT 0
11383: PPUSH
11384: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11388: CALL_OW 44
11392: PPUSH
11393: LD_INT 330
11395: PPUSH
11396: LD_INT 231
11398: PPUSH
11399: LD_INT 5
11401: PPUSH
11402: LD_INT 0
11404: PPUSH
11405: CALL_OW 50
// end ;
11409: GO 11364
11411: POP
11412: POP
// hc_class := 1 ;
11413: LD_ADDR_OWVAR 28
11417: PUSH
11418: LD_INT 1
11420: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11421: CALL_OW 44
11425: PPUSH
11426: LD_INT 324
11428: PPUSH
11429: LD_INT 219
11431: PPUSH
11432: CALL_OW 428
11436: PPUSH
11437: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11441: CALL_OW 44
11445: PPUSH
11446: LD_INT 316
11448: PPUSH
11449: LD_INT 223
11451: PPUSH
11452: CALL_OW 428
11456: PPUSH
11457: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11461: LD_ADDR_VAR 0 7
11465: PUSH
11466: LD_INT 172
11468: PPUSH
11469: LD_INT 198
11471: PPUSH
11472: CALL_OW 428
11476: PPUSH
11477: CALL_OW 274
11481: PUSH
11482: LD_INT 189
11484: PPUSH
11485: LD_INT 156
11487: PPUSH
11488: CALL_OW 428
11492: PPUSH
11493: CALL_OW 274
11497: PUSH
11498: LD_INT 341
11500: PPUSH
11501: LD_INT 232
11503: PPUSH
11504: CALL_OW 428
11508: PPUSH
11509: CALL_OW 274
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: ST_TO_ADDR
// for i in tmp do
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_VAR 0 7
11528: PUSH
11529: FOR_IN
11530: IFFALSE 11564
// begin SetResourceType ( i , mat_cans , 200 ) ;
11532: LD_VAR 0 2
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: LD_INT 200
11542: PPUSH
11543: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11547: LD_VAR 0 2
11551: PPUSH
11552: LD_INT 2
11554: PPUSH
11555: LD_INT 300
11557: PPUSH
11558: CALL_OW 277
// end ;
11562: GO 11529
11564: POP
11565: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11566: LD_ADDR_VAR 0 7
11570: PUSH
11571: LD_INT 177
11573: PUSH
11574: LD_INT 114
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 138
11583: PUSH
11584: LD_INT 96
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: ST_TO_ADDR
// for i := 1 to tmp do
11595: LD_ADDR_VAR 0 2
11599: PUSH
11600: DOUBLE
11601: LD_INT 1
11603: DEC
11604: ST_TO_ADDR
11605: LD_VAR 0 7
11609: PUSH
11610: FOR_TO
11611: IFFALSE 11694
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11613: LD_INT 0
11615: PPUSH
11616: LD_INT 9
11618: PPUSH
11619: LD_INT 6
11621: PPUSH
11622: CALL_OW 380
// un := CreateHuman ;
11626: LD_ADDR_VAR 0 5
11630: PUSH
11631: CALL_OW 44
11635: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11636: LD_VAR 0 5
11640: PPUSH
11641: LD_INT 2
11643: PPUSH
11644: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11648: LD_VAR 0 5
11652: PPUSH
11653: LD_VAR 0 7
11657: PUSH
11658: LD_VAR 0 2
11662: ARRAY
11663: PUSH
11664: LD_INT 1
11666: ARRAY
11667: PPUSH
11668: LD_VAR 0 7
11672: PUSH
11673: LD_VAR 0 2
11677: ARRAY
11678: PUSH
11679: LD_INT 2
11681: ARRAY
11682: PPUSH
11683: CALL_OW 428
11687: PPUSH
11688: CALL_OW 52
// end ;
11692: GO 11610
11694: POP
11695: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11696: LD_ADDR_VAR 0 7
11700: PUSH
11701: LD_INT 198
11703: PUSH
11704: LD_INT 158
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 203
11713: PUSH
11714: LD_INT 166
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 181
11723: PUSH
11724: LD_INT 209
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 178
11733: PUSH
11734: LD_INT 196
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 181
11743: PUSH
11744: LD_INT 212
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: ST_TO_ADDR
// for i := 1 to tmp do
11758: LD_ADDR_VAR 0 2
11762: PUSH
11763: DOUBLE
11764: LD_INT 1
11766: DEC
11767: ST_TO_ADDR
11768: LD_VAR 0 7
11772: PUSH
11773: FOR_TO
11774: IFFALSE 11895
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11776: LD_INT 0
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: LD_INT 4
11784: PUSH
11785: LD_INT 5
11787: PUSH
11788: LD_INT 6
11790: PUSH
11791: LD_INT 7
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: LD_OWVAR 67
11804: ARRAY
11805: PPUSH
11806: CALL_OW 380
// un := CreateHuman ;
11810: LD_ADDR_VAR 0 5
11814: PUSH
11815: CALL_OW 44
11819: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11820: LD_ADDR_VAR 0 4
11824: PUSH
11825: LD_VAR 0 7
11829: PUSH
11830: LD_VAR 0 2
11834: ARRAY
11835: PUSH
11836: LD_INT 1
11838: ARRAY
11839: PPUSH
11840: LD_VAR 0 7
11844: PUSH
11845: LD_VAR 0 2
11849: ARRAY
11850: PUSH
11851: LD_INT 2
11853: ARRAY
11854: PPUSH
11855: CALL_OW 428
11859: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11860: LD_VAR 0 5
11864: PPUSH
11865: LD_VAR 0 4
11869: PPUSH
11870: CALL 62494 0 1
11874: PPUSH
11875: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11879: LD_VAR 0 5
11883: PPUSH
11884: LD_VAR 0 4
11888: PPUSH
11889: CALL_OW 52
// end ;
11893: GO 11773
11895: POP
11896: POP
// for i := 1 to 3 do
11897: LD_ADDR_VAR 0 2
11901: PUSH
11902: DOUBLE
11903: LD_INT 1
11905: DEC
11906: ST_TO_ADDR
11907: LD_INT 3
11909: PUSH
11910: FOR_TO
11911: IFFALSE 11966
// begin InitHc ;
11913: CALL_OW 19
// uc_nation := 0 ;
11917: LD_ADDR_OWVAR 21
11921: PUSH
11922: LD_INT 0
11924: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11925: LD_ADDR_OWVAR 28
11929: PUSH
11930: LD_INT 16
11932: ST_TO_ADDR
// un := CreateHuman ;
11933: LD_ADDR_VAR 0 5
11937: PUSH
11938: CALL_OW 44
11942: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11943: LD_VAR 0 5
11947: PPUSH
11948: LD_INT 194
11950: PPUSH
11951: LD_INT 164
11953: PPUSH
11954: LD_INT 6
11956: PPUSH
11957: LD_INT 0
11959: PPUSH
11960: CALL_OW 50
// end ;
11964: GO 11910
11966: POP
11967: POP
// uc_nation := 3 ;
11968: LD_ADDR_OWVAR 21
11972: PUSH
11973: LD_INT 3
11975: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11976: LD_INT 24
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: LD_INT 44
11987: PPUSH
11988: LD_INT 10
11990: PPUSH
11991: CALL 34396 0 5
// un := CreateVehicle ;
11995: LD_ADDR_VAR 0 5
11999: PUSH
12000: CALL_OW 45
12004: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
12005: LD_VAR 0 5
12009: PPUSH
12010: LD_INT 199
12012: PPUSH
12013: LD_INT 166
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: LD_INT 0
12021: PPUSH
12022: CALL 69407 0 5
// ComHold ( un ) ;
12026: LD_VAR 0 5
12030: PPUSH
12031: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12035: LD_INT 0
12037: PPUSH
12038: LD_INT 3
12040: PPUSH
12041: LD_INT 4
12043: PPUSH
12044: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12048: CALL_OW 44
12052: PPUSH
12053: LD_VAR 0 5
12057: PPUSH
12058: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12062: LD_INT 24
12064: PPUSH
12065: LD_INT 1
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_INT 45
12073: PPUSH
12074: LD_INT 10
12076: PPUSH
12077: CALL 34396 0 5
// un := CreateVehicle ;
12081: LD_ADDR_VAR 0 5
12085: PUSH
12086: CALL_OW 45
12090: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12091: LD_VAR 0 5
12095: PPUSH
12096: LD_INT 129
12098: PPUSH
12099: LD_INT 93
12101: PPUSH
12102: LD_INT 1
12104: PPUSH
12105: LD_INT 0
12107: PPUSH
12108: CALL 69407 0 5
// ComHold ( un ) ;
12112: LD_VAR 0 5
12116: PPUSH
12117: CALL_OW 140
// if Difficulty > 1 then
12121: LD_OWVAR 67
12125: PUSH
12126: LD_INT 1
12128: GREATER
12129: IFFALSE 12217
// begin PrepareHuman ( false , 3 , 4 ) ;
12131: LD_INT 0
12133: PPUSH
12134: LD_INT 3
12136: PPUSH
12137: LD_INT 4
12139: PPUSH
12140: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12144: CALL_OW 44
12148: PPUSH
12149: LD_VAR 0 5
12153: PPUSH
12154: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12158: LD_INT 24
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: LD_INT 45
12169: PPUSH
12170: LD_INT 10
12172: PPUSH
12173: CALL 34396 0 5
// un := CreateVehicle ;
12177: LD_ADDR_VAR 0 5
12181: PUSH
12182: CALL_OW 45
12186: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12187: LD_VAR 0 5
12191: PPUSH
12192: LD_INT 200
12194: PPUSH
12195: LD_INT 173
12197: PPUSH
12198: LD_INT 1
12200: PPUSH
12201: LD_INT 0
12203: PPUSH
12204: CALL 69407 0 5
// ComHold ( un ) ;
12208: LD_VAR 0 5
12212: PPUSH
12213: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12217: LD_INT 0
12219: PPUSH
12220: LD_INT 3
12222: PPUSH
12223: LD_INT 4
12225: PPUSH
12226: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12230: CALL_OW 44
12234: PPUSH
12235: LD_VAR 0 5
12239: PPUSH
12240: CALL_OW 52
// bc_type := b_armoury ;
12244: LD_ADDR_OWVAR 42
12248: PUSH
12249: LD_INT 4
12251: ST_TO_ADDR
// if Difficulty > 1 then
12252: LD_OWVAR 67
12256: PUSH
12257: LD_INT 1
12259: GREATER
12260: IFFALSE 12270
// bc_type := b_barracks ;
12262: LD_ADDR_OWVAR 42
12266: PUSH
12267: LD_INT 5
12269: ST_TO_ADDR
// bc_level := 6 ;
12270: LD_ADDR_OWVAR 43
12274: PUSH
12275: LD_INT 6
12277: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12278: LD_INT 120
12280: PPUSH
12281: LD_INT 100
12283: PPUSH
12284: LD_INT 5
12286: PPUSH
12287: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12291: LD_ADDR_VAR 0 2
12295: PUSH
12296: DOUBLE
12297: LD_INT 1
12299: DEC
12300: ST_TO_ADDR
12301: LD_INT 3
12303: PUSH
12304: LD_INT 3
12306: PUSH
12307: LD_INT 4
12309: PUSH
12310: LD_INT 4
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: LD_OWVAR 67
12323: ARRAY
12324: PUSH
12325: FOR_TO
12326: IFFALSE 12384
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12328: LD_INT 0
12330: PPUSH
12331: LD_INT 1
12333: PUSH
12334: LD_INT 1
12336: PUSH
12337: LD_INT 9
12339: PUSH
12340: LD_INT 9
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: LD_OWVAR 67
12353: ARRAY
12354: PPUSH
12355: LD_INT 5
12357: PPUSH
12358: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12362: CALL_OW 44
12366: PPUSH
12367: LD_INT 120
12369: PPUSH
12370: LD_INT 100
12372: PPUSH
12373: CALL_OW 428
12377: PPUSH
12378: CALL_OW 52
// end ;
12382: GO 12325
12384: POP
12385: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12386: LD_ADDR_VAR 0 7
12390: PUSH
12391: LD_INT 135
12393: PUSH
12394: LD_INT 100
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 137
12403: PUSH
12404: LD_INT 92
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: ST_TO_ADDR
// for i := 1 to tmp do
12415: LD_ADDR_VAR 0 2
12419: PUSH
12420: DOUBLE
12421: LD_INT 1
12423: DEC
12424: ST_TO_ADDR
12425: LD_VAR 0 7
12429: PUSH
12430: FOR_TO
12431: IFFALSE 12601
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12433: LD_INT 22
12435: PUSH
12436: LD_INT 22
12438: PUSH
12439: LD_INT 24
12441: PUSH
12442: LD_INT 24
12444: PUSH
12445: LD_INT 24
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: PUSH
12455: LD_OWVAR 67
12459: PUSH
12460: LD_INT 0
12462: PPUSH
12463: LD_INT 1
12465: PPUSH
12466: CALL_OW 12
12470: PLUS
12471: ARRAY
12472: PPUSH
12473: LD_INT 1
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: LD_INT 44
12481: PPUSH
12482: LD_INT 25
12484: PPUSH
12485: CALL 34396 0 5
// veh := CreateVehicle ;
12489: LD_ADDR_VAR 0 6
12493: PUSH
12494: CALL_OW 45
12498: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12499: LD_VAR 0 6
12503: PPUSH
12504: LD_INT 2
12506: PPUSH
12507: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12511: LD_VAR 0 6
12515: PPUSH
12516: LD_VAR 0 7
12520: PUSH
12521: LD_VAR 0 2
12525: ARRAY
12526: PUSH
12527: LD_INT 1
12529: ARRAY
12530: PPUSH
12531: LD_VAR 0 7
12535: PUSH
12536: LD_VAR 0 2
12540: ARRAY
12541: PUSH
12542: LD_INT 2
12544: ARRAY
12545: PPUSH
12546: LD_INT 0
12548: PPUSH
12549: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12553: LD_INT 0
12555: PPUSH
12556: LD_INT 3
12558: PPUSH
12559: LD_INT 6
12561: PPUSH
12562: CALL_OW 380
// un := CreateHuman ;
12566: LD_ADDR_VAR 0 5
12570: PUSH
12571: CALL_OW 44
12575: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12576: LD_VAR 0 5
12580: PPUSH
12581: LD_VAR 0 6
12585: PPUSH
12586: CALL_OW 52
// ComHold ( veh ) ;
12590: LD_VAR 0 6
12594: PPUSH
12595: CALL_OW 140
// end ;
12599: GO 12430
12601: POP
12602: POP
// tmp := [ 191 , 122 ] ;
12603: LD_ADDR_VAR 0 7
12607: PUSH
12608: LD_INT 191
12610: PUSH
12611: LD_INT 122
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12618: LD_INT 24
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_INT 44
12629: PPUSH
12630: LD_INT 30
12632: PPUSH
12633: CALL 34396 0 5
// ruBlockadeTank := CreateVehicle ;
12637: LD_ADDR_EXP 55
12641: PUSH
12642: CALL_OW 45
12646: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12647: LD_EXP 55
12651: PPUSH
12652: LD_INT 2
12654: PPUSH
12655: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12659: LD_EXP 55
12663: PPUSH
12664: LD_INT 191
12666: PPUSH
12667: LD_INT 122
12669: PPUSH
12670: LD_INT 0
12672: PPUSH
12673: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12677: LD_INT 1
12679: PPUSH
12680: LD_INT 5
12682: PUSH
12683: LD_INT 6
12685: PUSH
12686: LD_INT 7
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: LD_OWVAR 67
12698: PUSH
12699: LD_INT 1
12701: MINUS
12702: ARRAY
12703: PPUSH
12704: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12708: CALL_OW 44
12712: PPUSH
12713: LD_EXP 55
12717: PPUSH
12718: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12722: LD_EXP 55
12726: PPUSH
12727: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12731: LD_ADDR_EXP 57
12735: PUSH
12736: EMPTY
12737: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12738: LD_ADDR_VAR 0 2
12742: PUSH
12743: DOUBLE
12744: LD_INT 1
12746: DEC
12747: ST_TO_ADDR
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: LD_INT 3
12756: PUSH
12757: LD_INT 3
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_OWVAR 67
12770: ARRAY
12771: PUSH
12772: FOR_TO
12773: IFFALSE 12889
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12775: LD_INT 0
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: LD_INT 4
12783: PUSH
12784: LD_INT 5
12786: PUSH
12787: LD_INT 6
12789: PUSH
12790: LD_INT 7
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: PUSH
12799: LD_OWVAR 67
12803: ARRAY
12804: PPUSH
12805: CALL_OW 380
// un := CreateHuman ;
12809: LD_ADDR_VAR 0 5
12813: PUSH
12814: CALL_OW 44
12818: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12819: LD_VAR 0 5
12823: PPUSH
12824: LD_INT 9
12826: PPUSH
12827: LD_INT 0
12829: PPUSH
12830: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12834: LD_VAR 0 5
12838: PPUSH
12839: LD_INT 198
12841: PPUSH
12842: LD_INT 129
12844: PPUSH
12845: CALL_OW 118
// AddComCrawl ( un ) ;
12849: LD_VAR 0 5
12853: PPUSH
12854: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12858: LD_ADDR_EXP 57
12862: PUSH
12863: LD_EXP 57
12867: PPUSH
12868: LD_EXP 57
12872: PUSH
12873: LD_INT 1
12875: PLUS
12876: PPUSH
12877: LD_VAR 0 5
12881: PPUSH
12882: CALL_OW 1
12886: ST_TO_ADDR
// end ;
12887: GO 12772
12889: POP
12890: POP
// PrepareHuman ( false , 4 , 5 ) ;
12891: LD_INT 0
12893: PPUSH
12894: LD_INT 4
12896: PPUSH
12897: LD_INT 5
12899: PPUSH
12900: CALL_OW 380
// un := CreateHuman ;
12904: LD_ADDR_VAR 0 5
12908: PUSH
12909: CALL_OW 44
12913: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12914: LD_VAR 0 5
12918: PPUSH
12919: LD_INT 179
12921: PPUSH
12922: LD_INT 113
12924: PPUSH
12925: LD_INT 0
12927: PPUSH
12928: CALL_OW 48
// ComHold ( un ) ;
12932: LD_VAR 0 5
12936: PPUSH
12937: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12941: LD_ADDR_EXP 57
12945: PUSH
12946: LD_EXP 57
12950: PPUSH
12951: LD_EXP 57
12955: PUSH
12956: LD_INT 1
12958: PLUS
12959: PPUSH
12960: LD_VAR 0 5
12964: PPUSH
12965: CALL_OW 1
12969: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12970: LD_ADDR_VAR 0 7
12974: PUSH
12975: LD_INT 167
12977: PPUSH
12978: LD_INT 243
12980: PPUSH
12981: CALL_OW 428
12985: PPUSH
12986: CALL_OW 274
12990: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12991: LD_VAR 0 7
12995: PPUSH
12996: LD_INT 1
12998: PPUSH
12999: LD_INT 1000
13001: PPUSH
13002: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
13006: LD_VAR 0 7
13010: PPUSH
13011: LD_INT 2
13013: PPUSH
13014: LD_INT 400
13016: PPUSH
13017: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13021: LD_ADDR_VAR 0 7
13025: PUSH
13026: LD_INT 169
13028: PPUSH
13029: LD_INT 229
13031: PPUSH
13032: CALL_OW 428
13036: ST_TO_ADDR
// for i := 1 to 3 do
13037: LD_ADDR_VAR 0 2
13041: PUSH
13042: DOUBLE
13043: LD_INT 1
13045: DEC
13046: ST_TO_ADDR
13047: LD_INT 3
13049: PUSH
13050: FOR_TO
13051: IFFALSE 13142
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13053: LD_INT 0
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: LD_INT 4
13061: PUSH
13062: LD_INT 5
13064: PUSH
13065: LD_INT 5
13067: PUSH
13068: LD_INT 6
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: PUSH
13077: LD_OWVAR 67
13081: ARRAY
13082: PPUSH
13083: CALL_OW 380
// un := CreateHuman ;
13087: LD_ADDR_VAR 0 5
13091: PUSH
13092: CALL_OW 44
13096: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13097: LD_VAR 0 5
13101: PPUSH
13102: LD_VAR 0 7
13106: PPUSH
13107: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13111: LD_ADDR_EXP 58
13115: PUSH
13116: LD_EXP 58
13120: PPUSH
13121: LD_EXP 58
13125: PUSH
13126: LD_INT 1
13128: PLUS
13129: PPUSH
13130: LD_VAR 0 5
13134: PPUSH
13135: CALL_OW 1
13139: ST_TO_ADDR
// end ;
13140: GO 13050
13142: POP
13143: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13144: LD_ADDR_VAR 0 7
13148: PUSH
13149: LD_INT 165
13151: PUSH
13152: LD_INT 227
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 173
13161: PUSH
13162: LD_INT 231
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: ST_TO_ADDR
// for i := 1 to tmp do
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: DOUBLE
13179: LD_INT 1
13181: DEC
13182: ST_TO_ADDR
13183: LD_VAR 0 7
13187: PUSH
13188: FOR_TO
13189: IFFALSE 13310
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13191: LD_INT 0
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 4
13199: PUSH
13200: LD_INT 5
13202: PUSH
13203: LD_INT 5
13205: PUSH
13206: LD_INT 6
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: PUSH
13215: LD_OWVAR 67
13219: ARRAY
13220: PPUSH
13221: CALL_OW 380
// un := CreateHuman ;
13225: LD_ADDR_VAR 0 5
13229: PUSH
13230: CALL_OW 44
13234: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13235: LD_VAR 0 5
13239: PPUSH
13240: LD_VAR 0 7
13244: PUSH
13245: LD_VAR 0 2
13249: ARRAY
13250: PUSH
13251: LD_INT 1
13253: ARRAY
13254: PPUSH
13255: LD_VAR 0 7
13259: PUSH
13260: LD_VAR 0 2
13264: ARRAY
13265: PUSH
13266: LD_INT 2
13268: ARRAY
13269: PPUSH
13270: CALL_OW 428
13274: PPUSH
13275: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13279: LD_ADDR_EXP 58
13283: PUSH
13284: LD_EXP 58
13288: PPUSH
13289: LD_EXP 58
13293: PUSH
13294: LD_INT 1
13296: PLUS
13297: PPUSH
13298: LD_VAR 0 5
13302: PPUSH
13303: CALL_OW 1
13307: ST_TO_ADDR
// end ;
13308: GO 13188
13310: POP
13311: POP
// for i := 1 to 2 do
13312: LD_ADDR_VAR 0 2
13316: PUSH
13317: DOUBLE
13318: LD_INT 1
13320: DEC
13321: ST_TO_ADDR
13322: LD_INT 2
13324: PUSH
13325: FOR_TO
13326: IFFALSE 13381
// begin InitHc ;
13328: CALL_OW 19
// uc_nation := 0 ;
13332: LD_ADDR_OWVAR 21
13336: PUSH
13337: LD_INT 0
13339: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13340: LD_ADDR_OWVAR 28
13344: PUSH
13345: LD_INT 16
13347: ST_TO_ADDR
// un := CreateHuman ;
13348: LD_ADDR_VAR 0 5
13352: PUSH
13353: CALL_OW 44
13357: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13358: LD_VAR 0 5
13362: PPUSH
13363: LD_INT 166
13365: PPUSH
13366: LD_INT 233
13368: PPUSH
13369: LD_INT 2
13371: PPUSH
13372: LD_INT 0
13374: PPUSH
13375: CALL_OW 50
// end ;
13379: GO 13325
13381: POP
13382: POP
// uc_nation := 3 ;
13383: LD_ADDR_OWVAR 21
13387: PUSH
13388: LD_INT 3
13390: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13391: LD_ADDR_VAR 0 7
13395: PUSH
13396: LD_INT 71
13398: PUSH
13399: LD_INT 52
13401: PUSH
13402: LD_INT 11
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: ST_TO_ADDR
// for i in tmp do
13410: LD_ADDR_VAR 0 2
13414: PUSH
13415: LD_VAR 0 7
13419: PUSH
13420: FOR_IN
13421: IFFALSE 13465
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13423: LD_VAR 0 2
13427: PPUSH
13428: CALL_OW 274
13432: PPUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 3000
13438: PPUSH
13439: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13443: LD_VAR 0 2
13447: PPUSH
13448: CALL_OW 274
13452: PPUSH
13453: LD_INT 2
13455: PPUSH
13456: LD_INT 600
13458: PPUSH
13459: CALL_OW 277
// end ;
13463: GO 13420
13465: POP
13466: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13467: LD_ADDR_VAR 0 7
13471: PUSH
13472: LD_INT 41
13474: PUSH
13475: LD_INT 57
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 38
13484: PUSH
13485: LD_INT 55
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 50
13494: PUSH
13495: LD_INT 73
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 51
13504: PUSH
13505: LD_INT 65
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 82
13514: PUSH
13515: LD_INT 93
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: LD_INT 87
13524: PUSH
13525: LD_INT 100
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 91
13534: PUSH
13535: LD_INT 109
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 84
13544: PUSH
13545: LD_INT 120
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 113
13554: PUSH
13555: LD_INT 153
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 123
13564: PUSH
13565: LD_INT 171
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 125
13574: PUSH
13575: LD_INT 178
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 125
13584: PUSH
13585: LD_INT 188
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 125
13594: PUSH
13595: LD_INT 201
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 33
13604: PUSH
13605: LD_INT 60
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 76
13614: PUSH
13615: LD_INT 95
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 84
13624: PUSH
13625: LD_INT 111
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 112
13634: PUSH
13635: LD_INT 165
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: ST_TO_ADDR
// for i := 1 to tmp do
13661: LD_ADDR_VAR 0 2
13665: PUSH
13666: DOUBLE
13667: LD_INT 1
13669: DEC
13670: ST_TO_ADDR
13671: LD_VAR 0 7
13675: PUSH
13676: FOR_TO
13677: IFFALSE 13924
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13679: LD_ADDR_VAR 0 4
13683: PUSH
13684: LD_VAR 0 7
13688: PUSH
13689: LD_VAR 0 2
13693: ARRAY
13694: PUSH
13695: LD_INT 1
13697: ARRAY
13698: PPUSH
13699: LD_VAR 0 7
13703: PUSH
13704: LD_VAR 0 2
13708: ARRAY
13709: PUSH
13710: LD_INT 2
13712: ARRAY
13713: PPUSH
13714: CALL_OW 428
13718: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13719: LD_VAR 0 4
13723: PPUSH
13724: CALL_OW 266
13728: PUSH
13729: LD_INT 4
13731: PUSH
13732: LD_INT 5
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: IN
13739: IFFALSE 13835
// begin for j := 1 to Difficulty do
13741: LD_ADDR_VAR 0 3
13745: PUSH
13746: DOUBLE
13747: LD_INT 1
13749: DEC
13750: ST_TO_ADDR
13751: LD_OWVAR 67
13755: PUSH
13756: FOR_TO
13757: IFFALSE 13831
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13759: LD_INT 0
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: LD_INT 4
13767: PUSH
13768: LD_INT 5
13770: PUSH
13771: LD_INT 5
13773: PUSH
13774: LD_INT 6
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: PUSH
13783: LD_OWVAR 67
13787: ARRAY
13788: PPUSH
13789: CALL_OW 380
// un := CreateHuman ;
13793: LD_ADDR_VAR 0 5
13797: PUSH
13798: CALL_OW 44
13802: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13803: LD_VAR 0 5
13807: PPUSH
13808: LD_VAR 0 4
13812: PPUSH
13813: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13817: LD_VAR 0 5
13821: PPUSH
13822: LD_INT 9
13824: PPUSH
13825: CALL_OW 336
// end ;
13829: GO 13756
13831: POP
13832: POP
// end else
13833: GO 13893
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13835: LD_INT 0
13837: PPUSH
13838: LD_INT 1
13840: PPUSH
13841: LD_INT 4
13843: PUSH
13844: LD_INT 5
13846: PUSH
13847: LD_INT 5
13849: PUSH
13850: LD_INT 6
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_OWVAR 67
13863: ARRAY
13864: PPUSH
13865: CALL_OW 380
// un := CreateHuman ;
13869: LD_ADDR_VAR 0 5
13873: PUSH
13874: CALL_OW 44
13878: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13879: LD_VAR 0 5
13883: PPUSH
13884: LD_VAR 0 4
13888: PPUSH
13889: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13893: LD_ADDR_EXP 59
13897: PUSH
13898: LD_EXP 59
13902: PPUSH
13903: LD_EXP 59
13907: PUSH
13908: LD_INT 1
13910: PLUS
13911: PPUSH
13912: LD_VAR 0 5
13916: PPUSH
13917: CALL_OW 1
13921: ST_TO_ADDR
// end ;
13922: GO 13676
13924: POP
13925: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13926: LD_ADDR_VAR 0 4
13930: PUSH
13931: LD_INT 10
13933: PPUSH
13934: LD_INT 22
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 30
13946: PUSH
13947: LD_INT 32
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 58
13956: PUSH
13957: EMPTY
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: PPUSH
13965: CALL_OW 70
13969: PUSH
13970: FOR_IN
13971: IFFALSE 14105
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13973: LD_INT 40
13975: PUSH
13976: LD_INT 50
13978: PUSH
13979: LD_INT 75
13981: PUSH
13982: LD_INT 80
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: PUSH
13991: LD_OWVAR 67
13995: ARRAY
13996: PUSH
13997: LD_EXP 7
14001: PUSH
14002: LD_INT 10
14004: MUL
14005: MINUS
14006: PPUSH
14007: CALL_OW 13
14011: NOT
14012: IFFALSE 14016
// continue ;
14014: GO 13970
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14016: LD_INT 0
14018: PPUSH
14019: LD_INT 1
14021: PPUSH
14022: LD_INT 4
14024: PUSH
14025: LD_INT 5
14027: PUSH
14028: LD_INT 5
14030: PUSH
14031: LD_INT 6
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: LD_OWVAR 67
14044: ARRAY
14045: PPUSH
14046: CALL_OW 380
// un := CreateHuman ;
14050: LD_ADDR_VAR 0 5
14054: PUSH
14055: CALL_OW 44
14059: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14060: LD_VAR 0 5
14064: PPUSH
14065: LD_VAR 0 4
14069: PPUSH
14070: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14074: LD_ADDR_EXP 59
14078: PUSH
14079: LD_EXP 59
14083: PPUSH
14084: LD_EXP 59
14088: PUSH
14089: LD_INT 1
14091: PLUS
14092: PPUSH
14093: LD_VAR 0 5
14097: PPUSH
14098: CALL_OW 1
14102: ST_TO_ADDR
// end ;
14103: GO 13970
14105: POP
14106: POP
// for i := 1 to 5 do
14107: LD_ADDR_VAR 0 2
14111: PUSH
14112: DOUBLE
14113: LD_INT 1
14115: DEC
14116: ST_TO_ADDR
14117: LD_INT 5
14119: PUSH
14120: FOR_TO
14121: IFFALSE 14219
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14123: LD_INT 0
14125: PPUSH
14126: LD_INT 2
14128: PPUSH
14129: LD_INT 4
14131: PUSH
14132: LD_INT 5
14134: PUSH
14135: LD_INT 5
14137: PUSH
14138: LD_INT 6
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: LD_OWVAR 67
14151: ARRAY
14152: PPUSH
14153: CALL_OW 380
// un := CreateHuman ;
14157: LD_ADDR_VAR 0 5
14161: PUSH
14162: CALL_OW 44
14166: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14167: LD_VAR 0 5
14171: PPUSH
14172: LD_INT 66
14174: PPUSH
14175: LD_INT 101
14177: PPUSH
14178: LD_INT 3
14180: PPUSH
14181: LD_INT 0
14183: PPUSH
14184: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14188: LD_ADDR_EXP 59
14192: PUSH
14193: LD_EXP 59
14197: PPUSH
14198: LD_EXP 59
14202: PUSH
14203: LD_INT 1
14205: PLUS
14206: PPUSH
14207: LD_VAR 0 5
14211: PPUSH
14212: CALL_OW 1
14216: ST_TO_ADDR
// end ;
14217: GO 14120
14219: POP
14220: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14221: LD_ADDR_VAR 0 7
14225: PUSH
14226: LD_INT 72
14228: PUSH
14229: LD_INT 12
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: ST_TO_ADDR
// for i := 1 to tmp do
14236: LD_ADDR_VAR 0 2
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_VAR 0 7
14250: PUSH
14251: FOR_TO
14252: IFFALSE 14369
// for j := 1 to 6 do
14254: LD_ADDR_VAR 0 3
14258: PUSH
14259: DOUBLE
14260: LD_INT 1
14262: DEC
14263: ST_TO_ADDR
14264: LD_INT 6
14266: PUSH
14267: FOR_TO
14268: IFFALSE 14365
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14270: LD_INT 0
14272: PPUSH
14273: LD_INT 3
14275: PPUSH
14276: LD_INT 4
14278: PUSH
14279: LD_INT 5
14281: PUSH
14282: LD_INT 5
14284: PUSH
14285: LD_INT 6
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: PUSH
14294: LD_OWVAR 67
14298: ARRAY
14299: PPUSH
14300: CALL_OW 380
// un := CreateHuman ;
14304: LD_ADDR_VAR 0 5
14308: PUSH
14309: CALL_OW 44
14313: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14314: LD_VAR 0 5
14318: PPUSH
14319: LD_VAR 0 7
14323: PUSH
14324: LD_VAR 0 2
14328: ARRAY
14329: PPUSH
14330: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14334: LD_ADDR_EXP 59
14338: PUSH
14339: LD_EXP 59
14343: PPUSH
14344: LD_EXP 59
14348: PUSH
14349: LD_INT 1
14351: PLUS
14352: PPUSH
14353: LD_VAR 0 5
14357: PPUSH
14358: CALL_OW 1
14362: ST_TO_ADDR
// end ;
14363: GO 14267
14365: POP
14366: POP
14367: GO 14251
14369: POP
14370: POP
// for i := 1 to 3 do
14371: LD_ADDR_VAR 0 2
14375: PUSH
14376: DOUBLE
14377: LD_INT 1
14379: DEC
14380: ST_TO_ADDR
14381: LD_INT 3
14383: PUSH
14384: FOR_TO
14385: IFFALSE 14474
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14387: LD_INT 0
14389: PPUSH
14390: LD_INT 4
14392: PPUSH
14393: LD_INT 4
14395: PUSH
14396: LD_INT 5
14398: PUSH
14399: LD_INT 5
14401: PUSH
14402: LD_INT 6
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: PUSH
14411: LD_OWVAR 67
14415: ARRAY
14416: PPUSH
14417: CALL_OW 380
// un := CreateHuman ;
14421: LD_ADDR_VAR 0 5
14425: PUSH
14426: CALL_OW 44
14430: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14431: LD_VAR 0 5
14435: PPUSH
14436: LD_INT 17
14438: PPUSH
14439: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14443: LD_ADDR_EXP 59
14447: PUSH
14448: LD_EXP 59
14452: PPUSH
14453: LD_EXP 59
14457: PUSH
14458: LD_INT 1
14460: PLUS
14461: PPUSH
14462: LD_VAR 0 5
14466: PPUSH
14467: CALL_OW 1
14471: ST_TO_ADDR
// end ;
14472: GO 14384
14474: POP
14475: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14476: LD_ADDR_VAR 0 2
14480: PUSH
14481: DOUBLE
14482: LD_INT 1
14484: DEC
14485: ST_TO_ADDR
14486: LD_INT 2
14488: PUSH
14489: LD_INT 3
14491: PUSH
14492: LD_INT 3
14494: PUSH
14495: LD_INT 3
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: PUSH
14504: LD_OWVAR 67
14508: ARRAY
14509: PUSH
14510: FOR_TO
14511: IFFALSE 14631
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14513: LD_INT 22
14515: PPUSH
14516: LD_INT 1
14518: PPUSH
14519: LD_INT 1
14521: PPUSH
14522: LD_INT 52
14524: PPUSH
14525: LD_INT 100
14527: PPUSH
14528: CALL 34396 0 5
// veh := CreateVehicle ;
14532: LD_ADDR_VAR 0 6
14536: PUSH
14537: CALL_OW 45
14541: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14542: LD_INT 0
14544: PPUSH
14545: LD_INT 3
14547: PPUSH
14548: LD_INT 4
14550: PPUSH
14551: CALL_OW 380
// un := CreateHuman ;
14555: LD_ADDR_VAR 0 5
14559: PUSH
14560: CALL_OW 44
14564: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14565: LD_VAR 0 6
14569: PPUSH
14570: LD_INT 107
14572: PPUSH
14573: LD_INT 182
14575: PPUSH
14576: LD_INT 4
14578: PPUSH
14579: LD_INT 0
14581: PPUSH
14582: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14586: LD_VAR 0 5
14590: PPUSH
14591: LD_VAR 0 6
14595: PPUSH
14596: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14600: LD_ADDR_EXP 59
14604: PUSH
14605: LD_EXP 59
14609: PPUSH
14610: LD_EXP 59
14614: PUSH
14615: LD_INT 1
14617: PLUS
14618: PPUSH
14619: LD_VAR 0 5
14623: PPUSH
14624: CALL_OW 1
14628: ST_TO_ADDR
// end ;
14629: GO 14510
14631: POP
14632: POP
// InitHc ;
14633: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: DOUBLE
14643: LD_INT 1
14645: DEC
14646: ST_TO_ADDR
14647: LD_INT 3
14649: PUSH
14650: LD_INT 5
14652: PUSH
14653: LD_INT 6
14655: PUSH
14656: LD_INT 8
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: PUSH
14665: LD_OWVAR 67
14669: ARRAY
14670: PUSH
14671: FOR_TO
14672: IFFALSE 14767
// begin uc_nation := 0 ;
14674: LD_ADDR_OWVAR 21
14678: PUSH
14679: LD_INT 0
14681: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14682: LD_ADDR_OWVAR 28
14686: PUSH
14687: LD_INT 15
14689: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14690: LD_ADDR_OWVAR 31
14694: PUSH
14695: LD_INT 3
14697: PUSH
14698: LD_INT 0
14700: PUSH
14701: LD_INT 0
14703: PUSH
14704: LD_INT 0
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: ST_TO_ADDR
// un := CreateHuman ;
14713: LD_ADDR_VAR 0 5
14717: PUSH
14718: CALL_OW 44
14722: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14723: LD_VAR 0 5
14727: PPUSH
14728: LD_INT 269
14730: PUSH
14731: LD_INT 300
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_VAR 0 2
14742: PUSH
14743: LD_INT 2
14745: MOD
14746: PUSH
14747: LD_INT 1
14749: PLUS
14750: ARRAY
14751: PPUSH
14752: LD_INT 182
14754: PPUSH
14755: LD_INT 4
14757: PPUSH
14758: LD_INT 0
14760: PPUSH
14761: CALL_OW 50
// end ;
14765: GO 14671
14767: POP
14768: POP
// uc_nation := 3 ;
14769: LD_ADDR_OWVAR 21
14773: PUSH
14774: LD_INT 3
14776: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14777: LD_EXP 8
14781: PUSH
14782: LD_INT 10
14784: PUSH
14785: LD_INT 8
14787: PUSH
14788: LD_INT 6
14790: PUSH
14791: LD_INT 5
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: PUSH
14800: LD_OWVAR 67
14804: ARRAY
14805: LESS
14806: IFFALSE 14885
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14808: LD_INT 21
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: LD_INT 1
14816: PPUSH
14817: LD_INT 51
14819: PPUSH
14820: LD_INT 12
14822: PPUSH
14823: CALL 34396 0 5
// veh := CreateVehicle ;
14827: LD_ADDR_VAR 0 6
14831: PUSH
14832: CALL_OW 45
14836: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14837: LD_VAR 0 6
14841: PPUSH
14842: LD_INT 269
14844: PPUSH
14845: LD_INT 66
14847: PPUSH
14848: LD_INT 4
14850: PPUSH
14851: LD_INT 0
14853: PPUSH
14854: CALL 69407 0 5
// SetLives ( veh , 333 ) ;
14858: LD_VAR 0 6
14862: PPUSH
14863: LD_INT 333
14865: PPUSH
14866: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14870: LD_VAR 0 6
14874: PPUSH
14875: LD_INT 2
14877: PPUSH
14878: LD_INT 100
14880: PPUSH
14881: CALL_OW 290
// end ; end ;
14885: LD_VAR 0 1
14889: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14890: LD_EXP 55
14894: PUSH
14895: LD_EXP 55
14899: PPUSH
14900: CALL_OW 255
14904: PUSH
14905: LD_INT 3
14907: EQUAL
14908: AND
14909: IFFALSE 15072
14911: GO 14913
14913: DISABLE
14914: LD_INT 0
14916: PPUSH
// begin enable ;
14917: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14918: LD_INT 81
14920: PUSH
14921: LD_INT 3
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 91
14930: PUSH
14931: LD_EXP 55
14935: PUSH
14936: LD_INT 15
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PPUSH
14948: CALL_OW 69
14952: IFFALSE 15032
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14954: LD_EXP 55
14958: PPUSH
14959: CALL_OW 311
14963: NOT
14964: IFFALSE 15030
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14966: LD_ADDR_VAR 0 1
14970: PUSH
14971: LD_INT 22
14973: PUSH
14974: LD_INT 3
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 21
14983: PUSH
14984: LD_INT 1
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PPUSH
14995: CALL_OW 69
14999: PPUSH
15000: LD_EXP 55
15004: PPUSH
15005: CALL_OW 74
15009: ST_TO_ADDR
// if driver then
15010: LD_VAR 0 1
15014: IFFALSE 15030
// ComEnterUnit ( driver , ruBlockadeTank ) ;
15016: LD_VAR 0 1
15020: PPUSH
15021: LD_EXP 55
15025: PPUSH
15026: CALL_OW 120
// end ; exit ;
15030: GO 15072
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15032: LD_EXP 55
15036: PPUSH
15037: CALL_OW 256
15041: PUSH
15042: LD_INT 1000
15044: LESS
15045: PUSH
15046: LD_EXP 55
15050: PPUSH
15051: CALL_OW 311
15055: AND
15056: IFFALSE 15072
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15058: LD_EXP 55
15062: PPUSH
15063: CALL_OW 311
15067: PPUSH
15068: CALL 68967 0 1
// end ;
15072: PPOPN 1
15074: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15075: LD_EXP 57
15079: PPUSH
15080: LD_INT 3
15082: PUSH
15083: LD_INT 24
15085: PUSH
15086: LD_INT 1000
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 72
15101: PUSH
15102: LD_EXP 57
15106: PPUSH
15107: LD_INT 25
15109: PUSH
15110: LD_INT 4
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: LD_INT 50
15119: PUSH
15120: EMPTY
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 72
15131: AND
15132: IFFALSE 15320
15134: GO 15136
15136: DISABLE
15137: LD_INT 0
15139: PPUSH
15140: PPUSH
15141: PPUSH
// begin enable ;
15142: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15143: LD_ADDR_VAR 0 3
15147: PUSH
15148: LD_EXP 57
15152: PPUSH
15153: LD_INT 3
15155: PUSH
15156: LD_INT 24
15158: PUSH
15159: LD_INT 1000
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PPUSH
15170: CALL_OW 72
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: CALL 69207 0 2
15182: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15183: LD_ADDR_VAR 0 2
15187: PUSH
15188: LD_EXP 57
15192: PPUSH
15193: LD_INT 25
15195: PUSH
15196: LD_INT 4
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 50
15205: PUSH
15206: EMPTY
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PPUSH
15213: CALL_OW 72
15217: PUSH
15218: LD_INT 1
15220: ARRAY
15221: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15222: LD_VAR 0 2
15226: PPUSH
15227: LD_VAR 0 3
15231: PUSH
15232: LD_INT 1
15234: ARRAY
15235: PPUSH
15236: CALL 64548 0 2
15240: NOT
15241: IFFALSE 15320
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15243: LD_VAR 0 3
15247: PUSH
15248: LD_INT 1
15250: ARRAY
15251: PPUSH
15252: LD_INT 9
15254: PPUSH
15255: CALL_OW 308
15259: NOT
15260: IFFALSE 15278
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15262: LD_VAR 0 3
15266: PUSH
15267: LD_INT 1
15269: ARRAY
15270: PPUSH
15271: LD_INT 9
15273: PPUSH
15274: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15278: LD_VAR 0 2
15282: PPUSH
15283: LD_VAR 0 3
15287: PUSH
15288: LD_INT 1
15290: ARRAY
15291: PPUSH
15292: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15296: LD_VAR 0 2
15300: PPUSH
15301: LD_INT 179
15303: PPUSH
15304: LD_INT 113
15306: PPUSH
15307: CALL_OW 171
// AddComHold ( sci ) ;
15311: LD_VAR 0 2
15315: PPUSH
15316: CALL_OW 200
// end ; end ;
15320: PPOPN 3
15322: END
// every 0 0$1 trigger not IsOk ( Morozov ) do var i , tmp ;
15323: LD_EXP 53
15327: PPUSH
15328: CALL_OW 302
15332: NOT
15333: IFFALSE 15449
15335: GO 15337
15337: DISABLE
15338: LD_INT 0
15340: PPUSH
15341: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15342: LD_ADDR_VAR 0 2
15346: PUSH
15347: LD_EXP 59
15351: PPUSH
15352: LD_INT 25
15354: PUSH
15355: LD_INT 1
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 50
15364: PUSH
15365: EMPTY
15366: LIST
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 72
15376: ST_TO_ADDR
// if not tmp then
15377: LD_VAR 0 2
15381: NOT
15382: IFFALSE 15386
// exit ;
15384: GO 15449
// for i in tmp do
15386: LD_ADDR_VAR 0 1
15390: PUSH
15391: LD_VAR 0 2
15395: PUSH
15396: FOR_IN
15397: IFFALSE 15447
// begin if Prob ( 50 ) then
15399: LD_INT 50
15401: PPUSH
15402: CALL_OW 13
15406: IFFALSE 15410
// continue ;
15408: GO 15396
// if IsInUnit ( i ) then
15410: LD_VAR 0 1
15414: PPUSH
15415: CALL_OW 310
15419: IFFALSE 15430
// ComExitBuilding ( i ) ;
15421: LD_VAR 0 1
15425: PPUSH
15426: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15430: LD_VAR 0 1
15434: PPUSH
15435: LD_INT 84
15437: PPUSH
15438: LD_INT 133
15440: PPUSH
15441: CALL_OW 174
// end ;
15445: GO 15396
15447: POP
15448: POP
// end ;
15449: PPOPN 2
15451: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15452: LD_EXP 14
15456: IFFALSE 15637
15458: GO 15460
15460: DISABLE
15461: LD_INT 0
15463: PPUSH
15464: PPUSH
15465: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: LD_INT 72
15473: PUSH
15474: LD_INT 12
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: LD_INT 44
15488: PUSH
15489: LD_INT 43
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 45
15498: PUSH
15499: LD_INT 44
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 45
15508: PUSH
15509: LD_INT 46
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 45
15518: PUSH
15519: LD_INT 46
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: LD_OWVAR 67
15536: ARRAY
15537: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: DOUBLE
15544: LD_INT 1
15546: DEC
15547: ST_TO_ADDR
15548: LD_INT 1
15550: PUSH
15551: LD_INT 2
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: LD_INT 3
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: PUSH
15566: LD_OWVAR 67
15570: ARRAY
15571: PUSH
15572: FOR_TO
15573: IFFALSE 15635
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15575: LD_VAR 0 2
15579: PPUSH
15580: LD_INT 22
15582: PUSH
15583: LD_INT 23
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_VAR 0 1
15594: PUSH
15595: LD_INT 2
15597: MOD
15598: PUSH
15599: LD_INT 1
15601: PLUS
15602: ARRAY
15603: PPUSH
15604: LD_INT 1
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_VAR 0 1
15619: PUSH
15620: LD_INT 2
15622: MOD
15623: PUSH
15624: LD_INT 1
15626: PLUS
15627: ARRAY
15628: PPUSH
15629: CALL_OW 185
15633: GO 15572
15635: POP
15636: POP
// end ;
15637: PPOPN 3
15639: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15640: LD_EXP 11
15644: IFFALSE 16793
15646: GO 15648
15648: DISABLE
15649: LD_INT 0
15651: PPUSH
15652: PPUSH
15653: PPUSH
15654: PPUSH
15655: PPUSH
15656: PPUSH
// begin enable ;
15657: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15658: LD_ADDR_VAR 0 6
15662: PUSH
15663: LD_INT 10
15665: PPUSH
15666: LD_INT 81
15668: PUSH
15669: LD_INT 3
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PPUSH
15676: CALL_OW 70
15680: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15681: LD_EXP 60
15685: IFFALSE 15951
// begin for i in ruSpecialVehicleGroup do
15687: LD_ADDR_VAR 0 1
15691: PUSH
15692: LD_EXP 60
15696: PUSH
15697: FOR_IN
15698: IFFALSE 15949
// begin if enemyInBase then
15700: LD_VAR 0 6
15704: IFFALSE 15947
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15706: LD_VAR 0 1
15710: PPUSH
15711: CALL_OW 256
15715: PUSH
15716: LD_INT 500
15718: GREATER
15719: PUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 110
15729: PUSH
15730: LD_INT 0
15732: EQUAL
15733: AND
15734: IFFALSE 15760
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15736: LD_VAR 0 1
15740: PPUSH
15741: LD_VAR 0 6
15745: PPUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: CALL_OW 74
15755: PPUSH
15756: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 256
15769: PUSH
15770: LD_INT 500
15772: LESSEQUAL
15773: PUSH
15774: LD_VAR 0 1
15778: PPUSH
15779: CALL_OW 110
15783: PUSH
15784: LD_INT 0
15786: EQUAL
15787: AND
15788: IFFALSE 15817
// begin SetTag ( i , 1 ) ;
15790: LD_VAR 0 1
15794: PPUSH
15795: LD_INT 1
15797: PPUSH
15798: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15802: LD_VAR 0 1
15806: PPUSH
15807: LD_INT 83
15809: PPUSH
15810: LD_INT 134
15812: PPUSH
15813: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 256
15826: PUSH
15827: LD_INT 1000
15829: LESS
15830: PUSH
15831: LD_VAR 0 1
15835: PPUSH
15836: CALL_OW 110
15840: PUSH
15841: LD_INT 1
15843: EQUAL
15844: AND
15845: PUSH
15846: LD_VAR 0 1
15850: PPUSH
15851: LD_INT 83
15853: PPUSH
15854: LD_INT 134
15856: PPUSH
15857: CALL_OW 297
15861: PUSH
15862: LD_INT 6
15864: LESS
15865: AND
15866: IFFALSE 15894
// begin SetFuel ( i , 100 ) ;
15868: LD_VAR 0 1
15872: PPUSH
15873: LD_INT 100
15875: PPUSH
15876: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15880: LD_VAR 0 1
15884: PPUSH
15885: CALL_OW 310
15889: PPUSH
15890: CALL 69087 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 256
15903: PUSH
15904: LD_INT 1000
15906: EQUAL
15907: PUSH
15908: LD_VAR 0 1
15912: PPUSH
15913: CALL_OW 110
15917: PUSH
15918: LD_INT 1
15920: EQUAL
15921: AND
15922: PUSH
15923: LD_VAR 0 1
15927: PPUSH
15928: CALL_OW 311
15932: AND
15933: IFFALSE 15947
// SetTag ( i , 0 ) ;
15935: LD_VAR 0 1
15939: PPUSH
15940: LD_INT 0
15942: PPUSH
15943: CALL_OW 109
// end ; end ;
15947: GO 15697
15949: POP
15950: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15951: LD_ADDR_VAR 0 5
15955: PUSH
15956: LD_EXP 59
15960: PPUSH
15961: LD_INT 25
15963: PUSH
15964: LD_INT 4
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 72
15975: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15976: LD_ADDR_VAR 0 4
15980: PUSH
15981: LD_EXP 59
15985: PPUSH
15986: LD_INT 92
15988: PUSH
15989: LD_INT 92
15991: PUSH
15992: LD_INT 155
15994: PUSH
15995: LD_INT 12
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 3
16006: PUSH
16007: LD_INT 24
16009: PUSH
16010: LD_INT 1000
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PPUSH
16025: CALL_OW 72
16029: ST_TO_ADDR
// if sci then
16030: LD_VAR 0 5
16034: IFFALSE 16167
// begin if hurt then
16036: LD_VAR 0 4
16040: IFFALSE 16113
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16042: LD_VAR 0 5
16046: PPUSH
16047: LD_INT 3
16049: PUSH
16050: LD_INT 54
16052: PUSH
16053: EMPTY
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PPUSH
16060: CALL_OW 72
16064: IFFALSE 16093
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16066: LD_VAR 0 5
16070: PPUSH
16071: LD_INT 3
16073: PUSH
16074: LD_INT 54
16076: PUSH
16077: EMPTY
16078: LIST
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PPUSH
16084: CALL_OW 72
16088: PPUSH
16089: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16093: LD_VAR 0 5
16097: PPUSH
16098: LD_VAR 0 4
16102: PUSH
16103: LD_INT 1
16105: ARRAY
16106: PPUSH
16107: CALL_OW 188
// end else
16111: GO 16167
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16113: LD_VAR 0 5
16117: PPUSH
16118: LD_INT 3
16120: PUSH
16121: LD_INT 54
16123: PUSH
16124: EMPTY
16125: LIST
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PPUSH
16131: CALL_OW 72
16135: IFFALSE 16167
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16137: LD_VAR 0 5
16141: PPUSH
16142: LD_INT 3
16144: PUSH
16145: LD_INT 54
16147: PUSH
16148: EMPTY
16149: LIST
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PPUSH
16155: CALL_OW 72
16159: PPUSH
16160: LD_INT 17
16162: PPUSH
16163: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16167: LD_ADDR_VAR 0 3
16171: PUSH
16172: LD_INT 10
16174: PPUSH
16175: LD_INT 21
16177: PUSH
16178: LD_INT 3
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 3
16187: PUSH
16188: LD_INT 24
16190: PUSH
16191: LD_INT 1000
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PPUSH
16206: CALL_OW 70
16210: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16211: LD_ADDR_VAR 0 2
16215: PUSH
16216: LD_EXP 59
16220: PPUSH
16221: LD_INT 25
16223: PUSH
16224: LD_INT 2
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 72
16235: PUSH
16236: LD_INT 22
16238: PUSH
16239: LD_INT 3
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 34
16248: PUSH
16249: LD_INT 52
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PPUSH
16260: CALL_OW 69
16264: UNION
16265: ST_TO_ADDR
// if not tmp then
16266: LD_VAR 0 2
16270: NOT
16271: IFFALSE 16275
// exit ;
16273: GO 16793
// for i in tmp do
16275: LD_ADDR_VAR 0 1
16279: PUSH
16280: LD_VAR 0 2
16284: PUSH
16285: FOR_IN
16286: IFFALSE 16791
// begin if GetClass ( i ) = 2 then
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 257
16297: PUSH
16298: LD_INT 2
16300: EQUAL
16301: IFFALSE 16524
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16303: LD_VAR 0 1
16307: PPUSH
16308: CALL_OW 256
16312: PUSH
16313: LD_INT 1000
16315: EQUAL
16316: PUSH
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 110
16326: PUSH
16327: LD_INT 1
16329: EQUAL
16330: AND
16331: IFFALSE 16345
// SetTag ( i , 0 ) ;
16333: LD_VAR 0 1
16337: PPUSH
16338: LD_INT 0
16340: PPUSH
16341: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 256
16354: PUSH
16355: LD_INT 500
16357: LESSEQUAL
16358: PUSH
16359: LD_VAR 0 1
16363: PPUSH
16364: CALL_OW 110
16368: PUSH
16369: LD_INT 0
16371: EQUAL
16372: AND
16373: IFFALSE 16402
// begin SetTag ( i , 1 ) ;
16375: LD_VAR 0 1
16379: PPUSH
16380: LD_INT 1
16382: PPUSH
16383: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16387: LD_VAR 0 1
16391: PPUSH
16392: LD_INT 92
16394: PPUSH
16395: LD_INT 155
16397: PPUSH
16398: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16402: LD_VAR 0 3
16406: PUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 256
16416: PUSH
16417: LD_INT 500
16419: GREATER
16420: AND
16421: PUSH
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 110
16431: PUSH
16432: LD_INT 0
16434: EQUAL
16435: AND
16436: PUSH
16437: LD_VAR 0 1
16441: PPUSH
16442: CALL_OW 314
16446: NOT
16447: AND
16448: IFFALSE 16522
// begin if b then
16450: LD_VAR 0 3
16454: IFFALSE 16486
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16456: LD_VAR 0 1
16460: PPUSH
16461: LD_VAR 0 3
16465: PUSH
16466: LD_INT 1
16468: PPUSH
16469: LD_VAR 0 3
16473: PPUSH
16474: CALL_OW 12
16478: ARRAY
16479: PPUSH
16480: CALL_OW 130
16484: GO 16522
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16486: LD_VAR 0 1
16490: PPUSH
16491: LD_INT 94
16493: PPUSH
16494: LD_INT 165
16496: PPUSH
16497: CALL_OW 297
16501: PUSH
16502: LD_INT 8
16504: GREATER
16505: IFFALSE 16522
// ComMoveXY ( i , 94 , 165 ) ;
16507: LD_VAR 0 1
16511: PPUSH
16512: LD_INT 94
16514: PPUSH
16515: LD_INT 165
16517: PPUSH
16518: CALL_OW 111
// end ; end else
16522: GO 16789
// if GetWeapon ( i ) = ru_crane then
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 264
16533: PUSH
16534: LD_INT 52
16536: EQUAL
16537: IFFALSE 16789
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 256
16548: PUSH
16549: LD_INT 1000
16551: EQUAL
16552: PUSH
16553: LD_VAR 0 1
16557: PPUSH
16558: CALL_OW 110
16562: PUSH
16563: LD_INT 1
16565: EQUAL
16566: AND
16567: IFFALSE 16593
// begin SetTag ( i , 0 ) ;
16569: LD_VAR 0 1
16573: PPUSH
16574: LD_INT 0
16576: PPUSH
16577: CALL_OW 109
// SetFuel ( i , 100 ) ;
16581: LD_VAR 0 1
16585: PPUSH
16586: LD_INT 100
16588: PPUSH
16589: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 256
16602: PUSH
16603: LD_INT 500
16605: LESSEQUAL
16606: PUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 110
16616: PUSH
16617: LD_INT 0
16619: EQUAL
16620: AND
16621: IFFALSE 16664
// begin SetTag ( i , 1 ) ;
16623: LD_VAR 0 1
16627: PPUSH
16628: LD_INT 1
16630: PPUSH
16631: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16635: LD_VAR 0 1
16639: PPUSH
16640: LD_INT 83
16642: PPUSH
16643: LD_INT 135
16645: PPUSH
16646: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16650: LD_VAR 0 1
16654: PPUSH
16655: CALL_OW 310
16659: PPUSH
16660: CALL 69087 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 256
16673: PUSH
16674: LD_INT 500
16676: GREATER
16677: PUSH
16678: LD_VAR 0 1
16682: PPUSH
16683: CALL_OW 110
16687: PUSH
16688: LD_INT 0
16690: EQUAL
16691: AND
16692: PUSH
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 311
16702: AND
16703: PUSH
16704: LD_VAR 0 1
16708: PPUSH
16709: CALL_OW 314
16713: NOT
16714: AND
16715: IFFALSE 16789
// begin if b then
16717: LD_VAR 0 3
16721: IFFALSE 16753
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16723: LD_VAR 0 1
16727: PPUSH
16728: LD_VAR 0 3
16732: PUSH
16733: LD_INT 1
16735: PPUSH
16736: LD_VAR 0 3
16740: PPUSH
16741: CALL_OW 12
16745: ARRAY
16746: PPUSH
16747: CALL_OW 130
16751: GO 16789
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16753: LD_VAR 0 1
16757: PPUSH
16758: LD_INT 94
16760: PPUSH
16761: LD_INT 165
16763: PPUSH
16764: CALL_OW 297
16768: PUSH
16769: LD_INT 8
16771: GREATER
16772: IFFALSE 16789
// ComMoveXY ( i , 94 , 165 ) ;
16774: LD_VAR 0 1
16778: PPUSH
16779: LD_INT 94
16781: PPUSH
16782: LD_INT 165
16784: PPUSH
16785: CALL_OW 111
// end ; end ; end ;
16789: GO 16285
16791: POP
16792: POP
// end ;
16793: PPOPN 6
16795: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16796: LD_EXP 23
16800: NOT
16801: PUSH
16802: LD_EXP 27
16806: NOT
16807: AND
16808: IFFALSE 17723
16810: GO 16812
16812: DISABLE
16813: LD_INT 0
16815: PPUSH
16816: PPUSH
16817: PPUSH
16818: PPUSH
16819: PPUSH
// begin enable ;
16820: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16821: LD_INT 35
16823: PUSH
16824: LD_INT 45
16826: PUSH
16827: LD_INT 55
16829: PUSH
16830: LD_INT 60
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: PUSH
16839: LD_OWVAR 67
16843: ARRAY
16844: PPUSH
16845: CALL_OW 13
16849: IFFALSE 16865
// waveStrength := waveStrength + 1 ;
16851: LD_ADDR_EXP 62
16855: PUSH
16856: LD_EXP 62
16860: PUSH
16861: LD_INT 1
16863: PLUS
16864: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16865: LD_EXP 62
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: LD_INT 3
16875: PUSH
16876: LD_INT 4
16878: PUSH
16879: LD_INT 4
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: PUSH
16888: LD_OWVAR 67
16892: ARRAY
16893: GREATER
16894: IFFALSE 16926
// begin waveStrength := waveStrength + 2 ;
16896: LD_ADDR_EXP 62
16900: PUSH
16901: LD_EXP 62
16905: PUSH
16906: LD_INT 2
16908: PLUS
16909: ST_TO_ADDR
// disableAttackOnHeike := true ;
16910: LD_ADDR_EXP 27
16914: PUSH
16915: LD_INT 1
16917: ST_TO_ADDR
// disable ;
16918: DISABLE
// wait ( 3 3$00 ) ;
16919: LD_INT 6300
16921: PPUSH
16922: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16926: LD_ADDR_VAR 0 1
16930: PUSH
16931: DOUBLE
16932: LD_INT 1
16934: DEC
16935: ST_TO_ADDR
16936: LD_INT 2
16938: PUSH
16939: LD_INT 2
16941: PUSH
16942: LD_INT 3
16944: PUSH
16945: LD_INT 4
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: PUSH
16954: LD_OWVAR 67
16958: ARRAY
16959: PUSH
16960: FOR_TO
16961: IFFALSE 17122
// begin InitHc ;
16963: CALL_OW 19
// InitVc ;
16967: CALL_OW 20
// uc_side := 3 ;
16971: LD_ADDR_OWVAR 20
16975: PUSH
16976: LD_INT 3
16978: ST_TO_ADDR
// uc_nation := 3 ;
16979: LD_ADDR_OWVAR 21
16983: PUSH
16984: LD_INT 3
16986: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16987: LD_INT 0
16989: PPUSH
16990: LD_INT 1
16992: PPUSH
16993: LD_OWVAR 67
16997: PUSH
16998: LD_INT 2
17000: PLUS
17001: PPUSH
17002: CALL_OW 380
// un := CreateHuman ;
17006: LD_ADDR_VAR 0 2
17010: PUSH
17011: CALL_OW 44
17015: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
17016: LD_VAR 0 2
17020: PPUSH
17021: LD_INT 160
17023: PPUSH
17024: LD_INT 3
17026: PPUSH
17027: LD_INT 2
17029: PPUSH
17030: LD_INT 0
17032: PPUSH
17033: CALL 69407 0 5
// SetClass ( un , class_bazooker ) ;
17037: LD_VAR 0 2
17041: PPUSH
17042: LD_INT 9
17044: PPUSH
17045: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17049: LD_ADDR_EXP 61
17053: PUSH
17054: LD_EXP 61
17058: PPUSH
17059: LD_EXP 61
17063: PUSH
17064: LD_INT 1
17066: PLUS
17067: PPUSH
17068: LD_VAR 0 2
17072: PPUSH
17073: CALL_OW 1
17077: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17078: LD_VAR 0 2
17082: PPUSH
17083: LD_INT 177
17085: PPUSH
17086: LD_INT 17
17088: PPUSH
17089: CALL_OW 111
// wait ( 0 0$2 ) ;
17093: LD_INT 70
17095: PPUSH
17096: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17100: LD_ADDR_VAR 0 5
17104: PUSH
17105: LD_VAR 0 5
17109: PPUSH
17110: LD_VAR 0 2
17114: PPUSH
17115: CALL 67267 0 2
17119: ST_TO_ADDR
// end ;
17120: GO 16960
17122: POP
17123: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17124: LD_VAR 0 5
17128: PPUSH
17129: LD_INT 196
17131: PPUSH
17132: LD_INT 53
17134: PPUSH
17135: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17139: LD_VAR 0 5
17143: PPUSH
17144: LD_INT 199
17146: PPUSH
17147: LD_INT 62
17149: PPUSH
17150: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17154: LD_VAR 0 5
17158: PPUSH
17159: LD_INT 205
17161: PPUSH
17162: LD_INT 75
17164: PPUSH
17165: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17169: LD_ADDR_VAR 0 1
17173: PUSH
17174: DOUBLE
17175: LD_INT 1
17177: DEC
17178: ST_TO_ADDR
17179: LD_INT 2
17181: PUSH
17182: LD_INT 3
17184: PUSH
17185: LD_INT 3
17187: PUSH
17188: LD_INT 4
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: PUSH
17197: LD_OWVAR 67
17201: ARRAY
17202: PUSH
17203: LD_EXP 62
17207: PLUS
17208: PUSH
17209: FOR_TO
17210: IFFALSE 17519
// begin InitHc ;
17212: CALL_OW 19
// InitVc ;
17216: CALL_OW 20
// uc_side := 3 ;
17220: LD_ADDR_OWVAR 20
17224: PUSH
17225: LD_INT 3
17227: ST_TO_ADDR
// uc_nation := 3 ;
17228: LD_ADDR_OWVAR 21
17232: PUSH
17233: LD_INT 3
17235: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17236: LD_INT 22
17238: PUSH
17239: LD_INT 23
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 1
17248: PPUSH
17249: LD_INT 2
17251: PPUSH
17252: CALL_OW 12
17256: ARRAY
17257: PPUSH
17258: LD_INT 1
17260: PPUSH
17261: LD_INT 1
17263: PPUSH
17264: LD_INT 44
17266: PUSH
17267: LD_INT 45
17269: PUSH
17270: LD_INT 43
17272: PUSH
17273: LD_INT 42
17275: PUSH
17276: LD_INT 44
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 1
17288: PPUSH
17289: LD_INT 5
17291: PPUSH
17292: CALL_OW 12
17296: ARRAY
17297: PPUSH
17298: LD_INT 99
17300: PPUSH
17301: CALL 34396 0 5
// veh := CreateVehicle ;
17305: LD_ADDR_VAR 0 3
17309: PUSH
17310: CALL_OW 45
17314: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17315: LD_VAR 0 3
17319: PPUSH
17320: LD_INT 160
17322: PPUSH
17323: LD_INT 3
17325: PPUSH
17326: LD_INT 2
17328: PPUSH
17329: LD_INT 0
17331: PPUSH
17332: CALL 69407 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17336: LD_ADDR_EXP 61
17340: PUSH
17341: LD_EXP 61
17345: PPUSH
17346: LD_EXP 61
17350: PUSH
17351: LD_INT 1
17353: PLUS
17354: PPUSH
17355: LD_VAR 0 3
17359: PPUSH
17360: CALL_OW 1
17364: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17365: LD_INT 0
17367: PPUSH
17368: LD_INT 3
17370: PPUSH
17371: LD_OWVAR 67
17375: PUSH
17376: LD_INT 2
17378: PLUS
17379: PPUSH
17380: CALL_OW 380
// un := CreateHuman ;
17384: LD_ADDR_VAR 0 2
17388: PUSH
17389: CALL_OW 44
17393: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17394: LD_VAR 0 2
17398: PPUSH
17399: LD_VAR 0 3
17403: PPUSH
17404: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17408: LD_ADDR_EXP 61
17412: PUSH
17413: LD_EXP 61
17417: PPUSH
17418: LD_EXP 61
17422: PUSH
17423: LD_INT 1
17425: PLUS
17426: PPUSH
17427: LD_VAR 0 2
17431: PPUSH
17432: CALL_OW 1
17436: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17437: LD_VAR 0 2
17441: PPUSH
17442: LD_INT 177
17444: PPUSH
17445: LD_INT 17
17447: PPUSH
17448: CALL_OW 111
// wait ( 0 0$2 ) ;
17452: LD_INT 70
17454: PPUSH
17455: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17459: LD_ADDR_VAR 0 4
17463: PUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_VAR 0 4
17473: PUSH
17474: LD_INT 1
17476: PLUS
17477: PPUSH
17478: LD_VAR 0 3
17482: PPUSH
17483: CALL_OW 1
17487: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17488: LD_ADDR_VAR 0 4
17492: PUSH
17493: LD_VAR 0 4
17497: PPUSH
17498: LD_VAR 0 4
17502: PUSH
17503: LD_INT 1
17505: PLUS
17506: PPUSH
17507: LD_VAR 0 2
17511: PPUSH
17512: CALL_OW 1
17516: ST_TO_ADDR
// end ;
17517: GO 17209
17519: POP
17520: POP
// for i in tmp do
17521: LD_ADDR_VAR 0 1
17525: PUSH
17526: LD_VAR 0 4
17530: PUSH
17531: FOR_IN
17532: IFFALSE 17613
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17534: LD_VAR 0 1
17538: PPUSH
17539: LD_INT 206
17541: PUSH
17542: LD_INT 37
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 239
17551: PUSH
17552: LD_INT 53
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 260
17561: PUSH
17562: LD_INT 67
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 263
17571: PUSH
17572: LD_INT 79
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 257
17581: PUSH
17582: LD_INT 105
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 227
17591: PUSH
17592: LD_INT 97
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: PPUSH
17607: CALL 69877 0 2
17611: GO 17531
17613: POP
17614: POP
// repeat wait ( 0 0$2 ) ;
17615: LD_INT 70
17617: PPUSH
17618: CALL_OW 67
// for i in tmp do
17622: LD_ADDR_VAR 0 1
17626: PUSH
17627: LD_VAR 0 4
17631: PUSH
17632: FOR_IN
17633: IFFALSE 17700
// if IsDead ( i ) then
17635: LD_VAR 0 1
17639: PPUSH
17640: CALL_OW 301
17644: IFFALSE 17664
// tmp := tmp diff i else
17646: LD_ADDR_VAR 0 4
17650: PUSH
17651: LD_VAR 0 4
17655: PUSH
17656: LD_VAR 0 1
17660: DIFF
17661: ST_TO_ADDR
17662: GO 17698
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17664: LD_VAR 0 1
17668: PPUSH
17669: LD_INT 81
17671: PUSH
17672: LD_INT 3
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PPUSH
17679: CALL_OW 69
17683: PPUSH
17684: LD_VAR 0 1
17688: PPUSH
17689: CALL_OW 74
17693: PPUSH
17694: CALL_OW 115
17698: GO 17632
17700: POP
17701: POP
// until not tmp ;
17702: LD_VAR 0 4
17706: NOT
17707: IFFALSE 17615
// if firstAttack then
17709: LD_EXP 28
17713: IFFALSE 17723
// firstAttack := false ;
17715: LD_ADDR_EXP 28
17719: PUSH
17720: LD_INT 0
17722: ST_TO_ADDR
// end ;
17723: PPOPN 5
17725: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17726: LD_EXP 23
17730: NOT
17731: PUSH
17732: LD_EXP 32
17736: NOT
17737: AND
17738: PUSH
17739: LD_EXP 3
17743: AND
17744: PUSH
17745: LD_EXP 27
17749: NOT
17750: AND
17751: IFFALSE 18668
17753: GO 17755
17755: DISABLE
17756: LD_INT 0
17758: PPUSH
17759: PPUSH
17760: PPUSH
17761: PPUSH
// begin enable ;
17762: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17763: LD_ADDR_VAR 0 1
17767: PUSH
17768: DOUBLE
17769: LD_INT 1
17771: DEC
17772: ST_TO_ADDR
17773: LD_INT 1
17775: PUSH
17776: LD_INT 2
17778: PUSH
17779: LD_INT 2
17781: PUSH
17782: LD_INT 3
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: PUSH
17791: LD_OWVAR 67
17795: ARRAY
17796: PUSH
17797: FOR_TO
17798: IFFALSE 18099
// begin InitHc ;
17800: CALL_OW 19
// InitVc ;
17804: CALL_OW 20
// uc_side := 3 ;
17808: LD_ADDR_OWVAR 20
17812: PUSH
17813: LD_INT 3
17815: ST_TO_ADDR
// uc_nation := 3 ;
17816: LD_ADDR_OWVAR 21
17820: PUSH
17821: LD_INT 3
17823: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17824: LD_INT 22
17826: PUSH
17827: LD_INT 23
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 1
17836: PPUSH
17837: LD_INT 2
17839: PPUSH
17840: CALL_OW 12
17844: ARRAY
17845: PPUSH
17846: LD_INT 1
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: LD_INT 44
17854: PUSH
17855: LD_INT 43
17857: PUSH
17858: LD_INT 42
17860: PUSH
17861: LD_INT 44
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 1
17872: PPUSH
17873: LD_INT 4
17875: PPUSH
17876: CALL_OW 12
17880: ARRAY
17881: PPUSH
17882: LD_INT 99
17884: PPUSH
17885: CALL 34396 0 5
// veh := CreateVehicle ;
17889: LD_ADDR_VAR 0 3
17893: PUSH
17894: CALL_OW 45
17898: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17899: LD_VAR 0 3
17903: PPUSH
17904: LD_INT 5
17906: PPUSH
17907: LD_INT 3
17909: PPUSH
17910: LD_INT 2
17912: PPUSH
17913: LD_INT 0
17915: PPUSH
17916: CALL 69407 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17920: LD_ADDR_EXP 61
17924: PUSH
17925: LD_EXP 61
17929: PPUSH
17930: LD_EXP 61
17934: PUSH
17935: LD_INT 1
17937: PLUS
17938: PPUSH
17939: LD_VAR 0 3
17943: PPUSH
17944: CALL_OW 1
17948: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17949: LD_INT 0
17951: PPUSH
17952: LD_INT 3
17954: PPUSH
17955: LD_OWVAR 67
17959: PPUSH
17960: CALL_OW 380
// un := CreateHuman ;
17964: LD_ADDR_VAR 0 2
17968: PUSH
17969: CALL_OW 44
17973: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17974: LD_VAR 0 2
17978: PPUSH
17979: LD_VAR 0 3
17983: PPUSH
17984: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17988: LD_ADDR_EXP 61
17992: PUSH
17993: LD_EXP 61
17997: PPUSH
17998: LD_EXP 61
18002: PUSH
18003: LD_INT 1
18005: PLUS
18006: PPUSH
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 1
18016: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
18017: LD_VAR 0 2
18021: PPUSH
18022: LD_INT 23
18024: PPUSH
18025: LD_INT 7
18027: PPUSH
18028: CALL_OW 111
// wait ( 0 0$2 ) ;
18032: LD_INT 70
18034: PPUSH
18035: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18039: LD_ADDR_VAR 0 4
18043: PUSH
18044: LD_VAR 0 4
18048: PPUSH
18049: LD_VAR 0 4
18053: PUSH
18054: LD_INT 1
18056: PLUS
18057: PPUSH
18058: LD_VAR 0 3
18062: PPUSH
18063: CALL_OW 1
18067: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18068: LD_ADDR_VAR 0 4
18072: PUSH
18073: LD_VAR 0 4
18077: PPUSH
18078: LD_VAR 0 4
18082: PUSH
18083: LD_INT 1
18085: PLUS
18086: PPUSH
18087: LD_VAR 0 2
18091: PPUSH
18092: CALL_OW 1
18096: ST_TO_ADDR
// end ;
18097: GO 17797
18099: POP
18100: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18101: LD_ADDR_VAR 0 1
18105: PUSH
18106: DOUBLE
18107: LD_INT 1
18109: DEC
18110: ST_TO_ADDR
18111: LD_INT 2
18113: PUSH
18114: LD_INT 3
18116: PUSH
18117: LD_INT 3
18119: PUSH
18120: LD_INT 4
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: PUSH
18129: LD_OWVAR 67
18133: ARRAY
18134: PUSH
18135: FOR_TO
18136: IFFALSE 18445
// begin InitHc ;
18138: CALL_OW 19
// InitVc ;
18142: CALL_OW 20
// uc_side := 3 ;
18146: LD_ADDR_OWVAR 20
18150: PUSH
18151: LD_INT 3
18153: ST_TO_ADDR
// uc_nation := 3 ;
18154: LD_ADDR_OWVAR 21
18158: PUSH
18159: LD_INT 3
18161: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18162: LD_INT 22
18164: PUSH
18165: LD_INT 23
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 1
18174: PPUSH
18175: LD_INT 2
18177: PPUSH
18178: CALL_OW 12
18182: ARRAY
18183: PPUSH
18184: LD_INT 1
18186: PPUSH
18187: LD_INT 1
18189: PPUSH
18190: LD_INT 44
18192: PUSH
18193: LD_INT 45
18195: PUSH
18196: LD_INT 43
18198: PUSH
18199: LD_INT 42
18201: PUSH
18202: LD_INT 44
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 1
18214: PPUSH
18215: LD_INT 5
18217: PPUSH
18218: CALL_OW 12
18222: ARRAY
18223: PPUSH
18224: LD_INT 99
18226: PPUSH
18227: CALL 34396 0 5
// veh := CreateVehicle ;
18231: LD_ADDR_VAR 0 3
18235: PUSH
18236: CALL_OW 45
18240: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18241: LD_VAR 0 3
18245: PPUSH
18246: LD_INT 127
18248: PPUSH
18249: LD_INT 243
18251: PPUSH
18252: LD_INT 0
18254: PPUSH
18255: LD_INT 0
18257: PPUSH
18258: CALL 69407 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18262: LD_ADDR_EXP 61
18266: PUSH
18267: LD_EXP 61
18271: PPUSH
18272: LD_EXP 61
18276: PUSH
18277: LD_INT 1
18279: PLUS
18280: PPUSH
18281: LD_VAR 0 3
18285: PPUSH
18286: CALL_OW 1
18290: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18291: LD_INT 0
18293: PPUSH
18294: LD_INT 3
18296: PPUSH
18297: LD_OWVAR 67
18301: PUSH
18302: LD_INT 2
18304: PLUS
18305: PPUSH
18306: CALL_OW 380
// un := CreateHuman ;
18310: LD_ADDR_VAR 0 2
18314: PUSH
18315: CALL_OW 44
18319: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18320: LD_VAR 0 2
18324: PPUSH
18325: LD_VAR 0 3
18329: PPUSH
18330: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18334: LD_ADDR_EXP 61
18338: PUSH
18339: LD_EXP 61
18343: PPUSH
18344: LD_EXP 61
18348: PUSH
18349: LD_INT 1
18351: PLUS
18352: PPUSH
18353: LD_VAR 0 2
18357: PPUSH
18358: CALL_OW 1
18362: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18363: LD_VAR 0 2
18367: PPUSH
18368: LD_INT 130
18370: PPUSH
18371: LD_INT 233
18373: PPUSH
18374: CALL_OW 111
// wait ( 0 0$2 ) ;
18378: LD_INT 70
18380: PPUSH
18381: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18385: LD_ADDR_VAR 0 4
18389: PUSH
18390: LD_VAR 0 4
18394: PPUSH
18395: LD_VAR 0 4
18399: PUSH
18400: LD_INT 1
18402: PLUS
18403: PPUSH
18404: LD_VAR 0 3
18408: PPUSH
18409: CALL_OW 1
18413: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18414: LD_ADDR_VAR 0 4
18418: PUSH
18419: LD_VAR 0 4
18423: PPUSH
18424: LD_VAR 0 4
18428: PUSH
18429: LD_INT 1
18431: PLUS
18432: PPUSH
18433: LD_VAR 0 2
18437: PPUSH
18438: CALL_OW 1
18442: ST_TO_ADDR
// end ;
18443: GO 18135
18445: POP
18446: POP
// for i in tmp do
18447: LD_ADDR_VAR 0 1
18451: PUSH
18452: LD_VAR 0 4
18456: PUSH
18457: FOR_IN
18458: IFFALSE 18572
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18460: LD_VAR 0 1
18464: PPUSH
18465: LD_INT 130
18467: PUSH
18468: LD_INT 229
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 137
18477: PUSH
18478: LD_INT 216
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 142
18487: PUSH
18488: LD_INT 194
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 140
18497: PUSH
18498: LD_INT 169
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 146
18507: PUSH
18508: LD_INT 162
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 174
18517: PUSH
18518: LD_INT 161
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 158
18527: PUSH
18528: LD_INT 134
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 136
18537: PUSH
18538: LD_INT 107
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 115
18547: PUSH
18548: LD_INT 89
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: PPUSH
18566: CALL 69877 0 2
18570: GO 18457
18572: POP
18573: POP
// repeat wait ( 0 0$2 ) ;
18574: LD_INT 70
18576: PPUSH
18577: CALL_OW 67
// for i in tmp do
18581: LD_ADDR_VAR 0 1
18585: PUSH
18586: LD_VAR 0 4
18590: PUSH
18591: FOR_IN
18592: IFFALSE 18659
// if IsDead ( i ) then
18594: LD_VAR 0 1
18598: PPUSH
18599: CALL_OW 301
18603: IFFALSE 18623
// tmp := tmp diff i else
18605: LD_ADDR_VAR 0 4
18609: PUSH
18610: LD_VAR 0 4
18614: PUSH
18615: LD_VAR 0 1
18619: DIFF
18620: ST_TO_ADDR
18621: GO 18657
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18623: LD_VAR 0 1
18627: PPUSH
18628: LD_INT 81
18630: PUSH
18631: LD_INT 3
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PPUSH
18638: CALL_OW 69
18642: PPUSH
18643: LD_VAR 0 1
18647: PPUSH
18648: CALL_OW 74
18652: PPUSH
18653: CALL_OW 115
18657: GO 18591
18659: POP
18660: POP
// until not tmp ;
18661: LD_VAR 0 4
18665: NOT
18666: IFFALSE 18574
// end ;
18668: PPOPN 4
18670: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18671: LD_EXP 6
18675: IFFALSE 19134
18677: GO 18679
18679: DISABLE
18680: LD_INT 0
18682: PPUSH
18683: PPUSH
18684: PPUSH
18685: PPUSH
// begin wait ( 3 3$00 ) ;
18686: LD_INT 6300
18688: PPUSH
18689: CALL_OW 67
// for i := 1 to 3 do
18693: LD_ADDR_VAR 0 1
18697: PUSH
18698: DOUBLE
18699: LD_INT 1
18701: DEC
18702: ST_TO_ADDR
18703: LD_INT 3
18705: PUSH
18706: FOR_TO
18707: IFFALSE 19006
// begin InitHc ;
18709: CALL_OW 19
// InitVc ;
18713: CALL_OW 20
// uc_side := 3 ;
18717: LD_ADDR_OWVAR 20
18721: PUSH
18722: LD_INT 3
18724: ST_TO_ADDR
// uc_nation := 3 ;
18725: LD_ADDR_OWVAR 21
18729: PUSH
18730: LD_INT 3
18732: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18733: LD_INT 22
18735: PUSH
18736: LD_INT 23
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 1
18745: PPUSH
18746: LD_INT 2
18748: PPUSH
18749: CALL_OW 12
18753: ARRAY
18754: PPUSH
18755: LD_INT 1
18757: PPUSH
18758: LD_INT 1
18760: PPUSH
18761: LD_INT 44
18763: PUSH
18764: LD_INT 43
18766: PUSH
18767: LD_INT 42
18769: PUSH
18770: LD_INT 44
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 1
18781: PPUSH
18782: LD_INT 4
18784: PPUSH
18785: CALL_OW 12
18789: ARRAY
18790: PPUSH
18791: LD_INT 99
18793: PPUSH
18794: CALL 34396 0 5
// veh := CreateVehicle ;
18798: LD_ADDR_VAR 0 3
18802: PUSH
18803: CALL_OW 45
18807: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18808: LD_VAR 0 3
18812: PPUSH
18813: LD_INT 293
18815: PPUSH
18816: LD_INT 246
18818: PPUSH
18819: LD_INT 5
18821: PPUSH
18822: LD_INT 0
18824: PPUSH
18825: CALL 69407 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18829: LD_ADDR_EXP 61
18833: PUSH
18834: LD_EXP 61
18838: PPUSH
18839: LD_EXP 61
18843: PUSH
18844: LD_INT 1
18846: PLUS
18847: PPUSH
18848: LD_VAR 0 3
18852: PPUSH
18853: CALL_OW 1
18857: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18858: LD_INT 0
18860: PPUSH
18861: LD_INT 3
18863: PPUSH
18864: LD_INT 3
18866: PPUSH
18867: CALL_OW 380
// un := CreateHuman ;
18871: LD_ADDR_VAR 0 2
18875: PUSH
18876: CALL_OW 44
18880: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18881: LD_VAR 0 2
18885: PPUSH
18886: LD_VAR 0 3
18890: PPUSH
18891: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18895: LD_ADDR_EXP 61
18899: PUSH
18900: LD_EXP 61
18904: PPUSH
18905: LD_EXP 61
18909: PUSH
18910: LD_INT 1
18912: PLUS
18913: PPUSH
18914: LD_VAR 0 2
18918: PPUSH
18919: CALL_OW 1
18923: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18924: LD_VAR 0 2
18928: PPUSH
18929: LD_INT 273
18931: PPUSH
18932: LD_INT 227
18934: PPUSH
18935: CALL_OW 111
// wait ( 0 0$2 ) ;
18939: LD_INT 70
18941: PPUSH
18942: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18946: LD_ADDR_VAR 0 4
18950: PUSH
18951: LD_VAR 0 4
18955: PPUSH
18956: LD_VAR 0 4
18960: PUSH
18961: LD_INT 1
18963: PLUS
18964: PPUSH
18965: LD_VAR 0 3
18969: PPUSH
18970: CALL_OW 1
18974: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18975: LD_ADDR_VAR 0 4
18979: PUSH
18980: LD_VAR 0 4
18984: PPUSH
18985: LD_VAR 0 4
18989: PUSH
18990: LD_INT 1
18992: PLUS
18993: PPUSH
18994: LD_VAR 0 2
18998: PPUSH
18999: CALL_OW 1
19003: ST_TO_ADDR
// end ;
19004: GO 18706
19006: POP
19007: POP
// for i in tmp do
19008: LD_ADDR_VAR 0 1
19012: PUSH
19013: LD_VAR 0 4
19017: PUSH
19018: FOR_IN
19019: IFFALSE 19038
// ComAgressiveMove ( i , 330 , 231 ) ;
19021: LD_VAR 0 1
19025: PPUSH
19026: LD_INT 330
19028: PPUSH
19029: LD_INT 231
19031: PPUSH
19032: CALL_OW 114
19036: GO 19018
19038: POP
19039: POP
// repeat wait ( 0 0$2 ) ;
19040: LD_INT 70
19042: PPUSH
19043: CALL_OW 67
// for i in tmp do
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: LD_VAR 0 4
19056: PUSH
19057: FOR_IN
19058: IFFALSE 19125
// if IsDead ( i ) then
19060: LD_VAR 0 1
19064: PPUSH
19065: CALL_OW 301
19069: IFFALSE 19089
// tmp := tmp diff i else
19071: LD_ADDR_VAR 0 4
19075: PUSH
19076: LD_VAR 0 4
19080: PUSH
19081: LD_VAR 0 1
19085: DIFF
19086: ST_TO_ADDR
19087: GO 19123
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19089: LD_VAR 0 1
19093: PPUSH
19094: LD_INT 81
19096: PUSH
19097: LD_INT 3
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: PPUSH
19109: LD_VAR 0 1
19113: PPUSH
19114: CALL_OW 74
19118: PPUSH
19119: CALL_OW 115
19123: GO 19057
19125: POP
19126: POP
// until not tmp ;
19127: LD_VAR 0 4
19131: NOT
19132: IFFALSE 19040
// end ;
19134: PPOPN 4
19136: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19137: LD_INT 3
19139: PUSH
19140: LD_INT 22
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 32
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PPUSH
19168: CALL_OW 69
19172: IFFALSE 19256
19174: GO 19176
19176: DISABLE
19177: LD_INT 0
19179: PPUSH
// begin enable ;
19180: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19181: LD_ADDR_VAR 0 1
19185: PUSH
19186: LD_INT 3
19188: PUSH
19189: LD_INT 22
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 32
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PPUSH
19217: CALL_OW 69
19221: PUSH
19222: FOR_IN
19223: IFFALSE 19254
// if GetFuel ( i ) < 3 then
19225: LD_VAR 0 1
19229: PPUSH
19230: CALL_OW 261
19234: PUSH
19235: LD_INT 3
19237: LESS
19238: IFFALSE 19252
// SetFuel ( i , 3 ) ;
19240: LD_VAR 0 1
19244: PPUSH
19245: LD_INT 3
19247: PPUSH
19248: CALL_OW 240
19252: GO 19222
19254: POP
19255: POP
// end ; end_of_file
19256: PPOPN 1
19258: END
// export function Action ; begin
19259: LD_INT 0
19261: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19262: LD_INT 2
19264: PPUSH
19265: LD_INT 4
19267: PPUSH
19268: CALL_OW 332
// Video ( true ) ;
19272: LD_INT 1
19274: PPUSH
19275: CALL 67239 0 1
// music_nat := 3 ;
19279: LD_ADDR_OWVAR 71
19283: PUSH
19284: LD_INT 3
19286: ST_TO_ADDR
// music_class := music_recon ;
19287: LD_ADDR_OWVAR 72
19291: PUSH
19292: LD_INT 3
19294: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19295: LD_INT 213
19297: PPUSH
19298: LD_INT 89
19300: PPUSH
19301: CALL_OW 86
// if Kaia and Olaf then
19305: LD_EXP 39
19309: PUSH
19310: LD_EXP 43
19314: AND
19315: IFFALSE 19321
// SceneKaiaWithOlaf ;
19317: CALL 19399 0 0
// if Givi and Kamil then
19321: LD_EXP 35
19325: PUSH
19326: LD_EXP 38
19330: AND
19331: IFFALSE 19337
// SceneWithGiviAndKamil ;
19333: CALL 19970 0 0
// tick := 0 ;
19337: LD_ADDR_OWVAR 1
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
// wait ( 3 ) ;
19345: LD_INT 3
19347: PPUSH
19348: CALL_OW 67
// Video ( false ) ;
19352: LD_INT 0
19354: PPUSH
19355: CALL 67239 0 1
// ChangeMissionObjectives ( M1 ) ;
19359: LD_STRING M1
19361: PPUSH
19362: CALL_OW 337
// music_nat := music_auto ;
19366: LD_ADDR_OWVAR 71
19370: PUSH
19371: LD_INT 0
19373: ST_TO_ADDR
// music_class := music_auto ;
19374: LD_ADDR_OWVAR 72
19378: PUSH
19379: LD_INT 0
19381: ST_TO_ADDR
// SaveForQuickRestart ;
19382: CALL_OW 22
// gameActive := true ;
19386: LD_ADDR_EXP 31
19390: PUSH
19391: LD_INT 1
19393: ST_TO_ADDR
// end ;
19394: LD_VAR 0 1
19398: RET
// export function SceneKaiaWithOlaf ; begin
19399: LD_INT 0
19401: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19402: LD_INT 22
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 30
19414: PUSH
19415: LD_INT 3
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PPUSH
19426: CALL_OW 69
19430: PPUSH
19431: LD_INT 14
19433: PPUSH
19434: LD_INT 1
19436: PPUSH
19437: LD_INT 1
19439: PPUSH
19440: LD_INT 26
19442: PPUSH
19443: CALL_OW 125
// wait ( 0 0$1 ) ;
19447: LD_INT 35
19449: PPUSH
19450: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19454: LD_EXP 39
19458: PPUSH
19459: LD_STRING DK-Mem-1
19461: PPUSH
19462: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19466: LD_EXP 39
19470: PPUSH
19471: LD_STRING DK-Mem-2
19473: PPUSH
19474: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19478: LD_EXP 43
19482: PPUSH
19483: LD_STRING DO-Mem-3
19485: PPUSH
19486: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19490: LD_EXP 39
19494: PPUSH
19495: LD_STRING DK-Mem-4
19497: PPUSH
19498: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19502: LD_EXP 43
19506: PPUSH
19507: LD_STRING DO-Mem-5
19509: PPUSH
19510: CALL_OW 88
// wait ( 0 0$2 ) ;
19514: LD_INT 70
19516: PPUSH
19517: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19521: LD_INT 22
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 30
19533: PUSH
19534: LD_INT 3
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PPUSH
19545: CALL_OW 69
19549: PPUSH
19550: LD_INT 90
19552: PPUSH
19553: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19557: LD_EXP 43
19561: PPUSH
19562: LD_STRING DO-Mem-6
19564: PPUSH
19565: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19569: LD_EXP 39
19573: PPUSH
19574: LD_STRING DK-Mem-7
19576: PPUSH
19577: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19581: LD_EXP 34
19585: PPUSH
19586: LD_EXP 39
19590: PPUSH
19591: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19595: LD_EXP 34
19599: PPUSH
19600: LD_STRING DH-Mem-8
19602: PPUSH
19603: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19607: LD_EXP 39
19611: PUSH
19612: LD_EXP 43
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PPUSH
19621: LD_EXP 34
19625: PPUSH
19626: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19630: LD_EXP 43
19634: PPUSH
19635: LD_STRING DO-Mem-9
19637: PPUSH
19638: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19642: LD_EXP 43
19646: PPUSH
19647: LD_STRING DO-Mem-10
19649: PPUSH
19650: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19654: LD_EXP 43
19658: PPUSH
19659: LD_STRING DO-Mem-11
19661: PPUSH
19662: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19666: LD_EXP 43
19670: PPUSH
19671: LD_STRING DO-Mem-12
19673: PPUSH
19674: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19678: LD_EXP 39
19682: PPUSH
19683: LD_STRING DK-Mem-13
19685: PPUSH
19686: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19690: LD_EXP 39
19694: PPUSH
19695: LD_STRING DK-Mem-14
19697: PPUSH
19698: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19702: LD_EXP 39
19706: PPUSH
19707: LD_STRING DK-Mem-15
19709: PPUSH
19710: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19714: LD_EXP 39
19718: PPUSH
19719: LD_STRING DK-Mem-16
19721: PPUSH
19722: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19726: LD_EXP 39
19730: PPUSH
19731: LD_STRING DK-Mem-17
19733: PPUSH
19734: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19738: LD_EXP 43
19742: PPUSH
19743: LD_EXP 39
19747: PPUSH
19748: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19752: LD_EXP 43
19756: PPUSH
19757: LD_STRING DO-Mem-18
19759: PPUSH
19760: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19764: LD_EXP 39
19768: PPUSH
19769: LD_EXP 43
19773: PPUSH
19774: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19778: LD_EXP 39
19782: PPUSH
19783: LD_STRING DK-Mem-19
19785: PPUSH
19786: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19790: LD_EXP 43
19794: PPUSH
19795: LD_INT 214
19797: PPUSH
19798: LD_INT 86
19800: PPUSH
19801: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19805: LD_EXP 43
19809: PPUSH
19810: LD_EXP 39
19814: PPUSH
19815: CALL_OW 179
// if Givi then
19819: LD_EXP 35
19823: IFFALSE 19854
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19825: LD_EXP 35
19829: PPUSH
19830: LD_INT 217
19832: PPUSH
19833: LD_INT 86
19835: PPUSH
19836: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19840: LD_EXP 35
19844: PPUSH
19845: LD_EXP 34
19849: PPUSH
19850: CALL_OW 179
// end ; if Kamil then
19854: LD_EXP 38
19858: IFFALSE 19898
// begin ComExit ( Kamil ) ;
19860: LD_EXP 38
19864: PPUSH
19865: CALL 67665 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19869: LD_EXP 38
19873: PPUSH
19874: LD_INT 212
19876: PPUSH
19877: LD_INT 86
19879: PPUSH
19880: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19884: LD_EXP 38
19888: PPUSH
19889: LD_EXP 34
19893: PPUSH
19894: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19898: LD_INT 70
19900: PPUSH
19901: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19905: LD_EXP 34
19909: PPUSH
19910: LD_STRING DH-Mem-20
19912: PPUSH
19913: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19917: LD_EXP 43
19921: PPUSH
19922: LD_INT 215
19924: PPUSH
19925: LD_INT 87
19927: PPUSH
19928: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19932: LD_EXP 43
19936: PPUSH
19937: LD_EXP 39
19941: PPUSH
19942: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19946: LD_EXP 39
19950: PPUSH
19951: LD_STRING DK-Mem-21
19953: PPUSH
19954: CALL_OW 88
// wait ( 0 0$2 ) ;
19958: LD_INT 70
19960: PPUSH
19961: CALL_OW 67
// end ;
19965: LD_VAR 0 1
19969: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19970: LD_INT 0
19972: PPUSH
19973: PPUSH
// if Markov then
19974: LD_EXP 41
19978: IFFALSE 20096
// begin p := 0 ;
19980: LD_ADDR_VAR 0 2
19984: PUSH
19985: LD_INT 0
19987: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19988: LD_EXP 41
19992: PPUSH
19993: CALL_OW 310
19997: IFFALSE 20008
// ComExit ( Markov ) ;
19999: LD_EXP 41
20003: PPUSH
20004: CALL 67665 0 1
// wait ( 0 0$1 ) ;
20008: LD_INT 35
20010: PPUSH
20011: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
20015: LD_EXP 41
20019: PPUSH
20020: LD_INT 212
20022: PPUSH
20023: LD_INT 88
20025: PPUSH
20026: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20030: LD_INT 35
20032: PPUSH
20033: CALL_OW 67
// p := Inc ( p ) ;
20037: LD_ADDR_VAR 0 2
20041: PUSH
20042: LD_VAR 0 2
20046: PPUSH
20047: CALL 68628 0 1
20051: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20052: LD_EXP 41
20056: PPUSH
20057: LD_EXP 34
20061: PPUSH
20062: CALL_OW 296
20066: PUSH
20067: LD_INT 6
20069: LESS
20070: PUSH
20071: LD_VAR 0 2
20075: PUSH
20076: LD_INT 12
20078: GREATER
20079: OR
20080: IFFALSE 20030
// AddComTurnUnit ( Markov , Heike ) ;
20082: LD_EXP 41
20086: PPUSH
20087: LD_EXP 34
20091: PPUSH
20092: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20096: LD_EXP 35
20100: PPUSH
20101: LD_STRING DG-Obj-1
20103: PPUSH
20104: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20108: LD_EXP 38
20112: PPUSH
20113: LD_STRING DKam-Obj-2
20115: PPUSH
20116: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20120: LD_EXP 34
20124: PPUSH
20125: LD_EXP 38
20129: PPUSH
20130: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20134: LD_EXP 38
20138: PPUSH
20139: LD_STRING DKam-Obj-3
20141: PPUSH
20142: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20146: LD_EXP 41
20150: PPUSH
20151: LD_STRING DMar-Obj-4
20153: PPUSH
20154: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20158: LD_EXP 38
20162: PPUSH
20163: LD_STRING DKam-Obj-6
20165: PPUSH
20166: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20170: LD_EXP 38
20174: PPUSH
20175: LD_STRING DKam-Obj-7
20177: PPUSH
20178: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20182: LD_EXP 38
20186: PPUSH
20187: LD_STRING DKam-Obj-8
20189: PPUSH
20190: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20194: LD_EXP 34
20198: PPUSH
20199: LD_STRING DH-Obj-9
20201: PPUSH
20202: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20206: LD_EXP 38
20210: PPUSH
20211: LD_STRING DKam-Obj-10
20213: PPUSH
20214: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20218: LD_EXP 38
20222: PPUSH
20223: LD_STRING DKam-Obj-11
20225: PPUSH
20226: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20230: LD_EXP 41
20234: PPUSH
20235: LD_STRING DMar-Obj-12
20237: PPUSH
20238: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20242: LD_EXP 41
20246: PPUSH
20247: LD_STRING DMar-Obj-13
20249: PPUSH
20250: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20254: LD_EXP 41
20258: PPUSH
20259: LD_STRING DMar-Obj-14
20261: PPUSH
20262: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20266: LD_EXP 43
20270: PPUSH
20271: LD_STRING DO-Obj-15
20273: PPUSH
20274: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20278: LD_EXP 43
20282: PPUSH
20283: LD_STRING DO-Obj-16
20285: PPUSH
20286: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20290: LD_EXP 34
20294: PPUSH
20295: LD_STRING DH-Obj-17
20297: PPUSH
20298: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20302: LD_EXP 43
20306: PPUSH
20307: LD_STRING DO-Obj-18
20309: PPUSH
20310: CALL_OW 88
// end ;
20314: LD_VAR 0 1
20318: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20319: LD_INT 34
20321: PUSH
20322: LD_INT 92
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PPUSH
20329: CALL_OW 69
20333: IFFALSE 20528
20335: GO 20337
20337: DISABLE
20338: LD_INT 0
20340: PPUSH
// begin wait ( 0 0$2 ) ;
20341: LD_INT 70
20343: PPUSH
20344: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20348: LD_INT 34
20350: PUSH
20351: LD_INT 92
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PPUSH
20358: CALL_OW 69
20362: PPUSH
20363: CALL_OW 87
// DialogueOn ;
20367: CALL_OW 6
// if Markov then
20371: LD_EXP 41
20375: IFFALSE 20403
// begin Say ( Markov , DMar-Grn-1 ) ;
20377: LD_EXP 41
20381: PPUSH
20382: LD_STRING DMar-Grn-1
20384: PPUSH
20385: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20389: LD_EXP 34
20393: PPUSH
20394: LD_STRING DH-Grn-2
20396: PPUSH
20397: CALL_OW 88
// end else
20401: GO 20502
// if heikeSecondSquad then
20403: LD_EXP 49
20407: IFFALSE 20502
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20409: LD_ADDR_VAR 0 1
20413: PUSH
20414: LD_EXP 49
20418: PUSH
20419: LD_INT 1
20421: PPUSH
20422: LD_EXP 49
20426: PPUSH
20427: CALL_OW 12
20431: ARRAY
20432: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20433: LD_VAR 0 1
20437: PPUSH
20438: CALL_OW 258
20442: PUSH
20443: LD_INT 1
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20466
20451: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20452: LD_VAR 0 1
20456: PPUSH
20457: LD_STRING DArm-Grn-1
20459: PPUSH
20460: CALL_OW 88
20464: GO 20490
20466: LD_INT 2
20468: DOUBLE
20469: EQUAL
20470: IFTRUE 20474
20472: GO 20489
20474: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20475: LD_VAR 0 1
20479: PPUSH
20480: LD_STRING DArf-Grn-1
20482: PPUSH
20483: CALL_OW 88
20487: GO 20490
20489: POP
// Say ( Heike , DH-Grn-2 ) ;
20490: LD_EXP 34
20494: PPUSH
20495: LD_STRING DH-Grn-2
20497: PPUSH
20498: CALL_OW 88
// end ; DialogueOff ;
20502: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20506: LD_STRING MortarConstructed
20508: PPUSH
20509: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20513: LD_STRING SelfPropelledMortar
20515: PPUSH
20516: CALL_OW 339
// mortarConstructed := true ;
20520: LD_ADDR_EXP 15
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// end ;
20528: PPOPN 1
20530: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20531: LD_INT 2
20533: PPUSH
20534: LD_INT 8
20536: PPUSH
20537: CALL_OW 294
20541: IFFALSE 20684
20543: GO 20545
20545: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20546: LD_INT 200
20548: PPUSH
20549: LD_INT 162
20551: PPUSH
20552: LD_INT 2
20554: PPUSH
20555: LD_INT 6
20557: NEG
20558: PPUSH
20559: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20563: LD_INT 200
20565: PPUSH
20566: LD_INT 162
20568: PPUSH
20569: LD_INT 2
20571: PPUSH
20572: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20576: LD_INT 200
20578: PPUSH
20579: LD_INT 162
20581: PPUSH
20582: CALL_OW 84
// if not IsOk ( Kurt ) then
20586: LD_EXP 45
20590: PPUSH
20591: CALL_OW 302
20595: NOT
20596: IFFALSE 20600
// exit ;
20598: GO 20684
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20600: LD_EXP 45
20604: PPUSH
20605: LD_STRING DKs-Otpst-2-1
20607: PPUSH
20608: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20612: LD_EXP 39
20616: PPUSH
20617: LD_STRING DK-Otpst-2-2
20619: PPUSH
20620: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20624: LD_EXP 45
20628: PPUSH
20629: LD_STRING DKs-Otpst-2-3
20631: PPUSH
20632: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20636: LD_EXP 45
20640: PPUSH
20641: LD_STRING DKs-Otpst-2-4
20643: PPUSH
20644: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20648: LD_EXP 45
20652: PPUSH
20653: LD_STRING DKs-Otpst-2-5
20655: PPUSH
20656: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20660: LD_EXP 38
20664: PPUSH
20665: LD_STRING DKam-Otpst-2-6
20667: PPUSH
20668: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20672: LD_EXP 45
20676: PPUSH
20677: LD_STRING DKs-Otpst-2-7
20679: PPUSH
20680: CALL_OW 88
// end ;
20684: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20685: LD_INT 8
20687: PPUSH
20688: LD_INT 22
20690: PUSH
20691: LD_INT 3
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 21
20700: PUSH
20701: LD_INT 3
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PPUSH
20712: CALL_OW 70
20716: NOT
20717: PUSH
20718: LD_EXP 3
20722: NOT
20723: AND
20724: IFFALSE 20972
20726: GO 20728
20728: DISABLE
20729: LD_INT 0
20731: PPUSH
// begin outpostDestroyed := true ;
20732: LD_ADDR_EXP 4
20736: PUSH
20737: LD_INT 1
20739: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20740: LD_INT 22
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 34
20752: PUSH
20753: LD_INT 92
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 92
20762: PUSH
20763: LD_INT 195
20765: PUSH
20766: LD_INT 164
20768: PUSH
20769: LD_INT 12
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: LIST
20782: PPUSH
20783: CALL_OW 69
20787: NOT
20788: IFFALSE 20792
// exit ;
20790: GO 20972
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20792: LD_EXP 35
20796: PPUSH
20797: CALL_OW 302
20801: NOT
20802: PUSH
20803: LD_EXP 39
20807: PPUSH
20808: CALL_OW 302
20812: NOT
20813: OR
20814: IFFALSE 20818
// exit ;
20816: GO 20972
// Say ( Givi , DG-Otpst-1-1 ) ;
20818: LD_EXP 35
20822: PPUSH
20823: LD_STRING DG-Otpst-1-1
20825: PPUSH
20826: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20830: LD_EXP 39
20834: PPUSH
20835: LD_STRING DK-Otpst-1-2
20837: PPUSH
20838: CALL_OW 88
// if IsOk ( Markov ) then
20842: LD_EXP 41
20846: PPUSH
20847: CALL_OW 302
20851: IFFALSE 20879
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20853: LD_EXP 41
20857: PPUSH
20858: LD_STRING DMar-Otpst-1-3
20860: PPUSH
20861: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20865: LD_EXP 41
20869: PPUSH
20870: LD_STRING DMar-Otpst-1-4
20872: PPUSH
20873: CALL_OW 88
// end else
20877: GO 20960
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20879: LD_ADDR_VAR 0 1
20883: PUSH
20884: LD_EXP 49
20888: PUSH
20889: LD_INT 1
20891: PPUSH
20892: LD_EXP 49
20896: PPUSH
20897: CALL_OW 12
20901: ARRAY
20902: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20903: LD_VAR 0 1
20907: PPUSH
20908: CALL_OW 258
20912: PUSH
20913: LD_INT 1
20915: DOUBLE
20916: EQUAL
20917: IFTRUE 20921
20919: GO 20936
20921: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20922: LD_VAR 0 1
20926: PPUSH
20927: LD_STRING DArm-Otpst-1-a-3
20929: PPUSH
20930: CALL_OW 88
20934: GO 20960
20936: LD_INT 2
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 20959
20944: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20945: LD_VAR 0 1
20949: PPUSH
20950: LD_STRING DArf-Otpst-1-a-3
20952: PPUSH
20953: CALL_OW 88
20957: GO 20960
20959: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20960: LD_EXP 35
20964: PPUSH
20965: LD_STRING DG-Otpst-1-5
20967: PPUSH
20968: CALL_OW 88
// end ;
20972: PPOPN 1
20974: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20975: LD_EXP 39
20979: PPUSH
20980: CALL_OW 256
20984: PUSH
20985: LD_INT 10
20987: LESS
20988: IFFALSE 21102
20990: GO 20992
20992: DISABLE
// begin DialogueOn ;
20993: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20997: LD_EXP 39
21001: PPUSH
21002: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
21006: LD_EXP 39
21010: PPUSH
21011: LD_STRING DK-Dead-1
21013: PPUSH
21014: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
21018: LD_EXP 34
21022: PPUSH
21023: LD_STRING DH-Dead-2
21025: PPUSH
21026: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21030: LD_EXP 39
21034: PPUSH
21035: LD_STRING DK-Dead-3
21037: PPUSH
21038: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21042: LD_EXP 34
21046: PPUSH
21047: LD_STRING DH-Dead-4
21049: PPUSH
21050: CALL_OW 88
// if IsOk ( Mike ) then
21054: LD_EXP 36
21058: PPUSH
21059: CALL_OW 302
21063: IFFALSE 21089
// begin Say ( Mike , DM-Dead-5 ) ;
21065: LD_EXP 36
21069: PPUSH
21070: LD_STRING DM-Dead-5
21072: PPUSH
21073: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21077: LD_EXP 34
21081: PPUSH
21082: LD_STRING DH-Dead-6
21084: PPUSH
21085: CALL_OW 88
// end ; DialogueOff ;
21089: CALL_OW 7
// KillUnit ( Kaia ) ;
21093: LD_EXP 39
21097: PPUSH
21098: CALL_OW 66
// end ;
21102: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21103: LD_OWVAR 1
21107: PUSH
21108: LD_INT 31500
21110: GREATEREQUAL
21111: PUSH
21112: LD_EXP 5
21116: PUSH
21117: LD_INT 5
21119: GREATER
21120: OR
21121: PUSH
21122: LD_INT 22
21124: PUSH
21125: LD_INT 2
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 92
21134: PUSH
21135: LD_INT 103
21137: PUSH
21138: LD_INT 81
21140: PUSH
21141: LD_INT 20
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PPUSH
21154: CALL_OW 69
21158: OR
21159: IFFALSE 21599
21161: GO 21163
21163: DISABLE
21164: LD_INT 0
21166: PPUSH
21167: PPUSH
21168: PPUSH
// begin PrepareRolfSquad ;
21169: CALL 3531 0 0
// dep := HexInfo ( 86 , 54 ) ;
21173: LD_ADDR_VAR 0 3
21177: PUSH
21178: LD_INT 86
21180: PPUSH
21181: LD_INT 54
21183: PPUSH
21184: CALL_OW 428
21188: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21189: LD_VAR 0 3
21193: PPUSH
21194: CALL_OW 274
21198: PPUSH
21199: LD_INT 1
21201: PPUSH
21202: LD_INT 300
21204: PPUSH
21205: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21209: LD_VAR 0 3
21213: PPUSH
21214: CALL_OW 274
21218: PPUSH
21219: LD_INT 2
21221: PPUSH
21222: LD_INT 300
21224: PPUSH
21225: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21229: LD_EXP 51
21233: PPUSH
21234: LD_INT 79
21236: PPUSH
21237: LD_INT 52
21239: PPUSH
21240: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21244: LD_INT 35
21246: PPUSH
21247: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21251: LD_EXP 51
21255: PPUSH
21256: LD_INT 3
21258: PUSH
21259: LD_INT 60
21261: PUSH
21262: EMPTY
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PPUSH
21269: CALL_OW 72
21273: PPUSH
21274: LD_INT 79
21276: PPUSH
21277: LD_INT 52
21279: PPUSH
21280: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21284: LD_INT 12
21286: PPUSH
21287: LD_INT 22
21289: PUSH
21290: LD_INT 3
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 21
21299: PUSH
21300: LD_INT 1
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PPUSH
21311: CALL_OW 70
21315: NOT
21316: IFFALSE 21244
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21318: LD_ADDR_VAR 0 2
21322: PUSH
21323: LD_INT 12
21325: PPUSH
21326: LD_INT 21
21328: PUSH
21329: LD_INT 3
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PPUSH
21336: CALL_OW 70
21340: ST_TO_ADDR
// for i in tmp do
21341: LD_ADDR_VAR 0 1
21345: PUSH
21346: LD_VAR 0 2
21350: PUSH
21351: FOR_IN
21352: IFFALSE 21368
// SetSide ( i , 8 ) ;
21354: LD_VAR 0 1
21358: PPUSH
21359: LD_INT 8
21361: PPUSH
21362: CALL_OW 235
21366: GO 21351
21368: POP
21369: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21370: LD_INT 63
21372: PPUSH
21373: LD_INT 42
21375: PPUSH
21376: CALL_OW 428
21380: PPUSH
21381: LD_INT 320
21383: PPUSH
21384: CALL_OW 234
// wait ( 0 0$10 ) ;
21388: LD_INT 350
21390: PPUSH
21391: CALL_OW 67
// DialogueOn ;
21395: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21399: LD_INT 8
21401: PPUSH
21402: LD_INT 2
21404: PPUSH
21405: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21409: LD_INT 86
21411: PPUSH
21412: LD_INT 54
21414: PPUSH
21415: CALL_OW 428
21419: PPUSH
21420: LD_STRING antwerp
21422: PPUSH
21423: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21427: LD_EXP 47
21431: PPUSH
21432: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21436: LD_EXP 47
21440: PPUSH
21441: LD_STRING DRf-rast-1
21443: PPUSH
21444: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21448: LD_EXP 34
21452: PPUSH
21453: LD_STRING DH-rast-2
21455: PPUSH
21456: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21460: LD_EXP 47
21464: PPUSH
21465: LD_STRING DRf-rast-3
21467: PPUSH
21468: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21472: LD_EXP 47
21476: PPUSH
21477: LD_STRING DRf-rast-4
21479: PPUSH
21480: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21484: LD_EXP 47
21488: PPUSH
21489: LD_STRING DRf-rast-5
21491: PPUSH
21492: CALL_OW 94
// if IsOk ( Aviradze ) then
21496: LD_EXP 46
21500: PPUSH
21501: CALL_OW 302
21505: IFFALSE 21564
// begin CenterNowOnUnits ( Aviradze ) ;
21507: LD_EXP 46
21511: PPUSH
21512: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21516: LD_EXP 46
21520: PPUSH
21521: LD_STRING DA-rast-6
21523: PPUSH
21524: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21528: LD_EXP 34
21532: PPUSH
21533: LD_STRING DH-rast-7
21535: PPUSH
21536: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21540: LD_EXP 35
21544: PPUSH
21545: LD_STRING DG-rast-8
21547: PPUSH
21548: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21552: LD_EXP 35
21556: PPUSH
21557: LD_STRING DG-rast-9
21559: PPUSH
21560: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21564: LD_EXP 34
21568: PPUSH
21569: LD_STRING DH-rast-10
21571: PPUSH
21572: CALL_OW 88
// DialogueOff ;
21576: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21580: LD_STRING M2
21582: PPUSH
21583: CALL_OW 337
// bergkampfArrived := true ;
21587: LD_ADDR_EXP 3
21591: PUSH
21592: LD_INT 1
21594: ST_TO_ADDR
// PrepareRolfBase ;
21595: CALL 3862 0 0
// end ;
21599: PPOPN 3
21601: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21602: LD_INT 12
21604: PPUSH
21605: LD_INT 22
21607: PUSH
21608: LD_INT 2
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PPUSH
21615: CALL_OW 70
21619: PUSH
21620: LD_EXP 47
21624: PPUSH
21625: CALL_OW 302
21629: AND
21630: PUSH
21631: LD_EXP 29
21635: AND
21636: IFFALSE 22196
21638: GO 21640
21640: DISABLE
21641: LD_INT 0
21643: PPUSH
// begin rolfScriptBase := false ;
21644: LD_ADDR_EXP 9
21648: PUSH
21649: LD_INT 0
21651: ST_TO_ADDR
// DialogueOn ;
21652: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21656: LD_EXP 47
21660: PPUSH
21661: CALL_OW 87
// if rolfSquad >= 10 then
21665: LD_EXP 51
21669: PUSH
21670: LD_INT 10
21672: GREATEREQUAL
21673: IFFALSE 21852
// begin linkedWithRolf := 2 ;
21675: LD_ADDR_EXP 12
21679: PUSH
21680: LD_INT 2
21682: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21683: LD_EXP 47
21687: PPUSH
21688: LD_STRING DRf-rast-11
21690: PPUSH
21691: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21695: LD_EXP 34
21699: PPUSH
21700: LD_STRING DH-rast-12
21702: PPUSH
21703: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21707: LD_EXP 47
21711: PPUSH
21712: LD_STRING DRf-rast-13
21714: PPUSH
21715: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21719: LD_EXP 34
21723: PPUSH
21724: LD_STRING DH-rast-14
21726: PPUSH
21727: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21731: LD_EXP 47
21735: PPUSH
21736: LD_STRING DRf-rast-15
21738: PPUSH
21739: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21743: LD_EXP 34
21747: PPUSH
21748: LD_STRING DH-rast-16
21750: PPUSH
21751: CALL_OW 88
// if IsOk ( Mike ) then
21755: LD_EXP 36
21759: PPUSH
21760: CALL_OW 302
21764: IFFALSE 21838
// begin Say ( Mike , DM-rast-17 ) ;
21766: LD_EXP 36
21770: PPUSH
21771: LD_STRING DM-rast-17
21773: PPUSH
21774: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21778: LD_EXP 34
21782: PPUSH
21783: LD_STRING DH-rast-18
21785: PPUSH
21786: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21790: LD_EXP 36
21794: PPUSH
21795: LD_STRING DM-rast-19
21797: PPUSH
21798: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21802: LD_EXP 34
21806: PPUSH
21807: LD_STRING DH-rast-20
21809: PPUSH
21810: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21814: LD_EXP 36
21818: PPUSH
21819: LD_STRING DM-rast-21
21821: PPUSH
21822: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21826: LD_EXP 34
21830: PPUSH
21831: LD_STRING DH-rast-22
21833: PPUSH
21834: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21838: LD_EXP 34
21842: PPUSH
21843: LD_STRING DH-rast-23
21845: PPUSH
21846: CALL_OW 88
// end else
21850: GO 22002
// begin linkedWithRolf := 1 ;
21852: LD_ADDR_EXP 12
21856: PUSH
21857: LD_INT 1
21859: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21860: LD_EXP 47
21864: PPUSH
21865: LD_STRING DRf-rast-a-11
21867: PPUSH
21868: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21872: LD_EXP 34
21876: PPUSH
21877: LD_STRING DH-rast-a-12
21879: PPUSH
21880: CALL_OW 88
// if IsOk ( Kurt ) then
21884: LD_EXP 45
21888: PPUSH
21889: CALL_OW 302
21893: IFFALSE 21990
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21895: LD_EXP 45
21899: PPUSH
21900: LD_STRING DKs-rast-a-13
21902: PPUSH
21903: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21907: LD_EXP 47
21911: PPUSH
21912: LD_STRING DRf-rast-a-14
21914: PPUSH
21915: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21919: LD_EXP 47
21923: PPUSH
21924: LD_STRING DRf-rast-a-15
21926: PPUSH
21927: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21931: LD_EXP 45
21935: PPUSH
21936: LD_STRING DKs-rast-a-16
21938: PPUSH
21939: CALL_OW 88
// if IsOk ( Givi ) then
21943: LD_EXP 35
21947: PPUSH
21948: CALL_OW 302
21952: IFFALSE 21990
// begin Say ( Givi , DG-rast-a-17 ) ;
21954: LD_EXP 35
21958: PPUSH
21959: LD_STRING DG-rast-a-17
21961: PPUSH
21962: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21966: LD_EXP 35
21970: PPUSH
21971: LD_STRING DG-rast-a-18
21973: PPUSH
21974: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21978: LD_EXP 45
21982: PPUSH
21983: LD_STRING DKs-rast-a-19
21985: PPUSH
21986: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21990: LD_EXP 34
21994: PPUSH
21995: LD_STRING DH-rast-a-20
21997: PPUSH
21998: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
22002: LD_EXP 47
22006: PPUSH
22007: LD_STRING DRf-rast-24
22009: PPUSH
22010: CALL_OW 88
// if IsOk ( Aviradze ) then
22014: LD_EXP 46
22018: PPUSH
22019: CALL_OW 302
22023: IFFALSE 22123
// begin Say ( Aviradze , DA-rast-25 ) ;
22025: LD_EXP 46
22029: PPUSH
22030: LD_STRING DA-rast-25
22032: PPUSH
22033: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22037: LD_EXP 34
22041: PPUSH
22042: LD_STRING DH-rast-26
22044: PPUSH
22045: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22049: LD_EXP 46
22053: PPUSH
22054: LD_STRING DA-rast-27
22056: PPUSH
22057: CALL_OW 88
// if IsOk ( Markov ) then
22061: LD_EXP 41
22065: PPUSH
22066: CALL_OW 302
22070: IFFALSE 22098
// begin Say ( Markov , DMar-rast-28 ) ;
22072: LD_EXP 41
22076: PPUSH
22077: LD_STRING DMar-rast-28
22079: PPUSH
22080: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22084: LD_EXP 41
22088: PPUSH
22089: LD_STRING DMar-rast-29
22091: PPUSH
22092: CALL_OW 88
// end else
22096: GO 22121
// if IsOk ( Sophia ) then
22098: LD_EXP 40
22102: PPUSH
22103: CALL_OW 302
22107: IFFALSE 22121
// begin Say ( Sophia , DS-rast-28 ) ;
22109: LD_EXP 40
22113: PPUSH
22114: LD_STRING DS-rast-28
22116: PPUSH
22117: CALL_OW 88
// end ; end else
22121: GO 22146
// if IsOk ( Sophia ) then
22123: LD_EXP 40
22127: PPUSH
22128: CALL_OW 302
22132: IFFALSE 22146
// Say ( Sophia , DS-rast-29 ) ;
22134: LD_EXP 40
22138: PPUSH
22139: LD_STRING DS-rast-29
22141: PPUSH
22142: CALL_OW 88
// DialogueOff ;
22146: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22150: LD_STRING M3
22152: PPUSH
22153: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22157: LD_ADDR_VAR 0 1
22161: PUSH
22162: LD_INT 22
22164: PUSH
22165: LD_INT 8
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PPUSH
22172: CALL_OW 69
22176: PUSH
22177: FOR_IN
22178: IFFALSE 22194
// SetSide ( i , 2 ) ;
22180: LD_VAR 0 1
22184: PPUSH
22185: LD_INT 2
22187: PPUSH
22188: CALL_OW 235
22192: GO 22177
22194: POP
22195: POP
// end ;
22196: PPOPN 1
22198: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22199: LD_EXP 23
22203: PUSH
22204: LD_EXP 12
22208: NOT
22209: AND
22210: PUSH
22211: LD_EXP 29
22215: AND
22216: IFFALSE 22307
22218: GO 22220
22220: DISABLE
22221: LD_INT 0
22223: PPUSH
// begin canRolfJoin := false ;
22224: LD_ADDR_EXP 29
22228: PUSH
22229: LD_INT 0
22231: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22232: LD_STRING M3
22234: PPUSH
22235: CALL_OW 337
// for i in rolfSquad do
22239: LD_ADDR_VAR 0 1
22243: PUSH
22244: LD_EXP 51
22248: PUSH
22249: FOR_IN
22250: IFFALSE 22305
// begin ComExit ( i ) ;
22252: LD_VAR 0 1
22256: PPUSH
22257: CALL 67665 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22261: LD_VAR 0 1
22265: PPUSH
22266: LD_INT 147
22268: PPUSH
22269: LD_INT 162
22271: PPUSH
22272: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22276: LD_VAR 0 1
22280: PPUSH
22281: LD_INT 1050
22283: PPUSH
22284: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22288: LD_VAR 0 1
22292: PPUSH
22293: LD_INT 103
22295: PPUSH
22296: LD_INT 162
22298: PPUSH
22299: CALL_OW 174
// end ;
22303: GO 22249
22305: POP
22306: POP
// end ;
22307: PPOPN 1
22309: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22310: LD_EXP 3
22314: PUSH
22315: LD_EXP 47
22319: PPUSH
22320: CALL_OW 256
22324: PUSH
22325: LD_INT 400
22327: LESS
22328: AND
22329: PUSH
22330: LD_EXP 12
22334: NOT
22335: AND
22336: PUSH
22337: LD_EXP 29
22341: AND
22342: IFFALSE 22616
22344: GO 22346
22346: DISABLE
22347: LD_INT 0
22349: PPUSH
// begin DialogueOn ;
22350: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22354: LD_EXP 47
22358: PPUSH
22359: LD_STRING DRf-rast-f-11
22361: PPUSH
22362: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22366: LD_EXP 47
22370: PPUSH
22371: LD_STRING DRf-rast-f-12
22373: PPUSH
22374: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22378: LD_EXP 47
22382: PPUSH
22383: LD_STRING DRf-rast-f-13
22385: PPUSH
22386: CALL_OW 94
// DialogueOff ;
22390: CALL_OW 7
// KillUnit ( Rolf ) ;
22394: LD_EXP 47
22398: PPUSH
22399: CALL_OW 66
// wait ( 0 0$1 ) ;
22403: LD_INT 35
22405: PPUSH
22406: CALL_OW 67
// if not IsOk ( Givi ) then
22410: LD_EXP 35
22414: PPUSH
22415: CALL_OW 302
22419: NOT
22420: IFFALSE 22424
// exit ;
22422: GO 22616
// DialogueOn ;
22424: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22428: LD_EXP 35
22432: PPUSH
22433: LD_STRING DG-rast-f-14
22435: PPUSH
22436: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22440: LD_EXP 35
22444: PPUSH
22445: LD_STRING DG-rast-f-15
22447: PPUSH
22448: CALL_OW 88
// if IsOk ( Kaia ) then
22452: LD_EXP 39
22456: PPUSH
22457: CALL_OW 302
22461: IFFALSE 22477
// Say ( Kaia , DK-rast-f-16 ) else
22463: LD_EXP 39
22467: PPUSH
22468: LD_STRING DK-rast-f-16
22470: PPUSH
22471: CALL_OW 88
22475: GO 22564
// if heikeSecondSquad then
22477: LD_EXP 49
22481: IFFALSE 22564
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22483: LD_ADDR_VAR 0 1
22487: PUSH
22488: LD_EXP 49
22492: PUSH
22493: LD_INT 1
22495: PPUSH
22496: LD_EXP 49
22500: PPUSH
22501: CALL_OW 12
22505: ARRAY
22506: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22507: LD_VAR 0 1
22511: PPUSH
22512: CALL_OW 258
22516: PUSH
22517: LD_INT 1
22519: DOUBLE
22520: EQUAL
22521: IFTRUE 22525
22523: GO 22540
22525: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22526: LD_VAR 0 1
22530: PPUSH
22531: LD_STRING DArm-rast-f-a-16
22533: PPUSH
22534: CALL_OW 88
22538: GO 22564
22540: LD_INT 2
22542: DOUBLE
22543: EQUAL
22544: IFTRUE 22548
22546: GO 22563
22548: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22549: LD_VAR 0 1
22553: PPUSH
22554: LD_STRING DArf-rast-f-a-16
22556: PPUSH
22557: CALL_OW 88
22561: GO 22564
22563: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22564: LD_EXP 35
22568: PPUSH
22569: LD_STRING DG-rast-f-17
22571: PPUSH
22572: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22576: LD_EXP 35
22580: PPUSH
22581: LD_STRING DG-rast-f-18
22583: PPUSH
22584: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22588: LD_EXP 35
22592: PPUSH
22593: LD_STRING DG-rast-f-19
22595: PPUSH
22596: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22600: LD_EXP 35
22604: PPUSH
22605: LD_STRING DG-rast-f-20
22607: PPUSH
22608: CALL_OW 88
// DialogueOff ;
22612: CALL_OW 7
// end ;
22616: PPOPN 1
22618: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22619: LD_EXP 31
22623: PUSH
22624: LD_INT 2
22626: PPUSH
22627: LD_INT 10
22629: PPUSH
22630: CALL_OW 294
22634: AND
22635: IFFALSE 22708
22637: GO 22639
22639: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22640: LD_EXP 35
22644: PPUSH
22645: LD_STRING DG-Len-1
22647: PPUSH
22648: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22652: LD_EXP 45
22656: PPUSH
22657: LD_STRING DKs-Len-2
22659: PPUSH
22660: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22664: LD_EXP 45
22668: PPUSH
22669: LD_STRING DKs-Len-3
22671: PPUSH
22672: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22676: LD_EXP 34
22680: PPUSH
22681: LD_STRING DH-Len-4
22683: PPUSH
22684: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22688: LD_EXP 39
22692: PPUSH
22693: LD_STRING DK-Len-5
22695: PPUSH
22696: CALL_OW 88
// leninSpotted := true ;
22700: LD_ADDR_EXP 14
22704: PUSH
22705: LD_INT 1
22707: ST_TO_ADDR
// end ;
22708: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22709: LD_EXP 1
22713: PUSH
22714: LD_EXP 3
22718: PUSH
22719: LD_OWVAR 1
22723: PUSH
22724: LD_INT 67200
22726: PUSH
22727: LD_INT 63000
22729: PUSH
22730: LD_INT 58800
22732: PUSH
22733: LD_INT 54600
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: PUSH
22742: LD_OWVAR 67
22746: ARRAY
22747: GREATER
22748: AND
22749: OR
22750: IFFALSE 23487
22752: GO 22754
22754: DISABLE
22755: LD_INT 0
22757: PPUSH
22758: PPUSH
22759: PPUSH
22760: PPUSH
// begin PrepareOmarSquad ;
22761: CALL 5144 0 0
// repeat wait ( 0 0$1 ) ;
22765: LD_INT 35
22767: PPUSH
22768: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22772: LD_INT 14
22774: PPUSH
22775: LD_INT 22
22777: PUSH
22778: LD_INT 3
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: LD_INT 21
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 59
22800: PUSH
22801: EMPTY
22802: LIST
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PPUSH
22813: CALL_OW 70
22817: NOT
22818: IFFALSE 22765
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22820: LD_ADDR_VAR 0 2
22824: PUSH
22825: LD_INT 14
22827: PPUSH
22828: LD_INT 22
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PPUSH
22838: CALL_OW 70
22842: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22843: LD_ADDR_VAR 0 3
22847: PUSH
22848: LD_VAR 0 2
22852: PUSH
22853: LD_INT 0
22855: GREATER
22856: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22857: LD_ADDR_VAR 0 4
22861: PUSH
22862: LD_EXP 34
22866: PPUSH
22867: LD_INT 14
22869: PPUSH
22870: CALL_OW 308
22874: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22875: LD_VAR 0 2
22879: PPUSH
22880: LD_INT 21
22882: PUSH
22883: LD_INT 3
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PPUSH
22890: CALL_OW 72
22894: IFFALSE 22999
// begin if heikeNearbyOmar then
22896: LD_VAR 0 4
22900: IFFALSE 22916
// Say ( Omar , DOm-Base-1b ) else
22902: LD_EXP 44
22906: PPUSH
22907: LD_STRING DOm-Base-1b
22909: PPUSH
22910: CALL_OW 88
22914: GO 22928
// SayRadio ( Omar , DOm-Base-1br ) ;
22916: LD_EXP 44
22920: PPUSH
22921: LD_STRING DOm-Base-1br
22923: PPUSH
22924: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22928: LD_ADDR_VAR 0 1
22932: PUSH
22933: LD_VAR 0 2
22937: PPUSH
22938: LD_INT 21
22940: PUSH
22941: LD_INT 3
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PPUSH
22948: CALL_OW 72
22952: PUSH
22953: FOR_IN
22954: IFFALSE 22995
// begin if UnitsInside ( i ) then
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 313
22965: IFFALSE 22981
// ComExitBuilding ( UnitsInside ( i ) ) ;
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 313
22976: PPUSH
22977: CALL_OW 122
// SetSide ( i , 5 ) ;
22981: LD_VAR 0 1
22985: PPUSH
22986: LD_INT 5
22988: PPUSH
22989: CALL_OW 235
// end ;
22993: GO 22953
22995: POP
22996: POP
// end else
22997: GO 23092
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22999: LD_VAR 0 2
23003: PPUSH
23004: LD_INT 21
23006: PUSH
23007: LD_INT 2
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PPUSH
23014: CALL_OW 72
23018: IFFALSE 23054
// begin if heikeNearbyOmar then
23020: LD_VAR 0 4
23024: IFFALSE 23040
// Say ( Omar , DOm-Base-1v ) else
23026: LD_EXP 44
23030: PPUSH
23031: LD_STRING DOm-Base-1v
23033: PPUSH
23034: CALL_OW 88
23038: GO 23052
// SayRadio ( Omar , DOm-Base-1vr ) end else
23040: LD_EXP 44
23044: PPUSH
23045: LD_STRING DOm-Base-1vr
23047: PPUSH
23048: CALL_OW 94
23052: GO 23092
// if inOmarBase then
23054: LD_VAR 0 3
23058: IFFALSE 23092
// begin if heikeNearbyOmar then
23060: LD_VAR 0 4
23064: IFFALSE 23080
// Say ( Omar , DOm-Base-1h ) else
23066: LD_EXP 44
23070: PPUSH
23071: LD_STRING DOm-Base-1h
23073: PPUSH
23074: CALL_OW 88
23078: GO 23092
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23080: LD_EXP 44
23084: PPUSH
23085: LD_STRING DOm-Base-1hr
23087: PPUSH
23088: CALL_OW 94
// for i in omarSquad do
23092: LD_ADDR_VAR 0 1
23096: PUSH
23097: LD_EXP 52
23101: PUSH
23102: FOR_IN
23103: IFFALSE 23134
// if GetLives ( i ) < 750 then
23105: LD_VAR 0 1
23109: PPUSH
23110: CALL_OW 256
23114: PUSH
23115: LD_INT 750
23117: LESS
23118: IFFALSE 23132
// SetLives ( i , 1000 ) ;
23120: LD_VAR 0 1
23124: PPUSH
23125: LD_INT 1000
23127: PPUSH
23128: CALL_OW 234
23132: GO 23102
23134: POP
23135: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23136: LD_ADDR_VAR 0 1
23140: PUSH
23141: LD_INT 14
23143: PPUSH
23144: LD_INT 21
23146: PUSH
23147: LD_INT 3
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PPUSH
23154: CALL_OW 70
23158: PUSH
23159: FOR_IN
23160: IFFALSE 23176
// SetSide ( i , 5 ) ;
23162: LD_VAR 0 1
23166: PPUSH
23167: LD_INT 5
23169: PPUSH
23170: CALL_OW 235
23174: GO 23159
23176: POP
23177: POP
// wait ( 0 0$3 ) ;
23178: LD_INT 105
23180: PPUSH
23181: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23185: LD_INT 5
23187: PPUSH
23188: LD_INT 2
23190: PPUSH
23191: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23195: LD_EXP 44
23199: PPUSH
23200: CALL_OW 87
// DialogueOn ;
23204: CALL_OW 6
// if heikeNearbyOmar then
23208: LD_VAR 0 4
23212: IFFALSE 23270
// begin Say ( Omar , DOm-Veh-1a ) ;
23214: LD_EXP 44
23218: PPUSH
23219: LD_STRING DOm-Veh-1a
23221: PPUSH
23222: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23226: LD_EXP 44
23230: PPUSH
23231: LD_STRING DOm-Veh-2a
23233: PPUSH
23234: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23238: LD_EXP 44
23242: PPUSH
23243: LD_STRING DOm-Veh-3a
23245: PPUSH
23246: CALL_OW 88
// if mortarConstructed then
23250: LD_EXP 15
23254: IFFALSE 23268
// Say ( Omar , DOm-Veh-4a ) ;
23256: LD_EXP 44
23260: PPUSH
23261: LD_STRING DOm-Veh-4a
23263: PPUSH
23264: CALL_OW 88
// end else
23268: GO 23324
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23270: LD_EXP 44
23274: PPUSH
23275: LD_STRING DOm-Veh-1
23277: PPUSH
23278: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23282: LD_EXP 44
23286: PPUSH
23287: LD_STRING DOm-Veh-2
23289: PPUSH
23290: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23294: LD_EXP 44
23298: PPUSH
23299: LD_STRING DOm-Veh-3
23301: PPUSH
23302: CALL_OW 94
// if mortarConstructed then
23306: LD_EXP 15
23310: IFFALSE 23324
// SayRadio ( Omar , DOm-Veh-4 ) ;
23312: LD_EXP 44
23316: PPUSH
23317: LD_STRING DOm-Veh-4
23319: PPUSH
23320: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23324: LD_EXP 34
23328: PPUSH
23329: LD_STRING DH-Veh-5
23331: PPUSH
23332: CALL_OW 88
// if IsOk ( Kurt ) then
23336: LD_EXP 45
23340: PPUSH
23341: CALL_OW 302
23345: IFFALSE 23395
// begin Say ( Kurt , DKs-Veh-6 ) ;
23347: LD_EXP 45
23351: PPUSH
23352: LD_STRING DKs-Veh-6
23354: PPUSH
23355: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23359: LD_EXP 45
23363: PPUSH
23364: LD_STRING DKs-Veh-7
23366: PPUSH
23367: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23371: LD_EXP 35
23375: PPUSH
23376: LD_STRING DG-Veh-8
23378: PPUSH
23379: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23383: LD_EXP 36
23387: PPUSH
23388: LD_STRING DM-Veh-9
23390: PPUSH
23391: CALL_OW 88
// end ; DialogueOff ;
23395: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23399: LD_STRING M4
23401: PPUSH
23402: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23406: LD_EXP 44
23410: PPUSH
23411: LD_INT 341
23413: PPUSH
23414: LD_INT 232
23416: PPUSH
23417: CALL_OW 428
23421: PPUSH
23422: CALL_OW 120
// omarArrived := true ;
23426: LD_ADDR_EXP 6
23430: PUSH
23431: LD_INT 1
23433: ST_TO_ADDR
// omarScriptBase := true ;
23434: LD_ADDR_EXP 10
23438: PUSH
23439: LD_INT 1
23441: ST_TO_ADDR
// omarWantVehicles := true ;
23442: LD_ADDR_EXP 18
23446: PUSH
23447: LD_INT 1
23449: ST_TO_ADDR
// if debug then
23450: LD_EXP 1
23454: IFFALSE 23487
// begin wait ( 0 0$25 ) ;
23456: LD_INT 875
23458: PPUSH
23459: CALL_OW 67
// omarScriptBase := false ;
23463: LD_ADDR_EXP 10
23467: PUSH
23468: LD_INT 0
23470: ST_TO_ADDR
// omarWantVehicles := false ;
23471: LD_ADDR_EXP 18
23475: PUSH
23476: LD_INT 0
23478: ST_TO_ADDR
// omarAttack := true ;
23479: LD_ADDR_EXP 23
23483: PUSH
23484: LD_INT 1
23486: ST_TO_ADDR
// end ; end ;
23487: PPOPN 4
23489: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23490: LD_INT 10
23492: PPUSH
23493: LD_INT 22
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PPUSH
23503: CALL_OW 70
23507: PUSH
23508: LD_EXP 6
23512: AND
23513: PUSH
23514: LD_EXP 44
23518: PPUSH
23519: CALL_OW 302
23523: AND
23524: PUSH
23525: LD_EXP 23
23529: NOT
23530: AND
23531: IFFALSE 23548
23533: GO 23535
23535: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23536: LD_EXP 44
23540: PPUSH
23541: LD_STRING DOm-Lenin
23543: PPUSH
23544: CALL_OW 94
23548: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23549: LD_EXP 47
23553: PPUSH
23554: CALL_OW 302
23558: PUSH
23559: LD_EXP 12
23563: AND
23564: PUSH
23565: LD_EXP 6
23569: AND
23570: IFFALSE 23674
23572: GO 23574
23574: DISABLE
// begin wait ( 1 1$00 ) ;
23575: LD_INT 2100
23577: PPUSH
23578: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23582: LD_EXP 47
23586: PPUSH
23587: CALL_OW 87
// DialogueOn ;
23591: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23595: LD_EXP 47
23599: PPUSH
23600: LD_STRING DRf-Veh-10
23602: PPUSH
23603: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23607: LD_EXP 47
23611: PPUSH
23612: LD_STRING DRf-Veh-11
23614: PPUSH
23615: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23619: LD_EXP 34
23623: PPUSH
23624: LD_STRING DH-Veh-12
23626: PPUSH
23627: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23631: LD_EXP 34
23635: PPUSH
23636: LD_STRING DH-Veh-13
23638: PPUSH
23639: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23643: LD_EXP 47
23647: PPUSH
23648: LD_STRING DRf-Veh-14
23650: PPUSH
23651: CALL_OW 88
// DialogueOff ;
23655: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23659: LD_STRING M5
23661: PPUSH
23662: CALL_OW 337
// rolfWantVehicles := true ;
23666: LD_ADDR_EXP 17
23670: PUSH
23671: LD_INT 1
23673: ST_TO_ADDR
// end ;
23674: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23675: LD_EXP 18
23679: IFFALSE 24442
23681: GO 23683
23683: DISABLE
23684: LD_INT 0
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
23690: PPUSH
23691: PPUSH
// begin wait ( 0 0$3 ) ;
23692: LD_INT 105
23694: PPUSH
23695: CALL_OW 67
// Hint ( OmarVehicles ) ;
23699: LD_STRING OmarVehicles
23701: PPUSH
23702: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23706: LD_INT 16
23708: PPUSH
23709: LD_INT 1
23711: PPUSH
23712: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23716: LD_INT 35
23718: PPUSH
23719: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23723: LD_ADDR_EXP 20
23727: PUSH
23728: LD_EXP 20
23732: PUSH
23733: LD_INT 35
23735: MINUS
23736: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23737: LD_EXP 20
23741: PUSH
23742: LD_INT 0
23744: LESSEQUAL
23745: IFFALSE 23845
// begin display_strings := [ ] ;
23747: LD_ADDR_OWVAR 47
23751: PUSH
23752: EMPTY
23753: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23754: LD_STRING M4a
23756: PPUSH
23757: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23761: LD_INT 16
23763: PPUSH
23764: LD_INT 0
23766: PPUSH
23767: CALL_OW 424
// DialogueOn ;
23771: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23775: LD_EXP 44
23779: PPUSH
23780: LD_STRING DOm-Veh-b-15
23782: PPUSH
23783: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23787: LD_EXP 34
23791: PPUSH
23792: LD_STRING DH-Veh-b-16
23794: PPUSH
23795: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23799: LD_EXP 44
23803: PPUSH
23804: LD_STRING DOm-Veh-b-17
23806: PPUSH
23807: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23811: LD_EXP 39
23815: PPUSH
23816: LD_STRING DK-Veh-b-18
23818: PPUSH
23819: CALL_OW 88
// DialogueOff ;
23823: CALL_OW 7
// omarAttack := true ;
23827: LD_ADDR_EXP 23
23831: PUSH
23832: LD_INT 1
23834: ST_TO_ADDR
// omarScriptBase := false ;
23835: LD_ADDR_EXP 10
23839: PUSH
23840: LD_INT 0
23842: ST_TO_ADDR
// exit ;
23843: GO 24442
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23845: LD_EXP 21
23849: PUSH
23850: LD_INT 16
23852: PPUSH
23853: LD_INT 22
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 21
23865: PUSH
23866: LD_INT 2
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 3
23875: PUSH
23876: LD_INT 2
23878: PUSH
23879: LD_INT 34
23881: PUSH
23882: LD_INT 32
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 34
23891: PUSH
23892: LD_INT 88
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 34
23901: PUSH
23902: LD_INT 31
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 33
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 58
23931: PUSH
23932: EMPTY
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: PPUSH
23942: CALL_OW 70
23946: LESSEQUAL
23947: IFFALSE 23716
// omarWaitingForVehiclesTimer := 0 0$00 ;
23949: LD_ADDR_EXP 20
23953: PUSH
23954: LD_INT 0
23956: ST_TO_ADDR
// display_strings := [ ] ;
23957: LD_ADDR_OWVAR 47
23961: PUSH
23962: EMPTY
23963: ST_TO_ADDR
// DialogueOn ;
23964: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23968: LD_EXP 44
23972: PPUSH
23973: LD_STRING DOm-Veh-a-15
23975: PPUSH
23976: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23980: LD_EXP 39
23984: PPUSH
23985: LD_STRING DK-Veh-a-16
23987: PPUSH
23988: CALL_OW 88
// DialogueOff ;
23992: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23996: LD_STRING M4a
23998: PPUSH
23999: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
24003: LD_INT 16
24005: PPUSH
24006: LD_INT 0
24008: PPUSH
24009: CALL_OW 424
// omarHasVehicles := true ;
24013: LD_ADDR_EXP 22
24017: PUSH
24018: LD_INT 1
24020: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24021: LD_INT 35
24023: PPUSH
24024: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
24028: LD_EXP 19
24032: PUSH
24033: LD_INT 0
24035: EQUAL
24036: IFFALSE 24021
// wait ( 1 1$00 ) ;
24038: LD_INT 2100
24040: PPUSH
24041: CALL_OW 67
// omarAttack := true ;
24045: LD_ADDR_EXP 23
24049: PUSH
24050: LD_INT 1
24052: ST_TO_ADDR
// omarScriptBase := false ;
24053: LD_ADDR_EXP 10
24057: PUSH
24058: LD_INT 0
24060: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24061: LD_ADDR_VAR 0 2
24065: PUSH
24066: LD_INT 16
24068: PPUSH
24069: LD_INT 22
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 21
24081: PUSH
24082: LD_INT 2
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 33
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 58
24101: PUSH
24102: EMPTY
24103: LIST
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: PPUSH
24111: CALL_OW 70
24115: ST_TO_ADDR
// for i in tmp do
24116: LD_ADDR_VAR 0 1
24120: PUSH
24121: LD_VAR 0 2
24125: PUSH
24126: FOR_IN
24127: IFFALSE 24155
// begin SetFuel ( i , 100 ) ;
24129: LD_VAR 0 1
24133: PPUSH
24134: LD_INT 100
24136: PPUSH
24137: CALL_OW 240
// SetSide ( i , 5 ) ;
24141: LD_VAR 0 1
24145: PPUSH
24146: LD_INT 5
24148: PPUSH
24149: CALL_OW 235
// end ;
24153: GO 24126
24155: POP
24156: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24157: LD_ADDR_VAR 0 3
24161: PUSH
24162: LD_EXP 52
24166: PPUSH
24167: LD_INT 25
24169: PUSH
24170: LD_INT 2
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PPUSH
24177: CALL_OW 72
24181: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24182: LD_ADDR_VAR 0 4
24186: PUSH
24187: LD_EXP 52
24191: PPUSH
24192: LD_INT 3
24194: PUSH
24195: LD_INT 55
24197: PUSH
24198: EMPTY
24199: LIST
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 25
24207: PUSH
24208: LD_INT 3
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PPUSH
24219: CALL_OW 72
24223: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24224: LD_ADDR_VAR 0 5
24228: PUSH
24229: LD_INT 324
24231: PPUSH
24232: LD_INT 234
24234: PPUSH
24235: CALL_OW 428
24239: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24240: LD_ADDR_VAR 0 6
24244: PUSH
24245: LD_INT 334
24247: PPUSH
24248: LD_INT 241
24250: PPUSH
24251: CALL_OW 428
24255: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24256: LD_VAR 0 6
24260: PPUSH
24261: CALL_OW 313
24265: PPUSH
24266: CALL_OW 122
// if eng then
24270: LD_VAR 0 3
24274: IFFALSE 24382
// begin if eng + mech <= tmp then
24276: LD_VAR 0 3
24280: PUSH
24281: LD_VAR 0 4
24285: PLUS
24286: PUSH
24287: LD_VAR 0 2
24291: LESSEQUAL
24292: IFFALSE 24347
// begin ComEnterUnit ( eng , workshop ) ;
24294: LD_VAR 0 3
24298: PPUSH
24299: LD_VAR 0 5
24303: PPUSH
24304: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24308: LD_VAR 0 3
24312: PPUSH
24313: LD_INT 3
24315: PPUSH
24316: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24320: LD_VAR 0 3
24324: PPUSH
24325: CALL_OW 182
// mech := mech union eng ;
24329: LD_ADDR_VAR 0 4
24333: PUSH
24334: LD_VAR 0 4
24338: PUSH
24339: LD_VAR 0 3
24343: UNION
24344: ST_TO_ADDR
// end else
24345: GO 24382
// begin ComEnterUnit ( eng , armoury ) ;
24347: LD_VAR 0 3
24351: PPUSH
24352: LD_VAR 0 6
24356: PPUSH
24357: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24361: LD_VAR 0 3
24365: PPUSH
24366: LD_INT 1
24368: PPUSH
24369: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24373: LD_VAR 0 3
24377: PPUSH
24378: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24382: LD_ADDR_VAR 0 1
24386: PUSH
24387: DOUBLE
24388: LD_INT 1
24390: DEC
24391: ST_TO_ADDR
24392: LD_VAR 0 2
24396: PUSH
24397: FOR_TO
24398: IFFALSE 24440
// if i <= mech then
24400: LD_VAR 0 1
24404: PUSH
24405: LD_VAR 0 4
24409: LESSEQUAL
24410: IFFALSE 24438
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24412: LD_VAR 0 4
24416: PUSH
24417: LD_VAR 0 1
24421: ARRAY
24422: PPUSH
24423: LD_VAR 0 2
24427: PUSH
24428: LD_VAR 0 1
24432: ARRAY
24433: PPUSH
24434: CALL_OW 180
24438: GO 24397
24440: POP
24441: POP
// end ;
24442: PPOPN 6
24444: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24445: LD_EXP 47
24449: PPUSH
24450: CALL_OW 302
24454: PUSH
24455: LD_EXP 17
24459: AND
24460: IFFALSE 25084
24462: GO 24464
24464: DISABLE
24465: LD_INT 0
24467: PPUSH
24468: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24469: LD_INT 35
24471: PPUSH
24472: CALL_OW 67
// hasBadWeapons := false ;
24476: LD_ADDR_VAR 0 2
24480: PUSH
24481: LD_INT 0
24483: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24484: LD_ADDR_EXP 19
24488: PUSH
24489: LD_EXP 19
24493: PUSH
24494: LD_INT 35
24496: MINUS
24497: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24498: LD_EXP 19
24502: PUSH
24503: LD_INT 0
24505: LESSEQUAL
24506: IFFALSE 24768
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24508: LD_ADDR_EXP 19
24512: PUSH
24513: LD_INT 0
24515: ST_TO_ADDR
// display_strings := [ ] ;
24516: LD_ADDR_OWVAR 47
24520: PUSH
24521: EMPTY
24522: ST_TO_ADDR
// DialogueOn ;
24523: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24527: LD_EXP 47
24531: PPUSH
24532: LD_STRING DRf-Veh-b-19
24534: PPUSH
24535: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24539: LD_EXP 47
24543: PPUSH
24544: LD_STRING DRf-Veh-b-20
24546: PPUSH
24547: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24551: LD_EXP 34
24555: PPUSH
24556: LD_STRING DH-Veh-b-21
24558: PPUSH
24559: CALL_OW 88
// if IsOk ( Givi ) then
24563: LD_EXP 35
24567: PPUSH
24568: CALL_OW 302
24572: IFFALSE 24610
// begin Say ( Givi , DG-Veh-b-22 ) ;
24574: LD_EXP 35
24578: PPUSH
24579: LD_STRING DG-Veh-b-22
24581: PPUSH
24582: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24586: LD_EXP 34
24590: PPUSH
24591: LD_STRING DH-Veh-b-23
24593: PPUSH
24594: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24598: LD_EXP 35
24602: PPUSH
24603: LD_STRING DG-Veh-b-24
24605: PPUSH
24606: CALL_OW 88
// end ; DialogueOff ;
24610: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24614: LD_STRING M5a
24616: PPUSH
24617: CALL_OW 337
// for i in rolfSquad do
24621: LD_ADDR_VAR 0 1
24625: PUSH
24626: LD_EXP 51
24630: PUSH
24631: FOR_IN
24632: IFFALSE 24749
// begin SetSide ( i , 8 ) ;
24634: LD_VAR 0 1
24638: PPUSH
24639: LD_INT 8
24641: PPUSH
24642: CALL_OW 235
// if IsDriver ( i ) then
24646: LD_VAR 0 1
24650: PPUSH
24651: CALL 64871 0 1
24655: IFFALSE 24727
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24657: LD_VAR 0 1
24661: PPUSH
24662: CALL_OW 310
24666: PPUSH
24667: CALL_OW 264
24671: PUSH
24672: LD_INT 51
24674: PUSH
24675: LD_INT 52
24677: PUSH
24678: LD_INT 32
24680: PUSH
24681: LD_INT 88
24683: PUSH
24684: LD_INT 31
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: IN
24694: NOT
24695: IFFALSE 24716
// SetSide ( IsInUnit ( i ) , 8 ) else
24697: LD_VAR 0 1
24701: PPUSH
24702: CALL_OW 310
24706: PPUSH
24707: LD_INT 8
24709: PPUSH
24710: CALL_OW 235
24714: GO 24725
// ComExitVehicle ( i ) ;
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL_OW 121
// end else
24725: GO 24747
// if IsInUnit ( i ) then
24727: LD_VAR 0 1
24731: PPUSH
24732: CALL_OW 310
24736: IFFALSE 24747
// ComExitBuilding ( i ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: CALL_OW 122
// end ;
24747: GO 24631
24749: POP
24750: POP
// wait ( 0 0$10 ) ;
24751: LD_INT 350
24753: PPUSH
24754: CALL_OW 67
// rolfAttack := true ;
24758: LD_ADDR_EXP 32
24762: PUSH
24763: LD_INT 1
24765: ST_TO_ADDR
// exit ;
24766: GO 25084
// end ; if IsDead ( Rolf ) then
24768: LD_EXP 47
24772: PPUSH
24773: CALL_OW 301
24777: IFFALSE 24788
// begin ChangeMissionObjectives ( M5a ) ;
24779: LD_STRING M5a
24781: PPUSH
24782: CALL_OW 337
// exit ;
24786: GO 25084
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24788: LD_EXP 51
24792: PPUSH
24793: LD_INT 55
24795: PUSH
24796: EMPTY
24797: LIST
24798: PPUSH
24799: CALL_OW 72
24803: PPUSH
24804: CALL 31658 0 1
24808: PUSH
24809: LD_EXP 51
24813: PPUSH
24814: CALL 31658 0 1
24818: EQUAL
24819: IFFALSE 24936
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24821: LD_ADDR_VAR 0 1
24825: PUSH
24826: LD_EXP 51
24830: PPUSH
24831: LD_INT 55
24833: PUSH
24834: EMPTY
24835: LIST
24836: PPUSH
24837: CALL_OW 72
24841: PUSH
24842: FOR_IN
24843: IFFALSE 24903
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24845: LD_VAR 0 1
24849: PPUSH
24850: CALL_OW 310
24854: PPUSH
24855: CALL_OW 264
24859: PUSH
24860: LD_INT 51
24862: PUSH
24863: LD_INT 52
24865: PUSH
24866: LD_INT 32
24868: PUSH
24869: LD_INT 88
24871: PUSH
24872: LD_INT 31
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: IN
24882: IFFALSE 24901
// begin hasBadWeapons := true ;
24884: LD_ADDR_VAR 0 2
24888: PUSH
24889: LD_INT 1
24891: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24892: LD_STRING QBadWeapon
24894: PPUSH
24895: CALL_OW 97
// break ;
24899: GO 24903
// end ;
24901: GO 24842
24903: POP
24904: POP
// if not hasBadWeapons then
24905: LD_VAR 0 2
24909: NOT
24910: IFFALSE 24936
// if Query ( QRolf ) = 1 then
24912: LD_STRING QRolf
24914: PPUSH
24915: CALL_OW 97
24919: PUSH
24920: LD_INT 1
24922: EQUAL
24923: IFFALSE 24929
// break else
24925: GO 24940
24927: GO 24936
// wait ( 0 0$15 ) ;
24929: LD_INT 525
24931: PPUSH
24932: CALL_OW 67
// end ; until false ;
24936: LD_INT 0
24938: IFFALSE 24469
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24940: LD_ADDR_EXP 19
24944: PUSH
24945: LD_INT 0
24947: ST_TO_ADDR
// display_strings := [ ] ;
24948: LD_ADDR_OWVAR 47
24952: PUSH
24953: EMPTY
24954: ST_TO_ADDR
// DialogueOn ;
24955: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24959: LD_EXP 47
24963: PPUSH
24964: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24968: LD_EXP 47
24972: PPUSH
24973: LD_STRING DRf-Veh-a-17
24975: PPUSH
24976: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24980: LD_EXP 34
24984: PPUSH
24985: LD_STRING DH-08-Veh-a-18
24987: PPUSH
24988: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24992: LD_EXP 47
24996: PPUSH
24997: LD_STRING DRf-Veh-a-19
24999: PPUSH
25000: CALL_OW 88
// DialogueOff ;
25004: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25008: LD_STRING M5a
25010: PPUSH
25011: CALL_OW 337
// rolfHasVehicles := true ;
25015: LD_ADDR_EXP 16
25019: PUSH
25020: LD_INT 1
25022: ST_TO_ADDR
// for i in rolfSquad do
25023: LD_ADDR_VAR 0 1
25027: PUSH
25028: LD_EXP 51
25032: PUSH
25033: FOR_IN
25034: IFFALSE 25067
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25036: LD_VAR 0 1
25040: PPUSH
25041: CALL_OW 310
25045: PPUSH
25046: LD_INT 8
25048: PPUSH
25049: CALL_OW 235
// SetSide ( i , 8 ) ;
25053: LD_VAR 0 1
25057: PPUSH
25058: LD_INT 8
25060: PPUSH
25061: CALL_OW 235
// end ;
25065: GO 25033
25067: POP
25068: POP
// wait ( 0 0$10 ) ;
25069: LD_INT 350
25071: PPUSH
25072: CALL_OW 67
// rolfAttack := true ;
25076: LD_ADDR_EXP 32
25080: PUSH
25081: LD_INT 1
25083: ST_TO_ADDR
// end ;
25084: PPOPN 2
25086: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25087: LD_EXP 32
25091: PUSH
25092: LD_EXP 23
25096: AND
25097: IFFALSE 25109
25099: GO 25101
25101: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25102: LD_STRING M6a
25104: PPUSH
25105: CALL_OW 337
25109: END
// every 0 0$1 trigger leninSpotted do
25110: LD_EXP 14
25114: IFFALSE 25202
25116: GO 25118
25118: DISABLE
// begin wait ( 0 0$10 ) ;
25119: LD_INT 350
25121: PPUSH
25122: CALL_OW 67
// DialogueOn ;
25126: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25130: LD_EXP 46
25134: PPUSH
25135: LD_STRING DA-Transmission-1
25137: PPUSH
25138: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25142: LD_EXP 53
25146: PPUSH
25147: LD_STRING DMzw-Transmission-2
25149: PPUSH
25150: CALL_OW 94
// if gaidarKilled then
25154: LD_EXP 7
25158: IFFALSE 25174
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25160: LD_EXP 53
25164: PPUSH
25165: LD_STRING DMzw-Transmission-3
25167: PPUSH
25168: CALL_OW 94
25172: GO 25186
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25174: LD_EXP 53
25178: PPUSH
25179: LD_STRING DMzw-Transmission-a-3
25181: PPUSH
25182: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25186: LD_EXP 34
25190: PPUSH
25191: LD_STRING DH-Transmission-4
25193: PPUSH
25194: CALL_OW 88
// DialogueOff ;
25198: CALL_OW 7
// end ;
25202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25203: LD_INT 22
25205: PUSH
25206: LD_INT 3
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 25
25215: PUSH
25216: LD_INT 9
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 101
25225: PUSH
25226: LD_INT 2
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: LIST
25237: PPUSH
25238: CALL_OW 69
25242: PUSH
25243: LD_EXP 34
25247: PPUSH
25248: CALL_OW 302
25252: AND
25253: IFFALSE 25333
25255: GO 25257
25257: DISABLE
// begin wait ( 0 0$3 ) ;
25258: LD_INT 105
25260: PPUSH
25261: CALL_OW 67
// DialogueOn ;
25265: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25269: LD_INT 22
25271: PUSH
25272: LD_INT 3
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 25
25281: PUSH
25282: LD_INT 9
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 101
25291: PUSH
25292: LD_INT 2
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: LIST
25303: PPUSH
25304: CALL_OW 69
25308: PUSH
25309: LD_INT 1
25311: ARRAY
25312: PPUSH
25313: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25317: LD_EXP 34
25321: PPUSH
25322: LD_STRING DH-Rubazooka-1
25324: PPUSH
25325: CALL_OW 88
// DialogueOff ;
25329: CALL_OW 7
// end ;
25333: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25334: LD_INT 19
25336: PPUSH
25337: LD_INT 22
25339: PUSH
25340: LD_INT 3
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PPUSH
25347: CALL_OW 70
25351: PUSH
25352: LD_EXP 28
25356: AND
25357: IFFALSE 25416
25359: GO 25361
25361: DISABLE
// begin DialogueOn ;
25362: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25366: LD_INT 19
25368: PPUSH
25369: LD_INT 22
25371: PUSH
25372: LD_INT 3
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PPUSH
25379: CALL_OW 70
25383: PPUSH
25384: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25388: LD_EXP 34
25392: PPUSH
25393: LD_STRING DH-Ruattfirst-1
25395: PPUSH
25396: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25400: LD_EXP 34
25404: PPUSH
25405: LD_STRING DH-Ruattfirst-2
25407: PPUSH
25408: CALL_OW 88
// DialogueOff ;
25412: CALL_OW 7
// end ;
25416: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25417: LD_INT 19
25419: PPUSH
25420: LD_INT 22
25422: PUSH
25423: LD_INT 3
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PPUSH
25430: CALL_OW 70
25434: PUSH
25435: LD_EXP 28
25439: NOT
25440: AND
25441: IFFALSE 25488
25443: GO 25445
25445: DISABLE
// begin DialogueOn ;
25446: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25450: LD_INT 19
25452: PPUSH
25453: LD_INT 22
25455: PUSH
25456: LD_INT 3
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PPUSH
25463: CALL_OW 70
25467: PPUSH
25468: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25472: LD_EXP 34
25476: PPUSH
25477: LD_STRING DH-Ruattnext-1
25479: PPUSH
25480: CALL_OW 88
// DialogueOff ;
25484: CALL_OW 7
// end ;
25488: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25489: LD_EXP 53
25493: PPUSH
25494: CALL_OW 301
25498: PUSH
25499: LD_EXP 44
25503: PPUSH
25504: CALL_OW 302
25508: AND
25509: IFFALSE 25526
25511: GO 25513
25513: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25514: LD_EXP 44
25518: PPUSH
25519: LD_STRING DOm-Morozov
25521: PPUSH
25522: CALL_OW 94
25526: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25527: LD_EXP 31
25531: PUSH
25532: LD_EXP 48
25536: PPUSH
25537: CALL_OW 274
25541: PPUSH
25542: LD_INT 2
25544: PPUSH
25545: CALL_OW 275
25549: PUSH
25550: LD_INT 30
25552: LESSEQUAL
25553: AND
25554: IFFALSE 25644
25556: GO 25558
25558: DISABLE
// begin wait ( 0 0$10 ) ;
25559: LD_INT 350
25561: PPUSH
25562: CALL_OW 67
// DialogueOn ;
25566: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25570: LD_EXP 34
25574: PPUSH
25575: LD_STRING DH-Fuel-1
25577: PPUSH
25578: CALL_OW 88
// if IsOk ( Givi ) then
25582: LD_EXP 35
25586: PPUSH
25587: CALL_OW 302
25591: IFFALSE 25629
// begin Say ( Givi , DG-Fuel-2 ) ;
25593: LD_EXP 35
25597: PPUSH
25598: LD_STRING DG-Fuel-2
25600: PPUSH
25601: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25605: LD_EXP 35
25609: PPUSH
25610: LD_STRING DG-Fuel-3
25612: PPUSH
25613: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25617: LD_EXP 35
25621: PPUSH
25622: LD_STRING DG-Fuel-4
25624: PPUSH
25625: CALL_OW 88
// end ; DialogueOff ;
25629: CALL_OW 7
// Query ( QOil ) ;
25633: LD_STRING QOil
25635: PPUSH
25636: CALL_OW 97
// GoForOil ( ) ;
25640: CALL 8886 0 0
// end ;
25644: END
// every 0 0$1 trigger leninSpotted and omarAttack and rolfAttack do
25645: LD_EXP 14
25649: PUSH
25650: LD_EXP 23
25654: AND
25655: PUSH
25656: LD_EXP 32
25660: AND
25661: IFFALSE 26002
25663: GO 25665
25665: DISABLE
// begin if IsDead ( Morozov ) then
25666: LD_EXP 53
25670: PPUSH
25671: CALL_OW 301
25675: IFFALSE 25686
// wait ( 1 1$45 ) else
25677: LD_INT 3675
25679: PPUSH
25680: CALL_OW 67
25684: GO 25714
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25686: LD_INT 19950
25688: PUSH
25689: LD_INT 16800
25691: PUSH
25692: LD_INT 16100
25694: PUSH
25695: LD_INT 13650
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: PUSH
25704: LD_OWVAR 67
25708: ARRAY
25709: PPUSH
25710: CALL_OW 67
// DialogueOn ;
25714: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25718: LD_EXP 42
25722: PPUSH
25723: LD_STRING DShar-End-1
25725: PPUSH
25726: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25730: LD_EXP 34
25734: PPUSH
25735: LD_STRING DH-End-2
25737: PPUSH
25738: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25742: LD_EXP 42
25746: PPUSH
25747: LD_STRING DShar-End-3
25749: PPUSH
25750: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25754: LD_EXP 34
25758: PPUSH
25759: LD_STRING DH-End-4
25761: PPUSH
25762: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25766: LD_EXP 42
25770: PPUSH
25771: LD_STRING DShar-End-5
25773: PPUSH
25774: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25778: LD_EXP 42
25782: PPUSH
25783: LD_STRING DShar-End-6
25785: PPUSH
25786: CALL_OW 94
// dwait ( 0 0$2 ) ;
25790: LD_INT 70
25792: PPUSH
25793: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25797: LD_EXP 34
25801: PPUSH
25802: LD_STRING DH-End-7
25804: PPUSH
25805: CALL_OW 88
// DialogueOff ;
25809: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25813: LD_STRING M6
25815: PPUSH
25816: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25820: LD_INT 17
25822: PPUSH
25823: LD_INT 1
25825: PPUSH
25826: CALL_OW 424
// escapeAllowed := true ;
25830: LD_ADDR_EXP 24
25834: PUSH
25835: LD_INT 1
25837: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25838: LD_INT 70
25840: PPUSH
25841: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25845: LD_EXP 45
25849: PPUSH
25850: LD_STRING DKs-End-8
25852: PPUSH
25853: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25857: LD_EXP 39
25861: PPUSH
25862: LD_STRING DK-End-10
25864: PPUSH
25865: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25869: LD_EXP 45
25873: PPUSH
25874: LD_STRING DKs-End-9
25876: PPUSH
25877: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25881: LD_EXP 41
25885: PPUSH
25886: LD_STRING DMar-End-11
25888: PPUSH
25889: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25893: LD_STRING 05_DrugsTested
25895: PPUSH
25896: LD_EXP 1
25900: PPUSH
25901: CALL_OW 30
25905: IFFALSE 25919
// Say ( Mike , DM-End-12 ) ;
25907: LD_EXP 36
25911: PPUSH
25912: LD_STRING DM-End-12
25914: PPUSH
25915: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25919: LD_EXP 43
25923: PPUSH
25924: LD_STRING DO-End-13
25926: PPUSH
25927: CALL_OW 88
// if IsOk ( Sophia ) then
25931: LD_EXP 40
25935: PPUSH
25936: CALL_OW 302
25940: IFFALSE 25966
// begin Say ( Sophia , DS-End-15 ) ;
25942: LD_EXP 40
25946: PPUSH
25947: LD_STRING DS-End-15
25949: PPUSH
25950: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25954: LD_EXP 39
25958: PPUSH
25959: LD_STRING DK-End-16
25961: PPUSH
25962: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25966: LD_EXP 35
25970: PPUSH
25971: LD_STRING DG-End-17
25973: PPUSH
25974: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25978: LD_EXP 35
25982: PPUSH
25983: LD_STRING DG-End-18
25985: PPUSH
25986: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25990: LD_EXP 35
25994: PPUSH
25995: LD_STRING DG-End-19
25997: PPUSH
25998: CALL_OW 88
// end ;
26002: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
26003: LD_EXP 24
26007: IFFALSE 26146
26009: GO 26011
26011: DISABLE
26012: LD_INT 0
26014: PPUSH
26015: PPUSH
// begin repeat wait ( 0 0$1 ) ;
26016: LD_INT 35
26018: PPUSH
26019: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
26023: LD_ADDR_OWVAR 47
26027: PUSH
26028: LD_STRING #X106-2
26030: PUSH
26031: LD_EXP 25
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26040: LD_ADDR_EXP 25
26044: PUSH
26045: LD_EXP 25
26049: PUSH
26050: LD_INT 35
26052: MINUS
26053: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26054: LD_ADDR_VAR 0 2
26058: PUSH
26059: LD_INT 17
26061: PPUSH
26062: LD_INT 22
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 21
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 23
26084: PUSH
26085: LD_INT 2
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: LIST
26096: PPUSH
26097: CALL_OW 71
26101: ST_TO_ADDR
// if not outsiders then
26102: LD_VAR 0 2
26106: NOT
26107: IFFALSE 26123
// begin escapeAllowed := false ;
26109: LD_ADDR_EXP 24
26113: PUSH
26114: LD_INT 0
26116: ST_TO_ADDR
// MissionWin ;
26117: CALL 26149 0 0
// exit ;
26121: GO 26146
// end ; if escapeTimer <= 0 0$00 then
26123: LD_EXP 25
26127: PUSH
26128: LD_INT 0
26130: LESSEQUAL
26131: IFFALSE 26142
// begin YouLost ( TimeOut ) ;
26133: LD_STRING TimeOut
26135: PPUSH
26136: CALL_OW 104
// exit ;
26140: GO 26146
// end ; until false ;
26142: LD_INT 0
26144: IFFALSE 26016
// end ;
26146: PPOPN 2
26148: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26149: LD_INT 0
26151: PPUSH
26152: PPUSH
26153: PPUSH
26154: PPUSH
26155: PPUSH
// if tick <= 55 55$00 then
26156: LD_OWVAR 1
26160: PUSH
26161: LD_INT 115500
26163: LESSEQUAL
26164: IFFALSE 26173
// SetAchievement ( ACH_HSPEED_6 ) ;
26166: LD_STRING ACH_HSPEED_6
26168: PPUSH
26169: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26173: LD_EXP 34
26177: PPUSH
26178: LD_STRING DH-End-20
26180: PPUSH
26181: CALL_OW 88
// if rolfDied then
26185: LD_EXP 13
26189: IFFALSE 26204
// AddMedal ( med1 , - 1 ) else
26191: LD_STRING med1
26193: PPUSH
26194: LD_INT 1
26196: NEG
26197: PPUSH
26198: CALL_OW 101
26202: GO 26234
// if not canRolfJoin then
26204: LD_EXP 29
26208: NOT
26209: IFFALSE 26224
// AddMedal ( med1 , - 2 ) else
26211: LD_STRING med1
26213: PPUSH
26214: LD_INT 2
26216: NEG
26217: PPUSH
26218: CALL_OW 101
26222: GO 26234
// AddMedal ( med1 , 1 ) ;
26224: LD_STRING med1
26226: PPUSH
26227: LD_INT 1
26229: PPUSH
26230: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26234: LD_EXP 22
26238: PUSH
26239: LD_EXP 16
26243: AND
26244: IFFALSE 26258
// AddMedal ( med2 , 1 ) else
26246: LD_STRING med2
26248: PPUSH
26249: LD_INT 1
26251: PPUSH
26252: CALL_OW 101
26256: GO 26307
// if omarHasVehicles then
26258: LD_EXP 22
26262: IFFALSE 26277
// AddMedal ( med2 , - 1 ) else
26264: LD_STRING med2
26266: PPUSH
26267: LD_INT 1
26269: NEG
26270: PPUSH
26271: CALL_OW 101
26275: GO 26307
// if rolfHasVehicles then
26277: LD_EXP 16
26281: IFFALSE 26296
// AddMedal ( med2 , - 2 ) else
26283: LD_STRING med2
26285: PPUSH
26286: LD_INT 2
26288: NEG
26289: PPUSH
26290: CALL_OW 101
26294: GO 26307
// AddMedal ( med2 , - 3 ) ;
26296: LD_STRING med2
26298: PPUSH
26299: LD_INT 3
26301: NEG
26302: PPUSH
26303: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26307: LD_EXP 5
26311: PUSH
26312: LD_INT 20
26314: PUSH
26315: LD_INT 30
26317: PUSH
26318: LD_INT 40
26320: PUSH
26321: LD_INT 50
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: PUSH
26330: LD_OWVAR 67
26334: ARRAY
26335: GREATEREQUAL
26336: PUSH
26337: LD_EXP 26
26341: PUSH
26342: LD_INT 0
26344: EQUAL
26345: AND
26346: IFFALSE 26360
// AddMedal ( med3 , 1 ) else
26348: LD_STRING med3
26350: PPUSH
26351: LD_INT 1
26353: PPUSH
26354: CALL_OW 101
26358: GO 26390
// if heikeLoseCounter then
26360: LD_EXP 26
26364: IFFALSE 26379
// AddMedal ( med3 , - 1 ) else
26366: LD_STRING med3
26368: PPUSH
26369: LD_INT 1
26371: NEG
26372: PPUSH
26373: CALL_OW 101
26377: GO 26390
// AddMedal ( med3 , - 2 ) ;
26379: LD_STRING med3
26381: PPUSH
26382: LD_INT 2
26384: NEG
26385: PPUSH
26386: CALL_OW 101
// GiveMedals ( MAIN ) ;
26390: LD_STRING MAIN
26392: PPUSH
26393: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26397: LD_INT 22
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 23
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 21
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: PPUSH
26432: CALL_OW 69
26436: PPUSH
26437: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26441: LD_EXP 34
26445: PPUSH
26446: LD_STRING 06_Heike
26448: PPUSH
26449: CALL_OW 38
// if Aviradze then
26453: LD_EXP 46
26457: IFFALSE 26471
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26459: LD_EXP 46
26463: PPUSH
26464: LD_STRING 06_Aviradze
26466: PPUSH
26467: CALL_OW 38
// if Ibrahim then
26471: LD_EXP 37
26475: IFFALSE 26489
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26477: LD_EXP 37
26481: PPUSH
26482: LD_STRING 06_Ibrahim
26484: PPUSH
26485: CALL_OW 38
// if Kamil then
26489: LD_EXP 38
26493: IFFALSE 26507
// SaveCharacters ( Kamil , 06_Kamil ) ;
26495: LD_EXP 38
26499: PPUSH
26500: LD_STRING 06_Kamil
26502: PPUSH
26503: CALL_OW 38
// if Sophia then
26507: LD_EXP 40
26511: IFFALSE 26525
// SaveCharacters ( Sophia , 06_Sophia ) ;
26513: LD_EXP 40
26517: PPUSH
26518: LD_STRING 06_Sophia
26520: PPUSH
26521: CALL_OW 38
// if Kaia then
26525: LD_EXP 39
26529: IFFALSE 26543
// SaveCharacters ( Kaia , 06_Kaia ) ;
26531: LD_EXP 39
26535: PPUSH
26536: LD_STRING 06_Kaia
26538: PPUSH
26539: CALL_OW 38
// if Givi then
26543: LD_EXP 35
26547: IFFALSE 26561
// SaveCharacters ( Givi , 06_Givi ) ;
26549: LD_EXP 35
26553: PPUSH
26554: LD_STRING 06_Givi
26556: PPUSH
26557: CALL_OW 38
// if Olaf then
26561: LD_EXP 43
26565: IFFALSE 26579
// SaveCharacters ( Olaf , 06_Olaf ) ;
26567: LD_EXP 43
26571: PPUSH
26572: LD_STRING 06_Olaf
26574: PPUSH
26575: CALL_OW 38
// if Mike then
26579: LD_EXP 36
26583: IFFALSE 26597
// SaveCharacters ( Mike , 06_Mike ) ;
26585: LD_EXP 36
26589: PPUSH
26590: LD_STRING 06_Mike
26592: PPUSH
26593: CALL_OW 38
// if Markov then
26597: LD_EXP 41
26601: IFFALSE 26615
// SaveCharacters ( Markov , 06_Markov ) ;
26603: LD_EXP 41
26607: PPUSH
26608: LD_STRING 06_Markov
26610: PPUSH
26611: CALL_OW 38
// if Kurt then
26615: LD_EXP 45
26619: IFFALSE 26633
// SaveCharacters ( Kurt , 06_Kurt ) ;
26621: LD_EXP 45
26625: PPUSH
26626: LD_STRING 06_Kurt
26628: PPUSH
26629: CALL_OW 38
// if heikeSecondSquad then
26633: LD_EXP 49
26637: IFFALSE 26651
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26639: LD_EXP 49
26643: PPUSH
26644: LD_STRING 06_others
26646: PPUSH
26647: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26651: LD_ADDR_VAR 0 3
26655: PUSH
26656: LD_INT 22
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 23
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PPUSH
26680: CALL_OW 69
26684: ST_TO_ADDR
// if tmp then
26685: LD_VAR 0 3
26689: IFFALSE 26703
// SaveCharacters ( tmp , 06_apes ) ;
26691: LD_VAR 0 3
26695: PPUSH
26696: LD_STRING 06_apes
26698: PPUSH
26699: CALL_OW 38
// if Rolf then
26703: LD_EXP 47
26707: IFFALSE 26758
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26709: LD_EXP 47
26713: PPUSH
26714: LD_STRING 06_Rolf
26716: PPUSH
26717: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26721: LD_STRING enableBioCharacter(BIO_ROLF)
26723: PPUSH
26724: CALL_OW 559
// if rolfSquad diff Rolf then
26728: LD_EXP 51
26732: PUSH
26733: LD_EXP 47
26737: DIFF
26738: IFFALSE 26758
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26740: LD_EXP 51
26744: PUSH
26745: LD_EXP 47
26749: DIFF
26750: PPUSH
26751: LD_STRING 06_RolfSquad
26753: PPUSH
26754: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26758: LD_ADDR_VAR 0 3
26762: PUSH
26763: LD_INT 17
26765: PPUSH
26766: LD_INT 21
26768: PUSH
26769: LD_INT 2
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PPUSH
26776: CALL_OW 70
26780: ST_TO_ADDR
// if tmp then
26781: LD_VAR 0 3
26785: IFFALSE 27079
// begin tmp2 := [ ] ;
26787: LD_ADDR_VAR 0 4
26791: PUSH
26792: EMPTY
26793: ST_TO_ADDR
// for i in tmp do
26794: LD_ADDR_VAR 0 2
26798: PUSH
26799: LD_VAR 0 3
26803: PUSH
26804: FOR_IN
26805: IFFALSE 27065
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26807: LD_VAR 0 2
26811: PPUSH
26812: CALL_OW 264
26816: PUSH
26817: LD_INT 32
26819: PUSH
26820: LD_INT 12
26822: PUSH
26823: LD_INT 51
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: LIST
26830: IN
26831: IFFALSE 26968
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26833: LD_ADDR_VAR 0 5
26837: PUSH
26838: LD_VAR 0 2
26842: PPUSH
26843: LD_INT 1
26845: PPUSH
26846: CALL_OW 289
26850: PUSH
26851: LD_VAR 0 2
26855: PPUSH
26856: LD_INT 2
26858: PPUSH
26859: CALL_OW 289
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26868: LD_ADDR_VAR 0 4
26872: PUSH
26873: LD_VAR 0 4
26877: PPUSH
26878: LD_VAR 0 4
26882: PUSH
26883: LD_INT 1
26885: PLUS
26886: PPUSH
26887: LD_VAR 0 2
26891: PPUSH
26892: CALL_OW 265
26896: PUSH
26897: LD_VAR 0 2
26901: PPUSH
26902: CALL_OW 262
26906: PUSH
26907: LD_VAR 0 2
26911: PPUSH
26912: CALL_OW 263
26916: PUSH
26917: LD_VAR 0 2
26921: PPUSH
26922: CALL_OW 264
26926: PUSH
26927: LD_VAR 0 2
26931: PPUSH
26932: CALL_OW 248
26936: PUSH
26937: LD_VAR 0 2
26941: PPUSH
26942: CALL_OW 256
26946: PUSH
26947: LD_VAR 0 5
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: PPUSH
26961: CALL_OW 1
26965: ST_TO_ADDR
// end else
26966: GO 27063
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26968: LD_ADDR_VAR 0 4
26972: PUSH
26973: LD_VAR 0 4
26977: PPUSH
26978: LD_VAR 0 4
26982: PUSH
26983: LD_INT 1
26985: PLUS
26986: PPUSH
26987: LD_VAR 0 2
26991: PPUSH
26992: CALL_OW 265
26996: PUSH
26997: LD_VAR 0 2
27001: PPUSH
27002: CALL_OW 262
27006: PUSH
27007: LD_VAR 0 2
27011: PPUSH
27012: CALL_OW 263
27016: PUSH
27017: LD_VAR 0 2
27021: PPUSH
27022: CALL_OW 264
27026: PUSH
27027: LD_VAR 0 2
27031: PPUSH
27032: CALL_OW 248
27036: PUSH
27037: LD_VAR 0 2
27041: PPUSH
27042: CALL_OW 256
27046: PUSH
27047: EMPTY
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 1
27062: ST_TO_ADDR
27063: GO 26804
27065: POP
27066: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27067: LD_VAR 0 4
27071: PPUSH
27072: LD_STRING 06_Vehicles
27074: PPUSH
27075: CALL_OW 39
// end ; YouWin ;
27079: CALL_OW 103
// end ; end_of_file
27083: LD_VAR 0 1
27087: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27088: LD_INT 0
27090: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27091: LD_VAR 0 1
27095: PPUSH
27096: LD_VAR 0 2
27100: PPUSH
27101: CALL 88525 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27105: LD_VAR 0 1
27109: PPUSH
27110: CALL_OW 255
27114: PUSH
27115: LD_INT 2
27117: EQUAL
27118: PUSH
27119: LD_OWVAR 52
27123: AND
27124: PUSH
27125: LD_VAR 0 1
27129: PPUSH
27130: CALL_OW 263
27134: PUSH
27135: LD_INT 1
27137: EQUAL
27138: AND
27139: IFFALSE 27194
// begin driver := IsDrivenBy ( vehicle ) ;
27141: LD_ADDR_VAR 0 3
27145: PUSH
27146: LD_VAR 0 1
27150: PPUSH
27151: CALL_OW 311
27155: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27156: LD_VAR 0 1
27160: PPUSH
27161: LD_INT 211
27163: PPUSH
27164: LD_INT 101
27166: PPUSH
27167: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27171: LD_VAR 0 3
27175: PPUSH
27176: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27180: LD_VAR 0 3
27184: PPUSH
27185: LD_VAR 0 2
27189: PPUSH
27190: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27194: LD_VAR 0 1
27198: PPUSH
27199: CALL_OW 255
27203: PUSH
27204: LD_INT 3
27206: EQUAL
27207: IFFALSE 27238
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27209: LD_ADDR_EXP 60
27213: PUSH
27214: LD_EXP 60
27218: PPUSH
27219: LD_EXP 60
27223: PUSH
27224: LD_INT 1
27226: PLUS
27227: PPUSH
27228: LD_VAR 0 1
27232: PPUSH
27233: CALL_OW 1
27237: ST_TO_ADDR
// end ;
27238: PPOPN 3
27240: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27241: LD_VAR 0 1
27245: PPUSH
27246: CALL_OW 255
27250: PUSH
27251: LD_INT 8
27253: EQUAL
27254: PUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 266
27264: PUSH
27265: LD_INT 4
27267: EQUAL
27268: AND
27269: IFFALSE 27280
// ComUpgrade ( b ) ;
27271: LD_VAR 0 1
27275: PPUSH
27276: CALL_OW 146
// end ;
27280: PPOPN 1
27282: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27283: LD_VAR 0 1
27287: PPUSH
27288: CALL 88467 0 1
// if un = Heike then
27292: LD_VAR 0 1
27296: PUSH
27297: LD_EXP 34
27301: EQUAL
27302: IFFALSE 27311
// YouLost ( Heike ) ;
27304: LD_STRING Heike
27306: PPUSH
27307: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
27311: LD_VAR 0 1
27315: PUSH
27316: LD_INT 22
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 21
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 23
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: PPUSH
27351: CALL_OW 69
27355: IN
27356: IFFALSE 27372
// heikeLoseCounter := heikeLoseCounter + 1 ;
27358: LD_ADDR_EXP 26
27362: PUSH
27363: LD_EXP 26
27367: PUSH
27368: LD_INT 1
27370: PLUS
27371: ST_TO_ADDR
// if un = arDepot then
27372: LD_VAR 0 1
27376: PUSH
27377: LD_EXP 48
27381: EQUAL
27382: IFFALSE 27391
// YouLost ( Base ) ;
27384: LD_STRING Base
27386: PPUSH
27387: CALL_OW 104
// if un = Rolf then
27391: LD_VAR 0 1
27395: PUSH
27396: LD_EXP 47
27400: EQUAL
27401: IFFALSE 27411
// rolfDied := true ;
27403: LD_ADDR_EXP 13
27407: PUSH
27408: LD_INT 1
27410: ST_TO_ADDR
// if un in rolfSquad then
27411: LD_VAR 0 1
27415: PUSH
27416: LD_EXP 51
27420: IN
27421: IFFALSE 27439
// rolfSquad := rolfSquad diff un ;
27423: LD_ADDR_EXP 51
27427: PUSH
27428: LD_EXP 51
27432: PUSH
27433: LD_VAR 0 1
27437: DIFF
27438: ST_TO_ADDR
// if un in omarSquad then
27439: LD_VAR 0 1
27443: PUSH
27444: LD_EXP 52
27448: IN
27449: IFFALSE 27467
// omarSquad := omarSquad diff un ;
27451: LD_ADDR_EXP 52
27455: PUSH
27456: LD_EXP 52
27460: PUSH
27461: LD_VAR 0 1
27465: DIFF
27466: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27467: LD_VAR 0 1
27471: PPUSH
27472: CALL_OW 255
27476: PUSH
27477: LD_INT 3
27479: EQUAL
27480: IFFALSE 27496
// ruLoseCounter := ruLoseCounter + 1 ;
27482: LD_ADDR_EXP 5
27486: PUSH
27487: LD_EXP 5
27491: PUSH
27492: LD_INT 1
27494: PLUS
27495: ST_TO_ADDR
// if un in ruAttackers then
27496: LD_VAR 0 1
27500: PUSH
27501: LD_EXP 61
27505: IN
27506: IFFALSE 27524
// ruAttackers := ruAttackers diff un ;
27508: LD_ADDR_EXP 61
27512: PUSH
27513: LD_EXP 61
27517: PUSH
27518: LD_VAR 0 1
27522: DIFF
27523: ST_TO_ADDR
// end ;
27524: PPOPN 1
27526: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27527: LD_VAR 0 2
27531: PPUSH
27532: CALL_OW 255
27536: PUSH
27537: LD_INT 5
27539: PUSH
27540: LD_INT 8
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: IN
27547: PUSH
27548: LD_VAR 0 2
27552: PPUSH
27553: CALL_OW 256
27557: PUSH
27558: LD_INT 1000
27560: LESS
27561: AND
27562: IFFALSE 27576
// SetLives ( unit , 1000 ) ;
27564: LD_VAR 0 2
27568: PPUSH
27569: LD_INT 1000
27571: PPUSH
27572: CALL_OW 234
// end ;
27576: PPOPN 2
27578: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27579: LD_INT 0
27581: PPUSH
27582: PPUSH
27583: PPUSH
27584: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27585: LD_VAR 0 2
27589: PPUSH
27590: CALL_OW 255
27594: PUSH
27595: LD_INT 8
27597: EQUAL
27598: PUSH
27599: LD_EXP 32
27603: AND
27604: IFFALSE 27621
// ComMoveXY ( un , 221 , 161 ) ;
27606: LD_VAR 0 1
27610: PPUSH
27611: LD_INT 221
27613: PPUSH
27614: LD_INT 161
27616: PPUSH
27617: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27621: LD_VAR 0 2
27625: PPUSH
27626: CALL_OW 255
27630: PUSH
27631: LD_INT 5
27633: EQUAL
27634: PUSH
27635: LD_EXP 23
27639: AND
27640: IFFALSE 27749
// begin ComMoveXY ( un , 333 , 233 ) ;
27642: LD_VAR 0 1
27646: PPUSH
27647: LD_INT 333
27649: PPUSH
27650: LD_INT 233
27652: PPUSH
27653: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27657: LD_INT 334
27659: PPUSH
27660: LD_INT 241
27662: PPUSH
27663: CALL_OW 428
27667: NOT
27668: PUSH
27669: LD_INT 334
27671: PPUSH
27672: LD_INT 241
27674: PPUSH
27675: CALL_OW 428
27679: PPUSH
27680: CALL_OW 266
27684: PUSH
27685: LD_INT 4
27687: EQUAL
27688: NOT
27689: OR
27690: IFFALSE 27694
// exit ;
27692: GO 28274
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27694: LD_VAR 0 1
27698: PPUSH
27699: LD_INT 334
27701: PPUSH
27702: LD_INT 241
27704: PPUSH
27705: CALL_OW 428
27709: PPUSH
27710: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27714: LD_VAR 0 1
27718: PPUSH
27719: LD_INT 1
27721: PPUSH
27722: CALL_OW 183
// AddComExitBuilding ( un ) ;
27726: LD_VAR 0 1
27730: PPUSH
27731: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27735: LD_VAR 0 1
27739: PPUSH
27740: LD_EXP 44
27744: PPUSH
27745: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27749: LD_VAR 0 1
27753: PPUSH
27754: CALL_OW 255
27758: PUSH
27759: LD_INT 3
27761: EQUAL
27762: PUSH
27763: LD_VAR 0 1
27767: PUSH
27768: LD_EXP 61
27772: IN
27773: NOT
27774: AND
27775: IFFALSE 28274
// begin if not IsInArea ( un , ruMainBase ) then
27777: LD_VAR 0 1
27781: PPUSH
27782: LD_INT 10
27784: PPUSH
27785: CALL_OW 308
27789: NOT
27790: IFFALSE 27807
// ComMoveXY ( un , 62 , 98 ) ;
27792: LD_VAR 0 1
27796: PPUSH
27797: LD_INT 62
27799: PPUSH
27800: LD_INT 98
27802: PPUSH
27803: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27807: LD_INT 35
27809: PPUSH
27810: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27814: LD_VAR 0 1
27818: PPUSH
27819: CALL_OW 302
27823: NOT
27824: PUSH
27825: LD_VAR 0 1
27829: PPUSH
27830: LD_INT 10
27832: PPUSH
27833: CALL_OW 308
27837: OR
27838: IFFALSE 27807
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27840: LD_ADDR_EXP 59
27844: PUSH
27845: LD_EXP 59
27849: PPUSH
27850: LD_EXP 59
27854: PUSH
27855: LD_INT 1
27857: PLUS
27858: PPUSH
27859: LD_VAR 0 1
27863: PPUSH
27864: CALL_OW 1
27868: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27869: LD_ADDR_VAR 0 8
27873: PUSH
27874: LD_INT 72
27876: PUSH
27877: LD_INT 12
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: ST_TO_ADDR
// if tmp then
27884: LD_VAR 0 8
27888: IFFALSE 28003
// for i in tmp do
27890: LD_ADDR_VAR 0 5
27894: PUSH
27895: LD_VAR 0 8
27899: PUSH
27900: FOR_IN
27901: IFFALSE 28001
// if UnitsInside ( i ) < 6 then
27903: LD_VAR 0 5
27907: PPUSH
27908: CALL_OW 313
27912: PUSH
27913: LD_INT 6
27915: LESS
27916: IFFALSE 27999
// begin AddComEnterUnit ( un , i ) ;
27918: LD_VAR 0 1
27922: PPUSH
27923: LD_VAR 0 5
27927: PPUSH
27928: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27932: LD_VAR 0 8
27936: PPUSH
27937: LD_INT 22
27939: PUSH
27940: LD_INT 23
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PPUSH
27950: LD_INT 2
27952: PPUSH
27953: CALL_OW 12
27957: ARRAY
27958: PPUSH
27959: LD_INT 1
27961: PPUSH
27962: LD_INT 1
27964: PPUSH
27965: LD_INT 44
27967: PUSH
27968: LD_INT 46
27970: PUSH
27971: LD_INT 47
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: PPUSH
27982: LD_INT 3
27984: PPUSH
27985: CALL_OW 12
27989: ARRAY
27990: PPUSH
27991: CALL_OW 185
// exit ;
27995: POP
27996: POP
27997: GO 28274
// end ;
27999: GO 27900
28001: POP
28002: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28003: LD_ADDR_VAR 0 8
28007: PUSH
28008: LD_INT 10
28010: PPUSH
28011: LD_INT 22
28013: PUSH
28014: LD_INT 3
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 50
28023: PUSH
28024: EMPTY
28025: LIST
28026: PUSH
28027: LD_INT 2
28029: PUSH
28030: LD_INT 30
28032: PUSH
28033: LD_INT 4
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 30
28042: PUSH
28043: LD_INT 5
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 30
28052: PUSH
28053: LD_INT 32
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 30
28062: PUSH
28063: LD_INT 31
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: PPUSH
28082: CALL_OW 70
28086: ST_TO_ADDR
// if not tmp then
28087: LD_VAR 0 8
28091: NOT
28092: IFFALSE 28111
// begin ComMoveXY ( un , 83 , 133 ) ;
28094: LD_VAR 0 1
28098: PPUSH
28099: LD_INT 83
28101: PPUSH
28102: LD_INT 133
28104: PPUSH
28105: CALL_OW 111
// exit ;
28109: GO 28274
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28111: LD_ADDR_VAR 0 6
28115: PUSH
28116: LD_VAR 0 1
28120: PPUSH
28121: LD_VAR 0 8
28125: PPUSH
28126: LD_INT 1
28128: PPUSH
28129: LD_INT 1
28131: PPUSH
28132: CALL 34953 0 4
28136: PUSH
28137: FOR_IN
28138: IFFALSE 28272
// begin case GetBType ( b ) of b_armoury , b_barracks :
28140: LD_VAR 0 6
28144: PPUSH
28145: CALL_OW 266
28149: PUSH
28150: LD_INT 4
28152: DOUBLE
28153: EQUAL
28154: IFTRUE 28164
28156: LD_INT 5
28158: DOUBLE
28159: EQUAL
28160: IFTRUE 28164
28162: GO 28175
28164: POP
// p := 6 ; b_breastwork , b_bunker :
28165: LD_ADDR_VAR 0 7
28169: PUSH
28170: LD_INT 6
28172: ST_TO_ADDR
28173: GO 28201
28175: LD_INT 31
28177: DOUBLE
28178: EQUAL
28179: IFTRUE 28189
28181: LD_INT 32
28183: DOUBLE
28184: EQUAL
28185: IFTRUE 28189
28187: GO 28200
28189: POP
// p := 1 ; end ;
28190: LD_ADDR_VAR 0 7
28194: PUSH
28195: LD_INT 1
28197: ST_TO_ADDR
28198: GO 28201
28200: POP
// if UnitsInside ( b ) < p then
28201: LD_VAR 0 6
28205: PPUSH
28206: CALL_OW 313
28210: PUSH
28211: LD_VAR 0 7
28215: LESS
28216: IFFALSE 28270
// begin ComEnterUnit ( un , b ) ;
28218: LD_VAR 0 1
28222: PPUSH
28223: LD_VAR 0 6
28227: PPUSH
28228: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28232: LD_VAR 0 6
28236: PPUSH
28237: CALL_OW 266
28241: PUSH
28242: LD_INT 4
28244: PUSH
28245: LD_INT 5
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: IN
28252: IFFALSE 28266
// AddComChangeProfession ( un , class_soldier ) ;
28254: LD_VAR 0 1
28258: PPUSH
28259: LD_INT 1
28261: PPUSH
28262: CALL_OW 183
// exit ;
28266: POP
28267: POP
28268: GO 28274
// end ; end ;
28270: GO 28137
28272: POP
28273: POP
// end ; end ;
28274: PPOPN 8
28276: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28277: LD_INT 0
28279: PPUSH
28280: PPUSH
28281: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28282: LD_VAR 0 2
28286: PPUSH
28287: CALL_OW 255
28291: PUSH
28292: LD_INT 3
28294: EQUAL
28295: PUSH
28296: LD_VAR 0 2
28300: PPUSH
28301: CALL_OW 257
28305: PUSH
28306: LD_INT 1
28308: EQUAL
28309: AND
28310: PUSH
28311: LD_VAR 0 2
28315: PUSH
28316: LD_EXP 59
28320: IN
28321: NOT
28322: AND
28323: IFFALSE 28636
// begin ComMoveToArea ( un , ruMainBase ) ;
28325: LD_VAR 0 2
28329: PPUSH
28330: LD_INT 10
28332: PPUSH
28333: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28337: LD_INT 35
28339: PPUSH
28340: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28344: LD_VAR 0 2
28348: PPUSH
28349: CALL_OW 302
28353: NOT
28354: PUSH
28355: LD_VAR 0 2
28359: PPUSH
28360: LD_INT 10
28362: PPUSH
28363: CALL_OW 308
28367: OR
28368: IFFALSE 28337
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28370: LD_ADDR_EXP 59
28374: PUSH
28375: LD_EXP 59
28379: PPUSH
28380: LD_EXP 59
28384: PUSH
28385: LD_INT 1
28387: PLUS
28388: PPUSH
28389: LD_VAR 0 2
28393: PPUSH
28394: CALL_OW 1
28398: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28399: LD_ADDR_VAR 0 4
28403: PUSH
28404: LD_INT 10
28406: PPUSH
28407: LD_INT 22
28409: PUSH
28410: LD_INT 3
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 50
28419: PUSH
28420: EMPTY
28421: LIST
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: LD_INT 30
28428: PUSH
28429: LD_INT 4
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 30
28438: PUSH
28439: LD_INT 5
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 30
28448: PUSH
28449: LD_INT 32
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 30
28458: PUSH
28459: LD_INT 31
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: PPUSH
28478: CALL_OW 70
28482: ST_TO_ADDR
// if not tmp then
28483: LD_VAR 0 4
28487: NOT
28488: IFFALSE 28507
// begin ComMoveXY ( un , 83 , 133 ) ;
28490: LD_VAR 0 2
28494: PPUSH
28495: LD_INT 83
28497: PPUSH
28498: LD_INT 133
28500: PPUSH
28501: CALL_OW 111
// exit ;
28505: GO 28885
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28507: LD_ADDR_VAR 0 5
28511: PUSH
28512: LD_VAR 0 2
28516: PPUSH
28517: LD_VAR 0 4
28521: PPUSH
28522: LD_INT 1
28524: PPUSH
28525: LD_INT 1
28527: PPUSH
28528: CALL 34953 0 4
28532: PUSH
28533: FOR_IN
28534: IFFALSE 28634
// begin case GetBType ( b ) of b_armoury , b_barracks :
28536: LD_VAR 0 5
28540: PPUSH
28541: CALL_OW 266
28545: PUSH
28546: LD_INT 4
28548: DOUBLE
28549: EQUAL
28550: IFTRUE 28560
28552: LD_INT 5
28554: DOUBLE
28555: EQUAL
28556: IFTRUE 28560
28558: GO 28571
28560: POP
// p := 6 ; b_breastwork , b_bunker :
28561: LD_ADDR_VAR 0 3
28565: PUSH
28566: LD_INT 6
28568: ST_TO_ADDR
28569: GO 28597
28571: LD_INT 31
28573: DOUBLE
28574: EQUAL
28575: IFTRUE 28585
28577: LD_INT 32
28579: DOUBLE
28580: EQUAL
28581: IFTRUE 28585
28583: GO 28596
28585: POP
// p := 1 ; end ;
28586: LD_ADDR_VAR 0 3
28590: PUSH
28591: LD_INT 1
28593: ST_TO_ADDR
28594: GO 28597
28596: POP
// if UnitsInside ( b ) < p then
28597: LD_VAR 0 5
28601: PPUSH
28602: CALL_OW 313
28606: PUSH
28607: LD_VAR 0 3
28611: LESS
28612: IFFALSE 28632
// begin ComEnterUnit ( un , b ) ;
28614: LD_VAR 0 2
28618: PPUSH
28619: LD_VAR 0 5
28623: PPUSH
28624: CALL_OW 120
// exit ;
28628: POP
28629: POP
28630: GO 28885
// end ; end ;
28632: GO 28533
28634: POP
28635: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28636: LD_VAR 0 2
28640: PUSH
28641: LD_EXP 59
28645: IN
28646: PUSH
28647: LD_VAR 0 2
28651: PPUSH
28652: CALL_OW 257
28656: PUSH
28657: LD_INT 1
28659: EQUAL
28660: AND
28661: IFFALSE 28885
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28663: LD_ADDR_VAR 0 4
28667: PUSH
28668: LD_INT 10
28670: PPUSH
28671: LD_INT 22
28673: PUSH
28674: LD_INT 3
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 50
28683: PUSH
28684: EMPTY
28685: LIST
28686: PUSH
28687: LD_INT 2
28689: PUSH
28690: LD_INT 30
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 30
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 30
28712: PUSH
28713: LD_INT 32
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 30
28722: PUSH
28723: LD_INT 31
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: PPUSH
28742: CALL_OW 70
28746: ST_TO_ADDR
// if not tmp then
28747: LD_VAR 0 4
28751: NOT
28752: IFFALSE 28756
// exit ;
28754: GO 28885
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28756: LD_ADDR_VAR 0 5
28760: PUSH
28761: LD_VAR 0 2
28765: PPUSH
28766: LD_VAR 0 4
28770: PPUSH
28771: LD_INT 1
28773: PPUSH
28774: LD_INT 1
28776: PPUSH
28777: CALL 34953 0 4
28781: PUSH
28782: FOR_IN
28783: IFFALSE 28883
// begin case GetBType ( b ) of b_armoury , b_barracks :
28785: LD_VAR 0 5
28789: PPUSH
28790: CALL_OW 266
28794: PUSH
28795: LD_INT 4
28797: DOUBLE
28798: EQUAL
28799: IFTRUE 28809
28801: LD_INT 5
28803: DOUBLE
28804: EQUAL
28805: IFTRUE 28809
28807: GO 28820
28809: POP
// p := 6 ; b_breastwork , b_bunker :
28810: LD_ADDR_VAR 0 3
28814: PUSH
28815: LD_INT 6
28817: ST_TO_ADDR
28818: GO 28846
28820: LD_INT 31
28822: DOUBLE
28823: EQUAL
28824: IFTRUE 28834
28826: LD_INT 32
28828: DOUBLE
28829: EQUAL
28830: IFTRUE 28834
28832: GO 28845
28834: POP
// p := 1 ; end ;
28835: LD_ADDR_VAR 0 3
28839: PUSH
28840: LD_INT 1
28842: ST_TO_ADDR
28843: GO 28846
28845: POP
// if UnitsInside ( b ) < p then
28846: LD_VAR 0 5
28850: PPUSH
28851: CALL_OW 313
28855: PUSH
28856: LD_VAR 0 3
28860: LESS
28861: IFFALSE 28881
// begin ComEnterUnit ( un , b ) ;
28863: LD_VAR 0 2
28867: PPUSH
28868: LD_VAR 0 5
28872: PPUSH
28873: CALL_OW 120
// exit ;
28877: POP
28878: POP
28879: GO 28885
// end ; end ;
28881: GO 28782
28883: POP
28884: POP
// end ; end ;
28885: PPOPN 5
28887: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28888: LD_VAR 0 1
28892: PUSH
28893: LD_INT 2
28895: EQUAL
28896: PUSH
28897: LD_VAR 0 2
28901: PUSH
28902: LD_INT 5
28904: PUSH
28905: LD_INT 8
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: IN
28912: AND
28913: IFFALSE 28922
// YouLost ( FriendlyFire ) ;
28915: LD_STRING FriendlyFire
28917: PPUSH
28918: CALL_OW 104
// end ;
28922: PPOPN 2
28924: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28925: LD_VAR 0 1
28929: PPUSH
28930: CALL_OW 255
28934: PUSH
28935: LD_INT 8
28937: EQUAL
28938: PUSH
28939: LD_VAR 0 1
28943: PPUSH
28944: CALL_OW 266
28948: PUSH
28949: LD_INT 5
28951: EQUAL
28952: AND
28953: IFFALSE 28967
// SetClass ( unit , class_mortar ) ;
28955: LD_VAR 0 2
28959: PPUSH
28960: LD_INT 8
28962: PPUSH
28963: CALL_OW 336
// end ; end_of_file
28967: PPOPN 2
28969: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
28970: LD_INT 6
28972: PPUSH
28973: LD_INT 1
28975: PPUSH
28976: CALL_OW 287
28980: PUSH
28981: LD_INT 20
28983: PUSH
28984: LD_INT 18
28986: PUSH
28987: LD_INT 16
28989: PUSH
28990: LD_INT 12
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: PUSH
28999: LD_OWVAR 67
29003: ARRAY
29004: LESS
29005: IFFALSE 29032
29007: GO 29009
29009: DISABLE
// begin enable ;
29010: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
29011: LD_INT 1
29013: PPUSH
29014: LD_INT 5
29016: PPUSH
29017: CALL_OW 12
29021: PPUSH
29022: LD_INT 6
29024: PPUSH
29025: LD_INT 1
29027: PPUSH
29028: CALL_OW 55
// end ;
29032: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
29033: LD_INT 50
29035: PPUSH
29036: CALL_OW 13
29040: PUSH
29041: LD_OWVAR 1
29045: PUSH
29046: LD_INT 58800
29048: PUSH
29049: LD_INT 56700
29051: PUSH
29052: LD_INT 54600
29054: PUSH
29055: LD_INT 52500
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: PUSH
29064: LD_OWVAR 67
29068: ARRAY
29069: LESS
29070: AND
29071: PUSH
29072: LD_INT 21
29074: PPUSH
29075: LD_INT 1
29077: PPUSH
29078: CALL_OW 287
29082: PUSH
29083: LD_INT 10
29085: LESS
29086: AND
29087: IFFALSE 29129
29089: GO 29091
29091: DISABLE
// begin enable ;
29092: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29093: LD_INT 35
29095: PPUSH
29096: LD_INT 350
29098: PPUSH
29099: CALL_OW 12
29103: PPUSH
29104: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29108: LD_INT 1
29110: PPUSH
29111: LD_INT 5
29113: PPUSH
29114: CALL_OW 12
29118: PPUSH
29119: LD_INT 21
29121: PPUSH
29122: LD_INT 1
29124: PPUSH
29125: CALL_OW 55
// end ; end_of_file
29129: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29130: LD_EXP 18
29134: PUSH
29135: LD_EXP 20
29139: AND
29140: PUSH
29141: LD_EXP 17
29145: PUSH
29146: LD_EXP 19
29150: AND
29151: OR
29152: IFFALSE 29471
29154: GO 29156
29156: DISABLE
// begin enable ;
29157: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29158: LD_EXP 18
29162: PUSH
29163: LD_EXP 20
29167: AND
29168: PUSH
29169: LD_EXP 17
29173: PUSH
29174: LD_EXP 19
29178: AND
29179: AND
29180: IFFALSE 29317
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29182: LD_ADDR_OWVAR 47
29186: PUSH
29187: LD_STRING #X106-1a
29189: PUSH
29190: LD_EXP 21
29194: PUSH
29195: LD_INT 16
29197: PPUSH
29198: LD_INT 22
29200: PUSH
29201: LD_INT 2
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 21
29210: PUSH
29211: LD_INT 2
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 33
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 58
29230: PUSH
29231: EMPTY
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: PPUSH
29240: CALL_OW 70
29244: MINUS
29245: PPUSH
29246: CALL 69459 0 1
29250: PUSH
29251: LD_STRING #X106-3a
29253: PUSH
29254: LD_EXP 20
29258: PUSH
29259: LD_STRING #X106-1
29261: PUSH
29262: LD_EXP 51
29266: PUSH
29267: LD_INT 0
29269: PLUS
29270: PUSH
29271: LD_EXP 51
29275: PPUSH
29276: LD_INT 55
29278: PUSH
29279: EMPTY
29280: LIST
29281: PPUSH
29282: CALL_OW 72
29286: PUSH
29287: LD_INT 0
29289: PLUS
29290: MINUS
29291: PPUSH
29292: CALL 69459 0 1
29296: PUSH
29297: LD_STRING #X106-3
29299: PUSH
29300: LD_EXP 19
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: ST_TO_ADDR
// end else
29315: GO 29471
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29317: LD_EXP 18
29321: PUSH
29322: LD_EXP 20
29326: AND
29327: IFFALSE 29414
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29329: LD_ADDR_OWVAR 47
29333: PUSH
29334: LD_STRING #X106-1a
29336: PUSH
29337: LD_EXP 21
29341: PUSH
29342: LD_INT 16
29344: PPUSH
29345: LD_INT 22
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 21
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 33
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 58
29377: PUSH
29378: EMPTY
29379: LIST
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: PPUSH
29387: CALL_OW 70
29391: MINUS
29392: PPUSH
29393: CALL 69459 0 1
29397: PUSH
29398: LD_STRING #X106-3a
29400: PUSH
29401: LD_EXP 20
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: ST_TO_ADDR
// end else
29412: GO 29471
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29414: LD_ADDR_OWVAR 47
29418: PUSH
29419: LD_STRING #X106-1
29421: PUSH
29422: LD_EXP 51
29426: PUSH
29427: LD_INT 0
29429: PLUS
29430: PUSH
29431: LD_EXP 51
29435: PPUSH
29436: LD_INT 55
29438: PUSH
29439: EMPTY
29440: LIST
29441: PPUSH
29442: CALL_OW 72
29446: PUSH
29447: LD_INT 0
29449: PLUS
29450: MINUS
29451: PPUSH
29452: CALL 69459 0 1
29456: PUSH
29457: LD_STRING #X106-3
29459: PUSH
29460: LD_EXP 19
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
// end ; end ; end_of_file
29471: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29472: LD_INT 0
29474: PPUSH
29475: PPUSH
// if exist_mode then
29476: LD_VAR 0 2
29480: IFFALSE 29526
// begin unit := CreateCharacter ( prefix & ident ) ;
29482: LD_ADDR_VAR 0 5
29486: PUSH
29487: LD_VAR 0 3
29491: PUSH
29492: LD_VAR 0 1
29496: STR
29497: PPUSH
29498: CALL_OW 34
29502: ST_TO_ADDR
// if unit then
29503: LD_VAR 0 5
29507: IFFALSE 29524
// DeleteCharacters ( prefix & ident ) ;
29509: LD_VAR 0 3
29513: PUSH
29514: LD_VAR 0 1
29518: STR
29519: PPUSH
29520: CALL_OW 40
// end else
29524: GO 29541
// unit := NewCharacter ( ident ) ;
29526: LD_ADDR_VAR 0 5
29530: PUSH
29531: LD_VAR 0 1
29535: PPUSH
29536: CALL_OW 25
29540: ST_TO_ADDR
// result := unit ;
29541: LD_ADDR_VAR 0 4
29545: PUSH
29546: LD_VAR 0 5
29550: ST_TO_ADDR
// end ;
29551: LD_VAR 0 4
29555: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
// if exist_mode then
29560: LD_VAR 0 2
29564: IFFALSE 29589
// unit := CreateCharacter ( prefix & ident ) else
29566: LD_ADDR_VAR 0 5
29570: PUSH
29571: LD_VAR 0 3
29575: PUSH
29576: LD_VAR 0 1
29580: STR
29581: PPUSH
29582: CALL_OW 34
29586: ST_TO_ADDR
29587: GO 29604
// unit := NewCharacter ( ident ) ;
29589: LD_ADDR_VAR 0 5
29593: PUSH
29594: LD_VAR 0 1
29598: PPUSH
29599: CALL_OW 25
29603: ST_TO_ADDR
// result := unit ;
29604: LD_ADDR_VAR 0 4
29608: PUSH
29609: LD_VAR 0 5
29613: ST_TO_ADDR
// end ;
29614: LD_VAR 0 4
29618: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29619: LD_INT 0
29621: PPUSH
29622: PPUSH
// if not side or not nation then
29623: LD_VAR 0 1
29627: NOT
29628: PUSH
29629: LD_VAR 0 2
29633: NOT
29634: OR
29635: IFFALSE 29639
// exit ;
29637: GO 30407
// case nation of nation_american :
29639: LD_VAR 0 2
29643: PUSH
29644: LD_INT 1
29646: DOUBLE
29647: EQUAL
29648: IFTRUE 29652
29650: GO 29866
29652: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29653: LD_ADDR_VAR 0 4
29657: PUSH
29658: LD_INT 35
29660: PUSH
29661: LD_INT 45
29663: PUSH
29664: LD_INT 46
29666: PUSH
29667: LD_INT 47
29669: PUSH
29670: LD_INT 82
29672: PUSH
29673: LD_INT 83
29675: PUSH
29676: LD_INT 84
29678: PUSH
29679: LD_INT 85
29681: PUSH
29682: LD_INT 86
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: LD_INT 6
29693: PUSH
29694: LD_INT 15
29696: PUSH
29697: LD_INT 16
29699: PUSH
29700: LD_INT 7
29702: PUSH
29703: LD_INT 12
29705: PUSH
29706: LD_INT 13
29708: PUSH
29709: LD_INT 10
29711: PUSH
29712: LD_INT 14
29714: PUSH
29715: LD_INT 20
29717: PUSH
29718: LD_INT 21
29720: PUSH
29721: LD_INT 22
29723: PUSH
29724: LD_INT 25
29726: PUSH
29727: LD_INT 32
29729: PUSH
29730: LD_INT 27
29732: PUSH
29733: LD_INT 36
29735: PUSH
29736: LD_INT 69
29738: PUSH
29739: LD_INT 39
29741: PUSH
29742: LD_INT 34
29744: PUSH
29745: LD_INT 40
29747: PUSH
29748: LD_INT 48
29750: PUSH
29751: LD_INT 49
29753: PUSH
29754: LD_INT 50
29756: PUSH
29757: LD_INT 51
29759: PUSH
29760: LD_INT 52
29762: PUSH
29763: LD_INT 53
29765: PUSH
29766: LD_INT 54
29768: PUSH
29769: LD_INT 55
29771: PUSH
29772: LD_INT 56
29774: PUSH
29775: LD_INT 57
29777: PUSH
29778: LD_INT 58
29780: PUSH
29781: LD_INT 59
29783: PUSH
29784: LD_INT 60
29786: PUSH
29787: LD_INT 61
29789: PUSH
29790: LD_INT 62
29792: PUSH
29793: LD_INT 80
29795: PUSH
29796: LD_INT 82
29798: PUSH
29799: LD_INT 83
29801: PUSH
29802: LD_INT 84
29804: PUSH
29805: LD_INT 85
29807: PUSH
29808: LD_INT 86
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
29864: GO 30331
29866: LD_INT 2
29868: DOUBLE
29869: EQUAL
29870: IFTRUE 29874
29872: GO 30100
29874: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29875: LD_ADDR_VAR 0 4
29879: PUSH
29880: LD_INT 35
29882: PUSH
29883: LD_INT 45
29885: PUSH
29886: LD_INT 46
29888: PUSH
29889: LD_INT 47
29891: PUSH
29892: LD_INT 82
29894: PUSH
29895: LD_INT 83
29897: PUSH
29898: LD_INT 84
29900: PUSH
29901: LD_INT 85
29903: PUSH
29904: LD_INT 87
29906: PUSH
29907: LD_INT 70
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: LD_INT 11
29915: PUSH
29916: LD_INT 3
29918: PUSH
29919: LD_INT 4
29921: PUSH
29922: LD_INT 5
29924: PUSH
29925: LD_INT 6
29927: PUSH
29928: LD_INT 15
29930: PUSH
29931: LD_INT 18
29933: PUSH
29934: LD_INT 7
29936: PUSH
29937: LD_INT 17
29939: PUSH
29940: LD_INT 8
29942: PUSH
29943: LD_INT 20
29945: PUSH
29946: LD_INT 21
29948: PUSH
29949: LD_INT 22
29951: PUSH
29952: LD_INT 72
29954: PUSH
29955: LD_INT 26
29957: PUSH
29958: LD_INT 69
29960: PUSH
29961: LD_INT 39
29963: PUSH
29964: LD_INT 40
29966: PUSH
29967: LD_INT 41
29969: PUSH
29970: LD_INT 42
29972: PUSH
29973: LD_INT 43
29975: PUSH
29976: LD_INT 48
29978: PUSH
29979: LD_INT 49
29981: PUSH
29982: LD_INT 50
29984: PUSH
29985: LD_INT 51
29987: PUSH
29988: LD_INT 52
29990: PUSH
29991: LD_INT 53
29993: PUSH
29994: LD_INT 54
29996: PUSH
29997: LD_INT 55
29999: PUSH
30000: LD_INT 56
30002: PUSH
30003: LD_INT 60
30005: PUSH
30006: LD_INT 61
30008: PUSH
30009: LD_INT 62
30011: PUSH
30012: LD_INT 66
30014: PUSH
30015: LD_INT 67
30017: PUSH
30018: LD_INT 68
30020: PUSH
30021: LD_INT 81
30023: PUSH
30024: LD_INT 82
30026: PUSH
30027: LD_INT 83
30029: PUSH
30030: LD_INT 84
30032: PUSH
30033: LD_INT 85
30035: PUSH
30036: LD_INT 87
30038: PUSH
30039: LD_INT 88
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: ST_TO_ADDR
30098: GO 30331
30100: LD_INT 3
30102: DOUBLE
30103: EQUAL
30104: IFTRUE 30108
30106: GO 30330
30108: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30109: LD_ADDR_VAR 0 4
30113: PUSH
30114: LD_INT 46
30116: PUSH
30117: LD_INT 47
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: LD_INT 82
30128: PUSH
30129: LD_INT 83
30131: PUSH
30132: LD_INT 84
30134: PUSH
30135: LD_INT 85
30137: PUSH
30138: LD_INT 86
30140: PUSH
30141: LD_INT 11
30143: PUSH
30144: LD_INT 9
30146: PUSH
30147: LD_INT 20
30149: PUSH
30150: LD_INT 19
30152: PUSH
30153: LD_INT 21
30155: PUSH
30156: LD_INT 24
30158: PUSH
30159: LD_INT 22
30161: PUSH
30162: LD_INT 25
30164: PUSH
30165: LD_INT 28
30167: PUSH
30168: LD_INT 29
30170: PUSH
30171: LD_INT 30
30173: PUSH
30174: LD_INT 31
30176: PUSH
30177: LD_INT 37
30179: PUSH
30180: LD_INT 38
30182: PUSH
30183: LD_INT 32
30185: PUSH
30186: LD_INT 27
30188: PUSH
30189: LD_INT 33
30191: PUSH
30192: LD_INT 69
30194: PUSH
30195: LD_INT 39
30197: PUSH
30198: LD_INT 34
30200: PUSH
30201: LD_INT 40
30203: PUSH
30204: LD_INT 71
30206: PUSH
30207: LD_INT 23
30209: PUSH
30210: LD_INT 44
30212: PUSH
30213: LD_INT 48
30215: PUSH
30216: LD_INT 49
30218: PUSH
30219: LD_INT 50
30221: PUSH
30222: LD_INT 51
30224: PUSH
30225: LD_INT 52
30227: PUSH
30228: LD_INT 53
30230: PUSH
30231: LD_INT 54
30233: PUSH
30234: LD_INT 55
30236: PUSH
30237: LD_INT 56
30239: PUSH
30240: LD_INT 57
30242: PUSH
30243: LD_INT 58
30245: PUSH
30246: LD_INT 59
30248: PUSH
30249: LD_INT 63
30251: PUSH
30252: LD_INT 64
30254: PUSH
30255: LD_INT 65
30257: PUSH
30258: LD_INT 82
30260: PUSH
30261: LD_INT 83
30263: PUSH
30264: LD_INT 84
30266: PUSH
30267: LD_INT 85
30269: PUSH
30270: LD_INT 86
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: ST_TO_ADDR
30328: GO 30331
30330: POP
// if state > - 1 and state < 3 then
30331: LD_VAR 0 3
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: GREATER
30340: PUSH
30341: LD_VAR 0 3
30345: PUSH
30346: LD_INT 3
30348: LESS
30349: AND
30350: IFFALSE 30407
// for i in result do
30352: LD_ADDR_VAR 0 5
30356: PUSH
30357: LD_VAR 0 4
30361: PUSH
30362: FOR_IN
30363: IFFALSE 30405
// if GetTech ( i , side ) <> state then
30365: LD_VAR 0 5
30369: PPUSH
30370: LD_VAR 0 1
30374: PPUSH
30375: CALL_OW 321
30379: PUSH
30380: LD_VAR 0 3
30384: NONEQUAL
30385: IFFALSE 30403
// result := result diff i ;
30387: LD_ADDR_VAR 0 4
30391: PUSH
30392: LD_VAR 0 4
30396: PUSH
30397: LD_VAR 0 5
30401: DIFF
30402: ST_TO_ADDR
30403: GO 30362
30405: POP
30406: POP
// end ;
30407: LD_VAR 0 4
30411: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30412: LD_INT 0
30414: PPUSH
30415: PPUSH
30416: PPUSH
// result := true ;
30417: LD_ADDR_VAR 0 3
30421: PUSH
30422: LD_INT 1
30424: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30425: LD_ADDR_VAR 0 5
30429: PUSH
30430: LD_VAR 0 2
30434: PPUSH
30435: CALL_OW 480
30439: ST_TO_ADDR
// if not tmp then
30440: LD_VAR 0 5
30444: NOT
30445: IFFALSE 30449
// exit ;
30447: GO 30498
// for i in tmp do
30449: LD_ADDR_VAR 0 4
30453: PUSH
30454: LD_VAR 0 5
30458: PUSH
30459: FOR_IN
30460: IFFALSE 30496
// if GetTech ( i , side ) <> state_researched then
30462: LD_VAR 0 4
30466: PPUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 321
30476: PUSH
30477: LD_INT 2
30479: NONEQUAL
30480: IFFALSE 30494
// begin result := false ;
30482: LD_ADDR_VAR 0 3
30486: PUSH
30487: LD_INT 0
30489: ST_TO_ADDR
// exit ;
30490: POP
30491: POP
30492: GO 30498
// end ;
30494: GO 30459
30496: POP
30497: POP
// end ;
30498: LD_VAR 0 3
30502: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30503: LD_INT 0
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
30517: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30518: LD_VAR 0 1
30522: NOT
30523: PUSH
30524: LD_VAR 0 1
30528: PPUSH
30529: CALL_OW 257
30533: PUSH
30534: LD_INT 9
30536: NONEQUAL
30537: OR
30538: IFFALSE 30542
// exit ;
30540: GO 31115
// side := GetSide ( unit ) ;
30542: LD_ADDR_VAR 0 9
30546: PUSH
30547: LD_VAR 0 1
30551: PPUSH
30552: CALL_OW 255
30556: ST_TO_ADDR
// tech_space := tech_spacanom ;
30557: LD_ADDR_VAR 0 12
30561: PUSH
30562: LD_INT 29
30564: ST_TO_ADDR
// tech_time := tech_taurad ;
30565: LD_ADDR_VAR 0 13
30569: PUSH
30570: LD_INT 28
30572: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30573: LD_ADDR_VAR 0 11
30577: PUSH
30578: LD_VAR 0 1
30582: PPUSH
30583: CALL_OW 310
30587: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30588: LD_VAR 0 11
30592: PPUSH
30593: CALL_OW 247
30597: PUSH
30598: LD_INT 2
30600: EQUAL
30601: IFFALSE 30605
// exit ;
30603: GO 31115
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30605: LD_ADDR_VAR 0 8
30609: PUSH
30610: LD_INT 81
30612: PUSH
30613: LD_VAR 0 9
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 3
30624: PUSH
30625: LD_INT 21
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PPUSH
30643: CALL_OW 69
30647: ST_TO_ADDR
// if not tmp then
30648: LD_VAR 0 8
30652: NOT
30653: IFFALSE 30657
// exit ;
30655: GO 31115
// if in_unit then
30657: LD_VAR 0 11
30661: IFFALSE 30685
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30663: LD_ADDR_VAR 0 10
30667: PUSH
30668: LD_VAR 0 8
30672: PPUSH
30673: LD_VAR 0 11
30677: PPUSH
30678: CALL_OW 74
30682: ST_TO_ADDR
30683: GO 30705
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30685: LD_ADDR_VAR 0 10
30689: PUSH
30690: LD_VAR 0 8
30694: PPUSH
30695: LD_VAR 0 1
30699: PPUSH
30700: CALL_OW 74
30704: ST_TO_ADDR
// if not enemy then
30705: LD_VAR 0 10
30709: NOT
30710: IFFALSE 30714
// exit ;
30712: GO 31115
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30714: LD_VAR 0 11
30718: PUSH
30719: LD_VAR 0 11
30723: PPUSH
30724: LD_VAR 0 10
30728: PPUSH
30729: CALL_OW 296
30733: PUSH
30734: LD_INT 13
30736: GREATER
30737: AND
30738: PUSH
30739: LD_VAR 0 1
30743: PPUSH
30744: LD_VAR 0 10
30748: PPUSH
30749: CALL_OW 296
30753: PUSH
30754: LD_INT 12
30756: GREATER
30757: OR
30758: IFFALSE 30762
// exit ;
30760: GO 31115
// missile := [ 1 ] ;
30762: LD_ADDR_VAR 0 14
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: EMPTY
30771: LIST
30772: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30773: LD_VAR 0 9
30777: PPUSH
30778: LD_VAR 0 12
30782: PPUSH
30783: CALL_OW 325
30787: IFFALSE 30816
// missile := Replace ( missile , missile + 1 , 2 ) ;
30789: LD_ADDR_VAR 0 14
30793: PUSH
30794: LD_VAR 0 14
30798: PPUSH
30799: LD_VAR 0 14
30803: PUSH
30804: LD_INT 1
30806: PLUS
30807: PPUSH
30808: LD_INT 2
30810: PPUSH
30811: CALL_OW 1
30815: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30816: LD_VAR 0 9
30820: PPUSH
30821: LD_VAR 0 13
30825: PPUSH
30826: CALL_OW 325
30830: PUSH
30831: LD_VAR 0 10
30835: PPUSH
30836: CALL_OW 255
30840: PPUSH
30841: LD_VAR 0 13
30845: PPUSH
30846: CALL_OW 325
30850: NOT
30851: AND
30852: IFFALSE 30881
// missile := Replace ( missile , missile + 1 , 3 ) ;
30854: LD_ADDR_VAR 0 14
30858: PUSH
30859: LD_VAR 0 14
30863: PPUSH
30864: LD_VAR 0 14
30868: PUSH
30869: LD_INT 1
30871: PLUS
30872: PPUSH
30873: LD_INT 3
30875: PPUSH
30876: CALL_OW 1
30880: ST_TO_ADDR
// if missile < 2 then
30881: LD_VAR 0 14
30885: PUSH
30886: LD_INT 2
30888: LESS
30889: IFFALSE 30893
// exit ;
30891: GO 31115
// x := GetX ( enemy ) ;
30893: LD_ADDR_VAR 0 4
30897: PUSH
30898: LD_VAR 0 10
30902: PPUSH
30903: CALL_OW 250
30907: ST_TO_ADDR
// y := GetY ( enemy ) ;
30908: LD_ADDR_VAR 0 5
30912: PUSH
30913: LD_VAR 0 10
30917: PPUSH
30918: CALL_OW 251
30922: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30923: LD_ADDR_VAR 0 6
30927: PUSH
30928: LD_VAR 0 4
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PPUSH
30937: LD_INT 1
30939: PPUSH
30940: CALL_OW 12
30944: PLUS
30945: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30946: LD_ADDR_VAR 0 7
30950: PUSH
30951: LD_VAR 0 5
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PPUSH
30960: LD_INT 1
30962: PPUSH
30963: CALL_OW 12
30967: PLUS
30968: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30969: LD_VAR 0 6
30973: PPUSH
30974: LD_VAR 0 7
30978: PPUSH
30979: CALL_OW 488
30983: NOT
30984: IFFALSE 31006
// begin _x := x ;
30986: LD_ADDR_VAR 0 6
30990: PUSH
30991: LD_VAR 0 4
30995: ST_TO_ADDR
// _y := y ;
30996: LD_ADDR_VAR 0 7
31000: PUSH
31001: LD_VAR 0 5
31005: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31006: LD_ADDR_VAR 0 3
31010: PUSH
31011: LD_INT 1
31013: PPUSH
31014: LD_VAR 0 14
31018: PPUSH
31019: CALL_OW 12
31023: ST_TO_ADDR
// case i of 1 :
31024: LD_VAR 0 3
31028: PUSH
31029: LD_INT 1
31031: DOUBLE
31032: EQUAL
31033: IFTRUE 31037
31035: GO 31054
31037: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31038: LD_VAR 0 1
31042: PPUSH
31043: LD_VAR 0 10
31047: PPUSH
31048: CALL_OW 115
31052: GO 31115
31054: LD_INT 2
31056: DOUBLE
31057: EQUAL
31058: IFTRUE 31062
31060: GO 31084
31062: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31063: LD_VAR 0 1
31067: PPUSH
31068: LD_VAR 0 6
31072: PPUSH
31073: LD_VAR 0 7
31077: PPUSH
31078: CALL_OW 153
31082: GO 31115
31084: LD_INT 3
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31114
31092: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31093: LD_VAR 0 1
31097: PPUSH
31098: LD_VAR 0 6
31102: PPUSH
31103: LD_VAR 0 7
31107: PPUSH
31108: CALL_OW 154
31112: GO 31115
31114: POP
// end ;
31115: LD_VAR 0 2
31119: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
31124: PPUSH
31125: PPUSH
31126: PPUSH
31127: PPUSH
// if not unit or not building then
31128: LD_VAR 0 1
31132: NOT
31133: PUSH
31134: LD_VAR 0 2
31138: NOT
31139: OR
31140: IFFALSE 31144
// exit ;
31142: GO 31302
// x := GetX ( building ) ;
31144: LD_ADDR_VAR 0 5
31148: PUSH
31149: LD_VAR 0 2
31153: PPUSH
31154: CALL_OW 250
31158: ST_TO_ADDR
// y := GetY ( building ) ;
31159: LD_ADDR_VAR 0 6
31163: PUSH
31164: LD_VAR 0 2
31168: PPUSH
31169: CALL_OW 251
31173: ST_TO_ADDR
// for i = 0 to 5 do
31174: LD_ADDR_VAR 0 4
31178: PUSH
31179: DOUBLE
31180: LD_INT 0
31182: DEC
31183: ST_TO_ADDR
31184: LD_INT 5
31186: PUSH
31187: FOR_TO
31188: IFFALSE 31300
// begin _x := ShiftX ( x , i , 3 ) ;
31190: LD_ADDR_VAR 0 7
31194: PUSH
31195: LD_VAR 0 5
31199: PPUSH
31200: LD_VAR 0 4
31204: PPUSH
31205: LD_INT 3
31207: PPUSH
31208: CALL_OW 272
31212: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31213: LD_ADDR_VAR 0 8
31217: PUSH
31218: LD_VAR 0 6
31222: PPUSH
31223: LD_VAR 0 4
31227: PPUSH
31228: LD_INT 3
31230: PPUSH
31231: CALL_OW 273
31235: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31236: LD_VAR 0 7
31240: PPUSH
31241: LD_VAR 0 8
31245: PPUSH
31246: CALL_OW 488
31250: NOT
31251: IFFALSE 31255
// continue ;
31253: GO 31187
// if HexInfo ( _x , _y ) = 0 then
31255: LD_VAR 0 7
31259: PPUSH
31260: LD_VAR 0 8
31264: PPUSH
31265: CALL_OW 428
31269: PUSH
31270: LD_INT 0
31272: EQUAL
31273: IFFALSE 31298
// begin ComMoveXY ( unit , _x , _y ) ;
31275: LD_VAR 0 1
31279: PPUSH
31280: LD_VAR 0 7
31284: PPUSH
31285: LD_VAR 0 8
31289: PPUSH
31290: CALL_OW 111
// exit ;
31294: POP
31295: POP
31296: GO 31302
// end ; end ;
31298: GO 31187
31300: POP
31301: POP
// end ;
31302: LD_VAR 0 3
31306: RET
// export function ScanBase ( side , base_area ) ; begin
31307: LD_INT 0
31309: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31310: LD_ADDR_VAR 0 3
31314: PUSH
31315: LD_VAR 0 2
31319: PPUSH
31320: LD_INT 81
31322: PUSH
31323: LD_VAR 0 1
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PPUSH
31332: CALL_OW 70
31336: ST_TO_ADDR
// end ;
31337: LD_VAR 0 3
31341: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31342: LD_INT 0
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
// result := false ;
31348: LD_ADDR_VAR 0 2
31352: PUSH
31353: LD_INT 0
31355: ST_TO_ADDR
// side := GetSide ( unit ) ;
31356: LD_ADDR_VAR 0 3
31360: PUSH
31361: LD_VAR 0 1
31365: PPUSH
31366: CALL_OW 255
31370: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31371: LD_ADDR_VAR 0 4
31375: PUSH
31376: LD_VAR 0 1
31380: PPUSH
31381: CALL_OW 248
31385: ST_TO_ADDR
// case nat of 1 :
31386: LD_VAR 0 4
31390: PUSH
31391: LD_INT 1
31393: DOUBLE
31394: EQUAL
31395: IFTRUE 31399
31397: GO 31410
31399: POP
// tech := tech_lassight ; 2 :
31400: LD_ADDR_VAR 0 5
31404: PUSH
31405: LD_INT 12
31407: ST_TO_ADDR
31408: GO 31449
31410: LD_INT 2
31412: DOUBLE
31413: EQUAL
31414: IFTRUE 31418
31416: GO 31429
31418: POP
// tech := tech_mortar ; 3 :
31419: LD_ADDR_VAR 0 5
31423: PUSH
31424: LD_INT 41
31426: ST_TO_ADDR
31427: GO 31449
31429: LD_INT 3
31431: DOUBLE
31432: EQUAL
31433: IFTRUE 31437
31435: GO 31448
31437: POP
// tech := tech_bazooka ; end ;
31438: LD_ADDR_VAR 0 5
31442: PUSH
31443: LD_INT 44
31445: ST_TO_ADDR
31446: GO 31449
31448: POP
// if Researched ( side , tech ) then
31449: LD_VAR 0 3
31453: PPUSH
31454: LD_VAR 0 5
31458: PPUSH
31459: CALL_OW 325
31463: IFFALSE 31490
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31465: LD_ADDR_VAR 0 2
31469: PUSH
31470: LD_INT 5
31472: PUSH
31473: LD_INT 8
31475: PUSH
31476: LD_INT 9
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: PUSH
31484: LD_VAR 0 4
31488: ARRAY
31489: ST_TO_ADDR
// end ;
31490: LD_VAR 0 2
31494: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31495: LD_INT 0
31497: PPUSH
31498: PPUSH
31499: PPUSH
// if not mines then
31500: LD_VAR 0 2
31504: NOT
31505: IFFALSE 31509
// exit ;
31507: GO 31653
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31509: LD_ADDR_VAR 0 5
31513: PUSH
31514: LD_INT 81
31516: PUSH
31517: LD_VAR 0 1
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 3
31528: PUSH
31529: LD_INT 21
31531: PUSH
31532: LD_INT 3
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PPUSH
31547: CALL_OW 69
31551: ST_TO_ADDR
// for i in mines do
31552: LD_ADDR_VAR 0 4
31556: PUSH
31557: LD_VAR 0 2
31561: PUSH
31562: FOR_IN
31563: IFFALSE 31651
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31565: LD_VAR 0 4
31569: PUSH
31570: LD_INT 1
31572: ARRAY
31573: PPUSH
31574: LD_VAR 0 4
31578: PUSH
31579: LD_INT 2
31581: ARRAY
31582: PPUSH
31583: CALL_OW 458
31587: NOT
31588: IFFALSE 31592
// continue ;
31590: GO 31562
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31592: LD_VAR 0 4
31596: PUSH
31597: LD_INT 1
31599: ARRAY
31600: PPUSH
31601: LD_VAR 0 4
31605: PUSH
31606: LD_INT 2
31608: ARRAY
31609: PPUSH
31610: CALL_OW 428
31614: PUSH
31615: LD_VAR 0 5
31619: IN
31620: IFFALSE 31649
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31622: LD_VAR 0 4
31626: PUSH
31627: LD_INT 1
31629: ARRAY
31630: PPUSH
31631: LD_VAR 0 4
31635: PUSH
31636: LD_INT 2
31638: ARRAY
31639: PPUSH
31640: LD_VAR 0 1
31644: PPUSH
31645: CALL_OW 456
// end ;
31649: GO 31562
31651: POP
31652: POP
// end ;
31653: LD_VAR 0 3
31657: RET
// export function Count ( array ) ; begin
31658: LD_INT 0
31660: PPUSH
// result := array + 0 ;
31661: LD_ADDR_VAR 0 2
31665: PUSH
31666: LD_VAR 0 1
31670: PUSH
31671: LD_INT 0
31673: PLUS
31674: ST_TO_ADDR
// end ;
31675: LD_VAR 0 2
31679: RET
// export function IsEmpty ( building ) ; begin
31680: LD_INT 0
31682: PPUSH
// if not building then
31683: LD_VAR 0 1
31687: NOT
31688: IFFALSE 31692
// exit ;
31690: GO 31735
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31692: LD_ADDR_VAR 0 2
31696: PUSH
31697: LD_VAR 0 1
31701: PUSH
31702: LD_INT 22
31704: PUSH
31705: LD_VAR 0 1
31709: PPUSH
31710: CALL_OW 255
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 58
31721: PUSH
31722: EMPTY
31723: LIST
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PPUSH
31729: CALL_OW 69
31733: IN
31734: ST_TO_ADDR
// end ;
31735: LD_VAR 0 2
31739: RET
// export function IsNotFull ( building ) ; var places ; begin
31740: LD_INT 0
31742: PPUSH
31743: PPUSH
// if not building then
31744: LD_VAR 0 1
31748: NOT
31749: IFFALSE 31753
// exit ;
31751: GO 31781
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31753: LD_ADDR_VAR 0 2
31757: PUSH
31758: LD_VAR 0 1
31762: PPUSH
31763: LD_INT 3
31765: PUSH
31766: LD_INT 62
31768: PUSH
31769: EMPTY
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PPUSH
31776: CALL_OW 72
31780: ST_TO_ADDR
// end ;
31781: LD_VAR 0 2
31785: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31786: LD_INT 0
31788: PPUSH
31789: PPUSH
31790: PPUSH
31791: PPUSH
// tmp := [ ] ;
31792: LD_ADDR_VAR 0 3
31796: PUSH
31797: EMPTY
31798: ST_TO_ADDR
// list := [ ] ;
31799: LD_ADDR_VAR 0 5
31803: PUSH
31804: EMPTY
31805: ST_TO_ADDR
// for i = 16 to 25 do
31806: LD_ADDR_VAR 0 4
31810: PUSH
31811: DOUBLE
31812: LD_INT 16
31814: DEC
31815: ST_TO_ADDR
31816: LD_INT 25
31818: PUSH
31819: FOR_TO
31820: IFFALSE 31893
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31822: LD_ADDR_VAR 0 3
31826: PUSH
31827: LD_VAR 0 3
31831: PUSH
31832: LD_INT 22
31834: PUSH
31835: LD_VAR 0 1
31839: PPUSH
31840: CALL_OW 255
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 91
31851: PUSH
31852: LD_VAR 0 1
31856: PUSH
31857: LD_INT 6
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 30
31867: PUSH
31868: LD_VAR 0 4
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: PUSH
31882: EMPTY
31883: LIST
31884: PPUSH
31885: CALL_OW 69
31889: ADD
31890: ST_TO_ADDR
31891: GO 31819
31893: POP
31894: POP
// for i = 1 to tmp do
31895: LD_ADDR_VAR 0 4
31899: PUSH
31900: DOUBLE
31901: LD_INT 1
31903: DEC
31904: ST_TO_ADDR
31905: LD_VAR 0 3
31909: PUSH
31910: FOR_TO
31911: IFFALSE 31999
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31913: LD_ADDR_VAR 0 5
31917: PUSH
31918: LD_VAR 0 5
31922: PUSH
31923: LD_VAR 0 3
31927: PUSH
31928: LD_VAR 0 4
31932: ARRAY
31933: PPUSH
31934: CALL_OW 266
31938: PUSH
31939: LD_VAR 0 3
31943: PUSH
31944: LD_VAR 0 4
31948: ARRAY
31949: PPUSH
31950: CALL_OW 250
31954: PUSH
31955: LD_VAR 0 3
31959: PUSH
31960: LD_VAR 0 4
31964: ARRAY
31965: PPUSH
31966: CALL_OW 251
31970: PUSH
31971: LD_VAR 0 3
31975: PUSH
31976: LD_VAR 0 4
31980: ARRAY
31981: PPUSH
31982: CALL_OW 254
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: PUSH
31993: EMPTY
31994: LIST
31995: ADD
31996: ST_TO_ADDR
31997: GO 31910
31999: POP
32000: POP
// result := list ;
32001: LD_ADDR_VAR 0 2
32005: PUSH
32006: LD_VAR 0 5
32010: ST_TO_ADDR
// end ;
32011: LD_VAR 0 2
32015: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32016: LD_INT 0
32018: PPUSH
32019: PPUSH
32020: PPUSH
32021: PPUSH
32022: PPUSH
32023: PPUSH
32024: PPUSH
// if not factory then
32025: LD_VAR 0 1
32029: NOT
32030: IFFALSE 32034
// exit ;
32032: GO 32627
// if control = control_apeman then
32034: LD_VAR 0 4
32038: PUSH
32039: LD_INT 5
32041: EQUAL
32042: IFFALSE 32151
// begin tmp := UnitsInside ( factory ) ;
32044: LD_ADDR_VAR 0 8
32048: PUSH
32049: LD_VAR 0 1
32053: PPUSH
32054: CALL_OW 313
32058: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32059: LD_VAR 0 8
32063: PPUSH
32064: LD_INT 25
32066: PUSH
32067: LD_INT 12
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PPUSH
32074: CALL_OW 72
32078: NOT
32079: IFFALSE 32089
// control := control_manual ;
32081: LD_ADDR_VAR 0 4
32085: PUSH
32086: LD_INT 1
32088: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32089: LD_ADDR_VAR 0 8
32093: PUSH
32094: LD_VAR 0 1
32098: PPUSH
32099: CALL 31786 0 1
32103: ST_TO_ADDR
// if tmp then
32104: LD_VAR 0 8
32108: IFFALSE 32151
// begin for i in tmp do
32110: LD_ADDR_VAR 0 7
32114: PUSH
32115: LD_VAR 0 8
32119: PUSH
32120: FOR_IN
32121: IFFALSE 32149
// if i [ 1 ] = b_ext_radio then
32123: LD_VAR 0 7
32127: PUSH
32128: LD_INT 1
32130: ARRAY
32131: PUSH
32132: LD_INT 22
32134: EQUAL
32135: IFFALSE 32147
// begin control := control_remote ;
32137: LD_ADDR_VAR 0 4
32141: PUSH
32142: LD_INT 2
32144: ST_TO_ADDR
// break ;
32145: GO 32149
// end ;
32147: GO 32120
32149: POP
32150: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32151: LD_VAR 0 1
32155: PPUSH
32156: LD_VAR 0 2
32160: PPUSH
32161: LD_VAR 0 3
32165: PPUSH
32166: LD_VAR 0 4
32170: PPUSH
32171: LD_VAR 0 5
32175: PPUSH
32176: CALL_OW 448
32180: IFFALSE 32215
// begin result := [ chassis , engine , control , weapon ] ;
32182: LD_ADDR_VAR 0 6
32186: PUSH
32187: LD_VAR 0 2
32191: PUSH
32192: LD_VAR 0 3
32196: PUSH
32197: LD_VAR 0 4
32201: PUSH
32202: LD_VAR 0 5
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: ST_TO_ADDR
// exit ;
32213: GO 32627
// end ; _chassis := AvailableChassisList ( factory ) ;
32215: LD_ADDR_VAR 0 9
32219: PUSH
32220: LD_VAR 0 1
32224: PPUSH
32225: CALL_OW 475
32229: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32230: LD_ADDR_VAR 0 11
32234: PUSH
32235: LD_VAR 0 1
32239: PPUSH
32240: CALL_OW 476
32244: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32245: LD_ADDR_VAR 0 12
32249: PUSH
32250: LD_VAR 0 1
32254: PPUSH
32255: CALL_OW 477
32259: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32260: LD_ADDR_VAR 0 10
32264: PUSH
32265: LD_VAR 0 1
32269: PPUSH
32270: CALL_OW 478
32274: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32275: LD_VAR 0 9
32279: NOT
32280: PUSH
32281: LD_VAR 0 11
32285: NOT
32286: OR
32287: PUSH
32288: LD_VAR 0 12
32292: NOT
32293: OR
32294: PUSH
32295: LD_VAR 0 10
32299: NOT
32300: OR
32301: IFFALSE 32336
// begin result := [ chassis , engine , control , weapon ] ;
32303: LD_ADDR_VAR 0 6
32307: PUSH
32308: LD_VAR 0 2
32312: PUSH
32313: LD_VAR 0 3
32317: PUSH
32318: LD_VAR 0 4
32322: PUSH
32323: LD_VAR 0 5
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: ST_TO_ADDR
// exit ;
32334: GO 32627
// end ; if not chassis in _chassis then
32336: LD_VAR 0 2
32340: PUSH
32341: LD_VAR 0 9
32345: IN
32346: NOT
32347: IFFALSE 32373
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32349: LD_ADDR_VAR 0 2
32353: PUSH
32354: LD_VAR 0 9
32358: PUSH
32359: LD_INT 1
32361: PPUSH
32362: LD_VAR 0 9
32366: PPUSH
32367: CALL_OW 12
32371: ARRAY
32372: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32373: LD_VAR 0 2
32377: PPUSH
32378: LD_VAR 0 3
32382: PPUSH
32383: CALL 32632 0 2
32387: NOT
32388: IFFALSE 32447
// repeat engine := _engine [ 1 ] ;
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_VAR 0 11
32399: PUSH
32400: LD_INT 1
32402: ARRAY
32403: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32404: LD_ADDR_VAR 0 11
32408: PUSH
32409: LD_VAR 0 11
32413: PPUSH
32414: LD_INT 1
32416: PPUSH
32417: CALL_OW 3
32421: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32422: LD_VAR 0 2
32426: PPUSH
32427: LD_VAR 0 3
32431: PPUSH
32432: CALL 32632 0 2
32436: PUSH
32437: LD_VAR 0 11
32441: PUSH
32442: EMPTY
32443: EQUAL
32444: OR
32445: IFFALSE 32390
// if not control in _control then
32447: LD_VAR 0 4
32451: PUSH
32452: LD_VAR 0 12
32456: IN
32457: NOT
32458: IFFALSE 32484
// control := _control [ rand ( 1 , _control ) ] ;
32460: LD_ADDR_VAR 0 4
32464: PUSH
32465: LD_VAR 0 12
32469: PUSH
32470: LD_INT 1
32472: PPUSH
32473: LD_VAR 0 12
32477: PPUSH
32478: CALL_OW 12
32482: ARRAY
32483: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32484: LD_VAR 0 2
32488: PPUSH
32489: LD_VAR 0 5
32493: PPUSH
32494: CALL 32852 0 2
32498: NOT
32499: IFFALSE 32558
// repeat weapon := _weapon [ 1 ] ;
32501: LD_ADDR_VAR 0 5
32505: PUSH
32506: LD_VAR 0 10
32510: PUSH
32511: LD_INT 1
32513: ARRAY
32514: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32515: LD_ADDR_VAR 0 10
32519: PUSH
32520: LD_VAR 0 10
32524: PPUSH
32525: LD_INT 1
32527: PPUSH
32528: CALL_OW 3
32532: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32533: LD_VAR 0 2
32537: PPUSH
32538: LD_VAR 0 5
32542: PPUSH
32543: CALL 32852 0 2
32547: PUSH
32548: LD_VAR 0 10
32552: PUSH
32553: EMPTY
32554: EQUAL
32555: OR
32556: IFFALSE 32501
// result := [ ] ;
32558: LD_ADDR_VAR 0 6
32562: PUSH
32563: EMPTY
32564: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32565: LD_VAR 0 1
32569: PPUSH
32570: LD_VAR 0 2
32574: PPUSH
32575: LD_VAR 0 3
32579: PPUSH
32580: LD_VAR 0 4
32584: PPUSH
32585: LD_VAR 0 5
32589: PPUSH
32590: CALL_OW 448
32594: IFFALSE 32627
// result := [ chassis , engine , control , weapon ] ;
32596: LD_ADDR_VAR 0 6
32600: PUSH
32601: LD_VAR 0 2
32605: PUSH
32606: LD_VAR 0 3
32610: PUSH
32611: LD_VAR 0 4
32615: PUSH
32616: LD_VAR 0 5
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
// end ;
32627: LD_VAR 0 6
32631: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32632: LD_INT 0
32634: PPUSH
// if not chassis or not engine then
32635: LD_VAR 0 1
32639: NOT
32640: PUSH
32641: LD_VAR 0 2
32645: NOT
32646: OR
32647: IFFALSE 32651
// exit ;
32649: GO 32847
// case engine of engine_solar :
32651: LD_VAR 0 2
32655: PUSH
32656: LD_INT 2
32658: DOUBLE
32659: EQUAL
32660: IFTRUE 32664
32662: GO 32702
32664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32665: LD_ADDR_VAR 0 3
32669: PUSH
32670: LD_INT 11
32672: PUSH
32673: LD_INT 12
32675: PUSH
32676: LD_INT 13
32678: PUSH
32679: LD_INT 14
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: LD_INT 3
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: ST_TO_ADDR
32700: GO 32831
32702: LD_INT 1
32704: DOUBLE
32705: EQUAL
32706: IFTRUE 32710
32708: GO 32772
32710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32711: LD_ADDR_VAR 0 3
32715: PUSH
32716: LD_INT 11
32718: PUSH
32719: LD_INT 12
32721: PUSH
32722: LD_INT 13
32724: PUSH
32725: LD_INT 14
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: LD_INT 3
32736: PUSH
32737: LD_INT 4
32739: PUSH
32740: LD_INT 5
32742: PUSH
32743: LD_INT 21
32745: PUSH
32746: LD_INT 23
32748: PUSH
32749: LD_INT 22
32751: PUSH
32752: LD_INT 24
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: ST_TO_ADDR
32770: GO 32831
32772: LD_INT 3
32774: DOUBLE
32775: EQUAL
32776: IFTRUE 32780
32778: GO 32830
32780: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32781: LD_ADDR_VAR 0 3
32785: PUSH
32786: LD_INT 13
32788: PUSH
32789: LD_INT 14
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 3
32797: PUSH
32798: LD_INT 4
32800: PUSH
32801: LD_INT 5
32803: PUSH
32804: LD_INT 21
32806: PUSH
32807: LD_INT 22
32809: PUSH
32810: LD_INT 23
32812: PUSH
32813: LD_INT 24
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: ST_TO_ADDR
32828: GO 32831
32830: POP
// result := ( chassis in result ) ;
32831: LD_ADDR_VAR 0 3
32835: PUSH
32836: LD_VAR 0 1
32840: PUSH
32841: LD_VAR 0 3
32845: IN
32846: ST_TO_ADDR
// end ;
32847: LD_VAR 0 3
32851: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32852: LD_INT 0
32854: PPUSH
// if not chassis or not weapon then
32855: LD_VAR 0 1
32859: NOT
32860: PUSH
32861: LD_VAR 0 2
32865: NOT
32866: OR
32867: IFFALSE 32871
// exit ;
32869: GO 33931
// case weapon of us_machine_gun :
32871: LD_VAR 0 2
32875: PUSH
32876: LD_INT 2
32878: DOUBLE
32879: EQUAL
32880: IFTRUE 32884
32882: GO 32914
32884: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32885: LD_ADDR_VAR 0 3
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: LD_INT 2
32895: PUSH
32896: LD_INT 3
32898: PUSH
32899: LD_INT 4
32901: PUSH
32902: LD_INT 5
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: ST_TO_ADDR
32912: GO 33915
32914: LD_INT 3
32916: DOUBLE
32917: EQUAL
32918: IFTRUE 32922
32920: GO 32952
32922: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32923: LD_ADDR_VAR 0 3
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: LD_INT 2
32933: PUSH
32934: LD_INT 3
32936: PUSH
32937: LD_INT 4
32939: PUSH
32940: LD_INT 5
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: ST_TO_ADDR
32950: GO 33915
32952: LD_INT 11
32954: DOUBLE
32955: EQUAL
32956: IFTRUE 32960
32958: GO 32990
32960: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32961: LD_ADDR_VAR 0 3
32965: PUSH
32966: LD_INT 1
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: LD_INT 3
32974: PUSH
32975: LD_INT 4
32977: PUSH
32978: LD_INT 5
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: ST_TO_ADDR
32988: GO 33915
32990: LD_INT 4
32992: DOUBLE
32993: EQUAL
32994: IFTRUE 32998
32996: GO 33024
32998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32999: LD_ADDR_VAR 0 3
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: LD_INT 3
33009: PUSH
33010: LD_INT 4
33012: PUSH
33013: LD_INT 5
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: ST_TO_ADDR
33022: GO 33915
33024: LD_INT 5
33026: DOUBLE
33027: EQUAL
33028: IFTRUE 33032
33030: GO 33058
33032: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33033: LD_ADDR_VAR 0 3
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: LD_INT 3
33043: PUSH
33044: LD_INT 4
33046: PUSH
33047: LD_INT 5
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: ST_TO_ADDR
33056: GO 33915
33058: LD_INT 9
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33092
33066: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33067: LD_ADDR_VAR 0 3
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: LD_INT 4
33080: PUSH
33081: LD_INT 5
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: ST_TO_ADDR
33090: GO 33915
33092: LD_INT 7
33094: DOUBLE
33095: EQUAL
33096: IFTRUE 33100
33098: GO 33126
33100: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33101: LD_ADDR_VAR 0 3
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 3
33111: PUSH
33112: LD_INT 4
33114: PUSH
33115: LD_INT 5
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: ST_TO_ADDR
33124: GO 33915
33126: LD_INT 12
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33134
33132: GO 33160
33134: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33135: LD_ADDR_VAR 0 3
33139: PUSH
33140: LD_INT 2
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: LD_INT 4
33148: PUSH
33149: LD_INT 5
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: ST_TO_ADDR
33158: GO 33915
33160: LD_INT 13
33162: DOUBLE
33163: EQUAL
33164: IFTRUE 33168
33166: GO 33194
33168: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33169: LD_ADDR_VAR 0 3
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: LD_INT 4
33182: PUSH
33183: LD_INT 5
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: ST_TO_ADDR
33192: GO 33915
33194: LD_INT 14
33196: DOUBLE
33197: EQUAL
33198: IFTRUE 33202
33200: GO 33220
33202: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33203: LD_ADDR_VAR 0 3
33207: PUSH
33208: LD_INT 4
33210: PUSH
33211: LD_INT 5
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: ST_TO_ADDR
33218: GO 33915
33220: LD_INT 6
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33228
33226: GO 33246
33228: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33229: LD_ADDR_VAR 0 3
33233: PUSH
33234: LD_INT 4
33236: PUSH
33237: LD_INT 5
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: ST_TO_ADDR
33244: GO 33915
33246: LD_INT 10
33248: DOUBLE
33249: EQUAL
33250: IFTRUE 33254
33252: GO 33272
33254: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33255: LD_ADDR_VAR 0 3
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: LD_INT 5
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: ST_TO_ADDR
33270: GO 33915
33272: LD_INT 22
33274: DOUBLE
33275: EQUAL
33276: IFTRUE 33280
33278: GO 33306
33280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33281: LD_ADDR_VAR 0 3
33285: PUSH
33286: LD_INT 11
33288: PUSH
33289: LD_INT 12
33291: PUSH
33292: LD_INT 13
33294: PUSH
33295: LD_INT 14
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: ST_TO_ADDR
33304: GO 33915
33306: LD_INT 23
33308: DOUBLE
33309: EQUAL
33310: IFTRUE 33314
33312: GO 33340
33314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33315: LD_ADDR_VAR 0 3
33319: PUSH
33320: LD_INT 11
33322: PUSH
33323: LD_INT 12
33325: PUSH
33326: LD_INT 13
33328: PUSH
33329: LD_INT 14
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: ST_TO_ADDR
33338: GO 33915
33340: LD_INT 24
33342: DOUBLE
33343: EQUAL
33344: IFTRUE 33348
33346: GO 33374
33348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33349: LD_ADDR_VAR 0 3
33353: PUSH
33354: LD_INT 11
33356: PUSH
33357: LD_INT 12
33359: PUSH
33360: LD_INT 13
33362: PUSH
33363: LD_INT 14
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: ST_TO_ADDR
33372: GO 33915
33374: LD_INT 30
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33408
33382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33383: LD_ADDR_VAR 0 3
33387: PUSH
33388: LD_INT 11
33390: PUSH
33391: LD_INT 12
33393: PUSH
33394: LD_INT 13
33396: PUSH
33397: LD_INT 14
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: ST_TO_ADDR
33406: GO 33915
33408: LD_INT 25
33410: DOUBLE
33411: EQUAL
33412: IFTRUE 33416
33414: GO 33434
33416: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33417: LD_ADDR_VAR 0 3
33421: PUSH
33422: LD_INT 13
33424: PUSH
33425: LD_INT 14
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: ST_TO_ADDR
33432: GO 33915
33434: LD_INT 27
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33442
33440: GO 33460
33442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33443: LD_ADDR_VAR 0 3
33447: PUSH
33448: LD_INT 13
33450: PUSH
33451: LD_INT 14
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: ST_TO_ADDR
33458: GO 33915
33460: LD_INT 92
33462: DOUBLE
33463: EQUAL
33464: IFTRUE 33468
33466: GO 33494
33468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33469: LD_ADDR_VAR 0 3
33473: PUSH
33474: LD_INT 11
33476: PUSH
33477: LD_INT 12
33479: PUSH
33480: LD_INT 13
33482: PUSH
33483: LD_INT 14
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: ST_TO_ADDR
33492: GO 33915
33494: LD_INT 28
33496: DOUBLE
33497: EQUAL
33498: IFTRUE 33502
33500: GO 33520
33502: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33503: LD_ADDR_VAR 0 3
33507: PUSH
33508: LD_INT 13
33510: PUSH
33511: LD_INT 14
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: ST_TO_ADDR
33518: GO 33915
33520: LD_INT 29
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33528
33526: GO 33546
33528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33529: LD_ADDR_VAR 0 3
33533: PUSH
33534: LD_INT 13
33536: PUSH
33537: LD_INT 14
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: ST_TO_ADDR
33544: GO 33915
33546: LD_INT 31
33548: DOUBLE
33549: EQUAL
33550: IFTRUE 33554
33552: GO 33572
33554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33555: LD_ADDR_VAR 0 3
33559: PUSH
33560: LD_INT 13
33562: PUSH
33563: LD_INT 14
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: ST_TO_ADDR
33570: GO 33915
33572: LD_INT 26
33574: DOUBLE
33575: EQUAL
33576: IFTRUE 33580
33578: GO 33598
33580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33581: LD_ADDR_VAR 0 3
33585: PUSH
33586: LD_INT 13
33588: PUSH
33589: LD_INT 14
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: ST_TO_ADDR
33596: GO 33915
33598: LD_INT 42
33600: DOUBLE
33601: EQUAL
33602: IFTRUE 33606
33604: GO 33632
33606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33607: LD_ADDR_VAR 0 3
33611: PUSH
33612: LD_INT 21
33614: PUSH
33615: LD_INT 22
33617: PUSH
33618: LD_INT 23
33620: PUSH
33621: LD_INT 24
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: ST_TO_ADDR
33630: GO 33915
33632: LD_INT 43
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33640
33638: GO 33666
33640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33641: LD_ADDR_VAR 0 3
33645: PUSH
33646: LD_INT 21
33648: PUSH
33649: LD_INT 22
33651: PUSH
33652: LD_INT 23
33654: PUSH
33655: LD_INT 24
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: ST_TO_ADDR
33664: GO 33915
33666: LD_INT 44
33668: DOUBLE
33669: EQUAL
33670: IFTRUE 33674
33672: GO 33700
33674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33675: LD_ADDR_VAR 0 3
33679: PUSH
33680: LD_INT 21
33682: PUSH
33683: LD_INT 22
33685: PUSH
33686: LD_INT 23
33688: PUSH
33689: LD_INT 24
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: ST_TO_ADDR
33698: GO 33915
33700: LD_INT 45
33702: DOUBLE
33703: EQUAL
33704: IFTRUE 33708
33706: GO 33734
33708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33709: LD_ADDR_VAR 0 3
33713: PUSH
33714: LD_INT 21
33716: PUSH
33717: LD_INT 22
33719: PUSH
33720: LD_INT 23
33722: PUSH
33723: LD_INT 24
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: ST_TO_ADDR
33732: GO 33915
33734: LD_INT 49
33736: DOUBLE
33737: EQUAL
33738: IFTRUE 33742
33740: GO 33768
33742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33743: LD_ADDR_VAR 0 3
33747: PUSH
33748: LD_INT 21
33750: PUSH
33751: LD_INT 22
33753: PUSH
33754: LD_INT 23
33756: PUSH
33757: LD_INT 24
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: ST_TO_ADDR
33766: GO 33915
33768: LD_INT 51
33770: DOUBLE
33771: EQUAL
33772: IFTRUE 33776
33774: GO 33802
33776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33777: LD_ADDR_VAR 0 3
33781: PUSH
33782: LD_INT 21
33784: PUSH
33785: LD_INT 22
33787: PUSH
33788: LD_INT 23
33790: PUSH
33791: LD_INT 24
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: ST_TO_ADDR
33800: GO 33915
33802: LD_INT 52
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 33836
33810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33811: LD_ADDR_VAR 0 3
33815: PUSH
33816: LD_INT 21
33818: PUSH
33819: LD_INT 22
33821: PUSH
33822: LD_INT 23
33824: PUSH
33825: LD_INT 24
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: ST_TO_ADDR
33834: GO 33915
33836: LD_INT 53
33838: DOUBLE
33839: EQUAL
33840: IFTRUE 33844
33842: GO 33862
33844: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33845: LD_ADDR_VAR 0 3
33849: PUSH
33850: LD_INT 23
33852: PUSH
33853: LD_INT 24
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: ST_TO_ADDR
33860: GO 33915
33862: LD_INT 46
33864: DOUBLE
33865: EQUAL
33866: IFTRUE 33870
33868: GO 33888
33870: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33871: LD_ADDR_VAR 0 3
33875: PUSH
33876: LD_INT 23
33878: PUSH
33879: LD_INT 24
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: ST_TO_ADDR
33886: GO 33915
33888: LD_INT 47
33890: DOUBLE
33891: EQUAL
33892: IFTRUE 33896
33894: GO 33914
33896: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33897: LD_ADDR_VAR 0 3
33901: PUSH
33902: LD_INT 23
33904: PUSH
33905: LD_INT 24
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: ST_TO_ADDR
33912: GO 33915
33914: POP
// result := ( chassis in result ) ;
33915: LD_ADDR_VAR 0 3
33919: PUSH
33920: LD_VAR 0 1
33924: PUSH
33925: LD_VAR 0 3
33929: IN
33930: ST_TO_ADDR
// end ;
33931: LD_VAR 0 3
33935: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33936: LD_INT 0
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
33942: PPUSH
33943: PPUSH
33944: PPUSH
// result := array ;
33945: LD_ADDR_VAR 0 5
33949: PUSH
33950: LD_VAR 0 1
33954: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33955: LD_VAR 0 1
33959: NOT
33960: PUSH
33961: LD_VAR 0 2
33965: NOT
33966: OR
33967: PUSH
33968: LD_VAR 0 3
33972: NOT
33973: OR
33974: PUSH
33975: LD_VAR 0 2
33979: PUSH
33980: LD_VAR 0 1
33984: GREATER
33985: OR
33986: PUSH
33987: LD_VAR 0 3
33991: PUSH
33992: LD_VAR 0 1
33996: GREATER
33997: OR
33998: IFFALSE 34002
// exit ;
34000: GO 34298
// if direction then
34002: LD_VAR 0 4
34006: IFFALSE 34070
// begin d := 1 ;
34008: LD_ADDR_VAR 0 9
34012: PUSH
34013: LD_INT 1
34015: ST_TO_ADDR
// if i_from > i_to then
34016: LD_VAR 0 2
34020: PUSH
34021: LD_VAR 0 3
34025: GREATER
34026: IFFALSE 34052
// length := ( array - i_from ) + i_to else
34028: LD_ADDR_VAR 0 11
34032: PUSH
34033: LD_VAR 0 1
34037: PUSH
34038: LD_VAR 0 2
34042: MINUS
34043: PUSH
34044: LD_VAR 0 3
34048: PLUS
34049: ST_TO_ADDR
34050: GO 34068
// length := i_to - i_from ;
34052: LD_ADDR_VAR 0 11
34056: PUSH
34057: LD_VAR 0 3
34061: PUSH
34062: LD_VAR 0 2
34066: MINUS
34067: ST_TO_ADDR
// end else
34068: GO 34131
// begin d := - 1 ;
34070: LD_ADDR_VAR 0 9
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: ST_TO_ADDR
// if i_from > i_to then
34079: LD_VAR 0 2
34083: PUSH
34084: LD_VAR 0 3
34088: GREATER
34089: IFFALSE 34109
// length := i_from - i_to else
34091: LD_ADDR_VAR 0 11
34095: PUSH
34096: LD_VAR 0 2
34100: PUSH
34101: LD_VAR 0 3
34105: MINUS
34106: ST_TO_ADDR
34107: GO 34131
// length := ( array - i_to ) + i_from ;
34109: LD_ADDR_VAR 0 11
34113: PUSH
34114: LD_VAR 0 1
34118: PUSH
34119: LD_VAR 0 3
34123: MINUS
34124: PUSH
34125: LD_VAR 0 2
34129: PLUS
34130: ST_TO_ADDR
// end ; if not length then
34131: LD_VAR 0 11
34135: NOT
34136: IFFALSE 34140
// exit ;
34138: GO 34298
// tmp := array ;
34140: LD_ADDR_VAR 0 10
34144: PUSH
34145: LD_VAR 0 1
34149: ST_TO_ADDR
// for i = 1 to length do
34150: LD_ADDR_VAR 0 6
34154: PUSH
34155: DOUBLE
34156: LD_INT 1
34158: DEC
34159: ST_TO_ADDR
34160: LD_VAR 0 11
34164: PUSH
34165: FOR_TO
34166: IFFALSE 34286
// begin for j = 1 to array do
34168: LD_ADDR_VAR 0 7
34172: PUSH
34173: DOUBLE
34174: LD_INT 1
34176: DEC
34177: ST_TO_ADDR
34178: LD_VAR 0 1
34182: PUSH
34183: FOR_TO
34184: IFFALSE 34272
// begin k := j + d ;
34186: LD_ADDR_VAR 0 8
34190: PUSH
34191: LD_VAR 0 7
34195: PUSH
34196: LD_VAR 0 9
34200: PLUS
34201: ST_TO_ADDR
// if k > array then
34202: LD_VAR 0 8
34206: PUSH
34207: LD_VAR 0 1
34211: GREATER
34212: IFFALSE 34222
// k := 1 ;
34214: LD_ADDR_VAR 0 8
34218: PUSH
34219: LD_INT 1
34221: ST_TO_ADDR
// if not k then
34222: LD_VAR 0 8
34226: NOT
34227: IFFALSE 34239
// k := array ;
34229: LD_ADDR_VAR 0 8
34233: PUSH
34234: LD_VAR 0 1
34238: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34239: LD_ADDR_VAR 0 10
34243: PUSH
34244: LD_VAR 0 10
34248: PPUSH
34249: LD_VAR 0 8
34253: PPUSH
34254: LD_VAR 0 1
34258: PUSH
34259: LD_VAR 0 7
34263: ARRAY
34264: PPUSH
34265: CALL_OW 1
34269: ST_TO_ADDR
// end ;
34270: GO 34183
34272: POP
34273: POP
// array := tmp ;
34274: LD_ADDR_VAR 0 1
34278: PUSH
34279: LD_VAR 0 10
34283: ST_TO_ADDR
// end ;
34284: GO 34165
34286: POP
34287: POP
// result := array ;
34288: LD_ADDR_VAR 0 5
34292: PUSH
34293: LD_VAR 0 1
34297: ST_TO_ADDR
// end ;
34298: LD_VAR 0 5
34302: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34303: LD_INT 0
34305: PPUSH
34306: PPUSH
// result := 0 ;
34307: LD_ADDR_VAR 0 3
34311: PUSH
34312: LD_INT 0
34314: ST_TO_ADDR
// if not array or not value in array then
34315: LD_VAR 0 1
34319: NOT
34320: PUSH
34321: LD_VAR 0 2
34325: PUSH
34326: LD_VAR 0 1
34330: IN
34331: NOT
34332: OR
34333: IFFALSE 34337
// exit ;
34335: GO 34391
// for i = 1 to array do
34337: LD_ADDR_VAR 0 4
34341: PUSH
34342: DOUBLE
34343: LD_INT 1
34345: DEC
34346: ST_TO_ADDR
34347: LD_VAR 0 1
34351: PUSH
34352: FOR_TO
34353: IFFALSE 34389
// if value = array [ i ] then
34355: LD_VAR 0 2
34359: PUSH
34360: LD_VAR 0 1
34364: PUSH
34365: LD_VAR 0 4
34369: ARRAY
34370: EQUAL
34371: IFFALSE 34387
// begin result := i ;
34373: LD_ADDR_VAR 0 3
34377: PUSH
34378: LD_VAR 0 4
34382: ST_TO_ADDR
// exit ;
34383: POP
34384: POP
34385: GO 34391
// end ;
34387: GO 34352
34389: POP
34390: POP
// end ;
34391: LD_VAR 0 3
34395: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34396: LD_INT 0
34398: PPUSH
// vc_chassis := chassis ;
34399: LD_ADDR_OWVAR 37
34403: PUSH
34404: LD_VAR 0 1
34408: ST_TO_ADDR
// vc_engine := engine ;
34409: LD_ADDR_OWVAR 39
34413: PUSH
34414: LD_VAR 0 2
34418: ST_TO_ADDR
// vc_control := control ;
34419: LD_ADDR_OWVAR 38
34423: PUSH
34424: LD_VAR 0 3
34428: ST_TO_ADDR
// vc_weapon := weapon ;
34429: LD_ADDR_OWVAR 40
34433: PUSH
34434: LD_VAR 0 4
34438: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34439: LD_ADDR_OWVAR 41
34443: PUSH
34444: LD_VAR 0 5
34448: ST_TO_ADDR
// end ;
34449: LD_VAR 0 6
34453: RET
// export function WantPlant ( unit ) ; var task ; begin
34454: LD_INT 0
34456: PPUSH
34457: PPUSH
// result := false ;
34458: LD_ADDR_VAR 0 2
34462: PUSH
34463: LD_INT 0
34465: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34466: LD_ADDR_VAR 0 3
34470: PUSH
34471: LD_VAR 0 1
34475: PPUSH
34476: CALL_OW 437
34480: ST_TO_ADDR
// if task then
34481: LD_VAR 0 3
34485: IFFALSE 34513
// if task [ 1 ] [ 1 ] = p then
34487: LD_VAR 0 3
34491: PUSH
34492: LD_INT 1
34494: ARRAY
34495: PUSH
34496: LD_INT 1
34498: ARRAY
34499: PUSH
34500: LD_STRING p
34502: EQUAL
34503: IFFALSE 34513
// result := true ;
34505: LD_ADDR_VAR 0 2
34509: PUSH
34510: LD_INT 1
34512: ST_TO_ADDR
// end ;
34513: LD_VAR 0 2
34517: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34518: LD_INT 0
34520: PPUSH
34521: PPUSH
34522: PPUSH
34523: PPUSH
// if pos < 1 then
34524: LD_VAR 0 2
34528: PUSH
34529: LD_INT 1
34531: LESS
34532: IFFALSE 34536
// exit ;
34534: GO 34839
// if pos = 1 then
34536: LD_VAR 0 2
34540: PUSH
34541: LD_INT 1
34543: EQUAL
34544: IFFALSE 34577
// result := Replace ( arr , pos [ 1 ] , value ) else
34546: LD_ADDR_VAR 0 4
34550: PUSH
34551: LD_VAR 0 1
34555: PPUSH
34556: LD_VAR 0 2
34560: PUSH
34561: LD_INT 1
34563: ARRAY
34564: PPUSH
34565: LD_VAR 0 3
34569: PPUSH
34570: CALL_OW 1
34574: ST_TO_ADDR
34575: GO 34839
// begin tmp := arr ;
34577: LD_ADDR_VAR 0 6
34581: PUSH
34582: LD_VAR 0 1
34586: ST_TO_ADDR
// s_arr := [ tmp ] ;
34587: LD_ADDR_VAR 0 7
34591: PUSH
34592: LD_VAR 0 6
34596: PUSH
34597: EMPTY
34598: LIST
34599: ST_TO_ADDR
// for i = 1 to pos - 1 do
34600: LD_ADDR_VAR 0 5
34604: PUSH
34605: DOUBLE
34606: LD_INT 1
34608: DEC
34609: ST_TO_ADDR
34610: LD_VAR 0 2
34614: PUSH
34615: LD_INT 1
34617: MINUS
34618: PUSH
34619: FOR_TO
34620: IFFALSE 34665
// begin tmp := tmp [ pos [ i ] ] ;
34622: LD_ADDR_VAR 0 6
34626: PUSH
34627: LD_VAR 0 6
34631: PUSH
34632: LD_VAR 0 2
34636: PUSH
34637: LD_VAR 0 5
34641: ARRAY
34642: ARRAY
34643: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34644: LD_ADDR_VAR 0 7
34648: PUSH
34649: LD_VAR 0 7
34653: PUSH
34654: LD_VAR 0 6
34658: PUSH
34659: EMPTY
34660: LIST
34661: ADD
34662: ST_TO_ADDR
// end ;
34663: GO 34619
34665: POP
34666: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34667: LD_ADDR_VAR 0 6
34671: PUSH
34672: LD_VAR 0 6
34676: PPUSH
34677: LD_VAR 0 2
34681: PUSH
34682: LD_VAR 0 2
34686: ARRAY
34687: PPUSH
34688: LD_VAR 0 3
34692: PPUSH
34693: CALL_OW 1
34697: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34698: LD_ADDR_VAR 0 7
34702: PUSH
34703: LD_VAR 0 7
34707: PPUSH
34708: LD_VAR 0 7
34712: PPUSH
34713: LD_VAR 0 6
34717: PPUSH
34718: CALL_OW 1
34722: ST_TO_ADDR
// for i = s_arr downto 2 do
34723: LD_ADDR_VAR 0 5
34727: PUSH
34728: DOUBLE
34729: LD_VAR 0 7
34733: INC
34734: ST_TO_ADDR
34735: LD_INT 2
34737: PUSH
34738: FOR_DOWNTO
34739: IFFALSE 34823
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34741: LD_ADDR_VAR 0 6
34745: PUSH
34746: LD_VAR 0 7
34750: PUSH
34751: LD_VAR 0 5
34755: PUSH
34756: LD_INT 1
34758: MINUS
34759: ARRAY
34760: PPUSH
34761: LD_VAR 0 2
34765: PUSH
34766: LD_VAR 0 5
34770: PUSH
34771: LD_INT 1
34773: MINUS
34774: ARRAY
34775: PPUSH
34776: LD_VAR 0 7
34780: PUSH
34781: LD_VAR 0 5
34785: ARRAY
34786: PPUSH
34787: CALL_OW 1
34791: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34792: LD_ADDR_VAR 0 7
34796: PUSH
34797: LD_VAR 0 7
34801: PPUSH
34802: LD_VAR 0 5
34806: PUSH
34807: LD_INT 1
34809: MINUS
34810: PPUSH
34811: LD_VAR 0 6
34815: PPUSH
34816: CALL_OW 1
34820: ST_TO_ADDR
// end ;
34821: GO 34738
34823: POP
34824: POP
// result := s_arr [ 1 ] ;
34825: LD_ADDR_VAR 0 4
34829: PUSH
34830: LD_VAR 0 7
34834: PUSH
34835: LD_INT 1
34837: ARRAY
34838: ST_TO_ADDR
// end ; end ;
34839: LD_VAR 0 4
34843: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34844: LD_INT 0
34846: PPUSH
34847: PPUSH
// if not list then
34848: LD_VAR 0 1
34852: NOT
34853: IFFALSE 34857
// exit ;
34855: GO 34948
// i := list [ pos1 ] ;
34857: LD_ADDR_VAR 0 5
34861: PUSH
34862: LD_VAR 0 1
34866: PUSH
34867: LD_VAR 0 2
34871: ARRAY
34872: ST_TO_ADDR
// if not i then
34873: LD_VAR 0 5
34877: NOT
34878: IFFALSE 34882
// exit ;
34880: GO 34948
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34882: LD_ADDR_VAR 0 1
34886: PUSH
34887: LD_VAR 0 1
34891: PPUSH
34892: LD_VAR 0 2
34896: PPUSH
34897: LD_VAR 0 1
34901: PUSH
34902: LD_VAR 0 3
34906: ARRAY
34907: PPUSH
34908: CALL_OW 1
34912: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34913: LD_ADDR_VAR 0 1
34917: PUSH
34918: LD_VAR 0 1
34922: PPUSH
34923: LD_VAR 0 3
34927: PPUSH
34928: LD_VAR 0 5
34932: PPUSH
34933: CALL_OW 1
34937: ST_TO_ADDR
// result := list ;
34938: LD_ADDR_VAR 0 4
34942: PUSH
34943: LD_VAR 0 1
34947: ST_TO_ADDR
// end ;
34948: LD_VAR 0 4
34952: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34953: LD_INT 0
34955: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34956: LD_ADDR_VAR 0 5
34960: PUSH
34961: LD_VAR 0 1
34965: PPUSH
34966: CALL_OW 250
34970: PPUSH
34971: LD_VAR 0 1
34975: PPUSH
34976: CALL_OW 251
34980: PPUSH
34981: LD_VAR 0 2
34985: PPUSH
34986: LD_VAR 0 3
34990: PPUSH
34991: LD_VAR 0 4
34995: PPUSH
34996: CALL 35374 0 5
35000: ST_TO_ADDR
// end ;
35001: LD_VAR 0 5
35005: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35006: LD_INT 0
35008: PPUSH
35009: PPUSH
35010: PPUSH
35011: PPUSH
// if not list or not unit then
35012: LD_VAR 0 2
35016: NOT
35017: PUSH
35018: LD_VAR 0 1
35022: NOT
35023: OR
35024: IFFALSE 35028
// exit ;
35026: GO 35369
// result := [ ] ;
35028: LD_ADDR_VAR 0 5
35032: PUSH
35033: EMPTY
35034: ST_TO_ADDR
// for i in list do
35035: LD_ADDR_VAR 0 6
35039: PUSH
35040: LD_VAR 0 2
35044: PUSH
35045: FOR_IN
35046: IFFALSE 35264
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35048: LD_ADDR_VAR 0 8
35052: PUSH
35053: LD_VAR 0 1
35057: PPUSH
35058: LD_VAR 0 6
35062: PUSH
35063: LD_INT 1
35065: ARRAY
35066: PPUSH
35067: LD_VAR 0 6
35071: PUSH
35072: LD_INT 2
35074: ARRAY
35075: PPUSH
35076: CALL_OW 297
35080: ST_TO_ADDR
// if not Count ( result ) then
35081: LD_VAR 0 5
35085: PPUSH
35086: CALL 31658 0 1
35090: NOT
35091: IFFALSE 35124
// begin result := Join ( result , [ i , tmp ] ) ;
35093: LD_ADDR_VAR 0 5
35097: PUSH
35098: LD_VAR 0 5
35102: PPUSH
35103: LD_VAR 0 6
35107: PUSH
35108: LD_VAR 0 8
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PPUSH
35117: CALL 67267 0 2
35121: ST_TO_ADDR
// continue ;
35122: GO 35045
// end ; if result [ result ] [ 2 ] <= tmp then
35124: LD_VAR 0 5
35128: PUSH
35129: LD_VAR 0 5
35133: ARRAY
35134: PUSH
35135: LD_INT 2
35137: ARRAY
35138: PUSH
35139: LD_VAR 0 8
35143: LESSEQUAL
35144: IFFALSE 35177
// result := Join ( result , [ i , tmp ] ) else
35146: LD_ADDR_VAR 0 5
35150: PUSH
35151: LD_VAR 0 5
35155: PPUSH
35156: LD_VAR 0 6
35160: PUSH
35161: LD_VAR 0 8
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PPUSH
35170: CALL 67267 0 2
35174: ST_TO_ADDR
35175: GO 35262
// begin for j := 1 to Count ( result ) do
35177: LD_ADDR_VAR 0 7
35181: PUSH
35182: DOUBLE
35183: LD_INT 1
35185: DEC
35186: ST_TO_ADDR
35187: LD_VAR 0 5
35191: PPUSH
35192: CALL 31658 0 1
35196: PUSH
35197: FOR_TO
35198: IFFALSE 35260
// begin if tmp < result [ j ] [ 2 ] then
35200: LD_VAR 0 8
35204: PUSH
35205: LD_VAR 0 5
35209: PUSH
35210: LD_VAR 0 7
35214: ARRAY
35215: PUSH
35216: LD_INT 2
35218: ARRAY
35219: LESS
35220: IFFALSE 35258
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35222: LD_ADDR_VAR 0 5
35226: PUSH
35227: LD_VAR 0 5
35231: PPUSH
35232: LD_VAR 0 7
35236: PPUSH
35237: LD_VAR 0 6
35241: PUSH
35242: LD_VAR 0 8
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PPUSH
35251: CALL_OW 2
35255: ST_TO_ADDR
// break ;
35256: GO 35260
// end ; end ;
35258: GO 35197
35260: POP
35261: POP
// end ; end ;
35262: GO 35045
35264: POP
35265: POP
// if result and not asc then
35266: LD_VAR 0 5
35270: PUSH
35271: LD_VAR 0 3
35275: NOT
35276: AND
35277: IFFALSE 35294
// result := ReverseArray ( result ) ;
35279: LD_ADDR_VAR 0 5
35283: PUSH
35284: LD_VAR 0 5
35288: PPUSH
35289: CALL 62534 0 1
35293: ST_TO_ADDR
// tmp := [ ] ;
35294: LD_ADDR_VAR 0 8
35298: PUSH
35299: EMPTY
35300: ST_TO_ADDR
// if mode then
35301: LD_VAR 0 4
35305: IFFALSE 35369
// begin for i := 1 to result do
35307: LD_ADDR_VAR 0 6
35311: PUSH
35312: DOUBLE
35313: LD_INT 1
35315: DEC
35316: ST_TO_ADDR
35317: LD_VAR 0 5
35321: PUSH
35322: FOR_TO
35323: IFFALSE 35357
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35325: LD_ADDR_VAR 0 8
35329: PUSH
35330: LD_VAR 0 8
35334: PPUSH
35335: LD_VAR 0 5
35339: PUSH
35340: LD_VAR 0 6
35344: ARRAY
35345: PUSH
35346: LD_INT 1
35348: ARRAY
35349: PPUSH
35350: CALL 67267 0 2
35354: ST_TO_ADDR
35355: GO 35322
35357: POP
35358: POP
// result := tmp ;
35359: LD_ADDR_VAR 0 5
35363: PUSH
35364: LD_VAR 0 8
35368: ST_TO_ADDR
// end ; end ;
35369: LD_VAR 0 5
35373: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35374: LD_INT 0
35376: PPUSH
35377: PPUSH
35378: PPUSH
35379: PPUSH
// if not list then
35380: LD_VAR 0 3
35384: NOT
35385: IFFALSE 35389
// exit ;
35387: GO 35777
// result := [ ] ;
35389: LD_ADDR_VAR 0 6
35393: PUSH
35394: EMPTY
35395: ST_TO_ADDR
// for i in list do
35396: LD_ADDR_VAR 0 7
35400: PUSH
35401: LD_VAR 0 3
35405: PUSH
35406: FOR_IN
35407: IFFALSE 35609
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35409: LD_ADDR_VAR 0 9
35413: PUSH
35414: LD_VAR 0 7
35418: PPUSH
35419: LD_VAR 0 1
35423: PPUSH
35424: LD_VAR 0 2
35428: PPUSH
35429: CALL_OW 297
35433: ST_TO_ADDR
// if not result then
35434: LD_VAR 0 6
35438: NOT
35439: IFFALSE 35465
// result := [ [ i , tmp ] ] else
35441: LD_ADDR_VAR 0 6
35445: PUSH
35446: LD_VAR 0 7
35450: PUSH
35451: LD_VAR 0 9
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: EMPTY
35461: LIST
35462: ST_TO_ADDR
35463: GO 35607
// begin if result [ result ] [ 2 ] <= tmp then
35465: LD_VAR 0 6
35469: PUSH
35470: LD_VAR 0 6
35474: ARRAY
35475: PUSH
35476: LD_INT 2
35478: ARRAY
35479: PUSH
35480: LD_VAR 0 9
35484: LESSEQUAL
35485: IFFALSE 35527
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35487: LD_ADDR_VAR 0 6
35491: PUSH
35492: LD_VAR 0 6
35496: PPUSH
35497: LD_VAR 0 6
35501: PUSH
35502: LD_INT 1
35504: PLUS
35505: PPUSH
35506: LD_VAR 0 7
35510: PUSH
35511: LD_VAR 0 9
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PPUSH
35520: CALL_OW 2
35524: ST_TO_ADDR
35525: GO 35607
// for j := 1 to result do
35527: LD_ADDR_VAR 0 8
35531: PUSH
35532: DOUBLE
35533: LD_INT 1
35535: DEC
35536: ST_TO_ADDR
35537: LD_VAR 0 6
35541: PUSH
35542: FOR_TO
35543: IFFALSE 35605
// begin if tmp < result [ j ] [ 2 ] then
35545: LD_VAR 0 9
35549: PUSH
35550: LD_VAR 0 6
35554: PUSH
35555: LD_VAR 0 8
35559: ARRAY
35560: PUSH
35561: LD_INT 2
35563: ARRAY
35564: LESS
35565: IFFALSE 35603
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35567: LD_ADDR_VAR 0 6
35571: PUSH
35572: LD_VAR 0 6
35576: PPUSH
35577: LD_VAR 0 8
35581: PPUSH
35582: LD_VAR 0 7
35586: PUSH
35587: LD_VAR 0 9
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PPUSH
35596: CALL_OW 2
35600: ST_TO_ADDR
// break ;
35601: GO 35605
// end ; end ;
35603: GO 35542
35605: POP
35606: POP
// end ; end ;
35607: GO 35406
35609: POP
35610: POP
// if result and not asc then
35611: LD_VAR 0 6
35615: PUSH
35616: LD_VAR 0 4
35620: NOT
35621: AND
35622: IFFALSE 35697
// begin tmp := result ;
35624: LD_ADDR_VAR 0 9
35628: PUSH
35629: LD_VAR 0 6
35633: ST_TO_ADDR
// for i = tmp downto 1 do
35634: LD_ADDR_VAR 0 7
35638: PUSH
35639: DOUBLE
35640: LD_VAR 0 9
35644: INC
35645: ST_TO_ADDR
35646: LD_INT 1
35648: PUSH
35649: FOR_DOWNTO
35650: IFFALSE 35695
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35652: LD_ADDR_VAR 0 6
35656: PUSH
35657: LD_VAR 0 6
35661: PPUSH
35662: LD_VAR 0 9
35666: PUSH
35667: LD_VAR 0 7
35671: MINUS
35672: PUSH
35673: LD_INT 1
35675: PLUS
35676: PPUSH
35677: LD_VAR 0 9
35681: PUSH
35682: LD_VAR 0 7
35686: ARRAY
35687: PPUSH
35688: CALL_OW 1
35692: ST_TO_ADDR
35693: GO 35649
35695: POP
35696: POP
// end ; tmp := [ ] ;
35697: LD_ADDR_VAR 0 9
35701: PUSH
35702: EMPTY
35703: ST_TO_ADDR
// if mode then
35704: LD_VAR 0 5
35708: IFFALSE 35777
// begin for i = 1 to result do
35710: LD_ADDR_VAR 0 7
35714: PUSH
35715: DOUBLE
35716: LD_INT 1
35718: DEC
35719: ST_TO_ADDR
35720: LD_VAR 0 6
35724: PUSH
35725: FOR_TO
35726: IFFALSE 35765
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35728: LD_ADDR_VAR 0 9
35732: PUSH
35733: LD_VAR 0 9
35737: PPUSH
35738: LD_VAR 0 7
35742: PPUSH
35743: LD_VAR 0 6
35747: PUSH
35748: LD_VAR 0 7
35752: ARRAY
35753: PUSH
35754: LD_INT 1
35756: ARRAY
35757: PPUSH
35758: CALL_OW 1
35762: ST_TO_ADDR
35763: GO 35725
35765: POP
35766: POP
// result := tmp ;
35767: LD_ADDR_VAR 0 6
35771: PUSH
35772: LD_VAR 0 9
35776: ST_TO_ADDR
// end ; end ;
35777: LD_VAR 0 6
35781: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35782: LD_INT 0
35784: PPUSH
35785: PPUSH
35786: PPUSH
35787: PPUSH
35788: PPUSH
35789: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35790: LD_ADDR_VAR 0 5
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: ST_TO_ADDR
// if not x or not y then
35812: LD_VAR 0 2
35816: NOT
35817: PUSH
35818: LD_VAR 0 3
35822: NOT
35823: OR
35824: IFFALSE 35828
// exit ;
35826: GO 37478
// if not range then
35828: LD_VAR 0 4
35832: NOT
35833: IFFALSE 35843
// range := 10 ;
35835: LD_ADDR_VAR 0 4
35839: PUSH
35840: LD_INT 10
35842: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35843: LD_ADDR_VAR 0 8
35847: PUSH
35848: LD_INT 81
35850: PUSH
35851: LD_VAR 0 1
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 92
35862: PUSH
35863: LD_VAR 0 2
35867: PUSH
35868: LD_VAR 0 3
35872: PUSH
35873: LD_VAR 0 4
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 3
35886: PUSH
35887: LD_INT 21
35889: PUSH
35890: LD_INT 3
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: PPUSH
35906: CALL_OW 69
35910: ST_TO_ADDR
// if not tmp then
35911: LD_VAR 0 8
35915: NOT
35916: IFFALSE 35920
// exit ;
35918: GO 37478
// for i in tmp do
35920: LD_ADDR_VAR 0 6
35924: PUSH
35925: LD_VAR 0 8
35929: PUSH
35930: FOR_IN
35931: IFFALSE 37453
// begin points := [ 0 , 0 , 0 ] ;
35933: LD_ADDR_VAR 0 9
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: ST_TO_ADDR
// bpoints := 1 ;
35952: LD_ADDR_VAR 0 10
35956: PUSH
35957: LD_INT 1
35959: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35960: LD_VAR 0 6
35964: PPUSH
35965: CALL_OW 247
35969: PUSH
35970: LD_INT 1
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 35978
35976: GO 36556
35978: POP
// begin if GetClass ( i ) = 1 then
35979: LD_VAR 0 6
35983: PPUSH
35984: CALL_OW 257
35988: PUSH
35989: LD_INT 1
35991: EQUAL
35992: IFFALSE 36013
// points := [ 10 , 5 , 3 ] ;
35994: LD_ADDR_VAR 0 9
35998: PUSH
35999: LD_INT 10
36001: PUSH
36002: LD_INT 5
36004: PUSH
36005: LD_INT 3
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: LIST
36012: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36013: LD_VAR 0 6
36017: PPUSH
36018: CALL_OW 257
36022: PUSH
36023: LD_INT 2
36025: PUSH
36026: LD_INT 3
36028: PUSH
36029: LD_INT 4
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: IN
36037: IFFALSE 36058
// points := [ 3 , 2 , 1 ] ;
36039: LD_ADDR_VAR 0 9
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: LD_INT 2
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: LIST
36057: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36058: LD_VAR 0 6
36062: PPUSH
36063: CALL_OW 257
36067: PUSH
36068: LD_INT 5
36070: EQUAL
36071: IFFALSE 36092
// points := [ 130 , 5 , 2 ] ;
36073: LD_ADDR_VAR 0 9
36077: PUSH
36078: LD_INT 130
36080: PUSH
36081: LD_INT 5
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36092: LD_VAR 0 6
36096: PPUSH
36097: CALL_OW 257
36101: PUSH
36102: LD_INT 8
36104: EQUAL
36105: IFFALSE 36126
// points := [ 35 , 35 , 30 ] ;
36107: LD_ADDR_VAR 0 9
36111: PUSH
36112: LD_INT 35
36114: PUSH
36115: LD_INT 35
36117: PUSH
36118: LD_INT 30
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36126: LD_VAR 0 6
36130: PPUSH
36131: CALL_OW 257
36135: PUSH
36136: LD_INT 9
36138: EQUAL
36139: IFFALSE 36160
// points := [ 20 , 55 , 40 ] ;
36141: LD_ADDR_VAR 0 9
36145: PUSH
36146: LD_INT 20
36148: PUSH
36149: LD_INT 55
36151: PUSH
36152: LD_INT 40
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36160: LD_VAR 0 6
36164: PPUSH
36165: CALL_OW 257
36169: PUSH
36170: LD_INT 12
36172: PUSH
36173: LD_INT 16
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: IN
36180: IFFALSE 36201
// points := [ 5 , 3 , 2 ] ;
36182: LD_ADDR_VAR 0 9
36186: PUSH
36187: LD_INT 5
36189: PUSH
36190: LD_INT 3
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: LIST
36200: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36201: LD_VAR 0 6
36205: PPUSH
36206: CALL_OW 257
36210: PUSH
36211: LD_INT 17
36213: EQUAL
36214: IFFALSE 36235
// points := [ 100 , 50 , 75 ] ;
36216: LD_ADDR_VAR 0 9
36220: PUSH
36221: LD_INT 100
36223: PUSH
36224: LD_INT 50
36226: PUSH
36227: LD_INT 75
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36235: LD_VAR 0 6
36239: PPUSH
36240: CALL_OW 257
36244: PUSH
36245: LD_INT 15
36247: EQUAL
36248: IFFALSE 36269
// points := [ 10 , 5 , 3 ] ;
36250: LD_ADDR_VAR 0 9
36254: PUSH
36255: LD_INT 10
36257: PUSH
36258: LD_INT 5
36260: PUSH
36261: LD_INT 3
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36269: LD_VAR 0 6
36273: PPUSH
36274: CALL_OW 257
36278: PUSH
36279: LD_INT 14
36281: EQUAL
36282: IFFALSE 36303
// points := [ 10 , 0 , 0 ] ;
36284: LD_ADDR_VAR 0 9
36288: PUSH
36289: LD_INT 10
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36303: LD_VAR 0 6
36307: PPUSH
36308: CALL_OW 257
36312: PUSH
36313: LD_INT 11
36315: EQUAL
36316: IFFALSE 36337
// points := [ 30 , 10 , 5 ] ;
36318: LD_ADDR_VAR 0 9
36322: PUSH
36323: LD_INT 30
36325: PUSH
36326: LD_INT 10
36328: PUSH
36329: LD_INT 5
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36337: LD_VAR 0 1
36341: PPUSH
36342: LD_INT 5
36344: PPUSH
36345: CALL_OW 321
36349: PUSH
36350: LD_INT 2
36352: EQUAL
36353: IFFALSE 36370
// bpoints := bpoints * 1.8 ;
36355: LD_ADDR_VAR 0 10
36359: PUSH
36360: LD_VAR 0 10
36364: PUSH
36365: LD_REAL  1.80000000000000E+0000
36368: MUL
36369: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36370: LD_VAR 0 6
36374: PPUSH
36375: CALL_OW 257
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: LD_INT 4
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: IN
36398: PUSH
36399: LD_VAR 0 1
36403: PPUSH
36404: LD_INT 51
36406: PPUSH
36407: CALL_OW 321
36411: PUSH
36412: LD_INT 2
36414: EQUAL
36415: AND
36416: IFFALSE 36433
// bpoints := bpoints * 1.2 ;
36418: LD_ADDR_VAR 0 10
36422: PUSH
36423: LD_VAR 0 10
36427: PUSH
36428: LD_REAL  1.20000000000000E+0000
36431: MUL
36432: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36433: LD_VAR 0 6
36437: PPUSH
36438: CALL_OW 257
36442: PUSH
36443: LD_INT 5
36445: PUSH
36446: LD_INT 7
36448: PUSH
36449: LD_INT 9
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: IN
36457: PUSH
36458: LD_VAR 0 1
36462: PPUSH
36463: LD_INT 52
36465: PPUSH
36466: CALL_OW 321
36470: PUSH
36471: LD_INT 2
36473: EQUAL
36474: AND
36475: IFFALSE 36492
// bpoints := bpoints * 1.5 ;
36477: LD_ADDR_VAR 0 10
36481: PUSH
36482: LD_VAR 0 10
36486: PUSH
36487: LD_REAL  1.50000000000000E+0000
36490: MUL
36491: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36492: LD_VAR 0 1
36496: PPUSH
36497: LD_INT 66
36499: PPUSH
36500: CALL_OW 321
36504: PUSH
36505: LD_INT 2
36507: EQUAL
36508: IFFALSE 36525
// bpoints := bpoints * 1.1 ;
36510: LD_ADDR_VAR 0 10
36514: PUSH
36515: LD_VAR 0 10
36519: PUSH
36520: LD_REAL  1.10000000000000E+0000
36523: MUL
36524: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36525: LD_ADDR_VAR 0 10
36529: PUSH
36530: LD_VAR 0 10
36534: PUSH
36535: LD_VAR 0 6
36539: PPUSH
36540: LD_INT 1
36542: PPUSH
36543: CALL_OW 259
36547: PUSH
36548: LD_REAL  1.15000000000000E+0000
36551: MUL
36552: MUL
36553: ST_TO_ADDR
// end ; unit_vehicle :
36554: GO 37382
36556: LD_INT 2
36558: DOUBLE
36559: EQUAL
36560: IFTRUE 36564
36562: GO 37370
36564: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36565: LD_VAR 0 6
36569: PPUSH
36570: CALL_OW 264
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: LD_INT 42
36580: PUSH
36581: LD_INT 24
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: IN
36589: IFFALSE 36610
// points := [ 25 , 5 , 3 ] ;
36591: LD_ADDR_VAR 0 9
36595: PUSH
36596: LD_INT 25
36598: PUSH
36599: LD_INT 5
36601: PUSH
36602: LD_INT 3
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: LIST
36609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36610: LD_VAR 0 6
36614: PPUSH
36615: CALL_OW 264
36619: PUSH
36620: LD_INT 4
36622: PUSH
36623: LD_INT 43
36625: PUSH
36626: LD_INT 25
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: IN
36634: IFFALSE 36655
// points := [ 40 , 15 , 5 ] ;
36636: LD_ADDR_VAR 0 9
36640: PUSH
36641: LD_INT 40
36643: PUSH
36644: LD_INT 15
36646: PUSH
36647: LD_INT 5
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36655: LD_VAR 0 6
36659: PPUSH
36660: CALL_OW 264
36664: PUSH
36665: LD_INT 3
36667: PUSH
36668: LD_INT 23
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: IN
36675: IFFALSE 36696
// points := [ 7 , 25 , 8 ] ;
36677: LD_ADDR_VAR 0 9
36681: PUSH
36682: LD_INT 7
36684: PUSH
36685: LD_INT 25
36687: PUSH
36688: LD_INT 8
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36696: LD_VAR 0 6
36700: PPUSH
36701: CALL_OW 264
36705: PUSH
36706: LD_INT 5
36708: PUSH
36709: LD_INT 27
36711: PUSH
36712: LD_INT 44
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: LIST
36719: IN
36720: IFFALSE 36741
// points := [ 14 , 50 , 16 ] ;
36722: LD_ADDR_VAR 0 9
36726: PUSH
36727: LD_INT 14
36729: PUSH
36730: LD_INT 50
36732: PUSH
36733: LD_INT 16
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36741: LD_VAR 0 6
36745: PPUSH
36746: CALL_OW 264
36750: PUSH
36751: LD_INT 6
36753: PUSH
36754: LD_INT 46
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: IN
36761: IFFALSE 36782
// points := [ 32 , 120 , 70 ] ;
36763: LD_ADDR_VAR 0 9
36767: PUSH
36768: LD_INT 32
36770: PUSH
36771: LD_INT 120
36773: PUSH
36774: LD_INT 70
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36782: LD_VAR 0 6
36786: PPUSH
36787: CALL_OW 264
36791: PUSH
36792: LD_INT 7
36794: PUSH
36795: LD_INT 28
36797: PUSH
36798: LD_INT 45
36800: PUSH
36801: LD_INT 92
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: IN
36810: IFFALSE 36831
// points := [ 35 , 20 , 45 ] ;
36812: LD_ADDR_VAR 0 9
36816: PUSH
36817: LD_INT 35
36819: PUSH
36820: LD_INT 20
36822: PUSH
36823: LD_INT 45
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36831: LD_VAR 0 6
36835: PPUSH
36836: CALL_OW 264
36840: PUSH
36841: LD_INT 47
36843: PUSH
36844: EMPTY
36845: LIST
36846: IN
36847: IFFALSE 36868
// points := [ 67 , 45 , 75 ] ;
36849: LD_ADDR_VAR 0 9
36853: PUSH
36854: LD_INT 67
36856: PUSH
36857: LD_INT 45
36859: PUSH
36860: LD_INT 75
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36868: LD_VAR 0 6
36872: PPUSH
36873: CALL_OW 264
36877: PUSH
36878: LD_INT 26
36880: PUSH
36881: EMPTY
36882: LIST
36883: IN
36884: IFFALSE 36905
// points := [ 120 , 30 , 80 ] ;
36886: LD_ADDR_VAR 0 9
36890: PUSH
36891: LD_INT 120
36893: PUSH
36894: LD_INT 30
36896: PUSH
36897: LD_INT 80
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36905: LD_VAR 0 6
36909: PPUSH
36910: CALL_OW 264
36914: PUSH
36915: LD_INT 22
36917: PUSH
36918: EMPTY
36919: LIST
36920: IN
36921: IFFALSE 36942
// points := [ 40 , 1 , 1 ] ;
36923: LD_ADDR_VAR 0 9
36927: PUSH
36928: LD_INT 40
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36942: LD_VAR 0 6
36946: PPUSH
36947: CALL_OW 264
36951: PUSH
36952: LD_INT 29
36954: PUSH
36955: EMPTY
36956: LIST
36957: IN
36958: IFFALSE 36979
// points := [ 70 , 200 , 400 ] ;
36960: LD_ADDR_VAR 0 9
36964: PUSH
36965: LD_INT 70
36967: PUSH
36968: LD_INT 200
36970: PUSH
36971: LD_INT 400
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36979: LD_VAR 0 6
36983: PPUSH
36984: CALL_OW 264
36988: PUSH
36989: LD_INT 14
36991: PUSH
36992: LD_INT 53
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: IN
36999: IFFALSE 37020
// points := [ 40 , 10 , 20 ] ;
37001: LD_ADDR_VAR 0 9
37005: PUSH
37006: LD_INT 40
37008: PUSH
37009: LD_INT 10
37011: PUSH
37012: LD_INT 20
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37020: LD_VAR 0 6
37024: PPUSH
37025: CALL_OW 264
37029: PUSH
37030: LD_INT 9
37032: PUSH
37033: EMPTY
37034: LIST
37035: IN
37036: IFFALSE 37057
// points := [ 5 , 70 , 20 ] ;
37038: LD_ADDR_VAR 0 9
37042: PUSH
37043: LD_INT 5
37045: PUSH
37046: LD_INT 70
37048: PUSH
37049: LD_INT 20
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37057: LD_VAR 0 6
37061: PPUSH
37062: CALL_OW 264
37066: PUSH
37067: LD_INT 10
37069: PUSH
37070: EMPTY
37071: LIST
37072: IN
37073: IFFALSE 37094
// points := [ 35 , 110 , 70 ] ;
37075: LD_ADDR_VAR 0 9
37079: PUSH
37080: LD_INT 35
37082: PUSH
37083: LD_INT 110
37085: PUSH
37086: LD_INT 70
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37094: LD_VAR 0 6
37098: PPUSH
37099: CALL_OW 265
37103: PUSH
37104: LD_INT 25
37106: EQUAL
37107: IFFALSE 37128
// points := [ 80 , 65 , 100 ] ;
37109: LD_ADDR_VAR 0 9
37113: PUSH
37114: LD_INT 80
37116: PUSH
37117: LD_INT 65
37119: PUSH
37120: LD_INT 100
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37128: LD_VAR 0 6
37132: PPUSH
37133: CALL_OW 263
37137: PUSH
37138: LD_INT 1
37140: EQUAL
37141: IFFALSE 37176
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37143: LD_ADDR_VAR 0 10
37147: PUSH
37148: LD_VAR 0 10
37152: PUSH
37153: LD_VAR 0 6
37157: PPUSH
37158: CALL_OW 311
37162: PPUSH
37163: LD_INT 3
37165: PPUSH
37166: CALL_OW 259
37170: PUSH
37171: LD_INT 4
37173: MUL
37174: MUL
37175: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37176: LD_VAR 0 6
37180: PPUSH
37181: CALL_OW 263
37185: PUSH
37186: LD_INT 2
37188: EQUAL
37189: IFFALSE 37240
// begin j := IsControledBy ( i ) ;
37191: LD_ADDR_VAR 0 7
37195: PUSH
37196: LD_VAR 0 6
37200: PPUSH
37201: CALL_OW 312
37205: ST_TO_ADDR
// if j then
37206: LD_VAR 0 7
37210: IFFALSE 37240
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37212: LD_ADDR_VAR 0 10
37216: PUSH
37217: LD_VAR 0 10
37221: PUSH
37222: LD_VAR 0 7
37226: PPUSH
37227: LD_INT 3
37229: PPUSH
37230: CALL_OW 259
37234: PUSH
37235: LD_INT 3
37237: MUL
37238: MUL
37239: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37240: LD_VAR 0 6
37244: PPUSH
37245: CALL_OW 264
37249: PUSH
37250: LD_INT 5
37252: PUSH
37253: LD_INT 6
37255: PUSH
37256: LD_INT 46
37258: PUSH
37259: LD_INT 44
37261: PUSH
37262: LD_INT 47
37264: PUSH
37265: LD_INT 45
37267: PUSH
37268: LD_INT 28
37270: PUSH
37271: LD_INT 7
37273: PUSH
37274: LD_INT 27
37276: PUSH
37277: LD_INT 29
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: IN
37292: PUSH
37293: LD_VAR 0 1
37297: PPUSH
37298: LD_INT 52
37300: PPUSH
37301: CALL_OW 321
37305: PUSH
37306: LD_INT 2
37308: EQUAL
37309: AND
37310: IFFALSE 37327
// bpoints := bpoints * 1.2 ;
37312: LD_ADDR_VAR 0 10
37316: PUSH
37317: LD_VAR 0 10
37321: PUSH
37322: LD_REAL  1.20000000000000E+0000
37325: MUL
37326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37327: LD_VAR 0 6
37331: PPUSH
37332: CALL_OW 264
37336: PUSH
37337: LD_INT 6
37339: PUSH
37340: LD_INT 46
37342: PUSH
37343: LD_INT 47
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: IN
37351: IFFALSE 37368
// bpoints := bpoints * 1.2 ;
37353: LD_ADDR_VAR 0 10
37357: PUSH
37358: LD_VAR 0 10
37362: PUSH
37363: LD_REAL  1.20000000000000E+0000
37366: MUL
37367: ST_TO_ADDR
// end ; unit_building :
37368: GO 37382
37370: LD_INT 3
37372: DOUBLE
37373: EQUAL
37374: IFTRUE 37378
37376: GO 37381
37378: POP
// ; end ;
37379: GO 37382
37381: POP
// for j = 1 to 3 do
37382: LD_ADDR_VAR 0 7
37386: PUSH
37387: DOUBLE
37388: LD_INT 1
37390: DEC
37391: ST_TO_ADDR
37392: LD_INT 3
37394: PUSH
37395: FOR_TO
37396: IFFALSE 37449
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37398: LD_ADDR_VAR 0 5
37402: PUSH
37403: LD_VAR 0 5
37407: PPUSH
37408: LD_VAR 0 7
37412: PPUSH
37413: LD_VAR 0 5
37417: PUSH
37418: LD_VAR 0 7
37422: ARRAY
37423: PUSH
37424: LD_VAR 0 9
37428: PUSH
37429: LD_VAR 0 7
37433: ARRAY
37434: PUSH
37435: LD_VAR 0 10
37439: MUL
37440: PLUS
37441: PPUSH
37442: CALL_OW 1
37446: ST_TO_ADDR
37447: GO 37395
37449: POP
37450: POP
// end ;
37451: GO 35930
37453: POP
37454: POP
// result := Replace ( result , 4 , tmp ) ;
37455: LD_ADDR_VAR 0 5
37459: PUSH
37460: LD_VAR 0 5
37464: PPUSH
37465: LD_INT 4
37467: PPUSH
37468: LD_VAR 0 8
37472: PPUSH
37473: CALL_OW 1
37477: ST_TO_ADDR
// end ;
37478: LD_VAR 0 5
37482: RET
// export function DangerAtRange ( unit , range ) ; begin
37483: LD_INT 0
37485: PPUSH
// if not unit then
37486: LD_VAR 0 1
37490: NOT
37491: IFFALSE 37495
// exit ;
37493: GO 37540
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37495: LD_ADDR_VAR 0 3
37499: PUSH
37500: LD_VAR 0 1
37504: PPUSH
37505: CALL_OW 255
37509: PPUSH
37510: LD_VAR 0 1
37514: PPUSH
37515: CALL_OW 250
37519: PPUSH
37520: LD_VAR 0 1
37524: PPUSH
37525: CALL_OW 251
37529: PPUSH
37530: LD_VAR 0 2
37534: PPUSH
37535: CALL 35782 0 4
37539: ST_TO_ADDR
// end ;
37540: LD_VAR 0 3
37544: RET
// export function DangerInArea ( side , area ) ; begin
37545: LD_INT 0
37547: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37548: LD_ADDR_VAR 0 3
37552: PUSH
37553: LD_VAR 0 2
37557: PPUSH
37558: LD_INT 81
37560: PUSH
37561: LD_VAR 0 1
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PPUSH
37570: CALL_OW 70
37574: ST_TO_ADDR
// end ;
37575: LD_VAR 0 3
37579: RET
// export function IsExtension ( b ) ; begin
37580: LD_INT 0
37582: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37583: LD_ADDR_VAR 0 2
37587: PUSH
37588: LD_VAR 0 1
37592: PUSH
37593: LD_INT 23
37595: PUSH
37596: LD_INT 20
37598: PUSH
37599: LD_INT 22
37601: PUSH
37602: LD_INT 17
37604: PUSH
37605: LD_INT 24
37607: PUSH
37608: LD_INT 21
37610: PUSH
37611: LD_INT 19
37613: PUSH
37614: LD_INT 16
37616: PUSH
37617: LD_INT 25
37619: PUSH
37620: LD_INT 18
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: IN
37635: ST_TO_ADDR
// end ;
37636: LD_VAR 0 2
37640: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37641: LD_INT 0
37643: PPUSH
37644: PPUSH
37645: PPUSH
// result := [ ] ;
37646: LD_ADDR_VAR 0 4
37650: PUSH
37651: EMPTY
37652: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37653: LD_ADDR_VAR 0 5
37657: PUSH
37658: LD_VAR 0 2
37662: PPUSH
37663: LD_INT 21
37665: PUSH
37666: LD_INT 3
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PPUSH
37673: CALL_OW 70
37677: ST_TO_ADDR
// if not tmp then
37678: LD_VAR 0 5
37682: NOT
37683: IFFALSE 37687
// exit ;
37685: GO 37751
// if checkLink then
37687: LD_VAR 0 3
37691: IFFALSE 37741
// begin for i in tmp do
37693: LD_ADDR_VAR 0 6
37697: PUSH
37698: LD_VAR 0 5
37702: PUSH
37703: FOR_IN
37704: IFFALSE 37739
// if GetBase ( i ) <> base then
37706: LD_VAR 0 6
37710: PPUSH
37711: CALL_OW 274
37715: PUSH
37716: LD_VAR 0 1
37720: NONEQUAL
37721: IFFALSE 37737
// ComLinkToBase ( base , i ) ;
37723: LD_VAR 0 1
37727: PPUSH
37728: LD_VAR 0 6
37732: PPUSH
37733: CALL_OW 169
37737: GO 37703
37739: POP
37740: POP
// end ; result := tmp ;
37741: LD_ADDR_VAR 0 4
37745: PUSH
37746: LD_VAR 0 5
37750: ST_TO_ADDR
// end ;
37751: LD_VAR 0 4
37755: RET
// export function ComComplete ( units , b ) ; var i ; begin
37756: LD_INT 0
37758: PPUSH
37759: PPUSH
// if not units then
37760: LD_VAR 0 1
37764: NOT
37765: IFFALSE 37769
// exit ;
37767: GO 37859
// for i in units do
37769: LD_ADDR_VAR 0 4
37773: PUSH
37774: LD_VAR 0 1
37778: PUSH
37779: FOR_IN
37780: IFFALSE 37857
// if BuildingStatus ( b ) = bs_build then
37782: LD_VAR 0 2
37786: PPUSH
37787: CALL_OW 461
37791: PUSH
37792: LD_INT 1
37794: EQUAL
37795: IFFALSE 37855
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37797: LD_VAR 0 4
37801: PPUSH
37802: LD_STRING h
37804: PUSH
37805: LD_VAR 0 2
37809: PPUSH
37810: CALL_OW 250
37814: PUSH
37815: LD_VAR 0 2
37819: PPUSH
37820: CALL_OW 251
37824: PUSH
37825: LD_VAR 0 2
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: PUSH
37848: EMPTY
37849: LIST
37850: PPUSH
37851: CALL_OW 446
37855: GO 37779
37857: POP
37858: POP
// end ;
37859: LD_VAR 0 3
37863: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37864: LD_INT 0
37866: PPUSH
37867: PPUSH
37868: PPUSH
37869: PPUSH
37870: PPUSH
37871: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37872: LD_VAR 0 1
37876: NOT
37877: PUSH
37878: LD_VAR 0 1
37882: PPUSH
37883: CALL_OW 263
37887: PUSH
37888: LD_INT 2
37890: NONEQUAL
37891: OR
37892: IFFALSE 37896
// exit ;
37894: GO 38212
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37896: LD_ADDR_VAR 0 6
37900: PUSH
37901: LD_INT 22
37903: PUSH
37904: LD_VAR 0 1
37908: PPUSH
37909: CALL_OW 255
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 30
37923: PUSH
37924: LD_INT 36
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 34
37933: PUSH
37934: LD_INT 31
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PPUSH
37950: CALL_OW 69
37954: ST_TO_ADDR
// if not tmp then
37955: LD_VAR 0 6
37959: NOT
37960: IFFALSE 37964
// exit ;
37962: GO 38212
// result := [ ] ;
37964: LD_ADDR_VAR 0 2
37968: PUSH
37969: EMPTY
37970: ST_TO_ADDR
// for i in tmp do
37971: LD_ADDR_VAR 0 3
37975: PUSH
37976: LD_VAR 0 6
37980: PUSH
37981: FOR_IN
37982: IFFALSE 38053
// begin t := UnitsInside ( i ) ;
37984: LD_ADDR_VAR 0 4
37988: PUSH
37989: LD_VAR 0 3
37993: PPUSH
37994: CALL_OW 313
37998: ST_TO_ADDR
// if t then
37999: LD_VAR 0 4
38003: IFFALSE 38051
// for j in t do
38005: LD_ADDR_VAR 0 7
38009: PUSH
38010: LD_VAR 0 4
38014: PUSH
38015: FOR_IN
38016: IFFALSE 38049
// result := Replace ( result , result + 1 , j ) ;
38018: LD_ADDR_VAR 0 2
38022: PUSH
38023: LD_VAR 0 2
38027: PPUSH
38028: LD_VAR 0 2
38032: PUSH
38033: LD_INT 1
38035: PLUS
38036: PPUSH
38037: LD_VAR 0 7
38041: PPUSH
38042: CALL_OW 1
38046: ST_TO_ADDR
38047: GO 38015
38049: POP
38050: POP
// end ;
38051: GO 37981
38053: POP
38054: POP
// if not result then
38055: LD_VAR 0 2
38059: NOT
38060: IFFALSE 38064
// exit ;
38062: GO 38212
// mech := result [ 1 ] ;
38064: LD_ADDR_VAR 0 5
38068: PUSH
38069: LD_VAR 0 2
38073: PUSH
38074: LD_INT 1
38076: ARRAY
38077: ST_TO_ADDR
// if result > 1 then
38078: LD_VAR 0 2
38082: PUSH
38083: LD_INT 1
38085: GREATER
38086: IFFALSE 38198
// begin for i = 2 to result do
38088: LD_ADDR_VAR 0 3
38092: PUSH
38093: DOUBLE
38094: LD_INT 2
38096: DEC
38097: ST_TO_ADDR
38098: LD_VAR 0 2
38102: PUSH
38103: FOR_TO
38104: IFFALSE 38196
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38106: LD_ADDR_VAR 0 4
38110: PUSH
38111: LD_VAR 0 2
38115: PUSH
38116: LD_VAR 0 3
38120: ARRAY
38121: PPUSH
38122: LD_INT 3
38124: PPUSH
38125: CALL_OW 259
38129: PUSH
38130: LD_VAR 0 2
38134: PUSH
38135: LD_VAR 0 3
38139: ARRAY
38140: PPUSH
38141: CALL_OW 432
38145: MINUS
38146: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38147: LD_VAR 0 4
38151: PUSH
38152: LD_VAR 0 5
38156: PPUSH
38157: LD_INT 3
38159: PPUSH
38160: CALL_OW 259
38164: PUSH
38165: LD_VAR 0 5
38169: PPUSH
38170: CALL_OW 432
38174: MINUS
38175: GREATEREQUAL
38176: IFFALSE 38194
// mech := result [ i ] ;
38178: LD_ADDR_VAR 0 5
38182: PUSH
38183: LD_VAR 0 2
38187: PUSH
38188: LD_VAR 0 3
38192: ARRAY
38193: ST_TO_ADDR
// end ;
38194: GO 38103
38196: POP
38197: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38198: LD_VAR 0 1
38202: PPUSH
38203: LD_VAR 0 5
38207: PPUSH
38208: CALL_OW 135
// end ;
38212: LD_VAR 0 2
38216: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38217: LD_INT 0
38219: PPUSH
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
// result := [ ] ;
38232: LD_ADDR_VAR 0 7
38236: PUSH
38237: EMPTY
38238: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 266
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: IN
38259: NOT
38260: IFFALSE 38264
// exit ;
38262: GO 39898
// if name then
38264: LD_VAR 0 3
38268: IFFALSE 38284
// SetBName ( base_dep , name ) ;
38270: LD_VAR 0 1
38274: PPUSH
38275: LD_VAR 0 3
38279: PPUSH
38280: CALL_OW 500
// base := GetBase ( base_dep ) ;
38284: LD_ADDR_VAR 0 15
38288: PUSH
38289: LD_VAR 0 1
38293: PPUSH
38294: CALL_OW 274
38298: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38299: LD_ADDR_VAR 0 16
38303: PUSH
38304: LD_VAR 0 1
38308: PPUSH
38309: CALL_OW 255
38313: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38314: LD_ADDR_VAR 0 17
38318: PUSH
38319: LD_VAR 0 1
38323: PPUSH
38324: CALL_OW 248
38328: ST_TO_ADDR
// if sources then
38329: LD_VAR 0 5
38333: IFFALSE 38380
// for i = 1 to 3 do
38335: LD_ADDR_VAR 0 8
38339: PUSH
38340: DOUBLE
38341: LD_INT 1
38343: DEC
38344: ST_TO_ADDR
38345: LD_INT 3
38347: PUSH
38348: FOR_TO
38349: IFFALSE 38378
// AddResourceType ( base , i , sources [ i ] ) ;
38351: LD_VAR 0 15
38355: PPUSH
38356: LD_VAR 0 8
38360: PPUSH
38361: LD_VAR 0 5
38365: PUSH
38366: LD_VAR 0 8
38370: ARRAY
38371: PPUSH
38372: CALL_OW 276
38376: GO 38348
38378: POP
38379: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38380: LD_ADDR_VAR 0 18
38384: PUSH
38385: LD_VAR 0 15
38389: PPUSH
38390: LD_VAR 0 2
38394: PPUSH
38395: LD_INT 1
38397: PPUSH
38398: CALL 37641 0 3
38402: ST_TO_ADDR
// InitHc ;
38403: CALL_OW 19
// InitUc ;
38407: CALL_OW 18
// uc_side := side ;
38411: LD_ADDR_OWVAR 20
38415: PUSH
38416: LD_VAR 0 16
38420: ST_TO_ADDR
// uc_nation := nation ;
38421: LD_ADDR_OWVAR 21
38425: PUSH
38426: LD_VAR 0 17
38430: ST_TO_ADDR
// if buildings then
38431: LD_VAR 0 18
38435: IFFALSE 39757
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38437: LD_ADDR_VAR 0 19
38441: PUSH
38442: LD_VAR 0 18
38446: PPUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 30
38452: PUSH
38453: LD_INT 29
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 30
38462: PUSH
38463: LD_INT 30
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: PPUSH
38475: CALL_OW 72
38479: ST_TO_ADDR
// if tmp then
38480: LD_VAR 0 19
38484: IFFALSE 38532
// for i in tmp do
38486: LD_ADDR_VAR 0 8
38490: PUSH
38491: LD_VAR 0 19
38495: PUSH
38496: FOR_IN
38497: IFFALSE 38530
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38499: LD_VAR 0 8
38503: PPUSH
38504: CALL_OW 250
38508: PPUSH
38509: LD_VAR 0 8
38513: PPUSH
38514: CALL_OW 251
38518: PPUSH
38519: LD_VAR 0 16
38523: PPUSH
38524: CALL_OW 441
38528: GO 38496
38530: POP
38531: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38532: LD_VAR 0 18
38536: PPUSH
38537: LD_INT 2
38539: PUSH
38540: LD_INT 30
38542: PUSH
38543: LD_INT 32
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 30
38552: PUSH
38553: LD_INT 33
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: PPUSH
38565: CALL_OW 72
38569: IFFALSE 38657
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38571: LD_ADDR_VAR 0 8
38575: PUSH
38576: LD_VAR 0 18
38580: PPUSH
38581: LD_INT 2
38583: PUSH
38584: LD_INT 30
38586: PUSH
38587: LD_INT 32
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 30
38596: PUSH
38597: LD_INT 33
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: PPUSH
38609: CALL_OW 72
38613: PUSH
38614: FOR_IN
38615: IFFALSE 38655
// begin if not GetBWeapon ( i ) then
38617: LD_VAR 0 8
38621: PPUSH
38622: CALL_OW 269
38626: NOT
38627: IFFALSE 38653
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38629: LD_VAR 0 8
38633: PPUSH
38634: LD_VAR 0 8
38638: PPUSH
38639: LD_VAR 0 2
38643: PPUSH
38644: CALL 39903 0 2
38648: PPUSH
38649: CALL_OW 431
// end ;
38653: GO 38614
38655: POP
38656: POP
// end ; for i = 1 to personel do
38657: LD_ADDR_VAR 0 8
38661: PUSH
38662: DOUBLE
38663: LD_INT 1
38665: DEC
38666: ST_TO_ADDR
38667: LD_VAR 0 6
38671: PUSH
38672: FOR_TO
38673: IFFALSE 39737
// begin if i > 4 then
38675: LD_VAR 0 8
38679: PUSH
38680: LD_INT 4
38682: GREATER
38683: IFFALSE 38687
// break ;
38685: GO 39737
// case i of 1 :
38687: LD_VAR 0 8
38691: PUSH
38692: LD_INT 1
38694: DOUBLE
38695: EQUAL
38696: IFTRUE 38700
38698: GO 38780
38700: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38701: LD_ADDR_VAR 0 12
38705: PUSH
38706: LD_VAR 0 18
38710: PPUSH
38711: LD_INT 22
38713: PUSH
38714: LD_VAR 0 16
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 58
38725: PUSH
38726: EMPTY
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 30
38734: PUSH
38735: LD_INT 32
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 30
38744: PUSH
38745: LD_INT 4
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 30
38754: PUSH
38755: LD_INT 5
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: LIST
38772: PPUSH
38773: CALL_OW 72
38777: ST_TO_ADDR
38778: GO 39002
38780: LD_INT 2
38782: DOUBLE
38783: EQUAL
38784: IFTRUE 38788
38786: GO 38850
38788: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38789: LD_ADDR_VAR 0 12
38793: PUSH
38794: LD_VAR 0 18
38798: PPUSH
38799: LD_INT 22
38801: PUSH
38802: LD_VAR 0 16
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: LD_INT 30
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 30
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PPUSH
38843: CALL_OW 72
38847: ST_TO_ADDR
38848: GO 39002
38850: LD_INT 3
38852: DOUBLE
38853: EQUAL
38854: IFTRUE 38858
38856: GO 38920
38858: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38859: LD_ADDR_VAR 0 12
38863: PUSH
38864: LD_VAR 0 18
38868: PPUSH
38869: LD_INT 22
38871: PUSH
38872: LD_VAR 0 16
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: LD_INT 30
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 30
38896: PUSH
38897: LD_INT 3
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PPUSH
38913: CALL_OW 72
38917: ST_TO_ADDR
38918: GO 39002
38920: LD_INT 4
38922: DOUBLE
38923: EQUAL
38924: IFTRUE 38928
38926: GO 39001
38928: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38929: LD_ADDR_VAR 0 12
38933: PUSH
38934: LD_VAR 0 18
38938: PPUSH
38939: LD_INT 22
38941: PUSH
38942: LD_VAR 0 16
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: LD_INT 30
38956: PUSH
38957: LD_INT 6
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 30
38966: PUSH
38967: LD_INT 7
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 30
38976: PUSH
38977: LD_INT 8
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PPUSH
38994: CALL_OW 72
38998: ST_TO_ADDR
38999: GO 39002
39001: POP
// if i = 1 then
39002: LD_VAR 0 8
39006: PUSH
39007: LD_INT 1
39009: EQUAL
39010: IFFALSE 39121
// begin tmp := [ ] ;
39012: LD_ADDR_VAR 0 19
39016: PUSH
39017: EMPTY
39018: ST_TO_ADDR
// for j in f do
39019: LD_ADDR_VAR 0 9
39023: PUSH
39024: LD_VAR 0 12
39028: PUSH
39029: FOR_IN
39030: IFFALSE 39103
// if GetBType ( j ) = b_bunker then
39032: LD_VAR 0 9
39036: PPUSH
39037: CALL_OW 266
39041: PUSH
39042: LD_INT 32
39044: EQUAL
39045: IFFALSE 39072
// tmp := Insert ( tmp , 1 , j ) else
39047: LD_ADDR_VAR 0 19
39051: PUSH
39052: LD_VAR 0 19
39056: PPUSH
39057: LD_INT 1
39059: PPUSH
39060: LD_VAR 0 9
39064: PPUSH
39065: CALL_OW 2
39069: ST_TO_ADDR
39070: GO 39101
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39072: LD_ADDR_VAR 0 19
39076: PUSH
39077: LD_VAR 0 19
39081: PPUSH
39082: LD_VAR 0 19
39086: PUSH
39087: LD_INT 1
39089: PLUS
39090: PPUSH
39091: LD_VAR 0 9
39095: PPUSH
39096: CALL_OW 2
39100: ST_TO_ADDR
39101: GO 39029
39103: POP
39104: POP
// if tmp then
39105: LD_VAR 0 19
39109: IFFALSE 39121
// f := tmp ;
39111: LD_ADDR_VAR 0 12
39115: PUSH
39116: LD_VAR 0 19
39120: ST_TO_ADDR
// end ; x := personel [ i ] ;
39121: LD_ADDR_VAR 0 13
39125: PUSH
39126: LD_VAR 0 6
39130: PUSH
39131: LD_VAR 0 8
39135: ARRAY
39136: ST_TO_ADDR
// if x = - 1 then
39137: LD_VAR 0 13
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: EQUAL
39146: IFFALSE 39355
// begin for j in f do
39148: LD_ADDR_VAR 0 9
39152: PUSH
39153: LD_VAR 0 12
39157: PUSH
39158: FOR_IN
39159: IFFALSE 39351
// repeat InitHc ;
39161: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39165: LD_VAR 0 9
39169: PPUSH
39170: CALL_OW 266
39174: PUSH
39175: LD_INT 5
39177: EQUAL
39178: IFFALSE 39248
// begin if UnitsInside ( j ) < 3 then
39180: LD_VAR 0 9
39184: PPUSH
39185: CALL_OW 313
39189: PUSH
39190: LD_INT 3
39192: LESS
39193: IFFALSE 39229
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39195: LD_INT 0
39197: PPUSH
39198: LD_INT 5
39200: PUSH
39201: LD_INT 8
39203: PUSH
39204: LD_INT 9
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: PUSH
39212: LD_VAR 0 17
39216: ARRAY
39217: PPUSH
39218: LD_VAR 0 4
39222: PPUSH
39223: CALL_OW 380
39227: GO 39246
// PrepareHuman ( false , i , skill ) ;
39229: LD_INT 0
39231: PPUSH
39232: LD_VAR 0 8
39236: PPUSH
39237: LD_VAR 0 4
39241: PPUSH
39242: CALL_OW 380
// end else
39246: GO 39265
// PrepareHuman ( false , i , skill ) ;
39248: LD_INT 0
39250: PPUSH
39251: LD_VAR 0 8
39255: PPUSH
39256: LD_VAR 0 4
39260: PPUSH
39261: CALL_OW 380
// un := CreateHuman ;
39265: LD_ADDR_VAR 0 14
39269: PUSH
39270: CALL_OW 44
39274: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39275: LD_ADDR_VAR 0 7
39279: PUSH
39280: LD_VAR 0 7
39284: PPUSH
39285: LD_INT 1
39287: PPUSH
39288: LD_VAR 0 14
39292: PPUSH
39293: CALL_OW 2
39297: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39298: LD_VAR 0 14
39302: PPUSH
39303: LD_VAR 0 9
39307: PPUSH
39308: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39312: LD_VAR 0 9
39316: PPUSH
39317: CALL_OW 313
39321: PUSH
39322: LD_INT 6
39324: EQUAL
39325: PUSH
39326: LD_VAR 0 9
39330: PPUSH
39331: CALL_OW 266
39335: PUSH
39336: LD_INT 32
39338: PUSH
39339: LD_INT 31
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: IN
39346: OR
39347: IFFALSE 39161
39349: GO 39158
39351: POP
39352: POP
// end else
39353: GO 39735
// for j = 1 to x do
39355: LD_ADDR_VAR 0 9
39359: PUSH
39360: DOUBLE
39361: LD_INT 1
39363: DEC
39364: ST_TO_ADDR
39365: LD_VAR 0 13
39369: PUSH
39370: FOR_TO
39371: IFFALSE 39733
// begin InitHc ;
39373: CALL_OW 19
// if not f then
39377: LD_VAR 0 12
39381: NOT
39382: IFFALSE 39471
// begin PrepareHuman ( false , i , skill ) ;
39384: LD_INT 0
39386: PPUSH
39387: LD_VAR 0 8
39391: PPUSH
39392: LD_VAR 0 4
39396: PPUSH
39397: CALL_OW 380
// un := CreateHuman ;
39401: LD_ADDR_VAR 0 14
39405: PUSH
39406: CALL_OW 44
39410: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39411: LD_ADDR_VAR 0 7
39415: PUSH
39416: LD_VAR 0 7
39420: PPUSH
39421: LD_INT 1
39423: PPUSH
39424: LD_VAR 0 14
39428: PPUSH
39429: CALL_OW 2
39433: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39434: LD_VAR 0 14
39438: PPUSH
39439: LD_VAR 0 1
39443: PPUSH
39444: CALL_OW 250
39448: PPUSH
39449: LD_VAR 0 1
39453: PPUSH
39454: CALL_OW 251
39458: PPUSH
39459: LD_INT 10
39461: PPUSH
39462: LD_INT 0
39464: PPUSH
39465: CALL_OW 50
// continue ;
39469: GO 39370
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39471: LD_VAR 0 12
39475: PUSH
39476: LD_INT 1
39478: ARRAY
39479: PPUSH
39480: CALL_OW 313
39484: PUSH
39485: LD_VAR 0 12
39489: PUSH
39490: LD_INT 1
39492: ARRAY
39493: PPUSH
39494: CALL_OW 266
39498: PUSH
39499: LD_INT 32
39501: PUSH
39502: LD_INT 31
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: IN
39509: AND
39510: PUSH
39511: LD_VAR 0 12
39515: PUSH
39516: LD_INT 1
39518: ARRAY
39519: PPUSH
39520: CALL_OW 313
39524: PUSH
39525: LD_INT 6
39527: EQUAL
39528: OR
39529: IFFALSE 39549
// f := Delete ( f , 1 ) ;
39531: LD_ADDR_VAR 0 12
39535: PUSH
39536: LD_VAR 0 12
39540: PPUSH
39541: LD_INT 1
39543: PPUSH
39544: CALL_OW 3
39548: ST_TO_ADDR
// if not f then
39549: LD_VAR 0 12
39553: NOT
39554: IFFALSE 39572
// begin x := x + 2 ;
39556: LD_ADDR_VAR 0 13
39560: PUSH
39561: LD_VAR 0 13
39565: PUSH
39566: LD_INT 2
39568: PLUS
39569: ST_TO_ADDR
// continue ;
39570: GO 39370
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39572: LD_VAR 0 12
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: PPUSH
39581: CALL_OW 266
39585: PUSH
39586: LD_INT 5
39588: EQUAL
39589: IFFALSE 39663
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39591: LD_VAR 0 12
39595: PUSH
39596: LD_INT 1
39598: ARRAY
39599: PPUSH
39600: CALL_OW 313
39604: PUSH
39605: LD_INT 3
39607: LESS
39608: IFFALSE 39644
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39610: LD_INT 0
39612: PPUSH
39613: LD_INT 5
39615: PUSH
39616: LD_INT 8
39618: PUSH
39619: LD_INT 9
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: LIST
39626: PUSH
39627: LD_VAR 0 17
39631: ARRAY
39632: PPUSH
39633: LD_VAR 0 4
39637: PPUSH
39638: CALL_OW 380
39642: GO 39661
// PrepareHuman ( false , i , skill ) ;
39644: LD_INT 0
39646: PPUSH
39647: LD_VAR 0 8
39651: PPUSH
39652: LD_VAR 0 4
39656: PPUSH
39657: CALL_OW 380
// end else
39661: GO 39680
// PrepareHuman ( false , i , skill ) ;
39663: LD_INT 0
39665: PPUSH
39666: LD_VAR 0 8
39670: PPUSH
39671: LD_VAR 0 4
39675: PPUSH
39676: CALL_OW 380
// un := CreateHuman ;
39680: LD_ADDR_VAR 0 14
39684: PUSH
39685: CALL_OW 44
39689: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39690: LD_ADDR_VAR 0 7
39694: PUSH
39695: LD_VAR 0 7
39699: PPUSH
39700: LD_INT 1
39702: PPUSH
39703: LD_VAR 0 14
39707: PPUSH
39708: CALL_OW 2
39712: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39713: LD_VAR 0 14
39717: PPUSH
39718: LD_VAR 0 12
39722: PUSH
39723: LD_INT 1
39725: ARRAY
39726: PPUSH
39727: CALL_OW 52
// end ;
39731: GO 39370
39733: POP
39734: POP
// end ;
39735: GO 38672
39737: POP
39738: POP
// result := result ^ buildings ;
39739: LD_ADDR_VAR 0 7
39743: PUSH
39744: LD_VAR 0 7
39748: PUSH
39749: LD_VAR 0 18
39753: ADD
39754: ST_TO_ADDR
// end else
39755: GO 39898
// begin for i = 1 to personel do
39757: LD_ADDR_VAR 0 8
39761: PUSH
39762: DOUBLE
39763: LD_INT 1
39765: DEC
39766: ST_TO_ADDR
39767: LD_VAR 0 6
39771: PUSH
39772: FOR_TO
39773: IFFALSE 39896
// begin if i > 4 then
39775: LD_VAR 0 8
39779: PUSH
39780: LD_INT 4
39782: GREATER
39783: IFFALSE 39787
// break ;
39785: GO 39896
// x := personel [ i ] ;
39787: LD_ADDR_VAR 0 13
39791: PUSH
39792: LD_VAR 0 6
39796: PUSH
39797: LD_VAR 0 8
39801: ARRAY
39802: ST_TO_ADDR
// if x = - 1 then
39803: LD_VAR 0 13
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: EQUAL
39812: IFFALSE 39816
// continue ;
39814: GO 39772
// PrepareHuman ( false , i , skill ) ;
39816: LD_INT 0
39818: PPUSH
39819: LD_VAR 0 8
39823: PPUSH
39824: LD_VAR 0 4
39828: PPUSH
39829: CALL_OW 380
// un := CreateHuman ;
39833: LD_ADDR_VAR 0 14
39837: PUSH
39838: CALL_OW 44
39842: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39843: LD_VAR 0 14
39847: PPUSH
39848: LD_VAR 0 1
39852: PPUSH
39853: CALL_OW 250
39857: PPUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 251
39867: PPUSH
39868: LD_INT 10
39870: PPUSH
39871: LD_INT 0
39873: PPUSH
39874: CALL_OW 50
// result := result ^ un ;
39878: LD_ADDR_VAR 0 7
39882: PUSH
39883: LD_VAR 0 7
39887: PUSH
39888: LD_VAR 0 14
39892: ADD
39893: ST_TO_ADDR
// end ;
39894: GO 39772
39896: POP
39897: POP
// end ; end ;
39898: LD_VAR 0 7
39902: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39903: LD_INT 0
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
// result := false ;
39921: LD_ADDR_VAR 0 3
39925: PUSH
39926: LD_INT 0
39928: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39929: LD_VAR 0 1
39933: NOT
39934: PUSH
39935: LD_VAR 0 1
39939: PPUSH
39940: CALL_OW 266
39944: PUSH
39945: LD_INT 32
39947: PUSH
39948: LD_INT 33
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: IN
39955: NOT
39956: OR
39957: IFFALSE 39961
// exit ;
39959: GO 41070
// nat := GetNation ( tower ) ;
39961: LD_ADDR_VAR 0 12
39965: PUSH
39966: LD_VAR 0 1
39970: PPUSH
39971: CALL_OW 248
39975: ST_TO_ADDR
// side := GetSide ( tower ) ;
39976: LD_ADDR_VAR 0 16
39980: PUSH
39981: LD_VAR 0 1
39985: PPUSH
39986: CALL_OW 255
39990: ST_TO_ADDR
// x := GetX ( tower ) ;
39991: LD_ADDR_VAR 0 10
39995: PUSH
39996: LD_VAR 0 1
40000: PPUSH
40001: CALL_OW 250
40005: ST_TO_ADDR
// y := GetY ( tower ) ;
40006: LD_ADDR_VAR 0 11
40010: PUSH
40011: LD_VAR 0 1
40015: PPUSH
40016: CALL_OW 251
40020: ST_TO_ADDR
// if not x or not y then
40021: LD_VAR 0 10
40025: NOT
40026: PUSH
40027: LD_VAR 0 11
40031: NOT
40032: OR
40033: IFFALSE 40037
// exit ;
40035: GO 41070
// weapon := 0 ;
40037: LD_ADDR_VAR 0 18
40041: PUSH
40042: LD_INT 0
40044: ST_TO_ADDR
// fac_list := [ ] ;
40045: LD_ADDR_VAR 0 17
40049: PUSH
40050: EMPTY
40051: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40052: LD_ADDR_VAR 0 6
40056: PUSH
40057: LD_VAR 0 1
40061: PPUSH
40062: CALL_OW 274
40066: PPUSH
40067: LD_VAR 0 2
40071: PPUSH
40072: LD_INT 0
40074: PPUSH
40075: CALL 37641 0 3
40079: PPUSH
40080: LD_INT 30
40082: PUSH
40083: LD_INT 3
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PPUSH
40090: CALL_OW 72
40094: ST_TO_ADDR
// if not factories then
40095: LD_VAR 0 6
40099: NOT
40100: IFFALSE 40104
// exit ;
40102: GO 41070
// for i in factories do
40104: LD_ADDR_VAR 0 8
40108: PUSH
40109: LD_VAR 0 6
40113: PUSH
40114: FOR_IN
40115: IFFALSE 40140
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40117: LD_ADDR_VAR 0 17
40121: PUSH
40122: LD_VAR 0 17
40126: PUSH
40127: LD_VAR 0 8
40131: PPUSH
40132: CALL_OW 478
40136: UNION
40137: ST_TO_ADDR
40138: GO 40114
40140: POP
40141: POP
// if not fac_list then
40142: LD_VAR 0 17
40146: NOT
40147: IFFALSE 40151
// exit ;
40149: GO 41070
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40151: LD_ADDR_VAR 0 5
40155: PUSH
40156: LD_INT 4
40158: PUSH
40159: LD_INT 5
40161: PUSH
40162: LD_INT 9
40164: PUSH
40165: LD_INT 10
40167: PUSH
40168: LD_INT 6
40170: PUSH
40171: LD_INT 7
40173: PUSH
40174: LD_INT 11
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 27
40188: PUSH
40189: LD_INT 28
40191: PUSH
40192: LD_INT 26
40194: PUSH
40195: LD_INT 30
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 43
40206: PUSH
40207: LD_INT 44
40209: PUSH
40210: LD_INT 46
40212: PUSH
40213: LD_INT 45
40215: PUSH
40216: LD_INT 47
40218: PUSH
40219: LD_INT 49
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: PUSH
40235: LD_VAR 0 12
40239: ARRAY
40240: ST_TO_ADDR
// list := list isect fac_list ;
40241: LD_ADDR_VAR 0 5
40245: PUSH
40246: LD_VAR 0 5
40250: PUSH
40251: LD_VAR 0 17
40255: ISECT
40256: ST_TO_ADDR
// if not list then
40257: LD_VAR 0 5
40261: NOT
40262: IFFALSE 40266
// exit ;
40264: GO 41070
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40266: LD_VAR 0 12
40270: PUSH
40271: LD_INT 3
40273: EQUAL
40274: PUSH
40275: LD_INT 49
40277: PUSH
40278: LD_VAR 0 5
40282: IN
40283: AND
40284: PUSH
40285: LD_INT 31
40287: PPUSH
40288: LD_VAR 0 16
40292: PPUSH
40293: CALL_OW 321
40297: PUSH
40298: LD_INT 2
40300: EQUAL
40301: AND
40302: IFFALSE 40362
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40304: LD_INT 22
40306: PUSH
40307: LD_VAR 0 16
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 35
40318: PUSH
40319: LD_INT 49
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 91
40328: PUSH
40329: LD_VAR 0 1
40333: PUSH
40334: LD_INT 10
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: PPUSH
40347: CALL_OW 69
40351: NOT
40352: IFFALSE 40362
// weapon := ru_time_lapser ;
40354: LD_ADDR_VAR 0 18
40358: PUSH
40359: LD_INT 49
40361: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40362: LD_VAR 0 12
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: IN
40377: PUSH
40378: LD_INT 11
40380: PUSH
40381: LD_VAR 0 5
40385: IN
40386: PUSH
40387: LD_INT 30
40389: PUSH
40390: LD_VAR 0 5
40394: IN
40395: OR
40396: AND
40397: PUSH
40398: LD_INT 6
40400: PPUSH
40401: LD_VAR 0 16
40405: PPUSH
40406: CALL_OW 321
40410: PUSH
40411: LD_INT 2
40413: EQUAL
40414: AND
40415: IFFALSE 40580
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40417: LD_INT 22
40419: PUSH
40420: LD_VAR 0 16
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: LD_INT 35
40434: PUSH
40435: LD_INT 11
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 35
40444: PUSH
40445: LD_INT 30
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 91
40459: PUSH
40460: LD_VAR 0 1
40464: PUSH
40465: LD_INT 18
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: LIST
40477: PPUSH
40478: CALL_OW 69
40482: NOT
40483: PUSH
40484: LD_INT 22
40486: PUSH
40487: LD_VAR 0 16
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 30
40501: PUSH
40502: LD_INT 32
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 30
40511: PUSH
40512: LD_INT 33
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 91
40526: PUSH
40527: LD_VAR 0 1
40531: PUSH
40532: LD_INT 12
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: LIST
40544: PUSH
40545: EMPTY
40546: LIST
40547: PPUSH
40548: CALL_OW 69
40552: PUSH
40553: LD_INT 2
40555: GREATER
40556: AND
40557: IFFALSE 40580
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40559: LD_ADDR_VAR 0 18
40563: PUSH
40564: LD_INT 11
40566: PUSH
40567: LD_INT 30
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_VAR 0 12
40578: ARRAY
40579: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40580: LD_VAR 0 18
40584: NOT
40585: PUSH
40586: LD_INT 40
40588: PPUSH
40589: LD_VAR 0 16
40593: PPUSH
40594: CALL_OW 321
40598: PUSH
40599: LD_INT 2
40601: EQUAL
40602: AND
40603: PUSH
40604: LD_INT 7
40606: PUSH
40607: LD_VAR 0 5
40611: IN
40612: PUSH
40613: LD_INT 28
40615: PUSH
40616: LD_VAR 0 5
40620: IN
40621: OR
40622: PUSH
40623: LD_INT 45
40625: PUSH
40626: LD_VAR 0 5
40630: IN
40631: OR
40632: AND
40633: IFFALSE 40887
// begin hex := GetHexInfo ( x , y ) ;
40635: LD_ADDR_VAR 0 4
40639: PUSH
40640: LD_VAR 0 10
40644: PPUSH
40645: LD_VAR 0 11
40649: PPUSH
40650: CALL_OW 546
40654: ST_TO_ADDR
// if hex [ 1 ] then
40655: LD_VAR 0 4
40659: PUSH
40660: LD_INT 1
40662: ARRAY
40663: IFFALSE 40667
// exit ;
40665: GO 41070
// height := hex [ 2 ] ;
40667: LD_ADDR_VAR 0 15
40671: PUSH
40672: LD_VAR 0 4
40676: PUSH
40677: LD_INT 2
40679: ARRAY
40680: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40681: LD_ADDR_VAR 0 14
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 3
40694: PUSH
40695: LD_INT 5
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: ST_TO_ADDR
// for i in tmp do
40704: LD_ADDR_VAR 0 8
40708: PUSH
40709: LD_VAR 0 14
40713: PUSH
40714: FOR_IN
40715: IFFALSE 40885
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40717: LD_ADDR_VAR 0 9
40721: PUSH
40722: LD_VAR 0 10
40726: PPUSH
40727: LD_VAR 0 8
40731: PPUSH
40732: LD_INT 5
40734: PPUSH
40735: CALL_OW 272
40739: PUSH
40740: LD_VAR 0 11
40744: PPUSH
40745: LD_VAR 0 8
40749: PPUSH
40750: LD_INT 5
40752: PPUSH
40753: CALL_OW 273
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40762: LD_VAR 0 9
40766: PUSH
40767: LD_INT 1
40769: ARRAY
40770: PPUSH
40771: LD_VAR 0 9
40775: PUSH
40776: LD_INT 2
40778: ARRAY
40779: PPUSH
40780: CALL_OW 488
40784: IFFALSE 40883
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40786: LD_ADDR_VAR 0 4
40790: PUSH
40791: LD_VAR 0 9
40795: PUSH
40796: LD_INT 1
40798: ARRAY
40799: PPUSH
40800: LD_VAR 0 9
40804: PUSH
40805: LD_INT 2
40807: ARRAY
40808: PPUSH
40809: CALL_OW 546
40813: ST_TO_ADDR
// if hex [ 1 ] then
40814: LD_VAR 0 4
40818: PUSH
40819: LD_INT 1
40821: ARRAY
40822: IFFALSE 40826
// continue ;
40824: GO 40714
// h := hex [ 2 ] ;
40826: LD_ADDR_VAR 0 13
40830: PUSH
40831: LD_VAR 0 4
40835: PUSH
40836: LD_INT 2
40838: ARRAY
40839: ST_TO_ADDR
// if h + 7 < height then
40840: LD_VAR 0 13
40844: PUSH
40845: LD_INT 7
40847: PLUS
40848: PUSH
40849: LD_VAR 0 15
40853: LESS
40854: IFFALSE 40883
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40856: LD_ADDR_VAR 0 18
40860: PUSH
40861: LD_INT 7
40863: PUSH
40864: LD_INT 28
40866: PUSH
40867: LD_INT 45
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: PUSH
40875: LD_VAR 0 12
40879: ARRAY
40880: ST_TO_ADDR
// break ;
40881: GO 40885
// end ; end ; end ;
40883: GO 40714
40885: POP
40886: POP
// end ; if not weapon then
40887: LD_VAR 0 18
40891: NOT
40892: IFFALSE 40952
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40894: LD_ADDR_VAR 0 5
40898: PUSH
40899: LD_VAR 0 5
40903: PUSH
40904: LD_INT 11
40906: PUSH
40907: LD_INT 30
40909: PUSH
40910: LD_INT 49
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: DIFF
40918: ST_TO_ADDR
// if not list then
40919: LD_VAR 0 5
40923: NOT
40924: IFFALSE 40928
// exit ;
40926: GO 41070
// weapon := list [ rand ( 1 , list ) ] ;
40928: LD_ADDR_VAR 0 18
40932: PUSH
40933: LD_VAR 0 5
40937: PUSH
40938: LD_INT 1
40940: PPUSH
40941: LD_VAR 0 5
40945: PPUSH
40946: CALL_OW 12
40950: ARRAY
40951: ST_TO_ADDR
// end ; if weapon then
40952: LD_VAR 0 18
40956: IFFALSE 41070
// begin tmp := CostOfWeapon ( weapon ) ;
40958: LD_ADDR_VAR 0 14
40962: PUSH
40963: LD_VAR 0 18
40967: PPUSH
40968: CALL_OW 451
40972: ST_TO_ADDR
// j := GetBase ( tower ) ;
40973: LD_ADDR_VAR 0 9
40977: PUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: CALL_OW 274
40987: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40988: LD_VAR 0 9
40992: PPUSH
40993: LD_INT 1
40995: PPUSH
40996: CALL_OW 275
41000: PUSH
41001: LD_VAR 0 14
41005: PUSH
41006: LD_INT 1
41008: ARRAY
41009: GREATEREQUAL
41010: PUSH
41011: LD_VAR 0 9
41015: PPUSH
41016: LD_INT 2
41018: PPUSH
41019: CALL_OW 275
41023: PUSH
41024: LD_VAR 0 14
41028: PUSH
41029: LD_INT 2
41031: ARRAY
41032: GREATEREQUAL
41033: AND
41034: PUSH
41035: LD_VAR 0 9
41039: PPUSH
41040: LD_INT 3
41042: PPUSH
41043: CALL_OW 275
41047: PUSH
41048: LD_VAR 0 14
41052: PUSH
41053: LD_INT 3
41055: ARRAY
41056: GREATEREQUAL
41057: AND
41058: IFFALSE 41070
// result := weapon ;
41060: LD_ADDR_VAR 0 3
41064: PUSH
41065: LD_VAR 0 18
41069: ST_TO_ADDR
// end ; end ;
41070: LD_VAR 0 3
41074: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41075: LD_INT 0
41077: PPUSH
41078: PPUSH
// result := true ;
41079: LD_ADDR_VAR 0 3
41083: PUSH
41084: LD_INT 1
41086: ST_TO_ADDR
// if array1 = array2 then
41087: LD_VAR 0 1
41091: PUSH
41092: LD_VAR 0 2
41096: EQUAL
41097: IFFALSE 41157
// begin for i = 1 to array1 do
41099: LD_ADDR_VAR 0 4
41103: PUSH
41104: DOUBLE
41105: LD_INT 1
41107: DEC
41108: ST_TO_ADDR
41109: LD_VAR 0 1
41113: PUSH
41114: FOR_TO
41115: IFFALSE 41153
// if array1 [ i ] <> array2 [ i ] then
41117: LD_VAR 0 1
41121: PUSH
41122: LD_VAR 0 4
41126: ARRAY
41127: PUSH
41128: LD_VAR 0 2
41132: PUSH
41133: LD_VAR 0 4
41137: ARRAY
41138: NONEQUAL
41139: IFFALSE 41151
// begin result := false ;
41141: LD_ADDR_VAR 0 3
41145: PUSH
41146: LD_INT 0
41148: ST_TO_ADDR
// break ;
41149: GO 41153
// end ;
41151: GO 41114
41153: POP
41154: POP
// end else
41155: GO 41165
// result := false ;
41157: LD_ADDR_VAR 0 3
41161: PUSH
41162: LD_INT 0
41164: ST_TO_ADDR
// end ;
41165: LD_VAR 0 3
41169: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41170: LD_INT 0
41172: PPUSH
41173: PPUSH
// if not array1 or not array2 then
41174: LD_VAR 0 1
41178: NOT
41179: PUSH
41180: LD_VAR 0 2
41184: NOT
41185: OR
41186: IFFALSE 41190
// exit ;
41188: GO 41254
// result := true ;
41190: LD_ADDR_VAR 0 3
41194: PUSH
41195: LD_INT 1
41197: ST_TO_ADDR
// for i = 1 to array1 do
41198: LD_ADDR_VAR 0 4
41202: PUSH
41203: DOUBLE
41204: LD_INT 1
41206: DEC
41207: ST_TO_ADDR
41208: LD_VAR 0 1
41212: PUSH
41213: FOR_TO
41214: IFFALSE 41252
// if array1 [ i ] <> array2 [ i ] then
41216: LD_VAR 0 1
41220: PUSH
41221: LD_VAR 0 4
41225: ARRAY
41226: PUSH
41227: LD_VAR 0 2
41231: PUSH
41232: LD_VAR 0 4
41236: ARRAY
41237: NONEQUAL
41238: IFFALSE 41250
// begin result := false ;
41240: LD_ADDR_VAR 0 3
41244: PUSH
41245: LD_INT 0
41247: ST_TO_ADDR
// break ;
41248: GO 41252
// end ;
41250: GO 41213
41252: POP
41253: POP
// end ;
41254: LD_VAR 0 3
41258: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41259: LD_INT 0
41261: PPUSH
41262: PPUSH
41263: PPUSH
// pom := GetBase ( fac ) ;
41264: LD_ADDR_VAR 0 5
41268: PUSH
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 274
41278: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41279: LD_ADDR_VAR 0 4
41283: PUSH
41284: LD_VAR 0 2
41288: PUSH
41289: LD_INT 1
41291: ARRAY
41292: PPUSH
41293: LD_VAR 0 2
41297: PUSH
41298: LD_INT 2
41300: ARRAY
41301: PPUSH
41302: LD_VAR 0 2
41306: PUSH
41307: LD_INT 3
41309: ARRAY
41310: PPUSH
41311: LD_VAR 0 2
41315: PUSH
41316: LD_INT 4
41318: ARRAY
41319: PPUSH
41320: CALL_OW 449
41324: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41325: LD_ADDR_VAR 0 3
41329: PUSH
41330: LD_VAR 0 5
41334: PPUSH
41335: LD_INT 1
41337: PPUSH
41338: CALL_OW 275
41342: PUSH
41343: LD_VAR 0 4
41347: PUSH
41348: LD_INT 1
41350: ARRAY
41351: GREATEREQUAL
41352: PUSH
41353: LD_VAR 0 5
41357: PPUSH
41358: LD_INT 2
41360: PPUSH
41361: CALL_OW 275
41365: PUSH
41366: LD_VAR 0 4
41370: PUSH
41371: LD_INT 2
41373: ARRAY
41374: GREATEREQUAL
41375: AND
41376: PUSH
41377: LD_VAR 0 5
41381: PPUSH
41382: LD_INT 3
41384: PPUSH
41385: CALL_OW 275
41389: PUSH
41390: LD_VAR 0 4
41394: PUSH
41395: LD_INT 3
41397: ARRAY
41398: GREATEREQUAL
41399: AND
41400: ST_TO_ADDR
// end ;
41401: LD_VAR 0 3
41405: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41406: LD_INT 0
41408: PPUSH
41409: PPUSH
41410: PPUSH
41411: PPUSH
// pom := GetBase ( building ) ;
41412: LD_ADDR_VAR 0 3
41416: PUSH
41417: LD_VAR 0 1
41421: PPUSH
41422: CALL_OW 274
41426: ST_TO_ADDR
// if not pom then
41427: LD_VAR 0 3
41431: NOT
41432: IFFALSE 41436
// exit ;
41434: GO 41606
// btype := GetBType ( building ) ;
41436: LD_ADDR_VAR 0 5
41440: PUSH
41441: LD_VAR 0 1
41445: PPUSH
41446: CALL_OW 266
41450: ST_TO_ADDR
// if btype = b_armoury then
41451: LD_VAR 0 5
41455: PUSH
41456: LD_INT 4
41458: EQUAL
41459: IFFALSE 41469
// btype := b_barracks ;
41461: LD_ADDR_VAR 0 5
41465: PUSH
41466: LD_INT 5
41468: ST_TO_ADDR
// if btype = b_depot then
41469: LD_VAR 0 5
41473: PUSH
41474: LD_INT 0
41476: EQUAL
41477: IFFALSE 41487
// btype := b_warehouse ;
41479: LD_ADDR_VAR 0 5
41483: PUSH
41484: LD_INT 1
41486: ST_TO_ADDR
// if btype = b_workshop then
41487: LD_VAR 0 5
41491: PUSH
41492: LD_INT 2
41494: EQUAL
41495: IFFALSE 41505
// btype := b_factory ;
41497: LD_ADDR_VAR 0 5
41501: PUSH
41502: LD_INT 3
41504: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41505: LD_ADDR_VAR 0 4
41509: PUSH
41510: LD_VAR 0 5
41514: PPUSH
41515: LD_VAR 0 1
41519: PPUSH
41520: CALL_OW 248
41524: PPUSH
41525: CALL_OW 450
41529: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41530: LD_ADDR_VAR 0 2
41534: PUSH
41535: LD_VAR 0 3
41539: PPUSH
41540: LD_INT 1
41542: PPUSH
41543: CALL_OW 275
41547: PUSH
41548: LD_VAR 0 4
41552: PUSH
41553: LD_INT 1
41555: ARRAY
41556: GREATEREQUAL
41557: PUSH
41558: LD_VAR 0 3
41562: PPUSH
41563: LD_INT 2
41565: PPUSH
41566: CALL_OW 275
41570: PUSH
41571: LD_VAR 0 4
41575: PUSH
41576: LD_INT 2
41578: ARRAY
41579: GREATEREQUAL
41580: AND
41581: PUSH
41582: LD_VAR 0 3
41586: PPUSH
41587: LD_INT 3
41589: PPUSH
41590: CALL_OW 275
41594: PUSH
41595: LD_VAR 0 4
41599: PUSH
41600: LD_INT 3
41602: ARRAY
41603: GREATEREQUAL
41604: AND
41605: ST_TO_ADDR
// end ;
41606: LD_VAR 0 2
41610: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41611: LD_INT 0
41613: PPUSH
41614: PPUSH
41615: PPUSH
// pom := GetBase ( building ) ;
41616: LD_ADDR_VAR 0 4
41620: PUSH
41621: LD_VAR 0 1
41625: PPUSH
41626: CALL_OW 274
41630: ST_TO_ADDR
// if not pom then
41631: LD_VAR 0 4
41635: NOT
41636: IFFALSE 41640
// exit ;
41638: GO 41741
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41640: LD_ADDR_VAR 0 5
41644: PUSH
41645: LD_VAR 0 2
41649: PPUSH
41650: LD_VAR 0 1
41654: PPUSH
41655: CALL_OW 248
41659: PPUSH
41660: CALL_OW 450
41664: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41665: LD_ADDR_VAR 0 3
41669: PUSH
41670: LD_VAR 0 4
41674: PPUSH
41675: LD_INT 1
41677: PPUSH
41678: CALL_OW 275
41682: PUSH
41683: LD_VAR 0 5
41687: PUSH
41688: LD_INT 1
41690: ARRAY
41691: GREATEREQUAL
41692: PUSH
41693: LD_VAR 0 4
41697: PPUSH
41698: LD_INT 2
41700: PPUSH
41701: CALL_OW 275
41705: PUSH
41706: LD_VAR 0 5
41710: PUSH
41711: LD_INT 2
41713: ARRAY
41714: GREATEREQUAL
41715: AND
41716: PUSH
41717: LD_VAR 0 4
41721: PPUSH
41722: LD_INT 3
41724: PPUSH
41725: CALL_OW 275
41729: PUSH
41730: LD_VAR 0 5
41734: PUSH
41735: LD_INT 3
41737: ARRAY
41738: GREATEREQUAL
41739: AND
41740: ST_TO_ADDR
// end ;
41741: LD_VAR 0 3
41745: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41746: LD_INT 0
41748: PPUSH
41749: PPUSH
41750: PPUSH
41751: PPUSH
41752: PPUSH
41753: PPUSH
41754: PPUSH
41755: PPUSH
41756: PPUSH
41757: PPUSH
41758: PPUSH
// result := false ;
41759: LD_ADDR_VAR 0 8
41763: PUSH
41764: LD_INT 0
41766: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41767: LD_VAR 0 5
41771: NOT
41772: PUSH
41773: LD_VAR 0 1
41777: NOT
41778: OR
41779: PUSH
41780: LD_VAR 0 2
41784: NOT
41785: OR
41786: PUSH
41787: LD_VAR 0 3
41791: NOT
41792: OR
41793: IFFALSE 41797
// exit ;
41795: GO 42611
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41797: LD_ADDR_VAR 0 14
41801: PUSH
41802: LD_VAR 0 1
41806: PPUSH
41807: LD_VAR 0 2
41811: PPUSH
41812: LD_VAR 0 3
41816: PPUSH
41817: LD_VAR 0 4
41821: PPUSH
41822: LD_VAR 0 5
41826: PUSH
41827: LD_INT 1
41829: ARRAY
41830: PPUSH
41831: CALL_OW 248
41835: PPUSH
41836: LD_INT 0
41838: PPUSH
41839: CALL 43864 0 6
41843: ST_TO_ADDR
// if not hexes then
41844: LD_VAR 0 14
41848: NOT
41849: IFFALSE 41853
// exit ;
41851: GO 42611
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41853: LD_ADDR_VAR 0 17
41857: PUSH
41858: LD_VAR 0 5
41862: PPUSH
41863: LD_INT 22
41865: PUSH
41866: LD_VAR 0 13
41870: PPUSH
41871: CALL_OW 255
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: LD_INT 30
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 30
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PPUSH
41912: CALL_OW 72
41916: ST_TO_ADDR
// for i = 1 to hexes do
41917: LD_ADDR_VAR 0 9
41921: PUSH
41922: DOUBLE
41923: LD_INT 1
41925: DEC
41926: ST_TO_ADDR
41927: LD_VAR 0 14
41931: PUSH
41932: FOR_TO
41933: IFFALSE 42609
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41935: LD_ADDR_VAR 0 13
41939: PUSH
41940: LD_VAR 0 14
41944: PUSH
41945: LD_VAR 0 9
41949: ARRAY
41950: PUSH
41951: LD_INT 1
41953: ARRAY
41954: PPUSH
41955: LD_VAR 0 14
41959: PUSH
41960: LD_VAR 0 9
41964: ARRAY
41965: PUSH
41966: LD_INT 2
41968: ARRAY
41969: PPUSH
41970: CALL_OW 428
41974: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41975: LD_VAR 0 14
41979: PUSH
41980: LD_VAR 0 9
41984: ARRAY
41985: PUSH
41986: LD_INT 1
41988: ARRAY
41989: PPUSH
41990: LD_VAR 0 14
41994: PUSH
41995: LD_VAR 0 9
41999: ARRAY
42000: PUSH
42001: LD_INT 2
42003: ARRAY
42004: PPUSH
42005: CALL_OW 351
42009: PUSH
42010: LD_VAR 0 14
42014: PUSH
42015: LD_VAR 0 9
42019: ARRAY
42020: PUSH
42021: LD_INT 1
42023: ARRAY
42024: PPUSH
42025: LD_VAR 0 14
42029: PUSH
42030: LD_VAR 0 9
42034: ARRAY
42035: PUSH
42036: LD_INT 2
42038: ARRAY
42039: PPUSH
42040: CALL_OW 488
42044: NOT
42045: OR
42046: PUSH
42047: LD_VAR 0 13
42051: PPUSH
42052: CALL_OW 247
42056: PUSH
42057: LD_INT 3
42059: EQUAL
42060: OR
42061: IFFALSE 42067
// exit ;
42063: POP
42064: POP
42065: GO 42611
// if not tmp then
42067: LD_VAR 0 13
42071: NOT
42072: IFFALSE 42076
// continue ;
42074: GO 41932
// result := true ;
42076: LD_ADDR_VAR 0 8
42080: PUSH
42081: LD_INT 1
42083: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42084: LD_VAR 0 6
42088: PUSH
42089: LD_VAR 0 13
42093: PPUSH
42094: CALL_OW 247
42098: PUSH
42099: LD_INT 2
42101: EQUAL
42102: AND
42103: PUSH
42104: LD_VAR 0 13
42108: PPUSH
42109: CALL_OW 263
42113: PUSH
42114: LD_INT 1
42116: EQUAL
42117: AND
42118: IFFALSE 42282
// begin if IsDrivenBy ( tmp ) then
42120: LD_VAR 0 13
42124: PPUSH
42125: CALL_OW 311
42129: IFFALSE 42133
// continue ;
42131: GO 41932
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42133: LD_VAR 0 6
42137: PPUSH
42138: LD_INT 3
42140: PUSH
42141: LD_INT 60
42143: PUSH
42144: EMPTY
42145: LIST
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: PUSH
42154: LD_INT 55
42156: PUSH
42157: EMPTY
42158: LIST
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PPUSH
42168: CALL_OW 72
42172: IFFALSE 42280
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42174: LD_ADDR_VAR 0 18
42178: PUSH
42179: LD_VAR 0 6
42183: PPUSH
42184: LD_INT 3
42186: PUSH
42187: LD_INT 60
42189: PUSH
42190: EMPTY
42191: LIST
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: LD_INT 55
42202: PUSH
42203: EMPTY
42204: LIST
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PPUSH
42214: CALL_OW 72
42218: PUSH
42219: LD_INT 1
42221: ARRAY
42222: ST_TO_ADDR
// if IsInUnit ( driver ) then
42223: LD_VAR 0 18
42227: PPUSH
42228: CALL_OW 310
42232: IFFALSE 42243
// ComExit ( driver ) ;
42234: LD_VAR 0 18
42238: PPUSH
42239: CALL 67665 0 1
// AddComEnterUnit ( driver , tmp ) ;
42243: LD_VAR 0 18
42247: PPUSH
42248: LD_VAR 0 13
42252: PPUSH
42253: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42257: LD_VAR 0 18
42261: PPUSH
42262: LD_VAR 0 7
42266: PPUSH
42267: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42271: LD_VAR 0 18
42275: PPUSH
42276: CALL_OW 181
// end ; continue ;
42280: GO 41932
// end ; if not cleaners or not tmp in cleaners then
42282: LD_VAR 0 6
42286: NOT
42287: PUSH
42288: LD_VAR 0 13
42292: PUSH
42293: LD_VAR 0 6
42297: IN
42298: NOT
42299: OR
42300: IFFALSE 42607
// begin if dep then
42302: LD_VAR 0 17
42306: IFFALSE 42442
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42308: LD_ADDR_VAR 0 16
42312: PUSH
42313: LD_VAR 0 17
42317: PUSH
42318: LD_INT 1
42320: ARRAY
42321: PPUSH
42322: CALL_OW 250
42326: PPUSH
42327: LD_VAR 0 17
42331: PUSH
42332: LD_INT 1
42334: ARRAY
42335: PPUSH
42336: CALL_OW 254
42340: PPUSH
42341: LD_INT 5
42343: PPUSH
42344: CALL_OW 272
42348: PUSH
42349: LD_VAR 0 17
42353: PUSH
42354: LD_INT 1
42356: ARRAY
42357: PPUSH
42358: CALL_OW 251
42362: PPUSH
42363: LD_VAR 0 17
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: PPUSH
42372: CALL_OW 254
42376: PPUSH
42377: LD_INT 5
42379: PPUSH
42380: CALL_OW 273
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42389: LD_VAR 0 16
42393: PUSH
42394: LD_INT 1
42396: ARRAY
42397: PPUSH
42398: LD_VAR 0 16
42402: PUSH
42403: LD_INT 2
42405: ARRAY
42406: PPUSH
42407: CALL_OW 488
42411: IFFALSE 42442
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42413: LD_VAR 0 13
42417: PPUSH
42418: LD_VAR 0 16
42422: PUSH
42423: LD_INT 1
42425: ARRAY
42426: PPUSH
42427: LD_VAR 0 16
42431: PUSH
42432: LD_INT 2
42434: ARRAY
42435: PPUSH
42436: CALL_OW 111
// continue ;
42440: GO 41932
// end ; end ; r := GetDir ( tmp ) ;
42442: LD_ADDR_VAR 0 15
42446: PUSH
42447: LD_VAR 0 13
42451: PPUSH
42452: CALL_OW 254
42456: ST_TO_ADDR
// if r = 5 then
42457: LD_VAR 0 15
42461: PUSH
42462: LD_INT 5
42464: EQUAL
42465: IFFALSE 42475
// r := 0 ;
42467: LD_ADDR_VAR 0 15
42471: PUSH
42472: LD_INT 0
42474: ST_TO_ADDR
// for j = r to 5 do
42475: LD_ADDR_VAR 0 10
42479: PUSH
42480: DOUBLE
42481: LD_VAR 0 15
42485: DEC
42486: ST_TO_ADDR
42487: LD_INT 5
42489: PUSH
42490: FOR_TO
42491: IFFALSE 42605
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42493: LD_ADDR_VAR 0 11
42497: PUSH
42498: LD_VAR 0 13
42502: PPUSH
42503: CALL_OW 250
42507: PPUSH
42508: LD_VAR 0 10
42512: PPUSH
42513: LD_INT 2
42515: PPUSH
42516: CALL_OW 272
42520: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42521: LD_ADDR_VAR 0 12
42525: PUSH
42526: LD_VAR 0 13
42530: PPUSH
42531: CALL_OW 251
42535: PPUSH
42536: LD_VAR 0 10
42540: PPUSH
42541: LD_INT 2
42543: PPUSH
42544: CALL_OW 273
42548: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42549: LD_VAR 0 11
42553: PPUSH
42554: LD_VAR 0 12
42558: PPUSH
42559: CALL_OW 488
42563: PUSH
42564: LD_VAR 0 11
42568: PPUSH
42569: LD_VAR 0 12
42573: PPUSH
42574: CALL_OW 428
42578: NOT
42579: AND
42580: IFFALSE 42603
// begin ComMoveXY ( tmp , _x , _y ) ;
42582: LD_VAR 0 13
42586: PPUSH
42587: LD_VAR 0 11
42591: PPUSH
42592: LD_VAR 0 12
42596: PPUSH
42597: CALL_OW 111
// break ;
42601: GO 42605
// end ; end ;
42603: GO 42490
42605: POP
42606: POP
// end ; end ;
42607: GO 41932
42609: POP
42610: POP
// end ;
42611: LD_VAR 0 8
42615: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42616: LD_INT 0
42618: PPUSH
// result := true ;
42619: LD_ADDR_VAR 0 3
42623: PUSH
42624: LD_INT 1
42626: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42627: LD_VAR 0 2
42631: PUSH
42632: LD_INT 24
42634: DOUBLE
42635: EQUAL
42636: IFTRUE 42646
42638: LD_INT 33
42640: DOUBLE
42641: EQUAL
42642: IFTRUE 42646
42644: GO 42671
42646: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_INT 32
42654: PPUSH
42655: LD_VAR 0 1
42659: PPUSH
42660: CALL_OW 321
42664: PUSH
42665: LD_INT 2
42667: EQUAL
42668: ST_TO_ADDR
42669: GO 42987
42671: LD_INT 20
42673: DOUBLE
42674: EQUAL
42675: IFTRUE 42679
42677: GO 42704
42679: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42680: LD_ADDR_VAR 0 3
42684: PUSH
42685: LD_INT 6
42687: PPUSH
42688: LD_VAR 0 1
42692: PPUSH
42693: CALL_OW 321
42697: PUSH
42698: LD_INT 2
42700: EQUAL
42701: ST_TO_ADDR
42702: GO 42987
42704: LD_INT 22
42706: DOUBLE
42707: EQUAL
42708: IFTRUE 42718
42710: LD_INT 36
42712: DOUBLE
42713: EQUAL
42714: IFTRUE 42718
42716: GO 42743
42718: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42719: LD_ADDR_VAR 0 3
42723: PUSH
42724: LD_INT 15
42726: PPUSH
42727: LD_VAR 0 1
42731: PPUSH
42732: CALL_OW 321
42736: PUSH
42737: LD_INT 2
42739: EQUAL
42740: ST_TO_ADDR
42741: GO 42987
42743: LD_INT 30
42745: DOUBLE
42746: EQUAL
42747: IFTRUE 42751
42749: GO 42776
42751: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42752: LD_ADDR_VAR 0 3
42756: PUSH
42757: LD_INT 20
42759: PPUSH
42760: LD_VAR 0 1
42764: PPUSH
42765: CALL_OW 321
42769: PUSH
42770: LD_INT 2
42772: EQUAL
42773: ST_TO_ADDR
42774: GO 42987
42776: LD_INT 28
42778: DOUBLE
42779: EQUAL
42780: IFTRUE 42790
42782: LD_INT 21
42784: DOUBLE
42785: EQUAL
42786: IFTRUE 42790
42788: GO 42815
42790: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42791: LD_ADDR_VAR 0 3
42795: PUSH
42796: LD_INT 21
42798: PPUSH
42799: LD_VAR 0 1
42803: PPUSH
42804: CALL_OW 321
42808: PUSH
42809: LD_INT 2
42811: EQUAL
42812: ST_TO_ADDR
42813: GO 42987
42815: LD_INT 16
42817: DOUBLE
42818: EQUAL
42819: IFTRUE 42823
42821: GO 42848
42823: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42824: LD_ADDR_VAR 0 3
42828: PUSH
42829: LD_INT 84
42831: PPUSH
42832: LD_VAR 0 1
42836: PPUSH
42837: CALL_OW 321
42841: PUSH
42842: LD_INT 2
42844: EQUAL
42845: ST_TO_ADDR
42846: GO 42987
42848: LD_INT 19
42850: DOUBLE
42851: EQUAL
42852: IFTRUE 42862
42854: LD_INT 23
42856: DOUBLE
42857: EQUAL
42858: IFTRUE 42862
42860: GO 42887
42862: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42863: LD_ADDR_VAR 0 3
42867: PUSH
42868: LD_INT 83
42870: PPUSH
42871: LD_VAR 0 1
42875: PPUSH
42876: CALL_OW 321
42880: PUSH
42881: LD_INT 2
42883: EQUAL
42884: ST_TO_ADDR
42885: GO 42987
42887: LD_INT 17
42889: DOUBLE
42890: EQUAL
42891: IFTRUE 42895
42893: GO 42920
42895: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42896: LD_ADDR_VAR 0 3
42900: PUSH
42901: LD_INT 39
42903: PPUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: CALL_OW 321
42913: PUSH
42914: LD_INT 2
42916: EQUAL
42917: ST_TO_ADDR
42918: GO 42987
42920: LD_INT 18
42922: DOUBLE
42923: EQUAL
42924: IFTRUE 42928
42926: GO 42953
42928: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42929: LD_ADDR_VAR 0 3
42933: PUSH
42934: LD_INT 40
42936: PPUSH
42937: LD_VAR 0 1
42941: PPUSH
42942: CALL_OW 321
42946: PUSH
42947: LD_INT 2
42949: EQUAL
42950: ST_TO_ADDR
42951: GO 42987
42953: LD_INT 27
42955: DOUBLE
42956: EQUAL
42957: IFTRUE 42961
42959: GO 42986
42961: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42962: LD_ADDR_VAR 0 3
42966: PUSH
42967: LD_INT 35
42969: PPUSH
42970: LD_VAR 0 1
42974: PPUSH
42975: CALL_OW 321
42979: PUSH
42980: LD_INT 2
42982: EQUAL
42983: ST_TO_ADDR
42984: GO 42987
42986: POP
// end ;
42987: LD_VAR 0 3
42991: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42992: LD_INT 0
42994: PPUSH
42995: PPUSH
42996: PPUSH
42997: PPUSH
42998: PPUSH
42999: PPUSH
43000: PPUSH
43001: PPUSH
43002: PPUSH
43003: PPUSH
43004: PPUSH
// result := false ;
43005: LD_ADDR_VAR 0 6
43009: PUSH
43010: LD_INT 0
43012: ST_TO_ADDR
// if btype = b_depot then
43013: LD_VAR 0 2
43017: PUSH
43018: LD_INT 0
43020: EQUAL
43021: IFFALSE 43033
// begin result := true ;
43023: LD_ADDR_VAR 0 6
43027: PUSH
43028: LD_INT 1
43030: ST_TO_ADDR
// exit ;
43031: GO 43859
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43033: LD_VAR 0 1
43037: NOT
43038: PUSH
43039: LD_VAR 0 1
43043: PPUSH
43044: CALL_OW 266
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: IN
43059: NOT
43060: OR
43061: PUSH
43062: LD_VAR 0 2
43066: NOT
43067: OR
43068: PUSH
43069: LD_VAR 0 5
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: LD_INT 4
43088: PUSH
43089: LD_INT 5
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: IN
43100: NOT
43101: OR
43102: PUSH
43103: LD_VAR 0 3
43107: PPUSH
43108: LD_VAR 0 4
43112: PPUSH
43113: CALL_OW 488
43117: NOT
43118: OR
43119: IFFALSE 43123
// exit ;
43121: GO 43859
// side := GetSide ( depot ) ;
43123: LD_ADDR_VAR 0 9
43127: PUSH
43128: LD_VAR 0 1
43132: PPUSH
43133: CALL_OW 255
43137: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43138: LD_VAR 0 9
43142: PPUSH
43143: LD_VAR 0 2
43147: PPUSH
43148: CALL 42616 0 2
43152: NOT
43153: IFFALSE 43157
// exit ;
43155: GO 43859
// pom := GetBase ( depot ) ;
43157: LD_ADDR_VAR 0 10
43161: PUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 274
43171: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43172: LD_ADDR_VAR 0 11
43176: PUSH
43177: LD_VAR 0 2
43181: PPUSH
43182: LD_VAR 0 1
43186: PPUSH
43187: CALL_OW 248
43191: PPUSH
43192: CALL_OW 450
43196: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43197: LD_VAR 0 10
43201: PPUSH
43202: LD_INT 1
43204: PPUSH
43205: CALL_OW 275
43209: PUSH
43210: LD_VAR 0 11
43214: PUSH
43215: LD_INT 1
43217: ARRAY
43218: GREATEREQUAL
43219: PUSH
43220: LD_VAR 0 10
43224: PPUSH
43225: LD_INT 2
43227: PPUSH
43228: CALL_OW 275
43232: PUSH
43233: LD_VAR 0 11
43237: PUSH
43238: LD_INT 2
43240: ARRAY
43241: GREATEREQUAL
43242: AND
43243: PUSH
43244: LD_VAR 0 10
43248: PPUSH
43249: LD_INT 3
43251: PPUSH
43252: CALL_OW 275
43256: PUSH
43257: LD_VAR 0 11
43261: PUSH
43262: LD_INT 3
43264: ARRAY
43265: GREATEREQUAL
43266: AND
43267: NOT
43268: IFFALSE 43272
// exit ;
43270: GO 43859
// if GetBType ( depot ) = b_depot then
43272: LD_VAR 0 1
43276: PPUSH
43277: CALL_OW 266
43281: PUSH
43282: LD_INT 0
43284: EQUAL
43285: IFFALSE 43297
// dist := 28 else
43287: LD_ADDR_VAR 0 14
43291: PUSH
43292: LD_INT 28
43294: ST_TO_ADDR
43295: GO 43305
// dist := 36 ;
43297: LD_ADDR_VAR 0 14
43301: PUSH
43302: LD_INT 36
43304: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43305: LD_VAR 0 1
43309: PPUSH
43310: LD_VAR 0 3
43314: PPUSH
43315: LD_VAR 0 4
43319: PPUSH
43320: CALL_OW 297
43324: PUSH
43325: LD_VAR 0 14
43329: GREATER
43330: IFFALSE 43334
// exit ;
43332: GO 43859
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43334: LD_ADDR_VAR 0 12
43338: PUSH
43339: LD_VAR 0 2
43343: PPUSH
43344: LD_VAR 0 3
43348: PPUSH
43349: LD_VAR 0 4
43353: PPUSH
43354: LD_VAR 0 5
43358: PPUSH
43359: LD_VAR 0 1
43363: PPUSH
43364: CALL_OW 248
43368: PPUSH
43369: LD_INT 0
43371: PPUSH
43372: CALL 43864 0 6
43376: ST_TO_ADDR
// if not hexes then
43377: LD_VAR 0 12
43381: NOT
43382: IFFALSE 43386
// exit ;
43384: GO 43859
// hex := GetHexInfo ( x , y ) ;
43386: LD_ADDR_VAR 0 15
43390: PUSH
43391: LD_VAR 0 3
43395: PPUSH
43396: LD_VAR 0 4
43400: PPUSH
43401: CALL_OW 546
43405: ST_TO_ADDR
// if hex [ 1 ] then
43406: LD_VAR 0 15
43410: PUSH
43411: LD_INT 1
43413: ARRAY
43414: IFFALSE 43418
// exit ;
43416: GO 43859
// height := hex [ 2 ] ;
43418: LD_ADDR_VAR 0 13
43422: PUSH
43423: LD_VAR 0 15
43427: PUSH
43428: LD_INT 2
43430: ARRAY
43431: ST_TO_ADDR
// for i = 1 to hexes do
43432: LD_ADDR_VAR 0 7
43436: PUSH
43437: DOUBLE
43438: LD_INT 1
43440: DEC
43441: ST_TO_ADDR
43442: LD_VAR 0 12
43446: PUSH
43447: FOR_TO
43448: IFFALSE 43778
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43450: LD_VAR 0 12
43454: PUSH
43455: LD_VAR 0 7
43459: ARRAY
43460: PUSH
43461: LD_INT 1
43463: ARRAY
43464: PPUSH
43465: LD_VAR 0 12
43469: PUSH
43470: LD_VAR 0 7
43474: ARRAY
43475: PUSH
43476: LD_INT 2
43478: ARRAY
43479: PPUSH
43480: CALL_OW 488
43484: NOT
43485: PUSH
43486: LD_VAR 0 12
43490: PUSH
43491: LD_VAR 0 7
43495: ARRAY
43496: PUSH
43497: LD_INT 1
43499: ARRAY
43500: PPUSH
43501: LD_VAR 0 12
43505: PUSH
43506: LD_VAR 0 7
43510: ARRAY
43511: PUSH
43512: LD_INT 2
43514: ARRAY
43515: PPUSH
43516: CALL_OW 428
43520: PUSH
43521: LD_INT 0
43523: GREATER
43524: OR
43525: PUSH
43526: LD_VAR 0 12
43530: PUSH
43531: LD_VAR 0 7
43535: ARRAY
43536: PUSH
43537: LD_INT 1
43539: ARRAY
43540: PPUSH
43541: LD_VAR 0 12
43545: PUSH
43546: LD_VAR 0 7
43550: ARRAY
43551: PUSH
43552: LD_INT 2
43554: ARRAY
43555: PPUSH
43556: CALL_OW 351
43560: OR
43561: IFFALSE 43567
// exit ;
43563: POP
43564: POP
43565: GO 43859
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43567: LD_ADDR_VAR 0 8
43571: PUSH
43572: LD_VAR 0 12
43576: PUSH
43577: LD_VAR 0 7
43581: ARRAY
43582: PUSH
43583: LD_INT 1
43585: ARRAY
43586: PPUSH
43587: LD_VAR 0 12
43591: PUSH
43592: LD_VAR 0 7
43596: ARRAY
43597: PUSH
43598: LD_INT 2
43600: ARRAY
43601: PPUSH
43602: CALL_OW 546
43606: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43607: LD_VAR 0 8
43611: PUSH
43612: LD_INT 1
43614: ARRAY
43615: PUSH
43616: LD_VAR 0 8
43620: PUSH
43621: LD_INT 2
43623: ARRAY
43624: PUSH
43625: LD_VAR 0 13
43629: PUSH
43630: LD_INT 2
43632: PLUS
43633: GREATER
43634: OR
43635: PUSH
43636: LD_VAR 0 8
43640: PUSH
43641: LD_INT 2
43643: ARRAY
43644: PUSH
43645: LD_VAR 0 13
43649: PUSH
43650: LD_INT 2
43652: MINUS
43653: LESS
43654: OR
43655: PUSH
43656: LD_VAR 0 8
43660: PUSH
43661: LD_INT 3
43663: ARRAY
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 8
43670: PUSH
43671: LD_INT 9
43673: PUSH
43674: LD_INT 10
43676: PUSH
43677: LD_INT 11
43679: PUSH
43680: LD_INT 12
43682: PUSH
43683: LD_INT 13
43685: PUSH
43686: LD_INT 16
43688: PUSH
43689: LD_INT 17
43691: PUSH
43692: LD_INT 18
43694: PUSH
43695: LD_INT 19
43697: PUSH
43698: LD_INT 20
43700: PUSH
43701: LD_INT 21
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: IN
43719: NOT
43720: OR
43721: PUSH
43722: LD_VAR 0 8
43726: PUSH
43727: LD_INT 5
43729: ARRAY
43730: NOT
43731: OR
43732: PUSH
43733: LD_VAR 0 8
43737: PUSH
43738: LD_INT 6
43740: ARRAY
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: LD_INT 7
43750: PUSH
43751: LD_INT 9
43753: PUSH
43754: LD_INT 10
43756: PUSH
43757: LD_INT 11
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: IN
43768: NOT
43769: OR
43770: IFFALSE 43776
// exit ;
43772: POP
43773: POP
43774: GO 43859
// end ;
43776: GO 43447
43778: POP
43779: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43780: LD_VAR 0 9
43784: PPUSH
43785: LD_VAR 0 3
43789: PPUSH
43790: LD_VAR 0 4
43794: PPUSH
43795: LD_INT 20
43797: PPUSH
43798: CALL 35782 0 4
43802: PUSH
43803: LD_INT 4
43805: ARRAY
43806: IFFALSE 43810
// exit ;
43808: GO 43859
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43810: LD_VAR 0 2
43814: PUSH
43815: LD_INT 29
43817: PUSH
43818: LD_INT 30
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: IN
43825: PUSH
43826: LD_VAR 0 3
43830: PPUSH
43831: LD_VAR 0 4
43835: PPUSH
43836: LD_VAR 0 9
43840: PPUSH
43841: CALL_OW 440
43845: NOT
43846: AND
43847: IFFALSE 43851
// exit ;
43849: GO 43859
// result := true ;
43851: LD_ADDR_VAR 0 6
43855: PUSH
43856: LD_INT 1
43858: ST_TO_ADDR
// end ;
43859: LD_VAR 0 6
43863: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43864: LD_INT 0
43866: PPUSH
43867: PPUSH
43868: PPUSH
43869: PPUSH
43870: PPUSH
43871: PPUSH
43872: PPUSH
43873: PPUSH
43874: PPUSH
43875: PPUSH
43876: PPUSH
43877: PPUSH
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
43882: PPUSH
43883: PPUSH
43884: PPUSH
43885: PPUSH
43886: PPUSH
43887: PPUSH
43888: PPUSH
43889: PPUSH
43890: PPUSH
43891: PPUSH
43892: PPUSH
43893: PPUSH
43894: PPUSH
43895: PPUSH
43896: PPUSH
43897: PPUSH
43898: PPUSH
43899: PPUSH
43900: PPUSH
43901: PPUSH
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
43923: PPUSH
// result = [ ] ;
43924: LD_ADDR_VAR 0 7
43928: PUSH
43929: EMPTY
43930: ST_TO_ADDR
// temp_list = [ ] ;
43931: LD_ADDR_VAR 0 9
43935: PUSH
43936: EMPTY
43937: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43938: LD_VAR 0 4
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 3
43954: PUSH
43955: LD_INT 4
43957: PUSH
43958: LD_INT 5
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: IN
43969: NOT
43970: PUSH
43971: LD_VAR 0 1
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: IN
43986: PUSH
43987: LD_VAR 0 5
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 3
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: IN
44006: NOT
44007: AND
44008: OR
44009: IFFALSE 44013
// exit ;
44011: GO 62404
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44013: LD_VAR 0 1
44017: PUSH
44018: LD_INT 6
44020: PUSH
44021: LD_INT 7
44023: PUSH
44024: LD_INT 8
44026: PUSH
44027: LD_INT 13
44029: PUSH
44030: LD_INT 12
44032: PUSH
44033: LD_INT 15
44035: PUSH
44036: LD_INT 11
44038: PUSH
44039: LD_INT 14
44041: PUSH
44042: LD_INT 10
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: IN
44056: IFFALSE 44066
// btype = b_lab ;
44058: LD_ADDR_VAR 0 1
44062: PUSH
44063: LD_INT 6
44065: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44066: LD_VAR 0 6
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: LIST
44084: IN
44085: NOT
44086: PUSH
44087: LD_VAR 0 1
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: LD_INT 6
44106: PUSH
44107: LD_INT 36
44109: PUSH
44110: LD_INT 4
44112: PUSH
44113: LD_INT 5
44115: PUSH
44116: LD_INT 31
44118: PUSH
44119: LD_INT 32
44121: PUSH
44122: LD_INT 33
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: IN
44138: NOT
44139: PUSH
44140: LD_VAR 0 6
44144: PUSH
44145: LD_INT 1
44147: EQUAL
44148: AND
44149: OR
44150: PUSH
44151: LD_VAR 0 1
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: LD_INT 3
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: IN
44166: NOT
44167: PUSH
44168: LD_VAR 0 6
44172: PUSH
44173: LD_INT 2
44175: EQUAL
44176: AND
44177: OR
44178: IFFALSE 44188
// mode = 0 ;
44180: LD_ADDR_VAR 0 6
44184: PUSH
44185: LD_INT 0
44187: ST_TO_ADDR
// case mode of 0 :
44188: LD_VAR 0 6
44192: PUSH
44193: LD_INT 0
44195: DOUBLE
44196: EQUAL
44197: IFTRUE 44201
44199: GO 55654
44201: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44202: LD_ADDR_VAR 0 11
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 3
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44395: LD_ADDR_VAR 0 12
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 3
44552: NEG
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 3
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44591: LD_ADDR_VAR 0 13
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 3
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 3
44762: NEG
44763: PUSH
44764: LD_INT 3
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44790: LD_ADDR_VAR 0 14
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 3
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 3
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44986: LD_ADDR_VAR 0 15
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 3
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45179: LD_ADDR_VAR 0 16
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45372: LD_ADDR_VAR 0 17
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45602: LD_ADDR_VAR 0 18
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45832: LD_ADDR_VAR 0 19
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46062: LD_ADDR_VAR 0 20
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46292: LD_ADDR_VAR 0 21
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46522: LD_ADDR_VAR 0 22
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 2
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46752: LD_ADDR_VAR 0 23
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47032: LD_ADDR_VAR 0 24
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 3
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 3
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47308: LD_ADDR_VAR 0 25
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 3
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47582: LD_ADDR_VAR 0 26
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: LD_INT 2
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47858: LD_ADDR_VAR 0 27
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 3
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 3
48103: NEG
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48138: LD_ADDR_VAR 0 28
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 3
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 3
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48420: LD_ADDR_VAR 0 29
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: LD_INT 3
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 3
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48699: LD_ADDR_VAR 0 30
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 3
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 3
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48977: LD_ADDR_VAR 0 31
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 3
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 3
49220: NEG
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49255: LD_ADDR_VAR 0 32
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 3
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 3
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: LD_INT 3
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 3
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49533: LD_ADDR_VAR 0 33
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: LD_INT 3
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 3
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 3
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 3
49777: NEG
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49812: LD_ADDR_VAR 0 34
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 3
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 3
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: LD_INT 3
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 3
50057: NEG
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50092: LD_ADDR_VAR 0 35
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50204: LD_ADDR_VAR 0 36
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50316: LD_ADDR_VAR 0 37
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50428: LD_ADDR_VAR 0 38
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50540: LD_ADDR_VAR 0 39
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50652: LD_ADDR_VAR 0 40
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50764: LD_ADDR_VAR 0 41
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 3
51007: PUSH
51008: LD_INT 3
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: NEG
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 3
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 3
51061: NEG
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: NEG
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51114: LD_ADDR_VAR 0 42
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: LD_INT 3
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 3
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: LD_INT 3
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 3
51411: NEG
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51464: LD_ADDR_VAR 0 43
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 3
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 3
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 3
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: NEG
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 3
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51812: LD_ADDR_VAR 0 44
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 3
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 3
52086: NEG
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 3
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 3
52109: NEG
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: NEG
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52162: LD_ADDR_VAR 0 45
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 3
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 3
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: NEG
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: NEG
52472: PUSH
52473: LD_INT 3
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52512: LD_ADDR_VAR 0 46
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 3
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 3
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 2
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 3
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 3
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52860: LD_ADDR_VAR 0 47
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53011: LD_ADDR_VAR 0 48
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53158: LD_ADDR_VAR 0 49
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53302: LD_ADDR_VAR 0 50
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53446: LD_ADDR_VAR 0 51
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53593: LD_ADDR_VAR 0 52
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: NEG
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53744: LD_ADDR_VAR 0 53
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53974: LD_ADDR_VAR 0 54
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54204: LD_ADDR_VAR 0 55
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 2
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54434: LD_ADDR_VAR 0 56
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54664: LD_ADDR_VAR 0 57
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54894: LD_ADDR_VAR 0 58
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55124: LD_ADDR_VAR 0 59
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55212: LD_ADDR_VAR 0 60
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55300: LD_ADDR_VAR 0 61
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55388: LD_ADDR_VAR 0 62
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55476: LD_ADDR_VAR 0 63
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55564: LD_ADDR_VAR 0 64
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: ST_TO_ADDR
// end ; 1 :
55652: GO 61549
55654: LD_INT 1
55656: DOUBLE
55657: EQUAL
55658: IFTRUE 55662
55660: GO 58285
55662: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55663: LD_ADDR_VAR 0 11
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 3
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 3
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: LIST
55706: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55707: LD_ADDR_VAR 0 12
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 3
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: LIST
55747: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55748: LD_ADDR_VAR 0 13
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 3
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55788: LD_ADDR_VAR 0 14
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: LIST
55828: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55829: LD_ADDR_VAR 0 15
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 3
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55873: LD_ADDR_VAR 0 16
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: LD_INT 3
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55919: LD_ADDR_VAR 0 17
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 3
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: LIST
55962: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55963: LD_ADDR_VAR 0 18
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: LIST
56003: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56004: LD_ADDR_VAR 0 19
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: LD_INT 3
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56044: LD_ADDR_VAR 0 20
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 3
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: LIST
56084: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56085: LD_ADDR_VAR 0 21
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 3
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56129: LD_ADDR_VAR 0 22
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 3
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 3
56148: NEG
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: NEG
56161: PUSH
56162: LD_INT 3
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56175: LD_ADDR_VAR 0 23
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 3
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: LD_INT 4
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 3
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: LIST
56218: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56219: LD_ADDR_VAR 0 24
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 3
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 4
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: LIST
56259: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56260: LD_ADDR_VAR 0 25
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 4
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: LD_INT 4
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56300: LD_ADDR_VAR 0 26
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 4
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: LIST
56340: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56341: LD_ADDR_VAR 0 27
56345: PUSH
56346: LD_INT 3
56348: NEG
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 4
56370: NEG
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: LIST
56384: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56385: LD_ADDR_VAR 0 28
56389: PUSH
56390: LD_INT 3
56392: NEG
56393: PUSH
56394: LD_INT 3
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: LD_INT 4
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 4
56416: NEG
56417: PUSH
56418: LD_INT 3
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: LIST
56430: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56431: LD_ADDR_VAR 0 29
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 3
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 3
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 4
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 4
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 5
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 5
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 4
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 6
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 6
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: LD_INT 5
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56586: LD_ADDR_VAR 0 30
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 4
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 4
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 4
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 5
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 5
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 5
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 6
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 6
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56729: LD_ADDR_VAR 0 31
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 3
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 4
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: PUSH
56777: LD_INT 4
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 3
56786: PUSH
56787: LD_INT 4
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 5
56796: PUSH
56797: LD_INT 4
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 5
56806: PUSH
56807: LD_INT 5
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 4
56816: PUSH
56817: LD_INT 5
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 6
56826: PUSH
56827: LD_INT 5
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 6
56836: PUSH
56837: LD_INT 6
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 5
56846: PUSH
56847: LD_INT 6
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56868: LD_ADDR_VAR 0 32
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: LD_INT 4
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: LD_INT 4
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 3
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 5
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 5
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: LD_INT 4
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 6
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 6
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 5
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57011: LD_ADDR_VAR 0 33
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 3
57029: NEG
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 4
57063: NEG
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 4
57074: NEG
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 4
57086: NEG
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 5
57097: NEG
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 5
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 5
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 6
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 6
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57166: LD_ADDR_VAR 0 34
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 3
57209: NEG
57210: PUSH
57211: LD_INT 4
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 4
57221: NEG
57222: PUSH
57223: LD_INT 3
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: NEG
57234: PUSH
57235: LD_INT 4
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 4
57245: NEG
57246: PUSH
57247: LD_INT 5
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 5
57257: NEG
57258: PUSH
57259: LD_INT 4
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 5
57269: NEG
57270: PUSH
57271: LD_INT 5
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 5
57281: NEG
57282: PUSH
57283: LD_INT 6
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 6
57293: NEG
57294: PUSH
57295: LD_INT 5
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 6
57305: NEG
57306: PUSH
57307: LD_INT 6
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57329: LD_ADDR_VAR 0 41
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 2
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57373: LD_ADDR_VAR 0 42
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 3
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57414: LD_ADDR_VAR 0 43
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57454: LD_ADDR_VAR 0 44
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57495: LD_ADDR_VAR 0 45
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 3
57524: NEG
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: LIST
57538: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57539: LD_ADDR_VAR 0 46
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 3
57570: NEG
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: LIST
57584: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57585: LD_ADDR_VAR 0 47
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: LD_INT 3
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57618: LD_ADDR_VAR 0 48
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57649: LD_ADDR_VAR 0 49
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 3
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57678: LD_ADDR_VAR 0 50
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: LD_INT 3
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 3
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57707: LD_ADDR_VAR 0 51
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57738: LD_ADDR_VAR 0 52
57742: PUSH
57743: LD_INT 3
57745: NEG
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 3
57757: NEG
57758: PUSH
57759: LD_INT 2
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57771: LD_ADDR_VAR 0 53
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 3
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57815: LD_ADDR_VAR 0 54
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57856: LD_ADDR_VAR 0 55
57860: PUSH
57861: LD_INT 3
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: LIST
57895: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57896: LD_ADDR_VAR 0 56
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57937: LD_ADDR_VAR 0 57
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: LIST
57980: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57981: LD_ADDR_VAR 0 58
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 3
58012: NEG
58013: PUSH
58014: LD_INT 3
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58027: LD_ADDR_VAR 0 59
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: LIST
58070: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58071: LD_ADDR_VAR 0 60
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: LIST
58111: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58112: LD_ADDR_VAR 0 61
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58152: LD_ADDR_VAR 0 62
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58193: LD_ADDR_VAR 0 63
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: LIST
58236: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58237: LD_ADDR_VAR 0 64
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: NEG
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: ST_TO_ADDR
// end ; 2 :
58283: GO 61549
58285: LD_INT 2
58287: DOUBLE
58288: EQUAL
58289: IFTRUE 58293
58291: GO 61548
58293: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58294: LD_ADDR_VAR 0 29
58298: PUSH
58299: LD_INT 4
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 4
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 5
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 4
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 5
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 4
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 4
58424: PUSH
58425: LD_INT 4
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: LD_INT 3
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 4
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 4
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 4
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 3
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 4
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: LD_INT 5
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: LD_INT 5
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: LD_INT 4
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 3
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 5
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: NEG
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: NEG
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 4
58633: NEG
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 4
58644: NEG
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 4
58656: NEG
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 4
58679: NEG
58680: PUSH
58681: LD_INT 4
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 4
58691: NEG
58692: PUSH
58693: LD_INT 5
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: LD_INT 4
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: LD_INT 3
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 4
58727: NEG
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 5
58739: NEG
58740: PUSH
58741: LD_INT 4
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 5
58751: NEG
58752: PUSH
58753: LD_INT 5
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: NEG
58764: PUSH
58765: LD_INT 5
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 5
58775: NEG
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58832: LD_ADDR_VAR 0 30
58836: PUSH
58837: LD_INT 4
58839: PUSH
58840: LD_INT 4
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 4
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 5
58859: PUSH
58860: LD_INT 4
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 5
58869: PUSH
58870: LD_INT 5
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 4
58879: PUSH
58880: LD_INT 5
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: LD_INT 4
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: LD_INT 3
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 5
58909: PUSH
58910: LD_INT 3
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 3
58919: PUSH
58920: LD_INT 5
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 3
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: LD_INT 4
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 4
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: LD_INT 4
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 4
59022: NEG
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 4
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 3
59045: NEG
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 3
59056: NEG
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 4
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 5
59078: NEG
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 5
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 5
59101: NEG
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: NEG
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: LD_INT 4
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: LD_INT 3
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: NEG
59173: PUSH
59174: LD_INT 2
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 4
59184: NEG
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 4
59196: NEG
59197: PUSH
59198: LD_INT 4
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: LD_INT 4
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 4
59220: NEG
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 4
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 5
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 4
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: LD_INT 3
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 4
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 5
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 2
59311: PUSH
59312: LD_INT 3
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: LD_INT 5
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59379: LD_ADDR_VAR 0 31
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 4
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 4
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: LD_INT 5
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: LD_INT 5
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: LD_INT 4
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 3
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 2
59458: PUSH
59459: LD_INT 5
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: NEG
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 3
59490: NEG
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 4
59535: NEG
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 4
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 4
59558: NEG
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 2
59570: NEG
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 4
59581: NEG
59582: PUSH
59583: LD_INT 4
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 4
59593: NEG
59594: PUSH
59595: LD_INT 5
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: LD_INT 4
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 4
59629: NEG
59630: PUSH
59631: LD_INT 3
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 5
59641: NEG
59642: PUSH
59643: LD_INT 4
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 5
59653: NEG
59654: PUSH
59655: LD_INT 5
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 3
59665: NEG
59666: PUSH
59667: LD_INT 5
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 5
59677: NEG
59678: PUSH
59679: LD_INT 3
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: LD_INT 4
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 3
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: LD_INT 4
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: LD_INT 4
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 4
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 4
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 5
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 5
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 4
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 3
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 5
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59929: LD_ADDR_VAR 0 32
59933: PUSH
59934: LD_INT 4
59936: NEG
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 4
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 3
59959: NEG
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 4
59981: NEG
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 5
59992: NEG
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 5
60003: NEG
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 5
60015: NEG
60016: PUSH
60017: LD_INT 2
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 3
60027: NEG
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 3
60038: NEG
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: LD_INT 4
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: LD_INT 3
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 4
60098: NEG
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 4
60110: NEG
60111: PUSH
60112: LD_INT 4
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 4
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 4
60134: NEG
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 4
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 5
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: LD_INT 4
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: LD_INT 3
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: LD_INT 3
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: LD_INT 4
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: LD_INT 5
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: LD_INT 3
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: LD_INT 5
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 3
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 4
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 4
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 3
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 4
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 4
60341: PUSH
60342: LD_INT 4
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 4
60351: PUSH
60352: LD_INT 3
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 5
60361: PUSH
60362: LD_INT 4
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 5
60371: PUSH
60372: LD_INT 5
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 4
60381: PUSH
60382: LD_INT 5
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: PUSH
60392: LD_INT 4
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 3
60401: PUSH
60402: LD_INT 3
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 5
60411: PUSH
60412: LD_INT 3
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: LD_INT 5
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60476: LD_ADDR_VAR 0 33
60480: PUSH
60481: LD_INT 4
60483: NEG
60484: PUSH
60485: LD_INT 4
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 4
60495: NEG
60496: PUSH
60497: LD_INT 5
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: LD_INT 4
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 3
60519: NEG
60520: PUSH
60521: LD_INT 3
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: NEG
60532: PUSH
60533: LD_INT 3
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 5
60543: NEG
60544: PUSH
60545: LD_INT 4
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 5
60555: NEG
60556: PUSH
60557: LD_INT 5
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 3
60567: NEG
60568: PUSH
60569: LD_INT 5
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 5
60579: NEG
60580: PUSH
60581: LD_INT 3
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 4
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 2
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 3
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: LD_INT 4
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: LD_INT 4
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 4
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 4
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 5
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 5
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 4
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 3
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 3
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 5
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 3
60786: PUSH
60787: LD_INT 3
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 4
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 4
60816: PUSH
60817: LD_INT 4
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 3
60826: PUSH
60827: LD_INT 4
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 2
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 4
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: LD_INT 4
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 4
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: LD_INT 4
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 5
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 5
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 4
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 5
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61014: LD_ADDR_VAR 0 34
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 4
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: LD_INT 5
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 4
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 3
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: LD_INT 3
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: LD_INT 5
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: LD_INT 5
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 3
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 4
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 4
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 4
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: LD_INT 4
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 4
61226: PUSH
61227: LD_INT 3
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 5
61236: PUSH
61237: LD_INT 4
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 5
61246: PUSH
61247: LD_INT 5
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 4
61256: PUSH
61257: LD_INT 5
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 3
61266: PUSH
61267: LD_INT 4
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: LD_INT 3
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 5
61286: PUSH
61287: LD_INT 3
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: LD_INT 5
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 4
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 4
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: LD_INT 3
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: LD_INT 4
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 4
61399: NEG
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 4
61410: NEG
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: NEG
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 3
61433: NEG
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 4
61444: NEG
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 5
61455: NEG
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 5
61466: NEG
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 5
61478: NEG
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: ST_TO_ADDR
// end ; end ;
61546: GO 61549
61548: POP
// case btype of b_depot , b_warehouse :
61549: LD_VAR 0 1
61553: PUSH
61554: LD_INT 0
61556: DOUBLE
61557: EQUAL
61558: IFTRUE 61568
61560: LD_INT 1
61562: DOUBLE
61563: EQUAL
61564: IFTRUE 61568
61566: GO 61769
61568: POP
// case nation of nation_american :
61569: LD_VAR 0 5
61573: PUSH
61574: LD_INT 1
61576: DOUBLE
61577: EQUAL
61578: IFTRUE 61582
61580: GO 61638
61582: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61583: LD_ADDR_VAR 0 9
61587: PUSH
61588: LD_VAR 0 11
61592: PUSH
61593: LD_VAR 0 12
61597: PUSH
61598: LD_VAR 0 13
61602: PUSH
61603: LD_VAR 0 14
61607: PUSH
61608: LD_VAR 0 15
61612: PUSH
61613: LD_VAR 0 16
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: PUSH
61626: LD_VAR 0 4
61630: PUSH
61631: LD_INT 1
61633: PLUS
61634: ARRAY
61635: ST_TO_ADDR
61636: GO 61767
61638: LD_INT 2
61640: DOUBLE
61641: EQUAL
61642: IFTRUE 61646
61644: GO 61702
61646: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61647: LD_ADDR_VAR 0 9
61651: PUSH
61652: LD_VAR 0 17
61656: PUSH
61657: LD_VAR 0 18
61661: PUSH
61662: LD_VAR 0 19
61666: PUSH
61667: LD_VAR 0 20
61671: PUSH
61672: LD_VAR 0 21
61676: PUSH
61677: LD_VAR 0 22
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: PUSH
61690: LD_VAR 0 4
61694: PUSH
61695: LD_INT 1
61697: PLUS
61698: ARRAY
61699: ST_TO_ADDR
61700: GO 61767
61702: LD_INT 3
61704: DOUBLE
61705: EQUAL
61706: IFTRUE 61710
61708: GO 61766
61710: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61711: LD_ADDR_VAR 0 9
61715: PUSH
61716: LD_VAR 0 23
61720: PUSH
61721: LD_VAR 0 24
61725: PUSH
61726: LD_VAR 0 25
61730: PUSH
61731: LD_VAR 0 26
61735: PUSH
61736: LD_VAR 0 27
61740: PUSH
61741: LD_VAR 0 28
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: PUSH
61754: LD_VAR 0 4
61758: PUSH
61759: LD_INT 1
61761: PLUS
61762: ARRAY
61763: ST_TO_ADDR
61764: GO 61767
61766: POP
61767: GO 62322
61769: LD_INT 2
61771: DOUBLE
61772: EQUAL
61773: IFTRUE 61783
61775: LD_INT 3
61777: DOUBLE
61778: EQUAL
61779: IFTRUE 61783
61781: GO 61839
61783: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61784: LD_ADDR_VAR 0 9
61788: PUSH
61789: LD_VAR 0 29
61793: PUSH
61794: LD_VAR 0 30
61798: PUSH
61799: LD_VAR 0 31
61803: PUSH
61804: LD_VAR 0 32
61808: PUSH
61809: LD_VAR 0 33
61813: PUSH
61814: LD_VAR 0 34
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: PUSH
61827: LD_VAR 0 4
61831: PUSH
61832: LD_INT 1
61834: PLUS
61835: ARRAY
61836: ST_TO_ADDR
61837: GO 62322
61839: LD_INT 16
61841: DOUBLE
61842: EQUAL
61843: IFTRUE 61901
61845: LD_INT 17
61847: DOUBLE
61848: EQUAL
61849: IFTRUE 61901
61851: LD_INT 18
61853: DOUBLE
61854: EQUAL
61855: IFTRUE 61901
61857: LD_INT 19
61859: DOUBLE
61860: EQUAL
61861: IFTRUE 61901
61863: LD_INT 22
61865: DOUBLE
61866: EQUAL
61867: IFTRUE 61901
61869: LD_INT 20
61871: DOUBLE
61872: EQUAL
61873: IFTRUE 61901
61875: LD_INT 21
61877: DOUBLE
61878: EQUAL
61879: IFTRUE 61901
61881: LD_INT 23
61883: DOUBLE
61884: EQUAL
61885: IFTRUE 61901
61887: LD_INT 24
61889: DOUBLE
61890: EQUAL
61891: IFTRUE 61901
61893: LD_INT 25
61895: DOUBLE
61896: EQUAL
61897: IFTRUE 61901
61899: GO 61957
61901: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61902: LD_ADDR_VAR 0 9
61906: PUSH
61907: LD_VAR 0 35
61911: PUSH
61912: LD_VAR 0 36
61916: PUSH
61917: LD_VAR 0 37
61921: PUSH
61922: LD_VAR 0 38
61926: PUSH
61927: LD_VAR 0 39
61931: PUSH
61932: LD_VAR 0 40
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: PUSH
61945: LD_VAR 0 4
61949: PUSH
61950: LD_INT 1
61952: PLUS
61953: ARRAY
61954: ST_TO_ADDR
61955: GO 62322
61957: LD_INT 6
61959: DOUBLE
61960: EQUAL
61961: IFTRUE 62013
61963: LD_INT 7
61965: DOUBLE
61966: EQUAL
61967: IFTRUE 62013
61969: LD_INT 8
61971: DOUBLE
61972: EQUAL
61973: IFTRUE 62013
61975: LD_INT 13
61977: DOUBLE
61978: EQUAL
61979: IFTRUE 62013
61981: LD_INT 12
61983: DOUBLE
61984: EQUAL
61985: IFTRUE 62013
61987: LD_INT 15
61989: DOUBLE
61990: EQUAL
61991: IFTRUE 62013
61993: LD_INT 11
61995: DOUBLE
61996: EQUAL
61997: IFTRUE 62013
61999: LD_INT 14
62001: DOUBLE
62002: EQUAL
62003: IFTRUE 62013
62005: LD_INT 10
62007: DOUBLE
62008: EQUAL
62009: IFTRUE 62013
62011: GO 62069
62013: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62014: LD_ADDR_VAR 0 9
62018: PUSH
62019: LD_VAR 0 41
62023: PUSH
62024: LD_VAR 0 42
62028: PUSH
62029: LD_VAR 0 43
62033: PUSH
62034: LD_VAR 0 44
62038: PUSH
62039: LD_VAR 0 45
62043: PUSH
62044: LD_VAR 0 46
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: PUSH
62057: LD_VAR 0 4
62061: PUSH
62062: LD_INT 1
62064: PLUS
62065: ARRAY
62066: ST_TO_ADDR
62067: GO 62322
62069: LD_INT 36
62071: DOUBLE
62072: EQUAL
62073: IFTRUE 62077
62075: GO 62133
62077: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62078: LD_ADDR_VAR 0 9
62082: PUSH
62083: LD_VAR 0 47
62087: PUSH
62088: LD_VAR 0 48
62092: PUSH
62093: LD_VAR 0 49
62097: PUSH
62098: LD_VAR 0 50
62102: PUSH
62103: LD_VAR 0 51
62107: PUSH
62108: LD_VAR 0 52
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: PUSH
62121: LD_VAR 0 4
62125: PUSH
62126: LD_INT 1
62128: PLUS
62129: ARRAY
62130: ST_TO_ADDR
62131: GO 62322
62133: LD_INT 4
62135: DOUBLE
62136: EQUAL
62137: IFTRUE 62159
62139: LD_INT 5
62141: DOUBLE
62142: EQUAL
62143: IFTRUE 62159
62145: LD_INT 34
62147: DOUBLE
62148: EQUAL
62149: IFTRUE 62159
62151: LD_INT 37
62153: DOUBLE
62154: EQUAL
62155: IFTRUE 62159
62157: GO 62215
62159: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62160: LD_ADDR_VAR 0 9
62164: PUSH
62165: LD_VAR 0 53
62169: PUSH
62170: LD_VAR 0 54
62174: PUSH
62175: LD_VAR 0 55
62179: PUSH
62180: LD_VAR 0 56
62184: PUSH
62185: LD_VAR 0 57
62189: PUSH
62190: LD_VAR 0 58
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: PUSH
62203: LD_VAR 0 4
62207: PUSH
62208: LD_INT 1
62210: PLUS
62211: ARRAY
62212: ST_TO_ADDR
62213: GO 62322
62215: LD_INT 31
62217: DOUBLE
62218: EQUAL
62219: IFTRUE 62265
62221: LD_INT 32
62223: DOUBLE
62224: EQUAL
62225: IFTRUE 62265
62227: LD_INT 33
62229: DOUBLE
62230: EQUAL
62231: IFTRUE 62265
62233: LD_INT 27
62235: DOUBLE
62236: EQUAL
62237: IFTRUE 62265
62239: LD_INT 26
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62265
62245: LD_INT 28
62247: DOUBLE
62248: EQUAL
62249: IFTRUE 62265
62251: LD_INT 29
62253: DOUBLE
62254: EQUAL
62255: IFTRUE 62265
62257: LD_INT 30
62259: DOUBLE
62260: EQUAL
62261: IFTRUE 62265
62263: GO 62321
62265: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62266: LD_ADDR_VAR 0 9
62270: PUSH
62271: LD_VAR 0 59
62275: PUSH
62276: LD_VAR 0 60
62280: PUSH
62281: LD_VAR 0 61
62285: PUSH
62286: LD_VAR 0 62
62290: PUSH
62291: LD_VAR 0 63
62295: PUSH
62296: LD_VAR 0 64
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: PUSH
62309: LD_VAR 0 4
62313: PUSH
62314: LD_INT 1
62316: PLUS
62317: ARRAY
62318: ST_TO_ADDR
62319: GO 62322
62321: POP
// temp_list2 = [ ] ;
62322: LD_ADDR_VAR 0 10
62326: PUSH
62327: EMPTY
62328: ST_TO_ADDR
// for i in temp_list do
62329: LD_ADDR_VAR 0 8
62333: PUSH
62334: LD_VAR 0 9
62338: PUSH
62339: FOR_IN
62340: IFFALSE 62392
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62342: LD_ADDR_VAR 0 10
62346: PUSH
62347: LD_VAR 0 10
62351: PUSH
62352: LD_VAR 0 8
62356: PUSH
62357: LD_INT 1
62359: ARRAY
62360: PUSH
62361: LD_VAR 0 2
62365: PLUS
62366: PUSH
62367: LD_VAR 0 8
62371: PUSH
62372: LD_INT 2
62374: ARRAY
62375: PUSH
62376: LD_VAR 0 3
62380: PLUS
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: ADD
62389: ST_TO_ADDR
62390: GO 62339
62392: POP
62393: POP
// result = temp_list2 ;
62394: LD_ADDR_VAR 0 7
62398: PUSH
62399: LD_VAR 0 10
62403: ST_TO_ADDR
// end ;
62404: LD_VAR 0 7
62408: RET
// export function EnemyInRange ( unit , dist ) ; begin
62409: LD_INT 0
62411: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62412: LD_ADDR_VAR 0 3
62416: PUSH
62417: LD_VAR 0 1
62421: PPUSH
62422: CALL_OW 255
62426: PPUSH
62427: LD_VAR 0 1
62431: PPUSH
62432: CALL_OW 250
62436: PPUSH
62437: LD_VAR 0 1
62441: PPUSH
62442: CALL_OW 251
62446: PPUSH
62447: LD_VAR 0 2
62451: PPUSH
62452: CALL 35782 0 4
62456: PUSH
62457: LD_INT 4
62459: ARRAY
62460: ST_TO_ADDR
// end ;
62461: LD_VAR 0 3
62465: RET
// export function PlayerSeeMe ( unit ) ; begin
62466: LD_INT 0
62468: PPUSH
// result := See ( your_side , unit ) ;
62469: LD_ADDR_VAR 0 2
62473: PUSH
62474: LD_OWVAR 2
62478: PPUSH
62479: LD_VAR 0 1
62483: PPUSH
62484: CALL_OW 292
62488: ST_TO_ADDR
// end ;
62489: LD_VAR 0 2
62493: RET
// export function ReverseDir ( unit ) ; begin
62494: LD_INT 0
62496: PPUSH
// if not unit then
62497: LD_VAR 0 1
62501: NOT
62502: IFFALSE 62506
// exit ;
62504: GO 62529
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62506: LD_ADDR_VAR 0 2
62510: PUSH
62511: LD_VAR 0 1
62515: PPUSH
62516: CALL_OW 254
62520: PUSH
62521: LD_INT 3
62523: PLUS
62524: PUSH
62525: LD_INT 6
62527: MOD
62528: ST_TO_ADDR
// end ;
62529: LD_VAR 0 2
62533: RET
// export function ReverseArray ( array ) ; var i ; begin
62534: LD_INT 0
62536: PPUSH
62537: PPUSH
// if not array then
62538: LD_VAR 0 1
62542: NOT
62543: IFFALSE 62547
// exit ;
62545: GO 62602
// result := [ ] ;
62547: LD_ADDR_VAR 0 2
62551: PUSH
62552: EMPTY
62553: ST_TO_ADDR
// for i := array downto 1 do
62554: LD_ADDR_VAR 0 3
62558: PUSH
62559: DOUBLE
62560: LD_VAR 0 1
62564: INC
62565: ST_TO_ADDR
62566: LD_INT 1
62568: PUSH
62569: FOR_DOWNTO
62570: IFFALSE 62600
// result := Join ( result , array [ i ] ) ;
62572: LD_ADDR_VAR 0 2
62576: PUSH
62577: LD_VAR 0 2
62581: PPUSH
62582: LD_VAR 0 1
62586: PUSH
62587: LD_VAR 0 3
62591: ARRAY
62592: PPUSH
62593: CALL 67267 0 2
62597: ST_TO_ADDR
62598: GO 62569
62600: POP
62601: POP
// end ;
62602: LD_VAR 0 2
62606: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62607: LD_INT 0
62609: PPUSH
62610: PPUSH
62611: PPUSH
62612: PPUSH
62613: PPUSH
62614: PPUSH
// if not unit or not hexes then
62615: LD_VAR 0 1
62619: NOT
62620: PUSH
62621: LD_VAR 0 2
62625: NOT
62626: OR
62627: IFFALSE 62631
// exit ;
62629: GO 62754
// dist := 9999 ;
62631: LD_ADDR_VAR 0 5
62635: PUSH
62636: LD_INT 9999
62638: ST_TO_ADDR
// for i = 1 to hexes do
62639: LD_ADDR_VAR 0 4
62643: PUSH
62644: DOUBLE
62645: LD_INT 1
62647: DEC
62648: ST_TO_ADDR
62649: LD_VAR 0 2
62653: PUSH
62654: FOR_TO
62655: IFFALSE 62742
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62657: LD_ADDR_VAR 0 6
62661: PUSH
62662: LD_VAR 0 1
62666: PPUSH
62667: LD_VAR 0 2
62671: PUSH
62672: LD_VAR 0 4
62676: ARRAY
62677: PUSH
62678: LD_INT 1
62680: ARRAY
62681: PPUSH
62682: LD_VAR 0 2
62686: PUSH
62687: LD_VAR 0 4
62691: ARRAY
62692: PUSH
62693: LD_INT 2
62695: ARRAY
62696: PPUSH
62697: CALL_OW 297
62701: ST_TO_ADDR
// if tdist < dist then
62702: LD_VAR 0 6
62706: PUSH
62707: LD_VAR 0 5
62711: LESS
62712: IFFALSE 62740
// begin hex := hexes [ i ] ;
62714: LD_ADDR_VAR 0 8
62718: PUSH
62719: LD_VAR 0 2
62723: PUSH
62724: LD_VAR 0 4
62728: ARRAY
62729: ST_TO_ADDR
// dist := tdist ;
62730: LD_ADDR_VAR 0 5
62734: PUSH
62735: LD_VAR 0 6
62739: ST_TO_ADDR
// end ; end ;
62740: GO 62654
62742: POP
62743: POP
// result := hex ;
62744: LD_ADDR_VAR 0 3
62748: PUSH
62749: LD_VAR 0 8
62753: ST_TO_ADDR
// end ;
62754: LD_VAR 0 3
62758: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62759: LD_INT 0
62761: PPUSH
62762: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62763: LD_VAR 0 1
62767: NOT
62768: PUSH
62769: LD_VAR 0 1
62773: PUSH
62774: LD_INT 21
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 23
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PPUSH
62798: CALL_OW 69
62802: IN
62803: NOT
62804: OR
62805: IFFALSE 62809
// exit ;
62807: GO 62856
// for i = 1 to 3 do
62809: LD_ADDR_VAR 0 3
62813: PUSH
62814: DOUBLE
62815: LD_INT 1
62817: DEC
62818: ST_TO_ADDR
62819: LD_INT 3
62821: PUSH
62822: FOR_TO
62823: IFFALSE 62854
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62825: LD_VAR 0 1
62829: PPUSH
62830: CALL_OW 250
62834: PPUSH
62835: LD_VAR 0 1
62839: PPUSH
62840: CALL_OW 251
62844: PPUSH
62845: LD_INT 1
62847: PPUSH
62848: CALL_OW 453
62852: GO 62822
62854: POP
62855: POP
// end ;
62856: LD_VAR 0 2
62860: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62861: LD_INT 0
62863: PPUSH
62864: PPUSH
62865: PPUSH
62866: PPUSH
62867: PPUSH
62868: PPUSH
// if not unit or not enemy_unit then
62869: LD_VAR 0 1
62873: NOT
62874: PUSH
62875: LD_VAR 0 2
62879: NOT
62880: OR
62881: IFFALSE 62885
// exit ;
62883: GO 63352
// if GetLives ( i ) < 250 then
62885: LD_VAR 0 4
62889: PPUSH
62890: CALL_OW 256
62894: PUSH
62895: LD_INT 250
62897: LESS
62898: IFFALSE 62911
// begin ComAutodestruct ( i ) ;
62900: LD_VAR 0 4
62904: PPUSH
62905: CALL 62759 0 1
// exit ;
62909: GO 63352
// end ; x := GetX ( enemy_unit ) ;
62911: LD_ADDR_VAR 0 7
62915: PUSH
62916: LD_VAR 0 2
62920: PPUSH
62921: CALL_OW 250
62925: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62926: LD_ADDR_VAR 0 8
62930: PUSH
62931: LD_VAR 0 2
62935: PPUSH
62936: CALL_OW 251
62940: ST_TO_ADDR
// if not x or not y then
62941: LD_VAR 0 7
62945: NOT
62946: PUSH
62947: LD_VAR 0 8
62951: NOT
62952: OR
62953: IFFALSE 62957
// exit ;
62955: GO 63352
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62957: LD_ADDR_VAR 0 6
62961: PUSH
62962: LD_VAR 0 7
62966: PPUSH
62967: LD_INT 0
62969: PPUSH
62970: LD_INT 4
62972: PPUSH
62973: CALL_OW 272
62977: PUSH
62978: LD_VAR 0 8
62982: PPUSH
62983: LD_INT 0
62985: PPUSH
62986: LD_INT 4
62988: PPUSH
62989: CALL_OW 273
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_VAR 0 7
63002: PPUSH
63003: LD_INT 1
63005: PPUSH
63006: LD_INT 4
63008: PPUSH
63009: CALL_OW 272
63013: PUSH
63014: LD_VAR 0 8
63018: PPUSH
63019: LD_INT 1
63021: PPUSH
63022: LD_INT 4
63024: PPUSH
63025: CALL_OW 273
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_VAR 0 7
63038: PPUSH
63039: LD_INT 2
63041: PPUSH
63042: LD_INT 4
63044: PPUSH
63045: CALL_OW 272
63049: PUSH
63050: LD_VAR 0 8
63054: PPUSH
63055: LD_INT 2
63057: PPUSH
63058: LD_INT 4
63060: PPUSH
63061: CALL_OW 273
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_VAR 0 7
63074: PPUSH
63075: LD_INT 3
63077: PPUSH
63078: LD_INT 4
63080: PPUSH
63081: CALL_OW 272
63085: PUSH
63086: LD_VAR 0 8
63090: PPUSH
63091: LD_INT 3
63093: PPUSH
63094: LD_INT 4
63096: PPUSH
63097: CALL_OW 273
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_VAR 0 7
63110: PPUSH
63111: LD_INT 4
63113: PPUSH
63114: LD_INT 4
63116: PPUSH
63117: CALL_OW 272
63121: PUSH
63122: LD_VAR 0 8
63126: PPUSH
63127: LD_INT 4
63129: PPUSH
63130: LD_INT 4
63132: PPUSH
63133: CALL_OW 273
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_VAR 0 7
63146: PPUSH
63147: LD_INT 5
63149: PPUSH
63150: LD_INT 4
63152: PPUSH
63153: CALL_OW 272
63157: PUSH
63158: LD_VAR 0 8
63162: PPUSH
63163: LD_INT 5
63165: PPUSH
63166: LD_INT 4
63168: PPUSH
63169: CALL_OW 273
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: ST_TO_ADDR
// for i = tmp downto 1 do
63186: LD_ADDR_VAR 0 4
63190: PUSH
63191: DOUBLE
63192: LD_VAR 0 6
63196: INC
63197: ST_TO_ADDR
63198: LD_INT 1
63200: PUSH
63201: FOR_DOWNTO
63202: IFFALSE 63303
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63204: LD_VAR 0 6
63208: PUSH
63209: LD_VAR 0 4
63213: ARRAY
63214: PUSH
63215: LD_INT 1
63217: ARRAY
63218: PPUSH
63219: LD_VAR 0 6
63223: PUSH
63224: LD_VAR 0 4
63228: ARRAY
63229: PUSH
63230: LD_INT 2
63232: ARRAY
63233: PPUSH
63234: CALL_OW 488
63238: NOT
63239: PUSH
63240: LD_VAR 0 6
63244: PUSH
63245: LD_VAR 0 4
63249: ARRAY
63250: PUSH
63251: LD_INT 1
63253: ARRAY
63254: PPUSH
63255: LD_VAR 0 6
63259: PUSH
63260: LD_VAR 0 4
63264: ARRAY
63265: PUSH
63266: LD_INT 2
63268: ARRAY
63269: PPUSH
63270: CALL_OW 428
63274: PUSH
63275: LD_INT 0
63277: NONEQUAL
63278: OR
63279: IFFALSE 63301
// tmp := Delete ( tmp , i ) ;
63281: LD_ADDR_VAR 0 6
63285: PUSH
63286: LD_VAR 0 6
63290: PPUSH
63291: LD_VAR 0 4
63295: PPUSH
63296: CALL_OW 3
63300: ST_TO_ADDR
63301: GO 63201
63303: POP
63304: POP
// j := GetClosestHex ( unit , tmp ) ;
63305: LD_ADDR_VAR 0 5
63309: PUSH
63310: LD_VAR 0 1
63314: PPUSH
63315: LD_VAR 0 6
63319: PPUSH
63320: CALL 62607 0 2
63324: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63325: LD_VAR 0 1
63329: PPUSH
63330: LD_VAR 0 5
63334: PUSH
63335: LD_INT 1
63337: ARRAY
63338: PPUSH
63339: LD_VAR 0 5
63343: PUSH
63344: LD_INT 2
63346: ARRAY
63347: PPUSH
63348: CALL_OW 111
// end ;
63352: LD_VAR 0 3
63356: RET
// export function PrepareApemanSoldier ( ) ; begin
63357: LD_INT 0
63359: PPUSH
// uc_nation := 0 ;
63360: LD_ADDR_OWVAR 21
63364: PUSH
63365: LD_INT 0
63367: ST_TO_ADDR
// hc_sex := sex_male ;
63368: LD_ADDR_OWVAR 27
63372: PUSH
63373: LD_INT 1
63375: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63376: LD_ADDR_OWVAR 28
63380: PUSH
63381: LD_INT 15
63383: ST_TO_ADDR
// hc_gallery :=  ;
63384: LD_ADDR_OWVAR 33
63388: PUSH
63389: LD_STRING 
63391: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63392: LD_ADDR_OWVAR 31
63396: PUSH
63397: LD_INT 0
63399: PPUSH
63400: LD_INT 3
63402: PPUSH
63403: CALL_OW 12
63407: PUSH
63408: LD_INT 0
63410: PPUSH
63411: LD_INT 3
63413: PPUSH
63414: CALL_OW 12
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: LD_INT 0
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: ST_TO_ADDR
// end ;
63431: LD_VAR 0 1
63435: RET
// export function PrepareApemanEngineer ( ) ; begin
63436: LD_INT 0
63438: PPUSH
// uc_nation := 0 ;
63439: LD_ADDR_OWVAR 21
63443: PUSH
63444: LD_INT 0
63446: ST_TO_ADDR
// hc_sex := sex_male ;
63447: LD_ADDR_OWVAR 27
63451: PUSH
63452: LD_INT 1
63454: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63455: LD_ADDR_OWVAR 28
63459: PUSH
63460: LD_INT 16
63462: ST_TO_ADDR
// hc_gallery :=  ;
63463: LD_ADDR_OWVAR 33
63467: PUSH
63468: LD_STRING 
63470: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63471: LD_ADDR_OWVAR 31
63475: PUSH
63476: LD_INT 0
63478: PPUSH
63479: LD_INT 3
63481: PPUSH
63482: CALL_OW 12
63486: PUSH
63487: LD_INT 0
63489: PPUSH
63490: LD_INT 3
63492: PPUSH
63493: CALL_OW 12
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: ST_TO_ADDR
// end ;
63510: LD_VAR 0 1
63514: RET
// export function PrepareApeman ( agressivity ) ; begin
63515: LD_INT 0
63517: PPUSH
// uc_side := 0 ;
63518: LD_ADDR_OWVAR 20
63522: PUSH
63523: LD_INT 0
63525: ST_TO_ADDR
// uc_nation := 0 ;
63526: LD_ADDR_OWVAR 21
63530: PUSH
63531: LD_INT 0
63533: ST_TO_ADDR
// hc_sex := sex_male ;
63534: LD_ADDR_OWVAR 27
63538: PUSH
63539: LD_INT 1
63541: ST_TO_ADDR
// hc_class := class_apeman ;
63542: LD_ADDR_OWVAR 28
63546: PUSH
63547: LD_INT 12
63549: ST_TO_ADDR
// hc_gallery :=  ;
63550: LD_ADDR_OWVAR 33
63554: PUSH
63555: LD_STRING 
63557: ST_TO_ADDR
// if agressivity = 0 then
63558: LD_VAR 0 1
63562: PUSH
63563: LD_INT 0
63565: EQUAL
63566: IFFALSE 63578
// hc_agressivity := 0 else
63568: LD_ADDR_OWVAR 35
63572: PUSH
63573: LD_INT 0
63575: ST_TO_ADDR
63576: GO 63599
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63578: LD_ADDR_OWVAR 35
63582: PUSH
63583: LD_VAR 0 1
63587: NEG
63588: PPUSH
63589: LD_VAR 0 1
63593: PPUSH
63594: CALL_OW 12
63598: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63599: LD_ADDR_OWVAR 31
63603: PUSH
63604: LD_INT 0
63606: PPUSH
63607: LD_INT 3
63609: PPUSH
63610: CALL_OW 12
63614: PUSH
63615: LD_INT 0
63617: PPUSH
63618: LD_INT 3
63620: PPUSH
63621: CALL_OW 12
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: ST_TO_ADDR
// end ;
63638: LD_VAR 0 2
63642: RET
// export function PrepareTiger ( agressivity ) ; begin
63643: LD_INT 0
63645: PPUSH
// uc_side := 0 ;
63646: LD_ADDR_OWVAR 20
63650: PUSH
63651: LD_INT 0
63653: ST_TO_ADDR
// uc_nation := 0 ;
63654: LD_ADDR_OWVAR 21
63658: PUSH
63659: LD_INT 0
63661: ST_TO_ADDR
// hc_class := class_tiger ;
63662: LD_ADDR_OWVAR 28
63666: PUSH
63667: LD_INT 14
63669: ST_TO_ADDR
// hc_gallery :=  ;
63670: LD_ADDR_OWVAR 33
63674: PUSH
63675: LD_STRING 
63677: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63678: LD_ADDR_OWVAR 35
63682: PUSH
63683: LD_VAR 0 1
63687: NEG
63688: PPUSH
63689: LD_VAR 0 1
63693: PPUSH
63694: CALL_OW 12
63698: ST_TO_ADDR
// end ;
63699: LD_VAR 0 2
63703: RET
// export function PrepareEnchidna ( ) ; begin
63704: LD_INT 0
63706: PPUSH
// uc_side := 0 ;
63707: LD_ADDR_OWVAR 20
63711: PUSH
63712: LD_INT 0
63714: ST_TO_ADDR
// uc_nation := 0 ;
63715: LD_ADDR_OWVAR 21
63719: PUSH
63720: LD_INT 0
63722: ST_TO_ADDR
// hc_class := class_baggie ;
63723: LD_ADDR_OWVAR 28
63727: PUSH
63728: LD_INT 13
63730: ST_TO_ADDR
// hc_gallery :=  ;
63731: LD_ADDR_OWVAR 33
63735: PUSH
63736: LD_STRING 
63738: ST_TO_ADDR
// end ;
63739: LD_VAR 0 1
63743: RET
// export function PrepareFrog ( ) ; begin
63744: LD_INT 0
63746: PPUSH
// uc_side := 0 ;
63747: LD_ADDR_OWVAR 20
63751: PUSH
63752: LD_INT 0
63754: ST_TO_ADDR
// uc_nation := 0 ;
63755: LD_ADDR_OWVAR 21
63759: PUSH
63760: LD_INT 0
63762: ST_TO_ADDR
// hc_class := class_frog ;
63763: LD_ADDR_OWVAR 28
63767: PUSH
63768: LD_INT 19
63770: ST_TO_ADDR
// hc_gallery :=  ;
63771: LD_ADDR_OWVAR 33
63775: PUSH
63776: LD_STRING 
63778: ST_TO_ADDR
// end ;
63779: LD_VAR 0 1
63783: RET
// export function PrepareFish ( ) ; begin
63784: LD_INT 0
63786: PPUSH
// uc_side := 0 ;
63787: LD_ADDR_OWVAR 20
63791: PUSH
63792: LD_INT 0
63794: ST_TO_ADDR
// uc_nation := 0 ;
63795: LD_ADDR_OWVAR 21
63799: PUSH
63800: LD_INT 0
63802: ST_TO_ADDR
// hc_class := class_fish ;
63803: LD_ADDR_OWVAR 28
63807: PUSH
63808: LD_INT 20
63810: ST_TO_ADDR
// hc_gallery :=  ;
63811: LD_ADDR_OWVAR 33
63815: PUSH
63816: LD_STRING 
63818: ST_TO_ADDR
// end ;
63819: LD_VAR 0 1
63823: RET
// export function PrepareBird ( ) ; begin
63824: LD_INT 0
63826: PPUSH
// uc_side := 0 ;
63827: LD_ADDR_OWVAR 20
63831: PUSH
63832: LD_INT 0
63834: ST_TO_ADDR
// uc_nation := 0 ;
63835: LD_ADDR_OWVAR 21
63839: PUSH
63840: LD_INT 0
63842: ST_TO_ADDR
// hc_class := class_phororhacos ;
63843: LD_ADDR_OWVAR 28
63847: PUSH
63848: LD_INT 18
63850: ST_TO_ADDR
// hc_gallery :=  ;
63851: LD_ADDR_OWVAR 33
63855: PUSH
63856: LD_STRING 
63858: ST_TO_ADDR
// end ;
63859: LD_VAR 0 1
63863: RET
// export function PrepareHorse ( ) ; begin
63864: LD_INT 0
63866: PPUSH
// uc_side := 0 ;
63867: LD_ADDR_OWVAR 20
63871: PUSH
63872: LD_INT 0
63874: ST_TO_ADDR
// uc_nation := 0 ;
63875: LD_ADDR_OWVAR 21
63879: PUSH
63880: LD_INT 0
63882: ST_TO_ADDR
// hc_class := class_horse ;
63883: LD_ADDR_OWVAR 28
63887: PUSH
63888: LD_INT 21
63890: ST_TO_ADDR
// hc_gallery :=  ;
63891: LD_ADDR_OWVAR 33
63895: PUSH
63896: LD_STRING 
63898: ST_TO_ADDR
// end ;
63899: LD_VAR 0 1
63903: RET
// export function PrepareMastodont ( ) ; begin
63904: LD_INT 0
63906: PPUSH
// uc_side := 0 ;
63907: LD_ADDR_OWVAR 20
63911: PUSH
63912: LD_INT 0
63914: ST_TO_ADDR
// uc_nation := 0 ;
63915: LD_ADDR_OWVAR 21
63919: PUSH
63920: LD_INT 0
63922: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63923: LD_ADDR_OWVAR 37
63927: PUSH
63928: LD_INT 31
63930: ST_TO_ADDR
// vc_control := control_rider ;
63931: LD_ADDR_OWVAR 38
63935: PUSH
63936: LD_INT 4
63938: ST_TO_ADDR
// end ;
63939: LD_VAR 0 1
63943: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63944: LD_INT 0
63946: PPUSH
63947: PPUSH
63948: PPUSH
// uc_side = 0 ;
63949: LD_ADDR_OWVAR 20
63953: PUSH
63954: LD_INT 0
63956: ST_TO_ADDR
// uc_nation = 0 ;
63957: LD_ADDR_OWVAR 21
63961: PUSH
63962: LD_INT 0
63964: ST_TO_ADDR
// InitHc_All ( ) ;
63965: CALL_OW 584
// InitVc ;
63969: CALL_OW 20
// if mastodonts then
63973: LD_VAR 0 6
63977: IFFALSE 64044
// for i = 1 to mastodonts do
63979: LD_ADDR_VAR 0 11
63983: PUSH
63984: DOUBLE
63985: LD_INT 1
63987: DEC
63988: ST_TO_ADDR
63989: LD_VAR 0 6
63993: PUSH
63994: FOR_TO
63995: IFFALSE 64042
// begin vc_chassis := 31 ;
63997: LD_ADDR_OWVAR 37
64001: PUSH
64002: LD_INT 31
64004: ST_TO_ADDR
// vc_control := control_rider ;
64005: LD_ADDR_OWVAR 38
64009: PUSH
64010: LD_INT 4
64012: ST_TO_ADDR
// animal := CreateVehicle ;
64013: LD_ADDR_VAR 0 12
64017: PUSH
64018: CALL_OW 45
64022: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64023: LD_VAR 0 12
64027: PPUSH
64028: LD_VAR 0 8
64032: PPUSH
64033: LD_INT 0
64035: PPUSH
64036: CALL 66172 0 3
// end ;
64040: GO 63994
64042: POP
64043: POP
// if horses then
64044: LD_VAR 0 5
64048: IFFALSE 64115
// for i = 1 to horses do
64050: LD_ADDR_VAR 0 11
64054: PUSH
64055: DOUBLE
64056: LD_INT 1
64058: DEC
64059: ST_TO_ADDR
64060: LD_VAR 0 5
64064: PUSH
64065: FOR_TO
64066: IFFALSE 64113
// begin hc_class := 21 ;
64068: LD_ADDR_OWVAR 28
64072: PUSH
64073: LD_INT 21
64075: ST_TO_ADDR
// hc_gallery :=  ;
64076: LD_ADDR_OWVAR 33
64080: PUSH
64081: LD_STRING 
64083: ST_TO_ADDR
// animal := CreateHuman ;
64084: LD_ADDR_VAR 0 12
64088: PUSH
64089: CALL_OW 44
64093: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64094: LD_VAR 0 12
64098: PPUSH
64099: LD_VAR 0 8
64103: PPUSH
64104: LD_INT 0
64106: PPUSH
64107: CALL 66172 0 3
// end ;
64111: GO 64065
64113: POP
64114: POP
// if birds then
64115: LD_VAR 0 1
64119: IFFALSE 64186
// for i = 1 to birds do
64121: LD_ADDR_VAR 0 11
64125: PUSH
64126: DOUBLE
64127: LD_INT 1
64129: DEC
64130: ST_TO_ADDR
64131: LD_VAR 0 1
64135: PUSH
64136: FOR_TO
64137: IFFALSE 64184
// begin hc_class := 18 ;
64139: LD_ADDR_OWVAR 28
64143: PUSH
64144: LD_INT 18
64146: ST_TO_ADDR
// hc_gallery =  ;
64147: LD_ADDR_OWVAR 33
64151: PUSH
64152: LD_STRING 
64154: ST_TO_ADDR
// animal := CreateHuman ;
64155: LD_ADDR_VAR 0 12
64159: PUSH
64160: CALL_OW 44
64164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64165: LD_VAR 0 12
64169: PPUSH
64170: LD_VAR 0 8
64174: PPUSH
64175: LD_INT 0
64177: PPUSH
64178: CALL 66172 0 3
// end ;
64182: GO 64136
64184: POP
64185: POP
// if tigers then
64186: LD_VAR 0 2
64190: IFFALSE 64274
// for i = 1 to tigers do
64192: LD_ADDR_VAR 0 11
64196: PUSH
64197: DOUBLE
64198: LD_INT 1
64200: DEC
64201: ST_TO_ADDR
64202: LD_VAR 0 2
64206: PUSH
64207: FOR_TO
64208: IFFALSE 64272
// begin hc_class = class_tiger ;
64210: LD_ADDR_OWVAR 28
64214: PUSH
64215: LD_INT 14
64217: ST_TO_ADDR
// hc_gallery =  ;
64218: LD_ADDR_OWVAR 33
64222: PUSH
64223: LD_STRING 
64225: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64226: LD_ADDR_OWVAR 35
64230: PUSH
64231: LD_INT 7
64233: NEG
64234: PPUSH
64235: LD_INT 7
64237: PPUSH
64238: CALL_OW 12
64242: ST_TO_ADDR
// animal := CreateHuman ;
64243: LD_ADDR_VAR 0 12
64247: PUSH
64248: CALL_OW 44
64252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64253: LD_VAR 0 12
64257: PPUSH
64258: LD_VAR 0 8
64262: PPUSH
64263: LD_INT 0
64265: PPUSH
64266: CALL 66172 0 3
// end ;
64270: GO 64207
64272: POP
64273: POP
// if apemans then
64274: LD_VAR 0 3
64278: IFFALSE 64401
// for i = 1 to apemans do
64280: LD_ADDR_VAR 0 11
64284: PUSH
64285: DOUBLE
64286: LD_INT 1
64288: DEC
64289: ST_TO_ADDR
64290: LD_VAR 0 3
64294: PUSH
64295: FOR_TO
64296: IFFALSE 64399
// begin hc_class = class_apeman ;
64298: LD_ADDR_OWVAR 28
64302: PUSH
64303: LD_INT 12
64305: ST_TO_ADDR
// hc_gallery =  ;
64306: LD_ADDR_OWVAR 33
64310: PUSH
64311: LD_STRING 
64313: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64314: LD_ADDR_OWVAR 35
64318: PUSH
64319: LD_INT 2
64321: NEG
64322: PPUSH
64323: LD_INT 2
64325: PPUSH
64326: CALL_OW 12
64330: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64331: LD_ADDR_OWVAR 31
64335: PUSH
64336: LD_INT 1
64338: PPUSH
64339: LD_INT 3
64341: PPUSH
64342: CALL_OW 12
64346: PUSH
64347: LD_INT 1
64349: PPUSH
64350: LD_INT 3
64352: PPUSH
64353: CALL_OW 12
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: ST_TO_ADDR
// animal := CreateHuman ;
64370: LD_ADDR_VAR 0 12
64374: PUSH
64375: CALL_OW 44
64379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64380: LD_VAR 0 12
64384: PPUSH
64385: LD_VAR 0 8
64389: PPUSH
64390: LD_INT 0
64392: PPUSH
64393: CALL 66172 0 3
// end ;
64397: GO 64295
64399: POP
64400: POP
// if enchidnas then
64401: LD_VAR 0 4
64405: IFFALSE 64472
// for i = 1 to enchidnas do
64407: LD_ADDR_VAR 0 11
64411: PUSH
64412: DOUBLE
64413: LD_INT 1
64415: DEC
64416: ST_TO_ADDR
64417: LD_VAR 0 4
64421: PUSH
64422: FOR_TO
64423: IFFALSE 64470
// begin hc_class = 13 ;
64425: LD_ADDR_OWVAR 28
64429: PUSH
64430: LD_INT 13
64432: ST_TO_ADDR
// hc_gallery =  ;
64433: LD_ADDR_OWVAR 33
64437: PUSH
64438: LD_STRING 
64440: ST_TO_ADDR
// animal := CreateHuman ;
64441: LD_ADDR_VAR 0 12
64445: PUSH
64446: CALL_OW 44
64450: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64451: LD_VAR 0 12
64455: PPUSH
64456: LD_VAR 0 8
64460: PPUSH
64461: LD_INT 0
64463: PPUSH
64464: CALL 66172 0 3
// end ;
64468: GO 64422
64470: POP
64471: POP
// if fishes then
64472: LD_VAR 0 7
64476: IFFALSE 64543
// for i = 1 to fishes do
64478: LD_ADDR_VAR 0 11
64482: PUSH
64483: DOUBLE
64484: LD_INT 1
64486: DEC
64487: ST_TO_ADDR
64488: LD_VAR 0 7
64492: PUSH
64493: FOR_TO
64494: IFFALSE 64541
// begin hc_class = 20 ;
64496: LD_ADDR_OWVAR 28
64500: PUSH
64501: LD_INT 20
64503: ST_TO_ADDR
// hc_gallery =  ;
64504: LD_ADDR_OWVAR 33
64508: PUSH
64509: LD_STRING 
64511: ST_TO_ADDR
// animal := CreateHuman ;
64512: LD_ADDR_VAR 0 12
64516: PUSH
64517: CALL_OW 44
64521: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64522: LD_VAR 0 12
64526: PPUSH
64527: LD_VAR 0 9
64531: PPUSH
64532: LD_INT 0
64534: PPUSH
64535: CALL 66172 0 3
// end ;
64539: GO 64493
64541: POP
64542: POP
// end ;
64543: LD_VAR 0 10
64547: RET
// export function WantHeal ( sci , unit ) ; begin
64548: LD_INT 0
64550: PPUSH
// if GetTaskList ( sci ) > 0 then
64551: LD_VAR 0 1
64555: PPUSH
64556: CALL_OW 437
64560: PUSH
64561: LD_INT 0
64563: GREATER
64564: IFFALSE 64634
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64566: LD_VAR 0 1
64570: PPUSH
64571: CALL_OW 437
64575: PUSH
64576: LD_INT 1
64578: ARRAY
64579: PUSH
64580: LD_INT 1
64582: ARRAY
64583: PUSH
64584: LD_STRING l
64586: EQUAL
64587: PUSH
64588: LD_VAR 0 1
64592: PPUSH
64593: CALL_OW 437
64597: PUSH
64598: LD_INT 1
64600: ARRAY
64601: PUSH
64602: LD_INT 4
64604: ARRAY
64605: PUSH
64606: LD_VAR 0 2
64610: EQUAL
64611: AND
64612: IFFALSE 64624
// result := true else
64614: LD_ADDR_VAR 0 3
64618: PUSH
64619: LD_INT 1
64621: ST_TO_ADDR
64622: GO 64632
// result := false ;
64624: LD_ADDR_VAR 0 3
64628: PUSH
64629: LD_INT 0
64631: ST_TO_ADDR
// end else
64632: GO 64642
// result := false ;
64634: LD_ADDR_VAR 0 3
64638: PUSH
64639: LD_INT 0
64641: ST_TO_ADDR
// end ;
64642: LD_VAR 0 3
64646: RET
// export function HealTarget ( sci ) ; begin
64647: LD_INT 0
64649: PPUSH
// if not sci then
64650: LD_VAR 0 1
64654: NOT
64655: IFFALSE 64659
// exit ;
64657: GO 64724
// result := 0 ;
64659: LD_ADDR_VAR 0 2
64663: PUSH
64664: LD_INT 0
64666: ST_TO_ADDR
// if GetTaskList ( sci ) then
64667: LD_VAR 0 1
64671: PPUSH
64672: CALL_OW 437
64676: IFFALSE 64724
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64678: LD_VAR 0 1
64682: PPUSH
64683: CALL_OW 437
64687: PUSH
64688: LD_INT 1
64690: ARRAY
64691: PUSH
64692: LD_INT 1
64694: ARRAY
64695: PUSH
64696: LD_STRING l
64698: EQUAL
64699: IFFALSE 64724
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64701: LD_ADDR_VAR 0 2
64705: PUSH
64706: LD_VAR 0 1
64710: PPUSH
64711: CALL_OW 437
64715: PUSH
64716: LD_INT 1
64718: ARRAY
64719: PUSH
64720: LD_INT 4
64722: ARRAY
64723: ST_TO_ADDR
// end ;
64724: LD_VAR 0 2
64728: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64729: LD_INT 0
64731: PPUSH
64732: PPUSH
64733: PPUSH
64734: PPUSH
// if not base_units then
64735: LD_VAR 0 1
64739: NOT
64740: IFFALSE 64744
// exit ;
64742: GO 64831
// result := false ;
64744: LD_ADDR_VAR 0 2
64748: PUSH
64749: LD_INT 0
64751: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64752: LD_ADDR_VAR 0 5
64756: PUSH
64757: LD_VAR 0 1
64761: PPUSH
64762: LD_INT 21
64764: PUSH
64765: LD_INT 3
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PPUSH
64772: CALL_OW 72
64776: ST_TO_ADDR
// if not tmp then
64777: LD_VAR 0 5
64781: NOT
64782: IFFALSE 64786
// exit ;
64784: GO 64831
// for i in tmp do
64786: LD_ADDR_VAR 0 3
64790: PUSH
64791: LD_VAR 0 5
64795: PUSH
64796: FOR_IN
64797: IFFALSE 64829
// begin result := EnemyInRange ( i , 22 ) ;
64799: LD_ADDR_VAR 0 2
64803: PUSH
64804: LD_VAR 0 3
64808: PPUSH
64809: LD_INT 22
64811: PPUSH
64812: CALL 62409 0 2
64816: ST_TO_ADDR
// if result then
64817: LD_VAR 0 2
64821: IFFALSE 64827
// exit ;
64823: POP
64824: POP
64825: GO 64831
// end ;
64827: GO 64796
64829: POP
64830: POP
// end ;
64831: LD_VAR 0 2
64835: RET
// export function FilterByTag ( units , tag ) ; begin
64836: LD_INT 0
64838: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64839: LD_ADDR_VAR 0 3
64843: PUSH
64844: LD_VAR 0 1
64848: PPUSH
64849: LD_INT 120
64851: PUSH
64852: LD_VAR 0 2
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PPUSH
64861: CALL_OW 72
64865: ST_TO_ADDR
// end ;
64866: LD_VAR 0 3
64870: RET
// export function IsDriver ( un ) ; begin
64871: LD_INT 0
64873: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64874: LD_ADDR_VAR 0 2
64878: PUSH
64879: LD_VAR 0 1
64883: PUSH
64884: LD_INT 55
64886: PUSH
64887: EMPTY
64888: LIST
64889: PPUSH
64890: CALL_OW 69
64894: IN
64895: ST_TO_ADDR
// end ;
64896: LD_VAR 0 2
64900: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64901: LD_INT 0
64903: PPUSH
64904: PPUSH
// list := [ ] ;
64905: LD_ADDR_VAR 0 5
64909: PUSH
64910: EMPTY
64911: ST_TO_ADDR
// case d of 0 :
64912: LD_VAR 0 3
64916: PUSH
64917: LD_INT 0
64919: DOUBLE
64920: EQUAL
64921: IFTRUE 64925
64923: GO 65058
64925: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64926: LD_ADDR_VAR 0 5
64930: PUSH
64931: LD_VAR 0 1
64935: PUSH
64936: LD_INT 4
64938: MINUS
64939: PUSH
64940: LD_VAR 0 2
64944: PUSH
64945: LD_INT 4
64947: MINUS
64948: PUSH
64949: LD_INT 2
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: PUSH
64957: LD_VAR 0 1
64961: PUSH
64962: LD_INT 3
64964: MINUS
64965: PUSH
64966: LD_VAR 0 2
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: LIST
64978: PUSH
64979: LD_VAR 0 1
64983: PUSH
64984: LD_INT 4
64986: PLUS
64987: PUSH
64988: LD_VAR 0 2
64992: PUSH
64993: LD_INT 4
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: PUSH
65001: LD_VAR 0 1
65005: PUSH
65006: LD_INT 3
65008: PLUS
65009: PUSH
65010: LD_VAR 0 2
65014: PUSH
65015: LD_INT 3
65017: PLUS
65018: PUSH
65019: LD_INT 5
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: PUSH
65027: LD_VAR 0 1
65031: PUSH
65032: LD_VAR 0 2
65036: PUSH
65037: LD_INT 4
65039: PLUS
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: LIST
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: ST_TO_ADDR
// end ; 1 :
65056: GO 65756
65058: LD_INT 1
65060: DOUBLE
65061: EQUAL
65062: IFTRUE 65066
65064: GO 65199
65066: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65067: LD_ADDR_VAR 0 5
65071: PUSH
65072: LD_VAR 0 1
65076: PUSH
65077: LD_VAR 0 2
65081: PUSH
65082: LD_INT 4
65084: MINUS
65085: PUSH
65086: LD_INT 3
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: LIST
65093: PUSH
65094: LD_VAR 0 1
65098: PUSH
65099: LD_INT 3
65101: MINUS
65102: PUSH
65103: LD_VAR 0 2
65107: PUSH
65108: LD_INT 3
65110: MINUS
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: PUSH
65120: LD_VAR 0 1
65124: PUSH
65125: LD_INT 4
65127: MINUS
65128: PUSH
65129: LD_VAR 0 2
65133: PUSH
65134: LD_INT 1
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: LIST
65141: PUSH
65142: LD_VAR 0 1
65146: PUSH
65147: LD_VAR 0 2
65151: PUSH
65152: LD_INT 3
65154: PLUS
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: LIST
65163: PUSH
65164: LD_VAR 0 1
65168: PUSH
65169: LD_INT 4
65171: PLUS
65172: PUSH
65173: LD_VAR 0 2
65177: PUSH
65178: LD_INT 4
65180: PLUS
65181: PUSH
65182: LD_INT 5
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: LIST
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: ST_TO_ADDR
// end ; 2 :
65197: GO 65756
65199: LD_INT 2
65201: DOUBLE
65202: EQUAL
65203: IFTRUE 65207
65205: GO 65336
65207: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65208: LD_ADDR_VAR 0 5
65212: PUSH
65213: LD_VAR 0 1
65217: PUSH
65218: LD_VAR 0 2
65222: PUSH
65223: LD_INT 3
65225: MINUS
65226: PUSH
65227: LD_INT 3
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: LIST
65234: PUSH
65235: LD_VAR 0 1
65239: PUSH
65240: LD_INT 4
65242: PLUS
65243: PUSH
65244: LD_VAR 0 2
65248: PUSH
65249: LD_INT 4
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: LIST
65256: PUSH
65257: LD_VAR 0 1
65261: PUSH
65262: LD_VAR 0 2
65266: PUSH
65267: LD_INT 4
65269: PLUS
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: LIST
65278: PUSH
65279: LD_VAR 0 1
65283: PUSH
65284: LD_INT 3
65286: MINUS
65287: PUSH
65288: LD_VAR 0 2
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: PUSH
65301: LD_VAR 0 1
65305: PUSH
65306: LD_INT 4
65308: MINUS
65309: PUSH
65310: LD_VAR 0 2
65314: PUSH
65315: LD_INT 4
65317: MINUS
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: LIST
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: ST_TO_ADDR
// end ; 3 :
65334: GO 65756
65336: LD_INT 3
65338: DOUBLE
65339: EQUAL
65340: IFTRUE 65344
65342: GO 65477
65344: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65345: LD_ADDR_VAR 0 5
65349: PUSH
65350: LD_VAR 0 1
65354: PUSH
65355: LD_INT 3
65357: PLUS
65358: PUSH
65359: LD_VAR 0 2
65363: PUSH
65364: LD_INT 4
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: LIST
65371: PUSH
65372: LD_VAR 0 1
65376: PUSH
65377: LD_INT 4
65379: PLUS
65380: PUSH
65381: LD_VAR 0 2
65385: PUSH
65386: LD_INT 4
65388: PLUS
65389: PUSH
65390: LD_INT 5
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: LIST
65397: PUSH
65398: LD_VAR 0 1
65402: PUSH
65403: LD_INT 4
65405: MINUS
65406: PUSH
65407: LD_VAR 0 2
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: LIST
65419: PUSH
65420: LD_VAR 0 1
65424: PUSH
65425: LD_VAR 0 2
65429: PUSH
65430: LD_INT 4
65432: MINUS
65433: PUSH
65434: LD_INT 3
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: LIST
65441: PUSH
65442: LD_VAR 0 1
65446: PUSH
65447: LD_INT 3
65449: MINUS
65450: PUSH
65451: LD_VAR 0 2
65455: PUSH
65456: LD_INT 3
65458: MINUS
65459: PUSH
65460: LD_INT 2
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: LIST
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: ST_TO_ADDR
// end ; 4 :
65475: GO 65756
65477: LD_INT 4
65479: DOUBLE
65480: EQUAL
65481: IFTRUE 65485
65483: GO 65618
65485: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65486: LD_ADDR_VAR 0 5
65490: PUSH
65491: LD_VAR 0 1
65495: PUSH
65496: LD_VAR 0 2
65500: PUSH
65501: LD_INT 4
65503: PLUS
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: PUSH
65513: LD_VAR 0 1
65517: PUSH
65518: LD_INT 3
65520: PLUS
65521: PUSH
65522: LD_VAR 0 2
65526: PUSH
65527: LD_INT 3
65529: PLUS
65530: PUSH
65531: LD_INT 5
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: LIST
65538: PUSH
65539: LD_VAR 0 1
65543: PUSH
65544: LD_INT 4
65546: PLUS
65547: PUSH
65548: LD_VAR 0 2
65552: PUSH
65553: LD_INT 4
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: LIST
65560: PUSH
65561: LD_VAR 0 1
65565: PUSH
65566: LD_VAR 0 2
65570: PUSH
65571: LD_INT 3
65573: MINUS
65574: PUSH
65575: LD_INT 3
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: PUSH
65583: LD_VAR 0 1
65587: PUSH
65588: LD_INT 4
65590: MINUS
65591: PUSH
65592: LD_VAR 0 2
65596: PUSH
65597: LD_INT 4
65599: MINUS
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: LIST
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: ST_TO_ADDR
// end ; 5 :
65616: GO 65756
65618: LD_INT 5
65620: DOUBLE
65621: EQUAL
65622: IFTRUE 65626
65624: GO 65755
65626: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65627: LD_ADDR_VAR 0 5
65631: PUSH
65632: LD_VAR 0 1
65636: PUSH
65637: LD_INT 4
65639: MINUS
65640: PUSH
65641: LD_VAR 0 2
65645: PUSH
65646: LD_INT 1
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: LIST
65653: PUSH
65654: LD_VAR 0 1
65658: PUSH
65659: LD_VAR 0 2
65663: PUSH
65664: LD_INT 4
65666: MINUS
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: LIST
65675: PUSH
65676: LD_VAR 0 1
65680: PUSH
65681: LD_INT 4
65683: PLUS
65684: PUSH
65685: LD_VAR 0 2
65689: PUSH
65690: LD_INT 4
65692: PLUS
65693: PUSH
65694: LD_INT 5
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: LIST
65701: PUSH
65702: LD_VAR 0 1
65706: PUSH
65707: LD_INT 3
65709: PLUS
65710: PUSH
65711: LD_VAR 0 2
65715: PUSH
65716: LD_INT 4
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: LIST
65723: PUSH
65724: LD_VAR 0 1
65728: PUSH
65729: LD_VAR 0 2
65733: PUSH
65734: LD_INT 3
65736: PLUS
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: LIST
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: ST_TO_ADDR
// end ; end ;
65753: GO 65756
65755: POP
// result := list ;
65756: LD_ADDR_VAR 0 4
65760: PUSH
65761: LD_VAR 0 5
65765: ST_TO_ADDR
// end ;
65766: LD_VAR 0 4
65770: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65771: LD_INT 0
65773: PPUSH
65774: PPUSH
65775: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65776: LD_VAR 0 1
65780: NOT
65781: PUSH
65782: LD_VAR 0 2
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: LD_INT 4
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: IN
65805: NOT
65806: OR
65807: IFFALSE 65811
// exit ;
65809: GO 65894
// tmp := [ ] ;
65811: LD_ADDR_VAR 0 5
65815: PUSH
65816: EMPTY
65817: ST_TO_ADDR
// for i in units do
65818: LD_ADDR_VAR 0 4
65822: PUSH
65823: LD_VAR 0 1
65827: PUSH
65828: FOR_IN
65829: IFFALSE 65863
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65831: LD_ADDR_VAR 0 5
65835: PUSH
65836: LD_VAR 0 5
65840: PPUSH
65841: LD_VAR 0 4
65845: PPUSH
65846: LD_VAR 0 2
65850: PPUSH
65851: CALL_OW 259
65855: PPUSH
65856: CALL 67267 0 2
65860: ST_TO_ADDR
65861: GO 65828
65863: POP
65864: POP
// if not tmp then
65865: LD_VAR 0 5
65869: NOT
65870: IFFALSE 65874
// exit ;
65872: GO 65894
// result := SortListByListDesc ( units , tmp ) ;
65874: LD_ADDR_VAR 0 3
65878: PUSH
65879: LD_VAR 0 1
65883: PPUSH
65884: LD_VAR 0 5
65888: PPUSH
65889: CALL_OW 77
65893: ST_TO_ADDR
// end ;
65894: LD_VAR 0 3
65898: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65899: LD_INT 0
65901: PPUSH
65902: PPUSH
65903: PPUSH
// result := false ;
65904: LD_ADDR_VAR 0 3
65908: PUSH
65909: LD_INT 0
65911: ST_TO_ADDR
// if not building then
65912: LD_VAR 0 2
65916: NOT
65917: IFFALSE 65921
// exit ;
65919: GO 66059
// x := GetX ( building ) ;
65921: LD_ADDR_VAR 0 4
65925: PUSH
65926: LD_VAR 0 2
65930: PPUSH
65931: CALL_OW 250
65935: ST_TO_ADDR
// y := GetY ( building ) ;
65936: LD_ADDR_VAR 0 5
65940: PUSH
65941: LD_VAR 0 2
65945: PPUSH
65946: CALL_OW 251
65950: ST_TO_ADDR
// if not x or not y then
65951: LD_VAR 0 4
65955: NOT
65956: PUSH
65957: LD_VAR 0 5
65961: NOT
65962: OR
65963: IFFALSE 65967
// exit ;
65965: GO 66059
// if GetTaskList ( unit ) then
65967: LD_VAR 0 1
65971: PPUSH
65972: CALL_OW 437
65976: IFFALSE 66059
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65978: LD_STRING e
65980: PUSH
65981: LD_VAR 0 1
65985: PPUSH
65986: CALL_OW 437
65990: PUSH
65991: LD_INT 1
65993: ARRAY
65994: PUSH
65995: LD_INT 1
65997: ARRAY
65998: EQUAL
65999: PUSH
66000: LD_VAR 0 4
66004: PUSH
66005: LD_VAR 0 1
66009: PPUSH
66010: CALL_OW 437
66014: PUSH
66015: LD_INT 1
66017: ARRAY
66018: PUSH
66019: LD_INT 2
66021: ARRAY
66022: EQUAL
66023: AND
66024: PUSH
66025: LD_VAR 0 5
66029: PUSH
66030: LD_VAR 0 1
66034: PPUSH
66035: CALL_OW 437
66039: PUSH
66040: LD_INT 1
66042: ARRAY
66043: PUSH
66044: LD_INT 3
66046: ARRAY
66047: EQUAL
66048: AND
66049: IFFALSE 66059
// result := true end ;
66051: LD_ADDR_VAR 0 3
66055: PUSH
66056: LD_INT 1
66058: ST_TO_ADDR
// end ;
66059: LD_VAR 0 3
66063: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66064: LD_INT 0
66066: PPUSH
// result := false ;
66067: LD_ADDR_VAR 0 4
66071: PUSH
66072: LD_INT 0
66074: ST_TO_ADDR
// if GetTaskList ( unit ) then
66075: LD_VAR 0 1
66079: PPUSH
66080: CALL_OW 437
66084: IFFALSE 66167
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66086: LD_STRING M
66088: PUSH
66089: LD_VAR 0 1
66093: PPUSH
66094: CALL_OW 437
66098: PUSH
66099: LD_INT 1
66101: ARRAY
66102: PUSH
66103: LD_INT 1
66105: ARRAY
66106: EQUAL
66107: PUSH
66108: LD_VAR 0 2
66112: PUSH
66113: LD_VAR 0 1
66117: PPUSH
66118: CALL_OW 437
66122: PUSH
66123: LD_INT 1
66125: ARRAY
66126: PUSH
66127: LD_INT 2
66129: ARRAY
66130: EQUAL
66131: AND
66132: PUSH
66133: LD_VAR 0 3
66137: PUSH
66138: LD_VAR 0 1
66142: PPUSH
66143: CALL_OW 437
66147: PUSH
66148: LD_INT 1
66150: ARRAY
66151: PUSH
66152: LD_INT 3
66154: ARRAY
66155: EQUAL
66156: AND
66157: IFFALSE 66167
// result := true ;
66159: LD_ADDR_VAR 0 4
66163: PUSH
66164: LD_INT 1
66166: ST_TO_ADDR
// end ; end ;
66167: LD_VAR 0 4
66171: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66172: LD_INT 0
66174: PPUSH
66175: PPUSH
66176: PPUSH
66177: PPUSH
// if not unit or not area then
66178: LD_VAR 0 1
66182: NOT
66183: PUSH
66184: LD_VAR 0 2
66188: NOT
66189: OR
66190: IFFALSE 66194
// exit ;
66192: GO 66370
// tmp := AreaToList ( area , i ) ;
66194: LD_ADDR_VAR 0 6
66198: PUSH
66199: LD_VAR 0 2
66203: PPUSH
66204: LD_VAR 0 5
66208: PPUSH
66209: CALL_OW 517
66213: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66214: LD_ADDR_VAR 0 5
66218: PUSH
66219: DOUBLE
66220: LD_INT 1
66222: DEC
66223: ST_TO_ADDR
66224: LD_VAR 0 6
66228: PUSH
66229: LD_INT 1
66231: ARRAY
66232: PUSH
66233: FOR_TO
66234: IFFALSE 66368
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66236: LD_ADDR_VAR 0 7
66240: PUSH
66241: LD_VAR 0 6
66245: PUSH
66246: LD_INT 1
66248: ARRAY
66249: PUSH
66250: LD_VAR 0 5
66254: ARRAY
66255: PUSH
66256: LD_VAR 0 6
66260: PUSH
66261: LD_INT 2
66263: ARRAY
66264: PUSH
66265: LD_VAR 0 5
66269: ARRAY
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66275: LD_INT 92
66277: PUSH
66278: LD_VAR 0 7
66282: PUSH
66283: LD_INT 1
66285: ARRAY
66286: PUSH
66287: LD_VAR 0 7
66291: PUSH
66292: LD_INT 2
66294: ARRAY
66295: PUSH
66296: LD_INT 2
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: PPUSH
66305: CALL_OW 69
66309: PUSH
66310: LD_INT 0
66312: EQUAL
66313: IFFALSE 66366
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66315: LD_VAR 0 1
66319: PPUSH
66320: LD_VAR 0 7
66324: PUSH
66325: LD_INT 1
66327: ARRAY
66328: PPUSH
66329: LD_VAR 0 7
66333: PUSH
66334: LD_INT 2
66336: ARRAY
66337: PPUSH
66338: LD_VAR 0 3
66342: PPUSH
66343: CALL_OW 48
// result := IsPlaced ( unit ) ;
66347: LD_ADDR_VAR 0 4
66351: PUSH
66352: LD_VAR 0 1
66356: PPUSH
66357: CALL_OW 305
66361: ST_TO_ADDR
// exit ;
66362: POP
66363: POP
66364: GO 66370
// end ; end ;
66366: GO 66233
66368: POP
66369: POP
// end ;
66370: LD_VAR 0 4
66374: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66375: LD_INT 0
66377: PPUSH
66378: PPUSH
66379: PPUSH
// if not side or side > 8 then
66380: LD_VAR 0 1
66384: NOT
66385: PUSH
66386: LD_VAR 0 1
66390: PUSH
66391: LD_INT 8
66393: GREATER
66394: OR
66395: IFFALSE 66399
// exit ;
66397: GO 66586
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66399: LD_ADDR_VAR 0 4
66403: PUSH
66404: LD_INT 22
66406: PUSH
66407: LD_VAR 0 1
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 21
66418: PUSH
66419: LD_INT 3
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PPUSH
66430: CALL_OW 69
66434: ST_TO_ADDR
// if not tmp then
66435: LD_VAR 0 4
66439: NOT
66440: IFFALSE 66444
// exit ;
66442: GO 66586
// enable_addtolog := true ;
66444: LD_ADDR_OWVAR 81
66448: PUSH
66449: LD_INT 1
66451: ST_TO_ADDR
// AddToLog ( [ ) ;
66452: LD_STRING [
66454: PPUSH
66455: CALL_OW 561
// for i in tmp do
66459: LD_ADDR_VAR 0 3
66463: PUSH
66464: LD_VAR 0 4
66468: PUSH
66469: FOR_IN
66470: IFFALSE 66577
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66472: LD_STRING [
66474: PUSH
66475: LD_VAR 0 3
66479: PPUSH
66480: CALL_OW 266
66484: STR
66485: PUSH
66486: LD_STRING , 
66488: STR
66489: PUSH
66490: LD_VAR 0 3
66494: PPUSH
66495: CALL_OW 250
66499: STR
66500: PUSH
66501: LD_STRING , 
66503: STR
66504: PUSH
66505: LD_VAR 0 3
66509: PPUSH
66510: CALL_OW 251
66514: STR
66515: PUSH
66516: LD_STRING , 
66518: STR
66519: PUSH
66520: LD_VAR 0 3
66524: PPUSH
66525: CALL_OW 254
66529: STR
66530: PUSH
66531: LD_STRING , 
66533: STR
66534: PUSH
66535: LD_VAR 0 3
66539: PPUSH
66540: LD_INT 1
66542: PPUSH
66543: CALL_OW 268
66547: STR
66548: PUSH
66549: LD_STRING , 
66551: STR
66552: PUSH
66553: LD_VAR 0 3
66557: PPUSH
66558: LD_INT 2
66560: PPUSH
66561: CALL_OW 268
66565: STR
66566: PUSH
66567: LD_STRING ],
66569: STR
66570: PPUSH
66571: CALL_OW 561
// end ;
66575: GO 66469
66577: POP
66578: POP
// AddToLog ( ]; ) ;
66579: LD_STRING ];
66581: PPUSH
66582: CALL_OW 561
// end ;
66586: LD_VAR 0 2
66590: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66591: LD_INT 0
66593: PPUSH
66594: PPUSH
66595: PPUSH
66596: PPUSH
66597: PPUSH
// if not area or not rate or not max then
66598: LD_VAR 0 1
66602: NOT
66603: PUSH
66604: LD_VAR 0 2
66608: NOT
66609: OR
66610: PUSH
66611: LD_VAR 0 4
66615: NOT
66616: OR
66617: IFFALSE 66621
// exit ;
66619: GO 66810
// while 1 do
66621: LD_INT 1
66623: IFFALSE 66810
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66625: LD_ADDR_VAR 0 9
66629: PUSH
66630: LD_VAR 0 1
66634: PPUSH
66635: LD_INT 1
66637: PPUSH
66638: CALL_OW 287
66642: PUSH
66643: LD_INT 10
66645: MUL
66646: ST_TO_ADDR
// r := rate / 10 ;
66647: LD_ADDR_VAR 0 7
66651: PUSH
66652: LD_VAR 0 2
66656: PUSH
66657: LD_INT 10
66659: DIVREAL
66660: ST_TO_ADDR
// time := 1 1$00 ;
66661: LD_ADDR_VAR 0 8
66665: PUSH
66666: LD_INT 2100
66668: ST_TO_ADDR
// if amount < min then
66669: LD_VAR 0 9
66673: PUSH
66674: LD_VAR 0 3
66678: LESS
66679: IFFALSE 66697
// r := r * 2 else
66681: LD_ADDR_VAR 0 7
66685: PUSH
66686: LD_VAR 0 7
66690: PUSH
66691: LD_INT 2
66693: MUL
66694: ST_TO_ADDR
66695: GO 66723
// if amount > max then
66697: LD_VAR 0 9
66701: PUSH
66702: LD_VAR 0 4
66706: GREATER
66707: IFFALSE 66723
// r := r / 2 ;
66709: LD_ADDR_VAR 0 7
66713: PUSH
66714: LD_VAR 0 7
66718: PUSH
66719: LD_INT 2
66721: DIVREAL
66722: ST_TO_ADDR
// time := time / r ;
66723: LD_ADDR_VAR 0 8
66727: PUSH
66728: LD_VAR 0 8
66732: PUSH
66733: LD_VAR 0 7
66737: DIVREAL
66738: ST_TO_ADDR
// if time < 0 then
66739: LD_VAR 0 8
66743: PUSH
66744: LD_INT 0
66746: LESS
66747: IFFALSE 66764
// time := time * - 1 ;
66749: LD_ADDR_VAR 0 8
66753: PUSH
66754: LD_VAR 0 8
66758: PUSH
66759: LD_INT 1
66761: NEG
66762: MUL
66763: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66764: LD_VAR 0 8
66768: PUSH
66769: LD_INT 35
66771: PPUSH
66772: LD_INT 875
66774: PPUSH
66775: CALL_OW 12
66779: PLUS
66780: PPUSH
66781: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66785: LD_INT 1
66787: PPUSH
66788: LD_INT 5
66790: PPUSH
66791: CALL_OW 12
66795: PPUSH
66796: LD_VAR 0 1
66800: PPUSH
66801: LD_INT 1
66803: PPUSH
66804: CALL_OW 55
// end ;
66808: GO 66621
// end ;
66810: LD_VAR 0 5
66814: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66815: LD_INT 0
66817: PPUSH
66818: PPUSH
66819: PPUSH
66820: PPUSH
66821: PPUSH
66822: PPUSH
66823: PPUSH
66824: PPUSH
// if not turrets or not factories then
66825: LD_VAR 0 1
66829: NOT
66830: PUSH
66831: LD_VAR 0 2
66835: NOT
66836: OR
66837: IFFALSE 66841
// exit ;
66839: GO 67148
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66841: LD_ADDR_VAR 0 10
66845: PUSH
66846: LD_INT 5
66848: PUSH
66849: LD_INT 6
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 2
66858: PUSH
66859: LD_INT 4
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 3
66868: PUSH
66869: LD_INT 5
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 24
66883: PUSH
66884: LD_INT 25
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 23
66893: PUSH
66894: LD_INT 27
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 42
66907: PUSH
66908: LD_INT 43
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 44
66917: PUSH
66918: LD_INT 46
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 45
66927: PUSH
66928: LD_INT 47
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: LIST
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: LIST
66944: ST_TO_ADDR
// result := [ ] ;
66945: LD_ADDR_VAR 0 3
66949: PUSH
66950: EMPTY
66951: ST_TO_ADDR
// for i in turrets do
66952: LD_ADDR_VAR 0 4
66956: PUSH
66957: LD_VAR 0 1
66961: PUSH
66962: FOR_IN
66963: IFFALSE 67146
// begin nat := GetNation ( i ) ;
66965: LD_ADDR_VAR 0 7
66969: PUSH
66970: LD_VAR 0 4
66974: PPUSH
66975: CALL_OW 248
66979: ST_TO_ADDR
// weapon := 0 ;
66980: LD_ADDR_VAR 0 8
66984: PUSH
66985: LD_INT 0
66987: ST_TO_ADDR
// if not nat then
66988: LD_VAR 0 7
66992: NOT
66993: IFFALSE 66997
// continue ;
66995: GO 66962
// for j in list [ nat ] do
66997: LD_ADDR_VAR 0 5
67001: PUSH
67002: LD_VAR 0 10
67006: PUSH
67007: LD_VAR 0 7
67011: ARRAY
67012: PUSH
67013: FOR_IN
67014: IFFALSE 67055
// if GetBWeapon ( i ) = j [ 1 ] then
67016: LD_VAR 0 4
67020: PPUSH
67021: CALL_OW 269
67025: PUSH
67026: LD_VAR 0 5
67030: PUSH
67031: LD_INT 1
67033: ARRAY
67034: EQUAL
67035: IFFALSE 67053
// begin weapon := j [ 2 ] ;
67037: LD_ADDR_VAR 0 8
67041: PUSH
67042: LD_VAR 0 5
67046: PUSH
67047: LD_INT 2
67049: ARRAY
67050: ST_TO_ADDR
// break ;
67051: GO 67055
// end ;
67053: GO 67013
67055: POP
67056: POP
// if not weapon then
67057: LD_VAR 0 8
67061: NOT
67062: IFFALSE 67066
// continue ;
67064: GO 66962
// for k in factories do
67066: LD_ADDR_VAR 0 6
67070: PUSH
67071: LD_VAR 0 2
67075: PUSH
67076: FOR_IN
67077: IFFALSE 67142
// begin weapons := AvailableWeaponList ( k ) ;
67079: LD_ADDR_VAR 0 9
67083: PUSH
67084: LD_VAR 0 6
67088: PPUSH
67089: CALL_OW 478
67093: ST_TO_ADDR
// if not weapons then
67094: LD_VAR 0 9
67098: NOT
67099: IFFALSE 67103
// continue ;
67101: GO 67076
// if weapon in weapons then
67103: LD_VAR 0 8
67107: PUSH
67108: LD_VAR 0 9
67112: IN
67113: IFFALSE 67140
// begin result := [ i , weapon ] ;
67115: LD_ADDR_VAR 0 3
67119: PUSH
67120: LD_VAR 0 4
67124: PUSH
67125: LD_VAR 0 8
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: ST_TO_ADDR
// exit ;
67134: POP
67135: POP
67136: POP
67137: POP
67138: GO 67148
// end ; end ;
67140: GO 67076
67142: POP
67143: POP
// end ;
67144: GO 66962
67146: POP
67147: POP
// end ;
67148: LD_VAR 0 3
67152: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67153: LD_INT 0
67155: PPUSH
// if not side or side > 8 then
67156: LD_VAR 0 3
67160: NOT
67161: PUSH
67162: LD_VAR 0 3
67166: PUSH
67167: LD_INT 8
67169: GREATER
67170: OR
67171: IFFALSE 67175
// exit ;
67173: GO 67234
// if not range then
67175: LD_VAR 0 4
67179: NOT
67180: IFFALSE 67191
// range := - 12 ;
67182: LD_ADDR_VAR 0 4
67186: PUSH
67187: LD_INT 12
67189: NEG
67190: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67191: LD_VAR 0 1
67195: PPUSH
67196: LD_VAR 0 2
67200: PPUSH
67201: LD_VAR 0 3
67205: PPUSH
67206: LD_VAR 0 4
67210: PPUSH
67211: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67215: LD_VAR 0 1
67219: PPUSH
67220: LD_VAR 0 2
67224: PPUSH
67225: LD_VAR 0 3
67229: PPUSH
67230: CALL_OW 331
// end ;
67234: LD_VAR 0 5
67238: RET
// export function Video ( mode ) ; begin
67239: LD_INT 0
67241: PPUSH
// ingame_video = mode ;
67242: LD_ADDR_OWVAR 52
67246: PUSH
67247: LD_VAR 0 1
67251: ST_TO_ADDR
// interface_hidden = mode ;
67252: LD_ADDR_OWVAR 54
67256: PUSH
67257: LD_VAR 0 1
67261: ST_TO_ADDR
// end ;
67262: LD_VAR 0 2
67266: RET
// export function Join ( array , element ) ; begin
67267: LD_INT 0
67269: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67270: LD_ADDR_VAR 0 3
67274: PUSH
67275: LD_VAR 0 1
67279: PPUSH
67280: LD_VAR 0 1
67284: PUSH
67285: LD_INT 1
67287: PLUS
67288: PPUSH
67289: LD_VAR 0 2
67293: PPUSH
67294: CALL_OW 1
67298: ST_TO_ADDR
// end ;
67299: LD_VAR 0 3
67303: RET
// export function JoinUnion ( array , element ) ; begin
67304: LD_INT 0
67306: PPUSH
// result := array union element ;
67307: LD_ADDR_VAR 0 3
67311: PUSH
67312: LD_VAR 0 1
67316: PUSH
67317: LD_VAR 0 2
67321: UNION
67322: ST_TO_ADDR
// end ;
67323: LD_VAR 0 3
67327: RET
// export function GetBehemoths ( side ) ; begin
67328: LD_INT 0
67330: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67331: LD_ADDR_VAR 0 2
67335: PUSH
67336: LD_INT 22
67338: PUSH
67339: LD_VAR 0 1
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 31
67350: PUSH
67351: LD_INT 25
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PPUSH
67362: CALL_OW 69
67366: ST_TO_ADDR
// end ;
67367: LD_VAR 0 2
67371: RET
// export function Shuffle ( array ) ; var i , index ; begin
67372: LD_INT 0
67374: PPUSH
67375: PPUSH
67376: PPUSH
// result := [ ] ;
67377: LD_ADDR_VAR 0 2
67381: PUSH
67382: EMPTY
67383: ST_TO_ADDR
// if not array then
67384: LD_VAR 0 1
67388: NOT
67389: IFFALSE 67393
// exit ;
67391: GO 67492
// Randomize ;
67393: CALL_OW 10
// for i = array downto 1 do
67397: LD_ADDR_VAR 0 3
67401: PUSH
67402: DOUBLE
67403: LD_VAR 0 1
67407: INC
67408: ST_TO_ADDR
67409: LD_INT 1
67411: PUSH
67412: FOR_DOWNTO
67413: IFFALSE 67490
// begin index := rand ( 1 , array ) ;
67415: LD_ADDR_VAR 0 4
67419: PUSH
67420: LD_INT 1
67422: PPUSH
67423: LD_VAR 0 1
67427: PPUSH
67428: CALL_OW 12
67432: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67433: LD_ADDR_VAR 0 2
67437: PUSH
67438: LD_VAR 0 2
67442: PPUSH
67443: LD_VAR 0 2
67447: PUSH
67448: LD_INT 1
67450: PLUS
67451: PPUSH
67452: LD_VAR 0 1
67456: PUSH
67457: LD_VAR 0 4
67461: ARRAY
67462: PPUSH
67463: CALL_OW 2
67467: ST_TO_ADDR
// array := Delete ( array , index ) ;
67468: LD_ADDR_VAR 0 1
67472: PUSH
67473: LD_VAR 0 1
67477: PPUSH
67478: LD_VAR 0 4
67482: PPUSH
67483: CALL_OW 3
67487: ST_TO_ADDR
// end ;
67488: GO 67412
67490: POP
67491: POP
// end ;
67492: LD_VAR 0 2
67496: RET
// export function GetBaseMaterials ( base ) ; begin
67497: LD_INT 0
67499: PPUSH
// result := [ 0 , 0 , 0 ] ;
67500: LD_ADDR_VAR 0 2
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 0
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: LIST
67518: ST_TO_ADDR
// if not base then
67519: LD_VAR 0 1
67523: NOT
67524: IFFALSE 67528
// exit ;
67526: GO 67577
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67528: LD_ADDR_VAR 0 2
67532: PUSH
67533: LD_VAR 0 1
67537: PPUSH
67538: LD_INT 1
67540: PPUSH
67541: CALL_OW 275
67545: PUSH
67546: LD_VAR 0 1
67550: PPUSH
67551: LD_INT 2
67553: PPUSH
67554: CALL_OW 275
67558: PUSH
67559: LD_VAR 0 1
67563: PPUSH
67564: LD_INT 3
67566: PPUSH
67567: CALL_OW 275
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: ST_TO_ADDR
// end ;
67577: LD_VAR 0 2
67581: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67582: LD_INT 0
67584: PPUSH
67585: PPUSH
// result := array ;
67586: LD_ADDR_VAR 0 3
67590: PUSH
67591: LD_VAR 0 1
67595: ST_TO_ADDR
// if size >= result then
67596: LD_VAR 0 2
67600: PUSH
67601: LD_VAR 0 3
67605: GREATEREQUAL
67606: IFFALSE 67610
// exit ;
67608: GO 67660
// if size then
67610: LD_VAR 0 2
67614: IFFALSE 67660
// for i := array downto size do
67616: LD_ADDR_VAR 0 4
67620: PUSH
67621: DOUBLE
67622: LD_VAR 0 1
67626: INC
67627: ST_TO_ADDR
67628: LD_VAR 0 2
67632: PUSH
67633: FOR_DOWNTO
67634: IFFALSE 67658
// result := Delete ( result , result ) ;
67636: LD_ADDR_VAR 0 3
67640: PUSH
67641: LD_VAR 0 3
67645: PPUSH
67646: LD_VAR 0 3
67650: PPUSH
67651: CALL_OW 3
67655: ST_TO_ADDR
67656: GO 67633
67658: POP
67659: POP
// end ;
67660: LD_VAR 0 3
67664: RET
// export function ComExit ( unit ) ; var tmp ; begin
67665: LD_INT 0
67667: PPUSH
67668: PPUSH
// if not IsInUnit ( unit ) then
67669: LD_VAR 0 1
67673: PPUSH
67674: CALL_OW 310
67678: NOT
67679: IFFALSE 67683
// exit ;
67681: GO 67743
// tmp := IsInUnit ( unit ) ;
67683: LD_ADDR_VAR 0 3
67687: PUSH
67688: LD_VAR 0 1
67692: PPUSH
67693: CALL_OW 310
67697: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67698: LD_VAR 0 3
67702: PPUSH
67703: CALL_OW 247
67707: PUSH
67708: LD_INT 2
67710: EQUAL
67711: IFFALSE 67724
// ComExitVehicle ( unit ) else
67713: LD_VAR 0 1
67717: PPUSH
67718: CALL_OW 121
67722: GO 67733
// ComExitBuilding ( unit ) ;
67724: LD_VAR 0 1
67728: PPUSH
67729: CALL_OW 122
// result := tmp ;
67733: LD_ADDR_VAR 0 2
67737: PUSH
67738: LD_VAR 0 3
67742: ST_TO_ADDR
// end ;
67743: LD_VAR 0 2
67747: RET
// export function ComExitAll ( units ) ; var i ; begin
67748: LD_INT 0
67750: PPUSH
67751: PPUSH
// if not units then
67752: LD_VAR 0 1
67756: NOT
67757: IFFALSE 67761
// exit ;
67759: GO 67787
// for i in units do
67761: LD_ADDR_VAR 0 3
67765: PUSH
67766: LD_VAR 0 1
67770: PUSH
67771: FOR_IN
67772: IFFALSE 67785
// ComExit ( i ) ;
67774: LD_VAR 0 3
67778: PPUSH
67779: CALL 67665 0 1
67783: GO 67771
67785: POP
67786: POP
// end ;
67787: LD_VAR 0 2
67791: RET
// export function ResetHc ; begin
67792: LD_INT 0
67794: PPUSH
// InitHc ;
67795: CALL_OW 19
// hc_importance := 0 ;
67799: LD_ADDR_OWVAR 32
67803: PUSH
67804: LD_INT 0
67806: ST_TO_ADDR
// end ;
67807: LD_VAR 0 1
67811: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67812: LD_INT 0
67814: PPUSH
67815: PPUSH
67816: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67817: LD_ADDR_VAR 0 6
67821: PUSH
67822: LD_VAR 0 1
67826: PUSH
67827: LD_VAR 0 3
67831: PLUS
67832: PUSH
67833: LD_INT 2
67835: DIV
67836: ST_TO_ADDR
// if _x < 0 then
67837: LD_VAR 0 6
67841: PUSH
67842: LD_INT 0
67844: LESS
67845: IFFALSE 67862
// _x := _x * - 1 ;
67847: LD_ADDR_VAR 0 6
67851: PUSH
67852: LD_VAR 0 6
67856: PUSH
67857: LD_INT 1
67859: NEG
67860: MUL
67861: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67862: LD_ADDR_VAR 0 7
67866: PUSH
67867: LD_VAR 0 2
67871: PUSH
67872: LD_VAR 0 4
67876: PLUS
67877: PUSH
67878: LD_INT 2
67880: DIV
67881: ST_TO_ADDR
// if _y < 0 then
67882: LD_VAR 0 7
67886: PUSH
67887: LD_INT 0
67889: LESS
67890: IFFALSE 67907
// _y := _y * - 1 ;
67892: LD_ADDR_VAR 0 7
67896: PUSH
67897: LD_VAR 0 7
67901: PUSH
67902: LD_INT 1
67904: NEG
67905: MUL
67906: ST_TO_ADDR
// result := [ _x , _y ] ;
67907: LD_ADDR_VAR 0 5
67911: PUSH
67912: LD_VAR 0 6
67916: PUSH
67917: LD_VAR 0 7
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: ST_TO_ADDR
// end ;
67926: LD_VAR 0 5
67930: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67931: LD_INT 0
67933: PPUSH
67934: PPUSH
67935: PPUSH
67936: PPUSH
// task := GetTaskList ( unit ) ;
67937: LD_ADDR_VAR 0 7
67941: PUSH
67942: LD_VAR 0 1
67946: PPUSH
67947: CALL_OW 437
67951: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67952: LD_VAR 0 7
67956: NOT
67957: PUSH
67958: LD_VAR 0 1
67962: PPUSH
67963: LD_VAR 0 2
67967: PPUSH
67968: CALL_OW 308
67972: NOT
67973: AND
67974: IFFALSE 67978
// exit ;
67976: GO 68096
// if IsInArea ( unit , area ) then
67978: LD_VAR 0 1
67982: PPUSH
67983: LD_VAR 0 2
67987: PPUSH
67988: CALL_OW 308
67992: IFFALSE 68010
// begin ComMoveToArea ( unit , goAway ) ;
67994: LD_VAR 0 1
67998: PPUSH
67999: LD_VAR 0 3
68003: PPUSH
68004: CALL_OW 113
// exit ;
68008: GO 68096
// end ; if task [ 1 ] [ 1 ] <> M then
68010: LD_VAR 0 7
68014: PUSH
68015: LD_INT 1
68017: ARRAY
68018: PUSH
68019: LD_INT 1
68021: ARRAY
68022: PUSH
68023: LD_STRING M
68025: NONEQUAL
68026: IFFALSE 68030
// exit ;
68028: GO 68096
// x := task [ 1 ] [ 2 ] ;
68030: LD_ADDR_VAR 0 5
68034: PUSH
68035: LD_VAR 0 7
68039: PUSH
68040: LD_INT 1
68042: ARRAY
68043: PUSH
68044: LD_INT 2
68046: ARRAY
68047: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68048: LD_ADDR_VAR 0 6
68052: PUSH
68053: LD_VAR 0 7
68057: PUSH
68058: LD_INT 1
68060: ARRAY
68061: PUSH
68062: LD_INT 3
68064: ARRAY
68065: ST_TO_ADDR
// if InArea ( x , y , area ) then
68066: LD_VAR 0 5
68070: PPUSH
68071: LD_VAR 0 6
68075: PPUSH
68076: LD_VAR 0 2
68080: PPUSH
68081: CALL_OW 309
68085: IFFALSE 68096
// ComStop ( unit ) ;
68087: LD_VAR 0 1
68091: PPUSH
68092: CALL_OW 141
// end ;
68096: LD_VAR 0 4
68100: RET
// export function Abs ( value ) ; begin
68101: LD_INT 0
68103: PPUSH
// result := value ;
68104: LD_ADDR_VAR 0 2
68108: PUSH
68109: LD_VAR 0 1
68113: ST_TO_ADDR
// if value < 0 then
68114: LD_VAR 0 1
68118: PUSH
68119: LD_INT 0
68121: LESS
68122: IFFALSE 68139
// result := value * - 1 ;
68124: LD_ADDR_VAR 0 2
68128: PUSH
68129: LD_VAR 0 1
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: MUL
68138: ST_TO_ADDR
// end ;
68139: LD_VAR 0 2
68143: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68144: LD_INT 0
68146: PPUSH
68147: PPUSH
68148: PPUSH
68149: PPUSH
68150: PPUSH
68151: PPUSH
68152: PPUSH
68153: PPUSH
// if not unit or not building then
68154: LD_VAR 0 1
68158: NOT
68159: PUSH
68160: LD_VAR 0 2
68164: NOT
68165: OR
68166: IFFALSE 68170
// exit ;
68168: GO 68396
// x := GetX ( building ) ;
68170: LD_ADDR_VAR 0 4
68174: PUSH
68175: LD_VAR 0 2
68179: PPUSH
68180: CALL_OW 250
68184: ST_TO_ADDR
// y := GetY ( building ) ;
68185: LD_ADDR_VAR 0 6
68189: PUSH
68190: LD_VAR 0 2
68194: PPUSH
68195: CALL_OW 251
68199: ST_TO_ADDR
// d := GetDir ( building ) ;
68200: LD_ADDR_VAR 0 8
68204: PUSH
68205: LD_VAR 0 2
68209: PPUSH
68210: CALL_OW 254
68214: ST_TO_ADDR
// r := 4 ;
68215: LD_ADDR_VAR 0 9
68219: PUSH
68220: LD_INT 4
68222: ST_TO_ADDR
// for i := 1 to 5 do
68223: LD_ADDR_VAR 0 10
68227: PUSH
68228: DOUBLE
68229: LD_INT 1
68231: DEC
68232: ST_TO_ADDR
68233: LD_INT 5
68235: PUSH
68236: FOR_TO
68237: IFFALSE 68394
// begin _x := ShiftX ( x , d , r + i ) ;
68239: LD_ADDR_VAR 0 5
68243: PUSH
68244: LD_VAR 0 4
68248: PPUSH
68249: LD_VAR 0 8
68253: PPUSH
68254: LD_VAR 0 9
68258: PUSH
68259: LD_VAR 0 10
68263: PLUS
68264: PPUSH
68265: CALL_OW 272
68269: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68270: LD_ADDR_VAR 0 7
68274: PUSH
68275: LD_VAR 0 6
68279: PPUSH
68280: LD_VAR 0 8
68284: PPUSH
68285: LD_VAR 0 9
68289: PUSH
68290: LD_VAR 0 10
68294: PLUS
68295: PPUSH
68296: CALL_OW 273
68300: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68301: LD_VAR 0 5
68305: PPUSH
68306: LD_VAR 0 7
68310: PPUSH
68311: CALL_OW 488
68315: PUSH
68316: LD_VAR 0 5
68320: PPUSH
68321: LD_VAR 0 7
68325: PPUSH
68326: CALL_OW 428
68330: PPUSH
68331: CALL_OW 247
68335: PUSH
68336: LD_INT 3
68338: PUSH
68339: LD_INT 2
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: IN
68346: NOT
68347: AND
68348: IFFALSE 68392
// begin ComMoveXY ( unit , _x , _y ) ;
68350: LD_VAR 0 1
68354: PPUSH
68355: LD_VAR 0 5
68359: PPUSH
68360: LD_VAR 0 7
68364: PPUSH
68365: CALL_OW 111
// result := [ _x , _y ] ;
68369: LD_ADDR_VAR 0 3
68373: PUSH
68374: LD_VAR 0 5
68378: PUSH
68379: LD_VAR 0 7
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: ST_TO_ADDR
// exit ;
68388: POP
68389: POP
68390: GO 68396
// end ; end ;
68392: GO 68236
68394: POP
68395: POP
// end ;
68396: LD_VAR 0 3
68400: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68401: LD_INT 0
68403: PPUSH
68404: PPUSH
68405: PPUSH
// result := 0 ;
68406: LD_ADDR_VAR 0 3
68410: PUSH
68411: LD_INT 0
68413: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68414: LD_VAR 0 1
68418: PUSH
68419: LD_INT 0
68421: LESS
68422: PUSH
68423: LD_VAR 0 1
68427: PUSH
68428: LD_INT 8
68430: GREATER
68431: OR
68432: PUSH
68433: LD_VAR 0 2
68437: PUSH
68438: LD_INT 0
68440: LESS
68441: OR
68442: PUSH
68443: LD_VAR 0 2
68447: PUSH
68448: LD_INT 8
68450: GREATER
68451: OR
68452: IFFALSE 68456
// exit ;
68454: GO 68531
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68456: LD_ADDR_VAR 0 4
68460: PUSH
68461: LD_INT 22
68463: PUSH
68464: LD_VAR 0 2
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PPUSH
68473: CALL_OW 69
68477: PUSH
68478: FOR_IN
68479: IFFALSE 68529
// begin un := UnitShoot ( i ) ;
68481: LD_ADDR_VAR 0 5
68485: PUSH
68486: LD_VAR 0 4
68490: PPUSH
68491: CALL_OW 504
68495: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68496: LD_VAR 0 5
68500: PPUSH
68501: CALL_OW 255
68505: PUSH
68506: LD_VAR 0 1
68510: EQUAL
68511: IFFALSE 68527
// begin result := un ;
68513: LD_ADDR_VAR 0 3
68517: PUSH
68518: LD_VAR 0 5
68522: ST_TO_ADDR
// exit ;
68523: POP
68524: POP
68525: GO 68531
// end ; end ;
68527: GO 68478
68529: POP
68530: POP
// end ;
68531: LD_VAR 0 3
68535: RET
// export function GetCargoBay ( units ) ; begin
68536: LD_INT 0
68538: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68539: LD_ADDR_VAR 0 2
68543: PUSH
68544: LD_VAR 0 1
68548: PPUSH
68549: LD_INT 2
68551: PUSH
68552: LD_INT 34
68554: PUSH
68555: LD_INT 12
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 34
68564: PUSH
68565: LD_INT 51
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 34
68574: PUSH
68575: LD_INT 32
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 34
68584: PUSH
68585: LD_INT 89
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: PPUSH
68599: CALL_OW 72
68603: ST_TO_ADDR
// end ;
68604: LD_VAR 0 2
68608: RET
// export function Negate ( value ) ; begin
68609: LD_INT 0
68611: PPUSH
// result := not value ;
68612: LD_ADDR_VAR 0 2
68616: PUSH
68617: LD_VAR 0 1
68621: NOT
68622: ST_TO_ADDR
// end ;
68623: LD_VAR 0 2
68627: RET
// export function Inc ( value ) ; begin
68628: LD_INT 0
68630: PPUSH
// result := value + 1 ;
68631: LD_ADDR_VAR 0 2
68635: PUSH
68636: LD_VAR 0 1
68640: PUSH
68641: LD_INT 1
68643: PLUS
68644: ST_TO_ADDR
// end ;
68645: LD_VAR 0 2
68649: RET
// export function Dec ( value ) ; begin
68650: LD_INT 0
68652: PPUSH
// result := value - 1 ;
68653: LD_ADDR_VAR 0 2
68657: PUSH
68658: LD_VAR 0 1
68662: PUSH
68663: LD_INT 1
68665: MINUS
68666: ST_TO_ADDR
// end ;
68667: LD_VAR 0 2
68671: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68672: LD_INT 0
68674: PPUSH
68675: PPUSH
68676: PPUSH
68677: PPUSH
68678: PPUSH
68679: PPUSH
68680: PPUSH
68681: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68682: LD_VAR 0 1
68686: PPUSH
68687: LD_VAR 0 2
68691: PPUSH
68692: CALL_OW 488
68696: NOT
68697: PUSH
68698: LD_VAR 0 3
68702: PPUSH
68703: LD_VAR 0 4
68707: PPUSH
68708: CALL_OW 488
68712: NOT
68713: OR
68714: IFFALSE 68727
// begin result := - 1 ;
68716: LD_ADDR_VAR 0 5
68720: PUSH
68721: LD_INT 1
68723: NEG
68724: ST_TO_ADDR
// exit ;
68725: GO 68962
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68727: LD_ADDR_VAR 0 12
68731: PUSH
68732: LD_VAR 0 1
68736: PPUSH
68737: LD_VAR 0 2
68741: PPUSH
68742: LD_VAR 0 3
68746: PPUSH
68747: LD_VAR 0 4
68751: PPUSH
68752: CALL 67812 0 4
68756: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68757: LD_ADDR_VAR 0 11
68761: PUSH
68762: LD_VAR 0 1
68766: PPUSH
68767: LD_VAR 0 2
68771: PPUSH
68772: LD_VAR 0 12
68776: PUSH
68777: LD_INT 1
68779: ARRAY
68780: PPUSH
68781: LD_VAR 0 12
68785: PUSH
68786: LD_INT 2
68788: ARRAY
68789: PPUSH
68790: CALL_OW 298
68794: ST_TO_ADDR
// distance := 9999 ;
68795: LD_ADDR_VAR 0 10
68799: PUSH
68800: LD_INT 9999
68802: ST_TO_ADDR
// for i := 0 to 5 do
68803: LD_ADDR_VAR 0 6
68807: PUSH
68808: DOUBLE
68809: LD_INT 0
68811: DEC
68812: ST_TO_ADDR
68813: LD_INT 5
68815: PUSH
68816: FOR_TO
68817: IFFALSE 68960
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68819: LD_ADDR_VAR 0 7
68823: PUSH
68824: LD_VAR 0 1
68828: PPUSH
68829: LD_VAR 0 6
68833: PPUSH
68834: LD_VAR 0 11
68838: PPUSH
68839: CALL_OW 272
68843: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68844: LD_ADDR_VAR 0 8
68848: PUSH
68849: LD_VAR 0 2
68853: PPUSH
68854: LD_VAR 0 6
68858: PPUSH
68859: LD_VAR 0 11
68863: PPUSH
68864: CALL_OW 273
68868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68869: LD_VAR 0 7
68873: PPUSH
68874: LD_VAR 0 8
68878: PPUSH
68879: CALL_OW 488
68883: NOT
68884: IFFALSE 68888
// continue ;
68886: GO 68816
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68888: LD_ADDR_VAR 0 9
68892: PUSH
68893: LD_VAR 0 12
68897: PUSH
68898: LD_INT 1
68900: ARRAY
68901: PPUSH
68902: LD_VAR 0 12
68906: PUSH
68907: LD_INT 2
68909: ARRAY
68910: PPUSH
68911: LD_VAR 0 7
68915: PPUSH
68916: LD_VAR 0 8
68920: PPUSH
68921: CALL_OW 298
68925: ST_TO_ADDR
// if tmp < distance then
68926: LD_VAR 0 9
68930: PUSH
68931: LD_VAR 0 10
68935: LESS
68936: IFFALSE 68958
// begin result := i ;
68938: LD_ADDR_VAR 0 5
68942: PUSH
68943: LD_VAR 0 6
68947: ST_TO_ADDR
// distance := tmp ;
68948: LD_ADDR_VAR 0 10
68952: PUSH
68953: LD_VAR 0 9
68957: ST_TO_ADDR
// end ; end ;
68958: GO 68816
68960: POP
68961: POP
// end ;
68962: LD_VAR 0 5
68966: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68967: LD_INT 0
68969: PPUSH
68970: PPUSH
// if not driver or not IsInUnit ( driver ) then
68971: LD_VAR 0 1
68975: NOT
68976: PUSH
68977: LD_VAR 0 1
68981: PPUSH
68982: CALL_OW 310
68986: NOT
68987: OR
68988: IFFALSE 68992
// exit ;
68990: GO 69082
// vehicle := IsInUnit ( driver ) ;
68992: LD_ADDR_VAR 0 3
68996: PUSH
68997: LD_VAR 0 1
69001: PPUSH
69002: CALL_OW 310
69006: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69007: LD_VAR 0 1
69011: PPUSH
69012: LD_STRING \
69014: PUSH
69015: LD_INT 0
69017: PUSH
69018: LD_INT 0
69020: PUSH
69021: LD_INT 0
69023: PUSH
69024: LD_INT 0
69026: PUSH
69027: LD_INT 0
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: PUSH
69042: LD_STRING E
69044: PUSH
69045: LD_INT 0
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: LD_VAR 0 3
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: LD_INT 0
69061: PUSH
69062: LD_INT 0
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PPUSH
69078: CALL_OW 446
// end ;
69082: LD_VAR 0 2
69086: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69087: LD_INT 0
69089: PPUSH
69090: PPUSH
// if not driver or not IsInUnit ( driver ) then
69091: LD_VAR 0 1
69095: NOT
69096: PUSH
69097: LD_VAR 0 1
69101: PPUSH
69102: CALL_OW 310
69106: NOT
69107: OR
69108: IFFALSE 69112
// exit ;
69110: GO 69202
// vehicle := IsInUnit ( driver ) ;
69112: LD_ADDR_VAR 0 3
69116: PUSH
69117: LD_VAR 0 1
69121: PPUSH
69122: CALL_OW 310
69126: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69127: LD_VAR 0 1
69131: PPUSH
69132: LD_STRING \
69134: PUSH
69135: LD_INT 0
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: LD_INT 0
69146: PUSH
69147: LD_INT 0
69149: PUSH
69150: LD_INT 0
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: PUSH
69162: LD_STRING E
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: LD_VAR 0 3
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PPUSH
69198: CALL_OW 447
// end ;
69202: LD_VAR 0 2
69206: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69207: LD_INT 0
69209: PPUSH
69210: PPUSH
69211: PPUSH
// tmp := [ ] ;
69212: LD_ADDR_VAR 0 5
69216: PUSH
69217: EMPTY
69218: ST_TO_ADDR
// for i in units do
69219: LD_ADDR_VAR 0 4
69223: PUSH
69224: LD_VAR 0 1
69228: PUSH
69229: FOR_IN
69230: IFFALSE 69268
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69232: LD_ADDR_VAR 0 5
69236: PUSH
69237: LD_VAR 0 5
69241: PPUSH
69242: LD_VAR 0 5
69246: PUSH
69247: LD_INT 1
69249: PLUS
69250: PPUSH
69251: LD_VAR 0 4
69255: PPUSH
69256: CALL_OW 256
69260: PPUSH
69261: CALL_OW 2
69265: ST_TO_ADDR
69266: GO 69229
69268: POP
69269: POP
// if not tmp then
69270: LD_VAR 0 5
69274: NOT
69275: IFFALSE 69279
// exit ;
69277: GO 69327
// if asc then
69279: LD_VAR 0 2
69283: IFFALSE 69307
// result := SortListByListAsc ( units , tmp ) else
69285: LD_ADDR_VAR 0 3
69289: PUSH
69290: LD_VAR 0 1
69294: PPUSH
69295: LD_VAR 0 5
69299: PPUSH
69300: CALL_OW 76
69304: ST_TO_ADDR
69305: GO 69327
// result := SortListByListDesc ( units , tmp ) ;
69307: LD_ADDR_VAR 0 3
69311: PUSH
69312: LD_VAR 0 1
69316: PPUSH
69317: LD_VAR 0 5
69321: PPUSH
69322: CALL_OW 77
69326: ST_TO_ADDR
// end ;
69327: LD_VAR 0 3
69331: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69332: LD_INT 0
69334: PPUSH
69335: PPUSH
// task := GetTaskList ( mech ) ;
69336: LD_ADDR_VAR 0 4
69340: PUSH
69341: LD_VAR 0 1
69345: PPUSH
69346: CALL_OW 437
69350: ST_TO_ADDR
// if not task then
69351: LD_VAR 0 4
69355: NOT
69356: IFFALSE 69360
// exit ;
69358: GO 69402
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69360: LD_ADDR_VAR 0 3
69364: PUSH
69365: LD_VAR 0 4
69369: PUSH
69370: LD_INT 1
69372: ARRAY
69373: PUSH
69374: LD_INT 1
69376: ARRAY
69377: PUSH
69378: LD_STRING r
69380: EQUAL
69381: PUSH
69382: LD_VAR 0 4
69386: PUSH
69387: LD_INT 1
69389: ARRAY
69390: PUSH
69391: LD_INT 4
69393: ARRAY
69394: PUSH
69395: LD_VAR 0 2
69399: EQUAL
69400: AND
69401: ST_TO_ADDR
// end ;
69402: LD_VAR 0 3
69406: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69407: LD_INT 0
69409: PPUSH
// SetDir ( unit , d ) ;
69410: LD_VAR 0 1
69414: PPUSH
69415: LD_VAR 0 4
69419: PPUSH
69420: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
69424: LD_ADDR_VAR 0 6
69428: PUSH
69429: LD_VAR 0 1
69433: PPUSH
69434: LD_VAR 0 2
69438: PPUSH
69439: LD_VAR 0 3
69443: PPUSH
69444: LD_VAR 0 5
69448: PPUSH
69449: CALL_OW 48
69453: ST_TO_ADDR
// end ;
69454: LD_VAR 0 6
69458: RET
// export function ToNaturalNumber ( number ) ; begin
69459: LD_INT 0
69461: PPUSH
// result := number div 1 ;
69462: LD_ADDR_VAR 0 2
69466: PUSH
69467: LD_VAR 0 1
69471: PUSH
69472: LD_INT 1
69474: DIV
69475: ST_TO_ADDR
// if number < 0 then
69476: LD_VAR 0 1
69480: PUSH
69481: LD_INT 0
69483: LESS
69484: IFFALSE 69494
// result := 0 ;
69486: LD_ADDR_VAR 0 2
69490: PUSH
69491: LD_INT 0
69493: ST_TO_ADDR
// end ;
69494: LD_VAR 0 2
69498: RET
// export function SortByClass ( units , class ) ; var un ; begin
69499: LD_INT 0
69501: PPUSH
69502: PPUSH
// if not units or not class then
69503: LD_VAR 0 1
69507: NOT
69508: PUSH
69509: LD_VAR 0 2
69513: NOT
69514: OR
69515: IFFALSE 69519
// exit ;
69517: GO 69614
// result := [ ] ;
69519: LD_ADDR_VAR 0 3
69523: PUSH
69524: EMPTY
69525: ST_TO_ADDR
// for un in units do
69526: LD_ADDR_VAR 0 4
69530: PUSH
69531: LD_VAR 0 1
69535: PUSH
69536: FOR_IN
69537: IFFALSE 69612
// if GetClass ( un ) = class then
69539: LD_VAR 0 4
69543: PPUSH
69544: CALL_OW 257
69548: PUSH
69549: LD_VAR 0 2
69553: EQUAL
69554: IFFALSE 69581
// result := Insert ( result , 1 , un ) else
69556: LD_ADDR_VAR 0 3
69560: PUSH
69561: LD_VAR 0 3
69565: PPUSH
69566: LD_INT 1
69568: PPUSH
69569: LD_VAR 0 4
69573: PPUSH
69574: CALL_OW 2
69578: ST_TO_ADDR
69579: GO 69610
// result := Replace ( result , result + 1 , un ) ;
69581: LD_ADDR_VAR 0 3
69585: PUSH
69586: LD_VAR 0 3
69590: PPUSH
69591: LD_VAR 0 3
69595: PUSH
69596: LD_INT 1
69598: PLUS
69599: PPUSH
69600: LD_VAR 0 4
69604: PPUSH
69605: CALL_OW 1
69609: ST_TO_ADDR
69610: GO 69536
69612: POP
69613: POP
// end ;
69614: LD_VAR 0 3
69618: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69619: LD_INT 0
69621: PPUSH
69622: PPUSH
69623: PPUSH
69624: PPUSH
69625: PPUSH
69626: PPUSH
69627: PPUSH
// result := [ ] ;
69628: LD_ADDR_VAR 0 4
69632: PUSH
69633: EMPTY
69634: ST_TO_ADDR
// if x - r < 0 then
69635: LD_VAR 0 1
69639: PUSH
69640: LD_VAR 0 3
69644: MINUS
69645: PUSH
69646: LD_INT 0
69648: LESS
69649: IFFALSE 69661
// min_x := 0 else
69651: LD_ADDR_VAR 0 8
69655: PUSH
69656: LD_INT 0
69658: ST_TO_ADDR
69659: GO 69677
// min_x := x - r ;
69661: LD_ADDR_VAR 0 8
69665: PUSH
69666: LD_VAR 0 1
69670: PUSH
69671: LD_VAR 0 3
69675: MINUS
69676: ST_TO_ADDR
// if y - r < 0 then
69677: LD_VAR 0 2
69681: PUSH
69682: LD_VAR 0 3
69686: MINUS
69687: PUSH
69688: LD_INT 0
69690: LESS
69691: IFFALSE 69703
// min_y := 0 else
69693: LD_ADDR_VAR 0 7
69697: PUSH
69698: LD_INT 0
69700: ST_TO_ADDR
69701: GO 69719
// min_y := y - r ;
69703: LD_ADDR_VAR 0 7
69707: PUSH
69708: LD_VAR 0 2
69712: PUSH
69713: LD_VAR 0 3
69717: MINUS
69718: ST_TO_ADDR
// max_x := x + r ;
69719: LD_ADDR_VAR 0 9
69723: PUSH
69724: LD_VAR 0 1
69728: PUSH
69729: LD_VAR 0 3
69733: PLUS
69734: ST_TO_ADDR
// max_y := y + r ;
69735: LD_ADDR_VAR 0 10
69739: PUSH
69740: LD_VAR 0 2
69744: PUSH
69745: LD_VAR 0 3
69749: PLUS
69750: ST_TO_ADDR
// for _x = min_x to max_x do
69751: LD_ADDR_VAR 0 5
69755: PUSH
69756: DOUBLE
69757: LD_VAR 0 8
69761: DEC
69762: ST_TO_ADDR
69763: LD_VAR 0 9
69767: PUSH
69768: FOR_TO
69769: IFFALSE 69870
// for _y = min_y to max_y do
69771: LD_ADDR_VAR 0 6
69775: PUSH
69776: DOUBLE
69777: LD_VAR 0 7
69781: DEC
69782: ST_TO_ADDR
69783: LD_VAR 0 10
69787: PUSH
69788: FOR_TO
69789: IFFALSE 69866
// begin if not ValidHex ( _x , _y ) then
69791: LD_VAR 0 5
69795: PPUSH
69796: LD_VAR 0 6
69800: PPUSH
69801: CALL_OW 488
69805: NOT
69806: IFFALSE 69810
// continue ;
69808: GO 69788
// if GetResourceTypeXY ( _x , _y ) then
69810: LD_VAR 0 5
69814: PPUSH
69815: LD_VAR 0 6
69819: PPUSH
69820: CALL_OW 283
69824: IFFALSE 69864
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69826: LD_ADDR_VAR 0 4
69830: PUSH
69831: LD_VAR 0 4
69835: PPUSH
69836: LD_VAR 0 4
69840: PUSH
69841: LD_INT 1
69843: PLUS
69844: PPUSH
69845: LD_VAR 0 5
69849: PUSH
69850: LD_VAR 0 6
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PPUSH
69859: CALL_OW 1
69863: ST_TO_ADDR
// end ;
69864: GO 69788
69866: POP
69867: POP
69868: GO 69768
69870: POP
69871: POP
// end ;
69872: LD_VAR 0 4
69876: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69877: LD_INT 0
69879: PPUSH
69880: PPUSH
69881: PPUSH
69882: PPUSH
69883: PPUSH
69884: PPUSH
69885: PPUSH
69886: PPUSH
// if not units then
69887: LD_VAR 0 1
69891: NOT
69892: IFFALSE 69896
// exit ;
69894: GO 70424
// result := UnitFilter ( units , [ f_ok ] ) ;
69896: LD_ADDR_VAR 0 3
69900: PUSH
69901: LD_VAR 0 1
69905: PPUSH
69906: LD_INT 50
69908: PUSH
69909: EMPTY
69910: LIST
69911: PPUSH
69912: CALL_OW 72
69916: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69917: LD_ADDR_VAR 0 8
69921: PUSH
69922: LD_VAR 0 1
69926: PUSH
69927: LD_INT 1
69929: ARRAY
69930: PPUSH
69931: CALL_OW 255
69935: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69936: LD_ADDR_VAR 0 10
69940: PUSH
69941: LD_INT 29
69943: PUSH
69944: LD_INT 91
69946: PUSH
69947: LD_INT 49
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: LIST
69954: ST_TO_ADDR
// if not result then
69955: LD_VAR 0 3
69959: NOT
69960: IFFALSE 69964
// exit ;
69962: GO 70424
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69964: LD_ADDR_VAR 0 5
69968: PUSH
69969: LD_INT 81
69971: PUSH
69972: LD_VAR 0 8
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PPUSH
69981: CALL_OW 69
69985: ST_TO_ADDR
// for i in result do
69986: LD_ADDR_VAR 0 4
69990: PUSH
69991: LD_VAR 0 3
69995: PUSH
69996: FOR_IN
69997: IFFALSE 70422
// begin tag := GetTag ( i ) + 1 ;
69999: LD_ADDR_VAR 0 9
70003: PUSH
70004: LD_VAR 0 4
70008: PPUSH
70009: CALL_OW 110
70013: PUSH
70014: LD_INT 1
70016: PLUS
70017: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
70018: LD_ADDR_VAR 0 7
70022: PUSH
70023: LD_VAR 0 4
70027: PPUSH
70028: CALL_OW 250
70032: PPUSH
70033: LD_VAR 0 4
70037: PPUSH
70038: CALL_OW 251
70042: PPUSH
70043: LD_INT 4
70045: PPUSH
70046: CALL 69619 0 3
70050: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
70051: LD_VAR 0 4
70055: PPUSH
70056: CALL_OW 247
70060: PUSH
70061: LD_INT 2
70063: EQUAL
70064: PUSH
70065: LD_VAR 0 7
70069: PUSH
70070: LD_INT 2
70072: GREATER
70073: AND
70074: PUSH
70075: LD_VAR 0 4
70079: PPUSH
70080: CALL_OW 264
70084: PUSH
70085: LD_VAR 0 10
70089: IN
70090: NOT
70091: AND
70092: IFFALSE 70131
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70094: LD_VAR 0 4
70098: PPUSH
70099: LD_VAR 0 7
70103: PUSH
70104: LD_INT 1
70106: ARRAY
70107: PUSH
70108: LD_INT 1
70110: ARRAY
70111: PPUSH
70112: LD_VAR 0 7
70116: PUSH
70117: LD_INT 1
70119: ARRAY
70120: PUSH
70121: LD_INT 2
70123: ARRAY
70124: PPUSH
70125: CALL_OW 116
70129: GO 70420
// if path > tag then
70131: LD_VAR 0 2
70135: PUSH
70136: LD_VAR 0 9
70140: GREATER
70141: IFFALSE 70349
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70143: LD_ADDR_VAR 0 6
70147: PUSH
70148: LD_VAR 0 5
70152: PPUSH
70153: LD_INT 91
70155: PUSH
70156: LD_VAR 0 4
70160: PUSH
70161: LD_INT 8
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: LIST
70168: PPUSH
70169: CALL_OW 72
70173: ST_TO_ADDR
// if nearEnemy then
70174: LD_VAR 0 6
70178: IFFALSE 70247
// begin if GetWeapon ( i ) = ru_time_lapser then
70180: LD_VAR 0 4
70184: PPUSH
70185: CALL_OW 264
70189: PUSH
70190: LD_INT 49
70192: EQUAL
70193: IFFALSE 70221
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70195: LD_VAR 0 4
70199: PPUSH
70200: LD_VAR 0 6
70204: PPUSH
70205: LD_VAR 0 4
70209: PPUSH
70210: CALL_OW 74
70214: PPUSH
70215: CALL_OW 112
70219: GO 70245
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70221: LD_VAR 0 4
70225: PPUSH
70226: LD_VAR 0 6
70230: PPUSH
70231: LD_VAR 0 4
70235: PPUSH
70236: CALL_OW 74
70240: PPUSH
70241: CALL 71495 0 2
// end else
70245: GO 70347
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70247: LD_VAR 0 4
70251: PPUSH
70252: LD_VAR 0 2
70256: PUSH
70257: LD_VAR 0 9
70261: ARRAY
70262: PUSH
70263: LD_INT 1
70265: ARRAY
70266: PPUSH
70267: LD_VAR 0 2
70271: PUSH
70272: LD_VAR 0 9
70276: ARRAY
70277: PUSH
70278: LD_INT 2
70280: ARRAY
70281: PPUSH
70282: CALL_OW 297
70286: PUSH
70287: LD_INT 6
70289: GREATER
70290: IFFALSE 70333
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70292: LD_VAR 0 4
70296: PPUSH
70297: LD_VAR 0 2
70301: PUSH
70302: LD_VAR 0 9
70306: ARRAY
70307: PUSH
70308: LD_INT 1
70310: ARRAY
70311: PPUSH
70312: LD_VAR 0 2
70316: PUSH
70317: LD_VAR 0 9
70321: ARRAY
70322: PUSH
70323: LD_INT 2
70325: ARRAY
70326: PPUSH
70327: CALL_OW 114
70331: GO 70347
// SetTag ( i , tag ) ;
70333: LD_VAR 0 4
70337: PPUSH
70338: LD_VAR 0 9
70342: PPUSH
70343: CALL_OW 109
// end else
70347: GO 70420
// if enemy then
70349: LD_VAR 0 5
70353: IFFALSE 70420
// begin if GetWeapon ( i ) = ru_time_lapser then
70355: LD_VAR 0 4
70359: PPUSH
70360: CALL_OW 264
70364: PUSH
70365: LD_INT 49
70367: EQUAL
70368: IFFALSE 70396
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70370: LD_VAR 0 4
70374: PPUSH
70375: LD_VAR 0 5
70379: PPUSH
70380: LD_VAR 0 4
70384: PPUSH
70385: CALL_OW 74
70389: PPUSH
70390: CALL_OW 112
70394: GO 70420
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70396: LD_VAR 0 4
70400: PPUSH
70401: LD_VAR 0 5
70405: PPUSH
70406: LD_VAR 0 4
70410: PPUSH
70411: CALL_OW 74
70415: PPUSH
70416: CALL 71495 0 2
// end ; end ;
70420: GO 69996
70422: POP
70423: POP
// end ;
70424: LD_VAR 0 3
70428: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70429: LD_INT 0
70431: PPUSH
70432: PPUSH
70433: PPUSH
// if not unit or IsInUnit ( unit ) then
70434: LD_VAR 0 1
70438: NOT
70439: PUSH
70440: LD_VAR 0 1
70444: PPUSH
70445: CALL_OW 310
70449: OR
70450: IFFALSE 70454
// exit ;
70452: GO 70545
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70454: LD_ADDR_VAR 0 4
70458: PUSH
70459: LD_VAR 0 1
70463: PPUSH
70464: CALL_OW 250
70468: PPUSH
70469: LD_VAR 0 2
70473: PPUSH
70474: LD_INT 1
70476: PPUSH
70477: CALL_OW 272
70481: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70482: LD_ADDR_VAR 0 5
70486: PUSH
70487: LD_VAR 0 1
70491: PPUSH
70492: CALL_OW 251
70496: PPUSH
70497: LD_VAR 0 2
70501: PPUSH
70502: LD_INT 1
70504: PPUSH
70505: CALL_OW 273
70509: ST_TO_ADDR
// if ValidHex ( x , y ) then
70510: LD_VAR 0 4
70514: PPUSH
70515: LD_VAR 0 5
70519: PPUSH
70520: CALL_OW 488
70524: IFFALSE 70545
// ComTurnXY ( unit , x , y ) ;
70526: LD_VAR 0 1
70530: PPUSH
70531: LD_VAR 0 4
70535: PPUSH
70536: LD_VAR 0 5
70540: PPUSH
70541: CALL_OW 118
// end ;
70545: LD_VAR 0 3
70549: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70550: LD_INT 0
70552: PPUSH
70553: PPUSH
// result := false ;
70554: LD_ADDR_VAR 0 3
70558: PUSH
70559: LD_INT 0
70561: ST_TO_ADDR
// if not units then
70562: LD_VAR 0 2
70566: NOT
70567: IFFALSE 70571
// exit ;
70569: GO 70616
// for i in units do
70571: LD_ADDR_VAR 0 4
70575: PUSH
70576: LD_VAR 0 2
70580: PUSH
70581: FOR_IN
70582: IFFALSE 70614
// if See ( side , i ) then
70584: LD_VAR 0 1
70588: PPUSH
70589: LD_VAR 0 4
70593: PPUSH
70594: CALL_OW 292
70598: IFFALSE 70612
// begin result := true ;
70600: LD_ADDR_VAR 0 3
70604: PUSH
70605: LD_INT 1
70607: ST_TO_ADDR
// exit ;
70608: POP
70609: POP
70610: GO 70616
// end ;
70612: GO 70581
70614: POP
70615: POP
// end ;
70616: LD_VAR 0 3
70620: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70621: LD_INT 0
70623: PPUSH
70624: PPUSH
70625: PPUSH
70626: PPUSH
// if not unit or not points then
70627: LD_VAR 0 1
70631: NOT
70632: PUSH
70633: LD_VAR 0 2
70637: NOT
70638: OR
70639: IFFALSE 70643
// exit ;
70641: GO 70733
// dist := 99999 ;
70643: LD_ADDR_VAR 0 5
70647: PUSH
70648: LD_INT 99999
70650: ST_TO_ADDR
// for i in points do
70651: LD_ADDR_VAR 0 4
70655: PUSH
70656: LD_VAR 0 2
70660: PUSH
70661: FOR_IN
70662: IFFALSE 70731
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70664: LD_ADDR_VAR 0 6
70668: PUSH
70669: LD_VAR 0 1
70673: PPUSH
70674: LD_VAR 0 4
70678: PUSH
70679: LD_INT 1
70681: ARRAY
70682: PPUSH
70683: LD_VAR 0 4
70687: PUSH
70688: LD_INT 2
70690: ARRAY
70691: PPUSH
70692: CALL_OW 297
70696: ST_TO_ADDR
// if tmpDist < dist then
70697: LD_VAR 0 6
70701: PUSH
70702: LD_VAR 0 5
70706: LESS
70707: IFFALSE 70729
// begin result := i ;
70709: LD_ADDR_VAR 0 3
70713: PUSH
70714: LD_VAR 0 4
70718: ST_TO_ADDR
// dist := tmpDist ;
70719: LD_ADDR_VAR 0 5
70723: PUSH
70724: LD_VAR 0 6
70728: ST_TO_ADDR
// end ; end ;
70729: GO 70661
70731: POP
70732: POP
// end ;
70733: LD_VAR 0 3
70737: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70738: LD_INT 0
70740: PPUSH
// uc_side := side ;
70741: LD_ADDR_OWVAR 20
70745: PUSH
70746: LD_VAR 0 1
70750: ST_TO_ADDR
// uc_nation := 3 ;
70751: LD_ADDR_OWVAR 21
70755: PUSH
70756: LD_INT 3
70758: ST_TO_ADDR
// vc_chassis := 25 ;
70759: LD_ADDR_OWVAR 37
70763: PUSH
70764: LD_INT 25
70766: ST_TO_ADDR
// vc_engine := engine_siberite ;
70767: LD_ADDR_OWVAR 39
70771: PUSH
70772: LD_INT 3
70774: ST_TO_ADDR
// vc_control := control_computer ;
70775: LD_ADDR_OWVAR 38
70779: PUSH
70780: LD_INT 3
70782: ST_TO_ADDR
// vc_weapon := 59 ;
70783: LD_ADDR_OWVAR 40
70787: PUSH
70788: LD_INT 59
70790: ST_TO_ADDR
// result := CreateVehicle ;
70791: LD_ADDR_VAR 0 5
70795: PUSH
70796: CALL_OW 45
70800: ST_TO_ADDR
// SetDir ( result , d ) ;
70801: LD_VAR 0 5
70805: PPUSH
70806: LD_VAR 0 4
70810: PPUSH
70811: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70815: LD_VAR 0 5
70819: PPUSH
70820: LD_VAR 0 2
70824: PPUSH
70825: LD_VAR 0 3
70829: PPUSH
70830: LD_INT 0
70832: PPUSH
70833: CALL_OW 48
// end ;
70837: LD_VAR 0 5
70841: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70842: LD_INT 0
70844: PPUSH
70845: PPUSH
70846: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70847: LD_ADDR_VAR 0 2
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: LD_INT 0
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70870: LD_VAR 0 1
70874: NOT
70875: PUSH
70876: LD_VAR 0 1
70880: PPUSH
70881: CALL_OW 264
70885: PUSH
70886: LD_INT 12
70888: PUSH
70889: LD_INT 51
70891: PUSH
70892: LD_INT 32
70894: PUSH
70895: LD_INT 89
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: IN
70904: NOT
70905: OR
70906: IFFALSE 70910
// exit ;
70908: GO 71008
// for i := 1 to 3 do
70910: LD_ADDR_VAR 0 3
70914: PUSH
70915: DOUBLE
70916: LD_INT 1
70918: DEC
70919: ST_TO_ADDR
70920: LD_INT 3
70922: PUSH
70923: FOR_TO
70924: IFFALSE 71006
// begin tmp := GetCargo ( cargo , i ) ;
70926: LD_ADDR_VAR 0 4
70930: PUSH
70931: LD_VAR 0 1
70935: PPUSH
70936: LD_VAR 0 3
70940: PPUSH
70941: CALL_OW 289
70945: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70946: LD_ADDR_VAR 0 2
70950: PUSH
70951: LD_VAR 0 2
70955: PPUSH
70956: LD_VAR 0 3
70960: PPUSH
70961: LD_VAR 0 4
70965: PPUSH
70966: CALL_OW 1
70970: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70971: LD_ADDR_VAR 0 2
70975: PUSH
70976: LD_VAR 0 2
70980: PPUSH
70981: LD_INT 4
70983: PPUSH
70984: LD_VAR 0 2
70988: PUSH
70989: LD_INT 4
70991: ARRAY
70992: PUSH
70993: LD_VAR 0 4
70997: PLUS
70998: PPUSH
70999: CALL_OW 1
71003: ST_TO_ADDR
// end ;
71004: GO 70923
71006: POP
71007: POP
// end ;
71008: LD_VAR 0 2
71012: RET
// export function Length ( array ) ; begin
71013: LD_INT 0
71015: PPUSH
// result := array + 0 ;
71016: LD_ADDR_VAR 0 2
71020: PUSH
71021: LD_VAR 0 1
71025: PUSH
71026: LD_INT 0
71028: PLUS
71029: ST_TO_ADDR
// end ;
71030: LD_VAR 0 2
71034: RET
// export function PrepareArray ( array ) ; begin
71035: LD_INT 0
71037: PPUSH
// result := array diff 0 ;
71038: LD_ADDR_VAR 0 2
71042: PUSH
71043: LD_VAR 0 1
71047: PUSH
71048: LD_INT 0
71050: DIFF
71051: ST_TO_ADDR
// if not result [ 1 ] then
71052: LD_VAR 0 2
71056: PUSH
71057: LD_INT 1
71059: ARRAY
71060: NOT
71061: IFFALSE 71081
// result := Delete ( result , 1 ) ;
71063: LD_ADDR_VAR 0 2
71067: PUSH
71068: LD_VAR 0 2
71072: PPUSH
71073: LD_INT 1
71075: PPUSH
71076: CALL_OW 3
71080: ST_TO_ADDR
// end ;
71081: LD_VAR 0 2
71085: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71086: LD_INT 0
71088: PPUSH
71089: PPUSH
71090: PPUSH
71091: PPUSH
// sibRocketRange := 25 ;
71092: LD_ADDR_VAR 0 6
71096: PUSH
71097: LD_INT 25
71099: ST_TO_ADDR
// result := false ;
71100: LD_ADDR_VAR 0 4
71104: PUSH
71105: LD_INT 0
71107: ST_TO_ADDR
// for i := 0 to 5 do
71108: LD_ADDR_VAR 0 5
71112: PUSH
71113: DOUBLE
71114: LD_INT 0
71116: DEC
71117: ST_TO_ADDR
71118: LD_INT 5
71120: PUSH
71121: FOR_TO
71122: IFFALSE 71189
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71124: LD_VAR 0 1
71128: PPUSH
71129: LD_VAR 0 5
71133: PPUSH
71134: LD_VAR 0 6
71138: PPUSH
71139: CALL_OW 272
71143: PPUSH
71144: LD_VAR 0 2
71148: PPUSH
71149: LD_VAR 0 5
71153: PPUSH
71154: LD_VAR 0 6
71158: PPUSH
71159: CALL_OW 273
71163: PPUSH
71164: LD_VAR 0 3
71168: PPUSH
71169: CALL_OW 309
71173: IFFALSE 71187
// begin result := true ;
71175: LD_ADDR_VAR 0 4
71179: PUSH
71180: LD_INT 1
71182: ST_TO_ADDR
// exit ;
71183: POP
71184: POP
71185: GO 71191
// end ;
71187: GO 71121
71189: POP
71190: POP
// end ;
71191: LD_VAR 0 4
71195: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71196: LD_INT 0
71198: PPUSH
71199: PPUSH
71200: PPUSH
// if btype = b_depot then
71201: LD_VAR 0 2
71205: PUSH
71206: LD_INT 0
71208: EQUAL
71209: IFFALSE 71221
// begin result := true ;
71211: LD_ADDR_VAR 0 3
71215: PUSH
71216: LD_INT 1
71218: ST_TO_ADDR
// exit ;
71219: GO 71337
// end ; pom := GetBase ( depot ) ;
71221: LD_ADDR_VAR 0 4
71225: PUSH
71226: LD_VAR 0 1
71230: PPUSH
71231: CALL_OW 274
71235: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71236: LD_ADDR_VAR 0 5
71240: PUSH
71241: LD_VAR 0 2
71245: PPUSH
71246: LD_VAR 0 1
71250: PPUSH
71251: CALL_OW 248
71255: PPUSH
71256: CALL_OW 450
71260: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71261: LD_ADDR_VAR 0 3
71265: PUSH
71266: LD_VAR 0 4
71270: PPUSH
71271: LD_INT 1
71273: PPUSH
71274: CALL_OW 275
71278: PUSH
71279: LD_VAR 0 5
71283: PUSH
71284: LD_INT 1
71286: ARRAY
71287: GREATEREQUAL
71288: PUSH
71289: LD_VAR 0 4
71293: PPUSH
71294: LD_INT 2
71296: PPUSH
71297: CALL_OW 275
71301: PUSH
71302: LD_VAR 0 5
71306: PUSH
71307: LD_INT 2
71309: ARRAY
71310: GREATEREQUAL
71311: AND
71312: PUSH
71313: LD_VAR 0 4
71317: PPUSH
71318: LD_INT 3
71320: PPUSH
71321: CALL_OW 275
71325: PUSH
71326: LD_VAR 0 5
71330: PUSH
71331: LD_INT 3
71333: ARRAY
71334: GREATEREQUAL
71335: AND
71336: ST_TO_ADDR
// end ;
71337: LD_VAR 0 3
71341: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71342: LD_INT 0
71344: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71345: LD_VAR 0 1
71349: PPUSH
71350: LD_VAR 0 2
71354: PPUSH
71355: LD_INT 0
71357: PPUSH
71358: LD_INT 0
71360: PPUSH
71361: LD_INT 1
71363: PPUSH
71364: LD_INT 0
71366: PPUSH
71367: CALL_OW 587
// end ;
71371: LD_VAR 0 3
71375: RET
// export function CenterOnNow ( unit ) ; begin
71376: LD_INT 0
71378: PPUSH
// result := IsInUnit ( unit ) ;
71379: LD_ADDR_VAR 0 2
71383: PUSH
71384: LD_VAR 0 1
71388: PPUSH
71389: CALL_OW 310
71393: ST_TO_ADDR
// if not result then
71394: LD_VAR 0 2
71398: NOT
71399: IFFALSE 71411
// result := unit ;
71401: LD_ADDR_VAR 0 2
71405: PUSH
71406: LD_VAR 0 1
71410: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71411: LD_VAR 0 1
71415: PPUSH
71416: CALL_OW 87
// end ;
71420: LD_VAR 0 2
71424: RET
// export function ComMoveHex ( unit , hex ) ; begin
71425: LD_INT 0
71427: PPUSH
// if not hex then
71428: LD_VAR 0 2
71432: NOT
71433: IFFALSE 71437
// exit ;
71435: GO 71490
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71437: LD_VAR 0 2
71441: PUSH
71442: LD_INT 1
71444: ARRAY
71445: PPUSH
71446: LD_VAR 0 2
71450: PUSH
71451: LD_INT 2
71453: ARRAY
71454: PPUSH
71455: CALL_OW 428
71459: IFFALSE 71463
// exit ;
71461: GO 71490
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71463: LD_VAR 0 1
71467: PPUSH
71468: LD_VAR 0 2
71472: PUSH
71473: LD_INT 1
71475: ARRAY
71476: PPUSH
71477: LD_VAR 0 2
71481: PUSH
71482: LD_INT 2
71484: ARRAY
71485: PPUSH
71486: CALL_OW 111
// end ;
71490: LD_VAR 0 3
71494: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71495: LD_INT 0
71497: PPUSH
71498: PPUSH
71499: PPUSH
// if not unit or not enemy then
71500: LD_VAR 0 1
71504: NOT
71505: PUSH
71506: LD_VAR 0 2
71510: NOT
71511: OR
71512: IFFALSE 71516
// exit ;
71514: GO 71640
// x := GetX ( enemy ) ;
71516: LD_ADDR_VAR 0 4
71520: PUSH
71521: LD_VAR 0 2
71525: PPUSH
71526: CALL_OW 250
71530: ST_TO_ADDR
// y := GetY ( enemy ) ;
71531: LD_ADDR_VAR 0 5
71535: PUSH
71536: LD_VAR 0 2
71540: PPUSH
71541: CALL_OW 251
71545: ST_TO_ADDR
// if ValidHex ( x , y ) then
71546: LD_VAR 0 4
71550: PPUSH
71551: LD_VAR 0 5
71555: PPUSH
71556: CALL_OW 488
71560: IFFALSE 71640
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71562: LD_VAR 0 2
71566: PPUSH
71567: CALL_OW 247
71571: PUSH
71572: LD_INT 3
71574: PUSH
71575: LD_INT 2
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: IN
71582: PUSH
71583: LD_VAR 0 1
71587: PPUSH
71588: CALL_OW 255
71592: PPUSH
71593: LD_VAR 0 2
71597: PPUSH
71598: CALL_OW 292
71602: OR
71603: IFFALSE 71621
// ComAttackUnit ( unit , enemy ) else
71605: LD_VAR 0 1
71609: PPUSH
71610: LD_VAR 0 2
71614: PPUSH
71615: CALL_OW 115
71619: GO 71640
// ComAgressiveMove ( unit , x , y ) ;
71621: LD_VAR 0 1
71625: PPUSH
71626: LD_VAR 0 4
71630: PPUSH
71631: LD_VAR 0 5
71635: PPUSH
71636: CALL_OW 114
// end ;
71640: LD_VAR 0 3
71644: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71645: LD_INT 0
71647: PPUSH
71648: PPUSH
71649: PPUSH
// list := AreaToList ( area , 0 ) ;
71650: LD_ADDR_VAR 0 5
71654: PUSH
71655: LD_VAR 0 1
71659: PPUSH
71660: LD_INT 0
71662: PPUSH
71663: CALL_OW 517
71667: ST_TO_ADDR
// if not list then
71668: LD_VAR 0 5
71672: NOT
71673: IFFALSE 71677
// exit ;
71675: GO 71807
// if all then
71677: LD_VAR 0 2
71681: IFFALSE 71769
// begin for i := 1 to list [ 1 ] do
71683: LD_ADDR_VAR 0 4
71687: PUSH
71688: DOUBLE
71689: LD_INT 1
71691: DEC
71692: ST_TO_ADDR
71693: LD_VAR 0 5
71697: PUSH
71698: LD_INT 1
71700: ARRAY
71701: PUSH
71702: FOR_TO
71703: IFFALSE 71765
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71705: LD_ADDR_VAR 0 3
71709: PUSH
71710: LD_VAR 0 3
71714: PPUSH
71715: LD_VAR 0 3
71719: PUSH
71720: LD_INT 1
71722: PLUS
71723: PPUSH
71724: LD_VAR 0 5
71728: PUSH
71729: LD_INT 1
71731: ARRAY
71732: PUSH
71733: LD_VAR 0 4
71737: ARRAY
71738: PUSH
71739: LD_VAR 0 5
71743: PUSH
71744: LD_INT 2
71746: ARRAY
71747: PUSH
71748: LD_VAR 0 4
71752: ARRAY
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PPUSH
71758: CALL_OW 1
71762: ST_TO_ADDR
71763: GO 71702
71765: POP
71766: POP
// exit ;
71767: GO 71807
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71769: LD_ADDR_VAR 0 3
71773: PUSH
71774: LD_VAR 0 5
71778: PUSH
71779: LD_INT 1
71781: ARRAY
71782: PUSH
71783: LD_INT 1
71785: ARRAY
71786: PUSH
71787: LD_VAR 0 5
71791: PUSH
71792: LD_INT 2
71794: ARRAY
71795: PUSH
71796: LD_INT 1
71798: ARRAY
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: EMPTY
71805: LIST
71806: ST_TO_ADDR
// end ;
71807: LD_VAR 0 3
71811: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71812: LD_INT 0
71814: PPUSH
71815: PPUSH
// list := AreaToList ( area , 0 ) ;
71816: LD_ADDR_VAR 0 4
71820: PUSH
71821: LD_VAR 0 1
71825: PPUSH
71826: LD_INT 0
71828: PPUSH
71829: CALL_OW 517
71833: ST_TO_ADDR
// if not list then
71834: LD_VAR 0 4
71838: NOT
71839: IFFALSE 71843
// exit ;
71841: GO 71884
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71843: LD_ADDR_VAR 0 3
71847: PUSH
71848: LD_VAR 0 4
71852: PUSH
71853: LD_INT 1
71855: ARRAY
71856: PUSH
71857: LD_INT 1
71859: ARRAY
71860: PUSH
71861: LD_VAR 0 4
71865: PUSH
71866: LD_INT 2
71868: ARRAY
71869: PUSH
71870: LD_INT 1
71872: ARRAY
71873: PUSH
71874: LD_VAR 0 2
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: LIST
71883: ST_TO_ADDR
// end ;
71884: LD_VAR 0 3
71888: RET
// export function First ( array ) ; begin
71889: LD_INT 0
71891: PPUSH
// if not array then
71892: LD_VAR 0 1
71896: NOT
71897: IFFALSE 71901
// exit ;
71899: GO 71915
// result := array [ 1 ] ;
71901: LD_ADDR_VAR 0 2
71905: PUSH
71906: LD_VAR 0 1
71910: PUSH
71911: LD_INT 1
71913: ARRAY
71914: ST_TO_ADDR
// end ;
71915: LD_VAR 0 2
71919: RET
// export function Last ( array ) ; begin
71920: LD_INT 0
71922: PPUSH
// if not array then
71923: LD_VAR 0 1
71927: NOT
71928: IFFALSE 71932
// exit ;
71930: GO 71948
// result := array [ array ] ;
71932: LD_ADDR_VAR 0 2
71936: PUSH
71937: LD_VAR 0 1
71941: PUSH
71942: LD_VAR 0 1
71946: ARRAY
71947: ST_TO_ADDR
// end ;
71948: LD_VAR 0 2
71952: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71953: LD_INT 0
71955: PPUSH
71956: PPUSH
// result := [ ] ;
71957: LD_ADDR_VAR 0 5
71961: PUSH
71962: EMPTY
71963: ST_TO_ADDR
// if not array then
71964: LD_VAR 0 1
71968: NOT
71969: IFFALSE 71973
// exit ;
71971: GO 72085
// for i := 1 to array do
71973: LD_ADDR_VAR 0 6
71977: PUSH
71978: DOUBLE
71979: LD_INT 1
71981: DEC
71982: ST_TO_ADDR
71983: LD_VAR 0 1
71987: PUSH
71988: FOR_TO
71989: IFFALSE 72083
// if array [ i ] [ index ] = value then
71991: LD_VAR 0 1
71995: PUSH
71996: LD_VAR 0 6
72000: ARRAY
72001: PUSH
72002: LD_VAR 0 2
72006: ARRAY
72007: PUSH
72008: LD_VAR 0 3
72012: EQUAL
72013: IFFALSE 72081
// begin if indexColumn then
72015: LD_VAR 0 4
72019: IFFALSE 72055
// result := Join ( result , array [ i ] [ indexColumn ] ) else
72021: LD_ADDR_VAR 0 5
72025: PUSH
72026: LD_VAR 0 5
72030: PPUSH
72031: LD_VAR 0 1
72035: PUSH
72036: LD_VAR 0 6
72040: ARRAY
72041: PUSH
72042: LD_VAR 0 4
72046: ARRAY
72047: PPUSH
72048: CALL 67267 0 2
72052: ST_TO_ADDR
72053: GO 72081
// result := Join ( result , array [ i ] ) ;
72055: LD_ADDR_VAR 0 5
72059: PUSH
72060: LD_VAR 0 5
72064: PPUSH
72065: LD_VAR 0 1
72069: PUSH
72070: LD_VAR 0 6
72074: ARRAY
72075: PPUSH
72076: CALL 67267 0 2
72080: ST_TO_ADDR
// end ;
72081: GO 71988
72083: POP
72084: POP
// end ;
72085: LD_VAR 0 5
72089: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72090: LD_INT 0
72092: PPUSH
// if not vehicles or not parkingPoint then
72093: LD_VAR 0 1
72097: NOT
72098: PUSH
72099: LD_VAR 0 2
72103: NOT
72104: OR
72105: IFFALSE 72109
// exit ;
72107: GO 72207
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72109: LD_ADDR_VAR 0 1
72113: PUSH
72114: LD_VAR 0 1
72118: PPUSH
72119: LD_INT 50
72121: PUSH
72122: EMPTY
72123: LIST
72124: PUSH
72125: LD_INT 3
72127: PUSH
72128: LD_INT 92
72130: PUSH
72131: LD_VAR 0 2
72135: PUSH
72136: LD_INT 1
72138: ARRAY
72139: PUSH
72140: LD_VAR 0 2
72144: PUSH
72145: LD_INT 2
72147: ARRAY
72148: PUSH
72149: LD_INT 8
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PPUSH
72166: CALL_OW 72
72170: ST_TO_ADDR
// if not vehicles then
72171: LD_VAR 0 1
72175: NOT
72176: IFFALSE 72180
// exit ;
72178: GO 72207
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72180: LD_VAR 0 1
72184: PPUSH
72185: LD_VAR 0 2
72189: PUSH
72190: LD_INT 1
72192: ARRAY
72193: PPUSH
72194: LD_VAR 0 2
72198: PUSH
72199: LD_INT 2
72201: ARRAY
72202: PPUSH
72203: CALL_OW 111
// end ;
72207: LD_VAR 0 3
72211: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72212: LD_INT 0
72214: PPUSH
72215: PPUSH
72216: PPUSH
// if not side or not area then
72217: LD_VAR 0 1
72221: NOT
72222: PUSH
72223: LD_VAR 0 2
72227: NOT
72228: OR
72229: IFFALSE 72233
// exit ;
72231: GO 72352
// tmp := AreaToList ( area , 0 ) ;
72233: LD_ADDR_VAR 0 5
72237: PUSH
72238: LD_VAR 0 2
72242: PPUSH
72243: LD_INT 0
72245: PPUSH
72246: CALL_OW 517
72250: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72251: LD_ADDR_VAR 0 4
72255: PUSH
72256: DOUBLE
72257: LD_INT 1
72259: DEC
72260: ST_TO_ADDR
72261: LD_VAR 0 5
72265: PUSH
72266: LD_INT 1
72268: ARRAY
72269: PUSH
72270: FOR_TO
72271: IFFALSE 72350
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72273: LD_VAR 0 5
72277: PUSH
72278: LD_INT 1
72280: ARRAY
72281: PUSH
72282: LD_VAR 0 4
72286: ARRAY
72287: PPUSH
72288: LD_VAR 0 5
72292: PUSH
72293: LD_INT 2
72295: ARRAY
72296: PUSH
72297: LD_VAR 0 4
72301: ARRAY
72302: PPUSH
72303: CALL_OW 351
72307: IFFALSE 72348
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72309: LD_VAR 0 5
72313: PUSH
72314: LD_INT 1
72316: ARRAY
72317: PUSH
72318: LD_VAR 0 4
72322: ARRAY
72323: PPUSH
72324: LD_VAR 0 5
72328: PUSH
72329: LD_INT 2
72331: ARRAY
72332: PUSH
72333: LD_VAR 0 4
72337: ARRAY
72338: PPUSH
72339: LD_VAR 0 1
72343: PPUSH
72344: CALL_OW 244
// end ;
72348: GO 72270
72350: POP
72351: POP
// end ; end_of_file end_of_file
72352: LD_VAR 0 3
72356: RET
// export globalGameSaveCounter ; every 0 0$1 do
72357: GO 72359
72359: DISABLE
// begin enable ;
72360: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
72361: LD_STRING updateTimer(
72363: PUSH
72364: LD_OWVAR 1
72368: STR
72369: PUSH
72370: LD_STRING );
72372: STR
72373: PPUSH
72374: CALL_OW 559
// end ;
72378: END
// every 0 0$1 do
72379: GO 72381
72381: DISABLE
// begin globalGameSaveCounter := 0 ;
72382: LD_ADDR_EXP 63
72386: PUSH
72387: LD_INT 0
72389: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
72390: LD_STRING setGameSaveCounter(0)
72392: PPUSH
72393: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
72397: LD_STRING initStreamRollete();
72399: PPUSH
72400: CALL_OW 559
// InitStreamMode ;
72404: CALL 73747 0 0
// DefineStreamItems ( false ) ;
72408: LD_INT 0
72410: PPUSH
72411: CALL 74211 0 1
// end ;
72415: END
// export function SOS_MapStart ( ) ; begin
72416: LD_INT 0
72418: PPUSH
// if streamModeActive then
72419: LD_EXP 64
72423: IFFALSE 72432
// DefineStreamItems ( true ) ;
72425: LD_INT 1
72427: PPUSH
72428: CALL 74211 0 1
// UpdateLuaVariables ( ) ;
72432: CALL 72449 0 0
// UpdateFactoryWaypoints ( ) ;
72436: CALL 87213 0 0
// UpdateWarehouseGatheringPoints ( ) ;
72440: CALL 87465 0 0
// end ;
72444: LD_VAR 0 1
72448: RET
// function UpdateLuaVariables ( ) ; begin
72449: LD_INT 0
72451: PPUSH
// if globalGameSaveCounter then
72452: LD_EXP 63
72456: IFFALSE 72490
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
72458: LD_ADDR_EXP 63
72462: PUSH
72463: LD_EXP 63
72467: PPUSH
72468: CALL 68628 0 1
72472: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72473: LD_STRING setGameSaveCounter(
72475: PUSH
72476: LD_EXP 63
72480: STR
72481: PUSH
72482: LD_STRING )
72484: STR
72485: PPUSH
72486: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
72490: LD_STRING setGameDifficulty(
72492: PUSH
72493: LD_OWVAR 67
72497: STR
72498: PUSH
72499: LD_STRING )
72501: STR
72502: PPUSH
72503: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
72507: LD_STRING displayDifficulty(
72509: PUSH
72510: LD_OWVAR 67
72514: STR
72515: PUSH
72516: LD_STRING )
72518: STR
72519: PPUSH
72520: CALL_OW 559
// end ;
72524: LD_VAR 0 1
72528: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72529: LD_INT 0
72531: PPUSH
// if p2 = stream_mode then
72532: LD_VAR 0 2
72536: PUSH
72537: LD_INT 100
72539: EQUAL
72540: IFFALSE 73543
// begin if not StreamModeActive then
72542: LD_EXP 64
72546: NOT
72547: IFFALSE 72557
// StreamModeActive := true ;
72549: LD_ADDR_EXP 64
72553: PUSH
72554: LD_INT 1
72556: ST_TO_ADDR
// if p3 = 0 then
72557: LD_VAR 0 3
72561: PUSH
72562: LD_INT 0
72564: EQUAL
72565: IFFALSE 72571
// InitStreamMode ;
72567: CALL 73747 0 0
// if p3 = 1 then
72571: LD_VAR 0 3
72575: PUSH
72576: LD_INT 1
72578: EQUAL
72579: IFFALSE 72589
// sRocket := true ;
72581: LD_ADDR_EXP 69
72585: PUSH
72586: LD_INT 1
72588: ST_TO_ADDR
// if p3 = 2 then
72589: LD_VAR 0 3
72593: PUSH
72594: LD_INT 2
72596: EQUAL
72597: IFFALSE 72607
// sSpeed := true ;
72599: LD_ADDR_EXP 68
72603: PUSH
72604: LD_INT 1
72606: ST_TO_ADDR
// if p3 = 3 then
72607: LD_VAR 0 3
72611: PUSH
72612: LD_INT 3
72614: EQUAL
72615: IFFALSE 72625
// sEngine := true ;
72617: LD_ADDR_EXP 70
72621: PUSH
72622: LD_INT 1
72624: ST_TO_ADDR
// if p3 = 4 then
72625: LD_VAR 0 3
72629: PUSH
72630: LD_INT 4
72632: EQUAL
72633: IFFALSE 72643
// sSpec := true ;
72635: LD_ADDR_EXP 67
72639: PUSH
72640: LD_INT 1
72642: ST_TO_ADDR
// if p3 = 5 then
72643: LD_VAR 0 3
72647: PUSH
72648: LD_INT 5
72650: EQUAL
72651: IFFALSE 72661
// sLevel := true ;
72653: LD_ADDR_EXP 71
72657: PUSH
72658: LD_INT 1
72660: ST_TO_ADDR
// if p3 = 6 then
72661: LD_VAR 0 3
72665: PUSH
72666: LD_INT 6
72668: EQUAL
72669: IFFALSE 72679
// sArmoury := true ;
72671: LD_ADDR_EXP 72
72675: PUSH
72676: LD_INT 1
72678: ST_TO_ADDR
// if p3 = 7 then
72679: LD_VAR 0 3
72683: PUSH
72684: LD_INT 7
72686: EQUAL
72687: IFFALSE 72697
// sRadar := true ;
72689: LD_ADDR_EXP 73
72693: PUSH
72694: LD_INT 1
72696: ST_TO_ADDR
// if p3 = 8 then
72697: LD_VAR 0 3
72701: PUSH
72702: LD_INT 8
72704: EQUAL
72705: IFFALSE 72715
// sBunker := true ;
72707: LD_ADDR_EXP 74
72711: PUSH
72712: LD_INT 1
72714: ST_TO_ADDR
// if p3 = 9 then
72715: LD_VAR 0 3
72719: PUSH
72720: LD_INT 9
72722: EQUAL
72723: IFFALSE 72733
// sHack := true ;
72725: LD_ADDR_EXP 75
72729: PUSH
72730: LD_INT 1
72732: ST_TO_ADDR
// if p3 = 10 then
72733: LD_VAR 0 3
72737: PUSH
72738: LD_INT 10
72740: EQUAL
72741: IFFALSE 72751
// sFire := true ;
72743: LD_ADDR_EXP 76
72747: PUSH
72748: LD_INT 1
72750: ST_TO_ADDR
// if p3 = 11 then
72751: LD_VAR 0 3
72755: PUSH
72756: LD_INT 11
72758: EQUAL
72759: IFFALSE 72769
// sRefresh := true ;
72761: LD_ADDR_EXP 77
72765: PUSH
72766: LD_INT 1
72768: ST_TO_ADDR
// if p3 = 12 then
72769: LD_VAR 0 3
72773: PUSH
72774: LD_INT 12
72776: EQUAL
72777: IFFALSE 72787
// sExp := true ;
72779: LD_ADDR_EXP 78
72783: PUSH
72784: LD_INT 1
72786: ST_TO_ADDR
// if p3 = 13 then
72787: LD_VAR 0 3
72791: PUSH
72792: LD_INT 13
72794: EQUAL
72795: IFFALSE 72805
// sDepot := true ;
72797: LD_ADDR_EXP 79
72801: PUSH
72802: LD_INT 1
72804: ST_TO_ADDR
// if p3 = 14 then
72805: LD_VAR 0 3
72809: PUSH
72810: LD_INT 14
72812: EQUAL
72813: IFFALSE 72823
// sFlag := true ;
72815: LD_ADDR_EXP 80
72819: PUSH
72820: LD_INT 1
72822: ST_TO_ADDR
// if p3 = 15 then
72823: LD_VAR 0 3
72827: PUSH
72828: LD_INT 15
72830: EQUAL
72831: IFFALSE 72841
// sKamikadze := true ;
72833: LD_ADDR_EXP 88
72837: PUSH
72838: LD_INT 1
72840: ST_TO_ADDR
// if p3 = 16 then
72841: LD_VAR 0 3
72845: PUSH
72846: LD_INT 16
72848: EQUAL
72849: IFFALSE 72859
// sTroll := true ;
72851: LD_ADDR_EXP 89
72855: PUSH
72856: LD_INT 1
72858: ST_TO_ADDR
// if p3 = 17 then
72859: LD_VAR 0 3
72863: PUSH
72864: LD_INT 17
72866: EQUAL
72867: IFFALSE 72877
// sSlow := true ;
72869: LD_ADDR_EXP 90
72873: PUSH
72874: LD_INT 1
72876: ST_TO_ADDR
// if p3 = 18 then
72877: LD_VAR 0 3
72881: PUSH
72882: LD_INT 18
72884: EQUAL
72885: IFFALSE 72895
// sLack := true ;
72887: LD_ADDR_EXP 91
72891: PUSH
72892: LD_INT 1
72894: ST_TO_ADDR
// if p3 = 19 then
72895: LD_VAR 0 3
72899: PUSH
72900: LD_INT 19
72902: EQUAL
72903: IFFALSE 72913
// sTank := true ;
72905: LD_ADDR_EXP 93
72909: PUSH
72910: LD_INT 1
72912: ST_TO_ADDR
// if p3 = 20 then
72913: LD_VAR 0 3
72917: PUSH
72918: LD_INT 20
72920: EQUAL
72921: IFFALSE 72931
// sRemote := true ;
72923: LD_ADDR_EXP 94
72927: PUSH
72928: LD_INT 1
72930: ST_TO_ADDR
// if p3 = 21 then
72931: LD_VAR 0 3
72935: PUSH
72936: LD_INT 21
72938: EQUAL
72939: IFFALSE 72949
// sPowell := true ;
72941: LD_ADDR_EXP 95
72945: PUSH
72946: LD_INT 1
72948: ST_TO_ADDR
// if p3 = 22 then
72949: LD_VAR 0 3
72953: PUSH
72954: LD_INT 22
72956: EQUAL
72957: IFFALSE 72967
// sTeleport := true ;
72959: LD_ADDR_EXP 98
72963: PUSH
72964: LD_INT 1
72966: ST_TO_ADDR
// if p3 = 23 then
72967: LD_VAR 0 3
72971: PUSH
72972: LD_INT 23
72974: EQUAL
72975: IFFALSE 72985
// sOilTower := true ;
72977: LD_ADDR_EXP 100
72981: PUSH
72982: LD_INT 1
72984: ST_TO_ADDR
// if p3 = 24 then
72985: LD_VAR 0 3
72989: PUSH
72990: LD_INT 24
72992: EQUAL
72993: IFFALSE 73003
// sShovel := true ;
72995: LD_ADDR_EXP 101
72999: PUSH
73000: LD_INT 1
73002: ST_TO_ADDR
// if p3 = 25 then
73003: LD_VAR 0 3
73007: PUSH
73008: LD_INT 25
73010: EQUAL
73011: IFFALSE 73021
// sSheik := true ;
73013: LD_ADDR_EXP 102
73017: PUSH
73018: LD_INT 1
73020: ST_TO_ADDR
// if p3 = 26 then
73021: LD_VAR 0 3
73025: PUSH
73026: LD_INT 26
73028: EQUAL
73029: IFFALSE 73039
// sEarthquake := true ;
73031: LD_ADDR_EXP 104
73035: PUSH
73036: LD_INT 1
73038: ST_TO_ADDR
// if p3 = 27 then
73039: LD_VAR 0 3
73043: PUSH
73044: LD_INT 27
73046: EQUAL
73047: IFFALSE 73057
// sAI := true ;
73049: LD_ADDR_EXP 105
73053: PUSH
73054: LD_INT 1
73056: ST_TO_ADDR
// if p3 = 28 then
73057: LD_VAR 0 3
73061: PUSH
73062: LD_INT 28
73064: EQUAL
73065: IFFALSE 73075
// sCargo := true ;
73067: LD_ADDR_EXP 108
73071: PUSH
73072: LD_INT 1
73074: ST_TO_ADDR
// if p3 = 29 then
73075: LD_VAR 0 3
73079: PUSH
73080: LD_INT 29
73082: EQUAL
73083: IFFALSE 73093
// sDLaser := true ;
73085: LD_ADDR_EXP 109
73089: PUSH
73090: LD_INT 1
73092: ST_TO_ADDR
// if p3 = 30 then
73093: LD_VAR 0 3
73097: PUSH
73098: LD_INT 30
73100: EQUAL
73101: IFFALSE 73111
// sExchange := true ;
73103: LD_ADDR_EXP 110
73107: PUSH
73108: LD_INT 1
73110: ST_TO_ADDR
// if p3 = 31 then
73111: LD_VAR 0 3
73115: PUSH
73116: LD_INT 31
73118: EQUAL
73119: IFFALSE 73129
// sFac := true ;
73121: LD_ADDR_EXP 111
73125: PUSH
73126: LD_INT 1
73128: ST_TO_ADDR
// if p3 = 32 then
73129: LD_VAR 0 3
73133: PUSH
73134: LD_INT 32
73136: EQUAL
73137: IFFALSE 73147
// sPower := true ;
73139: LD_ADDR_EXP 112
73143: PUSH
73144: LD_INT 1
73146: ST_TO_ADDR
// if p3 = 33 then
73147: LD_VAR 0 3
73151: PUSH
73152: LD_INT 33
73154: EQUAL
73155: IFFALSE 73165
// sRandom := true ;
73157: LD_ADDR_EXP 113
73161: PUSH
73162: LD_INT 1
73164: ST_TO_ADDR
// if p3 = 34 then
73165: LD_VAR 0 3
73169: PUSH
73170: LD_INT 34
73172: EQUAL
73173: IFFALSE 73183
// sShield := true ;
73175: LD_ADDR_EXP 114
73179: PUSH
73180: LD_INT 1
73182: ST_TO_ADDR
// if p3 = 35 then
73183: LD_VAR 0 3
73187: PUSH
73188: LD_INT 35
73190: EQUAL
73191: IFFALSE 73201
// sTime := true ;
73193: LD_ADDR_EXP 115
73197: PUSH
73198: LD_INT 1
73200: ST_TO_ADDR
// if p3 = 36 then
73201: LD_VAR 0 3
73205: PUSH
73206: LD_INT 36
73208: EQUAL
73209: IFFALSE 73219
// sTools := true ;
73211: LD_ADDR_EXP 116
73215: PUSH
73216: LD_INT 1
73218: ST_TO_ADDR
// if p3 = 101 then
73219: LD_VAR 0 3
73223: PUSH
73224: LD_INT 101
73226: EQUAL
73227: IFFALSE 73237
// sSold := true ;
73229: LD_ADDR_EXP 81
73233: PUSH
73234: LD_INT 1
73236: ST_TO_ADDR
// if p3 = 102 then
73237: LD_VAR 0 3
73241: PUSH
73242: LD_INT 102
73244: EQUAL
73245: IFFALSE 73255
// sDiff := true ;
73247: LD_ADDR_EXP 82
73251: PUSH
73252: LD_INT 1
73254: ST_TO_ADDR
// if p3 = 103 then
73255: LD_VAR 0 3
73259: PUSH
73260: LD_INT 103
73262: EQUAL
73263: IFFALSE 73273
// sFog := true ;
73265: LD_ADDR_EXP 85
73269: PUSH
73270: LD_INT 1
73272: ST_TO_ADDR
// if p3 = 104 then
73273: LD_VAR 0 3
73277: PUSH
73278: LD_INT 104
73280: EQUAL
73281: IFFALSE 73291
// sReset := true ;
73283: LD_ADDR_EXP 86
73287: PUSH
73288: LD_INT 1
73290: ST_TO_ADDR
// if p3 = 105 then
73291: LD_VAR 0 3
73295: PUSH
73296: LD_INT 105
73298: EQUAL
73299: IFFALSE 73309
// sSun := true ;
73301: LD_ADDR_EXP 87
73305: PUSH
73306: LD_INT 1
73308: ST_TO_ADDR
// if p3 = 106 then
73309: LD_VAR 0 3
73313: PUSH
73314: LD_INT 106
73316: EQUAL
73317: IFFALSE 73327
// sTiger := true ;
73319: LD_ADDR_EXP 83
73323: PUSH
73324: LD_INT 1
73326: ST_TO_ADDR
// if p3 = 107 then
73327: LD_VAR 0 3
73331: PUSH
73332: LD_INT 107
73334: EQUAL
73335: IFFALSE 73345
// sBomb := true ;
73337: LD_ADDR_EXP 84
73341: PUSH
73342: LD_INT 1
73344: ST_TO_ADDR
// if p3 = 108 then
73345: LD_VAR 0 3
73349: PUSH
73350: LD_INT 108
73352: EQUAL
73353: IFFALSE 73363
// sWound := true ;
73355: LD_ADDR_EXP 92
73359: PUSH
73360: LD_INT 1
73362: ST_TO_ADDR
// if p3 = 109 then
73363: LD_VAR 0 3
73367: PUSH
73368: LD_INT 109
73370: EQUAL
73371: IFFALSE 73381
// sBetray := true ;
73373: LD_ADDR_EXP 96
73377: PUSH
73378: LD_INT 1
73380: ST_TO_ADDR
// if p3 = 110 then
73381: LD_VAR 0 3
73385: PUSH
73386: LD_INT 110
73388: EQUAL
73389: IFFALSE 73399
// sContamin := true ;
73391: LD_ADDR_EXP 97
73395: PUSH
73396: LD_INT 1
73398: ST_TO_ADDR
// if p3 = 111 then
73399: LD_VAR 0 3
73403: PUSH
73404: LD_INT 111
73406: EQUAL
73407: IFFALSE 73417
// sOil := true ;
73409: LD_ADDR_EXP 99
73413: PUSH
73414: LD_INT 1
73416: ST_TO_ADDR
// if p3 = 112 then
73417: LD_VAR 0 3
73421: PUSH
73422: LD_INT 112
73424: EQUAL
73425: IFFALSE 73435
// sStu := true ;
73427: LD_ADDR_EXP 103
73431: PUSH
73432: LD_INT 1
73434: ST_TO_ADDR
// if p3 = 113 then
73435: LD_VAR 0 3
73439: PUSH
73440: LD_INT 113
73442: EQUAL
73443: IFFALSE 73453
// sBazooka := true ;
73445: LD_ADDR_EXP 106
73449: PUSH
73450: LD_INT 1
73452: ST_TO_ADDR
// if p3 = 114 then
73453: LD_VAR 0 3
73457: PUSH
73458: LD_INT 114
73460: EQUAL
73461: IFFALSE 73471
// sMortar := true ;
73463: LD_ADDR_EXP 107
73467: PUSH
73468: LD_INT 1
73470: ST_TO_ADDR
// if p3 = 115 then
73471: LD_VAR 0 3
73475: PUSH
73476: LD_INT 115
73478: EQUAL
73479: IFFALSE 73489
// sRanger := true ;
73481: LD_ADDR_EXP 117
73485: PUSH
73486: LD_INT 1
73488: ST_TO_ADDR
// if p3 = 116 then
73489: LD_VAR 0 3
73493: PUSH
73494: LD_INT 116
73496: EQUAL
73497: IFFALSE 73507
// sComputer := true ;
73499: LD_ADDR_EXP 118
73503: PUSH
73504: LD_INT 1
73506: ST_TO_ADDR
// if p3 = 117 then
73507: LD_VAR 0 3
73511: PUSH
73512: LD_INT 117
73514: EQUAL
73515: IFFALSE 73525
// s30 := true ;
73517: LD_ADDR_EXP 119
73521: PUSH
73522: LD_INT 1
73524: ST_TO_ADDR
// if p3 = 118 then
73525: LD_VAR 0 3
73529: PUSH
73530: LD_INT 118
73532: EQUAL
73533: IFFALSE 73543
// s60 := true ;
73535: LD_ADDR_EXP 120
73539: PUSH
73540: LD_INT 1
73542: ST_TO_ADDR
// end ; if p2 = hack_mode then
73543: LD_VAR 0 2
73547: PUSH
73548: LD_INT 101
73550: EQUAL
73551: IFFALSE 73679
// begin case p3 of 1 :
73553: LD_VAR 0 3
73557: PUSH
73558: LD_INT 1
73560: DOUBLE
73561: EQUAL
73562: IFTRUE 73566
73564: GO 73573
73566: POP
// hHackUnlimitedResources ; 2 :
73567: CALL 85826 0 0
73571: GO 73679
73573: LD_INT 2
73575: DOUBLE
73576: EQUAL
73577: IFTRUE 73581
73579: GO 73588
73581: POP
// hHackSetLevel10 ; 3 :
73582: CALL 85959 0 0
73586: GO 73679
73588: LD_INT 3
73590: DOUBLE
73591: EQUAL
73592: IFTRUE 73596
73594: GO 73603
73596: POP
// hHackSetLevel10YourUnits ; 4 :
73597: CALL 86044 0 0
73601: GO 73679
73603: LD_INT 4
73605: DOUBLE
73606: EQUAL
73607: IFTRUE 73611
73609: GO 73618
73611: POP
// hHackInvincible ; 5 :
73612: CALL 86492 0 0
73616: GO 73679
73618: LD_INT 5
73620: DOUBLE
73621: EQUAL
73622: IFTRUE 73626
73624: GO 73633
73626: POP
// hHackInvisible ; 6 :
73627: CALL 86603 0 0
73631: GO 73679
73633: LD_INT 6
73635: DOUBLE
73636: EQUAL
73637: IFTRUE 73641
73639: GO 73648
73641: POP
// hHackChangeYourSide ; 7 :
73642: CALL 86660 0 0
73646: GO 73679
73648: LD_INT 7
73650: DOUBLE
73651: EQUAL
73652: IFTRUE 73656
73654: GO 73663
73656: POP
// hHackChangeUnitSide ; 8 :
73657: CALL 86702 0 0
73661: GO 73679
73663: LD_INT 8
73665: DOUBLE
73666: EQUAL
73667: IFTRUE 73671
73669: GO 73678
73671: POP
// hHackFog ; end ;
73672: CALL 86803 0 0
73676: GO 73679
73678: POP
// end ; if p2 = game_save_mode then
73679: LD_VAR 0 2
73683: PUSH
73684: LD_INT 102
73686: EQUAL
73687: IFFALSE 73742
// begin if p3 = 1 then
73689: LD_VAR 0 3
73693: PUSH
73694: LD_INT 1
73696: EQUAL
73697: IFFALSE 73709
// globalGameSaveCounter := p4 ;
73699: LD_ADDR_EXP 63
73703: PUSH
73704: LD_VAR 0 4
73708: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
73709: LD_VAR 0 3
73713: PUSH
73714: LD_INT 2
73716: EQUAL
73717: PUSH
73718: LD_EXP 63
73722: AND
73723: IFFALSE 73742
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73725: LD_STRING setGameSaveCounter(
73727: PUSH
73728: LD_EXP 63
73732: STR
73733: PUSH
73734: LD_STRING )
73736: STR
73737: PPUSH
73738: CALL_OW 559
// end ; end ;
73742: LD_VAR 0 7
73746: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
73747: LD_INT 0
73749: PPUSH
// streamModeActive := false ;
73750: LD_ADDR_EXP 64
73754: PUSH
73755: LD_INT 0
73757: ST_TO_ADDR
// normalCounter := 36 ;
73758: LD_ADDR_EXP 65
73762: PUSH
73763: LD_INT 36
73765: ST_TO_ADDR
// hardcoreCounter := 18 ;
73766: LD_ADDR_EXP 66
73770: PUSH
73771: LD_INT 18
73773: ST_TO_ADDR
// sRocket := false ;
73774: LD_ADDR_EXP 69
73778: PUSH
73779: LD_INT 0
73781: ST_TO_ADDR
// sSpeed := false ;
73782: LD_ADDR_EXP 68
73786: PUSH
73787: LD_INT 0
73789: ST_TO_ADDR
// sEngine := false ;
73790: LD_ADDR_EXP 70
73794: PUSH
73795: LD_INT 0
73797: ST_TO_ADDR
// sSpec := false ;
73798: LD_ADDR_EXP 67
73802: PUSH
73803: LD_INT 0
73805: ST_TO_ADDR
// sLevel := false ;
73806: LD_ADDR_EXP 71
73810: PUSH
73811: LD_INT 0
73813: ST_TO_ADDR
// sArmoury := false ;
73814: LD_ADDR_EXP 72
73818: PUSH
73819: LD_INT 0
73821: ST_TO_ADDR
// sRadar := false ;
73822: LD_ADDR_EXP 73
73826: PUSH
73827: LD_INT 0
73829: ST_TO_ADDR
// sBunker := false ;
73830: LD_ADDR_EXP 74
73834: PUSH
73835: LD_INT 0
73837: ST_TO_ADDR
// sHack := false ;
73838: LD_ADDR_EXP 75
73842: PUSH
73843: LD_INT 0
73845: ST_TO_ADDR
// sFire := false ;
73846: LD_ADDR_EXP 76
73850: PUSH
73851: LD_INT 0
73853: ST_TO_ADDR
// sRefresh := false ;
73854: LD_ADDR_EXP 77
73858: PUSH
73859: LD_INT 0
73861: ST_TO_ADDR
// sExp := false ;
73862: LD_ADDR_EXP 78
73866: PUSH
73867: LD_INT 0
73869: ST_TO_ADDR
// sDepot := false ;
73870: LD_ADDR_EXP 79
73874: PUSH
73875: LD_INT 0
73877: ST_TO_ADDR
// sFlag := false ;
73878: LD_ADDR_EXP 80
73882: PUSH
73883: LD_INT 0
73885: ST_TO_ADDR
// sKamikadze := false ;
73886: LD_ADDR_EXP 88
73890: PUSH
73891: LD_INT 0
73893: ST_TO_ADDR
// sTroll := false ;
73894: LD_ADDR_EXP 89
73898: PUSH
73899: LD_INT 0
73901: ST_TO_ADDR
// sSlow := false ;
73902: LD_ADDR_EXP 90
73906: PUSH
73907: LD_INT 0
73909: ST_TO_ADDR
// sLack := false ;
73910: LD_ADDR_EXP 91
73914: PUSH
73915: LD_INT 0
73917: ST_TO_ADDR
// sTank := false ;
73918: LD_ADDR_EXP 93
73922: PUSH
73923: LD_INT 0
73925: ST_TO_ADDR
// sRemote := false ;
73926: LD_ADDR_EXP 94
73930: PUSH
73931: LD_INT 0
73933: ST_TO_ADDR
// sPowell := false ;
73934: LD_ADDR_EXP 95
73938: PUSH
73939: LD_INT 0
73941: ST_TO_ADDR
// sTeleport := false ;
73942: LD_ADDR_EXP 98
73946: PUSH
73947: LD_INT 0
73949: ST_TO_ADDR
// sOilTower := false ;
73950: LD_ADDR_EXP 100
73954: PUSH
73955: LD_INT 0
73957: ST_TO_ADDR
// sShovel := false ;
73958: LD_ADDR_EXP 101
73962: PUSH
73963: LD_INT 0
73965: ST_TO_ADDR
// sSheik := false ;
73966: LD_ADDR_EXP 102
73970: PUSH
73971: LD_INT 0
73973: ST_TO_ADDR
// sEarthquake := false ;
73974: LD_ADDR_EXP 104
73978: PUSH
73979: LD_INT 0
73981: ST_TO_ADDR
// sAI := false ;
73982: LD_ADDR_EXP 105
73986: PUSH
73987: LD_INT 0
73989: ST_TO_ADDR
// sCargo := false ;
73990: LD_ADDR_EXP 108
73994: PUSH
73995: LD_INT 0
73997: ST_TO_ADDR
// sDLaser := false ;
73998: LD_ADDR_EXP 109
74002: PUSH
74003: LD_INT 0
74005: ST_TO_ADDR
// sExchange := false ;
74006: LD_ADDR_EXP 110
74010: PUSH
74011: LD_INT 0
74013: ST_TO_ADDR
// sFac := false ;
74014: LD_ADDR_EXP 111
74018: PUSH
74019: LD_INT 0
74021: ST_TO_ADDR
// sPower := false ;
74022: LD_ADDR_EXP 112
74026: PUSH
74027: LD_INT 0
74029: ST_TO_ADDR
// sRandom := false ;
74030: LD_ADDR_EXP 113
74034: PUSH
74035: LD_INT 0
74037: ST_TO_ADDR
// sShield := false ;
74038: LD_ADDR_EXP 114
74042: PUSH
74043: LD_INT 0
74045: ST_TO_ADDR
// sTime := false ;
74046: LD_ADDR_EXP 115
74050: PUSH
74051: LD_INT 0
74053: ST_TO_ADDR
// sTools := false ;
74054: LD_ADDR_EXP 116
74058: PUSH
74059: LD_INT 0
74061: ST_TO_ADDR
// sSold := false ;
74062: LD_ADDR_EXP 81
74066: PUSH
74067: LD_INT 0
74069: ST_TO_ADDR
// sDiff := false ;
74070: LD_ADDR_EXP 82
74074: PUSH
74075: LD_INT 0
74077: ST_TO_ADDR
// sFog := false ;
74078: LD_ADDR_EXP 85
74082: PUSH
74083: LD_INT 0
74085: ST_TO_ADDR
// sReset := false ;
74086: LD_ADDR_EXP 86
74090: PUSH
74091: LD_INT 0
74093: ST_TO_ADDR
// sSun := false ;
74094: LD_ADDR_EXP 87
74098: PUSH
74099: LD_INT 0
74101: ST_TO_ADDR
// sTiger := false ;
74102: LD_ADDR_EXP 83
74106: PUSH
74107: LD_INT 0
74109: ST_TO_ADDR
// sBomb := false ;
74110: LD_ADDR_EXP 84
74114: PUSH
74115: LD_INT 0
74117: ST_TO_ADDR
// sWound := false ;
74118: LD_ADDR_EXP 92
74122: PUSH
74123: LD_INT 0
74125: ST_TO_ADDR
// sBetray := false ;
74126: LD_ADDR_EXP 96
74130: PUSH
74131: LD_INT 0
74133: ST_TO_ADDR
// sContamin := false ;
74134: LD_ADDR_EXP 97
74138: PUSH
74139: LD_INT 0
74141: ST_TO_ADDR
// sOil := false ;
74142: LD_ADDR_EXP 99
74146: PUSH
74147: LD_INT 0
74149: ST_TO_ADDR
// sStu := false ;
74150: LD_ADDR_EXP 103
74154: PUSH
74155: LD_INT 0
74157: ST_TO_ADDR
// sBazooka := false ;
74158: LD_ADDR_EXP 106
74162: PUSH
74163: LD_INT 0
74165: ST_TO_ADDR
// sMortar := false ;
74166: LD_ADDR_EXP 107
74170: PUSH
74171: LD_INT 0
74173: ST_TO_ADDR
// sRanger := false ;
74174: LD_ADDR_EXP 117
74178: PUSH
74179: LD_INT 0
74181: ST_TO_ADDR
// sComputer := false ;
74182: LD_ADDR_EXP 118
74186: PUSH
74187: LD_INT 0
74189: ST_TO_ADDR
// s30 := false ;
74190: LD_ADDR_EXP 119
74194: PUSH
74195: LD_INT 0
74197: ST_TO_ADDR
// s60 := false ;
74198: LD_ADDR_EXP 120
74202: PUSH
74203: LD_INT 0
74205: ST_TO_ADDR
// end ;
74206: LD_VAR 0 1
74210: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
74211: LD_INT 0
74213: PPUSH
74214: PPUSH
74215: PPUSH
74216: PPUSH
74217: PPUSH
74218: PPUSH
74219: PPUSH
// result := [ ] ;
74220: LD_ADDR_VAR 0 2
74224: PUSH
74225: EMPTY
74226: ST_TO_ADDR
// if campaign_id = 1 then
74227: LD_OWVAR 69
74231: PUSH
74232: LD_INT 1
74234: EQUAL
74235: IFFALSE 77401
// begin case mission_number of 1 :
74237: LD_OWVAR 70
74241: PUSH
74242: LD_INT 1
74244: DOUBLE
74245: EQUAL
74246: IFTRUE 74250
74248: GO 74326
74250: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
74251: LD_ADDR_VAR 0 2
74255: PUSH
74256: LD_INT 2
74258: PUSH
74259: LD_INT 4
74261: PUSH
74262: LD_INT 11
74264: PUSH
74265: LD_INT 12
74267: PUSH
74268: LD_INT 15
74270: PUSH
74271: LD_INT 16
74273: PUSH
74274: LD_INT 22
74276: PUSH
74277: LD_INT 23
74279: PUSH
74280: LD_INT 26
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: PUSH
74294: LD_INT 101
74296: PUSH
74297: LD_INT 102
74299: PUSH
74300: LD_INT 106
74302: PUSH
74303: LD_INT 116
74305: PUSH
74306: LD_INT 117
74308: PUSH
74309: LD_INT 118
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: ST_TO_ADDR
74324: GO 77399
74326: LD_INT 2
74328: DOUBLE
74329: EQUAL
74330: IFTRUE 74334
74332: GO 74418
74334: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
74335: LD_ADDR_VAR 0 2
74339: PUSH
74340: LD_INT 2
74342: PUSH
74343: LD_INT 4
74345: PUSH
74346: LD_INT 11
74348: PUSH
74349: LD_INT 12
74351: PUSH
74352: LD_INT 15
74354: PUSH
74355: LD_INT 16
74357: PUSH
74358: LD_INT 22
74360: PUSH
74361: LD_INT 23
74363: PUSH
74364: LD_INT 26
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: PUSH
74378: LD_INT 101
74380: PUSH
74381: LD_INT 102
74383: PUSH
74384: LD_INT 105
74386: PUSH
74387: LD_INT 106
74389: PUSH
74390: LD_INT 108
74392: PUSH
74393: LD_INT 116
74395: PUSH
74396: LD_INT 117
74398: PUSH
74399: LD_INT 118
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: ST_TO_ADDR
74416: GO 77399
74418: LD_INT 3
74420: DOUBLE
74421: EQUAL
74422: IFTRUE 74426
74424: GO 74514
74426: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
74427: LD_ADDR_VAR 0 2
74431: PUSH
74432: LD_INT 2
74434: PUSH
74435: LD_INT 4
74437: PUSH
74438: LD_INT 5
74440: PUSH
74441: LD_INT 11
74443: PUSH
74444: LD_INT 12
74446: PUSH
74447: LD_INT 15
74449: PUSH
74450: LD_INT 16
74452: PUSH
74453: LD_INT 22
74455: PUSH
74456: LD_INT 26
74458: PUSH
74459: LD_INT 36
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: PUSH
74474: LD_INT 101
74476: PUSH
74477: LD_INT 102
74479: PUSH
74480: LD_INT 105
74482: PUSH
74483: LD_INT 106
74485: PUSH
74486: LD_INT 108
74488: PUSH
74489: LD_INT 116
74491: PUSH
74492: LD_INT 117
74494: PUSH
74495: LD_INT 118
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: ST_TO_ADDR
74512: GO 77399
74514: LD_INT 4
74516: DOUBLE
74517: EQUAL
74518: IFTRUE 74522
74520: GO 74618
74522: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
74523: LD_ADDR_VAR 0 2
74527: PUSH
74528: LD_INT 2
74530: PUSH
74531: LD_INT 4
74533: PUSH
74534: LD_INT 5
74536: PUSH
74537: LD_INT 8
74539: PUSH
74540: LD_INT 11
74542: PUSH
74543: LD_INT 12
74545: PUSH
74546: LD_INT 15
74548: PUSH
74549: LD_INT 16
74551: PUSH
74552: LD_INT 22
74554: PUSH
74555: LD_INT 23
74557: PUSH
74558: LD_INT 26
74560: PUSH
74561: LD_INT 36
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: PUSH
74578: LD_INT 101
74580: PUSH
74581: LD_INT 102
74583: PUSH
74584: LD_INT 105
74586: PUSH
74587: LD_INT 106
74589: PUSH
74590: LD_INT 108
74592: PUSH
74593: LD_INT 116
74595: PUSH
74596: LD_INT 117
74598: PUSH
74599: LD_INT 118
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: LIST
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: ST_TO_ADDR
74616: GO 77399
74618: LD_INT 5
74620: DOUBLE
74621: EQUAL
74622: IFTRUE 74626
74624: GO 74738
74626: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
74627: LD_ADDR_VAR 0 2
74631: PUSH
74632: LD_INT 2
74634: PUSH
74635: LD_INT 4
74637: PUSH
74638: LD_INT 5
74640: PUSH
74641: LD_INT 6
74643: PUSH
74644: LD_INT 8
74646: PUSH
74647: LD_INT 11
74649: PUSH
74650: LD_INT 12
74652: PUSH
74653: LD_INT 15
74655: PUSH
74656: LD_INT 16
74658: PUSH
74659: LD_INT 22
74661: PUSH
74662: LD_INT 23
74664: PUSH
74665: LD_INT 25
74667: PUSH
74668: LD_INT 26
74670: PUSH
74671: LD_INT 36
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: PUSH
74690: LD_INT 101
74692: PUSH
74693: LD_INT 102
74695: PUSH
74696: LD_INT 105
74698: PUSH
74699: LD_INT 106
74701: PUSH
74702: LD_INT 108
74704: PUSH
74705: LD_INT 109
74707: PUSH
74708: LD_INT 112
74710: PUSH
74711: LD_INT 116
74713: PUSH
74714: LD_INT 117
74716: PUSH
74717: LD_INT 118
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: LIST
74724: LIST
74725: LIST
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: ST_TO_ADDR
74736: GO 77399
74738: LD_INT 6
74740: DOUBLE
74741: EQUAL
74742: IFTRUE 74746
74744: GO 74878
74746: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
74747: LD_ADDR_VAR 0 2
74751: PUSH
74752: LD_INT 2
74754: PUSH
74755: LD_INT 4
74757: PUSH
74758: LD_INT 5
74760: PUSH
74761: LD_INT 6
74763: PUSH
74764: LD_INT 8
74766: PUSH
74767: LD_INT 11
74769: PUSH
74770: LD_INT 12
74772: PUSH
74773: LD_INT 15
74775: PUSH
74776: LD_INT 16
74778: PUSH
74779: LD_INT 20
74781: PUSH
74782: LD_INT 21
74784: PUSH
74785: LD_INT 22
74787: PUSH
74788: LD_INT 23
74790: PUSH
74791: LD_INT 25
74793: PUSH
74794: LD_INT 26
74796: PUSH
74797: LD_INT 30
74799: PUSH
74800: LD_INT 31
74802: PUSH
74803: LD_INT 32
74805: PUSH
74806: LD_INT 36
74808: PUSH
74809: EMPTY
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: PUSH
74830: LD_INT 101
74832: PUSH
74833: LD_INT 102
74835: PUSH
74836: LD_INT 105
74838: PUSH
74839: LD_INT 106
74841: PUSH
74842: LD_INT 108
74844: PUSH
74845: LD_INT 109
74847: PUSH
74848: LD_INT 112
74850: PUSH
74851: LD_INT 116
74853: PUSH
74854: LD_INT 117
74856: PUSH
74857: LD_INT 118
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: ST_TO_ADDR
74876: GO 77399
74878: LD_INT 7
74880: DOUBLE
74881: EQUAL
74882: IFTRUE 74886
74884: GO 74998
74886: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
74887: LD_ADDR_VAR 0 2
74891: PUSH
74892: LD_INT 2
74894: PUSH
74895: LD_INT 4
74897: PUSH
74898: LD_INT 5
74900: PUSH
74901: LD_INT 7
74903: PUSH
74904: LD_INT 11
74906: PUSH
74907: LD_INT 12
74909: PUSH
74910: LD_INT 15
74912: PUSH
74913: LD_INT 16
74915: PUSH
74916: LD_INT 20
74918: PUSH
74919: LD_INT 21
74921: PUSH
74922: LD_INT 22
74924: PUSH
74925: LD_INT 23
74927: PUSH
74928: LD_INT 25
74930: PUSH
74931: LD_INT 26
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: PUSH
74950: LD_INT 101
74952: PUSH
74953: LD_INT 102
74955: PUSH
74956: LD_INT 103
74958: PUSH
74959: LD_INT 105
74961: PUSH
74962: LD_INT 106
74964: PUSH
74965: LD_INT 108
74967: PUSH
74968: LD_INT 112
74970: PUSH
74971: LD_INT 116
74973: PUSH
74974: LD_INT 117
74976: PUSH
74977: LD_INT 118
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: PUSH
74992: EMPTY
74993: LIST
74994: LIST
74995: ST_TO_ADDR
74996: GO 77399
74998: LD_INT 8
75000: DOUBLE
75001: EQUAL
75002: IFTRUE 75006
75004: GO 75146
75006: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
75007: LD_ADDR_VAR 0 2
75011: PUSH
75012: LD_INT 2
75014: PUSH
75015: LD_INT 4
75017: PUSH
75018: LD_INT 5
75020: PUSH
75021: LD_INT 6
75023: PUSH
75024: LD_INT 7
75026: PUSH
75027: LD_INT 8
75029: PUSH
75030: LD_INT 11
75032: PUSH
75033: LD_INT 12
75035: PUSH
75036: LD_INT 15
75038: PUSH
75039: LD_INT 16
75041: PUSH
75042: LD_INT 20
75044: PUSH
75045: LD_INT 21
75047: PUSH
75048: LD_INT 22
75050: PUSH
75051: LD_INT 23
75053: PUSH
75054: LD_INT 25
75056: PUSH
75057: LD_INT 26
75059: PUSH
75060: LD_INT 30
75062: PUSH
75063: LD_INT 31
75065: PUSH
75066: LD_INT 32
75068: PUSH
75069: LD_INT 36
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: PUSH
75094: LD_INT 101
75096: PUSH
75097: LD_INT 102
75099: PUSH
75100: LD_INT 103
75102: PUSH
75103: LD_INT 105
75105: PUSH
75106: LD_INT 106
75108: PUSH
75109: LD_INT 108
75111: PUSH
75112: LD_INT 109
75114: PUSH
75115: LD_INT 112
75117: PUSH
75118: LD_INT 116
75120: PUSH
75121: LD_INT 117
75123: PUSH
75124: LD_INT 118
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: ST_TO_ADDR
75144: GO 77399
75146: LD_INT 9
75148: DOUBLE
75149: EQUAL
75150: IFTRUE 75154
75152: GO 75302
75154: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
75155: LD_ADDR_VAR 0 2
75159: PUSH
75160: LD_INT 2
75162: PUSH
75163: LD_INT 4
75165: PUSH
75166: LD_INT 5
75168: PUSH
75169: LD_INT 6
75171: PUSH
75172: LD_INT 7
75174: PUSH
75175: LD_INT 8
75177: PUSH
75178: LD_INT 11
75180: PUSH
75181: LD_INT 12
75183: PUSH
75184: LD_INT 15
75186: PUSH
75187: LD_INT 16
75189: PUSH
75190: LD_INT 20
75192: PUSH
75193: LD_INT 21
75195: PUSH
75196: LD_INT 22
75198: PUSH
75199: LD_INT 23
75201: PUSH
75202: LD_INT 25
75204: PUSH
75205: LD_INT 26
75207: PUSH
75208: LD_INT 28
75210: PUSH
75211: LD_INT 30
75213: PUSH
75214: LD_INT 31
75216: PUSH
75217: LD_INT 32
75219: PUSH
75220: LD_INT 36
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 101
75248: PUSH
75249: LD_INT 102
75251: PUSH
75252: LD_INT 103
75254: PUSH
75255: LD_INT 105
75257: PUSH
75258: LD_INT 106
75260: PUSH
75261: LD_INT 108
75263: PUSH
75264: LD_INT 109
75266: PUSH
75267: LD_INT 112
75269: PUSH
75270: LD_INT 114
75272: PUSH
75273: LD_INT 116
75275: PUSH
75276: LD_INT 117
75278: PUSH
75279: LD_INT 118
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: LIST
75289: LIST
75290: LIST
75291: LIST
75292: LIST
75293: LIST
75294: LIST
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: ST_TO_ADDR
75300: GO 77399
75302: LD_INT 10
75304: DOUBLE
75305: EQUAL
75306: IFTRUE 75310
75308: GO 75506
75310: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
75311: LD_ADDR_VAR 0 2
75315: PUSH
75316: LD_INT 2
75318: PUSH
75319: LD_INT 4
75321: PUSH
75322: LD_INT 5
75324: PUSH
75325: LD_INT 6
75327: PUSH
75328: LD_INT 7
75330: PUSH
75331: LD_INT 8
75333: PUSH
75334: LD_INT 9
75336: PUSH
75337: LD_INT 10
75339: PUSH
75340: LD_INT 11
75342: PUSH
75343: LD_INT 12
75345: PUSH
75346: LD_INT 13
75348: PUSH
75349: LD_INT 14
75351: PUSH
75352: LD_INT 15
75354: PUSH
75355: LD_INT 16
75357: PUSH
75358: LD_INT 17
75360: PUSH
75361: LD_INT 18
75363: PUSH
75364: LD_INT 19
75366: PUSH
75367: LD_INT 20
75369: PUSH
75370: LD_INT 21
75372: PUSH
75373: LD_INT 22
75375: PUSH
75376: LD_INT 23
75378: PUSH
75379: LD_INT 24
75381: PUSH
75382: LD_INT 25
75384: PUSH
75385: LD_INT 26
75387: PUSH
75388: LD_INT 28
75390: PUSH
75391: LD_INT 30
75393: PUSH
75394: LD_INT 31
75396: PUSH
75397: LD_INT 32
75399: PUSH
75400: LD_INT 36
75402: PUSH
75403: EMPTY
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: PUSH
75434: LD_INT 101
75436: PUSH
75437: LD_INT 102
75439: PUSH
75440: LD_INT 103
75442: PUSH
75443: LD_INT 104
75445: PUSH
75446: LD_INT 105
75448: PUSH
75449: LD_INT 106
75451: PUSH
75452: LD_INT 107
75454: PUSH
75455: LD_INT 108
75457: PUSH
75458: LD_INT 109
75460: PUSH
75461: LD_INT 110
75463: PUSH
75464: LD_INT 111
75466: PUSH
75467: LD_INT 112
75469: PUSH
75470: LD_INT 114
75472: PUSH
75473: LD_INT 116
75475: PUSH
75476: LD_INT 117
75478: PUSH
75479: LD_INT 118
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: ST_TO_ADDR
75504: GO 77399
75506: LD_INT 11
75508: DOUBLE
75509: EQUAL
75510: IFTRUE 75514
75512: GO 75718
75514: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
75515: LD_ADDR_VAR 0 2
75519: PUSH
75520: LD_INT 2
75522: PUSH
75523: LD_INT 3
75525: PUSH
75526: LD_INT 4
75528: PUSH
75529: LD_INT 5
75531: PUSH
75532: LD_INT 6
75534: PUSH
75535: LD_INT 7
75537: PUSH
75538: LD_INT 8
75540: PUSH
75541: LD_INT 9
75543: PUSH
75544: LD_INT 10
75546: PUSH
75547: LD_INT 11
75549: PUSH
75550: LD_INT 12
75552: PUSH
75553: LD_INT 13
75555: PUSH
75556: LD_INT 14
75558: PUSH
75559: LD_INT 15
75561: PUSH
75562: LD_INT 16
75564: PUSH
75565: LD_INT 17
75567: PUSH
75568: LD_INT 18
75570: PUSH
75571: LD_INT 19
75573: PUSH
75574: LD_INT 20
75576: PUSH
75577: LD_INT 21
75579: PUSH
75580: LD_INT 22
75582: PUSH
75583: LD_INT 23
75585: PUSH
75586: LD_INT 24
75588: PUSH
75589: LD_INT 25
75591: PUSH
75592: LD_INT 26
75594: PUSH
75595: LD_INT 28
75597: PUSH
75598: LD_INT 30
75600: PUSH
75601: LD_INT 31
75603: PUSH
75604: LD_INT 32
75606: PUSH
75607: LD_INT 34
75609: PUSH
75610: LD_INT 36
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: LIST
75619: LIST
75620: LIST
75621: LIST
75622: LIST
75623: LIST
75624: LIST
75625: LIST
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: PUSH
75646: LD_INT 101
75648: PUSH
75649: LD_INT 102
75651: PUSH
75652: LD_INT 103
75654: PUSH
75655: LD_INT 104
75657: PUSH
75658: LD_INT 105
75660: PUSH
75661: LD_INT 106
75663: PUSH
75664: LD_INT 107
75666: PUSH
75667: LD_INT 108
75669: PUSH
75670: LD_INT 109
75672: PUSH
75673: LD_INT 110
75675: PUSH
75676: LD_INT 111
75678: PUSH
75679: LD_INT 112
75681: PUSH
75682: LD_INT 114
75684: PUSH
75685: LD_INT 116
75687: PUSH
75688: LD_INT 117
75690: PUSH
75691: LD_INT 118
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: LIST
75707: LIST
75708: LIST
75709: LIST
75710: LIST
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: ST_TO_ADDR
75716: GO 77399
75718: LD_INT 12
75720: DOUBLE
75721: EQUAL
75722: IFTRUE 75726
75724: GO 75946
75726: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
75727: LD_ADDR_VAR 0 2
75731: PUSH
75732: LD_INT 1
75734: PUSH
75735: LD_INT 2
75737: PUSH
75738: LD_INT 3
75740: PUSH
75741: LD_INT 4
75743: PUSH
75744: LD_INT 5
75746: PUSH
75747: LD_INT 6
75749: PUSH
75750: LD_INT 7
75752: PUSH
75753: LD_INT 8
75755: PUSH
75756: LD_INT 9
75758: PUSH
75759: LD_INT 10
75761: PUSH
75762: LD_INT 11
75764: PUSH
75765: LD_INT 12
75767: PUSH
75768: LD_INT 13
75770: PUSH
75771: LD_INT 14
75773: PUSH
75774: LD_INT 15
75776: PUSH
75777: LD_INT 16
75779: PUSH
75780: LD_INT 17
75782: PUSH
75783: LD_INT 18
75785: PUSH
75786: LD_INT 19
75788: PUSH
75789: LD_INT 20
75791: PUSH
75792: LD_INT 21
75794: PUSH
75795: LD_INT 22
75797: PUSH
75798: LD_INT 23
75800: PUSH
75801: LD_INT 24
75803: PUSH
75804: LD_INT 25
75806: PUSH
75807: LD_INT 26
75809: PUSH
75810: LD_INT 27
75812: PUSH
75813: LD_INT 28
75815: PUSH
75816: LD_INT 30
75818: PUSH
75819: LD_INT 31
75821: PUSH
75822: LD_INT 32
75824: PUSH
75825: LD_INT 33
75827: PUSH
75828: LD_INT 34
75830: PUSH
75831: LD_INT 36
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: LIST
75844: LIST
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: PUSH
75870: LD_INT 101
75872: PUSH
75873: LD_INT 102
75875: PUSH
75876: LD_INT 103
75878: PUSH
75879: LD_INT 104
75881: PUSH
75882: LD_INT 105
75884: PUSH
75885: LD_INT 106
75887: PUSH
75888: LD_INT 107
75890: PUSH
75891: LD_INT 108
75893: PUSH
75894: LD_INT 109
75896: PUSH
75897: LD_INT 110
75899: PUSH
75900: LD_INT 111
75902: PUSH
75903: LD_INT 112
75905: PUSH
75906: LD_INT 113
75908: PUSH
75909: LD_INT 114
75911: PUSH
75912: LD_INT 116
75914: PUSH
75915: LD_INT 117
75917: PUSH
75918: LD_INT 118
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: ST_TO_ADDR
75944: GO 77399
75946: LD_INT 13
75948: DOUBLE
75949: EQUAL
75950: IFTRUE 75954
75952: GO 76162
75954: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
75955: LD_ADDR_VAR 0 2
75959: PUSH
75960: LD_INT 1
75962: PUSH
75963: LD_INT 2
75965: PUSH
75966: LD_INT 3
75968: PUSH
75969: LD_INT 4
75971: PUSH
75972: LD_INT 5
75974: PUSH
75975: LD_INT 8
75977: PUSH
75978: LD_INT 9
75980: PUSH
75981: LD_INT 10
75983: PUSH
75984: LD_INT 11
75986: PUSH
75987: LD_INT 12
75989: PUSH
75990: LD_INT 14
75992: PUSH
75993: LD_INT 15
75995: PUSH
75996: LD_INT 16
75998: PUSH
75999: LD_INT 17
76001: PUSH
76002: LD_INT 18
76004: PUSH
76005: LD_INT 19
76007: PUSH
76008: LD_INT 20
76010: PUSH
76011: LD_INT 21
76013: PUSH
76014: LD_INT 22
76016: PUSH
76017: LD_INT 23
76019: PUSH
76020: LD_INT 24
76022: PUSH
76023: LD_INT 25
76025: PUSH
76026: LD_INT 26
76028: PUSH
76029: LD_INT 27
76031: PUSH
76032: LD_INT 28
76034: PUSH
76035: LD_INT 30
76037: PUSH
76038: LD_INT 31
76040: PUSH
76041: LD_INT 32
76043: PUSH
76044: LD_INT 33
76046: PUSH
76047: LD_INT 34
76049: PUSH
76050: LD_INT 36
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: LIST
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: PUSH
76086: LD_INT 101
76088: PUSH
76089: LD_INT 102
76091: PUSH
76092: LD_INT 103
76094: PUSH
76095: LD_INT 104
76097: PUSH
76098: LD_INT 105
76100: PUSH
76101: LD_INT 106
76103: PUSH
76104: LD_INT 107
76106: PUSH
76107: LD_INT 108
76109: PUSH
76110: LD_INT 109
76112: PUSH
76113: LD_INT 110
76115: PUSH
76116: LD_INT 111
76118: PUSH
76119: LD_INT 112
76121: PUSH
76122: LD_INT 113
76124: PUSH
76125: LD_INT 114
76127: PUSH
76128: LD_INT 116
76130: PUSH
76131: LD_INT 117
76133: PUSH
76134: LD_INT 118
76136: PUSH
76137: EMPTY
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: LIST
76154: LIST
76155: PUSH
76156: EMPTY
76157: LIST
76158: LIST
76159: ST_TO_ADDR
76160: GO 77399
76162: LD_INT 14
76164: DOUBLE
76165: EQUAL
76166: IFTRUE 76170
76168: GO 76394
76170: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
76171: LD_ADDR_VAR 0 2
76175: PUSH
76176: LD_INT 1
76178: PUSH
76179: LD_INT 2
76181: PUSH
76182: LD_INT 3
76184: PUSH
76185: LD_INT 4
76187: PUSH
76188: LD_INT 5
76190: PUSH
76191: LD_INT 6
76193: PUSH
76194: LD_INT 7
76196: PUSH
76197: LD_INT 8
76199: PUSH
76200: LD_INT 9
76202: PUSH
76203: LD_INT 10
76205: PUSH
76206: LD_INT 11
76208: PUSH
76209: LD_INT 12
76211: PUSH
76212: LD_INT 13
76214: PUSH
76215: LD_INT 14
76217: PUSH
76218: LD_INT 15
76220: PUSH
76221: LD_INT 16
76223: PUSH
76224: LD_INT 17
76226: PUSH
76227: LD_INT 18
76229: PUSH
76230: LD_INT 19
76232: PUSH
76233: LD_INT 20
76235: PUSH
76236: LD_INT 21
76238: PUSH
76239: LD_INT 22
76241: PUSH
76242: LD_INT 23
76244: PUSH
76245: LD_INT 24
76247: PUSH
76248: LD_INT 25
76250: PUSH
76251: LD_INT 26
76253: PUSH
76254: LD_INT 27
76256: PUSH
76257: LD_INT 28
76259: PUSH
76260: LD_INT 29
76262: PUSH
76263: LD_INT 30
76265: PUSH
76266: LD_INT 31
76268: PUSH
76269: LD_INT 32
76271: PUSH
76272: LD_INT 33
76274: PUSH
76275: LD_INT 34
76277: PUSH
76278: LD_INT 36
76280: PUSH
76281: EMPTY
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: LIST
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: LIST
76308: LIST
76309: LIST
76310: LIST
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: PUSH
76318: LD_INT 101
76320: PUSH
76321: LD_INT 102
76323: PUSH
76324: LD_INT 103
76326: PUSH
76327: LD_INT 104
76329: PUSH
76330: LD_INT 105
76332: PUSH
76333: LD_INT 106
76335: PUSH
76336: LD_INT 107
76338: PUSH
76339: LD_INT 108
76341: PUSH
76342: LD_INT 109
76344: PUSH
76345: LD_INT 110
76347: PUSH
76348: LD_INT 111
76350: PUSH
76351: LD_INT 112
76353: PUSH
76354: LD_INT 113
76356: PUSH
76357: LD_INT 114
76359: PUSH
76360: LD_INT 116
76362: PUSH
76363: LD_INT 117
76365: PUSH
76366: LD_INT 118
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: LIST
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: ST_TO_ADDR
76392: GO 77399
76394: LD_INT 15
76396: DOUBLE
76397: EQUAL
76398: IFTRUE 76402
76400: GO 76626
76402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
76403: LD_ADDR_VAR 0 2
76407: PUSH
76408: LD_INT 1
76410: PUSH
76411: LD_INT 2
76413: PUSH
76414: LD_INT 3
76416: PUSH
76417: LD_INT 4
76419: PUSH
76420: LD_INT 5
76422: PUSH
76423: LD_INT 6
76425: PUSH
76426: LD_INT 7
76428: PUSH
76429: LD_INT 8
76431: PUSH
76432: LD_INT 9
76434: PUSH
76435: LD_INT 10
76437: PUSH
76438: LD_INT 11
76440: PUSH
76441: LD_INT 12
76443: PUSH
76444: LD_INT 13
76446: PUSH
76447: LD_INT 14
76449: PUSH
76450: LD_INT 15
76452: PUSH
76453: LD_INT 16
76455: PUSH
76456: LD_INT 17
76458: PUSH
76459: LD_INT 18
76461: PUSH
76462: LD_INT 19
76464: PUSH
76465: LD_INT 20
76467: PUSH
76468: LD_INT 21
76470: PUSH
76471: LD_INT 22
76473: PUSH
76474: LD_INT 23
76476: PUSH
76477: LD_INT 24
76479: PUSH
76480: LD_INT 25
76482: PUSH
76483: LD_INT 26
76485: PUSH
76486: LD_INT 27
76488: PUSH
76489: LD_INT 28
76491: PUSH
76492: LD_INT 29
76494: PUSH
76495: LD_INT 30
76497: PUSH
76498: LD_INT 31
76500: PUSH
76501: LD_INT 32
76503: PUSH
76504: LD_INT 33
76506: PUSH
76507: LD_INT 34
76509: PUSH
76510: LD_INT 36
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: LIST
76540: LIST
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: LIST
76546: LIST
76547: LIST
76548: LIST
76549: PUSH
76550: LD_INT 101
76552: PUSH
76553: LD_INT 102
76555: PUSH
76556: LD_INT 103
76558: PUSH
76559: LD_INT 104
76561: PUSH
76562: LD_INT 105
76564: PUSH
76565: LD_INT 106
76567: PUSH
76568: LD_INT 107
76570: PUSH
76571: LD_INT 108
76573: PUSH
76574: LD_INT 109
76576: PUSH
76577: LD_INT 110
76579: PUSH
76580: LD_INT 111
76582: PUSH
76583: LD_INT 112
76585: PUSH
76586: LD_INT 113
76588: PUSH
76589: LD_INT 114
76591: PUSH
76592: LD_INT 116
76594: PUSH
76595: LD_INT 117
76597: PUSH
76598: LD_INT 118
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: LIST
76607: LIST
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: ST_TO_ADDR
76624: GO 77399
76626: LD_INT 16
76628: DOUBLE
76629: EQUAL
76630: IFTRUE 76634
76632: GO 76770
76634: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
76635: LD_ADDR_VAR 0 2
76639: PUSH
76640: LD_INT 2
76642: PUSH
76643: LD_INT 4
76645: PUSH
76646: LD_INT 5
76648: PUSH
76649: LD_INT 7
76651: PUSH
76652: LD_INT 11
76654: PUSH
76655: LD_INT 12
76657: PUSH
76658: LD_INT 15
76660: PUSH
76661: LD_INT 16
76663: PUSH
76664: LD_INT 20
76666: PUSH
76667: LD_INT 21
76669: PUSH
76670: LD_INT 22
76672: PUSH
76673: LD_INT 23
76675: PUSH
76676: LD_INT 25
76678: PUSH
76679: LD_INT 26
76681: PUSH
76682: LD_INT 30
76684: PUSH
76685: LD_INT 31
76687: PUSH
76688: LD_INT 32
76690: PUSH
76691: LD_INT 33
76693: PUSH
76694: LD_INT 34
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: LIST
76713: LIST
76714: LIST
76715: LIST
76716: LIST
76717: PUSH
76718: LD_INT 101
76720: PUSH
76721: LD_INT 102
76723: PUSH
76724: LD_INT 103
76726: PUSH
76727: LD_INT 106
76729: PUSH
76730: LD_INT 108
76732: PUSH
76733: LD_INT 112
76735: PUSH
76736: LD_INT 113
76738: PUSH
76739: LD_INT 114
76741: PUSH
76742: LD_INT 116
76744: PUSH
76745: LD_INT 117
76747: PUSH
76748: LD_INT 118
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: PUSH
76764: EMPTY
76765: LIST
76766: LIST
76767: ST_TO_ADDR
76768: GO 77399
76770: LD_INT 17
76772: DOUBLE
76773: EQUAL
76774: IFTRUE 76778
76776: GO 77002
76778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
76779: LD_ADDR_VAR 0 2
76783: PUSH
76784: LD_INT 1
76786: PUSH
76787: LD_INT 2
76789: PUSH
76790: LD_INT 3
76792: PUSH
76793: LD_INT 4
76795: PUSH
76796: LD_INT 5
76798: PUSH
76799: LD_INT 6
76801: PUSH
76802: LD_INT 7
76804: PUSH
76805: LD_INT 8
76807: PUSH
76808: LD_INT 9
76810: PUSH
76811: LD_INT 10
76813: PUSH
76814: LD_INT 11
76816: PUSH
76817: LD_INT 12
76819: PUSH
76820: LD_INT 13
76822: PUSH
76823: LD_INT 14
76825: PUSH
76826: LD_INT 15
76828: PUSH
76829: LD_INT 16
76831: PUSH
76832: LD_INT 17
76834: PUSH
76835: LD_INT 18
76837: PUSH
76838: LD_INT 19
76840: PUSH
76841: LD_INT 20
76843: PUSH
76844: LD_INT 21
76846: PUSH
76847: LD_INT 22
76849: PUSH
76850: LD_INT 23
76852: PUSH
76853: LD_INT 24
76855: PUSH
76856: LD_INT 25
76858: PUSH
76859: LD_INT 26
76861: PUSH
76862: LD_INT 27
76864: PUSH
76865: LD_INT 28
76867: PUSH
76868: LD_INT 29
76870: PUSH
76871: LD_INT 30
76873: PUSH
76874: LD_INT 31
76876: PUSH
76877: LD_INT 32
76879: PUSH
76880: LD_INT 33
76882: PUSH
76883: LD_INT 34
76885: PUSH
76886: LD_INT 36
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: LIST
76893: LIST
76894: LIST
76895: LIST
76896: LIST
76897: LIST
76898: LIST
76899: LIST
76900: LIST
76901: LIST
76902: LIST
76903: LIST
76904: LIST
76905: LIST
76906: LIST
76907: LIST
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: PUSH
76926: LD_INT 101
76928: PUSH
76929: LD_INT 102
76931: PUSH
76932: LD_INT 103
76934: PUSH
76935: LD_INT 104
76937: PUSH
76938: LD_INT 105
76940: PUSH
76941: LD_INT 106
76943: PUSH
76944: LD_INT 107
76946: PUSH
76947: LD_INT 108
76949: PUSH
76950: LD_INT 109
76952: PUSH
76953: LD_INT 110
76955: PUSH
76956: LD_INT 111
76958: PUSH
76959: LD_INT 112
76961: PUSH
76962: LD_INT 113
76964: PUSH
76965: LD_INT 114
76967: PUSH
76968: LD_INT 116
76970: PUSH
76971: LD_INT 117
76973: PUSH
76974: LD_INT 118
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: LIST
76981: LIST
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: PUSH
76996: EMPTY
76997: LIST
76998: LIST
76999: ST_TO_ADDR
77000: GO 77399
77002: LD_INT 18
77004: DOUBLE
77005: EQUAL
77006: IFTRUE 77010
77008: GO 77158
77010: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
77011: LD_ADDR_VAR 0 2
77015: PUSH
77016: LD_INT 2
77018: PUSH
77019: LD_INT 4
77021: PUSH
77022: LD_INT 5
77024: PUSH
77025: LD_INT 7
77027: PUSH
77028: LD_INT 11
77030: PUSH
77031: LD_INT 12
77033: PUSH
77034: LD_INT 15
77036: PUSH
77037: LD_INT 16
77039: PUSH
77040: LD_INT 20
77042: PUSH
77043: LD_INT 21
77045: PUSH
77046: LD_INT 22
77048: PUSH
77049: LD_INT 23
77051: PUSH
77052: LD_INT 25
77054: PUSH
77055: LD_INT 26
77057: PUSH
77058: LD_INT 30
77060: PUSH
77061: LD_INT 31
77063: PUSH
77064: LD_INT 32
77066: PUSH
77067: LD_INT 33
77069: PUSH
77070: LD_INT 34
77072: PUSH
77073: LD_INT 35
77075: PUSH
77076: LD_INT 36
77078: PUSH
77079: EMPTY
77080: LIST
77081: LIST
77082: LIST
77083: LIST
77084: LIST
77085: LIST
77086: LIST
77087: LIST
77088: LIST
77089: LIST
77090: LIST
77091: LIST
77092: LIST
77093: LIST
77094: LIST
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: LIST
77101: PUSH
77102: LD_INT 101
77104: PUSH
77105: LD_INT 102
77107: PUSH
77108: LD_INT 103
77110: PUSH
77111: LD_INT 106
77113: PUSH
77114: LD_INT 108
77116: PUSH
77117: LD_INT 112
77119: PUSH
77120: LD_INT 113
77122: PUSH
77123: LD_INT 114
77125: PUSH
77126: LD_INT 115
77128: PUSH
77129: LD_INT 116
77131: PUSH
77132: LD_INT 117
77134: PUSH
77135: LD_INT 118
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: LIST
77142: LIST
77143: LIST
77144: LIST
77145: LIST
77146: LIST
77147: LIST
77148: LIST
77149: LIST
77150: LIST
77151: PUSH
77152: EMPTY
77153: LIST
77154: LIST
77155: ST_TO_ADDR
77156: GO 77399
77158: LD_INT 19
77160: DOUBLE
77161: EQUAL
77162: IFTRUE 77166
77164: GO 77398
77166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
77167: LD_ADDR_VAR 0 2
77171: PUSH
77172: LD_INT 1
77174: PUSH
77175: LD_INT 2
77177: PUSH
77178: LD_INT 3
77180: PUSH
77181: LD_INT 4
77183: PUSH
77184: LD_INT 5
77186: PUSH
77187: LD_INT 6
77189: PUSH
77190: LD_INT 7
77192: PUSH
77193: LD_INT 8
77195: PUSH
77196: LD_INT 9
77198: PUSH
77199: LD_INT 10
77201: PUSH
77202: LD_INT 11
77204: PUSH
77205: LD_INT 12
77207: PUSH
77208: LD_INT 13
77210: PUSH
77211: LD_INT 14
77213: PUSH
77214: LD_INT 15
77216: PUSH
77217: LD_INT 16
77219: PUSH
77220: LD_INT 17
77222: PUSH
77223: LD_INT 18
77225: PUSH
77226: LD_INT 19
77228: PUSH
77229: LD_INT 20
77231: PUSH
77232: LD_INT 21
77234: PUSH
77235: LD_INT 22
77237: PUSH
77238: LD_INT 23
77240: PUSH
77241: LD_INT 24
77243: PUSH
77244: LD_INT 25
77246: PUSH
77247: LD_INT 26
77249: PUSH
77250: LD_INT 27
77252: PUSH
77253: LD_INT 28
77255: PUSH
77256: LD_INT 29
77258: PUSH
77259: LD_INT 30
77261: PUSH
77262: LD_INT 31
77264: PUSH
77265: LD_INT 32
77267: PUSH
77268: LD_INT 33
77270: PUSH
77271: LD_INT 34
77273: PUSH
77274: LD_INT 35
77276: PUSH
77277: LD_INT 36
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: LIST
77284: LIST
77285: LIST
77286: LIST
77287: LIST
77288: LIST
77289: LIST
77290: LIST
77291: LIST
77292: LIST
77293: LIST
77294: LIST
77295: LIST
77296: LIST
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: PUSH
77318: LD_INT 101
77320: PUSH
77321: LD_INT 102
77323: PUSH
77324: LD_INT 103
77326: PUSH
77327: LD_INT 104
77329: PUSH
77330: LD_INT 105
77332: PUSH
77333: LD_INT 106
77335: PUSH
77336: LD_INT 107
77338: PUSH
77339: LD_INT 108
77341: PUSH
77342: LD_INT 109
77344: PUSH
77345: LD_INT 110
77347: PUSH
77348: LD_INT 111
77350: PUSH
77351: LD_INT 112
77353: PUSH
77354: LD_INT 113
77356: PUSH
77357: LD_INT 114
77359: PUSH
77360: LD_INT 115
77362: PUSH
77363: LD_INT 116
77365: PUSH
77366: LD_INT 117
77368: PUSH
77369: LD_INT 118
77371: PUSH
77372: EMPTY
77373: LIST
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: LIST
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: ST_TO_ADDR
77396: GO 77399
77398: POP
// end else
77399: GO 77630
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
77401: LD_ADDR_VAR 0 2
77405: PUSH
77406: LD_INT 1
77408: PUSH
77409: LD_INT 2
77411: PUSH
77412: LD_INT 3
77414: PUSH
77415: LD_INT 4
77417: PUSH
77418: LD_INT 5
77420: PUSH
77421: LD_INT 6
77423: PUSH
77424: LD_INT 7
77426: PUSH
77427: LD_INT 8
77429: PUSH
77430: LD_INT 9
77432: PUSH
77433: LD_INT 10
77435: PUSH
77436: LD_INT 11
77438: PUSH
77439: LD_INT 12
77441: PUSH
77442: LD_INT 13
77444: PUSH
77445: LD_INT 14
77447: PUSH
77448: LD_INT 15
77450: PUSH
77451: LD_INT 16
77453: PUSH
77454: LD_INT 17
77456: PUSH
77457: LD_INT 18
77459: PUSH
77460: LD_INT 19
77462: PUSH
77463: LD_INT 20
77465: PUSH
77466: LD_INT 21
77468: PUSH
77469: LD_INT 22
77471: PUSH
77472: LD_INT 23
77474: PUSH
77475: LD_INT 24
77477: PUSH
77478: LD_INT 25
77480: PUSH
77481: LD_INT 26
77483: PUSH
77484: LD_INT 27
77486: PUSH
77487: LD_INT 28
77489: PUSH
77490: LD_INT 29
77492: PUSH
77493: LD_INT 30
77495: PUSH
77496: LD_INT 31
77498: PUSH
77499: LD_INT 32
77501: PUSH
77502: LD_INT 33
77504: PUSH
77505: LD_INT 34
77507: PUSH
77508: LD_INT 35
77510: PUSH
77511: LD_INT 36
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: LIST
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: LIST
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: PUSH
77552: LD_INT 101
77554: PUSH
77555: LD_INT 102
77557: PUSH
77558: LD_INT 103
77560: PUSH
77561: LD_INT 104
77563: PUSH
77564: LD_INT 105
77566: PUSH
77567: LD_INT 106
77569: PUSH
77570: LD_INT 107
77572: PUSH
77573: LD_INT 108
77575: PUSH
77576: LD_INT 109
77578: PUSH
77579: LD_INT 110
77581: PUSH
77582: LD_INT 111
77584: PUSH
77585: LD_INT 112
77587: PUSH
77588: LD_INT 113
77590: PUSH
77591: LD_INT 114
77593: PUSH
77594: LD_INT 115
77596: PUSH
77597: LD_INT 116
77599: PUSH
77600: LD_INT 117
77602: PUSH
77603: LD_INT 118
77605: PUSH
77606: EMPTY
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: LIST
77613: LIST
77614: LIST
77615: LIST
77616: LIST
77617: LIST
77618: LIST
77619: LIST
77620: LIST
77621: LIST
77622: LIST
77623: LIST
77624: LIST
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: ST_TO_ADDR
// if result then
77630: LD_VAR 0 2
77634: IFFALSE 78420
// begin normal :=  ;
77636: LD_ADDR_VAR 0 5
77640: PUSH
77641: LD_STRING 
77643: ST_TO_ADDR
// hardcore :=  ;
77644: LD_ADDR_VAR 0 6
77648: PUSH
77649: LD_STRING 
77651: ST_TO_ADDR
// active :=  ;
77652: LD_ADDR_VAR 0 7
77656: PUSH
77657: LD_STRING 
77659: ST_TO_ADDR
// for i = 1 to normalCounter do
77660: LD_ADDR_VAR 0 8
77664: PUSH
77665: DOUBLE
77666: LD_INT 1
77668: DEC
77669: ST_TO_ADDR
77670: LD_EXP 65
77674: PUSH
77675: FOR_TO
77676: IFFALSE 77777
// begin tmp := 0 ;
77678: LD_ADDR_VAR 0 3
77682: PUSH
77683: LD_STRING 0
77685: ST_TO_ADDR
// if result [ 1 ] then
77686: LD_VAR 0 2
77690: PUSH
77691: LD_INT 1
77693: ARRAY
77694: IFFALSE 77759
// if result [ 1 ] [ 1 ] = i then
77696: LD_VAR 0 2
77700: PUSH
77701: LD_INT 1
77703: ARRAY
77704: PUSH
77705: LD_INT 1
77707: ARRAY
77708: PUSH
77709: LD_VAR 0 8
77713: EQUAL
77714: IFFALSE 77759
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
77716: LD_ADDR_VAR 0 2
77720: PUSH
77721: LD_VAR 0 2
77725: PPUSH
77726: LD_INT 1
77728: PPUSH
77729: LD_VAR 0 2
77733: PUSH
77734: LD_INT 1
77736: ARRAY
77737: PPUSH
77738: LD_INT 1
77740: PPUSH
77741: CALL_OW 3
77745: PPUSH
77746: CALL_OW 1
77750: ST_TO_ADDR
// tmp := 1 ;
77751: LD_ADDR_VAR 0 3
77755: PUSH
77756: LD_STRING 1
77758: ST_TO_ADDR
// end ; normal := normal & tmp ;
77759: LD_ADDR_VAR 0 5
77763: PUSH
77764: LD_VAR 0 5
77768: PUSH
77769: LD_VAR 0 3
77773: STR
77774: ST_TO_ADDR
// end ;
77775: GO 77675
77777: POP
77778: POP
// for i = 1 to hardcoreCounter do
77779: LD_ADDR_VAR 0 8
77783: PUSH
77784: DOUBLE
77785: LD_INT 1
77787: DEC
77788: ST_TO_ADDR
77789: LD_EXP 66
77793: PUSH
77794: FOR_TO
77795: IFFALSE 77900
// begin tmp := 0 ;
77797: LD_ADDR_VAR 0 3
77801: PUSH
77802: LD_STRING 0
77804: ST_TO_ADDR
// if result [ 2 ] then
77805: LD_VAR 0 2
77809: PUSH
77810: LD_INT 2
77812: ARRAY
77813: IFFALSE 77882
// if result [ 2 ] [ 1 ] = 100 + i then
77815: LD_VAR 0 2
77819: PUSH
77820: LD_INT 2
77822: ARRAY
77823: PUSH
77824: LD_INT 1
77826: ARRAY
77827: PUSH
77828: LD_INT 100
77830: PUSH
77831: LD_VAR 0 8
77835: PLUS
77836: EQUAL
77837: IFFALSE 77882
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
77839: LD_ADDR_VAR 0 2
77843: PUSH
77844: LD_VAR 0 2
77848: PPUSH
77849: LD_INT 2
77851: PPUSH
77852: LD_VAR 0 2
77856: PUSH
77857: LD_INT 2
77859: ARRAY
77860: PPUSH
77861: LD_INT 1
77863: PPUSH
77864: CALL_OW 3
77868: PPUSH
77869: CALL_OW 1
77873: ST_TO_ADDR
// tmp := 1 ;
77874: LD_ADDR_VAR 0 3
77878: PUSH
77879: LD_STRING 1
77881: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
77882: LD_ADDR_VAR 0 6
77886: PUSH
77887: LD_VAR 0 6
77891: PUSH
77892: LD_VAR 0 3
77896: STR
77897: ST_TO_ADDR
// end ;
77898: GO 77794
77900: POP
77901: POP
// if isGameLoad then
77902: LD_VAR 0 1
77906: IFFALSE 78381
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
77908: LD_ADDR_VAR 0 4
77912: PUSH
77913: LD_EXP 69
77917: PUSH
77918: LD_EXP 68
77922: PUSH
77923: LD_EXP 70
77927: PUSH
77928: LD_EXP 67
77932: PUSH
77933: LD_EXP 71
77937: PUSH
77938: LD_EXP 72
77942: PUSH
77943: LD_EXP 73
77947: PUSH
77948: LD_EXP 74
77952: PUSH
77953: LD_EXP 75
77957: PUSH
77958: LD_EXP 76
77962: PUSH
77963: LD_EXP 77
77967: PUSH
77968: LD_EXP 78
77972: PUSH
77973: LD_EXP 79
77977: PUSH
77978: LD_EXP 80
77982: PUSH
77983: LD_EXP 88
77987: PUSH
77988: LD_EXP 89
77992: PUSH
77993: LD_EXP 90
77997: PUSH
77998: LD_EXP 91
78002: PUSH
78003: LD_EXP 93
78007: PUSH
78008: LD_EXP 94
78012: PUSH
78013: LD_EXP 95
78017: PUSH
78018: LD_EXP 98
78022: PUSH
78023: LD_EXP 100
78027: PUSH
78028: LD_EXP 101
78032: PUSH
78033: LD_EXP 102
78037: PUSH
78038: LD_EXP 104
78042: PUSH
78043: LD_EXP 105
78047: PUSH
78048: LD_EXP 108
78052: PUSH
78053: LD_EXP 109
78057: PUSH
78058: LD_EXP 110
78062: PUSH
78063: LD_EXP 111
78067: PUSH
78068: LD_EXP 112
78072: PUSH
78073: LD_EXP 113
78077: PUSH
78078: LD_EXP 114
78082: PUSH
78083: LD_EXP 115
78087: PUSH
78088: LD_EXP 116
78092: PUSH
78093: LD_EXP 81
78097: PUSH
78098: LD_EXP 82
78102: PUSH
78103: LD_EXP 85
78107: PUSH
78108: LD_EXP 86
78112: PUSH
78113: LD_EXP 87
78117: PUSH
78118: LD_EXP 83
78122: PUSH
78123: LD_EXP 84
78127: PUSH
78128: LD_EXP 92
78132: PUSH
78133: LD_EXP 96
78137: PUSH
78138: LD_EXP 97
78142: PUSH
78143: LD_EXP 99
78147: PUSH
78148: LD_EXP 103
78152: PUSH
78153: LD_EXP 106
78157: PUSH
78158: LD_EXP 107
78162: PUSH
78163: LD_EXP 117
78167: PUSH
78168: LD_EXP 118
78172: PUSH
78173: LD_EXP 119
78177: PUSH
78178: LD_EXP 120
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: LIST
78196: LIST
78197: LIST
78198: LIST
78199: LIST
78200: LIST
78201: LIST
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: LIST
78209: LIST
78210: LIST
78211: LIST
78212: LIST
78213: LIST
78214: LIST
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: LIST
78220: LIST
78221: LIST
78222: LIST
78223: LIST
78224: LIST
78225: LIST
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: LIST
78231: LIST
78232: LIST
78233: LIST
78234: LIST
78235: LIST
78236: LIST
78237: LIST
78238: ST_TO_ADDR
// tmp :=  ;
78239: LD_ADDR_VAR 0 3
78243: PUSH
78244: LD_STRING 
78246: ST_TO_ADDR
// for i = 1 to normalCounter do
78247: LD_ADDR_VAR 0 8
78251: PUSH
78252: DOUBLE
78253: LD_INT 1
78255: DEC
78256: ST_TO_ADDR
78257: LD_EXP 65
78261: PUSH
78262: FOR_TO
78263: IFFALSE 78299
// begin if flags [ i ] then
78265: LD_VAR 0 4
78269: PUSH
78270: LD_VAR 0 8
78274: ARRAY
78275: IFFALSE 78297
// tmp := tmp & i & ; ;
78277: LD_ADDR_VAR 0 3
78281: PUSH
78282: LD_VAR 0 3
78286: PUSH
78287: LD_VAR 0 8
78291: STR
78292: PUSH
78293: LD_STRING ;
78295: STR
78296: ST_TO_ADDR
// end ;
78297: GO 78262
78299: POP
78300: POP
// for i = 1 to hardcoreCounter do
78301: LD_ADDR_VAR 0 8
78305: PUSH
78306: DOUBLE
78307: LD_INT 1
78309: DEC
78310: ST_TO_ADDR
78311: LD_EXP 66
78315: PUSH
78316: FOR_TO
78317: IFFALSE 78363
// begin if flags [ normalCounter + i ] then
78319: LD_VAR 0 4
78323: PUSH
78324: LD_EXP 65
78328: PUSH
78329: LD_VAR 0 8
78333: PLUS
78334: ARRAY
78335: IFFALSE 78361
// tmp := tmp & ( 100 + i ) & ; ;
78337: LD_ADDR_VAR 0 3
78341: PUSH
78342: LD_VAR 0 3
78346: PUSH
78347: LD_INT 100
78349: PUSH
78350: LD_VAR 0 8
78354: PLUS
78355: STR
78356: PUSH
78357: LD_STRING ;
78359: STR
78360: ST_TO_ADDR
// end ;
78361: GO 78316
78363: POP
78364: POP
// if tmp then
78365: LD_VAR 0 3
78369: IFFALSE 78381
// active := tmp ;
78371: LD_ADDR_VAR 0 7
78375: PUSH
78376: LD_VAR 0 3
78380: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
78381: LD_STRING getStreamItemsFromMission("
78383: PUSH
78384: LD_VAR 0 5
78388: STR
78389: PUSH
78390: LD_STRING ","
78392: STR
78393: PUSH
78394: LD_VAR 0 6
78398: STR
78399: PUSH
78400: LD_STRING ","
78402: STR
78403: PUSH
78404: LD_VAR 0 7
78408: STR
78409: PUSH
78410: LD_STRING ")
78412: STR
78413: PPUSH
78414: CALL_OW 559
// end else
78418: GO 78427
// ToLua ( getStreamItemsFromMission("","","") ) ;
78420: LD_STRING getStreamItemsFromMission("","","")
78422: PPUSH
78423: CALL_OW 559
// end ;
78427: LD_VAR 0 2
78431: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
78432: LD_EXP 64
78436: PUSH
78437: LD_EXP 69
78441: AND
78442: IFFALSE 78566
78444: GO 78446
78446: DISABLE
78447: LD_INT 0
78449: PPUSH
78450: PPUSH
// begin enable ;
78451: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
78452: LD_ADDR_VAR 0 2
78456: PUSH
78457: LD_INT 22
78459: PUSH
78460: LD_OWVAR 2
78464: PUSH
78465: EMPTY
78466: LIST
78467: LIST
78468: PUSH
78469: LD_INT 2
78471: PUSH
78472: LD_INT 34
78474: PUSH
78475: LD_INT 7
78477: PUSH
78478: EMPTY
78479: LIST
78480: LIST
78481: PUSH
78482: LD_INT 34
78484: PUSH
78485: LD_INT 45
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: PUSH
78492: LD_INT 34
78494: PUSH
78495: LD_INT 28
78497: PUSH
78498: EMPTY
78499: LIST
78500: LIST
78501: PUSH
78502: LD_INT 34
78504: PUSH
78505: LD_INT 47
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: LIST
78516: LIST
78517: LIST
78518: PUSH
78519: EMPTY
78520: LIST
78521: LIST
78522: PPUSH
78523: CALL_OW 69
78527: ST_TO_ADDR
// if not tmp then
78528: LD_VAR 0 2
78532: NOT
78533: IFFALSE 78537
// exit ;
78535: GO 78566
// for i in tmp do
78537: LD_ADDR_VAR 0 1
78541: PUSH
78542: LD_VAR 0 2
78546: PUSH
78547: FOR_IN
78548: IFFALSE 78564
// begin SetLives ( i , 0 ) ;
78550: LD_VAR 0 1
78554: PPUSH
78555: LD_INT 0
78557: PPUSH
78558: CALL_OW 234
// end ;
78562: GO 78547
78564: POP
78565: POP
// end ;
78566: PPOPN 2
78568: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
78569: LD_EXP 64
78573: PUSH
78574: LD_EXP 70
78578: AND
78579: IFFALSE 78663
78581: GO 78583
78583: DISABLE
78584: LD_INT 0
78586: PPUSH
78587: PPUSH
// begin enable ;
78588: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
78589: LD_ADDR_VAR 0 2
78593: PUSH
78594: LD_INT 22
78596: PUSH
78597: LD_OWVAR 2
78601: PUSH
78602: EMPTY
78603: LIST
78604: LIST
78605: PUSH
78606: LD_INT 32
78608: PUSH
78609: LD_INT 3
78611: PUSH
78612: EMPTY
78613: LIST
78614: LIST
78615: PUSH
78616: EMPTY
78617: LIST
78618: LIST
78619: PPUSH
78620: CALL_OW 69
78624: ST_TO_ADDR
// if not tmp then
78625: LD_VAR 0 2
78629: NOT
78630: IFFALSE 78634
// exit ;
78632: GO 78663
// for i in tmp do
78634: LD_ADDR_VAR 0 1
78638: PUSH
78639: LD_VAR 0 2
78643: PUSH
78644: FOR_IN
78645: IFFALSE 78661
// begin SetLives ( i , 0 ) ;
78647: LD_VAR 0 1
78651: PPUSH
78652: LD_INT 0
78654: PPUSH
78655: CALL_OW 234
// end ;
78659: GO 78644
78661: POP
78662: POP
// end ;
78663: PPOPN 2
78665: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
78666: LD_EXP 64
78670: PUSH
78671: LD_EXP 67
78675: AND
78676: IFFALSE 78769
78678: GO 78680
78680: DISABLE
78681: LD_INT 0
78683: PPUSH
// begin enable ;
78684: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
78685: LD_ADDR_VAR 0 1
78689: PUSH
78690: LD_INT 22
78692: PUSH
78693: LD_OWVAR 2
78697: PUSH
78698: EMPTY
78699: LIST
78700: LIST
78701: PUSH
78702: LD_INT 2
78704: PUSH
78705: LD_INT 25
78707: PUSH
78708: LD_INT 5
78710: PUSH
78711: EMPTY
78712: LIST
78713: LIST
78714: PUSH
78715: LD_INT 25
78717: PUSH
78718: LD_INT 9
78720: PUSH
78721: EMPTY
78722: LIST
78723: LIST
78724: PUSH
78725: LD_INT 25
78727: PUSH
78728: LD_INT 8
78730: PUSH
78731: EMPTY
78732: LIST
78733: LIST
78734: PUSH
78735: EMPTY
78736: LIST
78737: LIST
78738: LIST
78739: LIST
78740: PUSH
78741: EMPTY
78742: LIST
78743: LIST
78744: PPUSH
78745: CALL_OW 69
78749: PUSH
78750: FOR_IN
78751: IFFALSE 78767
// begin SetClass ( i , 1 ) ;
78753: LD_VAR 0 1
78757: PPUSH
78758: LD_INT 1
78760: PPUSH
78761: CALL_OW 336
// end ;
78765: GO 78750
78767: POP
78768: POP
// end ;
78769: PPOPN 1
78771: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
78772: LD_EXP 64
78776: PUSH
78777: LD_EXP 68
78781: AND
78782: PUSH
78783: LD_OWVAR 65
78787: PUSH
78788: LD_INT 7
78790: LESS
78791: AND
78792: IFFALSE 78806
78794: GO 78796
78796: DISABLE
// begin enable ;
78797: ENABLE
// game_speed := 7 ;
78798: LD_ADDR_OWVAR 65
78802: PUSH
78803: LD_INT 7
78805: ST_TO_ADDR
// end ;
78806: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
78807: LD_EXP 64
78811: PUSH
78812: LD_EXP 71
78816: AND
78817: IFFALSE 79019
78819: GO 78821
78821: DISABLE
78822: LD_INT 0
78824: PPUSH
78825: PPUSH
78826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78827: LD_ADDR_VAR 0 3
78831: PUSH
78832: LD_INT 81
78834: PUSH
78835: LD_OWVAR 2
78839: PUSH
78840: EMPTY
78841: LIST
78842: LIST
78843: PUSH
78844: LD_INT 21
78846: PUSH
78847: LD_INT 1
78849: PUSH
78850: EMPTY
78851: LIST
78852: LIST
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: PPUSH
78858: CALL_OW 69
78862: ST_TO_ADDR
// if not tmp then
78863: LD_VAR 0 3
78867: NOT
78868: IFFALSE 78872
// exit ;
78870: GO 79019
// if tmp > 5 then
78872: LD_VAR 0 3
78876: PUSH
78877: LD_INT 5
78879: GREATER
78880: IFFALSE 78892
// k := 5 else
78882: LD_ADDR_VAR 0 2
78886: PUSH
78887: LD_INT 5
78889: ST_TO_ADDR
78890: GO 78902
// k := tmp ;
78892: LD_ADDR_VAR 0 2
78896: PUSH
78897: LD_VAR 0 3
78901: ST_TO_ADDR
// for i := 1 to k do
78902: LD_ADDR_VAR 0 1
78906: PUSH
78907: DOUBLE
78908: LD_INT 1
78910: DEC
78911: ST_TO_ADDR
78912: LD_VAR 0 2
78916: PUSH
78917: FOR_TO
78918: IFFALSE 79017
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
78920: LD_VAR 0 3
78924: PUSH
78925: LD_VAR 0 1
78929: ARRAY
78930: PPUSH
78931: LD_VAR 0 1
78935: PUSH
78936: LD_INT 4
78938: MOD
78939: PUSH
78940: LD_INT 1
78942: PLUS
78943: PPUSH
78944: CALL_OW 259
78948: PUSH
78949: LD_INT 10
78951: LESS
78952: IFFALSE 79015
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
78954: LD_VAR 0 3
78958: PUSH
78959: LD_VAR 0 1
78963: ARRAY
78964: PPUSH
78965: LD_VAR 0 1
78969: PUSH
78970: LD_INT 4
78972: MOD
78973: PUSH
78974: LD_INT 1
78976: PLUS
78977: PPUSH
78978: LD_VAR 0 3
78982: PUSH
78983: LD_VAR 0 1
78987: ARRAY
78988: PPUSH
78989: LD_VAR 0 1
78993: PUSH
78994: LD_INT 4
78996: MOD
78997: PUSH
78998: LD_INT 1
79000: PLUS
79001: PPUSH
79002: CALL_OW 259
79006: PUSH
79007: LD_INT 1
79009: PLUS
79010: PPUSH
79011: CALL_OW 237
79015: GO 78917
79017: POP
79018: POP
// end ;
79019: PPOPN 3
79021: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
79022: LD_EXP 64
79026: PUSH
79027: LD_EXP 72
79031: AND
79032: IFFALSE 79052
79034: GO 79036
79036: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
79037: LD_INT 4
79039: PPUSH
79040: LD_OWVAR 2
79044: PPUSH
79045: LD_INT 0
79047: PPUSH
79048: CALL_OW 324
79052: END
// every 0 0$1 trigger StreamModeActive and sShovel do
79053: LD_EXP 64
79057: PUSH
79058: LD_EXP 101
79062: AND
79063: IFFALSE 79083
79065: GO 79067
79067: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
79068: LD_INT 19
79070: PPUSH
79071: LD_OWVAR 2
79075: PPUSH
79076: LD_INT 0
79078: PPUSH
79079: CALL_OW 324
79083: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
79084: LD_EXP 64
79088: PUSH
79089: LD_EXP 73
79093: AND
79094: IFFALSE 79196
79096: GO 79098
79098: DISABLE
79099: LD_INT 0
79101: PPUSH
79102: PPUSH
// begin enable ;
79103: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
79104: LD_ADDR_VAR 0 2
79108: PUSH
79109: LD_INT 22
79111: PUSH
79112: LD_OWVAR 2
79116: PUSH
79117: EMPTY
79118: LIST
79119: LIST
79120: PUSH
79121: LD_INT 2
79123: PUSH
79124: LD_INT 34
79126: PUSH
79127: LD_INT 11
79129: PUSH
79130: EMPTY
79131: LIST
79132: LIST
79133: PUSH
79134: LD_INT 34
79136: PUSH
79137: LD_INT 30
79139: PUSH
79140: EMPTY
79141: LIST
79142: LIST
79143: PUSH
79144: EMPTY
79145: LIST
79146: LIST
79147: LIST
79148: PUSH
79149: EMPTY
79150: LIST
79151: LIST
79152: PPUSH
79153: CALL_OW 69
79157: ST_TO_ADDR
// if not tmp then
79158: LD_VAR 0 2
79162: NOT
79163: IFFALSE 79167
// exit ;
79165: GO 79196
// for i in tmp do
79167: LD_ADDR_VAR 0 1
79171: PUSH
79172: LD_VAR 0 2
79176: PUSH
79177: FOR_IN
79178: IFFALSE 79194
// begin SetLives ( i , 0 ) ;
79180: LD_VAR 0 1
79184: PPUSH
79185: LD_INT 0
79187: PPUSH
79188: CALL_OW 234
// end ;
79192: GO 79177
79194: POP
79195: POP
// end ;
79196: PPOPN 2
79198: END
// every 0 0$1 trigger StreamModeActive and sBunker do
79199: LD_EXP 64
79203: PUSH
79204: LD_EXP 74
79208: AND
79209: IFFALSE 79229
79211: GO 79213
79213: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
79214: LD_INT 32
79216: PPUSH
79217: LD_OWVAR 2
79221: PPUSH
79222: LD_INT 0
79224: PPUSH
79225: CALL_OW 324
79229: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
79230: LD_EXP 64
79234: PUSH
79235: LD_EXP 75
79239: AND
79240: IFFALSE 79421
79242: GO 79244
79244: DISABLE
79245: LD_INT 0
79247: PPUSH
79248: PPUSH
79249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
79250: LD_ADDR_VAR 0 2
79254: PUSH
79255: LD_INT 22
79257: PUSH
79258: LD_OWVAR 2
79262: PUSH
79263: EMPTY
79264: LIST
79265: LIST
79266: PUSH
79267: LD_INT 33
79269: PUSH
79270: LD_INT 3
79272: PUSH
79273: EMPTY
79274: LIST
79275: LIST
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: PPUSH
79281: CALL_OW 69
79285: ST_TO_ADDR
// if not tmp then
79286: LD_VAR 0 2
79290: NOT
79291: IFFALSE 79295
// exit ;
79293: GO 79421
// side := 0 ;
79295: LD_ADDR_VAR 0 3
79299: PUSH
79300: LD_INT 0
79302: ST_TO_ADDR
// for i := 1 to 8 do
79303: LD_ADDR_VAR 0 1
79307: PUSH
79308: DOUBLE
79309: LD_INT 1
79311: DEC
79312: ST_TO_ADDR
79313: LD_INT 8
79315: PUSH
79316: FOR_TO
79317: IFFALSE 79365
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
79319: LD_OWVAR 2
79323: PUSH
79324: LD_VAR 0 1
79328: NONEQUAL
79329: PUSH
79330: LD_OWVAR 2
79334: PPUSH
79335: LD_VAR 0 1
79339: PPUSH
79340: CALL_OW 81
79344: PUSH
79345: LD_INT 2
79347: EQUAL
79348: AND
79349: IFFALSE 79363
// begin side := i ;
79351: LD_ADDR_VAR 0 3
79355: PUSH
79356: LD_VAR 0 1
79360: ST_TO_ADDR
// break ;
79361: GO 79365
// end ;
79363: GO 79316
79365: POP
79366: POP
// if not side then
79367: LD_VAR 0 3
79371: NOT
79372: IFFALSE 79376
// exit ;
79374: GO 79421
// for i := 1 to tmp do
79376: LD_ADDR_VAR 0 1
79380: PUSH
79381: DOUBLE
79382: LD_INT 1
79384: DEC
79385: ST_TO_ADDR
79386: LD_VAR 0 2
79390: PUSH
79391: FOR_TO
79392: IFFALSE 79419
// if Prob ( 60 ) then
79394: LD_INT 60
79396: PPUSH
79397: CALL_OW 13
79401: IFFALSE 79417
// SetSide ( i , side ) ;
79403: LD_VAR 0 1
79407: PPUSH
79408: LD_VAR 0 3
79412: PPUSH
79413: CALL_OW 235
79417: GO 79391
79419: POP
79420: POP
// end ;
79421: PPOPN 3
79423: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
79424: LD_EXP 64
79428: PUSH
79429: LD_EXP 77
79433: AND
79434: IFFALSE 79553
79436: GO 79438
79438: DISABLE
79439: LD_INT 0
79441: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
79442: LD_ADDR_VAR 0 1
79446: PUSH
79447: LD_INT 22
79449: PUSH
79450: LD_OWVAR 2
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: PUSH
79459: LD_INT 21
79461: PUSH
79462: LD_INT 1
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: LD_INT 3
79471: PUSH
79472: LD_INT 23
79474: PUSH
79475: LD_INT 0
79477: PUSH
79478: EMPTY
79479: LIST
79480: LIST
79481: PUSH
79482: EMPTY
79483: LIST
79484: LIST
79485: PUSH
79486: EMPTY
79487: LIST
79488: LIST
79489: LIST
79490: PPUSH
79491: CALL_OW 69
79495: PUSH
79496: FOR_IN
79497: IFFALSE 79551
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
79499: LD_VAR 0 1
79503: PPUSH
79504: CALL_OW 257
79508: PUSH
79509: LD_INT 1
79511: PUSH
79512: LD_INT 2
79514: PUSH
79515: LD_INT 3
79517: PUSH
79518: LD_INT 4
79520: PUSH
79521: EMPTY
79522: LIST
79523: LIST
79524: LIST
79525: LIST
79526: IN
79527: IFFALSE 79549
// SetClass ( un , rand ( 1 , 4 ) ) ;
79529: LD_VAR 0 1
79533: PPUSH
79534: LD_INT 1
79536: PPUSH
79537: LD_INT 4
79539: PPUSH
79540: CALL_OW 12
79544: PPUSH
79545: CALL_OW 336
79549: GO 79496
79551: POP
79552: POP
// end ;
79553: PPOPN 1
79555: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
79556: LD_EXP 64
79560: PUSH
79561: LD_EXP 76
79565: AND
79566: IFFALSE 79645
79568: GO 79570
79570: DISABLE
79571: LD_INT 0
79573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79574: LD_ADDR_VAR 0 1
79578: PUSH
79579: LD_INT 22
79581: PUSH
79582: LD_OWVAR 2
79586: PUSH
79587: EMPTY
79588: LIST
79589: LIST
79590: PUSH
79591: LD_INT 21
79593: PUSH
79594: LD_INT 3
79596: PUSH
79597: EMPTY
79598: LIST
79599: LIST
79600: PUSH
79601: EMPTY
79602: LIST
79603: LIST
79604: PPUSH
79605: CALL_OW 69
79609: ST_TO_ADDR
// if not tmp then
79610: LD_VAR 0 1
79614: NOT
79615: IFFALSE 79619
// exit ;
79617: GO 79645
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
79619: LD_VAR 0 1
79623: PUSH
79624: LD_INT 1
79626: PPUSH
79627: LD_VAR 0 1
79631: PPUSH
79632: CALL_OW 12
79636: ARRAY
79637: PPUSH
79638: LD_INT 100
79640: PPUSH
79641: CALL_OW 234
// end ;
79645: PPOPN 1
79647: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
79648: LD_EXP 64
79652: PUSH
79653: LD_EXP 78
79657: AND
79658: IFFALSE 79756
79660: GO 79662
79662: DISABLE
79663: LD_INT 0
79665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79666: LD_ADDR_VAR 0 1
79670: PUSH
79671: LD_INT 22
79673: PUSH
79674: LD_OWVAR 2
79678: PUSH
79679: EMPTY
79680: LIST
79681: LIST
79682: PUSH
79683: LD_INT 21
79685: PUSH
79686: LD_INT 1
79688: PUSH
79689: EMPTY
79690: LIST
79691: LIST
79692: PUSH
79693: EMPTY
79694: LIST
79695: LIST
79696: PPUSH
79697: CALL_OW 69
79701: ST_TO_ADDR
// if not tmp then
79702: LD_VAR 0 1
79706: NOT
79707: IFFALSE 79711
// exit ;
79709: GO 79756
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
79711: LD_VAR 0 1
79715: PUSH
79716: LD_INT 1
79718: PPUSH
79719: LD_VAR 0 1
79723: PPUSH
79724: CALL_OW 12
79728: ARRAY
79729: PPUSH
79730: LD_INT 1
79732: PPUSH
79733: LD_INT 4
79735: PPUSH
79736: CALL_OW 12
79740: PPUSH
79741: LD_INT 3000
79743: PPUSH
79744: LD_INT 9000
79746: PPUSH
79747: CALL_OW 12
79751: PPUSH
79752: CALL_OW 492
// end ;
79756: PPOPN 1
79758: END
// every 0 0$1 trigger StreamModeActive and sDepot do
79759: LD_EXP 64
79763: PUSH
79764: LD_EXP 79
79768: AND
79769: IFFALSE 79789
79771: GO 79773
79773: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
79774: LD_INT 1
79776: PPUSH
79777: LD_OWVAR 2
79781: PPUSH
79782: LD_INT 0
79784: PPUSH
79785: CALL_OW 324
79789: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
79790: LD_EXP 64
79794: PUSH
79795: LD_EXP 80
79799: AND
79800: IFFALSE 79883
79802: GO 79804
79804: DISABLE
79805: LD_INT 0
79807: PPUSH
79808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79809: LD_ADDR_VAR 0 2
79813: PUSH
79814: LD_INT 22
79816: PUSH
79817: LD_OWVAR 2
79821: PUSH
79822: EMPTY
79823: LIST
79824: LIST
79825: PUSH
79826: LD_INT 21
79828: PUSH
79829: LD_INT 3
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: PPUSH
79840: CALL_OW 69
79844: ST_TO_ADDR
// if not tmp then
79845: LD_VAR 0 2
79849: NOT
79850: IFFALSE 79854
// exit ;
79852: GO 79883
// for i in tmp do
79854: LD_ADDR_VAR 0 1
79858: PUSH
79859: LD_VAR 0 2
79863: PUSH
79864: FOR_IN
79865: IFFALSE 79881
// SetBLevel ( i , 10 ) ;
79867: LD_VAR 0 1
79871: PPUSH
79872: LD_INT 10
79874: PPUSH
79875: CALL_OW 241
79879: GO 79864
79881: POP
79882: POP
// end ;
79883: PPOPN 2
79885: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
79886: LD_EXP 64
79890: PUSH
79891: LD_EXP 81
79895: AND
79896: IFFALSE 80007
79898: GO 79900
79900: DISABLE
79901: LD_INT 0
79903: PPUSH
79904: PPUSH
79905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79906: LD_ADDR_VAR 0 3
79910: PUSH
79911: LD_INT 22
79913: PUSH
79914: LD_OWVAR 2
79918: PUSH
79919: EMPTY
79920: LIST
79921: LIST
79922: PUSH
79923: LD_INT 25
79925: PUSH
79926: LD_INT 1
79928: PUSH
79929: EMPTY
79930: LIST
79931: LIST
79932: PUSH
79933: EMPTY
79934: LIST
79935: LIST
79936: PPUSH
79937: CALL_OW 69
79941: ST_TO_ADDR
// if not tmp then
79942: LD_VAR 0 3
79946: NOT
79947: IFFALSE 79951
// exit ;
79949: GO 80007
// un := tmp [ rand ( 1 , tmp ) ] ;
79951: LD_ADDR_VAR 0 2
79955: PUSH
79956: LD_VAR 0 3
79960: PUSH
79961: LD_INT 1
79963: PPUSH
79964: LD_VAR 0 3
79968: PPUSH
79969: CALL_OW 12
79973: ARRAY
79974: ST_TO_ADDR
// if Crawls ( un ) then
79975: LD_VAR 0 2
79979: PPUSH
79980: CALL_OW 318
79984: IFFALSE 79995
// ComWalk ( un ) ;
79986: LD_VAR 0 2
79990: PPUSH
79991: CALL_OW 138
// SetClass ( un , class_sniper ) ;
79995: LD_VAR 0 2
79999: PPUSH
80000: LD_INT 5
80002: PPUSH
80003: CALL_OW 336
// end ;
80007: PPOPN 3
80009: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
80010: LD_EXP 64
80014: PUSH
80015: LD_EXP 82
80019: AND
80020: PUSH
80021: LD_OWVAR 67
80025: PUSH
80026: LD_INT 4
80028: LESS
80029: AND
80030: IFFALSE 80049
80032: GO 80034
80034: DISABLE
// begin Difficulty := Difficulty + 1 ;
80035: LD_ADDR_OWVAR 67
80039: PUSH
80040: LD_OWVAR 67
80044: PUSH
80045: LD_INT 1
80047: PLUS
80048: ST_TO_ADDR
// end ;
80049: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
80050: LD_EXP 64
80054: PUSH
80055: LD_EXP 83
80059: AND
80060: IFFALSE 80163
80062: GO 80064
80064: DISABLE
80065: LD_INT 0
80067: PPUSH
// begin for i := 1 to 5 do
80068: LD_ADDR_VAR 0 1
80072: PUSH
80073: DOUBLE
80074: LD_INT 1
80076: DEC
80077: ST_TO_ADDR
80078: LD_INT 5
80080: PUSH
80081: FOR_TO
80082: IFFALSE 80161
// begin uc_nation := nation_nature ;
80084: LD_ADDR_OWVAR 21
80088: PUSH
80089: LD_INT 0
80091: ST_TO_ADDR
// uc_side := 0 ;
80092: LD_ADDR_OWVAR 20
80096: PUSH
80097: LD_INT 0
80099: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80100: LD_ADDR_OWVAR 29
80104: PUSH
80105: LD_INT 12
80107: PUSH
80108: LD_INT 12
80110: PUSH
80111: EMPTY
80112: LIST
80113: LIST
80114: ST_TO_ADDR
// hc_agressivity := 20 ;
80115: LD_ADDR_OWVAR 35
80119: PUSH
80120: LD_INT 20
80122: ST_TO_ADDR
// hc_class := class_tiger ;
80123: LD_ADDR_OWVAR 28
80127: PUSH
80128: LD_INT 14
80130: ST_TO_ADDR
// hc_gallery :=  ;
80131: LD_ADDR_OWVAR 33
80135: PUSH
80136: LD_STRING 
80138: ST_TO_ADDR
// hc_name :=  ;
80139: LD_ADDR_OWVAR 26
80143: PUSH
80144: LD_STRING 
80146: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
80147: CALL_OW 44
80151: PPUSH
80152: LD_INT 0
80154: PPUSH
80155: CALL_OW 51
// end ;
80159: GO 80081
80161: POP
80162: POP
// end ;
80163: PPOPN 1
80165: END
// every 0 0$1 trigger StreamModeActive and sBomb do
80166: LD_EXP 64
80170: PUSH
80171: LD_EXP 84
80175: AND
80176: IFFALSE 80185
80178: GO 80180
80180: DISABLE
// StreamSibBomb ;
80181: CALL 80186 0 0
80185: END
// export function StreamSibBomb ; var i , x , y ; begin
80186: LD_INT 0
80188: PPUSH
80189: PPUSH
80190: PPUSH
80191: PPUSH
// result := false ;
80192: LD_ADDR_VAR 0 1
80196: PUSH
80197: LD_INT 0
80199: ST_TO_ADDR
// for i := 1 to 16 do
80200: LD_ADDR_VAR 0 2
80204: PUSH
80205: DOUBLE
80206: LD_INT 1
80208: DEC
80209: ST_TO_ADDR
80210: LD_INT 16
80212: PUSH
80213: FOR_TO
80214: IFFALSE 80413
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80216: LD_ADDR_VAR 0 3
80220: PUSH
80221: LD_INT 10
80223: PUSH
80224: LD_INT 20
80226: PUSH
80227: LD_INT 30
80229: PUSH
80230: LD_INT 40
80232: PUSH
80233: LD_INT 50
80235: PUSH
80236: LD_INT 60
80238: PUSH
80239: LD_INT 70
80241: PUSH
80242: LD_INT 80
80244: PUSH
80245: LD_INT 90
80247: PUSH
80248: LD_INT 100
80250: PUSH
80251: LD_INT 110
80253: PUSH
80254: LD_INT 120
80256: PUSH
80257: LD_INT 130
80259: PUSH
80260: LD_INT 140
80262: PUSH
80263: LD_INT 150
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: LIST
80270: LIST
80271: LIST
80272: LIST
80273: LIST
80274: LIST
80275: LIST
80276: LIST
80277: LIST
80278: LIST
80279: LIST
80280: LIST
80281: LIST
80282: PUSH
80283: LD_INT 1
80285: PPUSH
80286: LD_INT 15
80288: PPUSH
80289: CALL_OW 12
80293: ARRAY
80294: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80295: LD_ADDR_VAR 0 4
80299: PUSH
80300: LD_INT 10
80302: PUSH
80303: LD_INT 20
80305: PUSH
80306: LD_INT 30
80308: PUSH
80309: LD_INT 40
80311: PUSH
80312: LD_INT 50
80314: PUSH
80315: LD_INT 60
80317: PUSH
80318: LD_INT 70
80320: PUSH
80321: LD_INT 80
80323: PUSH
80324: LD_INT 90
80326: PUSH
80327: LD_INT 100
80329: PUSH
80330: LD_INT 110
80332: PUSH
80333: LD_INT 120
80335: PUSH
80336: LD_INT 130
80338: PUSH
80339: LD_INT 140
80341: PUSH
80342: LD_INT 150
80344: PUSH
80345: EMPTY
80346: LIST
80347: LIST
80348: LIST
80349: LIST
80350: LIST
80351: LIST
80352: LIST
80353: LIST
80354: LIST
80355: LIST
80356: LIST
80357: LIST
80358: LIST
80359: LIST
80360: LIST
80361: PUSH
80362: LD_INT 1
80364: PPUSH
80365: LD_INT 15
80367: PPUSH
80368: CALL_OW 12
80372: ARRAY
80373: ST_TO_ADDR
// if ValidHex ( x , y ) then
80374: LD_VAR 0 3
80378: PPUSH
80379: LD_VAR 0 4
80383: PPUSH
80384: CALL_OW 488
80388: IFFALSE 80411
// begin result := [ x , y ] ;
80390: LD_ADDR_VAR 0 1
80394: PUSH
80395: LD_VAR 0 3
80399: PUSH
80400: LD_VAR 0 4
80404: PUSH
80405: EMPTY
80406: LIST
80407: LIST
80408: ST_TO_ADDR
// break ;
80409: GO 80413
// end ; end ;
80411: GO 80213
80413: POP
80414: POP
// if result then
80415: LD_VAR 0 1
80419: IFFALSE 80479
// begin ToLua ( playSibBomb() ) ;
80421: LD_STRING playSibBomb()
80423: PPUSH
80424: CALL_OW 559
// wait ( 0 0$14 ) ;
80428: LD_INT 490
80430: PPUSH
80431: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
80435: LD_VAR 0 1
80439: PUSH
80440: LD_INT 1
80442: ARRAY
80443: PPUSH
80444: LD_VAR 0 1
80448: PUSH
80449: LD_INT 2
80451: ARRAY
80452: PPUSH
80453: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
80457: LD_VAR 0 1
80461: PUSH
80462: LD_INT 1
80464: ARRAY
80465: PPUSH
80466: LD_VAR 0 1
80470: PUSH
80471: LD_INT 2
80473: ARRAY
80474: PPUSH
80475: CALL_OW 429
// end ; end ;
80479: LD_VAR 0 1
80483: RET
// every 0 0$1 trigger StreamModeActive and sReset do
80484: LD_EXP 64
80488: PUSH
80489: LD_EXP 86
80493: AND
80494: IFFALSE 80506
80496: GO 80498
80498: DISABLE
// YouLost (  ) ;
80499: LD_STRING 
80501: PPUSH
80502: CALL_OW 104
80506: END
// every 0 0$1 trigger StreamModeActive and sFog do
80507: LD_EXP 64
80511: PUSH
80512: LD_EXP 85
80516: AND
80517: IFFALSE 80531
80519: GO 80521
80521: DISABLE
// FogOff ( your_side ) ;
80522: LD_OWVAR 2
80526: PPUSH
80527: CALL_OW 344
80531: END
// every 0 0$1 trigger StreamModeActive and sSun do
80532: LD_EXP 64
80536: PUSH
80537: LD_EXP 87
80541: AND
80542: IFFALSE 80570
80544: GO 80546
80546: DISABLE
// begin solar_recharge_percent := 0 ;
80547: LD_ADDR_OWVAR 79
80551: PUSH
80552: LD_INT 0
80554: ST_TO_ADDR
// wait ( 5 5$00 ) ;
80555: LD_INT 10500
80557: PPUSH
80558: CALL_OW 67
// solar_recharge_percent := 100 ;
80562: LD_ADDR_OWVAR 79
80566: PUSH
80567: LD_INT 100
80569: ST_TO_ADDR
// end ;
80570: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
80571: LD_EXP 64
80575: PUSH
80576: LD_EXP 88
80580: AND
80581: IFFALSE 80820
80583: GO 80585
80585: DISABLE
80586: LD_INT 0
80588: PPUSH
80589: PPUSH
80590: PPUSH
// begin tmp := [ ] ;
80591: LD_ADDR_VAR 0 3
80595: PUSH
80596: EMPTY
80597: ST_TO_ADDR
// for i := 1 to 6 do
80598: LD_ADDR_VAR 0 1
80602: PUSH
80603: DOUBLE
80604: LD_INT 1
80606: DEC
80607: ST_TO_ADDR
80608: LD_INT 6
80610: PUSH
80611: FOR_TO
80612: IFFALSE 80717
// begin uc_nation := nation_nature ;
80614: LD_ADDR_OWVAR 21
80618: PUSH
80619: LD_INT 0
80621: ST_TO_ADDR
// uc_side := 0 ;
80622: LD_ADDR_OWVAR 20
80626: PUSH
80627: LD_INT 0
80629: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80630: LD_ADDR_OWVAR 29
80634: PUSH
80635: LD_INT 12
80637: PUSH
80638: LD_INT 12
80640: PUSH
80641: EMPTY
80642: LIST
80643: LIST
80644: ST_TO_ADDR
// hc_agressivity := 20 ;
80645: LD_ADDR_OWVAR 35
80649: PUSH
80650: LD_INT 20
80652: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
80653: LD_ADDR_OWVAR 28
80657: PUSH
80658: LD_INT 17
80660: ST_TO_ADDR
// hc_gallery :=  ;
80661: LD_ADDR_OWVAR 33
80665: PUSH
80666: LD_STRING 
80668: ST_TO_ADDR
// hc_name :=  ;
80669: LD_ADDR_OWVAR 26
80673: PUSH
80674: LD_STRING 
80676: ST_TO_ADDR
// un := CreateHuman ;
80677: LD_ADDR_VAR 0 2
80681: PUSH
80682: CALL_OW 44
80686: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
80687: LD_VAR 0 2
80691: PPUSH
80692: LD_INT 1
80694: PPUSH
80695: CALL_OW 51
// tmp := tmp ^ un ;
80699: LD_ADDR_VAR 0 3
80703: PUSH
80704: LD_VAR 0 3
80708: PUSH
80709: LD_VAR 0 2
80713: ADD
80714: ST_TO_ADDR
// end ;
80715: GO 80611
80717: POP
80718: POP
// repeat wait ( 0 0$1 ) ;
80719: LD_INT 35
80721: PPUSH
80722: CALL_OW 67
// for un in tmp do
80726: LD_ADDR_VAR 0 2
80730: PUSH
80731: LD_VAR 0 3
80735: PUSH
80736: FOR_IN
80737: IFFALSE 80811
// begin if IsDead ( un ) then
80739: LD_VAR 0 2
80743: PPUSH
80744: CALL_OW 301
80748: IFFALSE 80768
// begin tmp := tmp diff un ;
80750: LD_ADDR_VAR 0 3
80754: PUSH
80755: LD_VAR 0 3
80759: PUSH
80760: LD_VAR 0 2
80764: DIFF
80765: ST_TO_ADDR
// continue ;
80766: GO 80736
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
80768: LD_VAR 0 2
80772: PPUSH
80773: LD_INT 3
80775: PUSH
80776: LD_INT 22
80778: PUSH
80779: LD_INT 0
80781: PUSH
80782: EMPTY
80783: LIST
80784: LIST
80785: PUSH
80786: EMPTY
80787: LIST
80788: LIST
80789: PPUSH
80790: CALL_OW 69
80794: PPUSH
80795: LD_VAR 0 2
80799: PPUSH
80800: CALL_OW 74
80804: PPUSH
80805: CALL_OW 115
// end ;
80809: GO 80736
80811: POP
80812: POP
// until not tmp ;
80813: LD_VAR 0 3
80817: NOT
80818: IFFALSE 80719
// end ;
80820: PPOPN 3
80822: END
// every 0 0$1 trigger StreamModeActive and sTroll do
80823: LD_EXP 64
80827: PUSH
80828: LD_EXP 89
80832: AND
80833: IFFALSE 80887
80835: GO 80837
80837: DISABLE
// begin ToLua ( displayTroll(); ) ;
80838: LD_STRING displayTroll();
80840: PPUSH
80841: CALL_OW 559
// wait ( 3 3$00 ) ;
80845: LD_INT 6300
80847: PPUSH
80848: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80852: LD_STRING hideTroll();
80854: PPUSH
80855: CALL_OW 559
// wait ( 1 1$00 ) ;
80859: LD_INT 2100
80861: PPUSH
80862: CALL_OW 67
// ToLua ( displayTroll(); ) ;
80866: LD_STRING displayTroll();
80868: PPUSH
80869: CALL_OW 559
// wait ( 1 1$00 ) ;
80873: LD_INT 2100
80875: PPUSH
80876: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80880: LD_STRING hideTroll();
80882: PPUSH
80883: CALL_OW 559
// end ;
80887: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
80888: LD_EXP 64
80892: PUSH
80893: LD_EXP 90
80897: AND
80898: IFFALSE 80961
80900: GO 80902
80902: DISABLE
80903: LD_INT 0
80905: PPUSH
// begin p := 0 ;
80906: LD_ADDR_VAR 0 1
80910: PUSH
80911: LD_INT 0
80913: ST_TO_ADDR
// repeat game_speed := 1 ;
80914: LD_ADDR_OWVAR 65
80918: PUSH
80919: LD_INT 1
80921: ST_TO_ADDR
// wait ( 0 0$1 ) ;
80922: LD_INT 35
80924: PPUSH
80925: CALL_OW 67
// p := p + 1 ;
80929: LD_ADDR_VAR 0 1
80933: PUSH
80934: LD_VAR 0 1
80938: PUSH
80939: LD_INT 1
80941: PLUS
80942: ST_TO_ADDR
// until p >= 60 ;
80943: LD_VAR 0 1
80947: PUSH
80948: LD_INT 60
80950: GREATEREQUAL
80951: IFFALSE 80914
// game_speed := 4 ;
80953: LD_ADDR_OWVAR 65
80957: PUSH
80958: LD_INT 4
80960: ST_TO_ADDR
// end ;
80961: PPOPN 1
80963: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
80964: LD_EXP 64
80968: PUSH
80969: LD_EXP 91
80973: AND
80974: IFFALSE 81120
80976: GO 80978
80978: DISABLE
80979: LD_INT 0
80981: PPUSH
80982: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80983: LD_ADDR_VAR 0 1
80987: PUSH
80988: LD_INT 22
80990: PUSH
80991: LD_OWVAR 2
80995: PUSH
80996: EMPTY
80997: LIST
80998: LIST
80999: PUSH
81000: LD_INT 2
81002: PUSH
81003: LD_INT 30
81005: PUSH
81006: LD_INT 0
81008: PUSH
81009: EMPTY
81010: LIST
81011: LIST
81012: PUSH
81013: LD_INT 30
81015: PUSH
81016: LD_INT 1
81018: PUSH
81019: EMPTY
81020: LIST
81021: LIST
81022: PUSH
81023: EMPTY
81024: LIST
81025: LIST
81026: LIST
81027: PUSH
81028: EMPTY
81029: LIST
81030: LIST
81031: PPUSH
81032: CALL_OW 69
81036: ST_TO_ADDR
// if not depot then
81037: LD_VAR 0 1
81041: NOT
81042: IFFALSE 81046
// exit ;
81044: GO 81120
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
81046: LD_ADDR_VAR 0 2
81050: PUSH
81051: LD_VAR 0 1
81055: PUSH
81056: LD_INT 1
81058: PPUSH
81059: LD_VAR 0 1
81063: PPUSH
81064: CALL_OW 12
81068: ARRAY
81069: PPUSH
81070: CALL_OW 274
81074: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
81075: LD_VAR 0 2
81079: PPUSH
81080: LD_INT 1
81082: PPUSH
81083: LD_INT 0
81085: PPUSH
81086: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
81090: LD_VAR 0 2
81094: PPUSH
81095: LD_INT 2
81097: PPUSH
81098: LD_INT 0
81100: PPUSH
81101: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
81105: LD_VAR 0 2
81109: PPUSH
81110: LD_INT 3
81112: PPUSH
81113: LD_INT 0
81115: PPUSH
81116: CALL_OW 277
// end ;
81120: PPOPN 2
81122: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
81123: LD_EXP 64
81127: PUSH
81128: LD_EXP 92
81132: AND
81133: IFFALSE 81230
81135: GO 81137
81137: DISABLE
81138: LD_INT 0
81140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81141: LD_ADDR_VAR 0 1
81145: PUSH
81146: LD_INT 22
81148: PUSH
81149: LD_OWVAR 2
81153: PUSH
81154: EMPTY
81155: LIST
81156: LIST
81157: PUSH
81158: LD_INT 21
81160: PUSH
81161: LD_INT 1
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: PUSH
81168: LD_INT 3
81170: PUSH
81171: LD_INT 23
81173: PUSH
81174: LD_INT 0
81176: PUSH
81177: EMPTY
81178: LIST
81179: LIST
81180: PUSH
81181: EMPTY
81182: LIST
81183: LIST
81184: PUSH
81185: EMPTY
81186: LIST
81187: LIST
81188: LIST
81189: PPUSH
81190: CALL_OW 69
81194: ST_TO_ADDR
// if not tmp then
81195: LD_VAR 0 1
81199: NOT
81200: IFFALSE 81204
// exit ;
81202: GO 81230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
81204: LD_VAR 0 1
81208: PUSH
81209: LD_INT 1
81211: PPUSH
81212: LD_VAR 0 1
81216: PPUSH
81217: CALL_OW 12
81221: ARRAY
81222: PPUSH
81223: LD_INT 200
81225: PPUSH
81226: CALL_OW 234
// end ;
81230: PPOPN 1
81232: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
81233: LD_EXP 64
81237: PUSH
81238: LD_EXP 93
81242: AND
81243: IFFALSE 81322
81245: GO 81247
81247: DISABLE
81248: LD_INT 0
81250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
81251: LD_ADDR_VAR 0 1
81255: PUSH
81256: LD_INT 22
81258: PUSH
81259: LD_OWVAR 2
81263: PUSH
81264: EMPTY
81265: LIST
81266: LIST
81267: PUSH
81268: LD_INT 21
81270: PUSH
81271: LD_INT 2
81273: PUSH
81274: EMPTY
81275: LIST
81276: LIST
81277: PUSH
81278: EMPTY
81279: LIST
81280: LIST
81281: PPUSH
81282: CALL_OW 69
81286: ST_TO_ADDR
// if not tmp then
81287: LD_VAR 0 1
81291: NOT
81292: IFFALSE 81296
// exit ;
81294: GO 81322
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
81296: LD_VAR 0 1
81300: PUSH
81301: LD_INT 1
81303: PPUSH
81304: LD_VAR 0 1
81308: PPUSH
81309: CALL_OW 12
81313: ARRAY
81314: PPUSH
81315: LD_INT 60
81317: PPUSH
81318: CALL_OW 234
// end ;
81322: PPOPN 1
81324: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
81325: LD_EXP 64
81329: PUSH
81330: LD_EXP 94
81334: AND
81335: IFFALSE 81434
81337: GO 81339
81339: DISABLE
81340: LD_INT 0
81342: PPUSH
81343: PPUSH
// begin enable ;
81344: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
81345: LD_ADDR_VAR 0 1
81349: PUSH
81350: LD_INT 22
81352: PUSH
81353: LD_OWVAR 2
81357: PUSH
81358: EMPTY
81359: LIST
81360: LIST
81361: PUSH
81362: LD_INT 61
81364: PUSH
81365: EMPTY
81366: LIST
81367: PUSH
81368: LD_INT 33
81370: PUSH
81371: LD_INT 2
81373: PUSH
81374: EMPTY
81375: LIST
81376: LIST
81377: PUSH
81378: EMPTY
81379: LIST
81380: LIST
81381: LIST
81382: PPUSH
81383: CALL_OW 69
81387: ST_TO_ADDR
// if not tmp then
81388: LD_VAR 0 1
81392: NOT
81393: IFFALSE 81397
// exit ;
81395: GO 81434
// for i in tmp do
81397: LD_ADDR_VAR 0 2
81401: PUSH
81402: LD_VAR 0 1
81406: PUSH
81407: FOR_IN
81408: IFFALSE 81432
// if IsControledBy ( i ) then
81410: LD_VAR 0 2
81414: PPUSH
81415: CALL_OW 312
81419: IFFALSE 81430
// ComUnlink ( i ) ;
81421: LD_VAR 0 2
81425: PPUSH
81426: CALL_OW 136
81430: GO 81407
81432: POP
81433: POP
// end ;
81434: PPOPN 2
81436: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
81437: LD_EXP 64
81441: PUSH
81442: LD_EXP 95
81446: AND
81447: IFFALSE 81587
81449: GO 81451
81451: DISABLE
81452: LD_INT 0
81454: PPUSH
81455: PPUSH
// begin ToLua ( displayPowell(); ) ;
81456: LD_STRING displayPowell();
81458: PPUSH
81459: CALL_OW 559
// uc_side := 0 ;
81463: LD_ADDR_OWVAR 20
81467: PUSH
81468: LD_INT 0
81470: ST_TO_ADDR
// uc_nation := 2 ;
81471: LD_ADDR_OWVAR 21
81475: PUSH
81476: LD_INT 2
81478: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
81479: LD_ADDR_OWVAR 37
81483: PUSH
81484: LD_INT 14
81486: ST_TO_ADDR
// vc_engine := engine_siberite ;
81487: LD_ADDR_OWVAR 39
81491: PUSH
81492: LD_INT 3
81494: ST_TO_ADDR
// vc_control := control_apeman ;
81495: LD_ADDR_OWVAR 38
81499: PUSH
81500: LD_INT 5
81502: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
81503: LD_ADDR_OWVAR 40
81507: PUSH
81508: LD_INT 29
81510: ST_TO_ADDR
// un := CreateVehicle ;
81511: LD_ADDR_VAR 0 2
81515: PUSH
81516: CALL_OW 45
81520: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81521: LD_VAR 0 2
81525: PPUSH
81526: LD_INT 1
81528: PPUSH
81529: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81533: LD_INT 35
81535: PPUSH
81536: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81540: LD_VAR 0 2
81544: PPUSH
81545: LD_INT 22
81547: PUSH
81548: LD_OWVAR 2
81552: PUSH
81553: EMPTY
81554: LIST
81555: LIST
81556: PPUSH
81557: CALL_OW 69
81561: PPUSH
81562: LD_VAR 0 2
81566: PPUSH
81567: CALL_OW 74
81571: PPUSH
81572: CALL_OW 115
// until IsDead ( un ) ;
81576: LD_VAR 0 2
81580: PPUSH
81581: CALL_OW 301
81585: IFFALSE 81533
// end ;
81587: PPOPN 2
81589: END
// every 0 0$1 trigger StreamModeActive and sStu do
81590: LD_EXP 64
81594: PUSH
81595: LD_EXP 103
81599: AND
81600: IFFALSE 81616
81602: GO 81604
81604: DISABLE
// begin ToLua ( displayStucuk(); ) ;
81605: LD_STRING displayStucuk();
81607: PPUSH
81608: CALL_OW 559
// ResetFog ;
81612: CALL_OW 335
// end ;
81616: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
81617: LD_EXP 64
81621: PUSH
81622: LD_EXP 96
81626: AND
81627: IFFALSE 81768
81629: GO 81631
81631: DISABLE
81632: LD_INT 0
81634: PPUSH
81635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81636: LD_ADDR_VAR 0 2
81640: PUSH
81641: LD_INT 22
81643: PUSH
81644: LD_OWVAR 2
81648: PUSH
81649: EMPTY
81650: LIST
81651: LIST
81652: PUSH
81653: LD_INT 21
81655: PUSH
81656: LD_INT 1
81658: PUSH
81659: EMPTY
81660: LIST
81661: LIST
81662: PUSH
81663: EMPTY
81664: LIST
81665: LIST
81666: PPUSH
81667: CALL_OW 69
81671: ST_TO_ADDR
// if not tmp then
81672: LD_VAR 0 2
81676: NOT
81677: IFFALSE 81681
// exit ;
81679: GO 81768
// un := tmp [ rand ( 1 , tmp ) ] ;
81681: LD_ADDR_VAR 0 1
81685: PUSH
81686: LD_VAR 0 2
81690: PUSH
81691: LD_INT 1
81693: PPUSH
81694: LD_VAR 0 2
81698: PPUSH
81699: CALL_OW 12
81703: ARRAY
81704: ST_TO_ADDR
// SetSide ( un , 0 ) ;
81705: LD_VAR 0 1
81709: PPUSH
81710: LD_INT 0
81712: PPUSH
81713: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
81717: LD_VAR 0 1
81721: PPUSH
81722: LD_OWVAR 3
81726: PUSH
81727: LD_VAR 0 1
81731: DIFF
81732: PPUSH
81733: LD_VAR 0 1
81737: PPUSH
81738: CALL_OW 74
81742: PPUSH
81743: CALL_OW 115
// wait ( 0 0$20 ) ;
81747: LD_INT 700
81749: PPUSH
81750: CALL_OW 67
// SetSide ( un , your_side ) ;
81754: LD_VAR 0 1
81758: PPUSH
81759: LD_OWVAR 2
81763: PPUSH
81764: CALL_OW 235
// end ;
81768: PPOPN 2
81770: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
81771: LD_EXP 64
81775: PUSH
81776: LD_EXP 97
81780: AND
81781: IFFALSE 81887
81783: GO 81785
81785: DISABLE
81786: LD_INT 0
81788: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81789: LD_ADDR_VAR 0 1
81793: PUSH
81794: LD_INT 22
81796: PUSH
81797: LD_OWVAR 2
81801: PUSH
81802: EMPTY
81803: LIST
81804: LIST
81805: PUSH
81806: LD_INT 2
81808: PUSH
81809: LD_INT 30
81811: PUSH
81812: LD_INT 0
81814: PUSH
81815: EMPTY
81816: LIST
81817: LIST
81818: PUSH
81819: LD_INT 30
81821: PUSH
81822: LD_INT 1
81824: PUSH
81825: EMPTY
81826: LIST
81827: LIST
81828: PUSH
81829: EMPTY
81830: LIST
81831: LIST
81832: LIST
81833: PUSH
81834: EMPTY
81835: LIST
81836: LIST
81837: PPUSH
81838: CALL_OW 69
81842: ST_TO_ADDR
// if not depot then
81843: LD_VAR 0 1
81847: NOT
81848: IFFALSE 81852
// exit ;
81850: GO 81887
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
81852: LD_VAR 0 1
81856: PUSH
81857: LD_INT 1
81859: ARRAY
81860: PPUSH
81861: CALL_OW 250
81865: PPUSH
81866: LD_VAR 0 1
81870: PUSH
81871: LD_INT 1
81873: ARRAY
81874: PPUSH
81875: CALL_OW 251
81879: PPUSH
81880: LD_INT 70
81882: PPUSH
81883: CALL_OW 495
// end ;
81887: PPOPN 1
81889: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
81890: LD_EXP 64
81894: PUSH
81895: LD_EXP 98
81899: AND
81900: IFFALSE 82111
81902: GO 81904
81904: DISABLE
81905: LD_INT 0
81907: PPUSH
81908: PPUSH
81909: PPUSH
81910: PPUSH
81911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81912: LD_ADDR_VAR 0 5
81916: PUSH
81917: LD_INT 22
81919: PUSH
81920: LD_OWVAR 2
81924: PUSH
81925: EMPTY
81926: LIST
81927: LIST
81928: PUSH
81929: LD_INT 21
81931: PUSH
81932: LD_INT 1
81934: PUSH
81935: EMPTY
81936: LIST
81937: LIST
81938: PUSH
81939: EMPTY
81940: LIST
81941: LIST
81942: PPUSH
81943: CALL_OW 69
81947: ST_TO_ADDR
// if not tmp then
81948: LD_VAR 0 5
81952: NOT
81953: IFFALSE 81957
// exit ;
81955: GO 82111
// for i in tmp do
81957: LD_ADDR_VAR 0 1
81961: PUSH
81962: LD_VAR 0 5
81966: PUSH
81967: FOR_IN
81968: IFFALSE 82109
// begin d := rand ( 0 , 5 ) ;
81970: LD_ADDR_VAR 0 4
81974: PUSH
81975: LD_INT 0
81977: PPUSH
81978: LD_INT 5
81980: PPUSH
81981: CALL_OW 12
81985: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
81986: LD_ADDR_VAR 0 2
81990: PUSH
81991: LD_VAR 0 1
81995: PPUSH
81996: CALL_OW 250
82000: PPUSH
82001: LD_VAR 0 4
82005: PPUSH
82006: LD_INT 3
82008: PPUSH
82009: LD_INT 12
82011: PPUSH
82012: CALL_OW 12
82016: PPUSH
82017: CALL_OW 272
82021: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
82022: LD_ADDR_VAR 0 3
82026: PUSH
82027: LD_VAR 0 1
82031: PPUSH
82032: CALL_OW 251
82036: PPUSH
82037: LD_VAR 0 4
82041: PPUSH
82042: LD_INT 3
82044: PPUSH
82045: LD_INT 12
82047: PPUSH
82048: CALL_OW 12
82052: PPUSH
82053: CALL_OW 273
82057: ST_TO_ADDR
// if ValidHex ( x , y ) then
82058: LD_VAR 0 2
82062: PPUSH
82063: LD_VAR 0 3
82067: PPUSH
82068: CALL_OW 488
82072: IFFALSE 82107
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
82074: LD_VAR 0 1
82078: PPUSH
82079: LD_VAR 0 2
82083: PPUSH
82084: LD_VAR 0 3
82088: PPUSH
82089: LD_INT 3
82091: PPUSH
82092: LD_INT 6
82094: PPUSH
82095: CALL_OW 12
82099: PPUSH
82100: LD_INT 1
82102: PPUSH
82103: CALL_OW 483
// end ;
82107: GO 81967
82109: POP
82110: POP
// end ;
82111: PPOPN 5
82113: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
82114: LD_EXP 64
82118: PUSH
82119: LD_EXP 99
82123: AND
82124: IFFALSE 82218
82126: GO 82128
82128: DISABLE
82129: LD_INT 0
82131: PPUSH
82132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
82133: LD_ADDR_VAR 0 2
82137: PUSH
82138: LD_INT 22
82140: PUSH
82141: LD_OWVAR 2
82145: PUSH
82146: EMPTY
82147: LIST
82148: LIST
82149: PUSH
82150: LD_INT 32
82152: PUSH
82153: LD_INT 1
82155: PUSH
82156: EMPTY
82157: LIST
82158: LIST
82159: PUSH
82160: LD_INT 21
82162: PUSH
82163: LD_INT 2
82165: PUSH
82166: EMPTY
82167: LIST
82168: LIST
82169: PUSH
82170: EMPTY
82171: LIST
82172: LIST
82173: LIST
82174: PPUSH
82175: CALL_OW 69
82179: ST_TO_ADDR
// if not tmp then
82180: LD_VAR 0 2
82184: NOT
82185: IFFALSE 82189
// exit ;
82187: GO 82218
// for i in tmp do
82189: LD_ADDR_VAR 0 1
82193: PUSH
82194: LD_VAR 0 2
82198: PUSH
82199: FOR_IN
82200: IFFALSE 82216
// SetFuel ( i , 0 ) ;
82202: LD_VAR 0 1
82206: PPUSH
82207: LD_INT 0
82209: PPUSH
82210: CALL_OW 240
82214: GO 82199
82216: POP
82217: POP
// end ;
82218: PPOPN 2
82220: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
82221: LD_EXP 64
82225: PUSH
82226: LD_EXP 100
82230: AND
82231: IFFALSE 82297
82233: GO 82235
82235: DISABLE
82236: LD_INT 0
82238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82239: LD_ADDR_VAR 0 1
82243: PUSH
82244: LD_INT 22
82246: PUSH
82247: LD_OWVAR 2
82251: PUSH
82252: EMPTY
82253: LIST
82254: LIST
82255: PUSH
82256: LD_INT 30
82258: PUSH
82259: LD_INT 29
82261: PUSH
82262: EMPTY
82263: LIST
82264: LIST
82265: PUSH
82266: EMPTY
82267: LIST
82268: LIST
82269: PPUSH
82270: CALL_OW 69
82274: ST_TO_ADDR
// if not tmp then
82275: LD_VAR 0 1
82279: NOT
82280: IFFALSE 82284
// exit ;
82282: GO 82297
// DestroyUnit ( tmp [ 1 ] ) ;
82284: LD_VAR 0 1
82288: PUSH
82289: LD_INT 1
82291: ARRAY
82292: PPUSH
82293: CALL_OW 65
// end ;
82297: PPOPN 1
82299: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
82300: LD_EXP 64
82304: PUSH
82305: LD_EXP 102
82309: AND
82310: IFFALSE 82439
82312: GO 82314
82314: DISABLE
82315: LD_INT 0
82317: PPUSH
// begin uc_side := 0 ;
82318: LD_ADDR_OWVAR 20
82322: PUSH
82323: LD_INT 0
82325: ST_TO_ADDR
// uc_nation := nation_arabian ;
82326: LD_ADDR_OWVAR 21
82330: PUSH
82331: LD_INT 2
82333: ST_TO_ADDR
// hc_gallery :=  ;
82334: LD_ADDR_OWVAR 33
82338: PUSH
82339: LD_STRING 
82341: ST_TO_ADDR
// hc_name :=  ;
82342: LD_ADDR_OWVAR 26
82346: PUSH
82347: LD_STRING 
82349: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
82350: LD_INT 1
82352: PPUSH
82353: LD_INT 11
82355: PPUSH
82356: LD_INT 10
82358: PPUSH
82359: CALL_OW 380
// un := CreateHuman ;
82363: LD_ADDR_VAR 0 1
82367: PUSH
82368: CALL_OW 44
82372: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82373: LD_VAR 0 1
82377: PPUSH
82378: LD_INT 1
82380: PPUSH
82381: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82385: LD_INT 35
82387: PPUSH
82388: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82392: LD_VAR 0 1
82396: PPUSH
82397: LD_INT 22
82399: PUSH
82400: LD_OWVAR 2
82404: PUSH
82405: EMPTY
82406: LIST
82407: LIST
82408: PPUSH
82409: CALL_OW 69
82413: PPUSH
82414: LD_VAR 0 1
82418: PPUSH
82419: CALL_OW 74
82423: PPUSH
82424: CALL_OW 115
// until IsDead ( un ) ;
82428: LD_VAR 0 1
82432: PPUSH
82433: CALL_OW 301
82437: IFFALSE 82385
// end ;
82439: PPOPN 1
82441: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
82442: LD_EXP 64
82446: PUSH
82447: LD_EXP 104
82451: AND
82452: IFFALSE 82464
82454: GO 82456
82456: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
82457: LD_STRING earthquake(getX(game), 0, 32)
82459: PPUSH
82460: CALL_OW 559
82464: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
82465: LD_EXP 64
82469: PUSH
82470: LD_EXP 105
82474: AND
82475: IFFALSE 82566
82477: GO 82479
82479: DISABLE
82480: LD_INT 0
82482: PPUSH
// begin enable ;
82483: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
82484: LD_ADDR_VAR 0 1
82488: PUSH
82489: LD_INT 22
82491: PUSH
82492: LD_OWVAR 2
82496: PUSH
82497: EMPTY
82498: LIST
82499: LIST
82500: PUSH
82501: LD_INT 21
82503: PUSH
82504: LD_INT 2
82506: PUSH
82507: EMPTY
82508: LIST
82509: LIST
82510: PUSH
82511: LD_INT 33
82513: PUSH
82514: LD_INT 3
82516: PUSH
82517: EMPTY
82518: LIST
82519: LIST
82520: PUSH
82521: EMPTY
82522: LIST
82523: LIST
82524: LIST
82525: PPUSH
82526: CALL_OW 69
82530: ST_TO_ADDR
// if not tmp then
82531: LD_VAR 0 1
82535: NOT
82536: IFFALSE 82540
// exit ;
82538: GO 82566
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82540: LD_VAR 0 1
82544: PUSH
82545: LD_INT 1
82547: PPUSH
82548: LD_VAR 0 1
82552: PPUSH
82553: CALL_OW 12
82557: ARRAY
82558: PPUSH
82559: LD_INT 1
82561: PPUSH
82562: CALL_OW 234
// end ;
82566: PPOPN 1
82568: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
82569: LD_EXP 64
82573: PUSH
82574: LD_EXP 106
82578: AND
82579: IFFALSE 82720
82581: GO 82583
82583: DISABLE
82584: LD_INT 0
82586: PPUSH
82587: PPUSH
82588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82589: LD_ADDR_VAR 0 3
82593: PUSH
82594: LD_INT 22
82596: PUSH
82597: LD_OWVAR 2
82601: PUSH
82602: EMPTY
82603: LIST
82604: LIST
82605: PUSH
82606: LD_INT 25
82608: PUSH
82609: LD_INT 1
82611: PUSH
82612: EMPTY
82613: LIST
82614: LIST
82615: PUSH
82616: EMPTY
82617: LIST
82618: LIST
82619: PPUSH
82620: CALL_OW 69
82624: ST_TO_ADDR
// if not tmp then
82625: LD_VAR 0 3
82629: NOT
82630: IFFALSE 82634
// exit ;
82632: GO 82720
// un := tmp [ rand ( 1 , tmp ) ] ;
82634: LD_ADDR_VAR 0 2
82638: PUSH
82639: LD_VAR 0 3
82643: PUSH
82644: LD_INT 1
82646: PPUSH
82647: LD_VAR 0 3
82651: PPUSH
82652: CALL_OW 12
82656: ARRAY
82657: ST_TO_ADDR
// if Crawls ( un ) then
82658: LD_VAR 0 2
82662: PPUSH
82663: CALL_OW 318
82667: IFFALSE 82678
// ComWalk ( un ) ;
82669: LD_VAR 0 2
82673: PPUSH
82674: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
82678: LD_VAR 0 2
82682: PPUSH
82683: LD_INT 9
82685: PPUSH
82686: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
82690: LD_INT 28
82692: PPUSH
82693: LD_OWVAR 2
82697: PPUSH
82698: LD_INT 2
82700: PPUSH
82701: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
82705: LD_INT 29
82707: PPUSH
82708: LD_OWVAR 2
82712: PPUSH
82713: LD_INT 2
82715: PPUSH
82716: CALL_OW 322
// end ;
82720: PPOPN 3
82722: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
82723: LD_EXP 64
82727: PUSH
82728: LD_EXP 107
82732: AND
82733: IFFALSE 82844
82735: GO 82737
82737: DISABLE
82738: LD_INT 0
82740: PPUSH
82741: PPUSH
82742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82743: LD_ADDR_VAR 0 3
82747: PUSH
82748: LD_INT 22
82750: PUSH
82751: LD_OWVAR 2
82755: PUSH
82756: EMPTY
82757: LIST
82758: LIST
82759: PUSH
82760: LD_INT 25
82762: PUSH
82763: LD_INT 1
82765: PUSH
82766: EMPTY
82767: LIST
82768: LIST
82769: PUSH
82770: EMPTY
82771: LIST
82772: LIST
82773: PPUSH
82774: CALL_OW 69
82778: ST_TO_ADDR
// if not tmp then
82779: LD_VAR 0 3
82783: NOT
82784: IFFALSE 82788
// exit ;
82786: GO 82844
// un := tmp [ rand ( 1 , tmp ) ] ;
82788: LD_ADDR_VAR 0 2
82792: PUSH
82793: LD_VAR 0 3
82797: PUSH
82798: LD_INT 1
82800: PPUSH
82801: LD_VAR 0 3
82805: PPUSH
82806: CALL_OW 12
82810: ARRAY
82811: ST_TO_ADDR
// if Crawls ( un ) then
82812: LD_VAR 0 2
82816: PPUSH
82817: CALL_OW 318
82821: IFFALSE 82832
// ComWalk ( un ) ;
82823: LD_VAR 0 2
82827: PPUSH
82828: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82832: LD_VAR 0 2
82836: PPUSH
82837: LD_INT 8
82839: PPUSH
82840: CALL_OW 336
// end ;
82844: PPOPN 3
82846: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
82847: LD_EXP 64
82851: PUSH
82852: LD_EXP 108
82856: AND
82857: IFFALSE 83001
82859: GO 82861
82861: DISABLE
82862: LD_INT 0
82864: PPUSH
82865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
82866: LD_ADDR_VAR 0 2
82870: PUSH
82871: LD_INT 22
82873: PUSH
82874: LD_OWVAR 2
82878: PUSH
82879: EMPTY
82880: LIST
82881: LIST
82882: PUSH
82883: LD_INT 21
82885: PUSH
82886: LD_INT 2
82888: PUSH
82889: EMPTY
82890: LIST
82891: LIST
82892: PUSH
82893: LD_INT 2
82895: PUSH
82896: LD_INT 34
82898: PUSH
82899: LD_INT 12
82901: PUSH
82902: EMPTY
82903: LIST
82904: LIST
82905: PUSH
82906: LD_INT 34
82908: PUSH
82909: LD_INT 51
82911: PUSH
82912: EMPTY
82913: LIST
82914: LIST
82915: PUSH
82916: LD_INT 34
82918: PUSH
82919: LD_INT 32
82921: PUSH
82922: EMPTY
82923: LIST
82924: LIST
82925: PUSH
82926: EMPTY
82927: LIST
82928: LIST
82929: LIST
82930: LIST
82931: PUSH
82932: EMPTY
82933: LIST
82934: LIST
82935: LIST
82936: PPUSH
82937: CALL_OW 69
82941: ST_TO_ADDR
// if not tmp then
82942: LD_VAR 0 2
82946: NOT
82947: IFFALSE 82951
// exit ;
82949: GO 83001
// for i in tmp do
82951: LD_ADDR_VAR 0 1
82955: PUSH
82956: LD_VAR 0 2
82960: PUSH
82961: FOR_IN
82962: IFFALSE 82999
// if GetCargo ( i , mat_artifact ) = 0 then
82964: LD_VAR 0 1
82968: PPUSH
82969: LD_INT 4
82971: PPUSH
82972: CALL_OW 289
82976: PUSH
82977: LD_INT 0
82979: EQUAL
82980: IFFALSE 82997
// SetCargo ( i , mat_siberit , 100 ) ;
82982: LD_VAR 0 1
82986: PPUSH
82987: LD_INT 3
82989: PPUSH
82990: LD_INT 100
82992: PPUSH
82993: CALL_OW 290
82997: GO 82961
82999: POP
83000: POP
// end ;
83001: PPOPN 2
83003: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
83004: LD_EXP 64
83008: PUSH
83009: LD_EXP 109
83013: AND
83014: IFFALSE 83197
83016: GO 83018
83018: DISABLE
83019: LD_INT 0
83021: PPUSH
83022: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
83023: LD_ADDR_VAR 0 2
83027: PUSH
83028: LD_INT 22
83030: PUSH
83031: LD_OWVAR 2
83035: PUSH
83036: EMPTY
83037: LIST
83038: LIST
83039: PPUSH
83040: CALL_OW 69
83044: ST_TO_ADDR
// if not tmp then
83045: LD_VAR 0 2
83049: NOT
83050: IFFALSE 83054
// exit ;
83052: GO 83197
// for i := 1 to 2 do
83054: LD_ADDR_VAR 0 1
83058: PUSH
83059: DOUBLE
83060: LD_INT 1
83062: DEC
83063: ST_TO_ADDR
83064: LD_INT 2
83066: PUSH
83067: FOR_TO
83068: IFFALSE 83195
// begin uc_side := your_side ;
83070: LD_ADDR_OWVAR 20
83074: PUSH
83075: LD_OWVAR 2
83079: ST_TO_ADDR
// uc_nation := nation_american ;
83080: LD_ADDR_OWVAR 21
83084: PUSH
83085: LD_INT 1
83087: ST_TO_ADDR
// vc_chassis := us_morphling ;
83088: LD_ADDR_OWVAR 37
83092: PUSH
83093: LD_INT 5
83095: ST_TO_ADDR
// vc_engine := engine_siberite ;
83096: LD_ADDR_OWVAR 39
83100: PUSH
83101: LD_INT 3
83103: ST_TO_ADDR
// vc_control := control_computer ;
83104: LD_ADDR_OWVAR 38
83108: PUSH
83109: LD_INT 3
83111: ST_TO_ADDR
// vc_weapon := us_double_laser ;
83112: LD_ADDR_OWVAR 40
83116: PUSH
83117: LD_INT 10
83119: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
83120: LD_VAR 0 2
83124: PUSH
83125: LD_INT 1
83127: ARRAY
83128: PPUSH
83129: CALL_OW 310
83133: NOT
83134: IFFALSE 83181
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
83136: CALL_OW 45
83140: PPUSH
83141: LD_VAR 0 2
83145: PUSH
83146: LD_INT 1
83148: ARRAY
83149: PPUSH
83150: CALL_OW 250
83154: PPUSH
83155: LD_VAR 0 2
83159: PUSH
83160: LD_INT 1
83162: ARRAY
83163: PPUSH
83164: CALL_OW 251
83168: PPUSH
83169: LD_INT 12
83171: PPUSH
83172: LD_INT 1
83174: PPUSH
83175: CALL_OW 50
83179: GO 83193
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
83181: CALL_OW 45
83185: PPUSH
83186: LD_INT 1
83188: PPUSH
83189: CALL_OW 51
// end ;
83193: GO 83067
83195: POP
83196: POP
// end ;
83197: PPOPN 2
83199: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
83200: LD_EXP 64
83204: PUSH
83205: LD_EXP 110
83209: AND
83210: IFFALSE 83432
83212: GO 83214
83214: DISABLE
83215: LD_INT 0
83217: PPUSH
83218: PPUSH
83219: PPUSH
83220: PPUSH
83221: PPUSH
83222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83223: LD_ADDR_VAR 0 6
83227: PUSH
83228: LD_INT 22
83230: PUSH
83231: LD_OWVAR 2
83235: PUSH
83236: EMPTY
83237: LIST
83238: LIST
83239: PUSH
83240: LD_INT 21
83242: PUSH
83243: LD_INT 1
83245: PUSH
83246: EMPTY
83247: LIST
83248: LIST
83249: PUSH
83250: LD_INT 3
83252: PUSH
83253: LD_INT 23
83255: PUSH
83256: LD_INT 0
83258: PUSH
83259: EMPTY
83260: LIST
83261: LIST
83262: PUSH
83263: EMPTY
83264: LIST
83265: LIST
83266: PUSH
83267: EMPTY
83268: LIST
83269: LIST
83270: LIST
83271: PPUSH
83272: CALL_OW 69
83276: ST_TO_ADDR
// if not tmp then
83277: LD_VAR 0 6
83281: NOT
83282: IFFALSE 83286
// exit ;
83284: GO 83432
// s1 := rand ( 1 , 4 ) ;
83286: LD_ADDR_VAR 0 2
83290: PUSH
83291: LD_INT 1
83293: PPUSH
83294: LD_INT 4
83296: PPUSH
83297: CALL_OW 12
83301: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
83302: LD_ADDR_VAR 0 4
83306: PUSH
83307: LD_VAR 0 6
83311: PUSH
83312: LD_INT 1
83314: ARRAY
83315: PPUSH
83316: LD_VAR 0 2
83320: PPUSH
83321: CALL_OW 259
83325: ST_TO_ADDR
// if s1 = 1 then
83326: LD_VAR 0 2
83330: PUSH
83331: LD_INT 1
83333: EQUAL
83334: IFFALSE 83354
// s2 := rand ( 2 , 4 ) else
83336: LD_ADDR_VAR 0 3
83340: PUSH
83341: LD_INT 2
83343: PPUSH
83344: LD_INT 4
83346: PPUSH
83347: CALL_OW 12
83351: ST_TO_ADDR
83352: GO 83362
// s2 := 1 ;
83354: LD_ADDR_VAR 0 3
83358: PUSH
83359: LD_INT 1
83361: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
83362: LD_ADDR_VAR 0 5
83366: PUSH
83367: LD_VAR 0 6
83371: PUSH
83372: LD_INT 1
83374: ARRAY
83375: PPUSH
83376: LD_VAR 0 3
83380: PPUSH
83381: CALL_OW 259
83385: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
83386: LD_VAR 0 6
83390: PUSH
83391: LD_INT 1
83393: ARRAY
83394: PPUSH
83395: LD_VAR 0 2
83399: PPUSH
83400: LD_VAR 0 5
83404: PPUSH
83405: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
83409: LD_VAR 0 6
83413: PUSH
83414: LD_INT 1
83416: ARRAY
83417: PPUSH
83418: LD_VAR 0 3
83422: PPUSH
83423: LD_VAR 0 4
83427: PPUSH
83428: CALL_OW 237
// end ;
83432: PPOPN 6
83434: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
83435: LD_EXP 64
83439: PUSH
83440: LD_EXP 111
83444: AND
83445: IFFALSE 83524
83447: GO 83449
83449: DISABLE
83450: LD_INT 0
83452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
83453: LD_ADDR_VAR 0 1
83457: PUSH
83458: LD_INT 22
83460: PUSH
83461: LD_OWVAR 2
83465: PUSH
83466: EMPTY
83467: LIST
83468: LIST
83469: PUSH
83470: LD_INT 30
83472: PUSH
83473: LD_INT 3
83475: PUSH
83476: EMPTY
83477: LIST
83478: LIST
83479: PUSH
83480: EMPTY
83481: LIST
83482: LIST
83483: PPUSH
83484: CALL_OW 69
83488: ST_TO_ADDR
// if not tmp then
83489: LD_VAR 0 1
83493: NOT
83494: IFFALSE 83498
// exit ;
83496: GO 83524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83498: LD_VAR 0 1
83502: PUSH
83503: LD_INT 1
83505: PPUSH
83506: LD_VAR 0 1
83510: PPUSH
83511: CALL_OW 12
83515: ARRAY
83516: PPUSH
83517: LD_INT 1
83519: PPUSH
83520: CALL_OW 234
// end ;
83524: PPOPN 1
83526: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
83527: LD_EXP 64
83531: PUSH
83532: LD_EXP 112
83536: AND
83537: IFFALSE 83649
83539: GO 83541
83541: DISABLE
83542: LD_INT 0
83544: PPUSH
83545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
83546: LD_ADDR_VAR 0 2
83550: PUSH
83551: LD_INT 22
83553: PUSH
83554: LD_OWVAR 2
83558: PUSH
83559: EMPTY
83560: LIST
83561: LIST
83562: PUSH
83563: LD_INT 2
83565: PUSH
83566: LD_INT 30
83568: PUSH
83569: LD_INT 27
83571: PUSH
83572: EMPTY
83573: LIST
83574: LIST
83575: PUSH
83576: LD_INT 30
83578: PUSH
83579: LD_INT 26
83581: PUSH
83582: EMPTY
83583: LIST
83584: LIST
83585: PUSH
83586: LD_INT 30
83588: PUSH
83589: LD_INT 28
83591: PUSH
83592: EMPTY
83593: LIST
83594: LIST
83595: PUSH
83596: EMPTY
83597: LIST
83598: LIST
83599: LIST
83600: LIST
83601: PUSH
83602: EMPTY
83603: LIST
83604: LIST
83605: PPUSH
83606: CALL_OW 69
83610: ST_TO_ADDR
// if not tmp then
83611: LD_VAR 0 2
83615: NOT
83616: IFFALSE 83620
// exit ;
83618: GO 83649
// for i in tmp do
83620: LD_ADDR_VAR 0 1
83624: PUSH
83625: LD_VAR 0 2
83629: PUSH
83630: FOR_IN
83631: IFFALSE 83647
// SetLives ( i , 1 ) ;
83633: LD_VAR 0 1
83637: PPUSH
83638: LD_INT 1
83640: PPUSH
83641: CALL_OW 234
83645: GO 83630
83647: POP
83648: POP
// end ;
83649: PPOPN 2
83651: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
83652: LD_EXP 64
83656: PUSH
83657: LD_EXP 113
83661: AND
83662: IFFALSE 83949
83664: GO 83666
83666: DISABLE
83667: LD_INT 0
83669: PPUSH
83670: PPUSH
83671: PPUSH
// begin i := rand ( 1 , 7 ) ;
83672: LD_ADDR_VAR 0 1
83676: PUSH
83677: LD_INT 1
83679: PPUSH
83680: LD_INT 7
83682: PPUSH
83683: CALL_OW 12
83687: ST_TO_ADDR
// case i of 1 :
83688: LD_VAR 0 1
83692: PUSH
83693: LD_INT 1
83695: DOUBLE
83696: EQUAL
83697: IFTRUE 83701
83699: GO 83711
83701: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
83702: LD_STRING earthquake(getX(game), 0, 32)
83704: PPUSH
83705: CALL_OW 559
83709: GO 83949
83711: LD_INT 2
83713: DOUBLE
83714: EQUAL
83715: IFTRUE 83719
83717: GO 83733
83719: POP
// begin ToLua ( displayStucuk(); ) ;
83720: LD_STRING displayStucuk();
83722: PPUSH
83723: CALL_OW 559
// ResetFog ;
83727: CALL_OW 335
// end ; 3 :
83731: GO 83949
83733: LD_INT 3
83735: DOUBLE
83736: EQUAL
83737: IFTRUE 83741
83739: GO 83845
83741: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83742: LD_ADDR_VAR 0 2
83746: PUSH
83747: LD_INT 22
83749: PUSH
83750: LD_OWVAR 2
83754: PUSH
83755: EMPTY
83756: LIST
83757: LIST
83758: PUSH
83759: LD_INT 25
83761: PUSH
83762: LD_INT 1
83764: PUSH
83765: EMPTY
83766: LIST
83767: LIST
83768: PUSH
83769: EMPTY
83770: LIST
83771: LIST
83772: PPUSH
83773: CALL_OW 69
83777: ST_TO_ADDR
// if not tmp then
83778: LD_VAR 0 2
83782: NOT
83783: IFFALSE 83787
// exit ;
83785: GO 83949
// un := tmp [ rand ( 1 , tmp ) ] ;
83787: LD_ADDR_VAR 0 3
83791: PUSH
83792: LD_VAR 0 2
83796: PUSH
83797: LD_INT 1
83799: PPUSH
83800: LD_VAR 0 2
83804: PPUSH
83805: CALL_OW 12
83809: ARRAY
83810: ST_TO_ADDR
// if Crawls ( un ) then
83811: LD_VAR 0 3
83815: PPUSH
83816: CALL_OW 318
83820: IFFALSE 83831
// ComWalk ( un ) ;
83822: LD_VAR 0 3
83826: PPUSH
83827: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83831: LD_VAR 0 3
83835: PPUSH
83836: LD_INT 8
83838: PPUSH
83839: CALL_OW 336
// end ; 4 :
83843: GO 83949
83845: LD_INT 4
83847: DOUBLE
83848: EQUAL
83849: IFTRUE 83853
83851: GO 83927
83853: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83854: LD_ADDR_VAR 0 2
83858: PUSH
83859: LD_INT 22
83861: PUSH
83862: LD_OWVAR 2
83866: PUSH
83867: EMPTY
83868: LIST
83869: LIST
83870: PUSH
83871: LD_INT 30
83873: PUSH
83874: LD_INT 29
83876: PUSH
83877: EMPTY
83878: LIST
83879: LIST
83880: PUSH
83881: EMPTY
83882: LIST
83883: LIST
83884: PPUSH
83885: CALL_OW 69
83889: ST_TO_ADDR
// if not tmp then
83890: LD_VAR 0 2
83894: NOT
83895: IFFALSE 83899
// exit ;
83897: GO 83949
// CenterNowOnUnits ( tmp [ 1 ] ) ;
83899: LD_VAR 0 2
83903: PUSH
83904: LD_INT 1
83906: ARRAY
83907: PPUSH
83908: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
83912: LD_VAR 0 2
83916: PUSH
83917: LD_INT 1
83919: ARRAY
83920: PPUSH
83921: CALL_OW 65
// end ; 5 .. 7 :
83925: GO 83949
83927: LD_INT 5
83929: DOUBLE
83930: GREATEREQUAL
83931: IFFALSE 83939
83933: LD_INT 7
83935: DOUBLE
83936: LESSEQUAL
83937: IFTRUE 83941
83939: GO 83948
83941: POP
// StreamSibBomb ; end ;
83942: CALL 80186 0 0
83946: GO 83949
83948: POP
// end ;
83949: PPOPN 3
83951: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
83952: LD_EXP 64
83956: PUSH
83957: LD_EXP 114
83961: AND
83962: IFFALSE 84118
83964: GO 83966
83966: DISABLE
83967: LD_INT 0
83969: PPUSH
83970: PPUSH
83971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
83972: LD_ADDR_VAR 0 2
83976: PUSH
83977: LD_INT 81
83979: PUSH
83980: LD_OWVAR 2
83984: PUSH
83985: EMPTY
83986: LIST
83987: LIST
83988: PUSH
83989: LD_INT 2
83991: PUSH
83992: LD_INT 21
83994: PUSH
83995: LD_INT 1
83997: PUSH
83998: EMPTY
83999: LIST
84000: LIST
84001: PUSH
84002: LD_INT 21
84004: PUSH
84005: LD_INT 2
84007: PUSH
84008: EMPTY
84009: LIST
84010: LIST
84011: PUSH
84012: EMPTY
84013: LIST
84014: LIST
84015: LIST
84016: PUSH
84017: EMPTY
84018: LIST
84019: LIST
84020: PPUSH
84021: CALL_OW 69
84025: ST_TO_ADDR
// if not tmp then
84026: LD_VAR 0 2
84030: NOT
84031: IFFALSE 84035
// exit ;
84033: GO 84118
// p := 0 ;
84035: LD_ADDR_VAR 0 3
84039: PUSH
84040: LD_INT 0
84042: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84043: LD_INT 35
84045: PPUSH
84046: CALL_OW 67
// p := p + 1 ;
84050: LD_ADDR_VAR 0 3
84054: PUSH
84055: LD_VAR 0 3
84059: PUSH
84060: LD_INT 1
84062: PLUS
84063: ST_TO_ADDR
// for i in tmp do
84064: LD_ADDR_VAR 0 1
84068: PUSH
84069: LD_VAR 0 2
84073: PUSH
84074: FOR_IN
84075: IFFALSE 84106
// if GetLives ( i ) < 1000 then
84077: LD_VAR 0 1
84081: PPUSH
84082: CALL_OW 256
84086: PUSH
84087: LD_INT 1000
84089: LESS
84090: IFFALSE 84104
// SetLives ( i , 1000 ) ;
84092: LD_VAR 0 1
84096: PPUSH
84097: LD_INT 1000
84099: PPUSH
84100: CALL_OW 234
84104: GO 84074
84106: POP
84107: POP
// until p > 20 ;
84108: LD_VAR 0 3
84112: PUSH
84113: LD_INT 20
84115: GREATER
84116: IFFALSE 84043
// end ;
84118: PPOPN 3
84120: END
// every 0 0$1 trigger StreamModeActive and sTime do
84121: LD_EXP 64
84125: PUSH
84126: LD_EXP 115
84130: AND
84131: IFFALSE 84166
84133: GO 84135
84135: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
84136: LD_INT 28
84138: PPUSH
84139: LD_OWVAR 2
84143: PPUSH
84144: LD_INT 2
84146: PPUSH
84147: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
84151: LD_INT 30
84153: PPUSH
84154: LD_OWVAR 2
84158: PPUSH
84159: LD_INT 2
84161: PPUSH
84162: CALL_OW 322
// end ;
84166: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
84167: LD_EXP 64
84171: PUSH
84172: LD_EXP 116
84176: AND
84177: IFFALSE 84298
84179: GO 84181
84181: DISABLE
84182: LD_INT 0
84184: PPUSH
84185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84186: LD_ADDR_VAR 0 2
84190: PUSH
84191: LD_INT 22
84193: PUSH
84194: LD_OWVAR 2
84198: PUSH
84199: EMPTY
84200: LIST
84201: LIST
84202: PUSH
84203: LD_INT 21
84205: PUSH
84206: LD_INT 1
84208: PUSH
84209: EMPTY
84210: LIST
84211: LIST
84212: PUSH
84213: LD_INT 3
84215: PUSH
84216: LD_INT 23
84218: PUSH
84219: LD_INT 0
84221: PUSH
84222: EMPTY
84223: LIST
84224: LIST
84225: PUSH
84226: EMPTY
84227: LIST
84228: LIST
84229: PUSH
84230: EMPTY
84231: LIST
84232: LIST
84233: LIST
84234: PPUSH
84235: CALL_OW 69
84239: ST_TO_ADDR
// if not tmp then
84240: LD_VAR 0 2
84244: NOT
84245: IFFALSE 84249
// exit ;
84247: GO 84298
// for i in tmp do
84249: LD_ADDR_VAR 0 1
84253: PUSH
84254: LD_VAR 0 2
84258: PUSH
84259: FOR_IN
84260: IFFALSE 84296
// begin if Crawls ( i ) then
84262: LD_VAR 0 1
84266: PPUSH
84267: CALL_OW 318
84271: IFFALSE 84282
// ComWalk ( i ) ;
84273: LD_VAR 0 1
84277: PPUSH
84278: CALL_OW 138
// SetClass ( i , 2 ) ;
84282: LD_VAR 0 1
84286: PPUSH
84287: LD_INT 2
84289: PPUSH
84290: CALL_OW 336
// end ;
84294: GO 84259
84296: POP
84297: POP
// end ;
84298: PPOPN 2
84300: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
84301: LD_EXP 64
84305: PUSH
84306: LD_EXP 117
84310: AND
84311: IFFALSE 84599
84313: GO 84315
84315: DISABLE
84316: LD_INT 0
84318: PPUSH
84319: PPUSH
84320: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
84321: LD_OWVAR 2
84325: PPUSH
84326: LD_INT 9
84328: PPUSH
84329: LD_INT 1
84331: PPUSH
84332: LD_INT 1
84334: PPUSH
84335: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
84339: LD_INT 9
84341: PPUSH
84342: LD_OWVAR 2
84346: PPUSH
84347: CALL_OW 343
// uc_side := 9 ;
84351: LD_ADDR_OWVAR 20
84355: PUSH
84356: LD_INT 9
84358: ST_TO_ADDR
// uc_nation := 2 ;
84359: LD_ADDR_OWVAR 21
84363: PUSH
84364: LD_INT 2
84366: ST_TO_ADDR
// hc_name := Dark Warrior ;
84367: LD_ADDR_OWVAR 26
84371: PUSH
84372: LD_STRING Dark Warrior
84374: ST_TO_ADDR
// hc_gallery :=  ;
84375: LD_ADDR_OWVAR 33
84379: PUSH
84380: LD_STRING 
84382: ST_TO_ADDR
// hc_noskilllimit := true ;
84383: LD_ADDR_OWVAR 76
84387: PUSH
84388: LD_INT 1
84390: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
84391: LD_ADDR_OWVAR 31
84395: PUSH
84396: LD_INT 30
84398: PUSH
84399: LD_INT 30
84401: PUSH
84402: LD_INT 30
84404: PUSH
84405: LD_INT 30
84407: PUSH
84408: EMPTY
84409: LIST
84410: LIST
84411: LIST
84412: LIST
84413: ST_TO_ADDR
// un := CreateHuman ;
84414: LD_ADDR_VAR 0 3
84418: PUSH
84419: CALL_OW 44
84423: ST_TO_ADDR
// hc_noskilllimit := false ;
84424: LD_ADDR_OWVAR 76
84428: PUSH
84429: LD_INT 0
84431: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
84432: LD_VAR 0 3
84436: PPUSH
84437: LD_INT 1
84439: PPUSH
84440: CALL_OW 51
// ToLua ( playRanger() ) ;
84444: LD_STRING playRanger()
84446: PPUSH
84447: CALL_OW 559
// p := 0 ;
84451: LD_ADDR_VAR 0 2
84455: PUSH
84456: LD_INT 0
84458: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84459: LD_INT 35
84461: PPUSH
84462: CALL_OW 67
// p := p + 1 ;
84466: LD_ADDR_VAR 0 2
84470: PUSH
84471: LD_VAR 0 2
84475: PUSH
84476: LD_INT 1
84478: PLUS
84479: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
84480: LD_VAR 0 3
84484: PPUSH
84485: CALL_OW 256
84489: PUSH
84490: LD_INT 1000
84492: LESS
84493: IFFALSE 84507
// SetLives ( un , 1000 ) ;
84495: LD_VAR 0 3
84499: PPUSH
84500: LD_INT 1000
84502: PPUSH
84503: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
84507: LD_VAR 0 3
84511: PPUSH
84512: LD_INT 81
84514: PUSH
84515: LD_OWVAR 2
84519: PUSH
84520: EMPTY
84521: LIST
84522: LIST
84523: PUSH
84524: LD_INT 91
84526: PUSH
84527: LD_VAR 0 3
84531: PUSH
84532: LD_INT 30
84534: PUSH
84535: EMPTY
84536: LIST
84537: LIST
84538: LIST
84539: PUSH
84540: EMPTY
84541: LIST
84542: LIST
84543: PPUSH
84544: CALL_OW 69
84548: PPUSH
84549: LD_VAR 0 3
84553: PPUSH
84554: CALL_OW 74
84558: PPUSH
84559: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
84563: LD_VAR 0 2
84567: PUSH
84568: LD_INT 80
84570: GREATER
84571: PUSH
84572: LD_VAR 0 3
84576: PPUSH
84577: CALL_OW 301
84581: OR
84582: IFFALSE 84459
// if un then
84584: LD_VAR 0 3
84588: IFFALSE 84599
// RemoveUnit ( un ) ;
84590: LD_VAR 0 3
84594: PPUSH
84595: CALL_OW 64
// end ;
84599: PPOPN 3
84601: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
84602: LD_EXP 118
84606: IFFALSE 84722
84608: GO 84610
84610: DISABLE
84611: LD_INT 0
84613: PPUSH
84614: PPUSH
84615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
84616: LD_ADDR_VAR 0 2
84620: PUSH
84621: LD_INT 81
84623: PUSH
84624: LD_OWVAR 2
84628: PUSH
84629: EMPTY
84630: LIST
84631: LIST
84632: PUSH
84633: LD_INT 21
84635: PUSH
84636: LD_INT 1
84638: PUSH
84639: EMPTY
84640: LIST
84641: LIST
84642: PUSH
84643: EMPTY
84644: LIST
84645: LIST
84646: PPUSH
84647: CALL_OW 69
84651: ST_TO_ADDR
// ToLua ( playComputer() ) ;
84652: LD_STRING playComputer()
84654: PPUSH
84655: CALL_OW 559
// if not tmp then
84659: LD_VAR 0 2
84663: NOT
84664: IFFALSE 84668
// exit ;
84666: GO 84722
// for i in tmp do
84668: LD_ADDR_VAR 0 1
84672: PUSH
84673: LD_VAR 0 2
84677: PUSH
84678: FOR_IN
84679: IFFALSE 84720
// for j := 1 to 4 do
84681: LD_ADDR_VAR 0 3
84685: PUSH
84686: DOUBLE
84687: LD_INT 1
84689: DEC
84690: ST_TO_ADDR
84691: LD_INT 4
84693: PUSH
84694: FOR_TO
84695: IFFALSE 84716
// SetSkill ( i , j , 10 ) ;
84697: LD_VAR 0 1
84701: PPUSH
84702: LD_VAR 0 3
84706: PPUSH
84707: LD_INT 10
84709: PPUSH
84710: CALL_OW 237
84714: GO 84694
84716: POP
84717: POP
84718: GO 84678
84720: POP
84721: POP
// end ;
84722: PPOPN 3
84724: END
// every 0 0$1 trigger s30 do var i , tmp ;
84725: LD_EXP 119
84729: IFFALSE 84798
84731: GO 84733
84733: DISABLE
84734: LD_INT 0
84736: PPUSH
84737: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84738: LD_ADDR_VAR 0 2
84742: PUSH
84743: LD_INT 22
84745: PUSH
84746: LD_OWVAR 2
84750: PUSH
84751: EMPTY
84752: LIST
84753: LIST
84754: PPUSH
84755: CALL_OW 69
84759: ST_TO_ADDR
// if not tmp then
84760: LD_VAR 0 2
84764: NOT
84765: IFFALSE 84769
// exit ;
84767: GO 84798
// for i in tmp do
84769: LD_ADDR_VAR 0 1
84773: PUSH
84774: LD_VAR 0 2
84778: PUSH
84779: FOR_IN
84780: IFFALSE 84796
// SetLives ( i , 300 ) ;
84782: LD_VAR 0 1
84786: PPUSH
84787: LD_INT 300
84789: PPUSH
84790: CALL_OW 234
84794: GO 84779
84796: POP
84797: POP
// end ;
84798: PPOPN 2
84800: END
// every 0 0$1 trigger s60 do var i , tmp ;
84801: LD_EXP 120
84805: IFFALSE 84874
84807: GO 84809
84809: DISABLE
84810: LD_INT 0
84812: PPUSH
84813: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84814: LD_ADDR_VAR 0 2
84818: PUSH
84819: LD_INT 22
84821: PUSH
84822: LD_OWVAR 2
84826: PUSH
84827: EMPTY
84828: LIST
84829: LIST
84830: PPUSH
84831: CALL_OW 69
84835: ST_TO_ADDR
// if not tmp then
84836: LD_VAR 0 2
84840: NOT
84841: IFFALSE 84845
// exit ;
84843: GO 84874
// for i in tmp do
84845: LD_ADDR_VAR 0 1
84849: PUSH
84850: LD_VAR 0 2
84854: PUSH
84855: FOR_IN
84856: IFFALSE 84872
// SetLives ( i , 600 ) ;
84858: LD_VAR 0 1
84862: PPUSH
84863: LD_INT 600
84865: PPUSH
84866: CALL_OW 234
84870: GO 84855
84872: POP
84873: POP
// end ;
84874: PPOPN 2
84876: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
84877: LD_INT 0
84879: PPUSH
// case cmd of 301 :
84880: LD_VAR 0 1
84884: PUSH
84885: LD_INT 301
84887: DOUBLE
84888: EQUAL
84889: IFTRUE 84893
84891: GO 84925
84893: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
84894: LD_VAR 0 6
84898: PPUSH
84899: LD_VAR 0 7
84903: PPUSH
84904: LD_VAR 0 8
84908: PPUSH
84909: LD_VAR 0 4
84913: PPUSH
84914: LD_VAR 0 5
84918: PPUSH
84919: CALL 86134 0 5
84923: GO 85046
84925: LD_INT 302
84927: DOUBLE
84928: EQUAL
84929: IFTRUE 84933
84931: GO 84970
84933: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
84934: LD_VAR 0 6
84938: PPUSH
84939: LD_VAR 0 7
84943: PPUSH
84944: LD_VAR 0 8
84948: PPUSH
84949: LD_VAR 0 9
84953: PPUSH
84954: LD_VAR 0 4
84958: PPUSH
84959: LD_VAR 0 5
84963: PPUSH
84964: CALL 86225 0 6
84968: GO 85046
84970: LD_INT 303
84972: DOUBLE
84973: EQUAL
84974: IFTRUE 84978
84976: GO 85015
84978: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
84979: LD_VAR 0 6
84983: PPUSH
84984: LD_VAR 0 7
84988: PPUSH
84989: LD_VAR 0 8
84993: PPUSH
84994: LD_VAR 0 9
84998: PPUSH
84999: LD_VAR 0 4
85003: PPUSH
85004: LD_VAR 0 5
85008: PPUSH
85009: CALL 85051 0 6
85013: GO 85046
85015: LD_INT 304
85017: DOUBLE
85018: EQUAL
85019: IFTRUE 85023
85021: GO 85045
85023: POP
// hHackTeleport ( unit , x , y ) ; end ;
85024: LD_VAR 0 2
85028: PPUSH
85029: LD_VAR 0 4
85033: PPUSH
85034: LD_VAR 0 5
85038: PPUSH
85039: CALL 86818 0 3
85043: GO 85046
85045: POP
// end ;
85046: LD_VAR 0 12
85050: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
85051: LD_INT 0
85053: PPUSH
85054: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
85055: LD_VAR 0 1
85059: PUSH
85060: LD_INT 1
85062: LESS
85063: PUSH
85064: LD_VAR 0 1
85068: PUSH
85069: LD_INT 3
85071: GREATER
85072: OR
85073: PUSH
85074: LD_VAR 0 5
85078: PPUSH
85079: LD_VAR 0 6
85083: PPUSH
85084: CALL_OW 428
85088: OR
85089: IFFALSE 85093
// exit ;
85091: GO 85821
// uc_side := your_side ;
85093: LD_ADDR_OWVAR 20
85097: PUSH
85098: LD_OWVAR 2
85102: ST_TO_ADDR
// uc_nation := nation ;
85103: LD_ADDR_OWVAR 21
85107: PUSH
85108: LD_VAR 0 1
85112: ST_TO_ADDR
// bc_level = 1 ;
85113: LD_ADDR_OWVAR 43
85117: PUSH
85118: LD_INT 1
85120: ST_TO_ADDR
// case btype of 1 :
85121: LD_VAR 0 2
85125: PUSH
85126: LD_INT 1
85128: DOUBLE
85129: EQUAL
85130: IFTRUE 85134
85132: GO 85145
85134: POP
// bc_type := b_depot ; 2 :
85135: LD_ADDR_OWVAR 42
85139: PUSH
85140: LD_INT 0
85142: ST_TO_ADDR
85143: GO 85765
85145: LD_INT 2
85147: DOUBLE
85148: EQUAL
85149: IFTRUE 85153
85151: GO 85164
85153: POP
// bc_type := b_warehouse ; 3 :
85154: LD_ADDR_OWVAR 42
85158: PUSH
85159: LD_INT 1
85161: ST_TO_ADDR
85162: GO 85765
85164: LD_INT 3
85166: DOUBLE
85167: EQUAL
85168: IFTRUE 85172
85170: GO 85183
85172: POP
// bc_type := b_lab ; 4 .. 9 :
85173: LD_ADDR_OWVAR 42
85177: PUSH
85178: LD_INT 6
85180: ST_TO_ADDR
85181: GO 85765
85183: LD_INT 4
85185: DOUBLE
85186: GREATEREQUAL
85187: IFFALSE 85195
85189: LD_INT 9
85191: DOUBLE
85192: LESSEQUAL
85193: IFTRUE 85197
85195: GO 85257
85197: POP
// begin bc_type := b_lab_half ;
85198: LD_ADDR_OWVAR 42
85202: PUSH
85203: LD_INT 7
85205: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
85206: LD_ADDR_OWVAR 44
85210: PUSH
85211: LD_INT 10
85213: PUSH
85214: LD_INT 11
85216: PUSH
85217: LD_INT 12
85219: PUSH
85220: LD_INT 15
85222: PUSH
85223: LD_INT 14
85225: PUSH
85226: LD_INT 13
85228: PUSH
85229: EMPTY
85230: LIST
85231: LIST
85232: LIST
85233: LIST
85234: LIST
85235: LIST
85236: PUSH
85237: LD_VAR 0 2
85241: PUSH
85242: LD_INT 3
85244: MINUS
85245: ARRAY
85246: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
85247: LD_ADDR_OWVAR 45
85251: PUSH
85252: LD_INT 9
85254: ST_TO_ADDR
// end ; 10 .. 13 :
85255: GO 85765
85257: LD_INT 10
85259: DOUBLE
85260: GREATEREQUAL
85261: IFFALSE 85269
85263: LD_INT 13
85265: DOUBLE
85266: LESSEQUAL
85267: IFTRUE 85271
85269: GO 85348
85271: POP
// begin bc_type := b_lab_full ;
85272: LD_ADDR_OWVAR 42
85276: PUSH
85277: LD_INT 8
85279: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
85280: LD_ADDR_OWVAR 44
85284: PUSH
85285: LD_INT 10
85287: PUSH
85288: LD_INT 12
85290: PUSH
85291: LD_INT 14
85293: PUSH
85294: LD_INT 13
85296: PUSH
85297: EMPTY
85298: LIST
85299: LIST
85300: LIST
85301: LIST
85302: PUSH
85303: LD_VAR 0 2
85307: PUSH
85308: LD_INT 9
85310: MINUS
85311: ARRAY
85312: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
85313: LD_ADDR_OWVAR 45
85317: PUSH
85318: LD_INT 11
85320: PUSH
85321: LD_INT 15
85323: PUSH
85324: LD_INT 12
85326: PUSH
85327: LD_INT 15
85329: PUSH
85330: EMPTY
85331: LIST
85332: LIST
85333: LIST
85334: LIST
85335: PUSH
85336: LD_VAR 0 2
85340: PUSH
85341: LD_INT 9
85343: MINUS
85344: ARRAY
85345: ST_TO_ADDR
// end ; 14 :
85346: GO 85765
85348: LD_INT 14
85350: DOUBLE
85351: EQUAL
85352: IFTRUE 85356
85354: GO 85367
85356: POP
// bc_type := b_workshop ; 15 :
85357: LD_ADDR_OWVAR 42
85361: PUSH
85362: LD_INT 2
85364: ST_TO_ADDR
85365: GO 85765
85367: LD_INT 15
85369: DOUBLE
85370: EQUAL
85371: IFTRUE 85375
85373: GO 85386
85375: POP
// bc_type := b_factory ; 16 :
85376: LD_ADDR_OWVAR 42
85380: PUSH
85381: LD_INT 3
85383: ST_TO_ADDR
85384: GO 85765
85386: LD_INT 16
85388: DOUBLE
85389: EQUAL
85390: IFTRUE 85394
85392: GO 85405
85394: POP
// bc_type := b_ext_gun ; 17 :
85395: LD_ADDR_OWVAR 42
85399: PUSH
85400: LD_INT 17
85402: ST_TO_ADDR
85403: GO 85765
85405: LD_INT 17
85407: DOUBLE
85408: EQUAL
85409: IFTRUE 85413
85411: GO 85441
85413: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
85414: LD_ADDR_OWVAR 42
85418: PUSH
85419: LD_INT 19
85421: PUSH
85422: LD_INT 23
85424: PUSH
85425: LD_INT 19
85427: PUSH
85428: EMPTY
85429: LIST
85430: LIST
85431: LIST
85432: PUSH
85433: LD_VAR 0 1
85437: ARRAY
85438: ST_TO_ADDR
85439: GO 85765
85441: LD_INT 18
85443: DOUBLE
85444: EQUAL
85445: IFTRUE 85449
85447: GO 85460
85449: POP
// bc_type := b_ext_radar ; 19 :
85450: LD_ADDR_OWVAR 42
85454: PUSH
85455: LD_INT 20
85457: ST_TO_ADDR
85458: GO 85765
85460: LD_INT 19
85462: DOUBLE
85463: EQUAL
85464: IFTRUE 85468
85466: GO 85479
85468: POP
// bc_type := b_ext_radio ; 20 :
85469: LD_ADDR_OWVAR 42
85473: PUSH
85474: LD_INT 22
85476: ST_TO_ADDR
85477: GO 85765
85479: LD_INT 20
85481: DOUBLE
85482: EQUAL
85483: IFTRUE 85487
85485: GO 85498
85487: POP
// bc_type := b_ext_siberium ; 21 :
85488: LD_ADDR_OWVAR 42
85492: PUSH
85493: LD_INT 21
85495: ST_TO_ADDR
85496: GO 85765
85498: LD_INT 21
85500: DOUBLE
85501: EQUAL
85502: IFTRUE 85506
85504: GO 85517
85506: POP
// bc_type := b_ext_computer ; 22 :
85507: LD_ADDR_OWVAR 42
85511: PUSH
85512: LD_INT 24
85514: ST_TO_ADDR
85515: GO 85765
85517: LD_INT 22
85519: DOUBLE
85520: EQUAL
85521: IFTRUE 85525
85523: GO 85536
85525: POP
// bc_type := b_ext_track ; 23 :
85526: LD_ADDR_OWVAR 42
85530: PUSH
85531: LD_INT 16
85533: ST_TO_ADDR
85534: GO 85765
85536: LD_INT 23
85538: DOUBLE
85539: EQUAL
85540: IFTRUE 85544
85542: GO 85555
85544: POP
// bc_type := b_ext_laser ; 24 :
85545: LD_ADDR_OWVAR 42
85549: PUSH
85550: LD_INT 25
85552: ST_TO_ADDR
85553: GO 85765
85555: LD_INT 24
85557: DOUBLE
85558: EQUAL
85559: IFTRUE 85563
85561: GO 85574
85563: POP
// bc_type := b_control_tower ; 25 :
85564: LD_ADDR_OWVAR 42
85568: PUSH
85569: LD_INT 36
85571: ST_TO_ADDR
85572: GO 85765
85574: LD_INT 25
85576: DOUBLE
85577: EQUAL
85578: IFTRUE 85582
85580: GO 85593
85582: POP
// bc_type := b_breastwork ; 26 :
85583: LD_ADDR_OWVAR 42
85587: PUSH
85588: LD_INT 31
85590: ST_TO_ADDR
85591: GO 85765
85593: LD_INT 26
85595: DOUBLE
85596: EQUAL
85597: IFTRUE 85601
85599: GO 85612
85601: POP
// bc_type := b_bunker ; 27 :
85602: LD_ADDR_OWVAR 42
85606: PUSH
85607: LD_INT 32
85609: ST_TO_ADDR
85610: GO 85765
85612: LD_INT 27
85614: DOUBLE
85615: EQUAL
85616: IFTRUE 85620
85618: GO 85631
85620: POP
// bc_type := b_turret ; 28 :
85621: LD_ADDR_OWVAR 42
85625: PUSH
85626: LD_INT 33
85628: ST_TO_ADDR
85629: GO 85765
85631: LD_INT 28
85633: DOUBLE
85634: EQUAL
85635: IFTRUE 85639
85637: GO 85650
85639: POP
// bc_type := b_armoury ; 29 :
85640: LD_ADDR_OWVAR 42
85644: PUSH
85645: LD_INT 4
85647: ST_TO_ADDR
85648: GO 85765
85650: LD_INT 29
85652: DOUBLE
85653: EQUAL
85654: IFTRUE 85658
85656: GO 85669
85658: POP
// bc_type := b_barracks ; 30 :
85659: LD_ADDR_OWVAR 42
85663: PUSH
85664: LD_INT 5
85666: ST_TO_ADDR
85667: GO 85765
85669: LD_INT 30
85671: DOUBLE
85672: EQUAL
85673: IFTRUE 85677
85675: GO 85688
85677: POP
// bc_type := b_solar_power ; 31 :
85678: LD_ADDR_OWVAR 42
85682: PUSH
85683: LD_INT 27
85685: ST_TO_ADDR
85686: GO 85765
85688: LD_INT 31
85690: DOUBLE
85691: EQUAL
85692: IFTRUE 85696
85694: GO 85707
85696: POP
// bc_type := b_oil_power ; 32 :
85697: LD_ADDR_OWVAR 42
85701: PUSH
85702: LD_INT 26
85704: ST_TO_ADDR
85705: GO 85765
85707: LD_INT 32
85709: DOUBLE
85710: EQUAL
85711: IFTRUE 85715
85713: GO 85726
85715: POP
// bc_type := b_siberite_power ; 33 :
85716: LD_ADDR_OWVAR 42
85720: PUSH
85721: LD_INT 28
85723: ST_TO_ADDR
85724: GO 85765
85726: LD_INT 33
85728: DOUBLE
85729: EQUAL
85730: IFTRUE 85734
85732: GO 85745
85734: POP
// bc_type := b_oil_mine ; 34 :
85735: LD_ADDR_OWVAR 42
85739: PUSH
85740: LD_INT 29
85742: ST_TO_ADDR
85743: GO 85765
85745: LD_INT 34
85747: DOUBLE
85748: EQUAL
85749: IFTRUE 85753
85751: GO 85764
85753: POP
// bc_type := b_siberite_mine ; end ;
85754: LD_ADDR_OWVAR 42
85758: PUSH
85759: LD_INT 30
85761: ST_TO_ADDR
85762: GO 85765
85764: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
85765: LD_ADDR_VAR 0 8
85769: PUSH
85770: LD_VAR 0 5
85774: PPUSH
85775: LD_VAR 0 6
85779: PPUSH
85780: LD_VAR 0 3
85784: PPUSH
85785: CALL_OW 47
85789: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
85790: LD_OWVAR 42
85794: PUSH
85795: LD_INT 32
85797: PUSH
85798: LD_INT 33
85800: PUSH
85801: EMPTY
85802: LIST
85803: LIST
85804: IN
85805: IFFALSE 85821
// PlaceWeaponTurret ( b , weapon ) ;
85807: LD_VAR 0 8
85811: PPUSH
85812: LD_VAR 0 4
85816: PPUSH
85817: CALL_OW 431
// end ;
85821: LD_VAR 0 7
85825: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
85826: LD_INT 0
85828: PPUSH
85829: PPUSH
85830: PPUSH
85831: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85832: LD_ADDR_VAR 0 4
85836: PUSH
85837: LD_INT 22
85839: PUSH
85840: LD_OWVAR 2
85844: PUSH
85845: EMPTY
85846: LIST
85847: LIST
85848: PUSH
85849: LD_INT 2
85851: PUSH
85852: LD_INT 30
85854: PUSH
85855: LD_INT 0
85857: PUSH
85858: EMPTY
85859: LIST
85860: LIST
85861: PUSH
85862: LD_INT 30
85864: PUSH
85865: LD_INT 1
85867: PUSH
85868: EMPTY
85869: LIST
85870: LIST
85871: PUSH
85872: EMPTY
85873: LIST
85874: LIST
85875: LIST
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PPUSH
85881: CALL_OW 69
85885: ST_TO_ADDR
// if not tmp then
85886: LD_VAR 0 4
85890: NOT
85891: IFFALSE 85895
// exit ;
85893: GO 85954
// for i in tmp do
85895: LD_ADDR_VAR 0 2
85899: PUSH
85900: LD_VAR 0 4
85904: PUSH
85905: FOR_IN
85906: IFFALSE 85952
// for j = 1 to 3 do
85908: LD_ADDR_VAR 0 3
85912: PUSH
85913: DOUBLE
85914: LD_INT 1
85916: DEC
85917: ST_TO_ADDR
85918: LD_INT 3
85920: PUSH
85921: FOR_TO
85922: IFFALSE 85948
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
85924: LD_VAR 0 2
85928: PPUSH
85929: CALL_OW 274
85933: PPUSH
85934: LD_VAR 0 3
85938: PPUSH
85939: LD_INT 99999
85941: PPUSH
85942: CALL_OW 277
85946: GO 85921
85948: POP
85949: POP
85950: GO 85905
85952: POP
85953: POP
// end ;
85954: LD_VAR 0 1
85958: RET
// export function hHackSetLevel10 ; var i , j ; begin
85959: LD_INT 0
85961: PPUSH
85962: PPUSH
85963: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85964: LD_ADDR_VAR 0 2
85968: PUSH
85969: LD_INT 21
85971: PUSH
85972: LD_INT 1
85974: PUSH
85975: EMPTY
85976: LIST
85977: LIST
85978: PPUSH
85979: CALL_OW 69
85983: PUSH
85984: FOR_IN
85985: IFFALSE 86037
// if IsSelected ( i ) then
85987: LD_VAR 0 2
85991: PPUSH
85992: CALL_OW 306
85996: IFFALSE 86035
// begin for j := 1 to 4 do
85998: LD_ADDR_VAR 0 3
86002: PUSH
86003: DOUBLE
86004: LD_INT 1
86006: DEC
86007: ST_TO_ADDR
86008: LD_INT 4
86010: PUSH
86011: FOR_TO
86012: IFFALSE 86033
// SetSkill ( i , j , 10 ) ;
86014: LD_VAR 0 2
86018: PPUSH
86019: LD_VAR 0 3
86023: PPUSH
86024: LD_INT 10
86026: PPUSH
86027: CALL_OW 237
86031: GO 86011
86033: POP
86034: POP
// end ;
86035: GO 85984
86037: POP
86038: POP
// end ;
86039: LD_VAR 0 1
86043: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
86044: LD_INT 0
86046: PPUSH
86047: PPUSH
86048: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
86049: LD_ADDR_VAR 0 2
86053: PUSH
86054: LD_INT 22
86056: PUSH
86057: LD_OWVAR 2
86061: PUSH
86062: EMPTY
86063: LIST
86064: LIST
86065: PUSH
86066: LD_INT 21
86068: PUSH
86069: LD_INT 1
86071: PUSH
86072: EMPTY
86073: LIST
86074: LIST
86075: PUSH
86076: EMPTY
86077: LIST
86078: LIST
86079: PPUSH
86080: CALL_OW 69
86084: PUSH
86085: FOR_IN
86086: IFFALSE 86127
// begin for j := 1 to 4 do
86088: LD_ADDR_VAR 0 3
86092: PUSH
86093: DOUBLE
86094: LD_INT 1
86096: DEC
86097: ST_TO_ADDR
86098: LD_INT 4
86100: PUSH
86101: FOR_TO
86102: IFFALSE 86123
// SetSkill ( i , j , 10 ) ;
86104: LD_VAR 0 2
86108: PPUSH
86109: LD_VAR 0 3
86113: PPUSH
86114: LD_INT 10
86116: PPUSH
86117: CALL_OW 237
86121: GO 86101
86123: POP
86124: POP
// end ;
86125: GO 86085
86127: POP
86128: POP
// end ;
86129: LD_VAR 0 1
86133: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
86134: LD_INT 0
86136: PPUSH
// uc_side := your_side ;
86137: LD_ADDR_OWVAR 20
86141: PUSH
86142: LD_OWVAR 2
86146: ST_TO_ADDR
// uc_nation := nation ;
86147: LD_ADDR_OWVAR 21
86151: PUSH
86152: LD_VAR 0 1
86156: ST_TO_ADDR
// InitHc ;
86157: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
86161: LD_INT 0
86163: PPUSH
86164: LD_VAR 0 2
86168: PPUSH
86169: LD_VAR 0 3
86173: PPUSH
86174: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
86178: LD_VAR 0 4
86182: PPUSH
86183: LD_VAR 0 5
86187: PPUSH
86188: CALL_OW 428
86192: PUSH
86193: LD_INT 0
86195: EQUAL
86196: IFFALSE 86220
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
86198: CALL_OW 44
86202: PPUSH
86203: LD_VAR 0 4
86207: PPUSH
86208: LD_VAR 0 5
86212: PPUSH
86213: LD_INT 1
86215: PPUSH
86216: CALL_OW 48
// end ;
86220: LD_VAR 0 6
86224: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
86225: LD_INT 0
86227: PPUSH
86228: PPUSH
// uc_side := your_side ;
86229: LD_ADDR_OWVAR 20
86233: PUSH
86234: LD_OWVAR 2
86238: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
86239: LD_VAR 0 1
86243: PUSH
86244: LD_INT 1
86246: PUSH
86247: LD_INT 2
86249: PUSH
86250: LD_INT 3
86252: PUSH
86253: LD_INT 4
86255: PUSH
86256: LD_INT 5
86258: PUSH
86259: EMPTY
86260: LIST
86261: LIST
86262: LIST
86263: LIST
86264: LIST
86265: IN
86266: IFFALSE 86278
// uc_nation := nation_american else
86268: LD_ADDR_OWVAR 21
86272: PUSH
86273: LD_INT 1
86275: ST_TO_ADDR
86276: GO 86321
// if chassis in [ 11 , 12 , 13 , 14 ] then
86278: LD_VAR 0 1
86282: PUSH
86283: LD_INT 11
86285: PUSH
86286: LD_INT 12
86288: PUSH
86289: LD_INT 13
86291: PUSH
86292: LD_INT 14
86294: PUSH
86295: EMPTY
86296: LIST
86297: LIST
86298: LIST
86299: LIST
86300: IN
86301: IFFALSE 86313
// uc_nation := nation_arabian else
86303: LD_ADDR_OWVAR 21
86307: PUSH
86308: LD_INT 2
86310: ST_TO_ADDR
86311: GO 86321
// uc_nation := nation_russian ;
86313: LD_ADDR_OWVAR 21
86317: PUSH
86318: LD_INT 3
86320: ST_TO_ADDR
// vc_chassis := chassis ;
86321: LD_ADDR_OWVAR 37
86325: PUSH
86326: LD_VAR 0 1
86330: ST_TO_ADDR
// vc_engine := engine ;
86331: LD_ADDR_OWVAR 39
86335: PUSH
86336: LD_VAR 0 2
86340: ST_TO_ADDR
// vc_control := control ;
86341: LD_ADDR_OWVAR 38
86345: PUSH
86346: LD_VAR 0 3
86350: ST_TO_ADDR
// vc_weapon := weapon ;
86351: LD_ADDR_OWVAR 40
86355: PUSH
86356: LD_VAR 0 4
86360: ST_TO_ADDR
// un := CreateVehicle ;
86361: LD_ADDR_VAR 0 8
86365: PUSH
86366: CALL_OW 45
86370: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
86371: LD_VAR 0 8
86375: PPUSH
86376: LD_INT 0
86378: PPUSH
86379: LD_INT 5
86381: PPUSH
86382: CALL_OW 12
86386: PPUSH
86387: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
86391: LD_VAR 0 8
86395: PPUSH
86396: LD_VAR 0 5
86400: PPUSH
86401: LD_VAR 0 6
86405: PPUSH
86406: LD_INT 1
86408: PPUSH
86409: CALL_OW 48
// end ;
86413: LD_VAR 0 7
86417: RET
// export hInvincible ; every 1 do
86418: GO 86420
86420: DISABLE
// hInvincible := [ ] ;
86421: LD_ADDR_EXP 121
86425: PUSH
86426: EMPTY
86427: ST_TO_ADDR
86428: END
// every 10 do var i ;
86429: GO 86431
86431: DISABLE
86432: LD_INT 0
86434: PPUSH
// begin enable ;
86435: ENABLE
// if not hInvincible then
86436: LD_EXP 121
86440: NOT
86441: IFFALSE 86445
// exit ;
86443: GO 86489
// for i in hInvincible do
86445: LD_ADDR_VAR 0 1
86449: PUSH
86450: LD_EXP 121
86454: PUSH
86455: FOR_IN
86456: IFFALSE 86487
// if GetLives ( i ) < 1000 then
86458: LD_VAR 0 1
86462: PPUSH
86463: CALL_OW 256
86467: PUSH
86468: LD_INT 1000
86470: LESS
86471: IFFALSE 86485
// SetLives ( i , 1000 ) ;
86473: LD_VAR 0 1
86477: PPUSH
86478: LD_INT 1000
86480: PPUSH
86481: CALL_OW 234
86485: GO 86455
86487: POP
86488: POP
// end ;
86489: PPOPN 1
86491: END
// export function hHackInvincible ; var i ; begin
86492: LD_INT 0
86494: PPUSH
86495: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
86496: LD_ADDR_VAR 0 2
86500: PUSH
86501: LD_INT 2
86503: PUSH
86504: LD_INT 21
86506: PUSH
86507: LD_INT 1
86509: PUSH
86510: EMPTY
86511: LIST
86512: LIST
86513: PUSH
86514: LD_INT 21
86516: PUSH
86517: LD_INT 2
86519: PUSH
86520: EMPTY
86521: LIST
86522: LIST
86523: PUSH
86524: EMPTY
86525: LIST
86526: LIST
86527: LIST
86528: PPUSH
86529: CALL_OW 69
86533: PUSH
86534: FOR_IN
86535: IFFALSE 86596
// if IsSelected ( i ) then
86537: LD_VAR 0 2
86541: PPUSH
86542: CALL_OW 306
86546: IFFALSE 86594
// begin if i in hInvincible then
86548: LD_VAR 0 2
86552: PUSH
86553: LD_EXP 121
86557: IN
86558: IFFALSE 86578
// hInvincible := hInvincible diff i else
86560: LD_ADDR_EXP 121
86564: PUSH
86565: LD_EXP 121
86569: PUSH
86570: LD_VAR 0 2
86574: DIFF
86575: ST_TO_ADDR
86576: GO 86594
// hInvincible := hInvincible union i ;
86578: LD_ADDR_EXP 121
86582: PUSH
86583: LD_EXP 121
86587: PUSH
86588: LD_VAR 0 2
86592: UNION
86593: ST_TO_ADDR
// end ;
86594: GO 86534
86596: POP
86597: POP
// end ;
86598: LD_VAR 0 1
86602: RET
// export function hHackInvisible ; var i , j ; begin
86603: LD_INT 0
86605: PPUSH
86606: PPUSH
86607: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
86608: LD_ADDR_VAR 0 2
86612: PUSH
86613: LD_INT 21
86615: PUSH
86616: LD_INT 1
86618: PUSH
86619: EMPTY
86620: LIST
86621: LIST
86622: PPUSH
86623: CALL_OW 69
86627: PUSH
86628: FOR_IN
86629: IFFALSE 86653
// if IsSelected ( i ) then
86631: LD_VAR 0 2
86635: PPUSH
86636: CALL_OW 306
86640: IFFALSE 86651
// ComForceInvisible ( i ) ;
86642: LD_VAR 0 2
86646: PPUSH
86647: CALL_OW 496
86651: GO 86628
86653: POP
86654: POP
// end ;
86655: LD_VAR 0 1
86659: RET
// export function hHackChangeYourSide ; begin
86660: LD_INT 0
86662: PPUSH
// if your_side = 8 then
86663: LD_OWVAR 2
86667: PUSH
86668: LD_INT 8
86670: EQUAL
86671: IFFALSE 86683
// your_side := 0 else
86673: LD_ADDR_OWVAR 2
86677: PUSH
86678: LD_INT 0
86680: ST_TO_ADDR
86681: GO 86697
// your_side := your_side + 1 ;
86683: LD_ADDR_OWVAR 2
86687: PUSH
86688: LD_OWVAR 2
86692: PUSH
86693: LD_INT 1
86695: PLUS
86696: ST_TO_ADDR
// end ;
86697: LD_VAR 0 1
86701: RET
// export function hHackChangeUnitSide ; var i , j ; begin
86702: LD_INT 0
86704: PPUSH
86705: PPUSH
86706: PPUSH
// for i in all_units do
86707: LD_ADDR_VAR 0 2
86711: PUSH
86712: LD_OWVAR 3
86716: PUSH
86717: FOR_IN
86718: IFFALSE 86796
// if IsSelected ( i ) then
86720: LD_VAR 0 2
86724: PPUSH
86725: CALL_OW 306
86729: IFFALSE 86794
// begin j := GetSide ( i ) ;
86731: LD_ADDR_VAR 0 3
86735: PUSH
86736: LD_VAR 0 2
86740: PPUSH
86741: CALL_OW 255
86745: ST_TO_ADDR
// if j = 8 then
86746: LD_VAR 0 3
86750: PUSH
86751: LD_INT 8
86753: EQUAL
86754: IFFALSE 86766
// j := 0 else
86756: LD_ADDR_VAR 0 3
86760: PUSH
86761: LD_INT 0
86763: ST_TO_ADDR
86764: GO 86780
// j := j + 1 ;
86766: LD_ADDR_VAR 0 3
86770: PUSH
86771: LD_VAR 0 3
86775: PUSH
86776: LD_INT 1
86778: PLUS
86779: ST_TO_ADDR
// SetSide ( i , j ) ;
86780: LD_VAR 0 2
86784: PPUSH
86785: LD_VAR 0 3
86789: PPUSH
86790: CALL_OW 235
// end ;
86794: GO 86717
86796: POP
86797: POP
// end ;
86798: LD_VAR 0 1
86802: RET
// export function hHackFog ; begin
86803: LD_INT 0
86805: PPUSH
// FogOff ( true ) ;
86806: LD_INT 1
86808: PPUSH
86809: CALL_OW 344
// end ;
86813: LD_VAR 0 1
86817: RET
// export function hHackTeleport ( unit , x , y ) ; begin
86818: LD_INT 0
86820: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
86821: LD_VAR 0 1
86825: PPUSH
86826: LD_VAR 0 2
86830: PPUSH
86831: LD_VAR 0 3
86835: PPUSH
86836: LD_INT 1
86838: PPUSH
86839: LD_INT 1
86841: PPUSH
86842: CALL_OW 483
// CenterOnXY ( x , y ) ;
86846: LD_VAR 0 2
86850: PPUSH
86851: LD_VAR 0 3
86855: PPUSH
86856: CALL_OW 84
// end ;
86860: LD_VAR 0 4
86864: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
86865: LD_INT 0
86867: PPUSH
86868: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
86869: LD_VAR 0 1
86873: NOT
86874: PUSH
86875: LD_VAR 0 2
86879: PPUSH
86880: LD_VAR 0 3
86884: PPUSH
86885: CALL_OW 488
86889: NOT
86890: OR
86891: PUSH
86892: LD_VAR 0 1
86896: PPUSH
86897: CALL_OW 266
86901: PUSH
86902: LD_INT 3
86904: NONEQUAL
86905: PUSH
86906: LD_VAR 0 1
86910: PPUSH
86911: CALL_OW 247
86915: PUSH
86916: LD_INT 1
86918: EQUAL
86919: NOT
86920: AND
86921: OR
86922: IFFALSE 86926
// exit ;
86924: GO 87208
// if GetType ( factory ) = unit_human then
86926: LD_VAR 0 1
86930: PPUSH
86931: CALL_OW 247
86935: PUSH
86936: LD_INT 1
86938: EQUAL
86939: IFFALSE 86956
// factory := IsInUnit ( factory ) ;
86941: LD_ADDR_VAR 0 1
86945: PUSH
86946: LD_VAR 0 1
86950: PPUSH
86951: CALL_OW 310
86955: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
86956: LD_VAR 0 1
86960: PPUSH
86961: CALL_OW 266
86965: PUSH
86966: LD_INT 3
86968: NONEQUAL
86969: IFFALSE 86973
// exit ;
86971: GO 87208
// for i := 1 to Count ( factoryWaypoints ) do
86973: LD_ADDR_VAR 0 5
86977: PUSH
86978: DOUBLE
86979: LD_INT 1
86981: DEC
86982: ST_TO_ADDR
86983: LD_EXP 122
86987: PPUSH
86988: CALL 31658 0 1
86992: PUSH
86993: FOR_TO
86994: IFFALSE 87156
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
86996: LD_VAR 0 2
87000: PPUSH
87001: LD_VAR 0 3
87005: PPUSH
87006: CALL_OW 428
87010: PUSH
87011: LD_EXP 122
87015: PUSH
87016: LD_VAR 0 5
87020: ARRAY
87021: PUSH
87022: LD_INT 2
87024: ARRAY
87025: EQUAL
87026: IFFALSE 87058
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
87028: LD_ADDR_EXP 122
87032: PUSH
87033: LD_EXP 122
87037: PPUSH
87038: LD_VAR 0 5
87042: PPUSH
87043: CALL_OW 3
87047: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87048: CALL 87213 0 0
// exit ;
87052: POP
87053: POP
87054: GO 87208
// end else
87056: GO 87154
// if factory = factoryWaypoints [ i ] [ 2 ] then
87058: LD_VAR 0 1
87062: PUSH
87063: LD_EXP 122
87067: PUSH
87068: LD_VAR 0 5
87072: ARRAY
87073: PUSH
87074: LD_INT 2
87076: ARRAY
87077: EQUAL
87078: IFFALSE 87154
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
87080: LD_ADDR_EXP 122
87084: PUSH
87085: LD_EXP 122
87089: PPUSH
87090: LD_VAR 0 5
87094: PPUSH
87095: CALL_OW 3
87099: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
87100: LD_ADDR_EXP 122
87104: PUSH
87105: LD_EXP 122
87109: PPUSH
87110: LD_VAR 0 1
87114: PPUSH
87115: CALL_OW 255
87119: PUSH
87120: LD_VAR 0 1
87124: PUSH
87125: LD_VAR 0 2
87129: PUSH
87130: LD_VAR 0 3
87134: PUSH
87135: EMPTY
87136: LIST
87137: LIST
87138: LIST
87139: LIST
87140: PPUSH
87141: CALL 67267 0 2
87145: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87146: CALL 87213 0 0
// exit ;
87150: POP
87151: POP
87152: GO 87208
// end ; end ;
87154: GO 86993
87156: POP
87157: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
87158: LD_ADDR_EXP 122
87162: PUSH
87163: LD_EXP 122
87167: PPUSH
87168: LD_VAR 0 1
87172: PPUSH
87173: CALL_OW 255
87177: PUSH
87178: LD_VAR 0 1
87182: PUSH
87183: LD_VAR 0 2
87187: PUSH
87188: LD_VAR 0 3
87192: PUSH
87193: EMPTY
87194: LIST
87195: LIST
87196: LIST
87197: LIST
87198: PPUSH
87199: CALL 67267 0 2
87203: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87204: CALL 87213 0 0
// end ;
87208: LD_VAR 0 4
87212: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
87213: LD_INT 0
87215: PPUSH
87216: PPUSH
87217: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
87218: LD_STRING resetFactoryWaypoint();
87220: PPUSH
87221: CALL_OW 559
// if factoryWaypoints then
87225: LD_EXP 122
87229: IFFALSE 87350
// begin list := factoryWaypoints ;
87231: LD_ADDR_VAR 0 3
87235: PUSH
87236: LD_EXP 122
87240: ST_TO_ADDR
// for i := 1 to list do
87241: LD_ADDR_VAR 0 2
87245: PUSH
87246: DOUBLE
87247: LD_INT 1
87249: DEC
87250: ST_TO_ADDR
87251: LD_VAR 0 3
87255: PUSH
87256: FOR_TO
87257: IFFALSE 87348
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87259: LD_STRING setFactoryWaypointXY(
87261: PUSH
87262: LD_VAR 0 3
87266: PUSH
87267: LD_VAR 0 2
87271: ARRAY
87272: PUSH
87273: LD_INT 1
87275: ARRAY
87276: STR
87277: PUSH
87278: LD_STRING ,
87280: STR
87281: PUSH
87282: LD_VAR 0 3
87286: PUSH
87287: LD_VAR 0 2
87291: ARRAY
87292: PUSH
87293: LD_INT 2
87295: ARRAY
87296: STR
87297: PUSH
87298: LD_STRING ,
87300: STR
87301: PUSH
87302: LD_VAR 0 3
87306: PUSH
87307: LD_VAR 0 2
87311: ARRAY
87312: PUSH
87313: LD_INT 3
87315: ARRAY
87316: STR
87317: PUSH
87318: LD_STRING ,
87320: STR
87321: PUSH
87322: LD_VAR 0 3
87326: PUSH
87327: LD_VAR 0 2
87331: ARRAY
87332: PUSH
87333: LD_INT 4
87335: ARRAY
87336: STR
87337: PUSH
87338: LD_STRING )
87340: STR
87341: PPUSH
87342: CALL_OW 559
87346: GO 87256
87348: POP
87349: POP
// end ; end ;
87350: LD_VAR 0 1
87354: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
87355: LD_INT 0
87357: PPUSH
// if HexInfo ( x , y ) = warehouse then
87358: LD_VAR 0 2
87362: PPUSH
87363: LD_VAR 0 3
87367: PPUSH
87368: CALL_OW 428
87372: PUSH
87373: LD_VAR 0 1
87377: EQUAL
87378: IFFALSE 87405
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
87380: LD_ADDR_EXP 124
87384: PUSH
87385: LD_EXP 124
87389: PPUSH
87390: LD_VAR 0 1
87394: PPUSH
87395: LD_INT 0
87397: PPUSH
87398: CALL_OW 1
87402: ST_TO_ADDR
87403: GO 87456
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
87405: LD_ADDR_EXP 124
87409: PUSH
87410: LD_EXP 124
87414: PPUSH
87415: LD_VAR 0 1
87419: PPUSH
87420: LD_VAR 0 1
87424: PPUSH
87425: CALL_OW 255
87429: PUSH
87430: LD_VAR 0 1
87434: PUSH
87435: LD_VAR 0 2
87439: PUSH
87440: LD_VAR 0 3
87444: PUSH
87445: EMPTY
87446: LIST
87447: LIST
87448: LIST
87449: LIST
87450: PPUSH
87451: CALL_OW 1
87455: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
87456: CALL 87465 0 0
// end ;
87460: LD_VAR 0 4
87464: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
87465: LD_INT 0
87467: PPUSH
87468: PPUSH
87469: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
87470: LD_STRING resetWarehouseGatheringPoints();
87472: PPUSH
87473: CALL_OW 559
// if warehouseGatheringPoints then
87477: LD_EXP 124
87481: IFFALSE 87607
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
87483: LD_ADDR_VAR 0 3
87487: PUSH
87488: LD_EXP 124
87492: PPUSH
87493: CALL 71035 0 1
87497: ST_TO_ADDR
// for i := 1 to list do
87498: LD_ADDR_VAR 0 2
87502: PUSH
87503: DOUBLE
87504: LD_INT 1
87506: DEC
87507: ST_TO_ADDR
87508: LD_VAR 0 3
87512: PUSH
87513: FOR_TO
87514: IFFALSE 87605
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87516: LD_STRING setWarehouseGatheringPointXY(
87518: PUSH
87519: LD_VAR 0 3
87523: PUSH
87524: LD_VAR 0 2
87528: ARRAY
87529: PUSH
87530: LD_INT 1
87532: ARRAY
87533: STR
87534: PUSH
87535: LD_STRING ,
87537: STR
87538: PUSH
87539: LD_VAR 0 3
87543: PUSH
87544: LD_VAR 0 2
87548: ARRAY
87549: PUSH
87550: LD_INT 2
87552: ARRAY
87553: STR
87554: PUSH
87555: LD_STRING ,
87557: STR
87558: PUSH
87559: LD_VAR 0 3
87563: PUSH
87564: LD_VAR 0 2
87568: ARRAY
87569: PUSH
87570: LD_INT 3
87572: ARRAY
87573: STR
87574: PUSH
87575: LD_STRING ,
87577: STR
87578: PUSH
87579: LD_VAR 0 3
87583: PUSH
87584: LD_VAR 0 2
87588: ARRAY
87589: PUSH
87590: LD_INT 4
87592: ARRAY
87593: STR
87594: PUSH
87595: LD_STRING )
87597: STR
87598: PPUSH
87599: CALL_OW 559
87603: GO 87513
87605: POP
87606: POP
// end ; end ;
87607: LD_VAR 0 1
87611: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
87612: LD_EXP 124
87616: IFFALSE 88301
87618: GO 87620
87620: DISABLE
87621: LD_INT 0
87623: PPUSH
87624: PPUSH
87625: PPUSH
87626: PPUSH
87627: PPUSH
87628: PPUSH
87629: PPUSH
87630: PPUSH
87631: PPUSH
// begin enable ;
87632: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
87633: LD_ADDR_VAR 0 3
87637: PUSH
87638: LD_EXP 124
87642: PPUSH
87643: CALL 71035 0 1
87647: ST_TO_ADDR
// if not list then
87648: LD_VAR 0 3
87652: NOT
87653: IFFALSE 87657
// exit ;
87655: GO 88301
// for i := 1 to list do
87657: LD_ADDR_VAR 0 1
87661: PUSH
87662: DOUBLE
87663: LD_INT 1
87665: DEC
87666: ST_TO_ADDR
87667: LD_VAR 0 3
87671: PUSH
87672: FOR_TO
87673: IFFALSE 88299
// begin depot := list [ i ] [ 2 ] ;
87675: LD_ADDR_VAR 0 8
87679: PUSH
87680: LD_VAR 0 3
87684: PUSH
87685: LD_VAR 0 1
87689: ARRAY
87690: PUSH
87691: LD_INT 2
87693: ARRAY
87694: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
87695: LD_ADDR_VAR 0 5
87699: PUSH
87700: LD_VAR 0 3
87704: PUSH
87705: LD_VAR 0 1
87709: ARRAY
87710: PUSH
87711: LD_INT 1
87713: ARRAY
87714: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
87715: LD_VAR 0 8
87719: PPUSH
87720: CALL_OW 301
87724: PUSH
87725: LD_VAR 0 5
87729: PUSH
87730: LD_VAR 0 8
87734: PPUSH
87735: CALL_OW 255
87739: NONEQUAL
87740: OR
87741: IFFALSE 87770
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
87743: LD_ADDR_EXP 124
87747: PUSH
87748: LD_EXP 124
87752: PPUSH
87753: LD_VAR 0 8
87757: PPUSH
87758: LD_INT 0
87760: PPUSH
87761: CALL_OW 1
87765: ST_TO_ADDR
// exit ;
87766: POP
87767: POP
87768: GO 88301
// end ; x := list [ i ] [ 3 ] ;
87770: LD_ADDR_VAR 0 6
87774: PUSH
87775: LD_VAR 0 3
87779: PUSH
87780: LD_VAR 0 1
87784: ARRAY
87785: PUSH
87786: LD_INT 3
87788: ARRAY
87789: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
87790: LD_ADDR_VAR 0 7
87794: PUSH
87795: LD_VAR 0 3
87799: PUSH
87800: LD_VAR 0 1
87804: ARRAY
87805: PUSH
87806: LD_INT 4
87808: ARRAY
87809: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
87810: LD_ADDR_VAR 0 9
87814: PUSH
87815: LD_VAR 0 6
87819: PPUSH
87820: LD_VAR 0 7
87824: PPUSH
87825: LD_INT 16
87827: PPUSH
87828: CALL 69619 0 3
87832: ST_TO_ADDR
// if not cratesNearbyPoint then
87833: LD_VAR 0 9
87837: NOT
87838: IFFALSE 87844
// exit ;
87840: POP
87841: POP
87842: GO 88301
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
87844: LD_ADDR_VAR 0 4
87848: PUSH
87849: LD_INT 22
87851: PUSH
87852: LD_VAR 0 5
87856: PUSH
87857: EMPTY
87858: LIST
87859: LIST
87860: PUSH
87861: LD_INT 3
87863: PUSH
87864: LD_INT 60
87866: PUSH
87867: EMPTY
87868: LIST
87869: PUSH
87870: EMPTY
87871: LIST
87872: LIST
87873: PUSH
87874: LD_INT 91
87876: PUSH
87877: LD_VAR 0 8
87881: PUSH
87882: LD_INT 6
87884: PUSH
87885: EMPTY
87886: LIST
87887: LIST
87888: LIST
87889: PUSH
87890: LD_INT 2
87892: PUSH
87893: LD_INT 25
87895: PUSH
87896: LD_INT 2
87898: PUSH
87899: EMPTY
87900: LIST
87901: LIST
87902: PUSH
87903: LD_INT 25
87905: PUSH
87906: LD_INT 16
87908: PUSH
87909: EMPTY
87910: LIST
87911: LIST
87912: PUSH
87913: EMPTY
87914: LIST
87915: LIST
87916: LIST
87917: PUSH
87918: EMPTY
87919: LIST
87920: LIST
87921: LIST
87922: LIST
87923: PPUSH
87924: CALL_OW 69
87928: PUSH
87929: LD_VAR 0 8
87933: PPUSH
87934: CALL_OW 313
87938: PPUSH
87939: LD_INT 3
87941: PUSH
87942: LD_INT 60
87944: PUSH
87945: EMPTY
87946: LIST
87947: PUSH
87948: EMPTY
87949: LIST
87950: LIST
87951: PUSH
87952: LD_INT 2
87954: PUSH
87955: LD_INT 25
87957: PUSH
87958: LD_INT 2
87960: PUSH
87961: EMPTY
87962: LIST
87963: LIST
87964: PUSH
87965: LD_INT 25
87967: PUSH
87968: LD_INT 16
87970: PUSH
87971: EMPTY
87972: LIST
87973: LIST
87974: PUSH
87975: EMPTY
87976: LIST
87977: LIST
87978: LIST
87979: PUSH
87980: EMPTY
87981: LIST
87982: LIST
87983: PPUSH
87984: CALL_OW 72
87988: UNION
87989: ST_TO_ADDR
// if tmp then
87990: LD_VAR 0 4
87994: IFFALSE 88074
// begin tmp := ShrinkArray ( tmp , 3 ) ;
87996: LD_ADDR_VAR 0 4
88000: PUSH
88001: LD_VAR 0 4
88005: PPUSH
88006: LD_INT 3
88008: PPUSH
88009: CALL 67582 0 2
88013: ST_TO_ADDR
// for j in tmp do
88014: LD_ADDR_VAR 0 2
88018: PUSH
88019: LD_VAR 0 4
88023: PUSH
88024: FOR_IN
88025: IFFALSE 88068
// begin if IsInUnit ( j ) then
88027: LD_VAR 0 2
88031: PPUSH
88032: CALL_OW 310
88036: IFFALSE 88047
// ComExit ( j ) ;
88038: LD_VAR 0 2
88042: PPUSH
88043: CALL 67665 0 1
// AddComCollect ( j , x , y ) ;
88047: LD_VAR 0 2
88051: PPUSH
88052: LD_VAR 0 6
88056: PPUSH
88057: LD_VAR 0 7
88061: PPUSH
88062: CALL_OW 177
// end ;
88066: GO 88024
88068: POP
88069: POP
// exit ;
88070: POP
88071: POP
88072: GO 88301
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
88074: LD_ADDR_VAR 0 4
88078: PUSH
88079: LD_INT 22
88081: PUSH
88082: LD_VAR 0 5
88086: PUSH
88087: EMPTY
88088: LIST
88089: LIST
88090: PUSH
88091: LD_INT 91
88093: PUSH
88094: LD_VAR 0 8
88098: PUSH
88099: LD_INT 8
88101: PUSH
88102: EMPTY
88103: LIST
88104: LIST
88105: LIST
88106: PUSH
88107: LD_INT 2
88109: PUSH
88110: LD_INT 34
88112: PUSH
88113: LD_INT 12
88115: PUSH
88116: EMPTY
88117: LIST
88118: LIST
88119: PUSH
88120: LD_INT 34
88122: PUSH
88123: LD_INT 51
88125: PUSH
88126: EMPTY
88127: LIST
88128: LIST
88129: PUSH
88130: LD_INT 34
88132: PUSH
88133: LD_INT 32
88135: PUSH
88136: EMPTY
88137: LIST
88138: LIST
88139: PUSH
88140: LD_INT 34
88142: PUSH
88143: LD_INT 89
88145: PUSH
88146: EMPTY
88147: LIST
88148: LIST
88149: PUSH
88150: EMPTY
88151: LIST
88152: LIST
88153: LIST
88154: LIST
88155: LIST
88156: PUSH
88157: EMPTY
88158: LIST
88159: LIST
88160: LIST
88161: PPUSH
88162: CALL_OW 69
88166: ST_TO_ADDR
// if tmp then
88167: LD_VAR 0 4
88171: IFFALSE 88297
// begin for j in tmp do
88173: LD_ADDR_VAR 0 2
88177: PUSH
88178: LD_VAR 0 4
88182: PUSH
88183: FOR_IN
88184: IFFALSE 88295
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
88186: LD_VAR 0 2
88190: PPUSH
88191: CALL_OW 262
88195: PUSH
88196: LD_INT 3
88198: EQUAL
88199: PUSH
88200: LD_VAR 0 2
88204: PPUSH
88205: CALL_OW 261
88209: PUSH
88210: LD_INT 20
88212: GREATER
88213: OR
88214: PUSH
88215: LD_VAR 0 2
88219: PPUSH
88220: CALL_OW 314
88224: NOT
88225: AND
88226: PUSH
88227: LD_VAR 0 2
88231: PPUSH
88232: CALL_OW 263
88236: PUSH
88237: LD_INT 1
88239: NONEQUAL
88240: PUSH
88241: LD_VAR 0 2
88245: PPUSH
88246: CALL_OW 311
88250: OR
88251: AND
88252: IFFALSE 88293
// begin ComCollect ( j , x , y ) ;
88254: LD_VAR 0 2
88258: PPUSH
88259: LD_VAR 0 6
88263: PPUSH
88264: LD_VAR 0 7
88268: PPUSH
88269: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
88273: LD_VAR 0 2
88277: PPUSH
88278: LD_VAR 0 8
88282: PPUSH
88283: CALL_OW 172
// exit ;
88287: POP
88288: POP
88289: POP
88290: POP
88291: GO 88301
// end ;
88293: GO 88183
88295: POP
88296: POP
// end ; end ;
88297: GO 87672
88299: POP
88300: POP
// end ; end_of_file
88301: PPOPN 9
88303: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88304: LD_VAR 0 1
88308: PUSH
88309: LD_INT 200
88311: DOUBLE
88312: GREATEREQUAL
88313: IFFALSE 88321
88315: LD_INT 299
88317: DOUBLE
88318: LESSEQUAL
88319: IFTRUE 88323
88321: GO 88355
88323: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88324: LD_VAR 0 1
88328: PPUSH
88329: LD_VAR 0 2
88333: PPUSH
88334: LD_VAR 0 3
88338: PPUSH
88339: LD_VAR 0 4
88343: PPUSH
88344: LD_VAR 0 5
88348: PPUSH
88349: CALL 89132 0 5
88353: GO 88432
88355: LD_INT 300
88357: DOUBLE
88358: GREATEREQUAL
88359: IFFALSE 88367
88361: LD_INT 399
88363: DOUBLE
88364: LESSEQUAL
88365: IFTRUE 88369
88367: GO 88431
88369: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
88370: LD_VAR 0 1
88374: PPUSH
88375: LD_VAR 0 2
88379: PPUSH
88380: LD_VAR 0 3
88384: PPUSH
88385: LD_VAR 0 4
88389: PPUSH
88390: LD_VAR 0 5
88394: PPUSH
88395: LD_VAR 0 6
88399: PPUSH
88400: LD_VAR 0 7
88404: PPUSH
88405: LD_VAR 0 8
88409: PPUSH
88410: LD_VAR 0 9
88414: PPUSH
88415: LD_VAR 0 10
88419: PPUSH
88420: LD_VAR 0 11
88424: PPUSH
88425: CALL 84877 0 11
88429: GO 88432
88431: POP
// end ;
88432: PPOPN 11
88434: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
88435: LD_VAR 0 1
88439: PPUSH
88440: LD_VAR 0 2
88444: PPUSH
88445: LD_VAR 0 3
88449: PPUSH
88450: LD_VAR 0 4
88454: PPUSH
88455: LD_VAR 0 5
88459: PPUSH
88460: CALL 88517 0 5
// end ; end_of_file
88464: PPOPN 5
88466: END
// export function SOS_UnitDestroyed ( un ) ; begin
88467: LD_INT 0
88469: PPUSH
// ComRadiation ( un ) ;
88470: LD_VAR 0 1
88474: PPUSH
88475: CALL 89536 0 1
// end ;
88479: LD_VAR 0 2
88483: RET
// export function SOS_UnitKamikazed ( un ) ; begin
88484: LD_INT 0
88486: PPUSH
// ComRadiation ( un ) ;
88487: LD_VAR 0 1
88491: PPUSH
88492: CALL 89536 0 1
// end ;
88496: LD_VAR 0 2
88500: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
88501: LD_INT 0
88503: PPUSH
// end ;
88504: LD_VAR 0 4
88508: RET
// export function SOS_Command ( cmd ) ; begin
88509: LD_INT 0
88511: PPUSH
// end ;
88512: LD_VAR 0 2
88516: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
88517: LD_INT 0
88519: PPUSH
// end ;
88520: LD_VAR 0 6
88524: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
88525: LD_INT 0
88527: PPUSH
88528: PPUSH
88529: PPUSH
88530: PPUSH
// if not vehicle or not factory then
88531: LD_VAR 0 1
88535: NOT
88536: PUSH
88537: LD_VAR 0 2
88541: NOT
88542: OR
88543: IFFALSE 88547
// exit ;
88545: GO 89127
// if not factoryWaypoints then
88547: LD_EXP 122
88551: NOT
88552: IFFALSE 88556
// exit ;
88554: GO 89127
// for i := 1 to Count ( factoryWaypoints ) do
88556: LD_ADDR_VAR 0 4
88560: PUSH
88561: DOUBLE
88562: LD_INT 1
88564: DEC
88565: ST_TO_ADDR
88566: LD_EXP 122
88570: PPUSH
88571: CALL 31658 0 1
88575: PUSH
88576: FOR_TO
88577: IFFALSE 89125
// if factoryWaypoints [ i ] [ 2 ] = factory then
88579: LD_EXP 122
88583: PUSH
88584: LD_VAR 0 4
88588: ARRAY
88589: PUSH
88590: LD_INT 2
88592: ARRAY
88593: PUSH
88594: LD_VAR 0 2
88598: EQUAL
88599: IFFALSE 89123
// begin if GetControl ( vehicle ) = control_manual then
88601: LD_VAR 0 1
88605: PPUSH
88606: CALL_OW 263
88610: PUSH
88611: LD_INT 1
88613: EQUAL
88614: IFFALSE 88976
// begin driver := IsDrivenBy ( vehicle ) ;
88616: LD_ADDR_VAR 0 5
88620: PUSH
88621: LD_VAR 0 1
88625: PPUSH
88626: CALL_OW 311
88630: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
88631: LD_VAR 0 5
88635: PUSH
88636: LD_EXP 123
88640: IN
88641: PUSH
88642: LD_VAR 0 1
88646: PUSH
88647: LD_EXP 123
88651: IN
88652: OR
88653: IFFALSE 88659
// exit ;
88655: POP
88656: POP
88657: GO 89127
// if not HasTask ( driver ) then
88659: LD_VAR 0 5
88663: PPUSH
88664: CALL_OW 314
88668: NOT
88669: IFFALSE 88974
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
88671: LD_ADDR_EXP 123
88675: PUSH
88676: LD_EXP 123
88680: PPUSH
88681: LD_VAR 0 5
88685: PPUSH
88686: CALL 67267 0 2
88690: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
88691: LD_ADDR_EXP 123
88695: PUSH
88696: LD_EXP 123
88700: PPUSH
88701: LD_VAR 0 1
88705: PPUSH
88706: CALL 67267 0 2
88710: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88711: LD_ADDR_VAR 0 6
88715: PUSH
88716: LD_EXP 122
88720: PUSH
88721: LD_VAR 0 4
88725: ARRAY
88726: PUSH
88727: LD_INT 3
88729: ARRAY
88730: PPUSH
88731: LD_EXP 122
88735: PUSH
88736: LD_VAR 0 4
88740: ARRAY
88741: PUSH
88742: LD_INT 4
88744: ARRAY
88745: PPUSH
88746: CALL_OW 428
88750: ST_TO_ADDR
// if hex then
88751: LD_VAR 0 6
88755: IFFALSE 88773
// ComMoveUnit ( driver , hex ) else
88757: LD_VAR 0 5
88761: PPUSH
88762: LD_VAR 0 6
88766: PPUSH
88767: CALL_OW 112
88771: GO 88857
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
88773: LD_VAR 0 1
88777: PPUSH
88778: LD_EXP 122
88782: PUSH
88783: LD_VAR 0 4
88787: ARRAY
88788: PUSH
88789: LD_INT 3
88791: ARRAY
88792: PPUSH
88793: LD_EXP 122
88797: PUSH
88798: LD_VAR 0 4
88802: ARRAY
88803: PUSH
88804: LD_INT 4
88806: ARRAY
88807: PPUSH
88808: CALL_OW 297
88812: PUSH
88813: LD_INT 0
88815: GREATER
88816: IFFALSE 88857
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88818: LD_VAR 0 5
88822: PPUSH
88823: LD_EXP 122
88827: PUSH
88828: LD_VAR 0 4
88832: ARRAY
88833: PUSH
88834: LD_INT 3
88836: ARRAY
88837: PPUSH
88838: LD_EXP 122
88842: PUSH
88843: LD_VAR 0 4
88847: ARRAY
88848: PUSH
88849: LD_INT 4
88851: ARRAY
88852: PPUSH
88853: CALL_OW 111
// AddComExitVehicle ( driver ) ;
88857: LD_VAR 0 5
88861: PPUSH
88862: CALL_OW 181
// if Multiplayer then
88866: LD_OWVAR 4
88870: IFFALSE 88919
// begin repeat wait ( 10 ) ;
88872: LD_INT 10
88874: PPUSH
88875: CALL_OW 67
// until not IsInUnit ( driver ) ;
88879: LD_VAR 0 5
88883: PPUSH
88884: CALL_OW 310
88888: NOT
88889: IFFALSE 88872
// if not HasTask ( driver ) then
88891: LD_VAR 0 5
88895: PPUSH
88896: CALL_OW 314
88900: NOT
88901: IFFALSE 88917
// ComEnterUnit ( driver , factory ) ;
88903: LD_VAR 0 5
88907: PPUSH
88908: LD_VAR 0 2
88912: PPUSH
88913: CALL_OW 120
// end else
88917: GO 88933
// AddComEnterUnit ( driver , factory ) ;
88919: LD_VAR 0 5
88923: PPUSH
88924: LD_VAR 0 2
88928: PPUSH
88929: CALL_OW 180
// wait ( 0 0$1 ) ;
88933: LD_INT 35
88935: PPUSH
88936: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
88940: LD_ADDR_EXP 123
88944: PUSH
88945: LD_EXP 123
88949: PUSH
88950: LD_VAR 0 5
88954: DIFF
88955: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
88956: LD_ADDR_EXP 123
88960: PUSH
88961: LD_EXP 123
88965: PUSH
88966: LD_VAR 0 1
88970: DIFF
88971: ST_TO_ADDR
// break ;
88972: GO 89125
// end ; end else
88974: GO 89123
// if GetControl ( vehicle ) = control_remote then
88976: LD_VAR 0 1
88980: PPUSH
88981: CALL_OW 263
88985: PUSH
88986: LD_INT 2
88988: EQUAL
88989: IFFALSE 89075
// begin wait ( 0 0$2 ) ;
88991: LD_INT 70
88993: PPUSH
88994: CALL_OW 67
// repeat wait ( 10 ) ;
88998: LD_INT 10
89000: PPUSH
89001: CALL_OW 67
// Connect ( vehicle ) ;
89005: LD_VAR 0 1
89009: PPUSH
89010: CALL 37864 0 1
// until IsControledBy ( vehicle ) ;
89014: LD_VAR 0 1
89018: PPUSH
89019: CALL_OW 312
89023: IFFALSE 88998
// wait ( 10 ) ;
89025: LD_INT 10
89027: PPUSH
89028: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
89032: LD_VAR 0 1
89036: PPUSH
89037: LD_EXP 122
89041: PUSH
89042: LD_VAR 0 4
89046: ARRAY
89047: PUSH
89048: LD_INT 3
89050: ARRAY
89051: PPUSH
89052: LD_EXP 122
89056: PUSH
89057: LD_VAR 0 4
89061: ARRAY
89062: PUSH
89063: LD_INT 4
89065: ARRAY
89066: PPUSH
89067: CALL_OW 111
// break ;
89071: GO 89125
// end else
89073: GO 89123
// begin wait ( 0 0$3 ) ;
89075: LD_INT 105
89077: PPUSH
89078: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
89082: LD_VAR 0 1
89086: PPUSH
89087: LD_EXP 122
89091: PUSH
89092: LD_VAR 0 4
89096: ARRAY
89097: PUSH
89098: LD_INT 3
89100: ARRAY
89101: PPUSH
89102: LD_EXP 122
89106: PUSH
89107: LD_VAR 0 4
89111: ARRAY
89112: PUSH
89113: LD_INT 4
89115: ARRAY
89116: PPUSH
89117: CALL_OW 111
// break ;
89121: GO 89125
// end ; end ;
89123: GO 88576
89125: POP
89126: POP
// end ;
89127: LD_VAR 0 3
89131: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
89132: LD_INT 0
89134: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
89135: LD_VAR 0 1
89139: PUSH
89140: LD_INT 250
89142: EQUAL
89143: PUSH
89144: LD_VAR 0 2
89148: PPUSH
89149: CALL_OW 264
89153: PUSH
89154: LD_INT 81
89156: EQUAL
89157: AND
89158: IFFALSE 89179
// MinerPlaceMine ( unit , x , y ) ;
89160: LD_VAR 0 2
89164: PPUSH
89165: LD_VAR 0 4
89169: PPUSH
89170: LD_VAR 0 5
89174: PPUSH
89175: CALL 92271 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
89179: LD_VAR 0 1
89183: PUSH
89184: LD_INT 251
89186: EQUAL
89187: PUSH
89188: LD_VAR 0 2
89192: PPUSH
89193: CALL_OW 264
89197: PUSH
89198: LD_INT 81
89200: EQUAL
89201: AND
89202: IFFALSE 89223
// MinerDetonateMine ( unit , x , y ) ;
89204: LD_VAR 0 2
89208: PPUSH
89209: LD_VAR 0 4
89213: PPUSH
89214: LD_VAR 0 5
89218: PPUSH
89219: CALL 92546 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
89223: LD_VAR 0 1
89227: PUSH
89228: LD_INT 252
89230: EQUAL
89231: PUSH
89232: LD_VAR 0 2
89236: PPUSH
89237: CALL_OW 264
89241: PUSH
89242: LD_INT 81
89244: EQUAL
89245: AND
89246: IFFALSE 89267
// MinerCreateMinefield ( unit , x , y ) ;
89248: LD_VAR 0 2
89252: PPUSH
89253: LD_VAR 0 4
89257: PPUSH
89258: LD_VAR 0 5
89262: PPUSH
89263: CALL 92963 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
89267: LD_VAR 0 1
89271: PUSH
89272: LD_INT 253
89274: EQUAL
89275: PUSH
89276: LD_VAR 0 2
89280: PPUSH
89281: CALL_OW 257
89285: PUSH
89286: LD_INT 5
89288: EQUAL
89289: AND
89290: IFFALSE 89311
// ComBinocular ( unit , x , y ) ;
89292: LD_VAR 0 2
89296: PPUSH
89297: LD_VAR 0 4
89301: PPUSH
89302: LD_VAR 0 5
89306: PPUSH
89307: CALL 93332 0 3
// if selectedUnit then
89311: LD_VAR 0 3
89315: IFFALSE 89371
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
89317: LD_VAR 0 1
89321: PUSH
89322: LD_INT 254
89324: EQUAL
89325: PUSH
89326: LD_VAR 0 2
89330: PPUSH
89331: CALL_OW 264
89335: PUSH
89336: LD_INT 99
89338: EQUAL
89339: AND
89340: PUSH
89341: LD_VAR 0 3
89345: PPUSH
89346: CALL_OW 263
89350: PUSH
89351: LD_INT 3
89353: EQUAL
89354: AND
89355: IFFALSE 89371
// HackDestroyVehicle ( unit , selectedUnit ) ;
89357: LD_VAR 0 2
89361: PPUSH
89362: LD_VAR 0 3
89366: PPUSH
89367: CALL 91635 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
89371: LD_VAR 0 1
89375: PUSH
89376: LD_INT 255
89378: EQUAL
89379: PUSH
89380: LD_VAR 0 2
89384: PPUSH
89385: CALL_OW 264
89389: PUSH
89390: LD_INT 14
89392: PUSH
89393: LD_INT 53
89395: PUSH
89396: EMPTY
89397: LIST
89398: LIST
89399: IN
89400: AND
89401: PUSH
89402: LD_VAR 0 4
89406: PPUSH
89407: LD_VAR 0 5
89411: PPUSH
89412: CALL_OW 488
89416: AND
89417: IFFALSE 89441
// CutTreeXYR ( unit , x , y , 12 ) ;
89419: LD_VAR 0 2
89423: PPUSH
89424: LD_VAR 0 4
89428: PPUSH
89429: LD_VAR 0 5
89433: PPUSH
89434: LD_INT 12
89436: PPUSH
89437: CALL 89632 0 4
// if cmd = 256 then
89441: LD_VAR 0 1
89445: PUSH
89446: LD_INT 256
89448: EQUAL
89449: IFFALSE 89470
// SetFactoryWaypoint ( unit , x , y ) ;
89451: LD_VAR 0 2
89455: PPUSH
89456: LD_VAR 0 4
89460: PPUSH
89461: LD_VAR 0 5
89465: PPUSH
89466: CALL 86865 0 3
// if cmd = 257 then
89470: LD_VAR 0 1
89474: PUSH
89475: LD_INT 257
89477: EQUAL
89478: IFFALSE 89499
// SetWarehouseGatheringPoint ( unit , x , y ) ;
89480: LD_VAR 0 2
89484: PPUSH
89485: LD_VAR 0 4
89489: PPUSH
89490: LD_VAR 0 5
89494: PPUSH
89495: CALL 87355 0 3
// if cmd = 258 then
89499: LD_VAR 0 1
89503: PUSH
89504: LD_INT 258
89506: EQUAL
89507: IFFALSE 89531
// BurnTreeXYR ( unit , x , y , 8 ) ;
89509: LD_VAR 0 2
89513: PPUSH
89514: LD_VAR 0 4
89518: PPUSH
89519: LD_VAR 0 5
89523: PPUSH
89524: LD_INT 8
89526: PPUSH
89527: CALL 90026 0 4
// end ;
89531: LD_VAR 0 6
89535: RET
// export function ComRadiation ( un ) ; var eff ; begin
89536: LD_INT 0
89538: PPUSH
89539: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
89540: LD_VAR 0 1
89544: PPUSH
89545: CALL_OW 264
89549: PUSH
89550: LD_INT 91
89552: NONEQUAL
89553: IFFALSE 89557
// exit ;
89555: GO 89627
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
89557: LD_INT 68
89559: PPUSH
89560: LD_VAR 0 1
89564: PPUSH
89565: CALL_OW 255
89569: PPUSH
89570: CALL_OW 321
89574: PUSH
89575: LD_INT 2
89577: EQUAL
89578: IFFALSE 89590
// eff := 50 else
89580: LD_ADDR_VAR 0 3
89584: PUSH
89585: LD_INT 50
89587: ST_TO_ADDR
89588: GO 89598
// eff := 25 ;
89590: LD_ADDR_VAR 0 3
89594: PUSH
89595: LD_INT 25
89597: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
89598: LD_VAR 0 1
89602: PPUSH
89603: CALL_OW 250
89607: PPUSH
89608: LD_VAR 0 1
89612: PPUSH
89613: CALL_OW 251
89617: PPUSH
89618: LD_VAR 0 3
89622: PPUSH
89623: CALL_OW 495
// end ;
89627: LD_VAR 0 2
89631: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
89632: LD_INT 0
89634: PPUSH
89635: PPUSH
89636: PPUSH
89637: PPUSH
89638: PPUSH
89639: PPUSH
89640: PPUSH
89641: PPUSH
89642: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
89643: LD_VAR 0 1
89647: PPUSH
89648: CALL_OW 302
89652: NOT
89653: PUSH
89654: LD_VAR 0 2
89658: PPUSH
89659: LD_VAR 0 3
89663: PPUSH
89664: CALL_OW 488
89668: NOT
89669: OR
89670: PUSH
89671: LD_VAR 0 4
89675: NOT
89676: OR
89677: IFFALSE 89681
// exit ;
89679: GO 90021
// list := [ ] ;
89681: LD_ADDR_VAR 0 13
89685: PUSH
89686: EMPTY
89687: ST_TO_ADDR
// if x - r < 0 then
89688: LD_VAR 0 2
89692: PUSH
89693: LD_VAR 0 4
89697: MINUS
89698: PUSH
89699: LD_INT 0
89701: LESS
89702: IFFALSE 89714
// min_x := 0 else
89704: LD_ADDR_VAR 0 7
89708: PUSH
89709: LD_INT 0
89711: ST_TO_ADDR
89712: GO 89730
// min_x := x - r ;
89714: LD_ADDR_VAR 0 7
89718: PUSH
89719: LD_VAR 0 2
89723: PUSH
89724: LD_VAR 0 4
89728: MINUS
89729: ST_TO_ADDR
// if y - r < 0 then
89730: LD_VAR 0 3
89734: PUSH
89735: LD_VAR 0 4
89739: MINUS
89740: PUSH
89741: LD_INT 0
89743: LESS
89744: IFFALSE 89756
// min_y := 0 else
89746: LD_ADDR_VAR 0 8
89750: PUSH
89751: LD_INT 0
89753: ST_TO_ADDR
89754: GO 89772
// min_y := y - r ;
89756: LD_ADDR_VAR 0 8
89760: PUSH
89761: LD_VAR 0 3
89765: PUSH
89766: LD_VAR 0 4
89770: MINUS
89771: ST_TO_ADDR
// max_x := x + r ;
89772: LD_ADDR_VAR 0 9
89776: PUSH
89777: LD_VAR 0 2
89781: PUSH
89782: LD_VAR 0 4
89786: PLUS
89787: ST_TO_ADDR
// max_y := y + r ;
89788: LD_ADDR_VAR 0 10
89792: PUSH
89793: LD_VAR 0 3
89797: PUSH
89798: LD_VAR 0 4
89802: PLUS
89803: ST_TO_ADDR
// for _x = min_x to max_x do
89804: LD_ADDR_VAR 0 11
89808: PUSH
89809: DOUBLE
89810: LD_VAR 0 7
89814: DEC
89815: ST_TO_ADDR
89816: LD_VAR 0 9
89820: PUSH
89821: FOR_TO
89822: IFFALSE 89939
// for _y = min_y to max_y do
89824: LD_ADDR_VAR 0 12
89828: PUSH
89829: DOUBLE
89830: LD_VAR 0 8
89834: DEC
89835: ST_TO_ADDR
89836: LD_VAR 0 10
89840: PUSH
89841: FOR_TO
89842: IFFALSE 89935
// begin if not ValidHex ( _x , _y ) then
89844: LD_VAR 0 11
89848: PPUSH
89849: LD_VAR 0 12
89853: PPUSH
89854: CALL_OW 488
89858: NOT
89859: IFFALSE 89863
// continue ;
89861: GO 89841
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89863: LD_VAR 0 11
89867: PPUSH
89868: LD_VAR 0 12
89872: PPUSH
89873: CALL_OW 351
89877: PUSH
89878: LD_VAR 0 11
89882: PPUSH
89883: LD_VAR 0 12
89887: PPUSH
89888: CALL_OW 554
89892: AND
89893: IFFALSE 89933
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89895: LD_ADDR_VAR 0 13
89899: PUSH
89900: LD_VAR 0 13
89904: PPUSH
89905: LD_VAR 0 13
89909: PUSH
89910: LD_INT 1
89912: PLUS
89913: PPUSH
89914: LD_VAR 0 11
89918: PUSH
89919: LD_VAR 0 12
89923: PUSH
89924: EMPTY
89925: LIST
89926: LIST
89927: PPUSH
89928: CALL_OW 2
89932: ST_TO_ADDR
// end ;
89933: GO 89841
89935: POP
89936: POP
89937: GO 89821
89939: POP
89940: POP
// if not list then
89941: LD_VAR 0 13
89945: NOT
89946: IFFALSE 89950
// exit ;
89948: GO 90021
// for i in list do
89950: LD_ADDR_VAR 0 6
89954: PUSH
89955: LD_VAR 0 13
89959: PUSH
89960: FOR_IN
89961: IFFALSE 90019
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89963: LD_VAR 0 1
89967: PPUSH
89968: LD_STRING M
89970: PUSH
89971: LD_VAR 0 6
89975: PUSH
89976: LD_INT 1
89978: ARRAY
89979: PUSH
89980: LD_VAR 0 6
89984: PUSH
89985: LD_INT 2
89987: ARRAY
89988: PUSH
89989: LD_INT 0
89991: PUSH
89992: LD_INT 0
89994: PUSH
89995: LD_INT 0
89997: PUSH
89998: LD_INT 0
90000: PUSH
90001: EMPTY
90002: LIST
90003: LIST
90004: LIST
90005: LIST
90006: LIST
90007: LIST
90008: LIST
90009: PUSH
90010: EMPTY
90011: LIST
90012: PPUSH
90013: CALL_OW 447
90017: GO 89960
90019: POP
90020: POP
// end ;
90021: LD_VAR 0 5
90025: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
90026: LD_INT 0
90028: PPUSH
90029: PPUSH
90030: PPUSH
90031: PPUSH
90032: PPUSH
90033: PPUSH
90034: PPUSH
90035: PPUSH
90036: PPUSH
90037: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
90038: LD_VAR 0 1
90042: PPUSH
90043: CALL_OW 302
90047: NOT
90048: PUSH
90049: LD_VAR 0 2
90053: PPUSH
90054: LD_VAR 0 3
90058: PPUSH
90059: CALL_OW 488
90063: NOT
90064: OR
90065: PUSH
90066: LD_VAR 0 4
90070: NOT
90071: OR
90072: IFFALSE 90076
// exit ;
90074: GO 90589
// list := [ ] ;
90076: LD_ADDR_VAR 0 13
90080: PUSH
90081: EMPTY
90082: ST_TO_ADDR
// if x - r < 0 then
90083: LD_VAR 0 2
90087: PUSH
90088: LD_VAR 0 4
90092: MINUS
90093: PUSH
90094: LD_INT 0
90096: LESS
90097: IFFALSE 90109
// min_x := 0 else
90099: LD_ADDR_VAR 0 7
90103: PUSH
90104: LD_INT 0
90106: ST_TO_ADDR
90107: GO 90125
// min_x := x - r ;
90109: LD_ADDR_VAR 0 7
90113: PUSH
90114: LD_VAR 0 2
90118: PUSH
90119: LD_VAR 0 4
90123: MINUS
90124: ST_TO_ADDR
// if y - r < 0 then
90125: LD_VAR 0 3
90129: PUSH
90130: LD_VAR 0 4
90134: MINUS
90135: PUSH
90136: LD_INT 0
90138: LESS
90139: IFFALSE 90151
// min_y := 0 else
90141: LD_ADDR_VAR 0 8
90145: PUSH
90146: LD_INT 0
90148: ST_TO_ADDR
90149: GO 90167
// min_y := y - r ;
90151: LD_ADDR_VAR 0 8
90155: PUSH
90156: LD_VAR 0 3
90160: PUSH
90161: LD_VAR 0 4
90165: MINUS
90166: ST_TO_ADDR
// max_x := x + r ;
90167: LD_ADDR_VAR 0 9
90171: PUSH
90172: LD_VAR 0 2
90176: PUSH
90177: LD_VAR 0 4
90181: PLUS
90182: ST_TO_ADDR
// max_y := y + r ;
90183: LD_ADDR_VAR 0 10
90187: PUSH
90188: LD_VAR 0 3
90192: PUSH
90193: LD_VAR 0 4
90197: PLUS
90198: ST_TO_ADDR
// for _x = min_x to max_x do
90199: LD_ADDR_VAR 0 11
90203: PUSH
90204: DOUBLE
90205: LD_VAR 0 7
90209: DEC
90210: ST_TO_ADDR
90211: LD_VAR 0 9
90215: PUSH
90216: FOR_TO
90217: IFFALSE 90334
// for _y = min_y to max_y do
90219: LD_ADDR_VAR 0 12
90223: PUSH
90224: DOUBLE
90225: LD_VAR 0 8
90229: DEC
90230: ST_TO_ADDR
90231: LD_VAR 0 10
90235: PUSH
90236: FOR_TO
90237: IFFALSE 90330
// begin if not ValidHex ( _x , _y ) then
90239: LD_VAR 0 11
90243: PPUSH
90244: LD_VAR 0 12
90248: PPUSH
90249: CALL_OW 488
90253: NOT
90254: IFFALSE 90258
// continue ;
90256: GO 90236
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90258: LD_VAR 0 11
90262: PPUSH
90263: LD_VAR 0 12
90267: PPUSH
90268: CALL_OW 351
90272: PUSH
90273: LD_VAR 0 11
90277: PPUSH
90278: LD_VAR 0 12
90282: PPUSH
90283: CALL_OW 554
90287: AND
90288: IFFALSE 90328
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90290: LD_ADDR_VAR 0 13
90294: PUSH
90295: LD_VAR 0 13
90299: PPUSH
90300: LD_VAR 0 13
90304: PUSH
90305: LD_INT 1
90307: PLUS
90308: PPUSH
90309: LD_VAR 0 11
90313: PUSH
90314: LD_VAR 0 12
90318: PUSH
90319: EMPTY
90320: LIST
90321: LIST
90322: PPUSH
90323: CALL_OW 2
90327: ST_TO_ADDR
// end ;
90328: GO 90236
90330: POP
90331: POP
90332: GO 90216
90334: POP
90335: POP
// if not list then
90336: LD_VAR 0 13
90340: NOT
90341: IFFALSE 90345
// exit ;
90343: GO 90589
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
90345: LD_ADDR_VAR 0 13
90349: PUSH
90350: LD_VAR 0 1
90354: PPUSH
90355: LD_VAR 0 13
90359: PPUSH
90360: LD_INT 1
90362: PPUSH
90363: LD_INT 1
90365: PPUSH
90366: CALL 35006 0 4
90370: ST_TO_ADDR
// ComStop ( flame ) ;
90371: LD_VAR 0 1
90375: PPUSH
90376: CALL_OW 141
// for i in list do
90380: LD_ADDR_VAR 0 6
90384: PUSH
90385: LD_VAR 0 13
90389: PUSH
90390: FOR_IN
90391: IFFALSE 90422
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
90393: LD_VAR 0 1
90397: PPUSH
90398: LD_VAR 0 6
90402: PUSH
90403: LD_INT 1
90405: ARRAY
90406: PPUSH
90407: LD_VAR 0 6
90411: PUSH
90412: LD_INT 2
90414: ARRAY
90415: PPUSH
90416: CALL_OW 176
90420: GO 90390
90422: POP
90423: POP
// repeat wait ( 0 0$1 ) ;
90424: LD_INT 35
90426: PPUSH
90427: CALL_OW 67
// task := GetTaskList ( flame ) ;
90431: LD_ADDR_VAR 0 14
90435: PUSH
90436: LD_VAR 0 1
90440: PPUSH
90441: CALL_OW 437
90445: ST_TO_ADDR
// if not task then
90446: LD_VAR 0 14
90450: NOT
90451: IFFALSE 90455
// exit ;
90453: GO 90589
// if task [ 1 ] [ 1 ] <> | then
90455: LD_VAR 0 14
90459: PUSH
90460: LD_INT 1
90462: ARRAY
90463: PUSH
90464: LD_INT 1
90466: ARRAY
90467: PUSH
90468: LD_STRING |
90470: NONEQUAL
90471: IFFALSE 90475
// exit ;
90473: GO 90589
// _x := task [ 1 ] [ 2 ] ;
90475: LD_ADDR_VAR 0 11
90479: PUSH
90480: LD_VAR 0 14
90484: PUSH
90485: LD_INT 1
90487: ARRAY
90488: PUSH
90489: LD_INT 2
90491: ARRAY
90492: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
90493: LD_ADDR_VAR 0 12
90497: PUSH
90498: LD_VAR 0 14
90502: PUSH
90503: LD_INT 1
90505: ARRAY
90506: PUSH
90507: LD_INT 3
90509: ARRAY
90510: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
90511: LD_VAR 0 11
90515: PPUSH
90516: LD_VAR 0 12
90520: PPUSH
90521: CALL_OW 351
90525: NOT
90526: PUSH
90527: LD_VAR 0 11
90531: PPUSH
90532: LD_VAR 0 12
90536: PPUSH
90537: CALL_OW 554
90541: NOT
90542: OR
90543: IFFALSE 90577
// begin task := Delete ( task , 1 ) ;
90545: LD_ADDR_VAR 0 14
90549: PUSH
90550: LD_VAR 0 14
90554: PPUSH
90555: LD_INT 1
90557: PPUSH
90558: CALL_OW 3
90562: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
90563: LD_VAR 0 1
90567: PPUSH
90568: LD_VAR 0 14
90572: PPUSH
90573: CALL_OW 446
// end ; until not HasTask ( flame ) ;
90577: LD_VAR 0 1
90581: PPUSH
90582: CALL_OW 314
90586: NOT
90587: IFFALSE 90424
// end ;
90589: LD_VAR 0 5
90593: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
90594: LD_EXP 126
90598: NOT
90599: IFFALSE 90649
90601: GO 90603
90603: DISABLE
// begin initHack := true ;
90604: LD_ADDR_EXP 126
90608: PUSH
90609: LD_INT 1
90611: ST_TO_ADDR
// hackTanks := [ ] ;
90612: LD_ADDR_EXP 127
90616: PUSH
90617: EMPTY
90618: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
90619: LD_ADDR_EXP 128
90623: PUSH
90624: EMPTY
90625: ST_TO_ADDR
// hackLimit := 3 ;
90626: LD_ADDR_EXP 129
90630: PUSH
90631: LD_INT 3
90633: ST_TO_ADDR
// hackDist := 12 ;
90634: LD_ADDR_EXP 130
90638: PUSH
90639: LD_INT 12
90641: ST_TO_ADDR
// hackCounter := [ ] ;
90642: LD_ADDR_EXP 131
90646: PUSH
90647: EMPTY
90648: ST_TO_ADDR
// end ;
90649: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
90650: LD_EXP 126
90654: PUSH
90655: LD_INT 34
90657: PUSH
90658: LD_INT 99
90660: PUSH
90661: EMPTY
90662: LIST
90663: LIST
90664: PPUSH
90665: CALL_OW 69
90669: AND
90670: IFFALSE 90923
90672: GO 90674
90674: DISABLE
90675: LD_INT 0
90677: PPUSH
90678: PPUSH
// begin enable ;
90679: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
90680: LD_ADDR_VAR 0 1
90684: PUSH
90685: LD_INT 34
90687: PUSH
90688: LD_INT 99
90690: PUSH
90691: EMPTY
90692: LIST
90693: LIST
90694: PPUSH
90695: CALL_OW 69
90699: PUSH
90700: FOR_IN
90701: IFFALSE 90921
// begin if not i in hackTanks then
90703: LD_VAR 0 1
90707: PUSH
90708: LD_EXP 127
90712: IN
90713: NOT
90714: IFFALSE 90797
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
90716: LD_ADDR_EXP 127
90720: PUSH
90721: LD_EXP 127
90725: PPUSH
90726: LD_EXP 127
90730: PUSH
90731: LD_INT 1
90733: PLUS
90734: PPUSH
90735: LD_VAR 0 1
90739: PPUSH
90740: CALL_OW 1
90744: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
90745: LD_ADDR_EXP 128
90749: PUSH
90750: LD_EXP 128
90754: PPUSH
90755: LD_EXP 128
90759: PUSH
90760: LD_INT 1
90762: PLUS
90763: PPUSH
90764: EMPTY
90765: PPUSH
90766: CALL_OW 1
90770: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
90771: LD_ADDR_EXP 131
90775: PUSH
90776: LD_EXP 131
90780: PPUSH
90781: LD_EXP 131
90785: PUSH
90786: LD_INT 1
90788: PLUS
90789: PPUSH
90790: EMPTY
90791: PPUSH
90792: CALL_OW 1
90796: ST_TO_ADDR
// end ; if not IsOk ( i ) then
90797: LD_VAR 0 1
90801: PPUSH
90802: CALL_OW 302
90806: NOT
90807: IFFALSE 90820
// begin HackUnlinkAll ( i ) ;
90809: LD_VAR 0 1
90813: PPUSH
90814: CALL 90926 0 1
// continue ;
90818: GO 90700
// end ; HackCheckCapturedStatus ( i ) ;
90820: LD_VAR 0 1
90824: PPUSH
90825: CALL 91369 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
90829: LD_ADDR_VAR 0 2
90833: PUSH
90834: LD_INT 81
90836: PUSH
90837: LD_VAR 0 1
90841: PPUSH
90842: CALL_OW 255
90846: PUSH
90847: EMPTY
90848: LIST
90849: LIST
90850: PUSH
90851: LD_INT 33
90853: PUSH
90854: LD_INT 3
90856: PUSH
90857: EMPTY
90858: LIST
90859: LIST
90860: PUSH
90861: LD_INT 91
90863: PUSH
90864: LD_VAR 0 1
90868: PUSH
90869: LD_EXP 130
90873: PUSH
90874: EMPTY
90875: LIST
90876: LIST
90877: LIST
90878: PUSH
90879: LD_INT 50
90881: PUSH
90882: EMPTY
90883: LIST
90884: PUSH
90885: EMPTY
90886: LIST
90887: LIST
90888: LIST
90889: LIST
90890: PPUSH
90891: CALL_OW 69
90895: ST_TO_ADDR
// if not tmp then
90896: LD_VAR 0 2
90900: NOT
90901: IFFALSE 90905
// continue ;
90903: GO 90700
// HackLink ( i , tmp ) ;
90905: LD_VAR 0 1
90909: PPUSH
90910: LD_VAR 0 2
90914: PPUSH
90915: CALL 91062 0 2
// end ;
90919: GO 90700
90921: POP
90922: POP
// end ;
90923: PPOPN 2
90925: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
90926: LD_INT 0
90928: PPUSH
90929: PPUSH
90930: PPUSH
// if not hack in hackTanks then
90931: LD_VAR 0 1
90935: PUSH
90936: LD_EXP 127
90940: IN
90941: NOT
90942: IFFALSE 90946
// exit ;
90944: GO 91057
// index := GetElementIndex ( hackTanks , hack ) ;
90946: LD_ADDR_VAR 0 4
90950: PUSH
90951: LD_EXP 127
90955: PPUSH
90956: LD_VAR 0 1
90960: PPUSH
90961: CALL 34303 0 2
90965: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
90966: LD_EXP 128
90970: PUSH
90971: LD_VAR 0 4
90975: ARRAY
90976: IFFALSE 91057
// begin for i in hackTanksCaptured [ index ] do
90978: LD_ADDR_VAR 0 3
90982: PUSH
90983: LD_EXP 128
90987: PUSH
90988: LD_VAR 0 4
90992: ARRAY
90993: PUSH
90994: FOR_IN
90995: IFFALSE 91021
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
90997: LD_VAR 0 3
91001: PUSH
91002: LD_INT 1
91004: ARRAY
91005: PPUSH
91006: LD_VAR 0 3
91010: PUSH
91011: LD_INT 2
91013: ARRAY
91014: PPUSH
91015: CALL_OW 235
91019: GO 90994
91021: POP
91022: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
91023: LD_ADDR_EXP 128
91027: PUSH
91028: LD_EXP 128
91032: PPUSH
91033: LD_VAR 0 4
91037: PPUSH
91038: EMPTY
91039: PPUSH
91040: CALL_OW 1
91044: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
91045: LD_VAR 0 1
91049: PPUSH
91050: LD_INT 0
91052: PPUSH
91053: CALL_OW 505
// end ; end ;
91057: LD_VAR 0 2
91061: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
91062: LD_INT 0
91064: PPUSH
91065: PPUSH
91066: PPUSH
// if not hack in hackTanks or not vehicles then
91067: LD_VAR 0 1
91071: PUSH
91072: LD_EXP 127
91076: IN
91077: NOT
91078: PUSH
91079: LD_VAR 0 2
91083: NOT
91084: OR
91085: IFFALSE 91089
// exit ;
91087: GO 91364
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
91089: LD_ADDR_VAR 0 2
91093: PUSH
91094: LD_VAR 0 1
91098: PPUSH
91099: LD_VAR 0 2
91103: PPUSH
91104: LD_INT 1
91106: PPUSH
91107: LD_INT 1
91109: PPUSH
91110: CALL 34953 0 4
91114: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
91115: LD_ADDR_VAR 0 5
91119: PUSH
91120: LD_EXP 127
91124: PPUSH
91125: LD_VAR 0 1
91129: PPUSH
91130: CALL 34303 0 2
91134: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
91135: LD_EXP 128
91139: PUSH
91140: LD_VAR 0 5
91144: ARRAY
91145: PUSH
91146: LD_EXP 129
91150: LESS
91151: IFFALSE 91340
// begin for i := 1 to vehicles do
91153: LD_ADDR_VAR 0 4
91157: PUSH
91158: DOUBLE
91159: LD_INT 1
91161: DEC
91162: ST_TO_ADDR
91163: LD_VAR 0 2
91167: PUSH
91168: FOR_TO
91169: IFFALSE 91338
// begin if hackTanksCaptured [ index ] = hackLimit then
91171: LD_EXP 128
91175: PUSH
91176: LD_VAR 0 5
91180: ARRAY
91181: PUSH
91182: LD_EXP 129
91186: EQUAL
91187: IFFALSE 91191
// break ;
91189: GO 91338
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
91191: LD_ADDR_EXP 131
91195: PUSH
91196: LD_EXP 131
91200: PPUSH
91201: LD_VAR 0 5
91205: PPUSH
91206: LD_EXP 131
91210: PUSH
91211: LD_VAR 0 5
91215: ARRAY
91216: PUSH
91217: LD_INT 1
91219: PLUS
91220: PPUSH
91221: CALL_OW 1
91225: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
91226: LD_ADDR_EXP 128
91230: PUSH
91231: LD_EXP 128
91235: PPUSH
91236: LD_VAR 0 5
91240: PUSH
91241: LD_EXP 128
91245: PUSH
91246: LD_VAR 0 5
91250: ARRAY
91251: PUSH
91252: LD_INT 1
91254: PLUS
91255: PUSH
91256: EMPTY
91257: LIST
91258: LIST
91259: PPUSH
91260: LD_VAR 0 2
91264: PUSH
91265: LD_VAR 0 4
91269: ARRAY
91270: PUSH
91271: LD_VAR 0 2
91275: PUSH
91276: LD_VAR 0 4
91280: ARRAY
91281: PPUSH
91282: CALL_OW 255
91286: PUSH
91287: EMPTY
91288: LIST
91289: LIST
91290: PPUSH
91291: CALL 34518 0 3
91295: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
91296: LD_VAR 0 2
91300: PUSH
91301: LD_VAR 0 4
91305: ARRAY
91306: PPUSH
91307: LD_VAR 0 1
91311: PPUSH
91312: CALL_OW 255
91316: PPUSH
91317: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
91321: LD_VAR 0 2
91325: PUSH
91326: LD_VAR 0 4
91330: ARRAY
91331: PPUSH
91332: CALL_OW 141
// end ;
91336: GO 91168
91338: POP
91339: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91340: LD_VAR 0 1
91344: PPUSH
91345: LD_EXP 128
91349: PUSH
91350: LD_VAR 0 5
91354: ARRAY
91355: PUSH
91356: LD_INT 0
91358: PLUS
91359: PPUSH
91360: CALL_OW 505
// end ;
91364: LD_VAR 0 3
91368: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
91369: LD_INT 0
91371: PPUSH
91372: PPUSH
91373: PPUSH
91374: PPUSH
// if not hack in hackTanks then
91375: LD_VAR 0 1
91379: PUSH
91380: LD_EXP 127
91384: IN
91385: NOT
91386: IFFALSE 91390
// exit ;
91388: GO 91630
// index := GetElementIndex ( hackTanks , hack ) ;
91390: LD_ADDR_VAR 0 4
91394: PUSH
91395: LD_EXP 127
91399: PPUSH
91400: LD_VAR 0 1
91404: PPUSH
91405: CALL 34303 0 2
91409: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
91410: LD_ADDR_VAR 0 3
91414: PUSH
91415: DOUBLE
91416: LD_EXP 128
91420: PUSH
91421: LD_VAR 0 4
91425: ARRAY
91426: INC
91427: ST_TO_ADDR
91428: LD_INT 1
91430: PUSH
91431: FOR_DOWNTO
91432: IFFALSE 91604
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
91434: LD_ADDR_VAR 0 5
91438: PUSH
91439: LD_EXP 128
91443: PUSH
91444: LD_VAR 0 4
91448: ARRAY
91449: PUSH
91450: LD_VAR 0 3
91454: ARRAY
91455: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
91456: LD_VAR 0 5
91460: PUSH
91461: LD_INT 1
91463: ARRAY
91464: PPUSH
91465: CALL_OW 302
91469: NOT
91470: PUSH
91471: LD_VAR 0 5
91475: PUSH
91476: LD_INT 1
91478: ARRAY
91479: PPUSH
91480: CALL_OW 255
91484: PUSH
91485: LD_VAR 0 1
91489: PPUSH
91490: CALL_OW 255
91494: NONEQUAL
91495: OR
91496: IFFALSE 91602
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
91498: LD_VAR 0 5
91502: PUSH
91503: LD_INT 1
91505: ARRAY
91506: PPUSH
91507: CALL_OW 305
91511: PUSH
91512: LD_VAR 0 5
91516: PUSH
91517: LD_INT 1
91519: ARRAY
91520: PPUSH
91521: CALL_OW 255
91525: PUSH
91526: LD_VAR 0 1
91530: PPUSH
91531: CALL_OW 255
91535: EQUAL
91536: AND
91537: IFFALSE 91561
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
91539: LD_VAR 0 5
91543: PUSH
91544: LD_INT 1
91546: ARRAY
91547: PPUSH
91548: LD_VAR 0 5
91552: PUSH
91553: LD_INT 2
91555: ARRAY
91556: PPUSH
91557: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
91561: LD_ADDR_EXP 128
91565: PUSH
91566: LD_EXP 128
91570: PPUSH
91571: LD_VAR 0 4
91575: PPUSH
91576: LD_EXP 128
91580: PUSH
91581: LD_VAR 0 4
91585: ARRAY
91586: PPUSH
91587: LD_VAR 0 3
91591: PPUSH
91592: CALL_OW 3
91596: PPUSH
91597: CALL_OW 1
91601: ST_TO_ADDR
// end ; end ;
91602: GO 91431
91604: POP
91605: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91606: LD_VAR 0 1
91610: PPUSH
91611: LD_EXP 128
91615: PUSH
91616: LD_VAR 0 4
91620: ARRAY
91621: PUSH
91622: LD_INT 0
91624: PLUS
91625: PPUSH
91626: CALL_OW 505
// end ;
91630: LD_VAR 0 2
91634: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
91635: LD_INT 0
91637: PPUSH
91638: PPUSH
91639: PPUSH
91640: PPUSH
// if not hack in hackTanks then
91641: LD_VAR 0 1
91645: PUSH
91646: LD_EXP 127
91650: IN
91651: NOT
91652: IFFALSE 91656
// exit ;
91654: GO 91741
// index := GetElementIndex ( hackTanks , hack ) ;
91656: LD_ADDR_VAR 0 5
91660: PUSH
91661: LD_EXP 127
91665: PPUSH
91666: LD_VAR 0 1
91670: PPUSH
91671: CALL 34303 0 2
91675: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
91676: LD_ADDR_VAR 0 4
91680: PUSH
91681: DOUBLE
91682: LD_INT 1
91684: DEC
91685: ST_TO_ADDR
91686: LD_EXP 128
91690: PUSH
91691: LD_VAR 0 5
91695: ARRAY
91696: PUSH
91697: FOR_TO
91698: IFFALSE 91739
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
91700: LD_EXP 128
91704: PUSH
91705: LD_VAR 0 5
91709: ARRAY
91710: PUSH
91711: LD_VAR 0 4
91715: ARRAY
91716: PUSH
91717: LD_INT 1
91719: ARRAY
91720: PUSH
91721: LD_VAR 0 2
91725: EQUAL
91726: IFFALSE 91737
// KillUnit ( vehicle ) ;
91728: LD_VAR 0 2
91732: PPUSH
91733: CALL_OW 66
91737: GO 91697
91739: POP
91740: POP
// end ;
91741: LD_VAR 0 3
91745: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
91746: LD_EXP 132
91750: NOT
91751: IFFALSE 91786
91753: GO 91755
91755: DISABLE
// begin initMiner := true ;
91756: LD_ADDR_EXP 132
91760: PUSH
91761: LD_INT 1
91763: ST_TO_ADDR
// minersList := [ ] ;
91764: LD_ADDR_EXP 133
91768: PUSH
91769: EMPTY
91770: ST_TO_ADDR
// minerMinesList := [ ] ;
91771: LD_ADDR_EXP 134
91775: PUSH
91776: EMPTY
91777: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
91778: LD_ADDR_EXP 135
91782: PUSH
91783: LD_INT 5
91785: ST_TO_ADDR
// end ;
91786: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
91787: LD_EXP 132
91791: PUSH
91792: LD_INT 34
91794: PUSH
91795: LD_INT 81
91797: PUSH
91798: EMPTY
91799: LIST
91800: LIST
91801: PPUSH
91802: CALL_OW 69
91806: AND
91807: IFFALSE 92268
91809: GO 91811
91811: DISABLE
91812: LD_INT 0
91814: PPUSH
91815: PPUSH
91816: PPUSH
91817: PPUSH
// begin enable ;
91818: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
91819: LD_ADDR_VAR 0 1
91823: PUSH
91824: LD_INT 34
91826: PUSH
91827: LD_INT 81
91829: PUSH
91830: EMPTY
91831: LIST
91832: LIST
91833: PPUSH
91834: CALL_OW 69
91838: PUSH
91839: FOR_IN
91840: IFFALSE 91912
// begin if not i in minersList then
91842: LD_VAR 0 1
91846: PUSH
91847: LD_EXP 133
91851: IN
91852: NOT
91853: IFFALSE 91910
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
91855: LD_ADDR_EXP 133
91859: PUSH
91860: LD_EXP 133
91864: PPUSH
91865: LD_EXP 133
91869: PUSH
91870: LD_INT 1
91872: PLUS
91873: PPUSH
91874: LD_VAR 0 1
91878: PPUSH
91879: CALL_OW 1
91883: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
91884: LD_ADDR_EXP 134
91888: PUSH
91889: LD_EXP 134
91893: PPUSH
91894: LD_EXP 134
91898: PUSH
91899: LD_INT 1
91901: PLUS
91902: PPUSH
91903: EMPTY
91904: PPUSH
91905: CALL_OW 1
91909: ST_TO_ADDR
// end end ;
91910: GO 91839
91912: POP
91913: POP
// for i := minerMinesList downto 1 do
91914: LD_ADDR_VAR 0 1
91918: PUSH
91919: DOUBLE
91920: LD_EXP 134
91924: INC
91925: ST_TO_ADDR
91926: LD_INT 1
91928: PUSH
91929: FOR_DOWNTO
91930: IFFALSE 92266
// begin if IsLive ( minersList [ i ] ) then
91932: LD_EXP 133
91936: PUSH
91937: LD_VAR 0 1
91941: ARRAY
91942: PPUSH
91943: CALL_OW 300
91947: IFFALSE 91975
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
91949: LD_EXP 133
91953: PUSH
91954: LD_VAR 0 1
91958: ARRAY
91959: PPUSH
91960: LD_EXP 134
91964: PUSH
91965: LD_VAR 0 1
91969: ARRAY
91970: PPUSH
91971: CALL_OW 505
// if not minerMinesList [ i ] then
91975: LD_EXP 134
91979: PUSH
91980: LD_VAR 0 1
91984: ARRAY
91985: NOT
91986: IFFALSE 91990
// continue ;
91988: GO 91929
// for j := minerMinesList [ i ] downto 1 do
91990: LD_ADDR_VAR 0 2
91994: PUSH
91995: DOUBLE
91996: LD_EXP 134
92000: PUSH
92001: LD_VAR 0 1
92005: ARRAY
92006: INC
92007: ST_TO_ADDR
92008: LD_INT 1
92010: PUSH
92011: FOR_DOWNTO
92012: IFFALSE 92262
// begin side := GetSide ( minersList [ i ] ) ;
92014: LD_ADDR_VAR 0 3
92018: PUSH
92019: LD_EXP 133
92023: PUSH
92024: LD_VAR 0 1
92028: ARRAY
92029: PPUSH
92030: CALL_OW 255
92034: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
92035: LD_ADDR_VAR 0 4
92039: PUSH
92040: LD_EXP 134
92044: PUSH
92045: LD_VAR 0 1
92049: ARRAY
92050: PUSH
92051: LD_VAR 0 2
92055: ARRAY
92056: PUSH
92057: LD_INT 1
92059: ARRAY
92060: PPUSH
92061: LD_EXP 134
92065: PUSH
92066: LD_VAR 0 1
92070: ARRAY
92071: PUSH
92072: LD_VAR 0 2
92076: ARRAY
92077: PUSH
92078: LD_INT 2
92080: ARRAY
92081: PPUSH
92082: CALL_OW 428
92086: ST_TO_ADDR
// if not tmp then
92087: LD_VAR 0 4
92091: NOT
92092: IFFALSE 92096
// continue ;
92094: GO 92011
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
92096: LD_VAR 0 4
92100: PUSH
92101: LD_INT 81
92103: PUSH
92104: LD_VAR 0 3
92108: PUSH
92109: EMPTY
92110: LIST
92111: LIST
92112: PPUSH
92113: CALL_OW 69
92117: IN
92118: PUSH
92119: LD_EXP 134
92123: PUSH
92124: LD_VAR 0 1
92128: ARRAY
92129: PUSH
92130: LD_VAR 0 2
92134: ARRAY
92135: PUSH
92136: LD_INT 1
92138: ARRAY
92139: PPUSH
92140: LD_EXP 134
92144: PUSH
92145: LD_VAR 0 1
92149: ARRAY
92150: PUSH
92151: LD_VAR 0 2
92155: ARRAY
92156: PUSH
92157: LD_INT 2
92159: ARRAY
92160: PPUSH
92161: CALL_OW 458
92165: AND
92166: IFFALSE 92260
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
92168: LD_EXP 134
92172: PUSH
92173: LD_VAR 0 1
92177: ARRAY
92178: PUSH
92179: LD_VAR 0 2
92183: ARRAY
92184: PUSH
92185: LD_INT 1
92187: ARRAY
92188: PPUSH
92189: LD_EXP 134
92193: PUSH
92194: LD_VAR 0 1
92198: ARRAY
92199: PUSH
92200: LD_VAR 0 2
92204: ARRAY
92205: PUSH
92206: LD_INT 2
92208: ARRAY
92209: PPUSH
92210: LD_VAR 0 3
92214: PPUSH
92215: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
92219: LD_ADDR_EXP 134
92223: PUSH
92224: LD_EXP 134
92228: PPUSH
92229: LD_VAR 0 1
92233: PPUSH
92234: LD_EXP 134
92238: PUSH
92239: LD_VAR 0 1
92243: ARRAY
92244: PPUSH
92245: LD_VAR 0 2
92249: PPUSH
92250: CALL_OW 3
92254: PPUSH
92255: CALL_OW 1
92259: ST_TO_ADDR
// end ; end ;
92260: GO 92011
92262: POP
92263: POP
// end ;
92264: GO 91929
92266: POP
92267: POP
// end ;
92268: PPOPN 4
92270: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
92271: LD_INT 0
92273: PPUSH
92274: PPUSH
// result := false ;
92275: LD_ADDR_VAR 0 4
92279: PUSH
92280: LD_INT 0
92282: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
92283: LD_VAR 0 1
92287: PPUSH
92288: CALL_OW 264
92292: PUSH
92293: LD_INT 81
92295: EQUAL
92296: NOT
92297: IFFALSE 92301
// exit ;
92299: GO 92541
// index := GetElementIndex ( minersList , unit ) ;
92301: LD_ADDR_VAR 0 5
92305: PUSH
92306: LD_EXP 133
92310: PPUSH
92311: LD_VAR 0 1
92315: PPUSH
92316: CALL 34303 0 2
92320: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
92321: LD_EXP 134
92325: PUSH
92326: LD_VAR 0 5
92330: ARRAY
92331: PUSH
92332: LD_EXP 135
92336: GREATEREQUAL
92337: IFFALSE 92341
// exit ;
92339: GO 92541
// ComMoveXY ( unit , x , y ) ;
92341: LD_VAR 0 1
92345: PPUSH
92346: LD_VAR 0 2
92350: PPUSH
92351: LD_VAR 0 3
92355: PPUSH
92356: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
92360: LD_INT 35
92362: PPUSH
92363: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
92367: LD_VAR 0 1
92371: PPUSH
92372: LD_VAR 0 2
92376: PPUSH
92377: LD_VAR 0 3
92381: PPUSH
92382: CALL 66064 0 3
92386: NOT
92387: PUSH
92388: LD_VAR 0 1
92392: PPUSH
92393: CALL_OW 314
92397: AND
92398: IFFALSE 92402
// exit ;
92400: GO 92541
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
92402: LD_VAR 0 2
92406: PPUSH
92407: LD_VAR 0 3
92411: PPUSH
92412: CALL_OW 428
92416: PUSH
92417: LD_VAR 0 1
92421: EQUAL
92422: PUSH
92423: LD_VAR 0 1
92427: PPUSH
92428: CALL_OW 314
92432: NOT
92433: AND
92434: IFFALSE 92360
// PlaySoundXY ( x , y , PlantMine ) ;
92436: LD_VAR 0 2
92440: PPUSH
92441: LD_VAR 0 3
92445: PPUSH
92446: LD_STRING PlantMine
92448: PPUSH
92449: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
92453: LD_VAR 0 2
92457: PPUSH
92458: LD_VAR 0 3
92462: PPUSH
92463: LD_VAR 0 1
92467: PPUSH
92468: CALL_OW 255
92472: PPUSH
92473: LD_INT 0
92475: PPUSH
92476: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
92480: LD_ADDR_EXP 134
92484: PUSH
92485: LD_EXP 134
92489: PPUSH
92490: LD_VAR 0 5
92494: PUSH
92495: LD_EXP 134
92499: PUSH
92500: LD_VAR 0 5
92504: ARRAY
92505: PUSH
92506: LD_INT 1
92508: PLUS
92509: PUSH
92510: EMPTY
92511: LIST
92512: LIST
92513: PPUSH
92514: LD_VAR 0 2
92518: PUSH
92519: LD_VAR 0 3
92523: PUSH
92524: EMPTY
92525: LIST
92526: LIST
92527: PPUSH
92528: CALL 34518 0 3
92532: ST_TO_ADDR
// result := true ;
92533: LD_ADDR_VAR 0 4
92537: PUSH
92538: LD_INT 1
92540: ST_TO_ADDR
// end ;
92541: LD_VAR 0 4
92545: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
92546: LD_INT 0
92548: PPUSH
92549: PPUSH
92550: PPUSH
// if not unit in minersList then
92551: LD_VAR 0 1
92555: PUSH
92556: LD_EXP 133
92560: IN
92561: NOT
92562: IFFALSE 92566
// exit ;
92564: GO 92958
// index := GetElementIndex ( minersList , unit ) ;
92566: LD_ADDR_VAR 0 6
92570: PUSH
92571: LD_EXP 133
92575: PPUSH
92576: LD_VAR 0 1
92580: PPUSH
92581: CALL 34303 0 2
92585: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
92586: LD_ADDR_VAR 0 5
92590: PUSH
92591: DOUBLE
92592: LD_EXP 134
92596: PUSH
92597: LD_VAR 0 6
92601: ARRAY
92602: INC
92603: ST_TO_ADDR
92604: LD_INT 1
92606: PUSH
92607: FOR_DOWNTO
92608: IFFALSE 92769
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
92610: LD_EXP 134
92614: PUSH
92615: LD_VAR 0 6
92619: ARRAY
92620: PUSH
92621: LD_VAR 0 5
92625: ARRAY
92626: PUSH
92627: LD_INT 1
92629: ARRAY
92630: PUSH
92631: LD_VAR 0 2
92635: EQUAL
92636: PUSH
92637: LD_EXP 134
92641: PUSH
92642: LD_VAR 0 6
92646: ARRAY
92647: PUSH
92648: LD_VAR 0 5
92652: ARRAY
92653: PUSH
92654: LD_INT 2
92656: ARRAY
92657: PUSH
92658: LD_VAR 0 3
92662: EQUAL
92663: AND
92664: IFFALSE 92767
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92666: LD_EXP 134
92670: PUSH
92671: LD_VAR 0 6
92675: ARRAY
92676: PUSH
92677: LD_VAR 0 5
92681: ARRAY
92682: PUSH
92683: LD_INT 1
92685: ARRAY
92686: PPUSH
92687: LD_EXP 134
92691: PUSH
92692: LD_VAR 0 6
92696: ARRAY
92697: PUSH
92698: LD_VAR 0 5
92702: ARRAY
92703: PUSH
92704: LD_INT 2
92706: ARRAY
92707: PPUSH
92708: LD_VAR 0 1
92712: PPUSH
92713: CALL_OW 255
92717: PPUSH
92718: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92722: LD_ADDR_EXP 134
92726: PUSH
92727: LD_EXP 134
92731: PPUSH
92732: LD_VAR 0 6
92736: PPUSH
92737: LD_EXP 134
92741: PUSH
92742: LD_VAR 0 6
92746: ARRAY
92747: PPUSH
92748: LD_VAR 0 5
92752: PPUSH
92753: CALL_OW 3
92757: PPUSH
92758: CALL_OW 1
92762: ST_TO_ADDR
// exit ;
92763: POP
92764: POP
92765: GO 92958
// end ; end ;
92767: GO 92607
92769: POP
92770: POP
// for i := minerMinesList [ index ] downto 1 do
92771: LD_ADDR_VAR 0 5
92775: PUSH
92776: DOUBLE
92777: LD_EXP 134
92781: PUSH
92782: LD_VAR 0 6
92786: ARRAY
92787: INC
92788: ST_TO_ADDR
92789: LD_INT 1
92791: PUSH
92792: FOR_DOWNTO
92793: IFFALSE 92956
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
92795: LD_EXP 134
92799: PUSH
92800: LD_VAR 0 6
92804: ARRAY
92805: PUSH
92806: LD_VAR 0 5
92810: ARRAY
92811: PUSH
92812: LD_INT 1
92814: ARRAY
92815: PPUSH
92816: LD_EXP 134
92820: PUSH
92821: LD_VAR 0 6
92825: ARRAY
92826: PUSH
92827: LD_VAR 0 5
92831: ARRAY
92832: PUSH
92833: LD_INT 2
92835: ARRAY
92836: PPUSH
92837: LD_VAR 0 2
92841: PPUSH
92842: LD_VAR 0 3
92846: PPUSH
92847: CALL_OW 298
92851: PUSH
92852: LD_INT 6
92854: LESS
92855: IFFALSE 92954
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92857: LD_EXP 134
92861: PUSH
92862: LD_VAR 0 6
92866: ARRAY
92867: PUSH
92868: LD_VAR 0 5
92872: ARRAY
92873: PUSH
92874: LD_INT 1
92876: ARRAY
92877: PPUSH
92878: LD_EXP 134
92882: PUSH
92883: LD_VAR 0 6
92887: ARRAY
92888: PUSH
92889: LD_VAR 0 5
92893: ARRAY
92894: PUSH
92895: LD_INT 2
92897: ARRAY
92898: PPUSH
92899: LD_VAR 0 1
92903: PPUSH
92904: CALL_OW 255
92908: PPUSH
92909: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92913: LD_ADDR_EXP 134
92917: PUSH
92918: LD_EXP 134
92922: PPUSH
92923: LD_VAR 0 6
92927: PPUSH
92928: LD_EXP 134
92932: PUSH
92933: LD_VAR 0 6
92937: ARRAY
92938: PPUSH
92939: LD_VAR 0 5
92943: PPUSH
92944: CALL_OW 3
92948: PPUSH
92949: CALL_OW 1
92953: ST_TO_ADDR
// end ; end ;
92954: GO 92792
92956: POP
92957: POP
// end ;
92958: LD_VAR 0 4
92962: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
92963: LD_INT 0
92965: PPUSH
92966: PPUSH
92967: PPUSH
92968: PPUSH
92969: PPUSH
92970: PPUSH
92971: PPUSH
92972: PPUSH
92973: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
92974: LD_VAR 0 1
92978: PPUSH
92979: CALL_OW 264
92983: PUSH
92984: LD_INT 81
92986: EQUAL
92987: NOT
92988: PUSH
92989: LD_VAR 0 1
92993: PUSH
92994: LD_EXP 133
92998: IN
92999: NOT
93000: OR
93001: IFFALSE 93005
// exit ;
93003: GO 93327
// index := GetElementIndex ( minersList , unit ) ;
93005: LD_ADDR_VAR 0 6
93009: PUSH
93010: LD_EXP 133
93014: PPUSH
93015: LD_VAR 0 1
93019: PPUSH
93020: CALL 34303 0 2
93024: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
93025: LD_ADDR_VAR 0 8
93029: PUSH
93030: LD_EXP 135
93034: PUSH
93035: LD_EXP 134
93039: PUSH
93040: LD_VAR 0 6
93044: ARRAY
93045: MINUS
93046: ST_TO_ADDR
// if not minesFreeAmount then
93047: LD_VAR 0 8
93051: NOT
93052: IFFALSE 93056
// exit ;
93054: GO 93327
// tmp := [ ] ;
93056: LD_ADDR_VAR 0 7
93060: PUSH
93061: EMPTY
93062: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
93063: LD_ADDR_VAR 0 5
93067: PUSH
93068: DOUBLE
93069: LD_INT 1
93071: DEC
93072: ST_TO_ADDR
93073: LD_VAR 0 8
93077: PUSH
93078: FOR_TO
93079: IFFALSE 93274
// begin _d := rand ( 0 , 5 ) ;
93081: LD_ADDR_VAR 0 11
93085: PUSH
93086: LD_INT 0
93088: PPUSH
93089: LD_INT 5
93091: PPUSH
93092: CALL_OW 12
93096: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
93097: LD_ADDR_VAR 0 12
93101: PUSH
93102: LD_INT 2
93104: PPUSH
93105: LD_INT 6
93107: PPUSH
93108: CALL_OW 12
93112: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
93113: LD_ADDR_VAR 0 9
93117: PUSH
93118: LD_VAR 0 2
93122: PPUSH
93123: LD_VAR 0 11
93127: PPUSH
93128: LD_VAR 0 12
93132: PPUSH
93133: CALL_OW 272
93137: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
93138: LD_ADDR_VAR 0 10
93142: PUSH
93143: LD_VAR 0 3
93147: PPUSH
93148: LD_VAR 0 11
93152: PPUSH
93153: LD_VAR 0 12
93157: PPUSH
93158: CALL_OW 273
93162: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
93163: LD_VAR 0 9
93167: PPUSH
93168: LD_VAR 0 10
93172: PPUSH
93173: CALL_OW 488
93177: PUSH
93178: LD_VAR 0 9
93182: PUSH
93183: LD_VAR 0 10
93187: PUSH
93188: EMPTY
93189: LIST
93190: LIST
93191: PUSH
93192: LD_VAR 0 7
93196: IN
93197: NOT
93198: AND
93199: PUSH
93200: LD_VAR 0 9
93204: PPUSH
93205: LD_VAR 0 10
93209: PPUSH
93210: CALL_OW 458
93214: NOT
93215: AND
93216: IFFALSE 93258
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
93218: LD_ADDR_VAR 0 7
93222: PUSH
93223: LD_VAR 0 7
93227: PPUSH
93228: LD_VAR 0 7
93232: PUSH
93233: LD_INT 1
93235: PLUS
93236: PPUSH
93237: LD_VAR 0 9
93241: PUSH
93242: LD_VAR 0 10
93246: PUSH
93247: EMPTY
93248: LIST
93249: LIST
93250: PPUSH
93251: CALL_OW 1
93255: ST_TO_ADDR
93256: GO 93272
// i := i - 1 ;
93258: LD_ADDR_VAR 0 5
93262: PUSH
93263: LD_VAR 0 5
93267: PUSH
93268: LD_INT 1
93270: MINUS
93271: ST_TO_ADDR
// end ;
93272: GO 93078
93274: POP
93275: POP
// for i in tmp do
93276: LD_ADDR_VAR 0 5
93280: PUSH
93281: LD_VAR 0 7
93285: PUSH
93286: FOR_IN
93287: IFFALSE 93325
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
93289: LD_VAR 0 1
93293: PPUSH
93294: LD_VAR 0 5
93298: PUSH
93299: LD_INT 1
93301: ARRAY
93302: PPUSH
93303: LD_VAR 0 5
93307: PUSH
93308: LD_INT 2
93310: ARRAY
93311: PPUSH
93312: CALL 92271 0 3
93316: NOT
93317: IFFALSE 93323
// exit ;
93319: POP
93320: POP
93321: GO 93327
93323: GO 93286
93325: POP
93326: POP
// end ;
93327: LD_VAR 0 4
93331: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
93332: LD_INT 0
93334: PPUSH
93335: PPUSH
93336: PPUSH
93337: PPUSH
93338: PPUSH
93339: PPUSH
93340: PPUSH
93341: PPUSH
93342: PPUSH
// if GetClass ( unit ) <> class_sniper then
93343: LD_VAR 0 1
93347: PPUSH
93348: CALL_OW 257
93352: PUSH
93353: LD_INT 5
93355: NONEQUAL
93356: IFFALSE 93360
// exit ;
93358: GO 93826
// dist := 8 ;
93360: LD_ADDR_VAR 0 5
93364: PUSH
93365: LD_INT 8
93367: ST_TO_ADDR
// viewRange := 12 ;
93368: LD_ADDR_VAR 0 8
93372: PUSH
93373: LD_INT 12
93375: ST_TO_ADDR
// side := GetSide ( unit ) ;
93376: LD_ADDR_VAR 0 6
93380: PUSH
93381: LD_VAR 0 1
93385: PPUSH
93386: CALL_OW 255
93390: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
93391: LD_INT 61
93393: PPUSH
93394: LD_VAR 0 6
93398: PPUSH
93399: CALL_OW 321
93403: PUSH
93404: LD_INT 2
93406: EQUAL
93407: IFFALSE 93417
// viewRange := 16 ;
93409: LD_ADDR_VAR 0 8
93413: PUSH
93414: LD_INT 16
93416: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
93417: LD_VAR 0 1
93421: PPUSH
93422: LD_VAR 0 2
93426: PPUSH
93427: LD_VAR 0 3
93431: PPUSH
93432: CALL_OW 297
93436: PUSH
93437: LD_VAR 0 5
93441: GREATER
93442: IFFALSE 93521
// begin ComMoveXY ( unit , x , y ) ;
93444: LD_VAR 0 1
93448: PPUSH
93449: LD_VAR 0 2
93453: PPUSH
93454: LD_VAR 0 3
93458: PPUSH
93459: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
93463: LD_INT 35
93465: PPUSH
93466: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
93470: LD_VAR 0 1
93474: PPUSH
93475: LD_VAR 0 2
93479: PPUSH
93480: LD_VAR 0 3
93484: PPUSH
93485: CALL 66064 0 3
93489: NOT
93490: IFFALSE 93494
// exit ;
93492: GO 93826
// until GetDistUnitXY ( unit , x , y ) < dist ;
93494: LD_VAR 0 1
93498: PPUSH
93499: LD_VAR 0 2
93503: PPUSH
93504: LD_VAR 0 3
93508: PPUSH
93509: CALL_OW 297
93513: PUSH
93514: LD_VAR 0 5
93518: LESS
93519: IFFALSE 93463
// end ; ComTurnXY ( unit , x , y ) ;
93521: LD_VAR 0 1
93525: PPUSH
93526: LD_VAR 0 2
93530: PPUSH
93531: LD_VAR 0 3
93535: PPUSH
93536: CALL_OW 118
// repeat if Multiplayer then
93540: LD_OWVAR 4
93544: IFFALSE 93555
// wait ( 35 ) else
93546: LD_INT 35
93548: PPUSH
93549: CALL_OW 67
93553: GO 93562
// wait ( 5 ) ;
93555: LD_INT 5
93557: PPUSH
93558: CALL_OW 67
// _d := GetDir ( unit ) ;
93562: LD_ADDR_VAR 0 11
93566: PUSH
93567: LD_VAR 0 1
93571: PPUSH
93572: CALL_OW 254
93576: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
93577: LD_ADDR_VAR 0 7
93581: PUSH
93582: LD_VAR 0 1
93586: PPUSH
93587: CALL_OW 250
93591: PPUSH
93592: LD_VAR 0 1
93596: PPUSH
93597: CALL_OW 251
93601: PPUSH
93602: LD_VAR 0 2
93606: PPUSH
93607: LD_VAR 0 3
93611: PPUSH
93612: CALL 68672 0 4
93616: ST_TO_ADDR
// until dir = _d ;
93617: LD_VAR 0 7
93621: PUSH
93622: LD_VAR 0 11
93626: EQUAL
93627: IFFALSE 93540
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
93629: LD_ADDR_VAR 0 9
93633: PUSH
93634: LD_VAR 0 1
93638: PPUSH
93639: CALL_OW 250
93643: PPUSH
93644: LD_VAR 0 7
93648: PPUSH
93649: LD_VAR 0 5
93653: PPUSH
93654: CALL_OW 272
93658: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
93659: LD_ADDR_VAR 0 10
93663: PUSH
93664: LD_VAR 0 1
93668: PPUSH
93669: CALL_OW 251
93673: PPUSH
93674: LD_VAR 0 7
93678: PPUSH
93679: LD_VAR 0 5
93683: PPUSH
93684: CALL_OW 273
93688: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93689: LD_VAR 0 9
93693: PPUSH
93694: LD_VAR 0 10
93698: PPUSH
93699: CALL_OW 488
93703: NOT
93704: IFFALSE 93708
// exit ;
93706: GO 93826
// ComAnimCustom ( unit , 1 ) ;
93708: LD_VAR 0 1
93712: PPUSH
93713: LD_INT 1
93715: PPUSH
93716: CALL_OW 592
// p := 0 ;
93720: LD_ADDR_VAR 0 12
93724: PUSH
93725: LD_INT 0
93727: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
93728: LD_VAR 0 9
93732: PPUSH
93733: LD_VAR 0 10
93737: PPUSH
93738: LD_VAR 0 6
93742: PPUSH
93743: LD_VAR 0 8
93747: PPUSH
93748: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
93752: LD_INT 35
93754: PPUSH
93755: CALL_OW 67
// p := Inc ( p ) ;
93759: LD_ADDR_VAR 0 12
93763: PUSH
93764: LD_VAR 0 12
93768: PPUSH
93769: CALL 68628 0 1
93773: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
93774: LD_VAR 0 12
93778: PUSH
93779: LD_INT 3
93781: EQUAL
93782: PUSH
93783: LD_VAR 0 1
93787: PPUSH
93788: CALL_OW 302
93792: NOT
93793: OR
93794: PUSH
93795: LD_VAR 0 1
93799: PPUSH
93800: CALL_OW 301
93804: OR
93805: IFFALSE 93752
// RemoveSeeing ( _x , _y , side ) ;
93807: LD_VAR 0 9
93811: PPUSH
93812: LD_VAR 0 10
93816: PPUSH
93817: LD_VAR 0 6
93821: PPUSH
93822: CALL_OW 331
// end ; end_of_file
93826: LD_VAR 0 4
93830: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
93831: LD_VAR 0 1
93835: PPUSH
93836: LD_VAR 0 2
93840: PPUSH
93841: LD_VAR 0 3
93845: PPUSH
93846: LD_VAR 0 4
93850: PPUSH
93851: LD_VAR 0 5
93855: PPUSH
93856: LD_VAR 0 6
93860: PPUSH
93861: CALL 72529 0 6
// end ;
93865: PPOPN 6
93867: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
93868: LD_INT 0
93870: PPUSH
// begin if not units then
93871: LD_VAR 0 1
93875: NOT
93876: IFFALSE 93880
// exit ;
93878: GO 93880
// end ;
93880: PPOPN 7
93882: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
93883: CALL 72416 0 0
// end ;
93887: PPOPN 1
93889: END
